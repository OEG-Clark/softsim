{"home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.png.encode": [[4, 33], ["len", "range", "struct.pack", "struct.pack", "png.encode.chunk"], "function", ["None"], ["def", "encode", "(", "buf", ",", "width", ",", "height", ")", ":", "\n", "  ", "\"\"\" buf: must be bytes or a bytearray in py3, a regular string in py2. formatted RGBRGB... \"\"\"", "\n", "assert", "(", "width", "*", "height", "*", "3", "==", "len", "(", "buf", ")", ")", "\n", "bpp", "=", "3", "\n", "\n", "def", "raw_data", "(", ")", ":", "\n", "# reverse the vertical line order and add null bytes at the start", "\n", "    ", "row_bytes", "=", "width", "*", "bpp", "\n", "for", "row_start", "in", "range", "(", "(", "height", "-", "1", ")", "*", "width", "*", "bpp", ",", "-", "1", ",", "-", "row_bytes", ")", ":", "\n", "      ", "yield", "b'\\x00'", "\n", "yield", "buf", "[", "row_start", ":", "row_start", "+", "row_bytes", "]", "\n", "\n", "", "", "def", "chunk", "(", "tag", ",", "data", ")", ":", "\n", "    ", "return", "[", "\n", "struct", ".", "pack", "(", "\"!I\"", ",", "len", "(", "data", ")", ")", ",", "\n", "tag", ",", "\n", "data", ",", "\n", "struct", ".", "pack", "(", "\"!I\"", ",", "0xFFFFFFFF", "&", "zlib", ".", "crc32", "(", "data", ",", "zlib", ".", "crc32", "(", "tag", ")", ")", ")", "\n", "]", "\n", "\n", "", "SIGNATURE", "=", "b'\\x89PNG\\r\\n\\x1a\\n'", "\n", "COLOR_TYPE_RGB", "=", "2", "\n", "COLOR_TYPE_RGBA", "=", "6", "\n", "bit_depth", "=", "8", "\n", "return", "b''", ".", "join", "(", "\n", "[", "SIGNATURE", "]", "+", "\n", "chunk", "(", "b'IHDR'", ",", "struct", ".", "pack", "(", "\"!2I5B\"", ",", "width", ",", "height", ",", "bit_depth", ",", "COLOR_TYPE_RGB", ",", "0", ",", "0", ",", "0", ")", ")", "+", "\n", "chunk", "(", "b'IDAT'", ",", "zlib", ".", "compress", "(", "b''", ".", "join", "(", "raw_data", "(", ")", ")", ",", "9", ")", ")", "+", "\n", "chunk", "(", "b'IEND'", ",", "b''", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.image_pool.ImagePool.__init__": [[6, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "pool_size", "=", "pool_size", "\n", "if", "self", ".", "pool_size", ">", "0", ":", "\n", "            ", "self", ".", "num_imgs", "=", "0", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.image_pool.ImagePool.query": [[12, 33], ["torch.autograd.Variable", "torch.unsqueeze", "torch.cat", "image_pool.ImagePool.images.append", "torch.autograd.Variable.append", "random.uniform", "random.randint", "image_pool.ImagePool.images[].clone", "torch.autograd.Variable.append", "torch.autograd.Variable.append"], "methods", ["None"], ["", "", "def", "query", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "pool_size", "==", "0", ":", "\n", "            ", "return", "images", "\n", "", "return_images", "=", "[", "]", "\n", "for", "image", "in", "images", ".", "data", ":", "\n", "            ", "image", "=", "torch", ".", "unsqueeze", "(", "image", ",", "0", ")", "\n", "if", "self", ".", "num_imgs", "<", "self", ".", "pool_size", ":", "\n", "                ", "self", ".", "num_imgs", "=", "self", ".", "num_imgs", "+", "1", "\n", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "return_images", ".", "append", "(", "image", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "p", ">", "0.5", ":", "\n", "                    ", "random_id", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "pool_size", "-", "1", ")", "\n", "tmp", "=", "self", ".", "images", "[", "random_id", "]", ".", "clone", "(", ")", "\n", "self", ".", "images", "[", "random_id", "]", "=", "image", "\n", "return_images", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "return_images", ".", "append", "(", "image", ")", "\n", "", "", "", "return_images", "=", "Variable", "(", "torch", ".", "cat", "(", "return_images", ",", "0", ")", ")", "\n", "return", "return_images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.visualizer.Visualizer.__init__": [[8, 21], ["os.path.join", "visdom.Visdom", "open", "time.strftime", "log_file.write"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "# self.opt = opt", "\n", "        ", "self", ".", "display_id", "=", "opt", ".", "display_id", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "if", "self", ".", "display_id", ">", "0", ":", "\n", "            ", "import", "visdom", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "port", "=", "opt", ".", "display_port", ")", "\n", "\n", "", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.visualizer.Visualizer.display_current_results": [[23, 31], ["visuals.items", "visualizer.Visualizer.vis.image", "image_numpy.transpose", "dict"], "methods", ["None"], ["", "", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "display_id", ">", "0", ":", "\n", "# show images in the browser", "\n", "            ", "idx", "=", "1", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "vis", ".", "image", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ",", "opts", "=", "dict", "(", "title", "=", "label", ")", ",", "\n", "win", "=", "self", ".", "display_id", "+", "idx", ")", "\n", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.visualizer.Visualizer.plot_current_errors": [[34, 53], ["visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.vis.line", "hasattr", "list", "numpy.mean", "numpy.stack", "numpy.array", "errors.keys", "len", "numpy.array"], "methods", ["None"], ["", "", "", "def", "plot_current_errors", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "opt", ",", "errors", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n", "            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "errors", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "#print(\"#################\")", "\n", "#print(errors)", "\n", "#print('#################')", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "np", ".", "mean", "(", "errors", "[", "k", "]", ")", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "#print(np.stack([np.array(self.plot_data['X'])]*len(self.plot_data['legend']),1))", "\n", "#print(np.array(self.plot_data['Y']))", "\n", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'X'", "]", ")", "]", "*", "len", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", ",", "1", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", ",", "\n", "opts", "=", "{", "\n", "'title'", ":", "self", ".", "name", "+", "' loss over time'", ",", "\n", "'legend'", ":", "self", ".", "plot_data", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'loss'", "}", ",", "\n", "win", "=", "self", ".", "display_id", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.visualizer.Visualizer.print_current_errors": [[56, 65], ["errors.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", ":", "\n", "            ", "v", "=", "[", "'%.3f'", "%", "iv", "for", "iv", "in", "v", "]", "\n", "message", "+=", "k", "+", "': '", "+", "', '", ".", "join", "(", "v", ")", "+", "' | '", "\n", "\n", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.visualizer.Visualizer.save_images": [[67, 86], ["webpage.get_image_dir", "ntpath.basename", "webpage.add_header", "visuals.items", "webpage.add_images", "os.path.splitext", "os.path.join", "util.util.util().save_image", "ims.append", "txts.append", "links.append", "util.util.util"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.util.util.save_image"], ["", "", "def", "save_images", "(", "self", ",", "webpage", ",", "visuals", ",", "image_path", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "\n", "webpage", ".", "add_header", "(", "name", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "image_name", "=", "'%s_%s.png'", "%", "(", "name", ",", "label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "util", "(", ")", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.visualizer.Visualizer.save_image_matrix": [[87, 106], ["visualizer.Visualizer.stack_images", "util.util.util().save_image", "list", "get_domain", "x.split", "visuals.items", "util.util.util", "get_domain", "images_list.append", "images_list.append"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.visualizer.Visualizer.stack_images", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.util.util.save_image", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.get_domain", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.get_domain"], ["", "def", "save_image_matrix", "(", "self", ",", "visuals_list", ",", "save_path", ")", ":", "\n", "        ", "images_list", "=", "[", "]", "\n", "get_domain", "=", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "\n", "for", "visuals", "in", "visuals_list", ":", "\n", "            ", "pairs", "=", "list", "(", "visuals", ".", "items", "(", ")", ")", "\n", "real_label", ",", "real_img", "=", "pairs", "[", "0", "]", "\n", "real_dom", "=", "get_domain", "(", "real_label", ")", "\n", "\n", "for", "label", ",", "img", "in", "pairs", ":", "\n", "                ", "if", "'fake'", "not", "in", "label", ":", "\n", "                    ", "continue", "\n", "", "if", "get_domain", "(", "label", ")", "==", "real_dom", ":", "\n", "                    ", "images_list", ".", "append", "(", "real_img", ")", "\n", "", "else", ":", "\n", "                    ", "images_list", ".", "append", "(", "img", ")", "\n", "\n", "", "", "", "immat", "=", "self", ".", "stack_images", "(", "images_list", ")", "\n", "util", "(", ")", ".", "save_image", "(", "immat", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.visualizer.Visualizer.stack_images": [[108, 123], ["int", "enumerate", "numpy.array", "data.reshape.reshape.reshape().transpose", "data.reshape.reshape.reshape", "numpy.ceil", "numpy.pad", "numpy.pad", "numpy.pad", "numpy.stack", "numpy.sqrt", "data.reshape.reshape.reshape", "tuple", "len", "range"], "methods", ["None"], ["", "def", "stack_images", "(", "self", ",", "list_np_images", ")", ":", "\n", "        ", "n", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "len", "(", "list_np_images", ")", ")", ")", ")", "\n", "\n", "# add padding between images", "\n", "for", "i", ",", "im", "in", "enumerate", "(", "list_np_images", ")", ":", "\n", "            ", "val", "=", "255", "if", "i", "%", "n", "==", "i", "//", "n", "else", "0", "\n", "r_pad", "=", "np", ".", "pad", "(", "im", "[", ":", ",", ":", ",", "0", "]", ",", "(", "3", ",", "3", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "g_pad", "=", "np", ".", "pad", "(", "im", "[", ":", ",", ":", ",", "1", "]", ",", "(", "3", ",", "3", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "val", ")", "\n", "b_pad", "=", "np", ".", "pad", "(", "im", "[", ":", ",", ":", ",", "2", "]", ",", "(", "3", ",", "3", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "list_np_images", "[", "i", "]", "=", "np", ".", "stack", "(", "[", "r_pad", ",", "g_pad", ",", "b_pad", "]", ",", "axis", "=", "2", ")", "\n", "\n", "", "data", "=", "np", ".", "array", "(", "list_np_images", ")", "\n", "data", "=", "data", ".", "reshape", "(", "(", "n", ",", "n", ")", "+", "data", ".", "shape", "[", "1", ":", "]", ")", ".", "transpose", "(", "(", "0", ",", "2", ",", "1", ",", "3", ")", "+", "tuple", "(", "range", "(", "4", ",", "data", ".", "ndim", "+", "1", ")", ")", ")", "\n", "data", "=", "data", ".", "reshape", "(", "(", "n", "*", "data", ".", "shape", "[", "1", "]", ",", "n", "*", "data", ".", "shape", "[", "3", "]", ")", "+", "data", ".", "shape", "[", "4", ":", "]", ")", "\n", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.get_data.GetData.__init__": [[29, 36], ["url_dict.get", "technique.lower"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.get_data.GetData.get"], ["def", "__init__", "(", "self", ",", "technique", "=", "'cyclegan'", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "url_dict", "=", "{", "\n", "'pix2pix'", ":", "'https://people.eecs.berkeley.edu/~tinghuiz/projects/pix2pix/datasets'", ",", "\n", "'cyclegan'", ":", "'https://people.eecs.berkeley.edu/~taesung_park/CycleGAN/datasets'", "\n", "}", "\n", "self", ".", "url", "=", "url_dict", ".", "get", "(", "technique", ".", "lower", "(", ")", ")", "\n", "self", ".", "_verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.get_data.GetData._print": [[37, 40], ["print"], "methods", ["None"], ["", "def", "_print", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "_verbose", ":", "\n", "            ", "print", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.get_data.GetData._get_options": [[41, 47], ["bs4.BeautifulSoup", "bs4.BeautifulSoup.find_all", "h.text.endswith"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_options", "(", "r", ")", ":", "\n", "        ", "soup", "=", "BeautifulSoup", "(", "r", ".", "text", ",", "'lxml'", ")", "\n", "options", "=", "[", "h", ".", "text", "for", "h", "in", "soup", ".", "find_all", "(", "'a'", ",", "href", "=", "True", ")", "\n", "if", "h", ".", "text", ".", "endswith", "(", "(", "'.zip'", ",", "'tar.gz'", ")", ")", "]", "\n", "return", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.get_data.GetData._present_options": [[48, 57], ["requests.get", "get_data.GetData._get_options", "print", "enumerate", "input", "print", "int"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.get_data.GetData.get", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.get_data.GetData._get_options"], ["", "def", "_present_options", "(", "self", ")", ":", "\n", "        ", "r", "=", "requests", ".", "get", "(", "self", ".", "url", ")", "\n", "options", "=", "self", ".", "_get_options", "(", "r", ")", "\n", "print", "(", "'Options:\\n'", ")", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "options", ")", ":", "\n", "            ", "print", "(", "\"{0}: {1}\"", ".", "format", "(", "i", ",", "o", ")", ")", "\n", "", "choice", "=", "input", "(", "\"\\nPlease enter the number of the \"", "\n", "\"dataset above you wish to download:\"", ")", "\n", "return", "options", "[", "int", "(", "choice", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.get_data.GetData._download_data": [[58, 80], ["os.path.basename", "os.path.join", "os.path.basename.endswith", "get_data.GetData._print", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "os.remove", "os.path.isdir", "os.makedirs", "open", "requests.get", "f.write", "tarfile.open", "os.path.basename.endswith", "zipfile.ZipFile", "ValueError"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.get_data.GetData._print", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.get_data.GetData.get"], ["", "def", "_download_data", "(", "self", ",", "dataset_url", ",", "save_path", ")", ":", "\n", "        ", "if", "not", "isdir", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "base", "=", "basename", "(", "dataset_url", ")", "\n", "temp_save_path", "=", "join", "(", "save_path", ",", "base", ")", "\n", "\n", "with", "open", "(", "temp_save_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "r", "=", "requests", ".", "get", "(", "dataset_url", ")", "\n", "f", ".", "write", "(", "r", ".", "content", ")", "\n", "\n", "", "if", "base", ".", "endswith", "(", "'.tar.gz'", ")", ":", "\n", "            ", "obj", "=", "tarfile", ".", "open", "(", "temp_save_path", ")", "\n", "", "elif", "base", ".", "endswith", "(", "'.zip'", ")", ":", "\n", "            ", "obj", "=", "ZipFile", "(", "temp_save_path", ",", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown File Type: {0}.\"", ".", "format", "(", "base", ")", ")", "\n", "\n", "", "self", ".", "_print", "(", "\"Unpacking Data...\"", ")", "\n", "obj", ".", "extractall", "(", "save_path", ")", "\n", "obj", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "temp_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.get_data.GetData.get": [[81, 116], ["os.path.join", "os.path.isdir", "os.path.abspath", "get_data.GetData._present_options", "warnings.warn", "get_data.GetData._print", "get_data.GetData._download_data", "get_data.GetData.split"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.get_data.GetData._present_options", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.get_data.GetData._print", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.get_data.GetData._download_data"], ["", "def", "get", "(", "self", ",", "save_path", ",", "dataset", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Download a dataset.\n\n        Args:\n            save_path : str\n                A directory to save the data to.\n            dataset : str, optional\n                A specific dataset to download.\n                Note: this must include the file extension.\n                If None, options will be presented for you\n                to choose from.\n\n        Returns:\n            save_path_full : str\n                The absolute path to the downloaded data.\n\n        \"\"\"", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "selected_dataset", "=", "self", ".", "_present_options", "(", ")", "\n", "", "else", ":", "\n", "            ", "selected_dataset", "=", "dataset", "\n", "\n", "", "save_path_full", "=", "join", "(", "save_path", ",", "selected_dataset", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n", "if", "isdir", "(", "save_path_full", ")", ":", "\n", "            ", "warn", "(", "\"\\n'{0}' already exists. Voiding Download.\"", ".", "format", "(", "\n", "save_path_full", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_print", "(", "'Downloading Data...'", ")", "\n", "url", "=", "\"{0}/{1}\"", ".", "format", "(", "self", ".", "url", ",", "selected_dataset", ")", "\n", "self", ".", "_download_data", "(", "url", ",", "save_path", "=", "save_path", ")", "\n", "\n", "", "return", "abspath", "(", "save_path_full", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.util.util.tensor2im": [[13, 17], ["image_tensor[].cpu().float().numpy", "image_tensor[].cpu().float().numpy.astype", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "methods", ["None"], ["    ", "def", "tensor2im", "(", "self", ",", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "        ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.util.util.gkern_2d": [[18, 25], ["numpy.zeros", "scipy.ndimage.filters.gaussian_filter", "numpy.stack", "numpy.expand_dims"], "methods", ["None"], ["", "def", "gkern_2d", "(", "self", ",", "size", "=", "5", ",", "sigma", "=", "3", ")", ":", "\n", "# Create 2D gaussian kernel", "\n", "        ", "dirac", "=", "np", ".", "zeros", "(", "(", "size", ",", "size", ")", ")", "\n", "dirac", "[", "size", "//", "2", ",", "size", "//", "2", "]", "=", "1", "\n", "mask", "=", "gaussian_filter", "(", "dirac", ",", "sigma", ")", "\n", "# Adjust dimensions for torch conv2d", "\n", "return", "np", ".", "stack", "(", "[", "np", ".", "expand_dims", "(", "mask", ",", "axis", "=", "0", ")", "]", "*", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.util.util.diagnose_network": [[27, 38], ["net.parameters", "print", "print", "torch.mean", "torch.abs"], "methods", ["None"], ["", "def", "diagnose_network", "(", "self", ",", "net", ",", "name", "=", "'network'", ")", ":", "\n", "        ", "mean", "=", "0.0", "\n", "count", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                ", "mean", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "param", ".", "grad", ".", "data", ")", ")", "\n", "count", "+=", "1", "\n", "", "", "if", "count", ">", "0", ":", "\n", "            ", "mean", "=", "mean", "/", "count", "\n", "", "print", "(", "name", ")", "\n", "print", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.util.util.save_image": [[40, 43], ["PIL.Image.fromarray", "PIL.Image.fromarray.save"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.save"], ["", "def", "save_image", "(", "self", ",", "image_numpy", ",", "image_path", ")", ":", "\n", "        ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.util.util.info": [[44, 53], ["print", "dir", "isinstance", "getattr", "s.split", "method.ljust", "processFunc", "str", "getattr"], "methods", ["None"], ["", "def", "info", "(", "self", ",", "object", ",", "spacing", "=", "10", ",", "collapse", "=", "1", ")", ":", "\n", "        ", "\"\"\"Print methods and doc strings.\n        Takes module, class, list, dictionary, or string.\"\"\"", "\n", "methodList", "=", "[", "e", "for", "e", "in", "dir", "(", "object", ")", "if", "isinstance", "(", "getattr", "(", "object", ",", "e", ")", ",", "collections", ".", "Callable", ")", "]", "\n", "processFunc", "=", "collapse", "and", "(", "lambda", "s", ":", "\" \"", ".", "join", "(", "s", ".", "split", "(", ")", ")", ")", "or", "(", "lambda", "s", ":", "s", ")", "\n", "print", "(", "\"\\n\"", ".", "join", "(", "[", "\"%s %s\"", "%", "\n", "(", "method", ".", "ljust", "(", "spacing", ")", ",", "\n", "processFunc", "(", "str", "(", "getattr", "(", "object", ",", "method", ")", ".", "__doc__", ")", ")", ")", "\n", "for", "method", "in", "methodList", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.util.util.varname": [[54, 59], ["inspect.getframeinfo", "re.search", "re.search.group", "inspect.currentframe"], "methods", ["None"], ["", "def", "varname", "(", "self", ",", "p", ")", ":", "\n", "        ", "for", "line", "in", "inspect", ".", "getframeinfo", "(", "inspect", ".", "currentframe", "(", ")", ".", "f_back", ")", "[", "3", "]", ":", "\n", "            ", "m", "=", "re", ".", "search", "(", "r'\\bvarname\\s*\\(\\s*([A-Za-z_][A-Za-z0-9_]*)\\s*\\)'", ",", "line", ")", "\n", "if", "m", ":", "\n", "                ", "return", "m", ".", "group", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.util.util.print_numpy": [[60, 68], ["x.flatten.flatten.astype", "print", "x.flatten.flatten.flatten", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.median", "numpy.std"], "methods", ["None"], ["", "", "", "def", "print_numpy", "(", "self", ",", "x", ",", "val", "=", "True", ",", "shp", "=", "False", ")", ":", "\n", "        ", "x", "=", "x", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "shp", ":", "\n", "            ", "print", "(", "'shape,'", ",", "x", ".", "shape", ")", "\n", "", "if", "val", ":", "\n", "            ", "x", "=", "x", ".", "flatten", "(", ")", "\n", "print", "(", "'mean = %3.3f, min = %3.3f, max = %3.3f, median = %3.3f, std=%3.3f'", "%", "(", "\n", "np", ".", "mean", "(", "x", ")", ",", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "median", "(", "x", ")", ",", "np", ".", "std", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.util.util.mkdirs": [[70, 76], ["isinstance", "util.util.mkdir", "isinstance", "util.util.mkdir"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.mkdir", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.mkdir"], ["", "", "def", "mkdirs", "(", "self", ",", "paths", ")", ":", "\n", "        ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "            ", "for", "path", "in", "paths", ":", "\n", "                ", "self", ".", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.util.util.mkdir": [[78, 81], ["os.path.exists", "os.makedirs"], "methods", ["None"], ["", "", "def", "mkdir", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.GANLoss.__init__": [[85, 91], ["torch.Module.__init__", "torch.Sigmoid", "torch.Sigmoid", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "self", ".", "labels_real", ",", "self", ".", "labels_fake", "=", "None", ",", "None", "\n", "self", ".", "preloss", "=", "nn", ".", "Sigmoid", "(", ")", "if", "not", "use_lsgan", "else", "None", "\n", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "if", "use_lsgan", "else", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.GANLoss.get_target_tensor": [[92, 99], ["networks.GANLoss.labels_real[].numel", "inputs[].numel", "networks.GANLoss.Tensor().fill_", "networks.GANLoss.Tensor().fill_", "networks.GANLoss.Tensor", "networks.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "def", "get_target_tensor", "(", "self", ",", "inputs", ",", "is_real", ")", ":", "\n", "        ", "if", "self", ".", "labels_real", "is", "None", "or", "self", ".", "labels_real", "[", "0", "]", ".", "numel", "(", ")", "!=", "inputs", "[", "0", "]", ".", "numel", "(", ")", ":", "\n", "            ", "self", ".", "labels_real", "=", "[", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "1.0", ")", "for", "input", "in", "inputs", "]", "\n", "self", ".", "labels_fake", "=", "[", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "0.0", ")", "for", "input", "in", "inputs", "]", "\n", "", "if", "is_real", ":", "\n", "            ", "return", "self", ".", "labels_real", "\n", "", "return", "self", ".", "labels_fake", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.GANLoss.__call__": [[100, 108], ["networks.GANLoss.get_target_tensor", "list", "networks.GANLoss.loss", "range", "sum", "networks.GANLoss.preloss", "zip", "zip", "sum", "len", "len"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "is_real", ")", ":", "\n", "        ", "labels", "=", "self", ".", "get_target_tensor", "(", "inputs", ",", "is_real", ")", "\n", "if", "self", ".", "preloss", "is", "not", "None", ":", "\n", "            ", "inputs", "=", "[", "self", ".", "preloss", "(", "input", ")", "for", "input", "in", "inputs", "]", "\n", "", "losses", "=", "[", "self", ".", "loss", "(", "input", ",", "label", ")", "for", "input", ",", "label", "in", "zip", "(", "inputs", ",", "labels", ")", "]", "\n", "multipliers", "=", "list", "(", "range", "(", "1", ",", "len", "(", "inputs", ")", "+", "1", ")", ")", ";", "multipliers", "[", "-", "1", "]", "+=", "1", "\n", "losses", "=", "[", "m", "*", "l", "for", "m", ",", "l", "in", "zip", "(", "multipliers", ",", "losses", ")", "]", "\n", "return", "sum", "(", "losses", ")", "/", "(", "sum", "(", "multipliers", ")", "*", "len", "(", "losses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.ResnetGenEncoder.__init__": [[115, 141], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.PReLU", "torch.PReLU", "networks.ResnetBlock"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "n_blocks", "=", "4", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_dropout", "=", "False", ",", "gpu_ids", "=", "[", "]", ",", "use_bias", "=", "False", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGenEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "]", "\n", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "_", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "norm_layer", "=", "norm_layer", ",", "\n", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ",", "padding_type", "=", "padding_type", ")", "]", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.ResnetGenEncoder.forward": [[142, 146], ["networks.ResnetGenEncoder.model", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.NLayerDiscriminator.model"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "gpu_ids", "and", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "return", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model", ",", "input", ",", "self", ".", "gpu_ids", ")", "\n", "", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.ResnetGenShared.__init__": [[148, 163], ["torch.Module.__init__", "range", "networks.SequentialContext", "networks.ResnetBlock"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_domains", ",", "n_blocks", "=", "2", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_dropout", "=", "False", ",", "gpu_ids", "=", "[", "]", ",", "use_bias", "=", "False", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGenShared", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "model", "=", "[", "]", "\n", "n_downsampling", "=", "2", "\n", "mult", "=", "2", "**", "n_downsampling", "\n", "\n", "for", "_", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "norm_layer", "=", "norm_layer", ",", "n_domains", "=", "n_domains", ",", "\n", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ",", "padding_type", "=", "padding_type", ")", "]", "\n", "\n", "", "self", ".", "model", "=", "SequentialContext", "(", "n_domains", ",", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.ResnetGenShared.forward": [[164, 168], ["networks.ResnetGenShared.model", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.NLayerDiscriminator.model"], ["", "def", "forward", "(", "self", ",", "input", ",", "domain", ")", ":", "\n", "        ", "if", "self", ".", "gpu_ids", "and", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "return", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model", ",", "(", "input", ",", "domain", ")", ",", "self", ".", "gpu_ids", ")", "\n", "", "return", "self", ".", "model", "(", "input", ",", "domain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.ResnetGenDecoder.__init__": [[170, 198], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "networks.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.PReLU", "torch.PReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_nc", ",", "n_blocks", "=", "5", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "use_dropout", "=", "False", ",", "gpu_ids", "=", "[", "]", ",", "use_bias", "=", "False", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGenDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "model", "=", "[", "]", "\n", "n_downsampling", "=", "2", "\n", "mult", "=", "2", "**", "n_downsampling", "\n", "\n", "for", "_", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "norm_layer", "=", "norm_layer", ",", "\n", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ",", "padding_type", "=", "padding_type", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "0", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "]", "\n", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.ResnetGenDecoder.forward": [[199, 203], ["networks.ResnetGenDecoder.model", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.NLayerDiscriminator.model"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "gpu_ids", "and", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "return", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model", ",", "input", ",", "self", ".", "gpu_ids", ")", "\n", "", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.ResnetBlock.__init__": [[207, 240], ["torch.Module.__init__", "networks.SequentialContext", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ",", "padding_type", "=", "'reflect'", ",", "n_domains", "=", "0", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", "+", "n_domains", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", "+", "n_domains", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "self", ".", "conv_block", "=", "SequentialContext", "(", "n_domains", ",", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.ResnetBlock.forward": [[241, 245], ["isinstance", "networks.ResnetBlock.conv_block", "networks.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ",", "tuple", ")", ":", "\n", "            ", "return", "input", "[", "0", "]", "+", "self", ".", "conv_block", "(", "*", "input", ")", "\n", "", "return", "input", "+", "self", ".", "conv_block", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.NLayerDiscriminator.__init__": [[249, 257], ["torch.Module.__init__", "networks.NLayerDiscriminator.model", "networks.NLayerDiscriminator.model"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.NLayerDiscriminator.model", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.NLayerDiscriminator.model"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "blur_fn", "=", "None", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "blur_fn", "=", "blur_fn", "\n", "self", ".", "gray_fn", "=", "lambda", "x", ":", "(", ".299", "*", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "+", ".587", "*", "x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "+", ".114", "*", "x", "[", ":", ",", "2", ",", ":", ",", ":", "]", ")", ".", "unsqueeze_", "(", "1", ")", "\n", "\n", "self", ".", "model_gray", "=", "self", ".", "model", "(", "1", ",", "ndf", ",", "n_layers", ",", "norm_layer", ")", "\n", "self", ".", "model_rgb", "=", "self", ".", "model", "(", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.NLayerDiscriminator.model": [[258, 295], ["int", "range", "min", "networks.SequentialOutput", "type", "numpy.ceil", "min", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.PReLU", "torch.PReLU"], "methods", ["None"], ["", "def", "model", "(", "self", ",", "input_nc", ",", "ndf", ",", "n_layers", ",", "norm_layer", ")", ":", "\n", "        ", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1", ")", "/", "2", ")", ")", "\n", "sequences", "=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", "]", "]", "\n", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequences", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", "+", "1", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", "+", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", "]", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequences", "+=", "[", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "\n", "]", "]", "\n", "\n", "return", "SequentialOutput", "(", "*", "sequences", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.NLayerDiscriminator.forward": [[296, 306], ["networks.NLayerDiscriminator.gray_fn", "networks.NLayerDiscriminator.blur_fn", "len", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "networks.NLayerDiscriminator.model_gray", "networks.NLayerDiscriminator.model_rgb", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "luminance", ",", "blurred_rgb", "=", "self", ".", "gray_fn", "(", "input", ")", ",", "self", ".", "blur_fn", "(", "input", ")", "\n", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", "and", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "outs1", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model_gray", ",", "luminance", ",", "self", ".", "gpu_ids", ")", "\n", "outs2", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model_rgb", ",", "blurred_rgb", ",", "self", ".", "gpu_ids", ")", "\n", "", "else", ":", "\n", "            ", "outs1", "=", "self", ".", "model_gray", "(", "luminance", ")", "\n", "outs2", "=", "self", ".", "model_rgb", "(", "blurred_rgb", ")", "\n", "", "return", "[", "torch", ".", "cat", "(", "[", "o1", ",", "o2", "]", ",", "1", ")", "for", "o1", ",", "o2", "in", "zip", "(", "outs1", ",", "outs2", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.__init__": [[309, 311], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Plexer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.apply": [[312, 315], ["net.apply"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.apply"], ["", "def", "apply", "(", "self", ",", "func", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "networks", ":", "\n", "            ", "net", ".", "apply", "(", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda": [[316, 319], ["net.cuda"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda"], ["", "", "def", "cuda", "(", "self", ",", "device_id", ")", ":", "\n", "        ", "for", "net", "in", "self", ".", "networks", ":", "\n", "            ", "net", ".", "cuda", "(", "device_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.init_optimizers": [[320, 323], ["opt", "net.parameters"], "methods", ["None"], ["", "", "def", "init_optimizers", "(", "self", ",", "opt", ",", "lr", ",", "betas", ")", ":", "\n", "        ", "self", ".", "optimizers", "=", "[", "opt", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "betas", "=", "betas", ")", "for", "net", "in", "self", ".", "networks", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.zero_grads": [[324, 327], ["networks.Plexer.optimizers[].zero_grad", "networks.Plexer.optimizers[].zero_grad"], "methods", ["None"], ["", "def", "zero_grads", "(", "self", ",", "dom_a", ",", "dom_b", ")", ":", "\n", "        ", "self", ".", "optimizers", "[", "dom_a", "]", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizers", "[", "dom_b", "]", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.step_grads": [[328, 331], ["networks.Plexer.optimizers[].step", "networks.Plexer.optimizers[].step"], "methods", ["None"], ["", "def", "step_grads", "(", "self", ",", "dom_a", ",", "dom_b", ")", ":", "\n", "        ", "self", ".", "optimizers", "[", "dom_a", "]", ".", "step", "(", ")", "\n", "self", ".", "optimizers", "[", "dom_b", "]", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.update_lr": [[332, 336], ["None"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "new_lr", ")", ":", "\n", "        ", "for", "opt", "in", "self", ".", "optimizers", ":", "\n", "            ", "for", "param_group", "in", "opt", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.save": [[337, 341], ["enumerate", "torch.save", "torch.save", "torch.save", "torch.save", "net.cpu().state_dict", "net.cpu"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.save"], ["", "", "", "def", "save", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "for", "i", ",", "net", "in", "enumerate", "(", "self", ".", "networks", ")", ":", "\n", "            ", "filename", "=", "save_path", "+", "(", "'%d.pth'", "%", "i", ")", "\n", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.load": [[342, 346], ["enumerate", "net.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.load", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.load", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.load", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.load"], ["", "", "def", "load", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "for", "i", ",", "net", "in", "enumerate", "(", "self", ".", "networks", ")", ":", "\n", "            ", "filename", "=", "save_path", "+", "(", "'%d.pth'", "%", "i", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.__init__": [[348, 361], ["networks.Plexer.__init__", "encoder", "decoder", "block", "block", "networks.G_Plexer.encoders.append", "networks.G_Plexer.decoders.append", "range", "range"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_domains", ",", "encoder", ",", "enc_args", ",", "decoder", ",", "dec_args", ",", "\n", "block", "=", "None", ",", "shenc_args", "=", "None", ",", "shdec_args", "=", "None", ")", ":", "\n", "        ", "super", "(", "G_Plexer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoders", "=", "[", "encoder", "(", "*", "enc_args", ")", "for", "_", "in", "range", "(", "n_domains", ")", "]", "\n", "self", ".", "decoders", "=", "[", "decoder", "(", "*", "dec_args", ")", "for", "_", "in", "range", "(", "n_domains", ")", "]", "\n", "\n", "self", ".", "sharing", "=", "block", "is", "not", "None", "\n", "if", "self", ".", "sharing", ":", "\n", "            ", "self", ".", "shared_encoder", "=", "block", "(", "*", "shenc_args", ")", "\n", "self", ".", "shared_decoder", "=", "block", "(", "*", "shdec_args", ")", "\n", "self", ".", "encoders", ".", "append", "(", "self", ".", "shared_encoder", ")", "\n", "self", ".", "decoders", ".", "append", "(", "self", ".", "shared_decoder", ")", "\n", "", "self", ".", "networks", "=", "self", ".", "encoders", "+", "self", ".", "decoders", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.init_optimizers": [[362, 367], ["zip", "itertools.chain", "networks.G_Plexer.optimizers.append", "enc.parameters", "dec.parameters", "opt"], "methods", ["None"], ["", "def", "init_optimizers", "(", "self", ",", "opt", ",", "lr", ",", "betas", ")", ":", "\n", "        ", "self", ".", "optimizers", "=", "[", "]", "\n", "for", "enc", ",", "dec", "in", "zip", "(", "self", ".", "encoders", ",", "self", ".", "decoders", ")", ":", "\n", "            ", "params", "=", "itertools", ".", "chain", "(", "enc", ".", "parameters", "(", ")", ",", "dec", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "opt", "(", "params", ",", "lr", "=", "lr", ",", "betas", "=", "betas", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.forward": [[368, 371], ["networks.G_Plexer.encode", "networks.G_Plexer.decode"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.decode"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "in_domain", ",", "out_domain", ")", ":", "\n", "        ", "encoded", "=", "self", ".", "encode", "(", "input", ",", "in_domain", ")", "\n", "return", "self", ".", "decode", "(", "encoded", ",", "out_domain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.encode": [[372, 377], ["networks.G_Plexer.encoders[].forward", "networks.G_Plexer.shared_encoder.forward"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.forward"], ["", "def", "encode", "(", "self", ",", "input", ",", "domain", ")", ":", "\n", "        ", "output", "=", "self", ".", "encoders", "[", "domain", "]", ".", "forward", "(", "input", ")", "\n", "if", "self", ".", "sharing", ":", "\n", "            ", "return", "self", ".", "shared_encoder", ".", "forward", "(", "output", ",", "domain", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.decode": [[378, 382], ["networks.G_Plexer.decoders[].forward", "networks.G_Plexer.shared_decoder.forward"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.forward"], ["", "def", "decode", "(", "self", ",", "input", ",", "domain", ")", ":", "\n", "        ", "if", "self", ".", "sharing", ":", "\n", "            ", "input", "=", "self", ".", "shared_decoder", ".", "forward", "(", "input", ",", "domain", ")", "\n", "", "return", "self", ".", "decoders", "[", "domain", "]", ".", "forward", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.zero_grads": [[383, 388], ["networks.G_Plexer.optimizers[].zero_grad", "networks.G_Plexer.optimizers[].zero_grad", "networks.G_Plexer.optimizers[].zero_grad"], "methods", ["None"], ["", "def", "zero_grads", "(", "self", ",", "dom_a", ",", "dom_b", ")", ":", "\n", "        ", "self", ".", "optimizers", "[", "dom_a", "]", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "sharing", ":", "\n", "            ", "self", ".", "optimizers", "[", "-", "1", "]", ".", "zero_grad", "(", ")", "\n", "", "self", ".", "optimizers", "[", "dom_b", "]", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.step_grads": [[389, 394], ["networks.G_Plexer.optimizers[].step", "networks.G_Plexer.optimizers[].step", "networks.G_Plexer.optimizers[].step"], "methods", ["None"], ["", "def", "step_grads", "(", "self", ",", "dom_a", ",", "dom_b", ")", ":", "\n", "        ", "self", ".", "optimizers", "[", "dom_a", "]", ".", "step", "(", ")", "\n", "if", "self", ".", "sharing", ":", "\n", "            ", "self", ".", "optimizers", "[", "-", "1", "]", ".", "step", "(", ")", "\n", "", "self", ".", "optimizers", "[", "dom_b", "]", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.__repr__": [[395, 403], ["sum", "sum", "p.numel", "p.numel", "e.parameters", "d.parameters", "len", "repr", "repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "e", ",", "d", "=", "self", ".", "encoders", "[", "0", "]", ",", "self", ".", "decoders", "[", "0", "]", "\n", "e_params", "=", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "e", ".", "parameters", "(", ")", "]", ")", "\n", "d_params", "=", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "d", ".", "parameters", "(", ")", "]", ")", "\n", "return", "repr", "(", "e", ")", "+", "'\\n'", "+", "repr", "(", "d", ")", "+", "'\\n'", "+", "'Created %d Encoder-Decoder pairs'", "%", "len", "(", "self", ".", "encoders", ")", "+", "'\\n'", "+", "'Number of parameters per Encoder: %d'", "%", "e_params", "+", "'\\n'", "+", "'Number of parameters per Deocder: %d'", "%", "d_params", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.D_Plexer.__init__": [[405, 408], ["networks.Plexer.__init__", "model", "range"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.NLayerDiscriminator.model"], ["    ", "def", "__init__", "(", "self", ",", "n_domains", ",", "model", ",", "model_args", ")", ":", "\n", "        ", "super", "(", "D_Plexer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "networks", "=", "[", "model", "(", "*", "model_args", ")", "for", "_", "in", "range", "(", "n_domains", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.D_Plexer.forward": [[409, 412], ["discriminator.forward"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.forward"], ["", "def", "forward", "(", "self", ",", "input", ",", "domain", ")", ":", "\n", "        ", "discriminator", "=", "self", ".", "networks", "[", "domain", "]", "\n", "return", "discriminator", ".", "forward", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.D_Plexer.__repr__": [[413, 419], ["sum", "p.numel", "t.parameters", "repr", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "t", "=", "self", ".", "networks", "[", "0", "]", "\n", "t_params", "=", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "t", ".", "parameters", "(", ")", "]", ")", "\n", "return", "repr", "(", "t", ")", "+", "'\\n'", "+", "'Created %d Discriminators'", "%", "len", "(", "self", ".", "networks", ")", "+", "'\\n'", "+", "'Number of parameters per Discriminator: %d'", "%", "t_params", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.SequentialContext.__init__": [[422, 426], ["torch.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "SequentialContext", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "context_var", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.SequentialContext.prepare_context": [[427, 436], ["networks.SequentialContext.context_var.data.fill_", "tensor", "isinstance", "networks.SequentialContext.context_var.size", "input.size", "input.size"], "methods", ["None"], ["", "def", "prepare_context", "(", "self", ",", "input", ",", "domain", ")", ":", "\n", "        ", "if", "self", ".", "context_var", "is", "None", "or", "self", ".", "context_var", ".", "size", "(", ")", "[", "-", "2", ":", "]", "!=", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ":", "\n", "            ", "tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "else", "torch", ".", "FloatTensor", "\n", "self", ".", "context_var", "=", "tensor", "(", "*", "(", "(", "1", ",", "self", ".", "n_classes", ")", "+", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", ")", "\n", "\n", "", "self", ".", "context_var", ".", "data", ".", "fill_", "(", "-", "1.0", ")", "\n", "self", ".", "context_var", ".", "data", "[", ":", ",", "domain", ",", ":", ",", ":", "]", "=", "1.0", "\n", "return", "self", ".", "context_var", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.SequentialContext.forward": [[437, 450], ["networks.SequentialContext._modules.values", "super().forward", "module", "len", "networks.SequentialContext.prepare_context", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.SequentialContext.prepare_context"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "if", "self", ".", "n_classes", "<", "2", "or", "len", "(", "input", ")", "<", "2", ":", "\n", "            ", "return", "super", "(", "SequentialContext", ",", "self", ")", ".", "forward", "(", "input", "[", "0", "]", ")", "\n", "", "x", ",", "domain", "=", "input", "\n", "\n", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "            ", "if", "'Conv'", "in", "module", ".", "__class__", ".", "__name__", ":", "\n", "                ", "context_var", "=", "self", ".", "prepare_context", "(", "x", ",", "domain", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "context_var", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "'Block'", "in", "module", ".", "__class__", ".", "__name__", ":", "\n", "                ", "x", "=", "(", "x", ",", ")", "+", "input", "[", "1", ":", "]", "\n", "", "x", "=", "module", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.SequentialOutput.__init__": [[452, 455], ["torch.Sequential.__init__", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "args", "=", "[", "nn", ".", "Sequential", "(", "*", "arg", ")", "for", "arg", "in", "args", "]", "\n", "super", "(", "SequentialOutput", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.SequentialOutput.forward": [[456, 467], ["networks.SequentialOutput._modules.values", "enumerate", "module", "predictions.append", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "predictions", "=", "[", "]", "\n", "layers", "=", "self", ".", "_modules", ".", "values", "(", ")", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "layers", ")", ":", "\n", "            ", "output", "=", "module", "(", "input", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "input", "=", "output", ";", "continue", "\n", "", "predictions", ".", "append", "(", "output", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", ")", "\n", "if", "i", "!=", "len", "(", "layers", ")", "-", "1", ":", "\n", "                ", "input", "=", "output", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "", "return", "predictions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.weights_init": [[9, 18], ["classname.find", "m.weight.data.normal_", "hasattr", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "if", "hasattr", "(", "m", ".", "bias", ",", "'data'", ")", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.get_norm_layer": [[20, 27], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "return", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "return", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.define_G": [[29, 59], ["networks.get_norm_layer", "networks.Plexer.apply", "type", "networks.G_Plexer", "networks.G_Plexer", "len", "torch.cuda.is_available", "torch.cuda.is_available", "networks.Plexer.cuda"], "function", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.apply", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda"], ["", "", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "n_blocks", ",", "n_blocks_shared", ",", "n_domains", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "        ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "        ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "n_blocks", "-=", "n_blocks_shared", "\n", "n_blocks_enc", "=", "n_blocks", "//", "2", "\n", "n_blocks_dec", "=", "n_blocks", "-", "n_blocks_enc", "\n", "\n", "dup_args", "=", "(", "ngf", ",", "norm_layer", ",", "use_dropout", ",", "gpu_ids", ",", "use_bias", ")", "\n", "enc_args", "=", "(", "input_nc", ",", "n_blocks_enc", ")", "+", "dup_args", "\n", "dec_args", "=", "(", "output_nc", ",", "n_blocks_dec", ")", "+", "dup_args", "\n", "\n", "if", "n_blocks_shared", ">", "0", ":", "\n", "        ", "n_blocks_shdec", "=", "n_blocks_shared", "//", "2", "\n", "n_blocks_shenc", "=", "n_blocks_shared", "-", "n_blocks_shdec", "\n", "shenc_args", "=", "(", "n_domains", ",", "n_blocks_shenc", ")", "+", "dup_args", "\n", "shdec_args", "=", "(", "n_domains", ",", "n_blocks_shdec", ")", "+", "dup_args", "\n", "plex_netG", "=", "G_Plexer", "(", "n_domains", ",", "ResnetGenEncoder", ",", "enc_args", ",", "ResnetGenDecoder", ",", "dec_args", ",", "ResnetGenShared", ",", "shenc_args", ",", "shdec_args", ")", "\n", "", "else", ":", "\n", "        ", "plex_netG", "=", "G_Plexer", "(", "n_domains", ",", "ResnetGenEncoder", ",", "enc_args", ",", "ResnetGenDecoder", ",", "dec_args", ")", "\n", "\n", "", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "plex_netG", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "plex_netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "plex_netG", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.define_D": [[61, 73], ["networks.get_norm_layer", "networks.D_Plexer", "networks.Plexer.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "networks.Plexer.cuda"], "function", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.apply", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "netD_n_layers", ",", "n_domains", ",", "blur_fn", ",", "norm", "=", "'batch'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "model_args", "=", "(", "input_nc", ",", "ndf", ",", "netD_n_layers", ",", "blur_fn", ",", "norm_layer", ",", "gpu_ids", ")", "\n", "plex_netD", "=", "D_Plexer", "(", "n_domains", ",", "NLayerDiscriminator", ",", "model_args", ")", "\n", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "plex_netD", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "plex_netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "plex_netD", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.name": [[28, 30], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'DISAM_Model'", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.__init__": [[31, 115], ["base_model.BaseModel.__init__", "disam_model.DISAM_Model.Tensor", "disam_model.DISAM_Model.Tensor", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "networks.define_G", "networks.define_D", "disam_model.DISAM_Model.load_network", "disam_model.DISAM_Model.Tensor", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "networks.GANLoss", "disam_model.DISAM_Model.netG.init_optimizers", "disam_model.DISAM_Model.netD.init_optimizers", "networks.define_G", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "disam_model.DISAM_Model.load_network", "util.util.util.image_pool.ImagePool", "disam_model.DISAM_Model.Tensor", "disam_model.DISAM_Model.load_network", "range", "util.util.util.util.util().gkern_2d", "util.util.util.util.util"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.define_G", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.define_D", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.init_optimizers", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.init_optimizers", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.define_G", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.util.util.gkern_2d"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "DISAM_Model", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "\n", "self", ".", "n_domains", "=", "opt", ".", "n_domains", "\n", "self", ".", "DA", ",", "self", ".", "DB", "=", "None", ",", "None", "\n", "self", ".", "real_A", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "input_nc", ",", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "self", ".", "real_B", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "output_nc", ",", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "\n", "# used metrics", "\n", "self", ".", "cos", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "0", ",", "eps", "=", "1e-8", ")", "\n", "self", ".", "mean_cos", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ",", "eps", "=", "1e-8", ")", "\n", "self", ".", "L2loss", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "# load/define networks", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "\n", "opt", ".", "netG_n_blocks", ",", "opt", ".", "netG_n_shared", ",", "\n", "self", ".", "n_domains", ",", "opt", ".", "norm", ",", "opt", ".", "use_dropout", ",", "self", ".", "gpu_ids", ")", "\n", "if", "not", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "use_two_stage", "=", "opt", ".", "use_two_stage", "\n", "if", "self", ".", "use_two_stage", ":", "\n", "                ", "self", ".", "netG_finer", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "\n", "opt", ".", "netG_n_blocks", ",", "opt", ".", "netG_n_shared", ",", "\n", "self", ".", "n_domains", ",", "opt", ".", "norm", ",", "opt", ".", "use_dropout", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "top_n", "=", "opt", ".", "top_n", "\n", "\n", "", "", "self", ".", "last_retrieval_index_c0", "=", "0", "\n", "self", ".", "last_retrieval_index_c1", "=", "0", "\n", "self", ".", "last_domain", "=", "0", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "blur_fn", "=", "lambda", "x", ":", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "x", ",", "self", ".", "Tensor", "(", "util", "(", ")", ".", "gkern_2d", "(", ")", ")", ",", "groups", "=", "3", ",", "padding", "=", "2", ")", "\n", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "opt", ".", "output_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "netD_n_layers", ",", "\n", "self", ".", "n_domains", ",", "blur_fn", ",", "opt", ".", "norm", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "which_epoch", "=", "opt", ".", "which_epoch", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "which_epoch", ")", "\n", "if", "not", "self", ".", "isTrain", ":", "\n", "                ", "if", "opt", ".", "use_two_stage", ":", "\n", "                    ", "self", ".", "load_network", "(", "self", ".", "netG_finer", ",", "'G'", ",", "opt", ".", "which_epoch_finer", ",", "self", ".", "use_two_stage", ")", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD", ",", "'D'", ",", "which_epoch", ")", "\n", "\n", "", "", "if", "not", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "test_using_cos", "=", "opt", ".", "test_using_cos", "\n", "# used for retrieval", "\n", "self", ".", "database_feature_c0", "=", "[", "]", "\n", "self", ".", "database_path_c0", "=", "[", "]", "\n", "self", ".", "database_feature_c1", "=", "[", "]", "\n", "self", ".", "database_path_c1", "=", "[", "]", "\n", "self", ".", "database_dist_list_c0", "=", "[", "]", "# only for visualization", "\n", "self", ".", "query_feature_list", "=", "[", "]", "\n", "self", ".", "dist_mat_torch", "=", "None", "\n", "self", ".", "robotcar_database", "=", "[", "]", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "neg_B", "=", "self", ".", "Tensor", "(", "opt", ".", "num_hard_neg", ",", "opt", ".", "input_nc", ",", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "self", ".", "train_using_cos", "=", "opt", ".", "train_using_cos", "\n", "self", ".", "fake_pools", "=", "[", "ImagePool", "(", "opt", ".", "pool_size", ")", "for", "_", "in", "range", "(", "self", ".", "n_domains", ")", "]", "\n", "# used in the adaptive triplet loss", "\n", "self", ".", "margin", "=", "opt", ".", "margin", "\n", "self", ".", "adapt", "=", "opt", ".", "adapt", "\n", "self", ".", "margin_sam_triplet", "=", "opt", ".", "margin_sam_triplet", "\n", "self", ".", "adapt_sam_triplet", "=", "opt", ".", "adapt_sam_triplet", "\n", "self", ".", "use_realAB_as_negative", "=", "opt", ".", "use_realAB_as_negative", "\n", "self", ".", "hard_negative", "=", "opt", ".", "hard_negative", "\n", "# define loss functions", "\n", "self", ".", "criterionCycle", "=", "torch", ".", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "# initialize optimizers", "\n", "self", ".", "netG", ".", "init_optimizers", "(", "torch", ".", "optim", ".", "Adam", ",", "opt", ".", "lr", ",", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "netD", ".", "init_optimizers", "(", "torch", ".", "optim", ".", "Adam", ",", "opt", ".", "lr", ",", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "# initialize loss storage", "\n", "self", ".", "loss_D", ",", "self", ".", "loss_G", "=", "[", "0", "]", "*", "self", ".", "n_domains", ",", "[", "0", "]", "*", "self", ".", "n_domains", "\n", "self", ".", "loss_cycle", "=", "[", "0", "]", "*", "self", ".", "n_domains", "\n", "self", ".", "loss_triplet", "=", "[", "0", "]", "*", "self", ".", "n_domains", "\n", "self", ".", "loss_sam", "=", "[", "0", "]", "*", "self", ".", "n_domains", "\n", "self", ".", "loss_sam_triplet", "=", "[", "0", "]", "*", "self", ".", "n_domains", "\n", "self", ".", "feature_distance", "=", "[", "0", "]", "*", "self", ".", "n_domains", "\n", "self", ".", "feature_cos", "=", "[", "0", "]", "*", "self", ".", "n_domains", "\n", "self", ".", "use_cos_latent_with_L2", "=", "opt", ".", "use_cos_latent_with_L2", "\n", "# initialize loss multipliers", "\n", "self", ".", "lambda_triplet", ",", "self", ".", "lambda_cyc", ",", "self", ".", "lambda_latent", "=", "opt", ".", "lambda_triplet", ",", "opt", ".", "lambda_cycle", ",", "opt", ".", "lambda_latent", "\n", "self", ".", "lambda_sam", ",", "self", ".", "lambda_sam_triplet", "=", "opt", ".", "lambda_sam", ",", "opt", ".", "lambda_sam_triplet", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.set_input": [[116, 128], ["disam_model.DISAM_Model.real_A.resize_().copy_", "disam_model.DISAM_Model.real_B.resize_().copy_", "disam_model.DISAM_Model.real_A.resize_", "[].cuda", "input_A.size", "disam_model.DISAM_Model.real_B.resize_", "input_B.size"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda"], ["", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "input_A", "=", "input", "[", "'A'", "]", "\n", "self", ".", "real_A", ".", "resize_", "(", "input_A", ".", "size", "(", ")", ")", ".", "copy_", "(", "input_A", ")", "\n", "self", ".", "DA", "=", "input", "[", "'DA'", "]", "[", "0", "]", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "input_B", "=", "input", "[", "'B'", "]", "\n", "self", ".", "real_B", ".", "resize_", "(", "input_B", ".", "size", "(", ")", ")", ".", "copy_", "(", "input_B", ")", "\n", "self", ".", "DB", "=", "input", "[", "'DB'", "]", "[", "0", "]", "\n", "if", "self", ".", "hard_negative", ":", "\n", "                ", "self", ".", "neg_B", "=", "input", "[", "'neg_B_tensor'", "]", "[", "0", "]", ".", "cuda", "(", ")", "\n", "self", ".", "neg_DB_list", "=", "input", "[", "'neg_DB_list'", "]", "[", "0", "]", "\n", "", "", "self", ".", "image_paths", "=", "input", "[", "'path'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.image_retrieval": [[129, 258], ["top_n_tensor.cuda.cuda.cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "enumerate", "print", "print", "enumerate", "print", "print", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "disam_model.DISAM_Model.database_dist_list_c0.append", "list", "min_dix.item", "list", "min_dix.item", "query_path.split", "disam_model.DISAM_Model.L2loss", "disam_model.DISAM_Model.item", "range", "disam_model.DISAM_Model.find_grad_sam", "disam_model.DISAM_Model.find_grad_sam", "disam_model.DISAM_Model.find_grad_sam", "disam_model.DISAM_Model.find_grad_sam", "path.split", "query_path.split", "disam_model.DISAM_Model.L2loss", "range", "path.split", "query_path.split", "query_path.split", "query_encoded.view", "[].view", "top_n_tensor.cuda.cuda.sort", "disam_model.DISAM_Model.L2loss", "top_n_index[].int", "query_encoded.view", "[].view", "top_n_tensor.cuda.cuda.sort", "disam_model.DISAM_Model.L2loss", "top_n_index[].int", "disam_model.DISAM_Model.mean_cos().mean", "disam_model.DISAM_Model.cos", "query_encoded_finer.view", "[].view", "disam_model.DISAM_Model.mean_cos().mean", "disam_model.DISAM_Model.cos", "query_encoded_finer.view", "[].view", "query_encoded.view", "[].view", "disam_model.DISAM_Model.mean_cos().mean", "disam_model.DISAM_Model.cos", "disam_model.DISAM_Model.database_dist_list_c0.index", "query_encoded.view", "[].view", "disam_model.DISAM_Model.mean_cos().mean", "disam_model.DISAM_Model.cos", "disam_model.DISAM_Model.mean_cos", "query_encoded_finer.view", "[].view", "disam_model.DISAM_Model.database_dist_list_c0.index", "disam_model.DISAM_Model.database_dist_list_c0.index", "disam_model.DISAM_Model.mean_cos", "query_encoded_finer.view", "[].view", "query_encoded.view", "[].view", "disam_model.DISAM_Model.mean_cos", "sorted", "query_encoded.view", "[].view", "disam_model.DISAM_Model.mean_cos", "query_encoded_finer.view", "[].view", "sorted", "sorted", "query_encoded_finer.view", "[].view", "top_n_index[].int", "top_n_index[].int", "top_n_index[].int", "top_n_index[].int", "top_n_index[].int", "top_n_index[].int"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_grad_sam", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_grad_sam", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_grad_sam", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_grad_sam"], ["", "def", "image_retrieval", "(", "self", ",", "query_encoded", ",", "query_path", ",", "query_encoded_finer", "=", "None", ",", "test_index", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"\n        Used to retrieve the target image in the database given the query encoded feature\n        :param query_encoded: the query code\n        :param query_path: the path of query image\n        :param query_encoded_finer: the query code in the finer retrieval model\n        :param test_index: the index of input query images when testing\n        :return: the retrieved iamge path and the encoded feature in the database\n        \"\"\"", "\n", "min_dix", "=", "100000", "\n", "if", "self", ".", "use_two_stage", ":", "\n", "            ", "top_n_tensor", "=", "torch", ".", "ones", "(", "self", ".", "top_n", ")", "*", "100000", "\n", "top_n_tensor", "=", "top_n_tensor", ".", "cuda", "(", ")", "\n", "top_n_index", "=", "torch", ".", "ones", "(", "self", ".", "top_n", ")", "\n", "", "path", "=", "None", "\n", "final_index", "=", "0", "\n", "\n", "if", "query_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", "11", "]", "==", "'0'", ":", "\n", "# for c0, camera 0 in the CMU-Seasons dataset", "\n", "            ", "self", ".", "database_dist_list_c0", "=", "[", "]", "\n", "for", "i", ",", "db_path", "in", "enumerate", "(", "self", ".", "database_path_c0", ")", ":", "\n", "                ", "if", "self", ".", "test_using_cos", ":", "\n", "# use the cosine retrieval metric", "\n", "                    ", "if", "self", ".", "opt", ".", "mean_cos", ":", "\n", "                        ", "dist", "=", "-", "self", ".", "mean_cos", "(", "query_encoded", ".", "view", "(", "256", ",", "-", "1", ")", ",", "\n", "self", ".", "database_feature_c0", "[", "i", "]", "[", "0", "]", ".", "view", "(", "256", ",", "-", "1", ")", ")", ".", "mean", "(", "0", ")", "\n", "", "else", ":", "\n", "                        ", "dist", "=", "-", "self", ".", "cos", "(", "query_encoded", ".", "view", "(", "-", "1", ")", ",", "\n", "self", ".", "database_feature_c0", "[", "i", "]", "[", "0", "]", ".", "view", "(", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "# use L2 metric", "\n", "                    ", "dist", "=", "self", ".", "L2loss", "(", "query_encoded", ".", "view", "(", "-", "1", ")", ",", "self", ".", "database_feature_c0", "[", "i", "]", "[", "0", "]", ".", "view", "(", "-", "1", ")", ")", "\n", "", "self", ".", "database_dist_list_c0", ".", "append", "(", "dist", ".", "item", "(", ")", ")", "\n", "if", "not", "self", ".", "use_two_stage", ":", "\n", "                    ", "if", "dist", "<", "min_dix", ":", "\n", "                        ", "min_dix", "=", "dist", "\n", "final_index", "=", "i", "\n", "path", "=", "db_path", "\n", "", "", "else", ":", "\n", "# find top N for finer retrieval", "\n", "                    ", "if", "dist", "<", "top_n_tensor", "[", "self", ".", "top_n", "-", "1", "]", ":", "\n", "                        ", "top_n_tensor", "[", "self", ".", "top_n", "-", "1", "]", "=", "dist", "\n", "top_n_index", "[", "self", ".", "top_n", "-", "1", "]", "=", "i", "\n", "tmp", "=", "top_n_tensor", ".", "sort", "(", ")", "\n", "top_n_tensor", "=", "tmp", "[", "0", "]", "\n", "top_n_index", "=", "top_n_index", "[", "tmp", "[", "1", "]", "]", "\n", "", "", "", "if", "self", ".", "use_two_stage", ":", "\n", "# from coarse to fine strategy", "\n", "                ", "for", "i", "in", "list", "(", "range", "(", "self", ".", "top_n", ")", ")", ":", "\n", "                    ", "if", "self", ".", "test_using_cos", ":", "\n", "                        ", "if", "self", ".", "opt", ".", "meancos_finer", ":", "\n", "                            ", "dist", "=", "-", "self", ".", "mean_cos", "(", "query_encoded_finer", ".", "view", "(", "256", ",", "-", "1", ")", ",", "\n", "self", ".", "database_feature_c0", "[", "top_n_index", "[", "i", "]", ".", "int", "(", ")", "]", "[", "1", "]", ".", "view", "(", "256", ",", "-", "1", ")", ")", ".", "mean", "(", "0", ")", "\n", "", "else", ":", "\n", "                            ", "dist", "=", "-", "self", ".", "cos", "(", "query_encoded_finer", ".", "view", "(", "-", "1", ")", ",", "\n", "self", ".", "database_feature_c0", "[", "top_n_index", "[", "i", "]", ".", "int", "(", ")", "]", "[", "1", "]", ".", "view", "(", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "dist", "=", "self", ".", "L2loss", "(", "query_encoded_finer", ".", "view", "(", "-", "1", ")", ",", "\n", "self", ".", "database_feature_c0", "[", "top_n_index", "[", "i", "]", ".", "int", "(", ")", "]", "[", "1", "]", ".", "view", "(", "-", "1", ")", ")", "\n", "", "if", "dist", "<", "min_dix", ":", "\n", "                        ", "min_dix", "=", "dist", "\n", "final_index", "=", "top_n_index", "[", "i", "]", ".", "int", "(", ")", "\n", "path", "=", "self", ".", "database_path_c0", "[", "final_index", "]", "\n", "", "", "if", "self", ".", "opt", ".", "save_sam_visualization", "and", "test_index", "%", "10", "==", "0", ":", "\n", "# save the visualized SAM maps", "\n", "                    ", "self", ".", "find_grad_sam", "(", "query_encoded_finer", ",", "query_path", ",", "self", ".", "database_feature_c0", "[", "\n", "self", ".", "database_dist_list_c0", ".", "index", "(", "sorted", "(", "self", ".", "database_dist_list_c0", ")", "[", "100", "]", ")", "]", "[", "1", "]", ",", "test_index", ",", "100", ")", "\n", "self", ".", "find_grad_sam", "(", "self", ".", "database_feature_c0", "[", "\n", "self", ".", "database_dist_list_c0", ".", "index", "(", "sorted", "(", "self", ".", "database_dist_list_c0", ")", "[", "100", "]", ")", "]", "[", "\n", "1", "]", ",", "self", ".", "database_path_c0", "[", "\n", "self", ".", "database_dist_list_c0", ".", "index", "(", "sorted", "(", "self", ".", "database_dist_list_c0", ")", "[", "100", "]", ")", "]", ",", "\n", "query_encoded_finer", ",", "test_index", ",", "100", ")", "\n", "self", ".", "find_grad_sam", "(", "query_encoded_finer", ",", "self", ".", "image_paths", "[", "0", "]", ",", "\n", "self", ".", "database_feature_c0", "[", "final_index", "]", "[", "1", "]", ",", "test_index", ")", "\n", "self", ".", "find_grad_sam", "(", "self", ".", "database_feature_c0", "[", "final_index", "]", "[", "1", "]", ",", "path", ",", "query_encoded_finer", ",", "test_index", ")", "\n", "", "", "print", "(", "\"Minimun distance is :\"", ",", "min_dix", ".", "item", "(", ")", ",", "\" least index: \"", ",", "final_index", ")", "\n", "print", "(", "\"Retrieved path: \"", ",", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "\" query path: \"", ",", "query_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", ",", "db_path", "in", "enumerate", "(", "self", ".", "database_path_c1", ")", ":", "\n", "# for camera 1", "\n", "                ", "if", "self", ".", "test_using_cos", ":", "\n", "                    ", "if", "self", ".", "opt", ".", "mean_cos", ":", "\n", "                        ", "dist", "=", "-", "self", ".", "mean_cos", "(", "query_encoded", ".", "view", "(", "256", ",", "-", "1", ")", ",", "\n", "self", ".", "database_feature_c1", "[", "i", "]", "[", "0", "]", ".", "view", "(", "256", ",", "-", "1", ")", ")", ".", "mean", "(", "0", ")", "\n", "", "else", ":", "\n", "                        ", "dist", "=", "-", "self", ".", "cos", "(", "query_encoded", ".", "view", "(", "-", "1", ")", ",", "\n", "self", ".", "database_feature_c1", "[", "i", "]", "[", "0", "]", ".", "view", "(", "-", "1", ")", ")", "# + L2loss(query_encoded,item[1])*0", "\n", "", "", "else", ":", "\n", "                    ", "dist", "=", "self", ".", "L2loss", "(", "query_encoded", ".", "view", "(", "-", "1", ")", ",", "self", ".", "database_feature_c1", "[", "i", "]", "[", "0", "]", ".", "view", "(", "-", "1", ")", ")", "\n", "", "if", "not", "self", ".", "use_two_stage", ":", "\n", "                    ", "if", "dist", "<", "min_dix", ":", "\n", "                        ", "min_dix", "=", "dist", "\n", "final_index", "=", "i", "\n", "path", "=", "db_path", "\n", "", "", "else", ":", "\n", "                    ", "if", "dist", "<", "top_n_tensor", "[", "self", ".", "top_n", "-", "1", "]", ":", "\n", "                        ", "top_n_tensor", "[", "self", ".", "top_n", "-", "1", "]", "=", "dist", "\n", "top_n_index", "[", "self", ".", "top_n", "-", "1", "]", "=", "i", "\n", "tmp", "=", "top_n_tensor", ".", "sort", "(", ")", "\n", "top_n_tensor", "=", "tmp", "[", "0", "]", "\n", "top_n_index", "=", "top_n_index", "[", "tmp", "[", "1", "]", "]", "\n", "", "", "", "if", "self", ".", "use_two_stage", ":", "\n", "                ", "for", "i", "in", "list", "(", "range", "(", "self", ".", "top_n", ")", ")", ":", "\n", "                    ", "if", "self", ".", "test_using_cos", ":", "\n", "                        ", "if", "self", ".", "opt", ".", "meancos_finer", ":", "\n", "                            ", "dist", "=", "-", "self", ".", "mean_cos", "(", "query_encoded_finer", ".", "view", "(", "256", ",", "-", "1", ")", ",", "\n", "self", ".", "database_feature_c1", "[", "top_n_index", "[", "i", "]", ".", "int", "(", ")", "]", "[", "1", "]", ".", "view", "(", "256", ",", "-", "1", ")", ")", ".", "mean", "(", "0", ")", "\n", "", "else", ":", "\n", "                            ", "dist", "=", "-", "self", ".", "cos", "(", "query_encoded_finer", ".", "view", "(", "-", "1", ")", ",", "\n", "self", ".", "database_feature_c1", "[", "top_n_index", "[", "i", "]", ".", "int", "(", ")", "]", "[", "1", "]", ".", "view", "(", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "dist", "=", "self", ".", "L2loss", "(", "query_encoded_finer", ".", "view", "(", "-", "1", ")", ",", "\n", "self", ".", "database_feature_c1", "[", "top_n_index", "[", "i", "]", ".", "int", "(", ")", "]", "[", "1", "]", ".", "view", "(", "-", "1", ")", ")", "\n", "", "if", "dist", "<", "min_dix", ":", "\n", "                        ", "min_dix", "=", "dist", "\n", "final_index", "=", "top_n_index", "[", "i", "]", ".", "int", "(", ")", "\n", "path", "=", "self", ".", "database_path_c1", "[", "final_index", "]", "\n", "", "", "", "print", "(", "\"Minimun distance is :\"", ",", "min_dix", ".", "item", "(", ")", ",", "\" least index: \"", ",", "final_index", ")", "\n", "print", "(", "\"Retrieved path: \"", ",", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "\" query path: \"", ",", "query_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "", "if", "query_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", "11", "]", "==", "'0'", ":", "\n", "            ", "if", "self", ".", "use_two_stage", ":", "\n", "                ", "return", "path", ",", "self", ".", "database_feature_c0", "[", "final_index", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "return", "path", ",", "self", ".", "database_feature_c0", "[", "final_index", "]", "[", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "use_two_stage", ":", "\n", "                ", "return", "path", ",", "self", ".", "database_feature_c1", "[", "final_index", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "return", "path", ",", "self", ".", "database_feature_c1", "[", "final_index", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.test": [[259, 279], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "disam_model.DISAM_Model.netG.encode", "disam_model.DISAM_Model.netG_finer.encode", "copy.deepcopy", "disam_model.DISAM_Model.image_retrieval", "disam_model.DISAM_Model.database_feature_c0.append", "disam_model.DISAM_Model.database_path_c0.append", "disam_model.DISAM_Model.database_feature_c1.append", "disam_model.DISAM_Model.database_path_c1.append", "copy.deepcopy.split"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.image_retrieval"], ["", "", "", "def", "test", "(", "self", ",", "index", "=", "0", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "visuals", "=", "[", "self", ".", "real_A", "]", "\n", "self", ".", "labels", "=", "[", "'query_image_%d'", "%", "self", ".", "DA", "]", "\n", "raw_encoded", "=", "self", ".", "netG", ".", "encode", "(", "self", ".", "real_A", ",", "self", ".", "DA", ")", "\n", "raw_encoded_finer", "=", "None", "\n", "if", "self", ".", "use_two_stage", ":", "raw_encoded_finer", "=", "self", ".", "netG_finer", ".", "encode", "(", "self", ".", "real_A", ",", "self", ".", "DA", ")", "\n", "if", "self", ".", "DA", "==", "0", ":", "\n", "# building the feature database", "\n", "                ", "db_path", "=", "copy", ".", "deepcopy", "(", "self", ".", "image_paths", "[", "0", "]", ")", "\n", "if", "db_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", "11", "]", "==", "'0'", ":", "\n", "                    ", "self", ".", "database_feature_c0", ".", "append", "(", "(", "raw_encoded", ",", "raw_encoded_finer", ")", ")", "\n", "self", ".", "database_path_c0", ".", "append", "(", "db_path", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "database_feature_c1", ".", "append", "(", "(", "raw_encoded", ",", "raw_encoded_finer", ")", ")", "\n", "self", ".", "database_path_c1", ".", "append", "(", "db_path", ")", "\n", "", "return", "\"database\"", "\n", "", "else", ":", "\n", "                ", "path", ",", "retrieved_image", "=", "self", ".", "image_retrieval", "(", "raw_encoded", ",", "self", ".", "image_paths", "[", "0", "]", ",", "raw_encoded_finer", ",", "index", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_grad_sam": [[280, 334], ["torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "copy.deepcopy().cuda", "copy.deepcopy().cuda.requires_grad_", "copy.deepcopy().cuda", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity.mean", "torch.nn.CosineSimilarity.mean", "torch.nn.CosineSimilarity.mean.backward", "torch.relu", "torch.relu", "cv2.resize.min", "cv2.resize.max", "cv2.resize", "cv2.applyColorMap", "skimage.io.imread", "disam_model.norm_image", "disam_model.norm_image", "disam_model.norm_image", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "cv2.resize.cpu().detach().numpy", "numpy.uint8", "numpy.float32", "numpy.float32", "numpy.float32", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "copy.deepcopy", "copy.deepcopy", "torch.nn.CosineSimilarity.", "torch.nn.CosineSimilarity.", "cv2.resize", "raw_encoded.view", "retrieved_image.view", "copy.deepcopy().cuda.view", "copy.deepcopy().cuda.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "cv2.resize.cpu().detach", "copy.deepcopy().cuda.grad.sum().sum().view().expand", "query_path.split", "query_path.split", "query_path.split", "query_path.split", "query_path.split", "query_path.split", "cv2.resize.cpu", "str", "str", "str", "copy.deepcopy().cuda.grad.sum().sum().view", "str", "str", "str", "str", "str", "str", "copy.deepcopy().cuda.grad.sum().sum", "str", "str", "str", "str", "str", "str", "copy.deepcopy().cuda.grad.sum", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.norm_image", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.norm_image", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.norm_image"], ["", "", "", "def", "find_grad_sam", "(", "self", ",", "raw_encoded", ",", "query_path", ",", "retrieved_image", ",", "index", ",", "rank", "=", "-", "1", ")", ":", "\n", "        ", "with", "torch", ".", "set_grad_enabled", "(", "True", ")", ":", "\n", "            ", "new_raw_encoded", "=", "copy", ".", "deepcopy", "(", "raw_encoded", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ".", "cuda", "(", ")", "\n", "new_raw_encoded", ".", "requires_grad_", "(", "True", ")", "\n", "new_retrieved_image", "=", "copy", ".", "deepcopy", "(", "retrieved_image", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ".", "cuda", "(", ")", "\n", "mean_cos", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ",", "eps", "=", "1e-8", ")", "\n", "mean_cos_similarity", "=", "mean_cos", "(", "new_raw_encoded", ".", "view", "(", "256", ",", "-", "1", ")", ",", "new_retrieved_image", ".", "view", "(", "256", ",", "-", "1", ")", ")", ".", "mean", "(", "0", ")", "\n", "mean_cos_similarity", ".", "backward", "(", ")", "\n", "\n", "mask", "=", "F", ".", "relu", "(", "torch", ".", "mul", "(", "new_raw_encoded", ",", "\n", "new_raw_encoded", ".", "grad", ".", "sum", "(", "1", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "256", ",", "1", ",", "1", ")", ".", "expand", "(", "[", "256", ",", "64", ",", "64", "]", ")", ")", ".", "sum", "(", "\n", "dim", "=", "0", ")", ")", "\n", "# normalization", "\n", "mask", "-=", "mask", ".", "min", "(", ")", "\n", "mask", "/=", "mask", ".", "max", "(", ")", "\n", "mask", "=", "cv2", ".", "resize", "(", "mask", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "(", "256", ",", "256", ")", ")", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "mask", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "heatmap", "=", "np", ".", "float32", "(", "heatmap", ")", "/", "255", "\n", "heatmap", "=", "heatmap", "[", "...", ",", ":", ":", "-", "1", "]", "# gbr to rgb", "\n", "img", "=", "io", ".", "imread", "(", "query_path", ")", "\n", "img", "=", "np", ".", "float32", "(", "cv2", ".", "resize", "(", "img", ",", "(", "256", ",", "256", ")", ")", ")", "/", "255", "\n", "\n", "sam", "=", "heatmap", "+", "np", ".", "float32", "(", "img", ")", "\n", "sam", "=", "norm_image", "(", "sam", ")", "\n", "heatmap", "=", "norm_image", "(", "heatmap", ")", "\n", "img", "=", "norm_image", "(", "img", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "opt", ".", "sam_matched_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "opt", ".", "sam_matched_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "opt", ".", "sam_mismatched_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "opt", ".", "sam_mismatched_dir", ")", "\n", "", "if", "rank", "==", "-", "1", ":", "\n", "                ", "io", ".", "imsave", "(", "self", ".", "opt", ".", "sam_matched_dir", "+", "self", ".", "opt", ".", "name", "+", "\"_\"", "+", "self", ".", "opt", ".", "name_finer", "+", "'_s'", "+", "str", "(", "\n", "self", ".", "opt", ".", "which_slice", ")", "+", "\"_top\"", "+", "str", "(", "self", ".", "opt", ".", "top_n", ")", "+", "\"_\"", "+", "str", "(", "index", ")", "+", "'_sam'", "+", "'_'", "+", "\n", "query_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "sam", ")", "\n", "io", ".", "imsave", "(", "self", ".", "opt", ".", "sam_matched_dir", "+", "self", ".", "opt", ".", "name", "+", "\"_\"", "+", "self", ".", "opt", ".", "name_finer", "+", "'_s'", "+", "str", "(", "\n", "self", ".", "opt", ".", "which_slice", ")", "+", "\"_top\"", "+", "str", "(", "self", ".", "opt", ".", "top_n", ")", "+", "\"_\"", "+", "str", "(", "index", ")", "+", "'_heat'", "+", "'_'", "+", "\n", "query_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "heatmap", ")", "\n", "io", ".", "imsave", "(", "self", ".", "opt", ".", "sam_matched_dir", "+", "self", ".", "opt", ".", "name", "+", "\"_\"", "+", "self", ".", "opt", ".", "name_finer", "+", "'_s'", "+", "str", "(", "\n", "self", ".", "opt", ".", "which_slice", ")", "+", "\"_top\"", "+", "str", "(", "self", ".", "opt", ".", "top_n", ")", "+", "\"_\"", "+", "str", "(", "index", ")", "+", "'_img'", "+", "'_'", "+", "\n", "query_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "img", ")", "\n", "\n", "", "else", ":", "\n", "                ", "io", ".", "imsave", "(", "self", ".", "opt", ".", "sam_mismatched_dir", "+", "self", ".", "opt", ".", "name", "+", "\"_\"", "+", "self", ".", "opt", ".", "name_finer", "+", "'_s'", "+", "str", "(", "\n", "self", ".", "opt", ".", "which_slice", ")", "+", "\"_top\"", "+", "str", "(", "self", ".", "opt", ".", "top_n", ")", "+", "\"_\"", "+", "str", "(", "index", ")", "+", "'_sam_'", "+", "str", "(", "\n", "rank", ")", "+", "'_'", "+", "query_path", ".", "split", "(", "'/'", ")", "[", "\n", "-", "1", "]", ",", "sam", ")", "\n", "io", ".", "imsave", "(", "self", ".", "opt", ".", "sam_mismatched_dir", "+", "self", ".", "opt", ".", "name", "+", "\"_\"", "+", "self", ".", "opt", ".", "name_finer", "+", "'_s'", "+", "str", "(", "\n", "self", ".", "opt", ".", "which_slice", ")", "+", "\"_top\"", "+", "str", "(", "self", ".", "opt", ".", "top_n", ")", "+", "\"_\"", "+", "str", "(", "index", ")", "+", "'_heat_'", "+", "str", "(", "\n", "rank", ")", "+", "'_'", "+", "query_path", ".", "split", "(", "'/'", ")", "[", "\n", "-", "1", "]", ",", "heatmap", ")", "\n", "io", ".", "imsave", "(", "self", ".", "opt", ".", "sam_mismatched_dir", "+", "self", ".", "opt", ".", "name", "+", "\"_\"", "+", "self", ".", "opt", ".", "name_finer", "+", "'_s'", "+", "str", "(", "\n", "self", ".", "opt", ".", "which_slice", ")", "+", "\"_top\"", "+", "str", "(", "self", ".", "opt", ".", "top_n", ")", "+", "\"_\"", "+", "str", "(", "index", ")", "+", "'_img_'", "+", "str", "(", "\n", "rank", ")", "+", "'_'", "+", "query_path", ".", "split", "(", "'/'", ")", "[", "\n", "-", "1", "]", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight": [[335, 341], ["torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity.mean", "torch.nn.CosineSimilarity.mean", "grad_map.sum().sum().view().expand", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.nn.CosineSimilarity.", "torch.nn.CosineSimilarity.", "grad_map.sum().sum().view", "query.view", "db.view", "grad_map.sum().sum", "grad_map.sum"], "methods", ["None"], ["", "", "", "def", "find_sam_weight", "(", "self", ",", "query", ",", "db", ")", ":", "\n", "        ", "mean_cos", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ",", "eps", "=", "1e-8", ")", "\n", "mean_cos_similarity", "=", "mean_cos", "(", "query", ".", "view", "(", "256", ",", "-", "1", ")", ",", "db", ".", "view", "(", "256", ",", "-", "1", ")", ")", ".", "mean", "(", "0", ")", "\n", "grad_map", "=", "torch", ".", "autograd", ".", "grad", "(", "mean_cos_similarity", ",", "query", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "weight", "=", "grad_map", ".", "sum", "(", "1", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "256", ",", "1", ",", "1", ")", ".", "expand", "(", "[", "256", ",", "64", ",", "64", "]", ")", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.get_image_paths": [[342, 344], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.save_features": [[345, 364], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "disam_model.DISAM_Model.netG.encode", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view.cpu().numpy", "copy.deepcopy", "print", "numpy.savez", "os.path.exists", "os.makedirs", "disam_model.DISAM_Model.netG_finer.encode", "numpy.savez", "disam_model.DISAM_Model.view.cpu", "os.path.exists", "os.makedirs", "disam_model.DISAM_Model.view().cpu().numpy", "copy.deepcopy.split", "copy.deepcopy.split", "copy.deepcopy.split", "copy.deepcopy.split", "disam_model.DISAM_Model.view().cpu", "copy.deepcopy.split", "copy.deepcopy.split", "copy.deepcopy.split", "copy.deepcopy.split", "copy.deepcopy.split", "copy.deepcopy.split", "disam_model.DISAM_Model.view"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.encode"], ["", "def", "save_features", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "labels", "=", "[", "'query_image_%d'", "%", "self", ".", "DA", "]", "\n", "raw_encoded", "=", "self", ".", "netG", ".", "encode", "(", "self", ".", "real_A", ",", "self", ".", "DA", ")", "\n", "\n", "encoded", "=", "raw_encoded", ".", "view", "(", "-", "1", ")", "# encoded_new1", "\n", "encoded_np", "=", "encoded", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "db_path", "=", "copy", ".", "deepcopy", "(", "self", ".", "image_paths", "[", "0", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"./features/\"", "+", "db_path", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "\"./features/\"", "+", "db_path", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", ")", "\n", "", "print", "(", "\"./features/\"", "+", "db_path", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "+", "'/'", "+", "db_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "\n", "np", ".", "savez", "(", "\"./features/\"", "+", "db_path", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "+", "'/'", "+", "db_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", ",", "encoded_np", ",", "db_path", ")", "\n", "if", "self", ".", "use_two_stage", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "\"./features_finer/\"", "+", "db_path", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "\"./features_finer/\"", "+", "db_path", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", ")", "\n", "", "raw_encoded_finer", "=", "self", ".", "netG_finer", ".", "encode", "(", "self", ".", "real_A", ",", "self", ".", "DA", ")", "\n", "np", ".", "savez", "(", "\"./features_finer/\"", "+", "db_path", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "+", "'/'", "+", "db_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", ",", "\n", "raw_encoded_finer", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "db_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_query_features": [[365, 380], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "disam_model.DISAM_Model.netG.encode", "disam_model.DISAM_Model.view", "copy.deepcopy", "disam_model.DISAM_Model.query_feature_list.append", "disam_model.DISAM_Model.netG_finer.encode().view", "disam_model.DISAM_Model.netG_finer.encode"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.encode"], ["", "", "", "def", "find_query_features", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "labels", "=", "[", "'query_image_%d'", "%", "self", ".", "DA", "]", "\n", "raw_encoded", "=", "self", ".", "netG", ".", "encode", "(", "self", ".", "real_A", ",", "self", ".", "DA", ")", "\n", "encoded", "=", "raw_encoded", ".", "view", "(", "-", "1", ")", "# encoded_new1", "\n", "\n", "# image = copy.deepcopy(self.real_A)", "\n", "qr_path", "=", "copy", ".", "deepcopy", "(", "self", ".", "image_paths", "[", "0", "]", ")", "\n", "if", "self", ".", "use_two_stage", ":", "\n", "                ", "raw_encoded_finer", "=", "self", ".", "netG_finer", ".", "encode", "(", "self", ".", "real_A", ",", "self", ".", "DA", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "raw_encoded_finer", "=", "None", "\n", "", "pair", "=", "(", "encoded", ",", "qr_path", ",", "raw_encoded_finer", ")", "\n", "# if len(list) % 1 == 0:", "\n", "self", ".", "query_feature_list", ".", "append", "(", "pair", ")", "# image and coder", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_dist_mat": [[381, 417], ["torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "enumerate", "numpy.savez", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "sorted", "sorted", "print", "numpy.load", "disam_model.DISAM_Model.robotcar_database.append", "enumerate", "dist_mat.append", "numpy.array", "glob.glob", "glob.glob", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "dist_mat_row.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "dist.cpu().numpy().tolist", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.nn.CosineSimilarity.mean", "torch.nn.CosineSimilarity.mean", "torch.nn.CosineSimilarity.", "torch.nn.CosineSimilarity.", "dist.cpu().numpy", "disam_model.DISAM_Model.opt.dataroot.split", "disam_model.DISAM_Model.opt.dataroot.split", "torch.nn.CosineSimilarity.", "torch.nn.CosineSimilarity.", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "str", "query_feat[].view", "torch.from_numpy().cuda().view", "torch.from_numpy().cuda().view", "torch.from_numpy().cuda().view", "torch.from_numpy().cuda().view", "dist.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "disam_model.DISAM_Model.opt.dataroot.split", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.load", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda"], ["", "", "def", "find_dist_mat", "(", "self", ")", ":", "\n", "        ", "cos", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "0", ",", "eps", "=", "1e-8", ")", "\n", "mean_cos", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ",", "eps", "=", "1e-8", ")", "\n", "dist_mat", "=", "[", "]", "\n", "if", "self", ".", "opt", ".", "only_for_finer", ":", "\n", "            ", "self", ".", "dirs", "=", "sorted", "(", "glob", ".", "glob", "(", "\"./features_finer/\"", "+", "self", ".", "opt", ".", "dataroot", ".", "split", "(", "'/'", ")", "[", "3", "]", "+", "\"/*\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dirs", "=", "sorted", "(", "glob", ".", "glob", "(", "\"./features/\"", "+", "self", ".", "opt", ".", "dataroot", ".", "split", "(", "'/'", ")", "[", "3", "]", "+", "\"/*\"", ")", ")", "\n", "", "for", "i", ",", "name", "in", "enumerate", "(", "self", ".", "dirs", ")", ":", "\n", "            ", "print", "(", "i", ",", "name", ")", "\n", "feature_path", "=", "np", ".", "load", "(", "name", ")", "\n", "self", ".", "robotcar_database", ".", "append", "(", "torch", ".", "from_numpy", "(", "feature_path", "[", "'arr_0'", "]", ")", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", "\n", "dist_mat_row", "=", "[", "]", "\n", "for", "j", ",", "query_feat", "in", "enumerate", "(", "self", ".", "query_feature_list", ")", ":", "\n", "                ", "if", "self", ".", "opt", ".", "mean_cos", ":", "\n", "                    ", "dist", "=", "1", "-", "mean_cos", "(", "query_feat", "[", "0", "]", ".", "view", "(", "256", ",", "-", "1", ")", ",", "\n", "torch", ".", "from_numpy", "(", "feature_path", "[", "'arr_0'", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "256", ",", "-", "1", ")", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                    ", "dist", "=", "1", "-", "cos", "(", "query_feat", "[", "0", "]", ",", "\n", "torch", ".", "from_numpy", "(", "\n", "feature_path", "[", "'arr_0'", "]", ")", ".", "cuda", "(", ")", ")", "*", "1", "# + L2loss(query_encoded,item[1])*0", "\n", "", "dist_mat_row", ".", "append", "(", "dist", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "", "dist_mat", ".", "append", "(", "dist_mat_row", ")", "\n", "", "if", "self", ".", "opt", ".", "mean_cos", ":", "\n", "            ", "mean_cos", "=", "\"meancos\"", "\n", "", "else", ":", "\n", "            ", "mean_cos", "=", "\"plaincos\"", "\n", "", "if", "self", ".", "opt", ".", "meancos_finer", ":", "\n", "            ", "mean_cos_finer", "=", "\"meancosfiner\"", "\n", "", "else", ":", "\n", "            ", "mean_cos_finer", "=", "\"plaincosfiner\"", "\n", "", "np", ".", "savez", "(", "\n", "\"dist_mat_cos_\"", "+", "self", ".", "opt", ".", "dataroot", ".", "split", "(", "'/'", ")", "[", "3", "]", "+", "\"_env\"", "+", "str", "(", "self", ".", "opt", ".", "test_condition", ")", "+", "'_'", "+", "mean_cos", "\n", "+", "'_'", "+", "mean_cos_finer", ",", "\n", "np", ".", "array", "(", "dist_mat", ")", ")", "\n", "self", ".", "dist_mat_torch", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "dist_mat", ")", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.load_dist_mat": [[418, 439], ["enumerate", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "sorted", "sorted", "print", "disam_model.DISAM_Model.robotcar_database.append", "glob.glob", "glob.glob", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.load", "disam_model.DISAM_Model.opt.dataroot.split", "disam_model.DISAM_Model.opt.dataroot.split", "numpy.load", "str", "disam_model.DISAM_Model.opt.dataroot.split"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.load", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.load"], ["", "def", "load_dist_mat", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "mean_cos", ":", "\n", "            ", "mean_cos", "=", "\"meancos\"", "\n", "", "else", ":", "\n", "            ", "mean_cos", "=", "\"plaincos\"", "\n", "", "if", "self", ".", "opt", ".", "meancos_finer", ":", "\n", "            ", "mean_cos_finer", "=", "\"meancosfiner\"", "\n", "", "else", ":", "\n", "            ", "mean_cos_finer", "=", "\"plaincosfiner\"", "\n", "", "if", "self", ".", "opt", ".", "only_for_finer", ":", "\n", "            ", "self", ".", "dirs", "=", "sorted", "(", "glob", ".", "glob", "(", "\"./features_finer/\"", "+", "self", ".", "opt", ".", "dataroot", ".", "split", "(", "'/'", ")", "[", "3", "]", "+", "\"/*\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dirs", "=", "sorted", "(", "glob", ".", "glob", "(", "\"./features/\"", "+", "self", ".", "opt", ".", "dataroot", ".", "split", "(", "'/'", ")", "[", "3", "]", "+", "\"/*\"", ")", ")", "\n", "", "for", "i", ",", "name", "in", "enumerate", "(", "self", ".", "dirs", ")", ":", "\n", "            ", "print", "(", "i", ",", "name", ")", "\n", "self", ".", "robotcar_database", ".", "append", "(", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "name", ")", "[", "'arr_0'", "]", ")", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", "\n", "", "self", ".", "dist_mat_torch", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "load", "(", "\"dist_mat_cos_\"", "+", "self", ".", "opt", ".", "dataroot", ".", "split", "(", "'/'", ")", "[", "3", "]", "+", "\"_env\"", "+", "str", "(", "\n", "self", ".", "opt", ".", "test_condition", ")", "+", "'_'", "+", "mean_cos", "\n", "+", "'_'", "+", "mean_cos_finer", "+", "\".npz\"", ")", "[", "\n", "'arr_0'", "]", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_retrieval": [[440, 502], ["torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "sorted", "enumerate", "print", "print", "print", "print", "least_dist_index_topN.transpose", "glob.glob", "retrieved_path.append", "query_path.append", "torch.argmin().cpu().numpy", "torch.argmin().cpu().numpy", "torch.argmin().cpu().numpy", "torch.argmin().cpu().numpy", "list", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "[].cpu().numpy", "list", "range", "query_path.append", "retrieved_path.append", "range", "query_path.append", "retrieved_path.append", "torch.argmin().cpu", "torch.argmin().cpu", "torch.argmin().cpu", "torch.argmin().cpu", "[].cpu", "disam_model.DISAM_Model.find_grad_sam", "disam_model.DISAM_Model.find_grad_sam", "disam_model.DISAM_Model.find_grad_sam", "disam_model.DISAM_Model.find_grad_sam", "torch.nn.CosineSimilarity.mean", "torch.nn.CosineSimilarity.mean", "disam_model.DISAM_Model.opt.dataroot.split", "torch.nn.CosineSimilarity.", "torch.nn.CosineSimilarity.", "_index.cpu().numpy", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.nn.CosineSimilarity.", "torch.nn.CosineSimilarity.", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "least_dist_index_topN.transpose", "query_feature.view", "torch.from_numpy().cuda().view", "torch.from_numpy().cuda().view", "torch.from_numpy().cuda().view", "torch.from_numpy().cuda().view", "_index.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "disam_model.DISAM_Model.dirs[].split", "disam_model.DISAM_Model.dirs[].split", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "numpy.load", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.load", "_index.cpu().numpy", "_index.cpu", "_index.cpu().numpy", "_index.cpu"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_grad_sam", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_grad_sam", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_grad_sam", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_grad_sam", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.load", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.load"], ["", "def", "find_retrieval", "(", "self", ")", ":", "\n", "        ", "query_path", "=", "[", "]", "\n", "retrieved_path", "=", "[", "]", "\n", "if", "self", ".", "use_two_stage", ":", "\n", "            ", "cos", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "0", ",", "eps", "=", "1e-8", ")", "\n", "mean_cos", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ",", "eps", "=", "1e-8", ")", "\n", "_", ",", "least_dist_index_topN", "=", "torch", ".", "sort", "(", "self", ".", "dist_mat_torch", ",", "0", ")", "\n", "least_dist_index_topN", "=", "least_dist_index_topN", ".", "transpose", "(", "0", ",", "1", ")", "[", ":", ",", ":", "self", ".", "top_n", "]", "\n", "self", ".", "dirs_finer", "=", "sorted", "(", "glob", ".", "glob", "(", "\"./features_finer/\"", "+", "self", ".", "opt", ".", "dataroot", ".", "split", "(", "'/'", ")", "[", "3", "]", "+", "\"/*\"", ")", ")", "\n", "for", "query_index", ",", "top_n_index", "in", "enumerate", "(", "least_dist_index_topN", ")", ":", "\n", "                ", "query_feature", "=", "self", ".", "query_feature_list", "[", "query_index", "]", "[", "2", "]", "\n", "least_value", "=", "1000000", "\n", "path", "=", "None", "\n", "for", "_index", "in", "top_n_index", ":", "\n", "                    ", "if", "self", ".", "opt", ".", "mean_cos", ":", "\n", "                        ", "dist", "=", "1", "-", "mean_cos", "(", "query_feature", ".", "view", "(", "256", ",", "-", "1", ")", ",", "\n", "torch", ".", "from_numpy", "(", "\n", "np", ".", "load", "(", "self", ".", "dirs_finer", "[", "_index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "[", "'arr_0'", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "256", ",", "-", "1", ")", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                        ", "dist", "=", "1", "-", "cos", "(", "query_feature", ",", "\n", "torch", ".", "from_numpy", "(", "\n", "np", ".", "load", "(", "self", ".", "dirs_finer", "[", "_index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "[", "'arr_0'", "]", ")", ".", "cuda", "(", ")", ")", "*", "1", "\n", "", "if", "dist", "<", "least_value", ":", "\n", "                        ", "least_value", "=", "dist", "\n", "path", "=", "self", ".", "dirs_finer", "[", "_index", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "", "", "retrieved_path", ".", "append", "(", "path", ")", "\n", "query_path", ".", "append", "(", "self", ".", "query_feature_list", "[", "query_index", "]", "[", "1", "]", ")", "\n", "", "print", "(", "\"query_path: \"", ",", "query_path", ")", "\n", "print", "(", "\"retrieved_path: \"", ",", "retrieved_path", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "save_sam_visualization", ":", "\n", "                ", "least_dist_index", "=", "torch", ".", "argmin", "(", "self", ".", "dist_mat_torch", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "list", "(", "range", "(", "least_dist_index", ".", "size", ")", ")", ":", "\n", "                    ", "query_path", ".", "append", "(", "self", ".", "query_feature_list", "[", "i", "]", "[", "1", "]", ")", "\n", "retrieved_path", ".", "append", "(", "self", ".", "dirs", "[", "least_dist_index", "[", "i", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "_", ",", "least_dist_index_topN", "=", "torch", ".", "sort", "(", "self", ".", "dist_mat_torch", ",", "0", ")", "\n", "least_dist_index", "=", "least_dist_index_topN", ".", "transpose", "(", "0", ",", "1", ")", "[", ":", ",", ":", "100", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "list", "(", "range", "(", "least_dist_index", ".", "size", ")", ")", ":", "\n", "                    ", "query_path", ".", "append", "(", "self", ".", "query_feature_list", "[", "i", "]", "[", "1", "]", ")", "\n", "retrieved_path", ".", "append", "(", "self", ".", "dirs", "[", "least_dist_index", "[", "i", "]", "[", "0", "]", "]", ")", "\n", "if", "i", "%", "10", "==", "0", ":", "\n", "                        ", "self", ".", "find_grad_sam", "(", "self", ".", "query_feature_list", "[", "i", "]", "[", "0", "]", ",", "self", ".", "query_feature_list", "[", "i", "]", "[", "1", "]", ",", "\n", "self", ".", "robotcar_database", "[", "least_dist_index", "[", "i", "]", "[", "0", "]", "]", ",", "i", ")", "\n", "self", ".", "find_grad_sam", "(", "self", ".", "robotcar_database", "[", "least_dist_index", "[", "i", "]", "[", "0", "]", "]", ",", "\n", "self", ".", "opt", ".", "dataroot", "+", "\"test00/\"", "+", "self", ".", "dirs", "[", "least_dist_index", "[", "i", "]", "[", "0", "]", "]", ".", "split", "(", "'/'", ")", "[", "\n", "-", "1", "]", "[", "\n", ":", "-", "4", "]", "+", "\".jpg\"", ",", "self", ".", "query_feature_list", "[", "i", "]", "[", "0", "]", ",", "\n", "i", ")", "\n", "self", ".", "find_grad_sam", "(", "self", ".", "query_feature_list", "[", "i", "]", "[", "0", "]", ",", "self", ".", "query_feature_list", "[", "i", "]", "[", "1", "]", ",", "\n", "self", ".", "robotcar_database", "[", "least_dist_index", "[", "i", "]", "[", "99", "]", "]", ",", "i", ",", "100", ")", "\n", "self", ".", "find_grad_sam", "(", "self", ".", "robotcar_database", "[", "least_dist_index", "[", "i", "]", "[", "99", "]", "]", ",", "\n", "self", ".", "opt", ".", "dataroot", "+", "\"test00/\"", "+", "self", ".", "dirs", "[", "least_dist_index", "[", "i", "]", "[", "0", "]", "]", ".", "split", "(", "'/'", ")", "[", "\n", "-", "1", "]", "[", "\n", ":", "-", "4", "]", "+", "\".jpg\"", ",", "\n", "self", ".", "query_feature_list", "[", "i", "]", "[", "99", "]", ",", "i", ",", "\n", "100", ")", "\n", "\n", "", "", "", "print", "(", "\"query_path: \"", ",", "query_path", ")", "\n", "print", "(", "\"retrieved_path: \"", ",", "retrieved_path", ")", "\n", "", "return", "query_path", ",", "retrieved_path", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.backward_D_basic": [[503, 515], ["disam_model.DISAM_Model.netD.forward", "disam_model.DISAM_Model.criterionGAN", "disam_model.DISAM_Model.netD.forward", "disam_model.DISAM_Model.criterionGAN", "loss_D.backward", "fake.detach"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.forward"], ["", "def", "backward_D_basic", "(", "self", ",", "real", ",", "fake", ",", "domain", ")", ":", "\n", "# Real", "\n", "        ", "pred_real", "=", "self", ".", "netD", ".", "forward", "(", "real", ",", "domain", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "# Fake", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "fake", ".", "detach", "(", ")", ",", "domain", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "\n", "# Combined loss", "\n", "loss_D", "=", "(", "loss_D_real", "+", "loss_D_fake", ")", "*", "0.5", "\n", "# backward", "\n", "loss_D", ".", "backward", "(", ")", "\n", "return", "loss_D", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.backward_D": [[516, 523], ["disam_model.DISAM_Model.fake_pools[].query", "disam_model.DISAM_Model.backward_D_basic", "disam_model.DISAM_Model.fake_pools[].query", "disam_model.DISAM_Model.backward_D_basic"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.backward_D_basic", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.backward_D_basic"], ["", "def", "backward_D", "(", "self", ")", ":", "\n", "# D_A", "\n", "        ", "fake_B", "=", "self", ".", "fake_pools", "[", "self", ".", "DB", "]", ".", "query", "(", "self", ".", "fake_B", ")", "\n", "self", ".", "loss_D", "[", "self", ".", "DA", "]", "=", "self", ".", "backward_D_basic", "(", "self", ".", "real_B", ",", "fake_B", ",", "self", ".", "DB", ")", "\n", "# D_B", "\n", "fake_A", "=", "self", ".", "fake_pools", "[", "self", ".", "DA", "]", ".", "query", "(", "self", ".", "fake_A", ")", "\n", "self", ".", "loss_D", "[", "self", ".", "DB", "]", "=", "self", ".", "backward_D_basic", "(", "self", ".", "real_A", ",", "fake_A", ",", "self", ".", "DA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.backward_G": [[524, 724], ["disam_model.DISAM_Model.netG.encode", "disam_model.DISAM_Model.netG.encode", "disam_model.DISAM_Model.netG.decode", "disam_model.DISAM_Model.netD.forward", "disam_model.DISAM_Model.criterionGAN", "disam_model.DISAM_Model.netG.decode", "disam_model.DISAM_Model.netD.forward", "disam_model.DISAM_Model.criterionGAN", "disam_model.DISAM_Model.netG.encode", "disam_model.DISAM_Model.netG.decode", "disam_model.DISAM_Model.criterionCycle", "disam_model.DISAM_Model.netG.encode", "disam_model.DISAM_Model.netG.decode", "disam_model.DISAM_Model.criterionCycle", "disam_model.DISAM_Model.L2loss", "disam_model.DISAM_Model.L2loss", "loss_G.backward", "disam_model.DISAM_Model.netG.encode", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view().detach", "torch.max", "torch.max", "torch.max", "torch.max", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view().detach", "torch.max", "torch.max", "torch.max", "torch.max", "disam_model.DISAM_Model.L2loss", "disam_model.DISAM_Model.L2loss", "torch.argmin().item", "torch.argmin().item", "torch.argmin().item", "torch.argmin().item", "disam_model.DISAM_Model.L2loss", "disam_model.DISAM_Model.L2loss", "torch.argmin().item", "torch.argmin().item", "torch.argmin().item", "torch.argmin().item", "disam_model.DISAM_Model.L2loss", "disam_model.DISAM_Model.L2loss", "disam_model.DISAM_Model.mean_cos().mean", "disam_model.DISAM_Model.cos", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "disam_model.DISAM_Model.L2loss", "disam_model.DISAM_Model.L2loss", "disam_model.DISAM_Model.mean_cos().mean", "disam_model.DISAM_Model.cos", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.relu().view", "torch.relu().view", "torch.relu().view().detach", "torch.relu().view().detach", "torch.relu().view", "torch.relu().view", "torch.relu().view().detach", "torch.relu().view().detach", "disam_model.DISAM_Model.loss_sam[].cuda", "disam_model.DISAM_Model.loss_sam[].cuda", "disam_model.DISAM_Model.cuda", "torch.max", "torch.max", "torch.max", "torch.max", "disam_model.DISAM_Model.view", "neg_B_features[].view().detach", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view().detach", "disam_model.DISAM_Model.view", "neg_B_features[].view().detach", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view().detach", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view().detach", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view().detach", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.cuda", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "disam_model.DISAM_Model.mean_cos", "disam_model.DISAM_Model.mean_cos", "torch.relu", "torch.relu", "torch.relu().view", "torch.relu().view", "torch.relu", "torch.relu", "torch.relu().view", "torch.relu().view", "disam_model.DISAM_Model.L2loss", "torch.argmin().item", "torch.argmin().item", "torch.argmin().item", "torch.argmin().item", "disam_model.DISAM_Model.L2loss", "disam_model.DISAM_Model.L2loss", "disam_model.DISAM_Model.L2loss", "torch.argmin().item", "torch.argmin().item", "torch.argmin().item", "torch.argmin().item", "disam_model.DISAM_Model.L2loss", "disam_model.DISAM_Model.L2loss", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "neg_B_features[].view", "disam_model.DISAM_Model.view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "neg_B_features[].view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.relu().view", "torch.relu().view", "torch.relu().view().detach", "torch.relu().view().detach", "torch.relu().view", "torch.relu().view", "torch.relu().view().detach", "torch.relu().view().detach", "torch.relu().view", "torch.relu().view", "torch.relu().view().detach", "torch.relu().view().detach", "torch.relu().view", "torch.relu().view", "torch.relu().view().detach", "torch.relu().view().detach", "torch.relu().view", "torch.relu().view", "torch.relu().view().detach", "torch.relu().view().detach", "torch.relu().view", "torch.relu().view", "torch.relu().view().detach", "torch.relu().view().detach", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "disam_model.DISAM_Model.L2loss", "disam_model.DISAM_Model.L2loss", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.relu", "torch.relu", "torch.relu().view", "torch.relu().view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.relu", "torch.relu", "torch.relu().view", "torch.relu().view", "torch.relu", "torch.relu", "torch.relu().view", "torch.relu().view", "torch.relu", "torch.relu", "torch.relu().view", "torch.relu().view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.relu", "torch.relu", "torch.relu().view", "torch.relu().view", "torch.relu", "torch.relu", "torch.relu().view", "torch.relu().view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "disam_model.DISAM_Model.view", "neg_B.view().detach", "disam_model.DISAM_Model.view", "neg_B.view().detach", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.relu", "torch.relu", "disam_model.DISAM_Model.L2loss", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "disam_model.DISAM_Model.L2loss", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "neg_B.view", "neg_B.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.relu().view", "torch.relu().view", "torch.relu().view().detach", "torch.relu().view().detach", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.relu().view", "torch.relu().view", "torch.relu().view().detach", "torch.relu().view().detach", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "neg_B_features[].view", "disam_model.DISAM_Model.find_sam_weight", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "neg_B_features[].view", "disam_model.DISAM_Model.find_sam_weight", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.relu", "torch.relu", "torch.relu().view", "torch.relu().view", "neg_B_features[].view", "disam_model.DISAM_Model.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.relu", "torch.relu", "torch.relu().view", "torch.relu().view", "neg_B_features[].view", "disam_model.DISAM_Model.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "torch.relu", "torch.relu", "disam_model.DISAM_Model.view", "neg_B_features[].view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "torch.relu", "torch.relu", "disam_model.DISAM_Model.view", "neg_B_features[].view", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "neg_B.view", "disam_model.DISAM_Model.find_sam_weight", "neg_B.view", "disam_model.DISAM_Model.find_sam_weight", "neg_B.view", "disam_model.DISAM_Model.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "neg_B.view", "disam_model.DISAM_Model.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "disam_model.DISAM_Model.view", "disam_model.DISAM_Model.find_sam_weight", "disam_model.DISAM_Model.view", "neg_B.view", "disam_model.DISAM_Model.view", "neg_B.view"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.decode", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.decode", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.decode", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.decode", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.encode", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.find_sam_weight"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "        ", "encoded_A", "=", "self", ".", "netG", ".", "encode", "(", "self", ".", "real_A", ",", "self", ".", "DA", ")", "\n", "encoded_B", "=", "self", ".", "netG", ".", "encode", "(", "self", ".", "real_B", ",", "self", ".", "DB", ")", "\n", "\n", "# GAN loss", "\n", "# D_A(G_A(A))", "\n", "self", ".", "fake_B", "=", "self", ".", "netG", ".", "decode", "(", "encoded_A", ",", "self", ".", "DB", ")", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "self", ".", "fake_B", ",", "self", ".", "DB", ")", "\n", "self", ".", "loss_G", "[", "self", ".", "DA", "]", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "# D_B(G_B(B))", "\n", "self", ".", "fake_A", "=", "self", ".", "netG", ".", "decode", "(", "encoded_B", ",", "self", ".", "DA", ")", "\n", "pred_fake", "=", "self", ".", "netD", ".", "forward", "(", "self", ".", "fake_A", ",", "self", ".", "DA", ")", "\n", "self", ".", "loss_G", "[", "self", ".", "DB", "]", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "# Forward cycle loss", "\n", "rec_encoded_A", "=", "self", ".", "netG", ".", "encode", "(", "self", ".", "fake_B", ",", "self", ".", "DB", ")", "\n", "self", ".", "rec_A", "=", "self", ".", "netG", ".", "decode", "(", "rec_encoded_A", ",", "self", ".", "DA", ")", "\n", "self", ".", "loss_cycle", "[", "self", ".", "DA", "]", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_A", ",", "self", ".", "real_A", ")", "\n", "# Backward cycle loss", "\n", "rec_encoded_B", "=", "self", ".", "netG", ".", "encode", "(", "self", ".", "fake_A", ",", "self", ".", "DA", ")", "\n", "self", ".", "rec_B", "=", "self", ".", "netG", ".", "decode", "(", "rec_encoded_B", ",", "self", ".", "DB", ")", "\n", "self", ".", "loss_cycle", "[", "self", ".", "DB", "]", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_B", ",", "self", ".", "real_B", ")", "\n", "\n", "if", "self", ".", "hard_negative", ":", "\n", "            ", "neg_B_features", "=", "self", ".", "netG", ".", "encode", "(", "self", ".", "neg_B", ",", "self", ".", "DB", ")", "\n", "\n", "", "if", "self", ".", "use_realAB_as_negative", ":", "\n", "            ", "if", "self", ".", "hard_negative", ":", "\n", "                ", "least_index", "=", "torch", ".", "argmin", "(", "torch", ".", "Tensor", "(", "\n", "[", "self", ".", "L2loss", "(", "encoded_A", ".", "view", "(", "-", "1", ")", ",", "neg_B", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "for", "neg_B", "in", "neg_B_features", "]", ")", ")", ".", "item", "(", ")", "\n", "dnA", "=", "self", ".", "L2loss", "(", "encoded_A", ".", "view", "(", "-", "1", ")", ",", "neg_B_features", "[", "least_index", "]", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "dnA", "=", "self", ".", "L2loss", "(", "encoded_A", ".", "view", "(", "-", "1", ")", ",", "encoded_B", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "hard_negative", ":", "\n", "                ", "least_index", "=", "torch", ".", "argmin", "(", "torch", ".", "Tensor", "(", "\n", "[", "self", ".", "L2loss", "(", "rec_encoded_A", ".", "view", "(", "-", "1", ")", ",", "neg_B", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "for", "neg_B", "in", "neg_B_features", "]", ")", ")", ".", "item", "(", ")", "\n", "dnA", "=", "self", ".", "L2loss", "(", "rec_encoded_A", ".", "view", "(", "-", "1", ")", ",", "neg_B_features", "[", "least_index", "]", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "dnA", "=", "self", ".", "L2loss", "(", "rec_encoded_A", ".", "view", "(", "-", "1", ")", ",", "encoded_B", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "", "", "dpA", "=", "self", ".", "L2loss", "(", "rec_encoded_A", ".", "view", "(", "-", "1", ")", ",", "encoded_A", ".", "view", "(", "\n", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "\n", "if", "self", ".", "opt", ".", "mean_cos", ":", "\n", "            ", "cospA", "=", "1", "-", "self", ".", "mean_cos", "(", "rec_encoded_A", ".", "view", "(", "256", ",", "-", "1", ")", ",", "encoded_A", ".", "view", "(", "256", ",", "-", "1", ")", ")", ".", "mean", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "cospA", "=", "1", "-", "self", ".", "cos", "(", "rec_encoded_A", ".", "view", "(", "-", "1", ")", ",", "encoded_A", ".", "view", "(", "-", "1", ")", ")", "\n", "", "if", "self", ".", "lambda_triplet", ">", "0", ":", "\n", "\n", "            ", "self", ".", "loss_triplet", "[", "self", ".", "DA", "]", "=", "torch", ".", "max", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "[", "0.0", "]", ")", ",", "\n", "1", "-", "dnA", "/", "\n", "(", "\n", "self", ".", "margin", "*", "torch", ".", "exp", "(", "\n", "self", ".", "adapt", "*", "(", "-", "dpA", ")", ")", "# dnA/dpA#s#self.margin", "\n", "+", "dpA", ")", ")", "\n", "if", "self", ".", "hard_negative", ":", "\n", "                ", "self", ".", "loss_triplet", "[", "self", ".", "DA", "]", "=", "2", "*", "self", ".", "loss_triplet", "[", "self", ".", "DA", "]", "\n", "\n", "", "", "self", ".", "feature_distance", "[", "self", ".", "DA", "]", "=", "dpA", "\n", "self", ".", "feature_cos", "[", "self", ".", "DA", "]", "=", "cospA", "\n", "\n", "if", "not", "self", ".", "hard_negative", ":", "\n", "            ", "if", "self", ".", "use_realAB_as_negative", ":", "\n", "                ", "dnB", "=", "self", ".", "L2loss", "(", "encoded_B", ".", "view", "(", "-", "1", ")", ",", "encoded_A", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "dnB", "=", "self", ".", "L2loss", "(", "rec_encoded_B", ".", "view", "(", "-", "1", ")", ",", "encoded_A", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "", "", "dpB", "=", "self", ".", "L2loss", "(", "rec_encoded_B", ".", "view", "(", "-", "1", ")", ",", "encoded_B", ".", "view", "(", "\n", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "if", "self", ".", "opt", ".", "mean_cos", ":", "\n", "            ", "cospB", "=", "1", "-", "self", ".", "mean_cos", "(", "rec_encoded_B", ".", "view", "(", "256", ",", "-", "1", ")", ",", "encoded_B", ".", "view", "(", "256", ",", "-", "1", ")", ")", ".", "mean", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "cospB", "=", "1", "-", "self", ".", "cos", "(", "rec_encoded_B", ".", "view", "(", "-", "1", ")", ",", "encoded_B", ".", "view", "(", "-", "1", ")", ")", "\n", "", "if", "self", ".", "lambda_triplet", ">", "0", "and", "not", "self", ".", "hard_negative", ":", "\n", "            ", "self", ".", "loss_triplet", "[", "self", ".", "DB", "]", "=", "torch", ".", "max", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "[", "0.0", "]", ")", ",", "\n", "1", "-", "dnB", "/", "(", "self", ".", "margin", "*", "torch", ".", "exp", "(", "self", ".", "adapt", "*", "(", "-", "dpB", ")", ")", "+", "dpB", ")", ")", "\n", "", "if", "self", ".", "hard_negative", ":", "\n", "            ", "self", ".", "loss_triplet", "[", "self", ".", "DB", "]", "=", "0", "\n", "\n", "", "self", ".", "feature_distance", "[", "self", ".", "DB", "]", "=", "dpB", "\n", "self", ".", "feature_cos", "[", "self", ".", "DB", "]", "=", "cospB", "\n", "if", "self", ".", "lambda_latent", ">", "0", ":", "\n", "            ", "if", "self", ".", "train_using_cos", ":", "\n", "                ", "loss_latent_A", "=", "cospA", "\n", "loss_latent_B", "=", "cospB", "\n", "if", "self", ".", "use_cos_latent_with_L2", ":", "\n", "                    ", "loss_latent_A", "+=", "dpA", "\n", "loss_latent_B", "+=", "dpB", "\n", "", "", "else", ":", "\n", "                ", "loss_latent_A", "=", "dpA", "\n", "loss_latent_B", "=", "dpB", "\n", "", "", "else", ":", "\n", "            ", "loss_latent_A", ",", "loss_latent_B", "=", "0", ",", "0", "\n", "\n", "", "if", "self", ".", "lambda_sam", ">", "0", ":", "\n", "            ", "self", ".", "loss_sam", "[", "self", ".", "DA", "]", "=", "self", ".", "L2loss", "(", "F", ".", "relu", "(", "torch", ".", "mul", "(", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "rec_encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "F", ".", "relu", "(", "torch", ".", "mul", "(", "rec_encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "rec_encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "self", ".", "loss_sam", "[", "self", ".", "DB", "]", "=", "self", ".", "L2loss", "(", "F", ".", "relu", "(", "torch", ".", "mul", "(", "encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "rec_encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "F", ".", "relu", "(", "torch", ".", "mul", "(", "rec_encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "rec_encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "\n", "if", "self", ".", "lambda_sam_triplet", ">", "0", ":", "\n", "                ", "dp_samA", "=", "self", ".", "loss_sam", "[", "self", ".", "DA", "]", ".", "cuda", "(", ")", "\n", "dp_samB", "=", "self", ".", "loss_sam", "[", "self", ".", "DB", "]", ".", "cuda", "(", ")", "\n", "if", "self", ".", "use_realAB_as_negative", ":", "\n", "                    ", "if", "not", "self", ".", "hard_negative", ":", "\n", "                        ", "dn_samA", "=", "self", ".", "L2loss", "(", "F", ".", "relu", "(", "torch", ".", "mul", "(", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "\n", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ",", "F", ".", "relu", "(", "torch", ".", "mul", "(", "encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "\n", "encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "", "if", "self", ".", "hard_negative", ":", "\n", "                        ", "least_index", "=", "torch", ".", "argmin", "(", "torch", ".", "Tensor", "(", "\n", "[", "self", ".", "L2loss", "(", "F", ".", "relu", "(", "torch", ".", "mul", "(", "neg_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "neg_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "F", ".", "relu", "(", "torch", ".", "mul", "(", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "\n", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "neg_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "for", "neg_B", "in", "neg_B_features", "]", ")", ")", ".", "item", "(", ")", "\n", "dn_samB", "=", "self", ".", "L2loss", "(", "F", ".", "relu", "(", "torch", ".", "mul", "(", "neg_B_features", "[", "least_index", "]", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "\n", "neg_B_features", "[", "least_index", "]", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "F", ".", "relu", "(", "torch", ".", "mul", "(", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "\n", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "neg_B_features", "[", "least_index", "]", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "dn_samB", "=", "self", ".", "L2loss", "(", "F", ".", "relu", "(", "torch", ".", "mul", "(", "encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "F", ".", "relu", "(", "torch", ".", "mul", "(", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "\n", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "not", "self", ".", "hard_negative", ":", "\n", "                        ", "dn_samA", "=", "self", ".", "L2loss", "(", "F", ".", "relu", "(", "torch", ".", "mul", "(", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "rec_encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "\n", "F", ".", "relu", "(", "torch", ".", "mul", "(", "rec_encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "\n", "rec_encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "", "if", "self", ".", "hard_negative", ":", "\n", "                        ", "least_index", "=", "torch", ".", "argmin", "(", "torch", ".", "Tensor", "(", "\n", "[", "self", ".", "L2loss", "(", "F", ".", "relu", "(", "torch", ".", "mul", "(", "neg_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "neg_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "rec_encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "F", ".", "relu", "(", "torch", ".", "mul", "(", "rec_encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "\n", "rec_encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "neg_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "for", "neg_B", "in", "neg_B_features", "]", ")", ")", ".", "item", "(", ")", "\n", "dn_samB", "=", "self", ".", "L2loss", "(", "F", ".", "relu", "(", "torch", ".", "mul", "(", "neg_B_features", "[", "least_index", "]", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "\n", "neg_B_features", "[", "least_index", "]", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "rec_encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "F", ".", "relu", "(", "torch", ".", "mul", "(", "rec_encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "\n", "rec_encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "neg_B_features", "[", "least_index", "]", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "dn_samB", "=", "self", ".", "L2loss", "(", "F", ".", "relu", "(", "torch", ".", "mul", "(", "encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "rec_encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "F", ".", "relu", "(", "torch", ".", "mul", "(", "rec_encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "self", ".", "find_sam_weight", "(", "\n", "rec_encoded_A", ".", "view", "(", "256", ",", "64", ",", "64", ")", ",", "\n", "encoded_B", ".", "view", "(", "256", ",", "64", ",", "64", ")", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", ")", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", ")", "\n", "", "", "if", "not", "self", ".", "hard_negative", ":", "\n", "                    ", "dn_samA", "=", "dn_samA", ".", "cuda", "(", ")", "\n", "self", ".", "loss_sam_triplet", "[", "self", ".", "DA", "]", "=", "torch", ".", "max", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "[", "0.0", "]", ")", ",", "\n", "1", "-", "dn_samA", "/", "\n", "(", "self", ".", "margin_sam_triplet", "*", "torch", ".", "exp", "(", "self", ".", "adapt_sam_triplet", "*", "(", "-", "dp_samA", ")", ")", "\n", "+", "dp_samA", ")", ")", "\n", "", "dn_samB", "=", "dn_samB", ".", "cuda", "(", ")", "\n", "self", ".", "loss_sam_triplet", "[", "self", ".", "DB", "]", "=", "torch", ".", "max", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "[", "0.0", "]", ")", ",", "\n", "1", "-", "dn_samB", "/", "\n", "(", "self", ".", "margin_sam_triplet", "*", "torch", ".", "exp", "(", "self", ".", "adapt_sam_triplet", "*", "(", "-", "dp_samB", ")", ")", "+", "dp_samB", ")", ")", "\n", "if", "self", ".", "hard_negative", ":", "\n", "                    ", "self", ".", "loss_sam_triplet", "[", "self", ".", "DA", "]", "=", "0", "\n", "self", ".", "loss_sam_triplet", "[", "self", ".", "DB", "]", "=", "2", "*", "self", ".", "loss_sam_triplet", "[", "self", ".", "DB", "]", "\n", "\n", "# combined loss", "\n", "\n", "", "", "", "loss_G", "=", "self", ".", "loss_G", "[", "self", ".", "DA", "]", "+", "self", ".", "loss_G", "[", "self", ".", "DB", "]", "+", "(", "self", ".", "loss_cycle", "[", "self", ".", "DA", "]", "+", "self", ".", "loss_cycle", "[", "self", ".", "DB", "]", ")", "*", "self", ".", "lambda_cyc", "+", "(", "self", ".", "loss_triplet", "[", "self", ".", "DA", "]", "+", "self", ".", "loss_triplet", "[", "self", ".", "DB", "]", ")", "*", "self", ".", "lambda_triplet", "+", "(", "self", ".", "loss_sam", "[", "self", ".", "DA", "]", "+", "self", ".", "loss_sam", "[", "self", ".", "DB", "]", ")", "*", "self", ".", "lambda_sam", "+", "(", "self", ".", "loss_sam_triplet", "[", "self", ".", "DA", "]", "+", "self", ".", "loss_sam_triplet", "[", "self", ".", "DB", "]", ")", "*", "self", ".", "lambda_sam_triplet", "+", "(", "loss_latent_A", "+", "loss_latent_B", ")", "*", "self", ".", "lambda_latent", "\n", "loss_G", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.optimize_parameters": [[725, 734], ["disam_model.DISAM_Model.netG.zero_grads", "disam_model.DISAM_Model.backward_G", "disam_model.DISAM_Model.netG.step_grads", "disam_model.DISAM_Model.netD.zero_grads", "disam_model.DISAM_Model.backward_D", "disam_model.DISAM_Model.netD.step_grads"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.zero_grads", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.backward_G", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.step_grads", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.zero_grads", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.backward_D", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.G_Plexer.step_grads"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "# G_A and G_B", "\n", "        ", "self", ".", "netG", ".", "zero_grads", "(", "self", ".", "DA", ",", "self", ".", "DB", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "netG", ".", "step_grads", "(", "self", ".", "DA", ",", "self", ".", "DB", ")", "\n", "# D_A and D_B", "\n", "self", ".", "netD", ".", "zero_grads", "(", "self", ".", "DA", ",", "self", ".", "DB", ")", "\n", "self", ".", "backward_D", "(", ")", "\n", "self", ".", "netD", ".", "step_grads", "(", "self", ".", "DA", ",", "self", ".", "DB", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.get_current_errors": [[735, 745], ["collections.OrderedDict", "extract", "extract", "extract", "extract", "extract", "extract", "extract", "extract", "i.item", "list", "map", "type", "type"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "extract", "=", "lambda", "l", ":", "[", "(", "i", "if", "type", "(", "i", ")", "is", "int", "or", "type", "(", "i", ")", "is", "float", "else", "i", ".", "item", "(", ")", ")", "for", "i", "in", "l", "]", "\n", "D_losses", ",", "G_losses", ",", "cyc_losses", ",", "feat_losses", ",", "feat_dist", ",", "cos_dist", ",", "sam_losses", ",", "loss_sam_triplet", "=", "extract", "(", "self", ".", "loss_D", ")", ",", "extract", "(", "self", ".", "loss_G", ")", ",", "extract", "(", "self", ".", "loss_cycle", ")", ",", "extract", "(", "self", ".", "loss_triplet", ")", ",", "extract", "(", "self", ".", "feature_distance", ")", ",", "extract", "(", "self", ".", "feature_cos", ")", ",", "extract", "(", "self", ".", "loss_sam", ")", ",", "extract", "(", "self", ".", "loss_sam_triplet", ")", "\n", "\n", "return", "OrderedDict", "(", "\n", "[", "(", "'D'", ",", "D_losses", ")", ",", "(", "'G'", ",", "G_losses", ")", ",", "(", "'Cyc'", ",", "cyc_losses", ")", ",", "(", "'Feat'", ",", "feat_losses", ")", ",", "(", "'Feat_dist'", ",", "feat_dist", ")", ",", "\n", "(", "'Cosine_dist'", ",", "cos_dist", ")", ",", "(", "'SAM'", ",", "list", "(", "map", "(", "lambda", "x", ":", "x", "*", "100000000", ",", "sam_losses", ")", ")", ")", ",", "\n", "(", "'SAM_triplet_feat'", ",", "loss_sam_triplet", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.get_current_visuals": [[746, 752], ["collections.OrderedDict", "util.util.util.util.util().tensor2im", "zip", "util.util.util.util.util"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.util.util.util.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ",", "testing", "=", "False", ")", ":", "\n", "        ", "if", "not", "testing", ":", "\n", "            ", "self", ".", "visuals", "=", "[", "self", ".", "real_A", ",", "self", ".", "fake_B", ",", "self", ".", "rec_A", ",", "self", ".", "real_B", ",", "self", ".", "fake_A", ",", "self", ".", "rec_B", "]", "\n", "self", ".", "labels", "=", "[", "'real_A'", ",", "'fake_B'", ",", "'rec_A'", ",", "'real_B'", ",", "'fake_A'", ",", "'rec_B'", "]", "\n", "", "images", "=", "[", "util", "(", ")", ".", "tensor2im", "(", "v", ".", "data", ")", "for", "v", "in", "self", ".", "visuals", "]", "\n", "return", "OrderedDict", "(", "zip", "(", "self", ".", "labels", ",", "images", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.save": [[753, 756], ["disam_model.DISAM_Model.save_network", "disam_model.DISAM_Model.save_network"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.save_network"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.get_domain": [[757, 759], ["None"], "methods", ["None"], ["", "def", "get_domain", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "DA", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.DISAM_Model.update_hyperparams": [[760, 782], ["disam_model.DISAM_Model.netG.update_lr", "disam_model.DISAM_Model.netD.update_lr", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.update_lr", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.update_lr"], ["", "def", "update_hyperparams", "(", "self", ",", "curr_iter", ")", ":", "\n", "        ", "if", "curr_iter", ">", "self", ".", "opt", ".", "niter", ":", "\n", "            ", "decay_frac", "=", "(", "curr_iter", "-", "self", ".", "opt", ".", "niter", ")", "/", "self", ".", "opt", ".", "niter_decay", "\n", "new_lr", "=", "self", ".", "opt", ".", "lr", "*", "(", "1", "-", "decay_frac", ")", "\n", "self", ".", "netG", ".", "update_lr", "(", "new_lr", ")", "\n", "self", ".", "netD", ".", "update_lr", "(", "new_lr", ")", "\n", "print", "(", "'updated learning rate: %f'", "%", "new_lr", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "lambda_latent", ">", "0", ":", "\n", "            ", "decay_frac", "=", "curr_iter", "/", "(", "self", ".", "opt", ".", "niter", "+", "self", ".", "opt", ".", "niter_decay", ")", "\n", "self", ".", "lambda_latent", "=", "self", ".", "opt", ".", "lambda_latent", "*", "decay_frac", "\n", "print", "(", "\"latent: \"", ",", "self", ".", "lambda_latent", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "lambda_triplet", ">", "0", ":", "\n", "            ", "decay_frac", "=", "curr_iter", "/", "(", "self", ".", "opt", ".", "niter", "+", "self", ".", "opt", ".", "niter_decay", ")", "\n", "self", ".", "lambda_triplet", "=", "self", ".", "opt", ".", "lambda_triplet", "*", "decay_frac", "\n", "print", "(", "\"triplet_feature: \"", ",", "self", ".", "lambda_triplet", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "lambda_sam", ">", "0", ":", "\n", "            ", "decay_frac", "=", "curr_iter", "/", "(", "self", ".", "opt", ".", "niter", "+", "self", ".", "opt", ".", "niter_decay", ")", "\n", "self", ".", "lambda_sam", "=", "self", ".", "opt", ".", "lambda_sam", "*", "decay_frac", "\n", "print", "(", "\"SAM: \"", ",", "self", ".", "lambda_sam", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.disam_model.norm_image": [[15, 25], ["image.copy.copy", "numpy.max", "numpy.max", "numpy.uint8", "numpy.min"], "function", ["None"], ["def", "norm_image", "(", "image", ")", ":", "\n", "    ", "\"\"\"\n    :param image: image with [H,W,C]\n    :return: image in np uint8\n    \"\"\"", "\n", "image", "=", "image", ".", "copy", "(", ")", "\n", "image", "-=", "np", ".", "max", "(", "np", ".", "min", "(", "image", ")", ",", "0", ")", "\n", "image", "/=", "np", ".", "max", "(", "image", ")", "\n", "image", "*=", "255.", "\n", "return", "np", ".", "uint8", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.name": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.__init__": [[9, 16], ["os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "gpu_ids", "else", "torch", ".", "Tensor", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "if", "not", "self", ".", "isTrain", ":", "self", ".", "save_dir_finer", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name_finer", ")", "\n", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.set_input": [[16, 18], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.forward": [[19, 21], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.test": [[23, 25], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.get_image_paths": [[26, 28], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.optimize_parameters": [[29, 31], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.get_current_visuals": [[32, 34], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.get_current_errors": [[35, 37], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.save": [[38, 40], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.save_network": [[42, 48], ["os.path.join", "network.save", "torch.cuda.is_available", "network.cuda"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda"], ["", "def", "save_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch", ",", "gpu_ids", ")", ":", "\n", "        ", "save_filename", "=", "'%d_net_%s'", "%", "(", "epoch", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "network", ".", "save", "(", "save_path", ")", "\n", "if", "gpu_ids", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "network", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.load_network": [[50, 59], ["network.load", "os.path.join", "print", "os.path.join", "print"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.load"], ["", "", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch", ",", "use_two_stage", "=", "False", ")", ":", "\n", "        ", "save_filename", "=", "'%d_net_%s'", "%", "(", "epoch", ",", "network_label", ")", "\n", "if", "use_two_stage", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir_finer", ",", "save_filename", ")", "\n", "print", "(", "'two stage'", ",", "save_path", ")", "\n", "", "else", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "print", "(", "'no two stage'", ",", "save_path", ")", "\n", "", "network", ".", "load", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.save_att_network": [[60, 66], ["os.path.join", "network.save", "torch.cuda.is_available", "network.cuda"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.save", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.cuda"], ["", "def", "save_att_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch", ",", "gpu_ids", ")", ":", "\n", "        ", "save_filename", "=", "'%d_att_net_%s'", "%", "(", "epoch", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "network", ".", "save", "(", "save_path", ")", "\n", "if", "gpu_ids", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "network", ".", "cuda", "(", "gpu_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.load_att_network": [[67, 71], ["os.path.join", "network.load"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.networks.Plexer.load"], ["", "", "def", "load_att_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch", ")", ":", "\n", "        ", "save_filename", "=", "'%d_att_net_%s'", "%", "(", "epoch", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "network", ".", "load", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.models.base_model.BaseModel.update_learning_rate": [[72, 74], ["None"], "methods", ["None"], ["", "def", "update_learning_rate", "(", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.data_loader.DataLoader.name": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'DataLoader'", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.data_loader.DataLoader.__init__": [[9, 16], ["data.unaligned_dataset.UnalignedDataset", "torch.utils.data.DataLoader", "int"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "dataset", "=", "UnalignedDataset", "(", "opt", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "dataset", ",", "\n", "batch_size", "=", "opt", ".", "batchSize", ",", "\n", "num_workers", "=", "int", "(", "opt", ".", "nThreads", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.data_loader.DataLoader.__len__": [[17, 19], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.data_loader.DataLoader.__iter__": [[20, 23], ["enumerate"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "dataloader", ")", ":", "\n", "            ", "yield", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.base_dataset.BaseDataset.__init__": [[7, 9], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.base_dataset.BaseDataset.name": [[10, 12], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseDataset'", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.base_dataset.BaseDataset.initialize": [[13, 15], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.base_dataset.get_transform": [[17, 36], ["torchvision.Compose", "transform_list.append", "torchvision.ToTensor", "torchvision.Normalize", "transform_list.append", "transform_list.append", "torchvision.RandomHorizontalFlip", "transform_list.append", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.Resize"], "function", ["None"], ["", "", "def", "get_transform", "(", "opt", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "\n", "if", "opt", ".", "isTrain", ":", "\n", "        ", "if", "'resize'", "in", "opt", ".", "resize_or_crop", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "opt", ".", "loadSize", ",", "Image", ".", "BICUBIC", ")", ")", "\n", "", "if", "'crop'", "in", "opt", ".", "resize_or_crop", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "if", "'resize'", "in", "opt", ".", "resize_or_crop", ":", "\n", "            ", "osize", "=", "[", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "Image", ".", "BICUBIC", ")", ")", "\n", "\n", "\n", "", "", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.base_dataset.get_transform_flip": [[38, 52], ["torchvision.Compose", "transform_list.append", "transform_list.append", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "transform_list.append", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop"], "function", ["None"], ["", "def", "get_transform_flip", "(", "opt", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "'resize'", "in", "opt", ".", "resize_or_crop", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "opt", ".", "loadSize", ",", "Image", ".", "BICUBIC", ")", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", ":", "\n", "        ", "if", "'crop'", "in", "opt", ".", "resize_or_crop", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "1.0", ")", ")", "\n", "\n", "", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.unaligned_dataset.UnalignedDataset.__init__": [[30, 46], ["data.base_dataset.BaseDataset.__init__", "data.base_dataset.get_transform", "data.base_dataset.get_transform_flip", "sorted", "os.path.join", "glob.glob", "sorted", "len", "os.path.join", "os.path.join", "unaligned_dataset.make_dataset", "str"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.base_dataset.get_transform_flip", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.unaligned_dataset.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "UnalignedDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "transform", "=", "get_transform", "(", "opt", ")", "\n", "self", ".", "transform_flip", "=", "get_transform_flip", "(", "opt", ")", "\n", "if", "opt", ".", "phase", "==", "'train'", ":", "\n", "            ", "datapath", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'*'", ")", "\n", "", "elif", "opt", ".", "name", "[", ":", "8", "]", "==", "'robotcar'", ":", "\n", "            ", "datapath", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'*'", ")", "\n", "", "else", ":", "\n", "            ", "datapath", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'s'", "+", "str", "(", "opt", ".", "which_slice", ")", ",", "opt", ".", "phase", "+", "'*'", ")", "\n", "\n", "", "self", ".", "dirs", "=", "sorted", "(", "glob", ".", "glob", "(", "datapath", ")", ")", "\n", "\n", "self", ".", "paths", "=", "[", "sorted", "(", "make_dataset", "(", "d", ")", ")", "for", "d", "in", "self", ".", "dirs", "]", "\n", "self", ".", "sizes", "=", "[", "len", "(", "p", ")", "for", "p", "in", "self", ".", "paths", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.unaligned_dataset.UnalignedDataset.load_image": [[47, 52], ["PIL.Image.open().convert", "unaligned_dataset.UnalignedDataset.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "dom", ",", "idx", ")", ":", "\n", "        ", "path", "=", "self", ".", "paths", "[", "dom", "]", "[", "idx", "]", "\n", "old_img", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "old_img", ")", "\n", "return", "img", ",", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.unaligned_dataset.UnalignedDataset.load_image_flip": [[53, 58], ["PIL.Image.open().convert", "unaligned_dataset.UnalignedDataset.transform_flip", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_image_flip", "(", "self", ",", "dom", ",", "idx", ")", ":", "\n", "        ", "path", "=", "self", ".", "paths", "[", "dom", "]", "[", "idx", "]", "\n", "old_img", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform_flip", "(", "old_img", ")", "\n", "return", "img", ",", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.unaligned_dataset.UnalignedDataset.__getitem__": [[59, 106], ["random.random", "random.sample", "random.randint", "unaligned_dataset.UnalignedDataset.load_image", "unaligned_dataset.UnalignedDataset.load_image_flip", "random.randint", "bundle.update", "B_img.unsqueeze", "bundle.update", "enumerate", "random.randint", "range", "unaligned_dataset.UnalignedDataset.load_image_flip", "unaligned_dataset.UnalignedDataset.load_image", "list", "len", "len", "range", "random.randint", "unaligned_dataset.UnalignedDataset.load_image_flip", "torch.cat", "neg_DB_list.append", "B_img_hard.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.unaligned_dataset.UnalignedDataset.load_image", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.unaligned_dataset.UnalignedDataset.load_image_flip", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.unaligned_dataset.UnalignedDataset.load_image_flip", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.unaligned_dataset.UnalignedDataset.load_image", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.unaligned_dataset.UnalignedDataset.load_image_flip"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "not", "self", ".", "opt", ".", "isTrain", ":", "\n", "            ", "if", "self", ".", "opt", ".", "serial_test", ":", "\n", "                ", "for", "d", ",", "s", "in", "enumerate", "(", "self", ".", "sizes", ")", ":", "\n", "                    ", "if", "index", "<", "s", ":", "\n", "                        ", "DA", "=", "d", ";", "\n", "break", "\n", "", "index", "-=", "s", "\n", "", "index_A", "=", "index", "\n", "", "else", ":", "\n", "                ", "DA", "=", "index", "%", "len", "(", "self", ".", "dirs", ")", "\n", "index_A", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "sizes", "[", "DA", "]", "-", "1", ")", "\n", "", "", "else", ":", "\n", "# DA is not equal to DB", "\n", "# DA = random.randint(0, len(self.dirs) - 1)", "\n", "# DB = random.randint(0, len(self.dirs) - 1)", "\n", "            ", "DA", ",", "DB", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "self", ".", "dirs", ")", ")", ",", "2", ")", "\n", "index_A", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "sizes", "[", "DA", "]", "-", "1", ")", "\n", "\n", "", "flip_prob_A", "=", "random", ".", "random", "(", ")", "\n", "if", "not", "self", ".", "opt", ".", "random_flip", ":", "flip_prob_A", "=", "0", "\n", "if", "flip_prob_A", "<", "0.5", ":", "\n", "            ", "A_img", ",", "A_path", "=", "self", ".", "load_image", "(", "DA", ",", "index_A", ")", "\n", "", "else", ":", "\n", "            ", "A_img", ",", "A_path", "=", "self", ".", "load_image_flip", "(", "DA", ",", "index_A", ")", "\n", "\n", "", "bundle", "=", "{", "'A'", ":", "A_img", ",", "'DA'", ":", "DA", ",", "'path'", ":", "A_path", "}", "\n", "\n", "if", "self", ".", "opt", ".", "isTrain", ":", "\n", "            ", "index_B", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "sizes", "[", "DB", "]", "-", "1", ")", "\n", "if", "flip_prob_A", "<", "0.5", ":", "\n", "                ", "B_img", ",", "_", "=", "self", ".", "load_image_flip", "(", "DB", ",", "index_B", ")", "\n", "", "else", ":", "\n", "                ", "B_img", ",", "_", "=", "self", ".", "load_image", "(", "DB", ",", "index_B", ")", "\n", "", "bundle", ".", "update", "(", "{", "'B'", ":", "B_img", ",", "'DB'", ":", "DB", "}", ")", "\n", "neg_B_tensor", "=", "B_img", ".", "unsqueeze", "(", "0", ")", "\n", "neg_DB_list", "=", "[", "]", "\n", "if", "self", ".", "opt", ".", "hard_negative", ":", "\n", "                ", "for", "i", "in", "list", "(", "range", "(", "self", ".", "opt", ".", "num_hard_neg", "-", "1", ")", ")", ":", "\n", "# DB = random.randint(0, 11) # whether to choose B from all the domains for hard negative samples", "\n", "                    ", "index_B_hard", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "sizes", "[", "DB", "]", "-", "1", ")", "\n", "B_img_hard", ",", "_", "=", "self", ".", "load_image_flip", "(", "DB", ",", "index_B_hard", ")", "\n", "neg_B_tensor", "=", "torch", ".", "cat", "(", "(", "neg_B_tensor", ",", "B_img_hard", ".", "unsqueeze", "(", "0", ")", ")", ",", "0", ")", "\n", "neg_DB_list", ".", "append", "(", "DB", ")", "\n", "", "", "bundle", ".", "update", "(", "{", "'neg_B_tensor'", ":", "neg_B_tensor", ",", "'neg_DB_list'", ":", "neg_DB_list", "}", ")", "\n", "\n", "", "return", "bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.unaligned_dataset.UnalignedDataset.__len__": [[107, 111], ["sum", "max"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "isTrain", ":", "\n", "            ", "return", "max", "(", "self", ".", "sizes", ")", "\n", "", "return", "sum", "(", "self", ".", "sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.unaligned_dataset.UnalignedDataset.name": [[112, 114], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'UnalignedDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.unaligned_dataset.is_image_file": [[12, 14], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.unaligned_dataset.make_dataset": [[16, 27], ["os.path.isdir", "sorted", "os.walk", "unaligned_dataset.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.data.unaligned_dataset.is_image_file"], ["", "def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.RobotcarTestOptions.RobotcarTestOptions.initialize": [[5, 57], ["base_options.BaseOptions.initialize", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument", "RobotcarTestOptions.RobotcarTestOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "required", "=", "True", ",", "type", "=", "int", ",", "help", "=", "'which epoch to load for inference?'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test, etc (determines name of folder to load from)'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'how many test images to run (if serial_test not enabled)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--serial_test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'read each image once from folders in sequential order'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--autoencode'", ",", "action", "=", "'store_true'", ",", "help", "=", "'translate images back into its own domain'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--reconstruct'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do reconstructions of images during testing'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--show_matrix'", ",", "action", "=", "'store_true'", ",", "help", "=", "'visualize images in a matrix format as well'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_slice'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'which slice of images to be test'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_using_cos'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'which slice of images to be test'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_after_pca'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'which slice of images to be test'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resize64'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'64*64 feature map'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_condition'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'condition to be test, 1~9'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_with_sequence'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'test_with_sequence'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--sequence_interval'", ",", "type", "=", "int", ",", "default", "=", "11", ",", "\n", "help", "=", "'sequence_interval total'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--load_dist_mat'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'which slice of images to be test'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_two_stage'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use two-stage strategy'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--top_n'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'top n candidates for the finer retrieval'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch_finer'", ",", "type", "=", "int", ",", "default", "=", "1200", ",", "\n", "help", "=", "'for the finer generator'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--name_finer'", ",", "type", "=", "str", ",", "default", "=", "'noFiner'", ",", "\n", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--meancos_finer'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "' mean cos only for siam related'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--only_for_finer'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "' mean cos only for siam related'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_sam_visualization'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Whether to save the visualization of SAM of CMU images or not, only effective '", "\n", "'when --use_two_stage is NOT specified'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--sam_matched_dir'", ",", "type", "=", "str", ",", "default", "=", "'./sam_matched_RobotCar/'", ",", "\n", "help", "=", "'Saves the matched SAM visualization here'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--sam_mismatched_dir'", ",", "type", "=", "str", ",", "default", "=", "'./sam_mismatched_RobotCar/'", ",", "\n", "help", "=", "'Saves the mismatched SAM here'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.test_options.TestOptions.initialize": [[5, 44], ["base_options.BaseOptions.initialize", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'Saves results here.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'Aspect ratio of result images'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "required", "=", "True", ",", "type", "=", "int", ",", "help", "=", "'Which epoch to load for inference'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test, etc '", "\n", "'(determines name of folder to load from)'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'How many test images to run '", "\n", "'(if serial_test not enabled)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--serial_test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Read each image once from folders '", "\n", "'in sequential order'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_slice'", ",", "type", "=", "int", ",", "default", "=", "999", ",", "\n", "help", "=", "'Which slice of images to be test, not specified if testing on RobotCar dataset'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_using_cos'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Test the model with cosine or mean cosine metric, use L2 otherwise'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_two_stage'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use the from coarse to fine two-stage strategy'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--top_n'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Top n candidates for the finer retrieval in the two-stage strategy'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch_finer'", ",", "type", "=", "int", ",", "default", "=", "1200", ",", "\n", "help", "=", "'Test the for the finer generator from which epoch'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--name_finer'", ",", "type", "=", "str", ",", "default", "=", "'noFiner'", ",", "\n", "help", "=", "'Name of the finer model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--meancos_finer'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Using mean cosine for retrieval metric instead of original cosine'", "\n", "'effective only if --test_using_cos is specified'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_sam_visualization'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Whether to save the visualization of SAM of CMU images or not, only effective '", "\n", "'when --use_two_stage specified'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--sam_matched_dir'", ",", "type", "=", "str", ",", "default", "=", "'./sam_matched_CMU/'", ",", "\n", "help", "=", "'Saves the matched SAM visualization here'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--sam_mismatched_dir'", ",", "type", "=", "str", ",", "default", "=", "'./sam_mismatched_CMU/'", ",", "\n", "help", "=", "'Saves the mismatched SAM here'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.train_options.TrainOptions.initialize": [[5, 54], ["base_options.BaseOptions.initialize", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "isTrain", "=", "True", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Continue training'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Which epoch to load if continuing training'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc '", "\n", "'(determines name of folder to load from)'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter'", ",", "required", "=", "True", ",", "type", "=", "int", ",", "help", "=", "'# of epochs at starting learning rate, '", "\n", "'using 300 if fine-tune '", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "required", "=", "True", ",", "type", "=", "int", ",", "help", "=", "'# of epochs to linearly decay learning'", "\n", "'rate to zero, try 300 * n epochs'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'Initial learning rate for ADAM'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'Momentum term of ADAM'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_cycle'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'Weight for cycle loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_triplet'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'Weight for triplet loss, try 1.0'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_latent'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'Weight for latent DIF loss, try 0.1'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_sam'", ",", "type", "=", "float", ",", "default", "=", "1000.0", ",", "\n", "help", "=", "'Weight for SAM loss, try 1000.0'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_sam_triplet'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'Weight for SAM triplet loss, try 1.0'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'Frequency of saving checkpoints'", "\n", "' at the end of epochs'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'Frequency of showing training results '", "\n", "'on screen'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'Frequency of showing training results '", "\n", "'on console'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_lsgan'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use vanilla discriminator in place of '", "\n", "'least-squares one'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'The size of image buffer that stores'", "\n", "'previously generated images'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--train_using_cos'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use cosine or mean cosine for latent loss while training'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_hard_neg'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'How many negative samples to choose the hardest one, try 10 for 12G memory'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--hard_negative'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use the strategy of hard negative triplet loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_realAB_as_negative'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'To use the real A and B as negative pairs, use translated A and real B otherwise'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_cos_latent_with_L2'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use L2 metric along with cosine metric for latent loss, '", "\n", "'only effective if --train_using_cos specified'", ")", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.__init__": [[20, 23], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.initialize": [[24, 82], ["base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "'--name'", ",", "required", "=", "True", ",", "type", "=", "str", ",", "\n", "help", "=", "'Name of the experiment. It decides where to store models, '", "\n", "'if test on RobotCar dataset, --name must begin with robotcar'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'Models are saved here'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "required", "=", "True", ",", "type", "=", "str", ",", "\n", "help", "=", "'Path to dataset images (should have subfolders trainA, trainB, etc)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_domains'", ",", "required", "=", "True", ",", "type", "=", "int", ",", "help", "=", "'Number of domains to transfer among'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resize_or_crop'", ",", "type", "=", "str", ",", "default", "=", "'resize_and_crop'", ",", "\n", "help", "=", "'Scaling and cropping of images at load time [resize|resize_and_crop|crop]'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--loadSize'", ",", "type", "=", "int", ",", "default", "=", "286", ",", "help", "=", "'Scale images to this size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--fineSize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'Crop to this size'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Input batch size, try 1 if 12G memory'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--netG_n_blocks'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "\n", "help", "=", "'Number of residual blocks to use for netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--netG_n_shared'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Number of blocks to use for netG shared center module'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--netD_n_layers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'Number of layers to use for netD'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "\n", "help", "=", "'Instance normalization or batch normalization'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Insert dropout for the generator'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'GPU ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Window id of the web display (set >1 to use visdom)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'Visdom port of the web display'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'Display window size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--margin'", ",", "type", "=", "float", ",", "default", "=", "5", ",", "\n", "help", "=", "'Margin parameter for triplet loss'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--adapt'", ",", "type", "=", "float", ",", "default", "=", "2", ",", "\n", "help", "=", "'Adaptation parameter for adapted triplet loss, using 0 for original triplet loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--margin_sam_triplet'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'Margin parameter for SAM triplet loss'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--adapt_sam_triplet'", ",", "type", "=", "float", ",", "default", "=", "1000", ",", "\n", "help", "=", "'Adaptation parameter for SAM adapted triplet loss'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--random_flip'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If specified, flip randomly for positive and negative pairs, '", "\n", "'keeping negative opposite to positive as well'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--mean_cos'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Using mean cosine for loss metric or retrieval metric instead of original cosine'", "\n", "'effective only if --train_using_cos or --test_using_cos is specified'", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.parse": [[83, 120], ["base_options.BaseOptions.parser.parse_args", "base_options.BaseOptions.opt.gpu_ids.split", "vars", "print", "sorted", "print", "os.path.join", "base_options.mkdirs_now", "base_options.BaseOptions.initialize", "int", "len", "torch.cuda.set_device", "vars.items", "print", "os.path.join", "os.path.join", "open", "opt_file.write", "sorted", "opt_file.write", "base_options.BaseOptions.opt.gpu_ids.append", "vars.items", "opt_file.write", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.mkdirs_now", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.BaseOptions.initialize"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "str_ids", "=", "self", ".", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "self", ".", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "self", ".", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "\n", "# set gpu ids", "\n", "", "", "if", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "args", "=", "vars", "(", "self", ".", "opt", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# save to the disk", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ")", "\n", "mkdirs_now", "(", "expr_dir", ")", "\n", "if", "self", ".", "opt", ".", "phase", "==", "'train'", ":", "\n", "            ", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'train_opt.txt'", ")", "\n", "", "else", ":", "\n", "            ", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "'------------ Options -------------\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                ", "opt_file", ".", "write", "(", "'%s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "'-------------- End ----------------\\n'", ")", "\n", "", "return", "self", ".", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.mkdir": [[6, 9], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.mkdirs_now": [[11, 17], ["isinstance", "base_options.mkdir", "isinstance", "base_options.mkdir"], "function", ["home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.mkdir", "home.repos.pwc.inspect_result.HanjiangHu_DISAM.options.base_options.mkdir"], ["", "", "def", "mkdirs_now", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]]}