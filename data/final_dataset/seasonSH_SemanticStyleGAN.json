{"home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.prepare_mask_data.resize_and_convert": [[32, 40], ["torchvision.transforms.functional.resize", "torchvision.transforms.functional.center_crop", "io.BytesIO", "trans_fn.center_crop.save", "io.BytesIO.getvalue"], "function", ["None"], ["def", "resize_and_convert", "(", "img", ",", "size", ",", "format", ",", "resample", ")", ":", "\n", "    ", "img", "=", "trans_fn", ".", "resize", "(", "img", ",", "size", ",", "resample", ")", "\n", "img", "=", "trans_fn", ".", "center_crop", "(", "img", ",", "size", ")", "\n", "buffer", "=", "BytesIO", "(", ")", "\n", "img", ".", "save", "(", "buffer", ",", "format", "=", "format", ",", "quality", "=", "100", ")", "\n", "val", "=", "buffer", ".", "getvalue", "(", ")", "\n", "\n", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.prepare_mask_data.resize_worker": [[42, 49], ["PIL.Image.open", "prepare_mask_data.resize_and_convert", "img.convert.convert"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.prepare_image_data.resize_and_convert"], ["", "def", "resize_worker", "(", "img_file", ",", "size", ",", "use_rgb", ",", "format", ",", "resample", ")", ":", "\n", "    ", "i", ",", "file", "=", "img_file", "\n", "img", "=", "Image", ".", "open", "(", "file", ")", "\n", "if", "use_rgb", ":", "\n", "        ", "img", "=", "img", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "img", "=", "resize_and_convert", "(", "img", ",", "size", ",", "format", ",", "resample", ")", "\n", "return", "i", ",", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.prepare_mask_data.find_images": [[50, 62], ["os.path.isfile", "list", "IMAGE_EXTENSIONS.union.union", "sorted", "open", "glob.glob", "line.strip", "f.upper", "f.readlines"], "function", ["None"], ["", "def", "find_images", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "files", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "files", "=", "list", "(", ")", "\n", "IMAGE_EXTENSIONS", "=", "{", "'jpg'", ",", "'png'", ",", "'jpeg'", ",", "'webp'", "}", "\n", "IMAGE_EXTENSIONS", "=", "IMAGE_EXTENSIONS", ".", "union", "(", "{", "f", ".", "upper", "(", ")", "for", "f", "in", "IMAGE_EXTENSIONS", "}", ")", "\n", "for", "ext", "in", "IMAGE_EXTENSIONS", ":", "\n", "            ", "files", "+=", "glob", "(", "f'{path}/**/*.{ext}'", ",", "recursive", "=", "True", ")", "\n", "", "files", "=", "sorted", "(", "files", ")", "\n", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.prepare_mask_data.prepare": [[63, 73], ["functools.partial", "env.begin", "multiprocessing.Pool", "tqdm.tqdm", "txn.put", "pool.imap_unordered", "txn.put", "str().encode", "enumerate", "str", "str().zfill", "str"], "function", ["None"], ["", "def", "prepare", "(", "env", ",", "files", ",", "n_worker", ",", "size", ",", "prefix", ",", "use_rgb", ",", "format", ",", "resample", ")", ":", "\n", "    ", "resize_fn", "=", "partial", "(", "resize_worker", ",", "size", "=", "size", ",", "use_rgb", "=", "use_rgb", ",", "format", "=", "format", ",", "resample", "=", "resample", ")", "\n", "\n", "total", "=", "0", "\n", "with", "env", ".", "begin", "(", "write", "=", "True", ")", "as", "txn", ":", "\n", "        ", "with", "multiprocessing", ".", "Pool", "(", "n_worker", ")", "as", "pool", ":", "\n", "            ", "for", "i", ",", "img", "in", "tqdm", "(", "pool", ".", "imap_unordered", "(", "resize_fn", ",", "enumerate", "(", "files", ")", ")", ")", ":", "\n", "                ", "txn", ".", "put", "(", "f\"{prefix}-{str(i).zfill(7)}\"", ".", "encode", "(", "\"utf-8\"", ")", ",", "img", ")", "\n", "total", "+=", "1", "\n", "", "txn", ".", "put", "(", "f\"{prefix}-length\"", ".", "encode", "(", "\"utf-8\"", ")", ",", "str", "(", "total", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train_adaptation.data_sampler": [[46, 55], ["torch.utils.data.distributed.DistributedSampler", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler"], "function", ["None"], ["def", "data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "data", ".", "distributed", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "\n", "", "if", "shuffle", ":", "\n", "        ", "return", "data", ".", "RandomSampler", "(", "dataset", ")", "\n", "\n", "", "else", ":", "\n", "        ", "return", "data", ".", "SequentialSampler", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train_adaptation.requires_grad": [[57, 60], ["model.parameters"], "function", ["None"], ["", "", "def", "requires_grad", "(", "model", ",", "flag", "=", "True", ")", ":", "\n", "    ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train_adaptation.accumulate": [[62, 68], ["dict", "dict", "dict.keys", "model1.named_parameters", "model2.named_parameters", "par1[].data.mul_().add_", "par1[].data.mul_"], "function", ["None"], ["", "", "def", "accumulate", "(", "model1", ",", "model2", ",", "decay", "=", "0.999", ")", ":", "\n", "    ", "par1", "=", "dict", "(", "model1", ".", "named_parameters", "(", ")", ")", "\n", "par2", "=", "dict", "(", "model2", ".", "named_parameters", "(", ")", ")", "\n", "\n", "for", "k", "in", "par1", ".", "keys", "(", ")", ":", "\n", "        ", "par1", "[", "k", "]", ".", "data", ".", "mul_", "(", "decay", ")", ".", "add_", "(", "1", "-", "decay", ",", "par2", "[", "k", "]", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train_adaptation.sample_data": [[70, 74], ["None"], "function", ["None"], ["", "", "def", "sample_data", "(", "loader", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "batch", "in", "loader", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train_adaptation.d_logistic_loss": [[76, 81], ["torch.nn.functional.softplus", "torch.nn.functional.softplus", "F.softplus.mean", "F.softplus.mean"], "function", ["None"], ["", "", "", "def", "d_logistic_loss", "(", "real_pred", ",", "fake_pred", ")", ":", "\n", "    ", "real_loss", "=", "F", ".", "softplus", "(", "-", "real_pred", ")", "\n", "fake_loss", "=", "F", ".", "softplus", "(", "fake_pred", ")", "\n", "\n", "return", "real_loss", ".", "mean", "(", ")", "+", "fake_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train_adaptation.d_r1_loss": [[83, 90], ["torch.autograd.grad", "grad_real.pow().reshape().sum().mean", "real_pred.sum", "grad_real.pow().reshape().sum", "grad_real.pow().reshape", "grad_real.pow"], "function", ["None"], ["", "def", "d_r1_loss", "(", "real_pred", ",", "real_img", ")", ":", "\n", "    ", "grad_real", ",", "=", "autograd", ".", "grad", "(", "\n", "outputs", "=", "real_pred", ".", "sum", "(", ")", ",", "inputs", "=", "real_img", ",", "create_graph", "=", "True", "\n", ")", "\n", "grad_penalty", "=", "grad_real", ".", "pow", "(", "2", ")", ".", "reshape", "(", "grad_real", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n", "return", "grad_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train_adaptation.g_nonsaturating_loss": [[92, 96], ["torch.nn.functional.softplus().mean", "torch.nn.functional.softplus"], "function", ["None"], ["", "def", "g_nonsaturating_loss", "(", "fake_pred", ")", ":", "\n", "    ", "loss", "=", "F", ".", "softplus", "(", "-", "fake_pred", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train_adaptation.g_path_regularize": [[98, 112], ["torch.autograd.grad", "torch.sqrt", "torch.randn_like", "math.sqrt", "grad.pow().sum().mean", "path_mean.detach", "grad.pow().sum", "torch.sqrt.mean", "grad.pow"], "function", ["None"], ["", "def", "g_path_regularize", "(", "fake_img", ",", "latents", ",", "mean_path_length", ",", "decay", "=", "0.01", ")", ":", "\n", "    ", "noise", "=", "torch", ".", "randn_like", "(", "fake_img", ")", "/", "math", ".", "sqrt", "(", "\n", "fake_img", ".", "shape", "[", "2", "]", "*", "fake_img", ".", "shape", "[", "3", "]", "\n", ")", "\n", "grad", ",", "=", "autograd", ".", "grad", "(", "\n", "outputs", "=", "(", "fake_img", "*", "noise", ")", ".", "sum", "(", ")", ",", "inputs", "=", "latents", ",", "create_graph", "=", "True", "\n", ")", "\n", "path_lengths", "=", "torch", ".", "sqrt", "(", "grad", ".", "pow", "(", "2", ")", ".", "sum", "(", "2", ")", ".", "mean", "(", "1", ")", ")", "\n", "\n", "path_mean", "=", "mean_path_length", "+", "decay", "*", "(", "path_lengths", ".", "mean", "(", ")", "-", "mean_path_length", ")", "\n", "\n", "path_penalty", "=", "(", "path_lengths", "-", "path_mean", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "return", "path_penalty", ",", "path_mean", ".", "detach", "(", ")", ",", "path_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train_adaptation.make_noise": [[114, 121], ["torch.randn().unbind", "torch.randn", "torch.randn"], "function", ["None"], ["", "def", "make_noise", "(", "batch", ",", "latent_dim", ",", "n_noise", ",", "device", ")", ":", "\n", "    ", "if", "n_noise", "==", "1", ":", "\n", "        ", "return", "torch", ".", "randn", "(", "batch", ",", "latent_dim", ",", "device", "=", "device", ")", "\n", "\n", "", "noises", "=", "torch", ".", "randn", "(", "n_noise", ",", "batch", ",", "latent_dim", ",", "device", "=", "device", ")", ".", "unbind", "(", "0", ")", "\n", "\n", "return", "noises", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train_adaptation.mixing_noise": [[123, 129], ["train_adaptation.make_noise", "random.random", "random.random", "train_adaptation.make_noise"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Generator.make_noise", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Generator.make_noise"], ["", "def", "mixing_noise", "(", "batch", ",", "latent_dim", ",", "prob", ",", "device", ")", ":", "\n", "    ", "if", "prob", ">", "0", "and", "random", ".", "random", "(", ")", "<", "prob", ":", "\n", "        ", "return", "make_noise", "(", "batch", ",", "latent_dim", ",", "2", ",", "device", ")", "\n", "\n", "", "else", ":", "\n", "        ", "return", "[", "make_noise", "(", "batch", ",", "latent_dim", ",", "1", ",", "device", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train_adaptation.color_segmap": [[130, 137], ["torch.argmax", "torch.zeros", "sample_mask.permute.permute", "torch.tensor", "visualize.utils.color_map", "visualize.utils.color_map"], "function", ["None"], ["", "", "def", "color_segmap", "(", "sample_seg", ",", "color_map", ")", ":", "\n", "    ", "sample_seg", "=", "torch", ".", "argmax", "(", "sample_seg", ",", "dim", "=", "1", ")", "\n", "sample_mask", "=", "torch", ".", "zeros", "(", "(", "sample_seg", ".", "shape", "[", "0", "]", ",", "sample_seg", ".", "shape", "[", "1", "]", ",", "sample_seg", ".", "shape", "[", "2", "]", ",", "3", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "for", "key", "in", "color_map", ":", "\n", "        ", "sample_mask", "[", "sample_seg", "==", "key", "]", "=", "torch", ".", "tensor", "(", "color_map", "[", "key", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "", "sample_mask", "=", "sample_mask", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "sample_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train_adaptation.save_sample_image": [[138, 152], ["len", "torchvision.utils.save_image", "os.path.join", "writer.add_image", "int", "torchvision.utils.make_grid", "math.ceil", "str().zfill", "int", "math.ceil", "str"], "function", ["None"], ["", "def", "save_sample_image", "(", "folder", ",", "name", ",", "sample_img", ",", "global_step", ",", "writer", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "n_sample", "=", "len", "(", "sample_img", ")", "\n", "utils", ".", "save_image", "(", "\n", "sample_img", ",", "\n", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "f'{folder}/{name}_{str(global_step).zfill(6)}.jpeg'", ")", ",", "\n", "nrow", "=", "int", "(", "math", ".", "ceil", "(", "n_sample", "**", "0.5", ")", ")", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "writer", "is", "not", "None", ":", "\n", "        ", "writer", ".", "add_image", "(", "name", ",", "utils", ".", "make_grid", "(", "\n", "sample_img", ",", "\n", "nrow", "=", "int", "(", "math", ".", "ceil", "(", "n_sample", "**", "0.5", ")", ")", ",", "\n", "**", "kwargs", "\n", ")", ",", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train_adaptation.train": [[153, 353], ["train_adaptation.sample_data", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.randn", "print", "time.time", "next", "real_img.to.to", "train_adaptation.requires_grad", "train_adaptation.requires_grad", "train_adaptation.mixing_noise", "generator", "discriminator", "discriminator", "train_adaptation.d_logistic_loss", "discriminator.mean", "discriminator.mean", "discriminator.zero_grad", "d_logistic_loss.backward", "d_optim.step", "train_adaptation.requires_grad", "train_adaptation.requires_grad", "train_adaptation.mixing_noise", "generator", "discriminator", "train_adaptation.g_nonsaturating_loss", "torch.nn.functional.adaptive_avg_pool2d", "torch.square().mean", "generator.zero_grad", "g_optim.step", "torch.tensor.mean", "utils.distributed.reduce_loss_dict", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "print", "discriminator", "train_adaptation.d_r1_loss", "discriminator.zero_grad", "d_optim.step", "max", "generator", "train_adaptation.g_path_regularize", "generator.zero_grad", "weighted_path_loss.backward", "g_optim.step", "train_adaptation.accumulate", "train_adaptation.accumulate", "train_adaptation.accumulate", "time.time", "utils.distributed.get_rank", "torch.square", "torch.no_grad", "train_adaptation.mixing_noise", "g_module.mix_styles().clone", "utils.distributed.reduce_sum().item", "utils.distributed.get_world_size", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "print", "os.makedirs", "torch.save", "g_module.style", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.no_grad", "g_ema.eval", "g_ema", "sample_img.detach().cpu.detach().cpu", "train_adaptation.color_segmap", "train_adaptation.color_segmap", "os.makedirs", "train_adaptation.save_sample_image", "train_adaptation.save_sample_image", "train_adaptation.save_sample_image", "os.path.join", "os.path.join", "g_module.mix_styles", "utils.distributed.reduce_sum", "sample_seg.detach().cpu", "sample_seg_coarse.detach().cpu", "os.path.join", "g_module.state_dict", "d_module.state_dict", "g_ema.state_dict", "g_optim.state_dict", "d_optim.state_dict", "sample_img.detach().cpu.detach", "sample_seg.detach", "sample_seg_coarse.detach", "str().zfill", "str"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.sample_data", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.requires_grad", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.requires_grad", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.mixing_noise", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.d_logistic_loss", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.Ranger.step", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.requires_grad", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.requires_grad", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.mixing_noise", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.g_nonsaturating_loss", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.Ranger.step", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.reduce_loss_dict", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.d_r1_loss", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.Ranger.step", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.g_path_regularize", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.Ranger.step", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.accumulate", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.accumulate", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.accumulate", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.get_rank", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.mixing_noise", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.color_segmap", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.color_segmap", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.save_sample_image", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.save_sample_image", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.save_sample_image", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.SemanticGenerator.mix_styles", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.reduce_sum"], ["", "", "def", "train", "(", "args", ",", "ckpt_dir", ",", "loader", ",", "generator", ",", "discriminator", ",", "g_optim", ",", "d_optim", ",", "g_ema", ",", "device", ",", "writer", ")", ":", "\n", "\n", "    ", "loader", "=", "sample_data", "(", "loader", ")", "\n", "pbar", "=", "range", "(", "args", ".", "iter", ")", "\n", "\n", "mean_path_length", "=", "0", "\n", "\n", "d_loss_val", "=", "0", "\n", "r1_img_loss", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "device", ")", "\n", "r1_seg_loss", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "device", ")", "\n", "g_loss_val", "=", "0", "\n", "path_loss", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "device", ")", "\n", "path_lengths", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "device", ")", "\n", "mean_path_length_avg", "=", "0", "\n", "loss_dict", "=", "{", "}", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "g_module", "=", "generator", ".", "module", "\n", "d_module", "=", "discriminator", ".", "module", "\n", "", "else", ":", "\n", "        ", "g_module", "=", "generator", "\n", "d_module", "=", "discriminator", "\n", "\n", "", "accum", "=", "0.5", "**", "(", "32", "/", "(", "10", "*", "1000", ")", ")", "\n", "\n", "sample_z", "=", "torch", ".", "randn", "(", "args", ".", "n_sample", ",", "args", ".", "latent", ",", "device", "=", "device", ")", "\n", "\n", "print", "(", "\"Start Training Iterations...\"", ")", "\n", "for", "idx", "in", "pbar", ":", "\n", "        ", "tic", "=", "time", ".", "time", "(", ")", "\n", "i", "=", "idx", "+", "args", ".", "start_iter", "\n", "\n", "if", "i", ">", "args", ".", "iter", ":", "\n", "            ", "print", "(", "'Done!'", ")", "\n", "break", "\n", "\n", "", "real_img", "=", "next", "(", "loader", ")", "\n", "real_img", "=", "real_img", ".", "to", "(", "device", ")", "\n", "\n", "### Train Discriminator ###", "\n", "requires_grad", "(", "generator", ",", "False", ")", "\n", "requires_grad", "(", "discriminator", ",", "True", ")", "\n", "\n", "noise", "=", "mixing_noise", "(", "args", ".", "batch", ",", "args", ".", "latent", ",", "args", ".", "mixing", ",", "device", ")", "\n", "fake_img", ",", "fake_seg", "=", "generator", "(", "noise", ")", "\n", "\n", "fake_pred", "=", "discriminator", "(", "fake_img", ")", "\n", "real_pred", "=", "discriminator", "(", "real_img", ")", "\n", "\n", "d_loss", "=", "d_logistic_loss", "(", "real_pred", ",", "fake_pred", ")", "\n", "\n", "loss_dict", "[", "'d'", "]", "=", "d_loss", "\n", "loss_dict", "[", "'real_score'", "]", "=", "real_pred", ".", "mean", "(", ")", "\n", "loss_dict", "[", "'fake_score'", "]", "=", "fake_pred", ".", "mean", "(", ")", "\n", "\n", "discriminator", ".", "zero_grad", "(", ")", "\n", "d_loss", ".", "backward", "(", ")", "\n", "d_optim", ".", "step", "(", ")", "\n", "\n", "d_regularize", "=", "i", "%", "args", ".", "d_reg_every", "==", "0", "\n", "\n", "if", "d_regularize", ":", "\n", "            ", "real_img", ".", "requires_grad", "=", "True", "\n", "real_pred", "=", "discriminator", "(", "real_img", ")", "\n", "r1_loss", "=", "d_r1_loss", "(", "real_pred", ",", "real_img", ")", "\n", "\n", "discriminator", ".", "zero_grad", "(", ")", "\n", "(", "args", ".", "r1", "/", "2", "*", "r1_loss", "*", "args", ".", "d_reg_every", "+", "0", "*", "real_pred", "[", "0", "]", ")", ".", "backward", "(", ")", "\n", "\n", "d_optim", ".", "step", "(", ")", "\n", "\n", "", "loss_dict", "[", "'r1'", "]", "=", "r1_img_loss", "\n", "\n", "\n", "### Train Generator ###", "\n", "requires_grad", "(", "generator", ",", "True", ")", "\n", "requires_grad", "(", "discriminator", ",", "False", ")", "\n", "\n", "noise", "=", "mixing_noise", "(", "args", ".", "batch", ",", "args", ".", "latent", ",", "args", ".", "mixing", ",", "device", ")", "\n", "fake_img", ",", "fake_seg", ",", "fake_seg_coarse", ",", "_", ",", "_", "=", "generator", "(", "noise", ",", "return_all", "=", "True", ")", "\n", "\n", "fake_pred", "=", "discriminator", "(", "fake_img", ")", "\n", "g_loss", "=", "g_nonsaturating_loss", "(", "fake_pred", ")", "\n", "\n", "# segmentation mask loss", "\n", "fake_seg_downsample", "=", "F", ".", "adaptive_avg_pool2d", "(", "fake_seg", ",", "fake_seg_coarse", ".", "shape", "[", "2", ":", "4", "]", ")", "\n", "mask_loss", "=", "torch", ".", "square", "(", "fake_seg_coarse", "-", "fake_seg_downsample", ")", ".", "mean", "(", ")", "\n", "\n", "loss_dict", "[", "'g'", "]", "=", "g_loss", "\n", "loss_dict", "[", "'mask'", "]", "=", "mask_loss", "\n", "\n", "generator", ".", "zero_grad", "(", ")", "\n", "(", "g_loss", "+", "args", ".", "lambda_mask", "*", "mask_loss", ")", ".", "backward", "(", ")", "\n", "g_optim", ".", "step", "(", ")", "\n", "\n", "g_regularize", "=", "args", ".", "path_regularize", ">", "0", "and", "i", "%", "args", ".", "g_reg_every", "==", "0", "\n", "\n", "if", "g_regularize", ":", "\n", "            ", "path_batch_size", "=", "max", "(", "1", ",", "args", ".", "batch", "//", "args", ".", "path_batch_shrink", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "noise", "=", "mixing_noise", "(", "\n", "path_batch_size", ",", "args", ".", "latent", ",", "args", ".", "mixing", ",", "device", "\n", ")", "\n", "noise", "=", "[", "g_module", ".", "style", "(", "n", ")", "for", "n", "in", "noise", "]", "\n", "latents", "=", "g_module", ".", "mix_styles", "(", "noise", ")", ".", "clone", "(", ")", "\n", "", "latents", ".", "requires_grad", "=", "True", "\n", "fake_img", ",", "fake_seg", "=", "generator", "(", "[", "latents", "]", ",", "input_is_latent", "=", "True", ")", "\n", "\n", "path_loss", ",", "mean_path_length", ",", "path_lengths", "=", "g_path_regularize", "(", "\n", "fake_img", ",", "latents", ",", "mean_path_length", "\n", ")", "\n", "\n", "generator", ".", "zero_grad", "(", ")", "\n", "weighted_path_loss", "=", "args", ".", "path_regularize", "*", "args", ".", "g_reg_every", "*", "path_loss", "\n", "\n", "if", "args", ".", "path_batch_shrink", ":", "\n", "                ", "weighted_path_loss", "+=", "0", "*", "fake_img", "[", "0", ",", "0", ",", "0", ",", "0", "]", "+", "0", "*", "fake_seg", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "", "weighted_path_loss", ".", "backward", "(", ")", "\n", "\n", "g_optim", ".", "step", "(", ")", "\n", "\n", "mean_path_length_avg", "=", "(", "\n", "reduce_sum", "(", "mean_path_length", ")", ".", "item", "(", ")", "/", "get_world_size", "(", ")", "\n", ")", "\n", "\n", "", "loss_dict", "[", "'path'", "]", "=", "path_loss", "\n", "loss_dict", "[", "'path_length'", "]", "=", "path_lengths", ".", "mean", "(", ")", "\n", "\n", "if", "args", ".", "freeze_local", ":", "\n", "            ", "accumulate", "(", "g_ema", ".", "style", ",", "g_module", ".", "style", ",", "accum", ")", "\n", "accumulate", "(", "g_ema", ".", "render_net", ",", "g_module", ".", "render_net", ",", "accum", ")", "\n", "", "else", ":", "\n", "            ", "accumulate", "(", "g_ema", ",", "g_module", ",", "accum", ")", "\n", "\n", "\n", "### Summarize Information ###", "\n", "", "loss_reduced", "=", "reduce_loss_dict", "(", "loss_dict", ")", "\n", "\n", "d_loss_val", "=", "loss_reduced", "[", "'d'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "g_loss_val", "=", "loss_reduced", "[", "'g'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "r1_val", "=", "loss_reduced", "[", "'r1'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "path_loss_val", "=", "loss_reduced", "[", "'path'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "real_score_val", "=", "loss_reduced", "[", "'real_score'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "fake_score_val", "=", "loss_reduced", "[", "'fake_score'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "path_length_val", "=", "loss_reduced", "[", "'path_length'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "mask_loss_val", "=", "loss_reduced", "[", "'mask'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "\n", "f\"[{i:06d}] d: {d_loss_val:.4f}; g: {g_loss_val:.4f}; \"", "\n", "f\"real: {real_score_val:.4f}; fake: {fake_score_val:.4f}; \"", "\n", "f\"r1: {r1_val:.4f}; \"", "\n", "f\"path: {path_loss_val:.4f}; mean path: {mean_path_length_avg:.4f}; \"", "\n", "f\"mask: {mask_loss_val:.4f}; time: {batch_time:.2f}\"", "\n", ")", "\n", "\n", "# write to tensorboard", "\n", "if", "writer", "is", "not", "None", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'scores/real_score'", ",", "real_score_val", ",", "global_step", "=", "i", ")", "\n", "writer", ".", "add_scalar", "(", "'scores/fake_score'", ",", "fake_score_val", ",", "global_step", "=", "i", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'r1/img'", ",", "r1_val", ",", "global_step", "=", "i", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'path/path_loss'", ",", "path_loss_val", ",", "global_step", "=", "i", ")", "\n", "writer", ".", "add_scalar", "(", "'path/path_length'", ",", "path_length_val", ",", "global_step", "=", "i", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'loss/d'", ",", "d_loss_val", ",", "global_step", "=", "i", ")", "\n", "writer", ".", "add_scalar", "(", "'loss/g'", ",", "g_loss_val", ",", "global_step", "=", "i", ")", "\n", "writer", ".", "add_scalar", "(", "'loss/mask'", ",", "mask_loss_val", ",", "global_step", "=", "i", ")", "\n", "\n", "", "", "if", "i", "%", "args", ".", "viz_every", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "g_ema", ".", "eval", "(", ")", "\n", "sample_img", ",", "sample_seg", ",", "sample_seg_coarse", ",", "depths", ",", "_", "=", "g_ema", "(", "[", "sample_z", "]", ",", "return_all", "=", "True", ")", "\n", "sample_img", "=", "sample_img", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "sample_mask", "=", "color_segmap", "(", "sample_seg", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "color_map", ")", "\n", "sample_mask_coarse", "=", "color_segmap", "(", "sample_seg_coarse", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "color_map", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "'sample'", ")", ",", "exist_ok", "=", "True", ")", "\n", "save_sample_image", "(", "\"sample\"", ",", "\"img\"", ",", "sample_img", ",", "i", ",", "writer", ",", "normalize", "=", "True", ",", "value_range", "=", "(", "-", "1", ",", "1", ")", ")", "\n", "save_sample_image", "(", "\"sample\"", ",", "\"mask\"", ",", "sample_mask", ",", "i", ",", "writer", ",", "normalize", "=", "True", ",", "value_range", "=", "(", "0", ",", "255", ")", ")", "\n", "save_sample_image", "(", "\"sample\"", ",", "\"mask_coarse\"", ",", "sample_mask_coarse", ",", "i", ",", "writer", ",", "normalize", "=", "True", ",", "value_range", "=", "(", "0", ",", "255", ")", ")", "\n", "\n", "\n", "", "", "if", "i", "%", "args", ".", "save_every", "==", "0", "and", "i", ">", "args", ".", "start_iter", ":", "\n", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "'ckpt'", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'g'", ":", "g_module", ".", "state_dict", "(", ")", ",", "\n", "'d'", ":", "d_module", ".", "state_dict", "(", ")", ",", "\n", "'g_ema'", ":", "g_ema", ".", "state_dict", "(", ")", ",", "\n", "\"g_optim\"", ":", "g_optim", ".", "state_dict", "(", ")", ",", "\n", "\"d_optim\"", ":", "d_optim", ".", "state_dict", "(", ")", ",", "\n", "'args'", ":", "args", ",", "\n", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "f'ckpt/{str(i).zfill(6)}.pt'", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.data_sampler": [[50, 59], ["torch.utils.data.distributed.DistributedSampler", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler"], "function", ["None"], ["def", "data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "data", ".", "distributed", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "\n", "", "if", "shuffle", ":", "\n", "        ", "return", "data", ".", "RandomSampler", "(", "dataset", ")", "\n", "\n", "", "else", ":", "\n", "        ", "return", "data", ".", "SequentialSampler", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.requires_grad": [[61, 64], ["model.parameters"], "function", ["None"], ["", "", "def", "requires_grad", "(", "model", ",", "flag", "=", "True", ")", ":", "\n", "    ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.accumulate": [[66, 72], ["dict", "dict", "dict.keys", "model1.named_parameters", "model2.named_parameters", "par1[].data.mul_().add_", "par1[].data.mul_"], "function", ["None"], ["", "", "def", "accumulate", "(", "model1", ",", "model2", ",", "decay", "=", "0.999", ")", ":", "\n", "    ", "par1", "=", "dict", "(", "model1", ".", "named_parameters", "(", ")", ")", "\n", "par2", "=", "dict", "(", "model2", ".", "named_parameters", "(", ")", ")", "\n", "\n", "for", "k", "in", "par1", ".", "keys", "(", ")", ":", "\n", "        ", "par1", "[", "k", "]", ".", "data", ".", "mul_", "(", "decay", ")", ".", "add_", "(", "1", "-", "decay", ",", "par2", "[", "k", "]", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.sample_data": [[74, 78], ["None"], "function", ["None"], ["", "", "def", "sample_data", "(", "loader", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "batch", "in", "loader", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.d_logistic_loss": [[80, 85], ["torch.nn.functional.softplus", "torch.nn.functional.softplus", "F.softplus.mean", "F.softplus.mean"], "function", ["None"], ["", "", "", "def", "d_logistic_loss", "(", "real_pred", ",", "fake_pred", ")", ":", "\n", "    ", "real_loss", "=", "F", ".", "softplus", "(", "-", "real_pred", ")", "\n", "fake_loss", "=", "F", ".", "softplus", "(", "fake_pred", ")", "\n", "\n", "return", "real_loss", ".", "mean", "(", ")", "+", "fake_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.d_r1_loss": [[87, 95], ["torch.autograd.grad", "grad_real_img.pow().reshape().sum().mean", "grad_real_mask.pow().reshape().sum().mean", "real_pred.sum", "grad_real_img.pow().reshape().sum", "grad_real_mask.pow().reshape().sum", "grad_real_img.pow().reshape", "grad_real_mask.pow().reshape", "grad_real_img.pow", "grad_real_mask.pow"], "function", ["None"], ["", "def", "d_r1_loss", "(", "real_pred", ",", "real_img", ",", "real_mask", ")", ":", "\n", "    ", "grad_real_img", ",", "grad_real_mask", "=", "autograd", ".", "grad", "(", "\n", "outputs", "=", "real_pred", ".", "sum", "(", ")", ",", "inputs", "=", "[", "real_img", ",", "real_mask", "]", ",", "create_graph", "=", "True", "\n", ")", "\n", "grad_penalty_img", "=", "grad_real_img", ".", "pow", "(", "2", ")", ".", "reshape", "(", "grad_real_img", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "grad_penalty_seg", "=", "grad_real_mask", ".", "pow", "(", "2", ")", ".", "reshape", "(", "grad_real_mask", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n", "return", "grad_penalty_img", ",", "grad_penalty_seg", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.g_nonsaturating_loss": [[97, 101], ["torch.nn.functional.softplus().mean", "torch.nn.functional.softplus"], "function", ["None"], ["", "def", "g_nonsaturating_loss", "(", "fake_pred", ")", ":", "\n", "    ", "loss", "=", "F", ".", "softplus", "(", "-", "fake_pred", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.g_path_regularize": [[103, 117], ["torch.autograd.grad", "torch.sqrt", "torch.randn_like", "math.sqrt", "grad.pow().sum().mean", "path_mean.detach", "grad.pow().sum", "torch.sqrt.mean", "grad.pow"], "function", ["None"], ["", "def", "g_path_regularize", "(", "fake_img", ",", "latents", ",", "mean_path_length", ",", "decay", "=", "0.01", ")", ":", "\n", "    ", "noise", "=", "torch", ".", "randn_like", "(", "fake_img", ")", "/", "math", ".", "sqrt", "(", "\n", "fake_img", ".", "shape", "[", "2", "]", "*", "fake_img", ".", "shape", "[", "3", "]", "\n", ")", "\n", "grad", ",", "=", "autograd", ".", "grad", "(", "\n", "outputs", "=", "(", "fake_img", "*", "noise", ")", ".", "sum", "(", ")", ",", "inputs", "=", "latents", ",", "create_graph", "=", "True", "\n", ")", "\n", "path_lengths", "=", "torch", ".", "sqrt", "(", "grad", ".", "pow", "(", "2", ")", ".", "sum", "(", "2", ")", ".", "mean", "(", "1", ")", ")", "\n", "\n", "path_mean", "=", "mean_path_length", "+", "decay", "*", "(", "path_lengths", ".", "mean", "(", ")", "-", "mean_path_length", ")", "\n", "\n", "path_penalty", "=", "(", "path_lengths", "-", "path_mean", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "return", "path_penalty", ",", "path_mean", ".", "detach", "(", ")", ",", "path_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.make_noise": [[119, 126], ["torch.randn().unbind", "torch.randn", "torch.randn"], "function", ["None"], ["", "def", "make_noise", "(", "batch", ",", "latent_dim", ",", "n_noise", ",", "device", ")", ":", "\n", "    ", "if", "n_noise", "==", "1", ":", "\n", "        ", "return", "torch", ".", "randn", "(", "batch", ",", "latent_dim", ",", "device", "=", "device", ")", "\n", "\n", "", "noises", "=", "torch", ".", "randn", "(", "n_noise", ",", "batch", ",", "latent_dim", ",", "device", "=", "device", ")", ".", "unbind", "(", "0", ")", "\n", "\n", "return", "noises", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.mixing_noise": [[128, 134], ["train.make_noise", "random.random", "random.random", "train.make_noise"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Generator.make_noise", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Generator.make_noise"], ["", "def", "mixing_noise", "(", "batch", ",", "latent_dim", ",", "prob", ",", "device", ")", ":", "\n", "    ", "if", "prob", ">", "0", "and", "random", ".", "random", "(", ")", "<", "prob", ":", "\n", "        ", "return", "make_noise", "(", "batch", ",", "latent_dim", ",", "2", ",", "device", ")", "\n", "\n", "", "else", ":", "\n", "        ", "return", "[", "make_noise", "(", "batch", ",", "latent_dim", ",", "1", ",", "device", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.color_segmap": [[135, 142], ["torch.argmax", "torch.zeros", "sample_mask.permute.permute", "torch.tensor", "visualize.utils.color_map", "visualize.utils.color_map"], "function", ["None"], ["", "", "def", "color_segmap", "(", "sample_seg", ",", "color_map", ")", ":", "\n", "    ", "sample_seg", "=", "torch", ".", "argmax", "(", "sample_seg", ",", "dim", "=", "1", ")", "\n", "sample_mask", "=", "torch", ".", "zeros", "(", "(", "sample_seg", ".", "shape", "[", "0", "]", ",", "sample_seg", ".", "shape", "[", "1", "]", ",", "sample_seg", ".", "shape", "[", "2", "]", ",", "3", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "for", "key", "in", "color_map", ":", "\n", "        ", "sample_mask", "[", "sample_seg", "==", "key", "]", "=", "torch", ".", "tensor", "(", "color_map", "[", "key", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "", "sample_mask", "=", "sample_mask", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "sample_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.save_sample_image": [[143, 157], ["len", "torchvision.utils.save_image", "os.path.join", "writer.add_image", "int", "torchvision.utils.make_grid", "math.ceil", "str().zfill", "int", "math.ceil", "str"], "function", ["None"], ["", "def", "save_sample_image", "(", "folder", ",", "name", ",", "sample_img", ",", "global_step", ",", "writer", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "n_sample", "=", "len", "(", "sample_img", ")", "\n", "utils", ".", "save_image", "(", "\n", "sample_img", ",", "\n", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "f'{folder}/{name}_{str(global_step).zfill(6)}.jpeg'", ")", ",", "\n", "nrow", "=", "int", "(", "math", ".", "ceil", "(", "n_sample", "**", "0.5", ")", ")", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "writer", "is", "not", "None", ":", "\n", "        ", "writer", ".", "add_image", "(", "name", ",", "utils", ".", "make_grid", "(", "\n", "sample_img", ",", "\n", "nrow", "=", "int", "(", "math", ".", "ceil", "(", "n_sample", "**", "0.5", ")", ")", ",", "\n", "**", "kwargs", "\n", ")", ",", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.train": [[158, 375], ["utils.inception_utils.prepare_inception_metrics", "functools.partial", "train.sample_data", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.randn", "print", "time.time", "next", "train.requires_grad", "train.requires_grad", "train.mixing_noise", "generator", "discriminator", "discriminator", "train.d_logistic_loss", "discriminator.mean", "discriminator.mean", "discriminator.zero_grad", "d_logistic_loss.backward", "d_optim.step", "train.requires_grad", "train.requires_grad", "train.mixing_noise", "generator", "discriminator", "train.g_nonsaturating_loss", "torch.nn.functional.adaptive_avg_pool2d", "torch.square().mean", "generator.zero_grad", "g_optim.step", "torch.tensor.mean", "train.accumulate", "utils.distributed.reduce_loss_dict", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "loss_reduced[].mean().item", "print", "real_img.to", "real_mask.to", "discriminator", "train.d_r1_loss", "discriminator.zero_grad", "d_optim.step", "max", "generator", "train.g_path_regularize", "generator.zero_grad", "weighted_path_loss.backward", "g_optim.step", "time.time", "utils.distributed.get_rank", "torch.square", "torch.no_grad", "train.mixing_noise", "g_module.mix_styles().clone", "utils.distributed.reduce_sum().item", "utils.distributed.get_world_size", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "loss_reduced[].mean", "print", "print", "utils.inception_utils.prepare_inception_metrics.", "print", "os.makedirs", "torch.save", "g_module.style", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.no_grad", "g_ema.eval", "g_ema", "sample_img.detach().cpu.detach().cpu", "train.color_segmap", "train.color_segmap", "os.makedirs", "os.makedirs", "train.save_sample_image", "train.save_sample_image", "train.save_sample_image", "range", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "os.path.join", "os.path.join", "g_module.mix_styles", "utils.distributed.reduce_sum", "sample_seg.detach().cpu", "sample_seg_coarse.detach().cpu", "d.detach().cpu", "os.path.join", "os.path.join", "len", "train.save_sample_image", "g_module.state_dict", "d_module.state_dict", "g_ema.state_dict", "g_optim.state_dict", "d_optim.state_dict", "sample_img.detach().cpu.detach", "sample_seg.detach", "sample_seg_coarse.detach", "d.detach", "str().zfill", "str"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.prepare_inception_metrics", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.sample_data", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.requires_grad", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.requires_grad", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.mixing_noise", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.d_logistic_loss", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.Ranger.step", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.requires_grad", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.requires_grad", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.mixing_noise", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.g_nonsaturating_loss", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.Ranger.step", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.accumulate", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.reduce_loss_dict", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.d_r1_loss", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.Ranger.step", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.g_path_regularize", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.Ranger.step", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.get_rank", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.mixing_noise", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.color_segmap", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.color_segmap", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.save_sample_image", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.save_sample_image", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.save_sample_image", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.SemanticGenerator.mix_styles", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.reduce_sum", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.train.save_sample_image"], ["", "", "def", "train", "(", "args", ",", "ckpt_dir", ",", "loader", ",", "generator", ",", "discriminator", ",", "g_optim", ",", "d_optim", ",", "g_ema", ",", "device", ",", "writer", ")", ":", "\n", "\n", "    ", "get_inception_metrics", "=", "prepare_inception_metrics", "(", "args", ".", "inception", ",", "False", ")", "\n", "# sample func for calculate FID", "\n", "sample_fn", "=", "functools", ".", "partial", "(", "sample_gema", ",", "g_ema", "=", "g_ema", ",", "device", "=", "device", ",", "\n", "truncation", "=", "1.0", ",", "mean_latent", "=", "None", ",", "batch_size", "=", "args", ".", "batch", ")", "\n", "\n", "loader", "=", "sample_data", "(", "loader", ")", "\n", "pbar", "=", "range", "(", "args", ".", "iter", ")", "\n", "\n", "mean_path_length", "=", "0", "\n", "\n", "d_loss_val", "=", "0", "\n", "r1_img_loss", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "device", ")", "\n", "r1_seg_loss", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "device", ")", "\n", "g_loss_val", "=", "0", "\n", "path_loss", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "device", ")", "\n", "path_lengths", "=", "torch", ".", "tensor", "(", "0.0", ",", "device", "=", "device", ")", "\n", "mean_path_length_avg", "=", "0", "\n", "loss_dict", "=", "{", "}", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "g_module", "=", "generator", ".", "module", "\n", "d_module", "=", "discriminator", ".", "module", "\n", "", "else", ":", "\n", "        ", "g_module", "=", "generator", "\n", "d_module", "=", "discriminator", "\n", "\n", "", "accum", "=", "0.5", "**", "(", "32", "/", "(", "10", "*", "1000", ")", ")", "\n", "\n", "sample_z", "=", "torch", ".", "randn", "(", "args", ".", "n_sample", ",", "args", ".", "latent", ",", "device", "=", "device", ")", "\n", "\n", "print", "(", "\"Start Training Iterations...\"", ")", "\n", "for", "idx", "in", "pbar", ":", "\n", "        ", "tic", "=", "time", ".", "time", "(", ")", "\n", "i", "=", "idx", "+", "args", ".", "start_iter", "\n", "\n", "if", "i", ">", "args", ".", "iter", ":", "\n", "            ", "print", "(", "'Done!'", ")", "\n", "break", "\n", "\n", "", "real_data", "=", "next", "(", "loader", ")", "\n", "real_img", ",", "real_mask", "=", "real_data", "[", "'image'", "]", ",", "real_data", "[", "'mask'", "]", "\n", "real_img", ",", "real_mask", "=", "real_img", ".", "to", "(", "device", ")", ",", "real_mask", ".", "to", "(", "device", ")", "\n", "\n", "### Train Discriminator ###", "\n", "requires_grad", "(", "generator", ",", "False", ")", "\n", "requires_grad", "(", "discriminator", ",", "True", ")", "\n", "\n", "noise", "=", "mixing_noise", "(", "args", ".", "batch", ",", "args", ".", "latent", ",", "args", ".", "mixing", ",", "device", ")", "\n", "fake_img", ",", "fake_seg", "=", "generator", "(", "noise", ")", "\n", "\n", "fake_pred", "=", "discriminator", "(", "fake_img", ",", "fake_seg", ")", "\n", "real_pred", "=", "discriminator", "(", "real_img", ",", "real_mask", ")", "\n", "\n", "d_loss", "=", "d_logistic_loss", "(", "real_pred", ",", "fake_pred", ")", "\n", "\n", "loss_dict", "[", "'d'", "]", "=", "d_loss", "\n", "loss_dict", "[", "'real_score'", "]", "=", "real_pred", ".", "mean", "(", ")", "\n", "loss_dict", "[", "'fake_score'", "]", "=", "fake_pred", ".", "mean", "(", ")", "\n", "\n", "discriminator", ".", "zero_grad", "(", ")", "\n", "d_loss", ".", "backward", "(", ")", "\n", "d_optim", ".", "step", "(", ")", "\n", "\n", "d_regularize", "=", "i", "%", "args", ".", "d_reg_every", "==", "0", "\n", "\n", "if", "d_regularize", ":", "\n", "            ", "real_img", ".", "requires_grad", "=", "True", "\n", "real_mask", ".", "requires_grad", "=", "True", "\n", "real_pred", "=", "discriminator", "(", "real_img", ",", "real_mask", ")", "\n", "r1_img_loss", ",", "r1_seg_loss", "=", "d_r1_loss", "(", "real_pred", ",", "real_img", ",", "real_mask", ")", "\n", "\n", "discriminator", ".", "zero_grad", "(", ")", "\n", "(", "(", "args", ".", "r1_img", "/", "2", "*", "r1_img_loss", "+", "args", ".", "r1_seg", "/", "2", "*", "r1_seg_loss", ")", "*", "args", ".", "d_reg_every", "+", "0", "*", "real_pred", "[", "0", "]", ")", ".", "backward", "(", ")", "\n", "\n", "d_optim", ".", "step", "(", ")", "\n", "\n", "", "loss_dict", "[", "'r1_img'", "]", "=", "r1_img_loss", "\n", "loss_dict", "[", "'r1_seg'", "]", "=", "r1_seg_loss", "\n", "\n", "\n", "### Train Generator ###", "\n", "requires_grad", "(", "generator", ",", "True", ")", "\n", "requires_grad", "(", "discriminator", ",", "False", ")", "\n", "\n", "noise", "=", "mixing_noise", "(", "args", ".", "batch", ",", "args", ".", "latent", ",", "args", ".", "mixing", ",", "device", ")", "\n", "fake_img", ",", "fake_seg", ",", "fake_seg_coarse", ",", "_", ",", "_", "=", "generator", "(", "noise", ",", "return_all", "=", "True", ")", "\n", "\n", "fake_pred", "=", "discriminator", "(", "fake_img", ",", "fake_seg", ")", "\n", "g_loss", "=", "g_nonsaturating_loss", "(", "fake_pred", ")", "\n", "\n", "# segmentation mask loss", "\n", "fake_seg_downsample", "=", "F", ".", "adaptive_avg_pool2d", "(", "fake_seg", ",", "fake_seg_coarse", ".", "shape", "[", "2", ":", "4", "]", ")", "\n", "mask_loss", "=", "torch", ".", "square", "(", "fake_seg_coarse", "-", "fake_seg_downsample", ")", ".", "mean", "(", ")", "\n", "\n", "loss_dict", "[", "'g'", "]", "=", "g_loss", "\n", "loss_dict", "[", "'mask'", "]", "=", "mask_loss", "\n", "\n", "generator", ".", "zero_grad", "(", ")", "\n", "(", "g_loss", "+", "args", ".", "lambda_mask", "*", "mask_loss", ")", ".", "backward", "(", ")", "\n", "g_optim", ".", "step", "(", ")", "\n", "\n", "g_regularize", "=", "args", ".", "path_regularize", ">", "0", "and", "i", "%", "args", ".", "g_reg_every", "==", "0", "\n", "\n", "if", "g_regularize", ":", "\n", "            ", "path_batch_size", "=", "max", "(", "1", ",", "args", ".", "batch", "//", "args", ".", "path_batch_shrink", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "noise", "=", "mixing_noise", "(", "\n", "path_batch_size", ",", "args", ".", "latent", ",", "args", ".", "mixing", ",", "device", "\n", ")", "\n", "noise", "=", "[", "g_module", ".", "style", "(", "n", ")", "for", "n", "in", "noise", "]", "\n", "latents", "=", "g_module", ".", "mix_styles", "(", "noise", ")", ".", "clone", "(", ")", "\n", "", "latents", ".", "requires_grad", "=", "True", "\n", "fake_img", ",", "fake_seg", "=", "generator", "(", "[", "latents", "]", ",", "input_is_latent", "=", "True", ")", "\n", "\n", "path_loss", ",", "mean_path_length", ",", "path_lengths", "=", "g_path_regularize", "(", "\n", "fake_img", ",", "latents", ",", "mean_path_length", "\n", ")", "\n", "\n", "generator", ".", "zero_grad", "(", ")", "\n", "weighted_path_loss", "=", "args", ".", "path_regularize", "*", "args", ".", "g_reg_every", "*", "path_loss", "\n", "\n", "if", "args", ".", "path_batch_shrink", ":", "\n", "                ", "weighted_path_loss", "+=", "0", "*", "fake_img", "[", "0", ",", "0", ",", "0", ",", "0", "]", "+", "0", "*", "fake_seg", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "", "weighted_path_loss", ".", "backward", "(", ")", "\n", "\n", "g_optim", ".", "step", "(", ")", "\n", "\n", "mean_path_length_avg", "=", "(", "\n", "reduce_sum", "(", "mean_path_length", ")", ".", "item", "(", ")", "/", "get_world_size", "(", ")", "\n", ")", "\n", "\n", "", "loss_dict", "[", "'path'", "]", "=", "path_loss", "\n", "loss_dict", "[", "'path_length'", "]", "=", "path_lengths", ".", "mean", "(", ")", "\n", "\n", "accumulate", "(", "g_ema", ",", "g_module", ",", "accum", ")", "\n", "\n", "\n", "### Summarize Information ###", "\n", "loss_reduced", "=", "reduce_loss_dict", "(", "loss_dict", ")", "\n", "\n", "d_loss_val", "=", "loss_reduced", "[", "'d'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "g_loss_val", "=", "loss_reduced", "[", "'g'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "r1_img_val", "=", "loss_reduced", "[", "'r1_img'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "r1_seg_val", "=", "loss_reduced", "[", "'r1_seg'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "path_loss_val", "=", "loss_reduced", "[", "'path'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "real_score_val", "=", "loss_reduced", "[", "'real_score'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "fake_score_val", "=", "loss_reduced", "[", "'fake_score'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "path_length_val", "=", "loss_reduced", "[", "'path_length'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "mask_loss_val", "=", "loss_reduced", "[", "'mask'", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "\n", "f\"[{i:06d}] d: {d_loss_val:.4f}; g: {g_loss_val:.4f}; \"", "\n", "f\"real: {real_score_val:.4f}; fake: {fake_score_val:.4f}; \"", "\n", "f\"r1_img: {r1_img_val:.4f}; r1_seg: {r1_seg_val:.4f}; \"", "\n", "f\"path: {path_loss_val:.4f}; mean path: {mean_path_length_avg:.4f}; \"", "\n", "f\"mask: {mask_loss_val:.4f}; time: {batch_time:.2f}\"", "\n", ")", "\n", "\n", "# write to tensorboard", "\n", "if", "writer", "is", "not", "None", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'scores/real_score'", ",", "real_score_val", ",", "global_step", "=", "i", ")", "\n", "writer", ".", "add_scalar", "(", "'scores/fake_score'", ",", "fake_score_val", ",", "global_step", "=", "i", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'r1/img'", ",", "r1_img_val", ",", "global_step", "=", "i", ")", "\n", "writer", ".", "add_scalar", "(", "'r1/seg'", ",", "r1_seg_val", ",", "global_step", "=", "i", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'path/path_loss'", ",", "path_loss_val", ",", "global_step", "=", "i", ")", "\n", "writer", ".", "add_scalar", "(", "'path/path_length'", ",", "path_length_val", ",", "global_step", "=", "i", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'loss/d'", ",", "d_loss_val", ",", "global_step", "=", "i", ")", "\n", "writer", ".", "add_scalar", "(", "'loss/g'", ",", "g_loss_val", ",", "global_step", "=", "i", ")", "\n", "writer", ".", "add_scalar", "(", "'loss/mask'", ",", "mask_loss_val", ",", "global_step", "=", "i", ")", "\n", "\n", "", "", "if", "i", "%", "args", ".", "viz_every", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "g_ema", ".", "eval", "(", ")", "\n", "sample_img", ",", "sample_seg", ",", "sample_seg_coarse", ",", "depths", ",", "_", "=", "g_ema", "(", "[", "sample_z", "]", ",", "return_all", "=", "True", ")", "\n", "sample_img", "=", "sample_img", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "sample_mask", "=", "color_segmap", "(", "sample_seg", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "color_map", ")", "\n", "sample_mask_coarse", "=", "color_segmap", "(", "sample_seg_coarse", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "color_map", ")", "\n", "depths", "=", "[", "d", ".", "detach", "(", ")", ".", "cpu", "(", ")", "for", "d", "in", "depths", "]", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "'sample'", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "'depth'", ")", ",", "exist_ok", "=", "True", ")", "\n", "save_sample_image", "(", "\"sample\"", ",", "\"img\"", ",", "sample_img", ",", "i", ",", "writer", ",", "normalize", "=", "True", ",", "value_range", "=", "(", "-", "1", ",", "1", ")", ")", "\n", "save_sample_image", "(", "\"sample\"", ",", "\"mask\"", ",", "sample_mask", ",", "i", ",", "writer", ",", "normalize", "=", "True", ",", "value_range", "=", "(", "0", ",", "255", ")", ")", "\n", "save_sample_image", "(", "\"sample\"", ",", "\"mask_coarse\"", ",", "sample_mask_coarse", ",", "i", ",", "writer", ",", "normalize", "=", "True", ",", "value_range", "=", "(", "0", ",", "255", ")", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "depths", ")", ")", ":", "\n", "                        ", "save_sample_image", "(", "\"depth\"", ",", "f\"depth_{j:02d}\"", ",", "depths", "[", "j", "]", ",", "i", ",", "writer", ",", "normalize", "=", "True", ")", "\n", "\n", "\n", "", "", "", "if", "i", "%", "args", ".", "save_every", "==", "0", "and", "i", ">", "args", ".", "start_iter", ":", "\n", "                ", "print", "(", "\"==================Start calculating FID==================\"", ")", "\n", "IS_mean", ",", "IS_std", ",", "FID", "=", "get_inception_metrics", "(", "sample_fn", ",", "num_inception_images", "=", "10000", ",", "use_torch", "=", "False", ")", "\n", "print", "(", "\"[val] iteration {0:06d}: FID: {1:.4f}, IS_mean: {2:.4f}, IS_std: {3:.4f}\"", ".", "format", "(", "i", ",", "FID", ",", "IS_mean", ",", "IS_std", ")", ")", "\n", "if", "writer", "is", "not", "None", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'metrics/FID'", ",", "FID", ",", "global_step", "=", "i", ")", "\n", "writer", ".", "add_scalar", "(", "'metrics/IS_mean'", ",", "IS_mean", ",", "global_step", "=", "i", ")", "\n", "writer", ".", "add_scalar", "(", "'metrics/IS_std'", ",", "IS_std", ",", "global_step", "=", "i", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "'ckpt'", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'g'", ":", "g_module", ".", "state_dict", "(", ")", ",", "\n", "'d'", ":", "d_module", ".", "state_dict", "(", ")", ",", "\n", "'g_ema'", ":", "g_ema", ".", "state_dict", "(", ")", ",", "\n", "\"g_optim\"", ":", "g_optim", ".", "state_dict", "(", ")", ",", "\n", "\"d_optim\"", ":", "d_optim", ".", "state_dict", "(", ")", ",", "\n", "'args'", ":", "args", ",", "\n", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "f'ckpt/{str(i).zfill(6)}.pt'", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.prepare_image_data.resize_and_convert": [[36, 44], ["torchvision.transforms.functional.resize", "torchvision.transforms.functional.center_crop", "io.BytesIO", "trans_fn.center_crop.save", "io.BytesIO.getvalue"], "function", ["None"], ["def", "resize_and_convert", "(", "img", ",", "size", ",", "resample", ",", "quality", "=", "100", ")", ":", "\n", "    ", "img", "=", "trans_fn", ".", "resize", "(", "img", ",", "size", ",", "resample", ")", "\n", "img", "=", "trans_fn", ".", "center_crop", "(", "img", ",", "size", ")", "\n", "buffer", "=", "BytesIO", "(", ")", "\n", "img", ".", "save", "(", "buffer", ",", "format", "=", "\"jpeg\"", ",", "quality", "=", "quality", ")", "\n", "val", "=", "buffer", ".", "getvalue", "(", ")", "\n", "\n", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.prepare_image_data.resize_multiple": [[46, 55], ["imgs.append", "prepare_image_data.resize_and_convert"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.prepare_image_data.resize_and_convert"], ["", "def", "resize_multiple", "(", "\n", "img", ",", "sizes", "=", "(", "128", ",", "256", ",", "512", ",", "1024", ")", ",", "resample", "=", "Image", ".", "LANCZOS", ",", "quality", "=", "100", "\n", ")", ":", "\n", "    ", "imgs", "=", "[", "]", "\n", "\n", "for", "size", "in", "sizes", ":", "\n", "        ", "imgs", ".", "append", "(", "resize_and_convert", "(", "img", ",", "size", ",", "resample", ",", "quality", ")", ")", "\n", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.prepare_image_data.resize_worker": [[57, 68], ["prepare_image_data.resize_multiple", "PIL.Image.open", "img.convert.convert", "print", "ValueError"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.prepare_image_data.resize_multiple"], ["", "def", "resize_worker", "(", "img_file", ",", "sizes", ",", "resample", ")", ":", "\n", "    ", "i", ",", "file", "=", "img_file", "\n", "try", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "file", ")", "\n", "img", "=", "img", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "file", ")", "\n", "raise", "ValueError", "(", "\"~!\"", ")", "\n", "", "out", "=", "resize_multiple", "(", "img", ",", "sizes", "=", "sizes", ",", "resample", "=", "resample", ")", "\n", "\n", "return", "i", ",", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.prepare_image_data.find_images": [[69, 77], ["list", "IMAGE_EXTENSIONS.union.union", "sorted", "list", "glob.glob", "enumerate", "f.upper"], "function", ["None"], ["", "def", "find_images", "(", "path", ")", ":", "\n", "    ", "files", "=", "list", "(", ")", "\n", "IMAGE_EXTENSIONS", "=", "{", "'jpg'", ",", "'png'", ",", "'jpeg'", ",", "'webp'", "}", "\n", "IMAGE_EXTENSIONS", "=", "IMAGE_EXTENSIONS", ".", "union", "(", "{", "f", ".", "upper", "(", ")", "for", "f", "in", "IMAGE_EXTENSIONS", "}", ")", "\n", "for", "ext", "in", "IMAGE_EXTENSIONS", ":", "\n", "        ", "files", "+=", "glob", "(", "f'{path}/**/*.{ext}'", ",", "recursive", "=", "True", ")", "\n", "", "files", "=", "sorted", "(", "files", ")", "\n", "return", "list", "(", "enumerate", "(", "files", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.prepare_image_data.prepare": [[78, 96], ["functools.partial", "multiprocessing.Pool", "tqdm.tqdm", "pool.imap_unordered", "zip", "env.begin", "txn.put", "str().encode", "env.begin", "txn.put", "str", "str().zfill", "str"], "function", ["None"], ["", "def", "prepare", "(", "\n", "env", ",", "files", ",", "n_worker", ",", "sizes", "=", "(", "128", ",", "256", ",", "512", ",", "1024", ")", ",", "resample", "=", "Image", ".", "LANCZOS", "\n", ")", ":", "\n", "    ", "resize_fn", "=", "partial", "(", "resize_worker", ",", "sizes", "=", "sizes", ",", "resample", "=", "resample", ")", "\n", "\n", "total", "=", "0", "\n", "with", "multiprocessing", ".", "Pool", "(", "n_worker", ")", "as", "pool", ":", "\n", "        ", "for", "i", ",", "imgs", "in", "tqdm", "(", "pool", ".", "imap_unordered", "(", "resize_fn", ",", "files", ")", ")", ":", "\n", "            ", "for", "size", ",", "img", "in", "zip", "(", "sizes", ",", "imgs", ")", ":", "\n", "                ", "key", "=", "f\"{size}-{str(i).zfill(5)}\"", ".", "encode", "(", "\"utf-8\"", ")", "\n", "\n", "with", "env", ".", "begin", "(", "write", "=", "True", ")", "as", "txn", ":", "\n", "                    ", "txn", ".", "put", "(", "key", ",", "img", ")", "\n", "\n", "", "", "total", "+=", "1", "\n", "\n", "", "with", "env", ".", "begin", "(", "write", "=", "True", ")", "as", "txn", ":", "\n", "            ", "txn", ".", "put", "(", "\"length\"", ".", "encode", "(", "\"utf-8\"", ")", ",", "str", "(", "total", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.prepare_inception.extract_features": [[30, 55], ["torch.no_grad", "torch.no_grad", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "isinstance", "img.expand.to", "inception", "np.concatenate.append", "np.concatenate.append", "img.expand.expand", "pool_val.cpu().numpy", "torch.softmax().cpu().numpy", "pool_val.cpu", "torch.softmax().cpu", "torch.softmax"], "function", ["None"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "extract_features", "(", "args", ",", "loader", ",", "inception", ",", "device", ")", ":", "\n", "\n", "    ", "pools", ",", "logits", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "loader", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "img", "=", "data", "\n", "", "else", ":", "\n", "            ", "img", "=", "data", "[", "'image'", "]", "\n", "\n", "# check img dim", "\n", "", "if", "img", ".", "shape", "[", "1", "]", "!=", "3", ":", "\n", "            ", "img", "=", "img", ".", "expand", "(", "-", "1", ",", "3", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "pool_val", ",", "logits_val", "=", "inception", "(", "img", ")", "\n", "\n", "pools", ".", "append", "(", "pool_val", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "logits", ".", "append", "(", "F", ".", "softmax", "(", "logits_val", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "pools", "=", "np", ".", "concatenate", "(", "pools", ",", "axis", "=", "0", ")", "\n", "logits", "=", "np", ".", "concatenate", "(", "logits", ",", "axis", "=", "0", ")", "\n", "\n", "return", "pools", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.None.prepare_inception.get_dataset": [[57, 69], ["print", "utils.dataset.MaskDataset", "print", "torchvision.transforms.Compose", "utils.dataset.MultiResolutionDataset", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "get_dataset", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset_type", "==", "'mask'", ":", "\n", "        ", "print", "(", "f\"Using mask dataset: {args.path}\"", ")", "\n", "dataset", "=", "MaskDataset", "(", "args", ".", "path", ",", "resolution", "=", "args", ".", "size", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"Using image dataset: {args.path}\"", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "inplace", "=", "True", ")", "\n", "]", ")", "\n", "dataset", "=", "MultiResolutionDataset", "(", "args", ".", "path", ",", "transform", "=", "transform", ",", "resolution", "=", "args", ".", "size", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.get_rank": [[24, 32], ["torch.distributed.get_rank", "torch.distributed.is_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.get_rank"], ["def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.synchronize": [[34, 47], ["torch.distributed.get_world_size", "torch.distributed.barrier", "torch.distributed.is_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.get_world_size": [[49, 57], ["torch.distributed.get_world_size", "torch.distributed.is_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.get_world_size"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.reduce_sum": [[59, 70], ["tensor.clone.clone", "torch.distributed.all_reduce", "torch.distributed.is_available", "torch.distributed.is_initialized"], "function", ["None"], ["", "def", "reduce_sum", "(", "tensor", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "tensor", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "tensor", "\n", "\n", "", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "tensor", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.gather_grad": [[72, 82], ["distributed.get_world_size", "torch.distributed.all_reduce", "param.grad.data.div_"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.get_world_size"], ["", "def", "gather_grad", "(", "params", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "\n", "", "for", "param", "in", "params", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "param", ".", "grad", ".", "data", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "param", ".", "grad", ".", "data", ".", "div_", "(", "world_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.all_gather": [[84, 117], ["distributed.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.IntTensor().to", "torch.distributed.all_gather", "max", "torch.distributed.all_gather", "zip", "torch.IntTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.IntTensor", "range", "size.item", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.IntTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.all_gather", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.all_gather"], ["", "", "", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "'cuda'", ")", "\n", "\n", "local_size", "=", "torch", ".", "IntTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "'cuda'", ")", "\n", "size_list", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", "]", ")", ".", "to", "(", "'cuda'", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "'cuda'", ")", ")", "\n", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "'cuda'", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "0", ")", "\n", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.reduce_loss_dict": [[119, 142], ["distributed.get_world_size", "torch.no_grad", "sorted", "torch.stack", "torch.distributed.reduce", "loss_dict.keys", "keys.append", "torch.stack.append", "torch.distributed.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.get_world_size", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.distributed.get_rank"], ["", "def", "reduce_loss_dict", "(", "loss_dict", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "loss_dict", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "keys", "=", "[", "]", "\n", "losses", "=", "[", "]", "\n", "\n", "for", "k", "in", "sorted", "(", "loss_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "keys", ".", "append", "(", "k", ")", "\n", "losses", ".", "append", "(", "loss_dict", "[", "k", "]", ")", "\n", "\n", "", "losses", "=", "torch", ".", "stack", "(", "losses", ",", "0", ")", "\n", "dist", ".", "reduce", "(", "losses", ",", "dst", "=", "0", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "losses", "/=", "world_size", "\n", "\n", "", "reduced_losses", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "losses", ")", "}", "\n", "\n", "", "return", "reduced_losses", "\n", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.dataset.MaskDataset.__init__": [[32, 70], ["lmdb.open", "IOError", "dataset.MaskDataset.env.begin", "int", "torchvision.transforms.Compose", "albumentations.Compose", "albumentations.Compose", "albumentations.Compose", "albumentations.Compose", "txn.get().decode", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "albumentations.transforms.HorizontalFlip", "albumentations.transforms.HorizontalFlip", "albumentations.transforms.ShiftScaleRotate", "albumentations.transforms.ShiftScaleRotate", "txn.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "transform", "=", "None", ",", "resolution", "=", "256", ",", "label_size", "=", "0", ",", "aug", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "label_size", "=", "label_size", "\n", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "path", ",", "\n", "max_readers", "=", "32", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ",", "\n", ")", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "raise", "IOError", "(", "'Cannot open lmdb dataset'", ",", "path", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "self", ".", "length", "=", "int", "(", "txn", ".", "get", "(", "'image-length'", ".", "encode", "(", "'utf-8'", ")", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "None", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "inplace", "=", "True", ")", "\n", "]", ")", "\n", "\n", "", "self", ".", "aug", "=", "aug", "\n", "if", "self", ".", "aug", "==", "True", ":", "\n", "            ", "self", ".", "aug_t", "=", "albumentations", ".", "Compose", "(", "[", "\n", "A", ".", "transforms", ".", "HorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "A", ".", "transforms", ".", "ShiftScaleRotate", "(", "shift_limit", "=", "0.1", ",", "\n", "scale_limit", "=", "0.2", ",", "\n", "rotate_limit", "=", "15", ",", "\n", "border_mode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "0", ",", "\n", "mask_value", "=", "0", ",", "\n", "p", "=", "0.5", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.dataset.MaskDataset._onehot_mask": [[73, 80], ["numpy.zeros", "range"], "methods", ["None"], ["", "", "def", "_onehot_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "label_size", "=", "self", ".", "label_size", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "label_size", ",", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "label_size", ")", ":", "\n", "            ", "labels", "[", "i", "]", "[", "mask", "==", "i", "]", "=", "1.0", "\n", "\n", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.dataset.MaskDataset.__len__": [[81, 83], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.dataset.MaskDataset.__getitem__": [[84, 105], ["dataset.MaskDataset.transform", "dataset.MaskDataset._onehot_mask", "dataset.MaskDataset.env.begin", "PIL.Image.open().convert", "PIL.Image.open().convert", "dataset.MaskDataset.aug_t", "PIL.Image.fromarray", "numpy.array", "img.resize.resize.resize", "mask.resize.resize.resize", "torch.tensor", "PIL.Image.open", "PIL.Image.open", "numpy.array", "numpy.array", "io.BytesIO", "io.BytesIO", "txn.get", "txn.get", "str().zfill", "str().zfill", "str", "str"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.dataset.MaskDataset._onehot_mask"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "BytesIO", "(", "txn", ".", "get", "(", "f'image-{str(idx).zfill(7)}'", ".", "encode", "(", "'utf-8'", ")", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "img", ".", "size", "[", "0", "]", "!=", "self", ".", "resolution", ":", "\n", "                ", "img", "=", "img", ".", "resize", "(", "(", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ",", "resample", "=", "Image", ".", "LANCZOS", ")", "\n", "\n", "", "mask", "=", "Image", ".", "open", "(", "BytesIO", "(", "txn", ".", "get", "(", "f'label-{str(idx).zfill(7)}'", ".", "encode", "(", "'utf-8'", ")", ")", ")", ")", ".", "convert", "(", "'L'", ")", "\n", "if", "mask", ".", "size", "[", "0", "]", "!=", "self", ".", "resolution", ":", "\n", "                ", "mask", "=", "mask", ".", "resize", "(", "(", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "\n", "", "", "if", "self", ".", "aug", ":", "\n", "            ", "augmented", "=", "self", ".", "aug_t", "(", "image", "=", "np", ".", "array", "(", "img", ")", ",", "mask", "=", "np", ".", "array", "(", "mask", ")", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "augmented", "[", "'image'", "]", ")", "\n", "mask", "=", "augmented", "[", "'mask'", "]", "\n", "\n", "", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "mask", "=", "self", ".", "_onehot_mask", "(", "np", ".", "array", "(", "mask", ")", ")", "\n", "mask", "=", "torch", ".", "tensor", "(", "mask", ",", "dtype", "=", "torch", ".", "float", ")", "*", "2", "-", "1", "\n", "\n", "return", "{", "\"image\"", ":", "img", ",", "\"mask\"", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.dataset.MultiResolutionDataset.__init__": [[108, 126], ["lmdb.open", "IOError", "dataset.MultiResolutionDataset.env.begin", "int", "txn.get().decode", "txn.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "transform", ",", "resolution", "=", "256", ")", ":", "\n", "        ", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "path", ",", "\n", "max_readers", "=", "32", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ",", "\n", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "raise", "IOError", "(", "'Cannot open lmdb dataset'", ",", "path", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "self", ".", "length", "=", "int", "(", "txn", ".", "get", "(", "'length'", ".", "encode", "(", "'utf-8'", ")", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "\n", "", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.dataset.MultiResolutionDataset.__len__": [[127, 129], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.dataset.MultiResolutionDataset.__getitem__": [[130, 140], ["io.BytesIO", "PIL.Image.open", "dataset.MultiResolutionDataset.transform", "dataset.MultiResolutionDataset.env.begin", "txn.get", "str().zfill", "str"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "key", "=", "f'{self.resolution}-{str(index).zfill(5)}'", ".", "encode", "(", "'utf-8'", ")", "\n", "img_bytes", "=", "txn", ".", "get", "(", "key", ")", "\n", "\n", "", "buffer", "=", "BytesIO", "(", "img_bytes", ")", "\n", "img", "=", "Image", ".", "open", "(", "buffer", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.WrapInception.__init__": [[30, 37], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ")", ":", "\n", "        ", "super", "(", "WrapInception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "mean", "=", "P", "(", "torch", ".", "tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "self", ".", "std", "=", "P", "(", "torch", ".", "tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.WrapInception.forward": [[38, 88], ["inception_utils.WrapInception.net.Conv2d_1a_3x3", "inception_utils.WrapInception.net.Conv2d_2a_3x3", "inception_utils.WrapInception.net.Conv2d_2b_3x3", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception_utils.WrapInception.net.Conv2d_3b_1x1", "inception_utils.WrapInception.net.Conv2d_4a_3x3", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception_utils.WrapInception.net.Mixed_5b", "inception_utils.WrapInception.net.Mixed_5c", "inception_utils.WrapInception.net.Mixed_5d", "inception_utils.WrapInception.net.Mixed_6a", "inception_utils.WrapInception.net.Mixed_6b", "inception_utils.WrapInception.net.Mixed_6c", "inception_utils.WrapInception.net.Mixed_6d", "inception_utils.WrapInception.net.Mixed_6e", "inception_utils.WrapInception.net.Mixed_7a", "inception_utils.WrapInception.net.Mixed_7b", "inception_utils.WrapInception.net.Mixed_7c", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "inception_utils.WrapInception.net.fc", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate.view", "torch.dropout().view", "torch.dropout().view", "torch.dropout().view", "torch.interpolate.size", "torch.interpolate.size", "torch.mean.size", "torch.mean.size", "torch.mean.size", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Normalize x", "\n", "        ", "x", "=", "(", "x", "+", "1.", ")", "/", "2.0", "\n", "x", "=", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "# Upsample if necessary", "\n", "if", "x", ".", "shape", "[", "2", "]", "!=", "299", "or", "x", ".", "shape", "[", "3", "]", "!=", "299", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "(", "299", ",", "299", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "# 299 x 299 x 3", "\n", "", "x", "=", "self", ".", "net", ".", "Conv2d_1a_3x3", "(", "x", ")", "\n", "# 149 x 149 x 32", "\n", "x", "=", "self", ".", "net", ".", "Conv2d_2a_3x3", "(", "x", ")", "\n", "# 147 x 147 x 32", "\n", "x", "=", "self", ".", "net", ".", "Conv2d_2b_3x3", "(", "x", ")", "\n", "# 147 x 147 x 64", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "# 73 x 73 x 64", "\n", "x", "=", "self", ".", "net", ".", "Conv2d_3b_1x1", "(", "x", ")", "\n", "# 73 x 73 x 80", "\n", "x", "=", "self", ".", "net", ".", "Conv2d_4a_3x3", "(", "x", ")", "\n", "# 71 x 71 x 192", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "# 35 x 35 x 192", "\n", "x", "=", "self", ".", "net", ".", "Mixed_5b", "(", "x", ")", "\n", "# 35 x 35 x 256", "\n", "x", "=", "self", ".", "net", ".", "Mixed_5c", "(", "x", ")", "\n", "# 35 x 35 x 288", "\n", "x", "=", "self", ".", "net", ".", "Mixed_5d", "(", "x", ")", "\n", "# 35 x 35 x 288", "\n", "x", "=", "self", ".", "net", ".", "Mixed_6a", "(", "x", ")", "\n", "# 17 x 17 x 768", "\n", "x", "=", "self", ".", "net", ".", "Mixed_6b", "(", "x", ")", "\n", "# 17 x 17 x 768", "\n", "x", "=", "self", ".", "net", ".", "Mixed_6c", "(", "x", ")", "\n", "# 17 x 17 x 768", "\n", "x", "=", "self", ".", "net", ".", "Mixed_6d", "(", "x", ")", "\n", "# 17 x 17 x 768", "\n", "x", "=", "self", ".", "net", ".", "Mixed_6e", "(", "x", ")", "\n", "# 17 x 17 x 768", "\n", "# 17 x 17 x 768", "\n", "x", "=", "self", ".", "net", ".", "Mixed_7a", "(", "x", ")", "\n", "# 8 x 8 x 1280", "\n", "x", "=", "self", ".", "net", ".", "Mixed_7b", "(", "x", ")", "\n", "# 8 x 8 x 2048", "\n", "x", "=", "self", ".", "net", ".", "Mixed_7c", "(", "x", ")", "\n", "# 8 x 8 x 2048", "\n", "pool", "=", "torch", ".", "mean", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", ",", "2", ")", "\n", "# 1 x 1 x 2048", "\n", "logits", "=", "self", ".", "net", ".", "fc", "(", "F", ".", "dropout", "(", "pool", ",", "training", "=", "False", ")", ".", "view", "(", "pool", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "# 1000 (num_classes)", "\n", "return", "pool", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.torch_cov": [[92, 124], ["torch.mean", "torch.mean", "torch.mean", "m.t.t", "m.t.dim", "ValueError", "m.t.dim", "m.t.view", "m.t.t", "m.t.matmul().squeeze", "m.t.size", "m.t.size", "m.t.matmul"], "function", ["None"], ["", "", "def", "torch_cov", "(", "m", ",", "rowvar", "=", "False", ")", ":", "\n", "    ", "'''Estimate a covariance matrix given data.\n\n    Covariance indicates the level to which two variables vary together.\n    If we examine N-dimensional samples, `X = [x_1, x_2, ... x_N]^T`,\n    then the covariance matrix element `C_{ij}` is the covariance of\n    `x_i` and `x_j`. The element `C_{ii}` is the variance of `x_i`.\n\n    Args:\n        m: A 1-D or 2-D array containing multiple variables and observations.\n            Each row of `m` represents a variable, and each column a single\n            observation of all those variables.\n        rowvar: If `rowvar` is True, then each row represents a\n            variable, with observations in the columns. Otherwise, the\n            relationship is transposed: each column represents a variable,\n            while the rows contain observations.\n\n    Returns:\n        The covariance matrix of the variables.\n    '''", "\n", "if", "m", ".", "dim", "(", ")", ">", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'m has more than 2 dimensions'", ")", "\n", "", "if", "m", ".", "dim", "(", ")", "<", "2", ":", "\n", "        ", "m", "=", "m", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "if", "not", "rowvar", "and", "m", ".", "size", "(", "0", ")", "!=", "1", ":", "\n", "        ", "m", "=", "m", ".", "t", "(", ")", "\n", "# m = m.type(torch.double)  # uncomment this line if desired", "\n", "", "fact", "=", "1.0", "/", "(", "m", ".", "size", "(", "1", ")", "-", "1", ")", "\n", "m", "-=", "torch", ".", "mean", "(", "m", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "mt", "=", "m", ".", "t", "(", ")", "# if complex: mt = m.t().conj()", "\n", "\n", "return", "fact", "*", "m", ".", "matmul", "(", "mt", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.sqrt_newton_schulz": [[128, 144], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "A.mul().sum().sum().sqrt", "A.div", "torch.eye().view().repeat().type", "torch.eye().view().repeat().type", "torch.eye().view().repeat().type", "torch.eye().view().repeat().type", "torch.eye().view().repeat().type", "torch.eye().view().repeat().type", "range", "A.type", "A.mul().sum().sum().sqrt.view().expand_as", "Y.bmm.bmm", "T.bmm", "torch.sqrt().view().expand_as", "torch.sqrt().view().expand_as", "torch.sqrt().view().expand_as", "A.mul().sum().sum", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "A.mul().sum().sum().sqrt.view", "T.bmm.bmm", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "A.mul().sum", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "A.mul", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "function", ["None"], ["", "def", "sqrt_newton_schulz", "(", "A", ",", "numIters", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "dtype", "is", "None", ":", "\n", "            ", "dtype", "=", "A", ".", "type", "(", ")", "\n", "", "batchSize", "=", "A", ".", "shape", "[", "0", "]", "\n", "dim", "=", "A", ".", "shape", "[", "1", "]", "\n", "normA", "=", "A", ".", "mul", "(", "A", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "sqrt", "(", ")", "\n", "Y", "=", "A", ".", "div", "(", "normA", ".", "view", "(", "batchSize", ",", "1", ",", "1", ")", ".", "expand_as", "(", "A", ")", ")", "\n", "I", "=", "torch", ".", "eye", "(", "dim", ",", "dim", ")", ".", "view", "(", "1", ",", "dim", ",", "dim", ")", ".", "repeat", "(", "batchSize", ",", "1", ",", "1", ")", ".", "type", "(", "dtype", ")", "\n", "Z", "=", "torch", ".", "eye", "(", "dim", ",", "dim", ")", ".", "view", "(", "1", ",", "dim", ",", "dim", ")", ".", "repeat", "(", "batchSize", ",", "1", ",", "1", ")", ".", "type", "(", "dtype", ")", "\n", "for", "i", "in", "range", "(", "numIters", ")", ":", "\n", "            ", "T", "=", "0.5", "*", "(", "3.0", "*", "I", "-", "Z", ".", "bmm", "(", "Y", ")", ")", "\n", "Y", "=", "Y", ".", "bmm", "(", "T", ")", "\n", "Z", "=", "T", ".", "bmm", "(", "Z", ")", "\n", "", "sA", "=", "Y", "*", "torch", ".", "sqrt", "(", "normA", ")", ".", "view", "(", "batchSize", ",", "1", ",", "1", ")", ".", "expand_as", "(", "A", ")", "\n", "", "return", "sA", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.numpy_calculate_frechet_distance": [[148, 202], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "print", "numpy.eye", "print", "numpy.allclose", "numpy.max", "ValueError", "numpy.abs", "numpy.trace", "numpy.isfinite", "numpy.diagonal", "diff.dot", "numpy.trace"], "function", ["None"], ["", "def", "numpy_calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    Taken from https://github.com/bioinf-jku/TTUR\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n    Stable version by Dougal J. Sutherland.\n    Params:\n    -- mu1   : Numpy array containing the activations of a layer of the\n                inception net (like returned by the function 'get_predictions')\n                for generated samples.\n    -- mu2   : The sample mean over activations, precalculated on an \n                representive data set.\n    -- sigma1: The covariance matrix over activations for generated samples.\n    -- sigma2: The covariance matrix over activations, precalculated on an \n                representive data set.\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# Product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "(", "'fid calculation produces singular product; '", "\n", "'adding %s to diagonal of cov estimates'", ")", "%", "eps", "\n", "print", "(", "msg", ")", "\n", "", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# Numerical error might give slight imaginary component", "\n", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "print", "(", "'wat'", ")", "\n", "", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "        ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "'Imaginary component {}'", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "out", "=", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.torch_calculate_frechet_distance": [[204, 236], ["sqrt_newton_schulz().squeeze", "inception_utils.sqrt_newton_schulz", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "torch.trace", "sigma1.mm().unsqueeze", "diff.dot", "torch.trace", "torch.trace", "torch.trace", "sigma1.mm"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.sqrt_newton_schulz"], ["", "def", "torch_calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Pytorch implementation of the Frechet Distance.\n    Taken from https://github.com/bioinf-jku/TTUR\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n    Stable version by Dougal J. Sutherland.\n    Params:\n    -- mu1   : Numpy array containing the activations of a layer of the\n                inception net (like returned by the function 'get_predictions')\n                for generated samples.\n    -- mu2   : The sample mean over activations, precalculated on an \n                representive data set.\n    -- sigma1: The covariance matrix over activations for generated samples.\n    -- sigma2: The covariance matrix over activations, precalculated on an \n                representive data set.\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "# Run 50 itrs of newton-schulz to get the matrix sqrt of sigma1 dot sigma2", "\n", "covmean", "=", "sqrt_newton_schulz", "(", "sigma1", ".", "mm", "(", "sigma2", ")", ".", "unsqueeze", "(", "0", ")", ",", "50", ")", ".", "squeeze", "(", ")", "\n", "out", "=", "(", "diff", ".", "dot", "(", "diff", ")", "+", "torch", ".", "trace", "(", "sigma1", ")", "+", "torch", ".", "trace", "(", "sigma2", ")", "\n", "-", "2", "*", "torch", ".", "trace", "(", "covmean", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.calculate_inception_score": [[239, 247], ["range", "numpy.mean", "scores.append", "numpy.mean", "numpy.std", "numpy.sum", "numpy.exp", "numpy.log", "numpy.log", "numpy.expand_dims", "numpy.mean"], "function", ["None"], ["", "def", "calculate_inception_score", "(", "pred", ",", "num_splits", "=", "10", ")", ":", "\n", "    ", "scores", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "num_splits", ")", ":", "\n", "        ", "pred_chunk", "=", "pred", "[", "index", "*", "(", "pred", ".", "shape", "[", "0", "]", "//", "num_splits", ")", ":", "(", "index", "+", "1", ")", "*", "(", "pred", ".", "shape", "[", "0", "]", "//", "num_splits", ")", ",", ":", "]", "\n", "kl_inception", "=", "pred_chunk", "*", "(", "np", ".", "log", "(", "pred_chunk", ")", "-", "np", ".", "log", "(", "np", ".", "expand_dims", "(", "np", ".", "mean", "(", "pred_chunk", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl_inception", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "kl_inception", ",", "1", ")", ")", "\n", "scores", ".", "append", "(", "np", ".", "exp", "(", "kl_inception", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "std", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.accumulate_inception_activations": [[252, 268], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sample", "net", "images.expand.expand", "images.expand.float", "torch.softmax", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Generator.sample"], ["", "def", "accumulate_inception_activations", "(", "sample", ",", "net", ",", "num_inception_images", "=", "50000", ")", ":", "\n", "    ", "pool", ",", "logits", "=", "[", "]", ",", "[", "]", "\n", "while", "(", "torch", ".", "cat", "(", "logits", ",", "0", ")", ".", "shape", "[", "0", "]", "if", "len", "(", "logits", ")", "else", "0", ")", "<", "num_inception_images", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "images", "=", "sample", "(", ")", "\n", "if", "images", ".", "shape", "[", "1", "]", "!=", "3", ":", "\n", "                ", "images", "=", "images", ".", "expand", "(", "-", "1", ",", "3", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "", "pool_val", ",", "logits_val", "=", "net", "(", "images", ".", "float", "(", ")", ")", "\n", "pool", "+=", "[", "pool_val", "]", "\n", "logits", "+=", "[", "F", ".", "softmax", "(", "logits_val", ",", "1", ")", "]", "\n", "count", "=", "torch", ".", "cat", "(", "logits", ",", "0", ")", ".", "shape", "[", "0", "]", "\n", "if", "count", "%", "2000", "==", "0", ":", "\n", "                ", "print", "(", "f\"{count}/{num_inception_images}\"", ")", "\n", "\n", "", "", "", "return", "torch", ".", "cat", "(", "pool", ",", "0", ")", ",", "torch", ".", "cat", "(", "logits", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.load_inception_net": [[271, 278], ["torchvision.models.inception.inception_v3", "WrapInception().cuda", "print", "torch.DataParallel", "inception_utils.WrapInception", "nn.DataParallel.eval"], "function", ["None"], ["", "def", "load_inception_net", "(", "parallel", "=", "False", ")", ":", "\n", "    ", "inception_model", "=", "inception_v3", "(", "pretrained", "=", "True", ",", "transform_input", "=", "False", ")", "\n", "inception_model", "=", "WrapInception", "(", "inception_model", ".", "eval", "(", ")", ")", ".", "cuda", "(", ")", "\n", "if", "parallel", ":", "\n", "        ", "print", "(", "'Parallelizing Inception module...'", ")", "\n", "inception_model", "=", "nn", ".", "DataParallel", "(", "inception_model", ")", "\n", "", "return", "inception_model", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.prepare_inception_metrics": [[284, 325], ["inception_utils.load_inception_net", "open", "pickle.load", "print", "inception_utils.accumulate_inception_activations", "print", "inception_utils.calculate_inception_score", "print", "pdb.set_trace", "inception_utils.torch_calculate_frechet_distance", "float", "inception_utils.numpy_calculate_frechet_distance", "logits.cpu().numpy", "print", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "numpy_calculate_frechet_distance.cpu().numpy", "torch.mean", "torch.mean", "torch.mean", "inception_utils.torch_cov", "numpy.mean", "numpy.cov", "logits.cpu", "pool.cpu().numpy", "pool.cpu().numpy", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "numpy_calculate_frechet_distance.cpu", "pool.cpu", "pool.cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.load_inception_net", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.accumulate_inception_activations", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.calculate_inception_score", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.torch_calculate_frechet_distance", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.numpy_calculate_frechet_distance", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.torch_cov"], ["", "def", "prepare_inception_metrics", "(", "dataset", ",", "parallel", ",", "no_fid", "=", "False", ")", ":", "\n", "# Load metrics; this is intentionally not in a try-except loop so that", "\n", "# the script will crash here if it cannot find the Inception moments.", "\n", "# By default, remove the \"hdf5\" from dataloader", "\n", "    ", "with", "open", "(", "dataset", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "embeds", "=", "pickle", ".", "load", "(", "f", ")", "\n", "data_mu", "=", "embeds", "[", "'mean'", "]", "\n", "data_sigma", "=", "embeds", "[", "'cov'", "]", "\n", "\n", "# Load network", "\n", "", "net", "=", "load_inception_net", "(", "parallel", ")", "\n", "def", "get_inception_metrics", "(", "sample", ",", "num_inception_images", ",", "num_splits", "=", "10", ",", "\n", "prints", "=", "True", ",", "use_torch", "=", "True", ")", ":", "\n", "        ", "if", "prints", ":", "\n", "            ", "print", "(", "'Gathering activations...'", ")", "\n", "pool", ",", "logits", "=", "accumulate_inception_activations", "(", "sample", ",", "net", ",", "num_inception_images", ")", "\n", "", "if", "prints", ":", "\n", "            ", "print", "(", "'Calculating Inception Score...'", ")", "\n", "IS_mean", ",", "IS_std", "=", "calculate_inception_score", "(", "logits", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "num_splits", ")", "\n", "", "if", "no_fid", ":", "\n", "            ", "FID", "=", "9999.0", "\n", "", "else", ":", "\n", "            ", "if", "prints", ":", "\n", "                ", "print", "(", "'Calculating means and covariances...'", ")", "\n", "", "if", "use_torch", ":", "\n", "                ", "mu", ",", "sigma", "=", "torch", ".", "mean", "(", "pool", ",", "0", ")", ",", "torch_cov", "(", "pool", ",", "rowvar", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "mu", ",", "sigma", "=", "np", ".", "mean", "(", "pool", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "0", ")", ",", "np", ".", "cov", "(", "pool", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "rowvar", "=", "False", ")", "\n", "", "", "if", "prints", ":", "\n", "            ", "print", "(", "'Covariances calculated, getting FID...'", ")", "\n", "", "if", "use_torch", ":", "\n", "            ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "FID", "=", "torch_calculate_frechet_distance", "(", "mu", ",", "sigma", ",", "torch", ".", "tensor", "(", "data_mu", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "torch", ".", "tensor", "(", "data_sigma", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "\n", "FID", "=", "float", "(", "FID", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "FID", "=", "numpy_calculate_frechet_distance", "(", "mu", ",", "sigma", ",", "data_mu", ",", "data_sigma", ")", "\n", "# Delete mu, sigma, pool, logits, and labels, just in case", "\n", "", "del", "mu", ",", "sigma", ",", "pool", ",", "logits", "\n", "return", "IS_mean", ",", "IS_std", ",", "FID", "\n", "\n", "", "return", "get_inception_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.sample_gema": [[326, 337], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "g_ema.eval", "torch.randn", "torch.randn", "torch.randn", "g_ema"], "function", ["None"], ["", "def", "sample_gema", "(", "g_ema", ",", "device", ",", "truncation", ",", "mean_latent", ",", "batch_size", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "g_ema", ".", "eval", "(", ")", "\n", "\n", "sample_z", "=", "torch", ".", "randn", "(", "batch_size", ",", "512", ",", "device", "=", "device", ")", "\n", "\n", "samples", "=", "g_ema", "(", "[", "sample_z", "]", ",", "truncation", "=", "truncation", ",", "truncation_latent", "=", "mean_latent", ")", "\n", "\n", "sample", "=", "samples", "[", "0", "]", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.inception_utils.sample_gema_extrapolate": [[339, 350], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "g_ema.eval", "torch.randn", "torch.randn", "torch.randn", "g_ema"], "function", ["None"], ["", "def", "sample_gema_extrapolate", "(", "g_ema", ",", "device", ",", "truncation", ",", "mean_latent", ",", "batch_size", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "g_ema", ".", "eval", "(", ")", "\n", "\n", "sample_z", "=", "torch", ".", "randn", "(", "batch_size", ",", "g_ema", ".", "n_latent", ",", "512", ",", "device", "=", "device", ")", "\n", "\n", "samples", "=", "g_ema", "(", "[", "sample_z", "]", ",", "truncation", "=", "truncation", ",", "truncation_latent", "=", "mean_latent", ")", "\n", "\n", "sample", "=", "samples", "[", "0", "]", "\n", "\n", "", "return", "sample", "", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.Ranger.__init__": [[49, 100], ["dict", "torch.optim.optimizer.Optimizer.__init__", "print", "ValueError", "ValueError", "ValueError", "ValueError", "print", "range", "print"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "# lr", "\n", "alpha", "=", "0.5", ",", "k", "=", "6", ",", "N_sma_threshhold", "=", "5", ",", "# Ranger options", "\n", "betas", "=", "(", ".95", ",", "0.999", ")", ",", "eps", "=", "1e-5", ",", "weight_decay", "=", "0", ",", "# Adam options", "\n", "# Gradient centralization on or off, applied to conv layers only or conv + fc layers", "\n", "use_gc", "=", "True", ",", "gc_conv_only", "=", "False", ",", "gc_loc", "=", "True", "\n", ")", ":", "\n", "\n", "# parameter checks", "\n", "        ", "if", "not", "0.0", "<=", "alpha", "<=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid slow update rate: {alpha}'", ")", "\n", "", "if", "not", "1", "<=", "k", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid lookahead steps: {k}'", ")", "\n", "", "if", "not", "lr", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid Learning Rate: {lr}'", ")", "\n", "", "if", "not", "eps", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid eps: {eps}'", ")", "\n", "\n", "# parameter comments:", "\n", "# beta1 (momentum) of .95 seems to work better than .90...", "\n", "# N_sma_threshold of 5 seems better in testing than 4.", "\n", "# In both cases, worth testing on your dataloader (.90 vs .95, 4 vs 5) to make sure which works best for you.", "\n", "\n", "# prep defaults and init torch.optim base", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "alpha", "=", "alpha", ",", "k", "=", "k", ",", "step_counter", "=", "0", ",", "betas", "=", "betas", ",", "\n", "N_sma_threshhold", "=", "N_sma_threshhold", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "# adjustable threshold", "\n", "self", ".", "N_sma_threshhold", "=", "N_sma_threshhold", "\n", "\n", "# look ahead params", "\n", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "k", "=", "k", "\n", "\n", "# radam buffer for state", "\n", "self", ".", "radam_buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "ind", "in", "range", "(", "10", ")", "]", "\n", "\n", "# gc on or off", "\n", "self", ".", "gc_loc", "=", "gc_loc", "\n", "self", ".", "use_gc", "=", "use_gc", "\n", "self", ".", "gc_conv_only", "=", "gc_conv_only", "\n", "# level of gradient centralization", "\n", "#self.gc_gradient_threshold = 3 if gc_conv_only else 1", "\n", "\n", "print", "(", "\n", "f\"Ranger optimizer loaded. \\nGradient Centralization usage = {self.use_gc}\"", ")", "\n", "if", "(", "self", ".", "use_gc", "and", "self", ".", "gc_conv_only", "==", "False", ")", ":", "\n", "            ", "print", "(", "f\"GC applied to both conv and fc layers\"", ")", "\n", "", "elif", "(", "self", ".", "use_gc", "and", "self", ".", "gc_conv_only", "==", "True", ")", ":", "\n", "            ", "print", "(", "f\"GC applied to conv layers only\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.Ranger.__setstate__": [[101, 104], ["print", "super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.Ranger.__setstate__"], ["", "", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "print", "(", "\"set state called\"", ")", "\n", "super", "(", "Ranger", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.Ranger.step": [[105, 213], ["p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "p.data.float.add_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.empty_like", "state[].copy_", "state[].type_as", "state[].type_as", "ranger.centralized_gradient", "exp_avg_sq.sqrt().add_", "centralized_gradient.add_", "ranger.centralized_gradient", "slow_p.add_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "int", "math.sqrt", "exp_avg_sq.sqrt"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.centralized_gradient", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.centralized_gradient"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "# note - below is commented out b/c I have other work that passes back the loss as a float, and thus not a callable closure.", "\n", "# Uncomment if you need to use the actual closure...", "\n", "\n", "# if closure is not None:", "\n", "#loss = closure()", "\n", "\n", "# Evaluate averages and grad, update param tensors", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'Ranger optimizer does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "# get state dict for this param", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "# if first time to run...init dictionary with our desired entries", "\n", "# if self.first_run_check==0:", "\n", "# self.first_run_check=1", "\n", "#print(\"Initializing slow buffer...should not see this at load from saved model!\")", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "\n", "# look ahead weight storage now in state dict", "\n", "state", "[", "'slow_buffer'", "]", "=", "torch", ".", "empty_like", "(", "p", ".", "data", ")", "\n", "state", "[", "'slow_buffer'", "]", ".", "copy_", "(", "p", ".", "data", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "\n", "p_data_fp32", ")", "\n", "\n", "# begin computations", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "# GC operation for Conv layers and FC layers", "\n", "# if grad.dim() > self.gc_gradient_threshold:", "\n", "#    grad.add_(-grad.mean(dim=tuple(range(1, grad.dim())), keepdim=True))", "\n", "if", "self", ".", "gc_loc", ":", "\n", "                    ", "grad", "=", "centralized_gradient", "(", "grad", ",", "use_gc", "=", "self", ".", "use_gc", ",", "gc_conv_only", "=", "self", ".", "gc_conv_only", ")", "\n", "\n", "", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# compute variance mov avg", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "grad", ",", "grad", ",", "value", "=", "1", "-", "beta2", ")", "\n", "\n", "# compute mean moving avg", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "grad", ",", "alpha", "=", "1", "-", "beta1", ")", "\n", "\n", "buffered", "=", "self", ".", "radam_buffer", "[", "int", "(", "state", "[", "'step'", "]", "%", "10", ")", "]", "\n", "\n", "if", "state", "[", "'step'", "]", "==", "buffered", "[", "0", "]", ":", "\n", "                    ", "N_sma", ",", "step_size", "=", "buffered", "[", "1", "]", ",", "buffered", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "buffered", "[", "0", "]", "=", "state", "[", "'step'", "]", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "buffered", "[", "1", "]", "=", "N_sma", "\n", "if", "N_sma", ">", "self", ".", "N_sma_threshhold", ":", "\n", "                        ", "step_size", "=", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "\n", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "1.0", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "buffered", "[", "2", "]", "=", "step_size", "\n", "\n", "# if group['weight_decay'] != 0:", "\n", "#    p_data_fp32.add_(-group['weight_decay']", "\n", "#                     * group['lr'], p_data_fp32)", "\n", "\n", "# apply lr", "\n", "", "if", "N_sma", ">", "self", ".", "N_sma_threshhold", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "G_grad", "=", "exp_avg", "/", "denom", "\n", "", "else", ":", "\n", "                    ", "G_grad", "=", "exp_avg", "\n", "\n", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "G_grad", ".", "add_", "(", "p_data_fp32", ",", "alpha", "=", "group", "[", "'weight_decay'", "]", ")", "\n", "# GC operation", "\n", "", "if", "self", ".", "gc_loc", "==", "False", ":", "\n", "                    ", "G_grad", "=", "centralized_gradient", "(", "G_grad", ",", "use_gc", "=", "self", ".", "use_gc", ",", "gc_conv_only", "=", "self", ".", "gc_conv_only", ")", "\n", "\n", "", "p_data_fp32", ".", "add_", "(", "G_grad", ",", "alpha", "=", "-", "step_size", "*", "group", "[", "'lr'", "]", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "# integrated look ahead...", "\n", "# we do it at the param level instead of group level", "\n", "if", "state", "[", "'step'", "]", "%", "group", "[", "'k'", "]", "==", "0", ":", "\n", "# get access to slow param tensor", "\n", "                    ", "slow_p", "=", "state", "[", "'slow_buffer'", "]", "\n", "# (fast weights - slow weights) * alpha", "\n", "slow_p", ".", "add_", "(", "p", ".", "data", "-", "slow_p", ",", "alpha", "=", "self", ".", "alpha", ")", "\n", "# copy interpolated weights to RAdam param tensor", "\n", "p", ".", "data", ".", "copy_", "(", "slow_p", ")", "\n", "\n", "", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.centralized_gradient": [[35, 45], ["len", "x.add_", "len", "x.add_", "list", "list", "x.size", "x.mean", "x.size", "x.mean", "tuple", "tuple", "range", "range", "len", "len", "list", "list", "x.size", "x.size"], "function", ["None"], ["def", "centralized_gradient", "(", "x", ",", "use_gc", "=", "True", ",", "gc_conv_only", "=", "False", ")", ":", "\n", "    ", "'''credit - https://github.com/Yonghongwei/Gradient-Centralization '''", "\n", "if", "use_gc", ":", "\n", "        ", "if", "gc_conv_only", ":", "\n", "            ", "if", "len", "(", "list", "(", "x", ".", "size", "(", ")", ")", ")", ">", "3", ":", "\n", "                ", "x", ".", "add_", "(", "-", "x", ".", "mean", "(", "dim", "=", "tuple", "(", "range", "(", "1", ",", "len", "(", "list", "(", "x", ".", "size", "(", ")", ")", ")", ")", ")", ",", "keepdim", "=", "True", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "len", "(", "list", "(", "x", ".", "size", "(", ")", ")", ")", ">", "1", ":", "\n", "                ", "x", ".", "add_", "(", "-", "x", ".", "mean", "(", "dim", "=", "tuple", "(", "range", "(", "1", ",", "len", "(", "list", "(", "x", ".", "size", "(", ")", ")", ")", ")", ")", ",", "keepdim", "=", "True", ")", ")", "\n", "", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.generate_components.visualize_alpha": [[41, 47], ["tensor.cpu().permute().numpy.cpu().permute().numpy", "matplotlib.matshow", "matplotlib.gca().set_axis_off", "matplotlib.gcf().set_dpi", "matplotlib.savefig", "tensor.cpu().permute().numpy.cpu().permute", "matplotlib.gca", "matplotlib.gcf", "tensor.cpu().permute().numpy.cpu"], "function", ["None"], ["def", "visualize_alpha", "(", "output_name", ",", "tensor", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "cpu", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "fig", "=", "plt", ".", "matshow", "(", "tensor", ",", "cmap", "=", "\"inferno\"", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_axis_off", "(", ")", "\n", "plt", ".", "gcf", "(", ")", ".", "set_dpi", "(", "100", ")", "\n", "plt", ".", "savefig", "(", "output_name", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.utils.generate_img": [[42, 50], ["range", "torch.cat", "utils.tensor2image", "styles.size", "model", "torch.cat.append"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.utils.tensor2image"], ["def", "generate_img", "(", "model", ",", "styles", ",", "mean_latent", "=", "None", ",", "truncation", "=", "1.0", ",", "batch_size", "=", "16", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "for", "head", "in", "range", "(", "0", ",", "styles", ".", "size", "(", "0", ")", ",", "batch_size", ")", ":", "\n", "        ", "images_", ",", "_", "=", "model", "(", "[", "styles", "[", "head", ":", "head", "+", "batch_size", "]", "]", ",", "input_is_latent", "=", "True", ",", "\n", "truncation", "=", "truncation", ",", "truncation_latent", "=", "mean_latent", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "images", ".", "append", "(", "images_", ")", "\n", "", "images", "=", "torch", ".", "cat", "(", "images", ",", "0", ")", "\n", "return", "tensor2image", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.utils.generate": [[51, 60], ["range", "styles.size", "model", "images.append", "segs.append", "torch.cat", "torch.cat", "utils.tensor2image", "utils.tensor2seg", "images_.detach().cpu", "segs_.detach().cpu", "images_.detach", "segs_.detach"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.utils.tensor2image", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.utils.tensor2seg"], ["", "def", "generate", "(", "model", ",", "styles", ",", "mean_latent", "=", "None", ",", "truncation", "=", "1.0", ",", "batch_size", "=", "16", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "images", ",", "segs", "=", "[", "]", ",", "[", "]", "\n", "for", "head", "in", "range", "(", "0", ",", "styles", ".", "size", "(", "0", ")", ",", "batch_size", ")", ":", "\n", "        ", "images_", ",", "segs_", "=", "model", "(", "[", "styles", "[", "head", ":", "head", "+", "batch_size", "]", "]", ",", "input_is_latent", "=", "True", ",", "\n", "truncation", "=", "truncation", ",", "truncation_latent", "=", "mean_latent", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "images", ".", "append", "(", "images_", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "segs", ".", "append", "(", "segs_", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "", "images", ",", "segs", "=", "torch", ".", "cat", "(", "images", ",", "0", ")", ",", "torch", ".", "cat", "(", "segs", ",", "0", ")", "\n", "return", "tensor2image", "(", "images", ")", ",", "tensor2seg", "(", "segs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.utils.tensor2image": [[61, 66], ["tensor.cpu().clamp().permute().numpy", "images.astype.astype", "tensor.cpu().clamp().permute", "tensor.cpu().clamp", "tensor.cpu"], "function", ["None"], ["", "def", "tensor2image", "(", "tensor", ")", ":", "\n", "    ", "images", "=", "tensor", ".", "cpu", "(", ")", ".", "clamp", "(", "-", "1", ",", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "numpy", "(", ")", "\n", "images", "=", "images", "*", "127.5", "+", "127.5", "\n", "images", "=", "images", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.utils.tensor2seg": [[67, 74], ["torch.argmax().detach().cpu().numpy.size", "torch.argmax().detach().cpu().numpy", "numpy.zeros", "range", "torch.argmax().detach().cpu", "torch.argmax().detach", "torch.argmax"], "function", ["None"], ["", "def", "tensor2seg", "(", "sample_seg", ")", ":", "\n", "    ", "seg_dim", "=", "sample_seg", ".", "size", "(", "1", ")", "\n", "sample_seg", "=", "torch", ".", "argmax", "(", "sample_seg", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sample_mask", "=", "np", ".", "zeros", "(", "(", "sample_seg", ".", "shape", "[", "0", "]", ",", "sample_seg", ".", "shape", "[", "1", "]", ",", "sample_seg", ".", "shape", "[", "2", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "key", "in", "range", "(", "seg_dim", ")", ":", "\n", "        ", "sample_mask", "[", "sample_seg", "==", "key", "]", "=", "color_map", "[", "key", "]", "\n", "", "return", "sample_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.utils.cubic_spline_interpolate": [[75, 86], ["styles.detach().cpu().numpy.detach().cpu().numpy", "numpy.linspace", "styles.detach().cpu().numpy.reshape", "scipy.interpolate.CubicSpline", "numpy.linspace", "scipy.interpolate.CubicSpline.", "results.reshape.reshape", "torch.tensor().float", "styles.detach().cpu().numpy.detach().cpu", "torch.tensor", "styles.detach().cpu().numpy.detach"], "function", ["None"], ["", "def", "cubic_spline_interpolate", "(", "styles", ",", "step", ")", ":", "\n", "    ", "device", "=", "styles", ".", "device", "\n", "styles", "=", "styles", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "N", ",", "K", ",", "D", "=", "styles", ".", "shape", "\n", "x", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "N", ")", "\n", "y", "=", "styles", ".", "reshape", "(", "N", ",", "K", "*", "D", ")", "\n", "spl", "=", "CubicSpline", "(", "x", ",", "y", ")", "\n", "x_out", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "step", ")", "\n", "results", "=", "spl", "(", "x_out", ")", "# Step x KD", "\n", "results", "=", "results", ".", "reshape", "(", "step", ",", "K", ",", "D", ")", "\n", "return", "torch", ".", "tensor", "(", "results", ",", "device", "=", "device", ")", ".", "float", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.invert.get_lr": [[37, 43], ["min", "min", "math.cos"], "function", ["None"], ["def", "get_lr", "(", "t", ",", "initial_lr", ",", "rampdown", "=", "0.25", ",", "rampup", "=", "0.05", ")", ":", "\n", "    ", "lr_ramp", "=", "min", "(", "1", ",", "(", "1", "-", "t", ")", "/", "rampdown", ")", "\n", "lr_ramp", "=", "0.5", "-", "0.5", "*", "math", ".", "cos", "(", "lr_ramp", "*", "math", ".", "pi", ")", "\n", "lr_ramp", "=", "lr_ramp", "*", "min", "(", "1", ",", "t", "/", "rampup", ")", "\n", "\n", "return", "initial_lr", "*", "lr_ramp", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.invert.get_transformation": [[44, 50], ["torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "get_transformation", "(", "args", ")", ":", "\n", "    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.invert.calc_lpips_loss": [[51, 56], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "percept().mean", "percept"], "function", ["None"], ["", "def", "calc_lpips_loss", "(", "im1", ",", "im2", ")", ":", "\n", "    ", "img_gen_resize", "=", "F", ".", "adaptive_avg_pool2d", "(", "im1", ",", "(", "256", ",", "256", ")", ")", "\n", "target_img_tensor_resize", "=", "F", ".", "adaptive_avg_pool2d", "(", "im2", ",", "(", "256", ",", "256", ")", ")", "\n", "p_loss", "=", "percept", "(", "img_gen_resize", ",", "target_img_tensor_resize", ")", ".", "mean", "(", ")", "\n", "return", "p_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.invert.optimize_latent": [[57, 109], ["g_ema.render_net.get_noise", "tqdm.tqdm", "torch.no_grad", "torch.no_grad", "torch.randn", "torch.randn", "g_ema.style().mean", "g_ema.style().mean.detach().clone().unsqueeze().repeat", "torch.optim.Adam", "torch.optim.Adam", "latent_in.unsqueeze().repeat.detach().clone", "range", "invert.get_lr", "g_ema", "invert.calc_lpips_loss", "torch.mse_loss", "torch.mean", "torch.mean", "tqdm.tqdm.set_description", "optim.Adam.zero_grad", "loss.backward", "optim.Adam.step", "latent_path.append", "latent_in.unsqueeze().repeat.unsqueeze().repeat", "torch.stack", "torch.stack", "torch.mse_loss", "torch.mse_loss", "latent_in.unsqueeze().repeat.detach().clone", "g_ema.style", "g_ema.style().mean.detach().clone().unsqueeze", "latent_in.unsqueeze().repeat.detach", "float", "g_ema.style().mean.unsqueeze().repeat", "g_ema.style().mean.repeat", "latent_in.unsqueeze().repeat.unsqueeze", "noise.pow().mean", "latent_in.unsqueeze().repeat.size", "latent_in.unsqueeze().repeat.size", "calc_lpips_loss.item", "torch.mean.item", "F.mse_loss.item", "F.mse_loss.item", "latent_in.unsqueeze().repeat.detach", "g_ema.style().mean.detach().clone", "g_ema.style().mean.unsqueeze", "noise.pow", "g_ema.style().mean.detach"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.RenderNet.get_noise", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.invert.get_lr", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.invert.calc_lpips_loss", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.Ranger.step"], ["", "def", "optimize_latent", "(", "args", ",", "g_ema", ",", "target_img_tensor", ")", ":", "\n", "\n", "    ", "noises", "=", "g_ema", ".", "render_net", ".", "get_noise", "(", "noise", "=", "None", ",", "randomize_noise", "=", "False", ")", "\n", "for", "noise", "in", "noises", ":", "\n", "        ", "noise", ".", "requires_grad", "=", "True", "\n", "\n", "# initialization", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "noise_sample", "=", "torch", ".", "randn", "(", "10000", ",", "512", ",", "device", "=", "device", ")", "\n", "latent_mean", "=", "g_ema", ".", "style", "(", "noise_sample", ")", ".", "mean", "(", "0", ")", "\n", "latent_in", "=", "latent_mean", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "args", ".", "batch_size", ",", "1", ")", "\n", "if", "args", ".", "w_plus", ":", "\n", "            ", "latent_in", "=", "latent_in", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "g_ema", ".", "n_latent", ",", "1", ")", "\n", "", "", "latent_in", ".", "requires_grad", "=", "True", "\n", "\n", "if", "args", ".", "no_noises", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "[", "latent_in", "]", ",", "lr", "=", "args", ".", "lr", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "[", "latent_in", "]", "+", "noises", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "", "latent_path", "=", "[", "latent_in", ".", "detach", "(", ")", ".", "clone", "(", ")", "]", "\n", "pbar", "=", "tqdm", "(", "range", "(", "args", ".", "step", ")", ")", "\n", "for", "i", "in", "pbar", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "get_lr", "(", "float", "(", "i", ")", "/", "args", ".", "step", ",", "args", ".", "lr", ")", "\n", "\n", "img_gen", ",", "_", "=", "g_ema", "(", "[", "latent_in", "]", ",", "input_is_latent", "=", "True", ",", "randomize_noise", "=", "False", ",", "noise", "=", "noises", ")", "\n", "\n", "p_loss", "=", "calc_lpips_loss", "(", "img_gen", ",", "target_img_tensor", ")", "\n", "mse_loss", "=", "F", ".", "mse_loss", "(", "img_gen", ",", "target_img_tensor", ")", "\n", "n_loss", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "noise", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "for", "noise", "in", "noises", "]", ")", ")", "\n", "\n", "if", "args", ".", "w_plus", "==", "True", ":", "\n", "            ", "latent_mean_loss", "=", "F", ".", "mse_loss", "(", "latent_in", ",", "latent_mean", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "latent_in", ".", "size", "(", "0", ")", ",", "g_ema", ".", "n_latent", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "latent_mean_loss", "=", "F", ".", "mse_loss", "(", "latent_in", ",", "latent_mean", ".", "repeat", "(", "latent_in", ".", "size", "(", "0", ")", ",", "1", ")", ")", "\n", "\n", "# main loss function", "\n", "", "loss", "=", "(", "n_loss", "*", "args", ".", "noise_regularize", "+", "\n", "p_loss", "*", "args", ".", "lambda_lpips", "+", "\n", "mse_loss", "*", "args", ".", "lambda_mse", "+", "\n", "latent_mean_loss", "*", "args", ".", "lambda_mean", ")", "\n", "\n", "pbar", ".", "set_description", "(", "f'perc: {p_loss.item():.4f} noise: {n_loss.item():.4f} mse: {mse_loss.item():.4f}  latent: {latent_mean_loss.item():.4f}'", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# noise_normalize_(noises)", "\n", "latent_path", ".", "append", "(", "latent_in", ".", "detach", "(", ")", ".", "clone", "(", ")", ")", "\n", "\n", "", "return", "latent_path", ",", "noises", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.invert.optimize_weights": [[111, 136], ["g_ema.parameters", "torch.optim.Adam", "tqdm.tqdm", "g_ema.parameters", "range", "g_ema", "invert.calc_lpips_loss", "torch.mse_loss", "tqdm.tqdm.set_description", "optim.Adam.zero_grad", "loss.backward", "optim.Adam.step", "calc_lpips_loss.item", "F.mse_loss.item"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.visualize.invert.calc_lpips_loss", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.UpFirDn2d.backward", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.utils.ranger.Ranger.step"], ["", "def", "optimize_weights", "(", "args", ",", "g_ema", ",", "target_img_tensor", ",", "latent_in", ",", "noises", "=", "None", ")", ":", "\n", "\n", "    ", "for", "p", "in", "g_ema", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "True", "\n", "", "optimizer", "=", "optim", ".", "Adam", "(", "g_ema", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr_g", ")", "\n", "\n", "pbar", "=", "tqdm", "(", "range", "(", "args", ".", "finetune_step", ")", ")", "\n", "for", "i", "in", "pbar", ":", "\n", "        ", "img_gen", ",", "_", "=", "g_ema", "(", "[", "latent_in", "]", ",", "input_is_latent", "=", "True", ",", "randomize_noise", "=", "False", ",", "noise", "=", "noises", ")", "\n", "\n", "p_loss", "=", "calc_lpips_loss", "(", "img_gen", ",", "target_img_tensor", ")", "\n", "mse_loss", "=", "F", ".", "mse_loss", "(", "img_gen", ",", "target_img_tensor", ")", "\n", "\n", "# main loss function", "\n", "loss", "=", "(", "p_loss", "*", "args", ".", "lambda_lpips", "+", "\n", "mse_loss", "*", "args", ".", "lambda_mse", "\n", ")", "\n", "\n", "pbar", ".", "set_description", "(", "f'perc: {p_loss.item():.4f} mse: {mse_loss.item():.4f}'", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "return", "g_ema", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.LocalGenerator.__init__": [[29, 42], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "utils.ToRGB", "semantic_stylegan.LocalGenerator.linears.append", "utils.ToRGB", "utils.StyledConv"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "hidden_channel", ",", "style_dim", ",", "n_layers", "=", "8", ",", "depth_layers", "=", "8", ",", "use_depth", "=", "False", ",", "detach_texture", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "depth_layers", "=", "depth_layers", "\n", "self", ".", "use_depth", "=", "use_depth", "\n", "self", ".", "detach_texture", "=", "detach_texture", "\n", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "self", ".", "linears", ".", "append", "(", "StyledConv", "(", "in_channel", ",", "hidden_channel", ",", "1", ",", "style_dim", ",", "inject_noise", "=", "False", ")", ")", "\n", "in_channel", "=", "hidden_channel", "\n", "", "self", ".", "to_feat", "=", "ToRGB", "(", "hidden_channel", ",", "out_channel", ",", "style_dim", ")", "\n", "if", "self", ".", "use_depth", ":", "\n", "            ", "self", ".", "to_depth", "=", "ToRGB", "(", "hidden_channel", ",", "1", ",", "style_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.LocalGenerator.forward": [[43, 53], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "enumerate", "semantic_stylegan.LocalGenerator.to_feat", "linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "semantic_stylegan.LocalGenerator.to_depth", "x.detach.detach.size", "x.detach.detach.size", "x.detach.detach.size", "x.detach.detach.detach"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "latent", ")", ":", "\n", "        ", "depth", "=", "torch", ".", "zeros", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "for", "i", ",", "linear", "in", "enumerate", "(", "self", ".", "linears", ")", ":", "\n", "            ", "x", "=", "linear", "(", "x", ",", "latent", "[", ":", ",", "i", "]", ")", "\n", "if", "self", ".", "use_depth", "and", "i", "==", "self", ".", "depth_layers", "-", "1", ":", "\n", "                ", "depth", "=", "self", ".", "to_depth", "(", "x", ",", "None", ")", "\n", "if", "self", ".", "detach_texture", "and", "i", "<", "self", ".", "n_layers", "-", "1", ":", "\n", "                    ", "x", "=", "x", ".", "detach", "(", ")", "\n", "", "", "", "feat", "=", "self", ".", "to_feat", "(", "x", ",", "None", ")", "\n", "return", "feat", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.RenderNet.__init__": [[56, 94], ["torch.nn.Module.__init__", "int", "int", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Module", "torch.nn.Module", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "math.log", "math.log", "semantic_stylegan.RenderNet.convs.append", "semantic_stylegan.RenderNet.convs.append", "semantic_stylegan.RenderNet.noises.register_buffer", "semantic_stylegan.RenderNet.noises.register_buffer", "semantic_stylegan.RenderNet.to_rgbs.append", "semantic_stylegan.RenderNet.to_segs.append", "utils.FixedStyledConv", "utils.FixedStyledConv", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "utils.ToRGB", "utils.ToRGB"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "min_size", ",", "out_size", ",", "coarse_size", ",", "in_channel", ",", "img_dim", ",", "seg_dim", ",", "style_dim", ",", "\n", "channel_multiplier", "=", "2", ",", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "{", "\n", "4", ":", "512", ",", "\n", "8", ":", "512", ",", "\n", "16", ":", "512", ",", "\n", "32", ":", "512", ",", "\n", "64", ":", "256", "*", "channel_multiplier", ",", "\n", "128", ":", "128", "*", "channel_multiplier", ",", "\n", "256", ":", "64", "*", "channel_multiplier", ",", "\n", "512", ":", "32", "*", "channel_multiplier", ",", "\n", "1024", ":", "16", "*", "channel_multiplier", ",", "\n", "}", "\n", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "min_size", "=", "min_size", "\n", "self", ".", "log_out_size", "=", "int", "(", "math", ".", "log", "(", "out_size", ",", "2", ")", ")", "\n", "self", ".", "log_min_size", "=", "int", "(", "math", ".", "log", "(", "min_size", ",", "2", ")", ")", "\n", "self", ".", "coarse_size", "=", "coarse_size", "\n", "self", ".", "n_layers", "=", "(", "self", ".", "log_out_size", "-", "self", ".", "log_min_size", ")", "*", "2", "\n", "\n", "feat_channel", "=", "in_channel", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "noises", "=", "nn", ".", "Module", "(", ")", "\n", "self", ".", "to_rgbs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "to_segs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "log_out_size", "-", "self", ".", "log_min_size", ")", ":", "\n", "            ", "cur_size", "=", "self", ".", "min_size", "*", "(", "2", "**", "(", "i", "+", "1", ")", ")", "\n", "out_channel", "=", "self", ".", "channels", "[", "cur_size", "]", "\n", "if", "cur_size", "//", "2", "==", "coarse_size", ":", "\n", "                ", "in_channel", "=", "in_channel", "+", "feat_channel", "\n", "", "self", ".", "convs", ".", "append", "(", "FixedStyledConv", "(", "in_channel", ",", "out_channel", ",", "3", ",", "style_dim", ",", "upsample", "=", "True", ",", "blur_kernel", "=", "blur_kernel", ")", ")", "\n", "self", ".", "convs", ".", "append", "(", "FixedStyledConv", "(", "out_channel", ",", "out_channel", ",", "3", ",", "style_dim", ",", "upsample", "=", "False", ",", "blur_kernel", "=", "blur_kernel", ")", ")", "\n", "self", ".", "noises", ".", "register_buffer", "(", "f'noise_{2*i}'", ",", "torch", ".", "randn", "(", "1", ",", "1", ",", "cur_size", ",", "cur_size", ")", ")", "\n", "self", ".", "noises", ".", "register_buffer", "(", "f'noise_{2*i+1}'", ",", "torch", ".", "randn", "(", "1", ",", "1", ",", "cur_size", ",", "cur_size", ")", ")", "\n", "self", ".", "to_rgbs", ".", "append", "(", "ToRGB", "(", "out_channel", ",", "img_dim", ",", "style_dim", ",", "upsample", "=", "True", ")", ")", "\n", "self", ".", "to_segs", ".", "append", "(", "ToRGB", "(", "out_channel", ",", "seg_dim", ",", "style_dim", ",", "upsample", "=", "True", ")", ")", "\n", "in_channel", "=", "out_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.RenderNet.get_noise": [[95, 102], ["getattr", "range"], "methods", ["None"], ["", "", "def", "get_noise", "(", "self", ",", "noise", ",", "randomize_noise", ")", ":", "\n", "        ", "if", "noise", "is", "None", ":", "\n", "            ", "if", "randomize_noise", ":", "\n", "                ", "noise", "=", "[", "None", "]", "*", "self", ".", "n_layers", "\n", "", "else", ":", "\n", "                ", "noise", "=", "[", "getattr", "(", "self", ".", "noises", ",", "f\"noise_{i}\"", ")", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", "]", "\n", "", "", "return", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.RenderNet.forward": [[103, 119], ["semantic_stylegan.RenderNet.get_noise", "range", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rgb.size", "skip_rgb.size", "seg.size", "skip_seg.size"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.RenderNet.get_noise"], ["", "def", "forward", "(", "self", ",", "x", ",", "noise", "=", "None", ",", "randomize_noise", "=", "False", ",", "skip_rgb", "=", "None", ",", "skip_seg", "=", "None", ")", ":", "\n", "        ", "noise", "=", "self", ".", "get_noise", "(", "noise", ",", "randomize_noise", ")", "\n", "x_orig", ",", "x", "=", "x", ",", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "self", ".", "min_size", ",", "self", ".", "min_size", ")", ")", "\n", "rgb", ",", "seg", "=", "None", ",", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "log_out_size", "-", "self", ".", "log_min_size", ")", ":", "\n", "            ", "if", "x", ".", "size", "(", "2", ")", "==", "self", ".", "coarse_size", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_orig", ")", ",", "1", ")", "\n", "", "x", "=", "self", ".", "convs", "[", "2", "*", "i", "]", "(", "x", ",", "None", ",", "noise", "=", "noise", "[", "2", "*", "i", "]", ")", "\n", "x", "=", "self", ".", "convs", "[", "2", "*", "i", "+", "1", "]", "(", "x", ",", "None", ",", "noise", "=", "noise", "[", "2", "*", "i", "+", "1", "]", ")", "\n", "rgb", "=", "self", ".", "to_rgbs", "[", "i", "]", "(", "x", ",", "None", ",", "rgb", ")", "\n", "if", "skip_rgb", "is", "not", "None", "and", "rgb", ".", "size", "(", "2", ")", "==", "skip_rgb", ".", "size", "(", "2", ")", ":", "\n", "                ", "rgb", "+=", "skip_rgb", "\n", "", "seg", "=", "self", ".", "to_segs", "[", "i", "]", "(", "x", ",", "None", ",", "seg", ")", "\n", "if", "skip_seg", "is", "not", "None", "and", "seg", ".", "size", "(", "2", ")", "==", "skip_seg", ".", "size", "(", "2", ")", ":", "\n", "                ", "seg", "+=", "skip_seg", "\n", "", "", "return", "rgb", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.SemanticGenerator.__init__": [[122, 168], ["torch.nn.Module.__init__", "int", "list", "print", "utils.PositionEmbedding", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "semantic_stylegan.RenderNet", "range", "torch.nn.Sequential", "torch.nn.Sequential", "math.log", "semantic_stylegan.SemanticGenerator.local_nets.append", "utils.PixelNorm", "layers.append", "semantic_stylegan.LocalGenerator", "utils.EqualLinear"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "256", ",", "style_dim", "=", "512", ",", "n_mlp", "=", "8", ",", "channel_multiplier", "=", "2", ",", "\n", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "lr_mlp", "=", "0.01", ",", "seg_dim", "=", "2", ",", "\n", "coarse_size", "=", "64", ",", "min_feat_size", "=", "8", ",", "local_layers", "=", "10", ",", "local_channel", "=", "64", ",", "\n", "coarse_channel", "=", "512", ",", "base_layers", "=", "2", ",", "depth_layers", "=", "6", ",", "residual_refine", "=", "True", ",", "\n", "detach_texture", "=", "False", ",", "transparent_dims", "=", "(", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "depth_layers", "<=", "local_layers", "\n", "assert", "coarse_size", "<", "size", "\n", "assert", "min_feat_size", "<", "coarse_size", "and", "coarse_size", "%", "min_feat_size", "==", "0", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "style_dim", "=", "style_dim", "\n", "self", ".", "log_size", "=", "int", "(", "math", ".", "log", "(", "size", ",", "2", ")", ")", "\n", "self", ".", "n_local", "=", "self", ".", "seg_dim", "=", "seg_dim", "\n", "self", ".", "base_layers", "=", "base_layers", "\n", "self", ".", "local_layers", "=", "local_layers", "\n", "self", ".", "local_channel", "=", "local_channel", "\n", "self", ".", "depth_layers", "=", "depth_layers", "\n", "self", ".", "coarse_channel", "=", "coarse_channel", "\n", "self", ".", "coarse_size", "=", "coarse_size", "\n", "self", ".", "min_feat_size", "=", "min_feat_size", "\n", "self", ".", "residual_refine", "=", "residual_refine", "\n", "self", ".", "detach_texture", "=", "detach_texture", "\n", "self", ".", "transparent_dims", "=", "list", "(", "transparent_dims", ")", "\n", "self", ".", "n_latent", "=", "self", ".", "base_layers", "+", "self", ".", "n_local", "*", "2", "# Default latent space", "\n", "self", ".", "n_latent_expand", "=", "self", ".", "n_local", "*", "self", ".", "local_layers", "# Expanded latent space", "\n", "print", "(", "f\"n_latent: {self.n_latent}, n_latent_expand: {self.n_latent_expand}\"", ")", "\n", "\n", "self", ".", "pos_embed", "=", "PositionEmbedding", "(", "2", ",", "self", ".", "local_channel", ",", "N_freqs", "=", "self", ".", "log_size", ")", "\n", "self", ".", "local_nets", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_local", ")", ":", "\n", "            ", "use_depth", "=", "i", ">", "0", "# disable pseudo-depth for background generator", "\n", "self", ".", "local_nets", ".", "append", "(", "LocalGenerator", "(", "local_channel", ",", "coarse_channel", ",", "local_channel", ",", "style_dim", ",", "\n", "n_layers", "=", "local_layers", ",", "depth_layers", "=", "depth_layers", ",", "use_depth", "=", "use_depth", ",", "detach_texture", "=", "detach_texture", ")", ")", "\n", "\n", "", "self", ".", "render_net", "=", "RenderNet", "(", "min_feat_size", ",", "size", ",", "coarse_size", ",", "coarse_channel", ",", "3", ",", "seg_dim", ",", "style_dim", ",", "\n", "channel_multiplier", "=", "channel_multiplier", ",", "blur_kernel", "=", "blur_kernel", ")", "\n", "\n", "layers", "=", "[", "PixelNorm", "(", ")", "]", "\n", "for", "i", "in", "range", "(", "n_mlp", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "EqualLinear", "(", "style_dim", ",", "style_dim", ",", "\n", "lr_mul", "=", "lr_mlp", ",", "activation", "=", "'fused_lrelu'", ")", "\n", ")", "\n", "", "self", ".", "style", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.SemanticGenerator.truncate_styles": [[170, 179], ["style_t.append"], "methods", ["None"], ["", "def", "truncate_styles", "(", "self", ",", "styles", ",", "truncation", ",", "truncation_latent", ")", ":", "\n", "        ", "if", "truncation", "<", "1", ":", "\n", "            ", "style_t", "=", "[", "]", "\n", "for", "style", "in", "styles", ":", "\n", "                ", "style_t", ".", "append", "(", "\n", "truncation_latent", "+", "truncation", "*", "(", "style", "-", "truncation_latent", ")", "\n", ")", "\n", "", "styles", "=", "style_t", "\n", "", "return", "styles", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.SemanticGenerator.expand_latents": [[180, 209], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "latent.size", "latent.size", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "latent[].unsqueeze().repeat", "latent[].unsqueeze().repeat", "latent[].unsqueeze().repeat", "latent[].unsqueeze().repeat", "latent[].unsqueeze", "latent[].unsqueeze", "latent[].unsqueeze", "latent[].unsqueeze"], "methods", ["None"], ["", "def", "expand_latents", "(", "self", ",", "latent", ")", ":", "\n", "        ", "''' Expand the default latent codes.\n        Input:\n            latent: tensor of N x (n_base + n_local x 2) x style_dim\n        Output:\n            latent_expanded: tensor of N x (n_local x local_layers) x style_dim\n        '''", "\n", "assert", "latent", ".", "ndim", "==", "3", "\n", "if", "latent", ".", "size", "(", "1", ")", "==", "self", ".", "n_latent_expand", ":", "\n", "            ", "return", "latent", "\n", "\n", "", "assert", "latent", ".", "size", "(", "1", ")", "==", "self", ".", "n_latent", "\n", "latent_expanded", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "# Disable base code for background", "\n", "                ", "if", "self", ".", "depth_layers", ">", "0", ":", "\n", "                    ", "latent_expanded", ".", "append", "(", "latent", "[", ":", ",", "2", "*", "i", "+", "self", ".", "base_layers", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "depth_layers", ",", "1", ")", ")", "\n", "", "if", "self", ".", "local_layers", "-", "self", ".", "depth_layers", ">", "0", ":", "\n", "                    ", "latent_expanded", ".", "append", "(", "latent", "[", ":", ",", "2", "*", "i", "+", "self", ".", "base_layers", "+", "1", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "local_layers", "-", "self", ".", "depth_layers", ",", "1", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "base_layers", ">", "0", ":", "\n", "                    ", "latent_expanded", ".", "append", "(", "latent", "[", ":", ",", ":", "self", ".", "base_layers", "]", ")", "\n", "", "if", "self", ".", "depth_layers", "-", "self", ".", "base_layers", ">", "0", ":", "\n", "                    ", "latent_expanded", ".", "append", "(", "latent", "[", ":", ",", "2", "*", "i", "+", "self", ".", "base_layers", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "depth_layers", "-", "self", ".", "base_layers", ",", "1", ")", ")", "\n", "", "if", "self", ".", "local_layers", "-", "self", ".", "depth_layers", ">", "0", ":", "\n", "                    ", "latent_expanded", ".", "append", "(", "latent", "[", ":", ",", "2", "*", "i", "+", "self", ".", "base_layers", "+", "1", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "local_layers", "-", "self", ".", "depth_layers", ",", "1", ")", ")", "\n", "", "", "", "latent_expanded", "=", "torch", ".", "cat", "(", "latent_expanded", ",", "1", ")", "\n", "return", "latent_expanded", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.SemanticGenerator.mix_styles": [[210, 245], ["semantic_stylegan.SemanticGenerator.expand_latents", "len", "styles[].unsqueeze().repeat", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "styles[].unsqueeze().repeat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "styles[].size", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "styles[].unsqueeze", "styles[].unsqueeze", "random.randint", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.stack.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.SemanticGenerator.expand_latents"], ["", "def", "mix_styles", "(", "self", ",", "styles", ")", ":", "\n", "        ", "if", "len", "(", "styles", ")", "<", "2", ":", "\n", "# Input is the latent code", "\n", "            ", "if", "styles", "[", "0", "]", ".", "ndim", "<", "3", ":", "\n", "                ", "latent", "=", "styles", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "n_latent", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "latent", "=", "styles", "[", "0", "]", "\n", "", "", "elif", "len", "(", "styles", ")", ">", "2", ":", "\n", "# Input is the latent code (list)", "\n", "            ", "latent", "=", "torch", ".", "stack", "(", "styles", ",", "1", ")", "\n", "", "else", ":", "\n", "# Input are two latent codes -> style mixing", "\n", "            ", "base_latent", "=", "styles", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "base_layers", ",", "1", ")", "\n", "latent", "=", "[", "base_latent", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local", ")", ":", "\n", "                ", "N", "=", "styles", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "latent1", "=", "[", "]", "\n", "latent2", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "                    ", "inject_index", "=", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "if", "inject_index", "==", "0", ":", "\n", "                        ", "latent1_", "=", "latent2_", "=", "styles", "[", "0", "]", "[", "j", "]", "\n", "", "elif", "inject_index", "==", "1", ":", "\n", "                        ", "latent1_", ",", "latent2_", "=", "styles", "[", "0", "]", "[", "j", "]", ",", "styles", "[", "1", "]", "[", "j", "]", "\n", "", "else", ":", "\n", "                        ", "latent1_", "=", "latent2_", "=", "styles", "[", "1", "]", "[", "j", "]", "\n", "", "latent1", ".", "append", "(", "latent1_", ")", "\n", "latent2", ".", "append", "(", "latent2_", ")", "\n", "", "latent1", "=", "torch", ".", "stack", "(", "latent1", ")", "# N x style_dim", "\n", "latent2", "=", "torch", ".", "stack", "(", "latent2", ")", "# N x style_dim", "\n", "latent", ".", "append", "(", "latent1", ".", "unsqueeze", "(", "1", ")", ")", "\n", "latent", ".", "append", "(", "latent2", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "latent", "=", "torch", ".", "cat", "(", "latent", ",", "1", ")", "# N x n_latent x style_dim", "\n", "", "latent", "=", "self", ".", "expand_latents", "(", "latent", ")", "# N  x (n_local x local_layers) x style_dim", "\n", "return", "latent", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.SemanticGenerator.composite": [[246, 268], ["torch.softmax", "torch.softmax", "sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask.reshape.reshape.reshape", "len", "torch.tensor().view().to", "torch.tensor().view().to", "torch.tensor().view().to", "torch.tensor().view().to", "torch.tensor().view().to", "torch.tensor().view().to", "torch.tensor().view().to", "torch.tensor().view().to", "mask.reshape.reshape.size", "torch.softmax.size", "mask.reshape.reshape.size", "torch.softmax.size", "torch.softmax.size", "torch.softmax.size", "torch.softmax.sum", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "seg_normal.sum", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "range"], "methods", ["None"], ["", "def", "composite", "(", "self", ",", "feats", ",", "depths", ",", "mask", "=", "None", ")", ":", "\n", "        ", "seg", "=", "F", ".", "softmax", "(", "torch", ".", "cat", "(", "depths", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# If mask is given, ignore specified classes", "\n", "            ", "assert", "mask", ".", "size", "(", "0", ")", "==", "seg", ".", "size", "(", "0", ")", "\n", "assert", "mask", ".", "size", "(", "1", ")", "==", "seg", ".", "size", "(", "1", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "seg", ".", "size", "(", "0", ")", ",", "seg", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "seg", "=", "seg", "*", "mask", "\n", "seg", "=", "seg", "/", "(", "seg", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "", "if", "len", "(", "self", ".", "transparent_dims", ")", ">", "0", ":", "\n", "            ", "coefs", "=", "torch", ".", "tensor", "(", "[", "0.", "if", "i", "in", "self", ".", "transparent_dims", "else", "1.", "for", "i", "in", "range", "(", "self", ".", "seg_dim", ")", "]", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ".", "to", "(", "seg", ".", "device", ")", "\n", "seg_normal", "=", "seg", "*", "coefs", "# zero out transparent classes", "\n", "seg_normal", "=", "seg_normal", "/", "(", "seg_normal", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "# re-normalize the feature map", "\n", "\n", "coefs", "=", "torch", ".", "tensor", "(", "[", "1.", "if", "i", "in", "self", ".", "transparent_dims", "else", "0.", "for", "i", "in", "range", "(", "self", ".", "seg_dim", ")", "]", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ".", "to", "(", "seg", ".", "device", ")", "\n", "seg_trans", "=", "seg", "*", "coefs", "# zero out non-transparent classes", "\n", "\n", "weights", "=", "seg_normal", "+", "seg_trans", "\n", "", "else", ":", "\n", "            ", "weights", "=", "seg", "\n", "", "feat", "=", "sum", "(", "[", "feats", "[", "i", "]", "*", "weights", "[", ":", ",", "i", ":", "i", "+", "1", "]", "for", "i", "in", "range", "(", "self", ".", "seg_dim", ")", "]", ")", "\n", "return", "feat", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.SemanticGenerator.make_coords": [[269, 273], ["torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.linspace().view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["None"], ["", "def", "make_coords", "(", "self", ",", "b", ",", "h", ",", "w", ",", "device", ")", ":", "\n", "        ", "x_channel", "=", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "w", ",", "device", "=", "device", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "b", ",", "1", ",", "w", ",", "1", ")", "\n", "y_channel", "=", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "h", ",", "device", "=", "device", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", ".", "repeat", "(", "b", ",", "1", ",", "1", ",", "h", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x_channel", ",", "y_channel", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.SemanticGenerator.forward": [[274, 324], ["semantic_stylegan.SemanticGenerator.truncate_styles", "semantic_stylegan.SemanticGenerator.mix_styles", "range", "semantic_stylegan.SemanticGenerator.composite", "semantic_stylegan.SemanticGenerator.render_net", "semantic_stylegan.SemanticGenerator.make_coords", "semantic_stylegan.SemanticGenerator.pos_embed", "feats.append", "depths.append", "semantic_stylegan.SemanticGenerator.style", "semantic_stylegan.SemanticGenerator.clone", "range"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.SemanticGenerator.truncate_styles", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.SemanticGenerator.mix_styles", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.SemanticGenerator.composite", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.SemanticGenerator.make_coords"], ["", "def", "forward", "(", "self", ",", "\n", "latent", ",", "\n", "coords", "=", "None", ",", "\n", "truncation", "=", "1", ",", "\n", "truncation_latent", "=", "None", ",", "\n", "noise", "=", "None", ",", "\n", "randomize_noise", "=", "True", ",", "\n", "input_is_latent", "=", "False", ",", "\n", "composition_mask", "=", "None", ",", "\n", "return_latents", "=", "False", ",", "\n", "return_coarse", "=", "False", ",", "\n", "return_all", "=", "False", ",", "\n", ")", ":", "\n", "\n", "        ", "if", "not", "input_is_latent", ":", "\n", "            ", "latent", "=", "[", "self", ".", "style", "(", "s", ")", "for", "s", "in", "latent", "]", "\n", "\n", "", "latent", "=", "self", ".", "truncate_styles", "(", "latent", ",", "truncation", ",", "truncation_latent", ")", "\n", "latent", "=", "self", ".", "mix_styles", "(", "latent", ")", "# expanded latent code", "\n", "\n", "# Position Embedding", "\n", "if", "coords", "is", "None", ":", "\n", "            ", "coords", "=", "self", ".", "make_coords", "(", "latent", ".", "shape", "[", "0", "]", ",", "self", ".", "coarse_size", ",", "self", ".", "coarse_size", ",", "latent", ".", "device", ")", "\n", "coords", "=", "[", "coords", ".", "clone", "(", ")", "for", "_", "in", "range", "(", "self", ".", "n_local", ")", "]", "\n", "\n", "# Local Generators", "\n", "", "feats", "=", "[", "]", "\n", "depths", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_local", ")", ":", "\n", "            ", "x", "=", "self", ".", "pos_embed", "(", "coords", "[", "i", "]", ")", "\n", "local_latent", "=", "latent", "[", ":", ",", "i", "*", "self", ".", "local_layers", ":", "(", "i", "+", "1", ")", "*", "self", ".", "local_layers", "]", "\n", "feat", ",", "depth", "=", "self", ".", "local_nets", "[", "i", "]", "(", "x", ",", "local_latent", ")", "\n", "feats", ".", "append", "(", "feat", ")", "\n", "depths", ".", "append", "(", "depth", ")", "\n", "\n", "# Composition and render", "\n", "", "feat", ",", "seg_coarse", "=", "self", ".", "composite", "(", "feats", ",", "depths", ",", "mask", "=", "composition_mask", ")", "\n", "seg_coarse", "=", "2", "*", "seg_coarse", "-", "1", "# normalize to [-1,1]", "\n", "\n", "skip_seg", "=", "seg_coarse", "if", "self", ".", "residual_refine", "else", "None", "\n", "rgb", ",", "seg", "=", "self", ".", "render_net", "(", "feat", ",", "noise", "=", "noise", ",", "randomize_noise", "=", "randomize_noise", ",", "skip_rgb", "=", "None", ",", "skip_seg", "=", "skip_seg", ")", "\n", "\n", "if", "return_latents", ":", "\n", "            ", "return", "rgb", ",", "latent", "\n", "", "elif", "return_coarse", ":", "\n", "            ", "return", "rgb", ",", "seg_coarse", "\n", "", "elif", "return_all", ":", "\n", "            ", "return", "rgb", ",", "seg", ",", "seg_coarse", ",", "depths", ",", "latent", "\n", "", "else", ":", "\n", "            ", "return", "rgb", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.DualBranchDiscriminator.__init__": [[327, 368], ["torch.nn.Module.__init__", "int", "range", "torch.nn.Sequential", "torch.nn.Sequential", "int", "range", "torch.nn.Sequential", "torch.nn.Sequential", "utils.ConvLayer", "torch.nn.Sequential", "torch.nn.Sequential", "math.log", "utils.ConvLayer", "convs.append", "math.log", "utils.ConvLayer", "convs.append", "utils.EqualLinear", "utils.EqualLinear", "utils.ResBlock", "utils.ResBlock"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ",", "seg_size", ",", "img_dim", ",", "seg_dim", ",", "channel_multiplier", "=", "2", ",", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "channels", "=", "{", "\n", "4", ":", "512", ",", "\n", "8", ":", "512", ",", "\n", "16", ":", "512", ",", "\n", "32", ":", "512", ",", "\n", "64", ":", "256", "*", "channel_multiplier", ",", "\n", "128", ":", "128", "*", "channel_multiplier", ",", "\n", "256", ":", "64", "*", "channel_multiplier", ",", "\n", "512", ":", "32", "*", "channel_multiplier", ",", "\n", "1024", ":", "16", "*", "channel_multiplier", ",", "\n", "}", "\n", "log_size", "=", "int", "(", "math", ".", "log", "(", "img_size", ",", "2", ")", ")", "\n", "if", "seg_size", "is", "None", ":", "seg_size", "=", "img_size", "\n", "\n", "convs", "=", "[", "ConvLayer", "(", "img_dim", ",", "self", ".", "channels", "[", "img_size", "]", ",", "1", ")", "]", "\n", "in_channel", "=", "self", ".", "channels", "[", "img_size", "]", "\n", "for", "i", "in", "range", "(", "log_size", ",", "2", ",", "-", "1", ")", ":", "\n", "            ", "out_channel", "=", "self", ".", "channels", "[", "2", "**", "(", "i", "-", "1", ")", "]", "\n", "convs", ".", "append", "(", "ResBlock", "(", "in_channel", ",", "out_channel", ",", "blur_kernel", ")", ")", "\n", "in_channel", "=", "out_channel", "\n", "", "self", ".", "convs_img", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "\n", "log_size", "=", "int", "(", "math", ".", "log", "(", "seg_size", ",", "2", ")", ")", "\n", "convs", "=", "[", "ConvLayer", "(", "seg_dim", ",", "self", ".", "channels", "[", "seg_size", "]", ",", "1", ")", "]", "\n", "in_channel", "=", "self", ".", "channels", "[", "seg_size", "]", "\n", "for", "i", "in", "range", "(", "log_size", ",", "2", ",", "-", "1", ")", ":", "\n", "            ", "out_channel", "=", "self", ".", "channels", "[", "2", "**", "(", "i", "-", "1", ")", "]", "\n", "convs", ".", "append", "(", "ResBlock", "(", "in_channel", ",", "out_channel", ",", "blur_kernel", ")", ")", "\n", "in_channel", "=", "out_channel", "\n", "", "self", ".", "convs_seg", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "\n", "self", ".", "stddev_group", "=", "4", "\n", "self", ".", "stddev_feat", "=", "1", "\n", "\n", "self", ".", "final_conv", "=", "ConvLayer", "(", "in_channel", "+", "1", ",", "self", ".", "channels", "[", "4", "]", ",", "3", ")", "\n", "self", ".", "final_linear", "=", "nn", ".", "Sequential", "(", "\n", "EqualLinear", "(", "self", ".", "channels", "[", "4", "]", "*", "4", "*", "4", ",", "self", ".", "channels", "[", "4", "]", ",", "activation", "=", "'fused_lrelu'", ")", ",", "\n", "EqualLinear", "(", "self", ".", "channels", "[", "4", "]", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.DualBranchDiscriminator._cal_stddev": [[370, 382], ["min", "torch.cat.view", "torch.cat.view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "stddev.repeat.repeat.mean().squeeze", "stddev.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "stddev.repeat.repeat.var", "stddev.repeat.repeat.mean"], "methods", ["None"], ["", "def", "_cal_stddev", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", ",", "channel", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "group", "=", "min", "(", "batch", ",", "self", ".", "stddev_group", ")", "\n", "stddev", "=", "x", ".", "view", "(", "\n", "group", ",", "-", "1", ",", "self", ".", "stddev_feat", ",", "channel", "//", "self", ".", "stddev_feat", ",", "height", ",", "width", "\n", ")", "\n", "stddev", "=", "torch", ".", "sqrt", "(", "stddev", ".", "var", "(", "0", ",", "unbiased", "=", "False", ")", "+", "1e-8", ")", "\n", "stddev", "=", "stddev", ".", "mean", "(", "[", "2", ",", "3", ",", "4", "]", ",", "keepdims", "=", "True", ")", ".", "squeeze", "(", "2", ")", "\n", "stddev", "=", "stddev", ".", "repeat", "(", "group", ",", "1", ",", "height", ",", "width", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "stddev", "]", ",", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.DualBranchDiscriminator.forward": [[383, 398], ["semantic_stylegan.DualBranchDiscriminator.convs_img", "semantic_stylegan.DualBranchDiscriminator._cal_stddev", "semantic_stylegan.DualBranchDiscriminator.final_conv", "semantic_stylegan.DualBranchDiscriminator.view", "semantic_stylegan.DualBranchDiscriminator.final_linear", "semantic_stylegan.DualBranchDiscriminator.convs_seg"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.semantic_stylegan.DualBranchDiscriminator._cal_stddev"], ["", "def", "forward", "(", "self", ",", "img", ",", "seg", "=", "None", ")", ":", "\n", "        ", "batch", "=", "img", ".", "shape", "[", "0", "]", "\n", "\n", "out", "=", "self", ".", "convs_img", "(", "img", ")", "\n", "if", "seg", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "+", "self", ".", "convs_seg", "(", "seg", ")", "\n", "\n", "", "out", "=", "self", ".", "_cal_stddev", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "final_conv", "(", "out", ")", "\n", "\n", "out", "=", "out", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "final_linear", "(", "out", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.__init__.make_model": [[21, 33], ["semantic_stylegan.SemanticGenerator", "print", "pprint.pprint", "vars"], "function", ["None"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Generator.__init__": [[13, 106], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "ConstantInput", "StyledConv", "ToRGB", "int", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Module", "range", "range", "PixelNorm", "layers.append", "math.log", "stylegan2.Generator.noises.register_buffer", "stylegan2.Generator.convs.append", "stylegan2.Generator.convs.append", "stylegan2.Generator.to_rgbs.append", "EqualLinear", "torch.randn", "StyledConv", "StyledConv", "ToRGB"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "size", ",", "\n", "style_dim", ",", "\n", "n_mlp", ",", "\n", "channel_multiplier", "=", "2", ",", "\n", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "lr_mlp", "=", "0.01", ",", "\n", "randomize_noise", "=", "True", ",", "\n", "image_mode", "=", "'RGB'", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "size", "=", "size", "\n", "\n", "self", ".", "style_dim", "=", "style_dim", "\n", "\n", "layers", "=", "[", "PixelNorm", "(", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_mlp", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "EqualLinear", "(", "\n", "style_dim", ",", "style_dim", ",", "lr_mul", "=", "lr_mlp", ",", "activation", "=", "\"fused_lrelu\"", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "style", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "channels", "=", "{", "\n", "4", ":", "512", ",", "\n", "8", ":", "512", ",", "\n", "16", ":", "512", ",", "\n", "32", ":", "512", ",", "\n", "64", ":", "256", "*", "channel_multiplier", ",", "\n", "128", ":", "128", "*", "channel_multiplier", ",", "\n", "256", ":", "64", "*", "channel_multiplier", ",", "\n", "512", ":", "32", "*", "channel_multiplier", ",", "\n", "1024", ":", "16", "*", "channel_multiplier", ",", "\n", "}", "\n", "\n", "self", ".", "input", "=", "ConstantInput", "(", "self", ".", "channels", "[", "4", "]", ")", "\n", "self", ".", "conv1", "=", "StyledConv", "(", "\n", "self", ".", "channels", "[", "4", "]", ",", "self", ".", "channels", "[", "4", "]", ",", "3", ",", "style_dim", ",", "blur_kernel", "=", "blur_kernel", "\n", ")", "\n", "\n", "if", "image_mode", "==", "'RGB'", ":", "\n", "            ", "self", ".", "rgb_channel", "=", "3", "\n", "", "else", ":", "\n", "            ", "self", ".", "rgb_channel", "=", "1", "\n", "\n", "\n", "", "self", ".", "to_rgb1", "=", "ToRGB", "(", "self", ".", "channels", "[", "4", "]", ",", "self", ".", "rgb_channel", ",", "style_dim", ",", "upsample", "=", "False", ")", "\n", "\n", "self", ".", "log_size", "=", "int", "(", "math", ".", "log", "(", "size", ",", "2", ")", ")", "\n", "self", ".", "num_layers", "=", "(", "self", ".", "log_size", "-", "2", ")", "*", "2", "+", "1", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "upsamples", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "to_rgbs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "noises", "=", "nn", ".", "Module", "(", ")", "\n", "self", ".", "randomize_noise", "=", "randomize_noise", "\n", "in_channel", "=", "self", ".", "channels", "[", "4", "]", "\n", "\n", "for", "layer_idx", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "res", "=", "(", "layer_idx", "+", "5", ")", "//", "2", "\n", "shape", "=", "[", "1", ",", "1", ",", "2", "**", "res", ",", "2", "**", "res", "]", "\n", "self", ".", "noises", ".", "register_buffer", "(", "f\"noise_{layer_idx}\"", ",", "torch", ".", "randn", "(", "*", "shape", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "3", ",", "self", ".", "log_size", "+", "1", ")", ":", "\n", "            ", "out_channel", "=", "self", ".", "channels", "[", "2", "**", "i", "]", "\n", "\n", "self", ".", "convs", ".", "append", "(", "\n", "StyledConv", "(", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "3", ",", "\n", "style_dim", ",", "\n", "upsample", "=", "True", ",", "\n", "blur_kernel", "=", "blur_kernel", ",", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "convs", ".", "append", "(", "\n", "StyledConv", "(", "\n", "out_channel", ",", "out_channel", ",", "3", ",", "style_dim", ",", "blur_kernel", "=", "blur_kernel", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "to_rgbs", ".", "append", "(", "ToRGB", "(", "out_channel", ",", "self", ".", "rgb_channel", ",", "style_dim", ")", ")", "\n", "\n", "in_channel", "=", "out_channel", "\n", "\n", "", "self", ".", "n_latent", "=", "self", ".", "log_size", "*", "2", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Generator.make_noise": [[108, 118], ["range", "torch.randn", "range", "noises.append", "torch.randn"], "methods", ["None"], ["", "def", "make_noise", "(", "self", ")", ":", "\n", "        ", "device", "=", "self", ".", "input", ".", "input", ".", "device", "\n", "\n", "noises", "=", "[", "torch", ".", "randn", "(", "1", ",", "1", ",", "2", "**", "2", ",", "2", "**", "2", ",", "device", "=", "device", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "3", ",", "self", ".", "log_size", "+", "1", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "                ", "noises", ".", "append", "(", "torch", ".", "randn", "(", "1", ",", "1", ",", "2", "**", "i", ",", "2", "**", "i", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "", "return", "noises", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Generator.make_mean_latent": [[119, 127], ["torch.randn", "stylegan2.Generator.style().mean", "stylegan2.Generator.style"], "methods", ["None"], ["", "def", "make_mean_latent", "(", "self", ",", "n_latent", ")", ":", "\n", "        ", "latent_in", "=", "torch", ".", "randn", "(", "\n", "n_latent", ",", "self", ".", "style_dim", ",", "device", "=", "self", ".", "input", ".", "input", ".", "device", "\n", ")", "\n", "latent", "=", "self", ".", "style", "(", "latent_in", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "mean_latent", "=", "latent", "\n", "\n", "return", "latent", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Generator.get_latent": [[128, 132], ["stylegan2.Generator.style"], "methods", ["None"], ["", "def", "get_latent", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "style", "=", "self", ".", "style", "(", "input", ")", "\n", "return", "style", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Generator.truncation": [[133, 138], ["stylegan2.Generator.mean_latent.unsqueeze", "stylegan2.Generator.mean_latent.unsqueeze"], "methods", ["None"], ["", "def", "truncation", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "mean_latent", ".", "unsqueeze", "(", "1", ")", "+", "0.7", "*", "(", "input", "-", "self", ".", "mean_latent", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Generator.g_mapping": [[140, 145], ["stylegan2.Generator.style", "style.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "style.unsqueeze().repeat.unsqueeze().repeat.unsqueeze"], "methods", ["None"], ["", "def", "g_mapping", "(", "self", ",", "input", ")", ":", "\n", "        ", "style", "=", "self", ".", "style", "(", "input", ")", "\n", "style", "=", "style", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "n_latent", ",", "1", ")", "\n", "\n", "return", "style", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Generator.g_synthesis": [[146, 183], ["stylegan2.Generator.input", "styles_feature.append", "stylegan2.Generator.conv1", "styles_feature.append", "stylegan2.Generator.to_rgb1", "zip", "conv1", "styles_feature.append", "conv2", "styles_feature.append", "to_rgb", "getattr", "range"], "methods", ["None"], ["", "def", "g_synthesis", "(", "self", ",", "latent", ")", ":", "\n", "        ", "if", "self", ".", "randomize_noise", ":", "\n", "            ", "noise", "=", "[", "None", "]", "*", "self", ".", "num_layers", "\n", "", "else", ":", "\n", "            ", "noise", "=", "[", "\n", "getattr", "(", "self", ".", "noises", ",", "f\"noise_{i}\"", ")", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", "\n", "]", "\n", "", "styles_feature", "=", "[", "]", "\n", "\n", "out", "=", "self", ".", "input", "(", "latent", ")", "\n", "styles_feature", ".", "append", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "out", ",", "latent", "[", ":", ",", "0", "]", ",", "noise", "=", "noise", "[", "0", "]", ")", "\n", "styles_feature", ".", "append", "(", "out", ")", "\n", "\n", "skip", "=", "self", ".", "to_rgb1", "(", "out", ",", "latent", "[", ":", ",", "1", "]", ")", "\n", "\n", "i", "=", "1", "\n", "\n", "for", "conv1", ",", "conv2", ",", "noise1", ",", "noise2", ",", "to_rgb", "in", "zip", "(", "\n", "self", ".", "convs", "[", ":", ":", "2", "]", ",", "self", ".", "convs", "[", "1", ":", ":", "2", "]", ",", "noise", "[", "1", ":", ":", "2", "]", ",", "noise", "[", "2", ":", ":", "2", "]", ",", "self", ".", "to_rgbs", "\n", ")", ":", "\n", "            ", "out", "=", "conv1", "(", "out", ",", "latent", "[", ":", ",", "i", "]", ",", "noise", "=", "noise1", ")", "\n", "\n", "styles_feature", ".", "append", "(", "out", ")", "\n", "\n", "out", "=", "conv2", "(", "out", ",", "latent", "[", ":", ",", "i", "+", "1", "]", ",", "noise", "=", "noise2", ")", "\n", "\n", "styles_feature", ".", "append", "(", "out", ")", "\n", "\n", "skip", "=", "to_rgb", "(", "out", ",", "latent", "[", ":", ",", "i", "+", "2", "]", ",", "skip", ")", "\n", "\n", "i", "+=", "2", "\n", "\n", "", "image", "=", "skip", "\n", "\n", "return", "image", ",", "styles_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Generator.sample": [[184, 206], ["latent_space_type.upper.upper.upper", "numpy.random.randn.astype", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "ValueError"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "num", ",", "latent_space_type", "=", "'Z'", ")", ":", "\n", "        ", "\"\"\"Samples latent codes randomly.\n        Args:\n        num: Number of latent codes to sample. Should be positive.\n        latent_space_type: Type of latent space from which to sample latent code.\n            Only [`Z`, `W`, `WP`] are supported. Case insensitive. (default: `Z`)\n        Returns:\n        A `numpy.ndarray` as sampled latend codes.\n        Raises:\n        ValueError: If the given `latent_space_type` is not supported.\n        \"\"\"", "\n", "latent_space_type", "=", "latent_space_type", ".", "upper", "(", ")", "\n", "if", "latent_space_type", "==", "'Z'", ":", "\n", "            ", "latent_codes", "=", "np", ".", "random", ".", "randn", "(", "num", ",", "self", ".", "style_dim", ")", "\n", "", "elif", "latent_space_type", "==", "'W'", ":", "\n", "            ", "latent_codes", "=", "np", ".", "random", ".", "randn", "(", "num", ",", "self", ".", "style_dim", ")", "\n", "", "elif", "latent_space_type", "==", "'WP'", ":", "\n", "            ", "latent_codes", "=", "np", ".", "random", ".", "randn", "(", "num", ",", "self", ".", "n_latent", ",", "self", ".", "style_dim", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Latent space type `{latent_space_type}` is invalid!'", ")", "\n", "\n", "", "return", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Generator.forward": [[208, 281], ["stylegan2.Generator.input", "stylegan2.Generator.conv1", "stylegan2.Generator.to_rgb1", "zip", "len", "styles[].unsqueeze().repeat", "styles[].unsqueeze().repeat", "torch.cat", "conv1", "conv2", "to_rgb", "stylegan2.Generator.style", "style_t.append", "styles[].unsqueeze().repeat", "random.randint", "getattr", "styles[].unsqueeze", "styles[].unsqueeze", "range", "styles[].unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "styles", ",", "\n", "return_latents", "=", "False", ",", "\n", "inject_index", "=", "None", ",", "\n", "truncation", "=", "1", ",", "\n", "truncation_latent", "=", "None", ",", "\n", "input_is_latent", "=", "False", ",", "\n", "noise", "=", "None", ",", "\n", "randomize_noise", "=", "True", ",", "\n", ")", ":", "\n", "        ", "if", "not", "input_is_latent", ":", "\n", "            ", "styles", "=", "[", "self", ".", "style", "(", "s", ")", "for", "s", "in", "styles", "]", "\n", "\n", "\n", "", "if", "noise", "is", "None", ":", "\n", "            ", "if", "randomize_noise", ":", "\n", "                ", "noise", "=", "[", "None", "]", "*", "self", ".", "num_layers", "\n", "", "else", ":", "\n", "                ", "noise", "=", "[", "\n", "getattr", "(", "self", ".", "noises", ",", "f\"noise_{i}\"", ")", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", "\n", "]", "\n", "\n", "", "", "if", "truncation", "<", "1", ":", "\n", "            ", "style_t", "=", "[", "]", "\n", "\n", "for", "style", "in", "styles", ":", "\n", "                ", "style_t", ".", "append", "(", "\n", "truncation_latent", "+", "truncation", "*", "(", "style", "-", "truncation_latent", ")", "\n", ")", "\n", "\n", "", "styles", "=", "style_t", "\n", "\n", "", "if", "len", "(", "styles", ")", "<", "2", ":", "\n", "            ", "inject_index", "=", "self", ".", "n_latent", "\n", "\n", "if", "styles", "[", "0", "]", ".", "ndim", "<", "3", ":", "\n", "                ", "latent", "=", "styles", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "inject_index", ",", "1", ")", "\n", "\n", "", "else", ":", "\n", "                ", "latent", "=", "styles", "[", "0", "]", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "inject_index", "is", "None", ":", "\n", "                ", "inject_index", "=", "random", ".", "randint", "(", "1", ",", "self", ".", "n_latent", "-", "1", ")", "\n", "\n", "", "latent", "=", "styles", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "inject_index", ",", "1", ")", "\n", "latent2", "=", "styles", "[", "1", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "n_latent", "-", "inject_index", ",", "1", ")", "\n", "\n", "latent", "=", "torch", ".", "cat", "(", "[", "latent", ",", "latent2", "]", ",", "1", ")", "\n", "\n", "", "out", "=", "self", ".", "input", "(", "latent", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ",", "latent", "[", ":", ",", "0", "]", ",", "noise", "=", "noise", "[", "0", "]", ")", "\n", "\n", "skip", "=", "self", ".", "to_rgb1", "(", "out", ",", "latent", "[", ":", ",", "1", "]", ")", "\n", "\n", "i", "=", "1", "\n", "for", "conv1", ",", "conv2", ",", "noise1", ",", "noise2", ",", "to_rgb", "in", "zip", "(", "\n", "self", ".", "convs", "[", ":", ":", "2", "]", ",", "self", ".", "convs", "[", "1", ":", ":", "2", "]", ",", "noise", "[", "1", ":", ":", "2", "]", ",", "noise", "[", "2", ":", ":", "2", "]", ",", "self", ".", "to_rgbs", "\n", ")", ":", "\n", "            ", "out", "=", "conv1", "(", "out", ",", "latent", "[", ":", ",", "i", "]", ",", "noise", "=", "noise1", ")", "\n", "out", "=", "conv2", "(", "out", ",", "latent", "[", ":", ",", "i", "+", "1", "]", ",", "noise", "=", "noise2", ")", "\n", "skip", "=", "to_rgb", "(", "out", ",", "latent", "[", ":", ",", "i", "+", "2", "]", ",", "skip", ")", "\n", "\n", "i", "+=", "2", "\n", "\n", "", "image", "=", "skip", "\n", "\n", "if", "return_latents", ":", "\n", "            ", "return", "image", ",", "latent", "\n", "\n", "", "else", ":", "\n", "            ", "return", "image", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Discriminator.__init__": [[284, 321], ["torch.nn.Module.__init__", "int", "range", "torch.nn.Sequential", "ConvLayer", "torch.nn.Sequential", "ConvLayer", "math.log", "convs.append", "EqualLinear", "EqualLinear", "ResBlock"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "channel_multiplier", "=", "2", ",", "blur_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "channels", "=", "{", "\n", "4", ":", "512", ",", "\n", "8", ":", "512", ",", "\n", "16", ":", "512", ",", "\n", "32", ":", "512", ",", "\n", "64", ":", "256", "*", "channel_multiplier", ",", "\n", "128", ":", "128", "*", "channel_multiplier", ",", "\n", "256", ":", "64", "*", "channel_multiplier", ",", "\n", "512", ":", "32", "*", "channel_multiplier", ",", "\n", "1024", ":", "16", "*", "channel_multiplier", ",", "\n", "}", "\n", "\n", "convs", "=", "[", "ConvLayer", "(", "3", ",", "channels", "[", "size", "]", ",", "1", ")", "]", "\n", "\n", "log_size", "=", "int", "(", "math", ".", "log", "(", "size", ",", "2", ")", ")", "\n", "\n", "in_channel", "=", "channels", "[", "size", "]", "\n", "\n", "for", "i", "in", "range", "(", "log_size", ",", "2", ",", "-", "1", ")", ":", "\n", "            ", "out_channel", "=", "channels", "[", "2", "**", "(", "i", "-", "1", ")", "]", "\n", "\n", "convs", ".", "append", "(", "ResBlock", "(", "in_channel", ",", "out_channel", ",", "blur_kernel", ")", ")", "\n", "\n", "in_channel", "=", "out_channel", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "\n", "self", ".", "stddev_group", "=", "4", "\n", "self", ".", "stddev_feat", "=", "1", "\n", "\n", "self", ".", "final_conv", "=", "ConvLayer", "(", "in_channel", "+", "1", ",", "channels", "[", "4", "]", ",", "3", ")", "\n", "self", ".", "final_linear", "=", "nn", ".", "Sequential", "(", "\n", "EqualLinear", "(", "channels", "[", "4", "]", "*", "4", "*", "4", ",", "channels", "[", "4", "]", ",", "activation", "=", "\"fused_lrelu\"", ")", ",", "\n", "EqualLinear", "(", "channels", "[", "4", "]", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.stylegan2.Discriminator.forward": [[323, 342], ["stylegan2.Discriminator.convs", "min", "stylegan2.Discriminator.view", "torch.sqrt", "stddev.repeat.repeat.mean().squeeze", "stddev.repeat.repeat.repeat", "torch.cat", "stylegan2.Discriminator.final_conv", "stylegan2.Discriminator.view", "stylegan2.Discriminator.final_linear", "stddev.repeat.repeat.var", "stddev.repeat.repeat.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "input", ")", "\n", "\n", "batch", ",", "channel", ",", "height", ",", "width", "=", "out", ".", "shape", "\n", "group", "=", "min", "(", "batch", ",", "self", ".", "stddev_group", ")", "\n", "stddev", "=", "out", ".", "view", "(", "\n", "group", ",", "-", "1", ",", "self", ".", "stddev_feat", ",", "channel", "//", "self", ".", "stddev_feat", ",", "height", ",", "width", "\n", ")", "\n", "stddev", "=", "torch", ".", "sqrt", "(", "stddev", ".", "var", "(", "0", ",", "unbiased", "=", "False", ")", "+", "1e-8", ")", "\n", "stddev", "=", "stddev", ".", "mean", "(", "[", "2", ",", "3", ",", "4", "]", ",", "keepdims", "=", "True", ")", ".", "squeeze", "(", "2", ")", "\n", "stddev", "=", "stddev", ".", "repeat", "(", "group", ",", "1", ",", "height", ",", "width", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "stddev", "]", ",", "1", ")", "\n", "\n", "out", "=", "self", ".", "final_conv", "(", "out", ")", "\n", "\n", "out", "=", "out", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "final_linear", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.Blur.__init__": [[18, 29], ["torch.nn.Module.__init__", "utils.make_kernel", "utils.Blur.register_buffer"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.make_kernel"], ["import", "numpy", "as", "np", "\n", "import", "torch", "\n", "from", "scipy", ".", "interpolate", "import", "CubicSpline", "\n", "\n", "color_map", "=", "{", "\n", "0", ":", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "1", ":", "[", "239", ",", "234", ",", "90", "]", ",", "\n", "2", ":", "[", "44", ",", "105", ",", "154", "]", ",", "\n", "3", ":", "[", "4", ",", "139", ",", "168", "]", ",", "\n", "4", ":", "[", "13", ",", "179", ",", "158", "]", ",", "\n", "5", ":", "[", "131", ",", "227", ",", "119", "]", ",", "\n", "6", ":", "[", "185", ",", "231", ",", "105", "]", ",", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.Blur.forward": [[30, 34], ["op.upfirdn2d"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.upfirdn2d"], ["7", ":", "[", "107", ",", "137", ",", "198", "]", ",", "\n", "8", ":", "[", "241", ",", "196", ",", "83", "]", ",", "\n", "9", ":", "[", "242", ",", "158", ",", "76", "]", ",", "\n", "10", ":", "[", "234", ",", "114", ",", "71", "]", ",", "\n", "11", ":", "[", "215", ",", "95", ",", "155", "]", ",", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.ConvLayer.__init__": [[37, 79], ["layers.append", "torch.nn.Sequential.__init__", "layers.append", "utils.EqualConv2d", "layers.append", "utils.Blur", "op.FusedLeakyReLU", "len"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["14", ":", "[", "142", ",", "82", ",", "172", "]", ",", "\n", "15", ":", "[", "158", ",", "115", ",", "200", "]", ",", "\n", "16", ":", "[", "116", ",", "95", ",", "159", "]", ",", "\n", "}", "\n", "\n", "def", "generate_img", "(", "model", ",", "styles", ",", "mean_latent", "=", "None", ",", "truncation", "=", "1.0", ",", "batch_size", "=", "16", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "for", "head", "in", "range", "(", "0", ",", "styles", ".", "size", "(", "0", ")", ",", "batch_size", ")", ":", "\n", "        ", "images_", ",", "_", "=", "model", "(", "[", "styles", "[", "head", ":", "head", "+", "batch_size", "]", "]", ",", "input_is_latent", "=", "True", ",", "\n", "truncation", "=", "truncation", ",", "truncation_latent", "=", "mean_latent", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "images", ".", "append", "(", "images_", ")", "\n", "", "images", "=", "torch", ".", "cat", "(", "images", ",", "0", ")", "\n", "return", "tensor2image", "(", "images", ")", "\n", "\n", "", "def", "generate", "(", "model", ",", "styles", ",", "mean_latent", "=", "None", ",", "truncation", "=", "1.0", ",", "batch_size", "=", "16", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "images", ",", "segs", "=", "[", "]", ",", "[", "]", "\n", "for", "head", "in", "range", "(", "0", ",", "styles", ".", "size", "(", "0", ")", ",", "batch_size", ")", ":", "\n", "        ", "images_", ",", "segs_", "=", "model", "(", "[", "styles", "[", "head", ":", "head", "+", "batch_size", "]", "]", ",", "input_is_latent", "=", "True", ",", "\n", "truncation", "=", "truncation", ",", "truncation_latent", "=", "mean_latent", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "images", ".", "append", "(", "images_", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "segs", ".", "append", "(", "segs_", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "", "images", ",", "segs", "=", "torch", ".", "cat", "(", "images", ",", "0", ")", ",", "torch", ".", "cat", "(", "segs", ",", "0", ")", "\n", "return", "tensor2image", "(", "images", ")", ",", "tensor2seg", "(", "segs", ")", "\n", "\n", "", "def", "tensor2image", "(", "tensor", ")", ":", "\n", "    ", "images", "=", "tensor", ".", "cpu", "(", ")", ".", "clamp", "(", "-", "1", ",", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "numpy", "(", ")", "\n", "images", "=", "images", "*", "127.5", "+", "127.5", "\n", "images", "=", "images", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "images", "\n", "\n", "", "def", "tensor2seg", "(", "sample_seg", ")", ":", "\n", "    ", "seg_dim", "=", "sample_seg", ".", "size", "(", "1", ")", "\n", "sample_seg", "=", "torch", ".", "argmax", "(", "sample_seg", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sample_mask", "=", "np", ".", "zeros", "(", "(", "sample_seg", ".", "shape", "[", "0", "]", ",", "sample_seg", ".", "shape", "[", "1", "]", ",", "sample_seg", ".", "shape", "[", "2", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "key", "in", "range", "(", "seg_dim", ")", ":", "\n", "        ", "sample_mask", "[", "sample_seg", "==", "key", "]", "=", "color_map", "[", "key", "]", "\n", "", "return", "sample_mask", "\n", "\n", "", "def", "cubic_spline_interpolate", "(", "styles", ",", "step", ")", ":", "\n", "    ", "device", "=", "styles", ".", "device", "\n", "styles", "=", "styles", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "N", ",", "K", ",", "D", "=", "styles", ".", "shape", "\n", "x", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "N", ")", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.ResBlock.__init__": [[82, 90], ["torch.nn.Module.__init__", "utils.ConvLayer", "utils.ConvLayer", "utils.ConvLayer"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["x_out", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "step", ")", "\n", "results", "=", "spl", "(", "x_out", ")", "# Step x KD", "\n", "results", "=", "results", ".", "reshape", "(", "step", ",", "K", ",", "D", ")", "\n", "return", "torch", ".", "tensor", "(", "results", ",", "device", "=", "device", ")", ".", "float", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.ResBlock.forward": [[92, 100], ["utils.ResBlock.conv1", "utils.ResBlock.conv2", "utils.ResBlock.skip", "math.sqrt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.PixelNorm.__init__": [[103, 105], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.PixelNorm.forward": [[106, 108], ["torch.rsqrt", "torch.mean"], "methods", ["None"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.Upsample.__init__": [[122, 135], ["torch.nn.Module.__init__", "utils.Upsample.register_buffer", "utils.make_kernel"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.make_kernel"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.Upsample.forward": [[136, 140], ["op.upfirdn2d"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.upfirdn2d"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.Downsample.__init__": [[143, 156], ["torch.nn.Module.__init__", "utils.make_kernel", "utils.Downsample.register_buffer"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.make_kernel"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.Downsample.forward": [[157, 161], ["op.upfirdn2d"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.upfirdn2d"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.EqualConv2d.__init__": [[164, 182], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.randn", "math.sqrt", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.EqualConv2d.forward": [[183, 193], ["op.conv2d_gradfix.conv2d"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv2d"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.EqualConv2d.__repr__": [[194, 197], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.EqualLinear.__init__": [[202, 222], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros().div_", "torch.randn().div_", "torch.zeros().fill_", "math.sqrt", "torch.zeros", "torch.randn", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.EqualLinear.forward": [[223, 235], ["torch.nn.functional.linear", "op.fused_leaky_relu", "torch.nn.functional.linear"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.fused_act.fused_leaky_relu"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.EqualLinear.__repr__": [[236, 239], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.ModulatedConv2d.__init__": [[243, 290], ["torch.nn.Module.__init__", "torch.nn.Parameter", "utils.EqualLinear", "utils.Blur", "utils.Blur", "math.sqrt", "torch.randn", "len", "len"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.ModulatedConv2d.__repr__": [[291, 294], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.ModulatedConv2d.forward": [[297, 339], ["utils.ModulatedConv2d.modulation().view", "weight.transpose().reshape.transpose().reshape.view", "torch.rsqrt", "input.view.view.view", "weight.transpose().reshape.transpose().reshape.view", "weight.transpose().reshape.transpose().reshape.transpose().reshape", "torch.nn.functional.conv_transpose2d", "out.view.view.view", "utils.ModulatedConv2d.blur", "utils.ModulatedConv2d.modulation", "torch.rsqrt.view", "utils.ModulatedConv2d.blur", "input.view.view.view", "op.conv2d_gradfix.conv2d", "out.view.view.view", "input.view.view.view", "op.conv2d_gradfix.conv2d", "out.view.view.view", "weight.transpose().reshape.transpose().reshape.pow().sum", "weight.transpose().reshape.transpose().reshape.transpose", "weight.transpose().reshape.transpose().reshape.pow"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv_transpose2d", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv2d"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.NoiseInjection.__init__": [[342, 346], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.NoiseInjection.forward": [[347, 353], ["image.new_empty().normal_", "image.new_empty"], "methods", ["None"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.ConstantInput.__init__": [[356, 360], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.ConstantInput.forward": [[361, 366], ["utils.ConstantInput.input.repeat"], "methods", ["None"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.StyledConv.__init__": [[369, 396], ["torch.nn.Module.__init__", "utils.ModulatedConv2d", "op.FusedLeakyReLU", "utils.NoiseInjection"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.StyledConv.forward": [[397, 405], ["utils.StyledConv.conv", "utils.StyledConv.activate", "utils.StyledConv.noise"], "methods", ["None"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.ScaledLeakyReLU.__init__": [[407, 411], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.ScaledLeakyReLU.forward": [[412, 416], ["torch.nn.functional.leaky_relu", "math.sqrt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.PositionEmbedding.__init__": [[440, 453], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.linspace", "torch.randn", "math.sqrt", "torch.linspace", "len", "len"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.PositionEmbedding.forward": [[454, 462], ["torch.cat", "torch.nn.functional.conv2d", "func"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv2d"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.FixedStyledConv.__init__": [[468, 519], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "utils.Blur", "utils.Blur", "math.sqrt", "torch.randn", "utils.NoiseInjection", "op.FusedLeakyReLU", "torch.ones", "len", "len"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.FixedStyledConv.__repr__": [[520, 523], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.FixedStyledConv.forward": [[526, 550], ["torch.rsqrt", "torch.nn.functional.conv_transpose2d", "utils.FixedStyledConv.blur", "utils.FixedStyledConv.noise", "utils.FixedStyledConv.activate", "torch.rsqrt.view", "weight.transpose", "utils.FixedStyledConv.blur", "op.conv2d_gradfix.conv2d", "op.conv2d_gradfix.conv2d", "weight.pow().sum", "weight.pow"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv_transpose2d", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv2d"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.ToRGB.__init__": [[555, 561], ["torch.nn.Module.__init__", "utils.FixedStyledConv", "torch.nn.Parameter", "utils.Upsample", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.ToRGB.forward": [[562, 579], ["utils.ToRGB.conv", "utils.ToRGB.upsample"], "methods", ["None"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.models.utils.make_kernel": [[110, 119], ["torch.tensor", "torch.tensor.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.fused_act.FusedLeakyReLUFunctionBackward.forward": [[29, 53], ["ctx.save_for_backward", "grad_output.new_empty", "fused.fused_bias_act", "grad_output.contiguous", "list", "fused.fused_bias_act.sum().detach", "range", "fused.fused_bias_act.sum"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "grad_output", ",", "out", ",", "bias", ",", "negative_slope", ",", "scale", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "out", ")", "\n", "ctx", ".", "negative_slope", "=", "negative_slope", "\n", "ctx", ".", "scale", "=", "scale", "\n", "\n", "empty", "=", "grad_output", ".", "new_empty", "(", "0", ")", "\n", "\n", "grad_input", "=", "fused", ".", "fused_bias_act", "(", "\n", "grad_output", ".", "contiguous", "(", ")", ",", "empty", ",", "out", ",", "3", ",", "1", ",", "negative_slope", ",", "scale", "\n", ")", "\n", "\n", "dim", "=", "[", "0", "]", "\n", "\n", "if", "grad_input", ".", "ndim", ">", "2", ":", "\n", "            ", "dim", "+=", "list", "(", "range", "(", "2", ",", "grad_input", ".", "ndim", ")", ")", "\n", "\n", "", "if", "bias", ":", "\n", "            ", "grad_bias", "=", "grad_input", ".", "sum", "(", "dim", ")", ".", "detach", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "grad_bias", "=", "empty", "\n", "\n", "", "return", "grad_input", ",", "grad_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.fused_act.FusedLeakyReLUFunctionBackward.backward": [[54, 62], ["fused.fused_bias_act"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradgrad_input", ",", "gradgrad_bias", ")", ":", "\n", "        ", "out", ",", "=", "ctx", ".", "saved_tensors", "\n", "gradgrad_out", "=", "fused", ".", "fused_bias_act", "(", "\n", "gradgrad_input", ",", "gradgrad_bias", ",", "out", ",", "3", ",", "1", ",", "ctx", ".", "negative_slope", ",", "ctx", ".", "scale", "\n", ")", "\n", "\n", "return", "gradgrad_out", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.fused_act.FusedLeakyReLUFunction.forward": [[65, 80], ["input.new_empty", "fused.fused_bias_act", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "bias", ",", "negative_slope", ",", "scale", ")", ":", "\n", "        ", "empty", "=", "input", ".", "new_empty", "(", "0", ")", "\n", "\n", "ctx", ".", "bias", "=", "bias", "is", "not", "None", "\n", "\n", "if", "bias", "is", "None", ":", "\n", "            ", "bias", "=", "empty", "\n", "\n", "", "out", "=", "fused", ".", "fused_bias_act", "(", "input", ",", "bias", ",", "empty", ",", "3", ",", "0", ",", "negative_slope", ",", "scale", ")", "\n", "ctx", ".", "save_for_backward", "(", "out", ")", "\n", "ctx", ".", "negative_slope", "=", "negative_slope", "\n", "ctx", ".", "scale", "=", "scale", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.fused_act.FusedLeakyReLUFunction.backward": [[81, 93], ["FusedLeakyReLUFunctionBackward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "out", ",", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_input", ",", "grad_bias", "=", "FusedLeakyReLUFunctionBackward", ".", "apply", "(", "\n", "grad_output", ",", "out", ",", "ctx", ".", "bias", ",", "ctx", ".", "negative_slope", ",", "ctx", ".", "scale", "\n", ")", "\n", "\n", "if", "not", "ctx", ".", "bias", ":", "\n", "            ", "grad_bias", "=", "None", "\n", "\n", "", "return", "grad_input", ",", "grad_bias", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.fused_act.FusedLeakyReLU.__init__": [[96, 107], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "bias", "=", "True", ",", "negative_slope", "=", "0.2", ",", "scale", "=", "2", "**", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "channel", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "\n", "", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.fused_act.FusedLeakyReLU.forward": [[108, 110], ["fused_act.fused_leaky_relu"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.fused_act.fused_leaky_relu"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "fused_leaky_relu", "(", "input", ",", "self", ".", "bias", ",", "self", ".", "negative_slope", ",", "self", ".", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.fused_act.fused_leaky_relu": [[112, 128], ["FusedLeakyReLUFunction.apply", "torch.nn.functional.leaky_relu", "torch.nn.functional.leaky_relu", "bias.view"], "function", ["None"], ["", "", "def", "fused_leaky_relu", "(", "input", ",", "bias", "=", "None", ",", "negative_slope", "=", "0.2", ",", "scale", "=", "2", "**", "0.5", ")", ":", "\n", "    ", "if", "input", ".", "device", ".", "type", "==", "\"cpu\"", ":", "\n", "        ", "if", "bias", "is", "not", "None", ":", "\n", "            ", "rest_dim", "=", "[", "1", "]", "*", "(", "input", ".", "ndim", "-", "bias", ".", "ndim", "-", "1", ")", "\n", "return", "(", "\n", "F", ".", "leaky_relu", "(", "\n", "input", "+", "bias", ".", "view", "(", "1", ",", "bias", ".", "shape", "[", "0", "]", ",", "*", "rest_dim", ")", ",", "negative_slope", "=", "0.2", "\n", ")", "\n", "*", "scale", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "leaky_relu", "(", "input", ",", "negative_slope", "=", "0.2", ")", "*", "scale", "\n", "\n", "", "", "else", ":", "\n", "        ", "return", "FusedLeakyReLUFunction", ".", "apply", "(", "input", ",", "bias", ",", "negative_slope", ",", "scale", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.no_weight_gradients": [[20, 28], ["None"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "no_weight_gradients", "(", ")", ":", "\n", "    ", "global", "weight_gradients_disabled", "\n", "\n", "old", "=", "weight_gradients_disabled", "\n", "weight_gradients_disabled", "=", "True", "\n", "yield", "\n", "weight_gradients_disabled", "=", "old", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv2d": [[30, 50], ["conv2d_gradfix.could_use_op", "torch.nn.functional.conv2d", "conv2d_gradfix().apply", "conv2d_gradfix.conv2d_gradfix"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.could_use_op", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv2d_gradfix"], ["", "def", "conv2d", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "if", "could_use_op", "(", "input", ")", ":", "\n", "        ", "return", "conv2d_gradfix", "(", "\n", "transpose", "=", "False", ",", "\n", "weight_shape", "=", "weight", ".", "shape", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "0", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", ")", ".", "apply", "(", "input", ",", "weight", ",", "bias", ")", "\n", "\n", "", "return", "F", ".", "conv2d", "(", "\n", "input", "=", "input", ",", "\n", "weight", "=", "weight", ",", "\n", "bias", "=", "bias", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv_transpose2d": [[53, 83], ["conv2d_gradfix.could_use_op", "torch.nn.functional.conv_transpose2d", "conv2d_gradfix().apply", "conv2d_gradfix.conv2d_gradfix"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.could_use_op", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv_transpose2d", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv2d_gradfix"], ["", "def", "conv_transpose2d", "(", "\n", "input", ",", "\n", "weight", ",", "\n", "bias", "=", "None", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "output_padding", "=", "0", ",", "\n", "groups", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", ")", ":", "\n", "    ", "if", "could_use_op", "(", "input", ")", ":", "\n", "        ", "return", "conv2d_gradfix", "(", "\n", "transpose", "=", "True", ",", "\n", "weight_shape", "=", "weight", ".", "shape", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "\n", "groups", "=", "groups", ",", "\n", "dilation", "=", "dilation", ",", "\n", ")", ".", "apply", "(", "input", ",", "weight", ",", "bias", ")", "\n", "\n", "", "return", "F", ".", "conv_transpose2d", "(", "\n", "input", "=", "input", ",", "\n", "weight", "=", "weight", ",", "\n", "bias", "=", "bias", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.could_use_op": [[86, 101], ["any", "warnings.warn", "torch.__version__.startswith"], "function", ["None"], ["", "def", "could_use_op", "(", "input", ")", ":", "\n", "    ", "if", "(", "not", "enabled", ")", "or", "(", "not", "torch", ".", "backends", ".", "cudnn", ".", "enabled", ")", ":", "\n", "        ", "return", "False", "\n", "\n", "", "if", "input", ".", "device", ".", "type", "!=", "\"cuda\"", ":", "\n", "        ", "return", "False", "\n", "\n", "", "if", "any", "(", "torch", ".", "__version__", ".", "startswith", "(", "x", ")", "for", "x", "in", "[", "\"1.7.\"", ",", "\"1.8.\"", "]", ")", ":", "\n", "        ", "return", "True", "\n", "\n", "", "warnings", ".", "warn", "(", "\n", "f\"conv2d_gradfix not supported on PyTorch {torch.__version__}. Falling back to torch.nn.functional.conv2d().\"", "\n", ")", "\n", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.ensure_tuple": [[103, 107], ["isinstance", "tuple"], "function", ["None"], ["", "def", "ensure_tuple", "(", "xs", ",", "ndim", ")", ":", "\n", "    ", "xs", "=", "tuple", "(", "xs", ")", "if", "isinstance", "(", "xs", ",", "(", "tuple", ",", "list", ")", ")", "else", "(", "xs", ",", ")", "*", "ndim", "\n", "\n", "return", "xs", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv2d_gradfix": [[112, 236], ["tuple", "conv2d_gradfix.ensure_tuple", "conv2d_gradfix.ensure_tuple", "conv2d_gradfix.ensure_tuple", "conv2d_gradfix.ensure_tuple", "dict", "ctx.save_for_backward", "torch._C._jit_get_operation", "torch._C._jit_get_operation.", "ctx.save_for_backward", "range", "torch.nn.functional.conv2d", "torch.nn.functional.conv_transpose2d", "conv2d_gradfix.conv2d_gradfix.calc_output_padding"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.ensure_tuple", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.ensure_tuple", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.ensure_tuple", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.ensure_tuple", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv_transpose2d"], ["def", "conv2d_gradfix", "(", "\n", "transpose", ",", "weight_shape", ",", "stride", ",", "padding", ",", "output_padding", ",", "dilation", ",", "groups", "\n", ")", ":", "\n", "    ", "ndim", "=", "2", "\n", "weight_shape", "=", "tuple", "(", "weight_shape", ")", "\n", "stride", "=", "ensure_tuple", "(", "stride", ",", "ndim", ")", "\n", "padding", "=", "ensure_tuple", "(", "padding", ",", "ndim", ")", "\n", "output_padding", "=", "ensure_tuple", "(", "output_padding", ",", "ndim", ")", "\n", "dilation", "=", "ensure_tuple", "(", "dilation", ",", "ndim", ")", "\n", "\n", "key", "=", "(", "transpose", ",", "weight_shape", ",", "stride", ",", "padding", ",", "output_padding", ",", "dilation", ",", "groups", ")", "\n", "if", "key", "in", "conv2d_gradfix_cache", ":", "\n", "        ", "return", "conv2d_gradfix_cache", "[", "key", "]", "\n", "\n", "", "common_kwargs", "=", "dict", "(", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", "\n", ")", "\n", "\n", "def", "calc_output_padding", "(", "input_shape", ",", "output_shape", ")", ":", "\n", "        ", "if", "transpose", ":", "\n", "            ", "return", "[", "0", ",", "0", "]", "\n", "\n", "", "return", "[", "\n", "input_shape", "[", "i", "+", "2", "]", "\n", "-", "(", "output_shape", "[", "i", "+", "2", "]", "-", "1", ")", "*", "stride", "[", "i", "]", "\n", "-", "(", "1", "-", "2", "*", "padding", "[", "i", "]", ")", "\n", "-", "dilation", "[", "i", "]", "*", "(", "weight_shape", "[", "i", "+", "2", "]", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "ndim", ")", "\n", "]", "\n", "\n", "", "class", "Conv2d", "(", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "weight", ",", "bias", ")", ":", "\n", "            ", "if", "not", "transpose", ":", "\n", "                ", "out", "=", "F", ".", "conv2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "**", "common_kwargs", ")", "\n", "\n", "", "else", ":", "\n", "                ", "out", "=", "F", ".", "conv_transpose2d", "(", "\n", "input", "=", "input", ",", "\n", "weight", "=", "weight", ",", "\n", "bias", "=", "bias", ",", "\n", "output_padding", "=", "output_padding", ",", "\n", "**", "common_kwargs", ",", "\n", ")", "\n", "\n", "", "ctx", ".", "save_for_backward", "(", "input", ",", "weight", ")", "\n", "\n", "return", "out", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "            ", "input", ",", "weight", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", ",", "grad_weight", ",", "grad_bias", "=", "None", ",", "None", ",", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "p", "=", "calc_output_padding", "(", "\n", "input_shape", "=", "input", ".", "shape", ",", "output_shape", "=", "grad_output", ".", "shape", "\n", ")", "\n", "grad_input", "=", "conv2d_gradfix", "(", "\n", "transpose", "=", "(", "not", "transpose", ")", ",", "\n", "weight_shape", "=", "weight_shape", ",", "\n", "output_padding", "=", "p", ",", "\n", "**", "common_kwargs", ",", "\n", ")", ".", "apply", "(", "grad_output", ",", "weight", ",", "None", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", "and", "not", "weight_gradients_disabled", ":", "\n", "                ", "grad_weight", "=", "Conv2dGradWeight", ".", "apply", "(", "grad_output", ",", "input", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "grad_bias", "=", "grad_output", ".", "sum", "(", "(", "0", ",", "2", ",", "3", ")", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_weight", ",", "grad_bias", "\n", "\n", "", "", "class", "Conv2dGradWeight", "(", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "grad_output", ",", "input", ")", ":", "\n", "            ", "op", "=", "torch", ".", "_C", ".", "_jit_get_operation", "(", "\n", "\"aten::cudnn_convolution_backward_weight\"", "\n", "if", "not", "transpose", "\n", "else", "\"aten::cudnn_convolution_transpose_backward_weight\"", "\n", ")", "\n", "flags", "=", "[", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", ",", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", ",", "\n", "torch", ".", "backends", ".", "cudnn", ".", "allow_tf32", ",", "\n", "]", "\n", "grad_weight", "=", "op", "(", "\n", "weight_shape", ",", "\n", "grad_output", ",", "\n", "input", ",", "\n", "padding", ",", "\n", "stride", ",", "\n", "dilation", ",", "\n", "groups", ",", "\n", "*", "flags", ",", "\n", ")", "\n", "ctx", ".", "save_for_backward", "(", "grad_output", ",", "input", ")", "\n", "\n", "return", "grad_weight", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_grad_weight", ")", ":", "\n", "            ", "grad_output", ",", "input", "=", "ctx", ".", "saved_tensors", "\n", "grad_grad_output", ",", "grad_grad_input", "=", "None", ",", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "grad_grad_output", "=", "Conv2d", ".", "apply", "(", "input", ",", "grad_grad_weight", ",", "None", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "p", "=", "calc_output_padding", "(", "\n", "input_shape", "=", "input", ".", "shape", ",", "output_shape", "=", "grad_output", ".", "shape", "\n", ")", "\n", "grad_grad_input", "=", "conv2d_gradfix", "(", "\n", "transpose", "=", "(", "not", "transpose", ")", ",", "\n", "weight_shape", "=", "weight_shape", ",", "\n", "output_padding", "=", "p", ",", "\n", "**", "common_kwargs", ",", "\n", ")", ".", "apply", "(", "grad_output", ",", "grad_grad_weight", ",", "None", ")", "\n", "\n", "", "return", "grad_grad_output", ",", "grad_grad_input", "\n", "\n", "", "", "conv2d_gradfix_cache", "[", "key", "]", "=", "Conv2d", "\n", "\n", "return", "Conv2d", "\n", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.UpFirDn2dBackward.forward": [[29, 70], ["grad_output.reshape.reshape.reshape", "upfirdn2d_op.upfirdn2d", "grad_input.view.view.view", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.upfirdn2d"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "\n", "ctx", ",", "grad_output", ",", "kernel", ",", "grad_kernel", ",", "up", ",", "down", ",", "pad", ",", "g_pad", ",", "in_size", ",", "out_size", "\n", ")", ":", "\n", "\n", "        ", "up_x", ",", "up_y", "=", "up", "\n", "down_x", ",", "down_y", "=", "down", "\n", "g_pad_x0", ",", "g_pad_x1", ",", "g_pad_y0", ",", "g_pad_y1", "=", "g_pad", "\n", "\n", "grad_output", "=", "grad_output", ".", "reshape", "(", "-", "1", ",", "out_size", "[", "0", "]", ",", "out_size", "[", "1", "]", ",", "1", ")", "\n", "\n", "grad_input", "=", "upfirdn2d_op", ".", "upfirdn2d", "(", "\n", "grad_output", ",", "\n", "grad_kernel", ",", "\n", "down_x", ",", "\n", "down_y", ",", "\n", "up_x", ",", "\n", "up_y", ",", "\n", "g_pad_x0", ",", "\n", "g_pad_x1", ",", "\n", "g_pad_y0", ",", "\n", "g_pad_y1", ",", "\n", ")", "\n", "grad_input", "=", "grad_input", ".", "view", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ",", "in_size", "[", "2", "]", ",", "in_size", "[", "3", "]", ")", "\n", "\n", "ctx", ".", "save_for_backward", "(", "kernel", ")", "\n", "\n", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "=", "pad", "\n", "\n", "ctx", ".", "up_x", "=", "up_x", "\n", "ctx", ".", "up_y", "=", "up_y", "\n", "ctx", ".", "down_x", "=", "down_x", "\n", "ctx", ".", "down_y", "=", "down_y", "\n", "ctx", ".", "pad_x0", "=", "pad_x0", "\n", "ctx", ".", "pad_x1", "=", "pad_x1", "\n", "ctx", ".", "pad_y0", "=", "pad_y0", "\n", "ctx", ".", "pad_y1", "=", "pad_y1", "\n", "ctx", ".", "in_size", "=", "in_size", "\n", "ctx", ".", "out_size", "=", "out_size", "\n", "\n", "return", "grad_input", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.UpFirDn2dBackward.backward": [[71, 95], ["gradgrad_input.reshape.reshape.reshape", "upfirdn2d_op.upfirdn2d", "gradgrad_out.view.view.view"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.upfirdn2d"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "gradgrad_input", ")", ":", "\n", "        ", "kernel", ",", "=", "ctx", ".", "saved_tensors", "\n", "\n", "gradgrad_input", "=", "gradgrad_input", ".", "reshape", "(", "-", "1", ",", "ctx", ".", "in_size", "[", "2", "]", ",", "ctx", ".", "in_size", "[", "3", "]", ",", "1", ")", "\n", "\n", "gradgrad_out", "=", "upfirdn2d_op", ".", "upfirdn2d", "(", "\n", "gradgrad_input", ",", "\n", "kernel", ",", "\n", "ctx", ".", "up_x", ",", "\n", "ctx", ".", "up_y", ",", "\n", "ctx", ".", "down_x", ",", "\n", "ctx", ".", "down_y", ",", "\n", "ctx", ".", "pad_x0", ",", "\n", "ctx", ".", "pad_x1", ",", "\n", "ctx", ".", "pad_y0", ",", "\n", "ctx", ".", "pad_y1", ",", "\n", ")", "\n", "# gradgrad_out = gradgrad_out.view(ctx.in_size[0], ctx.out_size[0], ctx.out_size[1], ctx.in_size[3])", "\n", "gradgrad_out", "=", "gradgrad_out", ".", "view", "(", "\n", "ctx", ".", "in_size", "[", "0", "]", ",", "ctx", ".", "in_size", "[", "1", "]", ",", "ctx", ".", "out_size", "[", "0", "]", ",", "ctx", ".", "out_size", "[", "1", "]", "\n", ")", "\n", "\n", "return", "gradgrad_out", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.UpFirDn2d.forward": [[98, 134], ["input.reshape.reshape.reshape", "ctx.save_for_backward", "upfirdn2d_op.upfirdn2d", "out.view.view.view", "torch.flip"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.upfirdn2d"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "kernel", ",", "up", ",", "down", ",", "pad", ")", ":", "\n", "        ", "up_x", ",", "up_y", "=", "up", "\n", "down_x", ",", "down_y", "=", "down", "\n", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "=", "pad", "\n", "\n", "kernel_h", ",", "kernel_w", "=", "kernel", ".", "shape", "\n", "batch", ",", "channel", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "ctx", ".", "in_size", "=", "input", ".", "shape", "\n", "\n", "input", "=", "input", ".", "reshape", "(", "-", "1", ",", "in_h", ",", "in_w", ",", "1", ")", "\n", "\n", "ctx", ".", "save_for_backward", "(", "kernel", ",", "torch", ".", "flip", "(", "kernel", ",", "[", "0", ",", "1", "]", ")", ")", "\n", "\n", "out_h", "=", "(", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", "-", "kernel_h", "+", "down_y", ")", "//", "down_y", "\n", "out_w", "=", "(", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "-", "kernel_w", "+", "down_x", ")", "//", "down_x", "\n", "ctx", ".", "out_size", "=", "(", "out_h", ",", "out_w", ")", "\n", "\n", "ctx", ".", "up", "=", "(", "up_x", ",", "up_y", ")", "\n", "ctx", ".", "down", "=", "(", "down_x", ",", "down_y", ")", "\n", "ctx", ".", "pad", "=", "(", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", ")", "\n", "\n", "g_pad_x0", "=", "kernel_w", "-", "pad_x0", "-", "1", "\n", "g_pad_y0", "=", "kernel_h", "-", "pad_y0", "-", "1", "\n", "g_pad_x1", "=", "in_w", "*", "up_x", "-", "out_w", "*", "down_x", "+", "pad_x0", "-", "up_x", "+", "1", "\n", "g_pad_y1", "=", "in_h", "*", "up_y", "-", "out_h", "*", "down_y", "+", "pad_y0", "-", "up_y", "+", "1", "\n", "\n", "ctx", ".", "g_pad", "=", "(", "g_pad_x0", ",", "g_pad_x1", ",", "g_pad_y0", ",", "g_pad_y1", ")", "\n", "\n", "out", "=", "upfirdn2d_op", ".", "upfirdn2d", "(", "\n", "input", ",", "kernel", ",", "up_x", ",", "up_y", ",", "down_x", ",", "down_y", ",", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "\n", ")", "\n", "# out = out.view(major, out_h, out_w, minor)", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "channel", ",", "out_h", ",", "out_w", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.UpFirDn2d.backward": [[135, 155], ["UpFirDn2dBackward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "kernel", ",", "grad_kernel", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_input", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "UpFirDn2dBackward", ".", "apply", "(", "\n", "grad_output", ",", "\n", "kernel", ",", "\n", "grad_kernel", ",", "\n", "ctx", ".", "up", ",", "\n", "ctx", ".", "down", ",", "\n", "ctx", ".", "pad", ",", "\n", "ctx", ".", "g_pad", ",", "\n", "ctx", ".", "in_size", ",", "\n", "ctx", ".", "out_size", ",", "\n", ")", "\n", "\n", "", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.upfirdn2d": [[157, 174], ["isinstance", "isinstance", "len", "upfirdn2d.upfirdn2d_native", "UpFirDn2d.apply"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.upfirdn2d_native"], ["", "", "def", "upfirdn2d", "(", "input", ",", "kernel", ",", "up", "=", "1", ",", "down", "=", "1", ",", "pad", "=", "(", "0", ",", "0", ")", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "up", ",", "abc", ".", "Iterable", ")", ":", "\n", "        ", "up", "=", "(", "up", ",", "up", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "down", ",", "abc", ".", "Iterable", ")", ":", "\n", "        ", "down", "=", "(", "down", ",", "down", ")", "\n", "\n", "", "if", "len", "(", "pad", ")", "==", "2", ":", "\n", "        ", "pad", "=", "(", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", ",", "pad", "[", "0", "]", ",", "pad", "[", "1", "]", ")", "\n", "\n", "", "if", "input", ".", "device", ".", "type", "==", "\"cpu\"", ":", "\n", "        ", "out", "=", "upfirdn2d_native", "(", "input", ",", "kernel", ",", "*", "up", ",", "*", "down", ",", "*", "pad", ")", "\n", "\n", "", "else", ":", "\n", "        ", "out", "=", "UpFirDn2d", ".", "apply", "(", "input", ",", "kernel", ",", "up", ",", "down", ",", "pad", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.upfirdn2d.upfirdn2d_native": [[176, 218], ["input.reshape.reshape", "input.reshape.view", "torch.nn.functional.pad", "out.permute.view", "torch.nn.functional.pad", "out.permute.permute", "out.permute.reshape", "torch.flip().view", "torch.nn.functional.conv2d", "out.permute.reshape", "out.permute.permute", "out.permute.view", "max", "max", "max", "max", "torch.flip", "max", "max", "max", "max"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.op.conv2d_gradfix.conv2d"], ["", "def", "upfirdn2d_native", "(", "\n", "input", ",", "kernel", ",", "up_x", ",", "up_y", ",", "down_x", ",", "down_y", ",", "pad_x0", ",", "pad_x1", ",", "pad_y0", ",", "pad_y1", "\n", ")", ":", "\n", "    ", "_", ",", "channel", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "input", "=", "input", ".", "reshape", "(", "-", "1", ",", "in_h", ",", "in_w", ",", "1", ")", "\n", "\n", "_", ",", "in_h", ",", "in_w", ",", "minor", "=", "input", ".", "shape", "\n", "kernel_h", ",", "kernel_w", "=", "kernel", ".", "shape", "\n", "\n", "out", "=", "input", ".", "view", "(", "-", "1", ",", "in_h", ",", "1", ",", "in_w", ",", "1", ",", "minor", ")", "\n", "out", "=", "F", ".", "pad", "(", "out", ",", "[", "0", ",", "0", ",", "0", ",", "up_x", "-", "1", ",", "0", ",", "0", ",", "0", ",", "up_y", "-", "1", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "in_h", "*", "up_y", ",", "in_w", "*", "up_x", ",", "minor", ")", "\n", "\n", "out", "=", "F", ".", "pad", "(", "\n", "out", ",", "[", "0", ",", "0", ",", "max", "(", "pad_x0", ",", "0", ")", ",", "max", "(", "pad_x1", ",", "0", ")", ",", "max", "(", "pad_y0", ",", "0", ")", ",", "max", "(", "pad_y1", ",", "0", ")", "]", "\n", ")", "\n", "out", "=", "out", "[", "\n", ":", ",", "\n", "max", "(", "-", "pad_y0", ",", "0", ")", ":", "out", ".", "shape", "[", "1", "]", "-", "max", "(", "-", "pad_y1", ",", "0", ")", ",", "\n", "max", "(", "-", "pad_x0", ",", "0", ")", ":", "out", ".", "shape", "[", "2", "]", "-", "max", "(", "-", "pad_x1", ",", "0", ")", ",", "\n", ":", ",", "\n", "]", "\n", "\n", "out", "=", "out", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "out", "=", "out", ".", "reshape", "(", "\n", "[", "-", "1", ",", "1", ",", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", ",", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "]", "\n", ")", "\n", "w", "=", "torch", ".", "flip", "(", "kernel", ",", "[", "0", ",", "1", "]", ")", ".", "view", "(", "1", ",", "1", ",", "kernel_h", ",", "kernel_w", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "out", ",", "w", ")", "\n", "out", "=", "out", ".", "reshape", "(", "\n", "-", "1", ",", "\n", "minor", ",", "\n", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", "-", "kernel_h", "+", "1", ",", "\n", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "-", "kernel_w", "+", "1", ",", "\n", ")", "\n", "out", "=", "out", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "out", "=", "out", "[", ":", ",", ":", ":", "down_y", ",", ":", ":", "down_x", ",", ":", "]", "\n", "\n", "out_h", "=", "(", "in_h", "*", "up_y", "+", "pad_y0", "+", "pad_y1", "-", "kernel_h", "+", "down_y", ")", "//", "down_y", "\n", "out_w", "=", "(", "in_w", "*", "up_x", "+", "pad_x0", "+", "pad_x1", "-", "kernel_w", "+", "down_x", ")", "//", "down_x", "\n", "\n", "return", "out", ".", "view", "(", "-", "1", ",", "channel", ",", "out_h", ",", "out_w", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.model_irse.Backbone.__init__": [[32, 65], ["torch.nn.Module.__init__", "models.encoders.helpers.get_blocks", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "models.encoders.helpers.Flatten", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "models.encoders.helpers.Flatten", "torch.nn.Linear", "torch.nn.BatchNorm1d", "modules.append", "unit_module"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_blocks"], ["\t", "def", "__init__", "(", "self", ",", "input_size", ",", "num_layers", ",", "mode", "=", "'ir'", ",", "drop_ratio", "=", "0.4", ",", "affine", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "Backbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "input_size", "in", "[", "112", ",", "224", "]", ",", "\"input_size should be 112 or 224\"", "\n", "assert", "num_layers", "in", "[", "50", ",", "100", ",", "152", "]", ",", "\"num_layers should be 50, 100 or 152\"", "\n", "assert", "mode", "in", "[", "'ir'", ",", "'ir_se'", "]", ",", "\"mode should be ir or ir_se\"", "\n", "blocks", "=", "get_blocks", "(", "num_layers", ")", "\n", "if", "mode", "==", "'ir'", ":", "\n", "\t\t\t", "unit_module", "=", "bottleneck_IR", "\n", "", "elif", "mode", "==", "'ir_se'", ":", "\n", "\t\t\t", "unit_module", "=", "bottleneck_IR_SE", "\n", "", "self", ".", "input_layer", "=", "Sequential", "(", "Conv2d", "(", "3", ",", "64", ",", "(", "3", ",", "3", ")", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "PReLU", "(", "64", ")", ")", "\n", "if", "input_size", "==", "112", ":", "\n", "\t\t\t", "self", ".", "output_layer", "=", "Sequential", "(", "BatchNorm2d", "(", "512", ")", ",", "\n", "Dropout", "(", "drop_ratio", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "Linear", "(", "512", "*", "7", "*", "7", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ",", "affine", "=", "affine", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "output_layer", "=", "Sequential", "(", "BatchNorm2d", "(", "512", ")", ",", "\n", "Dropout", "(", "drop_ratio", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "Linear", "(", "512", "*", "14", "*", "14", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ",", "affine", "=", "affine", ")", ")", "\n", "\n", "", "modules", "=", "[", "]", "\n", "for", "block", "in", "blocks", ":", "\n", "\t\t\t", "for", "bottleneck", "in", "block", ":", "\n", "\t\t\t\t", "modules", ".", "append", "(", "unit_module", "(", "bottleneck", ".", "in_channel", ",", "\n", "bottleneck", ".", "depth", ",", "\n", "bottleneck", ".", "stride", ")", ")", "\n", "", "", "self", ".", "body", "=", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.model_irse.Backbone.forward": [[66, 71], ["model_irse.Backbone.input_layer", "model_irse.Backbone.body", "model_irse.Backbone.output_layer", "models.encoders.helpers.l2_norm"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.l2_norm"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "input_layer", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "x", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "return", "l2_norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.model_irse.IR_50": [[73, 77], ["model_irse.Backbone"], "function", ["None"], ["", "", "def", "IR_50", "(", "input_size", ")", ":", "\n", "\t", "\"\"\"Constructs a ir-50 model.\"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "num_layers", "=", "50", ",", "mode", "=", "'ir'", ",", "drop_ratio", "=", "0.4", ",", "affine", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.model_irse.IR_101": [[79, 83], ["model_irse.Backbone"], "function", ["None"], ["", "def", "IR_101", "(", "input_size", ")", ":", "\n", "\t", "\"\"\"Constructs a ir-101 model.\"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "num_layers", "=", "100", ",", "mode", "=", "'ir'", ",", "drop_ratio", "=", "0.4", ",", "affine", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.model_irse.IR_152": [[85, 89], ["model_irse.Backbone"], "function", ["None"], ["", "def", "IR_152", "(", "input_size", ")", ":", "\n", "\t", "\"\"\"Constructs a ir-152 model.\"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "num_layers", "=", "152", ",", "mode", "=", "'ir'", ",", "drop_ratio", "=", "0.4", ",", "affine", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.model_irse.IR_SE_50": [[91, 95], ["model_irse.Backbone"], "function", ["None"], ["", "def", "IR_SE_50", "(", "input_size", ")", ":", "\n", "\t", "\"\"\"Constructs a ir_se-50 model.\"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "num_layers", "=", "50", ",", "mode", "=", "'ir_se'", ",", "drop_ratio", "=", "0.4", ",", "affine", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.model_irse.IR_SE_101": [[97, 101], ["model_irse.Backbone"], "function", ["None"], ["", "def", "IR_SE_101", "(", "input_size", ")", ":", "\n", "\t", "\"\"\"Constructs a ir_se-101 model.\"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "num_layers", "=", "100", ",", "mode", "=", "'ir_se'", ",", "drop_ratio", "=", "0.4", ",", "affine", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.model_irse.IR_SE_152": [[103, 107], ["model_irse.Backbone"], "function", ["None"], ["", "def", "IR_SE_152", "(", "input_size", ")", ":", "\n", "\t", "\"\"\"Constructs a ir_se-152 model.\"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "num_layers", "=", "152", ",", "mode", "=", "'ir_se'", ",", "drop_ratio", "=", "0.4", ",", "affine", "=", "False", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_psp_encoders.BackboneEncoder.__init__": [[38, 64], ["torch.nn.Module.__init__", "models.encoders.helpers.get_blocks", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ModuleList", "range", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "models.encoders.map2style.GradualStyleBlock", "restyle_psp_encoders.BackboneEncoder.styles.append", "modules.append", "unit_module"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_blocks"], ["def", "__init__", "(", "self", ",", "num_layers", ",", "mode", "=", "'ir'", ",", "n_styles", "=", "18", ",", "input_nc", "=", "3", ")", ":", "\n", "        ", "super", "(", "BackboneEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "num_layers", "in", "[", "50", ",", "100", ",", "152", "]", ",", "'num_layers should be 50,100, or 152'", "\n", "assert", "mode", "in", "[", "'ir'", ",", "'ir_se'", "]", ",", "'mode should be ir or ir_se'", "\n", "blocks", "=", "get_blocks", "(", "num_layers", ")", "\n", "if", "mode", "==", "'ir'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR", "\n", "", "elif", "mode", "==", "'ir_se'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR_SE", "\n", "\n", "", "self", ".", "input_layer", "=", "Sequential", "(", "Conv2d", "(", "input_nc", ",", "64", ",", "(", "3", ",", "3", ")", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "PReLU", "(", "64", ")", ")", "\n", "modules", "=", "[", "]", "\n", "for", "block", "in", "blocks", ":", "\n", "            ", "for", "bottleneck", "in", "block", ":", "\n", "                ", "modules", ".", "append", "(", "unit_module", "(", "bottleneck", ".", "in_channel", ",", "\n", "bottleneck", ".", "depth", ",", "\n", "bottleneck", ".", "stride", ")", ")", "\n", "", "", "self", ".", "body", "=", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "styles", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "style_count", "=", "n_styles", "\n", "for", "i", "in", "range", "(", "self", ".", "style_count", ")", ":", "\n", "            ", "style", "=", "GradualStyleBlock", "(", "512", ",", "512", ",", "16", ")", "\n", "self", ".", "styles", ".", "append", "(", "style", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_psp_encoders.BackboneEncoder.forward": [[65, 73], ["restyle_psp_encoders.BackboneEncoder.input_layer", "restyle_psp_encoders.BackboneEncoder.body", "range", "torch.stack", "latents.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "input_layer", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "latents", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "style_count", ")", ":", "\n", "            ", "latents", ".", "append", "(", "self", ".", "styles", "[", "j", "]", "(", "x", ")", ")", "\n", "", "out", "=", "torch", ".", "stack", "(", "latents", ",", "dim", "=", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_psp_encoders.ResNetBackboneEncoder.__init__": [[80, 105], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torchvision.models.resnet.resnet34", "torch.nn.Sequential", "torch.nn.ModuleList", "range", "models.encoders.map2style.GradualStyleBlock", "restyle_psp_encoders.ResNetBackboneEncoder.styles.append", "modules.append"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["def", "__init__", "(", "self", ",", "n_styles", "=", "18", ",", "input_nc", "=", "3", ")", ":", "\n", "        ", "super", "(", "ResNetBackboneEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "PReLU", "(", "64", ")", "\n", "\n", "resnet_basenet", "=", "resnet34", "(", "pretrained", "=", "True", ")", "\n", "blocks", "=", "[", "\n", "resnet_basenet", ".", "layer1", ",", "\n", "resnet_basenet", ".", "layer2", ",", "\n", "resnet_basenet", ".", "layer3", ",", "\n", "resnet_basenet", ".", "layer4", "\n", "]", "\n", "modules", "=", "[", "]", "\n", "for", "block", "in", "blocks", ":", "\n", "            ", "for", "bottleneck", "in", "block", ":", "\n", "                ", "modules", ".", "append", "(", "bottleneck", ")", "\n", "", "", "self", ".", "body", "=", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "styles", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "style_count", "=", "n_styles", "\n", "for", "i", "in", "range", "(", "self", ".", "style_count", ")", ":", "\n", "            ", "style", "=", "GradualStyleBlock", "(", "512", ",", "512", ",", "16", ")", "\n", "self", ".", "styles", ".", "append", "(", "style", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_psp_encoders.ResNetBackboneEncoder.forward": [[106, 116], ["restyle_psp_encoders.ResNetBackboneEncoder.conv1", "restyle_psp_encoders.ResNetBackboneEncoder.bn1", "restyle_psp_encoders.ResNetBackboneEncoder.relu", "restyle_psp_encoders.ResNetBackboneEncoder.body", "range", "torch.stack", "latents.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "latents", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "style_count", ")", ":", "\n", "            ", "latents", ".", "append", "(", "self", ".", "styles", "[", "j", "]", "(", "x", ")", ")", "\n", "", "out", "=", "torch", ".", "stack", "(", "latents", ",", "dim", "=", "1", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.Flatten.forward": [[33, 35], ["input.view", "input.size"], "methods", ["None"], ["\t", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\t\t", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.SEModule.__init__": [[79, 86], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["\t", "def", "__init__", "(", "self", ",", "channels", ",", "reduction", ")", ":", "\n", "\t\t", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "Conv2d", "(", "channels", ",", "channels", "//", "reduction", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "Conv2d", "(", "channels", "//", "reduction", ",", "channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.SEModule.forward": [[87, 95], ["helpers.SEModule.avg_pool", "helpers.SEModule.fc1", "helpers.SEModule.relu", "helpers.SEModule.fc2", "helpers.SEModule.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "module_input", "=", "x", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "return", "module_input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.bottleneck_IR.__init__": [[98, 111], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_channel", ",", "depth", ",", "stride", ")", ":", "\n", "\t\t", "super", "(", "bottleneck_IR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channel", "==", "depth", ":", "\n", "\t\t\t", "self", ".", "shortcut_layer", "=", "MaxPool2d", "(", "1", ",", "stride", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "shortcut_layer", "=", "Sequential", "(", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "1", ",", "1", ")", ",", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "depth", ")", "\n", ")", "\n", "", "self", ".", "res_layer", "=", "Sequential", "(", "\n", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "PReLU", "(", "depth", ")", ",", "\n", "Conv2d", "(", "depth", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "BatchNorm2d", "(", "depth", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.bottleneck_IR.forward": [[113, 117], ["helpers.bottleneck_IR.shortcut_layer", "helpers.bottleneck_IR.res_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "shortcut", "=", "self", ".", "shortcut_layer", "(", "x", ")", "\n", "res", "=", "self", ".", "res_layer", "(", "x", ")", "\n", "return", "res", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.bottleneck_IR_SE.__init__": [[120, 136], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "helpers.SEModule", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_channel", ",", "depth", ",", "stride", ")", ":", "\n", "\t\t", "super", "(", "bottleneck_IR_SE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channel", "==", "depth", ":", "\n", "\t\t\t", "self", ".", "shortcut_layer", "=", "MaxPool2d", "(", "1", ",", "stride", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "shortcut_layer", "=", "Sequential", "(", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "1", ",", "1", ")", ",", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "depth", ")", "\n", ")", "\n", "", "self", ".", "res_layer", "=", "Sequential", "(", "\n", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "PReLU", "(", "depth", ")", ",", "\n", "Conv2d", "(", "depth", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "depth", ")", ",", "\n", "SEModule", "(", "depth", ",", "16", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.bottleneck_IR_SE.forward": [[138, 142], ["helpers.bottleneck_IR_SE.shortcut_layer", "helpers.bottleneck_IR_SE.res_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "shortcut", "=", "self", ".", "shortcut_layer", "(", "x", ")", "\n", "res", "=", "self", ".", "res_layer", "(", "x", ")", "\n", "return", "res", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.ConditionedBatchNorm2d.__init__": [[145, 160], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "cond_features", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConditionedBatchNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cond_features", "=", "cond_features", "\n", "self", ".", "bn", "=", "BatchNorm2d", "(", "num_features", ",", "*", "args", ",", "affine", "=", "False", ",", "**", "kwargs", ")", "\n", "self", ".", "mlp_gamma", "=", "Sequential", "(", "\n", "Linear", "(", "cond_features", ",", "num_features", ")", ",", "\n", "ReLU", "(", "num_features", ")", ",", "\n", "Linear", "(", "num_features", ",", "num_features", ")", ",", "\n", ")", "\n", "self", ".", "mlp_beta", "=", "Sequential", "(", "\n", "Linear", "(", "cond_features", ",", "num_features", ")", ",", "\n", "ReLU", "(", "num_features", ")", ",", "\n", "Linear", "(", "num_features", ",", "num_features", ")", ",", "\n", ")", "\n", "self", ".", "_condition", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.ConditionedBatchNorm2d.set_condition": [[161, 165], ["input.view.view.view", "input.view.view.size", "input.view.view.size"], "methods", ["None"], ["", "def", "set_condition", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "assert", "input", ".", "size", "(", "1", ")", "==", "self", ".", "cond_features", "\n", "self", ".", "_condition", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.ConditionedBatchNorm2d.forward": [[166, 172], ["input.size", "helpers.ConditionedBatchNorm2d.bn", "helpers.ConditionedBatchNorm2d.mlp_beta().view", "helpers.ConditionedBatchNorm2d.mlp_gamma().view", "helpers.ConditionedBatchNorm2d.mlp_beta", "helpers.ConditionedBatchNorm2d.mlp_gamma"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "n", ",", "c", ",", "_", ",", "_", "=", "input", ".", "size", "(", ")", "\n", "out", "=", "self", ".", "bn", "(", "input", ")", "\n", "gamma", "=", "self", ".", "mlp_gamma", "(", "self", ".", "_condition", ")", ".", "view", "(", "n", ",", "c", ",", "1", ",", "1", ")", "+", "1.0", "\n", "beta", "=", "self", ".", "mlp_beta", "(", "self", ".", "_condition", ")", ".", "view", "(", "n", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "gamma", "*", "out", "+", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.bottleneck_IR_CBN.__init__": [[175, 190], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.Sequential", "helpers.ConditionedBatchNorm2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.Conv2d", "helpers.ConditionedBatchNorm2d", "torch.nn.Conv2d", "helpers.ConditionedBatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_channel", ",", "style_channel", ",", "depth", ",", "stride", ")", ":", "\n", "\t\t", "super", "(", "bottleneck_IR_CBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channel", "==", "depth", ":", "\n", "\t\t\t", "self", ".", "shortcut_layer", "=", "MaxPool2d", "(", "1", ",", "stride", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "shortcut_layer", "=", "Sequential", "(", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "1", ",", "1", ")", ",", "stride", ",", "bias", "=", "False", ")", ",", "\n", "ConditionedBatchNorm2d", "(", "depth", ",", "style_channel", ")", "\n", ")", "\n", "", "self", ".", "res_layer", "=", "Sequential", "(", "\n", "ConditionedBatchNorm2d", "(", "in_channel", ",", "style_channel", ")", ",", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "PReLU", "(", "depth", ")", ",", "\n", "Conv2d", "(", "depth", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "ConditionedBatchNorm2d", "(", "depth", ",", "style_channel", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.bottleneck_IR_CBN.forward": [[192, 196], ["helpers.bottleneck_IR_CBN.shortcut_layer", "helpers.bottleneck_IR_CBN.res_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "shortcut", "=", "self", ".", "shortcut_layer", "(", "x", ")", "\n", "res", "=", "self", ".", "res_layer", "(", "x", ")", "\n", "return", "res", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.bottleneck_IR_SE_CBN.__init__": [[199, 215], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.Sequential", "helpers.ConditionedBatchNorm2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.Conv2d", "helpers.ConditionedBatchNorm2d", "helpers.SEModule", "torch.nn.Conv2d", "helpers.ConditionedBatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_channel", ",", "style_channel", ",", "depth", ",", "stride", ")", ":", "\n", "\t\t", "super", "(", "bottleneck_IR_SE_CBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channel", "==", "depth", ":", "\n", "\t\t\t", "self", ".", "shortcut_layer", "=", "MaxPool2d", "(", "1", ",", "stride", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "shortcut_layer", "=", "Sequential", "(", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "1", ",", "1", ")", ",", "stride", ",", "bias", "=", "False", ")", ",", "\n", "ConditionedBatchNorm2d", "(", "depth", ",", "style_channel", ")", "\n", ")", "\n", "", "self", ".", "res_layer", "=", "Sequential", "(", "\n", "ConditionedBatchNorm2d", "(", "in_channel", ",", "style_channel", ")", ",", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "PReLU", "(", "depth", ")", ",", "\n", "Conv2d", "(", "depth", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "ConditionedBatchNorm2d", "(", "depth", ",", "style_channel", ")", ",", "\n", "SEModule", "(", "depth", ",", "16", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.bottleneck_IR_SE_CBN.forward": [[217, 221], ["helpers.bottleneck_IR_SE_CBN.shortcut_layer", "helpers.bottleneck_IR_SE_CBN.res_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "shortcut", "=", "self", ".", "shortcut_layer", "(", "x", ")", "\n", "res", "=", "self", ".", "res_layer", "(", "x", ")", "\n", "return", "res", "+", "shortcut", "", "", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.l2_norm": [[37, 41], ["torch.norm", "torch.div"], "function", ["None"], ["", "", "def", "l2_norm", "(", "input", ",", "axis", "=", "1", ")", ":", "\n", "\t", "norm", "=", "torch", ".", "norm", "(", "input", ",", "2", ",", "axis", ",", "True", ")", "\n", "output", "=", "torch", ".", "div", "(", "input", ",", "norm", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_block": [[47, 49], ["helpers.Bottleneck", "helpers.Bottleneck", "range"], "function", ["None"], ["", "def", "get_block", "(", "in_channel", ",", "depth", ",", "num_units", ",", "stride", "=", "2", ")", ":", "\n", "\t", "return", "[", "Bottleneck", "(", "in_channel", ",", "depth", ",", "stride", ")", "]", "+", "[", "Bottleneck", "(", "depth", ",", "depth", ",", "1", ")", "for", "i", "in", "range", "(", "num_units", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_blocks": [[51, 76], ["helpers.get_block", "helpers.get_block", "helpers.get_block", "helpers.get_block", "helpers.get_block", "helpers.get_block", "helpers.get_block", "helpers.get_block", "ValueError", "helpers.get_block", "helpers.get_block", "helpers.get_block", "helpers.get_block"], "function", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_block", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_block", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_block", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_block", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_block", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_block", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_block", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_block", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_block", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_block", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_block", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.helpers.get_block"], ["", "def", "get_blocks", "(", "num_layers", ")", ":", "\n", "\t", "if", "num_layers", "==", "50", ":", "\n", "\t\t", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "4", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "14", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "", "elif", "num_layers", "==", "100", ":", "\n", "\t\t", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "13", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "30", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "", "elif", "num_layers", "==", "152", ":", "\n", "\t\t", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "8", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "36", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "", "else", ":", "\n", "\t\t", "raise", "ValueError", "(", "\"Invalid number of layers: {}. Must be one of [50, 100, 152]\"", ".", "format", "(", "num_layers", ")", ")", "\n", "", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.map2style.GradualStyleBlock.__init__": [[31, 46], ["torch.nn.Module.__init__", "int", "range", "torch.nn.Sequential", "models.utils.EqualLinear", "numpy.log2", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_c", ",", "out_c", ",", "spatial", ")", ":", "\n", "        ", "super", "(", "GradualStyleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_c", "=", "out_c", "\n", "self", ".", "spatial", "=", "spatial", "\n", "num_pools", "=", "int", "(", "np", ".", "log2", "(", "spatial", ")", ")", "\n", "modules", "=", "[", "]", "\n", "modules", "+=", "[", "Conv2d", "(", "in_c", ",", "out_c", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "]", "\n", "for", "i", "in", "range", "(", "num_pools", "-", "1", ")", ":", "\n", "            ", "modules", "+=", "[", "\n", "Conv2d", "(", "out_c", ",", "out_c", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", "]", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "self", ".", "linear", "=", "EqualLinear", "(", "out_c", ",", "out_c", ",", "lr_mul", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.map2style.GradualStyleBlock.forward": [[47, 52], ["map2style.GradualStyleBlock.convs", "map2style.GradualStyleBlock.view", "map2style.GradualStyleBlock.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "convs", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "out_c", ")", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_encoder.RestyleEncoder.__init__": [[34, 63], ["torch.nn.Module.__init__", "restyle_encoder.RestyleEncoder.set_encoder().to", "torch.nn.AdaptiveAvgPool2d", "restyle_encoder.RestyleEncoder.init_avg_image", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "restyle_encoder.RestyleEncoder.set_encoder"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_encoder.RestyleEncoder.init_avg_image", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_encoder.RestyleEncoder.set_encoder"], ["    ", "def", "__init__", "(", "self", ",", "decoder", ",", "encoder_type", "=", "\"BackboneEncoder\"", ",", "distributed", "=", "False", ",", "local_rank", "=", "0", ",", "device", "=", "\"cuda\"", ")", ":", "\n", "        ", "super", "(", "RestyleEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Define architecturece)", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "n_styles", "=", "decoder", ".", "n_latent", "\n", "self", ".", "encoder_type", "=", "encoder_type", "\n", "self", ".", "encoder", "=", "self", ".", "set_encoder", "(", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "face_pool", "=", "torch", ".", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "256", ",", "256", ")", ")", "\n", "self", ".", "latent_avg", ",", "self", ".", "image_avg", "=", "None", ",", "None", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "init_avg_image", "(", ")", "\n", "# Load weights if needed", "\n", "if", "distributed", ":", "\n", "            ", "self", ".", "decoder_parallel", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "self", ".", "decoder", ",", "\n", "device_ids", "=", "[", "local_rank", "]", ",", "\n", "output_device", "=", "local_rank", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "True", ",", "\n", ")", "\n", "self", ".", "encoder_parallel", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "self", ".", "encoder", ",", "\n", "device_ids", "=", "[", "local_rank", "]", ",", "\n", "output_device", "=", "local_rank", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "decoder_parallel", "=", "self", ".", "decoder", "\n", "self", ".", "encoder_parallel", "=", "self", ".", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_encoder.RestyleEncoder.set_encoder": [[64, 72], ["models.encoders.restyle_psp_encoders.BackboneEncoder", "models.encoders.restyle_psp_encoders.ResNetBackboneEncoder", "Exception"], "methods", ["None"], ["", "", "def", "set_encoder", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "encoder_type", "==", "'BackboneEncoder'", ":", "\n", "            ", "encoder", "=", "restyle_psp_encoders", ".", "BackboneEncoder", "(", "50", ",", "'ir_se'", ",", "self", ".", "n_styles", ",", "input_nc", "=", "6", ")", "\n", "", "elif", "self", ".", "encoder_type", "==", "'ResNetBackboneEncoder'", ":", "\n", "            ", "encoder", "=", "restyle_psp_encoders", ".", "ResNetBackboneEncoder", "(", "self", ".", "n_styles", ",", "input_nc", "=", "6", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f'{self.encoder_type} is not a valid encoders'", ")", "\n", "", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_encoder.RestyleEncoder.load_weights": [[73, 84], ["print", "restyle_encoder.RestyleEncoder.init_avg_image", "restyle_encoder.RestyleEncoder.__get_encoder_checkpoint", "restyle_encoder.RestyleEncoder.encoder.load_state_dict", "torch.load", "restyle_encoder.RestyleEncoder.__get_keys", "restyle_encoder.RestyleEncoder.encoder.load_state_dict", "ckpt[].to().reshape", "ckpt[].to"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_encoder.RestyleEncoder.init_avg_image", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_encoder.RestyleEncoder.__get_encoder_checkpoint", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_encoder.RestyleEncoder.__get_keys"], ["", "def", "load_weights", "(", "self", ",", "checkpoint_path", ",", "initialize", "=", "False", ")", ":", "\n", "        ", "print", "(", "f'Loading ReStyle pSp from checkpoint: {checkpoint_path}'", ")", "\n", "if", "initialize", ":", "\n", "            ", "state_dict", "=", "self", ".", "__get_encoder_checkpoint", "(", "checkpoint_path", ",", "input_nc", "=", "6", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "ckpt", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "state_dict", "=", "self", ".", "__get_keys", "(", "ckpt", ",", "'encoder.'", ")", "\n", "self", ".", "latent_avg", "=", "ckpt", "[", "'latent_avg'", "]", ".", "to", "(", "self", ".", "device", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "512", ")", "[", ":", ",", "0", "]", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "self", ".", "init_avg_image", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_encoder.RestyleEncoder.forward": [[86, 106], ["restyle_encoder.RestyleEncoder.size", "restyle_encoder.RestyleEncoder.resize_input", "range", "restyle_encoder.RestyleEncoder.image_avg.repeat().to", "restyle_encoder.RestyleEncoder.latent_avg.view().repeat().to", "restyle_encoder.RestyleEncoder.resize_input().detach", "torch.cat", "restyle_encoder.RestyleEncoder.encoder_parallel", "restyle_encoder.RestyleEncoder.decoder_parallel", "restyle_encoder.RestyleEncoder.face_pool", "restyle_encoder.RestyleEncoder.detach", "restyle_encoder.RestyleEncoder.image_avg.repeat", "restyle_encoder.RestyleEncoder.latent_avg.view().repeat", "restyle_encoder.RestyleEncoder.resize_input", "restyle_encoder.RestyleEncoder.latent_avg.view"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_encoder.RestyleEncoder.resize_input", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_encoder.RestyleEncoder.resize_input"], ["", "def", "forward", "(", "self", ",", "input_img", ",", "output_img", "=", "None", ",", "latent", "=", "None", ",", "randomize_noise", "=", "True", ",", "n_iter", "=", "1", ",", "return_seg", "=", "False", ",", "resize_output", "=", "True", ")", ":", "\n", "\n", "        ", "batch", "=", "input_img", ".", "size", "(", "0", ")", "\n", "input_img", "=", "self", ".", "resize_input", "(", "input_img", ")", "\n", "if", "output_img", "is", "None", ":", "\n", "            ", "output_img", "=", "self", ".", "image_avg", ".", "repeat", "(", "batch", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "if", "latent", "is", "None", ":", "\n", "            ", "latent", "=", "self", ".", "latent_avg", ".", "view", "(", "1", ",", "1", ",", "512", ")", ".", "repeat", "(", "batch", ",", "self", ".", "n_styles", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "for", "_", "in", "range", "(", "n_iter", ")", ":", "\n", "            ", "output_img", "=", "self", ".", "resize_input", "(", "output_img", ")", ".", "detach", "(", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "input_img", ",", "output_img", ")", ",", "1", ")", "\n", "residual", "=", "self", ".", "encoder_parallel", "(", "x", ")", "\n", "latent", "=", "latent", ".", "detach", "(", ")", "+", "residual", "\n", "output_img", ",", "output_seg", "=", "self", ".", "decoder_parallel", "(", "[", "latent", "]", ",", "input_is_latent", "=", "True", ",", "randomize_noise", "=", "randomize_noise", ")", "\n", "", "if", "resize_output", ":", "\n", "            ", "output_img", "=", "self", ".", "face_pool", "(", "output_img", ")", "\n", "", "if", "return_seg", ":", "\n", "            ", "return", "output_img", ",", "output_seg", ",", "latent", "\n", "", "else", ":", "\n", "            ", "return", "output_img", ",", "latent", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_encoder.RestyleEncoder.resize_input": [[107, 111], ["restyle_encoder.RestyleEncoder.face_pool", "restyle_encoder.RestyleEncoder.size", "restyle_encoder.RestyleEncoder.size"], "methods", ["None"], ["", "", "def", "resize_input", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "img", ".", "size", "(", "2", ")", "!=", "256", "or", "img", ".", "size", "(", "3", ")", "!=", "256", ":", "\n", "            ", "img", "=", "self", ".", "face_pool", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_encoder.RestyleEncoder.init_avg_image": [[112, 121], ["torch.no_grad", "restyle_encoder.RestyleEncoder.latent_avg.repeat().to", "restyle_encoder.RestyleEncoder.decoder", "restyle_encoder.RestyleEncoder.face_pool", "print", "restyle_encoder.RestyleEncoder.decoder.style().mean", "restyle_encoder.RestyleEncoder.latent_avg.repeat", "restyle_encoder.RestyleEncoder.decoder.style", "torch.randn().to", "torch.randn"], "methods", ["None"], ["", "def", "init_avg_image", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "latent_avg", "is", "None", ":", "\n", "                ", "self", ".", "latent_avg", "=", "self", ".", "decoder", ".", "style", "(", "torch", ".", "randn", "(", "100000", ",", "512", ")", ".", "to", "(", "self", ".", "device", ")", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "", "codes", "=", "self", ".", "latent_avg", ".", "repeat", "(", "1", ",", "self", ".", "n_styles", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "image_avg", ",", "_", "=", "self", ".", "decoder", "(", "[", "codes", "]", ",", "input_is_latent", "=", "True", ",", "randomize_noise", "=", "False", ")", "\n", "self", ".", "image_avg", "=", "self", ".", "face_pool", "(", "image_avg", ")", "\n", "print", "(", "f\"image_avg shape: {self.image_avg.shape}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_encoder.RestyleEncoder.__get_encoder_checkpoint": [[123, 150], ["print", "torch.load", "print", "torch.load", "dict", "torch.load.items", "torch.randn", "torch.randn", "RESNET_MAPPING.items", "dict.pop", "p.replace"], "methods", ["None"], ["", "", "def", "__get_encoder_checkpoint", "(", "self", ",", "model_path", ",", "input_nc", ")", ":", "\n", "        ", "if", "self", ".", "encoder_type", "==", "\"BackboneEncoder\"", ":", "\n", "            ", "print", "(", "'Loading encoders weights from irse50!'", ")", "\n", "encoder_ckpt", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "# Transfer the RGB input of the irse50 network to the first 3 input channels of pSp's encoder", "\n", "if", "input_nc", "!=", "3", ":", "\n", "                ", "shape", "=", "encoder_ckpt", "[", "'input_layer.0.weight'", "]", ".", "shape", "\n", "altered_input_layer", "=", "torch", ".", "randn", "(", "shape", "[", "0", "]", ",", "input_nc", ",", "shape", "[", "2", "]", ",", "shape", "[", "3", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "altered_input_layer", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "=", "encoder_ckpt", "[", "'input_layer.0.weight'", "]", "\n", "encoder_ckpt", "[", "'input_layer.0.weight'", "]", "=", "altered_input_layer", "\n", "", "return", "encoder_ckpt", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Loading encoders weights from resnet34!'", ")", "\n", "encoder_ckpt", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "# Transfer the RGB input of the resnet34 network to the first 3 input channels of pSp's encoder", "\n", "if", "input_nc", "!=", "3", ":", "\n", "                ", "shape", "=", "encoder_ckpt", "[", "'conv1.weight'", "]", ".", "shape", "\n", "altered_input_layer", "=", "torch", ".", "randn", "(", "shape", "[", "0", "]", ",", "input_nc", ",", "shape", "[", "2", "]", ",", "shape", "[", "3", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "altered_input_layer", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "=", "encoder_ckpt", "[", "'conv1.weight'", "]", "\n", "encoder_ckpt", "[", "'conv1.weight'", "]", "=", "altered_input_layer", "\n", "", "mapped_encoder_ckpt", "=", "dict", "(", "encoder_ckpt", ")", "\n", "for", "p", ",", "v", "in", "encoder_ckpt", ".", "items", "(", ")", ":", "\n", "                ", "for", "original_name", ",", "psp_name", "in", "RESNET_MAPPING", ".", "items", "(", ")", ":", "\n", "                    ", "if", "original_name", "in", "p", ":", "\n", "                        ", "mapped_encoder_ckpt", "[", "p", ".", "replace", "(", "original_name", ",", "psp_name", ")", "]", "=", "v", "\n", "mapped_encoder_ckpt", ".", "pop", "(", "p", ")", "\n", "", "", "", "return", "encoder_ckpt", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.encoders.restyle_encoder.RestyleEncoder.__get_keys": [[151, 157], ["d.items", "len", "len"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "__get_keys", "(", "d", ",", "name", ")", ":", "\n", "        ", "if", "'state_dict'", "in", "d", ":", "\n", "            ", "d", "=", "d", "[", "'state_dict'", "]", "\n", "", "d_filt", "=", "{", "k", "[", "len", "(", "name", ")", ":", "]", ":", "v", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "k", "[", ":", "len", "(", "name", ")", "]", "==", "name", "}", "\n", "return", "d_filt", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.criteria.w_norm.WNormLoss.__init__": [[31, 34], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["\t", "def", "__init__", "(", "self", ",", "start_from_latent_avg", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "WNormLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_from_latent_avg", "=", "start_from_latent_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.criteria.w_norm.WNormLoss.forward": [[35, 39], ["torch.sum", "latent.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "latent", ",", "latent_avg", "=", "None", ")", ":", "\n", "\t\t", "if", "self", ".", "start_from_latent_avg", ":", "\n", "\t\t\t", "latent", "=", "latent", "-", "latent_avg", "\n", "", "return", "torch", ".", "sum", "(", "latent", ".", "norm", "(", "2", ",", "dim", "=", "(", "1", ",", "2", ")", ")", ")", "/", "latent", ".", "shape", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.criteria.id_loss.IDLoss.__init__": [[31, 38], ["torch.nn.Module.__init__", "print", "models.encoders.model_irse.Backbone", "id_loss.IDLoss.facenet.load_state_dict", "torch.nn.AdaptiveAvgPool2d", "id_loss.IDLoss.facenet.eval", "torch.load"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "super", "(", "IDLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'Loading ResNet ArcFace'", ")", "\n", "self", ".", "facenet", "=", "Backbone", "(", "input_size", "=", "112", ",", "num_layers", "=", "50", ",", "drop_ratio", "=", "0.6", ",", "mode", "=", "'ir_se'", ")", "\n", "self", ".", "facenet", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "self", ".", "face_pool", "=", "torch", ".", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "112", ",", "112", ")", ")", "\n", "self", ".", "facenet", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.criteria.id_loss.IDLoss.extract_feats": [[39, 45], ["id_loss.IDLoss.face_pool", "id_loss.IDLoss.facenet"], "methods", ["None"], ["", "def", "extract_feats", "(", "self", ",", "x", ")", ":", "\n", "# x = x[:, :, 35:223, 32:220]  # Crop interesting region", "\n", "        ", "x", "=", "x", "[", ":", ",", ":", ",", "11", ":", "247", ",", "8", ":", "244", "]", "# Crop interesting region", "\n", "x", "=", "self", ".", "face_pool", "(", "x", ")", "\n", "x_feats", "=", "self", ".", "facenet", "(", "x", ")", "\n", "return", "x_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.criteria.id_loss.IDLoss.forward": [[46, 52], ["id_loss.IDLoss.extract_feats", "id_loss.IDLoss.extract_feats", "y_feats.detach.detach.detach"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.criteria.id_loss.IDLoss.extract_feats", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.criteria.id_loss.IDLoss.extract_feats"], ["", "def", "forward", "(", "self", ",", "y_hat", ",", "y", ")", ":", "\n", "        ", "y_feats", "=", "self", ".", "extract_feats", "(", "y", ")", "# Otherwise use the feature from there", "\n", "y_hat_feats", "=", "self", ".", "extract_feats", "(", "y_hat", ")", "\n", "y_feats", "=", "y_feats", ".", "detach", "(", ")", "\n", "loss", "=", "1", "-", "(", "y_hat_feats", "*", "y_feats", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", "0", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.networks.LinLayers.__init__": [[45, 55], ["torch.ModuleList.__init__", "networks.LinLayers.parameters", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels_list", ":", "Sequence", "[", "int", "]", ")", ":", "\n", "        ", "super", "(", "LinLayers", ",", "self", ")", ".", "__init__", "(", "[", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nc", ",", "1", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", ")", "for", "nc", "in", "n_channels_list", "\n", "]", ")", "\n", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.networks.BaseNet.__init__": [[58, 66], ["torch.Module.__init__", "networks.BaseNet.register_buffer", "networks.BaseNet.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# register buffer", "\n", "self", ".", "register_buffer", "(", "\n", "'mean'", ",", "torch", ".", "Tensor", "(", "[", "-", ".030", ",", "-", ".088", ",", "-", ".188", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "self", ".", "register_buffer", "(", "\n", "'std'", ",", "torch", ".", "Tensor", "(", "[", ".458", ",", ".448", ",", ".450", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.networks.BaseNet.set_requires_grad": [[67, 70], ["itertools.chain", "networks.BaseNet.parameters", "networks.BaseNet.buffers"], "methods", ["None"], ["", "def", "set_requires_grad", "(", "self", ",", "state", ":", "bool", ")", ":", "\n", "        ", "for", "param", "in", "chain", "(", "self", ".", "parameters", "(", ")", ",", "self", ".", "buffers", "(", ")", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.networks.BaseNet.z_score": [[71, 73], ["None"], "methods", ["None"], ["", "", "def", "z_score", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.networks.BaseNet.forward": [[74, 85], ["networks.BaseNet.z_score", "enumerate", "networks.BaseNet.layers._modules.items", "layer", "output.append", "len", "len", "criteria.lpips.utils.normalize_activation"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.networks.BaseNet.z_score", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.utils.normalize_activation"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "x", "=", "self", ".", "z_score", "(", "x", ")", "\n", "\n", "output", "=", "[", "]", "\n", "for", "i", ",", "(", "_", ",", "layer", ")", "in", "enumerate", "(", "self", ".", "layers", ".", "_modules", ".", "items", "(", ")", ",", "1", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "target_layers", ":", "\n", "                ", "output", ".", "append", "(", "normalize_activation", "(", "x", ")", ")", "\n", "", "if", "len", "(", "output", ")", "==", "len", "(", "self", ".", "target_layers", ")", ":", "\n", "                ", "break", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.networks.SqueezeNet.__init__": [[88, 96], ["networks.BaseNet.__init__", "networks.SqueezeNet.set_requires_grad", "torchvision.models.squeezenet1_1"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.networks.BaseNet.set_requires_grad"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SqueezeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "models", ".", "squeezenet1_1", "(", "True", ")", ".", "features", "\n", "self", ".", "target_layers", "=", "[", "2", ",", "5", ",", "8", ",", "10", ",", "11", ",", "12", ",", "13", "]", "\n", "self", ".", "n_channels_list", "=", "[", "64", ",", "128", ",", "256", ",", "384", ",", "384", ",", "512", ",", "512", "]", "\n", "\n", "self", ".", "set_requires_grad", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.networks.AlexNet.__init__": [[99, 107], ["networks.BaseNet.__init__", "networks.AlexNet.set_requires_grad", "torchvision.models.alexnet"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.networks.BaseNet.set_requires_grad"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "models", ".", "alexnet", "(", "True", ")", ".", "features", "\n", "self", ".", "target_layers", "=", "[", "2", ",", "5", ",", "8", ",", "10", ",", "12", "]", "\n", "self", ".", "n_channels_list", "=", "[", "64", ",", "192", ",", "384", ",", "256", ",", "256", "]", "\n", "\n", "self", ".", "set_requires_grad", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.networks.VGG16.__init__": [[110, 118], ["networks.BaseNet.__init__", "networks.VGG16.set_requires_grad", "torchvision.models.vgg16"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.networks.BaseNet.set_requires_grad"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "models", ".", "vgg16", "(", "True", ")", ".", "features", "\n", "self", ".", "target_layers", "=", "[", "4", ",", "9", ",", "16", ",", "23", ",", "30", "]", "\n", "self", ".", "n_channels_list", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "\n", "self", ".", "set_requires_grad", "(", "False", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.networks.get_network": [[33, 42], ["networks.AlexNet", "networks.SqueezeNet", "networks.VGG16", "NotImplementedError"], "function", ["None"], ["def", "get_network", "(", "net_type", ":", "str", ")", ":", "\n", "    ", "if", "net_type", "==", "'alex'", ":", "\n", "        ", "return", "AlexNet", "(", ")", "\n", "", "elif", "net_type", "==", "'squeeze'", ":", "\n", "        ", "return", "SqueezeNet", "(", ")", "\n", "", "elif", "net_type", "==", "'vgg'", ":", "\n", "        ", "return", "VGG16", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'choose net_type from [alex, squeeze, vgg].'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__": [[38, 50], ["torch.Module.__init__", "criteria.lpips.networks.get_network().to", "criteria.lpips.networks.LinLayers().to", "lpips.LPIPS.lin.load_state_dict", "criteria.lpips.utils.get_state_dict", "criteria.lpips.networks.get_network", "criteria.lpips.networks.LinLayers"], "methods", ["home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.__init__", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.utils.get_state_dict", "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.networks.get_network"], ["def", "__init__", "(", "self", ",", "net_type", ":", "str", "=", "'alex'", ",", "version", ":", "str", "=", "'0.1'", ")", ":", "\n", "\n", "        ", "assert", "version", "in", "[", "'0.1'", "]", ",", "'v0.1 is only supported now'", "\n", "\n", "super", "(", "LPIPS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# pretrained network", "\n", "self", ".", "net", "=", "get_network", "(", "net_type", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# linear layers", "\n", "self", ".", "lin", "=", "LinLayers", "(", "self", ".", "net", ".", "n_channels_list", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "self", ".", "lin", ".", "load_state_dict", "(", "get_state_dict", "(", "net_type", ",", "version", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.lpips.LPIPS.forward": [[51, 62], ["lpips.LPIPS.net", "lpips.LPIPS.net", "l().mean", "weight.view.view.view", "zip", "zip", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "weight.view.view.sum", "l", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "y", ":", "torch", ".", "Tensor", ",", "weight", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "feat_x", ",", "feat_y", "=", "self", ".", "net", "(", "x", ")", ",", "self", ".", "net", "(", "y", ")", "\n", "\n", "diff", "=", "[", "(", "fx", "-", "fy", ")", "**", "2", "for", "fx", ",", "fy", "in", "zip", "(", "feat_x", ",", "feat_y", ")", "]", "\n", "res", "=", "[", "l", "(", "d", ")", ".", "mean", "(", "(", "2", ",", "3", ")", ",", "True", ")", "for", "d", ",", "l", "in", "zip", "(", "diff", ",", "self", ".", "lin", ")", "]", "\n", "\n", "if", "weight", "is", "None", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "res", ",", "0", ")", ")", "/", "x", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "weight", "=", "weight", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "return", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "res", ",", "1", ")", "*", "weight", ")", "/", "weight", ".", "sum", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.utils.normalize_activation": [[27, 30], ["torch.sqrt", "torch.sum"], "function", ["None"], ["4", ":", "[", "13", ",", "179", ",", "158", "]", ",", "\n", "5", ":", "[", "131", ",", "227", ",", "119", "]", ",", "\n", "6", ":", "[", "185", ",", "231", ",", "105", "]", ",", "\n", "7", ":", "[", "107", ",", "137", ",", "198", "]", ",", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.lpips.utils.get_state_dict": [[32, 52], ["torch.hub.load_state_dict_from_url", "collections.OrderedDict", "torch.hub.load_state_dict_from_url.items", "new_key.replace.replace", "new_key.replace.replace", "torch.cuda.is_available", "torch.device"], "function", ["None"], ["9", ":", "[", "242", ",", "158", ",", "76", "]", ",", "\n", "10", ":", "[", "234", ",", "114", ",", "71", "]", ",", "\n", "11", ":", "[", "215", ",", "95", ",", "155", "]", ",", "\n", "12", ":", "[", "207", ",", "113", ",", "192", "]", ",", "\n", "13", ":", "[", "159", ",", "89", ",", "165", "]", ",", "\n", "14", ":", "[", "142", ",", "82", ",", "172", "]", ",", "\n", "15", ":", "[", "158", ",", "115", ",", "200", "]", ",", "\n", "16", ":", "[", "116", ",", "95", ",", "159", "]", ",", "\n", "}", "\n", "\n", "def", "generate_img", "(", "model", ",", "styles", ",", "mean_latent", "=", "None", ",", "truncation", "=", "1.0", ",", "batch_size", "=", "16", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "for", "head", "in", "range", "(", "0", ",", "styles", ".", "size", "(", "0", ")", ",", "batch_size", ")", ":", "\n", "        ", "images_", ",", "_", "=", "model", "(", "[", "styles", "[", "head", ":", "head", "+", "batch_size", "]", "]", ",", "input_is_latent", "=", "True", ",", "\n", "truncation", "=", "truncation", ",", "truncation_latent", "=", "mean_latent", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "images", ".", "append", "(", "images_", ")", "\n", "", "images", "=", "torch", ".", "cat", "(", "images", ",", "0", ")", "\n", "return", "tensor2image", "(", "images", ")", "\n", "\n", "", "def", "generate", "(", "model", ",", "styles", ",", "mean_latent", "=", "None", ",", "truncation", "=", "1.0", ",", "batch_size", "=", "16", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "images", ",", "segs", "=", "[", "]", ",", "[", "]", "\n"]], "home.repos.pwc.inspect_result.seasonSH_SemanticStyleGAN.data.preprocess_celeba.process_img": [[59, 89], ["os.path.join", "os.path.join", "shutil.copyfile", "str", "os.path.join", "numpy.zeros", "mapping.items", "os.path.join", "imageio.imwrite", "print", "os.path.exists", "imageio.imread"], "function", ["None"], ["def", "process_img", "(", "i", ")", ":", "\n", "    ", "if", "i", "<", "28000", ":", "\n", "        ", "img_output_path", "=", "img_trainset_path", "\n", "seg_output_path", "=", "seg_trainset_path", "\n", "", "else", ":", "\n", "        ", "img_output_path", "=", "img_valset_path", "\n", "seg_output_path", "=", "seg_valset_path", "\n", "\n", "# Copy the image file", "\n", "", "input_path", "=", "os", ".", "path", ".", "join", "(", "img_dataset_path", ",", "f'{i}.jpg'", ")", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "img_output_path", ",", "f'{i}.jpg'", ")", "\n", "shutil", ".", "copyfile", "(", "input_path", ",", "output_path", ")", "\n", "\n", "# Make a new label file", "\n", "subfolder", "=", "str", "(", "i", "//", "2000", ")", "\n", "prefix", "=", "os", ".", "path", ".", "join", "(", "seg_dataset_path", ",", "subfolder", ",", "f'{i:05d}_'", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "512", ",", "512", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "success", "=", "False", "\n", "for", "k", ",", "v", "in", "mapping", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "prefix", "+", "k", "+", "'.png'", ")", ":", "\n", "            ", "continue", "\n", "", "mask_", "=", "imread", "(", "prefix", "+", "k", "+", "'.png'", ",", "as_gray", "=", "True", ")", "==", "255", "\n", "mask", "[", "mask_", "]", "=", "color_map", "[", "v", "]", "if", "colored_label", "else", "v", "\n", "success", "=", "True", "\n", "", "if", "not", "success", ":", "\n", "        ", "print", "(", "f\"No labels found for: {prefix}\"", ")", "\n", "", "if", "not", "colored_label", ":", "\n", "        ", "mask", "=", "mask", "[", ":", ",", ":", ",", "0", "]", "\n", "", "output_path", "=", "os", ".", "path", ".", "join", "(", "seg_output_path", ",", "f'{i}.png'", ")", "\n", "imwrite", "(", "output_path", ",", "mask", ")", "\n", "\n"]]}