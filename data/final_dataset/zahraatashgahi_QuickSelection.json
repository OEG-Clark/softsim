{"home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.__init__": [[47, 76], ["len", "range", "numpy.zeros", "len", "Sparse_DAE.createSparseWeights", "Sparse_DAE.createSparseWeights", "len"], "methods", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.createSparseWeights", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.createSparseWeights"], ["    ", "def", "__init__", "(", "self", ",", "dimensions", ",", "activations", ",", "epsilon", "=", "20", ")", ":", "\n", "        ", "self", ".", "n_layers", "=", "len", "(", "dimensions", ")", "\n", "self", ".", "loss", "=", "None", "\n", "self", ".", "learning_rate", "=", "None", "\n", "self", ".", "momentum", "=", "None", "\n", "self", ".", "weight_decay", "=", "None", "\n", "self", ".", "epsilon", "=", "epsilon", "# control the sparsity level as discussed in the paper", "\n", "self", ".", "zeta", "=", "None", "# the fraction of the weights removed", "\n", "self", ".", "droprate", "=", "0", "# dropout rate", "\n", "self", ".", "dimensions", "=", "dimensions", "\n", "\n", "# Weights and biases are initiated by index. For a one hidden layer net you will have a w[1] and w[2]", "\n", "self", ".", "w", "=", "{", "}", "\n", "self", ".", "b", "=", "{", "}", "\n", "self", ".", "pdw", "=", "{", "}", "\n", "self", ".", "pdd", "=", "{", "}", "\n", "\n", "# Activations are also initiated by index. For the example we will have activations[2] and activations[3]", "\n", "self", ".", "activations", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "dimensions", ")", "-", "1", ")", ":", "\n", "            ", "if", "(", "i", "<", "len", "(", "dimensions", ")", "-", "2", ")", ":", "\n", "                ", "self", ".", "w", "[", "i", "+", "1", "]", "=", "createSparseWeights", "(", "self", ".", "epsilon", ",", "dimensions", "[", "i", "]", ",", "\n", "dimensions", "[", "i", "+", "1", "]", ")", "# create sparse weight matrices", "\n", "", "else", ":", "\n", "                ", "self", ".", "w", "[", "i", "+", "1", "]", "=", "createSparseWeights", "(", "self", ".", "epsilon", ",", "dimensions", "[", "i", "]", ",", "\n", "dimensions", "[", "i", "+", "1", "]", ")", "# create sparse weight matrices", "\n", "\n", "", "self", ".", "b", "[", "i", "+", "1", "]", "=", "np", ".", "zeros", "(", "dimensions", "[", "i", "+", "1", "]", ")", "\n", "self", ".", "activations", "[", "i", "+", "2", "]", "=", "activations", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE._feed_forward": [[78, 98], ["range", "Sparse_DAE.Sparse_DAE.activations[].activation", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.NoActivation.activation"], ["", "", "def", "_feed_forward", "(", "self", ",", "x", ",", "drop", "=", "False", ")", ":", "\n", "# w(x) + b", "\n", "        ", "z", "=", "{", "}", "\n", "# activations: f(z)", "\n", "a", "=", "{", "1", ":", "x", "}", "# First layer has no activations as input. The input x is the input.", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "n_layers", ")", ":", "\n", "            ", "z", "[", "i", "+", "1", "]", "=", "a", "[", "i", "]", "@", "self", ".", "w", "[", "i", "]", "+", "self", ".", "b", "[", "i", "]", "\n", "if", "(", "drop", "==", "False", ")", ":", "\n", "                ", "if", "(", "i", ">", "1", ")", ":", "\n", "                    ", "z", "[", "i", "+", "1", "]", "=", "z", "[", "i", "+", "1", "]", "*", "(", "1", "-", "self", ".", "droprate", ")", "\n", "", "", "a", "[", "i", "+", "1", "]", "=", "self", ".", "activations", "[", "i", "+", "1", "]", ".", "activation", "(", "z", "[", "i", "+", "1", "]", ")", "\n", "if", "(", "drop", ")", ":", "\n", "                ", "if", "(", "i", "<", "self", ".", "n_layers", "-", "1", ")", ":", "\n", "                    ", "dropMask", "=", "np", ".", "random", ".", "rand", "(", "a", "[", "i", "+", "1", "]", ".", "shape", "[", "0", "]", ",", "a", "[", "i", "+", "1", "]", ".", "shape", "[", "1", "]", ")", "\n", "dropMask", "[", "dropMask", ">=", "self", ".", "droprate", "]", "=", "1", "\n", "dropMask", "[", "dropMask", "<", "self", ".", "droprate", "]", "=", "0", "\n", "a", "[", "i", "+", "1", "]", "=", "dropMask", "*", "a", "[", "i", "+", "1", "]", "\n", "\n", "", "", "", "return", "z", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE._back_prop": [[99, 123], ["Sparse_DAE.Sparse_DAE.loss.delta", "scipy.sparse.coo_matrix", "sparseoperations.backpropagation_updates_Cython", "reversed", "range", "scipy.sparse.coo_matrix", "sparseoperations.backpropagation_updates_Cython", "update_params.items", "scipy.sparse.coo_matrix.tocsr", "Sparse_DAE.Sparse_DAE.activations[].prime", "scipy.sparse.coo_matrix.tocsr", "Sparse_DAE.Sparse_DAE._update_w_b", "Sparse_DAE.Sparse_DAE.w[].transpose"], "methods", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.MSE.delta", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.NoActivation.prime", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE._update_w_b"], ["", "def", "_back_prop", "(", "self", ",", "z", ",", "a", ",", "X_train", ")", ":", "\n", "        ", "delta", "=", "self", ".", "loss", ".", "delta", "(", "X_train", ",", "a", "[", "self", ".", "n_layers", "]", ")", "\n", "dw", "=", "coo_matrix", "(", "self", ".", "w", "[", "self", ".", "n_layers", "-", "1", "]", ")", "\n", "\n", "# compute backpropagation updates", "\n", "sparseoperations", ".", "backpropagation_updates_Cython", "(", "a", "[", "self", ".", "n_layers", "-", "1", "]", ",", "delta", ",", "dw", ".", "row", ",", "dw", ".", "col", ",", "dw", ".", "data", ")", "# If you have problems with Cython please use the backpropagation_updates_Numpy method by uncommenting the line below and commenting the one above. Please note that the running time will be much higher", "\n", "# If you have problems with Cython please use the backpropagation_updates_Numpy method by uncommenting the line below and commenting the one above. Please note that the running time will be much higher", "\n", "#backpropagation_updates_Numpy(a[self.n_layers - 1], delta, dw.row, dw.col, dw.data)", "\n", "\n", "update_params", "=", "{", "\n", "self", ".", "n_layers", "-", "1", ":", "(", "dw", ".", "tocsr", "(", ")", ",", "delta", ")", "\n", "}", "\n", "for", "i", "in", "reversed", "(", "range", "(", "2", ",", "self", ".", "n_layers", ")", ")", ":", "\n", "            ", "delta", "=", "(", "delta", "@", "self", ".", "w", "[", "i", "]", ".", "transpose", "(", ")", ")", "*", "self", ".", "activations", "[", "i", "]", ".", "prime", "(", "z", "[", "i", "]", ")", "\n", "dw", "=", "coo_matrix", "(", "self", ".", "w", "[", "i", "-", "1", "]", ")", "\n", "\n", "# compute backpropagation updates", "\n", "sparseoperations", ".", "backpropagation_updates_Cython", "(", "a", "[", "i", "-", "1", "]", ",", "delta", ",", "dw", ".", "row", ",", "dw", ".", "col", ",", "dw", ".", "data", ")", "# If you have problems with Cython please use the backpropagation_updates_Numpy method by uncommenting the line below and commenting the one above. Please note that the running time will be much higher", "\n", "# If you have problems with Cython please use the backpropagation_updates_Numpy method by uncommenting the line below and commenting the one above. Please note that the running time will be much higher", "\n", "#backpropagation_updates_Numpy(a[i - 1], delta, dw.row, dw.col, dw.data)", "\n", "\n", "update_params", "[", "i", "-", "1", "]", "=", "(", "dw", ".", "tocsr", "(", ")", ",", "delta", ")", "\n", "for", "k", ",", "v", "in", "update_params", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_update_w_b", "(", "k", ",", "v", "[", "0", "]", ",", "v", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE._update_w_b": [[124, 141], ["numpy.mean", "numpy.mean"], "methods", ["None"], ["", "", "", "def", "_update_w_b", "(", "self", ",", "index", ",", "dw", ",", "delta", ")", ":", "\n", "        ", "\"\"\"\n        Update weights and biases.\n        :param index: (int) Number of the layer\n        :param dw: (array) Partial derivatives\n        :param delta: (array) Delta error.\n        \"\"\"", "\n", "# perform the update with momentum", "\n", "if", "(", "index", "not", "in", "self", ".", "pdw", ")", ":", "\n", "            ", "self", ".", "pdw", "[", "index", "]", "=", "-", "self", ".", "learning_rate", "*", "dw", "\n", "self", ".", "pdd", "[", "index", "]", "=", "-", "self", ".", "learning_rate", "*", "np", ".", "mean", "(", "delta", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pdw", "[", "index", "]", "=", "self", ".", "momentum", "*", "self", ".", "pdw", "[", "index", "]", "-", "self", ".", "learning_rate", "*", "dw", "\n", "self", ".", "pdd", "[", "index", "]", "=", "self", ".", "momentum", "*", "self", ".", "pdd", "[", "index", "]", "-", "self", ".", "learning_rate", "*", "np", ".", "mean", "(", "delta", ",", "0", ")", "\n", "\n", "", "self", ".", "w", "[", "index", "]", "+=", "self", ".", "pdw", "[", "index", "]", "-", "self", ".", "weight_decay", "*", "self", ".", "w", "[", "index", "]", "\n", "self", ".", "b", "[", "index", "]", "+=", "self", ".", "pdd", "[", "index", "]", "-", "self", ".", "weight_decay", "*", "self", ".", "b", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.fit": [[142, 211], ["loss", "Sparse_DAE.Sparse_DAE.inputLayerConnections.append", "numpy.savez_compressed", "numpy.zeros", "numpy.arange", "range", "scipy.sparse.save_npz", "scipy.sparse.save_npz", "ValueError", "Sparse_DAE.Sparse_DAE.getCoreInputConnections", "numpy.random.normal", "print", "print", "numpy.random.shuffle", "datetime.datetime.now", "range", "datetime.datetime.now", "print", "Sparse_DAE.Sparse_DAE._feed_forward", "Sparse_DAE.Sparse_DAE._back_prop", "Sparse_DAE.Sparse_DAE.predict", "Sparse_DAE.Sparse_DAE.predict", "Sparse_DAE.Sparse_DAE.loss.loss", "Sparse_DAE.Sparse_DAE.loss.loss", "print", "plt_loss", "Sparse_DAE.Sparse_DAE.weightsEvolution_II", "numpy.savetxt"], "methods", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.MSE.loss", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.getCoreInputConnections", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE._feed_forward", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE._back_prop", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.predict", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.predict", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.MSE.loss", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.MSE.loss", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.plt_utils.plt_loss", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.weightsEvolution_II"], ["", "def", "fit", "(", "self", ",", "x", ",", "y_true", ",", "x_test", ",", "y_test", ",", "loss", ",", "epochs", ",", "batch_size", ",", "learning_rate", "=", "1e-3", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.00001", ",", "zeta", "=", "0.2", ",", "dropoutrate", "=", "0", ",", "testing", "=", "True", ",", "save_filename", "=", "\"\"", ",", "noise_factor", "=", "0.2", ")", ":", "\n", "\n", "        ", "if", "not", "x", ".", "shape", "[", "0", "]", "==", "y_true", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"Length of x and y arrays don't match\"", ")", "\n", "\n", "# Initiate the loss object with the final activation function", "\n", "", "self", ".", "loss", "=", "loss", "(", "self", ".", "activations", "[", "self", ".", "n_layers", "]", ")", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "zeta", "=", "zeta", "\n", "self", ".", "droprate", "=", "dropoutrate", "\n", "self", ".", "save_filename", "=", "save_filename", "\n", "self", ".", "inputLayerConnections", "=", "[", "]", "\n", "self", ".", "inputLayerConnections", ".", "append", "(", "self", ".", "getCoreInputConnections", "(", ")", ")", "\n", "np", ".", "savez_compressed", "(", "self", ".", "save_filename", "+", "\"_input_connections.npz\"", ",", "\n", "inputLayerConnections", "=", "self", ".", "inputLayerConnections", ")", "\n", "\n", "\n", "\n", "metrics", "=", "np", ".", "zeros", "(", "(", "epochs", ",", "2", ")", ")", "\n", "mean", "=", "0", ";", "stddev", "=", "1", "\n", "noise", "=", "noise_factor", "*", "np", ".", "random", ".", "normal", "(", "mean", ",", "stddev", ",", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "x_noisy", "=", "x", "+", "noise", "\n", "seed", "=", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "print", "(", "\"----------------------------------------------------\"", ")", "\n", "print", "(", "\"epoch \"", ",", "i", ")", "\n", "\n", "\n", "# Shuffle the data", "\n", "np", ".", "random", ".", "shuffle", "(", "seed", ")", "\n", "x_noisy_", "=", "x_noisy", "[", "seed", "]", "\n", "x_", "=", "x", "[", "seed", "]", "\n", "y_", "=", "y_true", "[", "seed", "]", "\n", "# training", "\n", "t1", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "for", "j", "in", "range", "(", "x", ".", "shape", "[", "0", "]", "//", "batch_size", ")", ":", "\n", "                ", "k", "=", "j", "*", "batch_size", "\n", "l", "=", "(", "j", "+", "1", ")", "*", "batch_size", "\n", "z", ",", "a", "=", "self", ".", "_feed_forward", "(", "x_noisy_", "[", "k", ":", "l", "]", ",", "True", ")", "\n", "self", ".", "_back_prop", "(", "z", ",", "a", ",", "x_", "[", "k", ":", "l", "]", ")", "\n", "", "t2", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "print", "(", "\"Training time: \"", ",", "t2", "-", "t1", ")", "\n", "\n", "if", "(", "testing", ")", ":", "\n", "                ", "activations_hidden_test", ",", "activations_output_test", "=", "self", ".", "predict", "(", "x_test", ")", "\n", "activations_hidden_train", ",", "activations_output_train", "=", "self", ".", "predict", "(", "x", ")", "\n", "loss_train", "=", "self", ".", "loss", ".", "loss", "(", "x", ",", "activations_output_train", ")", "\n", "metrics", "[", "i", ",", "0", "]", "=", "loss_train", "\n", "loss_test", "=", "self", ".", "loss", ".", "loss", "(", "x_test", ",", "activations_output_test", ")", "\n", "metrics", "[", "i", ",", "1", "]", "=", "loss_test", "\n", "print", "(", "\"Loss train: \"", ",", "loss_train", ",", "\"; Loss test: \"", ",", "loss_test", ")", "\n", "plt_loss", "(", "metrics", "[", ":", "i", "+", "1", ",", "0", "]", ",", "metrics", "[", ":", "i", "+", "1", ",", "1", "]", ",", "self", ".", "save_filename", ")", "\n", "\n", "", "if", "(", "i", "<", "epochs", "-", "1", ")", ":", "\n", "# do not change connectivity pattern after the last epoch", "\n", "# self.weightsEvolution_I() #this implementation is more didactic, but slow.", "\n", "                ", "w1", ",", "w2", "=", "self", ".", "weightsEvolution_II", "(", ")", "# this implementation has the same behaviour as the one above, but it is much faster.", "\n", "\n", "\n", "\n", "", "if", "(", "self", ".", "save_filename", "!=", "\"\"", ")", ":", "\n", "                ", "np", ".", "savetxt", "(", "self", ".", "save_filename", "+", "\"/metrics.txt\"", ",", "metrics", ")", "\n", "", "", "scipy", ".", "sparse", ".", "save_npz", "(", "self", ".", "save_filename", "+", "\"w1\"", ",", "w1", ")", "\n", "scipy", ".", "sparse", ".", "save_npz", "(", "self", ".", "save_filename", "+", "\"w2\"", ",", "w2", ")", "\n", "return", "metrics", "\n", "", "def", "getCoreInputConnections", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.getCoreInputConnections": [[211, 231], ["numpy.sort", "Sparse_DAE.find_first_pos", "Sparse_DAE.find_last_pos", "Sparse_DAE.Sparse_DAE.w[].tolil", "scipy.sparse.dok_matrix", "enumerate", "scipy.sparse.dok_matrix.tocsr().getnnz", "zip", "zip", "int", "int", "scipy.sparse.dok_matrix.tocsr", "min"], "methods", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.find_first_pos", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.find_last_pos"], ["", "def", "getCoreInputConnections", "(", "self", ")", ":", "\n", "        ", "values", "=", "np", ".", "sort", "(", "self", ".", "w", "[", "1", "]", ".", "data", ")", "\n", "firstZeroPos", "=", "find_first_pos", "(", "values", ",", "0", ")", "\n", "lastZeroPos", "=", "find_last_pos", "(", "values", ",", "0", ")", "\n", "\n", "largestNegative", "=", "values", "[", "int", "(", "(", "1", "-", "self", ".", "zeta", ")", "*", "firstZeroPos", ")", "]", "\n", "smallestPositive", "=", "values", "[", "\n", "int", "(", "min", "(", "values", ".", "shape", "[", "0", "]", "-", "1", ",", "lastZeroPos", "+", "self", ".", "zeta", "*", "(", "values", ".", "shape", "[", "0", "]", "-", "lastZeroPos", ")", ")", ")", "]", "\n", "\n", "wlil", "=", "self", ".", "w", "[", "1", "]", ".", "tolil", "(", ")", "\n", "wdok", "=", "dok_matrix", "(", "(", "self", ".", "dimensions", "[", "0", "]", ",", "self", ".", "dimensions", "[", "1", "]", ")", ",", "dtype", "=", "\"float64\"", ")", "\n", "\n", "# remove the weights closest to zero", "\n", "keepConnections", "=", "0", "\n", "for", "ik", ",", "(", "row", ",", "data", ")", "in", "enumerate", "(", "zip", "(", "wlil", ".", "rows", ",", "wlil", ".", "data", ")", ")", ":", "\n", "            ", "for", "jk", ",", "val", "in", "zip", "(", "row", ",", "data", ")", ":", "\n", "                ", "if", "(", "(", "val", "<", "largestNegative", ")", "or", "(", "val", ">", "smallestPositive", ")", ")", ":", "\n", "                    ", "wdok", "[", "ik", ",", "jk", "]", "=", "val", "\n", "keepConnections", "+=", "1", "\n", "", "", "", "return", "wdok", ".", "tocsr", "(", ")", ".", "getnnz", "(", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.weightsEvolution_I": [[232, 270], ["range", "numpy.sort", "Sparse_DAE.find_first_pos", "Sparse_DAE.find_last_pos", "Sparse_DAE.Sparse_DAE.w[].tolil", "Sparse_DAE.Sparse_DAE.pdw[].tolil", "scipy.sparse.dok_matrix", "scipy.sparse.dok_matrix", "enumerate", "range", "scipy.sparse.dok_matrix.tocsr", "scipy.sparse.dok_matrix.tocsr", "zip", "zip", "numpy.random.randint", "numpy.random.randint", "int", "int", "numpy.random.randint", "numpy.random.randint", "numpy.random.randn", "min"], "methods", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.find_first_pos", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.find_last_pos"], ["", "def", "weightsEvolution_I", "(", "self", ")", ":", "\n", "# this represents the core of the SET procedure. It removes the weights closest to zero in each layer and add new random weights", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "n_layers", ")", ":", "\n", "\n", "            ", "values", "=", "np", ".", "sort", "(", "self", ".", "w", "[", "i", "]", ".", "data", ")", "\n", "firstZeroPos", "=", "find_first_pos", "(", "values", ",", "0", ")", "\n", "lastZeroPos", "=", "find_last_pos", "(", "values", ",", "0", ")", "\n", "\n", "largestNegative", "=", "values", "[", "int", "(", "(", "1", "-", "self", ".", "zeta", ")", "*", "firstZeroPos", ")", "]", "\n", "smallestPositive", "=", "values", "[", "\n", "int", "(", "min", "(", "values", ".", "shape", "[", "0", "]", "-", "1", ",", "lastZeroPos", "+", "self", ".", "zeta", "*", "(", "values", ".", "shape", "[", "0", "]", "-", "lastZeroPos", ")", ")", ")", "]", "\n", "\n", "wlil", "=", "self", ".", "w", "[", "i", "]", ".", "tolil", "(", ")", "\n", "pdwlil", "=", "self", ".", "pdw", "[", "i", "]", ".", "tolil", "(", ")", "\n", "wdok", "=", "dok_matrix", "(", "(", "self", ".", "dimensions", "[", "i", "-", "1", "]", ",", "self", ".", "dimensions", "[", "i", "]", ")", ",", "dtype", "=", "\"float64\"", ")", "\n", "pdwdok", "=", "dok_matrix", "(", "(", "self", ".", "dimensions", "[", "i", "-", "1", "]", ",", "self", ".", "dimensions", "[", "i", "]", ")", ",", "dtype", "=", "\"float64\"", ")", "\n", "\n", "# remove the weights closest to zero", "\n", "keepConnections", "=", "0", "\n", "for", "ik", ",", "(", "row", ",", "data", ")", "in", "enumerate", "(", "zip", "(", "wlil", ".", "rows", ",", "wlil", ".", "data", ")", ")", ":", "\n", "                ", "for", "jk", ",", "val", "in", "zip", "(", "row", ",", "data", ")", ":", "\n", "                    ", "if", "(", "(", "val", "<", "largestNegative", ")", "or", "(", "val", ">", "smallestPositive", ")", ")", ":", "\n", "                        ", "wdok", "[", "ik", ",", "jk", "]", "=", "val", "\n", "pdwdok", "[", "ik", ",", "jk", "]", "=", "pdwlil", "[", "ik", ",", "jk", "]", "\n", "keepConnections", "+=", "1", "\n", "\n", "# add new random connections", "\n", "", "", "", "for", "kk", "in", "range", "(", "self", ".", "w", "[", "i", "]", ".", "data", ".", "shape", "[", "0", "]", "-", "keepConnections", ")", ":", "\n", "                ", "ik", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "dimensions", "[", "i", "-", "1", "]", ")", "\n", "jk", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "dimensions", "[", "i", "]", ")", "\n", "while", "(", "wdok", "[", "ik", ",", "jk", "]", "!=", "0", ")", ":", "\n", "                    ", "ik", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "dimensions", "[", "i", "-", "1", "]", ")", "\n", "jk", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "dimensions", "[", "i", "]", ")", "\n", "", "wdok", "[", "ik", ",", "jk", "]", "=", "np", ".", "random", ".", "randn", "(", ")", "/", "10", "\n", "pdwdok", "[", "ik", ",", "jk", "]", "=", "0", "\n", "\n", "", "self", ".", "pdw", "[", "i", "]", "=", "pdwdok", ".", "tocsr", "(", ")", "\n", "self", ".", "w", "[", "i", "]", "=", "wdok", ".", "tocsr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.weightsEvolution_II": [[271, 364], ["range", "datetime.datetime.now", "Sparse_DAE.Sparse_DAE.w[].tocoo", "Sparse_DAE.Sparse_DAE.pdw[].tocoo", "numpy.sort", "Sparse_DAE.find_first_pos", "Sparse_DAE.find_last_pos", "numpy.stack", "numpy.stack", "Sparse_DAE.array_intersect", "scipy.sparse.coo_matrix().tocsr", "numpy.size", "numpy.append", "scipy.sparse.coo_matrix().tocsr", "datetime.datetime.now", "print", "scipy.sparse.coo_matrix().tocsr", "Sparse_DAE.Sparse_DAE.inputLayerConnections.append", "numpy.savez_compressed", "scipy.sparse.coo_matrix().tocsr", "numpy.random.randn", "numpy.random.randint", "numpy.random.randint", "numpy.stack", "numpy.unique", "numpy.stack", "numpy.append", "numpy.append", "print", "int", "int", "scipy.sparse.coo_matrix", "scipy.sparse.coo_matrix().getnnz", "Sparse_DAE.array_intersect", "numpy.size", "scipy.sparse.coo_matrix", "min", "scipy.sparse.coo_matrix", "scipy.sparse.coo_matrix", "scipy.sparse.coo_matrix"], "methods", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.find_first_pos", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.find_last_pos", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.array_intersect", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.array_intersect"], ["", "", "def", "weightsEvolution_II", "(", "self", ")", ":", "\n", "# this represents the core of the SET procedure. It removes the weights closest to zero in each layer and add new random weights", "\n", "#evolve all layers, except the one from the last hidden layer to the output layer", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "n_layers", ")", ":", "\n", "# uncomment line below to stop evolution of dense weights more than 80% non-zeros", "\n", "#if(self.w[i].count_nonzero()/(self.w[i].get_shape()[0]*self.w[i].get_shape()[1]) < 0.8):", "\n", "                ", "t_ev_1", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "# converting to COO form", "\n", "wcoo", "=", "self", ".", "w", "[", "i", "]", ".", "tocoo", "(", ")", "\n", "valsW", "=", "wcoo", ".", "data", "\n", "rowsW", "=", "wcoo", ".", "row", "\n", "colsW", "=", "wcoo", ".", "col", "\n", "\n", "pdcoo", "=", "self", ".", "pdw", "[", "i", "]", ".", "tocoo", "(", ")", "\n", "valsPD", "=", "pdcoo", ".", "data", "\n", "rowsPD", "=", "pdcoo", ".", "row", "\n", "colsPD", "=", "pdcoo", ".", "col", "\n", "# print(\"Number of non zeros in W and PD matrix before evolution in layer\",i,[np.size(valsW), np.size(valsPD)])", "\n", "values", "=", "np", ".", "sort", "(", "self", ".", "w", "[", "i", "]", ".", "data", ")", "\n", "firstZeroPos", "=", "find_first_pos", "(", "values", ",", "0", ")", "\n", "lastZeroPos", "=", "find_last_pos", "(", "values", ",", "0", ")", "\n", "\n", "largestNegative", "=", "values", "[", "int", "(", "(", "1", "-", "self", ".", "zeta", ")", "*", "firstZeroPos", ")", "]", "\n", "smallestPositive", "=", "values", "[", "\n", "int", "(", "min", "(", "values", ".", "shape", "[", "0", "]", "-", "1", ",", "lastZeroPos", "+", "self", ".", "zeta", "*", "(", "values", ".", "shape", "[", "0", "]", "-", "lastZeroPos", ")", ")", ")", "]", "\n", "\n", "# remove the weights (W) closest to zero and modify PD as well", "\n", "valsWNew", "=", "valsW", "[", "(", "valsW", ">", "smallestPositive", ")", "|", "(", "valsW", "<", "largestNegative", ")", "]", "\n", "rowsWNew", "=", "rowsW", "[", "(", "valsW", ">", "smallestPositive", ")", "|", "(", "valsW", "<", "largestNegative", ")", "]", "\n", "colsWNew", "=", "colsW", "[", "(", "valsW", ">", "smallestPositive", ")", "|", "(", "valsW", "<", "largestNegative", ")", "]", "\n", "\n", "newWRowColIndex", "=", "np", ".", "stack", "(", "(", "rowsWNew", ",", "colsWNew", ")", ",", "axis", "=", "-", "1", ")", "\n", "oldPDRowColIndex", "=", "np", ".", "stack", "(", "(", "rowsPD", ",", "colsPD", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "newPDRowColIndexFlag", "=", "array_intersect", "(", "oldPDRowColIndex", ",", "newWRowColIndex", ")", "# careful about order", "\n", "\n", "valsPDNew", "=", "valsPD", "[", "newPDRowColIndexFlag", "]", "\n", "rowsPDNew", "=", "rowsPD", "[", "newPDRowColIndexFlag", "]", "\n", "colsPDNew", "=", "colsPD", "[", "newPDRowColIndexFlag", "]", "\n", "\n", "self", ".", "pdw", "[", "i", "]", "=", "coo_matrix", "(", "(", "valsPDNew", ",", "(", "rowsPDNew", ",", "colsPDNew", ")", ")", ",", "\n", "(", "self", ".", "dimensions", "[", "i", "-", "1", "]", ",", "self", ".", "dimensions", "[", "i", "]", ")", ")", ".", "tocsr", "(", ")", "\n", "\n", "if", "(", "i", "==", "1", ")", ":", "\n", "                    ", "w1", "=", "coo_matrix", "(", "(", "valsWNew", ",", "(", "rowsWNew", ",", "colsWNew", ")", ")", ",", "\n", "(", "self", ".", "dimensions", "[", "i", "-", "1", "]", ",", "self", ".", "dimensions", "[", "i", "]", ")", ")", ".", "tocsr", "(", ")", "\n", "self", ".", "inputLayerConnections", ".", "append", "(", "coo_matrix", "(", "(", "valsWNew", ",", "(", "rowsWNew", ",", "colsWNew", ")", ")", ",", "\n", "(", "self", ".", "dimensions", "[", "i", "-", "1", "]", ",", "self", ".", "dimensions", "[", "i", "]", ")", ")", ".", "getnnz", "(", "axis", "=", "1", ")", ")", "\n", "np", ".", "savez_compressed", "(", "self", ".", "save_filename", "+", "\"_input_connections.npz\"", ",", "\n", "inputLayerConnections", "=", "self", ".", "inputLayerConnections", ")", "\n", "", "else", ":", "\n", "                    ", "w2", "=", "coo_matrix", "(", "(", "valsWNew", ",", "(", "rowsWNew", ",", "colsWNew", ")", ")", ",", "\n", "(", "self", ".", "dimensions", "[", "i", "-", "1", "]", ",", "self", ".", "dimensions", "[", "i", "]", ")", ")", ".", "tocsr", "(", ")", "\n", "\n", "\n", "# add new random connections", "\n", "", "keepConnections", "=", "np", ".", "size", "(", "rowsWNew", ")", "\n", "lengthRandom", "=", "valsW", ".", "shape", "[", "0", "]", "-", "keepConnections", "\n", "randomVals", "=", "np", ".", "random", ".", "randn", "(", "lengthRandom", ")", "/", "10", "\n", "zeroVals", "=", "0", "*", "randomVals", "# explicit zeros", "\n", "\n", "# adding  (wdok[ik,jk]!=0): condition", "\n", "while", "(", "lengthRandom", ">", "0", ")", ":", "\n", "                    ", "ik", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "dimensions", "[", "i", "-", "1", "]", ",", "size", "=", "lengthRandom", ",", "dtype", "=", "'int32'", ")", "\n", "jk", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "dimensions", "[", "i", "]", ",", "size", "=", "lengthRandom", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "randomWRowColIndex", "=", "np", ".", "stack", "(", "(", "ik", ",", "jk", ")", ",", "axis", "=", "-", "1", ")", "\n", "randomWRowColIndex", "=", "np", ".", "unique", "(", "randomWRowColIndex", ",", "axis", "=", "0", ")", "# removing duplicates in new rows&cols", "\n", "oldWRowColIndex", "=", "np", ".", "stack", "(", "(", "rowsWNew", ",", "colsWNew", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "uniqueFlag", "=", "~", "array_intersect", "(", "randomWRowColIndex", ",", "oldWRowColIndex", ")", "# careful about order & tilda", "\n", "\n", "ikNew", "=", "randomWRowColIndex", "[", "uniqueFlag", "]", "[", ":", ",", "0", "]", "\n", "jkNew", "=", "randomWRowColIndex", "[", "uniqueFlag", "]", "[", ":", ",", "1", "]", "\n", "# be careful - row size and col size needs to be verified", "\n", "rowsWNew", "=", "np", ".", "append", "(", "rowsWNew", ",", "ikNew", ")", "\n", "colsWNew", "=", "np", ".", "append", "(", "colsWNew", ",", "jkNew", ")", "\n", "\n", "lengthRandom", "=", "valsW", ".", "shape", "[", "0", "]", "-", "np", ".", "size", "(", "rowsWNew", ")", "# this will constantly reduce lengthRandom", "\n", "\n", "# adding all the values along with corresponding row and column indices", "\n", "", "valsWNew", "=", "np", ".", "append", "(", "valsWNew", ",", "randomVals", ")", "\n", "# valsPDNew=np.append(valsPDNew, zeroVals)", "\n", "if", "(", "valsWNew", ".", "shape", "[", "0", "]", "!=", "rowsWNew", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "print", "(", "\"not good\"", ")", "\n", "", "self", ".", "w", "[", "i", "]", "=", "coo_matrix", "(", "(", "valsWNew", ",", "(", "rowsWNew", ",", "colsWNew", ")", ")", ",", "\n", "(", "self", ".", "dimensions", "[", "i", "-", "1", "]", ",", "self", ".", "dimensions", "[", "i", "]", ")", ")", ".", "tocsr", "(", ")", "\n", "\n", "# print(\"Number of non zeros in W and PD matrix after evolution in layer\",i,[(self.w[i].data.shape[0]), (self.pdw[i].data.shape[0])])", "\n", "\n", "t_ev_2", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "print", "(", "\"Weights evolution time for layer\"", ",", "i", ",", "\"is\"", ",", "t_ev_2", "-", "t_ev_1", ")", "\n", "", "return", "w1", ",", "w2", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.predict": [[365, 371], ["Sparse_DAE.Sparse_DAE._feed_forward"], "methods", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE._feed_forward"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "a", "=", "self", ".", "_feed_forward", "(", "x", ")", "\n", "a_hidden", "=", "a", "[", "self", ".", "n_layers", "-", "1", "]", "\n", "a_output", "=", "a", "[", "self", ".", "n_layers", "]", "\n", "del", "a", "\n", "return", "a_hidden", ",", "a_output", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.backpropagation_updates_Numpy": [[15, 21], ["range", "range"], "function", ["None"], ["def", "backpropagation_updates_Numpy", "(", "a", ",", "delta", ",", "rows", ",", "cols", ",", "out", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "out", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "s", "=", "0", "\n", "for", "j", "in", "range", "(", "a", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "s", "+=", "a", "[", "j", ",", "rows", "[", "i", "]", "]", "*", "delta", "[", "j", ",", "cols", "[", "i", "]", "]", "\n", "", "out", "[", "i", "]", "=", "s", "/", "a", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.find_first_pos": [[22, 25], ["numpy.abs().argmin", "numpy.abs"], "function", ["None"], ["", "", "def", "find_first_pos", "(", "array", ",", "value", ")", ":", "\n", "    ", "idx", "=", "(", "np", ".", "abs", "(", "array", "-", "value", ")", ")", ".", "argmin", "(", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.find_last_pos": [[26, 29], ["[].argmin", "numpy.abs"], "function", ["None"], ["", "def", "find_last_pos", "(", "array", ",", "value", ")", ":", "\n", "    ", "idx", "=", "(", "np", ".", "abs", "(", "array", "-", "value", ")", ")", "[", ":", ":", "-", "1", "]", ".", "argmin", "(", ")", "\n", "return", "array", ".", "shape", "[", "0", "]", "-", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.createSparseWeights": [[30, 39], ["scipy.sparse.lil_matrix", "range", "print", "weights.tocsr.tocsr", "numpy.float64", "weights.tocsr.getnnz", "numpy.random.randn", "weights.tocsr.getnnz", "numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["", "def", "createSparseWeights", "(", "epsilon", ",", "noRows", ",", "noCols", ")", ":", "\n", "# generate an Erdos Renyi sparse weights mask", "\n", "    ", "weights", "=", "lil_matrix", "(", "(", "noRows", ",", "noCols", ")", ")", "\n", "for", "i", "in", "range", "(", "epsilon", "*", "(", "noRows", "+", "noCols", ")", ")", ":", "\n", "        ", "weights", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "noRows", ")", ",", "np", ".", "random", ".", "randint", "(", "0", ",", "noCols", ")", "]", "=", "np", ".", "float64", "(", "np", ".", "random", ".", "randn", "(", ")", "/", "10", ")", "\n", "", "print", "(", "\"Create sparse matrix with \"", ",", "weights", ".", "getnnz", "(", ")", ",", "\" connections and \"", ",", "\n", "(", "weights", ".", "getnnz", "(", ")", "/", "(", "noRows", "*", "noCols", ")", ")", "*", "100", ",", "\"% density level\"", ")", "\n", "weights", "=", "weights", ".", "tocsr", "(", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.array_intersect": [[40, 45], ["numpy.in1d", "A.view", "B.view", "range"], "function", ["None"], ["", "def", "array_intersect", "(", "A", ",", "B", ")", ":", "\n", "# this are for array intersection", "\n", "    ", "nrows", ",", "ncols", "=", "A", ".", "shape", "\n", "dtype", "=", "{", "'names'", ":", "[", "'f{}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "ncols", ")", "]", ",", "'formats'", ":", "ncols", "*", "[", "A", ".", "dtype", "]", "}", "\n", "return", "np", ".", "in1d", "(", "A", ".", "view", "(", "dtype", ")", ",", "B", ".", "view", "(", "dtype", ")", ")", "# boolean return", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.QuickSelection.best_map": [[27, 56], ["numpy.unique", "len", "numpy.unique", "len", "max", "numpy.zeros", "range", "sklearn.linear_assignment", "numpy.zeros", "range", "np.zeros.astype", "len", "len", "print", "exit", "range", "numpy.count_nonzero"], "function", ["None"], ["def", "best_map", "(", "l1", ",", "l2", ")", ":", "\n", "    ", "\"\"\"\n    Permute labels of l2 to match l1 as much as possible\n    \"\"\"", "\n", "if", "len", "(", "l1", ")", "!=", "len", "(", "l2", ")", ":", "\n", "        ", "print", "(", "\"L1.shape must == L2.shape\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "label1", "=", "np", ".", "unique", "(", "l1", ")", "\n", "n_class1", "=", "len", "(", "label1", ")", "\n", "\n", "label2", "=", "np", ".", "unique", "(", "l2", ")", "\n", "n_class2", "=", "len", "(", "label2", ")", "\n", "\n", "n_class", "=", "max", "(", "n_class1", ",", "n_class2", ")", "\n", "G", "=", "np", ".", "zeros", "(", "(", "n_class", ",", "n_class", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "n_class1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "n_class2", ")", ":", "\n", "            ", "ss", "=", "l1", "==", "label1", "[", "i", "]", "\n", "tt", "=", "l2", "==", "label2", "[", "j", "]", "\n", "G", "[", "i", ",", "j", "]", "=", "np", ".", "count_nonzero", "(", "ss", "&", "tt", ")", "\n", "\n", "", "", "A", "=", "la", ".", "linear_assignment", "(", "-", "G", ")", "\n", "\n", "new_l2", "=", "np", ".", "zeros", "(", "l2", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n_class2", ")", ":", "\n", "        ", "new_l2", "[", "l2", "==", "label2", "[", "A", "[", "i", "]", "[", "1", "]", "]", "]", "=", "label1", "[", "A", "[", "i", "]", "[", "0", "]", "]", "\n", "", "return", "new_l2", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.QuickSelection.evaluation": [[58, 88], ["sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit", "QuickSelection.best_map", "sklearn.metrics.accuracy_score"], "function", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.fit", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.QuickSelection.best_map"], ["def", "evaluation", "(", "X_selected", ",", "n_clusters", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    This function calculates ARI, ACC and NMI of clustering results\n    Input\n    -----\n    X_selected: {numpy array}, shape (n_samples, n_selected_features}\n            input data on the selected features\n    n_clusters: {int}\n            number of clusters\n    y: {numpy array}, shape (n_samples,)\n            true labels\n    Output\n    ------\n    nmi: {float}\n        Normalized Mutual Information\n    acc: {float}\n        Accuracy\n    \"\"\"", "\n", "k_means", "=", "KMeans", "(", "n_clusters", "=", "n_clusters", ")", "\n", "\n", "k_means", ".", "fit", "(", "X_selected", ")", "\n", "y_predict", "=", "k_means", ".", "labels_", "\n", "\n", "\n", "\n", "# calculate ACC", "\n", "y_permuted_predict", "=", "best_map", "(", "y", ",", "y_predict", ")", "\n", "acc", "=", "accuracy_score", "(", "y", ",", "y_permuted_predict", ")", "\n", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.QuickSelection.eval_subset": [[92, 105], ["len", "sklearn.ensemble.ExtraTreesClassifier", "sklearn.ensemble.ExtraTreesClassifier.fit", "float", "range", "numpy.unique", "sklearn.ensemble.ExtraTreesClassifier.score", "QuickSelection.evaluation", "float"], "function", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.fit", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.QuickSelection.evaluation"], ["def", "eval_subset", "(", "train", ",", "test", ")", ":", "\n", "    ", "n_clusters", "=", "len", "(", "np", ".", "unique", "(", "train", "[", "2", "]", ")", ")", "\n", "\n", "clf", "=", "ExtraTreesClassifier", "(", "n_estimators", "=", "50", ",", "n_jobs", "=", "-", "1", ")", "\n", "clf", ".", "fit", "(", "train", "[", "0", "]", ",", "train", "[", "2", "]", ")", "\n", "DTacc", "=", "float", "(", "clf", ".", "score", "(", "test", "[", "0", "]", ",", "test", "[", "2", "]", ")", ")", "\n", "\n", "max_iters", "=", "10", "\n", "cacc", "=", "0.0", "\n", "for", "iter", "in", "range", "(", "max_iters", ")", ":", "\n", "        ", "acc", "=", "evaluation", "(", "train", "[", "0", "]", ",", "n_clusters", "=", "n_clusters", ",", "y", "=", "train", "[", "2", "]", ")", "\n", "cacc", "+=", "acc", "/", "max_iters", "\n", "", "return", "DTacc", ",", "float", "(", "cacc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.fs_utils.feature_selection": [[19, 38], ["fs_utils.fs_strength_w", "scipy.sparse.csr_matrix.transpose", "fs_utils.fs_strength_w", "fs_utils.fs_degree_w", "scipy.sparse.csr_matrix.transpose", "fs_utils.fs_degree_w", "fs_utils.fs_degree12", "scipy.sparse.csr_matrix.transpose", "fs_utils.fs_degree12", "scipy.sparse.csr_matrix.transpose", "fs_utils.fs_strength12", "scipy.sparse.csr_matrix.transpose", "fs_utils.fs_strength12", "scipy.sparse.csr_matrix.transpose"], "function", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.fs_utils.fs_strength_w", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.fs_utils.fs_strength_w", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.fs_utils.fs_degree_w", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.fs_utils.fs_degree_w", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.fs_utils.fs_degree12", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.fs_utils.fs_degree12", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.fs_utils.fs_strength12", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.fs_utils.fs_strength12"], ["def", "feature_selection", "(", "W1", ",", "W2", ",", "k", ",", "method", ")", ":", "\n", "    ", "if", "method", "==", "\"Node Strength(in)\"", ":", "\n", "        ", "indices", "=", "fs_strength_w", "(", "sparse", ".", "csr_matrix", ".", "transpose", "(", "W1", ")", ",", "k", ")", "\n", "", "elif", "method", "==", "\"Node Strength(out)\"", ":", "\n", "        ", "indices", "=", "fs_strength_w", "(", "W2", ",", "k", ")", "\n", "", "elif", "method", "==", "\"Node Degree(in)\"", ":", "\n", "        ", "indices", "=", "fs_degree_w", "(", "sparse", ".", "csr_matrix", ".", "transpose", "(", "W1", ")", ",", "k", ")", "\n", "", "elif", "method", "==", "\"Node Degree(out)\"", ":", "\n", "        ", "indices", "=", "fs_degree_w", "(", "W2", ",", "k", ")", "\n", "", "elif", "method", "==", "\"Degree(in_out)\"", ":", "\n", "        ", "indices", "=", "fs_degree12", "(", "sparse", ".", "csr_matrix", ".", "transpose", "(", "W1", ")", ",", "W2", ",", "k", ")", "\n", "", "elif", "method", "==", "\"Degree(out_in)\"", ":", "\n", "        ", "indices", "=", "fs_degree12", "(", "W2", ",", "sparse", ".", "csr_matrix", ".", "transpose", "(", "W1", ")", ",", "k", ")", "\n", "", "elif", "method", "==", "\"Node Strength(in_out)\"", ":", "\n", "        ", "indices", "=", "fs_strength12", "(", "sparse", ".", "csr_matrix", ".", "transpose", "(", "W1", ")", ",", "W2", ",", "k", ")", "\n", "", "elif", "method", "==", "\"Node Strength(out_in)\"", ":", "\n", "        ", "indices", "=", "fs_strength12", "(", "W2", ",", "sparse", ".", "csr_matrix", ".", "transpose", "(", "W1", ")", ",", "k", ")", "\n", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.fs_utils.get_degree": [[39, 45], ["W.tolil", "numpy.zeros", "range", "len", "numpy.sum"], "function", ["None"], ["", "def", "get_degree", "(", "W", ")", ":", "\n", "    ", "weights", "=", "W", ".", "tolil", "(", ")", "\n", "num_ws", "=", "np", ".", "zeros", "(", "W", ".", "shape", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "W", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "num_ws", "[", "i", "]", "=", "len", "(", "np", ".", "sum", "(", "weights", "[", ":", ",", "i", "]", ".", "data", ")", ")", "\n", "", "return", "num_ws", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.fs_utils.fs_strength_w": [[46, 57], ["W.tolil", "numpy.absolute", "numpy.sum", "numpy.zeros", "numpy.zeros", "range", "np.zeros.argsort"], "function", ["None"], ["", "def", "fs_strength_w", "(", "W", ",", "k", ")", ":", "\n", "    ", "weights", "=", "W", ".", "tolil", "(", ")", "\n", "abs_w", "=", "np", ".", "absolute", "(", "weights", ")", "\n", "sum_abs_w", "=", "np", ".", "sum", "(", "abs_w", ",", "axis", "=", "0", ")", "\n", "new_sum_w", "=", "np", ".", "zeros", "(", "W", ".", "shape", "[", "1", "]", ")", "\n", "#print(W.shape)", "\n", "new_sum_w", "=", "np", ".", "zeros", "(", "W", ".", "shape", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "W", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "new_sum_w", "[", "i", "]", "=", "sum_abs_w", "[", "0", ",", "i", "]", "\n", "", "indices", "=", "new_sum_w", ".", "argsort", "(", ")", "[", "-", "k", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.fs_utils.fs_degree_w": [[58, 64], ["numpy.zeros", "range", "len", "np.zeros.argsort"], "function", ["None"], ["", "def", "fs_degree_w", "(", "W", ",", "k", ")", ":", "\n", "    ", "num_ws", "=", "np", ".", "zeros", "(", "W", ".", "shape", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "W", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "num_ws", "[", "i", "]", "=", "len", "(", "W", "[", ":", ",", "i", "]", ".", "data", ")", "\n", "", "fs_indices", "=", "num_ws", ".", "argsort", "(", ")", "[", "-", "k", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "return", "fs_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.fs_utils.fs_degree12": [[65, 86], ["W1.tolil", "numpy.zeros", "range", "W2.tolil", "numpy.zeros", "range", "int", "W1.tolil", "numpy.zeros", "range", "len", "len", "len", "numpy.sum", "numpy.sum", "np.zeros.argsort", "numpy.sum", "np.zeros.argsort"], "function", ["None"], ["", "def", "fs_degree12", "(", "W1", ",", "W2", ",", "k", ")", ":", "\n", "    ", "weights", "=", "W1", ".", "tolil", "(", ")", "\n", "num_ws1", "=", "np", ".", "zeros", "(", "W1", ".", "shape", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "W1", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "num_ws1", "[", "i", "]", "=", "len", "(", "np", ".", "sum", "(", "weights", "[", ":", ",", "i", "]", ".", "data", ")", ")", "\n", "\n", "", "weights", "=", "W2", ".", "tolil", "(", ")", "\n", "num_ws2", "=", "np", ".", "zeros", "(", "W2", ".", "shape", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "W2", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "num_ws2", "[", "i", "]", "=", "len", "(", "np", ".", "sum", "(", "weights", "[", ":", ",", "i", "]", ".", "data", ")", ")", "\n", "\n", "", "num_ws", "=", "num_ws1", "+", "num_ws2", "\n", "c", "=", "int", "(", "num_ws", ".", "shape", "[", "0", "]", "*", "2", "/", "3", ")", "\n", "indices", "=", "num_ws", ".", "argsort", "(", ")", "[", "-", "c", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "weights", "=", "W1", ".", "tolil", "(", ")", "\n", "num_ws", "=", "np", ".", "zeros", "(", "W1", ".", "shape", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "W1", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "num_ws", "[", "i", "]", "=", "len", "(", "np", ".", "sum", "(", "weights", "[", "indices", ",", "i", "]", ".", "data", ")", ")", "\n", "", "fs_indices", "=", "num_ws", ".", "argsort", "(", ")", "[", "-", "k", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "return", "fs_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.fs_utils.fs_strength12": [[88, 122], ["W1.tolil", "numpy.absolute", "numpy.sum", "numpy.transpose", "numpy.zeros", "range", "W2.tolil", "numpy.absolute", "numpy.sum", "numpy.transpose", "numpy.zeros", "range", "int", "W1.tolil", "numpy.absolute", "numpy.sum", "numpy.transpose", "numpy.zeros", "range", "np.zeros.argsort", "np.zeros.argsort"], "function", ["None"], ["", "def", "fs_strength12", "(", "W1", ",", "W2", ",", "k", ")", ":", "\n", "\n", "    ", "weights", "=", "W1", ".", "tolil", "(", ")", "\n", "abs_w", "=", "np", ".", "absolute", "(", "weights", ")", "\n", "sum_abs_w", "=", "np", ".", "sum", "(", "abs_w", ",", "axis", "=", "1", ")", "\n", "sum_abs_w", "=", "np", ".", "transpose", "(", "sum_abs_w", ")", "\n", "new_sum_w1", "=", "np", ".", "zeros", "(", "W1", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "W1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "new_sum_w1", "[", "i", "]", "=", "sum_abs_w", "[", "0", ",", "i", "]", "\n", "\n", "", "weights", "=", "W2", ".", "tolil", "(", ")", "\n", "abs_w", "=", "np", ".", "absolute", "(", "weights", ")", "\n", "sum_abs_w", "=", "np", ".", "sum", "(", "abs_w", ",", "axis", "=", "1", ")", "\n", "sum_abs_w", "=", "np", ".", "transpose", "(", "sum_abs_w", ")", "\n", "new_sum_w2", "=", "np", ".", "zeros", "(", "W2", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "W2", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "new_sum_w2", "[", "i", "]", "=", "sum_abs_w", "[", "0", ",", "i", "]", "\n", "\n", "", "new_sum_w", "=", "new_sum_w1", "+", "new_sum_w1", "\n", "c", "=", "int", "(", "new_sum_w", ".", "shape", "[", "0", "]", "*", "0.5", ")", "\n", "indices1", "=", "new_sum_w", ".", "argsort", "(", ")", "[", "-", "c", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "weights", "=", "W1", ".", "tolil", "(", ")", "\n", "abs_w", "=", "np", ".", "absolute", "(", "weights", ")", "\n", "sum_abs_w", "=", "np", ".", "sum", "(", "abs_w", "[", "indices1", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "sum_abs_w", "=", "np", ".", "transpose", "(", "sum_abs_w", ")", "\n", "new_sum_w", "=", "np", ".", "zeros", "(", "W1", ".", "shape", "[", "1", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "W1", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "new_sum_w", "[", "i", "]", "=", "sum_abs_w", "[", "i", ",", "0", "]", "\n", "\n", "", "indices", "=", "new_sum_w", ".", "argsort", "(", ")", "[", "-", "k", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.plt_utils.plt_acc": [[24, 35], ["matplotlib.figure", "range", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.savefig", "dots.append", "matplotlib.plot"], "function", ["None"], ["def", "plt_acc", "(", "acc", ",", "path", ",", "type", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "dots", "=", "[", "]", "\n", "colors", "=", "[", "'g'", ",", "'blue'", ",", "'salmon'", ",", "'k'", ",", "'r'", ",", "'purple'", ",", "'yellow'", ",", "'c'", ",", "'m'", ",", "'sienna'", "]", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "        ", "dots", ".", "append", "(", "[", "]", ")", "\n", "dots", "[", "i", "]", ",", "=", "plt", ".", "plot", "(", "acc", ",", "linestyle", "=", "'--'", ",", "marker", "=", "'o'", ",", "color", "=", "colors", "[", "i", "]", ")", "\n", "", "plt", ".", "xlabel", "(", "'# of epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'Accuracy (%)'", ")", "\n", "plt", ".", "title", "(", "\"Classification Accuracy\"", ")", "\n", "plt", ".", "savefig", "(", "path", "+", "\"accuracy.png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.plt_utils.plt_loss": [[37, 46], ["matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.savefig"], "function", ["None"], ["", "def", "plt_loss", "(", "loss_train", ",", "loss_test", ",", "path", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "dot0", ",", "=", "plt", ".", "plot", "(", "loss_train", ",", "linestyle", "=", "':'", ",", "marker", "=", "'d'", ",", "color", "=", "'g'", ")", "\n", "dot1", ",", "=", "plt", ".", "plot", "(", "loss_test", ",", "linestyle", "=", "':'", ",", "marker", "=", "'d'", ",", "color", "=", "'b'", ")", "\n", "plt", ".", "legend", "(", "[", "dot0", ",", "dot1", "]", ",", "[", "\"Train\"", ",", "\"Test\"", "]", ")", "\n", "plt", ".", "xlabel", "(", "'# of epoch'", ")", "\n", "plt", ".", "ylabel", "(", "'MSE loss'", ")", "\n", "plt", ".", "title", "(", "\"Reconstruction error\"", ")", "\n", "plt", ".", "savefig", "(", "path", "+", "\"/reconstruction_error.png\"", ")", "\n", "#plt.show()   ", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.Sigmoid.activation": [[5, 8], ["numpy.exp"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "activation", "(", "z", ")", ":", "\n", "        ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "z", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.Sigmoid.prime": [[9, 12], ["other_classes.Sigmoid.activation", "other_classes.Sigmoid.activation"], "methods", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.NoActivation.activation", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.NoActivation.activation"], ["", "@", "staticmethod", "\n", "def", "prime", "(", "z", ")", ":", "\n", "        ", "return", "Sigmoid", ".", "activation", "(", "z", ")", "*", "(", "1", "-", "Sigmoid", ".", "activation", "(", "z", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.tanh.activation": [[14, 17], ["numpy.tanh"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "activation", "(", "z", ")", ":", "\n", "        ", "return", "(", "np", ".", "tanh", "(", "z", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.tanh.prime": [[18, 21], ["other_classes.tanh.activation"], "methods", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.NoActivation.activation"], ["", "@", "staticmethod", "\n", "def", "prime", "(", "z", ")", ":", "\n", "        ", "return", "1", "-", "tanh", ".", "activation", "(", "z", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.Relu.activation": [[23, 27], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "activation", "(", "z", ")", ":", "\n", "        ", "z", "[", "z", "<", "0", "]", "=", "0", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.Relu.prime": [[28, 33], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "prime", "(", "z", ")", ":", "\n", "        ", "z", "[", "z", "<", "0", "]", "=", "0", "\n", "z", "[", "z", ">", "0", "]", "=", "1", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.LeakyRelu.activation": [[35, 39], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "activation", "(", "z", ")", ":", "\n", "        ", "z", "[", "z", "<", "0", "]", "*=", "0.01", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.LeakyRelu.prime": [[40, 45], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "prime", "(", "z", ")", ":", "\n", "        ", "z", "[", "z", "<", "0", "]", "=", "0.01", "\n", "z", "[", "z", ">", "0", "]", "=", "1", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.Linear.activation": [[48, 51], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "activation", "(", "z", ")", ":", "\n", "        ", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.Linear.prime": [[52, 55], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "prime", "(", "z", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.MSE.__init__": [[59, 67], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "activation_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param activation_fn: Class object of the activation function.\n        \"\"\"", "\n", "if", "activation_fn", ":", "\n", "            ", "self", ".", "activation_fn", "=", "activation_fn", "\n", "", "else", ":", "\n", "            ", "self", ".", "activation_fn", "=", "NoActivation", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.MSE.activation": [[68, 70], ["other_classes.MSE.activation_fn.activation"], "methods", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.NoActivation.activation"], ["", "", "def", "activation", "(", "self", ",", "z", ")", ":", "\n", "        ", "return", "self", ".", "activation_fn", ".", "activation", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.MSE.loss": [[71, 79], ["numpy.mean"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "\"\"\"\n        :param y_true: (array) One hot encoded truth vector.\n        :param y_pred: (array) Prediction vector\n        :return: (flt)\n        \"\"\"", "\n", "return", "np", ".", "mean", "(", "(", "y_pred", "-", "y_true", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.MSE.prime": [[80, 83], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "prime", "(", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "return", "y_pred", "-", "y_true", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.MSE.delta": [[84, 90], ["other_classes.MSE.prime", "other_classes.MSE.activation_fn.prime"], "methods", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.NoActivation.prime", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.NoActivation.prime"], ["", "def", "delta", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "\"\"\"\n        Back propagation error delta\n        :return: (array)\n        \"\"\"", "\n", "return", "self", ".", "prime", "(", "y_true", ",", "y_pred", ")", "*", "self", ".", "activation_fn", ".", "prime", "(", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.NoActivation.activation": [[98, 105], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "activation", "(", "z", ")", ":", "\n", "        ", "\"\"\"\n        :param z: (array) w(x) + b\n        :return: z (array)\n        \"\"\"", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.other_classes.NoActivation.prime": [[106, 114], ["numpy.ones_like"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "prime", "(", "z", ")", ":", "\n", "        ", "\"\"\"\n        The prime of z * 1 = 1\n        :param z: (array)\n        :return: z': (array)\n        \"\"\"", "\n", "return", "np", ".", "ones_like", "(", "z", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.utils.load_data": [[19, 80], ["preprocessing.MinMaxScaler().fit.transform", "preprocessing.MinMaxScaler().fit.transform", "scipy.io.loadmat", "sklearn.model_selection.train_test_split", "sklearn.preprocessing.StandardScaler().fit", "numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt", "sklearn.preprocessing.StandardScaler().fit", "sklearn.preprocessing.StandardScaler", "urllib.urlopen", "urllib.urlopen", "urllib.urlopen", "urllib.urlopen", "numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt", "sklearn.preprocessing.StandardScaler().fit", "sklearn.preprocessing.StandardScaler", "tf.keras.datasets.mnist.load_data", "X_train.astype.reshape", "X_test.astype.reshape", "X_train.astype.astype", "X_test.astype.astype", "sklearn.preprocessing.StandardScaler().fit", "sklearn.preprocessing.StandardScaler", "scipy.io.loadmat", "sklearn.model_selection.train_test_split", "sklearn.preprocessing.MinMaxScaler().fit", "sklearn.preprocessing.StandardScaler", "scipy.io.loadmat", "sklearn.model_selection.train_test_split", "sklearn.preprocessing.StandardScaler().fit", "sklearn.preprocessing.MinMaxScaler", "scipy.io.loadmat", "sklearn.model_selection.train_test_split", "sklearn.preprocessing.MinMaxScaler().fit", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.MinMaxScaler"], "function", ["home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.fit", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.fit", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.fit", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.utils.load_data", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.fit", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.fit", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.fit", "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.Sparse_DAE.Sparse_DAE.fit"], ["def", "load_data", "(", "name", ")", ":", "\n", "\n", "    ", "if", "name", "==", "\"coil20\"", ":", "\n", "        ", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "'./datasets/COIL20.mat'", ")", "\n", "X", "=", "mat", "[", "'fea'", "]", "\n", "y", "=", "mat", "[", "'gnd'", "]", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.20", ",", "random_state", "=", "42", ")", "\n", "scaler", "=", "preprocessing", ".", "StandardScaler", "(", ")", ".", "fit", "(", "X_train", ")", "\n", "\n", "", "elif", "name", "==", "\"madelon\"", ":", "\n", "        ", "train_data_url", "=", "'https://archive.ics.uci.edu/ml/machine-learning-databases/madelon/MADELON/madelon_train.data'", "\n", "val_data_url", "=", "'https://archive.ics.uci.edu/ml/machine-learning-databases/madelon/MADELON/madelon_valid.data'", "\n", "train_resp_url", "=", "'https://archive.ics.uci.edu/ml/machine-learning-databases/madelon/MADELON/madelon_train.labels'", "\n", "val_resp_url", "=", "'https://archive.ics.uci.edu/ml/machine-learning-databases/madelon/madelon_valid.labels'", "\n", "test_data_url", "=", "'http://archive.ics.uci.edu/ml/machine-learning-databases/madelon/MADELON/madelon_test.data'", "\n", "X_train", "=", "np", ".", "loadtxt", "(", "urllib2", ".", "urlopen", "(", "train_data_url", ")", ")", "\n", "y_train", "=", "np", ".", "loadtxt", "(", "urllib2", ".", "urlopen", "(", "train_resp_url", ")", ")", "\n", "X_test", "=", "np", ".", "loadtxt", "(", "urllib2", ".", "urlopen", "(", "val_data_url", ")", ")", "\n", "y_test", "=", "np", ".", "loadtxt", "(", "urllib2", ".", "urlopen", "(", "val_resp_url", ")", ")", "\n", "scaler", "=", "preprocessing", ".", "StandardScaler", "(", ")", ".", "fit", "(", "X_train", ")", "\n", "\n", "\n", "", "elif", "name", "==", "\"har\"", ":", "\n", "        ", "X_train", "=", "np", ".", "loadtxt", "(", "'./datasets/UCI HAR Dataset/train/X_train.txt'", ")", "\n", "y_train", "=", "np", ".", "loadtxt", "(", "'./datasets/UCI HAR Dataset/train/y_train.txt'", ")", "\n", "X_test", "=", "np", ".", "loadtxt", "(", "'./datasets/UCI HAR Dataset/test/X_test.txt'", ")", "\n", "y_test", "=", "np", ".", "loadtxt", "(", "'./datasets/UCI HAR Dataset/test/y_test.txt'", ")", "\n", "scaler", "=", "preprocessing", ".", "StandardScaler", "(", ")", ".", "fit", "(", "X_train", ")", "\n", "\n", "", "elif", "name", "==", "\"MNIST\"", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "(", "X_train", ",", "y_train", ")", ",", "(", "X_test", ",", "y_test", ")", "=", "tf", ".", "keras", ".", "datasets", ".", "mnist", ".", "load_data", "(", ")", "\n", "X_train", "=", "X_train", ".", "reshape", "(", "(", "X_train", ".", "shape", "[", "0", "]", ",", "X_train", ".", "shape", "[", "1", "]", "*", "X_train", ".", "shape", "[", "2", "]", ")", ")", "\n", "X_test", "=", "X_test", ".", "reshape", "(", "(", "X_test", ".", "shape", "[", "0", "]", ",", "X_test", ".", "shape", "[", "1", "]", "*", "X_test", ".", "shape", "[", "2", "]", ")", ")", "\n", "X_train", "=", "X_train", ".", "astype", "(", "'float32'", ")", "\n", "X_test", "=", "X_test", ".", "astype", "(", "'float32'", ")", "\n", "scaler", "=", "preprocessing", ".", "StandardScaler", "(", ")", ".", "fit", "(", "X_train", ")", "\n", "\n", "", "elif", "name", "==", "\"SMK\"", ":", "\n", "        ", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "'./datasets/SMK_CAN_187.mat'", ",", "squeeze_me", "=", "True", ")", "\n", "X", "=", "mat", "[", "\"X\"", "]", "\n", "y", "=", "mat", "[", "\"Y\"", "]", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.20", ",", "random_state", "=", "42", ")", "\n", "scaler", "=", "preprocessing", ".", "MinMaxScaler", "(", ")", ".", "fit", "(", "X_train", ")", "\n", "\n", "", "elif", "name", "==", "\"GLA\"", ":", "\n", "        ", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "'./datasets/GLA-BRA-180.mat'", ",", "squeeze_me", "=", "True", ")", "\n", "X", "=", "mat", "[", "\"X\"", "]", "\n", "y", "=", "mat", "[", "\"Y\"", "]", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.20", ",", "random_state", "=", "42", ")", "\n", "scaler", "=", "preprocessing", ".", "StandardScaler", "(", ")", ".", "fit", "(", "X_train", ")", "\n", "", "elif", "name", "==", "\"mac\"", ":", "\n", "        ", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "'./datasets/PCMAC.mat'", ",", "squeeze_me", "=", "True", ")", "\n", "X", "=", "mat", "[", "\"X\"", "]", "\n", "y", "=", "mat", "[", "\"Y\"", "]", "\n", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "0.20", ",", "random_state", "=", "42", ")", "\n", "scaler", "=", "preprocessing", ".", "MinMaxScaler", "(", ")", ".", "fit", "(", "X_train", ")", "\n", "\n", "", "X_train", "=", "scaler", ".", "transform", "(", "X_train", ")", "\n", "X_test", "=", "scaler", ".", "transform", "(", "X_test", ")", "\n", "return", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.zahraatashgahi_QuickSelection.QuickSelection.utils.check_path": [[81, 89], ["os.path.exists", "os.path.dirname", "os.makedirs", "os.path.dirname"], "function", ["None"], ["", "def", "check_path", "(", "filename", ")", ":", "\n", "    ", "import", "os", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", "\n", "", "except", "OSError", "as", "exc", ":", "\n", "            ", "if", "exc", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                ", "raise", "\n", "\n"]]}