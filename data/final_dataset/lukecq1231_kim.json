{"home.repos.pwc.inspect_result.lukecq1231_kim.kim.data_iterator.TextIterator.__init__": [[14, 41], ["data_iterator.fopen", "data_iterator.fopen", "data_iterator.fopen", "data_iterator.fopen", "data_iterator.fopen", "open", "cPickle.load", "open", "cPickle.load"], "methods", ["home.repos.pwc.inspect_result.lukecq1231_kim.kim.data_iterator.fopen", "home.repos.pwc.inspect_result.lukecq1231_kim.kim.data_iterator.fopen", "home.repos.pwc.inspect_result.lukecq1231_kim.kim.data_iterator.fopen", "home.repos.pwc.inspect_result.lukecq1231_kim.kim.data_iterator.fopen", "home.repos.pwc.inspect_result.lukecq1231_kim.kim.data_iterator.fopen"], ["def", "__init__", "(", "self", ",", "source", ",", "target", ",", "source_lemma", ",", "target_lemma", ",", "label", ",", "\n", "dict", ",", "dict_lemma", ",", "\n", "batch_size", "=", "128", ",", "\n", "n_words", "=", "-", "1", ",", "\n", "n_words_lemma", "=", "-", "1", ",", "\n", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "source", "=", "fopen", "(", "source", ",", "'r'", ")", "\n", "self", ".", "target", "=", "fopen", "(", "target", ",", "'r'", ")", "\n", "self", ".", "source_lemma", "=", "fopen", "(", "source_lemma", ",", "'r'", ")", "\n", "self", ".", "target_lemma", "=", "fopen", "(", "target_lemma", ",", "'r'", ")", "\n", "self", ".", "label", "=", "fopen", "(", "label", ",", "'r'", ")", "\n", "with", "open", "(", "dict", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "dict", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "dict_lemma", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "dict_lemma", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_words", "=", "n_words", "\n", "self", ".", "n_words_lemma", "=", "n_words_lemma", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "end_of_data", "=", "False", "\n", "\n", "self", ".", "source_buffer", "=", "[", "]", "\n", "self", ".", "target_buffer", "=", "[", "]", "\n", "self", ".", "source_lemma_buffer", "=", "[", "]", "\n", "self", ".", "target_lemma_buffer", "=", "[", "]", "\n", "self", ".", "label_buffer", "=", "[", "]", "\n", "self", ".", "k", "=", "batch_size", "*", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.lukecq1231_kim.kim.data_iterator.TextIterator.__iter__": [[42, 44], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lukecq1231_kim.kim.data_iterator.TextIterator.reset": [[45, 51], ["data_iterator.TextIterator.source.seek", "data_iterator.TextIterator.target.seek", "data_iterator.TextIterator.source_lemma.seek", "data_iterator.TextIterator.target_lemma.seek", "data_iterator.TextIterator.label.seek"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "source", ".", "seek", "(", "0", ")", "\n", "self", ".", "target", ".", "seek", "(", "0", ")", "\n", "self", ".", "source_lemma", ".", "seek", "(", "0", ")", "\n", "self", ".", "target_lemma", ".", "seek", "(", "0", ")", "\n", "self", ".", "label", ".", "seek", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lukecq1231_kim.kim.data_iterator.TextIterator.next": [[52, 191], ["data_iterator.TextIterator.reset", "len", "len", "len", "len", "len", "xrange", "data_iterator.TextIterator.reset", "data_iterator.TextIterator.reset", "data_iterator.TextIterator.source.readline", "data_iterator.TextIterator.target.readline", "data_iterator.TextIterator.source_lemma.readline", "data_iterator.TextIterator.target_lemma.readline", "data_iterator.TextIterator.label.readline", "data_iterator.TextIterator.source_buffer.append", "data_iterator.TextIterator.target_buffer.append", "data_iterator.TextIterator.source_lemma_buffer.append", "data_iterator.TextIterator.target_lemma_buffer.append", "data_iterator.TextIterator.label_buffer.append", "numpy.array", "numpy.array.argsort", "range", "random.shuffle", "len", "len", "len", "data_iterator.TextIterator.insert", "data_iterator.TextIterator.append", "data_iterator.TextIterator.target_buffer.pop", "data_iterator.TextIterator.insert", "data_iterator.TextIterator.append", "data_iterator.TextIterator.source_lemma_buffer.pop", "data_iterator.TextIterator.insert", "data_iterator.TextIterator.append", "data_iterator.TextIterator.target_lemma_buffer.pop", "data_iterator.TextIterator.insert", "data_iterator.TextIterator.append", "data_iterator.TextIterator.label_buffer.pop", "source.append", "target.append", "source_lemma.append", "target_lemma.append", "label.append", "len", "len", "len", "data_iterator.TextIterator.strip().split", "data_iterator.TextIterator.strip().split", "data_iterator.TextIterator.strip().split", "data_iterator.TextIterator.strip().split", "data_iterator.TextIterator.strip", "int", "data_iterator.TextIterator.source_buffer.pop", "len", "math.ceil", "len", "tindex.extend", "tindex.extend", "len", "len", "len", "data_iterator.TextIterator.strip", "data_iterator.TextIterator.strip", "data_iterator.TextIterator.strip", "data_iterator.TextIterator.strip", "len"], "methods", ["home.repos.pwc.inspect_result.lukecq1231_kim.kim.data_iterator.TextIterator.reset", "home.repos.pwc.inspect_result.lukecq1231_kim.kim.data_iterator.TextIterator.reset", "home.repos.pwc.inspect_result.lukecq1231_kim.kim.data_iterator.TextIterator.reset"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "end_of_data", ":", "\n", "            ", "self", ".", "end_of_data", "=", "False", "\n", "self", ".", "reset", "(", ")", "\n", "raise", "StopIteration", "\n", "\n", "", "source", "=", "[", "]", "\n", "target", "=", "[", "]", "\n", "source_lemma", "=", "[", "]", "\n", "target_lemma", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "\n", "# fill buffer, if it's empty", "\n", "assert", "len", "(", "self", ".", "source_buffer", ")", "==", "len", "(", "self", ".", "target_buffer", ")", ",", "'Buffer size mismatch!'", "\n", "assert", "len", "(", "self", ".", "source_buffer", ")", "==", "len", "(", "self", ".", "label_buffer", ")", ",", "'Buffer size mismatch!'", "\n", "\n", "if", "len", "(", "self", ".", "source_buffer", ")", "==", "0", ":", "\n", "            ", "for", "k_", "in", "xrange", "(", "self", ".", "k", ")", ":", "\n", "                ", "ss", "=", "self", ".", "source", ".", "readline", "(", ")", "\n", "if", "ss", "==", "\"\"", ":", "\n", "                    ", "break", "\n", "", "tt", "=", "self", ".", "target", ".", "readline", "(", ")", "\n", "if", "tt", "==", "\"\"", ":", "\n", "                    ", "break", "\n", "", "ssl", "=", "self", ".", "source_lemma", ".", "readline", "(", ")", "\n", "if", "ssl", "==", "\"\"", ":", "\n", "                    ", "break", "\n", "", "ttl", "=", "self", ".", "target_lemma", ".", "readline", "(", ")", "\n", "if", "ttl", "==", "\"\"", ":", "\n", "                    ", "break", "\n", "", "ll", "=", "self", ".", "label", ".", "readline", "(", ")", "\n", "if", "ll", "==", "\"\"", ":", "\n", "                    ", "break", "\n", "\n", "", "self", ".", "source_buffer", ".", "append", "(", "ss", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "self", ".", "target_buffer", ".", "append", "(", "tt", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "self", ".", "source_lemma_buffer", ".", "append", "(", "ssl", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "self", ".", "target_lemma_buffer", ".", "append", "(", "ttl", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "self", ".", "label_buffer", ".", "append", "(", "ll", ".", "strip", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "shuffle", ":", "\n", "# sort by target buffer", "\n", "                ", "tlen", "=", "numpy", ".", "array", "(", "[", "len", "(", "t", ")", "for", "t", "in", "self", ".", "target_buffer", "]", ")", "\n", "tidx", "=", "tlen", ".", "argsort", "(", ")", "\n", "# shuffle mini-batch", "\n", "tindex", "=", "[", "]", "\n", "small_index", "=", "range", "(", "int", "(", "math", ".", "ceil", "(", "len", "(", "tidx", ")", "*", "1.", "/", "self", ".", "batch_size", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "small_index", ")", "\n", "for", "i", "in", "small_index", ":", "\n", "                    ", "if", "(", "i", "+", "1", ")", "*", "self", ".", "batch_size", ">", "len", "(", "tidx", ")", ":", "\n", "                        ", "tindex", ".", "extend", "(", "tidx", "[", "i", "*", "self", ".", "batch_size", ":", "]", ")", "\n", "", "else", ":", "\n", "                        ", "tindex", ".", "extend", "(", "tidx", "[", "i", "*", "self", ".", "batch_size", ":", "(", "i", "+", "1", ")", "*", "self", ".", "batch_size", "]", ")", "\n", "\n", "", "", "tidx", "=", "tindex", "\n", "\n", "_sbuf", "=", "[", "self", ".", "source_buffer", "[", "i", "]", "for", "i", "in", "tidx", "]", "\n", "_tbuf", "=", "[", "self", ".", "target_buffer", "[", "i", "]", "for", "i", "in", "tidx", "]", "\n", "_slbuf", "=", "[", "self", ".", "source_lemma_buffer", "[", "i", "]", "for", "i", "in", "tidx", "]", "\n", "_tlbuf", "=", "[", "self", ".", "target_lemma_buffer", "[", "i", "]", "for", "i", "in", "tidx", "]", "\n", "_lbuf", "=", "[", "self", ".", "label_buffer", "[", "i", "]", "for", "i", "in", "tidx", "]", "\n", "\n", "self", ".", "source_buffer", "=", "_sbuf", "\n", "self", ".", "target_buffer", "=", "_tbuf", "\n", "self", ".", "source_lemma_buffer", "=", "_slbuf", "\n", "self", ".", "target_lemma_buffer", "=", "_tlbuf", "\n", "self", ".", "label_buffer", "=", "_lbuf", "\n", "\n", "", "", "if", "len", "(", "self", ".", "source_buffer", ")", "==", "0", "or", "len", "(", "self", ".", "target_buffer", ")", "==", "0", "or", "len", "(", "self", ".", "label_buffer", ")", "==", "0", ":", "\n", "            ", "self", ".", "end_of_data", "=", "False", "\n", "self", ".", "reset", "(", ")", "\n", "raise", "StopIteration", "\n", "\n", "", "try", ":", "\n", "\n", "# actual work here", "\n", "            ", "while", "True", ":", "\n", "\n", "# read from source file and map to word index", "\n", "                ", "try", ":", "\n", "                    ", "ss", "=", "self", ".", "source_buffer", ".", "pop", "(", "0", ")", "\n", "", "except", "IndexError", ":", "\n", "                    ", "break", "\n", "\n", "", "ss", ".", "insert", "(", "0", ",", "'_BOS_'", ")", "\n", "ss", ".", "append", "(", "'_EOS_'", ")", "\n", "ss", "=", "[", "self", ".", "dict", "[", "w", "]", "if", "w", "in", "self", ".", "dict", "else", "1", "\n", "for", "w", "in", "ss", "]", "\n", "if", "self", ".", "n_words", ">", "0", ":", "\n", "                    ", "ss", "=", "[", "w", "if", "w", "<", "self", ".", "n_words", "else", "1", "for", "w", "in", "ss", "]", "\n", "\n", "# read from source file and map to word index", "\n", "", "tt", "=", "self", ".", "target_buffer", ".", "pop", "(", "0", ")", "\n", "tt", ".", "insert", "(", "0", ",", "'_BOS_'", ")", "\n", "tt", ".", "append", "(", "'_EOS_'", ")", "\n", "tt", "=", "[", "self", ".", "dict", "[", "w", "]", "if", "w", "in", "self", ".", "dict", "else", "1", "\n", "for", "w", "in", "tt", "]", "\n", "if", "self", ".", "n_words", ">", "0", ":", "\n", "                    ", "tt", "=", "[", "w", "if", "w", "<", "self", ".", "n_words", "else", "1", "for", "w", "in", "tt", "]", "\n", "\n", "", "ssl", "=", "self", ".", "source_lemma_buffer", ".", "pop", "(", "0", ")", "\n", "ssl", ".", "insert", "(", "0", ",", "'_BOS_'", ")", "\n", "ssl", ".", "append", "(", "'_EOS_'", ")", "\n", "ssl", "=", "[", "self", ".", "dict_lemma", "[", "w", "]", "if", "w", "in", "self", ".", "dict_lemma", "else", "1", "\n", "for", "w", "in", "ssl", "]", "\n", "if", "self", ".", "n_words_lemma", ">", "0", ":", "\n", "                    ", "ssl", "=", "[", "w", "if", "w", "<", "self", ".", "n_words_lemma", "else", "1", "for", "w", "in", "ssl", "]", "\n", "\n", "# read from source file and map to word index", "\n", "", "ttl", "=", "self", ".", "target_lemma_buffer", ".", "pop", "(", "0", ")", "\n", "ttl", ".", "insert", "(", "0", ",", "'_BOS_'", ")", "\n", "ttl", ".", "append", "(", "'_EOS_'", ")", "\n", "ttl", "=", "[", "self", ".", "dict_lemma", "[", "w", "]", "if", "w", "in", "self", ".", "dict_lemma", "else", "1", "\n", "for", "w", "in", "ttl", "]", "\n", "if", "self", ".", "n_words_lemma", ">", "0", ":", "\n", "                    ", "ttl", "=", "[", "w", "if", "w", "<", "self", ".", "n_words_lemma", "else", "1", "for", "w", "in", "ttl", "]", "\n", "\n", "# read label ", "\n", "", "ll", "=", "self", ".", "label_buffer", ".", "pop", "(", "0", ")", "\n", "\n", "source", ".", "append", "(", "ss", ")", "\n", "target", ".", "append", "(", "tt", ")", "\n", "source_lemma", ".", "append", "(", "ssl", ")", "\n", "target_lemma", ".", "append", "(", "ttl", ")", "\n", "label", ".", "append", "(", "ll", ")", "\n", "\n", "if", "len", "(", "source", ")", ">=", "self", ".", "batch_size", "or", "len", "(", "target", ")", ">=", "self", ".", "batch_size", "or", "len", "(", "label", ")", ">=", "self", ".", "batch_size", ":", "\n", "                    ", "break", "\n", "", "", "", "except", "IOError", ":", "\n", "            ", "self", ".", "end_of_data", "=", "True", "\n", "\n", "", "if", "len", "(", "source", ")", "<=", "0", "or", "len", "(", "target", ")", "<=", "0", "or", "len", "(", "label", ")", "<=", "0", ":", "\n", "            ", "self", ".", "end_of_data", "=", "False", "\n", "self", ".", "reset", "(", ")", "\n", "raise", "StopIteration", "\n", "\n", "", "return", "source", ",", "target", ",", "source_lemma", ",", "target_lemma", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lukecq1231_kim.kim.data_iterator.fopen": [[7, 11], ["filename.endswith", "open", "gzip.open"], "function", ["None"], ["def", "fopen", "(", "filename", ",", "mode", "=", "'r'", ")", ":", "\n", "    ", "if", "filename", ".", "endswith", "(", "'.gz'", ")", ":", "\n", "        ", "return", "gzip", ".", "open", "(", "filename", ",", "mode", ")", "\n", "", "return", "open", "(", "filename", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lukecq1231_kim.data.download.download": [[15, 20], ["os.path.join", "os.system", "url.split"], "function", ["None"], ["def", "download", "(", "url", ",", "dirpath", ")", ":", "\n", "    ", "filename", "=", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "dirpath", ",", "filename", ")", "\n", "os", ".", "system", "(", "'wget {} -O {}'", ".", "format", "(", "url", ",", "filepath", ")", ")", "\n", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.lukecq1231_kim.data.download.unzip": [[21, 27], ["print", "os.path.dirname", "os.remove", "zipfile.ZipFile", "zf.extractall"], "function", ["None"], ["", "def", "unzip", "(", "filepath", ")", ":", "\n", "    ", "print", "(", "\"Extracting: \"", "+", "filepath", ")", "\n", "dirpath", "=", "os", ".", "path", ".", "dirname", "(", "filepath", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "filepath", ")", "as", "zf", ":", "\n", "        ", "zf", ".", "extractall", "(", "dirpath", ")", "\n", "", "os", ".", "remove", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lukecq1231_kim.data.download.ungzip": [[28, 34], ["print", "os.path.dirname", "os.remove", "tarfile.open", "zf.extractall"], "function", ["None"], ["", "def", "ungzip", "(", "filepath", ")", ":", "\n", "    ", "print", "(", "\"Extracting: \"", "+", "filepath", ")", "\n", "dirpath", "=", "os", ".", "path", ".", "dirname", "(", "filepath", ")", "\n", "with", "tarfile", ".", "open", "(", "filepath", ")", "as", "zf", ":", "\n", "        ", "zf", ".", "extractall", "(", "dirpath", ")", "\n", "", "os", ".", "remove", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lukecq1231_kim.data.download.download_wordvecs": [[35, 43], ["os.path.exists", "download.unzip", "print", "os.makedirs", "download.download"], "function", ["home.repos.pwc.inspect_result.lukecq1231_kim.data.download.unzip", "home.repos.pwc.inspect_result.lukecq1231_kim.data.download.download"], ["", "def", "download_wordvecs", "(", "dirpath", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "dirpath", ")", ":", "\n", "        ", "print", "(", "'Found Glove vectors - skip'", ")", "\n", "return", "\n", "", "else", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirpath", ")", "\n", "", "url", "=", "'http://www-nlp.stanford.edu/data/glove.840B.300d.zip'", "\n", "unzip", "(", "download", "(", "url", ",", "dirpath", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lukecq1231_kim.data.download.download_snli": [[44, 52], ["os.path.exists", "download.unzip", "print", "os.makedirs", "download.download"], "function", ["home.repos.pwc.inspect_result.lukecq1231_kim.data.download.unzip", "home.repos.pwc.inspect_result.lukecq1231_kim.data.download.download"], ["", "def", "download_snli", "(", "dirpath", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "dirpath", ")", ":", "\n", "        ", "print", "(", "'Found SNLI dataset - skip'", ")", "\n", "return", "\n", "", "else", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirpath", ")", "\n", "", "url", "=", "'https://nlp.stanford.edu/projects/snli/snli_1.0.zip'", "\n", "unzip", "(", "download", "(", "url", ",", "dirpath", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lukecq1231_kim.data.download.download_wordnet": [[53, 61], ["os.path.exists", "download.ungzip", "print", "os.makedirs", "download.download"], "function", ["home.repos.pwc.inspect_result.lukecq1231_kim.data.download.ungzip", "home.repos.pwc.inspect_result.lukecq1231_kim.data.download.download"], ["", "def", "download_wordnet", "(", "dirpath", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "dirpath", ")", ":", "\n", "        ", "print", "(", "'Found WordNet 3.0 - skip'", ")", "\n", "return", "\n", "", "else", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirpath", ")", "\n", "", "url", "=", "'http://wordnetcode.princeton.edu/3.0/WNprolog-3.0.tar.gz'", "\n", "ungzip", "(", "download", "(", "url", ",", "dirpath", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lukecq1231_kim.data.download.download_corenlp": [[62, 70], ["os.path.exists", "download.unzip", "print", "os.makedirs", "download.download"], "function", ["home.repos.pwc.inspect_result.lukecq1231_kim.data.download.unzip", "home.repos.pwc.inspect_result.lukecq1231_kim.data.download.download"], ["", "def", "download_corenlp", "(", "dirpath", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "dirpath", ")", ":", "\n", "        ", "print", "(", "'Found Stanford CoreNLP - skip'", ")", "\n", "return", "\n", "", "else", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirpath", ")", "\n", "", "url", "=", "'http://nlp.stanford.edu/software/stanford-corenlp-full-2016-10-31.zip'", "\n", "unzip", "(", "download", "(", "url", ",", "dirpath", ")", ")", "\n", "\n"]]}