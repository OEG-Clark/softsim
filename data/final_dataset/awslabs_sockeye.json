{"home.repos.pwc.inspect_result.awslabs_sockeye.None.setup.get_long_description": [[13, 17], ["open", "f.read", "os.path.join"], "function", ["None"], ["def", "get_long_description", "(", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "ROOT", ",", "'README.md'", ")", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "markdown_txt", "=", "f", ".", "read", "(", ")", "\n", "return", "markdown_txt", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.None.setup.get_version": [[19, 23], ["re.compile", "open().read", "re.compile.search().group", "open", "re.compile.search", "os.path.join"], "function", ["None"], ["", "", "def", "get_version", "(", ")", ":", "\n", "    ", "VERSION_RE", "=", "re", ".", "compile", "(", "r'''__version__ = ['\"]([0-9.]+)['\"]'''", ")", "\n", "init", "=", "open", "(", "os", ".", "path", ".", "join", "(", "ROOT", ",", "'sockeye'", ",", "'__init__.py'", ")", ")", ".", "read", "(", ")", "\n", "return", "VERSION_RE", ".", "search", "(", "init", ")", ".", "group", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.None.setup.get_git_hash": [[25, 32], ["subprocess.Popen", "[].decode().strip", "[].decode", "subprocess.Popen.communicate"], "function", ["None"], ["", "def", "get_git_hash", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "sp", "=", "subprocess", ".", "Popen", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "PIPE", ")", "\n", "out_str", "=", "sp", ".", "communicate", "(", ")", "[", "0", "]", ".", "decode", "(", "\"utf-8\"", ")", ".", "strip", "(", ")", "\n", "return", "out_str", "\n", "", "except", ":", "\n", "        ", "return", "\"unkown\"", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.None.setup.temporarily_write_git_hash": [[34, 51], ["os.path.join", "os.path.exists", "RuntimeError", "open", "out.write", "os.remove"], "function", ["None"], ["", "", "@", "contextmanager", "\n", "def", "temporarily_write_git_hash", "(", "git_hash", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "'sockeye'", ",", "'git_version.py'", ")", ")", ":", "\n", "    ", "\"\"\"Temporarily create a module git_version in sockeye so that it will be included when installing and packaging.\"\"\"", "\n", "content", "=", "\"\"\"\n# This file is automatically generated in setup.py\ngit_hash = \"%s\"\n\"\"\"", "%", "git_hash", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"%s already exists, will not overwrite\"", "%", "filename", ")", "\n", "", "with", "open", "(", "filename", ",", "\"w\"", ")", "as", "out", ":", "\n", "        ", "out", ".", "write", "(", "content", ")", "\n", "", "try", ":", "\n", "        ", "yield", "\n", "", "except", ":", "\n", "        ", "raise", "\n", "", "finally", ":", "\n", "        ", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.None.setup.get_requirements": [[53, 56], ["open", "os.path.join", "line.rstrip"], "function", ["None"], ["", "", "def", "get_requirements", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "ROOT", ",", "filename", ")", ")", "as", "f", ":", "\n", "        ", "return", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "f", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.test.common.check_train_translate": [[33, 81], ["sockeye.test_utils.run_train_translate", "common.test_translate_equivalence", "common.test_translate_equivalence", "sockeye.test_utils.run_translate_restrict", "common._translate_output_is_valid", "common._translate_output_is_valid", "common.test_scoring", "common.test_odd_even_target_factors"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.run_train_translate", "home.repos.pwc.inspect_result.awslabs_sockeye.test.common.test_translate_equivalence", "home.repos.pwc.inspect_result.awslabs_sockeye.test.common.test_translate_equivalence", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.run_translate_restrict", "home.repos.pwc.inspect_result.awslabs_sockeye.test.common._translate_output_is_valid", "home.repos.pwc.inspect_result.awslabs_sockeye.test.common._translate_output_is_valid", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_bleu.test_scoring", "home.repos.pwc.inspect_result.awslabs_sockeye.test.common.test_odd_even_target_factors"], ["def", "check_train_translate", "(", "train_params", ":", "str", ",", "\n", "translate_params", ":", "str", ",", "\n", "data", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "use_prepared_data", ":", "bool", ",", "\n", "max_seq_len", ":", "int", ",", "\n", "compare_output", ":", "bool", "=", "True", ",", "\n", "seed", ":", "int", "=", "13", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\"\n    Tests core features (training, inference).\n    \"\"\"", "\n", "# train model and translate test set", "\n", "data", "=", "run_train_translate", "(", "train_params", "=", "train_params", ",", "\n", "translate_params", "=", "translate_params", ",", "\n", "data", "=", "data", ",", "\n", "use_prepared_data", "=", "use_prepared_data", ",", "\n", "max_seq_len", "=", "max_seq_len", ",", "\n", "seed", "=", "seed", ")", "\n", "\n", "# Test equivalence of batch decoding", "\n", "# With neural-vocab-selection the vocabulary is determined on the batch level so that batch and non-batch outputs", "\n", "# may differ.", "\n", "if", "'greedy'", "not", "in", "translate_params", "and", "'neural-vocab-selection'", "not", "in", "train_params", ":", "\n", "        ", "translate_params_batch", "=", "translate_params", "+", "\" --batch-size 2\"", "\n", "test_translate_equivalence", "(", "data", ",", "translate_params_batch", ",", "compare_output", "=", "True", ")", "\n", "\n", "# Run translate with restrict-lexicon", "\n", "", "if", "'neural-vocab-selection '", "not", "in", "train_params", ":", "\n", "        ", "data", "=", "run_translate_restrict", "(", "data", ",", "translate_params", ")", "\n", "\n", "", "test_translate_equivalence", "(", "data", ",", "translate_params", ",", "compare_output", "=", "True", ")", "\n", "\n", "# Test scoring by ensuring that the sockeye.scoring module produces the same scores when scoring the output", "\n", "# of sockeye.translate. However, since this training is on very small datasets, the output of sockeye.translate", "\n", "# is often pure garbage or empty and cannot be scored. So we only try to score if we have some valid output", "\n", "# to work with.", "\n", "# Only run scoring under these conditions. Why?", "\n", "# - translate splits up too-long sentences and translates them in sequence, invalidating the score, so skip that", "\n", "# - scoring requires valid translation output to compare against", "\n", "if", "'--max-input-length'", "not", "in", "translate_params", "and", "_translate_output_is_valid", "(", "data", "[", "'test_outputs'", "]", ")", "and", "'greedy'", "not", "in", "translate_params", "and", "'neural-vocab-selection'", "not", "in", "train_params", "and", "_translate_output_is_valid", "(", "data", "[", "'test_with_target_prefix_outputs'", "]", ")", ":", "\n", "        ", "test_scoring", "(", "data", ",", "translate_params", ",", "compare_output", ")", "\n", "\n", "# Test correct prediction of target factors if enabled", "\n", "", "if", "compare_output", "and", "'train_target_factors'", "in", "data", ":", "\n", "        ", "test_odd_even_target_factors", "(", "data", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.test.common.test_translate_equivalence": [[83, 149], ["os.path.join", "os.path.join", "sockeye.test_utils.collect_translate_output_and_scores", "sockeye.test_utils.collect_translate_output_and_scores", "sockeye.test_utils.TRANSLATE_PARAMS_COMMON.format", "unittest.mock.patch.object", "sockeye.translate.main", "sockeye.translate.main", "sockeye.test_utils.TRANSLATE_PARAMS_COMMON.format", "sockeye.test_utils.TRANSLATE_WITH_FACTORS_COMMON.format", "unittest.mock.patch.object", "sockeye.translate.main", "sockeye.translate.main", "len", "len", "len", "len", "zip", "params.split", "params.split", "json_output_with_target_prefix[].split", "json_output_with_target_prefix[].split", "min", "numpy.isnan", "numpy.isnan", "len", "len", "abs", "abs", "len", "range", "min", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.collect_translate_output_and_scores", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.collect_translate_output_and_scores", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main"], ["", "def", "test_translate_equivalence", "(", "data", ":", "Dict", "[", "str", ",", "Any", "]", ",", "translate_params_equiv", ":", "str", ",", "compare_output", ":", "bool", ")", ":", "\n", "    ", "\"\"\"\n    Tests whether the output and scores generated by sockeye.translate with translate_params_equiv are equal to\n    the previously generated outputs, referenced in the data dictionary.\n    \"\"\"", "\n", "out_path", "=", "os", ".", "path", ".", "join", "(", "data", "[", "'work_dir'", "]", ",", "\"test.out.equiv\"", ")", "\n", "out_with_target_prefix_path", "=", "os", ".", "path", ".", "join", "(", "data", "[", "'work_dir'", "]", ",", "\"test_with_target_prefix.out.equiv\"", ")", "\n", "\n", "# First set of params (with target prefix in JSON format)", "\n", "params", "=", "\"{} {} {}\"", ".", "format", "(", "sockeye", ".", "translate", ".", "__file__", ",", "\n", "TRANSLATE_PARAMS_COMMON", ".", "format", "(", "model", "=", "data", "[", "'model'", "]", ",", "\n", "input", "=", "data", "[", "'test_source_with_target_prefix'", "]", ",", "\n", "output", "=", "out_with_target_prefix_path", ")", ",", "\n", "translate_params_equiv", ")", "\n", "params", "+=", "TRANSLATE_WITH_JSON_FORMAT", "\n", "with", "patch", ".", "object", "(", "sys", ",", "\"argv\"", ",", "params", ".", "split", "(", ")", ")", ":", "\n", "        ", "sockeye", ".", "translate", ".", "main", "(", ")", "\n", "\n", "# Collect translate outputs and scores", "\n", "", "translate_outputs_with_target_prefix_equiv", "=", "collect_translate_output_and_scores", "(", "out_with_target_prefix_path", ")", "\n", "\n", "# Second set of params (without using target prefix)", "\n", "params", "=", "\"{} {} {}\"", ".", "format", "(", "sockeye", ".", "translate", ".", "__file__", ",", "\n", "TRANSLATE_PARAMS_COMMON", ".", "format", "(", "model", "=", "data", "[", "'model'", "]", ",", "\n", "input", "=", "data", "[", "'test_source'", "]", ",", "\n", "output", "=", "out_path", ")", ",", "\n", "translate_params_equiv", ")", "\n", "if", "'test_source_factors'", "in", "data", ":", "\n", "        ", "params", "+=", "TRANSLATE_WITH_FACTORS_COMMON", ".", "format", "(", "input_factors", "=", "\" \"", ".", "join", "(", "data", "[", "'test_source_factors'", "]", ")", ")", "\n", "", "with", "patch", ".", "object", "(", "sys", ",", "\"argv\"", ",", "params", ".", "split", "(", ")", ")", ":", "\n", "        ", "sockeye", ".", "translate", ".", "main", "(", ")", "\n", "# Collect translate outputs and scores", "\n", "", "translate_outputs_equiv", "=", "collect_translate_output_and_scores", "(", "out_path", ")", "\n", "\n", "assert", "'test_outputs'", "in", "data", "\n", "assert", "'test_with_target_prefix_outputs'", "in", "data", "\n", "assert", "len", "(", "data", "[", "'test_outputs'", "]", ")", "==", "len", "(", "data", "[", "'test_with_target_prefix_outputs'", "]", ")", "==", "len", "(", "translate_outputs_with_target_prefix_equiv", ")", "==", "len", "(", "translate_outputs_equiv", ")", "\n", "if", "compare_output", ":", "\n", "        ", "for", "json_output", ",", "json_output_with_target_prefix", ",", "json_output_equiv", ",", "json_output_with_target_prefix_equiv", "in", "zip", "(", "data", "[", "'test_outputs'", "]", ",", "data", "[", "'test_with_target_prefix_outputs'", "]", ",", "translate_outputs_equiv", ",", "translate_outputs_with_target_prefix_equiv", ")", ":", "\n", "            ", "assert", "json_output", "[", "'translation'", "]", "==", "json_output_equiv", "[", "'translation'", "]", ",", "f\"'{json_output['translation']}' vs. '{json_output_equiv['translation']}'\"", "\n", "assert", "json_output_with_target_prefix", "[", "'translation'", "]", "==", "json_output_with_target_prefix_equiv", "[", "'translation'", "]", ",", "f\"'{json_output_with_target_prefix['translation']}' vs. '{json_output_with_target_prefix_equiv['translation']}'\"", "\n", "assert", "abs", "(", "json_output", "[", "'score'", "]", "-", "json_output_equiv", "[", "'score'", "]", ")", "<", "0.01", "or", "np", ".", "isnan", "(", "json_output", "[", "'score'", "]", "-", "json_output_equiv", "[", "'score'", "]", ")", ",", "f\"'{json_output['score']}' vs. '{ json_output_equiv['score']}'\"", "\n", "assert", "abs", "(", "json_output_with_target_prefix", "[", "'score'", "]", "-", "json_output_with_target_prefix_equiv", "[", "'score'", "]", ")", "<", "0.01", "or", "np", ".", "isnan", "(", "json_output_with_target_prefix", "[", "'score'", "]", "-", "json_output_with_target_prefix_equiv", "[", "'score'", "]", ")", ",", "f\"'{json_output_with_target_prefix['score']}' vs. '{ json_output_with_target_prefix_equiv['score']}'\"", "\n", "\n", "# Check translation output always includes target prefix tokens", "\n", "prefix", "=", "json_output_with_target_prefix", "[", "'target_prefix'", "]", ".", "split", "(", ")", "\n", "translation", "=", "json_output_with_target_prefix", "[", "'translation'", "]", ".", "split", "(", ")", "\n", "ending", "=", "min", "(", "len", "(", "prefix", ")", ",", "len", "(", "translation", ")", ")", "\n", "assert", "prefix", "[", ":", "ending", "]", "==", "translation", "[", ":", "ending", "]", ",", "f\"'{prefix[:ending]}' vs. '{translation[:ending]}'\"", "\n", "\n", "# Check translation output factors always include target prefix factors", "\n", "if", "'target_prefix_factors'", "in", "json_output_with_target_prefix", ":", "\n", "                ", "prefix", "=", "json_output_with_target_prefix", "[", "'target_prefix_factors'", "]", "\n", "if", "len", "(", "prefix", ")", ">", "0", ":", "\n", "                    ", "for", "j", "in", "range", "(", "1", ",", "len", "(", "prefix", ")", "+", "1", ")", ":", "\n", "                        ", "factors_from_translation", "=", "json_output_with_target_prefix", "[", "f'factor{j}'", "]", "\n", "ending", "=", "min", "(", "len", "(", "prefix", "[", "j", "-", "1", "]", ")", ",", "len", "(", "factors_from_translation", ")", ")", "\n", "assert", "prefix", "[", "j", "-", "1", "]", "[", ":", "ending", "]", "==", "factors_from_translation", "[", ":", "ending", "]", ",", "f\"'{prefix[j - 1][:ending]}' vs. '{factors_from_translation[:ending]}' from . '{json_output_with_target_prefix}'\"", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.test.common.test_scoring": [[151, 259], ["translate_params.split", "enumerate", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "logger.info", "logger.info", "os.path.join", "open", "contextlib.ExitStack", "os.path.join", "open", "contextlib.ExitStack", "sockeye.test_utils.SCORE_PARAMS_COMMON.format", "sockeye.test_utils.SCORE_WITH_SOURCE_FACTORS_COMMON.format", "sockeye.test_utils.SCORE_WITH_TARGET_FACTORS_COMMON.format", "unittest.mock.patch.object", "sockeye.score.main", "sockeye.score.main", "open", "sockeye.test_utils.SCORE_PARAMS_COMMON.format", "sockeye.test_utils.SCORE_WITH_SOURCE_FACTORS_COMMON.format", "sockeye.test_utils.SCORE_WITH_TARGET_FACTORS_COMMON.format", "unittest.mock.patch.object", "sockeye.score.main", "sockeye.score.main", "open", "zip", "enumerate", "exit_stack.enter_context", "print", "enumerate", "enumerate", "exit_stack.enter_context", "print", "enumerate", "translate_params.split.split", "translate_params.split.split", "translate_json[].split", "logger.info", "translate_with_target_prefix_json[].split", "logger.info", "data.get", "open", "print", "data.get", "open", "print", "float", "float", "numpy.isclose", "numpy.isclose", "line.strip().split", "line.strip().split", "line.strip", "line.strip"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get"], ["", "", "", "", "", "", "def", "test_scoring", "(", "data", ":", "Dict", "[", "str", ",", "Any", "]", ",", "translate_params", ":", "str", ",", "test_similar_scores", ":", "bool", ")", ":", "\n", "    ", "\"\"\"\n    Tests the scoring CLI and checks for score equivalence with previously generated translate scores.\n    \"\"\"", "\n", "# Translate params that affect the score need to be used for scoring as well.", "\n", "relevant_params", "=", "{", "'--brevity-penalty-type'", ",", "\n", "'--brevity-penalty-weight'", ",", "\n", "'--brevity-penalty-constant-length-ratio'", ",", "\n", "'--length-penalty-alpha'", ",", "\n", "'--length-penalty-beta'", "}", "\n", "score_params", "=", "''", "\n", "params", "=", "translate_params", ".", "split", "(", ")", "\n", "for", "i", ",", "param", "in", "enumerate", "(", "params", ")", ":", "\n", "        ", "if", "param", "in", "relevant_params", ":", "\n", "            ", "score_params", "=", "'{} {}'", ".", "format", "(", "param", ",", "params", "[", "i", "+", "1", "]", ")", "\n", "", "", "out_path", "=", "os", ".", "path", ".", "join", "(", "data", "[", "'work_dir'", "]", ",", "\"score.out\"", ")", "\n", "out_with_target_prefix_path", "=", "os", ".", "path", ".", "join", "(", "data", "[", "'work_dir'", "]", ",", "\"score_with_target_prefix.out\"", ")", "\n", "\n", "# write translate outputs as target file for scoring and collect tokens", "\n", "# also optionally collect factor outputs", "\n", "target_path", "=", "os", ".", "path", ".", "join", "(", "data", "[", "'work_dir'", "]", ",", "\"score.target\"", ")", "\n", "target_factor_paths", "=", "[", "os", ".", "path", ".", "join", "(", "data", "[", "'work_dir'", "]", ",", "\"score.target.factor%d\"", "%", "i", ")", "for", "i", ",", "_", "in", "\n", "enumerate", "(", "data", ".", "get", "(", "'test_target_factors'", ",", "[", "]", ")", ",", "1", ")", "]", "\n", "with", "open", "(", "target_path", ",", "'w'", ")", "as", "target_out", ",", "ExitStack", "(", ")", "as", "exit_stack", ":", "\n", "        ", "target_factor_outs", "=", "[", "exit_stack", ".", "enter_context", "(", "open", "(", "p", ",", "'w'", ")", ")", "for", "p", "in", "target_factor_paths", "]", "\n", "for", "json_output", "in", "data", "[", "'test_outputs'", "]", ":", "\n", "            ", "print", "(", "json_output", "[", "'translation'", "]", ",", "file", "=", "target_out", ")", "\n", "for", "i", ",", "factor_out", "in", "enumerate", "(", "target_factor_outs", ",", "1", ")", ":", "\n", "                ", "factor", "=", "json_output", "[", "f'factor{i}'", "]", "\n", "print", "(", "factor", ",", "file", "=", "factor_out", ")", "\n", "\n", "", "", "", "target_with_target_prefix_path", "=", "os", ".", "path", ".", "join", "(", "data", "[", "'work_dir'", "]", ",", "\"score_with_target_prefix.target\"", ")", "\n", "target_with_target_prefix_factor_paths", "=", "[", "os", ".", "path", ".", "join", "(", "data", "[", "'work_dir'", "]", ",", "f\"score_with_target_prefix.target.factor{i}\"", ")", "for", "i", ",", "_", "in", "\n", "enumerate", "(", "data", ".", "get", "(", "'test_target_factors'", ",", "[", "]", ")", ",", "1", ")", "]", "\n", "with", "open", "(", "target_with_target_prefix_path", ",", "'w'", ")", "as", "target_out", ",", "ExitStack", "(", ")", "as", "exit_stack", ":", "\n", "        ", "target_factor_outs", "=", "[", "exit_stack", ".", "enter_context", "(", "open", "(", "p", ",", "'w'", ")", ")", "for", "p", "in", "target_with_target_prefix_factor_paths", "]", "\n", "for", "json_output", "in", "data", "[", "'test_with_target_prefix_outputs'", "]", ":", "\n", "            ", "print", "(", "json_output", "[", "'translation'", "]", ",", "file", "=", "target_out", ")", "\n", "for", "i", ",", "factor_out", "in", "enumerate", "(", "target_factor_outs", ",", "1", ")", ":", "\n", "                ", "factor", "=", "json_output", "[", "f'factor{i}'", "]", "\n", "print", "(", "factor", ",", "file", "=", "factor_out", ")", "\n", "\n", "\n", "# First set of params (with target prefix in JSON format)", "\n", "", "", "", "params", "=", "\"{} {} {}\"", ".", "format", "(", "sockeye", ".", "score", ".", "__file__", ",", "\n", "SCORE_PARAMS_COMMON", ".", "format", "(", "model", "=", "data", "[", "'model'", "]", ",", "\n", "source", "=", "data", "[", "'test_source'", "]", ",", "\n", "target", "=", "target_with_target_prefix_path", ",", "\n", "output", "=", "out_with_target_prefix_path", ")", ",", "\n", "score_params", ")", "\n", "if", "'test_source_factors'", "in", "data", ":", "\n", "        ", "params", "+=", "SCORE_WITH_SOURCE_FACTORS_COMMON", ".", "format", "(", "source_factors", "=", "\" \"", ".", "join", "(", "data", "[", "'test_source_factors'", "]", ")", ")", "\n", "", "if", "target_with_target_prefix_factor_paths", ":", "\n", "        ", "params", "+=", "SCORE_WITH_TARGET_FACTORS_COMMON", ".", "format", "(", "target_factors", "=", "\" \"", ".", "join", "(", "target_with_target_prefix_factor_paths", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Scoring with params %s\"", ",", "params", ")", "\n", "with", "patch", ".", "object", "(", "sys", ",", "\"argv\"", ",", "params", ".", "split", "(", ")", ")", ":", "\n", "        ", "sockeye", ".", "score", ".", "main", "(", ")", "\n", "\n", "# Collect scores from output file", "\n", "", "with", "open", "(", "out_with_target_prefix_path", ")", "as", "score_out", ":", "\n", "        ", "data_scoring_with_target_prefix", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "]", "for", "line", "in", "score_out", "]", "\n", "\n", "# Second set of params (without target prefix)", "\n", "", "params", "=", "\"{} {} {}\"", ".", "format", "(", "sockeye", ".", "score", ".", "__file__", ",", "\n", "SCORE_PARAMS_COMMON", ".", "format", "(", "model", "=", "data", "[", "'model'", "]", ",", "\n", "source", "=", "data", "[", "'test_source'", "]", ",", "\n", "target", "=", "target_path", ",", "\n", "output", "=", "out_path", ")", ",", "\n", "score_params", ")", "\n", "if", "'test_source_factors'", "in", "data", ":", "\n", "        ", "params", "+=", "SCORE_WITH_SOURCE_FACTORS_COMMON", ".", "format", "(", "source_factors", "=", "\" \"", ".", "join", "(", "data", "[", "'test_source_factors'", "]", ")", ")", "\n", "", "if", "target_factor_paths", ":", "\n", "        ", "params", "+=", "SCORE_WITH_TARGET_FACTORS_COMMON", ".", "format", "(", "target_factors", "=", "\" \"", ".", "join", "(", "target_factor_paths", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Scoring with params %s\"", ",", "params", ")", "\n", "with", "patch", ".", "object", "(", "sys", ",", "\"argv\"", ",", "params", ".", "split", "(", ")", ")", ":", "\n", "        ", "sockeye", ".", "score", ".", "main", "(", ")", "\n", "\n", "# Collect scores from output file", "\n", "", "with", "open", "(", "out_path", ")", "as", "score_out", ":", "\n", "        ", "data_scoring", "=", "[", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "]", "for", "line", "in", "score_out", "]", "\n", "\n", "", "if", "test_similar_scores", ":", "\n", "        ", "for", "inp", ",", "translate_json", ",", "translate_with_target_prefix_json", ",", "score_scores", ",", "score_with_target_prefix_scores", "in", "zip", "(", "data", "[", "'test_inputs'", "]", ",", "data", "[", "'test_outputs'", "]", ",", "data", "[", "'test_with_target_prefix_outputs'", "]", ",", "data_scoring", ",", "data_scoring_with_target_prefix", ")", ":", "\n", "            ", "score_score", ",", "*", "factor_scores", "=", "score_scores", "\n", "translate_tokens", "=", "translate_json", "[", "'translation'", "]", ".", "split", "(", ")", "\n", "translate_score", "=", "translate_json", "[", "'score'", "]", "\n", "logger", ".", "info", "(", "\"tokens: %s || translate score: %.4f || score score: %.4f\"", ",", "\n", "translate_tokens", ",", "translate_score", ",", "score_score", ")", "\n", "assert", "(", "translate_score", "==", "-", "np", ".", "inf", "and", "score_score", "==", "-", "np", ".", "inf", ")", "or", "np", ".", "isclose", "(", "translate_score", ",", "\n", "score_score", ",", "\n", "atol", "=", "1e-06", ")", ",", "\"input: %s || tokens: %s || translate score: %.6f || score score: %.6f\"", "%", "(", "inp", ",", "translate_tokens", ",", "\n", "translate_score", ",", "\n", "score_score", ")", "\n", "score_score", ",", "*", "factor_scores", "=", "score_with_target_prefix_scores", "\n", "translate_tokens", "=", "translate_with_target_prefix_json", "[", "'translation'", "]", ".", "split", "(", ")", "\n", "translate_score", "=", "translate_with_target_prefix_json", "[", "'score'", "]", "\n", "logger", ".", "info", "(", "\"tokens: %s || translate score: %.4f || score score: %.4f\"", ",", "\n", "translate_tokens", ",", "translate_score", ",", "score_score", ")", "\n", "assert", "(", "translate_score", "==", "-", "np", ".", "inf", "and", "score_score", "==", "-", "np", ".", "inf", ")", "or", "np", ".", "isclose", "(", "translate_score", ",", "\n", "score_score", ",", "\n", "atol", "=", "1e-06", ")", ",", "\"input: %s || tokens: %s || translate score: %.6f || score score: %.6f\"", "%", "(", "inp", ",", "translate_tokens", ",", "\n", "translate_score", ",", "\n", "score_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.test.common._translate_output_is_valid": [[261, 275], ["set", "any", "json_output[].split"], "function", ["None"], ["", "", "", "def", "_translate_output_is_valid", "(", "translate_outputs", ":", "List", "[", "str", "]", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    True if there are invalid tokens in out_path, or if no valid outputs were found.\n    \"\"\"", "\n", "# At least one output must be non-empty", "\n", "found_valid_output", "=", "False", "\n", "bad_tokens", "=", "set", "(", "C", ".", "VOCAB_SYMBOLS", ")", "\n", "for", "json_output", "in", "translate_outputs", ":", "\n", "        ", "if", "json_output", "and", "'translation'", "in", "json_output", ":", "\n", "            ", "found_valid_output", "=", "True", "\n", "", "if", "any", "(", "token", "for", "token", "in", "json_output", "[", "'translation'", "]", ".", "split", "(", ")", "if", "token", "in", "bad_tokens", ")", ":", "\n", "# There must be no bad tokens", "\n", "            ", "return", "False", "\n", "", "", "return", "found_valid_output", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.test.common.test_odd_even_target_factors": [[277, 296], ["len", "json[].split", "len", "json[].split", "print", "zip", "json.keys", "len", "len", "k.startswith", "k.endswith", "logger.warning", "int"], "function", ["None"], ["", "def", "test_odd_even_target_factors", "(", "data", ":", "Dict", ")", ":", "\n", "    ", "num_target_factors", "=", "len", "(", "data", "[", "'train_target_factors'", "]", ")", "\n", "for", "json", "in", "data", "[", "'test_outputs'", "]", ":", "\n", "        ", "factor_keys", "=", "[", "k", "for", "k", "in", "json", ".", "keys", "(", ")", "if", "k", ".", "startswith", "(", "\"factor\"", ")", "and", "not", "k", ".", "endswith", "(", "\"score\"", ")", "]", "\n", "assert", "len", "(", "factor_keys", ")", "==", "num_target_factors", "\n", "primary_tokens", "=", "json", "[", "'translation'", "]", ".", "split", "(", ")", "\n", "secondary_factor_tokens", "=", "[", "json", "[", "factor_key", "]", ".", "split", "(", ")", "for", "factor_key", "in", "factor_keys", "]", "\n", "for", "factor_tokens", "in", "secondary_factor_tokens", ":", "\n", "            ", "assert", "len", "(", "factor_tokens", ")", "==", "len", "(", "primary_tokens", ")", "\n", "print", "(", "primary_tokens", ",", "factor_tokens", ")", "\n", "for", "primary_token", ",", "factor_token", "in", "zip", "(", "primary_tokens", ",", "factor_tokens", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "if", "int", "(", "primary_token", ")", "%", "2", "==", "0", ":", "\n", "                        ", "assert", "factor_token", "==", "'e'", "\n", "", "else", ":", "\n", "                        ", "assert", "factor_token", "==", "'o'", "\n", "", "", "except", "ValueError", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"primary token cannot be converted to int, skipping\"", ")", "\n", "continue", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.test.test_integration.test_beam_generation": [[24, 31], ["pytest.mark.parametrize", "generate_graphs.generate", "filecmp.dircmp", "str", "str"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.vistools.generate_graphs.generate"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"beams, expected_output\"", ",", "BEAM_COMPARISONS", ")", "\n", "def", "test_beam_generation", "(", "beams", ",", "expected_output", ",", "tmpdir", ")", ":", "\n", "    ", "generate", "(", "beams", ",", "str", "(", "tmpdir", ")", ")", "\n", "\n", "# Same files in each dir, does not check contents", "\n", "result", "=", "dircmp", "(", "expected_output", ",", "str", "(", "tmpdir", ")", ")", "\n", "assert", "result", ".", "left_list", "==", "result", ".", "right_list", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.integration.test_seq_copy_int.test_seq_copy": [[144, 175], ["pytest.mark.parametrize", "sockeye.test_utils.tmp_digits_dataset", "test.common.check_train_translate"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.tmp_digits_dataset", "home.repos.pwc.inspect_result.awslabs_sockeye.test.common.check_train_translate"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"train_params, translate_params, use_prepared_data,\"", "\n", "\"n_source_factors, n_target_factors\"", ",", "TEST_CASES", ")", "\n", "def", "test_seq_copy", "(", "train_params", ":", "str", ",", "\n", "translate_params", ":", "str", ",", "\n", "use_prepared_data", ":", "bool", ",", "\n", "n_source_factors", ":", "int", ",", "\n", "n_target_factors", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Task: copy short sequences of digits\n    \"\"\"", "\n", "\n", "with", "tmp_digits_dataset", "(", "prefix", "=", "\"test_seq_copy\"", ",", "\n", "train_line_count", "=", "_TRAIN_LINE_COUNT", ",", "\n", "train_line_count_empty", "=", "_TRAIN_LINE_COUNT_EMPTY", ",", "\n", "train_max_length", "=", "_LINE_MAX_LENGTH", ",", "\n", "dev_line_count", "=", "_DEV_LINE_COUNT", ",", "\n", "dev_max_length", "=", "_LINE_MAX_LENGTH", ",", "\n", "test_line_count", "=", "_TEST_LINE_COUNT", ",", "\n", "test_line_count_empty", "=", "_TEST_LINE_COUNT_EMPTY", ",", "\n", "test_max_length", "=", "_TEST_MAX_LENGTH", ",", "\n", "sort_target", "=", "False", ",", "\n", "with_n_source_factors", "=", "n_source_factors", ",", "\n", "with_n_target_factors", "=", "n_target_factors", ")", "as", "data", ":", "\n", "# TODO: Here we temporarily switch off comparing translation and scoring scores, which", "\n", "# sometimes produces inconsistent results for --batch-size > 1 (see issue #639 on github).", "\n", "        ", "check_train_translate", "(", "train_params", "=", "train_params", ",", "\n", "translate_params", "=", "translate_params", ",", "\n", "data", "=", "data", ",", "\n", "use_prepared_data", "=", "use_prepared_data", ",", "\n", "max_seq_len", "=", "_LINE_MAX_LENGTH", ",", "\n", "compare_output", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.integration.test_seq_copy_int.test_other_clis": [[184, 207], ["pytest.mark.parametrize", "sockeye.test_utils.tmp_digits_dataset", "sockeye.test_utils.run_train_translate", "test_seq_copy_int._test_checkpoint_decoder", "test_seq_copy_int._test_parameter_averaging", "test_seq_copy_int._test_evaluate_cli"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.tmp_digits_dataset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.run_train_translate", "home.repos.pwc.inspect_result.awslabs_sockeye.integration.test_seq_copy_int._test_checkpoint_decoder", "home.repos.pwc.inspect_result.awslabs_sockeye.integration.test_seq_copy_int._test_parameter_averaging", "home.repos.pwc.inspect_result.awslabs_sockeye.integration.test_seq_copy_int._test_evaluate_cli"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"train_params, translate_params\"", ",", "TINY_TEST_MODEL", ")", "\n", "def", "test_other_clis", "(", "train_params", ":", "str", ",", "translate_params", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Task: test CLIs and core features other than train & translate.\n    \"\"\"", "\n", "with", "tmp_digits_dataset", "(", "prefix", "=", "\"test_other_clis\"", ",", "\n", "train_line_count", "=", "_TRAIN_LINE_COUNT", ",", "\n", "train_line_count_empty", "=", "_TRAIN_LINE_COUNT_EMPTY", ",", "\n", "train_max_length", "=", "_LINE_MAX_LENGTH", ",", "\n", "dev_line_count", "=", "_DEV_LINE_COUNT", ",", "\n", "dev_max_length", "=", "_LINE_MAX_LENGTH", ",", "\n", "test_line_count", "=", "_TEST_LINE_COUNT", ",", "\n", "test_line_count_empty", "=", "0", ",", "\n", "test_max_length", "=", "_TEST_MAX_LENGTH", ")", "as", "data", ":", "\n", "# train a minimal default model", "\n", "        ", "data", "=", "run_train_translate", "(", "train_params", "=", "train_params", ",", "\n", "translate_params", "=", "translate_params", ",", "\n", "data", "=", "data", ",", "\n", "max_seq_len", "=", "_LINE_MAX_LENGTH", ")", "\n", "\n", "_test_checkpoint_decoder", "(", "data", "[", "'dev_source'", "]", ",", "data", "[", "'dev_target'", "]", ",", "data", "[", "'model'", "]", ")", "\n", "_test_parameter_averaging", "(", "data", "[", "'model'", "]", ")", "\n", "_test_evaluate_cli", "(", "data", "[", "'test_outputs'", "]", ",", "data", "[", "'test_target'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.integration.test_seq_copy_int._test_evaluate_cli": [[209, 227], ["tempfile.TemporaryDirectory", "os.path.join", "open", "unittest.mock.patch.object", "sockeye.evaluate.main", "sockeye.evaluate.main", "sockeye.evaluate.main", "print", "eval_params.split"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main"], ["", "", "def", "_test_evaluate_cli", "(", "test_outputs", ":", "List", "[", "str", "]", ",", "test_target_path", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Runs sockeye-evaluate CLI with translations and a reference file.\n    \"\"\"", "\n", "with", "TemporaryDirectory", "(", "prefix", "=", "\"test_evaluate\"", ")", "as", "work_dir", ":", "\n", "# write temporary output file", "\n", "        ", "out_path", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "'hypotheses'", ")", "\n", "with", "open", "(", "out_path", ",", "'w'", ")", "as", "fd", ":", "\n", "            ", "for", "output", "in", "test_outputs", ":", "\n", "                ", "print", "(", "output", "[", "'translation'", "]", ",", "file", "=", "fd", ")", "\n", "# Run evaluate cli", "\n", "", "", "eval_params", "=", "\"{} --hypotheses {hypotheses} --references {references} --metrics {metrics}\"", ".", "format", "(", "\n", "sockeye", ".", "evaluate", ".", "__file__", ",", "\n", "hypotheses", "=", "out_path", ",", "\n", "references", "=", "test_target_path", ",", "\n", "metrics", "=", "\"bleu chrf rouge1 ter\"", ")", "\n", "with", "patch", ".", "object", "(", "sys", ",", "\"argv\"", ",", "eval_params", ".", "split", "(", ")", ")", ":", "\n", "            ", "sockeye", ".", "evaluate", ".", "main", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.integration.test_seq_copy_int._test_parameter_averaging": [[229, 241], ["sockeye.average.find_checkpoints", "sockeye.average.find_checkpoints", "sockeye.average.find_checkpoints", "sockeye.average.average", "sockeye.average.average", "sockeye.average.average", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.find_checkpoints", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.find_checkpoints", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.find_checkpoints", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.average", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.average", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.average"], ["", "", "", "def", "_test_parameter_averaging", "(", "model_path", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Runs parameter averaging with all available strategies\n    \"\"\"", "\n", "for", "strategy", "in", "C", ".", "AVERAGE_CHOICES", ":", "\n", "        ", "points", "=", "sockeye", ".", "average", ".", "find_checkpoints", "(", "model_path", "=", "model_path", ",", "\n", "size", "=", "4", ",", "\n", "strategy", "=", "strategy", ",", "\n", "metric", "=", "C", ".", "PERPLEXITY", ")", "\n", "assert", "len", "(", "points", ")", ">", "0", "\n", "averaged_params", "=", "sockeye", ".", "average", ".", "average", "(", "points", ")", "\n", "assert", "averaged_params", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.integration.test_seq_copy_int._test_checkpoint_decoder": [[243, 273], ["min", "sockeye.model.load_model", "sockeye.checkpoint_decoder.CheckpointDecoder", "sockeye.checkpoint_decoder.CheckpointDecoder", "sockeye.checkpoint_decoder.CheckpointDecoder", "sockeye.checkpoint_decoder.CheckpointDecoder.decode_and_evaluate", "logger.info", "model.load_parameters", "open", "sum", "int", "os.path.join", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.load_model", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.checkpoint_decoder.CheckpointDecoder.decode_and_evaluate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.load_parameters"], ["", "", "def", "_test_checkpoint_decoder", "(", "dev_source_path", ":", "str", ",", "dev_target_path", ":", "str", ",", "model_path", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Runs checkpoint decoder on 10% of the dev data and checks whether metric\n    keys are present in the result dict. Also checks that we can reload model\n    parameters after running the checkpoint decoder (case when using the\n    plateau-reduce scheduler).\n    \"\"\"", "\n", "with", "open", "(", "dev_source_path", ")", "as", "dev_fd", ":", "\n", "        ", "num_dev_sent", "=", "sum", "(", "1", "for", "_", "in", "dev_fd", ")", "\n", "", "sample_size", "=", "min", "(", "1", ",", "int", "(", "num_dev_sent", "*", "0.1", ")", ")", "\n", "\n", "model", ",", "source_vocabs", ",", "target_vocabs", "=", "load_model", "(", "model_folder", "=", "model_path", ",", "device", "=", "pt", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "cp_decoder", "=", "sockeye", ".", "checkpoint_decoder", ".", "CheckpointDecoder", "(", "device", "=", "pt", ".", "device", "(", "'cpu'", ")", ",", "\n", "inputs", "=", "[", "dev_source_path", "]", ",", "\n", "references", "=", "[", "dev_target_path", "]", ",", "\n", "source_vocabs", "=", "source_vocabs", ",", "\n", "target_vocabs", "=", "target_vocabs", ",", "\n", "model", "=", "model", ",", "\n", "model_folder", "=", "model_path", ",", "\n", "sample_size", "=", "sample_size", ",", "\n", "batch_size", "=", "2", ",", "\n", "beam_size", "=", "2", ")", "\n", "cp_metrics", "=", "cp_decoder", ".", "decode_and_evaluate", "(", ")", "\n", "logger", ".", "info", "(", "\"Checkpoint decoder metrics: %s\"", ",", "cp_metrics", ")", "\n", "assert", "'bleu'", "in", "cp_metrics", "\n", "assert", "'chrf'", "in", "cp_metrics", "\n", "assert", "'decode-walltime'", "in", "cp_metrics", "\n", "\n", "model", ".", "load_parameters", "(", "os", ".", "path", ".", "join", "(", "model_path", ",", "C", ".", "PARAMS_BEST_NAME", ")", ",", "device", "=", "pt", ".", "device", "(", "'cpu'", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.integration.test_backwards_compatibility.test_backwards_compatibility": [[38, 58], ["tempfile.TemporaryDirectory", "os.path.join", "logger.info", "unittest.mock.patch.object", "sockeye.translate.main", "open", "params.split", "model_out.read"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main"], ["def", "test_backwards_compatibility", "(", ")", ":", "\n", "    ", "\"\"\"\n    This test checks whether the current code can still produce translations with a model that was trained with the\n    same major version.\n    \"\"\"", "\n", "import", "sockeye", ".", "translate", "\n", "with", "TemporaryDirectory", "(", ")", "as", "work_dir", ":", "\n", "        ", "output_file", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "\"out\"", ")", "\n", "params", "=", "\"\"\"{sockeye} --use-cpu --models {model} --input {input} --output {output} \"\"\"", ".", "format", "(", "\n", "sockeye", "=", "sockeye", ".", "translate", ".", "__file__", ",", "\n", "model", "=", "\"test/data/model_3.0.x\"", ",", "\n", "input", "=", "\"test/data/model_3.0.x/model_input\"", ",", "\n", "output", "=", "output_file", "\n", ")", "\n", "logger", ".", "info", "(", "\"Translating with params %s\"", ",", "params", ")", "\n", "with", "patch", ".", "object", "(", "sys", ",", "\"argv\"", ",", "params", ".", "split", "(", ")", ")", ":", "\n", "            ", "sockeye", ".", "translate", ".", "main", "(", ")", "\n", "\n", "", "with", "open", "(", "output_file", ")", "as", "model_out", ":", "\n", "            ", "assert", "model_out", ".", "read", "(", ")", "==", "EXPECTED_OUTPUT", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_average.test_strategy_best": [[24, 34], ["pytest.mark.parametrize", "sockeye.strategy_best"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.strategy_best"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"test_points, expected_top_n, size, maximize\"", ",", "[", "\n", "(", "[", "(", "1.1", ",", "3", ")", ",", "(", "2.2", ",", "2", ")", ",", "(", "3.3", ",", "1", ")", "]", ",", "[", "(", "3.3", ",", "1", ")", ",", "(", "2.2", ",", "2", ")", ",", "(", "1.1", ",", "3", ")", "]", ",", "3", ",", "True", ")", ",", "\n", "(", "[", "(", "1.1", ",", "3", ")", ",", "(", "2.2", ",", "2", ")", ",", "(", "3.3", ",", "1", ")", "]", ",", "[", "(", "1.1", ",", "3", ")", ",", "(", "2.2", ",", "2", ")", ",", "(", "3.3", ",", "1", ")", "]", ",", "3", ",", "False", ")", ",", "\n", "(", "[", "(", "1.1", ",", "4", ")", ",", "(", "2.2", ",", "3", ")", ",", "(", "3.3", ",", "2", ")", ",", "(", "4.4", ",", "1", ")", "]", ",", "[", "(", "4.4", ",", "1", ")", ",", "(", "3.3", ",", "2", ")", ",", "(", "2.2", ",", "3", ")", "]", ",", "3", ",", "True", ")", ",", "\n", "(", "[", "(", "1.1", ",", "4", ")", ",", "(", "2.2", ",", "3", ")", ",", "(", "3.3", ",", "2", ")", ",", "(", "4.4", ",", "1", ")", "]", ",", "[", "(", "4.4", ",", "1", ")", ",", "(", "3.3", ",", "2", ")", ",", "(", "2.2", ",", "3", ")", ",", "(", "1.1", ",", "4", ")", "]", ",", "5", ",", "True", ")", "\n", "]", ")", "\n", "def", "test_strategy_best", "(", "test_points", ",", "expected_top_n", ",", "size", ",", "maximize", ")", ":", "\n", "    ", "result", "=", "average", ".", "strategy_best", "(", "test_points", ",", "size", ",", "maximize", ")", "\n", "assert", "result", "==", "expected_top_n", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_average.test_strategy_last": [[36, 48], ["pytest.mark.parametrize", "sockeye.strategy_last"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.strategy_last"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"test_points, expected_top_n, size, maximize\"", ",", "[", "\n", "(", "[", "(", "1.1", ",", "3", ")", ",", "(", "2.2", ",", "2", ")", ",", "(", "3.3", ",", "1", ")", "]", ",", "[", "(", "1.1", ",", "3", ")", ",", "(", "2.2", ",", "2", ")", ",", "(", "3.3", ",", "1", ")", "]", ",", "3", ",", "True", ")", ",", "\n", "(", "[", "(", "1.1", ",", "3", ")", ",", "(", "2.2", ",", "2", ")", ",", "(", "3.3", ",", "1", ")", "]", ",", "[", "(", "1.1", ",", "3", ")", "]", ",", "3", ",", "False", ")", ",", "\n", "(", "[", "(", "1.1", ",", "4", ")", ",", "(", "2.2", ",", "3", ")", ",", "(", "3.3", ",", "2", ")", ",", "(", "4.4", ",", "1", ")", "]", ",", "[", "(", "2.2", ",", "3", ")", ",", "(", "3.3", ",", "2", ")", ",", "(", "4.4", ",", "1", ")", "]", ",", "3", ",", "True", ")", ",", "\n", "(", "[", "(", "2.2", ",", "4", ")", ",", "(", "1.1", ",", "3", ")", ",", "(", "3.3", ",", "2", ")", ",", "(", "4.4", ",", "1", ")", "]", ",", "[", "(", "2.2", ",", "4", ")", ",", "(", "1.1", ",", "3", ")", "]", ",", "3", ",", "False", ")", ",", "\n", "(", "[", "(", "2.2", ",", "4", ")", ",", "(", "1.1", ",", "3", ")", ",", "(", "3.3", ",", "2", ")", ",", "(", "4.4", ",", "1", ")", "]", ",", "[", "(", "1.1", ",", "3", ")", "]", ",", "1", ",", "False", ")", ",", "\n", "(", "[", "(", "1.1", ",", "4", ")", ",", "(", "2.2", ",", "3", ")", ",", "(", "3.3", ",", "2", ")", ",", "(", "4.4", ",", "1", ")", "]", ",", "[", "(", "1.1", ",", "4", ")", ",", "(", "2.2", ",", "3", ")", ",", "(", "3.3", ",", "2", ")", ",", "(", "4.4", ",", "1", ")", "]", ",", "5", ",", "True", ")", "\n", "]", ")", "\n", "def", "test_strategy_last", "(", "test_points", ",", "expected_top_n", ",", "size", ",", "maximize", ")", ":", "\n", "    ", "result", "=", "average", ".", "strategy_last", "(", "test_points", ",", "size", ",", "maximize", ")", "\n", "assert", "result", "==", "expected_top_n", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_average.test_strategy_lifespan": [[50, 63], ["pytest.mark.parametrize", "sockeye.strategy_lifespan"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.strategy_lifespan"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"test_points, expected_top_n, size, maximize\"", ",", "[", "\n", "(", "[", "(", "1.1", ",", "3", ")", ",", "(", "2.2", ",", "2", ")", ",", "(", "3.3", ",", "1", ")", "]", ",", "[", "[", "0", ",", "3.3", ",", "1", "]", ",", "[", "0", ",", "2.2", ",", "2", "]", ",", "[", "0", ",", "1.1", ",", "3", "]", "]", ",", "3", ",", "True", ")", ",", "\n", "(", "[", "(", "1.1", ",", "4", ")", ",", "(", "2.2", ",", "3", ")", ",", "(", "3.3", ",", "2", ")", ",", "(", "4.4", ",", "1", ")", "]", ",", "[", "[", "0", ",", "4.4", ",", "1", "]", ",", "[", "0", ",", "3.3", ",", "2", "]", ",", "[", "0", ",", "2.2", ",", "3", "]", "]", ",", "3", ",", "True", ")", ",", "\n", "(", "[", "(", "3.3", ",", "3", ")", ",", "(", "2.2", ",", "2", ")", ",", "(", "1.1", ",", "1", ")", "]", ",", "[", "[", "2", ",", "3.3", ",", "3", "]", ",", "[", "0", ",", "2.2", ",", "2", "]", ",", "[", "0", ",", "1.1", ",", "1", "]", "]", ",", "3", ",", "True", ")", ",", "\n", "(", "[", "(", "3.3", ",", "3", ")", ",", "(", "2.2", ",", "2", ")", ",", "(", "1.1", ",", "1", ")", "]", ",", "[", "[", "0", ",", "1.1", ",", "1", "]", ",", "[", "0", ",", "2.2", ",", "2", "]", ",", "[", "0", ",", "3.3", ",", "3", "]", "]", ",", "3", ",", "False", ")", ",", "\n", "(", "[", "(", "2.2", ",", "4", ")", ",", "(", "1.1", ",", "3", ")", ",", "(", "3.3", ",", "2", ")", ",", "(", "4.4", ",", "1", ")", "]", ",", "[", "[", "1", ",", "2.2", ",", "4", "]", ",", "[", "0", ",", "4.4", ",", "1", "]", ",", "[", "0", ",", "3.3", ",", "2", "]", "]", ",", "3", ",", "True", ")", ",", "\n", "(", "[", "(", "2.2", ",", "4", ")", ",", "(", "1.1", ",", "3", ")", ",", "(", "3.3", ",", "2", ")", ",", "(", "4.4", ",", "1", ")", "]", ",", "[", "[", "2", ",", "1.1", ",", "3", "]", "]", ",", "1", ",", "False", ")", ",", "\n", "(", "[", "(", "1.1", ",", "4", ")", ",", "(", "2.2", ",", "3", ")", ",", "(", "3.3", ",", "2", ")", ",", "(", "4.4", ",", "1", ")", "]", ",", "[", "[", "3", ",", "1.1", ",", "4", "]", ",", "[", "0", ",", "2.2", ",", "3", "]", ",", "[", "0", ",", "3.3", ",", "2", "]", ",", "[", "0", ",", "4.4", ",", "1", "]", "]", ",", "5", ",", "False", ")", "\n", "]", ")", "\n", "def", "test_strategy_lifespan", "(", "test_points", ",", "expected_top_n", ",", "size", ",", "maximize", ")", ":", "\n", "    ", "result", "=", "average", ".", "strategy_lifespan", "(", "test_points", ",", "size", ",", "maximize", ")", "\n", "assert", "result", "==", "expected_top_n", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_average.test_average": [[65, 83], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "tempfile.TemporaryDirectory", "os.path.join", "os.path.join", "torch.save", "torch.save", "sockeye.average().items", "sockeye.average().items", "torch.allclose", "torch.allclose", "sockeye.average", "sockeye.average"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.average", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.average"], ["", "def", "test_average", "(", ")", ":", "\n", "    ", "params1", "=", "{", "'key1'", ":", "torch", ".", "tensor", "(", "[", "1.", ",", "1.", "]", ")", ",", "'key2'", ":", "torch", ".", "tensor", "(", "[", "[", "2.", ",", "2.", "]", ",", "[", "2.", ",", "2.", "]", "]", ")", "}", "\n", "params2", "=", "{", "'key1'", ":", "torch", ".", "tensor", "(", "[", "2.", ",", "2.", "]", ")", ",", "'key2'", ":", "torch", ".", "tensor", "(", "[", "[", "4.", ",", "4.", "]", ",", "[", "4.", ",", "4.", "]", "]", ")", "}", "\n", "params_average", "=", "{", "'key1'", ":", "torch", ".", "tensor", "(", "[", "1.5", ",", "1.5", "]", ")", ",", "'key2'", ":", "torch", ".", "tensor", "(", "[", "[", "3.", ",", "3.", "]", ",", "[", "3.", ",", "3.", "]", "]", ")", "}", "\n", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", "prefix", "=", "'test_average'", ")", "as", "work_dir", ":", "\n", "        ", "params1_fname", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "'params1'", ")", "\n", "params2_fname", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "'params2'", ")", "\n", "torch", ".", "save", "(", "params1", ",", "params1_fname", ")", "\n", "torch", ".", "save", "(", "params2", ",", "params2_fname", ")", "\n", "\n", "# \"Average\" one params file", "\n", "for", "k", ",", "v", "in", "average", ".", "average", "(", "[", "params1_fname", "]", ")", ".", "items", "(", ")", ":", "\n", "            ", "assert", "torch", ".", "allclose", "(", "v", ",", "params1", "[", "k", "]", ")", "\n", "\n", "# Average four params files (two instances each of two files)", "\n", "", "for", "k", ",", "v", "in", "average", ".", "average", "(", "[", "params1_fname", ",", "params1_fname", ",", "params2_fname", ",", "params2_fname", "]", ")", ".", "items", "(", ")", ":", "\n", "            ", "assert", "torch", ".", "allclose", "(", "v", ",", "params_average", "[", "k", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_rouge.test_rouge_1": [[30, 34], ["pytest.mark.parametrize", "sockeye_contrib.rouge.rouge_1"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_1"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"hypotheses, references, rouge1_score, rouge2_score, rougel_score\"", ",", "test_cases", ")", "\n", "def", "test_rouge_1", "(", "hypotheses", ",", "references", ",", "rouge1_score", ",", "rouge2_score", ",", "rougel_score", ")", ":", "\n", "    ", "rouge_score", "=", "rouge", ".", "rouge_1", "(", "hypotheses", ",", "references", ")", "\n", "assert", "rouge_score", "==", "rouge1_score", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_rouge.test_rouge_2": [[36, 40], ["pytest.mark.parametrize", "sockeye_contrib.rouge.rouge_2"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_2"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"hypotheses, references, rouge1_score, rouge2_score, rougel_score\"", ",", "test_cases", ")", "\n", "def", "test_rouge_2", "(", "hypotheses", ",", "references", ",", "rouge1_score", ",", "rouge2_score", ",", "rougel_score", ")", ":", "\n", "    ", "rouge_score", "=", "rouge", ".", "rouge_2", "(", "hypotheses", ",", "references", ")", "\n", "assert", "rouge_score", "==", "rouge2_score", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_rouge.test_rouge_l": [[42, 46], ["pytest.mark.parametrize", "sockeye_contrib.rouge.rouge_l"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_l"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"hypotheses, references, rouge1_score, rouge2_score, rougel_score\"", ",", "test_cases", ")", "\n", "def", "test_rouge_l", "(", "hypotheses", ",", "references", ",", "rouge1_score", ",", "rouge2_score", ",", "rougel_score", ")", ":", "\n", "    ", "rouge_score", "=", "rouge", ".", "rouge_l", "(", "hypotheses", ",", "references", ")", "\n", "assert", "rouge_score", "==", "rougel_score", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments.test_simple_dict": [[26, 31], ["sockeye.simple_dict", "arguments.simple_dict."], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.simple_dict"], ["def", "test_simple_dict", "(", ")", ":", "\n", "    ", "dict_str", "=", "'beta1:0.9,beta2:0.999,epsilon:1e-8,lazy_update:true'", "\n", "expected", "=", "{", "'beta1'", ":", "0.9", ",", "'beta2'", ":", "0.999", ",", "'epsilon'", ":", "1e-8", ",", "'lazy_update'", ":", "True", "}", "\n", "parse", "=", "arguments", ".", "simple_dict", "(", ")", "\n", "assert", "parse", "(", "dict_str", ")", "==", "expected", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments.test_io_args": [[34, 75], ["pytest.mark.parametrize", "test_arguments._test_args", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._test_args"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"test_params, expected_params\"", ",", "[", "\n", "# mandatory parameters", "\n", "(", "'--source test_src --target test_tgt --prepared-data prep_data '", "\n", "'--validation-source test_validation_src --validation-target test_validation_tgt '", "\n", "'--output test_output'", ",", "\n", "dict", "(", "source", "=", "'test_src'", ",", "target", "=", "'test_tgt'", ",", "\n", "source_factors", "=", "[", "]", ",", "\n", "source_factors_use_source_vocab", "=", "[", "]", ",", "\n", "target_factors", "=", "[", "]", ",", "\n", "target_factors_use_target_vocab", "=", "[", "]", ",", "\n", "prepared_data", "=", "'prep_data'", ",", "\n", "validation_source", "=", "'test_validation_src'", ",", "validation_target", "=", "'test_validation_tgt'", ",", "\n", "validation_source_factors", "=", "[", "]", ",", "\n", "validation_target_factors", "=", "[", "]", ",", "\n", "output", "=", "'test_output'", ",", "overwrite_output", "=", "False", ",", "\n", "source_vocab", "=", "None", ",", "target_vocab", "=", "None", ",", "source_factor_vocabs", "=", "[", "]", ",", "target_factor_vocabs", "=", "[", "]", ",", "\n", "shared_vocab", "=", "False", ",", "num_words", "=", "(", "0", ",", "0", ")", ",", "\n", "word_min_count", "=", "(", "1", ",", "1", ")", ",", "pad_vocab_to_multiple_of", "=", "8", ",", "\n", "no_bucketing", "=", "False", ",", "bucket_width", "=", "8", ",", "bucket_scaling", "=", "False", ",", "max_seq_len", "=", "(", "95", ",", "95", ")", ")", ")", ",", "\n", "\n", "# short parameters", "\n", "(", "'-s test_src -t test_tgt -d prep_data '", "\n", "'-vs test_validation_src -vt test_validation_tgt '", "\n", "'-o test_output'", ",", "\n", "dict", "(", "source", "=", "'test_src'", ",", "target", "=", "'test_tgt'", ",", "\n", "source_factors", "=", "[", "]", ",", "\n", "source_factors_use_source_vocab", "=", "[", "]", ",", "\n", "target_factors", "=", "[", "]", ",", "\n", "target_factors_use_target_vocab", "=", "[", "]", ",", "\n", "prepared_data", "=", "'prep_data'", ",", "\n", "validation_source", "=", "'test_validation_src'", ",", "validation_target", "=", "'test_validation_tgt'", ",", "\n", "validation_source_factors", "=", "[", "]", ",", "\n", "validation_target_factors", "=", "[", "]", ",", "\n", "output", "=", "'test_output'", ",", "overwrite_output", "=", "False", ",", "\n", "source_vocab", "=", "None", ",", "target_vocab", "=", "None", ",", "source_factor_vocabs", "=", "[", "]", ",", "target_factor_vocabs", "=", "[", "]", ",", "\n", "shared_vocab", "=", "False", ",", "num_words", "=", "(", "0", ",", "0", ")", ",", "\n", "word_min_count", "=", "(", "1", ",", "1", ")", ",", "pad_vocab_to_multiple_of", "=", "8", ",", "\n", "no_bucketing", "=", "False", ",", "bucket_width", "=", "8", ",", "bucket_scaling", "=", "False", ",", "max_seq_len", "=", "(", "95", ",", "95", ")", ")", ")", "\n", "]", ")", "\n", "def", "test_io_args", "(", "test_params", ",", "expected_params", ")", ":", "\n", "    ", "_test_args", "(", "test_params", ",", "expected_params", ",", "arguments", ".", "add_training_io_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments.test_logging_args": [[77, 86], ["pytest.mark.parametrize", "test_arguments._test_args", "dict"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._test_args"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"test_params, expected_params\"", ",", "[", "\n", "(", "''", ",", "dict", "(", "quiet", "=", "False", ",", "\n", "quiet_secondary_workers", "=", "False", ",", "\n", "loglevel", "=", "'INFO'", ",", "\n", "loglevel_secondary_workers", "=", "'INFO'", ",", "\n", "no_logfile", "=", "False", ")", ")", ",", "\n", "]", ")", "\n", "def", "test_logging_args", "(", "test_params", ",", "expected_params", ")", ":", "\n", "    ", "_test_args", "(", "test_params", ",", "expected_params", ",", "arguments", ".", "add_logging_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments.test_device_args": [[88, 99], ["pytest.mark.parametrize", "test_arguments._test_args", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._test_args"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"test_params, expected_params\"", ",", "[", "\n", "(", "''", ",", "dict", "(", "device_id", "=", "0", ",", "\n", "use_cpu", "=", "False", ",", "\n", "env", "=", "None", ")", ")", ",", "\n", "(", "'--device-id 1 --use-cpu '", ",", "\n", "dict", "(", "device_id", "=", "1", ",", "\n", "use_cpu", "=", "True", ",", "\n", "env", "=", "None", ")", ")", "\n", "]", ")", "\n", "def", "test_device_args", "(", "test_params", ",", "expected_params", ")", ":", "\n", "    ", "_test_args", "(", "test_params", ",", "expected_params", ",", "arguments", ".", "add_device_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments.test_model_parameters": [[101, 133], ["pytest.mark.parametrize", "test_arguments._test_args", "dict"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._test_args"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"test_params, expected_params\"", ",", "[", "\n", "(", "''", ",", "dict", "(", "params", "=", "None", ",", "\n", "allow_missing_params", "=", "False", ",", "\n", "ignore_extra_params", "=", "False", ",", "\n", "num_layers", "=", "(", "6", ",", "6", ")", ",", "\n", "num_embed", "=", "(", "None", ",", "None", ")", ",", "\n", "source_factors_num_embed", "=", "[", "]", ",", "\n", "source_factors_combine", "=", "[", "C", ".", "FACTORS_COMBINE_SUM", "]", ",", "\n", "source_factors_share_embedding", "=", "[", "False", "]", ",", "\n", "target_factors_num_embed", "=", "[", "]", ",", "\n", "target_factors_combine", "=", "[", "C", ".", "FACTORS_COMBINE_SUM", "]", ",", "\n", "target_factors_share_embedding", "=", "[", "False", "]", ",", "\n", "weight_tying_type", "=", "\"src_trg_softmax\"", ",", "\n", "transformer_attention_heads", "=", "(", "8", ",", "8", ")", ",", "\n", "transformer_feed_forward_num_hidden", "=", "(", "2048", ",", "2048", ")", ",", "\n", "transformer_feed_forward_use_glu", "=", "False", ",", "\n", "transformer_activation_type", "=", "(", "C", ".", "RELU", ",", "C", ".", "RELU", ")", ",", "\n", "transformer_model_size", "=", "(", "512", ",", "512", ")", ",", "\n", "transformer_positional_embedding_type", "=", "\"fixed\"", ",", "\n", "transformer_preprocess", "=", "(", "'n'", ",", "'n'", ")", ",", "\n", "transformer_postprocess", "=", "(", "'dr'", ",", "'dr'", ")", ",", "\n", "lhuc", "=", "None", ",", "\n", "encoder", "=", "C", ".", "TRANSFORMER_TYPE", ",", "\n", "decoder", "=", "C", ".", "TRANSFORMER_TYPE", ",", "\n", "dtype", "=", "'float32'", ",", "\n", "amp", "=", "False", ",", "\n", "apex_amp", "=", "False", ",", "\n", "neural_vocab_selection", "=", "None", ",", "\n", "neural_vocab_selection_block_loss", "=", "False", ")", ")", "\n", "]", ")", "\n", "def", "test_model_parameters", "(", "test_params", ",", "expected_params", ")", ":", "\n", "    ", "_test_args", "(", "test_params", ",", "expected_params", ",", "arguments", ".", "add_model_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments.test_inference_args": [[135, 171], ["pytest.mark.parametrize", "test_arguments._test_args", "dict"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._test_args"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"test_params, expected_params\"", ",", "[", "\n", "(", "'-m model'", ",", "dict", "(", "input", "=", "None", ",", "\n", "input_factors", "=", "None", ",", "\n", "json_input", "=", "False", ",", "\n", "output", "=", "None", ",", "\n", "checkpoints", "=", "None", ",", "\n", "models", "=", "[", "'model'", "]", ",", "\n", "greedy", "=", "False", ",", "\n", "beam_size", "=", "5", ",", "\n", "nbest_size", "=", "1", ",", "\n", "batch_size", "=", "1", ",", "\n", "chunk_size", "=", "None", ",", "\n", "ensemble_mode", "=", "'linear'", ",", "\n", "bucket_width", "=", "10", ",", "\n", "max_input_length", "=", "None", ",", "\n", "restrict_lexicon", "=", "None", ",", "\n", "restrict_lexicon_topk", "=", "None", ",", "\n", "output_type", "=", "'translation'", ",", "\n", "max_output_length_num_stds", "=", "2", ",", "\n", "max_output_length", "=", "None", ",", "\n", "beam_search_stop", "=", "'all'", ",", "\n", "length_penalty_alpha", "=", "1.0", ",", "\n", "length_penalty_beta", "=", "0.0", ",", "\n", "brevity_penalty_constant_length_ratio", "=", "0.0", ",", "\n", "brevity_penalty_weight", "=", "1.0", ",", "\n", "brevity_penalty_type", "=", "'none'", ",", "\n", "strip_unknown_words", "=", "False", ",", "\n", "dtype", "=", "None", ",", "\n", "prevent_unk", "=", "False", ",", "\n", "sample", "=", "None", ",", "\n", "seed", "=", "None", ",", "\n", "nvs_thresh", "=", "0.5", ",", "\n", "skip_nvs", "=", "False", ")", ")", ",", "\n", "]", ")", "\n", "def", "test_inference_args", "(", "test_params", ",", "expected_params", ")", ":", "\n", "    ", "_test_args", "(", "test_params", ",", "expected_params", ",", "arguments", ".", "add_inference_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments.test_training_arg": [[173, 231], ["pytest.mark.parametrize", "test_arguments._test_args", "dict"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._test_args"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"test_params, expected_params\"", ",", "[", "\n", "(", "''", ",", "dict", "(", "batch_size", "=", "4096", ",", "\n", "batch_type", "=", "'word'", ",", "\n", "batch_sentences_multiple_of", "=", "8", ",", "\n", "label_smoothing", "=", "0.1", ",", "\n", "label_smoothing_impl", "=", "'mxnet'", ",", "\n", "length_task", "=", "None", ",", "\n", "length_task_layers", "=", "1", ",", "\n", "length_task_weight", "=", "1.0", ",", "\n", "target_factors_weight", "=", "[", "1.0", "]", ",", "\n", "optimized_metric", "=", "C", ".", "PERPLEXITY", ",", "\n", "checkpoint_interval", "=", "4000", ",", "\n", "max_num_checkpoint_not_improved", "=", "None", ",", "\n", "checkpoint_improvement_threshold", "=", "0.", ",", "\n", "max_checkpoints", "=", "None", ",", "\n", "embed_dropout", "=", "(", ".0", ",", ".0", ")", ",", "\n", "transformer_dropout_attention", "=", "(", "0.1", ",", "0.1", ")", ",", "\n", "transformer_dropout_act", "=", "(", "0.1", ",", "0.1", ")", ",", "\n", "transformer_dropout_prepost", "=", "(", "0.1", ",", "0.1", ")", ",", "\n", "optimizer", "=", "'adam'", ",", "\n", "optimizer_betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "optimizer_eps", "=", "1e-08", ",", "\n", "dist", "=", "False", ",", "\n", "min_samples", "=", "None", ",", "\n", "max_samples", "=", "None", ",", "\n", "min_updates", "=", "None", ",", "\n", "max_updates", "=", "None", ",", "\n", "max_seconds", "=", "None", ",", "\n", "update_interval", "=", "1", ",", "\n", "min_num_epochs", "=", "None", ",", "\n", "max_num_epochs", "=", "None", ",", "\n", "initial_learning_rate", "=", "0.0002", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "momentum", "=", "0.0", ",", "\n", "gradient_clipping_threshold", "=", "1.0", ",", "\n", "gradient_clipping_type", "=", "'none'", ",", "\n", "learning_rate_scheduler_type", "=", "'plateau-reduce'", ",", "\n", "learning_rate_t_scale", "=", "1.0", ",", "\n", "learning_rate_reduce_factor", "=", "0.9", ",", "\n", "learning_rate_reduce_num_not_improved", "=", "8", ",", "\n", "learning_rate_warmup", "=", "0", ",", "\n", "no_reload_on_learning_rate_reduce", "=", "False", ",", "\n", "fixed_param_names", "=", "[", "]", ",", "\n", "fixed_param_strategy", "=", "None", ",", "\n", "decode_and_evaluate", "=", "500", ",", "\n", "stop_training_on_decoder_failure", "=", "False", ",", "\n", "seed", "=", "1", ",", "\n", "keep_last_params", "=", "-", "1", ",", "\n", "keep_initializations", "=", "False", ",", "\n", "cache_last_best_params", "=", "0", ",", "\n", "cache_strategy", "=", "C", ".", "AVERAGE_BEST", ",", "\n", "cache_metric", "=", "C", ".", "PERPLEXITY", ",", "\n", "dry_run", "=", "False", ",", "\n", "bow_task_pos_weight", "=", "10", ",", "\n", "bow_task_weight", "=", "1.0", ")", ")", ",", "\n", "]", ")", "\n", "def", "test_training_arg", "(", "test_params", ",", "expected_params", ")", ":", "\n", "    ", "_test_args", "(", "test_params", ",", "expected_params", ",", "arguments", ".", "add_training_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments.test_tutorial_translate_args": [[233, 251], ["pytest.mark.parametrize", "test_arguments._test_args_subset", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._test_args_subset"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"test_params, expected_params, expected_params_present\"", ",", "[", "\n", "# seqcopy tutorial", "\n", "(", "'-m seqcopy_model '", "\n", "'--use-cpu'", ",", "\n", "dict", "(", "models", "=", "[", "\"seqcopy_model\"", "]", ",", "\n", "use_cpu", "=", "True", ")", ",", "\n", "[", "]", ")", ",", "\n", "# WMT tutorial", "\n", "(", "'-m wmt_model wmt_model_seed2 '", "\n", "'--use-cpu '", ",", "\n", "dict", "(", "models", "=", "[", "\"wmt_model\"", ",", "\"wmt_model_seed2\"", "]", ",", "\n", "use_cpu", "=", "True", ")", ",", "\n", "# Other parameters mentioned in the WMT tutorial", "\n", "[", "\"beam_size\"", ",", "\n", "\"length_penalty_alpha\"", "]", ")", ",", "\n", "]", ")", "\n", "def", "test_tutorial_translate_args", "(", "test_params", ",", "expected_params", ",", "expected_params_present", ")", ":", "\n", "    ", "_test_args_subset", "(", "test_params", ",", "expected_params", ",", "expected_params_present", ",", "arguments", ".", "add_translate_cli_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments.test_tutorial_averaging_args": [[253, 262], ["pytest.mark.parametrize", "test_arguments._test_args_subset", "dict"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._test_args_subset"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"test_params, expected_params, expected_params_present\"", ",", "[", "\n", "# WMT tutorial", "\n", "(", "'-o wmt_model_avg/param.best wmt_model'", ",", "\n", "dict", "(", "inputs", "=", "[", "\"wmt_model\"", "]", ",", "\n", "output", "=", "\"wmt_model_avg/param.best\"", ")", ",", "\n", "[", "]", ")", ",", "\n", "]", ")", "\n", "def", "test_tutorial_averaging_args", "(", "test_params", ",", "expected_params", ",", "expected_params_present", ")", ":", "\n", "    ", "_test_args_subset", "(", "test_params", ",", "expected_params", ",", "expected_params_present", ",", "arguments", ".", "add_average_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments.test_tutorial_prepare_data_cli_args": [[264, 297], ["pytest.mark.parametrize", "test_arguments._test_args", "dict"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._test_args"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"test_params, expected_params\"", ",", "[", "\n", "# WMT tutorial", "\n", "(", "'--source corpus.tc.BPE.de --target corpus.tc.BPE.en --output train_data '", ",", "\n", "dict", "(", "source", "=", "'corpus.tc.BPE.de'", ",", "target", "=", "'corpus.tc.BPE.en'", ",", "\n", "source_vocab", "=", "None", ",", "\n", "target_vocab", "=", "None", ",", "\n", "source_factors", "=", "[", "]", ",", "\n", "source_factors_use_source_vocab", "=", "[", "]", ",", "\n", "source_factor_vocabs", "=", "[", "]", ",", "\n", "target_factors", "=", "[", "]", ",", "\n", "target_factors_use_target_vocab", "=", "[", "]", ",", "\n", "target_factor_vocabs", "=", "[", "]", ",", "\n", "shared_vocab", "=", "False", ",", "\n", "num_words", "=", "(", "0", ",", "0", ")", ",", "\n", "word_min_count", "=", "(", "1", ",", "1", ")", ",", "\n", "pad_vocab_to_multiple_of", "=", "8", ",", "\n", "no_bucketing", "=", "False", ",", "\n", "bucket_width", "=", "8", ",", "\n", "bucket_scaling", "=", "False", ",", "\n", "max_seq_len", "=", "(", "95", ",", "95", ")", ",", "\n", "min_num_shards", "=", "1", ",", "\n", "num_samples_per_shard", "=", "10000000", ",", "\n", "seed", "=", "13", ",", "\n", "output", "=", "'train_data'", ",", "\n", "quiet", "=", "False", ",", "\n", "quiet_secondary_workers", "=", "False", ",", "\n", "loglevel", "=", "'INFO'", ",", "\n", "loglevel_secondary_workers", "=", "'INFO'", ",", "\n", "no_logfile", "=", "False", ",", "\n", "max_processes", "=", "1", ")", ")", "\n", "]", ")", "\n", "def", "test_tutorial_prepare_data_cli_args", "(", "test_params", ",", "expected_params", ")", ":", "\n", "    ", "_test_args", "(", "test_params", ",", "expected_params", ",", "arguments", ".", "add_prepare_data_cli_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments.test_prepare_data_cli_args": [[299, 331], ["pytest.mark.parametrize", "test_arguments._test_args", "dict"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._test_args"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"test_params, expected_params\"", ",", "[", "\n", "(", "'--source test_src --target test_tgt --output prepared_data '", ",", "\n", "dict", "(", "source", "=", "'test_src'", ",", "target", "=", "'test_tgt'", ",", "\n", "source_vocab", "=", "None", ",", "\n", "target_vocab", "=", "None", ",", "\n", "source_factors", "=", "[", "]", ",", "\n", "source_factors_use_source_vocab", "=", "[", "]", ",", "\n", "source_factor_vocabs", "=", "[", "]", ",", "\n", "target_factors", "=", "[", "]", ",", "\n", "target_factors_use_target_vocab", "=", "[", "]", ",", "\n", "target_factor_vocabs", "=", "[", "]", ",", "\n", "shared_vocab", "=", "False", ",", "\n", "num_words", "=", "(", "0", ",", "0", ")", ",", "\n", "word_min_count", "=", "(", "1", ",", "1", ")", ",", "\n", "pad_vocab_to_multiple_of", "=", "8", ",", "\n", "no_bucketing", "=", "False", ",", "\n", "bucket_width", "=", "8", ",", "\n", "bucket_scaling", "=", "False", ",", "\n", "max_seq_len", "=", "(", "95", ",", "95", ")", ",", "\n", "min_num_shards", "=", "1", ",", "\n", "num_samples_per_shard", "=", "10000000", ",", "\n", "seed", "=", "13", ",", "\n", "output", "=", "'prepared_data'", ",", "\n", "quiet", "=", "False", ",", "\n", "quiet_secondary_workers", "=", "False", ",", "\n", "loglevel", "=", "'INFO'", ",", "\n", "loglevel_secondary_workers", "=", "'INFO'", ",", "\n", "no_logfile", "=", "False", ",", "\n", "max_processes", "=", "1", ")", ")", "\n", "]", ")", "\n", "def", "test_prepare_data_cli_args", "(", "test_params", ",", "expected_params", ")", ":", "\n", "    ", "_test_args", "(", "test_params", ",", "expected_params", ",", "arguments", ".", "add_prepare_data_cli_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._create_argument_values_that_must_be_files_or_dirs": [[333, 358], ["params.split.split", "set", "test_arguments._create_argument_values_that_must_be_files_or_dirs.grouper"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.grouper"], ["", "def", "_create_argument_values_that_must_be_files_or_dirs", "(", "params", ")", ":", "\n", "    ", "\"\"\"\n    Loop over test_params and create temporary files for training/validation sources/targets.\n    \"\"\"", "\n", "\n", "def", "grouper", "(", "iterable", ",", "n", ",", "fillvalue", "=", "None", ")", ":", "\n", "        ", "\"Collect data into fixed-length chunks or blocks\"", "\n", "args", "=", "[", "iter", "(", "iterable", ")", "]", "*", "n", "\n", "return", "zip_longest", "(", "fillvalue", "=", "fillvalue", ",", "*", "args", ")", "\n", "\n", "", "params", "=", "params", ".", "split", "(", ")", "\n", "regular_files_params", "=", "{", "'-vs'", ",", "'-vt'", ",", "'-t'", ",", "'-s'", ",", "'--source'", ",", "'--target'", ",", "\n", "'--validation-source'", ",", "'--validation-target'", ",", "\n", "'--input'", ",", "'-i'", "}", "\n", "folder_params", "=", "{", "'--prepared-data'", ",", "'-d'", ",", "'--image-root'", ",", "'-ir'", ",", "\n", "'--validation-source-root'", ",", "'-vsr'", ",", "'--source-root'", ",", "'-sr'", "}", "\n", "to_unlink", "=", "set", "(", ")", "\n", "for", "arg", ",", "val", "in", "grouper", "(", "params", ",", "2", ")", ":", "\n", "        ", "if", "arg", "in", "regular_files_params", "and", "not", "os", ".", "path", ".", "isfile", "(", "val", ")", ":", "\n", "            ", "open", "(", "val", ",", "'w'", ")", ".", "close", "(", ")", "\n", "to_unlink", ".", "add", "(", "val", ")", "\n", "", "if", "arg", "in", "folder_params", ":", "\n", "            ", "os", ".", "mkdir", "(", "val", ")", "\n", "to_unlink", ".", "add", "(", "val", ")", "\n", "", "", "return", "to_unlink", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._delete_argument_values_that_must_be_files_or_dirs": [[360, 369], ["os.path.isfile", "os.unlink", "os.rmdir"], "function", ["None"], ["", "def", "_delete_argument_values_that_must_be_files_or_dirs", "(", "to_unlink", ")", ":", "\n", "    ", "\"\"\"\n    Close and delete previously created files or directories.\n    \"\"\"", "\n", "for", "name", "in", "to_unlink", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "name", ")", ":", "\n", "            ", "os", ".", "unlink", "(", "name", ")", "\n", "", "else", ":", "\n", "            ", "os", ".", "rmdir", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._test_args": [[371, 380], ["argparse.ArgumentParser", "test_arguments._create_argument_values_that_must_be_files_or_dirs", "argparse.ArgumentParser.parse_args", "test_arguments._delete_argument_values_that_must_be_files_or_dirs", "dict", "test_params.split", "vars", "sockeye.arguments.add_training_io_args", "sockeye.arguments.add_logging_args", "sockeye.arguments.add_device_args", "sockeye.arguments.add_model_parameters", "sockeye.arguments.add_inference_args", "sockeye.arguments.add_training_args", "sockeye.arguments.add_prepare_data_cli_args", "sockeye.arguments.add_prepare_data_cli_args"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._create_argument_values_that_must_be_files_or_dirs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._delete_argument_values_that_must_be_files_or_dirs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_training_io_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_logging_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_device_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_model_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_inference_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_training_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_prepare_data_cli_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_prepare_data_cli_args"], ["", "", "", "def", "_test_args", "(", "test_params", ",", "expected_params", ",", "args_func", ")", ":", "\n", "    ", "test_parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "args_func", "(", "test_parser", ")", "\n", "created", "=", "_create_argument_values_that_must_be_files_or_dirs", "(", "test_params", ")", "\n", "try", ":", "\n", "        ", "parsed_params", "=", "test_parser", ".", "parse_args", "(", "test_params", ".", "split", "(", ")", ")", "\n", "", "finally", ":", "\n", "        ", "_delete_argument_values_that_must_be_files_or_dirs", "(", "created", ")", "\n", "", "assert", "dict", "(", "vars", "(", "parsed_params", ")", ")", "==", "expected_params", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._test_args_subset": [[382, 400], ["argparse.ArgumentParser", "test_arguments._create_argument_values_that_must_be_files_or_dirs", "dict", "test_arguments._delete_argument_values_that_must_be_files_or_dirs", "vars", "argparse.ArgumentParser.parse_args", "dict.items", "test_params.split", "sockeye.arguments.add_translate_cli_args", "sockeye.arguments.add_average_args"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._create_argument_values_that_must_be_files_or_dirs", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments._delete_argument_values_that_must_be_files_or_dirs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_translate_cli_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_average_args"], ["", "def", "_test_args_subset", "(", "test_params", ",", "expected_params", ",", "expected_params_present", ",", "args_func", ")", ":", "\n", "    ", "\"\"\"\n    Only checks the subset of the parameters given in `expected_params`.\n\n    :param test_params: A string of test parameters.\n    :param expected_params: A dict of parameters to test for the exact value.\n    :param expected_params_present: A dict of parameters to test for presence.\n    :param args_func: The function correctly setting up the parameters for ArgumentParser.\n    \"\"\"", "\n", "test_parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "args_func", "(", "test_parser", ")", "\n", "created", "=", "_create_argument_values_that_must_be_files_or_dirs", "(", "test_params", ")", "\n", "parsed_params", "=", "dict", "(", "vars", "(", "test_parser", ".", "parse_args", "(", "test_params", ".", "split", "(", ")", ")", ")", ")", "\n", "_delete_argument_values_that_must_be_files_or_dirs", "(", "created", ")", "\n", "parsed_params_subset", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "parsed_params", ".", "items", "(", ")", "if", "k", "in", "expected_params", "}", "\n", "assert", "parsed_params_subset", "==", "expected_params", "\n", "for", "expected_param_present", "in", "expected_params_present", ":", "\n", "        ", "assert", "expected_param_present", "in", "parsed_params", ",", "\"Expected param %s to be present.\"", "%", "expected_param_present", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments.test_config_file": [[403, 435], ["pytest.mark.parametrize", "sockeye.ConfigArgumentParser", "arguments.ConfigArgumentParser.add_argument", "arguments.ConfigArgumentParser.add_argument", "arguments.ConfigArgumentParser.add_argument", "arguments.ConfigArgumentParser.add_argument", "arguments.ConfigArgumentParser.add_argument", "tempfile.NamedTemporaryFile", "sockeye.save_args", "fp.flush", "vars", "vars", "argparse.Namespace", "arguments.ConfigArgumentParser.parse_args", "arguments.ConfigArgumentParser.parse_args", "dict", "dict", "dict", "dict", "dict", "plain_command_line.split"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.save_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"plain_command_line, config_command_line, config_contents\"", ",", "[", "\n", "(", "\"-a 1 -b 2 -C 3 -D 4 -e 5\"", ",", "\"\"", ",", "dict", "(", "a", "=", "1", ",", "b", "=", "2", ",", "C", "=", "3", ",", "D", "=", "4", ",", "e", "=", "5", ")", ")", ",", "\n", "(", "\"-a 1 -b 2 -C 3 -D 4 -e 5\"", ",", "\"-a 1 -b 2 -e 5\"", ",", "dict", "(", "C", "=", "3", ",", "D", "=", "4", ")", ")", ",", "\n", "(", "\"-C 3 -D 4\"", ",", "\"-C 3 -D 4\"", ",", "{", "}", ")", ",", "\n", "(", "\"-C 3 -D 4\"", ",", "\"-C 3\"", ",", "dict", "(", "D", "=", "4", ")", ")", ",", "\n", "(", "\"-a 1 -C 3 -D 4\"", ",", "\"\"", ",", "dict", "(", "a", "=", "1", ",", "C", "=", "3", ",", "D", "=", "4", ")", ")", ",", "\n", "(", "\"-a 1 -b 2 -C 3 -D 4 -e 5\"", ",", "\"-a 1 -b 2 -C 3\"", ",", "dict", "(", "a", "=", "10", ",", "b", "=", "20", ",", "C", "=", "30", ",", "D", "=", "4", ",", "e", "=", "5", ")", ")", "\n", "]", ")", "\n", "def", "test_config_file", "(", "plain_command_line", ",", "config_command_line", ",", "config_contents", ")", ":", "\n", "    ", "config_file_argparse", "=", "arguments", ".", "ConfigArgumentParser", "(", ")", "\n", "# Capital letter arguments are required", "\n", "config_file_argparse", ".", "add_argument", "(", "\"-a\"", ",", "type", "=", "int", ")", "\n", "config_file_argparse", ".", "add_argument", "(", "\"-b\"", ",", "type", "=", "int", ")", "\n", "config_file_argparse", ".", "add_argument", "(", "\"-C\"", ",", "type", "=", "int", ",", "required", "=", "True", ")", "\n", "config_file_argparse", ".", "add_argument", "(", "\"-D\"", ",", "type", "=", "int", ",", "required", "=", "True", ")", "\n", "config_file_argparse", ".", "add_argument", "(", "\"-e\"", ",", "type", "=", "int", ")", "\n", "\n", "# The option '--config <file>' will be added automaticall to config_command_line", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "arguments", ".", "save_args", "(", "argparse", ".", "Namespace", "(", "**", "config_contents", ")", ",", "fp", ".", "name", ")", "\n", "fp", ".", "flush", "(", ")", "\n", "\n", "# Parse args and cast to dicts directly", "\n", "args_command_line", "=", "vars", "(", "config_file_argparse", ".", "parse_args", "(", "args", "=", "plain_command_line", ".", "split", "(", ")", ")", ")", "\n", "args_config", "=", "vars", "(", "config_file_argparse", ".", "parse_args", "(", "\n", "args", "=", "(", "config_command_line", "+", "(", "\" --config %s\"", "%", "fp", ".", "name", ")", ")", ".", "split", "(", ")", ")", ")", "\n", "\n", "# Remove the config entry", "\n", "del", "args_command_line", "[", "\"config\"", "]", "\n", "del", "args_config", "[", "\"config\"", "]", "\n", "\n", "assert", "args_command_line", "==", "args_config", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments.test_config_file_required": [[438, 460], ["pytest.mark.parametrize", "sockeye.ConfigArgumentParser", "arguments.ConfigArgumentParser.add_argument", "arguments.ConfigArgumentParser.add_argument", "arguments.ConfigArgumentParser.add_argument", "arguments.ConfigArgumentParser.add_argument", "arguments.ConfigArgumentParser.add_argument", "pytest.raises", "tempfile.NamedTemporaryFile", "sockeye.save_args", "fp.flush", "arguments.ConfigArgumentParser.parse_args", "dict", "dict", "argparse.Namespace"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.save_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"config_command_line, config_contents\"", ",", "[", "\n", "(", "\"\"", ",", "dict", "(", "a", "=", "1", ",", "b", "=", "2", ",", "C", "=", "3", ",", "e", "=", "5", ")", ")", ",", "\n", "(", "\"-C 3\"", ",", "dict", "(", "a", "=", "1", ")", ")", "\n", "]", ")", "\n", "def", "test_config_file_required", "(", "config_command_line", ",", "config_contents", ")", ":", "\n", "    ", "config_file_argparse", "=", "arguments", ".", "ConfigArgumentParser", "(", ")", "\n", "# Capital letter arguments are required", "\n", "config_file_argparse", ".", "add_argument", "(", "\"-a\"", ",", "type", "=", "int", ")", "\n", "config_file_argparse", ".", "add_argument", "(", "\"-b\"", ",", "type", "=", "int", ")", "\n", "config_file_argparse", ".", "add_argument", "(", "\"-C\"", ",", "type", "=", "int", ",", "required", "=", "True", ")", "\n", "config_file_argparse", ".", "add_argument", "(", "\"-D\"", ",", "type", "=", "int", ",", "required", "=", "True", ")", "\n", "config_file_argparse", ".", "add_argument", "(", "\"-e\"", ",", "type", "=", "int", ")", "\n", "\n", "# The option '--config <file>' will be added automaticall to config_command_line", "\n", "with", "pytest", ".", "raises", "(", "SystemExit", ")", ":", "# argparse does not have finer regularity exceptions", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "arguments", ".", "save_args", "(", "argparse", ".", "Namespace", "(", "**", "config_contents", ")", ",", "fp", ".", "name", ")", "\n", "fp", ".", "flush", "(", ")", "\n", "\n", "# Parse args and cast to dicts directly", "\n", "config_file_argparse", ".", "parse_args", "(", "\n", "args", "=", "(", "config_command_line", "+", "(", "\" --config %s\"", "%", "fp", ".", "name", ")", ")", ".", "split", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_arguments.test_arguments_allowed_to_differ": [[461, 464], ["re.match"], "function", ["None"], ["", "", "", "def", "test_arguments_allowed_to_differ", "(", ")", ":", "\n", "    ", "for", "arg", "in", "C", ".", "ARGS_MAY_DIFFER", ":", "\n", "        ", "assert", "re", ".", "match", "(", "r'^[a-zA-Z0-9_]*$'", ",", "arg", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search._TestInference.__init__": [[244, 247], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_vocab_size", ":", "int", ")", ":", "\n", "        ", "self", ".", "output_vocab_size", "=", "output_vocab_size", "\n", "self", ".", "states", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search._TestInference.state_structure": [[248, 250], ["None"], "methods", ["None"], ["", "def", "state_structure", "(", "self", ")", ":", "\n", "        ", "return", "C", ".", "STEP_STATE", "+", "C", ".", "STEP_STATE", "# is this the correct structure to use for self.states?", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search._TestInference.encode_and_initialize": [[251, 262], ["torch.zeros", "torch.zeros", "torch.ones"], "methods", ["None"], ["", "def", "encode_and_initialize", "(", "self", ",", "\n", "inputs", ":", "pt", ".", "Tensor", ",", "\n", "valid_length", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "# 'lengths'", "\n", "internal_lengths", "=", "pt", ".", "zeros", "(", "batch_size", ",", "1", ",", "dtype", "=", "pt", ".", "int", ")", "\n", "num_decode_step_calls", "=", "pt", ".", "zeros", "(", "1", ",", "dtype", "=", "pt", ".", "int", ")", "\n", "self", ".", "states", "=", "[", "internal_lengths", ",", "num_decode_step_calls", "]", "# TODO add nested states", "\n", "predicted_output_length", "=", "pt", ".", "ones", "(", "batch_size", ",", "1", ")", "# does that work?", "\n", "nvs_prediction", "=", "None", "\n", "return", "self", ".", "states", ",", "predicted_output_length", ",", "nvs_prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search._TestInference.decode_step": [[263, 293], ["step_input.size", "print", "num_decode_step_calls.item.item.item", "step_input[].item", "torch.tensor", "torch.tensor", "step_input[].item", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "decode_step", "(", "self", ",", "\n", "step_input", ":", "pt", ".", "Tensor", ",", "\n", "states", ":", "List", ",", "\n", "vocab_slice_ids", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "*", "args", ")", ":", "\n", "        ", "batch_beam_size", ",", "num_target_factors", "=", "step_input", ".", "size", "(", ")", "\n", "print", "(", "'step_input'", ",", "step_input", ")", "\n", "\n", "internal_lengths", ",", "num_decode_step_calls", "=", "states", "\n", "num_decode_step_calls", "=", "num_decode_step_calls", ".", "item", "(", ")", "\n", "if", "num_decode_step_calls", "==", "0", ":", "# first call to decode_step, we expect step input to be all <bos>", "\n", "            ", "assert", "(", "step_input", "==", "C", ".", "BOS_ID", ")", ".", "all", "(", ")", "\n", "\n", "", "if", "step_input", "[", ":", ",", "0", "]", ".", "item", "(", ")", "==", "C", ".", "BOS_ID", ":", "\n", "# predict word id 4 given <bos>", "\n", "            ", "scores", "=", "pt", ".", "tensor", "(", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "", "elif", "step_input", "[", ":", ",", "0", "]", ".", "item", "(", ")", "==", "C", ".", "EOS_ID", ":", "\n", "# predict pad given <eos>", "\n", "            ", "scores", "=", "pt", ".", "tensor", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "# otherwise always predict pad", "\n", "            ", "scores", "=", "pt", ".", "tensor", "(", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "\n", "# topk is minimizing", "\n", "", "scores", "*=", "-", "1", "\n", "\n", "internal_lengths", "+=", "1", "\n", "num_decode_step_calls", "+=", "1", "\n", "\n", "self", ".", "states", "=", "states", "=", "[", "internal_lengths", ",", "pt", ".", "tensor", "(", "[", "num_decode_step_calls", "]", ",", "dtype", "=", "pt", ".", "int", ")", "]", "\n", "return", "scores", ",", "states", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search._TestInference.model_output_vocab_size": [[294, 297], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_output_vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "output_vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search._TestInference.model_output_factor_vocab_size": [[298, 301], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_output_factor_vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.test_length_penalty_default": [[28, 33], ["torch.tensor", "sockeye.beam_search.LengthPenalty", "sockeye.beam_search.LengthPenalty", "sockeye.beam_search.LengthPenalty", "sockeye.beam_search.LengthPenalty", "torch.tensor", "torch.testing.assert_allclose", "sockeye.beam_search.LengthPenalty."], "function", ["None"], ["def", "test_length_penalty_default", "(", ")", ":", "\n", "    ", "lengths", "=", "pt", ".", "tensor", "(", "[", "[", "1", "]", ",", "[", "2", "]", ",", "[", "3", "]", "]", ")", "\n", "length_penalty", "=", "sockeye", ".", "beam_search", ".", "LengthPenalty", "(", "1.0", ",", "0.0", ")", "\n", "expected_lp", "=", "pt", ".", "tensor", "(", "[", "[", "1.0", "]", ",", "[", "2.", "]", ",", "[", "3.", "]", "]", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "length_penalty", "(", "lengths", ")", ",", "expected_lp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.test_length_penalty": [[35, 40], ["torch.tensor", "sockeye.beam_search.LengthPenalty", "sockeye.beam_search.LengthPenalty", "sockeye.beam_search.LengthPenalty", "sockeye.beam_search.LengthPenalty", "torch.tensor", "torch.testing.assert_allclose", "sockeye.beam_search.LengthPenalty."], "function", ["None"], ["", "def", "test_length_penalty", "(", ")", ":", "\n", "    ", "lengths", "=", "pt", ".", "tensor", "(", "[", "[", "1", "]", ",", "[", "2", "]", ",", "[", "3", "]", "]", ")", "\n", "length_penalty", "=", "sockeye", ".", "beam_search", ".", "LengthPenalty", "(", ".2", ",", "5.0", ")", "\n", "expected_lp", "=", "pt", ".", "tensor", "(", "[", "[", "6", "**", "0.2", "/", "6", "**", "0.2", "]", ",", "[", "7", "**", "0.2", "/", "6", "**", "0.2", "]", ",", "[", "8", "**", "0.2", "/", "6", "**", "0.2", "]", "]", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "length_penalty", "(", "lengths", ")", ",", "expected_lp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.test_length_penalty_int_input": [[42, 47], ["sockeye.beam_search.LengthPenalty", "sockeye.beam_search.LengthPenalty", "sockeye.beam_search.LengthPenalty", "sockeye.beam_search.LengthPenalty", "numpy.isclose", "sockeye.beam_search.LengthPenalty."], "function", ["None"], ["", "def", "test_length_penalty_int_input", "(", ")", ":", "\n", "    ", "length", "=", "1", "\n", "length_penalty", "=", "sockeye", ".", "beam_search", ".", "LengthPenalty", "(", ".2", ",", "5.0", ")", "\n", "expected_lp", "=", "[", "6", "**", "0.2", "/", "6", "**", "0.2", "]", "\n", "assert", "onp", ".", "isclose", "(", "length_penalty", "(", "length", ")", ",", "expected_lp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.test_brevity_penalty_default": [[49, 55], ["torch.tensor", "torch.tensor", "sockeye.beam_search.BrevityPenalty", "sockeye.beam_search.BrevityPenalty", "sockeye.beam_search.BrevityPenalty", "sockeye.beam_search.BrevityPenalty", "torch.tensor", "torch.testing.assert_allclose", "sockeye.beam_search.BrevityPenalty."], "function", ["None"], ["", "def", "test_brevity_penalty_default", "(", ")", ":", "\n", "    ", "hyp_lengths", "=", "pt", ".", "tensor", "(", "[", "[", "1", "]", ",", "[", "2", "]", ",", "[", "3", "]", "]", ")", "\n", "ref_lengths", "=", "pt", ".", "tensor", "(", "[", "[", "2", "]", ",", "[", "3", "]", ",", "[", "2", "]", "]", ")", "\n", "brevity_penalty", "=", "sockeye", ".", "beam_search", ".", "BrevityPenalty", "(", "0.0", ")", "\n", "expected_bp", "=", "pt", ".", "tensor", "(", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "0", "]", "]", ",", "dtype", "=", "pt", ".", "long", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "brevity_penalty", "(", "hyp_lengths", ",", "ref_lengths", ")", ",", "expected_bp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.test_brevity_penalty": [[57, 63], ["torch.tensor", "torch.tensor", "sockeye.beam_search.BrevityPenalty", "sockeye.beam_search.BrevityPenalty", "sockeye.beam_search.BrevityPenalty", "sockeye.beam_search.BrevityPenalty", "torch.tensor", "torch.testing.assert_allclose", "sockeye.beam_search.BrevityPenalty."], "function", ["None"], ["", "def", "test_brevity_penalty", "(", ")", ":", "\n", "    ", "hyp_lengths", "=", "pt", ".", "tensor", "(", "[", "[", "1", "]", ",", "[", "2", "]", ",", "[", "3", "]", "]", ")", "\n", "ref_lengths", "=", "pt", ".", "tensor", "(", "[", "[", "7", "]", ",", "[", "2", "]", ",", "[", "91", "]", "]", ")", "\n", "brevity_penalty", "=", "sockeye", ".", "beam_search", ".", "BrevityPenalty", "(", "3.5", ")", "\n", "expected_bp", "=", "pt", ".", "tensor", "(", "[", "[", "3.5", "*", "(", "1", "-", "7", "/", "1", ")", "]", ",", "[", "0.0", "]", ",", "[", "3.5", "*", "(", "1", "-", "91", "/", "3", ")", "]", "]", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "brevity_penalty", "(", "hyp_lengths", ",", "ref_lengths", ")", ",", "expected_bp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.test_brevity_penalty_int_input": [[65, 72], ["sockeye.beam_search.BrevityPenalty", "sockeye.beam_search.BrevityPenalty", "sockeye.beam_search.BrevityPenalty", "sockeye.beam_search.BrevityPenalty", "numpy.isclose", "sockeye.beam_search.BrevityPenalty."], "function", ["None"], ["", "def", "test_brevity_penalty_int_input", "(", ")", ":", "\n", "    ", "hyp_length", "=", "3", "\n", "ref_length", "=", "5", "\n", "brevity_penalty", "=", "sockeye", ".", "beam_search", ".", "BrevityPenalty", "(", "2.0", ")", "\n", "expected_bp", "=", "[", "2.0", "*", "(", "1", "-", "5", "/", "3", ")", "]", "\n", "\n", "assert", "onp", ".", "isclose", "(", "brevity_penalty", "(", "hyp_length", ",", "ref_length", ")", ",", "expected_bp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.test_candidate_scorer": [[74, 95], ["sockeye.beam_search.CandidateScorer", "sockeye.beam_search.CandidateScorer", "sockeye.beam_search.CandidateScorer", "sockeye.beam_search.CandidateScorer", "torch.rand().unsqueeze", "torch.tensor", "torch.tensor", "sockeye.beam_search.CandidateScorer.", "sockeye.beam_search.CandidateScorer.unnormalize", "torch.testing.assert_allclose", "sockeye.beam_search.CandidateScorer.", "sockeye.beam_search.CandidateScorer.unnormalize", "numpy.allclose", "torch.rand"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.CandidateScorer.unnormalize", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.CandidateScorer.unnormalize"], ["", "def", "test_candidate_scorer", "(", ")", ":", "\n", "    ", "scorer", "=", "sockeye", ".", "beam_search", ".", "CandidateScorer", "(", "length_penalty_alpha", "=", "1.0", ",", "\n", "length_penalty_beta", "=", "0.0", ",", "\n", "brevity_penalty_weight", "=", "0.1", ")", "\n", "\n", "raw_scores", "=", "pt", ".", "rand", "(", "5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "lengths", "=", "pt", ".", "tensor", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "reference_lengths", "=", "pt", ".", "tensor", "(", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ")", "\n", "\n", "scores", "=", "scorer", "(", "raw_scores", ",", "lengths", ",", "reference_lengths", ")", "\n", "unnormalized_scores", "=", "scorer", ".", "unnormalize", "(", "scores", ",", "lengths", ",", "reference_lengths", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "unnormalized_scores", ",", "raw_scores", ")", "\n", "\n", "# int/float input", "\n", "raw_scores", "=", "5.6", "\n", "lengths", "=", "3", "\n", "reference_lengths", "=", "4", "\n", "\n", "scores", "=", "scorer", "(", "raw_scores", ",", "lengths", ",", "reference_lengths", ")", "\n", "unnormalized_scores", "=", "scorer", ".", "unnormalize", "(", "scores", ",", "lengths", ",", "reference_lengths", ")", "\n", "assert", "onp", ".", "allclose", "(", "unnormalized_scores", ",", "raw_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.numpy_topk": [[97, 127], ["scores.reshape", "numpy.array", "numpy.array", "values.reshape.reshape", "numpy.argpartition", "numpy.unravel_index", "range", "numpy.ravel", "numpy.arange"], "function", ["None"], ["", "def", "numpy_topk", "(", "scores", ":", "onp", ".", "ndarray", ",", "\n", "k", ":", "int", ",", "\n", "offset", ":", "onp", ".", "ndarray", ")", "->", "Tuple", "[", "onp", ".", "ndarray", ",", "onp", ".", "ndarray", ",", "onp", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"\n    Get the lowest k elements per sentence from a `scores` matrix using an intermediary Numpy conversion.\n    This should be equivalent to sockeye.utils.topk() and is used as a comparative implementation in testing.\n\n    :param scores: Vocabulary scores for the next beam step. (batch_size * beam_size, target_vocabulary_size)\n    :param k: The number of smallest scores to return.\n    :param offset: Array to add to the hypothesis indices for offsetting in batch decoding.\n    :return: The row indices, column indices and values of the k smallest items in matrix.\n    \"\"\"", "\n", "# (batch_size, beam_size * target_vocab_size)", "\n", "folded_scores", "=", "scores", ".", "reshape", "(", "(", "-", "1", ",", "k", "*", "scores", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "batch_size", "=", "folded_scores", ".", "shape", "[", "0", "]", "\n", "\n", "# Get the scores", "\n", "# Indexes into folded_scores: (batch_size, beam_size)", "\n", "flat_idxs", "=", "onp", ".", "argpartition", "(", "folded_scores", ",", "range", "(", "k", ")", ")", "[", ":", ",", ":", "k", "]", "\n", "# Score values: (batch_size, beam_size)", "\n", "values", "=", "onp", ".", "array", "(", "folded_scores", "[", "onp", ".", "arange", "(", "folded_scores", ".", "shape", "[", "0", "]", ")", "[", ":", ",", "None", "]", ",", "flat_idxs", "]", ")", "\n", "best_hyp_indices", ",", "best_word_indices", "=", "onp", ".", "array", "(", "onp", ".", "unravel_index", "(", "onp", ".", "ravel", "(", "flat_idxs", ")", ",", "scores", ".", "shape", ")", ",", "\n", "dtype", "=", "'int32'", ")", "\n", "\n", "if", "batch_size", ">", "1", ":", "\n", "# Offsetting the indices to match the shape of the scores matrix", "\n", "        ", "best_hyp_indices", "+=", "offset", "\n", "\n", "", "values", "=", "values", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "return", "best_hyp_indices", ",", "best_word_indices", ",", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.test_topk_func": [[129, 151], ["pytest.mark.parametrize", "numpy.random.uniform", "numpy.repeat", "test_beam_search.numpy_topk", "sockeye.beam_search.TopK", "sockeye.beam_search.TopK", "sockeye.beam_search.TopK", "sockeye.beam_search.TopK", "sockeye.beam_search.TopK.", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.arange", "torch.tensor", "torch.tensor", "pt_hyp.detach().numpy", "pt_word.detach().numpy", "pt_values.detach().numpy", "pt_hyp.detach", "pt_word.detach", "pt_values.detach"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.numpy_topk"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"batch_size, beam_size, target_vocab_size\"", ",", "\n", "[", "(", "1", ",", "5", ",", "200", ")", ",", "\n", "(", "5", ",", "5", ",", "200", ")", ",", "\n", "(", "1", ",", "1", ",", "200", ")", ",", "\n", "(", "5", ",", "1", ",", "200", ")", ",", "\n", "(", "10", ",", "10", ",", "100", ")", "]", ")", "\n", "def", "test_topk_func", "(", "batch_size", ",", "beam_size", ",", "target_vocab_size", ")", ":", "\n", "# Random model scores. Shape: (batch_size * beam_size, target_vocab_size)", "\n", "    ", "scores", "=", "onp", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "batch_size", "*", "beam_size", ",", "target_vocab_size", ")", ")", "\n", "# offset for batch sizes > 1", "\n", "offset", "=", "onp", ".", "repeat", "(", "onp", ".", "arange", "(", "0", ",", "batch_size", "*", "beam_size", ",", "beam_size", ",", "dtype", "=", "'int32'", ")", ",", "beam_size", ")", "\n", "\n", "np_hyp", ",", "np_word", ",", "np_values", "=", "numpy_topk", "(", "scores", ",", "k", "=", "beam_size", ",", "offset", "=", "offset", ")", "\n", "\n", "topk", "=", "sockeye", ".", "beam_search", ".", "TopK", "(", "k", "=", "beam_size", ")", "\n", "pt_hyp", ",", "pt_word", ",", "pt_values", "=", "topk", "(", "pt", ".", "tensor", "(", "scores", ")", ")", "\n", "if", "batch_size", ">", "1", ":", "\n", "# Offsetting the indices to match the shape of the scores matrix", "\n", "        ", "pt_hyp", "+=", "pt", ".", "tensor", "(", "offset", ")", "\n", "", "assert", "onp", ".", "allclose", "(", "pt_hyp", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "np_hyp", ")", "\n", "assert", "onp", ".", "allclose", "(", "pt_word", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "np_word", ")", "\n", "assert", "onp", ".", "allclose", "(", "pt_values", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "np_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.test_greedytop1": [[153, 175], ["pytest.mark.parametrize", "numpy.random.uniform", "test_beam_search.numpy_topk", "sockeye.beam_search.GreedyTop1", "sockeye.beam_search.GreedyTop1", "sockeye.beam_search.GreedyTop1", "sockeye.beam_search.GreedyTop1", "sockeye.beam_search.GreedyTop1.detach().numpy", "torch.ones", "sockeye.beam_search.GreedyTop1.detach().numpy", "target_factors[].item", "sockeye.beam_search.GreedyTop1.detach", "sockeye.beam_search.GreedyTop1.detach", "sockeye.beam_search.GreedyTop1.", "sockeye.beam_search.GreedyTop1.", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.numpy_topk"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"target_vocab_size\"", ",", "[", "2", ",", "10", ",", "500", ",", "1024", "]", ")", "\n", "def", "test_greedytop1", "(", "target_vocab_size", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "beam_size", "=", "1", "\n", "target_vocab_size", "=", "50", "\n", "# Random model scores. Shape: (batch_size * beam_size, target_vocab_size)", "\n", "scores", "=", "onp", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "batch_size", "*", "beam_size", ",", "target_vocab_size", ")", ")", "\n", "expected_hyp_index", ",", "expected_word_index", ",", "expected_value", "=", "numpy_topk", "(", "scores", ",", "k", "=", "beam_size", ",", "offset", "=", "None", ")", "\n", "assert", "expected_hyp_index", "[", "0", "]", "==", "0", "\n", "assert", "expected_value", ".", "shape", "==", "(", "1", ",", "1", ")", "\n", "\n", "greedy_top1", "=", "sockeye", ".", "beam_search", ".", "GreedyTop1", "(", ")", "\n", "\n", "best_word_index", "=", "greedy_top1", "(", "pt", ".", "tensor", "(", "scores", ")", ",", "None", ",", "None", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "assert", "best_word_index", ".", "shape", "==", "(", "1", ",", "1", ")", "\n", "assert", "best_word_index", "[", "0", ",", "0", "]", "==", "expected_word_index", "[", "0", "]", "\n", "\n", "target_factors", "=", "pt", ".", "ones", "(", "1", ",", "1", ",", "2", ",", "dtype", "=", "pt", ".", "int32", ")", "\n", "best_word_index_with_factors", "=", "greedy_top1", "(", "pt", ".", "tensor", "(", "scores", ")", ",", "None", ",", "target_factors", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "assert", "best_word_index_with_factors", ".", "shape", "==", "(", "1", ",", "2", ")", "\n", "assert", "best_word_index_with_factors", "[", "0", ",", "0", "]", "==", "expected_word_index", "[", "0", "]", "\n", "assert", "best_word_index_with_factors", "[", "0", ",", "1", "]", "==", "target_factors", "[", ":", ",", ":", ",", "1", "]", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.test_samplek_func": [[177, 205], ["pytest.mark.parametrize", "torch.tensor", "sockeye.beam_search.SampleK", "sockeye.beam_search.SampleK", "sockeye.beam_search.SampleK", "sockeye.beam_search.SampleK", "torch.tensor", "range", "torch.rand", "sockeye.beam_search.SampleK.", "list", "torch.where().sum().item", "range", "range", "torch.where().sum", "torch.where", "finished.long"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"batch_size, beam_size, target_vocab_size, top_n\"", ",", "\n", "[", "(", "1", ",", "5", ",", "200", ",", "0", ")", ",", "\n", "(", "5", ",", "5", ",", "200", ",", "0", ")", ",", "\n", "(", "1", ",", "100", ",", "200", ",", "5", ")", ",", "\n", "(", "5", ",", "100", ",", "200", ",", "5", ")", "]", ")", "\n", "def", "test_samplek_func", "(", "batch_size", ",", "beam_size", ",", "target_vocab_size", ",", "top_n", ")", ":", "\n", "# arrange scores increasing values from left to right, so the best item is always index 0, next-best 1, and so on", "\n", "    ", "scores", "=", "pt", ".", "tensor", "(", "[", "list", "(", "range", "(", "1", ",", "target_vocab_size", "+", "1", ")", ")", "for", "_", "in", "range", "(", "batch_size", "*", "beam_size", ")", "]", ")", "\n", "\n", "samplek", "=", "sockeye", ".", "beam_search", ".", "SampleK", "(", "n", "=", "top_n", ")", "\n", "\n", "# 0..(batch_size * beam_size)-1", "\n", "expected_hyps", "=", "pt", ".", "tensor", "(", "range", "(", "batch_size", "*", "beam_size", ")", ",", "dtype", "=", "pt", ".", "int32", ")", "\n", "finished", "=", "pt", ".", "rand", "(", "batch_size", "*", "beam_size", ")", ">", "0.5", "\n", "\n", "for", "i", "in", "[", "1", ",", "2", "]", ":", "\n", "        ", "hyps", ",", "words", ",", "values", "=", "samplek", "(", "scores", ",", "scores", ",", "finished", ")", "\n", "assert", "hyps", ".", "shape", "[", "0", "]", "==", "batch_size", "*", "beam_size", "\n", "\n", "# The indices should always be the integers from 0 to batch*beam-1", "\n", "assert", "(", "hyps", "==", "expected_hyps", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "(", "batch_size", "*", "beam_size", ")", "\n", "if", "top_n", "!=", "0", ":", "\n", "# Scores are increasing left-to-right, so best items are all the lowest word IDs.", "\n", "# No word id greater than the cap (top_n) should be selected", "\n", "            ", "assert", "(", "words", ">=", "top_n", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "0", "\n", "\n", "# word index should be zero for all finished hypotheses", "\n", "", "assert", "pt", ".", "where", "(", "finished", ",", "words", ",", "finished", ".", "long", "(", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.test_update_scores": [[207, 240], ["pytest.mark.parametrize", "sockeye.beam_search.UpdateScores", "sockeye.beam_search.UpdateScores", "sockeye.beam_search.UpdateScores", "sockeye.beam_search.UpdateScores", "numpy.full", "numpy.full", "numpy.array", "numpy.array", "numpy.ones", "torch.tensor", "numpy.random.uniform().astype", "sockeye.beam_search.UpdateScores.", "scores.detach().numpy.detach().numpy", "torch.testing.assert_allclose", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.random.uniform", "scores.detach().numpy.detach"], "function", ["None"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"use_unk_dist\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_update_scores", "(", "use_unk_dist", ")", ":", "\n", "    ", "vocab_size", "=", "10", "\n", "batch_beam_size", "=", "3", "\n", "us", "=", "sockeye", ".", "beam_search", ".", "UpdateScores", "(", "prevent_unk", "=", "use_unk_dist", ")", "\n", "pad_dist", "=", "onp", ".", "full", "(", "(", "1", ",", "vocab_size", ")", ",", "fill_value", "=", "onp", ".", "inf", ",", "dtype", "=", "'float32'", ")", "\n", "pad_dist", "[", "0", ",", "0", "]", "=", "0", "\n", "eos_dist", "=", "onp", ".", "full", "(", "(", "batch_beam_size", ",", "vocab_size", ")", ",", "fill_value", "=", "onp", ".", "inf", ",", "dtype", "=", "'float32'", ")", "\n", "eos_dist", "[", ":", ",", "C", ".", "EOS_ID", "]", "=", "0", "\n", "\n", "lengths", "=", "onp", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ",", "dtype", "=", "'int32'", ")", "\n", "max_lengths", "=", "onp", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ",", "dtype", "=", "'int32'", ")", "# first on reaches max length", "\n", "scores_accumulated", "=", "onp", ".", "ones", "(", "(", "3", ",", "1", ")", ",", "dtype", "=", "'float32'", ")", "\n", "finished", "=", "pt", ".", "tensor", "(", "[", "False", ",", "# not finished", "\n", "True", ",", "# finished", "\n", "False", "]", ",", "# not finished", "\n", "dtype", "=", "pt", ".", "bool", ")", "\n", "target_dists", "=", "onp", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "3", ",", "vocab_size", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "scores", ",", "lengths", "=", "us", "(", "pt", ".", "tensor", "(", "target_dists", ")", ",", "finished", ",", "\n", "pt", ".", "tensor", "(", "scores_accumulated", ")", ",", "pt", ".", "tensor", "(", "lengths", ")", ",", "pt", ".", "tensor", "(", "max_lengths", ")", ",", "\n", "pt", ".", "tensor", "(", "pad_dist", ")", ",", "pt", ".", "tensor", "(", "eos_dist", ")", ")", "\n", "scores", "=", "scores", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "lengths", "=", "lengths", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "lengths", ",", "pt", ".", "tensor", "(", "[", "1", ",", "1", ",", "1", "]", ")", ")", "# all lengths but finished updated + 1", "\n", "assert", "(", "scores", "[", "0", "]", "==", "(", "1.", "+", "target_dists", "[", "0", "]", "+", "eos_dist", ")", ")", ".", "all", "(", ")", "# 1 reached max length, force eos", "\n", "assert", "(", "scores", "[", "1", "]", "==", "(", "1.", "+", "pad_dist", "[", "0", "]", ")", ".", "tolist", "(", ")", ")", ".", "all", "(", ")", "# 2 finished, force pad, keep score", "\n", "if", "use_unk_dist", ":", "\n", "        ", "assert", "scores", "[", "2", ",", "C", ".", "UNK_ID", "]", "==", "onp", ".", "inf", "# 3 scores of <unk> should be np.inf", "\n", "target_dists", "[", "2", ",", "C", ".", "UNK_ID", "]", "=", "onp", ".", "inf", "\n", "assert", "(", "scores", "[", "2", "]", "==", "(", "1.", "+", "target_dists", "[", "2", "]", ")", ")", ".", "all", "(", ")", "# 3 scores + previous scores", "\n", "", "else", ":", "\n", "        ", "assert", "(", "scores", "[", "2", "]", "==", "(", "1.", "+", "target_dists", "[", "2", "]", ")", ")", ".", "all", "(", ")", "# 3 scores + previous scores", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.test_beam_search": [[305, 346], ["torch.device", "test_beam_search._TestInference", "sockeye.beam_search.BeamSearch", "sockeye.beam_search.BeamSearch", "sockeye.beam_search.BeamSearch", "sockeye.beam_search.BeamSearch", "torch.tensor().reshape", "torch.tensor", "sockeye.beam_search.BeamSearch.", "print", "print", "torch.testing.assert_allclose", "len", "_TestInference.states[].squeeze", "sockeye.beam_search.CandidateScorer", "sockeye.beam_search.CandidateScorer", "sockeye.beam_search.CandidateScorer", "sockeye.beam_search.CandidateScorer", "torch.tensor"], "function", ["None"], ["", "", "def", "test_beam_search", "(", ")", ":", "\n", "    ", "device", "=", "pt", ".", "device", "(", "'cpu'", ")", "\n", "dtype", "=", "pt", ".", "float32", "\n", "num_source_factors", "=", "1", "\n", "num_target_factors", "=", "1", "\n", "vocab_size", "=", "len", "(", "C", ".", "VOCAB_SYMBOLS", ")", "+", "1", "# 1 actual word: word id 4", "\n", "beam_size", "=", "1", "\n", "bos_id", "=", "2", "\n", "eos_id", "=", "3", "\n", "\n", "inference", "=", "_TestInference", "(", "output_vocab_size", "=", "vocab_size", ")", "\n", "bs", "=", "sockeye", ".", "beam_search", ".", "BeamSearch", "(", "\n", "beam_size", "=", "beam_size", ",", "\n", "dtype", "=", "dtype", ",", "\n", "bos_id", "=", "bos_id", ",", "\n", "eos_id", "=", "eos_id", ",", "\n", "device", "=", "device", ",", "\n", "output_vocab_size", "=", "vocab_size", ",", "\n", "scorer", "=", "sockeye", ".", "beam_search", ".", "CandidateScorer", "(", ")", ",", "\n", "num_source_factors", "=", "num_source_factors", ",", "\n", "num_target_factors", "=", "num_target_factors", ",", "\n", "inference", "=", "inference", ",", "\n", "beam_search_stop", "=", "C", ".", "BEAM_SEARCH_STOP_ALL", ",", "\n", "sample", "=", "None", ")", "\n", "\n", "# inputs", "\n", "batch_size", "=", "1", "\n", "max_length", "=", "3", "\n", "source", "=", "pt", ".", "tensor", "(", "[", "[", "C", ".", "BOS_ID", ",", "4", ",", "C", ".", "EOS_ID", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", "]", "]", ",", "dtype", "=", "dtype", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "source_length", "=", "(", "source", "!=", "C", ".", "PAD_ID", ")", ".", "sum", "(", "1", ")", ".", "reshape", "(", "-", "1", ")", "# (batch_size,)", "\n", "\n", "restrict_lexicon", "=", "None", "\n", "max_output_lengths", "=", "pt", ".", "tensor", "(", "[", "max_length", "]", ",", "dtype", "=", "pt", ".", "int", ")", "\n", "\n", "bs_out", "=", "bs", "(", "source", ",", "source_length", ",", "restrict_lexicon", ",", "max_output_lengths", ")", "\n", "r", "=", "bs_out", "\n", "\n", "print", "(", "'beam search lengths'", ",", "r", ".", "lengths", ")", "\n", "print", "(", "'internal lengths'", ",", "inference", ".", "states", "[", "0", "]", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "r", ".", "lengths", ",", "inference", ".", "states", "[", "0", "]", ".", "squeeze", "(", "1", ")", ")", "\n", "assert", "inference", ".", "states", "[", "1", "]", "==", "max_length", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.test_get_nvs_vocab_slice_ids": [[348, 405], ["torch.tensor", "torch.tensor", "sockeye.beam_search._get_nvs_vocab_slice_ids", "sockeye.beam_search._get_nvs_vocab_slice_ids", "sockeye.beam_search._get_nvs_vocab_slice_ids", "sockeye.beam_search._get_nvs_vocab_slice_ids", "torch.testing.assert_allclose", "torch.tensor", "torch.tensor", "sockeye.beam_search._get_nvs_vocab_slice_ids", "sockeye.beam_search._get_nvs_vocab_slice_ids", "sockeye.beam_search._get_nvs_vocab_slice_ids", "sockeye.beam_search._get_nvs_vocab_slice_ids", "torch.testing.assert_allclose", "torch.tensor", "torch.tensor", "sockeye.beam_search._get_nvs_vocab_slice_ids", "sockeye.beam_search._get_nvs_vocab_slice_ids", "sockeye.beam_search._get_nvs_vocab_slice_ids", "sockeye.beam_search._get_nvs_vocab_slice_ids", "torch.testing.assert_allclose", "torch.tensor", "torch.tensor", "torch.tensor", "sockeye.beam_search._get_nvs_vocab_slice_ids", "sockeye.beam_search._get_nvs_vocab_slice_ids", "sockeye.beam_search._get_nvs_vocab_slice_ids", "sockeye.beam_search._get_nvs_vocab_slice_ids", "torch.testing.assert_allclose", "torch.tensor", "torch.tensor", "sockeye.lexicon.StaticBlockLexicon", "sockeye.lexicon.StaticBlockLexicon", "sockeye.lexicon.StaticBlockLexicon", "sockeye.lexicon.StaticBlockLexicon", "sockeye.beam_search._get_nvs_vocab_slice_ids", "sockeye.beam_search._get_nvs_vocab_slice_ids", "sockeye.beam_search._get_nvs_vocab_slice_ids", "sockeye.beam_search._get_nvs_vocab_slice_ids", "torch.testing.assert_allclose", "numpy.array"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids"], ["", "def", "test_get_nvs_vocab_slice_ids", "(", ")", ":", "\n", "# Batch size 2", "\n", "# Note: the first 4 tokens are special tokens (PAD, UNK etc.)", "\n", "#                             0    1    2    3    4     5    6     7     8    9", "\n", "    ", "nvs_prediction", "=", "pt", ".", "tensor", "(", "[", "[", "0.1", ",", "0.1", ",", "0.1", ",", "0.1", ",", "0.7", ",", "0.0", ",", "0.8", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.1", ",", "0.1", ",", "0.1", ",", "0.1", ",", "0.55", ",", "0.0", ",", "0.49", ",", "0.05", ",", "0.0", ",", "0.0", "]", "]", ")", "\n", "expected_bow", "=", "pt", ".", "tensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "6", ",", "C", ".", "EOS_ID", ",", "C", ".", "EOS_ID", "]", ")", "\n", "bow", ",", "output_vocab_size", "=", "sockeye", ".", "beam_search", ".", "_get_nvs_vocab_slice_ids", "(", "nvs_thresh", "=", "0.5", ",", "\n", "nvs_prediction", "=", "nvs_prediction", ")", "\n", "assert", "output_vocab_size", "==", "expected_bow", ".", "shape", "[", "0", "]", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "bow", ",", "expected_bow", ")", "\n", "\n", "# Batch size 1", "\n", "#                             0    1    2    3    4     5    6     7     8    9", "\n", "nvs_prediction", "=", "pt", ".", "tensor", "(", "[", "[", "0.1", ",", "0.1", ",", "0.1", ",", "0.1", ",", "0.7", ",", "0.0", ",", "0.0", ",", "0.8", ",", "0.0", ",", "0.0", "]", "]", ")", "\n", "expected_bow", "=", "pt", ".", "tensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "7", ",", "C", ".", "EOS_ID", ",", "C", ".", "EOS_ID", "]", ")", "\n", "bow", ",", "output_vocab_size", "=", "sockeye", ".", "beam_search", ".", "_get_nvs_vocab_slice_ids", "(", "nvs_thresh", "=", "0.5", ",", "\n", "nvs_prediction", "=", "nvs_prediction", ")", "\n", "assert", "output_vocab_size", "==", "expected_bow", ".", "shape", "[", "0", "]", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "bow", ",", "expected_bow", ")", "\n", "\n", "# Batch size 1 + higher thresh", "\n", "#                             0    1    2    3    4     5    6     7     8    9", "\n", "nvs_prediction", "=", "pt", ".", "tensor", "(", "[", "[", "0.1", ",", "0.1", ",", "0.1", ",", "0.1", ",", "0.7", ",", "0.0", ",", "0.0", ",", "0.8", ",", "0.0", ",", "0.0", "]", "]", ")", "\n", "expected_bow", "=", "pt", ".", "tensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "C", ".", "EOS_ID", ",", "C", ".", "EOS_ID", ",", "C", ".", "EOS_ID", ",", "C", ".", "EOS_ID", "]", ")", "\n", "bow", ",", "output_vocab_size", "=", "sockeye", ".", "beam_search", ".", "_get_nvs_vocab_slice_ids", "(", "nvs_thresh", "=", "0.9", ",", "\n", "nvs_prediction", "=", "nvs_prediction", ")", "\n", "assert", "output_vocab_size", "==", "expected_bow", ".", "shape", "[", "0", "]", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "bow", ",", "expected_bow", ")", "\n", "\n", "# Batch size 2 + target prefix", "\n", "# Note: the first 4 tokens are special tokens (PAD, UNK etc.)", "\n", "#                             0    1    2    3    4     5    6     7     8    9", "\n", "nvs_prediction", "=", "pt", ".", "tensor", "(", "[", "[", "0.1", ",", "0.1", ",", "0.1", ",", "0.1", ",", "0.7", ",", "0.0", ",", "0.8", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.1", ",", "0.1", ",", "0.1", ",", "0.1", ",", "0.55", ",", "0.0", ",", "0.49", ",", "0.05", ",", "0.0", ",", "0.0", "]", "]", ")", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "8", ",", "8", "]", ",", "[", "8", ",", "8", "]", "]", ")", "\n", "expected_bow", "=", "pt", ".", "tensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "6", ",", "8", ",", "C", ".", "EOS_ID", "]", ")", "\n", "bow", ",", "output_vocab_size", "=", "sockeye", ".", "beam_search", ".", "_get_nvs_vocab_slice_ids", "(", "nvs_thresh", "=", "0.5", ",", "\n", "nvs_prediction", "=", "nvs_prediction", ",", "\n", "target_prefix", "=", "target_prefix", ")", "\n", "assert", "output_vocab_size", "==", "expected_bow", ".", "shape", "[", "0", "]", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "bow", ",", "expected_bow", ")", "\n", "\n", "# Batch size 2 + blocking lexicon", "\n", "# Note: the first 4 tokens are special tokens (PAD, UNK etc.)", "\n", "#                             0    1    2    3    4     5    6     7     8    9", "\n", "nvs_prediction", "=", "pt", ".", "tensor", "(", "[", "[", "0.1", ",", "0.1", ",", "0.1", ",", "0.1", ",", "0.7", ",", "0.0", ",", "0.8", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.1", ",", "0.1", ",", "0.1", ",", "0.1", ",", "0.55", ",", "0.0", ",", "0.49", ",", "0.05", ",", "0.0", ",", "0.0", "]", "]", ")", "\n", "expected_bow", "=", "pt", ".", "tensor", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "C", ".", "EOS_ID", ",", "C", ".", "EOS_ID", ",", "C", ".", "EOS_ID", "]", ")", "\n", "restrict_lexicon", "=", "sockeye", ".", "lexicon", ".", "StaticBlockLexicon", "(", "\n", "np", ".", "array", "(", "[", "6", "]", ")", "\n", ")", "\n", "bow", ",", "output_vocab_size", "=", "sockeye", ".", "beam_search", ".", "_get_nvs_vocab_slice_ids", "(", "nvs_thresh", "=", "0.5", ",", "\n", "nvs_prediction", "=", "nvs_prediction", ",", "\n", "restrict_lexicon", "=", "restrict_lexicon", ")", "\n", "assert", "output_vocab_size", "==", "expected_bow", ".", "shape", "[", "0", "]", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "bow", ",", "expected_bow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_beam_search.test_get_vocab_slice_ids_blocking": [[407, 423], ["sockeye.lexicon.StaticBlockLexicon", "sockeye.lexicon.StaticBlockLexicon", "sockeye.lexicon.StaticBlockLexicon", "sockeye.lexicon.StaticBlockLexicon", "torch.tensor", "sockeye.beam_search._get_vocab_slice_ids", "sockeye.beam_search._get_vocab_slice_ids", "sockeye.beam_search._get_vocab_slice_ids", "sockeye.beam_search._get_vocab_slice_ids", "torch.tensor", "torch.testing.assert_allclose", "numpy.array"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_vocab_slice_ids"], ["", "def", "test_get_vocab_slice_ids_blocking", "(", ")", ":", "\n", "# test _get_vocab_slice_ids when using a blocking lexicon.", "\n", "    ", "restrict_lexicon", "=", "sockeye", ".", "lexicon", ".", "StaticBlockLexicon", "(", "\n", "np", ".", "array", "(", "[", "3", "]", ")", "\n", ")", "\n", "source_words", "=", "pt", ".", "tensor", "(", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "vocab_slice_ids", ",", "_", "=", "sockeye", ".", "beam_search", ".", "_get_vocab_slice_ids", "(", "\n", "restrict_lexicon", "=", "restrict_lexicon", ",", "\n", "source_words", "=", "source_words", ",", "\n", "eos_id", "=", "C", ".", "EOS_ID", ",", "\n", "beam_size", "=", "5", ",", "\n", "target_prefix", "=", "None", ",", "\n", "output_vocab_size", "=", "6", "\n", ")", "\n", "expected_vocab_slice_ids", "=", "pt", ".", "tensor", "(", "[", "0", ",", "1", ",", "2", ",", "4", ",", "5", ",", "C", ".", "EOS_ID", ",", "C", ".", "EOS_ID", ",", "C", ".", "EOS_ID", "]", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "vocab_slice_ids", ",", "expected_vocab_slice_ids", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_fixed_param_strategy.test_fixed_param_strategy": [[371, 384], ["pytest.mark.parametrize", "unittest.mock.Mock", "sockeye.train.fixed_param_names_from_strategy", "sorted", "sorted"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.fixed_param_names_from_strategy"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"param_names, strategy, expected_fixed_param_names\"", ",", "[", "\n", "(", "ALL_PARAMS", ",", "C", ".", "FIXED_PARAM_STRATEGY_ALL_EXCEPT_DECODER", ",", "ALL_EXCEPT_DECODER_PARAMS", ")", ",", "\n", "(", "ALL_PARAMS", ",", "C", ".", "FIXED_PARAM_STRATEGY_ALL_EXCEPT_OUTER_LAYERS", ",", "ALL_EXCEPT_OUTER_LAYERS_PARAMS", ")", ",", "\n", "(", "ALL_PARAMS", ",", "C", ".", "FIXED_PARAM_STRATEGY_ALL_EXCEPT_EMBEDDINGS", ",", "ALL_EXCEPT_EMBED_PARAMS", ")", ",", "\n", "(", "ALL_PARAMS", ",", "C", ".", "FIXED_PARAM_STRATEGY_ALL_EXCEPT_OUTPUT_PROJ", ",", "ALL_EXCEPT_OUTPUT_PROJ_PARAMS", ")", ",", "\n", "]", ")", "\n", "def", "test_fixed_param_strategy", "(", "param_names", ",", "strategy", ",", "expected_fixed_param_names", ")", ":", "\n", "    ", "config", "=", "mock", ".", "Mock", "(", ")", "\n", "config", ".", "config_encoder", ".", "num_layers", "=", "NUM_LAYERS", "\n", "config", ".", "config_decoder", ".", "num_layers", "=", "NUM_LAYERS", "\n", "params", "=", "{", "name", ":", "None", "for", "name", "in", "ALL_PARAMS", "}", "\n", "fixed_param_names", "=", "fixed_param_names_from_strategy", "(", "config", ",", "params", ",", "strategy", ")", "\n", "assert", "sorted", "(", "fixed_param_names", ")", "==", "sorted", "(", "expected_fixed_param_names", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_bleu.test_bleu": [[57, 61], ["pytest.mark.parametrize", "abs", "sacrebleu.raw_corpus_bleu"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"hypotheses, references, expected_bleu\"", ",", "test_cases", ")", "\n", "def", "test_bleu", "(", "hypotheses", ",", "references", ",", "expected_bleu", ")", ":", "\n", "    ", "bleu", "=", "sacrebleu", ".", "raw_corpus_bleu", "(", "hypotheses", ",", "[", "references", "]", ",", ".01", ")", ".", "score", "/", "100", "\n", "assert", "abs", "(", "bleu", "-", "expected_bleu", ")", "<", "EPSILON", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_bleu.test_effective_order": [[63, 67], ["pytest.mark.parametrize", "abs", "sacrebleu.raw_corpus_bleu"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"hypotheses, references, expected_bleu\"", ",", "test_case_effective_order", ")", "\n", "def", "test_effective_order", "(", "hypotheses", ",", "references", ",", "expected_bleu", ")", ":", "\n", "    ", "bleu", "=", "sacrebleu", ".", "raw_corpus_bleu", "(", "hypotheses", ",", "[", "references", "]", ",", ".01", ")", ".", "score", "/", "100", "\n", "assert", "abs", "(", "bleu", "-", "expected_bleu", ")", "<", "EPSILON", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_bleu.test_statistics": [[69, 74], ["pytest.mark.parametrize", "sacrebleu.raw_corpus_bleu", "Statistics"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"hypothesis, reference, expected_stat\"", ",", "test_case_statistics", ")", "\n", "def", "test_statistics", "(", "hypothesis", ",", "reference", ",", "expected_stat", ")", ":", "\n", "    ", "result", "=", "sacrebleu", ".", "raw_corpus_bleu", "(", "hypothesis", ",", "reference", ",", ".01", ")", "\n", "stat", "=", "Statistics", "(", "result", ".", "counts", ",", "result", ".", "totals", ")", "\n", "assert", "stat", "==", "expected_stat", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_bleu.test_scoring": [[76, 80], ["pytest.mark.parametrize", "abs", "sacrebleu.compute_bleu"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"statistics, expected_score\"", ",", "test_case_scoring", ")", "\n", "def", "test_scoring", "(", "statistics", ",", "expected_score", ")", ":", "\n", "    ", "score", "=", "sacrebleu", ".", "compute_bleu", "(", "statistics", "[", "0", "]", ".", "common", ",", "statistics", "[", "0", "]", ".", "total", ",", "statistics", "[", "1", "]", ",", "statistics", "[", "2", "]", ")", ".", "score", "/", "100", "\n", "assert", "abs", "(", "score", "-", "expected_score", ")", "<", "EPSILON", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_bleu.test_offset": [[82, 90], ["pytest.mark.parametrize", "abs", "abs", "sacrebleu.raw_corpus_bleu", "sacrebleu.raw_corpus_bleu"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"hypothesis, reference, expected_with_offset, expected_without_offset\"", ",", "\n", "test_case_offset", ")", "\n", "def", "test_offset", "(", "hypothesis", ",", "reference", ",", "expected_with_offset", ",", "expected_without_offset", ")", ":", "\n", "    ", "score_without_offset", "=", "sacrebleu", ".", "raw_corpus_bleu", "(", "hypothesis", ",", "reference", ",", "0.0", ")", ".", "score", "/", "100", "\n", "assert", "abs", "(", "expected_without_offset", "-", "score_without_offset", ")", "<", "EPSILON", "\n", "\n", "score_with_offset", "=", "sacrebleu", ".", "raw_corpus_bleu", "(", "hypothesis", ",", "reference", ",", "0.1", ")", ".", "score", "/", "100", "\n", "assert", "abs", "(", "expected_with_offset", "-", "score_with_offset", ")", "<", "EPSILON", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_bleu.test_degenerate_statistics": [[92, 97], ["pytest.mark.parametrize", "sacrebleu.compute_bleu"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"statistics, offset, expected_score\"", ",", "test_case_degenerate_stats", ")", "\n", "def", "test_degenerate_statistics", "(", "statistics", ",", "offset", ",", "expected_score", ")", ":", "\n", "    ", "score", "=", "sacrebleu", ".", "compute_bleu", "(", "statistics", "[", "0", "]", ".", "common", ",", "statistics", "[", "0", "]", ".", "total", ",", "statistics", "[", "1", "]", ",", "statistics", "[", "2", "]", ",", "\n", "smooth_method", "=", "'floor'", ",", "smooth_value", "=", "offset", ")", ".", "score", "/", "100", "\n", "assert", "score", "==", "expected_score", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_bleu.test_degenerate_uneven": [[99, 103], ["pytest.mark.parametrize", "pytest.raises", "sacrebleu.raw_corpus_bleu"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"hypotheses, references\"", ",", "test_cases_uneven", ")", "\n", "def", "test_degenerate_uneven", "(", "hypotheses", ",", "references", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "EOFError", ",", "match", "=", "r'.*stream.*'", ")", ":", "\n", "        ", "sacrebleu", ".", "raw_corpus_bleu", "(", "hypotheses", ",", "references", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_lexicon.test_topk_lexicon": [[23, 86], ["dict", "sockeye.lexicon.TopKLexicon", "sockeye.lexicon.TopKLexicon", "tempfile.TemporaryDirectory", "os.path.join", "sockeye.lexicon.TopKLexicon.create", "numpy.zeros", "numpy.all", "numpy.sort", "os.path.join", "sockeye.lexicon.TopKLexicon.save", "sockeye.lexicon.TopKLexicon.load", "numpy.all", "sockeye.lexicon.TopKLexicon.get_allowed_trg_ids", "numpy.array", "numpy.all", "sockeye.lexicon.TopKLexicon.get_allowed_trg_ids", "numpy.array", "numpy.all", "sockeye.lexicon.TopKLexicon.get_allowed_trg_ids", "numpy.array", "numpy.all", "sockeye.lexicon.TopKLexicon.load", "sockeye.lexicon.TopKLexicon.get_allowed_trg_ids", "numpy.array", "numpy.all", "sockeye.lexicon.TopKLexicon.load", "sockeye.lexicon.TopKLexicon.get_allowed_trg_ids", "numpy.array", "numpy.all", "open", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "enumerate", "print", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.create", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_allowed_trg_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_allowed_trg_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_allowed_trg_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_allowed_trg_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_allowed_trg_ids"], ["def", "test_topk_lexicon", "(", ")", ":", "\n", "    ", "lexicon", "=", "[", "\"a\\ta\\t-0.6931471805599453\"", ",", "\n", "\"a\\tb\\t-1.2039728043259361\"", ",", "\n", "\"a\\tc\\t-1.6094379124341003\"", ",", "\n", "\"b\\tb\\t0.0\"", "]", "\n", "vocab_list", "=", "[", "\"a\"", ",", "\"b\"", ",", "\"c\"", "]", "\n", "vocab", "=", "dict", "(", "(", "y", ",", "x", ")", "for", "(", "x", ",", "y", ")", "in", "enumerate", "(", "C", ".", "VOCAB_SYMBOLS", "+", "vocab_list", ")", ")", "\n", "k", "=", "2", "\n", "lex", "=", "sockeye", ".", "lexicon", ".", "TopKLexicon", "(", "vocab", ",", "vocab", ")", "\n", "\n", "# Create from known lexicon", "\n", "with", "TemporaryDirectory", "(", "prefix", "=", "\"test_topk_lexicon.\"", ")", "as", "work_dir", ":", "\n", "# Write fast_align format lex table", "\n", "        ", "input_lex_path", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "\"input.lex\"", ")", "\n", "with", "open", "(", "input_lex_path", ",", "\"w\"", ")", "as", "out", ":", "\n", "            ", "for", "line", "in", "lexicon", ":", "\n", "                ", "print", "(", "line", ",", "file", "=", "out", ")", "\n", "# Use fast_align lex table to build top-k lexicon", "\n", "", "", "lex", ".", "create", "(", "input_lex_path", ",", "k", ")", "\n", "\n", "# Test against known lexicon", "\n", "expected", "=", "np", ".", "zeros", "(", "(", "len", "(", "C", ".", "VOCAB_SYMBOLS", ")", "+", "len", "(", "vocab_list", ")", ",", "k", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# a -> special + a b", "\n", "expected", "[", "len", "(", "C", ".", "VOCAB_SYMBOLS", ")", ",", ":", "2", "]", "=", "[", "len", "(", "C", ".", "VOCAB_SYMBOLS", ")", ",", "len", "(", "C", ".", "VOCAB_SYMBOLS", ")", "+", "1", "]", "\n", "# b -> special + b", "\n", "expected", "[", "len", "(", "C", ".", "VOCAB_SYMBOLS", ")", "+", "1", ",", ":", "1", "]", "=", "[", "len", "(", "C", ".", "VOCAB_SYMBOLS", ")", "+", "1", "]", "\n", "assert", "np", ".", "all", "(", "lex", ".", "lex", "==", "expected", ")", "\n", "\n", "# Test save/load", "\n", "expected_sorted", "=", "np", ".", "sort", "(", "expected", ",", "axis", "=", "1", ")", "\n", "json_lex_path", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "\"lex.json\"", ")", "\n", "lex", ".", "save", "(", "json_lex_path", ")", "\n", "lex", ".", "load", "(", "json_lex_path", ")", "\n", "assert", "np", ".", "all", "(", "lex", ".", "lex", "==", "expected_sorted", ")", "\n", "\n", "# Test lookup", "\n", "trg_ids", "=", "lex", ".", "get_allowed_trg_ids", "(", "np", ".", "array", "(", "[", "[", "vocab", "[", "\"a\"", "]", ",", "vocab", "[", "\"c\"", "]", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "expected", "=", "np", ".", "array", "(", "[", "vocab", "[", "symbol", "]", "for", "symbol", "in", "C", ".", "VOCAB_SYMBOLS", "+", "[", "\"a\"", ",", "\"b\"", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "assert", "np", ".", "all", "(", "trg_ids", "==", "expected", ")", "\n", "\n", "trg_ids", "=", "lex", ".", "get_allowed_trg_ids", "(", "np", ".", "array", "(", "[", "[", "vocab", "[", "\"b\"", "]", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "expected", "=", "np", ".", "array", "(", "[", "vocab", "[", "symbol", "]", "for", "symbol", "in", "C", ".", "VOCAB_SYMBOLS", "+", "[", "\"b\"", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "assert", "np", ".", "all", "(", "trg_ids", "==", "expected", ")", "\n", "\n", "trg_ids", "=", "lex", ".", "get_allowed_trg_ids", "(", "np", ".", "array", "(", "[", "[", "vocab", "[", "\"c\"", "]", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "expected", "=", "np", ".", "array", "(", "[", "vocab", "[", "symbol", "]", "for", "symbol", "in", "C", ".", "VOCAB_SYMBOLS", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "assert", "np", ".", "all", "(", "trg_ids", "==", "expected", ")", "\n", "\n", "# Test load with smaller k", "\n", "small_k", "=", "k", "-", "1", "\n", "lex", ".", "load", "(", "json_lex_path", ",", "k", "=", "small_k", ")", "\n", "assert", "lex", ".", "lex", ".", "shape", "[", "1", "]", "==", "small_k", "\n", "trg_ids", "=", "lex", ".", "get_allowed_trg_ids", "(", "np", ".", "array", "(", "[", "[", "vocab", "[", "\"a\"", "]", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "expected", "=", "np", ".", "array", "(", "[", "vocab", "[", "symbol", "]", "for", "symbol", "in", "C", ".", "VOCAB_SYMBOLS", "+", "[", "\"a\"", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "assert", "np", ".", "all", "(", "trg_ids", "==", "expected", ")", "\n", "\n", "# Test load with larger k", "\n", "large_k", "=", "k", "+", "1", "\n", "lex", ".", "load", "(", "json_lex_path", ",", "k", "=", "large_k", ")", "\n", "assert", "lex", ".", "lex", ".", "shape", "[", "1", "]", "==", "k", "\n", "trg_ids", "=", "lex", ".", "get_allowed_trg_ids", "(", "np", ".", "array", "(", "[", "[", "vocab", "[", "\"a\"", "]", ",", "vocab", "[", "\"c\"", "]", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "expected", "=", "np", ".", "array", "(", "[", "vocab", "[", "symbol", "]", "for", "symbol", "in", "C", ".", "VOCAB_SYMBOLS", "+", "[", "\"a\"", ",", "\"b\"", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "assert", "np", ".", "all", "(", "trg_ids", "==", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_lexicon.test_create_block_lexicon": [[88, 128], ["numpy.array", "tempfile.TemporaryDirectory", "os.path.join", "sockeye.lexicon.create_block_lexicon", "sockeye.lexicon.create_block_lexicon", "sockeye.lexicon.load_restrict_lexicon", "sockeye.lexicon.load_restrict_lexicon", "numpy.array", "numpy.all", "numpy.all", "numpy.all", "tempfile.TemporaryDirectory", "os.path.join", "sockeye.lexicon.create_block_lexicon", "sockeye.lexicon.create_block_lexicon", "sockeye.lexicon.load_restrict_lexicon", "sockeye.lexicon.load_restrict_lexicon", "numpy.array", "numpy.all", "numpy.all", "numpy.all", "sockeye.lexicon.load_restrict_lexicon.get_blocked_trg_ids", "sockeye.lexicon.load_restrict_lexicon.get_blocked_trg_ids", "sockeye.lexicon.load_restrict_lexicon.get_blocked_trg_ids", "sockeye.lexicon.load_restrict_lexicon.get_blocked_trg_ids"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.create_block_lexicon", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.create_block_lexicon", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.load_restrict_lexicon", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.load_restrict_lexicon", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.create_block_lexicon", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.create_block_lexicon", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.load_restrict_lexicon", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.load_restrict_lexicon", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_blocked_trg_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_blocked_trg_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_blocked_trg_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_blocked_trg_ids"], ["", "", "def", "test_create_block_lexicon", "(", ")", ":", "\n", "    ", "vocab", "=", "{", "\n", "\"test\"", ":", "0", ",", "\n", "\"TeSt\"", ":", "1", ",", "\n", "\"foo\"", ":", "2", ",", "\n", "\"bar\"", ":", "3", ",", "\n", "\n", "}", "\n", "block_tokens", "=", "[", "\"TeSt\"", ",", "\"bar\"", "]", "\n", "irrelevant_src_ids", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "\n", "with", "TemporaryDirectory", "(", "prefix", "=", "\"test_create_block_lexicon.\"", ")", "as", "work_dir", ":", "\n", "        ", "out_path", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "\"input.lex\"", ")", "\n", "sockeye", ".", "lexicon", ".", "create_block_lexicon", "(", "\n", "block_tokens", ",", "\n", "vocab", ",", "\n", "output_path", "=", "out_path", ",", "\n", "lowercase", "=", "False", "\n", ")", "\n", "\n", "lexicon", "=", "sockeye", ".", "lexicon", ".", "load_restrict_lexicon", "(", "out_path", ")", "\n", "expected", "=", "np", ".", "array", "(", "[", "1", ",", "3", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "assert", "np", ".", "all", "(", "lexicon", ".", "lex", "==", "expected", ")", "\n", "assert", "np", ".", "all", "(", "lexicon", ".", "get_blocked_trg_ids", "(", ")", "==", "expected", ")", "\n", "assert", "np", ".", "all", "(", "lexicon", ".", "get_blocked_trg_ids", "(", "irrelevant_src_ids", ")", "==", "expected", ")", "\n", "\n", "", "with", "TemporaryDirectory", "(", "prefix", "=", "\"test_create_block_lexicon.\"", ")", "as", "work_dir", ":", "\n", "        ", "out_path", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "\"input.lex\"", ")", "\n", "sockeye", ".", "lexicon", ".", "create_block_lexicon", "(", "\n", "block_tokens", ",", "\n", "vocab", ",", "\n", "output_path", "=", "out_path", ",", "\n", "lowercase", "=", "True", "\n", ")", "\n", "\n", "lexicon", "=", "sockeye", ".", "lexicon", ".", "load_restrict_lexicon", "(", "out_path", ")", "\n", "expected", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "3", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "assert", "np", ".", "all", "(", "lexicon", ".", "lex", "==", "expected", ")", "\n", "assert", "np", ".", "all", "(", "lexicon", ".", "get_blocked_trg_ids", "(", ")", "==", "expected", ")", "\n", "assert", "np", ".", "all", "(", "lexicon", ".", "get_blocked_trg_ids", "(", "irrelevant_src_ids", ")", "==", "expected", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_config.test_config_repr": [[27, 30], ["test_config.ConfigTest", "str", "test_config.ConfigTest"], "function", ["None"], ["", "def", "test_config_repr", "(", ")", ":", "\n", "    ", "c1", "=", "ConfigTest", "(", "param", "=", "1", ",", "config", "=", "ConfigTest", "(", "param", "=", "3", ")", ")", "\n", "assert", "str", "(", "c1", ")", "==", "\"ConfigTest(param=1, config=ConfigTest(param=3, config=None))\"", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_config.test_config_eq": [[32, 48], ["sockeye.config.Config", "test_config.ConfigTest", "test_config.ConfigTest", "test_config.ConfigTest", "test_config.ConfigTest", "test_config.ConfigTest", "test_config.ConfigTest"], "function", ["None"], ["", "def", "test_config_eq", "(", ")", ":", "\n", "    ", "basic_c", "=", "Config", "(", ")", "\n", "c1", "=", "ConfigTest", "(", "param", "=", "1", ")", "\n", "c1_other", "=", "ConfigTest", "(", "param", "=", "1", ")", "\n", "c2", "=", "ConfigTest", "(", "param", "=", "2", ")", "\n", "\n", "c_nested", "=", "ConfigTest", "(", "param", "=", "1", ",", "config", "=", "c1", ")", "\n", "c_nested_other", "=", "ConfigTest", "(", "param", "=", "1", ",", "config", "=", "c1_other", ")", "\n", "c_nested_c2", "=", "ConfigTest", "(", "param", "=", "1", ",", "config", "=", "c2", ")", "\n", "\n", "assert", "c1", "!=", "\"OTHER_TYPE\"", "\n", "assert", "c1", "!=", "basic_c", "\n", "assert", "c1", "==", "c1_other", "\n", "assert", "c1", "!=", "c2", "\n", "assert", "c_nested", "==", "c_nested_other", "\n", "assert", "c_nested", "!=", "c_nested_c2", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_config.test_config_serialization": [[50, 68], ["test_config.ConfigTest", "tempfile.TemporaryDirectory", "os.path.join", "ConfigTest.save", "os.path.exists", "sockeye.config.Config.load", "test_config.ConfigTest", "open", "f.read"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load"], ["", "def", "test_config_serialization", "(", ")", ":", "\n", "    ", "c1", "=", "ConfigTest", "(", "param", "=", "1", ",", "config", "=", "ConfigTest", "(", "param", "=", "2", ")", ")", "\n", "expected_serialization", "=", "\"\"\"!ConfigTest\nconfig: !ConfigTest\n  config: null\n  param: 2\nparam: 1\n\"\"\"", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp_dir", ":", "\n", "        ", "fname", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "\"config\"", ")", "\n", "c1", ".", "save", "(", "fname", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "fname", ")", "\n", "with", "open", "(", "fname", ")", "as", "f", ":", "\n", "            ", "assert", "f", ".", "read", "(", ")", "==", "expected_serialization", "\n", "\n", "", "c2", "=", "Config", ".", "load", "(", "fname", ")", "\n", "assert", "c2", ".", "param", "==", "c1", ".", "param", "\n", "assert", "c2", ".", "config", ".", "param", "==", "c1", ".", "config", ".", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_config.test_config_copy": [[70, 83], ["test_config.ConfigTest", "ConfigTest.copy", "test_config.ConfigTest", "ConfigTest.copy"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.config.Config.copy", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.config.Config.copy"], ["", "", "def", "test_config_copy", "(", ")", ":", "\n", "    ", "c1", "=", "ConfigTest", "(", "param", "=", "1", ")", "\n", "copy_c1", "=", "c1", ".", "copy", "(", ")", "\n", "# should be a different object that is equal to the original object", "\n", "assert", "c1", "is", "not", "copy_c1", "\n", "assert", "c1", "==", "copy_c1", "\n", "\n", "# optionally you can modify attributes when copying:", "\n", "mod_c1", "=", "ConfigTest", "(", "param", "=", "5", ")", "\n", "mod_copy_c1", "=", "c1", ".", "copy", "(", "param", "=", "5", ")", "\n", "assert", "mod_c1", "is", "not", "mod_copy_c1", "\n", "assert", "mod_c1", "==", "mod_copy_c1", "\n", "assert", "c1", "!=", "mod_copy_c1", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_config.test_config_missing_attributes_filled_with_default": [[91, 97], ["sockeye.config.Config.load"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load"], ["", "def", "test_config_missing_attributes_filled_with_default", "(", ")", ":", "\n", "# when we load a configuration object that does not contain all attributes as the current version of the", "\n", "# configuration object we expect the missing attributes to be filled with the default values of the dataclass", "\n", "\n", "    ", "config_obj", "=", "Config", ".", "load", "(", "\"test/data/config_with_missing_attributes.yaml\"", ")", "\n", "assert", "config_obj", ".", "new_attribute", "==", "\"new_attribute\"", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_encoder.test_embedding_encoder": [[21, 33], ["pytest.mark.parametrize", "sockeye.encoder.EmbeddingConfig", "sockeye.encoder.EmbeddingConfig", "sockeye.encoder.EmbeddingConfig", "sockeye.encoder.Embedding", "sockeye.encoder.Embedding", "sockeye.encoder.Embedding", "type", "sockeye.encoder.FactorConfig", "sockeye.encoder.FactorConfig", "sockeye.encoder.FactorConfig"], "function", ["None"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "'dropout, factor_configs'", ",", "[", "\n", "(", "0.", ",", "None", ")", ",", "\n", "(", "0.1", ",", "[", "sockeye", ".", "encoder", ".", "FactorConfig", "(", "vocab_size", "=", "5", ",", "\n", "num_embed", "=", "5", ",", "\n", "combine", "=", "C", ".", "FACTORS_COMBINE_SUM", ",", "\n", "share_embedding", "=", "False", ")", "]", ")", ",", "\n", "]", ")", "\n", "def", "test_embedding_encoder", "(", "dropout", ",", "factor_configs", ")", ":", "\n", "    ", "config", "=", "sockeye", ".", "encoder", ".", "EmbeddingConfig", "(", "vocab_size", "=", "20", ",", "num_embed", "=", "10", ",", "dropout", "=", "dropout", ",", "\n", "factor_configs", "=", "factor_configs", ")", "\n", "embedding", "=", "sockeye", ".", "encoder", ".", "Embedding", "(", "config", ")", "\n", "assert", "type", "(", "embedding", ")", "==", "sockeye", ".", "encoder", ".", "Embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_encoder.test_get_transformer_encoder": [[35, 56], ["pytest.mark.parametrize", "sockeye.transformer.TransformerConfig", "sockeye.transformer.TransformerConfig", "sockeye.transformer.TransformerConfig", "sockeye.encoder.get_transformer_encoder", "sockeye.encoder.get_transformer_encoder", "sockeye.encoder.get_transformer_encoder", "type"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.encoder.get_transformer_encoder", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.encoder.get_transformer_encoder", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.encoder.get_transformer_encoder"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'lhuc'", ",", "[", "\n", "(", "False", ",", ")", ",", "\n", "(", "True", ",", ")", "\n", "]", ")", "\n", "def", "test_get_transformer_encoder", "(", "lhuc", ")", ":", "\n", "    ", "config", "=", "sockeye", ".", "transformer", ".", "TransformerConfig", "(", "model_size", "=", "20", ",", "\n", "attention_heads", "=", "10", ",", "\n", "feed_forward_num_hidden", "=", "30", ",", "\n", "act_type", "=", "'test_act'", ",", "\n", "num_layers", "=", "40", ",", "\n", "dropout_attention", "=", "1.0", ",", "\n", "dropout_act", "=", "0.5", ",", "\n", "dropout_prepost", "=", "0.2", ",", "\n", "positional_embedding_type", "=", "C", ".", "LEARNED_POSITIONAL_EMBEDDING", ",", "\n", "preprocess_sequence", "=", "'test_pre'", ",", "\n", "postprocess_sequence", "=", "'test_post'", ",", "\n", "max_seq_len_source", "=", "50", ",", "\n", "max_seq_len_target", "=", "60", ",", "\n", "use_lhuc", "=", "lhuc", ")", "\n", "encoder", "=", "sockeye", ".", "encoder", ".", "get_transformer_encoder", "(", "config", ")", "\n", "assert", "type", "(", "encoder", ")", "==", "sockeye", ".", "encoder", ".", "TransformerEncoder", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_decoder.test_get_decoder": [[21, 44], ["pytest.mark.parametrize", "sockeye.transformer.TransformerConfig", "sockeye.transformer.TransformerConfig", "sockeye.transformer.TransformerConfig", "sockeye.decoder.get_decoder", "sockeye.decoder.get_decoder", "sockeye.decoder.get_decoder", "type"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.get_decoder", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.get_decoder", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.get_decoder"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "'lhuc'", ",", "[", "\n", "(", "False", ",", ")", ",", "\n", "(", "True", ",", ")", "\n", "]", ")", "\n", "def", "test_get_decoder", "(", "lhuc", ")", ":", "\n", "    ", "config", "=", "sockeye", ".", "transformer", ".", "TransformerConfig", "(", "\n", "model_size", "=", "20", ",", "\n", "attention_heads", "=", "10", ",", "\n", "feed_forward_num_hidden", "=", "30", ",", "\n", "act_type", "=", "'test_act'", ",", "\n", "num_layers", "=", "50", ",", "\n", "dropout_attention", "=", "0.5", ",", "\n", "dropout_act", "=", "0.6", ",", "\n", "dropout_prepost", "=", "0.1", ",", "\n", "positional_embedding_type", "=", "C", ".", "FIXED_POSITIONAL_EMBEDDING", ",", "\n", "preprocess_sequence", "=", "C", ".", "FIXED_POSITIONAL_EMBEDDING", ",", "\n", "postprocess_sequence", "=", "'test_post_seq'", ",", "\n", "max_seq_len_source", "=", "60", ",", "\n", "max_seq_len_target", "=", "70", ",", "\n", "use_lhuc", "=", "lhuc", ")", "\n", "decoder", "=", "sockeye", ".", "decoder", ".", "get_decoder", "(", "config", ",", "inference_only", "=", "False", ")", "\n", "\n", "assert", "type", "(", "decoder", ")", "==", "sockeye", ".", "decoder", ".", "TransformerDecoder", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_translate.mock_open": [[28, 34], ["unittest.mock.mock_open", "unittest.mock.mock_open", "iter"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_translate.mock_open", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_translate.mock_open"], ["def", "mock_open", "(", "*", "args", ",", "**", "kargs", ")", ":", "\n", "# work-around for [MagicMock objects not being iterable](http://bugs.python.org/issue21258)", "\n", "# cf. http://stackoverflow.com/questions/24779893/customizing-unittest-mock-mock-open-for-iteration", "\n", "    ", "f_open", "=", "unittest", ".", "mock", ".", "mock_open", "(", "*", "args", ",", "**", "kargs", ")", "\n", "f_open", ".", "return_value", ".", "__iter__", "=", "lambda", "self", ":", "iter", "(", "self", ".", "readline", ",", "''", ")", "\n", "return", "f_open", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_translate.test_translate_by_file": [[36, 57], ["unittest.mock.Mock", "unittest.mock.Mock", "unittest.mock.Mock", "unittest.mock.Mock", "sockeye.translate.read_and_translate", "sockeye.translate.read_and_translate", "sockeye.translate.read_and_translate", "sockeye.translate.read_and_translate", "tempfile.TemporaryDirectory", "os.path.join", "sockeye.translate.read_and_translate", "sockeye.translate.read_and_translate", "sockeye.translate.read_and_translate", "sockeye.translate.read_and_translate", "open", "f.write"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.read_and_translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.read_and_translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.read_and_translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.read_and_translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.read_and_translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.read_and_translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.read_and_translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.read_and_translate"], ["", "def", "test_translate_by_file", "(", ")", ":", "\n", "    ", "mock_output_handler", "=", "unittest", ".", "mock", ".", "Mock", "(", "spec", "=", "sockeye", ".", "output_handler", ".", "OutputHandler", ")", "\n", "mock_translator", "=", "unittest", ".", "mock", ".", "Mock", "(", "spec", "=", "sockeye", ".", "inference", ".", "Translator", ")", "\n", "mock_translator", ".", "translate", ".", "return_value", "=", "[", "''", ",", "''", "]", "\n", "mock_translator", ".", "num_source_factors", "=", "1", "\n", "mock_translator", ".", "max_batch_size", "=", "1", "\n", "\n", "mock_translator", ".", "nbest_size", "=", "1", "\n", "sockeye", ".", "translate", ".", "read_and_translate", "(", "translator", "=", "mock_translator", ",", "output_handler", "=", "mock_output_handler", ",", "\n", "chunk_size", "=", "2", ",", "input_file", "=", "'/dev/null'", ",", "input_factors", "=", "None", ")", "\n", "\n", "with", "TemporaryDirectory", "(", ")", "as", "temp", ":", "\n", "        ", "input_filename", "=", "os", ".", "path", ".", "join", "(", "temp", ",", "'input'", ")", "\n", "with", "open", "(", "input_filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "TEST_DATA", ")", "\n", "\n", "", "sockeye", ".", "translate", ".", "read_and_translate", "(", "translator", "=", "mock_translator", ",", "output_handler", "=", "mock_output_handler", ",", "\n", "chunk_size", "=", "2", ",", "input_file", "=", "input_filename", ",", "input_factors", "=", "None", ")", "\n", "\n", "# Ensure translate gets called once.  Input here will be a dummy mocked result, so we'll ignore it.", "\n", "assert", "mock_translator", ".", "translate", ".", "call_count", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_translate.test_translate_by_stdin_chunk2": [[59, 73], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.Mock", "unittest.mock.Mock", "unittest.mock.Mock", "unittest.mock.Mock", "sockeye.translate.read_and_translate", "sockeye.translate.read_and_translate", "sockeye.translate.read_and_translate", "sockeye.translate.read_and_translate", "io.StringIO"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.read_and_translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.read_and_translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.read_and_translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.read_and_translate"], ["", "", "@", "unittest", ".", "mock", ".", "patch", "(", "\"sys.stdin\"", ",", "io", ".", "StringIO", "(", "TEST_DATA", ")", ")", "\n", "def", "test_translate_by_stdin_chunk2", "(", ")", ":", "\n", "    ", "mock_output_handler", "=", "unittest", ".", "mock", ".", "Mock", "(", "spec", "=", "sockeye", ".", "output_handler", ".", "OutputHandler", ")", "\n", "mock_translator", "=", "unittest", ".", "mock", ".", "Mock", "(", "spec", "=", "sockeye", ".", "inference", ".", "Translator", ")", "\n", "mock_translator", ".", "translate", ".", "return_value", "=", "[", "''", ",", "''", "]", "\n", "mock_translator", ".", "num_source_factors", "=", "1", "\n", "mock_translator", ".", "max_batch_size", "=", "1", "\n", "mock_translator", ".", "nbest_size", "=", "1", "\n", "sockeye", ".", "translate", ".", "read_and_translate", "(", "translator", "=", "mock_translator", ",", "\n", "output_handler", "=", "mock_output_handler", ",", "\n", "chunk_size", "=", "2", ")", "\n", "\n", "# Ensure translate gets called once.  Input here will be a dummy mocked result, so we'll ignore it.", "\n", "assert", "mock_translator", ".", "translate", ".", "call_count", "==", "1", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_params.test_cleanup_param_files": [[28, 39], ["tempfile.TemporaryDirectory", "itertools.chain", "sockeye.training.cleanup_params_files", "sockeye.training.cleanup_params_files", "sockeye.training.cleanup_params_files", "sockeye.training.cleanup_params_files", "set", "range", "range", "open().close", "set", "os.path.join", "glob.glob", "open", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.cleanup_params_files", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.cleanup_params_files", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.cleanup_params_files", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.cleanup_params_files"], ["def", "test_cleanup_param_files", "(", ")", ":", "\n", "    ", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp_dir", ":", "\n", "        ", "for", "n", "in", "itertools", ".", "chain", "(", "range", "(", "1", ",", "20", ",", "2", ")", ",", "range", "(", "21", ",", "41", ")", ")", ":", "\n", "# Create empty files", "\n", "            ", "open", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "C", ".", "PARAMS_NAME", "%", "n", ")", ",", "\"w\"", ")", ".", "close", "(", ")", "\n", "", "sockeye", ".", "training", ".", "cleanup_params_files", "(", "tmp_dir", ",", "5", ",", "40", ",", "17", ",", "False", ",", "8", ",", "\"perplexity\"", ",", "\"best\"", ")", "\n", "\n", "expectedSurviving", "=", "set", "(", "[", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "C", ".", "PARAMS_NAME", "%", "n", ")", "\n", "for", "n", "in", "[", "17", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", "]", "]", ")", "\n", "# 17 must survive because it is the best one", "\n", "assert", "set", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "C", ".", "PARAMS_PREFIX", "+", "\"*\"", ")", ")", ")", "==", "expectedSurviving", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_params.test_cleanup_param_files_keep_first": [[41, 53], ["tempfile.TemporaryDirectory", "itertools.chain", "sockeye.training.cleanup_params_files", "sockeye.training.cleanup_params_files", "sockeye.training.cleanup_params_files", "sockeye.training.cleanup_params_files", "set", "range", "range", "open().close", "set", "os.path.join", "glob.glob", "open", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.cleanup_params_files", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.cleanup_params_files", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.cleanup_params_files", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.cleanup_params_files"], ["", "", "def", "test_cleanup_param_files_keep_first", "(", ")", ":", "\n", "    ", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp_dir", ":", "\n", "        ", "for", "n", "in", "itertools", ".", "chain", "(", "range", "(", "0", ",", "20", ",", "2", ")", ",", "range", "(", "21", ",", "41", ")", ")", ":", "\n", "# Create empty files", "\n", "            ", "open", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "C", ".", "PARAMS_NAME", "%", "n", ")", ",", "\"w\"", ")", ".", "close", "(", ")", "\n", "", "sockeye", ".", "training", ".", "cleanup_params_files", "(", "tmp_dir", ",", "5", ",", "40", ",", "16", ",", "True", ",", "8", ",", "\"perplexity\"", ",", "\"best\"", ")", "\n", "\n", "expectedSurviving", "=", "set", "(", "[", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "C", ".", "PARAMS_NAME", "%", "n", ")", "\n", "for", "n", "in", "[", "0", ",", "16", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", "]", "]", ")", "\n", "# 16 must survive because it is the best one", "\n", "# 0 should also survive because we set keep_first to True", "\n", "assert", "set", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "C", ".", "PARAMS_PREFIX", "+", "\"*\"", ")", ")", ")", "==", "expectedSurviving", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_params.mock_model": [[55, 69], ["sockeye.encoder.EmbeddingConfig", "sockeye.encoder.EmbeddingConfig", "sockeye.encoder.EmbeddingConfig", "sockeye.encoder.EmbeddingConfig", "sockeye.encoder.EncoderConfig", "sockeye.encoder.EncoderConfig", "sockeye.encoder.EncoderConfig", "sockeye.encoder.EncoderConfig", "sockeye.model.ModelConfig", "sockeye.model.ModelConfig", "sockeye.model.ModelConfig", "sockeye.model.ModelConfig", "sockeye.model.SockeyeModel", "sockeye.model.SockeyeModel", "sockeye.model.SockeyeModel", "sockeye.model.SockeyeModel"], "function", ["None"], ["", "", "def", "mock_model", "(", ")", ":", "\n", "    ", "config_embed", "=", "sockeye", ".", "encoder", ".", "EmbeddingConfig", "(", "vocab_size", "=", "20", ",", "num_embed", "=", "4", ",", "dropout", "=", "0.0", ")", "\n", "config_encoder", "=", "sockeye", ".", "encoder", ".", "EncoderConfig", "(", "model_size", "=", "4", ",", "attention_heads", "=", "1", ",", "feed_forward_num_hidden", "=", "4", ",", "\n", "act_type", "=", "'relu'", ",", "num_layers", "=", "1", ",", "dropout_attention", "=", "0.0", ",", "\n", "dropout_act", "=", "0.0", ",", "dropout_prepost", "=", "0.0", ",", "\n", "positional_embedding_type", "=", "'fixed'", ",", "preprocess_sequence", "=", "'none'", ",", "\n", "postprocess_sequence", "=", "'none'", ",", "max_seq_len_source", "=", "30", ",", "\n", "max_seq_len_target", "=", "30", ")", "\n", "config", "=", "sockeye", ".", "model", ".", "ModelConfig", "(", "config_data", "=", "None", ",", "vocab_source_size", "=", "20", ",", "vocab_target_size", "=", "20", ",", "\n", "config_embed_source", "=", "config_embed", ",", "config_embed_target", "=", "config_embed", ",", "\n", "config_encoder", "=", "config_encoder", ",", "config_decoder", "=", "config_encoder", ",", "\n", "weight_tying_type", "=", "'none'", ")", "\n", "model", "=", "sockeye", ".", "model", ".", "SockeyeModel", "(", "config", "=", "config", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_params.test_set_parameters": [[71, 81], ["test_params.mock_model", "sockeye.model.initialize_parameters", "sockeye.model.initialize_parameters", "sockeye.model.initialize_parameters", "sockeye.model.initialize_parameters", "dict", "torch.nn.Parameter", "mock_model.set_parameters", "torch.testing.assert_allclose", "mock_model.named_parameters", "torch.ones"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_params.mock_model", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.initialize_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.initialize_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.initialize_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.initialize_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.set_parameters"], ["", "def", "test_set_parameters", "(", ")", ":", "\n", "    ", "model", "=", "mock_model", "(", ")", "\n", "sockeye", ".", "model", ".", "initialize_parameters", "(", "model", ")", "\n", "model_params", "=", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", "\n", "\n", "param", "=", "pt", ".", "nn", ".", "Parameter", "(", "pt", ".", "ones", "(", "20", ",", "4", ")", ")", "\n", "name", "=", "'output_layer.weight'", "\n", "model", ".", "set_parameters", "(", "{", "name", ":", "param", "}", ")", "\n", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "model_params", "[", "'output_layer.weight'", "]", ".", "data", ",", "param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_params.test_set_parameters_allow_missing": [[83, 92], ["test_params.mock_model", "sockeye.model.initialize_parameters", "sockeye.model.initialize_parameters", "sockeye.model.initialize_parameters", "sockeye.model.initialize_parameters", "dict", "mock_model.set_parameters", "mock_model.named_parameters", "pytest.raises", "mock_model.set_parameters", "str"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_params.mock_model", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.initialize_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.initialize_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.initialize_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.initialize_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.set_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.set_parameters"], ["", "def", "test_set_parameters_allow_missing", "(", ")", ":", "\n", "    ", "model", "=", "mock_model", "(", ")", "\n", "sockeye", ".", "model", ".", "initialize_parameters", "(", "model", ")", "\n", "model_params", "=", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", "\n", "model", ".", "set_parameters", "(", "{", "}", ",", "allow_missing", "=", "True", ")", "\n", "assert", "'embedding_source.embedding.weight'", "in", "model_params", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", "as", "e", ":", "\n", "        ", "model", ".", "set_parameters", "(", "{", "}", ",", "allow_missing", "=", "False", ")", "\n", "", "assert", "str", "(", "e", ".", "value", ")", "==", "\"Parameter 'embedding_source.embedding.weight' is missing in new_params dictionary. \"", "\"Set allow_missing=True to ignore missing parameters.\"", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_params.test_set_parameters_ignore_extra": [[95, 111], ["test_params.mock_model", "sockeye.model.initialize_parameters", "sockeye.model.initialize_parameters", "sockeye.model.initialize_parameters", "sockeye.model.initialize_parameters", "dict", "torch.nn.Parameter", "torch.nn.Parameter", "mock_model.set_parameters", "mock_model.named_parameters", "torch.ones", "torch.zeros", "pytest.raises", "mock_model.set_parameters", "str"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_params.mock_model", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.initialize_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.initialize_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.initialize_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.initialize_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.set_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.set_parameters"], ["", "def", "test_set_parameters_ignore_extra", "(", ")", ":", "\n", "    ", "model", "=", "mock_model", "(", ")", "\n", "sockeye", ".", "model", ".", "initialize_parameters", "(", "model", ")", "\n", "model_params", "=", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", "\n", "\n", "p", "=", "pt", ".", "nn", ".", "Parameter", "(", "pt", ".", "ones", "(", "20", ",", "4", ")", ")", "\n", "np", "=", "'embedding_source.embedding.weight'", "\n", "q", "=", "pt", ".", "nn", ".", "Parameter", "(", "pt", ".", "zeros", "(", "1", ",", "1", ")", ")", "\n", "nq", "=", "'q'", "\n", "params", "=", "{", "np", ":", "p", ",", "nq", ":", "q", "}", "\n", "model", ".", "set_parameters", "(", "params", ",", "ignore_extra", "=", "True", ")", "\n", "assert", "'embedding_source.embedding.weight'", "in", "model_params", "\n", "assert", "'q'", "not", "in", "model_params", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", "as", "e", ":", "\n", "        ", "model", ".", "set_parameters", "(", "params", ",", "ignore_extra", "=", "False", ")", "\n", "", "assert", "str", "(", "e", ".", "value", ")", "==", "\"Parameter 'q' in new_params dictionary is not present in ParameterDict. \"", "\"Set ignore_extra=True to ignore.\"", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_chunks": [[29, 39], ["pytest.mark.parametrize", "list", "sockeye.utils.chunks"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.chunks"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"some_list, expected\"", ",", "[", "\n", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ",", "[", "[", "1", ",", "2", ",", "3", "]", ",", "[", "4", ",", "5", ",", "6", "]", ",", "[", "7", ",", "8", "]", "]", ")", ",", "\n", "(", "[", "1", ",", "2", "]", ",", "[", "[", "1", ",", "2", "]", "]", ")", ",", "\n", "(", "[", "1", ",", "2", ",", "3", "]", ",", "[", "[", "1", ",", "2", ",", "3", "]", "]", ")", ",", "\n", "(", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "[", "1", ",", "2", ",", "3", "]", ",", "[", "4", "]", "]", ")", ",", "\n", "]", ")", "\n", "def", "test_chunks", "(", "some_list", ",", "expected", ")", ":", "\n", "    ", "chunk_size", "=", "3", "\n", "chunked_list", "=", "list", "(", "utils", ".", "chunks", "(", "some_list", ",", "chunk_size", ")", ")", "\n", "assert", "chunked_list", "==", "expected", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_check_condition_true": [[41, 43], ["sockeye.utils.check_condition"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["", "def", "test_check_condition_true", "(", ")", ":", "\n", "    ", "utils", ".", "check_condition", "(", "1", "==", "1", ",", "\"Nice\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_check_condition_false": [[45, 49], ["pytest.raises", "sockeye.utils.check_condition", "str"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["", "def", "test_check_condition_false", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "utils", ".", "SockeyeError", ")", "as", "e", ":", "\n", "        ", "utils", ".", "check_condition", "(", "1", "==", "2", ",", "\"Wrong\"", ")", "\n", "", "assert", "\"Wrong\"", "==", "str", "(", "e", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_parse_version": [[51, 55], ["pytest.mark.parametrize", "sockeye.utils.parse_version"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.parse_version"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"version_string,expected_version\"", ",", "[", "(", "\"1.0.3\"", ",", "(", "\"1\"", ",", "\"0\"", ",", "\"3\"", ")", ")", ",", "\n", "(", "\"1.0.2.3\"", ",", "(", "\"1\"", ",", "\"0\"", ",", "\"2.3\"", ")", ")", "]", ")", "\n", "def", "test_parse_version", "(", "version_string", ",", "expected_version", ")", ":", "\n", "    ", "assert", "expected_version", "==", "utils", ".", "parse_version", "(", "version_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_check_version_disregards_minor": [[57, 61], ["sockeye.utils.parse_version", "sockeye.utils.check_version", "int"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.parse_version", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_version"], ["", "def", "test_check_version_disregards_minor", "(", ")", ":", "\n", "    ", "release", ",", "major", ",", "minor", "=", "utils", ".", "parse_version", "(", "__version__", ")", "\n", "other_minor_version", "=", "\"%s.%s.%d\"", "%", "(", "release", ",", "major", ",", "int", "(", "minor", ")", "+", "1", ")", "\n", "utils", ".", "check_version", "(", "other_minor_version", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils._get_later_major_version": [[63, 66], ["sockeye.utils.parse_version", "int"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.parse_version"], ["", "def", "_get_later_major_version", "(", ")", ":", "\n", "    ", "release", ",", "major", ",", "minor", "=", "utils", ".", "parse_version", "(", "__version__", ")", "\n", "return", "\"%s.%d.%s\"", "%", "(", "release", ",", "int", "(", "major", ")", "+", "1", ",", "minor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_check_version_checks_major": [[68, 73], ["test_utils._get_later_major_version", "pytest.raises", "sockeye.utils.check_version", "str"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils._get_later_major_version", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_version"], ["", "def", "test_check_version_checks_major", "(", ")", ":", "\n", "    ", "version", "=", "_get_later_major_version", "(", ")", "\n", "with", "pytest", ".", "raises", "(", "utils", ".", "SockeyeError", ")", "as", "e", ":", "\n", "        ", "utils", ".", "check_version", "(", "version", ")", "\n", "", "assert", "\"Given major version (%s) does not match major code version (%s)\"", "%", "(", "version", ",", "__version__", ")", "==", "str", "(", "e", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_version_matches_changelog": [[75, 83], ["re.compile", "open().read", "re.compile.findall", "open", "os.path.join", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["", "def", "test_version_matches_changelog", "(", ")", ":", "\n", "    ", "\"\"\"\n    Tests whether the last version mentioned in CHANGELOG.md matches the sockeye version (sockeye/__init__.py).\n    \"\"\"", "\n", "pattern", "=", "re", ".", "compile", "(", "r'''## \\[([0-9.]+)\\]'''", ")", "\n", "changelog", "=", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", ")", ",", "\"CHANGELOG.md\"", ")", ")", ".", "read", "(", ")", "\n", "last_changelog_version", "=", "pattern", ".", "findall", "(", "changelog", ")", "[", "0", "]", "\n", "assert", "__version__", "==", "last_changelog_version", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_online_mean_and_variance": [[85, 97], ["pytest.mark.parametrize", "sockeye.utils.OnlineMeanAndVariance", "numpy.isclose", "numpy.isclose", "utils.OnlineMeanAndVariance.update"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"samples,expected_mean, expected_variance\"", ",", "\n", "[", "\n", "(", "[", "1", ",", "2", "]", ",", "1.5", ",", "0.25", ")", ",", "\n", "(", "[", "4.", ",", "100.", ",", "12.", ",", "-", "3", ",", "1000", ",", "1.", ",", "-", "200", "]", ",", "130.57142857142858", ",", "132975.38775510204", ")", ",", "\n", "]", ")", "\n", "def", "test_online_mean_and_variance", "(", "samples", ",", "expected_mean", ",", "expected_variance", ")", ":", "\n", "    ", "mean_and_variance", "=", "utils", ".", "OnlineMeanAndVariance", "(", ")", "\n", "for", "sample", "in", "samples", ":", "\n", "        ", "mean_and_variance", ".", "update", "(", "sample", ")", "\n", "\n", "", "assert", "np", ".", "isclose", "(", "mean_and_variance", ".", "mean", ",", "expected_mean", ")", "\n", "assert", "np", ".", "isclose", "(", "mean_and_variance", ".", "variance", ",", "expected_variance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_online_mean_and_variance_nan": [[99, 111], ["pytest.mark.parametrize", "sockeye.utils.OnlineMeanAndVariance", "numpy.isclose", "math.isnan", "utils.OnlineMeanAndVariance.update"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"samples,expected_mean\"", ",", "\n", "[", "\n", "(", "[", "]", ",", "0.", ")", ",", "\n", "(", "[", "5.", "]", ",", "5.", ")", ",", "\n", "]", ")", "\n", "def", "test_online_mean_and_variance_nan", "(", "samples", ",", "expected_mean", ")", ":", "\n", "    ", "mean_and_variance", "=", "utils", ".", "OnlineMeanAndVariance", "(", ")", "\n", "for", "sample", "in", "samples", ":", "\n", "        ", "mean_and_variance", ".", "update", "(", "sample", ")", "\n", "\n", "", "assert", "np", ".", "isclose", "(", "mean_and_variance", ".", "mean", ",", "expected_mean", ")", "\n", "assert", "math", ".", "isnan", "(", "mean_and_variance", ".", "variance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_get_tokens": [[117, 121], ["pytest.mark.parametrize", "list", "sockeye.utils.get_tokens"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"line, expected_tokens\"", ",", "get_tokens_tests", ")", "\n", "def", "test_get_tokens", "(", "line", ",", "expected_tokens", ")", ":", "\n", "    ", "tokens", "=", "list", "(", "utils", ".", "get_tokens", "(", "line", ")", ")", "\n", "assert", "tokens", "==", "expected_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_combine_means": [[123, 135], ["pytest.mark.parametrize", "sockeye.utils.combine_means", "numpy.isclose", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.combine_means"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"samples, sample_means, expected_mean\"", ",", "\n", "[", "\n", "(", "[", "[", "1.23", ",", "0.474", ",", "9.516", "]", ",", "[", "10.219", ",", "5.31", ",", "9", ",", "21.90", ",", "98", "]", "]", ",", "[", "3.74", ",", "28.8858", "]", ",", "19.456125", ")", ",", "\n", "(", "[", "[", "-", "10", ",", "10", ",", "4.3", ",", "-", "4.3", "]", ",", "[", "102", "]", ",", "[", "0", ",", "1", "]", "]", ",", "[", "0.0", ",", "102.0", ",", "0.5", "]", ",", "14.714285714285714", ")", ",", "\n", "(", "[", "[", "]", ",", "[", "-", "1", "]", ",", "[", "0", ",", "1", "]", "]", ",", "[", "None", ",", "-", "1.0", ",", "0.5", "]", ",", "0.0", ")", ",", "\n", "(", "[", "[", "]", ",", "[", "1.99", "]", ",", "[", "]", ",", "[", "]", ",", "[", "0", "]", "]", ",", "[", "None", ",", "1.99", ",", "None", ",", "None", ",", "0.0", "]", ",", "0.995", ")", ",", "\n", "(", "[", "[", "2.45", ",", "-", "5.21", ",", "-", "20", ",", "81.92", ",", "41", ",", "1", ",", "0.1123", ",", "1.2", "]", ",", "[", "]", "]", ",", "[", "12.8090375", ",", "None", "]", ",", "12.8090375", ")", "\n", "]", ")", "\n", "def", "test_combine_means", "(", "samples", ",", "sample_means", ",", "expected_mean", ")", ":", "\n", "    ", "num_sents", "=", "[", "len", "(", "l", ")", "for", "l", "in", "samples", "]", "\n", "combined_mean", "=", "utils", ".", "combine_means", "(", "sample_means", ",", "num_sents", ")", "\n", "assert", "np", ".", "isclose", "(", "expected_mean", ",", "combined_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_combine_stds": [[137, 158], ["pytest.mark.parametrize", "sockeye.utils.combine_stds", "numpy.isclose", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.combine_stds"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"samples, sample_means, sample_stds, expected_std\"", ",", "\n", "[", "\n", "(", "[", "[", "-", "10", ",", "10", ",", "4.3", ",", "-", "4.3", "]", ",", "[", "10.219", ",", "5.31", ",", "9", ",", "21.90", ",", "98", "]", ",", "[", "]", ",", "[", "4.98", "]", ",", "[", "]", ",", "[", "0", ",", "1", "]", "]", ",", "\n", "[", "0.0", ",", "28.8858", ",", "None", ",", "4.98", ",", "None", ",", "0.5", "]", ",", "\n", "[", "7.697077367416805", ",", "35.00081956983293", ",", "None", ",", "0.0", ",", "None", ",", "0.5", "]", ",", "\n", "26.886761799748015", ")", ",", "\n", "(", "[", "[", "1.23", ",", "0.474", ",", "9.516", "]", ",", "[", "10.219", ",", "5.31", ",", "9", ",", "21.90", ",", "98", "]", "]", ",", "\n", "[", "3.74", ",", "28.8858", "]", ",", "[", "4.095893553304333", ",", "35.00081956983293", "]", ",", "30.33397330732285", ")", ",", "\n", "(", "[", "[", "-", "10", ",", "10", ",", "4.3", ",", "-", "4.3", "]", ",", "[", "102", "]", ",", "[", "0", ",", "1", "]", "]", ",", "\n", "[", "0.0", ",", "102.0", ",", "0.5", "]", ",", "[", "7.697077367416805", ",", "0.0", ",", "0.5", "]", ",", "36.10779213772596", ")", ",", "\n", "(", "[", "[", "]", ",", "[", "-", "1", "]", ",", "[", "0", ",", "1", "]", "]", ",", "[", "None", ",", "-", "1.0", ",", "0.5", "]", ",", "[", "None", ",", "0.0", ",", "0.5", "]", ",", "0.816496580927726", ")", ",", "\n", "(", "[", "[", "]", ",", "[", "1.99", "]", ",", "[", "]", ",", "[", "]", ",", "[", "0", "]", "]", ",", "[", "None", ",", "1.99", ",", "None", ",", "None", ",", "0.0", "]", ",", "[", "None", ",", "0.0", ",", "None", ",", "None", ",", "0.0", "]", ",", "\n", "0.995", ")", ",", "\n", "(", "[", "[", "2.45", ",", "-", "5.21", ",", "-", "20", ",", "81.92", ",", "41", ",", "1", ",", "0.1123", ",", "1.2", "]", ",", "[", "]", "]", ",", "[", "12.8090375", ",", "None", "]", ",", "\n", "[", "30.64904989938259", ",", "None", "]", ",", "\n", "30.64904989938259", ")", "\n", "]", ")", "\n", "def", "test_combine_stds", "(", "samples", ",", "sample_means", ",", "sample_stds", ",", "expected_std", ")", ":", "\n", "    ", "num_sents", "=", "[", "len", "(", "l", ")", "for", "l", "in", "samples", "]", "\n", "combined_std", "=", "utils", ".", "combine_stds", "(", "sample_stds", ",", "sample_means", ",", "num_sents", ")", "\n", "assert", "np", ".", "isclose", "(", "expected_std", ",", "combined_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_average_tensors": [[160, 175], ["torch.zeros", "torch.testing.assert_allclose", "torch.rand", "sockeye.utils.average_tensors", "pytest.raises", "sockeye.utils.average_tensors", "str", "range", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.average_tensors", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.average_tensors"], ["", "def", "test_average_tensors", "(", ")", ":", "\n", "    ", "n", "=", "4", "\n", "shape", "=", "(", "12", ",", "14", ")", "\n", "arrays", "=", "[", "pt", ".", "rand", "(", "12", ",", "14", ")", "for", "_", "in", "range", "(", "n", ")", "]", "\n", "expected_average", "=", "pt", ".", "zeros", "(", "*", "shape", ")", "\n", "for", "array", "in", "arrays", ":", "\n", "        ", "expected_average", "+=", "array", "\n", "", "expected_average", "/=", "4", "\n", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "utils", ".", "average_tensors", "(", "arrays", ")", ",", "expected_average", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "utils", ".", "SockeyeError", ")", "as", "e", ":", "\n", "        ", "other_shape", "=", "(", "12", ",", "13", ")", "\n", "utils", ".", "average_tensors", "(", "arrays", "+", "[", "pt", ".", "zeros", "(", "*", "other_shape", ")", "]", ")", "\n", "", "assert", "\"tensor shapes do not match\"", "==", "str", "(", "e", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_metric_value_is_better": [[177, 191], ["pytest.mark.parametrize", "sockeye.utils.metric_value_is_better"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.metric_value_is_better"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"new, old, metric, result\"", ",", "\n", "[", "(", "0", ",", "0", ",", "C", ".", "PERPLEXITY", ",", "False", ")", ",", "\n", "(", "1.0", ",", "1.0", ",", "C", ".", "PERPLEXITY", ",", "False", ")", ",", "\n", "(", "1.0", ",", "0.9", ",", "C", ".", "PERPLEXITY", ",", "False", ")", ",", "\n", "(", "0.99", ",", "1.0", ",", "C", ".", "PERPLEXITY", ",", "True", ")", ",", "\n", "(", "C", ".", "LARGE_POSITIVE_VALUE", ",", "np", ".", "inf", ",", "C", ".", "PERPLEXITY", ",", "True", ")", ",", "\n", "(", "0", ",", "0", ",", "C", ".", "BLEU", ",", "False", ")", ",", "\n", "(", "1.0", ",", "1.0", ",", "C", ".", "BLEU", ",", "False", ")", ",", "\n", "(", "1.0", ",", "0.9", ",", "C", ".", "BLEU", ",", "True", ")", ",", "\n", "(", "0.99", ",", "1.0", ",", "C", ".", "BLEU", ",", "False", ")", ",", "\n", "(", "C", ".", "LARGE_POSITIVE_VALUE", ",", "np", ".", "inf", ",", "C", ".", "BLEU", ",", "False", ")", ",", "\n", "]", ")", "\n", "def", "test_metric_value_is_better", "(", "new", ",", "old", ",", "metric", ",", "result", ")", ":", "\n", "    ", "assert", "utils", ".", "metric_value_is_better", "(", "new", ",", "old", ",", "metric", ")", "==", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils._touch_file": [[193, 203], ["open_func", "range", "print", "str"], "function", ["None"], ["", "def", "_touch_file", "(", "fname", ",", "compressed", ":", "bool", ",", "empty", ":", "bool", ")", "->", "str", ":", "\n", "    ", "if", "compressed", ":", "\n", "        ", "open_func", "=", "gzip", ".", "open", "\n", "", "else", ":", "\n", "        ", "open_func", "=", "open", "\n", "", "with", "open_func", "(", "fname", ",", "encoding", "=", "'utf8'", ",", "mode", "=", "'wt'", ")", "as", "f", ":", "\n", "        ", "if", "not", "empty", ":", "\n", "            ", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "print", "(", "str", "(", "i", ")", ",", "file", "=", "f", ")", "\n", "", "", "", "return", "fname", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_is_gzip_file": [[205, 212], ["tempfile.TemporaryDirectory", "os.path.join", "sockeye.utils.is_gzip_file", "sockeye.utils.is_gzip_file", "test_utils._touch_file", "test_utils._touch_file", "sockeye.utils.is_gzip_file", "sockeye.utils.is_gzip_file", "test_utils._touch_file", "test_utils._touch_file"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_gzip_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_gzip_file", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils._touch_file", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils._touch_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_gzip_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_gzip_file", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils._touch_file", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils._touch_file"], ["", "def", "test_is_gzip_file", "(", ")", ":", "\n", "    ", "with", "TemporaryDirectory", "(", ")", "as", "temp", ":", "\n", "        ", "fname", "=", "os", ".", "path", ".", "join", "(", "temp", ",", "'test'", ")", "\n", "assert", "utils", ".", "is_gzip_file", "(", "_touch_file", "(", "fname", ",", "compressed", "=", "True", ",", "empty", "=", "True", ")", ")", "\n", "assert", "utils", ".", "is_gzip_file", "(", "_touch_file", "(", "fname", ",", "compressed", "=", "True", ",", "empty", "=", "False", ")", ")", "\n", "assert", "not", "utils", ".", "is_gzip_file", "(", "_touch_file", "(", "fname", ",", "compressed", "=", "False", ",", "empty", "=", "True", ")", ")", "\n", "assert", "not", "utils", ".", "is_gzip_file", "(", "_touch_file", "(", "fname", ",", "compressed", "=", "False", ",", "empty", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_smart_open_without_suffix": [[214, 223], ["tempfile.TemporaryDirectory", "os.path.join", "test_utils._touch_file", "test_utils._touch_file", "sockeye.utils.smart_open", "sockeye.utils.smart_open", "len", "len", "fin.readlines", "fin.readlines"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils._touch_file", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils._touch_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open"], ["", "", "def", "test_smart_open_without_suffix", "(", ")", ":", "\n", "    ", "with", "TemporaryDirectory", "(", ")", "as", "temp", ":", "\n", "        ", "fname", "=", "os", ".", "path", ".", "join", "(", "temp", ",", "'test'", ")", "\n", "_touch_file", "(", "fname", ",", "compressed", "=", "True", ",", "empty", "=", "False", ")", "\n", "with", "utils", ".", "smart_open", "(", "fname", ")", "as", "fin", ":", "\n", "            ", "assert", "len", "(", "fin", ".", "readlines", "(", ")", ")", "==", "10", "\n", "", "_touch_file", "(", "fname", ",", "compressed", "=", "False", ",", "empty", "=", "False", ")", "\n", "with", "utils", ".", "smart_open", "(", "fname", ")", "as", "fin", ":", "\n", "            ", "assert", "len", "(", "fin", ".", "readlines", "(", ")", ")", "==", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_parse_metrics_line": [[225, 241], ["pytest.mark.parametrize", "int", "sockeye.utils.parse_metrics_line", "utils.parse_metrics_line.items", "isinstance", "pytest.raises", "sockeye.utils.parse_metrics_line", "line.split", "type"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.parse_metrics_line", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.parse_metrics_line"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"line_num,line,expected_metrics\"", ",", "[", "\n", "(", "1", ",", "\"1\\tfloat_metric=3.45\\tbool_metric=True\"", ",", "{", "'float_metric'", ":", "3.45", ",", "'bool_metric'", ":", "True", "}", ")", ",", "\n", "(", "3", ",", "\"3\\tfloat_metric=1.0\\tbool_metric=False\"", ",", "{", "'float_metric'", ":", "1.00", ",", "'bool_metric'", ":", "False", "}", ")", ",", "\n", "(", "3", ",", "\"3\\tfloat_metric=1.0\\tnone_metric=None\"", ",", "{", "'float_metric'", ":", "1.00", ",", "'none_metric'", ":", "None", "}", ")", ",", "\n", "# line_num and checkpoint are not equal, should fail", "\n", "(", "2", ",", "\"4\\tfloat_metric=1.0\\tbool_metric=False\"", ",", "{", "'float_metric'", ":", "1.00", ",", "'bool_metric'", ":", "False", "}", ")", ",", "\n", "]", ")", "\n", "def", "test_parse_metrics_line", "(", "line_num", ",", "line", ",", "expected_metrics", ")", ":", "\n", "    ", "if", "line_num", "==", "int", "(", "line", ".", "split", "(", "'\\t'", ")", "[", "0", "]", ")", ":", "\n", "        ", "parsed_metrics", "=", "utils", ".", "parse_metrics_line", "(", "line_num", ",", "line", ")", "\n", "for", "k", ",", "v", "in", "parsed_metrics", ".", "items", "(", ")", ":", "\n", "            ", "assert", "isinstance", "(", "v", ",", "type", "(", "expected_metrics", "[", "k", "]", ")", ")", "\n", "assert", "v", "==", "expected_metrics", "[", "k", "]", "\n", "", "", "else", ":", "\n", "        ", "with", "pytest", ".", "raises", "(", "utils", ".", "SockeyeError", ")", "as", "e", ":", "\n", "            ", "utils", ".", "parse_metrics_line", "(", "line_num", ",", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_write_read_metric_file": [[243, 253], ["tempfile.TemporaryDirectory", "os.path.join", "sockeye.utils.write_metrics_file", "sockeye.utils.read_metrics_file", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.write_metrics_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.read_metrics_file"], ["", "", "", "def", "test_write_read_metric_file", "(", ")", ":", "\n", "    ", "expected_metrics", "=", "[", "{", "'float_metric'", ":", "3.45", ",", "'bool_metric'", ":", "True", "}", ",", "\n", "{", "'float_metric'", ":", "1.0", ",", "'bool_metric'", ":", "False", "}", "]", "\n", "with", "TemporaryDirectory", "(", "prefix", "=", "\"metric_file\"", ")", "as", "work_dir", ":", "\n", "        ", "metric_path", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "\"metrics\"", ")", "\n", "utils", ".", "write_metrics_file", "(", "expected_metrics", ",", "metric_path", ")", "\n", "read_metrics", "=", "utils", ".", "read_metrics_file", "(", "metric_path", ")", "\n", "\n", "", "assert", "len", "(", "read_metrics", ")", "==", "len", "(", "expected_metrics", ")", "\n", "assert", "expected_metrics", "==", "read_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_adjust_first_step_masking": [[255, 372], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "sockeye.utils.adjust_first_step_masking", "sockeye.utils.adjust_first_step_masking", "sockeye.utils.adjust_first_step_masking", "sockeye.utils.adjust_first_step_masking", "sockeye.utils.adjust_first_step_masking", "sockeye.utils.adjust_first_step_masking", "sockeye.utils.adjust_first_step_masking", "sockeye.utils.adjust_first_step_masking"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.adjust_first_step_masking", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.adjust_first_step_masking", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.adjust_first_step_masking", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.adjust_first_step_masking", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.adjust_first_step_masking", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.adjust_first_step_masking", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.adjust_first_step_masking", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.adjust_first_step_masking"], ["", "def", "test_adjust_first_step_masking", "(", ")", ":", "\n", "    ", "first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "0.", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", "]", ")", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "1", ",", "2", "]", ",", "[", "1", ",", "0", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "1", ",", "0", "]", ",", "[", "2", ",", "3", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "2", ",", "3", ",", "4", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "2", ",", "3", ",", "4", ",", "5", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "0.", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "0.", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", "]", ")", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "2", ",", "3", ",", "4", ",", "5", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "3", ",", "0", ",", "0", "]", ",", "[", "2", ",", "3", ",", "4", ",", "5", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "3", ",", "0", ",", "0", "]", ",", "[", "2", ",", "3", ",", "4", ",", "5", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "2", ",", "3", ",", "4", ",", "5", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_count_seq_len": [[374, 396], ["pytest.mark.parametrize", "sockeye.utils.count_seq_len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.count_seq_len"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"sample, count_type, replace_tokens, expected_seq_len\"", ",", "[", "\n", "# count_seq char", "\n", "(", "\"\u2581Bonob os , \u2581like \u2581humans , \u2581love \u2581to \u2581play \u2581throughout \u2581their \u2581entire \u2581lives . \"", "\n", "\"Parliament Does Not Support Amendment Fre@@ eing Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "C", ".", "SEQ_LEN_IN_CHARACTERS", ",", "\n", "C", ".", "TOKEN_SEGMENTATION_MARKERS", ",", "\n", "106", ")", ",", "\n", "# count_seq token", "\n", "(", "\"\u2581Bonob os , \u2581like \u2581humans , \u2581love \u2581to \u2581play \u2581throughout \u2581their \u2581entire \u2581lives . \"", "\n", "\"Parliament Does Not Support Amendment Fre@@ eing Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "C", ".", "SEQ_LEN_IN_TOKENS", ",", "\n", "C", ".", "TOKEN_SEGMENTATION_MARKERS", ",", "\n", "26", ")", ",", "\n", "# count_seq char without replacing", "\n", "(", "\"\u2581Bonob os , \u2581like \u2581humans , \u2581love \u2581to \u2581play \u2581throughout \u2581their \u2581entire \u2581lives . \"", "\n", "\"Parliament Does Not Support Amendment Fre@@ eing Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "C", ".", "SEQ_LEN_IN_CHARACTERS", ",", "\n", "\"\"", ",", "\n", "126", ")", "\n", "]", ")", "\n", "def", "test_count_seq_len", "(", "sample", ",", "count_type", ",", "replace_tokens", ",", "expected_seq_len", ")", ":", "\n", "    ", "assert", "utils", ".", "count_seq_len", "(", "sample", ",", "count_type", ",", "replace_tokens", ")", "==", "expected_seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_utils.test_rerank_hypotheses_isometric": [[398, 420], ["pytest.mark.parametrize", "sockeye.utils.compute_isometric_score"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.compute_isometric_score"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"hypothesis, hypothesis_score, source, metric, alpha, expected_score\"", ",", "[", "\n", "(", "\"No Liber@@ ation for Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", ",", "\n", "0.377", ",", "\n", "\"El Parlamento no lib@@ era a Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "\"isometric-ratio\"", ",", "\n", "0.7", ",", "\n", "0.4322176470588236", ")", ",", "\n", "(", "\"No Liber@@ ation for Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", ",", "\n", "0.377", ",", "\n", "\"El Parlamento no lib@@ era a Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "\"isometric-diff\"", ",", "\n", "0.7", ",", "\n", "0.2131", ")", ",", "\n", "(", "\"No Liber@@ ation for Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", ",", "\n", "0.377", ",", "\n", "\"El Parlamento no lib@@ era a Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "\"isometric-lc\"", ",", "\n", "0.7", ",", "\n", "19.35483870967742", ")", ",", "\n", "]", ")", "\n", "def", "test_rerank_hypotheses_isometric", "(", "hypothesis", ",", "hypothesis_score", ",", "source", ",", "metric", ",", "alpha", ",", "expected_score", ")", ":", "\n", "    ", "assert", "utils", ".", "compute_isometric_score", "(", "hypothesis", ",", "hypothesis_score", ",", "source", ",", "metric", ",", "alpha", ")", "==", "expected_score", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_loss.DummyLoss.forward": [[28, 30], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "outputs", ",", "labels", ")", ":", "\n", "        ", "return", "(", "outputs", "+", "labels", ")", "*", "self", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_loss.DummyLoss.create_metric": [[31, 33], ["sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric"], "methods", ["None"], ["", "def", "create_metric", "(", "self", ")", ":", "\n", "        ", "return", "sockeye", ".", "loss", ".", "LossMetric", "(", "'test_metric'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_loss.test_loss_block": [[35, 54], ["test_loss.DummyLoss", "test_loss.DummyLoss.create_metric", "isinstance", "DummyLoss.item", "pytest.raises", "DummyLoss.", "pytest.raises", "DummyLoss.", "DummyLoss.", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.MSELoss.create_metric"], ["", "", "def", "test_loss_block", "(", ")", ":", "\n", "    ", "b", "=", "DummyLoss", "(", "name", "=", "'test'", ",", "output_name", "=", "'output'", ",", "label_name", "=", "'label'", ",", "weight", "=", "2.0", ")", "\n", "assert", "b", ".", "name", "==", "'test'", "\n", "assert", "b", ".", "output_name", "==", "'output'", "\n", "assert", "b", ".", "label_name", "==", "'label'", "\n", "assert", "b", ".", "weight", "==", "2.0", "\n", "\n", "# check required outputs/labels not found", "\n", "with", "pytest", ".", "raises", "(", "sockeye", ".", "utils", ".", "SockeyeError", ")", "as", "_", ":", "\n", "        ", "b", "(", "{", "'unknown_output'", ":", "pt", ".", "zeros", "(", "1", ")", "}", ",", "{", "'label'", ":", "pt", ".", "zeros", "(", "1", ")", "}", ")", "\n", "", "with", "pytest", ".", "raises", "(", "sockeye", ".", "utils", ".", "SockeyeError", ")", "as", "_", ":", "\n", "        ", "b", "(", "{", "'output'", ":", "pt", ".", "zeros", "(", "1", ")", "}", ",", "{", "'unknown_label'", ":", "pt", ".", "zeros", "(", "1", ")", "}", ")", "\n", "\n", "", "metric", "=", "b", ".", "create_metric", "(", ")", "\n", "assert", "isinstance", "(", "metric", ",", "sockeye", ".", "loss", ".", "LossMetric", ")", "\n", "assert", "metric", ".", "name", "==", "'test_metric'", "\n", "\n", "loss_out", "=", "b", "(", "{", "'output'", ":", "pt", ".", "ones", "(", "1", ")", "}", ",", "{", "'label'", ":", "pt", ".", "ones", "(", "1", ")", "}", ")", ".", "item", "(", ")", "\n", "assert", "loss_out", "==", "4.0", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_loss.test_loss_metric": [[56, 66], ["sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "sockeye.loss.LossMetric", "numpy.isnan", "sockeye.loss.LossMetric.update", "sockeye.loss.LossMetric.update", "sockeye.loss.LossMetric.reset", "numpy.isnan", "sockeye.loss.LossMetric.get", "sockeye.loss.LossMetric.get", "sockeye.loss.LossMetric.get", "sockeye.loss.LossMetric.get"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get"], ["", "def", "test_loss_metric", "(", ")", ":", "\n", "    ", "metric", "=", "sockeye", ".", "loss", ".", "LossMetric", "(", "name", "=", "'metric'", ")", "\n", "assert", "metric", ".", "name", "==", "'metric'", "\n", "assert", "onp", ".", "isnan", "(", "metric", ".", "get", "(", ")", ")", "\n", "metric", ".", "update", "(", "loss", "=", "2", ",", "num_samples", "=", "2", ")", "\n", "assert", "metric", ".", "get", "(", ")", "==", "1.0", "\n", "metric", ".", "update", "(", "loss", "=", "2", ",", "num_samples", "=", "6", ")", "\n", "assert", "metric", ".", "get", "(", ")", "==", "0.5", "\n", "metric", ".", "reset", "(", ")", "\n", "assert", "onp", ".", "isnan", "(", "metric", ".", "get", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_loss.test_cross_entropy_loss": [[68, 99], ["sockeye.loss.CrossEntropyLoss", "sockeye.loss.CrossEntropyLoss", "sockeye.loss.CrossEntropyLoss", "sockeye.loss.CrossEntropyLoss", "torch.tensor", "torch.tensor", "sockeye.loss.CrossEntropyLoss.", "loss_value.backward", "torch.tensor", "torch.tensor", "torch.testing.assert_allclose", "torch.testing.assert_allclose", "loss_samples.item", "math.log"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatistics.log"], ["", "def", "test_cross_entropy_loss", "(", ")", ":", "\n", "    ", "b", "=", "sockeye", ".", "loss", ".", "CrossEntropyLoss", "(", "ignore_label", "=", "C", ".", "PAD_ID", ",", "label_smoothing", "=", "0.0", ")", "\n", "assert", "b", ".", "ignore_label", "==", "C", ".", "PAD_ID", "\n", "assert", "b", ".", "name", "==", "C", ".", "CROSS_ENTROPY", "\n", "assert", "b", ".", "weight", "==", "1.0", "\n", "assert", "b", ".", "_dtype", "==", "C", ".", "DTYPE_FP32", "\n", "assert", "b", ".", "output_name", "==", "C", ".", "LOGITS_NAME", "\n", "assert", "b", ".", "label_name", "==", "C", ".", "TARGET_LABEL_NAME", "\n", "assert", "b", ".", "_alpha", "==", "0.0", "\n", "\n", "logits", "=", "pt", ".", "tensor", "(", "[", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "4", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", "]", "]", ",", "dtype", "=", "pt", ".", "float32", ",", "requires_grad", "=", "True", ")", "\n", "labels", "=", "pt", ".", "tensor", "(", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "\n", "loss_value", ",", "loss_samples", "=", "b", "(", "{", "C", ".", "LOGITS_NAME", ":", "logits", ",", "'other_stuff'", ":", "None", "}", ",", "\n", "{", "C", ".", "TARGET_LABEL_NAME", ":", "labels", ",", "'other_stuff'", ":", "None", "}", ")", "\n", "loss_value", ".", "backward", "(", ")", "\n", "assert", "loss_samples", ".", "item", "(", ")", "==", "1", "# this loss returns always 1", "\n", "\n", "expected_logits_grad", "=", "pt", ".", "tensor", "(", "[", "[", "0.08333334", ",", "-", "0.25", ",", "0.08333334", ",", "0.08333334", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.08333334", ",", "0.08333334", ",", "-", "0.25", ",", "0.08333334", "]", ",", "\n", "[", "0.08333334", ",", "0.08333334", ",", "0.08333334", ",", "-", "0.25", "]", "]", ")", "\n", "num_valid", "=", "(", "C", ".", "PAD_ID", "!=", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "expected_loss_value", "=", "pt", ".", "tensor", "(", "\n", "-", "(", "math", ".", "log", "(", "1", "/", "4", ")", "*", "3", ")", "/", "num_valid", ")", "# 3 valid rows, all uniform, divided by num_valid", "\n", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "loss_value", ",", "expected_loss_value", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "logits", ".", "grad", ",", "expected_logits_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_loss.test_label_to_bow": [[101, 114], ["torch.tensor", "sockeye.loss._label_to_bow", "sockeye.loss._label_to_bow", "sockeye.loss._label_to_bow", "sockeye.loss._label_to_bow", "torch.tensor", "torch.testing.assert_allclose"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss._label_to_bow", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss._label_to_bow", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss._label_to_bow", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss._label_to_bow"], ["", "def", "test_label_to_bow", "(", ")", ":", "\n", "    ", "labels", "=", "pt", ".", "tensor", "(", "\n", "[", "\n", "[", "1", ",", "3", "]", ",", "\n", "[", "0", ",", "0", "]", ",", "\n", "]", "\n", ")", "\n", "bow", "=", "sockeye", ".", "loss", ".", "_label_to_bow", "(", "labels", ",", "num_labels", "=", "4", ")", "\n", "expected_bow", "=", "pt", ".", "tensor", "(", "[", "\n", "[", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "]", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "bow", ",", "expected_bow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_loss.test_binary_cross_entropy_loss": [[116, 155], ["sockeye.loss.BinaryCrossEntropyBowLoss", "sockeye.loss.BinaryCrossEntropyBowLoss", "sockeye.loss.BinaryCrossEntropyBowLoss", "sockeye.loss.BinaryCrossEntropyBowLoss", "torch.tensor", "torch.tensor", "sockeye.loss.BinaryCrossEntropyBowLoss.", "loss_value.backward", "torch.testing.assert_allclose", "torch.testing.assert_allclose", "loss_samples.item", "torch.tensor", "torch.log", "torch.sigmoid", "torch.exp", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatistics.log"], ["", "def", "test_binary_cross_entropy_loss", "(", ")", ":", "\n", "    ", "vocab_size", "=", "4", "\n", "b", "=", "sockeye", ".", "loss", ".", "BinaryCrossEntropyBowLoss", "(", "\n", "pos_weight", "=", "1", ",", "\n", "num_labels", "=", "vocab_size", "\n", ")", "\n", "assert", "b", ".", "name", "==", "C", ".", "BINARY_CROSS_ENTROPY", "\n", "assert", "b", ".", "weight", "==", "1.0", "\n", "assert", "b", ".", "_dtype", "==", "C", ".", "DTYPE_FP32", "\n", "assert", "b", ".", "output_name", "==", "C", ".", "NVS_PRED_NAME", "\n", "assert", "b", ".", "label_name", "==", "C", ".", "TARGET_LABEL_NAME", "\n", "\n", "# batch size x num vocab", "\n", "# 2 x 4", "\n", "# Only as single element will contribute to the loss", "\n", "# (as all other predicitons will match the labels so the loss will be ~0)", "\n", "logits", "=", "pt", ".", "tensor", "(", "[", "[", "-", "100", ",", "100", ",", "-", "100", ",", "1", "]", ",", "\n", "[", "-", "100", ",", "100", ",", "-", "100", ",", "100", "]", "]", ",", "dtype", "=", "pt", ".", "float32", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# (batch_size, num_target_vocabs, num_vocab)", "\n", "# (2, 1, 4)", "\n", "labels", "=", "pt", ".", "tensor", "(", "\n", "[", "\n", "[", "1", ",", "3", "]", ",", "\n", "[", "1", ",", "3", "]", ",", "\n", "]", "\n", ")", "\n", "batch_size", "=", "labels", ".", "shape", "[", "0", "]", "\n", "\n", "loss_value", ",", "loss_samples", "=", "b", "(", "{", "C", ".", "NVS_PRED_NAME", ":", "logits", ",", "'other_stuff'", ":", "None", "}", ",", "\n", "{", "C", ".", "TARGET_LABEL_NAME", ":", "labels", ",", "'other_stuff'", ":", "None", "}", ")", "\n", "loss_value", ".", "backward", "(", ")", "\n", "assert", "loss_samples", ".", "item", "(", ")", "==", "1", "# this loss returns always 1", "\n", "expected_loss", "=", "-", "pt", ".", "log", "(", "pt", ".", "sigmoid", "(", "pt", ".", "tensor", "(", "1", ")", ")", ")", "/", "vocab_size", "/", "batch_size", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "loss_value", ",", "expected_loss", ")", "\n", "expected_grad", "=", "-", "1", "/", "(", "pt", ".", "exp", "(", "pt", ".", "tensor", "(", "1", ")", ")", "+", "1", ")", "/", "vocab_size", "/", "batch_size", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "logits", ".", "grad", ",", "\n", "pt", ".", "tensor", "(", "[", "[", "0.0000", ",", "0.0000", ",", "0.0000", ",", "expected_grad", "]", ",", "\n", "[", "0.0000", ",", "0.0000", ",", "0.0000", ",", "0.0000", "]", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_loss.test_perplexity_metric": [[159, 167], ["sockeye.loss.PerplexityMetric", "sockeye.loss.PerplexityMetric", "sockeye.loss.PerplexityMetric", "sockeye.loss.PerplexityMetric", "math.exp", "numpy.isclose", "sockeye.loss.PerplexityMetric.update", "sockeye.loss.PerplexityMetric.get", "sum", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get"], ["", "def", "test_perplexity_metric", "(", ")", ":", "\n", "    ", "ppl", "=", "sockeye", ".", "loss", ".", "PerplexityMetric", "(", ")", "\n", "assert", "ppl", ".", "name", "==", "C", ".", "PERPLEXITY", "\n", "ces", "=", "[", "2.0", ",", "1.4", ",", "5.2", "]", "\n", "for", "ce", "in", "ces", ":", "\n", "        ", "ppl", ".", "update", "(", "ce", ",", "1", ")", "\n", "", "expected_ppl", "=", "math", ".", "exp", "(", "sum", "(", "ces", ")", "/", "len", "(", "ces", ")", ")", "\n", "assert", "onp", ".", "isclose", "(", "ppl", ".", "get", "(", ")", ",", "expected_ppl", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_vocab.test_count_tokens": [[23, 27], ["sockeye.vocab.count_tokens", "collections.Counter"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.count_tokens"], ["def", "test_count_tokens", "(", ")", ":", "\n", "    ", "data", "=", "[", "\"a b c\"", ",", "\"c d e\"", "]", "\n", "raw_vocab", "=", "count_tokens", "(", "data", ")", "\n", "assert", "raw_vocab", "==", "Counter", "(", "{", "\"a\"", ":", "1", ",", "\"b\"", ":", "1", ",", "\"c\"", ":", "2", ",", "\"d\"", ":", "1", ",", "\"e\"", ":", "1", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_vocab.test_build_vocab": [[54, 58], ["pytest.mark.parametrize", "sockeye.vocab.build_vocab"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.build_vocab"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"data,size,min_count,expected\"", ",", "test_vocab", ")", "\n", "def", "test_build_vocab", "(", "data", ",", "size", ",", "min_count", ",", "expected", ")", ":", "\n", "    ", "vocab", "=", "build_vocab", "(", "data", "=", "data", ",", "num_words", "=", "size", ",", "min_count", "=", "min_count", ")", "\n", "assert", "vocab", "==", "expected", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_vocab.test_padded_build_vocab": [[60, 68], ["pytest.mark.parametrize", "sockeye.vocab.build_vocab", "len", "range"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.build_vocab"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"num_types,pad_to_multiple_of,expected_vocab_size\"", ",", "\n", "[", "(", "4", ",", "None", ",", "8", ")", ",", "(", "2", ",", "8", ",", "8", ")", ",", "(", "4", ",", "8", ",", "8", ")", ",", "(", "8", ",", "8", ",", "16", ")", ",", "(", "10", ",", "16", ",", "16", ")", ",", "(", "13", ",", "16", ",", "32", ")", "]", ")", "\n", "def", "test_padded_build_vocab", "(", "num_types", ",", "pad_to_multiple_of", ",", "expected_vocab_size", ")", ":", "\n", "    ", "data", "=", "[", "\" \"", ".", "join", "(", "'word%d'", "%", "i", "for", "i", "in", "range", "(", "num_types", ")", ")", "]", "\n", "size", "=", "None", "\n", "min_count", "=", "1", "\n", "vocab", "=", "build_vocab", "(", "data", ",", "size", ",", "min_count", ",", "pad_to_multiple_of", "=", "pad_to_multiple_of", ")", "\n", "assert", "len", "(", "vocab", ")", "==", "expected_vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_vocab.test_constants_in_vocab": [[83, 88], ["pytest.mark.parametrize", "sockeye.vocab.build_vocab"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.build_vocab"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"data,size,min_count,constants\"", ",", "test_constants", ")", "\n", "def", "test_constants_in_vocab", "(", "data", ",", "size", ",", "min_count", ",", "constants", ")", ":", "\n", "    ", "vocab", "=", "build_vocab", "(", "data", ",", "size", ",", "min_count", ")", "\n", "for", "const", "in", "constants", ":", "\n", "        ", "assert", "const", "in", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_vocab.test_get_ordered_tokens_from_vocab": [[90, 94], ["pytest.mark.parametrize", "sockeye.vocab.get_ordered_tokens_from_vocab"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.get_ordered_tokens_from_vocab"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"vocab, expected_output\"", ",", "[", "(", "{", "\"<pad>\"", ":", "0", ",", "\"a\"", ":", "4", ",", "\"b\"", ":", "2", "}", ",", "[", "\"<pad>\"", ",", "\"b\"", ",", "\"a\"", "]", ")", ",", "\n", "(", "{", "}", ",", "[", "]", ")", "]", ")", "\n", "def", "test_get_ordered_tokens_from_vocab", "(", "vocab", ",", "expected_output", ")", ":", "\n", "    ", "assert", "get_ordered_tokens_from_vocab", "(", "vocab", ")", "==", "expected_output", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_vocab.test_verify_valid_vocab": [[96, 116], ["pytest.mark.parametrize", "sockeye.vocab.is_valid_vocab", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "reversed", "list", "reversed"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.is_valid_vocab"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "\"vocab, expected_result\"", ",", "\n", "[", "\n", "(", "{", "symbol", ":", "idx", "for", "idx", ",", "symbol", "in", "enumerate", "(", "C", ".", "VOCAB_SYMBOLS", "+", "[", "\"w1\"", ",", "\"w2\"", "]", ")", "}", ",", "True", ")", ",", "\n", "# A vocabulary with just the valid symbols doesn't make much sense but is technically valid", "\n", "(", "{", "symbol", ":", "idx", "for", "idx", ",", "symbol", "in", "enumerate", "(", "C", ".", "VOCAB_SYMBOLS", ")", "}", ",", "True", ")", ",", "\n", "# Manually specifying the list of required special symbol so that we avoid making a backwards-incompatible", "\n", "# change by adding a new symbol to C.VOCAB_SYMBOLS", "\n", "(", "{", "symbol", ":", "idx", "for", "idx", ",", "symbol", "in", "enumerate", "(", "[", "C", ".", "PAD_SYMBOL", ",", "C", ".", "UNK_SYMBOL", ",", "C", ".", "BOS_SYMBOL", ",", "C", ".", "EOS_SYMBOL", "]", ")", "}", ",", "True", ")", ",", "\n", "# PAD_ID must have word id 0", "\n", "(", "{", "symbol", ":", "idx", "for", "idx", ",", "symbol", "in", "enumerate", "(", "reversed", "(", "C", ".", "VOCAB_SYMBOLS", ")", ")", "}", ",", "False", ")", ",", "\n", "(", "{", "symbol", ":", "idx", "for", "idx", ",", "symbol", "in", "enumerate", "(", "list", "(", "reversed", "(", "C", ".", "VOCAB_SYMBOLS", ")", ")", "+", "[", "\"w1\"", ",", "\"w2\"", "]", ")", "}", ",", "False", ")", ",", "\n", "# If there is a gap the vocabulary is not valid:", "\n", "(", "{", "symbol", ":", "idx", "if", "symbol", "!=", "\"w2\"", "else", "idx", "+", "1", "for", "idx", ",", "symbol", "in", "enumerate", "(", "C", ".", "VOCAB_SYMBOLS", "+", "[", "\"w1\"", ",", "\"w2\"", "]", ")", "}", ",", "False", ")", ",", "\n", "# There shouldn't be any duplicate word ids", "\n", "(", "{", "symbol", ":", "idx", "if", "symbol", "!=", "\"w2\"", "else", "idx", "-", "1", "for", "idx", ",", "symbol", "in", "enumerate", "(", "C", ".", "VOCAB_SYMBOLS", "+", "[", "\"w1\"", ",", "\"w2\"", "]", ")", "}", ",", "False", ")", ",", "\n", "]", "\n", ")", "\n", "def", "test_verify_valid_vocab", "(", "vocab", ",", "expected_result", ")", ":", "\n", "    ", "assert", "is_valid_vocab", "(", "vocab", ")", "==", "expected_result", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_vocab.test_get_sorted_source_vocab_fnames": [[118, 124], ["unittest.mock.patch", "sockeye.vocab._get_sorted_source_vocab_fnames"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab._get_sorted_source_vocab_fnames"], ["", "def", "test_get_sorted_source_vocab_fnames", "(", ")", ":", "\n", "    ", "expected_fnames", "=", "[", "C", ".", "VOCAB_SRC_NAME", "%", "i", "for", "i", "in", "[", "1", ",", "2", ",", "10", "]", "]", "\n", "with", "mock", ".", "patch", "(", "'os.listdir'", ")", "as", "mocked_listdir", ":", "\n", "        ", "mocked_listdir", ".", "return_value", "=", "[", "C", ".", "VOCAB_SRC_NAME", "%", "i", "for", "i", "in", "[", "2", ",", "1", ",", "10", "]", "]", "\n", "fnames", "=", "_get_sorted_source_vocab_fnames", "(", "None", ")", "\n", "assert", "fnames", "==", "expected_fnames", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.mock_translator": [[35, 72], ["unittest.mock.patch.object", "sockeye.inference.Translator", "sockeye.inference.Translator", "sockeye.inference.Translator", "sockeye.inference.Translator", "sockeye.inference.Translator", "sockeye.inference.Translator", "sockeye.inference.Translator", "torch.zeros", "torch.full", "unittest.mock.Mock", "test_inference.mock_translator.mock_model"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_params.mock_model"], ["def", "mock_translator", "(", "batch_size", ":", "int", "=", "1", ",", "\n", "beam_size", ":", "int", "=", "5", ",", "\n", "nbest_size", ":", "int", "=", "1", ",", "\n", "num_source_factors", ":", "int", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Creates a fake translator object but with real values for things that we need.\n    This lets us avoid a messy call to the constructor.\n    \"\"\"", "\n", "with", "patch", ".", "object", "(", "sockeye", ".", "inference", ".", "Translator", ",", "'__init__'", ",", "lambda", "self", ",", "**", "kwargs", ":", "None", ")", ":", "\n", "        ", "translator", "=", "sockeye", ".", "inference", ".", "Translator", "(", "device", "=", "None", ",", "\n", "batch_size", "=", "None", ",", "\n", "beam_size", "=", "None", ",", "\n", "ensemble_mode", "=", "None", ",", "\n", "scorer", "=", "None", ",", "\n", "beam_search_stop", "=", "None", ",", "\n", "nbest_size", "=", "None", ",", "\n", "models", "=", "None", ",", "\n", "source_vocabs", "=", "None", ",", "\n", "target_vocabs", "=", "None", ",", "\n", "restrict_lexicon", "=", "None", ",", "\n", "strip_unknown_words", "=", "None", ")", "\n", "\n", "# This is needed for returning the right number of source factors", "\n", "def", "mock_model", "(", ")", ":", "\n", "            ", "t_mock", "=", "Mock", "(", "sockeye", ".", "model", ".", "SockeyeModel", ")", "\n", "t_mock", ".", "num_source_factors", "=", "num_source_factors", "\n", "return", "t_mock", "\n", "\n", "", "translator", ".", "batch_size", "=", "batch_size", "\n", "translator", ".", "beam_size", "=", "beam_size", "\n", "translator", ".", "nbest_size", "=", "nbest_size", "\n", "translator", ".", "models", "=", "[", "mock_model", "(", ")", "]", "\n", "translator", ".", "zeros_array", "=", "pt", ".", "zeros", "(", "beam_size", ",", "dtype", "=", "pt", ".", "int", ")", "\n", "translator", ".", "inf_array", "=", "pt", ".", "full", "(", "(", "batch_size", "*", "beam_size", ",", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "dtype", "=", "pt", ".", "float32", ")", "\n", "translator", ".", "inf_array", "=", "translator", ".", "inf_array", "[", ":", "beam_size", "]", "\n", "translator", ".", "restrict_lexicon", "=", "None", "\n", "return", "translator", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_concat_translations": [[74, 107], ["pytest.mark.parametrize", "sockeye.beam_search.CandidateScorer", "sockeye.beam_search.CandidateScorer", "sockeye.beam_search.CandidateScorer", "sockeye.beam_search.CandidateScorer", "sockeye.beam_search.CandidateScorer", "sockeye.beam_search.CandidateScorer", "sockeye.beam_search.CandidateScorer", "len", "sockeye.inference._concat_translations", "sockeye.inference._concat_translations", "sockeye.inference._concat_translations", "sockeye.inference._concat_translations", "sockeye.inference._concat_translations", "sockeye.inference._concat_translations", "sockeye.inference._concat_translations", "numpy.isclose", "sockeye.beam_search.CandidateScorer.", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.inference.Translation", "sockeye.beam_search.CandidateScorer.", "sockeye.beam_search.CandidateScorer.", "sockeye.beam_search.CandidateScorer."], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._concat_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._concat_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._concat_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._concat_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._concat_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._concat_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._concat_translations"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"lp_alpha, lp_beta, bp_weight\"", ",", "\n", "[", "(", "1.0", ",", "0.0", ",", "0.0", ")", ",", "# no LP and no BP (default)", "\n", "(", "1.0", ",", "2.0", ",", "0.0", ")", ",", "# LP and no BP", "\n", "(", "1.0", ",", "2.0", ",", "4.0", ")", ",", "# LP and BP", "\n", "(", "1.0", ",", "0.0", ",", "5.0", ")", "]", ")", "# no LP and BP", "\n", "def", "test_concat_translations", "(", "lp_alpha", ":", "float", ",", "lp_beta", ":", "float", ",", "bp_weight", ":", "float", ")", ":", "\n", "    ", "expected_target_ids", "=", "[", "[", "0", "]", ",", "[", "1", "]", ",", "[", "2", "]", ",", "[", "0", "]", ",", "[", "8", "]", ",", "[", "9", "]", ",", "[", "0", "]", ",", "[", "3", "]", ",", "[", "4", "]", ",", "[", "5", "]", ",", "[", "-", "1", "]", "]", "\n", "\n", "scorer", "=", "sockeye", ".", "beam_search", ".", "CandidateScorer", "(", "lp_alpha", ",", "lp_beta", ",", "bp_weight", ")", "\n", "\n", "raw_score", "=", "(", "1", "+", "2", "+", "3", ")", "\n", "length", "=", "len", "(", "expected_target_ids", ")", "\n", "reference_length", "=", "(", "10", "+", "11", "+", "12", ")", "\n", "expected_score", "=", "[", "scorer", "(", "raw_score", ",", "length", ",", "reference_length", ")", "]", "\n", "# expected_score = (1 + 2 + 3) / length_penalty.get(len(expected_target_ids)) - \\", "\n", "#                  brevity_penalty.get(len(expected_target_ids), 10 + 11 + 12)", "\n", "translations", "=", "[", "sockeye", ".", "inference", ".", "Translation", "(", "[", "[", "0", "]", ",", "[", "1", "]", ",", "[", "2", "]", ",", "[", "-", "1", "]", "]", ",", "\n", "[", "scorer", "(", "1.0", ",", "4", ",", "10", ")", "]", ",", "\n", "None", ",", "\n", "10", ")", ",", "\n", "# Translation without EOS", "\n", "sockeye", ".", "inference", ".", "Translation", "(", "[", "[", "0", "]", ",", "[", "8", "]", ",", "[", "9", "]", "]", ",", "\n", "[", "scorer", "(", "2.0", ",", "3", ",", "11", ")", "]", ",", "\n", "None", ",", "\n", "11", ")", ",", "\n", "sockeye", ".", "inference", ".", "Translation", "(", "[", "[", "0", "]", ",", "[", "3", "]", ",", "[", "4", "]", ",", "[", "5", "]", ",", "[", "-", "1", "]", "]", ",", "\n", "[", "scorer", "(", "3.0", ",", "5", ",", "12", ")", "]", ",", "\n", "None", ",", "\n", "12", ")", "]", "\n", "combined", "=", "sockeye", ".", "inference", ".", "_concat_translations", "(", "translations", ",", "stop_ids", "=", "{", "_EOS", "}", ",", "scorer", "=", "scorer", ")", "\n", "\n", "assert", "combined", ".", "target_ids", "==", "expected_target_ids", "\n", "assert", "np", ".", "isclose", "(", "combined", ".", "scores", ",", "expected_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_translator_input": [[109, 138], ["pytest.mark.parametrize", "sentence.split", "sockeye.inference.TranslatorInput", "sockeye.inference.TranslatorInput", "sockeye.inference.TranslatorInput", "sockeye.inference.TranslatorInput", "sockeye.inference.TranslatorInput", "sockeye.inference.TranslatorInput", "sockeye.inference.TranslatorInput", "list", "enumerate", "len", "len", "sockeye.inference.TranslatorInput.chunks", "len", "math.ceil", "zip", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.chunks"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"sentence_id, sentence, factors, chunk_size\"", ",", "\n", "[", "(", "1", ",", "\"a test\"", ",", "None", ",", "4", ")", ",", "\n", "(", "1", ",", "\"a test\"", ",", "None", ",", "2", ")", ",", "\n", "(", "1", ",", "\"a test\"", ",", "None", ",", "1", ")", ",", "\n", "(", "0", ",", "\"\"", ",", "None", ",", "1", ")", ",", "\n", "(", "1", ",", "\"a test\"", ",", "[", "[", "'h'", ",", "'l'", "]", "]", ",", "4", ")", ",", "\n", "(", "1", ",", "\"a test\"", ",", "[", "[", "'h'", ",", "'h'", "]", ",", "[", "'x'", ",", "'y'", "]", "]", ",", "1", ")", "]", ")", "\n", "def", "test_translator_input", "(", "sentence_id", ",", "sentence", ",", "factors", ",", "chunk_size", ")", ":", "\n", "    ", "tokens", "=", "sentence", ".", "split", "(", ")", "\n", "trans_input", "=", "sockeye", ".", "inference", ".", "TranslatorInput", "(", "sentence_id", "=", "sentence_id", ",", "tokens", "=", "tokens", ",", "factors", "=", "factors", ")", "\n", "\n", "assert", "trans_input", ".", "sentence_id", "==", "sentence_id", "\n", "assert", "trans_input", ".", "tokens", "==", "tokens", "\n", "assert", "len", "(", "trans_input", ")", "==", "len", "(", "tokens", ")", "\n", "assert", "trans_input", ".", "factors", "==", "factors", "\n", "if", "factors", "is", "not", "None", ":", "\n", "        ", "for", "factor", "in", "trans_input", ".", "factors", ":", "\n", "            ", "assert", "len", "(", "factor", ")", "==", "len", "(", "tokens", ")", "\n", "\n", "", "", "chunked_inputs", "=", "list", "(", "trans_input", ".", "chunks", "(", "chunk_size", ")", ")", "\n", "assert", "len", "(", "chunked_inputs", ")", "==", "ceil", "(", "len", "(", "tokens", ")", "/", "chunk_size", ")", "\n", "for", "chunk_id", ",", "chunk_input", "in", "enumerate", "(", "chunked_inputs", ")", ":", "\n", "        ", "assert", "chunk_input", ".", "sentence_id", "==", "sentence_id", "\n", "assert", "chunk_input", ".", "tokens", "==", "trans_input", ".", "tokens", "[", "chunk_id", "*", "chunk_size", ":", "(", "chunk_id", "+", "1", ")", "*", "chunk_size", "]", "\n", "if", "factors", ":", "\n", "            ", "assert", "len", "(", "chunk_input", ".", "factors", ")", "==", "len", "(", "factors", ")", "\n", "for", "factor", ",", "expected_factor", "in", "zip", "(", "chunk_input", ".", "factors", ",", "factors", ")", ":", "\n", "                ", "assert", "len", "(", "factor", ")", "==", "len", "(", "chunk_input", ".", "tokens", ")", "\n", "assert", "factor", "==", "expected_factor", "[", "chunk_id", "*", "chunk_size", ":", "(", "chunk_id", "+", "1", ")", "*", "chunk_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_translator_input_with_source_prefix": [[140, 176], ["pytest.mark.parametrize", "sentence.split", "source_prefix.split", "sockeye.inference.TranslatorInput", "sockeye.inference.TranslatorInput", "sockeye.inference.TranslatorInput", "sockeye.inference.TranslatorInput", "sockeye.inference.TranslatorInput", "sockeye.inference.TranslatorInput", "sockeye.inference.TranslatorInput", "list", "enumerate", "len", "sockeye.inference.TranslatorInput.chunks", "len", "math.ceil", "len", "len", "zip", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.chunks"], ["", "", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"sentence_id, sentence, factors, chunk_size, source_prefix, source_prefix_factors\"", ",", "\n", "[", "(", "1", ",", "\"a test\"", ",", "None", ",", "4", ",", "\"prefix test\"", ",", "None", ")", ",", "\n", "(", "1", ",", "\"a test\"", ",", "None", ",", "2", ",", "\"prefix test\"", ",", "None", ")", ",", "\n", "(", "1", ",", "\"a test\"", ",", "None", ",", "1", ",", "\"prefix test\"", ",", "None", ")", ",", "\n", "(", "0", ",", "\"\"", ",", "None", ",", "1", ",", "\"\"", ",", "None", ")", ",", "\n", "(", "1", ",", "\"a test\"", ",", "[", "[", "'h'", ",", "'l'", "]", "]", ",", "4", ",", "\"prefix test\"", ",", "[", "[", "'h'", ",", "'l'", "]", "]", ")", ",", "\n", "(", "1", ",", "\"a test\"", ",", "[", "[", "'h'", ",", "'h'", "]", ",", "[", "'x'", ",", "'y'", "]", "]", ",", "1", ",", "\"prefix test\"", ",", "[", "[", "'h'", ",", "'h'", "]", ",", "[", "'x'", ",", "'y'", "]", "]", ")", "]", ")", "\n", "def", "test_translator_input_with_source_prefix", "(", "sentence_id", ",", "sentence", ",", "factors", ",", "chunk_size", ",", "source_prefix", ",", "source_prefix_factors", ")", ":", "\n", "    ", "tokens", "=", "sentence", ".", "split", "(", ")", "\n", "source_prefix_tokens", "=", "source_prefix", ".", "split", "(", ")", "\n", "trans_input", "=", "sockeye", ".", "inference", ".", "TranslatorInput", "(", "sentence_id", "=", "sentence_id", ",", "tokens", "=", "tokens", ",", "factors", "=", "factors", ",", "source_prefix_tokens", "=", "source_prefix_tokens", ",", "source_prefix_factors", "=", "source_prefix_factors", ")", "\n", "\n", "assert", "trans_input", ".", "sentence_id", "==", "sentence_id", "\n", "assert", "trans_input", ".", "tokens", "==", "tokens", "\n", "assert", "len", "(", "trans_input", ")", "==", "len", "(", "tokens", ")", "+", "len", "(", "source_prefix_tokens", ")", "\n", "assert", "trans_input", ".", "factors", "==", "factors", "\n", "assert", "trans_input", ".", "source_prefix_tokens", "==", "source_prefix_tokens", "\n", "assert", "trans_input", ".", "source_prefix_factors", "==", "source_prefix_factors", "\n", "if", "factors", "is", "not", "None", ":", "\n", "        ", "for", "factor", "in", "trans_input", ".", "factors", ":", "\n", "            ", "assert", "len", "(", "factor", ")", "==", "len", "(", "tokens", ")", "\n", "", "if", "trans_input", ".", "source_prefix_factors", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "factors", ")", "==", "len", "(", "trans_input", ".", "source_prefix_factors", ")", "\n", "\n", "", "", "chunked_inputs", "=", "list", "(", "trans_input", ".", "chunks", "(", "chunk_size", ")", ")", "\n", "assert", "len", "(", "chunked_inputs", ")", "==", "ceil", "(", "len", "(", "tokens", ")", "/", "chunk_size", ")", "\n", "for", "chunk_id", ",", "chunk_input", "in", "enumerate", "(", "chunked_inputs", ")", ":", "\n", "        ", "assert", "chunk_input", ".", "sentence_id", "==", "sentence_id", "\n", "assert", "chunk_input", ".", "tokens", "==", "trans_input", ".", "tokens", "[", "chunk_id", "*", "chunk_size", ":", "(", "chunk_id", "+", "1", ")", "*", "chunk_size", "]", "\n", "assert", "chunk_input", ".", "source_prefix_tokens", "==", "trans_input", ".", "source_prefix_tokens", "\n", "assert", "chunk_input", ".", "num_source_prefix_tokens", "==", "trans_input", ".", "num_source_prefix_tokens", "\n", "if", "source_prefix_factors", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "chunk_input", ".", "source_prefix_factors", ")", "==", "len", "(", "source_prefix_factors", ")", "\n", "for", "chunk_input_source_prefix_factor", ",", "source_prefix_factor", "in", "zip", "(", "chunk_input", ".", "source_prefix_factors", ",", "trans_input", ".", "source_prefix_factors", ")", ":", "\n", "                ", "assert", "len", "(", "chunk_input_source_prefix_factor", ")", "==", "len", "(", "source_prefix_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_get_max_input_output_length": [[178, 211], ["pytest.mark.parametrize", "sockeye.inference.get_max_input_output_length", "sockeye.inference.get_max_input_output_length", "sockeye.inference.get_max_input_output_length", "sockeye.inference.get_max_input_output_length", "sockeye.inference.get_max_input_output_length", "sockeye.inference.get_max_input_output_length", "sockeye.inference.get_max_input_output_length", "get_max_output_len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.get_max_input_output_length", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.get_max_input_output_length", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.get_max_input_output_length", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.get_max_input_output_length", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.get_max_input_output_length", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.get_max_input_output_length", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.get_max_input_output_length"], ["", "", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"supported_max_seq_len_source, supported_max_seq_len_target, \"", "\n", "\"forced_max_input_len, forced_max_output_len, length_ratio_mean, length_ratio_std, \"", "\n", "\"expected_max_input_len, expected_max_output_len\"", ",", "\n", "[", "\n", "(", "99", "+", "1", ",", "99", "+", "1", ",", "None", ",", "None", ",", "1.0", ",", "0.0", ",", "100", ",", "100", ")", ",", "# copy/sort test cases", "\n", "(", "99", "+", "1", ",", "99", "+", "1", ",", "None", ",", "None", ",", "0.9", ",", "0.2", ",", "100", ",", "111", ")", ",", "# target shorter than source", "\n", "(", "99", "+", "1", ",", "99", "+", "1", ",", "None", ",", "None", ",", "1.1", ",", "0.2", ",", "100", ",", "130", ")", ",", "# target longer than source", "\n", "(", "99", "+", "1", ",", "99", "+", "1", ",", "50", ",", "None", ",", "1.1", ",", "0.2", ",", "51", ",", "67", ")", ",", "# force a maximum input length", "\n", "(", "99", "+", "1", ",", "99", "+", "1", ",", "50", ",", "None", ",", "1.1", ",", "0.2", ",", "51", ",", "67", ")", ",", "# force a maximum input length", "\n", "(", "99", "+", "1", ",", "99", "+", "1", ",", "50", ",", "80", ",", "1.1", ",", "0.2", ",", "51", ",", "81", ")", ",", "# force a maximum input length", "\n", "]", ")", "\n", "def", "test_get_max_input_output_length", "(", "\n", "supported_max_seq_len_source", ",", "\n", "supported_max_seq_len_target", ",", "\n", "forced_max_input_len", ",", "\n", "forced_max_output_len", ",", "\n", "length_ratio_mean", ",", "\n", "length_ratio_std", ",", "\n", "expected_max_input_len", ",", "\n", "expected_max_output_len", ")", ":", "\n", "    ", "max_input_len", ",", "get_max_output_len", "=", "sockeye", ".", "inference", ".", "get_max_input_output_length", "(", "\n", "supported_max_seq_len_source", "=", "supported_max_seq_len_source", ",", "\n", "supported_max_seq_len_target", "=", "supported_max_seq_len_target", ",", "\n", "forced_max_input_len", "=", "forced_max_input_len", ",", "\n", "forced_max_output_len", "=", "forced_max_output_len", ",", "\n", "length_ratio_mean", "=", "length_ratio_mean", ",", "\n", "length_ratio_std", "=", "length_ratio_std", ",", "\n", "num_stds", "=", "1", ")", "\n", "max_output_len", "=", "get_max_output_len", "(", "max_input_len", ")", "\n", "\n", "assert", "max_input_len", "<=", "supported_max_seq_len_source", "\n", "assert", "max_input_len", "==", "expected_max_input_len", "\n", "assert", "max_output_len", "==", "expected_max_output_len", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_make_input_from_factored_string": [[213, 242], ["pytest.mark.parametrize", "test_inference.mock_translator", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "isinstance", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.mock_translator", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"sentence, num_expected_factors, delimiter, expected_tokens, expected_factors\"", ",", "\n", "[", "\n", "# sentence with single factor", "\n", "(", "\"this is a test\"", ",", "1", ",", "\"|\"", ",", "[", "\"this\"", ",", "\"is\"", ",", "\"a\"", ",", "\"test\"", "]", ",", "None", ")", ",", "\n", "# sentence with additional factor-like tokens, but no additional factors expected", "\n", "(", "\"this|X is| a|X test|\"", ",", "1", ",", "\"|\"", ",", "[", "\"this|X\"", ",", "\"is|\"", ",", "\"a|X\"", ",", "\"test|\"", "]", ",", "None", ")", ",", "\n", "# multiple spaces between token sequence", "\n", "(", "\"space   space\"", ",", "1", ",", "\"|\"", ",", "[", "\"space\"", ",", "\"space\"", "]", ",", "None", ")", ",", "\n", "# empty token sequence", "\n", "(", "\"\"", ",", "1", ",", "\"|\"", ",", "[", "]", ",", "None", ")", ",", "\n", "(", "\"\"", ",", "2", ",", "\"|\"", ",", "[", "]", ",", "[", "[", "]", "]", ")", ",", "\n", "# proper factored sequences", "\n", "(", "\"a|l b|l C|u\"", ",", "2", ",", "\"|\"", ",", "[", "\"a\"", ",", "\"b\"", ",", "\"C\"", "]", ",", "[", "[", "\"l\"", ",", "\"l\"", ",", "\"u\"", "]", "]", ")", ",", "\n", "(", "\"a-X-Y b-Y-X\"", ",", "3", ",", "\"-\"", ",", "[", "\"a\"", ",", "\"b\"", "]", ",", "[", "[", "\"X\"", ",", "\"Y\"", "]", ",", "[", "\"Y\"", ",", "\"X\"", "]", "]", ")", ",", "\n", "(", "\"a-X-Y \"", ",", "3", ",", "\"-\"", ",", "[", "\"a\"", "]", ",", "[", "[", "\"X\"", "]", ",", "[", "\"Y\"", "]", "]", ")", "\n", "]", ")", "\n", "def", "test_make_input_from_factored_string", "(", "sentence", ",", "num_expected_factors", ",", "delimiter", ",", "\n", "expected_tokens", ",", "expected_factors", ")", ":", "\n", "    ", "sentence_id", "=", "1", "\n", "translator", "=", "mock_translator", "(", "num_source_factors", "=", "num_expected_factors", ")", "\n", "\n", "inp", "=", "sockeye", ".", "inference", ".", "make_input_from_factored_string", "(", "sentence_id", "=", "sentence_id", ",", "factored_string", "=", "sentence", ",", "\n", "translator", "=", "translator", ",", "delimiter", "=", "delimiter", ")", "\n", "assert", "isinstance", "(", "inp", ",", "sockeye", ".", "inference", ".", "TranslatorInput", ")", "\n", "assert", "inp", ".", "sentence_id", "==", "sentence_id", "\n", "assert", "inp", ".", "tokens", "==", "expected_tokens", "\n", "assert", "inp", ".", "factors", "==", "expected_factors", "\n", "if", "num_expected_factors", ">", "1", ":", "\n", "        ", "assert", "len", "(", "inp", ".", "factors", ")", "==", "num_expected_factors", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_factor_parsing": [[244, 271], ["pytest.mark.parametrize", "test_inference.mock_translator", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "isinstance"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.mock_translator", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"sentence, num_expected_factors, delimiter\"", ",", "\n", "[", "\n", "(", "\"this is a test\"", ",", "2", ",", "\"|\"", ")", ",", "# expecting additional factor", "\n", "(", "\"this|X is a test\"", ",", "2", ",", "\"|\"", ")", ",", "# expecting additional factor", "\n", "(", "\"this|X is|X a|X test\"", ",", "2", ",", "\"|\"", ")", ",", "# fail on last token without factor", "\n", "(", "\"this| is|X a|X test|\"", ",", "2", ",", "\"|\"", ")", ",", "# first token with delimiter but no factor", "\n", "(", "\"this|X is|X a|X test|\"", ",", "2", ",", "\"|\"", ")", ",", "# last token with delimiter but no factor", "\n", "(", "\"w1||w2||f22\"", ",", "2", ",", "\"|\"", ")", ",", "\n", "(", "\"this\"", ",", "2", ",", "\"|\"", ")", ",", "# single token without factor", "\n", "(", "\"this|\"", ",", "2", ",", "\"|\"", ")", ",", "# single token with delimiter but no factor", "\n", "(", "\"this||\"", ",", "3", ",", "\"|\"", ")", ",", "# double delimiter", "\n", "(", "\"this|| another\"", ",", "2", ",", "\"|\"", ")", ",", "# double delimiter followed by token", "\n", "(", "\"this|||\"", ",", "2", ",", "\"|\"", ")", ",", "# triple delimiter", "\n", "(", "\"|this\"", ",", "2", ",", "\"|\"", ")", ",", "# empty token with 1 additional factor", "\n", "(", "\"|this|that\"", ",", "3", ",", "\"|\"", ")", ",", "# empty token with 2 additional factors", "\n", "(", "\"|this|that|\"", ",", "4", ",", "\"|\"", ")", "# empty token with 3 additional factors", "\n", "]", ")", "\n", "def", "test_factor_parsing", "(", "sentence", ",", "num_expected_factors", ",", "delimiter", ")", ":", "\n", "    ", "\"\"\"\n    Test to ensure we fail on parses with invalid factors.\n    \"\"\"", "\n", "sentence_id", "=", "1", "\n", "translator", "=", "mock_translator", "(", "num_source_factors", "=", "num_expected_factors", ")", "\n", "inp", "=", "sockeye", ".", "inference", ".", "make_input_from_factored_string", "(", "sentence_id", "=", "sentence_id", ",", "\n", "factored_string", "=", "sentence", ",", "\n", "translator", "=", "translator", ",", "delimiter", "=", "delimiter", ")", "\n", "assert", "isinstance", "(", "inp", ",", "sockeye", ".", "inference", ".", "BadTranslatorInput", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_make_input_whitespace_delimiter": [[273, 288], ["pytest.mark.parametrize", "test_inference.mock_translator", "pytest.raises", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "sockeye.inference.make_input_from_factored_string", "str"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.mock_translator", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"delimiter\"", ",", "[", "\"\\t\"", ",", "\"\\t \\t\"", ",", "\"\\t\\t\"", ",", "\"\\n\"", ",", "\"\\r\"", ",", "\"\\r\\n\"", ",", "\"\\u0020\"", ",", "\n", "\"\\n\\n\"", ",", "\"  \"", ",", "\" \\t\"", ",", "\"\\f\"", ",", "\"\\v\"", ",", "\"\\u00a0\"", ",", "\"\\u1680\"", ",", "\n", "\"\\u2000\"", ",", "None", ",", "\"\"", ",", "\"\\u200a\"", ",", "\"\\u205f\"", ",", "\"\\u3000\"", "]", ")", "\n", "def", "test_make_input_whitespace_delimiter", "(", "delimiter", ")", ":", "\n", "    ", "\"\"\"\n    Test to ensure we disallow a variety of whitespace strings as factor delimiters.\n    \"\"\"", "\n", "sentence_id", "=", "1", "\n", "translator", "=", "mock_translator", "(", "num_source_factors", "=", "2", ")", "\n", "sentence", "=", "\"foo\"", "\n", "with", "pytest", ".", "raises", "(", "sockeye", ".", "utils", ".", "SockeyeError", ")", "as", "e", ":", "\n", "        ", "sockeye", ".", "inference", ".", "make_input_from_factored_string", "(", "sentence_id", "=", "sentence_id", ",", "\n", "factored_string", "=", "sentence", ",", "\n", "translator", "=", "translator", ",", "delimiter", "=", "delimiter", ")", "\n", "", "assert", "str", "(", "e", ".", "value", ")", "==", "'Factor delimiter can not be whitespace or empty.'", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_make_input_from_valid_json_string": [[290, 310], ["pytest.mark.parametrize", "test_inference.mock_translator", "list", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "json.dumps", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.mock_translator", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"text, factors\"", ",", "\n", "[", "(", "\"this is a test without factors\"", ",", "None", ")", ",", "\n", "(", "\"\"", ",", "None", ")", ",", "\n", "(", "\"test\"", ",", "[", "\"X\"", ",", "\"X\"", "]", ")", ",", "\n", "(", "\"a b c\"", ",", "[", "\"x y z\"", "]", ")", ",", "\n", "(", "\"a\"", ",", "[", "]", ")", "]", ")", "\n", "def", "test_make_input_from_valid_json_string", "(", "text", ",", "factors", ")", ":", "\n", "    ", "sentence_id", "=", "1", "\n", "translator", "=", "mock_translator", "(", ")", "\n", "expected_tokens", "=", "list", "(", "sockeye", ".", "data_io", ".", "get_tokens", "(", "text", ")", ")", "\n", "inp", "=", "sockeye", ".", "inference", ".", "make_input_from_json_string", "(", "sentence_id", ",", "\n", "json", ".", "dumps", "(", "{", "C", ".", "JSON_TEXT_KEY", ":", "text", ",", "\n", "C", ".", "JSON_FACTORS_KEY", ":", "factors", "}", ")", ",", "\n", "translator", ")", "\n", "assert", "len", "(", "inp", ")", "==", "len", "(", "expected_tokens", ")", "\n", "assert", "inp", ".", "tokens", "==", "expected_tokens", "\n", "if", "factors", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "inp", ".", "factors", ")", "==", "len", "(", "factors", ")", "\n", "", "else", ":", "\n", "        ", "assert", "inp", ".", "factors", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_make_input_from_valid_json_string_restrict_lexicon": [[312, 337], ["test_inference.mock_translator", "unittest.mock.Mock", "unittest.mock.Mock", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "json.dumps", "json.dumps"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.mock_translator", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string"], ["", "", "def", "test_make_input_from_valid_json_string_restrict_lexicon", "(", ")", ":", "\n", "    ", "sentence_id", "=", "1", "\n", "text", "=", "'this is a test'", "\n", "translator", "=", "mock_translator", "(", ")", "\n", "\n", "lexicon1", "=", "Mock", "(", "sockeye", ".", "lexicon", ".", "RestrictLexicon", ")", "\n", "lexicon2", "=", "Mock", "(", "sockeye", ".", "lexicon", ".", "RestrictLexicon", ")", "\n", "translator", ".", "restrict_lexicon", "=", "{", "'lexicon1'", ":", "lexicon1", ",", "'lexicon2'", ":", "lexicon2", "}", "\n", "assert", "translator", ".", "restrict_lexicon", "[", "'lexicon1'", "]", "is", "not", "translator", ".", "restrict_lexicon", "[", "'lexicon2'", "]", "\n", "\n", "restrict_lexicon1", "=", "'lexicon1'", "\n", "inp1", "=", "sockeye", ".", "inference", ".", "make_input_from_json_string", "(", "sentence_id", ",", "\n", "json", ".", "dumps", "(", "{", "C", ".", "JSON_TEXT_KEY", ":", "text", ",", "\n", "C", ".", "JSON_RESTRICT_LEXICON_KEY", ":", "restrict_lexicon1", "}", ")", ",", "\n", "translator", ")", "\n", "assert", "inp1", ".", "restrict_lexicon", "is", "lexicon1", "\n", "\n", "restrict_lexicon2", "=", "'lexicon2'", "\n", "inp2", "=", "sockeye", ".", "inference", ".", "make_input_from_json_string", "(", "sentence_id", ",", "\n", "json", ".", "dumps", "(", "{", "C", ".", "JSON_TEXT_KEY", ":", "text", ",", "\n", "C", ".", "JSON_RESTRICT_LEXICON_KEY", ":", "restrict_lexicon2", "}", ")", ",", "\n", "translator", ")", "\n", "assert", "inp2", ".", "restrict_lexicon", "is", "lexicon2", "\n", "\n", "assert", "inp1", ".", "restrict_lexicon", "is", "not", "inp2", ".", "restrict_lexicon", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_failed_make_input_from_valid_json_string": [[339, 347], ["pytest.mark.parametrize", "test_inference.mock_translator", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "sockeye.inference.make_input_from_json_string", "isinstance", "json.dumps"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.mock_translator", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"text, text_key, factors, factors_key\"", ",", "[", "(", "\"a\"", ",", "\"blub\"", ",", "None", ",", "\"\"", ")", "]", ")", "\n", "def", "test_failed_make_input_from_valid_json_string", "(", "text", ",", "text_key", ",", "factors", ",", "factors_key", ")", ":", "\n", "    ", "sentence_id", "=", "1", "\n", "translator", "=", "mock_translator", "(", ")", "\n", "inp", "=", "sockeye", ".", "inference", ".", "make_input_from_json_string", "(", "sentence_id", ",", "\n", "json", ".", "dumps", "(", "{", "text_key", ":", "text", ",", "factors_key", ":", "factors", "}", ")", ",", "\n", "translator", ")", "\n", "assert", "isinstance", "(", "inp", ",", "sockeye", ".", "inference", ".", "BadTranslatorInput", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_make_input_from_valid_dict": [[349, 367], ["pytest.mark.parametrize", "test_inference.mock_translator", "list", "sockeye.inference.make_input_from_dict", "sockeye.inference.make_input_from_dict", "sockeye.inference.make_input_from_dict", "sockeye.inference.make_input_from_dict", "sockeye.inference.make_input_from_dict", "sockeye.inference.make_input_from_dict", "sockeye.inference.make_input_from_dict", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.mock_translator", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"text, factors\"", ",", "\n", "[", "(", "\"this is a test without factors\"", ",", "None", ")", ",", "\n", "(", "\"\"", ",", "None", ")", ",", "\n", "(", "\"test\"", ",", "[", "\"X\"", ",", "\"X\"", "]", ")", ",", "\n", "(", "\"a b c\"", ",", "[", "\"x y z\"", "]", ")", ",", "\n", "(", "\"a\"", ",", "[", "]", ")", "]", ")", "\n", "def", "test_make_input_from_valid_dict", "(", "text", ",", "factors", ")", ":", "\n", "    ", "sentence_id", "=", "1", "\n", "translator", "=", "mock_translator", "(", ")", "\n", "expected_tokens", "=", "list", "(", "sockeye", ".", "data_io", ".", "get_tokens", "(", "text", ")", ")", "\n", "inp", "=", "sockeye", ".", "inference", ".", "make_input_from_dict", "(", "sentence_id", ",", "{", "C", ".", "JSON_TEXT_KEY", ":", "text", ",", "\n", "C", ".", "JSON_FACTORS_KEY", ":", "factors", "}", ",", "translator", ")", "\n", "assert", "len", "(", "inp", ")", "==", "len", "(", "expected_tokens", ")", "\n", "assert", "inp", ".", "tokens", "==", "expected_tokens", "\n", "if", "factors", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "inp", ".", "factors", ")", "==", "len", "(", "factors", ")", "\n", "", "else", ":", "\n", "        ", "assert", "inp", ".", "factors", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_failed_make_input_from_valid_dict": [[369, 375], ["pytest.mark.parametrize", "test_inference.mock_translator", "sockeye.inference.make_input_from_dict", "sockeye.inference.make_input_from_dict", "sockeye.inference.make_input_from_dict", "sockeye.inference.make_input_from_dict", "sockeye.inference.make_input_from_dict", "sockeye.inference.make_input_from_dict", "sockeye.inference.make_input_from_dict", "isinstance"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.mock_translator", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"text, text_key, factors, factors_key\"", ",", "[", "(", "\"a\"", ",", "\"blub\"", ",", "None", ",", "\"\"", ")", "]", ")", "\n", "def", "test_failed_make_input_from_valid_dict", "(", "text", ",", "text_key", ",", "factors", ",", "factors_key", ")", ":", "\n", "    ", "sentence_id", "=", "1", "\n", "translator", "=", "mock_translator", "(", ")", "\n", "inp", "=", "sockeye", ".", "inference", ".", "make_input_from_dict", "(", "sentence_id", ",", "{", "text_key", ":", "text", ",", "factors_key", ":", "factors", "}", ",", "translator", ")", "\n", "assert", "isinstance", "(", "inp", ",", "sockeye", ".", "inference", ".", "BadTranslatorInput", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_make_input_from_multiple_strings": [[377, 390], ["pytest.mark.parametrize", "sockeye.inference.make_input_from_multiple_strings", "sockeye.inference.make_input_from_multiple_strings", "sockeye.inference.make_input_from_multiple_strings", "sockeye.inference.make_input_from_multiple_strings", "sockeye.inference.make_input_from_multiple_strings", "sockeye.inference.make_input_from_multiple_strings", "sockeye.inference.make_input_from_multiple_strings", "list", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "list", "len", "len", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens", "sockeye.data_io.get_tokens"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_multiple_strings", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_multiple_strings", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_multiple_strings", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_multiple_strings", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_multiple_strings", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_multiple_strings", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_multiple_strings", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"strings\"", ",", "\n", "[", "\n", "[", "\"a b c\"", "]", ",", "\n", "[", "\"a b c\"", ",", "\"f1 f2 f3\"", ",", "\"f3 f3 f3\"", "]", "\n", "]", ")", "\n", "def", "test_make_input_from_multiple_strings", "(", "strings", ")", ":", "\n", "    ", "inp", "=", "sockeye", ".", "inference", ".", "make_input_from_multiple_strings", "(", "1", ",", "strings", ")", "\n", "\n", "expected_tokens", "=", "list", "(", "sockeye", ".", "data_io", ".", "get_tokens", "(", "strings", "[", "0", "]", ")", ")", "\n", "expected_factors", "=", "[", "list", "(", "sockeye", ".", "data_io", ".", "get_tokens", "(", "f", ")", ")", "for", "f", "in", "strings", "[", "1", ":", "]", "]", "\n", "assert", "len", "(", "inp", ")", "==", "len", "(", "expected_tokens", ")", "\n", "assert", "inp", ".", "tokens", "==", "expected_tokens", "\n", "assert", "inp", ".", "factors", "==", "expected_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_get_best_word_indices_for_kth_hypotheses": [[392, 418], ["numpy.array", "zip", "numpy.concatenate", "numpy.concatenate", "sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses"], ["", "def", "test_get_best_word_indices_for_kth_hypotheses", "(", ")", ":", "\n", "# data", "\n", "    ", "all_hyp_indices", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "2", ",", "0", ",", "0", ",", "2", ",", "0", ",", "0", ",", "4", ",", "3", "]", ",", "\n", "[", "0", ",", "2", ",", "2", ",", "0", ",", "1", ",", "0", ",", "0", ",", "2", ",", "1", ",", "1", ",", "3", ",", "1", ",", "1", ",", "0", ",", "1", ",", "4", ",", "0", ",", "4", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "1", ",", "2", ",", "1", ",", "4", ",", "3", ",", "2", ",", "3", ",", "0", ",", "4", ",", "3", ",", "1", ",", "2", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "3", ",", "2", ",", "2", ",", "1", ",", "3", ",", "4", ",", "4", ",", "2", ",", "2", ",", "3", ",", "3", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "[", "0", ",", "2", ",", "4", ",", "1", ",", "4", ",", "2", ",", "3", ",", "4", ",", "4", ",", "2", ",", "0", ",", "3", ",", "4", ",", "4", ",", "4", ",", "3", ",", "3", ",", "2", "]", "]", ",", "dtype", "=", "'int32'", ")", "\n", "ks", "=", "[", "np", ".", "array", "(", "[", "0", "]", ")", ",", "np", ".", "array", "(", "[", "1", "]", ")", ",", "np", ".", "array", "(", "[", "2", "]", ")", ",", "np", ".", "array", "(", "[", "3", "]", ")", ",", "np", ".", "array", "(", "[", "4", "]", ")", "]", "\n", "expected_indices", "=", "[", "np", ".", "array", "(", "[", "[", "2", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "3", ",", "3", ",", "2", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "2", ",", "3", "]", "]", ",", "dtype", "=", "'int32'", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "1", ",", "2", ",", "2", ",", "3", ",", "4", ",", "4", ",", "4", ",", "3", ",", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "3", ",", "4", "]", "]", ",", "dtype", "=", "'int32'", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "2", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "4", ",", "2", ",", "3", ",", "3", ",", "3", ",", "4", ",", "0", "]", "]", ",", "dtype", "=", "'int32'", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "2", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "2", ",", "3", ",", "2", ",", "0", ",", "0", ",", "0", ",", "1", "]", "]", ",", "dtype", "=", "'int32'", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "2", ",", "1", ",", "0", ",", "1", ",", "1", ",", "2", ",", "3", ",", "2", ",", "2", ",", "4", ",", "3", ",", "4", ",", "4", ",", "4", ",", "4", ",", "1", ",", "2", "]", "]", ",", "dtype", "=", "'int32'", ")", "]", "\n", "\n", "# extract individually", "\n", "for", "k", ",", "expected_result", "in", "zip", "(", "ks", ",", "expected_indices", ")", ":", "\n", "        ", "result", "=", "sockeye", ".", "inference", ".", "Translator", ".", "_get_best_word_indices_for_kth_hypotheses", "(", "k", ",", "all_hyp_indices", ")", "\n", "assert", "result", ".", "shape", "==", "expected_result", ".", "shape", "\n", "assert", "(", "result", "==", "expected_result", ")", ".", "all", "(", ")", "\n", "\n", "# extract all at once", "\n", "", "ks", "=", "np", ".", "concatenate", "(", "ks", ",", "axis", "=", "0", ")", "\n", "expected_indices", "=", "np", ".", "concatenate", "(", "expected_indices", ",", "axis", "=", "0", ")", "\n", "result", "=", "sockeye", ".", "inference", ".", "Translator", ".", "_get_best_word_indices_for_kth_hypotheses", "(", "ks", ",", "all_hyp_indices", ")", "\n", "assert", "result", ".", "shape", "==", "expected_indices", ".", "shape", "\n", "assert", "(", "result", "==", "expected_indices", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_get_best_translations": [[420, 460], ["pytest.mark.parametrize", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "test_inference.mock_translator", "sockeye.beam_search.SearchResult", "sockeye.beam_search.SearchResult", "sockeye.beam_search.SearchResult", "sockeye.beam_search.SearchResult", "sockeye.beam_search.SearchResult", "sockeye.beam_search.SearchResult", "sockeye.beam_search.SearchResult", "sockeye.inference.Translator._get_best_translations", "sockeye.inference.Translator._get_best_translations", "sockeye.inference.Translator._get_best_translations", "sockeye.inference.Translator._get_best_translations", "sockeye.inference.Translator._get_best_translations", "sockeye.inference.Translator._get_best_translations", "sockeye.inference.Translator._get_best_translations", "zip", "sockeye.inference.Translator._assemble_translation", "sockeye.inference.Translator._assemble_translation", "sockeye.inference.Translator._assemble_translation", "sockeye.inference.Translator._assemble_translation", "sockeye.inference.Translator._assemble_translation", "sockeye.inference.Translator._assemble_translation", "sockeye.inference.Translator._assemble_translation", "zip", "numpy.array", "numpy.array", "itertools.repeat", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.mock_translator", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._assemble_translation", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._assemble_translation", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._assemble_translation", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._assemble_translation", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._assemble_translation", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._assemble_translation", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._assemble_translation"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"expected_best_ids, expected_best_indices\"", ",", "\n", "[", "(", "np", ".", "array", "(", "[", "0", ",", "2", "]", ",", "dtype", "=", "'int32'", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "3", ",", "3", ",", "3", "]", "]", ",", "dtype", "=", "'int32'", ")", ")", "\n", "]", ")", "\n", "def", "test_get_best_translations", "(", "expected_best_ids", ",", "expected_best_indices", ")", ":", "\n", "    ", "best_hyp_indices", "=", "pt", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "2", ",", "3", ",", "2", ",", "3", "]", ",", "\n", "[", "2", ",", "3", ",", "3", ",", "2", "]", "]", ",", "\n", "dtype", "=", "pt", ".", "int32", ")", "\n", "best_word_indices", "=", "pt", ".", "tensor", "(", "[", "[", "[", "3", ",", "3", ",", "0", "]", "]", ",", "\n", "[", "[", "4", ",", "4", ",", "3", "]", "]", ",", "\n", "[", "[", "3", ",", "3", ",", "0", "]", "]", ",", "\n", "[", "[", "4", ",", "5", ",", "3", "]", "]", "]", ",", "\n", "dtype", "=", "pt", ".", "int32", ")", "\n", "seq_scores", "=", "pt", ".", "tensor", "(", "[", "[", "3.8197377", "]", ",", "\n", "[", "5.081118", "]", ",", "\n", "[", "3.8068485", "]", ",", "\n", "[", "5.0746527", "]", "]", ",", "\n", "dtype", "=", "pt", ".", "float32", ")", "\n", "lengths", "=", "pt", ".", "tensor", "(", "[", "[", "3", "]", ",", "[", "2", "]", ",", "[", "3", "]", ",", "[", "2", "]", "]", ",", "dtype", "=", "pt", ".", "int32", ")", "\n", "\n", "translator", "=", "mock_translator", "(", "beam_size", "=", "2", ",", "batch_size", "=", "2", ")", "\n", "\n", "expected_result", "=", "[", "sockeye", ".", "inference", ".", "Translator", ".", "_assemble_translation", "(", "*", "x", ")", "for", "x", "in", "zip", "(", "\n", "best_word_indices", "[", "expected_best_indices", ",", ":", ",", "np", ".", "arange", "(", "expected_best_indices", ".", "shape", "[", "1", "]", ")", "]", ",", "\n", "lengths", "[", "expected_best_ids", "]", ",", "\n", "seq_scores", "[", "expected_best_ids", "]", ",", "\n", "itertools", ".", "repeat", "(", "None", ")", ")", "]", "\n", "\n", "search_result", "=", "sockeye", ".", "beam_search", ".", "SearchResult", "(", "best_hyp_indices", "=", "best_hyp_indices", ",", "\n", "best_word_indices", "=", "best_word_indices", ",", "\n", "accumulated_scores", "=", "seq_scores", ",", "\n", "lengths", "=", "lengths", ",", "\n", "estimated_reference_lengths", "=", "None", ")", "\n", "actual_result", "=", "sockeye", ".", "inference", ".", "Translator", ".", "_get_best_translations", "(", "translator", ",", "search_result", ")", "\n", "\n", "for", "expected_translation", ",", "actual_translation", "in", "zip", "(", "expected_result", ",", "actual_result", ")", ":", "\n", "        ", "assert", "expected_translation", ".", "target_ids", "==", "actual_translation", ".", "target_ids", "\n", "assert", "expected_translation", ".", "scores", "==", "actual_translation", ".", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_inference.test_unshift_target_factors": [[462, 472], ["pytest.mark.parametrize", "sockeye.inference._unshift_target_factors", "sockeye.inference._unshift_target_factors", "sockeye.inference._unshift_target_factors", "sockeye.inference._unshift_target_factors", "sockeye.inference._unshift_target_factors", "sockeye.inference._unshift_target_factors", "sockeye.inference._unshift_target_factors", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._unshift_target_factors", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._unshift_target_factors", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._unshift_target_factors", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._unshift_target_factors", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._unshift_target_factors", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._unshift_target_factors", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._unshift_target_factors"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"sequence, fill_with, expected_sequence\"", ",", "\n", "[", "\n", "(", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", ",", "C", ".", "EOS_ID", ",", "[", "1", ",", "2", ",", "3", "]", ")", ",", "\n", "(", "np", ".", "array", "(", "[", "[", "1", "]", ",", "[", "2", "]", ",", "[", "3", "]", "]", ")", ",", "C", ".", "EOS_ID", ",", "[", "[", "1", "]", ",", "[", "2", "]", ",", "[", "3", "]", "]", ")", ",", "\n", "(", "np", ".", "array", "(", "[", "[", "1", ",", "0", "]", ",", "[", "2", ",", "1", "]", ",", "[", "3", ",", "2", "]", "]", ")", ",", "C", ".", "EOS_ID", ",", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "C", ".", "EOS_ID", ")", "]", ")", ",", "\n", "(", "np", ".", "array", "(", "[", "[", "1", ",", "0", "]", ",", "[", "2", ",", "1", "]", ",", "[", "3", ",", "2", "]", "]", ")", ",", "C", ".", "PAD_ID", ",", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "C", ".", "PAD_ID", ")", "]", ")", ",", "\n", "]", ")", "\n", "def", "test_unshift_target_factors", "(", "sequence", ",", "fill_with", ",", "expected_sequence", ")", ":", "\n", "    ", "sequence", "=", "sockeye", ".", "inference", ".", "_unshift_target_factors", "(", "sequence", ",", "fill_last_with", "=", "fill_with", ")", "\n", "assert", "sequence", "==", "expected_sequence", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_lr_scheduler.test_inv_sqrt_decay_scheduler": [[21, 41], ["pytest.mark.parametrize", "sockeye.lr_scheduler.get_lr_scheduler", "numpy.isclose().all", "min", "alternate_implementation", "lr_scheduler.get_lr_scheduler.", "range", "range", "numpy.isclose"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.get_lr_scheduler"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "'learning_rate_warmup,learning_rate_t_scale'", ",", "\n", "[", "(", "1", ",", "1", ")", ",", "(", "3", ",", "2", ")", ",", "(", "10", ",", ".5", ")", ",", "(", "20", ",", "1", ")", "]", ")", "\n", "def", "test_inv_sqrt_decay_scheduler", "(", "learning_rate_warmup", ",", "learning_rate_t_scale", ")", ":", "\n", "    ", "scheduler", "=", "lr_scheduler", ".", "get_lr_scheduler", "(", "'inv-sqrt-decay'", ",", "\n", "base_learning_rate", "=", "1", ",", "\n", "learning_rate_t_scale", "=", "learning_rate_t_scale", ",", "\n", "learning_rate_reduce_factor", "=", "0", ",", "\n", "learning_rate_reduce_num_not_improved", "=", "0", ",", "\n", "learning_rate_warmup", "=", "learning_rate_warmup", ",", "\n", "max_updates", "=", "10", ")", "\n", "\n", "# Reference formula from Transformer paper, plus time scaling", "\n", "alternate_implementation", "=", "lambda", "t", ":", "min", "(", "(", "t", "*", "learning_rate_t_scale", ")", "**", "-", "0.5", ",", "\n", "(", "t", "*", "learning_rate_t_scale", ")", "*", "learning_rate_warmup", "**", "-", "1.5", ")", "\n", "\n", "expected_schedule", "=", "[", "alternate_implementation", "(", "t", ")", "for", "t", "in", "range", "(", "1", ",", "11", ")", "]", "\n", "\n", "actual_schedule", "=", "[", "scheduler", "(", "t", ")", "for", "t", "in", "range", "(", "1", ",", "11", ")", "]", "\n", "\n", "assert", "np", ".", "isclose", "(", "expected_schedule", ",", "actual_schedule", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_lr_scheduler.test_linear_decay_scheduler": [[43, 67], ["sockeye.lr_scheduler.get_lr_scheduler", "numpy.isclose().all", "lr_scheduler.get_lr_scheduler.", "range", "numpy.isclose"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.get_lr_scheduler"], ["", "def", "test_linear_decay_scheduler", "(", ")", ":", "\n", "    ", "scheduler", "=", "lr_scheduler", ".", "get_lr_scheduler", "(", "'linear-decay'", ",", "\n", "base_learning_rate", "=", "1", ",", "\n", "learning_rate_t_scale", "=", "1", ",", "\n", "learning_rate_reduce_factor", "=", "0", ",", "\n", "learning_rate_reduce_num_not_improved", "=", "0", ",", "\n", "learning_rate_warmup", "=", "3", ",", "\n", "max_updates", "=", "10", ")", "\n", "\n", "# Warmup term * decay term", "\n", "expected_schedule", "=", "[", "\n", "(", "1", "/", "3", ")", "*", "(", "9", "/", "10", ")", ",", "\n", "(", "2", "/", "3", ")", "*", "(", "8", "/", "10", ")", ",", "\n", "(", "3", "/", "3", ")", "*", "(", "7", "/", "10", ")", ",", "\n", "(", "3", "/", "3", ")", "*", "(", "6", "/", "10", ")", ",", "\n", "(", "3", "/", "3", ")", "*", "(", "5", "/", "10", ")", ",", "\n", "(", "3", "/", "3", ")", "*", "(", "4", "/", "10", ")", ",", "\n", "(", "3", "/", "3", ")", "*", "(", "3", "/", "10", ")", ",", "\n", "(", "3", "/", "3", ")", "*", "(", "2", "/", "10", ")", ",", "\n", "(", "3", "/", "3", ")", "*", "(", "1", "/", "10", ")", ",", "\n", "(", "3", "/", "3", ")", "*", "(", "0", "/", "10", ")", ",", "\n", "]", "\n", "actual_schedule", "=", "[", "scheduler", "(", "t", ")", "for", "t", "in", "range", "(", "1", ",", "11", ")", "]", "\n", "assert", "np", ".", "isclose", "(", "expected_schedule", ",", "actual_schedule", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_lr_scheduler.test_get_lr_scheduler": [[69, 86], ["pytest.mark.parametrize", "sockeye.lr_scheduler.get_lr_scheduler", "isinstance"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.get_lr_scheduler"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'scheduler_type, expected_instance'", ",", "\n", "[", "(", "'none'", ",", "None", ")", ",", "\n", "(", "'inv-sqrt-decay'", ",", "lr_scheduler", ".", "LearningRateSchedulerInvSqrtDecay", ")", ",", "\n", "(", "'linear-decay'", ",", "lr_scheduler", ".", "LearningRateSchedulerLinearDecay", ")", ",", "\n", "(", "'plateau-reduce'", ",", "lr_scheduler", ".", "LearningRateSchedulerPlateauReduce", ")", "]", ")", "\n", "def", "test_get_lr_scheduler", "(", "scheduler_type", ",", "expected_instance", ")", ":", "\n", "    ", "scheduler", "=", "lr_scheduler", ".", "get_lr_scheduler", "(", "scheduler_type", ",", "\n", "base_learning_rate", "=", "1", ",", "\n", "learning_rate_t_scale", "=", "1", ",", "\n", "learning_rate_reduce_factor", "=", "0.5", ",", "\n", "learning_rate_reduce_num_not_improved", "=", "16", ",", "\n", "learning_rate_warmup", "=", "1000", ",", "\n", "max_updates", "=", "10000", ")", "\n", "if", "expected_instance", "is", "None", ":", "\n", "        ", "assert", "scheduler", "is", "None", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "scheduler", ",", "expected_instance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_lr_scheduler.test_get_lr_scheduler_no_reduce": [[88, 95], ["sockeye.lr_scheduler.get_lr_scheduler"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.get_lr_scheduler"], ["", "", "def", "test_get_lr_scheduler_no_reduce", "(", ")", ":", "\n", "    ", "scheduler", "=", "lr_scheduler", ".", "get_lr_scheduler", "(", "'plateau-reduce'", ",", "\n", "base_learning_rate", "=", "1", ",", "\n", "learning_rate_t_scale", "=", "1", ",", "\n", "learning_rate_reduce_factor", "=", "1.0", ",", "\n", "learning_rate_reduce_num_not_improved", "=", "16", ")", "\n", "assert", "scheduler", "is", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_scoring.test_batch_scorer": [[20, 35], ["torch.ones", "torch.ones().to", "torch.ones", "torch.randint().to", "sockeye.scoring.BatchScorer", "sockeye.scoring.BatchScorer.", "torch.ones", "torch.randint", "sockeye.beam_search.CandidateScorer"], "function", ["None"], ["def", "test_batch_scorer", "(", ")", ":", "\n", "# TODO: make this a useful test", "\n", "    ", "batch", "=", "2", "\n", "seq", "=", "4", "\n", "nh", "=", "6", "\n", "logits", "=", "pt", ".", "ones", "(", "batch", ",", "seq", ",", "nh", ")", "\n", "label", "=", "pt", ".", "ones", "(", "batch", ",", "seq", ")", ".", "to", "(", "pt", ".", "long", ")", "\n", "length_ratio", "=", "pt", ".", "ones", "(", "batch", ",", ")", "\n", "source_length", "=", "pt", ".", "randint", "(", "0", ",", "seq", ",", "(", "batch", ",", ")", ")", ".", "to", "(", "pt", ".", "float32", ")", "\n", "target_length", "=", "source_length", "\n", "b", "=", "sockeye", ".", "scoring", ".", "BatchScorer", "(", "scorer", "=", "CandidateScorer", "(", "1.0", ",", "0.0", ",", "0.0", ")", ",", "\n", "score_type", "=", "'neglogprob'", ",", "\n", "constant_length_ratio", "=", "None", ")", "\n", "scores", "=", "b", "(", "logits", ",", "label", ",", "length_ratio", ",", "source_length", ",", "target_length", ")", "\n", "assert", "scores", ".", "shape", "==", "(", "batch", ",", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_layers.test_lhuc": [[21, 35], ["torch.rand", "sockeye.layers.LHUC", "sockeye.layers.LHUC", "torch.nn.init.zeros_", "sockeye.layers.LHUC.", "torch.testing.assert_allclose", "sockeye.layers.LHUC", "sockeye.layers.LHUC", "torch.nn.init.constant_", "sockeye.layers.LHUC.", "torch.testing.assert_allclose"], "function", ["None"], ["def", "test_lhuc", "(", ")", ":", "\n", "    ", "num_hidden", "=", "50", "\n", "batch_size", "=", "10", "\n", "inp", "=", "pt", ".", "rand", "(", "batch_size", ",", "num_hidden", ")", "\n", "\n", "lhuc", "=", "sockeye", ".", "layers", ".", "LHUC", "(", "num_hidden", "=", "num_hidden", ")", "\n", "pt", ".", "nn", ".", "init", ".", "zeros_", "(", "lhuc", ".", "weight", ")", "\n", "out", "=", "lhuc", "(", "inp", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "inp", ",", "out", ")", "\n", "\n", "lhuc", "=", "sockeye", ".", "layers", ".", "LHUC", "(", "num_hidden", "=", "num_hidden", ")", "\n", "pt", ".", "nn", ".", "init", ".", "constant_", "(", "lhuc", ".", "weight", ",", "20.0", ")", "\n", "out", "=", "lhuc", "(", "inp", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "2", "*", "inp", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_layers.test_positional_embeddings": [[37, 77], ["torch.zeros", "sockeye.layers.get_positional_embeddings", "sockeye.layers.get_positional_embeddings", "sockeye.layers.PositionalEmbeddings", "sockeye.layers.PositionalEmbeddings", "sockeye.layers.PositionalEmbeddings.", "torch.testing.assert_allclose", "torch.testing.assert_allclose", "torch.tensor().unsqueeze", "sockeye.layers.PositionalEmbeddings.", "torch.testing.assert_allclose", "torch.testing.assert_allclose", "torch.testing.assert_allclose", "torch.testing.assert_allclose", "torch.testing.assert_allclose", "torch.testing.assert_allclose", "sockeye.layers.PositionalEmbeddings", "sockeye.layers.PositionalEmbeddings", "torch.nn.init.constant_", "torch.ones", "sockeye.layers.PositionalEmbeddings.", "torch.testing.assert_allclose", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.get_positional_embeddings", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.get_positional_embeddings"], ["", "def", "test_positional_embeddings", "(", ")", ":", "\n", "    ", "num_embed", "=", "32", "\n", "max_seq_len", "=", "10", "\n", "scale_up_input", "=", "False", "\n", "scale_down_positions", "=", "False", "\n", "data_len", "=", "5", "\n", "data", "=", "pt", ".", "zeros", "(", "2", ",", "data_len", ",", "num_embed", ")", "\n", "\n", "# fixed embeddings", "\n", "expected_fixed_embedding", "=", "sockeye", ".", "layers", ".", "get_positional_embeddings", "(", "data_len", ",", "num_embed", ")", "\n", "b", "=", "sockeye", ".", "layers", ".", "PositionalEmbeddings", "(", "weight_type", "=", "'fixed'", ",", "\n", "num_embed", "=", "num_embed", ",", "\n", "max_seq_len", "=", "max_seq_len", ",", "\n", "scale_up_input", "=", "scale_up_input", ",", "\n", "scale_down_positions", "=", "scale_down_positions", ")", "\n", "# no steps", "\n", "out", "=", "b", "(", "data", ",", "None", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "out", "[", "0", "]", ",", "expected_fixed_embedding", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "out", "[", "1", "]", ",", "expected_fixed_embedding", ")", "\n", "\n", "# steps", "\n", "steps", "=", "pt", ".", "tensor", "(", "[", "2", ",", "3", ",", "1", ",", "1", ",", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "out", "=", "b", "(", "data", ",", "steps", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "out", "[", "0", ",", "0", "]", ",", "expected_fixed_embedding", "[", "2", "]", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "out", "[", "1", ",", "0", "]", ",", "expected_fixed_embedding", "[", "2", "]", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "out", "[", "0", ",", "1", "]", ",", "expected_fixed_embedding", "[", "3", "]", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "out", "[", "1", ",", "1", "]", ",", "expected_fixed_embedding", "[", "3", "]", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "out", "[", "0", ",", "2", "]", ",", "expected_fixed_embedding", "[", "1", "]", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "out", "[", "1", ",", "2", "]", ",", "expected_fixed_embedding", "[", "1", "]", ")", "\n", "\n", "# learned embeddings", "\n", "b", "=", "sockeye", ".", "layers", ".", "PositionalEmbeddings", "(", "weight_type", "=", "'learned'", ",", "\n", "num_embed", "=", "num_embed", ",", "\n", "max_seq_len", "=", "max_seq_len", ",", "\n", "scale_up_input", "=", "scale_up_input", ",", "\n", "scale_down_positions", "=", "scale_down_positions", ")", "\n", "pt", ".", "nn", ".", "init", ".", "constant_", "(", "b", ".", "weight", ",", "val", "=", "1.0", ")", "\n", "expected_learned_embeddings", "=", "pt", ".", "ones", "(", "data_len", ",", "num_embed", ")", "\n", "out", "=", "b", "(", "data", ",", "None", ")", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "out", "[", "0", "]", ",", "expected_learned_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_layers.test_output_layer": [[79, 96], ["torch.ones", "torch.tensor", "sockeye.layers.OutputLayer", "sockeye.layers.OutputLayer", "sockeye.layers.OutputLayer.", "b.index_select", "sockeye.layers.OutputLayer.", "torch.testing.assert_allclose", "len"], "function", ["None"], ["", "def", "test_output_layer", "(", ")", ":", "\n", "    ", "num_hidden", "=", "32", "\n", "vocab_size", "=", "64", "\n", "data", "=", "pt", ".", "ones", "(", "2", ",", "10", ",", "num_hidden", ")", "\n", "vocab_slice_ids", "=", "pt", ".", "tensor", "(", "[", "4", ",", "7", ",", "23", "]", ")", "\n", "\n", "b", "=", "sockeye", ".", "layers", ".", "OutputLayer", "(", "num_hidden", ",", "vocab_size", ")", "\n", "assert", "b", ".", "weight", ".", "data", ".", "shape", "==", "(", "vocab_size", ",", "num_hidden", ")", "\n", "\n", "output", "=", "b", "(", "data", ",", "None", ")", "\n", "assert", "output", ".", "shape", "==", "(", "2", ",", "10", ",", "vocab_size", ")", "\n", "reduced_output", "=", "output", ".", "index_select", "(", "-", "1", ",", "vocab_slice_ids", ")", "\n", "\n", "output_restricted", "=", "b", "(", "data", ",", "vocab_slice_ids", ")", "\n", "assert", "output_restricted", ".", "shape", "==", "(", "2", ",", "10", ",", "len", "(", "vocab_slice_ids", ")", ")", "\n", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "output_restricted", ",", "reduced_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_layers.test_interleaved_multihead_attention": [[98, 126], ["pytest.mark.parametrize", "torch.rand", "torch.rand", "sockeye.layers.MultiHeadAttention", "sockeye.layers.MultiHeadAttention", "sockeye.layers.MultiHeadAttention.train", "sockeye.layers.MultiHeadAttention.", "sockeye.layers.MultiHeadAttention.eval", "sockeye.layers.MultiHeadAttention.", "torch.allclose", "torch.randint", "sockeye.layers.prepare_source_length_mask", "sockeye.layers.prepare_source_length_mask", "mask.repeat.repeat", "sockeye.layers.MultiHeadAttention.train", "sockeye.layers.MultiHeadAttention.", "sockeye.layers.MultiHeadAttention.eval", "sockeye.layers.MultiHeadAttention.", "torch.allclose"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.train", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.prepare_source_length_mask", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.prepare_source_length_mask", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.train"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'qlen, kvlen, batch_size, hidden, heads'", ",", "\n", "[", "(", "10", ",", "9", ",", "1", ",", "12", ",", "4", ")", ",", "(", "1", ",", "1", ",", "2", ",", "4", ",", "1", ")", ",", "(", "3", ",", "32", ",", "15", ",", "64", ",", "8", ")", ",", "\n", "(", "10", ",", "32", ",", "15", ",", "32", ",", "8", ")", ",", "(", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", "]", ")", "\n", "def", "test_interleaved_multihead_attention", "(", "qlen", ",", "kvlen", ",", "batch_size", ",", "hidden", ",", "heads", ")", ":", "\n", "    ", "queries_pt", "=", "pt", ".", "rand", "(", "(", "qlen", ",", "batch_size", ",", "hidden", ")", ")", "\n", "memory_pt", "=", "pt", ".", "rand", "(", "(", "kvlen", ",", "batch_size", ",", "hidden", ")", ")", "\n", "\n", "# test without mask", "\n", "mha", "=", "sockeye", ".", "layers", ".", "MultiHeadAttention", "(", "hidden", ",", "heads", ",", "hidden", ",", "dropout", "=", "0.0", ",", "depth_key_value", "=", "hidden", ")", "\n", "mha", ".", "train", "(", ")", "\n", "assert", "not", "mha", ".", "kv_interleaved", "\n", "r_train", "=", "mha", "(", "queries_pt", ",", "memory_pt", ",", "mask", "=", "None", ",", "projected_memory_kv", "=", "None", ")", "\n", "mha", ".", "eval", "(", ")", "\n", "assert", "mha", ".", "kv_interleaved", "\n", "r_test", "=", "mha", "(", "queries_pt", ",", "memory_pt", ",", "mask", "=", "None", ",", "projected_memory_kv", "=", "None", ")", "\n", "assert", "pt", ".", "allclose", "(", "r_train", ",", "r_test", ",", "atol", "=", "1e-06", ")", "\n", "\n", "# test with mask", "\n", "valid_length", "=", "pt", ".", "randint", "(", "1", ",", "kvlen", "+", "1", ",", "(", "batch_size", ",", ")", ")", "\n", "mask", "=", "sockeye", ".", "layers", ".", "prepare_source_length_mask", "(", "valid_length", ",", "heads", ",", "kvlen", ")", "\n", "mask", "=", "mask", ".", "repeat", "(", "1", ",", "qlen", ",", "1", ")", "# Shape: (batch *h heads, qlen, kvlen)", "\n", "mha", ".", "train", "(", ")", "\n", "assert", "not", "mha", ".", "kv_interleaved", "\n", "r_train", "=", "mha", "(", "queries_pt", ",", "memory_pt", ",", "mask", "=", "mask", ",", "projected_memory_kv", "=", "None", ")", "\n", "mha", ".", "eval", "(", ")", "\n", "assert", "mha", ".", "kv_interleaved", "\n", "r_test", "=", "mha", "(", "queries_pt", ",", "memory_pt", ",", "mask", "=", "mask", ",", "projected_memory_kv", "=", "None", ")", "\n", "assert", "pt", ".", "allclose", "(", "r_train", ",", "r_test", ",", "atol", "=", "1e-06", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_layers.test_interleaved_multihead_self_attention": [[128, 169], ["pytest.mark.parametrize", "torch.rand", "sockeye.layers.MultiHeadSelfAttention", "sockeye.layers.MultiHeadSelfAttention", "sockeye.layers.MultiHeadSelfAttention.train", "sockeye.layers.MultiHeadSelfAttention.", "sockeye.layers.MultiHeadSelfAttention.eval", "sockeye.layers.MultiHeadSelfAttention.", "torch.allclose", "sockeye.layers.MultiHeadSelfAttention.train", "sockeye.layers.MultiHeadSelfAttention.", "sockeye.layers.MultiHeadSelfAttention.eval", "sockeye.layers.MultiHeadSelfAttention.", "torch.allclose", "sockeye.transformer.AutoRegressiveMask", "sockeye.transformer.AutoRegressiveMask", "pt.rand.transpose", "torch.randint", "sockeye.layers.prepare_source_length_mask", "sockeye.layers.prepare_source_length_mask", "mask.repeat.repeat", "sockeye.layers.MultiHeadSelfAttention.train", "sockeye.layers.MultiHeadSelfAttention.", "sockeye.layers.MultiHeadSelfAttention.eval", "sockeye.layers.MultiHeadSelfAttention.", "torch.allclose"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.train", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.train", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.prepare_source_length_mask", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.prepare_source_length_mask", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.train"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'seq_len, batch_size, hidden, heads, side'", ",", "\n", "[", "(", "10", ",", "1", ",", "12", ",", "4", ",", "'decoder'", ")", ",", "(", "1", ",", "2", ",", "4", ",", "1", ",", "'decoder'", ")", ",", "(", "3", ",", "15", ",", "64", ",", "8", ",", "'decoder'", ")", ",", "\n", "(", "10", ",", "1", ",", "12", ",", "4", ",", "'encoder'", ")", ",", "(", "1", ",", "2", ",", "4", ",", "1", ",", "'encoder'", ")", ",", "(", "3", ",", "15", ",", "64", ",", "8", ",", "'encoder'", ")", ",", "\n", "(", "96", ",", "32", ",", "32", ",", "8", ",", "'encoder'", ")", ",", "(", "96", ",", "32", ",", "32", ",", "8", ",", "'decoder'", ")", "]", ")", "\n", "def", "test_interleaved_multihead_self_attention", "(", "seq_len", ",", "batch_size", ",", "hidden", ",", "heads", ",", "side", ")", ":", "\n", "    ", "inputs", "=", "pt", ".", "rand", "(", "(", "seq_len", ",", "batch_size", ",", "hidden", ")", ")", "\n", "\n", "# test without attention masking", "\n", "mha", "=", "sockeye", ".", "layers", ".", "MultiHeadSelfAttention", "(", "hidden", ",", "heads", ",", "hidden", ",", "dropout", "=", "0.0", ")", "\n", "mha", ".", "train", "(", ")", "\n", "assert", "not", "mha", ".", "kv_interleaved", "\n", "r_train", ",", "_", "=", "mha", "(", "inputs", ",", "previous_states", "=", "None", ",", "mask", "=", "None", ")", "\n", "mha", ".", "eval", "(", ")", "\n", "assert", "mha", ".", "kv_interleaved", "\n", "r_test", ",", "_", "=", "mha", "(", "inputs", ",", "previous_states", "=", "None", ",", "mask", "=", "None", ")", "\n", "assert", "pt", ".", "allclose", "(", "r_train", ",", "r_test", ",", "atol", "=", "1e-06", ")", "\n", "\n", "# test with two types of attention masks (autoregressive, and valid_length based)", "\n", "if", "side", "==", "'decoder'", ":", "\n", "# autoregressive mask. Shape: (len, len)", "\n", "        ", "mask", "=", "sockeye", ".", "transformer", ".", "AutoRegressiveMask", "(", ")", "(", "inputs", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "mha", ".", "train", "(", ")", "\n", "assert", "not", "mha", ".", "kv_interleaved", "\n", "r_train", ",", "_", "=", "mha", "(", "inputs", ",", "previous_states", "=", "None", ",", "mask", "=", "mask", ")", "\n", "mha", ".", "eval", "(", ")", "\n", "assert", "mha", ".", "kv_interleaved", "\n", "r_test", ",", "_", "=", "mha", "(", "inputs", ",", "previous_states", "=", "None", ",", "mask", "=", "mask", ")", "\n", "assert", "pt", ".", "allclose", "(", "r_train", ",", "r_test", ",", "atol", "=", "1e-06", ")", "\n", "", "elif", "side", "==", "'encoder'", ":", "\n", "        ", "valid_length", "=", "pt", ".", "randint", "(", "1", ",", "seq_len", "+", "1", ",", "(", "batch_size", ",", ")", ")", "\n", "# source attention mask. Shape: (batch * heads, 1, seq_len)", "\n", "mask", "=", "sockeye", ".", "layers", ".", "prepare_source_length_mask", "(", "valid_length", ",", "heads", ",", "seq_len", ")", "\n", "mask", "=", "mask", ".", "repeat", "(", "1", ",", "seq_len", ",", "1", ")", "# Shape: (batch * heads, seq_len, seq_len)", "\n", "mha", ".", "train", "(", ")", "\n", "assert", "not", "mha", ".", "kv_interleaved", "\n", "r_train", ",", "_", "=", "mha", "(", "inputs", ",", "previous_states", "=", "None", ",", "mask", "=", "mask", ")", "\n", "mha", ".", "eval", "(", ")", "\n", "assert", "mha", ".", "kv_interleaved", "\n", "r_test", ",", "_", "=", "mha", "(", "inputs", ",", "previous_states", "=", "None", ",", "\n", "mask", "=", "mask", ")", "# Note: can also handle the mask repated on the qlen axis", "\n", "assert", "pt", ".", "allclose", "(", "r_train", ",", "r_test", ",", "atol", "=", "1e-06", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_chrf.test_chrf": [[41, 45], ["pytest.mark.parametrize", "sacrebleu.corpus_chrf", "abs"], "function", ["None"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"hypotheses, references, expected_score\"", ",", "test_cases", ")", "\n", "def", "test_chrf", "(", "hypotheses", ",", "references", ",", "expected_score", ")", ":", "\n", "    ", "score", "=", "sacrebleu", ".", "corpus_chrf", "(", "hypotheses", ",", "[", "references", "]", ",", "6", ",", "3", ")", ".", "score", "\n", "assert", "abs", "(", "score", "-", "expected_score", ")", "<", "EPSILON", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_chrf.test_chrf_keep_whitespace": [[47, 51], ["pytest.mark.parametrize", "sacrebleu.corpus_chrf", "abs"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"hypotheses, references, expected_score\"", ",", "test_cases_keep_whitespace", ")", "\n", "def", "test_chrf_keep_whitespace", "(", "hypotheses", ",", "references", ",", "expected_score", ")", ":", "\n", "    ", "score", "=", "sacrebleu", ".", "corpus_chrf", "(", "hypotheses", ",", "[", "references", "]", ",", "6", ",", "3", ",", "remove_whitespace", "=", "False", ")", ".", "score", "\n", "assert", "abs", "(", "score", "-", "expected_score", ")", "<", "EPSILON", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_transformer.test_transformer_feed_forward": [[21, 31], ["pytest.mark.parametrize", "sockeye.transformer.TransformerFeedForward", "sockeye.transformer.TransformerFeedForward", "torch.ones", "sockeye.transformer.TransformerFeedForward."], "function", ["None"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "'use_glu'", ",", "[", "(", "False", ")", ",", "(", "True", ")", "]", ")", "\n", "def", "test_transformer_feed_forward", "(", "use_glu", ")", ":", "\n", "    ", "block", "=", "sockeye", ".", "transformer", ".", "TransformerFeedForward", "(", "num_hidden", "=", "2", ",", "\n", "num_model", "=", "2", ",", "\n", "act_type", "=", "C", ".", "RELU", ",", "\n", "dropout", "=", "0.1", ",", "\n", "use_glu", "=", "use_glu", ")", "\n", "\n", "data", "=", "pt", ".", "ones", "(", "1", ",", "10", ",", "2", ")", "\n", "block", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_transformer.test_pt_autoregressive_mask": [[33, 41], ["pytest.mark.parametrize", "torch.zeros", "sockeye.transformer.AutoRegressiveMask", "sockeye.transformer.AutoRegressiveMask", "sockeye.transformer.AutoRegressiveMask.detach", "b_pt().detach.size", "sockeye.transformer.AutoRegressiveMask."], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'length'", ",", "[", "1", ",", "10", ",", "100", "]", ")", "\n", "def", "test_pt_autoregressive_mask", "(", "length", ")", ":", "\n", "    ", "x_pt", "=", "pt", ".", "zeros", "(", "2", ",", "length", ",", "32", ")", "\n", "b_pt", "=", "sockeye", ".", "transformer", ".", "AutoRegressiveMask", "(", ")", "\n", "result_pt", "=", "b_pt", "(", "x_pt", ")", ".", "detach", "(", ")", "\n", "\n", "assert", "result_pt", ".", "dtype", "==", "pt", ".", "bool", "\n", "assert", "result_pt", ".", "size", "(", ")", "==", "(", "length", ",", "length", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_define_buckets": [[40, 44], ["pytest.mark.parametrize", "sockeye.data_io.define_buckets"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_buckets"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"max_seq_len, step, expected_buckets\"", ",", "define_bucket_tests", ")", "\n", "def", "test_define_buckets", "(", "max_seq_len", ",", "step", ",", "expected_buckets", ")", ":", "\n", "    ", "buckets", "=", "data_io", ".", "define_buckets", "(", "max_seq_len", ",", "step", "=", "step", ")", "\n", "assert", "buckets", "==", "expected_buckets", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_define_parallel_buckets": [[67, 74], ["pytest.mark.parametrize", "sockeye.data_io.define_parallel_buckets"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_parallel_buckets"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"max_seq_len_source, max_seq_len_target, bucket_width, bucket_scaling, length_ratio,\"", "\n", "\"expected_buckets\"", ",", "define_parallel_bucket_tests", ")", "\n", "def", "test_define_parallel_buckets", "(", "max_seq_len_source", ",", "max_seq_len_target", ",", "bucket_width", ",", "bucket_scaling", ",", "length_ratio", ",", "\n", "expected_buckets", ")", ":", "\n", "    ", "buckets", "=", "data_io", ".", "define_parallel_buckets", "(", "max_seq_len_source", ",", "max_seq_len_target", ",", "bucket_width", "=", "bucket_width", ",", "\n", "bucket_scaling", "=", "bucket_scaling", ",", "length_ratio", "=", "length_ratio", ")", "\n", "assert", "buckets", "==", "expected_buckets", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_get_bucket": [[85, 90], ["pytest.mark.parametrize", "sockeye.data_io.get_bucket"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_bucket"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"buckets, length, expected_bucket\"", ",", "\n", "get_bucket_tests", ")", "\n", "def", "test_get_bucket", "(", "buckets", ",", "length", ",", "expected_bucket", ")", ":", "\n", "    ", "bucket", "=", "data_io", ".", "get_bucket", "(", "length", ",", "buckets", ")", "\n", "assert", "bucket", "==", "expected_bucket", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_tokens2ids": [[96, 100], ["pytest.mark.parametrize", "sockeye.data_io.tokens2ids"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.tokens2ids"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"tokens, vocab, expected_ids\"", ",", "tokens2ids_tests", ")", "\n", "def", "test_tokens2ids", "(", "tokens", ",", "vocab", ",", "expected_ids", ")", ":", "\n", "    ", "ids", "=", "data_io", ".", "tokens2ids", "(", "tokens", ",", "vocab", ")", "\n", "assert", "ids", "==", "expected_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_strids2ids": [[102, 106], ["pytest.mark.parametrize", "sockeye.data_io.strids2ids"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.strids2ids"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"tokens, expected_ids\"", ",", "[", "(", "[", "\"1\"", ",", "\"2\"", ",", "\"3\"", ",", "\"0\"", "]", ",", "[", "1", ",", "2", ",", "3", ",", "0", "]", ")", ",", "(", "[", "]", ",", "[", "]", ")", "]", ")", "\n", "def", "test_strids2ids", "(", "tokens", ",", "expected_ids", ")", ":", "\n", "    ", "ids", "=", "data_io", ".", "strids2ids", "(", "tokens", ")", "\n", "assert", "ids", "==", "expected_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_sequence_reader": [[114, 143], ["pytest.mark.parametrize", "tempfile.TemporaryDirectory", "os.path.join", "sockeye.data_io.SequenceReader", "open", "sockeye.vocab.build_vocab", "len", "len", "print", "pytest.raises", "sockeye.data_io.SequenceReader", "str", "sockeye.data_io.strids2ids", "sockeye.data_io.tokens2ids", "sockeye.utils.get_tokens", "sockeye.utils.get_tokens"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.build_vocab", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.strids2ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.tokens2ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"sequences, use_vocab, add_bos, add_eos\"", ",", "sequence_reader_tests", ")", "\n", "def", "test_sequence_reader", "(", "sequences", ",", "use_vocab", ",", "add_bos", ",", "add_eos", ")", ":", "\n", "    ", "with", "TemporaryDirectory", "(", ")", "as", "work_dir", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "'input'", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "sequence", "in", "sequences", ":", "\n", "                ", "print", "(", "sequence", ",", "file", "=", "f", ")", "\n", "\n", "", "", "vocabulary", "=", "vocab", ".", "build_vocab", "(", "sequences", ")", "if", "use_vocab", "else", "None", "\n", "\n", "reader", "=", "data_io", ".", "SequenceReader", "(", "path", ",", "vocabulary", "=", "vocabulary", ",", "add_bos", "=", "add_bos", ",", "add_eos", "=", "add_eos", ")", "\n", "\n", "read_sequences", "=", "[", "s", "for", "s", "in", "reader", "]", "\n", "assert", "len", "(", "read_sequences", ")", "==", "len", "(", "sequences", ")", "\n", "\n", "if", "vocabulary", "is", "None", ":", "\n", "            ", "with", "pytest", ".", "raises", "(", "SockeyeError", ")", "as", "e", ":", "\n", "                ", "data_io", ".", "SequenceReader", "(", "path", ",", "vocabulary", "=", "vocabulary", ",", "add_bos", "=", "True", ")", "\n", "", "assert", "str", "(", "e", ".", "value", ")", "==", "\"Adding a BOS or EOS symbol requires a vocabulary\"", "\n", "\n", "expected_sequences", "=", "[", "data_io", ".", "strids2ids", "(", "get_tokens", "(", "s", ")", ")", "if", "s", "else", "None", "for", "s", "in", "sequences", "]", "\n", "assert", "read_sequences", "==", "expected_sequences", "\n", "", "else", ":", "\n", "            ", "expected_sequences", "=", "[", "data_io", ".", "tokens2ids", "(", "get_tokens", "(", "s", ")", ",", "vocabulary", ")", "if", "s", "else", "None", "for", "s", "in", "sequences", "]", "\n", "if", "add_bos", ":", "\n", "                ", "expected_sequences", "=", "[", "[", "vocabulary", "[", "C", ".", "BOS_SYMBOL", "]", "]", "+", "s", "if", "s", "else", "None", "for", "s", "in", "expected_sequences", "]", "\n", "", "if", "add_eos", ":", "\n", "                ", "expected_sequences", "=", "[", "s", "+", "[", "vocabulary", "[", "C", ".", "EOS_SYMBOL", "]", "]", "if", "s", "else", "None", "for", "s", "in", "expected_sequences", "]", "\n", "", "assert", "read_sequences", "==", "expected_sequences", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_nonparallel_iter": [[145, 164], ["pytest.mark.parametrize", "pytest.raises", "list", "str", "sockeye.data_io.parallel_iter"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.parallel_iter"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"source_iterables, target_iterables\"", ",", "\n", "[", "\n", "(", "\n", "[", "[", "[", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "2", "]", ",", "[", "3", ",", "3", ",", "3", "]", "]", ",", "[", "[", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "2", "]", ",", "[", "3", ",", "3", ",", "3", "]", "]", "]", ",", "\n", "[", "[", "[", "0", "]", ",", "[", "1", "]", "]", "]", "\n", ")", ",", "\n", "(", "\n", "[", "[", "[", "0", "]", ",", "[", "1", ",", "1", "]", "]", ",", "[", "[", "0", "]", ",", "[", "1", ",", "1", "]", "]", "]", ",", "\n", "[", "[", "[", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "2", "]", ",", "[", "3", ",", "3", ",", "3", "]", "]", "]", "\n", ")", ",", "\n", "(", "\n", "[", "[", "[", "0", "]", ",", "[", "1", ",", "1", "]", "]", "]", ",", "\n", "[", "[", "[", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "2", "]", ",", "[", "3", ",", "3", ",", "3", "]", "]", "]", "\n", ")", ",", "\n", "]", ")", "\n", "def", "test_nonparallel_iter", "(", "source_iterables", ",", "target_iterables", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "SockeyeError", ")", "as", "e", ":", "\n", "        ", "list", "(", "data_io", ".", "parallel_iter", "(", "source_iterables", ",", "target_iterables", ")", ")", "\n", "", "assert", "str", "(", "e", ".", "value", ")", "==", "\"Different number of lines in source(s) and target(s) iterables.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_not_source_token_parallel_iter": [[166, 177], ["pytest.mark.parametrize", "str().startswith", "pytest.raises", "list", "sockeye.data_io.parallel_iter", "str"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.parallel_iter"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"source_iterables, target_iterables\"", ",", "\n", "[", "\n", "(", "\n", "[", "[", "[", "0", "]", ",", "[", "1", ",", "1", "]", "]", ",", "[", "[", "0", "]", ",", "[", "1", "]", "]", "]", ",", "\n", "[", "[", "[", "0", "]", ",", "[", "1", "]", "]", "]", "\n", ")", "\n", "]", ")", "\n", "def", "test_not_source_token_parallel_iter", "(", "source_iterables", ",", "target_iterables", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "SockeyeError", ")", "as", "e", ":", "\n", "        ", "list", "(", "data_io", ".", "parallel_iter", "(", "source_iterables", ",", "target_iterables", ")", ")", "\n", "", "assert", "str", "(", "e", ".", "value", ")", ".", "startswith", "(", "\"Source sequences are not token-parallel\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_not_target_token_parallel_iter": [[179, 190], ["pytest.mark.parametrize", "str().startswith", "pytest.raises", "list", "sockeye.data_io.parallel_iter", "str"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.parallel_iter"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"source_iterables, target_iterables\"", ",", "\n", "[", "\n", "(", "\n", "[", "[", "[", "0", "]", ",", "[", "1", "]", "]", "]", ",", "\n", "[", "[", "[", "0", "]", ",", "[", "1", ",", "1", "]", "]", ",", "[", "[", "0", "]", ",", "[", "1", "]", "]", "]", ",", "\n", ")", "\n", "]", ")", "\n", "def", "test_not_target_token_parallel_iter", "(", "source_iterables", ",", "target_iterables", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "SockeyeError", ")", "as", "e", ":", "\n", "        ", "list", "(", "data_io", ".", "parallel_iter", "(", "source_iterables", ",", "target_iterables", ")", ")", "\n", "", "assert", "str", "(", "e", ".", "value", ")", ".", "startswith", "(", "\"Target sequences are not token-parallel\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_parallel_iter": [[192, 227], ["pytest.mark.parametrize", "list", "sockeye.data_io.parallel_iter"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.parallel_iter"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"source_iterables, target_iterables, expected\"", ",", "\n", "[", "\n", "(", "\n", "[", "[", "[", "0", "]", ",", "[", "1", ",", "1", "]", "]", ",", "[", "[", "0", "]", ",", "[", "1", ",", "1", "]", "]", "]", ",", "\n", "[", "[", "[", "0", "]", ",", "[", "1", "]", "]", "]", ",", "\n", "[", "(", "[", "[", "0", "]", ",", "[", "0", "]", "]", ",", "[", "[", "0", "]", "]", ")", ",", "(", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ",", "[", "[", "1", "]", "]", ")", "]", "\n", ")", ",", "\n", "(", "\n", "[", "[", "[", "0", "]", ",", "None", "]", ",", "[", "[", "0", "]", ",", "None", "]", "]", ",", "\n", "[", "[", "[", "0", "]", ",", "[", "1", "]", "]", "]", ",", "\n", "[", "(", "[", "[", "0", "]", ",", "[", "0", "]", "]", ",", "[", "[", "0", "]", "]", ")", "]", "\n", ")", ",", "\n", "(", "\n", "[", "[", "[", "0", "]", ",", "[", "1", ",", "1", "]", "]", ",", "[", "[", "0", "]", ",", "[", "1", ",", "1", "]", "]", "]", ",", "\n", "[", "[", "[", "0", "]", ",", "None", "]", "]", ",", "\n", "[", "(", "[", "[", "0", "]", ",", "[", "0", "]", "]", ",", "[", "[", "0", "]", "]", ")", "]", "\n", ")", ",", "\n", "(", "\n", "[", "[", "None", ",", "[", "1", ",", "1", "]", "]", ",", "[", "None", ",", "[", "1", ",", "1", "]", "]", "]", ",", "\n", "[", "[", "None", ",", "[", "1", "]", "]", "]", ",", "\n", "[", "(", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ",", "[", "[", "1", "]", "]", ")", "]", "\n", ")", ",", "\n", "(", "\n", "[", "[", "None", ",", "[", "1", "]", "]", "]", ",", "\n", "[", "[", "None", ",", "[", "1", ",", "1", "]", "]", ",", "[", "None", ",", "[", "1", ",", "1", "]", "]", "]", ",", "\n", "[", "(", "[", "[", "1", "]", "]", ",", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", "]", ")", "]", "\n", ")", ",", "\n", "(", "\n", "[", "[", "None", ",", "[", "1", ",", "1", "]", "]", ",", "[", "None", ",", "[", "1", ",", "1", "]", "]", "]", ",", "\n", "[", "[", "None", ",", "None", "]", "]", ",", "\n", "[", "]", "\n", ")", "\n", "]", ")", "\n", "def", "test_parallel_iter", "(", "source_iterables", ",", "target_iterables", ",", "expected", ")", ":", "\n", "    ", "assert", "list", "(", "data_io", ".", "parallel_iter", "(", "source_iterables", ",", "target_iterables", ")", ")", "==", "expected", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_sample_based_define_bucket_batch_sizes": [[229, 241], ["sockeye.data_io.define_parallel_buckets", "sockeye.data_io.define_bucket_batch_sizes", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_parallel_buckets", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_bucket_batch_sizes"], ["", "def", "test_sample_based_define_bucket_batch_sizes", "(", ")", ":", "\n", "    ", "batch_type", "=", "C", ".", "BATCH_TYPE_SENTENCE", "\n", "batch_size", "=", "32", "\n", "max_seq_len", "=", "100", "\n", "buckets", "=", "data_io", ".", "define_parallel_buckets", "(", "max_seq_len", ",", "max_seq_len", ",", "10", ",", "True", ",", "1.5", ")", "\n", "bucket_batch_sizes", "=", "data_io", ".", "define_bucket_batch_sizes", "(", "buckets", "=", "buckets", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "batch_type", "=", "batch_type", ",", "\n", "data_target_average_len", "=", "[", "None", "]", "*", "len", "(", "buckets", ")", ")", "\n", "for", "bbs", "in", "bucket_batch_sizes", ":", "\n", "        ", "assert", "bbs", ".", "batch_size", "==", "batch_size", "\n", "assert", "bbs", ".", "average_target_words_per_batch", "==", "bbs", ".", "bucket", "[", "1", "]", "*", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_word_based_define_bucket_batch_sizes": [[243, 262], ["pytest.mark.parametrize", "sockeye.data_io.define_parallel_buckets", "sockeye.data_io.define_bucket_batch_sizes", "zip", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_parallel_buckets", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_bucket_batch_sizes"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"length_ratio,batch_sentences_multiple_of,expected_batch_sizes\"", ",", "[", "\n", "# Reference batch sizes manually inspected for sanity.", "\n", "(", "0.5", ",", "1", ",", "[", "200", ",", "100", ",", "67", ",", "50", ",", "40", ",", "33", ",", "29", ",", "25", ",", "22", ",", "20", "]", ")", ",", "\n", "(", "1.5", ",", "1", ",", "[", "100", ",", "50", ",", "33", ",", "25", ",", "20", ",", "20", ",", "20", ",", "20", "]", ")", ",", "\n", "(", "1.5", ",", "8", ",", "[", "96", ",", "48", ",", "32", ",", "24", ",", "16", ",", "16", ",", "16", ",", "16", "]", ")", "]", ")", "\n", "def", "test_word_based_define_bucket_batch_sizes", "(", "length_ratio", ",", "batch_sentences_multiple_of", ",", "expected_batch_sizes", ")", ":", "\n", "    ", "batch_type", "=", "C", ".", "BATCH_TYPE_WORD", "\n", "batch_size", "=", "1000", "\n", "max_seq_len", "=", "50", "\n", "buckets", "=", "data_io", ".", "define_parallel_buckets", "(", "max_seq_len", ",", "max_seq_len", ",", "10", ",", "True", ",", "length_ratio", ")", "\n", "bucket_batch_sizes", "=", "data_io", ".", "define_bucket_batch_sizes", "(", "buckets", "=", "buckets", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "batch_type", "=", "batch_type", ",", "\n", "data_target_average_len", "=", "[", "None", "]", "*", "len", "(", "buckets", ")", ",", "\n", "batch_sentences_multiple_of", "=", "batch_sentences_multiple_of", ")", "\n", "for", "bbs", ",", "expected_batch_size", "in", "zip", "(", "bucket_batch_sizes", ",", "expected_batch_sizes", ")", ":", "\n", "        ", "assert", "bbs", ".", "batch_size", "==", "expected_batch_size", "\n", "expected_average_target_words_per_batch", "=", "expected_batch_size", "*", "bbs", ".", "bucket", "[", "1", "]", "\n", "assert", "bbs", ".", "average_target_words_per_batch", "==", "expected_average_target_words_per_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_max_word_based_define_bucket_batch_sizes": [[264, 283], ["pytest.mark.parametrize", "sockeye.data_io.define_parallel_buckets", "sockeye.data_io.define_bucket_batch_sizes", "zip", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_parallel_buckets", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_bucket_batch_sizes"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"length_ratio,batch_sentences_multiple_of,expected_batch_sizes\"", ",", "[", "\n", "# Reference batch sizes manually inspected for sanity.", "\n", "(", "0.5", ",", "1", ",", "[", "200", ",", "100", ",", "66", ",", "50", ",", "40", ",", "33", ",", "28", ",", "25", ",", "22", ",", "20", "]", ")", ",", "\n", "(", "1.5", ",", "1", ",", "[", "100", ",", "50", ",", "33", ",", "25", ",", "20", ",", "20", ",", "20", ",", "20", "]", ")", ",", "\n", "(", "1.5", ",", "8", ",", "[", "96", ",", "48", ",", "32", ",", "24", ",", "16", ",", "16", ",", "16", ",", "16", "]", ")", "]", ")", "\n", "def", "test_max_word_based_define_bucket_batch_sizes", "(", "length_ratio", ",", "batch_sentences_multiple_of", ",", "expected_batch_sizes", ")", ":", "\n", "    ", "batch_type", "=", "C", ".", "BATCH_TYPE_MAX_WORD", "\n", "batch_size", "=", "1000", "\n", "max_seq_len", "=", "50", "\n", "buckets", "=", "data_io", ".", "define_parallel_buckets", "(", "max_seq_len", ",", "max_seq_len", ",", "10", ",", "True", ",", "length_ratio", ")", "\n", "bucket_batch_sizes", "=", "data_io", ".", "define_bucket_batch_sizes", "(", "buckets", "=", "buckets", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "batch_type", "=", "batch_type", ",", "\n", "data_target_average_len", "=", "[", "None", "]", "*", "len", "(", "buckets", ")", ",", "\n", "batch_sentences_multiple_of", "=", "batch_sentences_multiple_of", ")", "\n", "for", "bbs", ",", "expected_batch_size", "in", "zip", "(", "bucket_batch_sizes", ",", "expected_batch_sizes", ")", ":", "\n", "        ", "assert", "bbs", ".", "batch_size", "==", "expected_batch_size", "\n", "expected_average_target_words_per_batch", "=", "expected_batch_size", "*", "bbs", ".", "bucket", "[", "1", "]", "\n", "assert", "bbs", ".", "average_target_words_per_batch", "==", "expected_average_target_words_per_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._get_random_bucketed_data": [[285, 309], ["torch.randint", "torch.randint", "random.randint", "zip", "zip", "random.randint", "random.randint"], "function", ["None"], ["", "", "def", "_get_random_bucketed_data", "(", "buckets", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "min_count", ":", "int", ",", "\n", "max_count", ":", "int", ",", "\n", "bucket_counts", ":", "Optional", "[", "List", "[", "Optional", "[", "int", "]", "]", "]", "=", "None", ")", "->", "Tuple", "[", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "List", "[", "torch", ".", "Tensor", "]", "]", ":", "\n", "    ", "\"\"\"\n    Get random bucket data.\n\n    :param buckets: The list of buckets.\n    :param min_count: The minimum number of samples that will be sampled if no exact count is given.\n    :param max_count: The maximum number of samples that will be sampled if no exact count is given.\n    :param bucket_counts: For each bucket an optional exact example count can be given. If it is not given it will be\n                         sampled.\n    :return: The random source and target tensors.\n    \"\"\"", "\n", "if", "bucket_counts", "is", "None", ":", "\n", "        ", "bucket_counts", "=", "[", "None", "for", "_", "in", "buckets", "]", "\n", "", "bucket_counts", "=", "[", "random", ".", "randint", "(", "min_count", ",", "max_count", ")", "if", "given_count", "is", "None", "else", "given_count", "\n", "for", "given_count", "in", "bucket_counts", "]", "\n", "source", "=", "[", "torch", ".", "randint", "(", "0", ",", "10", ",", "(", "count", ",", "random", ".", "randint", "(", "1", ",", "bucket", "[", "0", "]", ")", ",", "1", ")", ")", "\n", "for", "count", ",", "bucket", "in", "zip", "(", "bucket_counts", ",", "buckets", ")", "]", "\n", "target", "=", "[", "torch", ".", "randint", "(", "0", ",", "10", ",", "(", "count", ",", "random", ".", "randint", "(", "2", ",", "bucket", "[", "1", "]", ")", ",", "1", ")", ")", "\n", "for", "count", ",", "bucket", "in", "zip", "(", "bucket_counts", ",", "buckets", ")", "]", "\n", "return", "source", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_parallel_data_set": [[311, 327], ["sockeye.data_io.define_parallel_buckets", "test_data_io._get_random_bucketed_data", "zip", "tempfile.TemporaryDirectory", "sockeye.data_io.ParallelDataSet", "os.path.join", "data_io.ParallelDataSet.save", "sockeye.data_io.ParallelDataSet.load", "test_data_io.test_parallel_data_set.check_equal"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_parallel_buckets", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._get_random_bucketed_data", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load"], ["", "def", "test_parallel_data_set", "(", ")", ":", "\n", "    ", "buckets", "=", "data_io", ".", "define_parallel_buckets", "(", "100", ",", "100", ",", "10", ",", "True", ",", "1.0", ")", "\n", "source", ",", "target", "=", "_get_random_bucketed_data", "(", "buckets", ",", "min_count", "=", "0", ",", "max_count", "=", "5", ")", "\n", "\n", "def", "check_equal", "(", "tensors1", ",", "tensors2", ")", ":", "\n", "        ", "assert", "len", "(", "tensors1", ")", "==", "len", "(", "tensors2", ")", "\n", "for", "a1", ",", "a2", "in", "zip", "(", "tensors1", ",", "tensors2", ")", ":", "\n", "            ", "assert", "torch", ".", "equal", "(", "a1", ",", "a2", ")", "\n", "\n", "", "", "with", "TemporaryDirectory", "(", ")", "as", "work_dir", ":", "\n", "        ", "dataset", "=", "data_io", ".", "ParallelDataSet", "(", "source", ",", "target", ")", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "'dataset'", ")", "\n", "dataset", ".", "save", "(", "fname", ")", "\n", "dataset_loaded", "=", "data_io", ".", "ParallelDataSet", ".", "load", "(", "fname", ")", "\n", "check_equal", "(", "dataset", ".", "source", ",", "dataset_loaded", ".", "source", ")", "\n", "check_equal", "(", "dataset", ".", "target", ",", "dataset_loaded", ".", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_parallel_data_set_fill_up": [[329, 345], ["sockeye.data_io.define_parallel_buckets", "sockeye.data_io.define_bucket_batch_sizes", "sockeye.data_io.ParallelDataSet", "data_io.ParallelDataSet.fill_up", "range", "len", "len", "len", "len", "len", "test_data_io._get_random_bucketed_data", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_parallel_buckets", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_bucket_batch_sizes", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.fill_up", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._get_random_bucketed_data"], ["", "", "def", "test_parallel_data_set_fill_up", "(", ")", ":", "\n", "    ", "batch_size", "=", "32", "\n", "buckets", "=", "data_io", ".", "define_parallel_buckets", "(", "100", ",", "100", ",", "10", ",", "True", ",", "1.0", ")", "\n", "bucket_batch_sizes", "=", "data_io", ".", "define_bucket_batch_sizes", "(", "buckets", ",", "\n", "batch_size", ",", "\n", "batch_type", "=", "C", ".", "BATCH_TYPE_SENTENCE", ",", "\n", "data_target_average_len", "=", "[", "None", "]", "*", "len", "(", "buckets", ")", ")", "\n", "dataset", "=", "data_io", ".", "ParallelDataSet", "(", "*", "_get_random_bucketed_data", "(", "buckets", ",", "min_count", "=", "1", ",", "max_count", "=", "5", ")", ")", "\n", "\n", "dataset_filled_up", "=", "dataset", ".", "fill_up", "(", "bucket_batch_sizes", ")", "\n", "assert", "len", "(", "dataset_filled_up", ".", "source", ")", "==", "len", "(", "dataset", ".", "source", ")", "\n", "assert", "len", "(", "dataset_filled_up", ".", "target", ")", "==", "len", "(", "dataset", ".", "target", ")", "\n", "for", "bidx", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "bucket_batch_size", "=", "bucket_batch_sizes", "[", "bidx", "]", ".", "batch_size", "\n", "assert", "dataset_filled_up", ".", "source", "[", "bidx", "]", ".", "shape", "[", "0", "]", "==", "bucket_batch_size", "\n", "assert", "dataset_filled_up", ".", "target", "[", "bidx", "]", ".", "shape", "[", "0", "]", "==", "bucket_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_get_permutations": [[347, 365], ["sockeye.data_io.get_permutations", "zip", "list", "list", "list", "len", "len", "len", "len", "len", "set", "set", "range", "range", "range", "p.tolist", "pi.tolist", "len", "len", "len", "len", "set", "torch.tensor", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_permutations"], ["", "", "def", "test_get_permutations", "(", ")", ":", "\n", "    ", "data", "=", "[", "list", "(", "range", "(", "3", ")", ")", ",", "list", "(", "range", "(", "1", ")", ")", ",", "list", "(", "range", "(", "7", ")", ")", ",", "[", "]", "]", "\n", "bucket_counts", "=", "[", "len", "(", "d", ")", "for", "d", "in", "data", "]", "\n", "\n", "permutation", ",", "inverse_permutation", "=", "data_io", ".", "get_permutations", "(", "bucket_counts", ")", "\n", "assert", "len", "(", "permutation", ")", "==", "len", "(", "inverse_permutation", ")", "==", "len", "(", "bucket_counts", ")", "==", "len", "(", "data", ")", "\n", "\n", "for", "d", ",", "p", ",", "pi", "in", "zip", "(", "data", ",", "permutation", ",", "inverse_permutation", ")", ":", "\n", "        ", "p_set", "=", "set", "(", "p", ".", "tolist", "(", ")", ")", "\n", "pi_set", "=", "set", "(", "pi", ".", "tolist", "(", ")", ")", "\n", "assert", "len", "(", "p_set", ")", "==", "len", "(", "p", ")", "\n", "assert", "len", "(", "pi_set", ")", "==", "len", "(", "pi", ")", "\n", "assert", "p_set", "-", "pi_set", "==", "set", "(", ")", "\n", "if", "d", ":", "\n", "            ", "d", "=", "torch", ".", "tensor", "(", "d", ")", "\n", "assert", "(", "d", "[", "p", "]", "[", "pi", "]", "==", "d", ")", ".", "all", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "p_set", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_parallel_data_set_permute": [[367, 390], ["sockeye.data_io.define_parallel_buckets", "sockeye.data_io.define_bucket_batch_sizes", "sockeye.data_io.ParallelDataSet().fill_up", "sockeye.data_io.get_permutations", "data_io.ParallelDataSet().fill_up.permute().permute", "range", "data_io.ParallelDataSet().fill_up.get_bucket_counts", "len", "len", "len", "len", "len", "len", "sockeye.data_io.ParallelDataSet", "data_io.ParallelDataSet().fill_up.permute", "len", "test_data_io._get_random_bucketed_data"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_parallel_buckets", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_bucket_batch_sizes", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.fill_up", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_permutations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.permute", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.get_bucket_counts", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.permute", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._get_random_bucketed_data"], ["", "", "", "def", "test_parallel_data_set_permute", "(", ")", ":", "\n", "    ", "batch_size", "=", "5", "\n", "buckets", "=", "data_io", ".", "define_parallel_buckets", "(", "100", ",", "100", ",", "10", ",", "True", ",", "1.0", ")", "\n", "bucket_batch_sizes", "=", "data_io", ".", "define_bucket_batch_sizes", "(", "buckets", ",", "\n", "batch_size", ",", "\n", "batch_type", "=", "C", ".", "BATCH_TYPE_SENTENCE", ",", "\n", "data_target_average_len", "=", "[", "None", "]", "*", "len", "(", "buckets", ")", ")", "\n", "dataset", "=", "data_io", ".", "ParallelDataSet", "(", "*", "_get_random_bucketed_data", "(", "buckets", ",", "min_count", "=", "0", ",", "max_count", "=", "5", ")", ")", ".", "fill_up", "(", "\n", "bucket_batch_sizes", ")", "\n", "\n", "permutations", ",", "inverse_permutations", "=", "data_io", ".", "get_permutations", "(", "dataset", ".", "get_bucket_counts", "(", ")", ")", "\n", "\n", "assert", "len", "(", "permutations", ")", "==", "len", "(", "inverse_permutations", ")", "==", "len", "(", "dataset", ")", "\n", "dataset_restored", "=", "dataset", ".", "permute", "(", "permutations", ")", ".", "permute", "(", "inverse_permutations", ")", "\n", "assert", "len", "(", "dataset", ")", "==", "len", "(", "dataset_restored", ")", "\n", "for", "buck_idx", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "num_samples", "=", "dataset", ".", "source", "[", "buck_idx", "]", ".", "shape", "[", "0", "]", "\n", "if", "num_samples", ":", "\n", "            ", "assert", "(", "dataset", ".", "source", "[", "buck_idx", "]", "==", "dataset_restored", ".", "source", "[", "buck_idx", "]", ")", ".", "all", "(", ")", "\n", "assert", "(", "dataset", ".", "target", "[", "buck_idx", "]", "==", "dataset_restored", ".", "target", "[", "buck_idx", "]", ")", ".", "all", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "not", "dataset_restored", ".", "source", "[", "buck_idx", "]", ".", "shape", "[", "0", "]", "\n", "assert", "not", "dataset_restored", ".", "target", "[", "buck_idx", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_get_batch_indices": [[392, 418], ["sockeye.data_io.define_parallel_buckets", "sockeye.data_io.define_bucket_batch_sizes", "sockeye.data_io.ParallelDataSet", "sockeye.data_io.get_batch_indices", "dataset.fill_up.fill_up", "sockeye.data_io.get_batch_indices", "set", "set", "list", "test_data_io._get_random_bucketed_data", "len", "range", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_parallel_buckets", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_bucket_batch_sizes", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_batch_indices", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.fill_up", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_batch_indices", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._get_random_bucketed_data"], ["", "", "", "def", "test_get_batch_indices", "(", ")", ":", "\n", "    ", "max_bucket_size", "=", "50", "\n", "batch_size", "=", "10", "\n", "buckets", "=", "data_io", ".", "define_parallel_buckets", "(", "100", ",", "100", ",", "10", ",", "True", ",", "1.0", ")", "\n", "bucket_batch_sizes", "=", "data_io", ".", "define_bucket_batch_sizes", "(", "buckets", ",", "\n", "batch_size", ",", "\n", "batch_type", "=", "C", ".", "BATCH_TYPE_SENTENCE", ",", "\n", "data_target_average_len", "=", "[", "None", "]", "*", "len", "(", "buckets", ")", ")", "\n", "dataset", "=", "data_io", ".", "ParallelDataSet", "(", "*", "_get_random_bucketed_data", "(", "buckets", "=", "buckets", ",", "\n", "min_count", "=", "1", ",", "\n", "max_count", "=", "max_bucket_size", ")", ")", "\n", "\n", "indices", "=", "data_io", ".", "get_batch_indices", "(", "dataset", ",", "bucket_batch_sizes", "=", "bucket_batch_sizes", ")", "\n", "\n", "# check for valid indices", "\n", "for", "buck_idx", ",", "start_pos", "in", "indices", ":", "\n", "        ", "assert", "0", "<=", "buck_idx", "<", "len", "(", "dataset", ")", "\n", "assert", "0", "<=", "start_pos", "<", "len", "(", "dataset", ".", "source", "[", "buck_idx", "]", ")", "-", "batch_size", "+", "1", "\n", "\n", "# check that all indices are used for a filled-up dataset", "\n", "", "dataset", "=", "dataset", ".", "fill_up", "(", "bucket_batch_sizes", ")", "\n", "indices", "=", "data_io", ".", "get_batch_indices", "(", "dataset", ",", "bucket_batch_sizes", "=", "bucket_batch_sizes", ")", "\n", "all_bucket_indices", "=", "set", "(", "list", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", ")", "\n", "computed_bucket_indices", "=", "set", "(", "[", "i", "for", "i", ",", "j", "in", "indices", "]", ")", "\n", "\n", "assert", "not", "all_bucket_indices", "-", "computed_bucket_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_get_parallel_bucket": [[429, 435], ["pytest.mark.parametrize", "sockeye.data_io.get_parallel_bucket"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_parallel_bucket"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"buckets, source_length, target_length, expected_bucket_index, expected_bucket\"", ",", "\n", "get_parallel_bucket_tests", ")", "\n", "def", "test_get_parallel_bucket", "(", "buckets", ",", "source_length", ",", "target_length", ",", "expected_bucket_index", ",", "expected_bucket", ")", ":", "\n", "    ", "bucket_index", ",", "bucket", "=", "data_io", ".", "get_parallel_bucket", "(", "buckets", ",", "source_length", ",", "target_length", ")", "\n", "assert", "bucket_index", "==", "expected_bucket_index", "\n", "assert", "bucket", "==", "expected_bucket", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_calculate_length_statistics": [[437, 450], ["pytest.mark.parametrize", "sockeye.data_io.calculate_length_statistics", "numpy.isclose", "numpy.isclose", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.calculate_length_statistics"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"sources, targets, expected_num_sents, expected_mean, expected_std\"", ",", "\n", "[", "(", "[", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "2", ",", "2", ",", "2", "]", ",", "[", "3", ",", "3", ",", "3", "]", "]", "]", ",", "\n", "[", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "2", ",", "2", ",", "2", "]", ",", "[", "3", ",", "3", ",", "3", "]", "]", "]", ",", "3", ",", "1.0", ",", "0.0", ")", ",", "\n", "(", "[", "[", "[", "1", ",", "1", "]", ",", "[", "2", ",", "2", "]", ",", "[", "3", ",", "3", "]", "]", "]", ",", "\n", "[", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "2", ",", "2", ",", "2", "]", ",", "[", "3", ",", "3", ",", "3", "]", "]", "]", ",", "3", ",", "1.5", ",", "0.0", ")", ",", "\n", "(", "[", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "2", ",", "2", "]", ",", "[", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", "]", "]", "]", ",", "\n", "[", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "2", "]", ",", "[", "3", ",", "3", ",", "3", "]", "]", "]", ",", "2", ",", "0.75", ",", "0.25", ")", "]", ")", "\n", "def", "test_calculate_length_statistics", "(", "sources", ",", "targets", ",", "expected_num_sents", ",", "expected_mean", ",", "expected_std", ")", ":", "\n", "    ", "length_statistics", "=", "data_io", ".", "calculate_length_statistics", "(", "sources", ",", "targets", ",", "5", ",", "5", ")", "\n", "assert", "len", "(", "sources", "[", "0", "]", ")", "==", "len", "(", "targets", "[", "0", "]", ")", "\n", "assert", "length_statistics", ".", "num_sents", "==", "expected_num_sents", "\n", "assert", "np", ".", "isclose", "(", "length_statistics", ".", "length_ratio_mean", ",", "expected_mean", ")", "\n", "assert", "np", ".", "isclose", "(", "length_statistics", ".", "length_ratio_std", ",", "expected_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_non_parallel_calculate_length_statistics": [[452, 461], ["pytest.mark.parametrize", "pytest.raises", "sockeye.data_io.calculate_length_statistics"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.calculate_length_statistics"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"sources, targets\"", ",", "\n", "[", "\n", "(", "[", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "2", ",", "2", ",", "2", "]", ",", "[", "3", ",", "3", ",", "3", "]", "]", ",", "\n", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "2", ",", "2", "]", ",", "[", "3", ",", "3", ",", "3", "]", "]", "]", ",", "\n", "[", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "2", ",", "2", ",", "2", "]", ",", "[", "3", ",", "3", ",", "3", "]", "]", "]", ")", "\n", "]", ")", "\n", "def", "test_non_parallel_calculate_length_statistics", "(", "sources", ",", "targets", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "SockeyeError", ")", ":", "\n", "        ", "data_io", ".", "calculate_length_statistics", "(", "sources", ",", "targets", ",", "5", ",", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_get_training_data_iters": [[463, 540], ["sockeye.test_utils.tmp_digits_dataset", "sockeye.vocab.build_from_paths", "sockeye.data_io.get_training_data_iters", "isinstance", "isinstance", "isinstance", "numpy.isclose", "numpy.isclose", "torch.full", "range", "train_iter.iter_next", "train_iter.reset", "train_iter.next", "isinstance", "torch.equal", "torch.equal", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.tmp_digits_dataset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.build_from_paths", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_training_data_iters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next"], ["", "", "def", "test_get_training_data_iters", "(", ")", ":", "\n", "    ", "from", "sockeye", ".", "test_utils", "import", "tmp_digits_dataset", "\n", "\n", "train_line_count", "=", "100", "\n", "train_line_count_empty", "=", "0", "\n", "train_max_length", "=", "30", "\n", "dev_line_count", "=", "20", "\n", "dev_max_length", "=", "30", "\n", "expected_mean", "=", "1.0", "\n", "expected_std", "=", "0.0", "\n", "test_line_count", "=", "20", "\n", "test_line_count_empty", "=", "0", "\n", "test_max_length", "=", "30", "\n", "batch_size", "=", "5", "\n", "num_source_factors", "=", "num_target_factors", "=", "1", "\n", "with", "tmp_digits_dataset", "(", "\"tmp_corpus\"", ",", "\n", "train_line_count", ",", "train_line_count_empty", ",", "train_max_length", "-", "C", ".", "SPACE_FOR_XOS", ",", "\n", "dev_line_count", ",", "dev_max_length", "-", "C", ".", "SPACE_FOR_XOS", ",", "\n", "test_line_count", ",", "test_line_count_empty", ",", "\n", "test_max_length", "-", "C", ".", "SPACE_FOR_XOS", ")", "as", "data", ":", "\n", "# tmp common vocab", "\n", "        ", "vcb", "=", "vocab", ".", "build_from_paths", "(", "[", "data", "[", "'train_source'", "]", ",", "data", "[", "'train_target'", "]", "]", ")", "\n", "\n", "train_iter", ",", "val_iter", ",", "config_data", ",", "data_info", "=", "data_io", ".", "get_training_data_iters", "(", "\n", "sources", "=", "[", "data", "[", "'train_source'", "]", "]", ",", "\n", "targets", "=", "[", "data", "[", "'train_target'", "]", "]", ",", "\n", "validation_sources", "=", "[", "data", "[", "'dev_source'", "]", "]", ",", "\n", "validation_targets", "=", "[", "data", "[", "'dev_target'", "]", "]", ",", "\n", "source_vocabs", "=", "[", "vcb", "]", ",", "\n", "target_vocabs", "=", "[", "vcb", "]", ",", "\n", "source_vocab_paths", "=", "[", "None", "]", ",", "\n", "target_vocab_paths", "=", "[", "None", "]", ",", "\n", "shared_vocab", "=", "True", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "batch_type", "=", "C", ".", "BATCH_TYPE_SENTENCE", ",", "\n", "max_seq_len_source", "=", "train_max_length", ",", "\n", "max_seq_len_target", "=", "train_max_length", ",", "\n", "bucketing", "=", "True", ",", "\n", "bucket_width", "=", "10", ")", "\n", "assert", "isinstance", "(", "train_iter", ",", "data_io", ".", "ParallelSampleIter", ")", "\n", "assert", "isinstance", "(", "val_iter", ",", "data_io", ".", "ParallelSampleIter", ")", "\n", "assert", "isinstance", "(", "config_data", ",", "data_io", ".", "DataConfig", ")", "\n", "assert", "data_info", ".", "sources", "==", "[", "data", "[", "'train_source'", "]", "]", "\n", "assert", "data_info", ".", "targets", "==", "[", "data", "[", "'train_target'", "]", "]", "\n", "assert", "data_info", ".", "source_vocabs", "==", "[", "None", "]", "\n", "assert", "data_info", ".", "target_vocabs", "==", "[", "None", "]", "\n", "assert", "config_data", ".", "data_statistics", ".", "max_observed_len_source", "==", "train_max_length", "\n", "assert", "config_data", ".", "data_statistics", ".", "max_observed_len_target", "==", "train_max_length", "\n", "assert", "np", ".", "isclose", "(", "config_data", ".", "data_statistics", ".", "length_ratio_mean", ",", "expected_mean", ")", "\n", "assert", "np", ".", "isclose", "(", "config_data", ".", "data_statistics", ".", "length_ratio_std", ",", "expected_std", ")", "\n", "\n", "assert", "train_iter", ".", "batch_size", "==", "batch_size", "\n", "assert", "val_iter", ".", "batch_size", "==", "batch_size", "\n", "\n", "# test some batches", "\n", "bos_id", "=", "vcb", "[", "C", ".", "BOS_SYMBOL", "]", "\n", "eos_id", "=", "vcb", "[", "C", ".", "EOS_SYMBOL", "]", "\n", "expected_first_target_symbols", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "1", ")", ",", "bos_id", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "            ", "while", "train_iter", ".", "iter_next", "(", ")", ":", "\n", "                ", "batch", "=", "train_iter", ".", "next", "(", ")", "\n", "assert", "isinstance", "(", "batch", ",", "data_io", ".", "Batch", ")", "\n", "source", "=", "batch", ".", "source", "\n", "target", "=", "batch", ".", "target", "\n", "label", "=", "batch", ".", "labels", "[", "C", ".", "TARGET_LABEL_NAME", "]", "# TODO: still 2-shape: (batch, length)", "\n", "length_ratio_label", "=", "batch", ".", "labels", "[", "C", ".", "LENRATIO_LABEL_NAME", "]", "\n", "assert", "source", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", "==", "label", ".", "shape", "[", "0", "]", "==", "batch_size", "\n", "assert", "source", ".", "shape", "[", "2", "]", "==", "target", ".", "shape", "[", "2", "]", "==", "num_source_factors", "==", "num_target_factors", "\n", "# target first symbol should be BOS", "\n", "# each source sequence contains one EOS symbol", "\n", "assert", "torch", ".", "sum", "(", "source", "==", "eos_id", ")", "==", "batch_size", "\n", "assert", "torch", ".", "equal", "(", "target", "[", ":", ",", "0", "]", ",", "expected_first_target_symbols", ")", "\n", "# label first symbol should be 2nd target symbol", "\n", "assert", "torch", ".", "equal", "(", "label", "[", ":", ",", "0", "]", ",", "target", "[", ":", ",", "1", ",", "0", "]", ")", "\n", "# each label sequence contains one EOS symbol", "\n", "assert", "torch", ".", "sum", "(", "label", "==", "eos_id", ")", "==", "batch_size", "\n", "", "train_iter", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._data_batches_equal": [[542, 552], ["torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "db1.labels.keys", "db2.labels.keys"], "function", ["None"], ["", "", "", "def", "_data_batches_equal", "(", "db1", ":", "data_io", ".", "Batch", ",", "db2", ":", "data_io", ".", "Batch", ")", "->", "bool", ":", "\n", "    ", "equal", "=", "True", "\n", "equal", "=", "equal", "and", "torch", ".", "allclose", "(", "db1", ".", "source", ",", "db2", ".", "source", ")", "\n", "equal", "=", "equal", "and", "torch", ".", "allclose", "(", "db1", ".", "source_length", ",", "db2", ".", "source_length", ")", "\n", "equal", "=", "equal", "and", "torch", ".", "allclose", "(", "db1", ".", "target", ",", "db2", ".", "target", ")", "\n", "equal", "=", "equal", "and", "torch", ".", "allclose", "(", "db1", ".", "target_length", ",", "db2", ".", "target_length", ")", "\n", "equal", "=", "equal", "and", "db1", ".", "labels", ".", "keys", "(", ")", "==", "db2", ".", "labels", ".", "keys", "(", ")", "\n", "equal", "=", "equal", "and", "db1", ".", "samples", "==", "db2", ".", "samples", "\n", "equal", "=", "equal", "and", "db1", ".", "tokens", "==", "db2", ".", "tokens", "\n", "return", "equal", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_parallel_sample_iter": [[554, 609], ["sockeye.data_io.define_parallel_buckets", "sockeye.data_io.define_bucket_batch_sizes", "sockeye.data_io.ParallelDataSet", "sockeye.data_io.ParallelSampleIter", "tempfile.TemporaryDirectory", "data_io.ParallelSampleIter.next", "data_io.ParallelSampleIter.next", "os.path.join", "data_io.ParallelSampleIter.save_state", "sockeye.data_io.ParallelSampleIter", "data_io.ParallelSampleIter.reset", "data_io.ParallelSampleIter.load_state", "data_io.ParallelSampleIter.next", "test_data_io._data_batches_equal", "data_io.ParallelSampleIter.reset", "data_io.ParallelSampleIter.next", "data_io.ParallelSampleIter.save_state", "sockeye.data_io.ParallelSampleIter", "data_io.ParallelSampleIter.reset", "data_io.ParallelSampleIter.load_state", "data_io.ParallelSampleIter.next", "test_data_io._data_batches_equal", "data_io.ParallelSampleIter.reset", "data_io.ParallelSampleIter.next", "data_io.ParallelSampleIter.save_state", "sockeye.data_io.ParallelSampleIter", "data_io.ParallelSampleIter.reset", "data_io.ParallelSampleIter.load_state", "data_io.ParallelSampleIter.next", "test_data_io._data_batches_equal", "data_io.ParallelSampleIter.iter_next", "test_data_io._get_random_bucketed_data", "data_io.ParallelSampleIter.next", "data_io.ParallelSampleIter.next", "data_io.ParallelSampleIter.iter_next", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_parallel_buckets", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_bucket_batch_sizes", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.save_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.load_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._data_batches_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.save_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.load_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._data_batches_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.save_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.load_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._data_batches_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._get_random_bucketed_data", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next"], ["", "def", "test_parallel_sample_iter", "(", ")", ":", "\n", "    ", "batch_size", "=", "2", "\n", "buckets", "=", "data_io", ".", "define_parallel_buckets", "(", "100", ",", "100", ",", "10", ",", "True", ",", "1.0", ")", "\n", "# The first bucket is going to be empty:", "\n", "bucket_counts", "=", "[", "0", "]", "+", "[", "None", "]", "*", "(", "len", "(", "buckets", ")", "-", "1", ")", "\n", "bucket_batch_sizes", "=", "data_io", ".", "define_bucket_batch_sizes", "(", "buckets", ",", "\n", "batch_size", ",", "\n", "batch_type", "=", "C", ".", "BATCH_TYPE_SENTENCE", ",", "\n", "data_target_average_len", "=", "[", "None", "]", "*", "len", "(", "buckets", ")", ")", "\n", "\n", "dataset", "=", "data_io", ".", "ParallelDataSet", "(", "*", "_get_random_bucketed_data", "(", "buckets", ",", "min_count", "=", "0", ",", "max_count", "=", "5", ",", "\n", "bucket_counts", "=", "bucket_counts", ")", ")", "\n", "it", "=", "data_io", ".", "ParallelSampleIter", "(", "dataset", ",", "buckets", ",", "batch_size", ",", "bucket_batch_sizes", ")", "\n", "\n", "with", "TemporaryDirectory", "(", ")", "as", "work_dir", ":", "\n", "# Test 1", "\n", "        ", "it", ".", "next", "(", ")", "\n", "expected_batch", "=", "it", ".", "next", "(", ")", "\n", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "\"saved_iter\"", ")", "\n", "it", ".", "save_state", "(", "fname", ")", "\n", "\n", "it_loaded", "=", "data_io", ".", "ParallelSampleIter", "(", "dataset", ",", "buckets", ",", "batch_size", ",", "bucket_batch_sizes", ")", "\n", "it_loaded", ".", "reset", "(", ")", "\n", "it_loaded", ".", "load_state", "(", "fname", ")", "\n", "loaded_batch", "=", "it_loaded", ".", "next", "(", ")", "\n", "assert", "_data_batches_equal", "(", "expected_batch", ",", "loaded_batch", ")", "\n", "\n", "# Test 2", "\n", "it", ".", "reset", "(", ")", "\n", "expected_batch", "=", "it", ".", "next", "(", ")", "\n", "it", ".", "save_state", "(", "fname", ")", "\n", "\n", "it_loaded", "=", "data_io", ".", "ParallelSampleIter", "(", "dataset", ",", "buckets", ",", "batch_size", ",", "bucket_batch_sizes", ")", "\n", "it_loaded", ".", "reset", "(", ")", "\n", "it_loaded", ".", "load_state", "(", "fname", ")", "\n", "\n", "loaded_batch", "=", "it_loaded", ".", "next", "(", ")", "\n", "assert", "_data_batches_equal", "(", "expected_batch", ",", "loaded_batch", ")", "\n", "\n", "# Test 3", "\n", "it", ".", "reset", "(", ")", "\n", "expected_batch", "=", "it", ".", "next", "(", ")", "\n", "it", ".", "save_state", "(", "fname", ")", "\n", "it_loaded", "=", "data_io", ".", "ParallelSampleIter", "(", "dataset", ",", "buckets", ",", "batch_size", ",", "bucket_batch_sizes", ")", "\n", "it_loaded", ".", "reset", "(", ")", "\n", "it_loaded", ".", "load_state", "(", "fname", ")", "\n", "\n", "loaded_batch", "=", "it_loaded", ".", "next", "(", ")", "\n", "assert", "_data_batches_equal", "(", "expected_batch", ",", "loaded_batch", ")", "\n", "\n", "while", "it", ".", "iter_next", "(", ")", ":", "\n", "            ", "it", ".", "next", "(", ")", "\n", "it_loaded", ".", "next", "(", ")", "\n", "", "assert", "not", "it_loaded", ".", "iter_next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_sharded_parallel_sample_iter": [[611, 675], ["sockeye.data_io.define_parallel_buckets", "sockeye.data_io.define_bucket_batch_sizes", "sockeye.data_io.ParallelDataSet", "sockeye.data_io.ParallelDataSet", "tempfile.TemporaryDirectory", "os.path.join", "os.path.join", "data_io.ParallelDataSet.save", "data_io.ParallelDataSet.save", "sockeye.data_io.ShardedParallelSampleIter", "data_io.ShardedParallelSampleIter.next", "data_io.ShardedParallelSampleIter.next", "os.path.join", "data_io.ShardedParallelSampleIter.save_state", "sockeye.data_io.ShardedParallelSampleIter", "data_io.ShardedParallelSampleIter.reset", "data_io.ShardedParallelSampleIter.load_state", "data_io.ShardedParallelSampleIter.next", "test_data_io._data_batches_equal", "data_io.ShardedParallelSampleIter.reset", "data_io.ShardedParallelSampleIter.next", "data_io.ShardedParallelSampleIter.save_state", "sockeye.data_io.ShardedParallelSampleIter", "data_io.ShardedParallelSampleIter.reset", "data_io.ShardedParallelSampleIter.load_state", "data_io.ShardedParallelSampleIter.next", "test_data_io._data_batches_equal", "data_io.ShardedParallelSampleIter.reset", "data_io.ShardedParallelSampleIter.next", "data_io.ShardedParallelSampleIter.save_state", "sockeye.data_io.ShardedParallelSampleIter", "data_io.ShardedParallelSampleIter.reset", "data_io.ShardedParallelSampleIter.load_state", "data_io.ShardedParallelSampleIter.next", "test_data_io._data_batches_equal", "data_io.ShardedParallelSampleIter.iter_next", "test_data_io._get_random_bucketed_data", "test_data_io._get_random_bucketed_data", "data_io.ShardedParallelSampleIter.next", "data_io.ShardedParallelSampleIter.next", "data_io.ShardedParallelSampleIter.iter_next", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_parallel_buckets", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_bucket_batch_sizes", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.save_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.load_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._data_batches_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.save_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.load_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._data_batches_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.save_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.load_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._data_batches_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._get_random_bucketed_data", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._get_random_bucketed_data", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next"], ["", "", "def", "test_sharded_parallel_sample_iter", "(", ")", ":", "\n", "    ", "batch_size", "=", "2", "\n", "buckets", "=", "data_io", ".", "define_parallel_buckets", "(", "100", ",", "100", ",", "10", ",", "True", ",", "1.0", ")", "\n", "# The first bucket is going to be empty:", "\n", "bucket_counts", "=", "[", "0", "]", "+", "[", "None", "]", "*", "(", "len", "(", "buckets", ")", "-", "1", ")", "\n", "bucket_batch_sizes", "=", "data_io", ".", "define_bucket_batch_sizes", "(", "buckets", ",", "\n", "batch_size", ",", "\n", "batch_type", "=", "C", ".", "BATCH_TYPE_SENTENCE", ",", "\n", "data_target_average_len", "=", "[", "None", "]", "*", "len", "(", "buckets", ")", ")", "\n", "\n", "dataset1", "=", "data_io", ".", "ParallelDataSet", "(", "*", "_get_random_bucketed_data", "(", "buckets", ",", "min_count", "=", "0", ",", "max_count", "=", "5", ",", "\n", "bucket_counts", "=", "bucket_counts", ")", ")", "\n", "dataset2", "=", "data_io", ".", "ParallelDataSet", "(", "*", "_get_random_bucketed_data", "(", "buckets", ",", "min_count", "=", "0", ",", "max_count", "=", "5", ",", "\n", "bucket_counts", "=", "bucket_counts", ")", ")", "\n", "\n", "with", "TemporaryDirectory", "(", ")", "as", "work_dir", ":", "\n", "        ", "shard1_fname", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "'shard1'", ")", "\n", "shard2_fname", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "'shard2'", ")", "\n", "dataset1", ".", "save", "(", "shard1_fname", ")", "\n", "dataset2", ".", "save", "(", "shard2_fname", ")", "\n", "shard_fnames", "=", "[", "shard1_fname", ",", "shard2_fname", "]", "\n", "\n", "it", "=", "data_io", ".", "ShardedParallelSampleIter", "(", "shard_fnames", ",", "buckets", ",", "batch_size", ",", "bucket_batch_sizes", ")", "\n", "\n", "# Test 1", "\n", "it", ".", "next", "(", ")", "\n", "expected_batch", "=", "it", ".", "next", "(", ")", "\n", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "\"saved_iter\"", ")", "\n", "it", ".", "save_state", "(", "fname", ")", "\n", "\n", "it_loaded", "=", "data_io", ".", "ShardedParallelSampleIter", "(", "shard_fnames", ",", "buckets", ",", "batch_size", ",", "bucket_batch_sizes", ")", "\n", "it_loaded", ".", "reset", "(", ")", "\n", "it_loaded", ".", "load_state", "(", "fname", ")", "\n", "loaded_batch", "=", "it_loaded", ".", "next", "(", ")", "\n", "assert", "_data_batches_equal", "(", "expected_batch", ",", "loaded_batch", ")", "\n", "\n", "# Test 2", "\n", "it", ".", "reset", "(", ")", "\n", "expected_batch", "=", "it", ".", "next", "(", ")", "\n", "it", ".", "save_state", "(", "fname", ")", "\n", "\n", "it_loaded", "=", "data_io", ".", "ShardedParallelSampleIter", "(", "shard_fnames", ",", "buckets", ",", "batch_size", ",", "bucket_batch_sizes", ")", "\n", "it_loaded", ".", "reset", "(", ")", "\n", "it_loaded", ".", "load_state", "(", "fname", ")", "\n", "\n", "loaded_batch", "=", "it_loaded", ".", "next", "(", ")", "\n", "assert", "_data_batches_equal", "(", "expected_batch", ",", "loaded_batch", ")", "\n", "\n", "# Test 3", "\n", "it", ".", "reset", "(", ")", "\n", "expected_batch", "=", "it", ".", "next", "(", ")", "\n", "it", ".", "save_state", "(", "fname", ")", "\n", "it_loaded", "=", "data_io", ".", "ShardedParallelSampleIter", "(", "shard_fnames", ",", "buckets", ",", "batch_size", ",", "bucket_batch_sizes", ")", "\n", "it_loaded", ".", "reset", "(", ")", "\n", "it_loaded", ".", "load_state", "(", "fname", ")", "\n", "\n", "loaded_batch", "=", "it_loaded", ".", "next", "(", ")", "\n", "assert", "_data_batches_equal", "(", "expected_batch", ",", "loaded_batch", ")", "\n", "\n", "while", "it", ".", "iter_next", "(", ")", ":", "\n", "            ", "it", ".", "next", "(", ")", "\n", "it_loaded", ".", "next", "(", ")", "\n", "", "assert", "not", "it_loaded", ".", "iter_next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_sharded_parallel_sample_iter_num_batches": [[677, 708], ["sockeye.data_io.define_parallel_buckets", "sockeye.data_io.define_bucket_batch_sizes", "sockeye.data_io.ParallelDataSet", "sockeye.data_io.ParallelDataSet", "len", "tempfile.TemporaryDirectory", "os.path.join", "os.path.join", "data_io.ParallelDataSet.save", "data_io.ParallelDataSet.save", "sockeye.data_io.ShardedParallelSampleIter", "data_io.ShardedParallelSampleIter.iter_next", "test_data_io._get_random_bucketed_data", "test_data_io._get_random_bucketed_data", "data_io.ShardedParallelSampleIter.next", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_parallel_buckets", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_bucket_batch_sizes", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._get_random_bucketed_data", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._get_random_bucketed_data", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next"], ["", "", "def", "test_sharded_parallel_sample_iter_num_batches", "(", ")", ":", "\n", "    ", "num_shards", "=", "2", "\n", "batch_size", "=", "2", "\n", "num_batches_per_bucket", "=", "10", "\n", "buckets", "=", "data_io", ".", "define_parallel_buckets", "(", "100", ",", "100", ",", "10", ",", "True", ",", "1.0", ")", "\n", "bucket_counts", "=", "[", "batch_size", "*", "num_batches_per_bucket", "for", "_", "in", "buckets", "]", "\n", "num_batches_per_shard", "=", "num_batches_per_bucket", "*", "len", "(", "buckets", ")", "\n", "num_batches", "=", "num_shards", "*", "num_batches_per_shard", "\n", "bucket_batch_sizes", "=", "data_io", ".", "define_bucket_batch_sizes", "(", "buckets", ",", "\n", "batch_size", ",", "\n", "batch_type", "=", "C", ".", "BATCH_TYPE_SENTENCE", ",", "\n", "data_target_average_len", "=", "[", "None", "]", "*", "len", "(", "buckets", ")", ")", "\n", "\n", "dataset1", "=", "data_io", ".", "ParallelDataSet", "(", "*", "_get_random_bucketed_data", "(", "buckets", ",", "min_count", "=", "0", ",", "max_count", "=", "5", ",", "\n", "bucket_counts", "=", "bucket_counts", ")", ")", "\n", "dataset2", "=", "data_io", ".", "ParallelDataSet", "(", "*", "_get_random_bucketed_data", "(", "buckets", ",", "min_count", "=", "0", ",", "max_count", "=", "5", ",", "\n", "bucket_counts", "=", "bucket_counts", ")", ")", "\n", "with", "TemporaryDirectory", "(", ")", "as", "work_dir", ":", "\n", "        ", "shard1_fname", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "'shard1'", ")", "\n", "shard2_fname", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "'shard2'", ")", "\n", "dataset1", ".", "save", "(", "shard1_fname", ")", "\n", "dataset2", ".", "save", "(", "shard2_fname", ")", "\n", "shard_fnames", "=", "[", "shard1_fname", ",", "shard2_fname", "]", "\n", "\n", "it", "=", "data_io", ".", "ShardedParallelSampleIter", "(", "shard_fnames", ",", "buckets", ",", "batch_size", ",", "bucket_batch_sizes", ")", "\n", "\n", "num_batches_seen", "=", "0", "\n", "while", "it", ".", "iter_next", "(", ")", ":", "\n", "            ", "it", ".", "next", "(", ")", "\n", "num_batches_seen", "+=", "1", "\n", "", "assert", "num_batches_seen", "==", "num_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_sharded_and_parallel_iter_same_num_batches": [[710, 756], ["sockeye.data_io.define_parallel_buckets", "sockeye.data_io.define_bucket_batch_sizes", "sockeye.data_io.ParallelDataSet", "len", "tempfile.TemporaryDirectory", "os.path.join", "data_io.ParallelDataSet.save", "sockeye.data_io.ShardedParallelSampleIter", "sockeye.data_io.ParallelSampleIter", "data_io.ParallelSampleIter.iter_next", "print", "data_io.ShardedParallelSampleIter.reset", "data_io.ParallelSampleIter.reset", "data_io.ParallelSampleIter.iter_next", "test_data_io._get_random_bucketed_data", "data_io.ShardedParallelSampleIter.iter_next", "data_io.ParallelSampleIter.next", "data_io.ShardedParallelSampleIter.next", "data_io.ShardedParallelSampleIter.iter_next", "data_io.ParallelSampleIter.next", "data_io.ShardedParallelSampleIter.next", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_parallel_buckets", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_bucket_batch_sizes", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next", "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io._get_random_bucketed_data", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next"], ["", "", "def", "test_sharded_and_parallel_iter_same_num_batches", "(", ")", ":", "\n", "    ", "\"\"\" Tests that a sharded data iterator with just a single shard produces as many shards as an iterator directly\n    using the same dataset. \"\"\"", "\n", "batch_size", "=", "2", "\n", "num_batches_per_bucket", "=", "10", "\n", "buckets", "=", "data_io", ".", "define_parallel_buckets", "(", "100", ",", "100", ",", "10", ",", "True", ",", "1.0", ")", "\n", "bucket_counts", "=", "[", "batch_size", "*", "num_batches_per_bucket", "for", "_", "in", "buckets", "]", "\n", "num_batches", "=", "num_batches_per_bucket", "*", "len", "(", "buckets", ")", "\n", "bucket_batch_sizes", "=", "data_io", ".", "define_bucket_batch_sizes", "(", "buckets", ",", "\n", "batch_size", ",", "\n", "batch_type", "=", "C", ".", "BATCH_TYPE_SENTENCE", ",", "\n", "data_target_average_len", "=", "[", "None", "]", "*", "len", "(", "buckets", ")", ")", "\n", "\n", "dataset", "=", "data_io", ".", "ParallelDataSet", "(", "*", "_get_random_bucketed_data", "(", "buckets", ",", "min_count", "=", "0", ",", "max_count", "=", "5", ",", "\n", "bucket_counts", "=", "bucket_counts", ")", ")", "\n", "\n", "with", "TemporaryDirectory", "(", ")", "as", "work_dir", ":", "\n", "        ", "shard_fname", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "'shard1'", ")", "\n", "dataset", ".", "save", "(", "shard_fname", ")", "\n", "shard_fnames", "=", "[", "shard_fname", "]", "\n", "\n", "it_sharded", "=", "data_io", ".", "ShardedParallelSampleIter", "(", "shard_fnames", ",", "buckets", ",", "batch_size", ",", "bucket_batch_sizes", ")", "\n", "\n", "it_parallel", "=", "data_io", ".", "ParallelSampleIter", "(", "dataset", ",", "buckets", ",", "batch_size", ",", "bucket_batch_sizes", ")", "\n", "\n", "num_batches_seen", "=", "0", "\n", "while", "it_parallel", ".", "iter_next", "(", ")", ":", "\n", "            ", "assert", "it_sharded", ".", "iter_next", "(", ")", "\n", "it_parallel", ".", "next", "(", ")", "\n", "it_sharded", ".", "next", "(", ")", "\n", "num_batches_seen", "+=", "1", "\n", "", "assert", "num_batches_seen", "==", "num_batches", "\n", "\n", "print", "(", "\"Resetting...\"", ")", "\n", "it_sharded", ".", "reset", "(", ")", "\n", "it_parallel", ".", "reset", "(", ")", "\n", "\n", "num_batches_seen", "=", "0", "\n", "while", "it_parallel", ".", "iter_next", "(", ")", ":", "\n", "            ", "assert", "it_sharded", ".", "iter_next", "(", ")", "\n", "it_parallel", ".", "next", "(", ")", "\n", "it_sharded", ".", "next", "(", ")", "\n", "\n", "num_batches_seen", "+=", "1", "\n", "\n", "", "assert", "num_batches_seen", "==", "num_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_data_io.test_create_target_and_shifted_label_sequences": [[758, 779], ["torch.tensor", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.unsqueeze", "torch.tensor", "sockeye.data_io.create_target_and_shifted_label_sequences", "torch.allclose", "torch.allclose", "torch.allclose", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.create_target_and_shifted_label_sequences"], ["", "", "def", "test_create_target_and_shifted_label_sequences", "(", ")", ":", "\n", "    ", "target_and_label", "=", "torch", ".", "tensor", "(", "[", "[", "C", ".", "BOS_ID", ",", "4", ",", "17", ",", "35", ",", "12", ",", "C", ".", "EOS_ID", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", "]", ",", "\n", "[", "C", ".", "BOS_ID", ",", "15", ",", "23", ",", "23", ",", "77", ",", "55", ",", "22", ",", "C", ".", "EOS_ID", "]", ",", "\n", "[", "C", ".", "BOS_ID", ",", "4", ",", "C", ".", "EOS_ID", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", "]", "]", ")", "\n", "expected_label", "=", "torch", ".", "tensor", "(", "[", "[", "4", ",", "17", ",", "35", ",", "12", ",", "C", ".", "EOS_ID", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", "]", ",", "\n", "[", "15", ",", "23", ",", "23", ",", "77", ",", "55", ",", "22", ",", "C", ".", "EOS_ID", "]", ",", "\n", "[", "4", ",", "C", ".", "EOS_ID", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", "]", "]", ")", ".", "unsqueeze", "(", "2", ")", "\n", "expected_target", "=", "torch", ".", "tensor", "(", "[", "[", "C", ".", "BOS_ID", ",", "4", ",", "17", ",", "35", ",", "12", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", "]", ",", "\n", "[", "C", ".", "BOS_ID", ",", "15", ",", "23", ",", "23", ",", "77", ",", "55", ",", "22", "]", ",", "\n", "[", "C", ".", "BOS_ID", ",", "4", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", ",", "C", ".", "PAD_ID", "]", "]", ")", ".", "unsqueeze", "(", "2", ")", "\n", "target_and_label", "=", "torch", ".", "unsqueeze", "(", "target_and_label", ",", "dim", "=", "2", ")", "\n", "expected_lengths", "=", "torch", ".", "tensor", "(", "[", "5", ",", "7", ",", "2", "]", ")", "\n", "\n", "target", ",", "label", "=", "data_io", ".", "create_target_and_shifted_label_sequences", "(", "target_and_label", ")", "\n", "\n", "assert", "target", ".", "shape", "[", "0", "]", "==", "label", ".", "shape", "[", "0", "]", "==", "target_and_label", ".", "shape", "[", "0", "]", "\n", "assert", "target", ".", "shape", "[", "1", "]", "==", "label", ".", "shape", "[", "1", "]", "==", "target_and_label", ".", "shape", "[", "1", "]", "-", "1", "\n", "assert", "torch", ".", "allclose", "(", "target", ",", "expected_target", ")", "\n", "assert", "torch", ".", "allclose", "(", "label", ",", "expected_label", ")", "\n", "lengths", "=", "(", "target", "!=", "C", ".", "PAD_ID", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "assert", "torch", ".", "allclose", "(", "lengths", ",", "expected_lengths", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_reranking.test_rerank_hypotheses": [[20, 51], ["pytest.mark.parametrize", "sockeye.Reranker", "rerank.Reranker.rerank"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.rerank.rerank"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"source, hypotheses, reference, expected_output, metric\"", ",", "[", "\n", "# test bleu as metric", "\n", "(", "\"El Parlamento no lib@@ era a Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "[", "\"No Liber@@ ation for Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", ",", "\n", "\"No Liber@@ ating Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", "]", ",", "\n", "\"Parliament Does Not Support Amendment Fre@@ eing Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "[", "'No Liber@@ ation for Ty@@ mo@@ sh@@ en@@ ko by Parliament'", ",", "\n", "'No Liber@@ ating Ty@@ mo@@ sh@@ en@@ ko by Parliament'", "]", ",", "\"bleu\"", ")", ",", "\n", "# test chrf as metric", "\n", "(", "\"El Parlamento no lib@@ era a Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "[", "\"No Liber@@ ation for Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", ",", "\n", "\"No Liber@@ ating Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", "]", ",", "\n", "\"Parliament Does Not Support Amendment Fre@@ eing Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "[", "'No Liber@@ ating Ty@@ mo@@ sh@@ en@@ ko by Parliament'", ",", "\n", "'No Liber@@ ation for Ty@@ mo@@ sh@@ en@@ ko by Parliament'", "]", ",", "\"chrf\"", ")", ",", "\n", "# test empty hypothesis", "\n", "(", "\"El Parlamento no lib@@ era a Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "[", "\"\"", ",", "\n", "\"No Liber@@ ating Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", "]", ",", "\n", "\"Parliament Does Not Support Amendment Fre@@ eing Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "[", "'No Liber@@ ating Ty@@ mo@@ sh@@ en@@ ko by Parliament'", ",", "\n", "''", "]", ",", "\"bleu\"", ")", ",", "\n", "]", ")", "\n", "def", "test_rerank_hypotheses", "(", "source", ",", "hypotheses", ",", "reference", ",", "expected_output", ",", "metric", ")", ":", "\n", "    ", "reranker", "=", "rerank", ".", "Reranker", "(", "metric", "=", "metric", ",", "isometric_alpha", "=", "0.5", ",", "return_score", "=", "False", ")", "\n", "hypotheses", "=", "{", "'sentence_id'", ":", "0", ",", "\n", "'text'", ":", "source", ",", "\n", "'translation'", ":", "''", ",", "\n", "'translations'", ":", "hypotheses", "}", "\n", "reranked_hypotheses", "=", "reranker", ".", "rerank", "(", "hypotheses", ",", "reference", ")", "\n", "assert", "reranked_hypotheses", "[", "'translations'", "]", "==", "expected_output", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_reranking.test_rerank_hypotheses_isometric": [[53, 82], ["pytest.mark.parametrize", "sockeye.Reranker", "rerank.Reranker.rerank"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.rerank.rerank"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"source, hypotheses, scores, reference, expected_output, metric\"", ",", "[", "\n", "# test isometric-ratio as metric", "\n", "(", "\"El Parlamento no lib@@ era a Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "[", "\"No Liber@@ ation for Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", ",", "\n", "\"No Liber@@ ating Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", "]", ",", "\n", "[", "[", "0.377", "]", ",", "[", "0.455", "]", "]", ",", "\n", "\"Parliament Does Not Support Amendment Fre@@ eing Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "[", "'No Liber@@ ating Ty@@ mo@@ sh@@ en@@ ko by Parliament'", ",", "\n", "'No Liber@@ ation for Ty@@ mo@@ sh@@ en@@ ko by Parliament'", "]", ",", "\n", "\"isometric-ratio\"", ")", ",", "\n", "# test isometric-lc", "\n", "(", "\"El Parlamento no lib@@ era a Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "[", "\"No Liber@@ ation for Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", ",", "\n", "\"No Liber@@ ating Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", "]", ",", "\n", "[", "[", "0.377", "]", ",", "[", "0.455", "]", "]", ",", "\n", "\"Parliament Does Not Support Amendment Fre@@ eing Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "[", "'No Liber@@ ating Ty@@ mo@@ sh@@ en@@ ko by Parliament'", ",", "\n", "'No Liber@@ ation for Ty@@ mo@@ sh@@ en@@ ko by Parliament'", "]", ",", "\n", "\"isometric-lc\"", ")", ",", "\n", "]", ")", "\n", "def", "test_rerank_hypotheses_isometric", "(", "source", ",", "hypotheses", ",", "scores", ",", "reference", ",", "expected_output", ",", "metric", ")", ":", "\n", "    ", "reranker", "=", "rerank", ".", "Reranker", "(", "metric", "=", "metric", ",", "isometric_alpha", "=", "0.5", ",", "return_score", "=", "False", ")", "\n", "hypotheses", "=", "{", "'sentence_id'", ":", "0", ",", "\n", "'text'", ":", "source", ",", "\n", "'translation'", ":", "''", ",", "\n", "'scores'", ":", "scores", ",", "\n", "'translations'", ":", "hypotheses", "}", "\n", "reranked_hypotheses", "=", "reranker", ".", "rerank", "(", "hypotheses", ",", "reference", ")", "\n", "assert", "reranked_hypotheses", "[", "'translations'", "]", "==", "expected_output", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_reranking.test_rerank_return_score": [[84, 101], ["pytest.mark.parametrize", "sockeye.Reranker", "rerank.Reranker.rerank", "numpy.allclose"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.rerank.rerank"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"source, hypotheses, reference, expected_scores\"", ",", "[", "\n", "(", "\"El Parlamento no lib@@ era a Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "[", "\"Completely different\"", ",", "\n", "\"No Liber@@ ating Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", "]", ",", "\n", "\"Parliament Does Not Support Amendment Fre@@ eing Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "[", "61.69564583930634", ",", "0.0", "]", ")", "\n", "]", ")", "\n", "def", "test_rerank_return_score", "(", "source", ",", "hypotheses", ",", "reference", ",", "expected_scores", ")", ":", "\n", "    ", "reranker", "=", "rerank", ".", "Reranker", "(", "metric", "=", "\"bleu\"", ",", "isometric_alpha", "=", "0.5", ",", "return_score", "=", "True", ")", "\n", "hypotheses", "=", "{", "'sentence_id'", ":", "0", ",", "\n", "'text'", ":", "source", ",", "\n", "'translation'", ":", "''", ",", "\n", "'translations'", ":", "hypotheses", "}", "\n", "reranked_hypotheses", "=", "reranker", ".", "rerank", "(", "hypotheses", ",", "reference", ")", "\n", "assert", "'scores'", "in", "reranked_hypotheses", "\n", "actual_scores", "=", "reranked_hypotheses", "[", "'scores'", "]", "\n", "assert", "np", ".", "allclose", "(", "actual_scores", ",", "expected_scores", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.unit.test_output_handler.test_stream_output_handler": [[55, 59], ["pytest.mark.parametrize", "handler.handle", "handler.stream.getvalue"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.FactoredStringOutputHandler.handle"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"handler, translation_input, translation_output, translation_walltime, expected_string\"", ",", "stream_handler_tests", ")", "\n", "def", "test_stream_output_handler", "(", "handler", ",", "translation_input", ",", "translation_output", ",", "translation_walltime", ",", "expected_string", ")", ":", "\n", "    ", "handler", ".", "handle", "(", "translation_input", ",", "translation_output", ",", "translation_walltime", ")", "\n", "assert", "handler", ".", "stream", ".", "getvalue", "(", ")", "==", "expected_string", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.system.test_seq_copy_sys.test_seq_copy": [[109, 156], ["pytest.mark.parametrize", "sockeye.test_utils.tmp_digits_dataset", "test.common.check_train_translate", "sockeye.utils.read_metrics_file", "sockeye.utils.read_metrics_file", "sockeye.utils.read_metrics_file", "min", "sockeye.evaluate.raw_corpus_bleu", "sockeye.evaluate.raw_corpus_bleu", "sockeye.evaluate.raw_corpus_bleu", "sockeye.evaluate.raw_corpus_chrf", "sockeye.evaluate.raw_corpus_chrf", "sockeye.evaluate.raw_corpus_chrf", "logger.info", "logger.info", "logger.info", "logger.info", "os.path.join", "sockeye.evaluate.raw_corpus_bleu", "sockeye.evaluate.raw_corpus_bleu", "sockeye.evaluate.raw_corpus_bleu"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.tmp_digits_dataset", "home.repos.pwc.inspect_result.awslabs_sockeye.test.common.check_train_translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.read_metrics_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.read_metrics_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.read_metrics_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_chrf", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_chrf", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_chrf", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"name, train_params, translate_params, use_prepared_data, \"", "\n", "\"perplexity_thresh, bleu_thresh\"", ",", "COPY_CASES", ")", "\n", "def", "test_seq_copy", "(", "name", ",", "train_params", ",", "translate_params", ",", "use_prepared_data", ",", "perplexity_thresh", ",", "bleu_thresh", ")", ":", "\n", "    ", "\"\"\"Task: copy short sequences of digits\"\"\"", "\n", "with", "tmp_digits_dataset", "(", "prefix", "=", "\"test_seq_copy\"", ",", "\n", "train_line_count", "=", "_TRAIN_LINE_COUNT", ",", "\n", "train_line_count_empty", "=", "_TRAIN_LINE_COUNT_EMPTY", ",", "\n", "train_max_length", "=", "_LINE_MAX_LENGTH", ",", "\n", "dev_line_count", "=", "_DEV_LINE_COUNT", ",", "\n", "dev_max_length", "=", "_LINE_MAX_LENGTH", ",", "\n", "test_line_count", "=", "_TEST_LINE_COUNT", ",", "\n", "test_line_count_empty", "=", "_TEST_LINE_COUNT_EMPTY", ",", "\n", "test_max_length", "=", "_TEST_MAX_LENGTH", ",", "\n", "sort_target", "=", "False", ",", "\n", "with_n_source_factors", "=", "0", ")", "as", "data", ":", "\n", "        ", "data", "=", "check_train_translate", "(", "train_params", "=", "train_params", ",", "\n", "translate_params", "=", "translate_params", ",", "\n", "data", "=", "data", ",", "\n", "use_prepared_data", "=", "use_prepared_data", ",", "\n", "max_seq_len", "=", "_LINE_MAX_LENGTH", ",", "\n", "compare_output", "=", "True", ",", "\n", "seed", "=", "seed", ")", "\n", "\n", "# get best validation perplexity", "\n", "metrics", "=", "sockeye", ".", "utils", ".", "read_metrics_file", "(", "os", ".", "path", ".", "join", "(", "data", "[", "'model'", "]", ",", "C", ".", "METRICS_NAME", ")", ")", "\n", "perplexity", "=", "min", "(", "m", "[", "C", ".", "PERPLEXITY", "+", "'-val'", "]", "for", "m", "in", "metrics", ")", "\n", "\n", "# compute metrics", "\n", "hypotheses", "=", "[", "json", "[", "'translation'", "]", "for", "json", "in", "data", "[", "'test_outputs'", "]", "]", "\n", "bleu", "=", "sockeye", ".", "evaluate", ".", "raw_corpus_bleu", "(", "hypotheses", "=", "hypotheses", ",", "references", "=", "data", "[", "'test_targets'", "]", ")", "\n", "chrf", "=", "sockeye", ".", "evaluate", ".", "raw_corpus_chrf", "(", "hypotheses", "=", "hypotheses", ",", "references", "=", "data", "[", "'test_targets'", "]", ")", "\n", "if", "'test_outputs_restricted'", "in", "data", ":", "\n", "            ", "hypotheses_restricted", "=", "[", "json", "[", "'translation'", "]", "for", "json", "in", "data", "[", "'test_outputs_restricted'", "]", "]", "\n", "bleu_restrict", "=", "sockeye", ".", "evaluate", ".", "raw_corpus_bleu", "(", "hypotheses", "=", "hypotheses_restricted", ",", "\n", "references", "=", "data", "[", "'test_targets'", "]", ")", "\n", "", "else", ":", "\n", "            ", "bleu_restrict", "=", "None", "\n", "\n", "", "logger", ".", "info", "(", "\"================\"", ")", "\n", "logger", ".", "info", "(", "\"test results: %s\"", ",", "name", ")", "\n", "logger", ".", "info", "(", "\"perplexity=%f, bleu=%f, bleu_restrict=%f chrf=%f\"", ",", "perplexity", ",", "bleu", ",", "bleu_restrict", ",", "chrf", ")", "\n", "logger", ".", "info", "(", "\"================\\n\"", ")", "\n", "\n", "assert", "perplexity", "<=", "perplexity_thresh", "\n", "assert", "bleu", ">=", "bleu_thresh", "\n", "if", "bleu_restrict", "is", "not", "None", ":", "\n", "            ", "assert", "bleu_restrict", ">=", "bleu_thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.system.test_seq_copy_sys.test_seq_sort": [[197, 240], ["pytest.mark.parametrize", "sockeye.test_utils.tmp_digits_dataset", "test.common.check_train_translate", "sockeye.utils.read_metrics_file", "sockeye.utils.read_metrics_file", "sockeye.utils.read_metrics_file", "min", "sockeye.evaluate.raw_corpus_bleu", "sockeye.evaluate.raw_corpus_bleu", "sockeye.evaluate.raw_corpus_bleu", "sockeye.evaluate.raw_corpus_chrf", "sockeye.evaluate.raw_corpus_chrf", "sockeye.evaluate.raw_corpus_chrf", "logger.info", "logger.info", "logger.info", "logger.info", "os.path.join", "sockeye.evaluate.raw_corpus_bleu", "sockeye.evaluate.raw_corpus_bleu", "sockeye.evaluate.raw_corpus_bleu"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.tmp_digits_dataset", "home.repos.pwc.inspect_result.awslabs_sockeye.test.common.check_train_translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.read_metrics_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.read_metrics_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.read_metrics_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_chrf", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_chrf", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_chrf", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"name, train_params, translate_params, use_prepared_data, n_source_factors, \"", "\n", "\"n_target_factors, perplexity_thresh, bleu_thresh\"", ",", "SORT_CASES", ")", "\n", "def", "test_seq_sort", "(", "name", ",", "train_params", ",", "translate_params", ",", "use_prepared_data", ",", "\n", "n_source_factors", ",", "n_target_factors", ",", "perplexity_thresh", ",", "bleu_thresh", ")", ":", "\n", "    ", "\"\"\"Task: sort short sequences of digits\"\"\"", "\n", "with", "tmp_digits_dataset", "(", "\"test_seq_sort.\"", ",", "\n", "_TRAIN_LINE_COUNT", ",", "_TRAIN_LINE_COUNT_EMPTY", ",", "_LINE_MAX_LENGTH", ",", "\n", "_DEV_LINE_COUNT", ",", "_LINE_MAX_LENGTH", ",", "\n", "_TEST_LINE_COUNT", ",", "_TEST_LINE_COUNT_EMPTY", ",", "_TEST_MAX_LENGTH", ",", "\n", "sort_target", "=", "True", ",", "seed_train", "=", "_SEED_TRAIN_DATA", ",", "seed_dev", "=", "_SEED_DEV_DATA", ",", "\n", "with_n_source_factors", "=", "n_source_factors", ",", "\n", "with_n_target_factors", "=", "n_target_factors", ")", "as", "data", ":", "\n", "        ", "data", "=", "check_train_translate", "(", "train_params", "=", "train_params", ",", "\n", "translate_params", "=", "translate_params", ",", "\n", "data", "=", "data", ",", "\n", "use_prepared_data", "=", "use_prepared_data", ",", "\n", "max_seq_len", "=", "_LINE_MAX_LENGTH", ",", "\n", "compare_output", "=", "True", ",", "\n", "seed", "=", "seed", ")", "\n", "\n", "# get best validation perplexity", "\n", "metrics", "=", "sockeye", ".", "utils", ".", "read_metrics_file", "(", "os", ".", "path", ".", "join", "(", "data", "[", "'model'", "]", ",", "C", ".", "METRICS_NAME", ")", ")", "\n", "perplexity", "=", "min", "(", "m", "[", "C", ".", "PERPLEXITY", "+", "'-val'", "]", "for", "m", "in", "metrics", ")", "\n", "\n", "# compute metrics", "\n", "hypotheses", "=", "[", "json", "[", "'translation'", "]", "for", "json", "in", "data", "[", "'test_outputs'", "]", "]", "\n", "bleu", "=", "sockeye", ".", "evaluate", ".", "raw_corpus_bleu", "(", "hypotheses", "=", "hypotheses", ",", "references", "=", "data", "[", "'test_targets'", "]", ")", "\n", "chrf", "=", "sockeye", ".", "evaluate", ".", "raw_corpus_chrf", "(", "hypotheses", "=", "hypotheses", ",", "references", "=", "data", "[", "'test_targets'", "]", ")", "\n", "if", "'test_outputs_restricted'", "in", "data", ":", "\n", "            ", "hypotheses_restricted", "=", "[", "json", "[", "'translation'", "]", "for", "json", "in", "data", "[", "'test_outputs_restricted'", "]", "]", "\n", "bleu_restrict", "=", "sockeye", ".", "evaluate", ".", "raw_corpus_bleu", "(", "hypotheses", "=", "hypotheses_restricted", ",", "\n", "references", "=", "data", "[", "'test_targets'", "]", ")", "\n", "", "else", ":", "\n", "            ", "bleu_restrict", "=", "None", "\n", "\n", "", "logger", ".", "info", "(", "\"================\"", ")", "\n", "logger", ".", "info", "(", "\"test results: %s\"", ",", "name", ")", "\n", "logger", ".", "info", "(", "\"perplexity=%f, bleu=%f, bleu_restrict=%f chrf=%f\"", ",", "perplexity", ",", "bleu", ",", "bleu_restrict", ",", "chrf", ")", "\n", "logger", ".", "info", "(", "\"================\\n\"", ")", "\n", "assert", "perplexity", "<=", "perplexity_thresh", "\n", "assert", "bleu", ">=", "bleu_thresh", "\n", "if", "bleu_restrict", "is", "not", "None", ":", "\n", "            ", "assert", "bleu_restrict", ">=", "bleu_thresh", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.ax_label": [[58, 62], ["None"], "function", ["None"], ["def", "ax_label", "(", "s", ")", ":", "\n", "    ", "if", "s", "in", "AX_LABEL", ":", "\n", "        ", "return", "AX_LABEL", "[", "s", "]", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.read_metrics_file": [[64, 74], ["collections.defaultdict", "open", "line.split", "metrics[].append", "int", "entry.split", "metrics[].append"], "function", ["None"], ["", "def", "read_metrics_file", "(", "fname", ")", ":", "\n", "    ", "metrics", "=", "defaultdict", "(", "list", ")", "\n", "for", "line", "in", "open", "(", "fname", ",", "encoding", "=", "'utf-8'", ")", ":", "\n", "        ", "entries", "=", "line", ".", "split", "(", ")", "\n", "metrics", "[", "'checkpoint'", "]", ".", "append", "(", "int", "(", "entries", "[", "0", "]", ")", ")", "\n", "for", "entry", "in", "entries", "[", "1", ":", "]", ":", "\n", "            ", "k", ",", "v", "=", "entry", ".", "split", "(", "'='", ")", "\n", "v", "=", "PARSE_ENTRY", "[", "k", "]", "(", "v", ")", "\n", "metrics", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.average_points": [[76, 84], ["bisect.insort", "averaged.append", "sum", "len"], "function", ["None"], ["", "def", "average_points", "(", "points", ",", "num_points", ",", "cmp", ")", ":", "\n", "    ", "averaged", "=", "[", "]", "\n", "best", "=", "[", "]", "\n", "for", "point", "in", "points", ":", "\n", "        ", "insort", "(", "best", ",", "point", ")", "\n", "best", "=", "best", "[", ":", "num_points", "]", "if", "cmp", "is", "min", "else", "best", "[", "-", "num_points", ":", "]", "\n", "averaged", ".", "append", "(", "sum", "(", "best", ")", "/", "len", "(", "best", ")", ")", "\n", "", "return", "averaged", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.points_since_improvement": [[86, 97], ["num_not_improved.append"], "function", ["None"], ["", "def", "points_since_improvement", "(", "points", ",", "cmp", ")", ":", "\n", "    ", "num_not_improved", "=", "[", "]", "\n", "best", "=", "None", "\n", "since_improvement", "=", "0", "\n", "for", "point", "in", "points", ":", "\n", "        ", "if", "best", "is", "None", "or", "(", "cmp", "is", "min", "and", "point", "<", "best", ")", "or", "(", "cmp", "is", "max", "and", "point", ">", "best", ")", ":", "\n", "            ", "best", "=", "point", "\n", "since_improvement", "=", "0", "\n", "", "num_not_improved", ".", "append", "(", "since_improvement", ")", "\n", "since_improvement", "+=", "1", "\n", "", "return", "num_not_improved", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.window_improvement": [[99, 113], ["window_improvement_at_point.append", "best_at_point.append", "len", "abs", "best_at_point.append", "best_at_point.append"], "function", ["None"], ["", "def", "window_improvement", "(", "points", ",", "num_points", ",", "cmp", ")", ":", "\n", "    ", "window_improvement_at_point", "=", "[", "]", "\n", "best_at_point", "=", "[", "]", "\n", "for", "point", "in", "points", ":", "\n", "        ", "if", "not", "best_at_point", ":", "\n", "            ", "best_at_point", ".", "append", "(", "point", ")", "\n", "", "elif", "(", "cmp", "is", "min", "and", "point", "<", "best_at_point", "[", "-", "1", "]", ")", "or", "(", "cmp", "is", "max", "and", "point", ">", "best_at_point", "[", "-", "1", "]", ")", ":", "\n", "            ", "best_at_point", ".", "append", "(", "point", ")", "\n", "", "else", ":", "\n", "            ", "best_at_point", ".", "append", "(", "best_at_point", "[", "-", "1", "]", ")", "\n", "", "if", "len", "(", "best_at_point", ")", ">", "num_points", ":", "\n", "            ", "best_at_point", "=", "best_at_point", "[", "-", "num_points", ":", "]", "\n", "", "window_improvement_at_point", ".", "append", "(", "abs", "(", "best_at_point", "[", "-", "1", "]", "-", "best_at_point", "[", "0", "]", ")", ")", "\n", "", "return", "window_improvement_at_point", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.slope": [[115, 123], ["range", "len", "list", "slope_at_point.append", "zip", "numpy.polyfit", "enumerate", "max"], "function", ["None"], ["", "def", "slope", "(", "points", ",", "num_points", ")", ":", "\n", "# First point has no slope", "\n", "    ", "slope_at_point", "=", "[", "0", "]", "\n", "# Start computing slope with second point", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "points", ")", ")", ":", "\n", "        ", "x", ",", "y", "=", "list", "(", "zip", "(", "*", "enumerate", "(", "points", "[", "max", "(", "i", "-", "num_points", ",", "0", ")", ":", "i", "+", "1", "]", ")", ")", ")", "\n", "slope_at_point", ".", "append", "(", "np", ".", "polyfit", "(", "x", ",", "y", ",", "1", ")", "[", "0", "]", ")", "\n", "", "return", "slope_at_point", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.plot_metrics": [[125, 229], ["matplotlib.subplots", "zip", "ax.grid", "ax.legend", "fig.tight_layout", "fig.savefig", "ax.twinx", "len", "len", "len", "len", "plot_metrics.read_metrics_file", "plot_metrics.ax_label", "plot_metrics.ax_label", "plot_metrics.ax_label", "zip", "ax.plot", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.title", "matplotlib.xticks", "matplotlib.yticks", "ax.axhline", "ax.axhline", "plot_metrics.average_points", "plot_metrics.points_since_improvement", "plot_metrics.window_improvement", "plot_metrics.slope", "ax.twinx.plot", "ax.twinx.set_ylabel", "os.path.basename", "numpy.linspace", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.read_metrics_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.ax_label", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.ax_label", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.ax_label", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.average_points", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.points_since_improvement", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.window_improvement", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.slope"], ["", "def", "plot_metrics", "(", "args", ")", ":", "\n", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "if", "args", ".", "y2", ":", "\n", "# Create axis for second Y metric", "\n", "        ", "ax2", "=", "ax", ".", "twinx", "(", ")", "\n", "", "overall_best_y", "=", "None", "\n", "\n", "if", "len", "(", "args", ".", "skip", ")", "==", "1", ":", "\n", "        ", "args", ".", "skip", "*=", "len", "(", "args", ".", "input", ")", "\n", "\n", "", "if", "len", "(", "args", ".", "every", ")", "==", "1", ":", "\n", "        ", "args", ".", "every", "*=", "len", "(", "args", ".", "input", ")", "\n", "\n", "# Paper scaling", "\n", "", "linewidth", "=", "1.25", "if", "args", ".", "paper", "else", "1.0", "\n", "label_size", "=", "12", "if", "args", ".", "paper", "else", "None", "\n", "title_size", "=", "16", "if", "args", ".", "paper", "else", "None", "\n", "legend_size", "=", "12", "if", "args", ".", "paper", "else", "None", "\n", "tick_size", "=", "12", "if", "args", ".", "paper", "else", "None", "\n", "\n", "for", "fname", ",", "label", ",", "skip", ",", "every", "in", "zip", "(", "args", ".", "input", ",", "\n", "args", ".", "legend", "if", "args", ".", "legend", "is", "not", "None", "\n", "else", "(", "path", ".", "basename", "(", "fname", ")", "for", "fname", "in", "args", ".", "input", ")", ",", "\n", "args", ".", "skip", ",", "\n", "args", ".", "every", ")", ":", "\n", "# Read metrics file to dict", "\n", "        ", "metrics", "=", "read_metrics_file", "(", "fname", ")", "\n", "x_vals", "=", "metrics", "[", "args", ".", "x", "]", "[", "skip", ":", "]", "\n", "y_vals", "=", "metrics", "[", "args", ".", "y", "]", "[", "skip", ":", "]", "\n", "y2_vals", "=", "metrics", "[", "args", ".", "y2", "]", "[", "skip", ":", "]", "if", "args", ".", "y2", "else", "None", "\n", "x_label", "=", "ax_label", "(", "args", ".", "x", ")", "\n", "y_label", "=", "ax_label", "(", "args", ".", "y", ")", "\n", "y2_label", "=", "ax_label", "(", "args", ".", "y2", ")", "\n", "# Spread points that collapse into one significant digit (ex: epochs)", "\n", "for", "i_label", ",", "i_vals", "in", "zip", "(", "[", "args", ".", "x", ",", "args", ".", "y", "]", ",", "[", "x_vals", ",", "y_vals", "]", ")", ":", "\n", "            ", "if", "i_label", "in", "[", "'epoch'", "]", ":", "\n", "                ", "i_vals", "[", ":", "]", "=", "np", ".", "linspace", "(", "i_vals", "[", "0", "]", ",", "i_vals", "[", "-", "1", "]", ",", "len", "(", "i_vals", ")", ")", "\n", "# Optionally invert Y values", "\n", "", "", "if", "args", ".", "y_invert", ":", "\n", "            ", "y_vals", "=", "[", "val", "*", "-", "1", "for", "val", "in", "y_vals", "]", "\n", "", "if", "args", ".", "y2_invert", ":", "\n", "            ", "y2_vals", "=", "[", "val", "*", "-", "1", "for", "val", "in", "y2_vals", "]", "\n", "# Optionally average best points so far for each Y point", "\n", "", "if", "args", ".", "y_average", "is", "not", "None", ":", "\n", "            ", "y_vals", "=", "average_points", "(", "y_vals", ",", "args", ".", "y_average", ",", "cmp", "=", "FIND_BEST", "[", "args", ".", "y", "]", ")", "\n", "y_label", "=", "'{} (Average of {} Points)'", ".", "format", "(", "y_label", ",", "args", ".", "y_average", ")", "\n", "# Optionally count points since last improvement for each Y point", "\n", "", "if", "args", ".", "y_since_best", ":", "\n", "            ", "y_vals", "=", "points_since_improvement", "(", "y_vals", ",", "cmp", "=", "FIND_BEST", "[", "args", ".", "y", "]", ")", "\n", "y_label", "=", "'{} (Checkpoints Since Improvement)'", ".", "format", "(", "y_label", ")", "\n", "# Optionally compute the window improvement for each Y point", "\n", "", "if", "args", ".", "y_window_improvement", "is", "not", "None", ":", "\n", "            ", "y_vals", "=", "window_improvement", "(", "y_vals", ",", "args", ".", "y_window_improvement", ",", "cmp", "=", "FIND_BEST", "[", "args", ".", "y", "]", ")", "\n", "# Don't plot points for which window improvement is unreliable", "\n", "# (fewer than number points used for window)", "\n", "x_vals", "=", "x_vals", "[", "args", ".", "y_window_improvement", "-", "1", ":", "]", "\n", "y_vals", "=", "y_vals", "[", "args", ".", "y_window_improvement", "-", "1", ":", "]", "\n", "y_label", "=", "'{} (Window Improvement over {} Points)'", ".", "format", "(", "y_label", ",", "args", ".", "y_window_improvement", ")", "\n", "# Optionally compute current slope for each Y point", "\n", "", "if", "args", ".", "y_slope", "is", "not", "None", ":", "\n", "            ", "y_vals", "=", "slope", "(", "y_vals", ",", "args", ".", "y_slope", ")", "\n", "# Don't plot points for which slope is unreliable (fewer than number", "\n", "# points used to compute slope)", "\n", "x_vals", "=", "x_vals", "[", "args", ".", "y_slope", "-", "1", ":", "]", "\n", "y_vals", "=", "y_vals", "[", "args", ".", "y_slope", "-", "1", ":", "]", "\n", "if", "y2_vals", ":", "\n", "                ", "y2_vals", "=", "y2_vals", "[", "args", ".", "y_slope", "-", "1", ":", "]", "\n", "", "y_label", "=", "'{} (Slope of {} Points)'", ".", "format", "(", "y_label", ",", "args", ".", "y_slope", ")", "\n", "# Only plot every N values", "\n", "", "x_vals", "=", "x_vals", "[", ":", ":", "every", "]", "\n", "y_vals", "=", "y_vals", "[", ":", ":", "every", "]", "\n", "if", "y2_vals", ":", "\n", "            ", "y2_vals", "=", "y2_vals", "[", ":", ":", "every", "]", "\n", "# Plot values for this metrics file", "\n", "", "ax", ".", "plot", "(", "x_vals", ",", "y_vals", ",", "linewidth", "=", "linewidth", ",", "alpha", "=", "0.75", ",", "label", "=", "label", ")", "\n", "ax", ".", "set_xlabel", "(", "x_label", ",", "fontsize", "=", "label_size", ")", "\n", "ax", ".", "set_ylabel", "(", "y_label", ",", "fontsize", "=", "label_size", ")", "\n", "plt", ".", "title", "(", "args", ".", "title", ",", "fontsize", "=", "title_size", ")", "\n", "plt", ".", "xticks", "(", "fontsize", "=", "tick_size", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "tick_size", ")", "\n", "# If present, plot and label second Y axis metric", "\n", "if", "args", ".", "y2", ":", "\n", "            ", "ax2", ".", "plot", "(", "x_vals", ",", "y2_vals", ",", "linewidth", "=", "linewidth", "/", "2", ",", "alpha", "=", "0.75", ",", "label", "=", "label", ")", "\n", "ax2", ".", "set_ylabel", "(", "y2_label", ",", "fontsize", "=", "label_size", ")", "\n", "# Optionally track best point so far", "\n", "", "if", "args", ".", "best", ":", "\n", "            ", "best_y", "=", "FIND_BEST", "[", "args", ".", "y", "]", "(", "y_vals", ")", "\n", "if", "overall_best_y", "is", "None", ":", "\n", "                ", "overall_best_y", "=", "best_y", "\n", "", "else", ":", "\n", "                ", "overall_best_y", "=", "FIND_BEST", "[", "args", ".", "y", "]", "(", "best_y", ",", "overall_best_y", ")", "\n", "# Optionally mark best Y point across metrics files", "\n", "", "", "", "if", "args", ".", "best", ":", "\n", "        ", "ax", ".", "axhline", "(", "y", "=", "overall_best_y", ",", "color", "=", "'gray'", ",", "linewidth", "=", "linewidth", ",", "linestyle", "=", "'--'", ",", "zorder", "=", "999", ")", "\n", "# Optionally draw user specified Y line", "\n", "", "if", "args", ".", "y_line", "is", "not", "None", ":", "\n", "        ", "ax", ".", "axhline", "(", "y", "=", "args", ".", "y_line", ",", "color", "=", "'gray'", ",", "linewidth", "=", "linewidth", ",", "linestyle", "=", "'--'", ",", "zorder", "=", "999", ")", "\n", "\n", "", "ax", ".", "grid", "(", ")", "\n", "ax", ".", "legend", "(", "fontsize", "=", "legend_size", ")", "\n", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "args", ".", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.main": [[231, 257], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "plot_metrics.plot_metrics"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.plot_metrics.plot_metrics"], ["", "def", "main", "(", ")", ":", "\n", "    ", "params", "=", "ArgumentParser", "(", "description", "=", "'Plot data from \\'metrics\\' files written during training.'", ")", "\n", "params", ".", "add_argument", "(", "'-i'", ",", "'--input'", ",", "required", "=", "True", ",", "nargs", "=", "'+'", ",", "help", "=", "'One or more \\'metrics\\' files to plot.'", ")", "\n", "params", ".", "add_argument", "(", "'-o'", ",", "'--output'", ",", "required", "=", "True", ",", "help", "=", "'Output file to write (ex: plot.pdf).'", ")", "\n", "params", ".", "add_argument", "(", "'-x'", ",", "default", "=", "'time-elapsed'", ",", "help", "=", "'X axis metric.'", ")", "\n", "params", ".", "add_argument", "(", "'-y'", ",", "default", "=", "'perplexity-train'", ",", "help", "=", "'Y axis metric.'", ")", "\n", "params", ".", "add_argument", "(", "'-y2'", ",", "help", "=", "'Second Y axis metric.'", ")", "\n", "params", ".", "add_argument", "(", "'-yi'", ",", "'--y-invert'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Invert Y metric (multiply values by -1).'", ")", "\n", "params", ".", "add_argument", "(", "'-y2i'", ",", "'--y2-invert'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Invert second Y metric (multiply values by -1).'", ")", "\n", "params", ".", "add_argument", "(", "'-ya'", ",", "'--y-average'", ",", "type", "=", "int", ",", "help", "=", "'Average the N best points so far for each Y value.'", ")", "\n", "params", ".", "add_argument", "(", "'-ysb'", ",", "'--y-since-best'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use number of points since improvement for each Y value.'", ")", "\n", "params", ".", "add_argument", "(", "'-ywi'", ",", "'--y-window-improvement'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Improvement in best over the last N points for each Y value.'", ")", "\n", "params", ".", "add_argument", "(", "'-ysl'", ",", "'--y-slope'", ",", "type", "=", "int", ",", "help", "=", "'Compute current slope for each Y value.'", ")", "\n", "params", ".", "add_argument", "(", "'-yli'", ",", "'--y-line'", ",", "type", "=", "float", ",", "help", "=", "'Draw a horizontal line at specified Y value.'", ")", "\n", "params", ".", "add_argument", "(", "'-l'", ",", "'--legend'", ",", "nargs", "=", "'+'", ",", "help", "=", "'Labels in legend (one per input file).'", ")", "\n", "params", ".", "add_argument", "(", "'-t'", ",", "'--title'", ",", "help", "=", "'Plot title.'", ")", "\n", "params", ".", "add_argument", "(", "'-b'", ",", "'--best'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Draw horizontal line at best Y value.'", ")", "\n", "params", ".", "add_argument", "(", "'-s'", ",", "'--skip'", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "default", "=", "(", "0", ",", ")", ",", "\n", "help", "=", "'Skip the first N points for better readability.  Single value or value per input.'", ")", "\n", "params", ".", "add_argument", "(", "'-ev'", ",", "'--every'", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "default", "=", "(", "1", ",", ")", ",", "help", "=", "'Only plot one point every N points.'", ")", "\n", "params", ".", "add_argument", "(", "'-p'", ",", "'--paper'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Scale plot elements for inclusion in papers.'", ")", "\n", "args", "=", "params", ".", "parse_args", "(", ")", "\n", "plot_metrics", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._get_ngrams": [[32, 48], ["set", "len", "range", "set.add", "tuple"], "function", ["None"], ["def", "_get_ngrams", "(", "n", ",", "text", ")", ":", "\n", "    ", "\"\"\"Calcualtes n-grams.\n\n    Args:\n      n: which n-grams to calculate\n      text: An array of tokens\n\n    Returns:\n      A set of n-grams\n    \"\"\"", "\n", "ngram_set", "=", "set", "(", ")", "\n", "text_length", "=", "len", "(", "text", ")", "\n", "max_index_ngram_start", "=", "text_length", "-", "n", "\n", "for", "i", "in", "range", "(", "max_index_ngram_start", "+", "1", ")", ":", "\n", "        ", "ngram_set", ".", "add", "(", "tuple", "(", "text", "[", "i", ":", "i", "+", "n", "]", ")", ")", "\n", "", "return", "ngram_set", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._split_into_words": [[50, 53], ["list", "itertools.chain", "_.split"], "function", ["None"], ["", "def", "_split_into_words", "(", "sentences", ")", ":", "\n", "    ", "\"\"\"Splits multiple sentences into words and flattens the result\"\"\"", "\n", "return", "list", "(", "itertools", ".", "chain", "(", "*", "[", "_", ".", "split", "(", "\" \"", ")", "for", "_", "in", "sentences", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._get_word_ngrams": [[55, 63], ["rouge._split_into_words", "rouge._get_ngrams", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._split_into_words", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._get_ngrams"], ["", "def", "_get_word_ngrams", "(", "n", ",", "sentences", ")", ":", "\n", "    ", "\"\"\"Calculates word n-grams for multiple sentences.\n    \"\"\"", "\n", "assert", "len", "(", "sentences", ")", ">", "0", "\n", "assert", "n", ">", "0", "\n", "\n", "words", "=", "_split_into_words", "(", "sentences", ")", "\n", "return", "_get_ngrams", "(", "n", ",", "words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._len_lcs": [[65, 81], ["rouge._lcs", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._lcs"], ["", "def", "_len_lcs", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Returns the length of the Longest Common Subsequence between sequences x\n    and y.\n    Source: http://www.algorithmist.com/index.php/Longest_Common_Subsequence\n\n    Args:\n      x: sequence of words\n      y: sequence of words\n\n    Returns\n      integer: Length of LCS between x and y\n    \"\"\"", "\n", "table", "=", "_lcs", "(", "x", ",", "y", ")", "\n", "n", ",", "m", "=", "len", "(", "x", ")", ",", "len", "(", "y", ")", "\n", "return", "table", "[", "n", ",", "m", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._lcs": [[83, 108], ["dict", "range", "len", "len", "range", "max"], "function", ["None"], ["", "def", "_lcs", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Computes the length of the longest common subsequence (lcs) between two\n    strings. The implementation below uses a DP programming algorithm and runs\n    in O(nm) time where n = len(x) and m = len(y).\n    Source: http://www.algorithmist.com/index.php/Longest_Common_Subsequence\n\n    Args:\n      x: collection of words\n      y: collection of words\n\n    Returns:\n      Table of dictionary of coord and len lcs\n    \"\"\"", "\n", "n", ",", "m", "=", "len", "(", "x", ")", ",", "len", "(", "y", ")", "\n", "table", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "n", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", "+", "1", ")", ":", "\n", "            ", "if", "i", "==", "0", "or", "j", "==", "0", ":", "\n", "                ", "table", "[", "i", ",", "j", "]", "=", "0", "\n", "", "elif", "x", "[", "i", "-", "1", "]", "==", "y", "[", "j", "-", "1", "]", ":", "\n", "                ", "table", "[", "i", ",", "j", "]", "=", "table", "[", "i", "-", "1", ",", "j", "-", "1", "]", "+", "1", "\n", "", "else", ":", "\n", "                ", "table", "[", "i", ",", "j", "]", "=", "max", "(", "table", "[", "i", "-", "1", ",", "j", "]", ",", "table", "[", "i", ",", "j", "-", "1", "]", ")", "\n", "", "", "", "return", "table", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._recon_lcs": [[110, 138], ["rouge._lcs", "tuple", "len", "len", "map", "rouge._recon_lcs._recon"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._lcs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.map"], ["", "def", "_recon_lcs", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Returns the Longest Subsequence between x and y.\n    Source: http://www.algorithmist.com/index.php/Longest_Common_Subsequence\n\n    Args:\n      x: sequence of words\n      y: sequence of words\n\n    Returns:\n      sequence: LCS of x and y\n    \"\"\"", "\n", "i", ",", "j", "=", "len", "(", "x", ")", ",", "len", "(", "y", ")", "\n", "table", "=", "_lcs", "(", "x", ",", "y", ")", "\n", "\n", "def", "_recon", "(", "i", ",", "j", ")", ":", "\n", "        ", "\"\"\"private recon calculation\"\"\"", "\n", "if", "i", "==", "0", "or", "j", "==", "0", ":", "\n", "            ", "return", "[", "]", "\n", "", "elif", "x", "[", "i", "-", "1", "]", "==", "y", "[", "j", "-", "1", "]", ":", "\n", "            ", "return", "_recon", "(", "i", "-", "1", ",", "j", "-", "1", ")", "+", "[", "(", "x", "[", "i", "-", "1", "]", ",", "i", ")", "]", "\n", "", "elif", "table", "[", "i", "-", "1", ",", "j", "]", ">", "table", "[", "i", ",", "j", "-", "1", "]", ":", "\n", "            ", "return", "_recon", "(", "i", "-", "1", ",", "j", ")", "\n", "", "else", ":", "\n", "            ", "return", "_recon", "(", "i", ",", "j", "-", "1", ")", "\n", "\n", "", "", "recon_tuple", "=", "tuple", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "_recon", "(", "i", ",", "j", ")", ")", ")", "\n", "return", "recon_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_n": [[140, 184], ["rouge._get_word_ngrams", "rouge._get_word_ngrams", "len", "len", "_get_word_ngrams.intersection", "len", "ValueError", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._get_word_ngrams", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._get_word_ngrams"], ["", "def", "rouge_n", "(", "evaluated_sentences", ",", "reference_sentences", ",", "n", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Computes ROUGE-N of two text collections of sentences.\n    Sourece: http://research.microsoft.com/en-us/um/people/cyl/download/\n    papers/rouge-working-note-v1.3.1.pdf\n\n    Args:\n      evaluated_sentences: The sentences that have been picked by the summarizer\n      reference_sentences: The sentences from the referene set\n      n: Size of ngram.  Defaults to 2.\n\n    Returns:\n      A tuple (f1, precision, recall) for ROUGE-N\n\n    Raises:\n      ValueError: raises exception if a param has len <= 0\n    \"\"\"", "\n", "if", "len", "(", "evaluated_sentences", ")", "<=", "0", "or", "len", "(", "reference_sentences", ")", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Collections must contain at least 1 sentence.\"", ")", "\n", "\n", "", "evaluated_ngrams", "=", "_get_word_ngrams", "(", "n", ",", "evaluated_sentences", ")", "\n", "reference_ngrams", "=", "_get_word_ngrams", "(", "n", ",", "reference_sentences", ")", "\n", "reference_count", "=", "len", "(", "reference_ngrams", ")", "\n", "evaluated_count", "=", "len", "(", "evaluated_ngrams", ")", "\n", "\n", "# Gets the overlapping ngrams between evaluated and reference", "\n", "overlapping_ngrams", "=", "evaluated_ngrams", ".", "intersection", "(", "reference_ngrams", ")", "\n", "overlapping_count", "=", "len", "(", "overlapping_ngrams", ")", "\n", "\n", "# Handle edge case. This isn't mathematically correct, but it's good enough", "\n", "if", "evaluated_count", "==", "0", ":", "\n", "        ", "precision", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "precision", "=", "overlapping_count", "/", "evaluated_count", "\n", "\n", "# Handle edge case for recall, same as for precision", "\n", "", "if", "reference_count", "==", "0", ":", "\n", "        ", "recall", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "recall", "=", "overlapping_count", "/", "reference_count", "\n", "", "f1_score", "=", "2.0", "*", "(", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", "+", "1e-8", ")", ")", "\n", "\n", "# return overlapping_count / reference_count", "\n", "return", "f1_score", ",", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._f_p_r_lcs": [[186, 207], ["None"], "function", ["None"], ["", "def", "_f_p_r_lcs", "(", "llcs", ",", "m", ",", "n", ")", ":", "\n", "    ", "\"\"\"\n    Computes the LCS-based F-measure score\n    Source: http://research.microsoft.com/en-us/um/people/cyl/download/papers/\n    rouge-working-note-v1.3.1.pdf\n\n    Args:\n      llcs: Length of LCS\n      m: number of words in reference summary\n      n: number of words in candidate summary\n\n    Returns:\n      Float. LCS-based F-measure score\n    \"\"\"", "\n", "r_lcs", "=", "llcs", "/", "m", "\n", "p_lcs", "=", "llcs", "/", "n", "\n", "beta", "=", "p_lcs", "/", "(", "r_lcs", "+", "1e-12", ")", "\n", "num", "=", "(", "1", "+", "(", "beta", "**", "2", ")", ")", "*", "r_lcs", "*", "p_lcs", "\n", "denom", "=", "r_lcs", "+", "(", "(", "beta", "**", "2", ")", "*", "p_lcs", ")", "\n", "f_lcs", "=", "num", "/", "(", "denom", "+", "1e-12", ")", "\n", "return", "f_lcs", ",", "p_lcs", ",", "r_lcs", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_l_sentence_level": [[209, 244], ["rouge._split_into_words", "rouge._split_into_words", "len", "len", "rouge._len_lcs", "rouge._f_p_r_lcs", "ValueError", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._split_into_words", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._split_into_words", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._len_lcs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._f_p_r_lcs"], ["", "def", "rouge_l_sentence_level", "(", "evaluated_sentences", ",", "reference_sentences", ")", ":", "\n", "    ", "\"\"\"\n    Computes ROUGE-L (sentence level) of two text collections of sentences.\n    http://research.microsoft.com/en-us/um/people/cyl/download/papers/\n    rouge-working-note-v1.3.1.pdf\n\n    Calculated according to:\n    R_lcs = LCS(X,Y)/m\n    P_lcs = LCS(X,Y)/n\n    F_lcs = ((1 + beta^2)*R_lcs*P_lcs) / (R_lcs + (beta^2) * P_lcs)\n\n    where:\n    X = reference summary\n    Y = Candidate summary\n    m = length of reference summary\n    n = length of candidate summary\n\n    Args:\n      evaluated_sentences: The sentences that have been picked by the summarizer\n      reference_sentences: The sentences from the referene set\n\n    Returns:\n      A float: F_lcs\n\n    Raises:\n      ValueError: raises exception if a param has len <= 0\n    \"\"\"", "\n", "if", "len", "(", "evaluated_sentences", ")", "<=", "0", "or", "len", "(", "reference_sentences", ")", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Collections must contain at least 1 sentence.\"", ")", "\n", "", "reference_words", "=", "_split_into_words", "(", "reference_sentences", ")", "\n", "evaluated_words", "=", "_split_into_words", "(", "evaluated_sentences", ")", "\n", "m", "=", "len", "(", "reference_words", ")", "\n", "n", "=", "len", "(", "evaluated_words", ")", "\n", "lcs", "=", "_len_lcs", "(", "evaluated_words", ",", "reference_words", ")", "\n", "return", "_f_p_r_lcs", "(", "lcs", ",", "m", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._union_lcs": [[246, 281], ["set", "rouge._split_into_words", "len", "len", "ValueError", "rouge._split_into_words", "set", "len", "lcs_union.union.union", "rouge._recon_lcs"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._split_into_words", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._split_into_words", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._recon_lcs"], ["", "def", "_union_lcs", "(", "evaluated_sentences", ",", "reference_sentence", ")", ":", "\n", "    ", "\"\"\"\n    Returns LCS_u(r_i, C) which is the LCS score of the union longest common\n    subsequence between reference sentence ri and candidate summary C. For example\n    if r_i= w1 w2 w3 w4 w5, and C contains two sentences: c1 = w1 w2 w6 w7 w8 and\n    c2 = w1 w3 w8 w9 w5, then the longest common subsequence of r_i and c1 is\n    \u201cw1 w2\u201d and the longest common subsequence of r_i and c2 is \u201cw1 w3 w5\u201d. The\n    union longest common subsequence of r_i, c1, and c2 is \u201cw1 w2 w3 w5\u201d and\n    LCS_u(r_i, C) = 4/5.\n\n    Args:\n      evaluated_sentences: The sentences that have been picked by the summarizer\n      reference_sentence: One of the sentences in the reference summaries\n\n    Returns:\n      float: LCS_u(r_i, C)\n\n    ValueError:\n      Raises exception if a param has len <= 0\n    \"\"\"", "\n", "if", "len", "(", "evaluated_sentences", ")", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Collections must contain at least 1 sentence.\"", ")", "\n", "\n", "", "lcs_union", "=", "set", "(", ")", "\n", "reference_words", "=", "_split_into_words", "(", "[", "reference_sentence", "]", ")", "\n", "combined_lcs_length", "=", "0", "\n", "for", "eval_s", "in", "evaluated_sentences", ":", "\n", "        ", "evaluated_words", "=", "_split_into_words", "(", "[", "eval_s", "]", ")", "\n", "lcs", "=", "set", "(", "_recon_lcs", "(", "reference_words", ",", "evaluated_words", ")", ")", "\n", "combined_lcs_length", "+=", "len", "(", "lcs", ")", "\n", "lcs_union", "=", "lcs_union", ".", "union", "(", "lcs", ")", "\n", "\n", "", "union_lcs_count", "=", "len", "(", "lcs_union", ")", "\n", "union_lcs_value", "=", "union_lcs_count", "/", "combined_lcs_length", "\n", "return", "union_lcs_value", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_l_summary_level": [[283, 325], ["len", "len", "rouge._f_p_r_lcs", "ValueError", "rouge._split_into_words", "rouge._split_into_words", "rouge._union_lcs", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._f_p_r_lcs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._split_into_words", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._split_into_words", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge._union_lcs"], ["", "def", "rouge_l_summary_level", "(", "evaluated_sentences", ",", "reference_sentences", ")", ":", "\n", "    ", "\"\"\"\n    Computes ROUGE-L (summary level) of two text collections of sentences.\n    http://research.microsoft.com/en-us/um/people/cyl/download/papers/\n    rouge-working-note-v1.3.1.pdf\n\n    Calculated according to:\n    R_lcs = SUM(1, u)[LCS<union>(r_i,C)]/m\n    P_lcs = SUM(1, u)[LCS<union>(r_i,C)]/n\n    F_lcs = ((1 + beta^2)*R_lcs*P_lcs) / (R_lcs + (beta^2) * P_lcs)\n\n    where:\n    SUM(i,u) = SUM from i through u\n    u = number of sentences in reference summary\n    C = Candidate summary made up of v sentences\n    m = number of words in reference summary\n    n = number of words in candidate summary\n\n    Args:\n      evaluated_sentences: The sentences that have been picked by the summarizer\n      reference_sentence: One of the sentences in the reference summaries\n\n    Returns:\n      A float: F_lcs\n\n    Raises:\n      ValueError: raises exception if a param has len <= 0\n    \"\"\"", "\n", "if", "len", "(", "evaluated_sentences", ")", "<=", "0", "or", "len", "(", "reference_sentences", ")", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Collections must contain at least 1 sentence.\"", ")", "\n", "\n", "# total number of words in reference sentences", "\n", "", "m", "=", "len", "(", "_split_into_words", "(", "reference_sentences", ")", ")", "\n", "\n", "# total number of words in evaluated sentences", "\n", "n", "=", "len", "(", "_split_into_words", "(", "evaluated_sentences", ")", ")", "\n", "\n", "union_lcs_sum_across_all_references", "=", "0", "\n", "for", "ref_s", "in", "reference_sentences", ":", "\n", "        ", "union_lcs_sum_across_all_references", "+=", "_union_lcs", "(", "evaluated_sentences", ",", "\n", "ref_s", ")", "\n", "", "return", "_f_p_r_lcs", "(", "union_lcs_sum_across_all_references", ",", "m", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge": [[327, 365], ["map", "map", "map", "rouge.rouge_n", "zip", "rouge.rouge_n", "zip", "rouge.rouge_l_sentence_level", "zip", "zip", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.map", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.map", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.map", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_n", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_n", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_l_sentence_level"], ["", "def", "rouge", "(", "hypotheses", ",", "references", ")", ":", "\n", "    ", "\"\"\"Calculates average rouge scores for a list of hypotheses and\n    references\"\"\"", "\n", "\n", "# Filter out hyps that are of 0 length", "\n", "# hyps_and_refs = zip(hypotheses, references)", "\n", "# hyps_and_refs = [_ for _ in hyps_and_refs if len(_[0]) > 0]", "\n", "# hypotheses, references = zip(*hyps_and_refs)", "\n", "\n", "# Calculate ROUGE-1 F1, precision, recall scores", "\n", "rouge_1", "=", "[", "\n", "rouge_n", "(", "[", "hyp", "]", ",", "[", "ref", "]", ",", "1", ")", "for", "hyp", ",", "ref", "in", "zip", "(", "hypotheses", ",", "references", ")", "\n", "]", "\n", "rouge_1_f", ",", "rouge_1_p", ",", "rouge_1_r", "=", "map", "(", "np", ".", "mean", ",", "zip", "(", "*", "rouge_1", ")", ")", "\n", "\n", "# Calculate ROUGE-2 F1, precision, recall scores", "\n", "rouge_2", "=", "[", "\n", "rouge_n", "(", "[", "hyp", "]", ",", "[", "ref", "]", ",", "2", ")", "for", "hyp", ",", "ref", "in", "zip", "(", "hypotheses", ",", "references", ")", "\n", "]", "\n", "rouge_2_f", ",", "rouge_2_p", ",", "rouge_2_r", "=", "map", "(", "np", ".", "mean", ",", "zip", "(", "*", "rouge_2", ")", ")", "\n", "\n", "# Calculate ROUGE-L F1, precision, recall scores", "\n", "rouge_l", "=", "[", "\n", "rouge_l_sentence_level", "(", "[", "hyp", "]", ",", "[", "ref", "]", ")", "\n", "for", "hyp", ",", "ref", "in", "zip", "(", "hypotheses", ",", "references", ")", "\n", "]", "\n", "rouge_l_f", ",", "rouge_l_p", ",", "rouge_l_r", "=", "map", "(", "np", ".", "mean", ",", "zip", "(", "*", "rouge_l", ")", ")", "\n", "\n", "return", "{", "\n", "\"rouge_1/f_score\"", ":", "rouge_1_f", ",", "\n", "\"rouge_1/r_score\"", ":", "rouge_1_r", ",", "\n", "\"rouge_1/p_score\"", ":", "rouge_1_p", ",", "\n", "\"rouge_2/f_score\"", ":", "rouge_2_f", ",", "\n", "\"rouge_2/r_score\"", ":", "rouge_2_r", ",", "\n", "\"rouge_2/p_score\"", ":", "rouge_2_p", ",", "\n", "\"rouge_l/f_score\"", ":", "rouge_l_f", ",", "\n", "\"rouge_l/r_score\"", ":", "rouge_l_r", ",", "\n", "\"rouge_l/p_score\"", ":", "rouge_l_p", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_1": [[368, 377], ["map", "rouge.rouge_n", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.map", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_n"], ["", "def", "rouge_1", "(", "hypotheses", ",", "references", ")", ":", "\n", "    ", "\"\"\"\n    Calculate ROUGE-1 F1, precision, recall scores\n    \"\"\"", "\n", "rouge_1", "=", "[", "\n", "rouge_n", "(", "[", "hyp", "]", ",", "[", "ref", "]", ",", "1", ")", "for", "hyp", ",", "ref", "in", "zip", "(", "hypotheses", ",", "references", ")", "\n", "]", "\n", "rouge_1_f", ",", "_", ",", "_", "=", "map", "(", "np", ".", "mean", ",", "zip", "(", "*", "rouge_1", ")", ")", "\n", "return", "rouge_1_f", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_2": [[379, 388], ["map", "rouge.rouge_n", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.map", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_n"], ["", "def", "rouge_2", "(", "hypotheses", ",", "references", ")", ":", "\n", "    ", "\"\"\"\n    Calculate ROUGE-2 F1, precision, recall scores\n    \"\"\"", "\n", "rouge_2", "=", "[", "\n", "rouge_n", "(", "[", "hyp", "]", ",", "[", "ref", "]", ",", "2", ")", "for", "hyp", ",", "ref", "in", "zip", "(", "hypotheses", ",", "references", ")", "\n", "]", "\n", "rouge_2_f", ",", "_", ",", "_", "=", "map", "(", "np", ".", "mean", ",", "zip", "(", "*", "rouge_2", ")", ")", "\n", "return", "rouge_2_f", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_l": [[390, 400], ["map", "rouge.rouge_l_sentence_level", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.map", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_l_sentence_level"], ["", "def", "rouge_l", "(", "hypotheses", ",", "references", ")", ":", "\n", "    ", "\"\"\"\n    Calculate ROUGE-L F1, precision, recall scores\n    \"\"\"", "\n", "rouge_l", "=", "[", "\n", "rouge_l_sentence_level", "(", "[", "hyp", "]", ",", "[", "ref", "]", ")", "\n", "for", "hyp", ",", "ref", "in", "zip", "(", "hypotheses", ",", "references", ")", "\n", "]", "\n", "rouge_l_f", ",", "_", ",", "_", "=", "map", "(", "np", ".", "mean", ",", "zip", "(", "*", "rouge_l", ")", ")", "\n", "return", "rouge_l_f", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.vistools.generate_graphs._add_graph_level": [[80, 98], ["enumerate", "graph.add_node", "graph.add_edge", "float", "float"], "function", ["None"], ["def", "_add_graph_level", "(", "graph", ",", "level", ",", "parent_ids", ",", "names", ",", "scores", ",", "normalized_scores", ",", "\n", "include_pad", ")", ":", "\n", "    ", "\"\"\"Adds a level to the passed graph\"\"\"", "\n", "for", "i", ",", "parent_id", "in", "enumerate", "(", "parent_ids", ")", ":", "\n", "        ", "if", "not", "include_pad", "and", "names", "[", "i", "]", "==", "PAD_TOKEN", ":", "\n", "            ", "continue", "\n", "", "new_node", "=", "(", "level", ",", "i", ")", "\n", "parent_node", "=", "(", "level", "-", "1", ",", "parent_id", ")", "\n", "raw_score", "=", "'%.3f'", "%", "float", "(", "scores", "[", "i", "]", ")", "if", "scores", "[", "i", "]", "is", "not", "None", "else", "'-inf'", "\n", "norm_score", "=", "'%.3f'", "%", "float", "(", "normalized_scores", "[", "i", "]", ")", "if", "normalized_scores", "[", "i", "]", "is", "not", "None", "else", "'-inf'", "\n", "\n", "graph", ".", "add_node", "(", "new_node", ")", "\n", "graph", ".", "node", "[", "new_node", "]", "[", "\"name\"", "]", "=", "names", "[", "i", "]", "\n", "graph", ".", "node", "[", "new_node", "]", "[", "\"score\"", "]", "=", "\"[RAW] {}\"", ".", "format", "(", "raw_score", ")", "\n", "graph", ".", "node", "[", "new_node", "]", "[", "\"norm_score\"", "]", "=", "\"[NORM] {}\"", ".", "format", "(", "norm_score", ")", "\n", "graph", ".", "node", "[", "new_node", "]", "[", "\"size\"", "]", "=", "100", "\n", "# Add an edge to the parent", "\n", "graph", ".", "add_edge", "(", "parent_node", ",", "new_node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.vistools.generate_graphs.create_graph": [[99, 109], ["len", "networkx.DiGraph", "range", "generate_graphs._add_graph_level"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.vistools.generate_graphs._add_graph_level"], ["", "", "def", "create_graph", "(", "predicted_ids", ",", "parent_ids", ",", "scores", ",", "normalized_scores", ",", "include_pad", ")", ":", "\n", "\n", "    ", "seq_length", "=", "len", "(", "predicted_ids", ")", "\n", "graph", "=", "nx", ".", "DiGraph", "(", ")", "\n", "for", "level", "in", "range", "(", "seq_length", ")", ":", "\n", "        ", "names", "=", "[", "pred", "for", "pred", "in", "predicted_ids", "[", "level", "]", "]", "\n", "_add_graph_level", "(", "graph", ",", "level", "+", "1", ",", "parent_ids", "[", "level", "]", ",", "names", ",", "\n", "scores", "[", "level", "]", ",", "normalized_scores", "[", "level", "]", ",", "include_pad", ")", "\n", "", "graph", ".", "node", "[", "(", "0", ",", "0", ")", "]", "[", "\"name\"", "]", "=", "\"START\"", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.vistools.generate_graphs.generate": [[110, 140], ["os.path.dirname", "shutil.copy2", "shutil.copy2", "print", "os.path.realpath", "os.path.exists", "os.makedirs", "open", "enumerate", "json.loads", "generate_graphs.create_graph", "json.dumps", "HTML_TEMPLATE.substitute", "os.path.join", "networkx.readwrite.json_graph.tree_data", "open", "out.write", "str"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.vistools.generate_graphs.create_graph"], ["", "def", "generate", "(", "input_data", ",", "output_dir", ",", "include_pad", "=", "False", ")", ":", "\n", "\n", "    ", "path_base", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "# Copy required files", "\n", "", "shutil", ".", "copy2", "(", "path_base", "+", "\"/templates/tree.css\"", ",", "output_dir", ")", "\n", "shutil", ".", "copy2", "(", "path_base", "+", "\"/templates/tree.js\"", ",", "output_dir", ")", "\n", "\n", "with", "open", "(", "input_data", ")", "as", "beams", ":", "\n", "        ", "for", "i", ",", "line", "in", "enumerate", "(", "beams", ")", ":", "\n", "            ", "beam", "=", "json", ".", "loads", "(", "line", ")", "\n", "\n", "graph", "=", "create_graph", "(", "predicted_ids", "=", "beam", "[", "\"predicted_tokens\"", "]", ",", "\n", "parent_ids", "=", "beam", "[", "\"parent_ids\"", "]", ",", "\n", "scores", "=", "beam", "[", "\"scores\"", "]", ",", "\n", "normalized_scores", "=", "beam", "[", "\"normalized_scores\"", "]", ",", "\n", "include_pad", "=", "include_pad", ")", "\n", "\n", "json_str", "=", "json", ".", "dumps", "(", "\n", "json_graph", ".", "tree_data", "(", "graph", ",", "(", "0", ",", "0", ")", ")", ",", "\n", "ensure_ascii", "=", "True", ")", "\n", "\n", "html_str", "=", "HTML_TEMPLATE", ".", "substitute", "(", "DATA", "=", "json_str", ",", "SENT", "=", "str", "(", "i", ")", ")", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"{:06d}.html\"", ".", "format", "(", "i", ")", ")", "\n", "with", "open", "(", "output_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "out", ":", "\n", "                ", "out", ".", "write", "(", "html_str", ")", "\n", "", "", "", "print", "(", "\"Output beams written to: {}\"", ".", "format", "(", "output_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.vistools.generate_graphs.main": [[141, 155], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.parse_args", "generate_graphs.generate"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.vistools.generate_graphs.generate"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Generate beam search visualizations\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-d\"", ",", "\"--data\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"path to the beam search data file\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-o\"", ",", "\"--output_dir\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"path to the output directory\"", ")", "\n", "parser", ".", "add_argument", "(", "'--pad'", ",", "dest", "=", "'include_pad'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-pad'", ",", "dest", "=", "'include_pad'", ",", "action", "=", "'store_false'", ")", "\n", "parser", ".", "set_defaults", "(", "include_pad", "=", "False", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "generate", "(", "args", ".", "data", ",", "args", ".", "output_dir", ",", "include_pad", "=", "args", ".", "include_pad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.benchmark.benchmark_to_output.read_benchmark_handler_output": [[20, 25], ["line.strip().split", "dict", "line.strip", "field.split"], "function", ["None"], ["def", "read_benchmark_handler_output", "(", "stream", ":", "str", ")", "->", "Iterator", "[", "Dict", "[", "str", ",", "str", "]", "]", ":", "\n", "    ", "for", "line", "in", "stream", ":", "\n", "        ", "fields", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "entry", "=", "dict", "(", "field", ".", "split", "(", "'='", ",", "1", ")", "for", "field", "in", "fields", ")", "\n", "yield", "entry", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.benchmark.benchmark_to_output.get_output_from_benchmark_output": [[27, 30], ["benchmark_to_output.read_benchmark_handler_output", "sys.stdin"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.benchmark.benchmark_to_percentiles.read_benchmark_handler_output"], ["", "", "def", "get_output_from_benchmark_output", "(", "input_stream", ")", "->", "Iterator", "[", "str", "]", ":", "\n", "    ", "for", "entry", "in", "read_benchmark_handler_output", "(", "input_stream", ")", ":", "\n", "        ", "yield", "entry", "[", "'output'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.benchmark.benchmark_to_output.main": [[32, 35], ["benchmark_to_output.get_output_from_benchmark_output", "print"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.benchmark.benchmark_to_output.get_output_from_benchmark_output"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "for", "output", "in", "get_output_from_benchmark_output", "(", "sys", ".", "stdin", ")", ":", "\n", "        ", "print", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.benchmark.benchmark_to_percentiles.read_benchmark_handler_output": [[20, 25], ["line.strip().split", "dict", "line.strip", "field.split"], "function", ["None"], ["def", "read_benchmark_handler_output", "(", "stream", ":", "str", ")", "->", "Iterator", "[", "Dict", "[", "str", ",", "str", "]", "]", ":", "\n", "    ", "for", "line", "in", "stream", ":", "\n", "        ", "fields", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "entry", "=", "dict", "(", "field", ".", "split", "(", "'='", ",", "1", ")", "for", "field", "in", "fields", ")", "\n", "yield", "entry", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.benchmark.benchmark_to_percentiles.compute_percentiles": [[27, 39], ["min", "min", "int", "sorted", "sorted", "int", "sorted", "len", "zip", "len", "len", "len"], "function", ["None"], ["", "", "def", "compute_percentiles", "(", "lengths", ":", "List", "[", "int", "]", ",", "length_percentile", ":", "int", ",", "\n", "times", ":", "List", "[", "float", "]", ",", "time_percentile", ":", "int", ")", "->", "Tuple", "[", "int", ",", "float", "]", ":", "\n", "# Length percentile", "\n", "    ", "lp_i", "=", "min", "(", "int", "(", "(", "length_percentile", "/", "100", ")", "*", "len", "(", "lengths", ")", ")", ",", "len", "(", "lengths", ")", "-", "1", ")", "\n", "lp", "=", "sorted", "(", "lengths", ")", "[", "lp_i", "]", "\n", "\n", "# Time percentile (of length percentile)", "\n", "percentile_points", "=", "sorted", "(", "zip", "(", "lengths", ",", "times", ")", ")", "[", ":", "lp_i", "+", "1", "]", "\n", "percentile_times", "=", "[", "point", "[", "1", "]", "for", "point", "in", "percentile_points", "]", "\n", "tp_i", "=", "min", "(", "int", "(", "(", "time_percentile", "/", "100", ")", "*", "len", "(", "percentile_times", ")", ")", ",", "len", "(", "percentile_times", ")", "-", "1", ")", "\n", "tp", "=", "sorted", "(", "percentile_times", ")", "[", "tp_i", "]", "\n", "return", "lp", ",", "tp", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.benchmark.benchmark_to_percentiles.percentiles_from_benchmark_output": [[41, 48], ["benchmark_to_percentiles.read_benchmark_handler_output", "benchmark_to_percentiles.compute_percentiles", "input_lengths.append", "translation_times.append", "int", "float"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.benchmark.benchmark_to_percentiles.read_benchmark_handler_output", "home.repos.pwc.inspect_result.awslabs_sockeye.benchmark.benchmark_to_percentiles.compute_percentiles"], ["", "def", "percentiles_from_benchmark_output", "(", "input_stream", ",", "length_percentile", ":", "int", ",", "time_percentile", ":", "int", ")", "->", "Tuple", "[", "int", ",", "float", "]", ":", "\n", "    ", "input_lengths", "=", "[", "]", "\n", "translation_times", "=", "[", "]", "\n", "for", "entry", "in", "read_benchmark_handler_output", "(", "input_stream", ")", ":", "\n", "        ", "input_lengths", ".", "append", "(", "int", "(", "entry", "[", "'input_tokens'", "]", ")", ")", "\n", "translation_times", ".", "append", "(", "float", "(", "entry", "[", "'translation_time'", "]", ")", ")", "\n", "", "return", "compute_percentiles", "(", "input_lengths", ",", "length_percentile", ",", "translation_times", ",", "time_percentile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.benchmark.benchmark_to_percentiles.main": [[50, 76], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "print", "open", "benchmark_to_percentiles.percentiles_from_benchmark_output"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.benchmark.benchmark_to_percentiles.percentiles_from_benchmark_output"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Report length and time percentiles for benchmark output'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--input'", ",", "\n", "'-i'", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\n", "'Input file (result of sockeye.translate with \\'benchmark\\' output)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--length-percentile'", ",", "\n", "'-lp'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "99", ",", "\n", "help", "=", "'Percentile to report for input length. Default: %(default)s'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--time-percentile'", ",", "\n", "'-tp'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "99", ",", "\n", "help", "=", "'Percentile to report for translation time. Default: %(default)s'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "with", "open", "(", "args", ".", "input", ")", "as", "inp", ":", "\n", "        ", "lp", ",", "tp", "=", "percentiles_from_benchmark_output", "(", "inp", ",", "args", ".", "length_percentile", ",", "args", ".", "time_percentile", ")", "\n", "", "print", "(", "'P{}\\t{:d}'", ".", "format", "(", "args", ".", "length_percentile", ",", "lp", ")", ")", "\n", "print", "(", "'P{}/{}\\t{:0.3f}'", ".", "format", "(", "args", ".", "time_percentile", ",", "args", ".", "length_percentile", ",", "tp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.seqcopy.genseqcopy.to_str": [[15, 18], ["str"], "function", ["None"], ["def", "to_str", "(", "l", ")", ":", "\n", "    ", "for", "x", "in", "l", ":", "\n", "        ", "yield", "str", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.seqcopy.genseqcopy.write_data": [[33, 43], ["open", "open", "open", "open", "print", "print", "print", "print"], "function", ["None"], ["def", "write_data", "(", "samples", ",", "prefix", ")", ":", "\n", "    ", "with", "open", "(", "\"data/%s.source\"", "%", "prefix", ",", "\"w\"", ")", "as", "source", ",", "open", "(", "\"data/%s.source.factor\"", "%", "prefix", ",", "\"w\"", ")", "as", "source_factor", ",", "open", "(", "\"data/%s.target\"", "%", "prefix", ",", "\"w\"", ")", "as", "target", ",", "open", "(", "\"data/%s.target.factor\"", "%", "prefix", ",", "\"w\"", ")", "as", "target_factor", ":", "\n", "        ", "for", "s", ",", "sf", ",", "tf", "in", "samples", ":", "\n", "            ", "print", "(", "s", ",", "file", "=", "source", ")", "\n", "print", "(", "sf", ",", "file", "=", "source_factor", ")", "\n", "print", "(", "s", ",", "file", "=", "target", ")", "\n", "print", "(", "tf", ",", "file", "=", "target_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.multilingual.remove_tag_from_translations.parse_args": [[10, 19], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--verbose\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "help", "=", "\"Print tag statistics to STDERR after removing tags.\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.multilingual.remove_tag_from_translations.is_tag": [[20, 24], ["len"], "function", ["None"], ["", "def", "is_tag", "(", "token", ")", ":", "\n", "    ", "if", "token", "[", "0", "]", "==", "\"<\"", "and", "token", "[", "-", "1", "]", "==", "\">\"", ":", "\n", "        ", "if", "len", "(", "token", ")", "==", "5", ":", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.multilingual.remove_tag_from_translations.main": [[26, 62], ["remove_tag_from_translations.parse_args", "logging.basicConfig", "logging.debug", "collections.defaultdict", "line.strip().split", "remove_tag_from_translations.is_tag", "print", "logging.debug", "logging.debug", "line.strip().split.pop", "remove_tag_from_translations.is_tag", "str", "line.strip", "keep_tokens.append"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.multilingual.remove_tag_from_translations.is_tag", "home.repos.pwc.inspect_result.awslabs_sockeye.multilingual.remove_tag_from_translations.is_tag"], ["", "", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ")", "\n", "logging", ".", "debug", "(", "args", ")", "\n", "\n", "stat_dict", "=", "defaultdict", "(", "int", ")", "\n", "\n", "for", "line", "in", "sys", ".", "stdin", ":", "\n", "\n", "        ", "tokens", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "\n", "if", "is_tag", "(", "tokens", "[", "0", "]", ")", ":", "\n", "            ", "tag", "=", "tokens", "[", "0", "]", "\n", "tokens", ".", "pop", "(", "0", ")", "\n", "stat_dict", "[", "tag", "]", "+=", "1", "\n", "", "else", ":", "\n", "            ", "stat_dict", "[", "\"NO_START_TAG\"", "]", "+=", "1", "\n", "\n", "", "keep_tokens", "=", "[", "]", "\n", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "if", "is_tag", "(", "token", ")", ":", "\n", "                ", "stat_dict", "[", "\"TAG_WITHIN_SENTENCE\"", "]", "+=", "1", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "keep_tokens", ".", "append", "(", "token", ")", "\n", "\n", "", "", "line", "=", "\" \"", ".", "join", "(", "keep_tokens", ")", "\n", "\n", "print", "(", "line", ")", "\n", "\n", "", "if", "args", ".", "verbose", ":", "\n", "        ", "logging", ".", "debug", "(", "\"Stats of tags encountered:\"", ")", "\n", "logging", ".", "debug", "(", "str", "(", "stat_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.multilingual.add_tag_to_lines.parse_args": [[8, 16], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--tag\"", ",", "type", "=", "str", ",", "help", "=", "\"Special tag to indicate language\"", ",", "required", "=", "True", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.multilingual.add_tag_to_lines.main": [[18, 47], ["add_tag_to_lines.parse_args", "logging.basicConfig", "logging.debug", "line.strip().split", "print", "logging.debug", "logging.warning", "logging.error", "sys.exit", "line.strip"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ")", "\n", "logging", ".", "debug", "(", "args", ")", "\n", "\n", "num_bad", "=", "0", "\n", "\n", "for", "line", "in", "sys", ".", "stdin", ":", "\n", "\n", "        ", "tokens", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "\n", "if", "tokens", "[", "0", "]", "[", "0", "]", "==", "\"<\"", "and", "tokens", "[", "0", "]", "[", "-", "1", "]", "==", "\">\"", ":", "\n", "            ", "logging", ".", "warning", "(", "\"First token of sentence already seems to be a special language tag: '%s'.\"", "%", "tokens", "[", "0", "]", ")", "\n", "num_bad", "+=", "1", "\n", "\n", "", "if", "tokens", "[", "0", "]", "==", "args", ".", "tag", ":", "\n", "            ", "logging", ".", "error", "(", "\"Sentence already has '%s' as first token. Do not run this script twice.\"", "%", "args", ".", "tag", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "tokens", "=", "[", "args", ".", "tag", "]", "+", "tokens", "\n", "\n", "", "line", "=", "\" \"", ".", "join", "(", "tokens", ")", "\n", "\n", "print", "(", "line", ")", "\n", "\n", "", "if", "num_bad", ">", "0", ":", "\n", "        ", "logging", ".", "debug", "(", "\"Number of times sentences had a first token of the form '<...>': %d.\"", "%", "num_bad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.main": [[39, 44], ["arguments.ConfigArgumentParser", "arguments.add_translate_cli_args", "arguments.ConfigArgumentParser.parse_args", "translate.run_translate"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_translate_cli_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.run_translate"], ["def", "main", "(", ")", ":", "\n", "    ", "params", "=", "arguments", ".", "ConfigArgumentParser", "(", "description", "=", "'Translate CLI'", ")", "\n", "arguments", ".", "add_translate_cli_args", "(", "params", ")", "\n", "args", "=", "params", ".", "parse_args", "(", ")", "\n", "run_translate", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.run_translate": [[46, 151], ["sockeye.utils.seed_rngs", "sockeye.utils.log_basic_info", "sockeye.output_handler.get_output_handler", "logger.info", "sockeye.model.load_models", "inference.CandidateScorer", "inference.CandidateScorer.to", "inference.Translator", "translate.read_and_translate", "sockeye.log.setup_main_logger", "sockeye.log.setup_main_logger", "torch.cuda.is_available", "logger.info", "torch.device", "torch.device", "logger.info", "model.eval", "int", "logger.warning", "str", "len", "sockeye.lexicon.load_restrict_lexicon", "logger.info", "sockeye.utils.check_condition", "dict", "logger.info", "sockeye.output_handler.get_output_handler.reports_score", "time.time", "sockeye.lexicon.load_restrict_lexicon", "sum", "len", "ValueError"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.seed_rngs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.log_basic_info", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.get_output_handler", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.load_models", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.read_and_translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.setup_main_logger", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.setup_main_logger", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.load_restrict_lexicon", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.FactoredStringOutputHandler.reports_score", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.load_restrict_lexicon"], ["", "def", "run_translate", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "# Seed randomly unless a seed has been passed", "\n", "    ", "seed_rngs", "(", "args", ".", "seed", "if", "args", ".", "seed", "is", "not", "None", "else", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "\n", "if", "args", ".", "output", "is", "not", "None", ":", "\n", "        ", "setup_main_logger", "(", "console", "=", "not", "args", ".", "quiet", ",", "\n", "file_logging", "=", "not", "args", ".", "no_logfile", ",", "\n", "path", "=", "\"%s.%s\"", "%", "(", "args", ".", "output", ",", "C", ".", "LOG_NAME", ")", ",", "\n", "level", "=", "args", ".", "loglevel", ")", "\n", "", "else", ":", "\n", "        ", "setup_main_logger", "(", "file_logging", "=", "False", ",", "level", "=", "args", ".", "loglevel", ")", "\n", "\n", "", "log_basic_info", "(", "args", ")", "\n", "\n", "if", "args", ".", "nbest_size", ">", "1", ":", "\n", "        ", "if", "args", ".", "output_type", "!=", "C", ".", "OUTPUT_HANDLER_JSON", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "\"For nbest translation, you must specify `--output-type '%s'; overriding your setting of '%s'.\"", ",", "\n", "C", ".", "OUTPUT_HANDLER_JSON", ",", "args", ".", "output_type", ")", "\n", "args", ".", "output_type", "=", "C", ".", "OUTPUT_HANDLER_JSON", "\n", "", "", "output_handler", "=", "get_output_handler", "(", "args", ".", "output_type", ",", "\n", "args", ".", "output", ")", "\n", "\n", "use_cpu", "=", "args", ".", "use_cpu", "\n", "if", "not", "pt", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"CUDA not available, using cpu\"", ")", "\n", "use_cpu", "=", "True", "\n", "", "device", "=", "pt", ".", "device", "(", "'cpu'", ")", "if", "use_cpu", "else", "pt", ".", "device", "(", "'cuda'", ",", "args", ".", "device_id", ")", "\n", "logger", ".", "info", "(", "f\"Translate Device: {device}\"", ")", "\n", "models", ",", "source_vocabs", ",", "target_vocabs", "=", "load_models", "(", "device", "=", "device", ",", "\n", "model_folders", "=", "args", ".", "models", ",", "\n", "checkpoints", "=", "args", ".", "checkpoints", ",", "\n", "dtype", "=", "args", ".", "dtype", ",", "\n", "inference_only", "=", "True", ")", "\n", "\n", "restrict_lexicon", "=", "None", "# type: Optional[Union[RestrictLexicon, Dict[str, RestrictLexicon]]]", "\n", "if", "args", ".", "restrict_lexicon", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "str", "(", "args", ".", "restrict_lexicon", ")", ")", "\n", "if", "len", "(", "args", ".", "restrict_lexicon", ")", "==", "1", ":", "\n", "# Single lexicon used for all inputs.", "\n", "# Handle a single arg of key:path or path (parsed as path:path)", "\n", "            ", "restrict_lexicon", "=", "load_restrict_lexicon", "(", "args", ".", "restrict_lexicon", "[", "0", "]", "[", "1", "]", ",", "source_vocabs", "[", "0", "]", ",", "target_vocabs", "[", "0", "]", ",", "\n", "k", "=", "args", ".", "restrict_lexicon_topk", ")", "\n", "logger", ".", "info", "(", "f\"Loaded a single lexicon ({args.restrict_lexicon[0][0]}) that will be applied to all inputs.\"", ")", "\n", "", "else", ":", "\n", "            ", "check_condition", "(", "args", ".", "json_input", ",", "\n", "\"JSON input is required when using multiple lexicons for vocabulary restriction\"", ")", "\n", "# Multiple lexicons with specified names", "\n", "restrict_lexicon", "=", "dict", "(", ")", "\n", "for", "key", ",", "path", "in", "args", ".", "restrict_lexicon", ":", "\n", "                ", "lexicon", "=", "load_restrict_lexicon", "(", "path", ",", "source_vocabs", "[", "0", "]", ",", "target_vocabs", "[", "0", "]", ",", "k", "=", "args", ".", "restrict_lexicon_topk", ")", "\n", "restrict_lexicon", "[", "key", "]", "=", "lexicon", "\n", "\n", "", "", "", "brevity_penalty_weight", "=", "args", ".", "brevity_penalty_weight", "\n", "if", "args", ".", "brevity_penalty_type", "==", "C", ".", "BREVITY_PENALTY_CONSTANT", ":", "\n", "        ", "if", "args", ".", "brevity_penalty_constant_length_ratio", ">", "0.0", ":", "\n", "            ", "constant_length_ratio", "=", "args", ".", "brevity_penalty_constant_length_ratio", "\n", "", "else", ":", "\n", "            ", "constant_length_ratio", "=", "sum", "(", "model", ".", "length_ratio_mean", "for", "model", "in", "models", ")", "/", "len", "(", "models", ")", "\n", "logger", ".", "info", "(", "\"Using average of constant length ratios saved in the model configs: %f\"", ",", "\n", "constant_length_ratio", ")", "\n", "", "", "elif", "args", ".", "brevity_penalty_type", "==", "C", ".", "BREVITY_PENALTY_LEARNED", ":", "\n", "        ", "constant_length_ratio", "=", "-", "1.0", "\n", "", "elif", "args", ".", "brevity_penalty_type", "==", "C", ".", "BREVITY_PENALTY_NONE", ":", "\n", "        ", "brevity_penalty_weight", "=", "0.0", "\n", "constant_length_ratio", "=", "-", "1.0", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown brevity penalty type %s\"", "%", "args", ".", "brevity_penalty_type", ")", "\n", "\n", "", "for", "model", "in", "models", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "\n", "", "scorer", "=", "inference", ".", "CandidateScorer", "(", "\n", "length_penalty_alpha", "=", "args", ".", "length_penalty_alpha", ",", "\n", "length_penalty_beta", "=", "args", ".", "length_penalty_beta", ",", "\n", "brevity_penalty_weight", "=", "brevity_penalty_weight", ")", "\n", "scorer", ".", "to", "(", "models", "[", "0", "]", ".", "dtype", ")", "\n", "\n", "translator", "=", "inference", ".", "Translator", "(", "device", "=", "device", ",", "\n", "ensemble_mode", "=", "args", ".", "ensemble_mode", ",", "\n", "scorer", "=", "scorer", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "beam_size", "=", "args", ".", "beam_size", ",", "\n", "beam_search_stop", "=", "args", ".", "beam_search_stop", ",", "\n", "nbest_size", "=", "args", ".", "nbest_size", ",", "\n", "models", "=", "models", ",", "\n", "source_vocabs", "=", "source_vocabs", ",", "\n", "target_vocabs", "=", "target_vocabs", ",", "\n", "restrict_lexicon", "=", "restrict_lexicon", ",", "\n", "strip_unknown_words", "=", "args", ".", "strip_unknown_words", ",", "\n", "sample", "=", "args", ".", "sample", ",", "\n", "output_scores", "=", "output_handler", ".", "reports_score", "(", ")", ",", "\n", "constant_length_ratio", "=", "constant_length_ratio", ",", "\n", "max_output_length_num_stds", "=", "args", ".", "max_output_length_num_stds", ",", "\n", "max_input_length", "=", "args", ".", "max_input_length", ",", "\n", "max_output_length", "=", "args", ".", "max_output_length", ",", "\n", "prevent_unk", "=", "args", ".", "prevent_unk", ",", "\n", "greedy", "=", "args", ".", "greedy", ")", "\n", "\n", "read_and_translate", "(", "translator", "=", "translator", ",", "\n", "output_handler", "=", "output_handler", ",", "\n", "chunk_size", "=", "args", ".", "chunk_size", ",", "\n", "input_file", "=", "args", ".", "input", ",", "\n", "input_factors", "=", "args", ".", "input_factors", ",", "\n", "input_is_json", "=", "args", ".", "json_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.make_inputs": [[153, 196], ["sockeye.utils.check_condition", "enumerate", "sockeye.utils.check_condition", "contextlib.ExitStack", "enumerate", "exit_stack.enter_context", "zip", "inference.make_input_from_json_string", "inference.make_input_from_factored_string", "len", "sockeye.utils.smart_open", "len", "inference.make_input_from_json_string", "inference.make_input_from_multiple_strings", "list"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_multiple_strings"], ["", "def", "make_inputs", "(", "input_file", ":", "Optional", "[", "str", "]", ",", "\n", "translator", ":", "inference", ".", "Translator", ",", "\n", "input_is_json", ":", "bool", ",", "\n", "input_factors", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ")", "->", "Generator", "[", "inference", ".", "TranslatorInput", ",", "None", ",", "None", "]", ":", "\n", "    ", "\"\"\"\n    Generates TranslatorInput instances from input. If input is None, reads from stdin. If num_input_factors > 1,\n    the function will look for factors attached to each token, separated by '|'.\n    If source is not None, reads from the source file. If num_source_factors > 1, num_source_factors source factor\n    filenames are required.\n\n    :param input_file: The source file (possibly None).\n    :param translator: Translator that will translate each line of input.\n    :param input_is_json: Whether the input is in json format.\n    :param input_factors: Source factor files.\n    :return: TranslatorInput objects.\n    \"\"\"", "\n", "if", "input_file", "is", "None", ":", "\n", "        ", "check_condition", "(", "input_factors", "is", "None", ",", "\"Translating from STDIN, not expecting any factor files.\"", ")", "\n", "for", "sentence_id", ",", "line", "in", "enumerate", "(", "sys", ".", "stdin", ",", "1", ")", ":", "\n", "            ", "if", "input_is_json", ":", "\n", "                ", "yield", "inference", ".", "make_input_from_json_string", "(", "sentence_id", "=", "sentence_id", ",", "\n", "json_string", "=", "line", ",", "\n", "translator", "=", "translator", ")", "\n", "", "else", ":", "\n", "                ", "yield", "inference", ".", "make_input_from_factored_string", "(", "sentence_id", "=", "sentence_id", ",", "\n", "factored_string", "=", "line", ",", "\n", "translator", "=", "translator", ")", "\n", "", "", "", "else", ":", "\n", "        ", "input_factors", "=", "[", "]", "if", "input_factors", "is", "None", "else", "input_factors", "\n", "inputs", "=", "[", "input_file", "]", "+", "input_factors", "\n", "if", "not", "input_is_json", ":", "\n", "            ", "check_condition", "(", "translator", ".", "num_source_factors", "==", "len", "(", "inputs", ")", ",", "\n", "\"Model(s) require %d factors, but %d given (through --input and --input-factors).\"", "%", "(", "\n", "translator", ".", "num_source_factors", ",", "len", "(", "inputs", ")", ")", ")", "\n", "", "with", "ExitStack", "(", ")", "as", "exit_stack", ":", "\n", "            ", "streams", "=", "[", "exit_stack", ".", "enter_context", "(", "smart_open", "(", "i", ")", ")", "for", "i", "in", "inputs", "]", "\n", "for", "sentence_id", ",", "inputs", "in", "enumerate", "(", "zip", "(", "*", "streams", ")", ",", "1", ")", ":", "\n", "                ", "if", "input_is_json", ":", "\n", "                    ", "yield", "inference", ".", "make_input_from_json_string", "(", "sentence_id", "=", "sentence_id", ",", "\n", "json_string", "=", "inputs", "[", "0", "]", ",", "\n", "translator", "=", "translator", ")", "\n", "", "else", ":", "\n", "                    ", "yield", "inference", ".", "make_input_from_multiple_strings", "(", "sentence_id", "=", "sentence_id", ",", "strings", "=", "list", "(", "inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.read_and_translate": [[198, 240], ["logger.info", "sockeye.utils.grouper", "translate.make_inputs", "translate.translate", "len", "logger.info", "logger.info", "logger.warning"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.grouper", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.make_inputs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator.translate"], ["", "", "", "", "", "def", "read_and_translate", "(", "translator", ":", "inference", ".", "Translator", ",", "\n", "output_handler", ":", "OutputHandler", ",", "\n", "chunk_size", ":", "Optional", "[", "int", "]", ",", "\n", "input_file", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "input_factors", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", "input_is_json", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Reads from either a file or stdin and translates each line, calling the output_handler with the result.\n\n    :param output_handler: Handler that will write output to a stream.\n    :param translator: Translator that will translate each line of input.\n    :param chunk_size: The size of the portion to read at a time from the input.\n    :param input_file: Optional path to file which will be translated line-by-line if included, if none use stdin.\n    :param input_factors: Optional list of paths to files that contain source factors.\n    :param input_is_json: Whether the input is in json format.\n    \"\"\"", "\n", "if", "chunk_size", "is", "None", ":", "\n", "        ", "if", "translator", ".", "max_batch_size", "==", "1", ":", "\n", "# No batching, therefore there is not need to read segments in chunks.", "\n", "            ", "chunk_size", "=", "C", ".", "CHUNK_SIZE_NO_BATCHING", "\n", "", "else", ":", "\n", "# Get a constant number of batches per call to Translator.translate.", "\n", "            ", "chunk_size", "=", "C", ".", "CHUNK_SIZE_PER_BATCH_SEGMENT", "*", "translator", ".", "max_batch_size", "\n", "", "", "else", ":", "\n", "        ", "if", "chunk_size", "<", "translator", ".", "max_batch_size", ":", "\n", "            ", "logger", ".", "warning", "(", "\"You specified a chunk size (%d) smaller than the max batch size (%d). This will lead to \"", "\n", "\"a reduction in translation speed. Consider choosing a larger chunk size.\"", ",", "\n", "chunk_size", ",", "translator", ".", "max_batch_size", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"Translating...\"", ")", "\n", "\n", "total_time", ",", "total_lines", "=", "0.0", ",", "0", "\n", "for", "chunk", "in", "grouper", "(", "make_inputs", "(", "input_file", ",", "translator", ",", "input_is_json", ",", "input_factors", ")", ",", "size", "=", "chunk_size", ")", ":", "\n", "        ", "chunk_time", "=", "translate", "(", "output_handler", ",", "chunk", ",", "translator", ")", "\n", "total_lines", "+=", "len", "(", "chunk", ")", "\n", "total_time", "+=", "chunk_time", "\n", "\n", "", "if", "total_lines", "!=", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Processed %d lines. Total time: %.4f, sec/sent: %.4f, sent/sec: %.4f\"", ",", "\n", "total_lines", ",", "total_time", ",", "total_time", "/", "total_lines", ",", "total_lines", "/", "total_time", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Processed 0 lines.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.translate.translate": [[242, 260], ["time.time", "translator.translate", "zip", "time.time", "len", "output_handler.handle"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator.translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.FactoredStringOutputHandler.handle"], ["", "", "def", "translate", "(", "output_handler", ":", "OutputHandler", ",", "\n", "trans_inputs", ":", "List", "[", "inference", ".", "TranslatorInput", "]", ",", "\n", "translator", ":", "inference", ".", "Translator", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Translates each line from source_data, calling output handler after translating a batch.\n\n    :param output_handler: A handler that will be called once with the output of each translation.\n    :param trans_inputs: A enumerable list of translator inputs.\n    :param translator: The translator that will be used for each line of input.\n    :return: Total time taken.\n    \"\"\"", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "trans_outputs", "=", "translator", ".", "translate", "(", "trans_inputs", ")", "\n", "total_time", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "batch_time", "=", "total_time", "/", "len", "(", "trans_inputs", ")", "\n", "for", "trans_input", ",", "trans_output", "in", "zip", "(", "trans_inputs", ",", "trans_outputs", ")", ":", "\n", "        ", "output_handler", ".", "handle", "(", "trans_input", ",", "trans_output", ",", "batch_time", ")", "\n", "", "return", "total_time", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._Inference.state_structure": [[35, 38], ["NotImplementedError"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "state_structure", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._Inference.encode_and_initialize": [[39, 44], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "encode_and_initialize", "(", "self", ",", "\n", "inputs", ":", "pt", ".", "Tensor", ",", "\n", "valid_length", ":", "pt", ".", "Tensor", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._Inference.decode_step": [[45, 53], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "decode_step", "(", "self", ",", "\n", "step_input", ":", "pt", ".", "Tensor", ",", "\n", "states", ":", "List", ",", "\n", "vocab_slice_ids", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "\n", "target_prefix_factor_mask", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "\n", "factor_vocab_size", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._Inference.model_output_vocab_size": [[54, 57], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_output_vocab_size", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._Inference.model_output_factor_vocab_size": [[58, 61], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_output_factor_vocab_size", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._SingleModelInference.__init__": [[65, 72], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model", ":", "SockeyeModel", ",", "\n", "skip_softmax", ":", "bool", "=", "False", ",", "\n", "constant_length_ratio", ":", "float", "=", "0.0", ")", "->", "None", ":", "\n", "        ", "self", ".", "_model", "=", "model", "\n", "self", ".", "_skip_softmax", "=", "skip_softmax", "\n", "self", ".", "_const_lr", "=", "constant_length_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._SingleModelInference.state_structure": [[73, 75], ["beam_search._SingleModelInference._model.state_structure"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.state_structure"], ["", "def", "state_structure", "(", "self", ")", "->", "List", ":", "\n", "        ", "return", "[", "self", ".", "_model", ".", "state_structure", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._SingleModelInference.encode_and_initialize": [[76, 79], ["beam_search._SingleModelInference._model.encode_and_initialize"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.encode_and_initialize"], ["", "def", "encode_and_initialize", "(", "self", ",", "inputs", ":", "pt", ".", "Tensor", ",", "valid_length", ":", "pt", ".", "Tensor", ")", ":", "\n", "        ", "states", ",", "predicted_output_length", ",", "nvs_prediction", "=", "self", ".", "_model", ".", "encode_and_initialize", "(", "inputs", ",", "valid_length", ",", "self", ".", "_const_lr", ")", "\n", "return", "states", ",", "predicted_output_length", ",", "nvs_prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._SingleModelInference.decode_step": [[80, 108], ["beam_search._SingleModelInference._model.decode_step", "torch.log_softmax", "enumerate", "torch.cat().unsqueeze", "predictions.append", "torch.cat", "torch.log_softmax", "target_prefix_factor_mask[].reshape", "len", "torch.cat", "tf_scores.min"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.decode_step"], ["", "def", "decode_step", "(", "self", ",", "\n", "step_input", ":", "pt", ".", "Tensor", ",", "\n", "states", ":", "List", ",", "\n", "vocab_slice_ids", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "\n", "target_prefix_factor_mask", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "\n", "factor_vocab_size", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "logits", ",", "states", ",", "target_factor_outputs", "=", "self", ".", "_model", ".", "decode_step", "(", "step_input", ",", "states", ",", "vocab_slice_ids", ")", "\n", "if", "not", "self", ".", "_skip_softmax", ":", "\n", "            ", "logits", "=", "pt", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "", "scores", "=", "-", "logits", "# shape: (batch*beam, output_vocab_size/len(vocab_slice_ids))", "\n", "\n", "target_factors", "=", "None", "# type: Optional[pt.Tensor]", "\n", "if", "target_factor_outputs", ":", "\n", "            ", "predictions", "=", "[", "]", "# type: List[pt.Tensor]", "\n", "for", "i", ",", "tf_logits", "in", "enumerate", "(", "target_factor_outputs", ",", "1", ")", ":", "\n", "                ", "if", "not", "self", ".", "_skip_softmax", ":", "\n", "                    ", "tf_logits", "=", "pt", ".", "log_softmax", "(", "tf_logits", ",", "dim", "=", "-", "1", ")", "\n", "", "tf_scores", "=", "-", "tf_logits", "\n", "if", "target_prefix_factor_mask", "is", "not", "None", ":", "\n", "                    ", "tf_scores", "+=", "target_prefix_factor_mask", "[", ":", ",", ":", ",", "i", "-", "1", "]", ".", "reshape", "(", "-", "1", ",", "factor_vocab_size", ")", "\n", "# target factors are greedily chosen, and score and index are collected via torch.min.", "\n", "# Shape per factor: (batch*beam, 1, 2), where last dimension holds values and indices.", "\n", "", "tf_prediction", "=", "pt", ".", "cat", "(", "tf_scores", ".", "min", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "predictions", ".", "append", "(", "tf_prediction", ")", "\n", "# Shape: (batch*beam, num_secondary_factors, 2)", "\n", "", "target_factors", "=", "pt", ".", "cat", "(", "predictions", ",", "dim", "=", "1", ")", "if", "len", "(", "predictions", ")", ">", "1", "else", "predictions", "[", "0", "]", "\n", "\n", "", "return", "scores", ",", "states", ",", "target_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._SingleModelInference.model_output_vocab_size": [[109, 112], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_output_vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_model", ".", "output_layer_vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._SingleModelInference.model_output_factor_vocab_size": [[113, 116], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_output_factor_vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_model", ".", "factor_vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._EnsembleInference.__init__": [[120, 132], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "models", ":", "List", "[", "SockeyeModel", "]", ",", "\n", "ensemble_mode", ":", "str", "=", "'linear'", ",", "\n", "constant_length_ratio", ":", "float", "=", "0.0", ")", "->", "None", ":", "\n", "        ", "self", ".", "_models", "=", "models", "\n", "if", "ensemble_mode", "==", "'linear'", ":", "\n", "            ", "self", ".", "_interpolation", "=", "self", ".", "linear_interpolation", "\n", "", "elif", "ensemble_mode", "==", "'log_linear'", ":", "\n", "            ", "self", ".", "_interpolation", "=", "self", ".", "log_linear_interpolation", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "", "self", ".", "_const_lr", "=", "constant_length_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._EnsembleInference.state_structure": [[133, 135], ["model.state_structure"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.state_structure"], ["", "def", "state_structure", "(", "self", ")", "->", "List", ":", "\n", "        ", "return", "[", "model", ".", "state_structure", "(", ")", "for", "model", "in", "self", ".", "_models", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._EnsembleInference.encode_and_initialize": [[136, 152], ["torch.stack().float().mean", "model.encode_and_initialize", "torch.stack().float().mean.append", "torch.stack().mean", "nvs_predictions.append", "torch.stack().float", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.mean", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.encode_and_initialize", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.mean"], ["", "def", "encode_and_initialize", "(", "self", ",", "inputs", ":", "pt", ".", "Tensor", ",", "valid_length", ":", "pt", ".", "Tensor", ")", ":", "\n", "        ", "model_states", "=", "[", "]", "# type: List[pt.Tensor]", "\n", "predicted_output_lengths", "=", "[", "]", "# type: List[pt.Tensor]", "\n", "nvs_predictions", "=", "[", "]", "\n", "for", "model", "in", "self", ".", "_models", ":", "\n", "            ", "states", ",", "predicted_output_length", ",", "nvs_prediction", "=", "model", ".", "encode_and_initialize", "(", "inputs", ",", "valid_length", ",", "self", ".", "_const_lr", ")", "\n", "if", "nvs_prediction", "is", "not", "None", ":", "\n", "                ", "nvs_predictions", ".", "append", "(", "nvs_prediction", ")", "\n", "\n", "", "predicted_output_lengths", ".", "append", "(", "predicted_output_length", ")", "\n", "model_states", "+=", "states", "\n", "# average predicted output lengths, (batch, 1)", "\n", "", "predicted_output_lengths", "=", "pt", ".", "stack", "(", "predicted_output_lengths", ",", "dim", "=", "1", ")", ".", "float", "(", ")", ".", "mean", "(", "dim", "=", "1", ")", "# type: ignore", "\n", "nvs_prediction", "=", "pt", ".", "stack", "(", "nvs_predictions", ",", "dim", "=", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "if", "nvs_predictions", "else", "None", "\n", "\n", "return", "model_states", ",", "predicted_output_lengths", ",", "nvs_prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._EnsembleInference.decode_step": [[153, 186], ["zip", "beam_search._EnsembleInference._interpolation", "beam_search._EnsembleInference.state_structure", "len", "model.decode_step", "logits.softmax", "outputs.append", "zip", "factor_outputs.append", "torch.cat().unsqueeze", "predictions.append", "torch.cat", "tfo.softmax", "range", "len", "len", "len", "target_prefix_factor_mask[].reshape", "torch.cat", "beam_search._EnsembleInference._interpolation().min", "beam_search._EnsembleInference._interpolation"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.state_structure", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.decode_step"], ["", "def", "decode_step", "(", "self", ",", "\n", "step_input", ":", "pt", ".", "Tensor", ",", "\n", "states", ":", "List", ",", "\n", "vocab_slice_ids", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "\n", "target_prefix_factor_mask", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "\n", "factor_vocab_size", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "# type: List[pt.Tensor]", "\n", "new_states", "=", "[", "]", "# type: List[pt.Tensor]", "\n", "factor_outputs", "=", "[", "]", "# type: List[List[pt.Tensor]]", "\n", "state_index", "=", "0", "\n", "for", "model", ",", "model_state_structure", "in", "zip", "(", "self", ".", "_models", ",", "self", ".", "state_structure", "(", ")", ")", ":", "\n", "            ", "model_states", "=", "states", "[", "state_index", ":", "state_index", "+", "len", "(", "model_state_structure", ")", "]", "\n", "state_index", "+=", "len", "(", "model_state_structure", ")", "\n", "logits", ",", "model_states", ",", "target_factor_outputs", "=", "model", ".", "decode_step", "(", "step_input", ",", "model_states", ",", "vocab_slice_ids", ")", "\n", "probs", "=", "logits", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "outputs", ".", "append", "(", "probs", ")", "\n", "if", "target_factor_outputs", ":", "\n", "                ", "target_factor_probs", "=", "[", "tfo", ".", "softmax", "(", "dim", "=", "-", "1", ")", "for", "tfo", "in", "target_factor_outputs", "]", "\n", "if", "target_prefix_factor_mask", "is", "not", "None", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "target_factor_probs", ")", ")", ":", "\n", "                        ", "target_factor_probs", "[", "i", "]", "+=", "target_prefix_factor_mask", "[", ":", ",", ":", ",", "i", "]", ".", "reshape", "(", "-", "1", ",", "factor_vocab_size", ")", "\n", "", "", "factor_outputs", ".", "append", "(", "target_factor_probs", ")", "\n", "", "new_states", "+=", "model_states", "\n", "", "scores", "=", "self", ".", "_interpolation", "(", "outputs", ")", "\n", "\n", "target_factors", "=", "None", "# type: Optional[pt.Tensor]", "\n", "if", "factor_outputs", ":", "\n", "            ", "predictions", "=", "[", "]", "# type: List[pt.Tensor]", "\n", "for", "model_tf_logits", "in", "zip", "(", "*", "factor_outputs", ")", ":", "\n", "                ", "tf_prediction", "=", "pt", ".", "cat", "(", "self", ".", "_interpolation", "(", "model_tf_logits", ")", ".", "min", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "predictions", ".", "append", "(", "tf_prediction", ")", "\n", "", "target_factors", "=", "pt", ".", "cat", "(", "predictions", ",", "dim", "=", "1", ")", "if", "len", "(", "predictions", ")", ">", "1", "else", "predictions", "[", "0", "]", "\n", "", "return", "scores", ",", "new_states", ",", "target_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._EnsembleInference.linear_interpolation": [[187, 190], ["utils.average_tensors().log", "utils.average_tensors"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatistics.log", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.average_tensors"], ["", "@", "staticmethod", "\n", "def", "linear_interpolation", "(", "predictions", ")", ":", "\n", "        ", "return", "-", "(", "utils", ".", "average_tensors", "(", "predictions", ")", ".", "log", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._EnsembleInference.log_linear_interpolation": [[191, 195], ["utils.average_tensors", "utils.average_tensors.log_softmax", "p.log"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.average_tensors", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatistics.log"], ["", "@", "staticmethod", "\n", "def", "log_linear_interpolation", "(", "predictions", ")", ":", "\n", "        ", "log_probs", "=", "utils", ".", "average_tensors", "(", "[", "p", ".", "log", "(", ")", "for", "p", "in", "predictions", "]", ")", "\n", "return", "-", "(", "log_probs", ".", "log_softmax", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._EnsembleInference.model_output_vocab_size": [[196, 199], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_output_vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_models", "[", "0", "]", ".", "output_layer_vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._EnsembleInference.model_output_factor_vocab_size": [[200, 203], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_output_factor_vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_models", "[", "0", "]", ".", "factor_vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.UpdateScores.__init__": [[225, 229], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "prevent_unk", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prevent_unk", "=", "prevent_unk", "\n", "assert", "C", ".", "PAD_ID", "==", "0", ",", "\"This block only works with PAD_ID == 0\"", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.UpdateScores.forward": [[230, 254], ["torch.where", "torch.where", "finished.unsqueeze", "torch.logical_or().unsqueeze", "torch.logical_or"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "target_dists", ",", "finished", ",", "scores_accumulated", ",", "lengths", ",", "max_lengths", ",", "pad_dist", ",", "eos_dist", ")", ":", "\n", "\n", "        ", "if", "self", ".", "prevent_unk", ":", "# make sure to avoid generating <unk>", "\n", "            ", "target_dists", "[", ":", ",", "C", ".", "UNK_ID", "]", "=", "np", ".", "inf", "\n", "\n", "# broadcast hypothesis score to each prediction.", "\n", "# scores_accumulated. Shape: (batch*beam, 1)", "\n", "# target_dists. Shape: (batch*beam, vocab_size)", "\n", "", "scores", "=", "target_dists", "+", "scores_accumulated", "\n", "\n", "# Special treatment for finished rows.", "\n", "# Finished rows are inf everywhere except column zero (pad_id), which holds the accumulated model score.", "\n", "# Items that are finished get their previous accumulated score for the <pad> symbol,", "\n", "# infinity otherwise.", "\n", "pad_dist", "=", "scores_accumulated", "+", "pad_dist", "# (batch*beam, vocab_size)", "\n", "scores", "=", "pt", ".", "where", "(", "finished", ".", "unsqueeze", "(", "1", ")", ",", "pad_dist", ",", "scores", ")", "\n", "# Update lengths of all items, except those that were already finished.", "\n", "lengths", "=", "lengths", "+", "~", "finished", "\n", "# Items that are at their maximum length and not finished now are forced to produce the <eos> symbol.", "\n", "# That is, we keep scores for hypotheses below max length or finished, and 'force-eos' the rest.", "\n", "below_max_length", "=", "lengths", "<", "max_lengths", "# type: pt.Tensor", "\n", "scores", "=", "pt", ".", "where", "(", "pt", ".", "logical_or", "(", "below_max_length", ",", "finished", ")", ".", "unsqueeze", "(", "1", ")", ",", "scores", ",", "eos_dist", "+", "scores", ")", "\n", "\n", "return", "scores", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.LengthPenalty.__init__": [[268, 273], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "alpha", ":", "float", "=", "1.0", ",", "beta", ":", "float", "=", "0.0", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "denominator", "=", "(", "self", ".", "beta", "+", "1.", ")", "**", "self", ".", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.LengthPenalty.forward": [[274, 284], ["isinstance", "torch.ones_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "lengths", ")", ":", "\n", "        ", "if", "self", ".", "alpha", "==", "0.0", ":", "\n", "            ", "if", "isinstance", "(", "lengths", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "                ", "return", "1.0", "\n", "", "else", ":", "\n", "                ", "return", "pt", ".", "ones_like", "(", "lengths", ")", "\n", "", "", "else", ":", "\n", "            ", "numerator", "=", "self", ".", "beta", "+", "lengths", "if", "self", ".", "beta", "!=", "0.0", "else", "lengths", "\n", "numerator", "=", "numerator", "**", "self", ".", "alpha", "if", "self", ".", "alpha", "!=", "1.0", "else", "numerator", "\n", "return", "numerator", "/", "self", ".", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.BrevityPenalty.__init__": [[294, 297], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "weight", ":", "float", "=", "0.0", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.BrevityPenalty.forward": [[298, 312], ["isinstance", "isinstance", "torch.zeros_like", "min", "torch.minimum", "torch.zeros_like", "hyp_lengths.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hyp_lengths", ",", "reference_lengths", ")", ":", "\n", "        ", "if", "self", ".", "weight", "==", "0.0", ":", "\n", "            ", "if", "isinstance", "(", "hyp_lengths", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "                ", "return", "0.0", "\n", "", "else", ":", "\n", "                ", "return", "pt", ".", "zeros_like", "(", "hyp_lengths", ")", "\n", "", "", "else", ":", "\n", "# log_bp is always <= 0.0", "\n", "            ", "if", "isinstance", "(", "hyp_lengths", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "                ", "log_bp", "=", "min", "(", "0.0", ",", "1.0", "-", "reference_lengths", "/", "hyp_lengths", ")", "\n", "", "else", ":", "\n", "                ", "log_bp", "=", "pt", ".", "minimum", "(", "pt", ".", "zeros_like", "(", "hyp_lengths", ",", "dtype", "=", "pt", ".", "float", ")", ",", "\n", "1.0", "-", "reference_lengths", "/", "hyp_lengths", ".", "float", "(", ")", ")", "\n", "", "return", "self", ".", "weight", "*", "log_bp", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.CandidateScorer.__init__": [[316, 325], ["super().__init__", "beam_search.LengthPenalty", "beam_search.BrevityPenalty"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "length_penalty_alpha", ":", "float", "=", "1.0", ",", "\n", "length_penalty_beta", ":", "float", "=", "0.0", ",", "\n", "brevity_penalty_weight", ":", "float", "=", "0.0", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_lp", "=", "LengthPenalty", "(", "alpha", "=", "length_penalty_alpha", ",", "beta", "=", "length_penalty_beta", ")", "\n", "self", ".", "_bp", "=", "None", "# type: Optional[BrevityPenalty]", "\n", "if", "brevity_penalty_weight", ">", "0.0", ":", "\n", "            ", "self", ".", "_bp", "=", "BrevityPenalty", "(", "weight", "=", "brevity_penalty_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.CandidateScorer.forward": [[326, 340], ["beam_search.CandidateScorer._lp", "isinstance", "beam_search.CandidateScorer._bp", "isinstance", "isinstance", "lp.to.to.to", "bp.to.to.to", "scores.squeeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "scores", ",", "lengths", ",", "reference_lengths", ")", ":", "\n", "        ", "lp", "=", "self", ".", "_lp", "(", "lengths", ")", "\n", "if", "self", ".", "_bp", "is", "not", "None", ":", "\n", "            ", "bp", "=", "self", ".", "_bp", "(", "lengths", ",", "reference_lengths", ")", "\n", "", "else", ":", "\n", "            ", "bp", "=", "0.0", "\n", "", "if", "isinstance", "(", "scores", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "return", "scores", "/", "lp", "-", "bp", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "lp", ",", "pt", ".", "Tensor", ")", ":", "\n", "                ", "lp", "=", "lp", ".", "to", "(", "scores", ".", "dtype", ")", "\n", "", "if", "isinstance", "(", "bp", ",", "pt", ".", "Tensor", ")", ":", "\n", "                ", "bp", "=", "bp", ".", "to", "(", "scores", ".", "dtype", ")", "\n", "", "return", "(", "scores", ".", "squeeze", "(", "1", ")", "/", "lp", "-", "bp", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.CandidateScorer.unnormalize": [[341, 347], ["isinstance", "beam_search.CandidateScorer._bp", "beam_search.CandidateScorer._lp", "beam_search.CandidateScorer._lp", "scores.squeeze"], "methods", ["None"], ["", "", "def", "unnormalize", "(", "self", ",", "scores", ",", "lengths", ",", "reference_lengths", ")", ":", "\n", "        ", "bp", "=", "0.0", "if", "self", ".", "_bp", "is", "None", "else", "self", ".", "_bp", "(", "lengths", ",", "reference_lengths", ")", "\n", "if", "isinstance", "(", "scores", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "return", "(", "scores", "+", "bp", ")", "*", "self", ".", "_lp", "(", "lengths", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "(", "scores", ".", "squeeze", "(", "1", ")", "+", "bp", ")", "*", "self", ".", "_lp", "(", "lengths", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.SortNormalizeAndUpdateFinished.__init__": [[354, 364], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "\n", "pad_id", ":", "int", ",", "\n", "eos_id", ":", "int", ",", "\n", "scorer", ":", "CandidateScorer", ",", "\n", "expect_factors", ":", "bool", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pad_id", "=", "pad_id", "\n", "self", ".", "eos_id", "=", "eos_id", "\n", "self", ".", "_scorer", "=", "scorer", "\n", "self", ".", "expect_factors", "=", "expect_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.SortNormalizeAndUpdateFinished.forward": [[365, 401], ["torch.logical_or.index_select", "lengths.index_select.index_select.index_select", "reference_lengths.index_select.index_select.index_select", "torch.logical_or", "torch.logical_xor().unsqueeze", "torch.where", "torch.logical_or", "torch.cat.unsqueeze", "beam_search.SortNormalizeAndUpdateFinished._scorer", "factors.index_select", "torch.cat", "scores.append", "torch.logical_xor", "factor_scores_accumulated.index_select", "factor_indices.int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "best_hyp_indices", ",", "best_word_indices", ",", "\n", "finished", ",", "scores_accumulated", ",", "lengths", ",", "reference_lengths", ",", "\n", "*", "factor_args", ")", ":", "\n", "\n", "# Reorder fixed-size beam data according to best_hyp_indices (ascending)", "\n", "        ", "finished", "=", "finished", ".", "index_select", "(", "0", ",", "best_hyp_indices", ")", "\n", "lengths", "=", "lengths", ".", "index_select", "(", "0", ",", "best_hyp_indices", ")", "\n", "reference_lengths", "=", "reference_lengths", ".", "index_select", "(", "0", ",", "best_hyp_indices", ")", "\n", "\n", "# Normalize hypotheses that JUST finished", "\n", "all_finished", "=", "pt", ".", "logical_or", "(", "best_word_indices", "==", "self", ".", "pad_id", ",", "best_word_indices", "==", "self", ".", "eos_id", ")", "\n", "newly_finished", "=", "pt", ".", "logical_xor", "(", "all_finished", ",", "finished", ")", ".", "unsqueeze", "(", "1", ")", "\n", "scores_accumulated", "=", "pt", ".", "where", "(", "newly_finished", ",", "\n", "self", ".", "_scorer", "(", "scores_accumulated", ",", "lengths", ",", "reference_lengths", ")", ",", "\n", "scores_accumulated", ")", "\n", "\n", "# Recompute finished. Hypotheses are finished if they are extended with <pad> or <eos>", "\n", "finished", "=", "pt", ".", "logical_or", "(", "best_word_indices", "==", "self", ".", "pad_id", ",", "best_word_indices", "==", "self", ".", "eos_id", ")", "\n", "\n", "best_word_indices", "=", "best_word_indices", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Traced modules do not allow optional return values or None, but lists. We return", "\n", "# primary scores and optional factor scores therefore in a list.", "\n", "scores", "=", "[", "scores_accumulated", "]", "# type: List[pt.Tensor]", "\n", "if", "self", ".", "expect_factors", ":", "\n", "            ", "factors", ",", "factor_scores_accumulated", "=", "factor_args", "\n", "# factors: (batch*beam, num_secondary_factors, 2)", "\n", "f_sorted", "=", "factors", ".", "index_select", "(", "0", ",", "best_hyp_indices", ")", "\n", "factor_scores", ",", "factor_indices", "=", "f_sorted", "[", ":", ",", ":", ",", "0", "]", ",", "f_sorted", "[", ":", ",", ":", ",", "1", "]", "\n", "# updated_factor_scores: (batch*beam, num_secondary_factors)", "\n", "updated_factor_scores", "=", "factor_scores_accumulated", ".", "index_select", "(", "0", ",", "best_hyp_indices", ")", "+", "factor_scores", "\n", "# Concatenate sorted secondary target factors to best_word_indices. Shape: (batch*beam, num_factors)", "\n", "best_word_indices", "=", "pt", ".", "cat", "(", "(", "best_word_indices", ",", "factor_indices", ".", "int", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "scores", ".", "append", "(", "updated_factor_scores", ")", "\n", "\n", "", "return", "best_word_indices", ",", "finished", ",", "scores", ",", "lengths", ",", "reference_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.TopK.__init__": [[412, 418], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "k", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        :param k: The number of smallest scores to return.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.TopK.forward": [[419, 439], ["scores.view.view.size", "torch.div", "scores.view.view.view", "torch.topk", "values.view", "indices.view", "indices.div", "indices.fmod"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"\n        Get the lowest k elements per sentence from a `scores` matrix.\n\n        :param scores: Vocabulary scores for the next beam step. (batch_size * beam_size, target_vocabulary_size)\n        :return: The row indices, column indices and values of the k smallest items in matrix.\n        \"\"\"", "\n", "batch_times_beam", ",", "vocab_size", "=", "scores", ".", "size", "(", ")", "\n", "batch_size", "=", "pt", ".", "div", "(", "batch_times_beam", ",", "self", ".", "k", ",", "rounding_mode", "=", "'trunc'", ")", "\n", "# Shape: (batch size, beam_size * vocab_size)", "\n", "scores", "=", "scores", ".", "view", "(", "batch_size", ",", "self", ".", "k", "*", "vocab_size", ")", "\n", "\n", "values", ",", "indices", "=", "pt", ".", "topk", "(", "scores", ",", "k", "=", "self", ".", "k", ",", "dim", "=", "1", ",", "largest", "=", "False", ",", "sorted", "=", "True", ")", "\n", "\n", "# Project indices back into original shape (which is different for t==1 and t>1)", "\n", "values", ",", "indices", "=", "values", ".", "view", "(", "-", "1", ",", "1", ")", ",", "indices", ".", "view", "(", "-", "1", ")", "\n", "\n", "best_hyp_indices", ",", "best_word_indices", "=", "indices", ".", "div", "(", "vocab_size", ",", "rounding_mode", "=", "'floor'", ")", ",", "indices", ".", "fmod", "(", "vocab_size", ")", "\n", "\n", "return", "best_hyp_indices", ",", "best_word_indices", ",", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.SampleK.__init__": [[445, 448], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "n", ":", "int", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n", "=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.SampleK.forward": [[449, 481], ["torch.exp", "torch.multinomial().squeeze", "best_word_indices.masked_fill.masked_fill.masked_fill", "scores.gather", "torch.arange", "torch.topk", "torch.scatter", "torch.zeros_like", "torch.scatter.sum", "torch.multinomial", "best_word_indices.masked_fill.masked_fill.long().unsqueeze", "best_word_indices.masked_fill.masked_fill.size", "best_word_indices.masked_fill.masked_fill.long"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "scores", ",", "target_dists", ",", "finished", ")", ":", "\n", "        ", "\"\"\"\n        Choose an extension of each hypothesis from its softmax distribution.\n\n        :param scores: Vocabulary scores for the next beam step. (batch_size * beam_size, target_vocabulary_size)\n        :param target_dists: The non-cumulative target distributions (ignored).\n        :param finished: The list of finished hypotheses.\n        :return: The row indices, column indices, and values of the sampled words.\n        \"\"\"", "\n", "# Map the negative logprobs to probabilities so as to have a distribution", "\n", "target_dists", "=", "pt", ".", "exp", "(", "-", "target_dists", ")", "\n", "\n", "# n == 0 means sample from the full vocabulary. Otherwise, we sample from the top n.", "\n", "if", "self", ".", "n", "!=", "0", ":", "\n", "# select the top n in each row, via a mask", "\n", "            ", "_", ",", "indices", "=", "pt", ".", "topk", "(", "target_dists", ",", "k", "=", "self", ".", "n", ",", "dim", "=", "1", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "# set items not chosen by topk to 0", "\n", "target_dists", "=", "pt", ".", "scatter", "(", "pt", ".", "zeros_like", "(", "target_dists", ")", ",", "1", ",", "indices", ",", "target_dists", ")", "\n", "# renormalize", "\n", "target_dists", "=", "target_dists", "/", "target_dists", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# Sample from the target distributions over words, then get the corresponding values from the cumulative scores", "\n", "# shape: (batch,)", "\n", "", "best_word_indices", "=", "pt", ".", "multinomial", "(", "target_dists", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "# Zeroes for finished hypotheses.", "\n", "best_word_indices", "=", "best_word_indices", ".", "masked_fill", "(", "finished", ",", "0", ")", "\n", "# (batch, 1)", "\n", "values", "=", "scores", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "best_word_indices", ".", "long", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "# (batch,)", "\n", "best_hyp_indices", "=", "pt", ".", "arange", "(", "0", ",", "best_word_indices", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "\n", "return", "best_hyp_indices", ",", "best_word_indices", ",", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.RepeatStates.__init__": [[485, 489], ["super().__init__", "functools.reduce"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "beam_size", ":", "int", ",", "state_structure", ":", "List", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beam_size", "=", "beam_size", "\n", "self", ".", "flat_structure", "=", "functools", ".", "reduce", "(", "operator", ".", "add", ",", "state_structure", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.RepeatStates.forward": [[490, 505], ["zip", "len", "len", "state.repeat_interleave", "repeated_states.append", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "states", ")", ":", "\n", "        ", "repeated_states", "=", "[", "]", "\n", "assert", "len", "(", "states", ")", "==", "len", "(", "self", ".", "flat_structure", ")", ",", "\"Number of states do not match the defined state structure\"", "\n", "for", "state", ",", "state_format", "in", "zip", "(", "states", ",", "self", ".", "flat_structure", ")", ":", "\n", "            ", "if", "state_format", "==", "C", ".", "STEP_STATE", "or", "state_format", "==", "C", ".", "MASK_STATE", ":", "\n", "# Steps and source_bias have batch dimension on axis 0", "\n", "                ", "repeat_axis", "=", "0", "\n", "", "elif", "state_format", "==", "C", ".", "DECODER_STATE", "or", "state_format", "==", "C", ".", "ENCODER_STATE", ":", "\n", "# Decoder and encoder layer states have batch dimension on axis 1", "\n", "                ", "repeat_axis", "=", "1", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Provided state format %s not recognized.\"", "%", "state_format", ")", "\n", "", "repeated_state", "=", "state", ".", "repeat_interleave", "(", "repeats", "=", "self", ".", "beam_size", ",", "dim", "=", "repeat_axis", ")", "\n", "repeated_states", ".", "append", "(", "repeated_state", ")", "\n", "", "return", "repeated_states", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.SortStates.__init__": [[509, 512], ["super().__init__", "functools.reduce"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "state_structure", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "flat_structure", "=", "functools", ".", "reduce", "(", "operator", ".", "add", ",", "state_structure", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.SortStates.forward": [[513, 530], ["zip", "len", "len", "sorted_states.append", "state.index_select", "state.index_select", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "best_hyp_indices", ",", "*", "states", ")", ":", "\n", "        ", "sorted_states", "=", "[", "]", "\n", "assert", "len", "(", "states", ")", "==", "len", "(", "self", ".", "flat_structure", ")", ",", "\"Number of states do not match the defined state structure\"", "\n", "for", "state", ",", "state_format", "in", "zip", "(", "states", ",", "self", ".", "flat_structure", ")", ":", "\n", "            ", "if", "state_format", "==", "C", ".", "STEP_STATE", ":", "\n", "# Steps and source_bias have batch dimension on axis 0", "\n", "                ", "sorted_state", "=", "state", ".", "index_select", "(", "0", ",", "best_hyp_indices", ")", "\n", "", "elif", "state_format", "==", "C", ".", "DECODER_STATE", ":", "\n", "# Decoder and encoder layer states have batch dimension on axis 1", "\n", "                ", "sorted_state", "=", "state", ".", "index_select", "(", "1", ",", "best_hyp_indices", ")", "\n", "", "elif", "state_format", "==", "C", ".", "ENCODER_STATE", "or", "state_format", "==", "C", ".", "MASK_STATE", ":", "\n", "# No need for takes on encoder layer states", "\n", "                ", "sorted_state", "=", "state", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Provided state format %s not recognized.\"", "%", "state_format", ")", "\n", "", "sorted_states", ".", "append", "(", "sorted_state", ")", "\n", "", "return", "sorted_states", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.GreedySearch.__init__": [[623, 649], ["super().__init__", "beam_search.GreedyTop1"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "\n", "dtype", ":", "pt", ".", "dtype", ",", "\n", "bos_id", ":", "int", ",", "\n", "eos_id", ":", "int", ",", "\n", "device", ":", "pt", ".", "device", ",", "\n", "num_source_factors", ":", "int", ",", "\n", "num_target_factors", ":", "int", ",", "\n", "inference", ":", "_SingleModelInference", ",", "\n", "skip_nvs", ":", "bool", "=", "False", ",", "\n", "nvs_thresh", ":", "float", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "bos_id", "=", "bos_id", "\n", "self", ".", "eos_id", "=", "eos_id", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "output_vocab_size", "=", "inference", ".", "model_output_vocab_size", "\n", "self", ".", "output_factor_vocab_size", "=", "inference", ".", "model_output_factor_vocab_size", "\n", "self", ".", "_inference", "=", "inference", "\n", "self", ".", "num_source_factors", "=", "num_source_factors", "\n", "self", ".", "num_target_factors", "=", "num_target_factors", "\n", "self", ".", "global_avoid_trie", "=", "None", "\n", "assert", "inference", ".", "_skip_softmax", ",", "\"skipping softmax must be enabled for GreedySearch\"", "\n", "self", ".", "skip_nvs", "=", "skip_nvs", "\n", "self", ".", "nvs_thresh", "=", "nvs_thresh", "\n", "\n", "self", ".", "work_block", "=", "GreedyTop1", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.GreedySearch.forward": [[650, 748], ["int", "logger.debug", "torch.full", "beam_search.GreedySearch._inference.encode_and_initialize", "range", "logger.debug", "torch.stack", "torch.tensor", "torch.zeros", "beam_search.SearchResult", "source.size", "max_output_lengths.max().item", "beam_search._get_nvs_vocab_slice_ids", "utils.gen_prefix_masking", "utils.gen_prefix_masking", "beam_search.GreedySearch._inference.decode_step", "beam_search.GreedySearch.work_block", "outputs.append", "torch.zeros", "beam_search._get_vocab_slice_ids", "torch.index_select", "max_output_lengths.max"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.encode_and_initialize", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.gen_prefix_masking", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.gen_prefix_masking", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.decode_step", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_vocab_slice_ids"], ["", "def", "forward", "(", "self", ",", "\n", "source", ":", "pt", ".", "Tensor", ",", "\n", "source_length", ":", "pt", ".", "Tensor", ",", "\n", "restrict_lexicon", ":", "Optional", "[", "lexicon", ".", "RestrictLexicon", "]", "=", "None", ",", "\n", "max_output_lengths", ":", "pt", ".", "Tensor", "=", "None", ",", "\n", "target_prefix", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "\n", "target_prefix_factors", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "SearchResult", ":", "\n", "        ", "\"\"\"\n        Translates a single sentence (batch_size=1) using greedy search.\n\n        :param source: Source ids. Shape: (batch_size=1, bucket_key, num_factors).\n        :param source_length: Valid source lengths. Shape: (batch_size=1,).\n        :param restrict_lexicon: Lexicon to use for vocabulary restriction.\n        :param max_output_lengths: ndarray of maximum output lengths per input in source.\n                Shape: (batch_size=1,). Dtype: int32.\n        :param target_prefix: Target prefix ids. Shape: (batch_size=1, max target prefix length).\n        :param target_prefix_factors: Target prefix factor ids.\n                Shape: (batch_size=1, max target prefix factors length, num_target_factors).\n        :return SearchResult.\n        \"\"\"", "\n", "batch_size", "=", "source", ".", "size", "(", ")", "[", "0", "]", "\n", "assert", "batch_size", "==", "1", ",", "\"Greedy Search does not support batch_size != 1\"", "\n", "\n", "# Maximum  search iterations (determined by longest input with eos)", "\n", "max_iterations", "=", "int", "(", "max_output_lengths", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "logger", ".", "debug", "(", "\"max greedy search iterations: %d\"", ",", "max_iterations", ")", "\n", "\n", "# best word_indices (also act as input: (batch*beam, num_target_factors", "\n", "best_word_index", "=", "pt", ".", "full", "(", "(", "batch_size", ",", "self", ".", "num_target_factors", ")", ",", "\n", "fill_value", "=", "self", ".", "bos_id", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "pt", ".", "int32", ")", "\n", "outputs", "=", "[", "]", "# type: List[pt.Tensor]", "\n", "\n", "# (0) encode source sentence, returns a list", "\n", "model_states", ",", "_", ",", "nvs_prediction", "=", "self", ".", "_inference", ".", "encode_and_initialize", "(", "source", ",", "source_length", ")", "\n", "# TODO: check for disabled predicted output length", "\n", "\n", "vocab_slice_ids", "=", "None", "# type: Optional[pt.Tensor]", "\n", "# If using a top-k lexicon or NVS select param rows for logit computation that correspond to the", "\n", "# target vocab for this sentence.", "\n", "if", "nvs_prediction", "is", "not", "None", "and", "not", "self", ".", "skip_nvs", ":", "\n", "            ", "vocab_slice_ids", ",", "_", "=", "_get_nvs_vocab_slice_ids", "(", "self", ".", "nvs_thresh", ",", "nvs_prediction", ",", "\n", "restrict_lexicon", "=", "restrict_lexicon", ",", "\n", "target_prefix", "=", "target_prefix", ")", "\n", "", "elif", "restrict_lexicon", ":", "\n", "            ", "source_words", "=", "source", "[", ":", ",", ":", ",", "0", "]", "\n", "vocab_slice_ids", ",", "_", "=", "_get_vocab_slice_ids", "(", "restrict_lexicon", ",", "source_words", ",", "self", ".", "eos_id", ",", "beam_size", "=", "1", ",", "\n", "target_prefix", "=", "target_prefix", ",", "\n", "output_vocab_size", "=", "self", ".", "output_vocab_size", ")", "\n", "\n", "\n", "# Prefix masks, where scores are infinity for all other vocabulary items except target_prefix ids", "\n", "", "prefix_masks", ",", "prefix_masks_length", "=", "None", ",", "0", "\n", "if", "target_prefix", "is", "not", "None", ":", "\n", "            ", "prefix_masks", ",", "prefix_masks_length", "=", "utils", ".", "gen_prefix_masking", "(", "target_prefix", ",", "self", ".", "output_vocab_size", ",", "self", ".", "dtype", ")", "\n", "if", "vocab_slice_ids", "is", "not", "None", ":", "\n", "                ", "prefix_masks", "=", "pt", ".", "index_select", "(", "prefix_masks", ",", "-", "1", ",", "vocab_slice_ids", ")", "\n", "# Prefix factor masks, where scores are also infinity for all other factor items except target_prefix_factor ids", "\n", "", "", "target_prefix_factor_masks", ",", "target_prefix_factor_length", "=", "None", ",", "0", "\n", "if", "target_prefix_factors", "is", "not", "None", ":", "\n", "            ", "target_prefix_factor_masks", ",", "target_prefix_factor_length", "=", "utils", ".", "gen_prefix_masking", "(", "\n", "target_prefix_factors", ",", "self", ".", "output_factor_vocab_size", ",", "self", ".", "dtype", ")", "\n", "\n", "", "t", "=", "1", "\n", "for", "t", "in", "range", "(", "1", ",", "max_iterations", "+", "1", ")", ":", "\n", "            ", "target_prefix_factor_mask", "=", "target_prefix_factor_masks", "[", ":", ",", "t", "-", "1", "]", "if", "target_prefix_factor_masks", "is", "not", "None", "and", "t", "<=", "target_prefix_factor_length", "else", "None", "\n", "scores", ",", "model_states", ",", "target_factors", "=", "self", ".", "_inference", ".", "decode_step", "(", "best_word_index", ",", "\n", "model_states", ",", "\n", "vocab_slice_ids", ",", "\n", "target_prefix_factor_mask", ",", "\n", "self", ".", "output_factor_vocab_size", ")", "\n", "if", "prefix_masks", "is", "not", "None", "and", "t", "<=", "prefix_masks_length", ":", "\n", "# Make sure search selects the current prefix token", "\n", "                ", "scores", "+=", "prefix_masks", "[", ":", ",", "t", "-", "1", "]", "\n", "\n", "# shape: (batch*beam=1, 1)", "\n", "", "best_word_index", "=", "self", ".", "work_block", "(", "scores", ",", "vocab_slice_ids", ",", "target_factors", ")", "\n", "outputs", ".", "append", "(", "best_word_index", ")", "\n", "\n", "_best_word_index", "=", "best_word_index", "[", ":", ",", "0", "]", "\n", "if", "_best_word_index", "==", "self", ".", "eos_id", "or", "_best_word_index", "==", "C", ".", "PAD_ID", ":", "\n", "                ", "break", "\n", "\n", "", "", "logger", ".", "debug", "(", "\"Finished after %d out of %d steps.\"", ",", "t", ",", "max_iterations", ")", "\n", "\n", "# shape: (1, num_factors, length)", "\n", "stacked_outputs", "=", "pt", ".", "stack", "(", "outputs", ",", "dim", "=", "2", ")", "\n", "length", "=", "pt", ".", "tensor", "(", "[", "t", "]", ",", "dtype", "=", "pt", ".", "int32", ")", "# shape (1,)", "\n", "hyp_indices", "=", "pt", ".", "zeros", "(", "1", ",", "t", "+", "1", ",", "dtype", "=", "pt", ".", "int32", ")", "\n", "# TODO: return unnormalized proper score", "\n", "scores", "=", "pt", ".", "zeros", "(", "1", ",", "self", ".", "num_target_factors", ")", "-", "1", "\n", "\n", "return", "SearchResult", "(", "best_hyp_indices", "=", "hyp_indices", ",", "\n", "best_word_indices", "=", "stacked_outputs", ",", "\n", "accumulated_scores", "=", "scores", ",", "\n", "lengths", "=", "length", ",", "\n", "estimated_reference_lengths", "=", "None", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.GreedyTop1.forward": [[755, 769], ["torch.argmin", "vocab_slice_ids.index_select().unsqueeze", "target_factors[].int", "torch.cat", "vocab_slice_ids.index_select", "torch.cat.squeeze"], "methods", ["None"], ["def", "forward", "(", "self", ",", "\n", "scores", ":", "pt", ".", "Tensor", ",", "\n", "vocab_slice_ids", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "\n", "target_factors", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "pt", ".", "Tensor", ":", "\n", "# shape: (batch*beam=1, 1)", "\n", "        ", "best_word_index", "=", "pt", ".", "argmin", "(", "scores", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "# Map from restricted to full vocab ids if needed", "\n", "if", "vocab_slice_ids", "is", "not", "None", ":", "\n", "            ", "best_word_index", "=", "vocab_slice_ids", ".", "index_select", "(", "0", ",", "best_word_index", ".", "squeeze", "(", "1", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "if", "target_factors", "is", "not", "None", ":", "\n", "            ", "factor_index", "=", "target_factors", "[", ":", ",", ":", ",", "1", "]", ".", "int", "(", ")", "\n", "best_word_index", "=", "pt", ".", "cat", "(", "(", "best_word_index", ",", "factor_index", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "best_word_index", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.BeamSearch.__init__": [[784, 835], ["super().__init__", "beam_search.RepeatStates", "beam_search.SortStates", "beam_search.UpdateScores", "beam_search.SortNormalizeAndUpdateFinished", "beam_search.SampleK", "beam_search.TopK", "beam_search.BeamSearch._inference.state_structure", "beam_search.BeamSearch._inference.state_structure"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.state_structure", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.state_structure"], ["def", "__init__", "(", "self", ",", "\n", "beam_size", ":", "int", ",", "\n", "dtype", ":", "pt", ".", "dtype", ",", "\n", "bos_id", ":", "int", ",", "\n", "eos_id", ":", "int", ",", "\n", "device", ":", "pt", ".", "device", ",", "\n", "output_vocab_size", ":", "int", ",", "\n", "scorer", ":", "CandidateScorer", ",", "\n", "num_source_factors", ":", "int", ",", "\n", "num_target_factors", ":", "int", ",", "\n", "inference", ":", "_Inference", ",", "\n", "beam_search_stop", ":", "str", "=", "C", ".", "BEAM_SEARCH_STOP_ALL", ",", "\n", "sample", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "prevent_unk", ":", "bool", "=", "False", ",", "\n", "skip_nvs", ":", "bool", "=", "False", ",", "\n", "nvs_thresh", ":", "float", "=", "0.5", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beam_size", "=", "beam_size", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "bos_id", "=", "bos_id", "\n", "self", ".", "eos_id", "=", "eos_id", "\n", "self", ".", "output_vocab_size", "=", "output_vocab_size", "\n", "self", ".", "output_factor_vocab_size", "=", "inference", ".", "model_output_factor_vocab_size", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "_inference", "=", "inference", "\n", "self", ".", "beam_search_stop", "=", "beam_search_stop", "\n", "self", ".", "num_source_factors", "=", "num_source_factors", "\n", "self", ".", "num_target_factors", "=", "num_target_factors", "\n", "self", ".", "prevent_unk", "=", "prevent_unk", "\n", "self", ".", "skip_nvs", "=", "skip_nvs", "\n", "self", ".", "nvs_thresh", "=", "nvs_thresh", "\n", "\n", "self", ".", "_repeat_states", "=", "RepeatStates", "(", "beam_size", "=", "beam_size", ",", "state_structure", "=", "self", ".", "_inference", ".", "state_structure", "(", ")", ")", "\n", "self", ".", "_traced_repeat_states", "=", "None", "# type: Optional[pt.jit.ScriptModule]", "\n", "self", ".", "_sort_states", "=", "SortStates", "(", "state_structure", "=", "self", ".", "_inference", ".", "state_structure", "(", ")", ")", "\n", "self", ".", "_traced_sort_states", "=", "None", "# type: Optional[pt.jit.ScriptModule]", "\n", "self", ".", "_update_scores", "=", "UpdateScores", "(", "prevent_unk", ")", "# tracing this module seems to incur a small slowdown on GPUs", "\n", "self", ".", "_sort_norm_and_update_finished", "=", "SortNormalizeAndUpdateFinished", "(", "\n", "pad_id", "=", "C", ".", "PAD_ID", ",", "\n", "eos_id", "=", "eos_id", ",", "\n", "scorer", "=", "scorer", ",", "\n", "expect_factors", "=", "self", ".", "num_target_factors", ">", "1", ")", "\n", "self", ".", "_traced_sort_norm_and_update_finished", "=", "None", "# type: Optional[pt.jit.ScriptModule]", "\n", "\n", "self", ".", "_sample", "=", "None", "# type: Optional[pt.nn.Module]", "\n", "self", ".", "_top", "=", "None", "# type: Optional[pt.nn.Module]", "\n", "if", "sample", "is", "not", "None", ":", "\n", "            ", "self", ".", "_sample", "=", "SampleK", "(", "sample", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_top", "=", "TopK", "(", "self", ".", "beam_size", ")", "\n", "", "self", ".", "_traced_top", "=", "None", "# type: Optional[pt.jit.ScriptModule]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.BeamSearch.forward": [[836, 1053], ["logger.debug", "int", "logger.debug", "torch.full", "torch.arange().repeat_interleave", "torch.arange", "torch.full", "torch.zeros", "torch.zeros", "max_output_lengths.repeat_interleave.repeat_interleave.repeat_interleave", "torch.zeros", "beam_search.BeamSearch._inference.encode_and_initialize", "beam_search.BeamSearch._traced_repeat_states", "estimated_reference_lengths.repeat_interleave.repeat_interleave.repeat_interleave", "torch.full", "torch.full", "range", "logger.debug", "torch.cat.reshape", "pt.cat.reshape.argsort().reshape", "torch.cat.index_select", "best_hyp_indices_list.append", "lengths.index_select.index_select.index_select", "torch.stack", "torch.stack", "beam_search.SearchResult", "source.size", "max_output_lengths.repeat_interleave.repeat_interleave.max().item", "utils.adjust_first_step_masking", "torch.zeros", "logger.debug", "torch.jit.trace", "beam_search._get_nvs_vocab_slice_ids", "utils.check_condition", "utils.gen_prefix_masking", "torch.index_select.unsqueeze().expand", "utils.gen_prefix_masking", "target_prefix_factor_masks.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "beam_search.BeamSearch._inference.decode_step", "beam_search.BeamSearch._update_scores", "beam_search.BeamSearch._traced_sort_norm_and_update_finished", "best_word_indices_list.append", "best_hyp_indices_list.append", "beam_search.BeamSearch._should_stop", "beam_search.BeamSearch._traced_sort_states", "scores_accumulated.reshape.argsort().reshape.div().int", "factor_scores_accumulated[].index_select", "torch.cat", "torch.arange", "beam_search._get_vocab_slice_ids", "torch.index_select", "prefix_masks[].reshape", "beam_search.BeamSearch._sample", "beam_search.BeamSearch._traced_top", "vocab_slice_ids.index_select", "torch.jit.trace", "logger.debug", "torch.jit.trace", "pt.cat.reshape.argsort", "max_output_lengths.repeat_interleave.repeat_interleave.max", "torch.index_select.unsqueeze", "target_prefix_factor_masks.unsqueeze().expand.unsqueeze().expand.unsqueeze", "logger.debug", "torch.jit.trace", "scores_accumulated.reshape.argsort().reshape.div", "utils.adjust_first_step_masking.size"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.encode_and_initialize", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.adjust_first_step_masking", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.gen_prefix_masking", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.gen_prefix_masking", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.decode_step", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.BeamSearch._should_stop", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_vocab_slice_ids"], ["", "def", "forward", "(", "self", ",", "\n", "source", ":", "pt", ".", "Tensor", ",", "\n", "source_length", ":", "pt", ".", "Tensor", ",", "\n", "restrict_lexicon", ":", "Optional", "[", "lexicon", ".", "RestrictLexicon", "]", ",", "\n", "max_output_lengths", ":", "pt", ".", "Tensor", ",", "\n", "target_prefix", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "\n", "target_prefix_factors", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "SearchResult", ":", "\n", "        ", "\"\"\"\n        Translates multiple sentences using beam search.\n\n        :param source: Source ids. Shape: (batch_size, bucket_key, num_factors).\n        :param source_length: Valid source lengths. Shape: (batch_size,).\n        :param restrict_lexicon: Lexicon to use for vocabulary restriction.\n        :param max_output_lengths: Tensor of maximum output lengths per input in source.\n                Shape: (batch_size,). Dtype: int32.\n        :param target_prefix: Target prefix ids. Shape: (batch_size, max prefix length).\n        :param target_prefix_factors: Target prefix factors ids.\n                Shape: (batch_size, max prefix factors length, num_target_factors).\n        :return SearchResult.\n        \"\"\"", "\n", "batch_size", "=", "source", ".", "size", "(", ")", "[", "0", "]", "\n", "logger", ".", "debug", "(", "\"beam_search batch size: %d\"", ",", "batch_size", ")", "\n", "\n", "# Maximum beam search iterations (determined by longest input with eos)", "\n", "max_iterations", "=", "int", "(", "max_output_lengths", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "logger", ".", "debug", "(", "\"max beam search iterations: %d\"", ",", "max_iterations", ")", "\n", "\n", "# General data structure: batch_size * beam_size blocks in total;", "\n", "# a full beam for each sentence, followed by the next beam-block for the next sentence and so on", "\n", "\n", "# best word_indices (also act as input: (batch*beam, num_target_factors", "\n", "best_word_indices", "=", "pt", ".", "full", "(", "(", "batch_size", "*", "self", ".", "beam_size", ",", "self", ".", "num_target_factors", ")", ",", "\n", "fill_value", "=", "self", ".", "bos_id", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "pt", ".", "int32", ")", "\n", "\n", "# offset for hypothesis indices in batch decoding", "\n", "offset", "=", "pt", ".", "arange", "(", "0", ",", "batch_size", "*", "self", ".", "beam_size", ",", "self", ".", "beam_size", ",", "\n", "dtype", "=", "pt", ".", "int32", ",", "device", "=", "self", ".", "device", ")", ".", "repeat_interleave", "(", "self", ".", "beam_size", ")", "\n", "\n", "# locations of each batch item when first dimension is (batch * beam)", "\n", "batch_indices", "=", "pt", ".", "arange", "(", "0", ",", "batch_size", "*", "self", ".", "beam_size", ",", "self", ".", "beam_size", ",", "dtype", "=", "pt", ".", "int64", ",", "device", "=", "self", ".", "device", ")", "\n", "first_step_mask", "=", "pt", ".", "full", "(", "(", "batch_size", "*", "self", ".", "beam_size", ",", "1", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "first_step_mask", "[", "batch_indices", "]", "=", "0.0", "\n", "if", "target_prefix", "is", "not", "None", ":", "\n", "            ", "first_step_mask", "=", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", "\n", "\n", "# Best word and hypotheses indices across beam search steps from topk operation.", "\n", "", "best_hyp_indices_list", "=", "[", "]", "# type: List[pt.Tensor]", "\n", "best_word_indices_list", "=", "[", "]", "# type: List[pt.Tensor]", "\n", "\n", "lengths", "=", "pt", ".", "zeros", "(", "batch_size", "*", "self", ".", "beam_size", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "pt", ".", "int32", ")", "\n", "finished", "=", "pt", ".", "zeros", "(", "batch_size", "*", "self", ".", "beam_size", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "pt", ".", "bool", ")", "\n", "\n", "# Extending max_output_lengths to shape (batch_size * beam_size,)", "\n", "max_output_lengths", "=", "max_output_lengths", ".", "repeat_interleave", "(", "self", ".", "beam_size", ",", "dim", "=", "0", ")", "\n", "\n", "# scores_accumulated: chosen smallest scores in scores (ascending).", "\n", "scores_accumulated", "=", "pt", ".", "zeros", "(", "batch_size", "*", "self", ".", "beam_size", ",", "1", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "# Accumulated (greedily chosen) factor scores. Factor scores are not normalized by length.", "\n", "# TODO: Consider joint tensor for all target factors", "\n", "# Embedded in a list to efficiently assign return values and avoid if-branching", "\n", "factor_scores_accumulated", "=", "[", "pt", ".", "zeros", "(", "batch_size", "*", "self", ".", "beam_size", ",", "self", ".", "num_target_factors", "-", "1", ",", "\n", "device", "=", "self", ".", "device", ",", "dtype", "=", "self", ".", "dtype", ")", "]", "\n", "\n", "# (0) encode source sentence, returns a list", "\n", "model_states", ",", "estimated_reference_lengths", ",", "nvs_prediction", "=", "self", ".", "_inference", ".", "encode_and_initialize", "(", "source", ",", "source_length", ")", "\n", "# repeat states to beam_size", "\n", "if", "self", ".", "_traced_repeat_states", "is", "None", ":", "\n", "            ", "logger", ".", "debug", "(", "\"Tracing repeat_states\"", ")", "\n", "self", ".", "_traced_repeat_states", "=", "pt", ".", "jit", ".", "trace", "(", "self", ".", "_repeat_states", ",", "model_states", ",", "strict", "=", "False", ")", "\n", "", "model_states", "=", "self", ".", "_traced_repeat_states", "(", "*", "model_states", ")", "\n", "# repeat estimated_reference_lengths to shape (batch_size * beam_size)", "\n", "estimated_reference_lengths", "=", "estimated_reference_lengths", ".", "repeat_interleave", "(", "self", ".", "beam_size", ",", "dim", "=", "0", ")", "\n", "\n", "output_vocab_size", "=", "self", ".", "output_vocab_size", "\n", "\n", "# If using a lexicon or NVS, select param rows for logit computation that correspond to the", "\n", "# target vocab for this sentence.", "\n", "# NVS additionally can take a blocking lexicon that restricts the output further", "\n", "vocab_slice_ids", "=", "None", "# type: Optional[pt.Tensor]", "\n", "if", "nvs_prediction", "is", "not", "None", "and", "not", "self", ".", "skip_nvs", ":", "\n", "            ", "vocab_slice_ids", ",", "output_vocab_size", "=", "_get_nvs_vocab_slice_ids", "(", "self", ".", "nvs_thresh", ",", "nvs_prediction", ",", "\n", "restrict_lexicon", "=", "restrict_lexicon", ",", "\n", "target_prefix", "=", "target_prefix", ")", "\n", "", "elif", "restrict_lexicon", ":", "\n", "            ", "source_words", "=", "source", "[", ":", ",", ":", ",", "0", "]", "\n", "vocab_slice_ids", ",", "output_vocab_size", "=", "_get_vocab_slice_ids", "(", "restrict_lexicon", ",", "\n", "source_words", ",", "\n", "self", ".", "eos_id", ",", "\n", "beam_size", "=", "self", ".", "beam_size", ",", "\n", "target_prefix", "=", "target_prefix", ",", "\n", "output_vocab_size", "=", "self", ".", "output_vocab_size", ")", "\n", "\n", "", "if", "self", ".", "_sample", "is", "not", "None", ":", "\n", "            ", "utils", ".", "check_condition", "(", "\n", "vocab_slice_ids", "is", "None", ",", "\n", "\"Vocabulary restriction (via lexicon or NVS) not available when sampling.\"", "\n", ")", "\n", "\n", "", "pad_dist", "=", "pt", ".", "full", "(", "(", "1", ",", "output_vocab_size", ")", ",", "fill_value", "=", "np", ".", "inf", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "pad_dist", "[", "0", ",", "0", "]", "=", "0", "# [0, inf, inf, ...]", "\n", "eos_dist", "=", "pt", ".", "full", "(", "(", "1", ",", "output_vocab_size", ")", ",", "\n", "fill_value", "=", "np", ".", "inf", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "eos_dist", "[", ":", ",", "C", ".", "EOS_ID", "]", "=", "0", "\n", "\n", "# Prefix token masks, where scores are infinity for all other vocabulary items except target_prefix ids", "\n", "prefix_masks", ",", "prefix_masks_length", "=", "None", ",", "0", "\n", "if", "target_prefix", "is", "not", "None", ":", "\n", "            ", "prefix_masks", ",", "prefix_masks_length", "=", "utils", ".", "gen_prefix_masking", "(", "target_prefix", ",", "self", ".", "output_vocab_size", ",", "self", ".", "dtype", ")", "\n", "prefix_masks", "=", "prefix_masks", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "beam_size", ",", "-", "1", ")", "\n", "if", "vocab_slice_ids", "is", "not", "None", ":", "\n", "                ", "prefix_masks", "=", "pt", ".", "index_select", "(", "prefix_masks", ",", "-", "1", ",", "vocab_slice_ids", ")", "\n", "# Prefix factor masks, where scores are also infinity for all other factor items except target_prefix_factor ids", "\n", "", "", "target_prefix_factor_masks", ",", "target_prefix_factor_length", "=", "None", ",", "0", "\n", "if", "target_prefix_factors", "is", "not", "None", ":", "\n", "            ", "target_prefix_factor_masks", ",", "target_prefix_factor_length", "=", "utils", ".", "gen_prefix_masking", "(", "\n", "target_prefix_factors", ",", "self", ".", "output_factor_vocab_size", ",", "self", ".", "dtype", ")", "\n", "target_prefix_factor_masks", "=", "target_prefix_factor_masks", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "beam_size", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "", "t", "=", "1", "\n", "for", "t", "in", "range", "(", "1", ",", "max_iterations", "+", "1", ")", ":", "# max_iterations + 1 required to get correct results", "\n", "# (1) obtain next predictions and advance models' state", "\n", "# target_dists: (batch_size * beam_size, target_vocab_size)", "\n", "# target_factors: (batch_size * beam_size, num_secondary_factors, 2),", "\n", "# where last dimension holds indices and scores", "\n", "            ", "target_prefix_factor_mask", "=", "target_prefix_factor_masks", "[", ":", ",", "t", "-", "1", "]", "if", "target_prefix_factor_masks", "is", "not", "None", "and", "t", "<=", "target_prefix_factor_length", "else", "None", "\n", "target_dists", ",", "model_states", ",", "target_factors", "=", "self", ".", "_inference", ".", "decode_step", "(", "best_word_indices", ",", "\n", "model_states", ",", "\n", "vocab_slice_ids", ",", "\n", "target_prefix_factor_mask", ",", "\n", "self", ".", "output_factor_vocab_size", ")", "\n", "\n", "# (2) Produces the accumulated cost of target words in each row.", "\n", "# There is special treatment for finished rows.", "\n", "# Finished rows are inf everywhere except column zero, which holds the accumulated model score", "\n", "scores", ",", "lengths", "=", "self", ".", "_update_scores", "(", "target_dists", ",", "finished", ",", "scores_accumulated", ",", "\n", "lengths", ",", "max_output_lengths", ",", "pad_dist", ",", "eos_dist", ")", "\n", "\n", "if", "prefix_masks", "is", "not", "None", "and", "t", "<=", "prefix_masks_length", ":", "\n", "# Make sure search selects the current prefix token", "\n", "                ", "scores", "+=", "prefix_masks", "[", ":", ",", "t", "-", "1", "]", ".", "reshape", "(", "-", "1", ",", "output_vocab_size", ")", "\n", "\n", "# (3) Get beam_size winning hypotheses for each sentence block separately. Only look as", "\n", "# far as the active beam size for each sentence.", "\n", "", "if", "self", ".", "_sample", "is", "not", "None", ":", "\n", "                ", "best_hyp_indices", ",", "best_word_indices", ",", "scores_accumulated", "=", "self", ".", "_sample", "(", "scores", ",", "target_dists", ",", "finished", ")", "\n", "", "else", ":", "\n", "# On the first timestep, all hypotheses have identical histories, so force topk() to choose extensions", "\n", "# of the first row only by setting all other rows to inf", "\n", "                ", "if", "target_prefix", "is", "None", ":", "\n", "                    ", "scores", "=", "scores", "+", "first_step_mask", "if", "t", "==", "1", "else", "scores", "\n", "", "else", ":", "\n", "# While decoding target prefixes, we also mask all other hypotheses than the first", "\n", "                    ", "scores", "=", "scores", "+", "first_step_mask", "[", ":", ",", "t", "-", "1", ":", "t", "]", "if", "t", "<=", "first_step_mask", ".", "size", "(", "-", "1", ")", "else", "scores", "\n", "\n", "", "if", "self", ".", "_traced_top", "is", "None", ":", "\n", "                    ", "logger", ".", "debug", "(", "\"Tracing _top\"", ")", "\n", "self", ".", "_traced_top", "=", "pt", ".", "jit", ".", "trace", "(", "self", ".", "_top", ",", "(", "scores", ",", ")", ")", "\n", "", "best_hyp_indices", ",", "best_word_indices", ",", "scores_accumulated", "=", "self", ".", "_traced_top", "(", "scores", ")", "\n", "if", "batch_size", ">", "1", ":", "\n", "# Offsetting the indices to match the shape of the scores matrix", "\n", "                    ", "best_hyp_indices", "=", "best_hyp_indices", "+", "offset", "\n", "\n", "# Map from restricted to full vocab ids if needed", "\n", "", "", "if", "vocab_slice_ids", "is", "not", "None", ":", "\n", "                ", "best_word_indices", "=", "vocab_slice_ids", ".", "index_select", "(", "0", ",", "best_word_indices", ")", "\n", "\n", "# (4) Normalize the scores of newly finished hypotheses. Note that after this until the", "\n", "# next call to topk(), hypotheses may not be in sorted order.", "\n", "", "_sort_inputs", "=", "[", "best_hyp_indices", ",", "best_word_indices", ",", "finished", ",", "scores_accumulated", ",", "lengths", ",", "\n", "estimated_reference_lengths", "]", "\n", "if", "self", ".", "num_target_factors", ">", "1", ":", "\n", "                ", "_sort_inputs", "+=", "[", "target_factors", ",", "*", "factor_scores_accumulated", "]", "\n", "", "if", "self", ".", "_traced_sort_norm_and_update_finished", "is", "None", ":", "\n", "                ", "self", ".", "_traced_sort_norm_and_update_finished", "=", "pt", ".", "jit", ".", "trace", "(", "self", ".", "_sort_norm_and_update_finished", ",", "\n", "_sort_inputs", ")", "\n", "", "best_word_indices", ",", "finished", ",", "(", "scores_accumulated", ",", "*", "factor_scores_accumulated", ")", ",", "lengths", ",", "estimated_reference_lengths", "=", "self", ".", "_traced_sort_norm_and_update_finished", "(", "*", "_sort_inputs", ")", "\n", "\n", "# Collect best hypotheses, best word indices", "\n", "best_word_indices_list", ".", "append", "(", "best_word_indices", ")", "\n", "best_hyp_indices_list", ".", "append", "(", "best_hyp_indices", ")", "\n", "\n", "if", "self", ".", "_should_stop", "(", "finished", ",", "batch_size", ")", ":", "\n", "                ", "break", "\n", "\n", "# (5) update models' state with winning hypotheses (ascending)", "\n", "", "if", "self", ".", "_traced_sort_states", "is", "None", ":", "\n", "                ", "logger", ".", "debug", "(", "\"Tracing sort_states\"", ")", "\n", "self", ".", "_traced_sort_states", "=", "pt", ".", "jit", ".", "trace", "(", "self", ".", "_sort_states", ",", "(", "best_hyp_indices", ",", "*", "model_states", ")", ")", "\n", "", "model_states", "=", "self", ".", "_traced_sort_states", "(", "best_hyp_indices", ",", "*", "model_states", ")", "\n", "\n", "", "logger", ".", "debug", "(", "\"Finished after %d out of %d steps.\"", ",", "t", ",", "max_iterations", ")", "\n", "\n", "# (9) Sort the hypotheses within each sentence (normalization for finished hyps may have unsorted them).", "\n", "folded_accumulated_scores", "=", "scores_accumulated", ".", "reshape", "(", "batch_size", ",", "self", ".", "beam_size", ")", "\n", "indices", "=", "folded_accumulated_scores", ".", "argsort", "(", "dim", "=", "1", ",", "descending", "=", "False", ")", ".", "reshape", "(", "-", "1", ")", "\n", "# 1 = scores_accumulated.size()[1]", "\n", "best_hyp_indices", "=", "indices", ".", "div", "(", "1", ",", "rounding_mode", "=", "'floor'", ")", ".", "int", "(", ")", "+", "offset", "\n", "scores_accumulated", "=", "scores_accumulated", ".", "index_select", "(", "0", ",", "best_hyp_indices", ")", "\n", "if", "self", ".", "num_target_factors", ">", "1", ":", "\n", "            ", "accumulated_factor_scores", "=", "factor_scores_accumulated", "[", "0", "]", ".", "index_select", "(", "0", ",", "best_hyp_indices", ")", "\n", "# (batch*beam, num_target_factors)", "\n", "scores_accumulated", "=", "pt", ".", "cat", "(", "(", "scores_accumulated", ",", "accumulated_factor_scores", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "best_hyp_indices_list", ".", "append", "(", "best_hyp_indices", ")", "\n", "lengths", "=", "lengths", ".", "index_select", "(", "0", ",", "best_hyp_indices", ")", "\n", "all_best_hyp_indices", "=", "pt", ".", "stack", "(", "best_hyp_indices_list", ",", "dim", "=", "1", ")", "\n", "all_best_word_indices", "=", "pt", ".", "stack", "(", "best_word_indices_list", ",", "dim", "=", "2", ")", "\n", "\n", "return", "SearchResult", "(", "best_hyp_indices", "=", "all_best_hyp_indices", ",", "\n", "best_word_indices", "=", "all_best_word_indices", ",", "\n", "accumulated_scores", "=", "scores_accumulated", ",", "\n", "lengths", "=", "lengths", ",", "\n", "estimated_reference_lengths", "=", "estimated_reference_lengths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.BeamSearch._should_stop": [[1054, 1060], ["finished.reshape().sum", "at_least_one_finished.sum().item", "finished.sum().item", "finished.reshape", "at_least_one_finished.sum", "finished.sum"], "methods", ["None"], ["", "def", "_should_stop", "(", "self", ",", "finished", ":", "pt", ".", "Tensor", ",", "batch_size", ":", "int", ")", "->", "bool", ":", "\n", "        ", "if", "self", ".", "beam_search_stop", "==", "C", ".", "BEAM_SEARCH_STOP_FIRST", ":", "\n", "            ", "at_least_one_finished", "=", "finished", ".", "reshape", "(", "batch_size", ",", "self", ".", "beam_size", ")", ".", "sum", "(", "dim", "=", "1", ")", ">", "0", "\n", "return", "at_least_one_finished", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "batch_size", "\n", "", "else", ":", "\n", "            ", "return", "finished", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "batch_size", "*", "self", ".", "beam_size", "# all finished", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_vocab_slice_ids": [[532, 570], ["torch.tensor", "torch.nn.functional.pad", "logger.debug", "restrict_lexicon.is_blocking", "restrict_lexicon.get_allowed_trg_ids", "utils.check_condition", "numpy.arange", "numpy.setdiff1d", "torch.concat().unique", "pt.cat.size", "logger.warning", "torch.cat", "source_words.cpu().int().numpy", "restrict_lexicon.requires_src_ids", "source_words.cpu().int().numpy", "restrict_lexicon.get_blocked_trg_ids", "torch.concat", "torch.full", "source_words.cpu().int", "source_words.cpu().int", "target_prefix.flatten().type", "source_words.cpu", "source_words.cpu", "pt.cat.size", "target_prefix.flatten"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.is_blocking", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_allowed_trg_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.requires_src_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_blocked_trg_ids"], ["", "", "def", "_get_vocab_slice_ids", "(", "restrict_lexicon", ":", "lexicon", ".", "RestrictLexicon", ",", "\n", "source_words", ":", "pt", ".", "Tensor", ",", "\n", "eos_id", ":", "int", ",", "\n", "beam_size", ":", "int", ",", "\n", "target_prefix", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "\n", "output_vocab_size", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "int", "]", ":", "\n", "    ", "device", "=", "source_words", ".", "device", "\n", "if", "not", "restrict_lexicon", ".", "is_blocking", "(", ")", ":", "\n", "        ", "vocab_slice_ids_np", "=", "restrict_lexicon", ".", "get_allowed_trg_ids", "(", "source_words", ".", "cpu", "(", ")", ".", "int", "(", ")", ".", "numpy", "(", ")", ")", "# type: ignore", "\n", "", "else", ":", "\n", "        ", "utils", ".", "check_condition", "(", "output_vocab_size", "is", "not", "None", ",", "\n", "\"output_vocab_size required for blocking restrict lexicon.\"", ")", "\n", "full_vocab", "=", "np", ".", "arange", "(", "0", ",", "output_vocab_size", ",", "dtype", "=", "'int32'", ")", "\n", "source_ids", "=", "source_words", ".", "cpu", "(", ")", ".", "int", "(", ")", ".", "numpy", "(", ")", "if", "restrict_lexicon", ".", "requires_src_ids", "(", ")", "else", "None", "\n", "vocab_slice_ids_np", "=", "np", ".", "setdiff1d", "(", "full_vocab", ",", "restrict_lexicon", ".", "get_blocked_trg_ids", "(", "source_ids", ")", ",", "assume_unique", "=", "True", ")", "\n", "\n", "", "vocab_slice_ids", "=", "pt", ".", "tensor", "(", "vocab_slice_ids_np", ",", "device", "=", "device", ",", "dtype", "=", "pt", ".", "int64", ")", "\n", "if", "target_prefix", "is", "not", "None", ":", "\n", "# Ensuring that target prefix ids are part of vocab_slice_ids", "\n", "        ", "vocab_slice_ids", "=", "pt", ".", "concat", "(", "[", "vocab_slice_ids", ",", "target_prefix", ".", "flatten", "(", ")", ".", "type", "(", "pt", ".", "int64", ")", "]", ",", "-", "1", ")", ".", "unique", "(", ")", "\n", "# Pad to a multiple of 8.", "\n", "", "vocab_slice_ids", "=", "pt", ".", "nn", ".", "functional", ".", "pad", "(", "vocab_slice_ids", ",", "\n", "pad", "=", "(", "0", ",", "7", "-", "(", "(", "vocab_slice_ids", ".", "size", "(", "-", "1", ")", "-", "1", ")", "%", "8", ")", ")", ",", "\n", "mode", "=", "'constant'", ",", "value", "=", "eos_id", ")", "\n", "vocab_slice_ids_shape", "=", "vocab_slice_ids", ".", "size", "(", ")", "[", "0", "]", "\n", "if", "vocab_slice_ids_shape", "<", "beam_size", "+", "1", ":", "\n", "# This fixes an edge case for toy models, where the number of vocab ids from the lexicon is", "\n", "# smaller than the beam size.", "\n", "        ", "logger", ".", "warning", "(", "\"Padding vocab_slice_ids (%d) with EOS to have at least %d+1 elements to expand\"", ",", "\n", "vocab_slice_ids_shape", ",", "beam_size", ")", "\n", "n", "=", "beam_size", "-", "vocab_slice_ids_shape", "+", "1", "\n", "vocab_slice_ids", "=", "pt", ".", "cat", "(", "(", "vocab_slice_ids", ",", "pt", ".", "full", "(", "(", "n", ",", ")", ",", "\n", "fill_value", "=", "eos_id", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "pt", ".", "int32", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "logger", ".", "debug", "(", "f'decoder softmax size: {vocab_slice_ids_shape}'", ")", "\n", "return", "vocab_slice_ids", ",", "vocab_slice_ids_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search._get_nvs_vocab_slice_ids": [[572, 615], ["torch.tensor", "[].unique", "logger.debug", "torch.any", "utils.check_condition", "torch.from_numpy().long().to", "torch.nn.functional.pad", "len", "restrict_lexicon.is_blocking", "torch.from_numpy().long", "pt.any.nonzero", "restrict_lexicon.requires_src_ids", "target_prefix.flatten().long", "torch.from_numpy", "restrict_lexicon.get_blocked_trg_ids", "target_prefix.flatten", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.is_blocking", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.requires_src_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_blocked_trg_ids"], ["", "def", "_get_nvs_vocab_slice_ids", "(", "\n", "nvs_thresh", ":", "float", ",", "\n", "nvs_prediction", ":", "pt", ".", "Tensor", ",", "\n", "restrict_lexicon", ":", "Optional", "[", "lexicon", ".", "RestrictLexicon", "]", "=", "None", ",", "\n", "target_prefix", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Return the vocab slice ids based on the Neural Vocabulary Selection model's predictions.\n    :param nvs_thresh: The threshold for selecting a word (between 0.0 and 1.0).\n    :param nvs_prediction: Shape: (batch size, vocab_size).\n    :param restrict_lexicon: An optional blocking lexicon to forcefully turn specific words off.\n    :param target_prefix: Shape: (batch size, vocab_size).\n    \"\"\"", "\n", "nvs_prediction_above_thresh", "=", "(", "nvs_prediction", ">", "nvs_thresh", ")", "\n", "# merge batch dimension (batch size, vocab_size) -> (1, vocab_size)", "\n", "if", "nvs_prediction_above_thresh", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "        ", "nvs_prediction_above_thresh", "=", "pt", ".", "any", "(", "nvs_prediction_above_thresh", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "if", "restrict_lexicon", "is", "not", "None", ":", "\n", "        ", "utils", ".", "check_condition", "(", "\n", "restrict_lexicon", ".", "is_blocking", "(", ")", "and", "not", "restrict_lexicon", ".", "requires_src_ids", "(", ")", ",", "\n", "\"Only a blocking, static lexicon is supported when Neural Vocabulary Selection (NVS) is used.\"", "\n", ")", "\n", "blocked_tokens", "=", "pt", ".", "from_numpy", "(", "restrict_lexicon", ".", "get_blocked_trg_ids", "(", ")", ")", ".", "long", "(", ")", ".", "to", "(", "nvs_prediction_above_thresh", ".", "device", ")", "\n", "nvs_prediction_above_thresh", "[", "0", ",", "blocked_tokens", "]", "=", "False", "\n", "\n", "# Add special symbols:", "\n", "", "pt_symbols", "=", "pt", ".", "tensor", "(", "[", "C", ".", "PAD_ID", ",", "C", ".", "UNK_ID", ",", "C", ".", "BOS_ID", ",", "C", ".", "EOS_ID", "]", ",", "device", "=", "nvs_prediction_above_thresh", ".", "device", ")", "\n", "nvs_prediction_above_thresh", "[", "0", ",", "pt_symbols", "]", "=", "True", "\n", "\n", "if", "target_prefix", "is", "not", "None", ":", "\n", "        ", "nvs_prediction_above_thresh", "[", "0", ",", "target_prefix", ".", "flatten", "(", ")", ".", "long", "(", ")", "]", "=", "True", "\n", "\n", "", "bow", "=", "nvs_prediction_above_thresh", ".", "nonzero", "(", "as_tuple", "=", "True", ")", "[", "1", "]", ".", "unique", "(", ")", "\n", "\n", "# pad to a multiple of 8.", "\n", "if", "len", "(", "bow", ")", "%", "8", "!=", "0", ":", "\n", "        ", "bow", "=", "pt", ".", "nn", ".", "functional", ".", "pad", "(", "bow", ",", "(", "0", ",", "7", "-", "(", "(", "len", "(", "bow", ")", "-", "1", ")", "%", "8", ")", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "C", ".", "EOS_ID", ")", "\n", "\n", "", "output_vocab_size", "=", "bow", ".", "shape", "[", "0", "]", "\n", "logger", ".", "debug", "(", "f'decoder softmax size: {output_vocab_size}'", ")", "\n", "\n", "return", "bow", ",", "output_vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.get_search_algorithm": [[1062, 1134], ["beam_search.GreedySearch", "beam_search.BeamSearch", "len", "logger.warning", "len", "beam_search._SingleModelInference", "beam_search._EnsembleInference", "beam_search._SingleModelInference", "logger.info"], "function", ["None"], ["", "", "", "def", "get_search_algorithm", "(", "models", ":", "List", "[", "SockeyeModel", "]", ",", "\n", "beam_size", ":", "int", ",", "\n", "device", ":", "pt", ".", "device", ",", "\n", "output_scores", ":", "bool", ",", "\n", "scorer", ":", "CandidateScorer", ",", "\n", "ensemble_mode", ":", "str", "=", "'linear'", ",", "\n", "beam_search_stop", ":", "str", "=", "C", ".", "BEAM_SEARCH_STOP_ALL", ",", "\n", "constant_length_ratio", ":", "float", "=", "0.0", ",", "\n", "sample", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "prevent_unk", ":", "bool", "=", "False", ",", "\n", "greedy", ":", "bool", "=", "False", ",", "\n", "skip_nvs", ":", "bool", "=", "False", ",", "\n", "nvs_thresh", ":", "Optional", "[", "float", "]", "=", "None", ")", "->", "Union", "[", "BeamSearch", ",", "GreedySearch", "]", ":", "\n", "    ", "\"\"\"\n    Returns an instance of BeamSearch or GreedySearch depending.\n\n    \"\"\"", "\n", "# TODO: consider automatically selecting GreedySearch if flags to this method are compatible.", "\n", "search", "=", "None", "# type: Optional[Union[BeamSearch, GreedySearch]]", "\n", "if", "greedy", ":", "\n", "        ", "assert", "len", "(", "models", ")", "==", "1", ",", "\"Greedy search does not support ensemble decoding\"", "\n", "assert", "beam_size", "==", "1", ",", "\"Greedy search does not support beam_size > 1\"", "\n", "if", "output_scores", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Greedy Search does not return proper hypothesis scores\"", ")", "\n", "", "assert", "constant_length_ratio", "==", "-", "1.0", ",", "\"Greedy search does not support brevity penalty\"", "\n", "assert", "sample", "is", "None", ",", "\"Greedy search does not support sampling\"", "\n", "assert", "not", "prevent_unk", ",", "\"Greedy Search does not support prevention of unknown tokens\"", "# TODO: add support", "\n", "search", "=", "GreedySearch", "(", "\n", "dtype", "=", "models", "[", "0", "]", ".", "dtype", ",", "\n", "bos_id", "=", "C", ".", "BOS_ID", ",", "\n", "eos_id", "=", "C", ".", "EOS_ID", ",", "\n", "device", "=", "device", ",", "\n", "num_source_factors", "=", "models", "[", "0", "]", ".", "num_source_factors", ",", "\n", "num_target_factors", "=", "models", "[", "0", "]", ".", "num_target_factors", ",", "\n", "inference", "=", "_SingleModelInference", "(", "model", "=", "models", "[", "0", "]", ",", "\n", "skip_softmax", "=", "True", ",", "\n", "constant_length_ratio", "=", "0.0", ")", ",", "\n", "skip_nvs", "=", "skip_nvs", ",", "\n", "nvs_thresh", "=", "nvs_thresh", ")", "\n", "", "else", ":", "\n", "        ", "inference", "=", "None", "# type: Optional[_Inference]", "\n", "if", "len", "(", "models", ")", "==", "1", ":", "\n", "            ", "skip_softmax", "=", "beam_size", "==", "1", "and", "not", "output_scores", "and", "sample", "is", "None", "\n", "if", "skip_softmax", ":", "\n", "                ", "logger", ".", "info", "(", "\"Enabled skipping softmax for a single model and greedy decoding.\"", ")", "\n", "", "inference", "=", "_SingleModelInference", "(", "model", "=", "models", "[", "0", "]", ",", "\n", "skip_softmax", "=", "skip_softmax", ",", "\n", "constant_length_ratio", "=", "constant_length_ratio", ")", "\n", "", "else", ":", "\n", "            ", "inference", "=", "_EnsembleInference", "(", "models", "=", "models", ",", "\n", "ensemble_mode", "=", "ensemble_mode", ",", "\n", "constant_length_ratio", "=", "constant_length_ratio", ")", "\n", "\n", "", "search", "=", "BeamSearch", "(", "\n", "beam_size", "=", "beam_size", ",", "\n", "dtype", "=", "models", "[", "0", "]", ".", "dtype", ",", "\n", "bos_id", "=", "C", ".", "BOS_ID", ",", "\n", "eos_id", "=", "C", ".", "EOS_ID", ",", "\n", "device", "=", "device", ",", "\n", "output_vocab_size", "=", "models", "[", "0", "]", ".", "output_layer_vocab_size", ",", "\n", "beam_search_stop", "=", "beam_search_stop", ",", "\n", "scorer", "=", "scorer", ",", "\n", "sample", "=", "sample", ",", "\n", "num_source_factors", "=", "models", "[", "0", "]", ".", "num_source_factors", ",", "\n", "num_target_factors", "=", "models", "[", "0", "]", ".", "num_target_factors", ",", "\n", "prevent_unk", "=", "prevent_unk", ",", "\n", "inference", "=", "inference", ",", "\n", "skip_nvs", "=", "skip_nvs", ",", "\n", "nvs_thresh", "=", "nvs_thresh", "\n", ")", "\n", "\n", "", "return", "search", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.rerank.Reranker.__init__": [[45, 67], ["functools.partial", "functools.partial", "functools.partial", "rerank.Reranker.metric.startswith", "functools.partial", "utils.SockeyeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "metric", ":", "str", ",", "isometric_alpha", ":", "float", "=", "0.5", ",", "return_score", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "self", ".", "metric", "=", "metric", "\n", "self", ".", "isometric_alpha", "=", "isometric_alpha", "\n", "self", ".", "return_score", "=", "return_score", "\n", "\n", "if", "self", ".", "metric", "==", "C", ".", "RERANK_BLEU", ":", "\n", "# \"add-k\" smoothing is the best-performing method implemented in", "\n", "# sacrebleu.  See \"Method 2\" results from Chen and Cherry", "\n", "# (http://aclweb.org/anthology/W14-3346)", "\n", "            ", "self", ".", "scoring_function", "=", "partial", "(", "sacrebleu", ".", "sentence_bleu", ",", "smooth_method", "=", "'add-k'", ")", "\n", "", "elif", "self", ".", "metric", "==", "C", ".", "RERANK_CHRF", ":", "\n", "            ", "self", ".", "scoring_function", "=", "sacrebleu", ".", "sentence_chrf", "# type: ignore", "\n", "", "elif", "self", ".", "metric", ".", "startswith", "(", "C", ".", "RERANK_ISOMETRIC", ")", ":", "\n", "            ", "self", ".", "scoring_function", "=", "partial", "(", "utils", ".", "compute_isometric_score", ",", "isometric_metric", "=", "self", ".", "metric", ",", "\n", "isometric_alpha", "=", "self", ".", "isometric_alpha", ")", "\n", "", "else", ":", "\n", "            ", "raise", "utils", ".", "SockeyeError", "(", "\"Scoring metric '%s' unknown. Choices are: %s\"", "%", "(", "metric", ",", "C", ".", "RERANK_METRICS", ")", ")", "\n", "\n", "", "if", "self", ".", "metric", "==", "C", ".", "RERANK_ISOMETRIC_LC", ":", "\n", "            ", "self", ".", "ranking_indices", "=", "partial", "(", "self", ".", "_get_ranking_indices", ",", "kind", "=", "'mergesort'", ",", "order", "=", "'ascending'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ranking_indices", "=", "partial", "(", "self", ".", "_get_ranking_indices", ",", "kind", "=", "'mergesort'", ",", "order", "=", "'descending'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.rerank.Reranker.rerank": [[69, 98], ["rerank.Reranker.metric.startswith", "rerank.Reranker._sort_by_ranking", "rerank.Reranker.ranking_indices", "rerank.Reranker.ranking_indices", "rerank.Reranker.scoring_function", "rerank.Reranker.scoring_function", "zip"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.rerank.Reranker._sort_by_ranking"], ["", "", "def", "rerank", "(", "self", ",", "hypotheses", ":", "Dict", "[", "str", ",", "Any", "]", ",", "reference", ":", "str", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Reranks a set of hypotheses that belong to one single reference\n        translation. Uses stable sorting.\n\n        :param hypotheses: Nbest translations.\n        :param reference: A single string with the actual reference translation.\n        :return: Nbest translations sorted by reranking scores.\n        \"\"\"", "\n", "if", "self", ".", "metric", "==", "C", ".", "RERANK_BLEU", "or", "self", ".", "metric", "==", "C", ".", "RERANK_CHRF", ":", "\n", "            ", "scores", "=", "[", "self", ".", "scoring_function", "(", "hypothesis", ",", "[", "reference", "]", ")", ".", "score", "for", "\n", "hypothesis", "in", "hypotheses", "[", "'translations'", "]", "]", "\n", "# BLEU, CHRF - the higher, the better", "\n", "ranking", "=", "self", ".", "ranking_indices", "(", "scores", ")", "\n", "\n", "", "if", "self", ".", "metric", ".", "startswith", "(", "C", ".", "RERANK_ISOMETRIC", ")", ":", "\n", "            ", "source", "=", "hypotheses", "[", "'text'", "]", "\n", "# pylint: disable=redundant-keyword-arg", "\n", "scores", "=", "[", "self", ".", "scoring_function", "(", "hypothesis", ",", "hypothesis_score", "[", "0", "]", ",", "source", ")", "for", "\n", "hypothesis", ",", "hypothesis_score", "in", "zip", "(", "hypotheses", "[", "'translations'", "]", ",", "hypotheses", "[", "'scores'", "]", ")", "]", "\n", "# isometric-lc - the smaller, the better", "\n", "ranking", "=", "self", ".", "ranking_indices", "(", "scores", ")", "\n", "\n", "", "reranked_hypotheses", "=", "self", ".", "_sort_by_ranking", "(", "hypotheses", ",", "ranking", ")", "\n", "if", "self", ".", "return_score", ":", "\n", "            ", "reranked_hypotheses", "[", "'scores'", "]", "=", "[", "scores", "[", "i", "]", "for", "i", "in", "ranking", "]", "\n", "reranked_hypotheses", "[", "'score'", "]", "=", "reranked_hypotheses", "[", "'scores'", "]", "[", "0", "]", "\n", "\n", "", "return", "reranked_hypotheses", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.rerank.Reranker._get_ranking_indices": [[99, 105], ["list", "list", "numpy.argsort", "numpy.argsort"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_ranking_indices", "(", "scores", ":", "List", ",", "kind", ":", "str", "=", "'mergesort'", ",", "order", ":", "str", "=", "'descending'", ")", "->", "List", ":", "\n", "        ", "if", "order", "==", "'descending'", ":", "\n", "            ", "return", "list", "(", "np", ".", "argsort", "(", "scores", ",", "kind", "=", "kind", ")", "[", ":", ":", "-", "1", "]", ")", "# type: ignore", "\n", "", "else", ":", "\n", "            ", "return", "list", "(", "np", ".", "argsort", "(", "scores", ",", "kind", "=", "kind", ")", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.rerank.Reranker._sort_by_ranking": [[106, 116], ["rerank.Reranker._sort_by_ranking.ranksort"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_sort_by_ranking", "(", "hypotheses", ":", "Dict", "[", "str", ",", "Any", "]", ",", "ranking", ":", "List", "[", "int", "]", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "def", "ranksort", "(", "l", ")", ":", "\n", "# Sort lists in hypotheses object (translations, scores) and return", "\n", "# non-lists (sentence_id, score, translation) unchanged.", "\n", "            ", "if", "not", "isinstance", "(", "l", ",", "list", ")", ":", "\n", "                ", "return", "l", "\n", "", "return", "[", "l", "[", "i", "]", "for", "i", "in", "ranking", "]", "\n", "\n", "", "return", "{", "key", ":", "ranksort", "(", "value", ")", "for", "key", ",", "value", "in", "hypotheses", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.rerank.rerank": [[118, 170], ["rerank.Reranker", "logger.info", "utils.smart_open", "utils.smart_open", "utils.smart_open", "enumerate", "output_stream.close", "zip", "reference_line.strip", "json.loads", "utils.check_condition", "len", "hypothesis_line.strip", "logger.info", "Reranker.rerank", "print", "print", "logger.warning", "range", "json.dumps", "logger.warning"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.rerank.rerank"], ["", "", "def", "rerank", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "\"\"\"\n    Reranks a list of hypotheses according to a sentence-level metric.\n    Writes all output to STDOUT.\n\n    :param args: Namespace object holding CLI arguments.\n    \"\"\"", "\n", "reranker", "=", "Reranker", "(", "args", ".", "metric", ",", "args", ".", "isometric_alpha", ",", "args", ".", "return_score", ")", "\n", "output_stream", "=", "sys", ".", "stdout", "if", "args", ".", "output", "is", "None", "else", "utils", ".", "smart_open", "(", "args", ".", "output", ",", "mode", "=", "'w'", ")", "\n", "logger", ".", "info", "(", "\"Hypotheses re-ranking using criterion: '%s' \"", "%", "args", ".", "metric", ")", "\n", "\n", "with", "utils", ".", "smart_open", "(", "args", ".", "reference", ")", "as", "reference", ",", "utils", ".", "smart_open", "(", "args", ".", "hypotheses", ")", "as", "hypotheses", ":", "\n", "        ", "for", "i", ",", "(", "reference_line", ",", "hypothesis_line", ")", "in", "enumerate", "(", "zip", "(", "reference", ",", "hypotheses", ")", ",", "1", ")", ":", "\n", "            ", "reference", "=", "reference_line", ".", "strip", "(", ")", "\n", "# Expects a JSON object with keys containing at least 'translations',", "\n", "# as returned by sockeye.translate's nbest output", "\n", "hypotheses", "=", "json", ".", "loads", "(", "hypothesis_line", ".", "strip", "(", ")", ")", "\n", "utils", ".", "check_condition", "(", "'translations'", "in", "hypotheses", ",", "\n", "\"Reranking requires nbest JSON input with 'translations' key present.\"", ")", "\n", "num_hypotheses", "=", "len", "(", "hypotheses", "[", "'translations'", "]", ")", "\n", "\n", "if", "not", "num_hypotheses", ">", "1", ":", "\n", "                ", "logger", ".", "info", "(", "\"Line %d contains %d hypotheses. Nothing to rerank.\"", ",", "i", ",", "num_hypotheses", ")", "\n", "reranked_hypotheses", "=", "hypotheses", "\n", "", "else", ":", "\n", "                ", "reranked_hypotheses", "=", "reranker", ".", "rerank", "(", "hypotheses", ",", "reference", ")", "\n", "\n", "", "if", "args", ".", "output_best", ":", "\n", "                ", "best_hypothesis", "=", "reranked_hypotheses", "[", "'translations'", "]", "[", "0", "]", "if", "num_hypotheses", "else", "''", "\n", "\n", "if", "not", "best_hypothesis", "and", "args", ".", "output_reference_instead_of_blank", ":", "\n", "                    ", "logger", ".", "warning", "(", "'Line %d: replacing blank hypothesis with reference.'", ",", "i", ")", "\n", "best_hypothesis", "=", "reference", "\n", "\n", "# get best non-blank hypothesis, when reference is not used", "\n", "", "if", "not", "best_hypothesis", "and", "args", ".", "output_best_non_blank", "and", "num_hypotheses", ">", "1", ":", "\n", "                    ", "for", "h", "in", "range", "(", "num_hypotheses", ")", ":", "\n", "                        ", "best_hypothesis", "=", "reranked_hypotheses", "[", "'translations'", "]", "[", "h", "]", "\n", "\n", "if", "not", "best_hypothesis", ":", "\n", "                            ", "continue", "\n", "", "else", ":", "\n", "                            ", "logger", ".", "warning", "(", "'Line %d: blank hypothesis replaced by line [%d] non-blank '", "\n", "'hypothesis: %s .'", ",", "h", "-", "1", ",", "h", ",", "best_hypothesis", ")", "\n", "break", "\n", "\n", "", "", "", "print", "(", "best_hypothesis", ",", "file", "=", "output_stream", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "json", ".", "dumps", "(", "reranked_hypotheses", ",", "sort_keys", "=", "True", ")", ",", "file", "=", "output_stream", ")", "\n", "\n", "", "", "", "if", "output_stream", "is", "not", "sys", ".", "stdout", ":", "\n", "        ", "output_stream", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.rerank.main": [[172, 189], ["log.setup_main_logger", "log.log_sockeye_version", "argparse.ArgumentParser", "arguments.add_rerank_args", "argparse.ArgumentParser.parse_args", "logger.info", "rerank.rerank"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.setup_main_logger", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.log_sockeye_version", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_rerank_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.rerank.rerank"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n    Commandline interface to rerank nbest lists.\n    \"\"\"", "\n", "log", ".", "setup_main_logger", "(", "console", "=", "True", ",", "file_logging", "=", "False", ")", "\n", "log", ".", "log_sockeye_version", "(", "logger", ")", "\n", "\n", "params", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Rerank nbest lists of translations.\"", "\n", "\" Reranking sorts a list of hypotheses according\"", "\n", "\" to their score compared to a common reference or\"", "\n", "\"source sentence.\"", ")", "\n", "arguments", ".", "add_rerank_args", "(", "params", ")", "\n", "args", "=", "params", ".", "parse_args", "(", ")", "\n", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "rerank", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.encoder.Encoder.get_num_hidden": [[39, 45], ["NotImplementedError"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "get_num_hidden", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        :return: The representation size of this encoder.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.encoder.Encoder.get_encoded_seq_len": [[46, 51], ["None"], "methods", ["None"], ["", "def", "get_encoded_seq_len", "(", "self", ",", "seq_len", ":", "int", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        :return: The size of the encoded sequence.\n        \"\"\"", "\n", "return", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.encoder.Encoder.get_max_seq_len": [[52, 57], ["None"], "methods", ["None"], ["", "def", "get_max_seq_len", "(", "self", ")", "->", "Optional", "[", "int", "]", ":", "\n", "        ", "\"\"\"\n        :return: The maximum length supported by the encoder if such a restriction exists.\n        \"\"\"", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.encoder.EmbeddingConfig.__post_init__": [[76, 80], ["len"], "methods", ["None"], ["def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_factors", "=", "1", "\n", "if", "self", ".", "factor_configs", "is", "not", "None", ":", "\n", "            ", "self", ".", "num_factors", "+=", "len", "(", "self", ".", "factor_configs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.encoder.Embedding.__init__": [[90, 113], ["super().__init__", "torch.nn.ModuleList", "torch.nn.Embedding", "enumerate", "torch.nn.Dropout", "encoder.Embedding.factor_embeds.append", "encoder.Embedding.factor_combinations.append", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "config", ":", "EmbeddingConfig", ",", "embedding", ":", "Optional", "[", "pt", ".", "nn", ".", "Embedding", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "self", ".", "embedding", "=", "embedding", "\n", "", "else", ":", "\n", "            ", "self", ".", "embedding", "=", "pt", ".", "nn", ".", "Embedding", "(", "self", ".", "config", ".", "vocab_size", ",", "self", ".", "config", ".", "num_embed", ",", "\n", "sparse", "=", "self", ".", "config", ".", "allow_sparse_grad", ")", "\n", "\n", "", "self", ".", "num_factors", "=", "self", ".", "config", ".", "num_factors", "\n", "self", ".", "factor_embeds", "=", "pt", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "factor_combinations", "=", "[", "]", "# type: List[str]", "\n", "if", "self", ".", "config", ".", "factor_configs", "is", "not", "None", ":", "\n", "            ", "for", "i", ",", "fc", "in", "enumerate", "(", "self", ".", "config", ".", "factor_configs", ",", "1", ")", ":", "\n", "                ", "if", "fc", ".", "share_embedding", ":", "\n", "                    ", "factor_embed", "=", "self", ".", "embedding", "\n", "", "else", ":", "\n", "                    ", "factor_embed", "=", "pt", ".", "nn", ".", "Embedding", "(", "fc", ".", "vocab_size", ",", "fc", ".", "num_embed", ",", "\n", "sparse", "=", "self", ".", "config", ".", "allow_sparse_grad", ")", "\n", "", "self", ".", "factor_embeds", ".", "append", "(", "factor_embed", ")", "\n", "self", ".", "factor_combinations", ".", "append", "(", "fc", ".", "combine", ")", "\n", "\n", "", "", "self", ".", "dropout", "=", "pt", ".", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "config", ".", "dropout", ")", "if", "self", ".", "config", ".", "dropout", ">", "0.0", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.encoder.Embedding.forward": [[114, 147], ["encoder.Embedding.embedding", "enumerate", "encoder.Embedding.dropout", "zip", "factor_embedding", "torch.mean", "torch.cat", "concat_factors_embeds.append", "torch.stack", "sum_factors_embeds.append", "average_factors_embeds.append", "ValueError"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.mean"], ["", "def", "forward", "(", "self", ",", "data", ":", "pt", ".", "Tensor", ")", "->", "pt", ".", "Tensor", ":", "\n", "        ", "primary_data", "=", "data", "[", ":", ",", ":", ",", "0", "]", "\n", "embedded", "=", "self", ".", "embedding", "(", "primary_data", ")", "\n", "\n", "if", "self", ".", "num_factors", ">", "1", ":", "\n", "            ", "average_factors_embeds", "=", "[", "]", "\n", "concat_factors_embeds", "=", "[", "]", "\n", "sum_factors_embeds", "=", "[", "]", "\n", "for", "i", ",", "(", "factor_embedding", ",", "factor_combination", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "factor_embeds", ",", "\n", "self", ".", "factor_combinations", ")", ",", "1", ")", ":", "\n", "                ", "factor_data", "=", "data", "[", ":", ",", ":", ",", "i", "]", "\n", "factor_embedded", "=", "factor_embedding", "(", "factor_data", ")", "\n", "if", "factor_combination", "==", "C", ".", "FACTORS_COMBINE_CONCAT", ":", "\n", "                    ", "concat_factors_embeds", ".", "append", "(", "factor_embedded", ")", "\n", "", "elif", "factor_combination", "==", "C", ".", "FACTORS_COMBINE_SUM", ":", "\n", "                    ", "sum_factors_embeds", ".", "append", "(", "factor_embedded", ")", "\n", "", "elif", "factor_combination", "==", "C", ".", "FACTORS_COMBINE_AVERAGE", ":", "\n", "                    ", "average_factors_embeds", ".", "append", "(", "factor_embedded", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "f\"Unknown combine value for factors: {factor_combination}\"", ")", "\n", "\n", "", "", "if", "average_factors_embeds", ":", "\n", "                ", "embedded", "=", "pt", ".", "mean", "(", "pt", ".", "stack", "(", "[", "embedded", "]", "+", "average_factors_embeds", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "", "if", "sum_factors_embeds", ":", "\n", "                ", "for", "sum_factor_embed", "in", "sum_factors_embeds", ":", "\n", "                    ", "embedded", "=", "embedded", "+", "sum_factor_embed", "\n", "", "", "if", "concat_factors_embeds", ":", "\n", "                ", "embedded", "=", "pt", ".", "cat", "(", "[", "embedded", "]", "+", "concat_factors_embeds", ",", "dim", "=", "2", ")", "\n", "\n", "", "", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "embedded", "=", "self", ".", "dropout", "(", "embedded", ")", "\n", "\n", "", "return", "embedded", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.encoder.Embedding.get_num_hidden": [[148, 153], ["None"], "methods", ["None"], ["", "def", "get_num_hidden", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Return the representation size of this encoder.\n        \"\"\"", "\n", "return", "self", ".", "config", ".", "num_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.encoder.TransformerEncoder.__init__": [[165, 184], ["torch.nn.Module.__init__", "layers.PositionalEmbeddings", "torch.nn.ModuleList", "transformer.TransformerProcessBlock", "torch.nn.Dropout", "transformer.TransformerEncoderBlock", "range"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "config", ":", "transformer", ".", "TransformerConfig", ",", "inference_only", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "pt", ".", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "dropout", "=", "pt", ".", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "dropout_prepost", ")", "if", "config", ".", "dropout_prepost", ">", "0.0", "else", "None", "\n", "\n", "self", ".", "pos_embedding", "=", "layers", ".", "PositionalEmbeddings", "(", "weight_type", "=", "self", ".", "config", ".", "positional_embedding_type", ",", "\n", "num_embed", "=", "self", ".", "config", ".", "model_size", ",", "\n", "max_seq_len", "=", "self", ".", "config", ".", "max_seq_len_source", ",", "\n", "scale_up_input", "=", "True", ",", "\n", "scale_down_positions", "=", "False", ")", "\n", "\n", "self", ".", "layers", "=", "pt", ".", "nn", ".", "ModuleList", "(", "# using ModuleList because we have additional inputs", "\n", "transformer", ".", "TransformerEncoderBlock", "(", "config", ",", "inference_only", "=", "inference_only", ")", "\n", "for", "_", "in", "range", "(", "config", ".", "num_layers", ")", ")", "\n", "\n", "self", ".", "final_process", "=", "transformer", ".", "TransformerProcessBlock", "(", "sequence", "=", "config", ".", "preprocess_sequence", ",", "\n", "dropout", "=", "config", ".", "dropout_prepost", ",", "\n", "num_hidden", "=", "self", ".", "config", ".", "model_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.encoder.TransformerEncoder.forward": [[185, 206], ["encoder.TransformerEncoder.pos_embedding", "layer.size", "layers.prepare_source_length_mask", "layers.prepare_source_length_mask.unsqueeze().expand().reshape().unsqueeze", "att_mask.expand.expand.expand", "layer.transpose", "encoder.TransformerEncoder.final_process", "layer.transpose", "encoder.TransformerEncoder.dropout", "layer", "layers.prepare_source_length_mask.unsqueeze().expand().reshape", "layers.prepare_source_length_mask.unsqueeze().expand", "layers.prepare_source_length_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.prepare_source_length_mask"], ["", "def", "forward", "(", "self", ",", "data", ":", "pt", ".", "Tensor", ",", "valid_length", ":", "pt", ".", "Tensor", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "pt", ".", "Tensor", ",", "pt", ".", "Tensor", "]", ":", "\n", "# positional embedding", "\n", "        ", "data", "=", "self", ".", "pos_embedding", "(", "data", ")", "\n", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "data", "=", "self", ".", "dropout", "(", "data", ")", "\n", "\n", "", "_", ",", "max_len", ",", "__", "=", "data", ".", "size", "(", ")", "\n", "# length_mask for source attention masking. Shape: (batch_size, max_len)", "\n", "single_head_att_mask", "=", "layers", ".", "prepare_source_length_mask", "(", "valid_length", ",", "self", ".", "config", ".", "attention_heads", ",", "max_length", "=", "max_len", ",", "expand", "=", "False", ")", "\n", "# Shape: (batch_size, max_len) -> (batch_size * heads, 1, max_len)", "\n", "att_mask", "=", "single_head_att_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "self", ".", "config", ".", "attention_heads", ",", "-", "1", ")", ".", "reshape", "(", "(", "-", "1", ",", "max_len", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "att_mask", "=", "att_mask", ".", "expand", "(", "-", "1", ",", "max_len", ",", "-", "1", ")", "\n", "\n", "data", "=", "data", ".", "transpose", "(", "1", ",", "0", ")", "# batch to time major", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "data", "=", "layer", "(", "data", ",", "att_mask", "=", "att_mask", ")", "\n", "\n", "", "data", "=", "self", ".", "final_process", "(", "data", ")", "\n", "data", "=", "data", ".", "transpose", "(", "1", ",", "0", ")", "# time to batch major", "\n", "return", "data", ",", "valid_length", ",", "single_head_att_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.encoder.TransformerEncoder.get_num_hidden": [[207, 212], ["None"], "methods", ["None"], ["", "def", "get_num_hidden", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Return the representation size of this encoder.\n        \"\"\"", "\n", "return", "self", ".", "config", ".", "model_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.encoder.get_transformer_encoder": [[26, 28], ["encoder.TransformerEncoder"], "function", ["None"], ["def", "get_transformer_encoder", "(", "config", ":", "transformer", ".", "TransformerConfig", ",", "inference_only", ":", "bool", "=", "False", ")", ":", "\n", "    ", "return", "TransformerEncoder", "(", "config", "=", "config", ",", "inference_only", "=", "inference_only", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.config.TaggedYamlObjectMetaclass.__init__": [[24, 30], ["new_kwds.update", "yaml.YAMLObjectMetaclass.__init__"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["    ", "def", "__init__", "(", "cls", ",", "name", ",", "bases", ",", "kwds", ")", ":", "\n", "        ", "cls", ".", "yaml_tag", "=", "\"!\"", "+", "name", "\n", "new_kwds", "=", "{", "}", "\n", "new_kwds", ".", "update", "(", "kwds", ")", "\n", "new_kwds", "[", "'yaml_tag'", "]", "=", "\"!\"", "+", "name", "\n", "super", "(", ")", ".", "__init__", "(", "name", ",", "bases", ",", "new_kwds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.config.SafeLoaderWithTuple.construct_python_tuple": [[33, 35], ["tuple", "config.SafeLoaderWithTuple.construct_sequence"], "methods", ["None"], ["    ", "def", "construct_python_tuple", "(", "self", ",", "node", ")", ":", "\n", "        ", "return", "tuple", "(", "self", ".", "construct_sequence", "(", "node", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.config.Config.save": [[51, 60], ["copy.deepcopy", "open", "yaml.dump"], "methods", ["None"], ["def", "save", "(", "self", ",", "fname", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Saves this Config to a file called fname.\n\n        :param fname: Name of file to store this Config in.\n        \"\"\"", "\n", "obj", "=", "copy", ".", "deepcopy", "(", "self", ")", "\n", "with", "open", "(", "fname", ",", "'w'", ")", "as", "out", ":", "\n", "            ", "yaml", ".", "dump", "(", "obj", ",", "out", ",", "default_flow_style", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.config.Config.load": [[61, 72], ["open", "yaml.load"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load"], ["", "", "@", "staticmethod", "\n", "def", "load", "(", "fname", ":", "str", ")", "->", "'Config'", ":", "\n", "        ", "\"\"\"\n        Returns a Config object loaded from a file.\n\n        :param fname: Name of file to load the Config from.\n        :return: Configuration.\n        \"\"\"", "\n", "with", "open", "(", "fname", ")", "as", "inp", ":", "\n", "            ", "obj", "=", "yaml", ".", "load", "(", "inp", ",", "Loader", "=", "SafeLoaderWithTuple", ")", "# type: ignore", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.config.Config.copy": [[73, 86], ["copy.deepcopy", "kwargs.items", "object.__setattr__"], "methods", ["None"], ["", "", "def", "copy", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Create a copy of the config object, optionally modifying some of the attributes.\n        For example `nn_config.copy(num_hidden=512)` will create a copy of `nn_config` where the attribute `num_hidden`\n        will be set to the new value of num_hidden.\n\n        :param kwargs:\n        :return: A deep copy of the config object.\n        \"\"\"", "\n", "copy_obj", "=", "copy", ".", "deepcopy", "(", "self", ")", "\n", "for", "name", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "object", ".", "__setattr__", "(", "copy_obj", ",", "name", ",", "value", ")", "\n", "", "return", "copy_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.config.Config.disable_dropout": [[87, 98], ["config.Config.__dict__.items", "isinstance", "val.disable_dropout", "isinstance", "logger.debug", "setattr"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.config.Config.disable_dropout"], ["", "def", "disable_dropout", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Sets the value of all float-valued attributes in this config (or any of its children) that contain 'dropout'\n        in their name to 0.0.\n        \"\"\"", "\n", "for", "attr", ",", "val", "in", "self", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "Config", ")", ":", "\n", "                ", "val", ".", "disable_dropout", "(", ")", "\n", "", "elif", "'dropout'", "in", "attr", "and", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                ", "logger", ".", "debug", "(", "\"Setting %s to 0.0\"", ",", "attr", ")", "\n", "setattr", "(", "self", ",", "attr", ",", "0.0", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.average": [[37, 60], ["logger.info", "utils.check_condition", "logger.info", "torch.load", "all_params.append", "len", "all", "utils.average_tensors", "torch.device", "all_params[].keys", "p.keys"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.average_tensors"], ["def", "average", "(", "param_paths", ":", "Iterable", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"\n    Averages parameters from a list of .params file paths.\n\n    :param param_paths: List of paths to parameter files.\n    :return: Averaged parameter dictionary.\n    \"\"\"", "\n", "all_params", "=", "[", "]", "# type: List[Dict[str, torch.Tensor]]", "\n", "for", "path", "in", "param_paths", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading parameters from '%s'\"", ",", "path", ")", "\n", "params", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "all_params", ".", "append", "(", "params", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"%d models loaded\"", ",", "len", "(", "all_params", ")", ")", "\n", "utils", ".", "check_condition", "(", "all", "(", "all_params", "[", "0", "]", ".", "keys", "(", ")", "==", "p", ".", "keys", "(", ")", "for", "p", "in", "all_params", ")", ",", "\n", "\"param names do not match across models\"", ")", "\n", "\n", "avg_params", "=", "{", "}", "\n", "# average arg_params", "\n", "for", "k", "in", "all_params", "[", "0", "]", ":", "\n", "        ", "tensors", "=", "[", "p", "[", "k", "]", "for", "p", "in", "all_params", "]", "\n", "avg_params", "[", "k", "]", "=", "utils", ".", "average_tensors", "(", "tensors", ")", "\n", "", "return", "avg_params", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.find_checkpoints": [[62, 103], ["utils.get_validation_metric_points", "os.path.join", "logger.info", "average.strategy_best", "os.path.join", "os.path.exists", "average.strategy_last", "average.strategy_lifespan", "RuntimeError", "str"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_validation_metric_points", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.strategy_best", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.strategy_last", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.strategy_lifespan"], ["", "def", "find_checkpoints", "(", "model_path", ":", "str", ",", "size", "=", "4", ",", "strategy", "=", "\"best\"", ",", "metric", ":", "str", "=", "C", ".", "PERPLEXITY", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Finds N best points from .metrics file according to strategy.\n\n    :param model_path: Path to model.\n    :param size: Number of checkpoints to combine.\n    :param strategy: Combination strategy.\n    :param metric: Metric according to which checkpoints are selected.  Corresponds to columns in model/metrics file.\n    :return: List of paths corresponding to chosen checkpoints.\n    \"\"\"", "\n", "maximize", "=", "C", ".", "METRIC_MAXIMIZE", "[", "metric", "]", "\n", "points", "=", "utils", ".", "get_validation_metric_points", "(", "model_path", "=", "model_path", ",", "metric", "=", "metric", ")", "\n", "# keep only points for which .param files exist", "\n", "param_path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "C", ".", "PARAMS_NAME", ")", "\n", "points", "=", "[", "(", "value", ",", "checkpoint", ")", "for", "value", ",", "checkpoint", "in", "points", "if", "os", ".", "path", ".", "exists", "(", "param_path", "%", "checkpoint", ")", "]", "\n", "\n", "if", "strategy", "==", "C", ".", "AVERAGE_BEST", ":", "\n", "# N best scoring points", "\n", "        ", "top_n", "=", "strategy_best", "(", "points", ",", "size", ",", "maximize", ")", "\n", "\n", "", "elif", "strategy", "==", "C", ".", "AVERAGE_LAST", ":", "\n", "# N sequential points ending with overall best", "\n", "        ", "top_n", "=", "strategy_last", "(", "points", ",", "size", ",", "maximize", ")", "\n", "\n", "", "elif", "strategy", "==", "C", ".", "AVERAGE_LIFESPAN", ":", "\n", "# Track lifespan of every \"new best\" point", "\n", "# Points dominated by a previous better point have lifespan 0", "\n", "        ", "top_n", "=", "strategy_lifespan", "(", "points", ",", "size", ",", "maximize", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Unknown strategy, options: best last lifespan\"", ")", "\n", "\n", "# Assemble paths for params files corresponding to chosen checkpoints", "\n", "# Last element in point is always the checkpoint id", "\n", "", "params_paths", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "model_path", ",", "C", ".", "PARAMS_NAME", "%", "point", "[", "-", "1", "]", ")", "for", "point", "in", "top_n", "\n", "]", "\n", "\n", "# Report", "\n", "logger", ".", "info", "(", "\"Found: \"", "+", "\", \"", ".", "join", "(", "str", "(", "point", ")", "for", "point", "in", "top_n", ")", ")", "\n", "\n", "return", "params_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.strategy_best": [[105, 108], ["sorted"], "function", ["None"], ["", "def", "strategy_best", "(", "points", ",", "size", ",", "maximize", ")", ":", "\n", "    ", "top_n", "=", "sorted", "(", "points", ",", "reverse", "=", "maximize", ")", "[", ":", "size", "]", "\n", "return", "top_n", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.strategy_last": [[110, 115], ["points.index", "best", "max"], "function", ["None"], ["", "def", "strategy_last", "(", "points", ",", "size", ",", "maximize", ")", ":", "\n", "    ", "best", "=", "max", "if", "maximize", "else", "min", "\n", "after_top", "=", "points", ".", "index", "(", "best", "(", "points", ")", ")", "+", "1", "\n", "top_n", "=", "points", "[", "max", "(", "0", ",", "after_top", "-", "size", ")", ":", "after_top", "]", "\n", "return", "top_n", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.strategy_lifespan": [[117, 137], ["top_n.append", "list", "sorted", "top_n.append", "top_n.append", "itertools.chain", "list", "list", "itertools.chain", "itertools.chain"], "function", ["None"], ["", "def", "strategy_lifespan", "(", "points", ",", "size", ",", "maximize", ")", ":", "\n", "    ", "top_n", "=", "[", "]", "\n", "cur_best", "=", "points", "[", "0", "]", "\n", "cur_lifespan", "=", "0", "\n", "for", "point", "in", "points", "[", "1", ":", "]", ":", "\n", "        ", "better", "=", "point", ">", "cur_best", "if", "maximize", "else", "point", "<", "cur_best", "\n", "if", "better", ":", "\n", "            ", "top_n", ".", "append", "(", "list", "(", "itertools", ".", "chain", "(", "[", "cur_lifespan", "]", ",", "cur_best", ")", ")", ")", "\n", "cur_best", "=", "point", "\n", "cur_lifespan", "=", "0", "\n", "", "else", ":", "\n", "            ", "top_n", ".", "append", "(", "list", "(", "itertools", ".", "chain", "(", "[", "0", "]", ",", "point", ")", ")", ")", "\n", "cur_lifespan", "+=", "1", "\n", "", "", "top_n", ".", "append", "(", "list", "(", "itertools", ".", "chain", "(", "[", "cur_lifespan", "]", ",", "cur_best", ")", ")", ")", "\n", "# Sort by lifespan, then by val", "\n", "top_n", "=", "sorted", "(", "\n", "top_n", ",", "\n", "key", "=", "lambda", "point", ":", "[", "point", "[", "0", "]", ",", "point", "[", "1", "]", "if", "maximize", "else", "-", "point", "[", "1", "]", "]", ",", "\n", "reverse", "=", "True", ")", "[", ":", "size", "]", "\n", "return", "top_n", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.main": [[139, 148], ["log.setup_main_logger", "argparse.ArgumentParser", "arguments.add_average_args", "argparse.ArgumentParser.parse_args", "average.average_parameters"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.setup_main_logger", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_average_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.average_parameters"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n    Commandline interface to average parameters.\n    \"\"\"", "\n", "setup_main_logger", "(", "console", "=", "True", ",", "file_logging", "=", "False", ")", "\n", "params", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Averages parameters from multiple models.\"", ")", "\n", "arguments", ".", "add_average_args", "(", "params", ")", "\n", "args", "=", "params", ".", "parse_args", "(", ")", "\n", "average_parameters", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.average_parameters": [[150, 164], ["log.log_sockeye_version", "torch.save", "logger.info", "len", "average.average", "average.find_checkpoints", "average.average"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.log_sockeye_version", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.average", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.find_checkpoints", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.average"], ["", "def", "average_parameters", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "log_sockeye_version", "(", "logger", ")", "\n", "\n", "if", "len", "(", "args", ".", "inputs", ")", ">", "1", ":", "\n", "        ", "avg_params", "=", "average", "(", "args", ".", "inputs", ")", "\n", "", "else", ":", "\n", "        ", "param_paths", "=", "find_checkpoints", "(", "model_path", "=", "args", ".", "inputs", "[", "0", "]", ",", "\n", "size", "=", "args", ".", "n", ",", "\n", "strategy", "=", "args", ".", "strategy", ",", "\n", "metric", "=", "args", ".", "metric", ")", "\n", "avg_params", "=", "average", "(", "param_paths", ")", "\n", "\n", "", "torch", ".", "save", "(", "avg_params", ",", "args", ".", "output", ")", "\n", "logger", ".", "info", "(", "\"Averaged parameters written to '%s'\"", ",", "args", ".", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatisticsAccumulator.__init__": [[270, 298], ["len", "len", "len", "utils.OnlineMeanAndVariance", "utils.OnlineMeanAndVariance", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "buckets", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "vocab_source", ":", "Optional", "[", "Dict", "[", "str", ",", "int", "]", "]", ",", "\n", "vocab_target", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "length_ratio_mean", ":", "float", ",", "\n", "length_ratio_std", ":", "float", ")", "->", "None", ":", "\n", "        ", "self", ".", "buckets", "=", "buckets", "\n", "num_buckets", "=", "len", "(", "buckets", ")", "\n", "self", ".", "length_ratio_mean", "=", "length_ratio_mean", "\n", "self", ".", "length_ratio_std", "=", "length_ratio_std", "\n", "if", "vocab_source", "is", "not", "None", ":", "\n", "            ", "self", ".", "unk_id_source", "=", "vocab_source", "[", "C", ".", "UNK_SYMBOL", "]", "\n", "self", ".", "size_vocab_source", "=", "len", "(", "vocab_source", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "unk_id_source", "=", "None", "\n", "self", ".", "size_vocab_source", "=", "0", "\n", "", "self", ".", "unk_id_target", "=", "vocab_target", "[", "C", ".", "UNK_SYMBOL", "]", "\n", "self", ".", "size_vocab_target", "=", "len", "(", "vocab_target", ")", "\n", "self", ".", "num_sents", "=", "0", "\n", "self", ".", "num_discarded", "=", "0", "\n", "self", ".", "num_tokens_source", "=", "0", "\n", "self", ".", "num_tokens_target", "=", "0", "\n", "self", ".", "num_unks_source", "=", "0", "\n", "self", ".", "num_unks_target", "=", "0", "\n", "self", ".", "max_observed_len_source", "=", "0", "\n", "self", ".", "max_observed_len_target", "=", "0", "\n", "self", ".", "_mean_len_target_per_bucket", "=", "[", "OnlineMeanAndVariance", "(", ")", "for", "_", "in", "range", "(", "num_buckets", ")", "]", "\n", "self", ".", "_length_ratio_per_bucket", "=", "[", "OnlineMeanAndVariance", "(", ")", "for", "_", "in", "range", "(", "num_buckets", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatisticsAccumulator.sequence_pair": [[299, 323], ["len", "len", "data_io.DataStatisticsAccumulator._mean_len_target_per_bucket[].update", "data_io.DataStatisticsAccumulator._length_ratio_per_bucket[].update", "max", "max", "target.count", "source.count"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.count", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.count"], ["", "def", "sequence_pair", "(", "self", ",", "\n", "source", ":", "List", "[", "int", "]", ",", "\n", "target", ":", "List", "[", "int", "]", ",", "\n", "bucket_idx", ":", "Optional", "[", "int", "]", ")", ":", "\n", "        ", "if", "bucket_idx", "is", "None", ":", "\n", "            ", "self", ".", "num_discarded", "+=", "1", "\n", "return", "\n", "\n", "", "source_len", "=", "len", "(", "source", ")", "\n", "target_len", "=", "len", "(", "target", ")", "\n", "length_ratio", "=", "target_len", "/", "(", "source_len", "if", "source_len", "else", "1.", ")", "\n", "\n", "self", ".", "_mean_len_target_per_bucket", "[", "bucket_idx", "]", ".", "update", "(", "target_len", ")", "\n", "self", ".", "_length_ratio_per_bucket", "[", "bucket_idx", "]", ".", "update", "(", "length_ratio", ")", "\n", "\n", "self", ".", "num_sents", "+=", "1", "\n", "self", ".", "num_tokens_source", "+=", "source_len", "\n", "self", ".", "num_tokens_target", "+=", "target_len", "\n", "self", ".", "max_observed_len_source", "=", "max", "(", "source_len", ",", "self", ".", "max_observed_len_source", ")", "\n", "self", ".", "max_observed_len_target", "=", "max", "(", "target_len", ",", "self", ".", "max_observed_len_target", ")", "\n", "\n", "if", "self", ".", "unk_id_source", "is", "not", "None", ":", "\n", "            ", "self", ".", "num_unks_source", "+=", "source", ".", "count", "(", "self", ".", "unk_id_source", ")", "\n", "", "self", ".", "num_unks_target", "+=", "target", ".", "count", "(", "self", ".", "unk_id_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatisticsAccumulator.mean_len_target_per_bucket": [[324, 328], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean_len_target_per_bucket", "(", "self", ")", "->", "List", "[", "Optional", "[", "float", "]", "]", ":", "\n", "        ", "return", "[", "mean_and_variance", ".", "mean", "if", "mean_and_variance", ".", "count", ">", "0", "else", "None", "\n", "for", "mean_and_variance", "in", "self", ".", "_mean_len_target_per_bucket", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatisticsAccumulator.length_ratio_stats_per_bucket": [[329, 333], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "length_ratio_stats_per_bucket", "(", "self", ")", "->", "List", "[", "Tuple", "[", "Optional", "[", "float", "]", ",", "Optional", "[", "float", "]", "]", "]", ":", "\n", "        ", "return", "[", "(", "mean_and_variance", ".", "mean", ",", "mean_and_variance", ".", "std", ")", "if", "mean_and_variance", ".", "count", ">", "0", "else", "(", "None", ",", "None", ")", "\n", "for", "mean_and_variance", "in", "self", ".", "_length_ratio_per_bucket", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatisticsAccumulator.statistics": [[334, 353], ["data_io.DataStatistics"], "methods", ["None"], ["", "@", "property", "\n", "def", "statistics", "(", "self", ")", ":", "\n", "        ", "num_sents_per_bucket", "=", "[", "mean_and_variance", ".", "count", "for", "mean_and_variance", "in", "self", ".", "_mean_len_target_per_bucket", "]", "\n", "return", "DataStatistics", "(", "num_sents", "=", "self", ".", "num_sents", ",", "\n", "num_discarded", "=", "self", ".", "num_discarded", ",", "\n", "num_tokens_source", "=", "self", ".", "num_tokens_source", ",", "\n", "num_tokens_target", "=", "self", ".", "num_tokens_target", ",", "\n", "num_unks_source", "=", "self", ".", "num_unks_source", ",", "\n", "num_unks_target", "=", "self", ".", "num_unks_target", ",", "\n", "max_observed_len_source", "=", "self", ".", "max_observed_len_source", ",", "\n", "max_observed_len_target", "=", "self", ".", "max_observed_len_target", ",", "\n", "size_vocab_source", "=", "self", ".", "size_vocab_source", ",", "\n", "size_vocab_target", "=", "self", ".", "size_vocab_target", ",", "\n", "length_ratio_mean", "=", "self", ".", "length_ratio_mean", ",", "\n", "length_ratio_std", "=", "self", ".", "length_ratio_std", ",", "\n", "buckets", "=", "self", ".", "buckets", ",", "\n", "num_sents_per_bucket", "=", "num_sents_per_bucket", ",", "\n", "average_len_target_per_bucket", "=", "self", ".", "mean_len_target_per_bucket", ",", "\n", "length_ratio_stats_per_bucket", "=", "self", ".", "length_ratio_stats_per_bucket", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.RawParallelDatasetLoader.__init__": [[427, 440], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "buckets", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "eos_id", ":", "int", ",", "\n", "pad_id", ":", "int", ",", "\n", "skip_blanks", ":", "bool", "=", "True", ",", "\n", "dtype", ":", "str", "=", "'int32'", ",", "\n", "shift_target_factors", ":", "bool", "=", "C", ".", "TARGET_FACTOR_SHIFT", ")", "->", "None", ":", "\n", "        ", "self", ".", "buckets", "=", "buckets", "\n", "self", ".", "eos_id", "=", "eos_id", "\n", "self", ".", "pad_id", "=", "pad_id", "\n", "self", ".", "skip_blanks", "=", "skip_blanks", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "shift_target_factors", "=", "shift_target_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.RawParallelDatasetLoader.load": [[441, 506], ["len", "len", "data_io.parallel_iter", "data_io.ParallelDataSet", "len", "len", "numpy.full", "numpy.full", "len", "len", "data_io.get_parallel_bucket", "enumerate", "enumerate", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "logger.info", "zip", "zip", "len", "t.append", "t.insert"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.parallel_iter", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_parallel_bucket"], ["", "def", "load", "(", "self", ",", "\n", "source_iterables", ":", "Sequence", "[", "Iterable", "]", ",", "\n", "target_iterables", ":", "Sequence", "[", "Iterable", "]", ",", "\n", "num_samples_per_bucket", ":", "List", "[", "int", "]", ")", "->", "'ParallelDataSet'", ":", "\n", "\n", "        ", "assert", "len", "(", "num_samples_per_bucket", ")", "==", "len", "(", "self", ".", "buckets", ")", "\n", "num_source_factors", "=", "len", "(", "source_iterables", ")", "\n", "num_target_factors", "=", "len", "(", "target_iterables", ")", "\n", "\n", "data_source", "=", "[", "np", ".", "full", "(", "(", "num_samples", ",", "source_len", ",", "num_source_factors", ")", ",", "self", ".", "pad_id", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "for", "(", "source_len", ",", "_", ")", ",", "num_samples", "in", "zip", "(", "self", ".", "buckets", ",", "num_samples_per_bucket", ")", "]", "\n", "data_target", "=", "[", "np", ".", "full", "(", "(", "num_samples", ",", "target_len", "+", "1", ",", "num_target_factors", ")", ",", "self", ".", "pad_id", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "for", "(", "_", ",", "target_len", ")", ",", "num_samples", "in", "zip", "(", "self", ".", "buckets", ",", "num_samples_per_bucket", ")", "]", "\n", "\n", "bucket_sample_index", "=", "[", "0", "for", "_", "in", "self", ".", "buckets", "]", "\n", "\n", "# track amount of padding introduced through bucketing", "\n", "num_tokens_source", "=", "0", "\n", "num_tokens_target", "=", "0", "\n", "num_pad_source", "=", "0", "\n", "num_pad_target", "=", "0", "\n", "\n", "# Bucket sentences as padded np arrays", "\n", "for", "sources", ",", "targets", "in", "parallel_iter", "(", "source_iterables", ",", "target_iterables", ",", "skip_blanks", "=", "self", ".", "skip_blanks", ")", ":", "\n", "            ", "sources", "=", "[", "[", "]", "if", "stream", "is", "None", "else", "stream", "for", "stream", "in", "sources", "]", "\n", "targets", "=", "[", "[", "]", "if", "stream", "is", "None", "else", "stream", "for", "stream", "in", "targets", "]", "\n", "source_len", "=", "len", "(", "sources", "[", "0", "]", ")", "\n", "target_len", "=", "len", "(", "targets", "[", "0", "]", ")", "\n", "buck_index", ",", "buck", "=", "get_parallel_bucket", "(", "self", ".", "buckets", ",", "source_len", ",", "target_len", ")", "\n", "if", "buck", "is", "None", ":", "\n", "                ", "if", "self", ".", "skip_blanks", ":", "\n", "                    ", "continue", "# skip this sentence pair", "\n", "", "else", ":", "\n", "                    ", "buck_index", "=", "len", "(", "self", ".", "buckets", ")", "\n", "buck", "=", "self", ".", "buckets", "[", "buck_index", "]", "\n", "\n", "", "", "num_tokens_source", "+=", "buck", "[", "0", "]", "\n", "num_tokens_target", "+=", "buck", "[", "1", "]", "\n", "num_pad_source", "+=", "buck", "[", "0", "]", "-", "source_len", "\n", "num_pad_target", "+=", "buck", "[", "1", "]", "-", "target_len", "\n", "\n", "sample_index", "=", "bucket_sample_index", "[", "buck_index", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "sources", ")", ":", "\n", "                ", "data_source", "[", "buck_index", "]", "[", "sample_index", ",", "0", ":", "source_len", ",", "i", "]", "=", "s", "\n", "", "for", "i", ",", "t", "in", "enumerate", "(", "targets", ")", ":", "\n", "                ", "if", "i", "==", "0", "or", "not", "self", ".", "shift_target_factors", ":", "\n", "# sequence: <BOS> ... <EOS>", "\n", "                    ", "t", ".", "append", "(", "self", ".", "eos_id", ")", "\n", "data_target", "[", "buck_index", "]", "[", "sample_index", ",", "0", ":", "target_len", "+", "1", ",", "i", "]", "=", "t", "\n", "", "else", ":", "\n", "# sequence: <BOS> <BOS> ...", "\n", "                    ", "t", ".", "insert", "(", "0", ",", "C", ".", "BOS_ID", ")", "\n", "data_target", "[", "buck_index", "]", "[", "sample_index", ",", "0", ":", "target_len", "+", "1", ",", "i", "]", "=", "t", "\n", "\n", "", "", "bucket_sample_index", "[", "buck_index", "]", "+=", "1", "\n", "\n", "", "data_source_tensors", "=", "[", "torch", ".", "from_numpy", "(", "data", ")", "for", "data", "in", "data_source", "]", "\n", "data_target_tensors", "=", "[", "torch", ".", "from_numpy", "(", "data", ")", "for", "data", "in", "data_target", "]", "\n", "\n", "if", "num_tokens_source", ">", "0", "and", "num_tokens_target", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Created bucketed parallel data set. Introduced padding: source=%.1f%% target=%.1f%%)\"", ",", "\n", "num_pad_source", "/", "num_tokens_source", "*", "100", ",", "\n", "num_pad_target", "/", "num_tokens_target", "*", "100", ")", "\n", "\n", "", "return", "ParallelDataSet", "(", "data_source_tensors", ",", "data_target_tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatistics.log": [[1069, 1080], ["logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "len", "data_io.describe_data_and_buckets"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.describe_data_and_buckets"], ["def", "log", "(", "self", ",", "bucket_batch_sizes", ":", "Optional", "[", "List", "[", "BucketBatchSize", "]", "]", "=", "None", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Tokens: source %d target %d\"", ",", "self", ".", "num_tokens_source", ",", "self", ".", "num_tokens_target", ")", "\n", "logger", ".", "info", "(", "\"Number of <unk> tokens: source %d target %d\"", ",", "self", ".", "num_unks_source", ",", "self", ".", "num_unks_target", ")", "\n", "if", "self", ".", "num_tokens_source", ">", "0", "and", "self", ".", "num_tokens_target", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Vocabulary coverage: source %.0f%% target %.0f%%\"", ",", "\n", "(", "1", "-", "self", ".", "num_unks_source", "/", "self", ".", "num_tokens_source", ")", "*", "100", ",", "\n", "(", "1", "-", "self", ".", "num_unks_target", "/", "self", ".", "num_tokens_target", ")", "*", "100", ")", "\n", "", "logger", ".", "info", "(", "\"%d sequences across %d buckets\"", ",", "self", ".", "num_sents", ",", "len", "(", "self", ".", "num_sents_per_bucket", ")", ")", "\n", "logger", ".", "info", "(", "\"%d sequences did not fit into buckets and were discarded\"", ",", "self", ".", "num_discarded", ")", "\n", "if", "bucket_batch_sizes", "is", "not", "None", ":", "\n", "            ", "describe_data_and_buckets", "(", "self", ",", "bucket_batch_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.SequenceReader.__init__": [[1192, 1211], ["vocab.is_valid_vocab", "utils.check_condition"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.is_valid_vocab", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["def", "__init__", "(", "self", ",", "\n", "path", ":", "str", ",", "\n", "vocabulary", ":", "Optional", "[", "vocab", ".", "Vocab", "]", "=", "None", ",", "\n", "add_bos", ":", "bool", "=", "False", ",", "\n", "add_eos", ":", "bool", "=", "False", ",", "\n", "limit", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "vocab", "=", "vocabulary", "\n", "self", ".", "bos_id", "=", "None", "\n", "self", ".", "eos_id", "=", "None", "\n", "if", "vocabulary", "is", "not", "None", ":", "\n", "            ", "assert", "vocab", ".", "is_valid_vocab", "(", "vocabulary", ")", "\n", "self", ".", "bos_id", "=", "C", ".", "BOS_ID", "\n", "self", ".", "eos_id", "=", "C", ".", "EOS_ID", "\n", "", "else", ":", "\n", "            ", "check_condition", "(", "not", "add_bos", "and", "not", "add_eos", ",", "\"Adding a BOS or EOS symbol requires a vocabulary\"", ")", "\n", "", "self", ".", "add_bos", "=", "add_bos", "\n", "self", ".", "add_eos", "=", "add_eos", "\n", "self", ".", "limit", "=", "limit", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.SequenceReader.__iter__": [[1212, 1226], ["data_io.read_content", "data_io.tokens2ids", "data_io.strids2ids", "len", "strids2ids.insert", "strids2ids.append"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.read_content", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.tokens2ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.strids2ids"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "tokens", "in", "read_content", "(", "self", ".", "path", ",", "self", ".", "limit", ")", ":", "\n", "            ", "if", "self", ".", "vocab", "is", "not", "None", ":", "\n", "                ", "sequence", "=", "tokens2ids", "(", "tokens", ",", "self", ".", "vocab", ")", "\n", "", "else", ":", "\n", "                ", "sequence", "=", "strids2ids", "(", "tokens", ")", "\n", "", "if", "len", "(", "sequence", ")", "==", "0", ":", "\n", "                ", "yield", "None", "\n", "continue", "\n", "", "if", "self", ".", "add_bos", ":", "\n", "                ", "sequence", ".", "insert", "(", "0", ",", "self", ".", "bos_id", ")", "\n", "", "if", "self", ".", "add_eos", ":", "\n", "                ", "sequence", ".", "append", "(", "self", ".", "eos_id", ")", "\n", "", "yield", "sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.__init__": [[1353, 1360], ["utils.check_condition", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["def", "__init__", "(", "self", ",", "\n", "source", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "target", ":", "List", "[", "torch", ".", "Tensor", "]", ")", "->", "None", ":", "\n", "        ", "check_condition", "(", "len", "(", "source", ")", "==", "len", "(", "target", ")", ",", "\n", "\"Number of buckets for source/target do not match: %d/%d.\"", "%", "(", "len", "(", "source", ")", ",", "len", "(", "target", ")", ")", ")", "\n", "self", ".", "source", "=", "source", "\n", "self", ".", "target", "=", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.__len__": [[1361, 1363], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.get_bucket_counts": [[1364, 1366], ["len", "range", "len"], "methods", ["None"], ["", "def", "get_bucket_counts", "(", "self", ")", ":", "\n", "        ", "return", "[", "len", "(", "self", ".", "source", "[", "buck_idx", "]", ")", "for", "buck_idx", "in", "range", "(", "len", "(", "self", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.save": [[1367, 1372], ["torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save"], ["", "def", "save", "(", "self", ",", "fname", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Saves the dataset to a binary .npy file.\n        \"\"\"", "\n", "torch", ".", "save", "(", "self", ".", "source", "+", "self", ".", "target", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.load": [[1373, 1414], ["torch.load", "torch.load", "torch.load", "torch.load", "utils.is_distributed", "data_io.ParallelDataSet", "len", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "range", "len", "len", "len", "len", "math.ceil", "logger.info", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "math.floor", "math.floor", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_distributed"], ["", "@", "staticmethod", "\n", "def", "load", "(", "fname", ":", "str", ")", "->", "'ParallelDataSet'", ":", "\n", "        ", "\"\"\"\n        Loads a dataset from a binary .npy file. When running in distributed\n        mode, the data is sliced and each worker loads a different slice based\n        on its rank. Specifically, each of N workers loads 1/N of each bucket.\n        \"\"\"", "\n", "data", "=", "torch", ".", "load", "(", "fname", ")", "\n", "n", "=", "len", "(", "data", ")", "//", "2", "\n", "source", "=", "data", "[", ":", "n", "]", "\n", "target", "=", "data", "[", "n", ":", "2", "*", "n", "]", "\n", "if", "utils", ".", "is_distributed", "(", ")", ":", "\n", "            ", "split_index", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "total_splits", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "i", "=", "split_index", "/", "total_splits", "\n", "j", "=", "(", "split_index", "+", "1", ")", "/", "total_splits", "\n", "# For each bucket, check if there are more splits (workers) than", "\n", "# sentences.  If so, replicate that bucket's sentences N times where", "\n", "# N is the minimum number required so that each split has at least", "\n", "# one sentence.  This is not required for empty buckets since all", "\n", "# splits will contain zero sentences.", "\n", "for", "k", "in", "range", "(", "len", "(", "source", ")", ")", ":", "\n", "                ", "num_sentences", "=", "len", "(", "source", "[", "k", "]", ")", "\n", "if", "num_sentences", ">", "0", ":", "\n", "                    ", "num_copies", "=", "math", ".", "ceil", "(", "total_splits", "/", "num_sentences", ")", "\n", "if", "num_copies", ">", "1", ":", "\n", "                        ", "logger", ".", "info", "(", "'Replicating bucket of %d sentence(s) %d times to cover %d splits.'", ",", "\n", "num_sentences", ",", "num_copies", ",", "total_splits", ")", "\n", "source", "[", "k", "]", "=", "torch", ".", "repeat_interleave", "(", "source", "[", "k", "]", ",", "repeats", "=", "num_copies", ",", "dim", "=", "0", ")", "\n", "target", "[", "k", "]", "=", "torch", ".", "repeat_interleave", "(", "target", "[", "k", "]", ",", "repeats", "=", "num_copies", ",", "dim", "=", "0", ")", "\n", "# Load this worker's slice of each bucket.  If the bucket is empty,", "\n", "# there is no need to slice and attempting to do so will raise an", "\n", "# error.", "\n", "", "", "", "source", "=", "[", "s", "[", "math", ".", "floor", "(", "i", "*", "s", ".", "shape", "[", "0", "]", ")", ":", "math", ".", "floor", "(", "j", "*", "s", ".", "shape", "[", "0", "]", ")", "]", "\n", "if", "s", ".", "shape", "[", "0", "]", ">", "0", "\n", "else", "s", "for", "s", "in", "source", "]", "\n", "target", "=", "[", "t", "[", "math", ".", "floor", "(", "i", "*", "t", ".", "shape", "[", "0", "]", ")", ":", "math", ".", "floor", "(", "j", "*", "t", ".", "shape", "[", "0", "]", ")", "]", "\n", "if", "t", ".", "shape", "[", "0", "]", ">", "0", "\n", "else", "t", "for", "t", "in", "target", "]", "\n", "", "assert", "len", "(", "source", ")", "==", "len", "(", "target", ")", "\n", "return", "ParallelDataSet", "(", "source", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.fill_up": [[1415, 1460], ["list", "list", "numpy.random.RandomState", "range", "data_io.ParallelDataSet", "len", "utils.is_distributed", "max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.all_gather_object", "numpy.random.RandomState.randint", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_distributed", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.all_gather_object"], ["", "def", "fill_up", "(", "self", ",", "\n", "bucket_batch_sizes", ":", "List", "[", "BucketBatchSize", "]", ",", "\n", "seed", ":", "int", "=", "42", ")", "->", "'ParallelDataSet'", ":", "\n", "        ", "\"\"\"\n        Returns a new dataset with buckets filled up.\n\n        :param bucket_batch_sizes: Bucket batch sizes.\n        :param seed: The random seed used for sampling sentences to fill up.\n        :return: New dataset with buckets filled up to the next multiple of batch size\n        \"\"\"", "\n", "source", "=", "list", "(", "self", ".", "source", ")", "\n", "target", "=", "list", "(", "self", ".", "target", ")", "\n", "\n", "rs", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n", "for", "bucket_idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "bucket_batch_size", "=", "bucket_batch_sizes", "[", "bucket_idx", "]", ".", "batch_size", "\n", "bucket_source", "=", "self", ".", "source", "[", "bucket_idx", "]", "\n", "bucket_target", "=", "self", ".", "target", "[", "bucket_idx", "]", "\n", "num_samples", "=", "bucket_source", ".", "shape", "[", "0", "]", "\n", "\n", "# Determine the target number of samples (current value or minimally", "\n", "# higher value that meets the batch size requirement).", "\n", "target_num_samples", "=", "num_samples", "\n", "if", "num_samples", "%", "bucket_batch_size", "!=", "0", ":", "\n", "                ", "target_num_samples", "=", "num_samples", "+", "(", "bucket_batch_size", "-", "(", "num_samples", "%", "bucket_batch_size", ")", ")", "\n", "\n", "", "if", "utils", ".", "is_distributed", "(", ")", ":", "\n", "# Workers load different slices of the data.  When the total", "\n", "# number of samples is not evenly divisible by the number of", "\n", "# workers, each worker may have +/- 1 sample.  Use the largest", "\n", "# target number of samples across all workers to keep the number", "\n", "# of batches in sync and guarantee that all samples are used.", "\n", "                ", "target_num_samples", "=", "max", "(", "utils", ".", "all_gather_object", "(", "target_num_samples", ")", ")", "\n", "\n", "# Fill up the last batch by randomly sampling from the extant items.", "\n", "", "rest", "=", "target_num_samples", "-", "num_samples", "\n", "if", "rest", ">", "0", ":", "\n", "                ", "desired_indices", "=", "torch", ".", "tensor", "(", "rs", ".", "randint", "(", "num_samples", ",", "size", "=", "rest", ")", ")", "\n", "source", "[", "bucket_idx", "]", "=", "torch", ".", "cat", "(", "(", "bucket_source", ",", "\n", "torch", ".", "index_select", "(", "bucket_source", ",", "0", ",", "desired_indices", ")", ")", ",", "dim", "=", "0", ")", "\n", "target", "[", "bucket_idx", "]", "=", "torch", ".", "cat", "(", "(", "bucket_target", ",", "\n", "torch", ".", "index_select", "(", "bucket_target", ",", "0", ",", "desired_indices", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "return", "ParallelDataSet", "(", "source", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.permute": [[1461, 1483], ["range", "data_io.ParallelDataSet", "len", "len", "len", "source.append", "target.append", "source.append", "target.append", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select"], "methods", ["None"], ["", "def", "permute", "(", "self", ",", "permutations", ":", "List", "[", "torch", ".", "Tensor", "]", ")", "->", "'ParallelDataSet'", ":", "\n", "        ", "\"\"\"\n        Permutes the data within each bucket. The permutation is received as an argument,\n        allowing the data to be unpermuted (i.e., restored) later on.\n\n        :param permutations: For each bucket, a permutation of the data within that bucket.\n        :return: A new, permuted ParallelDataSet.\n        \"\"\"", "\n", "assert", "len", "(", "self", ")", "==", "len", "(", "permutations", ")", "\n", "source", "=", "[", "]", "# type: List[torch.Tensor]", "\n", "target", "=", "[", "]", "# type: List[torch.Tensor]", "\n", "for", "buck_idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "num_samples", "=", "self", ".", "source", "[", "buck_idx", "]", ".", "shape", "[", "0", "]", "\n", "if", "num_samples", ":", "# not an empty bucket", "\n", "                ", "permutation", "=", "permutations", "[", "buck_idx", "]", "\n", "source", ".", "append", "(", "torch", ".", "index_select", "(", "self", ".", "source", "[", "buck_idx", "]", ",", "0", ",", "permutation", ")", ")", "\n", "target", ".", "append", "(", "torch", ".", "index_select", "(", "self", ".", "target", "[", "buck_idx", "]", ",", "0", ",", "permutation", ")", ")", "\n", "", "else", ":", "\n", "                ", "source", ".", "append", "(", "self", ".", "source", "[", "buck_idx", "]", ")", "\n", "target", ".", "append", "(", "self", ".", "target", "[", "buck_idx", "]", ")", "\n", "\n", "", "", "return", "ParallelDataSet", "(", "source", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.BaseParallelSampleIter.__init__": [[1545, 1560], ["list"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "buckets", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "batch_size", ":", "int", ",", "\n", "bucket_batch_sizes", ":", "List", "[", "BucketBatchSize", "]", ",", "\n", "num_source_factors", ":", "int", "=", "1", ",", "\n", "num_target_factors", ":", "int", "=", "1", ",", "\n", "permute", ":", "bool", "=", "True", ",", "\n", "dtype", "=", "'int32'", ")", "->", "None", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "buckets", "=", "list", "(", "buckets", ")", "\n", "self", ".", "bucket_batch_sizes", "=", "bucket_batch_sizes", "\n", "self", ".", "num_source_factors", "=", "num_source_factors", "\n", "self", ".", "num_target_factors", "=", "num_target_factors", "\n", "self", ".", "permute", "=", "permute", "\n", "self", ".", "dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.BaseParallelSampleIter.__iter__": [[1561, 1563], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.BaseParallelSampleIter.reset": [[1564, 1567], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.BaseParallelSampleIter.iter_next": [[1568, 1571], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "iter_next", "(", "self", ")", "->", "bool", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.BaseParallelSampleIter.next": [[1572, 1575], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "next", "(", "self", ")", "->", "'Batch'", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.BaseParallelSampleIter.__next__": [[1576, 1578], ["data_io.BaseParallelSampleIter.next"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "# pylint: disable=not-callable", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.BaseParallelSampleIter.save_state": [[1579, 1582], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "save_state", "(", "self", ",", "fname", ":", "str", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.BaseParallelSampleIter.load_state": [[1583, 1586], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "load_state", "(", "self", ",", "fname", ":", "str", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.BatchedRawParallelSampleIter.__init__": [[1595, 1622], ["data_io.BaseParallelSampleIter.__init__", "data_io.create_sequence_readers", "iter", "iter", "data_io.BucketBatchSize"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.create_sequence_readers"], ["def", "__init__", "(", "self", ",", "\n", "data_loader", ":", "RawParallelDatasetLoader", ",", "\n", "sources", ":", "List", "[", "str", "]", ",", "\n", "targets", ":", "List", "[", "str", "]", ",", "\n", "source_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "target_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "bucket", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "batch_size", ":", "int", ",", "\n", "max_lens", ":", "Tuple", "[", "int", ",", "int", "]", ",", "\n", "num_source_factors", ":", "int", "=", "1", ",", "\n", "num_target_factors", ":", "int", "=", "1", ",", "\n", "dtype", "=", "'int32'", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "buckets", "=", "[", "bucket", "]", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "bucket_batch_sizes", "=", "[", "BucketBatchSize", "(", "bucket", ",", "batch_size", ",", "None", ")", "]", ",", "\n", "num_source_factors", "=", "num_source_factors", ",", "\n", "num_target_factors", "=", "num_target_factors", ",", "\n", "permute", "=", "False", ",", "\n", "dtype", "=", "dtype", ")", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "sources_sentences", ",", "self", ".", "targets_sentences", "=", "create_sequence_readers", "(", "sources", ",", "targets", ",", "\n", "source_vocabs", ",", "target_vocabs", ")", "\n", "self", ".", "sources_iters", "=", "[", "iter", "(", "s", ")", "for", "s", "in", "self", ".", "sources_sentences", "]", "\n", "self", ".", "targets_iters", "=", "[", "iter", "(", "s", ")", "for", "s", "in", "self", ".", "targets_sentences", "]", "\n", "self", ".", "max_len_source", ",", "self", ".", "max_len_target", "=", "max_lens", "\n", "self", ".", "next_batch", "=", "None", "# type: Optional[Batch]", "\n", "self", ".", "sentno", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.BatchedRawParallelSampleIter.reset": [[1623, 1625], ["Exception"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Not supported!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.BatchedRawParallelSampleIter.iter_next": [[1626, 1672], ["enumerate", "int", "data_io.BatchedRawParallelSampleIter.data_loader.load", "data_io.create_target_and_shifted_label_sequences", "data_io.create_batch_from_parallel_sample", "data_io.parallel_iterate", "enumerate", "enumerate", "int", "logger.info", "len", "len", "logger.debug", "logger.debug", "sources_sentences[].append", "targets_sentences[].append"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.create_target_and_shifted_label_sequences", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.create_batch_from_parallel_sample", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.parallel_iterate"], ["", "def", "iter_next", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        True if the iterator can return another batch.\n        \"\"\"", "\n", "\n", "# Read batch_size lines from the source stream", "\n", "sources_sentences", "=", "[", "[", "]", "for", "_", "in", "self", ".", "sources_sentences", "]", "# type: List[List[str]]", "\n", "targets_sentences", "=", "[", "[", "]", "for", "_", "in", "self", ".", "targets_sentences", "]", "# type: List[List[str]]", "\n", "num_read", "=", "0", "\n", "for", "num_read", ",", "(", "sources", ",", "targets", ")", "in", "enumerate", "(", "\n", "parallel_iterate", "(", "self", ".", "sources_iters", ",", "self", ".", "targets_iters", ",", "skip_blanks", "=", "False", ")", ",", "1", ")", ":", "\n", "            ", "source_len", "=", "0", "if", "sources", "[", "0", "]", "is", "None", "else", "len", "(", "sources", "[", "0", "]", ")", "\n", "target_len", "=", "0", "if", "targets", "[", "0", "]", "is", "None", "else", "len", "(", "targets", "[", "0", "]", ")", "\n", "if", "source_len", ">", "self", ".", "max_len_source", ":", "\n", "                ", "logger", ".", "debug", "(", "\"Trimming source sentence {} ({} -> {})\"", ".", "format", "(", "self", ".", "sentno", "+", "num_read", ",", "\n", "source_len", ",", "\n", "self", ".", "max_len_source", ")", ")", "\n", "sources", "=", "[", "source", "[", "0", ":", "self", ".", "max_len_source", "]", "for", "source", "in", "sources", "]", "\n", "", "if", "target_len", ">", "self", ".", "max_len_target", ":", "\n", "                ", "logger", ".", "debug", "(", "\"Trimming target sentence {} ({} -> {})\"", ".", "format", "(", "self", ".", "sentno", "+", "num_read", ",", "\n", "target_len", ",", "\n", "self", ".", "max_len_target", ")", ")", "\n", "targets", "=", "[", "target", "[", "0", ":", "self", ".", "max_len_target", "]", "for", "target", "in", "targets", "]", "\n", "\n", "", "for", "i", ",", "source", "in", "enumerate", "(", "sources", ")", ":", "\n", "                ", "sources_sentences", "[", "i", "]", ".", "append", "(", "source", ")", "\n", "", "for", "i", ",", "target", "in", "enumerate", "(", "targets", ")", ":", "\n", "                ", "targets_sentences", "[", "i", "]", ".", "append", "(", "target", ")", "\n", "", "if", "num_read", "==", "self", ".", "batch_size", ":", "\n", "                ", "break", "\n", "\n", "", "", "aux", "=", "int", "(", "self", ".", "sentno", "/", "1_000_000", ")", "\n", "self", ".", "sentno", "+=", "num_read", "\n", "if", "int", "(", "self", ".", "sentno", "/", "1_000_000", ")", "!=", "aux", ":", "\n", "            ", "logger", ".", "info", "(", "\"Processed {} lines\"", ".", "format", "(", "self", ".", "sentno", ")", ")", "\n", "\n", "", "if", "num_read", "==", "0", ":", "\n", "            ", "self", ".", "next_batch", "=", "None", "\n", "return", "False", "\n", "\n", "", "dataset", "=", "self", ".", "data_loader", ".", "load", "(", "sources_sentences", ",", "targets_sentences", ",", "[", "num_read", "]", ")", "\n", "\n", "source", "=", "dataset", ".", "source", "[", "0", "]", "\n", "target", ",", "label", "=", "create_target_and_shifted_label_sequences", "(", "dataset", ".", "target", "[", "0", "]", ")", "\n", "self", ".", "next_batch", "=", "create_batch_from_parallel_sample", "(", "source", ",", "target", ",", "label", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.BatchedRawParallelSampleIter.next": [[1673, 1680], ["data_io.BatchedRawParallelSampleIter.iter_next"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next"], ["", "def", "next", "(", "self", ")", "->", "'Batch'", ":", "\n", "        ", "\"\"\"\n        Returns the next batch.\n        \"\"\"", "\n", "if", "self", ".", "iter_next", "(", ")", ":", "\n", "            ", "return", "self", ".", "next_batch", "\n", "", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.BatchedRawParallelSampleIter.save_state": [[1681, 1683], ["NotImplementedError"], "methods", ["None"], ["", "def", "save_state", "(", "self", ",", "fname", ":", "str", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Not supported!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.BatchedRawParallelSampleIter.load_state": [[1684, 1686], ["NotImplementedError"], "methods", ["None"], ["", "def", "load_state", "(", "self", ",", "fname", ":", "str", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Not supported!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ShardedParallelSampleIter.__init__": [[1694, 1711], ["data_io.BaseParallelSampleIter.__init__", "list", "data_io.ShardedParallelSampleIter.reset", "len"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset"], ["def", "__init__", "(", "self", ",", "\n", "shards_fnames", ":", "List", "[", "str", "]", ",", "\n", "buckets", ",", "\n", "batch_size", ",", "\n", "bucket_batch_sizes", ",", "\n", "num_source_factors", ":", "int", "=", "1", ",", "\n", "num_target_factors", ":", "int", "=", "1", ",", "\n", "permute", ":", "bool", "=", "True", ",", "\n", "dtype", ":", "str", "=", "'int32'", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "buckets", "=", "buckets", ",", "batch_size", "=", "batch_size", ",", "bucket_batch_sizes", "=", "bucket_batch_sizes", ",", "\n", "num_source_factors", "=", "num_source_factors", ",", "num_target_factors", "=", "num_target_factors", ",", "\n", "permute", "=", "permute", ",", "dtype", "=", "dtype", ")", "\n", "assert", "len", "(", "shards_fnames", ")", ">", "0", "\n", "self", ".", "shards_fnames", "=", "list", "(", "shards_fnames", ")", "\n", "self", ".", "shard_index", "=", "-", "1", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ShardedParallelSampleIter._load_shard": [[1712, 1724], ["logger.info", "ParallelDataSet.load().fill_up", "data_io.ParallelSampleIter", "data_io.ParallelDataSet.load"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.fill_up", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load"], ["", "def", "_load_shard", "(", "self", ")", ":", "\n", "        ", "shard_fname", "=", "self", ".", "shards_fnames", "[", "self", ".", "shard_index", "]", "\n", "logger", ".", "info", "(", "\"Loading shard %s.\"", ",", "shard_fname", ")", "\n", "dataset", "=", "ParallelDataSet", ".", "load", "(", "self", ".", "shards_fnames", "[", "self", ".", "shard_index", "]", ")", ".", "fill_up", "(", "self", ".", "bucket_batch_sizes", ",", "\n", "seed", "=", "self", ".", "shard_index", ")", "\n", "self", ".", "shard_iter", "=", "ParallelSampleIter", "(", "data", "=", "dataset", ",", "\n", "buckets", "=", "self", ".", "buckets", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "bucket_batch_sizes", "=", "self", ".", "bucket_batch_sizes", ",", "\n", "num_source_factors", "=", "self", ".", "num_source_factors", ",", "\n", "num_target_factors", "=", "self", ".", "num_target_factors", ",", "\n", "permute", "=", "self", ".", "permute", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ShardedParallelSampleIter.reset": [[1725, 1752], ["len", "logger.info", "random.choice", "random.shuffle", "utils.is_distributed", "data_io.ShardedParallelSampleIter._load_shard", "data_io.ShardedParallelSampleIter.shard_iter.reset", "utils.broadcast_object", "data_io.ShardedParallelSampleIter._load_shard"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_distributed", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ShardedParallelSampleIter._load_shard", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.broadcast_object", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ShardedParallelSampleIter._load_shard"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "shards_fnames", ")", ">", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\"Shuffling the shards.\"", ")", "\n", "# Making sure to not repeat a shard:", "\n", "if", "self", ".", "shard_index", "<", "0", ":", "\n", "                ", "current_shard_fname", "=", "\"\"", "\n", "", "else", ":", "\n", "                ", "current_shard_fname", "=", "self", ".", "shards_fnames", "[", "self", ".", "shard_index", "]", "\n", "", "remaining_shards", "=", "[", "shard", "for", "shard", "in", "self", ".", "shards_fnames", "if", "shard", "!=", "current_shard_fname", "]", "\n", "next_shard_fname", "=", "random", ".", "choice", "(", "remaining_shards", ")", "\n", "remaining_shards", "=", "[", "shard", "for", "shard", "in", "self", ".", "shards_fnames", "if", "shard", "!=", "next_shard_fname", "]", "\n", "random", ".", "shuffle", "(", "remaining_shards", ")", "\n", "\n", "self", ".", "shards_fnames", "=", "[", "next_shard_fname", "]", "+", "remaining_shards", "\n", "\n", "if", "utils", ".", "is_distributed", "(", ")", ":", "\n", "# Synchronize shard order across workers", "\n", "                ", "self", ".", "shards_fnames", "=", "utils", ".", "broadcast_object", "(", "self", ".", "shards_fnames", ")", "\n", "\n", "", "self", ".", "shard_index", "=", "0", "\n", "self", ".", "_load_shard", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "shard_index", "<", "0", ":", "\n", "                ", "self", ".", "shard_index", "=", "0", "\n", "self", ".", "_load_shard", "(", ")", "\n", "# We can just reset the shard_iter as we only have a single shard", "\n", "", "self", ".", "shard_iter", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ShardedParallelSampleIter.iter_next": [[1753, 1756], ["data_io.ShardedParallelSampleIter.shard_iter.iter_next", "len"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next"], ["", "", "def", "iter_next", "(", "self", ")", "->", "bool", ":", "\n", "        ", "next_shard_index", "=", "self", ".", "shard_index", "+", "1", "\n", "return", "self", ".", "shard_iter", ".", "iter_next", "(", ")", "or", "next_shard_index", "<", "len", "(", "self", ".", "shards_fnames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ShardedParallelSampleIter.next": [[1757, 1765], ["data_io.ShardedParallelSampleIter.shard_iter.next", "data_io.ShardedParallelSampleIter.shard_iter.iter_next", "data_io.ShardedParallelSampleIter._load_shard", "len"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ShardedParallelSampleIter._load_shard"], ["", "def", "next", "(", "self", ")", "->", "'Batch'", ":", "\n", "        ", "if", "not", "self", ".", "shard_iter", ".", "iter_next", "(", ")", ":", "\n", "            ", "if", "self", ".", "shard_index", "<", "len", "(", "self", ".", "shards_fnames", ")", "-", "1", ":", "\n", "                ", "self", ".", "shard_index", "+=", "1", "\n", "self", ".", "_load_shard", "(", ")", "\n", "", "else", ":", "\n", "                ", "raise", "StopIteration", "\n", "", "", "return", "self", ".", "shard_iter", ".", "next", "(", ")", "# pylint: disable=E1102", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ShardedParallelSampleIter.save_state": [[1766, 1771], ["data_io.ShardedParallelSampleIter.shard_iter.save_state", "open", "pickle.dump", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.save_state"], ["", "def", "save_state", "(", "self", ",", "fname", ":", "str", ")", ":", "\n", "        ", "with", "open", "(", "fname", ",", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "shards_fnames", ",", "fp", ")", "\n", "pickle", ".", "dump", "(", "self", ".", "shard_index", ",", "fp", ")", "\n", "", "self", ".", "shard_iter", ".", "save_state", "(", "fname", "+", "\".sharditer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ShardedParallelSampleIter.load_state": [[1772, 1778], ["data_io.ShardedParallelSampleIter._load_shard", "data_io.ShardedParallelSampleIter.shard_iter.load_state", "open", "pickle.load", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ShardedParallelSampleIter._load_shard", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.load_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load"], ["", "def", "load_state", "(", "self", ",", "fname", ":", "str", ")", ":", "\n", "        ", "with", "open", "(", "fname", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "            ", "self", ".", "shards_fnames", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "self", ".", "shard_index", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "self", ".", "_load_shard", "(", ")", "\n", "self", ".", "shard_iter", ".", "load_state", "(", "fname", "+", "\".sharditer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.__init__": [[1786, 1813], ["data_io.BaseParallelSampleIter.__init__", "data_io.ParallelDataSet", "data_io.get_batch_indices", "data_io.ParallelSampleIter.reset", "list", "list", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "max", "range", "max", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_batch_indices", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset"], ["def", "__init__", "(", "self", ",", "\n", "data", ":", "ParallelDataSet", ",", "\n", "buckets", ",", "\n", "batch_size", ",", "\n", "bucket_batch_sizes", ",", "\n", "num_source_factors", ":", "int", "=", "1", ",", "\n", "num_target_factors", ":", "int", "=", "1", ",", "\n", "permute", ":", "bool", "=", "True", ",", "\n", "dtype", "=", "'int32'", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "buckets", "=", "buckets", ",", "batch_size", "=", "batch_size", ",", "bucket_batch_sizes", "=", "bucket_batch_sizes", ",", "\n", "num_source_factors", "=", "num_source_factors", ",", "num_target_factors", "=", "num_target_factors", ",", "\n", "permute", "=", "permute", ",", "dtype", "=", "dtype", ")", "\n", "\n", "# create independent lists to be shuffled", "\n", "self", ".", "data", "=", "ParallelDataSet", "(", "list", "(", "data", ".", "source", ")", ",", "list", "(", "data", ".", "target", ")", ")", "\n", "\n", "# create index tuples (buck_idx, batch_start_pos) into buckets.", "\n", "# This is the list of all batches across all buckets in the dataset. These will be shuffled.", "\n", "self", ".", "batch_indices", "=", "get_batch_indices", "(", "self", ".", "data", ",", "bucket_batch_sizes", ")", "\n", "self", ".", "curr_batch_index", "=", "0", "\n", "\n", "# Produces a permutation of the batches within each bucket, along with the permutation that inverts it.", "\n", "self", ".", "inverse_data_permutations", "=", "[", "torch", ".", "arange", "(", "0", ",", "max", "(", "1", ",", "self", ".", "data", ".", "source", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data", ")", ")", "]", "\n", "self", ".", "data_permutations", "=", "[", "torch", ".", "arange", "(", "0", ",", "max", "(", "1", ",", "self", ".", "data", ".", "source", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data", ")", ")", "]", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.reset": [[1814, 1834], ["utils.is_primary_worker", "utils.is_distributed", "data_io.ParallelSampleIter.data.permute", "data_io.get_permutations", "data_io.ParallelSampleIter.data.permute", "random.shuffle", "utils.broadcast_object", "data_io.ParallelSampleIter.data.get_bucket_counts"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_distributed", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.permute", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_permutations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.permute", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.broadcast_object", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.get_bucket_counts"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Resets and reshuffles the data.\n        \"\"\"", "\n", "self", ".", "curr_batch_index", "=", "0", "\n", "if", "self", ".", "permute", ":", "\n", "# Primary worker: shuffle batch start indices.", "\n", "            ", "if", "utils", ".", "is_primary_worker", "(", ")", ":", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "batch_indices", ")", "\n", "", "if", "utils", ".", "is_distributed", "(", ")", ":", "\n", "# Synchronize order across workers.  This guarantees that each", "\n", "# worker processes a batch from the same bucket at each step.", "\n", "                ", "self", ".", "batch_indices", "=", "utils", ".", "broadcast_object", "(", "self", ".", "batch_indices", ")", "\n", "\n", "# restore the data permutation", "\n", "", "self", ".", "data", "=", "self", ".", "data", ".", "permute", "(", "self", ".", "inverse_data_permutations", ")", "\n", "\n", "# permute the data within each batch", "\n", "self", ".", "data_permutations", ",", "self", ".", "inverse_data_permutations", "=", "get_permutations", "(", "self", ".", "data", ".", "get_bucket_counts", "(", ")", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "permute", "(", "self", ".", "data_permutations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next": [[1835, 1840], ["len"], "methods", ["None"], ["", "", "def", "iter_next", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        True if iterator can return another batch\n        \"\"\"", "\n", "return", "self", ".", "curr_batch_index", "!=", "len", "(", "self", ".", "batch_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next": [[1841, 1855], ["data_io.create_target_and_shifted_label_sequences", "data_io.create_batch_from_parallel_sample", "data_io.ParallelSampleIter.iter_next"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.create_target_and_shifted_label_sequences", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.create_batch_from_parallel_sample", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next"], ["", "def", "next", "(", "self", ")", "->", "'Batch'", ":", "\n", "        ", "\"\"\"\n        Returns the next batch from the data iterator.\n        \"\"\"", "\n", "if", "not", "self", ".", "iter_next", "(", ")", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "i", ",", "j", "=", "self", ".", "batch_indices", "[", "self", ".", "curr_batch_index", "]", "\n", "self", ".", "curr_batch_index", "+=", "1", "\n", "\n", "batch_size", "=", "self", ".", "bucket_batch_sizes", "[", "i", "]", ".", "batch_size", "\n", "source", "=", "self", ".", "data", ".", "source", "[", "i", "]", "[", "j", ":", "j", "+", "batch_size", "]", "\n", "target", ",", "label", "=", "create_target_and_shifted_label_sequences", "(", "self", ".", "data", ".", "target", "[", "i", "]", "[", "j", ":", "j", "+", "batch_size", "]", ")", "\n", "return", "create_batch_from_parallel_sample", "(", "source", ",", "target", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.save_state": [[1856, 1869], ["open", "pickle.dump", "pickle.dump", "numpy.save", "numpy.save", "a.numpy", "a.numpy"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save"], ["", "def", "save_state", "(", "self", ",", "fname", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Saves the current state of iterator to a file, so that iteration can be\n        continued. Note that the data is not saved, i.e. the iterator must be\n        initialized with the same parameters as in the first call.\n\n        :param fname: File name to save the information to.\n        \"\"\"", "\n", "with", "open", "(", "fname", ",", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "batch_indices", ",", "fp", ")", "\n", "pickle", ".", "dump", "(", "self", ".", "curr_batch_index", ",", "fp", ")", "\n", "np", ".", "save", "(", "fp", ",", "[", "a", ".", "numpy", "(", ")", "for", "a", "in", "self", ".", "inverse_data_permutations", "]", ",", "allow_pickle", "=", "True", ")", "\n", "np", ".", "save", "(", "fp", ",", "[", "a", ".", "numpy", "(", ")", "for", "a", "in", "self", ".", "data_permutations", "]", ",", "allow_pickle", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.load_state": [[1870, 1900], ["data_io.ParallelSampleIter.data.permute", "range", "data_io.ParallelSampleIter.data.permute", "open", "pickle.load", "pickle.load", "len", "data_io.ParallelSampleIter.inverse_data_permutations.append", "data_io.ParallelSampleIter.data_permutations.append", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "numpy.load", "numpy.load", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.permute", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.permute", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load"], ["", "", "def", "load_state", "(", "self", ",", "fname", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Loads the state of the iterator from a file.\n\n        :param fname: File name to load the information from.\n        \"\"\"", "\n", "\n", "# restore order", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "permute", "(", "self", ".", "inverse_data_permutations", ")", "\n", "\n", "with", "open", "(", "fname", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "            ", "self", ".", "batch_indices", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "self", ".", "curr_batch_index", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "inverse_data_permutations", "=", "[", "torch", ".", "from_numpy", "(", "a", ")", ".", "long", "(", ")", "for", "a", "in", "\n", "np", ".", "load", "(", "fp", ",", "allow_pickle", "=", "True", ")", "]", "# pylint: disable=unexpected-keyword-arg", "\n", "data_permutations", "=", "[", "torch", ".", "from_numpy", "(", "a", ")", ".", "long", "(", ")", "for", "a", "in", "\n", "np", ".", "load", "(", "fp", ",", "allow_pickle", "=", "True", ")", "]", "# pylint: disable=unexpected-keyword-arg", "\n", "\n", "# Right after loading the iterator state, next() should be called", "\n", "", "self", ".", "curr_batch_index", "-=", "1", "\n", "\n", "# load previous permutations", "\n", "self", ".", "inverse_data_permutations", "=", "[", "]", "\n", "self", ".", "data_permutations", "=", "[", "]", "\n", "\n", "for", "bucket", "in", "range", "(", "len", "(", "self", ".", "data", ")", ")", ":", "\n", "            ", "self", ".", "inverse_data_permutations", ".", "append", "(", "inverse_data_permutations", "[", "bucket", "]", ")", "\n", "self", ".", "data_permutations", ".", "append", "(", "data_permutations", "[", "bucket", "]", ")", "\n", "\n", "", "self", ".", "data", "=", "self", ".", "data", ".", "permute", "(", "self", ".", "data_permutations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.Batch.load": [[1912, 1919], ["data_io.Batch.source.to", "data_io.Batch.source_length.to", "data_io.Batch.target.to", "data_io.Batch.target_length.to", "data_io.Batch", "label.to", "data_io.Batch.labels.items"], "methods", ["None"], ["def", "load", "(", "self", ",", "device", ":", "torch", ".", "device", ")", "->", "'Batch'", ":", "\n", "        ", "source", "=", "self", ".", "source", ".", "to", "(", "device", ")", "\n", "source_length", "=", "self", ".", "source_length", ".", "to", "(", "device", ")", "\n", "target", "=", "self", ".", "target", ".", "to", "(", "device", ")", "\n", "target_length", "=", "self", ".", "target_length", ".", "to", "(", "device", ")", "\n", "labels", "=", "{", "name", ":", "label", ".", "to", "(", "device", ")", "for", "name", ",", "label", "in", "self", ".", "labels", ".", "items", "(", ")", "}", "\n", "return", "Batch", "(", "source", ",", "source_length", ",", "target", ",", "target_length", ",", "labels", ",", "self", ".", "samples", ",", "self", ".", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_buckets": [[44, 59], ["list", "range"], "function", ["None"], ["def", "define_buckets", "(", "max_seq_len", ":", "int", ",", "step", ":", "int", "=", "10", ")", "->", "List", "[", "int", "]", ":", "\n", "    ", "\"\"\"\n    Returns a list of integers defining bucket boundaries.\n    Bucket boundaries are created according to the following policy:\n    We generate buckets with a step size of step until the final bucket fits max_seq_len.\n    We then limit that bucket to max_seq_len (difference between semi-final and final bucket may be less than step).\n\n    :param max_seq_len: Maximum bucket size.\n    :param step: Distance between buckets.\n\n    :return: List of bucket sizes.\n    \"\"\"", "\n", "buckets", "=", "list", "(", "range", "(", "step", ",", "max_seq_len", "+", "step", ",", "step", ")", ")", "\n", "buckets", "[", "-", "1", "]", "=", "max_seq_len", "\n", "return", "buckets", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_parallel_buckets": [[61, 101], ["data_io.define_buckets", "data_io.define_buckets", "list", "list", "list.sort", "len", "len", "max", "max", "zip", "collections.OrderedDict.fromkeys", "max", "max", "len", "len", "int", "int", "range", "round", "round", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_buckets", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_buckets"], ["", "def", "define_parallel_buckets", "(", "max_seq_len_source", ":", "int", ",", "\n", "max_seq_len_target", ":", "int", ",", "\n", "bucket_width", ":", "int", "=", "10", ",", "\n", "bucket_scaling", ":", "bool", "=", "True", ",", "\n", "length_ratio", ":", "float", "=", "1.0", ")", "->", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ":", "\n", "    ", "\"\"\"\n    Returns (source, target) buckets up to (max_seq_len_source, max_seq_len_target).  The longer side of the data uses\n    steps of bucket_width while the shorter side uses steps scaled down by the average target/source length ratio.  If\n    one side reaches its max_seq_len before the other, width of extra buckets on that side is fixed to that max_seq_len.\n\n    :param max_seq_len_source: Maximum source bucket size.\n    :param max_seq_len_target: Maximum target bucket size.\n    :param bucket_width: Width of buckets on longer side.\n    :param bucket_scaling: Scale bucket steps based on length ratio.\n    :param length_ratio: Length ratio of data (target/source).\n    \"\"\"", "\n", "source_step_size", "=", "bucket_width", "\n", "target_step_size", "=", "bucket_width", "\n", "if", "bucket_scaling", ":", "\n", "        ", "if", "length_ratio", ">=", "1.0", ":", "\n", "# target side is longer -> scale source", "\n", "            ", "source_step_size", "=", "max", "(", "1", ",", "int", "(", "round", "(", "bucket_width", "/", "length_ratio", ")", ")", ")", "\n", "", "else", ":", "\n", "# source side is longer, -> scale target", "\n", "            ", "target_step_size", "=", "max", "(", "1", ",", "int", "(", "round", "(", "bucket_width", "*", "length_ratio", ")", ")", ")", "\n", "", "", "source_buckets", "=", "define_buckets", "(", "max_seq_len_source", ",", "step", "=", "source_step_size", ")", "\n", "target_buckets", "=", "define_buckets", "(", "max_seq_len_target", ",", "step", "=", "target_step_size", ")", "\n", "# Extra buckets", "\n", "if", "len", "(", "source_buckets", ")", "<", "len", "(", "target_buckets", ")", ":", "\n", "        ", "source_buckets", "+=", "[", "source_buckets", "[", "-", "1", "]", "for", "_", "in", "range", "(", "len", "(", "target_buckets", ")", "-", "len", "(", "source_buckets", ")", ")", "]", "\n", "", "elif", "len", "(", "target_buckets", ")", "<", "len", "(", "source_buckets", ")", ":", "\n", "        ", "target_buckets", "+=", "[", "target_buckets", "[", "-", "1", "]", "for", "_", "in", "range", "(", "len", "(", "source_buckets", ")", "-", "len", "(", "target_buckets", ")", ")", "]", "\n", "# minimum bucket size is 2 (as we add BOS symbol to target side)", "\n", "", "source_buckets", "=", "[", "max", "(", "2", ",", "b", ")", "for", "b", "in", "source_buckets", "]", "\n", "target_buckets", "=", "[", "max", "(", "2", ",", "b", ")", "for", "b", "in", "target_buckets", "]", "\n", "parallel_buckets", "=", "list", "(", "zip", "(", "source_buckets", ",", "target_buckets", ")", ")", "\n", "# deduplicate for return", "\n", "buckets", "=", "list", "(", "OrderedDict", ".", "fromkeys", "(", "parallel_buckets", ")", ")", "\n", "buckets", ".", "sort", "(", ")", "\n", "return", "buckets", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_bucket": [[103, 115], ["bisect.bisect_left", "len"], "function", ["None"], ["", "def", "get_bucket", "(", "seq_len", ":", "int", ",", "buckets", ":", "List", "[", "int", "]", ")", "->", "Optional", "[", "int", "]", ":", "\n", "    ", "\"\"\"\n    Given sequence length and a list of buckets, return corresponding bucket.\n\n    :param seq_len: Sequence length.\n    :param buckets: List of buckets.\n    :return: Chosen bucket.\n    \"\"\"", "\n", "bucket_idx", "=", "bisect", ".", "bisect_left", "(", "buckets", ",", "seq_len", ")", "\n", "if", "bucket_idx", "==", "len", "(", "buckets", ")", ":", "\n", "        ", "return", "None", "\n", "", "return", "buckets", "[", "bucket_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_bucket_batch_sizes": [[124, 200], ["utils.check_condition", "list", "enumerate", "bucket_batch_sizes.append", "max", "len", "len", "utils.check_condition", "data_io.BucketBatchSize", "max", "utils.check_condition", "utils.check_condition", "max", "round", "ValueError"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["", "def", "define_bucket_batch_sizes", "(", "buckets", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "batch_size", ":", "int", ",", "\n", "batch_type", ":", "str", ",", "\n", "data_target_average_len", ":", "List", "[", "Optional", "[", "float", "]", "]", ",", "\n", "batch_sentences_multiple_of", ":", "int", "=", "1", ")", "->", "List", "[", "BucketBatchSize", "]", ":", "\n", "    ", "\"\"\"\n    Compute bucket-specific batch sizes (sentences, average_target_words).\n\n    If sentence batching: number of sentences is the same for each batch.\n\n    If word batching: number of sentences for each batch is the number of words\n    closest to the target batch size. Number of sentences is rounded to the\n    nearest multiple of batch_sentences_multiple_of. Average target sentence\n    length (non-padding symbols) is used for word number calculations.\n\n    If max-word batching: number of sentences for each batch is set to the\n    multiple of batch_sentences_multiple_of that is closest to batch_size\n    without exceeding the value.\n\n    :param buckets: Bucket list.\n    :param batch_size: Batch size.\n    :param batch_type: Type of batching.\n    :param data_target_average_len: Optional average target length for each\n        bucket.\n    :param batch_sentences_multiple_of: Guarantee the number of sentences in\n        each bucket's batch to a multiple of this value.\n    \"\"\"", "\n", "check_condition", "(", "len", "(", "data_target_average_len", ")", "==", "len", "(", "buckets", ")", ",", "\n", "\"Must provide None or average target length for each bucket\"", ")", "\n", "data_target_average_len", "=", "list", "(", "data_target_average_len", ")", "\n", "bucket_batch_sizes", "=", "[", "]", "# type: List[BucketBatchSize]", "\n", "largest_total_num_words", "=", "0", "\n", "\n", "for", "buck_idx", ",", "bucket", "in", "enumerate", "(", "buckets", ")", ":", "\n", "# Target/label length with padding", "\n", "        ", "padded_seq_len", "=", "bucket", "[", "1", "]", "\n", "# Average target/label length excluding padding", "\n", "if", "data_target_average_len", "[", "buck_idx", "]", "is", "None", ":", "\n", "            ", "data_target_average_len", "[", "buck_idx", "]", "=", "padded_seq_len", "\n", "", "average_seq_len", "=", "data_target_average_len", "[", "buck_idx", "]", "\n", "\n", "# Batch size for each bucket is measured in sentences:", "\n", "# - word batching: convert average word-based size to number of", "\n", "#       sequences", "\n", "# - max-word batching: convert max word-based size to number of", "\n", "#       sequences", "\n", "# - sentence batching: use batch size directly", "\n", "if", "batch_type", "==", "C", ".", "BATCH_TYPE_WORD", ":", "\n", "            ", "check_condition", "(", "padded_seq_len", "<=", "batch_size", ",", "\"Word batch size must cover sequence lengths for all\"", "\n", "\" buckets: (%d > %d)\"", "%", "(", "padded_seq_len", ",", "batch_size", ")", ")", "\n", "# Multiple of minimum batch step closest to target number of words,", "\n", "# assuming each sentence is of average length", "\n", "batch_size_seq", "=", "batch_sentences_multiple_of", "*", "max", "(", "1", ",", "round", "(", "(", "batch_size", "/", "average_seq_len", ")", "/", "\n", "batch_sentences_multiple_of", ")", ")", "\n", "", "elif", "batch_type", "==", "C", ".", "BATCH_TYPE_MAX_WORD", ":", "\n", "            ", "check_condition", "(", "padded_seq_len", "<=", "batch_size", ",", "\n", "'Word batch size must cover sequence lengths for all buckets: (%d > %d)'", "\n", "%", "(", "padded_seq_len", ",", "batch_size", ")", ")", "\n", "# Max number of sequences without exceeding batch size", "\n", "batch_size_seq", "=", "batch_size", "//", "padded_seq_len", "\n", "check_condition", "(", "batch_size_seq", "//", "batch_sentences_multiple_of", ">", "0", ",", "\n", "'Please increase the batch size to avoid the batch size being rounded down to 0.'", ")", "\n", "# Round down to closest multiple", "\n", "batch_size_seq", "=", "(", "batch_size_seq", "//", "batch_sentences_multiple_of", ")", "*", "batch_sentences_multiple_of", "\n", "", "elif", "batch_type", "==", "C", ".", "BATCH_TYPE_SENTENCE", ":", "\n", "            ", "batch_size_seq", "=", "batch_size", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown batch type: %s'", "%", "batch_type", ")", "\n", "# Number of words here is an average of non-padding tokens", "\n", "", "batch_size_word", "=", "batch_size_seq", "*", "average_seq_len", "\n", "\n", "bucket_batch_sizes", ".", "append", "(", "BucketBatchSize", "(", "bucket", ",", "batch_size_seq", ",", "batch_size_word", ")", ")", "\n", "# Track largest number of source or target word samples in a batch", "\n", "largest_total_num_words", "=", "max", "(", "largest_total_num_words", ",", "batch_size_seq", "*", "max", "(", "*", "bucket", ")", ")", "\n", "\n", "", "return", "bucket_batch_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.calculate_length_statistics": [[202, 227], ["utils.OnlineMeanAndVariance", "data_io.parallel_iter", "data_io.LengthStatistics", "len", "len", "utils.OnlineMeanAndVariance.update"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.parallel_iter", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update"], ["", "def", "calculate_length_statistics", "(", "source_iterables", ":", "Sequence", "[", "Iterable", "[", "Any", "]", "]", ",", "\n", "target_iterables", ":", "Sequence", "[", "Iterable", "[", "Any", "]", "]", ",", "\n", "max_seq_len_source", ":", "int", ",", "\n", "max_seq_len_target", ":", "int", ")", "->", "'LengthStatistics'", ":", "\n", "    ", "\"\"\"\n    Returns mean and standard deviation of target-to-source length ratios of parallel corpus.\n\n    :param source_iterables: Source sequence readers.\n    :param target_iterables: Target sequence readers.\n    :param max_seq_len_source: Maximum source sequence length.\n    :param max_seq_len_target: Maximum target sequence length.\n    :return: The number of sentences as well as the mean and standard deviation of target to source length ratios.\n    \"\"\"", "\n", "mean_and_variance", "=", "OnlineMeanAndVariance", "(", ")", "\n", "\n", "for", "sources", ",", "targets", "in", "parallel_iter", "(", "source_iterables", ",", "target_iterables", ")", ":", "\n", "        ", "source_len", "=", "len", "(", "sources", "[", "0", "]", ")", "\n", "target_len", "=", "len", "(", "targets", "[", "0", "]", ")", "\n", "if", "source_len", ">", "max_seq_len_source", "or", "target_len", ">", "max_seq_len_target", ":", "\n", "            ", "continue", "\n", "\n", "", "length_ratio", "=", "target_len", "/", "source_len", "\n", "mean_and_variance", ".", "update", "(", "length_ratio", ")", "\n", "\n", "", "return", "LengthStatistics", "(", "mean_and_variance", ".", "count", ",", "mean_and_variance", ".", "mean", ",", "mean_and_variance", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.analyze_sequence_lengths": [[229, 247], ["data_io.create_sequence_readers", "data_io.calculate_length_statistics", "logger.info", "logger.info"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.create_sequence_readers", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.calculate_length_statistics"], ["", "def", "analyze_sequence_lengths", "(", "sources", ":", "List", "[", "str", "]", ",", "\n", "targets", ":", "List", "[", "str", "]", ",", "\n", "vocab_sources", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "vocab_targets", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "max_seq_len_source", ":", "int", ",", "\n", "max_seq_len_target", ":", "int", ")", "->", "'LengthStatistics'", ":", "\n", "    ", "train_sources_sentences", ",", "train_targets_sentences", "=", "create_sequence_readers", "(", "sources", ",", "targets", ",", "\n", "vocab_sources", ",", "vocab_targets", ")", "\n", "\n", "length_statistics", "=", "calculate_length_statistics", "(", "train_sources_sentences", ",", "train_targets_sentences", ",", "\n", "max_seq_len_source", ",", "max_seq_len_target", ")", "\n", "\n", "logger", ".", "info", "(", "\"%d sequences of maximum length (%d, %d) in '%s' and '%s'.\"", ",", "\n", "length_statistics", ".", "num_sents", ",", "max_seq_len_source", ",", "max_seq_len_target", ",", "sources", "[", "0", "]", ",", "targets", "[", "0", "]", ")", "\n", "logger", ".", "info", "(", "\"Mean training target/source length ratio: %.2f (+-%.2f)\"", ",", "\n", "length_statistics", ".", "length_ratio_mean", ",", "\n", "length_statistics", ".", "length_ratio_std", ")", "\n", "return", "length_statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.are_none": [[249, 256], ["all"], "function", ["None"], ["", "def", "are_none", "(", "sequences", ":", "Sequence", "[", "Sized", "]", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Returns True if all sequences are None.\n    \"\"\"", "\n", "if", "not", "sequences", ":", "\n", "        ", "return", "True", "\n", "", "return", "all", "(", "s", "is", "None", "for", "s", "in", "sequences", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.are_token_parallel": [[258, 266], ["all", "len", "len", "len"], "function", ["None"], ["", "def", "are_token_parallel", "(", "sequences", ":", "Sequence", "[", "Sized", "]", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Returns True if all sequences in the list have the same length.\n    \"\"\"", "\n", "if", "not", "sequences", "or", "len", "(", "sequences", ")", "==", "1", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "all", "(", "len", "(", "s", ")", "==", "len", "(", "sequences", "[", "0", "]", ")", "for", "s", "in", "sequences", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.create_shards": [[355, 399], ["os.makedirs", "zip", "zip", "contextlib.ExitStack", "iter", "zip", "list", "range", "range", "exit_stack.enter_context", "exit_stack.enter_context", "data_io.parallel_iter", "typing.cast", "enumerate", "enumerate", "zip", "os.path.join", "range", "len", "os.path.join", "range", "len", "exit_stack.enter_context", "range", "exit_stack.enter_context", "range", "utils.smart_open", "utils.smart_open", "random.randrange", "file.write", "file.write", "tuple", "tuple", "utils.smart_open", "len", "utils.smart_open", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.parallel_iter", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.cast", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open"], ["", "", "def", "create_shards", "(", "source_fnames", ":", "List", "[", "str", "]", ",", "\n", "target_fnames", ":", "List", "[", "str", "]", ",", "\n", "num_shards", ":", "int", ",", "\n", "output_prefix", ":", "str", ")", "->", "Tuple", "[", "List", "[", "Tuple", "[", "Tuple", "[", "str", ",", "...", "]", ",", "Tuple", "[", "str", ",", "...", "]", "]", "]", ",", "bool", "]", ":", "\n", "    ", "\"\"\"\n    Assign source/target sentence pairs to shards at random.\n\n    :param source_fnames: The path to the source text (and optional token-parallel factor files).\n    :param target_fnames: The path to the target text (and optional token-parallel factor files).\n    :param num_shards: The total number of shards.\n    :param output_prefix: The prefix under which the shard files will be created.\n    :return: List of tuples of source (and source factor) file names and target (and target factor) file names for each shard\n             and a flag of whether the returned file names are temporary and can be deleted.\n    \"\"\"", "\n", "if", "num_shards", "==", "1", ":", "\n", "        ", "return", "[", "(", "tuple", "(", "source_fnames", ")", ",", "tuple", "(", "target_fnames", ")", ")", "]", ",", "True", "\n", "", "os", ".", "makedirs", "(", "output_prefix", ",", "exist_ok", "=", "True", ")", "\n", "sources_shard_fnames", "=", "[", "[", "os", ".", "path", ".", "join", "(", "output_prefix", ",", "C", ".", "SHARD_SOURCE", "%", "i", ")", "+", "\".%d\"", "%", "f", "for", "i", "in", "range", "(", "num_shards", ")", "]", "\n", "for", "f", "in", "range", "(", "len", "(", "source_fnames", ")", ")", "]", "\n", "targets_shard_fnames", "=", "[", "[", "os", ".", "path", ".", "join", "(", "output_prefix", ",", "C", ".", "SHARD_TARGET", "%", "i", ")", "+", "\".%d\"", "%", "f", "for", "i", "in", "range", "(", "num_shards", ")", "]", "\n", "for", "f", "in", "range", "(", "len", "(", "target_fnames", ")", ")", "]", "\n", "\n", "with", "ExitStack", "(", ")", "as", "exit_stack", ":", "\n", "        ", "sources_shards", "=", "[", "[", "exit_stack", ".", "enter_context", "(", "smart_open", "(", "f", ",", "mode", "=", "\"wb\"", ")", ")", "for", "f", "in", "sources_shard_fnames", "[", "i", "]", "]", "for", "i", "in", "\n", "range", "(", "len", "(", "source_fnames", ")", ")", "]", "\n", "targets_shards", "=", "[", "[", "exit_stack", ".", "enter_context", "(", "smart_open", "(", "f", ",", "mode", "=", "\"wb\"", ")", ")", "for", "f", "in", "targets_shard_fnames", "[", "i", "]", "]", "for", "i", "in", "\n", "range", "(", "len", "(", "target_fnames", ")", ")", "]", "\n", "\n", "source_readers", "=", "[", "exit_stack", ".", "enter_context", "(", "smart_open", "(", "f", ",", "mode", "=", "\"rb\"", ")", ")", "for", "f", "in", "source_fnames", "]", "\n", "target_readers", "=", "[", "exit_stack", ".", "enter_context", "(", "smart_open", "(", "f", ",", "mode", "=", "\"rb\"", ")", ")", "for", "f", "in", "target_fnames", "]", "\n", "\n", "random_shard_iter", "=", "iter", "(", "lambda", ":", "random", ".", "randrange", "(", "num_shards", ")", ",", "None", ")", "\n", "for", "(", "sources", ",", "targets", ")", ",", "random_shard_index", "in", "zip", "(", "parallel_iter", "(", "source_readers", ",", "target_readers", ",", "True", ",", "False", ")", ",", "random_shard_iter", ")", ":", "\n", "            ", "random_shard_index", "=", "cast", "(", "int", ",", "random_shard_index", ")", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "sources", ")", ":", "\n", "                ", "file", "=", "sources_shards", "[", "i", "]", "[", "random_shard_index", "]", "\n", "file", ".", "write", "(", "line", ")", "\n", "", "for", "i", ",", "line", "in", "enumerate", "(", "targets", ")", ":", "\n", "                ", "file", "=", "targets_shards", "[", "i", "]", "[", "random_shard_index", "]", "\n", "file", ".", "write", "(", "line", ")", "\n", "", "", "", "sources_shard_fnames_by_shards", "=", "zip", "(", "*", "sources_shard_fnames", ")", "\n", "targets_shard_fnames_by_shards", "=", "zip", "(", "*", "targets_shard_fnames", ")", "\n", "\n", "return", "list", "(", "zip", "(", "sources_shard_fnames_by_shards", ",", "targets_shard_fnames_by_shards", ")", ")", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_num_shards": [[508, 518], ["max", "int", "math.ceil"], "function", ["None"], ["", "", "def", "get_num_shards", "(", "num_samples", ":", "int", ",", "samples_per_shard", ":", "int", ",", "min_num_shards", ":", "int", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Returns the number of shards.\n\n    :param num_samples: Number of training data samples.\n    :param samples_per_shard: Samples per shard.\n    :param min_num_shards: Minimum number of shards.\n    :return: Number of shards.\n    \"\"\"", "\n", "return", "max", "(", "int", "(", "math", ".", "ceil", "(", "num_samples", "/", "samples_per_shard", ")", ")", ",", "min_num_shards", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.save_shard": [[520, 578], ["data_io.DataStatisticsAccumulator", "data_io.create_sequence_readers", "data_io.parallel_iter", "data_loader.load", "os.path.join", "shard_stats.log", "logger.info", "data_loader.load.save", "len", "len", "data_io.get_parallel_bucket", "data_io.DataStatisticsAccumulator.sequence_pair", "itertools.chain", "os.remove"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.create_sequence_readers", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.parallel_iter", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatistics.log", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_parallel_bucket", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatisticsAccumulator.sequence_pair"], ["", "def", "save_shard", "(", "shard_idx", ":", "int", ",", "\n", "data_loader", ":", "RawParallelDatasetLoader", ",", "\n", "shard_sources", ":", "List", "[", "str", "]", ",", "\n", "shard_targets", ":", "List", "[", "str", "]", ",", "\n", "source_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "target_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "length_ratio_mean", ":", "float", ",", "\n", "length_ratio_std", ":", "float", ",", "\n", "buckets", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "output_prefix", ":", "str", ",", "\n", "keep_tmp_shard_files", ":", "bool", ")", ":", "\n", "    ", "\"\"\"\n    Load raw shard source and target data files, map to integers using the corresponding vocabularies,\n    convert data into tensors and save to disk.\n    Optionally it can delete the source/target files.\n\n    :param shard_idx: The index of the shard.\n    :param data_loader: A loader for loading parallel data from sources and target.\n    :param shard_sources: A list of source file names.\n    :param shard_targets: A list of target file names.\n    :param source_vocabs: Source vocabulary (and optional source factor vocabularies).\n    :param target_vocabs: Target vocabulary (and optional target factor vocabularies).\n    :param length_ratio_mean: Mean length ratio.\n    :param length_ratio_std: Standard deviation of length ratios.\n    :param buckets: Bucket list.\n    :param output_prefix: The prefix of the output file name.\n    :param keep_tmp_shard_files: Keep the sources/target files when it is True otherwise delete them.\n    :return: Shard statistics.\n    \"\"\"", "\n", "\n", "# Compute shard statistics and bucketing", "\n", "shard_stat_accumulator", "=", "DataStatisticsAccumulator", "(", "buckets", ",", "source_vocabs", "[", "0", "]", ",", "target_vocabs", "[", "0", "]", ",", "\n", "length_ratio_mean", ",", "length_ratio_std", ")", "\n", "\n", "# Shards contain the raw sentences. Need to map to integers using the vocabs and add BOS/EOS", "\n", "sources_sentences", ",", "targets_sentences", "=", "create_sequence_readers", "(", "shard_sources", ",", "shard_targets", ",", "source_vocabs", ",", "target_vocabs", ")", "\n", "\n", "for", "sources", ",", "targets", "in", "parallel_iter", "(", "sources_sentences", ",", "targets_sentences", ")", ":", "\n", "        ", "source_len", "=", "len", "(", "sources", "[", "0", "]", ")", "\n", "target_len", "=", "len", "(", "targets", "[", "0", "]", ")", "\n", "\n", "buck_idx", ",", "_", "=", "get_parallel_bucket", "(", "buckets", ",", "source_len", ",", "target_len", ")", "\n", "shard_stat_accumulator", ".", "sequence_pair", "(", "sources", "[", "0", "]", ",", "targets", "[", "0", "]", ",", "buck_idx", ")", "\n", "\n", "", "shard_stats", "=", "shard_stat_accumulator", ".", "statistics", "\n", "\n", "# Convert to tensors", "\n", "dataset", "=", "data_loader", ".", "load", "(", "sources_sentences", ",", "targets_sentences", ",", "shard_stats", ".", "num_sents_per_bucket", ")", "\n", "shard_fname", "=", "os", ".", "path", ".", "join", "(", "output_prefix", ",", "C", ".", "SHARD_NAME", "%", "shard_idx", ")", "\n", "shard_stats", ".", "log", "(", ")", "\n", "logger", ".", "info", "(", "\"Writing '%s'\"", ",", "shard_fname", ")", "\n", "dataset", ".", "save", "(", "shard_fname", ")", "\n", "\n", "if", "not", "keep_tmp_shard_files", ":", "\n", "        ", "for", "f", "in", "chain", "(", "shard_sources", ",", "shard_targets", ")", ":", "\n", "            ", "os", ".", "remove", "(", "f", ")", "\n", "\n", "", "", "return", "shard_stat_accumulator", ".", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.prepare_data": [[580, 701], ["logger.info", "vocab.save_source_vocabs", "vocab.save_target_vocabs", "pool.starmap", "utils.combine_means", "utils.combine_stds", "data_io.LengthStatistics", "utils.check_condition", "logger.info", "data_io.RawParallelDatasetLoader", "pool.starmap", "zip", "zip", "data_io.DataStatistics", "data_io.DataStatistics.log", "data_io.DataInfo", "os.path.join", "logger.info", "DataInfo.save", "data_io.DataConfig", "os.path.join", "logger.info", "DataConfig.save", "os.path.join", "sum", "data_io.define_parallel_buckets", "sum", "zip", "zip", "all", "zip", "zip", "all", "open", "version_out.write", "enumerate", "zip", "average_len_target_per_bucket.append", "average_len_target_per_bucket.append", "length_ratio_stats_per_bucket.append", "utils.combine_means", "utils.combine_stds", "length_ratio_stats_per_bucket.append", "sum", "sum", "sum", "sum", "sum", "sum", "max", "max", "len", "len", "str", "utils.combine_means", "all", "os.path.abspath", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.save_source_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.save_target_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.starmap", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.combine_means", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.combine_stds", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.starmap", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatistics.log", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_parallel_buckets", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.combine_means", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.combine_stds", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.combine_means"], ["", "def", "prepare_data", "(", "source_fnames", ":", "List", "[", "str", "]", ",", "\n", "target_fnames", ":", "List", "[", "str", "]", ",", "\n", "source_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "target_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "source_vocab_paths", ":", "List", "[", "Optional", "[", "str", "]", "]", ",", "\n", "target_vocab_paths", ":", "List", "[", "Optional", "[", "str", "]", "]", ",", "\n", "shared_vocab", ":", "bool", ",", "\n", "max_seq_len_source", ":", "int", ",", "\n", "max_seq_len_target", ":", "int", ",", "\n", "bucketing", ":", "bool", ",", "\n", "bucket_width", ":", "int", ",", "\n", "num_shards", ":", "int", ",", "\n", "output_prefix", ":", "str", ",", "\n", "bucket_scaling", ":", "bool", "=", "True", ",", "\n", "keep_tmp_shard_files", ":", "bool", "=", "False", ",", "\n", "pool", ":", "multiprocessing", ".", "pool", ".", "Pool", "=", "None", ",", "\n", "shards", ":", "List", "[", "Tuple", "[", "Tuple", "[", "str", ",", "...", "]", ",", "Tuple", "[", "str", ",", "...", "]", "]", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param shards: List of num_shards shards of parallel source and target tuples which in turn contain tuples to shard data factor file paths.\n    \"\"\"", "\n", "logger", ".", "info", "(", "\"Preparing data.\"", ")", "\n", "# write vocabularies to data folder", "\n", "vocab", ".", "save_source_vocabs", "(", "source_vocabs", ",", "output_prefix", ")", "\n", "vocab", ".", "save_target_vocabs", "(", "target_vocabs", ",", "output_prefix", ")", "\n", "\n", "# Get target/source length ratios.", "\n", "stats_args", "=", "(", "(", "source_path", ",", "target_path", ",", "source_vocabs", ",", "target_vocabs", ",", "max_seq_len_source", ",", "max_seq_len_target", ")", "\n", "for", "source_path", ",", "target_path", "in", "shards", ")", "\n", "length_stats", "=", "pool", ".", "starmap", "(", "analyze_sequence_lengths", ",", "stats_args", ")", "\n", "shards_num_sents", "=", "[", "stat", ".", "num_sents", "for", "stat", "in", "length_stats", "]", "\n", "shards_mean", "=", "[", "stat", ".", "length_ratio_mean", "for", "stat", "in", "length_stats", "]", "\n", "shards_std", "=", "[", "stat", ".", "length_ratio_std", "for", "stat", "in", "length_stats", "]", "\n", "length_ratio_mean", "=", "combine_means", "(", "shards_mean", ",", "shards_num_sents", ")", "\n", "length_ratio_std", "=", "combine_stds", "(", "shards_std", ",", "shards_mean", ",", "shards_num_sents", ")", "\n", "length_statistics", "=", "LengthStatistics", "(", "sum", "(", "shards_num_sents", ")", ",", "length_ratio_mean", ",", "length_ratio_std", ")", "\n", "\n", "check_condition", "(", "length_statistics", ".", "num_sents", ">", "0", ",", "\n", "\"No training sequences found with length smaller or equal than the maximum sequence length.\"", "\n", "\"Consider increasing %s\"", "%", "C", ".", "TRAINING_ARG_MAX_SEQ_LEN", ")", "\n", "\n", "# define buckets", "\n", "buckets", "=", "define_parallel_buckets", "(", "max_seq_len_source", ",", "max_seq_len_target", ",", "bucket_width", ",", "bucket_scaling", ",", "\n", "length_statistics", ".", "length_ratio_mean", ")", "if", "bucketing", "else", "[", "(", "max_seq_len_source", ",", "\n", "max_seq_len_target", ")", "]", "\n", "logger", ".", "info", "(", "\"Buckets: %s\"", ",", "buckets", ")", "\n", "\n", "# Map sentences to ids, assign to buckets, compute shard statistics and convert each shard to serialized tensors", "\n", "data_loader", "=", "RawParallelDatasetLoader", "(", "buckets", "=", "buckets", ",", "\n", "eos_id", "=", "C", ".", "EOS_ID", ",", "\n", "pad_id", "=", "C", ".", "PAD_ID", ")", "\n", "\n", "\n", "# Process shards in parallel", "\n", "args", "=", "(", "(", "shard_idx", ",", "data_loader", ",", "shard_sources", ",", "shard_targets", ",", "source_vocabs", ",", "target_vocabs", ",", "\n", "length_statistics", ".", "length_ratio_mean", ",", "length_statistics", ".", "length_ratio_std", ",", "buckets", ",", "output_prefix", ",", "\n", "keep_tmp_shard_files", ")", "for", "shard_idx", ",", "(", "shard_sources", ",", "shard_targets", ")", "in", "enumerate", "(", "shards", ")", ")", "\n", "per_shard_statistics", "=", "pool", ".", "starmap", "(", "save_shard", ",", "args", ")", "\n", "\n", "# Combine per shard statistics to obtain global statistics", "\n", "shard_average_len", "=", "[", "shard_stats", ".", "average_len_target_per_bucket", "for", "shard_stats", "in", "per_shard_statistics", "]", "\n", "shard_num_sents", "=", "[", "shard_stats", ".", "num_sents_per_bucket", "for", "shard_stats", "in", "per_shard_statistics", "]", "\n", "num_sents_per_bucket", "=", "[", "sum", "(", "n", ")", "for", "n", "in", "zip", "(", "*", "shard_num_sents", ")", "]", "\n", "average_len_target_per_bucket", "=", "[", "]", "# type: List[Optional[float]]", "\n", "for", "num_sents_bucket", ",", "average_len_bucket", "in", "zip", "(", "zip", "(", "*", "shard_num_sents", ")", ",", "zip", "(", "*", "shard_average_len", ")", ")", ":", "\n", "        ", "if", "all", "(", "avg", "is", "None", "for", "avg", "in", "average_len_bucket", ")", ":", "\n", "            ", "average_len_target_per_bucket", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "            ", "average_len_target_per_bucket", ".", "append", "(", "combine_means", "(", "average_len_bucket", ",", "shards_num_sents", ")", ")", "\n", "\n", "", "", "shard_length_ratios", "=", "[", "shard_stats", ".", "length_ratio_stats_per_bucket", "for", "shard_stats", "in", "per_shard_statistics", "]", "\n", "length_ratio_stats_per_bucket", "=", "[", "]", "# type: Optional[List[Tuple[Optional[float], Optional[float]]]]", "\n", "for", "num_sents_bucket", ",", "len_ratios_bucket", "in", "zip", "(", "zip", "(", "*", "shard_num_sents", ")", ",", "zip", "(", "*", "shard_length_ratios", ")", ")", ":", "\n", "        ", "if", "all", "(", "all", "(", "x", "is", "None", "for", "x", "in", "ratio", ")", "for", "ratio", "in", "len_ratios_bucket", ")", ":", "\n", "            ", "length_ratio_stats_per_bucket", ".", "append", "(", "(", "None", ",", "None", ")", ")", "\n", "", "else", ":", "\n", "            ", "shards_mean", "=", "[", "ratio", "[", "0", "]", "for", "ratio", "in", "len_ratios_bucket", "]", "\n", "ratio_mean", "=", "combine_means", "(", "shards_mean", ",", "num_sents_bucket", ")", "\n", "ratio_std", "=", "combine_stds", "(", "[", "ratio", "[", "1", "]", "for", "ratio", "in", "len_ratios_bucket", "]", ",", "shards_mean", ",", "num_sents_bucket", ")", "\n", "length_ratio_stats_per_bucket", ".", "append", "(", "(", "ratio_mean", ",", "ratio_std", ")", ")", "\n", "", "", "data_statistics", "=", "DataStatistics", "(", "\n", "num_sents", "=", "sum", "(", "shards_num_sents", ")", ",", "\n", "num_discarded", "=", "sum", "(", "shard_stats", ".", "num_discarded", "for", "shard_stats", "in", "per_shard_statistics", ")", ",", "\n", "num_tokens_source", "=", "sum", "(", "shard_stats", ".", "num_tokens_source", "for", "shard_stats", "in", "per_shard_statistics", ")", ",", "\n", "num_tokens_target", "=", "sum", "(", "shard_stats", ".", "num_tokens_target", "for", "shard_stats", "in", "per_shard_statistics", ")", ",", "\n", "num_unks_source", "=", "sum", "(", "shard_stats", ".", "num_unks_source", "for", "shard_stats", "in", "per_shard_statistics", ")", ",", "\n", "num_unks_target", "=", "sum", "(", "shard_stats", ".", "num_unks_target", "for", "shard_stats", "in", "per_shard_statistics", ")", ",", "\n", "max_observed_len_source", "=", "max", "(", "shard_stats", ".", "max_observed_len_source", "for", "shard_stats", "in", "per_shard_statistics", ")", ",", "\n", "max_observed_len_target", "=", "max", "(", "shard_stats", ".", "max_observed_len_target", "for", "shard_stats", "in", "per_shard_statistics", ")", ",", "\n", "size_vocab_source", "=", "per_shard_statistics", "[", "0", "]", ".", "size_vocab_source", ",", "\n", "size_vocab_target", "=", "per_shard_statistics", "[", "0", "]", ".", "size_vocab_target", ",", "\n", "length_ratio_mean", "=", "length_ratio_mean", ",", "\n", "length_ratio_std", "=", "length_ratio_std", ",", "\n", "buckets", "=", "per_shard_statistics", "[", "0", "]", ".", "buckets", ",", "\n", "num_sents_per_bucket", "=", "num_sents_per_bucket", ",", "\n", "average_len_target_per_bucket", "=", "average_len_target_per_bucket", ",", "\n", "length_ratio_stats_per_bucket", "=", "length_ratio_stats_per_bucket", ")", "\n", "data_statistics", ".", "log", "(", ")", "\n", "\n", "data_info", "=", "DataInfo", "(", "sources", "=", "[", "os", ".", "path", ".", "abspath", "(", "fname", ")", "for", "fname", "in", "source_fnames", "]", ",", "\n", "targets", "=", "[", "os", ".", "path", ".", "abspath", "(", "fname", ")", "for", "fname", "in", "target_fnames", "]", ",", "\n", "source_vocabs", "=", "source_vocab_paths", ",", "\n", "target_vocabs", "=", "target_vocab_paths", ",", "\n", "shared_vocab", "=", "shared_vocab", ",", "\n", "num_shards", "=", "num_shards", ")", "\n", "data_info_fname", "=", "os", ".", "path", ".", "join", "(", "output_prefix", ",", "C", ".", "DATA_INFO", ")", "\n", "logger", ".", "info", "(", "\"Writing data info to '%s'\"", ",", "data_info_fname", ")", "\n", "data_info", ".", "save", "(", "data_info_fname", ")", "\n", "\n", "config_data", "=", "DataConfig", "(", "data_statistics", "=", "data_statistics", ",", "\n", "max_seq_len_source", "=", "max_seq_len_source", ",", "\n", "max_seq_len_target", "=", "max_seq_len_target", ",", "\n", "num_source_factors", "=", "len", "(", "source_fnames", ")", ",", "\n", "num_target_factors", "=", "len", "(", "target_fnames", ")", ")", "\n", "config_data_fname", "=", "os", ".", "path", ".", "join", "(", "output_prefix", ",", "C", ".", "DATA_CONFIG", ")", "\n", "logger", ".", "info", "(", "\"Writing data config to '%s'\"", ",", "config_data_fname", ")", "\n", "config_data", ".", "save", "(", "config_data_fname", ")", "\n", "\n", "version_file", "=", "os", ".", "path", ".", "join", "(", "output_prefix", ",", "C", ".", "PREPARED_DATA_VERSION_FILE", ")", "\n", "\n", "with", "open", "(", "version_file", ",", "\"w\"", ")", "as", "version_out", ":", "\n", "        ", "version_out", ".", "write", "(", "str", "(", "C", ".", "PREPARED_DATA_VERSION", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_data_statistics": [[703, 726], ["data_io.DataStatisticsAccumulator", "data_io.parallel_iter", "data_io.get_parallel_bucket", "data_io.DataStatisticsAccumulator.sequence_pair", "data_io.get_target_bucket", "data_io.DataStatisticsAccumulator.sequence_pair", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.parallel_iter", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_parallel_bucket", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatisticsAccumulator.sequence_pair", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_target_bucket", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatisticsAccumulator.sequence_pair"], ["", "", "def", "get_data_statistics", "(", "source_readers", ":", "Optional", "[", "Sequence", "[", "Iterable", "]", "]", ",", "\n", "target_readers", ":", "Sequence", "[", "Iterable", "]", ",", "\n", "buckets", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "length_ratio_mean", ":", "float", ",", "\n", "length_ratio_std", ":", "float", ",", "\n", "source_vocabs", ":", "Optional", "[", "List", "[", "vocab", ".", "Vocab", "]", "]", ",", "\n", "target_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ")", "->", "'DataStatistics'", ":", "\n", "    ", "data_stats_accumulator", "=", "DataStatisticsAccumulator", "(", "buckets", ",", "\n", "source_vocabs", "[", "0", "]", "if", "source_vocabs", "is", "not", "None", "else", "None", ",", "\n", "target_vocabs", "[", "0", "]", ",", "\n", "length_ratio_mean", ",", "\n", "length_ratio_std", ")", "\n", "\n", "if", "source_readers", "is", "not", "None", ":", "\n", "        ", "for", "sources", ",", "targets", "in", "parallel_iter", "(", "source_readers", ",", "target_readers", ")", ":", "\n", "            ", "buck_idx", ",", "_", "=", "get_parallel_bucket", "(", "buckets", ",", "len", "(", "sources", "[", "0", "]", ")", ",", "len", "(", "targets", "[", "0", "]", ")", ")", "\n", "data_stats_accumulator", ".", "sequence_pair", "(", "sources", "[", "0", "]", ",", "targets", "[", "0", "]", ",", "buck_idx", ")", "\n", "", "", "else", ":", "# Allow stats for target only data", "\n", "        ", "for", "targets", "in", "target_readers", ":", "\n", "            ", "buck_idx", ",", "_", "=", "get_target_bucket", "(", "buckets", ",", "len", "(", "targets", "[", "0", "]", ")", ")", "\n", "data_stats_accumulator", ".", "sequence_pair", "(", "[", "]", ",", "targets", "[", "0", "]", ",", "buck_idx", ")", "\n", "\n", "", "", "return", "data_stats_accumulator", ".", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_validation_data_iter": [[728, 776], ["logger.info", "logger.info", "logger.info", "data_io.analyze_sequence_lengths", "utils.check_condition", "data_io.create_sequence_readers", "data_io.get_data_statistics", "get_data_statistics.log", "data_loader.load().fill_up", "data_io.ParallelSampleIter", "data_loader.load", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.analyze_sequence_lengths", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.create_sequence_readers", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_data_statistics", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatistics.log", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.fill_up", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load"], ["", "def", "get_validation_data_iter", "(", "data_loader", ":", "RawParallelDatasetLoader", ",", "\n", "validation_sources", ":", "List", "[", "str", "]", ",", "\n", "validation_targets", ":", "List", "[", "str", "]", ",", "\n", "buckets", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "bucket_batch_sizes", ":", "List", "[", "BucketBatchSize", "]", ",", "\n", "source_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "target_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "max_seq_len_source", ":", "int", ",", "\n", "max_seq_len_target", ":", "int", ",", "\n", "batch_size", ":", "int", ",", "\n", "permute", ":", "bool", "=", "False", ")", "->", "'ParallelSampleIter'", ":", "\n", "    ", "\"\"\"\n    Returns a ParallelSampleIter for the validation data.\n    \"\"\"", "\n", "logger", ".", "info", "(", "\"=================================\"", ")", "\n", "logger", ".", "info", "(", "\"Creating validation data iterator\"", ")", "\n", "logger", ".", "info", "(", "\"=================================\"", ")", "\n", "validation_length_statistics", "=", "analyze_sequence_lengths", "(", "validation_sources", ",", "validation_targets", ",", "\n", "source_vocabs", ",", "target_vocabs", ",", "\n", "max_seq_len_source", ",", "max_seq_len_target", ")", "\n", "\n", "check_condition", "(", "validation_length_statistics", ".", "num_sents", ">", "0", ",", "\n", "\"No validation sequences found with length smaller or equal than the maximum sequence length.\"", "\n", "\"Consider increasing %s\"", "%", "C", ".", "TRAINING_ARG_MAX_SEQ_LEN", ")", "\n", "\n", "validation_sources_sentences", ",", "validation_targets_sentences", "=", "create_sequence_readers", "(", "validation_sources", ",", "\n", "validation_targets", ",", "\n", "source_vocabs", ",", "target_vocabs", ")", "\n", "\n", "validation_data_statistics", "=", "get_data_statistics", "(", "validation_sources_sentences", ",", "\n", "validation_targets_sentences", ",", "\n", "buckets", ",", "\n", "validation_length_statistics", ".", "length_ratio_mean", ",", "\n", "validation_length_statistics", ".", "length_ratio_std", ",", "\n", "source_vocabs", ",", "target_vocabs", ")", "\n", "\n", "validation_data_statistics", ".", "log", "(", "bucket_batch_sizes", ")", "\n", "\n", "validation_data", "=", "data_loader", ".", "load", "(", "validation_sources_sentences", ",", "validation_targets_sentences", ",", "\n", "validation_data_statistics", ".", "num_sents_per_bucket", ")", ".", "fill_up", "(", "bucket_batch_sizes", ")", "\n", "\n", "return", "ParallelSampleIter", "(", "data", "=", "validation_data", ",", "\n", "buckets", "=", "buckets", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "bucket_batch_sizes", "=", "bucket_batch_sizes", ",", "\n", "num_source_factors", "=", "len", "(", "validation_sources", ")", ",", "\n", "num_target_factors", "=", "len", "(", "validation_targets", ")", ",", "\n", "permute", "=", "permute", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_prepared_data_iters": [[778, 867], ["logger.info", "logger.info", "logger.info", "os.path.join", "os.path.join", "utils.check_condition", "typing.cast", "os.path.join", "utils.check_condition", "typing.cast", "utils.check_condition", "vocab.load_source_vocabs", "vocab.load_target_vocabs", "utils.check_condition", "utils.check_condition", "data_io.define_bucket_batch_sizes", "typing.cast.data_statistics.log", "data_io.ShardedParallelSampleIter", "data_io.RawParallelDatasetLoader", "data_io.get_validation_data_iter", "open", "int", "utils.check_condition", "os.path.exists", "DataInfo.load", "os.path.exists", "DataConfig.load", "os.path.join", "utils.check_condition", "version_in.read", "range", "os.path.exists", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.cast", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.cast", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_source_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_target_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_bucket_batch_sizes", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatistics.log", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_validation_data_iter", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["", "def", "get_prepared_data_iters", "(", "prepared_data_dir", ":", "str", ",", "\n", "validation_sources", ":", "List", "[", "str", "]", ",", "\n", "validation_targets", ":", "List", "[", "str", "]", ",", "\n", "shared_vocab", ":", "bool", ",", "\n", "batch_size", ":", "int", ",", "\n", "batch_type", ":", "str", ",", "\n", "batch_sentences_multiple_of", ":", "int", "=", "1", ",", "\n", "permute", ":", "bool", "=", "True", ")", "->", "Tuple", "[", "'BaseParallelSampleIter'", ",", "\n", "'BaseParallelSampleIter'", ",", "\n", "'DataConfig'", ",", "List", "[", "vocab", ".", "Vocab", "]", ",", "List", "[", "vocab", ".", "Vocab", "]", "]", ":", "\n", "    ", "logger", ".", "info", "(", "\"===============================\"", ")", "\n", "logger", ".", "info", "(", "\"Creating training data iterator\"", ")", "\n", "logger", ".", "info", "(", "\"===============================\"", ")", "\n", "\n", "version_file", "=", "os", ".", "path", ".", "join", "(", "prepared_data_dir", ",", "C", ".", "PREPARED_DATA_VERSION_FILE", ")", "\n", "with", "open", "(", "version_file", ")", "as", "version_in", ":", "\n", "        ", "version", "=", "int", "(", "version_in", ".", "read", "(", ")", ")", "\n", "check_condition", "(", "version", "==", "C", ".", "PREPARED_DATA_VERSION", ",", "\n", "\"The dataset %s was written in an old and incompatible format. Please rerun data \"", "\n", "\"preparation with a current version of Sockeye.\"", "%", "prepared_data_dir", ")", "\n", "", "info_file", "=", "os", ".", "path", ".", "join", "(", "prepared_data_dir", ",", "C", ".", "DATA_INFO", ")", "\n", "check_condition", "(", "os", ".", "path", ".", "exists", "(", "info_file", ")", ",", "\n", "\"Could not find data info %s. Are you sure %s is a directory created with \"", "\n", "\"sockeye-prepare-data?\"", "%", "(", "info_file", ",", "prepared_data_dir", ")", ")", "\n", "data_info", "=", "cast", "(", "DataInfo", ",", "DataInfo", ".", "load", "(", "info_file", ")", ")", "\n", "config_file", "=", "os", ".", "path", ".", "join", "(", "prepared_data_dir", ",", "C", ".", "DATA_CONFIG", ")", "\n", "check_condition", "(", "os", ".", "path", ".", "exists", "(", "config_file", ")", ",", "\n", "\"Could not find data config %s. Are you sure %s is a directory created with \"", "\n", "\"sockeye-prepare-data?\"", "%", "(", "config_file", ",", "prepared_data_dir", ")", ")", "\n", "config_data", "=", "cast", "(", "DataConfig", ",", "DataConfig", ".", "load", "(", "config_file", ")", ")", "\n", "shard_fnames", "=", "[", "os", ".", "path", ".", "join", "(", "prepared_data_dir", ",", "\n", "C", ".", "SHARD_NAME", "%", "shard_idx", ")", "for", "shard_idx", "in", "range", "(", "data_info", ".", "num_shards", ")", "]", "\n", "for", "shard_fname", "in", "shard_fnames", ":", "\n", "        ", "check_condition", "(", "os", ".", "path", ".", "exists", "(", "shard_fname", ")", ",", "\"Shard %s does not exist.\"", "%", "shard_fname", ")", "\n", "\n", "", "check_condition", "(", "shared_vocab", "==", "data_info", ".", "shared_vocab", ",", "\"Shared vocabulary settings need to match these \"", "\n", "\"of the prepared data (e.g. for weight tying). \"", "\n", "\"Specify or omit %s consistently when training \"", "\n", "\"and preparing the data.\"", "%", "C", ".", "VOCAB_ARG_SHARED_VOCAB", ")", "\n", "\n", "source_vocabs", "=", "vocab", ".", "load_source_vocabs", "(", "prepared_data_dir", ")", "\n", "target_vocabs", "=", "vocab", ".", "load_target_vocabs", "(", "prepared_data_dir", ")", "\n", "\n", "check_condition", "(", "len", "(", "source_vocabs", ")", "==", "len", "(", "data_info", ".", "sources", ")", ",", "\n", "\"Wrong number of source vocabularies. Found %d, need %d.\"", "%", "(", "len", "(", "source_vocabs", ")", ",", "\n", "len", "(", "data_info", ".", "sources", ")", ")", ")", "\n", "check_condition", "(", "len", "(", "target_vocabs", ")", "==", "len", "(", "data_info", ".", "targets", ")", ",", "\n", "\"Wrong number of target vocabularies. Found %d, need %d.\"", "%", "(", "len", "(", "target_vocabs", ")", ",", "\n", "len", "(", "data_info", ".", "targets", ")", ")", ")", "\n", "\n", "buckets", "=", "config_data", ".", "data_statistics", ".", "buckets", "\n", "max_seq_len_source", "=", "config_data", ".", "max_seq_len_source", "\n", "max_seq_len_target", "=", "config_data", ".", "max_seq_len_target", "\n", "\n", "bucket_batch_sizes", "=", "define_bucket_batch_sizes", "(", "buckets", ",", "\n", "batch_size", ",", "\n", "batch_type", ",", "\n", "config_data", ".", "data_statistics", ".", "average_len_target_per_bucket", ",", "\n", "batch_sentences_multiple_of", ")", "\n", "\n", "config_data", ".", "data_statistics", ".", "log", "(", "bucket_batch_sizes", ")", "\n", "\n", "train_iter", "=", "ShardedParallelSampleIter", "(", "shard_fnames", ",", "\n", "buckets", ",", "\n", "batch_size", ",", "\n", "bucket_batch_sizes", ",", "\n", "num_source_factors", "=", "len", "(", "data_info", ".", "sources", ")", ",", "\n", "num_target_factors", "=", "len", "(", "data_info", ".", "targets", ")", ",", "\n", "permute", "=", "permute", ")", "\n", "\n", "data_loader", "=", "RawParallelDatasetLoader", "(", "buckets", "=", "buckets", ",", "\n", "eos_id", "=", "C", ".", "EOS_ID", ",", "\n", "pad_id", "=", "C", ".", "PAD_ID", ")", "\n", "\n", "# Don't shuffle validation data. Different orders can cause different", "\n", "# evaluation results.", "\n", "validation_iter", "=", "get_validation_data_iter", "(", "data_loader", "=", "data_loader", ",", "\n", "validation_sources", "=", "validation_sources", ",", "\n", "validation_targets", "=", "validation_targets", ",", "\n", "buckets", "=", "buckets", ",", "\n", "bucket_batch_sizes", "=", "bucket_batch_sizes", ",", "\n", "source_vocabs", "=", "source_vocabs", ",", "\n", "target_vocabs", "=", "target_vocabs", ",", "\n", "max_seq_len_source", "=", "max_seq_len_source", ",", "\n", "max_seq_len_target", "=", "max_seq_len_target", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "permute", "=", "False", ")", "\n", "\n", "return", "train_iter", ",", "validation_iter", ",", "config_data", ",", "source_vocabs", ",", "target_vocabs", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_training_data_iters": [[869, 991], ["logger.info", "logger.info", "logger.info", "data_io.analyze_sequence_lengths", "data_io.create_sequence_readers", "data_io.get_data_statistics", "data_io.define_bucket_batch_sizes", "get_data_statistics.log", "data_io.RawParallelDatasetLoader", "RawParallelDatasetLoader.load().fill_up", "data_io.DataInfo", "data_io.DataConfig", "data_io.ParallelSampleIter", "data_io.get_validation_data_iter", "utils.check_condition", "data_io.define_parallel_buckets", "data_io.RawParallelDatasetLoader.load", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.analyze_sequence_lengths", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.create_sequence_readers", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_data_statistics", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_bucket_batch_sizes", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatistics.log", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.fill_up", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_validation_data_iter", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.define_parallel_buckets", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load"], ["", "def", "get_training_data_iters", "(", "sources", ":", "List", "[", "str", "]", ",", "\n", "targets", ":", "List", "[", "str", "]", ",", "\n", "validation_sources", ":", "List", "[", "str", "]", ",", "\n", "validation_targets", ":", "List", "[", "str", "]", ",", "\n", "source_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "target_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "source_vocab_paths", ":", "List", "[", "Optional", "[", "str", "]", "]", ",", "\n", "target_vocab_paths", ":", "List", "[", "Optional", "[", "str", "]", "]", ",", "\n", "shared_vocab", ":", "bool", ",", "\n", "batch_size", ":", "int", ",", "\n", "batch_type", ":", "str", ",", "\n", "max_seq_len_source", ":", "int", ",", "\n", "max_seq_len_target", ":", "int", ",", "\n", "bucketing", ":", "bool", ",", "\n", "bucket_width", ":", "int", ",", "\n", "bucket_scaling", ":", "bool", "=", "True", ",", "\n", "allow_empty", ":", "bool", "=", "False", ",", "\n", "batch_sentences_multiple_of", ":", "int", "=", "1", ",", "\n", "permute", ":", "bool", "=", "True", ")", "->", "Tuple", "[", "'BaseParallelSampleIter'", ",", "Optional", "[", "'BaseParallelSampleIter'", "]", ",", "\n", "'DataConfig'", ",", "'DataInfo'", "]", ":", "\n", "    ", "\"\"\"\n    Returns data iterators for training and validation data.\n\n    :param sources: Path to source training data (with optional factor data paths).\n    :param targets: Path to target training data (with optional factor data paths).\n    :param validation_sources: Path to source validation data (with optional factor data paths).\n    :param validation_targets: Path to target validation data (with optional factor data paths).\n    :param source_vocabs: Source vocabulary and optional factor vocabularies.\n    :param target_vocabs: Target vocabulary and optional factor vocabularies.\n    :param source_vocab_paths: Path to source vocabularies.\n    :param target_vocab_paths: Path to target vocabularies.\n    :param shared_vocab: Whether the vocabularies are shared.\n    :param batch_size: Batch size.\n    :param batch_type: Method for sizing batches.\n    :param max_seq_len_source: Maximum source sequence length.\n    :param max_seq_len_target: Maximum target sequence length.\n    :param bucketing: Whether to use bucketing.\n    :param bucket_width: Size of buckets.\n    :param bucket_scaling: Scale bucket steps based on source/target length ratio.\n    :param allow_empty: Unless True if no sentences are below or equal to the maximum length an exception is raised.\n    :param batch_sentences_multiple_of: Round the number of sentences in each\n        bucket's batch to a multiple of this value (word-based batching only).\n    :param permute: Randomly shuffle the parallel data.\n\n    :return: Tuple of (training data iterator, validation data iterator, data config).\n    \"\"\"", "\n", "logger", ".", "info", "(", "\"===============================\"", ")", "\n", "logger", ".", "info", "(", "\"Creating training data iterator\"", ")", "\n", "logger", ".", "info", "(", "\"===============================\"", ")", "\n", "# Pass 1: get target/source length ratios.", "\n", "length_statistics", "=", "analyze_sequence_lengths", "(", "sources", ",", "targets", ",", "source_vocabs", ",", "target_vocabs", ",", "\n", "max_seq_len_source", ",", "max_seq_len_target", ")", "\n", "\n", "if", "not", "allow_empty", ":", "\n", "        ", "check_condition", "(", "length_statistics", ".", "num_sents", ">", "0", ",", "\n", "\"No training sequences found with length smaller or equal than the maximum sequence length.\"", "\n", "\"Consider increasing %s\"", "%", "C", ".", "TRAINING_ARG_MAX_SEQ_LEN", ")", "\n", "\n", "# define buckets", "\n", "", "buckets", "=", "define_parallel_buckets", "(", "max_seq_len_source", ",", "max_seq_len_target", ",", "bucket_width", ",", "bucket_scaling", ",", "\n", "length_statistics", ".", "length_ratio_mean", ")", "if", "bucketing", "else", "[", "(", "max_seq_len_source", ",", "\n", "max_seq_len_target", ")", "]", "\n", "\n", "sources_sentences", ",", "targets_sentences", "=", "create_sequence_readers", "(", "sources", ",", "targets", ",", "source_vocabs", ",", "target_vocabs", ")", "\n", "\n", "# Pass 2: Get data statistics and determine the number of data points for each bucket.", "\n", "data_statistics", "=", "get_data_statistics", "(", "sources_sentences", ",", "targets_sentences", ",", "buckets", ",", "\n", "length_statistics", ".", "length_ratio_mean", ",", "length_statistics", ".", "length_ratio_std", ",", "\n", "source_vocabs", ",", "target_vocabs", ")", "\n", "\n", "bucket_batch_sizes", "=", "define_bucket_batch_sizes", "(", "buckets", ",", "\n", "batch_size", ",", "\n", "batch_type", ",", "\n", "data_statistics", ".", "average_len_target_per_bucket", ",", "\n", "batch_sentences_multiple_of", ")", "\n", "\n", "data_statistics", ".", "log", "(", "bucket_batch_sizes", ")", "\n", "\n", "# Pass 3: Load the data into memory and return the iterator.", "\n", "data_loader", "=", "RawParallelDatasetLoader", "(", "buckets", "=", "buckets", ",", "\n", "eos_id", "=", "C", ".", "EOS_ID", ",", "\n", "pad_id", "=", "C", ".", "PAD_ID", ")", "\n", "\n", "training_data", "=", "data_loader", ".", "load", "(", "sources_sentences", ",", "targets_sentences", ",", "\n", "data_statistics", ".", "num_sents_per_bucket", ")", ".", "fill_up", "(", "bucket_batch_sizes", ")", "\n", "\n", "data_info", "=", "DataInfo", "(", "sources", "=", "sources", ",", "\n", "targets", "=", "targets", ",", "\n", "source_vocabs", "=", "source_vocab_paths", ",", "\n", "target_vocabs", "=", "target_vocab_paths", ",", "\n", "shared_vocab", "=", "shared_vocab", ",", "\n", "num_shards", "=", "1", ")", "\n", "\n", "config_data", "=", "DataConfig", "(", "data_statistics", "=", "data_statistics", ",", "\n", "max_seq_len_source", "=", "max_seq_len_source", ",", "\n", "max_seq_len_target", "=", "max_seq_len_target", ",", "\n", "num_source_factors", "=", "len", "(", "sources", ")", ",", "\n", "num_target_factors", "=", "len", "(", "targets", ")", ")", "\n", "\n", "train_iter", "=", "ParallelSampleIter", "(", "data", "=", "training_data", ",", "\n", "buckets", "=", "buckets", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "bucket_batch_sizes", "=", "bucket_batch_sizes", ",", "\n", "num_source_factors", "=", "len", "(", "sources", ")", ",", "\n", "num_target_factors", "=", "len", "(", "targets", ")", ",", "\n", "permute", "=", "permute", ")", "\n", "\n", "# Don't shuffle validation data. Different orders can cause different", "\n", "# evaluation results.", "\n", "validation_iter", "=", "get_validation_data_iter", "(", "data_loader", "=", "data_loader", ",", "\n", "validation_sources", "=", "validation_sources", ",", "\n", "validation_targets", "=", "validation_targets", ",", "\n", "buckets", "=", "buckets", ",", "\n", "bucket_batch_sizes", "=", "bucket_batch_sizes", ",", "\n", "source_vocabs", "=", "source_vocabs", ",", "\n", "target_vocabs", "=", "target_vocabs", ",", "\n", "max_seq_len_source", "=", "max_seq_len_source", ",", "\n", "max_seq_len_target", "=", "max_seq_len_target", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "permute", "=", "False", ")", "\n", "\n", "return", "train_iter", ",", "validation_iter", ",", "config_data", ",", "data_info", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_scoring_data_iters": [[993, 1041], ["logger.info", "logger.info", "logger.info", "data_io.RawParallelDatasetLoader", "data_io.BatchedRawParallelSampleIter", "len", "len"], "function", ["None"], ["", "def", "get_scoring_data_iters", "(", "sources", ":", "List", "[", "str", "]", ",", "\n", "targets", ":", "List", "[", "str", "]", ",", "\n", "source_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "target_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "batch_size", ":", "int", ",", "\n", "max_seq_len_source", ":", "int", ",", "\n", "max_seq_len_target", ":", "int", ")", "->", "'BaseParallelSampleIter'", ":", "\n", "    ", "\"\"\"\n    Returns a data iterator for scoring. The iterator loads data on demand,\n    batch by batch, and does not skip any lines. Lines that are too long\n    are truncated.\n\n    :param sources: Path to source training data (with optional factor data paths).\n    :param targets: Path to target training data (with optional factor data paths).\n    :param source_vocabs: Source vocabulary and optional factor vocabularies.\n    :param target_vocabs: Target vocabulary and optional factor vocabularies.\n    :param batch_size: Batch size.\n    :param max_seq_len_source: Maximum source sequence length.\n    :param max_seq_len_target: Maximum target sequence length.\n    :return: The scoring data iterator.\n    \"\"\"", "\n", "logger", ".", "info", "(", "\"==============================\"", ")", "\n", "logger", ".", "info", "(", "\"Creating scoring data iterator\"", ")", "\n", "logger", ".", "info", "(", "\"==============================\"", ")", "\n", "\n", "# One bucket to hold them all,", "\n", "bucket", "=", "(", "max_seq_len_source", ",", "max_seq_len_target", ")", "\n", "\n", "# ...One loader to raise them,", "\n", "data_loader", "=", "RawParallelDatasetLoader", "(", "buckets", "=", "[", "bucket", "]", ",", "\n", "eos_id", "=", "C", ".", "EOS_ID", ",", "\n", "pad_id", "=", "C", ".", "PAD_ID", ",", "\n", "skip_blanks", "=", "False", ")", "\n", "\n", "# ...one iterator to traverse them all,", "\n", "scoring_iter", "=", "BatchedRawParallelSampleIter", "(", "data_loader", "=", "data_loader", ",", "\n", "sources", "=", "sources", ",", "\n", "targets", "=", "targets", ",", "\n", "source_vocabs", "=", "source_vocabs", ",", "\n", "target_vocabs", "=", "target_vocabs", ",", "\n", "bucket", "=", "bucket", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "max_lens", "=", "(", "max_seq_len_source", ",", "max_seq_len_target", ")", ",", "\n", "num_source_factors", "=", "len", "(", "sources", ")", ",", "\n", "num_target_factors", "=", "len", "(", "targets", ")", ")", "\n", "\n", "# and with the model appraise them.", "\n", "return", "scoring_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.describe_data_and_buckets": [[1082, 1101], ["utils.check_condition", "zip", "len", "len", "logger.info", "len", "len", "math.ceil"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["", "", "", "def", "describe_data_and_buckets", "(", "data_statistics", ":", "DataStatistics", ",", "bucket_batch_sizes", ":", "List", "[", "BucketBatchSize", "]", ")", ":", "\n", "    ", "\"\"\"\n    Describes statistics across buckets\n    \"\"\"", "\n", "check_condition", "(", "len", "(", "bucket_batch_sizes", ")", "==", "len", "(", "data_statistics", ".", "buckets", ")", ",", "\n", "\"Number of bucket batch sizes (%d) does not match number of buckets in statistics (%d).\"", "\n", "%", "(", "len", "(", "bucket_batch_sizes", ")", ",", "len", "(", "data_statistics", ".", "buckets", ")", ")", ")", "\n", "for", "bucket_batch_size", ",", "num_seq", ",", "(", "lr_mean", ",", "lr_std", ")", "in", "zip", "(", "bucket_batch_sizes", ",", "\n", "data_statistics", ".", "num_sents_per_bucket", ",", "\n", "data_statistics", ".", "length_ratio_stats_per_bucket", ")", ":", "\n", "        ", "if", "num_seq", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Bucket %s: %d samples in %d batches of %d, ~%.1f target tokens/batch, \"", "\n", "\"trg/src length ratio: %.2f (+-%.2f)\"", ",", "\n", "bucket_batch_size", ".", "bucket", ",", "\n", "num_seq", ",", "\n", "math", ".", "ceil", "(", "num_seq", "/", "bucket_batch_size", ".", "batch_size", ")", ",", "\n", "bucket_batch_size", ".", "batch_size", ",", "\n", "bucket_batch_size", ".", "average_target_words_per_batch", ",", "\n", "lr_mean", ",", "lr_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.read_content": [[1128, 1141], ["utils.smart_open", "enumerate", "list", "utils.get_tokens"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens"], ["", "def", "read_content", "(", "path", ":", "str", ",", "limit", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "Iterator", "[", "List", "[", "str", "]", "]", ":", "\n", "    ", "\"\"\"\n    Returns a list of tokens for each line in path up to a limit.\n\n    :param path: Path to files containing sentences.\n    :param limit: How many lines to read from path.\n    :return: Iterator over lists of words.\n    \"\"\"", "\n", "with", "smart_open", "(", "path", ")", "as", "indata", ":", "\n", "        ", "for", "i", ",", "line", "in", "enumerate", "(", "indata", ")", ":", "\n", "            ", "if", "limit", "is", "not", "None", "and", "i", "==", "limit", ":", "\n", "                ", "break", "\n", "", "yield", "list", "(", "get_tokens", "(", "line", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.tokens2ids": [[1143, 1152], ["vocab.get"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get"], ["", "", "", "def", "tokens2ids", "(", "tokens", ":", "Iterable", "[", "str", "]", ",", "vocab", ":", "Dict", "[", "str", ",", "int", "]", ")", "->", "List", "[", "int", "]", ":", "\n", "    ", "\"\"\"\n    Returns sequence of integer ids given a sequence of tokens and vocab.\n\n    :param tokens: List of string tokens.\n    :param vocab: Vocabulary (containing UNK symbol).\n    :return: List of word ids.\n    \"\"\"", "\n", "return", "[", "vocab", ".", "get", "(", "w", ",", "vocab", "[", "C", ".", "UNK_SYMBOL", "]", ")", "for", "w", "in", "tokens", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.strids2ids": [[1154, 1162], ["list", "map"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.map"], ["", "def", "strids2ids", "(", "tokens", ":", "Iterable", "[", "str", "]", ")", "->", "List", "[", "int", "]", ":", "\n", "    ", "\"\"\"\n    Returns sequence of integer ids given a sequence of string ids.\n\n    :param tokens: List of integer tokens.\n    :return: List of word ids.\n    \"\"\"", "\n", "return", "list", "(", "map", "(", "int", ",", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ids2tokens": [[1164, 1177], ["zip"], "function", ["None"], ["", "def", "ids2tokens", "(", "token_ids", ":", "Iterable", "[", "int", "]", ",", "\n", "vocab_inv", ":", "Dict", "[", "int", ",", "str", "]", ",", "\n", "exclude_set", ":", "Set", "[", "int", "]", ")", "->", "Iterator", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Transforms a list of token IDs into a list of words, excluding any IDs in `exclude_set`.\n\n    :param token_ids: The list of token IDs.\n    :param vocab_inv: The inverse vocabulary.\n    :param exclude_set: The list of token IDs to exclude.\n    :return: The list of words.\n    \"\"\"", "\n", "tokens", "=", "(", "vocab_inv", "[", "token", "]", "for", "token", "in", "token_ids", ")", "\n", "return", "(", "tok", "for", "token_id", ",", "tok", "in", "zip", "(", "token_ids", ",", "tokens", ")", "if", "token_id", "not", "in", "exclude_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.create_sequence_readers": [[1228, 1245], ["data_io.SequenceReader", "data_io.SequenceReader", "zip", "zip"], "function", ["None"], ["", "", "", "def", "create_sequence_readers", "(", "sources", ":", "List", "[", "str", "]", ",", "targets", ":", "List", "[", "str", "]", ",", "\n", "vocab_sources", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "vocab_targets", ":", "List", "[", "vocab", ".", "Vocab", "]", ")", "->", "Tuple", "[", "List", "[", "SequenceReader", "]", ",", "List", "[", "SequenceReader", "]", "]", ":", "\n", "    ", "\"\"\"\n    Create source readers with EOS and target readers with BOS.\n\n    :param sources: The file names of source data and factors.\n    :param targets: The file name of the target data and factors.\n    :param vocab_sources: The source vocabularies.\n    :param vocab_targets: The target vocabularies.\n    :return: The source sequence readers and the target reader.\n    \"\"\"", "\n", "source_sequence_readers", "=", "[", "SequenceReader", "(", "source", ",", "vocab", ",", "add_eos", "=", "True", ")", "for", "source", ",", "vocab", "in", "\n", "zip", "(", "sources", ",", "vocab_sources", ")", "]", "\n", "target_sequence_readers", "=", "[", "SequenceReader", "(", "target", ",", "vocab", ",", "add_bos", "=", "True", ")", "for", "target", ",", "vocab", "in", "\n", "zip", "(", "targets", ",", "vocab_targets", ")", "]", "\n", "return", "source_sequence_readers", ",", "target_sequence_readers", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.parallel_iter": [[1247, 1265], ["data_io.parallel_iterate", "iter", "iter"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.parallel_iterate"], ["", "def", "parallel_iter", "(", "source_iterables", ":", "Sequence", "[", "Iterable", "[", "Optional", "[", "Any", "]", "]", "]", ",", "\n", "target_iterables", ":", "Sequence", "[", "Iterable", "[", "Optional", "[", "Any", "]", "]", "]", ",", "\n", "skip_blanks", ":", "bool", "=", "True", ",", "\n", "check_token_parallel", ":", "bool", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Creates iterators over parallel iterables by calling iter() on the iterables\n    and chaining to parallel_iterate(). The purpose of the separation is to allow\n    the caller to save iterator state between calls, if desired.\n\n    :param source_iterables: A list of source iterables.\n    :param target_iterables: A target iterable.\n    :param skip_blanks: Whether to skip empty target lines.\n    :param check_token_parallel: Whether to check if the tokens are parallel or not.\n    :return: Iterators over sources and target.\n    \"\"\"", "\n", "source_iterators", "=", "[", "iter", "(", "s", ")", "for", "s", "in", "source_iterables", "]", "\n", "target_iterators", "=", "[", "iter", "(", "t", ")", "for", "t", "in", "target_iterables", "]", "\n", "return", "parallel_iterate", "(", "source_iterators", ",", "target_iterators", ",", "skip_blanks", ",", "check_token_parallel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.parallel_iterate": [[1267, 1308], ["utils.check_condition", "logger.warning", "utils.check_condition", "utils.check_condition", "all", "all", "next", "next", "any", "any", "data_io.are_none", "data_io.are_token_parallel", "str", "data_io.are_none", "data_io.are_token_parallel", "str", "next", "next", "typing.cast", "typing.cast"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.are_none", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.are_token_parallel", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.are_none", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.are_token_parallel", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.cast", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.cast"], ["", "def", "parallel_iterate", "(", "source_iterators", ":", "Sequence", "[", "Iterator", "[", "Optional", "[", "Any", "]", "]", "]", ",", "\n", "target_iterators", ":", "Sequence", "[", "Iterator", "[", "Optional", "[", "Any", "]", "]", "]", ",", "\n", "skip_blanks", ":", "bool", "=", "True", ",", "\n", "check_token_parallel", ":", "bool", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Yields parallel source(s), target sequences from iterables.\n    Checks for token parallelism in source sequences.\n    Skips pairs where element in at least one iterable is None.\n    Checks that all iterables have the same number of elements.\n    Can optionally continue from an already-begun iterator.\n\n    :param source_iterators: A list of source iterators.\n    :param target_iterators: A list of source iterators.\n    :param skip_blanks: Whether to skip empty target lines.\n    :param check_token_parallel: Whether to check if the tokens are parallel or not.\n    :return: Iterators over sources and target.\n    \"\"\"", "\n", "num_skipped", "=", "0", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "sources", "=", "[", "next", "(", "source_iter", ")", "for", "source_iter", "in", "source_iterators", "]", "\n", "targets", "=", "[", "next", "(", "target_iter", ")", "for", "target_iter", "in", "target_iterators", "]", "\n", "", "except", "StopIteration", ":", "\n", "            ", "break", "\n", "", "if", "skip_blanks", "and", "(", "any", "(", "(", "s", "is", "None", "for", "s", "in", "sources", ")", ")", "or", "any", "(", "(", "t", "is", "None", "for", "t", "in", "targets", ")", ")", ")", ":", "\n", "            ", "num_skipped", "+=", "1", "\n", "continue", "\n", "", "if", "check_token_parallel", ":", "\n", "            ", "check_condition", "(", "are_none", "(", "sources", ")", "or", "are_token_parallel", "(", "sources", ")", ",", "\n", "\"Source sequences are not token-parallel: %s\"", "%", "(", "str", "(", "sources", ")", ")", ")", "\n", "check_condition", "(", "are_none", "(", "targets", ")", "or", "are_token_parallel", "(", "targets", ")", ",", "\n", "\"Target sequences are not token-parallel: %s\"", "%", "(", "str", "(", "targets", ")", ")", ")", "\n", "", "yield", "sources", ",", "targets", "\n", "\n", "", "if", "num_skipped", ">", "0", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Parallel reading of sequences skipped %d elements\"", ",", "num_skipped", ")", "\n", "\n", "", "check_condition", "(", "\n", "all", "(", "next", "(", "cast", "(", "Iterator", ",", "s", ")", ",", "None", ")", "is", "None", "for", "s", "in", "source_iterators", ")", "and", "all", "(", "next", "(", "cast", "(", "Iterator", ",", "t", ")", ",", "None", ")", "is", "None", "for", "t", "in", "target_iterators", ")", ",", "\n", "\"Different number of lines in source(s) and target(s) iterables.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_parallel_bucket": [[1310, 1327], ["enumerate"], "function", ["None"], ["", "def", "get_parallel_bucket", "(", "buckets", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "length_source", ":", "int", ",", "\n", "length_target", ":", "int", ")", "->", "Tuple", "[", "Optional", "[", "int", "]", ",", "Optional", "[", "Tuple", "[", "int", ",", "int", "]", "]", "]", ":", "\n", "    ", "\"\"\"\n    Returns bucket index and bucket from a list of buckets, given source and target length.\n    Algorithm assumes buckets are sorted from shortest to longest.\n    Returns (None, None) if no bucket fits.\n\n    :param buckets: List of buckets, in sorted order, shortest to longest.\n    :param length_source: Length of source sequence.\n    :param length_target: Length of target sequence.\n    :return: Tuple of (bucket index, bucket), or (None, None) if not fitting.\n    \"\"\"", "\n", "for", "j", ",", "(", "source_bkt", ",", "target_bkt", ")", "in", "enumerate", "(", "buckets", ")", ":", "\n", "        ", "if", "source_bkt", ">=", "length_source", "and", "target_bkt", ">=", "length_target", ":", "\n", "            ", "return", "j", ",", "(", "source_bkt", ",", "target_bkt", ")", "\n", "", "", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_target_bucket": [[1329, 1346], ["enumerate"], "function", ["None"], ["", "def", "get_target_bucket", "(", "buckets", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "length_target", ":", "int", ")", "->", "Tuple", "[", "Optional", "[", "int", "]", ",", "Optional", "[", "Tuple", "[", "int", ",", "int", "]", "]", "]", ":", "\n", "    ", "\"\"\"\n    Returns bucket index and bucket from a list of buckets, given source and target length.\n    Returns (None, None) if no bucket fits.\n\n    :param buckets: List of buckets.\n    :param length_target: Length of target sequence.\n    :return: Tuple of (bucket index, bucket), or (None, None) if not fitting.\n    \"\"\"", "\n", "bucket_idx", "=", "None", "# type: Optional[int]", "\n", "bucket", "=", "None", "# type: Optional[Tuple[int, int]]", "\n", "for", "j", ",", "(", "source_bkt", ",", "target_bkt", ")", "in", "enumerate", "(", "buckets", ")", ":", "\n", "        ", "if", "target_bkt", ">=", "length_target", ":", "\n", "            ", "bucket_idx", ",", "bucket", "=", "j", ",", "(", "source_bkt", ",", "target_bkt", ")", "\n", "break", "\n", "", "", "return", "bucket_idx", ",", "bucket", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_permutations": [[1485, 1505], ["torch.from_numpy().long", "torch.from_numpy().long", "torch.empty", "torch.empty", "torch.arange", "torch.arange", "data_permutations.append", "inverse_data_permutations.append", "torch.from_numpy", "torch.from_numpy", "numpy.random.permutation"], "function", ["None"], ["", "", "def", "get_permutations", "(", "bucket_counts", ":", "List", "[", "int", "]", ")", "->", "Tuple", "[", "List", "[", "torch", ".", "Tensor", "]", ",", "List", "[", "torch", ".", "Tensor", "]", "]", ":", "\n", "    ", "\"\"\"\n    Returns the indices of a random permutation for each bucket and the corresponding inverse permutations that can\n    restore the original order of the data if applied to the permuted data.\n\n    :param bucket_counts: The number of elements per bucket.\n    :return: For each bucket a permutation and inverse permutation is returned.\n    \"\"\"", "\n", "data_permutations", "=", "[", "]", "# type: List[torch.Tensor]", "\n", "inverse_data_permutations", "=", "[", "]", "# type: List[torch.Tensor]", "\n", "for", "num_samples", "in", "bucket_counts", ":", "\n", "        ", "if", "num_samples", "==", "0", ":", "\n", "            ", "num_samples", "=", "1", "\n", "# new random order:", "\n", "", "data_permutation", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "permutation", "(", "num_samples", ")", ")", ".", "long", "(", ")", "\n", "inverse_data_permutation", "=", "torch", ".", "empty", "(", "num_samples", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "inverse_data_permutation", "[", "data_permutation", "]", "=", "torch", ".", "arange", "(", "num_samples", ")", "\n", "data_permutations", ".", "append", "(", "data_permutation", ")", "\n", "inverse_data_permutations", ".", "append", "(", "inverse_data_permutation", ")", "\n", "", "return", "data_permutations", ",", "inverse_data_permutations", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_batch_indices": [[1507, 1531], ["enumerate", "idxs.extend", "logger.info", "range"], "function", ["None"], ["", "def", "get_batch_indices", "(", "data", ":", "ParallelDataSet", ",", "\n", "bucket_batch_sizes", ":", "List", "[", "BucketBatchSize", "]", ")", "->", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ":", "\n", "    ", "\"\"\"\n    Returns a list of index tuples that index into the bucket and the start index inside a bucket given\n    the batch size for a bucket. These indices are valid for the given dataset.\n\n    Put another way, this returns the starting points for all batches within the dataset, across all buckets.\n\n    :param data: Data to create indices for.\n    :param bucket_batch_sizes: Bucket batch sizes.\n    :return: List of 2d indices.\n    \"\"\"", "\n", "# create index tuples (i,j) into buckets: i := bucket index ; j := row index of bucket array", "\n", "idxs", "=", "[", "]", "# type: List[Tuple[int, int]]", "\n", "for", "buck_idx", ",", "_", "in", "enumerate", "(", "data", ".", "source", ")", ":", "\n", "        ", "bucket", "=", "bucket_batch_sizes", "[", "buck_idx", "]", ".", "bucket", "\n", "batch_size", "=", "bucket_batch_sizes", "[", "buck_idx", "]", ".", "batch_size", "\n", "num_samples", "=", "data", ".", "source", "[", "buck_idx", "]", ".", "shape", "[", "0", "]", "\n", "rest", "=", "num_samples", "%", "batch_size", "\n", "if", "rest", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Ignoring %d samples from bucket %s with %d samples due to incomplete batch\"", ",", "\n", "rest", ",", "bucket", ",", "num_samples", ")", "\n", "", "idxs", ".", "extend", "(", "[", "(", "buck_idx", ",", "j", ")", "for", "j", "in", "range", "(", "0", ",", "num_samples", "-", "batch_size", "+", "1", ",", "batch_size", ")", "]", ")", "\n", "", "return", "idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.create_target_and_shifted_label_sequences": [[1921, 1931], ["target_and_label[].clone"], "function", ["None"], ["", "", "def", "create_target_and_shifted_label_sequences", "(", "target_and_label", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"\n    Returns the target and label sequence from a joint tensor of varying-length\n    sequences including both <bos> and <eos>. Both tensors returned have input\n    size of second dimension - 1.\n    \"\"\"", "\n", "target", "=", "target_and_label", "[", ":", ",", ":", "-", "1", ",", ":", "]", ".", "clone", "(", ")", "# skip last column, copy data", "\n", "target", "[", "target", "==", "C", ".", "EOS_ID", "]", "=", "0", "# replace <eos>'s with <pad>", "\n", "label", "=", "target_and_label", "[", ":", ",", "1", ":", ",", ":", "]", "# label skips <bos>", "\n", "return", "target", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.create_batch_from_parallel_sample": [[1933, 1960], ["data_io.Batch", "torch.squeeze", "torch.squeeze", "labels.update", "torch.squeeze", "torch.squeeze", "torch.split", "torch.split", "enumerate"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update"], ["", "def", "create_batch_from_parallel_sample", "(", "source", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "label", ":", "torch", ".", "Tensor", ")", "->", "Batch", ":", "\n", "    ", "\"\"\"\n    Creates a Batch instance from parallel data.\n\n    :param source: Source tensor. Shape: (batch, source_length, num_source_factors).\n    :param target: Target tensor. Shape: (batch, target_length, num_target_factors).\n    :param label: Time-shifted label tensor. Shape: (batch, target_length, num_target_factors).\n    \"\"\"", "\n", "source_words", "=", "source", "[", ":", ",", ":", ",", "0", "]", "\n", "source_length", "=", "(", "source_words", "!=", "C", ".", "PAD_ID", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "target_words", "=", "target", "[", ":", ",", ":", ",", "0", "]", "\n", "target_length", "=", "(", "target_words", "!=", "C", ".", "PAD_ID", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "length_ratio", "=", "source_length", "/", "target_length", "\n", "\n", "samples", ",", "tokens", ",", "_", "=", "source", ".", "shape", "\n", "tokens", "*=", "samples", "\n", "\n", "labels", "=", "{", "C", ".", "LENRATIO_LABEL_NAME", ":", "length_ratio", "}", "\n", "\n", "if", "label", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "labels", "[", "C", ".", "TARGET_LABEL_NAME", "]", "=", "torch", ".", "squeeze", "(", "label", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "        ", "primary_label", ",", "*", "factor_labels", "=", "(", "torch", ".", "squeeze", "(", "x", ",", "dim", "=", "2", ")", "for", "x", "in", "torch", ".", "split", "(", "label", ",", "1", ",", "dim", "=", "2", ")", ")", "\n", "labels", "[", "C", ".", "TARGET_LABEL_NAME", "]", "=", "primary_label", "\n", "labels", ".", "update", "(", "{", "C", ".", "TARGET_FACTOR_LABEL_NAME", "%", "i", ":", "label", "for", "i", ",", "label", "in", "enumerate", "(", "factor_labels", ",", "1", ")", "}", ")", "\n", "\n", "", "return", "Batch", "(", "source", ",", "source_length", ",", "target", ",", "target_length", ",", "labels", ",", "samples", ",", "tokens", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu": [[37, 47], ["sacrebleu.raw_corpus_bleu"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu"], ["def", "raw_corpus_bleu", "(", "hypotheses", ":", "Iterable", "[", "str", "]", ",", "references", ":", "Iterable", "[", "str", "]", ",", "offset", ":", "Optional", "[", "float", "]", "=", "0.01", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Simple wrapper around sacreBLEU's BLEU without tokenization and smoothing.\n\n    :param hypotheses: Hypotheses stream.\n    :param references: Reference stream.\n    :param offset: Smoothing constant.\n    :return: BLEU score as float between 0 and 1.\n    \"\"\"", "\n", "return", "sacrebleu", ".", "raw_corpus_bleu", "(", "hypotheses", ",", "[", "references", "]", ",", "smooth_value", "=", "offset", ")", ".", "score", "/", "100.0", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_chrf": [[49, 58], ["sacrebleu.corpus_chrf"], "function", ["None"], ["", "def", "raw_corpus_chrf", "(", "hypotheses", ":", "Iterable", "[", "str", "]", ",", "references", ":", "Iterable", "[", "str", "]", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Simple wrapper around sacreBLEU's chrF implementation, without tokenization.\n\n    :param hypotheses: Hypotheses stream.\n    :param references: Reference stream.\n    :return: chrF score as float between 0 and 1.\n    \"\"\"", "\n", "return", "sacrebleu", ".", "corpus_chrf", "(", "hypotheses", ",", "[", "references", "]", ")", ".", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_ter": [[60, 70], ["sacrebleu.metrics.TER", "argparse.Namespace", "sacrebleu.metrics.TER.corpus_score"], "function", ["None"], ["", "def", "raw_corpus_ter", "(", "hypotheses", ":", "Iterable", "[", "str", "]", ",", "references", ":", "Iterable", "[", "str", "]", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Simple wrapper around sacreBLEU's TER implementation, without tokenization.\n\n    :param hypotheses: Hypotheses stream.\n    :param references: Reference stream.\n    :return: TER score as float between 0 and 1.\n    \"\"\"", "\n", "ter", "=", "sacrebleu", ".", "metrics", ".", "TER", "(", "argparse", ".", "Namespace", "(", ")", ")", "\n", "return", "ter", ".", "corpus_score", "(", "hypotheses", ",", "[", "references", "]", ")", ".", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_rouge1": [[72, 81], ["sockeye_contrib.rouge.rouge_1"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_1"], ["", "def", "raw_corpus_rouge1", "(", "hypotheses", ":", "Iterable", "[", "str", "]", ",", "references", ":", "Iterable", "[", "str", "]", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Simple wrapper around ROUGE-1 implementation.\n\n    :param hypotheses: Hypotheses stream.\n    :param references: Reference stream.\n    :return: ROUGE-1 score as float between 0 and 1.\n    \"\"\"", "\n", "return", "rouge", ".", "rouge_1", "(", "hypotheses", ",", "references", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_rouge2": [[83, 92], ["sockeye_contrib.rouge.rouge_2"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_2"], ["", "def", "raw_corpus_rouge2", "(", "hypotheses", ":", "Iterable", "[", "str", "]", ",", "references", ":", "Iterable", "[", "str", "]", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Simple wrapper around ROUGE-2 implementation.\n\n    :param hypotheses: Hypotheses stream.\n    :param references: Reference stream.\n    :return: ROUGE-2 score as float between 0 and 1.\n    \"\"\"", "\n", "return", "rouge", ".", "rouge_2", "(", "hypotheses", ",", "references", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_rougel": [[94, 103], ["sockeye_contrib.rouge.rouge_l"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye_contrib.rouge.rouge_l"], ["", "def", "raw_corpus_rougel", "(", "hypotheses", ":", "Iterable", "[", "str", "]", ",", "references", ":", "Iterable", "[", "str", "]", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Simple wrapper around ROUGE-L implementation.\n\n    :param hypotheses: Hypotheses stream.\n    :param references: Reference stream.\n    :return: ROUGE-L score as float between 0 and 1.\n    \"\"\"", "\n", "return", "rouge", ".", "rouge_l", "(", "hypotheses", ",", "references", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_length_ratio": [[105, 115], ["len", "len", "len", "zip", "sum", "len", "h.split", "r.split"], "function", ["None"], ["", "def", "raw_corpus_length_ratio", "(", "hypotheses", ":", "Iterable", "[", "str", "]", ",", "references", ":", "Iterable", "[", "str", "]", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Simple wrapper around length ratio implementation.\n\n    :param hypotheses: Hypotheses stream.\n    :param references: Reference stream.\n    :return: Length ratio score as float.\n    \"\"\"", "\n", "ratios", "=", "[", "len", "(", "h", ".", "split", "(", ")", ")", "/", "len", "(", "r", ".", "split", "(", ")", ")", "for", "h", ",", "r", "in", "zip", "(", "hypotheses", ",", "references", ")", "]", "\n", "return", "sum", "(", "ratios", ")", "/", "len", "(", "ratios", ")", "if", "len", "(", "ratios", ")", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.main": [[117, 179], ["argparse.ArgumentParser", "arguments.add_evaluate_args", "arguments.add_logging_args", "argparse.ArgumentParser.parse_args", "log.setup_main_logger", "utils.check_condition", "log.log_sockeye_version", "logger.info", "logger.info", "logger.info", "logger.info", "logger.setLevel", "len", "len", "len", "metrics.append", "collections.defaultdict", "evaluate._print_mean_std_score", "data_io.read_content", "h.strip", "utils.check_condition", "functools.partial", "zip", "scores[].append", "collections.defaultdict", "evaluate._print_mean_std_score", "len", "len", "metric", "scores[].append", "len", "len", "metric", "ValueError"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_evaluate_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_logging_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.setup_main_logger", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.log_sockeye_version", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate._print_mean_std_score", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.read_content", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate._print_mean_std_score", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.Loss.metric", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.Loss.metric"], ["", "def", "main", "(", ")", ":", "\n", "    ", "params", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Evaluate translations by calculating metrics with '", "\n", "'respect to a reference set. If multiple hypotheses files are given '", "\n", "'the mean and standard deviation of the metrics are reported.'", ")", "\n", "arguments", ".", "add_evaluate_args", "(", "params", ")", "\n", "arguments", ".", "add_logging_args", "(", "params", ")", "\n", "args", "=", "params", ".", "parse_args", "(", ")", "\n", "setup_main_logger", "(", "file_logging", "=", "False", ")", "\n", "\n", "if", "args", ".", "quiet", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "", "utils", ".", "check_condition", "(", "args", ".", "offset", ">=", "0", ",", "\"Offset should be non-negative.\"", ")", "\n", "log_sockeye_version", "(", "logger", ")", "\n", "\n", "logger", ".", "info", "(", "\"Command: %s\"", ",", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "logger", ".", "info", "(", "\"Arguments: %s\"", ",", "args", ")", "\n", "\n", "references", "=", "[", "' '", ".", "join", "(", "e", ")", "for", "e", "in", "data_io", ".", "read_content", "(", "args", ".", "references", ")", "]", "\n", "all_hypotheses", "=", "[", "[", "h", ".", "strip", "(", ")", "for", "h", "in", "hypotheses", "]", "for", "hypotheses", "in", "args", ".", "hypotheses", "]", "\n", "if", "not", "args", ".", "not_strict", ":", "\n", "        ", "for", "hypotheses", "in", "all_hypotheses", ":", "\n", "            ", "utils", ".", "check_condition", "(", "len", "(", "hypotheses", ")", "==", "len", "(", "references", ")", ",", "\n", "\"Number of hypotheses (%d) and references (%d) does not match.\"", "%", "(", "len", "(", "hypotheses", ")", ",", "\n", "len", "(", "references", ")", ")", ")", "\n", "", "", "logger", ".", "info", "(", "\"%d hypothesis set(s) | %d hypotheses | %d references\"", ",", "\n", "len", "(", "all_hypotheses", ")", ",", "len", "(", "all_hypotheses", "[", "0", "]", ")", ",", "len", "(", "references", ")", ")", "\n", "\n", "metric_info", "=", "[", "\"%s\\t(s_opt)\"", "%", "name", "for", "name", "in", "args", ".", "metrics", "]", "\n", "logger", ".", "info", "(", "\"\\t\"", ".", "join", "(", "metric_info", ")", ")", "\n", "\n", "metrics", "=", "[", "]", "# type: List[Tuple[str, Callable]]", "\n", "for", "name", "in", "args", ".", "metrics", ":", "\n", "        ", "if", "name", "==", "C", ".", "BLEU", ":", "\n", "            ", "func", "=", "partial", "(", "raw_corpus_bleu", ",", "offset", "=", "args", ".", "offset", ")", "\n", "", "elif", "name", "==", "C", ".", "CHRF", ":", "\n", "            ", "func", "=", "raw_corpus_chrf", "\n", "", "elif", "name", "==", "C", ".", "ROUGE1", ":", "\n", "            ", "func", "=", "raw_corpus_rouge1", "\n", "", "elif", "name", "==", "C", ".", "ROUGE2", ":", "\n", "            ", "func", "=", "raw_corpus_rouge2", "\n", "", "elif", "name", "==", "C", ".", "ROUGEL", ":", "\n", "            ", "func", "=", "raw_corpus_rougel", "\n", "", "elif", "name", "==", "C", ".", "TER", ":", "\n", "            ", "func", "=", "raw_corpus_ter", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown metric %s.\"", "%", "name", ")", "\n", "", "metrics", ".", "append", "(", "(", "name", ",", "func", ")", ")", "\n", "\n", "", "if", "not", "args", ".", "sentence", ":", "\n", "        ", "scores", "=", "defaultdict", "(", "list", ")", "# type: Dict[str, List[float]]", "\n", "for", "hypotheses", "in", "all_hypotheses", ":", "\n", "            ", "for", "name", ",", "metric", "in", "metrics", ":", "\n", "                ", "scores", "[", "name", "]", ".", "append", "(", "metric", "(", "hypotheses", ",", "references", ")", ")", "\n", "", "", "_print_mean_std_score", "(", "metrics", ",", "scores", ")", "\n", "", "else", ":", "\n", "        ", "for", "hypotheses", "in", "all_hypotheses", ":", "\n", "            ", "for", "h", ",", "r", "in", "zip", "(", "hypotheses", ",", "references", ")", ":", "\n", "                ", "scores", "=", "defaultdict", "(", "list", ")", "# type: Dict[str, List[float]]", "\n", "for", "name", ",", "metric", "in", "metrics", ":", "\n", "                    ", "scores", "[", "name", "]", ".", "append", "(", "metric", "(", "[", "h", "]", ",", "[", "r", "]", ")", ")", "\n", "", "_print_mean_std_score", "(", "metrics", ",", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate._print_mean_std_score": [[181, 192], ["print", "len", "numpy.item", "numpy.item", "scores_mean_std.append", "scores_mean_std.append", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.mean", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.std"], ["", "", "", "", "def", "_print_mean_std_score", "(", "metrics", ":", "List", "[", "Tuple", "[", "str", ",", "Callable", "]", "]", ",", "scores", ":", "Dict", "[", "str", ",", "List", "[", "float", "]", "]", ")", ":", "\n", "    ", "scores_mean_std", "=", "[", "]", "# type: List[str]", "\n", "for", "name", ",", "_", "in", "metrics", ":", "\n", "        ", "if", "len", "(", "scores", "[", "name", "]", ")", ">", "1", ":", "\n", "            ", "score_mean", "=", "np", ".", "item", "(", "np", ".", "mean", "(", "scores", "[", "name", "]", ")", ")", "\n", "score_std", "=", "np", ".", "item", "(", "np", ".", "std", "(", "scores", "[", "name", "]", ",", "ddof", "=", "1", ")", ")", "\n", "scores_mean_std", ".", "append", "(", "\"%.3f\\t%.3f\"", "%", "(", "score_mean", ",", "score_std", ")", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "scores", "[", "name", "]", "[", "0", "]", "\n", "scores_mean_std", ".", "append", "(", "\"%.3f\\t(-)\"", "%", "score", ")", "\n", "", "", "print", "(", "\"\\t\"", ".", "join", "(", "scores_mean_std", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.__init__": [[41, 49], ["argparse.ArgumentParser.__init__", "arguments.ConfigArgumentParser._overwrite_add_argument", "arguments.ConfigArgumentParser.add_argument"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser._overwrite_add_argument"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "argument_definitions", "=", "{", "}", "# type: Dict[Tuple, Dict]", "\n", "self", ".", "argument_actions", "=", "[", "]", "# type: List[Any]", "\n", "self", ".", "_overwrite_add_argument", "(", "self", ")", "\n", "self", ".", "add_argument", "(", "\"--config\"", ",", "help", "=", "\"Path to CLI arguments in yaml format \"", "\n", "\"(as saved in Sockeye model directories as 'args.yaml'). \"", "\n", "\"Commandline arguments have precedence over values in this file.\"", ",", "type", "=", "str", ")", "\n", "# Note: not FileType so that we can get the path here", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser._register_argument": [[51, 54], ["arguments.ConfigArgumentParser.argument_actions.append"], "methods", ["None"], ["", "def", "_register_argument", "(", "self", ",", "_action", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "argument_definitions", "[", "args", "]", "=", "kwargs", "\n", "self", ".", "argument_actions", ".", "append", "(", "_action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser._overwrite_add_argument": [[55, 65], ["types.MethodType", "arguments.ConfigArgumentParser.original_add_argument", "arguments.ConfigArgumentParser.config_container._register_argument"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser._register_argument"], ["", "def", "_overwrite_add_argument", "(", "self", ",", "original_object", ")", ":", "\n", "        ", "def", "_new_add_argument", "(", "this_self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "action", "=", "this_self", ".", "original_add_argument", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "this_self", ".", "config_container", ".", "_register_argument", "(", "action", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "original_object", ".", "original_add_argument", "=", "original_object", ".", "add_argument", "\n", "original_object", ".", "config_container", "=", "self", "\n", "original_object", ".", "add_argument", "=", "types", ".", "MethodType", "(", "_new_add_argument", ",", "original_object", ")", "\n", "\n", "return", "original_object", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.add_argument_group": [[66, 69], ["super().add_argument_group", "arguments.ConfigArgumentParser._overwrite_add_argument"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.add_argument_group", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser._overwrite_add_argument"], ["", "def", "add_argument_group", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "group", "=", "super", "(", ")", ".", "add_argument_group", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "self", ".", "_overwrite_add_argument", "(", "group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args": [[70, 83], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "argparse.Namespace", "super().parse_args", "arguments.load_args", "arguments.regular_file"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.load_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.regular_file"], ["", "def", "parse_args", "(", "self", ",", "args", "=", "None", ",", "namespace", "=", "None", ")", "->", "argparse", ".", "Namespace", ":", "# type: ignore", "\n", "# Mini argument parser to find the config file", "\n", "        ", "config_parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "False", ")", "\n", "config_parser", ".", "add_argument", "(", "\"--config\"", ",", "type", "=", "regular_file", "(", ")", ")", "\n", "config_args", ",", "_", "=", "config_parser", ".", "parse_known_args", "(", "args", "=", "args", ")", "\n", "initial_args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "if", "config_args", ".", "config", ":", "\n", "            ", "initial_args", "=", "load_args", "(", "config_args", ".", "config", ")", "\n", "# Remove the 'required' flag from options loaded from config file", "\n", "for", "action", "in", "self", ".", "argument_actions", ":", "\n", "                ", "if", "action", ".", "dest", "in", "initial_args", ":", "\n", "                    ", "action", ".", "required", "=", "False", "\n", "", "", "", "return", "super", "(", ")", ".", "parse_args", "(", "args", "=", "args", ",", "namespace", "=", "initial_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.StoreDeprecatedAction.__init__": [[87, 90], ["argparse.Action.__init__"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "option_strings", ",", "dest", ",", "deprecated_dest", ",", "nargs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "StoreDeprecatedAction", ",", "self", ")", ".", "__init__", "(", "option_strings", ",", "dest", ",", "**", "kwargs", ")", "\n", "self", ".", "deprecated_dest", "=", "deprecated_dest", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.StoreDeprecatedAction.__call__": [[91, 94], ["setattr", "setattr"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "parser", ",", "namespace", ",", "value", ",", "option_string", "=", "None", ")", ":", "\n", "        ", "setattr", "(", "namespace", ",", "self", ".", "dest", ",", "value", ")", "\n", "setattr", "(", "namespace", ",", "self", ".", "deprecated_dest", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.save_args": [[96, 99], ["open", "yaml.safe_dump"], "function", ["None"], ["", "", "def", "save_args", "(", "args", ":", "argparse", ".", "Namespace", ",", "fname", ":", "str", ")", ":", "\n", "    ", "with", "open", "(", "fname", ",", "'w'", ")", "as", "out", ":", "\n", "        ", "yaml", ".", "safe_dump", "(", "args", ".", "__dict__", ",", "out", ",", "default_flow_style", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.load_args": [[101, 104], ["open", "argparse.Namespace", "yaml.safe_load"], "function", ["None"], ["", "", "def", "load_args", "(", "fname", ":", "str", ")", "->", "argparse", ".", "Namespace", ":", "\n", "    ", "with", "open", "(", "fname", ",", "'r'", ")", "as", "inp", ":", "\n", "        ", "return", "argparse", ".", "Namespace", "(", "**", "yaml", ".", "safe_load", "(", "inp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.regular_file": [[106, 121], ["str", "os.path.isfile", "argparse.ArgumentTypeError"], "function", ["None"], ["", "", "def", "regular_file", "(", ")", "->", "Callable", ":", "\n", "    ", "\"\"\"\n    Returns a method that can be used in argument parsing to check the argument is a regular file or a symbolic link,\n    but not, e.g., a process substitution.\n\n    :return: A method that can be used as a type in argparse.\n    \"\"\"", "\n", "\n", "def", "check_regular_file", "(", "value_to_check", ")", ":", "\n", "        ", "value_to_check", "=", "str", "(", "value_to_check", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "value_to_check", ")", ":", "\n", "            ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"must exist and be a regular file.\"", ")", "\n", "", "return", "value_to_check", "\n", "\n", "", "return", "check_regular_file", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.regular_folder": [[123, 137], ["str", "os.path.isdir", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "regular_folder", "(", ")", "->", "Callable", ":", "\n", "    ", "\"\"\"\n    Returns a method that can be used in argument parsing to check the argument is a directory.\n\n    :return: A method that can be used as a type in argparse.\n    \"\"\"", "\n", "\n", "def", "check_regular_directory", "(", "value_to_check", ")", ":", "\n", "        ", "value_to_check", "=", "str", "(", "value_to_check", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "value_to_check", ")", ":", "\n", "            ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"must be a directory.\"", ")", "\n", "", "return", "value_to_check", "\n", "\n", "", "return", "check_regular_directory", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal": [[139, 154], ["int", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "int_greater_or_equal", "(", "threshold", ":", "int", ")", "->", "Callable", ":", "\n", "    ", "\"\"\"\n    Returns a method that can be used in argument parsing to check that the int argument is greater or equal to `threshold`.\n\n    :param threshold: The threshold that we assume the cli argument value is greater or equal to.\n    :return: A method that can be used as a type in argparse.\n    \"\"\"", "\n", "\n", "def", "check_greater_equal", "(", "value", ":", "str", ")", ":", "\n", "        ", "value_to_check", "=", "int", "(", "value", ")", "\n", "if", "value_to_check", "<", "threshold", ":", "\n", "            ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"must be greater or equal to %d.\"", "%", "threshold", ")", "\n", "", "return", "value_to_check", "\n", "\n", "", "return", "check_greater_equal", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.float_greater_or_equal": [[156, 171], ["float", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "float_greater_or_equal", "(", "threshold", ":", "float", ")", "->", "Callable", ":", "\n", "    ", "\"\"\"\n    Returns a method that can be used in argument parsing to check that the float argument is greater or equal to `threshold`.\n\n    :param threshold: The threshold that we assume the cli argument value is greater or equal to.\n    :return: A method that can be used as a type in argparse.\n    \"\"\"", "\n", "\n", "def", "check_greater_equal", "(", "value", ":", "str", ")", ":", "\n", "        ", "value_to_check", "=", "float", "(", "value", ")", "\n", "if", "value_to_check", "<", "threshold", ":", "\n", "            ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"must be greater or equal to %f.\"", "%", "threshold", ")", "\n", "", "return", "value_to_check", "\n", "\n", "", "return", "check_greater_equal", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.bool_str": [[173, 191], ["value.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "bool_str", "(", ")", "->", "Callable", ":", "\n", "    ", "\"\"\"\n    Returns a method that can be used in argument parsing to check that the argument is a valid representation of\n    a boolean value.\n\n    :return: A method that can be used as a type in argparse.\n    \"\"\"", "\n", "def", "parse", "(", "value", ":", "str", ")", ":", "\n", "        ", "lower_value", "=", "value", ".", "lower", "(", ")", "\n", "if", "lower_value", "in", "[", "\"true\"", ",", "\"yes\"", ",", "\"1\"", "]", ":", "\n", "            ", "return", "True", "\n", "", "elif", "lower_value", "in", "[", "\"false\"", ",", "\"no\"", ",", "\"0\"", "]", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\n", "\"Invalid value for bool argument. Use true/false, yes/no or 1/0.\"", ")", "\n", "\n", "", "", "return", "parse", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.simple_dict": [[193, 224], ["dict", "int", "dict_str.split", "value.lower", "value.lower", "float", "entry.split", "_parse"], "function", ["None"], ["", "def", "simple_dict", "(", ")", "->", "Callable", ":", "\n", "    ", "\"\"\"\n    A simple dictionary format that does not require spaces or quoting.\n\n    Supported types: bool, int, float\n\n    :return: A method that can be used as a type in argparse.\n    \"\"\"", "\n", "\n", "def", "parse", "(", "dict_str", ":", "str", ")", ":", "\n", "\n", "        ", "def", "_parse", "(", "value", ":", "str", ")", ":", "\n", "            ", "if", "value", ".", "lower", "(", ")", "==", "\"true\"", ":", "\n", "                ", "return", "True", "\n", "", "if", "value", ".", "lower", "(", ")", "==", "\"false\"", ":", "\n", "                ", "return", "False", "\n", "", "if", "\".\"", "in", "value", "or", "\"e\"", "in", "value", ":", "\n", "                ", "return", "float", "(", "value", ")", "\n", "", "return", "int", "(", "value", ")", "\n", "\n", "", "_dict", "=", "dict", "(", ")", "\n", "try", ":", "\n", "            ", "for", "entry", "in", "dict_str", ".", "split", "(", "\",\"", ")", ":", "\n", "                ", "key", ",", "value", "=", "entry", ".", "split", "(", "\":\"", ")", "\n", "_dict", "[", "key", "]", "=", "_parse", "(", "value", ")", "\n", "", "", "except", "ValueError", ":", "\n", "            ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Specify argument dictionary as key1:value1,key2:value2,...\"", "\n", "\" Supported types: bool, int, float.\"", ")", "\n", "", "return", "_dict", "\n", "\n", "", "return", "parse", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values": [[226, 254], ["tuple", "tuple", "any", "argparse.ArgumentTypeError", "map", "argparse.ArgumentTypeError", "value_to_check.count", "value_to_check.split", "data_type"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.map", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.count"], ["", "def", "multiple_values", "(", "num_values", ":", "int", "=", "0", ",", "\n", "greater_or_equal", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "data_type", ":", "Callable", "=", "int", ")", "->", "Callable", ":", "\n", "    ", "\"\"\"\n    Returns a method to be used in argument parsing to parse a string of the form \"<val>:<val>[:<val>...]\" into\n    a tuple of values of type data_type.\n\n    :param num_values: Optional number of ints required.\n    :param greater_or_equal: Optional constraint that all values should be greater or equal to this value.\n    :param data_type: Type of values. Default: int.\n    :return: Method for parsing.\n    \"\"\"", "\n", "\n", "def", "parse", "(", "value_to_check", ")", ":", "\n", "        ", "if", "':'", "in", "value_to_check", ":", "\n", "            ", "expected_num_separators", "=", "num_values", "-", "1", "if", "num_values", "else", "0", "\n", "if", "expected_num_separators", ">", "0", "and", "(", "value_to_check", ".", "count", "(", "':'", ")", "!=", "expected_num_separators", ")", ":", "\n", "                ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Expected either a single value or %d values separated by %s\"", "%", "\n", "(", "num_values", ",", "C", ".", "ARG_SEPARATOR", ")", ")", "\n", "", "values", "=", "tuple", "(", "map", "(", "data_type", ",", "value_to_check", ".", "split", "(", "C", ".", "ARG_SEPARATOR", ",", "num_values", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "values", "=", "tuple", "(", "[", "data_type", "(", "value_to_check", ")", "]", "*", "num_values", ")", "\n", "", "if", "greater_or_equal", "is", "not", "None", ":", "\n", "            ", "if", "any", "(", "(", "value", "<", "greater_or_equal", "for", "value", "in", "values", ")", ")", ":", "\n", "                ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Must provide value greater or equal to %d\"", "%", "greater_or_equal", ")", "\n", "", "", "return", "values", "\n", "\n", "", "return", "parse", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.file_or_stdin": [[256, 268], ["sockeye.utils.smart_open"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open"], ["", "def", "file_or_stdin", "(", ")", "->", "Callable", ":", "\n", "    ", "\"\"\"\n    Returns a file descriptor from stdin or opening a file from a given path.\n    \"\"\"", "\n", "\n", "def", "parse", "(", "path", ")", ":", "\n", "        ", "if", "path", "is", "None", "or", "path", "==", "\"-\"", ":", "\n", "            ", "return", "sys", ".", "stdin", "\n", "", "else", ":", "\n", "            ", "return", "smart_open", "(", "path", ")", "\n", "\n", "", "", "return", "parse", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_average_args": [[270, 296], ["params.add_argument_group", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.add_argument_group"], ["", "def", "add_average_args", "(", "params", ")", ":", "\n", "    ", "average_params", "=", "params", ".", "add_argument_group", "(", "\"Averaging\"", ")", "\n", "average_params", ".", "add_argument", "(", "\n", "\"inputs\"", ",", "\n", "metavar", "=", "\"INPUT\"", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "\"either a single model directory (automatic checkpoint selection) \"", "\n", "\"or multiple .params files (manual checkpoint selection)\"", ")", "\n", "average_params", ".", "add_argument", "(", "\n", "\"--metric\"", ",", "\n", "help", "=", "\"Name of the metric to choose n-best checkpoints from. Default: %(default)s.\"", ",", "\n", "default", "=", "C", ".", "PERPLEXITY", ",", "\n", "choices", "=", "C", ".", "METRICS", ")", "\n", "average_params", ".", "add_argument", "(", "\n", "\"-n\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4", ",", "\n", "help", "=", "\"number of checkpoints to find. Default: %(default)s.\"", ")", "\n", "average_params", ".", "add_argument", "(", "\n", "\"--output\"", ",", "\"-o\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"File to write averaged parameters to.\"", ")", "\n", "average_params", ".", "add_argument", "(", "\n", "\"--strategy\"", ",", "\n", "choices", "=", "C", ".", "AVERAGE_CHOICES", ",", "\n", "default", "=", "C", ".", "AVERAGE_BEST", ",", "\n", "help", "=", "\"selection method. Default: %(default)s.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_rerank_args": [[298, 339], ["params.add_argument_group", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "arguments.float_greater_or_equal"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.add_argument_group", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.float_greater_or_equal"], ["", "def", "add_rerank_args", "(", "params", ")", ":", "\n", "    ", "rerank_params", "=", "params", ".", "add_argument_group", "(", "\"Reranking\"", ")", "\n", "rerank_params", ".", "add_argument", "(", "\"--reference\"", ",", "\"-r\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"File where target reference translations are stored.\"", ")", "\n", "rerank_params", ".", "add_argument", "(", "\"--hypotheses\"", ",", "\"-hy\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"File with nbest translations, one nbest list per line,\"", "\n", "\"in JSON format as returned by sockeye.translate with --nbest-size x.\"", ")", "\n", "rerank_params", ".", "add_argument", "(", "\"--metric\"", ",", "\"-m\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "default", "=", "C", ".", "RERANK_BLEU", ",", "\n", "choices", "=", "C", ".", "RERANK_METRICS", ",", "\n", "help", "=", "\"Sentence-level metric used to compare each nbest translation to the reference or \"", "\n", "\"the source.\"", "\n", "\"Default: %(default)s.\"", ")", "\n", "rerank_params", ".", "add_argument", "(", "\"--isometric-alpha\"", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "float_greater_or_equal", "(", "0.0", ")", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "\"Alpha factor used for reranking (--isometric-[ratio/diff]) nbest list. \"", "\n", "\"Requires optimization on dev set.\"", "\n", "\"Default: %(default)s.\"", ")", "\n", "rerank_params", ".", "add_argument", "(", "\"--output\"", ",", "\"-o\"", ",", "default", "=", "None", ",", "help", "=", "\"File to write output to. Default: STDOUT.\"", ")", "\n", "rerank_params", ".", "add_argument", "(", "\"--output-best\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Output only the best hypothesis from each nbest list.\"", ")", "\n", "rerank_params", ".", "add_argument", "(", "\"--output-best-non-blank\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"When outputting only the best hypothesis (--output-best) and the best hypothesis \"", "\n", "\"is a blank line, output following non-blank best from the nbest list.\"", ")", "\n", "rerank_params", ".", "add_argument", "(", "\"--output-reference-instead-of-blank\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"When outputting only the best hypothesis (--output-best) and the best hypothesis \"", "\n", "\"is a blank line, output the reference instead.\"", ")", "\n", "rerank_params", ".", "add_argument", "(", "\"--return-score\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Returns the reranking scores as scores in output JSON objects.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_lexicon_args": [[341, 348], ["params.add_argument_group", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.add_argument_group"], ["", "def", "add_lexicon_args", "(", "params", ",", "is_for_block_lexicon", ":", "bool", "=", "False", ")", ":", "\n", "    ", "lexicon_params", "=", "params", ".", "add_argument_group", "(", "\"Model & Top-k\"", ")", "\n", "lexicon_params", ".", "add_argument", "(", "\"--model\"", ",", "\"-m\"", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Model directory containing source and target vocabularies.\"", ")", "\n", "if", "not", "is_for_block_lexicon", ":", "\n", "        ", "lexicon_params", ".", "add_argument", "(", "\"-k\"", ",", "type", "=", "int", ",", "default", "=", "200", ",", "\n", "help", "=", "\"Number of target translations to keep per source. Default: %(default)s.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_lexicon_create_args": [[350, 359], ["params.add_argument_group", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.add_argument_group"], ["", "", "def", "add_lexicon_create_args", "(", "params", ",", "is_for_block_lexicon", ":", "bool", "=", "False", ")", ":", "\n", "    ", "lexicon_params", "=", "params", ".", "add_argument_group", "(", "\"I/O\"", ")", "\n", "if", "is_for_block_lexicon", ":", "\n", "        ", "input_help", "=", "\"A text file with tokens that shall be blocked. All token must be in the model vocabulary.\"", "\n", "", "else", ":", "\n", "        ", "input_help", "=", "\"Probabilistic lexicon (fast_align format) to build top-k lexicon from.\"", "\n", "", "lexicon_params", ".", "add_argument", "(", "\"--input\"", ",", "\"-i\"", ",", "required", "=", "True", ",", "\n", "help", "=", "input_help", ")", "\n", "lexicon_params", ".", "add_argument", "(", "\"--output\"", ",", "\"-o\"", ",", "required", "=", "True", ",", "help", "=", "\"File name to write top-k lexicon to.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_lexicon_inspect_args": [[361, 364], ["params.add_argument_group", "params.add_argument_group.add_argument"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.add_argument_group"], ["", "def", "add_lexicon_inspect_args", "(", "params", ")", ":", "\n", "    ", "lexicon_params", "=", "params", ".", "add_argument_group", "(", "\"Lexicon to inspect\"", ")", "\n", "lexicon_params", ".", "add_argument", "(", "\"--lexicon\"", ",", "\"-l\"", ",", "required", "=", "True", ",", "help", "=", "\"File name of top-k lexicon to inspect.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_logging_args": [[366, 389], ["params.add_argument_group", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.add_argument_group"], ["", "def", "add_logging_args", "(", "params", ")", ":", "\n", "    ", "logging_params", "=", "params", ".", "add_argument_group", "(", "\"Logging\"", ")", "\n", "logging_params", ".", "add_argument", "(", "'--quiet'", ",", "'-q'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "'Suppress console logging.'", ")", "\n", "logging_params", ".", "add_argument", "(", "'--quiet-secondary-workers'", ",", "'-qsw'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "'Suppress console logging for secondary workers in distributed training.'", ")", "\n", "logging_params", ".", "add_argument", "(", "'--no-logfile'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "'Suppress file logging'", ")", "\n", "log_levels", "=", "[", "'INFO'", ",", "'DEBUG'", ",", "'ERROR'", "]", "\n", "logging_params", ".", "add_argument", "(", "'--loglevel'", ",", "'--log-level'", ",", "\n", "default", "=", "'INFO'", ",", "\n", "choices", "=", "log_levels", ",", "\n", "help", "=", "'Log level. Default: %(default)s.'", ")", "\n", "logging_params", ".", "add_argument", "(", "'--loglevel-secondary-workers'", ",", "\n", "default", "=", "'INFO'", ",", "\n", "choices", "=", "log_levels", ",", "\n", "help", "=", "'Console log level for secondary workers. Default: %(default)s.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_training_data_args": [[391, 426], ["params.add_argument", "params.add_argument", "params.add_argument", "params.add_argument", "params.add_argument", "params.add_argument", "arguments.regular_file", "arguments.regular_file", "arguments.bool_str", "arguments.regular_file", "arguments.bool_str", "arguments.regular_file"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.regular_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.regular_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.bool_str", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.regular_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.bool_str", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.regular_file"], ["", "def", "add_training_data_args", "(", "params", ",", "required", "=", "False", ")", ":", "\n", "    ", "params", ".", "add_argument", "(", "C", ".", "TRAINING_ARG_SOURCE", ",", "'-s'", ",", "\n", "required", "=", "required", ",", "\n", "type", "=", "regular_file", "(", ")", ",", "\n", "help", "=", "'Source side of parallel training data.'", ")", "\n", "params", ".", "add_argument", "(", "'--source-factors'", ",", "'-sf'", ",", "\n", "required", "=", "False", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "regular_file", "(", ")", ",", "\n", "default", "=", "[", "]", ",", "\n", "help", "=", "'File(s) containing additional token-parallel source-side factors. Default: %(default)s.'", ")", "\n", "params", ".", "add_argument", "(", "'--source-factors-use-source-vocab'", ",", "\n", "required", "=", "False", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "bool_str", "(", ")", ",", "\n", "default", "=", "[", "]", ",", "\n", "help", "=", "'List of bools signaling whether to use the source vocabulary for the source factors. '", "\n", "'If empty (default) each factor has its own vocabulary.'", ")", "\n", "params", ".", "add_argument", "(", "'--target-factors'", ",", "'-tf'", ",", "\n", "required", "=", "False", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "regular_file", "(", ")", ",", "\n", "default", "=", "[", "]", ",", "\n", "help", "=", "'File(s) containing additional token-parallel target-side factors. Default: %(default)s.'", ")", "\n", "params", ".", "add_argument", "(", "'--target-factors-use-target-vocab'", ",", "\n", "required", "=", "False", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "bool_str", "(", ")", ",", "\n", "default", "=", "[", "]", ",", "\n", "help", "=", "'List of bools signaling whether to use the target vocabulary for the target factors. '", "\n", "'If empty (default) each factor has its own vocabulary.'", ")", "\n", "params", ".", "add_argument", "(", "C", ".", "TRAINING_ARG_TARGET", ",", "'-t'", ",", "\n", "required", "=", "required", ",", "\n", "type", "=", "regular_file", "(", ")", ",", "\n", "help", "=", "'Target side of parallel training data.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_validation_data_params": [[428, 450], ["params.add_argument", "params.add_argument", "params.add_argument", "params.add_argument", "arguments.regular_file", "arguments.regular_file", "arguments.regular_file", "arguments.regular_file"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.regular_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.regular_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.regular_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.regular_file"], ["", "def", "add_validation_data_params", "(", "params", ")", ":", "\n", "    ", "params", ".", "add_argument", "(", "'--validation-source'", ",", "'-vs'", ",", "\n", "required", "=", "True", ",", "\n", "type", "=", "regular_file", "(", ")", ",", "\n", "help", "=", "'Source side of validation data.'", ")", "\n", "params", ".", "add_argument", "(", "'--validation-source-factors'", ",", "'-vsf'", ",", "\n", "required", "=", "False", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "regular_file", "(", ")", ",", "\n", "default", "=", "[", "]", ",", "\n", "help", "=", "'File(s) containing additional token-parallel validation source side factors. '", "\n", "'Default: %(default)s.'", ")", "\n", "params", ".", "add_argument", "(", "'--validation-target'", ",", "'-vt'", ",", "\n", "required", "=", "True", ",", "\n", "type", "=", "regular_file", "(", ")", ",", "\n", "help", "=", "'Target side of validation data.'", ")", "\n", "params", ".", "add_argument", "(", "'--validation-target-factors'", ",", "'-vtf'", ",", "\n", "required", "=", "False", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "regular_file", "(", ")", ",", "\n", "default", "=", "[", "]", ",", "\n", "help", "=", "'File(s) containing additional token-parallel validation target side factors. '", "\n", "'Default: %(default)s.'", ")", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_prepared_data_args": [[453, 457], ["params.add_argument", "arguments.regular_folder"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.regular_folder"], ["", "def", "add_prepared_data_args", "(", "params", ")", ":", "\n", "    ", "params", ".", "add_argument", "(", "C", ".", "TRAINING_ARG_PREPARED_DATA", ",", "'-d'", ",", "\n", "type", "=", "regular_folder", "(", ")", ",", "\n", "help", "=", "'Prepared training data directory created through python -m sockeye.prepare_data.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_training_output_args": [[459, 466], ["params.add_argument", "params.add_argument"], "function", ["None"], ["", "def", "add_training_output_args", "(", "params", ")", ":", "\n", "    ", "params", ".", "add_argument", "(", "'--output'", ",", "'-o'", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "'Folder where model & training results are written to.'", ")", "\n", "params", ".", "add_argument", "(", "'--overwrite-output'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Delete all contents of the model directory if it already exists.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_training_io_args": [[468, 479], ["params.add_argument_group.add_argument_group", "arguments.add_training_data_args", "arguments.add_prepared_data_args", "arguments.add_validation_data_params", "arguments.add_bucketing_args", "arguments.add_vocab_args", "arguments.add_training_output_args"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.add_argument_group", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_training_data_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_prepared_data_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_validation_data_params", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_bucketing_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_vocab_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_training_output_args"], ["", "def", "add_training_io_args", "(", "params", ")", ":", "\n", "    ", "params", "=", "params", ".", "add_argument_group", "(", "\"Data & I/O\"", ")", "\n", "\n", "# Unfortunately we must set --source/--target to not required as we either accept these parameters", "\n", "# or --prepared-data which can not easily be encoded in argparse.", "\n", "add_training_data_args", "(", "params", ",", "required", "=", "False", ")", "\n", "add_prepared_data_args", "(", "params", ")", "\n", "add_validation_data_params", "(", "params", ")", "\n", "add_bucketing_args", "(", "params", ")", "\n", "add_vocab_args", "(", "params", ")", "\n", "add_training_output_args", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_bucketing_args": [[481, 500], ["params.add_argument", "params.add_argument", "params.add_argument", "params.add_argument", "arguments.int_greater_or_equal", "arguments.multiple_values"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values"], ["", "def", "add_bucketing_args", "(", "params", ")", ":", "\n", "    ", "params", ".", "add_argument", "(", "'--no-bucketing'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Disable bucketing: always unroll the graph to --max-seq-len. Default: %(default)s.'", ")", "\n", "\n", "params", ".", "add_argument", "(", "'--bucket-width'", ",", "\n", "type", "=", "int_greater_or_equal", "(", "1", ")", ",", "\n", "default", "=", "8", ",", "\n", "help", "=", "'Width of buckets in tokens. Default: %(default)s.'", ")", "\n", "\n", "params", ".", "add_argument", "(", "'--bucket-scaling'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Scale source/target buckets based on length ratio to reduce padding. Default: '", "\n", "'%(default)s.'", ")", "\n", "\n", "params", ".", "add_argument", "(", "C", ".", "TRAINING_ARG_MAX_SEQ_LEN", ",", "\n", "type", "=", "multiple_values", "(", "num_values", "=", "2", ",", "greater_or_equal", "=", "1", ")", ",", "\n", "default", "=", "(", "95", ",", "95", ")", ",", "\n", "help", "=", "'Maximum sequence length in tokens, not counting BOS/EOS tokens (internal max sequence '", "\n", "'length is X+1). Use \"x:x\" to specify separate values for src&tgt. Default: %(default)s.'", ")", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_process_pool_args": [[503, 508], ["params.add_argument", "arguments.int_greater_or_equal"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal"], ["", "def", "add_process_pool_args", "(", "params", ")", ":", "\n", "    ", "params", ".", "add_argument", "(", "'--max-processes'", ",", "\n", "type", "=", "int_greater_or_equal", "(", "1", ")", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'Process the shards in parallel using max-processes processes.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_prepare_data_cli_args": [[510, 537], ["arguments.add_training_data_args", "arguments.add_vocab_args", "arguments.add_bucketing_args", "params.add_argument", "params.add_argument", "params.add_argument", "params.add_argument", "arguments.add_logging_args", "arguments.add_process_pool_args", "arguments.int_greater_or_equal", "arguments.int_greater_or_equal"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_training_data_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_vocab_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_bucketing_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_logging_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_process_pool_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal"], ["", "def", "add_prepare_data_cli_args", "(", "params", ")", ":", "\n", "    ", "add_training_data_args", "(", "params", ",", "required", "=", "True", ")", "\n", "add_vocab_args", "(", "params", ")", "\n", "add_bucketing_args", "(", "params", ")", "\n", "\n", "params", ".", "add_argument", "(", "'--num-samples-per-shard'", ",", "\n", "type", "=", "int_greater_or_equal", "(", "1", ")", ",", "\n", "default", "=", "10000000", ",", "\n", "help", "=", "'The approximate number of samples per shard. Default: %(default)s.'", ")", "\n", "\n", "params", ".", "add_argument", "(", "'--min-num-shards'", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int_greater_or_equal", "(", "1", ")", ",", "\n", "help", "=", "'The minimum number of shards to use, even if they would not '", "\n", "'reach the desired number of samples per shard. Default: %(default)s.'", ")", "\n", "\n", "params", ".", "add_argument", "(", "'--seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "13", ",", "\n", "help", "=", "'Random seed used that makes shard assignments deterministic. Default: %(default)s.'", ")", "\n", "\n", "params", ".", "add_argument", "(", "'--output'", ",", "'-o'", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "'Folder where the prepared and possibly sharded data is written to.'", ")", "\n", "\n", "add_logging_args", "(", "params", ")", "\n", "add_process_pool_args", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_device_args": [[539, 552], ["params.add_argument_group", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "arguments.int_greater_or_equal"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.add_argument_group", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal"], ["", "def", "add_device_args", "(", "params", ")", ":", "\n", "    ", "device_params", "=", "params", ".", "add_argument_group", "(", "\"Device parameters\"", ")", "\n", "\n", "device_params", ".", "add_argument", "(", "'--device-id'", ",", "\n", "type", "=", "int_greater_or_equal", "(", "0", ")", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "'GPU to use. 0 translates to \"cuda:0\", etc. When running in distributed mode '", "\n", "'(--dist), each process\\'s device is set automatically. Default: %(default)s.'", ")", "\n", "device_params", ".", "add_argument", "(", "'--use-cpu'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use CPU device instead of GPU.'", ")", "\n", "device_params", ".", "add_argument", "(", "'--env'", ",", "\n", "help", "=", "'List of environment variables to be set before importing PyTorch. Separated by '", "\n", "'\",\", e.g. --env=OMP_NUM_THREADS=1,PYTORCH_JIT=0 etc.'", ")", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_vocab_args": [[555, 596], ["params.add_argument", "params.add_argument", "params.add_argument", "params.add_argument", "params.add_argument", "params.add_argument", "params.add_argument", "params.add_argument", "arguments.regular_file", "arguments.regular_file", "arguments.multiple_values", "arguments.multiple_values"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.regular_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.regular_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values"], ["", "def", "add_vocab_args", "(", "params", ")", ":", "\n", "    ", "params", ".", "add_argument", "(", "'--source-vocab'", ",", "\n", "required", "=", "False", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Existing source vocabulary (JSON).'", ")", "\n", "params", ".", "add_argument", "(", "'--target-vocab'", ",", "\n", "required", "=", "False", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Existing target vocabulary (JSON).'", ")", "\n", "params", ".", "add_argument", "(", "'--source-factor-vocabs'", ",", "\n", "required", "=", "False", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "regular_file", "(", ")", ",", "\n", "default", "=", "[", "]", ",", "\n", "help", "=", "'Existing source factor vocabulary (-ies) (JSON).'", ")", "\n", "params", ".", "add_argument", "(", "'--target-factor-vocabs'", ",", "\n", "required", "=", "False", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "regular_file", "(", ")", ",", "\n", "default", "=", "[", "]", ",", "\n", "help", "=", "'Existing target factor vocabulary (-ies) (JSON).'", ")", "\n", "params", ".", "add_argument", "(", "C", ".", "VOCAB_ARG_SHARED_VOCAB", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'Share source and target vocabulary. '", "\n", "'Will be automatically turned on when using weight tying. Default: %(default)s.'", ")", "\n", "params", ".", "add_argument", "(", "'--num-words'", ",", "\n", "type", "=", "multiple_values", "(", "num_values", "=", "2", ",", "greater_or_equal", "=", "0", ")", ",", "\n", "default", "=", "(", "0", ",", "0", ")", ",", "\n", "help", "=", "'Maximum vocabulary size. Use \"x:x\" to specify separate values for src&tgt. '", "\n", "'A value of 0 indicates that the vocabulary unrestricted and determined from the data by '", "\n", "'creating an entry for all words that occur at least --word-min-count times.'", "\n", "'Default: %(default)s.'", ")", "\n", "params", ".", "add_argument", "(", "'--word-min-count'", ",", "\n", "type", "=", "multiple_values", "(", "num_values", "=", "2", ",", "greater_or_equal", "=", "1", ")", ",", "\n", "default", "=", "(", "1", ",", "1", ")", ",", "\n", "help", "=", "'Minimum frequency of words to be included in vocabularies. Default: %(default)s.'", ")", "\n", "params", ".", "add_argument", "(", "'--pad-vocab-to-multiple-of'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "8", ",", "\n", "help", "=", "'Pad vocabulary to a multiple of this integer. Default: %(default)s.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_model_parameters": [[598, 775], ["params.add_argument_group", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "arguments.multiple_values", "arguments.multiple_values", "arguments.multiple_values", "arguments.multiple_values", "arguments.multiple_values", "arguments.multiple_values", "arguments.multiple_values", "arguments.multiple_values", "arguments.bool_str", "arguments.bool_str"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.add_argument_group", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.bool_str", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.bool_str"], ["", "def", "add_model_parameters", "(", "params", ")", ":", "\n", "    ", "model_params", "=", "params", ".", "add_argument_group", "(", "\"ModelConfig\"", ")", "\n", "\n", "model_params", ".", "add_argument", "(", "'--params'", ",", "'-p'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Initialize model parameters from file. Overrides random initializations.'", ")", "\n", "model_params", ".", "add_argument", "(", "'--allow-missing-params'", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Allow missing parameters when initializing model parameters from file. \"", "\n", "\"Default: %(default)s.\"", ")", "\n", "model_params", ".", "add_argument", "(", "'--ignore-extra-params'", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Allow extra parameters when initializing model parameters from file. \"", "\n", "\"Default: %(default)s.\"", ")", "\n", "\n", "model_params", ".", "add_argument", "(", "'--encoder'", ",", "\n", "choices", "=", "C", ".", "ENCODERS", ",", "\n", "default", "=", "C", ".", "TRANSFORMER_TYPE", ",", "\n", "help", "=", "\"Type of encoder. Default: %(default)s.\"", ")", "\n", "model_params", ".", "add_argument", "(", "'--decoder'", ",", "\n", "choices", "=", "C", ".", "DECODERS", ",", "\n", "default", "=", "C", ".", "TRANSFORMER_TYPE", ",", "\n", "help", "=", "\"Type of decoder. Default: %(default)s. \"", "\n", "\"'ssru_transformer' uses Simpler Simple Recurrent Units (Kim et al, 2019) \"", "\n", "\"as replacement for self-attention layers.\"", ")", "\n", "\n", "model_params", ".", "add_argument", "(", "'--num-layers'", ",", "\n", "type", "=", "multiple_values", "(", "num_values", "=", "2", ",", "greater_or_equal", "=", "1", ")", ",", "\n", "default", "=", "(", "6", ",", "6", ")", ",", "\n", "help", "=", "'Number of layers for encoder & decoder. '", "\n", "'Use \"x:x\" to specify separate values for encoder & decoder. Default: %(default)s.'", ")", "\n", "\n", "# transformer arguments", "\n", "model_params", ".", "add_argument", "(", "'--transformer-model-size'", ",", "\n", "type", "=", "multiple_values", "(", "num_values", "=", "2", ",", "greater_or_equal", "=", "1", ")", ",", "\n", "default", "=", "(", "512", ",", "512", ")", ",", "\n", "help", "=", "'Number of hidden units in transformer layers. '", "\n", "'Use \"x:x\" to specify separate values for encoder & decoder. Default: %(default)s.'", ")", "\n", "model_params", ".", "add_argument", "(", "'--transformer-attention-heads'", ",", "\n", "type", "=", "multiple_values", "(", "num_values", "=", "2", ",", "greater_or_equal", "=", "1", ")", ",", "\n", "default", "=", "(", "8", ",", "8", ")", ",", "\n", "help", "=", "'Number of heads for all self-attention when using transformer layers. '", "\n", "'Use \"x:x\" to specify separate values for encoder & decoder. Default: %(default)s.'", ")", "\n", "model_params", ".", "add_argument", "(", "'--transformer-feed-forward-num-hidden'", ",", "\n", "type", "=", "multiple_values", "(", "num_values", "=", "2", ",", "greater_or_equal", "=", "1", ")", ",", "\n", "default", "=", "(", "2048", ",", "2048", ")", ",", "\n", "help", "=", "'Number of hidden units in transformers feed forward layers. '", "\n", "'Use \"x:x\" to specify separate values for encoder & decoder. Default: %(default)s.'", ")", "\n", "model_params", ".", "add_argument", "(", "'--transformer-feed-forward-use-glu'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'Use Gated Linear Units in transformer feed forward networks (Daupin et al. 2016, '", "\n", "'arxiv.org/abs/1612.08083; Shazeer 2020, arxiv.org/abs/2002.05202). Default: '", "\n", "'%(default)s.'", ")", "\n", "model_params", ".", "add_argument", "(", "'--transformer-activation-type'", ",", "\n", "type", "=", "multiple_values", "(", "num_values", "=", "2", ",", "greater_or_equal", "=", "None", ",", "data_type", "=", "str", ")", ",", "\n", "default", "=", "(", "C", ".", "RELU", ",", "C", ".", "RELU", ")", ",", "\n", "help", "=", "'Type of activation to use for each feed forward layer. Use \"x:x\" to specify '", "\n", "'different values for encoder & decoder. Supported: {}. Default: '", "\n", "'%(default)s.'", ".", "format", "(", "' '", ".", "join", "(", "C", ".", "TRANSFORMER_ACTIVATION_TYPES", ")", ")", ")", "\n", "model_params", ".", "add_argument", "(", "'--transformer-positional-embedding-type'", ",", "\n", "choices", "=", "C", ".", "POSITIONAL_EMBEDDING_TYPES", ",", "\n", "default", "=", "C", ".", "FIXED_POSITIONAL_EMBEDDING", ",", "\n", "help", "=", "'The type of positional embedding. Default: %(default)s.'", ")", "\n", "model_params", ".", "add_argument", "(", "'--transformer-preprocess'", ",", "\n", "type", "=", "multiple_values", "(", "num_values", "=", "2", ",", "greater_or_equal", "=", "None", ",", "data_type", "=", "str", ")", ",", "\n", "default", "=", "(", "'n'", ",", "'n'", ")", ",", "\n", "help", "=", "'Transformer preprocess sequence for encoder and decoder. Supports three types of '", "\n", "'operations: d=dropout, r=residual connection, n=layer normalization. You can '", "\n", "'combine in any order, for example: \"ndr\". '", "\n", "'Leave empty to not use any of these operations. '", "\n", "'You can specify separate sequences for encoder and decoder by separating with \":\" '", "\n", "'For example: n:drn '", "\n", "'Default: %(default)s.'", ")", "\n", "model_params", ".", "add_argument", "(", "'--transformer-postprocess'", ",", "\n", "type", "=", "multiple_values", "(", "num_values", "=", "2", ",", "greater_or_equal", "=", "None", ",", "data_type", "=", "str", ")", ",", "\n", "default", "=", "(", "'dr'", ",", "'dr'", ")", ",", "\n", "help", "=", "'Transformer postprocess sequence for encoder and decoder. Supports three types of '", "\n", "'operations: d=dropout, r=residual connection, n=layer normalization. You can '", "\n", "'combine in any order, for example: \"ndr\". '", "\n", "'Leave empty to not use any of these operations. '", "\n", "'You can specify separate sequences for encoder and decoder by separating with \":\" '", "\n", "'For example: n:drn '", "\n", "'Default: %(default)s.'", ")", "\n", "\n", "model_params", ".", "add_argument", "(", "'--lhuc'", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "None", ",", "\n", "choices", "=", "C", ".", "LHUC_CHOICES", ",", "\n", "metavar", "=", "\"COMPONENT\"", ",", "\n", "help", "=", "\"Use LHUC (Vilar 2018). Include an amplitude parameter to hidden units for\"", "\n", "\" domain adaptation. Needs a pre-trained model. Valid values: {values}.\"", "\n", "\" Default: %(default)s.\"", ".", "format", "(", "\n", "values", "=", "\", \"", ".", "join", "(", "C", ".", "LHUC_CHOICES", ")", ")", ")", "\n", "\n", "# embedding arguments", "\n", "model_params", ".", "add_argument", "(", "'--num-embed'", ",", "\n", "type", "=", "multiple_values", "(", "num_values", "=", "2", ",", "greater_or_equal", "=", "1", ")", ",", "\n", "default", "=", "(", "None", ",", "None", ")", ",", "\n", "help", "=", "'Embedding size for source and target tokens. '", "\n", "'Use \"x:x\" to specify separate values for src&tgt. Default: %d.'", "%", "C", ".", "DEFAULT_NUM_EMBED", ")", "\n", "model_params", ".", "add_argument", "(", "'--source-factors-num-embed'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "]", ",", "\n", "help", "=", "'Embedding size for additional source factors. '", "\n", "'You must provide as many dimensions as '", "\n", "'(validation) source factor files. Default: %(default)s.'", ")", "\n", "model_params", ".", "add_argument", "(", "'--target-factors-num-embed'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "]", ",", "\n", "help", "=", "'Embedding size for additional target factors. '", "\n", "'You must provide as many dimensions as '", "\n", "'(validation) target factor files. Default: %(default)s.'", ")", "\n", "model_params", ".", "add_argument", "(", "'--source-factors-combine'", ",", "'-sfc'", ",", "\n", "choices", "=", "C", ".", "FACTORS_COMBINE_CHOICES", ",", "\n", "default", "=", "[", "C", ".", "FACTORS_COMBINE_SUM", "]", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'How to combine source factors. Can be either one value which will be applied to '", "\n", "'all source factors, or a list of values. Default: %(default)s.'", ")", "\n", "model_params", ".", "add_argument", "(", "'--target-factors-combine'", ",", "'-tfc'", ",", "\n", "choices", "=", "C", ".", "FACTORS_COMBINE_CHOICES", ",", "\n", "default", "=", "[", "C", ".", "FACTORS_COMBINE_SUM", "]", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'How to combine target factors. Can be either one value which will be applied to '", "\n", "'all target factors, or a list of values. Default: %(default)s.'", ")", "\n", "model_params", ".", "add_argument", "(", "'--source-factors-share-embedding'", ",", "\n", "type", "=", "bool_str", "(", ")", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "False", "]", ",", "\n", "help", "=", "'Share the embeddings with the source language. '", "\n", "'Can be either one value which will be applied '", "\n", "'to all source factors, or a list of values. Default: %(default)s.'", ")", "\n", "model_params", ".", "add_argument", "(", "'--target-factors-share-embedding'", ",", "\n", "type", "=", "bool_str", "(", ")", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "False", "]", ",", "\n", "help", "=", "'Share the embeddings with the target language. '", "\n", "'Can be either one value which will be applied '", "\n", "'to all target factors, or a list of values. Default: %(default)s.'", ")", "\n", "\n", "model_params", ".", "add_argument", "(", "'--weight-tying-type'", ",", "\n", "default", "=", "C", ".", "WEIGHT_TYING_SRC_TRG_SOFTMAX", ",", "\n", "choices", "=", "C", ".", "WEIGHT_TYING_TYPES", ",", "\n", "help", "=", "'The type of weight tying. source embeddings=src, target embeddings=trg, '", "\n", "'target softmax weight matrix=softmax. Default: %(default)s.'", ")", "\n", "\n", "model_params", ".", "add_argument", "(", "'--dtype'", ",", "default", "=", "C", ".", "DTYPE_FP32", ",", "choices", "=", "[", "C", ".", "DTYPE_FP32", ",", "C", ".", "DTYPE_FP16", "]", ",", "\n", "help", "=", "\"Data type.\"", ")", "\n", "\n", "model_params", ".", "add_argument", "(", "'--amp'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use PyTorch automatic mixed precision (AMP) to run compatible operations in '", "\n", "'float16 mode instead of float32.'", ")", "\n", "model_params", ".", "add_argument", "(", "'--apex-amp'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use NVIDIA Apex automatic mixed precision (AMP) to run the entire model in float16 '", "\n", "'mode with float32 master weights and dynamic loss scaling. This is faster than '", "\n", "'PyTorch AMP with some additional risk and requires installing Apex: '", "\n", "'https://github.com/NVIDIA/apex'", ")", "\n", "\n", "model_params", ".", "add_argument", "(", "'--neural-vocab-selection'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "choices", "=", "C", ".", "NVS_TYPES", ",", "\n", "help", "=", "'When enabled the model contains a neural vocabulary selection model that restricts '", "\n", "'the target output vocabulary to speed up inference.'", "\n", "'logit_max: predictions are made per source token and combined by max pooling.'", "\n", "'eos: the prediction is based on the hidden representation of the <eos> token.'", ")", "\n", "\n", "model_params", ".", "add_argument", "(", "'--neural-vocab-selection-block-loss'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'When enabled, gradients for NVS are blocked from propagating back to the encoder. '", "\n", "'This means that NVS learns to work with the main model\\'s representations but '", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_batch_args": [[779, 804], ["params.add_argument", "params.add_argument", "params.add_argument", "params.add_argument", "arguments.int_greater_or_equal"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal"], ["", "def", "add_batch_args", "(", "params", ",", "default_batch_size", "=", "4096", ",", "default_batch_type", "=", "C", ".", "BATCH_TYPE_WORD", ")", ":", "\n", "    ", "params", ".", "add_argument", "(", "'--batch-size'", ",", "'-b'", ",", "\n", "type", "=", "int_greater_or_equal", "(", "1", ")", ",", "\n", "default", "=", "default_batch_size", ",", "\n", "help", "=", "'Mini-batch size per process. Depending on --batch-type, this either refers to words or '", "\n", "'sentences. The effective batch size (update size) is num_processes * batch_size * '", "\n", "'update_interval. Default: %(default)s.'", ")", "\n", "params", ".", "add_argument", "(", "'--batch-type'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "default_batch_type", ",", "\n", "choices", "=", "C", ".", "BATCH_TYPES", ",", "\n", "help", "=", "'sentence: each batch contains exactly X sentences. '", "\n", "'word: each batch contains approximately X target words. '", "\n", "'max-word: each batch contains at most X target words. '", "\n", "'Default: %(default)s.'", ")", "\n", "params", ".", "add_argument", "(", "'--batch-sentences-multiple-of'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "8", ",", "\n", "help", "=", "'For word and max-word batching, guarantee that each batch contains a multiple of X '", "\n", "'sentences. For word batching, round up or down to nearest multiple. For max-word '", "\n", "'batching, always round down. Default: %(default)s.'", ")", "\n", "params", ".", "add_argument", "(", "'--update-interval'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'Accumulate gradients over X batches for each model update. Set a value higher than 1 to '", "\n", "'simulate large batches (ex: batch_size 2560 with update_interval 4 gives effective batch '", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_nvs_train_parameters": [[808, 822], ["params.add_argument", "params.add_argument", "arguments.float_greater_or_equal", "arguments.float_greater_or_equal"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.float_greater_or_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.float_greater_or_equal"], ["", "def", "add_nvs_train_parameters", "(", "params", ")", ":", "\n", "    ", "params", ".", "add_argument", "(", "\n", "'--bow-task-weight'", ",", "\n", "type", "=", "float_greater_or_equal", "(", "0.0", ")", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\n", "'The weight of the auxiliary Bag-of-word (BOW) loss when --neural-vocab-selection is enabled. Default %(default)s.'", "\n", ")", "\n", "\n", "params", ".", "add_argument", "(", "\n", "'--bow-task-pos-weight'", ",", "\n", "type", "=", "float_greater_or_equal", "(", "0.0", ")", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "'The weight of the positive class (the set of words present on the target side) for the BOW loss '", "\n", "'when --neural-vocab-selection is set as x * num_negative_class / num_positive_class where x is the '", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_training_args": [[827, 1083], ["params.add_argument_group", "arguments.add_batch_args", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "arguments.add_nvs_train_parameters", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "arguments.float_greater_or_equal", "arguments.int_greater_or_equal", "arguments.int_greater_or_equal", "arguments.multiple_values", "arguments.multiple_values", "arguments.multiple_values", "arguments.multiple_values", "arguments.multiple_values", "arguments.float_greater_or_equal"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.add_argument_group", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_batch_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_nvs_train_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.float_greater_or_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.float_greater_or_equal"], ["", "def", "add_training_args", "(", "params", ")", ":", "\n", "    ", "train_params", "=", "params", ".", "add_argument_group", "(", "\"Training parameters\"", ")", "\n", "\n", "add_batch_args", "(", "train_params", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--label-smoothing'", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'Smoothing constant for label smoothing. Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--label-smoothing-impl'", ",", "\n", "default", "=", "'mxnet'", ",", "\n", "choices", "=", "[", "'mxnet'", ",", "'fairseq'", ",", "'torch'", "]", ",", "\n", "help", "=", "'Choose label smoothing implementation. Default: %(default)s. '", "\n", "'`torch` requires PyTorch 1.10.'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--length-task'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "choices", "=", "[", "C", ".", "LENGTH_TASK_RATIO", ",", "C", ".", "LENGTH_TASK_LENGTH", "]", ",", "\n", "help", "=", "'If specified, adds an auxiliary task during training to predict source/target length ratios '", "\n", "'(mean squared error loss), or absolute lengths (Poisson) loss. Default %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--length-task-weight'", ",", "\n", "type", "=", "float_greater_or_equal", "(", "0.0", ")", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "'The weight of the auxiliary --length-task loss. Default %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--length-task-layers'", ",", "\n", "type", "=", "int_greater_or_equal", "(", "1", ")", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'Number of fully-connected layers for predicting the length ratio. Default %(default)s.'", ")", "\n", "\n", "add_nvs_train_parameters", "(", "train_params", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--target-factors-weight'", ",", "\n", "type", "=", "float", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "1.0", "]", ",", "\n", "help", "=", "'Weights of target factor losses. If one value is given, it applies to all '", "\n", "'secondary target factors. For multiple values, the number of weights given has '", "\n", "'to match the number of target factors. Default: %(default)s.'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--optimized-metric'", ",", "\n", "default", "=", "C", ".", "PERPLEXITY", ",", "\n", "choices", "=", "C", ".", "METRICS", ",", "\n", "help", "=", "'Metric to optimize with early stopping {%(choices)s}. Default: %(default)s.'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "C", ".", "TRAIN_ARGS_CHECKPOINT_INTERVAL", ",", "\n", "type", "=", "int_greater_or_equal", "(", "1", ")", ",", "\n", "default", "=", "4000", ",", "\n", "help", "=", "'Checkpoint and evaluate every x updates (update-interval * batches). '", "\n", "'Default: %(default)s.'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--min-samples'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Minimum number of samples before training can stop. Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--max-samples'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Maximum number of samples. Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--min-updates'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Minimum number of updates before training can stop. Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--max-updates'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Maximum number of updates. Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--max-seconds'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Training will stop on the next checkpoint after reaching the maximum seconds. '", "\n", "'Default: %(default)s.'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--max-checkpoints'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Maximum number of checkpoints to continue training the model '", "\n", "'before training is stopped. '", "\n", "'Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--max-num-checkpoint-not-improved'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Maximum number of checkpoints the model is allowed to not improve in '", "\n", "'<optimized-metric> on validation data before training is stopped. '", "\n", "'Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--checkpoint-improvement-threshold'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.", ",", "\n", "help", "=", "'Improvement in <optimized-metric> over specified number of checkpoints must exceed '", "\n", "'this value to be considered actual improvement. Default: %(default)s.'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--min-num-epochs'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Minimum number of epochs (passes through the training data) '", "\n", "'before training can stop. Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--max-num-epochs'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Maximum number of epochs (passes through the training data) Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--embed-dropout'", ",", "\n", "type", "=", "multiple_values", "(", "2", ",", "data_type", "=", "float", ")", ",", "\n", "default", "=", "(", ".0", ",", ".0", ")", ",", "\n", "help", "=", "'Dropout probability for source & target embeddings. Use \"x:x\" to specify separate '", "\n", "'values. Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--transformer-dropout-attention'", ",", "\n", "type", "=", "multiple_values", "(", "2", ",", "data_type", "=", "float", ")", ",", "\n", "default", "=", "(", "0.1", ",", "0.1", ")", ",", "\n", "help", "=", "'Dropout probability for multi-head attention. Use \"x:x\" to specify separate '", "\n", "'values for encoder & decoder. Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--transformer-dropout-act'", ",", "\n", "type", "=", "multiple_values", "(", "2", ",", "data_type", "=", "float", ")", ",", "\n", "default", "=", "(", "0.1", ",", "0.1", ")", ",", "\n", "help", "=", "'Dropout probability before activation in feed-forward block. Use \"x:x\" to specify '", "\n", "'separate values for encoder & decoder. Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--transformer-dropout-prepost'", ",", "\n", "type", "=", "multiple_values", "(", "2", ",", "data_type", "=", "float", ")", ",", "\n", "default", "=", "(", "0.1", ",", "0.1", ")", ",", "\n", "help", "=", "'Dropout probability for pre/postprocessing blocks. Use \"x:x\" to specify separate '", "\n", "'values for encoder & decoder. Default: %(default)s.'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--optimizer'", ",", "\n", "default", "=", "C", ".", "OPTIMIZER_ADAM", ",", "\n", "choices", "=", "C", ".", "OPTIMIZERS", ",", "\n", "help", "=", "'SGD update rule. Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--optimizer-betas'", ",", "\n", "type", "=", "multiple_values", "(", "2", ",", "data_type", "=", "float", ")", ",", "\n", "default", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "help", "=", "'Beta1 and beta2 for Adam-like optimizers, specified \"x:x\". Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--optimizer-eps'", ",", "\n", "type", "=", "float_greater_or_equal", "(", "0", ")", ",", "\n", "default", "=", "1e-08", ",", "\n", "help", "=", "'Optimizer epsilon. Default: %(default)s.'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--dist'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Run in distributed training mode. When using this option, launch training with '", "\n", "'`torchrun --nproc_per_node N -m sockeye.train`. Increasing the number of processes '", "\n", "'multiplies the effective batch size (ex: batch_size 2560 with `--nproc_per_node 4` '", "\n", "'gives effective batch size 10240).'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--initial-learning-rate'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0002", ",", "\n", "help", "=", "'Initial learning rate. Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--weight-decay'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ",", "\n", "help", "=", "'Weight decay constant. Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--momentum'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ",", "\n", "help", "=", "'Momentum constant. Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--gradient-clipping-threshold'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "'Clip absolute gradients values greater than this value. '", "\n", "'Set to negative to disable. Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--gradient-clipping-type'", ",", "\n", "choices", "=", "C", ".", "GRADIENT_CLIPPING_TYPES", ",", "\n", "default", "=", "C", ".", "GRADIENT_CLIPPING_TYPE_NONE", ",", "\n", "help", "=", "'The type of gradient clipping. Default: %(default)s.'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--learning-rate-scheduler-type'", ",", "\n", "default", "=", "C", ".", "LR_SCHEDULER_PLATEAU_REDUCE", ",", "\n", "choices", "=", "C", ".", "LR_SCHEDULERS", ",", "\n", "help", "=", "'Learning rate scheduler type. Default: %(default)s.'", ")", "\n", "train_params", ".", "add_argument", "(", "'--learning-rate-t-scale'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\"Step number is multiplied by this value when determining learning rate for the \"", "\n", "\"current step. Default: %(default)s.\"", ")", "\n", "train_params", ".", "add_argument", "(", "'--learning-rate-reduce-factor'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.9", ",", "\n", "help", "=", "\"Factor to multiply learning rate with \"", "\n", "\"(for 'plateau-reduce' learning rate scheduler). Default: %(default)s.\"", ")", "\n", "train_params", ".", "add_argument", "(", "'--learning-rate-reduce-num-not-improved'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "8", ",", "\n", "help", "=", "\"For 'plateau-reduce' learning rate scheduler. Adjust learning rate \"", "\n", "\"if <optimized-metric> did not improve for x checkpoints. Default: %(default)s.\"", ")", "\n", "train_params", ".", "add_argument", "(", "'--learning-rate-warmup'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"Number of warmup steps. If set to x, linearly increases learning rate from 10%% \"", "\n", "\"to 100%% of the initial learning rate. Default: %(default)s.\"", ")", "\n", "train_params", ".", "add_argument", "(", "'--no-reload-on-learning-rate-reduce'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'Do not reload the best training checkpoint when reducing the learning rate. '", "\n", "'Default: %(default)s.'", ")", "\n", "\n", "\n", "train_params", ".", "add_argument", "(", "'--fixed-param-strategy'", ",", "\n", "default", "=", "None", ",", "\n", "choices", "=", "C", ".", "FIXED_PARAM_STRATEGY_CHOICES", ",", "\n", "help", "=", "\"Fix various parameters during training using a named strategy. The strategy \"", "\n", "\"name indicates which parameters will be fixed (Wuebker et al., 2018). \"", "\n", "\"Default: %(default)s.\"", ")", "\n", "train_params", ".", "add_argument", "(", "'--fixed-param-names'", ",", "\n", "default", "=", "[", "]", ",", "\n", "nargs", "=", "'*'", ",", "\n", "help", "=", "\"Manually specify names of parameters to fix during training. Default: %(default)s.\"", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "C", ".", "TRAIN_ARGS_MONITOR_BLEU", ",", "\n", "default", "=", "500", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'x>0: decode x sampled sentences from validation data and '", "\n", "'compute evaluation metrics. x==-1: use full validation data. Default: %(default)s.'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "C", ".", "TRAIN_ARGS_STOP_ON_DECODER_FAILURE", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "'Stop training as soon as any checkpoint decoder fails (e.g. because there is not '", "\n", "'enough GPU memory). Default: %(default)s.'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'Random seed. Default: %(default)s.'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--keep-last-params'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "-", "1", ",", "\n", "help", "=", "'Keep only the last n params files, use -1 to keep all files. Default: %(default)s'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--keep-initializations'", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "'In addition to keeping the last n params files, also keep params from checkpoint 0.'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--cache-last-best-params'", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "'Cache the last n best params files, as distinct from the last n in sequence. '", "\n", "'Use 0 or negative to disable. Default: %(default)s'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--cache-strategy'", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "C", ".", "AVERAGE_BEST", ",", "\n", "choices", "=", "C", ".", "AVERAGE_CHOICES", ",", "\n", "help", "=", "'Strategy to use when deciding which are the \"best\" params files. '", "\n", "'Default: %(default)s'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--cache-metric'", ",", "\n", "required", "=", "False", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "C", ".", "PERPLEXITY", ",", "\n", "choices", "=", "C", ".", "METRICS", ",", "\n", "help", "=", "'Metric to use when deciding which are the \"best\" params files. '", "\n", "'Default: %(default)s'", ")", "\n", "\n", "train_params", ".", "add_argument", "(", "'--dry-run'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Do not perform any actual training, but print statistics about the model\"", "\n", "\" and mode of operation.\"", ")", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_train_cli_args": [[1086, 1092], ["arguments.add_training_io_args", "arguments.add_model_parameters", "arguments.add_training_args", "arguments.add_device_args", "arguments.add_logging_args"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_training_io_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_model_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_training_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_device_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_logging_args"], ["", "def", "add_train_cli_args", "(", "params", ")", ":", "\n", "    ", "add_training_io_args", "(", "params", ")", "\n", "add_model_parameters", "(", "params", ")", "\n", "add_training_args", "(", "params", ")", "\n", "add_device_args", "(", "params", ")", "\n", "add_logging_args", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_translate_cli_args": [[1094, 1098], ["arguments.add_inference_args", "arguments.add_device_args", "arguments.add_logging_args"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_inference_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_device_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_logging_args"], ["", "def", "add_translate_cli_args", "(", "params", ")", ":", "\n", "    ", "add_inference_args", "(", "params", ")", "\n", "add_device_args", "(", "params", ")", "\n", "add_logging_args", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_score_cli_args": [[1100, 1143], ["arguments.add_training_data_args", "arguments.add_vocab_args", "arguments.add_device_args", "arguments.add_batch_args", "params.add_argument_group.add_argument_group", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "arguments.add_length_penalty_args", "arguments.add_brevity_penalty_args", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "arguments.add_logging_args", "arguments.multiple_values"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_training_data_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_vocab_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_device_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_batch_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.add_argument_group", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_length_penalty_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_brevity_penalty_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_logging_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values"], ["", "def", "add_score_cli_args", "(", "params", ")", ":", "\n", "    ", "add_training_data_args", "(", "params", ",", "required", "=", "True", ")", "\n", "add_vocab_args", "(", "params", ")", "\n", "add_device_args", "(", "params", ")", "\n", "add_batch_args", "(", "params", ",", "default_batch_size", "=", "56", ",", "default_batch_type", "=", "C", ".", "BATCH_TYPE_SENTENCE", ")", "\n", "\n", "params", "=", "params", ".", "add_argument_group", "(", "\"Scoring parameters\"", ")", "\n", "\n", "params", ".", "add_argument", "(", "\"--model\"", ",", "\"-m\"", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Model directory containing trained model.\"", ")", "\n", "\n", "params", ".", "add_argument", "(", "C", ".", "TRAINING_ARG_MAX_SEQ_LEN", ",", "\n", "type", "=", "multiple_values", "(", "num_values", "=", "2", ",", "greater_or_equal", "=", "1", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Maximum sequence length in tokens.'", "\n", "'Use \"x:x\" to specify separate values for src&tgt. Default: Read from model.'", ")", "\n", "\n", "# common params with translate CLI", "\n", "add_length_penalty_args", "(", "params", ")", "\n", "add_brevity_penalty_args", "(", "params", ")", "\n", "\n", "params", ".", "add_argument", "(", "\"--output\"", ",", "\"-o\"", ",", "default", "=", "None", ",", "\n", "help", "=", "\"File to write output to. Default: STDOUT.\"", ")", "\n", "\n", "params", ".", "add_argument", "(", "'--output-type'", ",", "\n", "default", "=", "C", ".", "OUTPUT_HANDLER_SCORE", ",", "\n", "choices", "=", "C", ".", "OUTPUT_HANDLERS_SCORING", ",", "\n", "help", "=", "'Output type. Default: %(default)s.'", ")", "\n", "\n", "params", ".", "add_argument", "(", "'--score-type'", ",", "\n", "choices", "=", "C", ".", "SCORING_TYPE_CHOICES", ",", "\n", "default", "=", "C", ".", "SCORING_TYPE_DEFAULT", ",", "\n", "help", "=", "'Score type to output. Default: %(default)s'", ")", "\n", "params", ".", "add_argument", "(", "'--softmax-temperature'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Controls peakiness of model predictions. Values < 1.0 produce '", "\n", "'peaked predictions, values > 1.0 produce smoothed distributions.'", ")", "\n", "\n", "params", ".", "add_argument", "(", "'--dtype'", ",", "default", "=", "None", ",", "choices", "=", "[", "None", ",", "C", ".", "DTYPE_FP32", ",", "C", ".", "DTYPE_FP16", ",", "C", ".", "DTYPE_INT8", "]", ",", "\n", "help", "=", "\"Data type. Default: %(default)s infers from saved model.\"", ")", "\n", "\n", "add_logging_args", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_inference_args": [[1145, 1311], ["params.add_argument_group", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "arguments.add_length_penalty_args", "arguments.add_brevity_penalty_args", "params.add_argument_group.add_argument", "arguments.regular_file", "arguments.int_greater_or_equal", "arguments.int_greater_or_equal", "arguments.int_greater_or_equal", "arguments.int_greater_or_equal", "arguments.int_greater_or_equal", "arguments.int_greater_or_equal", "arguments.int_greater_or_equal", "arguments.int_greater_or_equal", "arguments.multiple_values"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.add_argument_group", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_length_penalty_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_brevity_penalty_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.regular_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.int_greater_or_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.multiple_values"], ["", "def", "add_inference_args", "(", "params", ")", ":", "\n", "    ", "decode_params", "=", "params", ".", "add_argument_group", "(", "\"Inference parameters\"", ")", "\n", "\n", "decode_params", ".", "add_argument", "(", "C", ".", "INFERENCE_ARG_INPUT_LONG", ",", "C", ".", "INFERENCE_ARG_INPUT_SHORT", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Input file to translate. One sentence per line. '", "\n", "'If not given, will read from stdin.'", ")", "\n", "\n", "decode_params", ".", "add_argument", "(", "C", ".", "INFERENCE_ARG_INPUT_FACTORS_LONG", ",", "C", ".", "INFERENCE_ARG_INPUT_FACTORS_SHORT", ",", "\n", "required", "=", "False", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "regular_file", "(", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'List of input files containing additional source factors,'", "\n", "'each token-parallel to the source. Default: %(default)s.'", ")", "\n", "\n", "decode_params", ".", "add_argument", "(", "'--json-input'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"If given, the CLI expects string-serialized json objects as input.\"", "\n", "\"Requires at least the input text field, for example: \"", "\n", "\"{'text': 'some input string'} \"", "\n", "\"Optionally, a list of factors can be provided: \"", "\n", "\"{'text': 'some input string', 'factors': ['C C C', 'X X X']}.\"", ")", "\n", "\n", "decode_params", ".", "add_argument", "(", "C", ".", "INFERENCE_ARG_OUTPUT_LONG", ",", "C", ".", "INFERENCE_ARG_OUTPUT_SHORT", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Output file to write translations to. '", "\n", "'If not given, will write to stdout.'", ")", "\n", "\n", "decode_params", ".", "add_argument", "(", "'--models'", ",", "'-m'", ",", "\n", "required", "=", "True", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'Model folder(s). Use multiple for ensemble decoding. '", "\n", "'Model determines config, best parameters and vocab files.'", ")", "\n", "decode_params", ".", "add_argument", "(", "'--checkpoints'", ",", "'-c'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'If not given, chooses best checkpoints for model(s). '", "\n", "'If specified, must have the same length as --models and be integer'", ")", "\n", "decode_params", ".", "add_argument", "(", "'--nbest-size'", ",", "\n", "type", "=", "int_greater_or_equal", "(", "1", ")", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'Size of the nbest list of translations. Default: %(default)s.'", ")", "\n", "decode_params", ".", "add_argument", "(", "'--beam-size'", ",", "'-b'", ",", "\n", "type", "=", "int_greater_or_equal", "(", "1", ")", ",", "\n", "default", "=", "5", ",", "\n", "help", "=", "'Size of the beam. Default: %(default)s.'", ")", "\n", "decode_params", ".", "add_argument", "(", "'--greedy'", ",", "'-g'", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'Enables an alternative, faster greedy decoding implementation. It does not '", "\n", "'support batch decoding, ensembles, and hypothesis scores '", "\n", "'are not normalized. Default: %(default)s.'", ")", "\n", "\n", "decode_params", ".", "add_argument", "(", "'--beam-search-stop'", ",", "\n", "choices", "=", "[", "C", ".", "BEAM_SEARCH_STOP_ALL", ",", "C", ".", "BEAM_SEARCH_STOP_FIRST", "]", ",", "\n", "default", "=", "C", ".", "BEAM_SEARCH_STOP_ALL", ",", "\n", "help", "=", "'Stopping criteria. Quit when (all) hypotheses are finished '", "\n", "'or when a finished hypothesis is in (first) position. Default: %(default)s.'", ")", "\n", "decode_params", ".", "add_argument", "(", "'--batch-size'", ",", "\n", "type", "=", "int_greater_or_equal", "(", "1", ")", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'Batch size during decoding. Determines how many sentences are translated '", "\n", "'simultaneously. Default: %(default)s.'", ")", "\n", "decode_params", ".", "add_argument", "(", "'--chunk-size'", ",", "\n", "type", "=", "int_greater_or_equal", "(", "1", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Size of the chunks to be read from input at once. The chunks are sorted and then '", "\n", "'split into batches. Therefore the larger the chunk size the better the grouping '", "\n", "'of segments of similar length and therefore the higher the increase in throughput.'", "\n", "' Default: %d without batching '", "\n", "'and %d * batch_size with batching.'", "%", "(", "C", ".", "CHUNK_SIZE_NO_BATCHING", ",", "\n", "C", ".", "CHUNK_SIZE_PER_BATCH_SEGMENT", ")", ")", "\n", "decode_params", ".", "add_argument", "(", "'--sample'", ",", "\n", "type", "=", "int_greater_or_equal", "(", "0", ")", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "'?'", ",", "\n", "const", "=", "0", ",", "\n", "help", "=", "'Sample from softmax instead of taking best. Optional argument will restrict '", "\n", "'sampling to top N vocabulary items at each step. Default: %(default)s.'", ")", "\n", "decode_params", ".", "add_argument", "(", "'--seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Random seed used if sampling. Default: %(default)s.'", ")", "\n", "decode_params", ".", "add_argument", "(", "'--ensemble-mode'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'linear'", ",", "\n", "choices", "=", "[", "'linear'", ",", "'log_linear'", "]", ",", "\n", "help", "=", "'Ensemble mode. Default: %(default)s.'", ")", "\n", "decode_params", ".", "add_argument", "(", "'--bucket-width'", ",", "\n", "type", "=", "int_greater_or_equal", "(", "0", ")", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "'Bucket width for encoder steps. 0 means no bucketing. Default: %(default)s.'", ")", "\n", "decode_params", ".", "add_argument", "(", "'--max-input-length'", ",", "\n", "type", "=", "int_greater_or_equal", "(", "1", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Maximum input sequence length. Default: value from model(s).'", ")", "\n", "decode_params", ".", "add_argument", "(", "'--max-output-length-num-stds'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "C", ".", "DEFAULT_NUM_STD_MAX_OUTPUT_LENGTH", ",", "\n", "help", "=", "'Number of target-to-source length ratio standard deviations from training to add '", "\n", "'to calculate maximum output length for beam search for each sentence. '", "\n", "'Default: %(default)s.'", ")", "\n", "decode_params", ".", "add_argument", "(", "'--max-output-length'", ",", "\n", "type", "=", "int_greater_or_equal", "(", "1", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Maximum number of words to generate during translation. '", "\n", "'If None, it will be computed automatically. Default: %(default)s.'", ")", "\n", "decode_params", ".", "add_argument", "(", "'--restrict-lexicon'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "type", "=", "multiple_values", "(", "num_values", "=", "2", ",", "data_type", "=", "str", ")", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Specify block or top-k lexicon. A top-k lexicon will pose a positive constraint, \"", "\n", "\"by providing the set of allowed target words. While a blocking lexicon poses a \"", "\n", "\"negative constraint on providing a set of target words to be avoided. \"", "\n", "\"Specifically, a top-k lexicon will restrict the output vocabulary to the k most \"", "\n", "\"likely context-free translations of the source words in each sentence \"", "\n", "\"(Devlin, 2017). See the lexicon module for creating lexicons, i.e. by running \"", "\n", "\"sockeye-lexicon. To use multiple lexicons, provide \"", "\n", "\"'--restrict-lexicon key1:path1 key2:path2 ...' and use JSON input to specify the \"", "\n", "\"lexicon for each sentence: \"", "\n", "\"{\\\"text\\\": \\\"some input string\\\", \\\"restrict_lexicon\\\": \\\"key\\\"}. \"", "\n", "\"If a single lexicon is specified it will be applied to all inputs. \"", "\n", "\"If multiple lexica are specified they can be selected via the JSON input or it \"", "\n", "\"can be skipped by not providing a lexicon in the JSON input. \"", "\n", "\"Default: %(default)s.\"", ")", "\n", "decode_params", ".", "add_argument", "(", "'--restrict-lexicon-topk'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Specify the number of translations to load for each source word from the lexicon \"", "\n", "\"given with --restrict-lexicon top-k lexicon. \"", "\n", "\"Default: Load all entries from the lexicon.\"", ")", "\n", "\n", "decode_params", ".", "add_argument", "(", "'--skip-nvs'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Manually turn off Neural Vocabulary Selection (NVS) to do a softmax over the full target vocabulary.'", ",", "\n", "default", "=", "False", ")", "\n", "\n", "decode_params", ".", "add_argument", "(", "'--nvs-thresh'", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'The probability threshold for a word to be added to the set of target words. '", "\n", "'Default: 0.5.'", ",", "\n", "default", "=", "0.5", ")", "\n", "\n", "decode_params", ".", "add_argument", "(", "'--strip-unknown-words'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'Remove any <unk> symbols from outputs. Default: %(default)s.'", ")", "\n", "decode_params", ".", "add_argument", "(", "'--prevent-unk'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'Avoid generating <unk> during decoding. Default: %(default)s.'", ")", "\n", "\n", "decode_params", ".", "add_argument", "(", "'--output-type'", ",", "\n", "default", "=", "'translation'", ",", "\n", "choices", "=", "C", ".", "OUTPUT_HANDLERS", ",", "\n", "help", "=", "'Output type. Default: %(default)s.'", ")", "\n", "\n", "# common params with score CLI", "\n", "add_length_penalty_args", "(", "decode_params", ")", "\n", "add_brevity_penalty_args", "(", "decode_params", ")", "\n", "\n", "decode_params", ".", "add_argument", "(", "'--dtype'", ",", "default", "=", "None", ",", "choices", "=", "[", "None", ",", "C", ".", "DTYPE_FP32", ",", "C", ".", "DTYPE_FP16", ",", "C", ".", "DTYPE_INT8", "]", ",", "\n", "help", "=", "\"Data type. Default: %(default)s infers from saved model.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_length_penalty_args": [[1313, 1324], ["params.add_argument", "params.add_argument"], "function", ["None"], ["", "def", "add_length_penalty_args", "(", "params", ")", ":", "\n", "    ", "params", ".", "add_argument", "(", "'--length-penalty-alpha'", ",", "\n", "default", "=", "1.0", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'Alpha factor for the length penalty used in beam search: '", "\n", "'(beta + len(Y))**alpha/(beta + 1)**alpha. A value of 0.0 will therefore turn off '", "\n", "'length normalization. Default: %(default)s.'", ")", "\n", "params", ".", "add_argument", "(", "'--length-penalty-beta'", ",", "\n", "default", "=", "0.0", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'Beta factor for the length penalty used in scoring: '", "\n", "'(beta + len(Y))**alpha/(beta + 1)**alpha. Default: %(default)s'", ")", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_brevity_penalty_args": [[1327, 1343], ["params.add_argument", "params.add_argument", "params.add_argument", "arguments.float_greater_or_equal", "arguments.float_greater_or_equal"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.float_greater_or_equal", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.float_greater_or_equal"], ["", "def", "add_brevity_penalty_args", "(", "params", ")", ":", "\n", "    ", "params", ".", "add_argument", "(", "'--brevity-penalty-type'", ",", "\n", "default", "=", "'none'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "C", ".", "BREVITY_PENALTY_NONE", ",", "C", ".", "BREVITY_PENALTY_LEARNED", ",", "C", ".", "BREVITY_PENALTY_CONSTANT", "]", ",", "\n", "help", "=", "'If specified, adds brevity penalty to the hypotheses\\' scores, calculated with learned '", "\n", "'or constant length ratios. The latter, by default, uses the length ratio (|ref|/|hyp|) '", "\n", "'estimated from the training data and averaged over models. Default: %(default)s.'", ")", "\n", "params", ".", "add_argument", "(", "'--brevity-penalty-weight'", ",", "\n", "default", "=", "1.0", ",", "\n", "type", "=", "float_greater_or_equal", "(", "0.0", ")", ",", "\n", "help", "=", "'Scaler for the brevity penalty in beam search: weight * log(BP) + score. Default: %(default)s'", ")", "\n", "params", ".", "add_argument", "(", "'--brevity-penalty-constant-length-ratio'", ",", "\n", "default", "=", "0.0", ",", "\n", "type", "=", "float_greater_or_equal", "(", "0.0", ")", ",", "\n", "help", "=", "'Has effect if --brevity-penalty-type is set to \\'constant\\'. If positive, overrides the length '", "\n", "'ratio, used for brevity penalty calculation, for all inputs. If zero, uses the average of length '", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_evaluate_args": [[1347, 1373], ["params.add_argument_group", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "params.add_argument_group.add_argument", "arguments.file_or_stdin"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.add_argument_group", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.file_or_stdin"], ["", "def", "add_evaluate_args", "(", "params", ")", ":", "\n", "    ", "eval_params", "=", "params", ".", "add_argument_group", "(", "\"Evaluate parameters\"", ")", "\n", "eval_params", ".", "add_argument", "(", "'--references'", ",", "'-r'", ",", "\n", "required", "=", "True", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"File with references.\"", ")", "\n", "eval_params", ".", "add_argument", "(", "'--hypotheses'", ",", "'-i'", ",", "\n", "type", "=", "file_or_stdin", "(", ")", ",", "\n", "default", "=", "[", "sys", ".", "stdin", "]", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "\"File(s) with hypotheses. If none will read from stdin. Default: stdin.\"", ")", "\n", "eval_params", ".", "add_argument", "(", "'--metrics'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "C", ".", "EVALUATE_METRICS", ",", "\n", "default", "=", "[", "C", ".", "BLEU", ",", "C", ".", "CHRF", ",", "C", ".", "TER", "]", ",", "\n", "help", "=", "'List of metrics to compute. Default: %(default)s.'", ")", "\n", "eval_params", ".", "add_argument", "(", "'--sentence'", ",", "'-s'", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Show sentence-level metrics. Default: %(default)s.\"", ")", "\n", "eval_params", ".", "add_argument", "(", "'--offset'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.01", ",", "\n", "help", "=", "\"Numerical value of the offset of zero n-gram counts for BLEU. Default: %(default)s.\"", ")", "\n", "eval_params", ".", "add_argument", "(", "'--not-strict'", ",", "'-n'", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Do not fail if number of hypotheses does not match number of references. \"", "\n", "\"Default: %(default)s.\"", ")", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_build_vocab_args": [[1376, 1381], ["params.add_argument", "params.add_argument", "arguments.add_vocab_args", "arguments.add_process_pool_args"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_vocab_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_process_pool_args"], ["", "def", "add_build_vocab_args", "(", "params", ")", ":", "\n", "    ", "params", ".", "add_argument", "(", "'-i'", ",", "'--inputs'", ",", "required", "=", "True", ",", "nargs", "=", "'+'", ",", "help", "=", "'List of text files to build vocabulary from.'", ")", "\n", "params", ".", "add_argument", "(", "'-o'", ",", "'--output'", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"Output filename to write vocabulary to.\"", ")", "\n", "add_vocab_args", "(", "params", ")", "\n", "add_process_pool_args", "(", "params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.RestrictLexicon.save": [[102, 112], ["logger.info", "open", "numpy.save"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save"], ["def", "save", "(", "self", ",", "path", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Save lexicon in Numpy array format.  Lexicon will be specific to Sockeye model.\n\n        :param path: Path to Numpy array output file.\n        \"\"\"", "\n", "assert", "self", ".", "lex", "is", "not", "None", ",", "\"Lexicon uninitialized, can't be saved.\"", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "out", ":", "\n", "            ", "np", ".", "save", "(", "out", ",", "self", ".", "lex", ")", "\n", "", "logger", ".", "info", "(", "\"Saved lexicon to \\\"%s\\\"\"", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.RestrictLexicon.load_np": [[113, 116], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "load_np", "(", "self", ",", "lex", ":", "np", ".", "ndarray", ",", "k", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.RestrictLexicon.requires_src_ids": [[117, 122], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "requires_src_ids", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\" If true src_ids are required as an argument to get_trg_ids. Otherwise the set of target ids are source\n        independent and `None` may be passed instead. \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.RestrictLexicon.is_blocking": [[123, 128], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "is_blocking", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\" If true use get_blocked_trg_ids to obtain blocked ids, otherwise use get_allowed_trg_ids to get allowed\n            target ids(inverts the meaning of the target ids).\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.RestrictLexicon.get_allowed_trg_ids": [[129, 132], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_allowed_trg_ids", "(", "self", ",", "src_ids", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.RestrictLexicon.get_blocked_trg_ids": [[133, 136], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_blocked_trg_ids", "(", "self", ",", "src_ids", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.TopKLexicon.__init__": [[169, 178], ["numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "vocab_source", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "vocab_target", ":", "Dict", "[", "str", ",", "int", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "vocab_source", "=", "vocab_source", "\n", "self", ".", "vocab_target", "=", "vocab_target", "\n", "# Shape: (vocab_source_size, k), k determined at create() or load()", "\n", "self", ".", "lex", "=", "None", "# type: Optional[np.ndarray]", "\n", "# Always allow special vocab symbols in target vocab", "\n", "self", ".", "always_allow", "=", "np", ".", "array", "(", "[", "vocab_target", "[", "symbol", "]", "for", "symbol", "in", "C", ".", "VOCAB_SYMBOLS", "]", ",", "dtype", "=", "'int32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.TopKLexicon.create": [[179, 206], ["numpy.zeros", "itertools.groupby", "logger.info", "lexicon.lexicon_iterator", "len", "operator.itemgetter", "len", "sorted", "len", "operator.itemgetter"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.lexicon_iterator"], ["", "def", "create", "(", "self", ",", "path", ":", "str", ",", "k", ":", "int", "=", "20", ")", ":", "\n", "        ", "\"\"\"\n        Create from a scored lexicon file (fast_align format) using vocab from a trained Sockeye model.\n\n        :param path: Path to lexicon file.\n        :param k: Number of target entries per source to keep.\n        \"\"\"", "\n", "self", ".", "lex", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "vocab_source", ")", ",", "k", ")", ",", "dtype", "=", "'int32'", ")", "\n", "src_unk_id", "=", "self", ".", "vocab_source", "[", "C", ".", "UNK_SYMBOL", "]", "\n", "trg_unk_id", "=", "self", ".", "vocab_target", "[", "C", ".", "UNK_SYMBOL", "]", "\n", "num_insufficient", "=", "0", "# number of source tokens with insufficient number of translations given k", "\n", "for", "src_id", ",", "group", "in", "groupby", "(", "lexicon_iterator", "(", "path", ",", "self", ".", "vocab_source", ",", "self", ".", "vocab_target", ")", ",", "key", "=", "itemgetter", "(", "0", ")", ")", ":", "\n", "# Unk token will always be part of target vocab, so no need to track it here", "\n", "            ", "if", "src_id", "==", "src_unk_id", ":", "\n", "                ", "continue", "\n", "\n", "# filter trg_unk_id", "\n", "", "filtered_group", "=", "(", "(", "trg_id", ",", "prob", ")", "for", "src_id", ",", "trg_id", ",", "prob", "in", "group", "if", "trg_id", "!=", "trg_unk_id", ")", "\n", "# sort by prob and take top k", "\n", "top_k", "=", "[", "trg_id", "for", "trg_id", ",", "prob", "in", "sorted", "(", "filtered_group", ",", "key", "=", "itemgetter", "(", "1", ")", ",", "reverse", "=", "True", ")", "[", ":", "k", "]", "]", "\n", "if", "len", "(", "top_k", ")", "<", "k", ":", "\n", "                ", "num_insufficient", "+=", "1", "\n", "\n", "", "self", ".", "lex", "[", "src_id", ",", ":", "len", "(", "top_k", ")", "]", "=", "top_k", "\n", "\n", "", "logger", ".", "info", "(", "\"Created top-k lexicon from \\\"%s\\\", k=%d. %d source tokens with fewer than %d translations\"", ",", "\n", "path", ",", "k", ",", "num_insufficient", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.TopKLexicon.load_np": [[207, 222], ["time.time", "numpy.zeros", "enumerate", "logger.info", "min", "numpy.sort", "time.time", "logger.warning", "len"], "methods", ["None"], ["", "def", "load_np", "(", "self", ",", "lex", ":", "np", ".", "ndarray", ",", "k", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "load_time_start", "=", "time", ".", "time", "(", ")", "\n", "loaded_k", "=", "lex", ".", "shape", "[", "1", "]", "\n", "if", "k", "is", "not", "None", ":", "\n", "            ", "top_k", "=", "min", "(", "k", ",", "loaded_k", ")", "\n", "if", "k", ">", "loaded_k", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Can not load top-%d translations from lexicon that \"", "\n", "\"contains at most %d entries per source.\"", ",", "k", ",", "loaded_k", ")", "\n", "", "", "else", ":", "\n", "            ", "top_k", "=", "loaded_k", "\n", "", "self", ".", "lex", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "vocab_source", ")", ",", "top_k", ")", ",", "dtype", "=", "lex", ".", "dtype", ")", "\n", "for", "src_id", ",", "trg_ids", "in", "enumerate", "(", "lex", ")", ":", "\n", "            ", "self", ".", "lex", "[", "src_id", ",", ":", "]", "=", "np", ".", "sort", "(", "trg_ids", "[", ":", "top_k", "]", ")", "\n", "", "load_time", "=", "time", ".", "time", "(", ")", "-", "load_time_start", "\n", "logger", ".", "info", "(", "\"Created top-%d lexicon in %.4fs.\"", ",", "top_k", ",", "load_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.TopKLexicon.load": [[223, 236], ["time.time", "open", "numpy.load", "logger.info", "lexicon.TopKLexicon.load_np", "time.time"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.load_np"], ["", "def", "load", "(", "self", ",", "path", ":", "str", ",", "k", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Load lexicon from Numpy array file. The top-k target ids will be sorted by increasing target id.\n\n        :param path: Path to Numpy array file.\n        :param k: Optionally load less items than stored in path.\n        \"\"\"", "\n", "load_time_start", "=", "time", ".", "time", "(", ")", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "inp", ":", "\n", "            ", "lex", "=", "np", ".", "load", "(", "inp", ")", "\n", "load_time", "=", "time", ".", "time", "(", ")", "-", "load_time_start", "\n", "logger", ".", "info", "(", "\"Loaded lexicon from \\\"%s\\\" in %.4fs.\"", ",", "path", ",", "load_time", ")", "\n", "return", "self", ".", "load_np", "(", "lex", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.TopKLexicon.requires_src_ids": [[237, 239], ["None"], "methods", ["None"], ["", "", "def", "requires_src_ids", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.TopKLexicon.is_blocking": [[240, 242], ["None"], "methods", ["None"], ["", "def", "is_blocking", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.TopKLexicon.get_trg_ids": [[243, 247], ["lexicon.TopKLexicon.get_allowed_trg_ids"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_allowed_trg_ids"], ["", "def", "get_trg_ids", "(", "self", ",", "src_ids", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "# Note: we have this function for backwards compatibility when `get_trg_ids` was the only function that returned", "\n", "# allowed target ids", "\n", "        ", "return", "self", ".", "get_allowed_trg_ids", "(", "src_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.TopKLexicon.get_allowed_trg_ids": [[248, 259], ["numpy.lib.arraysetops.unique", "numpy.lib.arraysetops.union1d", "logger.debug", "lexicon.TopKLexicon.lex[].reshape"], "methods", ["None"], ["", "def", "get_allowed_trg_ids", "(", "self", ",", "src_ids", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Lookup possible target ids for input sequence of source ids.\n\n        :param src_ids: Sequence(s) of source ids (any shape).\n        :return: Possible target ids for source (unique sorted, always includes special symbols).\n        \"\"\"", "\n", "unique_src_ids", "=", "np", ".", "lib", ".", "arraysetops", ".", "unique", "(", "src_ids", ")", "# type: ignore", "\n", "trg_ids", "=", "np", ".", "lib", ".", "arraysetops", ".", "union1d", "(", "self", ".", "always_allow", ",", "self", ".", "lex", "[", "unique_src_ids", ",", ":", "]", ".", "reshape", "(", "-", "1", ")", ")", "# type: ignore", "\n", "logger", ".", "debug", "(", "f\"lookup: {trg_ids.shape[0]} unique targets for {unique_src_ids.shape[0]} unique sources\"", ")", "\n", "return", "trg_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.TopKLexicon.get_blocked_trg_ids": [[260, 262], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_blocked_trg_ids", "(", "self", ",", "src_ids", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.__init__": [[269, 272], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lex", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ")", ":", "\n", "        ", "if", "lex", "is", "not", "None", ":", "\n", "            ", "self", ".", "lex", "=", "lex", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.create": [[273, 293], ["set", "logger.info", "list", "numpy.array", "logger.info", "list.extend", "set", "len"], "methods", ["None"], ["", "", "def", "create", "(", "self", ",", "block_tokens", ":", "List", "[", "str", "]", ",", "vocab_target", ":", "Dict", "[", "str", ",", "List", "[", "int", "]", "]", ")", ":", "\n", "# We do not default to UNK because we want to only block on real tokens", "\n", "# We also exclude any other special symbols", "\n", "        ", "block_tokens_set", "=", "set", "(", "block_tokens", ")", "\n", "logger", ".", "info", "(", "f\"Creating static block lexicon with tokens: {block_tokens_set}\"", ")", "\n", "num_not_in_vocab", "=", "0", "\n", "block_token_ids", "=", "[", "]", "\n", "for", "token", "in", "block_tokens", ":", "\n", "            ", "if", "token", "in", "C", ".", "VOCAB_SYMBOLS", ":", "\n", "                ", "continue", "\n", "", "if", "token", "not", "in", "vocab_target", ":", "\n", "                ", "num_not_in_vocab", "+=", "1", "\n", "continue", "\n", "", "block_token_ids", ".", "extend", "(", "vocab_target", "[", "token", "]", ")", "\n", "", "block_token_ids", "=", "list", "(", "set", "(", "block_token_ids", ")", ")", "\n", "\n", "self", ".", "lex", "=", "np", ".", "array", "(", "block_token_ids", ",", "dtype", "=", "'int32'", ")", "\n", "logger", ".", "info", "(", "\"Created static block lexicon with %d tokens, %d skipped because they were not in the vocabulary\"", ",", "\n", "len", "(", "block_token_ids", ")", ",", "\n", "num_not_in_vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.load_np": [[294, 296], ["None"], "methods", ["None"], ["", "def", "load_np", "(", "self", ",", "lex", ":", "np", ".", "ndarray", ",", "k", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "self", ".", "lex", "=", "lex", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.requires_src_ids": [[297, 299], ["None"], "methods", ["None"], ["", "def", "requires_src_ids", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.is_blocking": [[300, 302], ["None"], "methods", ["None"], ["", "def", "is_blocking", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_blocked_trg_ids": [[303, 306], ["None"], "methods", ["None"], ["", "def", "get_blocked_trg_ids", "(", "self", ",", "src_ids", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "assert", "self", ".", "lex", "is", "not", "None", ",", "\"Lexicon not loaded yet.\"", "\n", "return", "self", ".", "lex", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_allowed_trg_ids": [[307, 309], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_allowed_trg_ids", "(", "self", ",", "src_ids", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.lexicon_iterator": [[38, 60], ["utils.smart_open", "line.rstrip().split", "numpy.exp", "vocab_source.get", "vocab_target.get", "float", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get"], ["def", "lexicon_iterator", "(", "path", ":", "str", ",", "\n", "vocab_source", ":", "Dict", "[", "str", ",", "int", "]", ",", "\n", "vocab_target", ":", "Dict", "[", "str", ",", "int", "]", ")", "->", "Generator", "[", "Tuple", "[", "int", ",", "int", ",", "float", "]", ",", "None", ",", "None", "]", ":", "\n", "    ", "\"\"\"\n    Yields lines from a translation table of format: src, trg, logprob.\n\n    :param path: Path to lexicon file.\n    :param vocab_source: Source vocabulary.\n    :param vocab_target: Target vocabulary.\n    :return: Generator returning tuples (src_id, trg_id, prob).\n    \"\"\"", "\n", "assert", "C", ".", "UNK_SYMBOL", "in", "vocab_source", "\n", "assert", "C", ".", "UNK_SYMBOL", "in", "vocab_target", "\n", "src_unk_id", "=", "vocab_source", "[", "C", ".", "UNK_SYMBOL", "]", "\n", "trg_unk_id", "=", "vocab_target", "[", "C", ".", "UNK_SYMBOL", "]", "\n", "with", "smart_open", "(", "path", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "src", ",", "trg", ",", "logprob", "=", "line", ".", "rstrip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "prob", "=", "np", ".", "exp", "(", "float", "(", "logprob", ")", ")", "\n", "src_id", "=", "vocab_source", ".", "get", "(", "src", ",", "src_unk_id", ")", "\n", "trg_id", "=", "vocab_target", ".", "get", "(", "trg", ",", "trg_unk_id", ")", "\n", "yield", "src_id", ",", "trg_id", ",", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.read_lexicon": [[62, 89], ["numpy.zeros", "lexicon.lexicon_iterator", "logger.info", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.lexicon_iterator"], ["", "", "", "def", "read_lexicon", "(", "path", ":", "str", ",", "vocab_source", ":", "Dict", "[", "str", ",", "int", "]", ",", "vocab_target", ":", "Dict", "[", "str", ",", "int", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Loads lexical translation probabilities from a translation table of format: src, trg, logprob.\n    Source words unknown to vocab_source are discarded.\n    Target words unknown to vocab_target contribute to p(unk|source_word).\n    See Incorporating Discrete Translation Lexicons into Neural Machine Translation, Section 3.1 & Equation 5\n    (https://arxiv.org/pdf/1606.02006.pdf))\n\n    :param path: Path to lexicon file.\n    :param vocab_source: Source vocabulary.\n    :param vocab_target: Target vocabulary.\n    :return: Lexicon array. Shape: (vocab_source_size, vocab_target_size).\n    \"\"\"", "\n", "src_unk_id", "=", "vocab_source", "[", "C", ".", "UNK_SYMBOL", "]", "\n", "trg_unk_id", "=", "vocab_target", "[", "C", ".", "UNK_SYMBOL", "]", "\n", "lexicon", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocab_source", ")", ",", "len", "(", "vocab_target", ")", ")", ")", "\n", "n", "=", "0", "\n", "for", "src_id", ",", "trg_id", ",", "prob", "in", "lexicon_iterator", "(", "path", ",", "vocab_source", ",", "vocab_target", ")", ":", "\n", "        ", "if", "src_id", "==", "src_unk_id", ":", "\n", "            ", "continue", "\n", "", "if", "trg_id", "==", "trg_unk_id", ":", "\n", "            ", "lexicon", "[", "src_id", ",", "trg_unk_id", "]", "+=", "prob", "\n", "", "else", ":", "\n", "            ", "lexicon", "[", "src_id", ",", "trg_id", "]", "=", "prob", "\n", "", "n", "+=", "1", "\n", "", "logger", ".", "info", "(", "\"Loaded lexicon from '%s' with %d entries\"", ",", "path", ",", "n", ")", "\n", "return", "lexicon", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.load_restrict_lexicon": [[138, 158], ["time.time", "open", "numpy.load", "logger.info", "time.time", "len", "lexicon.StaticBlockLexicon", "lexicon.TopKLexicon.load_np", "len", "lexicon.TopKLexicon", "lexicon.TopKLexicon.load_np", "ValueError"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.load_np", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.load_np"], ["", "", "def", "load_restrict_lexicon", "(", "\n", "path", ":", "str", ",", "\n", "vocab_source", ":", "Optional", "[", "Dict", "[", "str", ",", "int", "]", "]", "=", "None", ",", "\n", "vocab_target", ":", "Optional", "[", "Dict", "[", "str", ",", "int", "]", "]", "=", "None", ",", "\n", "k", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "RestrictLexicon", ":", "\n", "    ", "load_time_start", "=", "time", ".", "time", "(", ")", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "inp", ":", "\n", "        ", "lex", "=", "np", ".", "load", "(", "inp", ")", "\n", "load_time", "=", "time", ".", "time", "(", ")", "-", "load_time_start", "\n", "# Both lexicon types are serialized as numpy arrays and we distinguish them by their shape", "\n", "logger", ".", "info", "(", "\"Loaded lexicon from \\\"%s\\\" in %.4fs.\"", ",", "path", ",", "load_time", ")", "\n", "if", "len", "(", "lex", ".", "shape", ")", "==", "1", ":", "\n", "            ", "lexicon", "=", "StaticBlockLexicon", "(", ")", "# type: RestrictLexicon", "\n", "lexicon", ".", "load_np", "(", "lex", ")", "\n", "", "elif", "len", "(", "lex", ".", "shape", ")", "==", "2", ":", "\n", "            ", "lexicon", "=", "TopKLexicon", "(", "vocab_source", ",", "vocab_target", ")", "\n", "lexicon", ".", "load_np", "(", "lex", ",", "k", "=", "k", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected a 1d or 2d array.\"", ")", "\n", "", "return", "lexicon", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.create": [[311, 324], ["log.setup_main_logger", "logging.getLogger", "log.log_sockeye_version", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "lexicon.TopKLexicon", "lexicon.TopKLexicon.create", "lexicon.RestrictLexicon.save", "vocab.load_source_vocabs", "vocab.load_target_vocabs"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.setup_main_logger", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.log_sockeye_version", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.create", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_source_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_target_vocabs"], ["", "", "def", "create", "(", "args", ")", ":", "\n", "    ", "setup_main_logger", "(", "console", "=", "not", "args", ".", "quiet", ",", "file_logging", "=", "not", "args", ".", "no_logfile", ",", "path", "=", "args", ".", "output", "+", "\".log\"", ")", "\n", "global", "logger", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'create'", ")", "\n", "log_sockeye_version", "(", "logger", ")", "\n", "logger", ".", "info", "(", "\"Creating top-k lexicon from \\\"%s\\\"\"", ",", "args", ".", "input", ")", "\n", "logger", ".", "info", "(", "\"Reading source and target vocab from \\\"%s\\\"\"", ",", "args", ".", "model", ")", "\n", "vocab_source", "=", "vocab", ".", "load_source_vocabs", "(", "args", ".", "model", ")", "[", "0", "]", "\n", "vocab_target", "=", "vocab", ".", "load_target_vocabs", "(", "args", ".", "model", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "\"Building top-%d lexicon\"", ",", "args", ".", "k", ")", "\n", "lexicon", "=", "TopKLexicon", "(", "vocab_source", ",", "vocab_target", ")", "\n", "lexicon", ".", "create", "(", "args", ".", "input", ",", "args", ".", "k", ")", "\n", "lexicon", ".", "save", "(", "args", ".", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.create_block_lexicon_from_file": [[327, 339], ["log.setup_main_logger", "logging.getLogger", "log.log_sockeye_version", "open", "list", "lexicon.create_block_lexicon_for_model", "set", "line.rstrip().split", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.setup_main_logger", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.log_sockeye_version", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.create_block_lexicon_for_model"], ["", "def", "create_block_lexicon_from_file", "(", "args", ")", ":", "\n", "    ", "setup_main_logger", "(", "console", "=", "not", "args", ".", "quiet", ",", "file_logging", "=", "not", "args", ".", "no_logfile", ",", "path", "=", "args", ".", "output", "+", "\".log\"", ")", "\n", "global", "logger", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'create-block'", ")", "\n", "log_sockeye_version", "(", "logger", ")", "\n", "\n", "fname", "=", "args", ".", "input", "\n", "model_path", "=", "args", ".", "model", "\n", "output_path", "=", "args", ".", "output", "\n", "with", "open", "(", "fname", ")", "as", "data", ":", "\n", "        ", "block_tokens", "=", "list", "(", "set", "(", "token", "for", "line", "in", "data", "for", "token", "in", "line", ".", "rstrip", "(", ")", ".", "split", "(", ")", ")", ")", "\n", "return", "create_block_lexicon_for_model", "(", "block_tokens", ",", "model_path", ",", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.create_block_lexicon_for_model": [[341, 344], ["lexicon.create_block_lexicon", "vocab.load_target_vocabs"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.create_block_lexicon", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_target_vocabs"], ["", "", "def", "create_block_lexicon_for_model", "(", "block_tokens", ":", "List", "[", "str", "]", ",", "model_path", ":", "str", ",", "output_path", ":", "str", ",", "lowercase", ":", "bool", "=", "False", ")", ":", "\n", "    ", "vocab_target", "=", "vocab", ".", "load_target_vocabs", "(", "model_path", ")", "[", "0", "]", "\n", "return", "create_block_lexicon", "(", "block_tokens", ",", "vocab_target", ",", "output_path", ",", "lowercase", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.create_block_lexicon": [[346, 361], ["lexicon.StaticBlockLexicon", "lexicon.StaticBlockLexicon.create", "lexicon.RestrictLexicon.save", "collections.defaultdict", "vocab_target.items", "dict", "vocab_target_lower[].append", "token.lower", "vocab_target.items", "k.lower"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.create", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save"], ["", "def", "create_block_lexicon", "(", "block_tokens", ":", "List", "[", "str", "]", ",", "vocab_target", ":", "vocab", ".", "Vocab", ",", "output_path", ":", "str", ",", "lowercase", ":", "bool", "=", "False", ")", ":", "\n", "    ", "if", "lowercase", ":", "\n", "# Lowercase vocabulary entries + block words:", "\n", "# lowercased entries map to multiple word ids", "\n", "        ", "vocab_target_lower", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "k", ",", "v", "in", "vocab_target", ".", "items", "(", ")", ":", "\n", "            ", "vocab_target_lower", "[", "k", ".", "lower", "(", ")", "]", ".", "append", "(", "v", ")", "\n", "", "block_tokens", "=", "[", "token", ".", "lower", "(", ")", "for", "token", "in", "block_tokens", "]", "\n", "vocab_target_for_lexicon", "=", "dict", "(", "vocab_target_lower", ")", "\n", "", "else", ":", "\n", "        ", "vocab_target_for_lexicon", "=", "{", "k", ":", "[", "v", "]", "for", "k", ",", "v", "in", "vocab_target", ".", "items", "(", ")", "}", "\n", "\n", "", "lexicon", "=", "StaticBlockLexicon", "(", ")", "\n", "lexicon", ".", "create", "(", "block_tokens", ",", "vocab_target_for_lexicon", ")", "\n", "lexicon", ".", "save", "(", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.inspect": [[363, 386], ["log.setup_main_logger", "logging.getLogger", "log.log_sockeye_version", "logging.getLogger.info", "vocab.vocab_from_json", "vocab.reverse_vocab", "lexicon.TopKLexicon", "lexicon.TopKLexicon.load", "logging.getLogger.info", "vocab.load_source_vocabs", "os.path.join", "list", "tokens2ids", "print", "lexicon.TopKLexicon.get_allowed_trg_ids", "print", "print", "utils.get_tokens", "numpy.array", "vocab.reverse_vocab.get", "len", "len", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.setup_main_logger", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.log_sockeye_version", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.vocab_from_json", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.reverse_vocab", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_source_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.tokens2ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.StaticBlockLexicon.get_allowed_trg_ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get"], ["", "def", "inspect", "(", "args", ")", ":", "\n", "    ", "from", ".", "data_io", "import", "tokens2ids", "\n", "setup_main_logger", "(", "console", "=", "True", ",", "file_logging", "=", "False", ")", "\n", "global", "logger", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'inspect'", ")", "\n", "log_sockeye_version", "(", "logger", ")", "\n", "logger", ".", "info", "(", "\"Inspecting top-k lexicon at \\\"%s\\\"\"", ",", "args", ".", "lexicon", ")", "\n", "vocab_source", "=", "vocab", ".", "load_source_vocabs", "(", "args", ".", "model", ")", "[", "0", "]", "\n", "vocab_target", "=", "vocab", ".", "vocab_from_json", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model", ",", "C", ".", "VOCAB_TRG_NAME", ")", ")", "\n", "vocab_target_inv", "=", "vocab", ".", "reverse_vocab", "(", "vocab_target", ")", "\n", "lexicon", "=", "TopKLexicon", "(", "vocab_source", ",", "vocab_target", ")", "\n", "lexicon", ".", "load", "(", "args", ".", "lexicon", ",", "args", ".", "k", ")", "\n", "logger", ".", "info", "(", "\"Reading from STDIN...\"", ")", "\n", "for", "line", "in", "sys", ".", "stdin", ":", "\n", "        ", "tokens", "=", "list", "(", "get_tokens", "(", "line", ")", ")", "\n", "if", "not", "tokens", ":", "\n", "            ", "continue", "\n", "", "ids", "=", "tokens2ids", "(", "tokens", ",", "vocab_source", ")", "\n", "print", "(", "\"Input:  n=%d\"", "%", "len", "(", "tokens", ")", ",", "\" \"", ".", "join", "(", "\"%s(%d)\"", "%", "(", "tok", ",", "i", ")", "for", "tok", ",", "i", "in", "zip", "(", "tokens", ",", "ids", ")", ")", ")", "\n", "trg_ids", "=", "lexicon", ".", "get_allowed_trg_ids", "(", "np", ".", "array", "(", "ids", ")", ")", "\n", "tokens_trg", "=", "[", "vocab_target_inv", ".", "get", "(", "trg_id", ",", "C", ".", "UNK_SYMBOL", ")", "for", "trg_id", "in", "trg_ids", "]", "\n", "print", "(", "\"Output: n=%d\"", "%", "len", "(", "tokens_trg", ")", ",", "\" \"", ".", "join", "(", "\"%s(%d)\"", "%", "(", "tok", ",", "i", ")", "for", "tok", ",", "i", "in", "zip", "(", "tokens_trg", ",", "trg_ids", ")", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lexicon.main": [[388, 420], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_subparsers", "params.add_subparsers.add_parser", "arguments.add_lexicon_args", "arguments.add_lexicon_create_args", "arguments.add_logging_args", "subparams.add_parser.set_defaults", "params.add_subparsers.add_parser", "arguments.add_lexicon_args", "arguments.add_lexicon_create_args", "arguments.add_logging_args", "subparams.add_parser.set_defaults", "params.add_subparsers.add_parser", "arguments.add_lexicon_inspect_args", "arguments.add_lexicon_args", "subparams.add_parser.set_defaults", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.print_help", "params.parse_args.func"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_lexicon_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_lexicon_create_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_logging_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_lexicon_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_lexicon_create_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_logging_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_lexicon_inspect_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_lexicon_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n    Commandline interface for building/inspecting top-k lexicons using during decoding.\n    \"\"\"", "\n", "params", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Create or inspect a top-k lexicon for use during decoding.\"", ")", "\n", "subparams", "=", "params", ".", "add_subparsers", "(", "title", "=", "\"Commands\"", ")", "\n", "\n", "params_create", "=", "subparams", ".", "add_parser", "(", "'create'", ",", "description", "=", "\"Create top-k lexicon for use during decoding. \"", "\n", "\"See sockeye_contrib/fast_align/README.md \"", "\n", "\"for information on creating input lexical tables.\"", ")", "\n", "arguments", ".", "add_lexicon_args", "(", "params_create", ")", "\n", "arguments", ".", "add_lexicon_create_args", "(", "params_create", ")", "\n", "arguments", ".", "add_logging_args", "(", "params_create", ")", "\n", "params_create", ".", "set_defaults", "(", "func", "=", "create", ")", "\n", "\n", "params_block", "=", "subparams", ".", "add_parser", "(", "'create-block'", ",", "description", "=", "\"Create block lexicon for use during decoding.\"", ")", "\n", "arguments", ".", "add_lexicon_args", "(", "params_block", ",", "is_for_block_lexicon", "=", "True", ")", "\n", "arguments", ".", "add_lexicon_create_args", "(", "params_block", ",", "is_for_block_lexicon", "=", "True", ")", "\n", "arguments", ".", "add_logging_args", "(", "params_block", ")", "\n", "params_block", ".", "set_defaults", "(", "func", "=", "create_block_lexicon_from_file", ")", "\n", "\n", "params_inspect", "=", "subparams", ".", "add_parser", "(", "'inspect'", ",", "description", "=", "\"Inspect top-k lexicon for use during decoding.\"", ")", "\n", "arguments", ".", "add_lexicon_inspect_args", "(", "params_inspect", ")", "\n", "arguments", ".", "add_lexicon_args", "(", "params_inspect", ")", "\n", "params_inspect", ".", "set_defaults", "(", "func", "=", "inspect", ")", "\n", "\n", "args", "=", "params", ".", "parse_args", "(", ")", "\n", "if", "'func'", "not", "in", "args", ":", "\n", "        ", "params", ".", "print_help", "(", ")", "\n", "return", "1", "\n", "", "else", ":", "\n", "        ", "args", ".", "func", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.__str__": [[144, 146], ["None"], "methods", ["None"], ["def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'TranslatorInput({self.sentence_id}, {self.tokens}, factors={self.factors}, source_prefix_tokens={self.source_prefix_tokens}, source_prefix_factors={self.source_prefix_factors}, target_prefix_tokens={self.target_prefix_tokens}, target_prefix_factors={self.target_prefix_factors}, use_target_prefix_all_chunks={self.use_target_prefix_all_chunks}, keep_target_prefix_key={self.keep_target_prefix_key}, constraints={self.constraints}, avoid={self.avoid_list})'", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.__len__": [[147, 149], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "tokens", ")", "+", "self", ".", "num_source_prefix_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.num_factors": [[150, 156], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_factors", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Returns the number of factors of this instance.\n        \"\"\"", "\n", "return", "1", "+", "(", "0", "if", "not", "self", ".", "factors", "else", "len", "(", "self", ".", "factors", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.get_source_prefix_tokens": [[157, 162], ["None"], "methods", ["None"], ["", "def", "get_source_prefix_tokens", "(", "self", ")", "->", "Tokens", ":", "\n", "        ", "\"\"\"\n        Returns the source prefix tokens of this instance.\n        \"\"\"", "\n", "return", "self", ".", "source_prefix_tokens", "if", "self", ".", "source_prefix_tokens", "is", "not", "None", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.num_source_prefix_tokens": [[163, 169], ["len", "inference.TranslatorInput.get_source_prefix_tokens"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.get_source_prefix_tokens"], ["", "@", "property", "\n", "def", "num_source_prefix_tokens", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Returns the number of source prefix tokens of this instance.\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "get_source_prefix_tokens", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.get_target_prefix_tokens": [[170, 175], ["None"], "methods", ["None"], ["", "def", "get_target_prefix_tokens", "(", "self", ")", "->", "Tokens", ":", "\n", "        ", "\"\"\"\n        Returns the target prefix tokens of this instance.\n        \"\"\"", "\n", "return", "self", ".", "target_prefix_tokens", "if", "self", ".", "target_prefix_tokens", "is", "not", "None", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.num_target_prefix_tokens": [[176, 182], ["len", "inference.TranslatorInput.get_target_prefix_tokens"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.get_target_prefix_tokens"], ["", "@", "property", "\n", "def", "num_target_prefix_tokens", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Returns the number of target prefix tokens of this instance.\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "get_target_prefix_tokens", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.get_target_prefix_factors": [[183, 188], ["None"], "methods", ["None"], ["", "def", "get_target_prefix_factors", "(", "self", ")", "->", "List", "[", "Tokens", "]", ":", "\n", "        ", "\"\"\"\n        Returns the target prefix factors of this instance.\n        \"\"\"", "\n", "return", "self", ".", "target_prefix_factors", "if", "self", ".", "target_prefix_factors", "is", "not", "None", "else", "[", "[", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.num_target_prefix_factors": [[189, 195], ["len", "inference.TranslatorInput.get_target_prefix_factors"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.get_target_prefix_factors"], ["", "@", "property", "\n", "def", "num_target_prefix_factors", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Returns the number of target prefix factors of this instance.\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "get_target_prefix_factors", "(", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.chunks": [[196, 235], ["enumerate", "logger.warning", "range", "len", "len", "copy.deepcopy", "inference.TranslatorInput", "len"], "methods", ["None"], ["", "def", "chunks", "(", "self", ",", "chunk_size", ":", "int", ")", "->", "Generator", "[", "'TranslatorInput'", ",", "None", ",", "None", "]", ":", "\n", "        ", "\"\"\"\n        Takes a TranslatorInput (itself) and yields TranslatorInputs for chunks of size chunk_size.\n\n        :param chunk_size: The maximum size of a chunk.\n        :return: A generator of TranslatorInputs, one for each chunk created.\n        \"\"\"", "\n", "\n", "if", "len", "(", "self", ".", "tokens", ")", ">", "chunk_size", "and", "self", ".", "constraints", "is", "not", "None", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "'Input %s has length (%d) that exceeds max input length (%d), '", "\n", "'triggering internal splitting. Placing all target-side constraints '", "\n", "'with the first chunk, which is probably wrong.'", ",", "\n", "self", ".", "sentence_id", ",", "len", "(", "self", ".", "tokens", ")", ",", "chunk_size", ")", "\n", "\n", "", "for", "chunk_id", ",", "i", "in", "enumerate", "(", "range", "(", "0", ",", "len", "(", "self", ")", "-", "self", ".", "num_source_prefix_tokens", ",", "chunk_size", ")", ")", ":", "\n", "            ", "factors", "=", "[", "factor", "[", "i", ":", "i", "+", "chunk_size", "]", "for", "factor", "in", "self", ".", "factors", "]", "if", "self", ".", "factors", "is", "not", "None", "else", "None", "\n", "# Constrained decoding is not supported for chunked TranslatorInputs. As a fall-back, constraints are", "\n", "# assigned to the first chunk", "\n", "constraints", "=", "self", ".", "constraints", "if", "chunk_id", "==", "0", "else", "None", "\n", "# Target_prefix_tokens are assigned to all chunks if self.use_target_prefix_all_chunks is True,", "\n", "# otherwise target_prefix_tokens are assigned only to the first chunk", "\n", "target_prefix_tokens", "=", "self", ".", "target_prefix_tokens", "if", "chunk_id", "==", "0", "or", "self", ".", "use_target_prefix_all_chunks", "else", "None", "\n", "target_prefix_factors", "=", "self", ".", "target_prefix_factors", "if", "chunk_id", "==", "0", "or", "self", ".", "use_target_prefix_all_chunks", "else", "None", "\n", "pass_through_dict", "=", "copy", ".", "deepcopy", "(", "self", ".", "pass_through_dict", ")", "if", "(", "chunk_id", "==", "0", "and", "self", ".", "pass_through_dict", "is", "not", "None", ")", "else", "None", "\n", "yield", "TranslatorInput", "(", "sentence_id", "=", "self", ".", "sentence_id", ",", "\n", "tokens", "=", "self", ".", "tokens", "[", "i", ":", "i", "+", "chunk_size", "]", ",", "\n", "factors", "=", "factors", ",", "\n", "source_prefix_tokens", "=", "self", ".", "source_prefix_tokens", ",", "\n", "source_prefix_factors", "=", "self", ".", "source_prefix_factors", ",", "\n", "target_prefix_tokens", "=", "target_prefix_tokens", ",", "\n", "target_prefix_factors", "=", "self", ".", "target_prefix_factors", ",", "\n", "use_target_prefix_all_chunks", "=", "self", ".", "use_target_prefix_all_chunks", ",", "\n", "keep_target_prefix_key", "=", "self", ".", "keep_target_prefix_key", ",", "\n", "restrict_lexicon", "=", "self", ".", "restrict_lexicon", ",", "\n", "constraints", "=", "constraints", ",", "\n", "avoid_list", "=", "self", ".", "avoid_list", ",", "\n", "pass_through_dict", "=", "pass_through_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.with_eos": [[236, 254], ["inference.TranslatorInput"], "methods", ["None"], ["", "", "def", "with_eos", "(", "self", ")", "->", "'TranslatorInput'", ":", "\n", "        ", "\"\"\"\n        :return: A new translator input with EOS appended to the tokens and factors.\n        \"\"\"", "\n", "return", "TranslatorInput", "(", "sentence_id", "=", "self", ".", "sentence_id", ",", "\n", "tokens", "=", "self", ".", "tokens", "+", "[", "C", ".", "EOS_SYMBOL", "]", ",", "\n", "factors", "=", "[", "factor", "+", "[", "C", ".", "EOS_SYMBOL", "]", "for", "factor", "in", "\n", "self", ".", "factors", "]", "if", "self", ".", "factors", "is", "not", "None", "else", "None", ",", "\n", "source_prefix_tokens", "=", "self", ".", "source_prefix_tokens", ",", "\n", "source_prefix_factors", "=", "self", ".", "source_prefix_factors", ",", "\n", "target_prefix_tokens", "=", "self", ".", "target_prefix_tokens", ",", "\n", "target_prefix_factors", "=", "self", ".", "target_prefix_factors", ",", "\n", "use_target_prefix_all_chunks", "=", "self", ".", "use_target_prefix_all_chunks", ",", "\n", "keep_target_prefix_key", "=", "self", ".", "keep_target_prefix_key", ",", "\n", "restrict_lexicon", "=", "self", ".", "restrict_lexicon", ",", "\n", "constraints", "=", "self", ".", "constraints", ",", "\n", "avoid_list", "=", "self", ".", "avoid_list", ",", "\n", "pass_through_dict", "=", "self", ".", "pass_through_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.BadTranslatorInput.__init__": [[258, 260], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sentence_id", ":", "SentenceId", ",", "tokens", ":", "Tokens", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "sentence_id", "=", "sentence_id", ",", "tokens", "=", "tokens", ",", "factors", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorOutput.json": [[510, 544], ["copy.deepcopy", "enumerate", "enumerate", "len", "len", "_d[].append", "enumerate"], "methods", ["None"], ["def", "json", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary suitable for json.dumps() representing all\n        the information in the class. It is initialized with any keys\n        present in the corresponding `TranslatorInput` object's pass_through_dict.\n        Keys from here that are not overwritten by Sockeye will thus be passed\n        through to the output.\n\n        :return: A dictionary.\n        \"\"\"", "\n", "_d", "=", "copy", ".", "deepcopy", "(", "self", ".", "pass_through_dict", ")", "if", "self", ".", "pass_through_dict", "is", "not", "None", "else", "{", "}", "# type: Dict[str, Any]", "\n", "_d", "[", "'sentence_id'", "]", "=", "self", ".", "sentence_id", "\n", "_d", "[", "'translation'", "]", "=", "self", ".", "translation", "\n", "_d", "[", "'score'", "]", "=", "self", ".", "score", "\n", "\n", "if", "self", ".", "nbest_translations", "is", "not", "None", "and", "len", "(", "self", ".", "nbest_translations", ")", ">", "1", ":", "\n", "            ", "_d", "[", "'translations'", "]", "=", "self", ".", "nbest_translations", "\n", "_d", "[", "'scores'", "]", "=", "self", ".", "nbest_scores", "\n", "\n", "", "if", "self", ".", "factor_translations", "is", "not", "None", ":", "\n", "            ", "for", "i", ",", "factor", "in", "enumerate", "(", "self", ".", "factor_translations", ",", "1", ")", ":", "\n", "                ", "_d", "[", "f'factor{i}'", "]", "=", "factor", "\n", "\n", "", "", "if", "self", ".", "factor_scores", "is", "not", "None", ":", "\n", "            ", "for", "i", ",", "score", "in", "enumerate", "(", "self", ".", "factor_scores", ",", "1", ")", ":", "\n", "                ", "_d", "[", "f'factor{i}_score'", "]", "=", "score", "\n", "\n", "", "", "if", "self", ".", "nbest_factor_translations", "is", "not", "None", "and", "len", "(", "self", ".", "nbest_factor_translations", ")", ">", "1", ":", "\n", "            ", "_d", "[", "'translations_factors'", "]", "=", "[", "]", "\n", "for", "factor_translations", "in", "self", ".", "nbest_factor_translations", ":", "\n", "                ", "_d", "[", "'translations_factors'", "]", ".", "append", "(", "\n", "{", "f'factor{i}'", ":", "factor_translation", "for", "i", ",", "factor_translation", "in", "enumerate", "(", "factor_translations", ",", "1", ")", "}", ")", "\n", "\n", "", "", "return", "_d", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator.__init__": [[750, 837], ["inference.Translator.stop_ids.copy", "inference.models_max_input_output_length", "utils.check_condition", "beam_search.get_search_algorithm", "functools.partial", "logger.info", "vocab.reverse_vocab", "inference.Translator.strip_ids.add", "utils.check_condition", "len", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.config.Config.copy", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.models_max_input_output_length", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.get_search_algorithm", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.reverse_vocab", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["def", "__init__", "(", "self", ",", "\n", "device", ":", "pt", ".", "device", ",", "\n", "ensemble_mode", ":", "str", ",", "\n", "scorer", ":", "CandidateScorer", ",", "\n", "batch_size", ":", "int", ",", "\n", "beam_search_stop", ":", "str", ",", "\n", "models", ":", "List", "[", "SockeyeModel", "]", ",", "\n", "source_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "target_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "beam_size", ":", "int", "=", "5", ",", "\n", "nbest_size", ":", "int", "=", "1", ",", "\n", "restrict_lexicon", ":", "Optional", "[", "Union", "[", "lexicon", ".", "RestrictLexicon", ",", "Dict", "[", "str", ",", "lexicon", ".", "RestrictLexicon", "]", "]", "]", "=", "None", ",", "\n", "strip_unknown_words", ":", "bool", "=", "False", ",", "\n", "sample", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "output_scores", ":", "bool", "=", "False", ",", "\n", "constant_length_ratio", ":", "float", "=", "0.0", ",", "\n", "max_output_length_num_stds", ":", "int", "=", "C", ".", "DEFAULT_NUM_STD_MAX_OUTPUT_LENGTH", ",", "\n", "max_input_length", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "max_output_length", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "prevent_unk", ":", "bool", "=", "False", ",", "\n", "greedy", ":", "bool", "=", "False", ",", "\n", "skip_nvs", ":", "bool", "=", "False", ",", "\n", "nvs_thresh", ":", "float", "=", "0.5", ")", "->", "None", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "dtype", "=", "models", "[", "0", "]", ".", "dtype", "\n", "self", ".", "_scorer", "=", "scorer", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "beam_size", "=", "beam_size", "\n", "self", ".", "beam_search_stop", "=", "beam_search_stop", "\n", "self", ".", "source_vocabs", "=", "source_vocabs", "\n", "self", ".", "vocab_targets", "=", "target_vocabs", "\n", "self", ".", "vocab_targets_inv", "=", "[", "vocab", ".", "reverse_vocab", "(", "v", ")", "for", "v", "in", "self", ".", "vocab_targets", "]", "\n", "self", ".", "restrict_lexicon", "=", "restrict_lexicon", "\n", "assert", "C", ".", "PAD_ID", "==", "0", ",", "\"pad id should be 0\"", "\n", "self", ".", "stop_ids", "=", "{", "C", ".", "EOS_ID", ",", "C", ".", "PAD_ID", "}", "# type: Set[int]", "\n", "self", ".", "strip_ids", "=", "self", ".", "stop_ids", ".", "copy", "(", ")", "# ids to strip from the output", "\n", "self", ".", "unk_id", "=", "C", ".", "UNK_ID", "\n", "if", "strip_unknown_words", ":", "\n", "            ", "self", ".", "strip_ids", ".", "add", "(", "self", ".", "unk_id", ")", "\n", "", "self", ".", "models", "=", "models", "\n", "\n", "# after models are loaded we ensured that they agree on max_input_length, max_output_length and batch size", "\n", "# set a common max_output length for all models.", "\n", "self", ".", "_max_input_length", ",", "self", ".", "_get_max_output_length", "=", "models_max_input_output_length", "(", "\n", "models", ",", "\n", "max_output_length_num_stds", ",", "\n", "forced_max_input_length", "=", "max_input_length", ",", "\n", "forced_max_output_length", "=", "max_output_length", ")", "\n", "\n", "self", ".", "nbest_size", "=", "nbest_size", "\n", "utils", ".", "check_condition", "(", "self", ".", "beam_size", ">=", "nbest_size", ",", "'nbest_size must be smaller or equal to beam_size.'", ")", "\n", "if", "self", ".", "nbest_size", ">", "1", ":", "\n", "            ", "utils", ".", "check_condition", "(", "self", ".", "beam_search_stop", "==", "C", ".", "BEAM_SEARCH_STOP_ALL", ",", "\n", "\"nbest_size > 1 requires beam_search_stop to be set to 'all'\"", ")", "\n", "\n", "", "self", ".", "_search", "=", "get_search_algorithm", "(", "\n", "models", "=", "self", ".", "models", ",", "\n", "beam_size", "=", "self", ".", "beam_size", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "output_scores", "=", "output_scores", ",", "\n", "sample", "=", "sample", ",", "\n", "ensemble_mode", "=", "ensemble_mode", ",", "\n", "beam_search_stop", "=", "beam_search_stop", ",", "\n", "scorer", "=", "self", ".", "_scorer", ",", "\n", "constant_length_ratio", "=", "constant_length_ratio", ",", "\n", "prevent_unk", "=", "prevent_unk", ",", "\n", "greedy", "=", "greedy", ",", "\n", "skip_nvs", "=", "skip_nvs", ",", "\n", "nvs_thresh", "=", "nvs_thresh", ")", "\n", "\n", "self", ".", "_concat_translations", "=", "partial", "(", "_concat_nbest_translations", "if", "self", ".", "nbest_size", ">", "1", "else", "_concat_translations", ",", "\n", "stop_ids", "=", "self", ".", "stop_ids", ",", "\n", "scorer", "=", "self", ".", "_scorer", ")", "# type: Callable", "\n", "\n", "logger", ".", "info", "(", "\"Translator (%d model(s) beam_size=%d algorithm=%s, beam_search_stop=%s max_input_length=%s \"", "\n", "\"nbest_size=%s ensemble_mode=%s max_batch_size=%d dtype=%s skip_nvs=%s nvs_thresh=%s)\"", ",", "\n", "len", "(", "self", ".", "models", ")", ",", "\n", "self", ".", "beam_size", ",", "\n", "\"GreedySearch\"", "if", "isinstance", "(", "self", ".", "_search", ",", "GreedySearch", ")", "else", "\"BeamSearch\"", ",", "\n", "self", ".", "beam_search_stop", ",", "\n", "self", ".", "max_input_length", ",", "\n", "self", ".", "nbest_size", ",", "\n", "\"None\"", "if", "len", "(", "self", ".", "models", ")", "==", "1", "else", "ensemble_mode", ",", "\n", "self", ".", "max_batch_size", ",", "\n", "self", ".", "dtype", ",", "\n", "skip_nvs", ",", "\n", "nvs_thresh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator.max_input_length": [[838, 844], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_input_length", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Returns maximum input length for TranslatorInput objects passed to translate()\n        \"\"\"", "\n", "return", "self", ".", "_max_input_length", "-", "C", ".", "SPACE_FOR_XOS", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator.max_batch_size": [[845, 851], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_batch_size", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Returns the maximum batch size allowed for this Translator.\n        \"\"\"", "\n", "return", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator.num_source_factors": [[852, 855], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_source_factors", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "models", "[", "0", "]", ".", "num_source_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator.num_target_factors": [[856, 859], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_target_factors", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "models", "[", "0", "]", ".", "num_target_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator.translate": [[860, 984], ["len", "enumerate", "len", "sorted", "enumerate", "sorted", "len", "itertools.groupby", "zip", "len", "logger.debug", "isinstance", "min", "utils.grouper", "logger.debug", "zip", "list", "results.append", "sorted.append", "logger.info", "len", "len", "logger.debug", "torch.inference_mode", "inference.Translator._translate_np", "sorted.append", "len", "inference.Translator._concat_translations", "inference.Translator._make_result", "inference.IndexedTranslation", "len", "sorted.append", "len", "len", "len", "inference.IndexedTranslation", "inference._remove_target_prefix_tokens", "range", "inference.IndexedTranslation", "logger.warning", "sorted.append", "inference.Translator._get_inference_input", "len", "inference.empty_translation", "inference.IndexedTranslation", "len", "logger.debug", "sorted.extend", "sorted.append", "len", "inference._remove_target_prefix_tokens", "inference.empty_translation", "len", "trans_input_chunk.with_eos", "inference.IndexedTranslatorInput", "inference.empty_translation", "trans_input.chunks", "inference.IndexedTranslatorInput", "enumerate", "trans_input.with_eos"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.grouper", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._translate_np", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._concat_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._make_result", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._remove_target_prefix_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_inference_input", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.empty_translation", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._remove_target_prefix_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.empty_translation", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.with_eos", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.empty_translation", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.chunks", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.with_eos"], ["", "def", "translate", "(", "self", ",", "trans_inputs", ":", "List", "[", "TranslatorInput", "]", ",", "fill_up_batches", ":", "bool", "=", "True", ")", "->", "List", "[", "TranslatorOutput", "]", ":", "\n", "        ", "\"\"\"\n        Batch-translates a list of TranslatorInputs, returns a list of TranslatorOutputs.\n        Empty or bad inputs are skipped.\n        Splits inputs longer than Translator.max_input_length into segments of size max_input_length,\n        and then groups segments into batches of at most Translator.max_batch_size.\n        Too-long segments that were split are reassembled into a single output after translation.\n        If fill_up_batches is set to True, underfilled batches are padded to Translator.max_batch_size, otherwise\n        dynamic batch sizing is used, which comes at increased memory usage.\n\n        :param trans_inputs: List of TranslatorInputs as returned by make_input().\n        :param fill_up_batches: If True, underfilled batches are padded to Translator.max_batch_size.\n        :return: List of translation results.\n        \"\"\"", "\n", "num_inputs", "=", "len", "(", "trans_inputs", ")", "\n", "translated_chunks", "=", "[", "]", "# type: List[IndexedTranslation]", "\n", "\n", "# split into chunks", "\n", "input_chunks", "=", "[", "]", "# type: List[IndexedTranslatorInput]", "\n", "for", "trans_input_idx", ",", "trans_input", "in", "enumerate", "(", "trans_inputs", ")", ":", "\n", "# bad input", "\n", "            ", "if", "isinstance", "(", "trans_input", ",", "BadTranslatorInput", ")", ":", "\n", "                ", "translated_chunks", ".", "append", "(", "IndexedTranslation", "(", "input_idx", "=", "trans_input_idx", ",", "chunk_idx", "=", "0", ",", "\n", "translation", "=", "empty_translation", "(", "add_nbest", "=", "(", "\n", "self", ".", "nbest_size", ">", "1", ")", ")", ")", ")", "\n", "# empty input", "\n", "", "elif", "len", "(", "trans_input", ".", "tokens", ")", "==", "0", ":", "\n", "                ", "translated_chunks", ".", "append", "(", "IndexedTranslation", "(", "input_idx", "=", "trans_input_idx", ",", "chunk_idx", "=", "0", ",", "\n", "translation", "=", "empty_translation", "(", "add_nbest", "=", "(", "\n", "self", ".", "nbest_size", ">", "1", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "# take length of source prefix, if used, into account while chunking", "\n", "                ", "max_input_length_for_chunking", "=", "self", ".", "max_input_length", "-", "trans_input", ".", "num_source_prefix_tokens", "\n", "if", "max_input_length_for_chunking", "<=", "0", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Input %s has a source prefix with length (%d) that already equals or exceeds \"", "\n", "\"max input length (%d). Return an empty translation instead.\"", ",", "\n", "trans_input", ".", "sentence_id", ",", "trans_input", ".", "num_source_prefix_tokens", ",", "self", ".", "max_input_length", ")", "\n", "translated_chunks", ".", "append", "(", "IndexedTranslation", "(", "input_idx", "=", "trans_input_idx", ",", "chunk_idx", "=", "0", ",", "\n", "translation", "=", "empty_translation", "(", "\n", "add_nbest", "=", "(", "self", ".", "nbest_size", ">", "1", ")", ")", ")", ")", "\n", "", "elif", "len", "(", "trans_input", ".", "tokens", ")", ">", "max_input_length_for_chunking", ":", "\n", "# oversized input", "\n", "                    ", "logger", ".", "debug", "(", "\n", "\"Input %s has length (%d) that exceeds max input length (%d). \"", "\n", "\"Splitting into chunks of size %d.\"", ",", "\n", "trans_input", ".", "sentence_id", ",", "len", "(", "trans_input", ".", "tokens", ")", ",", "\n", "max_input_length_for_chunking", ",", "max_input_length_for_chunking", ")", "\n", "chunks", "=", "[", "trans_input_chunk", ".", "with_eos", "(", ")", "\n", "for", "trans_input_chunk", "in", "\n", "trans_input", ".", "chunks", "(", "max_input_length_for_chunking", ")", "]", "\n", "input_chunks", ".", "extend", "(", "[", "IndexedTranslatorInput", "(", "trans_input_idx", ",", "chunk_idx", ",", "chunk_input", ")", "\n", "for", "chunk_idx", ",", "chunk_input", "in", "enumerate", "(", "chunks", ")", "]", ")", "\n", "", "else", ":", "\n", "# regular input", "\n", "                    ", "input_chunks", ".", "append", "(", "IndexedTranslatorInput", "(", "trans_input_idx", ",", "\n", "chunk_idx", "=", "0", ",", "\n", "translator_input", "=", "trans_input", ".", "with_eos", "(", ")", ")", ")", "\n", "\n", "", "", "if", "trans_input", ".", "constraints", "is", "not", "None", ":", "\n", "                ", "logger", ".", "info", "(", "\"Input %s has %d %s: %s\"", ",", "trans_input", ".", "sentence_id", ",", "\n", "len", "(", "trans_input", ".", "constraints", ")", ",", "\n", "\"constraint\"", "if", "len", "(", "trans_input", ".", "constraints", ")", "==", "1", "else", "\"constraints\"", ",", "\n", "\", \"", ".", "join", "(", "\" \"", ".", "join", "(", "x", ")", "for", "x", "in", "trans_input", ".", "constraints", ")", ")", "\n", "\n", "", "", "num_bad_empty", "=", "len", "(", "translated_chunks", ")", "\n", "\n", "# Sort longest to shortest (to rather fill batches of shorter than longer sequences)", "\n", "input_chunks", "=", "sorted", "(", "input_chunks", ",", "key", "=", "lambda", "chunk", ":", "len", "(", "chunk", ".", "translator_input", ".", "tokens", ")", ",", "reverse", "=", "True", ")", "\n", "# translate in batch-sized blocks over input chunks", "\n", "batch_size", "=", "self", ".", "max_batch_size", "if", "fill_up_batches", "else", "min", "(", "len", "(", "input_chunks", ")", ",", "self", ".", "max_batch_size", ")", "\n", "\n", "num_batches", "=", "0", "\n", "for", "batch_id", ",", "batch", "in", "enumerate", "(", "utils", ".", "grouper", "(", "input_chunks", ",", "batch_size", ")", ")", ":", "\n", "            ", "logger", ".", "debug", "(", "\"Translating batch %d\"", ",", "batch_id", ")", "\n", "\n", "rest", "=", "batch_size", "-", "len", "(", "batch", ")", "\n", "if", "fill_up_batches", "and", "rest", ">", "0", ":", "\n", "                ", "logger", ".", "debug", "(", "\"Padding batch of size %d to full batch size (%d)\"", ",", "len", "(", "batch", ")", ",", "batch_size", ")", "\n", "batch", "=", "batch", "+", "[", "batch", "[", "0", "]", "]", "*", "rest", "\n", "\n", "", "translator_inputs", "=", "[", "indexed_translator_input", ".", "translator_input", "for", "indexed_translator_input", "in", "batch", "]", "\n", "with", "pt", ".", "inference_mode", "(", ")", ":", "\n", "                ", "batch_translations", "=", "self", ".", "_translate_np", "(", "*", "self", ".", "_get_inference_input", "(", "translator_inputs", ")", ")", "\n", "\n", "# truncate to remove filler translations", "\n", "", "if", "fill_up_batches", "and", "rest", ">", "0", ":", "\n", "                ", "batch_translations", "=", "batch_translations", "[", ":", "-", "rest", "]", "\n", "\n", "", "for", "chunk", ",", "translation", "in", "zip", "(", "batch", ",", "batch_translations", ")", ":", "\n", "                ", "translated_chunks", ".", "append", "(", "IndexedTranslation", "(", "chunk", ".", "input_idx", ",", "chunk", ".", "chunk_idx", ",", "translation", ")", ")", "\n", "", "num_batches", "+=", "1", "\n", "# Sort by input idx and then chunk id", "\n", "", "translated_chunks", "=", "sorted", "(", "translated_chunks", ")", "\n", "num_chunks", "=", "len", "(", "translated_chunks", ")", "\n", "\n", "# Concatenate results", "\n", "results", "=", "[", "]", "# type: List[TranslatorOutput]", "\n", "chunks_by_input_idx", "=", "itertools", ".", "groupby", "(", "translated_chunks", ",", "key", "=", "lambda", "translation", ":", "translation", ".", "input_idx", ")", "\n", "for", "trans_input", ",", "(", "input_idx", ",", "translations_for_input_idx", ")", "in", "zip", "(", "trans_inputs", ",", "chunks_by_input_idx", ")", ":", "\n", "            ", "translations_for_input_idx", "=", "list", "(", "translations_for_input_idx", ")", "# type: ignore", "\n", "num_target_prefix_tokens", "=", "trans_input", ".", "num_target_prefix_tokens", "\n", "if", "len", "(", "translations_for_input_idx", ")", "==", "1", ":", "# type: ignore", "\n", "                ", "translation", "=", "translations_for_input_idx", "[", "0", "]", ".", "translation", "# type: ignore", "\n", "if", "num_target_prefix_tokens", ">", "0", "and", "not", "trans_input", ".", "keep_target_prefix_key", ":", "\n", "                    ", "translation", ".", "target_ids", "=", "_remove_target_prefix_tokens", "(", "translation", ".", "target_ids", ",", "num_target_prefix_tokens", ")", "\n", "", "", "else", ":", "\n", "                ", "translations_to_concat", "=", "[", "translated_chunk", ".", "translation", "\n", "for", "translated_chunk", "in", "translations_for_input_idx", "]", "\n", "if", "num_target_prefix_tokens", ">", "0", "and", "not", "trans_input", ".", "keep_target_prefix_key", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "translations_to_concat", ")", ")", ":", "\n", "                        ", "if", "i", "==", "0", "or", "trans_input", ".", "use_target_prefix_all_chunks", ":", "\n", "                            ", "translations_to_concat", "[", "i", "]", ".", "target_ids", "=", "_remove_target_prefix_tokens", "(", "translations_to_concat", "[", "i", "]", ".", "target_ids", ",", "num_target_prefix_tokens", ")", "\n", "", "", "", "translation", "=", "self", ".", "_concat_translations", "(", "translations_to_concat", ")", "\n", "\n", "", "results", ".", "append", "(", "self", ".", "_make_result", "(", "trans_input", ",", "translation", ")", ")", "\n", "\n", "", "num_outputs", "=", "len", "(", "results", ")", "\n", "\n", "logger", ".", "debug", "(", "\"Translated %d inputs (%d chunks) in %d batches to %d outputs. %d empty/bad inputs.\"", ",", "\n", "num_inputs", ",", "num_chunks", ",", "num_batches", ",", "num_outputs", ",", "num_bad_empty", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_inference_input": [[985, 1085], ["len", "max", "max", "max", "numpy.zeros", "enumerate", "torch.tensor", "torch.tensor", "torch.tensor", "len", "numpy.zeros", "numpy.zeros", "len", "max_output_lengths.append", "data_io.tokens2ids", "isinstance", "logger.info", "torch.tensor", "torch.tensor", "utils.shift_prefix_factors", "len", "inference.Translator._get_max_output_length", "itertools.chain", "data_io.tokens2ids", "range", "len", "logger.warning", "enumerate", "enumerate", "trans_input.get_source_prefix_tokens", "trans_input.get_target_prefix_tokens", "data_io.tokens2ids", "zip", "logger.warning", "isinstance", "data_io.tokens2ids", "data_io.tokens2ids", "trans_input.get_target_prefix_factors", "itertools.chain"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.tokens2ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.shift_prefix_factors", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.tokens2ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.get_source_prefix_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.get_target_prefix_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.tokens2ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.tokens2ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.tokens2ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorInput.get_target_prefix_factors"], ["", "def", "_get_inference_input", "(", "self", ",", "\n", "trans_inputs", ":", "List", "[", "TranslatorInput", "]", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "\n", "pt", ".", "Tensor", ",", "\n", "Optional", "[", "lexicon", ".", "RestrictLexicon", "]", ",", "\n", "pt", ".", "Tensor", ",", "\n", "Optional", "[", "pt", ".", "Tensor", "]", ",", "\n", "Optional", "[", "pt", ".", "Tensor", "]", "]", ":", "\n", "        ", "\"\"\"\n        Assembles the numerical data for the batch. This comprises a tensor for the source sentences,\n        the bucket key (padded source length), a tensor of maximum output lengths for each sentence in the batch.\n\n        :param trans_inputs: List of TranslatorInputs.\n        :return tensor of source ids (shape=(batch_size, bucket_key, num_factors)),\n                tensor of valid source lengths, lexicon for vocabulary restriction, tensor of maximum output lengths,\n                optional target prefix, and optional target prefix factors.\n        \"\"\"", "\n", "batch_size", "=", "len", "(", "trans_inputs", ")", "\n", "lengths", "=", "[", "len", "(", "inp", ")", "for", "inp", "in", "trans_inputs", "]", "\n", "\n", "max_target_prefix_length", "=", "max", "(", "inp", ".", "num_target_prefix_tokens", "for", "inp", "in", "trans_inputs", ")", "\n", "max_target_prefix_factors_length", "=", "max", "(", "inp", ".", "num_target_prefix_factors", "for", "inp", "in", "trans_inputs", ")", "\n", "max_length", "=", "max", "(", "len", "(", "inp", ")", "for", "inp", "in", "trans_inputs", ")", "\n", "# assembling source ids on cpu array (faster) and copy to Translator.device (potentially GPU) in one go below.", "\n", "source_np", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_length", ",", "self", ".", "num_source_factors", ")", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "target_prefix_np", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_target_prefix_length", ")", ",", "dtype", "=", "'int32'", ")", "if", "max_target_prefix_length", ">", "0", "else", "None", "\n", "target_prefix_factors_np", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_target_prefix_factors_length", ",", "\n", "self", ".", "num_target_factors", "-", "1", ")", ",", "dtype", "=", "'int32'", ")", "if", "self", ".", "num_target_factors", ">", "1", "and", "max_target_prefix_factors_length", ">", "0", "else", "None", "\n", "restrict_lexicon", "=", "None", "# type: Optional[lexicon.RestrictLexicon]", "\n", "\n", "max_output_lengths", "=", "[", "]", "# type: List[int]", "\n", "for", "j", ",", "trans_input", "in", "enumerate", "(", "trans_inputs", ")", ":", "\n", "            ", "num_tokens", "=", "len", "(", "trans_input", ")", "# includes eos", "\n", "max_output_lengths", ".", "append", "(", "self", ".", "_get_max_output_length", "(", "num_tokens", ")", ")", "\n", "source_np", "[", "j", ",", ":", "num_tokens", ",", "0", "]", "=", "tokens2ids", "(", "itertools", ".", "chain", "(", "trans_input", ".", "get_source_prefix_tokens", "(", ")", ",", "\n", "trans_input", ".", "tokens", ")", ",", "self", ".", "source_vocabs", "[", "0", "]", ")", "\n", "if", "target_prefix_np", "is", "not", "None", "and", "trans_input", ".", "num_target_prefix_tokens", ">", "0", ":", "\n", "                ", "target_prefix_np", "[", "j", ",", ":", "trans_input", ".", "num_target_prefix_tokens", "]", "=", "tokens2ids", "(", "trans_input", ".", "get_target_prefix_tokens", "(", ")", ",", "self", ".", "vocab_targets", "[", "0", "]", ")", "\n", "", "if", "target_prefix_factors_np", "is", "not", "None", "and", "self", ".", "num_target_factors", ">", "1", "and", "trans_input", ".", "num_target_prefix_factors", ">", "0", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_target_factors", ")", ":", "\n", "                    ", "target_prefix_factors_np", "[", "j", ",", ":", "trans_input", ".", "num_target_prefix_factors", ",", "i", "-", "1", "]", "=", "tokens2ids", "(", "trans_input", ".", "get_target_prefix_factors", "(", ")", "[", "i", "-", "1", "]", ",", "self", ".", "vocab_targets", "[", "i", "]", ")", "\n", "", "", "factors", "=", "trans_input", ".", "factors", "if", "trans_input", ".", "factors", "is", "not", "None", "else", "[", "]", "\n", "num_factors", "=", "1", "+", "len", "(", "factors", ")", "\n", "if", "num_factors", "!=", "self", ".", "num_source_factors", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Input %d factors, but model(s) expect %d\"", ",", "num_factors", ",", "\n", "self", ".", "num_source_factors", ")", "\n", "", "if", "not", "trans_input", ".", "source_prefix_factors", ":", "# no source prefix during inference", "\n", "                ", "for", "i", ",", "factor", "in", "enumerate", "(", "factors", "[", ":", "self", ".", "num_source_factors", "-", "1", "]", ",", "start", "=", "1", ")", ":", "\n", "# fill in as many factors as there are tokens", "\n", "                    ", "source_np", "[", "j", ",", ":", "num_tokens", ",", "i", "]", "=", "tokens2ids", "(", "factor", ",", "self", ".", "source_vocabs", "[", "i", "]", ")", "[", ":", "num_tokens", "]", "\n", "", "", "else", ":", "\n", "                ", "for", "i", ",", "zip_of_factor_and_prefix_factor", "in", "enumerate", "(", "\n", "zip", "(", "factors", "[", ":", "self", ".", "num_source_factors", "-", "1", "]", ",", "\n", "trans_input", ".", "source_prefix_factors", "[", ":", "self", ".", "num_source_factors", "-", "1", "]", ")", ",", "\n", "start", "=", "1", ")", ":", "\n", "                    ", "factor", ",", "source_prefix_factor", "=", "zip_of_factor_and_prefix_factor", "\n", "source_np", "[", "j", ",", ":", "num_tokens", ",", "i", "]", "=", "tokens2ids", "(", "itertools", ".", "chain", "(", "source_prefix_factor", ",", "factor", ")", ",", "\n", "self", ".", "source_vocabs", "[", "i", "]", ")", "[", ":", "num_tokens", "]", "\n", "\n", "# Check if vocabulary selection/restriction is enabled:", "\n", "# - First, see if the translator input provides a lexicon (used for multiple lexicons)", "\n", "# - If not, see if the translator itself provides a lexicon (used for single lexicon)", "\n", "# - The same lexicon must be used for all inputs in the batch.", "\n", "", "", "if", "trans_input", ".", "restrict_lexicon", "is", "not", "None", ":", "\n", "                ", "if", "restrict_lexicon", "is", "not", "None", "and", "restrict_lexicon", "is", "not", "trans_input", ".", "restrict_lexicon", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Sentence %s: different restrict_lexicon specified, will overrule previous. \"", "\n", "\"All inputs in batch must use same lexicon.\"", "%", "trans_input", ".", "sentence_id", ")", "\n", "", "restrict_lexicon", "=", "trans_input", ".", "restrict_lexicon", "\n", "", "elif", "self", ".", "restrict_lexicon", "is", "not", "None", ":", "\n", "                ", "if", "isinstance", "(", "self", ".", "restrict_lexicon", ",", "dict", ")", ":", "\n", "                    ", "restrict_lexicon", "=", "None", "\n", "", "else", ":", "\n", "                    ", "restrict_lexicon", "=", "self", ".", "restrict_lexicon", "\n", "\n", "", "", "", "if", "restrict_lexicon", "is", "None", "and", "isinstance", "(", "self", ".", "restrict_lexicon", ",", "dict", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"No restrict_lexicon specified for input when using multiple lexicons, \"", "\n", "\"will default to not using a restrict lexicon.\"", ")", "\n", "\n", "", "source", "=", "pt", ".", "tensor", "(", "source_np", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "pt", ".", "int32", ")", "\n", "source_length", "=", "pt", ".", "tensor", "(", "lengths", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "pt", ".", "int32", ")", "# shape: (batch_size,)", "\n", "max_out_lengths", "=", "pt", ".", "tensor", "(", "max_output_lengths", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "pt", ".", "int32", ")", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "target_prefix_np", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "pt", ".", "int32", ")", "if", "target_prefix_np", "is", "not", "None", "else", "None", "\n", "target_prefix_factors", "=", "pt", ".", "tensor", "(", "target_prefix_factors_np", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "pt", ".", "int32", ")", "if", "target_prefix_factors_np", "is", "not", "None", "else", "None", "\n", "\n", "# During inference, if C.TARGET_FACTOR_SHIFT is True, predicted target_factors are left-shifted", "\n", "# (see _unshift_target_factors function()) so that they re-align with the words.", "\n", "# With that, target_prefix_factors need to be also right-shifted here if C.TARGET_FACTOR_SHIFT is True so", "\n", "# that when they are shifted back later they would align with words.", "\n", "target_prefix_factors", "=", "utils", ".", "shift_prefix_factors", "(", "target_prefix_factors", ")", "if", "target_prefix_factors", "is", "not", "None", "and", "C", ".", "TARGET_FACTOR_SHIFT", "else", "target_prefix_factors", "\n", "\n", "return", "source", ",", "source_length", ",", "restrict_lexicon", ",", "max_out_lengths", ",", "target_prefix", ",", "target_prefix_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_translation_tokens_and_factors": [[1086, 1116], ["enumerate", "zip", "constants.TOKEN_SEPARATOR.join", "all_target_tokens.append", "all_target_strings.append", "range", "range", "len", "len"], "methods", ["None"], ["", "def", "_get_translation_tokens_and_factors", "(", "self", ",", "target_ids", ":", "List", "[", "List", "[", "int", "]", "]", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "\n", "str", ",", "\n", "List", "[", "List", "[", "str", "]", "]", ",", "\n", "List", "[", "str", "]", "]", ":", "\n", "        ", "\"\"\"\n        Separates surface translation from factors. Input is a nested list of target ids.\n        Creates tokens and output string for surface translation and for each factor, using the inverted target-side\n        vocabularies. Ensures that factor strings are of the same length as the translation string.\n\n        :param target_ids: Nested list of target ids.\n        \"\"\"", "\n", "all_target_tokens", "=", "[", "]", "# type: List[List[str]]", "\n", "all_target_strings", "=", "[", "]", "# type: List[str]", "\n", "# Strip any position where primary factor token is to be stripped", "\n", "pruned_target_ids", "=", "(", "tokens", "for", "tokens", "in", "target_ids", "if", "not", "tokens", "[", "0", "]", "in", "self", ".", "strip_ids", ")", "\n", "for", "factor_index", ",", "factor_sequence", "in", "enumerate", "(", "zip", "(", "*", "pruned_target_ids", ")", ")", ":", "\n", "            ", "vocab_target_inv", "=", "self", ".", "vocab_targets_inv", "[", "factor_index", "]", "\n", "target_tokens", "=", "[", "vocab_target_inv", "[", "target_id", "]", "for", "target_id", "in", "factor_sequence", "]", "\n", "target_string", "=", "C", ".", "TOKEN_SEPARATOR", ".", "join", "(", "target_tokens", ")", "\n", "all_target_tokens", ".", "append", "(", "target_tokens", ")", "\n", "all_target_strings", ".", "append", "(", "target_string", ")", "\n", "\n", "", "if", "not", "all_target_strings", ":", "\n", "            ", "all_target_tokens", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "self", ".", "vocab_targets_inv", ")", ")", "]", "\n", "all_target_strings", "=", "[", "''", "for", "_", "in", "range", "(", "len", "(", "self", ".", "vocab_targets_inv", ")", ")", "]", "\n", "\n", "", "tokens", ",", "*", "factor_tokens", "=", "all_target_tokens", "\n", "translation", ",", "*", "factor_translations", "=", "all_target_strings", "\n", "\n", "return", "tokens", ",", "translation", ",", "factor_tokens", ",", "factor_translations", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._make_result": [[1117, 1161], ["inference.Translator._get_translation_tokens_and_factors", "inference.TranslatorOutput", "inference.Translator._get_translation_tokens_and_factors", "nbest_tokens.append", "nbest_translations.append", "nbest_factor_tokens.append", "nbest_factor_translations.append"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_translation_tokens_and_factors", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_translation_tokens_and_factors"], ["", "def", "_make_result", "(", "self", ",", "\n", "trans_input", ":", "TranslatorInput", ",", "\n", "translation", ":", "Translation", ")", "->", "TranslatorOutput", ":", "\n", "        ", "\"\"\"\n        Returns a translator result from generated target-side word ids and scores.\n        Strips stop ids from translation string.\n\n        :param trans_input: Translator input.\n        :param translation: The translation and score.\n        :return: TranslatorOutput.\n        \"\"\"", "\n", "primary_tokens", ",", "primary_translation", ",", "factor_tokens", ",", "factor_translations", "=", "self", ".", "_get_translation_tokens_and_factors", "(", "translation", ".", "target_ids", ")", "\n", "\n", "if", "translation", ".", "nbest_translations", "is", "None", ":", "\n", "            ", "nbest_translations", "=", "None", "\n", "nbest_tokens", "=", "None", "\n", "nbest_scores", "=", "None", "\n", "nbest_factor_translations", "=", "None", "\n", "nbest_factor_tokens", "=", "None", "\n", "", "else", ":", "\n", "            ", "nbest_tokens", ",", "nbest_translations", ",", "nbest_factor_tokens", ",", "nbest_factor_translations", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "nbest_target_ids", "in", "translation", ".", "nbest_translations", ".", "target_ids_list", ":", "\n", "                ", "ith_target_tokens", ",", "ith_primary_translation", ",", "ith_nbest_factor_tokens", ",", "ith_nbest_factor_translations", "=", "self", ".", "_get_translation_tokens_and_factors", "(", "nbest_target_ids", ")", "\n", "nbest_tokens", ".", "append", "(", "ith_target_tokens", ")", "\n", "nbest_translations", ".", "append", "(", "ith_primary_translation", ")", "\n", "nbest_factor_tokens", ".", "append", "(", "ith_nbest_factor_tokens", ")", "\n", "nbest_factor_translations", ".", "append", "(", "ith_nbest_factor_translations", ")", "\n", "", "nbest_scores", "=", "translation", ".", "nbest_translations", ".", "scores", "\n", "\n", "", "return", "TranslatorOutput", "(", "sentence_id", "=", "trans_input", ".", "sentence_id", ",", "\n", "translation", "=", "primary_translation", ",", "\n", "tokens", "=", "primary_tokens", ",", "\n", "score", "=", "translation", ".", "scores", "[", "0", "]", ",", "\n", "pass_through_dict", "=", "trans_input", ".", "pass_through_dict", ",", "\n", "nbest_translations", "=", "nbest_translations", ",", "\n", "nbest_tokens", "=", "nbest_tokens", ",", "\n", "nbest_scores", "=", "nbest_scores", ",", "\n", "factor_translations", "=", "factor_translations", ",", "\n", "factor_tokens", "=", "factor_tokens", ",", "\n", "factor_scores", "=", "translation", ".", "scores", "[", "1", ":", "]", ",", "\n", "nbest_factor_translations", "=", "nbest_factor_translations", ",", "\n", "nbest_factor_tokens", "=", "nbest_factor_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._translate_np": [[1162, 1188], ["inference.Translator._get_best_translations", "inference.Translator._search"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_translations"], ["", "def", "_translate_np", "(", "self", ",", "\n", "source", ":", "pt", ".", "Tensor", ",", "\n", "source_length", ":", "pt", ".", "Tensor", ",", "\n", "restrict_lexicon", ":", "Optional", "[", "lexicon", ".", "RestrictLexicon", "]", ",", "\n", "max_output_lengths", ":", "pt", ".", "Tensor", ",", "\n", "target_prefix", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "\n", "target_prefix_factors", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "List", "[", "Translation", "]", ":", "\n", "        ", "\"\"\"\n        Translates source of source_length and returns list of Translations.\n\n        :param source: Source ids. Shape: (batch_size, bucket_key, num_factors).\n        :param source_length: Valid source lengths.\n        :param restrict_lexicon: Lexicon to use for vocabulary restriction.\n        :param max_output_lengths: Tensor of maximum output lengths per input in source.\n                 Shape: (batch_size,). Dtype: int32.\n        :param target_prefix: Target prefix ids.\n        :param target_prefix_factors: Target prefix factors ids.\n\n        :return: List of translations.\n        \"\"\"", "\n", "return", "self", ".", "_get_best_translations", "(", "self", ".", "_search", "(", "source", ",", "\n", "source_length", ",", "\n", "restrict_lexicon", ",", "\n", "max_output_lengths", ",", "\n", "target_prefix", ",", "\n", "target_prefix_factors", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_translations": [[1189, 1226], ["result.best_hyp_indices.cpu().numpy", "result.best_word_indices.cpu().numpy", "result.accumulated_scores.cpu().numpy", "result.lengths.cpu().numpy", "range", "result.estimated_reference_lengths.cpu().numpy", "numpy.zeros", "numpy.arange", "inference.Translator._get_best_word_indices_for_kth_hypotheses", "nbest_translations.append", "inference._reduce_nbest_translations", "result.best_hyp_indices.cpu", "result.best_word_indices.cpu", "result.accumulated_scores.cpu", "result.lengths.cpu", "zip", "result.estimated_reference_lengths.cpu", "inference.Translator._assemble_translation", "zip", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._reduce_nbest_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._assemble_translation"], ["", "def", "_get_best_translations", "(", "self", ",", "result", ":", "SearchResult", ")", "->", "List", "[", "Translation", "]", ":", "\n", "        ", "\"\"\"\n        Return the nbest (aka n top) entries from the n-best list.\n\n        :param result: SearchResult from Beam or Greedy search.\n        :return: List of Translation objects containing all relevant information.\n        \"\"\"", "\n", "best_hyp_indices", "=", "result", ".", "best_hyp_indices", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "best_word_indices", "=", "result", ".", "best_word_indices", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "accumulated_scores", "=", "result", ".", "accumulated_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "lengths", "=", "result", ".", "lengths", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "estimated_reference_lengths", "=", "None", "\n", "if", "result", ".", "estimated_reference_lengths", "is", "not", "None", ":", "\n", "            ", "estimated_reference_lengths", "=", "result", ".", "estimated_reference_lengths", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "batch_size", "=", "best_hyp_indices", ".", "shape", "[", "0", "]", "//", "self", ".", "beam_size", "\n", "nbest_translations", "=", "[", "]", "# type: List[List[Translation]]", "\n", "reference_lengths", "=", "estimated_reference_lengths", "if", "estimated_reference_lengths", "is", "not", "None", "else", "np", ".", "zeros", "(", "(", "batch_size", "*", "self", ".", "beam_size", ",", "1", ")", ")", "\n", "for", "n", "in", "range", "(", "0", ",", "self", ".", "nbest_size", ")", ":", "\n", "\n", "# Initialize the best_ids to the first item in each batch, plus current nbest index", "\n", "            ", "best_ids", "=", "np", ".", "arange", "(", "n", ",", "batch_size", "*", "self", ".", "beam_size", ",", "self", ".", "beam_size", ",", "dtype", "=", "'int32'", ")", "\n", "# Obtain sequences for all best hypotheses in the batch. Shape: (batch, length)", "\n", "indices", "=", "self", ".", "_get_best_word_indices_for_kth_hypotheses", "(", "best_ids", ",", "best_hyp_indices", ")", "# type: ignore", "\n", "indices_shape_1", "=", "indices", ".", "shape", "[", "1", "]", "# pylint: disable=unsubscriptable-object", "\n", "nbest_translations", ".", "append", "(", "\n", "[", "self", ".", "_assemble_translation", "(", "*", "x", ",", "unshift_target_factors", "=", "C", ".", "TARGET_FACTOR_SHIFT", ")", "for", "x", "in", "\n", "zip", "(", "best_word_indices", "[", "indices", ",", "\n", ":", ",", "# get all factors", "\n", "np", ".", "arange", "(", "indices_shape_1", ")", "]", ",", "\n", "lengths", "[", "best_ids", "]", ",", "\n", "accumulated_scores", "[", "best_ids", "]", ",", "\n", "reference_lengths", "[", "best_ids", "]", ")", "]", ")", "# type: ignore", "\n", "\n", "# reorder and regroup lists", "\n", "", "reduced_translations", "=", "[", "_reduce_nbest_translations", "(", "grouped_nbest", ")", "for", "grouped_nbest", "in", "zip", "(", "*", "nbest_translations", ")", "]", "# type: ignore", "\n", "return", "reduced_translations", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._get_best_word_indices_for_kth_hypotheses": [[1227, 1250], ["numpy.zeros", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_best_word_indices_for_kth_hypotheses", "(", "ks", ":", "np", ".", "ndarray", ",", "all_hyp_indices", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Traverses the matrix of best hypotheses indices collected during beam search in reversed order by\n        using the kth hypotheses index as a backpointer.\n        Returns an array containing the indices into the best_word_indices collected during beam search to extract\n        the kth hypotheses.\n\n        :param ks: The kth-best hypotheses to extract. Supports multiple for batch_size > 1. Shape: (batch,).\n        :param all_hyp_indices: All best hypotheses indices list collected in beam search. Shape: (batch * beam, steps).\n        :return: Array of indices into the best_word_indices collected in beam search\n            that extract the kth-best hypothesis. Shape: (batch,).\n        \"\"\"", "\n", "batch_size", "=", "ks", ".", "shape", "[", "0", "]", "\n", "num_steps", "=", "all_hyp_indices", ".", "shape", "[", "1", "]", "\n", "result", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_steps", "-", "1", ")", ",", "dtype", "=", "all_hyp_indices", ".", "dtype", ")", "\n", "# first index into the history of the desired hypotheses.", "\n", "pointer", "=", "all_hyp_indices", "[", "ks", ",", "-", "1", "]", "\n", "# for each column/step follow the pointer, starting from the penultimate column/step", "\n", "for", "step", "in", "range", "(", "num_steps", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "result", "[", ":", ",", "step", "]", "=", "pointer", "\n", "pointer", "=", "all_hyp_indices", "[", "pointer", ",", "step", "]", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator._assemble_translation": [[1251, 1277], ["int", "seq_scores.tolist", "inference.Translation", "inference._unshift_target_factors", "sequence.tolist.tolist.tolist", "float"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._unshift_target_factors"], ["", "@", "staticmethod", "\n", "def", "_assemble_translation", "(", "sequence", ":", "np", ".", "ndarray", ",", "\n", "length", ":", "np", ".", "ndarray", ",", "\n", "seq_scores", ":", "np", ".", "ndarray", ",", "\n", "estimated_reference_length", ":", "Optional", "[", "float", "]", ",", "\n", "unshift_target_factors", ":", "bool", "=", "False", ")", "->", "Translation", ":", "\n", "        ", "\"\"\"\n        Takes a set of data pertaining to a single translated item, performs slightly different\n        processing on each, and merges it into a Translation object.\n        :param sequence: Array of word ids. Shape: (bucketed_length, num_target_factors).\n        :param length: The length of the translated segment.\n        :param seq_scores: Array of length-normalized negative log-probs, one for each factor.\n        :param estimated_reference_length: Estimated reference length (if any).\n        :return: A Translation object.\n        \"\"\"", "\n", "if", "unshift_target_factors", ":", "\n", "            ", "sequence", "=", "_unshift_target_factors", "(", "sequence", ",", "fill_last_with", "=", "C", ".", "EOS_ID", ")", "\n", "", "else", ":", "\n", "            ", "sequence", "=", "sequence", ".", "tolist", "(", ")", "\n", "", "length", "=", "int", "(", "length", ")", "# type: ignore", "\n", "sequence", "=", "sequence", "[", ":", "length", "]", "# type: ignore", "\n", "scores", "=", "seq_scores", ".", "tolist", "(", ")", "\n", "estimated_reference_length", "=", "float", "(", "estimated_reference_length", ")", "if", "estimated_reference_length", "else", "None", "\n", "return", "Translation", "(", "sequence", ",", "scores", ",", "# type: ignore", "\n", "nbest_translations", "=", "None", ",", "\n", "estimated_reference_length", "=", "estimated_reference_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.models_max_input_output_length": [[40, 68], ["max", "max", "min", "min", "inference.get_max_input_output_length"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.get_max_input_output_length"], ["def", "models_max_input_output_length", "(", "models", ":", "List", "[", "SockeyeModel", "]", ",", "\n", "num_stds", ":", "int", ",", "\n", "forced_max_input_length", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "forced_max_output_length", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "Tuple", "[", "int", ",", "Callable", "]", ":", "\n", "    ", "\"\"\"\n    Returns a function to compute maximum output length given a fixed number of standard deviations as a\n    safety margin, and the current input length.\n    Mean and std are taken from the model with the largest values to allow proper ensembling of models\n    trained on different data sets.\n\n    :param models: List of models.\n    :param num_stds: Number of standard deviations to add as a safety margin. If -1, returned maximum output lengths\n                     will always be 2 * input_length.\n    :param forced_max_input_length: An optional overwrite of the maximum input length. Does not include eos.\n    :param forced_max_output_length: An optional overwrite of the maximum output length. Does not include bos.\n    :return: The maximum input length and a function to get the output length given the input length.\n    \"\"\"", "\n", "max_mean", "=", "max", "(", "model", ".", "length_ratio_mean", "for", "model", "in", "models", ")", "\n", "max_std", "=", "max", "(", "model", ".", "length_ratio_std", "for", "model", "in", "models", ")", "\n", "supported_max_seq_len_source", "=", "min", "(", "(", "model", ".", "max_supported_len_source", "for", "model", "in", "models", ")", ")", "\n", "supported_max_seq_len_target", "=", "min", "(", "(", "model", ".", "max_supported_len_target", "for", "model", "in", "models", ")", ")", "\n", "return", "get_max_input_output_length", "(", "supported_max_seq_len_source", ",", "\n", "supported_max_seq_len_target", ",", "\n", "length_ratio_mean", "=", "max_mean", ",", "\n", "length_ratio_std", "=", "max_std", ",", "\n", "num_stds", "=", "num_stds", ",", "\n", "forced_max_input_len", "=", "forced_max_input_length", ",", "\n", "forced_max_output_len", "=", "forced_max_output_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.get_max_input_output_length": [[70, 111], ["min", "int", "numpy.ceil"], "function", ["None"], ["", "def", "get_max_input_output_length", "(", "supported_max_seq_len_source", ":", "int", ",", "\n", "supported_max_seq_len_target", ":", "int", ",", "\n", "length_ratio_mean", ":", "float", ",", "\n", "length_ratio_std", ":", "float", ",", "\n", "num_stds", ":", "int", ",", "\n", "forced_max_input_len", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "forced_max_output_len", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "Tuple", "[", "int", ",", "Callable", "]", ":", "\n", "    ", "\"\"\"\n    Returns a function to compute maximum output length given a fixed number of standard deviations as a\n    safety margin, and the current input length. It takes into account optional maximum source and target lengths.\n\n    :param supported_max_seq_len_source: The maximum source length supported by the models (includes eos).\n    :param supported_max_seq_len_target: The maximum target length supported by the models (includes bos).\n    :param length_ratio_mean: Length ratio mean computed on the training data (including bos/eos).\n    :param length_ratio_std: The standard deviation of the length ratio.\n    :param num_stds: The number of standard deviations the target length may exceed the mean target length (as long as\n           the supported maximum length allows for this).\n    :param forced_max_input_len: An optional overwrite of the maximum input length. Does not include eos.\n    :param forced_max_output_len: An optional overwrite of the maximum output length. Does not include bos.\n    :return: The maximum input length and a function to get the output length given the input length.\n    \"\"\"", "\n", "\n", "if", "num_stds", "<", "0", ":", "\n", "        ", "factor", "=", "C", ".", "TARGET_MAX_LENGTH_FACTOR", "# type: float", "\n", "", "else", ":", "\n", "        ", "factor", "=", "length_ratio_mean", "+", "(", "length_ratio_std", "*", "num_stds", ")", "\n", "\n", "", "if", "forced_max_input_len", "is", "not", "None", ":", "\n", "        ", "max_input_len", "=", "min", "(", "supported_max_seq_len_source", ",", "forced_max_input_len", "+", "C", ".", "SPACE_FOR_XOS", ")", "\n", "", "else", ":", "\n", "        ", "max_input_len", "=", "supported_max_seq_len_source", "\n", "\n", "", "def", "get_max_output_length", "(", "input_length", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Returns the maximum output length (including bos/eos) for inference given an input length that includes <eos>.\n        \"\"\"", "\n", "if", "forced_max_output_len", "is", "not", "None", ":", "\n", "            ", "return", "forced_max_output_len", "+", "C", ".", "SPACE_FOR_XOS", "\n", "", "return", "int", "(", "np", ".", "ceil", "(", "factor", "*", "input_length", ")", ")", "\n", "\n", "", "return", "max_input_len", ",", "get_max_output_length", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._bad_input": [[262, 265], ["logger.warning", "inference.BadTranslatorInput", "reason.strip"], "function", ["None"], ["", "", "def", "_bad_input", "(", "sentence_id", ":", "SentenceId", ",", "reason", ":", "str", "=", "''", ")", "->", "BadTranslatorInput", ":", "\n", "    ", "logger", ".", "warning", "(", "\"Bad input (%s): '%s'. Will return empty output.\"", ",", "sentence_id", ",", "reason", ".", "strip", "(", ")", ")", "\n", "return", "BadTranslatorInput", "(", "sentence_id", "=", "sentence_id", ",", "tokens", "=", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_plain_string": [[267, 276], ["inference.TranslatorInput", "list", "utils.get_tokens"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens"], ["", "def", "make_input_from_plain_string", "(", "sentence_id", ":", "SentenceId", ",", "string", ":", "str", ")", "->", "TranslatorInput", ":", "\n", "    ", "\"\"\"\n    Returns a TranslatorInput object from a plain string.\n\n    :param sentence_id: Sentence id.\n    :param string: An input string.\n    :return: A TranslatorInput.\n    \"\"\"", "\n", "return", "TranslatorInput", "(", "sentence_id", ",", "tokens", "=", "list", "(", "utils", ".", "get_tokens", "(", "string", ")", ")", ",", "factors", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_json_string": [[278, 299], ["json.loads", "inference.make_input_from_dict", "logger.exception", "inference._bad_input"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._bad_input"], ["", "def", "make_input_from_json_string", "(", "sentence_id", ":", "SentenceId", ",", "\n", "json_string", ":", "str", ",", "\n", "translator", ":", "'Translator'", ")", "->", "TranslatorInput", ":", "\n", "    ", "\"\"\"\n    Returns a TranslatorInput object from a JSON object, serialized as a string.\n\n    :param sentence_id: Sentence id.\n    :param json_string: A JSON object serialized as a string that must contain a key \"text\", mapping to the input text,\n           and optionally a key \"factors\" that maps to a list of strings, each of which representing a factor sequence\n           for the input text. Constraints and an avoid list can also be added through the \"constraints\" and \"avoid\"\n           keys.\n    :param translator: A translator object.\n    :return: A TranslatorInput.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "jobj", "=", "json", ".", "loads", "(", "json_string", ")", "\n", "return", "make_input_from_dict", "(", "sentence_id", ",", "jobj", ",", "translator", ")", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "logger", ".", "exception", "(", "e", ",", "exc_info", "=", "True", ")", "# type: ignore", "\n", "return", "_bad_input", "(", "sentence_id", ",", "reason", "=", "json_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_dict": [[301, 417], ["list", "input_dict.get", "input_dict.get", "input_dict.get", "isinstance", "isinstance", "input_dict.get", "input_dict.get", "isinstance", "input_dict.get", "input_dict.get", "input_dict.get", "input_dict.get", "input_dict.get", "isinstance", "isinstance", "inference.TranslatorInput", "utils.get_tokens", "list", "logger.warning", "logger.error", "inference._bad_input", "logger.error", "inference._bad_input", "logger.error", "inference._bad_input", "list", "logger.warning", "isinstance", "translator.restrict_lexicon.get", "set", "set().intersection", "logger.exception", "inference._bad_input", "utils.get_tokens", "list", "len", "all", "logger.error", "inference._bad_input", "list", "len", "all", "logger.error", "inference._bad_input", "len", "len", "logger.error", "inference._bad_input", "utils.get_tokens", "list", "len", "logger.error", "inference._bad_input", "logger.error", "inference._bad_input", "len", "logger.warning", "list", "list", "list", "str", "str", "str", "utils.get_tokens", "len", "str", "utils.get_tokens", "logger.warning", "len", "str", "len", "len", "utils.get_tokens", "len", "set", "set.difference", "utils.get_tokens", "utils.get_tokens", "str", "str", "str", "str", "str", "str", "len", "len", "sorted"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._bad_input", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._bad_input", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._bad_input", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._bad_input", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._bad_input", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._bad_input", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._bad_input", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._bad_input", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._bad_input", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens"], ["", "", "def", "make_input_from_dict", "(", "sentence_id", ":", "SentenceId", ",", "\n", "input_dict", ":", "Dict", ",", "\n", "translator", ":", "'Translator'", ")", "->", "TranslatorInput", ":", "\n", "    ", "\"\"\"\n    Returns a TranslatorInput object from a JSON object, serialized as a string.\n\n    :param sentence_id: Sentence id.\n    :param input_dict: A dict that must contain a key \"text\", mapping to the input text, and optionally a key \"factors\"\n           that maps to a list of strings, each of which representing a factor sequence for the input text.\n           Constraints and an avoid list can also be added through the \"constraints\" and \"avoid\" keys.\n    :param translator: A translator object.\n    :return: A TranslatorInput.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "tokens", "=", "input_dict", "[", "C", ".", "JSON_TEXT_KEY", "]", "\n", "tokens", "=", "list", "(", "utils", ".", "get_tokens", "(", "tokens", ")", ")", "\n", "factors", "=", "input_dict", ".", "get", "(", "C", ".", "JSON_FACTORS_KEY", ")", "\n", "source_prefix_tokens", "=", "input_dict", ".", "get", "(", "C", ".", "JSON_SOURCE_PREFIX_KEY", ")", "\n", "source_prefix_tokens", "=", "list", "(", "utils", ".", "get_tokens", "(", "source_prefix_tokens", ")", ")", "if", "source_prefix_tokens", "is", "not", "None", "else", "None", "\n", "if", "source_prefix_tokens", "is", "not", "None", "and", "not", "source_prefix_tokens", ":", "\n", "            ", "logger", ".", "warning", "(", "f\"Empty string is specified as a source prefix for input '{input_dict[C.JSON_SOURCE_PREFIX_KEY]}'.\"", ")", "\n", "", "source_prefix_factors", "=", "input_dict", ".", "get", "(", "C", ".", "JSON_SOURCE_PREFIX_FACTORS_KEY", ")", "\n", "if", "source_prefix_factors", "is", "not", "None", "and", "not", "source_prefix_tokens", ":", "\n", "            ", "logger", ".", "error", "(", "\"Source prefix factors cannot be specified when source prefix is not specified\"", ")", "\n", "return", "_bad_input", "(", "sentence_id", ",", "reason", "=", "str", "(", "input_dict", ")", ")", "\n", "", "if", "source_prefix_factors", "is", "not", "None", "and", "not", "factors", ":", "\n", "            ", "logger", ".", "error", "(", "\"Source prefix factors cannot be specified when source factors are not specified\"", ")", "\n", "return", "_bad_input", "(", "sentence_id", ",", "reason", "=", "str", "(", "input_dict", ")", ")", "\n", "", "if", "source_prefix_tokens", "is", "not", "None", "and", "(", "factors", "is", "not", "None", "and", "not", "source_prefix_factors", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Source prefix factors need to be also specified together with source factors\"", ")", "\n", "return", "_bad_input", "(", "sentence_id", ",", "reason", "=", "str", "(", "input_dict", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "factors", ",", "list", ")", ":", "\n", "            ", "factors", "=", "[", "list", "(", "utils", ".", "get_tokens", "(", "factor", ")", ")", "for", "factor", "in", "factors", "]", "\n", "lengths", "=", "[", "len", "(", "f", ")", "for", "f", "in", "factors", "]", "\n", "if", "not", "all", "(", "length", "==", "len", "(", "tokens", ")", "for", "length", "in", "lengths", ")", ":", "\n", "                ", "logger", ".", "error", "(", "\"Factors have different length than input text: %d vs. %s\"", ",", "len", "(", "tokens", ")", ",", "str", "(", "lengths", ")", ")", "\n", "return", "_bad_input", "(", "sentence_id", ",", "reason", "=", "str", "(", "input_dict", ")", ")", "\n", "\n", "", "", "if", "isinstance", "(", "source_prefix_factors", ",", "list", ")", ":", "\n", "            ", "source_prefix_factors", "=", "[", "list", "(", "utils", ".", "get_tokens", "(", "spf", ")", ")", "for", "spf", "in", "source_prefix_factors", "]", "\n", "for", "source_prefix_factor", "in", "source_prefix_factors", ":", "\n", "                ", "if", "not", "source_prefix_factor", ":", "\n", "                    ", "logger", ".", "warning", "(", "f\"Empty list is specified as source prefix factors for input '%s'.\"", ",", "\n", "input_dict", "[", "C", ".", "JSON_TEXT_KEY", "]", ")", "\n", "", "", "lengths", "=", "[", "len", "(", "source_prefix_factor", ")", "for", "source_prefix_factor", "in", "source_prefix_factors", "]", "\n", "if", "not", "all", "(", "len", "(", "source_prefix_tokens", ")", "==", "length", "for", "length", "in", "lengths", ")", ":", "\n", "                ", "logger", ".", "error", "(", "\"Source prefix has %d tokens but there are %s prefix factors\"", ",", "\n", "len", "(", "source_prefix_tokens", ")", ",", "str", "(", "lengths", ")", ")", "\n", "return", "_bad_input", "(", "sentence_id", ",", "reason", "=", "str", "(", "input_dict", ")", ")", "\n", "", "if", "len", "(", "source_prefix_factors", ")", "!=", "len", "(", "factors", ")", ":", "\n", "                ", "logger", ".", "error", "(", "\"There is mismatch in source factors %d and prefix factors %d\"", ",", "\n", "len", "(", "factors", ")", ",", "len", "(", "source_prefix_factors", ")", ")", "\n", "return", "_bad_input", "(", "sentence_id", ",", "reason", "=", "str", "(", "input_dict", ")", ")", "\n", "\n", "", "", "target_prefix_tokens", "=", "input_dict", ".", "get", "(", "C", ".", "JSON_TARGET_PREFIX_KEY", ")", "\n", "target_prefix_tokens", "=", "list", "(", "utils", ".", "get_tokens", "(", "target_prefix_tokens", ")", ")", "if", "target_prefix_tokens", "is", "not", "None", "else", "None", "\n", "if", "target_prefix_tokens", "is", "not", "None", "and", "not", "target_prefix_tokens", ":", "\n", "            ", "logger", ".", "warning", "(", "f\"Empty string is specified as a target prefix for input '{input_dict[C.JSON_TEXT_KEY]}'.\"", ")", "\n", "\n", "", "target_prefix_factors", "=", "input_dict", ".", "get", "(", "C", ".", "JSON_TARGET_PREFIX_FACTORS_KEY", ")", "\n", "if", "isinstance", "(", "target_prefix_factors", ",", "list", ")", ":", "\n", "            ", "target_prefix_factors", "=", "[", "list", "(", "utils", ".", "get_tokens", "(", "tpf", ")", ")", "for", "tpf", "in", "target_prefix_factors", "]", "\n", "if", "len", "(", "target_prefix_factors", ")", "!=", "translator", ".", "num_target_factors", "-", "1", ":", "\n", "                ", "logger", ".", "error", "(", "\"Must provide target prefix for each target factor. Given: %s required: %s\"", ",", "\n", "len", "(", "target_prefix_factors", ")", ",", "translator", ".", "num_target_factors", "-", "1", ")", "\n", "return", "_bad_input", "(", "sentence_id", ",", "reason", "=", "str", "(", "input_dict", ")", ")", "\n", "\n", "", "", "use_target_prefix_all_chunks", "=", "input_dict", ".", "get", "(", "C", ".", "JSON_USE_TARGET_PREFIX_ALL_CHUNKS_KEY", ",", "True", ")", "\n", "keep_target_prefix_key", "=", "input_dict", ".", "get", "(", "C", ".", "JSON_KEEP_TARGET_PREFIX_KEY", ",", "True", ")", "\n", "# Lexicon for vocabulary selection/restriction:", "\n", "# This is only populated when using multiple lexicons and the lexicon name is given, in which case the", "\n", "# restrict_lexicon key must exist and the value (name) must map to one of the translator's known lexicons.", "\n", "restrict_lexicon", "=", "None", "\n", "restrict_lexicon_name", "=", "input_dict", ".", "get", "(", "C", ".", "JSON_RESTRICT_LEXICON_KEY", ",", "None", ")", "\n", "if", "isinstance", "(", "translator", ".", "restrict_lexicon", ",", "dict", ")", "and", "restrict_lexicon_name", "is", "not", "None", ":", "\n", "            ", "restrict_lexicon", "=", "translator", ".", "restrict_lexicon", ".", "get", "(", "restrict_lexicon_name", ",", "None", ")", "\n", "if", "restrict_lexicon", "is", "None", ":", "\n", "                ", "logger", ".", "error", "(", "\"Unknown restrict_lexicon '%s'. Choices: %s\"", "\n", "%", "(", "restrict_lexicon_name", ",", "' '", ".", "join", "(", "sorted", "(", "translator", ".", "restrict_lexicon", ")", ")", ")", ")", "\n", "return", "_bad_input", "(", "sentence_id", ",", "reason", "=", "str", "(", "input_dict", ")", ")", "\n", "\n", "# List of phrases to prevent from occurring in the output", "\n", "", "", "avoid_list", "=", "input_dict", ".", "get", "(", "C", ".", "JSON_AVOID_KEY", ")", "\n", "\n", "# List of phrases that must appear in the output", "\n", "constraints", "=", "input_dict", ".", "get", "(", "C", ".", "JSON_CONSTRAINTS_KEY", ")", "\n", "\n", "# If there is overlap between positive and negative constraints, assume the user wanted", "\n", "# the words, and so remove them from the avoid_list (negative constraints)", "\n", "if", "constraints", "is", "not", "None", "and", "avoid_list", "is", "not", "None", ":", "\n", "            ", "avoid_set", "=", "set", "(", "avoid_list", ")", "\n", "overlap", "=", "set", "(", "constraints", ")", ".", "intersection", "(", "avoid_set", ")", "\n", "if", "len", "(", "overlap", ")", ">", "0", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Overlap between constraints and avoid set, dropping the overlapping avoids\"", ")", "\n", "avoid_list", "=", "list", "(", "avoid_set", ".", "difference", "(", "overlap", ")", ")", "\n", "\n", "# Convert to a list of tokens", "\n", "", "", "if", "isinstance", "(", "avoid_list", ",", "list", ")", ":", "\n", "            ", "avoid_list", "=", "[", "list", "(", "utils", ".", "get_tokens", "(", "phrase", ")", ")", "for", "phrase", "in", "avoid_list", "]", "\n", "", "if", "isinstance", "(", "constraints", ",", "list", ")", ":", "\n", "            ", "constraints", "=", "[", "list", "(", "utils", ".", "get_tokens", "(", "constraint", ")", ")", "for", "constraint", "in", "constraints", "]", "\n", "\n", "", "return", "TranslatorInput", "(", "sentence_id", "=", "sentence_id", ",", "tokens", "=", "tokens", ",", "factors", "=", "factors", ",", "\n", "source_prefix_tokens", "=", "source_prefix_tokens", ",", "\n", "source_prefix_factors", "=", "source_prefix_factors", ",", "\n", "target_prefix_tokens", "=", "target_prefix_tokens", ",", "\n", "target_prefix_factors", "=", "target_prefix_factors", ",", "\n", "use_target_prefix_all_chunks", "=", "use_target_prefix_all_chunks", ",", "\n", "keep_target_prefix_key", "=", "keep_target_prefix_key", ",", "\n", "restrict_lexicon", "=", "restrict_lexicon", ",", "constraints", "=", "constraints", ",", "\n", "avoid_list", "=", "avoid_list", ",", "pass_through_dict", "=", "input_dict", ")", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "logger", ".", "exception", "(", "e", ",", "exc_info", "=", "True", ")", "# type: ignore", "\n", "return", "_bad_input", "(", "sentence_id", ",", "reason", "=", "str", "(", "input_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_factored_string": [[419, 457], ["utils.check_condition", "enumerate", "inference.TranslatorInput", "inference.make_input_from_plain_string", "utils.get_tokens", "token.split", "tokens.append", "enumerate", "bool", "range", "logger.error", "inference._bad_input", "factors[].append", "delimiter.isspace", "all", "len", "factored_string.strip"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_plain_string", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._bad_input"], ["", "", "def", "make_input_from_factored_string", "(", "sentence_id", ":", "SentenceId", ",", "\n", "factored_string", ":", "str", ",", "\n", "translator", ":", "'Translator'", ",", "\n", "delimiter", ":", "str", "=", "C", ".", "DEFAULT_FACTOR_DELIMITER", ")", "->", "TranslatorInput", ":", "\n", "    ", "\"\"\"\n    Returns a TranslatorInput object from a string with factor annotations on a token level, separated by delimiter.\n    If translator does not require any source factors, the string is parsed as a plain token string.\n\n    :param sentence_id: Sentence id.\n    :param factored_string: An input string with additional factors per token, separated by delimiter.\n    :param translator: A translator object.\n    :param delimiter: A factor delimiter. Default: '|'.\n    :return: A TranslatorInput.\n    \"\"\"", "\n", "utils", ".", "check_condition", "(", "bool", "(", "delimiter", ")", "and", "not", "delimiter", ".", "isspace", "(", ")", ",", "\n", "\"Factor delimiter can not be whitespace or empty.\"", ")", "\n", "\n", "model_num_source_factors", "=", "translator", ".", "num_source_factors", "\n", "\n", "if", "model_num_source_factors", "==", "1", ":", "\n", "        ", "return", "make_input_from_plain_string", "(", "sentence_id", "=", "sentence_id", ",", "string", "=", "factored_string", ")", "\n", "\n", "", "tokens", "=", "[", "]", "# type: Tokens", "\n", "factors", "=", "[", "[", "]", "for", "_", "in", "range", "(", "model_num_source_factors", "-", "1", ")", "]", "# type: List[Tokens]", "\n", "for", "token_id", ",", "token", "in", "enumerate", "(", "utils", ".", "get_tokens", "(", "factored_string", ")", ")", ":", "\n", "        ", "pieces", "=", "token", ".", "split", "(", "delimiter", ")", "\n", "\n", "if", "not", "all", "(", "pieces", ")", "or", "len", "(", "pieces", ")", "!=", "model_num_source_factors", ":", "\n", "            ", "logger", ".", "error", "(", "\"Failed to parse %d factors at position %d ('%s') in '%s'\"", "%", "(", "model_num_source_factors", ",", "\n", "token_id", ",", "token", ",", "\n", "factored_string", ".", "strip", "(", ")", ")", ")", "\n", "return", "_bad_input", "(", "sentence_id", ",", "reason", "=", "factored_string", ")", "\n", "\n", "", "tokens", ".", "append", "(", "pieces", "[", "0", "]", ")", "\n", "for", "i", ",", "factor", "in", "enumerate", "(", "factors", ")", ":", "\n", "            ", "factors", "[", "i", "]", ".", "append", "(", "pieces", "[", "i", "+", "1", "]", ")", "\n", "\n", "", "", "return", "TranslatorInput", "(", "sentence_id", "=", "sentence_id", ",", "tokens", "=", "tokens", ",", "factors", "=", "factors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_multiple_strings": [[459, 477], ["list", "inference.TranslatorInput", "bool", "inference.TranslatorInput", "utils.get_tokens", "list", "all", "logger.error", "inference._bad_input", "utils.get_tokens", "str", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._bad_input", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens"], ["", "def", "make_input_from_multiple_strings", "(", "sentence_id", ":", "SentenceId", ",", "strings", ":", "List", "[", "str", "]", ")", "->", "TranslatorInput", ":", "\n", "    ", "\"\"\"\n    Returns a TranslatorInput object from multiple strings, where the first element corresponds to the surface tokens\n    and the remaining elements to additional factors. All strings must parse into token sequences of the same length.\n\n    :param sentence_id: Sentence id.\n    :param strings: A list of strings representing a factored input sequence.\n    :return: A TranslatorInput.\n    \"\"\"", "\n", "if", "not", "bool", "(", "strings", ")", ":", "\n", "        ", "return", "TranslatorInput", "(", "sentence_id", "=", "sentence_id", ",", "tokens", "=", "[", "]", ",", "factors", "=", "None", ")", "\n", "\n", "", "tokens", "=", "list", "(", "utils", ".", "get_tokens", "(", "strings", "[", "0", "]", ")", ")", "\n", "factors", "=", "[", "list", "(", "utils", ".", "get_tokens", "(", "factor", ")", ")", "for", "factor", "in", "strings", "[", "1", ":", "]", "]", "\n", "if", "not", "all", "(", "len", "(", "factor", ")", "==", "len", "(", "tokens", ")", "for", "factor", "in", "factors", ")", ":", "\n", "        ", "logger", ".", "error", "(", "\"Length of string sequences do not match: '%s'\"", ",", "strings", ")", "\n", "return", "_bad_input", "(", "sentence_id", ",", "reason", "=", "str", "(", "strings", ")", ")", "\n", "", "return", "TranslatorInput", "(", "sentence_id", "=", "sentence_id", ",", "tokens", "=", "tokens", ",", "factors", "=", "factors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.empty_translation": [[560, 569], ["inference.Translation", "inference.NBestTranslations"], "function", ["None"], ["", "def", "empty_translation", "(", "add_nbest", ":", "bool", "=", "False", ")", "->", "Translation", ":", "\n", "    ", "\"\"\"\n    Return an empty translation.\n\n    :param add_nbest: Include (empty) nbest_translations in the translation object.\n    \"\"\"", "\n", "return", "Translation", "(", "target_ids", "=", "[", "]", ",", "\n", "scores", "=", "[", "-", "np", ".", "inf", "]", ",", "\n", "nbest_translations", "=", "NBestTranslations", "(", "[", "]", ",", "[", "]", ")", "if", "add_nbest", "else", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._concat_nbest_translations": [[599, 620], ["zip", "inference._reduce_nbest_translations", "inference._expand_nbest_translation", "concatenated_translations.append", "inference._concat_translations", "list"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._reduce_nbest_translations", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._expand_nbest_translation", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._concat_translations"], ["", "def", "_concat_nbest_translations", "(", "translations", ":", "List", "[", "Translation", "]", ",", "\n", "stop_ids", ":", "Set", "[", "int", "]", ",", "\n", "scorer", ":", "CandidateScorer", ")", "->", "Translation", ":", "\n", "    ", "\"\"\"\n    Combines nbest translations through concatenation.\n\n    :param translations: A list of translations (sequence starting with BOS symbol), score and length.\n    :param stop_ids: The EOS symbols.\n    :param scorer: Candidate scorer for recomputing score of concatenated translations.\n    :return: A concatenation of the translations with a score.\n    \"\"\"", "\n", "expanded_translations", "=", "(", "_expand_nbest_translation", "(", "translation", ")", "for", "translation", "in", "translations", ")", "\n", "\n", "concatenated_translations", "=", "[", "]", "# type: List[Translation]", "\n", "\n", "for", "translations_to_concat", "in", "zip", "(", "*", "expanded_translations", ")", ":", "\n", "        ", "concatenated_translations", ".", "append", "(", "_concat_translations", "(", "translations", "=", "list", "(", "translations_to_concat", ")", ",", "\n", "stop_ids", "=", "stop_ids", ",", "\n", "scorer", "=", "scorer", ")", ")", "\n", "\n", "", "return", "_reduce_nbest_translations", "(", "concatenated_translations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._reduce_nbest_translations": [[622, 641], ["inference.NBestTranslations", "inference.Translation"], "function", ["None"], ["", "def", "_reduce_nbest_translations", "(", "nbest_translations_list", ":", "List", "[", "Translation", "]", ")", "->", "Translation", ":", "\n", "    ", "\"\"\"\n    Combines Translation objects that are nbest translations of the same sentence.\n\n    :param nbest_translations_list: A list of Translation objects, all of them translations of\n        the same source sentence.\n    :return: A single Translation object where nbest lists are collapsed.\n    \"\"\"", "\n", "best_translation", "=", "nbest_translations_list", "[", "0", "]", "\n", "\n", "sequences", "=", "[", "translation", ".", "target_ids", "for", "translation", "in", "nbest_translations_list", "]", "\n", "scores", "=", "[", "translation", ".", "scores", "for", "translation", "in", "nbest_translations_list", "]", "\n", "\n", "nbest_translations", "=", "NBestTranslations", "(", "sequences", ",", "scores", ")", "\n", "\n", "return", "Translation", "(", "best_translation", ".", "target_ids", ",", "\n", "best_translation", ".", "scores", ",", "\n", "nbest_translations", ",", "\n", "best_translation", ".", "estimated_reference_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._expand_nbest_translation": [[643, 656], ["zip", "nbest_list.append", "inference.Translation"], "function", ["None"], ["", "def", "_expand_nbest_translation", "(", "translation", ":", "Translation", ")", "->", "List", "[", "Translation", "]", ":", "\n", "    ", "\"\"\"\n    Expand nbest translations in a single Translation object to one Translation\n        object per nbest translation.\n\n    :param translation: A Translation object.\n    :return: A list of Translation objects.\n    \"\"\"", "\n", "nbest_list", "=", "[", "]", "# type = List[Translation]", "\n", "for", "target_ids", ",", "score", "in", "zip", "(", "translation", ".", "nbest_translations", ".", "target_ids_list", ",", "translation", ".", "nbest_translations", ".", "scores", ")", ":", "\n", "        ", "nbest_list", ".", "append", "(", "Translation", "(", "target_ids", ",", "score", ",", "\n", "estimated_reference_length", "=", "translation", ".", "estimated_reference_length", ")", ")", "\n", "", "return", "nbest_list", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._remove_target_prefix_tokens": [[658, 668], ["min", "len"], "function", ["None"], ["", "def", "_remove_target_prefix_tokens", "(", "target_ids", ":", "TokenIds", ",", "num_target_prefix_tokens", ":", "int", ")", "->", "TokenIds", ":", "\n", "    ", "\"\"\"\n    Remove target prefix tokens from target token Ids\n\n    :param target_ids: target token Ids of translation of an input\n    :param num_target_prefix_tokens: number of target prefix tokens included in the translation\n    :return: new target_ids\n    \"\"\"", "\n", "starting_idx", "=", "min", "(", "len", "(", "target_ids", ")", ",", "num_target_prefix_tokens", ")", "\n", "return", "target_ids", "[", "starting_idx", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._concat_translations": [[670, 713], ["numpy.zeros_like", "enumerate", "scorer", "inference.Translation", "len", "scorer.unnormalize", "numpy.add", "len", "np.add.tolist", "target_ids.extend", "len", "len", "target_ids.extend", "target_ids.extend"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.beam_search.CandidateScorer.unnormalize"], ["", "def", "_concat_translations", "(", "translations", ":", "List", "[", "Translation", "]", ",", "\n", "stop_ids", ":", "Set", "[", "int", "]", ",", "\n", "scorer", ":", "CandidateScorer", ")", "->", "Translation", ":", "\n", "    ", "\"\"\"\n    Combines translations through concatenation.\n\n    :param translations: A list of translations (sequence starting with BOS symbol), score and length.\n    :param stop_ids: The EOS symbols.\n    :param scorer: Candidate scorer for recomputing score of concatenated translations.\n    :return: A concatenation of the translations with a score.\n    \"\"\"", "\n", "if", "len", "(", "translations", ")", "==", "1", ":", "\n", "        ", "return", "translations", "[", "0", "]", "\n", "\n", "# Concatenation of all target ids without BOS and EOS", "\n", "", "target_ids", "=", "[", "]", "\n", "estimated_reference_length", "=", "None", "# type: Optional[float]", "\n", "scores", "=", "np", ".", "zeros_like", "(", "translations", "[", "0", "]", ".", "scores", ")", "\n", "\n", "for", "idx", ",", "translation", "in", "enumerate", "(", "translations", ")", ":", "\n", "        ", "if", "idx", "==", "len", "(", "translations", ")", "-", "1", ":", "\n", "            ", "target_ids", ".", "extend", "(", "translation", ".", "target_ids", ")", "\n", "", "else", ":", "\n", "            ", "if", "translation", ".", "target_ids", "[", "-", "1", "]", "[", "0", "]", "in", "stop_ids", ":", "\n", "                ", "target_ids", ".", "extend", "(", "translation", ".", "target_ids", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "target_ids", ".", "extend", "(", "translation", ".", "target_ids", ")", "\n", "", "", "if", "translation", ".", "estimated_reference_length", "is", "not", "None", ":", "\n", "            ", "if", "estimated_reference_length", "is", "None", ":", "\n", "                ", "estimated_reference_length", "=", "translation", ".", "estimated_reference_length", "\n", "", "else", ":", "\n", "                ", "estimated_reference_length", "+=", "translation", ".", "estimated_reference_length", "\n", "\n", "", "", "score", ",", "*", "factor_scores", "=", "translation", ".", "scores", "\n", "# Unnormalize the primary score:", "\n", "raw_score", "=", "scorer", ".", "unnormalize", "(", "score", ",", "len", "(", "translation", ".", "target_ids", ")", ",", "translation", ".", "estimated_reference_length", ")", "\n", "# Accumulate scores element-wise", "\n", "scores", "=", "np", ".", "add", "(", "scores", ",", "[", "raw_score", ",", "*", "factor_scores", "]", ")", "\n", "\n", "# Re-normalize the primary score", "\n", "", "scores", "[", "0", "]", "=", "scorer", "(", "scores", "[", "0", "]", ",", "len", "(", "target_ids", ")", ",", "estimated_reference_length", ")", "\n", "\n", "return", "Translation", "(", "target_ids", ",", "scores", ".", "tolist", "(", ")", ",", "estimated_reference_length", "=", "estimated_reference_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference._unshift_target_factors": [[1279, 1293], ["sequence[].tolist", "sequence[].tolist", "sequence.tolist", "len", "itertools.zip_longest"], "function", ["None"], ["", "", "def", "_unshift_target_factors", "(", "sequence", ":", "np", ".", "ndarray", ",", "fill_last_with", ":", "int", "=", "C", ".", "EOS_ID", ")", ":", "\n", "    ", "\"\"\"\n    Shifts back target factors so that they re-align with the words.\n\n    :param sequence: Array of word ids. Shape: (bucketed_length, num_target_factors).\n    \"\"\"", "\n", "if", "len", "(", "sequence", ".", "shape", ")", "==", "1", "or", "sequence", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "        ", "return", "sequence", ".", "tolist", "(", ")", "\n", "", "num_factors_to_shift", "=", "sequence", ".", "shape", "[", "1", "]", "-", "1", "\n", "_fillvalue", "=", "num_factors_to_shift", "*", "[", "fill_last_with", "]", "\n", "_words", "=", "sequence", "[", ":", ",", "0", "]", ".", "tolist", "(", ")", "# tokens from t==0 onwards", "\n", "_next_factors", "=", "sequence", "[", "1", ":", ",", "1", ":", "]", ".", "tolist", "(", ")", "# factors from t==1 onwards", "\n", "sequence", "=", "[", "(", "w", ",", "*", "fs", ")", "for", "w", ",", "fs", "in", "itertools", ".", "zip_longest", "(", "_words", ",", "_next_factors", ",", "fillvalue", "=", "_fillvalue", ")", "]", "# type: ignore", "\n", "return", "sequence", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.nvs.NeuralVocabSelection.__init__": [[19, 28], ["super().__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "model_size", ":", "int", ",", "vocab_target_size", ":", "int", ",", "\n", "model_type", ":", "str", "=", "C", ".", "NVS_TYPE_LOGIT_MAX", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vocab_target_size", "=", "vocab_target_size", "\n", "self", ".", "model_type", "=", "model_type", "\n", "\n", "self", ".", "project_vocab", "=", "pt", ".", "nn", ".", "Linear", "(", "model_size", ",", "vocab_target_size", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.nvs.NeuralVocabSelection.forward": [[29, 48], ["nvs.NeuralVocabSelection.project_vocab", "nvs.NeuralVocabSelection.masked_fill", "torch.max", "att_mask.unsqueeze", "source_encoded.size", "nvs.NeuralVocabSelection.project_vocab", "ValueError", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "source_encoded", ":", "pt", ".", "Tensor", ",", "source_length", ":", "pt", ".", "Tensor", ",", "att_mask", ":", "pt", ".", "Tensor", ")", ":", "\n", "        ", "if", "self", ".", "model_type", "==", "C", ".", "NVS_TYPE_LOGIT_MAX", ":", "\n", "# ============", "\n", "# logit max:", "\n", "# ============", "\n", "            ", "bow_pred", "=", "self", ".", "project_vocab", "(", "source_encoded", ")", "\n", "bow_pred", "=", "bow_pred", ".", "masked_fill", "(", "att_mask", ".", "unsqueeze", "(", "2", ")", ",", "-", "pt", ".", "inf", ")", "\n", "bow_pred", ",", "_", "=", "pt", ".", "max", "(", "bow_pred", ",", "dim", "=", "1", ")", "\n", "", "elif", "C", ".", "NVS_TYPE_EOS", ":", "\n", "# ============", "\n", "# EOS based:", "\n", "# ============", "\n", "            ", "batch_size", ",", "max_len", ",", "_", "=", "source_encoded", ".", "size", "(", ")", "\n", "source_encoded", "=", "source_encoded", "[", "pt", ".", "arange", "(", "0", ",", "batch_size", ",", "dtype", "=", "pt", ".", "long", ")", ",", "(", "source_length", "-", "1", ")", ".", "long", "(", ")", "]", "\n", "bow_pred", "=", "self", ".", "project_vocab", "(", "source_encoded", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown neural vocabulary selection type.\"", ")", "\n", "\n", "", "return", "bow_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.none_if_negative": [[56, 58], ["None"], "function", ["None"], ["def", "none_if_negative", "(", "val", ")", ":", "\n", "    ", "return", "None", "if", "val", "<", "0", "else", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train._list_to_tuple": [[60, 65], ["isinstance", "tuple"], "function", ["None"], ["", "def", "_list_to_tuple", "(", "v", ")", ":", "\n", "    ", "\"\"\"Convert v to a tuple if it is a list.\"\"\"", "\n", "if", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "        ", "return", "tuple", "(", "v", ")", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train._dict_difference": [[67, 75], ["set", "dict1.items", "set.add", "train._list_to_tuple", "train._list_to_tuple"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train._list_to_tuple", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train._list_to_tuple"], ["", "def", "_dict_difference", "(", "dict1", ":", "Dict", ",", "dict2", ":", "Dict", ")", ":", "\n", "    ", "diffs", "=", "set", "(", ")", "\n", "for", "k", ",", "v", "in", "dict1", ".", "items", "(", ")", ":", "\n", "# Note: A list and a tuple with the same values is considered equal", "\n", "# (this is due to json deserializing former tuples as list).", "\n", "        ", "if", "k", "not", "in", "dict2", "or", "_list_to_tuple", "(", "dict2", "[", "k", "]", ")", "!=", "_list_to_tuple", "(", "v", ")", ":", "\n", "            ", "diffs", ".", "add", "(", "k", ")", "\n", "", "", "return", "diffs", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.check_arg_compatibility": [[77, 132], ["utils.check_condition", "len", "len", "utils.check_condition", "any", "len", "utils.check_condition", "len", "utils.check_condition", "len", "utils.check_condition", "len", "utils.check_condition", "logger.warning", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["", "def", "check_arg_compatibility", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "\"\"\"\n    Check if some arguments are incompatible with each other.\n\n    :param args: Arguments as returned by argparse.\n    \"\"\"", "\n", "\n", "# Require at least one stopping criteria", "\n", "check_condition", "(", "any", "(", "(", "args", ".", "max_samples", ",", "\n", "args", ".", "max_updates", ",", "\n", "args", ".", "max_seconds", ",", "\n", "args", ".", "max_checkpoints", ",", "\n", "args", ".", "max_num_epochs", ",", "\n", "args", ".", "max_num_checkpoint_not_improved", ")", ")", ",", "\n", "'Please specify at least one stopping criteria: --max-samples --max-updates --max-checkpoints '", "\n", "'--max-num-epochs --max-num-checkpoint-not-improved'", ")", "\n", "\n", "# Check and possibly adapt the parameters for source factors", "\n", "n_source_factors", "=", "len", "(", "args", ".", "validation_source_factors", ")", "\n", "if", "len", "(", "args", ".", "source_factors_combine", ")", ">", "1", ":", "\n", "        ", "check_condition", "(", "n_source_factors", "==", "len", "(", "args", ".", "source_factors_combine", ")", ",", "\n", "'The number of combination strategies for source '", "\n", "'factors does not match the number of source factors.'", ")", "\n", "", "else", ":", "\n", "# Length 1: expand the list to the appropriate length", "\n", "        ", "args", ".", "source_factors_combine", "=", "args", ".", "source_factors_combine", "*", "n_source_factors", "\n", "", "if", "len", "(", "args", ".", "source_factors_share_embedding", ")", ">", "1", ":", "\n", "        ", "check_condition", "(", "n_source_factors", "==", "len", "(", "args", ".", "source_factors_share_embedding", ")", ",", "\n", "'The number of vocabulary sharing flags for source '", "\n", "'factors does not match the number of source factors.'", ")", "\n", "", "else", ":", "\n", "# Length 1: expand the list to the appropriate length", "\n", "        ", "args", ".", "source_factors_share_embedding", "=", "args", ".", "source_factors_share_embedding", "*", "n_source_factors", "\n", "\n", "# Check and possibly adapt the parameters for target factors", "\n", "", "n_target_factors", "=", "len", "(", "args", ".", "validation_target_factors", ")", "\n", "if", "len", "(", "args", ".", "target_factors_combine", ")", ">", "1", ":", "\n", "        ", "check_condition", "(", "n_target_factors", "==", "len", "(", "args", ".", "target_factors_combine", ")", ",", "\n", "'The number of combination strategies for target '", "\n", "'factors does not match the number of target factors.'", ")", "\n", "", "else", ":", "\n", "# Length 1: expand the list to the appropriate length", "\n", "        ", "args", ".", "target_factors_combine", "=", "args", ".", "target_factors_combine", "*", "n_target_factors", "\n", "", "if", "len", "(", "args", ".", "target_factors_share_embedding", ")", ">", "1", ":", "\n", "        ", "check_condition", "(", "n_target_factors", "==", "len", "(", "args", ".", "target_factors_share_embedding", ")", ",", "\n", "'The number of vocabulary sharing flags for target '", "\n", "'factors does not match the number of target factors.'", ")", "\n", "", "else", ":", "\n", "# Length 1: expand the list to the appropriate length", "\n", "        ", "args", ".", "target_factors_share_embedding", "=", "args", ".", "target_factors_share_embedding", "*", "n_target_factors", "\n", "\n", "", "check_condition", "(", "not", "(", "args", ".", "amp", "and", "args", ".", "apex_amp", ")", ",", "'Use either --amp (safer) or --apex-amp (faster).'", ")", "\n", "\n", "if", "args", ".", "dtype", "!=", "C", ".", "DTYPE_FP32", ":", "\n", "        ", "logger", ".", "warning", "(", "'Specifying a non-float32 dtype to sockeye.train has no effect. Use --amp or --apex-amp for '", "\n", "'mixed precision training.'", ")", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.check_resume": [[135, 181], ["os.path.join", "os.path.exists", "utils.is_distributed", "utils.is_primary_worker", "utils.is_primary_worker", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "utils.is_primary_worker", "os.path.exists", "os.makedirs", "os.makedirs", "logger.info", "shutil.rmtree", "os.makedirs", "vars", "set", "os.path.exists", "os.path.join", "arguments.load_args", "train._dict_difference", "train._dict_difference", "logger.error", "logger.error", "sys.exit", "os.path.join", "logger.error", "sys.exit", "logger.info", "os.path.join", "vars", "vars"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_distributed", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.load_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train._dict_difference", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train._dict_difference"], ["", "", "def", "check_resume", "(", "args", ":", "argparse", ".", "Namespace", ",", "output_folder", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Check if we should resume a broken training run.\n\n    :param args: Arguments as returned by argparse.\n    :param output_folder: Main output folder for the model.\n\n    :return: Flag signaling if we are resuming training and the directory with\n        the training status.\n    \"\"\"", "\n", "resume_training", "=", "False", "\n", "training_state_dir", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "C", ".", "TRAINING_STATE_DIRNAME", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "output_folder", ")", ":", "\n", "        ", "if", "args", ".", "overwrite_output", ":", "\n", "            ", "if", "utils", ".", "is_primary_worker", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\"Removing existing output folder %s.\"", ",", "output_folder", ")", "\n", "shutil", ".", "rmtree", "(", "output_folder", ")", "\n", "os", ".", "makedirs", "(", "output_folder", ")", "\n", "", "", "elif", "os", ".", "path", ".", "exists", "(", "training_state_dir", ")", ":", "\n", "            ", "old_args", "=", "vars", "(", "arguments", ".", "load_args", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "C", ".", "ARGS_STATE_NAME", ")", ")", ")", "\n", "arg_diffs", "=", "_dict_difference", "(", "vars", "(", "args", ")", ",", "old_args", ")", "|", "_dict_difference", "(", "old_args", ",", "vars", "(", "args", ")", ")", "\n", "# Remove args that may differ without affecting the training.", "\n", "arg_diffs", "-=", "set", "(", "C", ".", "ARGS_MAY_DIFFER", ")", "\n", "if", "not", "arg_diffs", ":", "\n", "                ", "resume_training", "=", "True", "\n", "", "else", ":", "\n", "# We do not have the logger yet", "\n", "                ", "logger", ".", "error", "(", "\"Mismatch in arguments for training continuation.\"", ")", "\n", "logger", ".", "error", "(", "\"Differing arguments: %s.\"", ",", "\", \"", ".", "join", "(", "arg_diffs", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "", "elif", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "C", ".", "PARAMS_BEST_NAME", ")", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Refusing to overwrite model folder %s as it seems to contain a trained model.\"", ",", "output_folder", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"The output folder %s already exists, but no training state or parameter file was found. \"", "\n", "\"Will start training from scratch.\"", ",", "output_folder", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "utils", ".", "is_primary_worker", "(", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_folder", ")", "\n", "", "", "if", "utils", ".", "is_distributed", "(", ")", ":", "\n", "        ", "if", "utils", ".", "is_primary_worker", "(", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "C", ".", "DIST_SECONDARY_WORKERS_LOGDIR", ")", ",", "exist_ok", "=", "True", ")", "\n", "# Distributed sync point: output folder exists and we're ready to start", "\n", "# training", "\n", "", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "", "return", "resume_training", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.create_checkpoint_decoder": [[183, 220], ["checkpoint_decoder.CheckpointDecoder", "checkpoint_decoder.CheckpointDecoder.warmup", "logger.info"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.checkpoint_decoder.CheckpointDecoder.warmup"], ["", "def", "create_checkpoint_decoder", "(", "\n", "args", ":", "argparse", ".", "Namespace", ",", "\n", "device", ":", "torch", ".", "device", ",", "\n", "sockeye_model", ":", "model", ".", "SockeyeModel", ",", "\n", "source_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "target_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ")", "->", "Optional", "[", "checkpoint_decoder", ".", "CheckpointDecoder", "]", ":", "\n", "    ", "\"\"\"\n    Returns a checkpoint decoder or None.\n\n    :param args: Arguments as returned by argparse.\n    :param device: Torch device for checkpoint decoder.\n    :param sockeye_model: The Sockeye model instance.\n    :param source_vocabs: The source vocabs.\n    :param target_vocabs: The target vocabs.\n    :return: A CheckpointDecoder if --decode-and-evaluate != 0, else None.\n    \"\"\"", "\n", "sample_size", "=", "args", ".", "decode_and_evaluate", "\n", "if", "args", ".", "optimized_metric", "in", "C", ".", "METRICS_REQUIRING_DECODER", "and", "sample_size", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"You chose %s as the optimized metric, will turn on %s monitoring during training. \"", "\n", "\"To control how many validation sentences are used for calculating bleu use \"", "\n", "\"the --decode-and-evaluate argument.\"", ",", "args", ".", "optimized_metric", ",", "args", ".", "optimized_metric", ")", "\n", "sample_size", "=", "-", "1", "\n", "\n", "", "if", "sample_size", "==", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "", "cpd", "=", "checkpoint_decoder", ".", "CheckpointDecoder", "(", "\n", "model_folder", "=", "args", ".", "output", ",", "\n", "inputs", "=", "[", "args", ".", "validation_source", "]", "+", "args", ".", "validation_source_factors", ",", "\n", "references", "=", "[", "args", ".", "validation_target", "]", "+", "args", ".", "validation_target_factors", ",", "\n", "sample_size", "=", "sample_size", ",", "\n", "model", "=", "sockeye_model", ",", "\n", "source_vocabs", "=", "source_vocabs", ",", "\n", "target_vocabs", "=", "target_vocabs", ",", "\n", "device", "=", "device", ")", "\n", "cpd", ".", "warmup", "(", ")", "\n", "return", "cpd", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.use_shared_vocab": [[222, 236], ["logger.info"], "function", ["None"], ["", "def", "use_shared_vocab", "(", "args", ":", "argparse", ".", "Namespace", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    True if arguments entail a shared source and target vocabulary.\n\n    :param: args: Arguments as returned by argparse.\n    \"\"\"", "\n", "weight_tying_type", "=", "args", ".", "weight_tying_type", "\n", "shared_vocab", "=", "args", ".", "shared_vocab", "\n", "if", "C", ".", "WEIGHT_TYING_SRC", "in", "weight_tying_type", "and", "C", ".", "WEIGHT_TYING_TRG", "in", "weight_tying_type", ":", "\n", "        ", "if", "not", "shared_vocab", ":", "\n", "            ", "logger", ".", "info", "(", "\"A shared source/target vocabulary will be used as weight tying source/target weight tying \"", "\n", "\"is enabled\"", ")", "\n", "", "shared_vocab", "=", "True", "\n", "", "return", "shared_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.create_data_iters_and_vocabs": [[238, 408], ["utils.is_distributed", "str", "str", "utils.check_condition", "utils.check_condition", "data_io.get_prepared_data_iters", "utils.check_condition", "utils.check_condition", "utils.check_condition", "utils.check_condition", "utils.check_condition", "utils.check_condition", "utils.check_condition", "utils.check_condition", "utils.check_condition", "data_io.get_training_data_iters", "os.path.join", "logger.info", "typing.cast.save", "os.path.abspath", "os.path.abspath", "utils.check_condition", "vocab.load_source_vocabs", "enumerate", "vocab.load_target_vocabs", "enumerate", "vocab.load_source_vocabs", "vocab.load_target_vocabs", "typing.cast", "vocab.load_or_create_vocabs", "str", "str", "all", "all", "zip", "utils.check_condition", "zip", "utils.check_condition", "len", "len", "config.Config.load", "all", "all", "os.path.abspath", "os.path.abspath", "len", "len", "len", "len", "len", "len", "len", "len", "vocab.are_identical", "vocab.are_identical", "len", "len", "os.path.join", "range", "range", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_distributed", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_prepared_data_iters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_training_data_iters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_source_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_target_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_source_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_target_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.cast", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_or_create_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.are_identical", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.are_identical"], ["", "def", "create_data_iters_and_vocabs", "(", "args", ":", "argparse", ".", "Namespace", ",", "\n", "max_seq_len_source", ":", "int", ",", "\n", "max_seq_len_target", ":", "int", ",", "\n", "shared_vocab", ":", "bool", ",", "\n", "resume_training", ":", "bool", ",", "\n", "output_folder", ":", "str", ")", "->", "Tuple", "[", "'data_io.BaseParallelSampleIter'", ",", "\n", "'data_io.BaseParallelSampleIter'", ",", "\n", "'data_io.DataConfig'", ",", "\n", "List", "[", "vocab", ".", "Vocab", "]", ",", "List", "[", "vocab", ".", "Vocab", "]", "]", ":", "\n", "    ", "\"\"\"\n    Create the data iterators and the vocabularies.\n\n    :param args: Arguments as returned by argparse.\n    :param max_seq_len_source: Source maximum sequence length.\n    :param max_seq_len_target: Target maximum sequence length.\n    :param shared_vocab: Whether to create a shared vocabulary.\n    :param resume_training: Whether to resume training.\n    :param output_folder: Output folder.\n    :return: The data iterators (train, validation, config_data) as well as the source and target vocabularies.\n    \"\"\"", "\n", "num_words_source", ",", "num_words_target", "=", "args", ".", "num_words", "\n", "num_words_source", "=", "num_words_source", "if", "num_words_source", ">", "0", "else", "None", "\n", "num_words_target", "=", "num_words_target", "if", "num_words_target", ">", "0", "else", "None", "\n", "\n", "word_min_count_source", ",", "word_min_count_target", "=", "args", ".", "word_min_count", "\n", "\n", "validation_sources", "=", "[", "args", ".", "validation_source", "]", "+", "args", ".", "validation_source_factors", "\n", "validation_sources", "=", "[", "str", "(", "os", ".", "path", ".", "abspath", "(", "source", ")", ")", "for", "source", "in", "validation_sources", "]", "\n", "validation_targets", "=", "[", "args", ".", "validation_target", "]", "+", "args", ".", "validation_target_factors", "\n", "validation_targets", "=", "[", "str", "(", "os", ".", "path", ".", "abspath", "(", "target", ")", ")", "for", "target", "in", "validation_targets", "]", "\n", "\n", "if", "utils", ".", "is_distributed", "(", ")", ":", "\n", "        ", "error_msg", "=", "'Distributed training requires prepared training data. Use `python -m sockeye.prepare_data` and '", "'specify with %s'", "%", "C", ".", "TRAINING_ARG_PREPARED_DATA", "\n", "check_condition", "(", "args", ".", "prepared_data", "is", "not", "None", ",", "error_msg", ")", "\n", "", "either_raw_or_prepared_error_msg", "=", "\"Either specify a raw training corpus with %s and %s or a preprocessed corpus \"", "\"with %s.\"", "%", "(", "C", ".", "TRAINING_ARG_SOURCE", ",", "\n", "C", ".", "TRAINING_ARG_TARGET", ",", "\n", "C", ".", "TRAINING_ARG_PREPARED_DATA", ")", "\n", "if", "args", ".", "prepared_data", "is", "not", "None", ":", "\n", "        ", "utils", ".", "check_condition", "(", "args", ".", "source", "is", "None", "and", "args", ".", "target", "is", "None", ",", "either_raw_or_prepared_error_msg", ")", "\n", "if", "not", "resume_training", ":", "\n", "            ", "utils", ".", "check_condition", "(", "args", ".", "source_vocab", "is", "None", "and", "args", ".", "target_vocab", "is", "None", ",", "\n", "\"You are using a prepared data folder, which is tied to a vocabulary. \"", "\n", "\"To change it you need to rerun data preparation with a different vocabulary.\"", ")", "\n", "", "train_iter", ",", "validation_iter", ",", "data_config", ",", "source_vocabs", ",", "target_vocabs", "=", "data_io", ".", "get_prepared_data_iters", "(", "\n", "prepared_data_dir", "=", "args", ".", "prepared_data", ",", "\n", "validation_sources", "=", "validation_sources", ",", "\n", "validation_targets", "=", "validation_targets", ",", "\n", "shared_vocab", "=", "shared_vocab", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "batch_type", "=", "args", ".", "batch_type", ",", "\n", "batch_sentences_multiple_of", "=", "args", ".", "batch_sentences_multiple_of", ")", "\n", "\n", "check_condition", "(", "all", "(", "[", "combine", "in", "[", "C", ".", "FACTORS_COMBINE_SUM", ",", "C", ".", "FACTORS_COMBINE_AVERAGE", "]", "\n", "for", "combine", "in", "args", ".", "source_factors_combine", "]", ")", "\n", "or", "len", "(", "source_vocabs", ")", "==", "len", "(", "args", ".", "source_factors_num_embed", ")", "+", "1", ",", "\n", "\"Data was prepared with %d source factors, but only provided %d source factor dimensions.\"", "%", "(", "\n", "len", "(", "source_vocabs", ")", ",", "len", "(", "args", ".", "source_factors_num_embed", ")", "+", "1", ")", ")", "\n", "check_condition", "(", "all", "(", "[", "combine", "in", "[", "C", ".", "FACTORS_COMBINE_SUM", ",", "C", ".", "FACTORS_COMBINE_AVERAGE", "]", "\n", "for", "combine", "in", "args", ".", "target_factors_combine", "]", ")", "\n", "or", "len", "(", "target_vocabs", ")", "==", "len", "(", "args", ".", "target_factors_num_embed", ")", "+", "1", ",", "\n", "\"Data was prepared with %d target factors, but only provided %d target factor dimensions.\"", "%", "(", "\n", "len", "(", "target_vocabs", ")", ",", "len", "(", "args", ".", "target_factors_num_embed", ")", "+", "1", ")", ")", "\n", "\n", "if", "resume_training", ":", "\n", "# resuming training. Making sure the vocabs in the model and in the prepared data match up", "\n", "            ", "model_source_vocabs", "=", "vocab", ".", "load_source_vocabs", "(", "output_folder", ")", "\n", "for", "i", ",", "(", "v", ",", "mv", ")", "in", "enumerate", "(", "zip", "(", "source_vocabs", ",", "model_source_vocabs", ")", ")", ":", "\n", "                ", "utils", ".", "check_condition", "(", "vocab", ".", "are_identical", "(", "v", ",", "mv", ")", ",", "\n", "\"Prepared data and resumed model source vocab %d do not match.\"", "%", "i", ")", "\n", "", "model_target_vocabs", "=", "vocab", ".", "load_target_vocabs", "(", "output_folder", ")", "\n", "for", "i", ",", "(", "v", ",", "mv", ")", "in", "enumerate", "(", "zip", "(", "target_vocabs", ",", "model_target_vocabs", ")", ")", ":", "\n", "                ", "utils", ".", "check_condition", "(", "vocab", ".", "are_identical", "(", "v", ",", "mv", ")", ",", "\n", "\"Prepared data and resumed model target vocab %d do not match.\"", "%", "i", ")", "\n", "\n", "", "", "check_condition", "(", "data_config", ".", "num_source_factors", "==", "len", "(", "validation_sources", ")", ",", "\n", "'Training and validation data must have the same number of source factors,'", "\n", "' but found %d and %d.'", "%", "(", "\n", "data_config", ".", "num_source_factors", ",", "len", "(", "validation_sources", ")", ")", ")", "\n", "check_condition", "(", "data_config", ".", "num_target_factors", "==", "len", "(", "validation_targets", ")", ",", "\n", "'Training and validation data must have the same number of target factors,'", "\n", "' but found %d and %d.'", "%", "(", "\n", "data_config", ".", "num_target_factors", ",", "len", "(", "validation_targets", ")", ")", ")", "\n", "\n", "return", "train_iter", ",", "validation_iter", ",", "data_config", ",", "source_vocabs", ",", "target_vocabs", "\n", "\n", "", "else", ":", "\n", "        ", "utils", ".", "check_condition", "(", "args", ".", "prepared_data", "is", "None", "and", "args", ".", "source", "is", "not", "None", "and", "args", ".", "target", "is", "not", "None", ",", "\n", "either_raw_or_prepared_error_msg", ")", "\n", "\n", "if", "resume_training", ":", "\n", "# Load the existing vocabs created when starting the training run.", "\n", "            ", "source_vocabs", "=", "vocab", ".", "load_source_vocabs", "(", "output_folder", ")", "\n", "target_vocabs", "=", "vocab", ".", "load_target_vocabs", "(", "output_folder", ")", "\n", "\n", "# Recover the vocabulary path from the data info file:", "\n", "data_info", "=", "cast", "(", "data_io", ".", "DataInfo", ",", "Config", ".", "load", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "C", ".", "DATA_INFO", ")", ")", ")", "\n", "source_vocab_paths", "=", "data_info", ".", "source_vocabs", "\n", "target_vocab_paths", "=", "data_info", ".", "target_vocabs", "\n", "\n", "", "else", ":", "\n", "# Load or create vocabs", "\n", "            ", "source_factor_vocab_paths", "=", "[", "args", ".", "source_factor_vocabs", "[", "i", "]", "if", "i", "<", "len", "(", "args", ".", "source_factor_vocabs", ")", "\n", "else", "None", "for", "i", "in", "range", "(", "len", "(", "args", ".", "source_factors", ")", ")", "]", "\n", "source_vocab_paths", "=", "[", "args", ".", "source_vocab", "]", "+", "source_factor_vocab_paths", "\n", "target_factor_vocab_paths", "=", "[", "args", ".", "target_factor_vocabs", "[", "i", "]", "if", "i", "<", "len", "(", "args", ".", "target_factor_vocabs", ")", "\n", "else", "None", "for", "i", "in", "range", "(", "len", "(", "args", ".", "target_factors", ")", ")", "]", "\n", "target_vocab_paths", "=", "[", "args", ".", "target_vocab", "]", "+", "target_factor_vocab_paths", "\n", "source_vocabs", ",", "target_vocabs", "=", "vocab", ".", "load_or_create_vocabs", "(", "\n", "shard_source_paths", "=", "[", "[", "args", ".", "source", "]", "+", "args", ".", "source_factors", "]", ",", "\n", "shard_target_paths", "=", "[", "[", "args", ".", "target", "]", "+", "args", ".", "target_factors", "]", ",", "\n", "source_vocab_paths", "=", "source_vocab_paths", ",", "\n", "source_factor_vocab_same_as_source", "=", "args", ".", "source_factors_share_embedding", ",", "\n", "target_vocab_paths", "=", "target_vocab_paths", ",", "\n", "target_factor_vocab_same_as_target", "=", "args", ".", "target_factors_share_embedding", ",", "\n", "shared_vocab", "=", "shared_vocab", ",", "\n", "num_words_source", "=", "num_words_source", ",", "\n", "num_words_target", "=", "num_words_target", ",", "\n", "word_min_count_source", "=", "word_min_count_source", ",", "\n", "word_min_count_target", "=", "word_min_count_target", ",", "\n", "pad_to_multiple_of", "=", "args", ".", "pad_vocab_to_multiple_of", ")", "\n", "\n", "", "check_condition", "(", "all", "(", "[", "combine", "in", "[", "C", ".", "FACTORS_COMBINE_SUM", ",", "C", ".", "FACTORS_COMBINE_AVERAGE", "]", "\n", "for", "combine", "in", "args", ".", "source_factors_combine", "]", ")", "\n", "or", "len", "(", "args", ".", "source_factors", ")", "==", "len", "(", "args", ".", "source_factors_num_embed", ")", ",", "\n", "\"Number of source factor data (%d) differs from provided source factor dimensions (%d)\"", "%", "(", "\n", "len", "(", "args", ".", "source_factors", ")", ",", "len", "(", "args", ".", "source_factors_num_embed", ")", ")", ")", "\n", "check_condition", "(", "all", "(", "[", "combine", "in", "[", "C", ".", "FACTORS_COMBINE_SUM", ",", "C", ".", "FACTORS_COMBINE_AVERAGE", "]", "\n", "for", "combine", "in", "args", ".", "target_factors_combine", "]", ")", "\n", "or", "len", "(", "args", ".", "target_factors", ")", "==", "len", "(", "args", ".", "target_factors_num_embed", ")", ",", "\n", "\"Number of target factor data (%d) differs from provided source factor dimensions (%d)\"", "%", "(", "\n", "len", "(", "args", ".", "target_factors", ")", ",", "len", "(", "args", ".", "target_factors_num_embed", ")", ")", ")", "\n", "\n", "sources", "=", "[", "args", ".", "source", "]", "+", "args", ".", "source_factors", "\n", "sources", "=", "[", "str", "(", "os", ".", "path", ".", "abspath", "(", "s", ")", ")", "for", "s", "in", "sources", "]", "\n", "targets", "=", "[", "args", ".", "target", "]", "+", "args", ".", "target_factors", "\n", "targets", "=", "[", "str", "(", "os", ".", "path", ".", "abspath", "(", "t", ")", ")", "for", "t", "in", "targets", "]", "\n", "\n", "check_condition", "(", "len", "(", "sources", ")", "==", "len", "(", "validation_sources", ")", ",", "\n", "'Training and validation data must have the same number of source factors, '", "\n", "'but found %d and %d.'", "%", "(", "len", "(", "source_vocabs", ")", ",", "len", "(", "validation_sources", ")", ")", ")", "\n", "check_condition", "(", "len", "(", "targets", ")", "==", "len", "(", "validation_targets", ")", ",", "\n", "'Training and validation data must have the same number of target factors, '", "\n", "'but found %d and %d.'", "%", "(", "len", "(", "source_vocabs", ")", ",", "len", "(", "validation_sources", ")", ")", ")", "\n", "\n", "train_iter", ",", "validation_iter", ",", "config_data", ",", "data_info", "=", "data_io", ".", "get_training_data_iters", "(", "\n", "sources", "=", "sources", ",", "\n", "targets", "=", "targets", ",", "\n", "validation_sources", "=", "validation_sources", ",", "\n", "validation_targets", "=", "validation_targets", ",", "\n", "source_vocabs", "=", "source_vocabs", ",", "\n", "target_vocabs", "=", "target_vocabs", ",", "\n", "source_vocab_paths", "=", "source_vocab_paths", ",", "\n", "target_vocab_paths", "=", "target_vocab_paths", ",", "\n", "shared_vocab", "=", "shared_vocab", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "batch_type", "=", "args", ".", "batch_type", ",", "\n", "max_seq_len_source", "=", "max_seq_len_source", ",", "\n", "max_seq_len_target", "=", "max_seq_len_target", ",", "\n", "bucketing", "=", "not", "args", ".", "no_bucketing", ",", "\n", "bucket_width", "=", "args", ".", "bucket_width", ",", "\n", "bucket_scaling", "=", "args", ".", "bucket_scaling", ",", "\n", "batch_sentences_multiple_of", "=", "args", ".", "batch_sentences_multiple_of", ")", "\n", "\n", "data_info_fname", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "C", ".", "DATA_INFO", ")", "\n", "logger", ".", "info", "(", "\"Writing data config to '%s'\"", ",", "data_info_fname", ")", "\n", "data_info", ".", "save", "(", "data_info_fname", ")", "\n", "\n", "return", "train_iter", ",", "validation_iter", ",", "config_data", ",", "source_vocabs", ",", "target_vocabs", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.create_encoder_config": [[410, 459], ["zip", "transformer.TransformerConfig", "logger.info"], "function", ["None"], ["", "", "def", "create_encoder_config", "(", "args", ":", "argparse", ".", "Namespace", ",", "\n", "max_seq_len_source", ":", "int", ",", "\n", "max_seq_len_target", ":", "int", ",", "\n", "num_embed_source", ":", "int", ")", "->", "Tuple", "[", "transformer", ".", "TransformerConfig", ",", "int", "]", ":", "\n", "    ", "\"\"\"\n    Create the encoder config.\n\n    :param args: Arguments as returned by argparse.\n    :param max_seq_len_source: Maximum source sequence length.\n    :param max_seq_len_target: Maximum target sequence length.\n    :param num_embed_source: The size of the source embedding.\n    :return: The encoder config and the number of hidden units of the encoder.\n    \"\"\"", "\n", "encoder_num_layers", ",", "_", "=", "args", ".", "num_layers", "\n", "\n", "encoder_transformer_preprocess", ",", "_", "=", "args", ".", "transformer_preprocess", "\n", "encoder_transformer_postprocess", ",", "_", "=", "args", ".", "transformer_postprocess", "\n", "encoder_transformer_model_size", ",", "_", "=", "args", ".", "transformer_model_size", "\n", "\n", "total_source_factor_size", "=", "0", "\n", "for", "factor_combine", ",", "factor_size", "in", "zip", "(", "args", ".", "source_factors_combine", ",", "args", ".", "source_factors_num_embed", ")", ":", "\n", "        ", "if", "factor_combine", "==", "C", ".", "FACTORS_COMBINE_CONCAT", ":", "\n", "            ", "total_source_factor_size", "+=", "factor_size", "\n", "", "", "if", "total_source_factor_size", ">", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Encoder transformer-model-size adjusted to account for source factor embeddings: %d -> %d\"", "%", "(", "\n", "encoder_transformer_model_size", ",", "num_embed_source", "+", "total_source_factor_size", ")", ")", "\n", "encoder_transformer_model_size", "=", "num_embed_source", "+", "total_source_factor_size", "\n", "\n", "", "config_encoder", "=", "transformer", ".", "TransformerConfig", "(", "\n", "model_size", "=", "encoder_transformer_model_size", ",", "\n", "attention_heads", "=", "args", ".", "transformer_attention_heads", "[", "0", "]", ",", "\n", "feed_forward_num_hidden", "=", "args", ".", "transformer_feed_forward_num_hidden", "[", "0", "]", ",", "\n", "act_type", "=", "args", ".", "transformer_activation_type", "[", "0", "]", ",", "\n", "num_layers", "=", "encoder_num_layers", ",", "\n", "dropout_attention", "=", "args", ".", "transformer_dropout_attention", "[", "0", "]", ",", "\n", "dropout_act", "=", "args", ".", "transformer_dropout_act", "[", "0", "]", ",", "\n", "dropout_prepost", "=", "args", ".", "transformer_dropout_prepost", "[", "0", "]", ",", "\n", "positional_embedding_type", "=", "args", ".", "transformer_positional_embedding_type", ",", "\n", "preprocess_sequence", "=", "encoder_transformer_preprocess", ",", "\n", "postprocess_sequence", "=", "encoder_transformer_postprocess", ",", "\n", "max_seq_len_source", "=", "max_seq_len_source", ",", "\n", "max_seq_len_target", "=", "max_seq_len_target", ",", "\n", "depth_key_value", "=", "encoder_transformer_model_size", ",", "\n", "use_lhuc", "=", "args", ".", "lhuc", "is", "not", "None", "and", "(", "C", ".", "LHUC_ENCODER", "in", "args", ".", "lhuc", "or", "C", ".", "LHUC_ALL", "in", "args", ".", "lhuc", ")", ",", "\n", "decoder_type", "=", "args", ".", "decoder", ",", "\n", "use_glu", "=", "args", ".", "transformer_feed_forward_use_glu", ")", "\n", "encoder_num_hidden", "=", "encoder_transformer_model_size", "\n", "\n", "return", "config_encoder", ",", "encoder_num_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.create_decoder_config": [[461, 511], ["zip", "transformer.TransformerConfig", "logger.info"], "function", ["None"], ["", "def", "create_decoder_config", "(", "args", ":", "argparse", ".", "Namespace", ",", "\n", "encoder_num_hidden", ":", "int", ",", "\n", "max_seq_len_source", ":", "int", ",", "\n", "max_seq_len_target", ":", "int", ",", "\n", "num_embed_target", ":", "int", ")", "->", "transformer", ".", "TransformerConfig", ":", "\n", "    ", "\"\"\"\n    Create the config for the decoder.\n\n    :param args: Arguments as returned by argparse.\n    :param encoder_num_hidden: Number of hidden units of the Encoder.\n    :param max_seq_len_source: Maximum source sequence length.\n    :param max_seq_len_target: Maximum target sequence length.\n    :param num_embed_target: The size of the target embedding.\n    :return: The config for the decoder.\n    \"\"\"", "\n", "_", ",", "decoder_num_layers", "=", "args", ".", "num_layers", "\n", "\n", "_", ",", "decoder_transformer_preprocess", "=", "args", ".", "transformer_preprocess", "\n", "_", ",", "decoder_transformer_postprocess", "=", "args", ".", "transformer_postprocess", "\n", "_", ",", "decoder_transformer_model_size", "=", "args", ".", "transformer_model_size", "\n", "\n", "total_target_factor_size", "=", "0", "\n", "for", "factor_combine", ",", "factor_size", "in", "zip", "(", "args", ".", "target_factors_combine", ",", "args", ".", "target_factors_num_embed", ")", ":", "\n", "        ", "if", "factor_combine", "==", "C", ".", "FACTORS_COMBINE_CONCAT", ":", "\n", "            ", "total_target_factor_size", "+=", "factor_size", "\n", "", "", "if", "total_target_factor_size", ">", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Decoder transformer-model-size adjusted to account for target factor embeddings: %d -> %d\"", "%", "(", "\n", "decoder_transformer_model_size", ",", "num_embed_target", "+", "total_target_factor_size", ")", ")", "\n", "decoder_transformer_model_size", "=", "num_embed_target", "+", "total_target_factor_size", "\n", "\n", "", "config_decoder", "=", "transformer", ".", "TransformerConfig", "(", "\n", "model_size", "=", "decoder_transformer_model_size", ",", "\n", "attention_heads", "=", "args", ".", "transformer_attention_heads", "[", "1", "]", ",", "\n", "feed_forward_num_hidden", "=", "args", ".", "transformer_feed_forward_num_hidden", "[", "1", "]", ",", "\n", "act_type", "=", "args", ".", "transformer_activation_type", "[", "1", "]", ",", "\n", "num_layers", "=", "decoder_num_layers", ",", "\n", "dropout_attention", "=", "args", ".", "transformer_dropout_attention", "[", "1", "]", ",", "\n", "dropout_act", "=", "args", ".", "transformer_dropout_act", "[", "1", "]", ",", "\n", "dropout_prepost", "=", "args", ".", "transformer_dropout_prepost", "[", "1", "]", ",", "\n", "positional_embedding_type", "=", "args", ".", "transformer_positional_embedding_type", ",", "\n", "preprocess_sequence", "=", "decoder_transformer_preprocess", ",", "\n", "postprocess_sequence", "=", "decoder_transformer_postprocess", ",", "\n", "max_seq_len_source", "=", "max_seq_len_source", ",", "\n", "max_seq_len_target", "=", "max_seq_len_target", ",", "\n", "use_lhuc", "=", "args", ".", "lhuc", "is", "not", "None", "and", "(", "C", ".", "LHUC_DECODER", "in", "args", ".", "lhuc", "or", "C", ".", "LHUC_ALL", "in", "args", ".", "lhuc", ")", ",", "\n", "depth_key_value", "=", "encoder_num_hidden", ",", "\n", "decoder_type", "=", "args", ".", "decoder", ",", "\n", "use_glu", "=", "args", ".", "transformer_feed_forward_use_glu", ")", "\n", "\n", "return", "config_decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.get_num_embed": [[513, 577], ["zip", "zip", "logger.info", "utils.check_condition", "utils.check_condition", "logger.info", "utils.check_condition", "utils.check_condition", "utils.check_condition"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["", "def", "get_num_embed", "(", "args", ":", "argparse", ".", "Namespace", ")", "->", "Tuple", "[", "int", ",", "int", "]", ":", "\n", "    ", "num_embed_source", ",", "num_embed_target", "=", "args", ".", "num_embed", "\n", "\n", "transformer_model_size_source", "=", "args", ".", "transformer_model_size", "[", "0", "]", "\n", "if", "not", "num_embed_source", ":", "\n", "        ", "logger", ".", "info", "(", "\"Source embedding size was not set it will automatically be adjusted to match the \"", "\n", "\"Transformer source model size (%d).\"", ",", "transformer_model_size_source", ")", "\n", "num_embed_source", "=", "transformer_model_size_source", "\n", "", "else", ":", "\n", "        ", "check_condition", "(", "args", ".", "transformer_model_size", "[", "0", "]", "==", "num_embed_source", ",", "\n", "\"Source embedding size must match transformer model size: %s vs. %s\"", "\n", "%", "(", "args", ".", "transformer_model_size", "[", "0", "]", ",", "num_embed_source", ")", ")", "\n", "\n", "", "total_source_factor_size", "=", "0", "\n", "for", "factor_combine", ",", "factor_size", "in", "zip", "(", "args", ".", "source_factors_combine", ",", "args", ".", "source_factors_num_embed", ")", ":", "\n", "        ", "if", "factor_combine", "==", "C", ".", "FACTORS_COMBINE_CONCAT", ":", "\n", "            ", "total_source_factor_size", "+=", "factor_size", "\n", "", "", "if", "total_source_factor_size", ">", "0", ":", "\n", "        ", "adjusted_transformer_encoder_model_size", "=", "num_embed_source", "+", "total_source_factor_size", "\n", "check_condition", "(", "adjusted_transformer_encoder_model_size", "%", "2", "==", "0", "and", "\n", "adjusted_transformer_encoder_model_size", "%", "args", ".", "transformer_attention_heads", "[", "0", "]", "==", "0", ",", "\n", "\"Sum of source factor sizes, i.e. num-embed plus source-factors-num-embed, (%d) \"", "\n", "\"has to be even and a multiple of encoder attention heads (%d)\"", "%", "(", "\n", "adjusted_transformer_encoder_model_size", ",", "args", ".", "transformer_attention_heads", "[", "0", "]", ")", ")", "\n", "\n", "", "if", "not", "num_embed_source", ":", "\n", "        ", "num_embed_source", "=", "C", ".", "DEFAULT_NUM_EMBED", "\n", "\n", "", "transformer_model_size_target", "=", "args", ".", "transformer_model_size", "[", "1", "]", "\n", "total_target_factor_size", "=", "0", "\n", "for", "factor_combine", ",", "factor_size", "in", "zip", "(", "args", ".", "target_factors_combine", ",", "args", ".", "target_factors_num_embed", ")", ":", "\n", "        ", "if", "factor_combine", "==", "C", ".", "FACTORS_COMBINE_CONCAT", ":", "\n", "            ", "total_target_factor_size", "+=", "factor_size", "\n", "\n", "", "", "if", "not", "num_embed_target", ":", "\n", "        ", "logger", ".", "info", "(", "\"Target embedding size was not set it will automatically be adjusted to match the \"", "\n", "\"Transformer target model size (%d).\"", ",", "transformer_model_size_target", ")", "\n", "num_embed_target", "=", "transformer_model_size_target", "\n", "", "else", ":", "\n", "# Make sure that if the user sets num_embed it matches the Transformer model size", "\n", "        ", "check_condition", "(", "args", ".", "transformer_model_size", "[", "1", "]", "==", "num_embed_target", "+", "total_target_factor_size", ",", "\n", "\"Target embedding size must match transformer model size: %s vs. %s\"", "\n", "%", "(", "args", ".", "transformer_model_size", "[", "1", "]", ",", "num_embed_target", "+", "total_target_factor_size", ")", ")", "\n", "\n", "", "if", "total_target_factor_size", ">", "0", ":", "\n", "        ", "adjusted_transformer_decoder_model_size", "=", "num_embed_target", "+", "total_target_factor_size", "\n", "check_condition", "(", "adjusted_transformer_decoder_model_size", "%", "2", "==", "0", "and", "\n", "adjusted_transformer_decoder_model_size", "%", "args", ".", "transformer_attention_heads", "[", "0", "]", "==", "0", ",", "\n", "\"Sum of target factor sizes, i.e. num-embed plus target-factors-num-embed, (%d) \"", "\n", "\"has to be even and a multiple of encoder attention heads (%d)\"", "%", "(", "\n", "adjusted_transformer_decoder_model_size", ",", "args", ".", "transformer_attention_heads", "[", "0", "]", ")", ")", "\n", "# Whenever an input embedding weight is used for the output layer, we cannot use", "\n", "# 'concatenation' as the method of combining target factors to the regular target input embedding:", "\n", "# num_embed_target + factor_sizes = transformer_model_size", "\n", "# output layer input: transformer_model_size, its parameters are however of size num_embed_target", "\n", "check_condition", "(", "C", ".", "WEIGHT_TYING_SOFTMAX", "not", "in", "args", ".", "weight_tying_type", ",", "\n", "\"Cannot use weight tying of target input and output embeddings when target factors \"", "\n", "\"are defined and to be combined via 'concat'. Use 'sum' instead or disable \"", "\n", "\"weight tying\"", ")", "\n", "\n", "", "if", "not", "num_embed_target", ":", "\n", "        ", "num_embed_target", "=", "C", ".", "DEFAULT_NUM_EMBED", "\n", "\n", "", "return", "num_embed_source", ",", "num_embed_target", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.create_model_config": [[579, 686], ["train.get_num_embed", "train.create_encoder_config", "train.create_decoder_config", "encoder.EmbeddingConfig", "encoder.EmbeddingConfig", "model.ModelConfig", "len", "len", "layers.LengthRatioConfig", "logger.info", "enumerate", "encoder.FactorConfig", "logger.info", "enumerate", "encoder.FactorConfig", "len", "zip", "len", "zip", "logger.info", "logger.info"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.get_num_embed", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.create_encoder_config", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.create_decoder_config"], ["", "def", "create_model_config", "(", "args", ":", "argparse", ".", "Namespace", ",", "\n", "source_vocab_sizes", ":", "List", "[", "int", "]", ",", "\n", "target_vocab_sizes", ":", "List", "[", "int", "]", ",", "\n", "max_seq_len_source", ":", "int", ",", "\n", "max_seq_len_target", ":", "int", ",", "\n", "config_data", ":", "data_io", ".", "DataConfig", ")", "->", "model", ".", "ModelConfig", ":", "\n", "    ", "\"\"\"\n    Create a ModelConfig from the argument given in the command line.\n\n    :param args: Arguments as returned by argparse.\n    :param source_vocab_sizes: The size of the source vocabulary (and source factors).\n    :param target_vocab_sizes: The size of the target vocabulary (and target factors).\n    :param max_seq_len_source: Maximum source sequence length.\n    :param max_seq_len_target: Maximum target sequence length.\n    :param config_data: Data config.\n    :return: The model configuration.\n    \"\"\"", "\n", "num_embed_source", ",", "num_embed_target", "=", "get_num_embed", "(", "args", ")", "\n", "\n", "embed_dropout_source", ",", "embed_dropout_target", "=", "args", ".", "embed_dropout", "\n", "source_vocab_size", ",", "*", "source_factor_vocab_sizes", "=", "source_vocab_sizes", "\n", "target_vocab_size", ",", "*", "target_factor_vocab_sizes", "=", "target_vocab_sizes", "\n", "\n", "config_encoder", ",", "encoder_num_hidden", "=", "create_encoder_config", "(", "args", ",", "max_seq_len_source", ",", "max_seq_len_target", ",", "\n", "num_embed_source", ")", "\n", "config_decoder", "=", "create_decoder_config", "(", "args", ",", "encoder_num_hidden", ",", "max_seq_len_source", ",", "max_seq_len_target", ",", "\n", "num_embed_target", ")", "\n", "\n", "source_factor_configs", "=", "None", "\n", "if", "len", "(", "source_vocab_sizes", ")", ">", "1", ":", "\n", "        ", "source_factors_num_embed", "=", "args", ".", "source_factors_num_embed", "\n", "if", "not", "source_factors_num_embed", ":", "\n", "# This happens if the combination method is sum or average. We then", "\n", "# set the dimension to num_embed_source for all factors", "\n", "            ", "logger", ".", "info", "(", "\"Setting all source factor embedding sizes to `num_embed` ('%d')\"", ",", "\n", "num_embed_source", ")", "\n", "source_factors_num_embed", "=", "[", "num_embed_source", "]", "*", "len", "(", "source_factor_vocab_sizes", ")", "\n", "", "else", ":", "\n", "# Check each individual factor", "\n", "            ", "for", "i", ",", "combine", "in", "enumerate", "(", "args", ".", "source_factors_combine", ")", ":", "\n", "                ", "if", "combine", "in", "[", "C", ".", "FACTORS_COMBINE_SUM", ",", "C", ".", "FACTORS_COMBINE_AVERAGE", "]", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Setting embedding size of source factor %d to `num_embed` ('%d') for %s\"", ",", "\n", "i", "+", "1", ",", "num_embed_source", ",", "\n", "\"summing\"", "if", "combine", "==", "C", ".", "FACTORS_COMBINE_SUM", "else", "\"averaging\"", ")", "\n", "source_factors_num_embed", "[", "i", "]", "=", "num_embed_source", "\n", "\n", "", "", "", "source_factor_configs", "=", "[", "encoder", ".", "FactorConfig", "(", "size", ",", "dim", ",", "combine", ",", "share", ")", "for", "size", ",", "dim", ",", "combine", ",", "share", "in", "zip", "(", "source_factor_vocab_sizes", ",", "\n", "source_factors_num_embed", ",", "\n", "args", ".", "source_factors_combine", ",", "\n", "args", ".", "source_factors_share_embedding", ")", "]", "\n", "\n", "", "target_factor_configs", "=", "None", "\n", "if", "len", "(", "target_vocab_sizes", ")", ">", "1", ":", "\n", "        ", "target_factors_num_embed", "=", "args", ".", "target_factors_num_embed", "\n", "if", "not", "target_factors_num_embed", ":", "\n", "# This happens if the combination method is sum or average. We then", "\n", "# set the dimension to num_embed_target for all factors", "\n", "            ", "logger", ".", "info", "(", "\"Setting all target factor embedding sizes to `num_embed` ('%d')\"", ",", "\n", "num_embed_target", ")", "\n", "target_factors_num_embed", "=", "[", "num_embed_target", "]", "*", "len", "(", "target_factor_vocab_sizes", ")", "\n", "", "else", ":", "\n", "# Check each individual factor", "\n", "            ", "for", "i", ",", "combine", "in", "enumerate", "(", "args", ".", "target_factors_combine", ")", ":", "\n", "                ", "if", "combine", "in", "[", "C", ".", "FACTORS_COMBINE_SUM", ",", "C", ".", "FACTORS_COMBINE_AVERAGE", "]", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Setting embedding size of target factor %d to `num_embed` ('%d') for %s\"", ",", "\n", "i", "+", "1", ",", "num_embed_target", ",", "\n", "\"summing\"", "if", "combine", "==", "C", ".", "FACTORS_COMBINE_SUM", "else", "\"averaging\"", ")", "\n", "target_factors_num_embed", "[", "i", "]", "=", "num_embed_target", "\n", "\n", "", "", "", "target_factor_configs", "=", "[", "encoder", ".", "FactorConfig", "(", "size", ",", "dim", ",", "combine", ",", "share", ")", "for", "size", ",", "dim", ",", "combine", ",", "share", "in", "zip", "(", "target_factor_vocab_sizes", ",", "\n", "target_factors_num_embed", ",", "\n", "args", ".", "target_factors_combine", ",", "\n", "args", ".", "target_factors_share_embedding", ")", "]", "\n", "\n", "", "config_embed_source", "=", "encoder", ".", "EmbeddingConfig", "(", "vocab_size", "=", "source_vocab_size", ",", "\n", "num_embed", "=", "num_embed_source", ",", "\n", "dropout", "=", "embed_dropout_source", ",", "\n", "factor_configs", "=", "source_factor_configs", ",", "\n", "allow_sparse_grad", "=", "False", ")", "\n", "\n", "config_embed_target", "=", "encoder", ".", "EmbeddingConfig", "(", "vocab_size", "=", "target_vocab_size", ",", "\n", "num_embed", "=", "num_embed_target", ",", "\n", "dropout", "=", "embed_dropout_target", ",", "\n", "factor_configs", "=", "target_factor_configs", ",", "\n", "allow_sparse_grad", "=", "False", ")", "\n", "\n", "config_length_task", "=", "None", "\n", "if", "args", ".", "length_task", "is", "not", "None", ":", "\n", "        ", "config_length_task", "=", "layers", ".", "LengthRatioConfig", "(", "num_layers", "=", "args", ".", "length_task_layers", ",", "\n", "weight", "=", "args", ".", "length_task_weight", ")", "\n", "\n", "", "model_config", "=", "model", ".", "ModelConfig", "(", "config_data", "=", "config_data", ",", "\n", "vocab_source_size", "=", "source_vocab_size", ",", "\n", "vocab_target_size", "=", "target_vocab_size", ",", "\n", "config_embed_source", "=", "config_embed_source", ",", "\n", "config_embed_target", "=", "config_embed_target", ",", "\n", "config_encoder", "=", "config_encoder", ",", "\n", "config_decoder", "=", "config_decoder", ",", "\n", "config_length_task", "=", "config_length_task", ",", "\n", "weight_tying_type", "=", "args", ".", "weight_tying_type", ",", "\n", "neural_vocab_selection", "=", "args", ".", "neural_vocab_selection", ",", "\n", "neural_vocab_selection_block_loss", "=", "args", ".", "neural_vocab_selection_block_loss", ",", "\n", "lhuc", "=", "args", ".", "lhuc", "is", "not", "None", ",", "\n", "dtype", "=", "C", ".", "DTYPE_FP32", ")", "\n", "return", "model_config", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.create_losses": [[688, 741], ["enumerate", "len", "utils.check_condition", "zip", "losses.append", "loss.BinaryCrossEntropyBowLoss", "losses.append", "len", "loss.CrossEntropyLoss", "losses.append", "losses.append", "len", "len", "loss.MSELoss", "loss.PoissonLoss"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["", "def", "create_losses", "(", "args", ":", "argparse", ".", "Namespace", ",", "all_num_classes", ":", "List", "[", "int", "]", ")", "->", "List", "[", "loss", ".", "Loss", "]", ":", "\n", "# loss weights per factor", "\n", "    ", "if", "len", "(", "args", ".", "target_factors_weight", ")", "!=", "len", "(", "all_num_classes", ")", "-", "1", ":", "\n", "        ", "check_condition", "(", "len", "(", "args", ".", "target_factors_weight", ")", "==", "1", ",", "\n", "\"Must provide the same number of target factor weights as secondary target factors, or one.\"", ")", "\n", "factor_weights", "=", "args", ".", "target_factors_weight", "*", "(", "len", "(", "all_num_classes", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "factor_weights", "=", "args", ".", "target_factors_weight", "\n", "", "loss_weights", "=", "[", "1.0", "]", "+", "factor_weights", "\n", "\n", "losses", "=", "[", "]", "# type: List[loss.Loss]", "\n", "\n", "# Cross-Entropy losses for all target streams/factors", "\n", "for", "i", ",", "(", "num_classes", ",", "weight", ")", "in", "enumerate", "(", "zip", "(", "all_num_classes", ",", "loss_weights", ")", ")", ":", "\n", "        ", "name", "=", "C", ".", "CROSS_ENTROPY", "\n", "metric_prefix", "=", "''", "if", "i", "==", "0", "else", "'f%i-'", "%", "i", "\n", "output_name", "=", "C", ".", "LOGITS_NAME", "if", "i", "==", "0", "else", "C", ".", "FACTOR_LOGITS_NAME", "%", "i", "\n", "label_name", "=", "C", ".", "TARGET_LABEL_NAME", "if", "i", "==", "0", "else", "C", ".", "TARGET_FACTOR_LABEL_NAME", "%", "i", "\n", "label_smoothing", "=", "args", ".", "label_smoothing", "if", "i", "==", "0", "else", ".0", "# Note: No label smoothing for target factor losses.", "\n", "\n", "losses", ".", "append", "(", "loss", ".", "CrossEntropyLoss", "(", "name", "=", "name", ",", "\n", "weight", "=", "weight", ",", "\n", "label_smoothing", "=", "label_smoothing", ",", "\n", "dtype", "=", "C", ".", "DTYPE_FP32", ",", "\n", "output_name", "=", "output_name", ",", "\n", "label_name", "=", "label_name", ",", "\n", "metric_prefix", "=", "metric_prefix", ",", "\n", "label_smoothing_impl", "=", "args", ".", "label_smoothing_impl", ")", ")", "\n", "\n", "", "if", "args", ".", "length_task", "is", "not", "None", ":", "\n", "        ", "weight", "=", "args", ".", "length_task_weight", "\n", "if", "args", ".", "length_task", "==", "C", ".", "LENGTH_TASK_RATIO", ":", "\n", "            ", "losses", ".", "append", "(", "loss", ".", "MSELoss", "(", "name", "=", "f'{C.LENRATIO_NAME}_{C.LINK_NORMAL}'", ",", "\n", "weight", "=", "weight", ",", "\n", "output_name", "=", "C", ".", "LENRATIO_NAME", ",", "\n", "label_name", "=", "C", ".", "LENRATIO_LABEL_NAME", ")", ")", "\n", "", "else", ":", "\n", "            ", "losses", ".", "append", "(", "loss", ".", "PoissonLoss", "(", "name", "=", "f'{C.LENRATIO_NAME}_{C.LINK_POISSON}'", ",", "\n", "weight", "=", "weight", ",", "\n", "output_name", "=", "C", ".", "LENRATIO_NAME", ",", "\n", "label_name", "=", "C", ".", "LENRATIO_LABEL_NAME", ")", ")", "\n", "\n", "", "", "if", "args", ".", "neural_vocab_selection", ":", "\n", "        ", "bow_loss", "=", "loss", ".", "BinaryCrossEntropyBowLoss", "(", "name", "=", "\"bow_ce\"", ",", "\n", "output_name", "=", "C", ".", "NVS_PRED_NAME", ",", "\n", "weight", "=", "args", ".", "bow_task_weight", ",", "\n", "pos_weight", "=", "args", ".", "bow_task_pos_weight", ",", "\n", "num_labels", "=", "all_num_classes", "[", "0", "]", ",", "\n", "label_name", "=", "C", ".", "TARGET_LABEL_NAME", ",", "\n", "metric_prefix", "=", "\"bow\"", ")", "\n", "losses", ".", "append", "(", "bow_loss", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.create_optimizer_config": [[743, 784], ["train.none_if_negative", "lr_scheduler.get_lr_scheduler", "optimizers.OptimizerConfig", "logger.info", "logger.info", "logger.info", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "utils.is_distributed"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.none_if_negative", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.get_lr_scheduler", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_distributed"], ["", "def", "create_optimizer_config", "(", "args", ":", "argparse", ".", "Namespace", ")", "->", "optimizers", ".", "OptimizerConfig", ":", "\n", "    ", "\"\"\"\n    Returns an OptimizerConfig.\n\n    :param args: Arguments as returned by argparse.\n\n    :return: The config dataclass specifying the optimizer and related settings.\n    \"\"\"", "\n", "gradient_clipping_threshold", "=", "none_if_negative", "(", "args", ".", "gradient_clipping_threshold", ")", "\n", "if", "gradient_clipping_threshold", "is", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Gradient clipping threshold set to negative value. Will not perform gradient clipping.\"", ")", "\n", "gradient_clipping_type", "=", "C", ".", "GRADIENT_CLIPPING_TYPE_NONE", "\n", "", "else", ":", "\n", "        ", "gradient_clipping_type", "=", "args", ".", "gradient_clipping_type", "\n", "\n", "", "lr_sched", "=", "lr_scheduler", ".", "get_lr_scheduler", "(", "args", ".", "learning_rate_scheduler_type", ",", "\n", "args", ".", "initial_learning_rate", ",", "\n", "args", ".", "learning_rate_t_scale", ",", "\n", "args", ".", "learning_rate_reduce_factor", ",", "\n", "args", ".", "learning_rate_reduce_num_not_improved", ",", "\n", "args", ".", "learning_rate_warmup", ",", "\n", "args", ".", "max_updates", ")", "\n", "\n", "config", "=", "optimizers", ".", "OptimizerConfig", "(", "name", "=", "args", ".", "optimizer", ",", "\n", "running_on_gpu", "=", "not", "args", ".", "use_cpu", ",", "\n", "lr", "=", "args", ".", "initial_learning_rate", ",", "\n", "betas", "=", "args", ".", "optimizer_betas", ",", "\n", "eps", "=", "args", ".", "optimizer_eps", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "gradient_clipping_type", "=", "gradient_clipping_type", ",", "\n", "gradient_clipping_threshold", "=", "gradient_clipping_threshold", ",", "\n", "lr_scheduler", "=", "lr_sched", ")", "\n", "\n", "num_workers", "=", "1", "if", "not", "utils", ".", "is_distributed", "(", ")", "else", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "effective_batch_size", "=", "args", ".", "batch_size", "*", "args", ".", "update_interval", "*", "num_workers", "\n", "logger", ".", "info", "(", "config", ")", "\n", "logger", ".", "info", "(", "f'Gradient accumulation over {args.update_interval} batch(es) by {num_workers} worker(s). Effective '", "\n", "f'batch size: {effective_batch_size}'", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.unset_requires_grad_for_fixed_params": [[786, 805], ["utils.check_condition", "logger.info", "train.fixed_param_names_from_strategy", "logger.info", "logger.warning", "name.endswith"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.fixed_param_names_from_strategy"], ["", "def", "unset_requires_grad_for_fixed_params", "(", "config", ":", "model", ".", "ModelConfig", ",", "\n", "params", ":", "Dict", "[", "str", ",", "torch", ".", "nn", ".", "parameter", ".", "Parameter", "]", ",", "\n", "fixed_param_names", ":", "List", "[", "str", "]", ",", "\n", "fixed_param_strategy", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "    ", "utils", ".", "check_condition", "(", "not", "config", ".", "lhuc", "or", "fixed_param_strategy", "is", "None", ",", "\n", "\"LHUC fixes all other parameters and is thus not compatible with other fixing strategies.\"", ")", "\n", "if", "config", ".", "lhuc", ":", "\n", "# fix everything except LHUC-related parameters", "\n", "        ", "fixed_param_names", "+=", "[", "name", "for", "name", "in", "params", "if", "not", "name", ".", "endswith", "(", "\"lhuc.weight\"", ")", "]", "\n", "logger", ".", "info", "(", "\"LHUC enabled, fixing all non-LHUC parameters\"", ")", "\n", "", "elif", "fixed_param_strategy", "is", "not", "None", ":", "\n", "        ", "fixed_param_names", "+=", "fixed_param_names_from_strategy", "(", "config", ",", "params", ",", "fixed_param_strategy", ")", "\n", "logger", ".", "info", "(", "\"Fixed param strategy: '%s'\"", ",", "fixed_param_strategy", ")", "\n", "\n", "", "for", "name", "in", "fixed_param_names", ":", "\n", "        ", "if", "name", "not", "in", "params", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Fixed parameter name '%s' not part of model parameters, ignoring\"", ",", "name", ")", "\n", "continue", "\n", "", "params", "[", "name", "]", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.fixed_param_names_from_strategy": [[807, 852], ["ValueError", "name.startswith", "name.startswith", "train.fixed_param_names_from_strategy.is_fixed"], "function", ["None"], ["", "", "def", "fixed_param_names_from_strategy", "(", "config", ":", "model", ".", "ModelConfig", ",", "\n", "params", ":", "Dict", "[", "str", ",", "torch", ".", "nn", ".", "parameter", ".", "Parameter", "]", ",", "\n", "strategy", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Generate a fixed parameter list given a list of all parameter names and\n    a strategy.\n    \"\"\"", "\n", "# Number of encoder/decoder layers in model.", "\n", "num_encoder_layers", "=", "config", ".", "config_encoder", ".", "num_layers", "\n", "num_decoder_layers", "=", "config", ".", "config_decoder", ".", "num_layers", "\n", "\n", "def", "is_fixed", "(", "name", ":", "str", ")", "->", "bool", ":", "\n", "        ", "if", "strategy", "==", "C", ".", "FIXED_PARAM_STRATEGY_ALL_EXCEPT_DECODER", ":", "\n", "# Any decoder layer.", "\n", "            ", "return", "not", "name", ".", "startswith", "(", "C", ".", "DECODER_PREFIX", ")", "\n", "", "if", "strategy", "==", "C", ".", "FIXED_PARAM_STRATEGY_ALL_EXCEPT_OUTER_LAYERS", ":", "\n", "# First and last encoder and decoder layers (this excludes output layer and NVS).", "\n", "            ", "first_encoder_prefix", "=", "f'{C.ENCODER_PREFIX}.layers.{0}'", "\n", "last_encoder_prefix", "=", "f'{C.ENCODER_PREFIX}.layers.{num_encoder_layers - 1}'", "\n", "first_decoder_prefix", "=", "f'{C.DECODER_PREFIX}.layers.{0}'", "\n", "last_decoder_prefix", "=", "f'{C.DECODER_PREFIX}.layers.{num_decoder_layers - 1}'", "\n", "return", "not", "(", "name", ".", "startswith", "(", "first_encoder_prefix", ")", "or", "\n", "name", ".", "startswith", "(", "last_encoder_prefix", ")", "or", "\n", "name", ".", "startswith", "(", "first_decoder_prefix", ")", "or", "\n", "name", ".", "startswith", "(", "last_decoder_prefix", ")", ")", "\n", "", "if", "strategy", "==", "C", ".", "FIXED_PARAM_STRATEGY_ALL_EXCEPT_EMBEDDINGS", ":", "\n", "# Any type of learned embedding.", "\n", "            ", "return", "not", "(", "name", ".", "startswith", "(", "C", ".", "SOURCE_EMBEDDING_PREFIX", ")", "or", "name", ".", "startswith", "(", "C", ".", "TARGET_EMBEDDING_PREFIX", ")", ")", "\n", "", "if", "strategy", "==", "C", ".", "FIXED_PARAM_STRATEGY_ALL_EXCEPT_OUTPUT_PROJ", ":", "\n", "# Target output projection.", "\n", "            ", "return", "not", "name", ".", "startswith", "(", "C", ".", "DEFAULT_OUTPUT_LAYER_PREFIX", ")", "and", "not", "name", ".", "startswith", "(", "C", ".", "NVS_LAYER_PREFIX", ")", "\n", "", "if", "strategy", "==", "C", ".", "FIXED_PARAM_STRATEGY_ALL_EXCEPT_FEED_FORWARD", ":", "\n", "            ", "return", "not", "(", "name", ".", "endswith", "(", "\"ff.ff1.bias\"", ")", "or", "name", ".", "endswith", "(", "\"ff.ff1.weight\"", ")", "or", "\n", "name", ".", "endswith", "(", "\"ff.ff2.bias\"", ")", "or", "name", ".", "endswith", "(", "\"ff.ff2.weight\"", ")", ")", "\n", "", "if", "strategy", "==", "C", ".", "FIXED_PARAM_STRATEGY_ENCODER_AND_SOURCE_EMBEDDINGS", ":", "\n", "            ", "return", "name", ".", "startswith", "(", "C", ".", "ENCODER_PREFIX", ")", "or", "name", ".", "startswith", "(", "C", ".", "SOURCE_EMBEDDING_PREFIX", ")", "\n", "", "if", "strategy", "==", "C", ".", "FIXED_PARAM_STRATEGY_ENCODER_HALF_AND_SOURCE_EMBEDDINGS", ":", "\n", "            ", "if", "name", ".", "startswith", "(", "C", ".", "ENCODER_PREFIX", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "num_encoder_layers", "//", "2", ")", ":", "\n", "                    ", "if", "name", ".", "startswith", "(", "f\"{C.ENCODER_PREFIX}.layers.{i}\"", ")", ":", "\n", "                        ", "return", "True", "\n", "", "", "", "return", "name", ".", "startswith", "(", "C", ".", "SOURCE_EMBEDDING_PREFIX", ")", "\n", "", "raise", "ValueError", "(", "\"Unknown fixed parameter strategy: %s\"", "%", "strategy", ")", "\n", "\n", "", "return", "[", "name", "for", "name", "in", "params", "if", "is_fixed", "(", "name", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.main": [[854, 859], ["arguments.ConfigArgumentParser", "arguments.add_train_cli_args", "arguments.ConfigArgumentParser.parse_args", "train.train"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_train_cli_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.train"], ["", "def", "main", "(", ")", ":", "\n", "    ", "params", "=", "arguments", ".", "ConfigArgumentParser", "(", "description", "=", "'Train Sockeye sequence-to-sequence models.'", ")", "\n", "arguments", ".", "add_train_cli_args", "(", "params", ")", "\n", "args", "=", "params", ".", "parse_args", "(", ")", "\n", "train", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.train": [[861, 1073], ["train.check_arg_compatibility", "os.path.abspath", "train.check_resume", "os.path.join", "log.setup_main_logger", "utils.log_basic_info", "utils.is_primary_worker", "logger.info", "logger.info", "utils.seed_rngs", "train.create_data_iters_and_vocabs", "logger.info", "train.create_model_config", "training.TrainerConfig", "train.create_optimizer_config", "model.SockeyeModel", "model.SockeyeModel.to", "model.SockeyeModel.apply", "train.unset_requires_grad_for_fixed_params", "utils.log_parameters", "optimizers.get_optimizer", "logger.info", "eval_iter.next().load", "eval_iter.reset", "utils.is_distributed", "train.create_losses", "training.EarlyStoppingTrainer", "utils.is_primary_worker", "training.EarlyStoppingTrainer.fit", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "tempfile.TemporaryDirectory", "utils.is_primary_worker", "os.path.join", "arguments.save_args", "torch.device", "torch.device", "torch.device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "logger.info", "logger.info", "utils.is_primary_worker", "vocab.save_source_vocabs", "vocab.save_target_vocabs", "len", "len", "utils.check_condition", "model.SockeyeModel.load_parameters", "apex.amp.initialize", "torch.jit.trace", "torch.jit.trace", "torch.jit.trace", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "train.create_checkpoint_decoder", "os.path.join", "utils.is_distributed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "train.use_shared_vocab", "dict", "eval_iter.next", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.no_context", "utils.get_local_rank", "str", "str", "model.SockeyeModel.named_parameters", "logger.error", "sys.exit", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.check_arg_compatibility", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.check_resume", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.setup_main_logger", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.log_basic_info", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.seed_rngs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.create_data_iters_and_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.create_model_config", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.create_optimizer_config", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.unset_requires_grad_for_fixed_params", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.log_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.optimizers.get_optimizer", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_distributed", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.create_losses", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer.fit", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.save_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.save_source_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.save_target_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.load_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.create_checkpoint_decoder", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_distributed", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.train.use_shared_vocab", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.no_context", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_local_rank"], ["", "@", "torch", ".", "distributed", ".", "elastic", ".", "multiprocessing", ".", "errors", ".", "record", "\n", "def", "train", "(", "args", ":", "argparse", ".", "Namespace", ",", "custom_metrics_logger", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "checkpoint_callback", ":", "Optional", "[", "Callable", "]", "=", "None", ")", "->", "training", ".", "TrainState", ":", "\n", "    ", "\"\"\"\n    :param custom_metrics_logger: Optional custom metrics logging function. If supplied, takes care of metrics produced\n                                  during training in a custom way. It should accept a list or a dictionary of\n                                  (metric name, metric value) pairs, and an optional global_step/checkpoint parameter.\n    :param checkpoint_callback: An optional callback function (int -> None). The function will be called\n                                each time a checkpoint has been reached\n    \"\"\"", "\n", "\n", "if", "args", ".", "dist", ":", "\n", "        ", "torch", ".", "distributed", ".", "init_process_group", "(", "torch", ".", "distributed", ".", "Backend", ".", "GLOO", "if", "args", ".", "use_cpu", "\n", "else", "torch", ".", "distributed", ".", "Backend", ".", "NCCL", ")", "\n", "\n", "", "if", "args", ".", "dry_run", ":", "\n", "# Modify arguments so that we write to a temporary directory and", "\n", "# perform 0 training iterations", "\n", "        ", "temp_dir", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", "# Will be automatically removed", "\n", "args", ".", "output", "=", "temp_dir", ".", "name", "\n", "args", ".", "max_updates", "=", "0", "\n", "\n", "", "check_arg_compatibility", "(", "args", ")", "\n", "output_folder", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "output", ")", "\n", "resume_training", "=", "check_resume", "(", "args", ",", "output_folder", ")", "\n", "\n", "# In distributed mode, multiple workers (instances of sockeye.train) are", "\n", "# launched via torchrun. Each worker has a unique rank. Worker 0 is the", "\n", "# primary worker that writes files and makes authoritative training", "\n", "# decisions (ex: whether a checkpoint improves). Workers 1+ are secondary", "\n", "# workers that run parallel training steps and send gradients to the primary", "\n", "# worker (but don't output anything other than log files).", "\n", "logfile", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "C", ".", "LOG_NAME", ")", "\n", "console_level", "=", "None", "\n", "if", "not", "utils", ".", "is_primary_worker", "(", ")", ":", "\n", "        ", "logfile", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "C", ".", "DIST_SECONDARY_WORKERS_LOGDIR", ",", "\n", "f'{torch.distributed.get_rank()}.{C.LOG_NAME}'", ")", "\n", "# If requested, suppress console output for secondary workers", "\n", "if", "args", ".", "quiet_secondary_workers", ":", "\n", "            ", "args", ".", "quiet", "=", "True", "\n", "", "console_level", "=", "args", ".", "loglevel_secondary_workers", "\n", "\n", "", "setup_main_logger", "(", "file_logging", "=", "not", "args", ".", "no_logfile", ",", "\n", "console", "=", "not", "args", ".", "quiet", ",", "\n", "path", "=", "logfile", ",", "\n", "level", "=", "args", ".", "loglevel", ",", "\n", "console_level", "=", "console_level", ")", "\n", "utils", ".", "log_basic_info", "(", "args", ")", "\n", "if", "utils", ".", "is_primary_worker", "(", ")", ":", "\n", "        ", "arguments", ".", "save_args", "(", "args", ",", "os", ".", "path", ".", "join", "(", "output_folder", ",", "C", ".", "ARGS_STATE_NAME", ")", ")", "\n", "\n", "", "max_seq_len_source", ",", "max_seq_len_target", "=", "args", ".", "max_seq_len", "\n", "# The maximum length given by the user is the length before we add the BOS/EOS symbols", "\n", "max_seq_len_source", "=", "max_seq_len_source", "+", "C", ".", "SPACE_FOR_XOS", "\n", "max_seq_len_target", "=", "max_seq_len_target", "+", "C", ".", "SPACE_FOR_XOS", "\n", "logger", ".", "info", "(", "\"Adjusting maximum length to reserve space for a BOS/EOS marker. New maximum length: (%d, %d)\"", ",", "\n", "max_seq_len_source", ",", "max_seq_len_target", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "if", "args", ".", "use_cpu", "else", "torch", ".", "device", "(", "'cuda'", ",", "utils", ".", "get_local_rank", "(", ")", ")", "if", "utils", ".", "is_distributed", "(", ")", "else", "torch", ".", "device", "(", "'cuda'", ",", "args", ".", "device_id", ")", "\n", "if", "not", "args", ".", "use_cpu", ":", "\n", "# Ensure that GPU operations use the correct device by default", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "\n", "", "logger", ".", "info", "(", "f'Training Device: {device}'", ")", "\n", "utils", ".", "seed_rngs", "(", "args", ".", "seed", ")", "\n", "\n", "train_iter", ",", "eval_iter", ",", "config_data", ",", "source_vocabs", ",", "target_vocabs", "=", "create_data_iters_and_vocabs", "(", "\n", "args", "=", "args", ",", "\n", "max_seq_len_source", "=", "max_seq_len_source", ",", "\n", "max_seq_len_target", "=", "max_seq_len_target", ",", "\n", "shared_vocab", "=", "use_shared_vocab", "(", "args", ")", ",", "\n", "resume_training", "=", "resume_training", ",", "\n", "output_folder", "=", "output_folder", ")", "\n", "\n", "if", "max_seq_len_source", "!=", "config_data", ".", "max_seq_len_source", ":", "\n", "        ", "logger", ".", "info", "(", "\"Maximum source length determined by prepared data. Using %d instead of %d\"", ",", "\n", "config_data", ".", "max_seq_len_source", ",", "max_seq_len_source", ")", "\n", "max_seq_len_source", "=", "config_data", ".", "max_seq_len_source", "\n", "", "if", "max_seq_len_target", "!=", "config_data", ".", "max_seq_len_target", ":", "\n", "        ", "logger", ".", "info", "(", "\"Maximum target length determined by prepared data. Using %d instead of %d\"", ",", "\n", "config_data", ".", "max_seq_len_target", ",", "max_seq_len_target", ")", "\n", "max_seq_len_target", "=", "config_data", ".", "max_seq_len_target", "\n", "\n", "# Dump the vocabularies if we're just starting up", "\n", "", "if", "utils", ".", "is_primary_worker", "(", ")", "and", "not", "resume_training", ":", "\n", "        ", "vocab", ".", "save_source_vocabs", "(", "source_vocabs", ",", "output_folder", ")", "\n", "vocab", ".", "save_target_vocabs", "(", "target_vocabs", ",", "output_folder", ")", "\n", "\n", "", "source_vocab_sizes", "=", "[", "len", "(", "v", ")", "for", "v", "in", "source_vocabs", "]", "\n", "target_vocab_sizes", "=", "[", "len", "(", "v", ")", "for", "v", "in", "target_vocabs", "]", "\n", "logger", ".", "info", "(", "'Vocabulary sizes: source=[%s] target=[%s]'", ",", "\n", "'|'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "source_vocab_sizes", "]", ")", ",", "\n", "'|'", ".", "join", "(", "[", "str", "(", "size", ")", "for", "size", "in", "target_vocab_sizes", "]", ")", ")", "\n", "\n", "model_config", "=", "create_model_config", "(", "args", "=", "args", ",", "\n", "source_vocab_sizes", "=", "source_vocab_sizes", ",", "\n", "target_vocab_sizes", "=", "target_vocab_sizes", ",", "\n", "max_seq_len_source", "=", "max_seq_len_source", ",", "\n", "max_seq_len_target", "=", "max_seq_len_target", ",", "\n", "config_data", "=", "config_data", ")", "\n", "\n", "# Handle options that override training settings", "\n", "trainer_config", "=", "training", ".", "TrainerConfig", "(", "output_dir", "=", "args", ".", "output", ",", "\n", "early_stopping_metric", "=", "args", ".", "optimized_metric", ",", "\n", "max_params_files_to_keep", "=", "args", ".", "keep_last_params", ",", "\n", "keep_initializations", "=", "args", ".", "keep_initializations", ",", "\n", "max_params_files_to_cache", "=", "args", ".", "cache_last_best_params", ",", "\n", "cache_strategy", "=", "args", ".", "cache_strategy", ",", "\n", "cache_metric", "=", "args", ".", "cache_metric", ",", "\n", "checkpoint_interval", "=", "args", ".", "checkpoint_interval", ",", "\n", "max_num_checkpoint_not_improved", "=", "args", ".", "max_num_checkpoint_not_improved", ",", "\n", "checkpoint_improvement_threshold", "=", "args", ".", "checkpoint_improvement_threshold", ",", "\n", "max_checkpoints", "=", "args", ".", "max_checkpoints", ",", "\n", "min_samples", "=", "args", ".", "min_samples", ",", "\n", "max_samples", "=", "args", ".", "max_samples", ",", "\n", "min_updates", "=", "args", ".", "min_updates", ",", "\n", "max_updates", "=", "args", ".", "max_updates", ",", "\n", "min_epochs", "=", "args", ".", "min_num_epochs", ",", "\n", "max_epochs", "=", "args", ".", "max_num_epochs", ",", "\n", "max_seconds", "=", "args", ".", "max_seconds", ",", "\n", "update_interval", "=", "args", ".", "update_interval", ",", "\n", "stop_training_on_decoder_failure", "=", "args", ".", "stop_training_on_decoder_failure", ",", "\n", "no_reload_on_learning_rate_reduce", "=", "args", ".", "no_reload_on_learning_rate_reduce", ")", "\n", "if", "trainer_config", ".", "min_epochs", "is", "not", "None", "and", "trainer_config", ".", "max_epochs", "is", "not", "None", ":", "\n", "        ", "check_condition", "(", "trainer_config", ".", "min_epochs", "<=", "trainer_config", ".", "max_epochs", ",", "\n", "\"Minimum number of epochs must be smaller than maximum number of epochs\"", ")", "\n", "\n", "", "optimizer_config", "=", "create_optimizer_config", "(", "args", ")", "\n", "\n", "sockeye_model", "=", "model", ".", "SockeyeModel", "(", "\n", "model_config", ",", "\n", "train_decoder_only", "=", "args", ".", "fixed_param_strategy", "==", "C", ".", "FIXED_PARAM_STRATEGY_ALL_EXCEPT_DECODER", ")", "\n", "sockeye_model", ".", "to", "(", "device", ")", "\n", "sockeye_model", ".", "apply", "(", "model", ".", "initialize_parameters", ")", "\n", "\n", "# Load starting parameters if specified", "\n", "if", "args", ".", "params", "is", "not", "None", ":", "\n", "        ", "sockeye_model", ".", "load_parameters", "(", "filename", "=", "args", ".", "params", ",", "\n", "device", "=", "device", ",", "\n", "allow_missing", "=", "args", ".", "allow_missing_params", "or", "model_config", ".", "lhuc", ",", "\n", "ignore_extra", "=", "args", ".", "ignore_extra_params", ")", "\n", "\n", "", "unset_requires_grad_for_fixed_params", "(", "config", "=", "model_config", ",", "\n", "params", "=", "dict", "(", "sockeye_model", ".", "named_parameters", "(", ")", ")", ",", "\n", "fixed_param_names", "=", "args", ".", "fixed_param_names", ",", "\n", "fixed_param_strategy", "=", "args", ".", "fixed_param_strategy", ")", "\n", "\n", "utils", ".", "log_parameters", "(", "sockeye_model", ")", "\n", "\n", "optimizer", ",", "zero_grad_kwargs", "=", "optimizers", ".", "get_optimizer", "(", "sockeye_model", ",", "optimizer_config", ")", "\n", "\n", "# This starts as a reference to the original Sockeye model. It is", "\n", "# sequentially transformed/wrapped to produce the model instance used for", "\n", "# training.", "\n", "training_model", "=", "sockeye_model", "# type: torch.nn.Module", "\n", "\n", "if", "args", ".", "apex_amp", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "apex", ".", "amp", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "error", "(", "'Cannot import NVIDIA Apex AMP. Please install Apex: https://github.com/NVIDIA/apex'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "# Optimization level 2 runs the entire model in FP16 mode with FP32", "\n", "# master weights and loss scaling. See:", "\n", "# https://nvidia.github.io/apex/amp.html#o2-almost-fp16-mixed-precision", "\n", "", "training_model", ",", "optimizer", "=", "apex", ".", "amp", ".", "initialize", "(", "training_model", ",", "optimizer", ",", "opt_level", "=", "'O2'", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Tracing model on a validation batch'", ")", "\n", "batch", "=", "eval_iter", ".", "next", "(", ")", ".", "load", "(", "device", "=", "device", ")", "# pylint: disable=not-callable", "\n", "# When using AMP, turn on autocasting when tracing the model so that", "\n", "# dtypes will match during AMP training. Disable the weight cache for", "\n", "# compatibility with tracing. See:", "\n", "# https://github.com/pytorch/pytorch/pull/63552", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "cache_enabled", "=", "False", ")", "if", "args", ".", "amp", "else", "utils", ".", "no_context", "(", ")", ":", "# type: ignore", "\n", "        ", "training_model", "=", "torch", ".", "jit", ".", "trace", "(", "training_model", ",", "(", "batch", ".", "source", ",", "batch", ".", "source_length", ",", "\n", "batch", ".", "target", ",", "batch", ".", "target_length", ")", ",", "strict", "=", "False", ")", "\n", "", "eval_iter", ".", "reset", "(", ")", "\n", "\n", "if", "utils", ".", "is_distributed", "(", ")", ":", "\n", "# In distributed mode, wrap the traced model with a distributed", "\n", "# data-parallel model that shares (averages) gradients with models", "\n", "# in other worker processes.", "\n", "        ", "training_model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "training_model", ",", "\n", "device_ids", "=", "None", "if", "args", ".", "use_cpu", "else", "[", "device", "]", ",", "\n", "output_device", "=", "None", "if", "args", ".", "use_cpu", "else", "device", ")", "\n", "\n", "", "losses", "=", "create_losses", "(", "args", ",", "all_num_classes", "=", "target_vocab_sizes", ")", "\n", "\n", "trainer", "=", "training", ".", "EarlyStoppingTrainer", "(", "\n", "config", "=", "trainer_config", ",", "\n", "optimizer_config", "=", "optimizer_config", ",", "\n", "sockeye_model", "=", "sockeye_model", ",", "\n", "training_model", "=", "training_model", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "zero_grad_kwargs", "=", "zero_grad_kwargs", ",", "\n", "loss_functions", "=", "losses", ",", "\n", "device", "=", "device", ",", "\n", "using_amp", "=", "args", ".", "amp", ",", "\n", "using_apex_amp", "=", "args", ".", "apex_amp", ",", "\n", "custom_metrics_logger", "=", "custom_metrics_logger", ",", "\n", "checkpoint_callback", "=", "checkpoint_callback", ")", "\n", "\n", "# Only primary worker runs checkpoint decoder", "\n", "checkpoint_decoder", "=", "None", "\n", "if", "utils", ".", "is_primary_worker", "(", ")", ":", "\n", "        ", "checkpoint_decoder", "=", "create_checkpoint_decoder", "(", "args", ",", "device", ",", "sockeye_model", ",", "source_vocabs", ",", "target_vocabs", ")", "\n", "\n", "", "training_state", "=", "trainer", ".", "fit", "(", "train_iter", "=", "train_iter", ",", "validation_iter", "=", "eval_iter", ",", "\n", "checkpoint_decoder", "=", "checkpoint_decoder", ")", "\n", "\n", "return", "training_state", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.Decoder.register": [[49, 64], ["transformer.TransformerConfig"], "methods", ["None"], ["@", "classmethod", "\n", "def", "register", "(", "cls", ",", "config_type", ":", "Type", "[", "DecoderConfig", "]", ")", ":", "\n", "        ", "\"\"\"\n        Registers decoder type for configuration. Suffix is appended to decoder prefix.\n\n        :param config_type: Configuration type for decoder.\n\n        :return: Class decorator.\n        \"\"\"", "\n", "\n", "def", "wrapper", "(", "target_cls", ")", ":", "\n", "            ", "cls", ".", "__registry", "[", "config_type", "]", "=", "target_cls", "\n", "return", "target_cls", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.Decoder.get_decoder": [[65, 80], ["type", "decoder_cls", "ValueError"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_decoder", "(", "cls", ",", "config", ":", "DecoderConfig", ",", "inference_only", ":", "bool", ")", "->", "'Decoder'", ":", "\n", "        ", "\"\"\"\n        Creates decoder based on config type.\n\n        :param config: Decoder config.\n        :param inference_only: Create a decoder that is only used for inference.\n\n        :return: Decoder instance.\n        \"\"\"", "\n", "config_type", "=", "type", "(", "config", ")", "\n", "if", "config_type", "not", "in", "cls", ".", "__registry", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported decoder configuration %s'", "%", "config_type", ".", "__name__", ")", "\n", "", "decoder_cls", "=", "cls", ".", "__registry", "[", "config_type", "]", "\n", "return", "decoder_cls", "(", "config", "=", "config", ",", "inference_only", "=", "inference_only", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.Decoder.__init__": [[81, 84], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["", "@", "abstractmethod", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.Decoder.state_structure": [[85, 88], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "state_structure", "(", "self", ")", "->", "str", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.Decoder.init_state_from_encoder": [[89, 95], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "init_state_from_encoder", "(", "self", ",", "\n", "encoder_outputs", ":", "pt", ".", "Tensor", ",", "\n", "encoder_valid_length", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "\n", "target_embed", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "List", "[", "pt", ".", "Tensor", "]", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.Decoder.decode_seq": [[96, 107], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "decode_seq", "(", "self", ",", "inputs", ":", "pt", ".", "Tensor", ",", "states", ":", "List", "[", "pt", ".", "Tensor", "]", ")", "->", "pt", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Decodes a sequence of embedded target words and returns sequence of last decoder\n        representations for each time step.\n\n        :param inputs: Encoded source: (batch_size, source_encoded_max_length, encoder_depth).\n        :param states: List of initial states, as given by init_state_from_encoder().\n        :return: Decoder output. Shape: (batch_size, target_embed_max_length, decoder_depth).\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.Decoder.get_num_hidden": [[108, 111], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_num_hidden", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.TransformerDecoder.__init__": [[128, 149], ["decoder.Decoder.__init__", "torch.nn.Module.__init__", "layers.PositionalEmbeddings", "transformer.AutoRegressiveMask", "torch.nn.ModuleList", "transformer.TransformerProcessBlock", "torch.nn.Dropout", "transformer.TransformerDecoderBlock", "range"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "config", ":", "TransformerConfig", ",", "inference_only", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "Decoder", ".", "__init__", "(", "self", ")", "\n", "pt", ".", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "inference_only", "=", "inference_only", "\n", "self", ".", "pos_embedding", "=", "layers", ".", "PositionalEmbeddings", "(", "weight_type", "=", "self", ".", "config", ".", "positional_embedding_type", ",", "\n", "num_embed", "=", "self", ".", "config", ".", "model_size", ",", "\n", "max_seq_len", "=", "self", ".", "config", ".", "max_seq_len_target", ",", "\n", "scale_up_input", "=", "True", ",", "\n", "scale_down_positions", "=", "False", ")", "\n", "self", ".", "autoregressive_mask", "=", "transformer", ".", "AutoRegressiveMask", "(", ")", "\n", "\n", "self", ".", "layers", "=", "pt", ".", "nn", ".", "ModuleList", "(", "# using ModuleList because we have additional inputs", "\n", "transformer", ".", "TransformerDecoderBlock", "(", "config", ",", "inference_only", "=", "self", ".", "inference_only", ")", "\n", "for", "_", "in", "range", "(", "config", ".", "num_layers", ")", ")", "\n", "\n", "self", ".", "final_process", "=", "transformer", ".", "TransformerProcessBlock", "(", "sequence", "=", "config", ".", "preprocess_sequence", ",", "\n", "dropout", "=", "config", ".", "dropout_prepost", ",", "\n", "num_hidden", "=", "self", ".", "config", ".", "model_size", ")", "\n", "if", "self", ".", "config", ".", "dropout_prepost", ">", "0.0", ":", "\n", "            ", "self", ".", "dropout", "=", "pt", ".", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "config", ".", "dropout_prepost", ",", "inplace", "=", "inference_only", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.TransformerDecoder.state_structure": [[150, 165], ["sum"], "methods", ["None"], ["", "", "def", "state_structure", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Returns the structure of states used for manipulation of the states.\n        Each state is either labeled 's' for step, 'b' for source_mask, 'd' for decoder, or 'e' for encoder.\n        \"\"\"", "\n", "structure", "=", "''", "\n", "if", "self", ".", "inference_only", ":", "\n", "            ", "structure", "+=", "C", ".", "STEP_STATE", "+", "C", ".", "MASK_STATE", "+", "C", ".", "ENCODER_STATE", "*", "self", ".", "config", ".", "num_layers", "\n", "", "else", ":", "\n", "            ", "structure", "+=", "C", ".", "STEP_STATE", "+", "C", ".", "ENCODER_STATE", "+", "C", ".", "MASK_STATE", "\n", "\n", "", "total_num_states", "=", "sum", "(", "layer", ".", "num_state_tensors", "for", "layer", "in", "self", ".", "layers", ")", "\n", "structure", "+=", "C", ".", "DECODER_STATE", "*", "total_num_states", "\n", "\n", "return", "structure", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.TransformerDecoder.init_state_from_encoder": [[166, 222], ["encoder_outputs.size", "torch.zeros_like().unsqueeze", "layers.prepare_source_length_mask", "source_mask.view.view.view", "torch.arange().unsqueeze", "layers.prepare_source_length_mask", "source_mask.view.view.expand", "source_mask.view.view.view", "encoder_outputs.transpose", "encoder_outputs.size", "torch.zeros", "target_embed.size", "layer.enc_attention.ff_kv", "states.append", "encoder_outputs.transpose", "layer.get_states_shape", "range", "torch.zeros_like", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.prepare_source_length_mask", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.prepare_source_length_mask", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.transformer.TransformerDecoderBlock.get_states_shape"], ["", "def", "init_state_from_encoder", "(", "self", ",", "\n", "encoder_outputs", ":", "pt", ".", "Tensor", ",", "\n", "encoder_valid_length", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "\n", "target_embed", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "List", "[", "pt", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Returns the initial states given encoder output. States for teacher-forced training are encoder outputs\n        and a valid length mask for encoder outputs.\n        At inference, this method returns the following state tuple:\n        valid length bias, step state,\n        [projected encoder attention keys, projected encoder attention values] * num_layers,\n        [autoregressive state dummies] * num_layers.\n\n        :param encoder_outputs: Encoder outputs. Shape: (batch, source_length, encoder_dim).\n        :param encoder_valid_length: Valid lengths of encoder outputs. Shape: (batch,).\n        :param target_embed: Target-side embedding layer output. Shape: (batch, target_length, target_embedding_dim).\n        :return: Initial states.\n        \"\"\"", "\n", "source_max_len", "=", "encoder_outputs", ".", "size", "(", ")", "[", "1", "]", "\n", "if", "target_embed", "is", "None", ":", "# Inference: initial step = 0. Shape: (batch_size, 1)", "\n", "            ", "steps", "=", "pt", ".", "zeros_like", "(", "encoder_valid_length", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# (batch * heads, 1, source_max_len)", "\n", "source_mask", "=", "layers", ".", "prepare_source_length_mask", "(", "encoder_valid_length", ",", "self", ".", "config", ".", "attention_heads", ",", "\n", "source_max_len", ")", "\n", "# Shape: (batch, heads, 1, src_max_len)", "\n", "source_mask", "=", "source_mask", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "attention_heads", ",", "1", ",", "source_max_len", ")", "\n", "", "else", ":", "# Training: steps up to target length. Shape: (1, target_length)", "\n", "            ", "target_length", "=", "target_embed", ".", "size", "(", ")", "[", "1", "]", "\n", "steps", "=", "pt", ".", "arange", "(", "0", ",", "target_length", ",", "device", "=", "target_embed", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "# (batch * heads, 1, source_max_len)", "\n", "source_mask", "=", "layers", ".", "prepare_source_length_mask", "(", "encoder_valid_length", ",", "self", ".", "config", ".", "attention_heads", ",", "\n", "source_max_len", ")", "\n", "source_mask", "=", "source_mask", ".", "expand", "(", "-", "1", ",", "target_length", ",", "-", "1", ")", "# Shape: (batch * heads, trg_max_len, src_max_len)", "\n", "\n", "# Shape: (batch, heads, trg_max_len, src_max_len)", "\n", "source_mask", "=", "source_mask", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "attention_heads", ",", "target_length", ",", "source_max_len", ")", "\n", "\n", "", "if", "self", ".", "inference_only", ":", "\n", "# Encoder projection caching, therefore we don't pass the encoder_outputs", "\n", "            ", "states", "=", "[", "steps", ",", "source_mask", "]", "\n", "encoder_outputs_t", "=", "encoder_outputs", ".", "transpose", "(", "1", ",", "0", ")", "# time-major layout", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "                ", "enc_att_kv", "=", "layer", ".", "enc_attention", ".", "ff_kv", "(", "encoder_outputs_t", ")", "\n", "states", ".", "append", "(", "enc_att_kv", ")", "\n", "", "", "else", ":", "\n", "# NO encoder projection caching", "\n", "            ", "states", "=", "[", "steps", ",", "encoder_outputs", ".", "transpose", "(", "1", ",", "0", ")", ",", "source_mask", "]", "\n", "\n", "", "_batch_size", "=", "encoder_outputs", ".", "size", "(", ")", "[", "0", "]", "\n", "_device", "=", "encoder_outputs", ".", "device", "\n", "_dtype", "=", "encoder_outputs", ".", "dtype", "\n", "dummy_autoregr_states", "=", "[", "pt", ".", "zeros", "(", "layer", ".", "get_states_shape", "(", "_batch_size", ")", ",", "device", "=", "_device", ",", "dtype", "=", "_dtype", ")", "\n", "for", "layer", "in", "self", ".", "layers", "\n", "for", "_", "in", "range", "(", "layer", ".", "num_state_tensors", ")", "]", "\n", "\n", "states", "+=", "dummy_autoregr_states", "\n", "return", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.TransformerDecoder.decode_seq": [[223, 234], ["decoder.TransformerDecoder.forward"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.transformer.AutoRegressiveMask.forward"], ["", "def", "decode_seq", "(", "self", ",", "inputs", ":", "pt", ".", "Tensor", ",", "states", ":", "List", "[", "pt", ".", "Tensor", "]", ")", "->", "pt", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Decodes a sequence of embedded target words and returns sequence of last decoder\n        representations for each time step.\n\n        :param inputs: Encoded source: (batch_size, source_encoded_max_length, encoder_depth).\n        :param states: List of initial states, as given by init_state_from_encoder().\n        :return: Decoder output. Shape: (batch_size, target_embed_max_length, decoder_depth).\n        \"\"\"", "\n", "outputs", ",", "_", "=", "self", ".", "forward", "(", "inputs", ",", "states", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.TransformerDecoder.forward": [[235, 289], ["any", "source_mask.size", "source_mask.view", "decoder.TransformerDecoder.pos_embedding", "decoder.TransformerDecoder.transpose", "zip", "decoder.TransformerDecoder.final_process", "decoder.TransformerDecoder.transpose", "any", "iter", "decoder.TransformerDecoder.dropout", "layer", "decoder.TransformerDecoder.autoregressive_mask", "list", "range", "itertools.islice"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "step_input", ":", "pt", ".", "Tensor", ",", "states", ":", "List", "[", "pt", ".", "Tensor", "]", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "List", "[", "pt", ".", "Tensor", "]", "]", ":", "\n", "        ", "target_mask", "=", "None", "\n", "if", "self", ".", "inference_only", ":", "\n", "            ", "steps", ",", "source_mask", ",", "*", "other", "=", "states", "\n", "source_encoded", "=", "None", "# use constant pre-computed key value projections from the states", "\n", "enc_att_kv", "=", "other", "[", ":", "self", ".", "config", ".", "num_layers", "]", "\n", "autoregr_states", "=", "other", "[", "self", ".", "config", ".", "num_layers", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "any", "(", "layer", ".", "needs_mask", "for", "layer", "in", "self", ".", "layers", ")", ":", "\n", "                ", "target_mask", "=", "self", ".", "autoregressive_mask", "(", "step_input", ")", "# mask: (length, length)", "\n", "", "steps", ",", "source_encoded", ",", "source_mask", ",", "*", "autoregr_states", "=", "states", "\n", "enc_att_kv", "=", "[", "None", "for", "_", "in", "range", "(", "self", ".", "config", ".", "num_layers", ")", "]", "\n", "\n", "", "if", "any", "(", "layer", ".", "num_state_tensors", ">", "1", "for", "layer", "in", "self", ".", "layers", ")", ":", "\n", "# separates autoregressive states by layer", "\n", "            ", "states_iter", "=", "iter", "(", "autoregr_states", ")", "\n", "autoregr_states", "=", "[", "list", "(", "islice", "(", "states_iter", ",", "0", ",", "layer", ".", "num_state_tensors", ")", ")", "for", "layer", "in", "self", ".", "layers", "]", "# type: ignore", "\n", "\n", "", "batch", ",", "heads", ",", "target_max_len", ",", "source_max_len", "=", "source_mask", ".", "size", "(", ")", "\n", "source_mask_view", "=", "source_mask", ".", "view", "(", "batch", "*", "heads", ",", "target_max_len", ",", "source_max_len", ")", "\n", "\n", "# target: (batch_size, length, model_size)", "\n", "target", "=", "self", ".", "pos_embedding", "(", "step_input", ",", "steps", ")", "\n", "# (length, batch_size, model_size)", "\n", "target", "=", "target", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "if", "self", ".", "config", ".", "dropout_prepost", ">", "0.0", ":", "\n", "            ", "target", "=", "self", ".", "dropout", "(", "target", ")", "\n", "\n", "", "new_autoregr_states", "=", "[", "]", "# type: List[pt.Tensor]", "\n", "for", "layer", ",", "layer_autoregr_state", ",", "layer_enc_att_kv", "in", "zip", "(", "self", ".", "layers", ",", "autoregr_states", ",", "enc_att_kv", ")", ":", "\n", "            ", "target", ",", "new_layer_autoregr_state", "=", "layer", "(", "target", "=", "target", ",", "\n", "target_mask", "=", "target_mask", ",", "\n", "source", "=", "source_encoded", ",", "\n", "source_mask", "=", "source_mask_view", ",", "\n", "autoregr_states", "=", "layer_autoregr_state", ",", "\n", "enc_att_kv", "=", "layer_enc_att_kv", ")", "\n", "\n", "new_autoregr_states", "+=", "[", "*", "new_layer_autoregr_state", "]", "\n", "\n", "", "target", "=", "self", ".", "final_process", "(", "target", ")", "\n", "target", "=", "target", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "# Inference: increment steps by 1 (discarded in training)", "\n", "steps", "=", "steps", "+", "1", "\n", "\n", "if", "self", ".", "inference_only", ":", "\n", "# pass in cached encoder states", "\n", "            ", "encoder_attention_keys_values", "=", "states", "[", "2", ":", "2", "+", "self", ".", "config", ".", "num_layers", "]", "\n", "new_states", "=", "[", "steps", ",", "states", "[", "1", "]", "]", "+", "encoder_attention_keys_values", "+", "new_autoregr_states", "\n", "", "else", ":", "\n", "            ", "new_states", "=", "[", "steps", ",", "states", "[", "1", "]", ",", "states", "[", "2", "]", "]", "+", "new_autoregr_states", "\n", "\n", "", "return", "target", ",", "new_states", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.TransformerDecoder.get_num_hidden": [[290, 292], ["None"], "methods", ["None"], ["", "def", "get_num_hidden", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "config", ".", "model_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.get_decoder": [[33, 35], ["Decoder.get_decoder"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.get_decoder"], ["def", "get_decoder", "(", "config", ":", "DecoderConfig", ",", "inference_only", ":", "bool", "=", "False", ")", "->", "'Decoder'", ":", "\n", "    ", "return", "Decoder", ".", "get_decoder", "(", "config", ",", "inference_only", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.LHUC.__init__": [[46, 49], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "num_hidden", ":", "int", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "pt", ".", "nn", ".", "Parameter", "(", "pt", ".", "Tensor", "(", "num_hidden", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.LHUC.forward": [[50, 56], ["torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ":", "pt", ".", "Tensor", ")", "->", "pt", ".", "Tensor", ":", "\n", "# We use a sigmoid with amplitude 2 for weighting the hidden units. The", "\n", "# activation is dampened when the value of the sigmoid is close to 0, and", "\n", "# strengthened when it's close to 2 (see also original paper)", "\n", "        ", "weight", "=", "2", "*", "pt", ".", "sigmoid", "(", "self", ".", "weight", ")", "\n", "return", "weight", "*", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.OutputLayer.__init__": [[68, 86], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "\n", "hidden_size", ":", "int", ",", "\n", "vocab_size", ":", "int", ",", "\n", "weight", ":", "Optional", "[", "pt", ".", "nn", ".", "Parameter", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "in_features", "=", "hidden_size", "\n", "self", ".", "out_features", "=", "vocab_size", "\n", "\n", "if", "weight", "is", "None", ":", "\n", "            ", "self", ".", "weight", "=", "pt", ".", "nn", ".", "Parameter", "(", "pt", ".", "Tensor", "(", "vocab_size", ",", "hidden_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight", "=", "weight", "\n", "", "self", ".", "bias", "=", "pt", ".", "nn", ".", "Parameter", "(", "pt", ".", "Tensor", "(", "vocab_size", ")", ")", "\n", "\n", "self", ".", "previous_slice_ids", "=", "pt", ".", "empty", "(", "0", ")", "\n", "self", ".", "reduced_weight", "=", "pt", ".", "empty", "(", "0", ")", "\n", "self", ".", "reduced_bias", "=", "pt", ".", "empty", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.OutputLayer.extra_repr": [[87, 90], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "'in_features={}, out_features={}, bias={} dtype={}'", ".", "format", "(", "\n", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "self", ".", "bias", "is", "not", "None", ",", "self", ".", "weight", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.OutputLayer._is_new_slice": [[91, 95], ["torch.any", "torch.any", "x.size", "layers.OutputLayer.previous_slice_ids.size"], "methods", ["None"], ["", "def", "_is_new_slice", "(", "self", ",", "x", ":", "pt", ".", "Tensor", ")", "->", "bool", ":", "\n", "        ", "if", "x", ".", "size", "(", ")", "!=", "self", ".", "previous_slice_ids", ".", "size", "(", ")", "or", "pt", ".", "any", "(", "x", "!=", "self", ".", "previous_slice_ids", ")", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.OutputLayer._take_slice": [[96, 100], ["None"], "methods", ["None"], ["", "def", "_take_slice", "(", "self", ",", "vocab_slice_ids", ":", "pt", ".", "Tensor", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "pt", ".", "Tensor", "]", ":", "\n", "        ", "weight", "=", "self", ".", "weight", "[", "vocab_slice_ids", "]", "# Shape: (len(vocab_slice_ids), hidden)", "\n", "bias", "=", "self", ".", "bias", "[", "vocab_slice_ids", "]", "\n", "return", "weight", ",", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.OutputLayer.forward": [[101, 116], ["torch.linear", "torch.linear", "layers.OutputLayer._is_new_slice", "layers.OutputLayer._take_slice"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.OutputLayer._is_new_slice", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.OutputLayer._take_slice"], ["", "def", "forward", "(", "self", ",", "data", ":", "pt", ".", "Tensor", ",", "vocab_slice_ids", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "pt", ".", "Tensor", ":", "\n", "        ", "if", "vocab_slice_ids", "is", "not", "None", ":", "\n", "# Imperative, reduced matrix multiplication for vocabulary selection.", "\n", "# vocab_slice_ids is constant across decoder step calls, so we cache the result of _take_slice", "\n", "# across decoder steps. If a new vocab_slice_ids tensor is observed, we re-run _take_slice.", "\n", "# This significantly reduces latency for CPU decoding.", "\n", "            ", "if", "self", ".", "_is_new_slice", "(", "vocab_slice_ids", ")", ":", "\n", "                ", "self", ".", "previous_slice_ids", "=", "vocab_slice_ids", "\n", "weight", ",", "bias", "=", "self", ".", "reduced_weight", ",", "self", ".", "reduced_bias", "=", "self", ".", "_take_slice", "(", "vocab_slice_ids", ")", "\n", "", "else", ":", "\n", "                ", "weight", ",", "bias", "=", "self", ".", "reduced_weight", ",", "self", ".", "reduced_bias", "\n", "", "", "else", ":", "\n", "            ", "weight", ",", "bias", "=", "self", ".", "weight", ",", "self", ".", "bias", "\n", "\n", "", "return", "F", ".", "linear", "(", "data", ",", "weight", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.LengthRatio.__init__": [[132, 147], ["sockeye.utils.check_condition", "super().__init__", "range", "modules.append", "modules.append", "torch.nn.Sequential", "torch.nn.Sequential", "modules.append", "modules.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "\n", "hidden_size", ":", "int", ",", "\n", "num_layers", ":", "int", ")", "->", "None", ":", "\n", "        ", "utils", ".", "check_condition", "(", "num_layers", ">=", "1", ",", "\"LengthRatio's num_layers has to be >=1.\"", ")", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "\n", "modules", "=", "[", "]", "# type: List[pt.nn.Module]", "\n", "for", "_", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "            ", "modules", ".", "append", "(", "pt", ".", "nn", ".", "Linear", "(", "in_features", "=", "hidden_size", ",", "out_features", "=", "hidden_size", ")", ")", "\n", "modules", ".", "append", "(", "pt", ".", "nn", ".", "Tanh", "(", ")", ")", "\n", "", "modules", ".", "append", "(", "pt", ".", "nn", ".", "Linear", "(", "in_features", "=", "hidden_size", ",", "out_features", "=", "1", ")", ")", "\n", "modules", ".", "append", "(", "pt", ".", "nn", ".", "Softplus", "(", ")", ")", "# SoftReLU activation to ensure positiveness of the predicted length ratio", "\n", "self", ".", "layers", "=", "pt", ".", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.LengthRatio.forward": [[148, 164], ["source_encoded.masked_fill", "layers.LengthRatio.layers().squeeze", "source_encoded.masked_fill.sum", "source_encoded_length.unsqueeze", "torch.arange", "torch.arange", "layers.LengthRatio.layers", "source_encoded.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "source_encoded", ":", "pt", ".", "Tensor", ",", "source_encoded_length", ":", "pt", ".", "Tensor", ")", "->", "pt", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Transformation to the length ratio. Returns a vector.\n\n        :param source_encoded: Encoder representation for n elements. Shape: (n, source_encoded_length, hidden_size).\n        :param source_encoded_length: A vector of encoded sequence lengths. Shape: (n,).\n        :return: Predictions of the ratio length(hypothesis)/length(reference). Shape(n, 1).\n        \"\"\"", "\n", "# True when outside length. Shape: (n, source_encoded_length, 1)", "\n", "mask", "=", "pt", ".", "arange", "(", "source_encoded", ".", "size", "(", ")", "[", "1", "]", ",", "device", "=", "source_encoded_length", ".", "device", ")", "[", "None", ",", ":", ",", "None", "]", ">=", "source_encoded_length", "[", ":", ",", "None", ",", "None", "]", "\n", "source_masked", "=", "source_encoded", ".", "masked_fill", "(", "mask", ",", "0.", ")", "\n", "\n", "# data: (n, hidden_size)", "\n", "data", "=", "source_masked", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "/", "source_encoded_length", ".", "unsqueeze", "(", "1", ")", "\n", "data", "=", "self", ".", "layers", "(", "data", ")", ".", "squeeze", "(", "1", ")", "# (n, 1)", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.DotAttentionCell.__init__": [[225, 229], ["super().__init__", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dropout", ":", "float", "=", "0.0", ",", "heads", ":", "int", "=", "1", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "pt", ".", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "if", "dropout", ">", "0.0", "else", "None", "\n", "self", ".", "heads", "=", "heads", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.DotAttentionCell.forward": [[230, 258], ["layers.interleaved_matmul_encdec_qk", "torch.softmax", "torch.softmax", "layers.interleaved_matmul_encdec_valatt", "logits.masked_fill.masked_fill.masked_fill", "layers.DotAttentionCell.dropout"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.interleaved_matmul_encdec_qk", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.interleaved_matmul_encdec_valatt"], ["", "def", "forward", "(", "self", ",", "\n", "queries", ":", "pt", ".", "Tensor", ",", "\n", "key_values", ":", "pt", ".", "Tensor", ",", "\n", "mask", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param queries: Query tensor of shape (query_length, batch_size, hidden)\n        :param key_values: Interleaved Key & value tensor of shape (key/value_length, batch_size, hidden * 2)\n        :param mask: Optional boolean tensor for attention masking of shape (batch * heads, <qlen>, <kvlen>).\n                     If this is cross-attention, <qlen> dimension can be 1 for broadcasting,\n                     i.e. (batch * heads, 1, kvlen). For self-attention on the decoder side an autoregressive mask\n                     should be provided of shape (1, len, len) or (len, len).\n                     Value of this mask is True for positions that should be masked out (padding positions),\n                     False for valid positions.\n        \"\"\"", "\n", "# (batch * heads, qlen, klen)", "\n", "logits", "=", "interleaved_matmul_encdec_qk", "(", "queries", ",", "key_values", ",", "heads", "=", "self", ".", "heads", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "logits", "=", "logits", ".", "masked_fill", "(", "mask", ",", "-", "C", ".", "LARGE_VALUES", "[", "logits", ".", "dtype", "]", ")", "\n", "\n", "", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "probs", "=", "self", ".", "dropout", "(", "probs", ")", "if", "self", ".", "dropout", "is", "not", "None", "else", "probs", "\n", "\n", "# key_values: (lk, n, dv * 2)", "\n", "# probs: (n*h, lq, lk)", "\n", "# result: (n, lq, dv)", "\n", "return", "interleaved_matmul_encdec_valatt", "(", "key_values", ",", "probs", ",", "heads", "=", "self", ".", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttentionBase.__init__": [[282, 297], ["super().__init__", "sockeye.utils.check_condition", "layers.DotAttentionCell", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["def", "__init__", "(", "self", ",", "\n", "depth_att", ":", "int", "=", "512", ",", "\n", "heads", ":", "int", "=", "8", ",", "\n", "depth_out", ":", "int", "=", "512", ",", "\n", "dropout", ":", "float", "=", "0.0", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "utils", ".", "check_condition", "(", "depth_att", "%", "heads", "==", "0", ",", "\n", "\"Number of heads (%d) must divide attention depth (%d)\"", "%", "(", "heads", ",", "depth_att", ")", ")", "\n", "self", ".", "depth", "=", "depth_att", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "depth_out", "=", "depth_out", "\n", "self", ".", "depth_per_head", "=", "self", ".", "depth", "//", "self", ".", "heads", "\n", "\n", "self", ".", "dot_att", "=", "DotAttentionCell", "(", "dropout", "=", "dropout", ",", "heads", "=", "heads", ")", "\n", "self", ".", "ff_out", "=", "pt", ".", "nn", ".", "Linear", "(", "in_features", "=", "depth_att", ",", "out_features", "=", "depth_out", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttentionBase._attend": [[298, 318], ["layers.MultiHeadAttentionBase.dot_att", "layers.MultiHeadAttentionBase.ff_out"], "methods", ["None"], ["", "def", "_attend", "(", "self", ",", "\n", "queries", ":", "pt", ".", "Tensor", ",", "\n", "key_values", ":", "pt", ".", "Tensor", ",", "\n", "mask", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "pt", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Returns context vectors of multi-head dot attention.\n\n        :param queries: Query tensor. Shape: (queries_length, batch_size, depth).\n        :param key_values: Keys/Values. Shape: (keys_values_length, batch_size, depth * 2).\n        :param mask: Optional boolean attention mask. See DotAttentionCell for shape requirements.\n        :return: Context vectors. Shape: (batch_size, query_max_length, output_depth).\n        \"\"\"", "\n", "\n", "# (query_max_length, batch, depth)", "\n", "contexts", "=", "self", ".", "dot_att", "(", "queries", "=", "queries", ",", "key_values", "=", "key_values", ",", "mask", "=", "mask", ")", "\n", "\n", "# (query_max_length, batch, output_depth)", "\n", "contexts", "=", "self", ".", "ff_out", "(", "contexts", ")", "\n", "\n", "return", "contexts", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.AutoregressiveLayer.num_state_tensors": [[321, 326], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "num_state_tensors", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\" Number of state tensors returned by the layer \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.AutoregressiveLayer.needs_mask": [[327, 332], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "needs_mask", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\" Whether the layer makes use of a mask tensor or not \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.AutoregressiveLayer.get_state_shape": [[333, 340], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_state_shape", "(", "self", ",", "batch_size", ")", "->", "Tuple", ":", "\n", "        ", "\"\"\"\n        :param batch_size: current batch size\n        :return: dimensions of each output state (assuming all of them have the same shape)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.AutoregressiveLayer.forward": [[341, 350], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "inputs", ":", "pt", ".", "Tensor", ",", "previous_states", ":", "pt", ".", "Tensor", ",", "*", "args", ")", "->", "Tuple", ":", "\n", "        ", "\"\"\"\n        :param inputs: layer input\n        :param previous_states: Previous states array or list of arrays\n        :param args: layer-specific arguments and/or arguments to be ignored\n        :return: layer output and new states\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadSelfAttention.__init__": [[363, 376], ["layers.MultiHeadAttentionBase.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "\n", "depth_att", ":", "int", "=", "512", ",", "\n", "heads", ":", "int", "=", "8", ",", "\n", "depth_out", ":", "int", "=", "512", ",", "\n", "dropout", ":", "float", "=", "0.0", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "depth_att", ",", "heads", ",", "depth_out", ",", "dropout", ")", "\n", "\n", "self", ".", "depth_att", "=", "depth_att", "\n", "self", ".", "ff_in", "=", "pt", ".", "nn", ".", "Linear", "(", "in_features", "=", "depth_att", ",", "out_features", "=", "depth_att", "*", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "_drop_p", "=", "dropout", "\n", "# indicates whether self.ff_in.weight of shape (depth_att * 3, depth_key_value) is in interleaved format or not.", "\n", "# Interleaved format is used for inference, non-interleaved format is used for fused MHA in training.", "\n", "self", ".", "kv_interleaved", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadSelfAttention.separate_kv": [[377, 388], ["torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "kv.view().split", "k.reshape.reshape.reshape", "v.reshape.reshape.reshape", "kv.view"], "methods", ["None"], ["", "def", "separate_kv", "(", "self", ")", ":", "\n", "        ", "\"\"\" write kv input projection parameters in non-interleaved format (compatible with F.multi_head_attention) \"\"\"", "\n", "assert", "self", ".", "kv_interleaved", "\n", "with", "pt", ".", "no_grad", "(", ")", ":", "\n", "            ", "kv", "=", "self", ".", "ff_in", ".", "weight", ".", "data", "[", "self", ".", "depth", ":", ",", ":", "]", "\n", "k", ",", "v", "=", "kv", ".", "view", "(", "self", ".", "heads", ",", "2", "*", "self", ".", "depth_per_head", ",", "self", ".", "depth", ")", ".", "split", "(", "\n", "self", ".", "depth_per_head", ",", "dim", "=", "1", ")", "\n", "k", "=", "k", ".", "reshape", "(", "self", ".", "depth", ",", "self", ".", "depth", ")", "\n", "v", "=", "v", ".", "reshape", "(", "self", ".", "depth", ",", "self", ".", "depth", ")", "\n", "", "self", ".", "ff_in", ".", "weight", ".", "data", "[", "self", ".", "depth", ":", ",", ":", "]", "=", "pt", ".", "cat", "(", "(", "k", ",", "v", ")", ",", "dim", "=", "0", ")", "\n", "self", ".", "kv_interleaved", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadSelfAttention.interleave_kv": [[389, 398], ["torch.cat().reshape", "torch.cat().reshape", "torch.no_grad", "torch.no_grad", "layers.MultiHeadSelfAttention.ff_in.weight.data.split", "k.reshape.reshape.reshape", "v.reshape.reshape.reshape", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "interleave_kv", "(", "self", ")", ":", "\n", "        ", "\"\"\" write kv input projection parameters in interleaved format (compatible with interleaved matmul) \"\"\"", "\n", "assert", "not", "self", ".", "kv_interleaved", "\n", "with", "pt", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "k", ",", "v", "=", "self", ".", "ff_in", ".", "weight", ".", "data", ".", "split", "(", "self", ".", "depth", ",", "dim", "=", "0", ")", "\n", "k", "=", "k", ".", "reshape", "(", "self", ".", "heads", ",", "-", "1", ",", "self", ".", "depth", ")", "\n", "v", "=", "v", ".", "reshape", "(", "self", ".", "heads", ",", "-", "1", ",", "self", ".", "depth", ")", "\n", "", "self", ".", "ff_in", ".", "weight", ".", "data", "[", "self", ".", "depth", ":", ",", ":", "]", "=", "pt", ".", "cat", "(", "(", "k", ",", "v", ")", ",", "dim", "=", "1", ")", ".", "reshape", "(", "self", ".", "depth", "*", "2", ",", "self", ".", "depth", ")", "\n", "self", ".", "kv_interleaved", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadSelfAttention.train": [[399, 411], ["super().train", "layers.MultiHeadSelfAttention.separate_kv", "layers.MultiHeadSelfAttention.interleave_kv"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.train", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.separate_kv", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.interleave_kv"], ["", "def", "train", "(", "self", ",", "mode", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Overrides super().train() to ensure key-value parameters are stored in non-interleaved format during training\n        and interleaved format during inference (mod.eval()).\n        \"\"\"", "\n", "if", "mode", "and", "self", ".", "kv_interleaved", ":", "\n", "# training operates with non-interleaved format", "\n", "            ", "self", ".", "separate_kv", "(", ")", "\n", "", "elif", "not", "mode", "and", "not", "self", ".", "kv_interleaved", ":", "\n", "# eval/inference operates in interleaved format", "\n", "            ", "self", ".", "interleave_kv", "(", ")", "\n", "", "return", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadSelfAttention._load_from_state_dict": [[412, 415], ["super()._load_from_state_dict"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention._load_from_state_dict"], ["", "def", "_load_from_state_dict", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "kv_interleaved", "=", "True", "# see SockeyeModel.save_parameters(): models store kv weight in interleaved format", "\n", "super", "(", ")", ".", "_load_from_state_dict", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadSelfAttention.num_state_tensors": [[416, 420], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_state_tensors", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\" Number of state tensors returned by the layer \"\"\"", "\n", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadSelfAttention.needs_mask": [[421, 425], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "needs_mask", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\" Whether the layer makes use of a mask tensor or not \"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadSelfAttention.get_state_shape": [[426, 433], ["None"], "methods", ["None"], ["", "def", "get_state_shape", "(", "self", ",", "batch_size", ":", "int", ")", "->", "Tuple", ":", "\n", "        ", "\"\"\"\n        :param batch_size: current batch size\n        :return: dimensions of each output state (assuming all of them have the same shape)\n        \"\"\"", "\n", "# shape: (length, batch, key_depth + value_depth)", "\n", "return", "0", ",", "batch_size", ",", "self", ".", "depth_out", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadSelfAttention.forward": [[434, 475], ["torch.multi_head_attention_forward", "torch.multi_head_attention_forward", "layers.MultiHeadSelfAttention.ff_in", "layers.MultiHeadSelfAttention.split", "torch.cat", "torch.cat", "layers.MultiHeadSelfAttention._attend"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttentionBase._attend"], ["", "def", "forward", "(", "self", ",", "inputs", ":", "pt", ".", "Tensor", ",", "previous_states", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "mask", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "**", "args", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "pt", ".", "Tensor", "]", ":", "# type: ignore", "\n", "        ", "\"\"\"\n        Computes multi-head attention on a set of inputs, serving as queries, keys, and values.\n        If sequence lengths are provided, they will be used to mask the attention scores.\n        A bias mask may also be used to mask the attention scores.\n        May also use a cache of previously computed inputs.\n        Returns a tensor of shape (max_length, batch, output_depth).\n\n        :param inputs: Input Data. Shape: (length, batch, input_depth).\n        :param previous_states: Optional list with two tensors - previous input's keys and values.\n                                Shape: 2 * (batch, max_length+1, depth_att).\n        :param mask: Optional attention mask. See DotAttentionCell for shape information.\n        :return: tensor of shape (max_length, batch, output_depth).\n        \"\"\"", "\n", "if", "self", ".", "training", ":", "# use fused multi-head attention op during training", "\n", "            ", "assert", "not", "self", ".", "kv_interleaved", "\n", "contexts", ",", "_", "=", "F", ".", "multi_head_attention_forward", "(", "query", "=", "inputs", ",", "key", "=", "inputs", ",", "value", "=", "inputs", ",", "\n", "embed_dim_to_check", "=", "self", ".", "depth", ",", "num_heads", "=", "self", ".", "heads", ",", "\n", "in_proj_weight", "=", "self", ".", "ff_in", ".", "weight", ",", "\n", "in_proj_bias", "=", "None", ",", "\n", "bias_k", "=", "None", ",", "bias_v", "=", "None", ",", "add_zero_attn", "=", "False", ",", "\n", "dropout_p", "=", "self", ".", "_drop_p", ",", "\n", "out_proj_weight", "=", "self", ".", "ff_out", ".", "weight", ",", "\n", "out_proj_bias", "=", "self", ".", "ff_out", ".", "bias", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "key_padding_mask", "=", "None", ",", "\n", "need_weights", "=", "False", ",", "\n", "attn_mask", "=", "mask", ",", "\n", "use_separate_proj_weight", "=", "False", ",", "\n", "q_proj_weight", "=", "None", ",", "\n", "k_proj_weight", "=", "None", ",", "\n", "v_proj_weight", "=", "None", ")", "\n", "return", "contexts", ",", "contexts", "# dummy return", "\n", "", "else", ":", "# during inference multi-head attention with interleaved key-value parameters is used", "\n", "            ", "proj", "=", "self", ".", "ff_in", "(", "inputs", ")", "\n", "queries", ",", "states", "=", "proj", ".", "split", "(", "(", "self", ".", "depth_att", ",", "2", "*", "self", ".", "depth_att", ")", ",", "dim", "=", "2", ")", "\n", "\n", "if", "previous_states", "is", "not", "None", ":", "\n", "                ", "states", "=", "pt", ".", "cat", "(", "(", "previous_states", ",", "states", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "self", ".", "_attend", "(", "queries", "=", "queries", ",", "key_values", "=", "states", ",", "mask", "=", "mask", ")", ",", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.__init__": [[488, 502], ["layers.MultiHeadAttentionBase.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "\n", "depth_att", ":", "int", "=", "512", ",", "\n", "heads", ":", "int", "=", "8", ",", "\n", "depth_out", ":", "int", "=", "512", ",", "\n", "dropout", ":", "float", "=", "0.0", ",", "\n", "depth_key_value", ":", "int", "=", "512", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "depth_att", ",", "heads", ",", "depth_out", ",", "dropout", ")", "\n", "self", ".", "ff_q", "=", "pt", ".", "nn", ".", "Linear", "(", "in_features", "=", "depth_out", ",", "out_features", "=", "depth_att", ",", "bias", "=", "False", ")", "\n", "self", ".", "ff_kv", "=", "pt", ".", "nn", ".", "Linear", "(", "in_features", "=", "depth_key_value", ",", "out_features", "=", "depth_att", "*", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "_drop_p", "=", "dropout", "\n", "self", ".", "_depth_key_value", "=", "depth_key_value", "\n", "# indicates whether self.ff_kv.weight of shape (depth_att * 2, depth_key_value) is in interleaved format or not.", "\n", "# Interleaved format is used for inference, non-interleaved format is used for fused MHA in training.", "\n", "self", ".", "kv_interleaved", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.separate_kv": [[503, 513], ["torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "layers.MultiHeadAttention.ff_kv.weight.data.view().split", "k.reshape.reshape.reshape", "v.reshape.reshape.reshape", "layers.MultiHeadAttention.ff_kv.weight.data.view"], "methods", ["None"], ["", "def", "separate_kv", "(", "self", ")", ":", "\n", "        ", "\"\"\" Writes kv input projection parameters in non-interleaved format (compatible with F.multi_head_attention). \"\"\"", "\n", "assert", "self", ".", "kv_interleaved", "\n", "with", "pt", ".", "no_grad", "(", ")", ":", "\n", "            ", "k", ",", "v", "=", "self", ".", "ff_kv", ".", "weight", ".", "data", ".", "view", "(", "self", ".", "heads", ",", "2", "*", "self", ".", "depth_per_head", ",", "self", ".", "_depth_key_value", ")", ".", "split", "(", "\n", "self", ".", "depth_per_head", ",", "dim", "=", "1", ")", "\n", "k", "=", "k", ".", "reshape", "(", "self", ".", "depth", ",", "self", ".", "_depth_key_value", ")", "\n", "v", "=", "v", ".", "reshape", "(", "self", ".", "depth", ",", "self", ".", "_depth_key_value", ")", "\n", "", "self", ".", "ff_kv", ".", "weight", ".", "data", "[", ":", "]", "=", "pt", ".", "cat", "(", "(", "k", ",", "v", ")", ",", "dim", "=", "0", ")", "\n", "self", ".", "kv_interleaved", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.interleave_kv": [[514, 523], ["torch.cat().reshape", "torch.cat().reshape", "torch.no_grad", "torch.no_grad", "layers.MultiHeadAttention.ff_kv.weight.data.split", "k.reshape.reshape.reshape", "v.reshape.reshape.reshape", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "interleave_kv", "(", "self", ")", ":", "\n", "        ", "\"\"\" Writes kv input projection parameters in interleaved format (compatible with interleaved matmul). \"\"\"", "\n", "assert", "not", "self", ".", "kv_interleaved", "\n", "with", "pt", ".", "no_grad", "(", ")", ":", "\n", "            ", "k", ",", "v", "=", "self", ".", "ff_kv", ".", "weight", ".", "data", ".", "split", "(", "self", ".", "depth", ",", "dim", "=", "0", ")", "\n", "k", "=", "k", ".", "reshape", "(", "self", ".", "heads", ",", "-", "1", ",", "self", ".", "depth", ")", "\n", "v", "=", "v", ".", "reshape", "(", "self", ".", "heads", ",", "-", "1", ",", "self", ".", "depth", ")", "\n", "", "self", ".", "ff_kv", ".", "weight", ".", "data", "[", ":", "]", "=", "pt", ".", "cat", "(", "(", "k", ",", "v", ")", ",", "dim", "=", "1", ")", ".", "reshape", "(", "self", ".", "depth", "*", "2", ",", "self", ".", "_depth_key_value", ")", "\n", "self", ".", "kv_interleaved", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.train": [[524, 536], ["super().train", "layers.MultiHeadAttention.separate_kv", "layers.MultiHeadAttention.interleave_kv"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.train", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.separate_kv", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.interleave_kv"], ["", "def", "train", "(", "self", ",", "mode", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Overrides super().train() to ensure key-value parameters are stored in non-interleaved format during training\n        and interleaved format during inference (mod.eval()).\n        \"\"\"", "\n", "if", "mode", "and", "self", ".", "kv_interleaved", ":", "\n", "# training operates with non-interleaved format", "\n", "            ", "self", ".", "separate_kv", "(", ")", "\n", "", "elif", "not", "mode", "and", "not", "self", ".", "kv_interleaved", ":", "\n", "# eval/inference operates in interleaved format", "\n", "            ", "self", ".", "interleave_kv", "(", ")", "\n", "", "return", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention._load_from_state_dict": [[537, 540], ["super()._load_from_state_dict"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention._load_from_state_dict"], ["", "def", "_load_from_state_dict", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "kv_interleaved", "=", "True", "# see SockeyeModel.save_parameters(): models store kv weight in interleaved format", "\n", "super", "(", ")", ".", "_load_from_state_dict", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.forward": [[541, 582], ["torch.multi_head_attention_forward", "torch.multi_head_attention_forward", "layers.MultiHeadAttention.ff_q", "layers.MultiHeadAttention._attend", "layers.MultiHeadAttention.ff_kv"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttentionBase._attend"], ["", "def", "forward", "(", "self", ",", "\n", "queries", ":", "pt", ".", "Tensor", ",", "\n", "key_values", ":", "pt", ".", "Tensor", ",", "\n", "mask", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "\n", "projected_memory_kv", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "pt", ".", "Tensor", ":", "# mypy: ignore", "\n", "        ", "\"\"\"\n        Computes multi-head attention for queries given a memory tensor.\n        If sequence lengths are provided, they will be used to mask the attention scores.\n        A bias mask may also be used to mask the attention scores.\n        Returns an tensor of shape (max_length, batch, output_depth).\n\n        :param queries: Query tensor. Shape: (queries_length, batch, input_depth).\n        :param key_values: Memory data to attend to. Shape: (key_values_length, batch, input_depth).\n        :param mask: Optional attention mask. See DotAttentionCell for shape information.\n        :param projected_memory_kv: Optional previously projected memory keys and values.\n        :return: tensor of shape (query_seq_len, batch, output_depth).\n        \"\"\"", "\n", "if", "self", ".", "training", ":", "# use fused multi-head attention op during training", "\n", "            ", "assert", "not", "self", ".", "kv_interleaved", "\n", "assert", "projected_memory_kv", "is", "None", ",", "\"caching not supported in training\"", "\n", "contexts", ",", "_", "=", "F", ".", "multi_head_attention_forward", "(", "query", "=", "queries", ",", "key", "=", "key_values", ",", "value", "=", "key_values", ",", "\n", "embed_dim_to_check", "=", "self", ".", "depth", ",", "num_heads", "=", "self", ".", "heads", ",", "\n", "in_proj_weight", "=", "None", ",", "\n", "in_proj_bias", "=", "None", ",", "\n", "bias_k", "=", "None", ",", "bias_v", "=", "None", ",", "add_zero_attn", "=", "False", ",", "\n", "dropout_p", "=", "self", ".", "_drop_p", ",", "\n", "out_proj_weight", "=", "self", ".", "ff_out", ".", "weight", ",", "\n", "out_proj_bias", "=", "self", ".", "ff_out", ".", "bias", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "key_padding_mask", "=", "None", ",", "\n", "need_weights", "=", "False", ",", "\n", "attn_mask", "=", "mask", ",", "\n", "use_separate_proj_weight", "=", "True", ",", "\n", "q_proj_weight", "=", "self", ".", "ff_q", ".", "weight", ",", "\n", "k_proj_weight", "=", "self", ".", "ff_kv", ".", "weight", "[", ":", "self", ".", "depth", ",", ":", "]", ",", "\n", "v_proj_weight", "=", "self", ".", "ff_kv", ".", "weight", "[", "self", ".", "depth", ":", ",", ":", "]", ")", "\n", "return", "contexts", "\n", "", "else", ":", "# during inference multi-head attention with interleaved key-value parameters is used", "\n", "            ", "queries", "=", "self", ".", "ff_q", "(", "queries", ")", "\n", "key_values", "=", "projected_memory_kv", "if", "projected_memory_kv", "is", "not", "None", "else", "self", ".", "ff_kv", "(", "key_values", ")", "\n", "return", "self", ".", "_attend", "(", "queries", "=", "queries", ",", "key_values", "=", "key_values", ",", "mask", "=", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.PositionalEmbeddings.__init__": [[628, 652], ["sockeye.utils.check_condition", "super().__init__", "layers.get_positional_embeddings", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "ValueError", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.get_positional_embeddings"], ["def", "__init__", "(", "self", ",", "\n", "weight_type", ":", "str", ",", "\n", "num_embed", ":", "int", ",", "\n", "max_seq_len", ":", "int", ",", "\n", "scale_up_input", ":", "bool", ",", "\n", "scale_down_positions", ":", "bool", ")", "->", "None", ":", "\n", "        ", "utils", ".", "check_condition", "(", "num_embed", "%", "2", "==", "0", ",", "\"Positional embeddings require an even embedding size it \"", "\n", "\"is however %d.\"", "%", "num_embed", ")", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight_type", "=", "weight_type", "\n", "self", ".", "num_embed", "=", "num_embed", "\n", "self", ".", "max_seq_len", "=", "max_seq_len", "\n", "self", ".", "scale_up_input", "=", "scale_up_input", "\n", "self", ".", "scale_down_positions", "=", "scale_down_positions", "\n", "\n", "if", "self", ".", "weight_type", "==", "C", ".", "FIXED_POSITIONAL_EMBEDDING", ":", "\n", "            ", "weight", "=", "get_positional_embeddings", "(", "length", "=", "self", ".", "max_seq_len", ",", "depth", "=", "self", ".", "num_embed", ")", "\n", "if", "self", ".", "scale_down_positions", ":", "\n", "                ", "weight", "*=", "self", ".", "num_embed", "**", "-", "0.5", "\n", "", "self", ".", "weight", "=", "pt", ".", "nn", ".", "Parameter", "(", "weight", ",", "requires_grad", "=", "False", ")", "\n", "", "elif", "self", ".", "weight_type", "==", "C", ".", "LEARNED_POSITIONAL_EMBEDDING", ":", "\n", "            ", "self", ".", "weight", "=", "pt", ".", "nn", ".", "Parameter", "(", "pt", ".", "Tensor", "(", "self", ".", "max_seq_len", ",", "self", ".", "num_embed", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"weight_type '%s' is not supported!\"", "%", "self", ".", "weight_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.PositionalEmbeddings.forward": [[653, 679], ["torch.clip", "torch.clip", "torch.embedding", "torch.embedding", "pos_embedding.detach.detach.detach", "layers.PositionalEmbeddings.weight.unsqueeze", "data.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ":", "pt", ".", "Tensor", ",", "steps", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "pt", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Applies positional embeddings to input data.\n\n        :param data: Input data. Shape: (batch, length or 1, num_embed)\n        :param steps: Optional steps input. If given, shape is (batch_size or 1, seq_len,)\n\n        :return: Data with positional embeddings added\n        \"\"\"", "\n", "# (length, num_embed)", "\n", "if", "steps", "is", "None", ":", "\n", "# (batch, length, num_embed)", "\n", "            ", "pos_embedding", "=", "self", ".", "weight", ".", "unsqueeze", "(", "0", ")", "[", ":", ",", ":", "data", ".", "size", "(", ")", "[", "1", "]", "]", "\n", "", "else", ":", "\n", "# (batch_size or 1, seq_len, num_embed)", "\n", "# NOTE: temporary fix until we decide how to handle output steps > max_supported_seq_len_target", "\n", "            ", "steps", "=", "pt", ".", "clip", "(", "steps", ",", "max", "=", "self", ".", "max_seq_len", "-", "1", ")", "\n", "pos_embedding", "=", "F", ".", "embedding", "(", "steps", ",", "self", ".", "weight", ")", "\n", "\n", "", "if", "self", ".", "weight_type", "==", "C", ".", "FIXED_POSITIONAL_EMBEDDING", ":", "\n", "            ", "pos_embedding", "=", "pos_embedding", ".", "detach", "(", ")", "\n", "\n", "", "if", "self", ".", "scale_up_input", ":", "\n", "            ", "data", "=", "data", "*", "(", "self", ".", "num_embed", "**", "0.5", ")", "\n", "\n", "", "return", "data", "+", "pos_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.SSRU.__init__": [[704, 718], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "model_size", ":", "int", ",", "inference_only", ":", "bool", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_size", "=", "model_size", "\n", "self", ".", "inference_only", "=", "inference_only", "\n", "\n", "self", ".", "cell_state_transform", "=", "self", ".", "_inference_cell_state_transform", "if", "inference_only", "else", "self", ".", "_training_cell_state_transform", "\n", "\n", "self", ".", "forget_gate", "=", "pt", ".", "nn", ".", "Linear", "(", "in_features", "=", "model_size", ",", "out_features", "=", "model_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "forget_gate_act", "=", "pt", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "self", ".", "linear", "=", "pt", ".", "nn", ".", "Linear", "(", "in_features", "=", "model_size", ",", "out_features", "=", "model_size", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "relu", "=", "pt", ".", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "# inplace=False because we need to non-activated data as well", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.SSRU.num_state_tensors": [[719, 723], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_state_tensors", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\" Number of state tensors returned by the layer \"\"\"", "\n", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.SSRU.needs_mask": [[724, 728], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "needs_mask", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\" Whether the layer makes use of a mask tensor or not \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.SSRU.get_state_shape": [[729, 735], ["None"], "methods", ["None"], ["", "def", "get_state_shape", "(", "self", ",", "batch_size", ":", "int", ")", "->", "Tuple", ":", "\n", "        ", "\"\"\"\n        :param batch_size: current batch size\n        :return: dimensions of each output state (assuming all of them have the same shape)\n        \"\"\"", "\n", "return", "1", ",", "batch_size", ",", "self", ".", "model_size", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.SSRU._training_cell_state_transform": [[736, 750], ["previous_cell_state.squeeze", "range", "torch.stack", "torch.stack", "weighted_inputs.size", "torch.stack.append", "previous_cell_state.squeeze.unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "pt", ".", "jit", ".", "script_if_tracing", "\n", "def", "_training_cell_state_transform", "(", "previous_cell_state", ",", "weighted_inputs", ",", "forget_rates", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "\n", "pt", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Update SSRU cell at training time\"\"\"", "\n", "steps", "=", "weighted_inputs", ".", "size", "(", ")", "[", "0", "]", "\n", "cell_state", "=", "previous_cell_state", ".", "squeeze", "(", "0", ")", "\n", "states", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "steps", ")", ":", "\n", "            ", "cell_state", "=", "forget_rates", "[", "t", ",", ":", ",", ":", "]", "*", "cell_state", "+", "weighted_inputs", "[", "t", ",", ":", ",", ":", "]", "\n", "states", ".", "append", "(", "cell_state", ")", "\n", "\n", "", "states", "=", "pt", ".", "stack", "(", "states", ",", "dim", "=", "0", ")", "# type: ignore", "\n", "return", "states", ",", "cell_state", ".", "unsqueeze", "(", "0", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.SSRU._inference_cell_state_transform": [[751, 757], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_inference_cell_state_transform", "(", "previous_cell_state", ",", "weighted_inputs", ",", "forget_rates", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "\n", "pt", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Update SSRU cell at inference time\"\"\"", "\n", "new_step_state", "=", "forget_rates", "*", "previous_cell_state", "+", "weighted_inputs", "# (1, batch, input_depth)", "\n", "return", "new_step_state", ",", "new_step_state", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.SSRU.forward": [[758, 770], ["layers.SSRU.forget_gate_act", "layers.SSRU.cell_state_transform", "layers.SSRU.forget_gate", "layers.SSRU.linear", "layers.SSRU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ":", "pt", ".", "Tensor", ",", "previous_states", ":", "pt", ".", "Tensor", ",", "**", "args", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "pt", ".", "Tensor", "]", ":", "# type: ignore", "\n", "        ", "\"\"\"\n        :param inputs: input data. Shape: (max_length, batch, input_depth).\n        :param previous_states: previous cell states. Shape: (max_length, batch, input_depth)\n        :return: cell output and new cell states.  Both with shape (max_length, batch, input_depth).\n        \"\"\"", "\n", "forget_rates", "=", "self", ".", "forget_gate_act", "(", "self", ".", "forget_gate", "(", "inputs", ")", ")", "\n", "weighted_inputs", "=", "(", "1", "-", "forget_rates", ")", "*", "self", ".", "linear", "(", "inputs", ")", "\n", "\n", "cell_state", ",", "last_step_state", "=", "self", ".", "cell_state_transform", "(", "previous_states", ",", "weighted_inputs", ",", "forget_rates", ")", "\n", "\n", "return", "self", ".", "relu", "(", "cell_state", ")", ",", "last_step_state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.get_activation": [[28, 34], ["torch.nn.ReLU", "torch.nn.SiLU", "torch.nn.GELU"], "function", ["None"], ["def", "get_activation", "(", "act_type", ":", "str", ",", "inplace", ":", "bool", "=", "False", ")", "->", "pt", ".", "nn", ".", "Module", ":", "\n", "    ", "if", "act_type", "==", "C", ".", "SWISH1", ":", "\n", "        ", "return", "pt", ".", "nn", ".", "SiLU", "(", "inplace", "=", "inplace", ")", "\n", "", "if", "act_type", "==", "C", ".", "GELU", ":", "\n", "        ", "return", "pt", ".", "nn", ".", "GELU", "(", ")", "\n", "", "return", "pt", ".", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.interleaved_matmul_encdec_qk": [[167, 192], ["q.contiguous().view().transpose.size", "q.contiguous().view().transpose.contiguous().view().transpose", "kv.reshape", "k.reshape.permute", "k.reshape.reshape", "torch.bmm", "q.contiguous().view().transpose.contiguous().view", "q.contiguous().view().transpose.contiguous"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.permute"], ["", "", "@", "pt", ".", "jit", ".", "script", "\n", "def", "interleaved_matmul_encdec_qk", "(", "q", ":", "pt", ".", "Tensor", ",", "\n", "kv", ":", "pt", ".", "Tensor", ",", "\n", "heads", ":", "int", ")", "->", "pt", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Simple port of npx.interleaved_matmul_encdec_qk with PyTorch.\n\n    :param q: (qlen, batch, hidden)\n    :param kv: (kvlen, batch, hidden * 2) -- interleaved\n    :param heads: number of attention heads\n    :return: (batch * heads, qlen, klen)\n    \"\"\"", "\n", "qlen", ",", "batch", ",", "hidden", "=", "q", ".", "size", "(", ")", "\n", "head_dim", "=", "hidden", "//", "heads", "\n", "\n", "# batch * heads, qlen, head_dim)", "\n", "q", "=", "q", ".", "contiguous", "(", ")", ".", "view", "(", "qlen", ",", "batch", "*", "heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "q", "=", "q", "*", "head_dim", "**", "-", "0.5", "\n", "\n", "tmp", "=", "kv", ".", "reshape", "(", "-", "1", ",", "batch", ",", "heads", ",", "2", ",", "head_dim", ")", "\n", "k", "=", "tmp", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "# pick keys", "\n", "k", "=", "k", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", "# (batch, heads, head_dim, kvlen)", "\n", "k", "=", "k", ".", "reshape", "(", "batch", "*", "heads", ",", "head_dim", ",", "-", "1", ")", "# (batch * heads, head_dim, kvlen)", "\n", "\n", "return", "pt", ".", "bmm", "(", "q", ",", "k", ")", "# (batch * heads, qlen, klen)", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.interleaved_matmul_encdec_valatt": [[195, 221], ["kv.size", "kv.reshape", "v.reshape.permute", "v.reshape.reshape", "torch.bmm", "output.transpose().contiguous().view.transpose().contiguous().view", "output.transpose().contiguous().view.transpose().contiguous", "output.transpose().contiguous().view.transpose"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelDataSet.permute"], ["", "@", "pt", ".", "jit", ".", "script", "\n", "def", "interleaved_matmul_encdec_valatt", "(", "kv", ":", "pt", ".", "Tensor", ",", "\n", "att", ":", "pt", ".", "Tensor", ",", "\n", "heads", ":", "int", ")", "->", "pt", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Simple port of npx.interleaved_matmul_encdec_valatt with PyTorch.\n    There is probably something to be gained by using views more\n    efficiently but this is placeholder code anyway.\n\n    :param kv: (kvlen, batch, hidden * 2)\n    :param att: (batch * heads, qlen, kvlen)\n    :param heads: number of attention heads\n    :return: (qlen, batch, hidden)\n    \"\"\"", "\n", "kvlen", ",", "batch", ",", "hidden2", "=", "kv", ".", "size", "(", ")", "\n", "hidden", "=", "hidden2", "//", "2", "\n", "head_dim", "=", "hidden", "//", "heads", "\n", "\n", "tmp", "=", "kv", ".", "reshape", "(", "kvlen", ",", "batch", ",", "heads", ",", "2", ",", "-", "1", ")", "\n", "v", "=", "tmp", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", "# pick values", "\n", "v", "=", "v", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", "# bsz, heads, kvlen, head_dim", "\n", "v", "=", "v", ".", "reshape", "(", "-", "1", ",", "kvlen", ",", "head_dim", ")", "# bsz * heads, kvlen, head_dim", "\n", "\n", "output", "=", "pt", ".", "bmm", "(", "att", ",", "v", ")", "# bsz * heads, qlen, head_dim", "\n", "output", "=", "output", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "batch", ",", "hidden", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.prepare_source_length_mask": [[260, 271], ["mask.unsqueeze().expand().reshape().unsqueeze.unsqueeze().expand().reshape().unsqueeze", "torch.arange().unsqueeze", "lengths.reshape", "mask.unsqueeze().expand().reshape().unsqueeze.unsqueeze().expand().reshape", "torch.arange", "mask.unsqueeze().expand().reshape().unsqueeze.unsqueeze().expand", "mask.unsqueeze().expand().reshape().unsqueeze.unsqueeze"], "function", ["None"], ["", "", "def", "prepare_source_length_mask", "(", "lengths", ":", "pt", ".", "Tensor", ",", "heads", ":", "int", ",", "max_length", ":", "int", ",", "expand", "=", "True", ")", "->", "pt", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n        lengths: (batch_size,)\n        expand: Expand to the heads.\n    \"\"\"", "\n", "# (batch_size, max_len)", "\n", "mask", "=", "~", "(", "pt", ".", "arange", "(", "max_length", ",", "device", "=", "lengths", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "<", "lengths", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "if", "expand", ":", "\n", "# (batch_size*heads, 1, max_len)", "\n", "        ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "heads", ",", "-", "1", ")", ".", "reshape", "(", "(", "-", "1", ",", "max_length", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.interleave_kv": [[584, 589], ["isinstance", "isinstance", "module.interleave_kv"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.interleave_kv"], ["", "", "", "def", "interleave_kv", "(", "module", ":", "pt", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\" Writes kv input projection parameters in interleaved format (compatible with interleaved matmul). \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "MultiHeadAttention", ")", "or", "isinstance", "(", "module", ",", "MultiHeadSelfAttention", ")", ":", "\n", "        ", "if", "not", "module", ".", "kv_interleaved", ":", "\n", "            ", "module", ".", "interleave_kv", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.separate_kv": [[591, 596], ["isinstance", "isinstance", "module.separate_kv"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.separate_kv"], ["", "", "", "def", "separate_kv", "(", "module", ":", "pt", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\" Writes kv input projection parameters in non-interleaved format (compatible with F.multi_head_attention). \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "MultiHeadAttention", ")", "or", "isinstance", "(", "module", ",", "MultiHeadSelfAttention", ")", ":", "\n", "        ", "if", "module", ".", "kv_interleaved", ":", "\n", "            ", "module", ".", "separate_kv", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.get_positional_embeddings": [[598, 615], ["sockeye.utils.check_condition", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.sin", "torch.cos", "torch.hstack", "torch.pow", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["", "", "", "@", "pt", ".", "jit", ".", "script", "\n", "def", "get_positional_embeddings", "(", "length", ":", "int", ",", "depth", ":", "int", ")", "->", "pt", ".", "Tensor", ":", "\n", "    ", "utils", ".", "check_condition", "(", "depth", "%", "2", "==", "0", ",", "\"Positional embeddings require an even embedding size it \"", "\n", "\"is however %d.\"", "%", "depth", ")", "\n", "# (1, depth)", "\n", "channels", "=", "pt", ".", "arange", "(", "depth", "//", "2", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# (length, 1)", "\n", "positions", "=", "pt", ".", "arange", "(", "0", ",", "length", ")", ".", "unsqueeze", "(", "1", ")", "\n", "scaled_positions", "=", "positions", "/", "pt", ".", "pow", "(", "10000", ",", "(", "2", "*", "channels", ")", "/", "depth", ")", "\n", "# sinusoids:", "\n", "sin", "=", "pt", ".", "sin", "(", "scaled_positions", ")", "\n", "# cosines:", "\n", "cos", "=", "pt", ".", "cos", "(", "scaled_positions", ")", "\n", "# interleave: (length, num_embed)", "\n", "encodings", "=", "pt", ".", "hstack", "(", "[", "sin", ",", "cos", "]", ")", "\n", "return", "encodings", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.checkpoint_decoder.CheckpointDecoder.__init__": [[60, 141], ["enumerate", "enumerate", "list", "inference.CandidateScorer", "inference.Translator", "logger.info", "contextlib.ExitStack", "utils.check_condition", "utils.check_condition", "checkpoint_decoder.write_to_file", "checkpoint_decoder.write_to_file", "zip", "len", "exit_stack.enter_context", "exit_stack.enter_context", "f.readlines", "f.readlines", "all", "all", "len", "len", "checkpoint_decoder.parallel_subsample", "os.path.join", "os.path.join", "utils.smart_open", "utils.smart_open", "constants.DECODE_IN_NAME.format", "constants.DECODE_REF_NAME.format", "len", "len", "len", "len", "itertools.chain", "len", "sentence.strip"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.checkpoint_decoder.write_to_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.checkpoint_decoder.write_to_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.checkpoint_decoder.parallel_subsample", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open"], ["def", "__init__", "(", "self", ",", "\n", "model_folder", ":", "str", ",", "\n", "inputs", ":", "List", "[", "str", "]", ",", "\n", "references", ":", "List", "[", "str", "]", ",", "\n", "source_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "target_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "model", ":", "model", ".", "SockeyeModel", ",", "\n", "device", ":", "torch", ".", "device", ",", "\n", "max_input_len", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "batch_size", ":", "int", "=", "16", ",", "\n", "beam_size", ":", "int", "=", "C", ".", "DEFAULT_BEAM_SIZE", ",", "\n", "nbest_size", ":", "int", "=", "C", ".", "DEFAULT_NBEST_SIZE", ",", "\n", "bucket_width_source", ":", "int", "=", "10", ",", "\n", "length_penalty_alpha", ":", "float", "=", "1.0", ",", "\n", "length_penalty_beta", ":", "float", "=", "0.0", ",", "\n", "max_output_length_num_stds", ":", "int", "=", "C", ".", "DEFAULT_NUM_STD_MAX_OUTPUT_LENGTH", ",", "\n", "ensemble_mode", ":", "str", "=", "'linear'", ",", "\n", "sample_size", ":", "int", "=", "-", "1", ",", "\n", "random_seed", ":", "int", "=", "42", ")", "->", "None", ":", "\n", "        ", "self", ".", "max_input_len", "=", "max_input_len", "\n", "self", ".", "max_output_length_num_stds", "=", "max_output_length_num_stds", "\n", "self", ".", "ensemble_mode", "=", "ensemble_mode", "\n", "self", ".", "beam_size", "=", "beam_size", "\n", "self", ".", "nbest_size", "=", "nbest_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "bucket_width_source", "=", "bucket_width_source", "\n", "self", ".", "length_penalty_alpha", "=", "length_penalty_alpha", "\n", "self", ".", "length_penalty_beta", "=", "length_penalty_beta", "\n", "self", ".", "model", "=", "model", "\n", "\n", "with", "ExitStack", "(", ")", "as", "exit_stack", ":", "\n", "            ", "inputs_fins", "=", "[", "exit_stack", ".", "enter_context", "(", "utils", ".", "smart_open", "(", "f", ")", ")", "for", "f", "in", "inputs", "]", "\n", "references_fins", "=", "[", "exit_stack", ".", "enter_context", "(", "utils", ".", "smart_open", "(", "f", ")", ")", "for", "f", "in", "references", "]", "\n", "\n", "inputs_sentences", "=", "[", "f", ".", "readlines", "(", ")", "for", "f", "in", "inputs_fins", "]", "\n", "targets_sentences", "=", "[", "f", ".", "readlines", "(", ")", "for", "f", "in", "references_fins", "]", "\n", "\n", "utils", ".", "check_condition", "(", "all", "(", "len", "(", "l", ")", "==", "len", "(", "targets_sentences", "[", "0", "]", ")", "\n", "for", "l", "in", "chain", "(", "inputs_sentences", ",", "targets_sentences", ")", ")", ",", "\n", "\"Sentences differ in length.\"", ")", "\n", "utils", ".", "check_condition", "(", "all", "(", "len", "(", "sentence", ".", "strip", "(", ")", ")", ">", "0", "for", "sentence", "in", "targets_sentences", "[", "0", "]", ")", ",", "\n", "\"Empty target validation sentence.\"", ")", "\n", "\n", "if", "sample_size", "<=", "0", ":", "\n", "                ", "sample_size", "=", "len", "(", "inputs_sentences", "[", "0", "]", ")", "\n", "", "if", "sample_size", "<", "len", "(", "inputs_sentences", "[", "0", "]", ")", ":", "\n", "                ", "sentences", "=", "parallel_subsample", "(", "\n", "inputs_sentences", "+", "targets_sentences", ",", "sample_size", ",", "random_seed", ")", "\n", "self", ".", "inputs_sentences", "=", "sentences", "[", "0", ":", "len", "(", "inputs_sentences", ")", "]", "\n", "self", ".", "targets_sentences", "=", "sentences", "[", "len", "(", "inputs_sentences", ")", ":", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "inputs_sentences", ",", "self", ".", "targets_sentences", "=", "inputs_sentences", ",", "targets_sentences", "\n", "\n", "", "if", "sample_size", "<", "self", ".", "batch_size", ":", "\n", "                ", "self", ".", "batch_size", "=", "sample_size", "\n", "", "", "for", "factor_idx", ",", "factor", "in", "enumerate", "(", "self", ".", "inputs_sentences", ")", ":", "\n", "            ", "write_to_file", "(", "factor", ",", "os", ".", "path", ".", "join", "(", "model_folder", ",", "C", ".", "DECODE_IN_NAME", ".", "format", "(", "factor", "=", "factor_idx", ")", ")", ")", "\n", "", "for", "factor_idx", ",", "factor", "in", "enumerate", "(", "self", ".", "targets_sentences", ")", ":", "\n", "            ", "write_to_file", "(", "factor", ",", "os", ".", "path", ".", "join", "(", "model_folder", ",", "C", ".", "DECODE_REF_NAME", ".", "format", "(", "factor", "=", "factor_idx", ")", ")", ")", "\n", "\n", "", "self", ".", "inputs_sentences", "=", "list", "(", "zip", "(", "*", "self", ".", "inputs_sentences", ")", ")", "# type: ignore", "\n", "\n", "scorer", "=", "inference", ".", "CandidateScorer", "(", "\n", "length_penalty_alpha", "=", "length_penalty_alpha", ",", "\n", "length_penalty_beta", "=", "length_penalty_beta", ",", "\n", "brevity_penalty_weight", "=", "0.0", ")", "\n", "\n", "self", ".", "translator", "=", "inference", ".", "Translator", "(", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "device", "=", "device", ",", "\n", "ensemble_mode", "=", "self", ".", "ensemble_mode", ",", "\n", "scorer", "=", "scorer", ",", "\n", "beam_search_stop", "=", "'all'", ",", "\n", "nbest_size", "=", "self", ".", "nbest_size", ",", "\n", "models", "=", "[", "self", ".", "model", "]", ",", "\n", "source_vocabs", "=", "source_vocabs", ",", "\n", "target_vocabs", "=", "target_vocabs", ",", "\n", "restrict_lexicon", "=", "None", ")", "\n", "\n", "logger", ".", "info", "(", "\"Created CheckpointDecoder(max_input_len=%d, beam_size=%d, num_sentences=%d)\"", ",", "\n", "max_input_len", "if", "max_input_len", "is", "not", "None", "else", "-", "1", ",", "beam_size", ",", "len", "(", "self", ".", "targets_sentences", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.checkpoint_decoder.CheckpointDecoder.decode_and_evaluate": [[142, 212], ["checkpoint_decoder.CheckpointDecoder.model.eval", "list", "checkpoint_decoder.CheckpointDecoder.model.train", "contextlib.ExitStack", "time.time", "enumerate", "checkpoint_decoder.CheckpointDecoder.translator.translate", "zip", "len", "zip", "evaluate.raw_corpus_bleu", "evaluate.raw_corpus_chrf", "evaluate.raw_corpus_rouge1", "evaluate.raw_corpus_rouge2", "evaluate.raw_corpus_rougel", "evaluate.raw_corpus_length_ratio", "evaluate.raw_corpus_ter", "len", "enumerate", "trans_inputs.append", "time.time", "list.append", "zip", "metrics.update", "exit_stack.enter_context", "range", "inference.make_input_from_multiple_strings", "utils.smart_open", "len", "print", "evaluate.raw_corpus_bleu", "output_name.format"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.train", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator.translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_chrf", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_rouge1", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_rouge2", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_rougel", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_length_ratio", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_ter", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_multiple_strings", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.evaluate.raw_corpus_bleu"], ["", "def", "decode_and_evaluate", "(", "self", ",", "output_name", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "\"\"\"\n        Decodes data set and evaluates given a checkpoint.\n\n        :param output_name: Filename to write translations to. If None, will not write outputs.\n        :return: Mapping of metric names to scores.\n        \"\"\"", "\n", "\n", "# 1. Translate", "\n", "\n", "# Store original mode and set to eval mode in case the model is not yet", "\n", "# traced.", "\n", "original_mode", "=", "self", ".", "model", ".", "training", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "trans_wall_time", "=", "0.0", "\n", "translations", "=", "[", "]", "# type: List[List[str]]", "\n", "with", "ExitStack", "(", ")", "as", "exit_stack", ":", "\n", "            ", "outputs", "=", "[", "exit_stack", ".", "enter_context", "(", "utils", ".", "smart_open", "(", "output_name", ".", "format", "(", "factor", "=", "idx", ")", ",", "'w'", ")", ")", "\n", "if", "output_name", "is", "not", "None", "else", "None", "for", "idx", "in", "range", "(", "self", ".", "model", ".", "num_target_factors", ")", "]", "\n", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "trans_inputs", "=", "[", "]", "# type: List[inference.TranslatorInput]", "\n", "for", "i", ",", "inputs", "in", "enumerate", "(", "self", ".", "inputs_sentences", ")", ":", "\n", "                ", "trans_inputs", ".", "append", "(", "inference", ".", "make_input_from_multiple_strings", "(", "i", ",", "inputs", ")", ")", "\n", "", "trans_outputs", "=", "self", ".", "translator", ".", "translate", "(", "trans_inputs", ")", "\n", "trans_wall_time", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "for", "trans_input", ",", "trans_output", "in", "zip", "(", "trans_inputs", ",", "trans_outputs", ")", ":", "\n", "                ", "output_strings", "=", "[", "trans_output", ".", "translation", "]", "\n", "if", "trans_output", ".", "factor_translations", "is", "not", "None", "and", "len", "(", "outputs", ")", ">", "1", ":", "\n", "                    ", "output_strings", "+=", "trans_output", ".", "factor_translations", "\n", "", "translations", ".", "append", "(", "output_strings", ")", "\n", "for", "output_string", ",", "output_file", "in", "zip", "(", "output_strings", ",", "outputs", ")", ":", "\n", "                    ", "if", "output_file", "is", "not", "None", ":", "\n", "                        ", "print", "(", "output_string", ",", "file", "=", "output_file", ")", "\n", "", "", "", "", "avg_time", "=", "trans_wall_time", "/", "len", "(", "self", ".", "targets_sentences", "[", "0", "]", ")", "\n", "translations", "=", "list", "(", "zip", "(", "*", "translations", ")", ")", "# type: ignore", "\n", "\n", "# Restore original model mode", "\n", "self", ".", "model", ".", "train", "(", "original_mode", ")", "\n", "\n", "# 2. Evaluate", "\n", "\n", "metrics", "=", "{", "C", ".", "BLEU", ":", "evaluate", ".", "raw_corpus_bleu", "(", "hypotheses", "=", "translations", "[", "0", "]", ",", "\n", "references", "=", "self", ".", "targets_sentences", "[", "0", "]", ",", "\n", "offset", "=", "0.01", ")", ",", "\n", "C", ".", "CHRF", ":", "evaluate", ".", "raw_corpus_chrf", "(", "hypotheses", "=", "translations", "[", "0", "]", ",", "\n", "references", "=", "self", ".", "targets_sentences", "[", "0", "]", ")", ",", "\n", "C", ".", "ROUGE1", ":", "evaluate", ".", "raw_corpus_rouge1", "(", "hypotheses", "=", "translations", "[", "0", "]", ",", "\n", "references", "=", "self", ".", "targets_sentences", "[", "0", "]", ")", ",", "\n", "C", ".", "ROUGE2", ":", "evaluate", ".", "raw_corpus_rouge2", "(", "hypotheses", "=", "translations", "[", "0", "]", ",", "\n", "references", "=", "self", ".", "targets_sentences", "[", "0", "]", ")", ",", "\n", "C", ".", "ROUGEL", ":", "evaluate", ".", "raw_corpus_rougel", "(", "hypotheses", "=", "translations", "[", "0", "]", ",", "\n", "references", "=", "self", ".", "targets_sentences", "[", "0", "]", ")", ",", "\n", "C", ".", "LENRATIO", ":", "evaluate", ".", "raw_corpus_length_ratio", "(", "hypotheses", "=", "translations", "[", "0", "]", ",", "\n", "references", "=", "self", ".", "targets_sentences", "[", "0", "]", ")", ",", "\n", "C", ".", "TER", ":", "evaluate", ".", "raw_corpus_ter", "(", "hypotheses", "=", "translations", "[", "0", "]", ",", "\n", "references", "=", "self", ".", "targets_sentences", "[", "0", "]", ")", ",", "\n", "C", ".", "AVG_TIME", ":", "avg_time", ",", "\n", "C", ".", "DECODING_TIME", ":", "trans_wall_time", "}", "\n", "\n", "if", "len", "(", "translations", ")", ">", "1", ":", "# metrics for other target factors", "\n", "            ", "for", "i", ",", "_", "in", "enumerate", "(", "translations", "[", "1", ":", "]", ",", "1", ")", ":", "\n", "# only BLEU", "\n", "                ", "metrics", ".", "update", "(", "\n", "{", "'f%d-%s'", "%", "(", "i", ",", "C", ".", "BLEU", ")", ":", "evaluate", ".", "raw_corpus_bleu", "(", "hypotheses", "=", "translations", "[", "i", "]", ",", "\n", "references", "=", "self", ".", "targets_sentences", "[", "i", "]", ",", "\n", "offset", "=", "0.01", ")", "}", "\n", ")", "\n", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.checkpoint_decoder.CheckpointDecoder.warmup": [[213, 224], ["checkpoint_decoder.CheckpointDecoder.model.eval", "checkpoint_decoder.CheckpointDecoder.translator.translate", "checkpoint_decoder.CheckpointDecoder.model.train", "inference.make_input_from_multiple_strings"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.Translator.translate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.train", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.make_input_from_multiple_strings"], ["", "def", "warmup", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Translate a single sentence to warm up the model. Set the model to eval\n        mode for tracing, translate the sentence, then set the model back to its\n        original mode.\n        \"\"\"", "\n", "original_mode", "=", "self", ".", "model", ".", "training", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "one_sentence", "=", "[", "inference", ".", "make_input_from_multiple_strings", "(", "0", ",", "self", ".", "inputs_sentences", "[", "0", "]", ")", "]", "\n", "_", "=", "self", ".", "translator", ".", "translate", "(", "one_sentence", ")", "\n", "self", ".", "model", ".", "train", "(", "original_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.checkpoint_decoder.parallel_subsample": [[226, 232], ["random.Random", "list", "zip", "random.Random.sample", "list", "zip"], "function", ["None"], ["", "", "def", "parallel_subsample", "(", "parallel_sequences", ":", "List", "[", "List", "[", "Any", "]", "]", ",", "sample_size", ":", "int", ",", "seed", ":", "int", ")", "->", "List", "[", "Any", "]", ":", "\n", "# custom random number generator to guarantee the same samples across runs in order to be able to", "\n", "# compare metrics across independent runs", "\n", "    ", "random_gen", "=", "random", ".", "Random", "(", "seed", ")", "\n", "parallel_sample", "=", "list", "(", "zip", "(", "*", "random_gen", ".", "sample", "(", "list", "(", "zip", "(", "*", "parallel_sequences", ")", ")", ",", "sample_size", ")", ")", ")", "\n", "return", "parallel_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.checkpoint_decoder.write_to_file": [[234, 238], ["utils.smart_open", "print", "x.rstrip"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open"], ["", "def", "write_to_file", "(", "data", ":", "List", "[", "str", "]", ",", "fname", ":", "str", ")", ":", "\n", "    ", "with", "utils", ".", "smart_open", "(", "fname", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "x", "in", "data", ":", "\n", "            ", "print", "(", "x", ".", "rstrip", "(", ")", ",", "file", "=", "f", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.Loss.__init__": [[35, 51], ["super().__init__", "logger.info"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "\n", "name", ":", "str", ",", "\n", "output_name", ":", "str", ",", "\n", "label_name", ":", "str", ",", "\n", "weight", ":", "float", "=", "1.0", ",", "\n", "metric_prefix", ":", "str", "=", "''", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_name", "=", "name", "\n", "self", ".", "_output_name", "=", "output_name", "\n", "self", ".", "_label_name", "=", "label_name", "\n", "self", ".", "_weight", "=", "weight", "\n", "self", ".", "_metric", "=", "None", "# type: Optional[LossMetric]", "\n", "self", ".", "_metric_prefix", "=", "metric_prefix", "\n", "logger", ".", "info", "(", "\"Loss: %s | weight=%.2f | metric: %s (%s) | output_name: '%s' | label_name: '%s'\"", ",", "\n", "self", ".", "_name", ",", "self", ".", "weight", ",", "self", ".", "metric", ".", "name", ",", "self", ".", "metric", ".", "short_name", ",", "\n", "self", ".", "output_name", ",", "self", ".", "label_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.Loss.__call__": [[52, 64], ["utils.check_condition", "utils.check_condition", "super().__call__"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.Speedometer.__call__"], ["", "def", "__call__", "(", "self", ",", "outputs", ":", "Dict", "[", "str", ",", "Any", "]", ",", "labels", ":", "Dict", "[", "str", ",", "Any", "]", ")", ":", "\n", "        ", "\"\"\"\n        Loss retrieves the required output and label.\n        \"\"\"", "\n", "utils", ".", "check_condition", "(", "self", ".", "output_name", "in", "outputs", ",", "\n", "\"output '%s' not found. Loss requires this output key\"", "%", "self", ".", "output_name", ")", "\n", "utils", ".", "check_condition", "(", "self", ".", "label_name", "in", "labels", ",", "\n", "\"label '%s' not found. Loss requires this label key\"", "%", "self", ".", "output_name", ")", "\n", "output", "=", "outputs", "[", "self", ".", "output_name", "]", "\n", "label", "=", "labels", "[", "self", ".", "label_name", "]", "\n", "\n", "return", "super", "(", ")", ".", "__call__", "(", "output", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.Loss.create_metric": [[65, 71], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "create_metric", "(", "self", ")", "->", "'LossMetric'", ":", "\n", "        ", "\"\"\"\n        Create an instance of the EvalMetric that corresponds to this Loss function.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.Loss.metric": [[72, 77], ["loss.Loss.create_metric"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.MSELoss.create_metric"], ["", "@", "property", "\n", "def", "metric", "(", "self", ")", "->", "'LossMetric'", ":", "\n", "        ", "if", "self", ".", "_metric", "is", "None", ":", "\n", "            ", "self", ".", "_metric", "=", "self", ".", "create_metric", "(", ")", "\n", "", "return", "self", ".", "_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.Loss.weight": [[78, 81], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "weight", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.Loss.name": [[82, 85], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.Loss.output_name": [[86, 89], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_name", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_output_name", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.Loss.label_name": [[90, 93], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_name", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_label_name", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.__init__": [[97, 102], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ":", "str", ",", "short_name", ":", "Optional", "[", "str", "]", "=", "None", ",", "prefix", ":", "str", "=", "''", ")", "->", "None", ":", "\n", "        ", "self", ".", "_name", "=", "prefix", "+", "name", "\n", "self", ".", "_short_name", "=", "prefix", "+", "short_name", "if", "short_name", "else", "self", ".", "_name", "\n", "self", ".", "_sum", "=", "0.0", "\n", "self", ".", "_num_inst", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.__repr__": [[103, 105], ["loss.LossMetric.get"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"%s(%.2f/%.2f=%.2f)\"", "%", "(", "self", ".", "name", ",", "self", ".", "_sum", ",", "self", ".", "_num_inst", ",", "self", ".", "get", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.__str__": [[106, 108], ["loss.LossMetric.get"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"%s=%f\"", "%", "(", "self", ".", "short_name", ",", "self", ".", "get", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.name": [[109, 112], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.short_name": [[113, 116], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "short_name", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_short_name", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.update": [[117, 120], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "loss", ",", "num_samples", ")", ":", "\n", "        ", "self", ".", "_sum", "+=", "loss", "\n", "self", ".", "_num_inst", "+=", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.get": [[121, 123], ["float"], "methods", ["None"], ["", "def", "get", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "_sum", "/", "self", ".", "_num_inst", "if", "self", ".", "_num_inst", "else", "float", "(", "'nan'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset": [[124, 127], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_sum", "=", "0.0", "\n", "self", ".", "_num_inst", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.CrossEntropyLoss.__init__": [[135, 159], ["loss.Loss.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "\n", "name", ":", "str", "=", "C", ".", "CROSS_ENTROPY", ",", "\n", "weight", ":", "float", "=", "1.0", ",", "\n", "label_smoothing", ":", "float", "=", "0.0", ",", "\n", "dtype", ":", "str", "=", "C", ".", "DTYPE_FP32", ",", "\n", "output_name", ":", "str", "=", "C", ".", "LOGITS_NAME", ",", "\n", "label_name", ":", "str", "=", "C", ".", "TARGET_LABEL_NAME", ",", "\n", "ignore_label", ":", "int", "=", "C", ".", "PAD_ID", ",", "\n", "metric_prefix", ":", "str", "=", "''", ",", "\n", "label_smoothing_impl", ":", "str", "=", "'mxnet'", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "output_name", "=", "output_name", ",", "label_name", "=", "label_name", ",", "\n", "weight", "=", "weight", ",", "metric_prefix", "=", "metric_prefix", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "_alpha", "=", "label_smoothing", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_reduction", "=", "'mean'", "# TODO: consider sum reduction and normalization outside of loss for reporting", "\n", "if", "label_smoothing", "==", "0", "or", "label_smoothing_impl", "==", "'torch'", ":", "\n", "            ", "self", ".", "_ce_impl", "=", "self", ".", "_torch_cross_entropy_loss", "\n", "", "elif", "label_smoothing", ">", "0.0", "and", "label_smoothing_impl", "==", "'mxnet'", ":", "\n", "            ", "self", ".", "_ce_impl", "=", "self", ".", "_smoothed_loss_as_in_mxnet", "\n", "", "elif", "label_smoothing", ">", "0.0", "and", "label_smoothing_impl", "==", "'fairseq'", ":", "\n", "            ", "self", ".", "_ce_impl", "=", "self", ".", "_smoothed_loss_as_in_fairseq", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown label_smoothing impl. choose from mxnet, fairseq, or torch.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.CrossEntropyLoss._smoothed_loss_as_in_mxnet": [[160, 180], ["torch.log_softmax", "torch.log_softmax.sum", "labels.not_equal", "nll.masked_fill_", "pt.log_softmax.sum.masked_fill_", "labels.not_equal.sum", "torch.log_softmax.gather().squeeze", "nll.sum", "torch.log_softmax.gather", "logits.size", "labels.unsqueeze().long", "labels.unsqueeze"], "methods", ["None"], ["", "", "def", "_smoothed_loss_as_in_mxnet", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Computes label-smoothed cross-entropy loss just like sockeye.loss.CrossEntropyLossWithoutSoftmaxOutput()\n        Notable details:\n        - smoothing with 1/vocab_size, not 1/(vocab_size-1) as in fairseq\n        - form taken from https://github.com/dmlc/gluon-nlp/blob/b714eaccc67619d7bdcbd1574d30be87d9c73f0c/src/gluonnlp/loss.py#L4\n        \"\"\"", "\n", "pred", "=", "pt", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "nll", "=", "-", "pred", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "labels", ".", "unsqueeze", "(", "-", "1", ")", ".", "long", "(", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "all_scores", "=", "pred", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "# (batch, len,)", "\n", "valid_mask", "=", "labels", ".", "not_equal", "(", "self", ".", "ignore_label", ")", "\n", "pad_mask", "=", "~", "valid_mask", "\n", "nll", ".", "masked_fill_", "(", "pad_mask", ",", "0.0", ")", "\n", "all_scores", ".", "masked_fill_", "(", "pad_mask", ",", "0.0", ")", "\n", "\n", "nll", "=", "(", "1", "-", "self", ".", "_alpha", ")", "*", "nll", "-", "self", ".", "_alpha", "/", "logits", ".", "size", "(", "-", "1", ")", "*", "all_scores", "\n", "num_valid", "=", "valid_mask", ".", "sum", "(", ")", "\n", "ce", "=", "nll", ".", "sum", "(", ")", "*", "self", ".", "weight", "/", "num_valid", "\n", "return", "ce", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.CrossEntropyLoss._smoothed_loss_as_in_fairseq": [[181, 205], ["torch.log_softmax", "torch.log_softmax.sum", "labels.unsqueeze.unsqueeze.eq", "nll.sum.sum.masked_fill_", "smooth_loss.sum.sum.masked_fill_", "nll.sum.sum.sum", "smooth_loss.sum.sum.sum", "labels.unsqueeze.unsqueeze.dim", "labels.unsqueeze.unsqueeze.unsqueeze", "torch.log_softmax.gather", "logits.dim", "logits.size", "nll.sum.sum.sum", "labels.unsqueeze.unsqueeze.long"], "methods", ["None"], ["", "def", "_smoothed_loss_as_in_fairseq", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Computes smoothed NLL as in fairseq, see\n        # https://github.com/pytorch/fairseq/blob/db0175a882e8ae0f30d89b5a610373dbe032d528/fairseq/criterions/label_smoothed_cross_entropy.py#L33\n        \"\"\"", "\n", "pred", "=", "pt", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "if", "labels", ".", "dim", "(", ")", "==", "logits", ".", "dim", "(", ")", "-", "1", ":", "\n", "            ", "labels", "=", "labels", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "nll", "=", "-", "pred", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "labels", ".", "long", "(", ")", ")", "\n", "smooth_loss", "=", "pred", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "pad_mask", "=", "labels", ".", "eq", "(", "self", ".", "ignore_label", ")", "\n", "nll", ".", "masked_fill_", "(", "pad_mask", ",", "0.0", ")", "\n", "smooth_loss", ".", "masked_fill_", "(", "pad_mask", ",", "0.0", ")", "\n", "\n", "nll", "=", "nll", ".", "sum", "(", ")", "\n", "smooth_loss", "=", "smooth_loss", ".", "sum", "(", ")", "\n", "\n", "alpha_i", "=", "self", ".", "_alpha", "/", "(", "logits", ".", "size", "(", "-", "1", ")", "-", "1", ")", "\n", "nll", "=", "(", "1.0", "-", "self", ".", "_alpha", "-", "alpha_i", ")", "*", "nll", "-", "alpha_i", "*", "smooth_loss", "\n", "\n", "num_valid", "=", "(", "~", "pad_mask", ")", ".", "sum", "(", ")", "\n", "ce", "=", "nll", ".", "sum", "(", ")", "*", "self", ".", "weight", "/", "num_valid", "\n", "return", "ce", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.CrossEntropyLoss._torch_cross_entropy_loss": [[206, 217], ["logits.view.view.view", "labels.reshape.reshape.reshape", "torch.nn.functional.cross_entropy", "labels.reshape.reshape.long", "logits.view.view.size"], "methods", ["None"], ["", "def", "_torch_cross_entropy_loss", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", ")", "[", "-", "1", "]", ")", "\n", "# Reshape due to: view size is not compatible with input tensor's size and stride", "\n", "# (at least one dimension spans across two contiguous subspaces). Use .reshape(...) instead.", "\n", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ")", "\n", "_kwargs", "=", "{", "'weight'", ":", "None", ",", "'ignore_index'", ":", "self", ".", "ignore_label", ",", "'reduction'", ":", "self", ".", "_reduction", "}", "\n", "if", "self", ".", "_alpha", ">", "0.0", ":", "\n", "            ", "_kwargs", "[", "'label_smoothing'", "]", "=", "self", ".", "_alpha", "\n", "", "ce", "=", "pt", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "logits", ",", "labels", ".", "long", "(", ")", ",", "**", "_kwargs", ")", "\n", "ce", "*=", "self", ".", "weight", "\n", "return", "ce", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.CrossEntropyLoss.forward": [[218, 221], ["loss.CrossEntropyLoss._ce_impl", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ":", "pt", ".", "Tensor", ",", "labels", ":", "pt", ".", "Tensor", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "pt", ".", "Tensor", "]", ":", "\n", "        ", "ce", "=", "self", ".", "_ce_impl", "(", "logits", ",", "labels", ")", "\n", "return", "ce", ",", "pt", ".", "ones", "(", "1", ",", "device", "=", "ce", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.CrossEntropyLoss.create_metric": [[222, 227], ["loss.PerplexityMetric"], "methods", ["None"], ["", "def", "create_metric", "(", "self", ")", "->", "'LossMetric'", ":", "\n", "        ", "\"\"\"\n        Create an instance of the EvalMetric that corresponds to this Loss function.\n        \"\"\"", "\n", "return", "PerplexityMetric", "(", "prefix", "=", "self", ".", "_metric_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.DynamicBCEWithLogitsLoss.__init__": [[232, 239], ["super().__init__", "loss.DynamicBCEWithLogitsLoss.register_buffer", "loss.DynamicBCEWithLogitsLoss.register_buffer"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "weight", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ",", "size_average", "=", "None", ",", "reduce", "=", "None", ",", "reduction", ":", "str", "=", "'mean'", ",", "\n", "pos_weight", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "reduction", "=", "reduction", ")", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "weight", ")", "\n", "self", ".", "register_buffer", "(", "'pos_weight'", ",", "pos_weight", ")", "\n", "self", ".", "weight", ":", "Optional", "[", "pt", ".", "Tensor", "]", "\n", "self", ".", "pos_weight", ":", "Optional", "[", "pt", ".", "Tensor", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.DynamicBCEWithLogitsLoss.forward": [[240, 250], ["torch.nn.functional.binary_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "pt", ".", "Tensor", ",", "target", ":", "pt", ".", "Tensor", ",", "pos_weight", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "pt", ".", "Tensor", ":", "\n", "        ", "if", "pos_weight", "is", "None", ":", "\n", "            ", "pos_weight", "=", "self", ".", "pos_weight", "\n", "\n", "", "return", "pt", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "\n", "input", ",", "\n", "target", ",", "\n", "self", ".", "weight", ",", "\n", "pos_weight", "=", "pos_weight", ",", "\n", "reduction", "=", "self", ".", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.BinaryCrossEntropyBowLoss.__init__": [[264, 280], ["loss.Loss.__init__", "loss.DynamicBCEWithLogitsLoss"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "\n", "name", ":", "str", "=", "C", ".", "BINARY_CROSS_ENTROPY", ",", "\n", "pos_weight", ":", "float", "=", "1.0", ",", "\n", "weight", ":", "float", "=", "1.0", ",", "\n", "dtype", ":", "str", "=", "C", ".", "DTYPE_FP32", ",", "\n", "output_name", ":", "str", "=", "C", ".", "NVS_PRED_NAME", ",", "\n", "label_name", ":", "str", "=", "C", ".", "TARGET_LABEL_NAME", ",", "\n", "num_labels", ":", "int", "=", "0", ",", "\n", "metric_prefix", ":", "str", "=", "''", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "output_name", "=", "output_name", ",", "label_name", "=", "label_name", ",", "\n", "weight", "=", "weight", ",", "metric_prefix", "=", "metric_prefix", ")", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "assert", "num_labels", "!=", "0", ",", "\"num_labels required\"", "\n", "self", ".", "_num_labels", "=", "num_labels", "\n", "self", ".", "ce_loss", "=", "DynamicBCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "pos_weight", "=", "pos_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.BinaryCrossEntropyBowLoss.forward": [[281, 316], ["loss._label_to_bow", "torch.sum().float", "torch.mean", "loss.BinaryCrossEntropyBowLoss.BinaryCrossEntropyBowLoss.ce_loss", "torch.sum().float", "torch.sum", "torch.mean", "torch.ones", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss._label_to_bow", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.mean", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.mean"], ["", "def", "forward", "(", "self", ",", "output", ":", "pt", ".", "Tensor", ",", "label", ":", "pt", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        pred: (batch_size, num_vocab) probabilities.\n        labels: (batch_size, target_length) words.\n        \"\"\"", "\n", "nvs_pred", "=", "output", "\n", "\n", "bow", "=", "_label_to_bow", "(", "label", ",", "self", ".", "_num_labels", ")", "\n", "\n", "# Set automatically using positive and negative counts", "\n", "num_positive", "=", "pt", ".", "sum", "(", "bow", ")", ".", "float", "(", ")", "\n", "num_total", "=", "bow", ".", "shape", "[", "0", "]", "*", "bow", ".", "shape", "[", "1", "]", "\n", "num_negative", "=", "num_total", "-", "num_positive", "\n", "pos_weight", "=", "self", ".", "pos_weight", "*", "num_negative", "/", "num_positive", "\n", "\n", "# instead of normalizing 1/num_labels, as done by the ce block, we want to also ", "\n", "# normalize by the virtual positive counts implied by the pos_weight", "\n", "# Everything is one per sentence, so we get the average positive cases", "\n", "# convert it to the additional (therefore pos_weight-1) implied counts", "\n", "# and renormalize", "\n", "avg_pos_count", "=", "pt", ".", "mean", "(", "pt", ".", "sum", "(", "bow", ",", "dim", "=", "1", ")", ".", "float", "(", ")", ")", "\n", "implied_pos_count", "=", "avg_pos_count", "*", "(", "pos_weight", "-", "1", ")", "\n", "scale", "=", "1.", "/", "(", "self", ".", "_num_labels", "+", "implied_pos_count", ")", "\n", "\n", "# shape: (batch_size, vocab_size)", "\n", "loss", "=", "self", ".", "ce_loss", "(", "nvs_pred", ",", "bow", ",", "pos_weight", ")", "\n", "\n", "# shape: (batch_size,)", "\n", "loss", "=", "pt", ".", "sum", "(", "loss", ",", "1", ")", "*", "scale", "\n", "\n", "# Remove the batch dimension", "\n", "# (1,)", "\n", "ce", "=", "pt", ".", "mean", "(", "loss", ")", "*", "self", ".", "weight", "\n", "\n", "return", "ce", ",", "pt", ".", "ones", "(", "1", ",", "device", "=", "ce", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.BinaryCrossEntropyBowLoss.create_metric": [[317, 319], ["loss.PerplexityMetric"], "methods", ["None"], ["", "def", "create_metric", "(", "self", ")", "->", "'LossMetric'", ":", "\n", "        ", "return", "PerplexityMetric", "(", "prefix", "=", "self", ".", "_metric_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.__init__": [[323, 325], ["loss.LossMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "prefix", ":", "str", "=", "''", ",", "name", ":", "str", "=", "C", ".", "PERPLEXITY", ",", "short_name", ":", "str", "=", "C", ".", "PERPLEXITY_SHORT_NAME", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "prefix", "=", "prefix", ",", "name", "=", "name", ",", "short_name", "=", "short_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.update": [[326, 329], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "batch_cross_entropy", ":", "float", ",", "batch_num_valid", ":", "float", ")", ":", "\n", "        ", "self", ".", "_sum", "+=", "batch_cross_entropy", "\n", "self", ".", "_num_inst", "+=", "batch_num_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get": [[330, 332], ["math.exp", "loss.LossMetric.get"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "math", ".", "exp", "(", "super", "(", ")", ".", "get", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PoissonLoss.__init__": [[341, 347], ["loss.Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "\n", "name", ":", "str", "=", "f'{C.LENRATIO_NAME}_{C.LINK_POISSON}'", ",", "\n", "weight", ":", "float", "=", "1.0", ",", "\n", "output_name", ":", "str", "=", "C", ".", "LENRATIO_NAME", ",", "\n", "label_name", ":", "str", "=", "C", ".", "LENRATIO_LABEL_NAME", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "output_name", "=", "output_name", ",", "label_name", "=", "label_name", ",", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PoissonLoss.forward": [[348, 362], ["torch.ones_like().sum", "torch.log", "torch.ones_like", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.DataStatistics.log"], ["", "def", "forward", "(", "self", ",", "length_predictions", ":", "pt", ".", "Tensor", ",", "labels", ":", "pt", ".", "Tensor", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "pt", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Returns Poisson loss and output given data and expected integers as labels.\n\n        :param length_predictions: Length predictions. Shape: (batch_size,).\n        :param labels: Targets. Shape: (batch_size,).\n        :return: Poisson loss of length predictions of the batch, and number of samples (batch size).\n        \"\"\"", "\n", "# (batch_size,)", "\n", "loss", "=", "length_predictions", "-", "labels", "*", "pt", ".", "log", "(", "pt", ".", "clamp", "(", "length_predictions", ",", "min", "=", "1e-10", ")", ")", "\n", "# (1,)", "\n", "loss", "=", "(", "loss", "*", "self", ".", "weight", ")", ".", "sum", "(", ")", "\n", "num_samples", "=", "pt", ".", "ones_like", "(", "length_predictions", ")", ".", "sum", "(", ")", "\n", "return", "loss", ",", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PoissonLoss.create_metric": [[363, 365], ["loss.LossMetric"], "methods", ["None"], ["", "def", "create_metric", "(", "self", ")", "->", "'LossMetric'", ":", "\n", "        ", "return", "LossMetric", "(", "name", "=", "C", ".", "LENRATIO_MSE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.MSELoss.__init__": [[373, 379], ["loss.Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "\n", "name", ":", "str", "=", "C", ".", "LENRATIO_NAME", "+", "\"_\"", "+", "C", ".", "LINK_NORMAL", ",", "\n", "weight", ":", "float", "=", "1.0", ",", "\n", "output_name", ":", "str", "=", "C", ".", "LENRATIO_NAME", ",", "\n", "label_name", ":", "str", "=", "C", ".", "LENRATIO_LABEL_NAME", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "output_name", "=", "output_name", ",", "label_name", "=", "label_name", ",", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.MSELoss.forward": [[380, 394], ["loss.sum.sum.sum", "torch.ones_like().sum", "torch.square", "torch.ones_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "length_predictions", ":", "pt", ".", "Tensor", ",", "labels", ":", "pt", ".", "Tensor", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "pt", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Returns MSE loss.\n\n        :param length_predictions: Length predictions. Shape: (batch_size,).\n        :param labels: Targets. Shape: (batch_size,).\n        :return: MSE loss of length predictions of the batch.\n        \"\"\"", "\n", "# (batch_size,)", "\n", "loss", "=", "(", "self", ".", "weight", "/", "2", ")", "*", "pt", ".", "square", "(", "length_predictions", "-", "labels", ")", "\n", "# (1,)", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "num_samples", "=", "pt", ".", "ones_like", "(", "length_predictions", ")", ".", "sum", "(", ")", "\n", "return", "loss", ",", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.MSELoss.create_metric": [[395, 397], ["loss.LossMetric"], "methods", ["None"], ["", "def", "create_metric", "(", "self", ")", "->", "'LossMetric'", ":", "\n", "        ", "return", "LossMetric", "(", "name", "=", "C", ".", "LENRATIO_MSE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss._label_to_bow": [[252, 257], ["torch.zeros", "label.long", "torch.arange"], "function", ["None"], ["", "", "@", "pt", ".", "jit", ".", "script", "\n", "def", "_label_to_bow", "(", "label", ":", "pt", ".", "Tensor", ",", "num_labels", ":", "int", ")", ":", "\n", "    ", "bow", "=", "pt", ".", "zeros", "(", "label", ".", "shape", "[", "0", "]", ",", "num_labels", ",", "device", "=", "label", ".", "device", ")", "\n", "bow", "[", "pt", ".", "arange", "(", "0", ",", "label", ".", "shape", "[", "0", "]", ",", "dtype", "=", "pt", ".", "int64", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "label", ".", "long", "(", ")", "]", "=", "1.", "\n", "return", "bow", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_digits_file": [[37, 59], ["random.Random", "open", "open", "range", "range", "random.Random.shuffle", "all_digits.append", "all_digits.append", "print", "print", "random.Random.choice", "sockeye.TOKEN_SEPARATOR.join", "digits.sort", "sockeye.TOKEN_SEPARATOR.join", "range", "random.Random.randint"], "function", ["None"], ["chunked_list", "=", "list", "(", "utils", ".", "chunks", "(", "some_list", ",", "chunk_size", ")", ")", "\n", "assert", "chunked_list", "==", "expected", "\n", "\n", "\n", "", "def", "test_check_condition_true", "(", ")", ":", "\n", "    ", "utils", ".", "check_condition", "(", "1", "==", "1", ",", "\"Nice\"", ")", "\n", "\n", "\n", "", "def", "test_check_condition_false", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "utils", ".", "SockeyeError", ")", "as", "e", ":", "\n", "        ", "utils", ".", "check_condition", "(", "1", "==", "2", ",", "\"Wrong\"", ")", "\n", "", "assert", "\"Wrong\"", "==", "str", "(", "e", ".", "value", ")", "\n", "\n", "\n", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"version_string,expected_version\"", ",", "[", "(", "\"1.0.3\"", ",", "(", "\"1\"", ",", "\"0\"", ",", "\"3\"", ")", ")", ",", "\n", "(", "\"1.0.2.3\"", ",", "(", "\"1\"", ",", "\"0\"", ",", "\"2.3\"", ")", ")", "]", ")", "\n", "def", "test_parse_version", "(", "version_string", ",", "expected_version", ")", ":", "\n", "    ", "assert", "expected_version", "==", "utils", ".", "parse_version", "(", "version_string", ")", "\n", "\n", "\n", "", "def", "test_check_version_disregards_minor", "(", ")", ":", "\n", "    ", "release", ",", "major", ",", "minor", "=", "utils", ".", "parse_version", "(", "__version__", ")", "\n", "other_minor_version", "=", "\"%s.%s.%d\"", "%", "(", "release", ",", "major", ",", "int", "(", "minor", ")", "+", "1", ")", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_json_input_file_with_tgt_prefix": [[61, 103], ["random.Random", "open", "open", "open", "enumerate", "zip", "tgt_digits.split", "sockeye.TOKEN_SEPARATOR.join", "print", "open", "open", "stdigits[].strip", "stdigits[].strip", "len", "random.Random.choice", "random.Random.choice", "range", "json.dumps", "sf.strip", "tf.strip().split", "len", "len", "tf.strip", "range", "range", "len", "len", "sockeye.TOKEN_SEPARATOR.join", "sockeye.TOKEN_SEPARATOR.join"], "function", ["None"], ["\n", "\n", "", "def", "_get_later_major_version", "(", ")", ":", "\n", "    ", "release", ",", "major", ",", "minor", "=", "utils", ".", "parse_version", "(", "__version__", ")", "\n", "return", "\"%s.%d.%s\"", "%", "(", "release", ",", "int", "(", "major", ")", "+", "1", ",", "minor", ")", "\n", "\n", "\n", "", "def", "test_check_version_checks_major", "(", ")", ":", "\n", "    ", "version", "=", "_get_later_major_version", "(", ")", "\n", "with", "pytest", ".", "raises", "(", "utils", ".", "SockeyeError", ")", "as", "e", ":", "\n", "        ", "utils", ".", "check_version", "(", "version", ")", "\n", "", "assert", "\"Given major version (%s) does not match major code version (%s)\"", "%", "(", "version", ",", "__version__", ")", "==", "str", "(", "e", ".", "value", ")", "\n", "\n", "\n", "", "def", "test_version_matches_changelog", "(", ")", ":", "\n", "    ", "\"\"\"\n    Tests whether the last version mentioned in CHANGELOG.md matches the sockeye version (sockeye/__init__.py).\n    \"\"\"", "\n", "pattern", "=", "re", ".", "compile", "(", "r'''## \\[([0-9.]+)\\]'''", ")", "\n", "changelog", "=", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", ")", ",", "\"CHANGELOG.md\"", ")", ")", ".", "read", "(", ")", "\n", "last_changelog_version", "=", "pattern", ".", "findall", "(", "changelog", ")", "[", "0", "]", "\n", "assert", "__version__", "==", "last_changelog_version", "\n", "\n", "\n", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"samples,expected_mean, expected_variance\"", ",", "\n", "[", "\n", "(", "[", "1", ",", "2", "]", ",", "1.5", ",", "0.25", ")", ",", "\n", "(", "[", "4.", ",", "100.", ",", "12.", ",", "-", "3", ",", "1000", ",", "1.", ",", "-", "200", "]", ",", "130.57142857142858", ",", "132975.38775510204", ")", ",", "\n", "]", ")", "\n", "def", "test_online_mean_and_variance", "(", "samples", ",", "expected_mean", ",", "expected_variance", ")", ":", "\n", "    ", "mean_and_variance", "=", "utils", ".", "OnlineMeanAndVariance", "(", ")", "\n", "for", "sample", "in", "samples", ":", "\n", "        ", "mean_and_variance", ".", "update", "(", "sample", ")", "\n", "\n", "", "assert", "np", ".", "isclose", "(", "mean_and_variance", ".", "mean", ",", "expected_mean", ")", "\n", "assert", "np", ".", "isclose", "(", "mean_and_variance", ".", "variance", ",", "expected_variance", ")", "\n", "\n", "\n", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"samples,expected_mean\"", ",", "\n", "[", "\n", "(", "[", "]", ",", "0.", ")", ",", "\n", "(", "[", "5.", "]", ",", "5.", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_low_high_factors": [[105, 114], ["open", "open", "map", "print", "line.rstrip().split", "sockeye.TOKEN_SEPARATOR.join", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.map"], ["    ", "mean_and_variance", "=", "utils", ".", "OnlineMeanAndVariance", "(", ")", "\n", "for", "sample", "in", "samples", ":", "\n", "        ", "mean_and_variance", ".", "update", "(", "sample", ")", "\n", "\n", "", "assert", "np", ".", "isclose", "(", "mean_and_variance", ".", "mean", ",", "expected_mean", ")", "\n", "assert", "math", ".", "isnan", "(", "mean_and_variance", ".", "variance", ")", "\n", "\n", "\n", "", "get_tokens_tests", "=", "[", "(", "\"this is a line  \\n\"", ",", "[", "\"this\"", ",", "\"is\"", ",", "\"a\"", ",", "\"line\"", "]", ")", ",", "\n", "(", "\" a  \\tb \\r \\n\"", ",", "[", "\"a\"", ",", "\"b\"", "]", ")", "]", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_odd_even_factors": [[116, 125], ["open", "open", "map", "print", "line.rstrip().split", "sockeye.TOKEN_SEPARATOR.join", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.map"], ["\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"line, expected_tokens\"", ",", "get_tokens_tests", ")", "\n", "def", "test_get_tokens", "(", "line", ",", "expected_tokens", ")", ":", "\n", "    ", "tokens", "=", "list", "(", "utils", ".", "get_tokens", "(", "line", ")", ")", "\n", "assert", "tokens", "==", "expected_tokens", "\n", "\n", "\n", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"samples, sample_means, expected_mean\"", ",", "\n", "[", "\n", "(", "[", "[", "1.23", ",", "0.474", ",", "9.516", "]", ",", "[", "10.219", ",", "5.31", ",", "9", ",", "21.90", ",", "98", "]", "]", ",", "[", "3.74", ",", "28.8858", "]", ",", "19.456125", ")", ",", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_fast_align_lex": [[127, 136], ["open", "print"], "function", ["None"], ["(", "[", "[", "]", ",", "[", "-", "1", "]", ",", "[", "0", ",", "1", "]", "]", ",", "[", "None", ",", "-", "1.0", ",", "0.5", "]", ",", "0.0", ")", ",", "\n", "(", "[", "[", "]", ",", "[", "1.99", "]", ",", "[", "]", ",", "[", "]", ",", "[", "0", "]", "]", ",", "[", "None", ",", "1.99", ",", "None", ",", "None", ",", "0.0", "]", ",", "0.995", ")", ",", "\n", "(", "[", "[", "2.45", ",", "-", "5.21", ",", "-", "20", ",", "81.92", ",", "41", ",", "1", ",", "0.1123", ",", "1.2", "]", ",", "[", "]", "]", ",", "[", "12.8090375", ",", "None", "]", ",", "12.8090375", ")", "\n", "]", ")", "\n", "def", "test_combine_means", "(", "samples", ",", "sample_means", ",", "expected_mean", ")", ":", "\n", "    ", "num_sents", "=", "[", "len", "(", "l", ")", "for", "l", "in", "samples", "]", "\n", "combined_mean", "=", "utils", ".", "combine_means", "(", "sample_means", ",", "num_sents", ")", "\n", "assert", "np", ".", "isclose", "(", "expected_mean", ",", "combined_mean", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.tmp_digits_dataset": [[141, 213], ["tempfile.TemporaryDirectory", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "test_utils.generate_digits_file", "test_utils.generate_digits_file", "test_utils.generate_digits_file", "test_utils.generate_json_input_file_with_tgt_prefix", "range", "range", "test_utils.generate_low_high_factors", "test_utils.generate_low_high_factors", "test_utils.generate_low_high_factors", "data[].append", "data[].append", "data[].append", "test_utils.generate_odd_even_factors", "test_utils.generate_odd_even_factors", "test_utils.generate_odd_even_factors", "data[].append", "data[].append", "data[].append"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_digits_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_digits_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_digits_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_json_input_file_with_tgt_prefix", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_low_high_factors", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_low_high_factors", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_low_high_factors", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_odd_even_factors", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_odd_even_factors", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_odd_even_factors"], ["[", "7.697077367416805", ",", "35.00081956983293", ",", "None", ",", "0.0", ",", "None", ",", "0.5", "]", ",", "\n", "26.886761799748015", ")", ",", "\n", "(", "[", "[", "1.23", ",", "0.474", ",", "9.516", "]", ",", "[", "10.219", ",", "5.31", ",", "9", ",", "21.90", ",", "98", "]", "]", ",", "\n", "[", "3.74", ",", "28.8858", "]", ",", "[", "4.095893553304333", ",", "35.00081956983293", "]", ",", "30.33397330732285", ")", ",", "\n", "(", "[", "[", "-", "10", ",", "10", ",", "4.3", ",", "-", "4.3", "]", ",", "[", "102", "]", ",", "[", "0", ",", "1", "]", "]", ",", "\n", "[", "0.0", ",", "102.0", ",", "0.5", "]", ",", "[", "7.697077367416805", ",", "0.0", ",", "0.5", "]", ",", "36.10779213772596", ")", ",", "\n", "(", "[", "[", "]", ",", "[", "-", "1", "]", ",", "[", "0", ",", "1", "]", "]", ",", "[", "None", ",", "-", "1.0", ",", "0.5", "]", ",", "[", "None", ",", "0.0", ",", "0.5", "]", ",", "0.816496580927726", ")", ",", "\n", "(", "[", "[", "]", ",", "[", "1.99", "]", ",", "[", "]", ",", "[", "]", ",", "[", "0", "]", "]", ",", "[", "None", ",", "1.99", ",", "None", ",", "None", ",", "0.0", "]", ",", "[", "None", ",", "0.0", ",", "None", ",", "None", ",", "0.0", "]", ",", "\n", "0.995", ")", ",", "\n", "(", "[", "[", "2.45", ",", "-", "5.21", ",", "-", "20", ",", "81.92", ",", "41", ",", "1", ",", "0.1123", ",", "1.2", "]", ",", "[", "]", "]", ",", "[", "12.8090375", ",", "None", "]", ",", "\n", "[", "30.64904989938259", ",", "None", "]", ",", "\n", "30.64904989938259", ")", "\n", "]", ")", "\n", "def", "test_combine_stds", "(", "samples", ",", "sample_means", ",", "sample_stds", ",", "expected_std", ")", ":", "\n", "    ", "num_sents", "=", "[", "len", "(", "l", ")", "for", "l", "in", "samples", "]", "\n", "combined_std", "=", "utils", ".", "combine_stds", "(", "sample_stds", ",", "sample_means", ",", "num_sents", ")", "\n", "assert", "np", ".", "isclose", "(", "expected_std", ",", "combined_std", ")", "\n", "\n", "\n", "", "def", "test_average_tensors", "(", ")", ":", "\n", "    ", "n", "=", "4", "\n", "shape", "=", "(", "12", ",", "14", ")", "\n", "arrays", "=", "[", "pt", ".", "rand", "(", "12", ",", "14", ")", "for", "_", "in", "range", "(", "n", ")", "]", "\n", "expected_average", "=", "pt", ".", "zeros", "(", "*", "shape", ")", "\n", "for", "array", "in", "arrays", ":", "\n", "        ", "expected_average", "+=", "array", "\n", "", "expected_average", "/=", "4", "\n", "\n", "pt", ".", "testing", ".", "assert_allclose", "(", "utils", ".", "average_tensors", "(", "arrays", ")", ",", "expected_average", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "utils", ".", "SockeyeError", ")", "as", "e", ":", "\n", "        ", "other_shape", "=", "(", "12", ",", "13", ")", "\n", "utils", ".", "average_tensors", "(", "arrays", "+", "[", "pt", ".", "zeros", "(", "*", "other_shape", ")", "]", ")", "\n", "", "assert", "\"tensor shapes do not match\"", "==", "str", "(", "e", ".", "value", ")", "\n", "\n", "\n", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"new, old, metric, result\"", ",", "\n", "[", "(", "0", ",", "0", ",", "C", ".", "PERPLEXITY", ",", "False", ")", ",", "\n", "(", "1.0", ",", "1.0", ",", "C", ".", "PERPLEXITY", ",", "False", ")", ",", "\n", "(", "1.0", ",", "0.9", ",", "C", ".", "PERPLEXITY", ",", "False", ")", ",", "\n", "(", "0.99", ",", "1.0", ",", "C", ".", "PERPLEXITY", ",", "True", ")", ",", "\n", "(", "C", ".", "LARGE_POSITIVE_VALUE", ",", "np", ".", "inf", ",", "C", ".", "PERPLEXITY", ",", "True", ")", ",", "\n", "(", "0", ",", "0", ",", "C", ".", "BLEU", ",", "False", ")", ",", "\n", "(", "1.0", ",", "1.0", ",", "C", ".", "BLEU", ",", "False", ")", ",", "\n", "(", "1.0", ",", "0.9", ",", "C", ".", "BLEU", ",", "True", ")", ",", "\n", "(", "0.99", ",", "1.0", ",", "C", ".", "BLEU", ",", "False", ")", ",", "\n", "(", "C", ".", "LARGE_POSITIVE_VALUE", ",", "np", ".", "inf", ",", "C", ".", "BLEU", ",", "False", ")", ",", "\n", "]", ")", "\n", "def", "test_metric_value_is_better", "(", "new", ",", "old", ",", "metric", ",", "result", ")", ":", "\n", "    ", "assert", "utils", ".", "metric_value_is_better", "(", "new", ",", "old", ",", "metric", ")", "==", "result", "\n", "\n", "\n", "", "def", "_touch_file", "(", "fname", ",", "compressed", ":", "bool", ",", "empty", ":", "bool", ")", "->", "str", ":", "\n", "    ", "if", "compressed", ":", "\n", "        ", "open_func", "=", "gzip", ".", "open", "\n", "", "else", ":", "\n", "        ", "open_func", "=", "open", "\n", "", "with", "open_func", "(", "fname", ",", "encoding", "=", "'utf8'", ",", "mode", "=", "'wt'", ")", "as", "f", ":", "\n", "        ", "if", "not", "empty", ":", "\n", "            ", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "print", "(", "str", "(", "i", ")", ",", "file", "=", "f", ")", "\n", "", "", "", "return", "fname", "\n", "\n", "\n", "", "def", "test_is_gzip_file", "(", ")", ":", "\n", "    ", "with", "TemporaryDirectory", "(", ")", "as", "temp", ":", "\n", "        ", "fname", "=", "os", ".", "path", ".", "join", "(", "temp", ",", "'test'", ")", "\n", "assert", "utils", ".", "is_gzip_file", "(", "_touch_file", "(", "fname", ",", "compressed", "=", "True", ",", "empty", "=", "True", ")", ")", "\n", "assert", "utils", ".", "is_gzip_file", "(", "_touch_file", "(", "fname", ",", "compressed", "=", "True", ",", "empty", "=", "False", ")", ")", "\n", "assert", "not", "utils", ".", "is_gzip_file", "(", "_touch_file", "(", "fname", ",", "compressed", "=", "False", ",", "empty", "=", "True", ")", ")", "\n", "assert", "not", "utils", ".", "is_gzip_file", "(", "_touch_file", "(", "fname", ",", "compressed", "=", "False", ",", "empty", "=", "False", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.run_train_translate": [[246, 387], ["os.path.join", "os.path.join", "os.path.join", "test_utils.generate_fast_align_lex", "os.path.join", "os.path.join", "os.path.join", "logger.info", "test_utils.collect_translate_output_and_scores", "logger.info", "test_utils.collect_translate_output_and_scores", "os.path.join", "logger.info", "logger.info", "logger.info", "LEXICON_CREATE_PARAMS_COMMON.format", "unittest.mock.patch.object", "sockeye.lexicon.main", "sockeye.lexicon.main", "sockeye.lexicon.main", "sockeye.lexicon.main", "sockeye.lexicon.main", "TRANSLATE_PARAMS_COMMON.format", "unittest.mock.patch.object", "sockeye.translate.main", "sockeye.translate.main", "sockeye.translate.main", "sockeye.translate.main", "sockeye.translate.main", "TRANSLATE_PARAMS_COMMON.format", "TRANSLATE_WITH_FACTORS_COMMON.format", "unittest.mock.patch.object", "sockeye.translate.main", "sockeye.translate.main", "sockeye.translate.main", "sockeye.translate.main", "sockeye.translate.main", "open", "open", "len", "len", "len", "len", "PREPARE_DATA_COMMON.format", "TRAIN_WITH_SOURCE_FACTORS_COMMON.format", "TRAIN_WITH_TARGET_FACTORS_COMMON.format", "unittest.mock.patch.object", "sockeye.prepare_data.main", "sockeye.prepare_data.main", "sockeye.prepare_data.main", "sockeye.prepare_data.main", "sockeye.prepare_data.main", "TRAIN_PARAMS_PREPARED_DATA_COMMON.format", "DEV_WITH_SOURCE_FACTORS_COMMON.format", "DEV_WITH_TARGET_FACTORS_COMMON.format", "unittest.mock.patch.object", "sockeye.train.main", "sockeye.train.main", "sockeye.train.main", "sockeye.train.main", "sockeye.train.main", "TRAIN_PARAMS_COMMON.format", "TRAIN_WITH_SOURCE_FACTORS_COMMON.format", "TRAIN_WITH_TARGET_FACTORS_COMMON.format", "DEV_WITH_SOURCE_FACTORS_COMMON.format", "DEV_WITH_TARGET_FACTORS_COMMON.format", "unittest.mock.patch.object", "sockeye.train.main", "sockeye.train.main", "sockeye.train.main", "sockeye.train.main", "sockeye.train.main", "params.split", "params.split", "params.split", "line.strip", "line.strip", "prepare_params.split", "params.split", "params.split"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.generate_fast_align_lex", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.collect_translate_output_and_scores", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.collect_translate_output_and_scores", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main"], ["with", "TemporaryDirectory", "(", "prefix", "=", "\"metric_file\"", ")", "as", "work_dir", ":", "\n", "        ", "metric_path", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "\"metrics\"", ")", "\n", "utils", ".", "write_metrics_file", "(", "expected_metrics", ",", "metric_path", ")", "\n", "read_metrics", "=", "utils", ".", "read_metrics_file", "(", "metric_path", ")", "\n", "\n", "", "assert", "len", "(", "read_metrics", ")", "==", "len", "(", "expected_metrics", ")", "\n", "assert", "expected_metrics", "==", "read_metrics", "\n", "\n", "\n", "", "def", "test_adjust_first_step_masking", "(", ")", ":", "\n", "    ", "first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "0.", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", "]", ")", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "1", ",", "2", "]", ",", "[", "1", ",", "0", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "1", ",", "0", "]", ",", "[", "2", ",", "3", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "2", ",", "3", ",", "4", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "2", ",", "3", ",", "4", ",", "5", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "0.", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "0.", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", "]", "]", ")", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "2", ",", "3", ",", "4", ",", "5", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "3", ",", "0", ",", "0", "]", ",", "[", "2", ",", "3", ",", "4", ",", "5", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "3", ",", "0", ",", "0", "]", ",", "[", "2", ",", "3", ",", "4", ",", "5", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "target_prefix", "=", "pt", ".", "tensor", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "2", ",", "3", ",", "4", ",", "5", "]", "]", ")", "\n", "adjust_first_step_mask", "=", "pt", ".", "tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", ",", "\n", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", "]", "]", ")", "\n", "assert", "pt", ".", "equal", "(", "adjust_first_step_mask", ",", "utils", ".", "adjust_first_step_masking", "(", "target_prefix", ",", "first_step_mask", ")", ")", "==", "True", "\n", "\n", "\n", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"sample, count_type, replace_tokens, expected_seq_len\"", ",", "[", "\n", "# count_seq char", "\n", "(", "\"\u2581Bonob os , \u2581like \u2581humans , \u2581love \u2581to \u2581play \u2581throughout \u2581their \u2581entire \u2581lives . \"", "\n", "\"Parliament Does Not Support Amendment Fre@@ eing Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "C", ".", "SEQ_LEN_IN_CHARACTERS", ",", "\n", "C", ".", "TOKEN_SEGMENTATION_MARKERS", ",", "\n", "106", ")", ",", "\n", "# count_seq token", "\n", "(", "\"\u2581Bonob os , \u2581like \u2581humans , \u2581love \u2581to \u2581play \u2581throughout \u2581their \u2581entire \u2581lives . \"", "\n", "\"Parliament Does Not Support Amendment Fre@@ eing Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "C", ".", "SEQ_LEN_IN_TOKENS", ",", "\n", "C", ".", "TOKEN_SEGMENTATION_MARKERS", ",", "\n", "26", ")", ",", "\n", "# count_seq char without replacing", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.run_translate_restrict": [[389, 429], ["os.path.join", "os.path.join", "test_utils.collect_translate_output_and_scores", "test_utils.collect_translate_output_and_scores", "TRANSLATE_PARAMS_COMMON.format", "TRANSLATE_PARAMS_RESTRICT.format", "unittest.mock.patch.object", "translate_mod.main", "TRANSLATE_PARAMS_COMMON.format", "TRANSLATE_PARAMS_RESTRICT.format", "TRANSLATE_WITH_FACTORS_COMMON.format", "unittest.mock.patch.object", "translate_mod.main", "len", "len", "len", "params.split", "params.split"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.collect_translate_output_and_scores", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.collect_translate_output_and_scores", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main"], ["\"Parliament Does Not Support Amendment Fre@@ eing Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "C", ".", "SEQ_LEN_IN_CHARACTERS", ",", "\n", "\"\"", ",", "\n", "126", ")", "\n", "]", ")", "\n", "def", "test_count_seq_len", "(", "sample", ",", "count_type", ",", "replace_tokens", ",", "expected_seq_len", ")", ":", "\n", "    ", "assert", "utils", ".", "count_seq_len", "(", "sample", ",", "count_type", ",", "replace_tokens", ")", "==", "expected_seq_len", "\n", "\n", "\n", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"hypothesis, hypothesis_score, source, metric, alpha, expected_score\"", ",", "[", "\n", "(", "\"No Liber@@ ation for Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", ",", "\n", "0.377", ",", "\n", "\"El Parlamento no lib@@ era a Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "\"isometric-ratio\"", ",", "\n", "0.7", ",", "\n", "0.4322176470588236", ")", ",", "\n", "(", "\"No Liber@@ ation for Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", ",", "\n", "0.377", ",", "\n", "\"El Parlamento no lib@@ era a Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "\"isometric-diff\"", ",", "\n", "0.7", ",", "\n", "0.2131", ")", ",", "\n", "(", "\"No Liber@@ ation for Ty@@ mo@@ sh@@ en@@ ko by Parliament\"", ",", "\n", "0.377", ",", "\n", "\"El Parlamento no lib@@ era a Ty@@ mo@@ sh@@ en@@ ko\"", ",", "\n", "\"isometric-lc\"", ",", "\n", "0.7", ",", "\n", "19.35483870967742", ")", ",", "\n", "]", ")", "\n", "def", "test_rerank_hypotheses_isometric", "(", "hypothesis", ",", "hypothesis_score", ",", "source", ",", "metric", ",", "alpha", ",", "expected_score", ")", ":", "\n", "    ", "assert", "utils", ".", "compute_isometric_score", "(", "hypothesis", ",", "hypothesis_score", ",", "source", ",", "metric", ",", "alpha", ")", "==", "expected_score", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.test_utils.collect_translate_output_and_scores": [[431, 443], ["logger.debug", "open", "line.strip.strip", "logger.debug", "outputs.append", "json.loads"], "function", ["None"], []], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.embeddings.compute_sims": [[35, 51], ["torch.mm", "pt.mm.fill_diagonal_", "logger.info", "inputs.transpose", "torch.linalg.norm"], "function", ["None"], ["def", "compute_sims", "(", "inputs", ":", "pt", ".", "Tensor", ",", "normalize", ":", "bool", ")", "->", "pt", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Returns a matrix with pair-wise similarity scores between inputs.\n    Similarity score is (normalized) Euclidean distance. 'Similarity with self' is masked\n    to large negative value.\n\n    :param inputs: tensor of inputs.\n    :param normalize: Whether to normalize to unit-length.\n    :return: tensor with pairwise similarities of same shape as inputs.\n    \"\"\"", "\n", "if", "normalize", ":", "\n", "        ", "logger", ".", "info", "(", "\"Normalizing embeddings to unit length\"", ")", "\n", "inputs", "=", "inputs", "/", "pt", ".", "linalg", ".", "norm", "(", "inputs", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "", "sims", "=", "pt", ".", "mm", "(", "inputs", ",", "inputs", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "sims", ".", "fill_diagonal_", "(", "-", "9999999.", ")", "\n", "return", "sims", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.embeddings.nearest_k": [[53, 69], ["torch.topk", "zip", "indices.tolist", "values.tolist"], "function", ["None"], ["", "def", "nearest_k", "(", "similarity_matrix", ":", "pt", ".", "Tensor", ",", "\n", "query_word_id", ":", "int", ",", "\n", "k", ":", "int", ",", "\n", "gamma", ":", "float", "=", "1.0", ")", "->", "Iterable", "[", "Tuple", "[", "int", ",", "float", "]", "]", ":", "\n", "    ", "\"\"\"\n    Returns values and indices of k items with largest similarity.\n\n    :param similarity_matrix: Similarity matrix.\n    :param query_word_id: Query word id.\n    :param k: Number of closest items to retrieve.\n    :param gamma: Parameter to control distribution steepness.\n    :return: List of indices and values of k nearest elements.\n    \"\"\"", "\n", "# pylint: disable=unbalanced-tuple-unpacking", "\n", "values", ",", "indices", "=", "pt", ".", "topk", "(", "(", "similarity_matrix", "[", "query_word_id", "]", "/", "gamma", ")", ".", "softmax", "(", "0", ")", ",", "k", "=", "k", ")", "\n", "return", "zip", "(", "indices", ".", "tolist", "(", ")", ",", "values", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.embeddings.main": [[71, 87], ["log.setup_main_logger", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "embeddings.embeddings"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.setup_main_logger", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.embeddings.embeddings"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n    Command-line tool to inspect model embeddings.\n    \"\"\"", "\n", "setup_main_logger", "(", "file_logging", "=", "False", ")", "\n", "params", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Shows nearest neighbours of input tokens in the embedding space.'", ")", "\n", "params", ".", "add_argument", "(", "'--model'", ",", "'-m'", ",", "required", "=", "True", ",", "\n", "help", "=", "'Model folder to load config from.'", ")", "\n", "params", ".", "add_argument", "(", "'--checkpoint'", ",", "'-c'", ",", "required", "=", "False", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'Optional specific checkpoint to load parameters from. Best params otherwise.'", ")", "\n", "params", ".", "add_argument", "(", "'--side'", ",", "'-s'", ",", "required", "=", "True", ",", "choices", "=", "[", "'source'", ",", "'target'", "]", ",", "help", "=", "'what embeddings to look at'", ")", "\n", "params", ".", "add_argument", "(", "'--norm'", ",", "'-n'", ",", "action", "=", "'store_true'", ",", "help", "=", "'normalize embeddings to unit length'", ")", "\n", "params", ".", "add_argument", "(", "'-k'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'Number of neighbours to print'", ")", "\n", "params", ".", "add_argument", "(", "'--gamma'", ",", "'-g'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'Softmax distribution steepness.'", ")", "\n", "args", "=", "params", ".", "parse_args", "(", ")", "\n", "embeddings", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.embeddings.embeddings": [[89, 130], ["logger.info", "model.load_model", "sockeye_model.eval", "vocab.reverse_vocab", "logger.info", "logger.info", "embeddings.compute_sims", "utils.check_condition", "logger.info", "list", "print", "data_io.tokens2ids", "zip", "print", "torch.device", "len", "utils.get_tokens", "line.rstrip", "print", "embeddings.nearest_k", "enumerate", "len", "print"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.load_model", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.reverse_vocab", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.embeddings.compute_sims", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.tokens2ids", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.embeddings.nearest_k"], ["", "def", "embeddings", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"Arguments: %s\"", ",", "args", ")", "\n", "\n", "sockeye_model", ",", "source_vocabs", ",", "target_vocabs", "=", "model", ".", "load_model", "(", "args", ".", "model", ",", "\n", "checkpoint", "=", "args", ".", "checkpoint", ",", "\n", "device", "=", "pt", ".", "device", "(", "'cpu'", ")", ")", "\n", "sockeye_model", ".", "eval", "(", ")", "\n", "\n", "if", "args", ".", "side", "==", "\"source\"", ":", "\n", "        ", "vocab", "=", "source_vocabs", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "vocab", "=", "target_vocabs", "[", "0", "]", "\n", "", "vocab_inv", "=", "reverse_vocab", "(", "vocab", ")", "\n", "\n", "if", "args", ".", "side", "==", "\"source\"", ":", "\n", "        ", "weights", "=", "sockeye_model", ".", "embedding_source", ".", "embedding", ".", "weight", ".", "data", "\n", "", "else", ":", "\n", "        ", "weights", "=", "sockeye_model", ".", "embedding_target", ".", "embedding", ".", "weight", ".", "data", "\n", "", "logger", ".", "info", "(", "\"Embedding size: %d\"", ",", "weights", ".", "shape", "[", "1", "]", ")", "\n", "\n", "logger", ".", "info", "(", "\"Computing pairwise similarities...\"", ")", "\n", "sims", "=", "compute_sims", "(", "weights", ",", "args", ".", "norm", ")", "\n", "\n", "# weights (vocab, num_target_embed)", "\n", "check_condition", "(", "weights", ".", "shape", "[", "0", "]", "==", "len", "(", "vocab", ")", ",", "\n", "\"vocab and embeddings matrix do not match: %d vs. %d\"", "%", "(", "weights", ".", "shape", "[", "0", "]", ",", "len", "(", "vocab", ")", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Reading from STDin...\"", ")", "\n", "for", "line", "in", "sys", ".", "stdin", ":", "\n", "        ", "tokens", "=", "list", "(", "utils", ".", "get_tokens", "(", "line", ")", ")", "\n", "if", "not", "tokens", ":", "\n", "            ", "continue", "\n", "", "print", "(", "\"Input:\"", ",", "line", ".", "rstrip", "(", ")", ")", "\n", "ids", "=", "tokens2ids", "(", "tokens", ",", "vocab", ")", "\n", "for", "token", ",", "token_id", "in", "zip", "(", "tokens", ",", "ids", ")", ":", "\n", "            ", "token", "=", "C", ".", "UNK_SYMBOL", "if", "token_id", "==", "C", ".", "UNK_ID", "else", "token", "\n", "print", "(", "\"%s id=%d\"", "%", "(", "token", ",", "token_id", ")", ")", "\n", "neighbours", "=", "nearest_k", "(", "sims", ",", "token_id", ",", "args", ".", "k", ",", "args", ".", "gamma", ")", "\n", "for", "i", ",", "(", "neighbour_id", ",", "score", ")", "in", "enumerate", "(", "neighbours", ",", "1", ")", ":", "\n", "                ", "print", "(", "\"  %s id=%d sim=%.4f\"", "%", "(", "vocab_inv", "[", "neighbour_id", "]", ",", "neighbour_id", ",", "score", ")", ")", "\n", "", "", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.scoring.BatchScorer.__init__": [[38, 48], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "scorer", ":", "CandidateScorer", ",", "\n", "score_type", ":", "str", "=", "C", ".", "SCORING_TYPE_DEFAULT", ",", "\n", "constant_length_ratio", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "softmax_temperature", ":", "Optional", "[", "float", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "score_type", "=", "score_type", "\n", "self", ".", "scorer", "=", "scorer", "\n", "self", ".", "constant_length_ratio", "=", "constant_length_ratio", "\n", "assert", "softmax_temperature", "is", "None", ",", "'not implemented'", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.scoring.BatchScorer.forward": [[49, 92], ["logits.log_softmax", "logits.log_softmax.gather().squeeze", "logits.log_softmax.gather().squeeze.masked_fill_().sum", "scoring.BatchScorer.scorer", "torch.cat", "logits.log_softmax.gather", "logits.log_softmax.gather().squeeze.masked_fill_", "factor_logit.log_softmax", "factor_logit.log_softmax.gather().squeeze", "factor_logit.log_softmax.gather().squeeze.masked_fill_().sum", "factor_scores.append", "labels.unsqueeze", "factor_logit.log_softmax.gather", "factor_logit.log_softmax.gather().squeeze.masked_fill_", "factor_label.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "logits", ",", "labels", ",", "\n", "length_ratio", ",", "source_length", ",", "target_length", ",", "\n", "factor_logits_and_labels", ":", "Optional", "[", "List", "[", "Tuple", "[", "pt", ".", "Tensor", ",", "pt", ".", "Tensor", "]", "]", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param logits: Model logits for primary output words. Shape: (batch, length, vocab_size).\n        :param labels: Gold targets. Shape: (batch, length).\n        :param length_ratio: Length Ratios. Shape: (batch,).\n        :param source_length: Source lengths. Shape: (batch,).\n        :param target_length: Target lengths. Shape: (batch,).\n        :param factor_logits_and_labels: List of target factor logits and corresponding labels.\n               Shape: (batch, length, factor_vocab_size).\n        :return: Sequence scores. Shape: (batch,).\n        \"\"\"", "\n", "logprobs", "=", "logits", ".", "log_softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# Select the label log probability", "\n", "# logprobs and scores: (batch_size, target_seq_len)", "\n", "token_scores", "=", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "labels", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "if", "self", ".", "score_type", "==", "C", ".", "SCORING_TYPE_NEGLOGPROB", ":", "\n", "            ", "token_scores", "=", "-", "token_scores", "\n", "\n", "# Mask pad positions, sum, then apply length penalty. Shape: (batch_size, 1)", "\n", "", "scores", "=", "token_scores", ".", "masked_fill_", "(", "labels", "==", "C", ".", "PAD_ID", ",", ".0", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "if", "self", ".", "constant_length_ratio", "is", "not", "None", "and", "self", ".", "constant_length_ratio", ">", "0.0", ":", "\n", "            ", "predicted_output_length", "=", "source_length", "*", "self", ".", "constant_length_ratio", "\n", "", "else", ":", "\n", "            ", "predicted_output_length", "=", "source_length", "*", "length_ratio", "\n", "", "scores", "=", "self", ".", "scorer", "(", "scores", ",", "target_length", ",", "predicted_output_length", ")", "\n", "\n", "if", "factor_logits_and_labels", "is", "not", "None", ":", "\n", "            ", "factor_scores", "=", "[", "]", "# type: List[pt.Tensor]", "\n", "for", "factor_logit", ",", "factor_label", "in", "factor_logits_and_labels", ":", "\n", "                ", "factor_logprobs", "=", "factor_logit", ".", "log_softmax", "(", "dim", "=", "-", "1", ")", "\n", "factor_token_scores", "=", "factor_logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "factor_label", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "if", "self", ".", "score_type", "==", "C", ".", "SCORING_TYPE_NEGLOGPROB", ":", "\n", "                    ", "factor_token_scores", "=", "-", "factor_token_scores", "\n", "", "fs", "=", "factor_token_scores", ".", "masked_fill_", "(", "factor_label", "==", "C", ".", "PAD_ID", ",", ".0", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", "# type: ignore", "\n", "# Note: factor_scores are not normalized by length", "\n", "factor_scores", ".", "append", "(", "fs", ")", "\n", "", "scores", "=", "pt", ".", "cat", "(", "[", "scores", "]", "+", "factor_scores", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.scoring.Scorer.__init__": [[106, 121], ["vocab.reverse_vocab", "vocab.reverse_vocab"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.reverse_vocab", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.reverse_vocab"], ["def", "__init__", "(", "self", ",", "\n", "model", ":", "SockeyeModel", ",", "\n", "batch_scorer", ":", "BatchScorer", ",", "\n", "source_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "target_vocabs", ":", "List", "[", "vocab", ".", "Vocab", "]", ",", "\n", "device", ":", "pt", ".", "device", ")", "->", "None", ":", "\n", "        ", "self", ".", "source_vocab_inv", "=", "vocab", ".", "reverse_vocab", "(", "source_vocabs", "[", "0", "]", ")", "\n", "self", ".", "target_vocab_inv", "=", "vocab", ".", "reverse_vocab", "(", "target_vocabs", "[", "0", "]", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "traced_model", "=", "None", "# type: Optional[pt.jit.ScriptModule]", "\n", "self", ".", "batch_scorer", "=", "batch_scorer", "\n", "self", ".", "traced_batch_scorer", "=", "None", "# type: Optional[pt.jit.ScriptModule]", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "exclude_list", "=", "{", "C", ".", "BOS_ID", ",", "C", ".", "EOS_ID", ",", "C", ".", "PAD_ID", "}", "\n", "self", ".", "num_target_factors", "=", "self", ".", "model", ".", "num_target_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.scoring.Scorer.score_batch": [[122, 149], ["batch.load.load.load", "scoring.Scorer.traced_model", "scoring.Scorer.traced_batch_scorer", "scoring.Scorer.cpu().numpy", "torch.jit.trace", "batch.load.load.labels[].long", "scoring.Scorer.get", "scorer_inputs.append", "logger.debug", "torch.jit.trace", "torch.zeros_like", "scoring.Scorer.cpu", "batch.load.load.labels[].long", "range"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get"], ["", "def", "score_batch", "(", "self", ",", "batch", ":", "data_io", ".", "Batch", ")", ":", "\n", "# TODO: scoring should support multiple devices", "\n", "        ", "batch", "=", "batch", ".", "load", "(", "self", ".", "device", ")", "\n", "\n", "model_inputs", "=", "(", "batch", ".", "source", ",", "batch", ".", "source_length", ",", "batch", ".", "target", ",", "batch", ".", "target_length", ")", "\n", "if", "self", ".", "traced_model", "is", "None", ":", "\n", "            ", "self", ".", "traced_model", "=", "pt", ".", "jit", ".", "trace", "(", "self", ".", "model", ",", "model_inputs", ",", "strict", "=", "False", ")", "\n", "", "outputs", "=", "self", ".", "traced_model", "(", "*", "model_inputs", ")", "# type: Dict[str, pt.Tensor]", "\n", "\n", "scorer_inputs", "=", "[", "outputs", "[", "C", ".", "LOGITS_NAME", "]", ",", "\n", "batch", ".", "labels", "[", "C", ".", "TARGET_LABEL_NAME", "]", ".", "long", "(", ")", ",", "\n", "outputs", ".", "get", "(", "C", ".", "LENRATIO_NAME", ",", "pt", ".", "zeros_like", "(", "batch", ".", "source_length", ")", ")", ",", "\n", "batch", ".", "source_length", ",", "\n", "batch", ".", "target_length", "]", "# type: List[Union[pt.Tensor, List[Tuple[pt.Tensor, pt.Tensor]]]]", "\n", "\n", "if", "self", ".", "num_target_factors", ">", "1", ":", "\n", "            ", "factor_logits_and_labels", "=", "[", "(", "outputs", "[", "C", ".", "FACTOR_LOGITS_NAME", "%", "i", "]", ",", "\n", "batch", ".", "labels", "[", "C", ".", "TARGET_FACTOR_LABEL_NAME", "%", "i", "]", ".", "long", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_target_factors", ")", "]", "\n", "scorer_inputs", ".", "append", "(", "factor_logits_and_labels", ")", "\n", "\n", "", "if", "self", ".", "traced_batch_scorer", "is", "None", ":", "\n", "            ", "logger", ".", "debug", "(", "\"Tracing batch_scorer\"", ")", "\n", "self", ".", "traced_batch_scorer", "=", "pt", ".", "jit", ".", "trace", "(", "self", ".", "batch_scorer", ",", "scorer_inputs", ",", "strict", "=", "False", ")", "\n", "", "scores", "=", "self", ".", "traced_batch_scorer", "(", "*", "scorer_inputs", ")", "# (batch, num_target_factors)", "\n", "\n", "return", "scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.scoring.Scorer.score": [[150, 190], ["torch.inference_mode", "enumerate", "time.time", "scoring.Scorer.score_batch", "enumerate", "logger.info", "logger.info", "time.time", "zip", "source.tolist", "list", "target.tolist", "list", "constants.TOKEN_SEPARATOR.join", "output_handler.handle", "math.ceil", "data_io.ids2tokens", "data_io.ids2tokens", "inference.TranslatorInput", "inference.TranslatorOutput"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.scoring.Scorer.score_batch", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.FactoredStringOutputHandler.handle", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ids2tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ids2tokens"], ["", "@", "pt", ".", "inference_mode", "(", "True", ")", "\n", "def", "score", "(", "self", ",", "score_iter", ":", "data_io", ".", "BaseParallelSampleIter", ",", "output_handler", ":", "OutputHandler", ")", ":", "\n", "        ", "total_time", "=", "0.", "\n", "sentence_no", "=", "0", "\n", "batch_no", "=", "0", "\n", "for", "batch_no", ",", "batch", "in", "enumerate", "(", "score_iter", ",", "1", ")", ":", "\n", "            ", "batch_tic", "=", "time", ".", "time", "(", ")", "\n", "batch_scores", "=", "self", ".", "score_batch", "(", "batch", ")", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "batch_tic", "\n", "total_time", "+=", "batch_time", "\n", "for", "sentno", ",", "(", "source", ",", "target", ",", "scores", ")", "in", "enumerate", "(", "zip", "(", "batch", ".", "source", "[", ":", ",", ":", ",", "0", "]", ",", "\n", "batch", ".", "target", "[", ":", ",", ":", ",", "0", "]", ",", "\n", "batch_scores", ")", ",", "1", ")", ":", "\n", "                ", "sentence_no", "+=", "1", "\n", "\n", "# Transform arguments in preparation for printing", "\n", "source_ids", "=", "source", ".", "tolist", "(", ")", "\n", "source_tokens", "=", "list", "(", "data_io", ".", "ids2tokens", "(", "source_ids", ",", "self", ".", "source_vocab_inv", ",", "self", ".", "exclude_list", ")", ")", "\n", "target_ids", "=", "target", ".", "tolist", "(", ")", "\n", "target_tokens", "=", "list", "(", "data_io", ".", "ids2tokens", "(", "target_ids", ",", "self", ".", "target_vocab_inv", ",", "self", ".", "exclude_list", ")", ")", "\n", "target_string", "=", "C", ".", "TOKEN_SEPARATOR", ".", "join", "(", "target_tokens", ")", "\n", "\n", "# Report a score of -inf for invalid sentence pairs (empty source and/or target)", "\n", "if", "source", "[", "0", "]", "==", "C", ".", "PAD_ID", "or", "target", "[", "0", "]", "==", "C", ".", "PAD_ID", ":", "\n", "                    ", "scores", "=", "[", "-", "np", ".", "inf", "]", "*", "self", ".", "num_target_factors", "\n", "\n", "# Output handling routines require us to make use of inference classes.", "\n", "", "output_handler", ".", "handle", "(", "inference", ".", "TranslatorInput", "(", "sentence_no", ",", "source_tokens", ")", ",", "\n", "inference", ".", "TranslatorOutput", "(", "sentence_no", ",", "target_string", ",", "\n", "target_tokens", ",", "\n", "score", "=", "scores", "[", "0", "]", ",", "\n", "factor_scores", "=", "scores", "[", "1", ":", "]", ")", ",", "\n", "batch_time", ")", "\n", "\n", "", "", "if", "sentence_no", "!=", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Processed %d lines in %d batches. Total time: %.4f, sec/sent: %.4f, sent/sec: %.4f\"", ",", "\n", "sentence_no", ",", "math", ".", "ceil", "(", "sentence_no", "/", "batch_no", ")", ",", "total_time", ",", "\n", "total_time", "/", "sentence_no", ",", "sentence_no", "/", "total_time", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Processed 0 lines.\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.__init__": [[95, 160], ["super().__init__", "copy.deepcopy", "logger.info", "model.SockeyeModel._get_embeddings", "encoder.Embedding", "encoder.Embedding", "encoder.get_transformer_encoder", "decoder.get_decoder", "layers.OutputLayer", "torch.nn.ModuleList", "enumerate", "model.SockeyeModel.cast", "model.SockeyeModel._cache_wrapper", "nvs.NeuralVocabSelection", "torch.jit.script", "torch.nn.Linear", "model.SockeyeModel.factor_output_layers.append", "utils.check_condition", "layers.LengthRatio", "model.SockeyeModel.decoder.get_num_hidden", "model.SockeyeModel.decoder.get_num_hidden", "model.SockeyeModel.encoder.get_num_hidden"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel._get_embeddings", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.encoder.get_transformer_encoder", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.get_decoder", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.cast", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel._cache_wrapper", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.TransformerDecoder.get_num_hidden", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.TransformerDecoder.get_num_hidden", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.TransformerDecoder.get_num_hidden"], ["def", "__init__", "(", "self", ",", "\n", "config", ":", "ModelConfig", ",", "\n", "inference_only", ":", "bool", "=", "False", ",", "\n", "train_decoder_only", ":", "bool", "=", "False", ",", "\n", "forward_pass_cache_size", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "self", ".", "inference_only", "=", "inference_only", "\n", "logger", ".", "info", "(", "\"%s\"", ",", "self", ".", "config", ")", "\n", "self", ".", "train_decoder_only", "=", "train_decoder_only", "\n", "self", ".", "forward_pass_cache_size", "=", "forward_pass_cache_size", "\n", "self", ".", "embed_and_encode", "=", "self", ".", "_embed_and_encode", "\n", "if", "self", ".", "forward_pass_cache_size", ">", "0", ":", "\n", "            ", "self", ".", "embed_and_encode", "=", "self", ".", "_cache_wrapper", "(", "self", ".", "_embed_and_encode", ")", "\n", "\n", "# source & target embeddings, potentially shared/tied", "\n", "", "source_embedding", ",", "target_embedding", ",", "output_weight", "=", "self", ".", "_get_embeddings", "(", ")", "\n", "\n", "self", ".", "embedding_source", "=", "encoder", ".", "Embedding", "(", "config", ".", "config_embed_source", ",", "embedding", "=", "source_embedding", ")", "\n", "self", ".", "embedding_target", "=", "encoder", ".", "Embedding", "(", "config", ".", "config_embed_target", ",", "embedding", "=", "target_embedding", ")", "\n", "\n", "# encoder & decoder first (to know the decoder depth)", "\n", "self", ".", "encoder", "=", "encoder", ".", "get_transformer_encoder", "(", "self", ".", "config", ".", "config_encoder", ",", "\n", "inference_only", "=", "inference_only", ")", "\n", "self", ".", "decoder", "=", "decoder", ".", "get_decoder", "(", "self", ".", "config", ".", "config_decoder", ",", "inference_only", "=", "inference_only", ")", "\n", "self", ".", "nvs", "=", "None", "\n", "if", "self", ".", "config", ".", "neural_vocab_selection", ":", "\n", "            ", "self", ".", "nvs", "=", "nvs", ".", "NeuralVocabSelection", "(", "\n", "model_size", "=", "self", ".", "config", ".", "config_encoder", ".", "model_size", ",", "\n", "vocab_target_size", "=", "self", ".", "config", ".", "vocab_target_size", ",", "\n", "model_type", "=", "self", ".", "config", ".", "neural_vocab_selection", "\n", ")", "\n", "\n", "", "self", ".", "output_layer", "=", "layers", ".", "OutputLayer", "(", "hidden_size", "=", "self", ".", "decoder", ".", "get_num_hidden", "(", ")", ",", "\n", "vocab_size", "=", "self", ".", "config", ".", "vocab_target_size", ",", "\n", "weight", "=", "output_weight", ")", "\n", "if", "self", ".", "inference_only", ":", "\n", "# Running this layer scripted with a newly initialized model can", "\n", "# cause an overflow error.", "\n", "            ", "self", ".", "output_layer", "=", "pt", ".", "jit", ".", "script", "(", "self", ".", "output_layer", ")", "\n", "\n", "", "self", ".", "factor_output_layers", "=", "pt", ".", "nn", ".", "ModuleList", "(", ")", "\n", "# Optional target factor output layers", "\n", "for", "i", ",", "factor_config", "in", "enumerate", "(", "self", ".", "target_factor_configs", ",", "1", ")", ":", "\n", "# Each target stream has its own, independent output layer", "\n", "# TODO also consider weight tying with target factor input embeddings", "\n", "            ", "output_layer", "=", "pt", ".", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "decoder", ".", "get_num_hidden", "(", ")", ",", "\n", "out_features", "=", "factor_config", ".", "vocab_size", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "factor_output_layers", ".", "append", "(", "output_layer", ")", "\n", "", "self", ".", "factor_vocab_size", "=", "factor_config", ".", "vocab_size", "if", "self", ".", "target_factor_configs", "else", "None", "\n", "\n", "self", ".", "length_ratio", "=", "None", "# type: Optional[layers.LengthRatio]", "\n", "if", "self", ".", "config", ".", "config_length_task", "is", "not", "None", ":", "\n", "            ", "utils", ".", "check_condition", "(", "self", ".", "config", ".", "config_length_task", ".", "weight", ">", "0.0", ",", "\n", "'Auxiliary length task requested, but its loss weight is zero'", ")", "\n", "self", ".", "length_ratio", "=", "layers", ".", "LengthRatio", "(", "hidden_size", "=", "self", ".", "encoder", ".", "get_num_hidden", "(", ")", ",", "\n", "num_layers", "=", "self", ".", "config", ".", "config_length_task", ".", "num_layers", ")", "\n", "", "self", ".", "dtype", "=", "pt", ".", "float32", "\n", "self", ".", "cast", "(", "config", ".", "dtype", ")", "\n", "\n", "# traced components (for inference)", "\n", "self", ".", "traced_embedding_source", "=", "None", "# type: Optional[pt.jit.ScriptModule]", "\n", "self", ".", "traced_encoder", "=", "None", "# type: Optional[pt.jit.ScriptModule]", "\n", "self", ".", "traced_decode_step", "=", "None", "# type: Optional[pt.jit.ScriptModule]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.cast": [[161, 173], ["model.SockeyeModel.half", "logger.info", "torch.quantization.quantize_dynamic"], "methods", ["None"], ["", "def", "cast", "(", "self", ",", "dtype", ":", "str", ")", ":", "\n", "        ", "if", "dtype", "==", "C", ".", "DTYPE_FP16", ":", "\n", "            ", "self", ".", "half", "(", ")", "\n", "self", ".", "dtype", "=", "pt", ".", "float16", "\n", "", "elif", "dtype", "==", "C", ".", "DTYPE_INT8", ":", "\n", "            ", "logger", ".", "info", "(", "\"Dynamic quantization to int8 for (fused) Linear layers\"", ")", "\n", "# TODO: figure out int8 quantization of OutputLayer, supporting weight tying & vocabulary selection", "\n", "quant_mapping", "=", "{", "pt", ".", "nn", ".", "Linear", ":", "pt", ".", "nn", ".", "quantized", ".", "dynamic", ".", "Linear", "}", "\n", "pt", ".", "quantization", ".", "quantize_dynamic", "(", "self", ",", "{", "pt", ".", "nn", ".", "Linear", "}", ",", "dtype", "=", "pt", ".", "qint8", ",", "inplace", "=", "self", ".", "inference_only", ",", "\n", "mapping", "=", "quant_mapping", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dtype", "=", "pt", ".", "float32", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.state_structure": [[174, 176], ["model.SockeyeModel.decoder.state_structure"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.state_structure"], ["", "", "def", "state_structure", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "decoder", ".", "state_structure", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.encode": [[177, 194], ["model.SockeyeModel.traced_embedding_source", "model.SockeyeModel.traced_encoder", "logger.debug", "torch.jit.trace", "logger.debug", "torch.jit.trace"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "inputs", ":", "pt", ".", "Tensor", ",", "valid_length", ":", "pt", ".", "Tensor", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "pt", ".", "Tensor", ",", "pt", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Encodes the input sequence.\n\n        :param inputs: Source input data. Shape: (batch_size, length, num_source_factors).\n        :param valid_length: Optional Tensor of sequence lengths within this batch. Shape: (batch_size,)\n        :return: Encoder outputs, encoded output lengths, attention mask\n        \"\"\"", "\n", "if", "self", ".", "traced_embedding_source", "is", "None", ":", "\n", "            ", "logger", ".", "debug", "(", "\"Tracing embedding_source\"", ")", "\n", "self", ".", "traced_embedding_source", "=", "pt", ".", "jit", ".", "trace", "(", "self", ".", "embedding_source", ",", "inputs", ")", "\n", "", "source_embed", "=", "self", ".", "traced_embedding_source", "(", "inputs", ")", "\n", "if", "self", ".", "traced_encoder", "is", "None", ":", "\n", "            ", "logger", ".", "debug", "(", "\"Tracing encoder\"", ")", "\n", "self", ".", "traced_encoder", "=", "pt", ".", "jit", ".", "trace", "(", "self", ".", "encoder", ",", "(", "source_embed", ",", "valid_length", ")", ")", "\n", "", "source_encoded", ",", "source_encoded_length", ",", "att_mask", "=", "self", ".", "traced_encoder", "(", "source_embed", ",", "valid_length", ")", "\n", "return", "source_encoded", ",", "source_encoded_length", ",", "att_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.encode_and_initialize": [[195, 222], ["model.SockeyeModel.encode", "model.SockeyeModel.predict_output_length", "model.SockeyeModel.decoder.init_state_from_encoder", "torch.sigmoid", "model.SockeyeModel.nvs"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.encode", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.predict_output_length", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.TransformerDecoder.init_state_from_encoder"], ["", "def", "encode_and_initialize", "(", "self", ",", "inputs", ":", "pt", ".", "Tensor", ",", "valid_length", ":", "pt", ".", "Tensor", ",", "\n", "constant_length_ratio", ":", "float", "=", "0.0", ")", "->", "Tuple", "[", "List", "[", "pt", ".", "Tensor", "]", ",", "pt", ".", "Tensor", ",", "\n", "Optional", "[", "pt", ".", "Tensor", "]", "]", ":", "\n", "        ", "\"\"\"\n        Encodes the input sequence and initializes decoder states (and predicted output lengths if available).\n        Used for inference/decoding.\n\n        :param inputs: Source input data. Shape: (batch_size, length, num_source_factors).\n        :param valid_length: Tensor of sequence lengths within this batch. Shape: (batch_size,)\n        :param constant_length_ratio: Constant length ratio\n        :return: Initial states for the decoder, predicted output length of shape (batch_size,), 0 if not available.\n                 Returns the neural vocabulary selection model prediction if enabled, None otherwise.\n        \"\"\"", "\n", "\n", "# Encode input. Shape: (batch, length, num_hidden), (batch,)", "\n", "source_encoded", ",", "source_encoded_lengths", ",", "att_mask", "=", "self", ".", "encode", "(", "inputs", ",", "valid_length", "=", "valid_length", ")", "\n", "\n", "predicted_output_length", "=", "self", ".", "predict_output_length", "(", "source_encoded", ",", "\n", "source_encoded_lengths", ",", "\n", "constant_length_ratio", ")", "\n", "# Decoder init states", "\n", "states", "=", "self", ".", "decoder", ".", "init_state_from_encoder", "(", "source_encoded", ",", "source_encoded_lengths", ")", "\n", "nvs_pred", "=", "None", "\n", "if", "self", ".", "nvs", "is", "not", "None", ":", "\n", "            ", "nvs_pred", "=", "pt", ".", "sigmoid", "(", "self", ".", "nvs", "(", "source_encoded", ",", "source_encoded_lengths", ",", "att_mask", ")", ")", "\n", "\n", "", "return", "states", ",", "predicted_output_length", ",", "nvs_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel._embed_and_encode": [[223, 248], ["model.SockeyeModel.embedding_source", "model.SockeyeModel.embedding_target", "model.SockeyeModel.encoder", "model.SockeyeModel.decoder.init_state_from_encoder", "model.SockeyeModel.nvs", "source_encoded.detach"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.TransformerDecoder.init_state_from_encoder"], ["", "def", "_embed_and_encode", "(", "self", ",", "\n", "source", ":", "pt", ".", "Tensor", ",", "source_length", ":", "pt", ".", "Tensor", ",", "\n", "target", ":", "pt", ".", "Tensor", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "pt", ".", "Tensor", ",", "pt", ".", "Tensor", ",", "List", "[", "pt", ".", "Tensor", "]", ",", "\n", "Optional", "[", "pt", ".", "Tensor", "]", "]", ":", "\n", "        ", "\"\"\"\n        Encode the input sequence, embed the target sequence, and initialize the decoder.\n        Used for training.\n\n        :param source: Source input data.\n        :param source_length: Length of source inputs.\n        :param target: Target input data.\n        :return: encoder outputs and lengths, target embeddings, decoder initial states, attention mask and neural\n                 vocab selection prediction (if present, otherwise None).\n        \"\"\"", "\n", "source_embed", "=", "self", ".", "embedding_source", "(", "source", ")", "\n", "target_embed", "=", "self", ".", "embedding_target", "(", "target", ")", "\n", "source_encoded", ",", "source_encoded_length", ",", "att_mask", "=", "self", ".", "encoder", "(", "source_embed", ",", "source_length", ")", "\n", "states", "=", "self", ".", "decoder", ".", "init_state_from_encoder", "(", "source_encoded", ",", "source_encoded_length", ",", "target_embed", ")", "\n", "nvs", "=", "None", "\n", "if", "self", ".", "nvs", "is", "not", "None", ":", "\n", "            ", "source_encoded_for_nvs", "=", "source_encoded", "\n", "if", "self", ".", "config", ".", "neural_vocab_selection_block_loss", ":", "\n", "                ", "source_encoded_for_nvs", "=", "source_encoded", ".", "detach", "(", ")", "\n", "", "nvs", "=", "self", ".", "nvs", "(", "source_encoded_for_nvs", ",", "source_length", ",", "att_mask", ")", "\n", "", "return", "source_encoded", ",", "source_encoded_length", ",", "target_embed", ",", "states", ",", "nvs", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.decode_step": [[249, 279], ["model.SockeyeModel.traced_decode_step", "decode_step_inputs.append", "logger.debug", "model._DecodeStep", "torch.jit.trace"], "methods", ["None"], ["", "def", "decode_step", "(", "self", ",", "\n", "step_input", ":", "pt", ".", "Tensor", ",", "\n", "states", ":", "List", "[", "pt", ".", "Tensor", "]", ",", "\n", "vocab_slice_ids", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "List", "[", "pt", ".", "Tensor", "]", ",", "List", "[", "pt", ".", "Tensor", "]", "]", ":", "\n", "        ", "\"\"\"\n        One step decoding of the translation model.\n\n        :param step_input: Input to a single decoder step. Shape: (batch_size, num_target_factors).\n        :param states: List of previous or initial model states. Shape of state tensors and length of states list\n                       determined by self.decoder.state_structure().\n        :param vocab_slice_ids: Optional list of vocabulary ids to use\n                                for reduced matrix multiplication at the output layer.\n\n        :return: logits, list of new model states, other target factor logits.\n        \"\"\"", "\n", "decode_step_inputs", "=", "[", "step_input", ",", "states", "]", "\n", "if", "vocab_slice_ids", "is", "not", "None", ":", "\n", "            ", "decode_step_inputs", ".", "append", "(", "vocab_slice_ids", ")", "\n", "", "if", "self", ".", "traced_decode_step", "is", "None", ":", "\n", "            ", "logger", ".", "debug", "(", "\"Tracing decode step\"", ")", "\n", "decode_step_module", "=", "_DecodeStep", "(", "self", ".", "embedding_target", ",", "\n", "self", ".", "decoder", ",", "\n", "self", ".", "output_layer", ",", "\n", "self", ".", "factor_output_layers", ")", "\n", "self", ".", "traced_decode_step", "=", "pt", ".", "jit", ".", "trace", "(", "decode_step_module", ",", "decode_step_inputs", ")", "\n", "# the traced module returns a flat list of tensors", "\n", "", "decode_step_outputs", "=", "self", ".", "traced_decode_step", "(", "*", "decode_step_inputs", ")", "\n", "step_output", ",", "*", "target_factor_outputs", "=", "decode_step_outputs", "[", ":", "self", ".", "num_target_factors", "]", "\n", "new_states", "=", "decode_step_outputs", "[", "self", ".", "num_target_factors", ":", "]", "\n", "return", "step_output", ",", "new_states", ",", "target_factor_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.forward": [[280, 307], ["model.SockeyeModel.decoder.decode_seq", "dict", "model.SockeyeModel.output_layer", "enumerate", "model.SockeyeModel.embed_and_encode", "factor_output_layer", "model.SockeyeModel.length_ratio", "torch.no_grad", "utils.no_context"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.decoder.TransformerDecoder.decode_seq", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.no_context"], ["", "def", "forward", "(", "self", ",", "source", ",", "source_length", ",", "target", ",", "target_length", ")", ":", "# pylint: disable=arguments-differ", "\n", "# When updating only the decoder (specified directly or implied by", "\n", "# caching the encoder and embedding forward passes), turn off autograd", "\n", "# for the encoder and embeddings to save memory.", "\n", "        ", "with", "pt", ".", "no_grad", "(", ")", "if", "self", ".", "train_decoder_only", "or", "self", ".", "forward_pass_cache_size", ">", "0", "else", "utils", ".", "no_context", "(", ")", ":", "\n", "            ", "source_encoded", ",", "source_encoded_length", ",", "target_embed", ",", "states", ",", "nvs_prediction", "=", "self", ".", "embed_and_encode", "(", "\n", "source", ",", "\n", "source_length", ",", "\n", "target", ")", "\n", "\n", "", "target", "=", "self", ".", "decoder", ".", "decode_seq", "(", "target_embed", ",", "states", "=", "states", ")", "\n", "\n", "forward_output", "=", "dict", "(", ")", "\n", "\n", "forward_output", "[", "C", ".", "LOGITS_NAME", "]", "=", "self", ".", "output_layer", "(", "target", ",", "None", ")", "\n", "\n", "for", "i", ",", "factor_output_layer", "in", "enumerate", "(", "self", ".", "factor_output_layers", ",", "1", ")", ":", "\n", "            ", "forward_output", "[", "C", ".", "FACTOR_LOGITS_NAME", "%", "i", "]", "=", "factor_output_layer", "(", "target", ")", "\n", "\n", "", "if", "self", ".", "length_ratio", "is", "not", "None", ":", "\n", "# predicted_length_ratios: (batch_size,)", "\n", "            ", "forward_output", "[", "C", ".", "LENRATIO_NAME", "]", "=", "self", ".", "length_ratio", "(", "source_encoded", ",", "source_encoded_length", ")", "\n", "\n", "", "if", "nvs_prediction", "is", "not", "None", ":", "\n", "            ", "forward_output", "[", "C", ".", "NVS_PRED_NAME", "]", "=", "nvs_prediction", "\n", "\n", "", "return", "forward_output", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.predict_output_length": [[308, 324], ["model.SockeyeModel.length_ratio", "torch.zeros_like"], "methods", ["None"], ["", "def", "predict_output_length", "(", "self", ",", "\n", "source_encoded", ":", "pt", ".", "Tensor", ",", "\n", "source_encoded_length", ":", "pt", ".", "Tensor", ",", "\n", "constant_length_ratio", ":", "float", "=", "0.0", ")", "->", "pt", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "length_ratio", "is", "not", "None", ":", "\n", "# predicted_length_ratios: (batch_size,)", "\n", "            ", "predicted_length_ratio", "=", "self", ".", "length_ratio", "(", "source_encoded", ",", "source_encoded_length", ")", "\n", "predicted_output_length", "=", "predicted_length_ratio", "*", "source_encoded_length", "\n", "", "elif", "constant_length_ratio", ">", "0.0", ":", "\n", "# (batch,)", "\n", "            ", "predicted_output_length", "=", "source_encoded_length", "*", "constant_length_ratio", "\n", "", "else", ":", "\n", "# (batch,)", "\n", "            ", "predicted_output_length", "=", "pt", ".", "zeros_like", "(", "source_encoded_length", ")", "\n", "\n", "", "return", "predicted_output_length", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.save_config": [[325, 334], ["os.path.join", "model.SockeyeModel.config.save", "logger.info"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save"], ["", "def", "save_config", "(", "self", ",", "folder", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Saves model configuration to <folder>/config\n\n        :param folder: Destination folder.\n        \"\"\"", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "C", ".", "CONFIG_NAME", ")", "\n", "self", ".", "config", ".", "save", "(", "fname", ")", "\n", "logger", ".", "info", "(", "'Saved model config to \"%s\"'", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.load_config": [[335, 346], ["ModelConfig.load", "logger.info", "typing.cast"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.cast"], ["", "@", "staticmethod", "\n", "def", "load_config", "(", "fname", ":", "str", ")", "->", "ModelConfig", ":", "\n", "        ", "\"\"\"\n        Loads model configuration.\n\n        :param fname: Path to load model configuration from.\n        :return: Model configuration.\n        \"\"\"", "\n", "config", "=", "ModelConfig", ".", "load", "(", "fname", ")", "\n", "logger", ".", "info", "(", "'Loaded model config from \"%s\"'", ",", "fname", ")", "\n", "return", "cast", "(", "ModelConfig", ",", "config", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.save_parameters": [[347, 366], ["model.SockeyeModel.apply", "torch.save", "model.SockeyeModel.apply", "logging.info", "model.SockeyeModel.state_dict().items", "model.SockeyeModel.state_dict"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save"], ["", "def", "save_parameters", "(", "self", ",", "fname", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Saves model parameters to file. Also see\n        See https://pytorch.org/tutorials/beginner/saving_loading_models.html#saving-loading-model-for-inference\n\n        :param fname: Path to save parameters to.\n        \"\"\"", "\n", "self", ".", "apply", "(", "layers", ".", "interleave_kv", ")", "\n", "# Sockeye follows the convention of using the \"traced\" prefix for", "\n", "# modules that are created at runtime by tracing other modules.", "\n", "# Ex: traced_encoder = trace(encoder, ...)", "\n", "# Traced modules use the same parameters as the original versions so we", "\n", "# filter their names from the state dictionary to avoid saving redundant", "\n", "# copies of their parameters. Copies can also cause errors at loadtime", "\n", "# if the traced modules do not yet exist.", "\n", "filtered_state_dict", "=", "{", "name", ":", "param", "for", "(", "name", ",", "param", ")", "in", "self", ".", "state_dict", "(", ")", ".", "items", "(", ")", "if", "'traced'", "not", "in", "name", "}", "\n", "pt", ".", "save", "(", "filtered_state_dict", ",", "fname", ")", "\n", "self", ".", "apply", "(", "layers", ".", "separate_kv", ")", "\n", "logging", ".", "info", "(", "'Saved params/state_dict to \"%s\"'", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.load_parameters": [[367, 410], ["utils.check_condition", "model.SockeyeModel.load_state_dict", "logger.info", "os.path.exists", "torch.load", "utils.check_condition", "utils.check_condition", "model.SockeyeModel.apply", "logger.error", "torch.device"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["", "def", "load_parameters", "(", "self", ",", "\n", "filename", ":", "str", ",", "\n", "device", ":", "Optional", "[", "pt", ".", "device", "]", "=", "None", ",", "\n", "allow_missing", ":", "bool", "=", "False", ",", "\n", "ignore_extra", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Loads parameters from file previously saved by `save_parameters`.\n        See https://pytorch.org/tutorials/beginner/saving_loading_models.html#saving-loading-model-for-inference\n\n        :param filename: Path to parameter file\n        :param device: Torch device to load parameters to\n        :param allow_missing: Whether to silently skip loading parameters not represents in the file. Default: False.\n        :param ignore_extra: Whether to silently ignore parameters from the file that are not part of this Module.\n                             Default: False.\n        \"\"\"", "\n", "\n", "utils", ".", "check_condition", "(", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "\"No model parameter file found under %s. \"", "\n", "\"This is either not a model directory or the first training \"", "\n", "\"checkpoint has not happened yet.\"", "%", "filename", ")", "\n", "try", ":", "\n", "            ", "state_dict", "=", "pt", ".", "load", "(", "filename", ",", "map_location", "=", "device", ")", "\n", "", "except", "_pickle", ".", "UnpicklingError", "as", "e", ":", "\n", "            ", "logger", ".", "error", "(", "f\"Could not load from '{filename}'. Is this a MXNet parameter file? Please convert first.\"", ")", "\n", "raise", "e", "\n", "", "missing", ",", "unexpected", "=", "self", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "# Earlier versions of Sockeye may have saved parameters for traced", "\n", "# modules. These parameters can be safely ignored.", "\n", "unexpected", "=", "[", "key", "for", "key", "in", "unexpected", "if", "'traced'", "not", "in", "key", "]", "\n", "# We also ignore cases where traced modules exist and appear to be", "\n", "# missing parameters. These modules actually use the same parameters as", "\n", "# their original non-traced versions so there are no separate parameters", "\n", "# to load.", "\n", "missing", "=", "[", "key", "for", "key", "in", "missing", "if", "'traced'", "not", "in", "key", "]", "\n", "if", "not", "allow_missing", ":", "\n", "            ", "utils", ".", "check_condition", "(", "not", "missing", ",", "f\"missing keys: {missing}\"", ")", "\n", "", "if", "not", "ignore_extra", ":", "\n", "            ", "utils", ".", "check_condition", "(", "not", "unexpected", ",", "f\"extra keys: {unexpected}\"", ")", "\n", "# Models are saved with interleaved key-value params. If the current", "\n", "# model is in training mode, separate the loaded params to match the", "\n", "# format used during training.", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "apply", "(", "layers", ".", "separate_kv", ")", "\n", "", "logger", ".", "info", "(", "'Loaded params from \"%s\" to \"%s\"'", ",", "filename", ",", "pt", ".", "device", "(", "'cpu'", ")", "if", "device", "is", "None", "else", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.set_parameters": [[411, 436], ["dict", "model.SockeyeModel.named_parameters", "dict.items", "ValueError", "new_params.keys", "model_params[].size", "new_params[].size", "model_params[].size", "new_params[].size"], "methods", ["None"], ["", "def", "set_parameters", "(", "self", ",", "\n", "new_params", ":", "Dict", "[", "str", ",", "pt", ".", "nn", ".", "Parameter", "]", ",", "\n", "allow_missing", ":", "bool", "=", "True", ",", "\n", "ignore_extra", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Update model params with new values from a dictionary.\n\n        :param new_params: Dictionary containing the new parameters.\n        :param allow_missing: Whether to skip setting parameters not represented in the dictionary.\n        :param ignore_extra: Whether to ignore parameters from new_params that are not present in this model.\n        \"\"\"", "\n", "model_params", "=", "dict", "(", "self", ".", "named_parameters", "(", ")", ")", "\n", "if", "not", "allow_missing", ":", "\n", "            ", "for", "name", ",", "_", "in", "model_params", ".", "items", "(", ")", ":", "\n", "                ", "assert", "name", "in", "new_params", ".", "keys", "(", ")", ",", "\"Parameter '%s' is missing in new_params dictionary. \"", "\"Set allow_missing=True to ignore missing parameters.\"", "%", "name", "\n", "", "", "for", "name", "in", "new_params", ":", "\n", "            ", "if", "not", "ignore_extra", "and", "name", "not", "in", "model_params", ":", "\n", "                ", "raise", "ValueError", "(", "\"Parameter '%s' in new_params dictionary is not present in ParameterDict. \"", "\n", "\"Set ignore_extra=True to ignore.\"", "%", "name", ")", "\n", "", "if", "name", "in", "model_params", ":", "\n", "                ", "assert", "model_params", "[", "name", "]", ".", "size", "(", ")", "==", "new_params", "[", "name", "]", ".", "size", "(", ")", ",", "\"Parameter '%s' has shape '%s' in the model but shape '%s' in the new_params dictionary.\"", "%", "(", "name", ",", "model_params", "[", "name", "]", ".", "size", "(", ")", ",", "new_params", "[", "name", "]", ".", "size", "(", ")", ")", "\n", "model_params", "[", "name", "]", ".", "data", "[", ":", "]", "=", "new_params", "[", "name", "]", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.save_version": [[437, 447], ["os.path.join", "open", "out.write"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "save_version", "(", "folder", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Saves version to <folder>/version.\n\n        :param folder: Destination folder.\n        \"\"\"", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "C", ".", "VERSION_NAME", ")", "\n", "with", "open", "(", "fname", ",", "\"w\"", ")", "as", "out", ":", "\n", "            ", "out", ".", "write", "(", "__version__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel._get_embeddings": [[448, 476], ["torch.nn.Embedding", "torch.nn.Embedding"], "methods", ["None"], ["", "", "def", "_get_embeddings", "(", "self", ")", "->", "Tuple", "[", "pt", ".", "nn", ".", "Embedding", ",", "pt", ".", "nn", ".", "Embedding", ",", "Optional", "[", "pt", ".", "nn", ".", "Parameter", "]", "]", ":", "\n", "        ", "\"\"\"\n        Returns embeddings for source, target, and output layer. Handles sharing and weight tying.\n        \"\"\"", "\n", "share_embed", "=", "C", ".", "WEIGHT_TYING_SRC", "in", "self", ".", "config", ".", "weight_tying_type", "and", "C", ".", "WEIGHT_TYING_TRG", "in", "self", ".", "config", ".", "weight_tying_type", "\n", "\n", "tie_weights", "=", "C", ".", "WEIGHT_TYING_SOFTMAX", "in", "self", ".", "config", ".", "weight_tying_type", "\n", "\n", "source_grad_sparse", "=", "self", ".", "config", ".", "config_embed_source", ".", "allow_sparse_grad", "and", "not", "tie_weights", "\n", "source_embedding", "=", "pt", ".", "nn", ".", "Embedding", "(", "self", ".", "config", ".", "config_embed_source", ".", "vocab_size", ",", "\n", "self", ".", "config", ".", "config_embed_source", ".", "num_embed", ",", "\n", "sparse", "=", "source_grad_sparse", ")", "\n", "\n", "if", "share_embed", ":", "\n", "            ", "target_embedding", "=", "source_embedding", "\n", "", "else", ":", "\n", "            ", "target_grad_sparse", "=", "self", ".", "config", ".", "config_embed_target", ".", "allow_sparse_grad", "and", "not", "tie_weights", "\n", "target_embedding", "=", "pt", ".", "nn", ".", "Embedding", "(", "self", ".", "config", ".", "config_embed_target", ".", "vocab_size", ",", "\n", "self", ".", "config", ".", "config_embed_target", ".", "num_embed", ",", "\n", "sparse", "=", "target_grad_sparse", ")", "\n", "\n", "", "if", "tie_weights", ":", "\n", "            ", "output_weight", "=", "target_embedding", ".", "weight", "# type: ignore", "\n", "", "else", ":", "\n", "            ", "output_weight", "=", "None", "# will be created when instantiating the OutputLayer", "\n", "\n", "", "return", "source_embedding", ",", "target_embedding", ",", "output_weight", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.num_source_factors": [[477, 481], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_source_factors", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\" Returns the number of source factors of this model (at least 1). \"\"\"", "\n", "return", "self", ".", "config", ".", "config_data", ".", "num_source_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.num_target_factors": [[482, 486], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_target_factors", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\" Returns the number of target factors of this model (at least 1). \"\"\"", "\n", "return", "self", ".", "config", ".", "config_data", ".", "num_target_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.target_factor_configs": [[487, 494], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "target_factor_configs", "(", "self", ")", "->", "List", "[", "FactorConfig", "]", ":", "\n", "        ", "\"\"\" Returns the factor configs for target factors. \"\"\"", "\n", "factor_configs", "=", "[", "]", "# type: List[FactorConfig]", "\n", "if", "self", ".", "config", ".", "config_embed_target", ".", "factor_configs", ":", "\n", "            ", "factor_configs", "=", "self", ".", "config", ".", "config_embed_target", ".", "factor_configs", "\n", "", "return", "factor_configs", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.training_max_observed_len_source": [[495, 499], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "training_max_observed_len_source", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\" The maximum sequence length on the source side observed during training. This includes the <eos> token. \"\"\"", "\n", "return", "self", ".", "config", ".", "config_data", ".", "data_statistics", ".", "max_observed_len_source", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.training_max_observed_len_target": [[500, 504], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "training_max_observed_len_target", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\" The maximum sequence length on the target side observed during training. This includes the <bos> token. \"\"\"", "\n", "return", "self", ".", "config", ".", "config_data", ".", "data_statistics", ".", "max_observed_len_target", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.max_supported_len_source": [[505, 509], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_supported_len_source", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\" The maximum supported source length. This includes the <eos> token. \"\"\"", "\n", "return", "self", ".", "config", ".", "config_data", ".", "max_seq_len_source", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.max_supported_len_target": [[510, 514], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_supported_len_target", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\" The maximum supported target length. This includes the <bos> token. \"\"\"", "\n", "return", "self", ".", "config", ".", "config_data", ".", "max_seq_len_target", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.length_ratio_mean": [[515, 518], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "length_ratio_mean", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "config", ".", "config_data", ".", "data_statistics", ".", "length_ratio_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.length_ratio_std": [[519, 522], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "length_ratio_std", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "config", ".", "config_data", ".", "data_statistics", ".", "length_ratio_std", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.output_layer_vocab_size": [[523, 526], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_layer_vocab_size", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "output_layer", ".", "vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel._cache_wrapper": [[527, 533], ["functools.lru_cache", "class_func"], "methods", ["None"], ["", "def", "_cache_wrapper", "(", "self", ",", "class_func", ")", ":", "\n", "        ", "@", "lru_cache", "(", "maxsize", "=", "self", ".", "forward_pass_cache_size", ")", "\n", "def", "cache_func", "(", "*", "args", ")", ":", "\n", "            ", "return", "class_func", "(", "*", "args", ")", "\n", "\n", "", "return", "cache_func", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model._DecodeStep.__init__": [[542, 553], ["super().__init__", "torch.jit.script", "bool"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "\n", "embedding_target", ":", "encoder", ".", "Embedding", ",", "\n", "decoder", ":", "decoder", ".", "Decoder", ",", "\n", "output_layer", ":", "layers", ".", "OutputLayer", ",", "\n", "factor_output_layers", ":", "pt", ".", "nn", ".", "ModuleList", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding_target", "=", "embedding_target", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "output_layer", "=", "pt", ".", "jit", ".", "script", "(", "output_layer", ")", "\n", "self", ".", "factor_output_layers", "=", "factor_output_layers", "\n", "self", ".", "has_target_factors", "=", "bool", "(", "factor_output_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model._DecodeStep.forward": [[554, 572], ["model._DecodeStep.embedding_target", "model._DecodeStep.decoder", "decoder_out.squeeze.squeeze.squeeze", "model._DecodeStep.output_layer", "step_input.unsqueeze", "fol"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "step_input", ",", "\n", "states", ":", "List", "[", "pt", ".", "Tensor", "]", ",", "\n", "vocab_slice_ids", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "List", "[", "pt", ".", "Tensor", "]", ":", "\n", "        ", "target_embed", "=", "self", ".", "embedding_target", "(", "step_input", ".", "unsqueeze", "(", "1", ")", ")", "\n", "decoder_out", ",", "new_states", "=", "self", ".", "decoder", "(", "target_embed", ",", "states", ")", "\n", "decoder_out", "=", "decoder_out", ".", "squeeze", "(", "1", ")", "\n", "\n", "# step_output: (batch_size, target_vocab_size or vocab_slice_ids)", "\n", "step_output", "=", "self", ".", "output_layer", "(", "decoder_out", ",", "vocab_slice_ids", ")", "\n", "\n", "# return values are collected in a flat list due to constraints in mixed return types in traced modules", "\n", "# (can only by tensors, or lists of tensors or dicts of tensors, but no mix of them).", "\n", "outputs", "=", "[", "step_output", "]", "\n", "if", "self", ".", "has_target_factors", ":", "\n", "            ", "outputs", "+=", "[", "fol", "(", "decoder_out", ")", "for", "fol", "in", "self", ".", "factor_output_layers", "]", "\n", "", "outputs", "+=", "new_states", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.initialize_parameters": [[574, 611], ["isinstance", "isinstance", "torch.nn.init.xavier_uniform_", "isinstance", "torch.nn.init.zeros_", "torch.nn.init.uniform_", "isinstance", "isinstance", "torch.nn.init.ones_", "torch.nn.init.zeros_", "torch.nn.init.uniform_", "isinstance", "torch.nn.init.xavier_uniform"], "function", ["None"], ["", "", "def", "initialize_parameters", "(", "module", ":", "pt", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    Can be applied to a SockeyeModel (via `model.apply(initialize_parameters)`)\n    to initialize the parameters of a PyTorch SockeyeModel.\n    For reproducibility, set pt.random.manual_seed.\n\n    This implementation follows the default MXNet initialization scheme:\n    - linear/feed-forward weights: Xavier(uniform, avg, magnitude=3.0)\n    - biases: 0.0\n    - layer norm gamma / weight: 1.0\n    - layer norm beta / bias: 0.0\n    - embedding parameters: uniform(-0.07, 0.07) [matches MXNet's default initialization]\n\n    MXNet computes the uniform bounds for Xavier initialization as follows:\n      sqrt(3 / ((fan_in + fan_out) / 2))\n    PyTorch computes the uniform bounds for Xavier initialization as follows:\n      (sqrt(2/(fan_in + fan_out)) * gain) * sqrt(3)\n      where gain is set to 1.0 by default\n    Both are equivalent.\n    For some background on the equivalence of mx.init.Xavier and pt.nn.init.xavier_uniform_, see\n    https://jamesmccaffrey.wordpress.com/2020/11/20/the-gain-parameter-\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "pt", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "layers", ".", "OutputLayer", ")", ":", "\n", "        ", "pt", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ",", "gain", "=", "1", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "pt", ".", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "pt", ".", "nn", ".", "Embedding", ")", ":", "\n", "        ", "pt", ".", "nn", ".", "init", ".", "uniform_", "(", "module", ".", "weight", ",", "-", "0.07", ",", "0.07", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "pt", ".", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "if", "module", ".", "elementwise_affine", ":", "\n", "            ", "pt", ".", "nn", ".", "init", ".", "ones_", "(", "module", ".", "weight", ")", "\n", "pt", ".", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "layers", ".", "LHUC", ")", ":", "\n", "        ", "pt", ".", "nn", ".", "init", ".", "uniform_", "(", "module", ".", "weight", ",", "a", "=", "0.1", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "layers", ".", "PositionalEmbeddings", ")", ":", "\n", "        ", "if", "module", ".", "weight_type", "==", "C", ".", "LEARNED_POSITIONAL_EMBEDDING", ":", "\n", "            ", "pt", ".", "nn", ".", "init", ".", "xavier_uniform", "(", "module", ".", "weight", ",", "gain", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.load_model": [[613, 684], ["vocab.load_source_vocabs", "vocab.load_target_vocabs", "utils.load_version", "logger.info", "utils.check_version", "model.SockeyeModel.load_config", "model.SockeyeModel", "model.SockeyeModel.load_parameters", "SockeyeModel.to", "utils.check_condition", "utils.check_condition", "os.path.join", "os.path.join", "logger.info", "SockeyeModel.load_config.disable_dropout", "os.path.join", "os.path.join", "SockeyeModel.eval", "logger.info", "model.SockeyeModel.cast", "logger.info", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_source_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_target_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.load_version", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_version", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.load_config", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.load_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.config.Config.disable_dropout", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.cast"], ["", "", "", "def", "load_model", "(", "model_folder", ":", "str", ",", "\n", "device", ":", "pt", ".", "device", ",", "\n", "dtype", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "checkpoint", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "inference_only", ":", "bool", "=", "False", ",", "\n", "train_decoder_only", ":", "bool", "=", "False", ",", "\n", "allow_missing", ":", "bool", "=", "False", ",", "\n", "set_grad_req_null", ":", "bool", "=", "True", ",", "\n", "forward_pass_cache_size", ":", "int", "=", "0", ")", "->", "Tuple", "[", "SockeyeModel", ",", "List", "[", "vocab", ".", "Vocab", "]", ",", "List", "[", "vocab", ".", "Vocab", "]", "]", ":", "\n", "    ", "\"\"\"\n    Load a model from model_folder.\n\n    :param model_folder: Model folder.\n    :param device: Torch device to load model to.\n    :param checkpoint: Checkpoint to use. If none, uses best checkpoint.\n    :param dtype: Optional data type to use. If None, will be inferred from stored model.\n    :param inference_only: Use the model only for inference, enabling optimizations.\n    :param train_decoder_only: Training will only update the decoder. Disable\n           autograd for encoder and embeddings to save memory.\n    :param allow_missing: Allow missing parameters in the loaded model.\n    :param set_grad_req_null: Set grad_req to null for model parameters.\n    :param forward_pass_cache_size: If > 0, cache encoder and embedding calculations of forward pass.\n    :return: List of models, source vocabularies, target vocabularies.\n    \"\"\"", "\n", "assert", "dtype", "in", "(", "None", ",", "C", ".", "DTYPE_FP32", ",", "C", ".", "DTYPE_FP16", ",", "C", ".", "DTYPE_INT8", ")", ",", "f\"dtype must be one of {C.DTYPE_FP32}, {C.DTYPE_FP16}, or {C.DTYPE_INT8}\"", "\n", "\n", "source_vocabs", "=", "vocab", ".", "load_source_vocabs", "(", "model_folder", ")", "\n", "target_vocabs", "=", "vocab", ".", "load_target_vocabs", "(", "model_folder", ")", "\n", "model_version", "=", "utils", ".", "load_version", "(", "os", ".", "path", ".", "join", "(", "model_folder", ",", "C", ".", "VERSION_NAME", ")", ")", "\n", "logger", ".", "info", "(", "\"Model version: %s\"", ",", "model_version", ")", "\n", "utils", ".", "check_version", "(", "model_version", ")", "\n", "model_config", "=", "SockeyeModel", ".", "load_config", "(", "os", ".", "path", ".", "join", "(", "model_folder", ",", "C", ".", "CONFIG_NAME", ")", ")", "\n", "\n", "if", "inference_only", ":", "\n", "        ", "logger", ".", "info", "(", "\"Disabling dropout layers for performance reasons\"", ")", "\n", "model_config", ".", "disable_dropout", "(", ")", "\n", "\n", "", "if", "checkpoint", "is", "None", ":", "\n", "        ", "params_fname", "=", "os", ".", "path", ".", "join", "(", "model_folder", ",", "C", ".", "PARAMS_BEST_NAME", ")", "\n", "", "else", ":", "\n", "        ", "params_fname", "=", "os", ".", "path", ".", "join", "(", "model_folder", ",", "C", ".", "PARAMS_NAME", "%", "checkpoint", ")", "\n", "\n", "", "model", "=", "SockeyeModel", "(", "model_config", ",", "inference_only", "=", "inference_only", ",", "train_decoder_only", "=", "train_decoder_only", ",", "\n", "forward_pass_cache_size", "=", "forward_pass_cache_size", ")", "\n", "\n", "model", ".", "load_parameters", "(", "filename", "=", "params_fname", ",", "\n", "device", "=", "device", ",", "\n", "allow_missing", "=", "allow_missing", ",", "\n", "ignore_extra", "=", "False", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "if", "set_grad_req_null", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "\n", "", "if", "dtype", "is", "None", "or", "dtype", "==", "model_config", ".", "dtype", ":", "\n", "        ", "logger", ".", "info", "(", "\"Model dtype: %s\"", "%", "model", ".", "dtype", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "cast", "(", "dtype", ")", "\n", "logger", ".", "info", "(", "\"Model dtype: overridden to %s\"", "%", "dtype", ")", "\n", "\n", "", "utils", ".", "check_condition", "(", "model", ".", "num_source_factors", "==", "len", "(", "source_vocabs", ")", ",", "\n", "\"Number of loaded source vocabularies (%d) does not match \"", "\n", "\"number of source factors for model '%s' (%d)\"", "%", "(", "len", "(", "source_vocabs", ")", ",", "model_folder", ",", "\n", "model", ".", "num_source_factors", ")", ")", "\n", "utils", ".", "check_condition", "(", "model", ".", "num_target_factors", "==", "len", "(", "target_vocabs", ")", ",", "\n", "\"Number of loaded target vocabularies (%d) does not match \"", "\n", "\"number of target factors for model '%s' (%d)\"", "%", "(", "len", "(", "target_vocabs", ")", ",", "model_folder", ",", "\n", "model", ".", "num_target_factors", ")", ")", "\n", "return", "model", ",", "source_vocabs", ",", "target_vocabs", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.load_models": [[686, 748], ["logger.info", "time.time", "zip", "range", "range", "logger.info", "len", "utils.check_condition", "model.load_model", "models.append", "source_vocabs.append", "target_vocabs.append", "len", "utils.check_condition", "len", "utils.check_condition", "time.time", "len", "len", "vocab.are_identical", "vocab.are_identical", "len", "len", "range", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.load_model", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.are_identical", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.are_identical"], ["", "def", "load_models", "(", "device", ":", "pt", ".", "device", ",", "\n", "model_folders", ":", "List", "[", "str", "]", ",", "\n", "checkpoints", ":", "Optional", "[", "List", "[", "int", "]", "]", "=", "None", ",", "\n", "dtype", ":", "Optional", "[", "str", "]", "=", "C", ".", "DTYPE_FP32", ",", "\n", "inference_only", ":", "bool", "=", "False", ",", "\n", "train_decoder_only", ":", "bool", "=", "False", ",", "\n", "allow_missing", ":", "bool", "=", "False", ",", "\n", "set_grad_req_null", ":", "bool", "=", "True", ",", "\n", "forward_pass_cache_size", ":", "int", "=", "0", ")", "->", "Tuple", "[", "List", "[", "SockeyeModel", "]", ",", "\n", "List", "[", "vocab", ".", "Vocab", "]", ",", "List", "[", "vocab", ".", "Vocab", "]", "]", ":", "\n", "    ", "\"\"\"\n    Loads a list of models for inference.\n\n    :param device: PyTorch device.\n    :param model_folders: List of model folders to load models from.\n    :param checkpoints: List of checkpoints to use for each model in model_folders. Use None to load best checkpoint.\n    :param dtype: Optional data type to use. If None, will be inferred from stored model.\n    :param inference_only: Use the model only for inference, enabling optimizations.\n    :param train_decoder_only: Training will only update the decoder. Disable\n           autograd for encoder and embeddings to save memory.\n    :param allow_missing: Allow missing parameters in the loaded models.\n    :param set_grad_req_null: Set grad_req to null for model parameters.\n    :param forward_pass_cache_size: If > 0, cache encoder and embedding calculations of forward pass.\n    :return: List of models, source vocabulary, target vocabulary, source factor vocabularies.\n    \"\"\"", "\n", "logger", ".", "info", "(", "\"Loading %d model(s) from %s ...\"", ",", "len", "(", "model_folders", ")", ",", "model_folders", ")", "\n", "load_time_start", "=", "time", ".", "time", "(", ")", "\n", "models", "=", "[", "]", "# type: List[SockeyeModel]", "\n", "source_vocabs", "=", "[", "]", "# type: List[List[vocab.Vocab]]", "\n", "target_vocabs", "=", "[", "]", "# type: List[List[vocab.Vocab]]", "\n", "\n", "if", "checkpoints", "is", "None", ":", "\n", "        ", "checkpoints", "=", "[", "None", "]", "*", "len", "(", "model_folders", ")", "\n", "", "else", ":", "\n", "        ", "utils", ".", "check_condition", "(", "len", "(", "checkpoints", ")", "==", "len", "(", "model_folders", ")", ",", "\"Must provide checkpoints for each model\"", ")", "\n", "\n", "", "for", "model_folder", ",", "checkpoint", "in", "zip", "(", "model_folders", ",", "checkpoints", ")", ":", "\n", "        ", "model", ",", "src_vcbs", ",", "trg_vcbs", "=", "load_model", "(", "model_folder", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "dtype", ",", "\n", "checkpoint", "=", "checkpoint", ",", "\n", "inference_only", "=", "inference_only", ",", "\n", "train_decoder_only", "=", "train_decoder_only", ",", "\n", "allow_missing", "=", "allow_missing", ",", "\n", "set_grad_req_null", "=", "set_grad_req_null", ",", "\n", "forward_pass_cache_size", "=", "forward_pass_cache_size", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "source_vocabs", ".", "append", "(", "src_vcbs", ")", "\n", "target_vocabs", ".", "append", "(", "trg_vcbs", ")", "\n", "\n", "", "first_model_vocabs", "=", "source_vocabs", "[", "0", "]", "\n", "for", "fi", "in", "range", "(", "len", "(", "first_model_vocabs", ")", ")", ":", "\n", "        ", "utils", ".", "check_condition", "(", "vocab", ".", "are_identical", "(", "*", "[", "source_vocabs", "[", "i", "]", "[", "fi", "]", "for", "i", "in", "range", "(", "len", "(", "source_vocabs", ")", ")", "]", ")", ",", "\n", "\"Source vocabulary ids do not match. Factor %d\"", "%", "fi", ")", "\n", "", "first_model_vocabs", "=", "target_vocabs", "[", "0", "]", "\n", "for", "fi", "in", "range", "(", "len", "(", "first_model_vocabs", ")", ")", ":", "\n", "        ", "utils", ".", "check_condition", "(", "vocab", ".", "are_identical", "(", "*", "[", "target_vocabs", "[", "i", "]", "[", "fi", "]", "for", "i", "in", "range", "(", "len", "(", "target_vocabs", ")", ")", "]", ")", ",", "\n", "\"Target vocabulary ids do not match. Factor %d\"", "%", "fi", ")", "\n", "\n", "", "load_time", "=", "time", ".", "time", "(", ")", "-", "load_time_start", "\n", "logger", ".", "info", "(", "\"%d model(s) loaded in %.4fs\"", ",", "len", "(", "models", ")", ",", "load_time", ")", "\n", "return", "models", ",", "source_vocabs", "[", "0", "]", ",", "target_vocabs", "[", "0", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.setup_main_logger": [[106, 142], ["log_config[].items", "logging.config.dictConfig", "logging.config.dictConfig", "logging.exception", "logging.exception"], "function", ["None"], ["def", "setup_main_logger", "(", "file_logging", "=", "True", ",", "console", "=", "True", ",", "path", ":", "Optional", "[", "str", "]", "=", "None", ",", "level", "=", "logging", ".", "INFO", ",", "\n", "console_level", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Configures logging for the main application.\n\n    :param file_logging: Whether to log to a file.\n    :param console: Whether to log to the console.\n    :param path: Optional path to write logfile to.\n    :param level: Log level. Default: INFO.\n    :param console_level: Optionally specify a separate log level for the console.\n    \"\"\"", "\n", "if", "file_logging", "and", "console", ":", "\n", "        ", "log_config", "=", "LOGGING_CONFIGS", "[", "\"file_console\"", "]", "# type: ignore", "\n", "", "elif", "file_logging", ":", "\n", "        ", "log_config", "=", "LOGGING_CONFIGS", "[", "\"file_only\"", "]", "\n", "", "elif", "console", ":", "\n", "        ", "log_config", "=", "LOGGING_CONFIGS", "[", "\"console_only\"", "]", "\n", "", "else", ":", "\n", "        ", "log_config", "=", "LOGGING_CONFIGS", "[", "\"none\"", "]", "\n", "\n", "", "if", "file_logging", ":", "\n", "        ", "assert", "path", "is", "not", "None", ",", "\"Must provide a logfile path\"", "\n", "log_config", "[", "\"handlers\"", "]", "[", "\"rotating\"", "]", "[", "\"filename\"", "]", "=", "path", "# type: ignore", "\n", "\n", "", "for", "_", ",", "handler_config", "in", "log_config", "[", "'handlers'", "]", ".", "items", "(", ")", ":", "# type: ignore", "\n", "        ", "handler_config", "[", "'level'", "]", "=", "level", "\n", "\n", "", "if", "'console'", "in", "log_config", "[", "'handlers'", "]", "and", "console_level", "is", "not", "None", ":", "# type: ignore", "\n", "        ", "log_config", "[", "'handlers'", "]", "[", "'console'", "]", "[", "'level'", "]", "=", "console_level", "# type: ignore", "\n", "\n", "", "logging", ".", "config", ".", "dictConfig", "(", "log_config", ")", "# type: ignore", "\n", "\n", "def", "exception_hook", "(", "exc_type", ",", "exc_value", ",", "exc_traceback", ")", ":", "\n", "        ", "logging", ".", "exception", "(", "\"Uncaught exception\"", ",", "exc_info", "=", "(", "exc_type", ",", "exc_value", ",", "exc_traceback", ")", ")", "\n", "\n", "", "sys", ".", "excepthook", "=", "exception_hook", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.log_sockeye_version": [[144, 151], ["logger.info"], "function", ["None"], ["", "def", "log_sockeye_version", "(", "logger", ")", ":", "\n", "    ", "from", "sockeye", "import", "__version__", ",", "__file__", "\n", "try", ":", "\n", "        ", "from", "sockeye", ".", "git_version", "import", "git_hash", "\n", "", "except", "ImportError", ":", "\n", "        ", "git_hash", "=", "\"unknown\"", "\n", "", "logger", ".", "info", "(", "f\"Sockeye: {__version__}, commit {git_hash}, path {__file__}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.log_torch_version": [[153, 160], ["logger.info"], "function", ["None"], ["", "def", "log_torch_version", "(", "logger", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "from", "torch", "import", "__version__", ",", "__file__", "\n", "info", "=", "f'PyTorch: {__version__} ({__file__})'", "\n", "", "except", "ImportError", ":", "\n", "        ", "info", "=", "'PyTorch unavailable'", "\n", "", "logger", ".", "info", "(", "info", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.LearningRateScheduler.__init__": [[30, 36], ["sockeye.utils.check_condition"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["def", "__init__", "(", "self", ",", "base_lr", ":", "float", "=", "1.0", ",", "warmup", ":", "int", "=", "0", ",", "t_scale", ":", "float", "=", "1.0", ")", "->", "None", ":", "\n", "        ", "self", ".", "base_lr", "=", "base_lr", "\n", "check_condition", "(", "warmup", ">=", "0", ",", "\"warmup needs to be >= 0.\"", ")", "\n", "self", ".", "warmup", "=", "warmup", "\n", "self", ".", "t_scale", "=", "t_scale", "\n", "self", ".", "lr", "=", "None", "# type: Optional[float]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.LearningRateScheduler.__call__": [[37, 39], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "t", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.LearningRateScheduler._warmup": [[40, 49], ["min"], "methods", ["None"], ["", "def", "_warmup", "(", "self", ",", "scaled_t", ")", ":", "\n", "        ", "\"\"\"\n        Returns linearly increasing fraction of base_lr.  Here t is not scaled\n        by t_scale, as individual schedulers should scale t prior to calling\n        this method.\n        \"\"\"", "\n", "if", "not", "self", ".", "warmup", ":", "\n", "            ", "return", "self", ".", "base_lr", "\n", "", "return", "self", ".", "base_lr", "*", "min", "(", "1.0", ",", "scaled_t", "/", "self", ".", "warmup", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.AdaptiveLearningRateScheduler.new_evaluation_result": [[57, 65], ["None"], "methods", ["None"], ["def", "new_evaluation_result", "(", "self", ",", "has_improved", ":", "bool", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Returns true if the parameters should be reset to the ones with the best validation score.\n\n        :param has_improved: Whether the model improved on held-out validation data.\n        :return: True if parameters should be reset to the ones with best validation score.\n        \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.LearningRateSchedulerInvSqrtDecay.__call__": [[75, 89], ["lr_scheduler.LearningRateSchedulerInvSqrtDecay._warmup", "max", "math.sqrt", "max"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.LearningRateScheduler._warmup"], ["def", "__call__", "(", "self", ",", "t", ":", "int", ")", ":", "\n", "# Time scale", "\n", "        ", "scaled_t", "=", "t", "*", "self", ".", "t_scale", "\n", "# Warmup", "\n", "warm_lr", "=", "self", ".", "_warmup", "(", "scaled_t", ")", "\n", "# Avoid square root of zero", "\n", "warmup_steps", "=", "max", "(", "1", ",", "self", ".", "warmup", ")", "\n", "# Warmup first N steps, then decay", "\n", "lr", "=", "warm_lr", "/", "sqrt", "(", "max", "(", "scaled_t", ",", "warmup_steps", ")", ")", "\n", "# For this scheduler, `self.lr` represents the last seen lr and is only", "\n", "# used for logging purposes.", "\n", "self", ".", "lr", "=", "lr", "\n", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.LearningRateSchedulerLinearDecay.__init__": [[107, 111], ["lr_scheduler.LearningRateScheduler.__init__", "sockeye.utils.check_condition"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["def", "__init__", "(", "self", ",", "base_lr", ":", "float", ",", "total_steps", ":", "int", ",", "warmup", ":", "int", "=", "0", ",", "t_scale", ":", "float", "=", "1.0", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "base_lr", ",", "warmup", ",", "t_scale", ")", "\n", "check_condition", "(", "total_steps", ">=", "0", ",", "\"total_steps need to be >= 0.\"", ")", "\n", "self", ".", "total_steps", "=", "total_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.LearningRateSchedulerLinearDecay.__call__": [[112, 124], ["lr_scheduler.LearningRateSchedulerLinearDecay._warmup", "min", "max"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.LearningRateScheduler._warmup"], ["", "def", "__call__", "(", "self", ",", "t", ":", "int", ")", ":", "\n", "# Time scale", "\n", "        ", "scaled_t", "=", "t", "*", "self", ".", "t_scale", "\n", "# Warmup", "\n", "warm_lr", "=", "self", ".", "_warmup", "(", "scaled_t", ")", "\n", "# Linear decay", "\n", "bounded_t", "=", "min", "(", "max", "(", "scaled_t", ",", "1", ")", ",", "self", ".", "total_steps", ")", "\n", "lr", "=", "warm_lr", "*", "(", "1", "-", "bounded_t", "/", "self", ".", "total_steps", ")", "\n", "# For this scheduler, `self.lr` represents the last seen lr and is only", "\n", "# used for logging purposes.", "\n", "self", ".", "lr", "=", "lr", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.LearningRateSchedulerPlateauReduce.__init__": [[138, 150], ["lr_scheduler.LearningRateScheduler.__init__", "sockeye.utils.check_condition", "logger.info"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["def", "__init__", "(", "self", ",", "base_lr", ":", "float", ",", "reduce_factor", ":", "float", ",", "reduce_num_not_improved", ":", "int", ",", "warmup", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "base_lr", ",", "warmup", ")", "\n", "check_condition", "(", "0.0", "<", "reduce_factor", "<", "1", ",", "\"reduce_factor should be between (0, 1).\"", ")", "\n", "self", ".", "reduce_factor", "=", "reduce_factor", "\n", "self", ".", "reduce_num_not_improved", "=", "reduce_num_not_improved", "\n", "self", ".", "num_not_improved", "=", "0", "\n", "\n", "self", ".", "warmed_up", "=", "not", "self", ".", "warmup", ">", "0", "\n", "\n", "logger", ".", "info", "(", "\"Will reduce the learning rate by a factor of %.2f whenever\"", "\n", "\" the validation score doesn't improve %d times.\"", ",", "\n", "reduce_factor", ",", "reduce_num_not_improved", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.LearningRateSchedulerPlateauReduce.new_evaluation_result": [[151, 173], ["logger.info"], "methods", ["None"], ["", "def", "new_evaluation_result", "(", "self", ",", "has_improved", ":", "bool", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Returns true if the parameters should be reset to the ones with the best validation score.\n\n        :param has_improved: Whether the model improved on held-out validation data.\n        :return: True if parameters should be reset to the ones with best validation score.\n        \"\"\"", "\n", "if", "self", ".", "lr", "is", "None", ":", "\n", "            ", "assert", "self", ".", "base_lr", "is", "not", "None", "\n", "self", ".", "lr", "=", "self", ".", "base_lr", "\n", "", "if", "has_improved", ":", "\n", "            ", "self", ".", "num_not_improved", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_not_improved", "+=", "1", "\n", "if", "self", ".", "num_not_improved", ">=", "self", ".", "reduce_num_not_improved", "and", "self", ".", "reduce_factor", "<", "1.0", "and", "self", ".", "warmed_up", ":", "\n", "                ", "old_lr", "=", "self", ".", "lr", "\n", "self", ".", "lr", "*=", "self", ".", "reduce_factor", "\n", "logger", ".", "info", "(", "\"%d checkpoints since improvement or rate scaling, \"", "\n", "\"lowering learning rate: %1.2e -> %1.2e\"", ",", "self", ".", "num_not_improved", ",", "old_lr", ",", "self", ".", "lr", ")", "\n", "self", ".", "num_not_improved", "=", "0", "\n", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.LearningRateSchedulerPlateauReduce.__call__": [[174, 182], ["lr_scheduler.LearningRateSchedulerPlateauReduce._warmup"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.LearningRateScheduler._warmup"], ["", "def", "__call__", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "self", ".", "lr", "is", "None", ":", "\n", "            ", "assert", "self", ".", "base_lr", "is", "not", "None", "\n", "self", ".", "lr", "=", "self", ".", "base_lr", "\n", "", "lr", "=", "self", ".", "_warmup", "(", "t", ")", "if", "self", ".", "warmup", ">", "0", "and", "t", "<=", "self", ".", "warmup", "else", "self", ".", "lr", "\n", "if", "t", "==", "self", ".", "warmup", ":", "\n", "            ", "self", ".", "warmed_up", "=", "True", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.LearningRateSchedulerPlateauReduce.__repr__": [[183, 190], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "\"LearningRateSchedulerPlateauReduce(reduce_factor=%.2f, reduce_num_not_improved=%d, num_not_improved=%d,\"", "\n", "\" base_lr=%s, lr=%s, warmup=%d, warmed_up=%s)\"", "\n", "%", "\n", "(", "self", ".", "reduce_factor", ",", "self", ".", "reduce_num_not_improved", ",", "\n", "self", ".", "num_not_improved", ",", "self", ".", "base_lr", ",", "self", ".", "lr", ",", "self", ".", "warmup", ",", "self", ".", "warmed_up", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.get_lr_scheduler": [[193, 242], ["ValueError", "lr_scheduler.LearningRateSchedulerInvSqrtDecay", "sockeye.utils.check_condition", "lr_scheduler.LearningRateSchedulerLinearDecay", "sockeye.utils.check_condition", "sockeye.utils.check_condition", "lr_scheduler.LearningRateSchedulerPlateauReduce", "logger.warning"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["", "", "def", "get_lr_scheduler", "(", "scheduler_type", ":", "str", ",", "\n", "base_learning_rate", ":", "float", ",", "\n", "learning_rate_t_scale", ":", "float", ",", "\n", "learning_rate_reduce_factor", ":", "float", ",", "\n", "learning_rate_reduce_num_not_improved", ":", "int", ",", "\n", "learning_rate_warmup", ":", "int", "=", "0", ",", "\n", "max_updates", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "Optional", "[", "LearningRateScheduler", "]", ":", "\n", "    ", "\"\"\"\n    Returns a learning rate scheduler.\n\n    :param scheduler_type: Scheduler type.\n    :param base_lr: Base learning rate.\n    :param learning_rate_reduce_factor: Factor to reduce learning rate with.\n    :param learning_rate_t_scale: Scaling factor for step number.\n    :param learning_rate_reduce_num_not_improved: Number of checkpoints with no\n           improvement after which learning rate is reduced.\n    :param learning_rate_warmup: Number of initial updates during which the\n                                 learning rate linearly increases.\n    :param max_updates: Number of total training updates.\n\n    :raises: ValueError if unknown scheduler_type\n\n    :return: Learning rate scheduler.\n    \"\"\"", "\n", "if", "scheduler_type", "is", "None", "or", "scheduler_type", "==", "C", ".", "LR_SCHEDULER_NONE", ":", "\n", "        ", "return", "None", "\n", "", "if", "scheduler_type", "==", "C", ".", "LR_SCHEDULER_INV_SQRT_DECAY", ":", "\n", "        ", "return", "LearningRateSchedulerInvSqrtDecay", "(", "base_lr", "=", "base_learning_rate", ",", "warmup", "=", "learning_rate_warmup", ",", "\n", "t_scale", "=", "learning_rate_t_scale", ")", "\n", "", "if", "scheduler_type", "==", "C", ".", "LR_SCHEDULER_LINEAR_DECAY", ":", "\n", "        ", "check_condition", "(", "max_updates", "is", "not", "None", ",", "\n", "\"The total number of training updates (--max-updates) must be specified when using the linear \"", "\n", "\"decay learning rate scheduler.\"", ")", "\n", "return", "LearningRateSchedulerLinearDecay", "(", "base_lr", "=", "base_learning_rate", ",", "\n", "total_steps", "=", "max_updates", ",", "\n", "warmup", "=", "learning_rate_warmup", ",", "\n", "t_scale", "=", "learning_rate_t_scale", ")", "\n", "", "if", "scheduler_type", "==", "C", ".", "LR_SCHEDULER_PLATEAU_REDUCE", ":", "\n", "        ", "check_condition", "(", "learning_rate_reduce_factor", "is", "not", "None", ",", "\n", "\"learning_rate_reduce_factor needed for %s scheduler\"", "%", "C", ".", "LR_SCHEDULER_PLATEAU_REDUCE", ")", "\n", "check_condition", "(", "learning_rate_reduce_num_not_improved", "is", "not", "None", ",", "\n", "\"learning_rate_reduce_num_not_improved needed for %s scheduler\"", "%", "C", ".", "LR_SCHEDULER_PLATEAU_REDUCE", ")", "\n", "if", "learning_rate_reduce_factor", ">=", "1.0", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Not using %s learning rate scheduling: learning_rate_reduce_factor == 1.0\"", ",", "\n", "C", ".", "LR_SCHEDULER_PLATEAU_REDUCE", ")", "\n", "return", "None", "\n", "", "return", "LearningRateSchedulerPlateauReduce", "(", "base_learning_rate", ",", "learning_rate_reduce_factor", ",", "\n", "learning_rate_reduce_num_not_improved", ",", "learning_rate_warmup", ")", "\n", "", "raise", "ValueError", "(", "\"Unknown learning rate scheduler type %s.\"", "%", "scheduler_type", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.initial_setup.handle_env_cli_arg": [[28, 43], ["enumerate", "arg.startswith", "arg.startswith", "argval.split", "var_val.split", "logger.warning", "arg.split"], "function", ["None"], ["def", "handle_env_cli_arg", "(", ")", ":", "\n", "    ", "'''\n    Call this before importing/initializing any modules that only read\n    environment variables once at import/init time.\n    '''", "\n", "for", "i", ",", "arg", "in", "enumerate", "(", "sys", ".", "argv", ")", ":", "\n", "        ", "if", "arg", ".", "startswith", "(", "ENV_ARG", ")", ":", "\n", "            ", "if", "arg", ".", "startswith", "(", "ENV_ARG", "+", "'='", ")", ":", "\n", "                ", "argval", "=", "arg", ".", "split", "(", "\"=\"", ",", "1", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "argval", "=", "sys", ".", "argv", "[", "i", "+", "1", "]", "\n", "", "for", "var_val", "in", "argval", ".", "split", "(", "','", ")", ":", "\n", "                ", "var", ",", "val", "=", "var_val", ".", "split", "(", "'='", ",", "1", ")", "\n", "logger", ".", "warning", "(", "'Setting %s=%s'", ",", "var", ",", "val", ")", "\n", "os", ".", "environ", "[", "var", "]", "=", "val", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.__init__": [[88, 108], ["time.time", "collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "early_stopping_metric", ":", "str", ")", "->", "None", ":", "\n", "        ", "self", ".", "num_not_improved", "=", "0", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "checkpoint", "=", "0", "\n", "self", ".", "best_checkpoint", "=", "0", "\n", "self", ".", "batches", "=", "0", "\n", "self", ".", "updates", "=", "0", "\n", "self", ".", "samples", "=", "0", "\n", "# stores dicts of metric names & values for each checkpoint", "\n", "self", ".", "metrics", "=", "[", "]", "# type: List[Dict]", "\n", "self", ".", "start_tic", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_tic_last_time_elapsed", "=", "self", ".", "start_tic", "\n", "self", ".", "_time_elapsed", "=", "0.0", "\n", "self", ".", "early_stopping_metric", "=", "early_stopping_metric", "\n", "self", ".", "best_metric", "=", "C", ".", "METRIC_WORST", "[", "early_stopping_metric", "]", "\n", "# List of the last N best metrics, used for threshold-based stopping", "\n", "self", ".", "best_metric_history", "=", "deque", "(", "[", "self", ".", "best_metric", "]", ")", "\n", "self", ".", "best_checkpoint", "=", "0", "\n", "self", ".", "converged", "=", "False", "\n", "self", ".", "diverged", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save": [[109, 117], ["training.TrainState.update_time_elapsed", "len", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.update_time_elapsed"], ["", "def", "save", "(", "self", ",", "fname", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Saves this training state to fname.\n        \"\"\"", "\n", "self", ".", "update_time_elapsed", "(", ")", "\n", "assert", "len", "(", "self", ".", "metrics", ")", "==", "self", ".", "checkpoint", "\n", "with", "open", "(", "fname", ",", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load": [[118, 128], ["open", "pickle.load", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load"], ["", "", "@", "staticmethod", "\n", "def", "load", "(", "fname", ":", "str", ")", "->", "'TrainState'", ":", "\n", "        ", "\"\"\"\n        Loads a training state from fname.\n        \"\"\"", "\n", "with", "open", "(", "fname", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "            ", "state", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "state", ".", "_tic_last_time_elapsed", "=", "time", ".", "time", "(", ")", "\n", "assert", "len", "(", "state", ".", "metrics", ")", "==", "state", ".", "checkpoint", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.update_time_elapsed": [[129, 133], ["time.time"], "methods", ["None"], ["", "", "def", "update_time_elapsed", "(", "self", ")", ":", "\n", "        ", "current_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_time_elapsed", "+=", "current_time", "-", "self", ".", "_tic_last_time_elapsed", "\n", "self", ".", "_tic_last_time_elapsed", "=", "current_time", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.time_elapsed": [[134, 137], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "time_elapsed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_time_elapsed", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.__getstate__": [[138, 140], ["getattr"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "k", ":", "getattr", "(", "self", ",", "k", ")", "for", "k", "in", "self", ".", "__slots__", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.__setstate__": [[141, 144], ["state.items", "setattr"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer.__init__": [[148, 178], ["training.Speedometer", "training.TensorboardLogger", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "config", ":", "TrainerConfig", ",", "\n", "optimizer_config", ":", "optimizers", ".", "OptimizerConfig", ",", "\n", "sockeye_model", ":", "model", ".", "SockeyeModel", ",", "\n", "training_model", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "zero_grad_kwargs", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "loss_functions", ":", "List", "[", "loss", ".", "Loss", "]", ",", "\n", "device", ":", "torch", ".", "device", ",", "\n", "using_amp", ":", "bool", "=", "False", ",", "\n", "using_apex_amp", ":", "bool", "=", "False", ",", "\n", "custom_metrics_logger", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "checkpoint_callback", ":", "Optional", "[", "Callable", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "optimizer_config", "=", "optimizer_config", "\n", "self", ".", "sockeye_model", "=", "sockeye_model", "\n", "self", ".", "training_model", "=", "training_model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "zero_grad_kwargs", "=", "zero_grad_kwargs", "\n", "self", ".", "loss_functions", "=", "loss_functions", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "using_amp", "=", "using_amp", "\n", "if", "using_amp", ":", "\n", "            ", "self", ".", "_scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "", "self", ".", "using_apex_amp", "=", "using_apex_amp", "\n", "self", ".", "state", "=", "None", "# type: Optional[TrainState]", "\n", "self", ".", "_speedometer", "=", "Speedometer", "(", "frequency", "=", "C", ".", "MEASURE_SPEED_EVERY", ",", "auto_reset", "=", "False", ")", "\n", "self", ".", "_custom_metrics_logger", "=", "custom_metrics_logger", "\n", "self", ".", "_tflogger", "=", "TensorboardLogger", "(", "logdir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "output_dir", ",", "C", ".", "TENSORBOARD_NAME", ")", ")", "\n", "self", ".", "checkpoint_callback", "=", "checkpoint_callback", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer.fit": [[179, 271], ["logger.info", "os.path.exists", "time.time", "logger.info", "utils.is_primary_worker", "utils.is_primary_worker", "utils.check_condition", "logger.info", "training.EarlyStoppingTrainer._load_training_state", "training.TrainState", "utils.is_primary_worker", "logger.info", "logger.info", "training.EarlyStoppingTrainer._step", "training.EarlyStoppingTrainer._cleanup", "training.EarlyStoppingTrainer.sockeye_model.save_config", "training.EarlyStoppingTrainer.sockeye_model.save_version", "training.EarlyStoppingTrainer.sockeye_model.save_parameters", "logger.info", "logger.info", "logger.info", "train_iter.iter_next", "train_iter.reset", "training.EarlyStoppingTrainer._create_checkpoint", "time.time", "training.EarlyStoppingTrainer._create_checkpoint", "training.EarlyStoppingTrainer._create_checkpoint", "training.EarlyStoppingTrainer._create_checkpoint", "train_iter.next", "time.time", "logger.info", "time.time", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._load_training_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._step", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._cleanup", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.save_config", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.save_version", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.save_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.iter_next", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._create_checkpoint", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._create_checkpoint", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._create_checkpoint", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._create_checkpoint", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.next"], ["", "def", "fit", "(", "self", ",", "\n", "train_iter", ":", "data_io", ".", "BaseParallelSampleIter", ",", "\n", "validation_iter", ":", "data_io", ".", "BaseParallelSampleIter", ",", "\n", "checkpoint_decoder", ":", "Optional", "[", "checkpoint_decoder", ".", "CheckpointDecoder", "]", "=", "None", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Early stopping by optimizing '%s'\"", ",", "self", ".", "config", ".", "early_stopping_metric", ")", "\n", "\n", "if", "utils", ".", "is_primary_worker", "(", ")", "and", "self", ".", "config", ".", "early_stopping_metric", "in", "C", ".", "METRICS_REQUIRING_DECODER", ":", "\n", "            ", "utils", ".", "check_condition", "(", "checkpoint_decoder", "is", "not", "None", ",", "\n", "\"%s requires CheckpointDecoder\"", "%", "self", ".", "config", ".", "early_stopping_metric", ")", "\n", "\n", "", "resume_training", "=", "os", ".", "path", ".", "exists", "(", "self", ".", "training_state_dirname", ")", "\n", "if", "resume_training", ":", "\n", "            ", "logger", ".", "info", "(", "\"Found partial training in '%s'. Resuming from saved state.\"", ",", "self", ".", "training_state_dirname", ")", "\n", "self", ".", "_load_training_state", "(", "train_iter", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "state", "=", "TrainState", "(", "self", ".", "config", ".", "early_stopping_metric", ")", "\n", "if", "utils", ".", "is_primary_worker", "(", ")", ":", "\n", "                ", "self", ".", "sockeye_model", ".", "save_config", "(", "self", ".", "config", ".", "output_dir", ")", "\n", "self", ".", "sockeye_model", ".", "save_version", "(", "self", ".", "config", ".", "output_dir", ")", "\n", "self", ".", "sockeye_model", ".", "save_parameters", "(", "self", ".", "current_params_fname", ")", "\n", "", "logger", ".", "info", "(", "\"Training started.\"", ")", "\n", "\n", "", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "self", ".", "config", ".", "max_checkpoints", "is", "not", "None", ":", "\n", "            ", "self", ".", "config", ".", "max_updates", "=", "self", ".", "state", ".", "updates", "+", "self", ".", "config", ".", "max_checkpoints", "*", "self", ".", "config", ".", "checkpoint_interval", "\n", "logger", ".", "info", "(", "\"Resetting max_updates to %d + %d * %d = %d in order to implement stopping \"", "\n", "\"after (an additional) %d checkpoints.\"", ",", "\n", "self", ".", "state", ".", "updates", ",", "\n", "self", ".", "config", ".", "max_checkpoints", ",", "\n", "self", ".", "config", ".", "checkpoint_interval", ",", "\n", "self", ".", "config", ".", "max_updates", ",", "\n", "self", ".", "config", ".", "max_checkpoints", ")", "\n", "\n", "# At the start of training, the checkpoint is only up to date if it has", "\n", "# just been loaded (resuming training with an existing model directory).", "\n", "", "checkpoint_up_to_date", "=", "resume_training", "\n", "while", "True", ":", "\n", "            ", "if", "self", ".", "config", ".", "max_epochs", "is", "not", "None", "and", "self", ".", "state", ".", "epoch", "==", "self", ".", "config", ".", "max_epochs", ":", "\n", "                ", "logger", ".", "info", "(", "\"Maximum # of epochs (%s) reached.\"", ",", "self", ".", "config", ".", "max_epochs", ")", "\n", "if", "not", "checkpoint_up_to_date", ":", "\n", "                    ", "time_cost", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "self", ".", "_create_checkpoint", "(", "checkpoint_decoder", ",", "time_cost", ",", "train_iter", ",", "validation_iter", ")", "\n", "", "break", "\n", "\n", "", "if", "self", ".", "config", ".", "max_updates", "is", "not", "None", "and", "self", ".", "state", ".", "updates", "==", "self", ".", "config", ".", "max_updates", ":", "\n", "                ", "logger", ".", "info", "(", "\"Maximum # of updates (%s) reached.\"", ",", "self", ".", "config", ".", "max_updates", ")", "\n", "if", "not", "checkpoint_up_to_date", ":", "\n", "                    ", "time_cost", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "self", ".", "_create_checkpoint", "(", "checkpoint_decoder", ",", "time_cost", ",", "train_iter", ",", "validation_iter", ")", "\n", "", "break", "\n", "\n", "", "if", "self", ".", "config", ".", "max_samples", "is", "not", "None", "and", "self", ".", "state", ".", "samples", ">=", "self", ".", "config", ".", "max_samples", ":", "\n", "                ", "logger", ".", "info", "(", "\"Maximum # of samples (%s) reached\"", ",", "self", ".", "config", ".", "max_samples", ")", "\n", "if", "not", "checkpoint_up_to_date", ":", "\n", "                    ", "time_cost", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "self", ".", "_create_checkpoint", "(", "checkpoint_decoder", ",", "time_cost", ",", "train_iter", ",", "validation_iter", ")", "\n", "", "break", "\n", "\n", "", "did_grad_step", "=", "self", ".", "_step", "(", "batch", "=", "train_iter", ".", "next", "(", ")", ")", "\n", "checkpoint_up_to_date", "=", "checkpoint_up_to_date", "and", "not", "did_grad_step", "\n", "\n", "if", "not", "train_iter", ".", "iter_next", "(", ")", ":", "\n", "                ", "self", ".", "state", ".", "epoch", "+=", "1", "\n", "train_iter", ".", "reset", "(", ")", "\n", "\n", "", "if", "self", ".", "state", ".", "updates", ">", "0", "and", "self", ".", "state", ".", "batches", "%", "(", "\n", "self", ".", "config", ".", "checkpoint_interval", "*", "self", ".", "config", ".", "update_interval", ")", "==", "0", ":", "\n", "                ", "time_cost", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "self", ".", "_create_checkpoint", "(", "checkpoint_decoder", ",", "time_cost", ",", "train_iter", ",", "validation_iter", ")", "\n", "checkpoint_up_to_date", "=", "True", "\n", "\n", "if", "self", ".", "config", ".", "max_seconds", "is", "not", "None", "and", "self", ".", "state", ".", "time_elapsed", ">=", "self", ".", "config", ".", "max_seconds", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Maximum # of seconds (%s) reached. Training ran for %d seconds.\"", ",", "\n", "self", ".", "config", ".", "max_seconds", ",", "self", ".", "state", ".", "time_elapsed", ")", "\n", "break", "\n", "\n", "", "if", "self", ".", "state", ".", "converged", "or", "self", ".", "state", ".", "diverged", ":", "\n", "                    ", "break", "\n", "\n", "", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"Training finished%s. Best checkpoint: %d. Best validation %s: %.6f\"", ",", "\n", "\", can be continued later\"", "if", "not", "self", ".", "state", ".", "converged", "else", "\"\"", ",", "\n", "self", ".", "state", ".", "best_checkpoint", ",", "self", ".", "state", ".", "early_stopping_metric", ",", "self", ".", "state", ".", "best_metric", ")", "\n", "\n", "# Always keep the training state to allow continuing training with", "\n", "# different stopping criteria", "\n", "if", "utils", ".", "is_primary_worker", "(", ")", ":", "\n", "            ", "self", ".", "_cleanup", "(", "keep_training_state", "=", "True", ")", "\n", "\n", "", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._create_checkpoint": [[272, 307], ["utils.is_primary_worker", "logger.info", "logger.info", "training.EarlyStoppingTrainer._evaluate", "training.EarlyStoppingTrainer._determine_improvement", "training.EarlyStoppingTrainer._determine_convergence", "training.EarlyStoppingTrainer._determine_divergence", "training.EarlyStoppingTrainer._adjust_learning_rate", "utils.is_primary_worker", "training.EarlyStoppingTrainer._save_params", "training.EarlyStoppingTrainer._write_and_log_metrics", "training.EarlyStoppingTrainer._save_training_state", "metric.reset", "training.EarlyStoppingTrainer.checkpoint_callback", "training.EarlyStoppingTrainer._update_best_params", "training.EarlyStoppingTrainer._save_optimizer_state", "training.EarlyStoppingTrainer._save_lr_scheduler", "str"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._evaluate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._determine_improvement", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._determine_convergence", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._determine_divergence", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._adjust_learning_rate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._save_params", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._write_and_log_metrics", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._save_training_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._update_best_params", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._save_optimizer_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._save_lr_scheduler"], ["", "def", "_create_checkpoint", "(", "self", ",", "checkpoint_decoder", ":", "checkpoint_decoder", ".", "CheckpointDecoder", ",", "time_cost", ":", "float", ",", "\n", "train_iter", ":", "data_io", ".", "BaseParallelSampleIter", ",", "\n", "validation_iter", ":", "data_io", ".", "BaseParallelSampleIter", ")", ":", "\n", "        ", "\"\"\"\n        Creates a checkpoint, which will update self.state.converged/self.state.diverged, evaluate validation\n        metrics and update the best known parameters accordingly.\n        \"\"\"", "\n", "self", ".", "state", ".", "checkpoint", "+=", "1", "\n", "# save parameters and evaluate on validation data", "\n", "if", "utils", ".", "is_primary_worker", "(", ")", ":", "\n", "            ", "self", ".", "_save_params", "(", ")", "\n", "", "train_metrics", "=", "[", "lf", ".", "metric", "for", "lf", "in", "self", ".", "loss_functions", "]", "\n", "logger", ".", "info", "(", "\"Checkpoint [%d]\\tUpdates=%d Epoch=%d Samples=%d Time-cost=%.3f Updates/sec=%.3f\"", ",", "\n", "self", ".", "state", ".", "checkpoint", ",", "self", ".", "state", ".", "updates", ",", "self", ".", "state", ".", "epoch", ",", "\n", "self", ".", "state", ".", "samples", ",", "time_cost", ",", "self", ".", "config", ".", "checkpoint_interval", "/", "time_cost", ")", "\n", "logger", ".", "info", "(", "'Checkpoint [%d]\\t%s'", ",", "self", ".", "state", ".", "checkpoint", ",", "\n", "\"\\t\"", ".", "join", "(", "\"Train-%s\"", "%", "str", "(", "metric", ")", "for", "metric", "in", "train_metrics", ")", ")", "\n", "\n", "val_metrics", "=", "self", ".", "_evaluate", "(", "self", ".", "state", ".", "checkpoint", ",", "validation_iter", ",", "checkpoint_decoder", ")", "\n", "\n", "has_improved", "=", "self", ".", "_determine_improvement", "(", "val_metrics", ")", "\n", "self", ".", "state", ".", "converged", "=", "self", ".", "_determine_convergence", "(", ")", "\n", "self", ".", "state", ".", "diverged", "=", "self", ".", "_determine_divergence", "(", "val_metrics", ")", "\n", "self", ".", "_adjust_learning_rate", "(", "has_improved", ")", "\n", "if", "utils", ".", "is_primary_worker", "(", ")", ":", "\n", "            ", "if", "has_improved", ":", "\n", "                ", "self", ".", "_update_best_params", "(", ")", "\n", "self", ".", "_save_optimizer_state", "(", "self", ".", "best_optimizer_state_fname", ")", "\n", "self", ".", "_save_lr_scheduler", "(", "self", ".", "best_lr_scheduler_fname", ")", "\n", "", "self", ".", "_write_and_log_metrics", "(", "train_metrics", "=", "train_metrics", ",", "val_metrics", "=", "val_metrics", ")", "\n", "self", ".", "_save_training_state", "(", "train_iter", ")", "\n", "", "for", "metric", "in", "train_metrics", ":", "\n", "            ", "metric", ".", "reset", "(", ")", "\n", "", "if", "self", ".", "checkpoint_callback", ":", "\n", "            ", "self", ".", "checkpoint_callback", "(", "self", ".", "state", ".", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._forward_backward": [[308, 339], ["batch.load.load.load", "training.EarlyStoppingTrainer.training_model", "training.EarlyStoppingTrainer._scaler.scale", "training.EarlyStoppingTrainer.backward", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.no_context", "loss_function", "sum", "apex.amp.scale_loss", "scaled_sum_losses.backward", "len"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.no_context"], ["", "", "def", "_forward_backward", "(", "self", ",", "batch", ":", "data_io", ".", "Batch", ",", "is_update_batch", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Performs forward-backward pass on a batch.\n\n        :param batch: Current data batch.\n        :param is_update_batch: Whether this is the final batch before updating\n                                weights.\n        :return: List loss values.\n        \"\"\"", "\n", "batch", "=", "batch", ".", "load", "(", "device", "=", "self", ".", "device", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "cache_enabled", "=", "False", ")", "if", "self", ".", "using_amp", "else", "utils", ".", "no_context", "(", ")", ":", "# type: ignore", "\n", "# Forward", "\n", "            ", "outputs", "=", "self", ".", "training_model", "(", "batch", ".", "source", ",", "batch", ".", "source_length", ",", "batch", ".", "target", ",", "batch", ".", "target_length", ")", "\n", "# Loss (scaled by update interval)", "\n", "loss_outputs", "=", "[", "loss_function", "(", "outputs", ",", "batch", ".", "labels", ")", "for", "loss_function", "in", "self", ".", "loss_functions", "]", "\n", "# TODO(mdenkows): We currently give 1/N weight to every batch in the", "\n", "# update, but batches have subtly different sizes (different numbers", "\n", "# of padding tokens). Consider normalizing by relative batch size.", "\n", "loss_values", "=", "[", "v", "/", "self", ".", "config", ".", "update_interval", "if", "self", ".", "config", ".", "update_interval", ">", "1", "\n", "else", "v", "for", "v", ",", "_", "in", "loss_outputs", "]", "\n", "sum_losses", "=", "sum", "(", "loss_values", ")", "if", "len", "(", "loss_values", ")", ">", "1", "else", "loss_values", "[", "0", "]", "\n", "# Backward. PyTorch AMP and Apex AMP use different loss scaling APIs.", "\n", "", "if", "self", ".", "using_amp", ":", "\n", "            ", "sum_losses", "=", "self", ".", "_scaler", ".", "scale", "(", "sum_losses", ")", "\n", "", "if", "self", ".", "using_apex_amp", ":", "\n", "            ", "with", "apex", ".", "amp", ".", "scale_loss", "(", "sum_losses", ",", "self", ".", "optimizer", ",", "\n", "delay_unscale", "=", "not", "is_update_batch", ")", "as", "scaled_sum_losses", ":", "\n", "                ", "scaled_sum_losses", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "sum_losses", ".", "backward", "(", ")", "# type: ignore", "\n", "", "return", "loss_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._step": [[340, 387], ["zip", "training.EarlyStoppingTrainer._speedometer", "training.EarlyStoppingTrainer._forward_backward", "loss_func.metric.update", "training.EarlyStoppingTrainer.optimizer.zero_grad", "training.EarlyStoppingTrainer.training_model.no_sync", "utils.no_context", "loss_value.item", "num_samples.item", "training.EarlyStoppingTrainer._scaler.unscale_", "torch.nn.utils.clip_grad.clip_grad_value_", "torch.nn.utils.clip_grad.clip_grad_value_", "torch.nn.utils.clip_grad.clip_grad_value_", "torch.nn.utils.clip_grad.clip_grad_value_", "training.EarlyStoppingTrainer._scaler.step", "training.EarlyStoppingTrainer._scaler.update", "training.EarlyStoppingTrainer.optimizer.step", "utils.is_distributed", "training.EarlyStoppingTrainer.training_model.parameters", "torch.nn.utils.clip_grad.clip_grad_norm_", "torch.nn.utils.clip_grad.clip_grad_norm_", "torch.nn.utils.clip_grad.clip_grad_norm_", "torch.nn.utils.clip_grad.clip_grad_norm_", "training.EarlyStoppingTrainer.optimizer_config.lr_scheduler", "training.EarlyStoppingTrainer.training_model.parameters"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._forward_backward", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.no_context", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_distributed"], ["", "def", "_step", "(", "self", ",", "batch", ":", "data_io", ".", "Batch", ")", "->", "bool", ":", "\n", "        ", "self", ".", "state", ".", "batches", "+=", "1", "\n", "self", ".", "state", ".", "samples", "+=", "batch", ".", "samples", "\n", "# We accumulate gradients over N=update_interval batches before running", "\n", "# the optimizer to update model weights. Every Nth batch is an update", "\n", "# batch.", "\n", "is_update_batch", "=", "self", ".", "state", ".", "batches", "%", "self", ".", "config", ".", "update_interval", "==", "0", "\n", "\n", "# Forward/loss/backward (compute gradients). In distributed mode,", "\n", "# workers accumulate gradients locally for N-1 batches (no_sync), then", "\n", "# average the accumulated gradients across workers during the update", "\n", "# batch.", "\n", "with", "(", "self", ".", "training_model", ".", "no_sync", "(", ")", "if", "utils", ".", "is_distributed", "(", ")", "and", "not", "is_update_batch", "# type: ignore", "\n", "else", "utils", ".", "no_context", "(", ")", ")", ":", "\n", "            ", "loss_outputs", "=", "self", ".", "_forward_backward", "(", "batch", ",", "is_update_batch", ")", "\n", "\n", "", "for", "loss_func", ",", "(", "loss_value", ",", "num_samples", ")", "in", "zip", "(", "self", ".", "loss_functions", ",", "loss_outputs", ")", ":", "\n", "            ", "loss_func", ".", "metric", ".", "update", "(", "loss_value", ".", "item", "(", ")", ",", "num_samples", ".", "item", "(", ")", ")", "\n", "\n", "", "did_grad_step", "=", "False", "\n", "if", "is_update_batch", ":", "\n", "            ", "self", ".", "state", ".", "updates", "+=", "1", "\n", "if", "self", ".", "using_amp", ":", "\n", "                ", "self", ".", "_scaler", ".", "unscale_", "(", "self", ".", "optimizer", ")", "\n", "# Clip gradients", "\n", "", "if", "self", ".", "optimizer_config", ".", "gradient_clipping_type", "==", "C", ".", "GRADIENT_CLIPPING_TYPE_ABS", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad", ".", "clip_grad_value_", "(", "self", ".", "training_model", ".", "parameters", "(", ")", ",", "\n", "self", ".", "optimizer_config", ".", "gradient_clipping_threshold", ")", "\n", "", "elif", "self", ".", "optimizer_config", ".", "gradient_clipping_type", "==", "C", ".", "GRADIENT_CLIPPING_TYPE_NORM", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad", ".", "clip_grad_norm_", "(", "self", ".", "training_model", ".", "parameters", "(", ")", ",", "\n", "self", ".", "optimizer_config", ".", "gradient_clipping_threshold", ")", "\n", "# Set learning rate for current step", "\n", "", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "self", ".", "optimizer_config", ".", "lr_scheduler", "(", "self", ".", "state", ".", "updates", ")", "if", "self", ".", "optimizer_config", ".", "lr_scheduler", "is", "not", "None", "else", "self", ".", "optimizer_config", ".", "lr", "\n", "# Update weights and reset gradients", "\n", "", "if", "self", ".", "using_amp", ":", "\n", "                ", "self", ".", "_scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "_scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", "**", "self", ".", "zero_grad_kwargs", ")", "\n", "did_grad_step", "=", "True", "\n", "\n", "", "self", ".", "_speedometer", "(", "self", ".", "state", ".", "epoch", ",", "self", ".", "state", ".", "batches", ",", "\n", "self", ".", "state", ".", "updates", ",", "batch", ".", "samples", ",", "batch", ".", "tokens", ",", "(", "lf", ".", "metric", "for", "lf", "in", "self", ".", "loss_functions", ")", ")", "\n", "return", "did_grad_step", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._evaluate": [[388, 435], ["training.EarlyStoppingTrainer.sockeye_model.eval", "data_iter.reset", "utils.is_distributed", "utils.broadcast_object.items", "logger.info", "training.EarlyStoppingTrainer.sockeye_model.train", "lf.create_metric", "batch.load.load.load", "zip", "utils.is_primary_worker", "os.path.join", "checkpoint_decoder.decode_and_evaluate", "utils.broadcast_object", "loss.LossMetric", "loss.LossMetric.update", "val_metrics.append", "torch.inference_mode", "torch.inference_mode", "torch.inference_mode", "torch.inference_mode", "training.EarlyStoppingTrainer.sockeye_model", "loss_metric.update", "constants.DECODE_OUT_NAME.format", "loss_function", "loss_value.item", "num_samples.item", "str"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_distributed", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.MultiHeadAttention.train", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.MSELoss.create_metric", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.checkpoint_decoder.CheckpointDecoder.decode_and_evaluate", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.broadcast_object", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update"], ["", "def", "_evaluate", "(", "self", ",", "checkpoint", ":", "int", ",", "data_iter", ",", "\n", "checkpoint_decoder", ":", "Optional", "[", "checkpoint_decoder", ".", "CheckpointDecoder", "]", ")", "->", "List", "[", "loss", ".", "LossMetric", "]", ":", "\n", "        ", "\"\"\"\n        Computes loss(es) on validation data and returns their metrics.\n        :param data_iter: Validation data iterator.\n        :return: List of validation metrics, same order as self.loss_functions.\n        \"\"\"", "\n", "# Switch model to eval mode (disable dropout, etc.) to score validation", "\n", "# set and run checkpoint decoder.", "\n", "self", ".", "sockeye_model", ".", "eval", "(", ")", "\n", "\n", "data_iter", ".", "reset", "(", ")", "\n", "val_metrics", "=", "[", "lf", ".", "create_metric", "(", ")", "for", "lf", "in", "self", ".", "loss_functions", "]", "\n", "for", "batch", "in", "data_iter", ":", "\n", "            ", "batch", "=", "batch", ".", "load", "(", "device", "=", "self", ".", "device", ")", "\n", "with", "torch", ".", "inference_mode", "(", ")", ":", "\n", "# Forward: use sockeye_model because (traced) training_model", "\n", "# doesn't support eval mode (still runs dropout, etc.)", "\n", "                ", "outputs", "=", "self", ".", "sockeye_model", "(", "batch", ".", "source", ",", "batch", ".", "source_length", ",", "batch", ".", "target", ",", "batch", ".", "target_length", ")", "\n", "# Loss", "\n", "loss_outputs", "=", "[", "loss_function", "(", "outputs", ",", "batch", ".", "labels", ")", "for", "loss_function", "in", "self", ".", "loss_functions", "]", "\n", "# Update validation metrics for batch", "\n", "", "for", "loss_metric", ",", "(", "loss_value", ",", "num_samples", ")", "in", "zip", "(", "val_metrics", ",", "loss_outputs", ")", ":", "\n", "                ", "loss_metric", ".", "update", "(", "loss_value", ".", "item", "(", ")", ",", "num_samples", ".", "item", "(", ")", ")", "\n", "\n", "# Primary worker optionally runs the checkpoint decoder", "\n", "", "", "decoder_metrics", "=", "{", "}", "# type: Dict[str, float]", "\n", "if", "utils", ".", "is_primary_worker", "(", ")", "and", "checkpoint_decoder", "is", "not", "None", ":", "\n", "            ", "output_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "output_dir", ",", "C", ".", "DECODE_OUT_NAME", ".", "format", "(", "checkpoint", "=", "checkpoint", ")", ")", "\n", "decoder_metrics", "=", "checkpoint_decoder", ".", "decode_and_evaluate", "(", "output_name", "=", "output_name", ")", "\n", "# Broadcast decoder metrics (if any) from primary worker to secondary", "\n", "# workers", "\n", "", "if", "utils", ".", "is_distributed", "(", ")", ":", "\n", "            ", "decoder_metrics", "=", "utils", ".", "broadcast_object", "(", "decoder_metrics", ")", "\n", "# Add decoder metrics (if any) to validation metrics", "\n", "", "for", "metric_name", ",", "metric_value", "in", "decoder_metrics", ".", "items", "(", ")", ":", "\n", "            ", "assert", "metric_name", "not", "in", "val_metrics", ",", "\"Duplicate validation metric %s\"", "%", "metric_name", "\n", "metric", "=", "loss", ".", "LossMetric", "(", "name", "=", "metric_name", ")", "\n", "metric", ".", "update", "(", "metric_value", ",", "num_samples", "=", "1", ")", "\n", "val_metrics", ".", "append", "(", "metric", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Checkpoint [%d]\\t%s'", ",", "\n", "self", ".", "state", ".", "checkpoint", ",", "\"\\t\"", ".", "join", "(", "\"Validation-%s\"", "%", "str", "(", "lm", ")", "for", "lm", "in", "val_metrics", ")", ")", "\n", "\n", "# Switch model back to train mode to continue training", "\n", "self", ".", "sockeye_model", ".", "train", "(", ")", "\n", "return", "val_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._determine_improvement": [[436, 481], ["training.EarlyStoppingTrainer.state.best_metric_history.append", "logger.info", "training.EarlyStoppingTrainer.state.best_metric_history.popleft", "val_metric.get", "utils.is_primary_worker", "utils.is_distributed", "len", "utils.metric_value_is_better", "utils.broadcast_object", "logger.info", "abs"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_distributed", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.metric_value_is_better", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.broadcast_object"], ["", "def", "_determine_improvement", "(", "self", ",", "val_metrics", ":", "List", "[", "loss", ".", "LossMetric", "]", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Determines whether early stopping metric on validation data improved and updates best value and checkpoint in\n        the state.\n        :param val_metrics: Validation metrics.\n        :return: Whether model has improved on held-out data since last checkpoint.\n        \"\"\"", "\n", "value", "=", "None", "\n", "value_is_better", "=", "False", "\n", "for", "val_metric", "in", "val_metrics", ":", "\n", "            ", "if", "val_metric", ".", "name", "==", "self", ".", "config", ".", "early_stopping_metric", ":", "\n", "                ", "value", "=", "val_metric", ".", "get", "(", ")", "\n", "# In distributed mode, the primary worker makes an authoritative", "\n", "# check of whether the metric value has improved and broadcasts", "\n", "# the result to secondary workers. Non-determinism in the order", "\n", "# of GPU operations can lead to slight numeric variations across", "\n", "# workers, causing potential desync if each worker makes its own", "\n", "# check for key training decisions (reducing learning rate,", "\n", "# early stopping, etc.).", "\n", "if", "utils", ".", "is_primary_worker", "(", ")", ":", "\n", "# Authoritative check", "\n", "                    ", "value_is_better", "=", "utils", ".", "metric_value_is_better", "(", "value", ",", "\n", "self", ".", "state", ".", "best_metric", ",", "\n", "self", ".", "config", ".", "early_stopping_metric", ")", "\n", "", "if", "utils", ".", "is_distributed", "(", ")", ":", "\n", "# Broadcast result", "\n", "                    ", "value_is_better", "=", "utils", ".", "broadcast_object", "(", "value_is_better", ")", "\n", "", "if", "value_is_better", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Validation-%s improved to %f (delta=%f).\"", ",", "self", ".", "config", ".", "early_stopping_metric", ",", "\n", "value", ",", "abs", "(", "value", "-", "self", ".", "state", ".", "best_metric", ")", ")", "\n", "self", ".", "state", ".", "best_metric", "=", "value", "\n", "self", ".", "state", ".", "best_checkpoint", "=", "self", ".", "state", ".", "checkpoint", "\n", "self", ".", "state", ".", "num_not_improved", "=", "0", "\n", "", "", "", "assert", "value", "is", "not", "None", ",", "\"Early stopping metric %s not found in validation metrics.\"", "%", "self", ".", "config", ".", "early_stopping_metric", "\n", "if", "not", "value_is_better", ":", "\n", "            ", "self", ".", "state", ".", "num_not_improved", "+=", "1", "\n", "logger", ".", "info", "(", "\"Validation-%s has not improved for %d checkpoints, best so far: %f\"", ",", "\n", "self", ".", "config", ".", "early_stopping_metric", ",", "self", ".", "state", ".", "num_not_improved", ",", "self", ".", "state", ".", "best_metric", ")", "\n", "# Update best metric history", "\n", "", "self", ".", "state", ".", "best_metric_history", ".", "append", "(", "self", ".", "state", ".", "best_metric", ")", "\n", "if", "(", "self", ".", "config", ".", "max_num_checkpoint_not_improved", "is", "not", "None", "\n", "and", "len", "(", "self", ".", "state", ".", "best_metric_history", ")", ">", "self", ".", "config", ".", "max_num_checkpoint_not_improved", "+", "1", ")", ":", "\n", "            ", "self", ".", "state", ".", "best_metric_history", ".", "popleft", "(", ")", "\n", "\n", "", "return", "value_is_better", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._determine_convergence": [[482, 525], ["logger.info", "logger.info", "logger.info", "utils.is_primary_worker", "utils.is_distributed", "abs", "utils.broadcast_object", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_distributed", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.broadcast_object"], ["", "def", "_determine_convergence", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        True if model has converged w.r.t early stopping criteria (patience).\n        Order: first check required minimums (samples, updates, epochs), then\n        check early stopping criteria (checkpoints not improved).\n        \"\"\"", "\n", "if", "self", ".", "config", ".", "min_samples", "is", "not", "None", "and", "self", ".", "state", ".", "samples", "<", "self", ".", "config", ".", "min_samples", ":", "\n", "            ", "logger", ".", "info", "(", "\"Minimum number of samples (%d) not reached yet: %d\"", ",", "\n", "self", ".", "config", ".", "min_samples", ",", "self", ".", "state", ".", "samples", ")", "\n", "return", "False", "\n", "\n", "", "if", "self", ".", "config", ".", "min_updates", "is", "not", "None", "and", "self", ".", "state", ".", "updates", "<", "self", ".", "config", ".", "min_updates", ":", "\n", "            ", "logger", ".", "info", "(", "\"Minimum number of updates (%d) not reached yet: %d\"", ",", "\n", "self", ".", "config", ".", "min_updates", ",", "self", ".", "state", ".", "updates", ")", "\n", "return", "False", "\n", "\n", "", "if", "self", ".", "config", ".", "min_epochs", "is", "not", "None", "and", "self", ".", "state", ".", "epoch", "<", "self", ".", "config", ".", "min_epochs", ":", "\n", "            ", "logger", ".", "info", "(", "\"Minimum number of epochs (%d) not reached yet: %d\"", ",", "\n", "self", ".", "config", ".", "min_epochs", ",", "self", ".", "state", ".", "epoch", ")", "\n", "return", "False", "\n", "\n", "", "if", "(", "self", ".", "config", ".", "max_num_checkpoint_not_improved", "is", "not", "None", "\n", "and", "0", "<=", "self", ".", "config", ".", "max_num_checkpoint_not_improved", "\n", "and", "self", ".", "state", ".", "checkpoint", ">=", "self", ".", "config", ".", "max_num_checkpoint_not_improved", ")", ":", "\n", "# In distrubted mode, the primary worker makes the authoritative", "\n", "# calculation of improvement over the window for evaluating stopping", "\n", "            ", "window_improvement", "=", "0.", "\n", "if", "utils", ".", "is_primary_worker", "(", ")", ":", "\n", "                ", "window_improvement", "=", "abs", "(", "self", ".", "state", ".", "best_metric", "-", "self", ".", "state", ".", "best_metric_history", "[", "0", "]", ")", "\n", "", "if", "utils", ".", "is_distributed", "(", ")", ":", "\n", "                ", "window_improvement", "=", "utils", ".", "broadcast_object", "(", "window_improvement", ")", "\n", "\n", "# <= to correctly handle threshold == 0", "\n", "", "if", "window_improvement", "<=", "self", ".", "config", ".", "checkpoint_improvement_threshold", ":", "\n", "                ", "logger", ".", "info", "(", "\"Maximum number of not improved checkpoints reached: \"", "\n", "\"improvement %f <= %f over %d checkpoints\"", ",", "window_improvement", ",", "\n", "self", ".", "config", ".", "checkpoint_improvement_threshold", ",", "self", ".", "config", ".", "max_num_checkpoint_not_improved", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"Sufficient improvement to continue: %f > %f over %d checkpoints\"", ",", "window_improvement", ",", "\n", "self", ".", "config", ".", "checkpoint_improvement_threshold", ",", "self", ".", "config", ".", "max_num_checkpoint_not_improved", ")", "\n", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._determine_divergence": [[526, 541], ["float", "logger.warning", "metric.get", "numpy.isfinite"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get"], ["", "def", "_determine_divergence", "(", "self", ",", "val_metrics", ":", "List", "[", "loss", ".", "LossMetric", "]", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        True if last perplexity is infinite or >2*target_vocab_size.\n        \"\"\"", "\n", "# (5) detect divergence with respect to the perplexity value at the last checkpoint", "\n", "last_ppl", "=", "float", "(", "'nan'", ")", "\n", "for", "metric", "in", "val_metrics", ":", "\n", "            ", "if", "metric", ".", "name", "==", "C", ".", "PERPLEXITY", ":", "\n", "                ", "last_ppl", "=", "metric", ".", "get", "(", ")", "\n", "break", "\n", "# using a double of uniform distribution's value as a threshold", "\n", "", "", "if", "not", "np", ".", "isfinite", "(", "last_ppl", ")", "or", "last_ppl", ">", "2", "*", "self", ".", "sockeye_model", ".", "config", ".", "vocab_target_size", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Model optimization diverged. Last checkpoint's perplexity: %f\"", ",", "last_ppl", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._adjust_learning_rate": [[542, 562], ["logger.info", "issubclass", "type", "scheduler.new_evaluation_result", "logger.info", "os.path.exists", "os.path.exists", "training.EarlyStoppingTrainer.sockeye_model.load_parameters", "training.EarlyStoppingTrainer._load_optimizer_state"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.lr_scheduler.LearningRateSchedulerPlateauReduce.new_evaluation_result", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.load_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._load_optimizer_state"], ["", "def", "_adjust_learning_rate", "(", "self", ",", "has_improved", ":", "bool", ")", ":", "\n", "        ", "\"\"\"\n        Adjusts the optimizer learning rate if required and logs it.\n        \"\"\"", "\n", "scheduler", "=", "self", ".", "optimizer_config", ".", "lr_scheduler", "\n", "lr", "=", "self", ".", "optimizer_config", ".", "lr", "\n", "if", "scheduler", "is", "not", "None", ":", "\n", "            ", "if", "issubclass", "(", "type", "(", "scheduler", ")", ",", "lr_scheduler", ".", "AdaptiveLearningRateScheduler", ")", ":", "\n", "                ", "lr_adjusted", "=", "scheduler", ".", "new_evaluation_result", "(", "has_improved", ")", "# type: ignore", "\n", "", "else", ":", "\n", "                ", "lr_adjusted", "=", "False", "\n", "", "if", "lr_adjusted", "and", "not", "has_improved", "and", "not", "self", ".", "config", ".", "no_reload_on_learning_rate_reduce", ":", "\n", "                ", "logger", ".", "info", "(", "\"Loading model parameters and optimizer states from best checkpoint: %d\"", ",", "\n", "self", ".", "state", ".", "best_checkpoint", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "best_params_fname", ")", ":", "\n", "                    ", "self", ".", "sockeye_model", ".", "load_parameters", "(", "filename", "=", "self", ".", "best_params_fname", ",", "device", "=", "self", ".", "device", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "best_optimizer_state_fname", ")", ":", "\n", "                    ", "self", ".", "_load_optimizer_state", "(", "self", ".", "best_optimizer_state_fname", ")", "\n", "", "", "lr", "=", "scheduler", ".", "lr", "\n", "", "logger", ".", "info", "(", "\"Checkpoint [%d]\\tLearning-rate=%.6f\"", ",", "self", ".", "state", ".", "checkpoint", ",", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._write_and_log_metrics": [[563, 590], ["training.EarlyStoppingTrainer.state.metrics.append", "utils.write_metrics_file", "training.EarlyStoppingTrainer._tflogger.log_metrics", "training.safe_custom_metrics_logger", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "metric.get", "metric.get"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.write_metrics_file", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TensorboardLogger.log_metrics", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.safe_custom_metrics_logger", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get"], ["", "def", "_write_and_log_metrics", "(", "self", ",", "\n", "train_metrics", ":", "Iterable", "[", "loss", ".", "LossMetric", "]", ",", "\n", "val_metrics", ":", "Iterable", "[", "loss", ".", "LossMetric", "]", ")", ":", "\n", "        ", "\"\"\"\n        Updates metrics for current checkpoint.\n        Writes all metrics to the metrics file, optionally logs to tensorboard, and sends metrics to custom logger.\n        \"\"\"", "\n", "data", "=", "{", "\"epoch\"", ":", "self", ".", "state", ".", "epoch", ",", "\n", "\"learning-rate\"", ":", "(", "self", ".", "optimizer_config", ".", "lr", "if", "self", ".", "optimizer_config", ".", "lr_scheduler", "is", "None", "\n", "else", "self", ".", "optimizer_config", ".", "lr_scheduler", ".", "lr", ")", ",", "\n", "\"time-elapsed\"", ":", "self", ".", "state", ".", "time_elapsed", ",", "\n", "\"max-gpu-memory\"", ":", "torch", ".", "cuda", ".", "max_memory_allocated", "(", "self", ".", "device", ")", ",", "\n", "\"converged\"", ":", "self", ".", "state", ".", "converged", ",", "\n", "\"diverged\"", ":", "self", ".", "state", ".", "diverged", "}", "\n", "\n", "for", "metric", "in", "train_metrics", ":", "\n", "            ", "data", "[", "\"%s-train\"", "%", "metric", ".", "name", "]", "=", "metric", ".", "get", "(", ")", "\n", "", "for", "metric", "in", "val_metrics", ":", "\n", "            ", "data", "[", "\"%s-val\"", "%", "metric", ".", "name", "]", "=", "metric", ".", "get", "(", ")", "\n", "\n", "", "self", ".", "state", ".", "metrics", ".", "append", "(", "data", ")", "\n", "utils", ".", "write_metrics_file", "(", "self", ".", "state", ".", "metrics", ",", "self", ".", "metrics_fname", ")", "\n", "\n", "self", ".", "_tflogger", ".", "log_metrics", "(", "metrics", "=", "data", ",", "checkpoint", "=", "self", ".", "state", ".", "checkpoint", ")", "\n", "safe_custom_metrics_logger", "(", "logging_function", "=", "self", ".", "_custom_metrics_logger", ",", "\n", "metrics", "=", "data", ",", "\n", "global_step", "=", "self", ".", "state", ".", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._update_best_params": [[591, 600], ["os.path.lexists", "os.symlink", "logger.info", "os.remove"], "methods", ["None"], ["", "def", "_update_best_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Updates the params.best link to the latest best parameter file.\n        \"\"\"", "\n", "actual_best_params_fname", "=", "C", ".", "PARAMS_NAME", "%", "self", ".", "state", ".", "best_checkpoint", "\n", "if", "os", ".", "path", ".", "lexists", "(", "self", ".", "best_params_fname", ")", ":", "\n", "            ", "os", ".", "remove", "(", "self", ".", "best_params_fname", ")", "\n", "", "os", ".", "symlink", "(", "actual_best_params_fname", ",", "self", ".", "best_params_fname", ")", "\n", "logger", ".", "info", "(", "\"'%s' now points to '%s'\"", ",", "self", ".", "best_params_fname", ",", "actual_best_params_fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._save_params": [[601, 610], ["training.EarlyStoppingTrainer.sockeye_model.save_parameters", "training.cleanup_params_files"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.save_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.cleanup_params_files"], ["", "def", "_save_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Saves model parameters at current checkpoint and optionally cleans up older parameter files to save disk space.\n        \"\"\"", "\n", "self", ".", "sockeye_model", ".", "save_parameters", "(", "self", ".", "current_params_fname", ")", "\n", "cleanup_params_files", "(", "self", ".", "config", ".", "output_dir", ",", "self", ".", "config", ".", "max_params_files_to_keep", ",", "self", ".", "state", ".", "checkpoint", ",", "\n", "self", ".", "state", ".", "best_checkpoint", ",", "self", ".", "config", ".", "keep_initializations", ",", "\n", "self", ".", "config", ".", "max_params_files_to_cache", ",", "self", ".", "config", ".", "cache_metric", ",", "\n", "self", ".", "config", ".", "cache_strategy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._save_optimizer_state": [[611, 614], ["torch.save", "torch.save", "torch.save", "torch.save", "logger.info", "training.EarlyStoppingTrainer.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save"], ["", "def", "_save_optimizer_state", "(", "self", ",", "fname", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "fname", ")", "\n", "logger", ".", "info", "(", "'Saved optimizer state to \"%s\"'", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._load_optimizer_state": [[615, 618], ["training.EarlyStoppingTrainer.optimizer.load_state_dict", "logger.info", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load"], ["", "def", "_load_optimizer_state", "(", "self", ",", "fname", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "fname", ",", "map_location", "=", "self", ".", "device", ")", ")", "\n", "logger", ".", "info", "(", "'Loaded optimizer state from \"%s\"'", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._save_lr_scheduler": [[619, 624], ["logger.info", "open", "pickle.dump"], "methods", ["None"], ["", "def", "_save_lr_scheduler", "(", "self", ",", "fname", ")", ":", "\n", "        ", "if", "self", ".", "optimizer_config", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "fname", ",", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "optimizer_config", ".", "lr_scheduler", ",", "fp", ")", "\n", "", "logger", ".", "info", "(", "\"Saved '%s' to '%s'\"", ",", "self", ".", "optimizer_config", ".", "lr_scheduler", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._load_lr_scheduler": [[625, 630], ["os.path.exists", "logger.info", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load"], ["", "", "def", "_load_lr_scheduler", "(", "self", ",", "fname", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "fname", ")", ":", "\n", "            ", "with", "open", "(", "fname", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "                ", "self", ".", "optimizer_config", ".", "lr_scheduler", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "logger", ".", "info", "(", "\"Loaded '%s' from '%s'\"", ",", "self", ".", "optimizer_config", ".", "lr_scheduler", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._save_training_state": [[631, 690], ["os.path.join", "os.path.join", "os.path.exists", "os.symlink", "os.path.join", "training.EarlyStoppingTrainer._save_optimizer_state", "train_iter.save_state", "training.EarlyStoppingTrainer.state.save", "os.path.join", "training.EarlyStoppingTrainer._save_lr_scheduler", "os.path.join", "os.path.exists", "os.rename", "os.path.exists", "os.path.exists", "os.mkdir", "os.unlink", "os.path.join", "os.path.join", "open", "pickle.dump", "pickle.dump", "pickle.dump", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.rename", "os.path.join", "random.getstate", "numpy.random.get_state", "torch.random.get_rng_state", "torch.random.get_rng_state", "torch.random.get_rng_state", "torch.random.get_rng_state", "training.EarlyStoppingTrainer._scaler.state_dict", "os.path.join", "apex.amp.state_dict", "os.path.join", "shutil.rmtree", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._save_optimizer_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.save_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._save_lr_scheduler", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.save"], ["", "", "def", "_save_training_state", "(", "self", ",", "train_iter", ":", "data_io", ".", "BaseParallelSampleIter", ")", ":", "\n", "        ", "\"\"\"\n        Saves current training state.\n        \"\"\"", "\n", "# Create temporary directory for storing the state of the optimization process", "\n", "training_state_dirname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "output_dir", ",", "C", ".", "TRAINING_STATE_TEMP_DIRNAME", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "training_state_dirname", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "training_state_dirname", ")", "\n", "\n", "# (1) Parameters: link current file", "\n", "", "params_base_fname", "=", "C", ".", "PARAMS_NAME", "%", "self", ".", "state", ".", "checkpoint", "\n", "params_file", "=", "os", ".", "path", ".", "join", "(", "training_state_dirname", ",", "C", ".", "TRAINING_STATE_PARAMS_NAME", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "params_file", ")", ":", "\n", "            ", "os", ".", "unlink", "(", "params_file", ")", "\n", "", "os", ".", "symlink", "(", "os", ".", "path", ".", "join", "(", "\"..\"", ",", "params_base_fname", ")", ",", "params_file", ")", "\n", "\n", "# (2) Optimizer state", "\n", "opt_state_fname", "=", "os", ".", "path", ".", "join", "(", "training_state_dirname", ",", "C", ".", "OPT_STATE_LAST", ")", "\n", "self", ".", "_save_optimizer_state", "(", "opt_state_fname", ")", "\n", "\n", "# (3) Data iterator", "\n", "train_iter", ".", "save_state", "(", "os", ".", "path", ".", "join", "(", "training_state_dirname", ",", "C", ".", "BUCKET_ITER_STATE_NAME", ")", ")", "\n", "\n", "# (4) Random generators", "\n", "# RNG states: python, numpy, torch", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "training_state_dirname", ",", "C", ".", "RNG_STATE_NAME", ")", ",", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "random", ".", "getstate", "(", ")", ",", "fp", ")", "\n", "pickle", ".", "dump", "(", "np", ".", "random", ".", "get_state", "(", ")", ",", "fp", ")", "\n", "pickle", ".", "dump", "(", "torch", ".", "random", ".", "get_rng_state", "(", ")", ",", "fp", ")", "\n", "\n", "# (5) Training state", "\n", "", "self", ".", "state", ".", "save", "(", "os", ".", "path", ".", "join", "(", "training_state_dirname", ",", "C", ".", "TRAINING_STATE_NAME", ")", ")", "\n", "\n", "# (5.5) lr_scheduler", "\n", "lr_scheduler_fname", "=", "os", ".", "path", ".", "join", "(", "training_state_dirname", ",", "C", ".", "LR_SCHEDULER_LAST", ")", "\n", "self", ".", "_save_lr_scheduler", "(", "lr_scheduler_fname", ")", "\n", "\n", "# (6) AMP grad scaler state", "\n", "if", "self", ".", "using_amp", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "_scaler", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "training_state_dirname", ",", "C", ".", "GRAD_SCALER_STATE_NAME", ")", ")", "\n", "", "if", "self", ".", "using_apex_amp", ":", "\n", "            ", "torch", ".", "save", "(", "apex", ".", "amp", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "training_state_dirname", ",", "C", ".", "APEX_AMP_STATE_NAME", ")", ")", "\n", "\n", "# First we rename the existing directory to minimize the risk of state", "\n", "# loss if the process is aborted during deletion (which will be slower", "\n", "# than directory renaming)", "\n", "", "delete_training_state_dirname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "output_dir", ",", "C", ".", "TRAINING_STATE_TEMP_DELETENAME", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "training_state_dirname", ")", ":", "\n", "            ", "os", ".", "rename", "(", "self", ".", "training_state_dirname", ",", "delete_training_state_dirname", ")", "\n", "", "os", ".", "rename", "(", "training_state_dirname", ",", "self", ".", "training_state_dirname", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "delete_training_state_dirname", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "delete_training_state_dirname", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "# This can be occur on file systems with higher latency, such as", "\n", "# distributed file systems.  While repeated occurrences of this", "\n", "# warning may indicate a problem, seeing one or two warnings", "\n", "# during training is usually fine.", "\n", "                ", "logger", ".", "warning", "(", "'Directory has already been removed: %s'", ",", "delete_training_state_dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._load_training_state": [[691, 732], ["os.path.join", "training.EarlyStoppingTrainer.sockeye_model.load_parameters", "os.path.join", "training.EarlyStoppingTrainer._load_optimizer_state", "train_iter.load_state", "training.TrainState.load", "os.path.join", "training.EarlyStoppingTrainer._load_lr_scheduler", "logger.info", "os.path.join", "open", "random.setstate", "numpy.random.set_state", "torch.random.set_rng_state", "torch.random.set_rng_state", "torch.random.set_rng_state", "torch.random.set_rng_state", "os.path.join", "training.EarlyStoppingTrainer._scaler.load_state_dict", "apex.amp.load_state_dict", "os.path.join", "pickle.load", "pickle.load", "pickle.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.SockeyeModel.load_parameters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._load_optimizer_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.ParallelSampleIter.load_state", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._load_lr_scheduler", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load"], ["", "", "", "def", "_load_training_state", "(", "self", ",", "train_iter", ":", "data_io", ".", "BaseParallelSampleIter", ")", ":", "\n", "        ", "\"\"\"\n        Loads the full training state from disk.\n        :param train_iter: training data iterator.\n        \"\"\"", "\n", "# (1) Parameters", "\n", "params_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_state_dirname", ",", "C", ".", "TRAINING_STATE_PARAMS_NAME", ")", "\n", "self", ".", "sockeye_model", ".", "load_parameters", "(", "params_fname", ",", "device", "=", "self", ".", "device", ",", "allow_missing", "=", "False", ",", "ignore_extra", "=", "False", ")", "\n", "\n", "# (2) Optimizer states", "\n", "opt_state_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_state_dirname", ",", "C", ".", "OPT_STATE_LAST", ")", "\n", "self", ".", "_load_optimizer_state", "(", "opt_state_fname", ")", "\n", "\n", "# (3) Data Iterator", "\n", "train_iter", ".", "load_state", "(", "os", ".", "path", ".", "join", "(", "self", ".", "training_state_dirname", ",", "C", ".", "BUCKET_ITER_STATE_NAME", ")", ")", "\n", "\n", "# (4) Random generators", "\n", "# RNG states: python, numpy, torch", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "training_state_dirname", ",", "C", ".", "RNG_STATE_NAME", ")", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "            ", "random", ".", "setstate", "(", "pickle", ".", "load", "(", "fp", ")", ")", "\n", "np", ".", "random", ".", "set_state", "(", "pickle", ".", "load", "(", "fp", ")", ")", "\n", "torch", ".", "random", ".", "set_rng_state", "(", "pickle", ".", "load", "(", "fp", ")", ")", "\n", "\n", "# (5) Training state", "\n", "", "self", ".", "state", "=", "TrainState", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "training_state_dirname", ",", "C", ".", "TRAINING_STATE_NAME", ")", ")", "\n", "\n", "# (5.5) lr_scheduler", "\n", "lr_scheduler_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_state_dirname", ",", "C", ".", "LR_SCHEDULER_LAST", ")", "\n", "self", ".", "_load_lr_scheduler", "(", "lr_scheduler_fname", ")", "\n", "\n", "# (6) AMP grad scaler state", "\n", "if", "self", ".", "using_amp", ":", "\n", "            ", "self", ".", "_scaler", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "training_state_dirname", ",", "C", ".", "GRAD_SCALER_STATE_NAME", ")", ")", ")", "\n", "", "if", "self", ".", "using_apex_amp", ":", "\n", "            ", "apex", ".", "amp", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "training_state_dirname", ",", "C", ".", "APEX_AMP_STATE_NAME", ")", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Training State: epoch=%d, checkpoint=%d batches=%d updates=%d best_metric=%.2f, \"", "\"best_checkpoint=%d time_elapsed=%d\"", "%", "(", "\n", "self", ".", "state", ".", "epoch", ",", "self", ".", "state", ".", "checkpoint", ",", "self", ".", "state", ".", "batches", ",", "self", ".", "state", ".", "updates", ",", "\n", "self", ".", "state", ".", "best_metric", ",", "self", ".", "state", ".", "best_checkpoint", ",", "self", ".", "state", ".", "time_elapsed", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer._cleanup": [[733, 749], ["training.cleanup_params_files", "os.path.exists", "os.path.exists", "os.path.exists", "shutil.rmtree", "os.remove", "os.remove"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.cleanup_params_files"], ["", "def", "_cleanup", "(", "self", ",", "keep_training_state", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Cleans parameter files, training state directory and waits for remaining decoding processes.\n        \"\"\"", "\n", "cleanup_params_files", "(", "self", ".", "config", ".", "output_dir", ",", "self", ".", "config", ".", "max_params_files_to_keep", ",", "\n", "self", ".", "state", ".", "checkpoint", ",", "self", ".", "state", ".", "best_checkpoint", ",", "self", ".", "config", ".", "keep_initializations", ",", "\n", "self", ".", "config", ".", "max_params_files_to_cache", ",", "self", ".", "config", ".", "cache_metric", ",", "\n", "self", ".", "config", ".", "cache_strategy", ")", "\n", "\n", "if", "not", "keep_training_state", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "training_state_dirname", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "self", ".", "training_state_dirname", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "best_optimizer_state_fname", ")", ":", "\n", "                ", "os", ".", "remove", "(", "self", ".", "best_optimizer_state_fname", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "best_lr_scheduler_fname", ")", ":", "\n", "                ", "os", ".", "remove", "(", "self", ".", "best_lr_scheduler_fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer.metrics_fname": [[750, 753], ["os.path.join"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "metrics_fname", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "output_dir", ",", "C", ".", "METRICS_NAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer.current_params_fname": [[754, 757], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "current_params_fname", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "output_dir", ",", "C", ".", "PARAMS_NAME", "%", "self", ".", "state", ".", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer.best_params_fname": [[758, 761], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "best_params_fname", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "output_dir", ",", "C", ".", "PARAMS_BEST_NAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer.training_state_dirname": [[762, 765], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "training_state_dirname", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "output_dir", ",", "C", ".", "TRAINING_STATE_DIRNAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer.best_optimizer_state_fname": [[766, 769], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "best_optimizer_state_fname", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "output_dir", ",", "C", ".", "OPT_STATE_BEST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.EarlyStoppingTrainer.best_lr_scheduler_fname": [[770, 773], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "best_lr_scheduler_fname", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "output_dir", ",", "C", ".", "LR_SCHEDULER_BEST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TensorboardLogger.__init__": [[785, 799], ["vocab.get_ordered_tokens_from_vocab", "vocab.get_ordered_tokens_from_vocab", "logger.info", "SummaryWriter", "logger.info"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.get_ordered_tokens_from_vocab", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.get_ordered_tokens_from_vocab"], ["def", "__init__", "(", "self", ",", "\n", "logdir", ":", "str", ",", "\n", "source_vocab", ":", "Optional", "[", "vocab", ".", "Vocab", "]", "=", "None", ",", "\n", "target_vocab", ":", "Optional", "[", "vocab", ".", "Vocab", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "logdir", "=", "logdir", "\n", "self", ".", "source_labels", "=", "vocab", ".", "get_ordered_tokens_from_vocab", "(", "source_vocab", ")", "if", "source_vocab", "is", "not", "None", "else", "None", "\n", "self", ".", "target_labels", "=", "vocab", ".", "get_ordered_tokens_from_vocab", "(", "target_vocab", ")", "if", "target_vocab", "is", "not", "None", "else", "None", "\n", "try", ":", "\n", "            ", "from", "torch", ".", "utils", ".", "tensorboard", "import", "SummaryWriter", "\n", "logger", ".", "info", "(", "\"Logging training events for Tensorboard at '%s'\"", ",", "self", ".", "logdir", ")", "\n", "self", ".", "_writer", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "logdir", ",", "flush_secs", "=", "60", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "info", "(", "\"tensorboard not found. Consider 'pip install tensorboard' to log events to Tensorboard.\"", ")", "\n", "self", ".", "_writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TensorboardLogger.log_metrics": [[800, 815], ["metrics.items", "training.TensorboardLogger._writer.flush", "isinstance", "torch.isfinite().sum().item", "torch.isfinite().sum().item", "torch.isfinite().sum().item", "torch.isfinite().sum().item", "training.TensorboardLogger._writer.add_histogram", "logger.warning", "training.TensorboardLogger._writer.add_scalar", "torch.isfinite().sum", "torch.isfinite().sum", "torch.isfinite().sum", "torch.isfinite().sum", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite"], "methods", ["None"], ["", "", "def", "log_metrics", "(", "self", ",", "metrics", ":", "Dict", "[", "str", ",", "Union", "[", "float", ",", "int", ",", "torch", ".", "Tensor", "]", "]", ",", "checkpoint", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "_writer", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "for", "name", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "if", "torch", ".", "isfinite", "(", "value", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "value", ".", "size", ":", "\n", "                    ", "self", ".", "_writer", ".", "add_histogram", "(", "tag", "=", "name", ",", "values", "=", "value", ",", "bins", "=", "100", ",", "global_step", "=", "checkpoint", ")", "\n", "", "else", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Histogram of %s not logged to tensorboard because of infinite data.\"", ")", "\n", "", "", "elif", "value", "is", "None", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "self", ".", "_writer", ".", "add_scalar", "(", "tag", "=", "name", ",", "scalar_value", "=", "value", ",", "global_step", "=", "checkpoint", ")", "\n", "", "", "self", ".", "_writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.Speedometer.__init__": [[822, 831], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "frequency", ":", "int", "=", "50", ",", "auto_reset", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "self", ".", "frequency", "=", "frequency", "\n", "self", ".", "init", "=", "False", "\n", "self", ".", "tic", "=", "0.0", "\n", "self", ".", "last_count", "=", "0", "\n", "self", ".", "auto_reset", "=", "auto_reset", "\n", "self", ".", "samples", "=", "0", "\n", "self", ".", "tokens", "=", "0", "\n", "self", ".", "msg", "=", "'E=%d B=%d\\ts/sec=%.2f tok/sec=%.2f u/sec=%.2f\\t'", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.Speedometer.__call__": [[832, 867], ["time.time", "time.time", "time.time", "max", "logger.info", "logger.info", "metric_values.append", "metric.reset", "sum", "metric.get", "len"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.LossMetric.reset", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get"], ["", "def", "__call__", "(", "self", ",", "epoch", ":", "int", ",", "batches", ":", "int", ",", "updates", ":", "int", ",", "samples", ":", "int", ",", "\n", "tokens", ":", "int", ",", "metrics", ":", "Optional", "[", "Iterable", "[", "loss", ".", "LossMetric", "]", "]", "=", "None", ")", ":", "\n", "        ", "count", "=", "batches", "\n", "if", "self", ".", "last_count", ">", "count", ":", "\n", "            ", "self", ".", "init", "=", "False", "\n", "", "self", ".", "last_count", "=", "count", "\n", "self", ".", "samples", "+=", "samples", "\n", "self", ".", "tokens", "+=", "tokens", "\n", "\n", "if", "self", ".", "init", ":", "\n", "            ", "if", "count", "%", "self", ".", "frequency", "==", "0", ":", "\n", "                ", "toc", "=", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tic", ")", "\n", "update_interval", "=", "batches", "/", "max", "(", "1", ",", "updates", ")", "\n", "updates_per_sec", "=", "self", ".", "frequency", "/", "update_interval", "/", "toc", "\n", "samples_per_sec", "=", "self", ".", "samples", "/", "toc", "\n", "tokens_per_sec", "=", "self", ".", "tokens", "/", "toc", "\n", "self", ".", "samples", "=", "0", "\n", "self", ".", "tokens", "=", "0", "\n", "\n", "if", "metrics", "is", "not", "None", ":", "\n", "                    ", "metric_values", "=", "[", "]", "# type: List[Tuple[str, float]]", "\n", "for", "metric", "in", "metrics", ":", "\n", "                        ", "metric_values", ".", "append", "(", "(", "metric", ".", "short_name", ",", "metric", ".", "get", "(", ")", ")", ")", "\n", "if", "self", ".", "auto_reset", ":", "\n", "                            ", "metric", ".", "reset", "(", ")", "\n", "", "", "logger", ".", "info", "(", "self", ".", "msg", "+", "'%s=%f '", "*", "len", "(", "metric_values", ")", ",", "\n", "epoch", ",", "count", ",", "samples_per_sec", ",", "tokens_per_sec", ",", "updates_per_sec", ",", "*", "sum", "(", "metric_values", ",", "(", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "logger", ".", "info", "(", "self", ".", "msg", ",", "epoch", ",", "count", ",", "samples_per_sec", ",", "tokens_per_sec", ",", "updates_per_sec", ")", "\n", "\n", "", "self", ".", "tic", "=", "time", ".", "time", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "init", "=", "True", "\n", "self", ".", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.safe_custom_metrics_logger": [[869, 885], ["logging_function", "logging.warning", "str"], "function", ["None"], ["", "", "", "def", "safe_custom_metrics_logger", "(", "logging_function", ":", "Callable", ",", "\n", "metrics", ":", "Dict", ",", "\n", "global_step", ":", "int", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    A thin wrapper for calling a custom metrics logging function, if supplied. As it uses an external function,\n    it should never throw an exception. If there is no logging_function supplied, the function does nothing.\n    :param logging_function: The function supplied by a caller of sockeye.train\n    :param metrics: A non-empty dict of (nonempty str, float/int/bool) pairs.\n    :param global_step: Optional argument, which can be used e.g. by Tensorboard.\n    \"\"\"", "\n", "if", "logging_function", "is", "None", ":", "\n", "        ", "return", "\n", "", "try", ":", "\n", "        ", "logging_function", "(", "metrics", ",", "global_step", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "logging", ".", "warning", "(", "\"Didn't use custom metrics logger, exception '{}' occurred\"", ".", "format", "(", "str", "(", "e", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.cleanup_params_files": [[887, 945], ["set", "os.path.join", "glob.glob", "os.path.join", "range", "os.path.exists", "utils.get_validation_metric_points", "set", "os.path.join", "max", "average.strategy_best", "average.strategy_last", "average.strategy_lifespan", "RuntimeError", "os.remove", "logger.warning"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_validation_metric_points", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.strategy_best", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.strategy_last", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.average.strategy_lifespan"], ["", "", "def", "cleanup_params_files", "(", "output_folder", ":", "str", ",", "max_to_keep", ":", "int", ",", "checkpoint", ":", "int", ",", "best_checkpoint", ":", "int", ",", "keep_first", ":", "bool", ",", "\n", "max_params_files_to_cache", ":", "int", ",", "cache_metric", ":", "str", ",", "cache_strategy", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Deletes oldest parameter files from a model folder.\n\n    :param output_folder: Folder where param files are located.\n    :param max_to_keep: Maximum number of files to keep, negative to keep all.\n    :param checkpoint: Current checkpoint (i.e. index of last params file created).\n    :param best_checkpoint: Best checkpoint. The parameter file corresponding to this checkpoint will not be deleted.\n    :param keep_first: Don't delete the first checkpoint.\n    :param max_params_files_to_cache: Maximum number of best param files to cache.\n    :param cache_metric: Metric to determine best param files.\n    :param cache_strategy: Strategy to select 'best' param files.\n    \"\"\"", "\n", "if", "max_to_keep", "<=", "0", ":", "\n", "        ", "return", "\n", "\n", "# make sure we keep N best params files from .metrics file according to strategy.", "\n", "", "top_n", ":", "Set", "[", "int", "]", "=", "set", "(", ")", "\n", "metrics_path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "C", ".", "METRICS_NAME", ")", "\n", "\n", "if", "max_params_files_to_cache", ">", "0", "and", "os", ".", "path", ".", "exists", "(", "metrics_path", ")", ":", "\n", "        ", "maximize", "=", "C", ".", "METRIC_MAXIMIZE", "[", "cache_metric", "]", "\n", "points", "=", "utils", ".", "get_validation_metric_points", "(", "model_path", "=", "output_folder", ",", "metric", "=", "cache_metric", ")", "\n", "\n", "if", "cache_strategy", "==", "C", ".", "AVERAGE_BEST", ":", "\n", "# N best scoring points", "\n", "            ", "top", "=", "average", ".", "strategy_best", "(", "points", ",", "max_params_files_to_cache", ",", "maximize", ")", "\n", "\n", "", "elif", "cache_strategy", "==", "C", ".", "AVERAGE_LAST", ":", "\n", "# N sequential points ending with overall best", "\n", "            ", "top", "=", "average", ".", "strategy_last", "(", "points", ",", "max_params_files_to_cache", ",", "maximize", ")", "\n", "\n", "", "elif", "cache_strategy", "==", "C", ".", "AVERAGE_LIFESPAN", ":", "\n", "# Track lifespan of every \"new best\" point", "\n", "# Points dominated by a previous better point have lifespan 0", "\n", "            ", "top", "=", "average", ".", "strategy_lifespan", "(", "points", ",", "max_params_files_to_cache", ",", "maximize", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Unknown strategy, options are: %s\"", "%", "C", ".", "AVERAGE_CHOICES", ")", "\n", "\n", "", "top_n", "=", "set", "(", "[", "x", "[", "1", "]", "for", "x", "in", "top", "]", ")", "\n", "\n", "# get rid of params files that are neither among the latest, nor among the best", "\n", "", "existing_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "C", ".", "PARAMS_PREFIX", "+", "\"*\"", ")", ")", "\n", "params_name_with_dir", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "C", ".", "PARAMS_NAME", ")", "\n", "\n", "for", "n", "in", "range", "(", "1", "if", "keep_first", "else", "0", ",", "max", "(", "1", ",", "checkpoint", "-", "max_to_keep", "+", "1", ")", ")", ":", "\n", "        ", "if", "n", "!=", "best_checkpoint", ":", "\n", "            ", "param_fname_n", "=", "params_name_with_dir", "%", "n", "\n", "if", "param_fname_n", "in", "existing_files", "and", "n", "not", "in", "top_n", ":", "\n", "                ", "try", ":", "\n", "                    ", "os", ".", "remove", "(", "param_fname_n", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "# This can be occur on file systems with higher latency,", "\n", "# such as distributed file systems.  While repeated", "\n", "# occurrences of this warning may indicate a problem, seeing", "\n", "# one or two warnings during training is usually fine.", "\n", "                    ", "logger", ".", "warning", "(", "'File has already been removed: %s'", ",", "param_fname_n", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.prepare_data.main": [[28, 33], ["arguments.ConfigArgumentParser", "arguments.add_prepare_data_cli_args", "arguments.ConfigArgumentParser.parse_args", "prepare_data.prepare_data"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_prepare_data_cli_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.prepare_data.prepare_data"], ["def", "main", "(", ")", ":", "\n", "    ", "params", "=", "arguments", ".", "ConfigArgumentParser", "(", "description", "=", "'Preprocesses and shards training data.'", ")", "\n", "arguments", ".", "add_prepare_data_cli_args", "(", "params", ")", "\n", "args", "=", "params", ".", "parse_args", "(", ")", "\n", "prepare_data", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.prepare_data.prepare_data": [[35, 118], ["os.path.abspath", "os.makedirs", "log.setup_main_logger", "utils.log_basic_info", "arguments.save_args", "utils.seed_rngs", "logger.info", "data_io.get_num_shards", "logger.info", "data_io.create_shards", "os.path.join", "utils.smart_open", "sum", "utils.create_pool", "vocab.load_or_create_vocabs", "data_io.prepare_data", "os.path.join", "range", "range", "zip", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.setup_main_logger", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.log_basic_info", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.save_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.seed_rngs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_num_shards", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.create_shards", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.create_pool", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_or_create_vocabs", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.prepare_data.prepare_data"], ["", "def", "prepare_data", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "output_folder", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "output", ")", "\n", "os", ".", "makedirs", "(", "output_folder", ",", "exist_ok", "=", "True", ")", "\n", "setup_main_logger", "(", "console", "=", "not", "args", ".", "quiet", ",", "\n", "file_logging", "=", "not", "args", ".", "no_logfile", ",", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "C", ".", "LOG_NAME", ")", ")", "\n", "utils", ".", "log_basic_info", "(", "args", ")", "\n", "arguments", ".", "save_args", "(", "args", ",", "os", ".", "path", ".", "join", "(", "output_folder", ",", "C", ".", "ARGS_STATE_NAME", ")", ")", "\n", "utils", ".", "seed_rngs", "(", "args", ".", "seed", ")", "\n", "\n", "minimum_num_shards", "=", "args", ".", "min_num_shards", "\n", "samples_per_shard", "=", "args", ".", "num_samples_per_shard", "\n", "bucketing", "=", "not", "args", ".", "no_bucketing", "\n", "bucket_width", "=", "args", ".", "bucket_width", "\n", "bucket_scaling", "=", "args", ".", "bucket_scaling", "\n", "\n", "source_paths", "=", "[", "args", ".", "source", "]", "+", "args", ".", "source_factors", "\n", "source_factor_vocab_paths", "=", "[", "args", ".", "source_factor_vocabs", "[", "i", "]", "if", "i", "<", "len", "(", "args", ".", "source_factor_vocabs", ")", "\n", "else", "None", "for", "i", "in", "range", "(", "len", "(", "args", ".", "source_factors", ")", ")", "]", "\n", "source_vocab_paths", "=", "[", "args", ".", "source_vocab", "]", "+", "source_factor_vocab_paths", "\n", "target_paths", "=", "[", "args", ".", "target", "]", "+", "args", ".", "target_factors", "\n", "target_factor_vocab_paths", "=", "[", "args", ".", "target_factor_vocabs", "[", "i", "]", "if", "i", "<", "len", "(", "args", ".", "target_factor_vocabs", ")", "\n", "else", "None", "for", "i", "in", "range", "(", "len", "(", "args", ".", "target_factors", ")", ")", "]", "\n", "target_vocab_paths", "=", "[", "args", ".", "target_vocab", "]", "+", "target_factor_vocab_paths", "\n", "\n", "num_words_source", ",", "num_words_target", "=", "args", ".", "num_words", "\n", "num_words_source", "=", "num_words_source", "if", "num_words_source", ">", "0", "else", "None", "\n", "num_words_target", "=", "num_words_target", "if", "num_words_target", ">", "0", "else", "None", "\n", "\n", "word_min_count_source", ",", "word_min_count_target", "=", "args", ".", "word_min_count", "\n", "max_seq_len_source", ",", "max_seq_len_target", "=", "args", ".", "max_seq_len", "\n", "# The maximum length is the length before we add the BOS/EOS symbols", "\n", "max_seq_len_source", "=", "max_seq_len_source", "+", "C", ".", "SPACE_FOR_XOS", "\n", "max_seq_len_target", "=", "max_seq_len_target", "+", "C", ".", "SPACE_FOR_XOS", "\n", "logger", ".", "info", "(", "\"Adjusting maximum length to reserve space for a BOS/EOS marker. New maximum length: (%d, %d)\"", ",", "\n", "max_seq_len_source", ",", "max_seq_len_target", ")", "\n", "\n", "# Split input into shards and randomly assign data to shards", "\n", "with", "utils", ".", "smart_open", "(", "source_paths", "[", "0", "]", ",", "mode", "=", "'rb'", ")", "as", "infile", ":", "\n", "        ", "num_sents", "=", "sum", "(", "1", "for", "_", "in", "infile", ")", "\n", "", "num_shards", "=", "data_io", ".", "get_num_shards", "(", "num_sents", ",", "samples_per_shard", ",", "minimum_num_shards", ")", "\n", "logger", ".", "info", "(", "\"%d samples will be split into %d shard(s) (requested samples/shard=%d, min_num_shards=%d).\"", "\n", "%", "(", "num_sents", ",", "num_shards", ",", "samples_per_shard", ",", "minimum_num_shards", ")", ")", "\n", "shards", ",", "keep_tmp_shard_files", "=", "data_io", ".", "create_shards", "(", "source_fnames", "=", "source_paths", ",", "\n", "target_fnames", "=", "target_paths", ",", "\n", "num_shards", "=", "num_shards", ",", "\n", "output_prefix", "=", "output_folder", ")", "\n", "shard_source_paths", ",", "shard_target_paths", "=", "[", "paths", "for", "paths", "in", "zip", "(", "*", "shards", ")", "]", "\n", "\n", "# Process shards in parallel using max_processes process", "\n", "with", "utils", ".", "create_pool", "(", "args", ".", "max_processes", ")", "as", "pool", ":", "\n", "        ", "source_vocabs", ",", "target_vocabs", "=", "vocab", ".", "load_or_create_vocabs", "(", "\n", "shard_source_paths", "=", "shard_source_paths", ",", "\n", "source_factor_vocab_same_as_source", "=", "args", ".", "source_factors_use_source_vocab", ",", "\n", "target_factor_vocab_same_as_target", "=", "args", ".", "target_factors_use_target_vocab", ",", "\n", "shard_target_paths", "=", "shard_target_paths", ",", "\n", "source_vocab_paths", "=", "source_vocab_paths", ",", "\n", "target_vocab_paths", "=", "target_vocab_paths", ",", "\n", "shared_vocab", "=", "args", ".", "shared_vocab", ",", "\n", "num_words_source", "=", "num_words_source", ",", "\n", "word_min_count_source", "=", "word_min_count_source", ",", "\n", "num_words_target", "=", "num_words_target", ",", "\n", "word_min_count_target", "=", "word_min_count_target", ",", "\n", "pad_to_multiple_of", "=", "args", ".", "pad_vocab_to_multiple_of", ",", "\n", "mapper", "=", "pool", ".", "map", ")", "\n", "\n", "data_io", ".", "prepare_data", "(", "source_fnames", "=", "source_paths", ",", "\n", "target_fnames", "=", "target_paths", ",", "\n", "source_vocabs", "=", "source_vocabs", ",", "\n", "target_vocabs", "=", "target_vocabs", ",", "\n", "source_vocab_paths", "=", "source_vocab_paths", ",", "\n", "target_vocab_paths", "=", "[", "args", ".", "target_vocab", "]", ",", "\n", "shared_vocab", "=", "args", ".", "shared_vocab", ",", "\n", "max_seq_len_source", "=", "max_seq_len_source", ",", "\n", "max_seq_len_target", "=", "max_seq_len_target", ",", "\n", "bucketing", "=", "bucketing", ",", "\n", "bucket_width", "=", "bucket_width", ",", "\n", "num_shards", "=", "num_shards", ",", "\n", "output_prefix", "=", "output_folder", ",", "\n", "bucket_scaling", "=", "bucket_scaling", ",", "\n", "pool", "=", "pool", ",", "\n", "shards", "=", "shards", ",", "\n", "keep_tmp_shard_files", "=", "keep_tmp_shard_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.score.main": [[38, 44], ["arguments.ConfigArgumentParser", "arguments.add_score_cli_args", "arguments.ConfigArgumentParser.parse_args", "utils.check_condition", "score.score"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_score_cli_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.score.score"], ["def", "main", "(", ")", ":", "\n", "    ", "params", "=", "arguments", ".", "ConfigArgumentParser", "(", "description", "=", "'Score data with an existing model.'", ")", "\n", "arguments", ".", "add_score_cli_args", "(", "params", ")", "\n", "args", "=", "params", ".", "parse_args", "(", ")", "\n", "check_condition", "(", "args", ".", "batch_type", "==", "C", ".", "BATCH_TYPE_SENTENCE", ",", "\"Batching by number of words is not supported\"", ")", "\n", "score", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.score.score": [[46, 112], ["log.setup_main_logger", "utils.log_basic_info", "logger.info", "model.load_model", "model.eval", "utils.check_condition", "data_io.get_scoring_data_iters", "scoring.BatchScorer", "scoring.BatchScorer.to", "scoring.Scorer", "scoring.Scorer.score", "torch.cuda.is_available", "logger.info", "torch.device", "torch.device", "min", "min", "str", "str", "os.path.abspath", "os.path.abspath", "len", "logger.info", "beam_search.CandidateScorer", "output_handler.get_output_handler", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.setup_main_logger", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.log_basic_info", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.model.load_model", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.data_io.get_scoring_data_iters", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.score.score", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.get_output_handler"], ["", "def", "score", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "setup_main_logger", "(", "file_logging", "=", "False", ",", "\n", "console", "=", "not", "args", ".", "quiet", ",", "\n", "level", "=", "args", ".", "loglevel", ")", "# pylint: disable=no-member", "\n", "\n", "utils", ".", "log_basic_info", "(", "args", ")", "\n", "\n", "use_cpu", "=", "args", ".", "use_cpu", "\n", "if", "not", "pt", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"CUDA not available, using cpu\"", ")", "\n", "use_cpu", "=", "True", "\n", "", "device", "=", "pt", ".", "device", "(", "'cpu'", ")", "if", "use_cpu", "else", "pt", ".", "device", "(", "'cuda'", ",", "args", ".", "device_id", ")", "\n", "logger", ".", "info", "(", "f\"Scoring device: {device}\"", ")", "\n", "\n", "model", ",", "source_vocabs", ",", "target_vocabs", "=", "load_model", "(", "args", ".", "model", ",", "device", "=", "device", ",", "dtype", "=", "args", ".", "dtype", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "max_seq_len_source", "=", "model", ".", "max_supported_len_source", "\n", "max_seq_len_target", "=", "model", ".", "max_supported_len_target", "\n", "if", "args", ".", "max_seq_len", "is", "not", "None", ":", "\n", "        ", "max_seq_len_source", "=", "min", "(", "args", ".", "max_seq_len", "[", "0", "]", "+", "C", ".", "SPACE_FOR_XOS", ",", "max_seq_len_source", ")", "\n", "max_seq_len_target", "=", "min", "(", "args", ".", "max_seq_len", "[", "1", "]", "+", "C", ".", "SPACE_FOR_XOS", ",", "max_seq_len_target", ")", "\n", "\n", "", "sources", "=", "[", "args", ".", "source", "]", "+", "args", ".", "source_factors", "\n", "sources", "=", "[", "str", "(", "os", ".", "path", ".", "abspath", "(", "source", ")", ")", "for", "source", "in", "sources", "]", "\n", "targets", "=", "[", "args", ".", "target", "]", "+", "args", ".", "target_factors", "\n", "targets", "=", "[", "str", "(", "os", ".", "path", ".", "abspath", "(", "target", ")", ")", "for", "target", "in", "targets", "]", "\n", "\n", "check_condition", "(", "len", "(", "targets", ")", "==", "model", ".", "num_target_factors", ",", "\n", "\"Number of target inputs/factors provided (%d) does not match number of target factors \"", "\n", "\"required by the model (%d)\"", "%", "(", "len", "(", "targets", ")", ",", "model", ".", "num_target_factors", ")", ")", "\n", "\n", "score_iter", "=", "data_io", ".", "get_scoring_data_iters", "(", "\n", "sources", "=", "sources", ",", "\n", "targets", "=", "targets", ",", "\n", "source_vocabs", "=", "source_vocabs", ",", "\n", "target_vocabs", "=", "target_vocabs", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "max_seq_len_source", "=", "max_seq_len_source", ",", "\n", "max_seq_len_target", "=", "max_seq_len_target", ")", "\n", "\n", "constant_length_ratio", "=", "args", ".", "brevity_penalty_constant_length_ratio", "\n", "if", "args", ".", "brevity_penalty_type", "==", "C", ".", "BREVITY_PENALTY_CONSTANT", ":", "\n", "        ", "if", "constant_length_ratio", "<=", "0.0", ":", "\n", "            ", "constant_length_ratio", "=", "model", ".", "length_ratio_mean", "\n", "logger", ".", "info", "(", "\"Using constant length ratio saved in the model config: %f\"", ",", "constant_length_ratio", ")", "\n", "", "", "else", ":", "\n", "        ", "constant_length_ratio", "=", "-", "1.0", "\n", "\n", "", "batch_scorer", "=", "BatchScorer", "(", "scorer", "=", "CandidateScorer", "(", "length_penalty_alpha", "=", "args", ".", "length_penalty_alpha", ",", "\n", "length_penalty_beta", "=", "args", ".", "length_penalty_beta", ",", "\n", "brevity_penalty_weight", "=", "args", ".", "brevity_penalty_weight", ")", ",", "\n", "score_type", "=", "args", ".", "score_type", ",", "\n", "constant_length_ratio", "=", "constant_length_ratio", ",", "\n", "softmax_temperature", "=", "args", ".", "softmax_temperature", ")", "\n", "batch_scorer", ".", "to", "(", "device", ")", "\n", "\n", "scorer", "=", "Scorer", "(", "model", "=", "model", ",", "\n", "batch_scorer", "=", "batch_scorer", ",", "\n", "source_vocabs", "=", "source_vocabs", ",", "\n", "target_vocabs", "=", "target_vocabs", ",", "\n", "device", "=", "device", ")", "\n", "\n", "scorer", ".", "score", "(", "score_iter", "=", "score_iter", ",", "\n", "output_handler", "=", "get_output_handler", "(", "output_type", "=", "args", ".", "output_type", ",", "\n", "output_fname", "=", "args", ".", "output", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.OutputHandler.handle": [[58, 69], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "handle", "(", "self", ",", "\n", "t_input", ":", "inference", ".", "TranslatorInput", ",", "\n", "t_output", ":", "inference", ".", "TranslatorOutput", ",", "\n", "t_walltime", ":", "float", "=", "0.", ")", ":", "\n", "        ", "\"\"\"\n        :param t_input: Translator input.\n        :param t_output: Translator output.\n        :param t_walltime: Total wall-clock time for translation.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.OutputHandler.reports_score": [[70, 77], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reports_score", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        True if output_handler makes use of TranslatorOutput.score\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.StringOutputHandler.__init__": [[86, 88], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "stream", ")", ":", "\n", "        ", "self", ".", "stream", "=", "stream", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.StringOutputHandler.handle": [[89, 99], ["print"], "methods", ["None"], ["", "def", "handle", "(", "self", ",", "\n", "t_input", ":", "inference", ".", "TranslatorInput", ",", "\n", "t_output", ":", "inference", ".", "TranslatorOutput", ",", "\n", "t_walltime", ":", "float", "=", "0.", ")", ":", "\n", "        ", "\"\"\"\n        :param t_input: Translator input.\n        :param t_output: Translator output.\n        :param t_walltime: Total walltime for translation.\n        \"\"\"", "\n", "print", "(", "\"%s\"", "%", "t_output", ".", "translation", ",", "file", "=", "self", ".", "stream", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.StringOutputHandler.reports_score": [[100, 102], ["None"], "methods", ["None"], ["", "def", "reports_score", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.StringWithScoreOutputHandler.__init__": [[112, 114], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "stream", ")", ":", "\n", "        ", "self", ".", "stream", "=", "stream", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.StringWithScoreOutputHandler.handle": [[115, 125], ["print"], "methods", ["None"], ["", "def", "handle", "(", "self", ",", "\n", "t_input", ":", "inference", ".", "TranslatorInput", ",", "\n", "t_output", ":", "inference", ".", "TranslatorOutput", ",", "\n", "t_walltime", ":", "float", "=", "0.", ")", ":", "\n", "        ", "\"\"\"\n        :param t_input: Translator input.\n        :param t_output: Translator output.\n        :param t_walltime: Total walltime for translation.\n        \"\"\"", "\n", "print", "(", "\"{:.6f}\\t{}\"", ".", "format", "(", "t_output", ".", "score", ",", "t_output", ".", "translation", ")", ",", "file", "=", "self", ".", "stream", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.StringWithScoreOutputHandler.reports_score": [[126, 128], ["None"], "methods", ["None"], ["", "def", "reports_score", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.ScoreOutputHandler.__init__": [[137, 139], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "stream", ")", ":", "\n", "        ", "self", ".", "stream", "=", "stream", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.ScoreOutputHandler.handle": [[140, 154], ["print", "hasattr"], "methods", ["None"], ["", "def", "handle", "(", "self", ",", "\n", "t_input", ":", "inference", ".", "TranslatorInput", ",", "\n", "t_output", ":", "inference", ".", "TranslatorOutput", ",", "\n", "t_walltime", ":", "float", "=", "0.", ")", ":", "\n", "        ", "\"\"\"\n        :param t_input: Translator input.\n        :param t_output: Translator output.\n        :param t_walltime: Total walltime for translation.\n        \"\"\"", "\n", "result", "=", "\"{:.6f}\"", ".", "format", "(", "t_output", ".", "score", ")", "\n", "if", "hasattr", "(", "t_output", ",", "'factor_scores'", ")", "and", "t_output", ".", "factor_scores", ":", "\n", "            ", "factor_scores", "=", "\"\\t\"", ".", "join", "(", "\"{:.6f}\"", ".", "format", "(", "fs", ")", "for", "fs", "in", "t_output", ".", "factor_scores", ")", "\n", "result", "=", "f\"{result}\\t{factor_scores}\"", "\n", "", "print", "(", "result", ",", "file", "=", "self", ".", "stream", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.ScoreOutputHandler.reports_score": [[155, 157], ["None"], "methods", ["None"], ["", "def", "reports_score", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.PairWithScoreOutputHandler.__init__": [[166, 168], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "stream", ")", ":", "\n", "        ", "self", ".", "stream", "=", "stream", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.PairWithScoreOutputHandler.handle": [[169, 181], ["print", "sockeye.TOKEN_SEPARATOR.join"], "methods", ["None"], ["", "def", "handle", "(", "self", ",", "\n", "t_input", ":", "inference", ".", "TranslatorInput", ",", "\n", "t_output", ":", "inference", ".", "TranslatorOutput", ",", "\n", "t_walltime", ":", "float", "=", "0.", ")", ":", "\n", "        ", "\"\"\"\n        :param t_input: Translator input.\n        :param t_output: Translator output.\n        :param t_walltime: Total walltime for translation.\n        \"\"\"", "\n", "print", "(", "\"{:.6f}\\t{}\\t{}\"", ".", "format", "(", "t_output", ".", "score", ",", "\n", "C", ".", "TOKEN_SEPARATOR", ".", "join", "(", "t_input", ".", "tokens", ")", ",", "\n", "t_output", ".", "translation", ")", ",", "file", "=", "self", ".", "stream", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.PairWithScoreOutputHandler.reports_score": [[182, 184], ["None"], "methods", ["None"], ["", "def", "reports_score", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.BenchmarkOutputHandler.handle": [[191, 207], ["print", "sockeye.TOKEN_SEPARATOR.join", "len", "len"], "methods", ["None"], ["def", "handle", "(", "self", ",", "\n", "t_input", ":", "inference", ".", "TranslatorInput", ",", "\n", "t_output", ":", "inference", ".", "TranslatorOutput", ",", "\n", "t_walltime", ":", "float", "=", "0.", ")", ":", "\n", "        ", "\"\"\"\n        :param t_input: Translator input.\n        :param t_output: Translator output.\n        :param t_walltime: Total walltime for translation.\n        \"\"\"", "\n", "print", "(", "\"input=%s\\toutput=%s\\tinput_tokens=%d\\toutput_tokens=%d\\ttranslation_time=%0.4f\"", "%", "\n", "(", "C", ".", "TOKEN_SEPARATOR", ".", "join", "(", "t_input", ".", "tokens", ")", ",", "\n", "t_output", ".", "translation", ",", "\n", "len", "(", "t_input", ".", "tokens", ")", ",", "\n", "len", "(", "t_output", ".", "tokens", ")", ",", "\n", "t_walltime", ")", ",", "\n", "file", "=", "self", ".", "stream", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.BenchmarkOutputHandler.reports_score": [[208, 210], ["None"], "methods", ["None"], ["", "def", "reports_score", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.JSONOutputHandler.__init__": [[218, 220], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "stream", ")", "->", "None", ":", "\n", "        ", "self", ".", "stream", "=", "stream", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.JSONOutputHandler.handle": [[221, 230], ["t_output.json", "print", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.inference.TranslatorOutput.json"], ["", "def", "handle", "(", "self", ",", "\n", "t_input", ":", "inference", ".", "TranslatorInput", ",", "\n", "t_output", ":", "inference", ".", "TranslatorOutput", ",", "\n", "t_walltime", ":", "float", "=", "0.", ")", ":", "\n", "        ", "\"\"\"\n        Outputs a JSON object of the fields in the `TranslatorOutput` object.\n        \"\"\"", "\n", "d_", "=", "t_output", ".", "json", "(", ")", "\n", "print", "(", "json", ".", "dumps", "(", "d_", ",", "sort_keys", "=", "True", ")", ",", "file", "=", "self", ".", "stream", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.JSONOutputHandler.reports_score": [[231, 233], ["None"], "methods", ["None"], ["", "def", "reports_score", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.FactoredStringOutputHandler.__init__": [[241, 243], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "stream", ")", ":", "\n", "        ", "self", ".", "stream", "=", "stream", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.FactoredStringOutputHandler.handle": [[244, 256], ["sockeye.TOKEN_SEPARATOR.join", "print", "sockeye.DEFAULT_FACTOR_DELIMITER.join", "zip", "itertools.chain"], "methods", ["None"], ["", "def", "handle", "(", "self", ",", "\n", "t_input", ":", "inference", ".", "TranslatorInput", ",", "\n", "t_output", ":", "inference", ".", "TranslatorOutput", ",", "\n", "t_walltime", ":", "float", "=", "0.", ")", ":", "\n", "        ", "\"\"\"\n        :param t_input: Translator input.\n        :param t_output: Translator output.\n        :param t_walltime: Total walltime for translation.\n        \"\"\"", "\n", "factored_string", "=", "C", ".", "TOKEN_SEPARATOR", ".", "join", "(", "C", ".", "DEFAULT_FACTOR_DELIMITER", ".", "join", "(", "factors", ")", "for", "factors", "in", "\n", "zip", "(", "*", "chain", "(", "[", "t_output", ".", "tokens", "]", ",", "t_output", ".", "factor_tokens", ")", ")", ")", "\n", "print", "(", "factored_string", ",", "file", "=", "self", ".", "stream", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.FactoredStringOutputHandler.reports_score": [[257, 259], ["None"], "methods", ["None"], ["", "def", "reports_score", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.output_handler.get_output_handler": [[25, 51], ["sockeye.utils.smart_open", "output_handler.StringOutputHandler", "output_handler.ScoreOutputHandler", "output_handler.PairWithScoreOutputHandler", "output_handler.StringWithScoreOutputHandler", "output_handler.BenchmarkOutputHandler", "output_handler.JSONOutputHandler", "output_handler.FactoredStringOutputHandler", "ValueError"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open"], ["def", "get_output_handler", "(", "output_type", ":", "str", ",", "\n", "output_fname", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "'OutputHandler'", ":", "\n", "    ", "\"\"\"\n\n    :param output_type: Type of output handler.\n    :param output_fname: Output filename. If none sys.stdout is used.\n    :raises: ValueError for unknown output_type.\n    :return: Output handler.\n    \"\"\"", "\n", "output_stream", "=", "sys", ".", "stdout", "if", "output_fname", "is", "None", "else", "smart_open", "(", "output_fname", ",", "mode", "=", "'w'", ")", "\n", "if", "output_type", "==", "C", ".", "OUTPUT_HANDLER_TRANSLATION", ":", "\n", "        ", "return", "StringOutputHandler", "(", "output_stream", ")", "\n", "", "elif", "output_type", "==", "C", ".", "OUTPUT_HANDLER_SCORE", ":", "\n", "        ", "return", "ScoreOutputHandler", "(", "output_stream", ")", "\n", "", "elif", "output_type", "==", "C", ".", "OUTPUT_HANDLER_PAIR_WITH_SCORE", ":", "\n", "        ", "return", "PairWithScoreOutputHandler", "(", "output_stream", ")", "\n", "", "elif", "output_type", "==", "C", ".", "OUTPUT_HANDLER_TRANSLATION_WITH_SCORE", ":", "\n", "        ", "return", "StringWithScoreOutputHandler", "(", "output_stream", ")", "\n", "", "elif", "output_type", "==", "C", ".", "OUTPUT_HANDLER_BENCHMARK", ":", "\n", "        ", "return", "BenchmarkOutputHandler", "(", "output_stream", ")", "\n", "", "elif", "output_type", "==", "C", ".", "OUTPUT_HANDLER_JSON", ":", "\n", "        ", "return", "JSONOutputHandler", "(", "output_stream", ")", "\n", "", "elif", "output_type", "==", "C", ".", "OUTPUT_HANDLER_TRANSLATION_WITH_FACTORS", ":", "\n", "        ", "return", "FactoredStringOutputHandler", "(", "output_stream", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"unknown output type\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.transformer.TransformerEncoderBlock.__init__": [[52, 81], ["super().__init__", "transformer.TransformerProcessBlock", "sockeye.layers.MultiHeadSelfAttention", "transformer.TransformerProcessBlock", "transformer.TransformerProcessBlock", "transformer.TransformerFeedForward", "transformer.TransformerProcessBlock", "sockeye.layers.LHUC"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "config", ":", "TransformerConfig", ",", "inference_only", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pre_self_attention", "=", "TransformerProcessBlock", "(", "sequence", "=", "config", ".", "preprocess_sequence", ",", "\n", "dropout", "=", "config", ".", "dropout_prepost", ",", "\n", "num_hidden", "=", "config", ".", "model_size", ")", "\n", "self", ".", "self_attention", "=", "sockeye", ".", "layers", ".", "MultiHeadSelfAttention", "(", "depth_att", "=", "config", ".", "model_size", ",", "\n", "heads", "=", "config", ".", "attention_heads", ",", "\n", "depth_out", "=", "config", ".", "model_size", ",", "\n", "dropout", "=", "config", ".", "dropout_attention", ")", "\n", "self", ".", "post_self_attention", "=", "TransformerProcessBlock", "(", "sequence", "=", "config", ".", "postprocess_sequence", ",", "\n", "dropout", "=", "config", ".", "dropout_prepost", ",", "\n", "num_hidden", "=", "config", ".", "model_size", ")", "\n", "\n", "self", ".", "pre_ff", "=", "TransformerProcessBlock", "(", "sequence", "=", "config", ".", "preprocess_sequence", ",", "\n", "dropout", "=", "config", ".", "dropout_prepost", ",", "\n", "num_hidden", "=", "config", ".", "model_size", ")", "\n", "self", ".", "ff", "=", "TransformerFeedForward", "(", "num_hidden", "=", "config", ".", "feed_forward_num_hidden", ",", "\n", "num_model", "=", "config", ".", "model_size", ",", "\n", "act_type", "=", "config", ".", "act_type", ",", "\n", "dropout", "=", "config", ".", "dropout_act", ",", "\n", "use_glu", "=", "config", ".", "use_glu", ",", "\n", "inference_only", "=", "inference_only", ")", "\n", "self", ".", "post_ff", "=", "TransformerProcessBlock", "(", "sequence", "=", "config", ".", "postprocess_sequence", ",", "\n", "dropout", "=", "config", ".", "dropout_prepost", ",", "\n", "num_hidden", "=", "config", ".", "model_size", ")", "\n", "self", ".", "lhuc", "=", "None", "\n", "if", "config", ".", "use_lhuc", ":", "\n", "            ", "self", ".", "lhuc", "=", "sockeye", ".", "layers", ".", "LHUC", "(", "config", ".", "model_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.transformer.TransformerEncoderBlock.forward": [[82, 104], ["transformer.TransformerEncoderBlock.self_attention", "transformer.TransformerEncoderBlock.post_self_attention", "transformer.TransformerEncoderBlock.ff", "transformer.TransformerEncoderBlock.post_ff", "transformer.TransformerEncoderBlock.pre_ff", "transformer.TransformerEncoderBlock.lhuc", "transformer.TransformerEncoderBlock.pre_self_attention"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ":", "pt", ".", "Tensor", ",", "att_mask", ":", "pt", ".", "Tensor", "=", "None", ")", "->", "pt", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param data: Input tensor of shape (length, batch_size, hidden)\n        :param att_mask: Optional data length mask of shape (batch_size * self.heads, 1, length)\n                         to mask self-attention scores. True for padding positions.\n        \"\"\"", "\n", "# self-attention", "\n", "data_self_att", ",", "_", "=", "self", ".", "self_attention", "(", "inputs", "=", "self", ".", "pre_self_attention", "(", "data", ")", ",", "\n", "previous_states", "=", "None", ",", "\n", "mask", "=", "att_mask", ",", "\n", "bias", "=", "None", ")", "\n", "data", "=", "self", ".", "post_self_attention", "(", "data_self_att", ",", "data", ")", "\n", "\n", "# feed-forward", "\n", "data_ff", "=", "self", ".", "ff", "(", "self", ".", "pre_ff", "(", "data", ")", ")", "\n", "\n", "data", "=", "self", ".", "post_ff", "(", "data_ff", ",", "data", ")", "\n", "\n", "if", "self", ".", "lhuc", "is", "not", "None", ":", "\n", "            ", "data", "=", "self", ".", "lhuc", "(", "data", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.transformer.TransformerDecoderBlock.__init__": [[112, 164], ["super().__init__", "transformer.TransformerProcessBlock", "transformer.TransformerProcessBlock", "transformer.TransformerProcessBlock", "sockeye.layers.MultiHeadAttention", "transformer.TransformerProcessBlock", "transformer.TransformerProcessBlock", "transformer.TransformerFeedForward", "transformer.TransformerProcessBlock", "sockeye.layers.MultiHeadSelfAttention", "sockeye.layers.LHUC", "sockeye.layers.SSRU", "ValueError"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "config", ":", "TransformerConfig", ",", "inference_only", ":", "bool", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "decoder_type", "=", "config", ".", "decoder_type", "\n", "\n", "self", ".", "autoregr_layer", "=", "None", "\n", "if", "self", ".", "decoder_type", "==", "C", ".", "TRANSFORMER_TYPE", ":", "\n", "            ", "self", ".", "autoregr_layer", "=", "sockeye", ".", "layers", ".", "MultiHeadSelfAttention", "(", "depth_att", "=", "config", ".", "model_size", ",", "\n", "heads", "=", "config", ".", "attention_heads", ",", "\n", "depth_out", "=", "config", ".", "model_size", ",", "\n", "dropout", "=", "config", ".", "dropout_attention", ")", "\n", "", "elif", "self", ".", "decoder_type", "==", "C", ".", "SSRU_TRANSFORMER", ":", "\n", "            ", "self", ".", "autoregr_layer", "=", "sockeye", ".", "layers", ".", "SSRU", "(", "model_size", "=", "config", ".", "model_size", ",", "# type: ignore", "\n", "inference_only", "=", "inference_only", ")", "# type: ignore", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid decoder type.\"", ")", "\n", "\n", "", "self", ".", "pre_autoregr_layer", "=", "TransformerProcessBlock", "(", "sequence", "=", "config", ".", "preprocess_sequence", ",", "\n", "dropout", "=", "config", ".", "dropout_prepost", ",", "\n", "num_hidden", "=", "config", ".", "model_size", ")", "\n", "\n", "self", ".", "post_autoregr_layer", "=", "TransformerProcessBlock", "(", "sequence", "=", "config", ".", "postprocess_sequence", ",", "\n", "dropout", "=", "config", ".", "dropout_prepost", ",", "\n", "num_hidden", "=", "config", ".", "model_size", ")", "\n", "\n", "self", ".", "pre_enc_attention", "=", "TransformerProcessBlock", "(", "sequence", "=", "config", ".", "preprocess_sequence", ",", "\n", "dropout", "=", "config", ".", "dropout_prepost", ",", "\n", "num_hidden", "=", "config", ".", "model_size", ")", "\n", "self", ".", "enc_attention", "=", "sockeye", ".", "layers", ".", "MultiHeadAttention", "(", "depth_att", "=", "config", ".", "model_size", ",", "\n", "heads", "=", "config", ".", "attention_heads", ",", "\n", "depth_out", "=", "config", ".", "model_size", ",", "\n", "dropout", "=", "config", ".", "dropout_attention", ",", "\n", "depth_key_value", "=", "config", ".", "depth_key_value", ")", "\n", "self", ".", "post_enc_attention", "=", "TransformerProcessBlock", "(", "sequence", "=", "config", ".", "postprocess_sequence", ",", "\n", "dropout", "=", "config", ".", "dropout_prepost", ",", "\n", "num_hidden", "=", "config", ".", "model_size", ")", "\n", "\n", "self", ".", "pre_ff", "=", "TransformerProcessBlock", "(", "sequence", "=", "config", ".", "preprocess_sequence", ",", "\n", "dropout", "=", "config", ".", "dropout_prepost", ",", "\n", "num_hidden", "=", "config", ".", "model_size", ")", "\n", "self", ".", "ff", "=", "TransformerFeedForward", "(", "num_hidden", "=", "config", ".", "feed_forward_num_hidden", ",", "\n", "num_model", "=", "config", ".", "model_size", ",", "\n", "act_type", "=", "config", ".", "act_type", ",", "\n", "dropout", "=", "config", ".", "dropout_act", ",", "\n", "use_glu", "=", "config", ".", "use_glu", ",", "\n", "inference_only", "=", "inference_only", ")", "\n", "self", ".", "post_ff", "=", "TransformerProcessBlock", "(", "sequence", "=", "config", ".", "postprocess_sequence", ",", "\n", "dropout", "=", "config", ".", "dropout_prepost", ",", "\n", "num_hidden", "=", "config", ".", "model_size", ")", "\n", "\n", "self", ".", "lhuc", "=", "None", "\n", "if", "config", ".", "use_lhuc", ":", "\n", "            ", "self", ".", "lhuc", "=", "sockeye", ".", "layers", ".", "LHUC", "(", "config", ".", "model_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.transformer.TransformerDecoderBlock.num_state_tensors": [[165, 169], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "num_state_tensors", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\" Number of state tensors returned by the layer \"\"\"", "\n", "return", "self", ".", "autoregr_layer", ".", "num_state_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.transformer.TransformerDecoderBlock.needs_mask": [[170, 174], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "needs_mask", "(", "self", ")", ":", "\n", "        ", "\"\"\" Whether the block makes use of a mask tensor or not \"\"\"", "\n", "return", "self", ".", "autoregr_layer", ".", "needs_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.transformer.TransformerDecoderBlock.get_states_shape": [[175, 181], ["transformer.TransformerDecoderBlock.autoregr_layer.get_state_shape"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.SSRU.get_state_shape"], ["", "def", "get_states_shape", "(", "self", ",", "batch_size", ":", "int", ")", "->", "Tuple", ":", "\n", "        ", "\"\"\"\n        :param batch_size: current batch size\n        :return: dimensions of an output state (assuming all of them have the same shape)\n        \"\"\"", "\n", "return", "self", ".", "autoregr_layer", ".", "get_state_shape", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.transformer.TransformerDecoderBlock.forward": [[182, 211], ["transformer.TransformerDecoderBlock.autoregr_layer", "transformer.TransformerDecoderBlock.post_autoregr_layer", "transformer.TransformerDecoderBlock.enc_attention", "transformer.TransformerDecoderBlock.post_enc_attention", "transformer.TransformerDecoderBlock.ff", "transformer.TransformerDecoderBlock.post_ff", "transformer.TransformerDecoderBlock.pre_ff", "transformer.TransformerDecoderBlock.lhuc", "transformer.TransformerDecoderBlock.pre_autoregr_layer", "transformer.TransformerDecoderBlock.pre_enc_attention"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "target", ":", "pt", ".", "Tensor", ",", "\n", "target_mask", ":", "Optional", "[", "pt", ".", "Tensor", "]", ",", "\n", "source", ":", "pt", ".", "Tensor", ",", "\n", "source_mask", ":", "Optional", "[", "pt", ".", "Tensor", "]", ",", "\n", "autoregr_states", ":", "Optional", "[", "pt", ".", "Tensor", "]", ",", "\n", "enc_att_kv", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "pt", ".", "Tensor", "]", ":", "\n", "        ", "target_autoregr", ",", "*", "new_autoregr_states", "=", "self", ".", "autoregr_layer", "(", "inputs", "=", "self", ".", "pre_autoregr_layer", "(", "target", ")", ",", "\n", "previous_states", "=", "autoregr_states", ",", "\n", "mask", "=", "target_mask", ")", "\n", "\n", "target", "=", "self", ".", "post_autoregr_layer", "(", "target_autoregr", ",", "target", ")", "\n", "\n", "# encoder attention", "\n", "target_enc_att", "=", "self", ".", "enc_attention", "(", "queries", "=", "self", ".", "pre_enc_attention", "(", "target", ")", ",", "\n", "key_values", "=", "source", ",", "\n", "mask", "=", "source_mask", ",", "\n", "projected_memory_kv", "=", "enc_att_kv", ")", "\n", "\n", "target", "=", "self", ".", "post_enc_attention", "(", "target_enc_att", ",", "target", ")", "\n", "\n", "# feed-forward", "\n", "target_ff", "=", "self", ".", "ff", "(", "self", ".", "pre_ff", "(", "target", ")", ")", "\n", "target", "=", "self", ".", "post_ff", "(", "target_ff", ",", "target", ")", "\n", "\n", "if", "self", ".", "lhuc", ":", "\n", "            ", "target", "=", "self", ".", "lhuc", "(", "target", ")", "\n", "\n", "", "return", "target", ",", "new_autoregr_states", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.transformer.TransformerProcessBlock.__init__": [[222, 236], ["super().__init__", "torch.nn.LayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__"], ["def", "__init__", "(", "self", ",", "\n", "sequence", ":", "str", ",", "\n", "dropout", ":", "float", ",", "\n", "num_hidden", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sequence", "=", "sequence", "\n", "self", ".", "layer_norm", "=", "None", "\n", "if", "'n'", "in", "sequence", ":", "\n", "# do not use Apex' FusedLayerNorm because of", "\n", "# https://github.com/huggingface/transformers/issues/9377", "\n", "            ", "self", ".", "layer_norm", "=", "pt", ".", "nn", ".", "LayerNorm", "(", "num_hidden", ",", "eps", "=", "1e-06", ")", "\n", "", "self", ".", "dropout", "=", "dropout", "\n", "if", "dropout", ">", "0.0", ":", "\n", "            ", "self", ".", "drop", "=", "pt", ".", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.transformer.TransformerProcessBlock.forward": [[237, 266], ["transformer.TransformerProcessBlock.layer_norm", "ValueError", "transformer.TransformerProcessBlock.drop"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ":", "pt", ".", "Tensor", ",", "prev", ":", "Optional", "[", "pt", ".", "Tensor", "]", "=", "None", ")", "->", "pt", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Apply processing sequence to data with optional previous input.\n\n        :param data: Input data. Shape: (batch, length, num_hidden).\n        :param prev: Previous data. Shape: (batch, length, num_hidden).\n        :return: Processed data. Shape: (batch, length, num_hidden).\n        \"\"\"", "\n", "if", "not", "self", ".", "sequence", ":", "\n", "            ", "return", "data", "\n", "\n", "", "if", "prev", "is", "None", ":", "\n", "            ", "assert", "'r'", "not", "in", "self", ".", "sequence", ",", "\"Residual connection not allowed if no previous value given.\"", "\n", "\n", "", "for", "step", "in", "self", ".", "sequence", ":", "\n", "\n", "            ", "if", "step", "==", "\"r\"", ":", "\n", "                ", "data", "=", "data", "+", "prev", "\n", "\n", "", "elif", "step", "==", "\"n\"", ":", "\n", "                ", "data", "=", "self", ".", "layer_norm", "(", "data", ")", "\n", "\n", "", "elif", "step", "==", "\"d\"", ":", "\n", "                ", "if", "self", ".", "dropout", ">", "0.0", ":", "\n", "                    ", "data", "=", "self", ".", "drop", "(", "data", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unknown step in sequence: %s\"", "%", "step", ")", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.transformer.TransformerFeedForward.__init__": [[270, 287], ["super().__init__", "torch.nn.Linear", "sockeye.layers.get_activation", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.layers.get_activation"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_hidden", ":", "int", ",", "\n", "num_model", ":", "int", ",", "\n", "act_type", ":", "str", ",", "\n", "dropout", ":", "float", ",", "\n", "use_glu", ":", "bool", "=", "False", ",", "\n", "inference_only", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "use_glu", "=", "use_glu", "\n", "self", ".", "ff1", "=", "pt", ".", "nn", ".", "Linear", "(", "in_features", "=", "num_model", ",", "out_features", "=", "num_hidden", ")", "\n", "self", ".", "act", "=", "sockeye", ".", "layers", ".", "get_activation", "(", "act_type", ",", "inplace", "=", "inference_only", ")", "\n", "if", "self", ".", "use_glu", ":", "\n", "            ", "self", ".", "linear", "=", "pt", ".", "nn", ".", "Linear", "(", "in_features", "=", "num_model", ",", "out_features", "=", "num_hidden", ")", "\n", "", "if", "self", ".", "dropout", ">", "0.0", ":", "\n", "            ", "self", ".", "drop", "=", "pt", ".", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ",", "inplace", "=", "inference_only", ")", "\n", "", "self", ".", "ff2", "=", "pt", ".", "nn", ".", "Linear", "(", "in_features", "=", "num_hidden", ",", "out_features", "=", "num_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.transformer.TransformerFeedForward.forward": [[288, 297], ["transformer.TransformerFeedForward.ff1", "transformer.TransformerFeedForward.act", "transformer.TransformerFeedForward.ff2", "transformer.TransformerFeedForward.drop", "transformer.TransformerFeedForward.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "ff1", "(", "x", ")", "\n", "h", "=", "self", ".", "act", "(", "h", ")", "\n", "if", "self", ".", "use_glu", ":", "\n", "            ", "h", "=", "h", "*", "self", ".", "linear", "(", "x", ")", "\n", "", "if", "self", ".", "dropout", ">", "0.0", ":", "\n", "            ", "h", "=", "self", ".", "drop", "(", "h", ")", "\n", "", "y", "=", "self", ".", "ff2", "(", "h", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.transformer.AutoRegressiveMask.forward": [[301, 306], ["torch.full", "torch.triu", "torch.triu.detach"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ":", "pt", ".", "Tensor", ")", "->", "pt", ".", "Tensor", ":", "\n", "        ", "\"\"\" Input tensor with length on dimension 1 \"\"\"", "\n", "mask", "=", "pt", ".", "full", "(", "(", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "1", "]", ")", ",", "fill_value", "=", "1", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "pt", ".", "bool", ")", "\n", "mask", "=", "pt", ".", "triu", "(", "mask", ",", "diagonal", "=", "1", ")", "\n", "return", "mask", ".", "detach", "(", ")", "# Shape: (len, len)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.__init__": [[133, 137], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_count", "=", "0", "\n", "self", ".", "_mean", "=", "0.", "\n", "self", ".", "_M2", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.update": [[138, 144], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ":", "Union", "[", "float", ",", "int", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "_count", "+=", "1", "\n", "delta", "=", "value", "-", "self", ".", "_mean", "\n", "self", ".", "_mean", "+=", "delta", "/", "self", ".", "_count", "\n", "delta2", "=", "value", "-", "self", ".", "_mean", "\n", "self", ".", "_M2", "+=", "delta", "*", "delta2", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.count": [[145, 148], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "count", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_count", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.mean": [[149, 152], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.variance": [[153, 159], ["float"], "methods", ["None"], ["", "@", "property", "\n", "def", "variance", "(", "self", ")", "->", "float", ":", "\n", "        ", "if", "self", ".", "_count", "<", "2", ":", "\n", "            ", "return", "float", "(", "'nan'", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_M2", "/", "self", ".", "_count", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.OnlineMeanAndVariance.std": [[160, 164], ["math.sqrt", "math.isnan"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "std", "(", "self", ")", "->", "float", ":", "\n", "        ", "variance", "=", "self", ".", "variance", "\n", "return", "math", ".", "sqrt", "(", "variance", ")", "if", "not", "math", ".", "isnan", "(", "variance", ")", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.map": [[564, 566], ["list", "utils.SingleProcessPool.map"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.map"], ["    ", "def", "map", "(", "self", ",", "func", ",", "iterable", ")", ":", "\n", "        ", "return", "list", "(", "map", "(", "func", ",", "iterable", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.starmap": [[567, 569], ["list", "itertools.starmap"], "methods", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.starmap"], ["", "def", "starmap", "(", "self", ",", "func", ",", "iterable", ")", ":", "\n", "        ", "return", "list", "(", "starmap", "(", "func", ",", "iterable", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.__enter__": [[570, 572], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.SingleProcessPool.__exit__": [[573, 575], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_version": [[46, 64], ["utils.parse_version", "utils.parse_version", "utils.check_condition", "utils.check_condition", "logger.info", "logger.warning"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.parse_version", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.parse_version", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["", "def", "check_version", "(", "version", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Checks given version against code version and determines compatibility.\n    Throws if versions are incompatible.\n\n    :param version: Given version.\n    \"\"\"", "\n", "code_version", "=", "parse_version", "(", "__version__", ")", "\n", "given_version", "=", "parse_version", "(", "version", ")", "\n", "if", "given_version", "[", "0", "]", "==", "'3'", "and", "given_version", "[", "1", "]", "==", "'0'", ":", "\n", "        ", "logger", ".", "info", "(", "f\"Code version: {__version__}\"", ")", "\n", "logger", ".", "warning", "(", "f\"Given release version ({version}) does not match code version ({__version__}). \"", "\n", "f\"Models with version {version} should be compatible though.\"", ")", "\n", "return", "\n", "", "check_condition", "(", "code_version", "[", "0", "]", "==", "given_version", "[", "0", "]", ",", "\n", "\"Given release version (%s) does not match release code version (%s)\"", "%", "(", "version", ",", "__version__", ")", ")", "\n", "check_condition", "(", "code_version", "[", "1", "]", "==", "given_version", "[", "1", "]", ",", "\n", "\"Given major version (%s) does not match major code version (%s)\"", "%", "(", "version", ",", "__version__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.load_version": [[66, 78], ["os.path.exists", "logger.warning", "open", "inp.read().strip", "inp.read"], "function", ["None"], ["", "def", "load_version", "(", "fname", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Loads version from file.\n\n    :param fname: Name of file to load version from.\n    :return: Version string.\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "fname", ")", ":", "\n", "        ", "logger", ".", "warning", "(", "\"No version file found. Defaulting to 1.0.3\"", ")", "\n", "return", "\"1.0.3\"", "\n", "", "with", "open", "(", "fname", ")", "as", "inp", ":", "\n", "        ", "return", "inp", ".", "read", "(", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.parse_version": [[80, 89], ["version_string.split", "__version__"], "function", ["None"], ["", "", "def", "parse_version", "(", "version_string", ":", "str", ")", "->", "Tuple", "[", "str", ",", "str", ",", "str", "]", ":", "\n", "    ", "\"\"\"\n    Parse version string into release, major, minor version.\n\n    :param version_string: Version string.\n    :return: Tuple of strings.\n    \"\"\"", "\n", "release", ",", "major", ",", "minor", "=", "version_string", ".", "split", "(", "\".\"", ",", "2", ")", "\n", "return", "release", ",", "major", ",", "minor", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.log_basic_info": [[91, 101], ["log.log_sockeye_version", "log.log_torch_version", "logger.info", "logger.info"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.log_sockeye_version", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.log_torch_version"], ["", "def", "log_basic_info", "(", "args", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Log basic information like version number, arguments, etc.\n\n    :param args: Arguments as returned by argparse.\n    \"\"\"", "\n", "log_sockeye_version", "(", "logger", ")", "\n", "log_torch_version", "(", "logger", ")", "\n", "logger", ".", "info", "(", "\"Command: %s\"", ",", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "logger", ".", "info", "(", "\"Arguments: %s\"", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.seed_rngs": [[103, 118], ["logger.info", "numpy.random.seed", "random.seed", "torch.manual_seed", "torch.manual_seed", "logger.info"], "function", ["None"], ["", "def", "seed_rngs", "(", "seed", ":", "int", ")", "->", "None", ":", "# type: ignore", "\n", "    ", "\"\"\"\n    Seed the random number generators (Python, Numpy and MXNet).\n\n    :param seed: The random seed.\n    \"\"\"", "\n", "logger", ".", "info", "(", "f\"Random seed: {seed}\"", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "try", ":", "\n", "        ", "import", "torch", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "logger", ".", "info", "(", "f\"PyTorch seed: {seed}\"", ")", "\n", "", "except", "ImportError", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition": [[120, 130], ["utils.SockeyeError"], "function", ["None"], ["", "", "def", "check_condition", "(", "condition", ":", "bool", ",", "error_message", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Check the condition and if it is not met, exit with the given error message\n    and error_code, similar to assertions.\n\n    :param condition: Condition to check.\n    :param error_message: Error message to show to the user.\n    \"\"\"", "\n", "if", "not", "condition", ":", "\n", "        ", "raise", "SockeyeError", "(", "error_message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.chunks": [[166, 170], ["range", "len"], "function", ["None"], ["", "", "def", "chunks", "(", "some_list", ":", "List", ",", "n", ":", "int", ")", "->", "Iterable", "[", "List", "]", ":", "\n", "    ", "\"\"\"Yield successive n-sized chunks from l.\"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "some_list", ")", ",", "n", ")", ":", "\n", "        ", "yield", "some_list", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens": [[172, 182], ["line.rstrip().split", "line.rstrip", "len"], "function", ["None"], ["", "", "def", "get_tokens", "(", "line", ":", "str", ")", "->", "Iterator", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Yields tokens from input string.\n\n    :param line: Input string.\n    :return: Iterator over tokens.\n    \"\"\"", "\n", "for", "token", "in", "line", ".", "rstrip", "(", ")", ".", "split", "(", ")", ":", "\n", "        ", "if", "len", "(", "token", ")", ">", "0", ":", "\n", "            ", "yield", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_gzip_file": [[184, 188], ["open", "binascii.hexlify", "test_f.read"], "function", ["None"], ["", "", "", "def", "is_gzip_file", "(", "filename", ":", "str", ")", "->", "bool", ":", "\n", "# check for magic gzip number", "\n", "    ", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "test_f", ":", "\n", "        ", "return", "binascii", ".", "hexlify", "(", "test_f", ".", "read", "(", "2", ")", ")", "==", "b'1f8b'", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open": [[190, 218], ["filename.endswith", "utils.is_gzip_file", "gzip.open", "gzip.open", "open", "open"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_gzip_file"], ["", "", "def", "smart_open", "(", "filename", ":", "str", ",", "mode", ":", "str", "=", "\"rt\"", ",", "ftype", ":", "str", "=", "\"auto\"", ",", "errors", ":", "str", "=", "'replace'", ")", ":", "\n", "    ", "\"\"\"\n    Returns a file descriptor for filename with UTF-8 encoding.\n    If mode is \"rt\", file is opened read-only.\n    If ftype is \"auto\", uses gzip iff filename endswith .gz.\n    If ftype is {\"gzip\",\"gz\"}, uses gzip.\n    If ftype is \"auto\" and read mode requested, uses gzip iff is_gzip_file(filename).\n\n    Note: encoding error handling defaults to \"replace\"\n\n    :param filename: The filename to open.\n    :param mode: Reader mode.\n    :param ftype: File type. If 'auto' checks filename suffix for gz to try gzip.open.\n    :param errors: Encoding error handling during reading. Defaults to 'replace'.\n    :return: File descriptor.\n    \"\"\"", "\n", "if", "ftype", "in", "(", "'gzip'", ",", "'gz'", ")", "or", "(", "ftype", "==", "'auto'", "and", "filename", ".", "endswith", "(", "\".gz\"", ")", ")", "or", "(", "ftype", "==", "'auto'", "and", "'r'", "in", "mode", "and", "is_gzip_file", "(", "filename", ")", ")", ":", "\n", "            ", "if", "mode", "==", "\"rb\"", "or", "mode", "==", "\"wb\"", ":", "\n", "                ", "return", "gzip", ".", "open", "(", "filename", ",", "mode", "=", "mode", ")", "\n", "", "else", ":", "\n", "                ", "return", "gzip", ".", "open", "(", "filename", ",", "mode", "=", "mode", ",", "encoding", "=", "'utf-8'", ",", "errors", "=", "errors", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "mode", "==", "\"rb\"", "or", "mode", "==", "\"wb\"", ":", "\n", "            ", "return", "open", "(", "filename", ",", "mode", "=", "mode", ")", "\n", "", "else", ":", "\n", "            ", "return", "open", "(", "filename", ",", "mode", "=", "mode", ",", "encoding", "=", "'utf-8'", ",", "errors", "=", "errors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.combine_means": [[220, 232], ["utils.check_condition", "ValueError", "sum", "sum", "len", "len", "zip"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["", "", "", "def", "combine_means", "(", "means", ":", "List", "[", "Optional", "[", "float", "]", "]", ",", "num_sents", ":", "List", "[", "int", "]", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Takes a list of means and number of sentences of the same length and computes the combined mean.\n\n    :param means: A list of mean values.\n    :param num_sents: A list with the number of sentences used to compute each mean value.\n    :return: The combined mean of the list of means.\n    \"\"\"", "\n", "if", "not", "means", "or", "not", "num_sents", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid input list.\"", ")", "\n", "", "check_condition", "(", "len", "(", "means", ")", "==", "len", "(", "num_sents", ")", ",", "\"List lengths do not match\"", ")", "\n", "return", "sum", "(", "num_sent", "*", "mean", "for", "num_sent", ",", "mean", "in", "zip", "(", "num_sents", ",", "means", ")", "if", "mean", "is", "not", "None", ")", "/", "sum", "(", "num_sents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.combine_stds": [[234, 250], ["utils.check_condition", "utils.combine_means", "math.sqrt", "ValueError", "all", "sum", "sum", "len", "len", "zip"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.combine_means"], ["", "def", "combine_stds", "(", "stds", ":", "List", "[", "Optional", "[", "float", "]", "]", ",", "means", ":", "List", "[", "Optional", "[", "float", "]", "]", ",", "num_sents", ":", "List", "[", "int", "]", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Takes a list of standard deviations, means and number of sentences of the same length and computes\n    the combined standard deviation.\n\n    :param stds: A list of standard deviations.\n    :param means: A list of mean values.\n    :param num_sents: A list with number of sentences used to compute each mean value.\n    :return: The combined standard deviation.\n    \"\"\"", "\n", "if", "not", "stds", "or", "not", "means", "or", "not", "num_sents", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid input list.\"", ")", "\n", "", "check_condition", "(", "all", "(", "len", "(", "stds", ")", "==", "len", "(", "l", ")", "for", "l", "in", "[", "means", ",", "num_sents", "]", ")", ",", "\"List lengths do not match\"", ")", "# type: ignore", "\n", "total_mean", "=", "combine_means", "(", "means", ",", "num_sents", ")", "\n", "return", "math", ".", "sqrt", "(", "sum", "(", "num_sent", "*", "(", "std", "**", "2", "+", "(", "mean", "-", "total_mean", ")", "**", "2", ")", "for", "num_sent", ",", "std", ",", "mean", "in", "zip", "(", "num_sents", ",", "stds", ",", "means", ")", "\n", "if", "std", "is", "not", "None", "and", "mean", "is", "not", "None", ")", "/", "sum", "(", "num_sents", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.average_tensors": [[252, 265], ["utils.check_condition", "ValueError", "len", "all", "sum", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["", "def", "average_tensors", "(", "tensors", ":", "List", "[", "pt", ".", "Tensor", "]", ")", "->", "pt", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Compute the element-wise average of a list of tensors of the same shape.\n\n    :param tensors: A list of input tensors with the same shape.\n    :return: The average of the tensors on the same device as tensors[0].\n    \"\"\"", "\n", "if", "not", "tensors", ":", "\n", "        ", "raise", "ValueError", "(", "\"tensors is empty.\"", ")", "\n", "", "if", "len", "(", "tensors", ")", "==", "1", ":", "\n", "        ", "return", "tensors", "[", "0", "]", "\n", "", "check_condition", "(", "all", "(", "tensors", "[", "0", "]", ".", "shape", "==", "t", ".", "shape", "for", "t", "in", "tensors", ")", ",", "\"tensor shapes do not match\"", ")", "\n", "return", "sum", "(", "tensors", ")", "/", "len", "(", "tensors", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.gen_prefix_masking": [[267, 309], ["list", "list.append", "torch.full", "pt.full.scatter_", "pt.full.masked_fill_", "prefix.size", "prefix.to().unsqueeze", "prefix.unsqueeze", "prefix.to"], "function", ["None"], ["", "def", "gen_prefix_masking", "(", "prefix", ":", "pt", ".", "Tensor", ",", "vocab_size", ":", "int", ",", "dtype", ":", "pt", ".", "dtype", ")", "->", "Tuple", "[", "pt", ".", "Tensor", ",", "int", "]", ":", "\n", "    ", "\"\"\"\n    Generate prefix masks from prefix ids, which are inf everywhere except zero for prefix ids.\n\n    :param prefix: Target prefix token or factors in ids. Shape (batch size, max length of prefix).\n    :param vocab_size: vocabulary size\n    :param dtype: dtype of the retuning output\n    :return prefix_masks (batch size, max length of prefix, vocab_size), with type as dtype\n\n    \"\"\"", "\n", "prefix_masks_sizes", "=", "list", "(", "prefix", ".", "size", "(", ")", ")", "# type: List[int]", "\n", "max_length", "=", "prefix_masks_sizes", "[", "1", "]", "\n", "prefix_masks_sizes", ".", "append", "(", "vocab_size", ")", "\n", "\n", "# prefix_masks are inf everywhere except zero for indices of prefix ids.", "\n", "prefix_masks", "=", "pt", ".", "full", "(", "prefix_masks_sizes", ",", "fill_value", "=", "np", ".", "inf", ",", "device", "=", "prefix", ".", "device", ",", "dtype", "=", "dtype", ")", "\n", "prefix_masks", ".", "scatter_", "(", "-", "1", ",", "prefix", ".", "to", "(", "pt", ".", "int64", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "0.", ")", "\n", "# Note: The use of prefix_masks.scatter_() function is equivalent (but much faster) to", "\n", "# prefix_masks[prefix_one_hot != 0] = 0., where", "\n", "# prefix_one_hot = pt.nn.functional.one_hot(prefix.to(pt.int64), num_classes=vocab_size).to(prefix.device)", "\n", "\n", "# In the same batch during inference, it is possible that some translations have target prefix", "\n", "# while others do not have. It is also possible that translation may have a target prefix with", "\n", "# different length to others. Thus prefix ids may include a full zero vector if a translation", "\n", "# in the batch does not have prefix, or include a vector padding with zeros on the right if some", "\n", "# translations are with shorter prefix. An example of prefix ids reflecting length differences \\", "\n", "# is as follows:", "\n", "#", "\n", "# [1, 2, 3]", "\n", "# [1, 2, 0]", "\n", "# [0, 0, 0]", "\n", "#", "\n", "# Here, the first sentence has a prefix of length 3, the second one has a prefix of length 1 \\", "\n", "# and the last one does not have prefix.", "\n", "#", "\n", "# At any timestep, some target prefix ids could be 0 (i.e. 0 in the target_prefix means 'no constraint'). \\", "\n", "# If a prefix id is 0 for a translation at a timestep, all hots in the vocab are assigned to 0 (instead \\", "\n", "# of only one hot is assigned to 0 and other hots are inf). This makes sure there is no constraint on \\", "\n", "# selecting any specific target token for the translation in that case.", "\n", "\n", "prefix_masks", ".", "masked_fill_", "(", "prefix", ".", "unsqueeze", "(", "-", "1", ")", "==", "0", ",", "0", ")", "\n", "return", "prefix_masks", ",", "max_length", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.shift_prefix_factors": [[311, 322], ["prefix_factors.size", "torch.zeros"], "function", ["None"], ["", "def", "shift_prefix_factors", "(", "prefix_factors", ":", "pt", ".", "Tensor", ")", "->", "pt", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Shift prefix factors one step to the right\n\n    :param prefix_factors: tensor ids. Shape (batch size, length, num of factors).\n    :return new prefix_factors_shift (batch size, length + 1, num of factors)\n    \"\"\"", "\n", "prefix_factors_sizes", "=", "prefix_factors", ".", "size", "(", ")", "\n", "prefix_factors_shift", "=", "pt", ".", "zeros", "(", "prefix_factors_sizes", "[", "0", "]", ",", "prefix_factors_sizes", "[", "1", "]", "+", "1", ",", "prefix_factors_sizes", "[", "2", "]", ",", "dtype", "=", "prefix_factors", ".", "dtype", ",", "device", "=", "prefix_factors", ".", "device", ")", "\n", "prefix_factors_shift", "[", ":", ",", "1", ":", "]", "=", "prefix_factors", "\n", "return", "prefix_factors_shift", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.adjust_first_step_masking": [[324, 412], ["first_step_mask.expand().clone.size", "target_prefix.size", "torch.zeros", "torch.clamp", "torch.roll", "masking.unsqueeze().expand().reshape.unsqueeze().expand().reshape", "first_step_mask.expand().clone.expand().clone", "first_step_mask.expand().clone.masked_fill_", "masking.unsqueeze().expand().reshape.unsqueeze().expand", "first_step_mask.expand().clone.expand", "masking.unsqueeze().expand().reshape.size", "masking.unsqueeze().expand().reshape.unsqueeze"], "function", ["None"], ["", "def", "adjust_first_step_masking", "(", "target_prefix", ":", "pt", ".", "Tensor", ",", "first_step_mask", ":", "pt", ".", "Tensor", ")", "->", "pt", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Adjust first_step_masking based on the target prefix\n    (Target prefix for each input in the same batch may have a different length. \\\n    Thus first_step_mask needs to be adjusted accordingly.)\n\n    :param target_prefix: Shape (batch size, max target prefix length).\n    :param first_step_mask: Shape (batch_size * beam_size, 1)\n    :return (adjusted) first_steps_masking (batch_size * beam_size, max target prefix length + 1).\n\n    An illustrative example of how first_step_masking is adjusted\n\n    Inputs:\n\n    target_prefix (batch_size = 2, max target prefix length = 2)\n\n    tensor([1 2]\n           [1 0])\n    Note: Two target prefix tokens in the first sentence, \\\n    one target prefix token in the second sentence.\n\n    first_step_mask (batch_size = 2 * beam_size = 5, 1)\n\n    tensor([[0],\n    [inf],\n    [inf],\n    [inf],\n    [inf],\n    [0],\n    [inf],\n    [inf],\n    [inf],\n    [inf])\n\n    Output:\n    Adjusted first_step_mask (batch_size * beam_size, max target prefix length + 1):\n\n    tensor([[0 0 0],\n            [inf inf inf],\n            [inf inf inf],\n            [inf inf inf],\n            [inf inf, inf],\n            [0 0 0],\n            [inf inf 0],\n            [inf inf 0],\n            [inf inf 0],\n            [inf inf 0]])\n\n    The concrete steps of what this function does are as follows:\n\n    Step 1: Create a zero masking matrix with shape (batch size, max target prefix length + 1)\n    Fill 1 into this masking matrix based on the target prefix\n\n    target prefix  initialize masking    masking      roll one step to the right\n                   from target prefix    is not 0      and assign 1 at index 0\n        [1 2]    ->    [1 2 0]        -> [1 1 0]  ->           [1 1 1]\n        [1 0]          [1 0 0]           [1 0 0]               [1 1 0]\n\n    Step 2: Adjust first_step_mask based on masking\n\n    masking     expand masking with     expand first_step_mask with max target\n                     beam size         prefix length, fill 0 where masking is 0\n    [1 1 1]  ->      [1 1 1]        ->             [0 0 0]\n    [1 1 0]          [1 1 1]                       [inf inf inf]\n                     [1 1 1]                       [inf inf inf]\n                     [1 1 1]                       [inf inf inf]\n                     [1 1 1]                       [inf inf inf]\n                     [1 1 0]                       [0 0 0]\n                     [1 1 0]                       [inf inf 0]\n                     [1 1 0]                       [inf inf 0]\n                     [1 1 0]                       [inf inf 0]\n                     [1 1 0]                       [inf inf 0]\n    \"\"\"", "\n", "batch_beam", ",", "_", "=", "first_step_mask", ".", "size", "(", ")", "\n", "batch", ",", "max_prefix_len", "=", "target_prefix", ".", "size", "(", ")", "\n", "beam_size", "=", "batch_beam", "//", "batch", "\n", "# Step 1", "\n", "masking", "=", "pt", ".", "zeros", "(", "(", "batch", ",", "max_prefix_len", "+", "1", ")", ",", "device", "=", "target_prefix", ".", "device", ")", "\n", "masking", "[", ":", ",", ":", "max_prefix_len", "]", "=", "target_prefix", "\n", "masking", "=", "pt", ".", "clamp", "(", "masking", ",", "0.", ",", "1.", ")", "# force all non zero ids to 1", "\n", "masking", "=", "pt", ".", "roll", "(", "masking", ",", "1", ",", "-", "1", ")", "\n", "masking", "[", ":", ",", "0", "]", "=", "1.", "\n", "\n", "# Step 2", "\n", "masking", "=", "masking", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "beam_size", ",", "-", "1", ")", ".", "reshape", "(", "batch_beam", ",", "-", "1", ")", "\n", "first_step_mask", "=", "first_step_mask", ".", "expand", "(", "-", "1", ",", "masking", ".", "size", "(", "-", "1", ")", ")", ".", "clone", "(", ")", "\n", "first_step_mask", ".", "masked_fill_", "(", "masking", "==", "0.", ",", "0.", ")", "\n", "return", "first_step_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.parse_metrics_line": [[414, 436], ["line.split", "int", "utils.check_condition", "dict", "field.split", "float"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition"], ["", "def", "parse_metrics_line", "(", "line_number", ":", "int", ",", "line", ":", "str", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\"\n    Parse a line of metrics into a mappings of key and values.\n\n    :param line_number: Line's number for checking if checkpoints are aligned to it.\n    :param line: A line from the Sockeye metrics file.\n    :return: Dictionary of metric names (e.g. perplexity-train) mapping to a list of values.\n    \"\"\"", "\n", "fields", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "checkpoint", "=", "int", "(", "fields", "[", "0", "]", ")", "\n", "check_condition", "(", "line_number", "==", "checkpoint", ",", "\n", "\"Line (%d) and loaded checkpoint (%d) do not align.\"", "%", "(", "line_number", ",", "checkpoint", ")", ")", "\n", "metric", "=", "dict", "(", ")", "# type: Dict[str, Any]", "\n", "for", "field", "in", "fields", "[", "1", ":", "]", ":", "\n", "        ", "key", ",", "value", "=", "field", ".", "split", "(", "\"=\"", ",", "1", ")", "\n", "if", "value", "==", "'True'", "or", "value", "==", "'False'", ":", "\n", "            ", "metric", "[", "key", "]", "=", "(", "value", "==", "'True'", ")", "\n", "", "elif", "value", "==", "'None'", ":", "\n", "            ", "metric", "[", "key", "]", "=", "None", "\n", "", "else", ":", "\n", "            ", "metric", "[", "key", "]", "=", "float", "(", "value", ")", "\n", "", "", "return", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.read_metrics_file": [[438, 448], ["open", "utils.parse_metrics_line", "line.strip", "enumerate"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.parse_metrics_line"], ["", "def", "read_metrics_file", "(", "path", ":", "str", ")", "->", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "    ", "\"\"\"\n    Reads lines metrics file and returns list of mappings of key and values.\n\n    :param path: File to read metric values from.\n    :return: Dictionary of metric names (e.g. perplexity-train) mapping to a list of values.\n    \"\"\"", "\n", "with", "open", "(", "path", ")", "as", "fin", ":", "\n", "        ", "metrics", "=", "[", "parse_metrics_line", "(", "i", ",", "line", ".", "strip", "(", ")", ")", "for", "i", ",", "line", "in", "enumerate", "(", "fin", ",", "1", ")", "]", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.write_metrics_file": [[450, 461], ["open", "enumerate", "metrics_out.write", "sorted", "metric_dict.items"], "function", ["None"], ["", "def", "write_metrics_file", "(", "metrics", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ",", "path", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Write metrics data to tab-separated file.\n\n    :param metrics: metrics data.\n    :param path: Path to write to.\n    \"\"\"", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "metrics_out", ":", "\n", "        ", "for", "checkpoint", ",", "metric_dict", "in", "enumerate", "(", "metrics", ",", "1", ")", ":", "\n", "            ", "metrics_str", "=", "\"\\t\"", ".", "join", "(", "[", "\"{}={}\"", ".", "format", "(", "name", ",", "value", ")", "for", "name", ",", "value", "in", "sorted", "(", "metric_dict", ".", "items", "(", ")", ")", "]", ")", "\n", "metrics_out", ".", "write", "(", "\"{}\\t{}\\n\"", ".", "format", "(", "checkpoint", ",", "metrics_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_validation_metric_points": [[463, 473], ["os.path.join", "utils.read_metrics_file", "enumerate"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.read_metrics_file"], ["", "", "", "def", "get_validation_metric_points", "(", "model_path", ":", "str", ",", "metric", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Returns tuples of value and checkpoint for given metric from metrics file at model_path.\n    :param model_path: Model path containing .metrics file.\n    :param metric: Metric values to extract.\n    :return: List of tuples (value, checkpoint).\n    \"\"\"", "\n", "metrics_path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "C", ".", "METRICS_NAME", ")", "\n", "data", "=", "read_metrics_file", "(", "metrics_path", ")", "\n", "return", "[", "(", "d", "[", "'%s-val'", "%", "metric", "]", ",", "cp", ")", "for", "cp", ",", "d", "in", "enumerate", "(", "data", ",", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.grouper": [[475, 489], ["iter", "list", "itertools.islice"], "function", ["None"], ["", "def", "grouper", "(", "iterable", ":", "Iterable", ",", "size", ":", "int", ")", "->", "Iterable", ":", "\n", "    ", "\"\"\"\n    Collect data into fixed-length chunks or blocks without discarding underfilled chunks or padding them.\n\n    :param iterable: A sequence of inputs.\n    :param size: Chunk size.\n    :return: Sequence of chunks.\n    \"\"\"", "\n", "it", "=", "iter", "(", "iterable", ")", "\n", "while", "True", ":", "\n", "        ", "chunk", "=", "list", "(", "itertools", ".", "islice", "(", "it", ",", "size", ")", ")", "\n", "if", "not", "chunk", ":", "\n", "            ", "return", "\n", "", "yield", "chunk", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.metric_value_is_better": [[491, 499], ["None"], "function", ["None"], ["", "", "def", "metric_value_is_better", "(", "new", ":", "float", ",", "old", ":", "float", ",", "metric", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Returns true if new value is strictly better than old for given metric.\n    \"\"\"", "\n", "if", "C", ".", "METRIC_MAXIMIZE", "[", "metric", "]", ":", "\n", "        ", "return", "new", ">", "old", "\n", "", "else", ":", "\n", "        ", "return", "new", "<", "old", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils._print_dtype": [[513, 515], ["_DTYPE_TO_STRING.get", "str"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.loss.PerplexityMetric.get"], ["def", "_print_dtype", "(", "dtype", ")", ":", "\n", "    ", "return", "_DTYPE_TO_STRING", ".", "get", "(", "dtype", ",", "str", "(", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.log_parameters": [[517, 552], ["collections.defaultdict", "model.named_modules", "collections.defaultdict.items", "logger.info", "logger.info", "logger.info", "logger.info", "module.named_parameters", "pprint.pformat", "pprint.pformat", "pprint.pformat", "param.shape.numel", "visited[].append", "len", "param.shape.numel", "shared_parameter_names.append", "fixed_parameter_names.append", "learned_parameter_names.append", "tuple", "utils._print_dtype"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils._print_dtype"], ["", "def", "log_parameters", "(", "model", ":", "pt", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    Logs information about model parameters.\n    \"\"\"", "\n", "fixed_parameter_names", "=", "[", "]", "\n", "learned_parameter_names", "=", "[", "]", "\n", "total_learned", "=", "0", "\n", "total_fixed", "=", "0", "\n", "visited", "=", "defaultdict", "(", "list", ")", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", "remove_duplicate", "=", "False", ")", ":", "\n", "        ", "for", "param_name", ",", "param", "in", "module", ".", "named_parameters", "(", "prefix", "=", "name", ",", "recurse", "=", "False", ")", ":", "\n", "            ", "repr", "=", "\"%s [%s, %s]\"", "%", "(", "name", ",", "tuple", "(", "param", ".", "shape", ")", ",", "_print_dtype", "(", "param", ".", "dtype", ")", ")", "\n", "size", "=", "param", ".", "shape", ".", "numel", "(", ")", "\n", "if", "not", "param", ".", "requires_grad", ":", "\n", "                ", "fixed_parameter_names", ".", "append", "(", "repr", ")", "\n", "total_fixed", "+=", "size", "if", "param", "not", "in", "visited", "else", "0", "\n", "", "else", ":", "\n", "                ", "total_learned", "+=", "size", "if", "param", "not", "in", "visited", "else", "0", "\n", "learned_parameter_names", ".", "append", "(", "repr", ")", "\n", "", "visited", "[", "param", "]", ".", "append", "(", "param_name", ")", "\n", "", "", "shared_parameter_names", "=", "[", "]", "# type: List[str]", "\n", "total_shared", "=", "0", "\n", "for", "param", ",", "names", "in", "visited", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "names", ")", ">", "1", ":", "\n", "            ", "total_shared", "+=", "param", ".", "shape", ".", "numel", "(", ")", "\n", "shared_parameter_names", ".", "append", "(", "\" = \"", ".", "join", "(", "names", ")", ")", "\n", "", "", "total_parameters", "=", "total_learned", "+", "total_fixed", "\n", "logger", ".", "info", "(", "\"# of parameters: %d | trainable: %d (%.2f%%) | shared: %d (%.2f%%) | fixed: %d (%.2f%%)\"", ",", "\n", "total_parameters", ",", "\n", "total_learned", ",", "total_learned", "/", "total_parameters", "*", "100", ",", "\n", "total_shared", ",", "total_shared", "/", "total_parameters", "*", "100", ",", "\n", "total_fixed", ",", "total_fixed", "/", "total_parameters", "*", "100", ")", "\n", "logger", ".", "info", "(", "\"Trainable parameters: \\n%s\"", ",", "pprint", ".", "pformat", "(", "learned_parameter_names", ")", ")", "\n", "logger", ".", "info", "(", "\"Shared parameters: \\n%s\"", ",", "pprint", ".", "pformat", "(", "shared_parameter_names", ",", "width", "=", "120", ")", ")", "\n", "logger", ".", "info", "(", "\"Fixed parameters:\\n%s\"", ",", "pprint", ".", "pformat", "(", "fixed_parameter_names", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.no_context": [[554, 560], ["None"], "function", ["None"], ["", "@", "contextmanager", "\n", "def", "no_context", "(", ")", ":", "\n", "    ", "\"\"\"\n    No-op context manager that can be used in \"with\" statements\n    \"\"\"", "\n", "yield", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.create_pool": [[577, 582], ["utils.SingleProcessPool", "multiprocessing.pool.Pool"], "function", ["None"], ["", "", "def", "create_pool", "(", "max_processes", ")", ":", "\n", "    ", "if", "max_processes", "==", "1", ":", "\n", "        ", "return", "SingleProcessPool", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "multiprocessing", ".", "pool", ".", "Pool", "(", "processes", "=", "max_processes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_distributed": [[584, 586], ["torch.distributed.is_initialized", "torch.distributed.is_initialized"], "function", ["None"], ["", "", "def", "is_distributed", "(", ")", "->", "bool", ":", "\n", "    ", "return", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.is_primary_worker": [[588, 594], ["torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.get_rank", "torch.distributed.get_rank"], "function", ["None"], ["", "def", "is_primary_worker", "(", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    True when current process is the primary worker (rank 0) or the only worker\n    (not running in distributed mode)\n    \"\"\"", "\n", "return", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_local_rank": [[596, 598], ["int"], "function", ["None"], ["", "def", "get_local_rank", "(", ")", "->", "int", ":", "\n", "    ", "return", "int", "(", "os", ".", "environ", "[", "C", ".", "DIST_ENV_LOCAL_RANK", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.broadcast_object": [[603, 611], ["torch.distributed.broadcast_object_list", "torch.distributed.broadcast_object_list"], "function", ["None"], ["def", "broadcast_object", "(", "obj", ":", "T", ",", "src", ":", "int", "=", "0", ")", "->", "T", ":", "\n", "    ", "\"\"\"\n    Broadcast a single Python object across workers (default source is primary\n    worker with rank 0)\n    \"\"\"", "\n", "obj_list", "=", "[", "obj", "]", "\n", "torch", ".", "distributed", ".", "broadcast_object_list", "(", "obj_list", ",", "src", "=", "src", ")", "\n", "return", "obj_list", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.all_gather_object": [[613, 618], ["torch.distributed.all_gather_object", "torch.distributed.all_gather_object", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.all_gather_object", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.all_gather_object"], ["", "def", "all_gather_object", "(", "obj", ":", "T", ")", "->", "List", "[", "T", "]", ":", "\n", "    ", "\"\"\"Gather each worker's instance of an object, returned as a list\"\"\"", "\n", "obj_list", "=", "[", "None", "]", "*", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "# type: List[T]", "\n", "torch", ".", "distributed", ".", "all_gather_object", "(", "obj_list", ",", "obj", ")", "\n", "return", "obj_list", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.count_seq_len": [[620, 634], ["len", "sample.replace.replace", "sample.replace.replace", "len", "utils.SockeyeError", "sample.replace.split"], "function", ["None"], ["", "def", "count_seq_len", "(", "sample", ":", "str", ",", "count_type", ":", "str", "=", "'char'", ",", "replace_tokens", ":", "Optional", "[", "List", "]", "=", "None", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Count sequence length, after replacing (optional) token/s.\n    \"\"\"", "\n", "if", "replace_tokens", "is", "not", "None", ":", "\n", "        ", "for", "tokens", "in", "replace_tokens", ":", "\n", "            ", "sample", "=", "sample", ".", "replace", "(", "tokens", ",", "''", ")", "\n", "", "", "if", "count_type", "==", "C", ".", "SEQ_LEN_IN_CHARACTERS", ":", "\n", "        ", "return", "len", "(", "sample", ".", "replace", "(", "C", ".", "TOKEN_SEPARATOR", ",", "''", ")", ")", "\n", "", "elif", "count_type", "==", "C", ".", "SEQ_LEN_IN_TOKENS", ":", "\n", "        ", "return", "len", "(", "sample", ".", "split", "(", "C", ".", "TOKEN_SEPARATOR", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "SockeyeError", "(", "\"Sequence length count type '%s' unknown. \"", "\n", "\"Choices are: %s\"", "%", "(", "count_type", ",", "[", "C", ".", "SEQ_LEN_IN_CHARACTERS", ",", "C", ".", "SEQ_LEN_IN_TOKENS", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.compute_isometric_score": [[636, 671], ["utils.count_seq_len", "utils.count_seq_len", "abs", "float", "abs", "float", "float"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.count_seq_len", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.count_seq_len"], ["", "", "def", "compute_isometric_score", "(", "hypothesis", ":", "str", ",", "hypothesis_score", ":", "float", ",", "source", ":", "str", ",", "\n", "isometric_metric", ":", "str", "=", "'isometric-ratio'", ",", "isometric_alpha", ":", "float", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"\n    Compute hypothesis to source isometric score using sample char length\n    and isometric metric (ratio, diff, lc).\n        - isometric-diff: https://aclanthology.org/W19-5210.pdf\n        - isometric-ratio/lc: https://arxiv.org/pdf/2110.03847.pdf\n    :return isometric score\n    \"\"\"", "\n", "count_type", "=", "C", ".", "SEQ_LEN_IN_CHARACTERS", "# for isometric scoring, count length in characters", "\n", "replace_tokens", "=", "C", ".", "TOKEN_SEGMENTATION_MARKERS", "\n", "\n", "hypothesis_len", "=", "count_seq_len", "(", "hypothesis", ",", "count_type", ",", "replace_tokens", ")", "\n", "source_len", "=", "count_seq_len", "(", "source", ",", "count_type", ",", "replace_tokens", ")", "\n", "\n", "if", "isometric_metric", "==", "C", ".", "RERANK_ISOMETRIC_LC", ":", "\n", "        ", "abs_len_diff", "=", "abs", "(", "hypothesis_len", "-", "source_len", ")", "\n", "isometric_score", "=", "(", "abs_len_diff", "*", "100", ")", "/", "source_len", "if", "source_len", "else", "abs_len_diff", "*", "100", "\n", "\n", "return", "isometric_score", "\n", "", "else", ":", "\n", "        ", "if", "isometric_metric", "==", "C", ".", "RERANK_ISOMETRIC_RATIO", ":", "\n", "            ", "len_ratio", "=", "hypothesis_len", "/", "source_len", "if", "source_len", "else", "hypothesis_len", "\n", "synchrony_score", "=", "float", "(", "1", "/", "(", "1", "+", "len_ratio", ")", ")", "\n", "\n", "", "if", "isometric_metric", "==", "C", ".", "RERANK_ISOMETRIC_DIFF", ":", "\n", "            ", "abs_len_diff", "=", "abs", "(", "hypothesis_len", "-", "source_len", ")", "\n", "synchrony_score", "=", "float", "(", "1", "/", "(", "1", "+", "abs_len_diff", ")", ")", "\n", "\n", "# isometric score, if alpha=0.0 takes model prediction score", "\n", "", "pred_sub_score", "=", "(", "1", "-", "isometric_alpha", ")", "*", "float", "(", "hypothesis_score", ")", "\n", "synchrony_sub_score", "=", "isometric_alpha", "*", "synchrony_score", "\n", "isometric_score", "=", "pred_sub_score", "+", "synchrony_sub_score", "\n", "\n", "return", "isometric_score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.optimizers.get_optimizer": [[50, 87], ["ValueError", "logging.info", "adam_impl", "logger.warning", "model.parameters", "sgd_impl", "model.parameters"], "function", ["None"], ["", "def", "get_optimizer", "(", "model", ":", "torch", ".", "nn", ".", "Module", ",", "config", ":", "OptimizerConfig", ")", "->", "Tuple", "[", "torch", ".", "optim", ".", "Optimizer", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "    ", "\"\"\"\n    Create an optimizer for a Sockeye model using the specified config settings.\n\n    :param model: Sockeye model.\n    :param config: Optimizer config.\n\n    :return: Tuple of an Optimizer and the kwargs dict for calling that\n             optimizer's `zero_grad()` method.\n    \"\"\"", "\n", "adam_impl", "=", "torch", ".", "optim", ".", "Adam", "\n", "sgd_impl", "=", "torch", ".", "optim", ".", "SGD", "\n", "# Built-in optimizers take the \"set_to_none\" argument. See:", "\n", "# https://pytorch.org/tutorials/recipes/recipes/tuning_guide.html", "\n", "zero_grad_kwargs", "=", "{", "'set_to_none'", ":", "True", "}", "\n", "\n", "if", "config", ".", "running_on_gpu", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "apex", ".", "optimizers", "import", "FusedAdam", ",", "FusedSGD", "\n", "adam_impl", "=", "FusedAdam", "\n", "sgd_impl", "=", "FusedSGD", "\n", "# Apex optimizers automatically set gradients to none instead of", "\n", "# zeroing and do not have a \"set_to_none\" argument. See:", "\n", "# https://nvidia.github.io/apex/optimizers.html", "\n", "zero_grad_kwargs", "=", "{", "}", "\n", "logging", ".", "info", "(", "'Using NVIDIA Apex fused optimizers'", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "warning", "(", "'Cannot import NVIDIA Apex optimizers (FusedAdam, FusedSGD). Consider installing Apex for '", "\n", "'faster GPU training: https://github.com/NVIDIA/apex'", ")", "\n", "\n", "", "", "if", "config", ".", "name", "==", "C", ".", "OPTIMIZER_ADAM", ":", "\n", "        ", "return", "adam_impl", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "lr", ",", "betas", "=", "config", ".", "betas", ",", "eps", "=", "config", ".", "eps", ",", "\n", "weight_decay", "=", "config", ".", "weight_decay", ")", ",", "zero_grad_kwargs", "\n", "", "elif", "config", ".", "name", "==", "C", ".", "OPTIMIZER_SGD", ":", "\n", "        ", "return", "sgd_impl", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "lr", ",", "momentum", "=", "config", ".", "momentum", ",", "\n", "weight_decay", "=", "config", ".", "weight_decay", ")", ",", "zero_grad_kwargs", "\n", "", "raise", "ValueError", "(", "f'Unknown optimizer: {config.name}'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.count_tokens_for_path": [[33, 40], ["utils.smart_open", "vocab.count_tokens"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.smart_open", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.count_tokens"], ["def", "count_tokens_for_path", "(", "path", ":", "str", ")", "->", "Counter", ":", "\n", "    ", "\"\"\"\n    :param path: Path to file with one sentence per line.\n    :return: Token counter.\n    \"\"\"", "\n", "with", "utils", ".", "smart_open", "(", "path", ",", "mode", "=", "'rt'", ")", "as", "lines", ":", "\n", "        ", "return", "count_tokens", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.build_from_paths": [[42, 64], ["logger.info", "mapper", "sum", "vocab.build_pruned_vocab", "collections.Counter"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.build_pruned_vocab"], ["", "", "def", "build_from_paths", "(", "paths", ":", "Iterable", "[", "str", "]", ",", "num_words", ":", "Optional", "[", "int", "]", "=", "None", ",", "min_count", ":", "int", "=", "1", ",", "\n", "pad_to_multiple_of", ":", "Optional", "[", "int", "]", "=", "None", ",", "mapper", ":", "Callable", "=", "map", ")", "->", "Vocab", ":", "\n", "    ", "\"\"\"\n    Creates a vocabulary mapping from words to ids from shard paths to files in sentence-per-line format.\n    A sentence is just a whitespace delimited list of tokens. Note that special symbols like the beginning of sentence (BOS)\n    symbol will be added to the vocabulary.\n\n    :param paths: List of tuples containing shard paths to files with one sentence per line.\n    :param num_words: Optional maximum number of words in the vocabulary.\n    :param min_count: Minimum occurrences of words to be included in the vocabulary.\n    :param pad_to_multiple_of: If not None, pads the vocabulary to a size that is the next multiple of this int.\n    :param mapper: Built-in map function for sequential execution or multiprocessing.pool.map function for parallel execution.\n    :return: Word-to-id mapping.\n    \"\"\"", "\n", "logger", ".", "info", "(", "\"Building vocabulary from dataset(s): %s\"", ",", "\" \"", ".", "join", "(", "paths", ")", ")", "# type: ignore", "\n", "vocab_counters", "=", "mapper", "(", "count_tokens_for_path", ",", "paths", ")", "\n", "# Combine shard Counters and create a single Vocab", "\n", "raw_vocab", "=", "sum", "(", "vocab_counters", ",", "Counter", "(", ")", ")", "# type: Counter", "\n", "return", "build_pruned_vocab", "(", "raw_vocab", "=", "raw_vocab", ",", "\n", "num_words", "=", "num_words", ",", "\n", "min_count", "=", "min_count", ",", "\n", "pad_to_multiple_of", "=", "pad_to_multiple_of", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.build_vocab": [[66, 84], ["vocab.count_tokens", "vocab.build_pruned_vocab"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.count_tokens", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.build_pruned_vocab"], ["", "def", "build_vocab", "(", "data", ":", "Iterable", "[", "str", "]", ",", "num_words", ":", "Optional", "[", "int", "]", "=", "None", ",", "min_count", ":", "int", "=", "1", ",", "\n", "pad_to_multiple_of", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "Vocab", ":", "\n", "    ", "\"\"\"\n    Creates a vocabulary mapping from words to ids. Increasing integer ids are assigned by word frequency,\n    using lexical sorting as a tie breaker. The only exception to this are special symbols such as the padding symbol\n    (PAD).\n\n    :param data: Sequence of sentences containing whitespace-delimited tokens.\n    :param num_words: Optional maximum number of words in the vocabulary.\n    :param min_count: Minimum occurrences of words to be included in the vocabulary.\n    :param pad_to_multiple_of: If not None, pads the vocabulary to a size that is the next multiple of this int.\n    :return: Word-to-id mapping.\n    \"\"\"", "\n", "raw_vocab", "=", "count_tokens", "(", "data", ")", "\n", "return", "build_pruned_vocab", "(", "raw_vocab", "=", "raw_vocab", ",", "\n", "num_words", "=", "num_words", ",", "\n", "min_count", "=", "min_count", ",", "\n", "pad_to_multiple_of", "=", "pad_to_multiple_of", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.build_pruned_vocab": [[86, 132], ["logger.info", "list", "str", "logger.info", "str", "len", "len", "len", "len", "sorted", "itertools.islice", "len", "len", "enumerate", "range", "itertools.chain", "raw_vocab.items"], "function", ["None"], ["", "def", "build_pruned_vocab", "(", "raw_vocab", ":", "Counter", ",", "num_words", ":", "Optional", "[", "int", "]", "=", "None", ",", "min_count", ":", "int", "=", "1", ",", "\n", "pad_to_multiple_of", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "Vocab", ":", "\n", "    ", "\"\"\"\n    Creates a vocabulary mapping from words to ids. Increasing integer ids are assigned by word frequency,\n    using lexical sorting as a tie breaker. The only exception to this are special symbols such as the padding symbol\n    (PAD).\n\n    :param raw_vocab: Raw token counts.\n    :param num_words: Optional maximum number of words in the vocabulary.\n    :param min_count: Minimum occurrences of words to be included in the vocabulary.\n    :param pad_to_multiple_of: If not None, pads the vocabulary to a size that is the next multiple of this int.\n    :return: Word-to-id mapping.\n    \"\"\"", "\n", "# For words with the same count, they will be ordered reverse alphabetically.", "\n", "# Not an issue since we only care for consistency", "\n", "pruned_vocab", "=", "[", "w", "for", "_", ",", "w", "in", "sorted", "(", "\n", "(", "(", "c", ",", "w", ")", "for", "w", ",", "c", "in", "raw_vocab", ".", "items", "(", ")", "if", "c", ">=", "min_count", "and", "w", "not", "in", "C", ".", "VOCAB_SYMBOLS", ")", ",", "reverse", "=", "True", ")", "]", "\n", "\n", "if", "num_words", "is", "not", "None", ":", "\n", "        ", "vocab", "=", "list", "(", "islice", "(", "pruned_vocab", ",", "num_words", ")", ")", "\n", "num_words_log", "=", "str", "(", "num_words", ")", "\n", "", "else", ":", "\n", "        ", "vocab", "=", "pruned_vocab", "\n", "num_words_log", "=", "\"None\"", "\n", "\n", "", "if", "pad_to_multiple_of", "is", "not", "None", ":", "\n", "        ", "current_vocab_size", "=", "len", "(", "vocab", ")", "+", "len", "(", "C", ".", "VOCAB_SYMBOLS", ")", "\n", "rest", "=", "current_vocab_size", "%", "pad_to_multiple_of", "\n", "padded_vocab_size", "=", "current_vocab_size", "if", "rest", "==", "0", "else", "current_vocab_size", "+", "pad_to_multiple_of", "-", "rest", "\n", "logger", ".", "info", "(", "\"Padding vocabulary to a multiple of %d: %d -> %d\"", ",", "\n", "pad_to_multiple_of", ",", "current_vocab_size", ",", "padded_vocab_size", ")", "\n", "pad_entries", "=", "[", "C", ".", "PAD_FORMAT", "%", "idx", "for", "idx", "in", "range", "(", "current_vocab_size", ",", "padded_vocab_size", ")", "]", "\n", "pad_to_multiple_log", "=", "str", "(", "pad_to_multiple_of", ")", "\n", "", "else", ":", "\n", "        ", "pad_entries", "=", "[", "]", "\n", "pad_to_multiple_log", "=", "\"None\"", "\n", "\n", "", "word_to_id", "=", "{", "word", ":", "idx", "for", "idx", ",", "word", "in", "enumerate", "(", "chain", "(", "C", ".", "VOCAB_SYMBOLS", ",", "vocab", ",", "pad_entries", ")", ")", "}", "\n", "logger", ".", "info", "(", "\"Vocabulary: types: %d/%d/%d/%d (initial/min_pruned/max_pruned/+special) \"", "+", "\n", "\"[min_frequency=%d, max_num_types=%s, pad_to_multiple_of=%s]\"", ",", "\n", "len", "(", "raw_vocab", ")", ",", "len", "(", "pruned_vocab", ")", ",", "len", "(", "vocab", ")", ",", "\n", "len", "(", "word_to_id", ")", ",", "min_count", ",", "num_words_log", ",", "pad_to_multiple_log", ")", "\n", "\n", "# Important: pad symbol becomes index 0", "\n", "assert", "word_to_id", "[", "C", ".", "PAD_SYMBOL", "]", "==", "C", ".", "PAD_ID", "\n", "return", "word_to_id", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.count_tokens": [[134, 142], ["collections.Counter", "utils.get_tokens"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.get_tokens"], ["", "def", "count_tokens", "(", "data", ":", "Iterable", "[", "str", "]", ")", "->", "Counter", ":", "\n", "    ", "\"\"\"\n    Count whitespace delimited tokens.\n\n    :param data: Sequence of sentences containing whitespace-delimited tokens.\n    :return: Token counter.\n    \"\"\"", "\n", "return", "Counter", "(", "token", "for", "line", "in", "data", "for", "token", "in", "utils", ".", "get_tokens", "(", "line", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.vocab_to_json": [[144, 154], ["open", "json.dump", "logger.info"], "function", ["None"], ["", "def", "vocab_to_json", "(", "vocab", ":", "Vocab", ",", "path", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Saves vocabulary in human-readable json.\n\n    :param vocab: Vocabulary mapping.\n    :param path: Output file path.\n    \"\"\"", "\n", "with", "open", "(", "path", ",", "\"w\"", ",", "encoding", "=", "C", ".", "VOCAB_ENCODING", ")", "as", "out", ":", "\n", "        ", "json", ".", "dump", "(", "vocab", ",", "out", ",", "indent", "=", "4", ",", "ensure_ascii", "=", "False", ")", "\n", "logger", ".", "info", "(", "'Vocabulary saved to \"%s\"'", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.is_valid_vocab": [[156, 188], ["vocab.items", "set", "set", "logger.warning", "logger.warning", "logger.warning", "logger.warning", "word_ids.append", "len", "len", "logger.warning", "range", "logger.warning", "len"], "function", ["None"], ["", "", "def", "is_valid_vocab", "(", "vocab", ":", "Vocab", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Checks if a vocabulary is valid. We define valid as:\n    1. All indices from 0 to num_words - 1 are present without duplicates.\n    2. PAD_SYMBOL has word id 0, UNK_SYMBOL has word id 1, BOS_SYMBOL has word id 2, EOS_SYMBOL has word id 3.\n    \"\"\"", "\n", "if", "vocab", "[", "C", ".", "PAD_SYMBOL", "]", "!=", "C", ".", "PAD_ID", ":", "\n", "        ", "logger", ".", "warning", "(", "\"PAD_SYMBOL does not have word id 0 in vocabulary.\"", ")", "\n", "return", "False", "\n", "", "if", "vocab", "[", "C", ".", "UNK_SYMBOL", "]", "!=", "C", ".", "UNK_ID", ":", "\n", "        ", "logger", ".", "warning", "(", "\"UNK_SYMBOL does not have word id 1 in vocabulary.\"", ")", "\n", "return", "False", "\n", "", "if", "vocab", "[", "C", ".", "BOS_SYMBOL", "]", "!=", "C", ".", "BOS_ID", ":", "\n", "        ", "logger", ".", "warning", "(", "\"BOS_SYMBOL does not have word id 2 in vocabulary.\"", ")", "\n", "return", "False", "\n", "", "if", "vocab", "[", "C", ".", "EOS_SYMBOL", "]", "!=", "C", ".", "EOS_ID", ":", "\n", "        ", "logger", ".", "warning", "(", "\"EOS_SYMBOL does not have word id 3 in vocabulary.\"", ")", "\n", "return", "False", "\n", "", "word_ids", "=", "[", "]", "\n", "for", "word", ",", "word_id", "in", "vocab", ".", "items", "(", ")", ":", "\n", "        ", "word_ids", ".", "append", "(", "word_id", ")", "\n", "", "word_ids_set", "=", "set", "(", "word_ids", ")", "\n", "if", "len", "(", "word_ids_set", ")", "!=", "len", "(", "word_ids", ")", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Duplicate word_ids in vocabulary.\"", ")", "\n", "return", "False", "\n", "\n", "", "expected_word_ids", "=", "set", "(", "range", "(", "0", ",", "len", "(", "vocab", ")", ")", ")", "\n", "if", "expected_word_ids", "!=", "word_ids_set", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Not all word_ids from 0 to len(vocabulary) present in vocabulary.\"", ")", "\n", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.vocab_from_json": [[190, 203], ["open", "json.load", "utils.check_condition", "logger.info", "vocab.is_valid_vocab", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.training.TrainState.load", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.is_valid_vocab"], ["", "def", "vocab_from_json", "(", "path", ":", "str", ",", "encoding", ":", "str", "=", "C", ".", "VOCAB_ENCODING", ")", "->", "Vocab", ":", "\n", "    ", "\"\"\"\n    Saves vocabulary in json format.\n\n    :param path: Path to json file containing the vocabulary.\n    :param encoding: Vocabulary encoding.\n    :return: The loaded vocabulary.\n    \"\"\"", "\n", "with", "open", "(", "path", ",", "encoding", "=", "encoding", ")", "as", "inp", ":", "\n", "        ", "vocab", "=", "json", ".", "load", "(", "inp", ")", "\n", "utils", ".", "check_condition", "(", "is_valid_vocab", "(", "vocab", ")", ",", "\"Vocabulary %s not valid.\"", "%", "path", ")", "\n", "logger", ".", "info", "(", "'Vocabulary (%d words) loaded from \"%s\"'", ",", "len", "(", "vocab", ")", ",", "path", ")", "\n", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.save_source_vocabs": [[205, 214], ["enumerate", "vocab.vocab_to_json", "os.path.join"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.vocab_to_json"], ["", "", "def", "save_source_vocabs", "(", "source_vocabs", ":", "List", "[", "Vocab", "]", ",", "folder", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Saves source vocabularies (primary surface form vocabulary) and optional factor vocabularies to folder.\n\n    :param source_vocabs: List of source vocabularies.\n    :param folder: Destination folder.\n    \"\"\"", "\n", "for", "i", ",", "vocab", "in", "enumerate", "(", "source_vocabs", ")", ":", "\n", "        ", "vocab_to_json", "(", "vocab", ",", "os", ".", "path", ".", "join", "(", "folder", ",", "C", ".", "VOCAB_SRC_NAME", "%", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.save_target_vocabs": [[216, 225], ["enumerate", "vocab.vocab_to_json", "os.path.join"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.vocab_to_json"], ["", "", "def", "save_target_vocabs", "(", "target_vocabs", ":", "List", "[", "Vocab", "]", ",", "folder", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Saves target vocabularies (primary surface form vocabulary) and optional factor vocabularies to folder.\n\n    :param target_vocabs: Target vocabulary.\n    :param folder: Destination folder.\n    \"\"\"", "\n", "for", "i", ",", "vocab", "in", "enumerate", "(", "target_vocabs", ")", ":", "\n", "        ", "vocab_to_json", "(", "vocab", ",", "os", ".", "path", ".", "join", "(", "folder", ",", "C", ".", "VOCAB_TRG_NAME", "%", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab._get_sorted_source_vocab_fnames": [[227, 230], ["sorted", "int", "x.split", "os.listdir", "f.startswith"], "function", ["None"], ["", "", "def", "_get_sorted_source_vocab_fnames", "(", "folder", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "_key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'.'", ",", "3", ")", "[", "-", "2", "]", ")", "\n", "return", "sorted", "(", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "folder", ")", "if", "f", ".", "startswith", "(", "C", ".", "VOCAB_SRC_PREFIX", ")", "]", ",", "key", "=", "_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab._get_sorted_target_vocab_fnames": [[232, 235], ["sorted", "int", "x.split", "os.listdir", "f.startswith"], "function", ["None"], ["", "def", "_get_sorted_target_vocab_fnames", "(", "folder", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "_key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'.'", ",", "3", ")", "[", "-", "2", "]", ")", "\n", "return", "sorted", "(", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "folder", ")", "if", "f", ".", "startswith", "(", "C", ".", "VOCAB_TRG_PREFIX", ")", "]", ",", "key", "=", "_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_source_vocabs": [[237, 246], ["vocab.vocab_from_json", "os.path.join", "vocab._get_sorted_source_vocab_fnames"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.vocab_from_json", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab._get_sorted_source_vocab_fnames"], ["", "def", "load_source_vocabs", "(", "folder", ":", "str", ")", "->", "List", "[", "Vocab", "]", ":", "\n", "    ", "\"\"\"\n    Loads source vocabularies from folder. The first element in the list is the primary source vocabulary.\n    Other elements correspond to optional additional source factor vocabularies found in folder.\n\n    :param folder: Source folder.\n    :return: List of vocabularies.\n    \"\"\"", "\n", "return", "[", "vocab_from_json", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "fname", ")", ")", "for", "fname", "in", "_get_sorted_source_vocab_fnames", "(", "folder", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_target_vocabs": [[248, 257], ["vocab.vocab_from_json", "os.path.join", "vocab._get_sorted_target_vocab_fnames"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.vocab_from_json", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab._get_sorted_target_vocab_fnames"], ["", "def", "load_target_vocabs", "(", "folder", ":", "str", ")", "->", "List", "[", "Vocab", "]", ":", "\n", "    ", "\"\"\"\n    Loads target vocabulary from folder. The first element in the list is the primary target vocabulary.\n    Other elements correspond to optional additional target factor vocabularies found in folder.\n\n    :param folder: Source folder.\n    :return: Target vocabularies\n    \"\"\"", "\n", "return", "[", "vocab_from_json", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "fname", ")", ")", "for", "fname", "in", "_get_sorted_target_vocab_fnames", "(", "folder", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_or_create_vocab": [[259, 272], ["vocab.build_from_paths", "vocab.vocab_from_json"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.build_from_paths", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.vocab_from_json"], ["", "def", "load_or_create_vocab", "(", "data", ":", "Iterable", "[", "str", "]", ",", "vocab_path", ":", "Optional", "[", "str", "]", ",", "num_words", ":", "int", ",", "word_min_count", ":", "int", ",", "\n", "pad_to_multiple_of", ":", "Optional", "[", "int", "]", "=", "None", ",", "mapper", ":", "Callable", "=", "map", ")", "->", "Vocab", ":", "\n", "    ", "\"\"\"\n    If the vocabulary path is defined, the vocabulary is loaded from the path.\n    Otherwise, it is built from the data file. No writing to disk occurs.\n\n    :param data: Tuple of file paths for each shard.\n    \"\"\"", "\n", "if", "vocab_path", "is", "None", ":", "\n", "        ", "return", "build_from_paths", "(", "paths", "=", "data", ",", "num_words", "=", "num_words", ",", "min_count", "=", "word_min_count", ",", "\n", "pad_to_multiple_of", "=", "pad_to_multiple_of", ",", "mapper", "=", "mapper", ")", "\n", "", "else", ":", "\n", "        ", "return", "vocab_from_json", "(", "vocab_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_or_create_vocabs": [[273, 399], ["logger.info", "logger.info", "logger.info", "logger.info", "zip", "zip", "vocab.load_or_create_vocab", "vocab.load_or_create_vocab", "logger.info", "logger.info", "zip", "zip", "vocab.vocab_from_json", "vocab.vocab_from_json", "utils.check_condition", "len", "utils.check_condition", "vocab_source_factors.append", "vocab_source_factors.append", "len", "utils.check_condition", "vocab_target_factors.append", "vocab_target_factors.append", "vocab.are_identical", "utils.check_condition", "utils.check_condition", "vocab.build_from_paths", "logger.info", "vocab.vocab_from_json", "len", "vocab.load_or_create_vocab", "len", "vocab.load_or_create_vocab", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_or_create_vocab", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_or_create_vocab", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.vocab_from_json", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.vocab_from_json", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.are_identical", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.build_from_paths", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.vocab_from_json", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_or_create_vocab", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.load_or_create_vocab"], ["", "", "def", "load_or_create_vocabs", "(", "shard_source_paths", ":", "Iterable", "[", "Iterable", "[", "str", "]", "]", ",", "\n", "shard_target_paths", ":", "Iterable", "[", "Iterable", "[", "str", "]", "]", ",", "\n", "source_vocab_paths", ":", "List", "[", "Optional", "[", "str", "]", "]", ",", "\n", "source_factor_vocab_same_as_source", ":", "List", "[", "bool", "]", ",", "\n", "target_vocab_paths", ":", "List", "[", "Optional", "[", "str", "]", "]", ",", "\n", "target_factor_vocab_same_as_target", ":", "List", "[", "bool", "]", ",", "\n", "shared_vocab", ":", "bool", ",", "\n", "num_words_source", ":", "Optional", "[", "int", "]", ",", "word_min_count_source", ":", "int", ",", "\n", "num_words_target", ":", "Optional", "[", "int", "]", ",", "word_min_count_target", ":", "int", ",", "\n", "pad_to_multiple_of", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "mapper", ":", "Callable", "=", "map", ")", "->", "Tuple", "[", "List", "[", "Vocab", "]", ",", "List", "[", "Vocab", "]", "]", ":", "\n", "    ", "\"\"\"\n    Returns vocabularies for source files (including factors) and target files (including factors.\n    If the respective vocabulary paths are not None, the vocabulary is read from the path and returned.\n    Otherwise, it is built from the support and saved to the path.\n\n    :param shard_source_paths: List of shards of list paths to the source text (and optional token-parallel factor files).\n    :param shard_target_paths: List of shards of list paths to the target text (and optional token-parallel factor files).\n    :param source_vocab_paths: The source vocabulary path (and optional factor vocabulary paths).\n    :param source_factor_vocab_same_as_source: List of bools whether factor vocabulary is equal to primary factor.\n    :param target_vocab_paths: The target vocabulary path (and optional factor vocabulary paths).\n    :param target_factor_vocab_same_as_target: List of bools whether factor vocabulary is equal to primary factor.\n    :param shared_vocab: Whether the source and target vocabularies are shared.\n    :param num_words_source: Number of words in the source vocabulary.\n    :param word_min_count_source: Minimum frequency of words in the source vocabulary.\n    :param num_words_target: Number of words in the target vocabulary.\n    :param word_min_count_target: Minimum frequency of words in the target vocabulary.\n    :param pad_to_multiple_of: If not None, pads the vocabularies to a size that is the next multiple of this int.\n    :param mapper: Built-in map function or multiprocessing.pool.map with max_processes processes.\n    :return: List of source vocabularies (for source and factors), and target vocabulary.\n    \"\"\"", "\n", "shard_source_sentence_paths", ":", "Tuple", "[", "str", ",", "...", "]", "\n", "shard_source_factor_paths", ":", "List", "[", "Tuple", "[", "str", ",", "...", "]", "]", "\n", "shard_target_sentence_paths", ":", "Tuple", "[", "str", ",", "...", "]", "\n", "shard_target_factor_paths", ":", "List", "[", "Tuple", "[", "str", ",", "...", "]", "]", "\n", "\n", "shard_source_sentence_paths", ",", "*", "shard_source_factor_paths", "=", "[", "paths", "for", "paths", "in", "zip", "(", "*", "shard_source_paths", ")", "]", "# type: ignore", "\n", "source_vocab_path", ",", "*", "source_factor_vocab_paths", "=", "source_vocab_paths", "\n", "shard_target_sentence_paths", ",", "*", "shard_target_factor_paths", "=", "[", "paths", "for", "paths", "in", "zip", "(", "*", "shard_target_paths", ")", "]", "# type: ignore", "\n", "target_vocab_path", ",", "*", "target_factor_vocab_paths", "=", "target_vocab_paths", "\n", "logger", ".", "info", "(", "\"=============================\"", ")", "\n", "logger", ".", "info", "(", "\"Loading/creating vocabularies\"", ")", "\n", "logger", ".", "info", "(", "\"=============================\"", ")", "\n", "logger", ".", "info", "(", "\"(1) Surface form vocabularies (source & target)\"", ")", "\n", "\n", "if", "shared_vocab", ":", "\n", "        ", "if", "source_vocab_path", "and", "target_vocab_path", ":", "\n", "            ", "vocab_source", "=", "vocab_from_json", "(", "source_vocab_path", ")", "\n", "vocab_target", "=", "vocab_from_json", "(", "target_vocab_path", ")", "\n", "utils", ".", "check_condition", "(", "are_identical", "(", "vocab_source", ",", "vocab_target", ")", ",", "\n", "\"Shared vocabulary requires identical source and target vocabularies. \"", "\n", "\"The vocabularies in %s and %s are not identical.\"", "%", "(", "source_vocab_path", ",", "\n", "target_vocab_path", ")", ")", "\n", "\n", "", "elif", "source_vocab_path", "is", "None", "and", "target_vocab_path", "is", "None", ":", "\n", "            ", "utils", ".", "check_condition", "(", "num_words_source", "==", "num_words_target", ",", "\n", "\"A shared vocabulary requires the number of source and target words to be the same.\"", ")", "\n", "utils", ".", "check_condition", "(", "word_min_count_source", "==", "word_min_count_target", ",", "\n", "\"A shared vocabulary requires the minimum word count for source and target \"", "\n", "\"to be the same.\"", ")", "\n", "vocab_source", "=", "vocab_target", "=", "build_from_paths", "(", "paths", "=", "shard_source_sentence_paths", "+", "shard_target_sentence_paths", ",", "\n", "num_words", "=", "num_words_source", ",", "\n", "min_count", "=", "word_min_count_source", ",", "\n", "pad_to_multiple_of", "=", "pad_to_multiple_of", ",", "\n", "mapper", "=", "mapper", ")", "\n", "\n", "", "else", ":", "\n", "            ", "vocab_path", "=", "source_vocab_path", "if", "source_vocab_path", "is", "not", "None", "else", "target_vocab_path", "\n", "logger", ".", "info", "(", "\"Using %s as a shared source/target vocabulary.\"", "%", "vocab_path", ")", "\n", "vocab_source", "=", "vocab_target", "=", "vocab_from_json", "(", "vocab_path", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "vocab_source", "=", "load_or_create_vocab", "(", "shard_source_sentence_paths", ",", "source_vocab_path", ",", "num_words_source", ",", "word_min_count_source", ",", "\n", "pad_to_multiple_of", "=", "pad_to_multiple_of", ",", "mapper", "=", "mapper", ")", "\n", "vocab_target", "=", "load_or_create_vocab", "(", "shard_target_sentence_paths", ",", "target_vocab_path", ",", "num_words_target", ",", "word_min_count_target", ",", "\n", "pad_to_multiple_of", "=", "pad_to_multiple_of", ",", "mapper", "=", "mapper", ")", "\n", "\n", "", "vocab_source_factors", "=", "[", "]", "# type: List[Vocab]", "\n", "if", "shard_source_factor_paths", ":", "\n", "        ", "logger", ".", "info", "(", "\"(2) Additional source factor vocabularies\"", ")", "\n", "if", "len", "(", "source_factor_vocab_same_as_source", ")", ">", "1", ":", "\n", "            ", "utils", ".", "check_condition", "(", "len", "(", "source_factor_vocab_same_as_source", ")", "==", "len", "(", "shard_source_factor_paths", ")", ",", "\n", "\"The number of flags for sharing the vocabulary of \"", "\n", "\"source factors does not match the number of source \"", "\n", "\"factors.\"", ")", "\n", "", "elif", "len", "(", "source_factor_vocab_same_as_source", ")", "==", "1", ":", "\n", "            ", "source_factor_vocab_same_as_source", "=", "source_factor_vocab_same_as_source", "*", "len", "(", "shard_source_factor_paths", ")", "\n", "", "else", ":", "\n", "            ", "source_factor_vocab_same_as_source", "=", "[", "False", "]", "*", "len", "(", "shard_source_factor_paths", ")", "\n", "\n", "", "", "for", "shard_factor_paths", ",", "factor_vocab_path", ",", "share_source_vocab", "in", "zip", "(", "shard_source_factor_paths", ",", "\n", "source_factor_vocab_paths", ",", "\n", "source_factor_vocab_same_as_source", ")", ":", "\n", "        ", "if", "not", "share_source_vocab", ":", "\n", "            ", "vocab_source_factors", ".", "append", "(", "load_or_create_vocab", "(", "shard_factor_paths", ",", "factor_vocab_path", ",", "\n", "num_words_source", ",", "word_min_count_source", ",", "\n", "pad_to_multiple_of", "=", "pad_to_multiple_of", ",", "\n", "mapper", "=", "mapper", ")", ")", "\n", "", "else", ":", "\n", "            ", "vocab_source_factors", ".", "append", "(", "vocab_source", ")", "\n", "\n", "", "", "vocab_target_factors", "=", "[", "]", "# type: List[Vocab]", "\n", "if", "shard_target_factor_paths", ":", "\n", "        ", "logger", ".", "info", "(", "\"(3) Additional target factor vocabularies\"", ")", "\n", "if", "len", "(", "target_factor_vocab_same_as_target", ")", ">", "1", ":", "\n", "            ", "utils", ".", "check_condition", "(", "len", "(", "target_factor_vocab_same_as_target", ")", "==", "len", "(", "shard_target_factor_paths", ")", ",", "\n", "\"The number of flags for sharing the vocabulary of \"", "\n", "\"target factors does not match the number of target \"", "\n", "\"factors.\"", ")", "\n", "", "elif", "len", "(", "target_factor_vocab_same_as_target", ")", "==", "1", ":", "\n", "            ", "target_factor_vocab_same_as_target", "=", "target_factor_vocab_same_as_target", "*", "len", "(", "shard_target_factor_paths", ")", "\n", "", "else", ":", "\n", "            ", "target_factor_vocab_same_as_target", "=", "[", "False", "]", "*", "len", "(", "shard_target_factor_paths", ")", "\n", "\n", "", "", "for", "shard_factor_paths", ",", "factor_vocab_path", ",", "share_target_vocab", "in", "zip", "(", "shard_target_factor_paths", ",", "\n", "target_factor_vocab_paths", ",", "\n", "target_factor_vocab_same_as_target", ")", ":", "\n", "        ", "if", "not", "share_target_vocab", ":", "\n", "            ", "vocab_target_factors", ".", "append", "(", "load_or_create_vocab", "(", "shard_factor_paths", ",", "factor_vocab_path", ",", "\n", "num_words_target", ",", "word_min_count_target", ",", "\n", "pad_to_multiple_of", "=", "pad_to_multiple_of", ",", "\n", "mapper", "=", "mapper", ")", ")", "\n", "", "else", ":", "\n", "            ", "vocab_target_factors", ".", "append", "(", "vocab_target", ")", "\n", "\n", "", "", "return", "[", "vocab_source", "]", "+", "vocab_source_factors", ",", "[", "vocab_target", "]", "+", "vocab_target_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.reverse_vocab": [[401, 409], ["vocab.items"], "function", ["None"], ["", "def", "reverse_vocab", "(", "vocab", ":", "Vocab", ")", "->", "InverseVocab", ":", "\n", "    ", "\"\"\"\n    Returns value-to-key mapping from key-to-value-mapping.\n\n    :param vocab: Key to value mapping.\n    :return: A mapping from values to keys.\n    \"\"\"", "\n", "return", "{", "v", ":", "k", "for", "k", ",", "v", "in", "vocab", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.get_ordered_tokens_from_vocab": [[411, 419], ["sorted", "vocab.items"], "function", ["None"], ["", "def", "get_ordered_tokens_from_vocab", "(", "vocab", ":", "Vocab", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Returns the list of tokens in a vocabulary, ordered by increasing vocabulary id.\n\n    :param vocab: Input vocabulary.\n    :return: List of tokens.\n    \"\"\"", "\n", "return", "[", "token", "for", "token", ",", "token_id", "in", "sorted", "(", "vocab", ".", "items", "(", ")", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.are_identical": [[421, 424], ["all", "len", "set", "set", "vocab.items", "vocabs[].items"], "function", ["None"], ["", "def", "are_identical", "(", "*", "vocabs", ":", "Vocab", ")", ":", "\n", "    ", "assert", "len", "(", "vocabs", ")", ">", "0", ",", "\"At least one vocabulary needed.\"", "\n", "return", "all", "(", "set", "(", "vocab", ".", "items", "(", ")", ")", "==", "set", "(", "vocabs", "[", "0", "]", ".", "items", "(", ")", ")", "for", "vocab", "in", "vocabs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.main": [[426, 433], ["argparse.ArgumentParser", "arguments.add_build_vocab_args", "arguments.add_logging_args", "argparse.ArgumentParser.parse_args", "vocab.prepare_vocab"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_build_vocab_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.add_logging_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.arguments.ConfigArgumentParser.parse_args", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.prepare_vocab"], ["", "def", "main", "(", ")", ":", "\n", "    ", "from", ".", "import", "arguments", "\n", "params", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'CLI to build source and target vocab(s).'", ")", "\n", "arguments", ".", "add_build_vocab_args", "(", "params", ")", "\n", "arguments", ".", "add_logging_args", "(", "params", ")", "\n", "args", "=", "params", ".", "parse_args", "(", ")", "\n", "prepare_vocab", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.prepare_vocab": [[435, 457], ["utils.check_condition", "utils.check_condition", "sockeye.log.setup_main_logger", "utils.create_pool", "vocab.build_from_paths", "logger.info", "vocab.vocab_to_json", "len"], "function", ["home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.check_condition", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.log.setup_main_logger", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.utils.create_pool", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.build_from_paths", "home.repos.pwc.inspect_result.awslabs_sockeye.sockeye.vocab.vocab_to_json"], ["", "def", "prepare_vocab", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "num_words", ",", "num_words_other", "=", "args", ".", "num_words", "\n", "num_words", "=", "num_words", "if", "num_words", ">", "0", "else", "None", "\n", "num_words_other", "=", "num_words_other", "if", "num_words_other", ">", "0", "else", "None", "\n", "utils", ".", "check_condition", "(", "num_words", "==", "num_words_other", ",", "\n", "\"Vocabulary CLI only allows a common value for --num-words\"", ")", "\n", "word_min_count", ",", "word_min_count_other", "=", "args", ".", "word_min_count", "\n", "utils", ".", "check_condition", "(", "word_min_count", "==", "word_min_count_other", ",", "\n", "\"Vocabulary CLI only allows a common value for --word-min-count\"", ")", "\n", "\n", "setup_main_logger", "(", "file_logging", "=", "not", "args", ".", "no_logfile", ",", "console", "=", "not", "args", ".", "quiet", ",", "\n", "path", "=", "\"%s.%s\"", "%", "(", "args", ".", "output", ",", "C", ".", "LOG_NAME", ")", ")", "\n", "\n", "\n", "with", "utils", ".", "create_pool", "(", "args", ".", "max_processes", ")", "as", "pool", ":", "\n", "        ", "vocab", "=", "build_from_paths", "(", "args", ".", "inputs", ",", "\n", "num_words", "=", "num_words", ",", "\n", "min_count", "=", "word_min_count", ",", "\n", "pad_to_multiple_of", "=", "args", ".", "pad_vocab_to_multiple_of", ",", "\n", "mapper", "=", "pool", ".", "map", ")", "\n", "logger", ".", "info", "(", "\"Vocabulary size: %d \"", ",", "len", "(", "vocab", ")", ")", "\n", "vocab_to_json", "(", "vocab", ",", "args", ".", "output", ")", "\n", "\n"]]}