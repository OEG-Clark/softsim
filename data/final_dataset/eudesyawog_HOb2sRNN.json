{"home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.FCGRU.__init__": [[33, 48], ["tensorflow.compat.v1.nn.rnn_cell.RNNCell.__init__"], "methods", ["home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.FCGRU.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_units", ",", "\n", "fc_units", ",", "\n", "drop", ",", "\n", "activation", "=", "None", ",", "\n", "reuse", "=", "None", ",", "\n", "kernel_initializer", "=", "None", ",", "\n", "bias_initializer", "=", "None", ")", ":", "\n", "\t\t", "super", "(", "FCGRU", ",", "self", ")", ".", "__init__", "(", "_reuse", "=", "reuse", ")", "\n", "self", ".", "_num_units", "=", "num_units", "\n", "self", ".", "_fc_units", "=", "fc_units", "\n", "self", ".", "_drop", "=", "drop", "\n", "self", ".", "_activation", "=", "activation", "or", "math_ops", ".", "tanh", "\n", "self", ".", "_kernel_initializer", "=", "kernel_initializer", "\n", "self", ".", "_bias_initializer", "=", "bias_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.FCGRU.state_size": [[49, 52], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "_num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.FCGRU.output_size": [[53, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "_num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.FCGRU.call": [[57, 99], ["tensorflow.python.ops.variable_scope.variable_scope", "fcgru.getB", "fcgru.getW", "fcgru.getB", "fcgru.getW", "fcgru.getB", "fcgru.getW", "fcgru.getW", "fcgru.getB", "fcgru.getW", "fcgru.getW", "fcgru.getB", "fcgru.getW", "fcgru.getW", "tensorflow.python.ops.math_ops.tanh", "tensorflow.nn.dropout", "tensorflow.python.ops.math_ops.tanh", "tensorflow.nn.dropout", "tensorflow.python.ops.math_ops.sigmoid", "tensorflow.python.ops.math_ops.sigmoid", "fcgru.FCGRU._activation", "tensorflow.python.ops.init_ops.zeros_initializer", "int", "int", "int", "int", "int", "tensorflow.python.ops.math_ops.matmul", "tensorflow.python.ops.math_ops.matmul", "tensorflow.python.ops.math_ops.matmul", "tensorflow.python.ops.math_ops.matmul", "tensorflow.python.ops.math_ops.matmul", "tensorflow.python.ops.math_ops.matmul", "tensorflow.python.ops.math_ops.matmul", "tensorflow.python.ops.math_ops.matmul"], "methods", ["home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.getB", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.getW", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.getB", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.getW", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.getB", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.getW", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.getW", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.getB", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.getW", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.getW", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.getB", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.getW", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.getW"], ["", "def", "call", "(", "self", ",", "inputs", ",", "state", ")", ":", "\n", "\t\t", "with", "vs", ".", "variable_scope", "(", "\"gates\"", ")", ":", "\n", "\t\t\t", "bias_ones", "=", "self", ".", "_bias_initializer", "\n", "if", "self", ".", "_bias_initializer", "is", "None", ":", "\n", "\t\t\t\t", "dtype", "=", "[", "a", ".", "dtype", "for", "a", "in", "[", "inputs", ",", "state", "]", "]", "[", "0", "]", "\n", "bias_ones", "=", "init_ops", ".", "zeros_initializer", "(", "dtype", "=", "dtype", ")", "\n", "\n", "", "b_fc1", "=", "getB", "(", "_BIAS_FC1", ",", "self", ".", "_fc_units", ",", "bias_ones", ",", "dtype", ")", "\n", "weights_fc1", "=", "getW", "(", "_WEIGHTS_FC1", ",", "inputs", ".", "shape", "[", "1", "]", ",", "self", ".", "_fc_units", ",", "self", ".", "_kernel_initializer", ",", "dtype", ")", "\n", "\n", "b_fc2", "=", "getB", "(", "_BIAS_FC2", ",", "int", "(", "self", ".", "_fc_units", "*", "2", ")", ",", "bias_ones", ",", "dtype", ")", "\n", "weights_fc2", "=", "getW", "(", "_WEIGHTS_FC2", ",", "self", ".", "_fc_units", ",", "int", "(", "self", ".", "_fc_units", "*", "2", ")", ",", "self", ".", "_kernel_initializer", ",", "dtype", ")", "\n", "\n", "b_g1", "=", "getB", "(", "_BIAS_G1", ",", "self", ".", "_num_units", ",", "bias_ones", ",", "dtype", ")", "\n", "weights_g1", "=", "getW", "(", "_WEIGHTS_G1", ",", "int", "(", "self", ".", "_fc_units", "*", "2", ")", ",", "self", ".", "_num_units", ",", "self", ".", "_kernel_initializer", ",", "dtype", ")", "\n", "weights_g1h", "=", "getW", "(", "_WEIGHTS_G1H", ",", "self", ".", "_num_units", ",", "self", ".", "_num_units", ",", "self", ".", "_kernel_initializer", ",", "dtype", ")", "\n", "\n", "b_g2", "=", "getB", "(", "_BIAS_G2", ",", "self", ".", "_num_units", ",", "bias_ones", ",", "dtype", ")", "\n", "weights_g2", "=", "getW", "(", "_WEIGHTS_G2", ",", "int", "(", "self", ".", "_fc_units", "*", "2", ")", ",", "self", ".", "_num_units", ",", "self", ".", "_kernel_initializer", ",", "dtype", ")", "\n", "weights_g2h", "=", "getW", "(", "_WEIGHTS_G2H", ",", "self", ".", "_num_units", ",", "self", ".", "_num_units", ",", "self", ".", "_kernel_initializer", ",", "dtype", ")", "\n", "\n", "b_g3", "=", "getB", "(", "_BIAS_G3", ",", "self", ".", "_num_units", ",", "bias_ones", ",", "dtype", ")", "\n", "weights_g3", "=", "getW", "(", "_WEIGHTS_G3", ",", "int", "(", "self", ".", "_fc_units", "*", "2", ")", ",", "self", ".", "_num_units", ",", "self", ".", "_kernel_initializer", ",", "dtype", ")", "\n", "weights_g3h", "=", "getW", "(", "_WEIGHTS_G3H", ",", "self", ".", "_num_units", ",", "self", ".", "_num_units", ",", "self", ".", "_kernel_initializer", ",", "dtype", ")", "\n", "\n", "# Fully Connected Layers", "\n", "fc1", "=", "math_ops", ".", "tanh", "(", "math_ops", ".", "matmul", "(", "inputs", ",", "weights_fc1", ")", "+", "b_fc1", ")", "\n", "fc1", "=", "tf", ".", "nn", ".", "dropout", "(", "fc1", ",", "rate", "=", "self", ".", "_drop", ")", "\n", "\n", "fc2", "=", "math_ops", ".", "tanh", "(", "math_ops", ".", "matmul", "(", "fc1", ",", "weights_fc2", ")", "+", "b_fc2", ")", "\n", "fc2", "=", "tf", ".", "nn", ".", "dropout", "(", "fc2", ",", "rate", "=", "self", ".", "_drop", ")", "\n", "\n", "# Update Gate", "\n", "zt", "=", "math_ops", ".", "sigmoid", "(", "math_ops", ".", "matmul", "(", "fc2", ",", "weights_g1", ")", "+", "math_ops", ".", "matmul", "(", "state", ",", "weights_g1h", ")", "+", "b_g1", ")", "\n", "# Reset Gate", "\n", "rt", "=", "math_ops", ".", "sigmoid", "(", "math_ops", ".", "matmul", "(", "fc2", ",", "weights_g2", ")", "+", "math_ops", ".", "matmul", "(", "state", ",", "weights_g2h", ")", "+", "b_g2", ")", "\n", "# Memory content ", "\n", "ht_c", "=", "self", ".", "_activation", "(", "math_ops", ".", "matmul", "(", "fc2", ",", "weights_g3", ")", "+", "math_ops", ".", "matmul", "(", "rt", "*", "state", ",", "weights_g3h", ")", "+", "b_g3", ")", "\n", "# New hidden state", "\n", "ht", "=", "(", "1", "-", "zt", ")", "*", "state", "+", "zt", "*", "ht_c", "\n", "\n", "return", "ht", ",", "ht", "", "", "", "", ""]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.getW": [[24, 26], ["tensorflow.python.ops.variable_scope.get_variable"], "function", ["None"], ["def", "getW", "(", "name", ",", "dim1", ",", "dim2", ",", "init", ",", "dtype", ")", ":", "\n", "\t", "return", "vs", ".", "get_variable", "(", "name", ",", "[", "dim1", ",", "dim2", "]", ",", "dtype", "=", "dtype", ",", "initializer", "=", "init", ")", "\n", "", "def", "getB", "(", "name", ",", "dim", ",", "init", ",", "dtype", ")", ":", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.fcgru.getB": [[26, 28], ["tensorflow.python.ops.variable_scope.get_variable"], "function", ["None"], ["", "def", "getB", "(", "name", ",", "dim", ",", "init", ",", "dtype", ")", ":", "\n", "\t", "return", "vs", ".", "get_variable", "(", "name", ",", "[", "dim", "]", ",", "dtype", "=", "dtype", ",", "initializer", "=", "init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.format_to_3D": [[12, 24], ["numpy.array", "print", "numpy.split", "np.array.append"], "function", ["None"], ["def", "format_to_3D", "(", "X", ",", "n_timestamps", ")", ":", "\n", "    ", "'''\n    input shape (n_samples,n_timestamps*n_bands) in order (t1b1,t1b2,..,t1bn,..,tmb1,tmb2,..,tmbn)\n    output shape (n_samples,n_timestamps,n_bands)\n    '''", "\n", "new_X", "=", "[", "]", "\n", "for", "row", "in", "X", ":", "\n", "        ", "temp", "=", "np", ".", "split", "(", "row", ",", "n_timestamps", ",", "axis", "=", "0", ")", "\n", "new_X", ".", "append", "(", "temp", ")", "\n", "", "new_X", "=", "np", ".", "array", "(", "new_X", ")", "\n", "print", "(", "new_X", ".", "shape", ")", "\n", "return", "new_X", "\n", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.format_label": [[25, 35], ["sklearn.preprocessing.LabelEncoder", "sklearn.preprocessing.LabelEncoder.fit_transform", "print", "tensorflow.keras.utils.to_categorical"], "function", ["None"], ["", "def", "format_label", "(", "y", ",", "n_classes", ",", "onehot", "=", "True", ")", ":", "\n", "    ", "'''\n    output shape (n_samples,n_classes) if onehot is True otherwise (n_samples,1)\n    '''", "\n", "encoder", "=", "LabelEncoder", "(", ")", "\n", "y_tr", "=", "encoder", ".", "fit_transform", "(", "y", ")", "\n", "if", "onehot", ":", "\n", "        ", "y_tr", "=", "tf", ".", "keras", ".", "utils", ".", "to_categorical", "(", "y_tr", ",", "n_classes", ")", "\n", "", "print", "(", "y_tr", ".", "shape", ")", "\n", "return", "y_tr", "\n", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.transform_label": [[36, 45], ["sklearn.preprocessing.LabelEncoder", "sklearn.preprocessing.LabelEncoder.fit", "sklearn.preprocessing.LabelEncoder.inverse_transform", "print"], "function", ["None"], ["", "def", "transform_label", "(", "test_label", ",", "test_prediction", ")", ":", "\n", "    ", "'''\n    Transform classification labels to input class values\n    '''", "\n", "encoder", "=", "LabelEncoder", "(", ")", "\n", "encoder", ".", "fit", "(", "test_label", ")", "\n", "prediction", "=", "encoder", ".", "inverse_transform", "(", "test_prediction", ")", "\n", "print", "(", "prediction", ".", "shape", ")", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.get_batch": [[46, 54], ["min"], "function", ["None"], ["", "def", "get_batch", "(", "array", ",", "i", ",", "batch_size", ")", ":", "\n", "    ", "'''\n    Return a batch of input array\n    '''", "\n", "start_id", "=", "i", "*", "batch_size", "\n", "end_id", "=", "min", "(", "(", "i", "+", "1", ")", "*", "batch_size", ",", "array", ".", "shape", "[", "0", "]", ")", "\n", "batch", "=", "array", "[", "start_id", ":", "end_id", "]", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.attention_mechanism": [[55, 71], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.tanh", "tensorflow.tensordot", "tensorflow.identity", "tensorflow.tanh", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.tensordot", "tensorflow.expand_dims"], "function", ["None"], ["", "def", "attention_mechanism", "(", "H", ",", "att_units", ",", "fcgru_units", ")", ":", "\n", "    ", "'''\n    Apply a customized attention mechanism on RNN outputs changing SoftMax in Tanh function\n    '''", "\n", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random", ".", "normal", "(", "[", "fcgru_units", ",", "att_units", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "random", ".", "normal", "(", "[", "att_units", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "u", "=", "tf", ".", "Variable", "(", "tf", ".", "random", ".", "normal", "(", "[", "att_units", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "\n", "v", "=", "tf", ".", "tanh", "(", "tf", ".", "tensordot", "(", "H", ",", "W", ",", "axes", "=", "1", ")", "+", "b", ")", "\n", "linear_lambdas", "=", "tf", ".", "tensordot", "(", "v", ",", "u", ",", "axes", "=", "1", ")", "\n", "linear_lambdas", "=", "tf", ".", "identity", "(", "linear_lambdas", ",", "name", "=", "\"att_scores\"", ")", "\n", "lambdas", "=", "tf", ".", "tanh", "(", "linear_lambdas", ",", "name", "=", "\"lambdas\"", ")", "\n", "\n", "output", "=", "tf", ".", "reduce_sum", "(", "H", "*", "tf", ".", "expand_dims", "(", "lambdas", ",", "-", "1", ")", ",", "1", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "fcgru_units", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.rnn": [[72, 83], ["tensorflow.unstack", "fcgru.FCGRU", "tensorflow.compat.v1.nn.rnn_cell.DropoutWrapper", "tensorflow.compat.v1.nn.static_rnn", "tensorflow.stack", "HOb2sRNN.attention_mechanism"], "function", ["home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.attention_mechanism"], ["", "def", "rnn", "(", "X", ",", "fcgru_units", ",", "fc_units", ",", "n_timestamps", ",", "dropOut", ")", ":", "\n", "    ", "'''\n    Define the RNN model using the FCGRU cell\n    '''", "\n", "X_seq", "=", "tf", ".", "unstack", "(", "X", ",", "axis", "=", "1", ")", "\n", "cell", "=", "FCGRU", "(", "fcgru_units", ",", "fc_units", ",", "dropOut", ")", "\n", "cell", "=", "tf", ".", "compat", ".", "v1", ".", "nn", ".", "rnn_cell", ".", "DropoutWrapper", "(", "cell", ",", "output_keep_prob", "=", "1", "-", "dropOut", ",", "state_keep_prob", "=", "1", "-", "dropOut", ")", "\n", "outputs", ",", "_", "=", "tf", ".", "compat", ".", "v1", ".", "nn", ".", "static_rnn", "(", "cell", ",", "X_seq", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "outputs", "=", "tf", ".", "stack", "(", "outputs", ",", "axis", "=", "1", ")", "\n", "output", "=", "attention_mechanism", "(", "outputs", ",", "fcgru_units", ",", "fcgru_units", ")", "\n", "return", "outputs", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.sensor_stream": [[84, 92], ["tensorflow.compat.v1.variable_scope", "HOb2sRNN.rnn", "tensorflow.identity"], "function", ["home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.rnn"], ["", "def", "sensor_stream", "(", "X", ",", "fcgru_units", ",", "fc_units", ",", "n_timestamps", ",", "dropOut", ",", "scope_name", ")", ":", "\n", "    ", "'''\n    Create a branch for each source time series (radar/optical)\n    '''", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "scope_name", ")", ":", "\n", "        ", "stream_hidden", ",", "stream_feat", "=", "rnn", "(", "X", ",", "fcgru_units", ",", "fc_units", ",", "n_timestamps", ",", "dropOut", ")", "\n", "stream_feat", "=", "tf", ".", "identity", "(", "stream_feat", ",", "name", "=", "\"learnt_features\"", ")", "\n", "", "return", "stream_hidden", ",", "stream_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.add_fc": [[93, 109], ["tensorflow.nn.relu", "tensorflow.nn.dropout", "tensorflow.nn.relu", "tensorflow.nn.dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Dense"], "function", ["None"], ["", "def", "add_fc", "(", "features", ",", "units", ",", "n_classes", ",", "dropOut", ")", ":", "\n", "    ", "'''\n    Add fully connected layers to classify output features\n    '''", "\n", "fc1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", ",", "activation", "=", "None", ")", "(", "features", ")", "\n", "fc1", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", "name", "=", "\"batchnorm1\"", ")", "(", "fc1", ")", "\n", "fc1", "=", "tf", ".", "nn", ".", "relu", "(", "fc1", ")", "\n", "fc1", "=", "tf", ".", "nn", ".", "dropout", "(", "fc1", ",", "rate", "=", "dropOut", ")", "\n", "\n", "fc2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", ",", "activation", "=", "None", ")", "(", "fc1", ")", "\n", "fc2", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", "name", "=", "\"batchnorm2\"", ")", "(", "fc2", ")", "\n", "fc2", "=", "tf", ".", "nn", ".", "relu", "(", "fc2", ")", "\n", "fc2", "=", "tf", ".", "nn", ".", "dropout", "(", "fc2", ",", "rate", "=", "dropOut", ")", "\n", "\n", "pred", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "n_classes", ")", "(", "fc2", ")", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.initialize_uninitialized": [[110, 120], ["tensorflow.compat.v1.global_variables", "sess.run", "len", "sess.run", "tensorflow.compat.v1.is_variable_initialized", "zip", "tensorflow.compat.v1.variables_initializer"], "function", ["home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.run", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.run"], ["", "def", "initialize_uninitialized", "(", "sess", ")", ":", "\n", "    ", "'''\n    Function to initialize uninitialized variables when re-using \n    previous learned weights at the precedent level of hierarchy\n    '''", "\n", "global_vars", "=", "tf", ".", "compat", ".", "v1", ".", "global_variables", "(", ")", "\n", "is_not_initialized", "=", "sess", ".", "run", "(", "[", "tf", ".", "compat", ".", "v1", ".", "is_variable_initialized", "(", "var", ")", "for", "var", "in", "global_vars", "]", ")", "\n", "not_initialized_vars", "=", "[", "v", "for", "(", "v", ",", "f", ")", "in", "zip", "(", "global_vars", ",", "is_not_initialized", ")", "if", "not", "f", "]", "\n", "if", "len", "(", "not_initialized_vars", ")", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "compat", ".", "v1", ".", "variables_initializer", "(", "not_initialized_vars", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.run": [[121, 262], ["tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "HOb2sRNN.sensor_stream", "lst_feat.append", "HOb2sRNN.sensor_stream", "lst_feat.append", "int", "print", "tensorflow.compat.v1.train.Saver", "tensorflow.compat.v1.global_variables_initializer", "tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.variable_scope", "tensorflow.concat", "HOb2sRNN.attention_mechanism", "tensorflow.identity", "tensorflow.compat.v1.variable_scope", "HOb2sRNN.add_fc", "tensorflow.nn.softmax", "tensorflow.math.argmax", "tensorflow.math.equal", "tensorflow.reduce_mean", "tensorflow.compat.v1.variable_scope", "tensorflow.reduce_mean", "tensorflow.compat.v1.variable_scope", "tensorflow.compat.v1.train.AdamOptimizer().minimize", "tensorflow.compat.v1.Session", "session.run", "range", "aux_pred.append", "tensorflow.math.argmax", "tensorflow.math.argmax", "tensorflow.dtypes.cast", "tensorflow.compat.v1.nn.softmax_cross_entropy_with_logits_v2", "time.time", "sklearn.utils.shuffle", "range", "time.time", "print", "int", "range", "sklearn.metrics.accuracy_score", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tensorflow.compat.v1.train.AdamOptimizer", "HOb2sRNN.get_batch", "HOb2sRNN.get_batch", "HOb2sRNN.get_batch", "session.run", "HOb2sRNN.get_batch", "HOb2sRNN.get_batch", "session.run", "print", "print", "print", "print", "print", "print", "print", "tensorflow.keras.layers.Dense", "tensorflow.compat.v1.nn.softmax_cross_entropy_with_logits_v2", "numpy.hstack", "numpy.bincount", "numpy.bincount", "sklearn.metrics.f1_score", "tf.compat.v1.train.Saver.save", "tf.compat.v1.train.Saver.save", "numpy.array", "numpy.array", "sklearn.metrics.f1_score", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.sensor_stream", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.sensor_stream", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.attention_mechanism", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.add_fc", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.run", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.get_batch", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.get_batch", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.get_batch", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.run", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.get_batch", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.get_batch", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.run"], ["", "", "def", "run", "(", "train_X_rad", ",", "train_X_opt", ",", "train_y", ",", "valid_X_rad", ",", "valid_X_opt", ",", "valid_y", ",", "output_dir_models", ",", "\n", "split_numb", ",", "level", ",", "n_timestamps_rad", ",", "n_timestamps_opt", ",", "n_classes", ",", "fcgru_units", ",", "fc_units", ",", "\n", "classif_units", ",", "batch_size", ",", "n_epochs", ",", "learning_rate", ",", "drop", ")", ":", "\n", "    ", "'''\n    Define the computational graph\n    '''", "\n", "n_bands_rad", "=", "train_X_rad", ".", "shape", "[", "-", "1", "]", "\n", "n_bands_opt", "=", "train_X_opt", ".", "shape", "[", "-", "1", "]", "\n", "\n", "# Placeholders", "\n", "X_rad", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "n_timestamps_rad", ",", "n_bands_rad", "]", ",", "name", "=", "\"X_rad\"", ")", "\n", "X_opt", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "n_timestamps_opt", ",", "n_bands_opt", "]", ",", "name", "=", "\"X_opt\"", ")", "\n", "if", "level", "is", "not", "None", ":", "\n", "        ", "y", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "\"float\"", ",", "[", "None", ",", "n_classes", "]", ",", "name", "=", "\"y_level%s\"", "%", "level", ")", "\n", "", "else", ":", "\n", "        ", "y", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "\"float\"", ",", "[", "None", ",", "n_classes", "]", ",", "name", "=", "\"y\"", ")", "\n", "", "dropOut", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", ")", ",", "name", "=", "\"drop_rate\"", ")", "\n", "\n", "# Radar and Optical branches", "\n", "lst_feat", "=", "[", "]", "\n", "\n", "stream_hidden_rad", ",", "stream_feat_rad", "=", "sensor_stream", "(", "X_rad", ",", "fcgru_units", ",", "fc_units", ",", "n_timestamps_rad", ",", "dropOut", ",", "\"rad_stream\"", ")", "\n", "lst_feat", ".", "append", "(", "stream_feat_rad", ")", "\n", "\n", "stream_hidden_opt", ",", "stream_feat_opt", "=", "sensor_stream", "(", "X_opt", ",", "fcgru_units", ",", "fc_units", ",", "n_timestamps_opt", ",", "dropOut", ",", "\"opt_stream\"", ")", "\n", "lst_feat", ".", "append", "(", "stream_feat_opt", ")", "\n", "\n", "# Features fusion with attention mechanism", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "\"combined_feat\"", ")", ":", "\n", "        ", "hidden_feat", "=", "tf", ".", "concat", "(", "[", "stream_hidden_rad", ",", "stream_hidden_opt", "]", ",", "axis", "=", "1", ",", "name", "=", "\"hidden_features\"", ")", "\n", "combined_feat", "=", "attention_mechanism", "(", "hidden_feat", ",", "fcgru_units", ",", "fcgru_units", ")", "\n", "combined_feat", "=", "tf", ".", "identity", "(", "combined_feat", ",", "name", "=", "\"learnt_features\"", ")", "\n", "\n", "# Combining 3 feature sets (radar, optical, fused)", "\n", "", "weight", "=", ".5", "\n", "aux_pred", "=", "[", "]", "\n", "\n", "if", "level", "is", "not", "None", ":", "\n", "        ", "pred_vs", "=", "\"pred_level%s\"", "%", "level", "\n", "cost_vs", "=", "\"cost_level%s\"", "%", "level", "\n", "optimizer_vs", "=", "\"optimizer_level%s\"", "%", "level", "\n", "", "else", ":", "\n", "        ", "pred_vs", "=", "\"pred\"", "\n", "cost_vs", "=", "\"cost\"", "\n", "optimizer_vs", "=", "\"optimizer\"", "\n", "\n", "", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "pred_vs", ")", ":", "\n", "        ", "for", "feat", "in", "lst_feat", ":", "\n", "            ", "aux_pred", ".", "append", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "n_classes", ")", "(", "feat", ")", ")", "\n", "", "logits_full", "=", "add_fc", "(", "combined_feat", ",", "classif_units", ",", "n_classes", ",", "dropOut", ")", "\n", "score_tot", "=", "tf", ".", "nn", ".", "softmax", "(", "logits_full", ")", "\n", "\n", "for", "p", "in", "aux_pred", ":", "\n", "            ", "score_tot", "+=", "weight", "*", "tf", ".", "nn", ".", "softmax", "(", "p", ")", "\n", "", "prediction", "=", "tf", ".", "math", ".", "argmax", "(", "score_tot", ",", "1", ",", "name", "=", "\"prediction\"", ")", "\n", "correct", "=", "tf", ".", "math", ".", "equal", "(", "tf", ".", "math", ".", "argmax", "(", "score_tot", ",", "1", ")", ",", "tf", ".", "math", ".", "argmax", "(", "y", ",", "1", ")", ")", "\n", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "dtypes", ".", "cast", "(", "correct", ",", "tf", ".", "float64", ")", ")", "\n", "\n", "# Cost function", "\n", "", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "cost_vs", ")", ":", "\n", "        ", "cost", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "compat", ".", "v1", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "y", ",", "logits", "=", "logits_full", ")", ")", "\n", "for", "p", "in", "aux_pred", ":", "\n", "            ", "cost", "+=", "weight", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "compat", ".", "v1", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "y", ",", "logits", "=", "p", ")", ")", "\n", "\n", "# Optimizer", "\n", "", "", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "optimizer_vs", ")", ":", "\n", "        ", "optimizer", "=", "tf", ".", "compat", ".", "v1", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learning_rate", ")", ".", "minimize", "(", "cost", ")", "\n", "\n", "# Create a session and run the graph on training data", "\n", "", "n_batch", "=", "int", "(", "train_X_rad", ".", "shape", "[", "0", "]", "/", "batch_size", ")", "\n", "if", "train_X_rad", ".", "shape", "[", "0", "]", "%", "batch_size", "!=", "0", ":", "\n", "        ", "n_batch", "+=", "1", "\n", "", "print", "(", "\"n_batch: %d\"", "%", "n_batch", ")", "\n", "\n", "saver", "=", "tf", ".", "compat", ".", "v1", ".", "train", ".", "Saver", "(", ")", "\n", "best_acc", "=", "sys", ".", "float_info", ".", "min", "\n", "\n", "init", "=", "tf", ".", "compat", ".", "v1", ".", "global_variables_initializer", "(", ")", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "Session", "(", ")", "as", "session", ":", "\n", "        ", "session", ".", "run", "(", "init", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "n_epochs", "+", "1", ")", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "epoch_acc", "=", "0", "\n", "\n", "train_X_rad", ",", "train_X_opt", ",", "train_y", "=", "shuffle", "(", "train_X_rad", ",", "train_X_opt", ",", "train_y", ",", "random_state", "=", "0", ")", "\n", "\n", "for", "batch", "in", "range", "(", "n_batch", ")", ":", "\n", "                ", "batch_X_rad", "=", "get_batch", "(", "train_X_rad", ",", "batch", ",", "batch_size", ")", "\n", "batch_X_opt", "=", "get_batch", "(", "train_X_opt", ",", "batch", ",", "batch_size", ")", "\n", "batch_y", "=", "get_batch", "(", "train_y", ",", "batch", ",", "batch_size", ")", "\n", "\n", "acc", ",", "loss", ",", "_", "=", "session", ".", "run", "(", "[", "accuracy", ",", "cost", ",", "optimizer", "]", ",", "feed_dict", "=", "{", "X_rad", ":", "batch_X_rad", ",", "\n", "X_opt", ":", "batch_X_opt", ",", "\n", "y", ":", "batch_y", ",", "\n", "dropOut", ":", "drop", "}", ")", "\n", "del", "batch_X_rad", ",", "batch_X_opt", ",", "batch_y", "\n", "\n", "epoch_loss", "+=", "loss", "\n", "epoch_acc", "+=", "acc", "\n", "\n", "", "stop", "=", "time", ".", "time", "(", ")", "\n", "elapsed", "=", "stop", "-", "start", "\n", "print", "(", "\"Epoch \"", ",", "epoch", ",", "\" Train loss:\"", ",", "epoch_loss", "/", "n_batch", ",", "\"| Accuracy:\"", ",", "epoch_acc", "/", "n_batch", ",", "\"| Time: \"", ",", "elapsed", ")", "\n", "\n", "# At each epoch validate the model on validation set and save it if accuracy is better", "\n", "valid_batch", "=", "int", "(", "valid_X_rad", ".", "shape", "[", "0", "]", "/", "(", "4", "*", "batch_size", ")", ")", "\n", "if", "valid_X_rad", ".", "shape", "[", "0", "]", "%", "(", "4", "*", "batch_size", ")", "!=", "0", ":", "\n", "                ", "valid_batch", "+=", "1", "\n", "\n", "", "total_pred", "=", "None", "\n", "for", "ibatch", "in", "range", "(", "valid_batch", ")", ":", "\n", "                ", "valid_batch_X_rad", "=", "get_batch", "(", "valid_X_rad", ",", "ibatch", ",", "4", "*", "batch_size", ")", "\n", "valid_batch_X_opt", "=", "get_batch", "(", "valid_X_opt", ",", "ibatch", ",", "4", "*", "batch_size", ")", "\n", "\n", "batch_pred", "=", "session", ".", "run", "(", "prediction", ",", "feed_dict", "=", "{", "X_rad", ":", "valid_batch_X_rad", ",", "\n", "X_opt", ":", "valid_batch_X_opt", ",", "\n", "dropOut", ":", "0.", "}", ")", "\n", "del", "valid_batch_X_rad", ",", "valid_batch_X_opt", "\n", "\n", "if", "total_pred", "is", "None", ":", "\n", "                    ", "total_pred", "=", "batch_pred", "\n", "", "else", ":", "\n", "                    ", "total_pred", "=", "np", ".", "hstack", "(", "(", "total_pred", ",", "batch_pred", ")", ")", "\n", "\n", "", "", "val_acc", "=", "accuracy_score", "(", "valid_y", ",", "total_pred", ")", "\n", "if", "val_acc", ">", "best_acc", ":", "\n", "                ", "print", "(", "np", ".", "bincount", "(", "np", ".", "array", "(", "total_pred", ")", ")", ")", "\n", "print", "(", "np", ".", "bincount", "(", "np", ".", "array", "(", "valid_y", ")", ")", ")", "\n", "\n", "print", "(", "\"PREDICTION\"", ")", "\n", "print", "(", "\"TEST F-Measure: %f\"", "%", "f1_score", "(", "valid_y", ",", "total_pred", ",", "average", "=", "'weighted'", ")", ")", "\n", "print", "(", "f1_score", "(", "valid_y", ",", "total_pred", ",", "average", "=", "None", ")", ")", "\n", "print", "(", "\"TEST Accuracy: %f\"", "%", "val_acc", ")", "\n", "if", "level", "is", "not", "None", ":", "\n", "                    ", "save_path", "=", "saver", ".", "save", "(", "session", ",", "output_dir_models", "+", "\"/model_\"", "+", "str", "(", "split_numb", ")", "+", "\"_level-\"", "+", "str", "(", "level", ")", ")", "\n", "", "else", ":", "\n", "                    ", "save_path", "=", "saver", ".", "save", "(", "session", ",", "output_dir_models", "+", "\"/model_\"", "+", "str", "(", "split_numb", ")", ")", "\n", "", "print", "(", "\"Model saved in path: %s\"", "%", "save_path", ")", "\n", "best_acc", "=", "val_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.restore_train": [[263, 378], ["os.path.join", "tensorflow.compat.v1.reset_default_graph", "tensorflow.compat.v1.Session", "tensorflow.compat.v1.train.import_meta_graph", "tf.compat.v1.train.import_meta_graph.restore", "tensorflow.compat.v1.get_default_graph", "tf.compat.v1.get_default_graph.get_tensor_by_name", "tf.compat.v1.get_default_graph.get_tensor_by_name", "tf.compat.v1.get_default_graph.get_tensor_by_name", "tf.compat.v1.get_default_graph.get_tensor_by_name", "tf.compat.v1.get_default_graph.get_tensor_by_name", "tf.compat.v1.get_default_graph.get_tensor_by_name", "print", "tensorflow.compat.v1.placeholder", "HOb2sRNN.initialize_uninitialized", "int", "print", "tensorflow.compat.v1.train.Saver", "range", "tensorflow.compat.v1.variable_scope", "aux_pred.append", "aux_pred.append", "HOb2sRNN.add_fc", "tensorflow.nn.softmax", "tensorflow.math.argmax", "tensorflow.math.equal", "tensorflow.reduce_mean", "tensorflow.compat.v1.variable_scope", "tensorflow.reduce_mean", "tensorflow.compat.v1.variable_scope", "tensorflow.compat.v1.train.AdamOptimizer().minimize", "time.time", "sklearn.utils.shuffle", "range", "time.time", "print", "int", "range", "sklearn.metrics.accuracy_score", "str", "str", "tensorflow.math.argmax", "tensorflow.math.argmax", "tensorflow.dtypes.cast", "tensorflow.compat.v1.nn.softmax_cross_entropy_with_logits_v2", "HOb2sRNN.get_batch", "HOb2sRNN.get_batch", "HOb2sRNN.get_batch", "session.run", "HOb2sRNN.get_batch", "HOb2sRNN.get_batch", "session.run", "print", "print", "print", "print", "print", "print", "tf.compat.v1.train.Saver.save", "print", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tensorflow.compat.v1.train.AdamOptimizer", "numpy.hstack", "numpy.bincount", "numpy.bincount", "sklearn.metrics.f1_score", "tensorflow.compat.v1.nn.softmax_cross_entropy_with_logits_v2", "numpy.array", "numpy.array", "sklearn.metrics.f1_score", "str", "str"], "function", ["home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.initialize_uninitialized", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.add_fc", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.get_batch", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.get_batch", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.get_batch", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.run", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.get_batch", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.get_batch", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.run"], ["", "", "", "", "def", "restore_train", "(", "train_X_rad", ",", "train_X_opt", ",", "train_y", ",", "valid_X_rad", ",", "valid_X_opt", ",", "valid_y", ",", "output_dir_models", ",", "\n", "split_numb", ",", "level", ",", "n_classes", ",", "classif_units", ",", "batch_size", ",", "n_epochs", ",", "learning_rate", ",", "drop", ")", ":", "\n", "    ", "'''\n    Restore previous learned variables and continue training on next level\n    '''", "\n", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "output_dir_models", ",", "\"model_%s_level-%s\"", "%", "(", "str", "(", "split_numb", ")", ",", "str", "(", "level", "-", "1", ")", ")", ")", "\n", "tf", ".", "compat", ".", "v1", ".", "reset_default_graph", "(", ")", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "Session", "(", ")", "as", "session", ":", "\n", "        ", "model_saver", "=", "tf", ".", "compat", ".", "v1", ".", "train", ".", "import_meta_graph", "(", "ckpt_path", "+", "\".meta\"", ")", "\n", "model_saver", ".", "restore", "(", "session", ",", "ckpt_path", ")", "\n", "\n", "graph", "=", "tf", ".", "compat", ".", "v1", ".", "get_default_graph", "(", ")", "\n", "\n", "X_rad", "=", "graph", ".", "get_tensor_by_name", "(", "\"X_rad:0\"", ")", "\n", "X_opt", "=", "graph", ".", "get_tensor_by_name", "(", "\"X_opt:0\"", ")", "\n", "dropOut", "=", "graph", ".", "get_tensor_by_name", "(", "\"drop_rate:0\"", ")", "\n", "rad_feat", "=", "graph", ".", "get_tensor_by_name", "(", "\"rad_stream/learnt_features:0\"", ")", "\n", "opt_feat", "=", "graph", ".", "get_tensor_by_name", "(", "\"opt_stream/learnt_features:0\"", ")", "\n", "combined_feat", "=", "graph", ".", "get_tensor_by_name", "(", "\"combined_feat/learnt_features:0\"", ")", "\n", "print", "(", "\"Model restored\"", ")", "\n", "\n", "y", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "\"float\"", ",", "[", "None", ",", "n_classes", "]", ",", "name", "=", "\"y_level%s\"", "%", "level", ")", "\n", "\n", "weight", "=", ".5", "\n", "aux_pred", "=", "[", "]", "\n", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "\"pred_level%s\"", "%", "level", ")", ":", "\n", "            ", "aux_pred", ".", "append", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "n_classes", ")", "(", "rad_feat", ")", ")", "\n", "aux_pred", ".", "append", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "n_classes", ")", "(", "opt_feat", ")", ")", "\n", "\n", "logits_full", "=", "add_fc", "(", "combined_feat", ",", "classif_units", ",", "n_classes", ",", "dropOut", ")", "\n", "score_tot", "=", "tf", ".", "nn", ".", "softmax", "(", "logits_full", ")", "\n", "\n", "for", "p", "in", "aux_pred", ":", "\n", "                ", "score_tot", "+=", "weight", "*", "tf", ".", "nn", ".", "softmax", "(", "p", ")", "\n", "", "prediction", "=", "tf", ".", "math", ".", "argmax", "(", "score_tot", ",", "1", ",", "name", "=", "\"prediction\"", ")", "\n", "correct", "=", "tf", ".", "math", ".", "equal", "(", "tf", ".", "math", ".", "argmax", "(", "score_tot", ",", "1", ")", ",", "tf", ".", "math", ".", "argmax", "(", "y", ",", "1", ")", ")", "\n", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "dtypes", ".", "cast", "(", "correct", ",", "tf", ".", "float64", ")", ")", "\n", "\n", "", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "\"cost_level%s\"", "%", "level", ")", ":", "\n", "            ", "cost", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "compat", ".", "v1", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "y", ",", "logits", "=", "logits_full", ")", ")", "\n", "for", "p", "in", "aux_pred", ":", "\n", "                ", "cost", "+=", "weight", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "compat", ".", "v1", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "y", ",", "logits", "=", "p", ")", ")", "\n", "\n", "", "", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "\"optimizer_level%s\"", "%", "level", ")", ":", "\n", "            ", "optimizer", "=", "tf", ".", "compat", ".", "v1", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learning_rate", ")", ".", "minimize", "(", "cost", ")", "\n", "\n", "# Initialize new variables and create new session for training", "\n", "", "initialize_uninitialized", "(", "session", ")", "\n", "\n", "n_batch", "=", "int", "(", "train_X_rad", ".", "shape", "[", "0", "]", "/", "batch_size", ")", "\n", "if", "train_X_rad", ".", "shape", "[", "0", "]", "%", "batch_size", "!=", "0", ":", "\n", "            ", "n_batch", "+=", "1", "\n", "", "print", "(", "\"n_batch: %d\"", "%", "n_batch", ")", "\n", "\n", "saver", "=", "tf", ".", "compat", ".", "v1", ".", "train", ".", "Saver", "(", ")", "\n", "best_acc", "=", "sys", ".", "float_info", ".", "min", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "n_epochs", "+", "1", ")", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "epoch_acc", "=", "0", "\n", "\n", "train_X_rad", ",", "train_X_opt", ",", "train_y", "=", "shuffle", "(", "train_X_rad", ",", "train_X_opt", ",", "train_y", ",", "random_state", "=", "0", ")", "\n", "\n", "for", "batch", "in", "range", "(", "n_batch", ")", ":", "\n", "                ", "batch_X_rad", "=", "get_batch", "(", "train_X_rad", ",", "batch", ",", "batch_size", ")", "\n", "batch_X_opt", "=", "get_batch", "(", "train_X_opt", ",", "batch", ",", "batch_size", ")", "\n", "batch_y", "=", "get_batch", "(", "train_y", ",", "batch", ",", "batch_size", ")", "\n", "\n", "acc", ",", "loss", ",", "_", "=", "session", ".", "run", "(", "[", "accuracy", ",", "cost", ",", "optimizer", "]", ",", "feed_dict", "=", "{", "X_rad", ":", "batch_X_rad", ",", "\n", "X_opt", ":", "batch_X_opt", ",", "\n", "y", ":", "batch_y", ",", "\n", "dropOut", ":", "drop", "}", ")", "\n", "del", "batch_X_rad", ",", "batch_X_opt", ",", "batch_y", "\n", "\n", "epoch_loss", "+=", "loss", "\n", "epoch_acc", "+=", "acc", "\n", "\n", "", "stop", "=", "time", ".", "time", "(", ")", "\n", "elapsed", "=", "stop", "-", "start", "\n", "print", "(", "\"Epoch \"", ",", "epoch", ",", "\" Train loss:\"", ",", "epoch_loss", "/", "n_batch", ",", "\"| Accuracy:\"", ",", "epoch_acc", "/", "n_batch", ",", "\"| Time: \"", ",", "elapsed", ")", "\n", "\n", "# Create a session for each epoch to validate model and save it if accuracy is better", "\n", "valid_batch", "=", "int", "(", "valid_X_rad", ".", "shape", "[", "0", "]", "/", "(", "4", "*", "batch_size", ")", ")", "\n", "if", "valid_X_rad", ".", "shape", "[", "0", "]", "%", "(", "4", "*", "batch_size", ")", "!=", "0", ":", "\n", "                ", "valid_batch", "+=", "1", "\n", "\n", "", "total_pred", "=", "None", "\n", "for", "ibatch", "in", "range", "(", "valid_batch", ")", ":", "\n", "                ", "valid_batch_X_rad", "=", "get_batch", "(", "valid_X_rad", ",", "ibatch", ",", "4", "*", "batch_size", ")", "\n", "valid_batch_X_opt", "=", "get_batch", "(", "valid_X_opt", ",", "ibatch", ",", "4", "*", "batch_size", ")", "\n", "\n", "batch_pred", "=", "session", ".", "run", "(", "prediction", ",", "feed_dict", "=", "{", "X_rad", ":", "valid_batch_X_rad", ",", "\n", "X_opt", ":", "valid_batch_X_opt", ",", "\n", "dropOut", ":", "0.", "}", ")", "\n", "del", "valid_batch_X_rad", ",", "valid_batch_X_opt", "\n", "\n", "if", "total_pred", "is", "None", ":", "\n", "                    ", "total_pred", "=", "batch_pred", "\n", "", "else", ":", "\n", "                    ", "total_pred", "=", "np", ".", "hstack", "(", "(", "total_pred", ",", "batch_pred", ")", ")", "\n", "\n", "", "", "val_acc", "=", "accuracy_score", "(", "valid_y", ",", "total_pred", ")", "\n", "if", "val_acc", ">", "best_acc", ":", "\n", "                ", "print", "(", "np", ".", "bincount", "(", "np", ".", "array", "(", "total_pred", ")", ")", ")", "\n", "print", "(", "np", ".", "bincount", "(", "np", ".", "array", "(", "valid_y", ")", ")", ")", "\n", "\n", "print", "(", "\"PREDICTION\"", ")", "\n", "print", "(", "\"TEST F-Measure: %f\"", "%", "f1_score", "(", "valid_y", ",", "total_pred", ",", "average", "=", "'weighted'", ")", ")", "\n", "print", "(", "f1_score", "(", "valid_y", ",", "total_pred", ",", "average", "=", "None", ")", ")", "\n", "print", "(", "\"TEST Accuracy: %f\"", "%", "val_acc", ")", "\n", "save_path", "=", "saver", ".", "save", "(", "session", ",", "output_dir_models", "+", "\"/model_\"", "+", "str", "(", "split_numb", ")", "+", "\"_level-\"", "+", "str", "(", "level", ")", ")", "\n", "print", "(", "\"Model saved in path: %s\"", "%", "save_path", ")", "\n", "best_acc", "=", "val_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.restore_test": [[379, 431], ["os.path.join", "tensorflow.compat.v1.reset_default_graph", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "tensorflow.compat.v1.Session", "tensorflow.compat.v1.train.import_meta_graph", "tf.compat.v1.train.import_meta_graph.restore", "tensorflow.compat.v1.get_default_graph", "tf.compat.v1.get_default_graph.get_tensor_by_name", "tf.compat.v1.get_default_graph.get_tensor_by_name", "tf.compat.v1.get_default_graph.get_tensor_by_name", "print", "int", "print", "range", "HOb2sRNN.transform_label", "numpy.save", "tf.compat.v1.get_default_graph.get_tensor_by_name", "tf.compat.v1.get_default_graph.get_tensor_by_name", "HOb2sRNN.get_batch", "HOb2sRNN.get_batch", "session.run", "os.path.join", "str", "numpy.hstack", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.transform_label", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.get_batch", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.get_batch", "home.repos.pwc.inspect_result.eudesyawog_HOb2sRNN.None.HOb2sRNN.run"], ["", "", "", "", "def", "restore_test", "(", "test_X_rad", ",", "test_X_opt", ",", "test_label", ",", "model_directory", ",", "split_numb", ",", "level", ",", "batch_size", ")", ":", "\n", "    ", "'''\n    Restore computational graph variables and run model on test set\n    Save results in numpy array\n    '''", "\n", "if", "level", "is", "not", "None", ":", "\n", "        ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "output_dir_models", ",", "\"model_%s_level-%s\"", "%", "(", "str", "(", "split_numb", ")", ",", "str", "(", "level", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "output_dir_models", ",", "\"model_%s\"", "%", "str", "(", "split_numb", ")", ")", "\n", "\n", "", "results_path", "=", "os", ".", "path", ".", "join", "(", "model_directory", ",", "\"results\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "results_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "results_path", ")", "\n", "\n", "", "tf", ".", "compat", ".", "v1", ".", "reset_default_graph", "(", ")", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "Session", "(", ")", "as", "session", ":", "\n", "        ", "model_saver", "=", "tf", ".", "compat", ".", "v1", ".", "train", ".", "import_meta_graph", "(", "ckpt_path", "+", "\".meta\"", ")", "\n", "model_saver", ".", "restore", "(", "session", ",", "ckpt_path", ")", "\n", "\n", "graph", "=", "tf", ".", "compat", ".", "v1", ".", "get_default_graph", "(", ")", "\n", "\n", "X_rad", "=", "graph", ".", "get_tensor_by_name", "(", "\"X_rad:0\"", ")", "\n", "X_opt", "=", "graph", ".", "get_tensor_by_name", "(", "\"X_opt:0\"", ")", "\n", "dropOut", "=", "graph", ".", "get_tensor_by_name", "(", "\"drop_rate:0\"", ")", "\n", "if", "level", "is", "not", "None", ":", "\n", "            ", "prediction", "=", "graph", ".", "get_tensor_by_name", "(", "\"pred_level%s/prediction:0\"", "%", "level", ")", "\n", "", "else", ":", "\n", "            ", "prediction", "=", "graph", ".", "get_tensor_by_name", "(", "\"pred/prediction:0\"", ")", "\n", "\n", "", "print", "(", "\"Model restored\"", ")", "\n", "\n", "n_batch", "=", "int", "(", "test_X_rad", ".", "shape", "[", "0", "]", "/", "(", "4", "*", "batch_size", ")", ")", "\n", "if", "test_X_rad", ".", "shape", "[", "0", "]", "%", "(", "4", "*", "batch_size", ")", "!=", "0", ":", "\n", "            ", "n_batch", "+=", "1", "\n", "", "print", "(", "\"n_batch: %d\"", "%", "n_batch", ")", "\n", "\n", "total_pred", "=", "None", "\n", "\n", "for", "batch", "in", "range", "(", "n_batch", ")", ":", "\n", "            ", "batch_X_rad", "=", "get_batch", "(", "test_X_rad", ",", "batch", ",", "(", "4", "*", "batch_size", ")", ")", "\n", "batch_X_opt", "=", "get_batch", "(", "test_X_opt", ",", "batch", ",", "(", "4", "*", "batch_size", ")", ")", "\n", "\n", "batch_pred", "=", "session", ".", "run", "(", "prediction", ",", "feed_dict", "=", "{", "X_rad", ":", "batch_X_rad", ",", "X_opt", ":", "batch_X_opt", ",", "dropOut", ":", "0.", "}", ")", "\n", "del", "batch_X_rad", ",", "batch_X_opt", "\n", "\n", "if", "total_pred", "is", "None", ":", "\n", "                ", "total_pred", "=", "batch_pred", "\n", "", "else", ":", "\n", "                ", "total_pred", "=", "np", ".", "hstack", "(", "(", "total_pred", ",", "batch_pred", ")", ")", "\n", "\n", "", "", "total_pred", "=", "transform_label", "(", "test_label", ",", "total_pred", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "results_path", ",", "\"results_\"", "+", "str", "(", "split_numb", ")", "+", "\".npy\"", ")", ",", "total_pred", ")", "\n", "\n"]]}