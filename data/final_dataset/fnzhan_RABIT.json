{"home.repos.pwc.inspect_result.fnzhan_RABIT.trainers.pix2pix_trainer.Pix2PixTrainer.__init__": [[20, 52], ["models.pix2pix_model.Pix2PixModel", "len", "models.networks.sync_batchnorm.DataParallelWithCallback", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model.to", "models.networks.generator.EMA", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model_on_one_gpu.net[].named_parameters", "models.networks.generator.EMA", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model_on_one_gpu.net[].named_parameters", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model_on_one_gpu.create_optimizers", "pix2pix_trainer.Pix2PixTrainer.netG_ema.register", "pix2pix_trainer.Pix2PixTrainer.netCorr_ema.register"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.create_optimizers", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.EMA.register", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.EMA.register"], ["def", "__init__", "(", "self", ",", "opt", ",", "resume_epoch", "=", "0", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "pix2pix_model", "=", "Pix2PixModel", "(", "opt", ")", "\n", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "1", ":", "\n", "            ", "self", ".", "pix2pix_model", "=", "DataParallelWithCallback", "(", "self", ".", "pix2pix_model", ",", "\n", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "self", ".", "pix2pix_model_on_one_gpu", "=", "self", ".", "pix2pix_model", ".", "module", "\n", "", "else", ":", "\n", "            ", "self", ".", "pix2pix_model", ".", "to", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "pix2pix_model_on_one_gpu", "=", "self", ".", "pix2pix_model", "\n", "\n", "", "if", "opt", ".", "use_ema", ":", "\n", "            ", "self", ".", "netG_ema", "=", "EMA", "(", "opt", ".", "ema_beta", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "pix2pix_model_on_one_gpu", ".", "net", "[", "'netG'", "]", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "param", ".", "requires_grad", ":", "\n", "                    ", "self", ".", "netG_ema", ".", "register", "(", "name", ",", "param", ".", "data", ")", "\n", "", "", "self", ".", "netCorr_ema", "=", "EMA", "(", "opt", ".", "ema_beta", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "pix2pix_model_on_one_gpu", ".", "net", "[", "'netCorr'", "]", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "param", ".", "requires_grad", ":", "\n", "                    ", "self", ".", "netCorr_ema", ".", "register", "(", "name", ",", "param", ".", "data", ")", "\n", "\n", "", "", "", "self", ".", "generated", "=", "None", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "optimizer_G", ",", "self", ".", "optimizer_D", "=", "self", ".", "pix2pix_model_on_one_gpu", ".", "create_optimizers", "(", "opt", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "# if opt.continue_train and opt.which_epoch == 'latest':", "\n", "#     checkpoint = torch.load(os.path.join(opt.checkpoints_dir, opt.name, 'optimizer.pth'))", "\n", "#     self.optimizer_G.load_state_dict(checkpoint['G'])", "\n", "#     self.optimizer_D.load_state_dict(checkpoint['D'])", "\n", "\n", "", "self", ".", "last_data", ",", "self", ".", "last_netCorr", ",", "self", ".", "last_netG", ",", "self", ".", "last_optimizer_G", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.trainers.pix2pix_trainer.Pix2PixTrainer.run_generator_one_step": [[53, 65], ["pix2pix_trainer.Pix2PixTrainer.optimizer_G.zero_grad", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model", "sum().mean", "sum().mean.backward", "pix2pix_trainer.Pix2PixTrainer.optimizer_G.step", "pix2pix_trainer.Pix2PixTrainer.netG_ema", "pix2pix_trainer.Pix2PixTrainer.netCorr_ema", "sum", "g_losses.values"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.DoubleGrad.backward"], ["", "def", "run_generator_one_step", "(", "self", ",", "data", ",", "alpha", "=", "1", ")", ":", "\n", "        ", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "g_losses", ",", "out", "=", "self", ".", "pix2pix_model", "(", "data", ",", "mode", "=", "'generator'", ",", "alpha", "=", "alpha", ")", "\n", "\n", "g_loss", "=", "sum", "(", "g_losses", ".", "values", "(", ")", ")", ".", "mean", "(", ")", "\n", "g_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "self", ".", "g_losses", "=", "g_losses", "\n", "self", ".", "out", "=", "out", "\n", "if", "self", ".", "opt", ".", "use_ema", ":", "\n", "            ", "self", ".", "netG_ema", "(", "self", ".", "pix2pix_model_on_one_gpu", ".", "net", "[", "'netG'", "]", ")", "\n", "self", ".", "netCorr_ema", "(", "self", ".", "pix2pix_model_on_one_gpu", ".", "net", "[", "'netCorr'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.trainers.pix2pix_trainer.Pix2PixTrainer.run_discriminator_one_step": [[76, 87], ["pix2pix_trainer.Pix2PixTrainer.optimizer_D.zero_grad", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model", "sum().mean", "sum().mean.backward", "pix2pix_trainer.Pix2PixTrainer.optimizer_D.step", "sum", "pix2pix_trainer.Pix2PixTrainer.values"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.DoubleGrad.backward"], ["", "", "def", "run_discriminator_one_step", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "GforD", "=", "{", "}", "\n", "GforD", "[", "'fake_image'", "]", "=", "self", ".", "out", "[", "'fake_image'", "]", "\n", "GforD", "[", "'adaptive_feature_seg'", "]", "=", "self", ".", "out", "[", "'adaptive_feature_seg'", "]", "\n", "GforD", "[", "'adaptive_feature_img'", "]", "=", "self", ".", "out", "[", "'adaptive_feature_img'", "]", "\n", "d_losses", "=", "self", ".", "pix2pix_model", "(", "data", ",", "mode", "=", "'discriminator'", ",", "GforD", "=", "GforD", ")", "\n", "d_loss", "=", "sum", "(", "d_losses", ".", "values", "(", ")", ")", ".", "mean", "(", ")", "\n", "d_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "self", ".", "d_losses", "=", "d_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.trainers.pix2pix_trainer.Pix2PixTrainer.get_latest_losses": [[88, 90], ["None"], "methods", ["None"], ["", "def", "get_latest_losses", "(", "self", ")", ":", "\n", "        ", "return", "{", "**", "self", ".", "g_losses", ",", "**", "self", ".", "d_losses", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.trainers.pix2pix_trainer.Pix2PixTrainer.get_latest_generated": [[91, 93], ["None"], "methods", ["None"], ["", "def", "get_latest_generated", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "out", "[", "'fake_image'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.trainers.pix2pix_trainer.Pix2PixTrainer.update_learning_rate": [[117, 138], ["print"], "methods", ["None"], ["", "", "def", "update_learning_rate", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "self", ".", "opt", ".", "niter", ":", "\n", "            ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "new_lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "", "else", ":", "\n", "            ", "new_lr", "=", "self", ".", "old_lr", "\n", "\n", "", "if", "new_lr", "!=", "self", ".", "old_lr", ":", "\n", "            ", "if", "self", ".", "opt", ".", "no_TTUR", ":", "\n", "                ", "new_lr_G", "=", "new_lr", "\n", "new_lr_D", "=", "new_lr", "\n", "", "else", ":", "\n", "                ", "new_lr_G", "=", "new_lr", "/", "2", "\n", "new_lr_D", "=", "new_lr", "*", "2", "\n", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr_D", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr_G", "\n", "", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "new_lr", ")", ")", "\n", "self", ".", "old_lr", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.trainers.pix2pix_trainer.Pix2PixTrainer.save": [[97, 112], ["pix2pix_trainer.Pix2PixTrainer.pix2pix_model_on_one_gpu.save", "pix2pix_trainer.Pix2PixTrainer.netG_ema.assign", "util.save_network", "pix2pix_trainer.Pix2PixTrainer.netG_ema.resume", "pix2pix_trainer.Pix2PixTrainer.netCorr_ema.assign", "util.save_network", "pix2pix_trainer.Pix2PixTrainer.netCorr_ema.resume", "torch.save", "os.path.join", "pix2pix_trainer.Pix2PixTrainer.optimizer_G.state_dict", "pix2pix_trainer.Pix2PixTrainer.optimizer_D.state_dict"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.EMA.assign", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.save_network", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.EMA.resume", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.EMA.assign", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.save_network", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.EMA.resume", "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "pix2pix_model_on_one_gpu", ".", "save", "(", "epoch", ")", "\n", "if", "self", ".", "opt", ".", "use_ema", ":", "\n", "            ", "self", ".", "netG_ema", ".", "assign", "(", "self", ".", "pix2pix_model_on_one_gpu", ".", "net", "[", "'netG'", "]", ")", "\n", "util", ".", "save_network", "(", "self", ".", "pix2pix_model_on_one_gpu", ".", "net", "[", "'netG'", "]", ",", "'G_ema'", ",", "epoch", ",", "self", ".", "opt", ")", "\n", "self", ".", "netG_ema", ".", "resume", "(", "self", ".", "pix2pix_model_on_one_gpu", ".", "net", "[", "'netG'", "]", ")", "\n", "\n", "self", ".", "netCorr_ema", ".", "assign", "(", "self", ".", "pix2pix_model_on_one_gpu", ".", "net", "[", "'netCorr'", "]", ")", "\n", "util", ".", "save_network", "(", "self", ".", "pix2pix_model_on_one_gpu", ".", "net", "[", "'netCorr'", "]", ",", "'netCorr_ema'", ",", "epoch", ",", "self", ".", "opt", ")", "\n", "self", ".", "netCorr_ema", ".", "resume", "(", "self", ".", "pix2pix_model_on_one_gpu", ".", "net", "[", "'netCorr'", "]", ")", "\n", "", "if", "epoch", "==", "'latest'", ":", "\n", "            ", "torch", ".", "save", "(", "{", "'G'", ":", "self", ".", "optimizer_G", ".", "state_dict", "(", ")", ",", "\n", "'D'", ":", "self", ".", "optimizer_D", ".", "state_dict", "(", ")", ",", "\n", "'lr'", ":", "self", ".", "old_lr", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "'optimizer.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.trainers.pix2pix_trainer.Pix2PixTrainer.update_fixed_params": [[139, 152], ["pix2pix_trainer.Pix2PixTrainer.pix2pix_model_on_one_gpu.net[].parameters", "torch.optim.Adam", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model_on_one_gpu.net[].parameters", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model_on_one_gpu.net[].parameters"], "methods", ["None"], ["", "", "def", "update_fixed_params", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "pix2pix_model_on_one_gpu", ".", "net", "[", "'netCorr'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "G_params", "=", "[", "{", "'params'", ":", "self", ".", "pix2pix_model_on_one_gpu", ".", "net", "[", "'netG'", "]", ".", "parameters", "(", ")", ",", "'lr'", ":", "self", ".", "opt", ".", "lr", "*", "0.5", "}", "]", "\n", "G_params", "+=", "[", "{", "'params'", ":", "self", ".", "pix2pix_model_on_one_gpu", ".", "net", "[", "'netCorr'", "]", ".", "parameters", "(", ")", ",", "'lr'", ":", "self", ".", "opt", ".", "lr", "*", "0.5", "}", "]", "\n", "if", "self", ".", "opt", ".", "no_TTUR", ":", "\n", "            ", "beta1", ",", "beta2", "=", "self", ".", "opt", ".", "beta1", ",", "self", ".", "opt", ".", "beta2", "\n", "G_lr", "=", "self", ".", "opt", ".", "lr", "\n", "", "else", ":", "\n", "            ", "beta1", ",", "beta2", "=", "0", ",", "0.9", "\n", "G_lr", "=", "self", ".", "opt", ".", "lr", "/", "2", "\n", "\n", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "G_params", ",", "lr", "=", "G_lr", ",", "betas", "=", "(", "beta1", ",", "beta2", ")", ",", "eps", "=", "1e-3", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.iter_counter.IterationCounter.__init__": [[13, 31], ["os.path.join", "numpy.loadtxt", "print", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "dataset_size", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "dataset_size", "=", "dataset_size", "\n", "\n", "self", ".", "first_epoch", "=", "1", "\n", "self", ".", "total_epochs", "=", "opt", ".", "niter", "+", "opt", ".", "niter_decay", "\n", "self", ".", "epoch_iter", "=", "0", "# iter number within each epoch", "\n", "self", ".", "iter_record_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "'iter.txt'", ")", "\n", "if", "opt", ".", "isTrain", "and", "opt", ".", "continue_train", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "first_epoch", ",", "self", ".", "epoch_iter", "=", "np", ".", "loadtxt", "(", "\n", "self", ".", "iter_record_path", ",", "delimiter", "=", "','", ",", "dtype", "=", "int", ")", "\n", "print", "(", "'Resuming from epoch %d at iteration %d'", "%", "(", "self", ".", "first_epoch", ",", "self", ".", "epoch_iter", ")", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'Could not load iteration record at %s. Starting from beginning.'", "%", "\n", "self", ".", "iter_record_path", ")", "\n", "\n", "", "", "self", ".", "total_steps_so_far", "=", "(", "self", ".", "first_epoch", "-", "1", ")", "*", "dataset_size", "+", "self", ".", "epoch_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.iter_counter.IterationCounter.training_epochs": [[33, 35], ["range"], "methods", ["None"], ["", "def", "training_epochs", "(", "self", ")", ":", "\n", "        ", "return", "range", "(", "self", ".", "first_epoch", ",", "self", ".", "total_epochs", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.iter_counter.IterationCounter.record_epoch_start": [[36, 41], ["time.time", "time.time"], "methods", ["None"], ["", "def", "record_epoch_start", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "epoch_iter", "=", "0", "\n", "self", ".", "last_iter_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "current_epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.iter_counter.IterationCounter.record_one_iteration": [[42, 51], ["time.time"], "methods", ["None"], ["", "def", "record_one_iteration", "(", "self", ")", ":", "\n", "        ", "current_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# the last remaining batch is dropped (see data/__init__.py),", "\n", "# so we can assume batch size is always opt.batchSize", "\n", "self", ".", "time_per_iter", "=", "(", "current_time", "-", "self", ".", "last_iter_time", ")", "/", "self", ".", "opt", ".", "batchSize", "\n", "self", ".", "last_iter_time", "=", "current_time", "\n", "self", ".", "total_steps_so_far", "+=", "self", ".", "opt", ".", "batchSize", "\n", "self", ".", "epoch_iter", "+=", "self", ".", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.iter_counter.IterationCounter.record_epoch_end": [[52, 61], ["time.time", "print", "numpy.savetxt", "print"], "methods", ["None"], ["", "def", "record_epoch_end", "(", "self", ")", ":", "\n", "        ", "current_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_per_epoch", "=", "current_time", "-", "self", ".", "epoch_start_time", "\n", "print", "(", "'End of epoch %d / %d \\t Time Taken: %d sec'", "%", "\n", "(", "self", ".", "current_epoch", ",", "self", ".", "total_epochs", ",", "self", ".", "time_per_epoch", ")", ")", "\n", "if", "self", ".", "current_epoch", "%", "self", ".", "opt", ".", "save_epoch_freq", "==", "0", ":", "\n", "            ", "np", ".", "savetxt", "(", "self", ".", "iter_record_path", ",", "(", "self", ".", "current_epoch", "+", "1", ",", "0", ")", ",", "\n", "delimiter", "=", "','", ",", "fmt", "=", "'%d'", ")", "\n", "print", "(", "'Saved current iteration count at %s.'", "%", "self", ".", "iter_record_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.iter_counter.IterationCounter.record_current_iter": [[62, 66], ["numpy.savetxt", "print"], "methods", ["None"], ["", "", "def", "record_current_iter", "(", "self", ")", ":", "\n", "        ", "np", ".", "savetxt", "(", "self", ".", "iter_record_path", ",", "(", "self", ".", "current_epoch", ",", "self", ".", "epoch_iter", ")", ",", "\n", "delimiter", "=", "','", ",", "fmt", "=", "'%d'", ")", "\n", "print", "(", "'Saved current iteration count at %s.'", "%", "self", ".", "iter_record_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.iter_counter.IterationCounter.needs_saving": [[67, 69], ["None"], "methods", ["None"], ["", "def", "needs_saving", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "total_steps_so_far", "%", "self", ".", "opt", ".", "save_latest_freq", ")", "<", "self", ".", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.iter_counter.IterationCounter.needs_printing": [[70, 72], ["None"], "methods", ["None"], ["", "def", "needs_printing", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "total_steps_so_far", "%", "self", ".", "opt", ".", "print_freq", ")", "<", "self", ".", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.iter_counter.IterationCounter.needs_displaying": [[73, 75], ["None"], "methods", ["None"], ["", "def", "needs_displaying", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "total_steps_so_far", "%", "self", ".", "opt", ".", "display_freq", ")", "<", "self", ".", "opt", ".", "batchSize", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sinkhorn_solver.SinkhornSolver.__init__": [[11, 16], ["torch.Module.__init__", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "epsilon", ",", "iterations", "=", "100", ",", "ground_metric", "=", "lambda", "x", ":", "torch", ".", "pow", "(", "x", ",", "2", ")", ")", ":", "\n", "        ", "super", "(", "SinkhornSolver", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "ground_metric", "=", "ground_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sinkhorn_solver.SinkhornSolver.forward": [[17, 75], ["x.size", "y.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "a.squeeze.squeeze.squeeze", "b.squeeze.squeeze.squeeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "sinkhorn_solver.SinkhornSolver._compute_cost", "range", "print", "sinkhorn_solver.SinkhornSolver._log_boltzmann_kernel", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x.size", "sinkhorn_solver.SinkhornSolver._log_boltzmann_kernel", "sinkhorn_solver.SinkhornSolver._log_boltzmann_kernel().transpose", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x.dim", "torch.log", "torch.log", "torch.log", "torch.log", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean.item", "torch.mean.item", "sinkhorn_solver.SinkhornSolver._log_boltzmann_kernel", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.sinkhorn_solver.SinkhornSolver._compute_cost", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sinkhorn_solver.SinkhornSolver._log_boltzmann_kernel", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sinkhorn_solver.SinkhornSolver._log_boltzmann_kernel", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sinkhorn_solver.SinkhornSolver._log_boltzmann_kernel"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "num_x", "=", "x", ".", "size", "(", "-", "2", ")", "\n", "num_y", "=", "y", ".", "size", "(", "-", "2", ")", "\n", "\n", "batch_size", "=", "1", "if", "x", ".", "dim", "(", ")", "==", "2", "else", "x", ".", "size", "(", "0", ")", "\n", "\n", "# Marginal densities are empirical measures", "\n", "# a = x.new_ones((batch_size, num_x), requires_grad=False) / num_x", "\n", "# b = y.new_ones((batch_size, num_y), requires_grad=False) / num_y", "\n", "\n", "a", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0.8", ",", "0.2", "]", "]", ")", "\n", "b", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0.2", ",", "0.2", ",", "0.2", ",", "0.2", ",", "0.2", "]", "]", ")", "\n", "\n", "\n", "a", "=", "a", ".", "squeeze", "(", ")", "\n", "b", "=", "b", ".", "squeeze", "(", ")", "\n", "\n", "# Initialise approximation vectors in log domain", "\n", "u", "=", "torch", ".", "zeros_like", "(", "a", ")", "\n", "v", "=", "torch", ".", "zeros_like", "(", "b", ")", "\n", "\n", "# Stopping criterion", "\n", "threshold", "=", "1e-1", "\n", "\n", "# Cost matrix", "\n", "C", "=", "self", ".", "_compute_cost", "(", "x", ",", "y", ")", "\n", "\n", "# Sinkhorn iterations", "\n", "for", "i", "in", "range", "(", "self", ".", "iterations", ")", ":", "\n", "            ", "u0", ",", "v0", "=", "u", ",", "v", "\n", "\n", "# u^{l+1} = a / (K v^l)", "\n", "K", "=", "self", ".", "_log_boltzmann_kernel", "(", "u", ",", "v", ",", "C", ")", "\n", "u_", "=", "torch", ".", "log", "(", "a", "+", "1e-8", ")", "-", "torch", ".", "logsumexp", "(", "K", ",", "dim", "=", "1", ")", "\n", "u", "=", "self", ".", "epsilon", "*", "u_", "+", "u", "\n", "\n", "# v^{l+1} = b / (K^T u^(l+1))", "\n", "K_t", "=", "self", ".", "_log_boltzmann_kernel", "(", "u", ",", "v", ",", "C", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "v_", "=", "torch", ".", "log", "(", "b", "+", "1e-8", ")", "-", "torch", ".", "logsumexp", "(", "K_t", ",", "dim", "=", "1", ")", "\n", "v", "=", "self", ".", "epsilon", "*", "v_", "+", "v", "\n", "\n", "# Size of the change we have performed on u", "\n", "diff", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "u", "-", "u0", ")", ",", "dim", "=", "-", "1", ")", "+", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "v", "-", "v0", ")", ",", "dim", "=", "-", "1", ")", "\n", "mean_diff", "=", "torch", ".", "mean", "(", "diff", ")", "\n", "\n", "if", "mean_diff", ".", "item", "(", ")", "<", "threshold", ":", "\n", "                ", "break", "\n", "\n", "", "", "print", "(", "\"Finished computing transport plan in {} iterations\"", ".", "format", "(", "i", ")", ")", "\n", "\n", "# Transport plan pi = diag(a)*K*diag(b)", "\n", "K", "=", "self", ".", "_log_boltzmann_kernel", "(", "u", ",", "v", ",", "C", ")", "\n", "pi", "=", "torch", ".", "exp", "(", "K", ")", "\n", "\n", "# Sinkhorn distance", "\n", "cost", "=", "torch", ".", "sum", "(", "pi", "*", "C", ",", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "return", "cost", ",", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sinkhorn_solver.SinkhornSolver._compute_cost": [[76, 81], ["x.unsqueeze", "y.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "sinkhorn_solver.SinkhornSolver.ground_metric"], "methods", ["None"], ["", "def", "_compute_cost", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_", "=", "x", ".", "unsqueeze", "(", "-", "2", ")", "\n", "y_", "=", "y", ".", "unsqueeze", "(", "-", "3", ")", "\n", "C", "=", "torch", ".", "sum", "(", "self", ".", "ground_metric", "(", "x_", "-", "y_", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sinkhorn_solver.SinkhornSolver._log_boltzmann_kernel": [[82, 87], ["sinkhorn_solver.SinkhornSolver._compute_cost", "v.unsqueeze", "u.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.sinkhorn_solver.SinkhornSolver._compute_cost"], ["", "def", "_log_boltzmann_kernel", "(", "self", ",", "u", ",", "v", ",", "C", "=", "None", ")", ":", "\n", "        ", "C", "=", "self", ".", "_compute_cost", "(", "x", ",", "y", ")", "if", "C", "is", "None", "else", "C", "\n", "kernel", "=", "-", "C", "+", "u", ".", "unsqueeze", "(", "-", "1", ")", "+", "v", ".", "unsqueeze", "(", "-", "2", ")", "\n", "kernel", "/=", "self", ".", "epsilon", "\n", "return", "kernel", "", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.retrieve_ref_vgg.VGG19_feature_color_torchversion.__init__": [[18, 50], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "pool", "=", "'max'", ",", "vgg_normal_correct", "=", "False", ",", "ic", "=", "3", ")", ":", "\n", "        ", "super", "(", "VGG19_feature_color_torchversion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg_normal_correct", "=", "vgg_normal_correct", "\n", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "ic", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_4", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_4", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_1", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_4", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "pool", "==", "'max'", ":", "\n", "            ", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "elif", "pool", "==", "'avg'", ":", "\n", "            ", "self", ".", "pool1", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool5", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.retrieve_ref_vgg.VGG19_feature_color_torchversion.forward": [[51, 80], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "retrieve_ref_vgg.VGG19_feature_color_torchversion.pool1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "retrieve_ref_vgg.VGG19_feature_color_torchversion.pool2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "retrieve_ref_vgg.VGG19_feature_color_torchversion.pool3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "retrieve_ref_vgg.VGG19_feature_color_torchversion.pool4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "retrieve_ref_vgg.VGG19_feature_color_torchversion.pool5", "retrieve_ref_vgg.vgg_preprocess", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv1_1", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv1_2", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv2_1", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv2_2", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv3_1", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv3_2", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv3_3", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv3_4", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv4_1", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv4_2", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv4_3", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv4_4", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv5_1", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv5_2", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv5_3", "retrieve_ref_vgg.VGG19_feature_color_torchversion.conv5_4"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.vgg_preprocess"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "out_keys", ",", "preprocess", "=", "True", ")", ":", "\n", "        ", "''' \n        NOTE: input tensor should range in [0,1]\n        '''", "\n", "out", "=", "{", "}", "\n", "if", "preprocess", ":", "\n", "            ", "x", "=", "vgg_preprocess", "(", "x", ",", "vgg_normal_correct", "=", "self", ".", "vgg_normal_correct", ")", "\n", "", "out", "[", "'r11'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv1_1", "(", "x", ")", ")", "\n", "out", "[", "'r12'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv1_2", "(", "out", "[", "'r11'", "]", ")", ")", "\n", "out", "[", "'p1'", "]", "=", "self", ".", "pool1", "(", "out", "[", "'r12'", "]", ")", "\n", "out", "[", "'r21'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv2_1", "(", "out", "[", "'p1'", "]", ")", ")", "\n", "out", "[", "'r22'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv2_2", "(", "out", "[", "'r21'", "]", ")", ")", "\n", "out", "[", "'p2'", "]", "=", "self", ".", "pool2", "(", "out", "[", "'r22'", "]", ")", "\n", "out", "[", "'r31'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_1", "(", "out", "[", "'p2'", "]", ")", ")", "\n", "out", "[", "'r32'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_2", "(", "out", "[", "'r31'", "]", ")", ")", "\n", "out", "[", "'r33'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_3", "(", "out", "[", "'r32'", "]", ")", ")", "\n", "out", "[", "'r34'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_4", "(", "out", "[", "'r33'", "]", ")", ")", "\n", "out", "[", "'p3'", "]", "=", "self", ".", "pool3", "(", "out", "[", "'r34'", "]", ")", "\n", "out", "[", "'r41'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_1", "(", "out", "[", "'p3'", "]", ")", ")", "\n", "out", "[", "'r42'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_2", "(", "out", "[", "'r41'", "]", ")", ")", "\n", "out", "[", "'r43'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_3", "(", "out", "[", "'r42'", "]", ")", ")", "\n", "out", "[", "'r44'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_4", "(", "out", "[", "'r43'", "]", ")", ")", "\n", "out", "[", "'p4'", "]", "=", "self", ".", "pool4", "(", "out", "[", "'r44'", "]", ")", "\n", "out", "[", "'r51'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_1", "(", "out", "[", "'p4'", "]", ")", ")", "\n", "out", "[", "'r52'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_2", "(", "out", "[", "'r51'", "]", ")", ")", "\n", "out", "[", "'r53'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_3", "(", "out", "[", "'r52'", "]", ")", ")", "\n", "out", "[", "'r54'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_4", "(", "out", "[", "'r53'", "]", ")", ")", "\n", "out", "[", "'p5'", "]", "=", "self", ".", "pool5", "(", "out", "[", "'r54'", "]", ")", "\n", "return", "[", "out", "[", "key", "]", "for", "key", "in", "out_keys", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.retrieve_ref_vgg.vgg_preprocess": [[81, 91], ["torch.cat", "torch.cat", "torch.cat", "torch.Tensor().type_as().view", "torch.Tensor().type_as().view", "torch.Tensor().type_as().view", "torch.Tensor().type_as", "torch.Tensor().type_as", "torch.Tensor().type_as", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "", "def", "vgg_preprocess", "(", "tensor", ",", "vgg_normal_correct", "=", "False", ")", ":", "\n", "    ", "if", "vgg_normal_correct", ":", "\n", "        ", "tensor", "=", "(", "tensor", "+", "1", ")", "/", "2", "\n", "# input is RGB tensor which ranges in [0,1]", "\n", "# output is BGR tensor which ranges in [0,255]", "\n", "", "tensor_bgr", "=", "torch", ".", "cat", "(", "(", "tensor", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", ",", "tensor", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", ",", "tensor", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "# tensor_bgr = tensor[:, [2, 1, 0], ...]", "\n", "tensor_bgr_ml", "=", "tensor_bgr", "-", "torch", ".", "Tensor", "(", "[", "0.40760392", ",", "0.45795686", ",", "0.48501961", "]", ")", ".", "type_as", "(", "tensor_bgr", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "tensor_rst", "=", "tensor_bgr_ml", "*", "255", "\n", "return", "tensor_rst", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.retrieve_ref_vgg.get_transform": [[92, 105], ["transform_list.append", "torchvision.Compose", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "get_transform", "(", "method", "=", "Image", ".", "BICUBIC", ",", "normalize", "=", "True", ",", "toTensor", "=", "True", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "# if 'resize' in opt.preprocess_mode:", "\n", "osize", "=", "[", "256", ",", "256", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "interpolation", "=", "method", ")", ")", "\n", "\n", "if", "toTensor", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.retrieve_ref_vgg.__resize": [[106, 108], ["img.resize"], "function", ["None"], ["", "def", "__resize", "(", "img", ",", "w", ",", "h", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.retrieve_ref_vgg.__make_power_2": [[110, 117], ["int", "int", "img.resize", "round", "round"], "function", ["None"], ["", "def", "__make_power_2", "(", "img", ",", "base", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "h", "=", "int", "(", "round", "(", "oh", "/", "base", ")", "*", "base", ")", "\n", "w", "=", "int", "(", "round", "(", "ow", "/", "base", ")", "*", "base", ")", "\n", "if", "(", "h", "==", "oh", ")", "and", "(", "w", "==", "ow", ")", ":", "\n", "        ", "return", "img", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.retrieve_ref_vgg.__scale_width": [[119, 126], ["int", "img.resize"], "function", ["None"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "if", "(", "ow", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "h", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.retrieve_ref_vgg.__scale_shortside": [[128, 137], ["int", "img.resize", "min", "max"], "function", ["None"], ["", "def", "__scale_shortside", "(", "img", ",", "target_width", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "ss", ",", "ls", "=", "min", "(", "ow", ",", "oh", ")", ",", "max", "(", "ow", ",", "oh", ")", "# shortside and longside", "\n", "width_is_shorter", "=", "ow", "==", "ss", "\n", "if", "(", "ss", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "ls", "=", "int", "(", "target_width", "*", "ls", "/", "ss", ")", "\n", "nw", ",", "nh", "=", "(", "ss", ",", "ls", ")", "if", "width_is_shorter", "else", "(", "ls", ",", "ss", ")", "\n", "return", "img", ".", "resize", "(", "(", "nw", ",", "nh", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sc_vgg_metric.VGG19_feature_color_torchversion.__init__": [[28, 60], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "pool", "=", "'max'", ",", "vgg_normal_correct", "=", "False", ",", "ic", "=", "3", ")", ":", "\n", "        ", "super", "(", "VGG19_feature_color_torchversion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg_normal_correct", "=", "vgg_normal_correct", "\n", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "ic", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_4", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_4", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_1", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_4", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "pool", "==", "'max'", ":", "\n", "            ", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "elif", "pool", "==", "'avg'", ":", "\n", "            ", "self", ".", "pool1", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool5", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sc_vgg_metric.VGG19_feature_color_torchversion.forward": [[61, 90], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "sc_vgg_metric.VGG19_feature_color_torchversion.pool1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "sc_vgg_metric.VGG19_feature_color_torchversion.pool2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "sc_vgg_metric.VGG19_feature_color_torchversion.pool3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "sc_vgg_metric.VGG19_feature_color_torchversion.pool4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "sc_vgg_metric.VGG19_feature_color_torchversion.pool5", "sc_vgg_metric.vgg_preprocess", "sc_vgg_metric.VGG19_feature_color_torchversion.conv1_1", "sc_vgg_metric.VGG19_feature_color_torchversion.conv1_2", "sc_vgg_metric.VGG19_feature_color_torchversion.conv2_1", "sc_vgg_metric.VGG19_feature_color_torchversion.conv2_2", "sc_vgg_metric.VGG19_feature_color_torchversion.conv3_1", "sc_vgg_metric.VGG19_feature_color_torchversion.conv3_2", "sc_vgg_metric.VGG19_feature_color_torchversion.conv3_3", "sc_vgg_metric.VGG19_feature_color_torchversion.conv3_4", "sc_vgg_metric.VGG19_feature_color_torchversion.conv4_1", "sc_vgg_metric.VGG19_feature_color_torchversion.conv4_2", "sc_vgg_metric.VGG19_feature_color_torchversion.conv4_3", "sc_vgg_metric.VGG19_feature_color_torchversion.conv4_4", "sc_vgg_metric.VGG19_feature_color_torchversion.conv5_1", "sc_vgg_metric.VGG19_feature_color_torchversion.conv5_2", "sc_vgg_metric.VGG19_feature_color_torchversion.conv5_3", "sc_vgg_metric.VGG19_feature_color_torchversion.conv5_4"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.vgg_preprocess"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "out_keys", ",", "preprocess", "=", "True", ")", ":", "\n", "        ", "''' \n        NOTE: input tensor should range in [0,1]\n        '''", "\n", "out", "=", "{", "}", "\n", "if", "preprocess", ":", "\n", "            ", "x", "=", "vgg_preprocess", "(", "x", ",", "vgg_normal_correct", "=", "self", ".", "vgg_normal_correct", ")", "\n", "", "out", "[", "'r11'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv1_1", "(", "x", ")", ")", "\n", "out", "[", "'r12'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv1_2", "(", "out", "[", "'r11'", "]", ")", ")", "\n", "out", "[", "'p1'", "]", "=", "self", ".", "pool1", "(", "out", "[", "'r12'", "]", ")", "\n", "out", "[", "'r21'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv2_1", "(", "out", "[", "'p1'", "]", ")", ")", "\n", "out", "[", "'r22'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv2_2", "(", "out", "[", "'r21'", "]", ")", ")", "\n", "out", "[", "'p2'", "]", "=", "self", ".", "pool2", "(", "out", "[", "'r22'", "]", ")", "\n", "out", "[", "'r31'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_1", "(", "out", "[", "'p2'", "]", ")", ")", "\n", "out", "[", "'r32'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_2", "(", "out", "[", "'r31'", "]", ")", ")", "\n", "out", "[", "'r33'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_3", "(", "out", "[", "'r32'", "]", ")", ")", "\n", "out", "[", "'r34'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_4", "(", "out", "[", "'r33'", "]", ")", ")", "\n", "out", "[", "'p3'", "]", "=", "self", ".", "pool3", "(", "out", "[", "'r34'", "]", ")", "\n", "out", "[", "'r41'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_1", "(", "out", "[", "'p3'", "]", ")", ")", "\n", "out", "[", "'r42'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_2", "(", "out", "[", "'r41'", "]", ")", ")", "\n", "out", "[", "'r43'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_3", "(", "out", "[", "'r42'", "]", ")", ")", "\n", "out", "[", "'r44'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_4", "(", "out", "[", "'r43'", "]", ")", ")", "\n", "out", "[", "'p4'", "]", "=", "self", ".", "pool4", "(", "out", "[", "'r44'", "]", ")", "\n", "out", "[", "'r51'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_1", "(", "out", "[", "'p4'", "]", ")", ")", "\n", "out", "[", "'r52'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_2", "(", "out", "[", "'r51'", "]", ")", ")", "\n", "out", "[", "'r53'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_3", "(", "out", "[", "'r52'", "]", ")", ")", "\n", "out", "[", "'r54'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_4", "(", "out", "[", "'r53'", "]", ")", ")", "\n", "out", "[", "'p5'", "]", "=", "self", ".", "pool5", "(", "out", "[", "'r54'", "]", ")", "\n", "return", "[", "out", "[", "key", "]", "for", "key", "in", "out_keys", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sc_vgg_metric.Dataset_.__init__": [[92, 152], ["range", "torchvision.Compose", "torchvision.ToTensor", "os.listdir", "len", "open", "open.readlines", "open.close", "open", "open.readlines", "open.close", "os.path.exists", "name.replace.replace.replace", "os.path.exists", "name.replace.replace.split", "os.path.exists", "name.replace.replace.split", "os.path.exists", "print", "label_paths.append", "img_paths.append", "gen_img_paths.append", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "it.strip", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "it.strip", "os.listdir", "len", "name.replace.replace.replace", "str().zfill", "aa.zfill", "sc_vgg_metric.Dataset_.tolabel_path", "str"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.sc_vgg_metric.Dataset_.tolabel_path"], ["    ", "def", "__init__", "(", "self", ",", "folder", ",", "dataset_mode", ")", ":", "\n", "        ", "self", ".", "folder", "=", "folder", "\n", "self", ".", "dataset_mode", "=", "dataset_mode", "\n", "if", "dataset_mode", "==", "'ade20k'", ":", "\n", "            ", "self", ".", "label_folder", "=", "'/mnt/blob/Dataset/ADEChallengeData2016/images/validation'", "\n", "self", ".", "img_folder", "=", "'/mnt/blob/Dataset/ADEChallengeData2016/images/validation'", "\n", "imgs_name", "=", "os", ".", "listdir", "(", "self", ".", "img_folder", ")", "\n", "imgs_name", "=", "[", "it", "for", "it", "in", "imgs_name", "if", "it", "[", "-", "4", ":", "]", "==", "'.jpg'", "]", "\n", "if", "'SIMS'", "in", "self", ".", "folder", ":", "\n", "                ", "fd", "=", "open", "(", "'/mnt/blob/Dataset/ADEChallengeData2016/outdoor.txt'", ")", "\n", "outdoor", "=", "fd", ".", "readlines", "(", ")", "\n", "fd", ".", "close", "(", ")", "\n", "outdoor", "=", "[", "it", ".", "strip", "(", ")", "for", "it", "in", "outdoor", "]", "\n", "", "", "elif", "'celebahq'", "in", "dataset_mode", ":", "\n", "            ", "self", ".", "label_folder", "=", "'/mnt/blob/Dataset/CelebAMask-HQ/CelebAMask-HQ-mask-anno/all_parts_except_glasses'", "\n", "self", ".", "img_folder", "=", "'/mnt/blob/Dataset/CelebAMask-HQ/CelebA-HQ-img'", "\n", "fd", "=", "open", "(", "'/mnt/blob/Dataset/CelebAMask-HQ/val.txt'", ")", "\n", "imgs_name", "=", "fd", ".", "readlines", "(", ")", "\n", "fd", ".", "close", "(", ")", "\n", "imgs_name", "=", "[", "it", ".", "strip", "(", ")", "+", "'.jpg'", "for", "it", "in", "imgs_name", "]", "\n", "", "elif", "dataset_mode", "==", "'flickr'", ":", "\n", "            ", "self", ".", "label_folder", "=", "'/mnt/blob/Dataset/Flickr/test/mask'", "\n", "self", ".", "img_folder", "=", "'/mnt/blob/Dataset/Flickr/test/images'", "\n", "", "elif", "dataset_mode", "==", "'deepfashion'", ":", "\n", "            ", "self", ".", "label_folder", "=", "'/mnt/blob/Dataset/DeepFashion/parsing'", "\n", "self", ".", "img_folder", "=", "'/mnt/blob/Dataset/DeepFashion/fid_256'", "\n", "imgs_name", "=", "os", ".", "listdir", "(", "self", ".", "img_folder", ")", "\n", "", "label_paths", "=", "[", "]", "\n", "img_paths", "=", "[", "]", "\n", "gen_img_paths", "=", "[", "]", "\n", "j", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "imgs_name", ")", ")", ":", "\n", "            ", "name", "=", "imgs_name", "[", "i", "]", "\n", "if", "'SIMS'", "in", "self", ".", "folder", ":", "\n", "                ", "if", "j", "<", "len", "(", "outdoor", ")", "and", "name", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", "==", "outdoor", "[", "j", "]", ":", "\n", "                    ", "j", "+=", "1", "\n", "name", "=", "str", "(", "j", ")", ".", "zfill", "(", "4", ")", "+", "'.png'", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder", ",", "name", ")", ")", ":", "\n", "                ", "name", "=", "name", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder", ",", "name", ")", ")", ":", "\n", "                ", "aa", ",", "bb", "=", "name", ".", "split", "(", "'.'", ")", "\n", "name", "=", "aa", ".", "zfill", "(", "5", ")", "+", "'.'", "+", "bb", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder", ",", "name", ")", ")", ":", "\n", "                ", "aa", ",", "bb", "=", "name", ".", "split", "(", "'.'", ")", "\n", "name", "=", "aa", "+", "'_{}.'", "+", "bb", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder", ",", "name", ")", ")", ":", "\n", "                ", "print", "(", "imgs_name", "[", "i", "]", "+", "' not find!'", ")", "\n", "", "else", ":", "\n", "                ", "label_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "label_folder", ",", "self", ".", "tolabel_path", "(", "imgs_name", "[", "i", "]", ")", ")", ")", "\n", "img_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "img_folder", ",", "imgs_name", "[", "i", "]", ")", ")", "\n", "gen_img_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder", ",", "name", ")", ")", "\n", "", "", "self", ".", "label_paths", "=", "label_paths", "\n", "self", ".", "img_paths", "=", "img_paths", "\n", "self", ".", "gen_img_paths", "=", "gen_img_paths", "\n", "\n", "self", ".", "transform_img", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "self", ".", "transform_label", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sc_vgg_metric.Dataset_.tolabel_path": [[153, 158], ["path.replace", "path.split", "name.zfill"], "methods", ["None"], ["", "def", "tolabel_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "'celebahq'", "in", "self", ".", "dataset_mode", ":", "\n", "            ", "name", ",", "ext", "=", "path", ".", "split", "(", "'.'", ")", "\n", "path", "=", "name", ".", "zfill", "(", "5", ")", "+", "'.'", "+", "ext", "\n", "", "return", "path", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sc_vgg_metric.Dataset_.__getitem__": [[159, 167], ["PIL.Image.open().convert().resize", "PIL.Image.open().convert", "sc_vgg_metric.Dataset_.transform_img", "PIL.Image.open().convert", "sc_vgg_metric.Dataset_.transform_img", "sc_vgg_metric.Dataset_.transform_label", "PIL.Image.open().convert", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "label", "=", "Image", ".", "open", "(", "self", ".", "label_paths", "[", "index", "]", ")", ".", "convert", "(", "'L'", ")", ".", "resize", "(", "(", "256", ",", "256", ")", ",", "Image", ".", "NEAREST", ")", "\n", "label", "=", "self", ".", "transform_label", "(", "label", ")", "*", "255", "\n", "img", "=", "Image", ".", "open", "(", "self", ".", "img_paths", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform_img", "(", "img", ")", "\n", "gen_img", "=", "Image", ".", "open", "(", "self", ".", "gen_img_paths", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "gen_img", "=", "self", ".", "transform_img", "(", "gen_img", ")", "\n", "return", "label", ",", "img", ",", "gen_img", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sc_vgg_metric.Dataset_.__len__": [[168, 170], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "label_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sc_vgg_metric.vgg_preprocess": [[11, 21], ["torch.cat", "torch.cat", "torch.cat", "torch.Tensor().type_as().view", "torch.Tensor().type_as().view", "torch.Tensor().type_as().view", "torch.Tensor().type_as", "torch.Tensor().type_as", "torch.Tensor().type_as", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["def", "vgg_preprocess", "(", "tensor", ",", "vgg_normal_correct", "=", "False", ")", ":", "\n", "    ", "if", "vgg_normal_correct", ":", "\n", "        ", "tensor", "=", "(", "tensor", "+", "1", ")", "/", "2", "\n", "# input is RGB tensor which ranges in [0,1]", "\n", "# output is BGR tensor which ranges in [0,255]", "\n", "", "tensor_bgr", "=", "torch", ".", "cat", "(", "(", "tensor", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", ",", "tensor", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", ",", "tensor", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "# tensor_bgr = tensor[:, [2, 1, 0], ...]", "\n", "tensor_bgr_ml", "=", "tensor_bgr", "-", "torch", ".", "Tensor", "(", "[", "0.40760392", ",", "0.45795686", ",", "0.48501961", "]", ")", ".", "type_as", "(", "tensor_bgr", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "tensor_rst", "=", "tensor_bgr_ml", "*", "255", "\n", "return", "tensor_rst", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sc_vgg_metric.cal_feat_dist": [[171, 188], ["torch.unique", "torch.unique", "torch.unique", "range", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "numpy.arccos", "mean_1.unsqueeze().cpu().numpy", "mean_2.unsqueeze().cpu().numpy", "torch.zeros_like.expand", "torch.zeros_like.expand", "mean_1.unsqueeze().cpu", "mean_2.unsqueeze().cpu", "mean_1.unsqueeze", "mean_2.unsqueeze"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.normalize", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.normalize"], ["", "", "def", "cal_feat_dist", "(", "feat_1", ",", "feat_2", ",", "label", ",", "use_cos", ")", ":", "\n", "    ", "label_u", "=", "torch", ".", "unique", "(", "label", ")", "\n", "theta_value", "=", "0", "\n", "for", "k", "in", "range", "(", "len", "(", "label_u", ")", ")", ":", "\n", "        ", "num_1", "=", "(", "label", "==", "label_u", "[", "k", "]", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "mask", "=", "torch", ".", "zeros_like", "(", "label", ")", "\n", "mask", "[", "label", "==", "label_u", "[", "k", "]", "]", "=", "1", "\n", "mean_1", "=", "(", "feat_1", "*", "mask", ".", "expand", "(", "feat_1", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", ")", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "/", "num_1", "\n", "mean_2", "=", "(", "feat_2", "*", "mask", ".", "expand", "(", "feat_2", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", ")", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "/", "num_1", "\n", "cos_value", "=", "(", "normalize", "(", "mean_1", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "*", "normalize", "(", "mean_2", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ".", "sum", "(", ")", "\n", "if", "use_cos", "==", "'cos'", ":", "\n", "            ", "theta_value", "+=", "cos_value", "*", "num_1", "/", "(", "mask", ".", "shape", "[", "-", "1", "]", "*", "mask", ".", "shape", "[", "-", "2", "]", ")", "\n", "", "else", ":", "\n", "            ", "theta", "=", "np", ".", "arccos", "(", "cos_value", ")", "/", "np", ".", "pi", "*", "180", "\n", "theta_value", "+=", "theta", "*", "num_1", "/", "(", "mask", ".", "shape", "[", "-", "1", "]", "*", "mask", ".", "shape", "[", "-", "2", "]", ")", "\n", "#theta_value = np.arccos(theta_value) / np.pi * 180", "\n", "", "", "return", "theta_value", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.topk_ranking.TopK_custom.__init__": [[27, 36], ["super().__init__", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "topk_ranking.TopK_custom.anchors.cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "epsilon", "=", "0.1", ",", "max_iter", "=", "50", ")", ":", "\n", "        ", "super", "(", "TopK_custom", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "anchors", "=", "torch", ".", "FloatTensor", "(", "[", "0", ",", "1", "]", ")", ".", "view", "(", "[", "1", ",", "1", ",", "2", "]", ")", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "anchors", "=", "self", ".", "anchors", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.topk_ranking.TopK_custom.forward": [[37, 63], ["print", "scores.masked_fill.masked_fill.size", "scores.masked_fill.masked_fill.view", "scores.masked_fill.masked_fill.clone().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "float", "torch.min().detach", "torch.min().detach", "torch.min().detach", "torch.min().detach", "scores.masked_fill.masked_fill.masked_fill", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "nu.cuda.cuda.repeat", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "topk_ranking.sinkhorn_forward", "float", "C.max().detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mu.cuda.cuda.cuda", "nu.cuda.cuda.cuda", "scores.masked_fill.masked_fill.clone", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "float", "C.max"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.differentiable_topk.sinkhorn_forward"], ["", "", "def", "forward", "(", "self", ",", "scores", ")", ":", "\n", "        ", "print", "(", "scores", ".", "shape", ")", "\n", "bs", ",", "n", "=", "scores", ".", "size", "(", ")", "\n", "scores", "=", "scores", ".", "view", "(", "[", "bs", ",", "n", ",", "1", "]", ")", "\n", "\n", "scores_", "=", "scores", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "max_scores", "=", "torch", ".", "max", "(", "scores_", ")", ".", "detach", "(", ")", "\n", "scores_", "[", "scores_", "==", "float", "(", "'-inf'", ")", "]", "=", "float", "(", "'inf'", ")", "\n", "min_scores", "=", "torch", ".", "min", "(", "scores_", ")", ".", "detach", "(", ")", "\n", "filled_value", "=", "min_scores", "-", "(", "max_scores", "-", "min_scores", ")", "\n", "mask", "=", "scores", "==", "float", "(", "'-inf'", ")", "\n", "scores", "=", "scores", ".", "masked_fill", "(", "mask", ",", "filled_value", ")", "\n", "\n", "C", "=", "(", "scores", "-", "self", ".", "anchors", ")", "**", "2", "\n", "C", "=", "C", "/", "(", "C", ".", "max", "(", ")", ".", "detach", "(", ")", ")", "\n", "mu", "=", "torch", ".", "ones", "(", "[", "bs", ",", "n", ",", "1", "]", ",", "requires_grad", "=", "False", ")", "/", "n", "\n", "nu", "=", "torch", ".", "FloatTensor", "(", "[", "self", ".", "k", "/", "n", ",", "(", "n", "-", "self", ".", "k", ")", "/", "n", "]", ")", ".", "view", "(", "[", "1", ",", "1", ",", "2", "]", ")", "\n", "nu", "=", "nu", ".", "repeat", "(", "bs", ",", "1", ",", "1", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "mu", "=", "mu", ".", "cuda", "(", ")", "\n", "nu", "=", "nu", ".", "cuda", "(", ")", "\n", "\n", "", "Gamma", "=", "sinkhorn_forward", "(", "C", ",", "mu", ",", "nu", ",", "self", ".", "epsilon", ",", "self", ".", "max_iter", ")", "\n", "A", "=", "Gamma", "[", ":", ",", ":", ",", "0", "]", "*", "n", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.topk_ranking.sinkhorn_forward": [[6, 24], ["C.size", "torch.exp", "torch.exp", "torch.cuda.is_available", "torch.cuda.is_available", "range", "torch.ones", "torch.ones", "v.cuda.cuda"], "function", ["None"], ["def", "sinkhorn_forward", "(", "C", ",", "mu", ",", "nu", ",", "epsilon", ",", "max_iter", ")", ":", "\n", "    ", "\"\"\"standard forward of sinkhorn.\"\"\"", "\n", "\n", "bs", ",", "_", ",", "k_", "=", "C", ".", "size", "(", ")", "\n", "\n", "v", "=", "torch", ".", "ones", "(", "[", "bs", ",", "1", ",", "k_", "]", ")", "/", "(", "k_", ")", "\n", "G", "=", "torch", ".", "exp", "(", "-", "C", "/", "epsilon", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "v", "=", "v", ".", "cuda", "(", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "max_iter", ")", ":", "\n", "        ", "u", "=", "mu", "/", "(", "G", "*", "v", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "v", "=", "nu", "/", "(", "G", "*", "u", ")", ".", "sum", "(", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "# print(G.shape)", "\n", "", "Gamma", "=", "u", "*", "G", "*", "v", "\n", "# print(Gamma.shape)", "\n", "return", "Gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.mask_to_edge.get_edges": [[14, 20], ["None"], "function", ["None"], ["def", "get_edges", "(", "edge", ",", "t", ")", ":", "\n", "    ", "edge", "[", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", "1", ":", ",", ":", "]", "=", "edge", "[", "1", ":", ",", ":", "]", "|", "(", "t", "[", "1", ":", ",", ":", "]", "!=", "t", "[", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", "1", ":", ",", ":", "]", "!=", "t", "[", ":", "-", "1", ",", ":", "]", ")", "\n", "return", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sinkhorn.sinkhorn": [[6, 34], ["torch.FloatTensor().view", "float", "range", "torch.exp", "torch.ones", "torch.exp.new_ones", "u.view", "torch.FloatTensor", "torch.bmm().view", "torch.bmm().view", "v.view", "torch.bmm", "torch.bmm", "v.view", "u.view"], "function", ["None"], ["def", "sinkhorn", "(", "dot", ",", "mask", "=", "None", ",", "eps", "=", "1e-100", ",", "return_kernel", "=", "False", ",", "max_iter", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    dot: n x in_size x out_size\n    mask: n x in_size\n    output: n x in_size x out_size\n    \"\"\"", "\n", "n", ",", "in_size", ",", "out_size", "=", "dot", ".", "shape", "\n", "if", "return_kernel", ":", "\n", "        ", "K", "=", "torch", ".", "exp", "(", "dot", "/", "eps", ")", "\n", "", "else", ":", "\n", "        ", "K", "=", "dot", "\n", "\n", "", "mu", "=", "torch", ".", "ones", "(", "[", "n", ",", "out_size", "]", ",", "requires_grad", "=", "False", ")", "/", "out_size", "\n", "nu", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0.6", "]", ",", "[", "0.4", "]", "]", ")", ".", "view", "(", "[", "1", ",", "2", "]", ")", "\n", "\n", "v", "=", "K", ".", "new_ones", "(", "(", "n", ",", "out_size", ")", ")", "/", "5", "\n", "# print('********') input: 2, output: 5", "\n", "a", "=", "float", "(", "out_size", "/", "in_size", ")", "\n", "for", "_", "in", "range", "(", "max_iter", ")", ":", "\n", "        ", "u", "=", "a", "*", "nu", "/", "torch", ".", "bmm", "(", "K", ",", "v", ".", "view", "(", "n", ",", "out_size", ",", "1", ")", ")", ".", "view", "(", "n", ",", "in_size", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "u", "=", "u", "*", "mask", "\n", "", "v", "=", "mu", "/", "torch", ".", "bmm", "(", "u", ".", "view", "(", "n", ",", "1", ",", "in_size", ")", ",", "K", ")", ".", "view", "(", "n", ",", "out_size", ")", "\n", "", "K", "=", "u", ".", "view", "(", "n", ",", "in_size", ",", "1", ")", "*", "(", "K", "*", "v", ".", "view", "(", "n", ",", "1", ",", "out_size", ")", ")", "\n", "if", "return_kernel", ":", "\n", "        ", "K", "=", "K", "/", "out_size", "\n", "return", "(", "K", "*", "dot", ")", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "\n", "", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sinkhorn.log_sinkhorn": [[35, 65], ["torch.exp.new_zeros", "torch.exp.new_zeros", "torch.ones_like().fill_", "torch.log", "range", "torch.exp", "torch.exp", "torch.logsumexp", "torch.ones_like", "mask.float().sum", "u.masked_fill.masked_fill", "K.new_zeros.view", "sinkhorn.log_sinkhorn.min_eps"], "function", ["None"], ["", "def", "log_sinkhorn", "(", "K", ",", "mask", "=", "None", ",", "eps", "=", "1.0", ",", "return_kernel", "=", "False", ",", "max_iter", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    dot: n x in_size x out_size\n    mask: n x in_size\n    output: n x in_size x out_size\n    \"\"\"", "\n", "batch_size", ",", "in_size", ",", "out_size", "=", "K", ".", "shape", "\n", "def", "min_eps", "(", "u", ",", "v", ",", "dim", ")", ":", "\n", "        ", "Z", "=", "(", "K", "+", "u", ".", "view", "(", "batch_size", ",", "in_size", ",", "1", ")", "+", "v", ".", "view", "(", "batch_size", ",", "1", ",", "out_size", ")", ")", "/", "eps", "\n", "return", "-", "torch", ".", "logsumexp", "(", "Z", ",", "dim", "=", "dim", ")", "\n", "# K: batch_size x in_size x out_size", "\n", "", "u", "=", "K", ".", "new_zeros", "(", "(", "batch_size", ",", "in_size", ")", ")", "\n", "v", "=", "K", ".", "new_zeros", "(", "(", "batch_size", ",", "out_size", ")", ")", "\n", "a", "=", "torch", ".", "ones_like", "(", "u", ")", ".", "fill_", "(", "out_size", "/", "in_size", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "a", "=", "out_size", "/", "mask", ".", "float", "(", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "", "a", "=", "torch", ".", "log", "(", "a", ")", "\n", "for", "_", "in", "range", "(", "max_iter", ")", ":", "\n", "        ", "u", "=", "eps", "*", "(", "a", "+", "min_eps", "(", "u", ",", "v", ",", "dim", "=", "-", "1", ")", ")", "+", "u", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "u", "=", "u", ".", "masked_fill", "(", "~", "mask", ",", "-", "1e8", ")", "\n", "", "v", "=", "eps", "*", "min_eps", "(", "u", ",", "v", ",", "dim", "=", "1", ")", "+", "v", "\n", "", "if", "return_kernel", ":", "\n", "        ", "output", "=", "torch", ".", "exp", "(", "\n", "(", "K", "+", "u", ".", "view", "(", "batch_size", ",", "in_size", ",", "1", ")", "+", "v", ".", "view", "(", "batch_size", ",", "1", ",", "out_size", ")", ")", "/", "eps", ")", "\n", "output", "=", "output", "/", "out_size", "\n", "return", "(", "output", "*", "K", ")", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "\n", "", "K", "=", "torch", ".", "exp", "(", "\n", "(", "K", "+", "u", ".", "view", "(", "batch_size", ",", "in_size", ",", "1", ")", "+", "v", ".", "view", "(", "batch_size", ",", "1", ",", "out_size", ")", ")", "/", "eps", ")", "\n", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sinkhorn.multihead_attn": [[66, 101], ["torch.einsum", "torch.exp.reshape", "torch.exp.permute().contiguous", "mask.repeat_interleave.repeat_interleave", "sinkhorn.log_sinkhorn", "sinkhorn.sinkhorn", "torch.exp.reshape", "torch.exp", "torch.exp.permute"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.sinkhorn.log_sinkhorn", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.sinkhorn.sinkhorn"], ["", "def", "multihead_attn", "(", "input", ",", "weight", ",", "mask", "=", "None", ",", "eps", "=", "1.0", ",", "return_kernel", "=", "False", ",", "\n", "max_iter", "=", "100", ",", "log_domain", "=", "False", ",", "position_filter", "=", "None", ")", ":", "\n", "    ", "\"\"\"Comput the attention weight using Sinkhorn OT\n    input: n x in_size x in_dim\n    mask: n x in_size\n    weight: m x out_size x in_dim (m: number of heads/ref)\n    output: n x out_size x m x in_size\n    \"\"\"", "\n", "n", ",", "in_size", ",", "in_dim", "=", "input", ".", "shape", "\n", "m", ",", "out_size", "=", "weight", ".", "shape", "[", ":", "-", "1", "]", "\n", "# K = torch.tensordot(input, weight, dims=[[-1], [-1]])", "\n", "K", "=", "torch", ".", "einsum", "(", "'bid,bod->bio'", ",", "input", ",", "weight", ")", "\n", "\n", "# K = K.permute(0, 2, 1, 3)", "\n", "# if position_filter is not None:", "\n", "#     K = position_filter * K", "\n", "# K: n x m x in_size x out_size", "\n", "K", "=", "K", ".", "reshape", "(", "-", "1", ",", "in_size", ",", "out_size", ")", "\n", "# K: nm x in_size x out_size", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", ".", "repeat_interleave", "(", "m", ",", "dim", "=", "0", ")", "\n", "", "if", "log_domain", ":", "\n", "        ", "K", "=", "log_sinkhorn", "(", "K", ",", "mask", ",", "eps", ",", "return_kernel", "=", "return_kernel", ",", "max_iter", "=", "max_iter", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "return_kernel", ":", "\n", "            ", "K", "=", "torch", ".", "exp", "(", "K", "/", "eps", ")", "\n", "", "K", "=", "sinkhorn", "(", "K", ",", "mask", ",", "eps", ",", "return_kernel", "=", "return_kernel", ",", "max_iter", "=", "max_iter", ")", "\n", "# K: nm x in_size x out_size", "\n", "", "if", "return_kernel", ":", "\n", "        ", "return", "K", ".", "reshape", "(", "n", ",", "m", ")", "\n", "# K = K.reshape(n, m, in_size, out_size)", "\n", "# if position_filter is not None:", "\n", "#     K = position_filter * K", "\n", "", "K", "=", "K", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.differentiable_topk.TopKFunc1.forward": [[114, 132], ["print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "differentiable_topk.sinkhorn_forward"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.differentiable_topk.sinkhorn_forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "C", ",", "mu", ",", "nu", ",", "epsilon", ",", "max_iter", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "Gamma", "=", "sinkhorn_forward", "(", "C", ",", "mu", ",", "nu", ",", "epsilon", ",", "max_iter", ")", "\n", "# if epsilon>1e-2:", "\n", "#     Gamma = sinkhorn_forward(C, mu, nu, epsilon, max_iter)", "\n", "#     if bool(torch.any(Gamma!=Gamma)):", "\n", "#         print('Nan appeared in Gamma, re-computing...')", "\n", "#         Gamma = sinkhorn_forward_stablized(C, mu, nu, epsilon, max_iter)", "\n", "# else:", "\n", "#     Gamma = sinkhorn_forward_stablized(C, mu, nu, epsilon, max_iter)", "\n", "# ctx.save_for_backward(mu, nu, Gamma)", "\n", "# ctx.epsilon = epsilon", "\n", "\n", "", "print", "(", "'forward'", ")", "\n", "\n", "return", "Gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.differentiable_topk.TopKFunc1.backward": [[133, 145], ["print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "differentiable_topk.sinkhorn_backward"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.differentiable_topk.sinkhorn_backward"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output_Gamma", ")", ":", "\n", "\n", "        ", "epsilon", "=", "ctx", ".", "epsilon", "\n", "mu", ",", "nu", ",", "Gamma", "=", "ctx", ".", "saved_tensors", "\n", "# mu [1, n, 1]", "\n", "# nu [1, 1, k+1]", "\n", "#Gamma [bs, n, k+1]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "grad_C", "=", "sinkhorn_backward", "(", "grad_output_Gamma", ",", "Gamma", ",", "mu", ",", "nu", ",", "epsilon", ")", "\n", "", "print", "(", "'backward'", ")", "\n", "return", "grad_C", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.differentiable_topk.TopK_custom.__init__": [[148, 157], ["super().__init__", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "differentiable_topk.TopK_custom.anchors.cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "epsilon", "=", "0.1", ",", "max_iter", "=", "200", ")", ":", "\n", "        ", "super", "(", "TopK_custom", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "anchors", "=", "torch", ".", "FloatTensor", "(", "[", "0", ",", "1", "]", ")", ".", "view", "(", "[", "1", ",", "1", ",", "2", "]", ")", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "anchors", "=", "self", ".", "anchors", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.differentiable_topk.TopK_custom.forward": [[158, 186], ["scores.masked_fill.masked_fill.size", "scores.masked_fill.masked_fill.view", "scores.masked_fill.masked_fill.clone().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "float", "torch.min().detach", "torch.min().detach", "torch.min().detach", "torch.min().detach", "scores.masked_fill.masked_fill.masked_fill", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "TopKFunc1.apply", "float", "C.max().detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mu.cuda.cuda.cuda", "nu.cuda.cuda.cuda", "scores.masked_fill.masked_fill.clone", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "float", "C.max"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.EqualLR.apply"], ["", "", "def", "forward", "(", "self", ",", "scores", ")", ":", "\n", "        ", "bs", ",", "n", "=", "scores", ".", "size", "(", ")", "\n", "scores", "=", "scores", ".", "view", "(", "[", "bs", ",", "n", ",", "1", "]", ")", "\n", "\n", "#find the -inf value and replace it with the minimum value except -inf", "\n", "scores_", "=", "scores", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "max_scores", "=", "torch", ".", "max", "(", "scores_", ")", ".", "detach", "(", ")", "\n", "scores_", "[", "scores_", "==", "float", "(", "'-inf'", ")", "]", "=", "float", "(", "'inf'", ")", "\n", "min_scores", "=", "torch", ".", "min", "(", "scores_", ")", ".", "detach", "(", ")", "\n", "filled_value", "=", "min_scores", "-", "(", "max_scores", "-", "min_scores", ")", "\n", "mask", "=", "scores", "==", "float", "(", "'-inf'", ")", "\n", "scores", "=", "scores", ".", "masked_fill", "(", "mask", ",", "filled_value", ")", "\n", "\n", "C", "=", "(", "scores", "-", "self", ".", "anchors", ")", "**", "2", "\n", "C", "=", "C", "/", "(", "C", ".", "max", "(", ")", ".", "detach", "(", ")", ")", "\n", "#print(C)", "\n", "mu", "=", "torch", ".", "ones", "(", "[", "1", ",", "n", ",", "1", "]", ",", "requires_grad", "=", "False", ")", "/", "n", "\n", "nu", "=", "torch", ".", "FloatTensor", "(", "[", "self", ".", "k", "/", "n", ",", "(", "n", "-", "self", ".", "k", ")", "/", "n", "]", ")", ".", "view", "(", "[", "1", ",", "1", ",", "2", "]", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "mu", "=", "mu", ".", "cuda", "(", ")", "\n", "nu", "=", "nu", ".", "cuda", "(", ")", "\n", "\n", "", "Gamma", "=", "TopKFunc1", ".", "apply", "(", "C", ",", "mu", ",", "nu", ",", "self", ".", "epsilon", ",", "self", ".", "max_iter", ")", "\n", "#print(Gamma)", "\n", "A", "=", "Gamma", "[", ":", ",", ":", ",", "0", "]", "*", "n", "\n", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.differentiable_topk.TopK_stablized.__init__": [[191, 200], ["super().__init__", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "differentiable_topk.TopK_stablized.anchors.cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "epsilon", "=", "0.1", ",", "max_iter", "=", "200", ")", ":", "\n", "        ", "super", "(", "TopK_stablized", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "anchors", "=", "torch", ".", "FloatTensor", "(", "[", "0", ",", "1", "]", ")", ".", "view", "(", "[", "1", ",", "2", ",", "1", "]", ")", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "anchors", "=", "self", ".", "anchors", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.differentiable_topk.TopK_stablized.forward": [[201, 242], ["scores.masked_fill.masked_fill.view", "scores.masked_fill.masked_fill.clone().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "float", "torch.min().detach", "torch.min().detach", "torch.min().detach", "torch.min().detach", "scores.masked_fill.masked_fill.masked_fill", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "range", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "scores.masked_fill.masked_fill.size", "float", "C.max().detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "f.cuda.cuda.cuda", "g.cuda.cuda.cuda", "mu.cuda.cuda.cuda", "nu.cuda.cuda.cuda", "scores.masked_fill.masked_fill.clone", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "float", "C.max", "differentiable_topk.TopK_stablized.forward.min_epsilon_col"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "scores", ")", ":", "\n", "        ", "bs", ",", "n", "=", "scores", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "scores", "=", "scores", ".", "view", "(", "[", "bs", ",", "1", ",", "n", "]", ")", "\n", "\n", "#find the -inf value and replace it with the minimum value except -inf", "\n", "scores_", "=", "scores", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "max_scores", "=", "torch", ".", "max", "(", "scores_", ")", ".", "detach", "(", ")", "\n", "scores_", "[", "scores_", "==", "float", "(", "'-inf'", ")", "]", "=", "float", "(", "'inf'", ")", "\n", "min_scores", "=", "torch", ".", "min", "(", "scores_", ")", ".", "detach", "(", ")", "\n", "filled_value", "=", "min_scores", "-", "(", "max_scores", "-", "min_scores", ")", "\n", "mask", "=", "scores", "==", "float", "(", "'-inf'", ")", "\n", "scores", "=", "scores", ".", "masked_fill", "(", "mask", ",", "filled_value", ")", "\n", "\n", "C", "=", "(", "scores", "-", "self", ".", "anchors", ")", "**", "2", "\n", "C", "=", "C", "/", "(", "C", ".", "max", "(", ")", ".", "detach", "(", ")", ")", "\n", "f", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "1", ",", "n", "]", ")", "\n", "g", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "2", ",", "1", "]", ")", "\n", "mu", "=", "torch", ".", "ones", "(", "[", "1", ",", "1", ",", "n", "]", ",", "requires_grad", "=", "False", ")", "/", "n", "\n", "nu", "=", "torch", ".", "FloatTensor", "(", "[", "self", ".", "k", "/", "n", ",", "(", "n", "-", "self", ".", "k", ")", "/", "n", "]", ")", ".", "view", "(", "[", "1", ",", "2", ",", "1", "]", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "f", "=", "f", ".", "cuda", "(", ")", "\n", "g", "=", "g", ".", "cuda", "(", ")", "\n", "mu", "=", "mu", ".", "cuda", "(", ")", "\n", "nu", "=", "nu", ".", "cuda", "(", ")", "\n", "\n", "", "def", "min_epsilon_row", "(", "Z", ",", "epsilon", ")", ":", "\n", "            ", "return", "-", "epsilon", "*", "torch", ".", "logsumexp", "(", "(", "-", "Z", ")", "/", "epsilon", ",", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "\n", "", "def", "min_epsilon_col", "(", "Z", ",", "epsilon", ")", ":", "\n", "            ", "return", "-", "epsilon", "*", "torch", ".", "logsumexp", "(", "(", "-", "Z", ")", "/", "epsilon", ",", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "max_iter", ")", ":", "\n", "            ", "f", "=", "min_epsilon_col", "(", "C", "-", "f", "-", "g", ",", "self", ".", "epsilon", ")", "+", "f", "+", "self", ".", "epsilon", "*", "torch", ".", "log", "(", "mu", ")", "\n", "g", "=", "min_epsilon_row", "(", "C", "-", "f", "-", "g", ",", "self", ".", "epsilon", ")", "+", "g", "+", "self", ".", "epsilon", "*", "torch", ".", "log", "(", "nu", ")", "\n", "\n", "", "P", "=", "torch", ".", "exp", "(", "(", "-", "C", "+", "f", "+", "g", ")", "/", "self", ".", "epsilon", ")", "\n", "A", "=", "P", "[", ":", ",", "0", ",", ":", "]", "*", "n", "\n", "return", "A", "", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.differentiable_topk.sinkhorn_forward": [[31, 47], ["C.size", "torch.exp", "torch.exp", "torch.cuda.is_available", "torch.cuda.is_available", "range", "torch.ones", "torch.ones", "v.cuda.cuda"], "function", ["None"], ["def", "sinkhorn_forward", "(", "C", ",", "mu", ",", "nu", ",", "epsilon", ",", "max_iter", ")", ":", "\n", "    ", "\"\"\"standard forward of sinkhorn.\"\"\"", "\n", "\n", "bs", ",", "_", ",", "k_", "=", "C", ".", "size", "(", ")", "\n", "\n", "v", "=", "torch", ".", "ones", "(", "[", "bs", ",", "1", ",", "k_", "]", ")", "/", "(", "k_", ")", "\n", "G", "=", "torch", ".", "exp", "(", "-", "C", "/", "epsilon", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "v", "=", "v", ".", "cuda", "(", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "max_iter", ")", ":", "\n", "        ", "u", "=", "mu", "/", "(", "G", "*", "v", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "v", "=", "nu", "/", "(", "G", "*", "u", ")", ".", "sum", "(", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "Gamma", "=", "u", "*", "G", "*", "v", "\n", "return", "Gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.differentiable_topk.sinkhorn_forward_stablized": [[49, 74], ["C.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cuda.is_available", "torch.cuda.is_available", "range", "torch.exp", "torch.exp", "f.cuda.cuda", "g.cuda.cuda", "torch.log", "torch.log", "torch.log", "torch.log", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "differentiable_topk.sinkhorn_forward_stablized.min_epsilon_row"], "function", ["None"], ["", "def", "sinkhorn_forward_stablized", "(", "C", ",", "mu", ",", "nu", ",", "epsilon", ",", "max_iter", ")", ":", "\n", "    ", "\"\"\"sinkhorn forward in log space.\"\"\"", "\n", "\n", "bs", ",", "n", ",", "k_", "=", "C", ".", "size", "(", ")", "\n", "k", "=", "k_", "-", "1", "\n", "\n", "f", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "n", ",", "1", "]", ")", "\n", "g", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "1", ",", "k", "+", "1", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "f", "=", "f", ".", "cuda", "(", ")", "\n", "g", "=", "g", ".", "cuda", "(", ")", "\n", "", "epsilon_log_mu", "=", "epsilon", "*", "torch", ".", "log", "(", "mu", ")", "\n", "epsilon_log_nu", "=", "epsilon", "*", "torch", ".", "log", "(", "nu", ")", "\n", "def", "min_epsilon_row", "(", "Z", ",", "epsilon", ")", ":", "\n", "        ", "return", "-", "epsilon", "*", "torch", ".", "logsumexp", "(", "(", "-", "Z", ")", "/", "epsilon", ",", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "def", "min_epsilon_col", "(", "Z", ",", "epsilon", ")", ":", "\n", "        ", "return", "-", "epsilon", "*", "torch", ".", "logsumexp", "(", "(", "-", "Z", ")", "/", "epsilon", ",", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "max_iter", ")", ":", "\n", "        ", "f", "=", "min_epsilon_row", "(", "C", "-", "g", ",", "epsilon", ")", "+", "epsilon_log_mu", "\n", "g", "=", "min_epsilon_col", "(", "C", "-", "f", ",", "epsilon", ")", "+", "epsilon_log_nu", "\n", "\n", "", "Gamma", "=", "torch", ".", "exp", "(", "(", "-", "C", "+", "f", "+", "g", ")", "/", "epsilon", ")", "\n", "return", "Gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.differentiable_topk.sinkhorn_backward": [[76, 111], ["Gamma.size", "torch.inverse", "torch.inverse", "Gamma_mu.matmul", "G1.sum", "G1.sum.unsqueeze().matmul", "G1.sum().unsqueeze", "mu.view", "torch.diag_embed", "torch.diag_embed", "torch.matmul", "torch.matmul", "inv_mu.unsqueeze", "g1.unsqueeze().matmul.matmul().transpose", "torch.pad", "nu_.squeeze", "G1.sum.unsqueeze", "torch.pad", "G1.sum", "Gamma_mu.matmul.matmul", "torch.inverse.matmul().transpose", "Gamma_.transpose", "inv_mu.unsqueeze", "g1.unsqueeze().matmul.matmul", "Gamma_mu.transpose", "torch.inverse.matmul"], "function", ["None"], ["", "def", "sinkhorn_backward", "(", "grad_output_Gamma", ",", "Gamma", ",", "mu", ",", "nu", ",", "epsilon", ")", ":", "\n", "    ", "nu_", "=", "nu", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "Gamma_", "=", "Gamma", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "\n", "bs", ",", "n", ",", "k_", "=", "Gamma", ".", "size", "(", ")", "\n", "\n", "inv_mu", "=", "1.", "/", "(", "mu", ".", "view", "(", "[", "1", ",", "-", "1", "]", ")", ")", "#[1, n]", "\n", "Kappa", "=", "torch", ".", "diag_embed", "(", "nu_", ".", "squeeze", "(", "-", "2", ")", ")", "-", "torch", ".", "matmul", "(", "Gamma_", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "*", "inv_mu", ".", "unsqueeze", "(", "-", "2", ")", ",", "Gamma_", ")", "#[bs, k, k]", "\n", "\n", "inv_Kappa", "=", "torch", ".", "inverse", "(", "Kappa", ")", "#[bs, k, k]", "\n", "\n", "Gamma_mu", "=", "inv_mu", ".", "unsqueeze", "(", "-", "1", ")", "*", "Gamma_", "\n", "L", "=", "Gamma_mu", ".", "matmul", "(", "inv_Kappa", ")", "#[bs, n, k]", "\n", "G1", "=", "grad_output_Gamma", "*", "Gamma", "#[bs, n, k+1]", "\n", "\n", "g1", "=", "G1", ".", "sum", "(", "-", "1", ")", "\n", "G21", "=", "(", "g1", "*", "inv_mu", ")", ".", "unsqueeze", "(", "-", "1", ")", "*", "Gamma", "#[bs, n, k+1]", "\n", "g1_L", "=", "g1", ".", "unsqueeze", "(", "-", "2", ")", ".", "matmul", "(", "L", ")", "#[bs, 1, k]", "\n", "G22", "=", "g1_L", ".", "matmul", "(", "Gamma_mu", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "*", "Gamma", "#[bs, n, k+1]", "\n", "G23", "=", "-", "F", ".", "pad", "(", "g1_L", ",", "pad", "=", "(", "0", ",", "1", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "*", "Gamma", "#[bs, n, k+1]", "\n", "G2", "=", "G21", "+", "G22", "+", "G23", "#[bs, n, k+1]", "\n", "\n", "del", "g1", ",", "G21", ",", "G22", ",", "G23", ",", "Gamma_mu", "\n", "\n", "g2", "=", "G1", ".", "sum", "(", "-", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "#[bs, k+1, 1]", "\n", "g2", "=", "g2", "[", ":", ",", ":", "-", "1", ",", ":", "]", "#[bs, k, 1]", "\n", "G31", "=", "-", "L", ".", "matmul", "(", "g2", ")", "*", "Gamma", "#[bs, n, k+1]", "\n", "G32", "=", "F", ".", "pad", "(", "inv_Kappa", ".", "matmul", "(", "g2", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "pad", "=", "(", "0", ",", "1", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "*", "Gamma", "#[bs, n, k+1]", "\n", "G3", "=", "G31", "+", "G32", "#[bs, n, k+1]", "\n", "#            del g2, G31, G32, L", "\n", "\n", "grad_C", "=", "(", "-", "G1", "+", "G2", "+", "G3", ")", "/", "epsilon", "#[bs, n, k+1]", "\n", "\n", "return", "grad_C", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.Colorize.__init__": [[323, 326], ["util.labelcolormap", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.labelcolormap"], ["    ", "def", "__init__", "(", "self", ",", "n", "=", "35", ")", ":", "\n", "        ", "self", ".", "cmap", "=", "labelcolormap", "(", "n", ")", "\n", "self", ".", "cmap", "=", "torch", ".", "from_numpy", "(", "self", ".", "cmap", "[", ":", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.Colorize.__call__": [[327, 338], ["gray_image.size", "torch.ByteTensor().fill_", "range", "len", "torch.ByteTensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "gray_image", ")", ":", "\n", "        ", "size", "=", "gray_image", ".", "size", "(", ")", "\n", "color_image", "=", "torch", ".", "ByteTensor", "(", "3", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "for", "label", "in", "range", "(", "0", ",", "len", "(", "self", ".", "cmap", ")", ")", ":", "\n", "            ", "mask", "=", "(", "label", "==", "gray_image", "[", "0", "]", ")", ".", "cpu", "(", ")", "\n", "color_image", "[", "0", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "0", "]", "\n", "color_image", "[", "1", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "1", "]", "\n", "color_image", "[", "2", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "2", "]", "\n", "\n", "", "return", "color_image", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.id2rgb": [[25, 29], ["scipy.loadmat", "int"], "function", ["None"], ["def", "id2rgb", "(", "id", ")", ":", "\n", "    ", "colormap", "=", "scio", ".", "loadmat", "(", "'./util/color150.mat'", ")", "[", "'colors'", "]", "\n", "rgb", "=", "colormap", "[", "int", "(", "id", "-", "1", ")", "]", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.masktorgb": [[30, 40], ["numpy.zeros", "range", "scipy.loadmat", "range", "range", "int"], "function", ["None"], ["", "def", "masktorgb", "(", "x", ")", ":", "\n", "    ", "colormap", "=", "scio", ".", "loadmat", "(", "'./util/color150.mat'", ")", "[", "'colors'", "]", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "3", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "2", "]", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "k", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "x", ".", "shape", "[", "3", "]", ")", ":", "\n", "# print (k,i,j)", "\n", "# print (x[k, 0, i, j])", "\n", "                ", "mask", "[", "k", ",", ":", ",", "i", ",", "j", "]", "=", "colormap", "[", "int", "(", "x", "[", "k", ",", "0", ",", "i", ",", "j", "]", "-", "1", ")", "]", "\n", "", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.feature_normalize": [[41, 45], ["torch.div", "torch.norm"], "function", ["None"], ["", "def", "feature_normalize", "(", "feature_in", ")", ":", "\n", "    ", "feature_in_norm", "=", "torch", ".", "norm", "(", "feature_in", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "+", "sys", ".", "float_info", ".", "epsilon", "\n", "feature_in_norm", "=", "torch", ".", "div", "(", "feature_in", ",", "feature_in_norm", ")", "\n", "return", "feature_in_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.mean_normalize": [[46, 51], ["torch.div", "torch.div.mean", "torch.norm"], "function", ["None"], ["", "def", "mean_normalize", "(", "feature", ",", "dim_mean", "=", "None", ")", ":", "\n", "    ", "feature", "=", "feature", "-", "feature", ".", "mean", "(", "dim", "=", "dim_mean", ",", "keepdim", "=", "True", ")", "# center the feature", "\n", "feature_norm", "=", "torch", ".", "norm", "(", "feature", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "+", "sys", ".", "float_info", ".", "epsilon", "\n", "feature", "=", "torch", ".", "div", "(", "feature", ",", "feature_norm", ")", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.weighted_l1_loss": [[52, 57], ["torch.abs", "torch.abs.mean", "weights.expand_as"], "function", ["None"], ["", "def", "weighted_l1_loss", "(", "input", ",", "target", ",", "weights", ")", ":", "\n", "    ", "out", "=", "torch", ".", "abs", "(", "input", "-", "target", ")", "\n", "out", "=", "out", "*", "weights", ".", "expand_as", "(", "out", ")", "\n", "loss", "=", "out", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.mse_loss": [[58, 60], ["torch.mean"], "function", ["None"], ["", "def", "mse_loss", "(", "input", ",", "target", "=", "0", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "(", "input", "-", "target", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.vgg_preprocess": [[61, 74], ["torch.cat", "torch.Tensor().type_as().view", "torch.Tensor().type_as", "torch.Tensor"], "function", ["None"], ["", "def", "vgg_preprocess", "(", "tensor", ",", "vgg_normal_correct", "=", "False", ")", ":", "\n", "    ", "if", "vgg_normal_correct", ":", "\n", "        ", "tensor", "=", "(", "tensor", "+", "1", ")", "/", "2", "\n", "# input is RGB tensor which ranges in [0,1]", "\n", "# output is BGR tensor which ranges in [0,255]", "\n", "", "tensor_bgr", "=", "torch", ".", "cat", "(", "(", "tensor", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", ",", "tensor", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", ",", "tensor", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "# tensor_bgr = tensor[:, [2, 1, 0], ...]", "\n", "# print (tensor_bgr.shape)", "\n", "# print (torch.Tensor([0.40760392, 0.45795686, 0.48501961]).type_as(tensor_bgr).view(1, 3, 1, 1).shape)", "\n", "# print (1/0)", "\n", "tensor_bgr_ml", "=", "tensor_bgr", "-", "torch", ".", "Tensor", "(", "[", "0.40760392", ",", "0.45795686", ",", "0.48501961", "]", ")", ".", "type_as", "(", "tensor_bgr", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "tensor_rst", "=", "tensor_bgr_ml", "*", "255", "\n", "return", "tensor_rst", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.copyconf": [[75, 81], ["argparse.Namespace", "print", "setattr", "vars"], "function", ["None"], ["", "def", "copyconf", "(", "default_opt", ",", "**", "kwargs", ")", ":", "\n", "    ", "conf", "=", "argparse", ".", "Namespace", "(", "**", "vars", "(", "default_opt", ")", ")", "\n", "for", "key", "in", "kwargs", ":", "\n", "        ", "print", "(", "key", ",", "kwargs", "[", "key", "]", ")", "\n", "setattr", "(", "conf", ",", "key", ",", "kwargs", "[", "key", "]", ")", "\n", "", "return", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.tile_images": [[83, 103], ["range", "numpy.concatenate", "numpy.concatenate", "np.concatenate.append", "numpy.concatenate", "numpy.zeros", "range"], "function", ["None"], ["", "def", "tile_images", "(", "imgs", ",", "picturesPerRow", "=", "4", ")", ":", "\n", "    ", "\"\"\" Code borrowed from\n    https://stackoverflow.com/questions/26521365/cleanly-tile-numpy-array-of-images-stored-in-a-flattened-1d-format/26521997\n    \"\"\"", "\n", "\n", "# Padding", "\n", "if", "imgs", ".", "shape", "[", "0", "]", "%", "picturesPerRow", "==", "0", ":", "\n", "        ", "rowPadding", "=", "0", "\n", "", "else", ":", "\n", "        ", "rowPadding", "=", "picturesPerRow", "-", "imgs", ".", "shape", "[", "0", "]", "%", "picturesPerRow", "\n", "", "if", "rowPadding", ">", "0", ":", "\n", "        ", "imgs", "=", "np", ".", "concatenate", "(", "[", "imgs", ",", "np", ".", "zeros", "(", "(", "rowPadding", ",", "*", "imgs", ".", "shape", "[", "1", ":", "]", ")", ",", "dtype", "=", "imgs", ".", "dtype", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# Tiling Loop (The conditionals are not necessary anymore)", "\n", "", "tiled", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "imgs", ".", "shape", "[", "0", "]", ",", "picturesPerRow", ")", ":", "\n", "        ", "tiled", ".", "append", "(", "np", ".", "concatenate", "(", "[", "imgs", "[", "j", "]", "for", "j", "in", "range", "(", "i", ",", "i", "+", "picturesPerRow", ")", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "tiled", "=", "np", ".", "concatenate", "(", "tiled", ",", "axis", "=", "0", ")", "\n", "return", "tiled", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.tensor2im": [[107, 139], ["isinstance", "image_tensor.unsqueeze.detach().cpu().float().numpy", "numpy.clip", "np.clip.astype", "range", "image_tensor.unsqueeze.dim", "range", "numpy.concatenate", "image_tensor.unsqueeze.dim", "image_tensor.unsqueeze.unsqueeze", "len", "np.clip.append", "image_tensor.unsqueeze.size", "util.tensor2im", "np.concatenate.append", "util.tile_images", "image_tensor.unsqueeze.detach().cpu().float", "numpy.transpose", "util.tensor2im", "tensor2im.reshape", "image_tensor.unsqueeze.detach().cpu", "numpy.transpose", "image_tensor.unsqueeze.detach"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.tensor2im", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.tile_images", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.tensor2im"], ["", "def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "normalize", "=", "True", ",", "tile", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "image_tensor", ",", "list", ")", ":", "\n", "        ", "image_numpy", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "image_tensor", ")", ")", ":", "\n", "            ", "image_numpy", ".", "append", "(", "tensor2im", "(", "image_tensor", "[", "i", "]", ",", "imtype", ",", "normalize", ")", ")", "\n", "", "return", "image_numpy", "\n", "\n", "", "if", "image_tensor", ".", "dim", "(", ")", "==", "4", ":", "\n", "# transform each image in the batch", "\n", "        ", "images_np", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "image_tensor", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "one_image", "=", "image_tensor", "[", "b", "]", "\n", "one_image_np", "=", "tensor2im", "(", "one_image", ")", "\n", "images_np", ".", "append", "(", "one_image_np", ".", "reshape", "(", "1", ",", "*", "one_image_np", ".", "shape", ")", ")", "\n", "", "images_np", "=", "np", ".", "concatenate", "(", "images_np", ",", "axis", "=", "0", ")", "\n", "if", "tile", ":", "\n", "            ", "images_tiled", "=", "tile_images", "(", "images_np", ")", "\n", "return", "images_tiled", "\n", "", "else", ":", "\n", "            ", "return", "images_np", "\n", "\n", "", "", "if", "image_tensor", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "image_tensor", "=", "image_tensor", ".", "unsqueeze", "(", "0", ")", "\n", "", "image_numpy", "=", "image_tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "normalize", ":", "\n", "        ", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "", "else", ":", "\n", "        ", "image_numpy", "=", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "*", "255.0", "\n", "", "image_numpy", "=", "np", ".", "clip", "(", "image_numpy", ",", "0", ",", "255", ")", "\n", "if", "image_numpy", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "image_numpy", "[", ":", ",", ":", ",", "0", "]", "\n", "", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.tensor2label": [[142, 169], ["label_tensor.cpu().float.cpu().float", "numpy.transpose", "np.transpose.astype", "label_tensor.cpu().float.dim", "range", "numpy.concatenate", "label_tensor.cpu().float.dim", "numpy.zeros", "util.tensor2im", "util.Colorize", "label_tensor.cpu().float.numpy", "label_tensor.cpu().float.size", "util.tensor2label", "np.concatenate.append", "util.tile_images", "label_tensor.cpu().float.cpu", "label_tensor.cpu().float.size", "label_tensor.cpu().float.max", "tensor2label.reshape"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.tensor2im", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.tensor2label", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.tile_images"], ["", "def", "tensor2label", "(", "label_tensor", ",", "n_label", ",", "imtype", "=", "np", ".", "uint8", ",", "tile", "=", "False", ")", ":", "\n", "    ", "if", "label_tensor", ".", "dim", "(", ")", "==", "4", ":", "\n", "# transform each image in the batch", "\n", "        ", "images_np", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "label_tensor", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "one_image", "=", "label_tensor", "[", "b", "]", "\n", "one_image_np", "=", "tensor2label", "(", "one_image", ",", "n_label", ",", "imtype", ")", "\n", "images_np", ".", "append", "(", "one_image_np", ".", "reshape", "(", "1", ",", "*", "one_image_np", ".", "shape", ")", ")", "\n", "", "images_np", "=", "np", ".", "concatenate", "(", "images_np", ",", "axis", "=", "0", ")", "\n", "if", "tile", ":", "\n", "            ", "images_tiled", "=", "tile_images", "(", "images_np", ")", "\n", "return", "images_tiled", "\n", "", "else", ":", "\n", "            ", "images_np", "=", "images_np", "[", "0", "]", "\n", "return", "images_np", "\n", "\n", "", "", "if", "label_tensor", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "64", ",", "64", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "if", "n_label", "==", "0", ":", "\n", "        ", "return", "tensor2im", "(", "label_tensor", ",", "imtype", ")", "\n", "", "label_tensor", "=", "label_tensor", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "if", "label_tensor", ".", "size", "(", ")", "[", "0", "]", ">", "1", ":", "\n", "        ", "label_tensor", "=", "label_tensor", ".", "max", "(", "0", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "", "label_tensor", "=", "Colorize", "(", "n_label", ")", "(", "label_tensor", ")", "\n", "label_numpy", "=", "np", ".", "transpose", "(", "label_tensor", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "result", "=", "label_numpy", ".", "astype", "(", "imtype", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.save_image": [[171, 182], ["PIL.Image.fromarray", "Image.fromarray.save", "os.makedirs", "len", "numpy.expand_dims", "numpy.repeat", "image_path.replace", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ",", "create_dir", "=", "False", ")", ":", "\n", "    ", "if", "create_dir", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "image_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "", "if", "len", "(", "image_numpy", ".", "shape", ")", "==", "2", ":", "\n", "        ", "image_numpy", "=", "np", ".", "expand_dims", "(", "image_numpy", ",", "axis", "=", "2", ")", "\n", "", "if", "image_numpy", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "np", ".", "repeat", "(", "image_numpy", ",", "3", ",", "2", ")", "\n", "", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "\n", "# save to png", "\n", "image_pil", ".", "save", "(", "image_path", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.mkdirs": [[184, 190], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.mkdir", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.mkdir"], ["", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.mkdir": [[192, 195], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.atoi": [[197, 199], ["text.isdigit", "int"], "function", ["None"], ["", "", "def", "atoi", "(", "text", ")", ":", "\n", "    ", "return", "int", "(", "text", ")", "if", "text", ".", "isdigit", "(", ")", "else", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.natural_keys": [[201, 208], ["util.atoi", "re.split"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.atoi"], ["", "def", "natural_keys", "(", "text", ")", ":", "\n", "    ", "'''\n    alist.sort(key=natural_keys) sorts in human order\n    http://nedbatchelder.com/blog/200712/human_sorting.html\n    (See Toothy's implementation in the comments)\n    '''", "\n", "return", "[", "atoi", "(", "c", ")", "for", "c", "in", "re", ".", "split", "(", "'(\\d+)'", ",", "text", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.natural_sort": [[210, 212], ["items.sort"], "function", ["None"], ["", "def", "natural_sort", "(", "items", ")", ":", "\n", "    ", "items", ".", "sort", "(", "key", "=", "natural_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.str2bool": [[214, 221], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.print_network": [[222, 229], ["model.parameters", "print", "param.numel", "type"], "function", ["None"], ["", "", "def", "print_network", "(", "model", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "'Network [%s] was created. Total number of parameters: %.1f million. '", "\n", "'To see the architecture, do print(network).'", "\n", "%", "(", "type", "(", "model", ")", ".", "__name__", ",", "num_params", "/", "1000000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.find_class_in_module": [[230, 243], ["target_cls_name.replace().lower.replace().lower", "importlib.import_module", "importlib.import_module.__dict__.items", "print", "exit", "target_cls_name.replace().lower.replace", "name.lower"], "function", ["None"], ["", "def", "find_class_in_module", "(", "target_cls_name", ",", "module", ")", ":", "\n", "    ", "target_cls_name", "=", "target_cls_name", ".", "replace", "(", "'_'", ",", "''", ")", ".", "lower", "(", ")", "\n", "clslib", "=", "importlib", ".", "import_module", "(", "module", ")", "\n", "cls", "=", "None", "\n", "for", "name", ",", "clsobj", "in", "clslib", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", ".", "lower", "(", ")", "==", "target_cls_name", ":", "\n", "            ", "cls", "=", "clsobj", "\n", "\n", "", "", "if", "cls", "is", "None", ":", "\n", "        ", "print", "(", "\"In %s, there should be a class whose name matches %s in lowercase without underscore(_)\"", "%", "(", "module", ",", "target_cls_name", ")", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.save_network": [[245, 251], ["os.path.join", "torch.save", "net.cpu().state_dict", "len", "torch.cuda.is_available", "net.cuda", "net.cpu"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "save_network", "(", "net", ",", "label", ",", "epoch", ",", "opt", ")", ":", "\n", "    ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "if", "len", "(", "opt", ".", "gpu_ids", ")", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "net", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.load_network": [[253, 270], ["os.path.join", "os.path.join", "torch.load", "os.path.exists", "print", "net.load_state_dict", "print", "print", "net.load_state_dict", "print"], "function", ["None"], ["", "", "def", "load_network", "(", "net", ",", "label", ",", "epoch", ",", "opt", ")", ":", "\n", "    ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "label", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "print", "(", "'not find model :'", "+", "save_path", "+", "', do not load model!'", ")", "\n", "return", "net", "\n", "", "weights", "=", "torch", ".", "load", "(", "save_path", ")", "\n", "try", ":", "\n", "        ", "net", ".", "load_state_dict", "(", "weights", ")", "\n", "", "except", "KeyError", ":", "\n", "        ", "print", "(", "'key error, not load!'", ")", "\n", "", "except", "RuntimeError", "as", "err", ":", "\n", "        ", "print", "(", "err", ")", "\n", "net", ".", "load_state_dict", "(", "weights", ",", "strict", "=", "False", ")", "\n", "print", "(", "'loaded with strict=False'", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.uint82bin": [[277, 280], ["str", "range"], "function", ["None"], ["", "def", "uint82bin", "(", "n", ",", "count", "=", "8", ")", ":", "\n", "    ", "\"\"\"returns the binary of integer n, count refers to amount of bits\"\"\"", "\n", "return", "''", ".", "join", "(", "[", "str", "(", "(", "n", ">>", "y", ")", "&", "1", ")", "for", "y", "in", "range", "(", "count", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.labelcolormap": [[282, 320], ["numpy.array", "numpy.zeros", "range", "range", "range", "util.uint82bin", "util.coco.id2label", "numpy.array", "numpy.uint8", "numpy.uint8", "numpy.uint8", "list"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.uint82bin"], ["", "def", "labelcolormap", "(", "N", ")", ":", "\n", "    ", "if", "N", "==", "35", ":", "# cityscape", "\n", "        ", "cmap", "=", "np", ".", "array", "(", "[", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "111", ",", "74", ",", "0", ")", ",", "(", "81", ",", "0", ",", "81", ")", ",", "\n", "(", "128", ",", "64", ",", "128", ")", ",", "(", "244", ",", "35", ",", "232", ")", ",", "(", "250", ",", "170", ",", "160", ")", ",", "(", "230", ",", "150", ",", "140", ")", ",", "(", "70", ",", "70", ",", "70", ")", ",", "(", "102", ",", "102", ",", "156", ")", ",", "(", "190", ",", "153", ",", "153", ")", ",", "\n", "(", "180", ",", "165", ",", "180", ")", ",", "(", "150", ",", "100", ",", "100", ")", ",", "(", "150", ",", "120", ",", "90", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "250", ",", "170", ",", "30", ")", ",", "(", "220", ",", "220", ",", "0", ")", ",", "\n", "(", "107", ",", "142", ",", "35", ")", ",", "(", "152", ",", "251", ",", "152", ")", ",", "(", "70", ",", "130", ",", "180", ")", ",", "(", "220", ",", "20", ",", "60", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "142", ")", ",", "(", "0", ",", "0", ",", "70", ")", ",", "\n", "(", "0", ",", "60", ",", "100", ")", ",", "(", "0", ",", "0", ",", "90", ")", ",", "(", "0", ",", "0", ",", "110", ")", ",", "(", "0", ",", "80", ",", "100", ")", ",", "(", "0", ",", "0", ",", "230", ")", ",", "(", "119", ",", "11", ",", "32", ")", ",", "(", "0", ",", "0", ",", "142", ")", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "r", ",", "g", ",", "b", "=", "0", ",", "0", ",", "0", "\n", "id", "=", "i", "+", "1", "# let's give 0 a color", "\n", "for", "j", "in", "range", "(", "7", ")", ":", "\n", "                ", "str_id", "=", "uint82bin", "(", "id", ")", "\n", "r", "=", "r", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "1", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "g", "=", "g", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "2", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "b", "=", "b", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "3", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "id", "=", "id", ">>", "3", "\n", "", "cmap", "[", "i", ",", "0", "]", "=", "r", "\n", "cmap", "[", "i", ",", "1", "]", "=", "g", "\n", "cmap", "[", "i", ",", "2", "]", "=", "b", "\n", "\n", "", "if", "N", "==", "182", ":", "# COCO", "\n", "            ", "important_colors", "=", "{", "\n", "'sea'", ":", "(", "54", ",", "62", ",", "167", ")", ",", "\n", "'sky-other'", ":", "(", "95", ",", "219", ",", "255", ")", ",", "\n", "'tree'", ":", "(", "140", ",", "104", ",", "47", ")", ",", "\n", "'clouds'", ":", "(", "170", ",", "170", ",", "170", ")", ",", "\n", "'grass'", ":", "(", "29", ",", "195", ",", "49", ")", "\n", "}", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "                ", "name", "=", "util", ".", "coco", ".", "id2label", "(", "i", ")", "\n", "if", "name", "in", "important_colors", ":", "\n", "                    ", "color", "=", "important_colors", "[", "name", "]", "\n", "cmap", "[", "i", "]", "=", "np", ".", "array", "(", "list", "(", "color", ")", ")", "\n", "\n", "", "", "", "", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.print_current_errors": [[339, 351], ["errors.items", "print", "os.path.join", "v.mean().float.mean().float", "open", "log_file.write", "v.mean().float.mean"], "function", ["None"], ["", "", "def", "print_current_errors", "(", "opt", ",", "epoch", ",", "i", ",", "errors", ",", "t", ")", ":", "\n", "    ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", ":", "\n", "#print(v)", "\n", "#if v != 0:", "\n", "        ", "v", "=", "v", ".", "mean", "(", ")", ".", "float", "(", ")", "\n", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "message", ")", "\n", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "        ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.getCMap": [[353, 399], ["matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap.", "np.vstack.reshape", "matplotlib.colors.rgb_to_hsv", "matplotlib.colors.hsv_to_rgb", "np.vstack.reshape", "numpy.random.get_state", "numpy.random.seed", "numpy.random.permutation", "numpy.random.set_state", "numpy.arange", "numpy.zeros", "numpy.vstack", "numpy.vstack"], "function", ["None"], ["", "", "def", "getCMap", "(", "stuffStartId", "=", "1", ",", "stuffEndId", "=", "182", ",", "cmapName", "=", "'jet'", ",", "addThings", "=", "True", ",", "addUnlabeled", "=", "True", ",", "addOther", "=", "True", ")", ":", "\n", "    ", "'''\n    Create a color map for the classes in the COCO Stuff Segmentation Challenge.\n    :param stuffStartId: (optional) index where stuff classes start\n    :param stuffEndId: (optional) index where stuff classes end\n    :param cmapName: (optional) Matlab's name of the color map\n    :param addThings: (optional) whether to add a color for the 91 thing classes\n    :param addUnlabeled: (optional) whether to add a color for the 'unlabeled' class\n    :param addOther: (optional) whether to add a color for the 'other' class\n    :return: cmap - [c, 3] a color map for c colors where the columns indicate the RGB values\n    '''", "\n", "\n", "# Get jet color map from Matlab", "\n", "labelCount", "=", "stuffEndId", "-", "stuffStartId", "+", "1", "\n", "cmapGen", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "cmapName", ",", "labelCount", ")", "\n", "cmap", "=", "cmapGen", "(", "np", ".", "arange", "(", "labelCount", ")", ")", "\n", "cmap", "=", "cmap", "[", ":", ",", "0", ":", "3", "]", "\n", "\n", "# Reduce value/brightness of stuff colors (easier in HSV format)", "\n", "cmap", "=", "cmap", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "3", ")", ")", "\n", "hsv", "=", "matplotlib", ".", "colors", ".", "rgb_to_hsv", "(", "cmap", ")", "\n", "hsv", "[", ":", ",", "0", ",", "2", "]", "=", "hsv", "[", ":", ",", "0", ",", "2", "]", "*", "0.7", "\n", "cmap", "=", "matplotlib", ".", "colors", ".", "hsv_to_rgb", "(", "hsv", ")", "\n", "cmap", "=", "cmap", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "\n", "# Permute entries to avoid classes with similar name having similar colors", "\n", "st0", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "42", ")", "\n", "perm", "=", "np", ".", "random", ".", "permutation", "(", "labelCount", ")", "\n", "np", ".", "random", ".", "set_state", "(", "st0", ")", "\n", "cmap", "=", "cmap", "[", "perm", ",", ":", "]", "\n", "\n", "# Add black (or any other) color for each thing class", "\n", "if", "addThings", ":", "\n", "        ", "thingsPadding", "=", "np", ".", "zeros", "(", "(", "stuffStartId", "-", "1", ",", "3", ")", ")", "\n", "cmap", "=", "np", ".", "vstack", "(", "(", "thingsPadding", ",", "cmap", ")", ")", "\n", "\n", "# Add black color for 'unlabeled' class", "\n", "", "if", "addUnlabeled", ":", "\n", "        ", "cmap", "=", "np", ".", "vstack", "(", "(", "(", "0.0", ",", "0.0", ",", "0.0", ")", ",", "cmap", ")", ")", "\n", "\n", "# Add yellow/orange color for 'other' class", "\n", "# if addOther:", "\n", "#     cmap = np.vstack((cmap, (1.0, 0.843, 0.0)))", "\n", "\n", "", "return", "cmap", "*", "255.0", "\n", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.utils.normalize": [[10, 17], ["x.norm", "x.div_", "x.norm.clamp", "x.norm.clamp"], "function", ["None"], ["def", "normalize", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ",", "inplace", "=", "True", ")", ":", "\n", "    ", "norm", "=", "x", ".", "norm", "(", "p", "=", "p", ",", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "\n", "if", "inplace", ":", "\n", "        ", "x", ".", "div_", "(", "norm", ".", "clamp", "(", "min", "=", "EPS", ")", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "x", "/", "norm", ".", "clamp", "(", "min", "=", "EPS", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.util.utils.spherical_kmeans": [[18, 68], ["x.new_empty", "x.new_empty", "range", "x.size", "x.size", "range", "x.new_empty.mean", "range", "torch.randperm", "indices.cuda.cuda", "min", "x[].view().mm", "x[].view().mm.max", "print", "clusters.view().t", "index.sum", "x.new_empty.argmin", "xj.mean", "torch.abs", "x[].view", "xj.mean.norm().clamp", "torch.abs", "clusters.view", "xj.mean.norm"], "function", ["None"], ["", "def", "spherical_kmeans", "(", "x", ",", "n_clusters", ",", "max_iters", "=", "100", ",", "block_size", "=", "None", ",", "verbose", "=", "True", ",", "\n", "init", "=", "None", ",", "eps", "=", "1e-4", ")", ":", "\n", "    ", "\"\"\"Spherical kmeans\n    Args:\n        x (Tensor n_samples x kmer_size x n_features): data points\n        n_clusters (int): number of clusters\n    \"\"\"", "\n", "use_cuda", "=", "x", ".", "is_cuda", "\n", "if", "x", ".", "ndim", "==", "3", ":", "\n", "        ", "n_samples", ",", "kmer_size", ",", "n_features", "=", "x", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "        ", "n_samples", ",", "n_features", "=", "x", ".", "size", "(", ")", "\n", "", "if", "init", "is", "None", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "n_samples", ")", "[", ":", "n_clusters", "]", "\n", "if", "use_cuda", ":", "\n", "            ", "indices", "=", "indices", ".", "cuda", "(", ")", "\n", "", "clusters", "=", "x", "[", "indices", "]", "\n", "\n", "", "prev_sim", "=", "np", ".", "inf", "\n", "tmp", "=", "x", ".", "new_empty", "(", "n_samples", ")", "\n", "assign", "=", "x", ".", "new_empty", "(", "n_samples", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "if", "block_size", "is", "None", "or", "block_size", "==", "0", ":", "\n", "        ", "block_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "", "for", "n_iter", "in", "range", "(", "max_iters", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "n_samples", ",", "block_size", ")", ":", "\n", "            ", "end_i", "=", "min", "(", "i", "+", "block_size", ",", "n_samples", ")", "\n", "cos_sim", "=", "x", "[", "i", ":", "end_i", "]", ".", "view", "(", "end_i", "-", "i", ",", "-", "1", ")", ".", "mm", "(", "clusters", ".", "view", "(", "n_clusters", ",", "-", "1", ")", ".", "t", "(", ")", ")", "\n", "tmp", "[", "i", ":", "end_i", "]", ",", "assign", "[", "i", ":", "end_i", "]", "=", "cos_sim", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "", "sim", "=", "tmp", ".", "mean", "(", ")", "\n", "if", "(", "n_iter", "+", "1", ")", "%", "10", "==", "0", "and", "verbose", ":", "\n", "            ", "print", "(", "\"Spherical kmeans iter {}, objective value {}\"", ".", "format", "(", "\n", "n_iter", "+", "1", ",", "sim", ")", ")", "\n", "\n", "# update clusters", "\n", "", "for", "j", "in", "range", "(", "n_clusters", ")", ":", "\n", "            ", "index", "=", "assign", "==", "j", "\n", "if", "index", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "idx", "=", "tmp", ".", "argmin", "(", ")", "\n", "clusters", "[", "j", "]", "=", "x", "[", "idx", "]", "\n", "tmp", "[", "idx", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "xj", "=", "x", "[", "index", "]", "\n", "c", "=", "xj", ".", "mean", "(", "0", ")", "\n", "clusters", "[", "j", "]", "=", "c", "/", "c", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "clamp", "(", "min", "=", "EPS", ")", "\n", "\n", "", "", "if", "torch", ".", "abs", "(", "prev_sim", "-", "sim", ")", "/", "(", "torch", ".", "abs", "(", "sim", ")", "+", "1e-20", ")", "<", "1e-6", ":", "\n", "            ", "break", "\n", "", "prev_sim", "=", "sim", "\n", "", "return", "clusters", "\n", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.__init__.find_model_using_name": [[10, 32], ["importlib.import_module", "importlib.import_module.__dict__.items", "model_name.replace", "print", "exit", "issubclass", "name.lower", "target_model_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.__init__.get_option_setter": [[34, 37], ["__init__.find_model_using_name"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.__init__.create_model": [[39, 45], ["__init__.find_model_using_name", "find_model_using_name.", "print", "type"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.modify_commandline_options": [[8, 12], ["models.modify_commandline_options"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.BaseDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "networks", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.__init__": [[13, 43], ["super().__init__", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "pix2pix_model.Pix2PixModel.use_gpu", "pix2pix_model.Pix2PixModel.use_gpu", "pix2pix_model.Pix2PixModel.initialize_networks", "models.correspondence.VGG19_feature_color_torchversion", "pix2pix_model.Pix2PixModel.vggnet_fix.load_state_dict", "pix2pix_model.Pix2PixModel.vggnet_fix.eval", "pix2pix_model.Pix2PixModel.vggnet_fix.parameters", "pix2pix_model.Pix2PixModel.vggnet_fix.to", "models.ContextualLoss_forward", "models.GANLoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.use_gpu", "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.use_gpu", "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.initialize_networks"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "FloatTensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "use_gpu", "(", ")", "else", "torch", ".", "FloatTensor", "\n", "self", ".", "ByteTensor", "=", "torch", ".", "cuda", ".", "ByteTensor", "if", "self", ".", "use_gpu", "(", ")", "else", "torch", ".", "ByteTensor", "\n", "self", ".", "alpha", "=", "1", "\n", "\n", "self", ".", "net", "=", "torch", ".", "nn", ".", "ModuleDict", "(", "self", ".", "initialize_networks", "(", "opt", ")", ")", "\n", "\n", "# set loss functions", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "vggnet_fix", "=", "networks", ".", "correspondence", ".", "VGG19_feature_color_torchversion", "(", "vgg_normal_correct", "=", "opt", ".", "vgg_normal_correct", ")", "\n", "self", ".", "vggnet_fix", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'models/vgg19_conv.pth'", ")", ")", "\n", "self", ".", "vggnet_fix", ".", "eval", "(", ")", "\n", "for", "param", "in", "self", ".", "vggnet_fix", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "vggnet_fix", ".", "to", "(", "self", ".", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "self", ".", "contextual_forward_loss", "=", "networks", ".", "ContextualLoss_forward", "(", "opt", ")", "\n", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "\n", "opt", ".", "gan_mode", ",", "tensor", "=", "self", ".", "FloatTensor", ",", "opt", "=", "self", ".", "opt", ")", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "MSE_loss", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "if", "opt", ".", "which_perceptual", "==", "'5_2'", ":", "\n", "                ", "self", ".", "perceptual_layer", "=", "-", "1", "\n", "", "elif", "opt", ".", "which_perceptual", "==", "'4_2'", ":", "\n", "                ", "self", ".", "perceptual_layer", "=", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.forward": [[48, 92], ["pix2pix_model.Pix2PixModel.preprocess_input", "data.copy", "pix2pix_model.Pix2PixModel.compute_generator_loss", "pix2pix_model.Pix2PixModel.compute_discriminator_loss", "ValueError", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pix2pix_model.Pix2PixModel.inference"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.preprocess_input", "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.compute_generator_loss", "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.compute_discriminator_loss", "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.inference"], ["", "", "", "def", "forward", "(", "self", ",", "data", ",", "mode", ",", "GforD", "=", "None", ",", "alpha", "=", "1", ")", ":", "\n", "\n", "        ", "input_label", ",", "input_semantics", ",", "real_image", ",", "self_ref", ",", "ref_image", ",", "ref_label", ",", "ref_semantics", "=", "self", ".", "preprocess_input", "(", "data", ".", "copy", "(", ")", ",", ")", "\n", "\n", "self", ".", "alpha", "=", "alpha", "\n", "generated_out", "=", "{", "}", "\n", "if", "mode", "==", "'generator'", ":", "\n", "            ", "g_loss", ",", "generated_out", "=", "self", ".", "compute_generator_loss", "(", "input_label", ",", "\n", "input_semantics", ",", "real_image", ",", "ref_label", ",", "ref_semantics", ",", "ref_image", ",", "self_ref", ")", "\n", "\n", "out", "=", "{", "}", "\n", "out", "[", "'fake_image'", "]", "=", "generated_out", "[", "'fake_image'", "]", "\n", "out", "[", "'input_semantics'", "]", "=", "input_semantics", "\n", "out", "[", "'ref_semantics'", "]", "=", "ref_semantics", "\n", "out", "[", "'warp_out'", "]", "=", "None", "if", "'warp_out'", "not", "in", "generated_out", "else", "generated_out", "[", "'warp_out'", "]", "\n", "out", "[", "'warp_mask'", "]", "=", "None", "if", "'warp_mask'", "not", "in", "generated_out", "else", "generated_out", "[", "'warp_mask'", "]", "\n", "out", "[", "'adaptive_feature_seg'", "]", "=", "None", "if", "'adaptive_feature_seg'", "not", "in", "generated_out", "else", "generated_out", "[", "'adaptive_feature_seg'", "]", "\n", "out", "[", "'adaptive_feature_img'", "]", "=", "None", "if", "'adaptive_feature_img'", "not", "in", "generated_out", "else", "generated_out", "[", "'adaptive_feature_img'", "]", "\n", "out", "[", "'warp_cycle'", "]", "=", "None", "if", "'warp_cycle'", "not", "in", "generated_out", "else", "generated_out", "[", "'warp_cycle'", "]", "\n", "out", "[", "'warp_i2r'", "]", "=", "None", "if", "'warp_i2r'", "not", "in", "generated_out", "else", "generated_out", "[", "'warp_i2r'", "]", "\n", "out", "[", "'warp_i2r2i'", "]", "=", "None", "if", "'warp_i2r2i'", "not", "in", "generated_out", "else", "generated_out", "[", "'warp_i2r2i'", "]", "\n", "out", "[", "'warp64'", "]", "=", "None", "if", "'warp64'", "not", "in", "generated_out", "else", "generated_out", "[", "'warp64'", "]", "\n", "out", "[", "'warp128'", "]", "=", "None", "if", "'warp128'", "not", "in", "generated_out", "else", "generated_out", "[", "'warp128'", "]", "\n", "# out['weight1'] = None if 'weight1' not in generated_out else generated_out['weight1']", "\n", "# out['weight2'] = None if 'weight2' not in generated_out else generated_out['weight2']", "\n", "out", "[", "'conf_map'", "]", "=", "None", "if", "'conf_map'", "not", "in", "generated_out", "else", "generated_out", "[", "'conf_map'", "]", "\n", "\n", "\n", "return", "g_loss", ",", "out", "\n", "\n", "", "elif", "mode", "==", "'discriminator'", ":", "\n", "            ", "d_loss", "=", "self", ".", "compute_discriminator_loss", "(", "\n", "input_semantics", ",", "real_image", ",", "ref_image", ",", "GforD", ",", "label", "=", "input_label", ")", "\n", "return", "d_loss", "\n", "", "elif", "mode", "==", "'inference'", ":", "\n", "            ", "out", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out", "=", "self", ".", "inference", "(", "input_semantics", ",", "\n", "ref_semantics", "=", "ref_semantics", ",", "ref_image", "=", "ref_image", ",", "self_ref", "=", "self_ref", ")", "\n", "", "out", "[", "'input_semantics'", "]", "=", "input_semantics", "\n", "out", "[", "'ref_semantics'", "]", "=", "ref_semantics", "\n", "return", "out", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"|mode| is invalid\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.create_optimizers": [[94, 114], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "list", "list", "list", "pix2pix_model.Pix2PixModel.net[].parameters", "pix2pix_model.Pix2PixModel.net[].parameters", "pix2pix_model.Pix2PixModel.net[].parameters", "list", "pix2pix_model.Pix2PixModel.net[].parameters"], "methods", ["None"], ["", "", "def", "create_optimizers", "(", "self", ",", "opt", ")", ":", "\n", "        ", "G_params", ",", "D_params", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "G_params", "+=", "[", "{", "'params'", ":", "self", ".", "net", "[", "'netG'", "]", ".", "parameters", "(", ")", ",", "'lr'", ":", "opt", ".", "lr", "*", "0.5", "}", "]", "\n", "G_params", "+=", "[", "{", "'params'", ":", "self", ".", "net", "[", "'netCorr'", "]", ".", "parameters", "(", ")", ",", "'lr'", ":", "opt", ".", "lr", "*", "0.5", "}", "]", "\n", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "D_params", "+=", "list", "(", "self", ".", "net", "[", "'netD'", "]", ".", "parameters", "(", ")", ")", "\n", "if", "opt", ".", "weight_domainC", ">", "0", "and", "opt", ".", "domain_rela", ":", "\n", "                ", "D_params", "+=", "list", "(", "self", ".", "net", "[", "'netDomainClassifier'", "]", ".", "parameters", "(", ")", ")", "\n", "\n", "", "", "if", "opt", ".", "no_TTUR", ":", "\n", "            ", "beta1", ",", "beta2", "=", "opt", ".", "beta1", ",", "opt", ".", "beta2", "\n", "G_lr", ",", "D_lr", "=", "opt", ".", "lr", ",", "opt", ".", "lr", "\n", "", "else", ":", "\n", "            ", "beta1", ",", "beta2", "=", "0", ",", "0.9", "\n", "G_lr", ",", "D_lr", "=", "opt", ".", "lr", "/", "2", ",", "opt", ".", "lr", "*", "2", "\n", "\n", "", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "G_params", ",", "lr", "=", "G_lr", ",", "betas", "=", "(", "beta1", ",", "beta2", ")", ",", "eps", "=", "1e-3", ")", "\n", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "D_params", ",", "lr", "=", "D_lr", ",", "betas", "=", "(", "beta1", ",", "beta2", ")", ")", "\n", "return", "optimizer_G", ",", "optimizer_D", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.save": [[115, 121], ["util.save_network", "util.save_network", "util.save_network", "util.save_network"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.save_network", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.save_network", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.save_network", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.save_network"], ["", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "util", ".", "save_network", "(", "self", ".", "net", "[", "'netG'", "]", ",", "'G'", ",", "epoch", ",", "self", ".", "opt", ")", "\n", "util", ".", "save_network", "(", "self", ".", "net", "[", "'netD'", "]", ",", "'D'", ",", "epoch", ",", "self", ".", "opt", ")", "\n", "util", ".", "save_network", "(", "self", ".", "net", "[", "'netCorr'", "]", ",", "'Corr'", ",", "epoch", ",", "self", ".", "opt", ")", "\n", "if", "self", ".", "opt", ".", "weight_domainC", ">", "0", "and", "self", ".", "opt", ".", "domain_rela", ":", "\n", "            ", "util", ".", "save_network", "(", "self", ".", "net", "[", "'netDomainClassifier'", "]", ",", "'DomainClassifier'", ",", "epoch", ",", "self", ".", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.initialize_networks": [[126, 144], ["models.define_G", "models.define_Corr", "models.define_D", "models.define_DomainClassifier", "util.load_network", "util.load_network", "util.load_network", "util.load_network", "util.load_network", "util.load_network"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.define_G", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.define_Corr", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.define_D", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.define_DomainClassifier", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.load_network", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.load_network", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.load_network", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.load_network", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.load_network", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.load_network"], ["", "", "def", "initialize_networks", "(", "self", ",", "opt", ")", ":", "\n", "        ", "net", "=", "{", "}", "\n", "net", "[", "'netG'", "]", "=", "networks", ".", "define_G", "(", "opt", ")", "\n", "net", "[", "'netD'", "]", "=", "networks", ".", "define_D", "(", "opt", ")", "if", "opt", ".", "isTrain", "else", "None", "\n", "net", "[", "'netCorr'", "]", "=", "networks", ".", "define_Corr", "(", "opt", ")", "\n", "net", "[", "'netDomainClassifier'", "]", "=", "networks", ".", "define_DomainClassifier", "(", "opt", ")", "if", "opt", ".", "weight_domainC", ">", "0", "and", "opt", ".", "domain_rela", "else", "None", "\n", "\n", "if", "not", "opt", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "net", "[", "'netG'", "]", "=", "util", ".", "load_network", "(", "net", "[", "'netG'", "]", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "if", "opt", ".", "isTrain", ":", "\n", "                ", "net", "[", "'netD'", "]", "=", "util", ".", "load_network", "(", "net", "[", "'netD'", "]", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "", "net", "[", "'netCorr'", "]", "=", "util", ".", "load_network", "(", "net", "[", "'netCorr'", "]", ",", "'Corr'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "if", "opt", ".", "weight_domainC", ">", "0", "and", "opt", ".", "domain_rela", ":", "\n", "                ", "net", "[", "'netDomainClassifier'", "]", "=", "util", ".", "load_network", "(", "net", "[", "'netDomainClassifier'", "]", ",", "'DomainClassifier'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "", "if", "(", "not", "opt", ".", "isTrain", ")", "and", "opt", ".", "use_ema", ":", "\n", "                ", "net", "[", "'netG'", "]", "=", "util", ".", "load_network", "(", "net", "[", "'netG'", "]", ",", "'G_ema'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "net", "[", "'netCorr'", "]", "=", "util", ".", "load_network", "(", "net", "[", "'netCorr'", "]", ",", "'netCorr_ema'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "", "", "return", "net", "\n", "#return netG_stage1, netD_stage1, netG, netD, netE, netCorr", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.preprocess_input": [[150, 218], ["pix2pix_model.Pix2PixModel.use_gpu", "[].long", "[].long", "pix2pix_model.Pix2PixModel.use_gpu", "data[].long", "data[].cuda", "data[].cuda", "data[].cuda", "data[].cuda", "data[].cuda", "label_map.size", "pix2pix_model.Pix2PixModel.FloatTensor().zero_", "pix2pix_model.Pix2PixModel.scatter_", "pix2pix_model.Pix2PixModel.FloatTensor().zero_", "pix2pix_model.Pix2PixModel.scatter_", "glasses.cuda.cuda.cuda", "glasses_ref.cuda.cuda.cuda", "data[].clone().cuda().float", "data[].clone().cuda().float", "data[].long", "input_semantics[].sum().cpu().item", "ref_semantics[].sum().cpu().item", "data[].clone().cuda().float", "data[].clone().cuda().float", "pix2pix_model.Pix2PixModel.FloatTensor", "pix2pix_model.Pix2PixModel.FloatTensor", "data[].clone().cuda", "data[].clone().cuda", "[].clone().cuda().float", "[].clone().cuda().float", "input_semantics[].sum().cpu", "ref_semantics[].sum().cpu", "data[].clone().cuda", "data[].clone().cuda", "[].clone().cuda().float", "[].clone().cuda().float", "data[].clone", "data[].clone", "[].clone().cuda", "[].clone().cuda", "input_semantics[].sum", "ref_semantics[].sum", "data[].clone", "data[].clone", "[].clone().cuda", "[].clone().cuda", "[].clone", "[].clone", "[].clone", "[].clone"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.use_gpu", "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.use_gpu"], ["", "def", "preprocess_input", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "dataset_mode", "==", "'celebahq'", ":", "\n", "            ", "glasses", "=", "data", "[", "'label'", "]", "[", ":", ",", "1", ":", ":", "2", ",", ":", ",", ":", "]", ".", "long", "(", ")", "\n", "data", "[", "'label'", "]", "=", "data", "[", "'label'", "]", "[", ":", ",", ":", ":", "2", ",", ":", ",", ":", "]", "\n", "glasses_ref", "=", "data", "[", "'label_ref'", "]", "[", ":", ",", "1", ":", ":", "2", ",", ":", ",", ":", "]", ".", "long", "(", ")", "\n", "data", "[", "'label_ref'", "]", "=", "data", "[", "'label_ref'", "]", "[", ":", ",", ":", ":", "2", ",", ":", ",", ":", "]", "\n", "if", "self", ".", "use_gpu", "(", ")", ":", "\n", "                ", "glasses", "=", "glasses", ".", "cuda", "(", ")", "\n", "glasses_ref", "=", "glasses_ref", ".", "cuda", "(", ")", "\n", "", "", "elif", "self", ".", "opt", ".", "dataset_mode", "==", "'celebahqedge'", ":", "\n", "            ", "input_semantics", "=", "data", "[", "'label'", "]", ".", "clone", "(", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "data", "[", "'label'", "]", "=", "data", "[", "'label'", "]", "[", ":", ",", ":", "1", ",", ":", ",", ":", "]", "\n", "ref_semantics", "=", "data", "[", "'label_ref'", "]", ".", "clone", "(", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "data", "[", "'label_ref'", "]", "=", "data", "[", "'label_ref'", "]", "[", ":", ",", ":", "1", ",", ":", ",", ":", "]", "\n", "", "elif", "self", ".", "opt", ".", "dataset_mode", "==", "'deepfashion'", ":", "\n", "            ", "input_semantics", "=", "data", "[", "'label'", "]", ".", "clone", "(", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "data", "[", "'label'", "]", "=", "data", "[", "'label'", "]", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "ref_semantics", "=", "data", "[", "'label_ref'", "]", ".", "clone", "(", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "data", "[", "'label_ref'", "]", "=", "data", "[", "'label_ref'", "]", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "\n", "", "elif", "self", ".", "opt", ".", "dataset_mode", "==", "'ade20klayout'", ":", "\n", "            ", "input_semantics", "=", "data", "[", "'label'", "]", "[", ":", ",", "3", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "data", "[", "'label'", "]", "=", "data", "[", "'label'", "]", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "ref_semantics", "=", "data", "[", "'label_ref'", "]", "[", ":", ",", "3", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "data", "[", "'label_ref'", "]", "=", "data", "[", "'label_ref'", "]", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "\n", "", "elif", "self", ".", "opt", ".", "dataset_mode", "==", "'cocolayout'", ":", "\n", "            ", "input_semantics", "=", "data", "[", "'label'", "]", "[", ":", ",", "3", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "data", "[", "'label'", "]", "=", "data", "[", "'label'", "]", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "ref_semantics", "=", "data", "[", "'label_ref'", "]", "[", ":", ",", "3", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "data", "[", "'label_ref'", "]", "=", "data", "[", "'label_ref'", "]", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "\n", "# move to GPU and change data types", "\n", "", "if", "self", ".", "opt", ".", "dataset_mode", "!=", "'deepfashion'", ":", "\n", "            ", "data", "[", "'label'", "]", "=", "data", "[", "'label'", "]", ".", "long", "(", ")", "\n", "", "if", "self", ".", "use_gpu", "(", ")", ":", "\n", "            ", "data", "[", "'label'", "]", "=", "data", "[", "'label'", "]", ".", "cuda", "(", ")", "\n", "data", "[", "'image'", "]", "=", "data", "[", "'image'", "]", ".", "cuda", "(", ")", "\n", "data", "[", "'ref'", "]", "=", "data", "[", "'ref'", "]", ".", "cuda", "(", ")", "\n", "data", "[", "'label_ref'", "]", "=", "data", "[", "'label_ref'", "]", ".", "cuda", "(", ")", "\n", "if", "self", ".", "opt", ".", "dataset_mode", "!=", "'deepfashion'", ":", "\n", "                ", "data", "[", "'label_ref'", "]", "=", "data", "[", "'label_ref'", "]", ".", "long", "(", ")", "\n", "", "data", "[", "'self_ref'", "]", "=", "data", "[", "'self_ref'", "]", ".", "cuda", "(", ")", "\n", "\n", "# create one-hot label map", "\n", "# if self.opt.dataset_mode != 'celebahqedge' and self.opt.dataset_mode != 'deepfashion':", "\n", "", "if", "self", ".", "opt", ".", "dataset_mode", "==", "'ade20k'", "or", "self", ".", "opt", ".", "dataset_mode", "==", "'coco'", ":", "\n", "            ", "label_map", "=", "data", "[", "'label'", "]", "\n", "bs", ",", "_", ",", "h", ",", "w", "=", "label_map", ".", "size", "(", ")", "\n", "nc", "=", "self", ".", "opt", ".", "label_nc", "+", "1", "if", "self", ".", "opt", ".", "contain_dontcare_label", "else", "self", ".", "opt", ".", "label_nc", "\n", "input_label", "=", "self", ".", "FloatTensor", "(", "bs", ",", "nc", ",", "h", ",", "w", ")", ".", "zero_", "(", ")", "\n", "input_semantics", "=", "input_label", ".", "scatter_", "(", "1", ",", "label_map", ",", "1.0", ")", "\n", "\n", "label_map", "=", "data", "[", "'label_ref'", "]", "\n", "label_ref", "=", "self", ".", "FloatTensor", "(", "bs", ",", "nc", ",", "h", ",", "w", ")", ".", "zero_", "(", ")", "\n", "ref_semantics", "=", "label_ref", ".", "scatter_", "(", "1", ",", "label_map", ",", "1.0", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "dataset_mode", "==", "'celebahq'", ":", "\n", "            ", "assert", "input_semantics", "[", ":", ",", "-", "3", ":", "-", "2", ",", ":", ",", ":", "]", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "==", "0", "\n", "input_semantics", "[", ":", ",", "-", "3", ":", "-", "2", ",", ":", ",", ":", "]", "=", "glasses", "\n", "assert", "ref_semantics", "[", ":", ",", "-", "3", ":", "-", "2", ",", ":", ",", ":", "]", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "==", "0", "\n", "ref_semantics", "[", ":", ",", "-", "3", ":", "-", "2", ",", ":", ",", ":", "]", "=", "glasses_ref", "\n", "\n", "# print (input_semantics.min(), input_semantics.max())", "\n", "# print (1/0)", "\n", "\n", "", "return", "data", "[", "'label'", "]", ",", "input_semantics", ",", "data", "[", "'image'", "]", ",", "data", "[", "'self_ref'", "]", ",", "data", "[", "'ref'", "]", ",", "data", "[", "'label_ref'", "]", ",", "ref_semantics", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.get_ctx_loss": [[219, 227], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "pix2pix_model.Pix2PixModel.contextual_forward_loss", "pix2pix_model.Pix2PixModel.contextual_forward_loss", "pix2pix_model.Pix2PixModel.contextual_forward_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "target[].detach", "target[].detach", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pix2pix_model.Pix2PixModel.contextual_forward_loss", "target[].detach", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "target[].detach"], "methods", ["None"], ["", "def", "get_ctx_loss", "(", "self", ",", "source", ",", "target", ")", ":", "\n", "        ", "contextual_style5_1", "=", "torch", ".", "mean", "(", "self", ".", "contextual_forward_loss", "(", "source", "[", "-", "1", "]", ",", "target", "[", "-", "1", "]", ".", "detach", "(", ")", ")", ")", "*", "8", "\n", "contextual_style4_1", "=", "torch", ".", "mean", "(", "self", ".", "contextual_forward_loss", "(", "source", "[", "-", "2", "]", ",", "target", "[", "-", "2", "]", ".", "detach", "(", ")", ")", ")", "*", "4", "\n", "contextual_style3_1", "=", "torch", ".", "mean", "(", "self", ".", "contextual_forward_loss", "(", "F", ".", "avg_pool2d", "(", "source", "[", "-", "3", "]", ",", "2", ")", ",", "F", ".", "avg_pool2d", "(", "target", "[", "-", "3", "]", ".", "detach", "(", ")", ",", "2", ")", ")", ")", "*", "2", "\n", "if", "self", ".", "opt", ".", "use_22ctx", ":", "\n", "            ", "contextual_style2_1", "=", "torch", ".", "mean", "(", "self", ".", "contextual_forward_loss", "(", "F", ".", "avg_pool2d", "(", "source", "[", "-", "4", "]", ",", "4", ")", ",", "F", ".", "avg_pool2d", "(", "target", "[", "-", "4", "]", ".", "detach", "(", ")", ",", "4", ")", ")", ")", "*", "1", "\n", "return", "contextual_style5_1", "+", "contextual_style4_1", "+", "contextual_style3_1", "+", "contextual_style2_1", "\n", "", "return", "contextual_style5_1", "+", "contextual_style4_1", "+", "contextual_style3_1", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.compute_generator_loss": [[228, 318], ["pix2pix_model.Pix2PixModel.generate_fake", "pix2pix_model.Pix2PixModel.discriminate", "pix2pix_model.Pix2PixModel.vggnet_fix", "range", "util.mse_loss", "pix2pix_model.Pix2PixModel.criterionGAN", "len", "pix2pix_model.Pix2PixModel.FloatTensor().fill_", "range", "len", "[].detach", "torch.interpolate().long().squeeze", "torch.interpolate().long().squeeze", "torch.interpolate().long().squeeze", "torch.interpolate().long().squeeze", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.l1_loss", "torch.l1_loss", "torch.avg_pool2d", "torch.avg_pool2d", "range", "util.weighted_l1_loss", "pix2pix_model.Pix2PixModel.get_ctx_loss", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.cat.append", "torch.cat.append", "torch.interpolate().long().squeeze", "torch.interpolate().long().squeeze", "torch.l1_loss", "torch.l1_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "pix2pix_model.Pix2PixModel.FloatTensor", "len", "pix2pix_model.Pix2PixModel.criterionFeat", "[].detach", "torch.interpolate().long", "torch.interpolate().long", "torch.interpolate().long", "torch.interpolate().long", "torch.ones_like().float.unsqueeze", "torch.ones_like().float.unsqueeze", "torch.l1_loss", "torch.l1_loss", "[].detach", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.interpolate().long", "torch.interpolate().long", "generate_out[].float", "torch.interpolate().long().squeeze.float", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat.sum", "torch.cat.sum", "torch.interpolate().long().squeeze.float", "input_label.float", "torch.interpolate", "torch.interpolate", "input_semantics.float", "torch.nll_loss", "torch.nll_loss", "sum", "torch.log", "torch.log", "torch.log", "torch.log", "sum"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.generate_fake", "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.discriminate", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.mse_loss", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.weighted_l1_loss", "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.get_ctx_loss"], ["", "def", "compute_generator_loss", "(", "self", ",", "input_label", ",", "input_semantics", ",", "real_image", ",", "ref_label", "=", "None", ",", "ref_semantics", "=", "None", ",", "ref_image", "=", "None", ",", "self_ref", "=", "None", ")", ":", "\n", "        ", "G_losses", "=", "{", "}", "\n", "generate_out", "=", "self", ".", "generate_fake", "(", "\n", "input_semantics", ",", "real_image", ",", "ref_semantics", "=", "ref_semantics", ",", "ref_image", "=", "ref_image", ",", "self_ref", "=", "self_ref", ")", "\n", "\n", "# G_losses['loss_ot'] = generate_out['loss_ot']", "\n", "\n", "if", "'loss_novgg_featpair'", "in", "generate_out", "and", "generate_out", "[", "'loss_novgg_featpair'", "]", "is", "not", "None", ":", "\n", "            ", "G_losses", "[", "'no_vgg_feat'", "]", "=", "generate_out", "[", "'loss_novgg_featpair'", "]", "\n", "\n", "", "if", "self", ".", "opt", ".", "warp_cycle_w", ">", "0", ":", "\n", "            ", "if", "not", "self", ".", "opt", ".", "warp_patch", ":", "\n", "                ", "ref", "=", "F", ".", "avg_pool2d", "(", "ref_image", ",", "self", ".", "opt", ".", "warp_stride", ")", "\n", "", "else", ":", "\n", "                ", "ref", "=", "ref_image", "\n", "\n", "", "G_losses", "[", "'G_warp_cycle'", "]", "=", "F", ".", "l1_loss", "(", "generate_out", "[", "'warp_cycle'", "]", ",", "ref", ")", "*", "self", ".", "opt", ".", "warp_cycle_w", "\n", "if", "self", ".", "opt", ".", "two_cycle", ":", "\n", "                ", "real", "=", "F", ".", "avg_pool2d", "(", "real_image", ",", "self", ".", "opt", ".", "warp_stride", ")", "\n", "G_losses", "[", "'G_warp_cycle'", "]", "+=", "F", ".", "l1_loss", "(", "generate_out", "[", "'warp_i2r2i'", "]", ",", "real", ")", "*", "self", ".", "opt", ".", "warp_cycle_w", "\n", "\n", "", "", "if", "self", ".", "opt", ".", "warp_self_w", ">", "0", ":", "\n", "            ", "sample_weights", "=", "(", "self_ref", "[", ":", ",", "0", ",", "0", ",", "0", "]", "/", "(", "sum", "(", "self_ref", "[", ":", ",", "0", ",", "0", ",", "0", "]", ")", "+", "1e-5", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "G_losses", "[", "'G_warp_self'", "]", "=", "(", "torch", ".", "mean", "(", "F", ".", "l1_loss", "(", "generate_out", "[", "'warp64'", "]", ",", "real_image", ",", "reduce", "=", "False", ")", "*", "sample_weights", ")", "+", "\n", "(", "torch", ".", "mean", "(", "F", ".", "l1_loss", "(", "generate_out", "[", "'warp128'", "]", ",", "real_image", ",", "reduce", "=", "False", ")", "*", "sample_weights", ")", ")", ")", "*", "self", ".", "opt", ".", "warp_self_w", "\n", "\n", "\n", "", "pred_fake", ",", "pred_real", ",", "seg", ",", "fake_cam_logit", ",", "real_cam_logit", "=", "self", ".", "discriminate", "(", "\n", "input_semantics", ",", "generate_out", "[", "'fake_image'", "]", ",", "real_image", ",", "ref_image", ")", "\n", "\n", "G_losses", "[", "'GAN'", "]", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ",", "\n", "for_discriminator", "=", "False", ")", "*", "self", ".", "opt", ".", "weight_gan", "\n", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "num_D", "=", "len", "(", "pred_fake", ")", "\n", "GAN_Feat_loss", "=", "self", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "# for each discriminator", "\n", "# last output is the final prediction, so we exclude it", "\n", "                ", "num_intermediate_outputs", "=", "len", "(", "pred_fake", "[", "i", "]", ")", "-", "1", "\n", "for", "j", "in", "range", "(", "num_intermediate_outputs", ")", ":", "# for each layer output", "\n", "                    ", "unweighted_loss", "=", "self", ".", "criterionFeat", "(", "\n", "pred_fake", "[", "i", "]", "[", "j", "]", ",", "pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "\n", "GAN_Feat_loss", "+=", "unweighted_loss", "*", "self", ".", "opt", ".", "lambda_feat", "/", "num_D", "\n", "", "", "G_losses", "[", "'GAN_Feat'", "]", "=", "GAN_Feat_loss", "\n", "\n", "", "fake_features", "=", "self", ".", "vggnet_fix", "(", "generate_out", "[", "'fake_image'", "]", ",", "[", "'r12'", ",", "'r22'", ",", "'r32'", ",", "'r42'", ",", "'r52'", "]", ",", "preprocess", "=", "True", ")", "\n", "sample_weights", "=", "(", "self_ref", "[", ":", ",", "0", ",", "0", ",", "0", "]", "/", "(", "sum", "(", "self_ref", "[", ":", ",", "0", ",", "0", ",", "0", "]", ")", "+", "1e-5", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "generate_out", "[", "'real_features'", "]", ")", ")", ":", "\n", "            ", "loss", "+=", "weights", "[", "i", "]", "*", "util", ".", "weighted_l1_loss", "(", "fake_features", "[", "i", "]", ",", "generate_out", "[", "'real_features'", "]", "[", "i", "]", ".", "detach", "(", ")", ",", "sample_weights", ")", "\n", "", "G_losses", "[", "'fm'", "]", "=", "loss", "*", "self", ".", "opt", ".", "lambda_vgg", "*", "self", ".", "opt", ".", "fm_ratio", "\n", "\n", "feat_loss", "=", "util", ".", "mse_loss", "(", "fake_features", "[", "self", ".", "perceptual_layer", "]", ",", "generate_out", "[", "'real_features'", "]", "[", "self", ".", "perceptual_layer", "]", ".", "detach", "(", ")", ")", "\n", "G_losses", "[", "'perc'", "]", "=", "feat_loss", "*", "self", ".", "opt", ".", "weight_perceptual", "\n", "\n", "G_losses", "[", "'contextual'", "]", "=", "self", ".", "get_ctx_loss", "(", "fake_features", ",", "generate_out", "[", "'ref_features'", "]", ")", "*", "self", ".", "opt", ".", "lambda_vgg", "*", "self", ".", "opt", ".", "ctx_w", "\n", "\n", "if", "self", ".", "opt", ".", "warp_mask_losstype", "!=", "'none'", ":", "\n", "            ", "ref_label", "=", "F", ".", "interpolate", "(", "ref_label", ".", "float", "(", ")", ",", "scale_factor", "=", "1", "/", "self", ".", "opt", ".", "warp_stride", ",", "mode", "=", "'nearest'", ")", ".", "long", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "gt_label", "=", "F", ".", "interpolate", "(", "input_label", ".", "float", "(", ")", ",", "scale_factor", "=", "1", "/", "self", ".", "opt", ".", "warp_stride", ",", "mode", "=", "'nearest'", ")", ".", "long", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "weights", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ref_label", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "ref_label_uniq", "=", "torch", ".", "unique", "(", "ref_label", "[", "i", "]", ")", "\n", "gt_label_uniq", "=", "torch", ".", "unique", "(", "gt_label", "[", "i", "]", ")", "\n", "zero_label", "=", "[", "it", "for", "it", "in", "gt_label_uniq", "if", "it", "not", "in", "ref_label_uniq", "]", "\n", "weight", "=", "torch", ".", "ones_like", "(", "gt_label", "[", "i", "]", ")", ".", "float", "(", ")", "\n", "for", "j", "in", "zero_label", ":", "\n", "                    ", "weight", "[", "gt_label", "[", "i", "]", "==", "j", "]", "=", "0", "\n", "", "weight", "[", "gt_label", "[", "i", "]", "==", "0", "]", "=", "0", "#no loss from unknown class", "\n", "weights", ".", "append", "(", "weight", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "weights", "=", "torch", ".", "cat", "(", "weights", ",", "dim", "=", "0", ")", "\n", "\n", "# print (generate_out['warp_mask'].min(), generate_out['warp_mask'].max())", "\n", "# print (input_semantics.min(), input_semantics.max())", "\n", "\n", "if", "self", ".", "opt", ".", "dataset_mode", "==", "'ade20klayout'", "or", "'cocolayout'", ":", "\n", "                ", "gt_label", "=", "F", ".", "interpolate", "(", "input_semantics", ".", "float", "(", ")", ",", "scale_factor", "=", "1", "/", "self", ".", "opt", ".", "warp_stride", ",", "\n", "mode", "=", "'nearest'", ")", ".", "long", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "# G_losses['mask'] = util.mse_loss(generate_out['warp_mask'].float(), gt_label.float()) * 200", "\n", "G_losses", "[", "'mask'", "]", "=", "F", ".", "l1_loss", "(", "generate_out", "[", "'warp_mask'", "]", ".", "float", "(", ")", ",", "gt_label", ".", "float", "(", ")", ")", "*", "500", "\n", "", "else", ":", "\n", "                ", "G_losses", "[", "'mask'", "]", "=", "(", "F", ".", "nll_loss", "(", "torch", ".", "log", "(", "generate_out", "[", "'warp_mask'", "]", "+", "1e-10", ")", ",", "gt_label", ",", "reduce", "=", "False", ")", "\n", "*", "weights", ")", ".", "sum", "(", ")", "/", "(", "weights", ".", "sum", "(", ")", "+", "1e-5", ")", "*", "self", ".", "opt", ".", "weight_mask", "\n", "\n", "# print (G_losses['mask'])", "\n", "# print (1/0)", "\n", "#self.fake_image = fake_image", "\n", "", "", "return", "G_losses", ",", "generate_out", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.compute_discriminator_loss": [[319, 335], ["pix2pix_model.Pix2PixModel.discriminate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "GforD[].detach", "GforD[].detach.requires_grad_", "pix2pix_model.Pix2PixModel.criterionGAN", "pix2pix_model.Pix2PixModel.criterionGAN"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.discriminate"], ["", "def", "compute_discriminator_loss", "(", "self", ",", "input_semantics", ",", "real_image", ",", "ref_image", ",", "GforD", ",", "label", "=", "None", ")", ":", "\n", "        ", "D_losses", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "#fake_image, _, _, _, _ = self.generate_fake(input_semantics, real_image, VGG_feat=False)", "\n", "            ", "fake_image", "=", "GforD", "[", "'fake_image'", "]", ".", "detach", "(", ")", "\n", "fake_image", ".", "requires_grad_", "(", ")", "\n", "\n", "", "pred_fake", ",", "pred_real", ",", "seg", ",", "fake_cam_logit", ",", "real_cam_logit", "=", "self", ".", "discriminate", "(", "\n", "input_semantics", ",", "fake_image", ",", "real_image", ",", "ref_image", ")", "\n", "\n", "D_losses", "[", "'D_Fake'", "]", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ",", "\n", "for_discriminator", "=", "True", ")", "*", "self", ".", "opt", ".", "weight_gan", "\n", "D_losses", "[", "'D_real'", "]", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ",", "\n", "for_discriminator", "=", "True", ")", "*", "self", ".", "opt", ".", "weight_gan", "\n", "\n", "return", "D_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.encode_z": [[336, 340], ["pix2pix_model.Pix2PixModel.reparameterize"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.reparameterize"], ["", "def", "encode_z", "(", "self", ",", "real_image", ")", ":", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "net", "[", "'netE'", "]", "(", "real_image", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "return", "z", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.generate_fake": [[341, 354], ["pix2pix_model.Pix2PixModel.vggnet_fix", "pix2pix_model.Pix2PixModel.vggnet_fix"], "methods", ["None"], ["", "def", "generate_fake", "(", "self", ",", "input_semantics", ",", "real_image", ",", "ref_semantics", "=", "None", ",", "ref_image", "=", "None", ",", "self_ref", "=", "None", ")", ":", "\n", "        ", "generate_out", "=", "{", "}", "\n", "ref_relu1_1", ",", "ref_relu2_1", ",", "ref_relu3_1", ",", "ref_relu4_1", ",", "ref_relu5_1", "=", "self", ".", "vggnet_fix", "(", "ref_image", ",", "[", "'r12'", ",", "'r22'", ",", "'r32'", ",", "'r42'", ",", "'r52'", "]", ",", "preprocess", "=", "True", ")", "\n", "\n", "coor_out", "=", "self", ".", "net", "[", "'netCorr'", "]", "(", "ref_image", ",", "real_image", ",", "input_semantics", ",", "ref_semantics", ")", "\n", "\n", "generate_out", "[", "'ref_features'", "]", "=", "[", "ref_relu1_1", ",", "ref_relu2_1", ",", "ref_relu3_1", ",", "ref_relu4_1", ",", "ref_relu5_1", "]", "\n", "generate_out", "[", "'real_features'", "]", "=", "self", ".", "vggnet_fix", "(", "real_image", ",", "[", "'r12'", ",", "'r22'", ",", "'r32'", ",", "'r42'", ",", "'r52'", "]", ",", "preprocess", "=", "True", ")", "\n", "\n", "generate_out", "[", "'fake_image'", "]", "=", "self", ".", "net", "[", "'netG'", "]", "(", "warp_out", "=", "coor_out", "[", "'warp_out'", "]", ")", "\n", "\n", "generate_out", "=", "{", "**", "generate_out", ",", "**", "coor_out", "}", "\n", "return", "generate_out", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.inference": [[355, 362], ["None"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "input_semantics", ",", "ref_semantics", "=", "None", ",", "ref_image", "=", "None", ",", "self_ref", "=", "None", ")", ":", "\n", "        ", "generate_out", "=", "{", "}", "\n", "coor_out", "=", "self", ".", "net", "[", "'netCorr'", "]", "(", "ref_image", ",", "None", ",", "input_semantics", ",", "ref_semantics", ")", "\n", "# atten_map = coor_out['atten_map']", "\n", "generate_out", "[", "'fake_image'", "]", "=", "self", ".", "net", "[", "'netG'", "]", "(", "warp_out", "=", "coor_out", "[", "'warp_out'", "]", ")", "\n", "generate_out", "=", "{", "**", "generate_out", ",", "**", "coor_out", "}", "\n", "return", "generate_out", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.discriminate": [[366, 386], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pix2pix_model.Pix2PixModel.divide_pred", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.divide_pred"], ["", "def", "discriminate", "(", "self", ",", "input_semantics", ",", "fake_image", ",", "real_image", ",", "ref_image", ")", ":", "\n", "        ", "fake_concat", "=", "torch", ".", "cat", "(", "[", "input_semantics", ",", "fake_image", "]", ",", "dim", "=", "1", ")", "\n", "real_concat", "=", "torch", ".", "cat", "(", "[", "input_semantics", ",", "real_image", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# In Batch Normalization, the fake and real images are", "\n", "# recommended to be in the same batch to avoid disparate", "\n", "# statistics in fake and real images.", "\n", "# So both fake and real images are fed to D all at once.", "\n", "fake_and_real", "=", "torch", ".", "cat", "(", "[", "fake_concat", ",", "real_concat", "]", ",", "dim", "=", "0", ")", "\n", "seg", "=", "None", "\n", "discriminator_out", ",", "seg", ",", "cam_logit", "=", "self", ".", "net", "[", "'netD'", "]", "(", "fake_and_real", ")", "\n", "\n", "pred_fake", ",", "pred_real", "=", "self", ".", "divide_pred", "(", "discriminator_out", ")", "\n", "fake_cam_logit", ",", "real_cam_logit", "=", "None", ",", "None", "\n", "if", "self", ".", "opt", ".", "D_cam", ">", "0", ":", "\n", "            ", "fake_cam_logit", "=", "torch", ".", "cat", "(", "[", "it", "[", ":", "it", ".", "shape", "[", "0", "]", "//", "2", "]", "for", "it", "in", "cam_logit", "]", ",", "dim", "=", "1", ")", "\n", "real_cam_logit", "=", "torch", ".", "cat", "(", "[", "it", "[", "it", ".", "shape", "[", "0", "]", "//", "2", ":", "]", "for", "it", "in", "cam_logit", "]", ",", "dim", "=", "1", ")", "\n", "#fake_cam_logit, real_cam_logit = self.divide_pred(cam_logit)", "\n", "\n", "", "return", "pred_fake", ",", "pred_real", ",", "seg", ",", "fake_cam_logit", ",", "real_cam_logit", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.divide_pred": [[388, 402], ["type", "fake.append", "real.append", "pred.size", "pred.size", "tensor.size", "tensor.size"], "methods", ["None"], ["", "def", "divide_pred", "(", "self", ",", "pred", ")", ":", "\n", "# the prediction contains the intermediate outputs of multiscale GAN,", "\n", "# so it's usually a list", "\n", "        ", "if", "type", "(", "pred", ")", "==", "list", ":", "\n", "            ", "fake", "=", "[", "]", "\n", "real", "=", "[", "]", "\n", "for", "p", "in", "pred", ":", "\n", "                ", "fake", ".", "append", "(", "[", "tensor", "[", ":", "tensor", ".", "size", "(", "0", ")", "//", "2", "]", "for", "tensor", "in", "p", "]", ")", "\n", "real", ".", "append", "(", "[", "tensor", "[", "tensor", ".", "size", "(", "0", ")", "//", "2", ":", "]", "for", "tensor", "in", "p", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "fake", "=", "pred", "[", ":", "pred", ".", "size", "(", "0", ")", "//", "2", "]", "\n", "real", "=", "pred", "[", "pred", ".", "size", "(", "0", ")", "//", "2", ":", "]", "\n", "\n", "", "return", "fake", ",", "real", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.get_edges": [[403, 410], ["pix2pix_model.Pix2PixModel.ByteTensor().zero_", "pix2pix_model.Pix2PixModel.float", "pix2pix_model.Pix2PixModel.ByteTensor", "t.size"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "self", ".", "ByteTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "return", "edge", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.reparameterize": [[411, 415], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like.mul", "torch.randn_like.mul"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", "+", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.use_gpu": [[416, 418], ["len"], "methods", ["None"], ["", "def", "use_gpu", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.compute_D_seg_loss": [[419, 430], ["pix2pix_model.Pix2PixModel.divide_pred", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.interpolate().squeeze().long", "torch.interpolate().squeeze().long", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "torch.interpolate", "torch.interpolate", "gt.unsqueeze().float", "gt.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.models.pix2pix_model.Pix2PixModel.divide_pred"], ["", "def", "compute_D_seg_loss", "(", "self", ",", "out", ",", "gt", ")", ":", "\n", "        ", "fake_seg", ",", "real_seg", "=", "self", ".", "divide_pred", "(", "[", "out", "]", ")", "\n", "fake_seg_loss", "=", "F", ".", "cross_entropy", "(", "fake_seg", "[", "0", "]", "[", "0", "]", ",", "gt", ")", "\n", "real_seg_loss", "=", "F", ".", "cross_entropy", "(", "real_seg", "[", "0", "]", "[", "0", "]", ",", "gt", ")", "\n", "\n", "down_gt", "=", "F", ".", "interpolate", "(", "gt", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ",", "scale_factor", "=", "0.5", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", ")", ".", "long", "(", ")", "\n", "fake_seg_loss_down", "=", "F", ".", "cross_entropy", "(", "fake_seg", "[", "0", "]", "[", "1", "]", ",", "down_gt", ")", "\n", "real_seg_loss_down", "=", "F", ".", "cross_entropy", "(", "real_seg", "[", "0", "]", "[", "1", "]", ",", "down_gt", ")", "\n", "\n", "seg_loss", "=", "fake_seg_loss", "+", "real_seg_loss", "+", "fake_seg_loss_down", "+", "real_seg_loss_down", "\n", "return", "seg_loss", "", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.discriminator.MultiscaleDiscriminator.modify_commandline_options": [[17, 31], ["parser.add_argument", "parser.add_argument", "parser.parse_known_args", "util.find_class_in_module", "util.find_class_in_module.modify_commandline_options"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.find_class_in_module", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.BaseDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--netD_subarch'", ",", "type", "=", "str", ",", "default", "=", "'n_layer'", ",", "\n", "help", "=", "'architecture of each discriminator'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_D'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'number of discriminators to be used in multiscale'", ")", "\n", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# define properties of each discriminator of the multiscale discriminator", "\n", "subnetD", "=", "util", ".", "find_class_in_module", "(", "opt", ".", "netD_subarch", "+", "'discriminator'", ",", "\n", "'models.networks.discriminator'", ")", "\n", "subnetD", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.discriminator.MultiscaleDiscriminator.__init__": [[32, 40], ["models.networks.base_network.BaseNetwork.__init__", "range", "discriminator.MultiscaleDiscriminator.create_single_discriminator", "discriminator.MultiscaleDiscriminator.add_module"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.discriminator.MultiscaleDiscriminator.create_single_discriminator"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "stage1", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "stage1", "=", "stage1", "\n", "\n", "for", "i", "in", "range", "(", "opt", ".", "num_D", ")", ":", "\n", "            ", "subnetD", "=", "self", ".", "create_single_discriminator", "(", "opt", ")", "\n", "self", ".", "add_module", "(", "'discriminator_%d'", "%", "i", ",", "subnetD", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.discriminator.MultiscaleDiscriminator.create_single_discriminator": [[41, 48], ["discriminator.NLayerDiscriminator", "ValueError"], "methods", ["None"], ["", "", "def", "create_single_discriminator", "(", "self", ",", "opt", ")", ":", "\n", "        ", "subarch", "=", "opt", ".", "netD_subarch", "\n", "if", "subarch", "==", "'n_layer'", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "opt", ",", "stage1", "=", "self", ".", "stage1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'unrecognized discriminator subarchitecture %s'", "%", "subarch", ")", "\n", "", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.discriminator.MultiscaleDiscriminator.downsample": [[49, 53], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "downsample", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "F", ".", "avg_pool2d", "(", "input", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.discriminator.MultiscaleDiscriminator.forward": [[56, 70], ["discriminator.MultiscaleDiscriminator.named_children", "D", "cam_logits.append", "result.append", "discriminator.MultiscaleDiscriminator.downsample"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.discriminator.MultiscaleDiscriminator.downsample"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "segs", "=", "[", "]", "\n", "cam_logits", "=", "[", "]", "\n", "get_intermediate_features", "=", "not", "self", ".", "opt", ".", "no_ganFeat_loss", "\n", "for", "name", ",", "D", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "out", ",", "cam_logit", "=", "D", "(", "input", ")", "\n", "cam_logits", ".", "append", "(", "cam_logit", ")", "\n", "if", "not", "get_intermediate_features", ":", "\n", "                ", "out", "=", "[", "out", "]", "\n", "", "result", ".", "append", "(", "out", ")", "\n", "input", "=", "self", ".", "downsample", "(", "input", ")", "\n", "\n", "", "return", "result", ",", "segs", ",", "cam_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.discriminator.NLayerDiscriminator.modify_commandline_options": [[74, 79], ["parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'# layers in each discriminator'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.discriminator.NLayerDiscriminator.__init__": [[80, 132], ["models.networks.base_network.BaseNetwork.__init__", "int", "models.networks.normalization.get_nonspade_norm_layer", "range", "range", "min", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "len", "discriminator.NLayerDiscriminator.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.networks.architecture.Attention", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.normalization.equal_lr", "models.networks.normalization.equal_lr", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.utils.spectral_norm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "str", "torch.Upsample", "torch.Upsample", "torch.Upsample", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.get_nonspade_norm_layer", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.equal_lr", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.equal_lr"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "stage1", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "stage1", "=", "stage1", "\n", "\n", "kw", "=", "4", "\n", "#padw = int(np.ceil((kw - 1.0) / 2))", "\n", "padw", "=", "int", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", "\n", "nf", "=", "opt", ".", "ndf", "\n", "# input_nc = self.compute_D_input_nc(opt)", "\n", "input_nc", "=", "opt", ".", "semantic_nc", "+", "3", "\n", "\n", "norm_layer", "=", "get_nonspade_norm_layer", "(", "opt", ",", "opt", ".", "norm_D", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", "]", "]", "\n", "\n", "for", "n", "in", "range", "(", "1", ",", "opt", ".", "n_layers_D", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "stride", "=", "1", "if", "n", "==", "opt", ".", "n_layers_D", "-", "1", "else", "2", "\n", "if", "(", "(", "(", "not", "stage1", ")", "and", "opt", ".", "use_attention", ")", "or", "(", "stage1", "and", "opt", ".", "use_attention_st1", ")", ")", "and", "n", "==", "opt", ".", "n_layers_D", "-", "1", ":", "\n", "                ", "self", ".", "attn", "=", "Attention", "(", "nf_prev", ",", "'spectral'", "in", "opt", ".", "norm_D", ")", "\n", "", "if", "n", "==", "opt", ".", "n_layers_D", "-", "1", "and", "(", "not", "stage1", ")", ":", "\n", "                ", "dec", "=", "[", "]", "\n", "nc_dec", "=", "nf_prev", "\n", "for", "_", "in", "range", "(", "opt", ".", "n_layers_D", "-", "1", ")", ":", "\n", "                    ", "dec", "+=", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nc_dec", ",", "int", "(", "nc_dec", "//", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", "]", "\n", "nc_dec", "=", "int", "(", "nc_dec", "//", "2", ")", "\n", "", "dec", "+=", "[", "nn", ".", "Conv2d", "(", "nc_dec", ",", "opt", ".", "semantic_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "]", "\n", "self", ".", "dec", "=", "nn", ".", "Sequential", "(", "*", "dec", ")", "\n", "", "sequence", "+=", "[", "[", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padw", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", "\n", "]", "]", "\n", "", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "if", "opt", ".", "D_cam", ">", "0", ":", "\n", "            ", "mult", "=", "min", "(", "2", "**", "(", "opt", ".", "n_layers_D", "-", "1", ")", ",", "8", ")", "\n", "if", "opt", ".", "eqlr_sn", ":", "\n", "                ", "self", ".", "gap_fc", "=", "equal_lr", "(", "nn", ".", "Linear", "(", "opt", ".", "ndf", "*", "mult", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "gmp_fc", "=", "equal_lr", "(", "nn", ".", "Linear", "(", "opt", ".", "ndf", "*", "mult", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "gap_fc", "=", "nn", ".", "utils", ".", "spectral_norm", "(", "nn", ".", "Linear", "(", "opt", ".", "ndf", "*", "mult", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "gmp_fc", "=", "nn", ".", "utils", ".", "spectral_norm", "(", "nn", ".", "Linear", "(", "opt", ".", "ndf", "*", "mult", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "self", ".", "conv1x1", "=", "nn", ".", "Conv2d", "(", "opt", ".", "ndf", "*", "mult", "*", "2", ",", "opt", ".", "ndf", "*", "mult", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "\n", "# We divide the layers into groups to extract intermediate layer outputs", "\n", "", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.discriminator.NLayerDiscriminator.compute_D_input_nc": [[133, 138], ["None"], "methods", ["None"], ["", "", "def", "compute_D_input_nc", "(", "self", ",", "opt", ")", ":", "\n", "        ", "input_nc", "=", "opt", ".", "label_nc", "+", "opt", ".", "output_nc", "\n", "if", "opt", ".", "contain_dontcare_label", ":", "\n", "            ", "input_nc", "+=", "1", "\n", "", "return", "input_nc", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.discriminator.NLayerDiscriminator.forward": [[139, 183], ["discriminator.NLayerDiscriminator.named_children", "submodel", "results.append", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "discriminator.NLayerDiscriminator.gap_fc", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "discriminator.NLayerDiscriminator.gmp_fc", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "discriminator.NLayerDiscriminator.leaky_relu", "discriminator.NLayerDiscriminator.attn", "torch.adaptive_avg_pool2d.view", "list", "gap_weight.unsqueeze().unsqueeze", "torch.adaptive_max_pool2d.view", "list", "gmp_weight.unsqueeze().unsqueeze", "discriminator.NLayerDiscriminator.conv1x1", "discriminator.NLayerDiscriminator.gap_fc.parameters", "discriminator.NLayerDiscriminator.gmp_fc.parameters", "gap_weight.unsqueeze", "gmp_weight.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "results", "=", "[", "input", "]", "\n", "seg", "=", "None", "\n", "cam_logit", "=", "None", "\n", "for", "name", ",", "submodel", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "'model'", "not", "in", "name", ":", "\n", "                ", "continue", "\n", "", "if", "name", "==", "'model3'", ":", "\n", "                ", "if", "(", "(", "not", "self", ".", "stage1", ")", "and", "self", ".", "opt", ".", "use_attention", ")", "or", "(", "self", ".", "stage1", "and", "self", ".", "opt", ".", "use_attention_st1", ")", ":", "\n", "                    ", "x", "=", "self", ".", "attn", "(", "results", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "results", "[", "-", "1", "]", "\n", "", "", "else", ":", "\n", "                ", "x", "=", "results", "[", "-", "1", "]", "\n", "", "intermediate_output", "=", "submodel", "(", "x", ")", "\n", "if", "self", ".", "opt", ".", "D_cam", ">", "0", "and", "name", "==", "'model3'", ":", "\n", "                ", "gap", "=", "F", ".", "adaptive_avg_pool2d", "(", "intermediate_output", ",", "1", ")", "\n", "gap_logit", "=", "self", ".", "gap_fc", "(", "gap", ".", "view", "(", "intermediate_output", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "gap_weight", "=", "list", "(", "self", ".", "gap_fc", ".", "parameters", "(", ")", ")", "[", "0", "]", "\n", "gap", "=", "intermediate_output", "*", "gap_weight", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "gmp", "=", "F", ".", "adaptive_max_pool2d", "(", "intermediate_output", ",", "1", ")", "\n", "gmp_logit", "=", "self", ".", "gmp_fc", "(", "gmp", ".", "view", "(", "intermediate_output", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "gmp_weight", "=", "list", "(", "self", ".", "gmp_fc", ".", "parameters", "(", ")", ")", "[", "0", "]", "\n", "gmp", "=", "intermediate_output", "*", "gmp_weight", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "cam_logit", "=", "torch", ".", "cat", "(", "[", "gap_logit", ",", "gmp_logit", "]", ",", "1", ")", "\n", "intermediate_output", "=", "torch", ".", "cat", "(", "[", "gap", ",", "gmp", "]", ",", "1", ")", "\n", "intermediate_output", "=", "self", ".", "leaky_relu", "(", "self", ".", "conv1x1", "(", "intermediate_output", ")", ")", "\n", "", "results", ".", "append", "(", "intermediate_output", ")", "\n", "\n", "# print('********')", "\n", "# print(x.shape)", "\n", "# print(1 / 0)", "\n", "\n", "", "get_intermediate_features", "=", "not", "self", ".", "opt", ".", "no_ganFeat_loss", "\n", "if", "get_intermediate_features", ":", "\n", "            ", "retu", "=", "results", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "retu", "=", "results", "[", "-", "1", "]", "\n", "", "if", "seg", "is", "None", ":", "\n", "            ", "return", "retu", ",", "cam_logit", "\n", "", "else", ":", "\n", "            ", "return", "retu", ",", "seg", ",", "cam_logit", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.correspondence.ResidualBlock.__init__": [[17, 26], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "padding1", "=", "nn", ".", "ReflectionPad2d", "(", "padding", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "0", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm2d", "(", "out_channels", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "padding2", "=", "nn", ".", "ReflectionPad2d", "(", "padding", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "0", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "InstanceNorm2d", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.correspondence.ResidualBlock.forward": [[27, 39], ["correspondence.ResidualBlock.padding1", "correspondence.ResidualBlock.conv1", "correspondence.ResidualBlock.bn1", "correspondence.ResidualBlock.prelu", "correspondence.ResidualBlock.padding2", "correspondence.ResidualBlock.conv2", "correspondence.ResidualBlock.bn2", "correspondence.ResidualBlock.prelu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "padding1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "prelu", "(", "out", ")", "\n", "out", "=", "self", ".", "padding2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "prelu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.correspondence.WTA_scale.forward": [[47, 62], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "ctx.save_for_backward"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "scale", "=", "1e-4", ")", ":", "\n", "        ", "\"\"\"\n    In the forward pass we receive a Tensor containing the input and return a\n    Tensor containing the output. You can cache arbitrary Tensors for use in the\n    backward pass using the save_for_backward method.\n    \"\"\"", "\n", "activation_max", ",", "index_max", "=", "torch", ".", "max", "(", "input", ",", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "input_scale", "=", "input", "*", "scale", "# default: 1e-4", "\n", "# input_scale = input * scale  # default: 1e-4", "\n", "output_max_scale", "=", "torch", ".", "where", "(", "input", "==", "activation_max", ",", "input", ",", "input_scale", ")", "\n", "\n", "mask", "=", "(", "input", "==", "activation_max", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "mask", ")", "\n", "return", "output_max_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.correspondence.WTA_scale.backward": [[63, 80], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "grad_output.clone"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "\"\"\"\n    In the backward pass we receive a Tensor containing the gradient of the loss\n    with respect to the output, and we need to compute the gradient of the loss\n    with respect to the input.\n    \"\"\"", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "input", ",", "mask", "=", "ctx", ".", "saved_tensors", "\n", "mask_ones", "=", "torch", ".", "ones_like", "(", "mask", ")", "\n", "mask_small_ones", "=", "torch", ".", "ones_like", "(", "mask", ")", "*", "1e-4", "\n", "# mask_small_ones = torch.ones_like(mask) * 1e-4", "\n", "\n", "grad_scale", "=", "torch", ".", "where", "(", "mask", "==", "1", ",", "mask_ones", ",", "mask_small_ones", ")", "\n", "grad_input", "=", "grad_output", ".", "clone", "(", ")", "*", "grad_scale", "\n", "return", "grad_input", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.correspondence.VGG19_feature_color_torchversion.__init__": [[87, 119], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "pool", "=", "'max'", ",", "vgg_normal_correct", "=", "False", ",", "ic", "=", "3", ")", ":", "\n", "        ", "super", "(", "VGG19_feature_color_torchversion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg_normal_correct", "=", "vgg_normal_correct", "\n", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "ic", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_4", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_4", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_1", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_4", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "pool", "==", "'max'", ":", "\n", "            ", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "elif", "pool", "==", "'avg'", ":", "\n", "            ", "self", ".", "pool1", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pool5", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.correspondence.VGG19_feature_color_torchversion.forward": [[120, 149], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "correspondence.VGG19_feature_color_torchversion.pool1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "correspondence.VGG19_feature_color_torchversion.pool2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "correspondence.VGG19_feature_color_torchversion.pool3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "correspondence.VGG19_feature_color_torchversion.pool4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "correspondence.VGG19_feature_color_torchversion.pool5", "util.util.vgg_preprocess", "correspondence.VGG19_feature_color_torchversion.conv1_1", "correspondence.VGG19_feature_color_torchversion.conv1_2", "correspondence.VGG19_feature_color_torchversion.conv2_1", "correspondence.VGG19_feature_color_torchversion.conv2_2", "correspondence.VGG19_feature_color_torchversion.conv3_1", "correspondence.VGG19_feature_color_torchversion.conv3_2", "correspondence.VGG19_feature_color_torchversion.conv3_3", "correspondence.VGG19_feature_color_torchversion.conv3_4", "correspondence.VGG19_feature_color_torchversion.conv4_1", "correspondence.VGG19_feature_color_torchversion.conv4_2", "correspondence.VGG19_feature_color_torchversion.conv4_3", "correspondence.VGG19_feature_color_torchversion.conv4_4", "correspondence.VGG19_feature_color_torchversion.conv5_1", "correspondence.VGG19_feature_color_torchversion.conv5_2", "correspondence.VGG19_feature_color_torchversion.conv5_3", "correspondence.VGG19_feature_color_torchversion.conv5_4"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.vgg_preprocess"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "out_keys", ",", "preprocess", "=", "True", ")", ":", "\n", "        ", "''' \n        NOTE: input tensor should range in [0,1]\n        '''", "\n", "out", "=", "{", "}", "\n", "if", "preprocess", ":", "\n", "            ", "x", "=", "vgg_preprocess", "(", "x", ",", "vgg_normal_correct", "=", "self", ".", "vgg_normal_correct", ")", "\n", "", "out", "[", "'r11'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv1_1", "(", "x", ")", ")", "\n", "out", "[", "'r12'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv1_2", "(", "out", "[", "'r11'", "]", ")", ")", "\n", "out", "[", "'p1'", "]", "=", "self", ".", "pool1", "(", "out", "[", "'r12'", "]", ")", "\n", "out", "[", "'r21'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv2_1", "(", "out", "[", "'p1'", "]", ")", ")", "\n", "out", "[", "'r22'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv2_2", "(", "out", "[", "'r21'", "]", ")", ")", "\n", "out", "[", "'p2'", "]", "=", "self", ".", "pool2", "(", "out", "[", "'r22'", "]", ")", "\n", "out", "[", "'r31'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_1", "(", "out", "[", "'p2'", "]", ")", ")", "\n", "out", "[", "'r32'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_2", "(", "out", "[", "'r31'", "]", ")", ")", "\n", "out", "[", "'r33'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_3", "(", "out", "[", "'r32'", "]", ")", ")", "\n", "out", "[", "'r34'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv3_4", "(", "out", "[", "'r33'", "]", ")", ")", "\n", "out", "[", "'p3'", "]", "=", "self", ".", "pool3", "(", "out", "[", "'r34'", "]", ")", "\n", "out", "[", "'r41'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_1", "(", "out", "[", "'p3'", "]", ")", ")", "\n", "out", "[", "'r42'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_2", "(", "out", "[", "'r41'", "]", ")", ")", "\n", "out", "[", "'r43'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_3", "(", "out", "[", "'r42'", "]", ")", ")", "\n", "out", "[", "'r44'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv4_4", "(", "out", "[", "'r43'", "]", ")", ")", "\n", "out", "[", "'p4'", "]", "=", "self", ".", "pool4", "(", "out", "[", "'r44'", "]", ")", "\n", "out", "[", "'r51'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_1", "(", "out", "[", "'p4'", "]", ")", ")", "\n", "out", "[", "'r52'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_2", "(", "out", "[", "'r51'", "]", ")", ")", "\n", "out", "[", "'r53'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_3", "(", "out", "[", "'r52'", "]", ")", ")", "\n", "out", "[", "'r54'", "]", "=", "F", ".", "relu", "(", "self", ".", "conv5_4", "(", "out", "[", "'r53'", "]", ")", ")", "\n", "out", "[", "'p5'", "]", "=", "self", ".", "pool5", "(", "out", "[", "'r54'", "]", ")", "\n", "return", "[", "out", "[", "key", "]", "for", "key", "in", "out_keys", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.correspondence.NoVGGCorrespondence.__init__": [[152, 211], ["models.networks.base_network.BaseNetwork.__init__", "geomloss.SamplesLoss", "models.networks.generator.AdaptiveFeatureGenerator", "models.networks.generator.AdaptiveFeatureGenerator", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "ranking_attention.RAS", "models.networks.generator.DomainClassifier", "correspondence.ResidualBlock", "correspondence.ResidualBlock", "correspondence.ResidualBlock", "correspondence.ResidualBlock", "correspondence.ResidualBlock", "correspondence.ResidualBlock", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.p, self.blur = 1, opt.blur", "\n", "self", ".", "p", ",", "self", ".", "blur", "=", "1", ",", "0.025", "#0.005", "\n", "self", ".", "uot", "=", "SamplesLoss", "(", "\"sinkhorn\"", ",", "p", "=", "self", ".", "p", ",", "blur", "=", "self", ".", "blur", ",", "\n", "debias", "=", "False", ",", "potentials", "=", "True", ")", "\n", "\n", "opt", ".", "spade_ic", "=", "opt", ".", "semantic_nc", "\n", "self", ".", "adaptive_model_seg", "=", "AdaptiveFeatureGenerator", "(", "opt", ")", "\n", "opt", ".", "spade_ic", "=", "3", "\n", "self", ".", "adaptive_model_img", "=", "AdaptiveFeatureGenerator", "(", "opt", ")", "\n", "del", "opt", ".", "spade_ic", "\n", "if", "opt", ".", "weight_domainC", ">", "0", "and", "(", "not", "opt", ".", "domain_rela", ")", ":", "\n", "            ", "self", ".", "domain_classifier", "=", "DomainClassifier", "(", "opt", ")", "\n", "\n", "\n", "", "self", ".", "down", "=", "opt", ".", "warp_stride", "# 4", "\n", "\n", "self", ".", "feat_ch", "=", "64", "\n", "self", ".", "cor_dim", "=", "256", "\n", "label_nc", "=", "opt", ".", "semantic_nc", "if", "opt", ".", "maskmix", "else", "0", "\n", "coord_c", "=", "3", "if", "opt", ".", "use_coordconv", "else", "0", "\n", "\n", "self", ".", "layer", "=", "nn", ".", "Sequential", "(", "\n", "ResidualBlock", "(", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "ResidualBlock", "(", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ")", "\n", "\n", "self", ".", "layer6", "=", "nn", ".", "Sequential", "(", "\n", "ResidualBlock", "(", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "# ResidualBlock(self.feat_ch * 4 + label_nc + coord_c, self.feat_ch * 4 + label_nc + coord_c, kernel_size=3, padding=1, stride=1),", "\n", "# ResidualBlock(self.feat_ch * 4 + label_nc + coord_c, self.feat_ch * 4 + label_nc + coord_c, kernel_size=3, padding=1, stride=1),", "\n", "ResidualBlock", "(", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ")", "\n", "\n", "self", ".", "phi", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "out_channels", "=", "self", ".", "cor_dim", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "theta", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "out_channels", "=", "self", ".", "cor_dim", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "phi6", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "out_channels", "=", "self", ".", "cor_dim", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "theta6", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "out_channels", "=", "self", ".", "cor_dim", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "# self.phi_w = nn.Conv2d(in_channels=self.feat_ch * 4 + label_nc + coord_c, out_channels=self.cor_dim, kernel_size=1, stride=1, padding=0)", "\n", "# self.theta_w = nn.Conv2d(in_channels=self.feat_ch * 4 + label_nc + coord_c, out_channels=self.cor_dim, kernel_size=1, stride=1, padding=0)", "\n", "\n", "self", ".", "phi_conf", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "out_channels", "=", "self", ".", "cor_dim", "//", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "theta_conf", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "feat_ch", "*", "4", "+", "label_nc", "+", "coord_c", ",", "out_channels", "=", "self", ".", "cor_dim", "//", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "# self.theta_atten = nn.Conv2d(in_channels=self.feat_ch * 4 + label_nc, out_channels=self.cor_dim, kernel_size=1, stride=1, padding=0, bias=False)", "\n", "\n", "# self.upsampling_bi = F.interpolate(scale_factor=self.down, mode='bilinear')", "\n", "if", "opt", ".", "warp_bilinear", ":", "\n", "            ", "self", ".", "upsampling", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "self", ".", "down", ",", "mode", "=", "'bilinear'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "upsampling", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "self", ".", "down", ")", "\n", "", "self", ".", "zero_tensor", "=", "None", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "RAS", "=", "RAS", "(", "patch_size", "=", "4", ",", "temperature", "=", "0.01", ",", "n_top", "=", "1", ",", "opt", "=", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.correspondence.NoVGGCorrespondence.forward": [[212, 430], ["correspondence.NoVGGCorrespondence.adaptive_model_seg", "correspondence.NoVGGCorrespondence.adaptive_model_img", "util.feature_normalize", "util.feature_normalize", "util.feature_normalize", "util.feature_normalize", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "correspondence.NoVGGCorrespondence.theta", "torch.unfold", "torch.unfold", "torch.unfold", "torch.unfold", "util.mean_normalize", "util.mean_normalize.permute().contiguous", "correspondence.NoVGGCorrespondence.phi", "torch.unfold", "torch.unfold", "torch.unfold", "torch.unfold", "util.mean_normalize", "util.mean_normalize.permute().contiguous", "correspondence.NoVGGCorrespondence.theta6", "util.mean_normalize.view", "util.mean_normalize", "util.mean_normalize.permute().contiguous", "correspondence.NoVGGCorrespondence.phi6", "util.mean_normalize.view", "util.mean_normalize", "util.mean_normalize.permute().contiguous", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "R.unsqueeze.unsqueeze.unsqueeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "correspondence.NoVGGCorrespondence.RAS", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.view().repeat", "torch.sigmoid.view().repeat", "torch.sigmoid.view().repeat", "torch.sigmoid.view().repeat", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "ref_.view().permute.view().permute.view().permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "y_.view().permute.view().permute.permute().contiguous", "y_.view().permute.view().permute.view", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "ref_feat1.permute.permute.view", "ref_feat1.permute.permute.permute", "ranking_attention.align_feature", "y1.permute().view.permute().view.permute().contiguous", "y_.view().permute.view().permute.view", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "ref_feat2.view().permute.view().permute.view().permute", "ranking_attention.align_feature", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "ref_feat3.view().permute.view().permute.view().permute", "ranking_attention.align_feature", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "ref_feat4.view().permute.view().permute.view().permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "ref_feat5.view().permute.view().permute.view().permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "y1.permute().view.permute().view.permute().view", "y2.permute().view.permute().view.permute().view", "y3.permute().view.permute().view.permute().view", "y4.permute().view.permute().view.permute().view", "y5.permute().view.permute().view.permute().view", "int", "int", "correspondence.NoVGGCorrespondence.adaptive_model_img", "util.feature_normalize", "util.feature_normalize", "correspondence.NoVGGCorrespondence.addcoords", "correspondence.NoVGGCorrespondence.addcoords", "correspondence.NoVGGCorrespondence.addcoords", "correspondence.NoVGGCorrespondence.addcoords", "correspondence.NoVGGCorrespondence.layer", "correspondence.NoVGGCorrespondence.layer", "correspondence.NoVGGCorrespondence.layer6", "correspondence.NoVGGCorrespondence.layer6", "correspondence.NoVGGCorrespondence.layer", "correspondence.NoVGGCorrespondence.layer", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "ref_seg.permute.permute.view", "ref_seg.permute.permute.permute", "ranking_attention.align_feature", "warp_mask.permute().contiguous.permute().contiguous.permute().contiguous", "warp_mask.permute().contiguous.permute().contiguous.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "util.mean_normalize.permute", "int", "util.mean_normalize.permute", "util.mean_normalize.permute", "util.mean_normalize.permute", "R.unsqueeze.unsqueeze.transpose", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "ref_.view().permute.view().permute.view", "y_.view().permute.view().permute.permute", "y1.permute().view.permute().view.permute", "ref_feat2.view().permute.view().permute.view", "ref_feat3.view().permute.view().permute.view", "ref_feat4.view().permute.view().permute.view", "ref_feat5.view().permute.view().permute.view", "y1.permute().view.permute().view.permute", "y2.permute().view.permute().view.permute", "y3.permute().view.permute().view.permute", "y4.permute().view.permute().view.permute", "y5.permute().view.permute().view.permute", "f.transpose", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "seg.permute.permute.view", "seg.permute.permute.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "warp_mask.permute().contiguous.permute().contiguous.permute().contiguous", "warp_mask.permute().contiguous.permute().contiguous.view", "f.transpose", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.unfold", "torch.unfold", "torch.unfold", "torch.unfold", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().permute().contiguous.permute", "torch.matmul().permute().contiguous.permute", "torch.matmul().permute().contiguous.permute", "torch.matmul().permute().contiguous.permute", "torch.fold", "torch.fold", "torch.fold", "torch.fold", "y_.view().permute.view().permute.view().permute", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous.view", "torch.matmul().permute().contiguous.view", "torch.matmul().permute().contiguous.view", "torch.matmul().permute().contiguous.view", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss", "correspondence.NoVGGCorrespondence.size", "correspondence.NoVGGCorrespondence.size", "correspondence.NoVGGCorrespondence.size", "correspondence.NoVGGCorrespondence.size", "torch.sigmoid.mean", "torch.sigmoid.mean", "torch.sigmoid.mean", "torch.sigmoid.mean", "warp_mask.permute().contiguous.permute().contiguous.permute", "f.transpose.sum().view", "f.transpose.sum().view", "f.transpose", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "real_img.permute.permute.view", "real_img.permute.permute.permute", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "warp_i2r.view.view.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.permute().contiguous().view", "torch.matmul.permute().contiguous().view", "torch.matmul.permute().contiguous().view", "torch.matmul.permute().contiguous().view", "warp_mask.permute().contiguous.permute().contiguous.permute", "y_.view().permute.view().permute.view", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "warp_i2r.view.view.view().permute", "f.transpose.sum", "f.transpose.sum", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul.permute().contiguous", "torch.matmul.permute().contiguous", "torch.matmul.permute().contiguous", "torch.matmul.permute().contiguous", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "warp_i2r.view.view.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.permute", "torch.matmul.permute", "torch.matmul.permute", "torch.matmul.permute"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.feature_normalize", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.feature_normalize", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.feature_normalize", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.feature_normalize", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.mean_normalize", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.mean_normalize", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.mean_normalize", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.mean_normalize", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.align_feature", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.align_feature", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.align_feature", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.feature_normalize", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.feature_normalize", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.correspondence.NoVGGCorrespondence.addcoords", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.correspondence.NoVGGCorrespondence.addcoords", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.correspondence.NoVGGCorrespondence.addcoords", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.correspondence.NoVGGCorrespondence.addcoords", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.align_feature"], ["", "def", "forward", "(", "self", ",", "ref_img", ",", "real_img", ",", "seg_map", ",", "ref_seg_map", ",", "detach_flag", "=", "False", ")", ":", "\n", "        ", "coor_out", "=", "{", "}", "\n", "batch_size", ",", "_", ",", "im_height", ",", "im_width", "=", "ref_img", ".", "shape", "\n", "feat_height", ",", "feat_width", "=", "int", "(", "im_height", "/", "self", ".", "down", ")", ",", "int", "(", "im_width", "/", "self", ".", "down", ")", "\n", "\n", "seg_feat2", ",", "seg_feat3", ",", "seg_feat4", ",", "seg_feat5", ",", "seg_feat6", "=", "self", ".", "adaptive_model_seg", "(", "seg_map", ",", "seg_map", ",", "multi", "=", "True", ")", "\n", "ref_feat2", ",", "ref_feat3", ",", "ref_feat4", ",", "ref_feat5", ",", "ref_feat6", "=", "self", ".", "adaptive_model_img", "(", "ref_img", ",", "ref_img", ",", "multi", "=", "True", ")", "\n", "\n", "adp_feat_seg", "=", "util", ".", "feature_normalize", "(", "seg_feat5", ")", "\n", "adp_feat_img", "=", "util", ".", "feature_normalize", "(", "ref_feat5", ")", "\n", "\n", "adp_feat_seg6", "=", "util", ".", "feature_normalize", "(", "seg_feat6", ")", "\n", "adp_feat_img6", "=", "util", ".", "feature_normalize", "(", "ref_feat6", ")", "\n", "\n", "\n", "\n", "if", "self", ".", "opt", ".", "isTrain", "and", "self", ".", "opt", ".", "novgg_featpair", ">", "0", ":", "\n", "            ", "adp_feat_img_pair5", ",", "adp_feat_img_pair6", "=", "self", ".", "adaptive_model_img", "(", "real_img", ",", "real_img", ")", "\n", "adp_feat_img_pair5", "=", "util", ".", "feature_normalize", "(", "adp_feat_img_pair5", ")", "\n", "adp_feat_img_pair6", "=", "util", ".", "feature_normalize", "(", "adp_feat_img_pair6", ")", "\n", "coor_out", "[", "'loss_novgg_featpair'", "]", "=", "(", "F", ".", "l1_loss", "(", "adp_feat_seg", ",", "adp_feat_img_pair5", ")", "+", "F", ".", "l1_loss", "(", "adp_feat_seg6", ",", "adp_feat_img_pair6", ")", ")", "*", "self", ".", "opt", ".", "novgg_featpair", "\n", "\n", "", "if", "self", ".", "opt", ".", "use_coordconv", ":", "\n", "            ", "adp_feat_seg", "=", "self", ".", "addcoords", "(", "adp_feat_seg", ")", "\n", "adp_feat_img", "=", "self", ".", "addcoords", "(", "adp_feat_img", ")", "\n", "\n", "adp_feat_seg6", "=", "self", ".", "addcoords", "(", "adp_feat_seg6", ")", "\n", "adp_feat_img6", "=", "self", ".", "addcoords", "(", "adp_feat_img6", ")", "\n", "\n", "\n", "", "seg", "=", "F", ".", "interpolate", "(", "seg_map", ",", "size", "=", "adp_feat_seg", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "ref_seg", "=", "F", ".", "interpolate", "(", "ref_seg_map", ",", "size", "=", "adp_feat_img", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "seg6", "=", "F", ".", "interpolate", "(", "seg_map", ",", "size", "=", "adp_feat_seg6", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "ref_seg6", "=", "F", ".", "interpolate", "(", "ref_seg_map", ",", "size", "=", "adp_feat_img6", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "\n", "if", "self", ".", "opt", ".", "maskmix", ":", "\n", "            ", "cont_features", "=", "self", ".", "layer", "(", "torch", ".", "cat", "(", "(", "adp_feat_seg", ",", "seg", ")", ",", "1", ")", ")", "\n", "ref_features", "=", "self", ".", "layer", "(", "torch", ".", "cat", "(", "(", "adp_feat_img", ",", "ref_seg", ")", ",", "1", ")", ")", "\n", "\n", "cont_features6", "=", "self", ".", "layer6", "(", "torch", ".", "cat", "(", "(", "adp_feat_seg6", ",", "seg6", ")", ",", "1", ")", ")", "\n", "ref_features6", "=", "self", ".", "layer6", "(", "torch", ".", "cat", "(", "(", "adp_feat_img6", ",", "ref_seg6", ")", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "cont_features", "=", "self", ".", "layer", "(", "adp_feat_seg", ")", "\n", "ref_features", "=", "self", ".", "layer", "(", "adp_feat_img", ")", "\n", "\n", "", "dim_mean", "=", "1", "if", "self", ".", "opt", ".", "PONO_C", "else", "-", "1", "\n", "\n", "# feature branch", "\n", "theta", ",", "phi", "=", "cont_features", ",", "ref_features", "\n", "theta", "=", "self", ".", "theta", "(", "theta", ")", "\n", "theta", "=", "F", ".", "unfold", "(", "theta", ",", "kernel_size", "=", "self", ".", "opt", ".", "match_kernel", ",", "padding", "=", "int", "(", "self", ".", "opt", ".", "match_kernel", "//", "2", ")", ")", "\n", "theta", "=", "util", ".", "mean_normalize", "(", "theta", ",", "dim_mean", "=", "dim_mean", ")", "\n", "theta_permute", "=", "theta", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "phi", "=", "self", ".", "phi", "(", "phi", ")", "\n", "phi", "=", "F", ".", "unfold", "(", "phi", ",", "kernel_size", "=", "self", ".", "opt", ".", "match_kernel", ",", "padding", "=", "int", "(", "self", ".", "opt", ".", "match_kernel", "//", "2", ")", ")", "\n", "phi", "=", "util", ".", "mean_normalize", "(", "phi", ",", "dim_mean", "=", "dim_mean", ")", "\n", "phi_permute", "=", "phi", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "# layer 6", "\n", "theta6", ",", "phi6", "=", "cont_features6", ",", "ref_features6", "\n", "theta6", "=", "self", ".", "theta6", "(", "theta6", ")", "\n", "theta6", "=", "theta6", ".", "view", "(", "theta6", ".", "shape", "[", "0", "]", ",", "theta6", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "theta6", "=", "util", ".", "mean_normalize", "(", "theta6", ",", "dim_mean", "=", "dim_mean", ")", "\n", "theta6_permute", "=", "theta6", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "phi6", "=", "self", ".", "phi6", "(", "phi6", ")", "\n", "phi6", "=", "phi6", ".", "view", "(", "phi6", ".", "shape", "[", "0", "]", ",", "phi6", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "phi6", "=", "util", ".", "mean_normalize", "(", "phi6", ",", "dim_mean", "=", "dim_mean", ")", "\n", "phi6_permute", "=", "phi6", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "\n", "\n", "\n", "# RAS matching.", "\n", "b", ",", "N", ",", "D", "=", "theta_permute", ".", "shape", "\n", "R", "=", "torch", ".", "matmul", "(", "theta_permute", ",", "phi", ")", "\n", "R", "=", "F", ".", "softmax", "(", "R", "*", "100", ",", "dim", "=", "-", "1", ")", "\n", "R", "=", "R", ".", "unsqueeze", "(", "-", "1", ")", "\n", "R_v", "=", "F", ".", "softmax", "(", "R", ".", "transpose", "(", "1", ",", "2", ")", "*", "100", ",", "dim", "=", "-", "1", ")", "\n", "\n", "dots", ",", "dots_v", "=", "self", ".", "RAS", "(", "theta6_permute", ",", "phi6_permute", ",", "R", ")", "\n", "\n", "\n", "# Confidence map.", "\n", "conf_map", "=", "torch", ".", "max", "(", "R", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "# print('*****', (conf_map - conf_map.mean(dim=1, keepdim=True)).shape)", "\n", "conf_map", "=", "(", "conf_map", "-", "conf_map", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", ".", "view", "(", "batch_size", ",", "1", ",", "feat_height", "//", "2", ",", "feat_width", "//", "2", ")", "\n", "conf_map", "=", "torch", ".", "sigmoid", "(", "conf_map", "*", "1.0", ")", "\n", "# conf_map = F.interpolate(conf_map,  (128, 128))", "\n", "conf_map_", "=", "conf_map", ".", "view", "(", "-", "1", ",", "1", ",", "64", ",", "64", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "# print('************', conf_map_.min(), conf_map_.max())", "\n", "# 1/0", "\n", "coor_out", "[", "'conf_map'", "]", "=", "F", ".", "interpolate", "(", "conf_map_", ",", "size", "=", "(", "256", ",", "256", ")", ")", "\n", "\n", "\n", "# feature alignment", "\n", "\n", "ref_", "=", "F", ".", "interpolate", "(", "ref_img", ",", "size", "=", "(", "64", ",", "64", ")", ",", "mode", "=", "'nearest'", ")", "\n", "channel_", "=", "ref_", ".", "shape", "[", "1", "]", "\n", "ref_", "=", "ref_", ".", "view", "(", "batch_size", ",", "channel_", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "y_", "=", "torch", ".", "matmul", "(", "R", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "ref_", ")", "\n", "\n", "y_", "=", "y_", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y_", "=", "y_", ".", "view", "(", "batch_size", ",", "channel_", ",", "64", ",", "64", ")", "\n", "coor_out", "[", "'warp64'", "]", "=", "F", ".", "interpolate", "(", "y_", ",", "size", "=", "(", "256", ",", "256", ")", ")", "\n", "#y_ if self.opt.warp_patch else self.upsampling(y_)", "\n", "\n", "ref_feat1", "=", "F", ".", "interpolate", "(", "ref_img", ",", "size", "=", "(", "128", ",", "128", ")", ",", "mode", "=", "'nearest'", ")", "\n", "channel1", "=", "ref_feat1", ".", "shape", "[", "1", "]", "\n", "ref_feat1", "=", "ref_feat1", ".", "view", "(", "batch_size", ",", "channel1", ",", "-", "1", ")", "\n", "ref_feat1", "=", "ref_feat1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# y1 = torch.matmul(f_div_C, ref_)", "\n", "y1", "=", "align_feature", "(", "R", ",", "dots", ",", "ref_feat1", ")", "\n", "\n", "y_", "=", "y1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y_", "=", "y_", ".", "view", "(", "batch_size", ",", "channel1", ",", "128", ",", "128", ")", "\n", "coor_out", "[", "'warp128'", "]", "=", "F", ".", "interpolate", "(", "y_", ",", "size", "=", "(", "256", ",", "256", ")", ")", "\n", "\n", "ref_feat2", "=", "F", ".", "interpolate", "(", "ref_feat2", ",", "size", "=", "(", "128", ",", "128", ")", ",", "mode", "=", "'nearest'", ")", "\n", "channel2", "=", "ref_feat2", ".", "shape", "[", "1", "]", "\n", "ref_feat2", "=", "ref_feat2", ".", "view", "(", "batch_size", ",", "channel2", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# y2 = torch.matmul(f_div_C, ref_feat2)", "\n", "y2", "=", "align_feature", "(", "R", ",", "dots", ",", "ref_feat2", ")", "\n", "\n", "\n", "ref_feat3", "=", "F", ".", "interpolate", "(", "ref_feat3", ",", "size", "=", "(", "128", ",", "128", ")", ",", "mode", "=", "'nearest'", ")", "\n", "channel3", "=", "ref_feat3", ".", "shape", "[", "1", "]", "\n", "ref_feat3", "=", "ref_feat3", ".", "view", "(", "batch_size", ",", "channel3", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# y3 = torch.matmul(f_div_C, ref_feat3)", "\n", "y3", "=", "align_feature", "(", "R", ",", "dots", ",", "ref_feat3", ")", "\n", "\n", "\n", "ref_feat4", "=", "F", ".", "interpolate", "(", "ref_feat4", ",", "size", "=", "(", "64", ",", "64", ")", ",", "mode", "=", "'nearest'", ")", "\n", "channel4", "=", "ref_feat4", ".", "shape", "[", "1", "]", "\n", "ref_feat4", "=", "ref_feat4", ".", "view", "(", "batch_size", ",", "channel4", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "y4", "=", "torch", ".", "matmul", "(", "R", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "ref_feat4", ")", "\n", "# y4 = align_feature(R, dots, ref_feat4)", "\n", "\n", "\n", "ref_feat5", "=", "F", ".", "interpolate", "(", "ref_feat5", ",", "size", "=", "(", "64", ",", "64", ")", ",", "mode", "=", "'nearest'", ")", "\n", "channel5", "=", "ref_feat5", ".", "shape", "[", "1", "]", "\n", "ref_feat5", "=", "ref_feat5", ".", "view", "(", "batch_size", ",", "channel5", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "y5", "=", "torch", ".", "matmul", "(", "R", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "ref_feat5", ")", "\n", "# y5 = align_feature(R, dots, ref_feat5)", "\n", "\n", "\n", "y1", "=", "y1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "batch_size", ",", "channel_", ",", "feat_height", ",", "feat_width", ")", "\n", "y2", "=", "y2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "batch_size", ",", "channel2", ",", "feat_height", ",", "feat_width", ")", "\n", "y3", "=", "y3", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "batch_size", ",", "channel3", ",", "feat_height", ",", "feat_width", ")", "\n", "y4", "=", "y4", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "batch_size", ",", "channel4", ",", "feat_height", "//", "2", ",", "feat_width", "//", "2", ")", "\n", "y5", "=", "y5", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "batch_size", ",", "channel5", ",", "feat_height", "//", "2", ",", "feat_width", "//", "2", ")", "\n", "\n", "coor_out", "[", "'warp_out'", "]", "=", "[", "seg_map", ",", "seg_feat2", ",", "seg_feat3", ",", "seg_feat4", ",", "seg_feat5", ",", "y1", ",", "y2", ",", "y3", ",", "y4", ",", "y5", ",", "conf_map", "]", "\n", "\n", "if", "self", ".", "opt", ".", "warp_mask_losstype", "==", "'direct'", "or", "self", ".", "opt", ".", "show_warpmask", ":", "\n", "            ", "ref_seg", "=", "F", ".", "interpolate", "(", "ref_seg_map", ",", "scale_factor", "=", "1", "/", "self", ".", "down", ",", "mode", "=", "'nearest'", ")", "\n", "channel", "=", "ref_seg", ".", "shape", "[", "1", "]", "\n", "\n", "# ref_seg = ref_seg.view(batch_size, channel, -1)", "\n", "# ref_seg = ref_seg.permute(0, 2, 1)", "\n", "# warp_mask = torch.matmul(f_div_C, ref_seg)  # 2*1936*channel", "\n", "\n", "ref_seg", "=", "ref_seg", ".", "view", "(", "batch_size", ",", "channel", ",", "-", "1", ")", "\n", "ref_seg", "=", "ref_seg", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "warp_mask", "=", "align_feature", "(", "R", ",", "dots", ",", "ref_seg", ")", "\n", "\n", "warp_mask", "=", "warp_mask", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "coor_out", "[", "'warp_mask'", "]", "=", "warp_mask", ".", "view", "(", "batch_size", ",", "channel", ",", "feat_height", ",", "feat_width", ")", "# 2*3*44*44", "\n", "", "elif", "self", ".", "opt", ".", "warp_mask_losstype", "==", "'cycle'", ":", "\n", "# f_div_C_v = F.softmax(f_WTA.transpose(1, 2), dim=-1)", "\n", "            ", "f_WTA_v", "=", "f", ".", "transpose", "(", "1", ",", "2", ")", "\n", "f_div_C_v", "=", "f_WTA_v", "/", "f_WTA_v", ".", "sum", "(", "-", "1", ")", ".", "view", "(", "-", "1", ",", "N", ",", "1", ")", "\n", "\n", "seg", "=", "F", ".", "interpolate", "(", "seg_map", ",", "scale_factor", "=", "1", "/", "self", ".", "down", ",", "mode", "=", "'nearest'", ")", "\n", "channel", "=", "seg", ".", "shape", "[", "1", "]", "\n", "seg", "=", "seg", ".", "view", "(", "batch_size", ",", "channel", ",", "-", "1", ")", "\n", "seg", "=", "seg", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "warp_mask_to_ref", "=", "torch", ".", "matmul", "(", "f_div_C_v", ",", "seg", ")", "# 2*1936*channel", "\n", "warp_mask", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "warp_mask_to_ref", ")", "# 2*1936*channel", "\n", "warp_mask", "=", "warp_mask", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "coor_out", "[", "'warp_mask'", "]", "=", "warp_mask", ".", "view", "(", "batch_size", ",", "channel", ",", "feat_height", ",", "feat_width", ")", "# 2*3*44*44", "\n", "", "else", ":", "\n", "            ", "warp_mask", "=", "None", "\n", "\n", "", "if", "self", ".", "opt", ".", "warp_cycle_w", ">", "0", ":", "\n", "            ", "if", "self", ".", "opt", ".", "correspondence", "==", "'ot'", ":", "\n", "                ", "f_WTA_v", "=", "f", ".", "transpose", "(", "1", ",", "2", ")", "\n", "f_div_C_v", "=", "f_WTA_v", "/", "f_WTA_v", ".", "sum", "(", "-", "1", ")", ".", "view", "(", "-", "1", ",", "N", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "f_div_C_v", "=", "F", ".", "softmax", "(", "f", ".", "transpose", "(", "1", ",", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "\n", "", "if", "self", ".", "opt", ".", "warp_patch", ":", "\n", "                ", "y_", "=", "F", ".", "unfold", "(", "y_", ",", "self", ".", "down", ",", "stride", "=", "self", ".", "down", ")", "\n", "warp_cycle", "=", "torch", ".", "matmul", "(", "f_div_C_v", ",", "y_", ")", "\n", "warp_cycle", "=", "warp_cycle", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "warp_cycle", "=", "F", ".", "fold", "(", "warp_cycle", ",", "256", ",", "self", ".", "down", ",", "stride", "=", "self", ".", "down", ")", "\n", "coor_out", "[", "'warp_cycle'", "]", "=", "warp_cycle", "\n", "", "else", ":", "\n", "                ", "channel", "=", "y_", ".", "shape", "[", "1", "]", "\n", "y_", "=", "y_", ".", "view", "(", "batch_size", ",", "channel", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "warp_cycle", "=", "torch", ".", "matmul", "(", "f_div_C_v", ",", "y_", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "coor_out", "[", "'warp_cycle'", "]", "=", "warp_cycle", ".", "view", "(", "batch_size", ",", "channel", ",", "feat_height", ",", "feat_width", ")", "\n", "if", "self", ".", "opt", ".", "two_cycle", ":", "\n", "                    ", "real_img", "=", "F", ".", "avg_pool2d", "(", "real_img", ",", "self", ".", "down", ")", "\n", "real_img", "=", "real_img", ".", "view", "(", "batch_size", ",", "channel", ",", "-", "1", ")", "\n", "real_img", "=", "real_img", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "warp_i2r", "=", "torch", ".", "matmul", "(", "f_div_C_v", ",", "real_img", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "#warp input to ref", "\n", "warp_i2r", "=", "warp_i2r", ".", "view", "(", "batch_size", ",", "channel", ",", "feat_height", ",", "feat_width", ")", "\n", "warp_i2r2i", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "warp_i2r", ".", "view", "(", "batch_size", ",", "channel", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "coor_out", "[", "'warp_i2r'", "]", "=", "warp_i2r", "\n", "coor_out", "[", "'warp_i2r2i'", "]", "=", "warp_i2r2i", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "channel", ",", "feat_height", ",", "feat_width", ")", "\n", "\n", "", "", "", "return", "coor_out", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.correspondence.NoVGGCorrespondence.addcoords": [[431, 450], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.arange().unsqueeze().repeat().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul().unsqueeze.float", "torch.matmul().unsqueeze.float", "torch.matmul().unsqueeze.float", "torch.matmul().unsqueeze.float", "torch.matmul().unsqueeze.float", "torch.matmul().unsqueeze.float", "torch.matmul().unsqueeze.float", "torch.matmul().unsqueeze.float", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "addcoords", "(", "self", ",", "x", ")", ":", "\n", "        ", "bs", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "xx_ones", "=", "torch", ".", "ones", "(", "[", "bs", ",", "h", ",", "1", "]", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "xx_range", "=", "torch", ".", "arange", "(", "w", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "[", "bs", ",", "1", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "xx_channel", "=", "torch", ".", "matmul", "(", "xx_ones", ",", "xx_range", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "yy_ones", "=", "torch", ".", "ones", "(", "[", "bs", ",", "1", ",", "w", "]", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "yy_range", "=", "torch", ".", "arange", "(", "h", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "[", "bs", ",", "1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "yy_channel", "=", "torch", ".", "matmul", "(", "yy_range", ",", "yy_ones", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "xx_channel", "=", "xx_channel", ".", "float", "(", ")", "/", "(", "w", "-", "1", ")", "\n", "yy_channel", "=", "yy_channel", ".", "float", "(", ")", "/", "(", "h", "-", "1", ")", "\n", "xx_channel", "=", "2", "*", "xx_channel", "-", "1", "\n", "yy_channel", "=", "2", "*", "yy_channel", "-", "1", "\n", "\n", "rr_channel", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "xx_channel", ",", "2", ")", "+", "torch", ".", "pow", "(", "yy_channel", ",", "2", ")", ")", "\n", "\n", "concat", "=", "torch", ".", "cat", "(", "(", "x", ",", "xx_channel", ",", "yy_channel", ",", "rr_channel", ")", ",", "dim", "=", "1", ")", "\n", "return", "concat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.SEACE.__init__": [[27, 68], ["torch.Module.__init__", "config_text.startswith", "re.search", "str", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "re.search.group", "re.search.group", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "apex.parallel.SyncBatchNorm", "models.networks.sync_batchnorm.SynchronizedBatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config_text", ",", "norm_nc", ",", "label_nc", ",", "PONO", "=", "False", ",", "use_apex", "=", "False", ",", "feat_nc", "=", "None", ",", "atten", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "config_text", ".", "startswith", "(", "'spade'", ")", "\n", "parsed", "=", "re", ".", "search", "(", "'spade(\\D+)(\\d)x\\d'", ",", "config_text", ")", "\n", "param_free_norm_type", "=", "str", "(", "parsed", ".", "group", "(", "1", ")", ")", "\n", "ks", "=", "int", "(", "parsed", ".", "group", "(", "2", ")", ")", "\n", "self", ".", "norm_nc", ",", "self", ".", "atten", "=", "norm_nc", ",", "atten", "\n", "\n", "if", "PONO", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "PositionalNorm2d", "\n", "", "elif", "param_free_norm_type", "==", "'instance'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "elif", "param_free_norm_type", "==", "'syncbatch'", ":", "\n", "            ", "if", "use_apex", ":", "\n", "                ", "self", ".", "param_free_norm", "=", "apex", ".", "parallel", ".", "SyncBatchNorm", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "param_free_norm", "=", "SynchronizedBatchNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "", "elif", "param_free_norm_type", "==", "'batch'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'not a recognized norm'", ")", "\n", "", "nhidden", ",", "pw", "=", "128", ",", "ks", "//", "2", "\n", "self", ".", "nhidden", "=", "nhidden", "\n", "self", ".", "feat_nc", "=", "feat_nc", "\n", "# if feat_nc == 3:", "\n", "#     self.seg_nc = label_nc", "\n", "# else:", "\n", "self", ".", "seg_nc", "=", "feat_nc", "\n", "self", ".", "seg_shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "seg_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "\n", "self", ".", "ref_shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "feat_nc", ",", "feat_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "ref_shared2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "feat_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "# self.ref_gamma = nn.Conv2d(nhidden, norm_nc, kernel_size=ks, padding=pw)", "\n", "# self.ref_beta = nn.Conv2d(nhidden, norm_nc, kernel_size=ks, padding=pw)", "\n", "self", ".", "coef", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.SEACE.forward": [[69, 106], ["normalization.SEACE.param_free_norm", "x.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "conf_map.repeat.repeat.repeat", "normalization.SEACE.seg_shared", "normalization.SEACE.ref_shared2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "normalization.SEACE.gamma", "normalization.SEACE.beta", "normalization.SEACE.ref_shared", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.interpolate.view", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "normalization.SEACE.ref_shared", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.interpolate.view", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "normalization.SEACE.view", "atten_map.permute", "normalization.SEACE.view", "atten_map.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "seg_map", ",", "ref_map", ",", "atten_map", ",", "conf_map", ")", ":", "\n", "        ", "normalized", "=", "self", ".", "param_free_norm", "(", "x", ")", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "\n", "seg_map", "=", "F", ".", "interpolate", "(", "seg_map", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "ref_map", "=", "F", ".", "interpolate", "(", "ref_map", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "conf_map", "=", "F", ".", "interpolate", "(", "conf_map", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "conf_map", "=", "conf_map", ".", "repeat", "(", "1", ",", "self", ".", "nhidden", ",", "1", ",", "1", ")", "\n", "\n", "\n", "seg_feat", "=", "self", ".", "seg_shared", "(", "seg_map", ")", "\n", "if", "self", ".", "atten", ":", "\n", "            ", "if", "h", "<=", "64", ":", "\n", "                ", "ref_feat", "=", "self", ".", "ref_shared", "(", "ref_map", ")", "\n", "# print (atten_map.shape, ref_feat.shape)", "\n", "ref_aggr", "=", "torch", ".", "bmm", "(", "ref_feat", ".", "view", "(", "b", ",", "self", ".", "feat_nc", ",", "h", "*", "w", ")", ",", "atten_map", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "ref_aggr", "=", "ref_aggr", ".", "view", "(", "b", ",", "self", ".", "feat_nc", ",", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "                ", "ref_map_aggr", "=", "F", ".", "interpolate", "(", "ref_map", ",", "size", "=", "(", "64", ",", "64", ")", ",", "mode", "=", "'nearest'", ")", "\n", "ref_feat", "=", "self", ".", "ref_shared", "(", "ref_map_aggr", ")", "\n", "\n", "ref_aggr", "=", "torch", ".", "bmm", "(", "ref_feat", ".", "view", "(", "b", ",", "self", ".", "feat_nc", ",", "64", "*", "64", ")", ",", "atten_map", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "ref_aggr", "=", "ref_aggr", ".", "view", "(", "b", ",", "self", ".", "feat_nc", ",", "64", ",", "64", ")", "\n", "ref_aggr", "=", "F", ".", "interpolate", "(", "ref_aggr", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "", "ref_map", "=", "self", ".", "coef", "*", "ref_aggr", "+", "ref_map", "\n", "", "ref_feat", "=", "self", ".", "ref_shared2", "(", "ref_map", ")", "\n", "# ref_feat = F.interpolate(ref_feat, size=(h, w), mode='nearest')", "\n", "# print (conf_map.shape, seg_feat.shape, ref_feat.shape)", "\n", "feat", "=", "seg_feat", "*", "(", "1", "-", "conf_map", ")", "+", "ref_feat", "*", "conf_map", "\n", "feat", "=", "F", ".", "interpolate", "(", "feat", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "gamma", "=", "self", ".", "gamma", "(", "feat", ")", "\n", "beta", "=", "self", ".", "beta", "(", "feat", ")", "\n", "\n", "out", "=", "normalized", "*", "(", "1", "+", "gamma", ")", "+", "beta", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.SPADE.__init__": [[112, 156], ["torch.Module.__init__", "config_text.startswith", "re.search", "str", "int", "re.search.group", "re.search.group", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "apex.parallel.SyncBatchNorm", "models.networks.sync_batchnorm.SynchronizedBatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config_text", ",", "norm_nc", ",", "label_nc", ",", "PONO", "=", "False", ",", "use_apex", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "config_text", ".", "startswith", "(", "'spade'", ")", "\n", "parsed", "=", "re", ".", "search", "(", "'spade(\\D+)(\\d)x\\d'", ",", "config_text", ")", "\n", "param_free_norm_type", "=", "str", "(", "parsed", ".", "group", "(", "1", ")", ")", "\n", "ks", "=", "int", "(", "parsed", ".", "group", "(", "2", ")", ")", "\n", "self", ".", "pad_type", "=", "'nozero'", "\n", "\n", "if", "PONO", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "PositionalNorm2d", "\n", "", "elif", "param_free_norm_type", "==", "'instance'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "elif", "param_free_norm_type", "==", "'syncbatch'", ":", "\n", "            ", "if", "use_apex", ":", "\n", "                ", "self", ".", "param_free_norm", "=", "apex", ".", "parallel", ".", "SyncBatchNorm", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "param_free_norm", "=", "SynchronizedBatchNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "", "elif", "param_free_norm_type", "==", "'batch'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'%s is not a recognized param-free norm type in SPADE'", "\n", "%", "param_free_norm_type", ")", "\n", "\n", "# The dimension of the intermediate embedding space. Yes, hardcoded.", "\n", "", "nhidden", "=", "128", "\n", "\n", "pw", "=", "ks", "//", "2", "\n", "if", "self", ".", "pad_type", "!=", "'zero'", ":", "\n", "            ", "self", ".", "mlp_shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "pw", ")", ",", "\n", "nn", ".", "Conv2d", "(", "label_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "pw", ")", "\n", "self", ".", "mlp_gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "0", ")", "\n", "self", ".", "mlp_beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mlp_shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "label_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "mlp_gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "mlp_beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.SPADE.forward": [[157, 182], ["normalization.SPADE.param_free_norm", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "normalization.SPADE.mlp_shared", "normalization.SPADE.mlp_gamma", "normalization.SPADE.mlp_beta", "normalization.SPADE.mlp_gamma", "normalization.SPADE.mlp_beta", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "normalization.SPADE.pad", "normalization.SPADE.pad", "x.size", "normalization.SPADE.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "segmap", ",", "similarity_map", "=", "None", ")", ":", "\n", "\n", "# Part 1. generate parameter-free normalized activations", "\n", "        ", "normalized", "=", "self", ".", "param_free_norm", "(", "x", ")", "\n", "\n", "# Part 2. produce scaling and bias conditioned on semantic map", "\n", "segmap", "=", "F", ".", "interpolate", "(", "segmap", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "actv", "=", "self", ".", "mlp_shared", "(", "segmap", ")", "\n", "if", "self", ".", "pad_type", "!=", "'zero'", ":", "\n", "            ", "gamma", "=", "self", ".", "mlp_gamma", "(", "self", ".", "pad", "(", "actv", ")", ")", "\n", "beta", "=", "self", ".", "mlp_beta", "(", "self", ".", "pad", "(", "actv", ")", ")", "\n", "", "else", ":", "\n", "            ", "gamma", "=", "self", ".", "mlp_gamma", "(", "actv", ")", "\n", "beta", "=", "self", ".", "mlp_beta", "(", "actv", ")", "\n", "\n", "", "if", "similarity_map", "is", "not", "None", ":", "\n", "            ", "similarity_map", "=", "F", ".", "interpolate", "(", "similarity_map", ",", "size", "=", "gamma", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "gamma", "=", "gamma", "*", "similarity_map", "\n", "beta", "=", "beta", "*", "similarity_map", "\n", "# apply scale and bias", "\n", "# print (normalized.shape)", "\n", "# print (gamma.shape)", "\n", "", "out", "=", "normalized", "*", "(", "1", "+", "gamma", ")", "+", "beta", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.SPADE_TwoPath.__init__": [[232, 291], ["torch.Module.__init__", "config_text.startswith", "re.search", "str", "int", "re.search.group", "re.search.group", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "apex.parallel.SyncBatchNorm", "models.networks.sync_batchnorm.SynchronizedBatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config_text", ",", "norm_nc", ",", "label_nc_example", ",", "label_nc_imagine", ",", "PONO", "=", "False", ",", "use_apex", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "config_text", ".", "startswith", "(", "'spade'", ")", "\n", "parsed", "=", "re", ".", "search", "(", "'spade(\\D+)(\\d)x\\d'", ",", "config_text", ")", "\n", "param_free_norm_type", "=", "str", "(", "parsed", ".", "group", "(", "1", ")", ")", "\n", "ks", "=", "int", "(", "parsed", ".", "group", "(", "2", ")", ")", "\n", "self", ".", "pad_type", "=", "'nozero'", "\n", "\n", "if", "PONO", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "PositionalNorm2d", "\n", "", "elif", "param_free_norm_type", "==", "'instance'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "elif", "param_free_norm_type", "==", "'syncbatch'", ":", "\n", "            ", "if", "use_apex", ":", "\n", "                ", "self", ".", "param_free_norm", "=", "apex", ".", "parallel", ".", "SyncBatchNorm", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "param_free_norm", "=", "SynchronizedBatchNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "", "elif", "param_free_norm_type", "==", "'batch'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'%s is not a recognized param-free norm type in SPADE'", "\n", "%", "param_free_norm_type", ")", "\n", "\n", "# The dimension of the intermediate embedding space. Yes, hardcoded.", "\n", "", "nhidden", "=", "128", "\n", "\n", "pw", "=", "ks", "//", "2", "\n", "if", "self", ".", "pad_type", "!=", "'zero'", ":", "\n", "            ", "self", ".", "mlp_shared_example", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "pw", ")", ",", "\n", "nn", ".", "Conv2d", "(", "label_nc_example", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "pw", ")", "\n", "self", ".", "mlp_gamma_example", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "0", ")", "\n", "self", ".", "mlp_beta_example", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "mlp_shared_imagine", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "pw", ")", ",", "\n", "nn", ".", "Conv2d", "(", "label_nc_imagine", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "mlp_gamma_imagine", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "0", ")", "\n", "self", ".", "mlp_beta_imagine", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mlp_shared_example", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "label_nc_example", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "mlp_gamma_example", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "mlp_beta_example", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "\n", "self", ".", "mlp_shared_imagine", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "label_nc_imagine", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "mlp_gamma_imagine", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "mlp_beta_imagine", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.SPADE_TwoPath.forward": [[292, 320], ["torch.interpolate.detach", "normalization.SPADE_TwoPath.param_free_norm", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "normalization.SPADE_TwoPath.mlp_shared_example", "normalization.SPADE_TwoPath.mlp_shared_imagine", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "normalization.SPADE_TwoPath.mlp_gamma_example", "normalization.SPADE_TwoPath.mlp_beta_example", "normalization.SPADE_TwoPath.mlp_gamma_imagine", "normalization.SPADE_TwoPath.mlp_beta_imagine", "normalization.SPADE_TwoPath.mlp_gamma_example", "normalization.SPADE_TwoPath.mlp_beta_example", "normalization.SPADE_TwoPath.mlp_gamma_imagine", "normalization.SPADE_TwoPath.mlp_beta_imagine", "normalization.SPADE_TwoPath.pad", "normalization.SPADE_TwoPath.pad", "normalization.SPADE_TwoPath.pad", "normalization.SPADE_TwoPath.pad", "x.size", "x.size", "x.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "warpmap", ",", "segmap", ",", "similarity_map", ")", ":", "\n", "        ", "similarity_map", "=", "similarity_map", ".", "detach", "(", ")", "\n", "# Part 1. generate parameter-free normalized activations", "\n", "normalized", "=", "self", ".", "param_free_norm", "(", "x", ")", "\n", "\n", "# Part 2. produce scaling and bias conditioned on semantic map", "\n", "segmap", "=", "F", ".", "interpolate", "(", "segmap", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "warpmap", "=", "F", ".", "interpolate", "(", "warpmap", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "actv_example", "=", "self", ".", "mlp_shared_example", "(", "warpmap", ")", "\n", "actv_imagine", "=", "self", ".", "mlp_shared_imagine", "(", "segmap", ")", "\n", "if", "self", ".", "pad_type", "!=", "'zero'", ":", "\n", "            ", "gamma_example", "=", "self", ".", "mlp_gamma_example", "(", "self", ".", "pad", "(", "actv_example", ")", ")", "\n", "beta_example", "=", "self", ".", "mlp_beta_example", "(", "self", ".", "pad", "(", "actv_example", ")", ")", "\n", "gamma_imagine", "=", "self", ".", "mlp_gamma_imagine", "(", "self", ".", "pad", "(", "actv_imagine", ")", ")", "\n", "beta_imagine", "=", "self", ".", "mlp_beta_imagine", "(", "self", ".", "pad", "(", "actv_imagine", ")", ")", "\n", "", "else", ":", "\n", "            ", "gamma_example", "=", "self", ".", "mlp_gamma_example", "(", "actv_example", ")", "\n", "beta_example", "=", "self", ".", "mlp_beta_example", "(", "actv_example", ")", "\n", "gamma_imagine", "=", "self", ".", "mlp_gamma_imagine", "(", "actv_imagine", ")", "\n", "beta_imagine", "=", "self", ".", "mlp_beta_imagine", "(", "actv_imagine", ")", "\n", "\n", "", "similarity_map", "=", "F", ".", "interpolate", "(", "similarity_map", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "gamma", "=", "gamma_example", "*", "similarity_map", "+", "gamma_imagine", "*", "(", "1", "-", "similarity_map", ")", "\n", "beta", "=", "beta_example", "*", "similarity_map", "+", "beta_imagine", "*", "(", "1", "-", "similarity_map", ")", "\n", "# apply scale and bias", "\n", "out", "=", "normalized", "*", "(", "1", "+", "gamma", ")", "+", "beta", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.EqualLR.__init__": [[322, 324], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "", "def", "compute_weight", "(", "self", ",", "module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.EqualLR.compute_weight": [[324, 328], ["getattr", "getattr.data.size", "[].numel", "numpy.sqrt"], "methods", ["None"], ["", "def", "compute_weight", "(", "self", ",", "module", ")", ":", "\n", "        ", "weight", "=", "getattr", "(", "module", ",", "self", ".", "name", "+", "'_orig'", ")", "\n", "fan_in", "=", "weight", ".", "data", ".", "size", "(", "1", ")", "*", "weight", ".", "data", "[", "0", "]", "[", "0", "]", ".", "numel", "(", ")", "\n", "return", "weight", "*", "np", ".", "sqrt", "(", "2", "/", "fan_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.EqualLR.apply": [[329, 337], ["normalization.EqualLR", "getattr", "module.register_parameter", "module.register_forward_pre_hook", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "apply", "(", "module", ",", "name", ")", ":", "\n", "        ", "fn", "=", "EqualLR", "(", "name", ")", "\n", "weight", "=", "getattr", "(", "module", ",", "name", ")", "\n", "del", "module", ".", "_parameters", "[", "name", "]", "\n", "module", ".", "register_parameter", "(", "name", "+", "'_orig'", ",", "nn", ".", "Parameter", "(", "weight", ".", "data", ")", ")", "\n", "module", ".", "register_forward_pre_hook", "(", "fn", ")", "\n", "return", "fn", "\n", "", "def", "__call__", "(", "self", ",", "module", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.EqualLR.__call__": [[337, 340], ["normalization.EqualLR.compute_weight", "setattr"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.EqualLR.compute_weight"], ["", "def", "__call__", "(", "self", ",", "module", ",", "input", ")", ":", "\n", "        ", "weight", "=", "self", ".", "compute_weight", "(", "module", ")", "\n", "setattr", "(", "module", ",", "self", ".", "name", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.PositionalNorm2d": [[19, 25], ["x.mean", "x.var().add().sqrt", "x.var().add", "x.var"], "function", ["None"], ["", "def", "PositionalNorm2d", "(", "x", ",", "epsilon", "=", "1e-5", ")", ":", "\n", "# x: B*C*W*H normalize in C dim", "\n", "    ", "mean", "=", "x", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "var", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "add", "(", "epsilon", ")", ".", "sqrt", "(", ")", "\n", "output", "=", "(", "x", "-", "mean", ")", "/", "std", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.get_nonspade_norm_layer": [[186, 227], ["hasattr", "torch.weight.size", "norm_type.startswith", "torch.Sequential", "getattr", "getattr", "delattr", "torch.register_parameter", "torch.BatchNorm2d", "normalization.equal_lr", "torch", "len", "normalization.get_nonspade_norm_layer.get_out_channel"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.equal_lr"], ["", "", "def", "get_nonspade_norm_layer", "(", "opt", ",", "norm_type", "=", "'instance'", ")", ":", "\n", "# helper function to get # output channels of the previous layer", "\n", "    ", "def", "get_out_channel", "(", "layer", ")", ":", "\n", "        ", "if", "hasattr", "(", "layer", ",", "'out_channels'", ")", ":", "\n", "            ", "return", "getattr", "(", "layer", ",", "'out_channels'", ")", "\n", "", "return", "layer", ".", "weight", ".", "size", "(", "0", ")", "\n", "\n", "# this function will be returned", "\n", "", "def", "add_norm_layer", "(", "layer", ")", ":", "\n", "        ", "nonlocal", "norm_type", "\n", "if", "norm_type", ".", "startswith", "(", "'spectral'", ")", ":", "\n", "            ", "if", "opt", ".", "eqlr_sn", ":", "\n", "                ", "layer", "=", "equal_lr", "(", "layer", ")", "\n", "", "else", ":", "\n", "                ", "layer", "=", "spectral_norm", "(", "layer", ")", "\n", "", "subnorm_type", "=", "norm_type", "[", "len", "(", "'spectral'", ")", ":", "]", "\n", "\n", "", "if", "subnorm_type", "==", "'none'", "or", "len", "(", "subnorm_type", ")", "==", "0", ":", "\n", "            ", "return", "layer", "\n", "\n", "# remove bias in the previous layer, which is meaningless", "\n", "# since it has no effect after normalization", "\n", "", "if", "getattr", "(", "layer", ",", "'bias'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "delattr", "(", "layer", ",", "'bias'", ")", "\n", "layer", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "if", "subnorm_type", "==", "'batch'", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "(", "get_out_channel", "(", "layer", ")", ",", "affine", "=", "True", ")", "\n", "", "elif", "subnorm_type", "==", "'sync_batch'", ":", "\n", "            ", "if", "opt", ".", "apex", ":", "\n", "                ", "norm_layer", "=", "apex", ".", "parallel", ".", "SyncBatchNorm", "(", "get_out_channel", "(", "layer", ")", ",", "affine", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "norm_layer", "=", "SynchronizedBatchNorm2d", "(", "get_out_channel", "(", "layer", ")", ",", "affine", "=", "True", ")", "\n", "", "", "elif", "subnorm_type", "==", "'instance'", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "get_out_channel", "(", "layer", ")", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'normalization layer %s is not recognized'", "%", "subnorm_type", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "layer", ",", "norm_layer", ")", "\n", "\n", "", "return", "add_norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.equal_lr": [[342, 345], ["normalization.EqualLR.apply"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.EqualLR.apply"], ["", "", "def", "equal_lr", "(", "module", ",", "name", "=", "'weight'", ")", ":", "\n", "    ", "EqualLR", ".", "apply", "(", "module", ",", "name", ")", "\n", "return", "module", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.SEACEResnetBlock.__init__": [[20, 64], ["torch.Module.__init__", "min", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "opt.norm_G.replace", "models.networks.normalization.SPADE", "models.networks.normalization.SPADE", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.normalization.SPADE", "architecture.SELayer", "models.networks.normalization.equal_lr", "models.networks.normalization.equal_lr", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "models.networks.normalization.equal_lr", "torch", "torch", "torch", "torch"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.equal_lr", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.equal_lr", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.equal_lr"], ["    ", "def", "__init__", "(", "self", ",", "fin", ",", "fout", ",", "opt", ",", "use_se", "=", "False", ",", "dilation", "=", "1", ",", "feat_nc", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Attributes", "\n", "self", ".", "learned_shortcut", "=", "(", "fin", "!=", "fout", ")", "\n", "fmiddle", "=", "min", "(", "fin", ",", "fout", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "# self.pad_type = 'nozero'", "\n", "# self.use_se = use_se", "\n", "\n", "# create conv layers", "\n", "# if self.pad_type != 'zero':", "\n", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "dilation", ")", "\n", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "fin", ",", "fmiddle", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "fmiddle", ",", "fout", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ")", "\n", "# else:", "\n", "#     self.conv_0 = nn.Conv2d(fin, fmiddle, kernel_size=3, padding=dilation, dilation=dilation)", "\n", "#     self.conv_1 = nn.Conv2d(fmiddle, fout, kernel_size=3, padding=dilation, dilation=dilation)", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "conv_s", "=", "nn", ".", "Conv2d", "(", "fin", ",", "fout", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# apply spectral norm if specified", "\n", "", "if", "'spectral'", "in", "opt", ".", "norm_G", ":", "\n", "            ", "if", "opt", ".", "eqlr_sn", ":", "\n", "                ", "self", ".", "conv_0", "=", "equal_lr", "(", "self", ".", "conv_0", ")", "\n", "self", ".", "conv_1", "=", "equal_lr", "(", "self", ".", "conv_1", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "                    ", "self", ".", "conv_s", "=", "equal_lr", "(", "self", ".", "conv_s", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "conv_0", "=", "spectral_norm", "(", "self", ".", "conv_0", ")", "\n", "self", ".", "conv_1", "=", "spectral_norm", "(", "self", ".", "conv_1", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "                    ", "self", ".", "conv_s", "=", "spectral_norm", "(", "self", ".", "conv_s", ")", "\n", "\n", "# define normalization layers", "\n", "", "", "", "spade_config_str", "=", "opt", ".", "norm_G", ".", "replace", "(", "'spectral'", ",", "''", ")", "\n", "# ic = feat_nc", "\n", "\n", "self", ".", "norm_0", "=", "SPADE", "(", "spade_config_str", ",", "fin", ",", "feat_nc", ",", "PONO", "=", "opt", ".", "PONO", ",", "use_apex", "=", "opt", ".", "apex", ")", "\n", "self", ".", "norm_1", "=", "SPADE", "(", "spade_config_str", ",", "fmiddle", ",", "feat_nc", ",", "PONO", "=", "opt", ".", "PONO", ",", "use_apex", "=", "opt", ".", "apex", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "norm_s", "=", "SPADE", "(", "spade_config_str", ",", "fin", ",", "feat_nc", ",", "PONO", "=", "opt", ".", "PONO", ",", "use_apex", "=", "opt", ".", "apex", ")", "\n", "\n", "", "if", "use_se", ":", "\n", "            ", "self", ".", "se_layar", "=", "SELayer", "(", "fout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.SEACEResnetBlock.forward": [[74, 89], ["architecture.SEACEResnetBlock.shortcut", "architecture.SEACEResnetBlock.conv_0", "architecture.SEACEResnetBlock.conv_1", "architecture.SEACEResnetBlock.pad", "architecture.SEACEResnetBlock.pad", "architecture.SEACEResnetBlock.actvn", "architecture.SEACEResnetBlock.actvn", "architecture.SEACEResnetBlock.norm_0", "architecture.SEACEResnetBlock.norm_1"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.shortcut", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.actvn"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "seg1", ")", ":", "\n", "        ", "x_s", "=", "self", ".", "shortcut", "(", "x", ",", "seg1", ")", "\n", "# if self.pad_type != 'zero':", "\n", "dx", "=", "self", ".", "conv_0", "(", "self", ".", "pad", "(", "self", ".", "actvn", "(", "self", ".", "norm_0", "(", "x", ",", "seg1", ")", ")", ")", ")", "\n", "dx", "=", "self", ".", "conv_1", "(", "self", ".", "pad", "(", "self", ".", "actvn", "(", "self", ".", "norm_1", "(", "dx", ",", "seg1", ")", ")", ")", ")", "\n", "# if self.use_se:", "\n", "#     dx = self.se_layar(dx)", "\n", "# else:", "\n", "#     dx = self.conv_0(self.actvn(self.norm_0(x, seg1)))", "\n", "#     dx = self.conv_1(self.actvn(self.norm_1(dx, seg1)))", "\n", "#     if self.use_se:", "\n", "#         dx = self.se_layar(dx)", "\n", "out", "=", "x_s", "+", "dx", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.SEACEResnetBlock.shortcut": [[90, 96], ["architecture.SEACEResnetBlock.conv_s", "architecture.SEACEResnetBlock.norm_s"], "methods", ["None"], ["", "def", "shortcut", "(", "self", ",", "x", ",", "seg1", ")", ":", "\n", "        ", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "x_s", "=", "self", ".", "conv_s", "(", "self", ".", "norm_s", "(", "x", ",", "seg1", ")", ")", "\n", "", "else", ":", "\n", "            ", "x_s", "=", "x", "\n", "", "return", "x_s", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.SEACEResnetBlock.actvn": [[97, 99], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "actvn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "leaky_relu", "(", "x", ",", "2e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.__init__": [[101, 148], ["torch.Module.__init__", "min", "opt.norm_G.replace", "models.networks.normalization.SPADE", "models.networks.normalization.SPADE", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.normalization.SPADE", "architecture.SELayer", "models.networks.normalization.equal_lr", "models.networks.normalization.equal_lr", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "models.networks.normalization.equal_lr", "torch", "torch", "torch", "torch"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.equal_lr", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.equal_lr", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.equal_lr"], ["    ", "def", "__init__", "(", "self", ",", "fin", ",", "fout", ",", "opt", ",", "use_se", "=", "False", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Attributes", "\n", "self", ".", "learned_shortcut", "=", "(", "fin", "!=", "fout", ")", "\n", "fmiddle", "=", "min", "(", "fin", ",", "fout", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "pad_type", "=", "'nozero'", "\n", "self", ".", "use_se", "=", "use_se", "\n", "\n", "# create conv layers", "\n", "if", "self", ".", "pad_type", "!=", "'zero'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "dilation", ")", "\n", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "fin", ",", "fmiddle", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "fmiddle", ",", "fout", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "fin", ",", "fmiddle", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "fmiddle", ",", "fout", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ")", "\n", "", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "conv_s", "=", "nn", ".", "Conv2d", "(", "fin", ",", "fout", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# apply spectral norm if specified", "\n", "", "if", "'spectral'", "in", "opt", ".", "norm_G", ":", "\n", "            ", "if", "opt", ".", "eqlr_sn", ":", "\n", "                ", "self", ".", "conv_0", "=", "equal_lr", "(", "self", ".", "conv_0", ")", "\n", "self", ".", "conv_1", "=", "equal_lr", "(", "self", ".", "conv_1", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "                    ", "self", ".", "conv_s", "=", "equal_lr", "(", "self", ".", "conv_s", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "conv_0", "=", "spectral_norm", "(", "self", ".", "conv_0", ")", "\n", "self", ".", "conv_1", "=", "spectral_norm", "(", "self", ".", "conv_1", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "                    ", "self", ".", "conv_s", "=", "spectral_norm", "(", "self", ".", "conv_s", ")", "\n", "\n", "# define normalization layers", "\n", "", "", "", "spade_config_str", "=", "opt", ".", "norm_G", ".", "replace", "(", "'spectral'", ",", "''", ")", "\n", "if", "'spade_ic'", "in", "opt", ":", "\n", "            ", "ic", "=", "opt", ".", "spade_ic", "\n", "", "else", ":", "\n", "            ", "ic", "=", "0", "+", "(", "3", "if", "'warp'", "in", "opt", ".", "CBN_intype", "else", "0", ")", "+", "(", "opt", ".", "semantic_nc", "if", "'mask'", "in", "opt", ".", "CBN_intype", "else", "0", ")", "\n", "\n", "", "self", ".", "norm_0", "=", "SPADE", "(", "spade_config_str", ",", "fin", ",", "ic", ",", "PONO", "=", "opt", ".", "PONO", ",", "use_apex", "=", "opt", ".", "apex", ")", "\n", "self", ".", "norm_1", "=", "SPADE", "(", "spade_config_str", ",", "fmiddle", ",", "ic", ",", "PONO", "=", "opt", ".", "PONO", ",", "use_apex", "=", "opt", ".", "apex", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "norm_s", "=", "SPADE", "(", "spade_config_str", ",", "fin", ",", "ic", ",", "PONO", "=", "opt", ".", "PONO", ",", "use_apex", "=", "opt", ".", "apex", ")", "\n", "\n", "", "if", "use_se", ":", "\n", "            ", "self", ".", "se_layar", "=", "SELayer", "(", "fout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.forward": [[151, 167], ["architecture.Ada_SPADEResnetBlock.shortcut", "architecture.Ada_SPADEResnetBlock.conv_0", "architecture.Ada_SPADEResnetBlock.conv_1", "architecture.Ada_SPADEResnetBlock.conv_0", "architecture.Ada_SPADEResnetBlock.conv_1", "architecture.Ada_SPADEResnetBlock.pad", "architecture.Ada_SPADEResnetBlock.pad", "architecture.Ada_SPADEResnetBlock.se_layar", "architecture.Ada_SPADEResnetBlock.actvn", "architecture.Ada_SPADEResnetBlock.actvn", "architecture.Ada_SPADEResnetBlock.se_layar", "architecture.Ada_SPADEResnetBlock.actvn", "architecture.Ada_SPADEResnetBlock.actvn", "architecture.Ada_SPADEResnetBlock.norm_0", "architecture.Ada_SPADEResnetBlock.norm_1", "architecture.Ada_SPADEResnetBlock.norm_0", "architecture.Ada_SPADEResnetBlock.norm_1"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.shortcut", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.actvn"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "seg1", ")", ":", "\n", "        ", "x_s", "=", "self", ".", "shortcut", "(", "x", ",", "seg1", ")", "\n", "if", "self", ".", "pad_type", "!=", "'zero'", ":", "\n", "            ", "dx", "=", "self", ".", "conv_0", "(", "self", ".", "pad", "(", "self", ".", "actvn", "(", "self", ".", "norm_0", "(", "x", ",", "seg1", ")", ")", ")", ")", "\n", "dx", "=", "self", ".", "conv_1", "(", "self", ".", "pad", "(", "self", ".", "actvn", "(", "self", ".", "norm_1", "(", "dx", ",", "seg1", ")", ")", ")", ")", "\n", "if", "self", ".", "use_se", ":", "\n", "                ", "dx", "=", "self", ".", "se_layar", "(", "dx", ")", "\n", "", "", "else", ":", "\n", "            ", "dx", "=", "self", ".", "conv_0", "(", "self", ".", "actvn", "(", "self", ".", "norm_0", "(", "x", ",", "seg1", ")", ")", ")", "\n", "dx", "=", "self", ".", "conv_1", "(", "self", ".", "actvn", "(", "self", ".", "norm_1", "(", "dx", ",", "seg1", ")", ")", ")", "\n", "if", "self", ".", "use_se", ":", "\n", "                ", "dx", "=", "self", ".", "se_layar", "(", "dx", ")", "\n", "\n", "", "", "out", "=", "x_s", "+", "dx", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.shortcut": [[168, 174], ["architecture.Ada_SPADEResnetBlock.conv_s", "architecture.Ada_SPADEResnetBlock.norm_s"], "methods", ["None"], ["", "def", "shortcut", "(", "self", ",", "x", ",", "seg1", ")", ":", "\n", "        ", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "x_s", "=", "self", ".", "conv_s", "(", "self", ".", "norm_s", "(", "x", ",", "seg1", ")", ")", "\n", "", "else", ":", "\n", "            ", "x_s", "=", "x", "\n", "", "return", "x_s", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.actvn": [[175, 177], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "actvn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "leaky_relu", "(", "x", ",", "2e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Attention.__init__": [[179, 194], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch", ",", "use_sn", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Channel multiplier", "\n", "self", ".", "ch", "=", "ch", "\n", "self", ".", "theta", "=", "nn", ".", "Conv2d", "(", "self", ".", "ch", ",", "self", ".", "ch", "//", "8", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Conv2d", "(", "self", ".", "ch", ",", "self", ".", "ch", "//", "8", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "g", "=", "nn", ".", "Conv2d", "(", "self", ".", "ch", ",", "self", ".", "ch", "//", "2", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "o", "=", "nn", ".", "Conv2d", "(", "self", ".", "ch", "//", "2", ",", "self", ".", "ch", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "if", "use_sn", ":", "\n", "            ", "self", ".", "theta", "=", "spectral_norm", "(", "self", ".", "theta", ")", "\n", "self", ".", "phi", "=", "spectral_norm", "(", "self", ".", "phi", ")", "\n", "self", ".", "g", "=", "spectral_norm", "(", "self", ".", "g", ")", "\n", "self", ".", "o", "=", "spectral_norm", "(", "self", ".", "o", ")", "\n", "# Learnable gain parameter", "\n", "", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Attention.forward": [[195, 209], ["architecture.Attention.theta", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "theta.view.view.view", "phi.view.view.view", "g.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "architecture.Attention.o", "architecture.Attention.phi", "architecture.Attention.g", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "theta.view.view.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "# Apply convs", "\n", "        ", "theta", "=", "self", ".", "theta", "(", "x", ")", "\n", "phi", "=", "F", ".", "max_pool2d", "(", "self", ".", "phi", "(", "x", ")", ",", "[", "2", ",", "2", "]", ")", "\n", "g", "=", "F", ".", "max_pool2d", "(", "self", ".", "g", "(", "x", ")", ",", "[", "2", ",", "2", "]", ")", "\n", "# Perform reshapes", "\n", "theta", "=", "theta", ".", "view", "(", "-", "1", ",", "self", ".", "ch", "//", "8", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", ")", "\n", "phi", "=", "phi", ".", "view", "(", "-", "1", ",", "self", ".", "ch", "//", "8", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", "//", "4", ")", "\n", "g", "=", "g", ".", "view", "(", "-", "1", ",", "self", ".", "ch", "//", "2", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", "//", "4", ")", "\n", "# Matmul and softmax to get attention maps", "\n", "beta", "=", "F", ".", "softmax", "(", "torch", ".", "bmm", "(", "theta", ".", "transpose", "(", "1", ",", "2", ")", ",", "phi", ")", ",", "-", "1", ")", "\n", "# Attention map times g path", "\n", "o", "=", "self", ".", "o", "(", "torch", ".", "bmm", "(", "g", ",", "beta", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "ch", "//", "2", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", ")", "\n", "return", "self", ".", "gamma", "*", "o", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.ResnetBlock.__init__": [[213, 223], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "False", ")", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "pw", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "pw", ")", ",", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "kernel_size", ")", ")", ",", "\n", "activation", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "pw", ")", ",", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "kernel_size", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.ResnetBlock.forward": [[225, 229], ["architecture.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv_block", "(", "x", ")", "\n", "out", "=", "x", "+", "y", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.VGG19.__init__": [[233, 254], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "architecture.VGG19.slice1.add_module", "architecture.VGG19.slice2.add_module", "architecture.VGG19.slice3.add_module", "architecture.VGG19.slice4.add_module", "architecture.VGG19.slice5.add_module", "architecture.VGG19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "torchvision", ".", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "#r11", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "#r21", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "#r31", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "#r41", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "#r51", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.VGG19.forward": [[255, 263], ["architecture.VGG19.slice1", "architecture.VGG19.slice2", "architecture.VGG19.slice3", "architecture.VGG19.slice4", "architecture.VGG19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.SELayer.__init__": [[265, 273], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.SELayer.forward": [[275, 280], ["x.size", "architecture.SELayer.avg_pool().view", "architecture.SELayer.fc().view", "architecture.SELayer.expand_as", "architecture.SELayer.avg_pool", "architecture.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.RankNet.__init__": [[44, 49], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "patch_size", ",", "temperature", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.RankNet.forward": [[50, 76], ["int", "int", "ranking_attention.unfold_bucket", "ranking_attention.unfold_bucket", "unfold_bucket.mean().permute", "unfold_bucket.mean().permute", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "unfold_bucket.mean", "unfold_bucket.mean", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.einsum.transpose", "torch.einsum.transpose"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.unfold_bucket", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.unfold_bucket"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "topk", "=", "1", ")", ":", "\n", "        ", "b", ",", "N", ",", "D", "=", "q", ".", "shape", "\n", "w", "=", "int", "(", "N", "**", "(", "1", "/", "2", ")", ")", "\n", "stride", "=", "int", "(", "self", ".", "patch_size", "**", "(", "1", "/", "2", ")", ")", "\n", "\n", "b_q", "=", "unfold_bucket", "(", "self", ".", "patch_size", ",", "q", ")", "\n", "b_k", "=", "unfold_bucket", "(", "self", ".", "patch_size", ",", "k", ")", "# 1, 4096, 4, 256", "\n", "sq", "=", "b_q", ".", "mean", "(", "dim", "=", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "sk", "=", "b_k", ".", "mean", "(", "dim", "=", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# q = q.view(-1, w, w, D).permute(0, 3, 1, 2)", "\n", "# k = k.view(-1, w, w, D).permute(0, 3, 1, 2)", "\n", "# sq = F.unfold(q, kernel_size=self.opt.match_kernel, padding=int(", "\n", "#     self.opt.match_kernel // 2), stride=stride)", "\n", "# sk = F.unfold(k, kernel_size=self.opt.match_kernel, padding=int(", "\n", "#     self.opt.match_kernel // 2), stride=stride)", "\n", "\n", "Corr", "=", "torch", ".", "einsum", "(", "'bei,bej->bij'", ",", "sq", ",", "sk", ")", "\n", "# R_ = torch.matmul(sq, sk.permute(0, 2, 1))", "\n", "\n", "R", "=", "F", ".", "softmax", "(", "Corr", "*", "1000", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "R_", "=", "F", ".", "softmax", "(", "Corr", ".", "transpose", "(", "1", ",", "2", ")", "*", "1000", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# R = differentiable_topk(Corr, k=topk, temperature=self.temperature)", "\n", "# R_ = differentiable_topk(Corr.transpose(1, 2), k=topk, temperature=self.temperature)", "\n", "\n", "return", "R", ",", "R_", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.RAS.__init__": [[170, 177], ["torch.nn.Module.__init__", "ranking_attention.RankNet"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "patch_size", ",", "temperature", "=", "0.75", ",", "n_top", "=", "1", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "ranknet", "=", "RankNet", "(", "patch_size", "=", "self", ".", "patch_size", ",", "temperature", "=", "temperature", ",", "opt", "=", "opt", ")", "\n", "self", ".", "n_top", "=", "n_top", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.RAS.forward": [[178, 200], ["ranking_attention.unfold_bucket", "ranking_attention.unfold_bucket", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "b_k_r.reshape.reshape.reshape", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "dots_.view.view.view", "dots_.view.view.transpose"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.unfold_bucket", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.unfold_bucket"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "R", ")", ":", "\n", "        ", "b", ",", "N", ",", "D", "=", "q", ".", "shape", "\n", "buckets", "=", "N", "//", "self", ".", "patch_size", "\n", "\n", "# R, R_v = self.ranknet(q, k, topk=self.n_top)", "\n", "# R = R.type_as(q).to(q)  # [3, 256, 256]", "\n", "\n", "b_q", "=", "unfold_bucket", "(", "self", ".", "patch_size", ",", "q", ")", "\n", "b_k", "=", "unfold_bucket", "(", "self", ".", "patch_size", ",", "k", ")", "\n", "# print (R.shape, b_k.shape)", "\n", "\n", "b_k_r", "=", "torch", ".", "einsum", "(", "'buvk,bvtd->butkd'", ",", "R", ",", "b_k", ")", "#  2, 4096, 4, 3, 256", "\n", "b_k_r", "=", "b_k_r", ".", "reshape", "(", "b", ",", "buckets", ",", "self", ".", "patch_size", ",", "self", ".", "n_top", ",", "D", ")", "\n", "\n", "dots_", "=", "torch", ".", "einsum", "(", "'buid,bujkd->buijk'", ",", "b_q", ",", "b_k_r", ")", "\n", "dots_", "=", "dots_", ".", "view", "(", "b", ",", "buckets", ",", "self", ".", "patch_size", ",", "-", "1", ")", "# 2, 4096, 4, 12", "\n", "dots", "=", "(", "dots_", "*", "1000", ")", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "dots_v", "=", "(", "dots_", ".", "transpose", "(", "2", ",", "3", ")", "*", "1000", ")", ".", "softmax", "(", "dim", "=", "-", "1", ")", "# 2, 4096, 12, 4", "\n", "# dots = dots_.view(b, buckets, self.patch_size, -1)", "\n", "\n", "# R: [2, 4096, 4096, 3], dots: [2, 4096, 4, 12]", "\n", "return", "dots", ",", "dots_v", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.differentiable_topk_old": [[12, 26], ["range", "torch.cat", "torch.cat", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "topks.unsqueeze.unsqueeze", "topk_tensors.append", "x.scatter_", "torch.zeros_like", "torch.zeros_like", "float"], "function", ["None"], ["def", "differentiable_topk_old", "(", "x", ",", "k", ",", "temperature", "=", "1.", ")", ":", "\n", "    ", "*", "_", ",", "n", ",", "dim", "=", "x", ".", "shape", "\n", "topk_tensors", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "        ", "is_last", "=", "i", "==", "(", "k", "-", "1", ")", "\n", "values", ",", "indices", "=", "(", "x", "*", "100", ")", ".", "softmax", "(", "dim", "=", "-", "1", ")", ".", "topk", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "topks", "=", "torch", ".", "zeros_like", "(", "x", ")", ".", "scatter_", "(", "-", "1", ",", "indices", ",", "values", ")", "\n", "topks", "=", "topks", ".", "unsqueeze", "(", "-", "1", ")", "\n", "topk_tensors", ".", "append", "(", "topks", ")", "\n", "if", "not", "is_last", ":", "\n", "            ", "x", ".", "scatter_", "(", "-", "1", ",", "indices", ",", "float", "(", "'-inf'", ")", ")", "\n", "", "", "topks", "=", "torch", ".", "cat", "(", "topk_tensors", ",", "dim", "=", "-", "1", ")", "\n", "return", "topks", "\n", "# return topks.reshape(*_, k * n, dim)", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.differentiable_topk": [[28, 41], ["range", "torch.cat", "torch.cat", "topk_tensors.append", "torch.cat.topk", "torch.cat.unsqueeze", "x.scatter_", "float"], "function", ["None"], ["", "def", "differentiable_topk", "(", "x", ",", "k", ",", "temperature", "=", "1.", ")", ":", "\n", "    ", "*", "_", ",", "n", ",", "dim", "=", "x", ".", "shape", "\n", "topk_tensors", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "        ", "is_last", "=", "i", "==", "(", "k", "-", "1", ")", "\n", "topks", "=", "(", "x", "*", "100", ")", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "topk_tensors", ".", "append", "(", "topks", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "values", ",", "indices", "=", "topks", ".", "topk", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "if", "not", "is_last", ":", "\n", "            ", "x", ".", "scatter_", "(", "-", "1", ",", "indices", ",", "float", "(", "'-inf'", ")", ")", "\n", "", "", "topks", "=", "torch", ".", "cat", "(", "topk_tensors", ",", "dim", "=", "-", "1", ")", "\n", "return", "topks", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.unfold_bucket": [[78, 90], ["int", "int", "int", "input.view().permute.view().permute", "torch.unfold", "output.view().permute.view().permute", "input.view().permute.view", "output.view().permute.view"], "function", ["None"], ["", "", "def", "unfold_bucket", "(", "patch_size", ",", "input", ")", ":", "\n", "    ", "b", ",", "N", ",", "D", "=", "input", ".", "shape", "# _, 16384, 256", "\n", "w", "=", "int", "(", "N", "**", "(", "1", "/", "2", ")", ")", "\n", "patch_w", "=", "int", "(", "patch_size", "**", "(", "1", "/", "2", ")", ")", "\n", "stride", "=", "patch_w", "\n", "n_patch", "=", "int", "(", "w", "/", "patch_w", ")", "\n", "\n", "input", "=", "input", ".", "view", "(", "-", "1", ",", "w", ",", "w", ",", "D", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "#_, 256, 128, 128", "\n", "output", "=", "F", ".", "unfold", "(", "input", ",", "kernel_size", "=", "patch_w", ",", "stride", "=", "stride", ")", "#_, 256*2*2, 64 * 64", "\n", "output", "=", "output", ".", "view", "(", "b", ",", "D", ",", "patch_w", "*", "patch_w", ",", "n_patch", "*", "n_patch", ")", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "# _, 4096, 4, 256", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.fold_bucket": [[91, 101], ["input.permute().contiguous().view.permute().contiguous().view", "int", "int", "torch.fold", "output.permute.permute", "input.permute().contiguous().view.permute().contiguous", "input.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "fold_bucket", "(", "input", ")", ":", "\n", "    ", "b", ",", "n_patch", ",", "patch_size", ",", "D", "=", "input", ".", "shape", "# 3, 256, 64, 3", "\n", "input", "=", "input", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "b", ",", "-", "1", ",", "n_patch", ")", "\n", "patch_w", "=", "int", "(", "patch_size", "**", "(", "1", "/", "2", ")", ")", "\n", "w", "=", "int", "(", "(", "patch_size", "*", "n_patch", ")", "**", "(", "1", "/", "2", ")", ")", "\n", "stride", "=", "patch_w", "\n", "output", "=", "F", ".", "fold", "(", "input", ",", "output_size", "=", "(", "w", ",", "w", ")", ",", "kernel_size", "=", "(", "patch_w", ",", "patch_w", ")", ",", "stride", "=", "stride", ")", "\n", "output", "=", "output", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.align_feature": [[103, 131], ["ranking_attention.unfold_bucket", "torch.einsum", "torch.einsum", "b_v_r.reshape.reshape", "torch.einsum", "torch.einsum", "ranking_attention.fold_bucket", "out.reshape.reshape"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.unfold_bucket", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.fold_bucket"], ["", "def", "align_feature", "(", "R", ",", "dots", ",", "v", ")", ":", "\n", "    ", "_", ",", "bucket_num", ",", "patch_size", ",", "_", "=", "dots", ".", "shape", "\n", "b", ",", "N", ",", "D", "=", "v", ".", "shape", "\n", "b_v", "=", "unfold_bucket", "(", "patch_size", ",", "v", ")", "\n", "b_v_r", "=", "torch", ".", "einsum", "(", "'buvk,bvtd->butkd'", ",", "R", ",", "b_v", ")", "\n", "\n", "b_v_r", "=", "b_v_r", ".", "reshape", "(", "b", ",", "bucket_num", ",", "-", "1", ",", "D", ")", "\n", "b_v", "=", "b_v_r", "# [2, 4096, 12, 3]     dots: [2, 4096, 4, 12]", "\n", "# out = b_v[:, :, 0, :]", "\n", "\n", "out", "=", "torch", ".", "einsum", "(", "'buij,buje->buie'", ",", "dots", ",", "b_v", ")", "\n", "out", "=", "fold_bucket", "(", "out", ")", "\n", "out", "=", "out", ".", "reshape", "(", "b", ",", "N", ",", "D", ")", "\n", "\n", "# im = out[0].view(64, 64, 3)", "\n", "# im = im.cpu().detach().numpy()", "\n", "# im = ((im + 1.0) * 128).astype('uint8')", "\n", "# im = Image.fromarray(im).resize((256, 256))", "\n", "# im.save('models/networks/warp.png')", "\n", "#", "\n", "# im = v[0].view(64, 64, 3)", "\n", "# im = im.cpu().detach().numpy()", "\n", "# im = ((im + 1.0) * 128).astype('uint8')", "\n", "# im = Image.fromarray(im).resize((256, 256))", "\n", "# im.save('models/networks/exemplar.png')", "\n", "\n", "# print(1 / 0)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.align_feature_v": [[134, 167], ["ranking_attention.unfold_bucket", "dots.view.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "ranking_attention.fold_bucket", "out.reshape.reshape"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.unfold_bucket", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ranking_attention.fold_bucket"], ["", "def", "align_feature_v", "(", "R", ",", "dots", ",", "v", ")", ":", "\n", "    ", "_", ",", "patch_num", ",", "_", ",", "patch_size", "=", "dots", ".", "shape", "\n", "b", ",", "N", ",", "D", "=", "v", ".", "shape", "\n", "# R 4096, 4096, 3   , dots 4096, 12, 4", "\n", "\n", "b_v", "=", "unfold_bucket", "(", "patch_size", ",", "v", ")", "# # _, 4096, 4, 3", "\n", "\n", "dots", "=", "dots", ".", "view", "(", "b", ",", "patch_num", ",", "patch_size", ",", "-", "1", ",", "patch_size", ")", "\n", "\n", "# print(dots.shape, R.shape)", "\n", "# print(1/0)", "\n", "\n", "b_v_l", "=", "torch", ".", "einsum", "(", "'buikj,bujd->buikd'", ",", "dots", ",", "b_v", ")", "# 2, 4096, 4, 3, 256", "\n", "b_v_r", "=", "torch", ".", "einsum", "(", "'buvk,bvikd->buid'", ",", "R", ",", "b_v_l", ")", "# 2, 4096, 4, 256", "\n", "\n", "# b_v_r = torch.einsum('buvk,bvtd->butkd', R, b_v)", "\n", "# b_v_r = b_v_r.reshape(b, bucket_num, -1, D)", "\n", "# b_v = b_v_r  # [2, 4096, 12, 3]     dots: [2, 4096, 4, 12]", "\n", "# out = b_v[:, :, 0, :]", "\n", "# b_v = b_v_r[:, :, :, 0, :]", "\n", "\n", "# out = torch.einsum('buij,bujd->buid', dots, b_v)", "\n", "out", "=", "fold_bucket", "(", "b_v_r", ")", "\n", "out", "=", "out", ".", "reshape", "(", "b", ",", "N", ",", "D", ")", "\n", "\n", "# im = out[0].view(128, 128, 3)", "\n", "# # im = im[:, :, 0, :]", "\n", "# im = im.cpu().detach().numpy()", "\n", "# im = ((im + 1.0) * 128).astype('uint8')", "\n", "# im = Image.fromarray(im)", "\n", "# im.save('models/networks/warp_cycle.png')", "\n", "# print(1 / 0)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.loss.GANLoss.__init__": [[16, 37], ["torch.Module.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gan_mode", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_tensor", "=", "None", "\n", "self", ".", "fake_label_tensor", "=", "None", "\n", "self", ".", "zero_tensor", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "self", ".", "gan_mode", "=", "gan_mode", "\n", "self", ".", "opt", "=", "opt", "\n", "if", "gan_mode", "==", "'ls'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'original'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'w'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unexpected gan_mode {}'", ".", "format", "(", "gan_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.loss.GANLoss.get_target_tensor": [[38, 49], ["loss.GANLoss.real_label_tensor.expand_as", "loss.GANLoss.fake_label_tensor.expand_as", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.real_label_tensor.requires_grad_", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.fake_label_tensor.requires_grad_", "loss.GANLoss.Tensor", "loss.GANLoss.Tensor"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "if", "self", ".", "real_label_tensor", "is", "None", ":", "\n", "                ", "self", ".", "real_label_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "real_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "fake_label_tensor", "is", "None", ":", "\n", "                ", "self", ".", "fake_label_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "fake_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.loss.GANLoss.get_zero_tensor": [[50, 55], ["loss.GANLoss.zero_tensor.expand_as", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.zero_tensor.requires_grad_", "loss.GANLoss.Tensor"], "methods", ["None"], ["", "", "def", "get_zero_tensor", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "zero_tensor", "is", "None", ":", "\n", "            ", "self", ".", "zero_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "0", ")", "\n", "self", ".", "zero_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "zero_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.loss.GANLoss.loss": [[56, 82], ["F.binary_cross_entropy_with_logits.GANLoss.get_target_tensor", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "F.binary_cross_entropy_with_logits.GANLoss.get_target_tensor", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "input.mean", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "input.mean", "F.binary_cross_entropy_with_logits.GANLoss.get_zero_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "F.binary_cross_entropy_with_logits.GANLoss.get_zero_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.loss.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.loss.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.mse_loss", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.mse_loss", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.mse_loss", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.loss.GANLoss.get_zero_tensor", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.loss.GANLoss.get_zero_tensor"], ["", "def", "loss", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "gan_mode", "==", "'original'", ":", "# cross entropy loss", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "input", ",", "target_tensor", ")", "\n", "return", "loss", "\n", "", "elif", "self", ".", "gan_mode", "==", "'ls'", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "F", ".", "mse_loss", "(", "input", ",", "target_tensor", ")", "\n", "", "elif", "self", ".", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "if", "for_discriminator", ":", "\n", "                ", "if", "target_is_real", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "else", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "-", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "", "else", ":", "\n", "                ", "assert", "target_is_real", ",", "\"The generator's hinge loss must be aiming for real\"", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "input", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "# wgan", "\n", "            ", "if", "target_is_real", ":", "\n", "                ", "return", "-", "input", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "input", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.loss.GANLoss.__call__": [[83, 98], ["isinstance", "loss.GANLoss.loss", "isinstance", "loss.GANLoss.loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "loss.GANLoss.size", "loss.GANLoss.view", "len", "loss.GANLoss.size"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.loss.GANLoss.loss", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.loss.GANLoss.loss"], ["", "", "", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "# computing loss is a bit complicated because |input| may not be", "\n", "# a tensor, but list of tensors in case of multiscale discriminator", "\n", "        ", "if", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "pred_i", "in", "input", ":", "\n", "                ", "if", "isinstance", "(", "pred_i", ",", "list", ")", ":", "\n", "                    ", "pred_i", "=", "pred_i", "[", "-", "1", "]", "\n", "", "loss_tensor", "=", "self", ".", "loss", "(", "pred_i", ",", "target_is_real", ",", "for_discriminator", ")", "\n", "bs", "=", "1", "if", "len", "(", "loss_tensor", ".", "size", "(", ")", ")", "==", "0", "else", "loss_tensor", ".", "size", "(", "0", ")", "\n", "new_loss", "=", "torch", ".", "mean", "(", "loss_tensor", ".", "view", "(", "bs", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "loss", "+=", "new_loss", "\n", "", "return", "loss", "/", "len", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "loss", "(", "input", ",", "target_is_real", ",", "for_discriminator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.loss.VGGLoss.__init__": [[102, 111], ["torch.Module.__init__", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "models.networks.correspondence.VGG19_feature_color_torchversion().cuda", "models.networks.architecture.VGG19().cuda", "models.networks.correspondence.VGG19_feature_color_torchversion", "models.networks.architecture.VGG19"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ",", "vgg_normal_correct", "=", "False", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg_normal_correct", "=", "vgg_normal_correct", "\n", "if", "vgg_normal_correct", ":", "\n", "            ", "self", ".", "vgg", "=", "VGG19_feature_color_torchversion", "(", "vgg_normal_correct", "=", "True", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "vgg", "=", "VGG19", "(", ")", ".", "cuda", "(", ")", "\n", "", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.loss.VGGLoss.forward": [[112, 121], ["range", "len", "loss.VGGLoss.vgg", "loss.VGGLoss.vgg", "loss.VGGLoss.vgg", "loss.VGGLoss.vgg", "loss.VGGLoss.criterion", "y_vgg[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "vgg_normal_correct", ":", "\n", "            ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ",", "[", "'r11'", ",", "'r21'", ",", "'r31'", ",", "'r41'", ",", "'r51'", "]", ",", "preprocess", "=", "True", ")", ",", "self", ".", "vgg", "(", "y", ",", "[", "'r11'", ",", "'r21'", ",", "'r31'", ",", "'r41'", ",", "'r51'", "]", ",", "preprocess", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vgg", ")", ")", ":", "\n", "            ", "loss", "+=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "i", "]", ",", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.loss.KLDLoss.forward": [[125, 127], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "logvar.exp", "mu.pow"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "return", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "logvar", "-", "mu", ".", "pow", "(", "2", ")", "-", "logvar", ".", "exp", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.SEACEGenerator.modify_commandline_options": [[19, 23], ["parser.set_defaults"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "set_defaults", "(", "norm_G", "=", "'spectralspadesyncbatch3x3'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.SEACEGenerator.__init__": [[24, 49], ["models.networks.base_network.BaseNetwork.__init__", "generator.SEACEGenerator.compute_latent_vector_size", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.architecture.SEACEResnetBlock", "models.networks.architecture.SEACEResnetBlock", "models.networks.architecture.SEACEResnetBlock", "models.networks.architecture.SEACEResnetBlock", "models.networks.architecture.SEACEResnetBlock", "models.networks.architecture.Attention", "models.networks.architecture.SEACEResnetBlock", "models.networks.architecture.SEACEResnetBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.SEACEGenerator.compute_latent_vector_size"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "nf", "=", "64", "\n", "self", ".", "sw", ",", "self", ".", "sh", "=", "self", ".", "compute_latent_vector_size", "(", "opt", ")", "\n", "\n", "ic", "=", "opt", ".", "semantic_nc", "\n", "self", ".", "ref1_init", "=", "nn", ".", "Conv2d", "(", "3", ",", "ic", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "8", "*", "nf", ",", "16", "*", "nf", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "# , 256, 512, 256, 256", "\n", "self", ".", "G_head_0", "=", "SEACEResnetBlock", "(", "16", "*", "nf", ",", "16", "*", "nf", ",", "opt", ",", "feat_nc", "=", "256", ")", "\n", "\n", "self", ".", "G_middle_0", "=", "SEACEResnetBlock", "(", "16", "*", "nf", ",", "16", "*", "nf", ",", "opt", ",", "feat_nc", "=", "256", ")", "\n", "self", ".", "G_middle_1", "=", "SEACEResnetBlock", "(", "16", "*", "nf", ",", "16", "*", "nf", ",", "opt", ",", "feat_nc", "=", "512", ")", "\n", "\n", "self", ".", "G_up_0", "=", "SEACEResnetBlock", "(", "16", "*", "nf", ",", "8", "*", "nf", ",", "opt", ",", "feat_nc", "=", "256", ")", "\n", "self", ".", "G_up_1", "=", "SEACEResnetBlock", "(", "8", "*", "nf", ",", "4", "*", "nf", ",", "opt", ",", "feat_nc", "=", "256", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "4", "*", "nf", ",", "'spectral'", "in", "opt", ".", "norm_G", ")", "\n", "\n", "self", ".", "G_out_0", "=", "SEACEResnetBlock", "(", "4", "*", "nf", ",", "2", "*", "nf", ",", "opt", ",", "feat_nc", "=", "128", ")", "\n", "self", ".", "G_out_1", "=", "SEACEResnetBlock", "(", "2", "*", "nf", ",", "1", "*", "nf", ",", "opt", ",", "feat_nc", "=", "ic", ")", "\n", "\n", "self", ".", "conv_img1", "=", "nn", ".", "Conv2d", "(", "1", "*", "nf", ",", "3", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "# self.conv_confi1 = nn.Conv2d(1 * nf, 3, 3, padding=1)", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.SEACEGenerator.compute_latent_vector_size": [[51, 56], ["round"], "methods", ["None"], ["", "def", "compute_latent_vector_size", "(", "self", ",", "opt", ")", ":", "\n", "        ", "num_up_layers", "=", "5", "\n", "sw", "=", "opt", ".", "crop_size", "//", "(", "2", "**", "num_up_layers", ")", "\n", "sh", "=", "round", "(", "sw", "/", "opt", ".", "aspect_ratio", ")", "\n", "return", "sw", ",", "sh", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.SEACEGenerator.forward": [[57, 105], ["generator.SEACEGenerator.ref1_init", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate", "torch.interpolate", "torch.interpolate", "generator.SEACEGenerator.fc", "generator.SEACEGenerator.G_head_0", "generator.SEACEGenerator.up", "generator.SEACEGenerator.G_middle_0", "generator.SEACEGenerator.G_middle_1", "generator.SEACEGenerator.up", "generator.SEACEGenerator.G_up_0", "generator.SEACEGenerator.up", "generator.SEACEGenerator.G_up_1", "generator.SEACEGenerator.attn", "generator.SEACEGenerator.up", "generator.SEACEGenerator.G_out_0", "generator.SEACEGenerator.up", "generator.SEACEGenerator.G_out_1", "generator.SEACEGenerator.conv_img1", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "cmap.repeat", "cmap.repeat", "cmap.repeat", "cmap.repeat", "cmap.repeat", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "seg_feat1.size", "seg_feat2.size", "seg_feat3.size", "seg_feat4.size", "seg_feat5.size", "seg_feat1.size", "seg_feat2.size", "seg_feat3.size", "seg_feat4.size", "seg_feat5.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "warp_out", "=", "None", ")", ":", "\n", "\n", "        ", "seg_feat1", ",", "seg_feat2", ",", "seg_feat3", ",", "seg_feat4", ",", "seg_feat5", ",", "ref_feat1", ",", "ref_feat2", ",", "ref_feat3", ",", "ref_feat4", ",", "ref_feat5", ",", "cmap", "=", "warp_out", "\n", "#  3, 128, 256, 256, 256", "\n", "ref_feat1", "=", "self", ".", "ref1_init", "(", "ref_feat1", ")", "\n", "\n", "cmap1", "=", "F", ".", "interpolate", "(", "cmap", ".", "repeat", "(", "1", ",", "seg_feat1", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", ",", "size", "=", "seg_feat1", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "# 8", "\n", "cmap2", "=", "F", ".", "interpolate", "(", "cmap", ".", "repeat", "(", "1", ",", "seg_feat2", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", ",", "size", "=", "seg_feat2", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "# 16", "\n", "cmap3", "=", "F", ".", "interpolate", "(", "cmap", ".", "repeat", "(", "1", ",", "seg_feat3", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", ",", "size", "=", "seg_feat3", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "# 32", "\n", "cmap4", "=", "F", ".", "interpolate", "(", "cmap", ".", "repeat", "(", "1", ",", "seg_feat4", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", ",", "size", "=", "seg_feat4", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "#", "\n", "cmap5", "=", "F", ".", "interpolate", "(", "cmap", ".", "repeat", "(", "1", ",", "seg_feat5", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", ",", "size", "=", "seg_feat5", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "# 8", "\n", "\n", "ref_feat1", "=", "F", ".", "interpolate", "(", "ref_feat1", ",", "size", "=", "seg_feat1", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "ref_feat2", "=", "F", ".", "interpolate", "(", "ref_feat2", ",", "size", "=", "seg_feat2", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "ref_feat3", "=", "F", ".", "interpolate", "(", "ref_feat3", ",", "size", "=", "seg_feat3", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "ref_feat4", "=", "F", ".", "interpolate", "(", "ref_feat4", ",", "size", "=", "seg_feat4", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "ref_feat5", "=", "F", ".", "interpolate", "(", "ref_feat5", ",", "size", "=", "seg_feat5", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "fusion1", "=", "seg_feat1", "*", "(", "1", "-", "cmap1", ")", "+", "ref_feat1", "*", "cmap1", "\n", "fusion2", "=", "seg_feat2", "*", "(", "1", "-", "cmap2", ")", "+", "ref_feat2", "*", "cmap2", "\n", "fusion3", "=", "seg_feat3", "*", "(", "1", "-", "cmap3", ")", "+", "ref_feat3", "*", "cmap3", "\n", "fusion4", "=", "seg_feat4", "*", "(", "1", "-", "cmap4", ")", "+", "ref_feat4", "*", "cmap4", "\n", "fusion5", "=", "seg_feat5", "*", "(", "1", "-", "cmap5", ")", "+", "ref_feat5", "*", "cmap5", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "seg_feat5", ",", "ref_feat5", ")", ",", "1", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "(", "self", ".", "sh", ",", "self", ".", "sw", ")", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "G_head_0", "(", "x", ",", "fusion5", ")", "# 8", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "G_middle_0", "(", "x", ",", "fusion5", ")", "# 16", "\n", "x", "=", "self", ".", "G_middle_1", "(", "x", ",", "fusion4", ")", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "G_up_0", "(", "x", ",", "fusion3", ")", "# 32", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "G_up_1", "(", "x", ",", "fusion3", ")", "# 64", "\n", "x", "=", "self", ".", "attn", "(", "x", ")", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "# 128", "\n", "x", "=", "self", ".", "G_out_0", "(", "x", ",", "fusion2", ")", "# 128", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "G_out_1", "(", "x", ",", "fusion1", ")", "# 256", "\n", "\n", "x", "=", "self", ".", "conv_img1", "(", "F", ".", "leaky_relu", "(", "x", ",", "2e-1", ")", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.AdaptiveFeatureGenerator.modify_commandline_options": [[111, 118], ["parser.set_defaults", "parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "set_defaults", "(", "norm_G", "=", "'spectralspadesyncbatch3x3'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_upsampling_layers'", ",", "\n", "choices", "=", "(", "'normal'", ",", "'more'", ",", "'most'", ")", ",", "default", "=", "'normal'", ",", "\n", "help", "=", "\"If 'more', adds upsampling layer between the two middle resnet blocks\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.AdaptiveFeatureGenerator.__init__": [[119, 147], ["models.networks.base_network.BaseNetwork.__init__", "int", "models.networks.normalization.get_nonspade_norm_layer", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.networks.architecture.Ada_SPADEResnetBlock", "models.networks.architecture.Ada_SPADEResnetBlock", "models.networks.architecture.Ada_SPADEResnetBlock", "models.networks.architecture.Ada_SPADEResnetBlock", "models.networks.normalization.get_nonspade_norm_layer.", "torch.Upsample", "torch.Upsample", "torch.Upsample", "numpy.ceil", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.architecture.Attention", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.get_nonspade_norm_layer"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "# TODO: kernel=4, concat noise, or change architecture to vgg feature pyramid", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "kw", "=", "3", "\n", "pw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "ndf", "=", "64", "\n", "nf", "=", "64", "\n", "norm_layer", "=", "get_nonspade_norm_layer", "(", "opt", ",", "opt", ".", "norm_E", ")", "\n", "self", ".", "layer1", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "opt", ".", "spade_ic", ",", "ndf", ",", "kw", ",", "stride", "=", "1", ",", "padding", "=", "pw", ")", ")", "\n", "self", ".", "layer2", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "1", ",", "ndf", "*", "2", ",", "opt", ".", "adaptor_kernel", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", "\n", "self", ".", "layer3", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kw", ",", "stride", "=", "1", ",", "padding", "=", "pw", ")", ")", "\n", "self", ".", "layer4", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "opt", ".", "adaptor_kernel", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", "\n", "self", ".", "layer5", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "8", ",", "kw", ",", "stride", "=", "1", ",", "padding", "=", "pw", ")", ")", "\n", "\n", "self", ".", "actvn", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "head_0", "=", "Ada_SPADEResnetBlock", "(", "8", "*", "nf", ",", "8", "*", "nf", ",", "opt", ",", "use_se", "=", "opt", ".", "adaptor_se", ")", "\n", "\n", "# self.head_1 = Ada_SPADEResnetBlock(8 * nf, 8 * nf, opt, use_se=opt.adaptor_se)", "\n", "if", "opt", ".", "adaptor_nonlocal", ":", "\n", "            ", "self", ".", "attn", "=", "Attention", "(", "8", "*", "nf", ",", "False", ")", "\n", "", "self", ".", "G_middle_0", "=", "Ada_SPADEResnetBlock", "(", "8", "*", "nf", ",", "8", "*", "nf", ",", "opt", ",", "use_se", "=", "opt", ".", "adaptor_se", ")", "\n", "self", ".", "G_middle_1", "=", "Ada_SPADEResnetBlock", "(", "8", "*", "nf", ",", "4", "*", "nf", ",", "opt", ",", "use_se", "=", "opt", ".", "adaptor_se", ")", "\n", "\n", "self", ".", "deeper2", "=", "Ada_SPADEResnetBlock", "(", "4", "*", "nf", ",", "4", "*", "nf", ",", "opt", ",", "dilation", "=", "4", ")", "\n", "self", ".", "degridding0", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "4", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "dilation", "=", "2", ")", ")", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.AdaptiveFeatureGenerator.forward": [[148, 177], ["generator.AdaptiveFeatureGenerator.layer1", "generator.AdaptiveFeatureGenerator.layer2", "generator.AdaptiveFeatureGenerator.layer3", "generator.AdaptiveFeatureGenerator.layer4", "generator.AdaptiveFeatureGenerator.layer5", "generator.AdaptiveFeatureGenerator.head_0", "generator.AdaptiveFeatureGenerator.G_middle_0", "generator.AdaptiveFeatureGenerator.G_middle_1", "generator.AdaptiveFeatureGenerator.deeper2", "generator.AdaptiveFeatureGenerator.degridding0", "generator.AdaptiveFeatureGenerator.actvn", "generator.AdaptiveFeatureGenerator.actvn", "generator.AdaptiveFeatureGenerator.actvn", "generator.AdaptiveFeatureGenerator.actvn", "generator.AdaptiveFeatureGenerator.attn", "generator.AdaptiveFeatureGenerator.up"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.architecture.Ada_SPADEResnetBlock.actvn"], ["", "def", "forward", "(", "self", ",", "input", ",", "seg", ",", "multi", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer1", "(", "input", ")", "\n", "x", "=", "self", ".", "layer2", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "x2", "=", "x", "# 128", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "x3", "=", "x", "# 128", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "layer5", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "head_0", "(", "x", ",", "seg", ")", "\n", "x4", "=", "x", "# 64", "\n", "\n", "# x = self.head_1(x, seg)", "\n", "if", "self", ".", "opt", ".", "adaptor_nonlocal", ":", "\n", "            ", "x", "=", "self", ".", "attn", "(", "x", ")", "\n", "", "x", "=", "self", ".", "G_middle_0", "(", "x", ",", "seg", ")", "\n", "x", "=", "self", ".", "G_middle_1", "(", "x", ",", "seg", ")", "\n", "x5", "=", "x", "# 64", "\n", "\n", "# x = self.deeper0(x, seg)", "\n", "# x = self.deeper1(x, seg)", "\n", "x", "=", "self", ".", "deeper2", "(", "self", ".", "up", "(", "x", ")", ",", "seg", ")", "\n", "x", "=", "self", ".", "degridding0", "(", "x", ")", "\n", "\n", "if", "multi", "==", "True", ":", "\n", "            ", "return", "x2", ",", "x3", ",", "x4", ",", "x5", ",", "x", "#  , 256, 512, 256, 256", "\n", "", "else", ":", "\n", "            ", "return", "x5", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.DomainClassifier.__init__": [[180, 203], ["models.networks.base_network.BaseNetwork.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.sync_batchnorm.SynchronizedBatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.sync_batchnorm.SynchronizedBatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.sync_batchnorm.SynchronizedBatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "models.networks.sync_batchnorm.SynchronizedBatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "int", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "int"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "nf", "=", "opt", ".", "ngf", "\n", "kw", "=", "4", "if", "opt", ".", "domain_rela", "else", "3", "\n", "pw", "=", "int", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", "\n", "self", ".", "feature", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "4", "*", "nf", ",", "2", "*", "nf", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ",", "\n", "SynchronizedBatchNorm2d", "(", "2", "*", "nf", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "2", "*", "nf", ",", "nf", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ",", "\n", "SynchronizedBatchNorm2d", "(", "nf", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nf", ",", "int", "(", "nf", "//", "2", ")", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ",", "\n", "SynchronizedBatchNorm2d", "(", "int", "(", "nf", "//", "2", ")", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", ")", "#32*8*8", "\n", "model", "=", "[", "nn", ".", "Linear", "(", "int", "(", "nf", "//", "2", ")", "*", "8", "*", "8", ",", "100", ")", ",", "\n", "SynchronizedBatchNorm1d", "(", "100", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "]", "\n", "if", "opt", ".", "domain_rela", ":", "\n", "            ", "model", "+=", "[", "nn", ".", "Linear", "(", "100", ",", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "model", "+=", "[", "nn", ".", "Linear", "(", "100", ",", "2", ")", ",", "\n", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "]", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.DomainClassifier.forward": [[204, 208], ["generator.DomainClassifier.feature", "generator.DomainClassifier.classifier", "generator.DomainClassifier.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "feature", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.ReverseLayerF.forward": [[211, 216], ["x.view_as"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "alpha", ")", ":", "\n", "        ", "ctx", ".", "alpha", "=", "alpha", "\n", "\n", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.ReverseLayerF.backward": [[217, 222], ["grad_output.neg"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "output", "=", "grad_output", ".", "neg", "(", ")", "*", "ctx", ".", "alpha", "\n", "\n", "return", "output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.EMA.__init__": [[225, 229], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mu", ")", ":", "\n", "        ", "self", ".", "mu", "=", "mu", "\n", "self", ".", "shadow", "=", "{", "}", "\n", "self", ".", "original", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.EMA.register": [[230, 232], ["val.clone"], "methods", ["None"], ["", "def", "register", "(", "self", ",", "name", ",", "val", ")", ":", "\n", "        ", "self", ".", "shadow", "[", "name", "]", "=", "val", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.EMA.__call__": [[233, 240], ["model.named_parameters", "new_average.clone"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "model", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "param", ".", "requires_grad", ":", "\n", "                ", "assert", "name", "in", "self", ".", "shadow", "\n", "decay", "=", "self", ".", "mu", "\n", "new_average", "=", "(", "1.0", "-", "decay", ")", "*", "param", ".", "data", "+", "decay", "*", "self", ".", "shadow", "[", "name", "]", "\n", "self", ".", "shadow", "[", "name", "]", "=", "new_average", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.EMA.assign": [[241, 247], ["model.named_parameters", "param.data.clone"], "methods", ["None"], ["", "", "", "def", "assign", "(", "self", ",", "model", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "param", ".", "requires_grad", ":", "\n", "                ", "assert", "name", "in", "self", ".", "shadow", "\n", "self", ".", "original", "[", "name", "]", "=", "param", ".", "data", ".", "clone", "(", ")", "\n", "param", ".", "data", "=", "self", ".", "shadow", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.generator.EMA.resume": [[248, 253], ["model.named_parameters"], "methods", ["None"], ["", "", "", "def", "resume", "(", "self", ",", "model", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "param", ".", "requires_grad", ":", "\n", "                ", "assert", "name", "in", "self", ".", "shadow", "\n", "param", ".", "data", "=", "self", ".", "original", "[", "name", "]", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.base_network.BaseNetwork.__init__": [[11, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.base_network.BaseNetwork.modify_commandline_options": [[14, 17], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.base_network.BaseNetwork.print_network": [[18, 27], ["isinstance", "base_network.BaseNetwork.parameters", "print", "param.numel", "type"], "methods", ["None"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ",", "list", ")", ":", "\n", "            ", "self", "=", "self", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "'Network [%s] was created. Total number of parameters: %.1f million. '", "\n", "'To see the architecture, do print(network).'", "\n", "%", "(", "type", "(", "self", ")", ".", "__name__", ",", "num_params", "/", "1000000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.base_network.BaseNetwork.init_weights": [[28, 60], ["base_network.BaseNetwork.apply", "base_network.BaseNetwork.children", "hasattr", "classname.find", "m.init_weights", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "m.reset_parameters", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.EqualLR.apply", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.base_network.BaseNetwork.init_weights", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["", "def", "init_weights", "(", "self", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "        ", "def", "init_func", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "                ", "if", "init_type", "==", "'normal'", ":", "\n", "                    ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                    ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier_uniform'", ":", "\n", "                    ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1.0", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                    ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                    ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'none'", ":", "# uses pytorch's default init method", "\n", "                    ", "m", ".", "reset_parameters", "(", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "", "self", ".", "apply", "(", "init_func", ")", "\n", "\n", "# propagate to children", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'init_weights'", ")", ":", "\n", "                ", "m", ".", "init_weights", "(", "init_type", ",", "gain", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ContextualLoss.ContextualLoss.__init__": [[40, 43], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ContextualLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ContextualLoss.ContextualLoss.forward": [[44, 81], ["util.util.feature_normalize().view", "util.util.feature_normalize().view", "util.util.feature_normalize().view.permute", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "util.util.feature_normalize().view.view().mean().unsqueeze().unsqueeze", "util.util.feature_normalize().view.view().mean().unsqueeze().unsqueeze", "util.util.feature_normalize", "util.util.feature_normalize", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "util.util.feature_normalize().view.view().mean().unsqueeze", "util.util.feature_normalize().view.view().mean().unsqueeze", "util.util.feature_normalize().view.view().mean", "util.util.feature_normalize().view.view().mean", "util.util.feature_normalize().view.view", "util.util.feature_normalize().view.view"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.feature_normalize", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.feature_normalize"], ["", "def", "forward", "(", "self", ",", "X_features", ",", "Y_features", ",", "h", "=", "0.1", ",", "feature_centering", "=", "True", ")", ":", "\n", "        ", "'''\n        X_features&Y_features are are feature vectors or feature 2d array\n        h: bandwidth\n        return the per-sample loss\n        '''", "\n", "batch_size", "=", "X_features", ".", "shape", "[", "0", "]", "\n", "feature_depth", "=", "X_features", ".", "shape", "[", "1", "]", "\n", "feature_size", "=", "X_features", ".", "shape", "[", "2", "]", "\n", "\n", "# center the feature vector???", "\n", "\n", "# to normalized feature vectors", "\n", "if", "feature_centering", ":", "\n", "            ", "X_features", "=", "X_features", "-", "Y_features", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "Y_features", "=", "Y_features", "-", "Y_features", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "", "X_features", "=", "feature_normalize", "(", "X_features", ")", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", "# batch_size * feature_depth * feature_size^2", "\n", "Y_features", "=", "feature_normalize", "(", "Y_features", ")", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", "# batch_size * feature_depth * feature_size^2", "\n", "\n", "# conine distance = 1 - similarity", "\n", "X_features_permute", "=", "X_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# batch_size * feature_size^2 * feature_depth", "\n", "d", "=", "1", "-", "torch", ".", "matmul", "(", "X_features_permute", ",", "Y_features", ")", "# batch_size * feature_size^2 * feature_size^2", "\n", "\n", "# normalized distance: dij_bar", "\n", "d_norm", "=", "d", "/", "(", "torch", ".", "min", "(", "d", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "+", "1e-5", ")", "# batch_size * feature_size^2 * feature_size^2", "\n", "\n", "# pairwise affinity", "\n", "w", "=", "torch", ".", "exp", "(", "(", "1", "-", "d_norm", ")", "/", "h", ")", "\n", "A_ij", "=", "w", "/", "torch", ".", "sum", "(", "w", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# contextual loss per sample", "\n", "CX", "=", "torch", ".", "mean", "(", "torch", ".", "max", "(", "A_ij", ",", "dim", "=", "1", ")", "[", "0", "]", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "-", "torch", ".", "log", "(", "CX", ")", "\n", "\n", "# contextual loss per batch", "\n", "# loss = torch.mean(loss)", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ContextualLoss.ContextualLoss_forward.__init__": [[88, 92], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "ContextualLoss_forward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ContextualLoss.ContextualLoss_forward.forward": [[93, 138], ["util.util.feature_normalize().view", "util.util.feature_normalize().view", "util.util.feature_normalize().view.permute", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "util.util.feature_normalize", "util.util.feature_normalize", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "util.util.feature_normalize().view.mean().unsqueeze", "util.util.feature_normalize().view.mean().unsqueeze", "util.util.feature_normalize().view.view().mean().unsqueeze().unsqueeze", "util.util.feature_normalize().view.view().mean().unsqueeze().unsqueeze", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "util.util.feature_normalize().view.mean", "util.util.feature_normalize().view.mean", "util.util.feature_normalize().view.view().mean().unsqueeze", "util.util.feature_normalize().view.view().mean().unsqueeze", "util.util.feature_normalize().view.view().mean", "util.util.feature_normalize().view.view().mean", "util.util.feature_normalize().view.view", "util.util.feature_normalize().view.view"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.feature_normalize", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.feature_normalize"], ["", "def", "forward", "(", "self", ",", "X_features", ",", "Y_features", ",", "h", "=", "0.1", ",", "feature_centering", "=", "True", ")", ":", "\n", "        ", "'''\n        X_features&Y_features are are feature vectors or feature 2d array\n        h: bandwidth\n        return the per-sample loss\n        '''", "\n", "batch_size", "=", "X_features", ".", "shape", "[", "0", "]", "\n", "feature_depth", "=", "X_features", ".", "shape", "[", "1", "]", "\n", "feature_size", "=", "X_features", ".", "shape", "[", "2", "]", "\n", "\n", "# to normalized feature vectors", "\n", "if", "feature_centering", ":", "\n", "            ", "if", "self", ".", "opt", ".", "PONO", ":", "\n", "                ", "X_features", "=", "X_features", "-", "Y_features", ".", "mean", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "Y_features", "=", "Y_features", "-", "Y_features", ".", "mean", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "X_features", "=", "X_features", "-", "Y_features", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "Y_features", "=", "Y_features", "-", "Y_features", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "", "", "X_features", "=", "feature_normalize", "(", "X_features", ")", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", "# batch_size * feature_depth * feature_size * feature_size", "\n", "Y_features", "=", "feature_normalize", "(", "Y_features", ")", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", "# batch_size * feature_depth * feature_size * feature_size", "\n", "\n", "# X_features = F.unfold(", "\n", "#     X_features, kernel_size=self.opt.match_kernel, stride=1, padding=int(self.opt.match_kernel // 2))  # batch_size * feature_depth_new * feature_size^2", "\n", "# Y_features = F.unfold(", "\n", "#     Y_features, kernel_size=self.opt.match_kernel, stride=1, padding=int(self.opt.match_kernel // 2))  # batch_size * feature_depth_new * feature_size^2", "\n", "\n", "# conine distance = 1 - similarity", "\n", "X_features_permute", "=", "X_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# batch_size * feature_size^2 * feature_depth", "\n", "d", "=", "1", "-", "torch", ".", "matmul", "(", "X_features_permute", ",", "Y_features", ")", "# batch_size * feature_size^2 * feature_size^2", "\n", "\n", "# normalized distance: dij_bar", "\n", "# d_norm = d", "\n", "d_norm", "=", "d", "/", "(", "torch", ".", "min", "(", "d", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "+", "1e-3", ")", "# batch_size * feature_size^2 * feature_size^2", "\n", "\n", "# pairwise affinity", "\n", "w", "=", "torch", ".", "exp", "(", "(", "1", "-", "d_norm", ")", "/", "h", ")", "\n", "A_ij", "=", "w", "/", "torch", ".", "sum", "(", "w", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# contextual loss per sample", "\n", "CX", "=", "torch", ".", "mean", "(", "torch", ".", "max", "(", "A_ij", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ",", "dim", "=", "1", ")", "\n", "loss", "=", "-", "torch", ".", "log", "(", "CX", ")", "\n", "\n", "# contextual loss per batch", "\n", "# loss = torch.mean(loss)", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ContextualLoss.ContextualLoss_complex.__init__": [[145, 148], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ContextualLoss_complex", ",", "self", ")", ".", "__init__", "(", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ContextualLoss.ContextualLoss_complex.forward": [[149, 193], ["util.util.feature_normalize", "util.util.feature_normalize", "torch.unfold", "torch.unfold", "torch.unfold", "torch.unfold", "torch.unfold", "torch.unfold", "torch.unfold.permute", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.unfold.view().mean().unsqueeze().unsqueeze", "torch.unfold.view().mean().unsqueeze().unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.unfold.view().mean().unsqueeze", "torch.unfold.view().mean().unsqueeze", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.unfold.view().mean", "torch.unfold.view().mean", "torch.unfold.view", "torch.unfold.view"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.feature_normalize", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.feature_normalize"], ["", "def", "forward", "(", "self", ",", "X_features", ",", "Y_features", ",", "h", "=", "0.1", ",", "patch_size", "=", "1", ",", "direction", "=", "'forward'", ")", ":", "\n", "        ", "'''\n        X_features&Y_features are are feature vectors or feature 2d array\n        h: bandwidth\n        return the per-sample loss\n        '''", "\n", "batch_size", "=", "X_features", ".", "shape", "[", "0", "]", "\n", "feature_depth", "=", "X_features", ".", "shape", "[", "1", "]", "\n", "feature_size", "=", "X_features", ".", "shape", "[", "2", "]", "\n", "\n", "# to normalized feature vectors", "\n", "# TODO: center by the mean of Y_features", "\n", "X_features", "=", "X_features", "-", "Y_features", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "Y_features", "=", "Y_features", "-", "Y_features", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "X_features", "=", "feature_normalize", "(", "X_features", ")", "# batch_size * feature_depth * feature_size^2", "\n", "Y_features", "=", "feature_normalize", "(", "Y_features", ")", "# batch_size * feature_depth * feature_size^2", "\n", "\n", "# to normalized feature vectors", "\n", "X_features", "=", "F", ".", "unfold", "(", "\n", "X_features", ",", "kernel_size", "=", "(", "patch_size", ",", "patch_size", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "patch_size", "//", "2", ",", "\n", "patch_size", "//", "2", ")", ")", "# batch_size * feature_depth_new * feature_size^2", "\n", "Y_features", "=", "F", ".", "unfold", "(", "\n", "Y_features", ",", "kernel_size", "=", "(", "patch_size", ",", "patch_size", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "patch_size", "//", "2", ",", "\n", "patch_size", "//", "2", ")", ")", "# batch_size * feature_depth_new * feature_size^2", "\n", "\n", "# conine distance = 1 - similarity", "\n", "X_features_permute", "=", "X_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# batch_size * feature_size^2 * feature_depth", "\n", "d", "=", "1", "-", "torch", ".", "matmul", "(", "X_features_permute", ",", "Y_features", ")", "# batch_size * feature_size^2 * feature_size^2", "\n", "\n", "# normalized distance: dij_bar", "\n", "d_norm", "=", "d", "/", "(", "torch", ".", "min", "(", "d", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "+", "1e-5", ")", "# batch_size * feature_size^2 * feature_size^2", "\n", "\n", "# pairwise affinity", "\n", "w", "=", "torch", ".", "exp", "(", "(", "1", "-", "d_norm", ")", "/", "h", ")", "\n", "A_ij", "=", "w", "/", "torch", ".", "sum", "(", "w", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# contextual loss per sample", "\n", "if", "direction", "==", "'forward'", ":", "\n", "            ", "CX", "=", "torch", ".", "mean", "(", "torch", ".", "max", "(", "A_ij", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "CX", "=", "torch", ".", "mean", "(", "torch", ".", "max", "(", "A_ij", ",", "dim", "=", "1", ")", "[", "0", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "loss", "=", "-", "torch", ".", "log", "(", "CX", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ContextualLoss.ChamferDistance_patch_loss.__init__": [[200, 203], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ChamferDistance_patch_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ContextualLoss.ChamferDistance_patch_loss.forward": [[204, 255], ["torch.unfold", "torch.unfold", "torch.unfold", "torch.unfold", "torch.unfold", "torch.unfold", "torch.unfold.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "[].squeeze", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "Y_features[].detach.detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "Y_features[].detach", "image_y_rearrange.view.view.view", "image_x.view.view.view", "image_y.view.view.view", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.matmul.max", "torch.matmul.max", "torch.matmul.max", "Y_features[].detach.detach", "Y_features[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X_features", ",", "Y_features", ",", "patch_size", "=", "3", ",", "image_x", "=", "None", ",", "image_y", "=", "None", ",", "h", "=", "0.1", ",", "Y_features_in", "=", "None", ")", ":", "\n", "        ", "'''\n        X_features&Y_features are are feature vectors or feature 2d array\n        h: bandwidth\n        return the per-sample loss\n        '''", "\n", "batch_size", "=", "X_features", ".", "shape", "[", "0", "]", "\n", "feature_depth", "=", "X_features", ".", "shape", "[", "1", "]", "\n", "feature_size", "=", "X_features", ".", "shape", "[", "2", "]", "\n", "\n", "# to normalized feature vectors", "\n", "X_features", "=", "F", ".", "unfold", "(", "\n", "X_features", ",", "kernel_size", "=", "(", "patch_size", ",", "patch_size", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "patch_size", "//", "2", ",", "\n", "patch_size", "//", "2", ")", ")", "# batch_size, feature_depth_new * feature_size^2", "\n", "Y_features", "=", "F", ".", "unfold", "(", "\n", "Y_features", ",", "kernel_size", "=", "(", "patch_size", ",", "patch_size", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "patch_size", "//", "2", ",", "\n", "patch_size", "//", "2", ")", ")", "# batch_size, feature_depth_new * feature_size^2", "\n", "\n", "if", "image_x", "is", "not", "None", "and", "image_y", "is", "not", "None", ":", "\n", "            ", "image_x", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "image_x", ",", "size", "=", "(", "feature_size", ",", "feature_size", ")", ",", "mode", "=", "'bilinear'", ")", ".", "view", "(", "batch_size", ",", "3", ",", "-", "1", ")", "\n", "image_y", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "image_y", ",", "size", "=", "(", "feature_size", ",", "feature_size", ")", ",", "mode", "=", "'bilinear'", ")", ".", "view", "(", "batch_size", ",", "3", ",", "-", "1", ")", "\n", "\n", "", "X_features_permute", "=", "X_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# batch_size * feature_size^2 * feature_depth", "\n", "similarity_matrix", "=", "torch", ".", "matmul", "(", "X_features_permute", ",", "Y_features", ")", "# batch_size * feature_size^2 * feature_size^2", "\n", "NN_index", "=", "similarity_matrix", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", ".", "squeeze", "(", ")", "\n", "\n", "if", "Y_features_in", "is", "not", "None", ":", "\n", "            ", "loss", "=", "torch", ".", "mean", "(", "(", "X_features", "-", "Y_features_in", ".", "detach", "(", ")", ")", "**", "2", ")", "\n", "Y_features_in", "=", "Y_features_in", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "torch", ".", "mean", "(", "(", "X_features", "-", "Y_features", "[", ":", ",", ":", ",", "NN_index", "]", ".", "detach", "(", ")", ")", "**", "2", ")", "\n", "Y_features_in", "=", "Y_features", "[", ":", ",", ":", ",", "NN_index", "]", ".", "detach", "(", ")", "\n", "\n", "# re-arrange image", "\n", "", "if", "image_x", "is", "not", "None", "and", "image_y", "is", "not", "None", ":", "\n", "            ", "image_y_rearrange", "=", "image_y", "[", ":", ",", ":", ",", "NN_index", "]", "\n", "image_y_rearrange", "=", "image_y_rearrange", ".", "view", "(", "batch_size", ",", "3", ",", "feature_size", ",", "feature_size", ")", "\n", "image_x", "=", "image_x", ".", "view", "(", "batch_size", ",", "3", ",", "feature_size", ",", "feature_size", ")", "\n", "image_y", "=", "image_y", ".", "view", "(", "batch_size", ",", "3", ",", "feature_size", ",", "feature_size", ")", "\n", "# plt.figure()", "\n", "# plt.imshow((post_processing(image_x[0].detach().cpu())))", "\n", "# plt.title('image x')", "\n", "# plt.figure()", "\n", "# plt.imshow((image_y[0]).permute(1, 2, 0).cpu().numpy())", "\n", "# plt.title('image y')", "\n", "# plt.figure()", "\n", "# plt.imshow((image_y_rearrange[0]).permute(1, 2, 0).cpu().numpy())", "\n", "# plt.title('corresponded image y')", "\n", "# plt.show()", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ContextualLoss.ChamferDistance_loss.__init__": [[262, 265], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ChamferDistance_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ContextualLoss.ChamferDistance_loss.forward": [[266, 310], ["util.util.feature_normalize().view", "util.util.feature_normalize().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "torch.nn.functional.interpolate().view", "util.util.feature_normalize().view.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "[].squeeze", "image_y_rearrange.view.view.view", "image_x.view.view.view", "image_y.view.view.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "Y_features[].detach.detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "Y_features[].detach", "util.util.feature_normalize", "util.util.feature_normalize", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.matmul.max", "torch.matmul.max", "torch.matmul.max", "Y_features[].detach.detach", "Y_features[].detach"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.feature_normalize", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.feature_normalize"], ["", "def", "forward", "(", "self", ",", "X_features", ",", "Y_features", ",", "image_x", ",", "image_y", ",", "h", "=", "0.1", ",", "Y_features_in", "=", "None", ")", ":", "\n", "        ", "'''\n        X_features&Y_features are are feature vectors or feature 2d array\n        h: bandwidth\n        return the per-sample loss\n        '''", "\n", "batch_size", "=", "X_features", ".", "shape", "[", "0", "]", "\n", "feature_depth", "=", "X_features", ".", "shape", "[", "1", "]", "\n", "feature_size", "=", "X_features", ".", "shape", "[", "2", "]", "\n", "\n", "# to normalized feature vectors", "\n", "X_features", "=", "feature_normalize", "(", "X_features", ")", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", "# batch_size * feature_depth * feature_size^2", "\n", "Y_features", "=", "feature_normalize", "(", "Y_features", ")", ".", "view", "(", "batch_size", ",", "feature_depth", ",", "-", "1", ")", "# batch_size * feature_depth * feature_size^2", "\n", "image_x", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "image_x", ",", "size", "=", "(", "feature_size", ",", "feature_size", ")", ",", "mode", "=", "'bilinear'", ")", ".", "view", "(", "batch_size", ",", "3", ",", "-", "1", ")", "\n", "image_y", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "image_y", ",", "size", "=", "(", "feature_size", ",", "feature_size", ")", ",", "mode", "=", "'bilinear'", ")", ".", "view", "(", "batch_size", ",", "3", ",", "-", "1", ")", "\n", "\n", "X_features_permute", "=", "X_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# batch_size * feature_size^2 * feature_depth", "\n", "similarity_matrix", "=", "torch", ".", "matmul", "(", "X_features_permute", ",", "Y_features", ")", "# batch_size * feature_size^2 * feature_size^2", "\n", "NN_index", "=", "similarity_matrix", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", ".", "squeeze", "(", ")", "\n", "if", "Y_features_in", "is", "not", "None", ":", "\n", "            ", "loss", "=", "torch", ".", "mean", "(", "(", "X_features", "-", "Y_features_in", ".", "detach", "(", ")", ")", "**", "2", ")", "\n", "Y_features_in", "=", "Y_features_in", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "torch", ".", "mean", "(", "(", "X_features", "-", "Y_features", "[", ":", ",", ":", ",", "NN_index", "]", ".", "detach", "(", ")", ")", "**", "2", ")", "\n", "Y_features_in", "=", "Y_features", "[", ":", ",", ":", ",", "NN_index", "]", ".", "detach", "(", ")", "\n", "\n", "# re-arrange image", "\n", "", "image_y_rearrange", "=", "image_y", "[", ":", ",", ":", ",", "NN_index", "]", "\n", "image_y_rearrange", "=", "image_y_rearrange", ".", "view", "(", "batch_size", ",", "3", ",", "feature_size", ",", "feature_size", ")", "\n", "image_x", "=", "image_x", ".", "view", "(", "batch_size", ",", "3", ",", "feature_size", ",", "feature_size", ")", "\n", "image_y", "=", "image_y", ".", "view", "(", "batch_size", ",", "3", ",", "feature_size", ",", "feature_size", ")", "\n", "\n", "# plt.figure()", "\n", "# plt.imshow((post_processing(image_x[0].detach().cpu())))", "\n", "# plt.title('image x')", "\n", "# plt.figure()", "\n", "# plt.imshow((image_y[0]).permute(1, 2, 0).cpu().numpy())", "\n", "# plt.title('image y')", "\n", "# plt.figure()", "\n", "# plt.imshow((image_y_rearrange[0]).permute(1, 2, 0).cpu().numpy())", "\n", "# plt.title('corresponded image y')", "\n", "# plt.show()", "\n", "\n", "return", "loss", ",", "Y_features_in", ",", "X_features", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.ContextualLoss.post_processing": [[26, 33], ["postpa", "postpb", "numpy.array"], "function", ["None"], ["def", "post_processing", "(", "tensor", ")", ":", "\n", "    ", "t", "=", "postpa", "(", "tensor", ")", "# denormalize the image since the optimized tensor is the normalized one", "\n", "t", "[", "t", ">", "1", "]", "=", "1", "\n", "t", "[", "t", "<", "0", "]", "=", "0", "\n", "img", "=", "postpb", "(", "t", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.find_network_using_name": [[18, 27], ["util.find_class_in_module", "issubclass"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.find_class_in_module"], []], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.modify_commandline_options": [[29, 41], ["netD_cls.modify_commandline_options.parse_known_args", "__init__.find_network_using_name", "find_network_using_name.modify_commandline_options", "__init__.find_network_using_name", "find_network_using_name.modify_commandline_options"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.BaseDataset.modify_commandline_options", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.BaseDataset.modify_commandline_options"], []], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.create_network": [[43, 54], ["cls.print_network", "cls.init_weights", "cls", "cls", "len", "torch.cuda.is_available", "cls.cuda"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.base_network.BaseNetwork.print_network", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.base_network.BaseNetwork.init_weights"], []], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.define_G": [[56, 59], ["__init__.find_network_using_name", "__init__.create_network"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.create_network"], []], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.define_G_stage1": [[60, 63], ["__init__.find_network_using_name", "__init__.create_network"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.create_network"], []], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.define_D": [[64, 67], ["__init__.find_network_using_name", "__init__.create_network"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.create_network"], []], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.define_D_stage1": [[68, 71], ["__init__.find_network_using_name", "__init__.create_network"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.create_network"], []], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.define_DomainClassifier": [[72, 75], ["__init__.find_network_using_name", "__init__.create_network"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.create_network"], []], "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.define_Corr": [[76, 79], ["__init__.find_network_using_name", "__init__.create_network"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.__init__.create_network"], []], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[64, 68], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 48], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.replicate.patch_replication_callback": [[70, 95], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.SyncMaster.__init__": [[67, 77], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.SyncMaster.__getstate__": [[78, 80], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.SyncMaster.__setstate__": [[81, 83], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.SyncMaster.register_slave": [[84, 101], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n\n        Args:\n            identifier: an identifier, usually is the device id.\n\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.SyncMaster.run_master": [[102, 134], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n\n        Returns: the message to be sent back to the master device.\n\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.SyncMaster.nr_slaves": [[135, 138], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[16, 29], ["float", "unittest.TorchTestCase.assertTrue", "float", "torch.allclose"], "methods", ["None"], ["    ", "def", "assertTensorClose", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "adiff", "=", "float", "(", "(", "x", "-", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "if", "(", "y", "==", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "rdiff", "=", "'NaN'", "\n", "", "else", ":", "\n", "            ", "rdiff", "=", "float", "(", "(", "adiff", "/", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n", "", "message", "=", "(", "\n", "'Tensor close check failed\\n'", "\n", "'adiff={}\\n'", "\n", "'rdiff={}\\n'", "\n", ")", ".", "format", "(", "adiff", ",", "rdiff", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "x", ",", "y", ")", ",", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[52, 67], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "SyncMaster", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "assert", "ReduceAddCoalesced", "is", "not", "None", ",", "'Can not use Synchronized Batch Normalization without CUDA support.'", "\n", "\n", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ",", "\n", "track_running_stats", "=", "track_running_stats", ")", "\n", "\n", "if", "not", "self", ".", "track_running_stats", ":", "\n", "            ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "'track_running_stats=False is not supported by the SynchronizedBatchNorm.'", ")", "\n", "\n", "", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[68, 99], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[100, 109], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[110, 132], ["sorted", "sum", "ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.EqualLR.apply", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std", "home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.EqualLR.apply"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[133, 151], ["hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "if", "hasattr", "(", "torch", ",", "'no_grad'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[209, 213], ["ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[271, 275], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[334, 338], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._sum_ft": [[37, 40], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm._unsqueeze_ft": [[42, 45], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dimensions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm.patch_sync_batchnorm": [[340, 353], ["None"], "function", ["None"], ["", "", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "patch_sync_batchnorm", "(", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "backup", "=", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "\n", "\n", "nn", ".", "BatchNorm1d", "=", "SynchronizedBatchNorm1d", "\n", "nn", ".", "BatchNorm2d", "=", "SynchronizedBatchNorm2d", "\n", "nn", ".", "BatchNorm3d", "=", "SynchronizedBatchNorm3d", "\n", "\n", "yield", "\n", "\n", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "=", "backup", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm.convert_model": [[355, 397], ["isinstance", "zip", "module.named_children", "batchnorm.convert_model", "DataParallelWithCallback", "isinstance", "sync_module.add_module", "sync_module", "batchnorm.convert_model", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm.convert_model"], ["", "def", "convert_model", "(", "module", ")", ":", "\n", "    ", "\"\"\"Traverse the input module and its child recursively\n       and replace all instance of torch.nn.modules.batchnorm.BatchNorm*N*d\n       to SynchronizedBatchNorm*N*d\n\n    Args:\n        module: the input module needs to be convert to SyncBN model\n\n    Examples:\n        >>> import torch.nn as nn\n        >>> import torchvision\n        >>> # m is a standard pytorch model\n        >>> m = torchvision.models.resnet18(True)\n        >>> m = nn.DataParallel(m)\n        >>> # after convert, m is using SyncBN\n        >>> m = convert_model(m)\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "mod", "=", "module", ".", "module", "\n", "mod", "=", "convert_model", "(", "mod", ")", "\n", "mod", "=", "DataParallelWithCallback", "(", "mod", ",", "device_ids", "=", "module", ".", "device_ids", ")", "\n", "return", "mod", "\n", "\n", "", "mod", "=", "module", "\n", "for", "pth_module", ",", "sync_module", "in", "zip", "(", "[", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm1d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm2d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm3d", "]", ",", "\n", "[", "SynchronizedBatchNorm1d", ",", "\n", "SynchronizedBatchNorm2d", ",", "\n", "SynchronizedBatchNorm3d", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "pth_module", ")", ":", "\n", "            ", "mod", "=", "sync_module", "(", "module", ".", "num_features", ",", "module", ".", "eps", ",", "module", ".", "momentum", ",", "module", ".", "affine", ")", "\n", "mod", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "mod", ".", "running_var", "=", "module", ".", "running_var", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "mod", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mod", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "add_module", "(", "name", ",", "convert_model", "(", "child", ")", ")", "\n", "\n", "", "return", "mod", "\n", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__": [[27, 38], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats": [[39, 42], ["batchnorm_reimpl.BatchNorm2dReimpl.running_mean.zero_", "batchnorm_reimpl.BatchNorm2dReimpl.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters": [[43, 47], ["batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.forward": [[48, 74], ["input_.permute().contiguous().view.permute().contiguous().view.size", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "input_.permute().contiguous().view.permute().contiguous().view.sum", "input_.permute().contiguous().view.permute().contiguous().view.pow().sum", "output.view().permute().contiguous", "batchnorm_reimpl.BatchNorm2dReimpl.bias.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input_.permute().contiguous().view.permute().contiguous().view.pow", "mean.detach", "unbias_var.detach", "batchnorm_reimpl.BatchNorm2dReimpl.weight.unsqueeze", "output.view().permute", "inv_std.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute", "mean.unsqueeze", "output.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "batchsize", ",", "channels", ",", "height", ",", "width", "=", "input_", ".", "size", "(", ")", "\n", "numel", "=", "batchsize", "*", "height", "*", "width", "\n", "input_", "=", "input_", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "channels", ",", "numel", ")", "\n", "sum_", "=", "input_", ".", "sum", "(", "1", ")", "\n", "sum_of_square", "=", "input_", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "mean", "=", "sum_", "/", "numel", "\n", "sumvar", "=", "sum_of_square", "-", "sum_", "*", "mean", "\n", "\n", "self", ".", "running_mean", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "\n", "+", "self", ".", "momentum", "*", "mean", ".", "detach", "(", ")", "\n", ")", "\n", "unbias_var", "=", "sumvar", "/", "(", "numel", "-", "1", ")", "\n", "self", ".", "running_var", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "\n", "+", "self", ".", "momentum", "*", "unbias_var", ".", "detach", "(", ")", "\n", ")", "\n", "\n", "bias_var", "=", "sumvar", "/", "numel", "\n", "inv_std", "=", "1", "/", "(", "bias_var", "+", "self", ".", "eps", ")", ".", "pow", "(", "0.5", ")", "\n", "output", "=", "(", "\n", "(", "input_", "-", "mean", ".", "unsqueeze", "(", "1", ")", ")", "*", "inv_std", ".", "unsqueeze", "(", "1", ")", "*", "\n", "self", ".", "weight", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "output", ".", "view", "(", "channels", ",", "batchsize", ",", "height", ",", "width", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm.SyncTestCase._syncParameters": [[37, 43], ["bn1.reset_parameters", "bn2.reset_parameters", "bn2.weight.data.copy_", "bn2.bias.data.copy_"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["    ", "def", "_syncParameters", "(", "self", ",", "bn1", ",", "bn2", ")", ":", "\n", "        ", "bn1", ".", "reset_parameters", "(", ")", "\n", "bn2", ".", "reset_parameters", "(", ")", "\n", "if", "bn1", ".", "affine", "and", "bn2", ".", "affine", ":", "\n", "            ", "bn2", ".", "weight", ".", "data", ".", "copy_", "(", "bn1", ".", "weight", ".", "data", ")", "\n", "bn2", ".", "bias", ".", "data", ".", "copy_", "(", "bn1", ".", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult": [[44, 66], ["bn1.train", "bn2.train", "test_sync_batchnorm.SyncTestCase._syncParameters", "torch.autograd.Variable", "torch.autograd.Variable", "bn1", "bn1.sum().backward", "torch.autograd.Variable", "torch.autograd.Variable", "bn2", "bn2.sum().backward", "test_sync_batchnorm.SyncTestCase.assertTensorClose", "test_sync_batchnorm.SyncTestCase.assertTensorClose", "test_sync_batchnorm.SyncTestCase.assertTensorClose", "test_sync_batchnorm.SyncTestCase.assertTensorClose", "test_sync_batchnorm.SyncTestCase.assertTensorClose", "input.cuda.cuda.cuda", "test_sync_batchnorm._find_bn", "test_sync_batchnorm._find_bn", "bn1.sum", "bn2.sum", "test_sync_batchnorm._find_bn", "test_sync_batchnorm._find_bn", "test_sync_batchnorm._find_bn", "test_sync_batchnorm._find_bn"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm.SyncTestCase._syncParameters", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.DoubleGrad.backward", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.DoubleGrad.backward", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm._find_bn", "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm._find_bn", "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm._find_bn", "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm._find_bn", "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm._find_bn", "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm._find_bn"], ["", "", "def", "_checkBatchNormResult", "(", "self", ",", "bn1", ",", "bn2", ",", "input", ",", "is_train", ",", "cuda", "=", "False", ")", ":", "\n", "        ", "\"\"\"Check the forward and backward for the customized batch normalization.\"\"\"", "\n", "bn1", ".", "train", "(", "mode", "=", "is_train", ")", "\n", "bn2", ".", "train", "(", "mode", "=", "is_train", ")", "\n", "\n", "if", "cuda", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "_syncParameters", "(", "_find_bn", "(", "bn1", ")", ",", "_find_bn", "(", "bn2", ")", ")", "\n", "\n", "input1", "=", "Variable", "(", "input", ",", "requires_grad", "=", "True", ")", "\n", "output1", "=", "bn1", "(", "input1", ")", "\n", "output1", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "input2", "=", "Variable", "(", "input", ",", "requires_grad", "=", "True", ")", "\n", "output2", "=", "bn2", "(", "input2", ")", "\n", "output2", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "\n", "self", ".", "assertTensorClose", "(", "input1", ".", "data", ",", "input2", ".", "data", ")", "\n", "self", ".", "assertTensorClose", "(", "output1", ".", "data", ",", "output2", ".", "data", ")", "\n", "self", ".", "assertTensorClose", "(", "input1", ".", "grad", ",", "input2", ".", "grad", ")", "\n", "self", ".", "assertTensorClose", "(", "_find_bn", "(", "bn1", ")", ".", "running_mean", ",", "_find_bn", "(", "bn2", ")", ".", "running_mean", ")", "\n", "self", ".", "assertTensorClose", "(", "_find_bn", "(", "bn1", ")", ".", "running_var", ",", "_find_bn", "(", "bn2", ")", ".", "running_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm.SyncTestCase.testSyncBatchNormNormalTrain": [[67, 72], ["torch.BatchNorm1d", "torch.BatchNorm1d", "sync_batchnorm.SynchronizedBatchNorm1d", "test_sync_batchnorm.SyncTestCase._checkBatchNormResult", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult"], ["", "def", "testSyncBatchNormNormalTrain", "(", "self", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "10", ")", "\n", "sync_bn", "=", "SynchronizedBatchNorm1d", "(", "10", ")", "\n", "\n", "self", ".", "_checkBatchNormResult", "(", "bn", ",", "sync_bn", ",", "torch", ".", "rand", "(", "16", ",", "10", ")", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm.SyncTestCase.testSyncBatchNormNormalEval": [[73, 78], ["torch.BatchNorm1d", "torch.BatchNorm1d", "sync_batchnorm.SynchronizedBatchNorm1d", "test_sync_batchnorm.SyncTestCase._checkBatchNormResult", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult"], ["", "def", "testSyncBatchNormNormalEval", "(", "self", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "10", ")", "\n", "sync_bn", "=", "SynchronizedBatchNorm1d", "(", "10", ")", "\n", "\n", "self", ".", "_checkBatchNormResult", "(", "bn", ",", "sync_bn", ",", "torch", ".", "rand", "(", "16", ",", "10", ")", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm.SyncTestCase.testSyncBatchNormSyncTrain": [[79, 88], ["torch.BatchNorm1d", "torch.BatchNorm1d", "sync_batchnorm.SynchronizedBatchNorm1d", "sync_batchnorm.DataParallelWithCallback", "torch.BatchNorm1d.cuda", "sync_batchnorm.DataParallelWithCallback.cuda", "test_sync_batchnorm.SyncTestCase._checkBatchNormResult", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult"], ["", "def", "testSyncBatchNormSyncTrain", "(", "self", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "10", ",", "eps", "=", "1e-5", ",", "affine", "=", "False", ")", "\n", "sync_bn", "=", "SynchronizedBatchNorm1d", "(", "10", ",", "eps", "=", "1e-5", ",", "affine", "=", "False", ")", "\n", "sync_bn", "=", "DataParallelWithCallback", "(", "sync_bn", ",", "device_ids", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "bn", ".", "cuda", "(", ")", "\n", "sync_bn", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "_checkBatchNormResult", "(", "bn", ",", "sync_bn", ",", "torch", ".", "rand", "(", "16", ",", "10", ")", ",", "True", ",", "cuda", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm.SyncTestCase.testSyncBatchNormSyncEval": [[89, 98], ["torch.BatchNorm1d", "torch.BatchNorm1d", "sync_batchnorm.SynchronizedBatchNorm1d", "sync_batchnorm.DataParallelWithCallback", "torch.BatchNorm1d.cuda", "sync_batchnorm.DataParallelWithCallback.cuda", "test_sync_batchnorm.SyncTestCase._checkBatchNormResult", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult"], ["", "def", "testSyncBatchNormSyncEval", "(", "self", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm1d", "(", "10", ",", "eps", "=", "1e-5", ",", "affine", "=", "False", ")", "\n", "sync_bn", "=", "SynchronizedBatchNorm1d", "(", "10", ",", "eps", "=", "1e-5", ",", "affine", "=", "False", ")", "\n", "sync_bn", "=", "DataParallelWithCallback", "(", "sync_bn", ",", "device_ids", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "bn", ".", "cuda", "(", ")", "\n", "sync_bn", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "_checkBatchNormResult", "(", "bn", ",", "sync_bn", ",", "torch", ".", "rand", "(", "16", ",", "10", ")", ",", "False", ",", "cuda", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm.SyncTestCase.testSyncBatchNorm2DSyncTrain": [[99, 108], ["torch.BatchNorm2d", "torch.BatchNorm2d", "sync_batchnorm.SynchronizedBatchNorm2d", "sync_batchnorm.DataParallelWithCallback", "torch.BatchNorm2d.cuda", "sync_batchnorm.DataParallelWithCallback.cuda", "test_sync_batchnorm.SyncTestCase._checkBatchNormResult", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm.SyncTestCase._checkBatchNormResult"], ["", "def", "testSyncBatchNorm2DSyncTrain", "(", "self", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm2d", "(", "10", ")", "\n", "sync_bn", "=", "SynchronizedBatchNorm2d", "(", "10", ")", "\n", "sync_bn", "=", "DataParallelWithCallback", "(", "sync_bn", ",", "device_ids", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "bn", ".", "cuda", "(", ")", "\n", "sync_bn", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "_checkBatchNormResult", "(", "bn", ",", "sync_bn", ",", "torch", ".", "rand", "(", "16", ",", "10", ",", "16", ",", "16", ")", ",", "True", ",", "cuda", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm.handy_var": [[19, 28], ["a.size", "a.sum"], "function", ["None"], ["def", "handy_var", "(", "a", ",", "unbias", "=", "True", ")", ":", "\n", "    ", "n", "=", "a", ".", "size", "(", "0", ")", "\n", "asum", "=", "a", ".", "sum", "(", "dim", "=", "0", ")", "\n", "as_sum", "=", "(", "a", "**", "2", ")", ".", "sum", "(", "dim", "=", "0", ")", "# a square sum", "\n", "sumvar", "=", "as_sum", "-", "asum", "*", "asum", "/", "n", "\n", "if", "unbias", ":", "\n", "        ", "return", "sumvar", "/", "(", "n", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "sumvar", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_sync_batchnorm._find_bn": [[30, 34], ["module.modules", "isinstance"], "function", ["None"], ["", "", "def", "_find_bn", "(", "module", ")", ":", "\n", "    ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "SynchronizedBatchNorm1d", ",", "SynchronizedBatchNorm2d", ")", ")", ":", "\n", "            ", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_numeric_batchnorm_v2.NumericTestCasev2.testNumericBatchNorm": [[28, 58], ["torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.SGD", "torch.SGD", "torch.SGD", "sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl", "sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.weight.data.copy_", "sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.bias.data.copy_", "torch.SGD", "torch.SGD", "torch.SGD", "range", "test_numeric_batchnorm_v2.NumericTestCasev2.assertTensorClose", "test_numeric_batchnorm_v2.NumericTestCasev2.assertTensorClose", "test_numeric_batchnorm_v2.NumericTestCasev2.assertTensorClose", "test_numeric_batchnorm_v2.NumericTestCasev2.assertTensorClose", "test_numeric_batchnorm_v2.NumericTestCasev2.assertTensorClose", "test_numeric_batchnorm_v2.NumericTestCasev2.assertTensorClose", "test_numeric_batchnorm_v2.NumericTestCasev2.assertTensorClose", "torch.BatchNorm2d.parameters", "sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.parameters", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand.clone().requires_grad_", "torch.rand.clone().requires_grad_", "torch.rand.clone().requires_grad_", "torch.BatchNorm2d.", "nn.BatchNorm2d.sum().backward", "torch.SGD.step", "torch.rand.clone().requires_grad_", "torch.rand.clone().requires_grad_", "torch.rand.clone().requires_grad_", "sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.", "sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.sum().backward", "torch.SGD.step", "torch.rand.clone", "torch.rand.clone", "torch.rand.clone", "nn.BatchNorm2d.sum", "torch.rand.clone", "torch.rand.clone", "torch.rand.clone", "sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.sum"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.DoubleGrad.backward", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.DoubleGrad.backward"], ["    ", "def", "testNumericBatchNorm", "(", "self", ")", ":", "\n", "        ", "CHANNELS", "=", "16", "\n", "batchnorm1", "=", "nn", ".", "BatchNorm2d", "(", "CHANNELS", ",", "momentum", "=", "1", ")", "\n", "optimizer1", "=", "optim", ".", "SGD", "(", "batchnorm1", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ")", "\n", "\n", "batchnorm2", "=", "BatchNorm2dReimpl", "(", "CHANNELS", ",", "momentum", "=", "1", ")", "\n", "batchnorm2", ".", "weight", ".", "data", ".", "copy_", "(", "batchnorm1", ".", "weight", ".", "data", ")", "\n", "batchnorm2", ".", "bias", ".", "data", ".", "copy_", "(", "batchnorm1", ".", "bias", ".", "data", ")", "\n", "optimizer2", "=", "optim", ".", "SGD", "(", "batchnorm2", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ")", "\n", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "input_", "=", "torch", ".", "rand", "(", "16", ",", "CHANNELS", ",", "16", ",", "16", ")", "\n", "\n", "input1", "=", "input_", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "output1", "=", "batchnorm1", "(", "input1", ")", "\n", "output1", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "optimizer1", ".", "step", "(", ")", "\n", "\n", "input2", "=", "input_", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "output2", "=", "batchnorm2", "(", "input2", ")", "\n", "output2", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "assertTensorClose", "(", "input1", ",", "input2", ")", "\n", "self", ".", "assertTensorClose", "(", "output1", ",", "output2", ")", "\n", "self", ".", "assertTensorClose", "(", "input1", ".", "grad", ",", "input2", ".", "grad", ")", "\n", "self", ".", "assertTensorClose", "(", "batchnorm1", ".", "weight", ".", "grad", ",", "batchnorm2", ".", "weight", ".", "grad", ")", "\n", "self", ".", "assertTensorClose", "(", "batchnorm1", ".", "bias", ".", "grad", ",", "batchnorm2", ".", "bias", ".", "grad", ")", "\n", "self", ".", "assertTensorClose", "(", "batchnorm1", ".", "running_mean", ",", "batchnorm2", ".", "running_mean", ")", "\n", "self", ".", "assertTensorClose", "(", "batchnorm2", ".", "running_mean", ",", "batchnorm2", ".", "running_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_numeric_batchnorm.NumericTestCase.testNumericBatchNorm": [[30, 53], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d.train", "torch.autograd.Variable", "torch.autograd.Variable", "torch.BatchNorm1d.", "nn.BatchNorm1d.sum", "bn.sum.backward", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.mean", "torch.autograd.Variable.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "b_var2.sum", "b_var2.sum.backward", "test_numeric_batchnorm.NumericTestCase.assertTensorClose", "test_numeric_batchnorm.NumericTestCase.assertTensorClose", "test_numeric_batchnorm.NumericTestCase.assertTensorClose", "test_numeric_batchnorm.NumericTestCase.assertTensorClose", "test_numeric_batchnorm.NumericTestCase.assertTensorClose", "handy_var().clamp", "torch.rand.mean", "torch.rand.mean", "test_numeric_batchnorm.handy_var", "test_numeric_batchnorm.handy_var"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.DoubleGrad.backward", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.DoubleGrad.backward", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.sync_batchnorm.unittest.TorchTestCase.assertTensorClose", "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_numeric_batchnorm.handy_var", "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_numeric_batchnorm.handy_var"], ["    ", "def", "testNumericBatchNorm", "(", "self", ")", ":", "\n", "        ", "a", "=", "torch", ".", "rand", "(", "16", ",", "10", ")", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "(", "10", ",", "momentum", "=", "1", ",", "eps", "=", "1e-5", ",", "affine", "=", "False", ")", "\n", "bn", ".", "train", "(", ")", "\n", "\n", "a_var1", "=", "Variable", "(", "a", ",", "requires_grad", "=", "True", ")", "\n", "b_var1", "=", "bn", "(", "a_var1", ")", "\n", "loss1", "=", "b_var1", ".", "sum", "(", ")", "\n", "loss1", ".", "backward", "(", ")", "\n", "\n", "a_var2", "=", "Variable", "(", "a", ",", "requires_grad", "=", "True", ")", "\n", "a_mean2", "=", "a_var2", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "a_std2", "=", "torch", ".", "sqrt", "(", "handy_var", "(", "a_var2", ",", "unbias", "=", "False", ")", ".", "clamp", "(", "min", "=", "1e-5", ")", ")", "\n", "# a_std2 = torch.sqrt(a_var2.var(dim=0, keepdim=True, unbiased=False) + 1e-5)", "\n", "b_var2", "=", "(", "a_var2", "-", "a_mean2", ")", "/", "a_std2", "\n", "loss2", "=", "b_var2", ".", "sum", "(", ")", "\n", "loss2", ".", "backward", "(", ")", "\n", "\n", "self", ".", "assertTensorClose", "(", "bn", ".", "running_mean", ",", "a", ".", "mean", "(", "dim", "=", "0", ")", ")", "\n", "self", ".", "assertTensorClose", "(", "bn", ".", "running_var", ",", "handy_var", "(", "a", ")", ")", "\n", "self", ".", "assertTensorClose", "(", "a_var1", ".", "data", ",", "a_var2", ".", "data", ")", "\n", "self", ".", "assertTensorClose", "(", "b_var1", ".", "data", ",", "b_var2", ".", "data", ")", "\n", "self", ".", "assertTensorClose", "(", "a_var1", ".", "grad", ",", "a_var2", ".", "grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.tests.test_numeric_batchnorm.handy_var": [[18, 27], ["a.size", "a.sum"], "function", ["None"], ["def", "handy_var", "(", "a", ",", "unbias", "=", "True", ")", ":", "\n", "    ", "n", "=", "a", ".", "size", "(", "0", ")", "\n", "asum", "=", "a", ".", "sum", "(", "dim", "=", "0", ")", "\n", "as_sum", "=", "(", "a", "**", "2", ")", ".", "sum", "(", "dim", "=", "0", ")", "# a square sum", "\n", "sumvar", "=", "as_sum", "-", "asum", "*", "asum", "/", "n", "\n", "if", "unbias", ":", "\n", "        ", "return", "sumvar", "/", "(", "n", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "sumvar", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.UnbalancedWeight.__init__": [[48, 51], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\u03b5", ",", "\u03c1", ")", ":", "\n", "        ", "super", "(", "UnbalancedWeight", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "\u03b5", ",", "self", ".", "\u03c1", "=", "\u03b5", ",", "\u03c1", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.UnbalancedWeight.forward": [[52, 54], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "(", "self", ".", "\u03c1", "+", "self", ".", "\u03b5", "/", "2", ")", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.UnbalancedWeight.backward": [[55, 57], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "g", ")", ":", "\n", "        ", "return", "(", "self", ".", "\u03c1", "+", "self", ".", "\u03b5", ")", "*", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.max_diameter": [[12, 17], ["torch.stack().min", "torch.stack().max", "torch.stack", "torch.stack", "x.min", "y.min", "x.max", "y.max"], "function", ["None"], ["def", "max_diameter", "(", "x", ",", "y", ")", ":", "\n", "    ", "mins", "=", "torch", ".", "stack", "(", "(", "x", ".", "min", "(", "dim", "=", "0", ")", "[", "0", "]", ",", "y", ".", "min", "(", "dim", "=", "0", ")", "[", "0", "]", ")", ")", ".", "min", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "maxs", "=", "torch", ".", "stack", "(", "(", "x", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", ",", "y", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", ")", ")", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "diameter", "=", "(", "maxs", "-", "mins", ")", ".", "norm", "(", ")", ".", "item", "(", ")", "\n", "return", "diameter", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.epsilon_schedule": [[19, 23], ["numpy.exp", "numpy.arange", "numpy.log", "numpy.log", "numpy.log"], "function", ["None"], ["", "def", "epsilon_schedule", "(", "p", ",", "diameter", ",", "blur", ",", "scaling", ")", ":", "\n", "    ", "\u03b5_s", "=", "[", "diameter", "**", "p", "]", "+", "[", "blur", "**", "p", "]", "+", "[", "np", ".", "exp", "(", "e", ")", "for", "e", "in", "np", ".", "arange", "(", "p", "*", "np", ".", "log", "(", "diameter", ")", ",", "p", "*", "np", ".", "log", "(", "blur", ")", ",", "p", "*", "np", ".", "log", "(", "scaling", ")", ")", "]", "\n", "return", "\u03b5_s", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.scaling_parameters": [[25, 33], ["sinkhorn_divergence.epsilon_schedule", "sinkhorn_divergence.max_diameter", "x.view", "y.view"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.epsilon_schedule", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.max_diameter"], ["", "def", "scaling_parameters", "(", "x", ",", "y", ",", "p", ",", "blur", ",", "reach", ",", "diameter", ",", "scaling", ")", ":", "\n", "    ", "if", "diameter", "is", "None", ":", "\n", "        ", "D", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "diameter", "=", "max_diameter", "(", "x", ".", "view", "(", "-", "1", ",", "D", ")", ",", "y", ".", "view", "(", "-", "1", ",", "D", ")", ")", "\n", "", "\u03b5", "=", "blur", "**", "p", "\n", "\u03b5_s", "=", "epsilon_schedule", "(", "p", ",", "diameter", ",", "blur", ",", "scaling", ")", "\n", "\u03c1", "=", "None", "if", "reach", "is", "None", "else", "reach", "**", "p", "\n", "return", "diameter", ",", "\u03b5", ",", "\u03b5_s", ",", "\u03c1", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.dampening": [[38, 40], ["None"], "function", ["None"], ["", "def", "dampening", "(", "\u03b5", ",", "\u03c1", ")", ":", "\n", "    ", "return", "1", "if", "\u03c1", "is", "None", "else", "1", "/", "(", "1", "+", "\u03b5", "/", "\u03c1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.log_weights": [[42, 46], ["\u03b1.log"], "function", ["None"], ["", "def", "log_weights", "(", "\u03b1", ")", ":", "\n", "    ", "\u03b1_log", "=", "\u03b1", ".", "log", "(", ")", "\n", "\u03b1_log", "[", "\u03b1", "<=", "0", "]", "=", "-", "100000", "\n", "return", "\u03b1_log", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.sinkhorn_cost": [[59, 80], ["utils.scal", "utils.scal", "utils.scal", "utils.scal", "utils.scal", "utils.scal", "utils.scal", "utils.scal", "sinkhorn_divergence.UnbalancedWeight", "sinkhorn_divergence.UnbalancedWeight", "sinkhorn_divergence.UnbalancedWeight", "sinkhorn_divergence.UnbalancedWeight"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.scal", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.scal", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.scal", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.scal", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.scal", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.scal", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.scal", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.scal"], ["", "", "def", "sinkhorn_cost", "(", "\u03b5", ",", "\u03c1", ",", "\u03b1", ",", "\u03b2", ",", "a_x", ",", "b_y", ",", "a_y", ",", "b_x", ",", "batch", "=", "False", ",", "debias", "=", "True", ",", "potentials", "=", "False", ")", ":", "\n", "# if potentials:  # Just return the dual potentials", "\n", "#     if debias:", "\n", "#         return b_x - a_x, a_y - b_y", "\n", "#     else:", "\n", "#         return b_x, a_y", "\n", "\n", "# else:  # Actually compute the Sinkhorn divergence", "\n", "    ", "if", "debias", ":", "# UNBIASED Sinkhorn divergence, S_\u03b5(\u03b1,\u03b2) = OT_\u03b5(\u03b1,\u03b2) - .5*OT_\u03b5(\u03b1,\u03b1) - .5*OT_\u03b5(\u03b2,\u03b2)", "\n", "        ", "if", "\u03c1", "is", "None", ":", "\n", "            ", "return", "b_x", "-", "a_x", ",", "a_y", "-", "b_y", ",", "scal", "(", "\u03b1", ",", "b_x", "-", "a_x", ",", "batch", "=", "batch", ")", "+", "scal", "(", "\u03b2", ",", "a_y", "-", "b_y", ",", "batch", "=", "batch", ")", "\n", "", "else", ":", "\n", "            ", "return", "b_x", "-", "a_x", ",", "a_y", "-", "b_y", ",", "scal", "(", "\u03b1", ",", "UnbalancedWeight", "(", "\u03b5", ",", "\u03c1", ")", "(", "(", "-", "a_x", "/", "\u03c1", ")", ".", "exp", "(", ")", "-", "(", "-", "b_x", "/", "\u03c1", ")", ".", "exp", "(", ")", ")", ",", "batch", "=", "batch", ")", "+", "scal", "(", "\u03b2", ",", "UnbalancedWeight", "(", "\u03b5", ",", "\u03c1", ")", "(", "(", "-", "b_y", "/", "\u03c1", ")", ".", "exp", "(", ")", "-", "(", "-", "a_y", "/", "\u03c1", ")", ".", "exp", "(", ")", ")", ",", "batch", "=", "batch", ")", "\n", "\n", "", "", "else", ":", "# Classic, BIASED entropized Optimal Transport OT_\u03b5(\u03b1,\u03b2)", "\n", "        ", "if", "\u03c1", "is", "None", ":", "\n", "            ", "return", "b_x", ",", "a_y", ",", "scal", "(", "\u03b1", ",", "b_x", ",", "batch", "=", "batch", ")", "+", "scal", "(", "\u03b2", ",", "a_y", ",", "batch", "=", "batch", ")", "\n", "", "else", ":", "\n", "            ", "return", "b_x", ",", "a_y", ",", "scal", "(", "\u03b1", ",", "UnbalancedWeight", "(", "\u03b5", ",", "\u03c1", ")", "(", "1", "-", "(", "-", "b_x", "/", "\u03c1", ")", ".", "exp", "(", ")", ")", ",", "batch", "=", "batch", ")", "+", "scal", "(", "\u03b2", ",", "UnbalancedWeight", "(", "\u03b5", ",", "\u03c1", ")", "(", "1", "-", "(", "-", "a_y", "/", "\u03c1", ")", ".", "exp", "(", ")", ")", ",", "batch", "=", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.sinkhorn_loop": [[82, 180], ["len", "torch.autograd.set_grad_enabled", "sinkhorn_divergence.dampening", "enumerate", "torch.autograd.set_grad_enabled", "type", "softmin", "softmin", "sinkhorn_divergence.dampening", "softmin", "softmin", "softmin", "softmin", "softmin", "softmin", "torch.autograd.set_grad_enabled", "kernel_truncation", "extrapolate", "extrapolate", "extrapolate", "extrapolate", "softmin", "softmin", "softmin", "softmin", "len", "kernel_truncation", "kernel_truncation"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.dampening", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.dampening"], ["", "", "", "def", "sinkhorn_loop", "(", "softmin", ",", "\u03b1_logs", ",", "\u03b2_logs", ",", "C_xxs", ",", "C_yys", ",", "C_xys", ",", "C_yxs", ",", "\u03b5_s", ",", "\u03c1", ",", "\n", "jumps", "=", "[", "]", ",", "kernel_truncation", "=", "None", ",", "truncate", "=", "5", ",", "cost", "=", "None", ",", "\n", "extrapolate", "=", "None", ",", "debias", "=", "True", ",", "last_extrapolation", "=", "True", ")", ":", "\n", "\n", "    ", "Nits", "=", "len", "(", "\u03b5_s", ")", "\n", "if", "type", "(", "\u03b1_logs", ")", "is", "not", "list", ":", "\n", "        ", "\u03b1_logs", ",", "\u03b2_logs", "=", "[", "\u03b1_logs", "]", ",", "[", "\u03b2_logs", "]", "\n", "if", "debias", ":", "\n", "            ", "C_xxs", ",", "C_yys", "=", "[", "C_xxs", "]", ",", "[", "C_yys", "]", "\n", "", "C_xys", ",", "C_yxs", "=", "[", "C_xys", "]", ",", "[", "C_yxs", "]", "\n", "\n", "\n", "", "torch", ".", "autograd", ".", "set_grad_enabled", "(", "False", ")", "\n", "\n", "k", "=", "0", "# Scale index; we start at the coarsest resolution available", "\n", "\u03b5", "=", "\u03b5_s", "[", "k", "]", ";", "\u03bb", "=", "dampening", "(", "\u03b5", ",", "\u03c1", ")", "\n", "\n", "# Load the measures and cost matrices at the current scale:", "\n", "\u03b1_log", ",", "\u03b2_log", "=", "\u03b1_logs", "[", "k", "]", ",", "\u03b2_logs", "[", "k", "]", "\n", "if", "debias", ":", "\n", "        ", "C_xx", ",", "C_yy", "=", "C_xxs", "[", "k", "]", ",", "C_yys", "[", "k", "]", "\n", "", "C_xy", ",", "C_yx", "=", "C_xys", "[", "k", "]", ",", "C_yxs", "[", "k", "]", "\n", "\n", "# Start with a decent initialization for the dual vectors:", "\n", "if", "debias", ":", "\n", "        ", "a_x", "=", "\u03bb", "*", "softmin", "(", "\u03b5", ",", "C_xx", ",", "\u03b1_log", ")", "# OT(\u03b1,\u03b1)", "\n", "b_y", "=", "\u03bb", "*", "softmin", "(", "\u03b5", ",", "C_yy", ",", "\u03b2_log", ")", "# OT(\u03b2,\u03b2)", "\n", "", "a_y", "=", "\u03bb", "*", "softmin", "(", "\u03b5", ",", "C_yx", ",", "\u03b1_log", ")", "# OT(\u03b1,\u03b2) wrt. a", "\n", "b_x", "=", "\u03bb", "*", "softmin", "(", "\u03b5", ",", "C_xy", ",", "\u03b2_log", ")", "# OT(\u03b1,\u03b2) wrt. b", "\n", "\n", "for", "i", ",", "\u03b5", "in", "enumerate", "(", "\u03b5_s", ")", ":", "# \u03b5-scaling descent -----------------------", "\n", "\n", "        ", "\u03bb", "=", "dampening", "(", "\u03b5", ",", "\u03c1", ")", "# \u03b5 has changed, so we should update \u03bb too!", "\n", "\n", "# \"Coordinate ascent\" on the dual problems:", "\n", "if", "debias", ":", "\n", "            ", "at_x", "=", "\u03bb", "*", "softmin", "(", "\u03b5", ",", "C_xx", ",", "\u03b1_log", "+", "a_x", "/", "\u03b5", ")", "# OT(\u03b1,\u03b1)", "\n", "bt_y", "=", "\u03bb", "*", "softmin", "(", "\u03b5", ",", "C_yy", ",", "\u03b2_log", "+", "b_y", "/", "\u03b5", ")", "# OT(\u03b2,\u03b2)", "\n", "", "at_y", "=", "\u03bb", "*", "softmin", "(", "\u03b5", ",", "C_yx", ",", "\u03b1_log", "+", "b_x", "/", "\u03b5", ")", "# OT(\u03b1,\u03b2) wrt. a", "\n", "bt_x", "=", "\u03bb", "*", "softmin", "(", "\u03b5", ",", "C_xy", ",", "\u03b2_log", "+", "a_y", "/", "\u03b5", ")", "# OT(\u03b1,\u03b2) wrt. b", "\n", "\n", "# Symmetrized updates:", "\n", "if", "debias", ":", "\n", "            ", "a_x", ",", "b_y", "=", ".5", "*", "(", "a_x", "+", "at_x", ")", ",", ".5", "*", "(", "b_y", "+", "bt_y", ")", "# OT(\u03b1,\u03b1), OT(\u03b2,\u03b2)", "\n", "", "a_y", ",", "b_x", "=", ".5", "*", "(", "a_y", "+", "at_y", ")", ",", ".5", "*", "(", "b_x", "+", "bt_x", ")", "# OT(\u03b1,\u03b2) wrt. a, b", "\n", "\n", "if", "i", "in", "jumps", ":", "# Jump from a coarse to a finer scale", "\n", "            ", "if", "i", "==", "len", "(", "\u03b5_s", ")", "-", "1", ":", "# Last iteration: just extrapolate!", "\n", "                ", "if", "debias", ":", "\n", "                    ", "C_xx_", ",", "C_yy_", "=", "C_xxs", "[", "k", "+", "1", "]", ",", "C_yys", "[", "k", "+", "1", "]", "\n", "", "C_xy_", ",", "C_yx_", "=", "C_xys", "[", "k", "+", "1", "]", ",", "C_yxs", "[", "k", "+", "1", "]", "\n", "\n", "last_extrapolation", "=", "False", "# No need to re-extrapolate after the loop", "\n", "torch", ".", "autograd", ".", "set_grad_enabled", "(", "True", ")", "\n", "", "else", ":", "# It's worth investing some time on kernel truncation...", "\n", "# Kernel truncation trick (described in Bernhard Schmitzer's 2016 paper),", "\n", "# that typically relies on KeOps' block-sparse routines:", "\n", "                ", "if", "debias", ":", "\n", "                    ", "C_xx_", ",", "_", "=", "kernel_truncation", "(", "C_xx", ",", "C_xx", ",", "C_xxs", "[", "k", "+", "1", "]", ",", "C_xxs", "[", "k", "+", "1", "]", ",", "\n", "a_x", ",", "a_x", ",", "\u03b5", ",", "truncate", "=", "truncate", ",", "cost", "=", "cost", ")", "\n", "C_yy_", ",", "_", "=", "kernel_truncation", "(", "C_yy", ",", "C_yy", ",", "C_yys", "[", "k", "+", "1", "]", ",", "C_yys", "[", "k", "+", "1", "]", ",", "\n", "b_y", ",", "b_y", ",", "\u03b5", ",", "truncate", "=", "truncate", ",", "cost", "=", "cost", ")", "\n", "", "C_xy_", ",", "C_yx_", "=", "kernel_truncation", "(", "C_xy", ",", "C_yx", ",", "C_xys", "[", "k", "+", "1", "]", ",", "C_yxs", "[", "k", "+", "1", "]", ",", "\n", "b_x", ",", "a_y", ",", "\u03b5", ",", "truncate", "=", "truncate", ",", "cost", "=", "cost", ")", "\n", "\n", "# Extrapolation for the symmetric problems:", "\n", "", "if", "debias", ":", "\n", "                ", "a_x", "=", "extrapolate", "(", "a_x", ",", "a_x", ",", "\u03b5", ",", "\u03bb", ",", "C_xx", ",", "\u03b1_log", ",", "C_xx_", ")", "\n", "b_y", "=", "extrapolate", "(", "b_y", ",", "b_y", ",", "\u03b5", ",", "\u03bb", ",", "C_yy", ",", "\u03b2_log", ",", "C_yy_", ")", "\n", "\n", "# The cross-updates should be done in parallel!", "\n", "", "a_y", ",", "b_x", "=", "extrapolate", "(", "a_y", ",", "b_x", ",", "\u03b5", ",", "\u03bb", ",", "C_yx", ",", "\u03b1_log", ",", "C_yx_", ")", ",", "extrapolate", "(", "b_x", ",", "a_y", ",", "\u03b5", ",", "\u03bb", ",", "C_xy", ",", "\u03b2_log", ",", "C_xy_", ")", "\n", "\n", "\n", "# Update the measure weights and cost \"matrices\":", "\n", "k", "=", "k", "+", "1", "\n", "\u03b1_log", ",", "\u03b2_log", "=", "\u03b1_logs", "[", "k", "]", ",", "\u03b2_logs", "[", "k", "]", "\n", "if", "debias", ":", "\n", "                ", "C_xx", ",", "C_yy", "=", "C_xx_", ",", "C_yy_", "\n", "", "C_xy", ",", "C_yx", "=", "C_xy_", ",", "C_yx_", "\n", "\n", "", "", "torch", ".", "autograd", ".", "set_grad_enabled", "(", "True", ")", "\n", "\n", "if", "last_extrapolation", ":", "\n", "# Last extrapolation, to get the correct gradients:", "\n", "        ", "if", "debias", ":", "\n", "            ", "a_x", "=", "\u03bb", "*", "softmin", "(", "\u03b5", ",", "C_xx", ",", "(", "\u03b1_log", "+", "a_x", "/", "\u03b5", ")", ".", "detach", "(", ")", ")", "\n", "b_y", "=", "\u03bb", "*", "softmin", "(", "\u03b5", ",", "C_yy", ",", "(", "\u03b2_log", "+", "b_y", "/", "\u03b5", ")", ".", "detach", "(", ")", ")", "\n", "\n", "# The cross-updates should be done in parallel!", "\n", "", "a_y", ",", "b_x", "=", "\u03bb", "*", "softmin", "(", "\u03b5", ",", "C_yx", ",", "(", "\u03b1_log", "+", "b_x", "/", "\u03b5", ")", ".", "detach", "(", ")", ")", ",", "\u03bb", "*", "softmin", "(", "\u03b5", ",", "C_xy", ",", "(", "\u03b2_log", "+", "a_y", "/", "\u03b5", ")", ".", "detach", "(", ")", ")", "\n", "\n", "", "if", "debias", ":", "\n", "        ", "return", "a_x", ",", "b_y", ",", "a_y", ",", "b_x", "\n", "", "else", ":", "\n", "        ", "return", "None", ",", "None", ",", "a_y", ",", "b_x", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.samples_loss.SamplesLoss.__init__": [[45, 63], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "loss", "=", "\"sinkhorn\"", ",", "p", "=", "2", ",", "blur", "=", ".05", ",", "reach", "=", "None", ",", "diameter", "=", "None", ",", "scaling", "=", ".5", ",", "truncate", "=", "5", ",", "cost", "=", "None", ",", "\n", "kernel", "=", "None", ",", "cluster_scale", "=", "None", ",", "debias", "=", "True", ",", "potentials", "=", "False", ",", "verbose", "=", "False", ",", "backend", "=", "\"auto\"", ")", ":", "\n", "\n", "        ", "super", "(", "SamplesLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "backend", "=", "backend", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "blur", "=", "blur", "\n", "self", ".", "reach", "=", "reach", "\n", "self", ".", "truncate", "=", "truncate", "\n", "self", ".", "diameter", "=", "diameter", "\n", "self", ".", "scaling", "=", "scaling", "\n", "self", ".", "cost", "=", "cost", "\n", "self", ".", "kernel", "=", "kernel", "\n", "self", ".", "cluster_scale", "=", "cluster_scale", "\n", "self", ".", "debias", "=", "debias", "\n", "self", ".", "potentials", "=", "potentials", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.samples_loss.SamplesLoss.forward": [[65, 103], ["samples_loss.SamplesLoss.process_args", "samples_loss.SamplesLoss.check_shapes", "\u03b1.unsqueeze", "x.unsqueeze", "\u03b2.unsqueeze", "y.unsqueeze", "F.view_as", "G.view_as", "values.view"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.samples_loss.SamplesLoss.process_args", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.samples_loss.SamplesLoss.check_shapes"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"Computes the loss between sampled measures.\n        \n        Documentation and examples: Soon!\n        Until then, please check the tutorials :-)\"\"\"", "\n", "\n", "l_x", ",", "\u03b1", ",", "x", ",", "l_y", ",", "\u03b2", ",", "y", "=", "self", ".", "process_args", "(", "*", "args", ")", "\n", "B", ",", "N", ",", "M", ",", "D", "=", "self", ".", "check_shapes", "(", "l_x", ",", "\u03b1", ",", "x", ",", "l_y", ",", "\u03b2", ",", "y", ")", "\n", "\n", "backend", "=", "self", ".", "backend", "# Choose the backend", "\n", "backend", "=", "\"tensorized\"", "\n", "\n", "if", "B", "==", "0", "and", "backend", "==", "\"tensorized\"", ":", "# tensorized routines work on batched tensors", "\n", "            ", "\u03b1", ",", "x", ",", "\u03b2", ",", "y", "=", "\u03b1", ".", "unsqueeze", "(", "0", ")", ",", "x", ".", "unsqueeze", "(", "0", ")", ",", "\u03b2", ".", "unsqueeze", "(", "0", ")", ",", "y", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "\n", "# Run --------------------------------------------------------------------------------", "\n", "", "values", "=", "routines", "[", "self", ".", "loss", "]", "[", "backend", "]", "(", "\u03b1", ",", "x", ",", "\u03b2", ",", "y", ",", "\n", "p", "=", "self", ".", "p", ",", "blur", "=", "self", ".", "blur", ",", "reach", "=", "self", ".", "reach", ",", "\n", "diameter", "=", "self", ".", "diameter", ",", "scaling", "=", "self", ".", "scaling", ",", "truncate", "=", "self", ".", "truncate", ",", "\n", "cost", "=", "self", ".", "cost", ",", "kernel", "=", "self", ".", "kernel", ",", "cluster_scale", "=", "self", ".", "cluster_scale", ",", "\n", "debias", "=", "self", ".", "debias", ",", "potentials", "=", "self", ".", "potentials", ",", "\n", "labels_x", "=", "l_x", ",", "labels_y", "=", "l_y", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "\n", "# Make sure that the output has the correct shape ------------------------------------", "\n", "if", "self", ".", "potentials", ":", "# Return some dual potentials (= test functions) sampled on the input measures", "\n", "            ", "F", ",", "G", ",", "loss", "=", "values", "\n", "return", "F", ".", "view_as", "(", "\u03b1", ")", ",", "G", ".", "view_as", "(", "\u03b2", ")", "\n", "\n", "", "else", ":", "# Return a scalar cost value", "\n", "            ", "if", "backend", "in", "[", "\"online\"", ",", "\"multiscale\"", "]", ":", "# KeOps backends return a single scalar value", "\n", "                ", "if", "B", "==", "0", ":", "return", "values", "# The user expects a scalar value", "\n", "else", ":", "return", "values", ".", "view", "(", "-", "1", ")", "# The user expects a \"batch list\" of distances", "\n", "\n", "", "else", ":", "# \"tensorized\" backend returns a \"batch vector\" of values", "\n", "                ", "if", "B", "==", "0", ":", "return", "values", "[", "0", "]", "# The user expects a scalar value", "\n", "else", ":", "return", "values", "# The user expects a \"batch vector\" of distances", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.samples_loss.SamplesLoss.process_args": [[105, 118], ["len", "len", "len", "samples_loss.SamplesLoss.generate_weights", "samples_loss.SamplesLoss.generate_weights", "ValueError"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.samples_loss.SamplesLoss.generate_weights", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.samples_loss.SamplesLoss.generate_weights"], ["", "", "", "def", "process_args", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", "==", "6", ":", "\n", "            ", "return", "args", "\n", "", "if", "len", "(", "args", ")", "==", "4", ":", "\n", "            ", "\u03b1", ",", "x", ",", "\u03b2", ",", "y", "=", "args", "\n", "return", "None", ",", "\u03b1", ",", "x", ",", "None", ",", "\u03b2", ",", "y", "\n", "", "elif", "len", "(", "args", ")", "==", "2", ":", "\n", "            ", "x", ",", "y", "=", "args", "\n", "\u03b1", "=", "self", ".", "generate_weights", "(", "x", ")", "\n", "\u03b2", "=", "self", ".", "generate_weights", "(", "y", ")", "\n", "return", "None", ",", "\u03b1", ",", "x", ",", "None", ",", "\u03b2", ",", "y", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"A SamplesLoss accepts two (x, y), four (\u03b1, x, \u03b2, y) or six (l_x, \u03b1, x, l_y, \u03b2, y)  arguments.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.samples_loss.SamplesLoss.generate_weights": [[120, 129], ["x.dim", "torch.ones().type_as", "x.dim", "ValueError", "torch.ones().type_as", "torch.ones", "torch.ones"], "methods", ["None"], ["", "", "def", "generate_weights", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "# ", "\n", "            ", "N", "=", "x", ".", "shape", "[", "0", "]", "\n", "return", "torch", ".", "ones", "(", "N", ")", ".", "type_as", "(", "x", ")", "/", "N", "\n", "", "elif", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "B", ",", "N", ",", "_", "=", "x", ".", "shape", "\n", "return", "torch", ".", "ones", "(", "B", ",", "N", ")", ".", "type_as", "(", "x", ")", "/", "N", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Input samples 'x' and 'y' should be encoded as (N,D) or (B,N,D) (batch) tensors.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.samples_loss.SamplesLoss.check_shapes": [[131, 194], ["\u03b1.dim", "\u03b2.dim", "ValueError", "x.dim", "y.dim", "ValueError", "ValueError", "x.dim", "ValueError", "ValueError", "\u03b1.dim", "ValueError", "x.dim", "ValueError", "\u03b1.dim", "l_x.view.view.dim", "ValueError", "len", "ValueError", "l_y.view.view.dim", "ValueError", "len", "ValueError", "ValueError", "\u03b1.dim", "ValueError", "NotImplementedError", "NotImplementedError", "ValueError", "ValueError", "ValueError", "ValueError", "\u03b1.view", "\u03b2.view", "l_x.view.view.dim", "l_x.view.view.view", "l_y.view.view.dim", "l_y.view.view.view", "\u03b1.dim", "ValueError", "ValueError", "ValueError", "ValueError", "\u03b1.squeeze", "\u03b2.squeeze"], "methods", ["None"], ["", "", "def", "check_shapes", "(", "self", ",", "l_x", ",", "\u03b1", ",", "x", ",", "l_y", ",", "\u03b2", ",", "y", ")", ":", "\n", "\n", "        ", "if", "\u03b1", ".", "dim", "(", ")", "!=", "\u03b2", ".", "dim", "(", ")", ":", "raise", "ValueError", "(", "\"Input weights '\u03b1' and '\u03b2' should have the same number of dimensions.\"", ")", "\n", "if", "x", ".", "dim", "(", ")", "!=", "y", ".", "dim", "(", ")", ":", "raise", "ValueError", "(", "\"Input samples 'x' and 'y' should have the same number of dimensions.\"", ")", "\n", "if", "x", ".", "shape", "[", "-", "1", "]", "!=", "y", ".", "shape", "[", "-", "1", "]", ":", "raise", "ValueError", "(", "\"Input samples 'x' and 'y' should have the same last dimension.\"", ")", "\n", "\n", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "# No batch --------------------------------------------------------------------", "\n", "            ", "B", "=", "0", "# Batchsize", "\n", "N", ",", "D", "=", "x", ".", "shape", "# Number of \"i\" samples, dimension of the feature space", "\n", "M", ",", "_", "=", "y", ".", "shape", "# Number of \"j\" samples, dimension of the feature space", "\n", "\n", "if", "\u03b1", ".", "dim", "(", ")", "not", "in", "[", "1", ",", "2", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"Without batches, input weights '\u03b1' and '\u03b2' should be encoded as (N,) or (N,1) tensors.\"", ")", "\n", "", "elif", "\u03b1", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "if", "\u03b1", ".", "shape", "[", "1", "]", ">", "1", ":", "raise", "ValueError", "(", "\"Without batches, input weights '\u03b1' should be encoded as (N,) or (N,1) tensors.\"", ")", "\n", "if", "\u03b2", ".", "shape", "[", "1", "]", ">", "1", ":", "raise", "ValueError", "(", "\"Without batches, input weights '\u03b2' should be encoded as (M,) or (M,1) tensors.\"", ")", "\n", "\u03b1", ",", "\u03b2", "=", "\u03b1", ".", "view", "(", "-", "1", ")", ",", "\u03b2", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "if", "l_x", "is", "not", "None", ":", "\n", "                ", "if", "l_x", ".", "dim", "(", ")", "not", "in", "[", "1", ",", "2", "]", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Without batches, the vector of labels 'l_x' should be encoded as an (N,) or (N,1) tensor.\"", ")", "\n", "", "elif", "l_x", ".", "dim", "(", ")", "==", "2", ":", "\n", "                    ", "if", "l_x", ".", "shape", "[", "1", "]", ">", "1", ":", "raise", "ValueError", "(", "\"Without batches, the vector of labels 'l_x' should be encoded as (N,) or (N,1) tensors.\"", ")", "\n", "l_x", "=", "l_x", ".", "view", "(", "-", "1", ")", "\n", "", "if", "len", "(", "l_x", ")", "!=", "N", ":", "raise", "ValueError", "(", "\"The vector of labels 'l_x' should have the same length as the point cloud 'x'.\"", ")", "\n", "\n", "", "if", "l_y", "is", "not", "None", ":", "\n", "                ", "if", "l_y", ".", "dim", "(", ")", "not", "in", "[", "1", ",", "2", "]", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Without batches, the vector of labels 'l_y' should be encoded as an (M,) or (M,1) tensor.\"", ")", "\n", "", "elif", "l_y", ".", "dim", "(", ")", "==", "2", ":", "\n", "                    ", "if", "l_y", ".", "shape", "[", "1", "]", ">", "1", ":", "raise", "ValueError", "(", "\"Without batches, the vector of labels 'l_y' should be encoded as (M,) or (M,1) tensors.\"", ")", "\n", "l_y", "=", "l_y", ".", "view", "(", "-", "1", ")", "\n", "", "if", "len", "(", "l_y", ")", "!=", "M", ":", "raise", "ValueError", "(", "\"The vector of labels 'l_y' should have the same length as the point cloud 'y'.\"", ")", "\n", "\n", "", "N2", ",", "M2", "=", "\u03b1", ".", "shape", "[", "0", "]", ",", "\u03b2", ".", "shape", "[", "0", "]", "\n", "\n", "", "elif", "x", ".", "dim", "(", ")", "==", "3", ":", "# batch computation ---------------------------------------------------------", "\n", "            ", "B", ",", "N", ",", "D", "=", "x", ".", "shape", "# Batchsize, number of \"i\" samples, dimension of the feature space", "\n", "B2", ",", "M", ",", "_", "=", "y", ".", "shape", "# Batchsize, number of \"j\" samples, dimension of the feature space", "\n", "if", "B", "!=", "B2", ":", "raise", "ValueError", "(", "\"Samples 'x' and 'y' should have the same batchsize.\"", ")", "\n", "\n", "if", "\u03b1", ".", "dim", "(", ")", "not", "in", "[", "2", ",", "3", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"With batches, input weights '\u03b1' and '\u03b2' should be encoded as (B,N) or (B,N,1) tensors.\"", ")", "\n", "", "elif", "\u03b1", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "if", "\u03b1", ".", "shape", "[", "2", "]", ">", "1", ":", "raise", "ValueError", "(", "\"With batches, input weights '\u03b1' should be encoded as (B,N) or (B,N,1) tensors.\"", ")", "\n", "if", "\u03b2", ".", "shape", "[", "2", "]", ">", "1", ":", "raise", "ValueError", "(", "\"With batches, input weights '\u03b2' should be encoded as (B,M) or (B,M,1) tensors.\"", ")", "\n", "\u03b1", ",", "\u03b2", "=", "\u03b1", ".", "squeeze", "(", "-", "1", ")", ",", "\u03b2", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "", "if", "l_x", "is", "not", "None", ":", "raise", "NotImplementedError", "(", "'The \"multiscale\" backend has not been implemented with batches.'", ")", "\n", "if", "l_y", "is", "not", "None", ":", "raise", "NotImplementedError", "(", "'The \"multiscale\" backend has not been implemented with batches.'", ")", "\n", "\n", "B2", ",", "N2", "=", "\u03b1", ".", "shape", "\n", "B3", ",", "M2", "=", "\u03b2", ".", "shape", "\n", "if", "B", "!=", "B2", ":", "raise", "ValueError", "(", "\"Samples 'x' and weights '\u03b1' should have the same batchsize.\"", ")", "\n", "if", "B", "!=", "B3", ":", "raise", "ValueError", "(", "\"Samples 'y' and weights '\u03b2' should have the same batchsize.\"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Input samples 'x' and 'y' should be encoded as (N,D) or (B,N,D) (batch) tensors.\"", ")", "\n", "\n", "", "if", "N", "!=", "N2", ":", "raise", "ValueError", "(", "\"Weights '\u03b1' and samples 'x' should have compatible shapes.\"", ")", "\n", "if", "M", "!=", "M2", ":", "raise", "ValueError", "(", "\"Weights '\u03b2' and samples 'y' should have compatible shapes.\"", ")", "\n", "\n", "return", "B", ",", "N", ",", "M", ",", "D", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_samples.softmin_tensorized": [[20, 23], ["f.view"], "function", ["None"], ["def", "softmin_tensorized", "(", "\u03b5", ",", "C", ",", "f", ")", ":", "\n", "    ", "B", "=", "C", ".", "shape", "[", "0", "]", "\n", "return", "-", "\u03b5", "*", "(", "f", ".", "view", "(", "B", ",", "1", ",", "-", "1", ")", "-", "C", "/", "\u03b5", ")", ".", "logsumexp", "(", "2", ")", ".", "view", "(", "B", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_samples.sinkhorn_tensorized": [[24, 43], ["sinkhorn_divergence.scaling_parameters", "sinkhorn_divergence.sinkhorn_loop", "sinkhorn_divergence.sinkhorn_cost", "cost", "cost", "sinkhorn_divergence.log_weights", "sinkhorn_divergence.log_weights", "cost", "cost", "y.detach", "x.detach", "x.detach", "y.detach"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.scaling_parameters", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.sinkhorn_loop", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.sinkhorn_cost", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.log_weights", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.sinkhorn_divergence.log_weights"], ["", "def", "sinkhorn_tensorized", "(", "\u03b1", ",", "x", ",", "\u03b2", ",", "y", ",", "p", "=", "2", ",", "blur", "=", ".05", ",", "reach", "=", "None", ",", "diameter", "=", "None", ",", "scaling", "=", ".5", ",", "cost", "=", "None", ",", "\n", "debias", "=", "True", ",", "potentials", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "B", ",", "N", ",", "D", "=", "x", ".", "shape", "\n", "_", ",", "M", ",", "_", "=", "y", ".", "shape", "\n", "\n", "if", "cost", "is", "None", ":", "\n", "        ", "cost", "=", "cost_routines", "[", "p", "]", "\n", "\n", "", "C_xx", ",", "C_yy", "=", "(", "cost", "(", "x", ",", "x", ".", "detach", "(", ")", ")", ",", "cost", "(", "y", ",", "y", ".", "detach", "(", ")", ")", ")", "if", "debias", "else", "(", "None", ",", "None", ")", "# (B,N,N), (B,M,M)", "\n", "C_xy", ",", "C_yx", "=", "(", "cost", "(", "x", ",", "y", ".", "detach", "(", ")", ")", ",", "cost", "(", "y", ",", "x", ".", "detach", "(", ")", ")", ")", "# (B,N,M), (B,M,N)", "\n", "\n", "\n", "diameter", ",", "\u03b5", ",", "\u03b5_s", ",", "\u03c1", "=", "scaling_parameters", "(", "x", ",", "y", ",", "p", ",", "blur", ",", "reach", ",", "diameter", ",", "scaling", ")", "\n", "\n", "a_x", ",", "b_y", ",", "a_y", ",", "b_x", "=", "sinkhorn_loop", "(", "softmin_tensorized", ",", "log_weights", "(", "\u03b1", ")", ",", "log_weights", "(", "\u03b2", ")", ",", "\n", "C_xx", ",", "C_yy", ",", "C_xy", ",", "C_yx", ",", "\u03b5_s", ",", "\u03c1", ",", "debias", "=", "debias", ")", "\n", "\n", "return", "sinkhorn_cost", "(", "\u03b5", ",", "\u03c1", ",", "\u03b1", ",", "\u03b2", ",", "a_x", ",", "b_y", ",", "a_y", ",", "b_x", ",", "batch", "=", "True", ",", "debias", "=", "debias", ",", "potentials", "=", "potentials", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.Sqrt0.forward": [[13, 19], ["input.sqrt", "ctx.save_for_backward"], "methods", ["None"], ["        ", "x", ".", "div_", "(", "norm", ".", "clamp", "(", "min", "=", "EPS", ")", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "x", "/", "norm", ".", "clamp", "(", "min", "=", "EPS", ")", "\n", "", "return", "x", "\n", "\n", "", "def", "spherical_kmeans", "(", "x", ",", "n_clusters", ",", "max_iters", "=", "100", ",", "block_size", "=", "None", ",", "verbose", "=", "True", ",", "\n", "init", "=", "None", ",", "eps", "=", "1e-4", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.Sqrt0.backward": [[20, 26], ["None"], "methods", ["None"], ["    ", "\"\"\"Spherical kmeans\n    Args:\n        x (Tensor n_samples x kmer_size x n_features): data points\n        n_clusters (int): number of clusters\n    \"\"\"", "\n", "use_cuda", "=", "x", ".", "is_cuda", "\n", "if", "x", ".", "ndim", "==", "3", ":", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.scal": [[3, 9], ["torch.dot", "\u03b1.view", "f.view", "\u03b1.view", "f.view"], "function", ["None"], ["import", "math", "\n", "import", "random", "\n", "import", "numpy", "as", "np", "\n", "\n", "EPS", "=", "1e-6", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.sqrt_0": [[27, 29], ["Sqrt0.apply"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.EqualLR.apply"], ["        ", "n_samples", ",", "kmer_size", ",", "n_features", "=", "x", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "        ", "n_samples", ",", "n_features", "=", "x", ".", "size", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.squared_distances": [[31, 34], ["torch.matmul", "y.permute"], "function", ["None"], ["        ", "indices", "=", "torch", ".", "randperm", "(", "n_samples", ")", "[", ":", "n_clusters", "]", "\n", "if", "use_cuda", ":", "\n", "            ", "indices", "=", "indices", ".", "cuda", "(", ")", "\n", "", "clusters", "=", "x", "[", "indices", "]", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.distances": [[35, 37], ["utils.sqrt_0", "utils.squared_distances"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.sqrt_0", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.squared_distances"], ["\n", "", "prev_sim", "=", "np", ".", "inf", "\n", "tmp", "=", "x", ".", "new_empty", "(", "n_samples", ")", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.DoubleGrad.forward": [[35, 38], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.DoubleGrad.backward": [[39, 42], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "2", "*", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.double_grad": [[43, 45], ["DoubleGrad.apply"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.networks.normalization.EqualLR.apply"], ["", "", "def", "double_grad", "(", "x", ")", ":", "\n", "    ", "return", "DoubleGrad", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.gaussian_kernel": [[51, 54], ["utils.squared_distances"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.squared_distances"], ["", "def", "gaussian_kernel", "(", "x", ",", "y", ",", "blur", "=", ".05", ")", ":", "\n", "    ", "C2", "=", "squared_distances", "(", "x", "/", "blur", ",", "y", "/", "blur", ")", "\n", "return", "(", "-", ".5", "*", "C2", ")", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.laplacian_kernel": [[55, 58], ["utils.distances"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.distances"], ["", "def", "laplacian_kernel", "(", "x", ",", "y", ",", "blur", "=", ".05", ")", ":", "\n", "    ", "C", "=", "distances", "(", "x", "/", "blur", ",", "y", "/", "blur", ")", "\n", "return", "(", "-", "C", ")", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.energy_kernel": [[59, 61], ["utils.distances"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.distances"], ["", "def", "energy_kernel", "(", "x", ",", "y", ",", "blur", "=", "None", ")", ":", "\n", "    ", "return", "-", "distances", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.kernel_tensorized": [[68, 93], ["kernel", "kernel", "kernel", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "kernel_samples.double_grad", "x.detach", "kernel_samples.double_grad", "y.detach", "torch.matmul().squeeze", "torch.matmul", "torch.matmul", "torch.matmul", "\u03b1.detach().unsqueeze", "\u03b2.detach().unsqueeze", "\u03b2.unsqueeze", "torch.matmul", "kernel.transpose", "\u03b1.unsqueeze", "\u03b1.detach", "\u03b2.detach", "kernel_samples.double_grad", "kernel_samples.double_grad"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.double_grad", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.double_grad", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.double_grad", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.double_grad"], ["def", "kernel_tensorized", "(", "\u03b1", ",", "x", ",", "\u03b2", ",", "y", ",", "blur", "=", ".05", ",", "kernel", "=", "None", ",", "name", "=", "None", ",", "potentials", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "B", ",", "N", ",", "D", "=", "x", ".", "shape", "\n", "_", ",", "M", ",", "_", "=", "y", ".", "shape", "\n", "\n", "if", "kernel", "is", "None", ":", "\n", "        ", "kernel", "=", "kernel_routines", "[", "name", "]", "\n", "\n", "", "K_xx", "=", "kernel", "(", "double_grad", "(", "x", ")", ",", "x", ".", "detach", "(", ")", ",", "blur", "=", "blur", ")", "# (B,N,N) tensor", "\n", "K_yy", "=", "kernel", "(", "double_grad", "(", "y", ")", ",", "y", ".", "detach", "(", ")", ",", "blur", "=", "blur", ")", "# (B,M,M) tensor", "\n", "K_xy", "=", "kernel", "(", "x", ",", "y", ",", "blur", "=", "blur", ")", "# (B,N,M) tensor", "\n", "\n", "a_x", "=", "torch", ".", "matmul", "(", "K_xx", ",", "\u03b1", ".", "detach", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "# (B,N,N) @ (B,N) = (B,N) ", "\n", "b_y", "=", "torch", ".", "matmul", "(", "K_yy", ",", "\u03b2", ".", "detach", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "# (B,M,M) @ (B,M) = (B,M)", "\n", "b_x", "=", "torch", ".", "matmul", "(", "K_xy", ",", "\u03b2", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "# (B,N,M) @ (B,M) = (B,N) ", "\n", "\n", "\n", "if", "potentials", ":", "\n", "        ", "a_y", "=", "torch", ".", "matmul", "(", "K_xy", ".", "transpose", "(", "1", ",", "2", ")", ",", "\u03b1", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "# (B,M,N) @ (B,N) = (B,M)", "\n", "return", "a_x", "-", "b_x", ",", "b_y", "-", "a_y", "\n", "\n", "", "else", ":", "# Return the Kernel norm. N.B.: we assume that 'kernel' is symmetric:", "\n", "        ", "return", ".5", "*", "(", "double_grad", "(", "\u03b1", ")", "*", "a_x", ")", ".", "sum", "(", "1", ")", "+", ".5", "*", "(", "double_grad", "(", "\u03b2", ")", "*", "b_y", ")", ".", "sum", "(", "1", ")", "-", "(", "\u03b1", "*", "b_x", ")", ".", "sum", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.kernel_keops": [[107, 127], ["generic_sum", "generic_sum.", "generic_sum.", "generic_sum.", "kernel_samples.double_grad", "x.detach", "\u03b1.detach().view", "kernel_samples.double_grad", "y.detach", "\u03b2.detach().view", "\u03b2.view", "generic_sum.", "\u03b1.view", "utils.scal", "\u03b1.detach", "\u03b2.detach", "swap_axes", "utils.scal", "utils.scal", "kernel_samples.double_grad", "kernel_samples.double_grad"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.double_grad", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.double_grad", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.scal", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.scal", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.scal", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.double_grad", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.double_grad"], ["def", "kernel_keops", "(", "kernel", ",", "\u03b1", ",", "x", ",", "\u03b2", ",", "y", ",", "potentials", "=", "False", ",", "ranges_xx", "=", "None", ",", "ranges_yy", "=", "None", ",", "ranges_xy", "=", "None", ")", ":", "\n", "\n", "    ", "D", "=", "x", ".", "shape", "[", "1", "]", "\n", "kernel_conv", "=", "generic_sum", "(", "\"(\"", "+", "kernel", "+", "\" * B)\"", ",", "# Formula", "\n", "\"A = Vi(1)\"", ",", "# Output:    a_i", "\n", "\"X = Vi({})\"", ".", "format", "(", "D", ")", ",", "# 1st input: x_i", "\n", "\"Y = Vj({})\"", ".", "format", "(", "D", ")", ",", "# 2nd input: y_j", "\n", "\"B = Vj(1)\"", ")", "# 3rd input: b_j", "\n", "\n", "a_x", "=", "kernel_conv", "(", "double_grad", "(", "x", ")", ",", "x", ".", "detach", "(", ")", ",", "\u03b1", ".", "detach", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", ",", "ranges", "=", "ranges_xx", ")", "\n", "b_y", "=", "kernel_conv", "(", "double_grad", "(", "y", ")", ",", "y", ".", "detach", "(", ")", ",", "\u03b2", ".", "detach", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", ",", "ranges", "=", "ranges_yy", ")", "\n", "b_x", "=", "kernel_conv", "(", "x", ",", "y", ",", "\u03b2", ".", "view", "(", "-", "1", ",", "1", ")", ",", "ranges", "=", "ranges_xy", ")", "\n", "\n", "if", "potentials", ":", "\n", "        ", "a_y", "=", "kernel_conv", "(", "y", ",", "x", ",", "\u03b1", ".", "view", "(", "-", "1", ",", "1", ")", ",", "ranges", "=", "swap_axes", "(", "ranges_xy", ")", ")", "\n", "return", "a_x", "-", "b_x", ",", "b_y", "-", "a_y", "\n", "\n", "", "else", ":", "# Return the Kernel norm. N.B.: we assume that 'kernel' is symmetric:", "\n", "        ", "return", ".5", "*", "scal", "(", "double_grad", "(", "\u03b1", ")", ",", "a_x", ")", "+", ".5", "*", "scal", "(", "double_grad", "(", "\u03b2", ")", ",", "b_y", ")", "-", "scal", "(", "\u03b1", ",", "b_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.kernel_preprocess": [[130, 145], ["ImportError", "x.mean", "y.mean"], "function", ["None"], ["", "", "def", "kernel_preprocess", "(", "kernel", ",", "name", ",", "x", ",", "y", ",", "blur", ")", ":", "\n", "    ", "if", "not", "keops_available", ":", "\n", "        ", "raise", "ImportError", "(", "\"The 'pykeops' library could not be loaded: \"", "+", "\"'online' and 'multiscale' backends are not available.\"", ")", "\n", "\n", "", "if", "kernel", "is", "None", ":", "kernel", ",", "rescale", "=", "kernel_formulas", "[", "name", "]", "\n", "else", ":", "rescale", "=", "True", "\n", "\n", "# Center the point clouds just in case, to prevent numeric overflows:", "\n", "center", "=", "(", "x", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "+", "y", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", ")", "/", "2", "\n", "x", ",", "y", "=", "x", "-", "center", ",", "y", "-", "center", "\n", "# Rescaling on x and y is cheaper than doing it for all pairs of points ", "\n", "if", "rescale", ":", "x", ",", "y", "=", "x", "/", "blur", ",", "y", "/", "blur", "\n", "\n", "return", "kernel", ",", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.kernel_online": [[147, 151], ["kernel_samples.kernel_preprocess", "kernel_samples.kernel_keops"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.kernel_preprocess", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.kernel_keops"], ["", "def", "kernel_online", "(", "\u03b1", ",", "x", ",", "\u03b2", ",", "y", ",", "blur", "=", ".05", ",", "kernel", "=", "None", ",", "name", "=", "None", ",", "potentials", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "kernel", ",", "x", ",", "y", "=", "kernel_preprocess", "(", "kernel", ",", "name", ",", "x", ",", "y", ",", "blur", ")", "\n", "return", "kernel_keops", "(", "kernel", ",", "\u03b1", ",", "x", ",", "\u03b2", ",", "y", ",", "potentials", "=", "potentials", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.max_diameter": [[157, 162], ["torch.stack().min", "torch.stack().max", "torch.stack", "torch.stack", "x.min", "y.min", "x.max", "y.max"], "function", ["None"], ["", "def", "max_diameter", "(", "x", ",", "y", ")", ":", "\n", "    ", "mins", "=", "torch", ".", "stack", "(", "(", "x", ".", "min", "(", "dim", "=", "0", ")", "[", "0", "]", ",", "y", ".", "min", "(", "dim", "=", "0", ")", "[", "0", "]", ")", ")", ".", "min", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "maxs", "=", "torch", ".", "stack", "(", "(", "x", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", ",", "y", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", ")", ")", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "diameter", "=", "(", "maxs", "-", "mins", ")", ".", "norm", "(", ")", ".", "item", "(", ")", "\n", "return", "diameter", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.kernel_multiscale": [[164, 220], ["kernel_samples.kernel_preprocess", "grid_cluster", "grid_cluster", "cluster_ranges_centroids", "cluster_ranges_centroids", "sort_clusters", "sort_clusters", "kernel_samples.kernel_keops", "kernel_samples.kernel_online", "numpy.sqrt", "print", "torch.no_grad", "utils.squared_distances", "utils.squared_distances", "utils.squared_distances", "from_matrix", "from_matrix", "from_matrix", "kernel_samples.max_diameter", "x.view", "y.view", "numpy.sqrt", "len", "len"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.kernel_preprocess", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.kernel_keops", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.kernel_online", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.squared_distances", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.squared_distances", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.utils.squared_distances", "home.repos.pwc.inspect_result.fnzhan_RABIT.geomloss.kernel_samples.max_diameter"], ["", "def", "kernel_multiscale", "(", "\u03b1", ",", "x", ",", "\u03b2", ",", "y", ",", "blur", "=", ".05", ",", "kernel", "=", "None", ",", "name", "=", "None", ",", "\n", "truncate", "=", "5", ",", "diameter", "=", "None", ",", "cluster_scale", "=", "None", ",", "\n", "potentials", "=", "False", ",", "verbose", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "if", "truncate", "is", "None", "or", "name", "==", "\"energy\"", ":", "\n", "        ", "return", "kernel_online", "(", "\u03b1", ",", "x", ",", "\u03b2", ",", "y", ",", "blur", "=", "blur", ",", "kernel", "=", "kernel", ",", "\n", "truncate", "=", "truncate", ",", "name", "=", "name", ",", "potentials", "=", "potentials", ",", "**", "kwargs", ")", "\n", "\n", "# Renormalize our point cloud so that blur = 1:", "\n", "", "kernel", ",", "x", ",", "y", "=", "kernel_preprocess", "(", "kernel", ",", "name", ",", "x", ",", "y", ",", "blur", ")", "\n", "\n", "# Don't forget to normalize the diameter too!", "\n", "if", "cluster_scale", "is", "None", ":", "\n", "        ", "D", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "if", "diameter", "is", "None", ":", "\n", "            ", "diameter", "=", "max_diameter", "(", "x", ".", "view", "(", "-", "1", ",", "D", ")", ",", "y", ".", "view", "(", "-", "1", ",", "D", ")", ")", "\n", "", "else", ":", "\n", "            ", "diameter", "=", "diameter", "/", "blur", "\n", "", "cluster_scale", "=", "diameter", "/", "(", "np", ".", "sqrt", "(", "D", ")", "*", "2000", "**", "(", "1", "/", "D", ")", ")", "\n", "\n", "# Put our points in cubic clusters:", "\n", "", "cell_diameter", "=", "cluster_scale", "*", "np", ".", "sqrt", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "x_lab", "=", "grid_cluster", "(", "x", ",", "cluster_scale", ")", "\n", "y_lab", "=", "grid_cluster", "(", "y", ",", "cluster_scale", ")", "\n", "\n", "# Compute the ranges and centroids of each cluster:", "\n", "ranges_x", ",", "x_c", ",", "\u03b1_c", "=", "cluster_ranges_centroids", "(", "x", ",", "x_lab", ",", "weights", "=", "\u03b1", ")", "\n", "ranges_y", ",", "y_c", ",", "\u03b2_c", "=", "cluster_ranges_centroids", "(", "y", ",", "y_lab", ",", "weights", "=", "\u03b2", ")", "\n", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"{}x{} clusters, computed at scale = {:2.3f}\"", ".", "format", "(", "\n", "len", "(", "x_c", ")", ",", "len", "(", "y_c", ")", ",", "cluster_scale", ")", ")", "\n", "\n", "# Sort the clusters, making them contiguous in memory:", "\n", "", "(", "\u03b1", ",", "x", ")", ",", "x_lab", "=", "sort_clusters", "(", "(", "\u03b1", ",", "x", ")", ",", "x_lab", ")", "\n", "(", "\u03b2", ",", "y", ")", ",", "y_lab", "=", "sort_clusters", "(", "(", "\u03b2", ",", "y", ")", ",", "y_lab", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# Compute our block-sparse reduction ranges:", "\n", "# Compute pairwise distances between clusters:", "\n", "        ", "C_xx", "=", "squared_distances", "(", "x_c", ",", "x_c", ")", "\n", "C_yy", "=", "squared_distances", "(", "y_c", ",", "y_c", ")", "\n", "C_xy", "=", "squared_distances", "(", "x_c", ",", "y_c", ")", "\n", "\n", "# Compute the boolean masks:", "\n", "keep_xx", "=", "(", "C_xx", "<=", "(", "truncate", "+", "cell_diameter", ")", "**", "2", ")", "\n", "keep_yy", "=", "(", "C_yy", "<=", "(", "truncate", "+", "cell_diameter", ")", "**", "2", ")", "\n", "keep_xy", "=", "(", "C_xy", "<=", "(", "truncate", "+", "cell_diameter", ")", "**", "2", ")", "\n", "\n", "# Compute the KeOps reduction ranges:", "\n", "ranges_xx", "=", "from_matrix", "(", "ranges_x", ",", "ranges_x", ",", "keep_xx", ")", "\n", "ranges_yy", "=", "from_matrix", "(", "ranges_y", ",", "ranges_y", ",", "keep_yy", ")", "\n", "ranges_xy", "=", "from_matrix", "(", "ranges_x", ",", "ranges_y", ",", "keep_xy", ")", "\n", "\n", "", "return", "kernel_keops", "(", "kernel", ",", "\u03b1", ",", "x", ",", "\u03b2", ",", "y", ",", "potentials", "=", "potentials", ",", "\n", "ranges_xx", "=", "ranges_xx", ",", "ranges_yy", "=", "ranges_yy", ",", "ranges_xy", "=", "ranges_xy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.deepfashion_dataset.DeepFashionDataset.modify_commandline_options": [[16, 32], ["data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.BaseDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", "=", "Pix2pixDataset", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "parser", ".", "set_defaults", "(", "preprocess_mode", "=", "'resize_and_crop'", ")", "\n", "parser", ".", "set_defaults", "(", "no_pairing_check", "=", "True", ")", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "load_size", "=", "286", ")", "\n", "", "else", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "load_size", "=", "256", ")", "\n", "", "parser", ".", "set_defaults", "(", "crop_size", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "display_winsize", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "label_nc", "=", "20", ")", "\n", "parser", ".", "set_defaults", "(", "contain_dontcare_label", "=", "False", ")", "\n", "parser", ".", "set_defaults", "(", "cache_filelist_read", "=", "False", ")", "\n", "parser", ".", "set_defaults", "(", "cache_filelist_write", "=", "False", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.deepfashion_dataset.DeepFashionDataset.get_paths": [[33, 53], ["range", "open", "open.readlines", "open.close", "len", "image_paths.append", "lines[].strip().replace().replace().replace", "label_paths.append", "os.path.join", "open", "open.readlines", "open.close", "os.path.join", "os.path.join", "os.path.join", "lines[].strip().replace", "lines[].strip().replace().replace", "lines[].strip", "lines[].strip().replace", "lines[].strip"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ",", "opt", ")", ":", "\n", "#root = os.path.dirname(opt.dataroot) if opt.hdfs else opt.dataroot", "\n", "        ", "root", "=", "opt", ".", "dataroot", "\n", "if", "opt", ".", "phase", "==", "'train'", ":", "\n", "            ", "fd", "=", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'train.txt'", ")", ")", "\n", "lines", "=", "fd", ".", "readlines", "(", ")", "\n", "fd", ".", "close", "(", ")", "\n", "", "elif", "opt", ".", "phase", "==", "'test'", ":", "\n", "            ", "fd", "=", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'val.txt'", ")", ")", "\n", "lines", "=", "fd", ".", "readlines", "(", ")", "\n", "fd", ".", "close", "(", ")", "\n", "\n", "", "image_paths", "=", "[", "]", "\n", "label_paths", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "            ", "image_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "lines", "[", "i", "]", ".", "strip", "(", ")", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", ")", ")", "\n", "label_path", "=", "lines", "[", "i", "]", ".", "strip", "(", ")", ".", "replace", "(", "'img'", ",", "'pose'", ")", ".", "replace", "(", "'.jpg'", ",", "'_{}.txt'", ")", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "label_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "label_path", ")", ")", "\n", "\n", "", "return", "label_paths", ",", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.deepfashion_dataset.DeepFashionDataset.get_ref_video_like": [[54, 79], ["range", "open", "fd.readlines", "it.split", "open", "fd.readlines", "len", "ref[].strip().split", "it.strip", "it.strip", "key_name.keys", "ref[].strip", "items[].replace", "it.replace", "items[].replace", "items[].replace", "it.split", "random.sample", "it.split", "random.sample", "min", "min", "len", "len"], "methods", ["None"], ["", "def", "get_ref_video_like", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pair_path", "=", "'./data/deepfashion_self_pair.txt'", "\n", "with", "open", "(", "pair_path", ")", "as", "fd", ":", "\n", "            ", "self_pair", "=", "fd", ".", "readlines", "(", ")", "\n", "self_pair", "=", "[", "it", ".", "strip", "(", ")", "for", "it", "in", "self_pair", "]", "\n", "", "key_name", "=", "{", "}", "\n", "for", "it", "in", "self_pair", ":", "\n", "            ", "items", "=", "it", ".", "split", "(", "','", ")", "\n", "key_name", "[", "items", "[", "0", "]", "]", "=", "items", "[", "1", ":", "]", "\n", "", "ref_name", "=", "'./data/deepfashion_ref_test.txt'", "if", "opt", ".", "phase", "==", "'test'", "else", "'./data/deepfashion_ref.txt'", "\n", "with", "open", "(", "ref_name", ")", "as", "fd", ":", "\n", "            ", "ref", "=", "fd", ".", "readlines", "(", ")", "\n", "ref", "=", "[", "it", ".", "strip", "(", ")", "for", "it", "in", "ref", "]", "\n", "", "ref_dict", "=", "{", "}", "\n", "#split = 'DeepFashion.zip@/' if opt.hdfs else 'DeepFashion/'", "\n", "split", "=", "'DeepFashion/'", "\n", "for", "i", "in", "range", "(", "len", "(", "ref", ")", ")", ":", "\n", "            ", "items", "=", "ref", "[", "i", "]", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "if", "items", "[", "0", "]", "in", "key_name", ".", "keys", "(", ")", ":", "\n", "#ref_dict[items[0].replace('\\\\', '/')] = [random.choice(key_name[items[0]]).replace('\\\\', '/'), random.choice(self.image_paths).split(split)[-1]]", "\n", "                ", "ref_dict", "[", "items", "[", "0", "]", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "]", "=", "[", "it", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "for", "it", "in", "key_name", "[", "items", "[", "0", "]", "]", "]", "+", "[", "it", ".", "split", "(", "split", ")", "[", "-", "1", "]", "for", "it", "in", "random", ".", "sample", "(", "self", ".", "image_paths", ",", "min", "(", "len", "(", "self", ".", "image_paths", ")", ",", "20", ")", ")", "]", "\n", "", "else", ":", "\n", "                ", "ref_dict", "[", "items", "[", "0", "]", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "]", "=", "[", "items", "[", "-", "1", "]", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "]", "+", "[", "it", ".", "split", "(", "split", ")", "[", "-", "1", "]", "for", "it", "in", "random", ".", "sample", "(", "self", ".", "image_paths", ",", "min", "(", "len", "(", "self", ".", "image_paths", ")", ",", "20", ")", ")", "]", "\n", "", "", "train_test_folder", "=", "(", "''", ",", "''", ")", "\n", "return", "ref_dict", ",", "train_test_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.deepfashion_dataset.DeepFashionDataset.get_ref_vgg": [[80, 97], ["range", "open", "fd.readlines", "len", "lines[].strip().split", "items[].replace", "lines[].strip", "it.replace", "items[].replace", "[].replace", "random.choice().split", "random.choice"], "methods", ["None"], ["", "def", "get_ref_vgg", "(", "self", ",", "opt", ")", ":", "\n", "        ", "extra", "=", "''", "\n", "if", "opt", ".", "phase", "==", "'test'", ":", "\n", "            ", "extra", "=", "'_test'", "\n", "", "with", "open", "(", "'./data/deepfashion_ref{}.txt'", ".", "format", "(", "extra", ")", ")", "as", "fd", ":", "\n", "            ", "lines", "=", "fd", ".", "readlines", "(", ")", "\n", "", "ref_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "            ", "items", "=", "lines", "[", "i", "]", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "key", "=", "items", "[", "0", "]", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "if", "opt", ".", "phase", "==", "'test'", ":", "\n", "                ", "val", "=", "[", "it", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "for", "it", "in", "items", "[", "1", ":", "]", "]", "\n", "", "else", ":", "\n", "                ", "val", "=", "[", "items", "[", "-", "1", "]", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", ",", "random", ".", "choice", "(", "self", ".", "image_paths", ")", ".", "split", "(", "'DeepFashion/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "]", "\n", "", "ref_dict", "[", "key", "]", "=", "val", "\n", "", "train_test_folder", "=", "(", "''", ",", "''", ")", "\n", "return", "ref_dict", ",", "train_test_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.deepfashion_dataset.DeepFashionDataset.get_ref": [[98, 103], ["deepfashion_dataset.DeepFashionDataset.get_ref_video_like", "deepfashion_dataset.DeepFashionDataset.get_ref_vgg"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.deepfashion_dataset.DeepFashionDataset.get_ref_video_like", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.deepfashion_dataset.DeepFashionDataset.get_ref_vgg"], ["", "def", "get_ref", "(", "self", ",", "opt", ")", ":", "\n", "        ", "if", "opt", ".", "video_like", ":", "\n", "            ", "return", "self", ".", "get_ref_video_like", "(", "opt", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "get_ref_vgg", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.deepfashion_dataset.DeepFashionDataset.get_edges": [[104, 110], ["None"], "methods", ["None"], ["", "", "def", "get_edges", "(", "self", ",", "edge", ",", "t", ")", ":", "\n", "        ", "edge", "[", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", "1", ":", ",", ":", "]", "=", "edge", "[", "1", ":", ",", ":", "]", "|", "(", "t", "[", "1", ":", ",", ":", "]", "!=", "t", "[", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", "1", ":", ",", ":", "]", "!=", "t", "[", ":", "-", "1", ",", ":", "]", ")", "\n", "return", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.deepfashion_dataset.DeepFashionDataset.get_label_tensor": [[111, 172], ["numpy.loadtxt", "numpy.loadtxt", "deepfashion_dataset.DeepFashionDataset.labelpath_to_imgpath", "cv2.imread", "numpy.zeros_like", "range", "range", "PIL.Image.fromarray().resize", "data.base_dataset.get_params", "data.base_dataset.get_transform", "data.base_dataset.get_transform", "range", "data.base_dataset.get_transform.", "torch.cat", "path.format", "path.format", "int", "numpy.array", "cv2.circle", "cv2.addWeighted.copy", "numpy.mean", "numpy.mean", "math.degrees", "cv2.ellipse2Poly", "cv2.fillConvexPoly", "cv2.addWeighted", "numpy.zeros_like", "cv2.fillConvexPoly", "cv2.addWeighted", "joints.append", "len", "cv2.distanceTransform", "numpy.clip().astype", "data.base_dataset.get_transform.", "joints.append", "math.atan2", "int", "PIL.Image.fromarray", "PIL.Image.fromarray", "torch.cat", "int", "int", "numpy.zeros_like", "int", "int", "int", "cv2.cvtColor", "numpy.clip", "numpy.array", "int.astype", "int.astype"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.celebahqedge_dataset.CelebAHQEdgeDataset.labelpath_to_imgpath", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.get_params", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.get_transform"], ["", "def", "get_label_tensor", "(", "self", ",", "path", ")", ":", "\n", "        ", "candidate", "=", "np", ".", "loadtxt", "(", "path", ".", "format", "(", "'candidate'", ")", ")", "\n", "subset", "=", "np", ".", "loadtxt", "(", "path", ".", "format", "(", "'subset'", ")", ")", "\n", "stickwidth", "=", "4", "\n", "limbSeq", "=", "[", "[", "2", ",", "3", "]", ",", "[", "2", ",", "6", "]", ",", "[", "3", ",", "4", "]", ",", "[", "4", ",", "5", "]", ",", "[", "6", ",", "7", "]", ",", "[", "7", ",", "8", "]", ",", "[", "2", ",", "9", "]", ",", "[", "9", ",", "10", "]", ",", "[", "10", ",", "11", "]", ",", "[", "2", ",", "12", "]", ",", "[", "12", ",", "13", "]", ",", "[", "13", ",", "14", "]", ",", "[", "2", ",", "1", "]", ",", "[", "1", ",", "15", "]", ",", "[", "15", ",", "17", "]", ",", "[", "1", ",", "16", "]", ",", "[", "16", ",", "18", "]", ",", "[", "3", ",", "17", "]", ",", "[", "6", ",", "18", "]", "]", "\n", "\n", "colors", "=", "[", "[", "255", ",", "0", ",", "0", "]", ",", "[", "255", ",", "85", ",", "0", "]", ",", "[", "255", ",", "170", ",", "0", "]", ",", "[", "255", ",", "255", ",", "0", "]", ",", "[", "170", ",", "255", ",", "0", "]", ",", "[", "85", ",", "255", ",", "0", "]", ",", "[", "0", ",", "255", ",", "0", "]", ",", "[", "0", ",", "255", ",", "85", "]", ",", "[", "0", ",", "255", ",", "170", "]", ",", "[", "0", ",", "255", ",", "255", "]", ",", "[", "0", ",", "170", ",", "255", "]", ",", "[", "0", ",", "85", ",", "255", "]", ",", "[", "0", ",", "0", ",", "255", "]", ",", "[", "85", ",", "0", ",", "255", "]", ",", "[", "170", ",", "0", ",", "255", "]", ",", "[", "255", ",", "0", ",", "255", "]", ",", "[", "255", ",", "0", ",", "170", "]", ",", "[", "255", ",", "0", ",", "85", "]", "]", "\n", "\n", "img_path", "=", "self", ".", "labelpath_to_imgpath", "(", "path", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "canvas", "=", "np", ".", "zeros_like", "(", "img", ")", "\n", "for", "i", "in", "range", "(", "18", ")", ":", "\n", "            ", "index", "=", "int", "(", "subset", "[", "i", "]", ")", "\n", "if", "index", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "x", ",", "y", "=", "candidate", "[", "index", "]", "[", "0", ":", "2", "]", "\n", "canvas", "=", "np", ".", "array", "(", "canvas", ")", "\n", "# print (type(canvas))", "\n", "cv2", ".", "circle", "(", "canvas", ",", "(", "int", "(", "x", ")", ",", "int", "(", "y", ")", ")", ",", "4", ",", "colors", "[", "i", "]", ",", "thickness", "=", "-", "1", ")", "\n", "", "joints", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "17", ")", ":", "\n", "            ", "index", "=", "subset", "[", "np", ".", "array", "(", "limbSeq", "[", "i", "]", ")", "-", "1", "]", "\n", "cur_canvas", "=", "canvas", ".", "copy", "(", ")", "\n", "if", "-", "1", "in", "index", ":", "\n", "                ", "joints", ".", "append", "(", "np", ".", "zeros_like", "(", "cur_canvas", "[", ":", ",", ":", ",", "0", "]", ")", ")", "\n", "continue", "\n", "", "Y", "=", "candidate", "[", "index", ".", "astype", "(", "int", ")", ",", "0", "]", "\n", "X", "=", "candidate", "[", "index", ".", "astype", "(", "int", ")", ",", "1", "]", "\n", "mX", "=", "np", ".", "mean", "(", "X", ")", "\n", "mY", "=", "np", ".", "mean", "(", "Y", ")", "\n", "length", "=", "(", "(", "X", "[", "0", "]", "-", "X", "[", "1", "]", ")", "**", "2", "+", "(", "Y", "[", "0", "]", "-", "Y", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "angle", "=", "math", ".", "degrees", "(", "math", ".", "atan2", "(", "X", "[", "0", "]", "-", "X", "[", "1", "]", ",", "Y", "[", "0", "]", "-", "Y", "[", "1", "]", ")", ")", "\n", "polygon", "=", "cv2", ".", "ellipse2Poly", "(", "(", "int", "(", "mY", ")", ",", "int", "(", "mX", ")", ")", ",", "(", "int", "(", "length", "/", "2", ")", ",", "stickwidth", ")", ",", "int", "(", "angle", ")", ",", "0", ",", "360", ",", "1", ")", "\n", "cv2", ".", "fillConvexPoly", "(", "cur_canvas", ",", "polygon", ",", "colors", "[", "i", "]", ")", "\n", "canvas", "=", "cv2", ".", "addWeighted", "(", "canvas", ",", "0.4", ",", "cur_canvas", ",", "0.6", ",", "0", ")", "\n", "\n", "joint", "=", "np", ".", "zeros_like", "(", "cur_canvas", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "cv2", ".", "fillConvexPoly", "(", "joint", ",", "polygon", ",", "255", ")", "\n", "joint", "=", "cv2", ".", "addWeighted", "(", "joint", ",", "0.4", ",", "joint", ",", "0.6", ",", "0", ")", "\n", "joints", ".", "append", "(", "joint", ")", "\n", "\n", "", "pose", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "canvas", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", ".", "resize", "(", "(", "self", ".", "opt", ".", "load_size", ",", "self", ".", "opt", ".", "load_size", ")", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "params", "=", "get_params", "(", "self", ".", "opt", ",", "pose", ".", "size", ")", "\n", "transform_label", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ",", "method", "=", "Image", ".", "NEAREST", ",", "normalize", "=", "False", ")", "\n", "transform_img", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ",", "method", "=", "Image", ".", "BILINEAR", ",", "normalize", "=", "False", ")", "\n", "tensors_dist", "=", "0", "\n", "e", "=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "joints", ")", ")", ":", "\n", "            ", "im_dist", "=", "cv2", ".", "distanceTransform", "(", "255", "-", "joints", "[", "i", "]", ",", "cv2", ".", "DIST_L1", ",", "3", ")", "\n", "im_dist", "=", "np", ".", "clip", "(", "(", "im_dist", "/", "3", ")", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "tensor_dist", "=", "transform_img", "(", "Image", ".", "fromarray", "(", "im_dist", ")", ")", "\n", "tensors_dist", "=", "tensor_dist", "if", "e", "==", "1", "else", "torch", ".", "cat", "(", "[", "tensors_dist", ",", "tensor_dist", "]", ")", "\n", "e", "+=", "1", "\n", "\n", "", "tensor_pose", "=", "transform_label", "(", "pose", ")", "\n", "label_tensor", "=", "torch", ".", "cat", "(", "(", "tensor_pose", ",", "tensors_dist", ")", ",", "dim", "=", "0", ")", "\n", "return", "label_tensor", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.deepfashion_dataset.DeepFashionDataset.imgpath_to_labelpath": [[173, 176], ["path.replace().replace().replace", "path.replace().replace", "path.replace"], "methods", ["None"], ["", "def", "imgpath_to_labelpath", "(", "self", ",", "path", ")", ":", "\n", "        ", "label_path", "=", "path", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", ".", "replace", "(", "'/img/'", ",", "'/pose/'", ")", ".", "replace", "(", "'.jpg'", ",", "'_{}.txt'", ")", "\n", "return", "label_path", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.deepfashion_dataset.DeepFashionDataset.labelpath_to_imgpath": [[177, 180], ["path.replace().replace().replace", "path.replace().replace", "path.replace"], "methods", ["None"], ["", "def", "labelpath_to_imgpath", "(", "self", ",", "path", ")", ":", "\n", "        ", "img_path", "=", "path", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", ".", "replace", "(", "'/pose/'", ",", "'/img/'", ")", ".", "replace", "(", "'_{}.txt'", ",", "'.jpg'", ")", "\n", "return", "img_path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.celebahqedge_dataset.CelebAHQEdgeDataset.modify_commandline_options": [[15, 31], ["data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.BaseDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", "=", "Pix2pixDataset", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "parser", ".", "set_defaults", "(", "preprocess_mode", "=", "'resize_and_crop'", ")", "\n", "parser", ".", "set_defaults", "(", "no_pairing_check", "=", "True", ")", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "load_size", "=", "286", ")", "\n", "", "else", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "load_size", "=", "256", ")", "\n", "", "parser", ".", "set_defaults", "(", "crop_size", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "display_winsize", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "label_nc", "=", "15", ")", "\n", "parser", ".", "set_defaults", "(", "contain_dontcare_label", "=", "False", ")", "\n", "parser", ".", "set_defaults", "(", "cache_filelist_read", "=", "False", ")", "\n", "parser", ".", "set_defaults", "(", "cache_filelist_write", "=", "False", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.celebahqedge_dataset.CelebAHQEdgeDataset.get_paths": [[32, 51], ["range", "open", "open.readlines", "open.close", "len", "image_paths.append", "str", "label_paths.append", "os.path.join", "open", "open.readlines", "open.close", "os.path.join", "os.path.join", "os.path.join", "int", "lines[].strip", "lines[].strip", "lines[].strip().zfill", "lines[].strip"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ",", "opt", ")", ":", "\n", "\n", "        ", "if", "opt", ".", "phase", "==", "'train'", ":", "\n", "            ", "fd", "=", "open", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'train.txt'", ")", ")", "\n", "lines", "=", "fd", ".", "readlines", "(", ")", "\n", "fd", ".", "close", "(", ")", "\n", "", "elif", "opt", ".", "phase", "==", "'test'", ":", "\n", "            ", "fd", "=", "open", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'val.txt'", ")", ")", "\n", "lines", "=", "fd", ".", "readlines", "(", ")", "\n", "fd", ".", "close", "(", ")", "\n", "\n", "", "image_paths", "=", "[", "]", "\n", "label_paths", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "            ", "image_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'CelebA-HQ-img'", ",", "lines", "[", "i", "]", ".", "strip", "(", ")", "+", "'.jpg'", ")", ")", "\n", "subfolder", "=", "str", "(", "int", "(", "lines", "[", "i", "]", ".", "strip", "(", ")", ")", "//", "2000", ")", "\n", "label_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'CelebAMask-HQ-mask-anno'", ",", "subfolder", ",", "lines", "[", "i", "]", ".", "strip", "(", ")", ".", "zfill", "(", "5", ")", "+", "'_{}.png'", ")", ")", "\n", "\n", "", "return", "label_paths", ",", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.celebahqedge_dataset.CelebAHQEdgeDataset.get_ref": [[52, 69], ["range", "open", "fd.readlines", "len", "lines[].strip().split", "lines[].strip"], "methods", ["None"], ["", "def", "get_ref", "(", "self", ",", "opt", ")", ":", "\n", "        ", "extra", "=", "''", "\n", "if", "opt", ".", "phase", "==", "'test'", ":", "\n", "            ", "extra", "=", "'_test'", "\n", "", "with", "open", "(", "'./data/celebahq_ref{}.txt'", ".", "format", "(", "extra", ")", ")", "as", "fd", ":", "\n", "            ", "lines", "=", "fd", ".", "readlines", "(", ")", "\n", "", "ref_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "            ", "items", "=", "lines", "[", "i", "]", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "key", "=", "items", "[", "0", "]", "\n", "if", "opt", ".", "phase", "==", "'test'", ":", "\n", "                ", "val", "=", "items", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                ", "val", "=", "[", "items", "[", "1", "]", ",", "items", "[", "-", "1", "]", "]", "\n", "", "ref_dict", "[", "key", "]", "=", "val", "\n", "", "train_test_folder", "=", "(", "''", ",", "''", ")", "\n", "return", "ref_dict", ",", "train_test_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.celebahqedge_dataset.CelebAHQEdgeDataset.get_edges": [[70, 76], ["None"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "edge", ",", "t", ")", ":", "\n", "        ", "edge", "[", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", "1", ":", ",", ":", "]", "=", "edge", "[", "1", ":", ",", ":", "]", "|", "(", "t", "[", "1", ":", ",", ":", "]", "!=", "t", "[", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", "1", ":", ",", ":", "]", "!=", "t", "[", ":", "-", "1", ",", ":", "]", ")", "\n", "return", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.celebahqedge_dataset.CelebAHQEdgeDataset.get_label_tensor": [[77, 118], ["celebahqedge_dataset.CelebAHQEdgeDataset.labelpath_to_imgpath", "PIL.Image.open().resize", "data.base_dataset.get_params", "data.base_dataset.get_transform", "data.base_dataset.get_transform", "numpy.ones", "numpy.zeros", "skimage.feature.canny", "data.base_dataset.get_transform.", "data.base_dataset.get_transform.", "torch.cat", "numpy.zeros", "os.path.exists", "cv2.distanceTransform", "numpy.clip().astype", "data.base_dataset.get_transform.", "numpy.array", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.open", "path.format", "PIL.Image.open().convert().resize", "numpy.array", "celebahqedge_dataset.CelebAHQEdgeDataset.get_edges", "celebahqedge_dataset.CelebAHQEdgeDataset.get_edges", "PIL.Image.fromarray", "torch.cat", "PIL.Image.open().resize.convert", "numpy.clip", "PIL.Image.open().convert", "PIL.Image.open", "path.format"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.celebahqedge_dataset.CelebAHQEdgeDataset.labelpath_to_imgpath", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.get_params", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.celebahqedge_dataset.CelebAHQEdgeDataset.get_edges", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.celebahqedge_dataset.CelebAHQEdgeDataset.get_edges"], ["", "def", "get_label_tensor", "(", "self", ",", "path", ")", ":", "\n", "        ", "inner_parts", "=", "[", "'skin'", ",", "'l_brow'", ",", "'r_brow'", ",", "'l_eye'", ",", "'r_eye'", ",", "'l_ear'", ",", "'r_ear'", ",", "'nose'", ",", "'u_lip'", ",", "'mouth'", ",", "'l_lip'", ",", "'eye_g'", ",", "'hair'", "]", "\n", "img_path", "=", "self", ".", "labelpath_to_imgpath", "(", "path", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "resize", "(", "(", "self", ".", "opt", ".", "load_size", ",", "self", ".", "opt", ".", "load_size", ")", ",", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "params", "=", "get_params", "(", "self", ".", "opt", ",", "img", ".", "size", ")", "\n", "transform_label", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ",", "method", "=", "Image", ".", "NEAREST", ",", "normalize", "=", "False", ")", "\n", "transform_img", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ",", "method", "=", "Image", ".", "BILINEAR", ",", "normalize", "=", "False", ")", "\n", "\n", "inner_label", "=", "np", ".", "ones", "(", "img", ".", "size", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "edges", "=", "np", ".", "zeros", "(", "img", ".", "size", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "tensors_dist", "=", "0", "\n", "e", "=", "1", "\n", "for", "part", "in", "inner_parts", ":", "\n", "            ", "edge", "=", "np", ".", "zeros", "(", "img", ".", "size", ",", "dtype", "=", "np", ".", "uint8", ")", "#this for distance transform map on each facial part", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ".", "format", "(", "part", ")", ")", ":", "\n", "                ", "part_label", "=", "Image", ".", "open", "(", "path", ".", "format", "(", "part", ")", ")", ".", "convert", "(", "'L'", ")", ".", "resize", "(", "(", "self", ".", "opt", ".", "load_size", ",", "self", ".", "opt", ".", "load_size", ")", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "part_label", "=", "np", ".", "array", "(", "part_label", ")", "\n", "if", "part", "==", "'hair'", ":", "\n", "                    ", "inner_label", "[", "part_label", "==", "255", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "inner_label", "[", "part_label", "==", "255", "]", "=", "0", "\n", "", "edges", "=", "self", ".", "get_edges", "(", "edges", ",", "part_label", ")", "\n", "edge", "=", "self", ".", "get_edges", "(", "edge", ",", "part_label", ")", "\n", "", "im_dist", "=", "cv2", ".", "distanceTransform", "(", "255", "-", "edge", "*", "255", ",", "cv2", ".", "DIST_L1", ",", "3", ")", "\n", "im_dist", "=", "np", ".", "clip", "(", "(", "im_dist", "/", "3", ")", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "tensor_dist", "=", "transform_img", "(", "Image", ".", "fromarray", "(", "im_dist", ")", ")", "\n", "tensors_dist", "=", "tensor_dist", "if", "e", "==", "1", "else", "torch", ".", "cat", "(", "[", "tensors_dist", ",", "tensor_dist", "]", ")", "\n", "e", "+=", "1", "\n", "\n", "# canny edge for background", "\n", "", "canny_edges", "=", "feature", ".", "canny", "(", "np", ".", "array", "(", "img", ".", "convert", "(", "'L'", ")", ")", ")", "\n", "canny_edges", "=", "canny_edges", "*", "inner_label", "\n", "\n", "edges_all", "=", "edges", "+", "canny_edges", "\n", "edges_all", "[", "edges_all", ">", "1", "]", "=", "1", "\n", "tensor_edges_all", "=", "transform_label", "(", "Image", ".", "fromarray", "(", "edges_all", "*", "255", ")", ")", "\n", "edges", "[", "edges", ">", "1", "]", "=", "1", "\n", "tensor_edges", "=", "transform_label", "(", "Image", ".", "fromarray", "(", "edges", "*", "255", ")", ")", "\n", "\n", "label_tensor", "=", "torch", ".", "cat", "(", "(", "tensor_edges_all", ",", "tensors_dist", ",", "tensor_edges", ")", ",", "dim", "=", "0", ")", "\n", "return", "label_tensor", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.celebahqedge_dataset.CelebAHQEdgeDataset.imgpath_to_labelpath": [[119, 124], ["path.split", "str", "os.path.join", "int", "[].zfill", "name.split", "name.split"], "methods", ["None"], ["", "def", "imgpath_to_labelpath", "(", "self", ",", "path", ")", ":", "\n", "        ", "root", ",", "name", "=", "path", ".", "split", "(", "'CelebA-HQ-img/'", ")", "\n", "subfolder", "=", "str", "(", "int", "(", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "//", "2000", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'CelebAMask-HQ-mask-anno'", ",", "subfolder", ",", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "zfill", "(", "5", ")", "+", "'_{}.png'", ")", "\n", "return", "label_path", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.celebahqedge_dataset.CelebAHQEdgeDataset.labelpath_to_imgpath": [[125, 130], ["os.path.join", "path.replace().split", "os.path.basename().split", "str", "path.replace", "os.path.basename", "int"], "methods", ["None"], ["", "def", "labelpath_to_imgpath", "(", "self", ",", "path", ")", ":", "\n", "        ", "root", "=", "path", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", ".", "split", "(", "'CelebAMask-HQ-mask-anno/'", ")", "[", "0", "]", "\n", "name", "=", "os", ".", "path", ".", "basename", "(", "path", ")", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'CelebA-HQ-img'", ",", "str", "(", "int", "(", "name", ")", ")", "+", "'.jpg'", ")", "\n", "return", "img_path", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.ade20k_dataset.ADE20KDataset.modify_commandline_options": [[11, 26], ["data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.BaseDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", "=", "Pix2pixDataset", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "parser", ".", "set_defaults", "(", "preprocess_mode", "=", "'resize_and_crop'", ")", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "load_size", "=", "286", ")", "\n", "", "else", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "load_size", "=", "256", ")", "\n", "", "parser", ".", "set_defaults", "(", "crop_size", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "display_winsize", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "label_nc", "=", "150", ")", "\n", "parser", ".", "set_defaults", "(", "contain_dontcare_label", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "cache_filelist_read", "=", "False", ")", "\n", "parser", ".", "set_defaults", "(", "cache_filelist_write", "=", "False", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.ade20k_dataset.ADE20KDataset.get_paths": [[27, 45], ["sorted", "data.image_folder.make_dataset", "p.endswith", "image_paths.append", "p.endswith", "label_paths.append"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.image_folder.make_dataset"], ["", "def", "get_paths", "(", "self", ",", "opt", ")", ":", "\n", "        ", "root", "=", "opt", ".", "dataroot", "\n", "phase", "=", "'val'", "if", "opt", ".", "phase", "==", "'test'", "else", "'train'", "\n", "subfolder", "=", "'validation'", "if", "opt", ".", "phase", "==", "'test'", "else", "'training'", "\n", "cache", "=", "False", "if", "opt", ".", "phase", "==", "'test'", "else", "True", "\n", "all_images", "=", "sorted", "(", "make_dataset", "(", "root", "+", "'/'", "+", "subfolder", ",", "recursive", "=", "True", ",", "read_cache", "=", "cache", ",", "write_cache", "=", "False", ")", ")", "\n", "\n", "image_paths", "=", "[", "]", "\n", "label_paths", "=", "[", "]", "\n", "for", "p", "in", "all_images", ":", "\n", "            ", "if", "'_%s_'", "%", "phase", "not", "in", "p", ":", "\n", "                ", "continue", "\n", "", "if", "p", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "                ", "image_paths", ".", "append", "(", "p", ")", "\n", "", "elif", "p", ".", "endswith", "(", "'.png'", ")", ":", "\n", "                ", "label_paths", ".", "append", "(", "p", ")", "\n", "\n", "", "", "return", "label_paths", ",", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.ade20k_dataset.ADE20KDataset.get_ref": [[46, 61], ["range", "open", "fd.readlines", "len", "lines[].strip().split", "lines[].strip"], "methods", ["None"], ["", "def", "get_ref", "(", "self", ",", "opt", ")", ":", "\n", "        ", "extra", "=", "'_test'", "if", "opt", ".", "phase", "==", "'test'", "else", "''", "\n", "with", "open", "(", "'./data/ade20k_ref{}.txt'", ".", "format", "(", "extra", ")", ")", "as", "fd", ":", "\n", "            ", "lines", "=", "fd", ".", "readlines", "(", ")", "\n", "", "ref_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "            ", "items", "=", "lines", "[", "i", "]", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "key", "=", "items", "[", "0", "]", "\n", "if", "opt", ".", "phase", "==", "'test'", ":", "\n", "                ", "val", "=", "items", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                ", "val", "=", "[", "items", "[", "1", "]", ",", "items", "[", "-", "1", "]", "]", "\n", "", "ref_dict", "[", "key", "]", "=", "val", "\n", "", "train_test_folder", "=", "(", "'training'", ",", "'validation'", ")", "\n", "return", "ref_dict", ",", "train_test_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options": [[15, 20], ["parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--no_pairing_check'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If specified, skip sanity check of correct label-image file pairing'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.initialize": [[21, 47], ["pix2pix_dataset.Pix2pixDataset.get_paths", "len", "pix2pix_dataset.Pix2pixDataset.get_ref", "util.natural_sort", "util.natural_sort", "zip", "pix2pix_dataset.Pix2pixDataset.paths_match"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.get_paths", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.get_ref", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.natural_sort", "home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.natural_sort", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.paths_match"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "\n", "label_paths", ",", "image_paths", "=", "self", ".", "get_paths", "(", "opt", ")", "\n", "\n", "if", "opt", ".", "dataset_mode", "!=", "'celebahq'", "and", "opt", ".", "dataset_mode", "!=", "'deepfashion'", ":", "\n", "            ", "util", ".", "natural_sort", "(", "label_paths", ")", "\n", "util", ".", "natural_sort", "(", "image_paths", ")", "\n", "\n", "", "label_paths", "=", "label_paths", "[", ":", "opt", ".", "max_dataset_size", "]", "\n", "image_paths", "=", "image_paths", "[", ":", "opt", ".", "max_dataset_size", "]", "\n", "\n", "if", "not", "opt", ".", "no_pairing_check", ":", "\n", "            ", "for", "path1", ",", "path2", "in", "zip", "(", "label_paths", ",", "image_paths", ")", ":", "\n", "                ", "assert", "self", ".", "paths_match", "(", "path1", ",", "path2", ")", ",", "\"The label-image pair (%s, %s) do not look like the right pair because the filenames are quite different. Are you sure about the pairing? Please see data/pix2pix_dataset.py to see what is going on, and use --no_pairing_check to bypass this.\"", "%", "(", "path1", ",", "path2", ")", "\n", "\n", "", "", "self", ".", "label_paths", "=", "label_paths", "\n", "self", ".", "image_paths", "=", "image_paths", "\n", "\n", "size", "=", "len", "(", "self", ".", "label_paths", ")", "\n", "self", ".", "dataset_size", "=", "size", "\n", "\n", "self", ".", "real_reference_probability", "=", "1", "if", "opt", ".", "phase", "==", "'test'", "else", "opt", ".", "real_reference_probability", "\n", "self", ".", "hard_reference_probability", "=", "0", "if", "opt", ".", "phase", "==", "'test'", "else", "opt", ".", "hard_reference_probability", "\n", "self", ".", "ref_dict", ",", "self", ".", "train_test_folder", "=", "self", ".", "get_ref", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.get_paths": [[48, 53], ["None"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ",", "opt", ")", ":", "\n", "        ", "label_paths", "=", "[", "]", "\n", "image_paths", "=", "[", "]", "\n", "assert", "False", ",", "\"A subclass of Pix2pixDataset must override self.get_paths(self, opt)\"", "\n", "return", "label_paths", ",", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.paths_match": [[54, 58], ["os.path.splitext", "os.path.splitext", "os.path.basename", "os.path.basename"], "methods", ["None"], ["", "def", "paths_match", "(", "self", ",", "path1", ",", "path2", ")", ":", "\n", "        ", "filename1_without_ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "path1", ")", ")", "[", "0", "]", "\n", "filename2_without_ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "path2", ")", ")", "[", "0", "]", "\n", "return", "filename1_without_ext", "==", "filename2_without_ext", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.get_label_tensor": [[59, 66], ["PIL.Image.open", "data.base_dataset.get_params", "data.base_dataset.get_transform", "data.base_dataset.get_transform."], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.get_params", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.get_transform"], ["", "def", "get_label_tensor", "(", "self", ",", "path", ")", ":", "\n", "        ", "label", "=", "Image", ".", "open", "(", "path", ")", "\n", "params1", "=", "get_params", "(", "self", ".", "opt", ",", "label", ".", "size", ")", "\n", "transform_label", "=", "get_transform", "(", "self", ".", "opt", ",", "params1", ",", "method", "=", "Image", ".", "NEAREST", ",", "normalize", "=", "False", ")", "\n", "label_tensor", "=", "transform_label", "(", "label", ")", "*", "255.0", "\n", "label_tensor", "[", "label_tensor", "==", "255", "]", "=", "self", ".", "opt", ".", "label_nc", "# 'unknown' is opt.label_nc", "\n", "return", "label_tensor", ",", "params1", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.__getitem__": [[67, 156], ["pix2pix_dataset.Pix2pixDataset.get_label_tensor", "PIL.Image.open().convert", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "random.random", "pix2pix_dataset.Pix2pixDataset.postprocess", "pix2pix_dataset.Pix2pixDataset.paths_match", "PIL.Image.open().convert", "pix2pix_dataset.Pix2pixDataset.get_label_tensor", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "torch.zeros_like", "torch.ones_like", "PIL.Image.open", "os.path.basename", "os.path.join", "os.path.join.replace", "pix2pix_dataset.Pix2pixDataset.imgpath_to_labelpath", "pix2pix_dataset.Pix2pixDataset.get_label_tensor", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "image_path.replace().split", "PIL.Image.open", "os.path.join.replace().replace", "pix2pix_dataset.Pix2pixDataset.imgpath_to_labelpath", "pix2pix_dataset.Pix2pixDataset.imgpath_to_labelpath", "image_path.replace().split", "os.path.join", "PIL.Image.open().convert", "pix2pix_dataset.Pix2pixDataset.imgpath_to_labelpath", "pix2pix_dataset.Pix2pixDataset.get_label_tensor", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "os.path.dirname().replace", "os.path.dirname", "os.path.dirname", "image_path.replace", "os.path.join.replace", "image_path.replace", "os.path.basename().split", "os.path.basename().split", "PIL.Image.open", "os.path.dirname", "os.path.basename", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.get_label_tensor", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.postprocess", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.paths_match", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.get_label_tensor", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.imgpath_to_labelpath", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.get_label_tensor", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.imgpath_to_labelpath", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.imgpath_to_labelpath", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.imgpath_to_labelpath", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.get_label_tensor", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.get_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# LabelImage", "\n", "# index = 312 * 3 + 1", "\n", "        ", "label_path", "=", "self", ".", "label_paths", "[", "index", "]", "\n", "image_path", "=", "self", ".", "image_paths", "[", "index", "]", "\n", "\n", "label_tensor", ",", "params1", "=", "self", ".", "get_label_tensor", "(", "label_path", ")", "\n", "\n", "if", "not", "self", ".", "opt", ".", "no_pairing_check", ":", "\n", "            ", "assert", "self", ".", "paths_match", "(", "label_path", ",", "image_path", ")", ",", "\"The label_path %s and image_path %s don't match.\"", "%", "(", "label_path", ",", "image_path", ")", "\n", "", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "transform_image", "=", "get_transform", "(", "self", ".", "opt", ",", "params1", ")", "\n", "image_tensor", "=", "transform_image", "(", "image", ")", "\n", "\n", "ref_tensor", "=", "0", "\n", "label_ref_tensor", "=", "0", "\n", "\n", "# image_path = self.image_paths[index + 10]", "\n", "random_p", "=", "random", ".", "random", "(", ")", "\n", "if", "random_p", "<", "self", ".", "real_reference_probability", "or", "self", ".", "opt", ".", "phase", "==", "'test'", ":", "\n", "# if 0:", "\n", "            ", "key", "=", "image_path", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", ".", "split", "(", "'DeepFashion/'", ")", "[", "-", "1", "]", "if", "self", ".", "opt", ".", "dataset_mode", "==", "'deepfashion'", "else", "os", ".", "path", ".", "basename", "(", "image_path", ")", "\n", "val", "=", "self", ".", "ref_dict", "[", "key", "]", "\n", "if", "random_p", "<", "self", ".", "hard_reference_probability", ":", "\n", "                ", "path_ref", "=", "val", "[", "1", "]", "#hard reference", "\n", "", "else", ":", "\n", "                ", "path_ref", "=", "val", "[", "0", "]", "#easy reference", "\n", "", "if", "self", ".", "opt", ".", "dataset_mode", "==", "'deepfashion'", ":", "\n", "                ", "path_ref", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "dataroot", ",", "path_ref", ")", "\n", "", "else", ":", "\n", "                ", "path_ref", "=", "os", ".", "path", ".", "dirname", "(", "image_path", ")", ".", "replace", "(", "self", ".", "train_test_folder", "[", "1", "]", ",", "self", ".", "train_test_folder", "[", "0", "]", ")", "+", "'/'", "+", "path_ref", "\n", "\n", "", "image_ref", "=", "Image", ".", "open", "(", "path_ref", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "opt", ".", "dataset_mode", "==", "'ade20k'", "or", "self", ".", "opt", ".", "dataset_mode", "==", "'celebahqedge'", "or", "self", ".", "opt", ".", "dataset_mode", "==", "'ade20klayout'", ":", "\n", "                ", "path_ref_label", "=", "path_ref", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", "\n", "path_ref_label", "=", "self", ".", "imgpath_to_labelpath", "(", "path_ref_label", ")", "\n", "", "elif", "self", ".", "opt", ".", "dataset_mode", "==", "'coco'", "or", "self", ".", "opt", ".", "dataset_mode", "==", "'cocolayout'", ":", "\n", "                ", "path_ref_label", "=", "path_ref", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ".", "replace", "(", "'image'", ",", "'label'", ")", "\n", "path_ref_label", "=", "self", ".", "imgpath_to_labelpath", "(", "path_ref_label", ")", "\n", "", "else", ":", "\n", "                ", "path_ref_label", "=", "self", ".", "imgpath_to_labelpath", "(", "path_ref", ")", "\n", "\n", "", "label_ref_tensor", ",", "params", "=", "self", ".", "get_label_tensor", "(", "path_ref_label", ")", "\n", "transform_image", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "ref_tensor", "=", "transform_image", "(", "image_ref", ")", "\n", "#ref_tensor = self.reference_transform(image_ref)", "\n", "self_ref_flag", "=", "torch", ".", "zeros_like", "(", "ref_tensor", ")", "\n", "", "else", ":", "\n", "# if 1:", "\n", "            ", "pair", "=", "False", "\n", "if", "self", ".", "opt", ".", "dataset_mode", "==", "'deepfashion'", "and", "self", ".", "opt", ".", "video_like", ":", "\n", "# if self.opt.hdfs:", "\n", "#     key = image_path.split('DeepFashion.zip@/')[-1]", "\n", "# else:", "\n", "#     key = image_path.split('DeepFashion/')[-1]", "\n", "                ", "key", "=", "image_path", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", ".", "split", "(", "'DeepFashion/'", ")", "[", "-", "1", "]", "\n", "val", "=", "self", ".", "ref_dict", "[", "key", "]", "\n", "ref_name", "=", "val", "[", "0", "]", "\n", "\n", "key_name", "=", "key", "\n", "if", "os", ".", "path", ".", "dirname", "(", "ref_name", ")", "==", "os", ".", "path", ".", "dirname", "(", "key_name", ")", "and", "os", ".", "path", ".", "basename", "(", "ref_name", ")", ".", "split", "(", "'_'", ")", "[", "0", "]", "==", "os", ".", "path", ".", "basename", "(", "key_name", ")", ".", "split", "(", "'_'", ")", "[", "0", "]", ":", "\n", "                    ", "path_ref", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "dataroot", ",", "ref_name", ")", "\n", "image_ref", "=", "Image", ".", "open", "(", "path_ref", ")", ".", "convert", "(", "'RGB'", ")", "\n", "label_ref_path", "=", "self", ".", "imgpath_to_labelpath", "(", "path_ref", ")", "\n", "label_ref_tensor", ",", "params", "=", "self", ".", "get_label_tensor", "(", "label_ref_path", ")", "\n", "transform_image", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "ref_tensor", "=", "transform_image", "(", "image_ref", ")", "\n", "pair", "=", "True", "\n", "", "", "if", "not", "pair", ":", "\n", "                ", "label_ref_tensor", ",", "params", "=", "self", ".", "get_label_tensor", "(", "label_path", ")", "\n", "transform_image", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "ref_tensor", "=", "transform_image", "(", "image", ")", "\n", "#ref_tensor = self.reference_transform(image)", "\n", "", "self_ref_flag", "=", "torch", ".", "ones_like", "(", "ref_tensor", ")", "\n", "\n", "", "input_dict", "=", "{", "'label'", ":", "label_tensor", ",", "\n", "'image'", ":", "image_tensor", ",", "\n", "'path'", ":", "image_path", ",", "\n", "'self_ref'", ":", "self_ref_flag", ",", "\n", "'ref'", ":", "ref_tensor", ",", "\n", "'label_ref'", ":", "label_ref_tensor", "\n", "}", "\n", "\n", "# Give subclasses a chance to modify the final output", "\n", "self", ".", "postprocess", "(", "input_dict", ")", "\n", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.postprocess": [[157, 159], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "input_dict", ")", ":", "\n", "        ", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.__len__": [[160, 162], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset_size", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.get_ref": [[163, 165], ["None"], "methods", ["None"], ["", "def", "get_ref", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.pix2pix_dataset.Pix2pixDataset.imgpath_to_labelpath": [[166, 168], ["None"], "methods", ["None"], ["", "def", "imgpath_to_labelpath", "(", "self", ",", "path", ")", ":", "\n", "        ", "return", "path", "", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.BaseDataset.__init__": [[14, 16], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.BaseDataset.modify_commandline_options": [[17, 20], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.BaseDataset.initialize": [[21, 23], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.get_params": [[25, 48], ["random.randint", "random.randint", "numpy.maximum", "numpy.maximum", "random.random", "int", "min", "max"], "function", ["None"], ["", "", "def", "get_params", "(", "opt", ",", "size", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "new_h", "=", "h", "\n", "new_w", "=", "w", "\n", "if", "opt", ".", "preprocess_mode", "==", "'resize_and_crop'", ":", "\n", "        ", "new_h", "=", "new_w", "=", "opt", ".", "load_size", "\n", "", "elif", "opt", ".", "preprocess_mode", "==", "'scale_width_and_crop'", ":", "\n", "        ", "new_w", "=", "opt", ".", "load_size", "\n", "new_h", "=", "opt", ".", "load_size", "*", "h", "//", "w", "\n", "", "elif", "opt", ".", "preprocess_mode", "==", "'scale_shortside_and_crop'", ":", "\n", "        ", "ss", ",", "ls", "=", "min", "(", "w", ",", "h", ")", ",", "max", "(", "w", ",", "h", ")", "# shortside and longside", "\n", "width_is_shorter", "=", "w", "==", "ss", "\n", "ls", "=", "int", "(", "opt", ".", "load_size", "*", "ls", "/", "ss", ")", "\n", "new_w", ",", "new_h", "=", "(", "ss", ",", "ls", ")", "if", "width_is_shorter", "else", "(", "ls", ",", "ss", ")", "\n", "\n", "", "x", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_w", "-", "opt", ".", "crop_size", ")", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_h", "-", "opt", ".", "crop_size", ")", ")", "\n", "\n", "# if flip_flag:", "\n", "flip", "=", "random", ".", "random", "(", ")", ">", "0.5", "\n", "# else:", "\n", "#     flip = False", "\n", "return", "{", "'crop_pos'", ":", "(", "x", ",", "y", ")", ",", "'flip'", ":", "flip", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.get_transform": [[50, 87], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "transform_list.append", "round", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.Lambda", "torchvision.Resize", "transform_list.append", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "params.keys", "torchvision.Lambda", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Lambda", "transform_list.append", "base_dataset.__add1", "torchvision.Lambda", "base_dataset.__crop", "base_dataset.__make_power_2", "base_dataset.__resize", "base_dataset.__flip", "base_dataset.__rotate", "base_dataset.__scale_width", "base_dataset.__scale_shortside"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__add1", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__crop", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__make_power_2", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__resize", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__flip", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__rotate", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__scale_shortside"], ["", "def", "get_transform", "(", "opt", ",", "params", ",", "method", "=", "Image", ".", "BICUBIC", ",", "normalize", "=", "True", ",", "toTensor", "=", "True", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "opt", ".", "dataset_mode", "==", "'flickr'", "and", "method", "==", "Image", ".", "NEAREST", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__add1", "(", "img", ")", ")", ")", "\n", "", "if", "'resize'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "load_size", ",", "opt", ".", "load_size", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "interpolation", "=", "method", ")", ")", "\n", "", "elif", "'scale_width'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "load_size", ",", "method", ")", ")", ")", "\n", "", "elif", "'scale_shortside'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale_shortside", "(", "img", ",", "opt", ".", "load_size", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "'crop'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__crop", "(", "img", ",", "params", "[", "'crop_pos'", "]", ",", "opt", ".", "crop_size", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "preprocess_mode", "==", "'none'", ":", "\n", "        ", "base", "=", "32", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__make_power_2", "(", "img", ",", "base", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "preprocess_mode", "==", "'fixed'", ":", "\n", "        ", "w", "=", "opt", ".", "crop_size", "\n", "h", "=", "round", "(", "opt", ".", "crop_size", "/", "opt", ".", "aspect_ratio", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__resize", "(", "img", ",", "w", ",", "h", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_flip", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__flip", "(", "img", ",", "params", "[", "'flip'", "]", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", "and", "'rotate'", "in", "params", ".", "keys", "(", ")", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__rotate", "(", "img", ",", "params", "[", "'rotate'", "]", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "toTensor", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.normalize": [[88, 90], ["torchvision.Normalize"], "function", ["None"], ["", "def", "normalize", "(", ")", ":", "\n", "    ", "return", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__resize": [[92, 94], ["img.resize"], "function", ["None"], ["", "def", "__resize", "(", "img", ",", "w", ",", "h", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__make_power_2": [[96, 103], ["int", "int", "img.resize", "round", "round"], "function", ["None"], ["", "def", "__make_power_2", "(", "img", ",", "base", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "h", "=", "int", "(", "round", "(", "oh", "/", "base", ")", "*", "base", ")", "\n", "w", "=", "int", "(", "round", "(", "ow", "/", "base", ")", "*", "base", ")", "\n", "if", "(", "h", "==", "oh", ")", "and", "(", "w", "==", "ow", ")", ":", "\n", "        ", "return", "img", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__scale_width": [[105, 112], ["int", "img.resize"], "function", ["None"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "if", "(", "ow", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "h", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__scale_shortside": [[114, 123], ["int", "img.resize", "min", "max"], "function", ["None"], ["", "def", "__scale_shortside", "(", "img", ",", "target_width", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "ss", ",", "ls", "=", "min", "(", "ow", ",", "oh", ")", ",", "max", "(", "ow", ",", "oh", ")", "# shortside and longside", "\n", "width_is_shorter", "=", "ow", "==", "ss", "\n", "if", "(", "ss", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "ls", "=", "int", "(", "target_width", "*", "ls", "/", "ss", ")", "\n", "nw", ",", "nh", "=", "(", "ss", ",", "ls", ")", "if", "width_is_shorter", "else", "(", "ls", ",", "ss", ")", "\n", "return", "img", ".", "resize", "(", "(", "nw", ",", "nh", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__crop": [[125, 130], ["img.crop"], "function", ["None"], ["", "def", "__crop", "(", "img", ",", "pos", ",", "size", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "x1", ",", "y1", "=", "pos", "\n", "tw", "=", "th", "=", "size", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__flip": [[132, 136], ["img.transpose"], "function", ["None"], ["", "def", "__flip", "(", "img", ",", "flip", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "", "def", "__rotate", "(", "img", ",", "deg", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__rotate": [[136, 138], ["img.rotate"], "function", ["None"], ["", "def", "__rotate", "(", "img", ",", "deg", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "return", "img", ".", "rotate", "(", "deg", ",", "resample", "=", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.base_dataset.__add1": [[139, 141], ["PIL.Image.fromarray", "numpy.array"], "function", ["None"], ["", "def", "__add1", "(", "img", ")", ":", "\n", "    ", "return", "Image", ".", "fromarray", "(", "np", ".", "array", "(", "img", ")", "+", "1", ")", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.image_folder.ImageFolder.__init__": [[67, 80], ["image_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "root", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\n", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.image_folder.ImageFolder.__getitem__": [[81, 90], ["image_folder.ImageFolder.loader", "image_folder.ImageFolder.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.image_folder.ImageFolder.__len__": [[91, 93], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.image_folder.is_image_file": [[16, 18], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.image_folder.make_dataset_rec": [[20, 28], ["os.path.isdir", "sorted", "os.walk", "image_folder.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.image_folder.is_image_file"], ["", "def", "make_dataset_rec", "(", "dir", ",", "images", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "dnames", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ",", "followlinks", "=", "True", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.image_folder.make_dataset": [[30, 59], ["os.path.join", "os.path.isfile", "image_folder.make_dataset_rec", "sorted", "os.path.join", "os.path.isdir", "os.path.islink", "os.walk", "open", "print", "open", "f.read().splitlines", "image_folder.is_image_file", "f.write", "os.path.join", "f.read().splitlines.append", "f.read"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.image_folder.make_dataset_rec", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.image_folder.is_image_file"], ["", "", "", "", "def", "make_dataset", "(", "dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "False", ",", "write_cache", "=", "False", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "\n", "if", "read_cache", ":", "\n", "        ", "possible_filelist", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'files.list'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "possible_filelist", ")", ":", "\n", "            ", "with", "open", "(", "possible_filelist", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "images", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "return", "images", "\n", "\n", "", "", "", "if", "recursive", ":", "\n", "        ", "make_dataset_rec", "(", "dir", ",", "images", ")", "\n", "", "else", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", "or", "os", ".", "path", ".", "islink", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "dnames", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "            ", "for", "fname", "in", "fnames", ":", "\n", "                ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "", "if", "write_cache", ":", "\n", "        ", "filelist_cache", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'files.list'", ")", "\n", "with", "open", "(", "filelist_cache", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "path", "in", "images", ":", "\n", "                ", "f", ".", "write", "(", "\"%s\\n\"", "%", "path", ")", "\n", "", "print", "(", "'wrote filelist cache at %s'", "%", "filelist_cache", ")", "\n", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.image_folder.default_loader": [[61, 63], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.__init__.find_dataset_using_name": [[11, 34], ["importlib.import_module", "importlib.import_module.__dict__.items", "dataset_name.replace", "ValueError", "issubclass", "name.lower", "target_dataset_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.__init__.get_option_setter": [[36, 39], ["__init__.find_dataset_using_name"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.__init__.find_dataset_using_name"], []], "home.repos.pwc.inspect_result.fnzhan_RABIT.data.__init__.create_dataloader": [[41, 55], ["__init__.find_dataset_using_name", "find_dataset_using_name.", "dataset.initialize", "print", "torch.utils.data.DataLoader", "int", "len", "type"], "function", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.__init__.find_dataset_using_name", "home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.initialize"], []], "home.repos.pwc.inspect_result.fnzhan_RABIT.options.test_options.TestOptions.initialize": [[10, 24], ["base_options.BaseOptions.initialize", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "float"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'how many test images to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_per_img'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, save per image'", ")", "\n", "parser", ".", "add_argument", "(", "'--show_corr'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, save bilinear upsample correspondence'", ")", "\n", "\n", "parser", ".", "set_defaults", "(", "preprocess_mode", "=", "'scale_width_and_crop'", ",", "crop_size", "=", "128", ",", "load_size", "=", "128", ",", "display_winsize", "=", "128", ")", "\n", "parser", ".", "set_defaults", "(", "serial_batches", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "no_flip", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "phase", "=", "'test'", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.options.train_options.TrainOptions.initialize": [[10, 54], ["base_options.BaseOptions.initialize", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "# for displays", "\n", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "\n", "# for training", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter at starting learning rate. This is NOT the total #epochs. Totla #epochs is niter + niter_decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta2'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--D_steps_per_G'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of discriminator iterations per generator iterations.'", ")", "\n", "\n", "# for discriminators", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_feat'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for feature matching loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_vgg'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for vgg loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_ganFeat_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use discriminator feature matching loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--gan_mode'", ",", "type", "=", "str", ",", "default", "=", "'hinge'", ",", "help", "=", "'(ls|original|hinge)'", ")", "\n", "parser", ".", "add_argument", "(", "'--netD'", ",", "type", "=", "str", ",", "default", "=", "'multiscale'", ",", "help", "=", "'(n_layers|multiscale|image)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_TTUR'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use TTUR training scheme'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--which_perceptual'", ",", "type", "=", "str", ",", "default", "=", "'5_2'", ",", "help", "=", "'relu5_2 or relu4_2'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_perceptual'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_mask'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'weight of warped mask loss, used in direct/cycle'", ")", "\n", "parser", ".", "add_argument", "(", "'--real_reference_probability'", ",", "type", "=", "float", ",", "default", "=", "0.7", ",", "help", "=", "'self-supervised training probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--hard_reference_probability'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'hard reference training probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_gan'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight of all loss in stage1'", ")", "\n", "parser", ".", "add_argument", "(", "'--novgg_featpair'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'in no vgg setting, use pair feat loss in domain adaptation'", ")", "\n", "parser", ".", "add_argument", "(", "'--D_cam'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'weight of CAM loss in D'", ")", "\n", "parser", ".", "add_argument", "(", "'--warp_self_w'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'push warp self to ref'", ")", "\n", "parser", ".", "add_argument", "(", "'--fm_ratio'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'vgg fm loss weight comp with ctx loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_22ctx'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, also use 2-2 in ctx loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--ctx_w'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'ctx loss weight'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_epoch'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'useful when noise_for_mask is true, first train mask_epoch with mask, the rest epoch with noise'", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.__init__": [[17, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.initialize": [[20, 100], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "# experiment specifics", "\n", "        ", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'label2coco'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0,1,2,3'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'pix2pix'", ",", "help", "=", "'which model to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_G'", ",", "type", "=", "str", ",", "default", "=", "'spectralinstance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_D'", ",", "type", "=", "str", ",", "default", "=", "'spectralinstance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_E'", ",", "type", "=", "str", ",", "default", "=", "'spectralinstance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--blur'", ",", "type", "=", "float", ",", "default", "=", "0.005", ",", "help", "=", "'blur in OT'", ")", "\n", "parser", ".", "add_argument", "(", "'--correspondence'", ",", "type", "=", "str", ",", "default", "=", "'ot'", ",", "help", "=", "'ot, euc'", ")", "\n", "parser", ".", "add_argument", "(", "'--ot_weight'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use euc distance as weight of ot'", ")", "\n", "\n", "# input/output sizes", "\n", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--preprocess_mode'", ",", "type", "=", "str", ",", "default", "=", "'scale_width_and_crop'", ",", "help", "=", "'scaling and cropping of images at load time.'", ",", "choices", "=", "(", "\"resize_and_crop\"", ",", "\"crop\"", ",", "\"scale_width\"", ",", "\"scale_width_and_crop\"", ",", "\"scale_shortside\"", ",", "\"scale_shortside_and_crop\"", ",", "\"fixed\"", ",", "\"none\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--load_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'Scale images to this size. The final image will be cropped to --crop_size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'Crop to the width of crop_size (after initially scaling the images to load_size.)'", ")", "\n", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'The ratio width/height. The final height of the load image will be crop_size/aspect_ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--label_nc'", ",", "type", "=", "int", ",", "default", "=", "182", ",", "help", "=", "'# of input label classes without unknown class. If you have unknown class as class label, specify --contain_dopntcare_label.'", ")", "\n", "parser", ".", "add_argument", "(", "'--contain_dontcare_label'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if the label map contains dontcare label (dontcare=255)'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "\n", "# for setting inputs", "\n", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "type", "=", "str", ",", "default", "=", "'/mnt/blob/Dataset/ADEChallengeData2016/images'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_mode'", ",", "type", "=", "str", ",", "default", "=", "'ade20k'", ")", "\n", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data argumentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "sys", ".", "maxsize", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_from_opt_file'", ",", "action", "=", "'store_true'", ",", "help", "=", "'load the options from checkpoints and use that as default'", ")", "\n", "parser", ".", "add_argument", "(", "'--cache_filelist_write'", ",", "action", "=", "'store_true'", ",", "help", "=", "'saves the current filelist into a text file, so that it loads faster'", ")", "\n", "parser", ".", "add_argument", "(", "'--cache_filelist_read'", ",", "action", "=", "'store_true'", ",", "help", "=", "'reads from the file list cache'", ")", "\n", "\n", "# for displays", "\n", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'display window size'", ")", "\n", "\n", "# for generator", "\n", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'seace'", ",", "help", "=", "'selects model to use for netG (pix2pixhd | spade | seace)'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'xavier'", ",", "help", "=", "'network initialization [normal|xavier|kaiming|orthogonal]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_variance'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'variance of the initialization distribution'", ")", "\n", "parser", ".", "add_argument", "(", "'--z_dim'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "\"dimension of the latent z vector\"", ")", "\n", "\n", "# for instance-wise features", "\n", "parser", ".", "add_argument", "(", "'--CBN_intype'", ",", "type", "=", "str", ",", "default", "=", "'warp_mask'", ",", "help", "=", "'type of CBN input for framework, warp/mask/warp_mask'", ")", "\n", "parser", ".", "add_argument", "(", "'--maskmix'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use mask in correspondence net'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_attention'", ",", "action", "=", "'store_true'", ",", "help", "=", "'and nonlocal block in G and D'", ")", "\n", "parser", ".", "add_argument", "(", "'--warp_mask_losstype'", ",", "type", "=", "str", ",", "default", "=", "'none'", ",", "help", "=", "'type of warped mask loss, none/direct/cycle'", ")", "\n", "parser", ".", "add_argument", "(", "'--show_warpmask'", ",", "action", "=", "'store_true'", ",", "help", "=", "'save warp mask'", ")", "\n", "parser", ".", "add_argument", "(", "'--match_kernel'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'correspondence matrix match kernel size'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptor_kernel'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'kernel size in domain adaptor'", ")", "\n", "parser", ".", "add_argument", "(", "'--PONO'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use positional normalization '", ")", "\n", "parser", ".", "add_argument", "(", "'--PONO_C'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use C normalization in corr module'", ")", "\n", "parser", ".", "add_argument", "(", "'--eqlr_sn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, use equlr, else use sn'", ")", "\n", "parser", ".", "add_argument", "(", "'--vgg_normal_correct'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, correct vgg normalization and replace vgg FM model with ctx model'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_domainC'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'weight of Domain classification loss for domain adaptation'", ")", "\n", "parser", ".", "add_argument", "(", "'--domain_rela'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, use Relativistic loss in domain classifier'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_ema'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, use EMA in G'", ")", "\n", "parser", ".", "add_argument", "(", "'--ema_beta'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "'beta in ema setting'", ")", "\n", "parser", ".", "add_argument", "(", "'--warp_cycle_w'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'push warp cycle to ref'", ")", "\n", "parser", ".", "add_argument", "(", "'--two_cycle'", ",", "action", "=", "'store_true'", ",", "help", "=", "'input to ref and back'", ")", "\n", "parser", ".", "add_argument", "(", "'--apex'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, use apex'", ")", "\n", "parser", ".", "add_argument", "(", "'--warp_bilinear'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, upsample warp by bilinear'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptor_res_deeper'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, use 6 res block in domain adaptor'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptor_nonlocal'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, use nonlocal block in domain adaptor'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptor_se'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, use se layer in domain adaptor'", ")", "\n", "parser", ".", "add_argument", "(", "'--dilation_conv'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, use dilation conv in domain adaptor when adaptor_res_deeper is True'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_coordconv'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, use coordconv in CorrNet'", ")", "\n", "parser", ".", "add_argument", "(", "'--warp_patch'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use corr matrix to warp 4*4 patch'", ")", "\n", "parser", ".", "add_argument", "(", "'--warp_stride'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'corr matrix 256 / warp_stride'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_noise'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use noise with mask'", ")", "\n", "parser", ".", "add_argument", "(", "'--noise_for_mask'", ",", "action", "=", "'store_true'", ",", "help", "=", "'replace mask with noise'", ")", "\n", "parser", ".", "add_argument", "(", "'--video_like'", ",", "action", "=", "'store_true'", ",", "help", "=", "'useful in deepfashion'", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.gather_options": [[101, 131], ["base_options.BaseOptions.parse_known_args", "models.get_option_setter", "models.get_option_setter.", "data.get_option_setter", "data.get_option_setter.", "base_options.BaseOptions.parse_known_args", "base_options.BaseOptions.parse_args", "argparse.ArgumentParser", "base_options.BaseOptions.initialize", "base_options.BaseOptions.update_options_from_file"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.fnzhan_RABIT.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.update_options_from_file"], ["", "def", "gather_options", "(", "self", ")", ":", "\n", "# initialize parser with basic options", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "\n", "# get the basic options", "\n", "", "opt", ",", "unknown", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# modify model-related parser options", "\n", "model_name", "=", "opt", ".", "model", "\n", "model_option_setter", "=", "models", ".", "get_option_setter", "(", "model_name", ")", "\n", "parser", "=", "model_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "\n", "# modify dataset-related parser options", "\n", "dataset_mode", "=", "opt", ".", "dataset_mode", "\n", "dataset_option_setter", "=", "data", ".", "get_option_setter", "(", "dataset_mode", ")", "\n", "parser", "=", "dataset_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "\n", "opt", ",", "unknown", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# if there is opt_file, load it.", "\n", "# The previous default options will be overwritten", "\n", "if", "opt", ".", "load_from_opt_file", ":", "\n", "            ", "parser", "=", "self", ".", "update_options_from_file", "(", "parser", ",", "opt", ")", "\n", "\n", "", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "parser", "=", "parser", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.print_options": [[132, 143], ["sorted", "print", "vars().items", "base_options.BaseOptions.parser.get_default", "str", "str", "vars", "str"], "methods", ["None"], ["", "def", "print_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.option_file_path": [[144, 150], ["os.path.join", "os.path.join", "util.util.util.mkdirs"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.util.util.mkdirs"], ["", "def", "option_file_path", "(", "self", ",", "opt", ",", "makedir", "=", "False", ")", ":", "\n", "        ", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "if", "makedir", ":", "\n", "            ", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt'", ")", "\n", "return", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.save_options": [[151, 163], ["base_options.BaseOptions.option_file_path", "open", "sorted", "open", "pickle.dump", "vars().items", "base_options.BaseOptions.parser.get_default", "opt_file.write", "vars", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.option_file_path"], ["", "def", "save_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "file_name", "=", "self", ".", "option_file_path", "(", "opt", ",", "makedir", "=", "True", ")", "\n", "with", "open", "(", "file_name", "+", "'.txt'", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "                ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                    ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "opt_file", ".", "write", "(", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", ")", "\n", "\n", "", "", "with", "open", "(", "file_name", "+", "'.pkl'", ",", "'wb'", ")", "as", "opt_file", ":", "\n", "            ", "pickle", ".", "dump", "(", "opt", ",", "opt_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.update_options_from_file": [[164, 171], ["base_options.BaseOptions.load_options", "sorted", "vars().items", "hasattr", "getattr", "parser.set_defaults", "vars", "getattr"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.load_options"], ["", "", "def", "update_options_from_file", "(", "self", ",", "parser", ",", "opt", ")", ":", "\n", "        ", "new_opt", "=", "self", ".", "load_options", "(", "opt", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "new_opt", ",", "k", ")", "and", "v", "!=", "getattr", "(", "new_opt", ",", "k", ")", ":", "\n", "                ", "new_val", "=", "getattr", "(", "new_opt", ",", "k", ")", "\n", "parser", ".", "set_defaults", "(", "**", "{", "k", ":", "new_val", "}", ")", "\n", "", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.load_options": [[172, 176], ["base_options.BaseOptions.option_file_path", "pickle.load", "open"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.option_file_path"], ["", "def", "load_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "file_name", "=", "self", ".", "option_file_path", "(", "opt", ",", "makedir", "=", "False", ")", "\n", "new_opt", "=", "pickle", ".", "load", "(", "open", "(", "file_name", "+", "'.pkl'", ",", "'rb'", ")", ")", "\n", "return", "new_opt", "\n", "\n"]], "home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.parse": [[177, 207], ["base_options.BaseOptions.gather_options", "base_options.BaseOptions.print_options", "base_options.BaseOptions.gpu_ids.split", "base_options.BaseOptions.save_options", "int", "len", "torch.cuda.set_device", "base_options.BaseOptions.gpu_ids.append", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.gather_options", "home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.print_options", "home.repos.pwc.inspect_result.fnzhan_RABIT.options.base_options.BaseOptions.save_options"], ["", "def", "parse", "(", "self", ",", "save", "=", "False", ")", ":", "\n", "\n", "        ", "opt", "=", "self", ".", "gather_options", "(", ")", "#gather options from base, train, dataset, model", "\n", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "self", ".", "print_options", "(", "opt", ")", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "save_options", "(", "opt", ")", "\n", "\n", "# Set semantic_nc based on the option.", "\n", "# This will be convenient in many places", "\n", "", "opt", ".", "semantic_nc", "=", "opt", ".", "label_nc", "+", "(", "1", "if", "opt", ".", "contain_dontcare_label", "else", "0", ")", "\n", "\n", "# set gpu ids", "\n", "str_ids", "=", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "assert", "len", "(", "opt", ".", "gpu_ids", ")", "==", "0", "or", "opt", ".", "batchSize", "%", "len", "(", "opt", ".", "gpu_ids", ")", "==", "0", ",", "\"Batch size %d is wrong. It must be a multiple of # GPUs %d.\"", "%", "(", "opt", ".", "batchSize", ",", "len", "(", "opt", ".", "gpu_ids", ")", ")", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "return", "self", ".", "opt", "\n", "", "", ""]]}