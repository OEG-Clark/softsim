{"home.repos.pwc.inspect_result.liuzywen_swinnet.None.SwinNet_train.train": [[103, 165], ["model.train", "enumerate", "logging.info", "writer.add_scalar", "optimizer.zero_grad", "images.cuda.cuda", "gts.cuda.cuda", "depth.repeat().cuda.repeat().cuda", "edge.cuda.cuda", "model", "CE", "CE", "loss.backward", "utils.clip_gradient", "optimizer.step", "torch.save", "torch.save", "torch.save", "print", "torch.save", "torch.save", "torch.save", "print", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "print", "logging.info", "writer.add_scalar", "torchvision.utils.make_grid", "writer.add_image", "torchvision.utils.make_grid", "writer.add_image", "s[].clone", "res.sigmoid().data.cpu().numpy().squeeze.sigmoid().data.cpu().numpy().squeeze", "writer.add_image", "model.state_dict", "os.path.exists", "os.makedirs", "model.state_dict", "depth.repeat().cuda.repeat", "torch.tensor", "torch.tensor", "torch.tensor", "datetime.datetime.now", "images[].clone().cpu", "gts[].clone().cpu", "res.sigmoid().data.cpu().numpy().squeeze.sigmoid().data.cpu().numpy", "res.sigmoid().data.cpu().numpy().squeeze.min", "res.sigmoid().data.cpu().numpy().squeeze.max", "res.sigmoid().data.cpu().numpy().squeeze.min", "images[].clone", "gts[].clone", "res.sigmoid().data.cpu().numpy().squeeze.sigmoid().data.cpu", "optimizer.state_dict", "optimizer.state_dict", "res.sigmoid().data.cpu().numpy().squeeze.sigmoid"], "function", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.SwinNet_train.train", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.utils.clip_gradient"], ["def", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "epoch", ",", "save_path", ")", ":", "\n", "    ", "global", "step", "\n", "model", ".", "train", "(", ")", "\n", "\n", "sal_loss_all", "=", "0", "\n", "edge_loss_all", "=", "0", "\n", "loss_all", "=", "0", "\n", "epoch_step", "=", "0", "\n", "\n", "try", ":", "\n", "        ", "for", "i", ",", "(", "images", ",", "gts", ",", "depth", ",", "edge", ")", "in", "enumerate", "(", "train_loader", ",", "start", "=", "1", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "gts", "=", "gts", ".", "cuda", "(", ")", "\n", "depth", "=", "depth", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "edge", "=", "edge", ".", "cuda", "(", ")", "\n", "s", ",", "e", "=", "model", "(", "images", ",", "depth", ")", "\n", "\n", "sal_loss", "=", "CE", "(", "s", ",", "gts", ")", "\n", "# edge_loss = bce2d_new(e, edge, reduction='sum')", "\n", "edge_loss", "=", "CE", "(", "e", ",", "edge", ")", "\n", "# edge_loss = edge_loss / opt.batchsize", "\n", "loss", "=", "sal_loss", "+", "edge_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "clip_gradient", "(", "optimizer", ",", "opt", ".", "clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "step", "+=", "1", "\n", "epoch_step", "+=", "1", "\n", "# sal_loss_all += sal_loss.data", "\n", "loss_all", "+=", "loss", ".", "data", "\n", "memory_used", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "(", "1024.0", "*", "1024.0", ")", "\n", "if", "i", "%", "100", "==", "0", "or", "i", "==", "total_step", "or", "i", "==", "1", ":", "\n", "                ", "print", "(", "'{} Epoch [{:03d}/{:03d}], Step [{:04d}/{:04d}], LR:{:.7f}||sal_loss:{:4f} ||edge_loss:{:4f}'", ".", "\n", "format", "(", "datetime", ".", "now", "(", ")", ",", "epoch", ",", "opt", ".", "epoch", ",", "i", ",", "total_step", ",", "\n", "optimizer", ".", "state_dict", "(", ")", "[", "'param_groups'", "]", "[", "0", "]", "[", "'lr'", "]", ",", "sal_loss", ".", "data", ",", "edge_loss", ".", "data", ")", ")", "\n", "logging", ".", "info", "(", "\n", "'#TRAIN#:Epoch [{:03d}/{:03d}], Step [{:04d}/{:04d}], LR:{:.7f},  sal_loss:{:4f} ||edge_loss:{:4f}, mem_use:{:.0f}MB'", ".", "\n", "format", "(", "epoch", ",", "opt", ".", "epoch", ",", "i", ",", "total_step", ",", "optimizer", ".", "state_dict", "(", ")", "[", "'param_groups'", "]", "[", "0", "]", "[", "'lr'", "]", ",", "sal_loss", ".", "data", ",", "edge_loss", ".", "data", ",", "memory_used", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss'", ",", "loss", ".", "data", ",", "global_step", "=", "step", ")", "\n", "grid_image", "=", "make_grid", "(", "images", "[", "0", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ",", "1", ",", "normalize", "=", "True", ")", "\n", "writer", ".", "add_image", "(", "'RGB'", ",", "grid_image", ",", "step", ")", "\n", "grid_image", "=", "make_grid", "(", "gts", "[", "0", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ",", "1", ",", "normalize", "=", "True", ")", "\n", "writer", ".", "add_image", "(", "'Ground_truth'", ",", "grid_image", ",", "step", ")", "\n", "res", "=", "s", "[", "0", "]", ".", "clone", "(", ")", "\n", "res", "=", "res", ".", "sigmoid", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "res", "=", "(", "res", "-", "res", ".", "min", "(", ")", ")", "/", "(", "res", ".", "max", "(", ")", "-", "res", ".", "min", "(", ")", "+", "1e-8", ")", "\n", "writer", ".", "add_image", "(", "'res'", ",", "torch", ".", "tensor", "(", "res", ")", ",", "step", ",", "dataformats", "=", "'HW'", ")", "\n", "# sal_loss_all /= epoch_step", "\n", "", "", "loss_all", "/=", "epoch_step", "\n", "logging", ".", "info", "(", "'#TRAIN#:Epoch [{:03d}/{:03d}],Loss_AVG: {:.4f}'", ".", "format", "(", "epoch", ",", "opt", ".", "epoch", ",", "loss_all", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss-epoch'", ",", "loss_all", ",", "global_step", "=", "epoch", ")", "\n", "if", "(", "epoch", ")", "%", "5", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "save_path", "+", "'SwinTransNet_epoch_{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "print", "(", "'Keyboard Interrupt: save model and exit.'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "save_path", "+", "'SwinTransNet_epoch_{}.pth'", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "print", "(", "'save checkpoints successfully!'", ")", "\n", "raise", "\n", "", "", "def", "bce2d_new", "(", "input", ",", "target", ",", "reduction", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.SwinNet_train.bce2d_new": [[165, 182], ["torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.binary_cross_entropy_with_logits", "input.size", "target.size", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "function", ["None"], ["", "", "def", "bce2d_new", "(", "input", ",", "target", ",", "reduction", "=", "None", ")", ":", "\n", "    ", "assert", "(", "input", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", ")", "\n", "pos", "=", "torch", ".", "eq", "(", "target", ",", "1", ")", ".", "float", "(", ")", "\n", "neg", "=", "torch", ".", "eq", "(", "target", ",", "0", ")", ".", "float", "(", ")", "\n", "# ing = ((torch.gt(target, 0) & torch.lt(target, 1))).float()", "\n", "\n", "num_pos", "=", "torch", ".", "sum", "(", "pos", ")", "\n", "num_neg", "=", "torch", ".", "sum", "(", "neg", ")", "\n", "num_total", "=", "num_pos", "+", "num_neg", "\n", "\n", "alpha", "=", "num_neg", "/", "num_total", "\n", "beta", "=", "1.1", "*", "num_pos", "/", "num_total", "\n", "# target pixel = 1 -> weight beta", "\n", "# target pixel = 0 -> weight 1-beta", "\n", "weights", "=", "alpha", "*", "pos", "+", "beta", "*", "neg", "\n", "\n", "return", "F", ".", "binary_cross_entropy_with_logits", "(", "input", ",", "target", ",", "weights", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.SwinNet_train.test": [[184, 213], ["model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "writer.add_scalar", "print", "logging.info", "test_loader.load_data", "numpy.asarray", "image.cuda.cuda", "depth.repeat().cuda.repeat().cuda", "model", "torch.upsample", "res.sigmoid().data.cpu().numpy().squeeze.sigmoid().data.cpu().numpy().squeeze", "torch.tensor", "torch.tensor", "torch.tensor", "np.asarray.max", "torch.save", "torch.save", "torch.save", "print", "depth.repeat().cuda.repeat", "res.sigmoid().data.cpu().numpy().squeeze.sigmoid().data.cpu().numpy", "res.sigmoid().data.cpu().numpy().squeeze.min", "numpy.sum", "model.state_dict", "res.sigmoid().data.cpu().numpy().squeeze.max", "res.sigmoid().data.cpu().numpy().squeeze.min", "numpy.abs", "res.sigmoid().data.cpu().numpy().squeeze.sigmoid().data.cpu", "res.sigmoid().data.cpu().numpy().squeeze.sigmoid"], "function", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.test_dataset.load_data"], ["", "def", "test", "(", "test_loader", ",", "model", ",", "epoch", ",", "save_path", ")", ":", "\n", "    ", "global", "best_mae", ",", "best_epoch", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "mae_sum", "=", "0", "\n", "for", "i", "in", "range", "(", "test_loader", ".", "size", ")", ":", "\n", "            ", "image", ",", "gt", ",", "depth", ",", "name", ",", "img_for_post", "=", "test_loader", ".", "load_data", "(", ")", "\n", "\n", "gt", "=", "np", ".", "asarray", "(", "gt", ",", "np", ".", "float32", ")", "\n", "gt", "/=", "(", "gt", ".", "max", "(", ")", "+", "1e-8", ")", "\n", "image", "=", "image", ".", "cuda", "(", ")", "\n", "depth", "=", "depth", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "res", ",", "e", "=", "model", "(", "image", ",", "depth", ")", "\n", "res", "=", "F", ".", "upsample", "(", "res", ",", "size", "=", "gt", ".", "shape", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "res", "=", "res", ".", "sigmoid", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "res", "=", "(", "res", "-", "res", ".", "min", "(", ")", ")", "/", "(", "res", ".", "max", "(", ")", "-", "res", ".", "min", "(", ")", "+", "1e-8", ")", "\n", "mae_sum", "+=", "np", ".", "sum", "(", "np", ".", "abs", "(", "res", "-", "gt", ")", ")", "*", "1.0", "/", "(", "gt", ".", "shape", "[", "0", "]", "*", "gt", ".", "shape", "[", "1", "]", ")", "\n", "", "mae", "=", "mae_sum", "/", "test_loader", ".", "size", "\n", "writer", ".", "add_scalar", "(", "'MAE'", ",", "torch", ".", "tensor", "(", "mae", ")", ",", "global_step", "=", "epoch", ")", "\n", "print", "(", "'Epoch: {} MAE: {} ####  bestMAE: {} bestEpoch: {}'", ".", "format", "(", "epoch", ",", "mae", ",", "best_mae", ",", "best_epoch", ")", ")", "\n", "if", "epoch", "==", "1", ":", "\n", "            ", "best_mae", "=", "mae", "\n", "", "else", ":", "\n", "            ", "if", "mae", "<", "best_mae", ":", "\n", "                ", "best_mae", "=", "mae", "\n", "best_epoch", "=", "epoch", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "save_path", "+", "'SwinTransNet_epoch_best.pth'", ")", "\n", "print", "(", "'best epoch:{}'", ".", "format", "(", "epoch", ")", ")", "\n", "", "", "logging", ".", "info", "(", "'#TEST#:Epoch:{} MAE:{} bestEpoch:{} bestMAE:{}'", ".", "format", "(", "epoch", ",", "mae", ",", "best_epoch", ",", "best_mae", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.config._update_config_from_file": [[173, 186], ["config.defrost", "yaml.load.setdefault", "print", "config.merge_from_file", "config.freeze", "open", "yaml.load", "config._update_config_from_file", "os.path.join", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.config._update_config_from_file"], ["def", "_update_config_from_file", "(", "config", ",", "cfg_file", ")", ":", "\n", "    ", "config", ".", "defrost", "(", ")", "\n", "with", "open", "(", "cfg_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "yaml_cfg", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n", "", "for", "cfg", "in", "yaml_cfg", ".", "setdefault", "(", "'BASE'", ",", "[", "''", "]", ")", ":", "\n", "        ", "if", "cfg", ":", "\n", "            ", "_update_config_from_file", "(", "\n", "config", ",", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "cfg_file", ")", ",", "cfg", ")", "\n", ")", "\n", "", "", "print", "(", "'=> merge config from {}'", ".", "format", "(", "cfg_file", ")", ")", "\n", "config", ".", "merge_from_file", "(", "cfg_file", ")", "\n", "config", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.config.update_config": [[188, 228], ["config._update_config_from_file", "config.defrost", "os.path.join", "config.freeze", "config.merge_from_list"], "function", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.config._update_config_from_file"], ["", "def", "update_config", "(", "config", ",", "args", ")", ":", "\n", "    ", "_update_config_from_file", "(", "config", ",", "args", ".", "cfg", ")", "\n", "\n", "config", ".", "defrost", "(", ")", "\n", "if", "args", ".", "opts", ":", "\n", "        ", "config", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "\n", "# merge from specific arguments", "\n", "", "if", "args", ".", "batch_size", ":", "\n", "        ", "config", ".", "DATA", ".", "BATCH_SIZE", "=", "args", ".", "batch_size", "\n", "", "if", "args", ".", "data_path", ":", "\n", "        ", "config", ".", "DATA", ".", "DATA_PATH", "=", "args", ".", "data_path", "\n", "", "if", "args", ".", "zip", ":", "\n", "        ", "config", ".", "DATA", ".", "ZIP_MODE", "=", "True", "\n", "", "if", "args", ".", "cache_mode", ":", "\n", "        ", "config", ".", "DATA", ".", "CACHE_MODE", "=", "args", ".", "cache_mode", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "config", ".", "MODEL", ".", "RESUME", "=", "args", ".", "resume", "\n", "", "if", "args", ".", "accumulation_steps", ":", "\n", "        ", "config", ".", "TRAIN", ".", "ACCUMULATION_STEPS", "=", "args", ".", "accumulation_steps", "\n", "", "if", "args", ".", "use_checkpoint", ":", "\n", "        ", "config", ".", "TRAIN", ".", "USE_CHECKPOINT", "=", "True", "\n", "", "if", "args", ".", "amp_opt_level", ":", "\n", "        ", "config", ".", "AMP_OPT_LEVEL", "=", "args", ".", "amp_opt_level", "\n", "", "if", "args", ".", "output", ":", "\n", "        ", "config", ".", "OUTPUT", "=", "args", ".", "output", "\n", "", "if", "args", ".", "tag", ":", "\n", "        ", "config", ".", "TAG", "=", "args", ".", "tag", "\n", "", "if", "args", ".", "eval", ":", "\n", "        ", "config", ".", "EVAL_MODE", "=", "True", "\n", "", "if", "args", ".", "throughput", ":", "\n", "        ", "config", ".", "THROUGHPUT_MODE", "=", "True", "\n", "\n", "# set local rank for distributed training", "\n", "", "config", ".", "LOCAL_RANK", "=", "args", ".", "local_rank", "\n", "\n", "# output folder", "\n", "config", ".", "OUTPUT", "=", "os", ".", "path", ".", "join", "(", "config", ".", "OUTPUT", ",", "config", ".", "MODEL", ".", "NAME", ",", "config", ".", "TAG", ")", "\n", "\n", "config", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.config.get_config": [[230, 238], ["_C.clone", "config.update_config"], "function", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.config.update_config"], ["", "def", "get_config", "(", "args", ")", ":", "\n", "    ", "\"\"\"Get a yacs CfgNode object with default values.\"\"\"", "\n", "# Return a clone so that the defaults will not be altered", "\n", "# This is for the \"local variable\" use pattern", "\n", "config", "=", "_C", ".", "clone", "(", ")", "\n", "update_config", "(", "config", ",", "args", ")", "\n", "\n", "return", "config", "", "", ""]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.gen_edge.Edge_Extract": [[12, 34], ["os.path.join", "os.path.join", "os.listdir", "os.path.exists", "os.mkdir", "print", "img_name.append", "cv2.imread", "cv2.imwrite", "name.endswith", "os.path.join", "cv2.Canny"], "function", ["None"], ["def", "Edge_Extract", "(", "root", ")", ":", "\n", "    ", "img_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'GT'", ")", "\n", "edge_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Edge'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "edge_root", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "edge_root", ")", "\n", "\n", "", "file_names", "=", "os", ".", "listdir", "(", "img_root", ")", "\n", "img_name", "=", "[", "]", "\n", "\n", "for", "name", "in", "file_names", ":", "\n", "        ", "print", "(", "f'Generate Edge Image {name} successful!'", ")", "\n", "if", "not", "name", ".", "endswith", "(", "'.png'", ")", ":", "\n", "            ", "assert", "\"This file %s is not PNG\"", "%", "(", "name", ")", "\n", "", "img_name", ".", "append", "(", "os", ".", "path", ".", "join", "(", "img_root", ",", "name", "[", ":", "-", "4", "]", "+", "'.png'", ")", ")", "\n", "\n", "", "index", "=", "0", "\n", "for", "image", "in", "img_name", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "image", ",", "0", ")", "\n", "cv2", ".", "imwrite", "(", "edge_root", "+", "'/'", "+", "file_names", "[", "index", "]", ",", "cv2", ".", "Canny", "(", "img", ",", "30", ",", "100", ")", ")", "\n", "index", "+=", "1", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.logger.create_logger": [[15, 42], ["functools.lru_cache", "logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join", "logging.Formatter", "termcolor.colored", "termcolor.colored", "logging.Formatter"], "function", ["None"], ["@", "functools", ".", "lru_cache", "(", ")", "\n", "def", "create_logger", "(", "output_dir", ",", "dist_rank", "=", "0", ",", "name", "=", "''", ")", ":", "\n", "# create logger", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "\n", "# create formatter", "\n", "fmt", "=", "'[%(asctime)s %(name)s] (%(filename)s %(lineno)d): %(levelname)s %(message)s'", "\n", "color_fmt", "=", "colored", "(", "'[%(asctime)s %(name)s]'", ",", "'green'", ")", "+", "colored", "(", "'(%(filename)s %(lineno)d)'", ",", "'yellow'", ")", "+", "': %(levelname)s %(message)s'", "\n", "\n", "# create console handlers for master process", "\n", "if", "dist_rank", "==", "0", ":", "\n", "        ", "console_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "console_handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "console_handler", ".", "setFormatter", "(", "\n", "logging", ".", "Formatter", "(", "fmt", "=", "color_fmt", ",", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ")", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "\n", "# create file handlers", "\n", "", "file_handler", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "f'log_rank{dist_rank}.txt'", ")", ",", "mode", "=", "'a'", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "file_handler", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "fmt", "=", "fmt", ",", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ")", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "return", "logger", "", "", ""]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.SalObjDataset.__init__": [[99, 127], ["sorted", "sorted", "sorted", "sorted", "torch.SalObjDataset.filter_files", "len", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "os.listdir", "f.endswith", "os.listdir", "os.listdir", "os.listdir", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Resize", "torchvision.ToTensor", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "f.endswith"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.SalObjDataset.filter_files"], ["    ", "def", "__init__", "(", "self", ",", "image_root", ",", "gt_root", ",", "depth_root", ",", "edge_root", ",", "trainsize", ")", ":", "\n", "        ", "self", ".", "trainsize", "=", "trainsize", "\n", "self", ".", "images", "=", "[", "image_root", "+", "f", "for", "f", "in", "os", ".", "listdir", "(", "image_root", ")", "if", "f", ".", "endswith", "(", "'.jpg'", ")", "]", "\n", "\n", "self", ".", "gts", "=", "[", "gt_root", "+", "f", "for", "f", "in", "os", ".", "listdir", "(", "gt_root", ")", "if", "f", ".", "endswith", "(", "'.jpg'", ")", "\n", "or", "f", ".", "endswith", "(", "'.png'", ")", "]", "\n", "\n", "self", ".", "depths", "=", "[", "depth_root", "+", "f", "for", "f", "in", "os", ".", "listdir", "(", "depth_root", ")", "if", "f", ".", "endswith", "(", "'.bmp'", ")", "\n", "or", "f", ".", "endswith", "(", "'.png'", ")", "or", "f", ".", "endswith", "(", "'.jpg'", ")", "]", "\n", "self", ".", "edges", "=", "[", "edge_root", "+", "f", "for", "f", "in", "os", ".", "listdir", "(", "edge_root", ")", "if", "f", ".", "endswith", "(", "'.bmp'", ")", "\n", "or", "f", ".", "endswith", "(", "'.png'", ")", "or", "f", ".", "endswith", "(", "'.jpg'", ")", "]", "\n", "self", ".", "images", "=", "sorted", "(", "self", ".", "images", ")", "\n", "self", ".", "gts", "=", "sorted", "(", "self", ".", "gts", ")", "\n", "self", ".", "depths", "=", "sorted", "(", "self", ".", "depths", ")", "\n", "self", ".", "edges", "=", "sorted", "(", "self", ".", "edges", ")", "\n", "self", ".", "filter_files", "(", ")", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "images", ")", "\n", "self", ".", "img_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "self", ".", "trainsize", ",", "self", ".", "trainsize", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "self", ".", "gt_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "self", ".", "trainsize", ",", "self", ".", "trainsize", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "self", ".", "depths_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Resize", "(", "(", "self", ".", "trainsize", ",", "self", ".", "trainsize", ")", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "self", ".", "edges_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Resize", "(", "(", "self", ".", "trainsize", ",", "self", ".", "trainsize", ")", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.SalObjDataset.__getitem__": [[129, 147], ["torch.SalObjDataset.rgb_loader", "torch.SalObjDataset.binary_loader", "torch.SalObjDataset.binary_loader", "torch.SalObjDataset.binary_loader", "data.cv_random_flip", "data.randomCrop", "data.randomRotation", "data.colorEnhance", "data.randomPeper", "torch.SalObjDataset.img_transform", "torch.SalObjDataset.gt_transform", "torch.SalObjDataset.depths_transform", "torch.SalObjDataset.edges_transform"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.test_dataset.rgb_loader", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.test_dataset.binary_loader", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.test_dataset.binary_loader", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.test_dataset.binary_loader", "home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.cv_random_flip", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.randomCrop", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.randomRotation", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.colorEnhance", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.randomPeper"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "self", ".", "rgb_loader", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "gt", "=", "self", ".", "binary_loader", "(", "self", ".", "gts", "[", "index", "]", ")", "\n", "depth", "=", "self", ".", "binary_loader", "(", "self", ".", "depths", "[", "index", "]", ")", "\n", "edge", "=", "self", ".", "binary_loader", "(", "self", ".", "edges", "[", "index", "]", ")", "\n", "\n", "image", ",", "gt", ",", "depth", ",", "edge", "=", "cv_random_flip", "(", "image", ",", "gt", ",", "depth", ",", "edge", ")", "\n", "image", ",", "gt", ",", "depth", ",", "edge", "=", "randomCrop", "(", "image", ",", "gt", ",", "depth", ",", "edge", ")", "\n", "image", ",", "gt", ",", "depth", ",", "edge", "=", "randomRotation", "(", "image", ",", "gt", ",", "depth", ",", "edge", ")", "\n", "image", "=", "colorEnhance", "(", "image", ")", "\n", "# gt=randomGaussian(gt)", "\n", "gt", "=", "randomPeper", "(", "gt", ")", "\n", "image", "=", "self", ".", "img_transform", "(", "image", ")", "\n", "gt", "=", "self", ".", "gt_transform", "(", "gt", ")", "\n", "depth", "=", "self", ".", "depths_transform", "(", "depth", ")", "\n", "edge", "=", "self", ".", "edges_transform", "(", "edge", ")", "\n", "\n", "return", "image", ",", "gt", ",", "depth", ",", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.SalObjDataset.filter_files": [[148, 168], ["zip", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "len", "len", "len", "len", "images.append", "gts.append", "depths.append", "edges.append"], "methods", ["None"], ["", "def", "filter_files", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "images", ")", "==", "len", "(", "self", ".", "gts", ")", "and", "len", "(", "self", ".", "gts", ")", "==", "len", "(", "self", ".", "images", ")", "\n", "images", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "depths", "=", "[", "]", "\n", "edges", "=", "[", "]", "\n", "for", "img_path", ",", "gt_path", ",", "depth_path", ",", "edge_path", "in", "zip", "(", "self", ".", "images", ",", "self", ".", "gts", ",", "self", ".", "depths", ",", "self", ".", "edges", ")", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "gt", "=", "Image", ".", "open", "(", "gt_path", ")", "\n", "depth", "=", "Image", ".", "open", "(", "depth_path", ")", "\n", "edge", "=", "Image", ".", "open", "(", "edge_path", ")", "\n", "if", "img", ".", "size", "==", "gt", ".", "size", "and", "gt", ".", "size", "==", "depth", ".", "size", "and", "edge", ".", "size", "==", "img", ".", "size", ":", "\n", "                ", "images", ".", "append", "(", "img_path", ")", "\n", "gts", ".", "append", "(", "gt_path", ")", "\n", "depths", ".", "append", "(", "depth_path", ")", "\n", "edges", ".", "append", "(", "edge_path", ")", "\n", "", "", "self", ".", "images", "=", "images", "\n", "self", ".", "gts", "=", "gts", "\n", "self", ".", "depths", "=", "depths", "\n", "self", ".", "edges", "=", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.SalObjDataset.rgb_loader": [[169, 173], ["open", "PIL.Image.open", "PIL.Image.open.convert"], "methods", ["None"], ["", "def", "rgb_loader", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.SalObjDataset.binary_loader": [[174, 178], ["open", "PIL.Image.open", "PIL.Image.open.convert"], "methods", ["None"], ["", "", "def", "binary_loader", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'L'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.SalObjDataset.resize": [[179, 189], ["max", "max", "img.resize", "gt.resize", "depth.resize", "edge.resize"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.SalObjDataset.resize", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.SalObjDataset.resize", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.SalObjDataset.resize", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.SalObjDataset.resize"], ["", "", "def", "resize", "(", "self", ",", "img", ",", "gt", ",", "depth", ",", "edge", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "gt", ".", "size", "and", "gt", ".", "size", "==", "depth", ".", "size", "and", "edge", ".", "size", "==", "img", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "h", "<", "self", ".", "trainsize", "or", "w", "<", "self", ".", "trainsize", ":", "\n", "            ", "h", "=", "max", "(", "h", ",", "self", ".", "trainsize", ")", "\n", "w", "=", "max", "(", "w", ",", "self", ".", "trainsize", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BILINEAR", ")", ",", "gt", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", ",", "depth", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", ",", "edge", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "gt", ",", "depth", ",", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.SalObjDataset.__len__": [[190, 192], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.test_dataset.__init__": [[210, 236], ["sorted", "sorted", "sorted", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Compose", "len", "os.listdir", "f.endswith", "os.listdir", "os.listdir", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "f.endswith", "f.endswith", "f.endswith", "f.endswith", "f.endswith"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_root", ",", "gt_root", ",", "depth_root", ",", "testsize", ")", ":", "\n", "        ", "self", ".", "testsize", "=", "testsize", "\n", "self", ".", "images", "=", "[", "image_root", "+", "f", "for", "f", "in", "os", ".", "listdir", "(", "image_root", ")", "if", "f", ".", "endswith", "(", "'.jpg'", ")", "]", "\n", "self", ".", "gts", "=", "[", "gt_root", "+", "f", "for", "f", "in", "os", ".", "listdir", "(", "gt_root", ")", "if", "f", ".", "endswith", "(", "'.jpg'", ")", "\n", "or", "f", ".", "endswith", "(", "'.png'", ")", "]", "\n", "self", ".", "depths", "=", "[", "depth_root", "+", "f", "for", "f", "in", "os", ".", "listdir", "(", "depth_root", ")", "if", "f", ".", "endswith", "(", "'.bmp'", ")", "\n", "or", "f", ".", "endswith", "(", "'.png'", ")", "or", "f", ".", "endswith", "(", "'.jpg'", ")", "]", "\n", "# self.edges = [edge_root + f for f in os.listdir(depth_root) if f.endswith('.bmp')", "\n", "#                or f.endswith('.png')or f.endswith('.jpg')]", "\n", "self", ".", "images", "=", "sorted", "(", "self", ".", "images", ")", "\n", "self", ".", "gts", "=", "sorted", "(", "self", ".", "gts", ")", "\n", "self", ".", "depths", "=", "sorted", "(", "self", ".", "depths", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "self", ".", "testsize", ",", "self", ".", "testsize", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "self", ".", "gt_transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "# self.gt_transform = transforms.Compose([", "\n", "#     transforms.Resize((self.trainsize, self.trainsize)),", "\n", "#     transforms.ToTensor()])", "\n", "self", ".", "depths_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Resize", "(", "(", "self", ".", "testsize", ",", "self", ".", "testsize", ")", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "# self.edges_transform = transforms.Compose(", "\n", "#     [transforms.Resize((self.testsize, self.testsize)), transforms.ToTensor()])", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "images", ")", "\n", "self", ".", "index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.test_dataset.load_data": [[237, 251], ["torch.test_dataset.rgb_loader", "torch.test_dataset.transform().unsqueeze", "torch.test_dataset.binary_loader", "torch.test_dataset.binary_loader", "torch.test_dataset.depths_transform().unsqueeze", "torch.test_dataset.rgb_loader", "image_for_post.resize.resize.resize", "name.endswith", "torch.test_dataset.images[].split", "numpy.array", "torch.test_dataset.transform", "torch.test_dataset.depths_transform", "name.split"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.test_dataset.rgb_loader", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.test_dataset.binary_loader", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.test_dataset.binary_loader", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.test_dataset.rgb_loader", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.SalObjDataset.resize"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "image", "=", "self", ".", "rgb_loader", "(", "self", ".", "images", "[", "self", ".", "index", "]", ")", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", "\n", "gt", "=", "self", ".", "binary_loader", "(", "self", ".", "gts", "[", "self", ".", "index", "]", ")", "\n", "depth", "=", "self", ".", "binary_loader", "(", "self", ".", "depths", "[", "self", ".", "index", "]", ")", "\n", "depth", "=", "self", ".", "depths_transform", "(", "depth", ")", ".", "unsqueeze", "(", "0", ")", "\n", "name", "=", "self", ".", "images", "[", "self", ".", "index", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "image_for_post", "=", "self", ".", "rgb_loader", "(", "self", ".", "images", "[", "self", ".", "index", "]", ")", "\n", "image_for_post", "=", "image_for_post", ".", "resize", "(", "gt", ".", "size", ")", "\n", "if", "name", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "            ", "name", "=", "name", ".", "split", "(", "'.jpg'", ")", "[", "0", "]", "+", "'.png'", "\n", "", "self", ".", "index", "+=", "1", "\n", "self", ".", "index", "=", "self", ".", "index", "%", "self", ".", "size", "\n", "return", "image", ",", "gt", ",", "depth", ",", "name", ",", "np", ".", "array", "(", "image_for_post", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.test_dataset.rgb_loader": [[252, 256], ["open", "PIL.Image.open", "PIL.Image.open.convert"], "methods", ["None"], ["", "def", "rgb_loader", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.test_dataset.binary_loader": [[257, 261], ["open", "PIL.Image.open", "PIL.Image.open.convert"], "methods", ["None"], ["", "", "def", "binary_loader", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'L'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.test_dataset.__len__": [[262, 264], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.cv_random_flip": [[11, 26], ["random.randint", "img.transpose.transpose", "label.transpose.transpose", "depth.transpose.transpose", "edge.transpose.transpose"], "function", ["None"], ["def", "cv_random_flip", "(", "img", ",", "label", ",", "depth", ",", "edge", ")", ":", "\n", "    ", "flip_flag", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "# flip_flag2= random.randint(0,1)", "\n", "# left right flip", "\n", "if", "flip_flag", "==", "1", ":", "\n", "        ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "label", "=", "label", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "depth", "=", "depth", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "edge", "=", "edge", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "# top bottom flip", "\n", "# if flip_flag2==1:", "\n", "#     img = img.transpose(Image.FLIP_TOP_BOTTOM)", "\n", "#     label = label.transpose(Image.FLIP_TOP_BOTTOM)", "\n", "#     depth = depth.transpose(Image.FLIP_TOP_BOTTOM)", "\n", "", "return", "img", ",", "label", ",", "depth", ",", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.randomCrop": [[28, 38], ["numpy.random.randint", "numpy.random.randint", "image.crop", "label.crop", "depth.crop", "edge.crop"], "function", ["None"], ["", "def", "randomCrop", "(", "image", ",", "label", ",", "depth", ",", "edge", ")", ":", "\n", "    ", "border", "=", "30", "\n", "image_width", "=", "image", ".", "size", "[", "0", "]", "\n", "image_height", "=", "image", ".", "size", "[", "1", "]", "\n", "crop_win_width", "=", "np", ".", "random", ".", "randint", "(", "image_width", "-", "border", ",", "image_width", ")", "\n", "crop_win_height", "=", "np", ".", "random", ".", "randint", "(", "image_height", "-", "border", ",", "image_height", ")", "\n", "random_region", "=", "(", "\n", "(", "image_width", "-", "crop_win_width", ")", ">>", "1", ",", "(", "image_height", "-", "crop_win_height", ")", ">>", "1", ",", "(", "image_width", "+", "crop_win_width", ")", ">>", "1", ",", "\n", "(", "image_height", "+", "crop_win_height", ")", ">>", "1", ")", "\n", "return", "image", ".", "crop", "(", "random_region", ")", ",", "label", ".", "crop", "(", "random_region", ")", ",", "depth", ".", "crop", "(", "random_region", ")", ",", "edge", ".", "crop", "(", "random_region", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.randomRotation": [[40, 49], ["random.random", "numpy.random.randint", "image.rotate.rotate", "label.rotate.rotate", "depth.rotate.rotate", "edge.rotate.rotate"], "function", ["None"], ["", "def", "randomRotation", "(", "image", ",", "label", ",", "depth", ",", "edge", ")", ":", "\n", "    ", "mode", "=", "Image", ".", "BICUBIC", "\n", "if", "random", ".", "random", "(", ")", ">", "0.8", ":", "\n", "        ", "random_angle", "=", "np", ".", "random", ".", "randint", "(", "-", "15", ",", "15", ")", "\n", "image", "=", "image", ".", "rotate", "(", "random_angle", ",", "mode", ")", "\n", "label", "=", "label", ".", "rotate", "(", "random_angle", ",", "mode", ")", "\n", "depth", "=", "depth", ".", "rotate", "(", "random_angle", ",", "mode", ")", "\n", "edge", "=", "edge", ".", "rotate", "(", "random_angle", ",", "mode", ")", "\n", "", "return", "image", ",", "label", ",", "depth", ",", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.colorEnhance": [[51, 61], ["PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Sharpness().enhance", "random.randint", "random.randint", "random.randint", "random.randint", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Sharpness"], "function", ["None"], ["", "def", "colorEnhance", "(", "image", ")", ":", "\n", "    ", "bright_intensity", "=", "random", ".", "randint", "(", "5", ",", "15", ")", "/", "10.0", "\n", "image", "=", "ImageEnhance", ".", "Brightness", "(", "image", ")", ".", "enhance", "(", "bright_intensity", ")", "\n", "contrast_intensity", "=", "random", ".", "randint", "(", "5", ",", "15", ")", "/", "10.0", "\n", "image", "=", "ImageEnhance", ".", "Contrast", "(", "image", ")", ".", "enhance", "(", "contrast_intensity", ")", "\n", "color_intensity", "=", "random", ".", "randint", "(", "0", ",", "20", ")", "/", "10.0", "\n", "image", "=", "ImageEnhance", ".", "Color", "(", "image", ")", ".", "enhance", "(", "color_intensity", ")", "\n", "sharp_intensity", "=", "random", ".", "randint", "(", "0", ",", "30", ")", "/", "10.0", "\n", "image", "=", "ImageEnhance", ".", "Sharpness", "(", "image", ")", ".", "enhance", "(", "sharp_intensity", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.randomGaussian": [[63, 74], ["numpy.asarray", "data.randomGaussian.gaussianNoisy"], "function", ["None"], ["", "def", "randomGaussian", "(", "image", ",", "mean", "=", "0.1", ",", "sigma", "=", "0.35", ")", ":", "\n", "    ", "def", "gaussianNoisy", "(", "im", ",", "mean", "=", "mean", ",", "sigma", "=", "sigma", ")", ":", "\n", "        ", "for", "_i", "in", "range", "(", "len", "(", "im", ")", ")", ":", "\n", "            ", "im", "[", "_i", "]", "+=", "random", ".", "gauss", "(", "mean", ",", "sigma", ")", "\n", "", "return", "im", "\n", "\n", "", "img", "=", "np", ".", "asarray", "(", "image", ")", "\n", "width", ",", "height", "=", "img", ".", "shape", "\n", "img", "=", "gaussianNoisy", "(", "img", "[", ":", "]", ".", "flatten", "(", ")", ",", "mean", ",", "sigma", ")", "\n", "img", "=", "img", ".", "reshape", "(", "[", "width", ",", "height", "]", ")", "\n", "return", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.randomPeper": [[76, 93], ["numpy.array", "int", "range", "PIL.Image.fromarray", "random.randint", "random.randint", "random.randint"], "function", ["None"], ["", "def", "randomPeper", "(", "img", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "noiseNum", "=", "int", "(", "0.0015", "*", "img", ".", "shape", "[", "0", "]", "*", "img", ".", "shape", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "noiseNum", ")", ":", "\n", "\n", "        ", "randX", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "randY", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "\n", "if", "random", ".", "randint", "(", "0", ",", "1", ")", "==", "0", ":", "\n", "\n", "            ", "img", "[", "randX", ",", "randY", "]", "=", "0", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "img", "[", "randX", ",", "randY", "]", "=", "255", "\n", "", "", "return", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.get_loader": [[195, 206], ["data.SalObjDataset", "torch.DataLoader"], "function", ["None"], ["", "", "def", "get_loader", "(", "image_root", ",", "gt_root", ",", "depth_root", ",", "edge_root", ",", "batchsize", ",", "trainsize", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", ":", "\n", "    ", "dataset", "=", "SalObjDataset", "(", "image_root", ",", "gt_root", ",", "depth_root", ",", "edge_root", ",", "trainsize", ")", "\n", "# print(image_root)", "\n", "# print(gt_root)", "\n", "# print(depth_root)", "\n", "data_loader", "=", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batchsize", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "pin_memory", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.lr_scheduler.LinearLRScheduler.__init__": [[55, 83], ["timm.scheduler.scheduler.Scheduler.__init__", "super().update_groups"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "t_initial", ":", "int", ",", "\n", "lr_min_rate", ":", "float", ",", "\n", "warmup_t", "=", "0", ",", "\n", "warmup_lr_init", "=", "0.", ",", "\n", "t_in_epochs", "=", "True", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "42", ",", "\n", "initialize", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "optimizer", ",", "param_group_field", "=", "\"lr\"", ",", "\n", "noise_range_t", "=", "noise_range_t", ",", "noise_pct", "=", "noise_pct", ",", "noise_std", "=", "noise_std", ",", "noise_seed", "=", "noise_seed", ",", "\n", "initialize", "=", "initialize", ")", "\n", "\n", "self", ".", "t_initial", "=", "t_initial", "\n", "self", ".", "lr_min_rate", "=", "lr_min_rate", "\n", "self", ".", "warmup_t", "=", "warmup_t", "\n", "self", ".", "warmup_lr_init", "=", "warmup_lr_init", "\n", "self", ".", "t_in_epochs", "=", "t_in_epochs", "\n", "if", "self", ".", "warmup_t", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "(", "v", "-", "warmup_lr_init", ")", "/", "self", ".", "warmup_t", "for", "v", "in", "self", ".", "base_values", "]", "\n", "super", "(", ")", ".", "update_groups", "(", "self", ".", "warmup_lr_init", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "1", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.lr_scheduler.LinearLRScheduler._get_lr": [[84, 92], ["None"], "methods", ["None"], ["", "", "def", "_get_lr", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", "<", "self", ".", "warmup_t", ":", "\n", "            ", "lrs", "=", "[", "self", ".", "warmup_lr_init", "+", "t", "*", "s", "for", "s", "in", "self", ".", "warmup_steps", "]", "\n", "", "else", ":", "\n", "            ", "t", "=", "t", "-", "self", ".", "warmup_t", "\n", "total_t", "=", "self", ".", "t_initial", "-", "self", ".", "warmup_t", "\n", "lrs", "=", "[", "v", "-", "(", "(", "v", "-", "v", "*", "self", ".", "lr_min_rate", ")", "*", "(", "t", "/", "total_t", ")", ")", "for", "v", "in", "self", ".", "base_values", "]", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.lr_scheduler.LinearLRScheduler.get_epoch_values": [[93, 98], ["lr_scheduler.LinearLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.lr_scheduler.LinearLRScheduler._get_lr"], ["", "def", "get_epoch_values", "(", "self", ",", "epoch", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.lr_scheduler.LinearLRScheduler.get_update_values": [[99, 104], ["lr_scheduler.LinearLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.lr_scheduler.LinearLRScheduler._get_lr"], ["", "", "def", "get_update_values", "(", "self", ",", "num_updates", ":", "int", ")", ":", "\n", "        ", "if", "not", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "num_updates", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "", "", "", "", ""]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.lr_scheduler.build_scheduler": [[15, 52], ["int", "int", "int", "timm.scheduler.cosine_lr.CosineLRScheduler", "lr_scheduler.LinearLRScheduler", "timm.scheduler.step_lr.StepLRScheduler"], "function", ["None"], ["def", "build_scheduler", "(", "config", ",", "optimizer", ",", "n_iter_per_epoch", ")", ":", "\n", "    ", "num_steps", "=", "int", "(", "config", ".", "TRAIN", ".", "EPOCHS", "*", "n_iter_per_epoch", ")", "\n", "warmup_steps", "=", "int", "(", "config", ".", "TRAIN", ".", "WARMUP_EPOCHS", "*", "n_iter_per_epoch", ")", "\n", "decay_steps", "=", "int", "(", "config", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "DECAY_EPOCHS", "*", "n_iter_per_epoch", ")", "\n", "\n", "lr_scheduler", "=", "None", "\n", "if", "config", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "NAME", "==", "'cosine'", ":", "\n", "        ", "lr_scheduler", "=", "CosineLRScheduler", "(", "\n", "optimizer", ",", "\n", "t_initial", "=", "num_steps", ",", "\n", "t_mul", "=", "1.", ",", "\n", "lr_min", "=", "config", ".", "TRAIN", ".", "MIN_LR", ",", "\n", "warmup_lr_init", "=", "config", ".", "TRAIN", ".", "WARMUP_LR", ",", "\n", "warmup_t", "=", "warmup_steps", ",", "\n", "cycle_limit", "=", "1", ",", "\n", "t_in_epochs", "=", "False", ",", "\n", ")", "\n", "", "elif", "config", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "NAME", "==", "'linear'", ":", "\n", "        ", "lr_scheduler", "=", "LinearLRScheduler", "(", "\n", "optimizer", ",", "\n", "t_initial", "=", "num_steps", ",", "\n", "lr_min_rate", "=", "0.01", ",", "\n", "warmup_lr_init", "=", "config", ".", "TRAIN", ".", "WARMUP_LR", ",", "\n", "warmup_t", "=", "warmup_steps", ",", "\n", "t_in_epochs", "=", "False", ",", "\n", ")", "\n", "", "elif", "config", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "NAME", "==", "'step'", ":", "\n", "        ", "lr_scheduler", "=", "StepLRScheduler", "(", "\n", "optimizer", ",", "\n", "decay_t", "=", "decay_steps", ",", "\n", "decay_rate", "=", "config", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "DECAY_RATE", ",", "\n", "warmup_lr_init", "=", "config", ".", "TRAIN", ".", "WARMUP_LR", ",", "\n", "warmup_t", "=", "warmup_steps", ",", "\n", "t_in_epochs", "=", "False", ",", "\n", ")", "\n", "\n", "", "return", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.optimizer.build_optimizer": [[12, 34], ["hasattr", "hasattr", "optimizer.set_weight_decay", "config.TRAIN.OPTIMIZER.NAME.lower", "model.no_weight_decay", "model.no_weight_decay_keywords", "torch.optim.SGD", "torch.optim.AdamW"], "function", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.optimizer.set_weight_decay", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.no_weight_decay", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.no_weight_decay_keywords"], ["def", "build_optimizer", "(", "config", ",", "model", ")", ":", "\n", "    ", "\"\"\"\n    Build optimizer, set weight decay of normalization to 0 by default.\n    \"\"\"", "\n", "skip", "=", "{", "}", "\n", "skip_keywords", "=", "{", "}", "\n", "if", "hasattr", "(", "model", ",", "'no_weight_decay'", ")", ":", "\n", "        ", "skip", "=", "model", ".", "no_weight_decay", "(", ")", "\n", "", "if", "hasattr", "(", "model", ",", "'no_weight_decay_keywords'", ")", ":", "\n", "        ", "skip_keywords", "=", "model", ".", "no_weight_decay_keywords", "(", ")", "\n", "", "parameters", "=", "set_weight_decay", "(", "model", ",", "skip", ",", "skip_keywords", ")", "\n", "\n", "opt_lower", "=", "config", ".", "TRAIN", ".", "OPTIMIZER", ".", "NAME", ".", "lower", "(", ")", "\n", "optimizer", "=", "None", "\n", "if", "opt_lower", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "parameters", ",", "momentum", "=", "config", ".", "TRAIN", ".", "OPTIMIZER", ".", "MOMENTUM", ",", "nesterov", "=", "True", ",", "\n", "lr", "=", "config", ".", "TRAIN", ".", "BASE_LR", ",", "weight_decay", "=", "config", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "", "elif", "opt_lower", "==", "'adamw'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "AdamW", "(", "parameters", ",", "eps", "=", "config", ".", "TRAIN", ".", "OPTIMIZER", ".", "EPS", ",", "betas", "=", "config", ".", "TRAIN", ".", "OPTIMIZER", ".", "BETAS", ",", "\n", "lr", "=", "config", ".", "TRAIN", ".", "BASE_LR", ",", "weight_decay", "=", "config", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.optimizer.set_weight_decay": [[36, 51], ["model.named_parameters", "name.endswith", "optimizer.check_keywords_in_name", "no_decay.append", "has_decay.append", "len"], "function", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.optimizer.check_keywords_in_name"], ["", "def", "set_weight_decay", "(", "model", ",", "skip_list", "=", "(", ")", ",", "skip_keywords", "=", "(", ")", ")", ":", "\n", "    ", "has_decay", "=", "[", "]", "\n", "no_decay", "=", "[", "]", "\n", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "# frozen weights", "\n", "", "if", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", ".", "endswith", "(", "\".bias\"", ")", "or", "(", "name", "in", "skip_list", ")", "or", "check_keywords_in_name", "(", "name", ",", "skip_keywords", ")", ":", "\n", "            ", "no_decay", ".", "append", "(", "param", ")", "\n", "# print(f\"{name} has no weight decay\")", "\n", "", "else", ":", "\n", "            ", "has_decay", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "{", "'params'", ":", "has_decay", "}", ",", "\n", "{", "'params'", ":", "no_decay", ",", "'weight_decay'", ":", "0.", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.optimizer.check_keywords_in_name": [[53, 59], ["None"], "function", ["None"], ["", "def", "check_keywords_in_name", "(", "name", ",", "keywords", "=", "(", ")", ")", ":", "\n", "    ", "isin", "=", "False", "\n", "for", "keyword", "in", "keywords", ":", "\n", "        ", "if", "keyword", "in", "name", ":", "\n", "            ", "isin", "=", "True", "\n", "", "", "return", "isin", "", "", ""]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.utils.clip_gradient": [[8, 13], ["param.grad.data.clamp_"], "function", ["None"], ["def", "clip_gradient", "(", "optimizer", ",", "grad_clip", ")", ":", "\n", "    ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "for", "param", "in", "group", "[", "'params'", "]", ":", "\n", "            ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                ", "param", ".", "grad", ".", "data", ".", "clamp_", "(", "-", "grad_clip", ",", "grad_clip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.None.utils.adjust_lr": [[15, 21], ["None"], "function", ["None"], ["", "", "", "", "def", "adjust_lr", "(", "optimizer", ",", "init_lr", ",", "epoch", ",", "decay_rate", "=", "0.1", ",", "decay_epoch", "=", "30", ")", ":", "\n", "    ", "decay", "=", "decay_rate", "**", "(", "epoch", "//", "decay_epoch", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "decay", "*", "init_lr", "\n", "lr", "=", "param_group", "[", "'lr'", "]", "\n", "", "return", "lr", "\n", "", ""]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.build.build_model": [[14, 37], ["Swin_Transformer.SwinTransformer", "NotImplementedError"], "function", ["None"], ["def", "build_model", "(", "config", ")", ":", "\n", "    ", "model_type", "=", "config", ".", "MODEL", ".", "TYPE", "\n", "if", "model_type", "==", "'swin'", ":", "\n", "        ", "model", "=", "SwinTransformer", "(", "img_size", "=", "config", ".", "DATA", ".", "IMG_SIZE", ",", "\n", "patch_size", "=", "config", ".", "MODEL", ".", "SWIN", ".", "PATCH_SIZE", ",", "\n", "in_chans", "=", "config", ".", "MODEL", ".", "SWIN", ".", "IN_CHANS", ",", "\n", "num_classes", "=", "config", ".", "MODEL", ".", "NUM_CLASSES", ",", "\n", "embed_dim", "=", "config", ".", "MODEL", ".", "SWIN", ".", "EMBED_DIM", ",", "\n", "depths", "=", "config", ".", "MODEL", ".", "SWIN", ".", "DEPTHS", ",", "\n", "num_heads", "=", "config", ".", "MODEL", ".", "SWIN", ".", "NUM_HEADS", ",", "\n", "window_size", "=", "config", ".", "MODEL", ".", "SWIN", ".", "WINDOW_SIZE", ",", "\n", "mlp_ratio", "=", "config", ".", "MODEL", ".", "SWIN", ".", "MLP_RATIO", ",", "\n", "qkv_bias", "=", "config", ".", "MODEL", ".", "SWIN", ".", "QKV_BIAS", ",", "\n", "qk_scale", "=", "config", ".", "MODEL", ".", "SWIN", ".", "QK_SCALE", ",", "\n", "drop_rate", "=", "config", ".", "MODEL", ".", "DROP_RATE", ",", "\n", "drop_path_rate", "=", "config", ".", "MODEL", ".", "DROP_PATH_RATE", ",", "\n", "ape", "=", "config", ".", "MODEL", ".", "SWIN", ".", "APE", ",", "\n", "patch_norm", "=", "config", ".", "MODEL", ".", "SWIN", ".", "PATCH_NORM", ",", "\n", "use_checkpoint", "=", "config", ".", "TRAIN", ".", "USE_CHECKPOINT", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Unkown model: {model_type}\"", ")", "\n", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.Mlp.__init__": [[31, 39], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.Mlp.forward": [[40, 47], ["Swin_Transformer.Mlp.fc1", "Swin_Transformer.Mlp.act", "Swin_Transformer.Mlp.drop", "Swin_Transformer.Mlp.fc2", "Swin_Transformer.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.WindowAttention.__init__": [[95, 129], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "Swin_Transformer.WindowAttention.register_buffer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "timm.models.layers.trunc_normal_", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "window_size", ",", "num_heads", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "window_size", "=", "window_size", "# Wh, Ww", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "# \u6bcf\u4e00\u4e2a\u5934\u7684\u901a\u9053\u7ef4\u6570", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "# define a parameter table of relative position bias", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "[", "0", "]", "-", "1", ")", "*", "(", "2", "*", "window_size", "[", "1", "]", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "0", "]", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "1", "]", ")", "\n", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "self", ".", "window_size", "[", "0", "]", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.WindowAttention.forward": [[130, 162], ["Swin_Transformer.WindowAttention.qkv().reshape().permute", "Swin_Transformer.WindowAttention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "Swin_Transformer.WindowAttention.attn_drop", "Swin_Transformer.WindowAttention.proj", "Swin_Transformer.WindowAttention.proj_drop", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "Swin_Transformer.WindowAttention.view", "Swin_Transformer.WindowAttention.softmax", "Swin_Transformer.WindowAttention.softmax", "Swin_Transformer.WindowAttention.qkv().reshape", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "Swin_Transformer.WindowAttention.view", "mask.unsqueeze().unsqueeze", "Swin_Transformer.WindowAttention.qkv", "Swin_Transformer.WindowAttention.relative_position_index.view", "mask.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: input features with shape of (num_windows*B, N, C)\n            mask: (0/-inf) mask with shape of (num_windows, Wh*Ww, Wh*Ww) or None\n        \"\"\"", "\n", "B_", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B_", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "q", "=", "q", "*", "self", ".", "scale", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "nW", "=", "mask", ".", "shape", "[", "0", "]", "\n", "attn", "=", "attn", ".", "view", "(", "B_", "//", "nW", ",", "nW", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "+", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "attn", "=", "attn", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "\n", "", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B_", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.WindowAttention.extra_repr": [[163, 165], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f'dim={self.dim}, window_size={self.window_size}, num_heads={self.num_heads}'", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.WindowAttention.flops": [[166, 178], ["None"], "methods", ["None"], ["", "def", "flops", "(", "self", ",", "N", ")", ":", "\n", "# calculate flops for 1 window with token length of N", "\n", "        ", "flops", "=", "0", "\n", "# qkv = self.qkv(x)", "\n", "flops", "+=", "N", "*", "self", ".", "dim", "*", "3", "*", "self", ".", "dim", "\n", "# attn = (q @ k.transpose(-2, -1))", "\n", "flops", "+=", "self", ".", "num_heads", "*", "N", "*", "(", "self", ".", "dim", "//", "self", ".", "num_heads", ")", "*", "N", "\n", "#  x = (attn @ v)", "\n", "flops", "+=", "self", ".", "num_heads", "*", "N", "*", "N", "*", "(", "self", ".", "dim", "//", "self", ".", "num_heads", ")", "\n", "# x = self.proj(x)", "\n", "flops", "+=", "N", "*", "self", ".", "dim", "*", "self", ".", "dim", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SwinTransformerBlock.__init__": [[199, 249], ["torch.Module.__init__", "norm_layer", "Swin_Transformer.WindowAttention", "norm_layer", "int", "Swin_Transformer.Mlp", "Swin_Transformer.SwinTransformerBlock.register_buffer", "min", "min", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "Swin_Transformer.window_partition", "mask_windows.view.view.view", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill().masked_fill", "timm.models.layers.to_2tuple", "slice", "slice", "slice", "slice", "slice", "slice", "mask_windows.view.view.unsqueeze", "mask_windows.view.view.unsqueeze", "float", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill", "float"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.window_partition"], ["def", "__init__", "(", "self", ",", "dim", ",", "input_resolution", ",", "num_heads", ",", "window_size", "=", "7", ",", "shift_size", "=", "0", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "shift_size", "=", "shift_size", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "if", "min", "(", "self", ".", "input_resolution", ")", "<=", "self", ".", "window_size", ":", "\n", "# if window size is larger than input resolution, we don't partition windows", "\n", "            ", "self", ".", "shift_size", "=", "0", "\n", "self", ".", "window_size", "=", "min", "(", "self", ".", "input_resolution", ")", "\n", "", "assert", "0", "<=", "self", ".", "shift_size", "<", "self", ".", "window_size", ",", "\"shift_size must in 0-window_size\"", "\n", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "WindowAttention", "(", "\n", "dim", ",", "window_size", "=", "to_2tuple", "(", "self", ".", "window_size", ")", ",", "num_heads", "=", "num_heads", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "# calculate attention mask for SW-MSA", "\n", "            ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "img_mask", "=", "torch", ".", "zeros", "(", "(", "1", ",", "H", ",", "W", ",", "1", ")", ")", "# 1 H W 1---Important\uff01\uff01\uff01", "\n", "h_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "w_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "cnt", "=", "0", "\n", "for", "h", "in", "h_slices", ":", "\n", "                ", "for", "w", "in", "w_slices", ":", "\n", "                    ", "img_mask", "[", ":", ",", "h", ",", "w", ",", ":", "]", "=", "cnt", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "mask_windows", "=", "window_partition", "(", "img_mask", ",", "self", ".", "window_size", ")", "# nW, window_size, window_size, 1", "\n", "mask_windows", "=", "mask_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ")", "\n", "attn_mask", "=", "mask_windows", ".", "unsqueeze", "(", "1", ")", "-", "mask_windows", ".", "unsqueeze", "(", "2", ")", "\n", "attn_mask", "=", "attn_mask", ".", "masked_fill", "(", "attn_mask", "!=", "0", ",", "float", "(", "-", "100.0", ")", ")", ".", "masked_fill", "(", "attn_mask", "==", "0", ",", "float", "(", "0.0", ")", ")", "\n", "", "else", ":", "\n", "            ", "attn_mask", "=", "None", "\n", "\n", "", "self", ".", "register_buffer", "(", "\"attn_mask\"", ",", "attn_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SwinTransformerBlock.forward": [[250, 290], ["Swin_Transformer.SwinTransformerBlock.norm1", "torch.roll.view", "torch.roll.view", "torch.roll.view", "torch.roll.view", "Swin_Transformer.window_partition", "x_windows.view.view.view", "Swin_Transformer.SwinTransformerBlock.attn", "attn_windows.view.view.view", "Swin_Transformer.window_reverse", "torch.roll.view", "torch.roll.view", "torch.roll.view", "torch.roll.view", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "Swin_Transformer.SwinTransformerBlock.drop_path", "Swin_Transformer.SwinTransformerBlock.drop_path", "Swin_Transformer.SwinTransformerBlock.mlp", "Swin_Transformer.SwinTransformerBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.window_partition", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.window_reverse"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# \u8f93\u5165\u6b64\u7684x\u662f\u6574\u56fe", "\n", "        ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "\n", "shortcut", "=", "x", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "\n", "            ", "shifted_x", "=", "torch", ".", "roll", "(", "x", ",", "shifts", "=", "(", "-", "self", ".", "shift_size", ",", "-", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "shifted_x", "=", "x", "\n", "\n", "# partition windows", "\n", "", "x_windows", "=", "window_partition", "(", "shifted_x", ",", "self", ".", "window_size", ")", "# nW*B, window_size, window_size, C", "\n", "x_windows", "=", "x_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# W-MSA/SW-MSA", "\n", "attn_windows", "=", "self", ".", "attn", "(", "x_windows", ",", "mask", "=", "self", ".", "attn_mask", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# merge windows", "\n", "attn_windows", "=", "attn_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "shifted_x", "=", "window_reverse", "(", "attn_windows", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", "# B H' W' C", "\n", "\n", "# reverse cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "x", "=", "torch", ".", "roll", "(", "shifted_x", ",", "shifts", "=", "(", "self", ".", "shift_size", ",", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "shifted_x", "\n", "", "x", "=", "x", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "# FFN", "\n", "x", "=", "shortcut", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "# print('FFN',x.shape)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SwinTransformerBlock.extra_repr": [[291, 293], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"dim={self.dim}, input_resolution={self.input_resolution}, num_heads={self.num_heads}, \"", "f\"window_size={self.window_size}, shift_size={self.shift_size}, mlp_ratio={self.mlp_ratio}\"", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SwinTransformerBlock.flops": [[295, 308], ["Swin_Transformer.SwinTransformerBlock.attn.flops"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "# norm1", "\n", "flops", "+=", "self", ".", "dim", "*", "H", "*", "W", "\n", "# W-MSA/SW-MSA", "\n", "nW", "=", "H", "*", "W", "/", "self", ".", "window_size", "/", "self", ".", "window_size", "\n", "flops", "+=", "nW", "*", "self", ".", "attn", ".", "flops", "(", "self", ".", "window_size", "*", "self", ".", "window_size", ")", "\n", "# mlp", "\n", "flops", "+=", "2", "*", "H", "*", "W", "*", "self", ".", "dim", "*", "self", ".", "dim", "*", "self", ".", "mlp_ratio", "\n", "# norm2", "\n", "flops", "+=", "self", ".", "dim", "*", "H", "*", "W", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.PatchMerging.__init__": [[319, 325], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["def", "__init__", "(", "self", ",", "input_resolution", ",", "dim", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "reduction", "=", "nn", ".", "Linear", "(", "4", "*", "dim", ",", "2", "*", "dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "4", "*", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.PatchMerging.forward": [[326, 348], ["Swin_Transformer.PatchMerging.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Swin_Transformer.PatchMerging.view", "Swin_Transformer.PatchMerging.norm", "Swin_Transformer.PatchMerging.reduction"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        x: B, H*W, C\n        \"\"\"", "\n", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "assert", "H", "%", "2", "==", "0", "and", "W", "%", "2", "==", "0", ",", "f\"x size ({H}*{W}) are not even.\"", "\n", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "x0", "=", "x", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x1", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x2", "=", "x", "[", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x3", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x0", ",", "x1", ",", "x2", ",", "x3", "]", ",", "-", "1", ")", "# B H/2 W/2 4*C", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "4", "*", "C", ")", "# B H/2*W/2 4*C", "\n", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "reduction", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.PatchMerging.extra_repr": [[349, 351], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"input_resolution={self.input_resolution}, dim={self.dim}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.PatchMerging.flops": [[352, 357], ["None"], "methods", ["None"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "flops", "=", "H", "*", "W", "*", "self", ".", "dim", "\n", "flops", "+=", "(", "H", "//", "2", ")", "*", "(", "W", "//", "2", ")", "*", "4", "*", "self", ".", "dim", "*", "2", "*", "self", ".", "dim", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.BasicLayer.__init__": [[379, 406], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "downsample", "Swin_Transformer.SwinTransformerBlock", "range", "isinstance"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "input_resolution", ",", "depth", ",", "num_heads", ",", "window_size", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "downsample", "=", "None", ",", "use_checkpoint", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "\n", "# build blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "SwinTransformerBlock", "(", "dim", "=", "dim", ",", "input_resolution", "=", "input_resolution", ",", "\n", "num_heads", "=", "num_heads", ",", "window_size", "=", "window_size", ",", "\n", "shift_size", "=", "0", "if", "(", "i", "%", "2", "==", "0", ")", "else", "window_size", "//", "2", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", "[", "i", "]", "if", "isinstance", "(", "drop_path", ",", "list", ")", "else", "drop_path", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "# patch merging layer", "\n", "if", "downsample", "is", "not", "None", ":", "\n", "            ", "self", ".", "downsample", "=", "downsample", "(", "input_resolution", ",", "dim", "=", "dim", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.BasicLayer.forward": [[407, 417], ["Swin_Transformer.BasicLayer.downsample", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "blk"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "if", "self", ".", "use_checkpoint", ":", "\n", "                ", "x", "=", "checkpoint", ".", "checkpoint", "(", "blk", ",", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.BasicLayer.extra_repr": [[418, 420], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"dim={self.dim}, input_resolution={self.input_resolution}, depth={self.depth}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.BasicLayer.flops": [[421, 428], ["blk.flops", "Swin_Transformer.BasicLayer.downsample.flops"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.flops", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "flops", "+=", "blk", ".", "flops", "(", ")", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "flops", "+=", "self", ".", "downsample", ".", "flops", "(", ")", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.PatchEmbed.__init__": [[432, 450], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "96", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "patches_resolution", "=", "[", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", "]", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "patches_resolution", "=", "patches_resolution", "\n", "self", ".", "num_patches", "=", "patches_resolution", "[", "0", "]", "*", "patches_resolution", "[", "1", "]", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "# define in_chans == 3", "\n", "self", ".", "embed_dim", "=", "embed_dim", "# Swin-B.embed_dim ==128,(T is 96)", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "# dim 3->128", "\n", "if", "norm_layer", "is", "not", "None", ":", "\n", "            ", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.PatchEmbed.forward": [[451, 461], ["Swin_Transformer.PatchEmbed.proj().flatten().transpose", "Swin_Transformer.PatchEmbed.norm", "Swin_Transformer.PatchEmbed.proj().flatten", "Swin_Transformer.PatchEmbed.proj"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "# FIXME look at relaxing size constraints,\u5c3a\u5bf8\u56fa\u5b9a\uff0c\u4e0b\u6709\u65ad\u8a00", "\n", "assert", "H", "==", "self", ".", "img_size", "[", "0", "]", "and", "W", "==", "self", ".", "img_size", "[", "1", "]", ",", "f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"", "\n", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# B Ph*Pw C", "\n", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.PatchEmbed.flops": [[462, 468], ["None"], "methods", ["None"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "Ho", ",", "Wo", "=", "self", ".", "patches_resolution", "\n", "flops", "=", "Ho", "*", "Wo", "*", "self", ".", "embed_dim", "*", "self", ".", "in_chans", "*", "(", "self", ".", "patch_size", "[", "0", "]", "*", "self", ".", "patch_size", "[", "1", "]", ")", "\n", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "flops", "+=", "Ho", "*", "Wo", "*", "self", ".", "embed_dim", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SwinTransformer.__init__": [[496, 551], ["torch.Module.__init__", "len", "int", "Swin_Transformer.PatchEmbed", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "norm_layer", "Swin_Transformer.SwinTransformer.apply", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.trunc_normal_", "x.item", "Swin_Transformer.BasicLayer", "Swin_Transformer.SwinTransformer.layers.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "sum", "int", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "384", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "\n", "embed_dim", "=", "128", ",", "depths", "=", "[", "2", ",", "2", ",", "6", ",", "2", "]", ",", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "window_size", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.1", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "ape", "=", "False", ",", "patch_norm", "=", "True", ",", "\n", "use_checkpoint", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_layers", "=", "len", "(", "depths", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "ape", "=", "ape", "\n", "self", ".", "patch_norm", "=", "patch_norm", "\n", "self", ".", "num_features", "=", "int", "(", "embed_dim", "*", "2", "**", "(", "self", ".", "num_layers", "-", "1", ")", ")", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "\n", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ",", "\n", "norm_layer", "=", "norm_layer", "if", "self", ".", "patch_norm", "else", "None", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "patches_resolution", "=", "self", ".", "patch_embed", ".", "patches_resolution", "\n", "self", ".", "patches_resolution", "=", "patches_resolution", "\n", "\n", "\n", "if", "self", ".", "ape", ":", "\n", "            ", "self", ".", "absolute_pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", ",", "embed_dim", ")", ")", "\n", "trunc_normal_", "(", "self", ".", "absolute_pos_embed", ",", "std", "=", ".02", ")", "\n", "\n", "", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "# stochastic depth decay rule", "\n", "\n", "# build layers", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i_layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "layer", "=", "BasicLayer", "(", "dim", "=", "int", "(", "embed_dim", "*", "2", "**", "i_layer", ")", ",", "\n", "input_resolution", "=", "(", "patches_resolution", "[", "0", "]", "//", "(", "2", "**", "i_layer", ")", ",", "\n", "patches_resolution", "[", "1", "]", "//", "(", "2", "**", "i_layer", ")", ")", ",", "\n", "depth", "=", "depths", "[", "i_layer", "]", ",", "\n", "num_heads", "=", "num_heads", "[", "i_layer", "]", ",", "\n", "window_size", "=", "window_size", ",", "\n", "mlp_ratio", "=", "self", ".", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "sum", "(", "depths", "[", ":", "i_layer", "]", ")", ":", "sum", "(", "depths", "[", ":", "i_layer", "+", "1", "]", ")", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "downsample", "=", "PatchMerging", "if", "(", "i_layer", "<", "self", ".", "num_layers", "-", "1", ")", "else", "None", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ")", "\n", "# self.layers \u4e2d\u5e94\u8be5\u662f 4 \u4e2a", "\n", "self", ".", "layers", ".", "append", "(", "layer", ")", "\n", "\n", "", "self", ".", "norm", "=", "norm_layer", "(", "self", ".", "num_features", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SwinTransformer._init_weights": [[552, 560], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SwinTransformer.no_weight_decay": [[561, 564], ["None"], "methods", ["None"], ["", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'absolute_pos_embed'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SwinTransformer.no_weight_decay_keywords": [[565, 568], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay_keywords", "(", "self", ")", ":", "\n", "        ", "return", "{", "'relative_position_bias_table'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SwinTransformer.forward_features": [[569, 596], ["Swin_Transformer.SwinTransformer.patch_embed", "layer_features.append", "Swin_Transformer.SwinTransformer.pos_drop", "Swin_Transformer.SwinTransformer.norm", "layer.view().permute().contiguous", "layer.view().permute().contiguous", "layer", "layer.view().permute().contiguous", "layer_features.append", "layer.view().permute", "layer.view().permute", "layer.view().permute", "layer.view", "layer.view", "layer.view", "int", "int", "int", "int", "int", "int", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "layer_features", "=", "[", "]", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "layer_features", ".", "append", "(", "x", ".", "view", "(", "B", ",", "int", "(", "np", ".", "sqrt", "(", "L", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "L", ")", ")", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ")", "\n", "# layer_features.append(x)", "\n", "if", "self", ".", "ape", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "absolute_pos_embed", "\n", "", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "# print('x:', x.shape)", "\n", "xl", "=", "x", ".", "view", "(", "B", ",", "int", "(", "np", ".", "sqrt", "(", "L", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "L", ")", ")", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "# print('xl',xl.shape)", "\n", "layer_features", ".", "append", "(", "xl", ")", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "# B L C", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "# x = self.avgpool(x.ranspose(1, 2))  # B C 1", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "int", "(", "np", ".", "sqrt", "(", "L", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "L", ")", ")", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "# x = torch.flatten(x, 1)", "\n", "layer_features", "[", "-", "1", "]", "=", "x", "\n", "\n", "\n", "\n", "return", "layer_features", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SwinTransformer.forward": [[597, 601], ["Swin_Transformer.SwinTransformer.forward_features"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SwinTransformer.flops": [[602, 610], ["Swin_Transformer.SwinTransformer.patch_embed.flops", "enumerate", "layer.flops"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.flops", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "flops", "+=", "self", ".", "patch_embed", ".", "flops", "(", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "flops", "+=", "layer", ".", "flops", "(", ")", "\n", "", "flops", "+=", "self", ".", "num_features", "*", "self", ".", "patches_resolution", "[", "0", "]", "*", "self", ".", "patches_resolution", "[", "1", "]", "//", "(", "2", "**", "self", ".", "num_layers", ")", "\n", "flops", "+=", "self", ".", "num_features", "*", "self", ".", "num_classes", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SwinNet.__init__": [[612, 638], ["torch.Module.__init__", "Swin_Transformer.SwinTransformer", "Swin_Transformer.SwinTransformer", "Swin_Transformer.fuse_enhance", "Swin_Transformer.fuse_enhance", "Swin_Transformer.fuse_enhance", "Swin_Transformer.fuse_enhance", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "Swin_Transformer.conv3x3_bn_relu", "Swin_Transformer.conv3x3_bn_relu", "Swin_Transformer.conv3x3_bn_relu", "Swin_Transformer.conv3x3_bn_relu", "Swin_Transformer.conv3x3", "Swin_Transformer.Edge_Module", "Swin_Transformer.conv3x3_bn_relu", "Swin_Transformer.conv3x3", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "Swin_Transformer.conv3x3"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__", "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.conv3x3_bn_relu", "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.conv3x3_bn_relu", "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.conv3x3_bn_relu", "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.conv3x3_bn_relu", "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.conv3x3", "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.conv3x3_bn_relu", "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.conv3x3", "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", "SwinNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rgb_swin", "=", "SwinTransformer", "(", "embed_dim", "=", "128", ",", "depths", "=", "[", "2", ",", "2", ",", "18", ",", "2", "]", ",", "num_heads", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ")", "\n", "self", ".", "depth_swin", "=", "SwinTransformer", "(", "embed_dim", "=", "128", ",", "depths", "=", "[", "2", ",", "2", ",", "18", ",", "2", "]", ",", "num_heads", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ")", "\n", "self", ".", "fuse_enhance1", "=", "fuse_enhance", "(", "1024", ")", "\n", "self", ".", "fuse_enhance2", "=", "fuse_enhance", "(", "512", ")", "\n", "self", ".", "fuse_enhance3", "=", "fuse_enhance", "(", "256", ")", "\n", "self", ".", "fuse_enhance4", "=", "fuse_enhance", "(", "128", ")", "\n", "self", ".", "up2", "=", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "up4", "=", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "4", ")", "\n", "self", ".", "conv2048_1024", "=", "conv3x3_bn_relu", "(", "2048", ",", "1024", ")", "\n", "self", ".", "conv1024_512", "=", "conv3x3_bn_relu", "(", "1024", ",", "512", ")", "\n", "self", ".", "conv512_256", "=", "conv3x3_bn_relu", "(", "512", ",", "256", ")", "\n", "self", ".", "conv256_32", "=", "conv3x3_bn_relu", "(", "256", ",", "32", ")", "\n", "self", ".", "conv64_1", "=", "conv3x3", "(", "64", ",", "1", ")", "\n", "\n", "self", ".", "edge_layer", "=", "Edge_Module", "(", ")", "\n", "self", ".", "edge_feature", "=", "conv3x3_bn_relu", "(", "1", ",", "32", ")", "\n", "self", ".", "fuse_edge_sal", "=", "conv3x3", "(", "32", ",", "1", ")", "\n", "self", ".", "up_edge", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "4", ")", ",", "\n", "conv3x3", "(", "32", ",", "1", ")", "\n", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SwinNet.forward": [[639, 691], ["Swin_Transformer.SwinNet.rgb_swin", "Swin_Transformer.SwinNet.depth_swin", "Swin_Transformer.SwinNet.fuse_enhance1", "Swin_Transformer.SwinNet.fuse_enhance2", "Swin_Transformer.SwinNet.fuse_enhance3", "Swin_Transformer.SwinNet.fuse_enhance4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Swin_Transformer.SwinNet.up2", "Swin_Transformer.SwinNet.conv2048_1024", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Swin_Transformer.SwinNet.up2", "Swin_Transformer.SwinNet.conv1024_512", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Swin_Transformer.SwinNet.up2", "Swin_Transformer.SwinNet.conv512_256", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Swin_Transformer.SwinNet.edge_layer", "Swin_Transformer.SwinNet.edge_feature", "Swin_Transformer.SwinNet.conv256_32", "Swin_Transformer.SwinNet.up_edge", "Swin_Transformer.SwinNet.relu", "Swin_Transformer.SwinNet.up4", "Swin_Transformer.SwinNet.conv64_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "d", ")", ":", "\n", "        ", "rgb_list", "=", "self", ".", "rgb_swin", "(", "x", ")", "\n", "depth_list", "=", "self", ".", "depth_swin", "(", "d", ")", "\n", "\n", "r4", "=", "rgb_list", "[", "0", "]", "\n", "r3", "=", "rgb_list", "[", "1", "]", "\n", "r2", "=", "rgb_list", "[", "2", "]", "\n", "r1", "=", "rgb_list", "[", "3", "]", "\n", "d4", "=", "depth_list", "[", "0", "]", "\n", "d3", "=", "depth_list", "[", "1", "]", "\n", "d2", "=", "depth_list", "[", "2", "]", "\n", "d1", "=", "depth_list", "[", "3", "]", "\n", "\n", "fr1", ",", "fd1", "=", "self", ".", "fuse_enhance1", "(", "r1", ",", "d1", ")", "\n", "fr2", ",", "fd2", "=", "self", ".", "fuse_enhance2", "(", "r2", ",", "d2", ")", "\n", "fr3", ",", "fd3", "=", "self", ".", "fuse_enhance3", "(", "r3", ",", "d3", ")", "\n", "fr4", ",", "fd4", "=", "self", ".", "fuse_enhance4", "(", "r4", ",", "d4", ")", "\n", "\n", "mul_fea1", "=", "fr1", "*", "fd1", "\n", "add_fea1", "=", "fr1", "+", "fd1", "\n", "fuse_fea1", "=", "torch", ".", "cat", "(", "(", "mul_fea1", ",", "add_fea1", ")", ",", "dim", "=", "1", ")", "\n", "fuse_fea1", "=", "self", ".", "up2", "(", "fuse_fea1", ")", "\n", "fuse_fea1", "=", "self", ".", "conv2048_1024", "(", "fuse_fea1", ")", "\n", "\n", "mul_fea2", "=", "fr2", "*", "fd2", "\n", "add_fea2", "=", "fr2", "+", "fd2", "\n", "fuse_fea2", "=", "torch", ".", "cat", "(", "(", "mul_fea2", ",", "add_fea2", ")", ",", "dim", "=", "1", ")", "\n", "\n", "fuse_fea2", "=", "fuse_fea2", "+", "fuse_fea1", "\n", "fuse_fea2", "=", "self", ".", "up2", "(", "fuse_fea2", ")", "\n", "fuse_fea2", "=", "self", ".", "conv1024_512", "(", "fuse_fea2", ")", "\n", "\n", "mul_fea3", "=", "fr3", "*", "fd3", "\n", "add_fea3", "=", "fr3", "+", "fd3", "\n", "fuse_fea3", "=", "torch", ".", "cat", "(", "(", "mul_fea3", ",", "add_fea3", ")", ",", "dim", "=", "1", ")", "\n", "fuse_fea3", "=", "fuse_fea3", "+", "fuse_fea2", "\n", "fuse_fea3", "=", "self", ".", "up2", "(", "fuse_fea3", ")", "\n", "fuse_fea3", "=", "self", ".", "conv512_256", "(", "fuse_fea3", ")", "\n", "\n", "mul_fea4", "=", "fr4", "*", "fd4", "\n", "add_fea4", "=", "fr4", "+", "fd4", "\n", "fuse_fea4", "=", "torch", ".", "cat", "(", "(", "mul_fea4", ",", "add_fea4", ")", ",", "dim", "=", "1", ")", "\n", "fuse_fea4", "=", "fuse_fea4", "+", "fuse_fea3", "\n", "\n", "edge_map", "=", "self", ".", "edge_layer", "(", "d4", ",", "d3", ",", "d2", ")", "\n", "edge_feature", "=", "self", ".", "edge_feature", "(", "edge_map", ")", "\n", "end_sal", "=", "self", ".", "conv256_32", "(", "fuse_fea4", ")", "\n", "up_edge", "=", "self", ".", "up_edge", "(", "edge_feature", ")", "\n", "out", "=", "self", ".", "relu", "(", "torch", ".", "cat", "(", "(", "end_sal", ",", "edge_feature", ")", ",", "dim", "=", "1", ")", ")", "\n", "out", "=", "self", ".", "up4", "(", "out", ")", "\n", "sal_out", "=", "self", ".", "conv64_1", "(", "out", ")", "\n", "return", "sal_out", ",", "up_edge", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SwinNet.load_pre": [[692, 697], ["Swin_Transformer.SwinNet.rgb_swin.load_state_dict", "print", "Swin_Transformer.SwinNet.depth_swin.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "load_pre", "(", "self", ",", "pre_model", ")", ":", "\n", "        ", "self", ".", "rgb_swin", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pre_model", ")", "[", "'model'", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "f\"RGB SwinTransformer loading pre_model ${pre_model}\"", ")", "\n", "self", ".", "depth_swin", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pre_model", ")", "[", "'model'", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "f\"Depth SwinTransformer loading pre_model ${pre_model}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.fuse_enhance.__init__": [[703, 710], ["torch.Module.__init__", "Swin_Transformer.ChannelAttention", "Swin_Transformer.ChannelAttention", "Swin_Transformer.SpatialAttention", "Swin_Transformer.SpatialAttention", "Swin_Transformer.SpatialAttention"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "infeature", ")", ":", "\n", "        ", "super", "(", "fuse_enhance", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth_channel_attention", "=", "ChannelAttention", "(", "infeature", ")", "\n", "self", ".", "rgb_channel_attention", "=", "ChannelAttention", "(", "infeature", ")", "\n", "self", ".", "rd_spatial_attention", "=", "SpatialAttention", "(", ")", "\n", "self", ".", "rgb_spatial_attention", "=", "SpatialAttention", "(", ")", "\n", "self", ".", "depth_spatial_attention", "=", "SpatialAttention", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.fuse_enhance.forward": [[711, 724], ["Swin_Transformer.fuse_enhance.rd_spatial_attention", "Swin_Transformer.fuse_enhance.rgb_channel_attention", "Swin_Transformer.fuse_enhance.depth_channel_attention"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "r", ",", "d", ")", ":", "\n", "        ", "assert", "r", ".", "shape", "==", "d", ".", "shape", ",", "\"rgb and depth should have same size\"", "\n", "\n", "mul_fuse", "=", "r", "*", "d", "\n", "sa", "=", "self", ".", "rd_spatial_attention", "(", "mul_fuse", ")", "\n", "r_f", "=", "r", "*", "sa", "\n", "d_f", "=", "d", "*", "sa", "\n", "r_ca", "=", "self", ".", "rgb_channel_attention", "(", "r_f", ")", "\n", "d_ca", "=", "self", ".", "depth_channel_attention", "(", "d_f", ")", "\n", "\n", "r_out", "=", "r", "*", "r_ca", "\n", "d_out", "=", "d", "*", "d_ca", "\n", "return", "r_out", ",", "d_out", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.CALayer.__init__": [[726, 736], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "CALayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# global average pooling: feature --> point", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# feature channel downscale and upscale --> channel weight", "\n", "self", ".", "conv_du", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "channel", "//", "reduction", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "reduction", ",", "channel", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.CALayer.forward": [[738, 742], ["Swin_Transformer.CALayer.avg_pool", "Swin_Transformer.CALayer.conv_du"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "y", "=", "self", ".", "conv_du", "(", "y", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.RCAB.__init__": [[745, 758], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "range", "modules_body.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules_body.append", "Swin_Transformer.CALayer", "Swin_Transformer.RCAB.default_conv", "modules_body.append", "modules_body.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__", "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.RCAB.default_conv"], ["    ", "def", "__init__", "(", "\n", "self", ",", "n_feat", ",", "kernel_size", "=", "3", ",", "reduction", "=", "16", ",", "\n", "bias", "=", "True", ",", "bn", "=", "False", ",", "act", "=", "nn", ".", "ReLU", "(", "True", ")", ",", "res_scale", "=", "1", ")", ":", "\n", "\n", "        ", "super", "(", "RCAB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules_body", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "modules_body", ".", "append", "(", "self", ".", "default_conv", "(", "n_feat", ",", "n_feat", ",", "kernel_size", ",", "bias", "=", "bias", ")", ")", "\n", "if", "bn", ":", "modules_body", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "n_feat", ")", ")", "\n", "if", "i", "==", "0", ":", "modules_body", ".", "append", "(", "act", ")", "\n", "", "modules_body", ".", "append", "(", "CALayer", "(", "n_feat", ",", "reduction", ")", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules_body", ")", "\n", "self", ".", "res_scale", "=", "res_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.RCAB.default_conv": [[759, 761], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "default_conv", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "bias", "=", "True", ")", ":", "\n", "        ", "return", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "(", "kernel_size", "//", "2", ")", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.RCAB.forward": [[762, 767], ["Swin_Transformer.RCAB.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "body", "(", "x", ")", "\n", "#res = self.body(x).mul(self.res_scale)", "\n", "res", "+=", "x", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.Edge_Module.__init__": [[769, 781], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "Swin_Transformer.RCAB"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_fea", "=", "[", "128", ",", "256", ",", "512", "]", ",", "mid_fea", "=", "32", ")", ":", "\n", "        ", "super", "(", "Edge_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_fea", "[", "0", "]", ",", "mid_fea", ",", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "in_fea", "[", "1", "]", ",", "mid_fea", ",", "1", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "in_fea", "[", "2", "]", ",", "mid_fea", ",", "1", ")", "\n", "self", ".", "conv5_2", "=", "nn", ".", "Conv2d", "(", "mid_fea", ",", "mid_fea", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_4", "=", "nn", ".", "Conv2d", "(", "mid_fea", ",", "mid_fea", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_5", "=", "nn", ".", "Conv2d", "(", "mid_fea", ",", "mid_fea", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "up2", "=", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "classifer", "=", "nn", ".", "Conv2d", "(", "mid_fea", "*", "3", ",", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "rcab", "=", "RCAB", "(", "mid_fea", "*", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.Edge_Module.forward": [[782, 798], ["x2.size", "Swin_Transformer.Edge_Module.relu", "Swin_Transformer.Edge_Module.relu", "Swin_Transformer.Edge_Module.relu", "Swin_Transformer.Edge_Module.relu", "Swin_Transformer.Edge_Module.relu", "Swin_Transformer.Edge_Module.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Swin_Transformer.Edge_Module.rcab", "Swin_Transformer.Edge_Module.classifer", "Swin_Transformer.Edge_Module.conv2", "Swin_Transformer.Edge_Module.conv5_2", "Swin_Transformer.Edge_Module.conv4", "Swin_Transformer.Edge_Module.conv5_4", "Swin_Transformer.Edge_Module.conv5", "Swin_Transformer.Edge_Module.conv5_5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x2", ",", "x4", ",", "x5", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x2", ".", "size", "(", ")", "\n", "edge2_fea", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "x2", ")", ")", "\n", "edge2", "=", "self", ".", "relu", "(", "self", ".", "conv5_2", "(", "edge2_fea", ")", ")", "\n", "edge4_fea", "=", "self", ".", "relu", "(", "self", ".", "conv4", "(", "x4", ")", ")", "\n", "edge4", "=", "self", ".", "relu", "(", "self", ".", "conv5_4", "(", "edge4_fea", ")", ")", "\n", "edge5_fea", "=", "self", ".", "relu", "(", "self", ".", "conv5", "(", "x5", ")", ")", "\n", "edge5", "=", "self", ".", "relu", "(", "self", ".", "conv5_5", "(", "edge5_fea", ")", ")", "\n", "\n", "edge4", "=", "F", ".", "interpolate", "(", "edge4", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "edge5", "=", "F", ".", "interpolate", "(", "edge5", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "edge", "=", "torch", ".", "cat", "(", "[", "edge2", ",", "edge4", ",", "edge5", "]", ",", "dim", "=", "1", ")", "\n", "edge", "=", "self", ".", "rcab", "(", "edge", ")", "\n", "edge", "=", "self", ".", "classifer", "(", "edge", ")", "\n", "return", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.ChannelAttention.__init__": [[800, 810], ["torch.Module.__init__", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "ratio", "=", "16", ")", ":", "\n", "        ", "super", "(", "ChannelAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "max_pool", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "1", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", "//", "16", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "in_planes", "//", "16", ",", "in_planes", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.ChannelAttention.forward": [[811, 815], ["Swin_Transformer.ChannelAttention.fc2", "Swin_Transformer.ChannelAttention.sigmoid", "Swin_Transformer.ChannelAttention.relu1", "Swin_Transformer.ChannelAttention.fc1", "Swin_Transformer.ChannelAttention.max_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "max_out", "=", "self", ".", "fc2", "(", "self", ".", "relu1", "(", "self", ".", "fc1", "(", "self", ".", "max_pool", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "max_out", "\n", "return", "self", ".", "sigmoid", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SpatialAttention.__init__": [[818, 826], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", "=", "7", ")", ":", "\n", "        ", "super", "(", "SpatialAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "kernel_size", "in", "(", "3", ",", "7", ")", ",", "'kernel size must be 3 or 7'", "\n", "padding", "=", "3", "if", "kernel_size", "==", "7", "else", "1", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "1", ",", "kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.SpatialAttention.forward": [[827, 832], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "Swin_Transformer.SpatialAttention.conv1", "Swin_Transformer.SpatialAttention.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "max_out", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "max_out", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "return", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.conv3x3": [[17, 21], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "has_bias", "=", "False", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "has_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.conv3x3_bn_relu": [[22, 27], ["torch.Sequential", "Swin_Transformer.conv3x3", "torch.BatchNorm2d", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.conv3x3"], ["", "def", "conv3x3_bn_relu", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.window_partition": [[49, 62], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C) \u5806\u53e0\u5230\u4e00\u8d77\u5f62\u6210\u4e00\u4e2a\u957f\u6761\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.models.Swin_Transformer.window_reverse": [[64, 79], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.Mlp.__init__": [[17, 25], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "has_bias", "=", "False", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "has_bias", ")", "\n", "\n", "", "def", "conv3x3_bn_relu", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.Mlp.forward": [[26, 33], ["Swin_Transformer.Mlp.fc1", "Swin_Transformer.Mlp.act", "Swin_Transformer.Mlp.drop", "Swin_Transformer.Mlp.fc2", "Swin_Transformer.Mlp.drop"], "methods", ["None"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "\n", "", "class", "Mlp", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.WindowAttention.__init__": [[47, 79], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arrange", "torch.arrange", "torch.arrange", "torch.arrange", "torch.arrange", "torch.arrange", "torch.arrange", "torch.arrange", "torch.arrange", "torch.arrange", "torch.arrange", "torch.arrange", "torch.arrange", "torch.arrange", "torch.arrange", "torch.arrange", "torch.arrange", "torch.arrange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "Swin_Transformer.WindowAttention.register_buffer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "timm.models.layers.trunc_normal_", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["\n", "\n", "", "", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C) \u5806\u53e0\u5230\u4e00\u8d77\u5f62\u6210\u4e00\u4e2a\u957f\u6761\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n", "\n", "", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.WindowAttention.forward": [[80, 107], ["Swin_Transformer.WindowAttention.qkv().reshape().permute", "Swin_Transformer.WindowAttention.relative_position_bias_table[].view", "Swin_Transformer.WindowAttention.attn_drop", "Swin_Transformer.WindowAttention.proj", "Swin_Transformer.WindowAttention.proj_drop", "k.transpose", "Swin_Transformer.WindowAttention.unsqueeze", "Swin_Transformer.WindowAttention.view", "Swin_Transformer.WindowAttention.softmax", "Swin_Transformer.WindowAttention.softmax", "Swin_Transformer.WindowAttention.qkv().reshape", "Swin_Transformer.WindowAttention.view", "mask.unsqueeze().unsqueeze", "Swin_Transformer.WindowAttention.qkv", "Swin_Transformer.WindowAttention.relative_position_index.view", "mask.unsqueeze"], "methods", ["None"], ["\n", "", "class", "WindowAttention", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "r\"\"\" Window based multi-head self attention (W-MSA) module with relative position bias.\n    It supports both of shifted and non-shifted window.\n\n    Args:\n        dim (int): Number of input channels.\n        window_size (tuple[int]): The height and width of the window.\n        num_heads (int): Number of attention heads.\n        qkv_bias (bool, optional):  If True, add a learnable bias to query, key, value. Default: True\n        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set\n        attn_drop (float, optional): Dropout ratio of attention weight. Default: 0.0\n        proj_drop (float, optional): Dropout ratio of output. Default: 0.0\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "dim", ",", "window_size", ",", "num_heads", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "window_size", "=", "window_size", "# Wh, Ww", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "# \u6bcf\u4e00\u4e2a\u5934\u7684\u901a\u9053\u7ef4\u6570", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "# define a parameter table of relative position bias", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "[", "0", "]", "-", "1", ")", "*", "(", "2", "*", "window_size", "[", "1", "]", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.WindowAttention.extra_repr": [[108, 110], ["None"], "methods", ["None"], ["# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "0", "]", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.WindowAttention.flops": [[111, 118], ["None"], "methods", ["None"], ["\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "self", ".", "window_size", "[", "0", "]", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformerBlock.__init__": [[120, 170], ["torch.Module.__init__", "norm_layer", "Swin_Transformer.WindowAttention", "norm_layer", "int", "Swin_Transformer.Mlp", "Swin_Transformer.SwinTransformerBlock.register_buffer", "min", "min", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "Swin_Transformer.window_partition", "mask_windows.view.view.view", "attn_mask.masked_fill().masked_fill", "timm.models.layers.to_2tuple", "slice", "slice", "slice", "slice", "slice", "slice", "mask_windows.view.view.unsqueeze", "mask_windows.view.view.unsqueeze", "float", "attn_mask.masked_fill", "float"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.window_partition"], ["self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: input features with shape of (num_windows*B, N, C)\n            mask: (0/-inf) mask with shape of (num_windows, Wh*Ww, Wh*Ww) or None\n        \"\"\"", "\n", "B_", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B_", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "q", "=", "q", "*", "self", ".", "scale", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "nW", "=", "mask", ".", "shape", "[", "0", "]", "\n", "attn", "=", "attn", ".", "view", "(", "B_", "//", "nW", ",", "nW", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "+", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "attn", "=", "attn", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "\n", "", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B_", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f'dim={self.dim}, window_size={self.window_size}, num_heads={self.num_heads}'", "\n", "\n", "", "def", "flops", "(", "self", ",", "N", ")", ":", "\n", "# calculate flops for 1 window with token length of N", "\n", "        ", "flops", "=", "0", "\n", "# qkv = self.qkv(x)", "\n", "flops", "+=", "N", "*", "self", ".", "dim", "*", "3", "*", "self", ".", "dim", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformerBlock.forward": [[170, 202], ["Swin_Transformer.SwinTransformerBlock.norm1", "torch.roll.view", "torch.roll.view", "torch.roll.view", "Swin_Transformer.window_partition", "x_windows.view.view.view", "Swin_Transformer.SwinTransformerBlock.attn", "attn_windows.view.view.view", "Swin_Transformer.window_reverse", "torch.roll.view", "torch.roll.view", "torch.roll.view", "Swin_Transformer.SwinTransformerBlock.drop_path", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "Swin_Transformer.SwinTransformerBlock.drop_path", "Swin_Transformer.SwinTransformerBlock.mlp", "Swin_Transformer.SwinTransformerBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.window_partition", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.window_reverse"], ["flops", "+=", "N", "*", "self", ".", "dim", "*", "3", "*", "self", ".", "dim", "\n", "# attn = (q @ k.transpose(-2, -1))", "\n", "flops", "+=", "self", ".", "num_heads", "*", "N", "*", "(", "self", ".", "dim", "//", "self", ".", "num_heads", ")", "*", "N", "\n", "#  x = (attn @ v)", "\n", "flops", "+=", "self", ".", "num_heads", "*", "N", "*", "N", "*", "(", "self", ".", "dim", "//", "self", ".", "num_heads", ")", "\n", "# x = self.proj(x)", "\n", "flops", "+=", "N", "*", "self", ".", "dim", "*", "self", ".", "dim", "\n", "return", "flops", "\n", "\n", "\n", "", "", "class", "SwinTransformerBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "r\"\"\" Swin Transformer Block.\n\n    Args:\n        dim (int): Number of input channels.\n        input_resolution (tuple[int]): Input resulotion.\n        num_heads (int): Number of attention heads.\n        window_size (int): Window size.\n        shift_size (int): Shift size for SW-MSA.\n        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.\n        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True\n        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.\n        drop (float, optional): Dropout rate. Default: 0.0\n        attn_drop (float, optional): Attention dropout rate. Default: 0.0\n        drop_path (float, optional): Stochastic depth rate. Default: 0.0\n        act_layer (nn.Module, optional): Activation layer. Default: nn.GELU\n        norm_layer (nn.Module, optional): Normalization layer.  Default: nn.LayerNorm\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "dim", ",", "input_resolution", ",", "num_heads", ",", "window_size", "=", "7", ",", "shift_size", "=", "0", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformerBlock.extra_repr": [[203, 205], ["None"], "methods", ["None"], ["self", ".", "dim", "=", "dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "num_heads", "=", "num_heads", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformerBlock.flops": [[207, 218], ["Swin_Transformer.SwinTransformerBlock.attn.flops"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.flops"], ["self", ".", "shift_size", "=", "shift_size", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "if", "min", "(", "self", ".", "input_resolution", ")", "<=", "self", ".", "window_size", ":", "\n", "# if window size is larger than input resolution, we don't partition windows", "\n", "            ", "self", ".", "shift_size", "=", "0", "\n", "self", ".", "window_size", "=", "min", "(", "self", ".", "input_resolution", ")", "\n", "", "assert", "0", "<=", "self", ".", "shift_size", "<", "self", ".", "window_size", ",", "\"shift_size must in 0-window_size\"", "\n", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "WindowAttention", "(", "\n", "dim", ",", "window_size", "=", "to_2tuple", "(", "self", ".", "window_size", ")", ",", "num_heads", "=", "num_heads", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.PatchMerging.__init__": [[220, 226], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "# calculate attention mask for SW-MSA", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.PatchMerging.forward": [[227, 246], ["Swin_Transformer.PatchMerging.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Swin_Transformer.PatchMerging.view", "Swin_Transformer.PatchMerging.norm", "Swin_Transformer.PatchMerging.reduction"], "methods", ["None"], ["            ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "img_mask", "=", "torch", ".", "zeros", "(", "(", "1", ",", "H", ",", "W", ",", "1", ")", ")", "# 1 H W 1---Important\uff01\uff01\uff01", "\n", "h_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "w_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "cnt", "=", "0", "\n", "for", "h", "in", "h_slices", ":", "\n", "                ", "for", "w", "in", "w_slices", ":", "\n", "                    ", "img_mask", "[", ":", ",", "h", ",", "w", ",", ":", "]", "=", "cnt", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "mask_windows", "=", "window_partition", "(", "img_mask", ",", "self", ".", "window_size", ")", "# nW, window_size, window_size, 1", "\n", "mask_windows", "=", "mask_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ")", "\n", "attn_mask", "=", "mask_windows", ".", "unsqueeze", "(", "1", ")", "-", "mask_windows", ".", "unsqueeze", "(", "2", ")", "\n", "attn_mask", "=", "attn_mask", ".", "masked_fill", "(", "attn_mask", "!=", "0", ",", "float", "(", "-", "100.0", ")", ")", ".", "masked_fill", "(", "attn_mask", "==", "0", ",", "float", "(", "0.0", ")", ")", "\n", "", "else", ":", "\n", "            ", "attn_mask", "=", "None", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.PatchMerging.extra_repr": [[247, 249], ["None"], "methods", ["None"], ["\n", "", "self", ".", "register_buffer", "(", "\"attn_mask\"", ",", "attn_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.PatchMerging.flops": [[250, 255], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# \u8f93\u5165\u6b64\u7684x\u662f\u6574\u56fe", "\n", "        ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.BasicLayer.__init__": [[257, 281], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "downsample", "Swin_Transformer.SwinTransformerBlock", "range", "isinstance"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "\n", "            ", "shifted_x", "=", "torch", ".", "roll", "(", "x", ",", "shifts", "=", "(", "-", "self", ".", "shift_size", ",", "-", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "shifted_x", "=", "x", "\n", "\n", "# partition windows", "\n", "", "x_windows", "=", "window_partition", "(", "shifted_x", ",", "self", ".", "window_size", ")", "# nW*B, window_size, window_size, C", "\n", "x_windows", "=", "x_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# W-MSA/SW-MSA", "\n", "attn_windows", "=", "self", ".", "attn", "(", "x_windows", ",", "mask", "=", "self", ".", "attn_mask", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# merge windows", "\n", "attn_windows", "=", "attn_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "shifted_x", "=", "window_reverse", "(", "attn_windows", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", "# B H' W' C", "\n", "\n", "# reverse cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "x", "=", "torch", ".", "roll", "(", "shifted_x", ",", "shifts", "=", "(", "self", ".", "shift_size", ",", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.BasicLayer.forward": [[282, 291], ["Swin_Transformer.BasicLayer.downsample", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "blk"], "methods", ["None"], ["            ", "x", "=", "shifted_x", "\n", "", "x", "=", "x", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "# FFN", "\n", "x", "=", "shortcut", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "# print('FFN',x.shape)", "\n", "return", "x", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.BasicLayer.extra_repr": [[292, 294], ["None"], "methods", ["None"], ["        ", "return", "f\"dim={self.dim}, input_resolution={self.input_resolution}, num_heads={self.num_heads}, \"", "f\"window_size={self.window_size}, shift_size={self.shift_size}, mlp_ratio={self.mlp_ratio}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.BasicLayer.flops": [[295, 302], ["blk.flops", "Swin_Transformer.BasicLayer.downsample.flops"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.flops", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "# norm1", "\n", "flops", "+=", "self", ".", "dim", "*", "H", "*", "W", "\n", "# W-MSA/SW-MSA", "\n", "nW", "=", "H", "*", "W", "/", "self", ".", "window_size", "/", "self", ".", "window_size", "\n", "flops", "+=", "nW", "*", "self", ".", "attn", ".", "flops", "(", "self", ".", "window_size", "*", "self", ".", "window_size", ")", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.PatchEmbed.__init__": [[304, 322], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["flops", "+=", "2", "*", "H", "*", "W", "*", "self", ".", "dim", "*", "self", ".", "dim", "*", "self", ".", "mlp_ratio", "\n", "# norm2", "\n", "flops", "+=", "self", ".", "dim", "*", "H", "*", "W", "\n", "return", "flops", "\n", "\n", "\n", "", "", "class", "PatchMerging", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "r\"\"\" Patch Merging Layer.\n\n    Args:\n        input_resolution (tuple[int]): Resolution of input feature.\n        dim (int): Number of input channels.\n        norm_layer (nn.Module, optional): Normalization layer.  Default: nn.LayerNorm\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "input_resolution", ",", "dim", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "dim", "=", "dim", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.PatchEmbed.forward": [[323, 331], ["Swin_Transformer.PatchEmbed.proj().flatten().transpose", "Swin_Transformer.PatchEmbed.norm", "Swin_Transformer.PatchEmbed.proj().flatten", "Swin_Transformer.PatchEmbed.proj"], "methods", ["None"], ["self", ".", "reduction", "=", "nn", ".", "Linear", "(", "4", "*", "dim", ",", "2", "*", "dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "4", "*", "dim", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        x: B, H*W, C\n        \"\"\"", "\n", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.PatchEmbed.flops": [[332, 338], ["None"], "methods", ["None"], ["assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "assert", "H", "%", "2", "==", "0", "and", "W", "%", "2", "==", "0", ",", "f\"x size ({H}*{W}) are not even.\"", "\n", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "x0", "=", "x", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x1", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.__init__": [[340, 391], ["torch.Module.__init__", "len", "int", "Swin_Transformer.PatchEmbed", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "norm_layer", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "Swin_Transformer.SwinTransformer.apply", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.trunc_normal_", "x.item", "Swin_Transformer.BasicLayer", "Swin_Transformer.SwinTransformer.layers.appens", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "sum", "int", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__"], ["x3", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x0", ",", "x1", ",", "x2", ",", "x3", "]", ",", "-", "1", ")", "# B H/2 W/2 4*C", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "4", "*", "C", ")", "# B H/2*W/2 4*C", "\n", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "reduction", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"input_resolution={self.input_resolution}, dim={self.dim}\"", "\n", "\n", "", "def", "flops", "(", "self", ")", ":", "\n", "        ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "flops", "=", "H", "*", "W", "*", "self", ".", "dim", "\n", "flops", "+=", "(", "H", "//", "2", ")", "*", "(", "W", "//", "2", ")", "*", "4", "*", "self", ".", "dim", "*", "2", "*", "self", ".", "dim", "\n", "return", "flops", "\n", "\n", "\n", "", "", "class", "BasicLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\" A basic Swin Transformer layer for one stage.\n\n    Args:\n        dim (int): Number of input channels.\n        input_resolution (tuple[int]): Input resolution.\n        depth (int): Number of blocks.\n        num_heads (int): Number of attention heads.\n        window_size (int): Local window size.\n        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.\n        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True\n        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.\n        drop (float, optional): Dropout rate. Default: 0.0\n        attn_drop (float, optional): Attention dropout rate. Default: 0.0\n        drop_path (float | tuple[float], optional): Stochastic depth rate. Default: 0.0\n        norm_layer (nn.Module, optional): Normalization layer. Default: nn.LayerNorm\n        downsample (nn.Module | None, optional): Downsample layer at the end of the layer. Default: None\n        use_checkpoint (bool): Whether to use checkpointing to save memory. Default: False.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "dim", ",", "input_resolution", ",", "depth", ",", "num_heads", ",", "window_size", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "downsample", "=", "None", ",", "use_checkpoint", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "\n", "# build blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "SwinTransformerBlock", "(", "dim", "=", "dim", ",", "input_resolution", "=", "input_resolution", ",", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer._int_weights": [[392, 400], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["num_heads", "=", "num_heads", ",", "window_size", "=", "window_size", ",", "\n", "shift_size", "=", "0", "if", "(", "i", "%", "2", "==", "0", ")", "else", "window_size", "//", "2", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", "[", "i", "]", "if", "isinstance", "(", "drop_path", ",", "list", ")", "else", "drop_path", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.no_weight_decay": [[401, 404], ["None"], "methods", ["None"], ["# patch merging layer", "\n", "if", "downsample", "is", "not", "None", ":", "\n", "            ", "self", ".", "downsample", "=", "downsample", "(", "input_resolution", ",", "dim", "=", "dim", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.no_weight_decay_keywords": [[405, 408], ["None"], "methods", ["None"], ["            ", "self", ".", "downsample", "=", "None", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.forward_features": [[409, 421], ["Swin_Transformer.SwinTransformer.patch_embed", "Swin_Transformer.SwinTransformer.pos_drop", "Swin_Transformer.SwinTransformer.norm", "Swin_Transformer.SwinTransformer.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "layer", "layer.transpose"], "methods", ["None"], ["        ", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "if", "self", ".", "use_checkpoint", ":", "\n", "                ", "x", "=", "checkpoint", ".", "checkpoint", "(", "blk", ",", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "return", "x", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"dim={self.dim}, input_resolution={self.input_resolution}, depth={self.depth}\"", "\n", "\n", "", "def", "flops", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.forward": [[422, 425], ["Swin_Transformer.SwinTransformer.forward_features"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.forward_features"], ["        ", "flops", "=", "0", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "flops", "+=", "blk", ".", "flops", "(", ")", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.flops": [[426, 434], ["Swin_Transformer.SwinTransformer.patch_embed.flops", "enumerate", "layer.flops"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.flops", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.flops"], ["            ", "flops", "+=", "self", ".", "downsample", ".", "flops", "(", ")", "\n", "", "return", "flops", "\n", "\n", "\n", "", "", "class", "PatchEmbed", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "96", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.window_partition": [[34, 39], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.window_reverse": [[40, 45], ["int", "windows.view", "windows.view.permute().contiguous", "windows.view.permute"], "function", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.main.parse_option": [[37, 75], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "config.get_config"], "function", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.config.get_config"], []], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.main.main": [[77, 149], ["datas.get_loader", "logger.info", "models.build_model", "torch.nn.parallel.DistributedDataParallel.cuda", "logger.info", "optimizer.build_optimizer", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "sum", "logger.info", "hasattr", "lr_scheduler.build_scheduler", "logger.info", "time.time", "range", "str", "logger.info", "str", "amp.initialize", "model_without_ddp.flops", "logger.info", "len", "timm.loss.SoftTargetCrossEntropy", "utils.auto_resume_helper", "utils.load_checkpoint", "main.validate", "logger.info", "main.throughput", "data_loader_train.sampler.set_epoch", "main.train_one_epoch", "main.validate", "logger.info", "max", "logger.info", "time.time", "datetime.timedelta", "p.numel", "timm.loss.LabelSmoothingCrossEntropy", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "config.defrost", "config.freeze", "logger.info", "logger.info", "utils.save_checkpoint", "torch.nn.parallel.DistributedDataParallel.parameters", "logger.warning", "torch.get_rank", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.get_loader", "home.repos.pwc.inspect_result.liuzywen_swinnet.models.build.build_model", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.optimizer.build_optimizer", "home.repos.pwc.inspect_result.liuzywen_swinnet.None.lr_scheduler.build_scheduler", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.Swin_Transformer.SwinTransformer.flops", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.utils.auto_resume_helper", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.utils.load_checkpoint", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.main.validate", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.main.throughput", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.main.train_one_epoch", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.main.validate", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.utils.save_checkpoint"], []], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.main.train_one_epoch": [[151, 230], ["model.train", "optimizer.zero_grad", "len", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "time.time", "time.time", "enumerate", "logger.info", "samples.cuda.cuda", "targets.cuda.cuda", "model", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "time.time", "time.time", "mixup_fn", "criterion", "criterion", "optimizer.zero_grad", "optimizer.step", "lr_scheduler.step_update", "criterion.item", "targets.cuda.size", "logger.info", "criterion.backward", "optimizer.step", "optimizer.zero_grad", "lr_scheduler.step_update", "criterion.backward", "time.time", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "datetime.timedelta", "amp.scale_loss", "scaled_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "utils.get_grad_norm", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "utils.get_grad_norm", "amp.scale_loss", "scaled_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "utils.get_grad_norm", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "utils.get_grad_norm", "amp.master_params", "amp.master_params", "model.parameters", "model.parameters", "amp.master_params", "amp.master_params", "model.parameters", "model.parameters", "datetime.timedelta", "int", "int"], "function", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.SwinNet_train.train", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.utils.get_grad_norm", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.utils.get_grad_norm", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.utils.get_grad_norm", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.utils.get_grad_norm"], []], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.main.validate": [[232, 277], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "model.eval", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "time.time", "enumerate", "logger.info", "images.cuda.cuda", "target.cuda.cuda", "model", "torch.nn.CrossEntropyLoss.", "timm.utils.accuracy", "utils.reduce_tensor", "utils.reduce_tensor", "utils.reduce_tensor", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "time.time", "utils.reduce_tensor.item", "target.cuda.size", "utils.reduce_tensor.item", "target.cuda.size", "utils.reduce_tensor.item", "target.cuda.size", "logger.info", "time.time", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "len"], "function", ["home.repos.pwc.inspect_result.liuzywen_swinnet.back.utils.reduce_tensor", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.utils.reduce_tensor", "home.repos.pwc.inspect_result.liuzywen_swinnet.back.utils.reduce_tensor"], []], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.main.throughput": [[279, 297], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "enumerate", "images.cuda.cuda", "range", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "logger.info", "time.time", "range", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "logger.info", "model", "model"], "function", ["None"], []], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.utils.load_checkpoint": [[20, 45], ["logger.info", "config.MODEL.RESUME.startswith", "model.load_state_dict", "logger.info", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.load", "torch.load", "optimizer.load_state_dict", "lr_scheduler.load_state_dict", "config.defrost", "config.freeze", "logger.info", "amp.load_state_dict"], "function", ["None"], ["", "return", "lr", "\n", "", ""]], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.utils.save_checkpoint": [[47, 61], ["os.path.join", "logger.info", "torch.save", "torch.save", "logger.info", "model.state_dict", "optimizer.state_dict", "lr_scheduler.state_dict", "amp.state_dict"], "function", ["None"], []], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.utils.get_grad_norm": [[63, 74], ["isinstance", "list", "float", "filter", "p.grad.data.norm", "p.grad.data.norm.item"], "function", ["None"], []], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.utils.auto_resume_helper": [[76, 87], ["os.listdir", "print", "len", "max", "print", "ckpt.endswith", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.liuzywen_swinnet.back.utils.reduce_tensor": [[89, 94], ["tensor.clone", "torch.all_reduce", "torch.get_world_size"], "function", ["None"], []], "home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTrain.__init__": [[54, 64], ["print", "logging.info", "len", "open", "x.strip", "f.readlines"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "data_list", ")", ":", "\n", "# data_root \u662f\u56fe\u7247\u7684\u6839\u76ee\u5f55", "\n", "# data_list \u662f\u56fe\u7247\u540d\u6587\u4ef6\u4fdd\u5b58\u7684\u76ee\u5f55", "\n", "        ", "print", "(", "\"Start load Train_Data\"", ")", "\n", "logging", ".", "info", "(", "\"Start load Train_Data\"", ")", "\n", "self", ".", "sal_root", "=", "data_root", "\n", "self", ".", "sal_source", "=", "data_list", "\n", "with", "open", "(", "self", ".", "sal_source", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "sal_list", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "self", ".", "sal_num", "=", "len", "(", "self", ".", "sal_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTrain.__getitem__": [[65, 78], ["dataset.load_image", "dataset.load_mask", "dataset.cv_random_flip", "torch.Tensor", "torch.Tensor", "dataset.ImageDataTrain.sal_list[].split", "dataset.ImageDataTrain.sal_list[].split", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.load_image", "home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.load_mask", "home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.cv_random_flip"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "im_name", "=", "self", ".", "sal_list", "[", "item", "%", "self", ".", "sal_num", "]", ".", "split", "(", ")", "[", "0", "]", "\n", "gt_name", "=", "self", ".", "sal_list", "[", "item", "%", "self", ".", "sal_num", "]", ".", "split", "(", ")", "[", "1", "]", "\n", "\n", "sal_image", ",", "img_size", "=", "load_image", "(", "os", ".", "path", ".", "join", "(", "self", ".", "sal_root", ",", "im_name", ")", ")", "\n", "sal_label", "=", "load_mask", "(", "os", ".", "path", ".", "join", "(", "self", ".", "sal_root", ",", "gt_name", ")", ")", "\n", "sal_image", ",", "sal_label", "=", "cv_random_flip", "(", "sal_image", ",", "sal_label", ")", "\n", "\n", "sal_image", "=", "torch", ".", "Tensor", "(", "sal_image", ")", "\n", "sal_label", "=", "torch", ".", "Tensor", "(", "sal_label", ")", "\n", "\n", "sample", "=", "{", "'sal_image'", ":", "sal_image", ",", "'img_name'", ":", "im_name", ",", "'sal_label'", ":", "sal_label", ",", "'img_size'", ":", "img_size", "}", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTrain.__len__": [[79, 81], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sal_num", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__init__": [[83, 90], ["len", "open", "x.strip", "f.readlines"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "data_list", ")", ":", "\n", "        ", "self", ".", "sal_root", "=", "data_root", "\n", "self", ".", "sal_source", "=", "data_list", "\n", "\n", "with", "open", "(", "self", ".", "sal_source", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "sal_list", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "self", ".", "sal_num", "=", "len", "(", "self", ".", "sal_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.ImageDataTest.__getitem__": [[91, 98], ["dataset.load_image", "torch.Tensor", "dataset.ImageDataTest.sal_list[].split", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.load_image"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img_name", "=", "self", ".", "sal_list", "[", "item", "%", "self", ".", "sal_num", "]", ".", "split", "(", ")", "[", "0", "]", "\n", "image", ",", "image_size", "=", "load_image", "(", "os", ".", "path", ".", "join", "(", "self", ".", "sal_root", ",", "img_name", ")", ")", "\n", "img", "=", "torch", ".", "Tensor", "(", "image", ")", "\n", "\n", "sample", "=", "{", "'image'", ":", "img", ",", "'image_name'", ":", "img_name", ",", "'image_size'", ":", "image_size", "}", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.load_image": [[22, 32], ["cv2.imread", "numpy.array", "tuple", "cv2.resize", "numpy.array", "np.array.transpose", "os.path.exists", "print"], "function", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.SalObjDataset.resize"], ["def", "load_image", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "print", "(", "f'File {path} not exists'", ")", "\n", "", "im", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "in_", "=", "np", ".", "array", "(", "im", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "img_size", "=", "tuple", "(", "in_", ".", "shape", "[", ":", "2", "]", ")", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "(", "img_size", ",", "img_size", ")", ")", "\n", "in__", "=", "np", ".", "array", "(", "im", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "in__", "=", "in_", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "in__", ",", "img_size", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.load_mask": [[33, 44], ["PIL.Image.open().convert", "im.resize.resize", "numpy.array", "os.path.exists", "print", "len", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.liuzywen_swinnet.None.data.SalObjDataset.resize"], ["", "def", "load_mask", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "print", "(", "f'File {path} not exists'", ")", "\n", "", "im", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'L'", ")", "\n", "im", "=", "im", ".", "resize", "(", "(", "img_size", ",", "img_size", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "mask", "=", "np", ".", "array", "(", "im", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "len", "(", "mask", ".", "shape", ")", "==", "3", ":", "\n", "        ", "mask", "=", "mask", "[", ":", ",", ":", ",", "0", "]", "\n", "", "mask", "=", "mask", "/", "255.", "\n", "mask", "=", "mask", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.cv_random_flip": [[45, 51], ["random.randint", "img[].copy", "label[].copy"], "function", ["None"], ["", "def", "cv_random_flip", "(", "img", ",", "label", ")", ":", "\n", "    ", "flip_flag", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "flip_flag", "==", "1", ":", "\n", "        ", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "label", "=", "label", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.liuzywen_swinnet.datas.dataset.get_loader": [[99, 121], ["dataset.ImageDataTrain", "torch.utils.data.DataLoader", "dataset.ImageDataTest", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "get_loader", "(", "config", ",", "mode", "=", "'train'", ",", "pin", "=", "False", ")", ":", "\n", "    ", "shuffle", "=", "False", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "shuffle", "=", "True", "\n", "dataset", "=", "ImageDataTrain", "(", "config", "[", "'train_root_t'", "]", ",", "config", "[", "'train_list_t'", "]", ")", "\n", "data_loader", "=", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "config", "[", "'batch_size'", "]", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "config", "[", "'num_thread'", "]", ",", "\n", "pin_memory", "=", "pin", "\n", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "ImageDataTest", "(", "config", "[", "'test_root'", "]", ",", "config", "[", "'test_list'", "]", ")", "\n", "data_loader", "=", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "config", "[", "'batch_size'", "]", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "config", "[", "'num_thread'", "]", ",", "\n", "pin_memory", "=", "pin", "\n", ")", "\n", "", "return", "data_loader", "", "", ""]]}