{"home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.pruning_modules.Kf_Conv2d.__init__": [[18, 25], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "pruning_modules.Kf_Conv2d.kfscale.data.fill_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conv_ori", ",", "bn_ori", ")", ":", "\n", "        ", "super", "(", "Kf_Conv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "conv_ori", "\n", "self", ".", "bn", "=", "bn_ori", "\n", "self", ".", "out_channels", "=", "self", ".", "conv", ".", "out_channels", "\n", "self", ".", "kfscale", "=", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "self", ".", "out_channels", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "kfscale", ".", "data", ".", "fill_", "(", "0.5", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.pruning_modules.Kf_Conv2d.forward": [[25, 32], ["pruning_modules.Kf_Conv2d.conv", "pruning_modules.Kf_Conv2d.bn", "int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "num_ori", "=", "int", "(", "x", ".", "shape", "[", "0", "]", "//", "2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "self", ".", "kfscale", "*", "x", "[", ":", "num_ori", "]", "+", "(", "1", "-", "self", ".", "kfscale", ")", "*", "x", "[", "num_ori", ":", "]", ",", "x", "[", "num_ori", ":", "]", "]", ",", "dim", "=", "0", ")", "\n", "", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.pruning_modules.Masked_Conv2d_bn.__init__": [[34, 39], ["torch.Module.__init__", "pruning_modules.Masked_Conv2d_bn.register_buffer", "kf_conv2d_ori.out_index.clone"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kf_conv2d_ori", ")", ":", "\n", "        ", "super", "(", "Masked_Conv2d_bn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "kf_conv2d_ori", ".", "conv", "\n", "self", ".", "bn", "=", "kf_conv2d_ori", ".", "bn", "\n", "self", ".", "register_buffer", "(", "'out_index'", ",", "kf_conv2d_ori", ".", "out_index", ".", "clone", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.pruning_modules.Masked_Conv2d_bn.forward": [[41, 50], ["pruning_modules.Masked_Conv2d_bn.conv", "pruning_modules.Masked_Conv2d_bn.bn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "\n", "mask", "=", "torch", ".", "zeros", "(", "*", "x", ".", "shape", ",", "device", "=", "x", ".", "device", ")", "\n", "\n", "mask", "[", ":", ",", "self", ".", "out_index", ",", ":", ",", ":", "]", "=", "1", "\n", "x", "=", "x", "*", "mask", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.pruning_modules.Pruned_Conv2d_bn1.__init__": [[52, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "masked_module.conv.weight.data.clone", "weight_data.index_select.index_select.index_select", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "masked_module.bn.weight.data.clone().index_select", "masked_module.bn.bias.data.clone().index_select", "masked_module.bn.running_mean.data.clone().index_select", "masked_module.bn.running_var.data.clone().index_select", "len", "len", "masked_module.bn.weight.data.clone", "masked_module.bn.bias.data.clone", "masked_module.bn.running_mean.data.clone", "masked_module.bn.running_var.data.clone"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "masked_module", ")", ":", "\n", "        ", "super", "(", "Pruned_Conv2d_bn1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "newconv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "masked_module", ".", "conv", ".", "in_channels", ",", "out_channels", "=", "len", "(", "masked_module", ".", "out_index", ")", ",", "\n", "kernel_size", "=", "masked_module", ".", "conv", ".", "kernel_size", ",", "stride", "=", "masked_module", ".", "conv", ".", "stride", ",", "\n", "bias", "=", "False", ",", "padding", "=", "masked_module", ".", "conv", ".", "padding", ")", "\n", "\n", "weight_data", "=", "masked_module", ".", "conv", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "weight_data", "=", "weight_data", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "masked_module", ".", "out_index", ")", "\n", "newconv", ".", "weight", ".", "data", "=", "weight_data", "\n", "\n", "newbn", "=", "nn", ".", "BatchNorm2d", "(", "len", "(", "masked_module", ".", "out_index", ")", ")", "\n", "newbn", ".", "weight", ".", "data", "=", "masked_module", ".", "bn", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "masked_module", ".", "out_index", ")", "\n", "newbn", ".", "bias", ".", "data", "=", "masked_module", ".", "bn", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "masked_module", ".", "out_index", ")", "\n", "newbn", ".", "running_mean", ".", "data", "=", "masked_module", ".", "bn", ".", "running_mean", ".", "data", ".", "clone", "(", ")", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "masked_module", ".", "out_index", ")", "\n", "newbn", ".", "running_var", ".", "data", "=", "masked_module", ".", "bn", ".", "running_var", ".", "data", ".", "clone", "(", ")", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "masked_module", ".", "out_index", ")", "\n", "\n", "self", ".", "conv", "=", "newconv", "\n", "self", ".", "bn", "=", "newbn", "\n", "\n", "self", ".", "oriout_channels", "=", "masked_module", ".", "conv", ".", "out_channels", "\n", "self", ".", "out_index", "=", "masked_module", ".", "out_index", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.pruning_modules.Pruned_Conv2d_bn1.forward": [[75, 79], ["pruning_modules.Pruned_Conv2d_bn1.conv", "pruning_modules.Pruned_Conv2d_bn1.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.pruning_modules.Pruned_Conv2d_bn_middle.__init__": [[81, 103], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "masked_module.conv.weight.data.clone", "weight_data.index_select().index_select.index_select().index_select.index_select().index_select", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "masked_module.bn.weight.data.clone().index_select", "masked_module.bn.bias.data.clone().index_select", "masked_module.bn.running_mean.data.clone().index_select", "masked_module.bn.running_var.data.clone().index_select", "len", "len", "len", "weight_data.index_select().index_select.index_select().index_select.index_select", "masked_module.bn.weight.data.clone", "masked_module.bn.bias.data.clone", "masked_module.bn.running_mean.data.clone", "masked_module.bn.running_var.data.clone"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "masked_module", ")", ":", "\n", "        ", "super", "(", "Pruned_Conv2d_bn_middle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "newconv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "len", "(", "masked_module", ".", "in_index", ")", ",", "out_channels", "=", "len", "(", "masked_module", ".", "out_index", ")", ",", "\n", "kernel_size", "=", "masked_module", ".", "conv", ".", "kernel_size", ",", "stride", "=", "masked_module", ".", "conv", ".", "stride", ",", "\n", "bias", "=", "False", ",", "padding", "=", "masked_module", ".", "conv", ".", "padding", ")", "\n", "\n", "weight_data", "=", "masked_module", ".", "conv", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "weight_data", "=", "weight_data", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "masked_module", ".", "out_index", ")", ".", "index_select", "(", "dim", "=", "1", ",", "index", "=", "masked_module", ".", "in_index", ")", "\n", "newconv", ".", "weight", ".", "data", "=", "weight_data", "\n", "\n", "newbn", "=", "nn", ".", "BatchNorm2d", "(", "len", "(", "masked_module", ".", "out_index", ")", ")", "\n", "newbn", ".", "weight", ".", "data", "=", "masked_module", ".", "bn", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "masked_module", ".", "out_index", ")", "\n", "newbn", ".", "bias", ".", "data", "=", "masked_module", ".", "bn", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "masked_module", ".", "out_index", ")", "\n", "newbn", ".", "running_mean", ".", "data", "=", "masked_module", ".", "bn", ".", "running_mean", ".", "data", ".", "clone", "(", ")", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "masked_module", ".", "out_index", ")", "\n", "newbn", ".", "running_var", ".", "data", "=", "masked_module", ".", "bn", ".", "running_var", ".", "data", ".", "clone", "(", ")", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "masked_module", ".", "out_index", ")", "\n", "\n", "self", ".", "conv", "=", "newconv", "\n", "self", ".", "bn", "=", "newbn", "\n", "\n", "self", ".", "oriout_channels", "=", "masked_module", ".", "conv", ".", "out_channels", "\n", "self", ".", "out_index", "=", "masked_module", ".", "out_index", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.pruning_modules.Pruned_Conv2d_bn_middle.forward": [[103, 107], ["pruning_modules.Pruned_Conv2d_bn_middle.conv", "pruning_modules.Pruned_Conv2d_bn_middle.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.pruning_modules.Pruned_Conv2d_bn2.__init__": [[109, 131], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "masked_module.conv.weight.data.clone", "weight_data.index_select().index_select.index_select().index_select.index_select().index_select", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "masked_module.bn.weight.data.clone().index_select", "masked_module.bn.bias.data.clone().index_select", "masked_module.bn.running_mean.data.clone().index_select", "masked_module.bn.running_var.data.clone().index_select", "len", "len", "len", "weight_data.index_select().index_select.index_select().index_select.index_select", "masked_module.bn.weight.data.clone", "masked_module.bn.bias.data.clone", "masked_module.bn.running_mean.data.clone", "masked_module.bn.running_var.data.clone"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "masked_module", ")", ":", "\n", "        ", "super", "(", "Pruned_Conv2d_bn2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "newconv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "len", "(", "masked_module", ".", "in_index", ")", ",", "out_channels", "=", "len", "(", "masked_module", ".", "out_index", ")", ",", "\n", "kernel_size", "=", "masked_module", ".", "conv", ".", "kernel_size", ",", "stride", "=", "masked_module", ".", "conv", ".", "stride", ",", "\n", "bias", "=", "False", ",", "padding", "=", "masked_module", ".", "conv", ".", "padding", ")", "\n", "\n", "weight_data", "=", "masked_module", ".", "conv", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "weight_data", "=", "weight_data", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "masked_module", ".", "out_index", ")", ".", "index_select", "(", "dim", "=", "1", ",", "index", "=", "masked_module", ".", "in_index", ")", "\n", "newconv", ".", "weight", ".", "data", "=", "weight_data", "\n", "\n", "newbn", "=", "nn", ".", "BatchNorm2d", "(", "len", "(", "masked_module", ".", "out_index", ")", ")", "\n", "newbn", ".", "weight", ".", "data", "=", "masked_module", ".", "bn", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "masked_module", ".", "out_index", ")", "\n", "newbn", ".", "bias", ".", "data", "=", "masked_module", ".", "bn", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "masked_module", ".", "out_index", ")", "\n", "newbn", ".", "running_mean", ".", "data", "=", "masked_module", ".", "bn", ".", "running_mean", ".", "data", ".", "clone", "(", ")", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "masked_module", ".", "out_index", ")", "\n", "newbn", ".", "running_var", ".", "data", "=", "masked_module", ".", "bn", ".", "running_var", ".", "data", ".", "clone", "(", ")", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "masked_module", ".", "out_index", ")", "\n", "\n", "self", ".", "conv", "=", "newconv", "\n", "self", ".", "bn", "=", "newbn", "\n", "\n", "self", ".", "oriout_channels", "=", "masked_module", ".", "conv", ".", "out_channels", "\n", "self", ".", "out_index", "=", "masked_module", ".", "out_index", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.pruning_modules.Pruned_Conv2d_bn2.forward": [[131, 137], ["pruning_modules.Pruned_Conv2d_bn2.conv", "pruning_modules.Pruned_Conv2d_bn2.bn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "output", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "oriout_channels", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "output", "[", ":", ",", "self", ".", "out_index", ",", ":", ",", ":", "]", "=", "x", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.utils.AverageMeter.__init__": [[18, 20], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.utils.AverageMeter.reset": [[21, 26], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.utils.AverageMeter.update": [[27, 32], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.utils.RecorderMeter.__init__": [[36, 38], ["utils.RecorderMeter.reset"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.reset"], ["def", "__init__", "(", "self", ",", "total_epoch", ")", ":", "\n", "    ", "self", ".", "reset", "(", "total_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.utils.RecorderMeter.reset": [[39, 48], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "total_epoch", ")", ":", "\n", "    ", "assert", "total_epoch", ">", "0", "\n", "self", ".", "total_epoch", "=", "total_epoch", "\n", "self", ".", "current_epoch", "=", "0", "\n", "self", ".", "epoch_losses", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_losses", "=", "self", ".", "epoch_losses", "-", "1", "\n", "\n", "self", ".", "epoch_accuracy", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_accuracy", "=", "self", ".", "epoch_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.utils.RecorderMeter.update": [[49, 58], ["math.isclose", "utils.RecorderMeter.max_accuracy"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.max_accuracy"], ["", "def", "update", "(", "self", ",", "idx", ",", "train_loss", ",", "train_acc", ",", "val_loss", ",", "val_acc", ")", ":", "\n", "    ", "assert", "idx", ">=", "0", "and", "idx", "<", "self", ".", "total_epoch", ",", "'total_epoch : {} , but update with the {} index'", ".", "format", "(", "self", ".", "total_epoch", ",", "idx", ")", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "0", "]", "=", "train_loss", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "1", "]", "=", "val_loss", "\n", "self", ".", "epoch_accuracy", "[", "idx", ",", "0", "]", "=", "train_acc", "\n", "self", ".", "epoch_accuracy", "[", "idx", ",", "1", "]", "=", "val_acc", "\n", "self", ".", "current_epoch", "=", "idx", "+", "1", "\n", "#return self.max_accuracy(False) == val_acc", "\n", "return", "math", ".", "isclose", "(", "self", ".", "max_accuracy", "(", "False", ")", ",", "val_acc", ",", "rel_tol", "=", "1e-06", ")", "\n", "", "def", "max_accuracy", "(", "self", ",", "istrain", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.utils.RecorderMeter.max_accuracy": [[58, 62], ["utils.RecorderMeter.epoch_accuracy[].max", "utils.RecorderMeter.epoch_accuracy[].max"], "methods", ["None"], ["", "def", "max_accuracy", "(", "self", ",", "istrain", ")", ":", "\n", "    ", "if", "self", ".", "current_epoch", "<=", "0", ":", "return", "0", "\n", "if", "istrain", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "0", "]", ".", "max", "(", ")", "\n", "else", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "1", "]", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.utils.RecorderMeter.plot_curve": [[63, 107], ["matplotlib.figure", "matplotlib.figure", "numpy.array", "numpy.zeros", "matplotlib.xlim", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.ylim", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.grid", "matplotlib.grid", "matplotlib.title", "matplotlib.title", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.close", "matplotlib.close", "numpy.arange", "numpy.arange", "matplotlib.figure.savefig", "print", "float", "float", "range"], "methods", ["None"], ["", "def", "plot_curve", "(", "self", ",", "save_path", ")", ":", "\n", "    ", "title", "=", "'the accuracy/loss curve of train/val'", "\n", "dpi", "=", "80", "\n", "width", ",", "height", "=", "1200", ",", "800", "\n", "legend_fontsize", "=", "10", "\n", "scale_distance", "=", "48.8", "\n", "figsize", "=", "width", "/", "float", "(", "dpi", ")", ",", "height", "/", "float", "(", "dpi", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "#\u5728\u8bad\u7ec3\u73af\u5883\u4f1a\u62a5\u9519", "\n", "x_axis", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "total_epoch", ")", "]", ")", "# epochs", "\n", "y_axis", "=", "np", ".", "zeros", "(", "self", ".", "total_epoch", ")", "\n", "\n", "plt", ".", "xlim", "(", "0", ",", "self", ".", "total_epoch", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "100", ")", "\n", "interval_y", "=", "5", "\n", "interval_x", "=", "5", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "0", ",", "self", ".", "total_epoch", "+", "interval_x", ",", "interval_x", ")", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "0", ",", "100", "+", "interval_y", ",", "interval_y", ")", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "'the training epoch'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "ylabel", "(", "'accuracy'", ",", "fontsize", "=", "16", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'g'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'train-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'y'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'valid-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'g'", ",", "linestyle", "=", "':'", ",", "label", "=", "'train-loss-x50'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'y'", ",", "linestyle", "=", "':'", ",", "label", "=", "'valid-loss-x50'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "      ", "fig", ".", "savefig", "(", "save_path", ",", "dpi", "=", "dpi", ",", "bbox_inches", "=", "'tight'", ")", "\n", "print", "(", "'---- save figure {} into {}'", ".", "format", "(", "title", ",", "save_path", ")", ")", "\n", "", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.utils.time_string": [[109, 113], ["time.strftime", "time.gmtime", "time.time"], "function", ["None"], ["", "", "def", "time_string", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d %X'", "\n", "string", "=", "'[{}]'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.utils.convert_secs2time": [[114, 119], ["int", "int", "int"], "function", ["None"], ["", "def", "convert_secs2time", "(", "epoch_time", ")", ":", "\n", "  ", "need_hour", "=", "int", "(", "epoch_time", "/", "3600", ")", "\n", "need_mins", "=", "int", "(", "(", "epoch_time", "-", "3600", "*", "need_hour", ")", "/", "60", ")", "\n", "need_secs", "=", "int", "(", "epoch_time", "-", "3600", "*", "need_hour", "-", "60", "*", "need_mins", ")", "\n", "return", "need_hour", ",", "need_mins", ",", "need_secs", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.utils.time_file_str": [[120, 124], ["time.strftime", "time.gmtime", "random.randint", "time.time"], "function", ["None"], ["", "def", "time_file_str", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d'", "\n", "string", "=", "'{}'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "+", "'-{}'", ".", "format", "(", "random", ".", "randint", "(", "1", ",", "10000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.SCOP_NeurIPS2020.utils.timing": [[125, 133], ["time.time", "f", "time.time", "print"], "function", ["None"], ["", "def", "timing", "(", "f", ")", ":", "\n", "    ", "def", "wrap", "(", "*", "args", ")", ":", "\n", "        ", "time1", "=", "time", ".", "time", "(", ")", "\n", "ret", "=", "f", "(", "*", "args", ")", "\n", "time2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'%s function took %0.3f ms'", "%", "(", "f", ".", "__name__", ",", "(", "time2", "-", "time1", ")", "*", "1000.0", ")", ")", "\n", "return", "ret", "\n", "", "return", "wrap", "\n", "", ""]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.generator_imagenet.Block.__init__": [[23, 42], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "h_ch", "=", "None", ",", "ksize", "=", "3", ",", "pad", "=", "1", ",", "\n", "activation", "=", "F", ".", "relu", ",", "upsample", "=", "False", ",", "num_classes", "=", "0", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "learnable_sc", "=", "in_ch", "!=", "out_ch", "or", "upsample", "\n", "if", "h_ch", "is", "None", ":", "\n", "            ", "h_ch", "=", "out_ch", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "# Register layrs", "\n", "self", ".", "c1", "=", "nn", ".", "Conv2d", "(", "in_ch", ",", "h_ch", ",", "ksize", ",", "1", ",", "pad", ")", "\n", "self", ".", "c2", "=", "nn", ".", "Conv2d", "(", "h_ch", ",", "out_ch", ",", "ksize", ",", "1", ",", "pad", ")", "\n", "\n", "self", ".", "b1", "=", "nn", ".", "BatchNorm2d", "(", "in_ch", ")", "\n", "self", ".", "b2", "=", "nn", ".", "BatchNorm2d", "(", "h_ch", ")", "\n", "if", "self", ".", "learnable_sc", ":", "\n", "            ", "self", ".", "c_sc", "=", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.generator_imagenet.Block._initialize": [[43, 48], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "self", ".", "c1", ".", "weight", ".", "tensor", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "c2", ".", "weight", ".", "tensor", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "if", "self", ".", "learnable_sc", ":", "\n", "            ", "init", ".", "xavier_uniform_", "(", "self", ".", "c_sc", ".", "weight", ".", "tensor", ",", "gain", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.generator_imagenet.Block.forward": [[49, 51], ["generator_imagenet.Block.shortcut", "generator_imagenet.Block.residual"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.models.generator_imagenet.Block.shortcut", "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.generator_imagenet.Block.residual"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ",", "z", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "shortcut", "(", "x", ")", "+", "self", ".", "residual", "(", "x", ",", "y", ",", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.generator_imagenet.Block.shortcut": [[52, 60], ["generator_imagenet.Block.c_sc", "generator_imagenet._upsample"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.models.generator_imagenet._upsample"], ["", "def", "shortcut", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "learnable_sc", ":", "\n", "            ", "if", "self", ".", "upsample", ":", "\n", "                ", "h", "=", "_upsample", "(", "x", ")", "\n", "", "h", "=", "self", ".", "c_sc", "(", "h", ")", "\n", "return", "h", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.generator_imagenet.Block.residual": [[61, 75], ["generator_imagenet.Block.activation", "generator_imagenet.Block.c1", "generator_imagenet.Block.c2", "generator_imagenet.Block.b1", "generator_imagenet.Block.b1", "generator_imagenet._upsample", "generator_imagenet.Block.b2", "generator_imagenet.Block.b2", "generator_imagenet.Block.activation"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.models.generator_imagenet._upsample"], ["", "", "def", "residual", "(", "self", ",", "x", ",", "y", "=", "None", ",", "z", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "y", "is", "not", "None", ":", "\n", "            ", "h", "=", "self", ".", "b1", "(", "x", ",", "y", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "h", "=", "self", ".", "b1", "(", "x", ")", "\n", "", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "h", "=", "_upsample", "(", "h", ")", "\n", "", "h", "=", "self", ".", "c1", "(", "h", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "h", "=", "self", ".", "b2", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "h", "=", "self", ".", "b2", "(", "h", ")", "\n", "", "return", "self", ".", "c2", "(", "self", ".", "activation", "(", "h", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.generator_imagenet.ResNetGenerator.__init__": [[81, 107], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "generator_imagenet.Block", "generator_imagenet.Block", "generator_imagenet.Block", "generator_imagenet.Block", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["def", "__init__", "(", "self", ",", "num_features", "=", "64", ",", "dim_z", "=", "128", ",", "bottom_width", "=", "4", ",", "\n", "activation", "=", "F", ".", "relu", ",", "num_classes", "=", "0", ",", "distribution", "=", "'normal'", ")", ":", "\n", "        ", "super", "(", "ResNetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "dim_z", "=", "dim_z", "\n", "self", ".", "bottom_width", "=", "bottom_width", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "distribution", "=", "distribution", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "dim_z", ",", "16", "*", "num_features", "*", "bottom_width", "**", "2", ")", "\n", "\n", "self", ".", "block2", "=", "Block", "(", "num_features", "*", "16", ",", "num_features", "*", "8", ",", "\n", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "block3", "=", "Block", "(", "num_features", "*", "8", ",", "num_features", "*", "4", ",", "\n", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "block4", "=", "Block", "(", "num_features", "*", "4", ",", "num_features", "*", "2", ",", "\n", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "block5", "=", "Block", "(", "num_features", "*", "2", ",", "num_features", ",", "\n", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "b6", "=", "nn", ".", "BatchNorm2d", "(", "num_features", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "num_features", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.generator_imagenet.ResNetGenerator._initialize": [[108, 111], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "self", ".", "l1", ".", "weight", ".", "tensor", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "conv7", ".", "weight", ".", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.generator_imagenet.ResNetGenerator.forward": [[112, 118], ["generator_imagenet.ResNetGenerator.l1().view", "range", "generator_imagenet.ResNetGenerator.activation", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "z.size", "generator_imagenet.ResNetGenerator.b6", "generator_imagenet.ResNetGenerator.conv6", "generator_imagenet.ResNetGenerator.l1", "getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "y", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "h", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "z", ".", "size", "(", "0", ")", ",", "-", "1", ",", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "6", ")", ":", "\n", "            ", "h", "=", "getattr", "(", "self", ",", "'block{}'", ".", "format", "(", "i", ")", ")", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "", "h", "=", "self", ".", "activation", "(", "self", ".", "b6", "(", "h", ")", ")", "\n", "return", "torch", ".", "tanh", "(", "self", ".", "conv6", "(", "h", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.generator_imagenet._upsample": [[16, 19], ["torch.interpolate", "x.size"], "function", ["None"], ["def", "_upsample", "(", "x", ")", ":", "\n", "    ", "h", ",", "w", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "return", "F", ".", "interpolate", "(", "x", ",", "size", "=", "(", "h", "*", "2", ",", "w", "*", "2", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.DownsampleA.__init__": [[18, 21], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "        ", "super", "(", "DownsampleA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.DownsampleA.forward": [[22, 25], ["resnet_cifar.DownsampleA.avg", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "resnet_cifar.DownsampleA.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "avg", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x", ",", "x", ".", "mul", "(", "0", ")", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.DownsampleC.__init__": [[29, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "        ", "super", "(", "DownsampleC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "!=", "1", "or", "nIn", "!=", "nOut", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.DownsampleC.forward": [[34, 37], ["resnet_cifar.DownsampleC.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.DownsampleD.__init__": [[41, 46], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "        ", "super", "(", "DownsampleD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "2", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "2", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.DownsampleD.forward": [[47, 51], ["resnet_cifar.DownsampleD.conv", "resnet_cifar.DownsampleD.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.ResNetBasicblock.__init__": [[57, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_a", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_a", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv_b", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_b", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.ResNetBasicblock.forward": [[68, 82], ["resnet_cifar.ResNetBasicblock.conv_a", "resnet_cifar.ResNetBasicblock.bn_a", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.ResNetBasicblock.conv_b", "resnet_cifar.ResNetBasicblock.bn_b", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "basicblock", "=", "self", ".", "conv_a", "(", "x", ")", "\n", "basicblock", "=", "self", ".", "bn_a", "(", "basicblock", ")", "\n", "basicblock", "=", "F", ".", "relu", "(", "basicblock", ",", "inplace", "=", "True", ")", "\n", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "## \u53ea\u7275\u626f\u5b83\u7684\u8f93\u5165\u5c42\u600e\u4e48\u780d\u7684\u95ee\u9898", "\n", "basicblock", "=", "self", ".", "bn_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "F", ".", "relu", "(", "residual", "+", "basicblock", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.CifarResNet.__init__": [[131, 167], ["torch.Module.__init__", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar.CifarResNet._make_layer", "resnet_cifar.CifarResNet._make_layer", "resnet_cifar.CifarResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_cifar.CifarResNet.named_modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "print", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__", "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.ResNet._make_layer", "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.ResNet._make_layer", "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.ResNet._make_layer"], ["\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_1_3x3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn_1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "stage_1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_3", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n", "\n", "", "", "def", "resnet20", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-20 model for CIFAR-10 (by default)\n    Args:\n      num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "20", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "resnet32", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-32 model for CIFAR-10 (by default)\n    Args:\n      num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "32", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "resnet44", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-44 model for CIFAR-10 (by default)\n    Args:\n      num_classes (uint): number of classes\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.CifarResNet._make_layer": [[168, 181], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block"], "methods", ["None"], ["model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "44", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "resnet56", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-56 model for CIFAR-10 (by default)\n    Args:\n      num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "56", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "resnet110", "(", "num_classes", "=", "10", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.CifarResNet.forward": [[182, 200], ["resnet_cifar.CifarResNet.conv_1_3x3", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.CifarResNet.stage_1", "resnet_cifar.CifarResNet.stage_2", "resnet_cifar.CifarResNet.stage_3", "resnet_cifar.CifarResNet.avgpool", "resnet_cifar.CifarResNet.view", "resnet_cifar.CifarResNet.classifier", "resnet_cifar.CifarResNet.bn_1", "resnet_cifar.CifarResNet.size"], "methods", ["None"], ["    ", "\"\"\"Constructs a ResNet-110 model for CIFAR-10 (by default)\n    Args:\n      num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "110", ",", "num_classes", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.resnet20": [[201, 205], ["resnet_cifar.CifarResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.resnet32": [[207, 211], ["resnet_cifar.CifarResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.resnet44": [[163, 170], ["resnet_cifar.CifarResNet"], "function", ["None"], ["", "def", "resnet44", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-44 model for CIFAR-10 (by default)\n    Args:\n      num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "44", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.resnet56": [[212, 216], ["resnet_cifar.CifarResNet"], "function", ["None"], []], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.resnet110": [[181, 188], ["resnet_cifar.CifarResNet"], "function", ["None"], ["", "def", "resnet110", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-110 model for CIFAR-10 (by default)\n    Args:\n      num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "110", ",", "num_classes", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.BasicBlock.__init__": [[33, 42], ["torch.Module.__init__", "resnet_imagenet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_imagenet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__", "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.conv3x3", "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.BasicBlock.forward": [[43, 60], ["resnet_imagenet.BasicBlock.conv1", "resnet_imagenet.BasicBlock.bn1", "resnet_imagenet.BasicBlock.relu", "resnet_imagenet.BasicBlock.conv2", "resnet_imagenet.BasicBlock.bn2", "resnet_imagenet.BasicBlock.relu", "resnet_imagenet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.Bottleneck.__init__": [[65, 79], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# self.relu = nn.ReLU(inplace=False)", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.Bottleneck.forward": [[80, 100], ["resnet_imagenet.Bottleneck.conv1", "resnet_imagenet.Bottleneck.bn1", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.conv2", "resnet_imagenet.Bottleneck.bn2", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.conv3", "resnet_imagenet.Bottleneck.bn3", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.ResNet.__init__": [[151, 178], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_imagenet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__", "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.ResNet._make_layer", "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.ResNet._make_layer", "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.ResNet._make_layer", "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.ResNet._make_layer"], ["x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "\n", "", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "print", "(", "'ResNet-18 Use pretrained model for initalization'", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.ResNet._make_layer": [[179, 195], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "print", "(", "'ResNet-34 Use pretrained model for initalization'", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "print", "(", "'ResNet-50 Use pretrained model for initalization'", ")", "\n", "", "return", "model", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.ResNet.forward": [[196, 218], ["resnet_imagenet.ResNet.conv1_7x7", "resnet_imagenet.ResNet.bn1", "resnet_imagenet.ResNet.relu", "resnet_imagenet.ResNet.maxpool", "resnet_imagenet.ResNet.layer1", "resnet_imagenet.ResNet.layer2", "resnet_imagenet.ResNet.layer3", "resnet_imagenet.ResNet.layer4", "resnet_imagenet.ResNet.avgpool", "resnet_imagenet.ResNet.view", "resnet_imagenet.ResNet.fc", "resnet_imagenet.ResNet.size"], "methods", ["None"], ["\n", "\n", "", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "print", "(", "'ResNet-101 Use pretrained model for initalization'", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "print", "(", "'ResNet-152 Use pretrained model for initalization'", ")", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.conv3x3": [[82, 86], ["torch.Conv2d"], "function", ["None"], ["\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.resnet18": [[219, 229], ["resnet_imagenet.ResNet", "ResNet.load_state_dict", "print", "model_zoo.load_url"], "function", ["None"], ["", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.resnet34": [[230, 240], ["resnet_imagenet.ResNet", "ResNet.load_state_dict", "print", "model_zoo.load_url"], "function", ["None"], []], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.resnet50": [[186, 196], ["resnet_imagenet.ResNet", "ResNet.load_state_dict", "print", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "print", "(", "'ResNet-50 Use pretrained model for initalization'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.resnet101": [[198, 208], ["resnet_imagenet.ResNet", "ResNet.load_state_dict", "print", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "print", "(", "'ResNet-101 Use pretrained model for initalization'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.resnet152": [[210, 220], ["resnet_imagenet.ResNet", "ResNet.load_state_dict", "print", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "print", "(", "'ResNet-152 Use pretrained model for initalization'", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.generator_cifar.Generator.__init__": [[14, 35], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "128", ",", "4", "*", "4", "*", "4", "*", "dim", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "4", "*", "4", "*", "4", "*", "dim", ")", "#", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "4", "*", "dim", ",", "2", "*", "dim", ",", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "2", "*", "dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "self", ".", "block2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "2", "*", "dim", ",", "dim", ",", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "self", ".", "deconv_out", "=", "nn", ".", "ConvTranspose2d", "(", "dim", ",", "3", ",", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.generator_cifar.Generator.forward": [[36, 51], ["generator_cifar.Generator.linear1", "generator_cifar.Generator.bn1", "generator_cifar.Generator.relu1", "generator_cifar.Generator.view", "generator_cifar.Generator.block1", "generator_cifar.Generator.block2", "generator_cifar.Generator.deconv_out", "generator_cifar.Generator.tanh", "generator_cifar.Generator.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "\n", "        ", "output", "=", "self", ".", "linear1", "(", "input", ")", "\n", "output", "=", "self", ".", "bn1", "(", "output", ")", "\n", "output", "=", "self", ".", "relu1", "(", "output", ")", "\n", "\n", "output", "=", "output", ".", "view", "(", "-", "1", ",", "4", "*", "self", ".", "dim", ",", "4", ",", "4", ")", "\n", "\n", "\n", "output", "=", "self", ".", "block1", "(", "output", ")", "\n", "output", "=", "self", ".", "block2", "(", "output", ")", "\n", "output", "=", "self", ".", "deconv_out", "(", "output", ")", "\n", "output", "=", "self", ".", "tanh", "(", "output", ")", "\n", "return", "output", ".", "view", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.MaskBlock.__init__": [[22, 43], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "resnet_cifar.MaskBlock.register_buffer", "resnet_cifar.MaskBlock.register_buffer", "resnet_cifar.MaskBlock.thre.fill_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "avg", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x", ",", "x", ".", "mul", "(", "0", ")", ")", ",", "1", ")", "\n", "\n", "\n", "", "", "class", "DownsampleC", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "        ", "super", "(", "DownsampleC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "!=", "1", "or", "nIn", "!=", "nOut", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "DownsampleD", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "        ", "super", "(", "DownsampleD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "2", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.MaskBlock.forward": [[44, 64], ["resnet_cifar.MaskBlock.avg_pool().squeeze().squeeze", "resnet_cifar.MaskBlock.fc1", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.MaskBlock.fc2", "torch.relu", "torch.relu", "torch.relu", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.mean", "torch.clamp.mean", "torch.clamp.mean", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "resnet_cifar.MaskBlock.mask_sum.add_", "resnet_cifar.MaskBlock.avg_pool().squeeze", "torch.clamp.data.sum", "torch.clamp.data.sum", "torch.clamp.data.sum", "resnet_cifar.MaskBlock.avg_pool"], "methods", ["None"], ["self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "2", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "ResNetBasicblock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_a", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_a", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv_b", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_b", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.MaskedBasicblock.__init__": [[72, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar.MaskBlock", "resnet_cifar.MaskBlock"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["basicblock", "=", "self", ".", "bn_a", "(", "basicblock", ")", "\n", "basicblock", "=", "F", ".", "relu", "(", "basicblock", ",", "inplace", "=", "True", ")", "\n", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "## \u53ea\u7275\u626f\u5b83\u7684\u8f93\u5165\u5c42\u600e\u4e48\u780d\u7684\u95ee\u9898", "\n", "basicblock", "=", "self", ".", "bn_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "F", ".", "relu", "(", "residual", "+", "basicblock", ",", "inplace", "=", "True", ")", "\n", "\n", "\n", "", "", "class", "CifarResNet", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "depth", ",", "num_classes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_cifar.MaskedBasicblock.forward": [[89, 126], ["resnet_cifar.MaskedBasicblock.mb1", "_mask_list.append", "_lasso_loss.append", "_mask_before_list.append", "resnet_cifar.MaskedBasicblock.conv_a", "resnet_cifar.MaskedBasicblock.bn_a", "torch.relu", "torch.relu", "torch.relu", "_avg_fea_list.append", "resnet_cifar.MaskedBasicblock.mb2", "_mask_list.append", "_lasso_loss.append", "_mask_before_list.append", "resnet_cifar.MaskedBasicblock.conv_b", "resnet_cifar.MaskedBasicblock.bn_b", "_avg_fea_list.append", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "mask1.unsqueeze().unsqueeze", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "mask2.unsqueeze().unsqueeze", "resnet_cifar.MaskedBasicblock.downsample", "torch.relu", "torch.relu", "torch.relu", "mask1.unsqueeze", "mask2.unsqueeze"], "methods", ["None"], ["        ", "super", "(", "CifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "print", "(", "'CifarResNet : Depth : {} , Layers for each block : {}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "conv_1_3x3", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "stage_1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layer_blocks", ",", "1", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "# m.bias.data.zero_()", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "#downsample = DownsampleA(self.inplanes, planes * block.expansion, stride)", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", ")", "\n", "", "layers", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.MaskBlock.__init__": [[22, 43], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "resnet_imagenet.MaskBlock.register_buffer", "resnet_imagenet.MaskBlock.register_buffer", "resnet_imagenet.MaskBlock.thre.fill_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["\n", "\n", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "\n", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.MaskBlock.forward": [[44, 64], ["resnet_imagenet.MaskBlock.avg_pool().squeeze().squeeze", "resnet_imagenet.MaskBlock.fc1", "torch.relu", "torch.relu", "torch.relu", "resnet_imagenet.MaskBlock.fc2", "torch.relu", "torch.relu", "torch.relu", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.mean", "torch.clamp.mean", "torch.clamp.mean", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "resnet_imagenet.MaskBlock.mask_sum.add_", "resnet_imagenet.MaskBlock.avg_pool().squeeze", "torch.clamp.data.sum", "torch.clamp.data.sum", "torch.clamp.data.sum", "resnet_imagenet.MaskBlock.avg_pool"], "methods", ["None"], ["        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.SimiBlock.__init__": [[66, 74], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.SimiBlock.forward": [[75, 80], ["resnet_imagenet.SimiBlock.avg_pool().squeeze().squeeze", "resnet_imagenet.SimiBlock.avg_pool().squeeze", "resnet_imagenet.SimiBlock.avg_pool"], "methods", ["None"], ["# self.relu = nn.ReLU(inplace=False)", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.MaskedBasicblock.__init__": [[90, 104], ["torch.Module.__init__", "resnet_imagenet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_imagenet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_imagenet.MaskBlock", "resnet_imagenet.MaskBlock"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__", "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.conv3x3", "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.conv3x3"], ["\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.models.resnet_imagenet.MaskedBasicblock.forward": [[106, 147], ["resnet_imagenet.MaskedBasicblock.mb1", "_mask_list.append", "_lasso_loss.append", "_mask_before_list.append", "resnet_imagenet.MaskedBasicblock.conv1", "resnet_imagenet.MaskedBasicblock.bn1", "resnet_imagenet.MaskedBasicblock.relu", "_avg_fea_list.append", "resnet_imagenet.MaskedBasicblock.mb2", "_mask_list.append", "_lasso_loss.append", "_mask_before_list.append", "resnet_imagenet.MaskedBasicblock.conv2", "resnet_imagenet.MaskedBasicblock.bn2", "_avg_fea_list.append", "resnet_imagenet.MaskedBasicblock.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "mask1.unsqueeze().unsqueeze", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "mask2.unsqueeze().unsqueeze", "resnet_imagenet.MaskedBasicblock.downsample", "mask1.unsqueeze", "mask2.unsqueeze"], "methods", ["None"], ["super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_7x7", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1_7x7", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.models.ResidualBlock.__init__": [[7, 19], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "conv_block", "=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_features", ",", "in_features", ",", "3", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "in_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_features", ",", "in_features", ",", "3", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "in_features", ")", "]", "\n", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.models.ResidualBlock.forward": [[20, 22], ["models.ResidualBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.models.Generator.__init__": [[24, 64], ["torch.Module.__init__", "int", "int", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "models.ResidualBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "compression_ratio", "=", "1", ",", "n_residual_blocks", "=", "9", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "first_conv_out", "=", "int", "(", "64", "*", "compression_ratio", ")", "\n", "# Initial convolution block       ", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "first_conv_out", ",", "7", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "first_conv_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "# Downsampling", "\n", "in_features", "=", "int", "(", "64", "*", "compression_ratio", ")", "\n", "out_features", "=", "in_features", "*", "2", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "model", "+=", "[", "nn", ".", "Conv2d", "(", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_features", "=", "out_features", "\n", "out_features", "=", "in_features", "*", "2", "\n", "\n", "# Residual blocks", "\n", "", "for", "_", "in", "range", "(", "n_residual_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResidualBlock", "(", "in_features", ")", "]", "\n", "\n", "# Upsampling", "\n", "", "out_features", "=", "in_features", "//", "2", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_features", "=", "out_features", "\n", "out_features", "=", "in_features", "//", "2", "\n", "\n", "# Output layer", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_features", ",", "output_nc", ",", "7", ")", ",", "#nn.Conv2d(64, output_nc, 7)", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.models.Generator.forward": [[65, 67], ["models.Generator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.models.Discriminator.__init__": [[69, 94], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# A bunch of convolutions one after another", "\n", "model", "=", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "64", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "4", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "#self.model_feature_extract=nn.Sequential(*model)", "\n", "\n", "# FCN classification layer", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "4", ",", "padding", "=", "1", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.models.Discriminator.forward": [[96, 103], ["models.Discriminator.model", "torch.avg_pool2d().view", "torch.avg_pool2d().view", "torch.avg_pool2d", "torch.avg_pool2d", "models.Discriminator.size", "models.Discriminator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "\n", "\n", "# Average pooling and flatten", "\n", "return", "F", ".", "avg_pool2d", "(", "x", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "view", "(", "x", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.models_prune.Generator_Prune.__init__": [[47, 101], ["torch.Module.__init__", "int", "int", "int", "int", "int", "int", "range", "int", "int", "torch.Sequential", "sum", "torch.ReflectionPad2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.ReLU", "sum", "sum", "torch.Conv2d", "torch.InstanceNorm2d", "torch.ReLU", "sum", "sum", "torch.Conv2d", "torch.InstanceNorm2d", "torch.ReLU", "sum", "sum", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.ReLU", "sum", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Tanh", "models.ResidualBlock"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg_mask", ",", "n_residual_blocks", "=", "9", ")", ":", "\n", "        ", "super", "(", "Generator_Prune", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "first_conv_out", "=", "int", "(", "sum", "(", "cfg_mask", "[", "0", "]", ")", ")", "\n", "# Initial convolution block       ", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "3", ",", "first_conv_out", ",", "7", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "first_conv_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "# Downsampling", "\n", "in_features", "=", "int", "(", "sum", "(", "cfg_mask", "[", "0", "]", ")", ")", "\n", "out_features", "=", "int", "(", "sum", "(", "cfg_mask", "[", "1", "]", ")", ")", "\n", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_features", "=", "int", "(", "sum", "(", "cfg_mask", "[", "1", "]", ")", ")", "\n", "out_features", "=", "int", "(", "sum", "(", "cfg_mask", "[", "2", "]", ")", ")", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "in_features", "=", "int", "(", "sum", "(", "cfg_mask", "[", "2", "]", ")", ")", "\n", "\n", "\n", "# Residual blocks", "\n", "for", "_", "in", "range", "(", "n_residual_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResidualBlock", "(", "in_features", ")", "]", "\n", "\n", "# Upsampling", "\n", "", "out_features", "=", "int", "(", "sum", "(", "cfg_mask", "[", "21", "]", ")", ")", "\n", "\n", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_features", "=", "out_features", "\n", "out_features", "=", "int", "(", "sum", "(", "cfg_mask", "[", "22", "]", ")", ")", "\n", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "\n", "\n", "# Output layer", "\n", "in_features", "=", "out_features", "\n", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_features", ",", "3", ",", "7", ")", ",", "#nn.Conv2d(64, output_nc, 7)", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.models_prune.Generator_Prune.forward": [[102, 104], ["models_prune.Generator_Prune.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.models_prune.compute_layer_mask": [[23, 45], ["cfg_mask.append", "cfg_mask.append", "range", "cfg_mask.append", "cfg_mask.append", "cfg_mask.append", "cfg_mask.append", "numpy.ones"], "function", ["None"], ["", "def", "compute_layer_mask", "(", "mask", ",", "mask_chns", ")", ":", "\n", "    ", "cfg_mask", "=", "[", "]", "\n", "start_id", "=", "0", "\n", "end_id", "=", "start_id", "+", "mask_chns", "[", "0", "]", "\n", "\n", "cfg_mask", ".", "append", "(", "mask", "[", ":", "end_id", "]", ")", "\n", "start_id", "=", "end_id", "\n", "end_id", "=", "start_id", "+", "mask_chns", "[", "1", "]", "\n", "cfg_mask", ".", "append", "(", "mask", "[", "start_id", ":", "end_id", "]", ")", "\n", "start_id", "=", "end_id", "\n", "end_id", "=", "start_id", "+", "mask_chns", "[", "2", "]", "\n", "for", "i", "in", "range", "(", "19", ")", ":", "\n", "        ", "cfg_mask", ".", "append", "(", "mask", "[", "start_id", ":", "end_id", "]", ")", "\n", "", "start_id", "=", "end_id", "\n", "end_id", "=", "start_id", "+", "mask_chns", "[", "3", "]", "\n", "cfg_mask", ".", "append", "(", "mask", "[", "start_id", ":", "end_id", "]", ")", "\n", "start_id", "=", "end_id", "\n", "end_id", "=", "start_id", "+", "mask_chns", "[", "4", "]", "\n", "cfg_mask", ".", "append", "(", "mask", "[", "start_id", ":", "end_id", "]", ")", "\n", "cfg_mask", ".", "append", "(", "np", ".", "ones", "(", "3", ")", ")", "\n", "\n", "return", "cfg_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.finetune.train_from_mask": [[68, 319], ["numpy.loadtxt", "numpy.loadtxt", "models_prune.compute_layer_mask", "models_prune.compute_layer_mask", "models.Generator", "models.Generator", "models_prune.Generator_Prune", "models_prune.Generator_Prune", "models.Discriminator", "models.Discriminator", "models.Generator.load_state_dict", "models.Generator.load_state_dict", "torch.nn.DataParallel().cuda.load_state_dict", "torch.nn.DataParallel().cuda.load_state_dict", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.ones", "torch.ones", "zip", "torch.ones", "torch.ones", "zip", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "Tensor", "Tensor", "torch.autograd.Variable", "torch.autograd.Variable", "utils.ReplayBuffer", "utils.ReplayBuffer", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.utils.data.DataLoader", "range", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "models.Generator.modules", "torch.nn.DataParallel().cuda.modules", "isinstance", "models.Generator.modules", "torch.nn.DataParallel().cuda.modules", "isinstance", "Tensor().fill_", "Tensor().fill_", "itertools.chain", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "datasets.ImageDataset", "enumerate", "print", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "numpy.squeeze", "numpy.squeeze", "print", "m0.weight.data[].clone", "w1[].clone", "w1[].clone.clone", "m0.bias.data[].clone", "isinstance", "numpy.squeeze", "numpy.squeeze", "print", "m0.weight.data[].clone", "w1[].clone", "w1[].clone.clone", "m0.bias.data[].clone", "isinstance", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters", "int", "torch.autograd.Variable", "torch.autograd.Variable", "torch.optim.Adam.zero_grad", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "torch.nn.DataParallel().cuda.", "loss_G.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.nn.DataParallel().cuda.", "torch.nn.MSELoss.", "utils.ReplayBuffer.push_and_pop", "torch.nn.DataParallel().cuda.", "torch.nn.MSELoss.", "loss_D_A.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.nn.DataParallel().cuda.", "torch.nn.MSELoss.", "utils.ReplayBuffer.push_and_pop", "torch.nn.DataParallel().cuda.", "torch.nn.MSELoss.", "loss_D_B.backward", "torch.optim.Adam.step", "torch.save", "torch.save", "torch.save", "torch.save", "numpy.argwhere", "numpy.argwhere", "len", "print", "print", "numpy.squeeze", "numpy.squeeze", "print", "m0.weight.data[].clone", "w1[].clone", "w1[].clone.clone", "m0.bias.data[].clone", "numpy.argwhere", "numpy.argwhere", "len", "print", "print", "numpy.squeeze", "numpy.squeeze", "print", "m0.weight.data[].clone", "w1[].clone", "w1[].clone.clone", "m0.bias.data[].clone", "Tensor", "Tensor", "utils.LambdaLR", "utils.LambdaLR", "utils.LambdaLR", "Tensor.copy_", "Tensor.copy_", "torch.nn.L1Loss.", "torch.nn.L1Loss.", "torch.nn.MSELoss.", "torch.nn.MSELoss.", "torch.nn.L1Loss.", "torch.nn.L1Loss.", "fake_A_buffer.push_and_pop.detach", "fake_B_buffer.push_and_pop.detach", "torch.nn.DataParallel().cuda.module.state_dict", "torch.nn.DataParallel().cuda.module.state_dict", "numpy.asarray", "numpy.asarray", "numpy.argwhere", "numpy.argwhere", "len", "numpy.asarray", "numpy.asarray", "numpy.argwhere", "numpy.argwhere", "len", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist"], "function", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.models_prune.compute_layer_mask", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.models_prune.compute_layer_mask", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.LambdaLR.step", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.LambdaLR.step", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.LambdaLR.step", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.LambdaLR.step", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.ReplayBuffer.push_and_pop", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.LambdaLR.step", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.ReplayBuffer.push_and_pop", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.LambdaLR.step"], ["", "def", "train_from_mask", "(", ")", ":", "\n", "\n", "#load best fitness binary masks ", "\n", "    ", "mask_input_A2B", "=", "np", ".", "loadtxt", "(", "\"/cache/GA/txt/best_fitness_A2B.txt\"", ")", "\n", "mask_input_B2A", "=", "np", ".", "loadtxt", "(", "\"/cache/GA/txt/best_fitness_B2A.txt\"", ")", "\n", "\n", "\n", "cfg_mask_A2B", "=", "compute_layer_mask", "(", "mask_input_A2B", ",", "mask_chns", ")", "\n", "cfg_mask_B2A", "=", "compute_layer_mask", "(", "mask_input_B2A", ",", "mask_chns", ")", "\n", "\n", "\n", "netG_B2A", "=", "Generator", "(", "opt", ".", "output_nc", ",", "opt", ".", "input_nc", ")", "\n", "netG_A2B", "=", "Generator", "(", "opt", ".", "output_nc", ",", "opt", ".", "input_nc", ")", "\n", "model_A2B", "=", "Generator_Prune", "(", "cfg_mask_A2B", ")", "\n", "model_B2A", "=", "Generator_Prune", "(", "cfg_mask_B2A", ")", "\n", "netD_A", "=", "Discriminator", "(", "opt", ".", "input_nc", ")", "\n", "netD_B", "=", "Discriminator", "(", "opt", ".", "output_nc", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "netG_A2B", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/log/output/netG_A2B.pth'", ")", ")", "\n", "netG_B2A", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/log/output/netG_B2A.pth'", ")", ")", "\n", "\n", "netD_A", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/log/output/netD_A.pth'", ")", ")", "\n", "netD_B", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/log/output/netD_B.pth'", ")", ")", "\n", "\n", "\n", "\n", "\n", "\n", "# Lossess", "\n", "criterion_GAN", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "criterion_cycle", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "criterion_identity", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "\n", "\n", "\n", "layer_id_in_cfg", "=", "0", "\n", "start_mask", "=", "torch", ".", "ones", "(", "3", ")", "\n", "end_mask", "=", "cfg_mask_A2B", "[", "layer_id_in_cfg", "]", "\n", "\n", "for", "[", "m0", ",", "m1", "]", "in", "zip", "(", "netG_A2B", ".", "modules", "(", ")", ",", "model_A2B", ".", "modules", "(", ")", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "m0", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "idx0", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "start_mask", ")", ")", ")", "\n", "idx1", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "end_mask", ")", ")", ")", "\n", "print", "(", "'In shape: {:d}, Out shape {:d}.'", ".", "format", "(", "idx0", ".", "size", ",", "idx1", ".", "size", ")", ")", "\n", "\n", "w1", "=", "m0", ".", "weight", ".", "data", "[", ":", ",", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "w1", "=", "w1", "[", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "m1", ".", "weight", ".", "data", "=", "w1", ".", "clone", "(", ")", "\n", "\n", "m1", ".", "bias", ".", "data", "=", "m0", ".", "bias", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "\n", "layer_id_in_cfg", "+=", "1", "\n", "start_mask", "=", "end_mask", "\n", "if", "layer_id_in_cfg", "<", "len", "(", "cfg_mask_A2B", ")", ":", "# do not change in Final FC", "\n", "                ", "end_mask", "=", "cfg_mask_A2B", "[", "layer_id_in_cfg", "]", "\n", "print", "(", "layer_id_in_cfg", ")", "\n", "", "", "elif", "isinstance", "(", "m0", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "            ", "print", "(", "'Into ConvTranspose...'", ")", "\n", "idx0", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "start_mask", ")", ")", ")", "\n", "idx1", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "end_mask", ")", ")", ")", "\n", "print", "(", "'In shape: {:d}, Out shape {:d}.'", ".", "format", "(", "idx0", ".", "size", ",", "idx1", ".", "size", ")", ")", "\n", "\n", "\n", "w1", "=", "m0", ".", "weight", ".", "data", "[", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "w1", "=", "w1", "[", ":", ",", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "m1", ".", "weight", ".", "data", "=", "w1", ".", "clone", "(", ")", "\n", "m1", ".", "bias", ".", "data", "=", "m0", ".", "bias", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "layer_id_in_cfg", "+=", "1", "\n", "start_mask", "=", "end_mask", "\n", "if", "layer_id_in_cfg", "<", "len", "(", "cfg_mask_A2B", ")", ":", "\n", "                ", "end_mask", "=", "cfg_mask_A2B", "[", "layer_id_in_cfg", "]", "\n", "\n", "", "", "", "layer_id_in_cfg", "=", "0", "\n", "start_mask", "=", "torch", ".", "ones", "(", "3", ")", "\n", "end_mask", "=", "cfg_mask_B2A", "[", "layer_id_in_cfg", "]", "\n", "\n", "for", "[", "m0", ",", "m1", "]", "in", "zip", "(", "netG_B2A", ".", "modules", "(", ")", ",", "model_B2A", ".", "modules", "(", ")", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "m0", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "idx0", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "start_mask", ")", ")", ")", "\n", "idx1", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "end_mask", ")", ")", ")", "\n", "print", "(", "'In shape: {:d}, Out shape {:d}.'", ".", "format", "(", "idx0", ".", "size", ",", "idx1", ".", "size", ")", ")", "\n", "\n", "w1", "=", "m0", ".", "weight", ".", "data", "[", ":", ",", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "w1", "=", "w1", "[", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "m1", ".", "weight", ".", "data", "=", "w1", ".", "clone", "(", ")", "\n", "\n", "m1", ".", "bias", ".", "data", "=", "m0", ".", "bias", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "\n", "layer_id_in_cfg", "+=", "1", "\n", "start_mask", "=", "end_mask", "\n", "if", "layer_id_in_cfg", "<", "len", "(", "cfg_mask_B2A", ")", ":", "\n", "                ", "end_mask", "=", "cfg_mask_B2A", "[", "layer_id_in_cfg", "]", "\n", "print", "(", "layer_id_in_cfg", ")", "\n", "", "", "elif", "isinstance", "(", "m0", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "            ", "print", "(", "'Into ConvTranspose...'", ")", "\n", "idx0", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "start_mask", ")", ")", ")", "\n", "idx1", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "end_mask", ")", ")", ")", "\n", "print", "(", "'In shape: {:d}, Out shape {:d}.'", ".", "format", "(", "idx0", ".", "size", ",", "idx1", ".", "size", ")", ")", "\n", "\n", "w1", "=", "m0", ".", "weight", ".", "data", "[", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "w1", "=", "w1", "[", ":", ",", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "m1", ".", "weight", ".", "data", "=", "w1", ".", "clone", "(", ")", "\n", "m1", ".", "bias", ".", "data", "=", "m0", ".", "bias", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "clone", "(", ")", "\n", "layer_id_in_cfg", "+=", "1", "\n", "start_mask", "=", "end_mask", "\n", "if", "layer_id_in_cfg", "<", "len", "(", "cfg_mask_B2A", ")", ":", "\n", "                ", "end_mask", "=", "cfg_mask_B2A", "[", "layer_id_in_cfg", "]", "\n", "\n", "\n", "\n", "\n", "# Dataset loader", "\n", "\n", "", "", "", "netD_A", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netD_A", ")", ".", "cuda", "(", ")", "\n", "netD_B", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netD_B", ")", ".", "cuda", "(", ")", "\n", "model_A2B", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model_A2B", ")", ".", "cuda", "(", ")", "\n", "model_B2A", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model_B2A", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "opt", ".", "cuda", "else", "torch", ".", "Tensor", "\n", "input_A", "=", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "input_nc", ",", "opt", ".", "size", ",", "opt", ".", "size", ")", "\n", "input_B", "=", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "output_nc", ",", "opt", ".", "size", ",", "opt", ".", "size", ")", "\n", "target_real", "=", "Variable", "(", "Tensor", "(", "opt", ".", "batchSize", ")", ".", "fill_", "(", "1.0", ")", ",", "requires_grad", "=", "False", ")", "\n", "target_fake", "=", "Variable", "(", "Tensor", "(", "opt", ".", "batchSize", ")", ".", "fill_", "(", "0.0", ")", ",", "requires_grad", "=", "False", ")", "\n", "fake_A_buffer", "=", "ReplayBuffer", "(", ")", "\n", "fake_B_buffer", "=", "ReplayBuffer", "(", ")", "\n", "\n", "lamda_loss_ID", "=", "5.0", "\n", "lamda_loss_G", "=", "1.0", "\n", "lamda_loss_cycle", "=", "10.0", "\n", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "model_A2B", ".", "parameters", "(", ")", ",", "model_B2A", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "optimizer_D_A", "=", "torch", ".", "optim", ".", "Adam", "(", "netD_A", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "optimizer_D_B", "=", "torch", ".", "optim", ".", "Adam", "(", "netD_B", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "lr_scheduler_G", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer_G", ",", "lr_lambda", "=", "LambdaLR", "(", "opt", ".", "n_epochs", ",", "opt", ".", "epoch", ",", "opt", ".", "decay_epoch", ")", ".", "step", ")", "\n", "lr_scheduler_D_A", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer_D_A", ",", "lr_lambda", "=", "LambdaLR", "(", "opt", ".", "n_epochs", ",", "opt", ".", "epoch", ",", "opt", ".", "decay_epoch", ")", ".", "step", ")", "\n", "lr_scheduler_D_B", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer_D_B", ",", "lr_lambda", "=", "LambdaLR", "(", "opt", ".", "n_epochs", ",", "opt", ".", "epoch", ",", "opt", ".", "decay_epoch", ")", ".", "step", ")", "\n", "\n", "transforms_", "=", "[", "\n", "transforms", ".", "Resize", "(", "int", "(", "opt", ".", "size", "*", "1.12", ")", ",", "Image", ".", "BICUBIC", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "opt", ".", "size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "\n", "\n", "\n", "dataloader", "=", "DataLoader", "(", "ImageDataset", "(", "opt", ".", "dataroot", ",", "transforms_", "=", "transforms_", ",", "unaligned", "=", "True", ",", "mode", "=", "'train'", ")", ",", "batch_size", "=", "opt", ".", "batchSize", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "\n", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "epoch", ",", "opt", ".", "n_epochs", ")", ":", "\n", "        ", "for", "i", ",", "batch", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\n", "# Set model input", "\n", "            ", "real_A", "=", "Variable", "(", "input_A", ".", "copy_", "(", "batch", "[", "'A'", "]", ")", ")", "\n", "real_B", "=", "Variable", "(", "input_B", ".", "copy_", "(", "batch", "[", "'B'", "]", ")", ")", "\n", "\n", "###### Generators A2B and B2A ######", "\n", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "\n", "# Identity loss", "\n", "# G_A2B(B) should equal B if real B is fed", "\n", "same_B", "=", "model_A2B", "(", "real_B", ")", "\n", "loss_identity_B", "=", "criterion_identity", "(", "same_B", ",", "real_B", ")", "*", "lamda_loss_ID", "#initial 5.0", "\n", "# G_B2A(A) should equal A if real A is fed", "\n", "same_A", "=", "model_B2A", "(", "real_A", ")", "\n", "loss_identity_A", "=", "criterion_identity", "(", "same_A", ",", "real_A", ")", "*", "lamda_loss_ID", "#initial 5.0", "\n", "\n", "# GAN loss", "\n", "fake_B", "=", "model_A2B", "(", "real_A", ")", "\n", "pred_fake", "=", "netD_B", "(", "fake_B", ")", "\n", "loss_GAN_A2B", "=", "criterion_GAN", "(", "pred_fake", ",", "target_real", ")", "*", "lamda_loss_G", "#initial 1.0", "\n", "\n", "fake_A", "=", "model_B2A", "(", "real_B", ")", "\n", "pred_fake", "=", "netD_A", "(", "fake_A", ")", "\n", "loss_GAN_B2A", "=", "criterion_GAN", "(", "pred_fake", ",", "target_real", ")", "*", "lamda_loss_G", "#initial 1.0", "\n", "\n", "# Cycle loss", "\n", "recovered_A", "=", "model_B2A", "(", "fake_B", ")", "\n", "loss_cycle_ABA", "=", "criterion_cycle", "(", "recovered_A", ",", "real_A", ")", "*", "lamda_loss_cycle", "#initial 10.0", "\n", "\n", "recovered_B", "=", "model_A2B", "(", "fake_A", ")", "\n", "loss_cycle_BAB", "=", "criterion_cycle", "(", "recovered_B", ",", "real_B", ")", "*", "lamda_loss_cycle", "#initial 10.0", "\n", "\n", "# Total loss", "\n", "loss_G", "=", "loss_identity_A", "+", "loss_identity_B", "+", "loss_GAN_A2B", "+", "loss_GAN_B2A", "+", "loss_cycle_ABA", "+", "loss_cycle_BAB", "\n", "loss_G", ".", "backward", "(", ")", "\n", "\n", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "###### Discriminator A ######", "\n", "optimizer_D_A", ".", "zero_grad", "(", ")", "\n", "\n", "# Real loss", "\n", "pred_real", "=", "netD_A", "(", "real_A", ")", "\n", "loss_D_real", "=", "criterion_GAN", "(", "pred_real", ",", "target_real", ")", "\n", "\n", "# Fake loss", "\n", "fake_A", "=", "fake_A_buffer", ".", "push_and_pop", "(", "fake_A", ")", "\n", "pred_fake", "=", "netD_A", "(", "fake_A", ".", "detach", "(", ")", ")", "\n", "loss_D_fake", "=", "criterion_GAN", "(", "pred_fake", ",", "target_fake", ")", "\n", "\n", "# Total loss", "\n", "loss_D_A", "=", "(", "loss_D_real", "+", "loss_D_fake", ")", "*", "0.5", "\n", "loss_D_A", ".", "backward", "(", ")", "\n", "\n", "optimizer_D_A", ".", "step", "(", ")", "\n", "###################################", "\n", "\n", "###### Discriminator B ######", "\n", "optimizer_D_B", ".", "zero_grad", "(", ")", "\n", "\n", "# Real loss", "\n", "pred_real", "=", "netD_B", "(", "real_B", ")", "\n", "loss_D_real", "=", "criterion_GAN", "(", "pred_real", ",", "target_real", ")", "\n", "\n", "# Fake loss", "\n", "fake_B", "=", "fake_B_buffer", ".", "push_and_pop", "(", "fake_B", ")", "\n", "pred_fake", "=", "netD_B", "(", "fake_B", ".", "detach", "(", ")", ")", "\n", "loss_D_fake", "=", "criterion_GAN", "(", "pred_fake", ",", "target_fake", ")", "\n", "\n", "# Total loss", "\n", "loss_D_B", "=", "(", "loss_D_real", "+", "loss_D_fake", ")", "*", "0.5", "\n", "loss_D_B", ".", "backward", "(", ")", "\n", "\n", "optimizer_D_B", ".", "step", "(", ")", "\n", "\n", "\n", "", "print", "(", "\"epoch:%d  Loss G:%4f  LossID_A:%4f LossID_B:%4f  Loss_G_A2B:%4f  Loss_G_B2A:%4f  Loss_Cycle_ABA:%4f  Loss_Cycle_BAB:%4f \"", "%", "(", "epoch", ",", "loss_G", ",", "loss_identity_A", ",", "loss_identity_B", ",", "loss_GAN_A2B", ",", "loss_GAN_B2A", ",", "loss_cycle_ABA", ",", "loss_cycle_BAB", ")", ")", "\n", "\n", "# Update learning rates", "\n", "lr_scheduler_G", ".", "step", "(", ")", "\n", "lr_scheduler_D_A", ".", "step", "(", ")", "\n", "lr_scheduler_D_B", ".", "step", "(", ")", "\n", "\n", "if", "epoch", "%", "20", "==", "0", ":", "\n", "\n", "# Save models checkpoints", "\n", "            ", "torch", ".", "save", "(", "model_A2B", ".", "module", ".", "state_dict", "(", ")", ",", "'/cache/log/output/A2B_%d.pth'", "%", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "model_B2A", ".", "module", ".", "state_dict", "(", ")", ",", "'/cache/log/output/B2A_%d.pth'", "%", "(", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.search.default_collate_override": [[19, 22], ["default_collate_func"], "function", ["None"], ["def", "default_collate_override", "(", "batch", ")", ":", "\n", "  ", "dataloader", ".", "_use_shared_memory", "=", "False", "\n", "return", "default_collate_func", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.search.caculate_fitness_for_first_time": [[94, 296], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "models_prune.compute_layer_mask", "numpy.array", "numpy.ones", "models.Generator.modules", "Tensor", "Tensor", "torch.autograd.Variable", "torch.autograd.Variable", "utils.ReplayBuffer", "utils.ReplayBuffer", "models.Generator", "models.Discriminator", "models.Generator.cuda", "models.Discriminator.cuda", "models.Generator", "models.Generator.cuda", "models.Generator.load_state_dict", "models.Discriminator.load_state_dict", "models.Generator.load_state_dict", "models.Generator.eval", "models.Discriminator.eval", "models.Generator.eval", "isinstance", "Tensor().fill_", "Tensor().fill_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.utils.data.DataLoader", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "models.Generator", "models.Discriminator", "models.Generator.cuda", "models.Discriminator.cuda", "models.Generator", "models.Generator.cuda", "models.Generator.load_state_dict", "models.Discriminator.load_state_dict", "models.Generator.load_state_dict", "models.Generator.eval", "models.Discriminator.eval", "models.Generator.eval", "numpy.ones", "numpy.ones", "numpy.squeeze", "numpy.squeeze", "numpy.argwhere", "isinstance", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "datasets.ImageDataset", "enumerate", "print", "print", "print", "print", "print", "fitness.item", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "numpy.ones", "numpy.ones", "numpy.argwhere", "numpy.argwhere", "numpy.resize", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "numpy.asarray", "len", "numpy.ones", "numpy.ones", "numpy.squeeze", "numpy.squeeze", "Tensor", "Tensor", "torch.autograd.Variable", "models.Generator.", "models.Generator.", "models.Discriminator.", "models.Discriminator.", "torch.nn.MSELoss.", "enumerate", "print", "print", "print", "print", "print", "fitness.item", "numpy.asarray", "numpy.asarray", "np.squeeze.tolist", "numpy.ones", "numpy.ones", "numpy.argwhere", "numpy.argwhere", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "Tensor.copy_", "model.detach", "netG_A2B.detach", "netD_A.detach", "netD_A.detach", "Loss_resemble_G.detach", "sum", "sum", "torch.autograd.Variable", "models.Generator.", "models.Generator.", "models.Discriminator.", "models.Discriminator.", "torch.nn.MSELoss.", "np.squeeze.tolist", "np.squeeze.tolist", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.ones", "np.squeeze.tolist", "numpy.asarray", "numpy.asarray", "np.squeeze.tolist", "sum", "Tensor.copy_", "model.detach", "netG_B2A.detach", "netD_A.detach", "netD_A.detach", "Loss_resemble_G.detach", "sum", "sum", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "np.squeeze.tolist", "numpy.ones", "sum", "np.squeeze.tolist", "np.squeeze.tolist", "numpy.ones", "numpy.ones", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.models_prune.compute_layer_mask"], ["def", "caculate_fitness_for_first_time", "(", "mask_input", ",", "gpu_id", ",", "fitness_id", ",", "A2B_or_B2A", ")", ":", "\n", "\n", "\n", "###### Definition of variables ######", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "gpu_id", ")", "\n", "#print(\"GPU_ID is%d\\n\"%(gpu_id))", "\n", "if", "A2B_or_B2A", "==", "'A2B'", ":", "\n", "        ", "netG_A2B", "=", "Generator", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ")", "\n", "netD_B", "=", "Discriminator", "(", "opt", ".", "output_nc", ")", "\n", "netG_A2B", ".", "cuda", "(", "gpu_id", ")", "\n", "netD_B", ".", "cuda", "(", "gpu_id", ")", "\n", "model", "=", "Generator", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ")", "\n", "model", ".", "cuda", "(", "gpu_id", ")", "\n", "netG_A2B", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/models/netG_A2B.pth'", ")", ")", "\n", "netD_B", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/models/netD_B.pth'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/models/netG_A2B.pth'", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "netD_B", ".", "eval", "(", ")", "\n", "netG_A2B", ".", "eval", "(", ")", "\n", "\n", "", "elif", "A2B_or_B2A", "==", "'B2A'", ":", "\n", "        ", "netG_B2A", "=", "Generator", "(", "opt", ".", "output_nc", ",", "opt", ".", "input_nc", ")", "\n", "netD_A", "=", "Discriminator", "(", "opt", ".", "input_nc", ")", "\n", "netG_B2A", ".", "cuda", "(", "gpu_id", ")", "\n", "netD_A", ".", "cuda", "(", "gpu_id", ")", "\n", "model", "=", "Generator", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ")", "\n", "model", ".", "cuda", "(", "gpu_id", ")", "\n", "netG_B2A", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/models/netG_B2A.pth'", ")", ")", "\n", "netD_A", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/models/netD_A.pth'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/models/netG_B2A.pth'", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "netD_A", ".", "eval", "(", ")", "\n", "netG_B2A", ".", "eval", "(", ")", "\n", "\n", "", "criterion_GAN", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "criterion_cycle", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "criterion_identity", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "fitness", "=", "0", "\n", "cfg_mask", "=", "compute_layer_mask", "(", "mask_input", ",", "mask_chns", ")", "\n", "cfg_full_mask", "=", "[", "y", "for", "x", "in", "cfg_mask", "for", "y", "in", "x", "]", "\n", "cfg_full_mask", "=", "np", ".", "array", "(", "cfg_full_mask", ")", "\n", "cfg_id", "=", "0", "\n", "start_mask", "=", "np", ".", "ones", "(", "3", ")", "\n", "end_mask", "=", "cfg_mask", "[", "cfg_id", "]", "\n", "\n", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "m", ".", "weight", ".", "data", ".", "shape", ")", "\n", "\n", "mask_bias", "=", "np", ".", "ones", "(", "m", ".", "bias", ".", "data", ".", "shape", ")", "\n", "\n", "cfg_mask_start", "=", "np", ".", "ones", "(", "start_mask", ".", "shape", ")", "-", "start_mask", "\n", "cfg_mask_end", "=", "np", ".", "ones", "(", "end_mask", ".", "shape", ")", "-", "end_mask", "\n", "idx0", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "cfg_mask_start", ")", ")", ")", "\n", "idx1", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "cfg_mask_end", ")", ")", ")", "\n", "if", "idx1", ".", "size", "==", "1", ":", "\n", "                ", "idx1", "=", "np", ".", "resize", "(", "idx1", ",", "(", "1", ",", ")", ")", "\n", "\n", "", "mask", "[", ":", ",", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", "=", "0", "\n", "mask", "[", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", "=", "0", "\n", "mask_bias", "[", "idx1", ".", "tolist", "(", ")", "]", "=", "0", "\n", "\n", "\n", "m", ".", "weight", ".", "data", "=", "m", ".", "weight", ".", "data", "*", "torch", ".", "FloatTensor", "(", "mask", ")", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "\n", "\n", "m", ".", "bias", ".", "data", "=", "m", ".", "bias", ".", "data", "*", "torch", ".", "FloatTensor", "(", "mask_bias", ")", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "idx_mask", "=", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "np", ".", "ones", "(", "mask", ".", "shape", ")", "-", "mask", ")", ")", "\n", "\n", "m", ".", "weight", ".", "data", "[", ":", ",", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", ".", "requires_grad", "=", "False", "\n", "m", ".", "weight", ".", "data", "[", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "requires_grad", "=", "False", "\n", "\n", "cfg_id", "+=", "1", "\n", "start_mask", "=", "end_mask", "\n", "if", "cfg_id", "<", "len", "(", "cfg_mask", ")", ":", "\n", "                ", "end_mask", "=", "cfg_mask", "[", "cfg_id", "]", "\n", "", "continue", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "m", ".", "weight", ".", "data", ".", "shape", ")", "\n", "mask_bias", "=", "np", ".", "ones", "(", "m", ".", "bias", ".", "data", ".", "shape", ")", "\n", "\n", "cfg_mask_start", "=", "np", ".", "ones", "(", "start_mask", ".", "shape", ")", "-", "start_mask", "\n", "cfg_mask_end", "=", "np", ".", "ones", "(", "end_mask", ".", "shape", ")", "-", "end_mask", "\n", "\n", "idx0", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "cfg_mask_start", ")", ")", ")", "\n", "idx1", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "cfg_mask_end", ")", ")", ")", "\n", "\n", "mask", "[", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", "=", "0", "\n", "\n", "mask", "[", ":", ",", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", "=", "0", "\n", "\n", "mask_bias", "[", "idx1", ".", "tolist", "(", ")", "]", "=", "0", "\n", "\n", "m", ".", "weight", ".", "data", "=", "m", ".", "weight", ".", "data", "*", "torch", ".", "FloatTensor", "(", "mask", ")", ".", "cuda", "(", "gpu_id", ")", "\n", "m", ".", "bias", ".", "data", "=", "m", ".", "bias", ".", "data", "*", "torch", ".", "FloatTensor", "(", "mask_bias", ")", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "m", ".", "weight", ".", "data", "[", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", ".", "requires_grad", "=", "False", "\n", "m", ".", "weight", ".", "data", "[", ":", ",", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "requires_grad", "=", "False", "\n", "\n", "cfg_id", "+=", "1", "\n", "start_mask", "=", "end_mask", "\n", "end_mask", "=", "cfg_mask", "[", "cfg_id", "]", "\n", "continue", "\n", "\n", "# Dataset loader", "\n", "", "", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "opt", ".", "cuda", "else", "torch", ".", "Tensor", "\n", "input_A", "=", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "input_nc", ",", "opt", ".", "size", ",", "opt", ".", "size", ")", "\n", "input_B", "=", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "output_nc", ",", "opt", ".", "size", ",", "opt", ".", "size", ")", "\n", "target_real", "=", "Variable", "(", "Tensor", "(", "opt", ".", "batchSize", ")", ".", "fill_", "(", "1.0", ")", ",", "requires_grad", "=", "False", ")", "\n", "target_fake", "=", "Variable", "(", "Tensor", "(", "opt", ".", "batchSize", ")", ".", "fill_", "(", "0.0", ")", ",", "requires_grad", "=", "False", ")", "\n", "fake_A_buffer", "=", "ReplayBuffer", "(", ")", "\n", "fake_B_buffer", "=", "ReplayBuffer", "(", ")", "\n", "\n", "lamda_loss_ID", "=", "5.0", "\n", "lamda_loss_G", "=", "1.0", "\n", "lamda_loss_cycle", "=", "10.0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "transforms_", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "\n", "\n", "dataloader", "=", "DataLoader", "(", "ImageDataset", "(", "opt", ".", "dataroot", ",", "transforms_", "=", "transforms_", ",", "mode", "=", "'val'", ")", ",", "\n", "batch_size", "=", "opt", ".", "batchSize", ",", "shuffle", "=", "False", ",", "drop_last", "=", "True", ")", "\n", "\n", "\n", "\n", "\n", "Loss_resemble_G", "=", "0", "\n", "if", "A2B_or_B2A", "==", "'A2B'", ":", "\n", "            ", "for", "i", ",", "batch", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "# Set model input", "\n", "                ", "real_A", "=", "Variable", "(", "input_A", ".", "copy_", "(", "batch", "[", "'A'", "]", ")", ")", "\n", "\n", "\n", "\n", "# GAN loss", "\n", "fake_B", "=", "model", "(", "real_A", ")", "\n", "fake_B_full_model", "=", "netG_A2B", "(", "real_A", ")", "\n", "\n", "# Fake loss", "\n", "pred_fake", "=", "netD_B", "(", "fake_B", ".", "detach", "(", ")", ")", "\n", "\n", "\n", "pred_fake_full", "=", "netD_B", "(", "fake_B_full_model", ".", "detach", "(", ")", ")", "\n", "\n", "loss_D_fake", "=", "criterion_GAN", "(", "pred_fake", ".", "detach", "(", ")", ",", "pred_fake_full", ".", "detach", "(", ")", ")", "\n", "Loss_resemble_G", "=", "Loss_resemble_G", "+", "loss_D_fake", "\n", "\n", "lambda_prune", "=", "0.001", "\n", "\n", "", "fitness", "=", "500", "/", "Loss_resemble_G", ".", "detach", "(", ")", "+", "sum", "(", "np", ".", "ones", "(", "cfg_full_mask", ".", "shape", ")", "-", "cfg_full_mask", ")", "*", "lambda_prune", "\n", "print", "(", "\"A2B first generation\"", ")", "\n", "print", "(", "\"GPU_ID is %d\"", "%", "(", "gpu_id", ")", ")", "\n", "print", "(", "\"channel num is: %d\"", "%", "(", "sum", "(", "cfg_full_mask", ")", ")", ")", "\n", "print", "(", "\"Loss_resemble_G is %f prune_loss is %f \"", "%", "(", "500", "/", "Loss_resemble_G", ",", "sum", "(", "np", ".", "ones", "(", "cfg_full_mask", ".", "shape", ")", "-", "cfg_full_mask", ")", ")", ")", "\n", "print", "(", "\"fitness is %f \\n\"", "%", "(", "fitness", ")", ")", "\n", "\n", "\n", "current_fitness_A2B", "[", "fitness_id", "]", "=", "fitness", ".", "item", "(", ")", "\n", "\n", "", "elif", "A2B_or_B2A", "==", "'B2A'", ":", "\n", "            ", "for", "i", ",", "batch", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\n", "                ", "real_B", "=", "Variable", "(", "input_B", ".", "copy_", "(", "batch", "[", "'B'", "]", ")", ")", "\n", "\n", "\n", "\n", "\n", "fake_A", "=", "model", "(", "real_B", ")", "\n", "fake_A_full_model", "=", "netG_B2A", "(", "real_B", ")", "\n", "\n", "\n", "\n", "pred_fake", "=", "netD_A", "(", "fake_A", ".", "detach", "(", ")", ")", "\n", "\n", "\n", "pred_fake_full", "=", "netD_A", "(", "fake_A_full_model", ".", "detach", "(", ")", ")", "\n", "\n", "\n", "loss_D_fake", "=", "criterion_GAN", "(", "pred_fake", ".", "detach", "(", ")", ",", "pred_fake_full", ".", "detach", "(", ")", ")", "\n", "Loss_resemble_G", "=", "Loss_resemble_G", "+", "loss_D_fake", "\n", "\n", "lambda_prune", "=", "0.001", "\n", "\n", "", "fitness", "=", "500", "/", "Loss_resemble_G", ".", "detach", "(", ")", "+", "sum", "(", "np", ".", "ones", "(", "cfg_full_mask", ".", "shape", ")", "-", "cfg_full_mask", ")", "*", "lambda_prune", "\n", "print", "(", "\"B2A first generation\"", ")", "\n", "print", "(", "\"GPU_ID is %d\"", "%", "(", "gpu_id", ")", ")", "\n", "print", "(", "\"channel num is: %d\"", "%", "(", "sum", "(", "cfg_full_mask", ")", ")", ")", "\n", "print", "(", "\"Loss_resemble_G is %f prune_loss is %f \"", "%", "(", "500", "/", "Loss_resemble_G", ",", "sum", "(", "np", ".", "ones", "(", "cfg_full_mask", ".", "shape", ")", "-", "cfg_full_mask", ")", ")", ")", "\n", "print", "(", "\"fitness is %f \\n\"", "%", "(", "fitness", ")", ")", "\n", "\n", "\n", "current_fitness_B2A", "[", "fitness_id", "]", "=", "fitness", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.search.caculate_fitness": [[298, 701], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "models.Generator", "models.Generator", "models.Discriminator", "models.Discriminator", "models.Discriminator.cuda", "models.Discriminator.cuda", "models.Generator.cuda", "models.Generator.cuda", "models.Generator.load_state_dict", "models.Generator.load_state_dict", "models.Discriminator.load_state_dict", "models.Discriminator.load_state_dict", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "models_prune.compute_layer_mask", "models_prune.compute_layer_mask", "numpy.array", "numpy.array", "numpy.ones", "models.Generator.modules", "numpy.ones", "models.Generator.modules", "Tensor", "Tensor", "torch.autograd.Variable", "torch.autograd.Variable", "utils.ReplayBuffer", "utils.ReplayBuffer", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.utils.data.DataLoader", "range", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "isinstance", "isinstance", "Tensor().fill_", "Tensor().fill_", "itertools.chain", "models.Discriminator.parameters", "models.Discriminator.parameters", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "datasets.ImageDataset", "enumerate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.utils.data.DataLoader", "numpy.ones", "numpy.ones", "numpy.squeeze", "numpy.squeeze", "numpy.argwhere", "isinstance", "numpy.ones", "numpy.ones", "numpy.squeeze", "numpy.squeeze", "numpy.argwhere", "isinstance", "filter", "filter", "int", "torch.autograd.Variable", "torch.autograd.Variable", "torch.optim.Adam.zero_grad", "models.Generator.", "models.Generator.", "models.Generator.", "models.Discriminator.", "models.Generator.", "models.Discriminator.", "models.Generator.", "models.Generator.", "loss_G.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "models.Discriminator.", "torch.nn.MSELoss.", "utils.ReplayBuffer.push_and_pop", "models.Discriminator.", "torch.nn.MSELoss.", "loss_D_A.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "models.Discriminator.", "torch.nn.MSELoss.", "utils.ReplayBuffer.push_and_pop", "models.Discriminator.", "torch.nn.MSELoss.", "loss_D_B.backward", "torch.optim.Adam.step", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "datasets.ImageDataset", "models.Generator", "models.Discriminator", "models.Generator.cuda", "models.Discriminator.cuda", "models.Generator.eval", "models.Discriminator.eval", "models.Generator.eval", "models.Discriminator.load_state_dict", "models.Generator.load_state_dict", "enumerate", "print", "print", "print", "print", "print", "fitness.item", "models.Generator", "models.Discriminator", "models.Generator.cuda", "models.Discriminator.cuda", "models.Generator.eval", "models.Discriminator.eval", "models.Generator.eval", "models.Discriminator.load_state_dict", "models.Generator.load_state_dict", "enumerate", "print", "print", "print", "print", "print", "fitness.item", "numpy.ones", "numpy.ones", "numpy.argwhere", "numpy.argwhere", "numpy.resize", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "numpy.asarray", "len", "numpy.ones", "numpy.ones", "numpy.squeeze", "numpy.squeeze", "numpy.ones", "numpy.ones", "numpy.argwhere", "numpy.argwhere", "numpy.resize", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "numpy.asarray", "len", "numpy.ones", "numpy.ones", "numpy.squeeze", "numpy.squeeze", "Tensor", "Tensor", "models.Generator.parameters", "models.Generator.parameters", "Tensor.copy_", "Tensor.copy_", "torch.nn.L1Loss.", "torch.nn.L1Loss.", "torch.nn.MSELoss.", "torch.nn.MSELoss.", "torch.nn.L1Loss.", "torch.nn.L1Loss.", "model_B2A.detach", "model_A2B.detach", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.autograd.Variable", "models.Generator.", "models.Generator.", "models.Generator.", "models.Discriminator.", "models.Discriminator.", "torch.nn.MSELoss.", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.autograd.Variable", "models.Generator.", "models.Generator.", "models.Generator.", "models.Discriminator.", "models.Discriminator.", "torch.nn.MSELoss.", "numpy.asarray", "numpy.asarray", "np.squeeze.tolist", "numpy.ones", "numpy.ones", "numpy.argwhere", "numpy.argwhere", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "numpy.asarray", "numpy.asarray", "np.squeeze.tolist", "numpy.ones", "numpy.ones", "numpy.argwhere", "numpy.argwhere", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "Tensor.copy_", "model_A2B.detach", "netG_A2B.detach", "netD_A.detach", "netD_A.detach", "torch.nn.L1Loss.", "Loss_resemble_G.detach", "sum", "sum", "Tensor.copy_", "model_B2A.detach", "netG_B2A.detach", "netD_A.detach", "netD_A.detach", "torch.nn.L1Loss.", "Loss_resemble_G.detach", "sum", "sum", "np.squeeze.tolist", "np.squeeze.tolist", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.ones", "np.squeeze.tolist", "numpy.asarray", "numpy.asarray", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.ones", "np.squeeze.tolist", "numpy.asarray", "numpy.asarray", "np.squeeze.tolist", "sum", "sum", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "np.squeeze.tolist", "numpy.ones", "numpy.ones", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "np.squeeze.tolist", "numpy.ones", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.models_prune.compute_layer_mask", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.models_prune.compute_layer_mask", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.LambdaLR.step", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.ReplayBuffer.push_and_pop", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.LambdaLR.step", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.ReplayBuffer.push_and_pop", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.LambdaLR.step"], ["", "", "", "def", "caculate_fitness", "(", "mask_input_A2B", ",", "mask_input_B2A", ",", "gpu_id", ",", "fitness_id", ",", "A2B_or_B2A", ")", ":", "\n", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "gpu_id", ")", "\n", "#print(\"GPU_ID is%d\\n\"%(gpu_id))", "\n", "\n", "model_A2B", "=", "Generator", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ")", "\n", "model_B2A", "=", "Generator", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ")", "\n", "\n", "netD_A", "=", "Discriminator", "(", "opt", ".", "input_nc", ")", "\n", "netD_B", "=", "Discriminator", "(", "opt", ".", "output_nc", ")", "\n", "\n", "\n", "netD_A", ".", "cuda", "(", "gpu_id", ")", "\n", "netD_B", ".", "cuda", "(", "gpu_id", ")", "\n", "model_A2B", ".", "cuda", "(", "gpu_id", ")", "\n", "model_B2A", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "model_A2B", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/models/netG_A2B.pth'", ")", ")", "\n", "model_B2A", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/models/netG_B2A.pth'", ")", ")", "\n", "netD_A", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/models/netD_A.pth'", ")", ")", "\n", "netD_B", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/models/netD_B.pth'", ")", ")", "\n", "\n", "\n", "\n", "\n", "# Lossess", "\n", "criterion_GAN", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "criterion_cycle", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "criterion_identity", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "fitness", "=", "0", "\n", "cfg_mask_A2B", "=", "compute_layer_mask", "(", "mask_input_A2B", ",", "mask_chns", ")", "\n", "cfg_mask_B2A", "=", "compute_layer_mask", "(", "mask_input_B2A", ",", "mask_chns", ")", "\n", "cfg_full_mask_A2B", "=", "[", "y", "for", "x", "in", "cfg_mask_A2B", "for", "y", "in", "x", "]", "\n", "cfg_full_mask_A2B", "=", "np", ".", "array", "(", "cfg_full_mask_A2B", ")", "\n", "cfg_full_mask_B2A", "=", "[", "y", "for", "x", "in", "cfg_mask_B2A", "for", "y", "in", "x", "]", "\n", "cfg_full_mask_B2A", "=", "np", ".", "array", "(", "cfg_full_mask_B2A", ")", "\n", "cfg_id", "=", "0", "\n", "start_mask", "=", "np", ".", "ones", "(", "3", ")", "\n", "end_mask", "=", "cfg_mask_A2B", "[", "cfg_id", "]", "\n", "\n", "for", "m", "in", "model_A2B", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\n", "#print(\"conv2d\")", "\n", "#print(m.weight.data.shape)", "\n", "#out_channels = m.weight.data.shape[0]    ", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "m", ".", "weight", ".", "data", ".", "shape", ")", "\n", "\n", "mask_bias", "=", "np", ".", "ones", "(", "m", ".", "bias", ".", "data", ".", "shape", ")", "\n", "\n", "cfg_mask_start", "=", "np", ".", "ones", "(", "start_mask", ".", "shape", ")", "-", "start_mask", "\n", "cfg_mask_end", "=", "np", ".", "ones", "(", "end_mask", ".", "shape", ")", "-", "end_mask", "\n", "idx0", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "cfg_mask_start", ")", ")", ")", "\n", "idx1", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "cfg_mask_end", ")", ")", ")", "\n", "if", "idx1", ".", "size", "==", "1", ":", "\n", "                ", "idx1", "=", "np", ".", "resize", "(", "idx1", ",", "(", "1", ",", ")", ")", "\n", "\n", "", "mask", "[", ":", ",", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", "=", "0", "\n", "mask", "[", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", "=", "0", "\n", "mask_bias", "[", "idx1", ".", "tolist", "(", ")", "]", "=", "0", "\n", "\n", "\n", "m", ".", "weight", ".", "data", "=", "m", ".", "weight", ".", "data", "*", "torch", ".", "FloatTensor", "(", "mask", ")", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "\n", "\n", "m", ".", "bias", ".", "data", "=", "m", ".", "bias", ".", "data", "*", "torch", ".", "FloatTensor", "(", "mask_bias", ")", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "idx_mask", "=", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "np", ".", "ones", "(", "mask", ".", "shape", ")", "-", "mask", ")", ")", "\n", "\n", "m", ".", "weight", ".", "data", "[", ":", ",", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", ".", "requires_grad", "=", "False", "\n", "m", ".", "weight", ".", "data", "[", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "requires_grad", "=", "False", "\n", "\n", "cfg_id", "+=", "1", "\n", "start_mask", "=", "end_mask", "\n", "if", "cfg_id", "<", "len", "(", "cfg_mask", ")", ":", "\n", "                ", "end_mask", "=", "cfg_mask_A2B", "[", "cfg_id", "]", "\n", "", "continue", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "m", ".", "weight", ".", "data", ".", "shape", ")", "\n", "mask_bias", "=", "np", ".", "ones", "(", "m", ".", "bias", ".", "data", ".", "shape", ")", "\n", "\n", "cfg_mask_start", "=", "np", ".", "ones", "(", "start_mask", ".", "shape", ")", "-", "start_mask", "\n", "cfg_mask_end", "=", "np", ".", "ones", "(", "end_mask", ".", "shape", ")", "-", "end_mask", "\n", "\n", "idx0", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "cfg_mask_start", ")", ")", ")", "\n", "idx1", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "cfg_mask_end", ")", ")", ")", "\n", "\n", "mask", "[", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", "=", "0", "\n", "\n", "mask", "[", ":", ",", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", "=", "0", "\n", "\n", "mask_bias", "[", "idx1", ".", "tolist", "(", ")", "]", "=", "0", "\n", "\n", "m", ".", "weight", ".", "data", "=", "m", ".", "weight", ".", "data", "*", "torch", ".", "FloatTensor", "(", "mask", ")", ".", "cuda", "(", "gpu_id", ")", "\n", "m", ".", "bias", ".", "data", "=", "m", ".", "bias", ".", "data", "*", "torch", ".", "FloatTensor", "(", "mask_bias", ")", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "m", ".", "weight", ".", "data", "[", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", ".", "requires_grad", "=", "False", "\n", "m", ".", "weight", ".", "data", "[", ":", ",", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "requires_grad", "=", "False", "\n", "\n", "cfg_id", "+=", "1", "\n", "start_mask", "=", "end_mask", "\n", "end_mask", "=", "cfg_mask_A2B", "[", "cfg_id", "]", "\n", "continue", "\n", "\n", "\n", "", "", "cfg_id", "=", "0", "\n", "start_mask", "=", "np", ".", "ones", "(", "3", ")", "\n", "end_mask", "=", "cfg_mask_B2A", "[", "cfg_id", "]", "\n", "\n", "for", "m", "in", "model_B2A", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\n", "#print(\"conv2d\")", "\n", "#print(m.weight.data.shape)", "\n", "#out_channels = m.weight.data.shape[0]    ", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "m", ".", "weight", ".", "data", ".", "shape", ")", "\n", "\n", "mask_bias", "=", "np", ".", "ones", "(", "m", ".", "bias", ".", "data", ".", "shape", ")", "\n", "\n", "cfg_mask_start", "=", "np", ".", "ones", "(", "start_mask", ".", "shape", ")", "-", "start_mask", "\n", "cfg_mask_end", "=", "np", ".", "ones", "(", "end_mask", ".", "shape", ")", "-", "end_mask", "\n", "idx0", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "cfg_mask_start", ")", ")", ")", "\n", "idx1", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "cfg_mask_end", ")", ")", ")", "\n", "if", "idx1", ".", "size", "==", "1", ":", "\n", "                ", "idx1", "=", "np", ".", "resize", "(", "idx1", ",", "(", "1", ",", ")", ")", "\n", "\n", "", "mask", "[", ":", ",", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", "=", "0", "\n", "mask", "[", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", "=", "0", "\n", "mask_bias", "[", "idx1", ".", "tolist", "(", ")", "]", "=", "0", "\n", "\n", "\n", "m", ".", "weight", ".", "data", "=", "m", ".", "weight", ".", "data", "*", "torch", ".", "FloatTensor", "(", "mask", ")", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "\n", "\n", "m", ".", "bias", ".", "data", "=", "m", ".", "bias", ".", "data", "*", "torch", ".", "FloatTensor", "(", "mask_bias", ")", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "idx_mask", "=", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "np", ".", "ones", "(", "mask", ".", "shape", ")", "-", "mask", ")", ")", "\n", "\n", "m", ".", "weight", ".", "data", "[", ":", ",", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", ".", "requires_grad", "=", "False", "\n", "m", ".", "weight", ".", "data", "[", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "requires_grad", "=", "False", "\n", "\n", "cfg_id", "+=", "1", "\n", "start_mask", "=", "end_mask", "\n", "if", "cfg_id", "<", "len", "(", "cfg_mask", ")", ":", "\n", "                ", "end_mask", "=", "cfg_mask_B2A", "[", "cfg_id", "]", "\n", "", "continue", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "m", ".", "weight", ".", "data", ".", "shape", ")", "\n", "mask_bias", "=", "np", ".", "ones", "(", "m", ".", "bias", ".", "data", ".", "shape", ")", "\n", "\n", "cfg_mask_start", "=", "np", ".", "ones", "(", "start_mask", ".", "shape", ")", "-", "start_mask", "\n", "cfg_mask_end", "=", "np", ".", "ones", "(", "end_mask", ".", "shape", ")", "-", "end_mask", "\n", "\n", "idx0", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "cfg_mask_start", ")", ")", ")", "\n", "idx1", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "np", ".", "asarray", "(", "cfg_mask_end", ")", ")", ")", "\n", "\n", "mask", "[", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", "=", "0", "\n", "\n", "mask", "[", ":", ",", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", "=", "0", "\n", "\n", "mask_bias", "[", "idx1", ".", "tolist", "(", ")", "]", "=", "0", "\n", "\n", "m", ".", "weight", ".", "data", "=", "m", ".", "weight", ".", "data", "*", "torch", ".", "FloatTensor", "(", "mask", ")", ".", "cuda", "(", "gpu_id", ")", "\n", "m", ".", "bias", ".", "data", "=", "m", ".", "bias", ".", "data", "*", "torch", ".", "FloatTensor", "(", "mask_bias", ")", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "m", ".", "weight", ".", "data", "[", "idx0", ".", "tolist", "(", ")", ",", ":", ",", ":", ",", ":", "]", ".", "requires_grad", "=", "False", "\n", "m", ".", "weight", ".", "data", "[", ":", ",", "idx1", ".", "tolist", "(", ")", ",", ":", ",", ":", "]", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "data", "[", "idx1", ".", "tolist", "(", ")", "]", ".", "requires_grad", "=", "False", "\n", "\n", "cfg_id", "+=", "1", "\n", "start_mask", "=", "end_mask", "\n", "end_mask", "=", "cfg_mask_B2A", "[", "cfg_id", "]", "\n", "continue", "\n", "\n", "# Dataset loader", "\n", "", "", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "opt", ".", "cuda", "else", "torch", ".", "Tensor", "\n", "input_A", "=", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "input_nc", ",", "opt", ".", "size", ",", "opt", ".", "size", ")", "\n", "input_B", "=", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "output_nc", ",", "opt", ".", "size", ",", "opt", ".", "size", ")", "\n", "target_real", "=", "Variable", "(", "Tensor", "(", "opt", ".", "batchSize", ")", ".", "fill_", "(", "1.0", ")", ",", "requires_grad", "=", "False", ")", "\n", "target_fake", "=", "Variable", "(", "Tensor", "(", "opt", ".", "batchSize", ")", ".", "fill_", "(", "0.0", ")", ",", "requires_grad", "=", "False", ")", "\n", "fake_A_buffer", "=", "ReplayBuffer", "(", ")", "\n", "fake_B_buffer", "=", "ReplayBuffer", "(", ")", "\n", "\n", "lamda_loss_ID", "=", "5.0", "\n", "lamda_loss_G", "=", "1.0", "\n", "lamda_loss_cycle", "=", "10.0", "\n", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model_A2B", ".", "parameters", "(", ")", ")", ",", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model_B2A", ".", "parameters", "(", ")", ")", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "optimizer_D_A", "=", "torch", ".", "optim", ".", "Adam", "(", "netD_A", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "optimizer_D_B", "=", "torch", ".", "optim", ".", "Adam", "(", "netD_B", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "transforms_", "=", "[", "\n", "transforms", ".", "Resize", "(", "int", "(", "opt", ".", "size", "*", "1.12", ")", ",", "Image", ".", "BICUBIC", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "opt", ".", "size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "\n", "\n", "dataloader", "=", "DataLoader", "(", "ImageDataset", "(", "opt", ".", "dataroot", ",", "transforms_", "=", "transforms_", ",", "unaligned", "=", "True", ",", "mode", "=", "'train'", ")", ",", "batch_size", "=", "opt", ".", "batchSize", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "epoch", ",", "opt", ".", "n_epochs", ")", ":", "\n", "        ", "for", "i", ",", "batch", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\n", "# Set model input", "\n", "            ", "real_A", "=", "Variable", "(", "input_A", ".", "copy_", "(", "batch", "[", "'A'", "]", ")", ")", "\n", "real_B", "=", "Variable", "(", "input_B", ".", "copy_", "(", "batch", "[", "'B'", "]", ")", ")", "\n", "\n", "###### Generators A2B and B2A ######", "\n", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "\n", "# Identity loss", "\n", "# G_A2B(B) should equal B if real B is fed", "\n", "same_B", "=", "model_A2B", "(", "real_B", ")", "\n", "loss_identity_B", "=", "criterion_identity", "(", "same_B", ",", "real_B", ")", "*", "lamda_loss_ID", "#initial 5.0", "\n", "# G_B2A(A) should equal A if real A is fed", "\n", "same_A", "=", "model_B2A", "(", "real_A", ")", "\n", "loss_identity_A", "=", "criterion_identity", "(", "same_A", ",", "real_A", ")", "*", "lamda_loss_ID", "#initial 5.0", "\n", "\n", "# GAN loss", "\n", "fake_B", "=", "model_A2B", "(", "real_A", ")", "\n", "pred_fake", "=", "netD_B", "(", "fake_B", ")", "\n", "loss_GAN_A2B", "=", "criterion_GAN", "(", "pred_fake", ",", "target_real", ")", "*", "lamda_loss_G", "#initial 1.0", "\n", "\n", "fake_A", "=", "model_B2A", "(", "real_B", ")", "\n", "pred_fake", "=", "netD_A", "(", "fake_A", ")", "\n", "loss_GAN_B2A", "=", "criterion_GAN", "(", "pred_fake", ",", "target_real", ")", "*", "lamda_loss_G", "#initial 1.0", "\n", "\n", "# Cycle loss", "\n", "recovered_A", "=", "model_B2A", "(", "fake_B", ")", "\n", "loss_cycle_ABA", "=", "criterion_cycle", "(", "recovered_A", ",", "real_A", ")", "*", "lamda_loss_cycle", "#initial 10.0", "\n", "\n", "recovered_B", "=", "model_A2B", "(", "fake_A", ")", "\n", "loss_cycle_BAB", "=", "criterion_cycle", "(", "recovered_B", ",", "real_B", ")", "*", "lamda_loss_cycle", "#initial 10.0", "\n", "\n", "# Total loss", "\n", "loss_G", "=", "loss_identity_A", "+", "loss_identity_B", "+", "loss_GAN_A2B", "+", "loss_GAN_B2A", "+", "loss_cycle_ABA", "+", "loss_cycle_BAB", "\n", "loss_G", ".", "backward", "(", ")", "\n", "\n", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "###### Discriminator A ######", "\n", "optimizer_D_A", ".", "zero_grad", "(", ")", "\n", "\n", "# Real loss", "\n", "pred_real", "=", "netD_A", "(", "real_A", ")", "\n", "loss_D_real", "=", "criterion_GAN", "(", "pred_real", ",", "target_real", ")", "\n", "\n", "# Fake loss", "\n", "fake_A", "=", "fake_A_buffer", ".", "push_and_pop", "(", "fake_A", ")", "\n", "pred_fake", "=", "netD_A", "(", "fake_A", ".", "detach", "(", ")", ")", "\n", "loss_D_fake", "=", "criterion_GAN", "(", "pred_fake", ",", "target_fake", ")", "\n", "\n", "# Total loss", "\n", "loss_D_A", "=", "(", "loss_D_real", "+", "loss_D_fake", ")", "*", "0.5", "\n", "loss_D_A", ".", "backward", "(", ")", "\n", "\n", "optimizer_D_A", ".", "step", "(", ")", "\n", "###################################", "\n", "\n", "###### Discriminator B ######", "\n", "optimizer_D_B", ".", "zero_grad", "(", ")", "\n", "\n", "# Real loss", "\n", "pred_real", "=", "netD_B", "(", "real_B", ")", "\n", "loss_D_real", "=", "criterion_GAN", "(", "pred_real", ",", "target_real", ")", "\n", "\n", "# Fake loss", "\n", "fake_B", "=", "fake_B_buffer", ".", "push_and_pop", "(", "fake_B", ")", "\n", "pred_fake", "=", "netD_B", "(", "fake_B", ".", "detach", "(", ")", ")", "\n", "loss_D_fake", "=", "criterion_GAN", "(", "pred_fake", ",", "target_fake", ")", "\n", "\n", "# Total loss", "\n", "loss_D_B", "=", "(", "loss_D_real", "+", "loss_D_fake", ")", "*", "0.5", "\n", "loss_D_B", ".", "backward", "(", ")", "\n", "\n", "optimizer_D_B", ".", "step", "(", ")", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "transforms_", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "\n", "\n", "\n", "dataloader", "=", "DataLoader", "(", "ImageDataset", "(", "opt", ".", "dataroot", ",", "transforms_", "=", "transforms_", ",", "mode", "=", "'val'", ")", ",", "\n", "batch_size", "=", "opt", ".", "batchSize", ",", "shuffle", "=", "False", ",", "drop_last", "=", "True", ")", "\n", "\n", "\n", "\n", "\n", "Loss_resemble_G", "=", "0", "\n", "if", "A2B_or_B2A", "==", "'A2B'", ":", "\n", "            ", "netG_A2B", "=", "Generator", "(", "opt", ".", "output_nc", ",", "opt", ".", "input_nc", ")", "\n", "netD_B", "=", "Discriminator", "(", "opt", ".", "output_nc", ")", "\n", "\n", "\n", "netG_A2B", ".", "cuda", "(", "gpu_id", ")", "\n", "netD_B", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "model_A2B", ".", "eval", "(", ")", "\n", "netD_B", ".", "eval", "(", ")", "\n", "netG_A2B", ".", "eval", "(", ")", "\n", "\n", "netD_B", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/models/netD_B.pth'", ")", ")", "\n", "netG_A2B", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/models/netG_A2B.pth'", ")", ")", "\n", "\n", "\n", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\n", "                ", "real_A", "=", "Variable", "(", "input_A", ".", "copy_", "(", "batch", "[", "'A'", "]", ")", ")", "\n", "\n", "\n", "fake_B", "=", "model_A2B", "(", "real_A", ")", "\n", "fake_B_full_model", "=", "netG_A2B", "(", "real_A", ")", "\n", "recovered_A", "=", "model_B2A", "(", "fake_B", ")", "\n", "\n", "\n", "pred_fake", "=", "netD_B", "(", "fake_B", ".", "detach", "(", ")", ")", "\n", "\n", "\n", "pred_fake_full", "=", "netD_B", "(", "fake_B_full_model", ".", "detach", "(", ")", ")", "\n", "\n", "\n", "loss_D_fake", "=", "criterion_GAN", "(", "pred_fake", ".", "detach", "(", ")", ",", "pred_fake_full", ".", "detach", "(", ")", ")", "\n", "cycle_loss", "=", "criterion_cycle", "(", "recovered_A", ",", "real_A", ")", "*", "lamda_loss_cycle", "\n", "Loss_resemble_G", "=", "Loss_resemble_G", "+", "loss_D_fake", "+", "cycle_loss", "\n", "\n", "lambda_prune", "=", "0.001", "\n", "\n", "", "fitness", "=", "500", "/", "Loss_resemble_G", ".", "detach", "(", ")", "+", "sum", "(", "np", ".", "ones", "(", "cfg_full_mask_A2B", ".", "shape", ")", "-", "cfg_full_mask_A2B", ")", "*", "lambda_prune", "\n", "\n", "print", "(", "'A2B'", ")", "\n", "print", "(", "\"GPU_ID is %d\"", "%", "(", "gpu_id", ")", ")", "\n", "print", "(", "\"channel num is: %d\"", "%", "(", "sum", "(", "cfg_full_mask_A2B", ")", ")", ")", "\n", "print", "(", "\"Loss_resemble_G is %f prune_loss is %f \"", "%", "(", "500", "/", "Loss_resemble_G", ",", "sum", "(", "np", ".", "ones", "(", "cfg_full_mask_A2B", ".", "shape", ")", "-", "cfg_full_mask_A2B", ")", ")", ")", "\n", "print", "(", "\"fitness is %f \\n\"", "%", "(", "fitness", ")", ")", "\n", "\n", "\n", "current_fitness_A2B", "[", "fitness_id", "]", "=", "fitness", ".", "item", "(", ")", "\n", "\n", "\n", "", "if", "A2B_or_B2A", "==", "'B2A'", ":", "\n", "            ", "netG_B2A", "=", "Generator", "(", "opt", ".", "output_nc", ",", "opt", ".", "input_nc", ")", "\n", "netD_A", "=", "Discriminator", "(", "opt", ".", "output_nc", ")", "\n", "\n", "\n", "netG_B2A", ".", "cuda", "(", "gpu_id", ")", "\n", "netD_A", ".", "cuda", "(", "gpu_id", ")", "\n", "\n", "model_B2A", ".", "eval", "(", ")", "\n", "netD_A", ".", "eval", "(", ")", "\n", "netG_B2A", ".", "eval", "(", ")", "\n", "\n", "netD_A", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/models/netD_A.pth'", ")", ")", "\n", "netG_B2A", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/cache/models/netG_B2A.pth'", ")", ")", "\n", "\n", "\n", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\n", "                ", "real_B", "=", "Variable", "(", "input_B", ".", "copy_", "(", "batch", "[", "'B'", "]", ")", ")", "\n", "\n", "\n", "fake_A", "=", "model_B2A", "(", "real_B", ")", "\n", "fake_A_full_model", "=", "netG_B2A", "(", "real_B", ")", "\n", "recovered_B", "=", "model_A2B", "(", "fake_A", ")", "\n", "\n", "\n", "pred_fake", "=", "netD_A", "(", "fake_A", ".", "detach", "(", ")", ")", "\n", "\n", "\n", "pred_fake_full", "=", "netD_A", "(", "fake_A_full_model", ".", "detach", "(", ")", ")", "\n", "\n", "\n", "loss_D_fake", "=", "criterion_GAN", "(", "pred_fake", ".", "detach", "(", ")", ",", "pred_fake_full", ".", "detach", "(", ")", ")", "\n", "cycle_loss", "=", "criterion_cycle", "(", "recovered_B", ",", "real_B", ")", "*", "lamda_loss_cycle", "\n", "Loss_resemble_G", "=", "Loss_resemble_G", "+", "loss_D_fake", "+", "cycle_loss", "\n", "\n", "\n", "lambda_prune", "=", "0.001", "\n", "\n", "", "fitness", "=", "500", "/", "Loss_resemble_G", ".", "detach", "(", ")", "+", "sum", "(", "np", ".", "ones", "(", "cfg_full_mask_B2A", ".", "shape", ")", "-", "cfg_full_mask_B2A", ")", "*", "lambda_prune", "\n", "\n", "print", "(", "'B2A'", ")", "\n", "print", "(", "\"GPU_ID is %d\"", "%", "(", "gpu_id", ")", ")", "\n", "print", "(", "\"channel num is: %d\"", "%", "(", "sum", "(", "cfg_full_mask_B2A", ")", ")", ")", "\n", "print", "(", "\"Loss_resemble_G is %f prune_loss is %f \"", "%", "(", "500", "/", "Loss_resemble_G", ",", "sum", "(", "np", ".", "ones", "(", "cfg_full_mask_B2A", ".", "shape", ")", "-", "cfg_full_mask_B2A", ")", ")", ")", "\n", "print", "(", "\"fitness is %f \\n\"", "%", "(", "fitness", ")", ")", "\n", "\n", "\n", "current_fitness_B2A", "[", "fitness_id", "]", "=", "fitness", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.GA.roulette": [[8, 18], ["numpy.random.rand().item", "numpy.sum", "numpy.cumsum", "numpy.sum", "print", "mask_.copy", "numpy.random.rand"], "function", ["None"], ["def", "roulette", "(", "mask_all", ",", "N", ",", "fitness", ")", ":", "#N is num of population", "\n", "    ", "prob", "=", "np", ".", "cumsum", "(", "fitness", ")", "/", "np", ".", "sum", "(", "fitness", ")", "\n", "rnd", "=", "np", ".", "random", ".", "rand", "(", "1", ")", ".", "item", "(", ")", "\n", "idx", "=", "np", ".", "sum", "(", "prob", "<", "rnd", ")", "\n", "if", "idx", ">=", "N", ":", "\n", "        ", "print", "(", "prob", ",", "rnd", ",", "N", ",", "idx", ")", "\n", "idx", "=", "self", ".", "N", "-", "1", "\n", "", "mask_", "=", "mask_all", "[", "idx", "]", "\n", "fitness_", "=", "fitness", "[", "idx", "]", "\n", "return", "mask_", ".", "copy", "(", ")", ",", "fitness_", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.GA.crossover": [[19, 29], ["GA.roulette", "GA.roulette", "numpy.random.randint", "individual1_mask.copy", "individual2_mask.copy", "numpy.min", "numpy.max"], "function", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.GA.roulette", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.GA.roulette"], ["", "def", "crossover", "(", "mask_all", ",", "N", ",", "fitness", ",", "L", ")", ":", "\n", "    ", "individual1_mask", ",", "_", "=", "roulette", "(", "mask_all", ",", "N", ",", "fitness", ")", "\n", "individual2_mask", ",", "_", "=", "roulette", "(", "mask_all", ",", "N", ",", "fitness", ")", "\n", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "L", ",", "2", ")", "\n", "start_idx", ",", "end_idx", "=", "np", ".", "min", "(", "idx", ")", ",", "np", ".", "max", "(", "idx", ")", "\n", "individual1_mask_copy", "=", "individual1_mask", ".", "copy", "(", ")", "\n", "individual2_mask_copy", "=", "individual2_mask", ".", "copy", "(", ")", "\n", "individual1_mask_copy", "[", "start_idx", ":", "end_idx", "]", "=", "individual2_mask", "[", "start_idx", ":", "end_idx", "]", "\n", "individual2_mask_copy", "[", "start_idx", ":", "end_idx", "]", "=", "individual1_mask", "[", "start_idx", ":", "end_idx", "]", "\n", "return", "individual1_mask_copy", ",", "individual2_mask_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.GA.mutation": [[30, 37], ["GA.roulette", "numpy.random.randint", "individual_mask.copy", "numpy.min", "numpy.max", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.GA.roulette"], ["", "def", "mutation", "(", "mask_all", ",", "N", ",", "fitness", ",", "L", ")", ":", "\n", "    ", "individual_mask", ",", "_", "=", "roulette", "(", "mask_all", ",", "N", ",", "fitness", ")", "\n", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "L", ",", "2", ")", "\n", "start_idx", ",", "end_idx", "=", "np", ".", "min", "(", "idx", ")", ",", "np", ".", "max", "(", "idx", ")", "\n", "individual_mask_copy", "=", "individual_mask", ".", "copy", "(", ")", "\n", "individual_mask_copy", "[", "start_idx", ":", "end_idx", "]", "=", "np", ".", "ones", "(", "end_idx", "-", "start_idx", ")", "-", "individual_mask", "[", "start_idx", ":", "end_idx", "]", "\n", "return", "individual_mask_copy", "\n", "", ""]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.Logger.__init__": [[18, 29], ["visdom.Visdom", "time.time"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.Logger.log": [[31, 76], ["time.time", "sys.stdout.write", "enumerate", "sys.stdout.write", "images.items", "time.time", "losses.keys", "utils.Logger.losses.items", "sys.stdout.write", "len", "sys.stdout.write", "sys.stdout.write", "datetime.timedelta", "utils.Logger.viz.image", "utils.Logger.viz.image", "losses.keys", "utils.tensor2image", "utils.tensor2image", "utils.Logger.viz.line", "utils.Logger.viz.line", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.tensor2image", "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.tensor2image"], ["self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n", "\n", "", "", "class", "RecorderMeter", "(", "object", ")", ":", "\n", "  ", "\"\"\"Computes and stores the minimum loss value and its epoch index\"\"\"", "\n", "def", "__init__", "(", "self", ",", "total_epoch", ")", ":", "\n", "    ", "self", ".", "reset", "(", "total_epoch", ")", "\n", "\n", "", "def", "reset", "(", "self", ",", "total_epoch", ")", ":", "\n", "    ", "assert", "total_epoch", ">", "0", "\n", "self", ".", "total_epoch", "=", "total_epoch", "\n", "self", ".", "current_epoch", "=", "0", "\n", "self", ".", "epoch_losses", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_losses", "=", "self", ".", "epoch_losses", "-", "1", "\n", "\n", "self", ".", "epoch_accuracy", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_accuracy", "=", "self", ".", "epoch_accuracy", "\n", "\n", "", "def", "update", "(", "self", ",", "idx", ",", "train_loss", ",", "train_acc", ",", "val_loss", ",", "val_acc", ")", ":", "\n", "    ", "assert", "idx", ">=", "0", "and", "idx", "<", "self", ".", "total_epoch", ",", "'total_epoch : {} , but update with the {} index'", ".", "format", "(", "self", ".", "total_epoch", ",", "idx", ")", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "0", "]", "=", "train_loss", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "1", "]", "=", "val_loss", "\n", "self", ".", "epoch_accuracy", "[", "idx", ",", "0", "]", "=", "train_acc", "\n", "self", ".", "epoch_accuracy", "[", "idx", ",", "1", "]", "=", "val_acc", "\n", "self", ".", "current_epoch", "=", "idx", "+", "1", "\n", "#return self.max_accuracy(False) == val_acc", "\n", "return", "math", ".", "isclose", "(", "self", ".", "max_accuracy", "(", "False", ")", ",", "val_acc", ",", "rel_tol", "=", "1e-06", ")", "\n", "", "def", "max_accuracy", "(", "self", ",", "istrain", ")", ":", "\n", "    ", "if", "self", ".", "current_epoch", "<=", "0", ":", "return", "0", "\n", "if", "istrain", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "0", "]", ".", "max", "(", ")", "\n", "else", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "1", "]", ".", "max", "(", ")", "\n", "\n", "", "def", "plot_curve", "(", "self", ",", "save_path", ")", ":", "\n", "    ", "title", "=", "'the accuracy/loss curve of train/val'", "\n", "dpi", "=", "80", "\n", "width", ",", "height", "=", "1200", ",", "800", "\n", "legend_fontsize", "=", "10", "\n", "scale_distance", "=", "48.8", "\n", "figsize", "=", "width", "/", "float", "(", "dpi", ")", ",", "height", "/", "float", "(", "dpi", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "#\u5728\u8bad\u7ec3\u73af\u5883\u4f1a\u62a5\u9519", "\n", "x_axis", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "total_epoch", ")", "]", ")", "# epochs", "\n", "y_axis", "=", "np", ".", "zeros", "(", "self", ".", "total_epoch", ")", "\n", "\n", "plt", ".", "xlim", "(", "0", ",", "self", ".", "total_epoch", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "100", ")", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.ReplayBuffer.__init__": [[80, 84], ["None"], "methods", ["None"], ["plt", ".", "yticks", "(", "np", ".", "arange", "(", "0", ",", "100", "+", "interval_y", ",", "interval_y", ")", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "'the training epoch'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "ylabel", "(", "'accuracy'", ",", "fontsize", "=", "16", ")", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.ReplayBuffer.push_and_pop": [[85, 100], ["torch.autograd.Variable", "torch.unsqueeze", "torch.cat", "len", "utils.ReplayBuffer.data.append", "to_return.append", "random.uniform", "random.randint", "to_return.append", "to_return.append", "utils.ReplayBuffer.data[].clone"], "methods", ["None"], ["\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'g'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'train-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'y'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'valid-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'g'", ",", "linestyle", "=", "':'", ",", "label", "=", "'train-loss-x50'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'y'", ",", "linestyle", "=", "':'", ",", "label", "=", "'valid-loss-x50'", ",", "lw", "=", "2", ")", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.LambdaLR.__init__": [[102, 107], ["None"], "methods", ["None"], ["\n", "if", "save_path", "is", "not", "None", ":", "\n", "      ", "fig", ".", "savefig", "(", "save_path", ",", "dpi", "=", "dpi", ",", "bbox_inches", "=", "'tight'", ")", "\n", "print", "(", "'---- save figure {} into {}'", ".", "format", "(", "title", ",", "save_path", ")", ")", "\n", "", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.LambdaLR.step": [[108, 110], ["max"], "methods", ["None"], ["\n", "", "", "def", "time_string", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d %X'", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.tensor2image": [[11, 16], ["np.tile.astype", "numpy.tile", "tensor[].cpu().float().numpy", "tensor[].cpu().float", "tensor[].cpu"], "function", ["None"], ["# matplotlib.use('agg')", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "random", "\n", "import", "math", "\n", "\n", "class", "AverageMeter", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.utils.weights_init_normal": [[111, 118], ["classname.find", "torch.nn.init.normal", "classname.find", "torch.nn.init.normal", "torch.nn.init.constant"], "function", ["None"], ["string", "=", "'[{}]'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n", "", "def", "convert_secs2time", "(", "epoch_time", ")", ":", "\n", "  ", "need_hour", "=", "int", "(", "epoch_time", "/", "3600", ")", "\n", "need_mins", "=", "int", "(", "(", "epoch_time", "-", "3600", "*", "need_hour", ")", "/", "60", ")", "\n", "need_secs", "=", "int", "(", "epoch_time", "-", "3600", "*", "need_hour", "-", "60", "*", "need_mins", ")", "\n", "return", "need_hour", ",", "need_mins", ",", "need_secs", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.datasets.ImageDataset.__init__": [[13, 19], ["torchvision.Compose", "sorted", "sorted", "glob.glob", "glob.glob", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transforms_", "=", "None", ",", "unaligned", "=", "False", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transforms_", ")", "\n", "self", ".", "unaligned", "=", "unaligned", "\n", "\n", "self", ".", "files_A", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'%s/A'", "%", "mode", ")", "+", "'/*.*'", ")", ")", "\n", "self", ".", "files_B", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'%s/B'", "%", "mode", ")", "+", "'/*.*'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.datasets.ImageDataset.__getitem__": [[20, 29], ["datasets.ImageDataset.transform", "PIL.Image.open", "datasets.ImageDataset.transform", "datasets.ImageDataset.transform", "PIL.Image.open", "PIL.Image.open", "len", "random.randint", "len", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item_A", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "self", ".", "files_A", "[", "index", "%", "len", "(", "self", ".", "files_A", ")", "]", ")", ")", "\n", "\n", "if", "self", ".", "unaligned", ":", "\n", "            ", "item_B", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "self", ".", "files_B", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "files_B", ")", "-", "1", ")", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "item_B", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "self", ".", "files_B", "[", "index", "%", "len", "(", "self", ".", "files_B", ")", "]", ")", ")", "\n", "\n", "", "return", "{", "'A'", ":", "item_A", ",", "'B'", ":", "item_B", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.GAN-Pruning.datasets.ImageDataset.__len__": [[30, 32], ["max", "len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "len", "(", "self", ".", "files_A", ")", ",", "len", "(", "self", ".", "files_B", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.AverageMeter.__init__": [[39, 41], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.reset"], ["", "def", "reset", "(", "self", ",", "total_epoch", ")", ":", "\n", "    ", "assert", "total_epoch", ">", "0", "\n", "self", ".", "total_epoch", "=", "total_epoch", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.AverageMeter.reset": [[42, 47], ["None"], "methods", ["None"], ["self", ".", "current_epoch", "=", "0", "\n", "self", ".", "epoch_losses", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_losses", "=", "self", ".", "epoch_losses", "-", "1", "\n", "\n", "self", ".", "epoch_accuracy", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_accuracy", "=", "self", ".", "epoch_accuracy", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.AverageMeter.update": [[48, 53], ["None"], "methods", ["None"], ["\n", "", "def", "update", "(", "self", ",", "idx", ",", "train_loss", ",", "train_acc", ",", "val_loss", ",", "val_acc", ")", ":", "\n", "    ", "assert", "idx", ">=", "0", "and", "idx", "<", "self", ".", "total_epoch", ",", "'total_epoch : {} , but update with the {} index'", ".", "format", "(", "self", ".", "total_epoch", ",", "idx", ")", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "0", "]", "=", "train_loss", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "1", "]", "=", "val_loss", "\n", "self", ".", "epoch_accuracy", "[", "idx", ",", "0", "]", "=", "train_acc", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.__init__": [[57, 59], ["utils.RecorderMeter.reset"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.reset"], ["return", "math", ".", "isclose", "(", "self", ".", "max_accuracy", "(", "False", ")", ",", "val_acc", ",", "rel_tol", "=", "1e-06", ")", "\n", "", "def", "max_accuracy", "(", "self", ",", "istrain", ")", ":", "\n", "    ", "if", "self", ".", "current_epoch", "<=", "0", ":", "return", "0", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.reset": [[60, 69], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["if", "istrain", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "0", "]", ".", "max", "(", ")", "\n", "else", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "1", "]", ".", "max", "(", ")", "\n", "\n", "", "def", "plot_curve", "(", "self", ",", "save_path", ")", ":", "\n", "    ", "title", "=", "'the accuracy/loss curve of train/val'", "\n", "dpi", "=", "80", "\n", "width", ",", "height", "=", "1200", ",", "800", "\n", "legend_fontsize", "=", "10", "\n", "scale_distance", "=", "48.8", "\n", "figsize", "=", "width", "/", "float", "(", "dpi", ")", ",", "height", "/", "float", "(", "dpi", ")", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.update": [[70, 79], ["math.isclose", "utils.RecorderMeter.max_accuracy"], "methods", ["home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.max_accuracy"], ["\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "#\u5728\u8bad\u7ec3\u73af\u5883\u4f1a\u62a5\u9519", "\n", "x_axis", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "total_epoch", ")", "]", ")", "# epochs", "\n", "y_axis", "=", "np", ".", "zeros", "(", "self", ".", "total_epoch", ")", "\n", "\n", "plt", ".", "xlim", "(", "0", ",", "self", ".", "total_epoch", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "100", ")", "\n", "interval_y", "=", "5", "\n", "interval_x", "=", "5", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "0", ",", "self", ".", "total_epoch", "+", "interval_x", ",", "interval_x", ")", ")", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.max_accuracy": [[79, 83], ["utils.RecorderMeter.epoch_accuracy[].max", "utils.RecorderMeter.epoch_accuracy[].max"], "methods", ["None"], ["plt", ".", "xticks", "(", "np", ".", "arange", "(", "0", ",", "self", ".", "total_epoch", "+", "interval_x", ",", "interval_x", ")", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "0", ",", "100", "+", "interval_y", ",", "interval_y", ")", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "'the training epoch'", ",", "fontsize", "=", "16", ")", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.RecorderMeter.plot_curve": [[84, 128], ["matplotlib.figure", "matplotlib.figure", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "matplotlib.xlim", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.ylim", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.grid", "matplotlib.grid", "matplotlib.title", "matplotlib.title", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.close", "matplotlib.close", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "matplotlib.figure.savefig", "print", "float", "float", "range"], "methods", ["None"], ["plt", ".", "ylabel", "(", "'accuracy'", ",", "fontsize", "=", "16", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'g'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'train-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'y'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'valid-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'g'", ",", "linestyle", "=", "':'", ",", "label", "=", "'train-loss-x50'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'y'", ",", "linestyle", "=", "':'", ",", "label", "=", "'valid-loss-x50'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "      ", "fig", ".", "savefig", "(", "save_path", ",", "dpi", "=", "dpi", ",", "bbox_inches", "=", "'tight'", ")", "\n", "print", "(", "'---- save figure {} into {}'", ".", "format", "(", "title", ",", "save_path", ")", ")", "\n", "", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "\n", "", "", "def", "time_string", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d %X'", "\n", "string", "=", "'[{}]'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n", "", "def", "convert_secs2time", "(", "epoch_time", ")", ":", "\n", "  ", "need_hour", "=", "int", "(", "epoch_time", "/", "3600", ")", "\n", "need_mins", "=", "int", "(", "(", "epoch_time", "-", "3600", "*", "need_hour", ")", "/", "60", ")", "\n", "need_secs", "=", "int", "(", "epoch_time", "-", "3600", "*", "need_hour", "-", "60", "*", "need_mins", ")", "\n", "return", "need_hour", ",", "need_mins", ",", "need_secs", "\n", "\n", "", "def", "time_file_str", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d'", "\n", "string", "=", "'{}'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "+", "'-{}'", ".", "format", "(", "random", ".", "randint", "(", "1", ",", "10000", ")", ")", "\n", "\n", "", "def", "timing", "(", "f", ")", ":", "\n", "    ", "def", "wrap", "(", "*", "args", ")", ":", "\n", "        ", "time1", "=", "time", ".", "time", "(", ")", "\n", "ret", "=", "f", "(", "*", "args", ")", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.accuracy": [[21, 35], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n", "\n", "", "", "class", "RecorderMeter", "(", "object", ")", ":", "\n", "  ", "\"\"\"Computes and stores the minimum loss value and its epoch index\"\"\"", "\n"]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.time_string": [[130, 134], ["time.strftime", "time.gmtime", "time.time"], "function", ["None"], ["print", "(", "'%s function took %0.3f ms'", "%", "(", "f", ".", "__name__", ",", "(", "time2", "-", "time1", ")", "*", "1000.0", ")", ")", "\n", "return", "ret", "\n", "", "return", "wrap", "\n", "", ""]], "home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.convert_secs2time": [[135, 140], ["int", "int", "int"], "function", ["None"], []], "home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.time_file_str": [[141, 145], ["time.strftime", "time.gmtime", "random.randint", "time.time"], "function", ["None"], []], "home.repos.pwc.inspect_result.huawei-noah_Pruning.ManiDP.utils.timing": [[146, 154], ["time.time", "f", "time.time", "print"], "function", ["None"], []]}