{"home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.expand_scope_by_name": [[10, 22], ["isinstance"], "function", ["None"], ["def", "expand_scope_by_name", "(", "scope", ",", "name", ")", ":", "\n", "    ", "\"\"\" expand tf scope by given name.\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "scope", ",", "str", ")", ":", "\n", "        ", "scope", "+=", "'/'", "+", "name", "\n", "return", "scope", "\n", "\n", "", "if", "scope", "is", "not", "None", ":", "\n", "        ", "return", "scope", ".", "name", "+", "'/'", "+", "name", "\n", "", "else", ":", "\n", "        ", "return", "scope", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.replicate_parameter_for_all_layers": [[24, 31], ["numpy.array", "parameter.repeat().tolist.repeat().tolist", "len", "len", "ValueError", "parameter.repeat().tolist.repeat"], "function", ["None"], ["", "", "def", "replicate_parameter_for_all_layers", "(", "parameter", ",", "n_layers", ")", ":", "\n", "    ", "if", "parameter", "is", "not", "None", "and", "len", "(", "parameter", ")", "!=", "n_layers", ":", "\n", "        ", "if", "len", "(", "parameter", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "", "parameter", "=", "np", ".", "array", "(", "parameter", ")", "\n", "parameter", "=", "parameter", ".", "repeat", "(", "n_layers", ")", ".", "tolist", "(", ")", "\n", "", "return", "parameter", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.reset_tf_graph": [[33, 39], ["tensorflow.reset_default_graph", "sess.close", "globals"], "function", ["None"], ["", "def", "reset_tf_graph", "(", ")", ":", "\n", "    ", "''' Reset's all variables of default-tf graph. Useful for jupyter.\n    '''", "\n", "if", "'sess'", "in", "globals", "(", ")", "and", "sess", ":", "\n", "        ", "sess", ".", "close", "(", ")", "\n", "", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.leaky_relu": [[41, 46], ["ValueError", "tensorflow.maximum"], "function", ["None"], ["", "def", "leaky_relu", "(", "alpha", ")", ":", "\n", "    ", "if", "not", "(", "alpha", "<", "1", "and", "alpha", ">", "0", ")", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "\n", "", "return", "lambda", "x", ":", "tf", ".", "maximum", "(", "alpha", "*", "x", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.safe_log": [[48, 50], ["tensorflow.log", "tensorflow.maximum"], "function", ["None"], ["", "def", "safe_log", "(", "x", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "return", "tf", ".", "log", "(", "tf", ".", "maximum", "(", "x", ",", "eps", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adv_ae.AdvAE.__init__": [[30, 77], ["src.adversary_autoencoder.AdversaryAutoEncoder.__init__", "tensorflow.variable_scope", "src.adversary.Adversary", "adv_ae.AdvAE.adversary.attack", "tensorflow.variable_scope", "c.encoder", "int", "c.decoder", "c.exists_and_is_not_none", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.train.Saver", "adv_ae.AdvAE._create_loss", "adv_ae.AdvAE._setup_optimizer", "hasattr", "tensorflow.ConfigProto", "tensorflow.summary.merge_all", "tensorflow.summary.FileWriter", "tensorflow.global_variables_initializer", "tensorflow.Session", "adv_ae.AdvAE.sess.run", "adv_ae.AdvAE.restore_ae_model", "tensorflow.nn.tanh", "tensorflow.global_variables", "os.join", "adv_ae.AdvAE.z.get_shape"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary.Adversary.attack", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.Configuration.exists_and_is_not_none", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.pointnet_ae.PointNetAutoEncoder._create_loss", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.pointnet_ae.PointNetAutoEncoder._setup_optimizer", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_autoencoder.AdversaryAutoEncoder.restore_ae_model"], ["def", "__init__", "(", "self", ",", "adversary_name", ",", "configuration", ",", "graph", "=", "None", ")", ":", "\n", "        ", "c", "=", "configuration", "\n", "self", ".", "configuration", "=", "c", "\n", "\n", "AdversaryAutoEncoder", ".", "__init__", "(", "self", ",", "adversary_name", ",", "graph", ",", "configuration", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "adversary_name", ")", ":", "\n", "            ", "self", ".", "adversary", "=", "Adversary", "(", "'pert'", ",", "c", ".", "batch_size", ",", "c", ".", "n_input", "[", "0", "]", ")", "\n", "self", ".", "adv", "=", "self", ".", "adversary", ".", "attack", "(", "self", ".", "x", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "c", ".", "ae_name", ")", ":", "\n", "            ", "self", ".", "z", "=", "c", ".", "encoder", "(", "self", ".", "adv", ",", "**", "c", ".", "encoder_args", ")", "\n", "self", ".", "bottleneck_size", "=", "int", "(", "self", ".", "z", ".", "get_shape", "(", ")", "[", "1", "]", ")", "\n", "layer", "=", "c", ".", "decoder", "(", "self", ".", "z", ",", "**", "c", ".", "decoder_args", ")", "\n", "\n", "if", "c", ".", "exists_and_is_not_none", "(", "'close_with_tanh'", ")", ":", "\n", "                ", "layer", "=", "tf", ".", "nn", ".", "tanh", "(", "layer", ")", "\n", "\n", "", "self", ".", "x_reconstr", "=", "tf", ".", "reshape", "(", "layer", ",", "[", "-", "1", ",", "self", ".", "n_output", "[", "0", "]", ",", "self", ".", "n_output", "[", "1", "]", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "adversary_name", ")", ":", "\n", "            ", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "global_variables", "(", ")", ",", "max_to_keep", "=", "c", ".", "saver_max_to_keep", ")", "\n", "\n", "self", ".", "_create_loss", "(", ")", "\n", "self", ".", "_setup_optimizer", "(", ")", "\n", "\n", "# GPU configuration", "\n", "if", "hasattr", "(", "c", ",", "'allow_gpu_growth'", ")", ":", "\n", "                ", "growth", "=", "c", ".", "allow_gpu_growth", "\n", "", "else", ":", "\n", "                ", "growth", "=", "True", "\n", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "growth", "\n", "\n", "# Summaries", "\n", "self", ".", "merged_summaries", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "train_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "osp", ".", "join", "(", "configuration", ".", "train_dir", ",", "'summaries'", ")", ",", "self", ".", "graph", ")", "\n", "\n", "# Initializing the tensor flow variables", "\n", "self", ".", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "\n", "# Launch the session", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "init", ")", "\n", "\n", "self", ".", "restore_ae_model", "(", "c", ".", "ae_dir", ",", "c", ".", "ae_name", ",", "c", ".", "ae_restore_epoch", ",", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adv_ae.AdvAE._create_loss": [[78, 106], ["adv_ae.AdvAE._create_ae_loss", "adv_ae.AdvAE._create_input_dist", "adv_ae.AdvAE.adversary.get_pert_loss", "tensorflow.reduce_sum", "adv_ae.AdvAE._create_latent_loss", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.adv_ae.AdvAE._create_ae_loss", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adv_ae.AdvAE._create_input_dist", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary.Adversary.get_pert_loss", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adv_ae.AdvAE._create_latent_loss"], ["", "", "def", "_create_loss", "(", "self", ")", ":", "\n", "        ", "c", "=", "self", ".", "configuration", "\n", "\n", "self", ".", "loss_ae", ",", "self", ".", "loss_ae_per_pc", "=", "self", ".", "_create_ae_loss", "(", "c", ".", "loss", ")", "# for attack success metric and/or loss", "\n", "self", ".", "input_dist", ",", "self", ".", "input_dist_per_pc", ",", "self", ".", "max_dist", ",", "self", ".", "max_dist_per_pc", "=", "self", ".", "_create_input_dist", "(", "c", ".", "loss", ")", "# for attack success metric and/or loss", "\n", "\n", "# target adversarial loss", "\n", "if", "c", ".", "loss_adv_type", "==", "'latent'", ":", "\n", "            ", "self", ".", "loss_adv", "=", "self", ".", "_create_latent_loss", "(", "self", ".", "z", ",", "self", ".", "target_z", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_adv", "=", "self", ".", "loss_ae_per_pc", "\n", "\n", "# source distance loss", "\n", "", "self", ".", "loss_pert", ",", "self", ".", "loss_max", "=", "self", ".", "adversary", ".", "get_pert_loss", "(", ")", "\n", "\n", "if", "c", ".", "loss_dist_type", "==", "'pert'", ":", "\n", "            ", "if", "c", ".", "max_point_pert_weight", ">", "0.0", ":", "\n", "                ", "self", ".", "loss_dist", "=", "self", ".", "loss_pert", "+", "c", ".", "max_point_pert_weight", "*", "self", ".", "loss_max", "\n", "", "else", ":", "\n", "                ", "self", ".", "loss_dist", "=", "self", ".", "loss_pert", "\n", "", "", "else", ":", "\n", "            ", "if", "c", ".", "max_point_dist_weight", ">", "0.0", ":", "\n", "                ", "self", ".", "loss_dist", "=", "self", ".", "input_dist_per_pc", "+", "c", ".", "max_point_dist_weight", "*", "self", ".", "max_dist_per_pc", "\n", "", "else", ":", "\n", "                ", "self", ".", "loss_dist", "=", "self", ".", "input_dist_per_pc", "\n", "\n", "# total loss", "\n", "", "", "self", ".", "loss", "=", "tf", ".", "reduce_sum", "(", "self", ".", "loss_adv", "+", "tf", ".", "multiply", "(", "self", ".", "dist_weight", ",", "self", ".", "loss_dist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adv_ae.AdvAE._create_latent_loss": [[107, 117], ["tensorflow.reduce_sum", "tensorflow.square", "tensorflow.sqrt"], "methods", ["None"], ["", "def", "_create_latent_loss", "(", "self", ",", "latent_source", ",", "latent_target", ",", "sqrt", "=", "True", ")", ":", "\n", "        ", "diff", "=", "latent_source", "-", "latent_target", "\n", "diff_norm_square", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "diff", ")", ",", "axis", "=", "1", ")", "\n", "if", "sqrt", ":", "\n", "            ", "diff_norm", "=", "tf", ".", "sqrt", "(", "diff_norm_square", ")", "\n", "loss_latent", "=", "diff_norm", "\n", "", "else", ":", "\n", "            ", "loss_latent", "=", "diff_norm_square", "\n", "\n", "", "return", "loss_latent", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adv_ae.AdvAE._create_ae_loss": [[118, 128], ["tensorflow.reduce_mean", "nn_distance", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "approx_match", "tensorflow.reduce_mean", "match_cost"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_nndistance.nn_distance", "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_approxmatch.approx_match", "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_approxmatch.match_cost"], ["", "def", "_create_ae_loss", "(", "self", ",", "loss_type", ")", ":", "\n", "        ", "if", "loss_type", "==", "'chamfer'", ":", "\n", "            ", "cost_p1_p2", ",", "_", ",", "cost_p2_p1", ",", "_", "=", "nn_distance", "(", "self", ".", "x_reconstr", ",", "self", ".", "gt", ")", "\n", "loss_ae_per_pc", "=", "tf", ".", "reduce_mean", "(", "cost_p1_p2", ",", "axis", "=", "1", ")", "+", "tf", ".", "reduce_mean", "(", "cost_p2_p1", ",", "axis", "=", "1", ")", "\n", "", "elif", "loss_type", "==", "'emd'", ":", "\n", "            ", "match", "=", "approx_match", "(", "self", ".", "x_reconstr", ",", "self", ".", "gt", ")", "\n", "loss_ae_per_pc", "=", "tf", ".", "reduce_mean", "(", "match_cost", "(", "self", ".", "x_reconstr", ",", "self", ".", "gt", ",", "match", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "loss_ae", "=", "tf", ".", "reduce_mean", "(", "loss_ae_per_pc", ")", "\n", "return", "loss_ae", ",", "loss_ae_per_pc", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adv_ae.AdvAE._create_input_dist": [[129, 143], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "nn_distance", "tensorflow.reduce_max", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "approx_match", "match_cost", "tensorflow.reduce_mean", "tensorflow.reduce_max"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_nndistance.nn_distance", "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_approxmatch.approx_match", "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_approxmatch.match_cost"], ["", "def", "_create_input_dist", "(", "self", ",", "loss_type", ")", ":", "\n", "        ", "if", "loss_type", "==", "'chamfer'", ":", "\n", "            ", "cost_p1_p2", ",", "_", ",", "cost_p2_p1", ",", "_", "=", "nn_distance", "(", "self", ".", "adv", ",", "self", ".", "x", ")", "\n", "input_dist_per_pc", "=", "tf", ".", "reduce_mean", "(", "cost_p1_p2", ",", "axis", "=", "1", ")", "+", "tf", ".", "reduce_mean", "(", "cost_p2_p1", ",", "axis", "=", "1", ")", "\n", "max_dist_per_pc", "=", "tf", ".", "reduce_max", "(", "cost_p1_p2", ",", "axis", "=", "1", ")", "\n", "", "elif", "loss_type", "==", "'emd'", ":", "\n", "            ", "match", "=", "approx_match", "(", "self", ".", "adv", ",", "self", ".", "x", ")", "\n", "m_cost", "=", "match_cost", "(", "self", ".", "adv", ",", "self", ".", "x", ",", "match", ")", "\n", "input_dist_per_pc", "=", "tf", ".", "reduce_mean", "(", "m_cost", ",", "axis", "=", "1", ")", "\n", "max_dist_per_pc", "=", "tf", ".", "reduce_max", "(", "m_cost", ",", "axis", "=", "1", ")", "\n", "\n", "", "input_dist", "=", "tf", ".", "reduce_mean", "(", "input_dist_per_pc", ")", "\n", "max_dist", "=", "tf", ".", "reduce_mean", "(", "max_dist_per_pc", ")", "\n", "return", "input_dist", ",", "input_dist_per_pc", ",", "max_dist", ",", "max_dist_per_pc", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adv_ae.AdvAE._setup_optimizer": [[144, 154], ["hasattr", "tensorflow.train.AdamOptimizer", "adv_ae.AdvAE.optimizer.minimize", "tensorflow.train.exponential_decay", "tensorflow.maximum", "tensorflow.summary.scalar"], "methods", ["None"], ["", "def", "_setup_optimizer", "(", "self", ")", ":", "\n", "        ", "c", "=", "self", ".", "configuration", "\n", "self", ".", "lr", "=", "c", ".", "learning_rate", "\n", "if", "hasattr", "(", "c", ",", "'exponential_decay'", ")", ":", "\n", "            ", "self", ".", "lr", "=", "tf", ".", "train", ".", "exponential_decay", "(", "c", ".", "learning_rate", ",", "self", ".", "epoch", ",", "c", ".", "decay_steps", ",", "decay_rate", "=", "0.5", ",", "staircase", "=", "True", ",", "name", "=", "\"learning_rate_decay\"", ")", "\n", "self", ".", "lr", "=", "tf", ".", "maximum", "(", "self", ".", "lr", ",", "1e-5", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate'", ",", "self", ".", "lr", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", "\n", "self", ".", "attack_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ",", "var_list", "=", "self", ".", "adversary", ".", "pert", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adv_ae.AdvAE.attack": [[155, 190], ["len", "range", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "time.time", "adv_ae.AdvAE._attack_one_batch", "adversarial_metrics.append", "adversarial_pc_input.append", "adversarial_pc_recon.append", "print", "time.time", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.adv_ae.AdvAE._attack_one_batch", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write"], ["", "def", "attack", "(", "self", ",", "source_pc", ",", "target_latent", ",", "target_pc", ",", "target_ae_loss_ref", ",", "configuration", ",", "log_file", "=", "None", ")", ":", "\n", "        ", "n_examples", "=", "len", "(", "source_pc", ")", "\n", "adversarial_metrics", "=", "[", "]", "\n", "adversarial_pc_input", "=", "[", "]", "\n", "adversarial_pc_recon", "=", "[", "]", "\n", "batch_size", "=", "configuration", ".", "batch_size", "\n", "\n", "assert", "n_examples", "%", "batch_size", "==", "0", ",", "'The number of examples (%d) should be divided by the batch size (%d)'", "%", "(", "n_examples", ",", "batch_size", ")", "\n", "n_batches", "=", "n_examples", "//", "batch_size", "\n", "\n", "# Loop over all batches", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "s_idx", "=", "i", "*", "batch_size", "\n", "e_idx", "=", "(", "i", "+", "1", ")", "*", "batch_size", "\n", "adversarial_metrics_batch", ",", "adversarial_pc_input_batch", ",", "adversarial_pc_recon_batch", "=", "self", ".", "_attack_one_batch", "(", "source_pc", "[", "s_idx", ":", "e_idx", "]", ",", "target_latent", "[", "s_idx", ":", "e_idx", "]", ",", "target_pc", "[", "s_idx", ":", "e_idx", "]", ",", "target_ae_loss_ref", "[", "s_idx", ":", "e_idx", "]", ",", "log_file", ")", "\n", "\n", "# aggregate results", "\n", "adversarial_metrics", ".", "append", "(", "adversarial_metrics_batch", ")", "\n", "adversarial_pc_input", ".", "append", "(", "adversarial_pc_input_batch", ")", "\n", "adversarial_pc_recon", ".", "append", "(", "adversarial_pc_recon_batch", ")", "\n", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "print", "(", "\"Batch: %04d out of %04d, attack time (minutes): %.4f\"", "%", "(", "i", "+", "1", ",", "n_batches", ",", "duration", "/", "60.0", ")", ")", "\n", "if", "log_file", "is", "not", "None", ":", "\n", "                ", "log_file", ".", "write", "(", "'Batch %04d\\tDuration %.4f\\n'", "%", "(", "i", "+", "1", ",", "duration", "/", "60.0", ")", ")", "\n", "\n", "", "", "adversarial_metrics_epoch", "=", "np", ".", "concatenate", "(", "adversarial_metrics", ",", "axis", "=", "1", ")", "\n", "adversarial_pc_input_epoch", "=", "np", ".", "concatenate", "(", "adversarial_pc_input", ",", "axis", "=", "1", ")", "\n", "adversarial_pc_recon_epoch", "=", "np", ".", "concatenate", "(", "adversarial_pc_recon", ",", "axis", "=", "1", ")", "\n", "\n", "return", "adversarial_metrics_epoch", ",", "adversarial_pc_input_epoch", ",", "adversarial_pc_recon_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adv_ae.AdvAE._attack_one_batch": [[191, 252], ["len", "numpy.zeros().astype", "numpy.zeros().astype", "numpy.zeros().astype", "enumerate", "numpy.concatenate", "numpy.ones().astype", "tflearn.is_training", "adv_ae.AdvAE.adversary.init_pert", "range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.ones", "adv_ae.AdvAE.sess.run", "adv_ae.AdvAE.sess.run", "numpy.expand_dims", "numpy.ones", "print", "adv_ae.AdvAE.sess.run", "adv_ae.AdvAE.reconstruct", "range", "log_file.write", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.neural_net.NeuralNet.is_training", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary.Adversary.init_pert", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.reconstruct", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write"], ["", "def", "_attack_one_batch", "(", "self", ",", "source_pc", ",", "target_latent", ",", "target_pc", ",", "target_ae_loss_ref", ",", "log_file", "=", "None", ")", ":", "\n", "        ", "c", "=", "self", ".", "configuration", "\n", "\n", "dist_weight_list", "=", "c", ".", "dist_weight_list", "\n", "num_dist_weight", "=", "len", "(", "dist_weight_list", ")", "\n", "\n", "target_recon_error_agg", "=", "1e10", "*", "np", ".", "ones", "(", "shape", "=", "(", "num_dist_weight", ",", "c", ".", "batch_size", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "adversarial_metrics_agg", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_dist_weight", ",", "c", ".", "batch_size", ",", "4", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "# loss_adv, loss_dist, source_chamfer_dist, target_nre", "\n", "adversarial_pc_input_agg", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_dist_weight", ",", "c", ".", "batch_size", ",", "c", ".", "n_input", "[", "0", "]", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "adversarial_pc_recon_agg", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_dist_weight", ",", "c", ".", "batch_size", ",", "c", ".", "n_output", "[", "0", "]", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "feed_dict", "=", "{", "self", ".", "x", ":", "source_pc", ",", "self", ".", "target_z", ":", "target_latent", ",", "self", ".", "gt", ":", "target_pc", "}", "\n", "\n", "if", "c", ".", "loss_dist_type", "==", "'pert'", ":", "\n", "            ", "loss_max_tf", "=", "self", ".", "loss_max", "\n", "", "else", ":", "\n", "            ", "loss_max_tf", "=", "self", ".", "max_dist_per_pc", "\n", "\n", "", "for", "i", ",", "dist_weight", "in", "enumerate", "(", "dist_weight_list", ")", ":", "\n", "            ", "is_training", "(", "False", ",", "session", "=", "self", ".", "sess", ")", "\n", "\n", "# start attack (for a given dist_weight)", "\n", "feed_dict", "[", "self", ".", "dist_weight", "]", "=", "np", ".", "ones", "(", "c", ".", "batch_size", ")", "*", "dist_weight", "\n", "self", ".", "adversary", ".", "init_pert", "(", "self", ".", "sess", ")", "\n", "\n", "for", "iteration", "in", "range", "(", "c", ".", "num_iterations", ")", ":", "\n", "                ", "_", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "attack_op", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "loss_adv", ",", "loss_dist", ",", "loss_pert", ",", "loss_max", ",", "source_chamfer_dist", ",", "target_recon_error", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "loss_adv", ",", "self", ".", "loss_dist", ",", "self", ".", "loss_pert", ",", "loss_max_tf", ",", "\n", "self", ".", "input_dist_per_pc", ",", "self", ".", "loss_ae_per_pc", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "loss", "=", "loss_adv", "+", "dist_weight", "*", "loss_dist", "\n", "if", "(", "iteration", "+", "1", ")", "%", "(", "(", "c", ".", "num_iterations", "//", "10", ")", "or", "1", ")", "==", "0", ":", "\n", "                    ", "print", "(", "\"Weight {} of {}, Iteration {} of {}, loss={} loss_adv={} loss_dist={} loss_pert={} loss_max={}\"", ".", "format", "(", "\n", "i", "+", "1", ",", "num_dist_weight", ",", "iteration", "+", "1", ",", "c", ".", "num_iterations", ",", "np", ".", "mean", "(", "loss", ")", ",", "np", ".", "mean", "(", "loss_adv", ")", ",", "\n", "np", ".", "mean", "(", "loss_dist", ")", ",", "np", ".", "mean", "(", "loss_pert", ")", ",", "np", ".", "mean", "(", "loss_max", ")", ")", ")", "\n", "if", "log_file", "is", "not", "None", ":", "\n", "                        ", "log_file", ".", "write", "(", "\n", "'Dist weight %.4f\\tIteration %.04d\\tloss: %.4f\\tloss_adv: %.4f\\tloss_dist: %.4f\\tloss_pert: %.4f\\tloss_max: %.4f\\n'", "%", "\n", "(", "dist_weight", ",", "iteration", "+", "1", ",", "np", ".", "mean", "(", "loss", ")", ",", "np", ".", "mean", "(", "loss_adv", ")", ",", "np", ".", "mean", "(", "loss_dist", ")", ",", "np", ".", "mean", "(", "loss_pert", ")", ",", "np", ".", "mean", "(", "loss_max", ")", ")", ")", "\n", "\n", "# update output data in case of lower target reconstruction error (for each instance)", "\n", "", "", "if", "(", "iteration", "+", "1", ")", ">=", "c", ".", "num_iterations_thresh", ":", "\n", "                    ", "adv_pc_input", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "adv", ",", "feed_dict", "=", "feed_dict", ")", "\n", "adv_pc_recon", ",", "_", "=", "self", ".", "reconstruct", "(", "source_pc", ",", "compute_loss", "=", "False", ")", "\n", "\n", "for", "j", "in", "range", "(", "c", ".", "batch_size", ")", ":", "\n", "                        ", "if", "target_recon_error", "[", "j", "]", "<", "target_recon_error_agg", "[", "i", ",", "j", "]", ":", "\n", "                            ", "target_recon_error_agg", "[", "i", ",", "j", "]", "=", "target_recon_error", "[", "j", "]", "\n", "target_nre", "=", "target_recon_error", "[", "j", "]", "/", "target_ae_loss_ref", "[", "j", "]", "# normalized reconstruction error", "\n", "\n", "adversarial_metrics_agg", "[", "i", ",", "j", "]", "=", "[", "loss_adv", "[", "j", "]", ",", "loss_dist", "[", "j", "]", ",", "source_chamfer_dist", "[", "j", "]", ",", "target_nre", "]", "\n", "\n", "adversarial_pc_input_agg", "[", "i", ",", "j", "]", "=", "adv_pc_input", "[", "j", "]", "\n", "adversarial_pc_recon_agg", "[", "i", ",", "j", "]", "=", "adv_pc_recon", "[", "j", "]", "\n", "# end attack", "\n", "\n", "", "", "", "", "", "adversarial_metrics_agg_all", "=", "np", ".", "concatenate", "(", "[", "adversarial_metrics_agg", ",", "np", ".", "expand_dims", "(", "target_recon_error_agg", ",", "axis", "=", "-", "1", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "adversarial_metrics_agg_all", ",", "adversarial_pc_input_agg", ",", "adversarial_pc_recon_agg", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adv_ae.AdvAE._attack_one_batch_binary_step": [[253, 305], ["tflearn.is_training", "numpy.zeros", "numpy.ones", "range", "numpy.ones", "numpy.ones", "adv_ae.AdvAE.adversary.init_pert", "range", "range", "adv_ae.AdvAE.sess.run", "adv_ae.AdvAE.sess.run", "numpy.mean", "enumerate", "print", "zip", "max", "min", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.neural_net.NeuralNet.is_training", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary.Adversary.init_pert"], ["", "def", "_attack_one_batch_binary_step", "(", "self", ",", "attacked_data", ")", ":", "\n", "        ", "c", "=", "self", ".", "configuration", "\n", "is_training", "(", "True", ",", "session", "=", "self", ".", "sess", ")", "\n", "\n", "# the bound for the binary search", "\n", "lower_bound", "=", "np", ".", "zeros", "(", "c", ".", "batch_size", ")", "\n", "dist_weight", "=", "np", ".", "ones", "(", "c", ".", "batch_size", ")", "*", "c", ".", "init_dist_weight", "\n", "upper_bound", "=", "np", ".", "ones", "(", "c", ".", "batch_size", ")", "*", "c", ".", "upper_bound_dist_weight", "\n", "\n", "out_best_adv", "=", "[", "1e10", "]", "*", "c", ".", "batch_size", "\n", "out_best_dist", "=", "[", "1e10", "]", "*", "c", ".", "batch_size", "\n", "out_best_attack", "=", "np", ".", "ones", "(", "shape", "=", "(", "c", ".", "batch_size", ",", "c", ".", "n_input", "[", "0", "]", ",", "3", ")", ")", "\n", "\n", "feed_dict", "=", "{", "self", ".", "x", ":", "attacked_data", ",", "self", ".", "dist_weight", ":", "dist_weight", "}", "\n", "\n", "for", "out_step", "in", "range", "(", "c", ".", "binary_search_step", ")", ":", "\n", "            ", "feed_dict", "[", "self", ".", "dist_weight", "]", "=", "dist_weight", "\n", "self", ".", "adversary", ".", "init_pert", "(", "self", ".", "sess", ")", "\n", "best_adv", "=", "[", "1e10", "]", "*", "c", ".", "batch_size", "\n", "best_dist", "=", "[", "1e10", "]", "*", "c", ".", "batch_size", "\n", "\n", "for", "iteration", "in", "range", "(", "c", ".", "num_iterations", ")", ":", "\n", "                ", "_", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "attack_op", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "loss_adv", ",", "loss_dist", ",", "adv_pc", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "loss_adv", ",", "self", ".", "loss_dist", ",", "self", ".", "adv", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "loss", "=", "np", ".", "mean", "(", "loss_adv", "+", "dist_weight", "*", "loss_dist", ")", "\n", "if", "iteration", "%", "(", "(", "c", ".", "num_iterations", "//", "10", ")", "or", "1", ")", "==", "0", ":", "\n", "                    ", "print", "(", "\"Iteration {} of {}: loss={} loss_adv={} loss_dist={}\"", ".", "format", "(", "\n", "iteration", ",", "c", ".", "num_iterations", ",", "loss", ",", "np", ".", "mean", "(", "loss_adv", ")", ",", "np", ".", "mean", "(", "loss_dist", ")", ")", ")", "\n", "\n", "", "for", "e", ",", "(", "adv", ",", "dist", ",", "pc", ")", "in", "enumerate", "(", "zip", "(", "loss_adv", ",", "loss_dist", ",", "adv_pc", ")", ")", ":", "\n", "                    ", "if", "dist", "<", "best_dist", "[", "e", "]", ":", "\n", "                        ", "best_dist", "[", "e", "]", "=", "dist", "\n", "best_adv", "[", "e", "]", "=", "adv", "\n", "", "if", "dist", "<", "out_best_dist", "[", "e", "]", ":", "\n", "                        ", "out_best_dist", "[", "e", "]", "=", "dist", "\n", "out_best_adv", "[", "e", "]", "=", "adv", "\n", "out_best_attack", "[", "e", "]", "=", "pc", "\n", "\n", "# adjust the constant as needed", "\n", "", "", "", "for", "e", "in", "range", "(", "c", ".", "batch_size", ")", ":", "\n", "                ", "if", "best_dist", "[", "e", "]", "<=", "out_best_dist", "[", "e", "]", ":", "\n", "# success", "\n", "                    ", "lower_bound", "[", "e", "]", "=", "max", "(", "lower_bound", "[", "e", "]", ",", "dist_weight", "[", "e", "]", ")", "\n", "dist_weight", "[", "e", "]", "=", "(", "lower_bound", "[", "e", "]", "+", "upper_bound", "[", "e", "]", ")", "/", "2", "\n", "# print('new result found!')", "\n", "", "else", ":", "\n", "# failure", "\n", "                    ", "upper_bound", "[", "e", "]", "=", "min", "(", "upper_bound", "[", "e", "]", ",", "dist_weight", "[", "e", "]", ")", "\n", "dist_weight", "[", "e", "]", "=", "(", "lower_bound", "[", "e", "]", "+", "upper_bound", "[", "e", "]", ")", "/", "2", "\n", "\n", "", "", "", "return", "out_best_adv", ",", "out_best_dist", ",", "out_best_attack", ",", "dist_weight", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary.Adversary.__init__": [[10, 26], ["tensorflow.get_variable", "tensorflow.truncated_normal_initializer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "adversary_name", ",", "batch_size", ",", "num_points", ")", ":", "\n", "        ", "\"\"\"Creates adversarial manipulation to a point cloud.\n        Arguments:\n            adversary_name: A string, name of the adversary\n            batch_size: An integer, number of attacked point clouds in a batch.\n            num_points: An integer, number of points in each point cloud.\n        Inputs:\n            input_pc_pl: A `Tensor` of shape (batch_size, num_points, 3), original point cloud.\n        Outputs:\n            adv_pc: A `Tensor` of shape (batch_size, num_points, 3), adversarial point cloud.\n        \"\"\"", "\n", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_num_points", "=", "num_points", "\n", "self", ".", "pert", "=", "tf", ".", "get_variable", "(", "name", "=", "adversary_name", ",", "shape", "=", "[", "self", ".", "_batch_size", ",", "self", ".", "_num_points", ",", "3", "]", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "0.01", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary.Adversary.init_pert": [[27, 29], ["sess.run", "tensorflow.assign", "tensorflow.truncated_normal"], "methods", ["None"], ["", "def", "init_pert", "(", "self", ",", "sess", ",", "stddev", "=", "0.0000001", ",", "seed", "=", "55", ")", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "pert", ",", "tf", ".", "truncated_normal", "(", "[", "self", ".", "_batch_size", ",", "self", ".", "_num_points", ",", "3", "]", ",", "mean", "=", "0", ",", "stddev", "=", "stddev", ",", "seed", "=", "seed", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary.Adversary.get_pert_value": [[30, 32], ["sess.run"], "methods", ["None"], ["", "def", "get_pert_value", "(", "self", ",", "sess", ")", ":", "\n", "        ", "return", "sess", ".", "run", "(", "self", ".", "pert", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary.Adversary.attack": [[33, 38], ["None"], "methods", ["None"], ["", "def", "attack", "(", "self", ",", "input_pc_pl", ")", ":", "\n", "# adversarial perturbation", "\n", "        ", "adv_pc", "=", "input_pc_pl", "+", "self", ".", "pert", "\n", "\n", "return", "adv_pc", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary.Adversary.get_pert_loss": [[39, 58], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.square", "tensorflow.sqrt", "tensorflow.sqrt"], "methods", ["None"], ["", "def", "get_pert_loss", "(", "self", ",", "sqrt", "=", "True", ")", ":", "\n", "# perturbation l2 constraint", "\n", "        ", "pert_norm_per_point_square", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "self", ".", "pert", ")", ",", "2", ")", "# sum over point coordinates (x, y, z)", "\n", "pert_norm_square", "=", "tf", ".", "reduce_sum", "(", "pert_norm_per_point_square", ",", "1", ")", "# sum over all points in the point cloud", "\n", "\n", "max_norm_per_point_square", "=", "tf", ".", "reduce_max", "(", "pert_norm_per_point_square", ",", "1", ")", "# max point perturbation", "\n", "\n", "if", "sqrt", ":", "\n", "            ", "pert_norm", "=", "tf", ".", "sqrt", "(", "pert_norm_square", ")", "\n", "pert_loss", "=", "pert_norm", "\n", "\n", "max_norm", "=", "tf", ".", "sqrt", "(", "max_norm_per_point_square", ")", "\n", "max_loss", "=", "max_norm", "\n", "", "else", ":", "\n", "            ", "pert_loss", "=", "pert_norm_square", "\n", "\n", "max_loss", "=", "max_norm_per_point_square", "\n", "\n", "", "return", "pert_loss", ",", "max_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.encoders_decoders.encoder_with_convs_and_symmetry": [[19, 84], ["len", "src.tf_utils.replicate_parameter_for_all_layers", "src.tf_utils.replicate_parameter_for_all_layers", "src.tf_utils.replicate_parameter_for_all_layers", "range", "print", "ValueError", "src.tf_utils.expand_scope_by_name", "conv_op", "symmetry", "closing", "print", "str", "print", "src.tf_utils.expand_scope_by_name", "tflearn.layers.normalization.batch_normalization", "non_linearity", "tflearn.layers.core.dropout", "print", "print", "print", "print", "pool", "numpy.prod", "numpy.prod", "numpy.prod", "pool.W.get_shape().as_list", "pool.b.get_shape().as_list", "numpy.prod", "numpy.prod", "pool.get_shape().as_list", "pool.beta.get_shape().as_list", "pool.gamma.get_shape().as_list", "pool.W.get_shape", "pool.b.get_shape", "pool.get_shape", "pool.beta.get_shape", "pool.gamma.get_shape"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.replicate_parameter_for_all_layers", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.replicate_parameter_for_all_layers", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.replicate_parameter_for_all_layers", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.expand_scope_by_name", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.expand_scope_by_name", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.dropout"], ["def", "encoder_with_convs_and_symmetry", "(", "in_signal", ",", "n_filters", "=", "[", "64", ",", "128", ",", "256", ",", "1024", "]", ",", "filter_sizes", "=", "[", "1", "]", ",", "strides", "=", "[", "1", "]", ",", "\n", "b_norm", "=", "True", ",", "b_norm_decay", "=", "0.9", ",", "non_linearity", "=", "tf", ".", "nn", ".", "relu", ",", "regularizer", "=", "None", ",", "weight_decay", "=", "0.001", ",", "\n", "symmetry", "=", "tf", ".", "reduce_max", ",", "dropout_prob", "=", "None", ",", "pool", "=", "avg_pool_1d", ",", "pool_sizes", "=", "None", ",", "scope", "=", "None", ",", "\n", "reuse", "=", "False", ",", "padding", "=", "'same'", ",", "verbose", "=", "False", ",", "closing", "=", "None", ",", "conv_op", "=", "conv_1d", ",", "return_layer_before_symmetry", "=", "False", ")", ":", "\n", "    ", "'''An Encoder (recognition network), which maps inputs onto a latent space.\n    '''", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'Building Encoder'", ")", "\n", "\n", "", "n_layers", "=", "len", "(", "n_filters", ")", "\n", "filter_sizes", "=", "replicate_parameter_for_all_layers", "(", "filter_sizes", ",", "n_layers", ")", "\n", "strides", "=", "replicate_parameter_for_all_layers", "(", "strides", ",", "n_layers", ")", "\n", "dropout_prob", "=", "replicate_parameter_for_all_layers", "(", "dropout_prob", ",", "n_layers", ")", "\n", "\n", "if", "n_layers", "<", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'More than 1 layers are expected.'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "layer", "=", "in_signal", "\n", "\n", "", "name", "=", "'encoder_conv_layer_'", "+", "str", "(", "i", ")", "\n", "scope_i", "=", "expand_scope_by_name", "(", "scope", ",", "name", ")", "\n", "layer", "=", "conv_op", "(", "layer", ",", "nb_filter", "=", "n_filters", "[", "i", "]", ",", "filter_size", "=", "filter_sizes", "[", "i", "]", ",", "strides", "=", "strides", "[", "i", "]", ",", "regularizer", "=", "regularizer", ",", "\n", "weight_decay", "=", "weight_decay", ",", "name", "=", "name", ",", "reuse", "=", "reuse", ",", "scope", "=", "scope_i", ",", "padding", "=", "padding", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "name", ",", "'conv params = '", ",", "np", ".", "prod", "(", "layer", ".", "W", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "+", "np", ".", "prod", "(", "layer", ".", "b", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ",", ")", "\n", "\n", "", "if", "b_norm", ":", "\n", "            ", "name", "+=", "'_bnorm'", "\n", "scope_i", "=", "expand_scope_by_name", "(", "scope", ",", "name", ")", "\n", "layer", "=", "batch_normalization", "(", "layer", ",", "decay", "=", "b_norm_decay", ",", "name", "=", "name", ",", "reuse", "=", "reuse", ",", "scope", "=", "scope_i", ")", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "'bnorm params = '", ",", "np", ".", "prod", "(", "layer", ".", "beta", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "+", "np", ".", "prod", "(", "layer", ".", "gamma", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ")", "\n", "\n", "", "", "if", "non_linearity", "is", "not", "None", ":", "\n", "            ", "layer", "=", "non_linearity", "(", "layer", ")", "\n", "\n", "", "if", "pool", "is", "not", "None", "and", "pool_sizes", "is", "not", "None", ":", "\n", "            ", "if", "pool_sizes", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "layer", "=", "pool", "(", "layer", ",", "kernel_size", "=", "pool_sizes", "[", "i", "]", ")", "\n", "\n", "", "", "if", "dropout_prob", "is", "not", "None", "and", "dropout_prob", "[", "i", "]", ">", "0", ":", "\n", "            ", "layer", "=", "dropout", "(", "layer", ",", "1.0", "-", "dropout_prob", "[", "i", "]", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "layer", ")", "\n", "print", "(", "'output size:'", ",", "np", ".", "prod", "(", "layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", ",", "'\\n'", ")", "\n", "\n", "", "", "layer_before_symmetry", "=", "layer", "\n", "if", "symmetry", "is", "not", "None", ":", "\n", "        ", "layer", "=", "symmetry", "(", "layer", ",", "axis", "=", "1", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "layer", ")", "\n", "\n", "", "", "if", "closing", "is", "not", "None", ":", "\n", "        ", "layer", "=", "closing", "(", "layer", ")", "\n", "print", "(", "layer", ")", "\n", "\n", "", "if", "return_layer_before_symmetry", ":", "\n", "        ", "return", "layer", ",", "layer_before_symmetry", "\n", "", "else", ":", "\n", "        ", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.encoders_decoders.decoder_with_fc_only": [[86, 148], ["len", "src.tf_utils.replicate_parameter_for_all_layers", "range", "src.tf_utils.expand_scope_by_name", "tflearn.layers.core.fully_connected", "print", "ValueError", "src.tf_utils.expand_scope_by_name", "tflearn.layers.core.fully_connected", "str", "print", "src.tf_utils.expand_scope_by_name", "tflearn.layers.normalization.batch_normalization", "print", "print", "str", "print", "src.tf_utils.expand_scope_by_name", "tflearn.layers.normalization.batch_normalization", "non_linearity", "tflearn.layers.core.dropout", "print", "print", "print", "numpy.prod", "print", "numpy.prod", "numpy.prod", "numpy.prod", "numpy.prod", "numpy.prod", "tflearn.layers.core.dropout.W.get_shape().as_list", "tflearn.layers.core.dropout.b.get_shape().as_list", "numpy.prod", "numpy.prod", "tflearn.layers.core.dropout.get_shape().as_list", "tflearn.layers.core.dropout.W.get_shape().as_list", "tflearn.layers.core.dropout.b.get_shape().as_list", "numpy.prod", "numpy.prod", "tflearn.layers.core.dropout.get_shape().as_list", "tflearn.layers.core.dropout.beta.get_shape().as_list", "tflearn.layers.core.dropout.gamma.get_shape().as_list", "tflearn.layers.core.dropout.beta.get_shape().as_list", "tflearn.layers.core.dropout.gamma.get_shape().as_list", "tflearn.layers.core.dropout.W.get_shape", "tflearn.layers.core.dropout.b.get_shape", "tflearn.layers.core.dropout.get_shape", "tflearn.layers.core.dropout.W.get_shape", "tflearn.layers.core.dropout.b.get_shape", "tflearn.layers.core.dropout.get_shape", "tflearn.layers.core.dropout.beta.get_shape", "tflearn.layers.core.dropout.gamma.get_shape", "tflearn.layers.core.dropout.beta.get_shape", "tflearn.layers.core.dropout.gamma.get_shape"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.replicate_parameter_for_all_layers", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.expand_scope_by_name", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.fully_connected", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.expand_scope_by_name", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.fully_connected", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.expand_scope_by_name", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.expand_scope_by_name", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.dropout"], ["", "", "def", "decoder_with_fc_only", "(", "latent_signal", ",", "layer_sizes", "=", "[", "]", ",", "b_norm", "=", "True", ",", "b_norm_decay", "=", "0.9", ",", "non_linearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "regularizer", "=", "None", ",", "weight_decay", "=", "0.001", ",", "reuse", "=", "False", ",", "scope", "=", "None", ",", "dropout_prob", "=", "None", ",", "\n", "b_norm_finish", "=", "False", ",", "b_norm_decay_finish", "=", "0.9", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "'''A decoding network which maps points from the latent space back onto the data space.\n    '''", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'Building Decoder'", ")", "\n", "\n", "", "n_layers", "=", "len", "(", "layer_sizes", ")", "\n", "dropout_prob", "=", "replicate_parameter_for_all_layers", "(", "dropout_prob", ",", "n_layers", ")", "\n", "\n", "if", "n_layers", "<", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'For an FC decoder with single a layer use simpler code.'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "n_layers", "-", "1", ")", ":", "\n", "        ", "name", "=", "'decoder_fc_'", "+", "str", "(", "i", ")", "\n", "scope_i", "=", "expand_scope_by_name", "(", "scope", ",", "name", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "            ", "layer", "=", "latent_signal", "\n", "\n", "", "layer", "=", "fully_connected", "(", "layer", ",", "layer_sizes", "[", "i", "]", ",", "activation", "=", "'linear'", ",", "weights_init", "=", "'xavier'", ",", "name", "=", "name", ",", "regularizer", "=", "regularizer", ",", "weight_decay", "=", "weight_decay", ",", "reuse", "=", "reuse", ",", "scope", "=", "scope_i", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "name", ",", "'FC params = '", ",", "np", ".", "prod", "(", "layer", ".", "W", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "+", "np", ".", "prod", "(", "layer", ".", "b", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ",", ")", "\n", "\n", "", "if", "b_norm", ":", "\n", "            ", "name", "+=", "'_bnorm'", "\n", "scope_i", "=", "expand_scope_by_name", "(", "scope", ",", "name", ")", "\n", "layer", "=", "batch_normalization", "(", "layer", ",", "decay", "=", "b_norm_decay", ",", "name", "=", "name", ",", "reuse", "=", "reuse", ",", "scope", "=", "scope_i", ")", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "'bnorm params = '", ",", "np", ".", "prod", "(", "layer", ".", "beta", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "+", "np", ".", "prod", "(", "layer", ".", "gamma", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ")", "\n", "\n", "", "", "if", "non_linearity", "is", "not", "None", ":", "\n", "            ", "layer", "=", "non_linearity", "(", "layer", ")", "\n", "\n", "", "if", "dropout_prob", "is", "not", "None", "and", "dropout_prob", "[", "i", "]", ">", "0", ":", "\n", "            ", "layer", "=", "dropout", "(", "layer", ",", "1.0", "-", "dropout_prob", "[", "i", "]", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "layer", ")", "\n", "print", "(", "'output size:'", ",", "np", ".", "prod", "(", "layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", ",", "'\\n'", ")", "\n", "\n", "# Last decoding layer never has a non-linearity.", "\n", "", "", "name", "=", "'decoder_fc_'", "+", "str", "(", "n_layers", "-", "1", ")", "\n", "scope_i", "=", "expand_scope_by_name", "(", "scope", ",", "name", ")", "\n", "layer", "=", "fully_connected", "(", "layer", ",", "layer_sizes", "[", "n_layers", "-", "1", "]", ",", "activation", "=", "'linear'", ",", "weights_init", "=", "'xavier'", ",", "name", "=", "name", ",", "regularizer", "=", "regularizer", ",", "weight_decay", "=", "weight_decay", ",", "reuse", "=", "reuse", ",", "scope", "=", "scope_i", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "name", ",", "'FC params = '", ",", "np", ".", "prod", "(", "layer", ".", "W", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "+", "np", ".", "prod", "(", "layer", ".", "b", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ",", ")", "\n", "\n", "", "if", "b_norm_finish", ":", "\n", "        ", "name", "+=", "'_bnorm'", "\n", "scope_i", "=", "expand_scope_by_name", "(", "scope", ",", "name", ")", "\n", "layer", "=", "batch_normalization", "(", "layer", ",", "decay", "=", "b_norm_decay_finish", ",", "name", "=", "name", ",", "reuse", "=", "reuse", ",", "scope", "=", "scope_i", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'bnorm params = '", ",", "np", ".", "prod", "(", "layer", ".", "beta", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "+", "np", ".", "prod", "(", "layer", ".", "gamma", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ")", "\n", "\n", "", "", "if", "verbose", ":", "\n", "        ", "print", "(", "layer", ")", "\n", "print", "(", "'output size:'", ",", "np", ".", "prod", "(", "layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", ",", "'\\n'", ")", "\n", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.encoders_decoders.decoder_with_convs_only": [[150, 197], ["len", "src.tf_utils.replicate_parameter_for_all_layers", "src.tf_utils.replicate_parameter_for_all_layers", "src.tf_utils.replicate_parameter_for_all_layers", "range", "print", "src.tf_utils.expand_scope_by_name", "conv_op", "str", "print", "src.tf_utils.expand_scope_by_name", "tflearn.layers.normalization.batch_normalization", "non_linearity", "tflearn.layers.core.dropout", "tensorflow.tile", "print", "print", "print", "numpy.prod", "numpy.prod", "numpy.prod", "tf.tile.W.get_shape().as_list", "tf.tile.b.get_shape().as_list", "numpy.prod", "numpy.prod", "tf.tile.get_shape().as_list", "tf.tile.beta.get_shape().as_list", "tf.tile.gamma.get_shape().as_list", "tf.tile.W.get_shape", "tf.tile.b.get_shape", "tf.tile.get_shape", "tf.tile.beta.get_shape", "tf.tile.gamma.get_shape"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.replicate_parameter_for_all_layers", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.replicate_parameter_for_all_layers", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.replicate_parameter_for_all_layers", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.expand_scope_by_name", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.expand_scope_by_name", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.dropout"], ["", "def", "decoder_with_convs_only", "(", "in_signal", ",", "n_filters", ",", "filter_sizes", ",", "strides", ",", "padding", "=", "'same'", ",", "b_norm", "=", "True", ",", "non_linearity", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "conv_op", "=", "conv_1d", ",", "regularizer", "=", "None", ",", "weight_decay", "=", "0.001", ",", "dropout_prob", "=", "None", ",", "upsample_sizes", "=", "None", ",", "\n", "b_norm_finish", "=", "False", ",", "scope", "=", "None", ",", "reuse", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "    ", "if", "verbose", ":", "\n", "        ", "print", "(", "'Building Decoder'", ")", "\n", "\n", "", "n_layers", "=", "len", "(", "n_filters", ")", "\n", "filter_sizes", "=", "replicate_parameter_for_all_layers", "(", "filter_sizes", ",", "n_layers", ")", "\n", "strides", "=", "replicate_parameter_for_all_layers", "(", "strides", ",", "n_layers", ")", "\n", "dropout_prob", "=", "replicate_parameter_for_all_layers", "(", "dropout_prob", ",", "n_layers", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "layer", "=", "in_signal", "\n", "\n", "", "name", "=", "'decoder_conv_layer_'", "+", "str", "(", "i", ")", "\n", "scope_i", "=", "expand_scope_by_name", "(", "scope", ",", "name", ")", "\n", "\n", "layer", "=", "conv_op", "(", "layer", ",", "nb_filter", "=", "n_filters", "[", "i", "]", ",", "filter_size", "=", "filter_sizes", "[", "i", "]", ",", "\n", "strides", "=", "strides", "[", "i", "]", ",", "padding", "=", "padding", ",", "regularizer", "=", "regularizer", ",", "weight_decay", "=", "weight_decay", ",", "\n", "name", "=", "name", ",", "reuse", "=", "reuse", ",", "scope", "=", "scope_i", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "name", ",", "'conv params = '", ",", "np", ".", "prod", "(", "layer", ".", "W", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "+", "np", ".", "prod", "(", "layer", ".", "b", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ",", ")", "\n", "\n", "", "if", "(", "b_norm", "and", "i", "<", "n_layers", "-", "1", ")", "or", "(", "i", "==", "n_layers", "-", "1", "and", "b_norm_finish", ")", ":", "\n", "            ", "name", "+=", "'_bnorm'", "\n", "scope_i", "=", "expand_scope_by_name", "(", "scope", ",", "name", ")", "\n", "layer", "=", "batch_normalization", "(", "layer", ",", "name", "=", "name", ",", "reuse", "=", "reuse", ",", "scope", "=", "scope_i", ")", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "'bnorm params = '", ",", "np", ".", "prod", "(", "layer", ".", "beta", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "+", "np", ".", "prod", "(", "layer", ".", "gamma", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ")", "\n", "\n", "", "", "if", "non_linearity", "is", "not", "None", "and", "i", "<", "n_layers", "-", "1", ":", "# Last layer doesn't have a non-linearity.", "\n", "            ", "layer", "=", "non_linearity", "(", "layer", ")", "\n", "\n", "", "if", "dropout_prob", "is", "not", "None", "and", "dropout_prob", "[", "i", "]", ">", "0", ":", "\n", "            ", "layer", "=", "dropout", "(", "layer", ",", "1.0", "-", "dropout_prob", "[", "i", "]", ")", "\n", "\n", "", "if", "upsample_sizes", "is", "not", "None", "and", "upsample_sizes", "[", "i", "]", "is", "not", "None", ":", "\n", "            ", "layer", "=", "tf", ".", "tile", "(", "layer", ",", "multiples", "=", "[", "1", ",", "upsample_sizes", "[", "i", "]", ",", "1", "]", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "layer", ")", "\n", "print", "(", "'output size:'", ",", "np", ".", "prod", "(", "layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", ",", "'\\n'", ")", "\n", "\n", "", "", "return", "layer", "\n", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.pointnet_ae.PointNetAutoEncoder.__init__": [[29, 70], ["src.autoencoder.AutoEncoder.__init__", "tensorflow.variable_scope", "c.encoder", "int", "c.decoder", "c.exists_and_is_not_none", "tensorflow.reshape", "tensorflow.global_variables", "tensorflow.train.Saver", "pointnet_ae.PointNetAutoEncoder._create_loss", "pointnet_ae.PointNetAutoEncoder._setup_optimizer", "hasattr", "tensorflow.ConfigProto", "tensorflow.summary.merge_all", "tensorflow.summary.FileWriter", "tensorflow.global_variables_initializer", "tensorflow.Session", "pointnet_ae.PointNetAutoEncoder.sess.run", "tensorflow.nn.tanh", "os.join", "pointnet_ae.PointNetAutoEncoder.z.get_shape"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.Configuration.exists_and_is_not_none", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.pointnet_ae.PointNetAutoEncoder._create_loss", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.pointnet_ae.PointNetAutoEncoder._setup_optimizer"], ["def", "__init__", "(", "self", ",", "name", ",", "configuration", ",", "graph", "=", "None", ")", ":", "\n", "        ", "c", "=", "configuration", "\n", "self", ".", "configuration", "=", "c", "\n", "\n", "AutoEncoder", ".", "__init__", "(", "self", ",", "name", ",", "graph", ",", "configuration", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "self", ".", "z", ",", "self", ".", "pre_symmetry", "=", "c", ".", "encoder", "(", "self", ".", "x", ",", "**", "c", ".", "encoder_args", ")", "\n", "self", ".", "bottleneck_size", "=", "int", "(", "self", ".", "z", ".", "get_shape", "(", ")", "[", "1", "]", ")", "\n", "layer", "=", "c", ".", "decoder", "(", "self", ".", "z", ",", "**", "c", ".", "decoder_args", ")", "\n", "\n", "if", "c", ".", "exists_and_is_not_none", "(", "'close_with_tanh'", ")", ":", "\n", "                ", "layer", "=", "tf", ".", "nn", ".", "tanh", "(", "layer", ")", "\n", "\n", "", "self", ".", "x_reconstr", "=", "tf", ".", "reshape", "(", "layer", ",", "[", "-", "1", ",", "self", ".", "n_output", "[", "0", "]", ",", "self", ".", "n_output", "[", "1", "]", "]", ")", "\n", "\n", "global_vars", "=", "tf", ".", "global_variables", "(", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "global_vars", ",", "max_to_keep", "=", "c", ".", "saver_max_to_keep", ")", "\n", "\n", "self", ".", "_create_loss", "(", ")", "\n", "self", ".", "_setup_optimizer", "(", ")", "\n", "\n", "# GPU configuration", "\n", "if", "hasattr", "(", "c", ",", "'allow_gpu_growth'", ")", ":", "\n", "                ", "growth", "=", "c", ".", "allow_gpu_growth", "\n", "", "else", ":", "\n", "                ", "growth", "=", "True", "\n", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "growth", "\n", "\n", "# Summaries", "\n", "self", ".", "merged_summaries", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "train_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "osp", ".", "join", "(", "configuration", ".", "train_dir", ",", "'summaries'", ")", ",", "self", ".", "graph", ")", "\n", "\n", "# Initializing the tensor flow variables", "\n", "self", ".", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "\n", "# Launch the session", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.pointnet_ae.PointNetAutoEncoder._create_loss": [[71, 89], ["pointnet_ae.PointNetAutoEncoder.graph.get_collection", "c.exists_and_is_not_none", "nn_distance", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "approx_match", "tensorflow.reduce_mean", "match_cost"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.Configuration.exists_and_is_not_none", "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_nndistance.nn_distance", "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_approxmatch.approx_match", "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_approxmatch.match_cost"], ["", "", "def", "_create_loss", "(", "self", ")", ":", "\n", "        ", "c", "=", "self", ".", "configuration", "\n", "\n", "if", "c", ".", "loss", "==", "'chamfer'", ":", "\n", "            ", "cost_p1_p2", ",", "_", ",", "cost_p2_p1", ",", "_", "=", "nn_distance", "(", "self", ".", "x_reconstr", ",", "self", ".", "gt", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "cost_p1_p2", ")", "+", "tf", ".", "reduce_mean", "(", "cost_p2_p1", ")", "\n", "", "elif", "c", ".", "loss", "==", "'emd'", ":", "\n", "            ", "match", "=", "approx_match", "(", "self", ".", "x_reconstr", ",", "self", ".", "gt", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "match_cost", "(", "self", ".", "x_reconstr", ",", "self", ".", "gt", ",", "match", ")", ")", "\n", "\n", "", "reg_losses", "=", "self", ".", "graph", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", "\n", "if", "c", ".", "exists_and_is_not_none", "(", "'w_reg_alpha'", ")", ":", "\n", "            ", "w_reg_alpha", "=", "c", ".", "w_reg_alpha", "\n", "", "else", ":", "\n", "            ", "w_reg_alpha", "=", "1.0", "\n", "\n", "", "for", "rl", "in", "reg_losses", ":", "\n", "            ", "self", ".", "loss", "+=", "(", "w_reg_alpha", "*", "rl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.pointnet_ae.PointNetAutoEncoder._setup_optimizer": [[90, 100], ["hasattr", "tensorflow.train.AdamOptimizer", "pointnet_ae.PointNetAutoEncoder.optimizer.minimize", "tensorflow.train.exponential_decay", "tensorflow.maximum", "tensorflow.summary.scalar"], "methods", ["None"], ["", "", "def", "_setup_optimizer", "(", "self", ")", ":", "\n", "        ", "c", "=", "self", ".", "configuration", "\n", "self", ".", "lr", "=", "c", ".", "learning_rate", "\n", "if", "hasattr", "(", "c", ",", "'exponential_decay'", ")", ":", "\n", "            ", "self", ".", "lr", "=", "tf", ".", "train", ".", "exponential_decay", "(", "c", ".", "learning_rate", ",", "self", ".", "epoch", ",", "c", ".", "decay_steps", ",", "decay_rate", "=", "0.5", ",", "staircase", "=", "True", ",", "name", "=", "\"learning_rate_decay\"", ")", "\n", "self", ".", "lr", "=", "tf", ".", "maximum", "(", "self", ".", "lr", ",", "1e-5", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate'", ",", "self", ".", "lr", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", "\n", "self", ".", "train_step", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.pointnet_ae.PointNetAutoEncoder._single_epoch_train": [[101, 139], ["int", "time.time", "range", "src.general_utils.apply_augmentations", "time.time", "len", "train_data.next_batch", "train_data.next_batch", "fit", "fit"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.apply_augmentations", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.PointCloudDataSet.next_batch", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.PointCloudDataSet.next_batch"], ["", "def", "_single_epoch_train", "(", "self", ",", "train_data", ",", "configuration", ",", "only_fw", "=", "False", ")", ":", "\n", "        ", "n_examples", "=", "train_data", ".", "num_examples", "\n", "epoch_loss", "=", "0.", "\n", "batch_size", "=", "configuration", ".", "batch_size", "\n", "n_batches", "=", "int", "(", "n_examples", "/", "batch_size", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "only_fw", ":", "\n", "            ", "fit", "=", "self", ".", "reconstruct", "\n", "", "else", ":", "\n", "            ", "fit", "=", "self", ".", "partial_fit", "\n", "\n", "# Loop over all batches", "\n", "", "for", "_", "in", "range", "(", "n_batches", ")", ":", "\n", "\n", "            ", "if", "self", ".", "is_denoising", ":", "\n", "                ", "original_data", ",", "_", ",", "batch_i", "=", "train_data", ".", "next_batch", "(", "batch_size", ")", "\n", "if", "batch_i", "is", "None", ":", "# In this case the denoising concern only the augmentation.", "\n", "                    ", "batch_i", "=", "original_data", "\n", "", "", "else", ":", "\n", "                ", "batch_i", ",", "_", ",", "_", "=", "train_data", ".", "next_batch", "(", "batch_size", ")", "\n", "\n", "", "batch_i", "=", "apply_augmentations", "(", "batch_i", ",", "configuration", ")", "# This is a new copy of the batch.", "\n", "\n", "if", "self", ".", "is_denoising", ":", "\n", "                ", "_", ",", "loss", "=", "fit", "(", "batch_i", ",", "original_data", ")", "\n", "", "else", ":", "\n", "                ", "_", ",", "loss", "=", "fit", "(", "batch_i", ")", "\n", "\n", "# Compute average loss", "\n", "", "epoch_loss", "+=", "loss", "\n", "", "epoch_loss", "/=", "n_batches", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "if", "configuration", ".", "loss", "==", "'emd'", ":", "\n", "            ", "epoch_loss", "/=", "len", "(", "train_data", ".", "point_clouds", "[", "0", "]", ")", "\n", "\n", "", "return", "epoch_loss", ",", "duration", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.pointnet_ae.PointNetAutoEncoder.gradient_of_input_wrt_loss": [[140, 144], ["pointnet_ae.PointNetAutoEncoder.sess.run", "tensorflow.gradients"], "methods", ["None"], ["", "def", "gradient_of_input_wrt_loss", "(", "self", ",", "in_points", ",", "gt_points", "=", "None", ")", ":", "\n", "        ", "if", "gt_points", "is", "None", ":", "\n", "            ", "gt_points", "=", "in_points", "\n", "", "return", "self", ".", "sess", ".", "run", "(", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "self", ".", "x", ")", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "in_points", ",", "self", ".", "gt", ":", "gt_points", "}", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.neural_net.NeuralNet.__init__": [[15, 28], ["tensorflow.no_op", "tensorflow.get_default_graph", "tensorflow.variable_scope", "neural_net.NeuralNet.epoch.assign_add", "tensorflow.device", "tensorflow.get_variable", "tensorflow.constant", "tensorflow.constant_initializer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "graph", ")", ":", "\n", "        ", "if", "graph", "is", "None", ":", "\n", "            ", "graph", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "\n", "", "self", ".", "graph", "=", "graph", "\n", "self", ".", "name", "=", "name", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "                ", "self", ".", "epoch", "=", "tf", ".", "get_variable", "(", "'epoch'", ",", "[", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ",", "trainable", "=", "False", ")", "\n", "", "self", ".", "increment_epoch", "=", "self", ".", "epoch", ".", "assign_add", "(", "tf", ".", "constant", "(", "1.0", ")", ")", "\n", "\n", "", "self", ".", "no_op", "=", "tf", ".", "no_op", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.neural_net.NeuralNet.is_training": [[29, 32], ["neural_net.NeuralNet.graph.get_collection", "neural_net.NeuralNet.sess.run"], "methods", ["None"], ["", "def", "is_training", "(", "self", ")", ":", "\n", "        ", "is_training_op", "=", "self", ".", "graph", ".", "get_collection", "(", "'is_training'", ")", "\n", "return", "self", ".", "sess", ".", "run", "(", "is_training_op", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.neural_net.NeuralNet.restore_model": [[33, 43], ["neural_net.NeuralNet.saver.restore", "os.join", "neural_net.NeuralNet.epoch.eval", "warnings.warn", "print", "str", "int"], "methods", ["None"], ["", "def", "restore_model", "(", "self", ",", "model_path", ",", "epoch", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "'''Restore all the variables of a saved model.\n        '''", "\n", "self", ".", "saver", ".", "restore", "(", "self", ".", "sess", ",", "osp", ".", "join", "(", "model_path", ",", "MODEL_SAVER_ID", "+", "'-'", "+", "str", "(", "int", "(", "epoch", ")", ")", ")", ")", "\n", "\n", "if", "self", ".", "epoch", ".", "eval", "(", "session", "=", "self", ".", "sess", ")", "!=", "epoch", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Loaded model\\'s epoch doesn\\'t match the requested one.'", ")", "\n", "", "else", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "print", "(", "'Model restored in epoch {0}.'", ".", "format", "(", "epoch", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_autoencoder.AdversaryAutoEncoder.__init__": [[20, 41], ["src.neural_net.NeuralNet.__init__", "tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "graph", ",", "configuration", ")", ":", "\n", "        ", "NeuralNet", ".", "__init__", "(", "self", ",", "name", ",", "graph", ")", "\n", "self", ".", "is_denoising", "=", "configuration", ".", "is_denoising", "\n", "self", ".", "n_input", "=", "configuration", ".", "n_input", "\n", "self", ".", "n_output", "=", "configuration", ".", "n_output", "\n", "\n", "batch_size", "=", "configuration", ".", "batch_size", "# instead of None", "\n", "\n", "in_shape", "=", "[", "batch_size", "]", "+", "self", ".", "n_input", "\n", "out_shape", "=", "[", "batch_size", "]", "+", "self", ".", "n_output", "\n", "\n", "target_z_shape", "=", "[", "batch_size", "]", "+", "[", "configuration", ".", "encoder_args", "[", "'n_filters'", "]", "[", "-", "1", "]", "]", "\n", "dist_weight_shape", "=", "[", "batch_size", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "self", ".", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "in_shape", ")", "\n", "self", ".", "gt", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "out_shape", ")", "\n", "\n", "# for adversarial attack", "\n", "self", ".", "target_z", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "target_z_shape", ")", "\n", "self", ".", "dist_weight", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "dist_weight_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_autoencoder.AdversaryAutoEncoder.restore_ae_model": [[42, 52], ["tensorflow.global_variables", "tensorflow.train.Saver", "tensorflow.train.Saver.restore", "os.join", "print", "v.name.startswith", "str", "int"], "methods", ["None"], ["", "", "def", "restore_ae_model", "(", "self", ",", "ae_model_path", ",", "ae_name", ",", "epoch", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "'''Restore all the variables of a saved ae model.'''", "\n", "global_vars", "=", "tf", ".", "global_variables", "(", ")", "\n", "ae_params", "=", "[", "v", "for", "v", "in", "global_vars", "if", "v", ".", "name", ".", "startswith", "(", "ae_name", ")", "]", "\n", "\n", "saver_ae", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "ae_params", ")", "\n", "saver_ae", ".", "restore", "(", "self", ".", "sess", ",", "osp", ".", "join", "(", "ae_model_path", ",", "MODEL_SAVER_ID", "+", "'-'", "+", "str", "(", "int", "(", "epoch", ")", ")", ")", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'AE Model restored from %s, in epoch %d'", "%", "(", "ae_model_path", ",", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_autoencoder.AdversaryAutoEncoder.partial_fit": [[53, 74], ["tflearn.is_training", "tflearn.is_training", "tflearn.is_training", "adversary_autoencoder.AdversaryAutoEncoder.sess.run", "adversary_autoencoder.AdversaryAutoEncoder.sess.run"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.neural_net.NeuralNet.is_training", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.neural_net.NeuralNet.is_training", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.neural_net.NeuralNet.is_training"], ["", "", "def", "partial_fit", "(", "self", ",", "X", ",", "GT", "=", "None", ")", ":", "\n", "        ", "'''Trains the model with mini-batches of input data.\n        If GT is not None, then the reconstruction loss compares the output of the net that is fed X, with the GT.\n        This can be useful when training for instance a denoising auto-encoder.\n        Returns:\n            The loss of the mini-batch.\n            The reconstructed (output) point-clouds.\n        '''", "\n", "is_training", "(", "True", ",", "session", "=", "self", ".", "sess", ")", "\n", "try", ":", "\n", "            ", "if", "GT", "is", "not", "None", ":", "\n", "                ", "_", ",", "loss", ",", "recon", "=", "self", ".", "sess", ".", "run", "(", "(", "self", ".", "train_step", ",", "self", ".", "loss", ",", "self", ".", "x_reconstr", ")", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "X", ",", "self", ".", "gt", ":", "GT", "}", ")", "\n", "", "else", ":", "\n", "                ", "_", ",", "loss", ",", "recon", "=", "self", ".", "sess", ".", "run", "(", "(", "self", ".", "train_step", ",", "self", ".", "loss", ",", "self", ".", "x_reconstr", ")", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "X", "}", ")", "\n", "\n", "", "is_training", "(", "False", ",", "session", "=", "self", ".", "sess", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "raise", "\n", "", "finally", ":", "\n", "            ", "is_training", "(", "False", ",", "session", "=", "self", ".", "sess", ")", "\n", "", "return", "recon", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_autoencoder.AdversaryAutoEncoder.reconstruct": [[75, 92], ["adversary_autoencoder.AdversaryAutoEncoder.sess.run", "adversary_autoencoder.AdversaryAutoEncoder.sess.run"], "methods", ["None"], ["", "def", "reconstruct", "(", "self", ",", "X", ",", "GT", "=", "None", ",", "compute_loss", "=", "True", ",", "loss_per_pc", "=", "False", ")", ":", "\n", "        ", "'''Use AE to reconstruct given data.\n        GT will be used to measure the loss (e.g., if X is a noisy version of the GT)'''", "\n", "if", "compute_loss", ":", "\n", "            ", "if", "loss_per_pc", ":", "\n", "                ", "loss", "=", "self", ".", "loss_ae_per_pc", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "loss_ae", "\n", "", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "no_op", "\n", "\n", "", "x_reconstr", "=", "self", ".", "x_reconstr", "\n", "\n", "if", "GT", "is", "None", ":", "\n", "            ", "return", "self", ".", "sess", ".", "run", "(", "(", "x_reconstr", ",", "loss", ")", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "X", "}", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "sess", ".", "run", "(", "(", "x_reconstr", ",", "loss", ")", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "X", ",", "self", ".", "gt", ":", "GT", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_autoencoder.AdversaryAutoEncoder.get_ae_loss": [[93, 100], ["adversary_autoencoder.AdversaryAutoEncoder.sess.run"], "methods", ["None"], ["", "", "def", "get_ae_loss", "(", "self", ",", "X", ",", "GT", "=", "None", ")", ":", "\n", "        ", "if", "GT", "is", "None", ":", "\n", "            ", "feed_dict", "=", "{", "self", ".", "x", ":", "X", "}", "\n", "", "else", ":", "\n", "            ", "feed_dict", "=", "{", "self", ".", "x", ":", "X", ",", "self", ".", "gt", ":", "GT", "}", "\n", "\n", "", "return", "self", ".", "sess", ".", "run", "(", "self", ".", "loss_ae", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_autoencoder.AdversaryAutoEncoder.get_ae_loss_per_pc": [[101, 116], ["numpy.zeros", "range", "len", "adversary_autoencoder.AdversaryAutoEncoder.get_ae_loss"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_autoencoder.AdversaryAutoEncoder.get_ae_loss"], ["", "def", "get_ae_loss_per_pc", "(", "self", ",", "feed_data", ",", "orig_data", "=", "None", ")", ":", "\n", "        ", "feed_data_shape", "=", "feed_data", ".", "shape", "\n", "assert", "len", "(", "feed_data_shape", ")", "==", "3", ",", "'The feed data should have 3 dimensions'", "\n", "\n", "if", "orig_data", "is", "not", "None", ":", "\n", "            ", "assert", "feed_data_shape", "==", "orig_data", ".", "shape", ",", "'The feed data and original data should have the same size'", "\n", "", "else", ":", "\n", "            ", "orig_data", "=", "feed_data", "\n", "\n", "", "n_examples", "=", "feed_data_shape", "[", "0", "]", "\n", "ae_loss", "=", "np", ".", "zeros", "(", "n_examples", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n_examples", ",", "1", ")", ":", "\n", "            ", "ae_loss", "[", "i", "]", "=", "self", ".", "get_ae_loss", "(", "feed_data", "[", "i", ":", "i", "+", "1", "]", ",", "orig_data", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "\n", "", "return", "ae_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_autoencoder.AdversaryAutoEncoder.transform": [[117, 120], ["adversary_autoencoder.AdversaryAutoEncoder.sess.run"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "'''Transform data by mapping it into the latent space.'''", "\n", "return", "self", ".", "sess", ".", "run", "(", "self", ".", "z", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "X", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_autoencoder.AdversaryAutoEncoder.interpolate": [[121, 133], ["numpy.vstack", "adversary_autoencoder.AdversaryAutoEncoder.transform", "numpy.zeros", "enumerate", "adversary_autoencoder.AdversaryAutoEncoder.sess.run", "numpy.vstack.reshape", "numpy.linspace", "len"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.transform"], ["", "def", "interpolate", "(", "self", ",", "x", ",", "y", ",", "steps", ")", ":", "\n", "        ", "''' Interpolate between and x and y input vectors in latent space.\n        x, y np.arrays of size (n_points, dim_embedding).\n        '''", "\n", "in_feed", "=", "np", ".", "vstack", "(", "(", "x", ",", "y", ")", ")", "\n", "z1", ",", "z2", "=", "self", ".", "transform", "(", "in_feed", ".", "reshape", "(", "[", "2", "]", "+", "self", ".", "n_input", ")", ")", "\n", "all_z", "=", "np", ".", "zeros", "(", "(", "steps", "+", "2", ",", "len", "(", "z1", ")", ")", ")", "\n", "\n", "for", "i", ",", "alpha", "in", "enumerate", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "steps", "+", "2", ")", ")", ":", "\n", "            ", "all_z", "[", "i", ",", ":", "]", "=", "(", "alpha", "*", "z2", ")", "+", "(", "(", "1.0", "-", "alpha", ")", "*", "z1", ")", "\n", "\n", "", "return", "self", ".", "sess", ".", "run", "(", "(", "self", ".", "x_reconstr", ")", ",", "{", "self", ".", "z", ":", "all_z", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_autoencoder.AdversaryAutoEncoder.decode": [[134, 138], ["adversary_autoencoder.AdversaryAutoEncoder.sess.run", "numpy.ndim", "numpy.expand_dims"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "if", "np", ".", "ndim", "(", "z", ")", "==", "1", ":", "# single example", "\n", "            ", "z", "=", "np", ".", "expand_dims", "(", "z", ",", "0", ")", "\n", "", "return", "self", ".", "sess", ".", "run", "(", "(", "self", ".", "x_reconstr", ")", ",", "{", "self", ".", "z", ":", "z", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_autoencoder.AdversaryAutoEncoder.evaluate": [[139, 172], ["numpy.zeros", "range", "float", "print", "in_data.full_epoch_data", "src.general_utils.apply_augmentations", "in_data.full_epoch_data", "src.general_utils.apply_augmentations", "src.general_utils.apply_augmentations.copy", "adversary_autoencoder.AdversaryAutoEncoder.reconstruct", "adversary_autoencoder.AdversaryAutoEncoder.reconstruct", "len", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.PointCloudDataSet.full_epoch_data", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.apply_augmentations", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.PointCloudDataSet.full_epoch_data", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.apply_augmentations", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.reconstruct", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.reconstruct"], ["", "def", "evaluate", "(", "self", ",", "in_data", ",", "configuration", ",", "ret_pre_augmentation", "=", "False", ")", ":", "\n", "        ", "n_examples", "=", "in_data", ".", "num_examples", "\n", "data_loss", "=", "0.", "\n", "pre_aug", "=", "None", "\n", "if", "self", ".", "is_denoising", ":", "\n", "            ", "original_data", ",", "ids", ",", "feed_data", "=", "in_data", ".", "full_epoch_data", "(", "shuffle", "=", "False", ")", "\n", "if", "ret_pre_augmentation", ":", "\n", "                ", "pre_aug", "=", "feed_data", ".", "copy", "(", ")", "\n", "", "if", "feed_data", "is", "None", ":", "\n", "                ", "feed_data", "=", "original_data", "\n", "", "feed_data", "=", "apply_augmentations", "(", "feed_data", ",", "configuration", ")", "# This is a new copy of the batch.", "\n", "", "else", ":", "\n", "            ", "original_data", ",", "ids", ",", "_", "=", "in_data", ".", "full_epoch_data", "(", "shuffle", "=", "False", ")", "\n", "feed_data", "=", "apply_augmentations", "(", "original_data", ",", "configuration", ")", "\n", "\n", "", "b", "=", "configuration", ".", "batch_size", "\n", "reconstructions", "=", "np", ".", "zeros", "(", "[", "n_examples", "]", "+", "self", ".", "n_output", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n_examples", ",", "b", ")", ":", "\n", "            ", "if", "self", ".", "is_denoising", ":", "\n", "                ", "reconstructions", "[", "i", ":", "i", "+", "b", "]", ",", "loss", "=", "self", ".", "reconstruct", "(", "feed_data", "[", "i", ":", "i", "+", "b", "]", ",", "original_data", "[", "i", ":", "i", "+", "b", "]", ",", "sort_reconstr", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "reconstructions", "[", "i", ":", "i", "+", "b", "]", ",", "loss", "=", "self", ".", "reconstruct", "(", "feed_data", "[", "i", ":", "i", "+", "b", "]", ",", "sort_reconstr", "=", "True", ")", "\n", "\n", "# Compute average loss", "\n", "", "data_loss", "+=", "(", "loss", "*", "len", "(", "reconstructions", "[", "i", ":", "i", "+", "b", "]", ")", ")", "\n", "", "data_loss", "/=", "float", "(", "n_examples", ")", "\n", "\n", "print", "(", "\"evaluation loss=\"", ",", "\"{:.9f}\"", ".", "format", "(", "data_loss", ")", ")", "\n", "\n", "if", "pre_aug", "is", "not", "None", ":", "\n", "            ", "return", "reconstructions", ",", "data_loss", ",", "np", ".", "squeeze", "(", "feed_data", ")", ",", "ids", ",", "np", ".", "squeeze", "(", "original_data", ")", ",", "pre_aug", "\n", "", "else", ":", "\n", "            ", "return", "reconstructions", ",", "data_loss", ",", "np", ".", "squeeze", "(", "feed_data", ")", ",", "ids", ",", "np", ".", "squeeze", "(", "original_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_autoencoder.AdversaryAutoEncoder.embedding_at_tensor": [[173, 205], ["dataset.full_epoch_data", "numpy.vstack", "src.general_utils.apply_augmentations", "src.general_utils.iterate_in_chunks", "adversary_autoencoder.AdversaryAutoEncoder.graph.get_tensor_by_name", "src.general_utils.iterate_in_chunks", "numpy.vstack.append", "adversary_autoencoder.AdversaryAutoEncoder.sess.run", "numpy.vstack.append", "adversary_autoencoder.AdversaryAutoEncoder.transform", "b.reshape", "b.reshape", "len", "len"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.PointCloudDataSet.full_epoch_data", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.apply_augmentations", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.iterate_in_chunks", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.iterate_in_chunks", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.transform"], ["", "", "def", "embedding_at_tensor", "(", "self", ",", "dataset", ",", "conf", ",", "feed_original", "=", "True", ",", "apply_augmentation", "=", "False", ",", "tensor_name", "=", "'bottleneck'", ")", ":", "\n", "        ", "'''\n        Observation: the NN-neighborhoods seem more reasonable when we do not apply the augmentation.\n        Observation: the next layer after latent (z) might be something interesting.\n        tensor_name: e.g. model.name + '_1/decoder_fc_0/BiasAdd:0'\n        '''", "\n", "batch_size", "=", "conf", ".", "batch_size", "\n", "original", ",", "ids", ",", "noise", "=", "dataset", ".", "full_epoch_data", "(", "shuffle", "=", "False", ")", "\n", "\n", "if", "feed_original", ":", "\n", "            ", "feed", "=", "original", "\n", "", "else", ":", "\n", "            ", "feed", "=", "noise", "\n", "if", "feed", "is", "None", ":", "\n", "                ", "feed", "=", "original", "\n", "\n", "", "", "feed_data", "=", "feed", "\n", "if", "apply_augmentation", ":", "\n", "            ", "feed_data", "=", "apply_augmentations", "(", "feed", ",", "conf", ")", "\n", "\n", "", "embedding", "=", "[", "]", "\n", "if", "tensor_name", "==", "'bottleneck'", ":", "\n", "            ", "for", "b", "in", "iterate_in_chunks", "(", "feed_data", ",", "batch_size", ")", ":", "\n", "                ", "embedding", ".", "append", "(", "self", ".", "transform", "(", "b", ".", "reshape", "(", "[", "len", "(", "b", ")", "]", "+", "conf", ".", "n_input", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "embedding_tensor", "=", "self", ".", "graph", ".", "get_tensor_by_name", "(", "tensor_name", ")", "\n", "for", "b", "in", "iterate_in_chunks", "(", "feed_data", ",", "batch_size", ")", ":", "\n", "                ", "codes", "=", "self", ".", "sess", ".", "run", "(", "embedding_tensor", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "b", ".", "reshape", "(", "[", "len", "(", "b", ")", "]", "+", "conf", ".", "n_input", ")", "}", ")", "\n", "embedding", ".", "append", "(", "codes", ")", "\n", "\n", "", "", "embedding", "=", "np", ".", "vstack", "(", "embedding", ")", "\n", "return", "feed", ",", "embedding", ",", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_autoencoder.AdversaryAutoEncoder.get_reconstructions": [[206, 218], ["numpy.arange", "src.general_utils.iterate_in_chunks", "numpy.vstack", "len", "adversary_autoencoder.AdversaryAutoEncoder.reconstruct", "reconstructions.append"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.iterate_in_chunks", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.reconstruct"], ["", "def", "get_reconstructions", "(", "self", ",", "pclouds", ",", "batch_size", "=", "50", ")", ":", "\n", "        ", "''' Convenience wrapper of self.reconstruct to get reconstructions of input point clouds.\n        Args:\n            pclouds (N, K, 3) numpy array of N point clouds with K points each.\n        '''", "\n", "\n", "reconstructions", "=", "[", "]", "\n", "idx", "=", "np", ".", "arange", "(", "len", "(", "pclouds", ")", ")", "\n", "for", "b", "in", "iterate_in_chunks", "(", "idx", ",", "batch_size", ")", ":", "\n", "            ", "rcon", ",", "_", "=", "self", ".", "reconstruct", "(", "pclouds", "[", "b", "]", ",", "compute_loss", "=", "False", ")", "\n", "reconstructions", ".", "append", "(", "rcon", ")", "\n", "", "return", "np", ".", "vstack", "(", "reconstructions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_autoencoder.AdversaryAutoEncoder.get_latent_vectors": [[219, 230], ["numpy.arange", "src.general_utils.iterate_in_chunks", "numpy.vstack", "len", "latent_codes.append", "adversary_autoencoder.AdversaryAutoEncoder.transform"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.iterate_in_chunks", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.transform"], ["", "def", "get_latent_vectors", "(", "self", ",", "pclouds", ",", "batch_size", "=", "50", ")", ":", "\n", "        ", "''' Convenience wrapper of self.transform to get the latent (bottle-neck) codes for a set of input point \n        clouds.\n        Args:\n            pclouds (N, K, 3) numpy array of N point clouds with K points each.\n        '''", "\n", "latent_codes", "=", "[", "]", "\n", "idx", "=", "np", ".", "arange", "(", "len", "(", "pclouds", ")", ")", "\n", "for", "b", "in", "iterate_in_chunks", "(", "idx", ",", "batch_size", ")", ":", "\n", "            ", "latent_codes", ".", "append", "(", "self", ".", "transform", "(", "pclouds", "[", "b", "]", ")", ")", "\n", "", "return", "np", ".", "vstack", "(", "latent_codes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.ae_templates.mlp_architecture": [[11, 40], ["ValueError", "encoder_args[].pop", "numpy.prod"], "function", ["None"], ["def", "mlp_architecture", "(", "n_pc_points", ",", "bneck_size", ",", "bneck_post_mlp", "=", "False", ",", "check_n_pc_points", "=", "True", ")", ":", "\n", "    ", "''' Single class experiments.\n    '''", "\n", "if", "check_n_pc_points", "and", "n_pc_points", "!=", "2048", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "\n", "", "encoder", "=", "encoder_with_convs_and_symmetry", "\n", "decoder", "=", "decoder_with_fc_only", "\n", "\n", "n_input", "=", "[", "n_pc_points", ",", "3", "]", "\n", "\n", "encoder_args", "=", "{", "'n_filters'", ":", "[", "64", ",", "128", ",", "128", ",", "256", ",", "bneck_size", "]", ",", "\n", "'filter_sizes'", ":", "[", "1", "]", ",", "\n", "'strides'", ":", "[", "1", "]", ",", "\n", "'b_norm'", ":", "True", ",", "\n", "'verbose'", ":", "True", "\n", "}", "\n", "\n", "decoder_args", "=", "{", "'layer_sizes'", ":", "[", "256", ",", "256", ",", "np", ".", "prod", "(", "n_input", ")", "]", ",", "\n", "'b_norm'", ":", "False", ",", "\n", "'b_norm_finish'", ":", "False", ",", "\n", "'verbose'", ":", "True", "\n", "}", "\n", "\n", "if", "bneck_post_mlp", ":", "\n", "        ", "encoder_args", "[", "'n_filters'", "]", ".", "pop", "(", ")", "\n", "decoder_args", "[", "'layer_sizes'", "]", "[", "0", "]", "=", "bneck_size", "\n", "\n", "", "return", "encoder", ",", "decoder", ",", "encoder_args", ",", "decoder_args", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.ae_templates.default_train_params": [[42, 52], ["None"], "function", ["None"], ["", "def", "default_train_params", "(", ")", ":", "\n", "    ", "params", "=", "{", "'batch_size'", ":", "50", ",", "\n", "'training_epochs'", ":", "500", ",", "\n", "'denoising'", ":", "False", ",", "\n", "'learning_rate'", ":", "0.0005", ",", "\n", "'z_rotate'", ":", "False", ",", "\n", "'saver_step'", ":", "50", ",", "\n", "'loss_display_step'", ":", "1", "\n", "}", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.Configuration.__init__": [[20, 58], ["loss.lower", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_input", ",", "encoder", ",", "decoder", ",", "encoder_args", "=", "{", "}", ",", "decoder_args", "=", "{", "}", ",", "\n", "training_epochs", "=", "200", ",", "batch_size", "=", "10", ",", "learning_rate", "=", "0.001", ",", "denoising", "=", "False", ",", "\n", "saver_step", "=", "None", ",", "train_dir", "=", "None", ",", "z_rotate", "=", "False", ",", "loss", "=", "'chamfer'", ",", "gauss_augment", "=", "None", ",", "\n", "saver_max_to_keep", "=", "None", ",", "loss_display_step", "=", "1", ",", "debug", "=", "False", ",", "\n", "n_z", "=", "None", ",", "n_output", "=", "None", ",", "latent_vs_recon", "=", "1.0", ",", "consistent_io", "=", "None", ")", ":", "\n", "\n", "# Parameters for any AE", "\n", "        ", "self", ".", "n_input", "=", "n_input", "\n", "self", ".", "is_denoising", "=", "denoising", "\n", "self", ".", "loss", "=", "loss", ".", "lower", "(", ")", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "encoder_args", "=", "encoder_args", "\n", "self", ".", "decoder_args", "=", "decoder_args", "\n", "\n", "# Training related parameters", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "loss_display_step", "=", "loss_display_step", "\n", "self", ".", "saver_step", "=", "saver_step", "\n", "self", ".", "train_dir", "=", "train_dir", "\n", "self", ".", "gauss_augment", "=", "gauss_augment", "\n", "self", ".", "z_rotate", "=", "z_rotate", "\n", "self", ".", "saver_max_to_keep", "=", "saver_max_to_keep", "\n", "self", ".", "training_epochs", "=", "training_epochs", "\n", "self", ".", "debug", "=", "debug", "\n", "\n", "# Used in VAE", "\n", "self", ".", "latent_vs_recon", "=", "np", ".", "array", "(", "[", "latent_vs_recon", "]", ",", "dtype", "=", "np", ".", "float32", ")", "[", "0", "]", "\n", "self", ".", "n_z", "=", "n_z", "\n", "\n", "# Used in AP", "\n", "if", "n_output", "is", "None", ":", "\n", "            ", "self", ".", "n_output", "=", "n_input", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_output", "=", "n_output", "\n", "\n", "", "self", ".", "consistent_io", "=", "consistent_io", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.Configuration.exists_and_is_not_none": [[59, 61], ["hasattr", "getattr"], "methods", ["None"], ["", "def", "exists_and_is_not_none", "(", "self", ",", "attribute", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "attribute", ")", "and", "getattr", "(", "self", ",", "attribute", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.Configuration.__str__": [[62, 74], ["list", "list", "numpy.argsort", "autoencoder.Configuration.__dict__.keys", "autoencoder.Configuration.__dict__.values", "callable", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "keys", "=", "list", "(", "self", ".", "__dict__", ".", "keys", "(", ")", ")", "\n", "vals", "=", "list", "(", "self", ".", "__dict__", ".", "values", "(", ")", ")", "\n", "index", "=", "np", ".", "argsort", "(", "keys", ")", "\n", "res", "=", "''", "\n", "for", "i", "in", "index", ":", "\n", "            ", "if", "callable", "(", "vals", "[", "i", "]", ")", ":", "\n", "                ", "v", "=", "vals", "[", "i", "]", ".", "__name__", "\n", "", "else", ":", "\n", "                ", "v", "=", "str", "(", "vals", "[", "i", "]", ")", "\n", "", "res", "+=", "'%30s: %s\\n'", "%", "(", "str", "(", "keys", "[", "i", "]", ")", ",", "v", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.Configuration.save": [[75, 79], ["src.in_out.pickle_data", "open", "fout.write", "autoencoder.Configuration.__str__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.pickle_data", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.__str__"], ["", "def", "save", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "pickle_data", "(", "file_name", "+", "'.pickle'", ",", "self", ")", "\n", "with", "open", "(", "file_name", "+", "'.txt'", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "self", ".", "__str__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.Configuration.load": [[80, 83], ["src.in_out.unpickle_data().__next__", "src.in_out.unpickle_data"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.unpickle_data"], ["", "", "@", "staticmethod", "\n", "def", "load", "(", "file_name", ")", ":", "\n", "        ", "return", "unpickle_data", "(", "file_name", "+", "'.pickle'", ")", ".", "__next__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.__init__": [[89, 104], ["src.neural_net.NeuralNet.__init__", "tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "graph", ",", "configuration", ")", ":", "\n", "        ", "NeuralNet", ".", "__init__", "(", "self", ",", "name", ",", "graph", ")", "\n", "self", ".", "is_denoising", "=", "configuration", ".", "is_denoising", "\n", "self", ".", "n_input", "=", "configuration", ".", "n_input", "\n", "self", ".", "n_output", "=", "configuration", ".", "n_output", "\n", "\n", "in_shape", "=", "[", "None", "]", "+", "self", ".", "n_input", "\n", "out_shape", "=", "[", "None", "]", "+", "self", ".", "n_output", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "self", ".", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "in_shape", ")", "\n", "if", "self", ".", "is_denoising", ":", "\n", "                ", "self", ".", "gt", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "out_shape", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "gt", "=", "self", ".", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.partial_fit": [[105, 126], ["tflearn.is_training", "tflearn.is_training", "tflearn.is_training", "autoencoder.AutoEncoder.sess.run", "autoencoder.AutoEncoder.sess.run"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.neural_net.NeuralNet.is_training", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.neural_net.NeuralNet.is_training", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.neural_net.NeuralNet.is_training"], ["", "", "", "def", "partial_fit", "(", "self", ",", "X", ",", "GT", "=", "None", ")", ":", "\n", "        ", "'''Trains the model with mini-batches of input data.\n        If GT is not None, then the reconstruction loss compares the output of the net that is fed X, with the GT.\n        This can be useful when training for instance a denoising auto-encoder.\n        Returns:\n            The loss of the mini-batch.\n            The reconstructed (output) point-clouds.\n        '''", "\n", "is_training", "(", "True", ",", "session", "=", "self", ".", "sess", ")", "\n", "try", ":", "\n", "            ", "if", "GT", "is", "not", "None", ":", "\n", "                ", "_", ",", "loss", ",", "recon", "=", "self", ".", "sess", ".", "run", "(", "(", "self", ".", "train_step", ",", "self", ".", "loss", ",", "self", ".", "x_reconstr", ")", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "X", ",", "self", ".", "gt", ":", "GT", "}", ")", "\n", "", "else", ":", "\n", "                ", "_", ",", "loss", ",", "recon", "=", "self", ".", "sess", ".", "run", "(", "(", "self", ".", "train_step", ",", "self", ".", "loss", ",", "self", ".", "x_reconstr", ")", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "X", "}", ")", "\n", "\n", "", "is_training", "(", "False", ",", "session", "=", "self", ".", "sess", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "raise", "\n", "", "finally", ":", "\n", "            ", "is_training", "(", "False", ",", "session", "=", "self", ".", "sess", ")", "\n", "", "return", "recon", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.reconstruct": [[127, 139], ["autoencoder.AutoEncoder.sess.run", "autoencoder.AutoEncoder.sess.run"], "methods", ["None"], ["", "def", "reconstruct", "(", "self", ",", "X", ",", "GT", "=", "None", ",", "compute_loss", "=", "True", ")", ":", "\n", "        ", "'''Use AE to reconstruct given data.\n        GT will be used to measure the loss (e.g., if X is a noisy version of the GT)'''", "\n", "if", "compute_loss", ":", "\n", "            ", "loss", "=", "self", ".", "loss", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "no_op", "\n", "\n", "", "if", "GT", "is", "None", ":", "\n", "            ", "return", "self", ".", "sess", ".", "run", "(", "(", "self", ".", "x_reconstr", ",", "loss", ")", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "X", "}", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "sess", ".", "run", "(", "(", "self", ".", "x_reconstr", ",", "loss", ")", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "X", ",", "self", ".", "gt", ":", "GT", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.get_loss": [[140, 149], ["autoencoder.AutoEncoder.sess.run"], "methods", ["None"], ["", "", "def", "get_loss", "(", "self", ",", "X", ",", "GT", "=", "None", ")", ":", "\n", "        ", "if", "GT", "is", "None", ":", "\n", "            ", "feed_dict", "=", "{", "self", ".", "x", ":", "X", "}", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "is_denoising", "is", "True", ",", "'When GT is not None, self.is_denoising should be True in order to have separate placeholder for self.gt'", "\n", "feed_dict", "=", "{", "self", ".", "x", ":", "X", ",", "self", ".", "gt", ":", "GT", "}", "\n", "\n", "", "return", "self", ".", "sess", ".", "run", "(", "self", ".", "loss", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.get_loss_per_pc": [[150, 169], ["numpy.zeros", "range", "len", "autoencoder.AutoEncoder.get_loss", "autoencoder.AutoEncoder.get_loss"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls.get_loss", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls.get_loss"], ["", "def", "get_loss_per_pc", "(", "self", ",", "feed_data", ",", "orig_data", "=", "None", ")", ":", "\n", "        ", "feed_data_shape", "=", "feed_data", ".", "shape", "\n", "assert", "len", "(", "feed_data_shape", ")", "==", "3", ",", "'The feed data should have 3 dimensions'", "\n", "\n", "if", "self", ".", "is_denoising", "is", "True", "and", "orig_data", "is", "None", ":", "\n", "            ", "orig_data", "=", "feed_data", "\n", "\n", "", "if", "orig_data", "is", "not", "None", ":", "\n", "            ", "assert", "feed_data_shape", "==", "orig_data", ".", "shape", ",", "'The feed data and original data should have the same size'", "\n", "\n", "", "n_examples", "=", "feed_data_shape", "[", "0", "]", "\n", "ae_loss", "=", "np", ".", "zeros", "(", "n_examples", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n_examples", ",", "1", ")", ":", "\n", "            ", "if", "orig_data", "is", "not", "None", ":", "\n", "                ", "ae_loss", "[", "i", "]", "=", "self", ".", "get_loss", "(", "feed_data", "[", "i", ":", "i", "+", "1", "]", ",", "orig_data", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "ae_loss", "[", "i", "]", "=", "self", ".", "get_loss", "(", "feed_data", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "\n", "", "", "return", "ae_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.get_pre_symmetry": [[170, 173], ["autoencoder.AutoEncoder.sess.run"], "methods", ["None"], ["", "def", "get_pre_symmetry", "(", "self", ",", "X", ")", ":", "\n", "        ", "'''Get data before symmetry operation.'''", "\n", "return", "self", ".", "sess", ".", "run", "(", "self", ".", "pre_symmetry", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "X", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.transform": [[174, 177], ["autoencoder.AutoEncoder.sess.run"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "X", ")", ":", "\n", "        ", "'''Transform data by mapping it into the latent space.'''", "\n", "return", "self", ".", "sess", ".", "run", "(", "self", ".", "z", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "X", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.interpolate": [[178, 190], ["numpy.vstack", "autoencoder.AutoEncoder.transform", "numpy.zeros", "enumerate", "autoencoder.AutoEncoder.sess.run", "numpy.vstack.reshape", "numpy.linspace", "len"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.transform"], ["", "def", "interpolate", "(", "self", ",", "x", ",", "y", ",", "steps", ")", ":", "\n", "        ", "''' Interpolate between and x and y input vectors in latent space.\n        x, y np.arrays of size (n_points, dim_embedding).\n        '''", "\n", "in_feed", "=", "np", ".", "vstack", "(", "(", "x", ",", "y", ")", ")", "\n", "z1", ",", "z2", "=", "self", ".", "transform", "(", "in_feed", ".", "reshape", "(", "[", "2", "]", "+", "self", ".", "n_input", ")", ")", "\n", "all_z", "=", "np", ".", "zeros", "(", "(", "steps", "+", "2", ",", "len", "(", "z1", ")", ")", ")", "\n", "\n", "for", "i", ",", "alpha", "in", "enumerate", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "steps", "+", "2", ")", ")", ":", "\n", "            ", "all_z", "[", "i", ",", ":", "]", "=", "(", "alpha", "*", "z2", ")", "+", "(", "(", "1.0", "-", "alpha", ")", "*", "z1", ")", "\n", "\n", "", "return", "self", ".", "sess", ".", "run", "(", "(", "self", ".", "x_reconstr", ")", ",", "{", "self", ".", "z", ":", "all_z", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.decode": [[191, 195], ["autoencoder.AutoEncoder.sess.run", "numpy.ndim", "numpy.expand_dims"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "if", "np", ".", "ndim", "(", "z", ")", "==", "1", ":", "# single example", "\n", "            ", "z", "=", "np", ".", "expand_dims", "(", "z", ",", "0", ")", "\n", "", "return", "self", ".", "sess", ".", "run", "(", "(", "self", ".", "x_reconstr", ")", ",", "{", "self", ".", "z", ":", "z", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.train": [[196, 228], ["range", "src.in_out.create_dir", "autoencoder.AutoEncoder._single_epoch_train", "int", "stats.append", "autoencoder.AutoEncoder.sess.run", "print", "os.join", "autoencoder.AutoEncoder.saver.save", "c.exists_and_is_not_none", "autoencoder.AutoEncoder.sess.run", "autoencoder.AutoEncoder.train_writer.add_summary", "c.exists_and_is_not_none", "autoencoder.AutoEncoder._single_epoch_train", "print", "log_file.write", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.create_dir", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.pointnet_ae.PointNetAutoEncoder._single_epoch_train", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.Configuration.exists_and_is_not_none", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.Configuration.exists_and_is_not_none", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.pointnet_ae.PointNetAutoEncoder._single_epoch_train", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write"], ["", "def", "train", "(", "self", ",", "train_data", ",", "configuration", ",", "log_file", "=", "None", ",", "held_out_data", "=", "None", ")", ":", "\n", "        ", "c", "=", "configuration", "\n", "stats", "=", "[", "]", "\n", "\n", "if", "c", ".", "saver_step", "is", "not", "None", ":", "\n", "            ", "create_dir", "(", "c", ".", "train_dir", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "c", ".", "training_epochs", ")", ":", "\n", "            ", "loss", ",", "duration", "=", "self", ".", "_single_epoch_train", "(", "train_data", ",", "c", ")", "\n", "epoch", "=", "int", "(", "self", ".", "sess", ".", "run", "(", "self", ".", "increment_epoch", ")", ")", "\n", "stats", ".", "append", "(", "(", "epoch", ",", "loss", ",", "duration", ")", ")", "\n", "\n", "if", "epoch", "%", "c", ".", "loss_display_step", "==", "0", ":", "\n", "                ", "print", "(", "\"Epoch:\"", ",", "'%04d'", "%", "(", "epoch", ")", ",", "'training time (minutes)='", ",", "\"{:.4f}\"", ".", "format", "(", "duration", "/", "60.0", ")", ",", "\"loss=\"", ",", "\"{:.9f}\"", ".", "format", "(", "loss", ")", ")", "\n", "if", "log_file", "is", "not", "None", ":", "\n", "                    ", "log_file", ".", "write", "(", "'%04d\\t%.9f\\t%.4f\\n'", "%", "(", "epoch", ",", "loss", ",", "duration", "/", "60.0", ")", ")", "\n", "\n", "# Save the models checkpoint periodically.", "\n", "", "", "if", "c", ".", "saver_step", "is", "not", "None", "and", "(", "epoch", "%", "c", ".", "saver_step", "==", "0", "or", "epoch", "-", "1", "==", "0", ")", ":", "\n", "                ", "checkpoint_path", "=", "osp", ".", "join", "(", "c", ".", "train_dir", ",", "MODEL_SAVER_ID", ")", "\n", "self", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "checkpoint_path", ",", "global_step", "=", "self", ".", "epoch", ")", "\n", "\n", "", "if", "c", ".", "exists_and_is_not_none", "(", "'summary_step'", ")", "and", "(", "epoch", "%", "c", ".", "summary_step", "==", "0", "or", "epoch", "-", "1", "==", "0", ")", ":", "\n", "                ", "summary", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "merged_summaries", ")", "\n", "self", ".", "train_writer", ".", "add_summary", "(", "summary", ",", "epoch", ")", "\n", "\n", "", "if", "held_out_data", "is", "not", "None", "and", "c", ".", "exists_and_is_not_none", "(", "'held_out_step'", ")", "and", "(", "epoch", "%", "c", ".", "held_out_step", "==", "0", ")", ":", "\n", "                ", "loss", ",", "duration", "=", "self", ".", "_single_epoch_train", "(", "held_out_data", ",", "c", ",", "only_fw", "=", "True", ")", "\n", "print", "(", "\"Held Out Data :\"", ",", "'forward time (minutes)='", ",", "\"{:.4f}\"", ".", "format", "(", "duration", "/", "60.0", ")", ",", "\"loss=\"", ",", "\"{:.9f}\"", ".", "format", "(", "loss", ")", ")", "\n", "if", "log_file", "is", "not", "None", ":", "\n", "                    ", "log_file", ".", "write", "(", "'On Held_Out: %04d\\t%.9f\\t%.4f\\n'", "%", "(", "epoch", ",", "loss", ",", "duration", "/", "60.0", ")", ")", "\n", "", "", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.evaluate": [[229, 262], ["numpy.zeros", "range", "float", "print", "in_data.full_epoch_data", "src.general_utils.apply_augmentations", "in_data.full_epoch_data", "src.general_utils.apply_augmentations", "src.general_utils.apply_augmentations.copy", "autoencoder.AutoEncoder.reconstruct", "autoencoder.AutoEncoder.reconstruct", "len", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.PointCloudDataSet.full_epoch_data", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.apply_augmentations", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.PointCloudDataSet.full_epoch_data", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.apply_augmentations", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.reconstruct", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.reconstruct"], ["", "def", "evaluate", "(", "self", ",", "in_data", ",", "configuration", ",", "ret_pre_augmentation", "=", "False", ")", ":", "\n", "        ", "n_examples", "=", "in_data", ".", "num_examples", "\n", "data_loss", "=", "0.", "\n", "pre_aug", "=", "None", "\n", "if", "self", ".", "is_denoising", ":", "\n", "            ", "original_data", ",", "ids", ",", "feed_data", "=", "in_data", ".", "full_epoch_data", "(", "shuffle", "=", "False", ")", "\n", "if", "ret_pre_augmentation", ":", "\n", "                ", "pre_aug", "=", "feed_data", ".", "copy", "(", ")", "\n", "", "if", "feed_data", "is", "None", ":", "\n", "                ", "feed_data", "=", "original_data", "\n", "", "feed_data", "=", "apply_augmentations", "(", "feed_data", ",", "configuration", ")", "# This is a new copy of the batch.", "\n", "", "else", ":", "\n", "            ", "original_data", ",", "ids", ",", "_", "=", "in_data", ".", "full_epoch_data", "(", "shuffle", "=", "False", ")", "\n", "feed_data", "=", "apply_augmentations", "(", "original_data", ",", "configuration", ")", "\n", "\n", "", "b", "=", "configuration", ".", "batch_size", "\n", "reconstructions", "=", "np", ".", "zeros", "(", "[", "n_examples", "]", "+", "self", ".", "n_output", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n_examples", ",", "b", ")", ":", "\n", "            ", "if", "self", ".", "is_denoising", ":", "\n", "                ", "reconstructions", "[", "i", ":", "i", "+", "b", "]", ",", "loss", "=", "self", ".", "reconstruct", "(", "feed_data", "[", "i", ":", "i", "+", "b", "]", ",", "original_data", "[", "i", ":", "i", "+", "b", "]", ",", "sort_reconstr", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "reconstructions", "[", "i", ":", "i", "+", "b", "]", ",", "loss", "=", "self", ".", "reconstruct", "(", "feed_data", "[", "i", ":", "i", "+", "b", "]", ",", "sort_reconstr", "=", "True", ")", "\n", "\n", "# Compute average loss", "\n", "", "data_loss", "+=", "(", "loss", "*", "len", "(", "reconstructions", "[", "i", ":", "i", "+", "b", "]", ")", ")", "\n", "", "data_loss", "/=", "float", "(", "n_examples", ")", "\n", "\n", "print", "(", "\"evaluation loss=\"", ",", "\"{:.9f}\"", ".", "format", "(", "data_loss", ")", ")", "\n", "\n", "if", "pre_aug", "is", "not", "None", ":", "\n", "            ", "return", "reconstructions", ",", "data_loss", ",", "np", ".", "squeeze", "(", "feed_data", ")", ",", "ids", ",", "np", ".", "squeeze", "(", "original_data", ")", ",", "pre_aug", "\n", "", "else", ":", "\n", "            ", "return", "reconstructions", ",", "data_loss", ",", "np", ".", "squeeze", "(", "feed_data", ")", ",", "ids", ",", "np", ".", "squeeze", "(", "original_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.embedding_at_tensor": [[263, 295], ["dataset.full_epoch_data", "numpy.vstack", "src.general_utils.apply_augmentations", "src.general_utils.iterate_in_chunks", "autoencoder.AutoEncoder.graph.get_tensor_by_name", "src.general_utils.iterate_in_chunks", "numpy.vstack.append", "autoencoder.AutoEncoder.sess.run", "numpy.vstack.append", "autoencoder.AutoEncoder.transform", "b.reshape", "b.reshape", "len", "len"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.PointCloudDataSet.full_epoch_data", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.apply_augmentations", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.iterate_in_chunks", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.iterate_in_chunks", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.transform"], ["", "", "def", "embedding_at_tensor", "(", "self", ",", "dataset", ",", "conf", ",", "feed_original", "=", "True", ",", "apply_augmentation", "=", "False", ",", "tensor_name", "=", "'bottleneck'", ")", ":", "\n", "        ", "'''\n        Observation: the NN-neighborhoods seem more reasonable when we do not apply the augmentation.\n        Observation: the next layer after latent (z) might be something interesting.\n        tensor_name: e.g. model.name + '_1/decoder_fc_0/BiasAdd:0'\n        '''", "\n", "batch_size", "=", "conf", ".", "batch_size", "\n", "original", ",", "ids", ",", "noise", "=", "dataset", ".", "full_epoch_data", "(", "shuffle", "=", "False", ")", "\n", "\n", "if", "feed_original", ":", "\n", "            ", "feed", "=", "original", "\n", "", "else", ":", "\n", "            ", "feed", "=", "noise", "\n", "if", "feed", "is", "None", ":", "\n", "                ", "feed", "=", "original", "\n", "\n", "", "", "feed_data", "=", "feed", "\n", "if", "apply_augmentation", ":", "\n", "            ", "feed_data", "=", "apply_augmentations", "(", "feed", ",", "conf", ")", "\n", "\n", "", "embedding", "=", "[", "]", "\n", "if", "tensor_name", "==", "'bottleneck'", ":", "\n", "            ", "for", "b", "in", "iterate_in_chunks", "(", "feed_data", ",", "batch_size", ")", ":", "\n", "                ", "embedding", ".", "append", "(", "self", ".", "transform", "(", "b", ".", "reshape", "(", "[", "len", "(", "b", ")", "]", "+", "conf", ".", "n_input", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "embedding_tensor", "=", "self", ".", "graph", ".", "get_tensor_by_name", "(", "tensor_name", ")", "\n", "for", "b", "in", "iterate_in_chunks", "(", "feed_data", ",", "batch_size", ")", ":", "\n", "                ", "codes", "=", "self", ".", "sess", ".", "run", "(", "embedding_tensor", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "b", ".", "reshape", "(", "[", "len", "(", "b", ")", "]", "+", "conf", ".", "n_input", ")", "}", ")", "\n", "embedding", ".", "append", "(", "codes", ")", "\n", "\n", "", "", "embedding", "=", "np", ".", "vstack", "(", "embedding", ")", "\n", "return", "feed", ",", "embedding", ",", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.get_reconstructions": [[296, 308], ["numpy.arange", "src.general_utils.iterate_in_chunks", "numpy.vstack", "len", "autoencoder.AutoEncoder.reconstruct", "reconstructions.append"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.iterate_in_chunks", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.reconstruct"], ["", "def", "get_reconstructions", "(", "self", ",", "pclouds", ",", "batch_size", "=", "50", ")", ":", "\n", "        ", "''' Convenience wrapper of self.reconstruct to get reconstructions of input point clouds.\n        Args:\n            pclouds (N, K, 3) numpy array of N point clouds with K points each.\n        '''", "\n", "\n", "reconstructions", "=", "[", "]", "\n", "idx", "=", "np", ".", "arange", "(", "len", "(", "pclouds", ")", ")", "\n", "for", "b", "in", "iterate_in_chunks", "(", "idx", ",", "batch_size", ")", ":", "\n", "            ", "rcon", ",", "_", "=", "self", ".", "reconstruct", "(", "pclouds", "[", "b", "]", ",", "compute_loss", "=", "False", ")", "\n", "reconstructions", ".", "append", "(", "rcon", ")", "\n", "", "return", "np", ".", "vstack", "(", "reconstructions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.get_pre_symmetry_data": [[309, 320], ["numpy.arange", "src.general_utils.iterate_in_chunks", "numpy.vstack", "len", "pre_symmetry_data.append", "autoencoder.AutoEncoder.get_pre_symmetry"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.iterate_in_chunks", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.get_pre_symmetry"], ["", "def", "get_pre_symmetry_data", "(", "self", ",", "pclouds", ",", "batch_size", "=", "50", ")", ":", "\n", "        ", "''' Convenience wrapper of self.get_pre_symmetry to get the data before symmetry operation (before the bottle-neck)\n        for a set of input point clouds.\n        Args:\n            pclouds (N, K, 3) numpy array of N point clouds with K points each.\n        '''", "\n", "pre_symmetry_data", "=", "[", "]", "\n", "idx", "=", "np", ".", "arange", "(", "len", "(", "pclouds", ")", ")", "\n", "for", "b", "in", "iterate_in_chunks", "(", "idx", ",", "batch_size", ")", ":", "\n", "            ", "pre_symmetry_data", ".", "append", "(", "self", ".", "get_pre_symmetry", "(", "pclouds", "[", "b", "]", ")", ")", "\n", "", "return", "np", ".", "vstack", "(", "pre_symmetry_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.get_latent_vectors": [[321, 332], ["numpy.arange", "src.general_utils.iterate_in_chunks", "numpy.vstack", "len", "latent_codes.append", "autoencoder.AutoEncoder.transform"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.iterate_in_chunks", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.transform"], ["", "def", "get_latent_vectors", "(", "self", ",", "pclouds", ",", "batch_size", "=", "50", ")", ":", "\n", "        ", "''' Convenience wrapper of self.transform to get the latent (bottle-neck) codes for a set of input point \n        clouds.\n        Args:\n            pclouds (N, K, 3) numpy array of N point clouds with K points each.\n        '''", "\n", "latent_codes", "=", "[", "]", "\n", "idx", "=", "np", ".", "arange", "(", "len", "(", "pclouds", ")", ")", "\n", "for", "b", "in", "iterate_in_chunks", "(", "idx", ",", "batch_size", ")", ":", "\n", "            ", "latent_codes", ".", "append", "(", "self", ".", "transform", "(", "pclouds", "[", "b", "]", ")", ")", "\n", "", "return", "np", ".", "vstack", "(", "latent_codes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.rand_rotation_matrix": [[16, 62], ["numpy.random.uniform", "numpy.sin", "numpy.cos", "numpy.array", "numpy.random.seed", "numpy.sqrt", "numpy.sqrt", "numpy.sin", "numpy.cos", "numpy.outer", "numpy.eye"], "function", ["None"], ["def", "rand_rotation_matrix", "(", "deflection", "=", "1.0", ",", "z_only", "=", "True", ",", "seed", "=", "None", ")", ":", "\n", "    ", "'''Creates a random rotation matrix.\n\n    deflection: the magnitude of the rotation. For 0, no rotation; for 1, completely random\n    rotation. Small deflection => small perturbation.\n\n    DOI: http://www.realtimerendering.com/resources/GraphicsGems/gemsiii/rand_rotation.c\n         http://blog.lostinmyterminal.com/python/2015/05/12/random-rotation-matrix.html\n    '''", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "", "randnums", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "3", ",", ")", ")", "\n", "\n", "theta", ",", "phi", ",", "z", "=", "randnums", "\n", "\n", "theta", "=", "theta", "*", "2.0", "*", "deflection", "*", "np", ".", "pi", "# Rotation about the pole (Z).", "\n", "phi", "=", "phi", "*", "2.0", "*", "np", ".", "pi", "# For direction of pole deflection.", "\n", "z", "=", "z", "*", "2.0", "*", "deflection", "# For magnitude of pole deflection.", "\n", "\n", "# Compute a vector V used for distributing points over the sphere", "\n", "# via the reflection I - V Transpose(V).  This formulation of V", "\n", "# will guarantee that if x[1] and x[2] are uniformly distributed,", "\n", "# the reflected points will be uniform on the sphere.  Note that V", "\n", "# has length sqrt(2) to eliminate the 2 in the Householder matrix.", "\n", "\n", "st", "=", "np", ".", "sin", "(", "theta", ")", "\n", "ct", "=", "np", ".", "cos", "(", "theta", ")", "\n", "\n", "R", "=", "np", ".", "array", "(", "(", "(", "ct", ",", "st", ",", "0", ")", ",", "\n", "(", "-", "st", ",", "ct", ",", "0", ")", ",", "\n", "(", "0", ",", "0", ",", "1", ")", ")", ")", "\n", "\n", "if", "not", "z_only", ":", "\n", "        ", "r", "=", "np", ".", "sqrt", "(", "z", ")", "\n", "V", "=", "(", "\n", "np", ".", "sin", "(", "phi", ")", "*", "r", ",", "\n", "np", ".", "cos", "(", "phi", ")", "*", "r", ",", "\n", "np", ".", "sqrt", "(", "2.0", "-", "z", ")", ")", "\n", "\n", "# Construct the rotation matrix  ( V Transpose(V) - I ) R.", "\n", "M", "=", "(", "np", ".", "outer", "(", "V", ",", "V", ")", "-", "np", ".", "eye", "(", "3", ")", ")", ".", "dot", "(", "R", ")", "\n", "", "else", ":", "\n", "        ", "M", "=", "R", "\n", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.get_complementary_points": [[64, 82], ["len", "general_utils.get_complementary_idx", "numpy.zeros", "numpy.zeros", "range", "general_utils.get_complementary_idx"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.get_complementary_idx", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.get_complementary_idx"], ["", "def", "get_complementary_points", "(", "pcloud", ",", "idx", ")", ":", "\n", "    ", "dim_num", "=", "len", "(", "pcloud", ".", "shape", ")", "\n", "n", "=", "pcloud", ".", "shape", "[", "dim_num", "-", "2", "]", "\n", "k", "=", "idx", ".", "shape", "[", "dim_num", "-", "2", "]", "\n", "\n", "if", "dim_num", "==", "2", ":", "\n", "        ", "comp_idx", "=", "get_complementary_idx", "(", "idx", ",", "n", ")", "\n", "comp_points", "=", "pcloud", "[", "comp_idx", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "n_example", "=", "pcloud", ".", "shape", "[", "0", "]", "\n", "comp_points", "=", "np", ".", "zeros", "(", "[", "n_example", ",", "n", "-", "k", ",", "pcloud", ".", "shape", "[", "2", "]", "]", ")", "\n", "comp_idx", "=", "np", ".", "zeros", "(", "[", "n_example", ",", "n", "-", "k", "]", ",", "dtype", "=", "int", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_example", ")", ":", "\n", "            ", "comp_idx", "[", "i", ",", ":", "]", "=", "get_complementary_idx", "(", "idx", "[", "i", ",", ":", "]", ",", "n", ")", "\n", "comp_points", "[", "i", ",", ":", ",", ":", "]", "=", "pcloud", "[", "i", ",", "comp_idx", "[", "i", ",", ":", "]", ",", ":", "]", "\n", "\n", "", "", "return", "comp_points", ",", "comp_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.get_complementary_idx": [[84, 92], ["numpy.arange", "numpy.full"], "function", ["None"], ["", "def", "get_complementary_idx", "(", "idx", ",", "n", ")", ":", "\n", "    ", "range_n", "=", "np", ".", "arange", "(", "n", ",", "dtype", "=", "int", ")", "\n", "comp_indicator", "=", "np", ".", "full", "(", "n", ",", "True", ")", "\n", "\n", "comp_indicator", "[", "idx", "]", "=", "False", "\n", "comp_idx", "=", "range_n", "[", "comp_indicator", "]", "\n", "\n", "return", "comp_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.get_dist_mat": [[94, 107], ["len", "numpy.tile", "numpy.tile", "numpy.linalg.norm", "numpy.array_equal", "len", "str", "numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "def", "get_dist_mat", "(", "data", ")", ":", "\n", "    ", "assert", "len", "(", "data", ".", "shape", ")", "==", "2", ",", "'The data is assumed to have 2 dimensions, got a shape of %s'", "%", "str", "(", "data", ".", "shape", ")", "\n", "num_examples", "=", "len", "(", "data", ")", "\n", "tile_source", "=", "[", "num_examples", ",", "1", ",", "1", "]", "\n", "tile_target", "=", "[", "1", ",", "num_examples", ",", "1", "]", "\n", "source_data", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "data", ",", "axis", "=", "0", ")", ",", "tile_source", ")", "\n", "target_data", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "data", ",", "axis", "=", "1", ")", ",", "tile_target", ")", "\n", "\n", "# source on the rows (axis 0), target in the columns (axis 1)", "\n", "dist_mat", "=", "np", ".", "linalg", ".", "norm", "(", "source_data", "-", "target_data", ",", "axis", "=", "-", "1", ")", "\n", "assert", "np", ".", "array_equal", "(", "dist_mat", ",", "dist_mat", ".", "T", ")", ",", "'The distance matrix should be a symmetric matrix!'", "\n", "\n", "return", "dist_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.iterate_in_chunks": [[109, 115], ["range", "len"], "function", ["None"], ["", "def", "iterate_in_chunks", "(", "l", ",", "n", ")", ":", "\n", "    ", "'''Yield successive 'n'-sized chunks from iterable 'l'.\n    Note: last chunk will be smaller than l if n doesn't divide l perfectly.\n    '''", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", ":", "\n", "        ", "yield", "l", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.add_gaussian_noise_to_pcloud": [[117, 122], ["numpy.random.normal", "numpy.tile"], "function", ["None"], ["", "", "def", "add_gaussian_noise_to_pcloud", "(", "pcloud", ",", "mu", "=", "0", ",", "sigma", "=", "1", ")", ":", "\n", "    ", "gnoise", "=", "np", ".", "random", ".", "normal", "(", "mu", ",", "sigma", ",", "pcloud", ".", "shape", "[", "0", "]", ")", "\n", "gnoise", "=", "np", ".", "tile", "(", "gnoise", ",", "(", "3", ",", "1", ")", ")", ".", "T", "\n", "pcloud", "+=", "gnoise", "\n", "return", "pcloud", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.apply_augmentations": [[124, 145], ["batch.copy", "numpy.random.normal", "general_utils.rand_rotation_matrix", "batch_copy.dot.dot"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.rand_rotation_matrix"], ["", "def", "apply_augmentations", "(", "batch", ",", "conf", ")", ":", "\n", "    ", "if", "conf", ".", "gauss_augment", "is", "not", "None", "or", "conf", ".", "z_rotate", ":", "\n", "        ", "batch_copy", "=", "batch", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "batch_copy", "=", "batch", "\n", "\n", "", "if", "conf", ".", "gauss_augment", "is", "not", "None", ":", "\n", "        ", "mu", "=", "conf", ".", "gauss_augment", "[", "'mu'", "]", "\n", "sigma", "=", "conf", ".", "gauss_augment", "[", "'sigma'", "]", "\n", "batch_copy", "+=", "np", ".", "random", ".", "normal", "(", "mu", ",", "sigma", ",", "batch_copy", ".", "shape", ")", "\n", "\n", "", "if", "conf", ".", "z_rotate", ":", "\n", "        ", "r_rotation", "=", "rand_rotation_matrix", "(", ")", "\n", "r_rotation", "[", "0", ",", "2", "]", "=", "0", "\n", "r_rotation", "[", "2", ",", "0", "]", "=", "0", "\n", "r_rotation", "[", "1", ",", "2", "]", "=", "0", "\n", "r_rotation", "[", "2", ",", "1", "]", "=", "0", "\n", "r_rotation", "[", "2", ",", "2", "]", "=", "1", "\n", "batch_copy", "=", "batch_copy", ".", "dot", "(", "r_rotation", ")", "\n", "\n", "", "return", "batch_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.unit_cube_grid_point_cloud": [[147, 166], ["numpy.ndarray", "range", "float", "range", "grid.reshape.reshape", "range", "numpy.linalg.norm"], "function", ["None"], ["", "def", "unit_cube_grid_point_cloud", "(", "resolution", ",", "clip_sphere", "=", "False", ")", ":", "\n", "    ", "'''Returns the center coordinates of each cell of a 3D grid with resolution^3 cells,\n    that is placed in the unit-cube.\n    If clip_sphere it True it drops the \"corner\" cells that lie outside the unit-sphere.\n    '''", "\n", "grid", "=", "np", ".", "ndarray", "(", "(", "resolution", ",", "resolution", ",", "resolution", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "spacing", "=", "1.0", "/", "float", "(", "resolution", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "resolution", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "resolution", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "resolution", ")", ":", "\n", "                ", "grid", "[", "i", ",", "j", ",", "k", ",", "0", "]", "=", "i", "*", "spacing", "-", "0.5", "\n", "grid", "[", "i", ",", "j", ",", "k", ",", "1", "]", "=", "j", "*", "spacing", "-", "0.5", "\n", "grid", "[", "i", ",", "j", ",", "k", ",", "2", "]", "=", "k", "*", "spacing", "-", "0.5", "\n", "\n", "", "", "", "if", "clip_sphere", ":", "\n", "        ", "grid", "=", "grid", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "grid", "=", "grid", "[", "norm", "(", "grid", ",", "axis", "=", "1", ")", "<=", "0.5", "]", "\n", "\n", "", "return", "grid", ",", "spacing", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.plot_3d_point_cloud": [[168, 210], ["fig.add_subplot.scatter", "fig.add_subplot.view_init", "matplotlib.figure", "plt.figure.add_subplot", "matplotlib.title", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.set_zlim3d", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_zlim", "matplotlib.tight_layout", "matplotlib.axis", "matplotlib.colorbar", "matplotlib.show", "numpy.min", "numpy.max", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max"], "function", ["None"], ["", "def", "plot_3d_point_cloud", "(", "pc", ",", "show", "=", "True", ",", "show_axis", "=", "True", ",", "in_u_sphere", "=", "True", ",", "marker", "=", "'.'", ",", "c", "=", "'b'", ",", "s", "=", "8", ",", "alpha", "=", ".8", ",", "figsize", "=", "(", "5", ",", "5", ")", ",", "elev", "=", "10", ",", "azim", "=", "240", ",", "miv", "=", "None", ",", "mav", "=", "None", ",", "squeeze", "=", "0.7", ",", "axis", "=", "None", ",", "title", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "x", ",", "y", ",", "z", "=", "(", "pc", "[", ":", ",", "0", "]", ",", "pc", "[", ":", ",", "1", "]", ",", "pc", "[", ":", ",", "2", "]", ")", "\n", "\n", "if", "axis", "is", "None", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "", "else", ":", "\n", "        ", "ax", "=", "axis", "\n", "fig", "=", "axis", "\n", "\n", "", "if", "title", "is", "not", "None", ":", "\n", "        ", "plt", ".", "title", "(", "title", ")", "\n", "\n", "", "sc", "=", "ax", ".", "scatter", "(", "x", ",", "y", ",", "z", ",", "marker", "=", "marker", ",", "c", "=", "c", ",", "s", "=", "s", ",", "alpha", "=", "alpha", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "ax", ".", "view_init", "(", "elev", "=", "elev", ",", "azim", "=", "azim", ")", "\n", "\n", "if", "in_u_sphere", ":", "\n", "        ", "ax", ".", "set_xlim3d", "(", "-", "0.5", ",", "0.5", ")", "\n", "ax", ".", "set_ylim3d", "(", "-", "0.5", ",", "0.5", ")", "\n", "ax", ".", "set_zlim3d", "(", "-", "0.5", ",", "0.5", ")", "\n", "miv", "=", "-", "0.5", "\n", "mav", "=", "0.5", "\n", "", "else", ":", "\n", "        ", "if", "miv", "is", "None", ":", "\n", "            ", "miv", "=", "squeeze", "*", "np", ".", "min", "(", "[", "np", ".", "min", "(", "x", ")", ",", "np", ".", "min", "(", "y", ")", ",", "np", ".", "min", "(", "z", ")", "]", ")", "# Multiply with 'squeeze' to squeeze free-space.", "\n", "", "if", "mav", "is", "None", ":", "\n", "            ", "mav", "=", "squeeze", "*", "np", ".", "max", "(", "[", "np", ".", "max", "(", "x", ")", ",", "np", ".", "max", "(", "y", ")", ",", "np", ".", "max", "(", "z", ")", "]", ")", "\n", "", "ax", ".", "set_xlim", "(", "miv", ",", "mav", ")", "\n", "ax", ".", "set_ylim", "(", "miv", ",", "mav", ")", "\n", "ax", ".", "set_zlim", "(", "miv", ",", "mav", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "", "if", "not", "show_axis", ":", "\n", "        ", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "", "if", "'c'", "in", "kwargs", ":", "\n", "        ", "plt", ".", "colorbar", "(", "sc", ")", "\n", "\n", "", "if", "show", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n", "", "return", "fig", ",", "miv", ",", "mav", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.plot_heatmap_graph": [[212, 224], ["matplotlib.figure", "pandas.DataFrame", "seaborn.set", "seaborn.heatmap", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close"], "function", ["None"], ["", "def", "plot_heatmap_graph", "(", "heatmap_vals", ",", "rows_label", ",", "columns_label", ",", "pc_class_name", ",", "xlabel", ",", "ylabel", ",", "fmt", ",", "save_path", ",", "figsize", "=", "(", "5", ",", "5", ")", ",", "font_size", "=", "16", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "df_cm", "=", "pd", ".", "DataFrame", "(", "heatmap_vals", ",", "rows_label", ",", "columns_label", ")", "\n", "sn", ".", "set", "(", "font_scale", "=", "1.4", ")", "# for label size", "\n", "sn", ".", "heatmap", "(", "df_cm", ",", "annot", "=", "True", ",", "fmt", "=", "fmt", ",", "annot_kws", "=", "{", "\"size\"", ":", "10", "}", ")", "\n", "plt", ".", "xlabel", "(", "xlabel", ",", "fontsize", "=", "font_size", ")", "\n", "plt", ".", "ylabel", "(", "ylabel", ",", "fontsize", "=", "font_size", ")", "\n", "plt", ".", "title", "(", "'Shape Class $\\\\bf{%s}$'", "%", "pc_class_name", ",", "fontsize", "=", "font_size", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "plt", ".", "savefig", "(", "save_path", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.PointCloudDataSet.__init__": [[226, 265], ["numpy.ones", "point_clouds.copy", "in_out.PointCloudDataSet.shuffle_data", "labels.copy", "type", "noise.copy"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.provider.shuffle_data"], ["def", "__init__", "(", "self", ",", "point_clouds", ",", "noise", "=", "None", ",", "labels", "=", "None", ",", "copy", "=", "True", ",", "init_shuffle", "=", "True", ")", ":", "\n", "        ", "'''Construct a DataSet.\n        Args:\n            init_shuffle, shuffle data before first epoch has been reached.\n        Output:\n            original_pclouds, labels, (None or Feed) # TODO Rename\n        '''", "\n", "\n", "self", ".", "num_examples", "=", "point_clouds", ".", "shape", "[", "0", "]", "\n", "self", ".", "n_points", "=", "point_clouds", ".", "shape", "[", "1", "]", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "assert", "point_clouds", ".", "shape", "[", "0", "]", "==", "labels", ".", "shape", "[", "0", "]", ",", "(", "'points.shape: %s labels.shape: %s'", "%", "(", "point_clouds", ".", "shape", ",", "labels", ".", "shape", ")", ")", "\n", "if", "copy", ":", "\n", "                ", "self", ".", "labels", "=", "labels", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "labels", "=", "labels", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "labels", "=", "np", ".", "ones", "(", "self", ".", "num_examples", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "\n", "", "if", "noise", "is", "not", "None", ":", "\n", "            ", "assert", "(", "type", "(", "noise", ")", "is", "np", ".", "ndarray", ")", "\n", "if", "copy", ":", "\n", "                ", "self", ".", "noisy_point_clouds", "=", "noise", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "noisy_point_clouds", "=", "noise", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "noisy_point_clouds", "=", "None", "\n", "\n", "", "if", "copy", ":", "\n", "            ", "self", ".", "point_clouds", "=", "point_clouds", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "point_clouds", "=", "point_clouds", "\n", "\n", "", "self", ".", "epochs_completed", "=", "0", "\n", "self", ".", "_index_in_epoch", "=", "0", "\n", "if", "init_shuffle", ":", "\n", "            ", "self", ".", "shuffle_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.PointCloudDataSet.shuffle_data": [[266, 276], ["numpy.arange", "numpy.random.shuffle", "numpy.random.seed"], "methods", ["None"], ["", "", "def", "shuffle_data", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "if", "seed", "is", "not", "None", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "", "perm", "=", "np", ".", "arange", "(", "self", ".", "num_examples", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "perm", ")", "\n", "self", ".", "point_clouds", "=", "self", ".", "point_clouds", "[", "perm", "]", "\n", "self", ".", "labels", "=", "self", ".", "labels", "[", "perm", "]", "\n", "if", "self", ".", "noisy_point_clouds", "is", "not", "None", ":", "\n", "            ", "self", ".", "noisy_point_clouds", "=", "self", ".", "noisy_point_clouds", "[", "perm", "]", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.PointCloudDataSet.shuffle_points": [[277, 288], ["numpy.arange", "range", "numpy.random.seed", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "shuffle_points", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "if", "seed", "is", "not", "None", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "", "perm", "=", "np", ".", "arange", "(", "self", ".", "n_points", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_examples", ")", ":", "\n", "#print('Shuffle point cloud %d/%d' % (i+1, self.num_examples))", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "perm", ")", "\n", "self", ".", "point_clouds", "[", "i", ",", ":", ",", ":", "]", "=", "self", ".", "point_clouds", "[", "i", ",", "perm", ",", ":", "]", "\n", "if", "self", ".", "noisy_point_clouds", "is", "not", "None", ":", "\n", "                ", "self", ".", "noisy_point_clouds", "[", "i", ",", ":", ",", ":", "]", "=", "self", ".", "noisy_point_clouds", "[", "i", ",", "perm", ",", ":", "]", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.PointCloudDataSet.next_batch": [[289, 307], ["in_out.PointCloudDataSet.shuffle_data"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.provider.shuffle_data"], ["", "def", "next_batch", "(", "self", ",", "batch_size", ",", "shuffle", "=", "True", ",", "seed", "=", "None", ")", ":", "\n", "        ", "'''Return the next batch_size examples from this data set.\n        '''", "\n", "start", "=", "self", ".", "_index_in_epoch", "\n", "self", ".", "_index_in_epoch", "+=", "batch_size", "\n", "if", "self", ".", "_index_in_epoch", ">", "self", ".", "num_examples", ":", "\n", "            ", "self", ".", "epochs_completed", "+=", "1", "# Finished epoch.", "\n", "if", "shuffle", ":", "\n", "                ", "self", ".", "shuffle_data", "(", "seed", ")", "\n", "# Start next epoch", "\n", "", "start", "=", "0", "\n", "self", ".", "_index_in_epoch", "=", "batch_size", "\n", "", "end", "=", "self", ".", "_index_in_epoch", "\n", "\n", "if", "self", ".", "noisy_point_clouds", "is", "None", ":", "\n", "            ", "return", "self", ".", "point_clouds", "[", "start", ":", "end", "]", ",", "self", ".", "labels", "[", "start", ":", "end", "]", ",", "None", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "point_clouds", "[", "start", ":", "end", "]", ",", "self", ".", "labels", "[", "start", ":", "end", "]", ",", "self", ".", "noisy_point_clouds", "[", "start", ":", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.PointCloudDataSet.full_epoch_data": [[308, 322], ["numpy.arange", "numpy.random.seed", "numpy.random.shuffle"], "methods", ["None"], ["", "", "def", "full_epoch_data", "(", "self", ",", "shuffle", "=", "True", ",", "seed", "=", "None", ")", ":", "\n", "        ", "'''Returns a copy of the examples of the entire data set (i.e. an epoch's data), shuffled.\n        '''", "\n", "if", "shuffle", "and", "seed", "is", "not", "None", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "", "perm", "=", "np", ".", "arange", "(", "self", ".", "num_examples", ")", "# Shuffle the data.", "\n", "if", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "perm", ")", "\n", "", "pc", "=", "self", ".", "point_clouds", "[", "perm", "]", "\n", "lb", "=", "self", ".", "labels", "[", "perm", "]", "\n", "ns", "=", "None", "\n", "if", "self", ".", "noisy_point_clouds", "is", "not", "None", ":", "\n", "            ", "ns", "=", "self", ".", "noisy_point_clouds", "[", "perm", "]", "\n", "", "return", "pc", ",", "lb", ",", "ns", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.PointCloudDataSet.merge": [[323, 339], ["numpy.vstack", "in_out.PointCloudDataSet.labels.reshape", "other_data_set.labels.reshape", "numpy.vstack", "numpy.squeeze", "numpy.vstack"], "methods", ["None"], ["", "def", "merge", "(", "self", ",", "other_data_set", ")", ":", "\n", "        ", "self", ".", "_index_in_epoch", "=", "0", "\n", "self", ".", "epochs_completed", "=", "0", "\n", "self", ".", "point_clouds", "=", "np", ".", "vstack", "(", "(", "self", ".", "point_clouds", ",", "other_data_set", ".", "point_clouds", ")", ")", "\n", "\n", "labels_1", "=", "self", ".", "labels", ".", "reshape", "(", "[", "self", ".", "num_examples", ",", "1", "]", ")", "# TODO = move to init.", "\n", "labels_2", "=", "other_data_set", ".", "labels", ".", "reshape", "(", "[", "other_data_set", ".", "num_examples", ",", "1", "]", ")", "\n", "self", ".", "labels", "=", "np", ".", "vstack", "(", "(", "labels_1", ",", "labels_2", ")", ")", "\n", "self", ".", "labels", "=", "np", ".", "squeeze", "(", "self", ".", "labels", ")", "\n", "\n", "if", "self", ".", "noisy_point_clouds", "is", "not", "None", ":", "\n", "            ", "self", ".", "noisy_point_clouds", "=", "np", ".", "vstack", "(", "(", "self", ".", "noisy_point_clouds", ",", "other_data_set", ".", "noisy_point_clouds", ")", ")", "\n", "\n", "", "self", ".", "num_examples", "=", "self", ".", "point_clouds", ".", "shape", "[", "0", "]", "\n", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.snc_category_to_synth_id": [[35, 39], ["six.iteritems"], "function", ["None"], ["def", "snc_category_to_synth_id", "(", ")", ":", "\n", "    ", "d", "=", "snc_synth_id_to_category", "\n", "inv_map", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "six", ".", "iteritems", "(", "d", ")", "}", "\n", "return", "inv_map", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.create_dir": [[41, 48], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["", "def", "create_dir", "(", "dir_path", ")", ":", "\n", "    ", "''' Creates a directory (or nested directories) if they don't exist.\n    '''", "\n", "if", "not", "osp", ".", "exists", "(", "dir_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "\n", "", "return", "dir_path", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.pickle_data": [[50, 58], ["open", "six.moves.cPickle.dump", "open.close", "len", "six.moves.cPickle.dump"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dump", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dump"], ["", "def", "pickle_data", "(", "file_name", ",", "*", "args", ")", ":", "\n", "    ", "'''Using (c)Pickle to save multiple python objects in a single file.\n    '''", "\n", "myFile", "=", "open", "(", "file_name", ",", "'wb'", ")", "\n", "cPickle", ".", "dump", "(", "len", "(", "args", ")", ",", "myFile", ",", "protocol", "=", "2", ")", "\n", "for", "item", "in", "args", ":", "\n", "        ", "cPickle", ".", "dump", "(", "item", ",", "myFile", ",", "protocol", "=", "2", ")", "\n", "", "myFile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.unpickle_data": [[60, 68], ["open", "six.moves.cPickle.load", "range", "open.close", "six.moves.cPickle.load"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load"], ["", "def", "unpickle_data", "(", "file_name", ")", ":", "\n", "    ", "'''Restore data previously saved with pickle_data().\n    '''", "\n", "inFile", "=", "open", "(", "file_name", ",", "'rb'", ")", "\n", "size", "=", "cPickle", ".", "load", "(", "inFile", ",", "fix_imports", "=", "True", ",", "encoding", "=", "\"latin1\"", ")", "\n", "for", "_", "in", "range", "(", "size", ")", ":", "\n", "        ", "yield", "cPickle", ".", "load", "(", "inFile", ",", "fix_imports", "=", "True", ",", "encoding", "=", "\"latin1\"", ")", "\n", "", "inFile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.files_in_subdirs": [[70, 77], ["re.compile", "os.walk", "os.walk", "os.join", "re.compile.search"], "function", ["None"], ["", "def", "files_in_subdirs", "(", "top_dir", ",", "search_pattern", ")", ":", "\n", "    ", "regex", "=", "re", ".", "compile", "(", "search_pattern", ")", "\n", "for", "path", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "top_dir", ")", ":", "\n", "        ", "for", "name", "in", "files", ":", "\n", "            ", "full_name", "=", "osp", ".", "join", "(", "path", ",", "name", ")", "\n", "if", "regex", ".", "search", "(", "full_name", ")", ":", "\n", "                ", "yield", "full_name", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.load_ply": [[79, 100], ["external.python_plyfile.plyfile.PlyData.read", "numpy.vstack", "numpy.vstack", "ret_val.append", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.hstack", "ret_val.append", "len"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.read"], ["", "", "", "", "def", "load_ply", "(", "file_name", ",", "with_faces", "=", "False", ",", "with_color", "=", "False", ")", ":", "\n", "    ", "ply_data", "=", "PlyData", ".", "read", "(", "file_name", ")", "\n", "points", "=", "ply_data", "[", "'vertex'", "]", "\n", "points", "=", "np", ".", "vstack", "(", "[", "points", "[", "'x'", "]", ",", "points", "[", "'y'", "]", ",", "points", "[", "'z'", "]", "]", ")", ".", "T", "\n", "ret_val", "=", "[", "points", "]", "\n", "\n", "if", "with_faces", ":", "\n", "        ", "faces", "=", "np", ".", "vstack", "(", "ply_data", "[", "'face'", "]", "[", "'vertex_indices'", "]", ")", "\n", "ret_val", ".", "append", "(", "faces", ")", "\n", "\n", "", "if", "with_color", ":", "\n", "        ", "r", "=", "np", ".", "vstack", "(", "ply_data", "[", "'vertex'", "]", "[", "'red'", "]", ")", "\n", "g", "=", "np", ".", "vstack", "(", "ply_data", "[", "'vertex'", "]", "[", "'green'", "]", ")", "\n", "b", "=", "np", ".", "vstack", "(", "ply_data", "[", "'vertex'", "]", "[", "'blue'", "]", ")", "\n", "color", "=", "np", ".", "hstack", "(", "(", "r", ",", "g", ",", "b", ")", ")", "\n", "ret_val", ".", "append", "(", "color", ")", "\n", "\n", "", "if", "len", "(", "ret_val", ")", "==", "1", ":", "# Unwrap the list", "\n", "        ", "ret_val", "=", "ret_val", "[", "0", "]", "\n", "\n", "", "return", "ret_val", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.pc_loader": [[102, 110], ["f_name.split", "tokens[].split", "in_out.load_ply"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.load_ply"], ["", "def", "pc_loader", "(", "f_name", ")", ":", "\n", "    ", "''' loads a point-cloud saved under ShapeNet's \"standard\" folder scheme:\n    i.e. /syn_id/model_name.ply\n    '''", "\n", "tokens", "=", "f_name", ".", "split", "(", "'/'", ")", "\n", "model_id", "=", "tokens", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "synet_id", "=", "tokens", "[", "-", "2", "]", "\n", "return", "load_ply", "(", "f_name", ")", ",", "model_id", ",", "synet_id", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.load_dataset": [[112, 148], ["print", "os.join", "in_out.load_and_split_all_point_clouds_under_folder", "range", "in_out.snc_category_to_synth_id", "len", "len", "len", "print", "os.join", "in_out.load_and_split_all_point_clouds_under_folder", "pc_data.merge", "slice_idx.append", "in_out.snc_category_to_synth_id", "len", "len"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.load_and_split_all_point_clouds_under_folder", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.snc_category_to_synth_id", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.load_and_split_all_point_clouds_under_folder", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.PointCloudDataSet.merge", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.snc_category_to_synth_id"], ["", "def", "load_dataset", "(", "class_names", ",", "set_type", ",", "input_dir", ")", ":", "\n", "    ", "print", "(", "'loading shape class %s '", "%", "class_names", "[", "0", "]", ")", "\n", "syn_id", "=", "snc_category_to_synth_id", "(", ")", "[", "class_names", "[", "0", "]", "]", "\n", "class_dir", "=", "osp", ".", "join", "(", "input_dir", ",", "syn_id", ")", "\n", "pc_data_train", ",", "pc_data_val", ",", "pc_data_test", "=", "load_and_split_all_point_clouds_under_folder", "(", "class_dir", ",", "n_threads", "=", "8", ",", "file_ending", "=", "'.ply'", ",", "verbose", "=", "True", ")", "\n", "\n", "if", "set_type", "==", "'train_set'", ":", "\n", "        ", "pc_data", "=", "pc_data_train", "\n", "", "elif", "set_type", "==", "'val_set'", ":", "\n", "        ", "pc_data", "=", "pc_data_val", "\n", "", "else", ":", "\n", "        ", "pc_data", "=", "pc_data_test", "\n", "\n", "", "slice_idx", "=", "[", "0", ",", "len", "(", "pc_data", ".", "point_clouds", ")", "]", "\n", "pc_label", "=", "[", "0", "]", "*", "len", "(", "pc_data", ".", "point_clouds", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "class_names", ")", ")", ":", "\n", "        ", "print", "(", "'loading shape class %s '", "%", "class_names", "[", "i", "]", ")", "\n", "syn_id", "=", "snc_category_to_synth_id", "(", ")", "[", "class_names", "[", "i", "]", "]", "\n", "class_dir", "=", "osp", ".", "join", "(", "input_dir", ",", "syn_id", ")", "\n", "pc_data_train_curr", ",", "pc_data_val_curr", ",", "pc_data_test_curr", "=", "load_and_split_all_point_clouds_under_folder", "(", "\n", "class_dir", ",", "n_threads", "=", "8", ",", "file_ending", "=", "'.ply'", ",", "verbose", "=", "True", ")", "\n", "\n", "if", "set_type", "==", "'train_set'", ":", "\n", "            ", "pc_data_curr", "=", "pc_data_train_curr", "\n", "", "elif", "set_type", "==", "'val_set'", ":", "\n", "            ", "pc_data_curr", "=", "pc_data_val_curr", "\n", "", "else", ":", "\n", "            ", "pc_data_curr", "=", "pc_data_test_curr", "\n", "\n", "", "pc_data", ".", "merge", "(", "pc_data_curr", ")", "\n", "\n", "slice_idx", ".", "append", "(", "slice_idx", "[", "-", "1", "]", "+", "len", "(", "pc_data_curr", ".", "point_clouds", ")", ")", "\n", "pc_label", "+=", "[", "i", "]", "*", "len", "(", "pc_data_curr", ".", "point_clouds", ")", "\n", "\n", "", "return", "pc_data", ",", "slice_idx", ",", "pc_label", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.load_all_point_clouds_under_folder": [[150, 154], ["in_out.load_point_clouds_from_filenames", "in_out.PointCloudDataSet", "in_out.files_in_subdirs"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.load_point_clouds_from_filenames", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.files_in_subdirs"], ["", "def", "load_all_point_clouds_under_folder", "(", "top_dir", ",", "n_threads", "=", "20", ",", "file_ending", "=", "'.ply'", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "file_names", "=", "[", "f", "for", "f", "in", "files_in_subdirs", "(", "top_dir", ",", "file_ending", ")", "]", "\n", "pclouds", ",", "model_ids", ",", "syn_ids", "=", "load_point_clouds_from_filenames", "(", "file_names", ",", "n_threads", ",", "loader", "=", "pc_loader", ",", "verbose", "=", "verbose", ")", "\n", "return", "PointCloudDataSet", "(", "pclouds", ",", "labels", "=", "syn_ids", "+", "'_'", "+", "model_ids", ",", "init_shuffle", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.load_and_split_all_point_clouds_under_folder": [[156, 170], ["in_out.load_point_clouds_from_filenames", "in_out.split_data", "in_out.split_data", "in_out.split_data", "in_out.PointCloudDataSet", "in_out.PointCloudDataSet", "in_out.PointCloudDataSet", "in_out.files_in_subdirs"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.load_point_clouds_from_filenames", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.split_data", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.split_data", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.split_data", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.files_in_subdirs"], ["", "def", "load_and_split_all_point_clouds_under_folder", "(", "top_dir", ",", "n_threads", "=", "20", ",", "file_ending", "=", "'.ply'", ",", "\n", "split", "=", "(", ".85", ",", ".05", ",", ".10", ")", ",", "seed", "=", "42", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "file_names", "=", "[", "f", "for", "f", "in", "files_in_subdirs", "(", "top_dir", ",", "file_ending", ")", "]", "\n", "pclouds", ",", "model_ids", ",", "syn_ids", "=", "load_point_clouds_from_filenames", "(", "file_names", ",", "n_threads", ",", "loader", "=", "pc_loader", ",", "verbose", "=", "verbose", ")", "\n", "\n", "pclouds_train", ",", "pclouds_val", ",", "pclouds_test", ",", "perm", "=", "split_data", "(", "pclouds", ",", "split", ",", "seed", ")", "\n", "model_ids_train", ",", "model_ids_val", ",", "model_ids_test", ",", "_", "=", "split_data", "(", "model_ids", ",", "split", ",", "seed", ",", "perm", ")", "\n", "syn_ids_train", ",", "syn_ids_val", ",", "syn_ids_test", ",", "_", "=", "split_data", "(", "syn_ids", ",", "split", ",", "seed", ",", "perm", ")", "\n", "\n", "ds_train", "=", "PointCloudDataSet", "(", "pclouds_train", ",", "labels", "=", "syn_ids_train", "+", "'_'", "+", "model_ids_train", ",", "init_shuffle", "=", "False", ")", "\n", "ds_val", "=", "PointCloudDataSet", "(", "pclouds_val", ",", "labels", "=", "syn_ids_val", "+", "'_'", "+", "model_ids_val", ",", "init_shuffle", "=", "False", ")", "\n", "ds_test", "=", "PointCloudDataSet", "(", "pclouds_test", ",", "labels", "=", "syn_ids_test", "+", "'_'", "+", "model_ids_test", ",", "init_shuffle", "=", "False", ")", "\n", "\n", "return", "ds_train", ",", "ds_val", ",", "ds_test", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.load_point_clouds_from_filenames": [[172, 192], ["numpy.empty", "numpy.empty", "numpy.empty", "multiprocessing.Pool", "enumerate", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "loader", "multiprocessing.Pool.imap", "len", "len", "warnings.warn", "print", "len", "len", "len", "numpy.unique", "len", "len", "numpy.unique"], "function", ["None"], ["", "def", "load_point_clouds_from_filenames", "(", "file_names", ",", "n_threads", ",", "loader", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "pc", "=", "loader", "(", "file_names", "[", "0", "]", ")", "[", "0", "]", "\n", "pclouds", "=", "np", ".", "empty", "(", "[", "len", "(", "file_names", ")", ",", "pc", ".", "shape", "[", "0", "]", ",", "pc", ".", "shape", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "model_names", "=", "np", ".", "empty", "(", "[", "len", "(", "file_names", ")", "]", ",", "dtype", "=", "object", ")", "\n", "class_ids", "=", "np", ".", "empty", "(", "[", "len", "(", "file_names", ")", "]", ",", "dtype", "=", "object", ")", "\n", "pool", "=", "Pool", "(", "n_threads", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "pool", ".", "imap", "(", "loader", ",", "file_names", ")", ")", ":", "\n", "        ", "pclouds", "[", "i", ",", ":", ",", ":", "]", ",", "model_names", "[", "i", "]", ",", "class_ids", "[", "i", "]", "=", "data", "\n", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "if", "len", "(", "np", ".", "unique", "(", "model_names", ")", ")", "!=", "len", "(", "pclouds", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Point clouds with the same model name were loaded.'", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "'{0} pclouds were loaded. They belong in {1} shape-classes.'", ".", "format", "(", "len", "(", "pclouds", ")", ",", "len", "(", "np", ".", "unique", "(", "class_ids", ")", ")", ")", ")", "\n", "\n", "", "return", "pclouds", ",", "model_names", ",", "class_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.in_out.split_data": [[194, 219], ["int", "int", "sum", "sum", "numpy.arange", "numpy.random.shuffle", "sum", "numpy.random.seed"], "function", ["None"], ["", "def", "split_data", "(", "data", ",", "split", ",", "seed", ",", "perm", "=", "None", ")", ":", "\n", "    ", "assert", "sum", "(", "split", ")", "==", "1.", ",", "(", "'data split does not sum to 1: %.2f'", "%", "sum", "(", "split", ")", ")", "\n", "\n", "num_examples", "=", "data", ".", "shape", "[", "0", "]", "\n", "if", "perm", "is", "not", "None", ":", "\n", "        ", "assert", "perm", ".", "shape", "[", "0", "]", "==", "data", ".", "shape", "[", "0", "]", ",", "(", "'perm.shape: %s data.shape: %s'", "%", "(", "perm", ".", "shape", ",", "data", ".", "shape", ")", ")", "\n", "", "else", ":", "\n", "        ", "if", "seed", "is", "not", "None", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "", "perm", "=", "np", ".", "arange", "(", "num_examples", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "perm", ")", "\n", "\n", "", "data", "=", "data", "[", "perm", "]", "\n", "train_end", "=", "int", "(", "split", "[", "0", "]", "*", "num_examples", "+", "0.5", ")", "# add 0.5 and use int() to round a remainder of 0.5 upward instead of downward", "\n", "val_end", "=", "int", "(", "(", "split", "[", "0", "]", "+", "split", "[", "1", "]", ")", "*", "num_examples", "+", "0.5", ")", "# add 0.5 and use int() to round a remainder of 0.5 upward instead of downward", "\n", "\n", "train_data", "=", "data", "[", ":", "train_end", "]", "\n", "val_data", "=", "data", "[", "train_end", ":", "val_end", "]", "\n", "test_data", "=", "data", "[", "val_end", ":", "]", "\n", "\n", "counts", "=", "[", "train_data", ".", "shape", "[", "0", "]", ",", "val_data", ".", "shape", "[", "0", "]", ",", "test_data", ".", "shape", "[", "0", "]", "]", "\n", "assert", "sum", "(", "counts", ")", "==", "num_examples", ",", "(", "'data split (%d, %d, %d) does not sum to num_examples (%d)'", "%", "(", "counts", "[", "0", "]", ",", "counts", "[", "1", "]", ",", "counts", "[", "2", "]", ",", "num_examples", ")", ")", "\n", "\n", "return", "train_data", ",", "val_data", ",", "test_data", ",", "perm", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.shift_rotate_util.scale_object": [[5, 12], ["numpy.linalg.norm", "numpy.max", "numpy.expand_dims", "numpy.max", "numpy.min"], "function", ["None"], ["def", "scale_object", "(", "data", ",", "scale", ")", ":", "\n", "    ", "center", "=", "(", "np", ".", "max", "(", "data", ",", "axis", "=", "0", ")", "+", "np", ".", "min", "(", "data", ",", "axis", "=", "0", ")", ")", "/", "2", "\n", "data_centered", "=", "data", "-", "np", ".", "expand_dims", "(", "center", ",", "axis", "=", "0", ")", "\n", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "data_centered", ",", "axis", "=", "1", ")", "\n", "radius", "=", "np", ".", "max", "(", "norm", ")", "\n", "data_normed", "=", "(", "data", "/", "radius", ")", "*", "scale", "\n", "return", "data_normed", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.shift_rotate_util.samp_object": [[14, 20], ["obj.copy", "numpy.random.shuffle"], "function", ["None"], ["", "def", "samp_object", "(", "obj", ",", "num_point", ")", ":", "\n", "    ", "obj_copy", "=", "obj", ".", "copy", "(", ")", "\n", "if", "obj_copy", ".", "shape", "[", "0", "]", ">", "num_point", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "obj_copy", ")", "\n", "samp", "=", "obj_copy", "[", ":", "num_point", "]", "\n", "", "return", "samp", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.shift_rotate_util.sort_axes": [[22, 45], ["int", "shift_rotate_util.get_sort_axes_idx", "numpy.zeros_like", "len", "range", "shift_rotate_util.get_sort_axes_idx", "numpy.all"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.shift_rotate_util.get_sort_axes_idx", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.shift_rotate_util.get_sort_axes_idx"], ["", "def", "sort_axes", "(", "point_clouds", ",", "neg_rot", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Sort axes of points clouds, such that the long, medium and short axes are x, y, z, respectively.\n    If neg_rot is True, the rotation is by a negative angle, otherwise a positive angle.\n    \"\"\"", "\n", "axis_idx", "=", "int", "(", "neg_rot", ")", "\n", "\n", "axes_sort_idx", ",", "axes_len", "=", "get_sort_axes_idx", "(", "point_clouds", ")", "\n", "\n", "point_clouds_axes_sorted", "=", "np", ".", "zeros_like", "(", "point_clouds", ")", "\n", "num_pc", "=", "len", "(", "point_clouds", ")", "\n", "for", "i", "in", "range", "(", "num_pc", ")", ":", "\n", "        ", "point_clouds_axes_sorted", "[", "i", "]", "=", "point_clouds", "[", "i", ",", ":", ",", "axes_sort_idx", "[", "i", "]", "]", ".", "T", "\n", "\n", "if", "axes_len", "[", "i", ",", "0", "]", "<", "axes_len", "[", "i", ",", "1", "]", ":", "\n", "# x axis was swapped with y axis. mirror current x/y axis to get a proper +90/-90 degrees rotation around the z axis", "\n", "            ", "point_clouds_axes_sorted", "[", "i", ",", ":", ",", "axis_idx", "]", "=", "-", "point_clouds_axes_sorted", "[", "i", ",", ":", ",", "axis_idx", "]", "\n", "\n", "# sanity check", "\n", "", "", "_", ",", "axes_len_sorted", "=", "get_sort_axes_idx", "(", "point_clouds_axes_sorted", ")", "\n", "assert", "np", ".", "all", "(", "axes_len_sorted", "[", ":", ",", "0", "]", ">=", "axes_len_sorted", "[", ":", ",", "1", "]", ")", ",", "'Wrong axes sorting. The x axis length should be >= than the y axis length'", "\n", "\n", "return", "point_clouds_axes_sorted", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.shift_rotate_util.get_sort_axes_idx": [[47, 63], ["point_clouds.max", "point_clouds.min", "numpy.all", "len", "len", "numpy.argsort"], "function", ["None"], ["", "def", "get_sort_axes_idx", "(", "point_clouds", ")", ":", "\n", "    ", "\"\"\"\n    Get indices for sorting xy axes of points clouds, such that long and short axes are along x and y axes, respectively (the z axis is not changed).\n    \"\"\"", "\n", "assert", "len", "(", "point_clouds", ".", "shape", ")", "==", "3", ",", "'point_clouds should have 3 dimensions, got %d'", "%", "len", "(", "point_clouds", ".", "shape", ")", "\n", "max_val", "=", "point_clouds", ".", "max", "(", "axis", "=", "1", ")", "\n", "min_val", "=", "point_clouds", ".", "min", "(", "axis", "=", "1", ")", "\n", "axes_len", "=", "max_val", "-", "min_val", "\n", "\n", "axes_len_for_sort", "=", "axes_len", "\n", "axes_len_for_sort", "[", ":", ",", "2", "]", "=", "0.", "\n", "\n", "axes_sort_idx", "=", "np", ".", "argsort", "(", "axes_len_for_sort", ",", "axis", "=", "1", ")", "[", ":", ",", ":", ":", "-", "1", "]", "# larger axis first", "\n", "assert", "np", ".", "all", "(", "axes_sort_idx", "[", ":", ",", "2", "]", "==", "2", ")", ",", "'Sorting only xy axes, the z axis should remain the same!'", "\n", "\n", "return", "axes_sort_idx", ",", "axes_len", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.shift_rotate_util.euler2mat_np": [[65, 102], ["numpy.cos", "numpy.sin", "numpy.array", "tf.matmul.astype", "numpy.dot", "tensorflow.cos", "tensorflow.sin", "numpy.array", "numpy.cos", "numpy.sin", "numpy.array", "tensorflow.matmul", "tensorflow.matmul", "numpy.abs"], "function", ["None"], ["", "def", "euler2mat_np", "(", "point_cloud", ",", "rotation", ",", "z_only", "=", "True", ")", ":", "\n", "    ", "assert", "rotation", ".", "shape", "==", "(", "3", ",", ")", ",", "'The rotation should be a vector of size 3'", "\n", "\n", "x", ",", "y", ",", "z", "=", "rotation", "\n", "\n", "cosz", "=", "np", ".", "cos", "(", "z", ")", "\n", "sinz", "=", "np", ".", "sin", "(", "z", ")", "\n", "\n", "Mz", "=", "np", ".", "array", "(", "\n", "[", "[", "cosz", ",", "-", "sinz", ",", "0", "]", ",", "\n", "[", "sinz", ",", "cosz", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "if", "z_only", ":", "\n", "        ", "rotate_mat", "=", "Mz", "\n", "", "else", ":", "\n", "        ", "cosy", "=", "tf", ".", "cos", "(", "y", ")", "\n", "siny", "=", "tf", ".", "sin", "(", "y", ")", "\n", "My", "=", "np", ".", "array", "(", "\n", "[", "[", "cosy", ",", "0", ",", "siny", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "siny", ",", "0", ",", "cosy", "]", "]", ")", "\n", "\n", "cosx", "=", "np", ".", "cos", "(", "x", ")", "\n", "sinx", "=", "np", ".", "sin", "(", "x", ")", "\n", "Mx", "=", "np", ".", "array", "(", "\n", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "cosx", ",", "-", "sinx", "]", ",", "\n", "[", "0", ",", "sinx", ",", "cosx", "]", "]", ")", "\n", "\n", "rotate_mat", "=", "tf", ".", "matmul", "(", "Mx", ",", "tf", ".", "matmul", "(", "My", ",", "Mz", ")", ")", "\n", "\n", "", "rotate_mat", "=", "rotate_mat", ".", "astype", "(", "np", ".", "float32", ")", "\n", "rotate_mat", "[", "np", ".", "abs", "(", "rotate_mat", ")", "<", "1e-10", "]", "=", "0.", "\n", "\n", "point_cloud_rot", "=", "np", ".", "dot", "(", "point_cloud", ",", "rotate_mat", ")", "\n", "return", "point_cloud_rot", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.shift_rotate_util.euler2mat_tf": [[104, 151], ["tensorflow.constant", "tensorflow.constant", "range", "tensorflow.stack", "tensorflow.cos", "tensorflow.sin", "tensorflow.stack", "tensorflow.squeeze", "rotated_list.append", "rotations.get_shape", "tensorflow.cos", "tensorflow.sin", "tensorflow.stack", "tensorflow.squeeze", "tensorflow.cos", "tensorflow.sin", "tensorflow.stack", "tensorflow.squeeze", "tensorflow.matmul", "tensorflow.matmul", "rotations.get_shape", "tensorflow.matmul"], "function", ["None"], ["", "def", "euler2mat_tf", "(", "point_cloud", ",", "rotations", ",", "z_only", "=", "False", ")", ":", "\n", "    ", "batch_size", "=", "rotations", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "assert", "rotations", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "==", "3", "\n", "rotated_list", "=", "[", "]", "\n", "one", "=", "tf", ".", "constant", "(", "[", "1.", "]", ")", "\n", "zero", "=", "tf", ".", "constant", "(", "[", "0.", "]", ")", "\n", "#print(zero.get_shape())", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "x", "=", "rotations", "[", "i", ",", "0", "]", "\n", "y", "=", "rotations", "[", "i", ",", "1", "]", "\n", "z", "=", "rotations", "[", "i", ",", "2", "]", "\n", "\n", "cosz", "=", "tf", ".", "cos", "(", "[", "z", "]", ")", "\n", "sinz", "=", "tf", ".", "sin", "(", "[", "z", "]", ")", "\n", "#print(cosz.get_shape())", "\n", "\n", "Mz", "=", "tf", ".", "stack", "(", "\n", "[", "[", "cosz", ",", "-", "sinz", ",", "zero", "]", ",", "\n", "[", "sinz", ",", "cosz", ",", "zero", "]", ",", "\n", "[", "zero", ",", "zero", ",", "one", "]", "]", ")", "\n", "Mz", "=", "tf", ".", "squeeze", "(", "Mz", ")", "\n", "\n", "if", "z_only", ":", "\n", "            ", "rotate_mat", "=", "Mz", "\n", "", "else", ":", "\n", "            ", "cosy", "=", "tf", ".", "cos", "(", "[", "y", "]", ")", "\n", "siny", "=", "tf", ".", "sin", "(", "[", "y", "]", ")", "\n", "My", "=", "tf", ".", "stack", "(", "\n", "[", "[", "cosy", ",", "zero", ",", "siny", "]", ",", "\n", "[", "zero", ",", "one", ",", "zero", "]", ",", "\n", "[", "-", "siny", ",", "zero", ",", "cosy", "]", "]", ")", "\n", "My", "=", "tf", ".", "squeeze", "(", "My", ")", "\n", "\n", "cosx", "=", "tf", ".", "cos", "(", "[", "x", "]", ")", "\n", "sinx", "=", "tf", ".", "sin", "(", "[", "x", "]", ")", "\n", "Mx", "=", "tf", ".", "stack", "(", "\n", "[", "[", "one", ",", "zero", ",", "zero", "]", ",", "\n", "[", "zero", ",", "cosx", ",", "-", "sinx", "]", ",", "\n", "[", "zero", ",", "sinx", ",", "cosx", "]", "]", ")", "\n", "Mx", "=", "tf", ".", "squeeze", "(", "Mx", ")", "\n", "\n", "rotate_mat", "=", "tf", ".", "matmul", "(", "Mx", ",", "tf", ".", "matmul", "(", "My", ",", "Mz", ")", ")", "\n", "\n", "", "rotated_list", ".", "append", "(", "tf", ".", "matmul", "(", "point_cloud", "[", "i", "]", ",", "rotate_mat", ")", ")", "\n", "\n", "", "return", "tf", ".", "stack", "(", "rotated_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.ae_utils.get_critical_points": [[12, 49], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.max", "numpy.argmax", "numpy.unique", "os.join", "numpy.save", "os.join", "numpy.save", "os.join", "numpy.save", "numpy.argsort"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save"], ["def", "get_critical_points", "(", "point_clouds", ",", "pre_symmetry_data", ",", "data_path", ",", "suff_list", ",", "save_data", "=", "True", ")", ":", "\n", "    ", "num_pc", ",", "_", ",", "bottleneck_size", "=", "pre_symmetry_data", ".", "shape", "\n", "critical_points", "=", "np", ".", "zeros", "(", "[", "num_pc", ",", "bottleneck_size", ",", "3", "]", ",", "dtype", "=", "point_clouds", ".", "dtype", ")", "\n", "idx_critical", "=", "np", ".", "zeros", "(", "[", "num_pc", ",", "bottleneck_size", "]", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "num_critical", "=", "np", ".", "zeros", "(", "num_pc", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "i", "in", "range", "(", "num_pc", ")", ":", "\n", "        ", "pre_symmetry_pc", "=", "pre_symmetry_data", "[", "i", "]", "\n", "max_val", "=", "np", ".", "max", "(", "pre_symmetry_pc", ",", "axis", "=", "0", ")", "\n", "max_idx", "=", "np", ".", "argmax", "(", "pre_symmetry_pc", ",", "axis", "=", "0", ")", "\n", "max_idx_non_zero", "=", "max_idx", "[", "max_val", ">", "0.0", "]", "# remove entries for which the entire column of pre_symmetry_pc is 0", "\n", "idx_critical_pc", ",", "counts", "=", "np", ".", "unique", "(", "max_idx_non_zero", ",", "return_counts", "=", "True", ")", "\n", "num_critical_pc", "=", "idx_critical_pc", ".", "shape", "[", "0", "]", "\n", "num_critical", "[", "i", "]", "=", "num_critical_pc", "\n", "\n", "idx_sort", "=", "np", ".", "argsort", "(", "counts", ")", "[", ":", ":", "-", "1", "]", "# most critical points first", "\n", "idx_critical_pc_sorted", "=", "idx_critical_pc", "[", "idx_sort", "]", "\n", "critical_points_pc", "=", "point_clouds", "[", "i", "]", "[", "idx_critical_pc_sorted", "]", "\n", "critical_points", "[", "i", ",", ":", "num_critical_pc", ",", ":", "]", "=", "critical_points_pc", "# fill the critical points in a zeros matrix (in order to use a numpy array)", "\n", "idx_critical", "[", "i", ",", ":", "num_critical_pc", "]", "=", "idx_critical_pc_sorted", "# fill the critical index in a zeros matrix (in order to use a numpy array)", "\n", "\n", "", "if", "save_data", ":", "\n", "# save critical points", "\n", "        ", "critical_points_file_name", "=", "'_'", ".", "join", "(", "[", "'critical_points'", "]", "+", "suff_list", ")", "\n", "critical_points_file_path", "=", "osp", ".", "join", "(", "data_path", ",", "critical_points_file_name", ")", "\n", "np", ".", "save", "(", "critical_points_file_path", ",", "critical_points", ")", "\n", "\n", "# save critical points index", "\n", "critical_idx_file_name", "=", "'_'", ".", "join", "(", "[", "'critical_idx'", "]", "+", "suff_list", ")", "\n", "critical_idx_file_path", "=", "osp", ".", "join", "(", "data_path", ",", "critical_idx_file_name", ")", "\n", "np", ".", "save", "(", "critical_idx_file_path", ",", "idx_critical", ")", "\n", "\n", "# save number of critical points (to know which entries to use from the critical_points matrix)", "\n", "critical_num_file_name", "=", "'_'", ".", "join", "(", "[", "'critical_num'", "]", "+", "suff_list", ")", "\n", "critical_num_file_path", "=", "osp", ".", "join", "(", "data_path", ",", "critical_num_file_name", ")", "\n", "np", ".", "save", "(", "critical_num_file_path", ",", "num_critical", ")", "\n", "\n", "", "return", "critical_points", ",", "idx_critical", ",", "num_critical", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.ae_utils.get_critical_pc_non_critical_pc": [[51, 81], ["ae_utils.get_critical_points", "len", "numpy.zeros_like", "numpy.zeros_like", "range", "numpy.array_equal", "src.general_utils.get_complementary_points", "len", "numpy.any"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.ae_utils.get_critical_points", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.get_complementary_points"], ["", "def", "get_critical_pc_non_critical_pc", "(", "point_clouds", ",", "pre_symmetry_data", ")", ":", "\n", "    ", "critical_points", ",", "critical_idx", ",", "critical_num", "=", "get_critical_points", "(", "point_clouds", ",", "pre_symmetry_data", ",", "None", ",", "None", ",", "save_data", "=", "False", ")", "\n", "\n", "num_pc", "=", "len", "(", "point_clouds", ")", "\n", "critical_pc", "=", "np", ".", "zeros_like", "(", "point_clouds", ")", "\n", "non_critical_pc", "=", "np", ".", "zeros_like", "(", "point_clouds", ")", "\n", "for", "k", "in", "range", "(", "num_pc", ")", ":", "\n", "# sanity check", "\n", "        ", "assert", "np", ".", "any", "(", "critical_idx", "[", "k", ",", "critical_num", "[", "k", "]", ":", "]", ")", "==", "False", ",", "'critical_idx form critical_num to the end of the row should all be zeros'", "\n", "\n", "critical_idx_pc", "=", "critical_idx", "[", "k", ",", ":", "critical_num", "[", "k", "]", "]", "\n", "\n", "# critical points", "\n", "critical_points_pc", "=", "point_clouds", "[", "k", ",", "critical_idx_pc", ",", ":", "]", "\n", "critical_pc", "[", "k", ",", ":", "critical_num", "[", "k", "]", ",", ":", "]", "=", "critical_points_pc", "\n", "critical_pc", "[", "k", ",", "critical_num", "[", "k", "]", ":", ",", ":", "]", "=", "critical_points_pc", "[", "-", "1", "]", "# duplication of last point does not change the latent vector due to global pooling", "\n", "\n", "# sanity check", "\n", "assert", "np", ".", "array_equal", "(", "critical_points_pc", ",", "critical_points", "[", "k", ",", ":", "critical_num", "[", "k", "]", "]", ")", ",", "'Input point cloud at critical points index should be equal to the critical points!'", "\n", "\n", "# non critical points", "\n", "non_critical_points_pc", ",", "non_critical_idx_pc", "=", "get_complementary_points", "(", "point_clouds", "[", "k", "]", ",", "critical_idx_pc", ")", "\n", "non_critical_num", "=", "len", "(", "non_critical_points_pc", ")", "\n", "\n", "non_critical_pc", "[", "k", ",", ":", "non_critical_num", "]", "=", "non_critical_points_pc", "\n", "non_critical_pc", "[", "k", ",", "non_critical_num", ":", "]", "=", "non_critical_points_pc", "[", "-", "1", "]", "# duplication of last point does not change the latent vector due to global pooling", "\n", "\n", "", "return", "critical_points", ",", "critical_idx", ",", "critical_num", ",", "critical_pc", ",", "non_critical_pc", "\n", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_utils.load_data": [[13, 24], ["enumerate", "len", "numpy.load", "len", "os.join"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load"], ["def", "load_data", "(", "data_path", ",", "file_list", ",", "base_name_list", ")", ":", "\n", "    ", "data_list", "=", "[", "None", "]", "*", "len", "(", "base_name_list", ")", "\n", "\n", "for", "i", ",", "base_name", "in", "enumerate", "(", "base_name_list", ")", ":", "\n", "        ", "file_name", "=", "[", "f", "for", "f", "in", "file_list", "if", "base_name", "in", "f", "]", "[", "0", "]", "\n", "data_list", "[", "i", "]", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "data_path", ",", "file_name", ")", ")", "\n", "\n", "", "if", "len", "(", "data_list", ")", "==", "1", ":", "\n", "        ", "data_list", "=", "data_list", "[", "0", "]", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_utils.prepare_data_for_attack": [[26, 86], ["len", "range", "numpy.vstack", "numpy.vstack", "len", "range", "numpy.concatenate", "numpy.reshape", "target_data_list.append", "numpy.vstack", "source_data_list.append", "nn_idx_s_class_t_class[].copy", "range", "numpy.vstack", "target_data_for_attack_list.append", "adversary_utils.get_idx_for_correct_pred", "target_class_data_for_attack_list.append", "numpy.expand_dims", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_utils.get_idx_for_correct_pred"], ["", "def", "prepare_data_for_attack", "(", "pc_classes", ",", "source_classes_for_attack", ",", "target_classes_for_attack", ",", "classes_data", ",", "slice_idx", ",", "attack_pc_idx", ",", "num_pc_for_target", ",", "nn_idx_mat", ",", "correct_pred", ")", ":", "\n", "    ", "num_classes", "=", "len", "(", "pc_classes", ")", "\n", "\n", "source_data_list", "=", "[", "]", "\n", "target_data_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "source_class_name", "=", "pc_classes", "[", "i", "]", "\n", "if", "source_class_name", "not", "in", "source_classes_for_attack", ":", "\n", "            ", "continue", "\n", "\n", "", "source_attack_idx", "=", "attack_pc_idx", "[", "i", "]", "\n", "num_source_pc_for_attack", "=", "len", "(", "source_attack_idx", ")", "\n", "\n", "source_class_data", "=", "classes_data", "[", "slice_idx", "[", "i", "]", ":", "slice_idx", "[", "i", "+", "1", "]", "]", "\n", "source_class_data_for_attack", "=", "source_class_data", "[", "source_attack_idx", "]", "\n", "\n", "num_attack_per_pc", "=", "0", "\n", "target_data_for_attack_list", "=", "[", "]", "\n", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "target_class_name", "=", "pc_classes", "[", "j", "]", "\n", "if", "target_class_name", "not", "in", "target_classes_for_attack", "or", "target_class_name", "==", "source_class_name", ":", "\n", "                ", "continue", "\n", "\n", "", "nn_idx_s_class_t_class", "=", "nn_idx_mat", "[", "slice_idx", "[", "i", "]", ":", "slice_idx", "[", "i", "+", "1", "]", ",", "slice_idx", "[", "j", "]", ":", "slice_idx", "[", "j", "+", "1", "]", "]", "\n", "nn_idx_s_for_attack_t_class", "=", "nn_idx_s_class_t_class", "[", "source_attack_idx", "]", ".", "copy", "(", ")", "\n", "\n", "if", "correct_pred", "is", "not", "None", ":", "\n", "                ", "nn_idx_s_for_attack_t_class", "=", "get_idx_for_correct_pred", "(", "nn_idx_s_for_attack_t_class", ",", "correct_pred", ",", "slice_idx", ",", "j", ")", "\n", "\n", "", "num_attack_per_pc", "+=", "num_pc_for_target", "\n", "\n", "target_class_data", "=", "classes_data", "[", "slice_idx", "[", "j", "]", ":", "slice_idx", "[", "j", "+", "1", "]", "]", "\n", "target_class_data_for_attack_list", "=", "[", "]", "\n", "for", "s", "in", "range", "(", "num_source_pc_for_attack", ")", ":", "\n", "                ", "target_attack_idx", "=", "nn_idx_s_for_attack_t_class", "[", "s", ",", ":", "num_pc_for_target", "]", "\n", "target_class_data_for_attack_curr", "=", "target_class_data", "[", "target_attack_idx", "]", "\n", "target_class_data_for_attack_list", ".", "append", "(", "np", ".", "expand_dims", "(", "target_class_data_for_attack_curr", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "target_data_for_attack", "=", "np", ".", "vstack", "(", "target_class_data_for_attack_list", ")", "\n", "target_data_for_attack_list", ".", "append", "(", "target_data_for_attack", ")", "\n", "\n", "", "target_data_for_attack_concat", "=", "np", ".", "concatenate", "(", "target_data_for_attack_list", ",", "axis", "=", "1", ")", "\n", "old_shape", "=", "target_data_for_attack_concat", ".", "shape", "\n", "new_shape", "=", "[", "old_shape", "[", "0", "]", "*", "old_shape", "[", "1", "]", "]", "+", "[", "old_shape", "[", "n", "]", "for", "n", "in", "range", "(", "2", ",", "len", "(", "old_shape", ")", ")", "]", "\n", "target_data_curr", "=", "np", ".", "reshape", "(", "target_data_for_attack_concat", ",", "new_shape", ")", "\n", "\n", "target_data_list", ".", "append", "(", "target_data_curr", ")", "\n", "\n", "source_data_curr", "=", "np", ".", "vstack", "(", "[", "[", "source_class_data_for_attack", "[", "n", "]", "]", "*", "num_attack_per_pc", "for", "n", "in", "range", "(", "num_source_pc_for_attack", ")", "]", ")", "\n", "source_data_list", ".", "append", "(", "source_data_curr", ")", "\n", "\n", "#plot_3d_point_cloud(source_data_curr[0])", "\n", "#plot_3d_point_cloud(target_data_curr[0])", "\n", "\n", "", "source_data", "=", "np", ".", "vstack", "(", "source_data_list", ")", "\n", "target_data", "=", "np", ".", "vstack", "(", "target_data_list", ")", "\n", "\n", "return", "source_data", ",", "target_data", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_utils.get_idx_for_correct_pred": [[88, 99], ["range", "numpy.where", "len", "numpy.array", "len", "len"], "function", ["None"], ["", "def", "get_idx_for_correct_pred", "(", "nn_idx_s_for_attack_t_class", ",", "correct_pred", ",", "slice_idx", ",", "t_class_index", ")", ":", "\n", "    ", "correct_pred_t_class", "=", "correct_pred", "[", "slice_idx", "[", "t_class_index", "]", ":", "slice_idx", "[", "t_class_index", "+", "1", "]", "]", "\n", "correct_pred_t_idx", "=", "np", ".", "where", "(", "correct_pred_t_class", ")", "[", "0", "]", "\n", "\n", "for", "l", "in", "range", "(", "len", "(", "nn_idx_s_for_attack_t_class", ")", ")", ":", "\n", "        ", "nn_idx_s", "=", "nn_idx_s_for_attack_t_class", "[", "l", "]", "\n", "nn_idx_s_correct_pred_t", "=", "np", ".", "array", "(", "[", "idx", "for", "idx", "in", "nn_idx_s", "if", "idx", "in", "correct_pred_t_idx", "]", ",", "dtype", "=", "nn_idx_s", ".", "dtype", ")", "\n", "nn_idx_s_for_attack_t_class", "[", "l", ",", ":", "len", "(", "nn_idx_s_correct_pred_t", ")", "]", "=", "nn_idx_s_correct_pred_t", "\n", "nn_idx_s_for_attack_t_class", "[", "l", ",", "len", "(", "nn_idx_s_correct_pred_t", ")", ":", "]", "=", "nn_idx_s_correct_pred_t", "[", "0", "]", "\n", "\n", "", "return", "nn_idx_s_for_attack_t_class", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_utils.get_quantity_at_index": [[101, 113], ["enumerate", "numpy.zeros", "range", "len", "range", "len", "len"], "function", ["None"], ["", "def", "get_quantity_at_index", "(", "quantity_list", ",", "index", ")", ":", "\n", "    ", "quantity_at_index_list", "=", "[", "np", ".", "zeros", "(", "quantity_list", "[", "i", "]", ".", "shape", "[", "1", ":", "]", ",", "dtype", "=", "quantity_list", "[", "i", "]", ".", "dtype", ")", "for", "i", "in", "range", "(", "len", "(", "quantity_list", ")", ")", "]", "\n", "\n", "for", "i", ",", "quantity", "in", "enumerate", "(", "quantity_list", ")", ":", "\n", "        ", "quantity_at_index", "=", "quantity_at_index_list", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "index", ")", ")", ":", "\n", "            ", "quantity_at_index", "[", "j", "]", "=", "quantity", "[", "index", "[", "j", "]", ",", "j", "]", "\n", "\n", "", "", "if", "len", "(", "quantity_at_index_list", ")", "==", "1", ":", "\n", "        ", "quantity_at_index_list", "=", "quantity_at_index_list", "[", "0", "]", "\n", "\n", "", "return", "quantity_at_index_list", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_utils.get_quantity_at_index_per_target_class": [[115, 124], ["numpy.zeros", "range", "adversary_utils.get_quantity_at_index", "int", "int"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_utils.get_quantity_at_index"], ["", "def", "get_quantity_at_index_per_target_class", "(", "quantity", ",", "per_target_class_idx", ")", ":", "\n", "    ", "num_instance_for_attack", ",", "num_target_classes", "=", "per_target_class_idx", ".", "shape", "\n", "quantity_at_index_per_target_class", "=", "np", ".", "zeros", "(", "[", "num_instance_for_attack", ",", "num_target_classes", "]", ",", "dtype", "=", "quantity", ".", "dtype", ")", "\n", "num_pc_for_target", "=", "quantity", ".", "shape", "[", "1", "]", "/", "per_target_class_idx", ".", "shape", "[", "1", "]", "\n", "for", "k", "in", "range", "(", "num_target_classes", ")", ":", "\n", "        ", "quantity_for_target_class", "=", "quantity", "[", ":", ",", "k", "*", "int", "(", "num_pc_for_target", ")", ":", "(", "k", "+", "1", ")", "*", "int", "(", "num_pc_for_target", ")", "]", "\n", "quantity_at_index_per_target_class", "[", ":", ",", "k", "]", "=", "get_quantity_at_index", "(", "[", "quantity_for_target_class", ".", "T", "]", ",", "per_target_class_idx", "[", ":", ",", "k", "]", ")", "\n", "\n", "", "return", "quantity_at_index_per_target_class", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_utils.get_quantity_for_targeted_untargeted_attack": [[126, 147], ["adversary_utils.get_quantity_at_index", "get_quantity_at_index.reshape", "adversary_utils.get_quantity_at_index_per_target_class", "numpy.zeros", "range", "int", "int"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_utils.get_quantity_at_index", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_utils.get_quantity_at_index_per_target_class"], ["", "def", "get_quantity_for_targeted_untargeted_attack", "(", "quantity", ",", "dist_weight_idx", ",", "targeted_idx", ",", "untargeted_idx", ")", ":", "\n", "    ", "num_attacks", "=", "quantity", ".", "shape", "[", "1", "]", "\n", "num_instance_for_attack", ",", "num_target_classes", "=", "targeted_idx", ".", "shape", "\n", "num_attack_per_instance", "=", "num_attacks", "/", "num_instance_for_attack", "\n", "num_pc_for_target", "=", "num_attack_per_instance", "/", "num_target_classes", "\n", "\n", "# quantity for distance weight", "\n", "quantity_dist_weight", "=", "get_quantity_at_index", "(", "[", "quantity", "]", ",", "dist_weight_idx", ")", "\n", "quantity_dist_weight_reshape", "=", "quantity_dist_weight", ".", "reshape", "(", "[", "num_instance_for_attack", ",", "int", "(", "num_attack_per_instance", ")", "]", ")", "\n", "\n", "# quantity for targeted attack", "\n", "quantity_targeted", "=", "get_quantity_at_index_per_target_class", "(", "quantity_dist_weight_reshape", ",", "targeted_idx", ")", "\n", "\n", "# quantity for untargeted attack", "\n", "quantity_untargeted", "=", "np", ".", "zeros", "(", "num_instance_for_attack", ",", "dtype", "=", "quantity_targeted", ".", "dtype", ")", "\n", "for", "j", "in", "range", "(", "num_instance_for_attack", ")", ":", "\n", "        ", "c_idx", "=", "untargeted_idx", "[", "j", "]", "\n", "best_t_idx", "=", "targeted_idx", "[", "j", ",", "c_idx", "]", "\n", "quantity_untargeted", "[", "j", "]", "=", "quantity_dist_weight_reshape", "[", "j", ",", "c_idx", "*", "int", "(", "num_pc_for_target", ")", "+", "best_t_idx", "]", "\n", "\n", "", "return", "quantity_dist_weight_reshape", ",", "quantity_targeted", ",", "quantity_untargeted", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_utils.get_outlier_pc_inlier_pc": [[149, 179], ["numpy.zeros_like", "numpy.zeros", "numpy.zeros", "numpy.zeros_like", "range", "len", "len", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "get_outlier_pc_inlier_pc", "(", "point_clouds", ",", "knn_dists", ",", "knn_dist_thresh", ")", ":", "\n", "    ", "num_pc", ",", "num_points", ",", "_", "=", "point_clouds", ".", "shape", "\n", "\n", "outlier_pc", "=", "np", ".", "zeros_like", "(", "point_clouds", ")", "\n", "outlier_idx", "=", "np", ".", "zeros", "(", "[", "num_pc", ",", "num_points", "]", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "outlier_num", "=", "np", ".", "zeros", "(", "num_pc", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "inlier_pc", "=", "np", ".", "zeros_like", "(", "point_clouds", ")", "\n", "for", "l", "in", "range", "(", "num_pc", ")", ":", "\n", "        ", "knn_dists_pc", "=", "knn_dists", "[", "l", "]", "\n", "\n", "outlier_idx_pc", "=", "np", ".", "where", "(", "knn_dists_pc", ">", "knn_dist_thresh", ")", "[", "0", "]", "\n", "outlier_num_pc", "=", "len", "(", "outlier_idx_pc", ")", "\n", "outlier_points_pc", "=", "point_clouds", "[", "l", ",", "outlier_idx_pc", ",", ":", "]", "\n", "\n", "outlier_idx", "[", "l", ",", ":", "outlier_num_pc", "]", "=", "outlier_idx_pc", "\n", "outlier_num", "[", "l", "]", "=", "outlier_num_pc", "\n", "\n", "outlier_pc", "[", "l", ",", ":", "outlier_num_pc", "]", "=", "outlier_points_pc", "\n", "if", "0", "<", "outlier_num_pc", "<", "num_points", ":", "\n", "            ", "outlier_pc", "[", "l", ",", "outlier_num_pc", ":", "]", "=", "outlier_points_pc", "[", "-", "1", "]", "# duplication of last point does not change the latent vector due to global pooling", "\n", "\n", "", "inlier_idx_pc", "=", "np", ".", "where", "(", "knn_dists_pc", "<=", "knn_dist_thresh", ")", "[", "0", "]", "\n", "inlier_num_pc", "=", "len", "(", "inlier_idx_pc", ")", "\n", "inlier_points_pc", "=", "point_clouds", "[", "l", ",", "inlier_idx_pc", ",", ":", "]", "\n", "\n", "inlier_pc", "[", "l", ",", ":", "inlier_num_pc", ",", ":", "]", "=", "inlier_points_pc", "\n", "if", "0", "<", "inlier_num_pc", "<", "num_points", ":", "\n", "            ", "inlier_pc", "[", "l", ",", "inlier_num_pc", ":", ",", ":", "]", "=", "inlier_points_pc", "[", "-", "1", "]", "# duplication of last point does not change the latent vector due to global pooling", "\n", "\n", "", "", "return", "outlier_pc", ",", "outlier_idx", ",", "outlier_num", ",", "inlier_pc", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_utils.write_attack_statistics_to_file": [[181, 220], ["fout.write", "fout.write", "fout.write", "enumerate", "numpy.vstack", "np.vstack.mean", "numpy.vstack", "np.vstack.mean", "numpy.vstack", "np.vstack.mean", "numpy.vstack", "np.vstack.mean", "numpy.vstack", "np.vstack.mean", "fout.write", "fout.write", "source_target_norm_min_list[].mean", "num_outlier_at_norm_min_list[].mean", "source_chamfer_at_norm_min_list[].mean", "target_chamfer_at_norm_min_list[].mean", "target_nre_at_norm_min_list[].mean", "fout.write", "len", "int", "len", "int"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write"], ["", "def", "write_attack_statistics_to_file", "(", "fout", ",", "classes_for_attack", ",", "source_target_norm_min_list", ",", "\n", "num_outlier_at_norm_min_list", ",", "source_chamfer_at_norm_min_list", ",", "\n", "target_chamfer_at_norm_min_list", ",", "target_nre_at_norm_min_list", ")", ":", "\n", "    ", "fout", ".", "write", "(", "'Shape\\t\\tAttack\\t\\tAdv\\t\\tAdv\\t\\tAdv\\t\\tAdv\\n'", ")", "\n", "fout", ".", "write", "(", "'Class\\t\\tScore\\t\\t#OS\\t\\tS-CD\\t\\tT-RE\\t\\tT-NRE\\n'", ")", "\n", "fout", ".", "write", "(", "'\\n'", ")", "\n", "\n", "for", "c", ",", "pc_class_name", "in", "enumerate", "(", "classes_for_attack", ")", ":", "\n", "        ", "source_target_norm_min_mean", "=", "source_target_norm_min_list", "[", "c", "]", ".", "mean", "(", ")", "\n", "num_outlier_at_norm_min_mean", "=", "num_outlier_at_norm_min_list", "[", "c", "]", ".", "mean", "(", ")", "\n", "source_chamfer_at_norm_min_mean", "=", "source_chamfer_at_norm_min_list", "[", "c", "]", ".", "mean", "(", ")", "\n", "target_chamfer_at_norm_min_mean", "=", "target_chamfer_at_norm_min_list", "[", "c", "]", ".", "mean", "(", ")", "\n", "target_nre_at_norm_min_mean", "=", "target_nre_at_norm_min_list", "[", "c", "]", ".", "mean", "(", ")", "\n", "\n", "spaces", "=", "''", ".", "join", "(", "[", "' '", "]", "*", "(", "16", "-", "len", "(", "pc_class_name", ")", ")", ")", "\n", "fout", ".", "write", "(", "'%s%s%.5f\\t\\t%03d\\t\\t%.5f\\t\\t%.5f\\t\\t%.2f\\n'", "%", "\n", "(", "pc_class_name", ",", "spaces", ",", "source_target_norm_min_mean", ",", "\n", "int", "(", "num_outlier_at_norm_min_mean", "+", "0.5", ")", ",", "source_chamfer_at_norm_min_mean", ",", "\n", "target_chamfer_at_norm_min_mean", ",", "target_nre_at_norm_min_mean", ")", ")", "\n", "\n", "# over classes statistics", "\n", "", "source_target_norm_min_classes", "=", "np", ".", "vstack", "(", "source_target_norm_min_list", ")", "\n", "source_target_norm_min_classes_mean", "=", "source_target_norm_min_classes", ".", "mean", "(", ")", "\n", "num_outlier_at_norm_min_classes", "=", "np", ".", "vstack", "(", "num_outlier_at_norm_min_list", ")", "\n", "num_outlier_at_norm_min_classes_mean", "=", "num_outlier_at_norm_min_classes", ".", "mean", "(", ")", "\n", "source_chamfer_at_norm_min_classes", "=", "np", ".", "vstack", "(", "source_chamfer_at_norm_min_list", ")", "\n", "source_chamfer_at_norm_min_classes_mean", "=", "source_chamfer_at_norm_min_classes", ".", "mean", "(", ")", "\n", "target_chamfer_at_norm_min_classes", "=", "np", ".", "vstack", "(", "target_chamfer_at_norm_min_list", ")", "\n", "target_chamfer_at_norm_min_classes_mean", "=", "target_chamfer_at_norm_min_classes", ".", "mean", "(", ")", "\n", "target_nre_at_norm_min_classes", "=", "np", ".", "vstack", "(", "target_nre_at_norm_min_list", ")", "\n", "target_nre_at_norm_min_classes_mean", "=", "target_nre_at_norm_min_classes", ".", "mean", "(", ")", "\n", "\n", "fout", ".", "write", "(", "'\\n'", ")", "\n", "pc_class_name", "=", "'over classes'", "\n", "spaces", "=", "''", ".", "join", "(", "[", "' '", "]", "*", "(", "16", "-", "len", "(", "pc_class_name", ")", ")", ")", "\n", "fout", ".", "write", "(", "'%s%s%.5f\\t\\t%03d\\t\\t%.5f\\t\\t%.5f\\t\\t%.2f\\n'", "%", "\n", "(", "pc_class_name", ",", "spaces", ",", "source_target_norm_min_classes_mean", ",", "\n", "int", "(", "num_outlier_at_norm_min_classes_mean", "+", "0.5", ")", ",", "source_chamfer_at_norm_min_classes_mean", ",", "\n", "target_chamfer_at_norm_min_classes_mean", ",", "target_nre_at_norm_min_classes_mean", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_utils.write_defense_statistics_to_file": [[222, 258], ["fout.write", "fout.write", "fout.write", "enumerate", "numpy.vstack", "np.vstack.mean", "numpy.vstack", "np.vstack.mean", "numpy.vstack", "np.vstack.mean", "numpy.vstack", "np.vstack.mean", "fout.write", "fout.write", "def_source_chamfer_at_norm_min_list[].mean", "def_source_nre_at_norm_min_list[].mean", "adv_source_chamfer_at_norm_min_list[].mean", "adv_source_nre_at_norm_min_list[].mean", "fout.write", "len", "len"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write"], ["", "def", "write_defense_statistics_to_file", "(", "fout", ",", "classes_for_attack", ",", "\n", "def_source_chamfer_at_norm_min_list", ",", "def_source_nre_at_norm_min_list", ",", "\n", "adv_source_chamfer_at_norm_min_list", ",", "adv_source_nre_at_norm_min_list", ")", ":", "\n", "    ", "fout", ".", "write", "(", "'Shape\\t\\tDef\\t\\tDef\\t\\tAdv\\t\\tAdv\\n'", ")", "\n", "fout", ".", "write", "(", "'Class\\t\\tS-RE\\t\\tS-NRE\\t\\tS-RE\\t\\tS-NRE\\n'", ")", "\n", "fout", ".", "write", "(", "'\\n'", ")", "\n", "\n", "for", "c", ",", "pc_class_name", "in", "enumerate", "(", "classes_for_attack", ")", ":", "\n", "        ", "def_source_chamfer_at_norm_min_mean", "=", "def_source_chamfer_at_norm_min_list", "[", "c", "]", ".", "mean", "(", ")", "\n", "def_source_nre_at_norm_min_mean", "=", "def_source_nre_at_norm_min_list", "[", "c", "]", ".", "mean", "(", ")", "\n", "adv_source_chamfer_at_norm_min_mean", "=", "adv_source_chamfer_at_norm_min_list", "[", "c", "]", ".", "mean", "(", ")", "\n", "adv_source_nre_at_norm_min_mean", "=", "adv_source_nre_at_norm_min_list", "[", "c", "]", ".", "mean", "(", ")", "\n", "\n", "spaces", "=", "''", ".", "join", "(", "[", "' '", "]", "*", "(", "16", "-", "len", "(", "pc_class_name", ")", ")", ")", "\n", "fout", ".", "write", "(", "'%s%s%.5f\\t\\t%.2f\\t\\t%.5f\\t\\t%.2f\\n'", "%", "\n", "(", "pc_class_name", ",", "spaces", ",", "\n", "def_source_chamfer_at_norm_min_mean", ",", "def_source_nre_at_norm_min_mean", ",", "\n", "adv_source_chamfer_at_norm_min_mean", ",", "adv_source_nre_at_norm_min_mean", ")", ")", "\n", "\n", "# over classes statistics", "\n", "", "def_source_chamfer_at_norm_min_classes", "=", "np", ".", "vstack", "(", "def_source_chamfer_at_norm_min_list", ")", "\n", "def_source_chamfer_at_norm_min_classes_mean", "=", "def_source_chamfer_at_norm_min_classes", ".", "mean", "(", ")", "\n", "def_source_nre_at_norm_min_classes", "=", "np", ".", "vstack", "(", "def_source_nre_at_norm_min_list", ")", "\n", "def_source_nre_at_norm_min_classes_mean", "=", "def_source_nre_at_norm_min_classes", ".", "mean", "(", ")", "\n", "avd_source_chamfer_at_norm_min_classes", "=", "np", ".", "vstack", "(", "adv_source_chamfer_at_norm_min_list", ")", "\n", "avd_source_chamfer_at_norm_min_classes_mean", "=", "avd_source_chamfer_at_norm_min_classes", ".", "mean", "(", ")", "\n", "adv_source_nre_at_norm_min_classes", "=", "np", ".", "vstack", "(", "adv_source_nre_at_norm_min_list", ")", "\n", "adv_source_nre_at_norm_min_classes_mean", "=", "adv_source_nre_at_norm_min_classes", ".", "mean", "(", ")", "\n", "\n", "fout", ".", "write", "(", "'\\n'", ")", "\n", "pc_class_name", "=", "'over classes'", "\n", "spaces", "=", "''", ".", "join", "(", "[", "' '", "]", "*", "(", "16", "-", "len", "(", "pc_class_name", ")", ")", ")", "\n", "fout", ".", "write", "(", "'%s%s%.5f\\t\\t%.2f\\t\\t%.5f\\t\\t%.2f\\n'", "%", "\n", "(", "pc_class_name", ",", "spaces", ",", "\n", "def_source_chamfer_at_norm_min_classes_mean", ",", "def_source_nre_at_norm_min_classes_mean", ",", "\n", "avd_source_chamfer_at_norm_min_classes_mean", ",", "adv_source_nre_at_norm_min_classes_mean", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_utils.write_transfer_statistics_to_file": [[260, 296], ["fout.write", "fout.write", "fout.write", "enumerate", "numpy.vstack", "np.vstack.mean", "numpy.vstack", "np.vstack.mean", "numpy.vstack", "np.vstack.mean", "numpy.vstack", "np.vstack.mean", "fout.write", "fout.write", "tra_target_chamfer_at_norm_min_list[].mean", "tra_target_nre_at_norm_min_list[].mean", "adv_target_chamfer_at_norm_min_list[].mean", "adv_target_nre_at_norm_min_list[].mean", "fout.write", "len", "len"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write"], ["", "def", "write_transfer_statistics_to_file", "(", "fout", ",", "classes_for_attack", ",", "\n", "tra_target_chamfer_at_norm_min_list", ",", "tra_target_nre_at_norm_min_list", ",", "\n", "adv_target_chamfer_at_norm_min_list", ",", "adv_target_nre_at_norm_min_list", ")", ":", "\n", "    ", "fout", ".", "write", "(", "'Shape\\t\\tTra\\t\\tTra\\t\\tAdv\\t\\tAdv\\n'", ")", "\n", "fout", ".", "write", "(", "'Class\\t\\tT-RE\\t\\tT-NRE\\t\\tT-RE\\t\\tT-NRE\\n'", ")", "\n", "fout", ".", "write", "(", "'\\n'", ")", "\n", "\n", "for", "c", ",", "pc_class_name", "in", "enumerate", "(", "classes_for_attack", ")", ":", "\n", "        ", "tra_target_chamfer_at_norm_min_mean", "=", "tra_target_chamfer_at_norm_min_list", "[", "c", "]", ".", "mean", "(", ")", "\n", "tra_target_nre_at_norm_min_mean", "=", "tra_target_nre_at_norm_min_list", "[", "c", "]", ".", "mean", "(", ")", "\n", "adv_target_chamfer_at_norm_min_mean", "=", "adv_target_chamfer_at_norm_min_list", "[", "c", "]", ".", "mean", "(", ")", "\n", "adv_target_nre_at_norm_min_mean", "=", "adv_target_nre_at_norm_min_list", "[", "c", "]", ".", "mean", "(", ")", "\n", "\n", "spaces", "=", "''", ".", "join", "(", "[", "' '", "]", "*", "(", "16", "-", "len", "(", "pc_class_name", ")", ")", ")", "\n", "fout", ".", "write", "(", "'%s%s%.5f\\t\\t%.2f\\t\\t%.5f\\t\\t%.2f\\n'", "%", "\n", "(", "pc_class_name", ",", "spaces", ",", "\n", "tra_target_chamfer_at_norm_min_mean", ",", "tra_target_nre_at_norm_min_mean", ",", "\n", "adv_target_chamfer_at_norm_min_mean", ",", "adv_target_nre_at_norm_min_mean", ")", ")", "\n", "\n", "# over classes statistics", "\n", "", "tra_target_chamfer_at_norm_min_classes", "=", "np", ".", "vstack", "(", "tra_target_chamfer_at_norm_min_list", ")", "\n", "tra_target_chamfer_at_norm_min_classes_mean", "=", "tra_target_chamfer_at_norm_min_classes", ".", "mean", "(", ")", "\n", "tra_target_nre_at_norm_min_classes", "=", "np", ".", "vstack", "(", "tra_target_nre_at_norm_min_list", ")", "\n", "tra_target_nre_at_norm_min_classes_mean", "=", "tra_target_nre_at_norm_min_classes", ".", "mean", "(", ")", "\n", "avd_target_chamfer_at_norm_min_classes", "=", "np", ".", "vstack", "(", "adv_target_chamfer_at_norm_min_list", ")", "\n", "avd_target_chamfer_at_norm_min_classes_mean", "=", "avd_target_chamfer_at_norm_min_classes", ".", "mean", "(", ")", "\n", "adv_target_nre_at_norm_min_classes", "=", "np", ".", "vstack", "(", "adv_target_nre_at_norm_min_list", ")", "\n", "adv_target_nre_at_norm_min_classes_mean", "=", "adv_target_nre_at_norm_min_classes", ".", "mean", "(", ")", "\n", "\n", "fout", ".", "write", "(", "'\\n'", ")", "\n", "pc_class_name", "=", "'over classes'", "\n", "spaces", "=", "''", ".", "join", "(", "[", "' '", "]", "*", "(", "16", "-", "len", "(", "pc_class_name", ")", ")", ")", "\n", "fout", ".", "write", "(", "'%s%s%.5f\\t\\t%.2f\\t\\t%.5f\\t\\t%.2f\\n'", "%", "\n", "(", "pc_class_name", ",", "spaces", ",", "\n", "tra_target_chamfer_at_norm_min_classes_mean", ",", "tra_target_nre_at_norm_min_classes_mean", ",", "\n", "avd_target_chamfer_at_norm_min_classes_mean", ",", "adv_target_nre_at_norm_min_classes_mean", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.src.adversary_utils.write_classification_statistics_to_file": [[298, 330], ["fout.write", "enumerate", "numpy.vstack", "np.vstack.mean", "fout.write", "fout.write", "fout.write", "fout.write", "recon_cls_at_norm_min_list[].mean", "fout.write", "fout.write", "fout.write", "fout.write", "fout.write", "len", "fout.write", "fout.write", "len", "fout.write", "fout.write"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write"], ["", "def", "write_classification_statistics_to_file", "(", "fout", ",", "classes_for_attack", ",", "recon_cls_at_norm_min_list", ",", "data_type", ")", ":", "\n", "    ", "if", "data_type", "==", "'target'", ":", "\n", "        ", "fout", ".", "write", "(", "'Shape\\t\\tOrig target recon\\n'", ")", "\n", "fout", ".", "write", "(", "'Shape\\t\\tTarget accuracy\\n'", ")", "\n", "", "elif", "data_type", "==", "'adversarial'", ":", "\n", "        ", "fout", ".", "write", "(", "'Shape\\t\\tAdv recon\\n'", ")", "\n", "fout", ".", "write", "(", "'Shape\\t\\tTarget accuracy\\n'", ")", "\n", "", "elif", "data_type", "==", "'source'", ":", "\n", "        ", "fout", ".", "write", "(", "'Shape\\t\\tOrig source recon\\n'", ")", "\n", "fout", ".", "write", "(", "'Shape\\t\\tSource accuracy\\n'", ")", "\n", "", "elif", "data_type", "==", "'before_defense'", ":", "\n", "        ", "fout", ".", "write", "(", "'Shape\\t\\tAdv recon\\n'", ")", "\n", "fout", ".", "write", "(", "'Shape\\t\\tSource accuracy\\n'", ")", "\n", "", "elif", "data_type", "==", "'after_defense'", ":", "\n", "        ", "fout", ".", "write", "(", "'Shape\\t\\tDef recon\\n'", ")", "\n", "fout", ".", "write", "(", "'Shape\\t\\tSource accuracy\\n'", ")", "\n", "", "fout", ".", "write", "(", "'\\n'", ")", "\n", "\n", "for", "c", ",", "pc_class_name", "in", "enumerate", "(", "classes_for_attack", ")", ":", "\n", "        ", "cls_adv_pc_recon_at_norm_min_mean", "=", "recon_cls_at_norm_min_list", "[", "c", "]", ".", "mean", "(", ")", "\n", "\n", "spaces", "=", "''", ".", "join", "(", "[", "' '", "]", "*", "(", "16", "-", "len", "(", "pc_class_name", ")", ")", ")", "\n", "fout", ".", "write", "(", "'%s%s%.4f\\n'", "%", "(", "pc_class_name", ",", "spaces", ",", "cls_adv_pc_recon_at_norm_min_mean", ")", ")", "\n", "\n", "# over classes statistics", "\n", "", "cls_adv_pc_recon_at_norm_min_classes", "=", "np", ".", "vstack", "(", "recon_cls_at_norm_min_list", ")", "\n", "cls_adv_pc_recon_at_norm_min_mean", "=", "cls_adv_pc_recon_at_norm_min_classes", ".", "mean", "(", ")", "\n", "\n", "fout", ".", "write", "(", "'\\n'", ")", "\n", "pc_class_name", "=", "'over classes'", "\n", "spaces", "=", "''", ".", "join", "(", "[", "' '", "]", "*", "(", "16", "-", "len", "(", "pc_class_name", ")", ")", ")", "\n", "fout", ".", "write", "(", "'%s%s%.4f\\n'", "%", "(", "pc_class_name", ",", "spaces", ",", "cls_adv_pc_recon_at_norm_min_mean", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.atlasnet.atlasnet_ae.AtlasNetAutoEncoder.__init__": [[32, 34], ["transfer.chamfer_3DDist", "transfer.chamfer_3DDist", "transfer.chamfer_3DDist"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "_", ")", ":", "\n", "        ", "self", ".", "chamferloss", "=", "dist_chamfer_3D", ".", "chamfer_3DDist", "(", ")", "\n", "#     self.foldingnet = FoldingNet_graph()", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.atlasnet.atlasnet_ae.AtlasNetAutoEncoder.restore_model": [[36, 39], ["None"], "methods", ["None"], ["", "def", "restore_model", "(", "self", ",", "transfer_ae_dir", ",", "epoch", ",", "verbose", "=", "None", ")", ":", "\n", "        ", "\"\"\"This function is degenerated. Loading the model\n        occurs under get_reconstructions-->trainer.build_network()\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.atlasnet.atlasnet_ae.AtlasNetAutoEncoder.get_reconstructions": [[40, 66], ["transfer.parser_transfer", "transfer.parser_transfer", "transfer.parser_transfer", "numpy.zeros", "torch.cuda.set_device", "transfer.plant_seeds", "transfer.plant_seeds", "transfer.plant_seeds", "trainer.Trainer.Trainer.Trainer", "trainer.Trainer.Trainer.build_dataset", "trainer.Trainer.Trainer.build_network", "trainer.Trainer.Trainer.build_optimizer", "trainer.Trainer.Trainer.build_losses", "time.time", "torch.no_grad", "trainer.Trainer.Trainer.test_epoch", "src.general_utils.plot_3d_point_cloud", "src.general_utils.plot_3d_point_cloud"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.argument_parser.parser_transfer", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.argument_parser.parser_transfer", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.argument_parser.parser_transfer", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.plant_seeds", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.plant_seeds", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.plant_seeds", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.trainer_dataset.TrainerDataset.build_dataset", "home.repos.pwc.inspect_result.itailang_geometric_adv.model.trainer_model.TrainerModel.build_network", "home.repos.pwc.inspect_result.itailang_geometric_adv.model.trainer_model.TrainerModel.build_optimizer", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_loss.TrainerLoss.build_losses", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.test_epoch", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.plot_3d_point_cloud", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.plot_3d_point_cloud"], ["", "def", "get_reconstructions", "(", "self", ",", "pc_input", ",", "flags", ")", ":", "\n", "        ", "opt", "=", "argument_parser", ".", "parser_transfer", "(", "flags", ")", "\n", "opt", ".", "mode", "=", "'test'", "\n", "opt", ".", "custom_data", "=", "True", "\n", "pc_recon", "=", "np", ".", "zeros", "(", "[", "pc_input", ".", "shape", "[", "0", "]", ",", "2500", ",", "3", "]", ",", "dtype", "=", "pc_input", ".", "dtype", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "multi_gpu", "[", "0", "]", ")", "\n", "my_utils", ".", "plant_seeds", "(", "random_seed", "=", "opt", ".", "random_seed", ")", "\n", "\n", "import", "transfer", ".", "atlasnet", ".", "training", ".", "trainer", "as", "trainer", "\n", "\n", "trainer", "=", "trainer", ".", "Trainer", "(", "opt", ")", "\n", "trainer", ".", "build_dataset", "(", "test_pc", "=", "pc_input", ",", "shuffle_test", "=", "False", ")", "\n", "trainer", ".", "build_network", "(", ")", "\n", "trainer", ".", "build_optimizer", "(", ")", "\n", "trainer", ".", "build_losses", "(", ")", "\n", "trainer", ".", "start_train_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pc_recon", "=", "trainer", ".", "test_epoch", "(", "pc_recon", "=", "pc_recon", ")", "\n", "\n", "", "show", "=", "False", "\n", "if", "show", ":", "\n", "            ", "plot_3d_point_cloud", "(", "pc_input", "[", "0", "]", ")", "\n", "plot_3d_point_cloud", "(", "pc_recon", "[", "0", "]", ")", "\n", "\n", "", "return", "pc_recon", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.atlasnet.atlasnet_ae.AtlasNetAutoEncoder.get_loss_per_pc": [[67, 89], ["torch.zeros", "loss.cpu().detach().numpy.cpu().detach().numpy.cuda", "range", "loss.cpu().detach().numpy.cpu().detach().numpy.cpu().detach().numpy", "len", "len", "torch.tensor", "pc_recon_ch.cuda.cuda.cuda", "torch.tensor", "target_pc_ch.cuda.cuda.cuda", "atlasnet_ae.AtlasNetAutoEncoder.chamferloss", "torch.mean", "torch.mean", "loss.cpu().detach().numpy.cpu().detach().numpy.cpu().detach", "loss.cpu().detach().numpy.cpu().detach().numpy.cpu"], "methods", ["None"], ["", "def", "get_loss_per_pc", "(", "self", ",", "pc_recon", ",", "target_pc", ")", ":", "\n", "        ", "assert", "len", "(", "pc_recon", ".", "shape", ")", "==", "3", ",", "'The pc_input should have 3 dimensions'", "\n", "assert", "len", "(", "target_pc", ".", "shape", ")", "==", "3", ",", "'The target_pc should have 3 dimensions'", "\n", "assert", "pc_recon", ".", "shape", "[", "0", "]", "==", "target_pc", ".", "shape", "[", "0", "]", ",", "'Number of point clouds must match'", "\n", "\n", "n_examples", "=", "pc_recon", ".", "shape", "[", "0", "]", "\n", "loss", "=", "torch", ".", "zeros", "(", "n_examples", ")", "\n", "loss", "=", "loss", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "n_examples", ",", "1", ")", ":", "\n", "            ", "pc_recon_ch", "=", "torch", ".", "tensor", "(", "pc_recon", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "pc_recon_ch", "=", "pc_recon_ch", ".", "cuda", "(", ")", "\n", "target_pc_ch", "=", "torch", ".", "tensor", "(", "target_pc", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "target_pc_ch", "=", "target_pc_ch", ".", "cuda", "(", ")", "\n", "\n", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", "=", "self", ".", "chamferloss", "(", "pc_recon_ch", ",", "target_pc_ch", ")", "# mean over points", "\n", "\n", "loss", "[", "i", "]", "=", "torch", ".", "mean", "(", "dist1", ")", "+", "torch", ".", "mean", "(", "dist2", ")", "# mean over points", "\n", "\n", "", "loss", "=", "loss", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.launcher.Experiments.__init__": [[11, 89], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "atlasnet", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/atlasnet_autoencoder_1_sphere  --nb_primitives 1 --template_type SPHERE\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/atlasnet_autoencoder_25_squares  --nb_primitives 25 --template_type SQUARE\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name log/atlasnet_singleview_1_sphere_tmp_True --nb_primitives 1 --template_type SPHERE --SVR --reload_decoder_path log/atlasnet_autoencoder_1_sphere/network.pth --train_only_encoder\"", ",", "\n", "4", ":", "\"python train.py --shapenet13 --dir_name log/atlasnet_singleview_25_squares_tmp_True  --nb_primitives 25 --template_type SQUARE  --SVR  --reload_decoder_path log/atlasnet_autoencoder_25_squares/network.pth --train_only_encoder\"", ",", "\n", "5", ":", "\"python train.py --shapenet13 --dir_name log/atlasnet_singleview_1_sphere --nb_primitives 1 --template_type SPHERE --SVR --reload_model_path log/atlasnet_singleview_1_sphere_tmp_True/network.pth --lrate 0.0001 --nepoch 50 --lr_decay_1 40\"", ",", "\n", "6", ":", "\"python train.py --shapenet13 --dir_name log/atlasnet_singleview_25_squares  --nb_primitives 25 --template_type SQUARE  --SVR  --reload_model_path log/atlasnet_singleview_25_squares_tmp_True/network.pth  --lrate 0.0001 --nepoch 50 --lr_decay_1 40\"", ",", "\n", "}", "\n", "\n", "self", ".", "atlasnet_test", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name training/trained_models/atlasnet_autoencoder_1_sphere  --nb_primitives 1 --template_type SPHERE --run_single_eval --no_metro\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name training/trained_models/atlasnet_autoencoder_25_squares  --nb_primitives 25 --template_type SQUARE  --run_single_eval --no_metro\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name training/trained_models/atlasnet_singleview_1_sphere  --nb_primitives 1 --template_type SPHERE --run_single_eval --no_metro  --SVR\"", ",", "\n", "4", ":", "\"python train.py --shapenet13 --dir_name training/trained_models/atlasnet_singleview_25_squares  --nb_primitives 25 --template_type SQUARE  --run_single_eval --no_metro  --SVR\"", ",", "\n", "}", "\n", "self", ".", "template", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/template_sphere --template_type SPHERE\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/template_square --template_type SQUARE --nb_primitives 1\"", ",", "\n", "}", "\n", "self", ".", "num_prim", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/num_prim_10 --nb_primitives 10  --template_type SQUARE\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/num_prim_25 --nb_primitives 25  --template_type SQUARE\"", ",", "\n", "}", "\n", "self", ".", "data_augmentation", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/data_augmentation_1 --nb_primitives 10 --random_translation 1\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/data_augmentation_2 --nb_primitives 10 --random_translation 1 --anisotropic_scaling 1\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name log/data_augmentation_3 --nb_primitives 10 --data_augmentation_axis_rotation 1 --data_augmentation_random_flips 1 --random_translation 1 --anisotropic_scaling 1\"", ",", "\n", "4", ":", "\"python train.py --shapenet13 --dir_name log/data_augmentation_4 --nb_primitives 10 --random_rotation 1 --data_augmentation_random_flips 1 --random_translation 1 --anisotropic_scaling 1\"", ",", "\n", "}", "\n", "\n", "self", ".", "number_points", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/number_points_8000 --nb_primitives 10 --number_points 8000\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/number_points_1000 --nb_primitives 10 --number_points 1000\"", ",", "\n", "}", "\n", "\n", "self", ".", "normalization", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/normalization_boundingBox --nb_primitives 10 --normalization BoundingBox\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/normalization_identity --nb_primitives 10 --normalization Identity\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name log/normalization_unitBall --nb_primitives 10 --normalization UnitBall\"", ",", "\n", "}", "\n", "\n", "self", ".", "bottleneck_size", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/bottleneck_size_128 --nb_primitives 10 --bottleneck_size 128\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/bottleneck_size_2048 --nb_primitives 10 --bottleneck_size 2048\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name log/bottleneck_size_4096 --nb_primitives 10 --bottleneck_size 4096\"", ",", "\n", "}", "\n", "\n", "self", ".", "multi_gpu", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/multi_gpu_1 --multi_gpu 0 1 2 3 --batch_size 128\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/multi_gpu_10 --multi_gpu 0 1 2 3 --nb_primitives 10 --batch_size 128\"", ",", "\n", "}", "\n", "\n", "self", ".", "activation", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/activation_sigmoid --nb_primitives 10  --activation sigmoid\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/activation_softplus --nb_primitives 10  --activation softplus\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name log/activation_logsigmoid --nb_primitives 10  --activation logsigmoid\"", ",", "\n", "4", ":", "\"python train.py --shapenet13 --dir_name log/activation_softsign --nb_primitives 10  --activation softsign\"", ",", "\n", "5", ":", "\"python train.py --shapenet13 --dir_name log/activation_tanh --nb_primitives 10  --activation tanh\"", ",", "\n", "}", "\n", "\n", "self", ".", "num_layers", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/num_layers_2 --nb_primitives 10  --num_layers 2\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/num_layers_3 --nb_primitives 10  --num_layers 3\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name log/num_layers_4 --nb_primitives 10  --num_layers 4\"", ",", "\n", "4", ":", "\"python train.py --shapenet13 --dir_name log/num_layers_5 --nb_primitives 10  --num_layers 5\"", ",", "\n", "}", "\n", "\n", "self", ".", "hidden_neurons", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/hidden_neurons_256 --nb_primitives 10  --hidden_neurons 256\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/hidden_neurons_128 --nb_primitives 10  --hidden_neurons 128\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name log/hidden_neurons_64 --nb_primitives 10  --hidden_neurons 64\"", ",", "\n", "4", ":", "\"python train.py --shapenet13 --dir_name log/hidden_neurons_512 --nb_primitives 10  --hidden_neurons 512\"", ",", "\n", "5", ":", "\"python train.py --shapenet13 --dir_name log/hidden_neurons_1024 --nb_primitives 10  --hidden_neurons 1024\"", ",", "\n", "}", "\n", "\n", "self", ".", "single_view", "=", "{", "\n", "1", ":", "\"python train.py --dir_name log/single_view --shapenet13 --nb_primitives 10  --SVR\"", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.launcher.get_first_available_gpu": [[95, 111], ["gpustat.new_query", "range", "len", "print", "os.system", "os.system", "gpu.processes.__len__", "int"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.__len__"], ["def", "get_first_available_gpu", "(", ")", ":", "\n", "    ", "\"\"\"\n    Check if a gpu is free and returns it\n    :return: gpu_id\n    \"\"\"", "\n", "query", "=", "gpustat", ".", "new_query", "(", ")", "\n", "for", "gpu_id", "in", "range", "(", "len", "(", "query", ")", ")", ":", "\n", "        ", "gpu", "=", "query", "[", "gpu_id", "]", "\n", "print", "(", "gpu_id", ",", "gpu", ".", "memory_used", ")", "\n", "if", "gpu", ".", "memory_used", "<", "2000", ":", "\n", "            ", "if", "gpu", ".", "utilization", "==", "0", "and", "gpu", ".", "memory_used", "<", "12", "and", "gpu_id", "==", "0", "and", "gpu", ".", "processes", ".", "__len__", "(", ")", "==", "0", ":", "\n", "                ", "os", ".", "system", "(", "f\"tmux kill-session -t GPU{gpu_id}\"", ")", "\n", "", "has", "=", "os", ".", "system", "(", "f\"tmux has-session -t GPU{gpu_id} 2>/dev/null\"", ")", "\n", "if", "not", "int", "(", "has", ")", "==", "0", ":", "\n", "                ", "return", "gpu_id", "\n", "", "", "", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.launcher.job_scheduler_parralel": [[113, 133], ["list", "dict_of_jobs.keys", "len", "list.pop", "launcher.get_first_available_gpu", "print", "os.system", "time.sleep", "launcher.get_first_available_gpu", "print", "time.sleep"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.launcher.get_first_available_gpu", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.launcher.get_first_available_gpu"], ["", "def", "job_scheduler_parralel", "(", "dict_of_jobs", ")", ":", "\n", "    ", "\"\"\"\n    Launch Tmux session each time it finds a free gpu\n    :param dict_of_jobs:\n    \"\"\"", "\n", "keys", "=", "list", "(", "dict_of_jobs", ".", "keys", "(", ")", ")", "\n", "while", "len", "(", "keys", ")", ">", "0", ":", "\n", "        ", "job_key", "=", "keys", ".", "pop", "(", ")", "\n", "job", "=", "dict_of_jobs", "[", "job_key", "]", "\n", "while", "get_first_available_gpu", "(", ")", "<", "0", ":", "\n", "            ", "print", "(", "\"Waiting to find a GPU for \"", ",", "job", ")", "\n", "time", ".", "sleep", "(", "15", ")", "# Sleeps for 30 sec", "\n", "\n", "", "gpu_id", "=", "get_first_available_gpu", "(", ")", "\n", "name_tmux", "=", "f\"GPU{gpu_id}\"", "\n", "cmd", "=", "f\"conda activate python3;  {job} --multi_gpu {gpu_id} 2>&1 | tee  log_terminals/{gpu_id}_{job_key}.txt; tmux kill-session -t {name_tmux}\"", "\n", "CMD", "=", "f'tmux new-session -d -s {name_tmux} \\; send-keys \"{cmd}\" Enter'", "\n", "print", "(", "CMD", ")", "\n", "os", ".", "system", "(", "CMD", ")", "\n", "time", ".", "sleep", "(", "15", ")", "# Sleeps for 30 sec", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.launcher.job_scheduler_sequential": [[135, 157], ["list", "launcher.get_first_available_gpu", "dict_of_jobs.keys", "launcher.get_first_available_gpu", "time.sleep", "len", "os.system", "time.sleep", "list.pop", "print", "os.system", "int"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.launcher.get_first_available_gpu", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.launcher.get_first_available_gpu"], ["", "", "def", "job_scheduler_sequential", "(", "dict_of_jobs", ")", ":", "\n", "    ", "\"\"\"\n    Choose a gpum then launches jobs sequentially on that GPU in tmux sessions.\n    :param dict_of_jobs:\n    \"\"\"", "\n", "keys", "=", "list", "(", "dict_of_jobs", ".", "keys", "(", ")", ")", "\n", "while", "get_first_available_gpu", "(", ")", "<", "0", ":", "\n", "        ", "time", ".", "sleep", "(", "15", ")", "# Sleeps for 30 sec", "\n", "\n", "", "gpu_id", "=", "get_first_available_gpu", "(", ")", "\n", "\n", "while", "len", "(", "keys", ")", ">", "0", ":", "\n", "        ", "has", "=", "os", ".", "system", "(", "f\"tmux has-session -t GPU{gpu_id} 2>/dev/null\"", ")", "\n", "if", "not", "int", "(", "has", ")", "==", "0", ":", "\n", "            ", "job_key", "=", "keys", ".", "pop", "(", ")", "\n", "job", "=", "dict_of_jobs", "[", "job_key", "]", "\n", "name_tmux", "=", "f\"GPU{gpu_id}\"", "\n", "cmd", "=", "f\"conda activate python3;  {job}  2>&1 | tee  log_terminals/{gpu_id}_{job_key}.txt; tmux kill-session -t {name_tmux}\"", "\n", "CMD", "=", "f'tmux new-session -d -s {name_tmux} \\; send-keys \"{cmd}\" Enter'", "\n", "print", "(", "CMD", ")", "\n", "os", ".", "system", "(", "CMD", ")", "\n", "", "time", ".", "sleep", "(", "60", ")", "# Sleeps for 30 sec", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_abstract.TrainerAbstract.__init__": [[30, 40], ["object.__init__", "time.time", "trainer_abstract.TrainerAbstract.start_visdom", "trainer_abstract.TrainerAbstract.get_log_paths", "trainer_abstract.TrainerAbstract.init_meters", "trainer_abstract.TrainerAbstract.reset_epoch", "transfer.print_arg", "transfer.print_arg", "transfer.print_arg"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.start_visdom", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.get_log_paths", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.init_meters", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.reset_epoch", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.print_arg", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.print_arg", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.print_arg"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "TrainerAbstract", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "start_visdom", "(", ")", "\n", "self", ".", "get_log_paths", "(", ")", "\n", "self", ".", "init_meters", "(", ")", "\n", "self", ".", "reset_epoch", "(", ")", "\n", "if", "not", "opt", ".", "demo", ":", "\n", "            ", "my_utils", ".", "print_arg", "(", "self", ".", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_abstract.TrainerAbstract.start_visdom": [[41, 45], ["transfer.Visualizer", "transfer.Visualizer", "transfer.Visualizer"], "methods", ["None"], ["", "", "def", "start_visdom", "(", "self", ")", ":", "\n", "        ", "self", ".", "visualizer", "=", "visualization", ".", "Visualizer", "(", "self", ".", "opt", ".", "visdom_port", ",", "self", ".", "opt", ".", "env", ",", "self", ".", "opt", ".", "http_port", ")", "\n", "self", ".", "opt", ".", "visdom_port", "=", "self", ".", "visualizer", ".", "visdom_port", "\n", "self", ".", "opt", ".", "http_port", "=", "self", ".", "visualizer", ".", "http_port", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_abstract.TrainerAbstract.get_log_paths": [[46, 69], ["os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "print", "os.mkdir", "os.path.exists", "print", "os.mkdir"], "methods", ["None"], ["", "def", "get_log_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Define paths to save and reload networks from parsed options\n        :return:\n        \"\"\"", "\n", "\n", "if", "not", "self", ".", "opt", ".", "demo", ":", "\n", "            ", "if", "not", "exists", "(", "\"log\"", ")", ":", "\n", "                ", "print", "(", "\"Creating log folder\"", ")", "\n", "mkdir", "(", "\"log\"", ")", "\n", "", "if", "not", "exists", "(", "self", ".", "opt", ".", "dir_name", ")", ":", "\n", "                ", "print", "(", "\"creating folder  \"", ",", "self", ".", "opt", ".", "dir_name", ")", "\n", "mkdir", "(", "self", ".", "opt", ".", "dir_name", ")", "\n", "\n", "", "", "self", ".", "opt", ".", "log_path", "=", "join", "(", "self", ".", "opt", ".", "dir_name", ",", "\"log.txt\"", ")", "\n", "self", ".", "opt", ".", "optimizer_path", "=", "join", "(", "self", ".", "opt", ".", "dir_name", ",", "'optimizer.pth'", ")", "\n", "self", ".", "opt", ".", "model_path", "=", "join", "(", "self", ".", "opt", ".", "dir_name", ",", "\"network.pth\"", ")", "\n", "self", ".", "opt", ".", "reload_optimizer_path", "=", "\"\"", "\n", "\n", "# # If a network is already created in the directory", "\n", "if", "exists", "(", "self", ".", "opt", ".", "model_path", ")", ":", "\n", "            ", "self", ".", "opt", ".", "reload_model_path", "=", "self", ".", "opt", ".", "model_path", "\n", "self", ".", "opt", ".", "reload_optimizer_path", "=", "self", ".", "opt", ".", "optimizer_path", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_abstract.TrainerAbstract.init_meters": [[70, 72], ["transfer.Logs", "transfer.Logs", "transfer.Logs"], "methods", ["None"], ["", "", "def", "init_meters", "(", "self", ")", ":", "\n", "        ", "self", ".", "log", "=", "meter", ".", "Logs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_abstract.TrainerAbstract.print_loss_info": [[73, 75], ["None"], "methods", ["None"], ["", "def", "print_loss_info", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_abstract.TrainerAbstract.save_network": [[76, 81], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "trainer_abstract.TrainerAbstract.network.state_dict", "trainer_abstract.TrainerAbstract.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save"], ["", "def", "save_network", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"saving net...\"", ")", "\n", "torch", ".", "save", "(", "self", ".", "network", ".", "state_dict", "(", ")", ",", "self", ".", "opt", ".", "model_path", ")", "\n", "torch", ".", "save", "(", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "self", ".", "opt", ".", "optimizer_path", ")", "\n", "print", "(", "\"network saved\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_abstract.TrainerAbstract.dump_stats": [[82, 102], ["log_table.update", "print", "open", "f.write", "open", "dict", "dict.pop", "f.write", "os.path.join", "json.dumps", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.update", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dict", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write"], ["", "def", "dump_stats", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Save stats at each epoch\n        \"\"\"", "\n", "\n", "log_table", "=", "{", "\n", "\"epoch\"", ":", "self", ".", "epoch", "+", "1", ",", "\n", "\"lr\"", ":", "self", ".", "opt", ".", "lrate", ",", "\n", "\"env\"", ":", "self", ".", "opt", ".", "env", ",", "\n", "}", "\n", "log_table", ".", "update", "(", "self", ".", "log", ".", "current_epoch", ")", "\n", "print", "(", "log_table", ")", "\n", "with", "open", "(", "self", ".", "opt", ".", "log_path", ",", "\"a\"", ")", "as", "f", ":", "# open and append", "\n", "            ", "f", ".", "write", "(", "\"json_stats: \"", "+", "json", ".", "dumps", "(", "log_table", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "self", ".", "opt", ".", "start_epoch", "=", "self", ".", "epoch", "\n", "with", "open", "(", "join", "(", "self", ".", "opt", ".", "dir_name", ",", "\"options.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "# open and append", "\n", "            ", "save_dict", "=", "dict", "(", "self", ".", "opt", ".", "__dict__", ")", "\n", "save_dict", ".", "pop", "(", "\"device\"", ")", "\n", "f", ".", "write", "(", "json", ".", "dumps", "(", "save_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_abstract.TrainerAbstract.print_iteration_stats": [[103, 124], ["time.time", "print", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "loss.item", "termcolor.colored", "int", "termcolor.colored"], "methods", ["None"], ["", "", "def", "print_iteration_stats", "(", "self", ",", "loss", ")", ":", "\n", "        ", "\"\"\"\n        print stats at each iteration\n        \"\"\"", "\n", "current_time", "=", "time", ".", "time", "(", ")", "\n", "ellpased_time", "=", "current_time", "-", "self", ".", "start_train_time", "\n", "total_time_estimated", "=", "self", ".", "opt", ".", "nepoch", "*", "(", "self", ".", "datasets", ".", "len_dataset", "/", "self", ".", "opt", ".", "batch_size", ")", "*", "ellpased_time", "/", "(", "\n", "0.00001", "+", "self", ".", "iteration", "+", "1.0", "*", "self", ".", "epoch", "*", "self", ".", "datasets", ".", "len_dataset", "/", "self", ".", "opt", ".", "batch_size", ")", "# regle de 3", "\n", "ETL", "=", "total_time_estimated", "-", "ellpased_time", "\n", "print", "(", "\n", "f\"\\r[\"", "\n", "+", "colored", "(", "f\"{self.epoch}\"", ",", "\"cyan\"", ")", "\n", "+", "f\": \"", "\n", "+", "colored", "(", "f\"{self.iteration}\"", ",", "\"red\"", ")", "\n", "+", "\"/\"", "\n", "+", "colored", "(", "f\"{int(self.datasets.len_dataset / self.opt.batch_size)}\"", ",", "\"red\"", ")", "\n", "+", "\"] chamfer train loss:  \"", "\n", "+", "colored", "(", "f\"{loss.item()} \"", ",", "\"yellow\"", ")", "\n", "+", "colored", "(", "f\"Ellapsed Time: {ellpased_time / 60 / 60}h \"", ",", "\"cyan\"", ")", "\n", "+", "colored", "(", "f\"ETL: {ETL / 60 / 60}h\"", ",", "\"red\"", ")", ",", "\n", "end", "=", "\"\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_abstract.TrainerAbstract.learning_rate_scheduler": [[126, 150], ["len", "trainer_abstract.TrainerAbstract.next_learning_rates.pop", "print", "print", "torch.Adam", "torch.Adam", "print", "torch.Adam", "torch.Adam", "print", "torch.Adam", "torch.Adam", "trainer_abstract.TrainerAbstract.network.parameters", "trainer_abstract.TrainerAbstract.network.parameters", "trainer_abstract.TrainerAbstract.network.parameters"], "methods", ["None"], ["", "def", "learning_rate_scheduler", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Defines the learning rate schedule\n        \"\"\"", "\n", "# Warm-up following https://arxiv.org/pdf/1706.02677.pdf", "\n", "if", "len", "(", "self", ".", "next_learning_rates", ")", ">", "0", ":", "\n", "            ", "next_learning_rate", "=", "self", ".", "next_learning_rates", ".", "pop", "(", ")", "\n", "print", "(", "f\"warm-up learning rate {next_learning_rate}\"", ")", "\n", "for", "g", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                ", "g", "[", "'lr'", "]", "=", "next_learning_rate", "\n", "\n", "# Learning rate decay", "\n", "", "", "if", "self", ".", "epoch", "==", "self", ".", "opt", ".", "lr_decay_1", ":", "\n", "            ", "self", ".", "opt", ".", "lrate", "=", "self", ".", "opt", ".", "lrate", "/", "10.0", "\n", "print", "(", "f\"First learning rate decay {self.opt.lrate}\"", ")", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "network", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lrate", ")", "\n", "", "if", "self", ".", "epoch", "==", "self", ".", "opt", ".", "lr_decay_2", ":", "\n", "            ", "self", ".", "opt", ".", "lrate", "=", "self", ".", "opt", ".", "lrate", "/", "10.0", "\n", "print", "(", "f\"Second learning rate decay {self.opt.lrate}\"", ")", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "network", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lrate", ")", "\n", "", "if", "self", ".", "epoch", "==", "self", ".", "opt", ".", "lr_decay_3", ":", "\n", "            ", "self", ".", "opt", ".", "lrate", "=", "self", ".", "opt", ".", "lrate", "/", "10.0", "\n", "print", "(", "f\"Third learning rate decay {self.opt.lrate}\"", ")", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "network", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lrate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_abstract.TrainerAbstract.increment_epoch": [[151, 153], ["None"], "methods", ["None"], ["", "", "def", "increment_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "self", ".", "epoch", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_abstract.TrainerAbstract.increment_iteration": [[154, 156], ["None"], "methods", ["None"], ["", "def", "increment_iteration", "(", "self", ")", ":", "\n", "        ", "self", ".", "iteration", "=", "self", ".", "iteration", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_abstract.TrainerAbstract.reset_iteration": [[157, 159], ["None"], "methods", ["None"], ["", "def", "reset_iteration", "(", "self", ")", ":", "\n", "        ", "self", ".", "iteration", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_abstract.TrainerAbstract.reset_epoch": [[160, 162], ["None"], "methods", ["None"], ["", "def", "reset_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "self", ".", "opt", ".", "start_epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_loss.TrainerLoss.__init__": [[26, 28], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TrainerLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_loss.TrainerLoss.build_losses": [[29, 35], ["transfer.chamfer_3DDist", "transfer.chamfer_3DDist"], "methods", ["None"], ["", "def", "build_losses", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Create loss functions.\n        \"\"\"", "\n", "self", ".", "distChamfer", "=", "dist_chamfer_3D", ".", "chamfer_3DDist", "(", ")", "\n", "self", ".", "loss_model", "=", "self", ".", "chamfer_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_loss.TrainerLoss.fuse_primitives": [[36, 46], ["trainer_loss.TrainerLoss.data.pointsReconstructed_prims.transpose().contiguous", "trainer_loss.TrainerLoss.data.pointsReconstructed.view", "trainer_loss.TrainerLoss.data.pointsReconstructed_prims.transpose"], "methods", ["None"], ["", "def", "fuse_primitives", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Merge generated surface elements in a single one and prepare data for Chamfer\n        Input size : batch, prim, 3, npoints\n        Output size : prim, prim*npoints, 3\n        :return:\n        \"\"\"", "\n", "#", "\n", "self", ".", "data", ".", "pointsReconstructed", "=", "self", ".", "data", ".", "pointsReconstructed_prims", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "data", ".", "pointsReconstructed", "=", "self", ".", "data", ".", "pointsReconstructed", ".", "view", "(", "self", ".", "batch_size", ",", "-", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_loss.TrainerLoss.chamfer_loss": [[47, 60], ["trainer_loss.TrainerLoss.data.points.view().contiguous", "trainer_loss.TrainerLoss.data.pointsReconstructed.contiguous().view().contiguous", "trainer_loss.TrainerLoss.distChamfer", "torch.mean", "torch.mean", "transfer.atlasnet.auxiliary.ChamferDistancePytorch.fscore.fscore", "transfer.atlasnet.auxiliary.ChamferDistancePytorch.fscore.fscore", "trainer_loss.TrainerLoss.data.loss_fscore.mean", "trainer_loss.TrainerLoss.data.points.view", "trainer_loss.TrainerLoss.data.pointsReconstructed.contiguous().view", "trainer_loss.TrainerLoss.data.points.size", "trainer_loss.TrainerLoss.data.points.size", "trainer_loss.TrainerLoss.data.pointsReconstructed.contiguous"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.chamfer_python.distChamfer", "home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.fscore.fscore", "home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.fscore.fscore"], ["", "def", "chamfer_loss", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Training loss of Atlasnet. The Chamfer Distance. Compute the f-score in eval mode.\n        :return:\n        \"\"\"", "\n", "inCham1", "=", "self", ".", "data", ".", "points", ".", "view", "(", "self", ".", "data", ".", "points", ".", "size", "(", "0", ")", ",", "-", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "inCham2", "=", "self", ".", "data", ".", "pointsReconstructed", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "data", ".", "points", ".", "size", "(", "0", ")", ",", "-", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", "=", "self", ".", "distChamfer", "(", "inCham1", ",", "inCham2", ")", "# mean over points", "\n", "self", ".", "data", ".", "loss", "=", "torch", ".", "mean", "(", "dist1", ")", "+", "torch", ".", "mean", "(", "dist2", ")", "# mean over points", "\n", "if", "not", "self", ".", "flags", ".", "train", ":", "\n", "            ", "self", ".", "data", ".", "loss_fscore", ",", "_", ",", "_", "=", "fscore", "(", "dist1", ",", "dist2", ")", "\n", "self", ".", "data", ".", "loss_fscore", "=", "self", ".", "data", ".", "loss_fscore", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_loss.TrainerLoss.metro": [[61, 92], ["print", "numpy.array().mean", "print", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "open", "file.read().split", "joblib.Parallel", "trainer_loss.TrainerLoss.demo", "trainer_loss.TrainerLoss.metro_args_input.append", "numpy.array", "file.read", "file.split", "joblib.delayed", "file.split"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.demo", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.read"], ["", "", "def", "metro", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Compute the metro distance on a randomly selected test files.\n        Uses joblib to leverage as much cpu as possible\n        :return:\n        \"\"\"", "\n", "metro_path", "=", "'./dataset/data/metro_files'", "\n", "metro_files_path", "=", "'/'", ".", "join", "(", "[", "metro_path", ",", "'files-metro.txt'", "]", ")", "\n", "self", ".", "metro_args_input", "=", "[", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "metro_files_path", ")", ":", "\n", "            ", "os", ".", "system", "(", "\"chmod +x dataset/download_metro_files.sh\"", ")", "\n", "os", ".", "system", "(", "\"./dataset/download_metro_files.sh\"", ")", "\n", "", "ext", "=", "'.png'", "if", "self", ".", "opt", ".", "SVR", "else", "'.npy'", "\n", "with", "open", "(", "metro_files_path", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "files", "=", "file", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "\n", "", "for", "file", "in", "files", ":", "\n", "            ", "if", "file", "[", "-", "3", ":", "]", "==", "\"ply\"", ":", "\n", "                ", "cat", "=", "file", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "name", "=", "file", ".", "split", "(", "'/'", ")", "[", "1", "]", "[", ":", "-", "4", "]", "\n", "input_path", "=", "'/'", ".", "join", "(", "[", "metro_path", ",", "cat", ",", "name", "+", "ext", "]", ")", "\n", "input_path_points", "=", "'/'", ".", "join", "(", "[", "metro_path", ",", "cat", ",", "name", "+", "'.npy'", "]", ")", "\n", "gt_path", "=", "'/'", ".", "join", "(", "[", "metro_path", ",", "cat", ",", "name", "+", "'.ply'", "]", ")", "\n", "path", "=", "self", ".", "demo", "(", "input_path", ",", "input_path_points", ")", "\n", "self", ".", "metro_args_input", ".", "append", "(", "(", "path", ",", "gt_path", ")", ")", "\n", "\n", "", "", "print", "(", "\"start metro calculus. This is going to take some time (30 minutes)\"", ")", "\n", "self", ".", "metro_results", "=", "Parallel", "(", "n_jobs", "=", "-", "1", ",", "backend", "=", "\"multiprocessing\"", ")", "(", "\n", "delayed", "(", "metro", ".", "metro", ")", "(", "*", "i", ")", "for", "i", "in", "self", ".", "metro_args_input", ")", "\n", "self", ".", "metro_results", "=", "np", ".", "array", "(", "self", ".", "metro_results", ")", ".", "mean", "(", ")", "\n", "print", "(", "f\"Metro distance : {self.metro_results}\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.init_html_report.main": [[14, 31], ["transfer.atlasnet.auxiliary.netvision.HtmlGenerator.HtmlGenerator", "transfer.atlasnet.auxiliary.netvision.HtmlGenerator.HtmlGenerator.return_html", "transfer.atlasnet.auxiliary.netvision.HtmlGenerator.HtmlGenerator.add_table", "webpage.add_table.add_column", "webpage.add_table.add_column", "webpage.add_table.add_column", "webpage.add_table.add_column", "webpage.add_table.add_column", "webpage.add_table.add_column"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.return_html", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_table", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_column", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_column", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_column", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_column", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_column", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_column"], ["def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create a master webpage to summarize results of all experiments.\n    Author: Thibault Groueix 01.11.2019\n    \"\"\"", "\n", "webpage", "=", "HtmlGenerator", "(", "path", "=", "\"master.html\"", ")", "\n", "\n", "for", "dataset", "in", "[", "\"Shapenet\"", "]", ":", "\n", "        ", "table", "=", "webpage", ".", "add_table", "(", "dataset", ")", "\n", "table", ".", "add_column", "(", "\"Num Primitives\"", ")", "\n", "table", ".", "add_column", "(", "\"Decoder\"", ")", "\n", "table", ".", "add_column", "(", "\"Chamfer\"", ")", "\n", "table", ".", "add_column", "(", "\"F-Score\"", ")", "\n", "table", ".", "add_column", "(", "\"Metro\"", ")", "\n", "table", ".", "add_column", "(", "\"Dirname\"", ")", "\n", "\n", "", "webpage", ".", "return_html", "(", "save_editable_version", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.AverageValueMeter.__init__": [[10, 12], ["meter.AverageValueMeter.reset"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.AverageValueMeter.reset": [[13, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.AverageValueMeter.update": [[19, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.__init__": [[31, 39], ["meter.AverageValueMeter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "curves", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "curves_names", "=", "curves", "\n", "self", ".", "curves", "=", "{", "}", "\n", "self", ".", "meters", "=", "{", "}", "\n", "self", ".", "current_epoch", "=", "{", "}", "\n", "for", "name", "in", "self", ".", "curves_names", ":", "\n", "            ", "self", ".", "curves", "[", "name", "]", "=", "[", "]", "\n", "self", ".", "meters", "[", "name", "]", "=", "AverageValueMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.end_epoch": [[40, 51], ["meter.Logs.curves[].append", "len", "print", "termcolor.colored", "termcolor.colored"], "methods", ["None"], ["", "", "def", "end_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Add meters average in average list and keep in current_epoch the current statistics\n        :return:\n        \"\"\"", "\n", "for", "name", "in", "self", ".", "curves_names", ":", "\n", "            ", "self", ".", "curves", "[", "name", "]", ".", "append", "(", "self", ".", "meters", "[", "name", "]", ".", "avg", ")", "\n", "if", "len", "(", "name", ")", "<", "20", ":", "\n", "                ", "print", "(", "colored", "(", "name", ",", "'yellow'", ")", "+", "\" \"", "+", "colored", "(", "f\"{self.meters[name].avg}\"", ",", "'cyan'", ")", ")", "\n", "\n", "", "self", ".", "current_epoch", "[", "name", "]", "=", "self", ".", "meters", "[", "name", "]", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.reset": [[52, 59], ["meter.Logs.meters[].reset"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.reset"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset all meters\n        :return:\n        \"\"\"", "\n", "for", "name", "in", "self", ".", "curves_names", ":", "\n", "            ", "self", ".", "meters", "[", "name", "]", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.update": [[60, 75], ["print", "meter.AverageValueMeter", "meter.Logs.curves_names.append", "meter.Logs.meters[].update", "val.item", "meter.Logs.meters[].update"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.update", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.update"], ["", "", "def", "update", "(", "self", ",", "name", ",", "val", ")", ":", "\n", "        ", "\"\"\"\n        :param name: meter name\n        :param val: new value to add\n        :return: void\n        \"\"\"", "\n", "if", "not", "name", "in", "self", ".", "curves_names", ":", "\n", "            ", "print", "(", "f\"adding {name} to the log curves to display\"", ")", "\n", "self", ".", "meters", "[", "name", "]", "=", "AverageValueMeter", "(", ")", "\n", "self", ".", "curves", "[", "name", "]", "=", "[", "]", "\n", "self", ".", "curves_names", ".", "append", "(", "name", ")", "\n", "", "try", ":", "\n", "            ", "self", ".", "meters", "[", "name", "]", ".", "update", "(", "val", ".", "item", "(", ")", ")", "\n", "", "except", ":", "\n", "            ", "self", ".", "meters", "[", "name", "]", ".", "update", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.stack_numpy_array": [[76, 82], ["numpy.column_stack"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "stack_numpy_array", "(", "A", ",", "B", ")", ":", "\n", "        ", "if", "A", "is", "None", ":", "\n", "            ", "return", "B", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "column_stack", "(", "(", "A", ",", "B", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.plot_bar": [[83, 85], ["vis.bar"], "methods", ["None"], ["", "", "def", "plot_bar", "(", "self", ",", "vis", ",", "name", ")", ":", "\n", "        ", "vis", ".", "bar", "(", "self", ".", "meters", "[", "name", "]", ".", "avg", ",", "win", "=", "'barplot'", ")", "# Here", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.update_curves": [[86, 130], ["vis.line", "vis.line", "matplotlib.figure", "range", "matplotlib.title", "matplotlib.legend", "matplotlib.savefig", "matplotlib.figure", "range", "matplotlib.title", "matplotlib.legend", "matplotlib.savefig", "vis.line", "matplotlib.plot", "os.path.join", "matplotlib.plot", "os.path.join", "Names_Loss.append", "meter.Logs.stack_numpy_array", "meter.Logs.stack_numpy_array", "dict", "numpy.log", "dict", "numpy.log", "numpy.arange", "numpy.array", "numpy.arange", "dict", "len", "len"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.stack_numpy_array", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.stack_numpy_array", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dict", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dict", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dict"], ["", "def", "update_curves", "(", "self", ",", "vis", ",", "path", ")", ":", "\n", "        ", "X_Loss", "=", "None", "\n", "Y_Loss", "=", "None", "\n", "Names_Loss", "=", "[", "]", "\n", "\n", "for", "name", "in", "self", ".", "curves_names", ":", "\n", "            ", "if", "name", "[", ":", "4", "]", "==", "\"loss\"", ":", "\n", "                ", "Names_Loss", ".", "append", "(", "name", ")", "\n", "X_Loss", "=", "self", ".", "stack_numpy_array", "(", "X_Loss", ",", "np", ".", "arange", "(", "len", "(", "self", ".", "curves", "[", "name", "]", ")", ")", ")", "\n", "Y_Loss", "=", "self", ".", "stack_numpy_array", "(", "Y_Loss", ",", "np", ".", "array", "(", "self", ".", "curves", "[", "name", "]", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "", "", "vis", ".", "line", "(", "X", "=", "X_Loss", ",", "\n", "Y", "=", "Y_Loss", ",", "\n", "win", "=", "'loss'", ",", "\n", "opts", "=", "dict", "(", "title", "=", "\"loss\"", ",", "legend", "=", "Names_Loss", ")", ")", "\n", "\n", "vis", ".", "line", "(", "X", "=", "X_Loss", ",", "\n", "Y", "=", "np", ".", "log", "(", "Y_Loss", ")", ",", "\n", "win", "=", "'log'", ",", "\n", "opts", "=", "dict", "(", "title", "=", "\"log\"", ",", "legend", "=", "Names_Loss", ")", ")", "\n", "try", ":", "\n", "            ", "vis", ".", "line", "(", "X", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "curves", "[", "\"fscore\"", "]", ")", ")", ",", "\n", "Y", "=", "self", ".", "curves", "[", "\"fscore\"", "]", ",", "\n", "win", "=", "'fscore'", ",", "\n", "opts", "=", "dict", "(", "title", "=", "\"fscore\"", ")", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "# Save figures in PNGs", "\n", "", "plt", ".", "figure", "(", ")", "\n", "for", "i", "in", "range", "(", "X_Loss", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "X_Loss", "[", ":", ",", "i", "]", ",", "Y_Loss", "[", ":", ",", "i", "]", ",", "label", "=", "Names_Loss", "[", "i", "]", ")", "\n", "", "plt", ".", "title", "(", "'Curves'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"curve.png\"", ")", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "for", "i", "in", "range", "(", "X_Loss", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "X_Loss", "[", ":", ",", "i", "]", ",", "np", ".", "log", "(", "Y_Loss", "[", ":", ",", "i", "]", ")", ",", "label", "=", "Names_Loss", "[", "i", "]", ")", "\n", "", "plt", ".", "title", "(", "'Curves in Log'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"curve_log.png\"", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.visualization.Visualizer.__init__": [[23, 53], ["object.__init__", "visdom.Visdom", "visualization.is_port_in_use", "print", "print", "os.system", "time.sleep", "print", "visualization.is_port_in_use", "print", "print", "os.system", "print"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.visualization.is_port_in_use", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.visualization.is_port_in_use"], ["    ", "def", "__init__", "(", "self", ",", "visdom_port", ",", "env", ",", "http_port", ")", ":", "\n", "        ", "super", "(", "Visualizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Create Visdom Server", "\n", "try", ":", "\n", "            ", "if", "not", "is_port_in_use", "(", "visdom_port", ")", ":", "\n", "                ", "print", "(", "f\"Launching new visdom instance in port {visdom_port}\"", ")", "\n", "cmd", "=", "f\"{sys.executable} -m visdom.server -p {visdom_port} > /dev/null 2>&1\"", "\n", "CMD", "=", "f'TMUX=0 tmux new-session -d -s visdom_server \\; send-keys \"{cmd}\" Enter'", "\n", "print", "(", "CMD", ")", "\n", "os", ".", "system", "(", "CMD", ")", "\n", "time", ".", "sleep", "(", "2", ")", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "\"coudn't set up visdom server.\"", ")", "\n", "\n", "", "try", ":", "\n", "# Create Http Server", "\n", "            ", "if", "not", "is_port_in_use", "(", "http_port", ")", ":", "\n", "                ", "print", "(", "f\"Launching new HTTP instance in port {http_port}\"", ")", "\n", "cmd", "=", "f\"{sys.executable} -m http.server -p {http_port} > /dev/null 2>&1\"", "\n", "CMD", "=", "f'TMUX=0 tmux new-session -d -s http_server \\; send-keys \"{cmd}\" Enter'", "\n", "print", "(", "CMD", ")", "\n", "os", ".", "system", "(", "CMD", ")", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "\"couldn't set up http server.\"", ")", "\n", "\n", "", "self", ".", "visdom_port", "=", "visdom_port", "\n", "self", ".", "http_port", "=", "http_port", "\n", "\n", "vis", "=", "visdom", ".", "Visdom", "(", "port", "=", "visdom_port", ",", "env", "=", "env", ")", "\n", "self", ".", "vis", "=", "vis", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.visualization.Visualizer.show_pointcloud": [[54, 87], ["points.transpose().contiguous().data.cpu.transpose().contiguous().data.cpu.squeeze", "dict", "points.transpose().contiguous().data.cpu.transpose().contiguous().data.cpu.size", "points.transpose().contiguous().data.cpu.transpose().contiguous().data.cpu.contiguous().data.cpu", "points.transpose().contiguous().data.cpu.transpose().contiguous().data.cpu.transpose().contiguous().data.cpu", "visualization.Visualizer.vis.scatter", "visualization.Visualizer.vis.scatter", "Y.min", "points.transpose().contiguous().data.cpu.transpose().contiguous().data.cpu.contiguous", "points.transpose().contiguous().data.cpu.transpose().contiguous().data.cpu.transpose().contiguous", "Y.min", "points.transpose().contiguous().data.cpu.transpose().contiguous().data.cpu.transpose"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dict"], ["", "def", "show_pointcloud", "(", "self", ",", "points", ",", "title", "=", "None", ",", "Y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param points: pytorch tensor pointcloud\n        :param title:\n        :param Y:\n        :return:\n        \"\"\"", "\n", "points", "=", "points", ".", "squeeze", "(", ")", "\n", "if", "points", ".", "size", "(", "-", "1", ")", "==", "3", ":", "\n", "            ", "points", "=", "points", ".", "contiguous", "(", ")", ".", "data", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "            ", "points", "=", "points", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "data", ".", "cpu", "(", ")", "\n", "\n", "", "opts", "=", "dict", "(", "\n", "title", "=", "title", ",", "\n", "markersize", "=", "2", ",", "\n", "xtickmin", "=", "-", "0.7", ",", "\n", "xtickmax", "=", "0.7", ",", "\n", "xtickstep", "=", "0.3", ",", "\n", "ytickmin", "=", "-", "0.7", ",", "\n", "ytickmax", "=", "0.7", ",", "\n", "ytickstep", "=", "0.3", ",", "\n", "ztickmin", "=", "-", "0.7", ",", "\n", "ztickmax", "=", "0.7", ",", "\n", "ztickstep", "=", "0.3", ")", "\n", "\n", "if", "Y", "is", "None", ":", "\n", "            ", "self", ".", "vis", ".", "scatter", "(", "X", "=", "points", ",", "win", "=", "title", ",", "opts", "=", "opts", ")", "\n", "", "else", ":", "\n", "            ", "if", "Y", ".", "min", "(", ")", "<", "1", ":", "\n", "                ", "Y", "=", "Y", "-", "Y", ".", "min", "(", ")", "+", "1", "\n", "", "self", ".", "vis", ".", "scatter", "(", "\n", "X", "=", "points", ",", "Y", "=", "Y", ",", "win", "=", "title", ",", "opts", "=", "opts", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.visualization.Visualizer.show_pointclouds": [[89, 94], ["points.squeeze.squeeze.squeeze", "range", "points.squeeze.squeeze.dim", "points.squeeze.squeeze.size", "visualization.Visualizer.show_pointcloud"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.visualization.Visualizer.show_pointcloud"], ["", "", "def", "show_pointclouds", "(", "self", ",", "points", ",", "title", "=", "None", ",", "Y", "=", "None", ")", ":", "\n", "        ", "points", "=", "points", ".", "squeeze", "(", ")", "\n", "assert", "points", ".", "dim", "(", ")", "==", "3", "\n", "for", "i", "in", "range", "(", "points", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "self", ".", "show_pointcloud", "(", "points", "[", "i", "]", ",", "title", "=", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.visualization.Visualizer.show_image": [[95, 98], ["img.squeeze.squeeze.squeeze", "visualization.Visualizer.vis.image", "dict"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.image", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dict"], ["", "", "def", "show_image", "(", "self", ",", "img", ",", "title", "=", "None", ")", ":", "\n", "        ", "img", "=", "img", ".", "squeeze", "(", ")", "\n", "self", ".", "vis", ".", "image", "(", "img", ",", "win", "=", "title", ",", "opts", "=", "dict", "(", "title", "=", "title", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.visualization.is_port_in_use": [[11, 20], ["socket.socket", "s.connect_ex"], "function", ["None"], ["def", "is_port_in_use", "(", "port", ")", ":", "\n", "    ", "\"\"\"\n    test if a port is being used or is free to use.\n    :param port:\n    :return:\n    \"\"\"", "\n", "import", "socket", "\n", "with", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "as", "s", ":", "\n", "        ", "return", "s", ".", "connect_ex", "(", "(", "'localhost'", ",", "port", ")", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_iteration.TrainerIteration.__init__": [[10, 12], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TrainerIteration", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_iteration.TrainerIteration.make_network_input": [[13, 22], ["trainer_iteration.TrainerIteration.data.image.to", "trainer_iteration.TrainerIteration.data.points.transpose().contiguous().to", "trainer_iteration.TrainerIteration.data.points.transpose().contiguous", "trainer_iteration.TrainerIteration.data.points.transpose"], "methods", ["None"], ["", "def", "make_network_input", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Arrange to data to be fed to the network.\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "opt", ".", "SVR", ":", "\n", "            ", "self", ".", "data", ".", "network_input", "=", "self", ".", "data", ".", "image", ".", "to", "(", "self", ".", "opt", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", ".", "network_input", "=", "self", ".", "data", ".", "points", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "opt", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_iteration.TrainerIteration.common_ops": [[23, 37], ["trainer_iteration.TrainerIteration.make_network_input", "trainer_iteration.TrainerIteration.data.points.size", "trainer_iteration.TrainerIteration.network", "trainer_iteration.TrainerIteration.fuse_primitives", "trainer_iteration.TrainerIteration.loss_model", "trainer_iteration.TrainerIteration.visualize"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.make_network_input", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_loss.TrainerLoss.fuse_primitives", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.visualize"], ["", "", "def", "common_ops", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Commom operations between train and eval forward passes\n        :return:\n        \"\"\"", "\n", "self", ".", "make_network_input", "(", ")", "\n", "self", ".", "batch_size", "=", "self", ".", "data", ".", "points", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "data", ".", "pointsReconstructed_prims", "=", "self", ".", "network", "(", "self", ".", "data", ".", "network_input", ",", "\n", "train", "=", "self", ".", "flags", ".", "train", ")", "\n", "self", ".", "fuse_primitives", "(", ")", "\n", "\n", "self", ".", "loss_model", "(", ")", "# batch", "\n", "self", ".", "visualize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_iteration.TrainerIteration.train_iteration": [[38, 50], ["trainer_iteration.TrainerIteration.optimizer.zero_grad", "trainer_iteration.TrainerIteration.common_ops", "trainer_iteration.TrainerIteration.log.update", "trainer_iteration.TrainerIteration.print_iteration_stats", "trainer_iteration.TrainerIteration.data.loss.item", "trainer_iteration.TrainerIteration.data.loss.backward", "trainer_iteration.TrainerIteration.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.common_ops", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.update", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.print_iteration_stats", "home.repos.pwc.inspect_result.itailang_geometric_adv.chamfer3D.dist_chamfer_3D.chamfer_3DFunction.backward"], ["", "def", "train_iteration", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Forward backward pass\n        :return:\n        \"\"\"", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "common_ops", "(", ")", "\n", "self", ".", "log", ".", "update", "(", "\"loss_train_total\"", ",", "self", ".", "data", ".", "loss", ".", "item", "(", ")", ")", "\n", "if", "not", "self", ".", "opt", ".", "no_learning", ":", "\n", "            ", "self", ".", "data", ".", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "# gradient update", "\n", "", "self", ".", "print_iteration_stats", "(", "self", ".", "data", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_iteration.TrainerIteration.visualize": [[51, 58], ["trainer_iteration.TrainerIteration.visualizer.show_pointcloud", "trainer_iteration.TrainerIteration.visualizer.show_pointcloud", "trainer_iteration.TrainerIteration.visualizer.show_image"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.visualization.Visualizer.show_pointcloud", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.visualization.Visualizer.show_pointcloud", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.visualization.Visualizer.show_image"], ["", "def", "visualize", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iteration", "%", "50", "==", "1", ":", "\n", "            ", "tmp_string", "=", "\"train\"", "if", "self", ".", "flags", ".", "train", "else", "\"test\"", "\n", "self", ".", "visualizer", ".", "show_pointcloud", "(", "self", ".", "data", ".", "points", "[", "0", "]", ",", "title", "=", "f\"GT {tmp_string}\"", ")", "\n", "self", ".", "visualizer", ".", "show_pointcloud", "(", "self", ".", "data", ".", "pointsReconstructed", "[", "0", "]", ",", "title", "=", "f\"Reconstruction {tmp_string}\"", ")", "\n", "if", "self", ".", "opt", ".", "SVR", ":", "\n", "                ", "self", ".", "visualizer", ".", "show_image", "(", "self", ".", "data", ".", "image", "[", "0", "]", ",", "title", "=", "f\"Input Image {tmp_string}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.trainer_iteration.TrainerIteration.test_iteration": [[59, 74], ["trainer_iteration.TrainerIteration.common_ops", "trainer_iteration.TrainerIteration.data.pointsReconstructed.size", "trainer_iteration.TrainerIteration.log.update", "trainer_iteration.TrainerIteration.log.update", "print", "trainer_iteration.TrainerIteration.data.loss.item", "trainer_iteration.TrainerIteration.data.loss_fscore.item", "termcolor.colored", "termcolor.colored", "trainer_iteration.TrainerIteration.data.loss.item"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.common_ops", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.update", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.update"], ["", "", "", "def", "test_iteration", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Forward evaluation pass\n        :return:\n        \"\"\"", "\n", "self", ".", "common_ops", "(", ")", "\n", "self", ".", "num_val_points", "=", "self", ".", "data", ".", "pointsReconstructed", ".", "size", "(", "1", ")", "\n", "self", ".", "log", ".", "update", "(", "\"loss_val\"", ",", "self", ".", "data", ".", "loss", ".", "item", "(", ")", ")", "\n", "self", ".", "log", ".", "update", "(", "\"fscore\"", ",", "self", ".", "data", ".", "loss_fscore", ".", "item", "(", ")", ")", "\n", "print", "(", "\n", "'\\r'", "+", "colored", "(", "\n", "'[%d: %d/%d]'", "%", "(", "self", ".", "epoch", ",", "self", ".", "iteration", ",", "self", ".", "datasets", ".", "len_dataset_test", "/", "self", ".", "opt", ".", "batch_size_test", ")", ",", "\n", "'red'", ")", "+", "\n", "colored", "(", "'loss_val:  %f'", "%", "self", ".", "data", ".", "loss", ".", "item", "(", ")", ",", "'yellow'", ")", ",", "\n", "end", "=", "''", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.html_report.main": [[17, 69], ["transfer.HtmlGenerator", "HtmlGenerator.HtmlGenerator.add_title", "HtmlGenerator.HtmlGenerator.add_table", "copy.deepcopy", "copy.deepcopy.add_titleless_columns", "webpage.add_table.add_titleless_columns", "HtmlGenerator.HtmlGenerator.chart", "copy.deepcopy.add_row", "HtmlGenerator.HtmlGenerator.chart", "copy.deepcopy.add_row", "webpage.add_table.add_row", "range", "HtmlGenerator.HtmlGenerator.return_html", "transfer.HtmlGenerator", "HtmlGenerator.HtmlGenerator.tables[].add_row", "HtmlGenerator.HtmlGenerator.return_html", "os.path.join", "os.path.join", "webpage.add_table.add_row", "os.path.exists", "os.path.exists", "transfer.main", "os.path.join", "os.path.join", "HtmlGenerator.HtmlGenerator.dict", "HtmlGenerator.HtmlGenerator.image", "HtmlGenerator.HtmlGenerator.mesh"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_title", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_table", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_titleless_columns", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_titleless_columns", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.chart", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_row", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.chart", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_row", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_row", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.return_html", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_row", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.return_html", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_row", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.metro.main", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dict", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.image", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.mesh"], ["def", "main", "(", "trainer", ",", "outHtml", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Create a report for the completed experiment.\n    Author: Thibault Groueix 01.11.2019\n    \"\"\"", "\n", "\n", "if", "outHtml", "is", "None", ":", "\n", "        ", "outHtml", "=", "os", ".", "path", ".", "join", "(", "trainer", ".", "opt", ".", "dir_name", ",", "f\"{trainer.epoch}\"", ")", "+", "'.html'", "\n", "", "else", ":", "\n", "        ", "outHtml", "=", "os", ".", "path", ".", "join", "(", "trainer", ".", "opt", ".", "dir_name", ",", "outHtml", ")", "\n", "\n", "", "webpage", "=", "HtmlGenerator", ".", "HtmlGenerator", "(", "path", "=", "outHtml", ",", "title", "=", "trainer", ".", "opt", ".", "dir_name", ",", "local_copy", "=", "True", ")", "\n", "\n", "# Display loss at the top in a title", "\n", "loss_val", "=", "trainer", ".", "log", ".", "meters", "[", "\"loss_val\"", "]", ".", "avg", "\n", "final_fscore", "=", "trainer", ".", "html_report_data", ".", "fscore_curve", "[", "\"fscore\"", "]", "[", "-", "1", "]", "\n", "webpage", ".", "add_title", "(", "f\"Reconstruction (Val):{loss_val} Metro:{trainer.metro_results} Fscore:{final_fscore}\"", ")", "\n", "\n", "table", "=", "webpage", ".", "add_table", "(", ")", "\n", "\n", "# Add all parameters for the experiments and training curves", "\n", "table2", "=", "deepcopy", "(", "table", ")", "\n", "table2", ".", "add_titleless_columns", "(", "1", ")", "\n", "table", ".", "add_titleless_columns", "(", "2", ")", "\n", "curve_recons", "=", "webpage", ".", "chart", "(", "trainer", ".", "html_report_data", ".", "data_curve", ",", "title", "=", "\"Reconstruction quality - chamfer log\"", ")", "\n", "table2", ".", "add_row", "(", "[", "curve_recons", "]", ")", "\n", "curve_recons", "=", "webpage", ".", "chart", "(", "trainer", ".", "html_report_data", ".", "fscore_curve", ",", "title", "=", "\"Reconstruction quality - fscore\"", ")", "\n", "table2", ".", "add_row", "(", "[", "curve_recons", "]", ")", "\n", "\n", "table", ".", "add_row", "(", "[", "webpage", ".", "dict", "(", "trainer", ".", "opt", ")", ",", "table2", "]", ",", "\"\"", ")", "\n", "\n", "# Add random test samples the experiments and training curves", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "output_mesh", "=", "trainer", ".", "html_report_data", ".", "output_meshes", "[", "i", "]", "\n", "table", ".", "add_row", "(", "[", "webpage", ".", "image", "(", "output_mesh", "[", "\"image_path\"", "]", ")", ",", "\n", "webpage", ".", "mesh", "(", "output_mesh", "[", "\"output_path\"", "]", ",", "normalize", "=", "True", ")", "]", ",", "\"\"", ")", "\n", "\n", "", "webpage", ".", "return_html", "(", ")", "\n", "\n", "# Add main results in master webpage", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"master.pkl\"", ")", ":", "\n", "        ", "init_html_report", ".", "main", "(", ")", "\n", "", "webpage_after", "=", "HtmlGenerator", ".", "HtmlGenerator", "(", "path", "=", "\"master.html\"", ",", "reload_path", "=", "\"master.pkl\"", ")", "\n", "webpage_after", ".", "tables", "[", "\"Shapenet\"", "]", ".", "add_row", "(", "[", "\n", "f\"{trainer.opt.nb_primitives}\"", ",", "\n", "f\"{trainer.opt.template_type}\"", ",", "\n", "f\"{loss_val}\"", ",", "\n", "f\"{final_fscore}\"", ",", "\n", "f\"{trainer.metro_results}\"", ",", "\n", "trainer", ".", "opt", ".", "dir_name", "\n", "]", ")", "\n", "webpage_after", ".", "return_html", "(", "save_editable_version", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.grey_print": [[11, 13], ["print", "termcolor.colored"], "function", ["None"], ["def", "grey_print", "(", "x", ")", ":", "\n", "    ", "print", "(", "colored", "(", "x", ",", "\"grey\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.red_print": [[15, 17], ["print", "termcolor.colored"], "function", ["None"], ["", "def", "red_print", "(", "x", ")", ":", "\n", "    ", "print", "(", "colored", "(", "x", ",", "\"red\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.green_print": [[19, 21], ["print", "termcolor.colored"], "function", ["None"], ["", "def", "green_print", "(", "x", ")", ":", "\n", "    ", "print", "(", "colored", "(", "x", ",", "\"green\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.yellow_print": [[23, 25], ["print", "termcolor.colored"], "function", ["None"], ["", "def", "yellow_print", "(", "x", ")", ":", "\n", "    ", "print", "(", "colored", "(", "x", ",", "\"yellow\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.blue_print": [[27, 29], ["print", "termcolor.colored"], "function", ["None"], ["", "def", "blue_print", "(", "x", ")", ":", "\n", "    ", "print", "(", "colored", "(", "x", ",", "\"blue\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.magenta_print": [[31, 33], ["print", "termcolor.colored"], "function", ["None"], ["", "def", "magenta_print", "(", "x", ")", ":", "\n", "    ", "print", "(", "colored", "(", "x", ",", "\"magenta\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.cyan_print": [[35, 37], ["print", "termcolor.colored"], "function", ["None"], ["", "def", "cyan_print", "(", "x", ")", ":", "\n", "    ", "print", "(", "colored", "(", "x", ",", "\"cyan\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.white_print": [[39, 41], ["print", "termcolor.colored"], "function", ["None"], ["", "def", "white_print", "(", "x", ")", ":", "\n", "    ", "print", "(", "colored", "(", "x", ",", "\"white\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.print_arg": [[43, 51], ["my_utils.cyan_print", "print", "termcolor.colored", "str", "termcolor.colored"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.cyan_print"], ["", "def", "print_arg", "(", "opt", ")", ":", "\n", "    ", "cyan_print", "(", "\"PARAMETER: \"", ")", "\n", "for", "a", "in", "opt", ".", "__dict__", ":", "\n", "        ", "print", "(", "\n", "\"         \"", "\n", "+", "colored", "(", "a", ",", "\"yellow\"", ")", "\n", "+", "\" : \"", "\n", "+", "colored", "(", "str", "(", "opt", ".", "__dict__", "[", "a", "]", ")", ",", "\"cyan\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.plant_seeds": [[53, 64], ["random.seed", "torch.manual_seed", "numpy.random.seed", "print", "random.randint", "print"], "function", ["None"], ["", "", "def", "plant_seeds", "(", "random_seed", "=", "False", ")", ":", "\n", "    ", "if", "random_seed", ":", "\n", "        ", "print", "(", "\"Randomized seed\"", ")", "\n", "manualSeed", "=", "random", ".", "randint", "(", "1", ",", "10000", ")", "\n", "print", "(", "\"Random Seed: \"", ",", "manualSeed", ")", "\n", "\n", "", "else", ":", "\n", "        ", "manualSeed", "=", "1", "\n", "", "random", ".", "seed", "(", "manualSeed", ")", "\n", "torch", ".", "manual_seed", "(", "manualSeed", ")", "\n", "np", ".", "random", ".", "seed", "(", "manualSeed", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.metro.metro": [[14, 33], ["print", "subprocess.check_output", "returned_output.decode.decode", "returned_output.decode.find", "float", "print", "returned_output.decode.split"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.decode"], ["def", "metro", "(", "path1", ",", "path2", ",", "metro", "=", "'./auxiliary/metro_sources/build/metro'", ")", ":", "\n", "    ", "\"\"\"\n    Run the metro compiled program on two meshes and get the output.\n    :param path1: mesh 1\n    :param path2: mesh 2\n    :param metro: path to metro\n    :return: metro(mesh 1, mesh 2) [float]\n    \"\"\"", "\n", "\n", "print", "(", "f\"calculing {path1}\"", ")", "\n", "cmd", "=", "f\"{metro} {path1} {path2}\"", "\n", "returned_output", "=", "subprocess", ".", "check_output", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "returned_output", "=", "returned_output", ".", "decode", "(", "\"utf-8\"", ")", "\n", "location", "=", "returned_output", ".", "find", "(", "\"Hausdorff\"", ")", "\n", "returned_output", "=", "returned_output", "[", "location", ":", "location", "+", "40", "]", "\n", "distance", "=", "float", "(", "returned_output", ".", "split", "(", "\" \"", ")", "[", "2", "]", ")", "\n", "print", "(", "f\"calculing {path1} Done {distance}!\"", ")", "\n", "\n", "return", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.metro.isolate_files": [[35, 57], ["open", "file.read().split", "pymesh.load_mesh", "numpy.load", "pymesh.save_mesh", "numpy.save", "shutil.copy", "file.read", "file.split", "os.path.exists", "os.mkdir", "file.split"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.read"], ["", "def", "isolate_files", "(", ")", ":", "\n", "    ", "\"\"\"\n    Utility function to generate the metro_file archive. Useless to all users but the author.\n    \"\"\"", "\n", "with", "open", "(", "'./dataset/data/metro_files/files-metro.txt'", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "files", "=", "file", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "", "for", "file", "in", "files", ":", "\n", "        ", "if", "file", "[", "-", "3", ":", "]", "==", "\"ply\"", ":", "\n", "            ", "cat", "=", "file", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "name", "=", "file", ".", "split", "(", "'/'", ")", "[", "1", "]", "[", ":", "-", "4", "]", "\n", "path_points", "=", "'/'", ".", "join", "(", "[", "'.'", ",", "'dataset'", ",", "'data'", ",", "'ShapeNetV1PointCloud'", ",", "cat", ",", "name", "+", "'.points.ply.npy'", "]", ")", "\n", "path_png", "=", "'/'", ".", "join", "(", "[", "'.'", ",", "'dataset'", ",", "'data'", ",", "'ShapeNetV1Renderings'", ",", "cat", ",", "name", ",", "\"rendering\"", ",", "'00.png'", "]", ")", "\n", "\n", "path_obj", "=", "'/'", ".", "join", "(", "[", "''", ",", "'home'", ",", "'thibault'", ",", "'hdd'", ",", "'data'", ",", "'ShapeNetCore.v1'", ",", "cat", ",", "name", ",", "'model.obj'", "]", ")", "\n", "mesh", "=", "pymesh", ".", "load_mesh", "(", "path_obj", ")", "\n", "points", "=", "np", ".", "load", "(", "(", "path_points", ")", ")", "\n", "if", "not", "exists", "(", "'/'", ".", "join", "(", "[", "'.'", ",", "'dataset'", ",", "'data'", ",", "'metro_files'", ",", "cat", "]", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "'/'", ".", "join", "(", "[", "'.'", ",", "'dataset'", ",", "'data'", ",", "'metro_files'", ",", "cat", "]", ")", ")", "\n", "\n", "", "pymesh", ".", "save_mesh", "(", "'/'", ".", "join", "(", "[", "'.'", ",", "'dataset'", ",", "'data'", ",", "'metro_files'", ",", "cat", ",", "name", "+", "'.ply'", "]", ")", ",", "mesh", ",", "ascii", "=", "True", ")", "\n", "np", ".", "save", "(", "'/'", ".", "join", "(", "[", "'.'", ",", "'dataset'", ",", "'data'", ",", "'metro_files'", ",", "cat", ",", "name", "+", "'.npy'", "]", ")", ",", "points", ")", "\n", "copy", "(", "path_png", ",", "'/'", ".", "join", "(", "[", "'.'", ",", "'dataset'", ",", "'data'", ",", "'metro_files'", ",", "cat", ",", "name", "+", "'.png'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.metro.main": [[59, 68], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "metro.metro"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.metro.metro"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--path1'", ",", "help", "=", "\"Input file\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--path2'", ",", "help", "=", "\"Input file\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--metro'", ",", "type", "=", "str", ",", "help", "=", "'Path to the metro executable'", ",", "\n", "default", "=", "'./metro_sources/build/metro'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "metro", "(", "args", ".", "path1", ",", "args", ".", "path2", ",", "args", ".", "metro", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.argument_parser.parser": [[28, 175], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "datetime.datetime.now", "easydict.EasyDict", "os.join", "os.join", "os.join", "os.path.exists", "datetime.datetime.now", "os.path.join", "os.path.join", "os.path.join", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.keys", "easydict.EasyDict.demo_input_path.split", "os.path.exists", "print", "os.system", "os.system", "os.system", "os.system", "open", "json.load", "print", "transfer.cyan_print", "easydict.EasyDict.dir_name.split", "datetime.datetime.now.isoformat", "os.path.join", "print", "termcolor.colored", "str", "termcolor.colored"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.cyan_print"], ["def", "parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# Training parameters", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "choices", "=", "[", "'train'", ",", "'test'", "]", ",", "help", "=", "\"Select train or test mode\"", ")", "\n", "parser", ".", "add_argument", "(", "'--custom_data'", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Manually enter training + eval data\"", ")", "\n", "parser", ".", "add_argument", "(", "'--train_pc_path'", ",", "type", "=", "str", ",", "default", "=", "'log/autoencoder_victim/eval_train/point_clouds_train_set_13l.npy'", ",", "help", "=", "\"Path to training data\"", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_pc_path'", ",", "type", "=", "str", ",", "default", "=", "'log/autoencoder_victim/eval_val/point_clouds_val_set_13l.npy'", ",", "help", "=", "\"Path to evaluation data\"", ")", "\n", "parser", ".", "add_argument", "(", "'--test_pc_path'", ",", "type", "=", "str", ",", "default", "=", "'log/autoencoder_victim/eval/point_clouds_test_set_13l.npy'", ",", "help", "=", "\"Path to test data\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--no_learning\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Learning mode (batchnorms...)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_only_encoder\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"only train the encoder\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_test'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "help", "=", "'number of data loading workers'", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--nepoch'", ",", "type", "=", "int", ",", "default", "=", "150", ",", "help", "=", "'number of epochs to train for'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'number of epochs to train for'", ")", "\n", "parser", ".", "add_argument", "(", "\"--random_seed\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Fix random seed or not\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lrate'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_1'", ",", "type", "=", "int", ",", "default", "=", "120", ",", "help", "=", "'learning rate decay 1'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_2'", ",", "type", "=", "int", ",", "default", "=", "140", ",", "help", "=", "'learning rate decay 2'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_3'", ",", "type", "=", "int", ",", "default", "=", "145", ",", "help", "=", "'learning rate decay 2'", ")", "\n", "parser", ".", "add_argument", "(", "\"--run_single_eval\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"evaluate a trained network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--demo\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"run demo autoencoder or single-view\"", ")", "\n", "\n", "# Data", "\n", "parser", ".", "add_argument", "(", "'--normalization'", ",", "type", "=", "str", ",", "default", "=", "\"UnitBall\"", ",", "\n", "choices", "=", "[", "'UnitBall'", ",", "'BoundingBox'", ",", "'Identity'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--shapenet13\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Load 13 usual shapenet categories\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--SVR\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Single_view Reconstruction\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sample\"", ",", "action", "=", "\"store_false\"", ",", "help", "=", "\"Sample the input pointclouds\"", ")", "\n", "parser", ".", "add_argument", "(", "'--class_choice'", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "\"airplane\"", "]", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--number_points'", ",", "type", "=", "int", ",", "default", "=", "2500", ",", "help", "=", "'Number of point sampled on the object during training, and generated by atlasnet'", ")", "\n", "parser", ".", "add_argument", "(", "'--number_points_eval'", ",", "type", "=", "int", ",", "default", "=", "2500", ",", "\n", "help", "=", "'Number of points generated by atlasnet (rounded to the nearest squared number) '", ")", "\n", "parser", ".", "add_argument", "(", "\"--random_rotation\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"apply data augmentation : random rotation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_augmentation_axis_rotation\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"apply data augmentation : axial rotation \"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_augmentation_random_flips\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"apply data augmentation : random flips\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random_translation\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"apply data augmentation :  random translation \"", ")", "\n", "parser", ".", "add_argument", "(", "\"--anisotropic_scaling\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"apply data augmentation : anisotropic scaling\"", ")", "\n", "\n", "# Save dirs and reload", "\n", "parser", ".", "add_argument", "(", "'--id'", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ",", "help", "=", "'training name'", ")", "\n", "parser", ".", "add_argument", "(", "'--env'", ",", "type", "=", "str", ",", "default", "=", "\"Atlasnet\"", ",", "help", "=", "'visdom environment'", ")", "\n", "parser", ".", "add_argument", "(", "'--visdom_port'", ",", "type", "=", "int", ",", "default", "=", "8890", ",", "help", "=", "\"visdom port\"", ")", "\n", "parser", ".", "add_argument", "(", "'--http_port'", ",", "type", "=", "int", ",", "default", "=", "8891", ",", "help", "=", "\"http port\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dir_name'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "'name of the log folder.'", ")", "\n", "parser", ".", "add_argument", "(", "'--demo_input_path'", ",", "type", "=", "str", ",", "default", "=", "\"./doc/pictures/plane_input_demo.png\"", ",", "help", "=", "'dirname'", ")", "\n", "parser", ".", "add_argument", "(", "'--reload_decoder_path'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "'dirname'", ")", "\n", "parser", ".", "add_argument", "(", "'--reload_model_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'optional reload model path'", ")", "\n", "\n", "# Network", "\n", "parser", ".", "add_argument", "(", "'--num_layers'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of hidden MLP Layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_neurons'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'number of neurons in each hidden layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--loop_per_epoch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of data loop per epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--nb_primitives'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of primitives'", ")", "\n", "parser", ".", "add_argument", "(", "'--template_type'", ",", "type", "=", "str", ",", "default", "=", "\"SPHERE\"", ",", "choices", "=", "[", "\"SPHERE\"", ",", "\"SQUARE\"", "]", ",", "\n", "help", "=", "'dim_out_patch'", ")", "\n", "parser", ".", "add_argument", "(", "'--multi_gpu'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "0", "]", ",", "help", "=", "'Use multiple gpus'", ")", "\n", "parser", ".", "add_argument", "(", "\"--remove_all_batchNorms\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Replace all batchnorms by identity\"", ")", "\n", "parser", ".", "add_argument", "(", "'--bottleneck_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "'dim_out_patch'", ")", "\n", "parser", ".", "add_argument", "(", "'--activation'", ",", "type", "=", "str", ",", "default", "=", "'relu'", ",", "\n", "choices", "=", "[", "\"relu\"", ",", "\"sigmoid\"", ",", "\"softplus\"", ",", "\"logsigmoid\"", ",", "\"softsign\"", ",", "\"tanh\"", "]", ",", "help", "=", "'dim_out_patch'", ")", "\n", "\n", "# Loss", "\n", "parser", ".", "add_argument", "(", "\"--no_metro\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Compute metro distance\"", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "opt", ".", "date", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "opt", "=", "EasyDict", "(", "opt", ".", "__dict__", ")", "\n", "\n", "if", "opt", ".", "dir_name", "==", "\"\"", ":", "\n", "# Create default dirname", "\n", "        ", "opt", ".", "dir_name", "=", "join", "(", "parent_dir", ",", "'log'", ",", "opt", ".", "id", "+", "now", ".", "isoformat", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "opt", ".", "dir_name", "=", "join", "(", "parent_dir", ",", "opt", ".", "dir_name", ")", "\n", "\n", "", "opt", ".", "train_pc_path", "=", "osp", ".", "join", "(", "parent_dir", ",", "opt", ".", "train_pc_path", ")", "\n", "opt", ".", "eval_pc_path", "=", "osp", ".", "join", "(", "parent_dir", ",", "opt", ".", "eval_pc_path", ")", "\n", "opt", ".", "test_pc_path", "=", "osp", ".", "join", "(", "parent_dir", ",", "opt", ".", "test_pc_path", ")", "\n", "\n", "# If running a demo, check if input is an image or a pointcloud", "\n", "if", "opt", ".", "demo", ":", "\n", "        ", "ext", "=", "opt", ".", "demo_input_path", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "if", "ext", "==", "\"ply\"", "or", "ext", "==", "\"npy\"", "or", "ext", "==", "\"obj\"", ":", "\n", "            ", "opt", ".", "SVR", "=", "False", "\n", "", "elif", "ext", "==", "\"png\"", ":", "\n", "            ", "opt", ".", "SVR", "=", "True", "\n", "\n", "", "", "if", "opt", ".", "demo", "or", "opt", ".", "run_single_eval", ":", "\n", "        ", "if", "not", "exists", "(", "\"./training/trained_models/atlasnet_singleview_25_squares/network.pth\"", ")", ":", "\n", "            ", "print", "(", "\"Dowload Trained Models.\"", ")", "\n", "os", ".", "system", "(", "\"chmod +x training/download_trained_models.sh\"", ")", "\n", "os", ".", "system", "(", "\"./training/download_trained_models.sh\"", ")", "\n", "\n", "", "if", "opt", ".", "reload_model_path", "==", "\"\"", "and", "opt", ".", "SVR", ":", "\n", "            ", "opt", ".", "dir_name", "=", "\"./training/trained_models/atlasnet_singleview_1_sphere\"", "\n", "", "elif", "opt", ".", "reload_model_path", "==", "\"\"", "and", "not", "opt", ".", "SVR", ":", "\n", "            ", "opt", ".", "dir_name", "=", "\"./training/trained_models/atlasnet_autoencoder_1_sphere\"", "\n", "\n", "\n", "", "", "if", "exists", "(", "join", "(", "opt", ".", "dir_name", ",", "\"options.json\"", ")", ")", ":", "\n", "# Reload parameters from options.txt if it exists", "\n", "        ", "with", "open", "(", "join", "(", "opt", ".", "dir_name", ",", "\"options.json\"", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "my_opt_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "", "my_opt_dict", ".", "pop", "(", "\"run_single_eval\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"no_metro\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"train_only_encoder\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"no_learning\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"demo\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"demo_input_path\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"dir_name\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"mode\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"custom_data\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"train_pc_path\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"eval_pc_path\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"test_pc_path\"", ")", "\n", "for", "key", "in", "my_opt_dict", ".", "keys", "(", ")", ":", "\n", "            ", "opt", "[", "key", "]", "=", "my_opt_dict", "[", "key", "]", "\n", "", "if", "not", "opt", ".", "demo", ":", "\n", "            ", "print", "(", "\"Modifying input arguments to match network in dirname\"", ")", "\n", "my_utils", ".", "cyan_print", "(", "\"PARAMETER: \"", ")", "\n", "for", "a", "in", "my_opt_dict", ":", "\n", "                ", "print", "(", "\n", "\"         \"", "\n", "+", "colored", "(", "a", ",", "\"yellow\"", ")", "\n", "+", "\" : \"", "\n", "+", "colored", "(", "str", "(", "my_opt_dict", "[", "a", "]", ")", ",", "\"cyan\"", ")", "\n", ")", "\n", "\n", "# Hard code dimension of the template.", "\n", "", "", "", "dim_template_dict", "=", "{", "\n", "\"SQUARE\"", ":", "2", ",", "\n", "\"SPHERE\"", ":", "3", ",", "\n", "}", "\n", "opt", ".", "dim_template", "=", "dim_template_dict", "[", "opt", ".", "template_type", "]", "\n", "\n", "# Visdom env", "\n", "opt", ".", "env", "=", "opt", ".", "env", "+", "opt", ".", "dir_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.argument_parser.parser_transfer": [[177, 304], ["datetime.datetime.now", "easydict.EasyDict", "os.join", "os.join", "os.join", "os.path.exists", "str", "os.path.join", "os.path.join", "os.path.join", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.pop", "json.load.keys", "datetime.datetime.now", "easydict.EasyDict.demo_input_path.split", "os.path.exists", "print", "os.system", "os.system", "os.system", "os.system", "open", "json.load", "print", "transfer.cyan_print", "easydict.EasyDict.dir_name.split", "datetime.datetime.now.isoformat", "os.path.join", "print", "termcolor.colored", "str", "termcolor.colored"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.cyan_print"], ["", "def", "parser_transfer", "(", "flags", ")", ":", "\n", "    ", "opt", "=", "{", "\n", "'mode'", ":", "'test'", ",", "\n", "'custom_data'", ":", "True", ",", "# Used for transfer", "\n", "'train_pc_path'", ":", "''", ",", "\n", "'eval_pc_path'", ":", "''", ",", "\n", "'test_pc_path'", ":", "''", ",", "\n", "'no_learning'", ":", "True", ",", "\n", "'train_only_encoder'", ":", "False", ",", "\n", "'batch_size'", ":", "32", ",", "\n", "'batch_size_test'", ":", "32", ",", "# Used for transfer", "\n", "'workers'", ":", "0", ",", "# Used for transfer", "\n", "'nepoch'", ":", "150", ",", "\n", "'start_epoch'", ":", "0", ",", "\n", "'random_seed'", ":", "False", ",", "\n", "'lrate'", ":", "0.001", ",", "\n", "'lr_decay_1'", ":", "120", ",", "\n", "'lr_decay_2'", ":", "140", ",", "\n", "'lr_decay_3'", ":", "145", ",", "\n", "'run_single_eval'", ":", "False", ",", "\n", "'demo'", ":", "False", ",", "\n", "'normalization'", ":", "\"UnitBall\"", ",", "\n", "'shapenet13'", ":", "False", ",", "\n", "'SVR'", ":", "False", ",", "\n", "'sample'", ":", "True", ",", "\n", "'class_choice'", ":", "\"airplane\"", ",", "\n", "'number_points'", ":", "2500", ",", "\n", "'number_points_eval'", ":", "2500", ",", "# Used for transfer", "\n", "'random_rotation'", ":", "False", ",", "\n", "'data_augmentation_axis_rotation'", ":", "False", ",", "\n", "'data_augmentation_random_flips'", ":", "False", ",", "\n", "'random_translation'", ":", "False", ",", "\n", "'anisotropic_scaling'", ":", "False", ",", "\n", "'id'", ":", "\"0\"", ",", "\n", "'env'", ":", "\"Atlasnet\"", ",", "\n", "'visdom_port'", ":", "8890", ",", "\n", "'http_port'", ":", "8891", ",", "\n", "'dir_name'", ":", "flags", ".", "transfer_ae_folder", ",", "\n", "'demo_input_path'", ":", "\"./doc/pictures/plane_input_demo.png\"", ",", "\n", "'reload_decoder_path'", ":", "\"\"", ",", "\n", "'reload_model_path'", ":", "''", ",", "\n", "'num_layers'", ":", "2", ",", "\n", "'hidden_neurons'", ":", "512", ",", "\n", "'loop_per_epoch'", ":", "1", ",", "\n", "'nb_primitives'", ":", "1", ",", "\n", "'template_type'", ":", "\"SPHERE\"", ",", "\n", "'multi_gpu'", ":", "[", "0", "]", ",", "\n", "'remove_all_batchNorms'", ":", "False", ",", "\n", "'bottleneck_size'", ":", "1024", ",", "\n", "'activation'", ":", "'relu'", ",", "\n", "'no_metro'", ":", "False", ",", "\n", "'date'", ":", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "}", "\n", "\n", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "opt", "=", "EasyDict", "(", "opt", ")", "\n", "\n", "if", "opt", ".", "dir_name", "==", "\"\"", ":", "\n", "# Create default dirname", "\n", "        ", "opt", ".", "dir_name", "=", "join", "(", "parent_dir", ",", "'log'", ",", "opt", ".", "id", "+", "now", ".", "isoformat", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "opt", ".", "dir_name", "=", "join", "(", "parent_dir", ",", "opt", ".", "dir_name", ")", "\n", "\n", "", "opt", ".", "train_pc_path", "=", "osp", ".", "join", "(", "parent_dir", ",", "opt", ".", "train_pc_path", ")", "\n", "opt", ".", "eval_pc_path", "=", "osp", ".", "join", "(", "parent_dir", ",", "opt", ".", "eval_pc_path", ")", "\n", "opt", ".", "test_pc_path", "=", "osp", ".", "join", "(", "parent_dir", ",", "opt", ".", "test_pc_path", ")", "\n", "\n", "# If running a demo, check if input is an image or a pointcloud", "\n", "if", "opt", ".", "demo", ":", "\n", "        ", "ext", "=", "opt", ".", "demo_input_path", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "if", "ext", "==", "\"ply\"", "or", "ext", "==", "\"npy\"", "or", "ext", "==", "\"obj\"", ":", "\n", "            ", "opt", ".", "SVR", "=", "False", "\n", "", "elif", "ext", "==", "\"png\"", ":", "\n", "            ", "opt", ".", "SVR", "=", "True", "\n", "\n", "", "", "if", "opt", ".", "demo", "or", "opt", ".", "run_single_eval", ":", "\n", "        ", "if", "not", "exists", "(", "\"./training/trained_models/atlasnet_singleview_25_squares/network.pth\"", ")", ":", "\n", "            ", "print", "(", "\"Dowload Trained Models.\"", ")", "\n", "os", ".", "system", "(", "\"chmod +x training/download_trained_models.sh\"", ")", "\n", "os", ".", "system", "(", "\"./training/download_trained_models.sh\"", ")", "\n", "\n", "", "if", "opt", ".", "reload_model_path", "==", "\"\"", "and", "opt", ".", "SVR", ":", "\n", "            ", "opt", ".", "dir_name", "=", "\"./training/trained_models/atlasnet_singleview_1_sphere\"", "\n", "", "elif", "opt", ".", "reload_model_path", "==", "\"\"", "and", "not", "opt", ".", "SVR", ":", "\n", "            ", "opt", ".", "dir_name", "=", "\"./training/trained_models/atlasnet_autoencoder_1_sphere\"", "\n", "\n", "\n", "", "", "if", "exists", "(", "join", "(", "opt", ".", "dir_name", ",", "\"options.json\"", ")", ")", ":", "\n", "# Reload parameters from options.txt if it exists", "\n", "        ", "with", "open", "(", "join", "(", "opt", ".", "dir_name", ",", "\"options.json\"", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "my_opt_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "", "my_opt_dict", ".", "pop", "(", "\"run_single_eval\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"no_metro\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"train_only_encoder\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"no_learning\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"demo\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"demo_input_path\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"dir_name\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"mode\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"custom_data\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"train_pc_path\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"eval_pc_path\"", ")", "\n", "my_opt_dict", ".", "pop", "(", "\"test_pc_path\"", ")", "\n", "for", "key", "in", "my_opt_dict", ".", "keys", "(", ")", ":", "\n", "            ", "opt", "[", "key", "]", "=", "my_opt_dict", "[", "key", "]", "\n", "", "if", "not", "opt", ".", "demo", ":", "\n", "            ", "print", "(", "\"Modifying input arguments to match network in dirname\"", ")", "\n", "my_utils", ".", "cyan_print", "(", "\"PARAMETER: \"", ")", "\n", "for", "a", "in", "my_opt_dict", ":", "\n", "                ", "print", "(", "\n", "\"         \"", "\n", "+", "colored", "(", "a", ",", "\"yellow\"", ")", "\n", "+", "\" : \"", "\n", "+", "colored", "(", "str", "(", "my_opt_dict", "[", "a", "]", ")", ",", "\"cyan\"", ")", "\n", ")", "\n", "\n", "# Hard code dimension of the template.", "\n", "", "", "", "dim_template_dict", "=", "{", "\n", "\"SQUARE\"", ":", "2", ",", "\n", "\"SPHERE\"", ":", "3", ",", "\n", "}", "\n", "opt", ".", "dim_template", "=", "dim_template_dict", "[", "opt", ".", "template_type", "]", "\n", "\n", "# Visdom env", "\n", "opt", ".", "env", "=", "opt", ".", "env", "+", "opt", ".", "dir_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "\n", "return", "opt", "\n", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.Shuffle.parallel_shuffle.shuffle_pc": [[14, 27], ["pymesh.load_mesh", "copy.deepcopy", "numpy.random.permutation", "pymesh.meshio.form_mesh", "pymesh.meshio.form_mesh.add_attribute", "pymesh.meshio.form_mesh.set_attribute", "pymesh.meshio.form_mesh.add_attribute", "pymesh.meshio.form_mesh.set_attribute", "pymesh.meshio.form_mesh.add_attribute", "pymesh.meshio.form_mesh.set_attribute", "pymesh.save_mesh", "len", "pymesh.load_mesh.get_vertex_attribute", "pymesh.load_mesh.get_vertex_attribute", "pymesh.load_mesh.get_vertex_attribute", "pymesh.meshio.form_mesh.get_attribute_names"], "function", ["None"], ["def", "shuffle_pc", "(", "file", ",", "output_path", ")", ":", "\n", "    ", "mesh", "=", "pymesh", ".", "load_mesh", "(", "file", ")", "\n", "vertices", "=", "copy", ".", "deepcopy", "(", "mesh", ".", "vertices", ")", "\n", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "vertices", ")", ")", "\n", "vertices", "=", "vertices", "[", "permutation", "]", "\n", "new_mesh", "=", "pymesh", ".", "meshio", ".", "form_mesh", "(", "vertices", ",", "mesh", ".", "faces", ")", "\n", "new_mesh", ".", "add_attribute", "(", "\"vertex_nx\"", ")", "\n", "new_mesh", ".", "set_attribute", "(", "\"vertex_nx\"", ",", "mesh", ".", "get_vertex_attribute", "(", "\"vertex_nx\"", ")", "[", "permutation", "]", ")", "\n", "new_mesh", ".", "add_attribute", "(", "\"vertex_ny\"", ")", "\n", "new_mesh", ".", "set_attribute", "(", "\"vertex_ny\"", ",", "mesh", ".", "get_vertex_attribute", "(", "\"vertex_ny\"", ")", "[", "permutation", "]", ")", "\n", "new_mesh", ".", "add_attribute", "(", "\"vertex_nz\"", ")", "\n", "new_mesh", ".", "set_attribute", "(", "\"vertex_nz\"", ",", "mesh", ".", "get_vertex_attribute", "(", "\"vertex_nz\"", ")", "[", "permutation", "]", ")", "\n", "pymesh", ".", "save_mesh", "(", "output_path", ",", "new_mesh", ",", "ascii", "=", "True", ",", "anonymous", "=", "True", ",", "use_float", "=", "True", ",", "*", "new_mesh", ".", "get_attribute_names", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.Shuffle.parallel_shuffle.main": [[29, 56], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "collections.defaultdict", "joblib.Parallel", "os.path.join", "os.path.join", "os.listdir", "os.path.isfile", "print", "os.path.join", "parallel_shuffle..parallel.dispatch_next", "joblib.delayed", "str", "len"], "function", ["None"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--input\"", ",", "help", "=", "\"Input Folder\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--output\"", ",", "help", "=", "\"Output Folder\"", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "onlyfiles", "=", "[", "(", "join", "(", "args", ".", "input", ",", "f", ")", ",", "join", "(", "args", ".", "output", ",", "f", ")", ")", "for", "f", "in", "listdir", "(", "args", ".", "input", ")", "if", "\n", "isfile", "(", "join", "(", "args", ".", "input", ",", "f", ")", ")", "]", "\n", "\n", "class", "BatchCompletionCallBack", "(", "object", ")", ":", "\n", "        ", "completed", "=", "defaultdict", "(", "int", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "time", ",", "index", ",", "parallel", ")", ":", "\n", "            ", "self", ".", "index", "=", "index", "\n", "self", ".", "parallel", "=", "parallel", "\n", "\n", "", "def", "__call__", "(", "self", ",", "index", ")", ":", "\n", "            ", "BatchCompletionCallBack", ".", "completed", "[", "self", ".", "parallel", "]", "+=", "1", "\n", "print", "(", "\"Progress : %s %% \"", "%", "\n", "str", "(", "BatchCompletionCallBack", ".", "completed", "[", "self", ".", "parallel", "]", "*", "100", "/", "len", "(", "onlyfiles", ")", ")", ")", "\n", "if", "self", ".", "parallel", ".", "_original_iterator", "is", "not", "None", ":", "\n", "                ", "self", ".", "parallel", ".", "dispatch_next", "(", ")", "\n", "\n", "", "", "", "joblib", ".", "parallel", ".", "BatchCompletionCallBack", "=", "BatchCompletionCallBack", "\n", "\n", "_", "=", "Parallel", "(", "n_jobs", "=", "-", "1", ",", "backend", "=", "\"multiprocessing\"", ")", "(", "delayed", "(", "shuffle_pc", ")", "(", "*", "i", ")", "for", "i", "in", "onlyfiles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.Shuffle.shuffle.shuffle_pc": [[11, 27], ["pymesh.load_mesh", "copy.deepcopy", "numpy.random.permutation", "pymesh.meshio.form_mesh", "pymesh.meshio.form_mesh.add_attribute", "pymesh.meshio.form_mesh.set_attribute", "pymesh.meshio.form_mesh.add_attribute", "pymesh.meshio.form_mesh.set_attribute", "pymesh.meshio.form_mesh.add_attribute", "pymesh.meshio.form_mesh.set_attribute", "pymesh.save_mesh", "len", "pymesh.load_mesh.get_vertex_attribute", "pymesh.load_mesh.get_vertex_attribute", "pymesh.load_mesh.get_vertex_attribute", "pymesh.meshio.form_mesh.get_attribute_names"], "function", ["None"], ["def", "shuffle_pc", "(", "file", ",", "output_path", ")", ":", "\n", "    ", "\"\"\"\n    Function to shuffle a point cloud produced by virtual scanner.\n    \"\"\"", "\n", "mesh", "=", "pymesh", ".", "load_mesh", "(", "file", ")", "\n", "vertices", "=", "copy", ".", "deepcopy", "(", "mesh", ".", "vertices", ")", "\n", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "vertices", ")", ")", "\n", "vertices", "=", "vertices", "[", "permutation", "]", "\n", "new_mesh", "=", "pymesh", ".", "meshio", ".", "form_mesh", "(", "vertices", ",", "mesh", ".", "faces", ")", "\n", "new_mesh", ".", "add_attribute", "(", "\"vertex_nx\"", ")", "\n", "new_mesh", ".", "set_attribute", "(", "\"vertex_nx\"", ",", "mesh", ".", "get_vertex_attribute", "(", "\"vertex_nx\"", ")", "[", "permutation", "]", ")", "\n", "new_mesh", ".", "add_attribute", "(", "\"vertex_ny\"", ")", "\n", "new_mesh", ".", "set_attribute", "(", "\"vertex_ny\"", ",", "mesh", ".", "get_vertex_attribute", "(", "\"vertex_ny\"", ")", "[", "permutation", "]", ")", "\n", "new_mesh", ".", "add_attribute", "(", "\"vertex_nz\"", ")", "\n", "new_mesh", ".", "set_attribute", "(", "\"vertex_nz\"", ",", "mesh", ".", "get_vertex_attribute", "(", "\"vertex_nz\"", ")", "[", "permutation", "]", ")", "\n", "pymesh", ".", "save_mesh", "(", "output_path", ",", "new_mesh", ",", "ascii", "=", "True", ",", "anonymous", "=", "True", ",", "use_float", "=", "True", ",", "*", "new_mesh", ".", "get_attribute_names", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.Shuffle.shuffle.main": [[29, 35], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "shuffle.shuffle_pc"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.randomizePointCloud.shuffle_pc"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--input\"", ",", "help", "=", "\"Input file\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--output\"", ",", "help", "=", "\"Output file\"", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "shuffle_pc", "(", "args", ".", "input", ",", "args", ".", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.randomizePointCloud.shuffle_pc": [[15, 29], ["os.path.exists", "pymesh.load_mesh", "copy.deepcopy", "numpy.random.permutation", "numpy.save", "pcSamplingInfRayShapeNet.Count.add", "print", "len", "min", "len"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.pcSamplingInfRayShapeNet.Count.add"], ["def", "shuffle_pc", "(", "file", ",", "output_path", ",", "limit", "=", "None", ",", "count", "=", "None", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "output_path", "+", "\".npy\"", ")", ":", "\n", "\t\t\t", "mesh", "=", "pymesh", ".", "load_mesh", "(", "file", ")", "\n", "\n", "vertices", "=", "copy", ".", "deepcopy", "(", "mesh", ".", "vertices", ")", "\n", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "vertices", ")", ")", "\n", "if", "limit", "is", "not", "None", ":", "\n", "\t\t\t\t", "permutation", "=", "permutation", "[", ":", "min", "(", "limit", ",", "len", "(", "permutation", ")", ")", "]", "\n", "", "vertices", "=", "vertices", "[", "permutation", "]", "\n", "np", ".", "save", "(", "output_path", "+", "\".npy\"", ",", "vertices", ")", "\n", "", "", "except", ":", "\n", "\t\t", "Count", ".", "add", "(", "file", ")", "\n", "print", "(", "Count", ".", "failed_example_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.randomizePointCloud.shuffle_folder": [[31, 73], ["print", "print", "os.path.exists", "os.makedirs", "print", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "collections.defaultdict", "joblib.Parallel", "next", "os.path.join", "os.path.join", "os.listdir", "os.path.isfile", "print", "os.walk", "os.path.join", "randomizePointCloud..parallel.dispatch_next", "joblib.delayed", "str", "len"], "function", ["None"], ["", "", "def", "shuffle_folder", "(", "args", ")", ":", "\n", "\n", "\t", "ply_classes", "=", "\"/\"", ".", "join", "(", "[", "args", ".", "shapenet_path", ",", "\"ply\"", "]", ")", "\n", "npy_classes", "=", "\"/\"", ".", "join", "(", "[", "args", ".", "shapenet_path", ",", "\"npy\"", "]", ")", "\n", "\n", "limit", "=", "None", "if", "args", ".", "limit", "==", "0", "else", "args", ".", "limit", "\n", "if", "not", "exists", "(", "npy_classes", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "npy_classes", ")", "\n", "\n", "", "classes", "=", "[", "x", "for", "x", "in", "next", "(", "os", ".", "walk", "(", "ply_classes", ")", ")", "[", "1", "]", "]", "\n", "\n", "for", "obj_class", "in", "classes", ":", "\n", "\t\t", "print", "(", "obj_class", ")", "\n", "npy_path", "=", "join", "(", "npy_classes", ",", "obj_class", ")", "\n", "ply_path", "=", "join", "(", "ply_classes", ",", "obj_class", ")", "\n", "if", "not", "exists", "(", "npy_path", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "npy_path", ")", "\n", "\n", "", "onlyfiles", "=", "[", "(", "join", "(", "ply_path", ",", "f", ")", ",", "join", "(", "npy_path", ",", "f", ")", ",", "limit", ")", "for", "f", "in", "listdir", "(", "ply_path", ")", "if", "\n", "isfile", "(", "join", "(", "ply_path", ",", "f", ")", ")", "]", "\n", "\n", "class", "BatchCompletionCallBack", "(", "object", ")", ":", "\n", "\t\t\t", "completed", "=", "defaultdict", "(", "int", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "time", ",", "index", ",", "parallel", ")", ":", "\n", "\t\t\t\t", "self", ".", "index", "=", "index", "\n", "self", ".", "parallel", "=", "parallel", "\n", "\n", "", "def", "__call__", "(", "self", ",", "index", ")", ":", "\n", "\t\t\t\t", "BatchCompletionCallBack", ".", "completed", "[", "self", ".", "parallel", "]", "+=", "1", "\n", "print", "(", "\"Progress : %s %% \"", "%", "\n", "str", "(", "BatchCompletionCallBack", ".", "completed", "[", "self", ".", "parallel", "]", "*", "100", "/", "len", "(", "onlyfiles", ")", ")", ")", "\n", "if", "self", ".", "parallel", ".", "_original_iterator", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "self", ".", "parallel", ".", "dispatch_next", "(", ")", "\n", "\n", "", "", "", "joblib", ".", "parallel", ".", "BatchCompletionCallBack", "=", "BatchCompletionCallBack", "\n", "\n", "_", "=", "Parallel", "(", "n_jobs", "=", "-", "1", ",", "backend", "=", "\"multiprocessing\"", ")", "(", "delayed", "(", "shuffle_pc", ")", "(", "*", "i", ")", "for", "i", "in", "onlyfiles", ")", "\n", "\n", "", "print", "(", "f\"{Count.failed_example} failed examples\"", ")", "\n", "print", "(", "Count", ".", "failed_example_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.randomizePointCloud.main": [[75, 81], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "randomizePointCloud.shuffle_folder", "easydict.EasyDict"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.randomizePointCloud.shuffle_folder"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--shapenet_path\"", ",", "help", "=", "\"Input Folder\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--limit\"", ",", "help", "=", "\"Max number of points in the output cloud\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "shuffle_folder", "(", "EasyDict", "(", "args", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.process_raw_obj.main": [[7, 21], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "pcSamplingInfRayShapeNet.shoot_rays", "print", "randomizePointCloud.shuffle_folder", "print", "sample30kpoints.test_folder", "print", "easydict.EasyDict", "easydict.EasyDict", "easydict.EasyDict"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.pcSamplingInfRayShapeNet.shoot_rays", "home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.randomizePointCloud.shuffle_folder", "home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.sample30kpoints.test_folder"], ["def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--shapenet_path'", ",", "help", "=", "\"Input Folder\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--virtualscan'", ",", "type", "=", "str", ",", "help", "=", "'Path to the virtual scanner executable'", ",", "default", "=", "'virtual_scanner/build/virtualscanner'", ")", "\n", "parser", ".", "add_argument", "(", "'--limit'", ",", "help", "=", "\"Max number of points in the output cloud\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "\"Infinite ray sampling...\"", ")", "\n", "pcSamplingInfRayShapeNet", ".", "shoot_rays", "(", "EasyDict", "(", "args", ".", "__dict__", ")", ")", "\n", "print", "(", "\"Done! Random Shuffling...\"", ")", "\n", "randomizePointCloud", ".", "shuffle_folder", "(", "EasyDict", "(", "args", ".", "__dict__", ")", ")", "\n", "print", "(", "\"Done! Random Sampling...\"", ")", "\n", "sample30kpoints", ".", "test_folder", "(", "EasyDict", "(", "args", ".", "__dict__", ")", ")", "\n", "print", "(", "\"Done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.sample30kpoints.test_pc": [[16, 28], ["numpy.load", "print", "numpy.random.choice", "numpy.save", "pcSamplingInfRayShapeNet.Count.add", "print"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.pcSamplingInfRayShapeNet.Count.add"], ["def", "test_pc", "(", "file", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "points", "=", "np", ".", "load", "(", "file", ")", "\n", "if", "points", ".", "shape", "[", "0", "]", "!=", "30000", ":", "\n", "            ", "print", "(", "f\"sample {file}\"", ")", "\n", "choice", "=", "np", ".", "random", ".", "choice", "(", "points", ".", "shape", "[", "0", "]", ",", "30000", ",", "replace", "=", "True", ")", "\n", "points", "=", "points", "[", "choice", ",", ":", "]", "\n", "np", ".", "save", "(", "file", ",", "points", ")", "\n", "\n", "", "", "except", ":", "\n", "        ", "Count", ".", "add", "(", "file", ")", "\n", "print", "(", "Count", ".", "failed_example_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.sample30kpoints.test_folder": [[30, 66], ["print", "print", "os.path.exists", "os.makedirs", "print", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "collections.defaultdict", "joblib.Parallel", "next", "os.listdir", "os.path.isfile", "os.walk", "os.path.join", "sample30kpoints..parallel.dispatch_next", "joblib.delayed"], "function", ["None"], ["", "", "def", "test_folder", "(", "args", ")", ":", "\n", "    ", "npy_classes", "=", "\"/\"", ".", "join", "(", "[", "args", ".", "shapenet_path", ",", "\"npy\"", "]", ")", "\n", "\n", "if", "not", "exists", "(", "npy_classes", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "npy_classes", ")", "\n", "\n", "", "classes", "=", "[", "x", "for", "x", "in", "next", "(", "os", ".", "walk", "(", "npy_classes", ")", ")", "[", "1", "]", "]", "\n", "\n", "for", "obj_class", "in", "classes", ":", "\n", "        ", "print", "(", "obj_class", ")", "\n", "npy_path", "=", "join", "(", "npy_classes", ",", "obj_class", ")", "\n", "if", "not", "exists", "(", "npy_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "npy_path", ")", "\n", "\n", "", "onlyfiles", "=", "[", "join", "(", "npy_path", ",", "f", ")", "for", "f", "in", "listdir", "(", "npy_path", ")", "if", "\n", "isfile", "(", "join", "(", "npy_path", ",", "f", ")", ")", "]", "\n", "\n", "class", "BatchCompletionCallBack", "(", "object", ")", ":", "\n", "            ", "completed", "=", "defaultdict", "(", "int", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "time", ",", "index", ",", "parallel", ")", ":", "\n", "                ", "self", ".", "index", "=", "index", "\n", "self", ".", "parallel", "=", "parallel", "\n", "\n", "", "def", "__call__", "(", "self", ",", "index", ")", ":", "\n", "                ", "BatchCompletionCallBack", ".", "completed", "[", "self", ".", "parallel", "]", "+=", "1", "\n", "if", "self", ".", "parallel", ".", "_original_iterator", "is", "not", "None", ":", "\n", "                    ", "self", ".", "parallel", ".", "dispatch_next", "(", ")", "\n", "\n", "", "", "", "joblib", ".", "parallel", ".", "BatchCompletionCallBack", "=", "BatchCompletionCallBack", "\n", "\n", "_", "=", "Parallel", "(", "n_jobs", "=", "1", ",", "backend", "=", "\"multiprocessing\"", ")", "(", "delayed", "(", "test_pc", ")", "(", "i", ")", "for", "i", "in", "onlyfiles", ")", "\n", "\n", "", "print", "(", "f\"{Count.failed_example} failed examples\"", ")", "\n", "print", "(", "Count", ".", "failed_example_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.sample30kpoints.main": [[68, 73], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "sample30kpoints.test_folder", "easydict.EasyDict"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.sample30kpoints.test_folder"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--shapenet_path\"", ",", "help", "=", "\"Input Folder\"", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "test_folder", "(", "EasyDict", "(", "args", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.pcSamplingInfRayShapeNet.Count.add": [[16, 20], ["Count.failed_example_path.append"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "add", "(", "path", ")", ":", "\n", "        ", "Count", ".", "failed_example", "+=", "1", "\n", "Count", ".", "failed_example_path", ".", "append", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.pcSamplingInfRayShapeNet.sample_instance": [[22, 38], ["os.path.join", "os.path.join", "instance_path.split", "instance_path.split", "os.path.exists", "os.makedirs", "os.path.exists", "instance_path.split", "os.system", "os.rename", "pcSamplingInfRayShapeNet.Count.add", "print"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.pcSamplingInfRayShapeNet.Count.add"], ["", "", "def", "sample_instance", "(", "instance_path", ",", "virtualscan", ")", ":", "\n", "    ", "path", "=", "\"/\"", ".", "join", "(", "instance_path", ".", "split", "(", "sep", "=", "'/'", ")", "[", ":", "-", "3", "]", ")", "\n", "category", "=", "instance_path", ".", "split", "(", "sep", "=", "'/'", ")", "[", "-", "3", "]", "\n", "instance_name", "=", "instance_path", ".", "split", "(", "sep", "=", "'/'", ")", "[", "-", "2", "]", "\n", "ply_path", "=", "join", "(", "path", ",", "\"ply\"", ",", "category", ")", "\n", "if", "not", "exists", "(", "ply_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ply_path", ")", "\n", "", "out_path", "=", "join", "(", "ply_path", ",", "instance_name", "+", "\".points.ply\"", ")", "\n", "command", "=", "virtualscan", "+", "\" \"", "+", "instance_path", "+", "\" 10\"", "\n", "if", "not", "exists", "(", "out_path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "system", "(", "command", ")", "\n", "os", ".", "rename", "(", "instance_path", "[", ":", "-", "3", "]", "+", "\"ply\"", ",", "out_path", ")", "\n", "", "except", ":", "\n", "            ", "Count", ".", "add", "(", "instance_path", ")", "\n", "print", "(", "Count", ".", "failed_example_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.pcSamplingInfRayShapeNet.shoot_rays": [[40, 84], ["print", "print", "classes.remove", "classes.remove", "print", "os.path.join", "sorted", "numpy.any", "os.path.exists", "os.makedirs", "collections.defaultdict", "os.path.join", "print", "joblib.Parallel", "next", "print", "os.walk", "pcSamplingInfRayShapeNet..parallel.dispatch_next", "joblib.delayed", "zip", "next", "str", "os.walk", "len", "os.path.join", "len"], "function", ["None"], ["", "", "", "def", "shoot_rays", "(", "args", ")", ":", "\n", "    ", "classes", "=", "[", "x", "for", "x", "in", "next", "(", "os", ".", "walk", "(", "args", ".", "shapenet_path", ")", ")", "[", "1", "]", "]", "\n", "try", ":", "\n", "        ", "classes", ".", "remove", "(", "'ply'", ")", "\n", "classes", ".", "remove", "(", "'npy'", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "", "for", "obj_class", "in", "classes", ":", "\n", "        ", "print", "(", "obj_class", ")", "\n", "ply_path", "=", "join", "(", "args", ".", "shapenet_path", ",", "\"ply\"", ",", "obj_class", ")", "\n", "if", "not", "exists", "(", "ply_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "ply_path", ")", "\n", "\n", "", "obj_instances", "=", "sorted", "(", "[", "x", "for", "x", "in", "next", "(", "os", ".", "walk", "(", "join", "(", "args", ".", "shapenet_path", ",", "obj_class", ")", ")", ")", "[", "1", "]", "if", "\"ply\"", "not", "in", "x", "]", ")", "\n", "\n", "# obj_instances = obj_instances[:min(200, len(obj_instances))]  # Keep 200 first", "\n", "\n", "class", "BatchCompletionCallBack", "(", "object", ")", ":", "\n", "            ", "completed", "=", "defaultdict", "(", "int", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "time", ",", "index", ",", "parallel", ")", ":", "\n", "                ", "self", ".", "index", "=", "index", "\n", "self", ".", "parallel", "=", "parallel", "\n", "\n", "", "def", "__call__", "(", "self", ",", "index", ")", ":", "\n", "                ", "BatchCompletionCallBack", ".", "completed", "[", "self", ".", "parallel", "]", "+=", "1", "\n", "print", "(", "\"Progress : %s %% \"", "%", "\n", "str", "(", "BatchCompletionCallBack", ".", "completed", "[", "self", ".", "parallel", "]", "*", "100", "/", "len", "(", "obj_instances", ")", ")", ")", "\n", "if", "self", ".", "parallel", ".", "_original_iterator", "is", "not", "None", ":", "\n", "                    ", "self", ".", "parallel", ".", "dispatch_next", "(", ")", "\n", "\n", "", "", "", "joblib", ".", "parallel", ".", "BatchCompletionCallBack", "=", "BatchCompletionCallBack", "\n", "\n", "instance_paths", "=", "[", "join", "(", "args", ".", "shapenet_path", ",", "obj_class", ",", "obj_instance", ",", "\"model.obj\"", ")", "\n", "for", "obj_instance", "in", "obj_instances", "]", "\n", "\n", "if", "np", ".", "any", "(", "[", "\"03797390/ply/model\"", "in", "x", "for", "x", "in", "instance_paths", "]", ")", ":", "\n", "            ", "print", "(", "\"Debug\"", ")", "\n", "\n", "", "_", "=", "Parallel", "(", "n_jobs", "=", "-", "1", ",", "backend", "=", "\"multiprocessing\"", ")", "(", "delayed", "(", "sample_instance", ")", "(", "*", "i", ")", "for", "i", "in", "zip", "(", "instance_paths", ",", "[", "args", ".", "virtualscan", "]", "*", "len", "(", "instance_paths", ")", ")", ")", "\n", "\n", "", "print", "(", "f\"{Count.failed_example} failed examples\"", ")", "\n", "print", "(", "Count", ".", "failed_example_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.pcSamplingInfRayShapeNet.main": [[85, 92], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "pcSamplingInfRayShapeNet.shoot_rays", "easydict.EasyDict"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.O-CNN.pcSamplingInfRayShapeNet.shoot_rays"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--shapenet_path'", ",", "type", "=", "str", ",", "help", "=", "'Input folder'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--virtualscan'", ",", "type", "=", "str", ",", "help", "=", "'Path to the virtual scanner executable'", ",", "default", "=", "'virtual_scanner/build/virtualscanner'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "shoot_rays", "(", "EasyDict", "(", "args", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.unit_test.test_chamfer": [[14, 36], ["torch.rand().cuda", "torch.rand().cuda", "distChamfer", "torch.sum", "torch.sum.backward", "chamfer_python.distChamfer", "print", "print", "fscore.fscore", "torch.rand", "torch.rand", "torch.mean", "torch.mean", "torch.norm", "torch.norm", "xd1.float", "xd2.float"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.chamfer_python.distChamfer", "home.repos.pwc.inspect_result.itailang_geometric_adv.chamfer3D.dist_chamfer_3D.chamfer_3DFunction.backward", "home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.chamfer_python.distChamfer", "home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.fscore.fscore"], ["def", "test_chamfer", "(", "distChamfer", ",", "dim", ")", ":", "\n", "    ", "points1", "=", "torch", ".", "rand", "(", "4", ",", "100", ",", "dim", ")", ".", "cuda", "(", ")", "\n", "points2", "=", "torch", ".", "rand", "(", "4", ",", "200", ",", "dim", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", "=", "distChamfer", "(", "points1", ",", "points2", ")", "\n", "\n", "loss", "=", "torch", ".", "sum", "(", "dist1", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "mydist1", ",", "mydist2", ",", "myidx1", ",", "myidx2", "=", "chamfer_python", ".", "distChamfer", "(", "points1", ",", "points2", ")", "\n", "d1", "=", "(", "dist1", "-", "mydist1", ")", "**", "2", "\n", "d2", "=", "(", "dist2", "-", "mydist2", ")", "**", "2", "\n", "assert", "(", "\n", "torch", ".", "mean", "(", "d1", ")", "+", "torch", ".", "mean", "(", "d2", ")", "<", "0.00000001", "\n", ")", ",", "\"chamfer cuda and chamfer normal are not giving the same results\"", "\n", "\n", "xd1", "=", "idx1", "-", "myidx1", "\n", "xd2", "=", "idx2", "-", "myidx2", "\n", "assert", "(", "\n", "torch", ".", "norm", "(", "xd1", ".", "float", "(", ")", ")", "+", "torch", ".", "norm", "(", "xd2", ".", "float", "(", ")", ")", "==", "0", "\n", ")", ",", "\"chamfer cuda and chamfer normal are not giving the same results\"", "\n", "print", "(", "f\"fscore :\"", ",", "fscore", "(", "dist1", ",", "dist2", ")", ")", "\n", "print", "(", "\"Unit test passed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.unit_test.timings": [[38, 62], ["torch.rand().cuda", "torch.rand().cuda", "print", "time.time", "range", "print", "print", "time.time", "range", "print", "torch.autograd.Variable", "torch.autograd.Variable", "distChamfer", "torch.sum", "torch.sum.backward", "torch.autograd.Variable", "torch.autograd.Variable", "chamfer_python.distChamfer", "torch.sum", "torch.sum.backward", "torch.rand", "torch.rand", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.chamfer_python.distChamfer", "home.repos.pwc.inspect_result.itailang_geometric_adv.chamfer3D.dist_chamfer_3D.chamfer_3DFunction.backward", "home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.chamfer_python.distChamfer", "home.repos.pwc.inspect_result.itailang_geometric_adv.chamfer3D.dist_chamfer_3D.chamfer_3DFunction.backward"], ["", "def", "timings", "(", "distChamfer", ",", "dim", ")", ":", "\n", "    ", "p1", "=", "torch", ".", "rand", "(", "32", ",", "2000", ",", "dim", ")", ".", "cuda", "(", ")", "\n", "p2", "=", "torch", ".", "rand", "(", "32", ",", "1000", ",", "dim", ")", ".", "cuda", "(", ")", "\n", "print", "(", "\"Timings : Start CUDA version\"", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "num_it", "=", "100", "\n", "for", "i", "in", "range", "(", "num_it", ")", ":", "\n", "        ", "points1", "=", "Variable", "(", "p1", ",", "requires_grad", "=", "True", ")", "\n", "points2", "=", "Variable", "(", "p2", ")", "\n", "mydist1", ",", "mydist2", ",", "idx1", ",", "idx2", "=", "distChamfer", "(", "points1", ",", "points2", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "mydist1", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "", "print", "(", "f\"Ellapsed time forward backward is {(time.time() - start)/num_it} seconds.\"", ")", "\n", "\n", "\n", "print", "(", "\"Timings : Start Pythonic version\"", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "num_it", ")", ":", "\n", "        ", "points1", "=", "Variable", "(", "p1", ",", "requires_grad", "=", "True", ")", "\n", "points2", "=", "Variable", "(", "p2", ")", "\n", "mydist1", ",", "mydist2", ",", "idx1", ",", "idx2", "=", "chamfer_python", ".", "distChamfer", "(", "points1", ",", "points2", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "mydist1", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "", "print", "(", "f\"Ellapsed time  forward backward  is {(time.time() - start)/num_it} seconds.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.chamfer_python.pairwise_dist": [[4, 10], ["xx.diag().unsqueeze().expand_as", "yy.diag().unsqueeze().expand_as", "torch.mm", "torch.mm", "torch.mm", "x.t", "y.t", "y.t", "xx.diag().unsqueeze", "yy.diag().unsqueeze", "xx.diag().unsqueeze().expand_as.t", "xx.diag", "yy.diag"], "function", ["None"], ["def", "pairwise_dist", "(", "x", ",", "y", ")", ":", "\n", "    ", "xx", ",", "yy", ",", "zz", "=", "torch", ".", "mm", "(", "x", ",", "x", ".", "t", "(", ")", ")", ",", "torch", ".", "mm", "(", "y", ",", "y", ".", "t", "(", ")", ")", ",", "torch", ".", "mm", "(", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "rx", "=", "xx", ".", "diag", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "xx", ")", "\n", "ry", "=", "yy", ".", "diag", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "yy", ")", "\n", "P", "=", "rx", ".", "t", "(", ")", "+", "ry", "-", "2", "*", "zz", "\n", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.chamfer_python.NN_loss": [[12, 16], ["chamfer_python.pairwise_dist", "pairwise_dist.min", "values.mean"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.chamfer_python.pairwise_dist"], ["", "def", "NN_loss", "(", "x", ",", "y", ",", "dim", "=", "0", ")", ":", "\n", "    ", "dist", "=", "pairwise_dist", "(", "x", ",", "y", ")", "\n", "values", ",", "indices", "=", "dist", ".", "min", "(", "dim", "=", "dim", ")", "\n", "return", "values", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.chamfer_python.distChamfer": [[18, 40], ["x.size", "y.size", "torch.pow().sum", "torch.pow().sum", "torch.bmm", "torch.pow().sum.unsqueeze().expand", "torch.pow().sum.unsqueeze().expand", "a.double", "b.double", "y.transpose", "[].float", "[].float", "[].int", "[].int", "torch.pow", "torch.pow", "torch.pow().sum.unsqueeze", "torch.pow().sum.unsqueeze", "xx.unsqueeze().expand.transpose", "torch.min", "torch.min", "torch.min", "torch.min"], "function", ["None"], ["", "def", "distChamfer", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"\n    :param a: Pointclouds Batch x nul_points x dim\n    :param b:  Pointclouds Batch x nul_points x dim\n    :return:\n    -closest point on b of points from a\n    -closest point on a of points from b\n    -idx of closest point on b of points from a\n    -idx of closest point on a of points from b\n    Works for pointcloud of any dimension\n    \"\"\"", "\n", "x", ",", "y", "=", "a", ".", "double", "(", ")", ",", "b", ".", "double", "(", ")", "\n", "bs", ",", "num_points_x", ",", "points_dim", "=", "x", ".", "size", "(", ")", "\n", "bs", ",", "num_points_y", ",", "points_dim", "=", "y", ".", "size", "(", ")", "\n", "\n", "xx", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "2", ")", "\n", "yy", "=", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "2", ")", "\n", "zz", "=", "torch", ".", "bmm", "(", "x", ",", "y", ".", "transpose", "(", "2", ",", "1", ")", ")", "\n", "rx", "=", "xx", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bs", ",", "num_points_y", ",", "num_points_x", ")", "# Diagonal elements xx", "\n", "ry", "=", "yy", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bs", ",", "num_points_x", ",", "num_points_y", ")", "# Diagonal elements yy", "\n", "P", "=", "rx", ".", "transpose", "(", "2", ",", "1", ")", "+", "ry", "-", "2", "*", "zz", "\n", "return", "torch", ".", "min", "(", "P", ",", "2", ")", "[", "0", "]", ".", "float", "(", ")", ",", "torch", ".", "min", "(", "P", ",", "1", ")", "[", "0", "]", ".", "float", "(", ")", ",", "torch", ".", "min", "(", "P", ",", "2", ")", "[", "1", "]", ".", "int", "(", ")", ",", "torch", ".", "min", "(", "P", ",", "1", ")", "[", "1", "]", ".", "int", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.fscore.fscore": [[3, 17], ["torch.mean", "torch.mean", "torch.isnan"], "function", ["None"], ["def", "fscore", "(", "dist1", ",", "dist2", ",", "threshold", "=", "0.001", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the F-score between two point clouds with the corresponding threshold value.\n    :param dist1: Batch, N-Points\n    :param dist2: Batch, N-Points\n    :param th: float\n    :return: fscore, precision, recall\n    \"\"\"", "\n", "\n", "precision_1", "=", "torch", ".", "mean", "(", "(", "dist1", "<", "threshold", ")", ".", "float", "(", ")", ",", "dim", "=", "1", ")", "\n", "precision_2", "=", "torch", ".", "mean", "(", "(", "dist2", "<", "threshold", ")", ".", "float", "(", ")", ",", "dim", "=", "1", ")", "\n", "fscore", "=", "2", "*", "precision_1", "*", "precision_2", "/", "(", "precision_1", "+", "precision_2", ")", "\n", "fscore", "[", "torch", ".", "isnan", "(", "fscore", ")", "]", "=", "0", "\n", "return", "fscore", ",", "precision_1", ",", "precision_2", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.chamfer3D.dist_chamfer_3D.chamfer_3DFunction.forward": [[27, 48], ["xyz1.size", "xyz2.size", "torch.zeros", "torch.zeros", "torch.zeros().type", "torch.zeros().type", "dist1.to.to.to", "dist2.to.to.to", "idx1.to.to.to", "idx2.to.to.to", "torch.cuda.set_device", "chamfer_3D.forward", "ctx.save_for_backward", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.ChamferLoss.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "        ", "batchsize", ",", "n", ",", "_", "=", "xyz1", ".", "size", "(", ")", "\n", "_", ",", "m", ",", "_", "=", "xyz2", ".", "size", "(", ")", "\n", "device", "=", "xyz1", ".", "device", "\n", "\n", "dist1", "=", "torch", ".", "zeros", "(", "batchsize", ",", "n", ")", "\n", "dist2", "=", "torch", ".", "zeros", "(", "batchsize", ",", "m", ")", "\n", "\n", "idx1", "=", "torch", ".", "zeros", "(", "batchsize", ",", "n", ")", ".", "type", "(", "torch", ".", "IntTensor", ")", "\n", "idx2", "=", "torch", ".", "zeros", "(", "batchsize", ",", "m", ")", ".", "type", "(", "torch", ".", "IntTensor", ")", "\n", "\n", "dist1", "=", "dist1", ".", "to", "(", "device", ")", "\n", "dist2", "=", "dist2", ".", "to", "(", "device", ")", "\n", "idx1", "=", "idx1", ".", "to", "(", "device", ")", "\n", "idx2", "=", "idx2", ".", "to", "(", "device", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "\n", "\n", "chamfer_3D", ".", "forward", "(", "xyz1", ",", "xyz2", ",", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", ")", "\n", "ctx", ".", "save_for_backward", "(", "xyz1", ",", "xyz2", ",", "idx1", ",", "idx2", ")", "\n", "return", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.chamfer3D.dist_chamfer_3D.chamfer_3DFunction.backward": [[49, 65], ["graddist1.contiguous.contiguous.contiguous", "graddist2.contiguous.contiguous.contiguous", "torch.zeros", "torch.zeros", "gradxyz1.to.to.to", "gradxyz2.to.to.to", "chamfer_3D.backward", "xyz1.size", "xyz2.size"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.chamfer3D.dist_chamfer_3D.chamfer_3DFunction.backward"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "graddist1", ",", "graddist2", ",", "gradidx1", ",", "gradidx2", ")", ":", "\n", "        ", "xyz1", ",", "xyz2", ",", "idx1", ",", "idx2", "=", "ctx", ".", "saved_tensors", "\n", "graddist1", "=", "graddist1", ".", "contiguous", "(", ")", "\n", "graddist2", "=", "graddist2", ".", "contiguous", "(", ")", "\n", "device", "=", "graddist1", ".", "device", "\n", "\n", "gradxyz1", "=", "torch", ".", "zeros", "(", "xyz1", ".", "size", "(", ")", ")", "\n", "gradxyz2", "=", "torch", ".", "zeros", "(", "xyz2", ".", "size", "(", ")", ")", "\n", "\n", "gradxyz1", "=", "gradxyz1", ".", "to", "(", "device", ")", "\n", "gradxyz2", "=", "gradxyz2", ".", "to", "(", "device", ")", "\n", "chamfer_3D", ".", "backward", "(", "\n", "xyz1", ",", "xyz2", ",", "gradxyz1", ",", "gradxyz2", ",", "graddist1", ",", "graddist2", ",", "idx1", ",", "idx2", "\n", ")", "\n", "return", "gradxyz1", ",", "gradxyz2", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.chamfer3D.dist_chamfer_3D.chamfer_3DDist.__init__": [[68, 70], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "chamfer_3DDist", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.chamfer3D.dist_chamfer_3D.chamfer_3DDist.forward": [[71, 75], ["input1.contiguous.contiguous.contiguous", "input2.contiguous.contiguous.contiguous", "chamfer_3DFunction.apply"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.apply"], ["", "def", "forward", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "input1", "=", "input1", ".", "contiguous", "(", ")", "\n", "input2", "=", "input2", ".", "contiguous", "(", ")", "\n", "return", "chamfer_3DFunction", ".", "apply", "(", "input1", ",", "input2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.__init__": [[49, 77], ["transfer.ChartGenerator", "transfer.ChartGenerator", "transfer.ChartGenerator", "transfer.ChartGenerator", "transfer.MeshGenerator", "transfer.MeshGenerator", "transfer.MeshGenerator", "transfer.MeshGenerator", "transfer.ConfusionMatrixGenerator", "transfer.ConfusionMatrixGenerator", "transfer.ConfusionMatrixGenerator", "transfer.ConfusionMatrixGenerator", "HtmlGenerator.HtmlGenerator.make_header", "HtmlGenerator.HtmlGenerator.make_body", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.abspath", "open", "pickle.load", "HtmlGenerator.HtmlGenerator.__dict__.update", "path.split"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ChartGenerator.ChartGenerator.make_header", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.make_body", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.update"], ["    ", "def", "__init__", "(", "self", ",", "path", "=", "None", ",", "title", "=", "\"NetVision visualization\"", ",", "reload_path", "=", "None", ",", "output_folder", "=", "\"media\"", ",", "local_copy", "=", "False", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "head", "=", "[", "]", "\n", "self", ".", "body", "=", "[", "]", "\n", "self", ".", "curveGen", "=", "ChartGenerator", ".", "ChartGenerator", "(", ")", "\n", "self", ".", "meshGen", "=", "MeshGenerator", ".", "MeshGenerator", "(", "html_path", "=", "abspath", "(", "self", ".", "path", ")", ")", "\n", "self", ".", "confMatGen", "=", "ConfusionMatrixGenerator", ".", "ConfusionMatrixGenerator", "(", ")", "\n", "self", ".", "tables", "=", "{", "}", "\n", "self", ".", "title", "=", "title", "\n", "self", ".", "hasCurveHeader", "=", "False", "\n", "self", ".", "hasMeshHeader", "=", "False", "\n", "self", ".", "hasDict_css", "=", "False", "\n", "self", ".", "make_header", "(", ")", "\n", "self", ".", "make_body", "(", ")", "\n", "self", ".", "local_copy", "=", "local_copy", "\n", "if", "reload_path", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "reload_path", ",", "'rb'", ")", "as", "file_handler", ":", "\n", "                ", "newObj", "=", "pickle", ".", "load", "(", "file_handler", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "newObj", ".", "__dict__", ")", "\n", "self", ".", "path", "=", "path", "\n", "\n", "", "", "self", ".", "pict_it", "=", "0", "\n", "\n", "self", ".", "output_folder", "=", "join", "(", "'/'", ".", "join", "(", "path", ".", "split", "(", "sep", "=", "'/'", ")", "[", ":", "-", "1", "]", ")", ",", "output_folder", ")", "# Output folder for the website, specified by the user", "\n", "self", ".", "image_folder", "=", "join", "(", "self", ".", "output_folder", ",", "\"images\"", ")", "\n", "self", ".", "image_folder_relative_html", "=", "join", "(", "output_folder", ",", "\"images\"", ")", "\n", "if", "not", "exists", "(", "self", ".", "image_folder", ")", ":", "\n", "            ", "makedirs", "(", "self", ".", "image_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.make_header": [[78, 88], ["HtmlGenerator.HtmlGenerator.head.append", "HtmlGenerator.HtmlGenerator.head.append", "HtmlGenerator.HtmlGenerator.head.append", "HtmlGenerator.HtmlGenerator.head.append", "HtmlGenerator.HtmlGenerator.head.append", "HtmlGenerator.HtmlGenerator.head.append", "HtmlGenerator.HtmlGenerator.head.append", "HtmlGenerator.HtmlGenerator.head.append", "HtmlGenerator.HtmlGenerator.head.append"], "methods", ["None"], ["", "", "def", "make_header", "(", "self", ")", ":", "\n", "        ", "self", ".", "head", ".", "append", "(", "'<head>\\n'", ")", "\n", "self", ".", "head", ".", "append", "(", "'\\t<title></title>\\n'", ")", "\n", "self", ".", "head", ".", "append", "(", "'\\t<meta name=\\\"keywords\\\" content= \\\"Visual Result\\\" />  <meta charset=\\\"utf-8\\\" />\\n'", ")", "\n", "self", ".", "head", ".", "append", "(", "'\\t<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n'", ")", "\n", "self", ".", "head", ".", "append", "(", "'\\t<meta http-equiv=\\\"Content-Script-Type\\\" content=\\\"text/javascript\\\" />\\n'", ")", "\n", "self", ".", "head", ".", "append", "(", "'\\t<meta http-equiv=\\\"expires\\\" content=\\\"0\\\" />\\n'", ")", "\n", "self", ".", "head", ".", "append", "(", "'\\t<meta name=\\\"description\\\" content= \\\"Project page of style.css\\\" />\\n'", ")", "\n", "self", ".", "head", ".", "append", "(", "'\\t<link rel=\\\"shortcut icon\\\" href=\\\"favicon.ico\\\" />\\n'", ")", "\n", "self", ".", "head", ".", "append", "(", "\" <style> .hor-bar { width:100%; background-color:black;  height:1px;   }\"", "\n", "\" h3{  margin-top:10px; } </style>\"", ")", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_javascript_libraries": [[90, 92], ["None"], "methods", ["None"], ["", "def", "add_javascript_libraries", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_css": [[93, 95], ["None"], "methods", ["None"], ["", "def", "add_css", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.return_html": [[96, 113], ["str", "open", "output_file.write", "HtmlGenerator.HtmlGenerator._pretreat_data", "open", "pickle.dump", "HtmlGenerator.HtmlGenerator.meshGen.end_mesh"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table._pretreat_data", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dump", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.MeshGenerator.end_mesh"], ["", "def", "return_html", "(", "self", ",", "save_editable_version", "=", "False", ")", ":", "\n", "# self.add_javascript_libraries()", "\n", "# self.add_css()", "\n", "\n", "        ", "begin_html", "=", "'<!DOCTYPE html>\\n<html>\\n'", "\n", "self", ".", "head_str", "=", "\"\"", ".", "join", "(", "self", ".", "head", ")", "\n", "self", ".", "body_str", "=", "\"\"", ".", "join", "(", "[", "str", "(", "self", ".", "_pretreat_data", "(", "x", ")", ")", "for", "x", "in", "self", ".", "body", "]", ")", "\n", "\n", "end_html", "=", "\"</html>\\n\"", "\n", "webpage", "=", "begin_html", "+", "self", ".", "head_str", "+", "self", ".", "meshGen", ".", "end_mesh", "(", ")", "+", "\"</body>\\n\"", "+", "self", ".", "body_str", "+", "'</head>\\n'", "+", "end_html", "\n", "if", "self", ".", "path", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "path", ",", "'w'", ")", "as", "output_file", ":", "\n", "                ", "output_file", ".", "write", "(", "webpage", ")", "\n", "", "if", "save_editable_version", ":", "\n", "                ", "with", "open", "(", "self", ".", "path", "[", ":", "-", "4", "]", "+", "\"pkl\"", ",", "'wb'", ")", "as", "output_file", ":", "\n", "                    ", "pickle", ".", "dump", "(", "self", ",", "output_file", ")", "\n", "", "", "", "return", "webpage", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator._pretreat_data": [[114, 118], ["type"], "methods", ["None"], ["", "def", "_pretreat_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "type", "(", "data", ")", "is", "ChartGenerator", ".", "Chart", ":", "\n", "            ", "data", ".", "width", "=", "f\"(window.innerWidth*{data.width_factor}).toString() + \\\"px\\\"\"", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.make_body": [[119, 128], ["HtmlGenerator.HtmlGenerator.body.append", "HtmlGenerator.HtmlGenerator.body.append", "HtmlGenerator.HtmlGenerator.body.append", "HtmlGenerator.HtmlGenerator.body.append", "HtmlGenerator.HtmlGenerator.body.append", "HtmlGenerator.HtmlGenerator.body.append", "HtmlGenerator.HtmlGenerator.body.append", "HtmlGenerator.HtmlGenerator.body.append"], "methods", ["None"], ["", "def", "make_body", "(", "self", ")", ":", "\n", "        ", "self", ".", "body", ".", "append", "(", "'<body style=\\\"background-color: lightgrey;\\\">\\n'", ")", "\n", "self", ".", "body", ".", "append", "(", "'<center>\\n'", ")", "\n", "self", ".", "body", ".", "append", "(", "'\\t<div class=\\\"blank\\\"></div>\\n'", ")", "\n", "self", ".", "body", ".", "append", "(", "'\\t<h1>\\n'", ")", "\n", "self", ".", "body", ".", "append", "(", "f'\\t\\t{self.title}\\n'", ")", "\n", "self", ".", "body", ".", "append", "(", "'\\t</h1>\\n'", ")", "\n", "self", ".", "body", ".", "append", "(", "'</center>\\n'", ")", "\n", "self", ".", "body", ".", "append", "(", "'<div class=\\\"blank\\\"></div>\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_html_in_body": [[129, 135], ["HtmlGenerator.HtmlGenerator.body.append"], "methods", ["None"], ["", "def", "add_html_in_body", "(", "self", ",", "html_content", ")", ":", "\n", "        ", "\"\"\"\n        :param html_content: html string.\n        :return:\n        \"\"\"", "\n", "self", ".", "body", ".", "append", "(", "html_content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_title": [[136, 142], ["body.append", "body.append", "body.append", "HtmlGenerator.HtmlGenerator.body.append"], "methods", ["None"], ["", "def", "add_title", "(", "self", ",", "title_content", ")", ":", "\n", "        ", "body", "=", "[", "]", "\n", "body", ".", "append", "(", "'\\t<h2>\\n'", ")", "\n", "body", ".", "append", "(", "f'\\t\\t{title_content}\\n'", ")", "\n", "body", ".", "append", "(", "'\\t</h2>\\n'", ")", "\n", "self", ".", "body", ".", "append", "(", "\"\"", ".", "join", "(", "body", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_subtitle": [[143, 149], ["body.append", "body.append", "body.append", "HtmlGenerator.HtmlGenerator.body.append"], "methods", ["None"], ["", "def", "add_subtitle", "(", "self", ",", "sub_title_content", ")", ":", "\n", "        ", "body", "=", "[", "]", "\n", "body", ".", "append", "(", "'\\t<h3>\\n'", ")", "\n", "body", ".", "append", "(", "f'\\t\\t{sub_title_content}\\n'", ")", "\n", "body", ".", "append", "(", "'\\t</h3>\\n'", ")", "\n", "self", ".", "body", ".", "append", "(", "\"\"", ".", "join", "(", "body", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_subsubtitle": [[150, 156], ["body.append", "body.append", "body.append", "HtmlGenerator.HtmlGenerator.body.append"], "methods", ["None"], ["", "def", "add_subsubtitle", "(", "self", ",", "sub_title_content", ")", ":", "\n", "        ", "body", "=", "[", "]", "\n", "body", ".", "append", "(", "'\\t<h4>\\n'", ")", "\n", "body", ".", "append", "(", "f'\\t\\t{sub_title_content}\\n'", ")", "\n", "body", ".", "append", "(", "'\\t</h4>\\n'", ")", "\n", "self", ".", "body", ".", "append", "(", "\"\"", ".", "join", "(", "body", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_linebreak": [[157, 159], ["HtmlGenerator.HtmlGenerator.body.append"], "methods", ["None"], ["", "def", "add_linebreak", "(", "self", ")", ":", "\n", "        ", "self", ".", "body", ".", "append", "(", "f'</br>\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.image": [[160, 173], ["body.append", "os.path.join", "shutil.copy", "os.path.join", "str().zfill", "os.path.splitext", "str"], "methods", ["None"], ["", "def", "image", "(", "self", ",", "path", ",", "size", "=", "\"300px\"", ")", ":", "\n", "        ", "if", "self", ".", "local_copy", ":", "\n", "            ", "in_pict_file", "=", "path", "# path to the image", "\n", "pict_new_name", "=", "str", "(", "self", ".", "pict_it", ")", ".", "zfill", "(", "3", ")", "+", "splitext", "(", "in_pict_file", ")", "[", "1", "]", "\n", "out_pict_file", "=", "join", "(", "self", ".", "image_folder", ",", "pict_new_name", ")", "\n", "copy", "(", "in_pict_file", ",", "out_pict_file", ")", "\n", "path", "=", "join", "(", "self", ".", "image_folder_relative_html", ",", "pict_new_name", ")", "# Path to use in html code", "\n", "self", ".", "pict_it", "+=", "1", "\n", "\n", "", "body", "=", "[", "]", "\n", "body", ".", "append", "(", "f'<a download={path} href={path} title=\"ImageName\"> '", "\n", "f'<img  src={path} width={size} height={size} /></a>\\n'", ")", "\n", "return", "\"\"", ".", "join", "(", "body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_image": [[174, 176], ["HtmlGenerator.HtmlGenerator.body.append", "HtmlGenerator.HtmlGenerator.image"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.image"], ["", "def", "add_image", "(", "self", ",", "path", ",", "size", "=", "\"300px\"", ")", ":", "\n", "        ", "self", ".", "body", ".", "append", "(", "self", ".", "image", "(", "path", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.chart": [[177, 183], ["HtmlGenerator.HtmlGenerator.curveGen.make_chart", "HtmlGenerator.HtmlGenerator.head.append", "HtmlGenerator.HtmlGenerator.curveGen.make_header"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ChartGenerator.ChartGenerator.make_chart", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ChartGenerator.ChartGenerator.make_header"], ["", "def", "chart", "(", "self", ",", "data", ",", "chart_type", "=", "\"line\"", ",", "title", "=", "None", ",", "x_labels", "=", "None", ",", "font_color", "=", "\"black\"", ",", "width_factor", "=", "1", ",", ")", ":", "\n", "        ", "if", "not", "self", ".", "hasCurveHeader", ":", "\n", "            ", "self", ".", "head", ".", "append", "(", "self", ".", "curveGen", ".", "make_header", "(", ")", ")", "\n", "", "self", ".", "hasCurveHeader", "=", "True", "\n", "return", "self", ".", "curveGen", ".", "make_chart", "(", "data", "=", "data", ",", "font_color", "=", "font_color", ",", "chart_type", "=", "chart_type", ",", "\n", "title", "=", "title", ",", "width_factor", "=", "width_factor", ",", "x_labels", "=", "x_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_chart": [[184, 188], ["HtmlGenerator.HtmlGenerator.body.append", "HtmlGenerator.HtmlGenerator.body.append", "HtmlGenerator.HtmlGenerator.body.append", "HtmlGenerator.HtmlGenerator.chart"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.chart"], ["", "def", "add_chart", "(", "self", ",", "data", ",", "chart_type", "=", "\"line\"", ",", "title", "=", "None", ",", "x_labels", "=", "None", ",", "font_color", "=", "\"black\"", ",", "width_factor", "=", "1", ")", ":", "\n", "        ", "self", ".", "body", ".", "append", "(", "\"<div>\"", ")", "\n", "self", ".", "body", ".", "append", "(", "self", ".", "chart", "(", "data", ",", "chart_type", "=", "chart_type", ",", "title", "=", "title", ",", "x_labels", "=", "x_labels", ",", "font_color", "=", "font_color", ",", "width_factor", "=", "width_factor", ")", ")", "\n", "self", ".", "body", ".", "append", "(", "\"</div>\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.text": [[189, 191], ["None"], "methods", ["None"], ["", "def", "text", "(", "self", ",", "text", ")", ":", "\n", "        ", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_textFile": [[192, 194], ["HtmlGenerator.HtmlGenerator.body.append"], "methods", ["None"], ["", "def", "add_textFile", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "body", ".", "append", "(", "f\"<object  width=\\\"2000\\\" height=\\\"1000\\\"  type=\\\"text/plain\\\" data=\\\"{path}\\\" border=\\\"0\\\" ></object>\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.mesh": [[195, 209], ["HtmlGenerator.HtmlGenerator.meshGen.make_mesh", "HtmlGenerator.HtmlGenerator.head.append", "os.path.join", "shutil.copy", "os.path.join", "HtmlGenerator.HtmlGenerator.meshGen.make_header", "str().zfill", "transfer.atlasnet.auxiliary.netvision.MeshGenerator.Mesh", "transfer.atlasnet.auxiliary.netvision.MeshGenerator.Mesh", "transfer.atlasnet.auxiliary.netvision.MeshGenerator.Mesh", "transfer.atlasnet.auxiliary.netvision.MeshGenerator.Mesh", "os.path.splitext", "str"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.MeshGenerator.make_mesh", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ChartGenerator.ChartGenerator.make_header"], ["", "def", "mesh", "(", "self", ",", "mesh_path", ",", "title", "=", "\"\"", ",", "normalize", "=", "True", ")", ":", "\n", "        ", "if", "not", "self", ".", "hasMeshHeader", ":", "\n", "            ", "self", ".", "head", ".", "append", "(", "self", ".", "meshGen", ".", "make_header", "(", ")", ")", "\n", "", "self", ".", "hasMeshHeader", "=", "True", "\n", "if", "self", ".", "local_copy", ":", "\n", "            ", "in_pict_file", "=", "mesh_path", "# path to the image", "\n", "pict_new_name", "=", "str", "(", "self", ".", "pict_it", ")", ".", "zfill", "(", "3", ")", "+", "splitext", "(", "in_pict_file", ")", "[", "1", "]", "\n", "out_pict_file", "=", "join", "(", "self", ".", "image_folder", ",", "pict_new_name", ")", "\n", "copy", "(", "in_pict_file", ",", "out_pict_file", ")", "\n", "mesh_path", "=", "join", "(", "self", ".", "image_folder_relative_html", ",", "pict_new_name", ")", "# Path to use in html code", "\n", "self", ".", "pict_it", "+=", "1", "\n", "if", "normalize", ":", "\n", "                ", "Mesh", "(", "out_pict_file", ")", "\n", "", "", "return", "self", ".", "meshGen", ".", "make_mesh", "(", "mesh_path", ",", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_table": [[210, 217], ["transfer.Table", "transfer.Table", "transfer.Table", "transfer.Table", "HtmlGenerator.HtmlGenerator.body.append", "len", "str", "len"], "methods", ["None"], ["", "def", "add_table", "(", "self", ",", "title", "=", "\"\"", ")", ":", "\n", "        ", "table", "=", "Table", ".", "Table", "(", "title", ")", "\n", "self", ".", "body", ".", "append", "(", "table", ")", "\n", "if", "len", "(", "title", ")", "==", "0", ":", "\n", "            ", "title", "=", "str", "(", "len", "(", "self", ".", "tables", ")", ")", "\n", "", "self", ".", "tables", "[", "title", "]", "=", "table", "\n", "return", "table", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.confMat": [[218, 220], ["HtmlGenerator.HtmlGenerator.confMatGen.make_confusionmatrix"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ConfusionMatrixGenerator.ConfusionMatrixGenerator.make_confusionmatrix"], ["", "def", "confMat", "(", "self", ",", "data", ",", "rows_titles", "=", "None", ",", "colums_titles", "=", "None", ",", "title", "=", "\"Confusion\"", ",", "colormap", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "confMatGen", ".", "make_confusionmatrix", "(", "data", ",", "rows_titles", ",", "colums_titles", ",", "title", "=", "title", ",", "colormap", "=", "colormap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dict": [[221, 229], ["data.keys", "HtmlGenerator.HtmlGenerator.head.append", "HtmlGenerator.HtmlGenerator.add_css_for_add_dict"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_css_for_add_dict"], ["", "def", "dict", "(", "self", ",", "data", ",", "title", "=", "\"PARAMETERS\"", ")", ":", "\n", "        ", "if", "not", "self", ".", "hasDict_css", ":", "\n", "            ", "self", ".", "head", ".", "append", "(", "self", ".", "add_css_for_add_dict", "(", ")", ")", "\n", "", "self", ".", "hasDict_css", "=", "True", "\n", "out_string", "=", "f\"<span class=\\\"value\\\">{title} </span></br>\\n\"", "\n", "for", "key", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "out_string", "+=", "f\"<span class=\\\"key\\\"> {key} </span> : <span class=\\\"value\\\">{data[key]} </span></br>\\n\"", "\n", "", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.add_css_for_add_dict": [[230, 243], ["None"], "methods", ["None"], ["", "def", "add_css_for_add_dict", "(", "self", ")", ":", "\n", "        ", "outstring", "=", "\"\"", "\n", "outstring", "+=", "\"<style>\\n\\\n              .key {\\n\\\n                color: #2980b9;\\n\\\n                font-weight:bold; \\n\\\n              }\\n\\\n              .value { /* OK, a bit contrived... */\\n\\\n                color: #c0392b;\\n\\\n                font-weight:bold; \\n\\\n                }</style>\\n\\\n            \"", "\n", "return", "outstring", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dump": [[244, 246], ["None"], "methods", ["None"], ["", "def", "dump", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ConfusionMatrixGenerator.ColorMap.__init__": [[6, 9], ["os.path.join", "numpy.load", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "colormap_path", "=", "join", "(", "dirname", "(", "__file__", ")", ",", "\"colormap.npy\"", ")", "\n", "self", ".", "colormap", "=", "np", ".", "load", "(", "self", ".", "colormap_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ConfusionMatrixGenerator.ColorMap.__call__": [[10, 17], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        :param value: a float\n        :return:\n        \"\"\"", "\n", "colors", "=", "self", ".", "colormap", "[", "index", "]", "\n", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ConfusionMatrixGenerator.ConfusionMatrixGenerator.__init__": [[20, 22], ["ConfusionMatrixGenerator.ColorMap"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "colormap", "=", "ColorMap", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ConfusionMatrixGenerator.ConfusionMatrixGenerator.update_colormap": [[23, 25], ["None"], "methods", ["None"], ["", "def", "update_colormap", "(", "self", ",", "colormap", ")", ":", "\n", "        ", "self", ".", "colormap", "=", "colormap", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ConfusionMatrixGenerator.ConfusionMatrixGenerator.make_confusionmatrix": [[26, 70], ["ConfusionMatrixGenerator.ConfusionMatrixGenerator.rescale", "range", "range", "ConfusionMatrixGenerator.ConfusionMatrixGenerator.update_colormap", "numpy.arange", "numpy.arange", "range", "int", "int", "ConfusionMatrixGenerator.ConfusionMatrixGenerator.rgb", "ConfusionMatrixGenerator.ConfusionMatrixGenerator.rgb", "ConfusionMatrixGenerator.ConfusionMatrixGenerator.colormap", "ConfusionMatrixGenerator.ConfusionMatrixGenerator.colormap", "numpy.min", "int", "float", "float", "float", "float", "numpy.max", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ConfusionMatrixGenerator.ConfusionMatrixGenerator.rescale", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ConfusionMatrixGenerator.ConfusionMatrixGenerator.update_colormap", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ConfusionMatrixGenerator.ConfusionMatrixGenerator.rgb", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ConfusionMatrixGenerator.ConfusionMatrixGenerator.rgb"], ["", "def", "make_confusionmatrix", "(", "self", ",", "data", ",", "rows_titles", ",", "colums_titles", ",", "title", "=", "\"Confusion\"", ",", "colormap", "=", "None", ")", ":", "\n", "        ", "if", "colormap", "is", "not", "None", ":", "\n", "            ", "self", ".", "update_colormap", "(", "colormap", ")", "\n", "\n", "", "if", "rows_titles", "is", "None", ":", "\n", "            ", "rows_titles", "=", "np", ".", "arange", "(", "data", ".", "shape", "[", "0", "]", ")", "\n", "", "if", "colums_titles", "is", "None", ":", "\n", "            ", "colums_titles", "=", "np", ".", "arange", "(", "data", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "outstr", "=", "\"\"", "\n", "outstr", "+=", "\"<table cellspacing=\\\"0\\\" cellpadding=\\\"2px\\\">\\n\"", "\n", "data_scaled", "=", "self", ".", "rescale", "(", "data", ")", "\n", "\n", "outstr", "+=", "\"<tr>\\n\"", "\n", "outstr", "+=", "f\"<td  style=\\\"text-align: center; font-weight: bold;\\\" >{title}</td>\\n\"", "\n", "\n", "for", "j", "in", "range", "(", "data", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "outstr", "+=", "f\"<td  style=\\\"text-align: center; font-weight: bold;\\\" > {colums_titles[j]} </td>\\n\"", "\n", "", "outstr", "+=", "f\"<td  style=\\\"text-align: center; font-weight: bold;\\\" ></td>\\n\"", "\n", "outstr", "+=", "f\"<td  style=\\\"text-align: center; font-weight: bold;\\\" >Colormap</td>\\n\"", "\n", "outstr", "+=", "\"</tr\\n>\"", "\n", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "outstr", "+=", "f\"<tr>\\n\"", "\n", "outstr", "+=", "f\"<td style=\\\"text-align: center; font-weight: bold;\\\"> {rows_titles[i]} </td>\\n\"", "\n", "\n", "for", "j", "in", "range", "(", "data", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "rgb_float", "=", "self", ".", "colormap", "(", "int", "(", "data_scaled", "[", "i", ",", "j", "]", ")", ")", "[", ":", "3", "]", "\n", "rgb_int", "=", "self", ".", "rgb", "(", "rgb_float", ")", "\n", "color_str", "=", "f\"rgb({rgb_int[0]}, {rgb_int[1]}, {rgb_int[2]})\"", "\n", "outstr", "+=", "f\"<td style=\\\"color: white ; text-align: center; background-color:{color_str}\\\"> {data[i, j]} </td>\\n\"", "\n", "\n", "", "outstr", "+=", "f\"<td  style=\\\"text-align: center; font-weight: bold;\\\" ></td>\\n\"", "\n", "\n", "index", "=", "int", "(", "(", "float", "(", "i", ")", "/", "float", "(", "data", ".", "shape", "[", "0", "]", ")", ")", "*", "255.0", ")", "\n", "index_rescaled", "=", "int", "(", "(", "float", "(", "i", ")", "/", "float", "(", "data", ".", "shape", "[", "0", "]", ")", ")", "*", "(", "np", ".", "max", "(", "data", ")", "-", "np", ".", "min", "(", "data", ")", ")", "+", "np", ".", "min", "(", "data", ")", ")", "\n", "rgb_float", "=", "self", ".", "colormap", "(", "index", ")", "[", ":", "3", "]", "\n", "rgb_int", "=", "self", ".", "rgb", "(", "rgb_float", ")", "\n", "color_str", "=", "f\"rgb({rgb_int[0]}, {rgb_int[1]}, {rgb_int[2]})\"", "\n", "outstr", "+=", "f\"<td style=\\\"color: white ; text-align: center; background-color:{color_str}\\\"> {index_rescaled} </td>\\n\"", "\n", "\n", "outstr", "+=", "\"</tr>\\n\"", "\n", "", "outstr", "+=", "\"</table>\\n\"", "\n", "return", "outstr", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ConfusionMatrixGenerator.ConfusionMatrixGenerator.make_header": [[71, 73], ["None"], "methods", ["None"], ["", "def", "make_header", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ConfusionMatrixGenerator.ConfusionMatrixGenerator.rescale": [[74, 81], ["numpy.floor", "numpy.min", "numpy.max"], "methods", ["None"], ["", "def", "rescale", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"rescale to 0-255\"", "\n", "data", "=", "data", "-", "np", ".", "min", "(", "data", ")", "\n", "data", "=", "data", "/", "np", ".", "max", "(", "data", ")", "\n", "data", "=", "data", "*", "255", "\n", "data", "=", "np", ".", "floor", "(", "data", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ConfusionMatrixGenerator.ConfusionMatrixGenerator.rgb": [[82, 86], ["int", "numpy.floor"], "methods", ["None"], ["", "def", "rgb", "(", "self", ",", "color", ")", ":", "\n", "        ", "\"rescale to 0-255\"", "\n", "color", "=", "[", "int", "(", "np", ".", "floor", "(", "data", "*", "255", ")", ")", "for", "data", "in", "color", "]", "\n", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ConfusionMatrixGenerator.ConfusionMatrixGenerator.end_confusionmatrix": [[87, 89], ["None"], "methods", ["None"], ["", "def", "end_confusionmatrix", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.Mesh.__init__": [[6, 11], ["MeshGenerator.Mesh.read_obj", "MeshGenerator.Mesh.normalize", "MeshGenerator.Mesh.write_obj"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.Mesh.read_obj", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.Mesh.normalize", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.Mesh.write_obj"], ["    ", "def", "__init__", "(", "self", ",", "obj_path", ")", ":", "\n", "        ", "self", ".", "obj_path", "=", "obj_path", "\n", "self", ".", "read_obj", "(", ")", "\n", "self", ".", "normalize", "(", ")", "\n", "self", ".", "write_obj", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.Mesh.read_obj": [[12, 27], ["open", "line.split", "len", "points.append", "faces.append", "float", "int", "x.split"], "methods", ["None"], ["", "def", "read_obj", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "obj_path", ",", "\"r\"", ")", "as", "in_file", ":", "\n", "            ", "points", "=", "[", "]", "\n", "faces", "=", "[", "]", "\n", "for", "line", "in", "in_file", ":", "\n", "                ", "line_s", "=", "line", ".", "split", "(", ")", "\n", "if", "len", "(", "line_s", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "line_s", "[", "0", "]", "==", "\"v\"", ":", "\n", "                    ", "points", ".", "append", "(", "[", "float", "(", "x", ")", "for", "x", "in", "line_s", "[", "1", ":", "4", "]", "]", ")", "\n", "", "if", "line_s", "[", "0", "]", "==", "\"f\"", ":", "\n", "                    ", "faces", ".", "append", "(", "[", "int", "(", "x", ".", "split", "(", "sep", "=", "'/'", ")", "[", "0", "]", ")", "-", "1", "for", "x", "in", "line_s", "[", "1", ":", "4", "]", "]", ")", "\n", "\n", "", "", "", "self", ".", "points", "=", "points", "\n", "self", ".", "faces", "=", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.Mesh.normalize": [[28, 32], ["numpy.mean", "numpy.sqrt", "numpy.max", "numpy.sum"], "methods", ["None"], ["", "def", "normalize", "(", "self", ")", ":", "\n", "        ", "centroid", "=", "np", ".", "mean", "(", "self", ".", "points", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "self", ".", "points", "=", "self", ".", "points", "-", "centroid", "\n", "self", ".", "points", "=", "self", ".", "points", "/", "np", ".", "sqrt", "(", "np", ".", "max", "(", "np", ".", "sum", "(", "self", ".", "points", "**", "2", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.Mesh.write_obj": [[33, 40], ["open", "out_file.write", "str", "str", "int"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write"], ["", "def", "write_obj", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "obj_path", ",", "\"w\"", ")", "as", "out_file", ":", "\n", "            ", "out_file", ".", "write", "(", "\"\\n\"", ".", "join", "(", "[", "\"v \"", "+", "\" \"", ".", "join", "(", "[", "str", "(", "coord", ")", "for", "coord", "in", "point", "]", ")", "for", "point", "in", "\n", "self", ".", "points", "]", ")", "\n", "+", "\"\\n\"", "\n", "+", "\"\\n\"", ".", "join", "(", "[", "\"f \"", "+", "\" \"", ".", "join", "(", "[", "str", "(", "int", "(", "tri", "+", "1", ")", ")", "for", "tri", "in", "face", "]", ")", "for", "face", "in", "\n", "self", ".", "faces", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.MeshGenerator.__init__": [[42, 53], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "html_path", ")", ":", "\n", "        ", "self", ".", "curve_it", "=", "0", "\n", "self", ".", "colors", "=", "[", "\"#c0392b\"", ",", "\" #2980b9\"", ",", "\"#27ae60\"", "]", "\n", "self", ".", "three_path", "=", "join", "(", "dirname", "(", "__file__", ")", ",", "\"js/three.js\"", ")", "\n", "self", ".", "Detector_path", "=", "join", "(", "dirname", "(", "__file__", ")", ",", "\"js/Detector.js\"", ")", "\n", "self", ".", "OrbitControls_path", "=", "join", "(", "dirname", "(", "__file__", ")", ",", "\"js/OrbitControls.js\"", ")", "\n", "self", ".", "OBJLoader_path", "=", "join", "(", "dirname", "(", "__file__", ")", ",", "\"js/OBJLoader.js\"", ")", "\n", "self", ".", "MTLLoader_path", "=", "join", "(", "dirname", "(", "__file__", ")", ",", "\"js/MTLLoader.js\"", ")", "\n", "self", ".", "event_listener", "=", "[", "]", "\n", "self", ".", "added_mesh", "=", "[", "]", "\n", "self", ".", "html_path", "=", "html_path", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.MeshGenerator.make_header": [[55, 66], ["print", "open", "print", "js_file.read().replace", "js_file.read"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.read"], ["", "def", "make_header", "(", "self", ")", ":", "\n", "        ", "ret_str", "=", "\"\"", "\n", "js_libs", "=", "[", "self", ".", "three_path", ",", "self", ".", "Detector_path", ",", "self", ".", "OrbitControls_path", ",", "self", ".", "OBJLoader_path", ",", "\n", "self", ".", "MTLLoader_path", "]", "\n", "print", "(", "js_libs", ")", "\n", "for", "file", "in", "js_libs", ":", "\n", "            ", "with", "open", "(", "file", ",", "\"r\"", ")", "as", "js_file", ":", "\n", "                ", "print", "(", "file", ")", "\n", "ret_str", "+=", "\"  <script type=\\\"text/javascript\\\">\\n  \"", "+", "js_file", ".", "read", "(", ")", ".", "replace", "(", "\"\\n\"", ",", "\n", "\"\\n  \"", ")", "+", "\" \\n</script>\\n\"", "\n", "", "", "return", "ret_str", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.MeshGenerator.make_mesh": [[67, 149], ["init_function.replace().replace.replace().replace.replace().replace", "MeshGenerator.MeshGenerator.added_mesh.append", "init_function.replace().replace.replace().replace.replace", "str", "str"], "methods", ["None"], ["", "def", "make_mesh", "(", "self", ",", "mesh_path", ",", "title", "=", "None", ")", ":", "\n", "\n", "# mesh_path = abspath(join(getcwd(), mesh_path))", "\n", "# mesh_path = relpath(mesh_path, dirname(self.html_path))", "\n", "        ", "out_string", "=", "f\"<div id=\\\"mesh_{self.curve_it}\\\"> <h4>{title}</h4> </div>\\n\"", "\n", "\n", "out_string", "+=", "\"     <script>\\n\"", "\n", "out_string", "+=", "\"     if (!Detector.webgl) {\\nDetector.addGetWebGLMessage();\\n}\\n\"", "\n", "init_function", "=", "\"\"", "\n", "init_function", "+=", "\"     var my_mesh;\\nvar objLoader_my_mesh;\\n\"", "\n", "init_function", "+=", "\"     var camera_my_mesh, controls_my_mesh, scene_my_mesh, renderer_my_mesh;\\n\"", "\n", "init_function", "+=", "\"     var lighting, ambient, keyLight_my_mesh, fillLight_my_mesh, backLight_my_mesh;\\n\"", "\n", "init_function", "+=", "\"     var windowX = 400;\\nvar windowY = 250;\\n\"", "\n", "init_function", "+=", "\"     init_my_mesh();\\nanimate_my_mesh();\\n\"", "\n", "\n", "init_function", "+=", "\"\\n\\\n            function init_my_mesh() {\\n\\\n                my_mesh = document.getElementById('my_mesh');\\n\\\n                /* Camera */\\n\\\n                camera_my_mesh = new THREE.PerspectiveCamera(10, 1, 0.1, 2500);\\n\\\n                camera_my_mesh.position.set( 5, 5, -10 );\\n\\\n                /* Scene */\\n\\\n                scene_my_mesh = new THREE.Scene();\\n\\\n                lighting = true;\\n\\\n                ambient_my_mesh = new THREE.AmbientLight(0xffffff, 0.15);\\n\\\n                scene_my_mesh.add(ambient_my_mesh);\\n\\\n                keyLight_my_mesh = new THREE.DirectionalLight(0xffffff, 0.15);\\n\\\n                keyLight_my_mesh.position.set(-100, 0, 100);\\n\\\n                fillLight_my_mesh = new THREE.DirectionalLight(0xffffff, 0.15);\\n\\\n                fillLight_my_mesh.position.set(100, 0, 100);\\n\\\n                fillLight1_my_mesh = new THREE.DirectionalLight(0xffffff, 0.15);\\n\\\n                fillLight2_my_mesh = new THREE.DirectionalLight(0xffffff, 0.15);\\n\\\n                fillLight3_my_mesh = new THREE.DirectionalLight(0xffffff, 0.15);\\n\\\n                fillLight4_my_mesh = new THREE.DirectionalLight(0xffffff, 0.15);\\n\\\n                backLight_my_mesh = new THREE.DirectionalLight(0xffffff, 1.0);\\n\\\n                backLight_my_mesh.position.set(100, 0, -100).normalize();\\n\\\n                scene_my_mesh.position.set( -0.25,-0.25,0 );\\n\\\n                scene_my_mesh.add(keyLight_my_mesh, fillLight_my_mesh, backLight_my_mesh , fillLight1_my_mesh, fillLight2_my_mesh, fillLight3_my_mesh, fillLight4_my_mesh);\\n\\\n                /* Model */\\n\\\n                objLoader_my_mesh = new THREE.OBJLoader();\\n\\\n                objLoader_my_mesh.load('output_atlas.obj', function (object) {\\n\\\n                    object.name = 'object';\\n\\\n                    scene_my_mesh.add(object);\\n\\\n                });\\n\\\n                /* Renderer */\\n\\\n                renderer_my_mesh = new THREE.WebGLRenderer();\\n\\\n                renderer_my_mesh.setPixelRatio(window.devicePixelRatio);\\n\\\n                renderer_my_mesh.setSize(windowX, windowY);\\n\\\n                renderer_my_mesh.setClearColor(new THREE.Color(\\\"#D3D3D3\\\"));\\n\\\n                my_mesh.appendChild(renderer_my_mesh.domElement);\\n\\\n                /* Controls */\\n\\\n                controls_my_mesh = new THREE.OrbitControls(camera_my_mesh, renderer_my_mesh.domElement);\\n\\\n                controls_my_mesh.enableDamping = true;\\n\\\n                controls_my_mesh.dampingFactor = 0.25;\\n\\\n                controls_my_mesh.enableZoom = false;\\n\\\n                /* Events */\\n\\\n                }\\\n                \"", "\n", "\n", "init_function", "+=", "\"\\n\\\n            function animate_my_mesh() {\\n\\\n                requestAnimationFrame(animate_my_mesh);\\n\\\n                controls_my_mesh.update();\\n\\\n                render_my_mesh();\\n\\\n                }\\n\\\n            \"", "\n", "\n", "init_function", "+=", "\"\\n\\\n            function render_my_mesh() {\\n\\\n                renderer_my_mesh.render(scene_my_mesh, camera_my_mesh);\\n\\\n                }\\n\\\n             \"", "\n", "\n", "init_function", "=", "init_function", ".", "replace", "(", "\"my_mesh\"", ",", "\"mesh_\"", "+", "str", "(", "self", ".", "curve_it", ")", ")", ".", "replace", "(", "'output_atlas.obj'", ",", "mesh_path", ")", "\n", "self", ".", "added_mesh", ".", "append", "(", "\"mesh_\"", "+", "str", "(", "self", ".", "curve_it", ")", ")", "\n", "out_string", "+=", "init_function", "\n", "\n", "out_string", "+=", "\"</script>\\n\"", "\n", "\n", "self", ".", "curve_it", "+=", "1", "\n", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.MeshGenerator.make_onWindowResize": [[150, 168], ["MeshGenerator.MeshGenerator.event_listener.append", "MeshGenerator.MeshGenerator.event_listener.append", "local_str.replace"], "methods", ["None"], ["", "def", "make_onWindowResize", "(", "self", ")", ":", "\n", "        ", "self", ".", "event_listener", ".", "append", "(", "\"\\\n            window.addEventListener('resize', onWindowResize, false);\\n\\\n            window.addEventListener('keydown', onKeyboardEvent, false);\\n\\\n            \\n\\\n            \"", ")", "\n", "\n", "onWindowResize", "=", "\"\\n\\\n                function onWindowResize() {\\n\\\n                 \"", "\n", "\n", "for", "mesh_id", "in", "self", ".", "added_mesh", ":", "\n", "            ", "local_str", "=", "f\"camera_my_mesh.aspect = windowX / windowY;\\n\\\n                    camera_my_mesh.updateProjectionMatrix();\\n\\\n                    renderer_my_mesh.setSize(windowX, windowY);\\n \"", "\n", "onWindowResize", "+=", "local_str", ".", "replace", "(", "\"my_mesh\"", ",", "mesh_id", ")", "\n", "", "onWindowResize", "+=", "\" }\\n \"", "\n", "self", ".", "event_listener", ".", "append", "(", "onWindowResize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.MeshGenerator.make_init_function": [[169, 207], ["MeshGenerator.MeshGenerator.event_listener.append", "local_str.replace", "local_str.replace"], "methods", ["None"], ["", "def", "make_init_function", "(", "self", ")", ":", "\n", "        ", "init_function", "=", "\"\\n\\\n            function onKeyboardEvent(e) {\\n\\\n                if (e.code === 'KeyL') {\\n\\\n                    lighting = !lighting;\\n\\\n                    if (lighting) {\\n\\\n                \"", "\n", "\n", "for", "mesh_id", "in", "self", ".", "added_mesh", ":", "\n", "            ", "local_str", "=", "\"ambient_my_mesh.intensity = 0.25;\\n\\\n                        scene_my_mesh.add(keyLight_my_mesh);\\n\\\n                        scene_my_mesh.add(fillLight_my_mesh);\\n\\\n                        scene_my_mesh.add(fillLight1_my_mesh);\\n\\\n                        scene_my_mesh.add(fillLight2_my_mesh);\\n\\\n                        scene_my_mesh.add(fillLight3_my_mesh);\\n\\\n                        scene_my_mesh.add(fillLight4_my_mesh);\\n\\\n                        scene_my_mesh.add(backLight_my_mesh);\\n\"", "\n", "init_function", "+=", "local_str", ".", "replace", "(", "\"my_mesh\"", ",", "mesh_id", ")", "\n", "\n", "", "init_function", "+=", "\" } else {\\n\\\n                    \"", "\n", "\n", "for", "mesh_id", "in", "self", ".", "added_mesh", ":", "\n", "            ", "local_str", "=", "\"ambient_my_mesh.intensity = 1.0;\\n\\\n                        scene_my_mesh.remove(keyLight_my_mesh);\\n\\\n                        scene_my_mesh.remove(fillLight_my_mesh);\\n\\\n                        scene_my_mesh.remove(fillLight1_my_mesh);\\n\\\n                        scene_my_mesh.remove(fillLight2_my_mesh);\\n\\\n                        scene_my_mesh.remove(fillLight3_my_mesh);\\n\\\n                        scene_my_mesh.remove(fillLight4_my_mesh);\\n\\\n                        scene_my_mesh.remove(backLight_my_mesh);\\n\"", "\n", "init_function", "+=", "local_str", ".", "replace", "(", "\"my_mesh\"", ",", "mesh_id", ")", "\n", "\n", "", "init_function", "+=", "\"        }\\n\\\n                }\\n\\\n                }\\n\\\n            \"", "\n", "self", ".", "event_listener", ".", "append", "(", "init_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.MeshGenerator.end_mesh": [[208, 219], ["MeshGenerator.MeshGenerator.event_listener.append", "MeshGenerator.MeshGenerator.make_onWindowResize", "MeshGenerator.MeshGenerator.make_init_function", "MeshGenerator.MeshGenerator.event_listener.append"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.MeshGenerator.make_onWindowResize", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.MeshGenerator.MeshGenerator.make_init_function"], ["", "def", "end_mesh", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This function is safe to call as many time as one wants\n        :return:\n        \"\"\"", "\n", "self", ".", "event_listener", "=", "[", "]", "\n", "self", ".", "event_listener", ".", "append", "(", "\"<script>\\n\"", ")", "\n", "self", ".", "make_onWindowResize", "(", ")", "\n", "self", ".", "make_init_function", "(", ")", "\n", "self", ".", "event_listener", ".", "append", "(", "\"</script>\\n\"", ")", "\n", "return", "\"\"", ".", "join", "(", "self", ".", "event_listener", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.__init__": [[19, 29], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "title", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "columns", "=", "[", "]", "# 1st column contains the title", "\n", "self", ".", "rows", "=", "[", "]", "\n", "self", ".", "are_columns_fixed", "=", "False", "\n", "self", ".", "td_str", "=", "None", "\n", "self", ".", "td_str_bold", "=", "None", "\n", "self", ".", "td_row_title_str", "=", "None", "\n", "self", ".", "width_percentage", "=", "None", "\n", "self", ".", "row_title_weight", "=", "5.", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_column": [[30, 34], ["Table.Table.columns.append", "Table.TableException"], "methods", ["None"], ["", "def", "add_column", "(", "self", ",", "title", ")", ":", "\n", "        ", "if", "self", ".", "are_columns_fixed", ":", "\n", "            ", "raise", "TableException", "(", "\"You can't add a column after having added the first row!\"", ")", "\n", "", "self", ".", "columns", ".", "append", "(", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_columns": [[35, 39], ["Table.TableException"], "methods", ["None"], ["", "def", "add_columns", "(", "self", ",", "titles", ")", ":", "\n", "        ", "if", "self", ".", "are_columns_fixed", ":", "\n", "            ", "raise", "TableException", "(", "\"You can't add a column after having added the first row!\"", ")", "\n", "", "self", ".", "columns", "+=", "titles", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_titleless_columns": [[40, 44], ["Table.TableException", "str", "range", "len"], "methods", ["None"], ["", "def", "add_titleless_columns", "(", "self", ",", "number", ")", ":", "\n", "        ", "if", "self", ".", "are_columns_fixed", ":", "\n", "            ", "raise", "TableException", "(", "\"You can't add a column after having added the first row!\"", ")", "\n", "", "self", ".", "columns", "+=", "[", "str", "(", "i", "+", "len", "(", "self", ".", "columns", ")", "+", "1", ")", "for", "i", "in", "range", "(", "number", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.add_row": [[45, 61], ["range", "len", "len", "len", "Table.Table._make_td_str", "Table.Table.rows.append", "len", "len", "len", "str", "len", "len", "str", "len", "len", "len", "Table.Table._pretreat_data"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table._make_td_str", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table._pretreat_data"], ["", "def", "add_row", "(", "self", ",", "data", ",", "title", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "are_columns_fixed", "=", "True", "\n", "nb_rows_to_add", "=", "len", "(", "data", ")", "//", "len", "(", "self", ".", "columns", ")", "\n", "padding", "=", "(", "len", "(", "self", ".", "columns", ")", "-", "len", "(", "data", ")", "%", "len", "(", "self", ".", "columns", ")", ")", "%", "len", "(", "self", ".", "columns", ")", "\n", "if", "len", "(", "data", ")", "%", "len", "(", "self", ".", "columns", ")", "!=", "0", ":", "\n", "            ", "nb_rows_to_add", "+=", "1", "\n", "", "for", "i", "in", "range", "(", "nb_rows_to_add", ")", ":", "\n", "            ", "title_row", "=", "str", "(", "len", "(", "self", ".", "rows", ")", "+", "1", ")", "if", "title", "==", "\"\"", "else", "title", "\n", "self", ".", "_make_td_str", "(", ")", "\n", "row_str", "=", "f\"<tr>\\n{self.td_row_title_str}{title_row}</td>\\n{self.td_str}\"", "\n", "row_data", "=", "data", "[", "i", "*", "len", "(", "self", ".", "columns", ")", ":", "(", "i", "+", "1", ")", "*", "len", "(", "self", ".", "columns", ")", "]", "\n", "if", "i", "==", "nb_rows_to_add", "-", "1", ":", "\n", "                ", "row_data", "+=", "[", "\"\"", "]", "*", "padding", "\n", "", "row_str", "+=", "f\"</td>\\n{self.td_str}\"", ".", "join", "(", "[", "str", "(", "self", ".", "_pretreat_data", "(", "x", ")", ")", "for", "x", "in", "row_data", "]", ")", "\n", "row_str", "+=", "\"</td>\\n</tr>\\n\"", "\n", "self", ".", "rows", ".", "append", "(", "row_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table._pretreat_data": [[62, 67], ["type"], "methods", ["None"], ["", "", "def", "_pretreat_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "type", "(", "data", ")", "is", "Chart", ":", "\n", "            ", "data", ".", "width", "=", "f\"({data.width_factor*self.width_percentage*self.row_title_weight}\"", "f\"*window.innerWidth*0.01).toString() + \\\"px\\\"\"", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table._make_td_str": [[68, 73], ["float", "len"], "methods", ["None"], ["", "def", "_make_td_str", "(", "self", ")", ":", "\n", "        ", "self", ".", "width_percentage", "=", "100.", "/", "float", "(", "len", "(", "self", ".", "columns", ")", "*", "self", ".", "row_title_weight", "+", "1", ")", "\n", "self", ".", "td_str", "=", "f\"<td align=\\\"center\\\" width=\\\"{self.row_title_weight * self.width_percentage}%\\\">\"", "\n", "self", ".", "td_row_title_str", "=", "f\"<td style=\\\"font-weight: bold;\\\" align=\\\"center\\\" width=\\\"{self.width_percentage}%\\\">\"", "\n", "self", ".", "td_str_bold", "=", "f\"<td style=\\\"font-weight: bold;\\\" align=\\\"center\\\" width=\\\"{self.width_percentage}%\\\">\"", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table.__str__": [[74, 85], ["Table.Table._make_td_str"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.Table.Table._make_td_str"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_make_td_str", "(", ")", "\n", "data", "=", "\"<table width=100%>\\n\"", "\n", "# Columns titles", "\n", "data", "+=", "f\"<tr>\\n{self.td_row_title_str}{self.title}</td>\\n{self.td_str_bold}\"", "\n", "data", "+=", "f\"</td>\\n{self.td_str_bold}\"", ".", "join", "(", "[", "x", "for", "x", "in", "self", ".", "columns", "]", ")", "\n", "data", "+=", "\"</td>\\n</tr>\\n\"", "\n", "# Rows", "\n", "data", "+=", "\"\\n\"", ".", "join", "(", "self", ".", "rows", ")", "\n", "data", "+=", "\"</table>\\n\"", "\n", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ChartGenerator.Chart.__init__": [[5, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "\n", "font_color", "=", "\"white\"", ",", "\n", "chart_type", "=", "\"line\"", ",", "\n", "title", "=", "None", ",", "\n", "width_factor", "=", "1", ",", "\n", "x_labels", "=", "None", ",", "\n", "chart_it", "=", "0", ")", ":", "\n", "\n", "        ", "self", ".", "chart_type", "=", "chart_type", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "font_color", "=", "font_color", "\n", "self", ".", "title", "=", "title", "\n", "self", ".", "width_factor", "=", "width_factor", "\n", "self", ".", "width", "=", "f\"(window.innerWidth*{width_factor}).toString() + \\\"px\\\"\"", "\n", "self", ".", "x_labels", "=", "x_labels", "\n", "self", ".", "chart_it", "=", "chart_it", "\n", "self", ".", "instance_number", "=", "0", "\n", "self", ".", "colors", "=", "[", "\"#c0392b\"", ",", "\"#2980b9\"", ",", "\"#27ae60\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ChartGenerator.Chart.__str__": [[24, 76], ["str", "ChartGenerator.Chart.data.items", "min", "max", "min", "max", "str", "y_vals.append", "enumerate", "range", "min", "max", "ChartGenerator.Chart.data.items", "len", "ChartGenerator.Chart.data.items", "ChartGenerator.Chart.data.items", "range", "len", "len", "len", "ChartGenerator.Chart.data.keys", "ChartGenerator.Chart.data.keys"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "chart_type", "==", "\"scatter\"", ":", "\n", "            ", "y_vals", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "data", ".", "items", "(", ")", ":", "\n", "                ", "for", "xy", "in", "v", ":", "\n", "                    ", "y_vals", ".", "append", "(", "xy", "[", "'y'", "]", ")", "\n", "\n", "", "", "mini", ",", "maxi", "=", "min", "(", "y_vals", ")", ",", "max", "(", "y_vals", ")", "\n", "\n", "", "else", ":", "\n", "            ", "mini", ",", "maxi", "=", "min", "(", "[", "min", "(", "v", ")", "for", "k", ",", "v", "in", "self", ".", "data", ".", "items", "(", ")", "]", ")", ",", "max", "(", "[", "max", "(", "v", ")", "for", "k", ",", "v", "in", "self", ".", "data", ".", "items", "(", ")", "]", ")", "\n", "if", "self", ".", "chart_type", "==", "\"bar\"", ":", "\n", "                ", "mini", "=", "0", "\n", "\n", "", "", "self", ".", "instance_number", "+=", "1", "\n", "out_string", "=", "\"\"", "\n", "\n", "data_real_dict", "=", "{", "\"type\"", ":", "f\"{self.chart_type}\"", ",", "\n", "\"datasets\"", ":", "[", "{", "\"data\"", ":", "v", ",", "'label'", ":", "k", ",", "\"lineTension\"", ":", "0", ",", "\n", "\"xLabels\"", ":", "[", "x", "+", "1", "for", "x", "in", "\n", "range", "(", "len", "(", "self", ".", "data", "[", "[", "x", "for", "x", "in", "self", ".", "data", ".", "keys", "(", ")", "]", "[", "0", "]", "]", ")", ")", "]", ",", "\n", "'borderColor'", ":", "self", ".", "colors", "[", "i", "%", "len", "(", "self", ".", "colors", ")", "]", ",", "\n", "'backgroundColor'", ":", "self", ".", "colors", "[", "(", "i", "+", "(", "self", ".", "chart_type", "!=", "\"line\"", ")", "*", "1", ")", "%", "len", "(", "self", ".", "colors", ")", "]", ",", "\n", "'borderWidth'", ":", "1", ",", "\n", "}", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "self", ".", "data", ".", "items", "(", ")", ")", "]", "}", "\n", "if", "self", ".", "x_labels", "is", "None", ":", "\n", "            ", "data_real_dict", "[", "\"labels\"", "]", "=", "[", "x", "+", "1", "for", "x", "in", "range", "(", "len", "(", "self", ".", "data", "[", "[", "x", "for", "x", "in", "self", ".", "data", ".", "keys", "(", ")", "]", "[", "0", "]", "]", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "data_real_dict", "[", "\"labels\"", "]", "=", "self", ".", "x_labels", "\n", "", "scales_dict", "=", "{", "\"yAxes\"", ":", "[", "{", "\"display\"", ":", "\"true\"", ",", "\n", "\"ticks\"", ":", "{", "\"fontColor\"", ":", "self", ".", "font_color", ",", "\"suggestedMin\"", ":", "mini", ",", "\"suggestedMax\"", ":", "maxi", "}", "}", "]", ",", "\n", "\"xAxes\"", ":", "[", "{", "\"ticks\"", ":", "{", "\"autoSkip\"", ":", "'false'", ",", "\"fontColor\"", ":", "self", ".", "font_color", "}", "}", "]", "}", "\n", "options_dict", "=", "{", "\"scales\"", ":", "scales_dict", ",", "\"legend\"", ":", "{", "\"labels\"", ":", "{", "\"fontColor\"", ":", "self", ".", "font_color", "}", "}", "}", "\n", "if", "self", ".", "title", "is", "not", "None", ":", "\n", "            ", "options_dict", "[", "\"title\"", "]", "=", "{", "\"display\"", ":", "\"false\"", ",", "\"text\"", ":", "self", ".", "title", ",", "\"fontColor\"", ":", "self", ".", "font_color", "}", "\n", "", "options", "=", "str", "(", "options_dict", ")", "\n", "out_string", "+=", "\"  <canvas id=\\\"line-chart-%i-%i\\\"></canvas>\\n\"", "%", "(", "self", ".", "chart_it", ",", "self", ".", "instance_number", ")", "\n", "ctx", "=", "f\"document.getElementById(\\\"line-chart-{self.chart_it}-{self.instance_number}\\\")\"", "\n", "out_string", "+=", "\"  <script>\\n\"", "\n", "out_string", "+=", "f\"    {ctx}.parentNode.style.maxWidth = {self.width};\\n\"", "\n", "if", "self", ".", "chart_type", "==", "\"scatter\"", ":", "\n", "            ", "isScatter", "=", "\".Scatter\"", "\n", "", "else", ":", "\n", "            ", "isScatter", "=", "\"\"", "\n", "", "out_string", "+=", "f\"    var myLineChart = new Chart{isScatter}({ctx}, {'{'}type: '{self.chart_type}', data: {str(data_real_dict)}, options: {options} {'}'});\\n\"", "\n", "# out_string += \"    var myLineChart = new Chart(%s, {type: 'line', data: %s, options: %s});\\n\" % \\", "\n", "#               (ctx, str(data_real_dict), options)", "\n", "out_string", "+=", "\"  </script>\\n\"", "\n", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ChartGenerator.ChartGenerator.__init__": [[79, 82], ["os.path.join", "os.path.dirname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "chart_it", "=", "0", "\n", "self", ".", "chart_path", "=", "join", "(", "dirname", "(", "__file__", ")", ",", "\"js/Chart.bundle.min.js\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ChartGenerator.ChartGenerator.make_header": [[83, 88], ["open", "charjs_file.read().replace", "charjs_file.read"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.read"], ["", "def", "make_header", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "chart_path", ",", "\"r\"", ")", "as", "charjs_file", ":", "\n", "            ", "ret_str", "=", "\"  <script type=\\\"text/javascript\\\">\\n  \"", "+", "charjs_file", ".", "read", "(", ")", ".", "replace", "(", "\"\\n\"", ",", "\"\\n  \"", ")", "\n", "ret_str", "+=", "\"Chart.defaults.global.elements.line.fill = false;\\n  </script>\\n\"", "\n", "return", "ret_str", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.ChartGenerator.ChartGenerator.make_chart": [[89, 97], ["ChartGenerator.Chart"], "methods", ["None"], ["", "", "def", "make_chart", "(", "self", ",", "data", ",", "\n", "font_color", "=", "\"white\"", ",", "\n", "chart_type", "=", "\"line\"", ",", "\n", "title", "=", "None", ",", "\n", "width_factor", "=", "1.", ",", "\n", "x_labels", "=", "None", ")", ":", "\n", "        ", "self", ".", "chart_it", "+=", "1", "\n", "return", "Chart", "(", "data", ",", "font_color", ",", "chart_type", ",", "title", ",", "width_factor", ",", "x_labels", ",", "self", ".", "chart_it", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.ColorMap.__init__": [[13, 16], ["os.join", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "colormap_path", "=", "osp", ".", "join", "(", "parent_dir", ",", "\"auxiliary/colormap.npy\"", ")", "\n", "self", ".", "colormap", "=", "(", "np", ".", "load", "(", "self", ".", "colormap_path", ")", "*", "255", ")", ".", "astype", "(", "'int'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.ColorMap.__call__": [[17, 24], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        :param value: a float\n        :return:\n        \"\"\"", "\n", "colors", "=", "self", ".", "colormap", "[", "index", "]", "\n", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save": [[26, 40], ["pymesh.save_mesh", "mesh.get_attribute", "mesh.get_attribute.max", "mesh.add_attribute", "mesh.add_attribute", "mesh.add_attribute", "mesh.set_attribute", "mesh.set_attribute", "mesh.set_attribute", "mesh.get_attribute_names", "mesh.get_attribute.max"], "function", ["None"], ["", "", "def", "save", "(", "mesh", ",", "path", ",", "colormap", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "vertex_sources", "=", "mesh", ".", "get_attribute", "(", "\"vertex_sources\"", ")", "# batch, nb_prim, num_point, 3", "\n", "if", "vertex_sources", ".", "max", "(", ")", ">", "0", ":", "\n", "            ", "vertex_sources", "=", "(", "255", "*", "(", "vertex_sources", "/", "vertex_sources", ".", "max", "(", ")", ")", ")", ".", "astype", "(", "'int'", ")", "\n", "mesh", ".", "add_attribute", "(", "\"vertex_red\"", ")", "\n", "mesh", ".", "add_attribute", "(", "\"vertex_green\"", ")", "\n", "mesh", ".", "add_attribute", "(", "\"vertex_blue\"", ")", "\n", "mesh", ".", "set_attribute", "(", "\"vertex_red\"", ",", "colormap", ".", "colormap", "[", "vertex_sources", "]", "[", ":", ",", "0", "]", ")", "\n", "mesh", ".", "set_attribute", "(", "\"vertex_green\"", ",", "colormap", ".", "colormap", "[", "vertex_sources", "]", "[", ":", ",", "1", "]", ")", "\n", "mesh", ".", "set_attribute", "(", "\"vertex_blue\"", ",", "colormap", ".", "colormap", "[", "vertex_sources", "]", "[", ":", ",", "2", "]", ")", "\n", "", "", "except", ":", "\n", "        ", "pass", "\n", "", "pymesh", ".", "save_mesh", "(", "path", "[", ":", "-", "3", "]", "+", "\"ply\"", ",", "mesh", ",", "*", "mesh", ".", "get_attribute_names", "(", ")", ",", "ascii", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.trainer_dataset.TrainerDataset.__init__": [[24, 26], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TrainerDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.trainer_dataset.TrainerDataset.build_dataset": [[27, 83], ["easydict.EasyDict", "transfer.ShapeNet", "transfer.ShapeNet", "transfer.ShapeNet", "transfer.ShapeNet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "transfer.Augmenter", "transfer.Augmenter", "len", "len", "transfer.ShapeNet", "transfer.ShapeNet", "torch.utils.data.DataLoader", "len", "transfer.ShapeNet", "transfer.ShapeNet", "torch.utils.data.DataLoader", "len", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "build_dataset", "(", "self", ",", "test_pc", "=", "None", ",", "shuffle_test", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Create dataset\n        Author: Thibault Groueix 01.11.2019\n        \"\"\"", "\n", "\n", "self", ".", "datasets", "=", "EasyDict", "(", ")", "\n", "# Create Datasets", "\n", "if", "self", ".", "opt", ".", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "datasets", ".", "dataset_train", "=", "dataset_shapenet", ".", "ShapeNet", "(", "self", ".", "opt", ",", "mode", "=", "'train'", ")", "\n", "self", ".", "datasets", ".", "dataset_test", "=", "dataset_shapenet", ".", "ShapeNet", "(", "self", ".", "opt", ",", "mode", "=", "'eval'", ")", "\n", "\n", "if", "not", "self", ".", "opt", ".", "demo", ":", "\n", "# Create dataloaders", "\n", "                ", "self", ".", "datasets", ".", "dataloader_train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "datasets", ".", "dataset_train", ",", "\n", "batch_size", "=", "self", ".", "opt", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "int", "(", "self", ".", "opt", ".", "workers", ")", ")", "\n", "self", ".", "datasets", ".", "dataloader_test", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "datasets", ".", "dataset_test", ",", "\n", "batch_size", "=", "self", ".", "opt", ".", "batch_size_test", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "int", "(", "self", ".", "opt", ".", "workers", ")", ")", "\n", "axis", "=", "[", "]", "\n", "if", "self", ".", "opt", ".", "data_augmentation_axis_rotation", ":", "\n", "                    ", "axis", "=", "[", "1", "]", "\n", "\n", "", "flips", "=", "[", "]", "\n", "if", "self", ".", "opt", ".", "data_augmentation_random_flips", ":", "\n", "                    ", "flips", "=", "[", "0", ",", "2", "]", "\n", "\n", "# Create Data Augmentation", "\n", "", "self", ".", "datasets", ".", "data_augmenter", "=", "augmenter", ".", "Augmenter", "(", "translation", "=", "self", ".", "opt", ".", "random_translation", ",", "\n", "rotation_axis", "=", "axis", ",", "\n", "anisotropic_scaling", "=", "self", ".", "opt", ".", "anisotropic_scaling", ",", "\n", "rotation_3D", "=", "self", ".", "opt", ".", "random_rotation", ",", "\n", "flips", "=", "flips", ")", "\n", "\n", "self", ".", "datasets", ".", "len_dataset", "=", "len", "(", "self", ".", "datasets", ".", "dataset_train", ")", "\n", "self", ".", "datasets", ".", "len_dataset_test", "=", "len", "(", "self", ".", "datasets", ".", "dataset_test", ")", "\n", "", "", "elif", "self", ".", "opt", ".", "mode", "==", "'test'", ":", "\n", "            ", "if", "test_pc", "is", "None", ":", "\n", "                ", "self", ".", "datasets", ".", "dataset_test", "=", "dataset_shapenet", ".", "ShapeNet", "(", "self", ".", "opt", ",", "mode", "=", "'test'", ")", "\n", "\n", "self", ".", "datasets", ".", "dataloader_test", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "datasets", ".", "dataset_test", ",", "\n", "batch_size", "=", "self", ".", "opt", ".", "batch_size_test", ",", "\n", "shuffle", "=", "shuffle_test", ",", "\n", "num_workers", "=", "int", "(", "self", ".", "opt", ".", "workers", ")", ")", "\n", "\n", "self", ".", "datasets", ".", "len_dataset_test", "=", "len", "(", "self", ".", "datasets", ".", "dataset_test", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "datasets", ".", "dataset_test", "=", "dataset_shapenet", ".", "ShapeNet", "(", "self", ".", "opt", ",", "mode", "=", "'test'", ",", "test_pc", "=", "test_pc", ")", "\n", "\n", "self", ".", "datasets", ".", "dataloader_test", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "datasets", ".", "dataset_test", ",", "\n", "batch_size", "=", "self", ".", "opt", ".", "batch_size_test", ",", "\n", "shuffle", "=", "shuffle_test", ",", "\n", "num_workers", "=", "int", "(", "self", ".", "opt", ".", "workers", ")", ")", "\n", "self", ".", "datasets", ".", "len_dataset_test", "=", "len", "(", "self", ".", "datasets", ".", "dataset_test", ".", "data_points", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.FunctionGenerator.invert": [[15, 17], ["print"], "methods", ["None"], ["    ", "def", "invert", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"This function has to be reimplemented in every inherited class\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.ScaleFunctions.__init__": [[20, 23], ["operator.clone"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "operator", ",", "inplace", ")", ":", "\n", "        ", "self", ".", "operator", "=", "operator", ".", "clone", "(", ")", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.ScaleFunctions.__call__": [[24, 30], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "points", ")", ":", "\n", "        ", "if", "self", ".", "inplace", ":", "\n", "            ", "points", "*=", "self", ".", "operator", "\n", "return", "points", "\n", "", "else", ":", "\n", "            ", "return", "points", "*", "self", ".", "operator", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.ScaleFunctions.invert": [[31, 33], ["None"], "methods", ["None"], ["", "", "def", "invert", "(", "self", ")", ":", "\n", "        ", "self", ".", "operator", "=", "1.0", "/", "self", ".", "operator", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.RotationFunctions.__init__": [[36, 41], ["operator.clone", "pointcloud_processor.RotationFunctions.operator.bmm().sum().item", "operator.size", "operator.size", "pointcloud_processor.RotationFunctions.operator.bmm().sum", "pointcloud_processor.RotationFunctions.operator.bmm", "pointcloud_processor.RotationFunctions.operator.transpose().contiguous", "pointcloud_processor.RotationFunctions.operator.transpose"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "operator", ",", "inplace", ")", ":", "\n", "        ", "self", ".", "operator", "=", "operator", ".", "clone", "(", ")", "\n", "self", ".", "inplace", "=", "inplace", "\n", "assert", "(", "self", ".", "operator", ".", "bmm", "(", "self", ".", "operator", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "-", "(", "\n", "operator", ".", "size", "(", "0", ")", "*", "operator", ".", "size", "(", "2", ")", ")", ")", "**", "2", "<", "0.001", ",", "\"Input matrix is not a rotation matrix\"", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.RotationFunctions.__call__": [[42, 48], ["torch.bmm", "points.copy_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "points", ")", ":", "\n", "        ", "rotated_points", "=", "torch", ".", "bmm", "(", "points", ",", "self", ".", "operator", ")", "\n", "if", "self", ".", "inplace", ":", "\n", "            ", "points", ".", "copy_", "(", "rotated_points", ")", "\n", "return", "points", "\n", "", "return", "rotated_points", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.RotationFunctions.invert": [[49, 51], ["pointcloud_processor.RotationFunctions.operator.transpose().contiguous", "pointcloud_processor.RotationFunctions.operator.transpose"], "methods", ["None"], ["", "def", "invert", "(", "self", ")", ":", "\n", "        ", "self", ".", "operator", "=", "self", ".", "operator", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.TranslationFunctions.__init__": [[54, 57], ["operator.clone"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "operator", ",", "inplace", ")", ":", "\n", "        ", "self", ".", "operator", "=", "operator", ".", "clone", "(", ")", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.TranslationFunctions.__call__": [[58, 64], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "points", ")", ":", "\n", "        ", "if", "self", ".", "inplace", ":", "\n", "            ", "points", "+=", "self", ".", "operator", "\n", "return", "points", "\n", "", "else", ":", "\n", "            ", "return", "points", "+", "self", ".", "operator", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.TranslationFunctions.invert": [[65, 67], ["None"], "methods", ["None"], ["", "", "def", "invert", "(", "self", ")", ":", "\n", "        ", "self", ".", "operator", "=", "-", "self", ".", "operator", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.__init__": [[70, 91], ["points.dim", "pointcloud_processor.Operation.points.type", "pointcloud_processor.Operation.points.clone", "pointcloud_processor.Operation.points.unsqueeze_", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "points", ",", "inplace", "=", "True", ",", "keep_track", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        The keep track boolean is used in case one wants to unroll all the operation that have been performed\n        :param keep_track: boolean\n        \"\"\"", "\n", "self", ".", "keep_track", "=", "keep_track", "\n", "self", ".", "transforms", "=", "[", "]", "\n", "self", ".", "points", "=", "points", "\n", "self", ".", "device", "=", "points", ".", "device", "\n", "self", ".", "inplace", "=", "inplace", "\n", "self", ".", "dim", "=", "points", ".", "dim", "(", ")", "\n", "self", ".", "type", "=", "self", ".", "points", ".", "type", "(", ")", "\n", "\n", "if", "not", "self", ".", "inplace", ":", "\n", "            ", "self", ".", "points", "=", "self", ".", "points", ".", "clone", "(", ")", "\n", "", "if", "self", ".", "dim", "==", "2", ":", "\n", "            ", "self", ".", "points", "=", "self", ".", "points", ".", "unsqueeze_", "(", "0", ")", "\n", "", "elif", "self", ".", "dim", "==", "3", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Input should have dimension 2 or 3\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.apply": [[92, 96], ["func"], "methods", ["None"], ["", "", "def", "apply", "(", "self", ",", "points", ")", ":", "\n", "        ", "for", "func", "in", "self", ".", "transforms", ":", "\n", "            ", "points", "=", "func", "(", "points", ")", "\n", "", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.invert": [[97, 101], ["pointcloud_processor.Operation.transforms.reverse", "func.invert"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.invert"], ["", "def", "invert", "(", "self", ")", ":", "\n", "        ", "self", ".", "transforms", ".", "reverse", "(", ")", "\n", "for", "func", "in", "self", ".", "transforms", ":", "\n", "            ", "func", ".", "invert", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.scale": [[102, 108], ["pointcloud_processor.ScaleFunctions", "ScaleFunctions.", "scale_vector.to().type", "pointcloud_processor.Operation.transforms.append", "scale_vector.to"], "methods", ["None"], ["", "", "def", "scale", "(", "self", ",", "scale_vector", ")", ":", "\n", "        ", "scaling_op", "=", "ScaleFunctions", "(", "scale_vector", ".", "to", "(", "self", ".", "device", ")", ".", "type", "(", "self", ".", "type", ")", ",", "inplace", "=", "self", ".", "inplace", ")", "\n", "self", ".", "points", "=", "scaling_op", "(", "self", ".", "points", ")", "\n", "if", "self", ".", "keep_track", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "scaling_op", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.translate": [[109, 115], ["pointcloud_processor.TranslationFunctions", "TranslationFunctions.", "translation_vector.to().type", "pointcloud_processor.Operation.transforms.append", "translation_vector.to"], "methods", ["None"], ["", "def", "translate", "(", "self", ",", "translation_vector", ")", ":", "\n", "        ", "translation_op", "=", "TranslationFunctions", "(", "translation_vector", ".", "to", "(", "self", ".", "device", ")", ".", "type", "(", "self", ".", "type", ")", ",", "inplace", "=", "self", ".", "inplace", ")", "\n", "self", ".", "points", "=", "translation_op", "(", "self", ".", "points", ")", "\n", "if", "self", ".", "keep_track", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "translation_op", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.rotate": [[116, 122], ["pointcloud_processor.RotationFunctions", "RotationFunctions.", "rotation_vector.to().type", "pointcloud_processor.Operation.transforms.append", "rotation_vector.to"], "methods", ["None"], ["", "def", "rotate", "(", "self", ",", "rotation_vector", ")", ":", "\n", "        ", "rotation_op", "=", "RotationFunctions", "(", "rotation_vector", ".", "to", "(", "self", ".", "device", ")", ".", "type", "(", "self", ".", "type", ")", ",", "inplace", "=", "self", ".", "inplace", ")", "\n", "self", ".", "points", "=", "rotation_op", "(", "self", ".", "points", ")", "\n", "if", "self", ".", "keep_track", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "rotation_op", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.get_3D_rot_matrix": [[123, 144], ["torch.cos", "torch.sin", "torch.zeros", "rotation_matrix[].fill_", "rotation_matrix[].copy_", "rotation_matrix[].copy_", "rotation_matrix[].copy_", "rotation_matrix[].copy_", "rad_angle.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_3D_rot_matrix", "(", "axis", ",", "rad_angle", ")", ":", "\n", "        ", "\"\"\"\n        Get a 3D rotation matrix around axis with angle in radian\n        :param axis: int\n        :param angle: torch.tensor of size Batch.\n        :return: Rotation Matrix as a tensor\n        \"\"\"", "\n", "cos_angle", "=", "torch", ".", "cos", "(", "rad_angle", ")", "\n", "sin_angle", "=", "torch", ".", "sin", "(", "rad_angle", ")", "\n", "rotation_matrix", "=", "torch", ".", "zeros", "(", "rad_angle", ".", "size", "(", "0", ")", ",", "3", ",", "3", ")", "\n", "rotation_matrix", "[", ":", ",", "1", ",", "1", "]", ".", "fill_", "(", "1", ")", "\n", "rotation_matrix", "[", ":", ",", "0", ",", "0", "]", ".", "copy_", "(", "cos_angle", ")", "\n", "rotation_matrix", "[", ":", ",", "0", ",", "2", "]", ".", "copy_", "(", "sin_angle", ")", "\n", "rotation_matrix", "[", ":", ",", "2", ",", "0", "]", ".", "copy_", "(", "-", "sin_angle", ")", "\n", "rotation_matrix", "[", ":", ",", "2", ",", "2", "]", ".", "copy_", "(", "cos_angle", ")", "\n", "if", "axis", "==", "0", ":", "\n", "            ", "rotation_matrix", "=", "rotation_matrix", "[", ":", ",", "[", "1", ",", "0", ",", "2", "]", ",", ":", "]", "[", ":", ",", ":", ",", "[", "1", ",", "0", ",", "2", "]", "]", "\n", "", "if", "axis", "==", "2", ":", "\n", "            ", "rotation_matrix", "=", "rotation_matrix", "[", ":", ",", "[", "0", ",", "2", ",", "1", "]", ",", ":", "]", "[", ":", ",", ":", ",", "[", "0", ",", "2", ",", "1", "]", "]", "\n", "", "return", "rotation_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.rotate_axis_angle": [[145, 158], ["pointcloud_processor.Operation.get_3D_rot_matrix", "pointcloud_processor.Operation.rotate", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.get_3D_rot_matrix", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.rotate"], ["", "def", "rotate_axis_angle", "(", "self", ",", "axis", ",", "rad_angle", ",", "normals", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param points: Batched points\n        :param axis: int\n        :param angle: batched angles\n        :return:\n        \"\"\"", "\n", "rot_matrix", "=", "Operation", ".", "get_3D_rot_matrix", "(", "axis", "=", "axis", ",", "rad_angle", "=", "rad_angle", ")", "\n", "if", "normals", ":", "\n", "            ", "rot_matrix", "=", "torch", ".", "cat", "(", "[", "rot_matrix", ",", "rot_matrix", "]", ",", "dim", "=", "2", ")", "\n", "", "self", ".", "rotate", "(", "rot_matrix", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.__init__": [[161, 163], ["pointcloud_processor.Operation.__init__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Normalization", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.center_pointcloud": [[164, 175], ["torch.mean", "pointcloud_processor.Normalization.translate"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.translate"], ["", "def", "center_pointcloud", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        In-place centering\n        :param points:  Tensor Batch, N_pts, D_dim\n        :return: None\n        \"\"\"", "\n", "# input :", "\n", "# ouput : torch Tensor N_pts, D_dim", "\n", "centroid", "=", "torch", ".", "mean", "(", "self", ".", "points", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "translate", "(", "-", "centroid", ")", "\n", "return", "self", ".", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.center_pointcloud_functional": [[176, 180], ["pointcloud_processor.Normalization", "pointcloud_processor.Normalization.center_pointcloud"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.center_pointcloud"], ["", "@", "staticmethod", "\n", "def", "center_pointcloud_functional", "(", "points", ")", ":", "\n", "        ", "operator", "=", "Normalization", "(", "points", ",", "inplace", "=", "False", ")", "\n", "return", "operator", ".", "center_pointcloud", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.normalize_unitL2ball": [[181, 195], ["pointcloud_processor.Normalization.center_pointcloud", "torch.max", "torch.sqrt", "pointcloud_processor.Normalization.scale", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.center_pointcloud", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.scale"], ["", "def", "normalize_unitL2ball", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        In-place normalization of input to unit ball\n        :param points: torch Tensor Batch, N_pts, D_dim\n        :return: None\n        \"\"\"", "\n", "# input : torch Tensor N_pts, D_dim", "\n", "# ouput : torch Tensor N_pts, D_dim", "\n", "#", "\n", "self", ".", "center_pointcloud", "(", ")", "\n", "scaling_factor_square", ",", "_", "=", "torch", ".", "max", "(", "torch", ".", "sum", "(", "self", ".", "points", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "scaling_factor", "=", "torch", ".", "sqrt", "(", "scaling_factor_square", ")", "\n", "self", ".", "scale", "(", "1.0", "/", "scaling_factor", ")", "\n", "return", "self", ".", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.normalize_unitL2ball_functional": [[196, 200], ["pointcloud_processor.Normalization", "pointcloud_processor.Normalization.normalize_unitL2ball"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.normalize_unitL2ball"], ["", "@", "staticmethod", "\n", "def", "normalize_unitL2ball_functional", "(", "points", ")", ":", "\n", "        ", "operator", "=", "Normalization", "(", "points", ",", "inplace", "=", "False", ")", "\n", "return", "operator", ".", "normalize_unitL2ball", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.center_bounding_box": [[201, 211], ["torch.min", "torch.max", "pointcloud_processor.Normalization.translate"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.translate"], ["", "def", "center_bounding_box", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        in place Centering : return center the bounding box\n        :param points: torch Tensor Batch, N_pts, D_dim\n        :return: diameter\n        \"\"\"", "\n", "min_vals", ",", "_", "=", "torch", ".", "min", "(", "self", ".", "points", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "max_vals", ",", "_", "=", "torch", ".", "max", "(", "self", ".", "points", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "translate", "(", "-", "(", "min_vals", "+", "max_vals", ")", "/", "2", ")", "\n", "return", "self", ".", "points", ",", "(", "max_vals", "-", "min_vals", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.center_bounding_box_functional": [[212, 217], ["pointcloud_processor.Normalization", "pointcloud_processor.Normalization.center_bounding_box"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.center_bounding_box"], ["", "@", "staticmethod", "\n", "def", "center_bounding_box_functional", "(", "points", ")", ":", "\n", "        ", "operator", "=", "Normalization", "(", "points", ",", "inplace", "=", "False", ")", "\n", "points", ",", "_", "=", "operator", ".", "center_bounding_box", "(", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.normalize_bounding_box": [[218, 229], ["pointcloud_processor.Normalization.center_bounding_box", "pointcloud_processor.Normalization.scale", "torch.max"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.center_bounding_box", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.scale"], ["", "def", "normalize_bounding_box", "(", "self", ",", "isotropic", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        In place : center the bounding box and uniformly scale the bounding box to edge lenght 1 or max edge length 1 if isotropic is True  (default).\n        :param points: torch Tensor Batch, N_pts, D_dim\n        :return:\n        \"\"\"", "\n", "_", ",", "diameter", "=", "self", ".", "center_bounding_box", "(", ")", "\n", "if", "isotropic", ":", "\n", "            ", "diameter", ",", "_", "=", "torch", ".", "max", "(", "diameter", ",", "2", ",", "keepdim", "=", "True", ")", "\n", "", "self", ".", "scale", "(", "1.0", "/", "diameter", ")", "\n", "return", "self", ".", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.normalize_bounding_box_functional": [[230, 234], ["pointcloud_processor.Normalization", "pointcloud_processor.Normalization.normalize_bounding_box"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.normalize_bounding_box"], ["", "@", "staticmethod", "\n", "def", "normalize_bounding_box_functional", "(", "points", ")", ":", "\n", "        ", "operator", "=", "Normalization", "(", "points", ",", "inplace", "=", "False", ")", "\n", "return", "operator", ".", "normalize_bounding_box", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.identity_functional": [[235, 238], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "identity_functional", "(", "points", ")", ":", "\n", "        ", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.DataAugmentation.__init__": [[241, 243], ["pointcloud_processor.Operation.__init__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DataAugmentation", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.DataAugmentation.random_anisotropic_scaling": [[244, 253], ["pointcloud_processor.DataAugmentation.scale", "torch.rand", "pointcloud_processor.DataAugmentation.points.size", "pointcloud_processor.DataAugmentation.points.size"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.scale"], ["", "def", "random_anisotropic_scaling", "(", "self", ",", "min_val", "=", "0.75", ",", "max_val", "=", "1.25", ")", ":", "\n", "        ", "\"\"\"\n        In place : Random Anisotropic scaling by a factor between min_val and max_val\n        :param points: torch Tensor Batch, N_pts, D_dim\n        :return:\n        \"\"\"", "\n", "scale", "=", "torch", ".", "rand", "(", "self", ".", "points", ".", "size", "(", "0", ")", ",", "1", ",", "self", ".", "points", ".", "size", "(", "2", ")", ")", "*", "(", "max_val", "-", "min_val", ")", "+", "min_val", "\n", "self", ".", "scale", "(", "scale", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.DataAugmentation.random_axial_rotation": [[254, 265], ["pointcloud_processor.DataAugmentation.rotate_axis_angle", "torch.rand", "pointcloud_processor.DataAugmentation.points.size"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.rotate_axis_angle"], ["", "def", "random_axial_rotation", "(", "self", ",", "axis", "=", "0", ",", "normals", "=", "False", ",", "range_rot", "=", "360", ")", ":", "\n", "        ", "\"\"\"\n        Compute a random rotation of the batch around an axis. There is is no in-place version of this function because bmm_ is not possible in pytorch.\n        :param points: torch Tensor Batch, N_pts, D_dim\n        :return: torch Tensor Batch, N_pts, D_dim\n        \"\"\"", "\n", "scale_factor", "=", "360.0", "/", "range_rot", "\n", "scale_factor", "=", "np", ".", "pi", "/", "scale_factor", "\n", "rad_angle", "=", "torch", ".", "rand", "(", "self", ".", "points", ".", "size", "(", "0", ")", ")", "*", "2", "*", "scale_factor", "-", "scale_factor", "\n", "self", ".", "rotate_axis_angle", "(", "axis", "=", "axis", ",", "rad_angle", "=", "rad_angle", ",", "normals", "=", "normals", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.DataAugmentation.get_random_rotation_matrix": [[266, 305], ["torch.randn().double", "torch.max", "torch.sqrt", "x.squeeze.squeeze.squeeze", "torch.bmm", "torch.cos", "torch.sin", "torch.zeros().double", "rotation_matrix[].copy_", "rotation_matrix[].copy_", "rotation_matrix[].copy_", "rotation_matrix[].copy_", "rotation_matrix[].copy_", "rotation_matrix[].copy_", "rotation_matrix[].copy_", "rotation_matrix[].copy_", "rotation_matrix[].copy_", "torch.sum", "x.squeeze.squeeze.unsqueeze", "x.squeeze.squeeze.unsqueeze", "torch.randn", "torch.zeros", "torch.rand().double", "rad_angle.size", "torch.rand"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_random_rotation_matrix", "(", "batch_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Get a random 3D rotation matrix\n        :return: Rotation Matrix as a tensor\n        from : https://en.wikipedia.org/wiki/Rotation_matrix#Basic_rotations\n        An easy way to do this : sample a point on the sphere (with normalize(normal(), normal(), normal())\n         then sample an angle, then just compute the associated rotation matrix\n        \"\"\"", "\n", "# Select a random point on the sphere", "\n", "x", "=", "torch", ".", "randn", "(", "batch_size", ",", "1", ",", "3", ")", ".", "double", "(", ")", "\n", "scaling_factor_square", ",", "_", "=", "torch", ".", "max", "(", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "scaling_factor", "=", "torch", ".", "sqrt", "(", "scaling_factor_square", ")", "\n", "x", "/=", "scaling_factor", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "\n", "XX", "=", "torch", ".", "bmm", "(", "x", ".", "unsqueeze", "(", "2", ")", ",", "x", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "# get random angle", "\n", "rad_angle", "=", "torch", ".", "rand", "(", "batch_size", ")", ".", "double", "(", ")", "*", "2", "*", "np", ".", "pi", "+", "np", ".", "pi", "\n", "cos_angle", "=", "torch", ".", "cos", "(", "rad_angle", ")", "\n", "sin_angle", "=", "torch", ".", "sin", "(", "rad_angle", ")", "\n", "\n", "# Compute fat matrix", "\n", "rotation_matrix", "=", "torch", ".", "zeros", "(", "rad_angle", ".", "size", "(", "0", ")", ",", "3", ",", "3", ")", ".", "double", "(", ")", "\n", "\n", "rotation_matrix", "[", ":", ",", "0", ",", "0", "]", ".", "copy_", "(", "cos_angle", "+", "XX", "[", ":", ",", "0", ",", "0", "]", "*", "(", "1", "-", "cos_angle", ")", ")", "\n", "rotation_matrix", "[", ":", ",", "1", ",", "1", "]", ".", "copy_", "(", "cos_angle", "+", "XX", "[", ":", ",", "1", ",", "1", "]", "*", "(", "1", "-", "cos_angle", ")", ")", "\n", "rotation_matrix", "[", ":", ",", "2", ",", "2", "]", ".", "copy_", "(", "cos_angle", "+", "XX", "[", ":", ",", "2", ",", "2", "]", "*", "(", "1", "-", "cos_angle", ")", ")", "\n", "\n", "rotation_matrix", "[", ":", ",", "0", ",", "1", "]", ".", "copy_", "(", "XX", "[", ":", ",", "0", ",", "1", "]", "*", "(", "1", "-", "cos_angle", ")", "-", "x", "[", ":", ",", "2", "]", "*", "sin_angle", ")", "\n", "rotation_matrix", "[", ":", ",", "1", ",", "0", "]", ".", "copy_", "(", "XX", "[", ":", ",", "0", ",", "1", "]", "*", "(", "1", "-", "cos_angle", ")", "+", "x", "[", ":", ",", "2", "]", "*", "sin_angle", ")", "\n", "\n", "rotation_matrix", "[", ":", ",", "0", ",", "2", "]", ".", "copy_", "(", "XX", "[", ":", ",", "0", ",", "2", "]", "*", "(", "1", "-", "cos_angle", ")", "+", "x", "[", ":", ",", "1", "]", "*", "sin_angle", ")", "\n", "rotation_matrix", "[", ":", ",", "2", ",", "0", "]", ".", "copy_", "(", "XX", "[", ":", ",", "0", ",", "2", "]", "*", "(", "1", "-", "cos_angle", ")", "-", "x", "[", ":", ",", "1", "]", "*", "sin_angle", ")", "\n", "\n", "rotation_matrix", "[", ":", ",", "1", ",", "2", "]", ".", "copy_", "(", "XX", "[", ":", ",", "1", ",", "2", "]", "*", "(", "1", "-", "cos_angle", ")", "-", "x", "[", ":", ",", "0", "]", "*", "sin_angle", ")", "\n", "rotation_matrix", "[", ":", ",", "2", ",", "1", "]", ".", "copy_", "(", "XX", "[", ":", ",", "1", ",", "2", "]", "*", "(", "1", "-", "cos_angle", ")", "+", "x", "[", ":", ",", "0", "]", "*", "sin_angle", ")", "\n", "\n", "return", "rotation_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.DataAugmentation.random_rotation": [[306, 317], ["pointcloud_processor.DataAugmentation.get_random_rotation_matrix", "pointcloud_processor.DataAugmentation.rotate", "torch.cat", "pointcloud_processor.DataAugmentation.points.size"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.DataAugmentation.get_random_rotation_matrix", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.rotate"], ["", "def", "random_rotation", "(", "self", ",", "normals", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Compute a random rotation of the batch. There is is no in-place version of this function because bmm_ is not possible in pytorch.\n        :param points: torch Tensor Batch, N_pts, D_dim\n        :return: torch Tensor Batch, N_pts, D_dim\n        \"\"\"", "\n", "rot_matrix", "=", "DataAugmentation", ".", "get_random_rotation_matrix", "(", "batch_size", "=", "self", ".", "points", ".", "size", "(", "0", ")", ")", "\n", "if", "normals", ":", "\n", "            ", "rot_matrix", "=", "torch", ".", "cat", "(", "[", "rot_matrix", ",", "rot_matrix", "]", ",", "dim", "=", "2", ")", "\n", "", "self", ".", "rotate", "(", "rot_matrix", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.DataAugmentation.random_translation": [[318, 327], ["pointcloud_processor.DataAugmentation.translate", "torch.rand", "pointcloud_processor.DataAugmentation.points.size", "pointcloud_processor.DataAugmentation.points.size"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.translate"], ["", "def", "random_translation", "(", "self", ",", "scale", "=", "0.03", ")", ":", "\n", "        ", "\"\"\"\n        In place Compute a random tranlation of the batch.\n        :param points: torch Tensor Batch, N_pts, D_dim\n        :return:\n        \"\"\"", "\n", "translation_vector", "=", "torch", ".", "rand", "(", "self", ".", "points", ".", "size", "(", "0", ")", ",", "1", ",", "self", ".", "points", ".", "size", "(", "2", ")", ")", "*", "2", "*", "scale", "-", "scale", "\n", "self", ".", "translate", "(", "translation_vector", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.DataAugmentation.diff": [[328, 332], ["set"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "diff", "(", "first", ",", "second", ")", ":", "\n", "        ", "second", "=", "set", "(", "second", ")", "\n", "return", "[", "item", "for", "item", "in", "first", "if", "item", "not", "in", "second", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.DataAugmentation.random_flips": [[333, 345], ["pointcloud_processor.DataAugmentation.diff", "pointcloud_processor.DataAugmentation.scale", "range", "scale_factor[].fill_", "pointcloud_processor.DataAugmentation.points.size", "torch.randint", "pointcloud_processor.DataAugmentation.points.size", "pointcloud_processor.DataAugmentation.points.size"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.DataAugmentation.diff", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.scale"], ["", "def", "random_flips", "(", "self", ",", "dims", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n               In place Random flip\n               :param points: torch Tensor Batch, N_pts, D_dim\n               :return:\n        \"\"\"", "\n", "exclude_dims", "=", "DataAugmentation", ".", "diff", "(", "range", "(", "self", ".", "points", ".", "size", "(", "2", ")", ")", ",", "dims", ")", "\n", "scale_factor", "=", "torch", ".", "randint", "(", "2", ",", "(", "self", ".", "points", ".", "size", "(", "0", ")", ",", "1", ",", "self", ".", "points", ".", "size", "(", "2", ")", ")", ")", "*", "2", "-", "1", "\n", "for", "axis", "in", "exclude_dims", ":", "\n", "            ", "scale_factor", "[", ":", ",", ":", ",", "axis", "]", ".", "fill_", "(", "1", ")", "\n", "", "self", ".", "scale", "(", "scale_factor", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.barycentric": [[348, 374], ["numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply"], "function", ["None"], ["", "", "def", "barycentric", "(", "p", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "\"\"\"\n    :param p: numpy arrays of size N_points x 3\n    :param a: numpy arrays of size N_points x 3\n    :param b: numpy arrays of size N_points x 3\n    :param c: numpy arrays of size N_points x 3\n    :return: barycentric coordinates point p in triangle (a,b,c)\n    \"\"\"", "\n", "\n", "v0", "=", "b", "-", "a", "\n", "v1", "=", "c", "-", "a", "\n", "v2", "=", "p", "-", "a", "\n", "\n", "d00", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "v0", ",", "v0", ")", ",", "1", ")", "\n", "d01", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "v0", ",", "v1", ")", ",", "1", ")", "\n", "d11", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "v1", ",", "v1", ")", ",", "1", ")", "\n", "d20", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "v2", ",", "v0", ")", ",", "1", ")", "\n", "d21", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "v2", ",", "v1", ")", ",", "1", ")", "\n", "\n", "denom", "=", "np", ".", "multiply", "(", "d00", ",", "d11", ")", "-", "np", ".", "multiply", "(", "d01", ",", "d01", ")", "\n", "\n", "v", "=", "(", "np", ".", "multiply", "(", "d11", ",", "d20", ")", "-", "np", ".", "multiply", "(", "d01", ",", "d21", ")", ")", "/", "denom", "\n", "w", "=", "(", "np", ".", "multiply", "(", "d00", ",", "d21", ")", "-", "np", ".", "multiply", "(", "d01", ",", "d20", ")", ")", "/", "denom", "\n", "u", "=", "-", "v", "-", "w", "+", "1.0", "\n", "\n", "return", "(", "u", ",", "v", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.augmenter.Augmenter.__init__": [[19, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "translation", "=", "False", ",", "rotation_axis", "=", "[", "]", ",", "rotation_3D", "=", "False", ",", "anisotropic_scaling", "=", "False", ",", "flips", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "translation", "=", "translation", "\n", "self", ".", "rotation_axis", "=", "rotation_axis", "\n", "self", ".", "rotation_3D", "=", "rotation_3D", "\n", "self", ".", "anisotropic_scaling", "=", "anisotropic_scaling", "\n", "self", ".", "flips", "=", "flips", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.augmenter.Augmenter.__call__": [[26, 38], ["transfer.DataAugmentation", "transfer.DataAugmentation.random_axial_rotation", "transfer.DataAugmentation.random_rotation", "transfer.DataAugmentation.random_anisotropic_scaling", "len", "transfer.DataAugmentation.random_flips", "transfer.DataAugmentation.random_translation"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.DataAugmentation.random_axial_rotation", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.DataAugmentation.random_rotation", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.DataAugmentation.random_anisotropic_scaling", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.DataAugmentation.random_flips", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.DataAugmentation.random_translation"], ["", "def", "__call__", "(", "self", ",", "points", ")", ":", "\n", "        ", "operation", "=", "pointcloud_processor", ".", "DataAugmentation", "(", "points", ")", "\n", "for", "axis", "in", "self", ".", "rotation_axis", ":", "\n", "            ", "operation", ".", "random_axial_rotation", "(", "axis", "=", "axis", ")", "\n", "", "if", "self", ".", "rotation_3D", ":", "\n", "            ", "operation", ".", "random_rotation", "(", ")", "\n", "", "if", "self", ".", "anisotropic_scaling", ":", "\n", "            ", "operation", ".", "random_anisotropic_scaling", "(", ")", "\n", "", "if", "len", "(", "self", ".", "flips", ")", ">", "0", ":", "\n", "            ", "operation", ".", "random_flips", "(", "self", ".", "flips", ")", "\n", "", "if", "self", ".", "translation", ":", "\n", "            ", "operation", ".", "random_translation", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.__init__": [[35, 144], ["dataset_shapenet.ShapeNet.init_normalization", "dataset_shapenet.ShapeNet.init_singleview", "transfer.red_print", "transfer.red_print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset_shapenet.ShapeNet.preprocess", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.exists", "os.path.exists", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "open", "json.load", "len", "os.path.dirname", "os.path.dirname", "os.path.exists", "os.path.exists", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "os.path.exists", "os.path.exists", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "sorted", "print", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "new_classes.append", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "len", "dataset_shapenet.ShapeNet.datapath.append", "numpy.load", "next", "dict_class[].split", "str", "termcolor.colored", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.load", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "os.walk", "os.walk", "os.walk", "os.walk", "int", "str", "os.path.exists", "os.path.exists", "dataset_shapenet.ShapeNet.category_datapath[].append", "transfer.red_print", "transfer.red_print", "int", "termcolor.colored", "len", "pointcloud.split", "numpy.load", "len", "len", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.init_normalization", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.init_singleview", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.red_print", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.red_print", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.preprocess", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.red_print", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.red_print", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load"], ["def", "__init__", "(", "self", ",", "opt", ",", "mode", "=", "'train'", ",", "test_pc", "=", "None", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "num_sample", "=", "opt", ".", "number_points", "if", "mode", "==", "'train'", "else", "2500", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "init_normalization", "(", ")", "\n", "self", ".", "init_singleview", "(", ")", "\n", "\n", "if", "not", "opt", ".", "demo", "and", "not", "opt", ".", "custom_data", ":", "\n", "            ", "my_utils", ".", "red_print", "(", "'Create Shapenet Dataset...'", ")", "\n", "# Define core path array", "\n", "self", ".", "datapath", "=", "[", "]", "\n", "self", ".", "category_datapath", "=", "{", "}", "\n", "\n", "\n", "# Load classes", "\n", "self", ".", "pointcloud_path", "=", "join", "(", "dirname", "(", "__file__", ")", ",", "'data/ShapeNetV1PointCloud'", ")", "\n", "self", ".", "image_path", "=", "join", "(", "dirname", "(", "__file__", ")", ",", "'data/ShapeNetV1Renderings'", ")", "\n", "\n", "# Load taxonomy file", "\n", "self", ".", "taxonomy_path", "=", "join", "(", "dirname", "(", "__file__", ")", ",", "'data/taxonomy.json'", ")", "\n", "if", "not", "exists", "(", "self", ".", "taxonomy_path", ")", ":", "\n", "                ", "os", ".", "system", "(", "\"chmod +x dataset/download_shapenet_pointclouds.sh\"", ")", "\n", "os", ".", "system", "(", "\"./dataset/download_shapenet_pointclouds.sh\"", ")", "\n", "\n", "", "self", ".", "classes", "=", "[", "x", "for", "x", "in", "next", "(", "os", ".", "walk", "(", "self", ".", "pointcloud_path", ")", ")", "[", "1", "]", "]", "\n", "with", "open", "(", "self", ".", "taxonomy_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "taxonomy", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "id2names", "=", "{", "}", "\n", "self", ".", "names2id", "=", "{", "}", "\n", "for", "dict_class", "in", "self", ".", "taxonomy", ":", "\n", "                ", "if", "dict_class", "[", "'synsetId'", "]", "in", "self", ".", "classes", ":", "\n", "                    ", "name", "=", "dict_class", "[", "'name'", "]", ".", "split", "(", "sep", "=", "','", ")", "[", "0", "]", "\n", "self", ".", "id2names", "[", "dict_class", "[", "'synsetId'", "]", "]", "=", "name", "\n", "self", ".", "names2id", "[", "name", "]", "=", "dict_class", "[", "'synsetId'", "]", "\n", "\n", "# Select classes", "\n", "", "", "if", "opt", ".", "shapenet13", ":", "\n", "                ", "opt", ".", "class_choice", "=", "[", "\"airplane\"", ",", "\"bench\"", ",", "\"cabinet\"", ",", "\"car\"", ",", "\"chair\"", ",", "\"display\"", ",", "\"lamp\"", ",", "\"loudspeaker\"", ",", "\n", "\"rifle\"", ",", "\"sofa\"", ",", "\"table\"", ",", "\"telephone\"", ",", "\"vessel\"", "]", "\n", "\n", "", "if", "len", "(", "opt", ".", "class_choice", ")", ">", "0", ":", "\n", "                ", "new_classes", "=", "[", "]", "\n", "for", "category", "in", "opt", ".", "class_choice", ":", "\n", "                    ", "new_classes", ".", "append", "(", "self", ".", "names2id", "[", "category", "]", ")", "\n", "", "self", ".", "classes", "=", "new_classes", "\n", "\n", "# Create Cache path", "\n", "", "self", ".", "path_dataset", "=", "join", "(", "dirname", "(", "__file__", ")", ",", "'data'", ",", "'cache'", ")", "\n", "if", "not", "exists", "(", "self", ".", "path_dataset", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "self", ".", "path_dataset", ")", "\n", "", "self", ".", "path_dataset", "=", "join", "(", "self", ".", "path_dataset", ",", "\n", "self", ".", "opt", ".", "normalization", "+", "str", "(", "train", ")", "+", "\"_\"", ".", "join", "(", "self", ".", "opt", ".", "class_choice", ")", ")", "\n", "\n", "if", "not", "exists", "(", "self", ".", "image_path", ")", ":", "\n", "                ", "os", ".", "system", "(", "\"chmod +x dataset/download_shapenet_renderings.sh\"", ")", "\n", "os", ".", "system", "(", "\"./dataset/download_shapenet_renderings.sh\"", ")", "\n", "\n", "", "self", ".", "num_image_per_object", "=", "24", "\n", "self", ".", "idx_image_val", "=", "0", "\n", "\n", "# Compile list of pointcloud path by selected category", "\n", "for", "category", "in", "self", ".", "classes", ":", "\n", "                ", "dir_pointcloud", "=", "join", "(", "self", ".", "pointcloud_path", ",", "category", ")", "\n", "dir_image", "=", "join", "(", "self", ".", "image_path", ",", "category", ")", "\n", "list_pointcloud", "=", "sorted", "(", "os", ".", "listdir", "(", "dir_pointcloud", ")", ")", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "                    ", "list_pointcloud", "=", "list_pointcloud", "[", ":", "int", "(", "len", "(", "list_pointcloud", ")", "*", "0.8", ")", "]", "\n", "", "elif", "self", ".", "mode", "==", "'eval'", ":", "\n", "                    ", "list_pointcloud", "=", "list_pointcloud", "[", "int", "(", "len", "(", "list_pointcloud", ")", "*", "0.8", ")", ":", "]", "\n", "", "print", "(", "\n", "'    category '", "\n", "+", "colored", "(", "category", ",", "\"yellow\"", ")", "\n", "+", "\"  \"", "\n", "+", "colored", "(", "self", ".", "id2names", "[", "category", "]", ",", "\"cyan\"", ")", "\n", "+", "' Number Files :'", "\n", "+", "colored", "(", "str", "(", "len", "(", "list_pointcloud", ")", ")", ",", "\"yellow\"", ")", "\n", ")", "\n", "\n", "if", "len", "(", "list_pointcloud", ")", "!=", "0", ":", "\n", "                    ", "self", ".", "category_datapath", "[", "category", "]", "=", "[", "]", "\n", "for", "pointcloud", "in", "list_pointcloud", ":", "\n", "                        ", "pointcloud_path", "=", "join", "(", "dir_pointcloud", ",", "pointcloud", ")", "\n", "image_path", "=", "join", "(", "dir_image", ",", "pointcloud", ".", "split", "(", "\".\"", ")", "[", "0", "]", ",", "\"rendering\"", ")", "\n", "if", "not", "self", ".", "opt", ".", "SVR", "or", "exists", "(", "image_path", ")", ":", "\n", "                            ", "self", ".", "category_datapath", "[", "category", "]", ".", "append", "(", "(", "pointcloud_path", ",", "image_path", ",", "pointcloud", ",", "category", ")", ")", "\n", "", "else", ":", "\n", "                            ", "my_utils", ".", "red_print", "(", "f\"Rendering not found : {image_path}\"", ")", "\n", "\n", "# Add all retained path to a global vector", "\n", "", "", "", "", "for", "item", "in", "self", ".", "classes", ":", "\n", "                ", "for", "pointcloud", "in", "self", ".", "category_datapath", "[", "item", "]", ":", "\n", "                    ", "self", ".", "datapath", ".", "append", "(", "pointcloud", ")", "\n", "\n", "# Preprocess and cache files", "\n", "", "", "self", ".", "preprocess", "(", ")", "\n", "\n", "", "elif", "not", "opt", ".", "demo", "and", "opt", ".", "custom_data", ":", "\n", "            ", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "                ", "self", ".", "data_points", "=", "np", ".", "load", "(", "opt", ".", "train_pc_path", ")", "\n", "", "elif", "self", ".", "mode", "==", "'eval'", ":", "\n", "                ", "self", ".", "data_points", "=", "np", ".", "load", "(", "opt", ".", "eval_pc_path", ")", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "                ", "if", "test_pc", "is", "None", ":", "\n", "                    ", "self", ".", "data_points", "=", "np", ".", "load", "(", "opt", ".", "test_pc_path", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "data_points", "=", "test_pc", "\n", "\n", "", "", "self", ".", "data_points", "=", "torch", ".", "from_numpy", "(", "self", ".", "data_points", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.preprocess": [[145, 171], ["os.path.exists", "os.path.exists", "transfer.red_print", "transfer.red_print", "transfer.red_print", "transfer.red_print", "torch.load", "torch.load", "torch.load", "torch.load", "transfer.red_print", "transfer.red_print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.save", "torch.save", "torch.save", "torch.save", "open", "pickle.load", "dataset_shapenet.ShapeNet._getitem", "open", "pickle.dump", "str", "range", "len", "dataset_shapenet.ShapeNet.__len__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.red_print", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.red_print", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.red_print", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.red_print", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.red_print", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.red_print", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet._getitem", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dump", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.__len__"], ["", "", "def", "preprocess", "(", "self", ")", ":", "\n", "        ", "if", "exists", "(", "self", ".", "path_dataset", "+", "\"info.pkl\"", ")", ":", "\n", "# Reload dataset", "\n", "            ", "my_utils", ".", "red_print", "(", "f\"Reload dataset : {self.path_dataset}\"", ")", "\n", "with", "open", "(", "self", ".", "path_dataset", "+", "\"info.pkl\"", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "                ", "self", ".", "data_metadata", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "\n", "", "self", ".", "data_points", "=", "torch", ".", "load", "(", "self", ".", "path_dataset", "+", "\"points.pth\"", ")", "\n", "", "else", ":", "\n", "# Preprocess dataset and put in cache for future fast reload", "\n", "            ", "my_utils", ".", "red_print", "(", "\"preprocess dataset...\"", ")", "\n", "self", ".", "datas", "=", "[", "self", ".", "_getitem", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "__len__", "(", ")", ")", "]", "\n", "\n", "# Concatenate all proccessed files", "\n", "self", ".", "data_points", "=", "[", "a", "[", "0", "]", "for", "a", "in", "self", ".", "datas", "]", "\n", "self", ".", "data_points", "=", "torch", ".", "cat", "(", "self", ".", "data_points", ",", "0", ")", "\n", "\n", "self", ".", "data_metadata", "=", "[", "{", "'pointcloud_path'", ":", "a", "[", "1", "]", ",", "'image_path'", ":", "a", "[", "2", "]", ",", "'name'", ":", "a", "[", "3", "]", ",", "'category'", ":", "a", "[", "4", "]", "}", "for", "a", "in", "\n", "self", ".", "datas", "]", "\n", "\n", "# Save in cache", "\n", "with", "open", "(", "self", ".", "path_dataset", "+", "\"info.pkl\"", ",", "\"wb\"", ")", "as", "fp", ":", "# Pickling", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "data_metadata", ",", "fp", ")", "\n", "", "torch", ".", "save", "(", "self", ".", "data_points", ",", "self", ".", "path_dataset", "+", "\"points.pth\"", ")", "\n", "\n", "", "my_utils", ".", "red_print", "(", "\"Dataset Size: \"", "+", "str", "(", "len", "(", "self", ".", "data_metadata", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.init_normalization": [[172, 182], ["transfer.red_print", "transfer.red_print"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.red_print", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.red_print"], ["", "def", "init_normalization", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "opt", ".", "demo", ":", "\n", "            ", "my_utils", ".", "red_print", "(", "\"Dataset normalization : \"", "+", "self", ".", "opt", ".", "normalization", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "normalization", "==", "\"UnitBall\"", ":", "\n", "            ", "self", ".", "normalization_function", "=", "pointcloud_processor", ".", "Normalization", ".", "normalize_unitL2ball_functional", "\n", "", "elif", "self", ".", "opt", ".", "normalization", "==", "\"BoundingBox\"", ":", "\n", "            ", "self", ".", "normalization_function", "=", "pointcloud_processor", ".", "Normalization", ".", "normalize_bounding_box_functional", "\n", "", "else", ":", "\n", "            ", "self", ".", "normalization_function", "=", "pointcloud_processor", ".", "Normalization", ".", "identity_functional", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.init_singleview": [[183, 198], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Resize", "torchvision.ToTensor", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.CenterCrop"], "methods", ["None"], ["", "", "def", "init_singleview", "(", "self", ")", ":", "\n", "## Define Image Transforms", "\n", "        ", "self", ".", "transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "size", "=", "224", ",", "interpolation", "=", "2", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "# RandomResizedCrop or RandomCrop", "\n", "self", ".", "dataAugmentation", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "127", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "validating", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "CenterCrop", "(", "127", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet._getitem": [[200, 206], ["numpy.load", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "dataset_shapenet.ShapeNet.normalization_function", "torch.from_numpy().float.unsqueeze", "torch.from_numpy().float.unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load"], ["", "def", "_getitem", "(", "self", ",", "index", ")", ":", "\n", "        ", "pointcloud_path", ",", "image_path", ",", "pointcloud", ",", "category", "=", "self", ".", "datapath", "[", "index", "]", "\n", "points", "=", "np", ".", "load", "(", "pointcloud_path", ")", "\n", "points", "=", "torch", ".", "from_numpy", "(", "points", ")", ".", "float", "(", ")", "\n", "points", "[", ":", ",", ":", "3", "]", "=", "self", ".", "normalization_function", "(", "points", "[", ":", ",", ":", "3", "]", ")", "\n", "return", "points", ".", "unsqueeze", "(", "0", ")", ",", "pointcloud_path", ",", "image_path", ",", "pointcloud", ",", "category", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.__getitem__": [[207, 234], ["copy.deepcopy", "points.clone.clone.clone", "points[].contiguous", "numpy.random.choice", "dataset_shapenet.ShapeNet.transforms", "points.clone.clone.size", "numpy.random.randint", "PIL.Image.open", "dataset_shapenet.ShapeNet.dataAugmentation", "os.path.join", "os.path.join", "PIL.Image.open", "dataset_shapenet.ShapeNet.validating", "os.path.join", "os.path.join", "dataset_shapenet.ShapeNet.int2str", "dataset_shapenet.ShapeNet.int2str"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.int2str", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.int2str"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "not", "self", ".", "opt", ".", "custom_data", ":", "\n", "            ", "return_dict", "=", "deepcopy", "(", "self", ".", "data_metadata", "[", "index", "]", ")", "\n", "# Point processing", "\n", "points", "=", "self", ".", "data_points", "[", "index", "]", "\n", "points", "=", "points", ".", "clone", "(", ")", "\n", "if", "self", ".", "opt", ".", "sample", ":", "\n", "                ", "choice", "=", "np", ".", "random", ".", "choice", "(", "points", ".", "size", "(", "0", ")", ",", "self", ".", "num_sample", ",", "replace", "=", "True", ")", "\n", "points", "=", "points", "[", "choice", ",", ":", "]", "\n", "", "return_dict", "[", "'points'", "]", "=", "points", "[", ":", ",", ":", "3", "]", ".", "contiguous", "(", ")", "\n", "\n", "# Image processing", "\n", "if", "self", ".", "opt", ".", "SVR", ":", "\n", "                ", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "                    ", "N", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "num_image_per_object", ")", "\n", "im", "=", "Image", ".", "open", "(", "join", "(", "return_dict", "[", "'image_path'", "]", ",", "ShapeNet", ".", "int2str", "(", "N", ")", "+", "\".png\"", ")", ")", "\n", "im", "=", "self", ".", "dataAugmentation", "(", "im", ")", "# random crop", "\n", "", "elif", "self", ".", "mode", "==", "'eval'", ":", "\n", "                    ", "im", "=", "Image", ".", "open", "(", "join", "(", "return_dict", "[", "'image_path'", "]", ",", "ShapeNet", ".", "int2str", "(", "self", ".", "idx_image_val", ")", "+", "\".png\"", ")", ")", "\n", "im", "=", "self", ".", "validating", "(", "im", ")", "# center crop", "\n", "", "im", "=", "self", ".", "transforms", "(", "im", ")", "# scale", "\n", "im", "=", "im", "[", ":", "3", ",", ":", ",", ":", "]", "\n", "return_dict", "[", "'image'", "]", "=", "im", "\n", "", "return", "return_dict", "\n", "", "else", ":", "\n", "            ", "return_dict", "=", "{", "'points'", ":", "self", ".", "data_points", "[", "index", "]", "}", "\n", "return", "return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.__len__": [[235, 240], ["len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "custom_data", ":", "\n", "            ", "return", "len", "(", "self", ".", "data_points", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "datapath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.int2str": [[241, 247], ["str", "str"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "int2str", "(", "N", ")", ":", "\n", "        ", "if", "N", "<", "10", ":", "\n", "            ", "return", "\"0\"", "+", "str", "(", "N", ")", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load": [[248, 254], ["path.split", "dataset_shapenet.ShapeNet.load_point_input", "dataset_shapenet.ShapeNet.load_image"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load_point_input", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load_image"], ["", "", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "ext", "=", "path", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "if", "ext", "==", "\"npy\"", "or", "ext", "==", "\"ply\"", "or", "ext", "==", "\"obj\"", ":", "\n", "            ", "return", "self", ".", "load_point_input", "(", "path", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "load_image", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load_point_input": [[255, 279], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "transfer.Normalization", "transfer.Normalization", "path.split", "numpy.load", "transfer.Normalization.normalize_unitL2ball", "print", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "transfer.Normalization.normalize_bounding_box", "pymesh.load_mesh"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.normalize_unitL2ball", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Normalization.normalize_bounding_box"], ["", "", "def", "load_point_input", "(", "self", ",", "path", ")", ":", "\n", "        ", "ext", "=", "path", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "if", "ext", "==", "\"npy\"", ":", "\n", "            ", "points", "=", "np", ".", "load", "(", "path", ")", "\n", "", "elif", "ext", "==", "\"ply\"", "or", "ext", "==", "\"obj\"", ":", "\n", "            ", "import", "pymesh", "\n", "points", "=", "pymesh", ".", "load_mesh", "(", "path", ")", ".", "vertices", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"invalid file extension\"", ")", "\n", "\n", "", "points", "=", "torch", ".", "from_numpy", "(", "points", ")", ".", "float", "(", ")", "\n", "operation", "=", "pointcloud_processor", ".", "Normalization", "(", "points", ",", "keep_track", "=", "True", ")", "\n", "if", "self", ".", "opt", ".", "normalization", "==", "\"UnitBall\"", ":", "\n", "            ", "operation", ".", "normalize_unitL2ball", "(", ")", "\n", "", "elif", "self", ".", "opt", ".", "normalization", "==", "\"BoundingBox\"", ":", "\n", "            ", "operation", ".", "normalize_bounding_box", "(", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "return_dict", "=", "{", "\n", "'points'", ":", "points", ",", "\n", "'operation'", ":", "operation", ",", "\n", "'path'", ":", "path", ",", "\n", "}", "\n", "return", "return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load_image": [[280, 291], ["PIL.Image.open", "dataset_shapenet.ShapeNet.validating", "dataset_shapenet.ShapeNet.transforms", "dataset_shapenet.ShapeNet.unsqueeze_"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "path", ")", ":", "\n", "        ", "im", "=", "Image", ".", "open", "(", "path", ")", "\n", "im", "=", "self", ".", "validating", "(", "im", ")", "\n", "im", "=", "self", ".", "transforms", "(", "im", ")", "\n", "im", "=", "im", "[", ":", "3", ",", ":", ",", ":", "]", "\n", "return_dict", "=", "{", "\n", "'image'", ":", "im", ".", "unsqueeze_", "(", "0", ")", ",", "\n", "'operation'", ":", "None", ",", "\n", "'path'", ":", "path", ",", "\n", "}", "\n", "return", "return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.model_blocks.Identity.__init__": [[9, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.model_blocks.Identity.forward": [[12, 14], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.model_blocks.PointNet.__init__": [[29, 51], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nlatent", "=", "1024", ",", "dim_input", "=", "3", ")", ":", "\n", "        ", "\"\"\"\n        PointNet Encoder\n        See : PointNet: Deep Learning on Point Sets for 3D Classification and Segmentation\n                Charles R. Qi, Hao Su, Kaichun Mo, Leonidas J. Guibas\n        \"\"\"", "\n", "\n", "super", "(", "PointNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_input", "=", "dim_input", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "dim_input", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "nlatent", ",", "1", ")", "\n", "self", ".", "lin1", "=", "nn", ".", "Linear", "(", "nlatent", ",", "nlatent", ")", "\n", "self", ".", "lin2", "=", "nn", ".", "Linear", "(", "nlatent", ",", "nlatent", ")", "\n", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "nlatent", ")", "\n", "self", ".", "bn4", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "nlatent", ")", "\n", "self", ".", "bn5", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "nlatent", ")", "\n", "\n", "self", ".", "nlatent", "=", "nlatent", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.model_blocks.PointNet.forward": [[52, 61], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model_blocks.PointNet.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.relu.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu.squeeze", "model_blocks.PointNet.bn1", "model_blocks.PointNet.bn2", "model_blocks.PointNet.conv3", "model_blocks.PointNet.bn4", "model_blocks.PointNet.bn5", "model_blocks.PointNet.conv1", "model_blocks.PointNet.conv2", "model_blocks.PointNet.lin1().unsqueeze", "model_blocks.PointNet.lin2().unsqueeze", "model_blocks.PointNet.lin1", "model_blocks.PointNet.lin2", "torch.relu.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "nlatent", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "lin1", "(", "x", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "lin2", "(", "x", ".", "squeeze", "(", "2", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ")", "\n", "return", "x", ".", "squeeze", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.model_blocks.Mapping2Dto3D.__init__": [[73, 98], ["torch.Module.__init__", "print", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_blocks.get_activation", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "range", "range"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__", "home.repos.pwc.inspect_result.itailang_geometric_adv.model.model_blocks.get_activation"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "bottleneck_size", "=", "opt", ".", "bottleneck_size", "\n", "self", ".", "input_size", "=", "opt", ".", "dim_template", "\n", "self", ".", "dim_output", "=", "3", "\n", "self", ".", "hidden_neurons", "=", "opt", ".", "hidden_neurons", "\n", "self", ".", "num_layers", "=", "opt", ".", "num_layers", "\n", "super", "(", "Mapping2Dto3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "\n", "f\"New MLP decoder : hidden size {opt.hidden_neurons}, num_layers {opt.num_layers}, activation {opt.activation}\"", ")", "\n", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "input_size", ",", "self", ".", "bottleneck_size", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "bottleneck_size", ",", "self", ".", "hidden_neurons", ",", "1", ")", "\n", "\n", "self", ".", "conv_list", "=", "nn", ".", "ModuleList", "(", "\n", "[", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "hidden_neurons", ",", "self", ".", "hidden_neurons", ",", "1", ")", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", "]", ")", "\n", "\n", "self", ".", "last_conv", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "hidden_neurons", ",", "self", ".", "dim_output", ",", "1", ")", "\n", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "bottleneck_size", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "hidden_neurons", ")", "\n", "\n", "self", ".", "bn_list", "=", "nn", ".", "ModuleList", "(", "[", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "hidden_neurons", ")", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", "]", ")", "\n", "\n", "self", ".", "activation", "=", "get_activation", "(", "opt", ".", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.model_blocks.Mapping2Dto3D.forward": [[99, 106], ["model_blocks.Mapping2Dto3D.activation", "model_blocks.Mapping2Dto3D.activation", "range", "model_blocks.Mapping2Dto3D.last_conv", "model_blocks.Mapping2Dto3D.conv1", "model_blocks.Mapping2Dto3D.bn1", "model_blocks.Mapping2Dto3D.bn2", "model_blocks.Mapping2Dto3D.activation", "model_blocks.Mapping2Dto3D.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "latent", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "+", "latent", "\n", "x", "=", "self", ".", "activation", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "activation", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_layers", ")", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "self", ".", "bn_list", "[", "i", "]", "(", "self", ".", "conv_list", "[", "i", "]", "(", "x", ")", ")", ")", "\n", "", "return", "self", ".", "last_conv", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.model_blocks.get_activation": [[16, 26], ["getter.get"], "function", ["None"], ["", "", "def", "get_activation", "(", "argument", ")", ":", "\n", "    ", "getter", "=", "{", "\n", "\"relu\"", ":", "F", ".", "relu", ",", "\n", "\"sigmoid\"", ":", "F", ".", "sigmoid", ",", "\n", "\"softplus\"", ":", "F", ".", "softplus", ",", "\n", "\"logsigmoid\"", ":", "F", ".", "logsigmoid", ",", "\n", "\"softsign\"", ":", "F", ".", "softsign", ",", "\n", "\"tanh\"", ":", "F", ".", "tanh", ",", "\n", "}", "\n", "return", "getter", ".", "get", "(", "argument", ",", "\"Invalid activation\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.atlasnet.Atlasnet.__init__": [[20, 44], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "print", "transfer.atlasnet.model.template.get_template", "range", "transfer.atlasnet.model.model_blocks.Mapping2Dto3D", "range"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__", "home.repos.pwc.inspect_result.itailang_geometric_adv.model.template.get_template"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"\n        Core Atlasnet module: decoder to meshes and pointclouds.\n        This network takes an embedding in the form of a latent vector and returns a pointcloud or a mesh\n        Author: Thibault Groueix 01.11.2019\n        :param opt: \n        \"\"\"", "\n", "super", "(", "Atlasnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "device", "=", "opt", ".", "device", "\n", "\n", "# Define number of points per primitives", "\n", "self", ".", "nb_pts_in_primitive", "=", "opt", ".", "number_points", "//", "opt", ".", "nb_primitives", "\n", "self", ".", "nb_pts_in_primitive_eval", "=", "opt", ".", "number_points_eval", "//", "opt", ".", "nb_primitives", "\n", "\n", "if", "opt", ".", "remove_all_batchNorms", ":", "\n", "            ", "torch", ".", "nn", ".", "BatchNorm1d", "=", "Identity", "\n", "print", "(", "\"Replacing all batchnorms by identities.\"", ")", "\n", "\n", "# Initialize templates", "\n", "", "self", ".", "template", "=", "[", "get_template", "(", "opt", ".", "template_type", ",", "device", "=", "opt", ".", "device", ")", "for", "i", "in", "range", "(", "0", ",", "opt", ".", "nb_primitives", ")", "]", "\n", "\n", "# Intialize deformation networks", "\n", "self", ".", "decoder", "=", "nn", ".", "ModuleList", "(", "[", "Mapping2Dto3D", "(", "opt", ")", "for", "i", "in", "range", "(", "0", ",", "opt", ".", "nb_primitives", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.atlasnet.Atlasnet.forward": [[45, 70], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "atlasnet.Atlasnet.template[].get_random_points", "atlasnet.Atlasnet.template[].get_regular_points", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "range", "range", "range", "latent_vector.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.model.template.SquareTemplate.get_random_points", "home.repos.pwc.inspect_result.itailang_geometric_adv.model.template.SquareTemplate.get_regular_points"], ["", "def", "forward", "(", "self", ",", "latent_vector", ",", "train", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Deform points from self.template using the embedding latent_vector\n        :param latent_vector: an opt.bottleneck size vector encoding a 3D shape or an image. size : batch, bottleneck\n        :return: A deformed pointcloud os size : batch, nb_prim, num_point, 3\n        \"\"\"", "\n", "# Sample points in the patches", "\n", "# input_points = [self.template[i].get_regular_points(self.nb_pts_in_primitive,", "\n", "#                                                     device=latent_vector.device)", "\n", "#                 for i in range(self.opt.nb_primitives)]", "\n", "if", "train", ":", "\n", "            ", "input_points", "=", "[", "self", ".", "template", "[", "i", "]", ".", "get_random_points", "(", "\n", "torch", ".", "Size", "(", "(", "1", ",", "self", ".", "template", "[", "i", "]", ".", "dim", ",", "self", ".", "nb_pts_in_primitive", ")", ")", ",", "\n", "latent_vector", ".", "device", ")", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "nb_primitives", ")", "]", "\n", "", "else", ":", "\n", "            ", "input_points", "=", "[", "self", ".", "template", "[", "i", "]", ".", "get_regular_points", "(", "self", ".", "nb_pts_in_primitive_eval", ",", "\n", "device", "=", "latent_vector", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "nb_primitives", ")", "]", "\n", "\n", "# Deform each patch", "\n", "", "output_points", "=", "torch", ".", "cat", "(", "[", "self", ".", "decoder", "[", "i", "]", "(", "input_points", "[", "i", "]", ",", "latent_vector", ".", "unsqueeze", "(", "2", ")", ")", ".", "unsqueeze", "(", "1", ")", "for", "i", "in", "\n", "range", "(", "0", ",", "self", ".", "opt", ".", "nb_primitives", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# Return the deformed pointcloud", "\n", "return", "output_points", ".", "contiguous", "(", ")", "# batch, nb_prim, num_point, 3", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.atlasnet.Atlasnet.generate_mesh": [[71, 90], ["pymesh.merge_meshes", "latent_vector.size", "atlasnet.Atlasnet.template[].get_regular_points", "pymesh.form_mesh", "range", "range", "range", "range", "output_points[].transpose().contiguous().cpu().numpy", "latent_vector.unsqueeze", "output_points[].transpose().contiguous().cpu", "output_points[].transpose().contiguous", "output_points[].transpose"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.model.template.SquareTemplate.get_regular_points"], ["", "def", "generate_mesh", "(", "self", ",", "latent_vector", ")", ":", "\n", "        ", "assert", "latent_vector", ".", "size", "(", "0", ")", "==", "1", ",", "\"input should have batch size 1!\"", "\n", "import", "pymesh", "\n", "input_points", "=", "[", "self", ".", "template", "[", "i", "]", ".", "get_regular_points", "(", "self", ".", "nb_pts_in_primitive", ",", "latent_vector", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "nb_primitives", ")", "]", "\n", "input_points", "=", "[", "input_points", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "nb_primitives", ")", "]", "\n", "\n", "# Deform each patch", "\n", "output_points", "=", "[", "self", ".", "decoder", "[", "i", "]", "(", "input_points", "[", "i", "]", ",", "latent_vector", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", ")", "for", "i", "in", "\n", "range", "(", "0", ",", "self", ".", "opt", ".", "nb_primitives", ")", "]", "\n", "\n", "output_meshes", "=", "[", "pymesh", ".", "form_mesh", "(", "vertices", "=", "output_points", "[", "i", "]", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "faces", "=", "self", ".", "template", "[", "i", "]", ".", "mesh", ".", "faces", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "nb_primitives", ")", "]", "\n", "\n", "# Deform return the deformed pointcloud", "\n", "mesh", "=", "pymesh", ".", "merge_meshes", "(", "output_meshes", ")", "\n", "\n", "return", "mesh", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.trainer_model.TrainerModel.__init__": [[21, 27], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This class creates the architectures and implements all trainer functions related to architecture.\n        Author: Thibault Groueix 01.11.2019\n        \"\"\"", "\n", "super", "(", "TrainerModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.trainer_model.TrainerModel.build_network": [[28, 43], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "transfer.atlasnet.model.model.EncoderDecoder", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "trainer_model.TrainerModel.reload_network", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.model.trainer_model.TrainerModel.reload_network"], ["", "def", "build_network", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Create network architecture. Refer to auxiliary.model\n        :return:\n        \"\"\"", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "opt", ".", "device", "=", "torch", ".", "device", "(", "f\"cuda:{self.opt.multi_gpu[0]}\"", ")", "\n", "", "else", ":", "\n", "# Run on CPU", "\n", "            ", "self", ".", "opt", ".", "device", "=", "torch", ".", "device", "(", "f\"cpu\"", ")", "\n", "\n", "", "self", ".", "network", "=", "EncoderDecoder", "(", "self", ".", "opt", ")", "\n", "self", ".", "network", "=", "nn", ".", "DataParallel", "(", "self", ".", "network", ",", "device_ids", "=", "self", ".", "opt", ".", "multi_gpu", ")", "\n", "\n", "self", ".", "reload_network", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.trainer_model.TrainerModel.reload_network": [[44, 67], ["transfer.atlasnet.auxiliary.my_utils.yellow_print", "trainer_model.TrainerModel.network.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "copy.deepcopy", "transfer.atlasnet.model.model.EncoderDecoder", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel.module.load_state_dict", "transfer.atlasnet.auxiliary.my_utils.yellow_print", "transfer.atlasnet.auxiliary.my_utils.yellow_print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.yellow_print", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.yellow_print", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.yellow_print", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load"], ["", "def", "reload_network", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reload entire model or only decoder (atlasnet) depending on the options\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "opt", ".", "reload_model_path", "!=", "\"\"", ":", "\n", "            ", "yellow_print", "(", "f\"Network weights loaded from  {self.opt.reload_model_path}!\"", ")", "\n", "# print(self.network.state_dict().keys())", "\n", "# print(torch.load(self.opt.reload_model_path).keys())", "\n", "self", ".", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "opt", ".", "reload_model_path", ",", "map_location", "=", "'cuda:0'", ")", ")", "\n", "\n", "", "elif", "self", ".", "opt", ".", "reload_decoder_path", "!=", "\"\"", ":", "\n", "            ", "opt", "=", "deepcopy", "(", "self", ".", "opt", ")", "\n", "opt", ".", "SVR", "=", "False", "\n", "network", "=", "EncoderDecoder", "(", "opt", ")", "\n", "network", "=", "nn", ".", "DataParallel", "(", "network", ",", "device_ids", "=", "opt", ".", "multi_gpu", ")", "\n", "network", ".", "module", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "reload_decoder_path", ",", "map_location", "=", "'cuda:0'", ")", ")", "\n", "self", ".", "network", ".", "module", ".", "decoder", "=", "network", ".", "module", ".", "decoder", "\n", "yellow_print", "(", "f\"Network Decoder weights loaded from  {self.opt.reload_decoder_path}!\"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "yellow_print", "(", "\"No network weights to reload!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.trainer_model.TrainerModel.build_optimizer": [[68, 92], ["transfer.atlasnet.auxiliary.my_utils.yellow_print", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "len", "numpy.linspace().tolist", "trainer_model.TrainerModel.next_learning_rates.reverse", "trainer_model.TrainerModel.network.module.encoder.parameters", "trainer_model.TrainerModel.network.module.parameters", "trainer_model.TrainerModel.optimizer.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "transfer.atlasnet.auxiliary.my_utils.yellow_print", "numpy.linspace", "len"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.yellow_print", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.yellow_print"], ["", "", "def", "build_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Create optimizer\n        \"\"\"", "\n", "if", "self", ".", "opt", ".", "train_only_encoder", ":", "\n", "# To train a resnet image encoder with a pre-trained atlasnet decoder.", "\n", "            ", "yellow_print", "(", "\"only train the Encoder\"", ")", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "network", ".", "module", ".", "encoder", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lrate", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "network", ".", "module", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lrate", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "reload_optimizer_path", "!=", "\"\"", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "opt", ".", "reload_optimizer_path", ",", "map_location", "=", "'cuda:0'", ")", ")", "\n", "# yellow_print(f\"Reloaded optimizer {self.opt.reload_optimizer_path}\")", "\n", "", "except", ":", "\n", "                ", "yellow_print", "(", "f\"Failed to reload optimizer {self.opt.reload_optimizer_path}\"", ")", "\n", "\n", "# Set policy for warm-up if you use multiple GPUs", "\n", "", "", "self", ".", "next_learning_rates", "=", "[", "]", "\n", "if", "len", "(", "self", ".", "opt", ".", "multi_gpu", ")", ">", "1", ":", "\n", "            ", "self", ".", "next_learning_rates", "=", "np", ".", "linspace", "(", "self", ".", "opt", ".", "lrate", ",", "self", ".", "opt", ".", "lrate", "*", "len", "(", "self", ".", "opt", ".", "multi_gpu", ")", ",", "\n", "5", ")", ".", "tolist", "(", ")", "\n", "self", ".", "next_learning_rates", ".", "reverse", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.BasicBlock.__init__": [[29, 38], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__", "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.conv3x3", "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.BasicBlock.forward": [[39, 56], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.Bottleneck.__init__": [[61, 73], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.Bottleneck.forward": [[74, 95], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.ResNet.__init__": [[99, 121], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__", "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.ResNet._make_layer": [[122, 138], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.ResNet.forward": [[139, 155], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.conv3x3": [[20, 24], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.resnet18": [[157, 166], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.resnet34": [[168, 177], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.resnet50": [[179, 188], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.resnet101": [[190, 199], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.resnet152": [[201, 210], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.model.EncoderDecoder.__init__": [[16, 29], ["torch.Module.__init__", "transfer.atlasnet.model.atlasnet.Atlasnet", "model.EncoderDecoder.to", "model.EncoderDecoder.eval", "transfer.resnet18", "transfer.atlasnet.model.model_blocks.PointNet", "model.EncoderDecoder.apply"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__", "home.repos.pwc.inspect_result.itailang_geometric_adv.model.resnet.resnet18", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.apply"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "EncoderDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "opt", ".", "SVR", ":", "\n", "            ", "self", ".", "encoder", "=", "resnet", ".", "resnet18", "(", "pretrained", "=", "False", ",", "num_classes", "=", "opt", ".", "bottleneck_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder", "=", "PointNet", "(", "nlatent", "=", "opt", ".", "bottleneck_size", ")", "\n", "\n", "", "self", ".", "decoder", "=", "Atlasnet", "(", "opt", ")", "\n", "self", ".", "to", "(", "opt", ".", "device", ")", "\n", "\n", "if", "not", "opt", ".", "SVR", ":", "\n", "            ", "self", ".", "apply", "(", "weights_init", ")", "# initialization of the weights", "\n", "", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.model.EncoderDecoder.forward": [[30, 32], ["model.EncoderDecoder.decoder", "model.EncoderDecoder.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "train", "=", "True", ")", ":", "\n", "        ", "return", "self", ".", "decoder", "(", "self", ".", "encoder", "(", "x", ")", ",", "train", "=", "train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.model.EncoderDecoder.generate_mesh": [[33, 35], ["model.EncoderDecoder.decoder.generate_mesh", "model.EncoderDecoder.encoder"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.generate_mesh"], ["", "def", "generate_mesh", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "decoder", ".", "generate_mesh", "(", "self", ".", "encoder", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.model.weights_init": [[37, 42], ["classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["", "", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.template.Template.get_random_points": [[21, 23], ["print"], "methods", ["None"], ["    ", "def", "get_random_points", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Please implement get_random_points \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.template.Template.get_regular_points": [[24, 26], ["print"], "methods", ["None"], ["", "def", "get_regular_points", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Please implement get_regular_points \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.template.SphereTemplate.__init__": [[29, 33], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "0", ",", "grain", "=", "6", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "dim", "=", "3", "\n", "self", ".", "npoints", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.template.SphereTemplate.get_random_points": [[34, 44], ["torch.cuda.FloatTensor().to().float", "torch.cuda.FloatTensor().to().float.data.normal_", "torch.autograd.Variable", "torch.sqrt", "torch.cuda.FloatTensor().to", "torch.sum", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "def", "get_random_points", "(", "self", ",", "shape", ",", "device", "=", "\"gpu0\"", ")", ":", "\n", "        ", "\"\"\"\n        Get random points on a Sphere\n        Return Tensor of Size [x, 3, x ... x]\n        \"\"\"", "\n", "assert", "shape", "[", "1", "]", "==", "3", ",", "\"shape should have 3 in dim 1\"", "\n", "rand_grid", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "shape", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "rand_grid", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "rand_grid", "=", "rand_grid", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "rand_grid", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "return", "Variable", "(", "rand_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.template.SphereTemplate.get_regular_points": [[45, 58], ["torch.autograd.Variable", "pymesh.generate_icosphere", "torch.from_numpy().to().float", "template.SphereTemplate.vertex.size", "template.SphereTemplate.vertex.transpose().contiguous().unsqueeze", "template.SphereTemplate.vertex.to", "torch.from_numpy().to", "template.SphereTemplate.vertex.transpose().contiguous", "torch.from_numpy", "template.SphereTemplate.vertex.transpose"], "methods", ["None"], ["", "def", "get_regular_points", "(", "self", ",", "npoints", "=", "None", ",", "device", "=", "\"gpu0\"", ")", ":", "\n", "        ", "\"\"\"\n        Get regular points on a Sphere\n        Return Tensor of Size [x, 3]\n        \"\"\"", "\n", "if", "not", "self", ".", "npoints", "==", "npoints", ":", "\n", "            ", "self", ".", "mesh", "=", "pymesh", ".", "generate_icosphere", "(", "1", ",", "[", "0", ",", "0", ",", "0", "]", ",", "4", ")", "# 2562 vertices", "\n", "self", ".", "vertex", "=", "torch", ".", "from_numpy", "(", "self", ".", "mesh", ".", "vertices", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "self", ".", "num_vertex", "=", "self", ".", "vertex", ".", "size", "(", "0", ")", "\n", "self", ".", "vertex", "=", "self", ".", "vertex", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "npoints", "=", "npoints", "\n", "\n", "", "return", "Variable", "(", "self", ".", "vertex", ".", "to", "(", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.template.SquareTemplate.__init__": [[61, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "0", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "dim", "=", "2", "\n", "self", ".", "npoints", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.template.SquareTemplate.get_random_points": [[66, 74], ["torch.cuda.FloatTensor().to().float", "torch.cuda.FloatTensor().to().float.data.uniform_", "torch.autograd.Variable", "torch.cuda.FloatTensor().to", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "def", "get_random_points", "(", "self", ",", "shape", ",", "device", "=", "\"gpu0\"", ")", ":", "\n", "        ", "\"\"\"\n        Get random points on a Sphere\n        Return Tensor of Size [x, 2, x ... x]\n        \"\"\"", "\n", "rand_grid", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "shape", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "rand_grid", ".", "data", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "return", "Variable", "(", "rand_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.template.SquareTemplate.get_regular_points": [[75, 89], ["torch.autograd.Variable", "template.SquareTemplate.generate_square", "pymesh.form_mesh", "torch.from_numpy().to().float", "template.SquareTemplate.vertex.size", "template.SquareTemplate.vertex.transpose().contiguous().unsqueeze", "template.SquareTemplate.vertex[].contiguous().to", "numpy.sqrt", "torch.from_numpy().to", "template.SquareTemplate.vertex.transpose().contiguous", "template.SquareTemplate.vertex[].contiguous", "torch.from_numpy", "template.SquareTemplate.vertex.transpose"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.model.template.SquareTemplate.generate_square"], ["", "def", "get_regular_points", "(", "self", ",", "npoints", "=", "2500", ",", "device", "=", "\"gpu0\"", ")", ":", "\n", "        ", "\"\"\"\n        Get regular points on a Square\n        Return Tensor of Size [x, 3]\n        \"\"\"", "\n", "if", "not", "self", ".", "npoints", "==", "npoints", ":", "\n", "            ", "self", ".", "npoints", "=", "npoints", "\n", "vertices", ",", "faces", "=", "self", ".", "generate_square", "(", "np", ".", "sqrt", "(", "npoints", ")", ")", "\n", "self", ".", "mesh", "=", "pymesh", ".", "form_mesh", "(", "vertices", "=", "vertices", ",", "faces", "=", "faces", ")", "# 10k vertices", "\n", "self", ".", "vertex", "=", "torch", ".", "from_numpy", "(", "self", ".", "mesh", ".", "vertices", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "self", ".", "num_vertex", "=", "self", ".", "vertex", ".", "size", "(", "0", ")", "\n", "self", ".", "vertex", "=", "self", ".", "vertex", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "return", "Variable", "(", "self", ".", "vertex", "[", ":", ",", ":", "2", "]", ".", "contiguous", "(", ")", ".", "to", "(", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.template.SquareTemplate.generate_square": [[90, 118], ["int", "range", "range", "range", "int", "range", "int", "range", "range", "numpy.array", "numpy.array", "int", "vertices.append", "faces.append", "int", "int", "faces.append", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "generate_square", "(", "grain", ")", ":", "\n", "        ", "\"\"\"\n        Generate a square mesh from a regular grid.\n        :param grain:\n        :return:\n        \"\"\"", "\n", "grain", "=", "int", "(", "grain", ")", "\n", "grain", "=", "grain", "-", "1", "# to return grain*grain points", "\n", "# generate regular grid", "\n", "faces", "=", "[", "]", "\n", "vertices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "int", "(", "grain", "+", "1", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "int", "(", "grain", "+", "1", ")", ")", ":", "\n", "                ", "vertices", ".", "append", "(", "[", "i", "/", "grain", ",", "j", "/", "grain", ",", "0", "]", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "int", "(", "grain", "+", "1", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "(", "int", "(", "grain", "+", "1", ")", "-", "1", ")", ")", ":", "\n", "                ", "faces", ".", "append", "(", "[", "j", "+", "(", "grain", "+", "1", ")", "*", "i", ",", "\n", "j", "+", "(", "grain", "+", "1", ")", "*", "i", "+", "1", ",", "\n", "j", "+", "(", "grain", "+", "1", ")", "*", "(", "i", "-", "1", ")", "]", ")", "\n", "", "", "for", "i", "in", "range", "(", "0", ",", "(", "int", "(", "(", "grain", "+", "1", ")", ")", "-", "1", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "int", "(", "(", "grain", "+", "1", ")", ")", ")", ":", "\n", "                ", "faces", ".", "append", "(", "[", "j", "+", "(", "grain", "+", "1", ")", "*", "i", ",", "\n", "j", "+", "(", "grain", "+", "1", ")", "*", "i", "-", "1", ",", "\n", "j", "+", "(", "grain", "+", "1", ")", "*", "(", "i", "+", "1", ")", "]", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "vertices", ")", ",", "np", ".", "array", "(", "faces", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.model.template.get_template": [[11, 18], ["getter.get", "getter.get."], "function", ["None"], ["def", "get_template", "(", "template_type", ",", "device", "=", "0", ")", ":", "\n", "    ", "getter", "=", "{", "\n", "\"SQUARE\"", ":", "SquareTemplate", ",", "\n", "\"SPHERE\"", ":", "SphereTemplate", ",", "\n", "}", "\n", "template", "=", "getter", ".", "get", "(", "template_type", ",", "\"Invalid template\"", ")", "\n", "return", "template", "(", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.launcher.Experiments.__init__": [[11, 89], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "atlasnet", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/atlasnet_autoencoder_1_sphere  --nb_primitives 1 --template_type SPHERE\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/atlasnet_autoencoder_25_squares  --nb_primitives 25 --template_type SQUARE\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name log/atlasnet_singleview_1_sphere_tmp_True --nb_primitives 1 --template_type SPHERE --SVR --reload_decoder_path log/atlasnet_autoencoder_1_sphere/network.pth --train_only_encoder\"", ",", "\n", "4", ":", "\"python train.py --shapenet13 --dir_name log/atlasnet_singleview_25_squares_tmp_True  --nb_primitives 25 --template_type SQUARE  --SVR  --reload_decoder_path log/atlasnet_autoencoder_25_squares/network.pth --train_only_encoder\"", ",", "\n", "5", ":", "\"python train.py --shapenet13 --dir_name log/atlasnet_singleview_1_sphere --nb_primitives 1 --template_type SPHERE --SVR --reload_model_path log/atlasnet_singleview_1_sphere_tmp_True/network.pth --lrate 0.0001 --nepoch 50 --lr_decay_1 40\"", ",", "\n", "6", ":", "\"python train.py --shapenet13 --dir_name log/atlasnet_singleview_25_squares  --nb_primitives 25 --template_type SQUARE  --SVR  --reload_model_path log/atlasnet_singleview_25_squares_tmp_True/network.pth  --lrate 0.0001 --nepoch 50 --lr_decay_1 40\"", ",", "\n", "}", "\n", "\n", "self", ".", "atlasnet_test", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name training/trained_models/atlasnet_autoencoder_1_sphere  --nb_primitives 1 --template_type SPHERE --run_single_eval --no_metro\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name training/trained_models/atlasnet_autoencoder_25_squares  --nb_primitives 25 --template_type SQUARE  --run_single_eval --no_metro\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name training/trained_models/atlasnet_singleview_1_sphere  --nb_primitives 1 --template_type SPHERE --run_single_eval --no_metro  --SVR\"", ",", "\n", "4", ":", "\"python train.py --shapenet13 --dir_name training/trained_models/atlasnet_singleview_25_squares  --nb_primitives 25 --template_type SQUARE  --run_single_eval --no_metro  --SVR\"", ",", "\n", "}", "\n", "self", ".", "template", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/template_sphere --template_type SPHERE\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/template_square --template_type SQUARE --nb_primitives 1\"", ",", "\n", "}", "\n", "self", ".", "num_prim", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/num_prim_10 --nb_primitives 10  --template_type SQUARE\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/num_prim_25 --nb_primitives 25  --template_type SQUARE\"", ",", "\n", "}", "\n", "self", ".", "data_augmentation", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/data_augmentation_1 --nb_primitives 10 --random_translation 1\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/data_augmentation_2 --nb_primitives 10 --random_translation 1 --anisotropic_scaling 1\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name log/data_augmentation_3 --nb_primitives 10 --data_augmentation_axis_rotation 1 --data_augmentation_random_flips 1 --random_translation 1 --anisotropic_scaling 1\"", ",", "\n", "4", ":", "\"python train.py --shapenet13 --dir_name log/data_augmentation_4 --nb_primitives 10 --random_rotation 1 --data_augmentation_random_flips 1 --random_translation 1 --anisotropic_scaling 1\"", ",", "\n", "}", "\n", "\n", "self", ".", "number_points", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/number_points_8000 --nb_primitives 10 --number_points 8000\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/number_points_1000 --nb_primitives 10 --number_points 1000\"", ",", "\n", "}", "\n", "\n", "self", ".", "normalization", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/normalization_boundingBox --nb_primitives 10 --normalization BoundingBox\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/normalization_identity --nb_primitives 10 --normalization Identity\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name log/normalization_unitBall --nb_primitives 10 --normalization UnitBall\"", ",", "\n", "}", "\n", "\n", "self", ".", "bottleneck_size", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/bottleneck_size_128 --nb_primitives 10 --bottleneck_size 128\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/bottleneck_size_2048 --nb_primitives 10 --bottleneck_size 2048\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name log/bottleneck_size_4096 --nb_primitives 10 --bottleneck_size 4096\"", ",", "\n", "}", "\n", "\n", "self", ".", "multi_gpu", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/multi_gpu_1 --multi_gpu 0 1 2 3 --batch_size 128\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/multi_gpu_10 --multi_gpu 0 1 2 3 --nb_primitives 10 --batch_size 128\"", ",", "\n", "}", "\n", "\n", "self", ".", "activation", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/activation_sigmoid --nb_primitives 10  --activation sigmoid\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/activation_softplus --nb_primitives 10  --activation softplus\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name log/activation_logsigmoid --nb_primitives 10  --activation logsigmoid\"", ",", "\n", "4", ":", "\"python train.py --shapenet13 --dir_name log/activation_softsign --nb_primitives 10  --activation softsign\"", ",", "\n", "5", ":", "\"python train.py --shapenet13 --dir_name log/activation_tanh --nb_primitives 10  --activation tanh\"", ",", "\n", "}", "\n", "\n", "self", ".", "num_layers", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/num_layers_2 --nb_primitives 10  --num_layers 2\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/num_layers_3 --nb_primitives 10  --num_layers 3\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name log/num_layers_4 --nb_primitives 10  --num_layers 4\"", ",", "\n", "4", ":", "\"python train.py --shapenet13 --dir_name log/num_layers_5 --nb_primitives 10  --num_layers 5\"", ",", "\n", "}", "\n", "\n", "self", ".", "hidden_neurons", "=", "{", "\n", "1", ":", "\"python train.py --shapenet13 --dir_name log/hidden_neurons_256 --nb_primitives 10  --hidden_neurons 256\"", ",", "\n", "2", ":", "\"python train.py --shapenet13 --dir_name log/hidden_neurons_128 --nb_primitives 10  --hidden_neurons 128\"", ",", "\n", "3", ":", "\"python train.py --shapenet13 --dir_name log/hidden_neurons_64 --nb_primitives 10  --hidden_neurons 64\"", ",", "\n", "4", ":", "\"python train.py --shapenet13 --dir_name log/hidden_neurons_512 --nb_primitives 10  --hidden_neurons 512\"", ",", "\n", "5", ":", "\"python train.py --shapenet13 --dir_name log/hidden_neurons_1024 --nb_primitives 10  --hidden_neurons 1024\"", ",", "\n", "}", "\n", "\n", "self", ".", "single_view", "=", "{", "\n", "1", ":", "\"python train.py --dir_name log/single_view --shapenet13 --nb_primitives 10  --SVR\"", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.launcher.get_first_available_gpu": [[95, 111], ["gpustat.new_query", "range", "len", "print", "os.system", "os.system", "gpu.processes.__len__", "int"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.__len__"], ["def", "get_first_available_gpu", "(", ")", ":", "\n", "    ", "\"\"\"\n    Check if a gpu is free and returns it\n    :return: gpu_id\n    \"\"\"", "\n", "query", "=", "gpustat", ".", "new_query", "(", ")", "\n", "for", "gpu_id", "in", "range", "(", "len", "(", "query", ")", ")", ":", "\n", "        ", "gpu", "=", "query", "[", "gpu_id", "]", "\n", "print", "(", "gpu_id", ",", "gpu", ".", "memory_used", ")", "\n", "if", "gpu", ".", "memory_used", "<", "2000", ":", "\n", "            ", "if", "gpu", ".", "utilization", "==", "0", "and", "gpu", ".", "memory_used", "<", "12", "and", "gpu_id", "==", "0", "and", "gpu", ".", "processes", ".", "__len__", "(", ")", "==", "0", ":", "\n", "                ", "os", ".", "system", "(", "f\"tmux kill-session -t GPU{gpu_id}\"", ")", "\n", "", "has", "=", "os", ".", "system", "(", "f\"tmux has-session -t GPU{gpu_id} 2>/dev/null\"", ")", "\n", "if", "not", "int", "(", "has", ")", "==", "0", ":", "\n", "                ", "return", "gpu_id", "\n", "", "", "", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.launcher.job_scheduler_parralel": [[113, 133], ["list", "dict_of_jobs.keys", "len", "list.pop", "launcher.get_first_available_gpu", "print", "os.system", "time.sleep", "launcher.get_first_available_gpu", "print", "time.sleep"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.launcher.get_first_available_gpu", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.launcher.get_first_available_gpu"], ["", "def", "job_scheduler_parralel", "(", "dict_of_jobs", ")", ":", "\n", "    ", "\"\"\"\n    Launch Tmux session each time it finds a free gpu\n    :param dict_of_jobs:\n    \"\"\"", "\n", "keys", "=", "list", "(", "dict_of_jobs", ".", "keys", "(", ")", ")", "\n", "while", "len", "(", "keys", ")", ">", "0", ":", "\n", "        ", "job_key", "=", "keys", ".", "pop", "(", ")", "\n", "job", "=", "dict_of_jobs", "[", "job_key", "]", "\n", "while", "get_first_available_gpu", "(", ")", "<", "0", ":", "\n", "            ", "print", "(", "\"Waiting to find a GPU for \"", ",", "job", ")", "\n", "time", ".", "sleep", "(", "15", ")", "# Sleeps for 30 sec", "\n", "\n", "", "gpu_id", "=", "get_first_available_gpu", "(", ")", "\n", "name_tmux", "=", "f\"GPU{gpu_id}\"", "\n", "cmd", "=", "f\"conda activate python3;  {job} --multi_gpu {gpu_id} 2>&1 | tee  log_terminals/{gpu_id}_{job_key}.txt; tmux kill-session -t {name_tmux}\"", "\n", "CMD", "=", "f'tmux new-session -d -s {name_tmux} \\; send-keys \"{cmd}\" Enter'", "\n", "print", "(", "CMD", ")", "\n", "os", ".", "system", "(", "CMD", ")", "\n", "time", ".", "sleep", "(", "15", ")", "# Sleeps for 30 sec", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.launcher.job_scheduler_sequential": [[135, 157], ["list", "launcher.get_first_available_gpu", "dict_of_jobs.keys", "launcher.get_first_available_gpu", "time.sleep", "len", "os.system", "time.sleep", "list.pop", "print", "os.system", "int"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.launcher.get_first_available_gpu", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.launcher.get_first_available_gpu"], ["", "", "def", "job_scheduler_sequential", "(", "dict_of_jobs", ")", ":", "\n", "    ", "\"\"\"\n    Choose a gpum then launches jobs sequentially on that GPU in tmux sessions.\n    :param dict_of_jobs:\n    \"\"\"", "\n", "keys", "=", "list", "(", "dict_of_jobs", ".", "keys", "(", ")", ")", "\n", "while", "get_first_available_gpu", "(", ")", "<", "0", ":", "\n", "        ", "time", ".", "sleep", "(", "15", ")", "# Sleeps for 30 sec", "\n", "\n", "", "gpu_id", "=", "get_first_available_gpu", "(", ")", "\n", "\n", "while", "len", "(", "keys", ")", ">", "0", ":", "\n", "        ", "has", "=", "os", ".", "system", "(", "f\"tmux has-session -t GPU{gpu_id} 2>/dev/null\"", ")", "\n", "if", "not", "int", "(", "has", ")", "==", "0", ":", "\n", "            ", "job_key", "=", "keys", ".", "pop", "(", ")", "\n", "job", "=", "dict_of_jobs", "[", "job_key", "]", "\n", "name_tmux", "=", "f\"GPU{gpu_id}\"", "\n", "cmd", "=", "f\"conda activate python3;  {job}  2>&1 | tee  log_terminals/{gpu_id}_{job_key}.txt; tmux kill-session -t {name_tmux}\"", "\n", "CMD", "=", "f'tmux new-session -d -s {name_tmux} \\; send-keys \"{cmd}\" Enter'", "\n", "print", "(", "CMD", ")", "\n", "os", ".", "system", "(", "CMD", ")", "\n", "", "time", ".", "sleep", "(", "60", ")", "# Sleeps for 30 sec", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.__init__": [[30, 40], ["object.__init__", "time.time", "trainer_abstract.TrainerAbstract.start_visdom", "trainer_abstract.TrainerAbstract.get_log_paths", "trainer_abstract.TrainerAbstract.init_meters", "trainer_abstract.TrainerAbstract.reset_epoch", "transfer.print_arg", "transfer.print_arg", "transfer.print_arg"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.start_visdom", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.get_log_paths", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.init_meters", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.reset_epoch", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.print_arg", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.print_arg", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.my_utils.print_arg"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "TrainerAbstract", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "start_visdom", "(", ")", "\n", "self", ".", "get_log_paths", "(", ")", "\n", "self", ".", "init_meters", "(", ")", "\n", "self", ".", "reset_epoch", "(", ")", "\n", "if", "not", "opt", ".", "demo", ":", "\n", "            ", "my_utils", ".", "print_arg", "(", "self", ".", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.start_visdom": [[41, 45], ["transfer.Visualizer", "transfer.Visualizer", "transfer.Visualizer"], "methods", ["None"], ["", "", "def", "start_visdom", "(", "self", ")", ":", "\n", "        ", "self", ".", "visualizer", "=", "visualization", ".", "Visualizer", "(", "self", ".", "opt", ".", "visdom_port", ",", "self", ".", "opt", ".", "env", ",", "self", ".", "opt", ".", "http_port", ")", "\n", "self", ".", "opt", ".", "visdom_port", "=", "self", ".", "visualizer", ".", "visdom_port", "\n", "self", ".", "opt", ".", "http_port", "=", "self", ".", "visualizer", ".", "http_port", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.get_log_paths": [[46, 69], ["os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "print", "os.mkdir", "os.path.exists", "print", "os.mkdir"], "methods", ["None"], ["", "def", "get_log_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Define paths to save and reload networks from parsed options\n        :return:\n        \"\"\"", "\n", "\n", "if", "not", "self", ".", "opt", ".", "demo", ":", "\n", "            ", "if", "not", "exists", "(", "\"log\"", ")", ":", "\n", "                ", "print", "(", "\"Creating log folder\"", ")", "\n", "mkdir", "(", "\"log\"", ")", "\n", "", "if", "not", "exists", "(", "self", ".", "opt", ".", "dir_name", ")", ":", "\n", "                ", "print", "(", "\"creating folder  \"", ",", "self", ".", "opt", ".", "dir_name", ")", "\n", "mkdir", "(", "self", ".", "opt", ".", "dir_name", ")", "\n", "\n", "", "", "self", ".", "opt", ".", "log_path", "=", "join", "(", "self", ".", "opt", ".", "dir_name", ",", "\"log.txt\"", ")", "\n", "self", ".", "opt", ".", "optimizer_path", "=", "join", "(", "self", ".", "opt", ".", "dir_name", ",", "'optimizer.pth'", ")", "\n", "self", ".", "opt", ".", "model_path", "=", "join", "(", "self", ".", "opt", ".", "dir_name", ",", "\"network.pth\"", ")", "\n", "self", ".", "opt", ".", "reload_optimizer_path", "=", "\"\"", "\n", "\n", "# # If a network is already created in the directory", "\n", "if", "exists", "(", "self", ".", "opt", ".", "model_path", ")", ":", "\n", "            ", "self", ".", "opt", ".", "reload_model_path", "=", "self", ".", "opt", ".", "model_path", "\n", "self", ".", "opt", ".", "reload_optimizer_path", "=", "self", ".", "opt", ".", "optimizer_path", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.init_meters": [[70, 72], ["transfer.Logs", "transfer.Logs", "transfer.Logs"], "methods", ["None"], ["", "", "def", "init_meters", "(", "self", ")", ":", "\n", "        ", "self", ".", "log", "=", "meter", ".", "Logs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.print_loss_info": [[73, 75], ["None"], "methods", ["None"], ["", "def", "print_loss_info", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.save_network": [[76, 81], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "trainer_abstract.TrainerAbstract.network.state_dict", "trainer_abstract.TrainerAbstract.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save"], ["", "def", "save_network", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"saving net...\"", ")", "\n", "torch", ".", "save", "(", "self", ".", "network", ".", "state_dict", "(", ")", ",", "self", ".", "opt", ".", "model_path", ")", "\n", "torch", ".", "save", "(", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "self", ".", "opt", ".", "optimizer_path", ")", "\n", "print", "(", "\"network saved\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.dump_stats": [[82, 102], ["log_table.update", "print", "open", "f.write", "open", "dict", "dict.pop", "f.write", "os.path.join", "json.dumps", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.update", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dict", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write"], ["", "def", "dump_stats", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Save stats at each epoch\n        \"\"\"", "\n", "\n", "log_table", "=", "{", "\n", "\"epoch\"", ":", "self", ".", "epoch", "+", "1", ",", "\n", "\"lr\"", ":", "self", ".", "opt", ".", "lrate", ",", "\n", "\"env\"", ":", "self", ".", "opt", ".", "env", ",", "\n", "}", "\n", "log_table", ".", "update", "(", "self", ".", "log", ".", "current_epoch", ")", "\n", "print", "(", "log_table", ")", "\n", "with", "open", "(", "self", ".", "opt", ".", "log_path", ",", "\"a\"", ")", "as", "f", ":", "# open and append", "\n", "            ", "f", ".", "write", "(", "\"json_stats: \"", "+", "json", ".", "dumps", "(", "log_table", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "self", ".", "opt", ".", "start_epoch", "=", "self", ".", "epoch", "\n", "with", "open", "(", "join", "(", "self", ".", "opt", ".", "dir_name", ",", "\"options.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "# open and append", "\n", "            ", "save_dict", "=", "dict", "(", "self", ".", "opt", ".", "__dict__", ")", "\n", "save_dict", ".", "pop", "(", "\"device\"", ")", "\n", "f", ".", "write", "(", "json", ".", "dumps", "(", "save_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.print_iteration_stats": [[103, 124], ["time.time", "print", "termcolor.colored", "termcolor.colored", "termcolor.colored", "termcolor.colored", "loss.item", "termcolor.colored", "int", "termcolor.colored"], "methods", ["None"], ["", "", "def", "print_iteration_stats", "(", "self", ",", "loss", ")", ":", "\n", "        ", "\"\"\"\n        print stats at each iteration\n        \"\"\"", "\n", "current_time", "=", "time", ".", "time", "(", ")", "\n", "ellpased_time", "=", "current_time", "-", "self", ".", "start_train_time", "\n", "total_time_estimated", "=", "self", ".", "opt", ".", "nepoch", "*", "(", "self", ".", "datasets", ".", "len_dataset", "/", "self", ".", "opt", ".", "batch_size", ")", "*", "ellpased_time", "/", "(", "\n", "0.00001", "+", "self", ".", "iteration", "+", "1.0", "*", "self", ".", "epoch", "*", "self", ".", "datasets", ".", "len_dataset", "/", "self", ".", "opt", ".", "batch_size", ")", "# regle de 3", "\n", "ETL", "=", "total_time_estimated", "-", "ellpased_time", "\n", "print", "(", "\n", "f\"\\r[\"", "\n", "+", "colored", "(", "f\"{self.epoch}\"", ",", "\"cyan\"", ")", "\n", "+", "f\": \"", "\n", "+", "colored", "(", "f\"{self.iteration}\"", ",", "\"red\"", ")", "\n", "+", "\"/\"", "\n", "+", "colored", "(", "f\"{int(self.datasets.len_dataset / self.opt.batch_size)}\"", ",", "\"red\"", ")", "\n", "+", "\"] chamfer train loss:  \"", "\n", "+", "colored", "(", "f\"{loss.item()} \"", ",", "\"yellow\"", ")", "\n", "+", "colored", "(", "f\"Ellapsed Time: {ellpased_time / 60 / 60}h \"", ",", "\"cyan\"", ")", "\n", "+", "colored", "(", "f\"ETL: {ETL / 60 / 60}h\"", ",", "\"red\"", ")", ",", "\n", "end", "=", "\"\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.learning_rate_scheduler": [[126, 150], ["len", "trainer_abstract.TrainerAbstract.next_learning_rates.pop", "print", "print", "torch.Adam", "torch.Adam", "print", "torch.Adam", "torch.Adam", "print", "torch.Adam", "torch.Adam", "trainer_abstract.TrainerAbstract.network.parameters", "trainer_abstract.TrainerAbstract.network.parameters", "trainer_abstract.TrainerAbstract.network.parameters"], "methods", ["None"], ["", "def", "learning_rate_scheduler", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Defines the learning rate schedule\n        \"\"\"", "\n", "# Warm-up following https://arxiv.org/pdf/1706.02677.pdf", "\n", "if", "len", "(", "self", ".", "next_learning_rates", ")", ">", "0", ":", "\n", "            ", "next_learning_rate", "=", "self", ".", "next_learning_rates", ".", "pop", "(", ")", "\n", "print", "(", "f\"warm-up learning rate {next_learning_rate}\"", ")", "\n", "for", "g", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                ", "g", "[", "'lr'", "]", "=", "next_learning_rate", "\n", "\n", "# Learning rate decay", "\n", "", "", "if", "self", ".", "epoch", "==", "self", ".", "opt", ".", "lr_decay_1", ":", "\n", "            ", "self", ".", "opt", ".", "lrate", "=", "self", ".", "opt", ".", "lrate", "/", "10.0", "\n", "print", "(", "f\"First learning rate decay {self.opt.lrate}\"", ")", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "network", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lrate", ")", "\n", "", "if", "self", ".", "epoch", "==", "self", ".", "opt", ".", "lr_decay_2", ":", "\n", "            ", "self", ".", "opt", ".", "lrate", "=", "self", ".", "opt", ".", "lrate", "/", "10.0", "\n", "print", "(", "f\"Second learning rate decay {self.opt.lrate}\"", ")", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "network", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lrate", ")", "\n", "", "if", "self", ".", "epoch", "==", "self", ".", "opt", ".", "lr_decay_3", ":", "\n", "            ", "self", ".", "opt", ".", "lrate", "=", "self", ".", "opt", ".", "lrate", "/", "10.0", "\n", "print", "(", "f\"Third learning rate decay {self.opt.lrate}\"", ")", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "network", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lrate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.increment_epoch": [[151, 153], ["None"], "methods", ["None"], ["", "", "def", "increment_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "self", ".", "epoch", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.increment_iteration": [[154, 156], ["None"], "methods", ["None"], ["", "def", "increment_iteration", "(", "self", ")", ":", "\n", "        ", "self", ".", "iteration", "=", "self", ".", "iteration", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.reset_iteration": [[157, 159], ["None"], "methods", ["None"], ["", "def", "reset_iteration", "(", "self", ")", ":", "\n", "        ", "self", ".", "iteration", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.reset_epoch": [[160, 162], ["None"], "methods", ["None"], ["", "def", "reset_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "self", ".", "opt", ".", "start_epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_loss.TrainerLoss.__init__": [[26, 28], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TrainerLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_loss.TrainerLoss.build_losses": [[29, 35], ["transfer.chamfer_3DDist", "transfer.chamfer_3DDist"], "methods", ["None"], ["", "def", "build_losses", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Create loss functions.\n        \"\"\"", "\n", "self", ".", "distChamfer", "=", "dist_chamfer_3D", ".", "chamfer_3DDist", "(", ")", "\n", "self", ".", "loss_model", "=", "self", ".", "chamfer_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_loss.TrainerLoss.fuse_primitives": [[36, 46], ["trainer_loss.TrainerLoss.data.pointsReconstructed_prims.transpose().contiguous", "trainer_loss.TrainerLoss.data.pointsReconstructed.view", "trainer_loss.TrainerLoss.data.pointsReconstructed_prims.transpose"], "methods", ["None"], ["", "def", "fuse_primitives", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Merge generated surface elements in a single one and prepare data for Chamfer\n        Input size : batch, prim, 3, npoints\n        Output size : prim, prim*npoints, 3\n        :return:\n        \"\"\"", "\n", "#", "\n", "self", ".", "data", ".", "pointsReconstructed", "=", "self", ".", "data", ".", "pointsReconstructed_prims", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "data", ".", "pointsReconstructed", "=", "self", ".", "data", ".", "pointsReconstructed", ".", "view", "(", "self", ".", "batch_size", ",", "-", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_loss.TrainerLoss.chamfer_loss": [[47, 60], ["trainer_loss.TrainerLoss.data.points.view().contiguous", "trainer_loss.TrainerLoss.data.pointsReconstructed.contiguous().view().contiguous", "trainer_loss.TrainerLoss.distChamfer", "torch.mean", "torch.mean", "transfer.atlasnet.auxiliary.ChamferDistancePytorch.fscore.fscore", "transfer.atlasnet.auxiliary.ChamferDistancePytorch.fscore.fscore", "trainer_loss.TrainerLoss.data.loss_fscore.mean", "trainer_loss.TrainerLoss.data.points.view", "trainer_loss.TrainerLoss.data.pointsReconstructed.contiguous().view", "trainer_loss.TrainerLoss.data.points.size", "trainer_loss.TrainerLoss.data.points.size", "trainer_loss.TrainerLoss.data.pointsReconstructed.contiguous"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.chamfer_python.distChamfer", "home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.fscore.fscore", "home.repos.pwc.inspect_result.itailang_geometric_adv.ChamferDistancePytorch.fscore.fscore"], ["", "def", "chamfer_loss", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Training loss of Atlasnet. The Chamfer Distance. Compute the f-score in eval mode.\n        :return:\n        \"\"\"", "\n", "inCham1", "=", "self", ".", "data", ".", "points", ".", "view", "(", "self", ".", "data", ".", "points", ".", "size", "(", "0", ")", ",", "-", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "inCham2", "=", "self", ".", "data", ".", "pointsReconstructed", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "data", ".", "points", ".", "size", "(", "0", ")", ",", "-", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", "=", "self", ".", "distChamfer", "(", "inCham1", ",", "inCham2", ")", "# mean over points", "\n", "self", ".", "data", ".", "loss", "=", "torch", ".", "mean", "(", "dist1", ")", "+", "torch", ".", "mean", "(", "dist2", ")", "# mean over points", "\n", "if", "not", "self", ".", "flags", ".", "train", ":", "\n", "            ", "self", ".", "data", ".", "loss_fscore", ",", "_", ",", "_", "=", "fscore", "(", "dist1", ",", "dist2", ")", "\n", "self", ".", "data", ".", "loss_fscore", "=", "self", ".", "data", ".", "loss_fscore", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_loss.TrainerLoss.metro": [[61, 92], ["print", "numpy.array().mean", "print", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "open", "file.read().split", "joblib.Parallel", "trainer_loss.TrainerLoss.demo", "trainer_loss.TrainerLoss.metro_args_input.append", "numpy.array", "file.read", "file.split", "joblib.delayed", "file.split"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.demo", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.read"], ["", "", "def", "metro", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Compute the metro distance on a randomly selected test files.\n        Uses joblib to leverage as much cpu as possible\n        :return:\n        \"\"\"", "\n", "metro_path", "=", "'./dataset/data/metro_files'", "\n", "metro_files_path", "=", "'/'", ".", "join", "(", "[", "metro_path", ",", "'files-metro.txt'", "]", ")", "\n", "self", ".", "metro_args_input", "=", "[", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "metro_files_path", ")", ":", "\n", "            ", "os", ".", "system", "(", "\"chmod +x dataset/download_metro_files.sh\"", ")", "\n", "os", ".", "system", "(", "\"./dataset/download_metro_files.sh\"", ")", "\n", "", "ext", "=", "'.png'", "if", "self", ".", "opt", ".", "SVR", "else", "'.npy'", "\n", "with", "open", "(", "metro_files_path", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "files", "=", "file", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "\n", "", "for", "file", "in", "files", ":", "\n", "            ", "if", "file", "[", "-", "3", ":", "]", "==", "\"ply\"", ":", "\n", "                ", "cat", "=", "file", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "name", "=", "file", ".", "split", "(", "'/'", ")", "[", "1", "]", "[", ":", "-", "4", "]", "\n", "input_path", "=", "'/'", ".", "join", "(", "[", "metro_path", ",", "cat", ",", "name", "+", "ext", "]", ")", "\n", "input_path_points", "=", "'/'", ".", "join", "(", "[", "metro_path", ",", "cat", ",", "name", "+", "'.npy'", "]", ")", "\n", "gt_path", "=", "'/'", ".", "join", "(", "[", "metro_path", ",", "cat", ",", "name", "+", "'.ply'", "]", ")", "\n", "path", "=", "self", ".", "demo", "(", "input_path", ",", "input_path_points", ")", "\n", "self", ".", "metro_args_input", ".", "append", "(", "(", "path", ",", "gt_path", ")", ")", "\n", "\n", "", "", "print", "(", "\"start metro calculus. This is going to take some time (30 minutes)\"", ")", "\n", "self", ".", "metro_results", "=", "Parallel", "(", "n_jobs", "=", "-", "1", ",", "backend", "=", "\"multiprocessing\"", ")", "(", "\n", "delayed", "(", "metro", ".", "metro", ")", "(", "*", "i", ")", "for", "i", "in", "self", ".", "metro_args_input", ")", "\n", "self", ".", "metro_results", "=", "np", ".", "array", "(", "self", ".", "metro_results", ")", ".", "mean", "(", ")", "\n", "print", "(", "f\"Metro distance : {self.metro_results}\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.__init__": [[26, 49], ["transfer.atlasnet.training.trainer_abstract.TrainerAbstract.__init__", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "easydict.EasyDict", "easydict.EasyDict", "transfer.ColorMap", "transfer.ColorMap", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"\n        Main Atlasnet class inheriting from the other main modules.\n        It implements all functions related to train and evaluate for an epoch.\n        Author: Thibault Groueix 01.11.2019\n        :param opt:\n        \"\"\"", "\n", "\n", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "self", ".", "dataset_train", "=", "None", "\n", "self", ".", "opt", ".", "training_media_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "dir_name", ",", "\"training_media\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "opt", ".", "training_media_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "opt", ".", "training_media_path", ")", "\n", "\n", "# Define Flags", "\n", "", "self", ".", "flags", "=", "EasyDict", "(", ")", "\n", "self", ".", "flags", ".", "media_count", "=", "0", "\n", "self", ".", "flags", ".", "add_log", "=", "True", "\n", "self", ".", "flags", ".", "build_website", "=", "False", "\n", "self", ".", "flags", ".", "get_closer_neighbourg", "=", "False", "\n", "self", ".", "flags", ".", "compute_clustering_errors", "=", "False", "\n", "self", ".", "display", "=", "EasyDict", "(", "{", "\"recons\"", ":", "[", "]", "}", ")", "\n", "self", ".", "colormap", "=", "mesh_processor", ".", "ColorMap", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.train_loop": [[50, 65], ["trainer.Trainer.datasets.dataloader_train.__iter__", "trainer.Trainer.increment_iteration", "easydict.EasyDict", "trainer.Trainer.data.points.to", "trainer.Trainer.train_iteration", "trainer.Trainer.datasets.data_augmenter"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.__iter__", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.increment_iteration", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.train_iteration"], ["", "def", "train_loop", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Take a single pass on all train data\n        :return:\n        \"\"\"", "\n", "iterator", "=", "self", ".", "datasets", ".", "dataloader_train", ".", "__iter__", "(", ")", "\n", "for", "data", "in", "iterator", ":", "\n", "            ", "self", ".", "increment_iteration", "(", ")", "\n", "self", ".", "data", "=", "EasyDict", "(", "data", ")", "\n", "self", ".", "data", ".", "points", "=", "self", ".", "data", ".", "points", ".", "to", "(", "self", ".", "opt", ".", "device", ")", "\n", "if", "self", ".", "datasets", ".", "data_augmenter", "is", "not", "None", "and", "not", "self", ".", "opt", ".", "SVR", ":", "\n", "# Apply data augmentation on points", "\n", "                ", "self", ".", "datasets", ".", "data_augmenter", "(", "self", ".", "data", ".", "points", ")", "\n", "\n", "", "self", ".", "train_iteration", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.train_epoch": [[66, 82], ["trainer.Trainer.log.reset", "trainer.Trainer.learning_rate_scheduler", "trainer.Trainer.reset_iteration", "range", "trainer.Trainer.network.train", "trainer.Trainer.network.eval", "trainer.Trainer.train_loop"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.reset", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.learning_rate_scheduler", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.reset_iteration", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.train_classifier.train", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.train_loop"], ["", "", "def", "train_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\" Launch an train epoch \"\"\"", "\n", "self", ".", "flags", ".", "train", "=", "True", "\n", "if", "self", ".", "epoch", "==", "(", "self", ".", "opt", ".", "nepoch", "-", "1", ")", "and", "not", "self", ".", "opt", ".", "custom_data", ":", "\n", "# Flag last epoch", "\n", "            ", "self", ".", "flags", ".", "build_website", "=", "True", "\n", "\n", "", "self", ".", "log", ".", "reset", "(", ")", "\n", "if", "not", "self", ".", "opt", ".", "no_learning", ":", "\n", "            ", "self", ".", "network", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "network", ".", "eval", "(", ")", "\n", "", "self", ".", "learning_rate_scheduler", "(", ")", "\n", "self", ".", "reset_iteration", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "loop_per_epoch", ")", ":", "\n", "            ", "self", ".", "train_loop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.test_loop": [[83, 102], ["trainer.Trainer.datasets.dataloader_test.__iter__", "trainer.Trainer.reset_iteration", "trainer.Trainer.increment_iteration", "easydict.EasyDict", "trainer.Trainer.data.points.to", "trainer.Trainer.test_iteration", "trainer.Trainer.test_iteration", "trainer.Trainer.cpu().detach().numpy", "trainer.Trainer.cpu().detach", "trainer.Trainer.cpu"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.__iter__", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.reset_iteration", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.increment_iteration", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.test_iteration", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.test_iteration"], ["", "", "def", "test_loop", "(", "self", ",", "pc_recon", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Take a single pass on all test data\n        :return:\n        \"\"\"", "\n", "iterator", "=", "self", ".", "datasets", ".", "dataloader_test", ".", "__iter__", "(", ")", "\n", "self", ".", "reset_iteration", "(", ")", "\n", "num_iter", "=", "0", "\n", "for", "data", "in", "iterator", ":", "\n", "            ", "self", ".", "increment_iteration", "(", ")", "\n", "self", ".", "data", "=", "EasyDict", "(", "data", ")", "\n", "self", ".", "data", ".", "points", "=", "self", ".", "data", ".", "points", ".", "to", "(", "self", ".", "opt", ".", "device", ")", "\n", "if", "pc_recon", "is", "None", ":", "\n", "                ", "self", ".", "test_iteration", "(", ")", "\n", "", "else", ":", "\n", "                ", "pc_recon_iter", "=", "self", ".", "test_iteration", "(", "return_recon", "=", "True", ")", "\n", "pc_recon", "[", "num_iter", "*", "self", ".", "opt", ".", "batch_size_test", ":", "num_iter", "*", "self", ".", "opt", ".", "batch_size_test", "+", "pc_recon_iter", ".", "shape", "[", "0", "]", "]", "=", "pc_recon_iter", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "num_iter", "+=", "1", "\n", "", "", "return", "pc_recon", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.test_epoch": [[104, 134], ["trainer.Trainer.network.eval", "trainer.Trainer.test_loop", "trainer.Trainer.log.end_epoch", "print", "trainer.Trainer.log.update_curves", "trainer.Trainer.metro", "easydict.EasyDict", "transfer.main", "transfer.main", "print", "trainer.Trainer.generate_random_mesh", "range", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.test_loop", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.end_epoch", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.update_curves", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.metro.metro", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.metro.main", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.metro.main", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.generate_random_mesh"], ["", "def", "test_epoch", "(", "self", ",", "pc_recon", "=", "None", ")", ":", "\n", "        ", "\"\"\" Launch an test epoch \"\"\"", "\n", "self", ".", "flags", ".", "train", "=", "False", "\n", "self", ".", "sum_loss", "=", "0.0", "\n", "self", ".", "sum_fscore", "=", "0.0", "\n", "self", ".", "network", ".", "eval", "(", ")", "\n", "pc_recon", "=", "self", ".", "test_loop", "(", "pc_recon", ")", "\n", "self", ".", "log", ".", "end_epoch", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "log", ".", "update_curves", "(", "self", ".", "visualizer", ".", "vis", ",", "self", ".", "opt", ".", "dir_name", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"could not update curves\"", ")", "\n", "", "print", "(", "f\"Sampled {self.num_val_points} regular points for evaluation\"", ")", "\n", "\n", "self", ".", "metro_results", "=", "0", "\n", "if", "(", "self", ".", "flags", ".", "build_website", "or", "self", ".", "opt", ".", "run_single_eval", ")", "and", "not", "self", ".", "opt", ".", "no_metro", ":", "\n", "            ", "self", ".", "metro", "(", ")", "\n", "\n", "", "if", "self", ".", "flags", ".", "build_website", ":", "\n", "# Build report using Netvision.", "\n", "            ", "self", ".", "html_report_data", "=", "EasyDict", "(", ")", "\n", "self", ".", "html_report_data", ".", "output_meshes", "=", "[", "self", ".", "generate_random_mesh", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "log_curves", "=", "[", "\"loss_val\"", ",", "\"loss_train_total\"", "]", "\n", "self", ".", "html_report_data", ".", "data_curve", "=", "{", "key", ":", "[", "np", ".", "log", "(", "val", ")", "for", "val", "in", "self", ".", "log", ".", "curves", "[", "key", "]", "]", "for", "key", "in", "\n", "log_curves", "}", "\n", "self", ".", "html_report_data", ".", "fscore_curve", "=", "{", "\"fscore\"", ":", "self", ".", "log", ".", "curves", "[", "\"fscore\"", "]", "}", "\n", "html_report", ".", "main", "(", "self", ",", "outHtml", "=", "\"index.html\"", ")", "\n", "\n", "", "return", "pc_recon", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.generate_random_mesh": [[135, 143], ["numpy.random.randint", "easydict.EasyDict", "trainer.Trainer.data.points.unsqueeze_", "trainer.Trainer.generate_mesh", "trainer.Trainer.data.image.unsqueeze_"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.generate_mesh"], ["", "def", "generate_random_mesh", "(", "self", ")", ":", "\n", "        ", "\"\"\" Generate a mesh from a random test sample \"\"\"", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "datasets", ".", "len_dataset_test", ")", "\n", "self", ".", "data", "=", "EasyDict", "(", "self", ".", "datasets", ".", "dataset_test", "[", "index", "]", ")", "\n", "self", ".", "data", ".", "points", ".", "unsqueeze_", "(", "0", ")", "\n", "if", "self", ".", "opt", ".", "SVR", ":", "\n", "            ", "self", ".", "data", ".", "image", ".", "unsqueeze_", "(", "0", ")", "\n", "", "return", "self", ".", "generate_mesh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.generate_mesh": [[144, 157], ["trainer.Trainer.make_network_input", "trainer.Trainer.network.module.generate_mesh", "transfer.save", "transfer.save", "str"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.make_network_input", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.generate_mesh", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save"], ["", "def", "generate_mesh", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generate a mesh from self.data and saves it.\n        :return:\n        \"\"\"", "\n", "self", ".", "make_network_input", "(", ")", "\n", "mesh", "=", "self", ".", "network", ".", "module", ".", "generate_mesh", "(", "self", ".", "data", ".", "network_input", ")", "\n", "path", "=", "'/'", ".", "join", "(", "[", "self", ".", "opt", ".", "training_media_path", ",", "str", "(", "self", ".", "flags", ".", "media_count", ")", "]", ")", "+", "\".obj\"", "\n", "image_path", "=", "'/'", ".", "join", "(", "[", "self", ".", "data", ".", "image_path", ",", "'00.png'", "]", ")", "\n", "mesh_processor", ".", "save", "(", "mesh", ",", "path", ",", "self", ".", "colormap", ")", "\n", "self", ".", "flags", ".", "media_count", "+=", "1", "\n", "return", "{", "\"output_path\"", ":", "path", ",", "\n", "\"image_path\"", ":", "image_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.demo": [[158, 196], ["trainer.Trainer.datasets.dataset_train.load", "easydict.EasyDict", "trainer.Trainer.datasets.dataset_train.load", "easydict.EasyDict", "trainer.Trainer.make_network_input", "trainer.Trainer.network.module.generate_mesh", "print", "transfer.save", "transfer.save", "demo_path.split", "torch.from_numpy().clone().unsqueeze", "easydict.EasyDict.operation.invert", "easydict.EasyDict.operation.apply", "pymesh.form_mesh", "demo_path.split", "torch.from_numpy().clone", "easydict.EasyDict.operation.apply.squeeze().numpy", "str", "torch.from_numpy", "easydict.EasyDict.operation.apply.squeeze"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.make_network_input", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer.Trainer.generate_mesh", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.invert", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.apply"], ["", "def", "demo", "(", "self", ",", "demo_path", ",", "input_path_points", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This function takes an image or pointcloud path as input and save the mesh infered by Atlasnet\n        Extension supported are ply npy obg and png\n        :return: path to the generated mesh\n        \"\"\"", "\n", "ext", "=", "demo_path", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "self", ".", "data", "=", "self", ".", "datasets", ".", "dataset_train", ".", "load", "(", "demo_path", ")", "\n", "self", ".", "data", "=", "EasyDict", "(", "self", ".", "data", ")", "\n", "\n", "if", "input_path_points", "is", "None", ":", "\n", "            ", "input_path_points", "=", "demo_path", "\n", "\n", "#prepare normalization", "\n", "", "get_normalization", "=", "self", ".", "datasets", ".", "dataset_train", ".", "load", "(", "input_path_points", ")", "\n", "get_normalization", "=", "EasyDict", "(", "get_normalization", ")", "\n", "\n", "self", ".", "make_network_input", "(", ")", "\n", "mesh", "=", "self", ".", "network", ".", "module", ".", "generate_mesh", "(", "self", ".", "data", ".", "network_input", ")", "\n", "if", "get_normalization", ".", "operation", "is", "not", "None", ":", "\n", "# Undo any normalization that was used to preprocess the input.", "\n", "            ", "vertices", "=", "torch", ".", "from_numpy", "(", "mesh", ".", "vertices", ")", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "get_normalization", ".", "operation", ".", "invert", "(", ")", "\n", "unnormalized_vertices", "=", "get_normalization", ".", "operation", ".", "apply", "(", "vertices", ")", "\n", "mesh", "=", "pymesh", ".", "form_mesh", "(", "vertices", "=", "unnormalized_vertices", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "faces", "=", "mesh", ".", "faces", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "demo", ":", "\n", "            ", "path", "=", "demo_path", ".", "split", "(", "'.'", ")", "\n", "path", "[", "-", "2", "]", "+=", "\"AtlasnetReconstruction\"", "\n", "path", "[", "-", "1", "]", "=", "\"ply\"", "\n", "path", "=", "\".\"", ".", "join", "(", "path", ")", "\n", "", "else", ":", "\n", "            ", "path", "=", "'/'", ".", "join", "(", "[", "self", ".", "opt", ".", "training_media_path", ",", "str", "(", "self", ".", "flags", ".", "media_count", ")", "]", ")", "+", "\".ply\"", "\n", "self", ".", "flags", ".", "media_count", "+=", "1", "\n", "\n", "", "print", "(", "f\"Atlasnet generated mesh at {path}!\"", ")", "\n", "mesh_processor", ".", "save", "(", "mesh", ",", "path", ",", "self", ".", "colormap", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.__init__": [[10, 12], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TrainerIteration", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.make_network_input": [[13, 22], ["trainer_iteration.TrainerIteration.data.image.to", "trainer_iteration.TrainerIteration.data.points.transpose().contiguous().to", "trainer_iteration.TrainerIteration.data.points.transpose().contiguous", "trainer_iteration.TrainerIteration.data.points.transpose"], "methods", ["None"], ["", "def", "make_network_input", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Arrange to data to be fed to the network.\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "opt", ".", "SVR", ":", "\n", "            ", "self", ".", "data", ".", "network_input", "=", "self", ".", "data", ".", "image", ".", "to", "(", "self", ".", "opt", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", ".", "network_input", "=", "self", ".", "data", ".", "points", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "opt", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.common_ops": [[23, 37], ["trainer_iteration.TrainerIteration.make_network_input", "trainer_iteration.TrainerIteration.data.points.size", "trainer_iteration.TrainerIteration.network", "trainer_iteration.TrainerIteration.fuse_primitives", "trainer_iteration.TrainerIteration.loss_model", "trainer_iteration.TrainerIteration.visualize"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.make_network_input", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_loss.TrainerLoss.fuse_primitives", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.visualize"], ["", "", "def", "common_ops", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Commom operations between train and eval forward passes\n        :return:\n        \"\"\"", "\n", "self", ".", "make_network_input", "(", ")", "\n", "self", ".", "batch_size", "=", "self", ".", "data", ".", "points", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "data", ".", "pointsReconstructed_prims", "=", "self", ".", "network", "(", "self", ".", "data", ".", "network_input", ",", "\n", "train", "=", "self", ".", "flags", ".", "train", ")", "\n", "self", ".", "fuse_primitives", "(", ")", "\n", "\n", "self", ".", "loss_model", "(", ")", "# batch", "\n", "self", ".", "visualize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.train_iteration": [[38, 50], ["trainer_iteration.TrainerIteration.optimizer.zero_grad", "trainer_iteration.TrainerIteration.common_ops", "trainer_iteration.TrainerIteration.log.update", "trainer_iteration.TrainerIteration.print_iteration_stats", "trainer_iteration.TrainerIteration.data.loss.item", "trainer_iteration.TrainerIteration.data.loss.backward", "trainer_iteration.TrainerIteration.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.common_ops", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.update", "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_abstract.TrainerAbstract.print_iteration_stats", "home.repos.pwc.inspect_result.itailang_geometric_adv.chamfer3D.dist_chamfer_3D.chamfer_3DFunction.backward"], ["", "def", "train_iteration", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Forward backward pass\n        :return:\n        \"\"\"", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "common_ops", "(", ")", "\n", "self", ".", "log", ".", "update", "(", "\"loss_train_total\"", ",", "self", ".", "data", ".", "loss", ".", "item", "(", ")", ")", "\n", "if", "not", "self", ".", "opt", ".", "no_learning", ":", "\n", "            ", "self", ".", "data", ".", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "# gradient update", "\n", "", "self", ".", "print_iteration_stats", "(", "self", ".", "data", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.visualize": [[51, 58], ["trainer_iteration.TrainerIteration.visualizer.show_pointcloud", "trainer_iteration.TrainerIteration.visualizer.show_pointcloud", "trainer_iteration.TrainerIteration.visualizer.show_image"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.visualization.Visualizer.show_pointcloud", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.visualization.Visualizer.show_pointcloud", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.visualization.Visualizer.show_image"], ["", "def", "visualize", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iteration", "%", "50", "==", "1", ":", "\n", "            ", "tmp_string", "=", "\"train\"", "if", "self", ".", "flags", ".", "train", "else", "\"test\"", "\n", "self", ".", "visualizer", ".", "show_pointcloud", "(", "self", ".", "data", ".", "points", "[", "0", "]", ",", "title", "=", "f\"GT {tmp_string}\"", ")", "\n", "self", ".", "visualizer", ".", "show_pointcloud", "(", "self", ".", "data", ".", "pointsReconstructed", "[", "0", "]", ",", "title", "=", "f\"Reconstruction {tmp_string}\"", ")", "\n", "if", "self", ".", "opt", ".", "SVR", ":", "\n", "                ", "self", ".", "visualizer", ".", "show_image", "(", "self", ".", "data", ".", "image", "[", "0", "]", ",", "title", "=", "f\"Input Image {tmp_string}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.test_iteration": [[59, 76], ["trainer_iteration.TrainerIteration.common_ops", "trainer_iteration.TrainerIteration.data.pointsReconstructed.size", "trainer_iteration.TrainerIteration.log.update", "trainer_iteration.TrainerIteration.log.update", "print", "trainer_iteration.TrainerIteration.data.loss.item", "trainer_iteration.TrainerIteration.data.loss_fscore.item", "termcolor.colored", "termcolor.colored", "trainer_iteration.TrainerIteration.data.loss.item"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.trainer_iteration.TrainerIteration.common_ops", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.update", "home.repos.pwc.inspect_result.itailang_geometric_adv.auxiliary.meter.Logs.update"], ["", "", "", "def", "test_iteration", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Forward evaluation pass\n        :return:\n        \"\"\"", "\n", "self", ".", "common_ops", "(", ")", "\n", "self", ".", "num_val_points", "=", "self", ".", "data", ".", "pointsReconstructed", ".", "size", "(", "1", ")", "\n", "self", ".", "log", ".", "update", "(", "\"loss_val\"", ",", "self", ".", "data", ".", "loss", ".", "item", "(", ")", ")", "\n", "self", ".", "log", ".", "update", "(", "\"fscore\"", ",", "self", ".", "data", ".", "loss_fscore", ".", "item", "(", ")", ")", "\n", "print", "(", "\n", "'\\r'", "+", "colored", "(", "\n", "'[%d: %d/%d]'", "%", "(", "self", ".", "epoch", ",", "self", ".", "iteration", ",", "self", ".", "datasets", ".", "len_dataset_test", "/", "self", ".", "opt", ".", "batch_size_test", ")", ",", "\n", "'red'", ")", "+", "\n", "colored", "(", "'loss_val:  %f'", "%", "self", ".", "data", ".", "loss", ".", "item", "(", ")", ",", "'yellow'", ")", ",", "\n", "end", "=", "''", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.metro.metro": [[14, 33], ["print", "subprocess.check_output", "returned_output.decode.decode", "returned_output.decode.find", "float", "print", "returned_output.decode.split"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.decode"], ["def", "metro", "(", "path1", ",", "path2", ",", "metro", "=", "'./auxiliary/metro_sources/build/metro'", ")", ":", "\n", "    ", "\"\"\"\n    Run the metro compiled program on two meshes and get the output.\n    :param path1: mesh 1\n    :param path2: mesh 2\n    :param metro: path to metro\n    :return: metro(mesh 1, mesh 2) [float]\n    \"\"\"", "\n", "\n", "print", "(", "f\"calculing {path1}\"", ")", "\n", "cmd", "=", "f\"{metro} {path1} {path2}\"", "\n", "returned_output", "=", "subprocess", ".", "check_output", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "returned_output", "=", "returned_output", ".", "decode", "(", "\"utf-8\"", ")", "\n", "location", "=", "returned_output", ".", "find", "(", "\"Hausdorff\"", ")", "\n", "returned_output", "=", "returned_output", "[", "location", ":", "location", "+", "40", "]", "\n", "distance", "=", "float", "(", "returned_output", ".", "split", "(", "\" \"", ")", "[", "2", "]", ")", "\n", "print", "(", "f\"calculing {path1} Done {distance}!\"", ")", "\n", "\n", "return", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.metro.isolate_files": [[35, 57], ["open", "file.read().split", "pymesh.load_mesh", "numpy.load", "pymesh.save_mesh", "numpy.save", "shutil.copy", "file.read", "file.split", "os.path.exists", "os.mkdir", "file.split"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.read"], ["", "def", "isolate_files", "(", ")", ":", "\n", "    ", "\"\"\"\n    Utility function to generate the metro_file archive. Useless to all users but the author.\n    \"\"\"", "\n", "with", "open", "(", "'./dataset/data/metro_files/files-metro.txt'", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "files", "=", "file", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "", "for", "file", "in", "files", ":", "\n", "        ", "if", "file", "[", "-", "3", ":", "]", "==", "\"ply\"", ":", "\n", "            ", "cat", "=", "file", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "name", "=", "file", ".", "split", "(", "'/'", ")", "[", "1", "]", "[", ":", "-", "4", "]", "\n", "path_points", "=", "'/'", ".", "join", "(", "[", "'.'", ",", "'dataset'", ",", "'data'", ",", "'ShapeNetV1PointCloud'", ",", "cat", ",", "name", "+", "'.points.ply.npy'", "]", ")", "\n", "path_png", "=", "'/'", ".", "join", "(", "[", "'.'", ",", "'dataset'", ",", "'data'", ",", "'ShapeNetV1Renderings'", ",", "cat", ",", "name", ",", "\"rendering\"", ",", "'00.png'", "]", ")", "\n", "\n", "path_obj", "=", "'/'", ".", "join", "(", "[", "''", ",", "'home'", ",", "'thibault'", ",", "'hdd'", ",", "'data'", ",", "'ShapeNetCore.v1'", ",", "cat", ",", "name", ",", "'model.obj'", "]", ")", "\n", "mesh", "=", "pymesh", ".", "load_mesh", "(", "path_obj", ")", "\n", "points", "=", "np", ".", "load", "(", "(", "path_points", ")", ")", "\n", "if", "not", "exists", "(", "'/'", ".", "join", "(", "[", "'.'", ",", "'dataset'", ",", "'data'", ",", "'metro_files'", ",", "cat", "]", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "'/'", ".", "join", "(", "[", "'.'", ",", "'dataset'", ",", "'data'", ",", "'metro_files'", ",", "cat", "]", ")", ")", "\n", "\n", "", "pymesh", ".", "save_mesh", "(", "'/'", ".", "join", "(", "[", "'.'", ",", "'dataset'", ",", "'data'", ",", "'metro_files'", ",", "cat", ",", "name", "+", "'.ply'", "]", ")", ",", "mesh", ",", "ascii", "=", "True", ")", "\n", "np", ".", "save", "(", "'/'", ".", "join", "(", "[", "'.'", ",", "'dataset'", ",", "'data'", ",", "'metro_files'", ",", "cat", ",", "name", "+", "'.npy'", "]", ")", ",", "points", ")", "\n", "copy", "(", "path_png", ",", "'/'", ".", "join", "(", "[", "'.'", ",", "'dataset'", ",", "'data'", ",", "'metro_files'", ",", "cat", ",", "name", "+", "'.png'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.training.metro.main": [[59, 68], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "metro.metro"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.training.metro.metro"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--path1'", ",", "help", "=", "\"Input file\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--path2'", ",", "help", "=", "\"Input file\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--metro'", ",", "type", "=", "str", ",", "help", "=", "'Path to the metro executable'", ",", "\n", "default", "=", "'./metro_sources/build/metro'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "metro", "(", "args", ".", "path1", ",", "args", ".", "path2", ",", "args", ".", "metro", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet_ae.FoldingNetAutoEncoder.__init__": [[30, 34], ["transfer.foldingnet.foldingnet.ChamferLoss", "transfer.foldingnet.foldingnet.FoldingNet_graph"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "_", ")", ":", "\n", "\n", "        ", "self", ".", "chamferloss", "=", "ChamferLoss", "(", ")", "\n", "self", ".", "foldingnet", "=", "FoldingNet_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet_ae.FoldingNetAutoEncoder.restore_model": [[35, 38], ["torch.load", "foldingnet_ae.FoldingNetAutoEncoder.foldingnet.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load"], ["", "def", "restore_model", "(", "self", ",", "transfer_ae_dir", ",", "epoch", ",", "verbose", "=", "None", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "transfer_ae_dir", "+", "'/checkpoint_%s.pth'", "%", "epoch", ")", "\n", "self", ".", "foldingnet", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet_ae.FoldingNetAutoEncoder.get_reconstructions": [[39, 67], ["foldingnet_ae.FoldingNetAutoEncoder.foldingnet.cuda", "foldingnet_ae.FoldingNetAutoEncoder.foldingnet.eval", "numpy.zeros", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "enumerate", "torch.tensor", "print", "transfer.foldingnet.prepare_graph.build_graph", "Cov.cuda.cuda.transpose", "Cov.cuda.cuda.cuda", "torch.autograd.Variable", "pc_input_batch.cuda.cuda.transpose", "pc_input_batch.cuda.cuda.cuda", "foldingnet_ae.FoldingNetAutoEncoder.foldingnet", "pc_recon_batch.transpose.transpose.transpose", "pc_recon_batch.transpose.transpose.cpu().detach().numpy", "pc_recon_batch.transpose.transpose.cpu().detach", "numpy.ceil", "pc_recon_batch.transpose.transpose.cpu"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.prepare_graph.build_graph"], ["", "def", "get_reconstructions", "(", "self", ",", "pc_input", ",", "flags", "=", "None", ")", ":", "\n", "        ", "self", ".", "foldingnet", "=", "self", ".", "foldingnet", ".", "cuda", "(", ")", "\n", "self", ".", "foldingnet", "=", "self", ".", "foldingnet", ".", "eval", "(", ")", "\n", "\n", "pc_recon", "=", "np", ".", "zeros", "(", "[", "pc_input", ".", "shape", "[", "0", "]", ",", "2025", ",", "3", "]", ",", "dtype", "=", "pc_input", ".", "dtype", ")", "\n", "\n", "# In order to prevent out of memory error, work in batches of 8 point clouds", "\n", "batch_size", "=", "4", "\n", "dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "torch", ".", "tensor", "(", "pc_input", ")", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "0", ",", "drop_last", "=", "False", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "dataloader", ",", "0", ")", ":", "\n", "            ", "print", "(", "'Batch %d out of %d'", "%", "(", "i", "+", "1", ",", "np", ".", "ceil", "(", "pc_input", ".", "shape", "[", "0", "]", "/", "batch_size", ")", ")", ")", "\n", "pc_input_batch", "=", "data", "[", "0", "]", "\n", "# build graph", "\n", "batch_graph", ",", "Cov", "=", "build_graph", "(", "pc_input_batch", ")", "\n", "\n", "Cov", "=", "Cov", ".", "transpose", "(", "2", ",", "1", ")", "\n", "Cov", "=", "Cov", ".", "cuda", "(", ")", "\n", "pc_input_batch", "=", "Variable", "(", "pc_input_batch", ")", "\n", "pc_input_batch", "=", "pc_input_batch", ".", "transpose", "(", "2", ",", "1", ")", "\n", "pc_input_batch", "=", "pc_input_batch", ".", "cuda", "(", ")", "\n", "\n", "pc_recon_batch", ",", "mid_pc_batch", ",", "_", "=", "self", ".", "foldingnet", "(", "pc_input_batch", ",", "Cov", ",", "batch_graph", ")", "\n", "pc_recon_batch", "=", "pc_recon_batch", ".", "transpose", "(", "2", ",", "1", ")", "\n", "pc_recon", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", ",", ":", ",", ":", "]", "=", "pc_recon_batch", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "return", "pc_recon", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet_ae.FoldingNetAutoEncoder.get_loss_per_pc": [[68, 88], ["torch.zeros", "loss.cpu().detach().numpy.cpu().detach().numpy.cuda", "foldingnet_ae.FoldingNetAutoEncoder.chamferloss.cuda", "range", "loss.cpu().detach().numpy.cpu().detach().numpy.cpu().detach().numpy", "len", "len", "torch.tensor", "pc_input_ch.cuda.cuda.cuda", "torch.tensor", "target_pc_ch.cuda.cuda.cuda", "foldingnet_ae.FoldingNetAutoEncoder.chamferloss", "loss.cpu().detach().numpy.cpu().detach().numpy.cpu().detach", "loss.cpu().detach().numpy.cpu().detach().numpy.cpu"], "methods", ["None"], ["", "def", "get_loss_per_pc", "(", "self", ",", "pc_input", ",", "target_pc", ")", ":", "\n", "        ", "assert", "len", "(", "pc_input", ".", "shape", ")", "==", "3", ",", "'The pc_input should have 3 dimensions'", "\n", "assert", "len", "(", "target_pc", ".", "shape", ")", "==", "3", ",", "'The target_pc should have 3 dimensions'", "\n", "assert", "pc_input", ".", "shape", "[", "0", "]", "==", "target_pc", ".", "shape", "[", "0", "]", ",", "'Number of point clouds must match'", "\n", "\n", "n_examples", "=", "pc_input", ".", "shape", "[", "0", "]", "\n", "loss", "=", "torch", ".", "zeros", "(", "n_examples", ")", "\n", "loss", "=", "loss", ".", "cuda", "(", ")", "\n", "self", ".", "chamferloss", "=", "self", ".", "chamferloss", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "n_examples", ",", "1", ")", ":", "\n", "            ", "pc_input_ch", "=", "torch", ".", "tensor", "(", "pc_input", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "pc_input_ch", "=", "pc_input_ch", ".", "cuda", "(", ")", "\n", "target_pc_ch", "=", "torch", ".", "tensor", "(", "target_pc", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "target_pc_ch", "=", "target_pc_ch", ".", "cuda", "(", ")", "\n", "\n", "loss", "[", "i", "]", "=", "self", ".", "chamferloss", "(", "pc_input_ch", ",", "target_pc_ch", ")", "\n", "\n", "", "loss", "=", "loss", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.Graph_Pooling.__init__": [[15, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Graph_Pooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.Graph_Pooling.forward": [[18, 55], ["x.size", "x.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.size", "len", "x.size", "A_x.cuda.cuda.cuda", "bth_graph.nonzero", "x_batch.transpose.transpose.transpose", "range", "aa.to.to.to", "A_batch.cuda.cuda.transpose", "numpy.random.choice", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "A_batch.cuda.cuda.cuda", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "batch_graph", ")", ":", "# x: batch, channel, num_of_point. batch_graph: batch", "\n", "        ", "num_points", "=", "x", ".", "size", "(", "2", ")", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "assert", "(", "x", ".", "size", "(", "0", ")", "==", "len", "(", "batch_graph", ")", ")", "\n", "A_x", "=", "torch", ".", "zeros", "(", "x", ".", "size", "(", ")", ")", "\n", "aa", "=", "torch", ".", "zeros", "(", "num_points", ",", "16", ")", "\n", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "A_x", "=", "A_x", ".", "cuda", "(", ")", "\n", "", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "bth_graph", "=", "batch_graph", "[", "b", "]", "\n", "index_b", "=", "bth_graph", ".", "nonzero", "(", ")", "\n", "x_batch", "=", "x", "[", "b", ",", ":", ",", ":", "]", "# channel, num_of_point", "\n", "x_batch", "=", "x_batch", ".", "transpose", "(", "0", ",", "1", ")", "# num_of_point, channel", "\n", "\n", "for", "i", "in", "range", "(", "num_points", ")", ":", "\n", "                ", "idx", "=", "index_b", "[", "0", "]", "==", "i", "\n", "ele", "=", "index_b", "[", "1", "]", "[", "idx", "]", "\n", "rand_idx", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "ele", ")", ",", "16", ",", "replace", "=", "False", ")", "\n", "ele", "=", "ele", "[", "rand_idx", "]", "\n", "aa", "[", "i", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "ele", ")", "\n", "\n", "", "aa", "=", "aa", ".", "to", "(", "torch", ".", "int64", ")", "\n", "A_batch", "=", "x_batch", "[", "aa", "]", "# num_of_point,16,channel", "\n", "if", "x", ".", "is_cuda", ":", "\n", "                ", "A_batch", "=", "A_batch", ".", "cuda", "(", ")", "\n", "", "A_batch", "=", "torch", ".", "max", "(", "A_batch", ",", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "[", "0", "]", "# num_of_point,channel", "\n", "A_x", "[", "b", ",", ":", ",", ":", "]", "=", "A_batch", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "\n", "# for i in range(num_points):", "\n", "#     i_nb_index = bth_graph[i, :].nonzero()[1]  # the ith point's neighbors' index", "\n", "#     A_x[b, :, i] = torch.max(x[b:b+1, :, i_nb_index], dim=2, keepdim=True)[0].view(-1)  # the output size should be 1,channels,1", "\n", "\n", "", "A_x", "=", "torch", ".", "max", "(", "A_x", ",", "x", ")", "# compare to itself", "\n", "\n", "return", "A_x", "# batch,channel,num of point", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.FoldingNetEnc_with_graph.__init__": [[58, 77], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "foldingnet.Graph_Pooling", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FoldingNetEnc_with_graph", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "12", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv5", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "512", ")", "\n", "\n", "self", ".", "graph_pooling", "=", "Graph_Pooling", "(", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "bn6", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.FoldingNetEnc_with_graph.forward": [[78, 105], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "foldingnet.FoldingNetEnc_with_graph.graph_pooling", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "foldingnet.FoldingNetEnc_with_graph.bn5", "foldingnet.FoldingNetEnc_with_graph.view", "torch.relu", "torch.relu", "torch.relu", "foldingnet.FoldingNetEnc_with_graph.fc2", "foldingnet.FoldingNetEnc_with_graph.bn1", "foldingnet.FoldingNetEnc_with_graph.bn2", "foldingnet.FoldingNetEnc_with_graph.bn3", "foldingnet.FoldingNetEnc_with_graph.bn4", "foldingnet.FoldingNetEnc_with_graph.graph_pooling", "foldingnet.FoldingNetEnc_with_graph.conv5", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "foldingnet.FoldingNetEnc_with_graph.bn6", "foldingnet.FoldingNetEnc_with_graph.conv1", "foldingnet.FoldingNetEnc_with_graph.conv2", "foldingnet.FoldingNetEnc_with_graph.conv3", "foldingnet.FoldingNetEnc_with_graph.conv4", "foldingnet.FoldingNetEnc_with_graph.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "Cov", ",", "batch_graph", ")", ":", "# x: batch,3,n; Cov: batch,9,n; batch_graph: batch * scipy.sparse.csr_matrix", "\n", "\n", "        ", "x_cov", "=", "torch", ".", "cat", "(", "(", "x", ",", "Cov", ")", ",", "1", ")", "# x_cov: batch,12,n", "\n", "x_cov", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x_cov", ")", ")", ")", "\n", "x_cov", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x_cov", ")", ")", ")", "\n", "x_cov", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x_cov", ")", ")", ")", "# x_cov : batch,64,n", "\n", "\n", "# A_x = torch.zeros(x_cov.size())", "\n", "# if x_cov.is_cuda:", "\n", "#     A_x = A_x.cuda()", "\n", "# for b in range(batch_size):", "\n", "#     bth_graph = batch_graph[b]", "\n", "#     for i in range(num_points):", "\n", "#         i_nb_index = bth_graph[i, :].nonzero()[0]   # the ith point's neighbors' index", "\n", "#         A_x[b,:,i] = torch.max(x_cov[b, :, i_nb_index], dim = 2, keepdim=True)[0]  # the output size should be 1,64,1", "\n", "\n", "A_x", "=", "self", ".", "graph_pooling", "(", "x_cov", ",", "batch_graph", ")", "# A_x: batch,64,n", "\n", "A_x", "=", "F", ".", "relu", "(", "A_x", ")", "\n", "A_x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "A_x", ")", ")", ")", "# batch,128,n", "\n", "A_x", "=", "F", ".", "relu", "(", "self", ".", "graph_pooling", "(", "A_x", ",", "batch_graph", ")", ")", "# batch,128,n", "\n", "A_x", "=", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "A_x", ")", ")", "# batch,1024,n", "\n", "A_x", "=", "torch", ".", "max", "(", "A_x", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "# batch,1024,1", "\n", "A_x", "=", "A_x", ".", "view", "(", "-", "1", ",", "1024", ")", "# batch,1024", "\n", "A_x", "=", "F", ".", "relu", "(", "self", ".", "bn6", "(", "self", ".", "fc1", "(", "A_x", ")", ")", ")", "# batch,512", "\n", "A_x", "=", "self", ".", "fc2", "(", "A_x", ")", "# batch,512", "\n", "\n", "return", "A_x", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.FoldingNetDecFold1.__init__": [[108, 115], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FoldingNetDecFold1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "514", ",", "512", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "512", ",", "512", ",", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "512", ",", "3", ",", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.FoldingNetDecFold1.forward": [[116, 122], ["foldingnet.FoldingNetDecFold1.relu", "foldingnet.FoldingNetDecFold1.relu", "foldingnet.FoldingNetDecFold1.conv3", "foldingnet.FoldingNetDecFold1.conv1", "foldingnet.FoldingNetDecFold1.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "# input x = batch,514,45^2", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "# x = batch,512,45^2", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.FoldingNetDecFold2.__init__": [[125, 131], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FoldingNetDecFold2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "515", ",", "512", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "512", ",", "512", ",", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "512", ",", "3", ",", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.FoldingNetDecFold2.forward": [[132, 137], ["foldingnet.FoldingNetDecFold2.relu", "foldingnet.FoldingNetDecFold2.relu", "foldingnet.FoldingNetDecFold2.conv3", "foldingnet.FoldingNetDecFold2.conv1", "foldingnet.FoldingNetDecFold2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "# input x = batch,515,45^2", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.FoldingNetDec.__init__": [[160, 164], ["torch.Module.__init__", "foldingnet.FoldingNetDecFold1", "foldingnet.FoldingNetDecFold2"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FoldingNetDec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fold1", "=", "FoldingNetDecFold1", "(", ")", "\n", "self", ".", "fold2", "=", "FoldingNetDecFold2", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.FoldingNetDec.forward": [[165, 190], ["foldingnet.FoldingNetDec.size", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "foldingnet.FoldingNetDec.repeat", "foldingnet.FoldingNetDec.transpose", "foldingnet.GridSamplingLayer", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "foldingnet.FoldingNetDec.transpose", "foldingnet.FoldingNetDec.fold1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "foldingnet.FoldingNetDec.fold2", "grid.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.GridSamplingLayer"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "# input x = batch, 512", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "1", ")", "# x = batch,1,512", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "45", "**", "2", ",", "1", ")", "# x = batch,45^2,512", "\n", "code", "=", "x", "\n", "code", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "# x = batch,512,45^2", "\n", "\n", "meshgrid", "=", "[", "[", "-", "0.3", ",", "0.3", ",", "45", "]", ",", "[", "-", "0.3", ",", "0.3", ",", "45", "]", "]", "\n", "grid", "=", "GridSamplingLayer", "(", "batch_size", ",", "meshgrid", ")", "# grid = batch,45^2,2", "\n", "grid", "=", "torch", ".", "from_numpy", "(", "grid", ")", "\n", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "grid", "=", "grid", ".", "cuda", "(", ")", "\n", "\n", "", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "grid", ")", ",", "2", ")", "# x = batch,45^2,514", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "# x = batch,514,45^2", "\n", "\n", "x", "=", "self", ".", "fold1", "(", "x", ")", "# x = batch,3,45^2", "\n", "p1", "=", "x", "# to observe", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "code", ",", "x", ")", ",", "1", ")", "# x = batch,515,45^2", "\n", "\n", "x", "=", "self", ".", "fold2", "(", "x", ")", "# x = batch,3,45^2", "\n", "\n", "return", "x", ",", "p1", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.FoldingNet_graph.__init__": [[193, 197], ["torch.Module.__init__", "foldingnet.FoldingNetEnc_with_graph", "foldingnet.FoldingNetDec"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FoldingNet_graph", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "FoldingNetEnc_with_graph", "(", ")", "\n", "self", ".", "decoder", "=", "FoldingNetDec", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.FoldingNet_graph.forward": [[198, 207], ["foldingnet.FoldingNet_graph.encoder", "foldingnet.FoldingNet_graph.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "Cov", ",", "batch_graph", ")", ":", "\n", "        ", "'''\n        x: batch,3,n; Cov: batch,9,n; batch_graph: batch * scipy.sparse.csr_matrix\n        '''", "\n", "code", "=", "self", ".", "encoder", "(", "x", ",", "Cov", ",", "batch_graph", ")", "\n", "# code = self.quan(code)", "\n", "x", ",", "x_middle", "=", "self", ".", "decoder", "(", "code", ")", "# x = batch,3,45^2", "\n", "\n", "return", "x", ",", "x_middle", ",", "code", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.ChamferLoss.__init__": [[243, 245], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ChamferLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.ChamferLoss.forward": [[246, 248], ["foldingnet.ChamferDistance"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.ChamferDistance"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "ChamferDistance", "(", "x", ",", "y", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.GridSamplingLayer": [[139, 157], ["numpy.meshgrid", "len", "numpy.zeros", "range", "numpy.repeat", "numpy.reshape", "numpy.prod", "numpy.linspace"], "function", ["None"], ["", "", "def", "GridSamplingLayer", "(", "batch_size", ",", "meshgrid", ")", ":", "\n", "    ", "'''\n    output Grid points as a NxD matrix\n\n    params = {\n    'batch_size': 8\n    'meshgrid': [[-0.3,0.3,45],[-0.3,0.3,45]]\n    }\n    '''", "\n", "\n", "ret", "=", "np", ".", "meshgrid", "(", "*", "[", "np", ".", "linspace", "(", "it", "[", "0", "]", ",", "it", "[", "1", "]", ",", "num", "=", "it", "[", "2", "]", ")", "for", "it", "in", "meshgrid", "]", ")", "\n", "ndim", "=", "len", "(", "meshgrid", ")", "\n", "grid", "=", "np", ".", "zeros", "(", "(", "np", ".", "prod", "(", "[", "it", "[", "2", "]", "for", "it", "in", "meshgrid", "]", ")", ",", "ndim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# MxD", "\n", "for", "d", "in", "range", "(", "ndim", ")", ":", "\n", "        ", "grid", "[", ":", ",", "d", "]", "=", "np", ".", "reshape", "(", "ret", "[", "d", "]", ",", "-", "1", ")", "\n", "", "g", "=", "np", ".", "repeat", "(", "grid", "[", "np", ".", "newaxis", ",", "...", "]", ",", "repeats", "=", "batch_size", ",", "axis", "=", "0", ")", "\n", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.foldingnet.ChamferDistance": [[209, 239], ["x.repeat.size", "y.repeat.size", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "x.repeat.repeat", "y.repeat.repeat", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "", "def", "ChamferDistance", "(", "x", ",", "y", ")", ":", "# for example, x = batch,2025,3 y = batch,2048,3", "\n", "#   compute chamfer distance between tow point clouds x and y", "\n", "\n", "    ", "x_size", "=", "x", ".", "size", "(", ")", "\n", "y_size", "=", "y", ".", "size", "(", ")", "\n", "assert", "(", "x_size", "[", "0", "]", "==", "y_size", "[", "0", "]", ")", "\n", "assert", "(", "x_size", "[", "2", "]", "==", "y_size", "[", "2", "]", ")", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "1", ")", "# x = batch,1,2025,3", "\n", "y", "=", "torch", ".", "unsqueeze", "(", "y", ",", "2", ")", "# y = batch,2048,1,3", "\n", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "y_size", "[", "1", "]", ",", "1", ",", "1", ")", "# x = batch,2048,2025,3", "\n", "y", "=", "y", ".", "repeat", "(", "1", ",", "1", ",", "x_size", "[", "1", "]", ",", "1", ")", "# y = batch,2048,2025,3", "\n", "\n", "x_y", "=", "x", "-", "y", "\n", "x_y", "=", "torch", ".", "pow", "(", "x_y", ",", "2", ")", "# x_y = batch,2048,2025,3", "\n", "x_y", "=", "torch", ".", "sum", "(", "x_y", ",", "3", ",", "keepdim", "=", "True", ")", "# x_y = batch,2048,2025,1", "\n", "x_y", "=", "torch", ".", "squeeze", "(", "x_y", ",", "3", ")", "# x_y = batch,2048,2025", "\n", "x_y_row", ",", "_", "=", "torch", ".", "min", "(", "x_y", ",", "1", ",", "keepdim", "=", "True", ")", "# x_y_row = batch,1,2025", "\n", "x_y_col", ",", "_", "=", "torch", ".", "min", "(", "x_y", ",", "2", ",", "keepdim", "=", "True", ")", "# x_y_col = batch,2048,1", "\n", "\n", "x_y_row", "=", "torch", ".", "mean", "(", "x_y_row", ",", "2", ",", "keepdim", "=", "True", ")", "# x_y_row = batch,1,1", "\n", "x_y_col", "=", "torch", ".", "mean", "(", "x_y_col", ",", "1", ",", "keepdim", "=", "True", ")", "# batch,1,1", "\n", "# x_y_row_col = torch.cat((x_y_row, x_y_col), 2)  # batch,1,2", "\n", "# chamfer_distance, _ = torch.max(x_y_row_col, 2, keepdim=True)  # batch,1,1", "\n", "# # chamfer_distance = torch.reshape(chamfer_distance,(x_size[0],-1))  #batch,1", "\n", "# # chamfer_distance = torch.squeeze(chamfer_distance,1)    # batch", "\n", "# chamfer_distance = torch.mean(chamfer_distance)", "\n", "chamfer_distance", "=", "torch", ".", "mean", "(", "x_y_row", ")", "+", "torch", ".", "mean", "(", "x_y_col", ")", "\n", "\n", "return", "chamfer_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.prepare_graph.GraphOptions.__init__": [[17, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "mode", "=", "\"M\"", "# \"mode used to compute graphs: M, P\"", "\n", "self", ".", "metric", "=", "'euclidean'", "# \"metric for distance calculation (manhattan/euclidean)\"", "\n", "self", ".", "knn", "=", "16", "\n", "self", ".", "num_points", "=", "2048", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.prepare_graph.edges2A": [[24, 43], ["numpy.array().astype", "numpy.zeros", "range", "sparse_mat_type", "len", "mode.upper", "numpy.ones", "numpy.array", "mode.upper", "NotImplementedError", "numpy.where"], "function", ["None"], ["", "", "def", "edges2A", "(", "edges", ",", "n_nodes", ",", "mode", "=", "'P'", ",", "sparse_mat_type", "=", "scipy", ".", "sparse", ".", "csr_matrix", ")", ":", "\n", "    ", "'''\n    note: assume no (i,i)-like edge\n    edges: <2xE>\n    '''", "\n", "edges", "=", "np", ".", "array", "(", "edges", ")", ".", "astype", "(", "int", ")", "\n", "\n", "data_D", "=", "np", ".", "zeros", "(", "n_nodes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "d", "in", "range", "(", "n_nodes", ")", ":", "\n", "        ", "data_D", "[", "d", "]", "=", "len", "(", "np", ".", "where", "(", "edges", "[", "0", "]", "==", "d", ")", "[", "0", "]", ")", "# compute the number of node which pick node_i as their neighbor", "\n", "\n", "", "if", "mode", ".", "upper", "(", ")", "==", "'M'", ":", "# 'M' means max pooling, which use the same graph matrix as the adjacency matrix", "\n", "        ", "data", "=", "np", ".", "ones", "(", "edges", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "elif", "mode", ".", "upper", "(", ")", "==", "'P'", ":", "\n", "        ", "data", "=", "1.", "/", "data_D", "[", "edges", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"edges2A with unknown mode=\"", "+", "mode", ")", "\n", "\n", "", "return", "sparse_mat_type", "(", "(", "data", ",", "edges", ")", ",", "shape", "=", "(", "n_nodes", ",", "n_nodes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.prepare_graph.knn_search": [[45, 74], ["sklearn.neighbors.KDTree", "sklearn.neighbors.KDTree.query", "numpy.zeros", "dict", "range", "numpy.cov().reshape", "range", "numpy.array", "list", "numpy.cov", "dict.keys"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dict"], ["", "def", "knn_search", "(", "data", ",", "knn", "=", "16", ",", "metric", "=", "\"euclidean\"", ",", "symmetric", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      data: Nx3\n      knn: default=16\n    \"\"\"", "\n", "assert", "(", "knn", ">", "0", ")", "\n", "n_data_i", "=", "data", ".", "shape", "[", "0", "]", "\n", "kdt", "=", "KDTree", "(", "data", ",", "leaf_size", "=", "30", ",", "metric", "=", "metric", ")", "\n", "\n", "nbs", "=", "kdt", ".", "query", "(", "data", ",", "k", "=", "knn", "+", "1", ",", "return_distance", "=", "True", ")", "# nbs[0]:NN distance,N*17. nbs[1]:NN index,N*17", "\n", "cov", "=", "np", ".", "zeros", "(", "(", "n_data_i", ",", "9", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "adjdict", "=", "dict", "(", ")", "\n", "# wadj = np.zeros((n_data_i, n_data_i), dtype=np.float32)", "\n", "for", "i", "in", "range", "(", "n_data_i", ")", ":", "\n", "# nbsd = nbs[0][i]", "\n", "        ", "nbsi", "=", "nbs", "[", "1", "]", "[", "i", "]", "#index i, N*17 YW comment", "\n", "cov", "[", "i", "]", "=", "np", ".", "cov", "(", "data", "[", "nbsi", "[", "1", ":", "]", "]", ".", "T", ")", ".", "reshape", "(", "-", "1", ")", "#compute local covariance matrix", "\n", "for", "j", "in", "range", "(", "knn", ")", ":", "\n", "            ", "if", "symmetric", ":", "\n", "                ", "adjdict", "[", "(", "i", ",", "nbsi", "[", "j", "+", "1", "]", ")", "]", "=", "1", "\n", "adjdict", "[", "(", "nbsi", "[", "j", "+", "1", "]", ",", "i", ")", "]", "=", "1", "\n", "# wadj[i, nbsi[j + 1]] = 1.0 / nbsd[j + 1]", "\n", "# wadj[nbsi[j + 1], i] = 1.0 / nbsd[j + 1]", "\n", "", "else", ":", "\n", "                ", "adjdict", "[", "(", "i", ",", "nbsi", "[", "j", "+", "1", "]", ")", "]", "=", "1", "\n", "# wadj[i, nbsi[j + 1]] = 1.0 / nbsd[j + 1]", "\n", "", "", "", "edges", "=", "np", ".", "array", "(", "list", "(", "adjdict", ".", "keys", "(", ")", ")", ",", "dtype", "=", "int", ")", ".", "T", "\n", "return", "edges", ",", "nbs", "[", "0", "]", ",", "cov", "#, wadj", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.prepare_graph.build_graph_core": [[76, 93], ["prepare_graph.knn_search", "prepare_graph.edges2A", "numpy.reshape", "numpy.asarray", "exit"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.prepare_graph.knn_search", "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.prepare_graph.edges2A"], ["", "def", "build_graph_core", "(", "ith_datai", ",", "args", ")", ":", "\n", "    ", "try", ":", "\n", "#ith, xyi = ith_datai #xyi: 2048x3", "\n", "        ", "xyi", "=", "ith_datai", "# xyi: 2048x3", "\n", "n_data_i", "=", "xyi", ".", "shape", "[", "0", "]", "\n", "edges", ",", "nbsd", ",", "cov", "=", "knn_search", "(", "xyi", ",", "knn", "=", "args", ".", "knn", ",", "metric", "=", "args", ".", "metric", ")", "\n", "ith_graph", "=", "edges2A", "(", "edges", ",", "n_data_i", ",", "args", ".", "mode", ",", "sparse_mat_type", "=", "scipy", ".", "sparse", ".", "csr_matrix", ")", "\n", "nbsd", "=", "np", ".", "asarray", "(", "nbsd", ")", "[", ":", ",", "1", ":", "]", "\n", "nbsd", "=", "np", ".", "reshape", "(", "nbsd", ",", "-", "1", ")", "\n", "\n", "#if ith % 500 == 0:", "\n", "#logger.info('{} processed: {}'.format(args.flag, ith))", "\n", "\n", "#return ith, ith_graph, nbsd, cov", "\n", "return", "ith_graph", ",", "nbsd", ",", "cov", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "exit", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.foldingnet.prepare_graph.build_graph": [[95, 115], ["torch.zeros", "multiprocessing.Pool", "functools.partial", "multiproc.Pool.map", "multiproc.Pool.close", "prepare_graph.GraphOptions", "batch_graph.append", "torch.from_numpy"], "function", ["None"], ["", "", "def", "build_graph", "(", "points", ",", "args", "=", "None", ")", ":", "# points: batch, num of points, 3", "\n", "    ", "if", "args", "is", "None", ":", "\n", "        ", "args", "=", "GraphOptions", "(", ")", "# Use default args", "\n", "\n", "", "batch_graph", "=", "[", "]", "\n", "Cov", "=", "torch", ".", "zeros", "(", "points", ".", "shape", "[", "0", "]", ",", "args", ".", "num_points", ",", "9", ")", "\n", "\n", "pool", "=", "multiproc", ".", "Pool", "(", "2", ")", "\n", "pool_func", "=", "partial", "(", "build_graph_core", ",", "args", "=", "args", ")", "\n", "rets", "=", "pool", ".", "map", "(", "pool_func", ",", "points", ")", "\n", "pool", ".", "close", "(", ")", "\n", "count", "=", "0", "\n", "for", "ret", "in", "rets", ":", "\n", "        ", "ith_graph", ",", "_", ",", "cov", "=", "ret", "\n", "batch_graph", ".", "append", "(", "ith_graph", ")", "\n", "Cov", "[", "count", ",", ":", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "cov", ")", "\n", "count", "=", "count", "+", "1", "\n", "", "del", "rets", "\n", "\n", "return", "batch_graph", ",", "Cov", "\n", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.attacker.prepare_indices_for_attack.get_rand_idx": [[70, 87], ["os.join", "numpy.save", "numpy.ones", "numpy.random.seed", "numpy.arange", "numpy.random.shuffle", "min"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save"], ["def", "get_rand_idx", "(", ")", ":", "\n", "# loop over categories", "\n", "    ", "sel_idx", "=", "-", "1", "*", "np", ".", "ones", "(", "[", "num_classes", ",", "flags", ".", "num_instance_per_class", "]", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "\n", "for", "i", "in", "range_num_classes", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "num_examples", "=", "slice_idx", "[", "i", "+", "1", "]", "-", "slice_idx", "[", "i", "]", "\n", "perm", "=", "np", ".", "arange", "(", "num_examples", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "perm", ")", "\n", "\n", "num_instances", "=", "min", "(", "flags", ".", "num_instance_per_class", ",", "num_examples", ")", "\n", "sel_idx", "[", "i", ",", ":", "num_instances", "]", "=", "perm", "[", ":", "flags", ".", "num_instance_per_class", "]", "\n", "\n", "", "sel_idx_file_name", "=", "'_'", ".", "join", "(", "[", "'sel_idx'", ",", "'rand'", ",", "'%d'", "%", "flags", ".", "num_instance_per_class", "]", "+", "file_name_parts", "[", "-", "3", ":", "]", ")", "\n", "sel_idx_file_path", "=", "osp", ".", "join", "(", "data_path", ",", "sel_idx_file_name", ")", "\n", "np", ".", "save", "(", "sel_idx_file_path", ",", "sel_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.attacker.prepare_indices_for_attack.get_latent_nn": [[89, 102], ["src.general_utils.get_dist_mat", "os.join", "numpy.save", "prepare_indices_for_attack.sort_dist_mat", "os.join", "numpy.save"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.general_utils.get_dist_mat", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.attacker.prepare_indices_for_attack.sort_dist_mat", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save"], ["", "def", "get_latent_nn", "(", ")", ":", "\n", "    ", "latent_dist_mat", "=", "get_dist_mat", "(", "latent_vectors", ")", "\n", "\n", "latent_dist_mat_file_name", "=", "'_'", ".", "join", "(", "[", "'latent_dist_mat'", "]", "+", "file_name_parts", "[", "-", "3", ":", "]", ")", "\n", "latent_dist_mat_file_path", "=", "osp", ".", "join", "(", "data_path", ",", "latent_dist_mat_file_name", ")", "\n", "np", ".", "save", "(", "latent_dist_mat_file_path", ",", "latent_dist_mat", ")", "\n", "\n", "# nearest neighbors indices", "\n", "latent_nn_idx", "=", "sort_dist_mat", "(", "latent_dist_mat", ")", "\n", "\n", "latent_nn_idx_file_name", "=", "'_'", ".", "join", "(", "[", "'latent_nn_idx'", "]", "+", "file_name_parts", "[", "-", "3", ":", "]", ")", "\n", "latent_nn_idx_file_path", "=", "osp", ".", "join", "(", "data_path", ",", "latent_nn_idx_file_name", ")", "\n", "np", ".", "save", "(", "latent_nn_idx_file_path", ",", "latent_nn_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.attacker.prepare_indices_for_attack.get_chamfer_nn": [[104, 165], ["time.time", "src.tf_utils.reset_tf_graph", "tensorflow.placeholder", "tensorflow.placeholder", "external.structural_losses.tf_nndistance.nn_distance", "tensorflow.Session", "len", "numpy.tile", "numpy.tile", "range", "os.join", "os.exists", "numpy.save", "print", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "numpy.ones", "numpy.expand_dims", "numpy.expand_dims", "range", "chamfer_dist_mat_curr.min", "numpy.load", "time.time", "np.load.min", "prepare_indices_for_attack.sort_dist_mat", "os.join", "numpy.save", "numpy.reshape", "numpy.reshape", "tf.Session.run", "numpy.reshape", "numpy.ones", "min"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.src.tf_utils.reset_tf_graph", "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_nndistance.nn_distance", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.attacker.prepare_indices_for_attack.sort_dist_mat", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save"], ["", "def", "get_chamfer_nn", "(", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "num_examples_all", ",", "num_points", ",", "_", "=", "point_clouds", ".", "shape", "\n", "chamfer_batch_size", "=", "10", "\n", "\n", "# build chamfer graph", "\n", "reset_tf_graph", "(", ")", "\n", "source_pc_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "num_points", ",", "3", "]", ")", "\n", "target_pc_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "num_points", ",", "3", "]", ")", "\n", "dists_s_t", ",", "_", ",", "dists_t_s", ",", "_", "=", "nn_distance", "(", "source_pc_pl", ",", "target_pc_pl", ")", "\n", "chamfer_dist", "=", "tf", ".", "reduce_mean", "(", "dists_s_t", ",", "axis", "=", "1", ")", "+", "tf", ".", "reduce_mean", "(", "dists_t_s", ",", "axis", "=", "1", ")", "\n", "\n", "sess", "=", "tf", ".", "Session", "(", "''", ")", "\n", "\n", "# compute chamfer distance matrix", "\n", "point_clouds_curr", "=", "point_clouds", "[", "flags", ".", "pc_start_idx", ":", "flags", ".", "pc_start_idx", "+", "flags", ".", "pc_batch_size", "]", "\n", "num_examples_curr", "=", "len", "(", "point_clouds_curr", ")", "\n", "chamfer_dist_mat_curr", "=", "-", "1", "*", "np", ".", "ones", "(", "[", "num_examples_all", ",", "num_examples_curr", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "source_pc", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "point_clouds_curr", ",", "axis", "=", "0", ")", ",", "[", "num_examples_all", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "target_pc", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "point_clouds", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "num_examples_curr", ",", "1", ",", "1", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "num_examples_all", ",", "chamfer_batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "num_examples_curr", ",", "chamfer_batch_size", ")", ":", "\n", "#print('i %d out of %d, j %d out of %d' %", "\n", "#      (min(i + chamfer_batch_size, num_examples_all), num_examples_all, min(j + chamfer_batch_size, num_examples_curr), num_examples_curr))", "\n", "\n", "            ", "sources", "=", "source_pc", "[", "i", ":", "i", "+", "chamfer_batch_size", ",", "j", ":", "j", "+", "chamfer_batch_size", "]", "\n", "targets", "=", "target_pc", "[", "i", ":", "i", "+", "chamfer_batch_size", ",", "j", ":", "j", "+", "chamfer_batch_size", "]", "\n", "\n", "s_batch", "=", "np", ".", "reshape", "(", "sources", ",", "[", "-", "1", ",", "num_points", ",", "3", "]", ")", "\n", "t_batch", "=", "np", ".", "reshape", "(", "targets", ",", "[", "-", "1", ",", "num_points", ",", "3", "]", ")", "\n", "feed_dict", "=", "{", "source_pc_pl", ":", "s_batch", ",", "target_pc_pl", ":", "t_batch", "}", "\n", "dist_batch", "=", "sess", ".", "run", "(", "chamfer_dist", ",", "feed_dict", "=", "feed_dict", ")", "\n", "dist_batch_reshape", "=", "np", ".", "reshape", "(", "dist_batch", ",", "sources", ".", "shape", "[", ":", "2", "]", ")", "\n", "chamfer_dist_mat_curr", "[", "i", ":", "i", "+", "chamfer_batch_size", ",", "j", ":", "j", "+", "chamfer_batch_size", "]", "=", "dist_batch_reshape", "\n", "\n", "", "", "assert", "chamfer_dist_mat_curr", ".", "min", "(", ")", ">=", "0", ",", "'the chamfer_dist_mat_curr matrix was not filled correctly'", "\n", "\n", "# save current chamfer distance data", "\n", "chamfer_dist_mat_file_name", "=", "'_'", ".", "join", "(", "[", "'chamfer_dist_mat_complete'", "]", "+", "file_name_parts", "[", "-", "3", ":", "]", ")", "\n", "chamfer_dist_mat_file_path", "=", "osp", ".", "join", "(", "data_path", ",", "chamfer_dist_mat_file_name", ")", "\n", "if", "osp", ".", "exists", "(", "chamfer_dist_mat_file_path", ")", ":", "\n", "        ", "chamfer_dist_mat", "=", "np", ".", "load", "(", "chamfer_dist_mat_file_path", ")", "\n", "", "else", ":", "\n", "        ", "chamfer_dist_mat", "=", "-", "1", "*", "np", ".", "ones", "(", "[", "num_examples_all", ",", "num_examples_all", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "chamfer_dist_mat", "[", ":", ",", "flags", ".", "pc_start_idx", ":", "flags", ".", "pc_start_idx", "+", "flags", ".", "pc_batch_size", "]", "=", "chamfer_dist_mat_curr", "\n", "np", ".", "save", "(", "chamfer_dist_mat_file_path", ",", "chamfer_dist_mat", ")", "\n", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "'start index %d end index %d, out of size %d, duration (minutes): %.2f'", "%", "\n", "(", "flags", ".", "pc_start_idx", ",", "min", "(", "flags", ".", "pc_start_idx", "+", "flags", ".", "pc_batch_size", ",", "num_examples_all", ")", ",", "num_examples_all", ",", "duration", "/", "60.0", ")", ")", "\n", "\n", "if", "chamfer_dist_mat", ".", "min", "(", ")", ">=", "0", ":", "\n", "# nearest neighbors indices", "\n", "        ", "chamfer_nn_idx", "=", "sort_dist_mat", "(", "chamfer_dist_mat", ")", "\n", "\n", "chamfer_nn_idx_file_name", "=", "'_'", ".", "join", "(", "[", "'chamfer_nn_idx_complete'", "]", "+", "file_name_parts", "[", "-", "3", ":", "]", ")", "\n", "chamfer_nn_idx_file_path", "=", "osp", ".", "join", "(", "data_path", ",", "chamfer_nn_idx_file_name", ")", "\n", "np", ".", "save", "(", "chamfer_nn_idx_file_path", ",", "chamfer_nn_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.attacker.prepare_indices_for_attack.sort_dist_mat": [[167, 181], ["numpy.ones", "nn_idx.min", "numpy.argsort().astype", "numpy.argsort"], "function", ["None"], ["", "", "def", "sort_dist_mat", "(", "dist_mat", ")", ":", "\n", "    ", "nn_idx", "=", "-", "1", "*", "np", ".", "ones", "(", "dist_mat", ".", "shape", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "\n", "# sorting indices (in ascending order) for each pair of source and target classes. Note:", "\n", "# 1. the indices start from 0 for each pair", "\n", "# 2. for same source and target classes (intra class), for each instance the smallest distance is 0. thus, the first index should be discarded", "\n", "for", "i", "in", "range_num_classes", ":", "\n", "        ", "for", "j", "in", "range_num_classes", ":", "\n", "            ", "dist_mat_source_target", "=", "dist_mat", "[", "slice_idx", "[", "i", "]", ":", "slice_idx", "[", "i", "+", "1", "]", ",", "slice_idx", "[", "j", "]", ":", "slice_idx", "[", "j", "+", "1", "]", "]", "\n", "sort_idx", "=", "np", ".", "argsort", "(", "dist_mat_source_target", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "int16", ")", "\n", "nn_idx", "[", "slice_idx", "[", "i", "]", ":", "slice_idx", "[", "i", "+", "1", "]", ",", "slice_idx", "[", "j", "]", ":", "slice_idx", "[", "j", "+", "1", "]", "]", "=", "sort_idx", "\n", "\n", "", "", "assert", "nn_idx", ".", "min", "(", ")", ">=", "0", ",", "'the nn_idx matrix was not filled correctly'", "\n", "return", "nn_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyParseError.__init__": [[131, 147], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["def", "__init__", "(", "self", ",", "message", ",", "element", "=", "None", ",", "row", "=", "None", ",", "prop", "=", "None", ")", ":", "\n", "        ", "self", ".", "message", "=", "message", "\n", "self", ".", "element", "=", "element", "\n", "self", ".", "row", "=", "row", "\n", "self", ".", "prop", "=", "prop", "\n", "\n", "s", "=", "''", "\n", "if", "self", ".", "element", ":", "\n", "            ", "s", "+=", "'element %r: '", "%", "self", ".", "element", ".", "name", "\n", "", "if", "self", ".", "row", "is", "not", "None", ":", "\n", "            ", "s", "+=", "'row %d: '", "%", "self", ".", "row", "\n", "", "if", "self", ".", "prop", ":", "\n", "            ", "s", "+=", "'property %r: '", "%", "self", ".", "prop", ".", "name", "\n", "", "s", "+=", "self", ".", "message", "\n", "\n", "Exception", ".", "__init__", "(", "self", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyParseError.__repr__": [[148, 151], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyParseError(%r, element=%r, row=%r, prop=%r)'", "%", "\n", "self", ".", "message", ",", "self", ".", "element", ",", "self", ".", "row", ",", "self", ".", "prop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.__init__": [[165, 192], ["list", "list"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "elements", "=", "[", "]", ",", "text", "=", "False", ",", "byte_order", "=", "'='", ",", "\n", "comments", "=", "[", "]", ",", "obj_info", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        elements: sequence of PlyElement instances.\n\n        text: whether the resulting PLY file will be text (True) or\n            binary (False).\n\n        byte_order: '<' for little-endian, '>' for big-endian, or '='\n            for native.  This is only relevant if `text' is False.\n\n        comments: sequence of strings that will be placed in the header\n            between the 'ply' and 'format ...' lines.\n\n        obj_info: like comments, but will be placed in the header with\n            \"obj_info ...\" instead of \"comment ...\".\n\n        '''", "\n", "if", "byte_order", "==", "'='", "and", "not", "text", ":", "\n", "            ", "byte_order", "=", "_native_byte_order", "\n", "\n", "", "self", ".", "byte_order", "=", "byte_order", "\n", "self", ".", "text", "=", "text", "\n", "\n", "self", ".", "comments", "=", "list", "(", "comments", ")", "\n", "self", ".", "obj_info", "=", "list", "(", "obj_info", ")", "\n", "self", ".", "elements", "=", "elements", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData._get_elements": [[193, 195], ["None"], "methods", ["None"], ["", "def", "_get_elements", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_elements", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData._set_elements": [[196, 199], ["tuple", "plyfile.PlyData._index"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._index"], ["", "def", "_set_elements", "(", "self", ",", "elements", ")", ":", "\n", "        ", "self", ".", "_elements", "=", "tuple", "(", "elements", ")", "\n", "self", ".", "_index", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData._get_byte_order": [[202, 204], ["None"], "methods", ["None"], ["def", "_get_byte_order", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_byte_order", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData._set_byte_order": [[205, 210], ["ValueError"], "methods", ["None"], ["", "def", "_set_byte_order", "(", "self", ",", "byte_order", ")", ":", "\n", "        ", "if", "byte_order", "not", "in", "[", "'<'", ",", "'>'", ",", "'='", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"byte order must be '<', '>', or '='\"", ")", "\n", "\n", "", "self", ".", "_byte_order", "=", "byte_order", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData._index": [[213, 218], ["dict", "len", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dict"], ["def", "_index", "(", "self", ")", ":", "\n", "        ", "self", ".", "_element_lookup", "=", "dict", "(", "(", "elt", ".", "name", ",", "elt", ")", "for", "elt", "in", "\n", "self", ".", "_elements", ")", "\n", "if", "len", "(", "self", ".", "_element_lookup", ")", "!=", "len", "(", "self", ".", "_elements", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"two elements with same name\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData._parse_header": [[219, 273], ["plyfile.PlyData", "stream.readline().decode().strip", "plyfile._split_line", "plyfile.PlyParseError", "comments.keys", "comments[].append", "plyfile.PlyParseError", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "plyfile.PlyParseError", "comments[].append", "plyfile.PlyElement._parse_multi", "len", "comments.keys", "stream.readline().decode", "comments.keys", "lines.append", "lines.append", "stream.readline().decode().strip.split", "stream.readline"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile._split_line", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._parse_multi", "home.repos.pwc.inspect_result.itailang_geometric_adv.src.autoencoder.AutoEncoder.decode"], ["", "", "@", "staticmethod", "\n", "def", "_parse_header", "(", "stream", ")", ":", "\n", "        ", "'''\n        Parse a PLY header from a readable file-like stream.\n\n        '''", "\n", "lines", "=", "[", "]", "\n", "comments", "=", "{", "'comment'", ":", "[", "]", ",", "'obj_info'", ":", "[", "]", "}", "\n", "while", "True", ":", "\n", "            ", "line", "=", "stream", ".", "readline", "(", ")", ".", "decode", "(", "'ascii'", ")", ".", "strip", "(", ")", "\n", "fields", "=", "_split_line", "(", "line", ",", "1", ")", "\n", "\n", "if", "fields", "[", "0", "]", "==", "'end_header'", ":", "\n", "                ", "break", "\n", "\n", "", "elif", "fields", "[", "0", "]", "in", "comments", ".", "keys", "(", ")", ":", "\n", "                ", "lines", ".", "append", "(", "fields", ")", "\n", "", "else", ":", "\n", "                ", "lines", ".", "append", "(", "line", ".", "split", "(", ")", ")", "\n", "\n", "", "", "a", "=", "0", "\n", "if", "lines", "[", "a", "]", "!=", "[", "'ply'", "]", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected 'ply'\"", ")", "\n", "\n", "", "a", "+=", "1", "\n", "while", "lines", "[", "a", "]", "[", "0", "]", "in", "comments", ".", "keys", "(", ")", ":", "\n", "            ", "comments", "[", "lines", "[", "a", "]", "[", "0", "]", "]", ".", "append", "(", "lines", "[", "a", "]", "[", "1", "]", ")", "\n", "a", "+=", "1", "\n", "\n", "", "if", "lines", "[", "a", "]", "[", "0", "]", "!=", "'format'", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected 'format'\"", ")", "\n", "\n", "", "if", "lines", "[", "a", "]", "[", "2", "]", "!=", "'1.0'", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected version '1.0'\"", ")", "\n", "\n", "", "if", "len", "(", "lines", "[", "a", "]", ")", "!=", "3", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"too many fields after 'format'\"", ")", "\n", "\n", "", "fmt", "=", "lines", "[", "a", "]", "[", "1", "]", "\n", "\n", "if", "fmt", "not", "in", "_byte_order_map", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"don't understand format %r\"", "%", "fmt", ")", "\n", "\n", "", "byte_order", "=", "_byte_order_map", "[", "fmt", "]", "\n", "text", "=", "fmt", "==", "'ascii'", "\n", "\n", "a", "+=", "1", "\n", "while", "a", "<", "len", "(", "lines", ")", "and", "lines", "[", "a", "]", "[", "0", "]", "in", "comments", ".", "keys", "(", ")", ":", "\n", "            ", "comments", "[", "lines", "[", "a", "]", "[", "0", "]", "]", ".", "append", "(", "lines", "[", "a", "]", "[", "1", "]", ")", "\n", "a", "+=", "1", "\n", "\n", "", "return", "PlyData", "(", "PlyElement", ".", "_parse_multi", "(", "lines", "[", "a", ":", "]", ")", ",", "\n", "text", ",", "byte_order", ",", "\n", "comments", "[", "'comment'", "]", ",", "comments", "[", "'obj_info'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.read": [[274, 290], ["plyfile._open_stream", "plyfile.PlyData._parse_header", "elt._read", "stream.close"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile._open_stream", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData._parse_header", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._read"], ["", "@", "staticmethod", "\n", "def", "read", "(", "stream", ")", ":", "\n", "        ", "'''\n        Read PLY data from a readable file-like object or filename.\n\n        '''", "\n", "(", "must_close", ",", "stream", ")", "=", "_open_stream", "(", "stream", ",", "'read'", ")", "\n", "try", ":", "\n", "            ", "data", "=", "PlyData", ".", "_parse_header", "(", "stream", ")", "\n", "for", "elt", "in", "data", ":", "\n", "                ", "elt", ".", "_read", "(", "stream", ",", "data", ".", "text", ",", "data", ".", "byte_order", ")", "\n", "", "", "finally", ":", "\n", "            ", "if", "must_close", ":", "\n", "                ", "stream", ".", "close", "(", ")", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write": [[291, 305], ["plyfile._open_stream", "stream.write", "stream.write", "plyfile.PlyData.header.encode", "elt._write", "stream.close"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile._open_stream", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._write"], ["", "def", "write", "(", "self", ",", "stream", ")", ":", "\n", "        ", "'''\n        Write PLY data to a writeable file-like object or filename.\n\n        '''", "\n", "(", "must_close", ",", "stream", ")", "=", "_open_stream", "(", "stream", ",", "'write'", ")", "\n", "try", ":", "\n", "            ", "stream", ".", "write", "(", "self", ".", "header", ".", "encode", "(", "'ascii'", ")", ")", "\n", "stream", ".", "write", "(", "b'\\r\\n'", ")", "\n", "for", "elt", "in", "self", ":", "\n", "                ", "elt", ".", "_write", "(", "stream", ",", "self", ".", "text", ",", "self", ".", "byte_order", ")", "\n", "", "", "finally", ":", "\n", "            ", "if", "must_close", ":", "\n", "                ", "stream", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.header": [[306, 332], ["lines.extend", "lines.append", "lines.append", "lines.append", "lines.append", "lines.append"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "header", "(", "self", ")", ":", "\n", "        ", "'''\n        Provide PLY-formatted metadata for the instance.\n\n        '''", "\n", "lines", "=", "[", "'ply'", "]", "\n", "\n", "if", "self", ".", "text", ":", "\n", "            ", "lines", ".", "append", "(", "'format ascii 1.0'", ")", "\n", "", "else", ":", "\n", "            ", "lines", ".", "append", "(", "'format '", "+", "\n", "_byte_order_reverse", "[", "self", ".", "byte_order", "]", "+", "\n", "' 1.0'", ")", "\n", "\n", "# Some information is lost here, since all comments are placed", "\n", "# between the 'format' line and the first element.", "\n", "", "for", "c", "in", "self", ".", "comments", ":", "\n", "            ", "lines", ".", "append", "(", "'comment '", "+", "c", ")", "\n", "\n", "", "for", "c", "in", "self", ".", "obj_info", ":", "\n", "            ", "lines", ".", "append", "(", "'obj_info '", "+", "c", ")", "\n", "\n", "", "lines", ".", "extend", "(", "elt", ".", "header", "for", "elt", "in", "self", ".", "elements", ")", "\n", "lines", ".", "append", "(", "'end_header'", ")", "\n", "return", "'\\r\\n'", ".", "join", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.__iter__": [[333, 335], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.__len__": [[336, 338], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.__contains__": [[339, 341], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "name", "in", "self", ".", "_element_lookup", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.__getitem__": [[342, 344], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_element_lookup", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.__str__": [[345, 347], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.__repr__": [[348, 353], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyData(%r, text=%r, byte_order=%r, '", "\n", "'comments=%r, obj_info=%r)'", "%", "\n", "(", "self", ".", "elements", ",", "self", ".", "text", ",", "self", ".", "byte_order", ",", "\n", "self", ".", "comments", ",", "self", ".", "obj_info", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement.__init__": [[379, 398], ["str", "plyfile.PlyElement._check_name", "tuple", "plyfile.PlyElement._index", "list", "any", "isinstance"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty._check_name", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._index"], ["def", "__init__", "(", "self", ",", "name", ",", "properties", ",", "count", ",", "comments", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        This is not part of the public interface.  The preferred methods\n        of obtaining PlyElement instances are PlyData.read (to read from\n        a file) and PlyElement.describe (to construct from a numpy\n        array).\n\n        '''", "\n", "self", ".", "_name", "=", "str", "(", "name", ")", "\n", "self", ".", "_check_name", "(", ")", "\n", "self", ".", "_count", "=", "count", "\n", "\n", "self", ".", "_properties", "=", "tuple", "(", "properties", ")", "\n", "self", ".", "_index", "(", ")", "\n", "\n", "self", ".", "comments", "=", "list", "(", "comments", ")", "\n", "\n", "self", ".", "_have_list", "=", "any", "(", "isinstance", "(", "p", ",", "PlyListProperty", ")", "\n", "for", "p", "in", "self", ".", "properties", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement.count": [[399, 402], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "count", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_count", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._get_data": [[403, 405], ["None"], "methods", ["None"], ["", "def", "_get_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._set_data": [[406, 410], ["len", "plyfile.PlyElement._check_sanity"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._check_sanity"], ["", "def", "_set_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "_data", "=", "data", "\n", "self", ".", "_count", "=", "len", "(", "data", ")", "\n", "self", ".", "_check_sanity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._check_sanity": [[413, 417], ["ValueError"], "methods", ["None"], ["def", "_check_sanity", "(", "self", ")", ":", "\n", "        ", "for", "prop", "in", "self", ".", "properties", ":", "\n", "            ", "if", "prop", ".", "name", "not", "in", "self", ".", "_data", ".", "dtype", ".", "fields", ":", "\n", "                ", "raise", "ValueError", "(", "\"dangling property %r\"", "%", "prop", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._get_properties": [[418, 420], ["None"], "methods", ["None"], ["", "", "", "def", "_get_properties", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_properties", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._set_properties": [[421, 425], ["tuple", "plyfile.PlyElement._check_sanity", "plyfile.PlyElement._index"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._check_sanity", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._index"], ["", "def", "_set_properties", "(", "self", ",", "properties", ")", ":", "\n", "        ", "self", ".", "_properties", "=", "tuple", "(", "properties", ")", "\n", "self", ".", "_check_sanity", "(", ")", "\n", "self", ".", "_index", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._index": [[428, 433], ["dict", "len", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.netvision.HtmlGenerator.HtmlGenerator.dict"], ["def", "_index", "(", "self", ")", ":", "\n", "        ", "self", ".", "_property_lookup", "=", "dict", "(", "(", "prop", ".", "name", ",", "prop", ")", "\n", "for", "prop", "in", "self", ".", "_properties", ")", "\n", "if", "len", "(", "self", ".", "_property_lookup", ")", "!=", "len", "(", "self", ".", "_properties", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"two properties with same name\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement.ply_property": [[434, 436], ["None"], "methods", ["None"], ["", "", "def", "ply_property", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_property_lookup", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement.name": [[437, 440], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._check_name": [[441, 445], ["any", "ValueError", "c.isspace"], "methods", ["None"], ["", "def", "_check_name", "(", "self", ")", ":", "\n", "        ", "if", "any", "(", "c", ".", "isspace", "(", ")", "for", "c", "in", "self", ".", "_name", ")", ":", "\n", "            ", "msg", "=", "\"element name %r contains spaces\"", "%", "self", ".", "_name", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement.dtype": [[446, 456], ["prop.dtype"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "", "def", "dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "'''\n        Return the numpy dtype of the in-memory representation of the\n        data.  (If there are no list properties, and the PLY format is\n        binary, then this also accurately describes the on-disk\n        representation of the element.)\n\n        '''", "\n", "return", "[", "(", "prop", ".", "name", ",", "prop", ".", "dtype", "(", "byte_order", ")", ")", "\n", "for", "prop", "in", "self", ".", "properties", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._parse_multi": [[457, 469], ["plyfile.PlyElement._parse_one", "elements.append"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty._parse_one"], ["", "@", "staticmethod", "\n", "def", "_parse_multi", "(", "header_lines", ")", ":", "\n", "        ", "'''\n        Parse a list of PLY element definitions.\n\n        '''", "\n", "elements", "=", "[", "]", "\n", "while", "header_lines", ":", "\n", "            ", "(", "elt", ",", "header_lines", ")", "=", "PlyElement", ".", "_parse_one", "(", "header_lines", ")", "\n", "elements", ".", "append", "(", "elt", ")", "\n", "\n", "", "return", "elements", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._parse_one": [[470, 505], ["plyfile.PlyParseError", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "int", "plyfile.PlyElement", "len", "comments.append", "properties.append", "plyfile.PlyProperty._parse_one"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty._parse_one"], ["", "@", "staticmethod", "\n", "def", "_parse_one", "(", "lines", ")", ":", "\n", "        ", "'''\n        Consume one element definition.  The unconsumed input is\n        returned along with a PlyElement instance.\n\n        '''", "\n", "a", "=", "0", "\n", "line", "=", "lines", "[", "a", "]", "\n", "\n", "if", "line", "[", "0", "]", "!=", "'element'", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"expected 'element'\"", ")", "\n", "", "if", "len", "(", "line", ")", ">", "3", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"too many fields after 'element'\"", ")", "\n", "", "if", "len", "(", "line", ")", "<", "3", ":", "\n", "            ", "raise", "PlyParseError", "(", "\"too few fields after 'element'\"", ")", "\n", "\n", "", "(", "name", ",", "count", ")", "=", "(", "line", "[", "1", "]", ",", "int", "(", "line", "[", "2", "]", ")", ")", "\n", "\n", "comments", "=", "[", "]", "\n", "properties", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "a", "+=", "1", "\n", "if", "a", ">=", "len", "(", "lines", ")", ":", "\n", "                ", "break", "\n", "\n", "", "if", "lines", "[", "a", "]", "[", "0", "]", "==", "'comment'", ":", "\n", "                ", "comments", ".", "append", "(", "lines", "[", "a", "]", "[", "1", "]", ")", "\n", "", "elif", "lines", "[", "a", "]", "[", "0", "]", "==", "'property'", ":", "\n", "                ", "properties", ".", "append", "(", "PlyProperty", ".", "_parse_one", "(", "lines", "[", "a", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "(", "PlyElement", "(", "name", ",", "properties", ",", "count", ",", "comments", ")", ",", "\n", "lines", "[", "a", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement.describe": [[506, 566], ["len", "plyfile.PlyElement", "isinstance", "TypeError", "len", "ValueError", "properties.append", "isinstance", "ValueError", "ValueError", "plyfile.PlyListProperty", "plyfile._lookup_type", "plyfile.PlyProperty", "len", "val_types.get", "plyfile._lookup_type", "plyfile._lookup_type", "len", "ValueError", "len_types.get"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile._lookup_type", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile._lookup_type", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile._lookup_type"], ["", "@", "staticmethod", "\n", "def", "describe", "(", "data", ",", "name", ",", "len_types", "=", "{", "}", ",", "val_types", "=", "{", "}", ",", "\n", "comments", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        Construct a PlyElement from an array's metadata.\n\n        len_types and val_types can be given as mappings from list\n        property names to type strings (like 'u1', 'f4', etc., or\n        'int8', 'float32', etc.). These can be used to define the length\n        and value types of list properties.  List property lengths\n        always default to type 'u1' (8-bit unsigned integer), and value\n        types default to 'i4' (32-bit integer).\n\n        '''", "\n", "if", "not", "isinstance", "(", "data", ",", "_np", ".", "ndarray", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"only numpy arrays are supported\"", ")", "\n", "\n", "", "if", "len", "(", "data", ".", "shape", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"only one-dimensional arrays are \"", "\n", "\"supported\"", ")", "\n", "\n", "", "count", "=", "len", "(", "data", ")", "\n", "\n", "properties", "=", "[", "]", "\n", "descr", "=", "data", ".", "dtype", ".", "descr", "\n", "\n", "for", "t", "in", "descr", ":", "\n", "            ", "if", "not", "isinstance", "(", "t", "[", "1", "]", ",", "str", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"nested records not supported\"", ")", "\n", "\n", "", "if", "not", "t", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"field with empty name\"", ")", "\n", "\n", "", "if", "len", "(", "t", ")", "!=", "2", "or", "t", "[", "1", "]", "[", "1", "]", "==", "'O'", ":", "\n", "# non-scalar field, which corresponds to a list", "\n", "# property in PLY.", "\n", "\n", "                ", "if", "t", "[", "1", "]", "[", "1", "]", "==", "'O'", ":", "\n", "                    ", "if", "len", "(", "t", ")", "!=", "2", ":", "\n", "                        ", "raise", "ValueError", "(", "\"non-scalar object fields not \"", "\n", "\"supported\"", ")", "\n", "\n", "", "", "len_str", "=", "_data_type_reverse", "[", "len_types", ".", "get", "(", "t", "[", "0", "]", ",", "'u1'", ")", "]", "\n", "if", "t", "[", "1", "]", "[", "1", "]", "==", "'O'", ":", "\n", "                    ", "val_type", "=", "val_types", ".", "get", "(", "t", "[", "0", "]", ",", "'i4'", ")", "\n", "val_str", "=", "_lookup_type", "(", "val_type", ")", "\n", "", "else", ":", "\n", "                    ", "val_str", "=", "_lookup_type", "(", "t", "[", "1", "]", "[", "1", ":", "]", ")", "\n", "\n", "", "prop", "=", "PlyListProperty", "(", "t", "[", "0", "]", ",", "len_str", ",", "val_str", ")", "\n", "", "else", ":", "\n", "                ", "val_str", "=", "_lookup_type", "(", "t", "[", "1", "]", "[", "1", ":", "]", ")", "\n", "prop", "=", "PlyProperty", "(", "t", "[", "0", "]", ",", "val_str", ")", "\n", "\n", "", "properties", ".", "append", "(", "prop", ")", "\n", "\n", "", "elt", "=", "PlyElement", "(", "name", ",", "properties", ",", "count", ",", "comments", ")", "\n", "elt", ".", "data", "=", "data", "\n", "\n", "return", "elt", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._read": [[567, 592], ["plyfile.PlyElement._check_sanity", "plyfile.PlyElement._read_txt", "len", "len", "plyfile.PlyParseError", "plyfile.PlyElement._read_bin", "numpy.fromfile", "plyfile.PlyElement.dtype"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._check_sanity", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._read_txt", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty._read_bin", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "def", "_read", "(", "self", ",", "stream", ",", "text", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Read the actual data from a PLY file.\n\n        '''", "\n", "if", "text", ":", "\n", "            ", "self", ".", "_read_txt", "(", "stream", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_have_list", ":", "\n", "# There are list properties, so a simple load is", "\n", "# impossible.", "\n", "                ", "self", ".", "_read_bin", "(", "stream", ",", "byte_order", ")", "\n", "", "else", ":", "\n", "# There are no list properties, so loading the data is", "\n", "# much more straightforward.", "\n", "                ", "self", ".", "_data", "=", "_np", ".", "fromfile", "(", "stream", ",", "\n", "self", ".", "dtype", "(", "byte_order", ")", ",", "\n", "self", ".", "count", ")", "\n", "\n", "", "", "if", "len", "(", "self", ".", "_data", ")", "<", "self", ".", "count", ":", "\n", "            ", "k", "=", "len", "(", "self", ".", "_data", ")", "\n", "del", "self", ".", "_data", "\n", "raise", "PlyParseError", "(", "\"early end-of-file\"", ",", "self", ",", "k", ")", "\n", "\n", "", "self", ".", "_check_sanity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._write": [[593, 610], ["plyfile.PlyElement._write_txt", "plyfile.PlyElement._write_bin", "plyfile.PlyElement.data.astype().tofile", "plyfile.PlyElement.data.astype", "plyfile.PlyElement.dtype"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._write_txt", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty._write_bin", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "def", "_write", "(", "self", ",", "stream", ",", "text", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Write the data to a PLY file.\n\n        '''", "\n", "if", "text", ":", "\n", "            ", "self", ".", "_write_txt", "(", "stream", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "_have_list", ":", "\n", "# There are list properties, so serialization is", "\n", "# slightly complicated.", "\n", "                ", "self", ".", "_write_bin", "(", "stream", ",", "byte_order", ")", "\n", "", "else", ":", "\n", "# no list properties, so serialization is", "\n", "# straightforward.", "\n", "                ", "self", ".", "data", ".", "astype", "(", "self", ".", "dtype", "(", "byte_order", ")", ",", "\n", "copy", "=", "False", ")", ".", "tofile", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._read_txt": [[611, 642], ["numpy.empty", "itertools.islice", "iter", "iter", "plyfile.PlyParseError", "plyfile.PlyElement.dtype", "line.strip().split", "next", "plyfile.PlyParseError", "prop._from_fields", "line.strip", "plyfile.PlyParseError", "plyfile.PlyParseError"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty._from_fields"], ["", "", "", "def", "_read_txt", "(", "self", ",", "stream", ")", ":", "\n", "        ", "'''\n        Load a PLY element from an ASCII-format PLY file.  The element\n        may contain list properties.\n\n        '''", "\n", "self", ".", "_data", "=", "_np", ".", "empty", "(", "self", ".", "count", ",", "dtype", "=", "self", ".", "dtype", "(", ")", ")", "\n", "\n", "k", "=", "0", "\n", "for", "line", "in", "_islice", "(", "iter", "(", "stream", ".", "readline", ",", "b''", ")", ",", "self", ".", "count", ")", ":", "\n", "            ", "fields", "=", "iter", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "_data", "[", "prop", ".", "name", "]", "[", "k", "]", "=", "prop", ".", "_from_fields", "(", "fields", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "raise", "PlyParseError", "(", "\"early end-of-line\"", ",", "\n", "self", ",", "k", ",", "prop", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "raise", "PlyParseError", "(", "\"malformed input\"", ",", "\n", "self", ",", "k", ",", "prop", ")", "\n", "", "", "try", ":", "\n", "                ", "next", "(", "fields", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"expected end-of-line\"", ",", "self", ",", "k", ")", "\n", "", "k", "+=", "1", "\n", "\n", "", "if", "k", "<", "self", ".", "count", ":", "\n", "            ", "del", "self", ".", "_data", "\n", "raise", "PlyParseError", "(", "\"early end-of-file\"", ",", "self", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._write_txt": [[643, 655], ["numpy.savetxt", "fields.extend", "prop._to_fields"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty._to_fields"], ["", "", "def", "_write_txt", "(", "self", ",", "stream", ")", ":", "\n", "        ", "'''\n        Save a PLY element to an ASCII-format PLY file.  The element may\n        contain list properties.\n\n        '''", "\n", "for", "rec", "in", "self", ".", "data", ":", "\n", "            ", "fields", "=", "[", "]", "\n", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "fields", ".", "extend", "(", "prop", ".", "_to_fields", "(", "rec", "[", "prop", ".", "name", "]", ")", ")", "\n", "\n", "", "_np", ".", "savetxt", "(", "stream", ",", "[", "fields", "]", ",", "'%.18g'", ",", "newline", "=", "'\\r\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._read_bin": [[656, 672], ["numpy.empty", "_range", "plyfile.PlyElement.dtype", "prop._read_bin", "plyfile.PlyParseError"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty._read_bin"], ["", "", "def", "_read_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Load a PLY element from a binary PLY file.  The element may\n        contain list properties.\n\n        '''", "\n", "self", ".", "_data", "=", "_np", ".", "empty", "(", "self", ".", "count", ",", "dtype", "=", "self", ".", "dtype", "(", "byte_order", ")", ")", "\n", "\n", "for", "k", "in", "_range", "(", "self", ".", "count", ")", ":", "\n", "            ", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "_data", "[", "prop", ".", "name", "]", "[", "k", "]", "=", "prop", ".", "_read_bin", "(", "stream", ",", "byte_order", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "raise", "PlyParseError", "(", "\"early end-of-file\"", ",", "\n", "self", ",", "k", ",", "prop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement._write_bin": [[673, 682], ["prop._write_bin"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty._write_bin"], ["", "", "", "", "def", "_write_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Save a PLY element to a binary PLY file.  The element may\n        contain list properties.\n\n        '''", "\n", "for", "rec", "in", "self", ".", "data", ":", "\n", "            ", "for", "prop", "in", "self", ".", "properties", ":", "\n", "                ", "prop", ".", "_write_bin", "(", "rec", "[", "prop", ".", "name", "]", ",", "stream", ",", "byte_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement.header": [[683, 700], ["lines.extend", "lines.append", "list", "map"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "header", "(", "self", ")", ":", "\n", "        ", "'''\n        Format this element's metadata as it would appear in a PLY\n        header.\n\n        '''", "\n", "lines", "=", "[", "'element %s %d'", "%", "(", "self", ".", "name", ",", "self", ".", "count", ")", "]", "\n", "\n", "# Some information is lost here, since all comments are placed", "\n", "# between the 'element' line and the first property definition.", "\n", "for", "c", "in", "self", ".", "comments", ":", "\n", "            ", "lines", ".", "append", "(", "'comment '", "+", "c", ")", "\n", "\n", "", "lines", ".", "extend", "(", "list", "(", "map", "(", "str", ",", "self", ".", "properties", ")", ")", ")", "\n", "\n", "return", "'\\r\\n'", ".", "join", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement.__getitem__": [[701, 703], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement.__setitem__": [[704, 706], ["None"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "data", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement.__str__": [[707, 709], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyElement.__repr__": [[710, 714], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyElement(%r, %r, count=%d, comments=%r)'", "%", "\n", "(", "self", ".", "name", ",", "self", ".", "properties", ",", "self", ".", "count", ",", "\n", "self", ".", "comments", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty.__init__": [[724, 728], ["str", "plyfile.PlyProperty._check_name"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty._check_name"], ["def", "__init__", "(", "self", ",", "name", ",", "val_dtype", ")", ":", "\n", "        ", "self", ".", "_name", "=", "str", "(", "name", ")", "\n", "self", ".", "_check_name", "(", ")", "\n", "self", ".", "val_dtype", "=", "val_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty._get_val_dtype": [[729, 731], ["None"], "methods", ["None"], ["", "def", "_get_val_dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_val_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty._set_val_dtype": [[732, 734], ["plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile._lookup_type"], ["", "def", "_set_val_dtype", "(", "self", ",", "val_dtype", ")", ":", "\n", "        ", "self", ".", "_val_dtype", "=", "_data_types", "[", "_lookup_type", "(", "val_dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty.name": [[737, 740], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty._check_name": [[741, 745], ["any", "RuntimeError", "c.isspace"], "methods", ["None"], ["", "def", "_check_name", "(", "self", ")", ":", "\n", "        ", "if", "any", "(", "c", ".", "isspace", "(", ")", "for", "c", "in", "self", ".", "_name", ")", ":", "\n", "            ", "msg", "=", "\"Error: property name %r contains spaces\"", "%", "self", ".", "_name", "\n", "raise", "RuntimeError", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty._parse_one": [[746, 769], ["plyfile.PlyListProperty", "plyfile.PlyProperty", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError", "len", "plyfile.PlyParseError"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_parse_one", "(", "line", ")", ":", "\n", "        ", "assert", "line", "[", "0", "]", "==", "'property'", "\n", "\n", "if", "line", "[", "1", "]", "==", "'list'", ":", "\n", "            ", "if", "len", "(", "line", ")", ">", "5", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too many fields after \"", "\n", "\"'property list'\"", ")", "\n", "", "if", "len", "(", "line", ")", "<", "5", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too few fields after \"", "\n", "\"'property list'\"", ")", "\n", "\n", "", "return", "PlyListProperty", "(", "line", "[", "4", "]", ",", "line", "[", "2", "]", ",", "line", "[", "3", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "line", ")", ">", "3", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too many fields after \"", "\n", "\"'property'\"", ")", "\n", "", "if", "len", "(", "line", ")", "<", "3", ":", "\n", "                ", "raise", "PlyParseError", "(", "\"too few fields after \"", "\n", "\"'property'\"", ")", "\n", "\n", "", "return", "PlyProperty", "(", "line", "[", "2", "]", ",", "line", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty.dtype": [[770, 777], ["None"], "methods", ["None"], ["", "", "def", "dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "'''\n        Return the numpy dtype description for this property (as a tuple\n        of strings).\n\n        '''", "\n", "return", "byte_order", "+", "self", ".", "val_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty._from_fields": [[778, 785], ["numpy.dtype().type", "next", "numpy.dtype", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "def", "_from_fields", "(", "self", ",", "fields", ")", ":", "\n", "        ", "'''\n        Parse from generator.  Raise StopIteration if the property could\n        not be read.\n\n        '''", "\n", "return", "_np", ".", "dtype", "(", "self", ".", "dtype", "(", ")", ")", ".", "type", "(", "next", "(", "fields", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty._to_fields": [[786, 792], ["numpy.dtype().type", "numpy.dtype", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "def", "_to_fields", "(", "self", ",", "data", ")", ":", "\n", "        ", "'''\n        Return generator over one item.\n\n        '''", "\n", "yield", "_np", ".", "dtype", "(", "self", ".", "dtype", "(", ")", ")", ".", "type", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty._read_bin": [[793, 803], ["numpy.fromfile", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "def", "_read_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Read data from a binary stream.  Raise StopIteration if the\n        property could not be read.\n\n        '''", "\n", "try", ":", "\n", "            ", "return", "_np", ".", "fromfile", "(", "stream", ",", "self", ".", "dtype", "(", "byte_order", ")", ",", "1", ")", "[", "0", "]", "\n", "", "except", "IndexError", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty._write_bin": [[804, 810], ["numpy.dtype().type().tofile", "numpy.dtype().type", "numpy.dtype", "plyfile.PlyProperty.dtype"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.dtype", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "", "def", "_write_bin", "(", "self", ",", "data", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Write data to a binary stream.\n\n        '''", "\n", "_np", ".", "dtype", "(", "self", ".", "dtype", "(", "byte_order", ")", ")", ".", "type", "(", "data", ")", ".", "tofile", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty.__str__": [[811, 814], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "val_str", "=", "_data_type_reverse", "[", "self", ".", "val_dtype", "]", "\n", "return", "'property %s %s'", "%", "(", "val_str", ",", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyProperty.__repr__": [[815, 818], ["plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile._lookup_type"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'PlyProperty(%r, %r)'", "%", "(", "self", ".", "name", ",", "\n", "_lookup_type", "(", "self", ".", "val_dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.__init__": [[827, 831], ["plyfile.PlyProperty.__init__"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "len_dtype", ",", "val_dtype", ")", ":", "\n", "        ", "PlyProperty", ".", "__init__", "(", "self", ",", "name", ",", "val_dtype", ")", "\n", "\n", "self", ".", "len_dtype", "=", "len_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty._get_len_dtype": [[832, 834], ["None"], "methods", ["None"], ["", "def", "_get_len_dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_len_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty._set_len_dtype": [[835, 837], ["plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile._lookup_type"], ["", "def", "_set_len_dtype", "(", "self", ",", "len_dtype", ")", ":", "\n", "        ", "self", ".", "_len_dtype", "=", "_data_types", "[", "_lookup_type", "(", "len_dtype", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.dtype": [[840, 846], ["None"], "methods", ["None"], ["def", "dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "'''\n        List properties always have a numpy dtype of \"object\".\n\n        '''", "\n", "return", "'|O'", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.list_dtype": [[847, 855], ["None"], "methods", ["None"], ["", "def", "list_dtype", "(", "self", ",", "byte_order", "=", "'='", ")", ":", "\n", "        ", "'''\n        Return the pair (len_dtype, val_dtype) (both numpy-friendly\n        strings).\n\n        '''", "\n", "return", "(", "byte_order", "+", "self", ".", "len_dtype", ",", "\n", "byte_order", "+", "self", ".", "val_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty._from_fields": [[856, 866], ["plyfile.PlyListProperty.list_dtype", "int", "numpy.loadtxt", "numpy.dtype().type", "list", "len", "next", "itertools.islice", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.list_dtype", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "def", "_from_fields", "(", "self", ",", "fields", ")", ":", "\n", "        ", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", ")", "\n", "\n", "n", "=", "int", "(", "_np", ".", "dtype", "(", "len_t", ")", ".", "type", "(", "next", "(", "fields", ")", ")", ")", "\n", "\n", "data", "=", "_np", ".", "loadtxt", "(", "list", "(", "_islice", "(", "fields", ",", "n", ")", ")", ",", "val_t", ",", "ndmin", "=", "1", ")", "\n", "if", "len", "(", "data", ")", "<", "n", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty._to_fields": [[867, 880], ["plyfile.PlyListProperty.list_dtype", "numpy.asarray().ravel", "numpy.dtype().type", "numpy.asarray", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.list_dtype", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.dtype"], ["", "def", "_to_fields", "(", "self", ",", "data", ")", ":", "\n", "        ", "'''\n        Return generator over the (numerical) PLY representation of the\n        list data (length followed by actual data).\n\n        '''", "\n", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", ")", "\n", "\n", "data", "=", "_np", ".", "asarray", "(", "data", ",", "dtype", "=", "val_t", ")", ".", "ravel", "(", ")", "\n", "\n", "yield", "_np", ".", "dtype", "(", "len_t", ")", ".", "type", "(", "data", ".", "size", ")", "\n", "for", "x", "in", "data", ":", "\n", "            ", "yield", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty._read_bin": [[881, 894], ["plyfile.PlyListProperty.list_dtype", "numpy.fromfile", "len", "numpy.fromfile"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.list_dtype"], ["", "", "def", "_read_bin", "(", "self", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", "byte_order", ")", "\n", "\n", "try", ":", "\n", "            ", "n", "=", "_np", ".", "fromfile", "(", "stream", ",", "len_t", ",", "1", ")", "[", "0", "]", "\n", "", "except", "IndexError", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "data", "=", "_np", ".", "fromfile", "(", "stream", ",", "val_t", ",", "n", ")", "\n", "if", "len", "(", "data", ")", "<", "n", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty._write_bin": [[895, 906], ["plyfile.PlyListProperty.list_dtype", "numpy.asarray().ravel", "numpy.array().tofile", "numpy.asarray().ravel.tofile", "numpy.asarray", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.list_dtype"], ["", "def", "_write_bin", "(", "self", ",", "data", ",", "stream", ",", "byte_order", ")", ":", "\n", "        ", "'''\n        Write data to a binary stream.\n\n        '''", "\n", "(", "len_t", ",", "val_t", ")", "=", "self", ".", "list_dtype", "(", "byte_order", ")", "\n", "\n", "data", "=", "_np", ".", "asarray", "(", "data", ",", "dtype", "=", "val_t", ")", ".", "ravel", "(", ")", "\n", "\n", "_np", ".", "array", "(", "data", ".", "size", ",", "dtype", "=", "len_t", ")", ".", "tofile", "(", "stream", ")", "\n", "data", ".", "tofile", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.__str__": [[907, 911], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "len_str", "=", "_data_type_reverse", "[", "self", ".", "len_dtype", "]", "\n", "val_str", "=", "_data_type_reverse", "[", "self", ".", "val_dtype", "]", "\n", "return", "'property list %s %s %s'", "%", "(", "len_str", ",", "val_str", ",", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyListProperty.__repr__": [[912, 917], ["plyfile._lookup_type", "plyfile._lookup_type"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile._lookup_type", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile._lookup_type"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'PlyListProperty(%r, %r, %r)'", "%", "\n", "(", "self", ".", "name", ",", "\n", "_lookup_type", "(", "self", ".", "len_dtype", ")", ",", "\n", "_lookup_type", "(", "self", ".", "val_dtype", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile._lookup_type": [[80, 89], ["ValueError"], "function", ["None"], ["def", "_lookup_type", "(", "type_str", ")", ":", "\n", "    ", "if", "type_str", "not", "in", "_data_type_reverse", ":", "\n", "        ", "try", ":", "\n", "            ", "type_str", "=", "_data_types", "[", "type_str", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "ValueError", "(", "\"field type %r not in %r\"", "%", "\n", "(", "type_str", ",", "_types_list", ")", ")", "\n", "\n", "", "", "return", "_data_type_reverse", "[", "type_str", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile._split_line": [[91, 99], ["line.split", "len", "line.split.append", "len"], "function", ["None"], ["", "def", "_split_line", "(", "line", ",", "n", ")", ":", "\n", "    ", "fields", "=", "line", ".", "split", "(", "None", ",", "n", ")", "\n", "if", "len", "(", "fields", ")", "==", "n", ":", "\n", "        ", "fields", ".", "append", "(", "''", ")", "\n", "\n", "", "assert", "len", "(", "fields", ")", "==", "n", "+", "1", "\n", "\n", "return", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.make2d": [[101, 119], ["RuntimeError", "len", "numpy.fromiter", "len", "len"], "function", ["None"], ["", "def", "make2d", "(", "array", ",", "cols", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "'''\n    Make a 2D array from an array of arrays.  The `cols' and `dtype'\n    arguments can be omitted if the array is not empty.\n\n    '''", "\n", "if", "(", "cols", "is", "None", "or", "dtype", "is", "None", ")", "and", "not", "len", "(", "array", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"cols and dtype must be specified for empty \"", "\n", "\"array\"", ")", "\n", "\n", "", "if", "cols", "is", "None", ":", "\n", "        ", "cols", "=", "len", "(", "array", "[", "0", "]", ")", "\n", "\n", "", "if", "dtype", "is", "None", ":", "\n", "        ", "dtype", "=", "array", "[", "0", "]", ".", "dtype", "\n", "\n", "", "return", "_np", ".", "fromiter", "(", "array", ",", "[", "(", "'_'", ",", "dtype", ",", "(", "cols", ",", ")", ")", "]", ",", "\n", "count", "=", "len", "(", "array", ")", ")", "[", "'_'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile._open_stream": [[355, 362], ["hasattr", "open", "RuntimeError"], "function", ["None"], ["", "", "def", "_open_stream", "(", "stream", ",", "read_or_write", ")", ":", "\n", "    ", "if", "hasattr", "(", "stream", ",", "read_or_write", ")", ":", "\n", "        ", "return", "(", "False", ",", "stream", ")", "\n", "", "try", ":", "\n", "        ", "return", "(", "True", ",", "open", "(", "stream", ",", "read_or_write", "[", "0", "]", "+", "'b'", ")", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"expected open file or filename\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_nndistance.nn_distance": [[15, 27], ["nn_distance_module.nn_distance"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_nndistance.nn_distance"], ["def", "nn_distance", "(", "xyz1", ",", "xyz2", ")", ":", "\n", "\t", "'''\n\tComputes the distance of nearest neighbors for a pair of point clouds\n\tinput: xyz1: (batch_size,#points_1,3)  the first point cloud\n\tinput: xyz2: (batch_size,#points_2,3)  the second point cloud\n\toutput: dist1: (batch_size,#point_1)   distance from first to second\n\toutput: idx1:  (batch_size,#point_1)   nearest neighbor from first to second\n\toutput: dist2: (batch_size,#point_2)   distance from second to first\n\toutput: idx2:  (batch_size,#point_2)   nearest neighbor from second to first\n\t'''", "\n", "\n", "return", "nn_distance_module", ".", "nn_distance", "(", "xyz1", ",", "xyz2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_nndistance._nn_distance_shape": [[29, 35], ["tensorflow.python.framework.ops.RegisterShape", "op.inputs[].get_shape().with_rank", "op.inputs[].get_shape().with_rank", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "op.inputs[].get_shape", "op.inputs[].get_shape"], "function", ["None"], ["", "@", "ops", ".", "RegisterShape", "(", "'NnDistance'", ")", "\n", "def", "_nn_distance_shape", "(", "op", ")", ":", "\n", "\t", "shape1", "=", "op", ".", "inputs", "[", "0", "]", ".", "get_shape", "(", ")", ".", "with_rank", "(", "3", ")", "\n", "shape2", "=", "op", ".", "inputs", "[", "1", "]", ".", "get_shape", "(", ")", ".", "with_rank", "(", "3", ")", "\n", "return", "[", "tf", ".", "TensorShape", "(", "[", "shape1", ".", "dims", "[", "0", "]", ",", "shape1", ".", "dims", "[", "1", "]", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "shape1", ".", "dims", "[", "0", "]", ",", "shape1", ".", "dims", "[", "1", "]", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "shape2", ".", "dims", "[", "0", "]", ",", "shape2", ".", "dims", "[", "1", "]", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "shape2", ".", "dims", "[", "0", "]", ",", "shape2", ".", "dims", "[", "1", "]", "]", ")", "]", "\n", "", "@", "ops", ".", "RegisterGradient", "(", "'NnDistance'", ")", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_nndistance._nn_distance_grad": [[35, 42], ["tensorflow.python.framework.ops.RegisterGradient", "nn_distance_module.nn_distance_grad"], "function", ["None"], ["", "@", "ops", ".", "RegisterGradient", "(", "'NnDistance'", ")", "\n", "def", "_nn_distance_grad", "(", "op", ",", "grad_dist1", ",", "grad_idx1", ",", "grad_dist2", ",", "grad_idx2", ")", ":", "\n", "\t", "xyz1", "=", "op", ".", "inputs", "[", "0", "]", "\n", "xyz2", "=", "op", ".", "inputs", "[", "1", "]", "\n", "idx1", "=", "op", ".", "outputs", "[", "1", "]", "\n", "idx2", "=", "op", ".", "outputs", "[", "3", "]", "\n", "return", "nn_distance_module", ".", "nn_distance_grad", "(", "xyz1", ",", "xyz2", ",", "grad_dist1", ",", "idx1", ",", "grad_dist2", ",", "idx2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_approxmatch.approx_match": [[10, 19], ["approxmatch_module.approx_match"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_approxmatch.approx_match"], ["def", "approx_match", "(", "xyz1", ",", "xyz2", ")", ":", "\n", "\t", "'''\ninput:\n\txyz1 : batch_size * #dataset_points * 3\n\txyz2 : batch_size * #query_points * 3\nreturns:\n\tmatch : batch_size * #query_points * #dataset_points\n\t'''", "\n", "return", "approxmatch_module", ".", "approx_match", "(", "xyz1", ",", "xyz2", ")", "\n", "", "ops", ".", "NoGradient", "(", "'ApproxMatch'", ")", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_approxmatch._approx_match_shape": [[21, 26], ["tensorflow.python.framework.ops.RegisterShape", "op.inputs[].get_shape().with_rank", "op.inputs[].get_shape().with_rank", "tensorflow.TensorShape", "op.inputs[].get_shape", "op.inputs[].get_shape"], "function", ["None"], ["@", "ops", ".", "RegisterShape", "(", "'ApproxMatch'", ")", "\n", "def", "_approx_match_shape", "(", "op", ")", ":", "\n", "\t", "shape1", "=", "op", ".", "inputs", "[", "0", "]", ".", "get_shape", "(", ")", ".", "with_rank", "(", "3", ")", "\n", "shape2", "=", "op", ".", "inputs", "[", "1", "]", ".", "get_shape", "(", ")", ".", "with_rank", "(", "3", ")", "\n", "return", "[", "tf", ".", "TensorShape", "(", "[", "shape1", ".", "dims", "[", "0", "]", ",", "shape2", ".", "dims", "[", "1", "]", ",", "shape1", ".", "dims", "[", "1", "]", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_approxmatch.match_cost": [[27, 37], ["approxmatch_module.match_cost"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_approxmatch.match_cost"], ["", "def", "match_cost", "(", "xyz1", ",", "xyz2", ",", "match", ")", ":", "\n", "\t", "'''\ninput:\n\txyz1 : batch_size * #dataset_points * 3\n\txyz2 : batch_size * #query_points * 3\n\tmatch : batch_size * #query_points * #dataset_points\nreturns:\n\tcost : batch_size\n\t'''", "\n", "return", "approxmatch_module", ".", "match_cost", "(", "xyz1", ",", "xyz2", ",", "match", ")", "\n", "#@tf.RegisterShape('MatchCost')", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_approxmatch._match_cost_shape": [[38, 44], ["tensorflow.python.framework.ops.RegisterShape", "op.inputs[].get_shape().with_rank", "op.inputs[].get_shape().with_rank", "op.inputs[].get_shape().with_rank", "tensorflow.TensorShape", "op.inputs[].get_shape", "op.inputs[].get_shape", "op.inputs[].get_shape"], "function", ["None"], ["", "@", "ops", ".", "RegisterShape", "(", "'MatchCost'", ")", "\n", "def", "_match_cost_shape", "(", "op", ")", ":", "\n", "\t", "shape1", "=", "op", ".", "inputs", "[", "0", "]", ".", "get_shape", "(", ")", ".", "with_rank", "(", "3", ")", "\n", "shape2", "=", "op", ".", "inputs", "[", "1", "]", ".", "get_shape", "(", ")", ".", "with_rank", "(", "3", ")", "\n", "shape3", "=", "op", ".", "inputs", "[", "2", "]", ".", "get_shape", "(", ")", ".", "with_rank", "(", "3", ")", "\n", "return", "[", "tf", ".", "TensorShape", "(", "[", "shape1", ".", "dims", "[", "0", "]", "]", ")", "]", "\n", "", "@", "tf", ".", "RegisterGradient", "(", "'MatchCost'", ")", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.structural_losses.tf_approxmatch._match_cost_grad": [[44, 51], ["tensorflow.RegisterGradient", "approxmatch_module.match_cost_grad", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["None"], ["", "@", "tf", ".", "RegisterGradient", "(", "'MatchCost'", ")", "\n", "def", "_match_cost_grad", "(", "op", ",", "grad_cost", ")", ":", "\n", "\t", "xyz1", "=", "op", ".", "inputs", "[", "0", "]", "\n", "xyz2", "=", "op", ".", "inputs", "[", "1", "]", "\n", "match", "=", "op", ".", "inputs", "[", "2", "]", "\n", "grad_1", ",", "grad_2", "=", "approxmatch_module", ".", "match_cost_grad", "(", "xyz1", ",", "xyz2", ",", "match", ")", "\n", "return", "[", "grad_1", "*", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "grad_cost", ",", "1", ")", ",", "2", ")", ",", "grad_2", "*", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "grad_cost", ",", "1", ")", ",", "2", ")", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.grouping.tf_grouping_op_test.GroupPointTest.test": [[6, 8], ["None"], "methods", ["None"], ["  ", "def", "test", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.grouping.tf_grouping_op_test.GroupPointTest.test_grad": [[9, 26], ["tensorflow.device", "tensorflow.constant", "print", "tensorflow.constant", "tensorflow.constant", "tf_grouping.query_ball_point", "tf_grouping.group_point", "print", "tf_grouping_op_test.GroupPointTest.test_session", "print", "tensorflow.test.compute_gradient_error", "print", "tf_grouping_op_test.GroupPointTest.assertLess", "numpy.random.random().astype", "numpy.random.random().astype", "numpy.random.random().astype", "numpy.random.random", "numpy.random.random", "numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.grouping.tf_grouping.query_ball_point", "home.repos.pwc.inspect_result.itailang_geometric_adv.grouping.tf_grouping.group_point"], ["", "def", "test_grad", "(", "self", ")", ":", "\n", "    ", "with", "tf", ".", "device", "(", "'/gpu:0'", ")", ":", "\n", "      ", "points", "=", "tf", ".", "constant", "(", "np", ".", "random", ".", "random", "(", "(", "1", ",", "128", ",", "16", ")", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "print", "(", "points", ")", "\n", "xyz1", "=", "tf", ".", "constant", "(", "np", ".", "random", ".", "random", "(", "(", "1", ",", "128", ",", "3", ")", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "xyz2", "=", "tf", ".", "constant", "(", "np", ".", "random", ".", "random", "(", "(", "1", ",", "8", ",", "3", ")", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "radius", "=", "0.3", "\n", "nsample", "=", "32", "\n", "idx", ",", "pts_cnt", "=", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz1", ",", "xyz2", ")", "\n", "grouped_points", "=", "group_point", "(", "points", ",", "idx", ")", "\n", "print", "(", "grouped_points", ")", "\n", "\n", "", "with", "self", ".", "test_session", "(", ")", ":", "\n", "      ", "print", "(", "\"---- Going to compute gradient error\"", ")", "\n", "err", "=", "tf", ".", "test", ".", "compute_gradient_error", "(", "points", ",", "(", "1", ",", "128", ",", "16", ")", ",", "grouped_points", ",", "(", "1", ",", "8", ",", "32", ",", "16", ")", ")", "\n", "print", "(", "err", ")", "\n", "self", ".", "assertLess", "(", "err", ",", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.grouping.tf_grouping.query_ball_point": [[8, 21], ["grouping_module.query_ball_point"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.grouping.tf_grouping.query_ball_point"], ["def", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "    ", "'''\n    Input:\n        radius: float32, ball search radius\n        nsample: int32, number of points selected in each ball region\n        xyz1: (batch_size, ndataset, 3) float32 array, input points\n        xyz2: (batch_size, npoint, 3) float32 array, query points\n    Output:\n        idx: (batch_size, npoint, nsample) int32 array, indices to input points\n        pts_cnt: (batch_size, npoint) int32 array, number of unique points in each local region\n    '''", "\n", "#return grouping_module.query_ball_point(radius, nsample, xyz1, xyz2)", "\n", "return", "grouping_module", ".", "query_ball_point", "(", "xyz1", ",", "xyz2", ",", "radius", ",", "nsample", ")", "\n", "", "ops", ".", "NoGradient", "(", "'QueryBallPoint'", ")", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.grouping.tf_grouping.select_top_k": [[22, 32], ["grouping_module.selection_sort"], "function", ["None"], ["def", "select_top_k", "(", "k", ",", "dist", ")", ":", "\n", "    ", "'''\n    Input:\n        k: int32, number of k SMALLEST elements selected\n        dist: (b,m,n) float32 array, distance matrix, m query points, n dataset points\n    Output:\n        idx: (b,m,n) int32 array, first k in n are indices to the top k\n        dist_out: (b,m,n) float32 array, first k in n are the top k\n    '''", "\n", "return", "grouping_module", ".", "selection_sort", "(", "dist", ",", "k", ")", "\n", "", "ops", ".", "NoGradient", "(", "'SelectionSort'", ")", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.grouping.tf_grouping.group_point": [[33, 42], ["grouping_module.group_point"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.grouping.tf_grouping.group_point"], ["def", "group_point", "(", "points", ",", "idx", ")", ":", "\n", "    ", "'''\n    Input:\n        points: (batch_size, ndataset, channel) float32 array, points to sample from\n        idx: (batch_size, npoint, nsample) int32 array, indices to points\n    Output:\n        out: (batch_size, npoint, nsample, channel) float32 array, values sampled from points\n    '''", "\n", "return", "grouping_module", ".", "group_point", "(", "points", ",", "idx", ")", "\n", "", "@", "tf", ".", "RegisterGradient", "(", "'GroupPoint'", ")", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.grouping.tf_grouping._group_point_grad": [[42, 47], ["tensorflow.RegisterGradient", "grouping_module.group_point_grad"], "function", ["None"], ["", "@", "tf", ".", "RegisterGradient", "(", "'GroupPoint'", ")", "\n", "def", "_group_point_grad", "(", "op", ",", "grad_out", ")", ":", "\n", "    ", "points", "=", "op", ".", "inputs", "[", "0", "]", "\n", "idx", "=", "op", ".", "inputs", "[", "1", "]", "\n", "return", "[", "grouping_module", ".", "group_point_grad", "(", "points", ",", "idx", ",", "grad_out", ")", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.grouping.tf_grouping.knn_point": [[48, 76], ["print", "print", "tensorflow.tile", "tensorflow.tile", "tensorflow.reduce_sum", "print", "tf_grouping.select_top_k", "tensorflow.slice", "tensorflow.slice", "print", "tensorflow.expand_dims", "tensorflow.expand_dims", "tf.tile.get_shape", "tf.tile.get_shape", "tf.tile.get_shape", "tf.tile.get_shape"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.grouping.tf_grouping.select_top_k"], ["", "def", "knn_point", "(", "k", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "    ", "'''\n    Input:\n        k: int32, number of k in k-nn search\n        xyz1: (batch_size, ndataset, c) float32 array, input points\n        xyz2: (batch_size, npoint, c) float32 array, query points\n    Output:\n        val: (batch_size, npoint, k) float32 array, L2 distances\n        idx: (batch_size, npoint, k) int32 array, indices to input points\n    '''", "\n", "b", "=", "xyz1", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "n", "=", "xyz1", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "c", "=", "xyz1", ".", "get_shape", "(", ")", "[", "2", "]", ".", "value", "\n", "m", "=", "xyz2", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "print", "(", "b", ",", "n", ",", "c", ",", "m", ")", "\n", "print", "(", "xyz1", ",", "(", "b", ",", "1", ",", "n", ",", "c", ")", ")", "\n", "#    xyz1 = tf.tile(tf.reshape(xyz1, (b,1,n,c)), [1,m,1,1])  # this does not work when the batch size is unknown (None)", "\n", "#    xyz2 = tf.tile(tf.reshape(xyz2, (b,m,1,c)), [1,1,n,1])  # this does not work when the batch size is unknown (None)", "\n", "xyz1", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "xyz1", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "m", ",", "1", ",", "1", "]", ")", "\n", "xyz2", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "xyz2", ",", "axis", "=", "2", ")", ",", "[", "1", ",", "1", ",", "n", ",", "1", "]", ")", "\n", "dist", "=", "tf", ".", "reduce_sum", "(", "(", "xyz1", "-", "xyz2", ")", "**", "2", ",", "-", "1", ")", "\n", "print", "(", "dist", ",", "k", ")", "\n", "outi", ",", "out", "=", "select_top_k", "(", "k", ",", "dist", ")", "\n", "idx", "=", "tf", ".", "slice", "(", "outi", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "k", "]", ")", "\n", "val", "=", "tf", ".", "slice", "(", "out", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "k", "]", ")", "\n", "print", "(", "idx", ",", "val", ")", "\n", "#val, idx = tf.nn.top_k(-dist, k=k) # ONLY SUPPORT CPU", "\n", "return", "val", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.provider.shuffle_data": [[12, 23], ["numpy.arange", "numpy.random.shuffle", "len"], "function", ["None"], ["def", "shuffle_data", "(", "data", ",", "labels", ")", ":", "\n", "    ", "\"\"\" Shuffle data and labels.\n        Input:\n          data: B,N,... numpy array\n          label: B,... numpy array\n        Return:\n          shuffled data, label and shuffle indices\n    \"\"\"", "\n", "idx", "=", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "return", "data", "[", "idx", ",", "...", "]", ",", "labels", "[", "idx", "]", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.provider.rotate_point_cloud": [[25, 44], ["numpy.zeros", "range", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape", "numpy.random.uniform"], "function", ["None"], ["", "def", "rotate_point_cloud", "(", "batch_data", ")", ":", "\n", "    ", "\"\"\" Randomly rotate the point clouds to augument the dataset\n        rotation is per shape based along up direction\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rotation_angle", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.provider.rotate_point_cloud_by_angle": [[46, 64], ["numpy.zeros", "range", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape"], "function", ["None"], ["", "def", "rotate_point_cloud_by_angle", "(", "batch_data", ",", "rotation_angle", ")", ":", "\n", "    ", "\"\"\" Rotate the point cloud along up direction with certain angle.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "#rotation_angle = np.random.uniform() * 2 * np.pi", "\n", "        ", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.provider.jitter_point_cloud": [[66, 78], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "def", "jitter_point_cloud", "(", "batch_data", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ")", ":", "\n", "    ", "\"\"\" Randomly jitter points. jittering is per point.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, jittered batch of point clouds\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "assert", "(", "clip", ">", "0", ")", "\n", "jittered_data", "=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "B", ",", "N", ",", "C", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "jittered_data", "+=", "batch_data", "\n", "return", "jittered_data", "\n", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls_basic.placeholder_inputs": [[22, 26], ["tensorflow.placeholder", "tensorflow.placeholder"], "function", ["None"], ["def", "placeholder_inputs", "(", "batch_size", ",", "num_point", ")", ":", "\n", "    ", "pointclouds_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "num_point", ",", "3", ")", ")", "\n", "labels_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "batch_size", ")", ")", "\n", "return", "pointclouds_pl", ",", "labels_pl", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls_basic.get_model": [[28, 72], ["tensorflow.expand_dims", "classifier.conv2d", "classifier.conv2d", "classifier.conv2d", "classifier.conv2d", "classifier.conv2d", "classifier.max_pool2d", "tensorflow.reshape", "classifier.fully_connected", "classifier.fully_connected", "classifier.dropout", "classifier.fully_connected", "point_cloud.get_shape", "point_cloud.get_shape"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.max_pool2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.fully_connected", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.fully_connected", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.dropout", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.fully_connected"], ["", "def", "get_model", "(", "point_cloud", ",", "is_training", ",", "num_classes", ",", "bn_decay", "=", "None", ")", ":", "\n", "    ", "\"\"\" Classification PointNet, input is BxNx3, output Bx40 \"\"\"", "\n", "batch_size", "=", "point_cloud", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "num_point", "=", "point_cloud", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "end_points", "=", "{", "}", "\n", "input_image", "=", "tf", ".", "expand_dims", "(", "point_cloud", ",", "-", "1", ")", "\n", "\n", "# Point functions (MLP implemented as conv2d)", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "input_image", ",", "64", ",", "[", "1", ",", "3", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv1'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "net", ",", "64", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv2'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "net", ",", "64", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv3'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "net", ",", "128", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv4'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "net", ",", "1024", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv5'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "\n", "# Symmetric function: max pooling", "\n", "net", "=", "tf_util", ".", "max_pool2d", "(", "net", ",", "[", "num_point", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "scope", "=", "'maxpool'", ")", "\n", "\n", "# MLP on global point cloud vector", "\n", "net", "=", "tf", ".", "reshape", "(", "net", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "512", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'fc1'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "256", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'fc2'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.7", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dp1'", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "num_classes", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc3'", ")", "\n", "\n", "return", "net", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls_basic.get_loss": [[74, 81], ["tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.summary.scalar"], "function", ["None"], ["", "def", "get_loss", "(", "pred", ",", "label", ",", "end_points", ")", ":", "\n", "    ", "\"\"\" pred: B*NUM_CLASSES,\n        label: B, \"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "pred", ",", "labels", "=", "label", ")", "\n", "classify_loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'classify loss'", ",", "classify_loss", ")", "\n", "return", "classify_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.train_classifier.log_string": [[86, 90], ["LOG_FOUT.write", "LOG_FOUT.flush", "print"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write"], ["def", "log_string", "(", "out_str", ")", ":", "\n", "    ", "LOG_FOUT", ".", "write", "(", "out_str", "+", "'\\n'", ")", "\n", "LOG_FOUT", ".", "flush", "(", ")", "\n", "print", "(", "out_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.train_classifier.get_learning_rate": [[92, 101], ["tensorflow.train.exponential_decay", "tensorflow.maximum"], "function", ["None"], ["", "def", "get_learning_rate", "(", "batch", ")", ":", "\n", "    ", "learning_rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "BASE_LEARNING_RATE", ",", "# Base learning rate.", "\n", "batch", "*", "BATCH_SIZE", ",", "# Current index into the dataset.", "\n", "DECAY_STEP", ",", "# Decay step.", "\n", "DECAY_RATE", ",", "# Decay rate.", "\n", "staircase", "=", "True", ")", "\n", "learning_rate", "=", "tf", ".", "maximum", "(", "learning_rate", ",", "0.00001", ")", "# CLIP THE LEARNING RATE!", "\n", "return", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.train_classifier.get_bn_decay": [[103, 112], ["tensorflow.train.exponential_decay", "tensorflow.minimum"], "function", ["None"], ["", "def", "get_bn_decay", "(", "batch", ")", ":", "\n", "    ", "bn_momentum", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "BN_INIT_DECAY", ",", "\n", "batch", "*", "BATCH_SIZE", ",", "\n", "BN_DECAY_DECAY_STEP", ",", "\n", "BN_DECAY_DECAY_RATE", ",", "\n", "staircase", "=", "True", ")", "\n", "bn_decay", "=", "tf", ".", "minimum", "(", "BN_DECAY_CLIP", ",", "1", "-", "bn_momentum", ")", "\n", "return", "bn_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.train_classifier.train": [[114, 216], ["tensorflow.Graph().as_default", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.summary.merge_all", "tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "tensorflow.global_variables_initializer", "tf.Session.run", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "tensorflow.device", "MODEL.placeholder_inputs", "tensorflow.placeholder", "print", "tensorflow.Variable", "train_classifier.get_bn_decay", "tensorflow.summary.scalar", "MODEL.get_model", "MODEL.get_loss", "tensorflow.summary.scalar", "tensorflow.equal", "tensorflow.summary.scalar", "train_classifier.get_learning_rate", "tensorflow.summary.scalar", "tf.train.AdamOptimizer.minimize", "tensorflow.train.Saver", "os.join", "os.join", "tf.train.Saver.restore", "train_classifier.log_string", "int", "int", "int", "int", "int", "train_classifier.log_string", "sys.stdout.flush", "time.time", "train_classifier.train_one_epoch", "time.time", "print", "time.time", "train_classifier.eval_one_epoch", "time.time", "print", "tensorflow.Graph", "tensorflow.argmax", "tensorflow.to_int64", "tensorflow.reduce_sum", "float", "tensorflow.train.MomentumOptimizer", "os.join", "tf.train.Saver.save", "train_classifier.log_string", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "str", "tensorflow.cast", "tensorflow.train.AdamOptimizer", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls.placeholder_inputs", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.train_classifier.get_bn_decay", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls.get_model", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls.get_loss", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.train_classifier.get_learning_rate", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.log_string", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.log_string", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.train_classifier.train_one_epoch", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tst_classifier.eval_one_epoch", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.log_string", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save"], ["", "def", "train", "(", ")", ":", "\n", "    ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/gpu:'", "+", "str", "(", "GPU_INDEX", ")", ")", ":", "\n", "            ", "pointclouds_pl", ",", "labels_pl", "=", "MODEL", ".", "placeholder_inputs", "(", "BATCH_SIZE", ",", "NUM_POINT", ")", "\n", "is_training_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "print", "(", "is_training_pl", ")", "\n", "\n", "# Note the global_step=batch parameter to minimize. ", "\n", "# That tells the optimizer to helpfully increment the 'batch' parameter for you every time it trains.", "\n", "batch", "=", "tf", ".", "Variable", "(", "0", ")", "\n", "bn_decay", "=", "get_bn_decay", "(", "batch", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'bn_decay'", ",", "bn_decay", ")", "\n", "\n", "# Get model and loss ", "\n", "pred", ",", "end_points", "=", "MODEL", ".", "get_model", "(", "pointclouds_pl", ",", "is_training_pl", ",", "NUM_CLASSES", ",", "bn_decay", "=", "bn_decay", ")", "\n", "loss", "=", "MODEL", ".", "get_loss", "(", "pred", ",", "labels_pl", ",", "end_points", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss'", ",", "loss", ")", "\n", "\n", "correct", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "pred", ",", "1", ")", ",", "tf", ".", "to_int64", "(", "labels_pl", ")", ")", "\n", "accuracy", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "correct", ",", "tf", ".", "float32", ")", ")", "/", "float", "(", "BATCH_SIZE", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'accuracy'", ",", "accuracy", ")", "\n", "\n", "# Get training operator", "\n", "learning_rate", "=", "get_learning_rate", "(", "batch", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate'", ",", "learning_rate", ")", "\n", "if", "OPTIMIZER", "==", "'momentum'", ":", "\n", "                ", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "learning_rate", ",", "momentum", "=", "MOMENTUM", ")", "\n", "", "elif", "OPTIMIZER", "==", "'adam'", ":", "\n", "                ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ")", "\n", "", "train_op", "=", "optimizer", ".", "minimize", "(", "loss", ",", "global_step", "=", "batch", ")", "\n", "\n", "# Add ops to save and restore all the variables.", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "None", ")", "\n", "\n", "# Create a session", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "config", ".", "log_device_placement", "=", "False", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n", "# Add summary writers", "\n", "merged", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "train_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "osp", ".", "join", "(", "parent_dir", ",", "LOG_DIR", ",", "'train'", ")", ",", "sess", ".", "graph", ")", "\n", "test_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "osp", ".", "join", "(", "parent_dir", ",", "LOG_DIR", ",", "'test'", ")", ")", "\n", "\n", "# Init variables", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "# To fix the bug introduced in TF 0.12.1 as in", "\n", "# http://stackoverflow.com/questions/41543774/invalidargumenterror-for-tensor-bool-tensorflow-0-12-1", "\n", "#sess.run(init)", "\n", "sess", ".", "run", "(", "init", ",", "{", "is_training_pl", ":", "True", "}", ")", "\n", "\n", "if", "FLAGS", ".", "model_path", "is", "not", "None", ":", "\n", "            ", "saver", ".", "restore", "(", "sess", ",", "osp", ".", "join", "(", "parent_dir", ",", "FLAGS", ".", "model_path", ")", ")", "\n", "log_string", "(", "\"Model restored.\"", ")", "\n", "\n", "", "ops", "=", "{", "'pointclouds_pl'", ":", "pointclouds_pl", ",", "\n", "'labels_pl'", ":", "labels_pl", ",", "\n", "'is_training_pl'", ":", "is_training_pl", ",", "\n", "'pred'", ":", "pred", ",", "\n", "'loss'", ":", "loss", ",", "\n", "'train_op'", ":", "train_op", ",", "\n", "'merged'", ":", "merged", ",", "\n", "'step'", ":", "batch", "}", "\n", "\n", "mean_loss", "=", "np", ".", "zeros", "(", "int", "(", "MAX_EPOCH", "/", "FLAGS", ".", "save_model_interval", ")", ")", "\n", "accuracy", "=", "np", ".", "zeros", "(", "int", "(", "MAX_EPOCH", "/", "FLAGS", ".", "save_model_interval", ")", ")", "\n", "eval_mean_loss", "=", "np", ".", "zeros", "(", "int", "(", "MAX_EPOCH", "/", "FLAGS", ".", "save_model_interval", ")", ")", "\n", "eval_accuracy", "=", "np", ".", "zeros", "(", "int", "(", "MAX_EPOCH", "/", "FLAGS", ".", "save_model_interval", ")", ")", "\n", "eval_avg_class_acc", "=", "np", ".", "zeros", "(", "int", "(", "MAX_EPOCH", "/", "FLAGS", ".", "save_model_interval", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "FLAGS", ".", "restore_epoch", ",", "MAX_EPOCH", ")", ":", "\n", "            ", "log_string", "(", "'**** EPOCH %03d ****'", "%", "epoch", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "[", "mean_loss_res", ",", "accuracy_res", "]", "=", "train_one_epoch", "(", "sess", ",", "ops", ",", "train_writer", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Epoch training time: %04f minutes'", "%", "(", "(", "end_time", "-", "start_time", ")", "/", "60.0", ")", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "[", "eval_mean_loss_val", ",", "eval_accuracy_val", ",", "eval_avg_class_acc_val", "]", "=", "eval_one_epoch", "(", "sess", ",", "ops", ",", "test_writer", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Epoch eval time: %04f minutes'", "%", "(", "(", "end_time", "-", "start_time", ")", "/", "60.0", ")", ")", "\n", "\n", "# Save the variables to disk.", "\n", "if", "(", "epoch", "+", "1", ")", "%", "FLAGS", ".", "save_model_interval", "==", "0", ":", "\n", "                ", "save_path", "=", "saver", ".", "save", "(", "sess", ",", "osp", ".", "join", "(", "parent_dir", ",", "LOG_DIR", ",", "'model-%03d.ckpt'", "%", "(", "epoch", "+", "1", ")", ")", ")", "\n", "log_string", "(", "\"Model saved in file: %s\"", "%", "save_path", ")", "\n", "mean_loss", "[", "int", "(", "epoch", "/", "FLAGS", ".", "save_model_interval", ")", "]", "=", "mean_loss_res", "\n", "accuracy", "[", "int", "(", "epoch", "/", "FLAGS", ".", "save_model_interval", ")", "]", "=", "accuracy_res", "\n", "eval_mean_loss", "[", "int", "(", "epoch", "/", "FLAGS", ".", "save_model_interval", ")", "]", "=", "eval_mean_loss_val", "\n", "eval_accuracy", "[", "int", "(", "epoch", "/", "FLAGS", ".", "save_model_interval", ")", "]", "=", "eval_accuracy_val", "\n", "eval_avg_class_acc", "[", "int", "(", "epoch", "/", "FLAGS", ".", "save_model_interval", ")", "]", "=", "eval_avg_class_acc_val", "\n", "\n", "# Save statistics", "\n", "np", ".", "save", "(", "osp", ".", "join", "(", "parent_dir", ",", "FLAGS", ".", "log_dir", ",", "'mean_loss'", ")", ",", "mean_loss", ")", "\n", "np", ".", "save", "(", "osp", ".", "join", "(", "parent_dir", ",", "FLAGS", ".", "log_dir", ",", "'accuracy'", ")", ",", "accuracy", ")", "\n", "np", ".", "save", "(", "osp", ".", "join", "(", "parent_dir", ",", "FLAGS", ".", "log_dir", ",", "'eval_mean_loss'", ")", ",", "eval_mean_loss", ")", "\n", "np", ".", "save", "(", "osp", ".", "join", "(", "parent_dir", ",", "FLAGS", ".", "log_dir", ",", "'eval_accuracy'", ")", ",", "eval_accuracy", ")", "\n", "np", ".", "save", "(", "osp", ".", "join", "(", "parent_dir", ",", "FLAGS", ".", "log_dir", ",", "'eval_avg_class_acc'", ")", ",", "eval_avg_class_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.train_classifier.train_one_epoch": [[218, 260], ["numpy.load", "numpy.load", "classifier.shuffle_data", "numpy.squeeze", "range", "train_classifier.log_string", "train_classifier.log_string", "os.join", "os.join", "numpy.squeeze", "classifier.jitter_point_cloud", "sess.run", "train_writer.add_summary", "numpy.argmax", "numpy.sum", "float", "float"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.provider.shuffle_data", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.log_string", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.log_string", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.provider.jitter_point_cloud"], ["", "", "", "", "def", "train_one_epoch", "(", "sess", ",", "ops", ",", "train_writer", ")", ":", "\n", "    ", "\"\"\" ops: dict mapping from string to tf ops \"\"\"", "\n", "is_training", "=", "True", "\n", "\n", "current_data", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "parent_dir", ",", "FLAGS", ".", "train_data", ")", ")", "\n", "current_label", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "parent_dir", ",", "FLAGS", ".", "train_labels", ")", ")", "\n", "current_data", "=", "current_data", "[", ":", ",", "0", ":", "NUM_POINT", ",", ":", "]", "\n", "current_data", ",", "current_label", ",", "_", "=", "provider", ".", "shuffle_data", "(", "current_data", ",", "np", ".", "squeeze", "(", "current_label", ")", ")", "\n", "current_label", "=", "np", ".", "squeeze", "(", "current_label", ")", "\n", "\n", "file_size", "=", "current_data", ".", "shape", "[", "0", "]", "\n", "num_batches", "=", "file_size", "//", "BATCH_SIZE", "\n", "\n", "total_correct", "=", "0", "\n", "total_seen", "=", "0", "\n", "loss_sum", "=", "0", "\n", "\n", "for", "batch_idx", "in", "range", "(", "num_batches", ")", ":", "\n", "        ", "start_idx", "=", "batch_idx", "*", "BATCH_SIZE", "\n", "end_idx", "=", "(", "batch_idx", "+", "1", ")", "*", "BATCH_SIZE", "\n", "\n", "# Augment batched point clouds by rotation and jittering", "\n", "# rotated_data = provider.rotate_point_cloud(current_data[start_idx:end_idx, :, :])", "\n", "rotated_data", "=", "current_data", "[", "start_idx", ":", "end_idx", ",", ":", ",", ":", "]", "# No rotation", "\n", "jittered_data", "=", "provider", ".", "jitter_point_cloud", "(", "rotated_data", ")", "\n", "feed_dict", "=", "{", "ops", "[", "'pointclouds_pl'", "]", ":", "jittered_data", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "current_label", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "summary", ",", "step", ",", "_", ",", "loss_val", ",", "pred_val", "=", "sess", ".", "run", "(", "[", "ops", "[", "'merged'", "]", ",", "ops", "[", "'step'", "]", ",", "\n", "ops", "[", "'train_op'", "]", ",", "ops", "[", "'loss'", "]", ",", "ops", "[", "'pred'", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "train_writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "pred_val", "=", "np", ".", "argmax", "(", "pred_val", ",", "1", ")", "\n", "correct", "=", "np", ".", "sum", "(", "pred_val", "==", "current_label", "[", "start_idx", ":", "end_idx", "]", ")", "\n", "total_correct", "+=", "correct", "\n", "total_seen", "+=", "BATCH_SIZE", "\n", "loss_sum", "+=", "loss_val", "\n", "\n", "", "mean_loss", "=", "loss_sum", "/", "float", "(", "num_batches", ")", "\n", "accuracy", "=", "total_correct", "/", "float", "(", "total_seen", ")", "\n", "log_string", "(", "'mean loss: %f'", "%", "mean_loss", ")", "\n", "log_string", "(", "'accuracy: %f'", "%", "accuracy", ")", "\n", "return", "[", "mean_loss", ",", "accuracy", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.train_classifier.eval_one_epoch": [[262, 305], ["numpy.load", "numpy.load", "numpy.squeeze", "range", "numpy.mean", "train_classifier.log_string", "train_classifier.log_string", "train_classifier.log_string", "os.join", "os.join", "sess.run", "numpy.argmax", "numpy.sum", "range", "float", "float", "range", "range", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.log_string", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.log_string", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.log_string"], ["", "def", "eval_one_epoch", "(", "sess", ",", "ops", ",", "test_writer", ")", ":", "\n", "    ", "\"\"\" ops: dict mapping from string to tf ops \"\"\"", "\n", "is_training", "=", "False", "\n", "total_correct", "=", "0", "\n", "total_seen", "=", "0", "\n", "loss_sum", "=", "0", "\n", "total_seen_class", "=", "[", "0", "for", "_", "in", "range", "(", "NUM_CLASSES", ")", "]", "\n", "total_correct_class", "=", "[", "0", "for", "_", "in", "range", "(", "NUM_CLASSES", ")", "]", "\n", "\n", "current_data", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "parent_dir", ",", "FLAGS", ".", "val_data", ")", ")", "\n", "current_label", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "parent_dir", ",", "FLAGS", ".", "val_labels", ")", ")", "\n", "current_data", "=", "current_data", "[", ":", ",", "0", ":", "NUM_POINT", ",", ":", "]", "\n", "current_label", "=", "np", ".", "squeeze", "(", "current_label", ")", "\n", "\n", "file_size", "=", "current_data", ".", "shape", "[", "0", "]", "\n", "num_batches", "=", "file_size", "//", "BATCH_SIZE", "\n", "\n", "for", "batch_idx", "in", "range", "(", "num_batches", ")", ":", "\n", "        ", "start_idx", "=", "batch_idx", "*", "BATCH_SIZE", "\n", "end_idx", "=", "(", "batch_idx", "+", "1", ")", "*", "BATCH_SIZE", "\n", "\n", "feed_dict", "=", "{", "ops", "[", "'pointclouds_pl'", "]", ":", "current_data", "[", "start_idx", ":", "end_idx", ",", ":", ",", ":", "]", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "current_label", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "summary", ",", "step", ",", "loss_val", ",", "pred_val", "=", "sess", ".", "run", "(", "[", "ops", "[", "'merged'", "]", ",", "ops", "[", "'step'", "]", ",", "\n", "ops", "[", "'loss'", "]", ",", "ops", "[", "'pred'", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "pred_val", "=", "np", ".", "argmax", "(", "pred_val", ",", "1", ")", "\n", "correct", "=", "np", ".", "sum", "(", "pred_val", "==", "current_label", "[", "start_idx", ":", "end_idx", "]", ")", "\n", "total_correct", "+=", "correct", "\n", "total_seen", "+=", "BATCH_SIZE", "\n", "loss_sum", "+=", "(", "loss_val", "*", "BATCH_SIZE", ")", "\n", "for", "i", "in", "range", "(", "start_idx", ",", "end_idx", ")", ":", "\n", "            ", "l", "=", "current_label", "[", "i", "]", "\n", "total_seen_class", "[", "l", "]", "+=", "1", "\n", "total_correct_class", "[", "l", "]", "+=", "(", "pred_val", "[", "i", "-", "start_idx", "]", "==", "l", ")", "\n", "\n", "", "", "eval_mean_loss", "=", "loss_sum", "/", "float", "(", "total_seen", ")", "\n", "eval_accuracy", "=", "total_correct", "/", "float", "(", "total_seen", ")", "\n", "eval_avg_class_acc", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "total_correct_class", ")", "/", "np", ".", "array", "(", "total_seen_class", ",", "dtype", "=", "np", ".", "float", ")", ")", "\n", "log_string", "(", "'eval mean loss: %f'", "%", "eval_mean_loss", ")", "\n", "log_string", "(", "'eval accuracy: %f'", "%", "eval_accuracy", ")", "\n", "log_string", "(", "'eval avg class acc: %f'", "%", "eval_avg_class_acc", ")", "\n", "return", "[", "eval_mean_loss", ",", "eval_accuracy", ",", "eval_avg_class_acc", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tst_classifier.log_string": [[57, 61], ["LOG_FOUT.write", "LOG_FOUT.flush", "print"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write"], ["def", "log_string", "(", "out_str", ")", ":", "\n", "    ", "LOG_FOUT", ".", "write", "(", "out_str", "+", "'\\n'", ")", "\n", "LOG_FOUT", ".", "flush", "(", ")", "\n", "print", "(", "out_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tst_classifier.evaluate": [[63, 95], ["tensorflow.ConfigProto", "tensorflow.Session", "tf.train.Saver.restore", "tst_classifier.log_string", "tst_classifier.eval_one_epoch", "tensorflow.device", "MODEL.placeholder_inputs", "tensorflow.placeholder", "MODEL.get_model", "MODEL.get_loss", "tensorflow.train.Saver", "os.join", "str"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.log_string", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tst_classifier.eval_one_epoch", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls.placeholder_inputs", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls.get_model", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls.get_loss"], ["", "def", "evaluate", "(", "num_votes", ")", ":", "\n", "    ", "is_training", "=", "False", "\n", "\n", "with", "tf", ".", "device", "(", "'/gpu:'", "+", "str", "(", "GPU_INDEX", ")", ")", ":", "\n", "        ", "pointclouds_pl", ",", "labels_pl", "=", "MODEL", ".", "placeholder_inputs", "(", "BATCH_SIZE", ",", "NUM_POINT", ")", "\n", "is_training_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "\n", "# simple model", "\n", "pred", ",", "end_points", "=", "MODEL", ".", "get_model", "(", "pointclouds_pl", ",", "is_training_pl", ",", "NUM_CLASSES", ")", "\n", "loss", "=", "MODEL", ".", "get_loss", "(", "pred", ",", "labels_pl", ",", "end_points", ")", "\n", "\n", "# Add ops to save and restore all the variables.", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "# Create a session", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "config", ".", "log_device_placement", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n", "# Restore variables from disk.", "\n", "saver", ".", "restore", "(", "sess", ",", "osp", ".", "join", "(", "parent_dir", ",", "MODEL_PATH", ")", ")", "\n", "log_string", "(", "\"Model restored.\"", ")", "\n", "\n", "ops", "=", "{", "'pointclouds_pl'", ":", "pointclouds_pl", ",", "\n", "'labels_pl'", ":", "labels_pl", ",", "\n", "'is_training_pl'", ":", "is_training_pl", ",", "\n", "'pred'", ":", "pred", ",", "\n", "'loss'", ":", "loss", "}", "\n", "\n", "eval_one_epoch", "(", "sess", ",", "ops", ",", "num_votes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tst_classifier.eval_one_epoch": [[97, 168], ["open", "numpy.load", "numpy.load", "numpy.squeeze", "print", "print", "range", "tst_classifier.log_string", "tst_classifier.log_string", "tst_classifier.log_string", "numpy.save", "enumerate", "os.join", "os.join", "os.join", "numpy.zeros", "numpy.zeros", "range", "numpy.argmax", "numpy.sum", "range", "numpy.array", "numpy.array", "os.join", "tst_classifier.log_string", "range", "range", "classifier.rotate_point_cloud_by_angle", "sess.run", "numpy.argmax", "range", "open.write", "numpy.mean", "float", "float", "float", "float", "numpy.array", "numpy.array", "float"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.dataset_shapenet.ShapeNet.load", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.log_string", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.log_string", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.log_string", "home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.mesh_processor.save", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.log_string", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.provider.rotate_point_cloud_by_angle", "home.repos.pwc.inspect_result.itailang_geometric_adv.python_plyfile.plyfile.PlyData.write"], ["", "def", "eval_one_epoch", "(", "sess", ",", "ops", ",", "num_votes", "=", "1", ")", ":", "\n", "    ", "is_training", "=", "False", "\n", "total_correct", "=", "0", "\n", "total_seen", "=", "0", "\n", "loss_sum", "=", "0", "\n", "total_seen_class", "=", "[", "0", "for", "_", "in", "range", "(", "NUM_CLASSES", ")", "]", "\n", "total_correct_class", "=", "[", "0", "for", "_", "in", "range", "(", "NUM_CLASSES", ")", "]", "\n", "fout", "=", "open", "(", "osp", ".", "join", "(", "parent_dir", ",", "DUMP_DIR", ",", "'pred_label.txt'", ")", ",", "'w'", ")", "\n", "\n", "current_data", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "parent_dir", ",", "FLAGS", ".", "test_data", ")", ")", "\n", "current_label", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "parent_dir", ",", "FLAGS", ".", "test_labels", ")", ")", "\n", "current_data", "=", "current_data", "[", ":", ",", "0", ":", "NUM_POINT", ",", ":", "]", "\n", "current_label", "=", "np", ".", "squeeze", "(", "current_label", ")", "\n", "print", "(", "current_data", ".", "shape", ")", "\n", "\n", "file_size", "=", "current_data", ".", "shape", "[", "0", "]", "\n", "assert", "(", "file_size", "%", "BATCH_SIZE", "==", "0", ")", ",", "'The number of examples (%d) should be divided by the batch size (%d) without a remainder'", "%", "(", "file_size", ",", "BATCH_SIZE", ")", "\n", "num_batches", "=", "file_size", "//", "BATCH_SIZE", "\n", "if", "file_size", "%", "BATCH_SIZE", ">", "0", ":", "\n", "        ", "num_batches", "=", "num_batches", "+", "1", "\n", "last_batch_partial", "=", "True", "\n", "", "else", ":", "\n", "        ", "last_batch_partial", "=", "False", "\n", "", "print", "(", "file_size", ")", "\n", "\n", "for", "batch_idx", "in", "range", "(", "num_batches", ")", ":", "\n", "        ", "start_idx", "=", "batch_idx", "*", "BATCH_SIZE", "\n", "end_idx", "=", "(", "batch_idx", "+", "1", ")", "*", "BATCH_SIZE", "\n", "cur_batch_size", "=", "end_idx", "-", "start_idx", "\n", "\n", "# Aggregating BEG", "\n", "batch_loss_sum", "=", "0", "# sum of losses for the batch", "\n", "batch_pred_sum", "=", "np", ".", "zeros", "(", "(", "cur_batch_size", ",", "NUM_CLASSES", ")", ")", "# score for classes", "\n", "batch_pred_classes", "=", "np", ".", "zeros", "(", "(", "cur_batch_size", ",", "NUM_CLASSES", ")", ")", "# 0/1 for classes", "\n", "for", "vote_idx", "in", "range", "(", "num_votes", ")", ":", "\n", "            ", "rotated_data", "=", "provider", ".", "rotate_point_cloud_by_angle", "(", "current_data", "[", "start_idx", ":", "end_idx", ",", ":", ",", ":", "]", ",", "\n", "vote_idx", "/", "float", "(", "num_votes", ")", "*", "np", ".", "pi", "*", "2", ")", "\n", "feed_dict", "=", "{", "ops", "[", "'pointclouds_pl'", "]", ":", "rotated_data", ",", "\n", "ops", "[", "'labels_pl'", "]", ":", "current_label", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "loss_val", ",", "pred_val", "=", "sess", ".", "run", "(", "[", "ops", "[", "'loss'", "]", ",", "ops", "[", "'pred'", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "batch_pred_sum", "+=", "pred_val", "\n", "batch_pred_val", "=", "np", ".", "argmax", "(", "pred_val", ",", "1", ")", "\n", "for", "el_idx", "in", "range", "(", "cur_batch_size", ")", ":", "\n", "                ", "batch_pred_classes", "[", "el_idx", ",", "batch_pred_val", "[", "el_idx", "]", "]", "+=", "1", "\n", "", "batch_loss_sum", "+=", "(", "loss_val", "*", "cur_batch_size", "/", "float", "(", "num_votes", ")", ")", "\n", "", "pred_val", "=", "np", ".", "argmax", "(", "batch_pred_sum", ",", "1", ")", "\n", "# Aggregating END", "\n", "\n", "correct", "=", "np", ".", "sum", "(", "pred_val", "==", "current_label", "[", "start_idx", ":", "end_idx", "]", ")", "\n", "total_correct", "+=", "correct", "\n", "total_seen", "+=", "cur_batch_size", "\n", "loss_sum", "+=", "batch_loss_sum", "\n", "\n", "for", "i", "in", "range", "(", "start_idx", ",", "end_idx", ")", ":", "\n", "            ", "l", "=", "current_label", "[", "i", "]", "\n", "total_seen_class", "[", "l", "]", "+=", "1", "\n", "total_correct_class", "[", "l", "]", "+=", "(", "pred_val", "[", "i", "-", "start_idx", "]", "==", "l", ")", "\n", "fout", ".", "write", "(", "'%d, %d\\n'", "%", "(", "pred_val", "[", "i", "-", "start_idx", "]", ",", "l", ")", ")", "\n", "\n", "", "", "log_string", "(", "'test mean loss: %f'", "%", "(", "loss_sum", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "log_string", "(", "'test accuracy: %f'", "%", "(", "total_correct", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "log_string", "(", "'test avg class acc: %f'", "%", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "total_correct_class", ")", "/", "np", ".", "array", "(", "total_seen_class", ",", "dtype", "=", "np", ".", "float", ")", ")", ")", ")", "\n", "\n", "class_accuracies", "=", "np", ".", "array", "(", "total_correct_class", ")", "/", "np", ".", "array", "(", "total_seen_class", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "np", ".", "save", "(", "osp", ".", "join", "(", "parent_dir", ",", "FLAGS", ".", "dump_dir", ",", "'test_accuracy'", ")", ",", "(", "total_correct", "/", "float", "(", "total_seen", ")", ")", ")", "\n", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "PC_CLASSES", ")", ":", "\n", "        ", "log_string", "(", "'%10s:\\t%0.3f'", "%", "(", "name", ",", "class_accuracies", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util._variable_on_cpu": [[9, 22], ["tensorflow.device", "tensorflow.get_variable"], "function", ["None"], ["def", "_variable_on_cpu", "(", "name", ",", "shape", ",", "initializer", ",", "use_fp16", "=", "False", ")", ":", "\n", "  ", "\"\"\"Helper to create a Variable stored on CPU memory.\n  Args:\n    name: name of the variable\n    shape: list of ints\n    initializer: initializer for Variable\n  Returns:\n    Variable Tensor\n  \"\"\"", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "    ", "dtype", "=", "tf", ".", "float16", "if", "use_fp16", "else", "tf", ".", "float32", "\n", "var", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", ",", "initializer", "=", "initializer", ",", "dtype", "=", "dtype", ")", "\n", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util._variable_with_weight_decay": [[23, 49], ["tf_util._variable_on_cpu", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.truncated_normal_initializer", "tensorflow.multiply", "tensorflow.add_to_collection", "tensorflow.nn.l2_loss"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util._variable_on_cpu"], ["", "def", "_variable_with_weight_decay", "(", "name", ",", "shape", ",", "stddev", ",", "wd", ",", "use_xavier", "=", "True", ")", ":", "\n", "  ", "\"\"\"Helper to create an initialized Variable with weight decay.\n\n  Note that the Variable is initialized with a truncated normal distribution.\n  A weight decay is added only if one is specified.\n\n  Args:\n    name: name of the variable\n    shape: list of ints\n    stddev: standard deviation of a truncated Gaussian\n    wd: add L2Loss weight decay multiplied by this float. If None, weight\n        decay is not added for this Variable.\n    use_xavier: bool, whether to use xavier initializer\n\n  Returns:\n    Variable Tensor\n  \"\"\"", "\n", "if", "use_xavier", ":", "\n", "    ", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "", "else", ":", "\n", "    ", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "", "var", "=", "_variable_on_cpu", "(", "name", ",", "shape", ",", "initializer", ")", "\n", "if", "wd", "is", "not", "None", ":", "\n", "    ", "weight_decay", "=", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", ",", "wd", ",", "name", "=", "'weight_loss'", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "weight_decay", ")", "\n", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv1d": [[51, 107], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.nn.conv1d", "tf_util._variable_on_cpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_conv1d", "activation_fn", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv1d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.batch_norm_for_conv1d"], ["", "def", "conv1d", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "use_xavier", "=", "True", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ")", ":", "\n", "  ", "\"\"\" 1D convolution with non-linear operation.\n\n  Args:\n    inputs: 3-D tensor variable BxLxC\n    num_output_channels: int\n    kernel_size: int\n    scope: string\n    stride: int\n    padding: 'SAME' or 'VALID'\n    use_xavier: bool, use xavier_initializer if true\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "kernel_shape", "=", "[", "kernel_size", ",", "\n", "num_in_channels", ",", "num_output_channels", "]", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "use_xavier", "=", "use_xavier", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv1d", "(", "inputs", ",", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ")", "\n", "biases", "=", "_variable_on_cpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "      ", "outputs", "=", "batch_norm_for_conv1d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "      ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d": [[111, 169], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.nn.conv2d", "tf_util._variable_on_cpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_conv2d", "activation_fn", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.batch_norm_for_conv2d"], ["", "", "def", "conv2d", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "use_xavier", "=", "True", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ")", ":", "\n", "  ", "\"\"\" 2D convolution with non-linear operation.\n\n  Args:\n    inputs: 4-D tensor variable BxHxWxC\n    num_output_channels: int\n    kernel_size: a list of 2 ints\n    scope: string\n    stride: a list of 2 ints\n    padding: 'SAME' or 'VALID'\n    use_xavier: bool, use xavier_initializer if true\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "      ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "kernel_shape", "=", "[", "kernel_h", ",", "kernel_w", ",", "\n", "num_in_channels", ",", "num_output_channels", "]", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "use_xavier", "=", "use_xavier", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ")", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv2d", "(", "inputs", ",", "kernel", ",", "\n", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ")", "\n", "biases", "=", "_variable_on_cpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "        ", "outputs", "=", "batch_norm_for_conv2d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "        ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d_transpose": [[171, 248], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tf_util.conv2d_transpose.get_deconv_dim"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util._variable_with_weight_decay"], ["", "", "def", "conv2d_transpose", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "use_xavier", "=", "True", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ")", ":", "\n", "  ", "\"\"\" 2D convolution transpose with non-linear operation.\n\n  Args:\n    inputs: 4-D tensor variable BxHxWxC\n    num_output_channels: int\n    kernel_size: a list of 2 ints\n    scope: string\n    stride: a list of 2 ints\n    padding: 'SAME' or 'VALID'\n    use_xavier: bool, use xavier_initializer if true\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n\n  Note: conv2d(conv2d_transpose(a, num_out, ksize, stride), a.shape[-1], ksize, stride) == a\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "      ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "kernel_shape", "=", "[", "kernel_h", ",", "kernel_w", ",", "\n", "num_output_channels", ",", "num_in_channels", "]", "# reversed to conv2d", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "use_xavier", "=", "use_xavier", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ")", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "\n", "# from slim.convolution2d_transpose", "\n", "def", "get_deconv_dim", "(", "dim_size", ",", "stride_size", ",", "kernel_size", ",", "padding", ")", ":", "\n", "          ", "dim_size", "*=", "stride_size", "\n", "\n", "if", "padding", "==", "'VALID'", "and", "dim_size", "is", "not", "None", ":", "\n", "            ", "dim_size", "+=", "max", "(", "kernel_size", "-", "stride_size", ",", "0", ")", "\n", "", "return", "dim_size", "\n", "\n", "# caculate output shape", "\n", "", "batch_size", "=", "inputs", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "height", "=", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "width", "=", "inputs", ".", "get_shape", "(", ")", "[", "2", "]", ".", "value", "\n", "out_height", "=", "get_deconv_dim", "(", "height", ",", "stride_h", ",", "kernel_h", ",", "padding", ")", "\n", "out_width", "=", "get_deconv_dim", "(", "width", ",", "stride_w", ",", "kernel_w", ",", "padding", ")", "\n", "output_shape", "=", "[", "batch_size", ",", "out_height", ",", "out_width", ",", "num_output_channels", "]", "\n", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "inputs", ",", "kernel", ",", "output_shape", ",", "\n", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ")", "\n", "biases", "=", "_variable_on_cpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "        ", "outputs", "=", "batch_norm_for_conv2d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "        ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv3d": [[251, 309], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.nn.conv3d", "tf_util._variable_on_cpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_conv3d", "activation_fn", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv3d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.batch_norm_for_conv3d"], ["", "", "def", "conv3d", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "use_xavier", "=", "True", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ")", ":", "\n", "  ", "\"\"\" 3D convolution with non-linear operation.\n\n  Args:\n    inputs: 5-D tensor variable BxDxHxWxC\n    num_output_channels: int\n    kernel_size: a list of 3 ints\n    scope: string\n    stride: a list of 3 ints\n    padding: 'SAME' or 'VALID'\n    use_xavier: bool, use xavier_initializer if true\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_d", ",", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "kernel_shape", "=", "[", "kernel_d", ",", "kernel_h", ",", "kernel_w", ",", "\n", "num_in_channels", ",", "num_output_channels", "]", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "use_xavier", "=", "use_xavier", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ")", "\n", "stride_d", ",", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv3d", "(", "inputs", ",", "kernel", ",", "\n", "[", "1", ",", "stride_d", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ")", "\n", "biases", "=", "_variable_on_cpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "      ", "outputs", "=", "batch_norm_for_conv3d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "      ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.fully_connected": [[310, 347], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.matmul", "tf_util._variable_on_cpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_fc", "activation_fn", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util._variable_on_cpu", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.batch_norm_for_fc"], ["", "", "def", "fully_connected", "(", "inputs", ",", "\n", "num_outputs", ",", "\n", "scope", ",", "\n", "use_xavier", "=", "True", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ")", ":", "\n", "  ", "\"\"\" Fully connected layer with non-linear operation.\n  \n  Args:\n    inputs: 2-D tensor BxN\n    num_outputs: int\n  \n  Returns:\n    Variable tensor of size B x num_outputs.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "num_input_units", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "weights", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "[", "num_input_units", ",", "num_outputs", "]", ",", "\n", "use_xavier", "=", "use_xavier", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ")", "\n", "outputs", "=", "tf", ".", "matmul", "(", "inputs", ",", "weights", ")", "\n", "biases", "=", "_variable_on_cpu", "(", "'biases'", ",", "[", "num_outputs", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "      ", "outputs", "=", "batch_norm_for_fc", "(", "outputs", ",", "is_training", ",", "bn_decay", ",", "'bn'", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "      ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.max_pool2d": [[349, 373], ["tensorflow.variable_scope", "tensorflow.nn.max_pool"], "function", ["None"], ["", "", "def", "max_pool2d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 2D max pooling.\n\n  Args:\n    inputs: 4-D tensor BxHxWxC\n    kernel_size: a list of 2 ints\n    stride: a list of 2 ints\n  \n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "max_pool", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.avg_pool2d": [[374, 398], ["tensorflow.variable_scope", "tensorflow.nn.avg_pool"], "function", ["None"], ["", "", "def", "avg_pool2d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 2D avg pooling.\n\n  Args:\n    inputs: 4-D tensor BxHxWxC\n    kernel_size: a list of 2 ints\n    stride: a list of 2 ints\n  \n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "avg_pool", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.max_pool3d": [[400, 424], ["tensorflow.variable_scope", "tensorflow.nn.max_pool3d"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.max_pool3d"], ["", "", "def", "max_pool3d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 3D max pooling.\n\n  Args:\n    inputs: 5-D tensor BxDxHxWxC\n    kernel_size: a list of 3 ints\n    stride: a list of 3 ints\n  \n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_d", ",", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_d", ",", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_d", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_d", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.avg_pool3d": [[425, 449], ["tensorflow.variable_scope", "tensorflow.nn.avg_pool3d"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.avg_pool3d"], ["", "", "def", "avg_pool3d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 3D avg pooling.\n\n  Args:\n    inputs: 5-D tensor BxDxHxWxC\n    kernel_size: a list of 3 ints\n    stride: a list of 3 ints\n  \n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_d", ",", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_d", ",", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "avg_pool3d", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_d", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_d", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.batch_norm_template": [[454, 492], ["tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.moments", "tensorflow.train.ExponentialMovingAverage", "tensorflow.cond", "tensorflow.cond", "tensorflow.nn.batch_normalization", "tensorflow.constant", "tensorflow.constant", "inputs.get_shape", "tf.train.ExponentialMovingAverage.apply", "tensorflow.no_op", "tensorflow.control_dependencies", "tensorflow.identity", "tensorflow.identity", "tf.train.ExponentialMovingAverage.average", "tf.train.ExponentialMovingAverage.average"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.dataset.pointcloud_processor.Operation.apply"], ["", "", "def", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "moments_dims", ",", "bn_decay", ")", ":", "\n", "  ", "\"\"\" Batch normalization on convolutional maps and beyond...\n  Ref.: http://stackoverflow.com/questions/33949786/how-could-i-use-batch-normalization-in-tensorflow\n  \n  Args:\n      inputs:        Tensor, k-D input ... x C could be BC or BHWC or BDHWC\n      is_training:   boolean tf.Varialbe, true indicates training phase\n      scope:         string, variable scope\n      moments_dims:  a list of ints, indicating dimensions for moments calculation\n      bn_decay:      float or float tensor variable, controling moving average weight\n  Return:\n      normed:        batch-normalized maps\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "num_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "beta", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.0", ",", "shape", "=", "[", "num_channels", "]", ")", ",", "\n", "name", "=", "'beta'", ",", "trainable", "=", "True", ")", "\n", "gamma", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "1.0", ",", "shape", "=", "[", "num_channels", "]", ")", ",", "\n", "name", "=", "'gamma'", ",", "trainable", "=", "True", ")", "\n", "batch_mean", ",", "batch_var", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "moments_dims", ",", "name", "=", "'moments'", ")", "\n", "decay", "=", "bn_decay", "if", "bn_decay", "is", "not", "None", "else", "0.9", "\n", "ema", "=", "tf", ".", "train", ".", "ExponentialMovingAverage", "(", "decay", "=", "decay", ")", "\n", "# Operator that maintains moving averages of variables.", "\n", "ema_apply_op", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "lambda", ":", "ema", ".", "apply", "(", "[", "batch_mean", ",", "batch_var", "]", ")", ",", "\n", "lambda", ":", "tf", ".", "no_op", "(", ")", ")", "\n", "\n", "# Update moving average and return current batch's avg and var.", "\n", "def", "mean_var_with_update", "(", ")", ":", "\n", "      ", "with", "tf", ".", "control_dependencies", "(", "[", "ema_apply_op", "]", ")", ":", "\n", "        ", "return", "tf", ".", "identity", "(", "batch_mean", ")", ",", "tf", ".", "identity", "(", "batch_var", ")", "\n", "\n", "# ema.average returns the Variable holding the average of var.", "\n", "", "", "mean", ",", "var", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "mean_var_with_update", ",", "\n", "lambda", ":", "(", "ema", ".", "average", "(", "batch_mean", ")", ",", "ema", ".", "average", "(", "batch_var", ")", ")", ")", "\n", "normed", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "inputs", ",", "mean", ",", "var", ",", "beta", ",", "gamma", ",", "1e-3", ")", "\n", "", "return", "normed", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.batch_norm_for_fc": [[494, 506], ["tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.batch_norm_template"], ["", "def", "batch_norm_for_fc", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ")", ":", "\n", "  ", "\"\"\" Batch normalization on FC data.\n  \n  Args:\n      inputs:      Tensor, 2D BxC input\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "]", ",", "bn_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.batch_norm_for_conv1d": [[508, 520], ["tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.batch_norm_template"], ["", "def", "batch_norm_for_conv1d", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ")", ":", "\n", "  ", "\"\"\" Batch normalization on 1D convolutional maps.\n  \n  Args:\n      inputs:      Tensor, 3D BLC input maps\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "1", "]", ",", "bn_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.batch_norm_for_conv2d": [[524, 536], ["tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.batch_norm_template"], ["", "def", "batch_norm_for_conv2d", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ")", ":", "\n", "  ", "\"\"\" Batch normalization on 2D convolutional maps.\n  \n  Args:\n      inputs:      Tensor, 4D BHWC input maps\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "1", ",", "2", "]", ",", "bn_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.batch_norm_for_conv3d": [[539, 551], ["tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.batch_norm_template"], ["", "def", "batch_norm_for_conv3d", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ")", ":", "\n", "  ", "\"\"\" Batch normalization on 3D convolutional maps.\n  \n  Args:\n      inputs:      Tensor, 5D BDHWC input maps\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "bn_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.dropout": [[553, 575], ["tensorflow.variable_scope", "tensorflow.cond", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.dropout"], ["", "def", "dropout", "(", "inputs", ",", "\n", "is_training", ",", "\n", "scope", ",", "\n", "keep_prob", "=", "0.5", ",", "\n", "noise_shape", "=", "None", ")", ":", "\n", "  ", "\"\"\" Dropout layer.\n\n  Args:\n    inputs: tensor\n    is_training: boolean tf.Variable\n    scope: string\n    keep_prob: float in [0,1]\n    noise_shape: list of ints\n\n  Returns:\n    tensor variable\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "outputs", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "inputs", ",", "keep_prob", ",", "noise_shape", ")", ",", "\n", "lambda", ":", "inputs", ")", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls.placeholder_inputs": [[24, 28], ["tensorflow.placeholder", "tensorflow.placeholder"], "function", ["None"], ["def", "placeholder_inputs", "(", "batch_size", ",", "num_point", ")", ":", "\n", "    ", "pointclouds_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "num_point", ",", "3", ")", ")", "\n", "labels_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "batch_size", ")", ")", "\n", "return", "pointclouds_pl", ",", "labels_pl", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls.get_model": [[30, 85], ["tensorflow.matmul", "tensorflow.expand_dims", "classifier.conv2d", "classifier.conv2d", "tensorflow.matmul", "tensorflow.expand_dims", "classifier.conv2d", "classifier.conv2d", "classifier.conv2d", "classifier.max_pool2d", "tensorflow.reshape", "classifier.fully_connected", "classifier.dropout", "classifier.fully_connected", "classifier.dropout", "classifier.fully_connected", "tensorflow.variable_scope", "classifier.transform_nets.input_transform_net", "tensorflow.variable_scope", "classifier.transform_nets.feature_transform_net", "tensorflow.squeeze", "point_cloud.get_shape", "point_cloud.get_shape"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.max_pool2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.fully_connected", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.dropout", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.fully_connected", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.dropout", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.fully_connected", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.transform_nets.input_transform_net", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.transform_nets.feature_transform_net"], ["", "def", "get_model", "(", "point_cloud", ",", "is_training", ",", "num_classes", ",", "bn_decay", "=", "None", ")", ":", "\n", "    ", "\"\"\" Classification PointNet, input is BxNx3, output Bx40 \"\"\"", "\n", "batch_size", "=", "point_cloud", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "num_point", "=", "point_cloud", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "end_points", "=", "{", "}", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'transform_net1'", ")", "as", "sc", ":", "\n", "        ", "transform", "=", "input_transform_net", "(", "point_cloud", ",", "is_training", ",", "bn_decay", ",", "K", "=", "3", ")", "\n", "", "point_cloud_transformed", "=", "tf", ".", "matmul", "(", "point_cloud", ",", "transform", ")", "\n", "input_image", "=", "tf", ".", "expand_dims", "(", "point_cloud_transformed", ",", "-", "1", ")", "\n", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "input_image", ",", "64", ",", "[", "1", ",", "3", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv1'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "net", ",", "64", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv2'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'transform_net2'", ")", "as", "sc", ":", "\n", "        ", "transform", "=", "feature_transform_net", "(", "net", ",", "is_training", ",", "bn_decay", ",", "K", "=", "64", ")", "\n", "", "end_points", "[", "'transform'", "]", "=", "transform", "\n", "net_transformed", "=", "tf", ".", "matmul", "(", "tf", ".", "squeeze", "(", "net", ",", "axis", "=", "[", "2", "]", ")", ",", "transform", ")", "\n", "net_transformed", "=", "tf", ".", "expand_dims", "(", "net_transformed", ",", "[", "2", "]", ")", "\n", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "net_transformed", ",", "64", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv3'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "net", ",", "128", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv4'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "net", ",", "1024", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv5'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "\n", "# Symmetric function: max pooling", "\n", "net", "=", "tf_util", ".", "max_pool2d", "(", "net", ",", "[", "num_point", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "scope", "=", "'maxpool'", ")", "\n", "\n", "net", "=", "tf", ".", "reshape", "(", "net", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "512", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'fc1'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.7", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dp1'", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "256", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'fc2'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.7", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dp2'", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "num_classes", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc3'", ")", "\n", "\n", "return", "net", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls.get_loss": [[87, 103], ["tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.matmul", "tensorflow.constant", "tensorflow.nn.l2_loss", "tensorflow.summary.scalar", "tensorflow.transpose", "numpy.eye", "transform.get_shape"], "function", ["None"], ["", "def", "get_loss", "(", "pred", ",", "label", ",", "end_points", ",", "reg_weight", "=", "0.001", ")", ":", "\n", "    ", "\"\"\" pred: B*NUM_CLASSES,\n        label: B, \"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "pred", ",", "labels", "=", "label", ")", "\n", "classify_loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'classify loss'", ",", "classify_loss", ")", "\n", "\n", "# Enforce the transformation as orthogonal matrix", "\n", "transform", "=", "end_points", "[", "'transform'", "]", "# BxKxK", "\n", "K", "=", "transform", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "mat_diff", "=", "tf", ".", "matmul", "(", "transform", ",", "tf", ".", "transpose", "(", "transform", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "mat_diff", "-=", "tf", ".", "constant", "(", "np", ".", "eye", "(", "K", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mat_diff_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "mat_diff", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'mat loss'", ",", "mat_diff_loss", ")", "\n", "\n", "return", "classify_loss", "+", "mat_diff_loss", "*", "reg_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.__init__": [[16, 49], ["importlib.import_module", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.train.Saver.restore", "os.join", "tensorflow.device", "pointnet_classifier.PointNetClassifier.MODEL.placeholder_inputs", "tensorflow.placeholder", "pointnet_classifier.PointNetClassifier.MODEL.get_model", "tensorflow.train.Saver", "os.join", "os.join", "str"], "methods", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls.placeholder_inputs", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_cls.get_model"], ["    ", "def", "__init__", "(", "self", ",", "classifier_path", ",", "restore_epoch", ",", "num_points", ",", "batch_size", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "BATCH_SIZE", "=", "batch_size", "\n", "if", "restore_epoch", "<", "10", ":", "\n", "            ", "self", ".", "MODEL_PATH", "=", "osp", ".", "join", "(", "classifier_path", ",", "'model-00%d.ckpt'", "%", "restore_epoch", ")", "\n", "", "elif", "restore_epoch", "<", "100", ":", "\n", "            ", "self", ".", "MODEL_PATH", "=", "osp", ".", "join", "(", "classifier_path", ",", "'model-0%d.ckpt'", "%", "restore_epoch", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "MODEL_PATH", "=", "osp", ".", "join", "(", "classifier_path", ",", "'model-%d.ckpt'", "%", "restore_epoch", ")", "\n", "", "self", ".", "GPU_INDEX", "=", "0", "\n", "self", ".", "MODEL", "=", "importlib", ".", "import_module", "(", "'pointnet_cls'", ")", "# import network module", "\n", "self", ".", "NUM_CLASSES", "=", "num_classes", "\n", "self", ".", "NUM_POINTS", "=", "num_points", "\n", "with", "tf", ".", "device", "(", "'/gpu:'", "+", "str", "(", "self", ".", "GPU_INDEX", ")", ")", ":", "\n", "            ", "pointclouds_pl", ",", "labels_pl", "=", "self", ".", "MODEL", ".", "placeholder_inputs", "(", "self", ".", "BATCH_SIZE", ",", "self", ".", "NUM_POINTS", ")", "\n", "is_training_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "(", ")", ")", "\n", "\n", "# simple model", "\n", "self", ".", "pred", ",", "self", ".", "end_points", "=", "self", ".", "MODEL", ".", "get_model", "(", "pointclouds_pl", ",", "is_training_pl", ",", "self", ".", "NUM_CLASSES", ")", "\n", "\n", "# Add ops to save and restore all the variables.", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "# Create a session", "\n", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "config", ".", "log_device_placement", "=", "True", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n", "# Restore variables from disk.", "\n", "saver", ".", "restore", "(", "self", ".", "sess", ",", "self", ".", "MODEL_PATH", ")", "\n", "\n", "self", ".", "ops", "=", "{", "'pointclouds_pl'", ":", "pointclouds_pl", ",", "'labels_pl'", ":", "labels_pl", ",", "'is_training_pl'", ":", "is_training_pl", ",", "'pred'", ":", "self", ".", "pred", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.log_string": [[50, 53], ["print"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "log_string", "(", "out_str", ")", ":", "\n", "        ", "print", "(", "out_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.pointnet_classifier.PointNetClassifier.classify": [[54, 74], ["numpy.zeros", "range", "numpy.zeros", "pointnet_classifier.PointNetClassifier.sess.run", "numpy.argmax().astype", "numpy.argmax"], "methods", ["None"], ["", "def", "classify", "(", "self", ",", "current_data", ")", ":", "\n", "        ", "is_training", "=", "False", "\n", "\n", "num_examples", "=", "current_data", ".", "shape", "[", "0", "]", "\n", "assert", "num_examples", "%", "self", ".", "BATCH_SIZE", "==", "0", ",", "'The number of examples (%d) should be divided by the batch size (%d)'", "%", "(", "num_examples", ",", "self", ".", "BATCH_SIZE", ")", "\n", "num_batches", "=", "num_examples", "//", "self", ".", "BATCH_SIZE", "\n", "\n", "pred_label", "=", "np", ".", "zeros", "(", "current_data", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "for", "batch_idx", "in", "range", "(", "num_batches", ")", ":", "\n", "            ", "start_idx", "=", "batch_idx", "*", "self", ".", "BATCH_SIZE", "\n", "end_idx", "=", "(", "batch_idx", "+", "1", ")", "*", "self", ".", "BATCH_SIZE", "\n", "cur_batch_size", "=", "end_idx", "-", "start_idx", "\n", "\n", "pred_label_batch", "=", "np", ".", "zeros", "(", "cur_batch_size", ",", "dtype", "=", "np", ".", "int8", ")", "# class labels for batch", "\n", "feed_dict", "=", "{", "self", ".", "ops", "[", "'pointclouds_pl'", "]", ":", "current_data", "[", "start_idx", ":", "end_idx", ",", ":", ",", ":", "]", ",", "self", ".", "ops", "[", "'is_training_pl'", "]", ":", "is_training", "}", "\n", "pred_val_batch", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "ops", "[", "'pred'", "]", ",", "feed_dict", "=", "feed_dict", ")", "# score for classes", "\n", "pred_label_batch", "=", "np", ".", "argmax", "(", "pred_val_batch", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "int8", ")", "\n", "pred_label", "[", "start_idx", ":", "end_idx", "]", "=", "pred_label_batch", "\n", "\n", "", "return", "pred_label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.transform_nets.input_transform_net": [[22, 65], ["tensorflow.expand_dims", "classifier.conv2d", "classifier.conv2d", "classifier.conv2d", "classifier.max_pool2d", "tensorflow.reshape", "classifier.fully_connected", "classifier.fully_connected", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.constant", "tensorflow.matmul", "tensorflow.nn.bias_add", "point_cloud.get_shape", "point_cloud.get_shape", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.max_pool2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.fully_connected", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.fully_connected"], ["def", "input_transform_net", "(", "point_cloud", ",", "is_training", ",", "bn_decay", "=", "None", ",", "K", "=", "3", ")", ":", "\n", "    ", "\"\"\" Input (XYZ) Transform Net, input is BxNx3 gray image\n        Return:\n            Transformation matrix of size 3xK \"\"\"", "\n", "batch_size", "=", "point_cloud", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "num_point", "=", "point_cloud", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "\n", "input_image", "=", "tf", ".", "expand_dims", "(", "point_cloud", ",", "-", "1", ")", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "input_image", ",", "64", ",", "[", "1", ",", "3", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'tconv1'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "net", ",", "128", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'tconv2'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "net", ",", "1024", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'tconv3'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "max_pool2d", "(", "net", ",", "[", "num_point", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "scope", "=", "'tmaxpool'", ")", "\n", "\n", "net", "=", "tf", ".", "reshape", "(", "net", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "512", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'tfc1'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "256", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'tfc2'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'transform_XYZ'", ")", "as", "sc", ":", "\n", "        ", "assert", "(", "K", "==", "3", ")", "\n", "weights", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "[", "256", ",", "3", "*", "K", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "[", "3", "*", "K", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "biases", "+=", "tf", ".", "constant", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "transform", "=", "tf", ".", "matmul", "(", "net", ",", "weights", ")", "\n", "transform", "=", "tf", ".", "nn", ".", "bias_add", "(", "transform", ",", "biases", ")", "\n", "\n", "", "transform", "=", "tf", ".", "reshape", "(", "transform", ",", "[", "batch_size", ",", "3", ",", "K", "]", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.transform_nets.feature_transform_net": [[67, 108], ["classifier.conv2d", "classifier.conv2d", "classifier.conv2d", "classifier.max_pool2d", "tensorflow.reshape", "classifier.fully_connected", "classifier.fully_connected", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.constant", "tensorflow.matmul", "tensorflow.nn.bias_add", "inputs.get_shape", "inputs.get_shape", "numpy.eye().flatten", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.conv2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.max_pool2d", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.fully_connected", "home.repos.pwc.inspect_result.itailang_geometric_adv.classifier.tf_util.fully_connected"], ["", "def", "feature_transform_net", "(", "inputs", ",", "is_training", ",", "bn_decay", "=", "None", ",", "K", "=", "64", ")", ":", "\n", "    ", "\"\"\" Feature Transform Net, input is BxNx1xK\n        Return:\n            Transformation matrix of size KxK \"\"\"", "\n", "batch_size", "=", "inputs", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "num_point", "=", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "inputs", ",", "64", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'tconv1'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "net", ",", "128", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'tconv2'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "conv2d", "(", "net", ",", "1024", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'tconv3'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "max_pool2d", "(", "net", ",", "[", "num_point", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "scope", "=", "'tmaxpool'", ")", "\n", "\n", "net", "=", "tf", ".", "reshape", "(", "net", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "512", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'tfc1'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "256", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'tfc2'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'transform_feat'", ")", "as", "sc", ":", "\n", "        ", "weights", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "[", "256", ",", "K", "*", "K", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "[", "K", "*", "K", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "biases", "+=", "tf", ".", "constant", "(", "np", ".", "eye", "(", "K", ")", ".", "flatten", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "transform", "=", "tf", ".", "matmul", "(", "net", ",", "weights", ")", "\n", "transform", "=", "tf", ".", "nn", ".", "bias_add", "(", "transform", ",", "biases", ")", "\n", "\n", "", "transform", "=", "tf", ".", "reshape", "(", "transform", ",", "[", "batch_size", ",", "K", ",", "K", "]", ")", "\n", "return", "transform", "\n", "", ""]]}