{"home.repos.pwc.inspect_result.bmazoure_DRIML.None.main.build_and_train": [[31, 175], ["vars", "rlpyt.agents.dqn.atari.atari_catdqn_agent.AtariCatDqnAgent", "scripts.rlpyt_algo.CategoricalDQN_nce", "os.path.join", "os.makedirs", "comet_ml.Experiment", "comet_ml.Experiment.add_tag", "comet_ml.Experiment.set_name", "comet_ml.Experiment.log_parameters", "scripts.loggers.Logger", "rlpyt.runners.minibatch_rl.MinibatchRlEval", "tuple", "os.path.join", "rlpyt.utils.logging.logger.set_snapshot_gap", "vars().items", "rlpyt.utils.launching.affinity.make_affinity", "rlpyt.samplers.parallel.gpu.sampler.GpuSampler", "comet_ml.Experiment.train", "rlpyt.utils.launching.affinity.make_affinity", "rlpyt.samplers.serial.sampler.SerialSampler", "rlpyt.utils.logging.context.logger_context", "rlpyt.runners.minibatch_rl.MinibatchRlEval.train", "vars", "list", "args.env_name.split", "range"], "function", ["None"], ["def", "build_and_train", "(", "args", ",", "game", "=", "\"\"", ",", "run_ID", "=", "0", ",", "config", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    1. Parse the args object into dictionaries understood by rlpyt\n    \"\"\"", "\n", "config", "[", "'env'", "]", "[", "'id'", "]", "=", "args", ".", "env_name", "\n", "config", "[", "\"eval_env\"", "]", "[", "\"id\"", "]", "=", "args", ".", "env_name", "\n", "\n", "config", "[", "\"eval_env\"", "]", "[", "\"horizon\"", "]", "=", "args", ".", "horizon", "\n", "config", "[", "\"env\"", "]", "[", "\"horizon\"", "]", "=", "args", ".", "horizon", "\n", "\n", "if", "'procgen'", "in", "args", ".", "env_name", ":", "\n", "        ", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "args", ".", "env_name", ".", "split", "(", "'-'", ")", "[", "1", "]", "in", "k", ":", "\n", "                ", "config", "[", "'env'", "]", "[", "k", "]", "=", "v", "\n", "\n", "", "", "", "config", "[", "'model'", "]", "[", "'frame_stack'", "]", "=", "args", ".", "frame_stack", "\n", "config", "[", "'model'", "]", "[", "'nce_loss'", "]", "=", "args", ".", "nce_loss", "\n", "config", "[", "'model'", "]", "[", "'algo'", "]", "=", "args", ".", "algo", "\n", "config", "[", "'model'", "]", "[", "'env_name'", "]", "=", "args", ".", "env_name", "\n", "config", "[", "'model'", "]", "[", "'dueling'", "]", "=", "args", ".", "dueling", "==", "1", "\n", "config", "[", "'algo'", "]", "[", "'double_dqn'", "]", "=", "args", ".", "double_dqn", "==", "1", "\n", "config", "[", "'algo'", "]", "[", "'prioritized_replay'", "]", "=", "args", ".", "prioritized_replay", "==", "1", "\n", "config", "[", "'algo'", "]", "[", "'n_step_return'", "]", "=", "args", ".", "n_step_return", "\n", "config", "[", "'algo'", "]", "[", "'learning_rate'", "]", "=", "args", ".", "learning_rate", "\n", "\n", "config", "[", "'runner'", "]", "[", "'log_interval_steps'", "]", "=", "args", ".", "log_interval_steps", "\n", "config", "[", "'cmd_args'", "]", "=", "vars", "(", "args", ")", "\n", "\n", "\"\"\"\n    2. Create the CatDQN (C51) agent from custom implementation\n    \"\"\"", "\n", "\n", "agent", "=", "AtariCatDqnAgent", "(", "ModelCls", "=", "AtariCatDqnModel_nce", ",", "model_kwargs", "=", "config", "[", "\"model\"", "]", ",", "**", "config", "[", "\"agent\"", "]", ")", "\n", "algo", "=", "CategoricalDQN_nce", "(", "\n", "args", "=", "config", "[", "'cmd_args'", "]", ",", "\n", "ReplayBufferCls", "=", "None", ",", "\n", "optim_kwargs", "=", "config", "[", "\"optim\"", "]", ",", "**", "config", "[", "\"algo\"", "]", "\n", ")", "\n", "\n", "if", "args", ".", "mode", "==", "'parallel'", ":", "\n", "        ", "affinity", "=", "make_affinity", "(", "\n", "n_cpu_core", "=", "args", ".", "n_cpus", ",", "\n", "n_gpu", "=", "args", ".", "n_gpus", ",", "\n", "n_socket", "=", "1", "\n", "# hyperthread_offset=0", "\n", ")", "\n", "\n", "\"\"\"\n        Some architecture require the following block to be uncommented. Try with and without.\n        This is here to allow scheduling of non-sequential CPU IDs\n        \"\"\"", "\n", "# import psutil", "\n", "# psutil.Process().cpu_affinity([])", "\n", "# cpus = tuple(psutil.Process().cpu_affinity())", "\n", "# affinity['all_cpus'] = affinity['master_cpus'] = cpus", "\n", "# affinity['workers_cpus'] = tuple([tuple([x]) for x in cpus+cpus])", "\n", "# env_kwargs = config['env']", "\n", "\n", "sampler", "=", "GpuSampler", "(", "\n", "EnvCls", "=", "make_env", ",", "\n", "env_kwargs", "=", "config", "[", "\"env\"", "]", ",", "\n", "CollectorCls", "=", "GpuWaitResetCollector", ",", "\n", "TrajInfoCls", "=", "AtariTrajInfo", ",", "\n", "eval_env_kwargs", "=", "config", "[", "\"eval_env\"", "]", ",", "\n", "**", "config", "[", "\"sampler\"", "]", "\n", ")", "\n", "\"\"\"\n        If you don't have a GPU, use the CpuSampler\n        \"\"\"", "\n", "# sampler = CpuSampler(", "\n", "#             EnvCls=AtariEnv if args.game is not None else make_env,", "\n", "#             env_kwargs=config[\"env\"],", "\n", "#             CollectorCls=CpuWaitResetCollector,", "\n", "#             TrajInfoCls=AtariTrajInfo,", "\n", "#             eval_env_kwargs=config[\"eval_env\"],", "\n", "#             **config[\"sampler\"]", "\n", "#         )", "\n", "\n", "", "elif", "args", ".", "mode", "==", "'serial'", ":", "\n", "        ", "affinity", "=", "make_affinity", "(", "\n", "n_cpu_core", "=", "1", ",", "# Use 16 cores across all experiments.", "\n", "n_gpu", "=", "args", ".", "n_gpus", ",", "# Use 8 gpus across all experiments.", "\n", "n_socket", "=", "1", ",", "\n", ")", "\n", "\n", "\"\"\"\n        Some architecture require the following block to be uncommented. Try with and without.\n        \"\"\"", "\n", "# import psutil", "\n", "# psutil.Process().cpu_affinity([])", "\n", "# cpus = tuple(psutil.Process().cpu_affinity())", "\n", "# affinity['all_cpus'] = affinity['master_cpus'] = cpus", "\n", "# affinity['workers_cpus'] = tuple([tuple([x]) for x in cpus+cpus])", "\n", "# env_kwargs = config['env']", "\n", "\n", "sampler", "=", "SerialSampler", "(", "\n", "EnvCls", "=", "make_env", ",", "\n", "env_kwargs", "=", "config", "[", "\"env\"", "]", ",", "\n", "# CollectorCls=SerialEvalCollector,", "\n", "TrajInfoCls", "=", "AtariTrajInfo", ",", "\n", "eval_env_kwargs", "=", "config", "[", "\"eval_env\"", "]", ",", "\n", "**", "config", "[", "\"sampler\"", "]", "\n", ")", "\n", "\n", "", "\"\"\"\n    3. Bookkeeping, setting up Comet.ml experiments, etc\n    \"\"\"", "\n", "folders_name", "=", "[", "args", ".", "output_dir", ",", "args", ".", "env_name", ",", "'run_'", "+", "args", ".", "run_ID", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "*", "folders_name", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "experiment", "=", "Experiment", "(", "api_key", "=", "'your_key'", ",", "auto_output_logging", "=", "False", ",", "project_name", "=", "'driml'", ",", "workspace", "=", "\"your_workspace\"", ",", "disabled", "=", "True", ")", "\n", "experiment", ".", "add_tag", "(", "'C51+DIM'", "if", "(", "args", ".", "lambda_LL", ">", "0", "or", "args", ".", "lambda_LG", ">", "0", "or", "args", ".", "lambda_GL", ">", "0", "or", "args", ".", "lambda_GG", ">", "0", ")", "else", "'C51'", ")", "\n", "experiment", ".", "set_name", "(", "args", ".", "experiment_name", ")", "\n", "experiment", ".", "log_parameters", "(", "config", ")", "\n", "\n", "MinibatchRlEval", ".", "TF_logger", "=", "Logger", "(", "path", ",", "use_TFX", "=", "True", ",", "params", "=", "config", ",", "comet_experiment", "=", "experiment", ",", "disable_local", "=", "True", ")", "\n", "MinibatchRlEval", ".", "log_diagnostics", "=", "log_diagnostics_custom", "\n", "MinibatchRlEval", ".", "_log_infos", "=", "_log_infos", "\n", "MinibatchRlEval", ".", "evaluate_agent", "=", "evaluate_agent", "\n", "\n", "\"\"\"\n    4. Define the runner as minibatch\n    \"\"\"", "\n", "runner", "=", "MinibatchRlEval", "(", "\n", "algo", "=", "algo", ",", "\n", "agent", "=", "agent", ",", "\n", "sampler", "=", "sampler", ",", "\n", "affinity", "=", "affinity", ",", "\n", "**", "config", "[", "\"runner\"", "]", "\n", ")", "\n", "\n", "runner", ".", "algo", ".", "opt_info_fields", "=", "tuple", "(", "list", "(", "runner", ".", "algo", ".", "opt_info_fields", ")", "+", "[", "'lossNCE'", "]", "+", "[", "'action%d'", "%", "i", "for", "i", "in", "range", "(", "15", ")", "]", ")", "\n", "name", "=", "args", ".", "mode", "+", "\"_value_based_nce_\"", "+", "args", ".", "env_name", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "env_name", ")", "\n", "logger", ".", "set_snapshot_gap", "(", "args", ".", "weight_save_interval", "//", "config", "[", "'runner'", "]", "[", "'log_interval_steps'", "]", ")", "\n", "\n", "\"\"\"\n    6. Run the experiment and optionally save network weights\n    \"\"\"", "\n", "\n", "with", "experiment", ".", "train", "(", ")", ":", "\n", "        ", "with", "logger_context", "(", "log_dir", ",", "run_ID", ",", "name", ",", "config", ",", "snapshot_mode", "=", "(", "'last'", "if", "args", ".", "weight_save_interval", "==", "-", "1", "else", "'gap'", ")", ")", ":", "# set 'all' to save every it, 'gap' for every X it", "\n", "            ", "runner", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.IsingWrapper.__init__": [[24, 32], ["gym.Wrapper.__init__", "wrappers.IsingWrapper._reset_ising"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.IsingWrapper._reset_ising"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "width", ",", "height", ")", ":", "\n", "        ", "\"\"\"\n        Adds Ising noise to walls\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "_width", "=", "width", "\n", "self", ".", "_height", "=", "height", "\n", "self", ".", "_reset_ising", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.IsingWrapper._reset_ising": [[33, 38], ["simulations.Ising", "min", "wrappers.IsingWrapper.ising.reset", "wrappers.IsingWrapper.ising.simulate_n().reshape().copy", "wrappers.IsingWrapper.ising.simulate_n().reshape", "wrappers.IsingWrapper.ising.simulate_n"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.simulate_n"], ["", "def", "_reset_ising", "(", "self", ")", ":", "\n", "        ", "self", ".", "ising", "=", "Ising", "(", "beta", "=", "4.", ")", "\n", "self", ".", "ising_dim", "=", "min", "(", "self", ".", "_width", ",", "self", ".", "_height", ")", "\n", "self", ".", "config", "=", "self", ".", "ising", ".", "reset", "(", "self", ".", "ising_dim", ")", "\n", "self", ".", "ising_noise", "=", "self", ".", "ising", ".", "simulate_n", "(", "1", ")", ".", "reshape", "(", "self", ".", "ising_dim", ",", "self", ".", "ising_dim", ",", "1", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.IsingWrapper._update_ising": [[39, 41], ["wrappers.IsingWrapper.ising.simulate_n().reshape().copy", "wrappers.IsingWrapper.ising.simulate_n().reshape", "wrappers.IsingWrapper.ising.simulate_n"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.simulate_n"], ["", "def", "_update_ising", "(", "self", ")", ":", "\n", "        ", "self", ".", "ising_noise", "=", "self", ".", "ising", ".", "simulate_n", "(", "1", ")", ".", "reshape", "(", "self", ".", "ising_dim", ",", "self", ".", "ising_dim", ",", "1", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.IsingWrapper._add_noise": [[42, 48], ["numpy.where", "frame[].copy"], "methods", ["None"], ["", "def", "_add_noise", "(", "self", ",", "frame", ")", ":", "\n", "        ", "mask", "=", "np", ".", "where", "(", "frame", "[", ":", "self", ".", "ising_dim", ",", ":", "self", ".", "ising_dim", ",", ":", "]", "==", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "subframe", "=", "frame", "[", ":", "self", ".", "ising_dim", ",", ":", "self", ".", "ising_dim", ",", ":", "]", ".", "copy", "(", ")", "\n", "subframe", "[", "mask", "[", "0", "]", ",", "mask", "[", "1", "]", "]", "=", "[", "255", ",", "0", ",", "255", "]", "*", "(", "1", "+", "self", ".", "ising_noise", "[", "mask", "[", "0", "]", ",", "mask", "[", "1", "]", "]", ")", "/", "2", "\n", "frame", "[", ":", "self", ".", "ising_dim", ",", ":", "self", ".", "ising_dim", ",", ":", "]", "=", "subframe", "\n", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.IsingWrapper.reset": [[49, 54], ["wrappers.IsingWrapper._reset_ising", "wrappers.IsingWrapper.env.reset", "wrappers.IsingWrapper._add_noise"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.IsingWrapper._reset_ising", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.IsingWrapper._add_noise"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_reset_ising", "(", ")", "\n", "state", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "state", "=", "self", ".", "_add_noise", "(", "state", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.IsingWrapper.step": [[55, 63], ["wrappers.IsingWrapper._update_ising", "wrappers.IsingWrapper.env.step", "wrappers.IsingWrapper._add_noise", "plt.imshow", "plt.show"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.IsingWrapper._update_ising", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.IsingWrapper._add_noise"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "_update_ising", "(", ")", "\n", "next_state", ",", "reward", ",", "is_done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "next_state", "=", "self", ".", "_add_noise", "(", "next_state", ")", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "plt", ".", "imshow", "(", "next_state", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "next_state", ",", "reward", ",", "is_done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.WarpFramePocMan.__init__": [[65, 95], ["gym.ObservationWrapper.__init__", "gym.spaces.Box", "len"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "width", "=", "84", ",", "height", "=", "84", ",", "grayscale", "=", "True", ",", "dict_space_key", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Warp frames to 84x84 as done in the Nature paper and later work.\n        If the environment uses dictionary observations, `dict_space_key` can be specified which indicates which\n        observation should be warped.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "_width", "=", "width", "\n", "self", ".", "_height", "=", "height", "\n", "self", ".", "_grayscale", "=", "grayscale", "\n", "self", ".", "_key", "=", "dict_space_key", "\n", "\n", "if", "self", ".", "_grayscale", ":", "\n", "            ", "num_colors", "=", "1", "\n", "", "else", ":", "\n", "            ", "num_colors", "=", "3", "\n", "\n", "", "new_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "_height", ",", "self", ".", "_width", ",", "num_colors", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", ",", "\n", ")", "\n", "if", "self", ".", "_key", "is", "None", ":", "\n", "            ", "original_space", "=", "self", ".", "observation_space", "\n", "self", ".", "observation_space", "=", "new_space", "\n", "", "else", ":", "\n", "            ", "original_space", "=", "self", ".", "observation_space", ".", "spaces", "[", "self", ".", "_key", "]", "\n", "self", ".", "observation_space", ".", "spaces", "[", "self", ".", "_key", "]", "=", "new_space", "\n", "", "assert", "original_space", ".", "dtype", "==", "np", ".", "uint8", "and", "len", "(", "original_space", ".", "shape", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.WarpFramePocMan.observation": [[96, 120], ["obs.copy.copy.astype", "cv2.resize", "cv2.cvtColor", "numpy.expand_dims", "obs.copy.copy.copy"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "obs", "=", "obs", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "if", "self", ".", "_key", "is", "None", ":", "\n", "            ", "frame", "=", "obs", "\n", "", "else", ":", "\n", "            ", "frame", "=", "obs", "[", "self", ".", "_key", "]", "\n", "\n", "", "if", "self", ".", "_grayscale", ":", "\n", "            ", "frame", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "", "frame", "=", "cv2", ".", "resize", "(", "\n", "frame", ",", "(", "self", ".", "_width", ",", "self", ".", "_height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", "\n", ")", "\n", "if", "self", ".", "_grayscale", ":", "\n", "            ", "frame", "=", "np", ".", "expand_dims", "(", "frame", ",", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "_key", "is", "None", ":", "\n", "            ", "obs", "=", "frame", "\n", "", "else", ":", "\n", "            ", "obs", "=", "obs", ".", "copy", "(", ")", "\n", "obs", "[", "self", ".", "_key", "]", "=", "frame", "\n", "# obs = obs.transpose(2,0,1)", "\n", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.HistoryWrapper.__init__": [[122, 137], ["gym.Wrapper.__init__", "gym.spaces.Box", "wrappers.HistoryWrapper._reset_history"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.HistoryWrapper._reset_history"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Save last X frames\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "X", "=", "X", "\n", "self", ".", "num_colors", "=", "self", ".", "env", ".", "observation_space", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "env", ".", "_height", ",", "self", ".", "env", ".", "_width", ",", "self", ".", "X", "*", "self", ".", "num_colors", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", ",", "\n", ")", "\n", "\n", "self", ".", "_reset_history", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.HistoryWrapper._reset_history": [[138, 140], ["numpy.zeros"], "methods", ["None"], ["", "def", "_reset_history", "(", "self", ")", ":", "\n", "        ", "self", ".", "history", "=", "np", ".", "zeros", "(", "shape", "=", "(", "self", ".", "X", "*", "self", ".", "num_colors", ",", "self", ".", "env", ".", "_height", ",", "self", ".", "env", ".", "_width", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.HistoryWrapper._add_state": [[141, 144], ["new_state.transpose().copy", "new_state.transpose"], "methods", ["None"], ["", "def", "_add_state", "(", "self", ",", "new_state", ")", ":", "\n", "        ", "self", ".", "history", "[", ":", "-", "self", ".", "num_colors", "]", "=", "self", ".", "history", "[", "self", ".", "num_colors", ":", "]", "\n", "self", ".", "history", "[", "-", "self", ".", "num_colors", ":", "]", "=", "new_state", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.HistoryWrapper.reset": [[145, 150], ["wrappers.HistoryWrapper._reset_history", "wrappers.HistoryWrapper.env.reset", "wrappers.HistoryWrapper.transpose", "wrappers.HistoryWrapper.history.transpose"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.HistoryWrapper._reset_history", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_reset_history", "(", ")", "\n", "state", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "history", "[", "-", "self", ".", "num_colors", ":", "]", "=", "state", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "self", ".", "history", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.HistoryWrapper.step": [[151, 155], ["wrappers.HistoryWrapper.env.step", "wrappers.HistoryWrapper._add_state", "wrappers.HistoryWrapper.history.transpose"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.HistoryWrapper._add_state"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "next_state", ",", "reward", ",", "is_done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "_add_state", "(", "next_state", ")", "\n", "return", "self", ".", "history", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "reward", ",", "is_done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.DistributionShiftWrapper.__init__": [[157, 178], ["itertools.product", "wrappers.DistributionShiftWrapper.envs.append", "list", "env_maker", "map", "kwargs.values", "list", "range", "kwargs.keys", "len", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env_maker", ",", "episodes_per_env", ",", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Takes 2 parameters:\n        nb_envs\n        episodes_per_env\n        \"\"\"", "\n", "self", ".", "envs", "=", "[", "]", "\n", "self", ".", "episodes_per_env", "=", "episodes_per_env", "\n", "\n", "combs", "=", "product", "(", "*", "list", "(", "map", "(", "lambda", "x", ":", "[", "x", "]", "if", "type", "(", "x", ")", "is", "not", "list", "else", "x", ",", "kwargs", ".", "values", "(", ")", ")", ")", ")", "\n", "\n", "for", "comb", "in", "combs", ":", "\n", "            ", "self", ".", "envs", ".", "append", "(", "env_maker", "(", "{", "list", "(", "kwargs", ".", "keys", "(", ")", ")", "[", "i", "]", ":", "comb", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "comb", ")", ")", "}", ")", ")", "\n", "\n", "", "self", ".", "current_env_idx", "=", "0", "\n", "self", ".", "current_env_eps", "=", "self", ".", "episodes_per_env", "\n", "\n", "self", ".", "env", "=", "self", ".", "envs", "[", "-", "1", "]", "\n", "self", ".", "observation_space", "=", "self", ".", "env", ".", "observation_space", "\n", "self", ".", "action_space", "=", "self", ".", "env", ".", "action_space", "\n", "self", ".", "just_reset", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.DistributionShiftWrapper.reset": [[179, 187], ["wrappers.DistributionShiftWrapper.envs[].reset", "print", "len", "len"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "current_env_eps", "<=", "0", ":", "\n", "            ", "self", ".", "current_env_eps", "=", "self", ".", "episodes_per_env", "\n", "print", "(", "\"Switched envs %d->%d\"", "%", "(", "self", ".", "current_env_idx", ",", "(", "self", ".", "current_env_idx", "+", "1", ")", "%", "len", "(", "self", ".", "envs", ")", ")", ")", "\n", "self", ".", "current_env_idx", "=", "(", "self", ".", "current_env_idx", "+", "1", ")", "%", "len", "(", "self", ".", "envs", ")", "\n", "self", ".", "just_reset", "=", "True", "\n", "", "self", ".", "current_env_eps", "-=", "1", "\n", "return", "self", ".", "envs", "[", "self", ".", "current_env_idx", "]", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.DistributionShiftWrapper.step": [[188, 195], ["wrappers.DistributionShiftWrapper.envs[].step"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "next_state", ",", "reward", ",", "is_done", ",", "info", "=", "self", ".", "envs", "[", "self", ".", "current_env_idx", "]", ".", "step", "(", "action", ")", "\n", "if", "self", ".", "just_reset", ":", "\n", "            ", "info", "=", "{", "'env_changed'", ":", "True", "}", "\n", "", "else", ":", "\n", "            ", "info", "=", "{", "'env_changed'", ":", "False", "}", "\n", "", "return", "next_state", ",", "reward", ",", "is_done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.MonitorEnv.__init__": [[197, 207], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ")", ":", "\n", "        ", "\"\"\"Record episodes stats prior to EpisodicLifeEnv, etc.\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "_current_reward", "=", "None", "\n", "self", ".", "_num_steps", "=", "None", "\n", "self", ".", "_total_steps", "=", "None", "\n", "self", ".", "_episode_rewards", "=", "[", "]", "\n", "self", ".", "_episode_lengths", "=", "[", "]", "\n", "self", ".", "_num_episodes", "=", "0", "\n", "self", ".", "_num_returned", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.MonitorEnv.reset": [[208, 223], ["wrappers.MonitorEnv.env.reset", "sum", "wrappers.MonitorEnv._episode_rewards.append", "wrappers.MonitorEnv._episode_lengths.append"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "_total_steps", "is", "None", ":", "\n", "            ", "self", ".", "_total_steps", "=", "sum", "(", "self", ".", "_episode_lengths", ")", "\n", "\n", "", "if", "self", ".", "_current_reward", "is", "not", "None", ":", "\n", "            ", "self", ".", "_episode_rewards", ".", "append", "(", "self", ".", "_current_reward", ")", "\n", "self", ".", "_episode_lengths", ".", "append", "(", "self", ".", "_num_steps", ")", "\n", "self", ".", "_num_episodes", "+=", "1", "\n", "\n", "", "self", ".", "_current_reward", "=", "0", "\n", "self", ".", "_num_steps", "=", "0", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.MonitorEnv.step": [[224, 230], ["wrappers.MonitorEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "_current_reward", "+=", "rew", "\n", "self", ".", "_num_steps", "+=", "1", "\n", "self", ".", "_total_steps", "+=", "1", "\n", "return", "(", "obs", ",", "rew", ",", "done", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.MonitorEnv.get_episode_rewards": [[231, 233], ["None"], "methods", ["None"], ["", "def", "get_episode_rewards", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_episode_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.MonitorEnv.get_episode_lengths": [[234, 236], ["None"], "methods", ["None"], ["", "def", "get_episode_lengths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_episode_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.MonitorEnv.get_total_steps": [[237, 239], ["None"], "methods", ["None"], ["", "def", "get_total_steps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_total_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.MonitorEnv.next_episode_results": [[240, 244], ["range", "len", "len"], "methods", ["None"], ["", "def", "next_episode_results", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "_num_returned", ",", "len", "(", "self", ".", "_episode_rewards", ")", ")", ":", "\n", "            ", "yield", "(", "self", ".", "_episode_rewards", "[", "i", "]", ",", "self", ".", "_episode_lengths", "[", "i", "]", ")", "\n", "", "self", ".", "_num_returned", "=", "len", "(", "self", ".", "_episode_rewards", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.LazyFrames.__init__": [[246, 254], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "frames", ")", ":", "\n", "        ", "\"\"\"This object ensures that common frames between the observations are only stored once.\n        It exists purely to optimize memory usage which can be huge for DQN's 1M frames replay\n        buffers.\n        This object should only be converted to numpy array before being passed to the model.\n        You'd not believe how complex the previous solution was.\"\"\"", "\n", "self", ".", "_frames", "=", "frames", "\n", "self", ".", "_out", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.LazyFrames._force": [[255, 260], ["numpy.concatenate"], "methods", ["None"], ["", "def", "_force", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_out", "is", "None", ":", "\n", "            ", "self", ".", "_out", "=", "np", ".", "concatenate", "(", "self", ".", "_frames", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "_frames", "=", "None", "\n", "", "return", "self", ".", "_out", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.LazyFrames.__array__": [[261, 266], ["wrappers.LazyFrames._force", "out.astype.astype.astype"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.LazyFrames._force"], ["", "def", "__array__", "(", "self", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "_force", "(", ")", "\n", "if", "dtype", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", ".", "astype", "(", "dtype", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.LazyFrames.__len__": [[267, 269], ["len", "wrappers.LazyFrames._force"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.LazyFrames._force"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_force", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.LazyFrames.__getitem__": [[270, 272], ["wrappers.LazyFrames._force"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.LazyFrames._force"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "_force", "(", ")", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.LazyFrames.count": [[273, 276], ["wrappers.LazyFrames._force"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.LazyFrames._force"], ["", "def", "count", "(", "self", ")", ":", "\n", "        ", "frames", "=", "self", ".", "_force", "(", ")", "\n", "return", "frames", ".", "shape", "[", "frames", ".", "ndim", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.LazyFrames.frame": [[277, 279], ["wrappers.LazyFrames._force"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.LazyFrames._force"], ["", "def", "frame", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "_force", "(", ")", "[", "...", ",", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.NoopResetEnv.__init__": [[281, 290], ["gym.Wrapper.__init__", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "noop_max", "=", "30", ")", ":", "\n", "        ", "\"\"\"Sample initial states by taking random number of no-ops on reset.\n        No-op is assumed to be action 0.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "noop_max", "=", "noop_max", "\n", "self", ".", "override_num_noops", "=", "None", "\n", "self", ".", "noop_action", "=", "0", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "0", "]", "==", "\"NOOP\"", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.NoopResetEnv.reset": [[291, 305], ["wrappers.NoopResetEnv.env.reset", "range", "wrappers.NoopResetEnv.unwrapped.np_random.randint", "wrappers.NoopResetEnv.env.step", "wrappers.NoopResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Do no-op action for a number of steps in [1, noop_max].\"\"\"", "\n", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "if", "self", ".", "override_num_noops", "is", "not", "None", ":", "\n", "            ", "noops", "=", "self", ".", "override_num_noops", "\n", "", "else", ":", "\n", "            ", "noops", "=", "self", ".", "unwrapped", ".", "np_random", ".", "randint", "(", "1", ",", "self", ".", "noop_max", "+", "1", ")", "\n", "", "assert", "noops", ">", "0", "\n", "obs", "=", "None", "\n", "for", "_", "in", "range", "(", "noops", ")", ":", "\n", "            ", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "self", ".", "noop_action", ")", "\n", "if", "done", ":", "\n", "                ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.NoopResetEnv.step": [[306, 308], ["wrappers.NoopResetEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step"], ["", "def", "step", "(", "self", ",", "ac", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "ac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.ClipRewardEnv.__init__": [[311, 313], ["gym.RewardWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "gym", ".", "RewardWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.ClipRewardEnv.reward": [[314, 317], ["numpy.sign"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "\"\"\"Bin reward to {+1, 0, -1} by its sign.\"\"\"", "\n", "return", "np", ".", "sign", "(", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.FireResetEnv.__init__": [[320, 326], ["gym.Wrapper.__init__", "len", "env.unwrapped.get_action_meanings", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Take action on reset.\n        For environments that are fixed until firing.\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "1", "]", "==", "\"FIRE\"", "\n", "assert", "len", "(", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ")", ">=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.FireResetEnv.reset": [[327, 336], ["wrappers.FireResetEnv.env.reset", "wrappers.FireResetEnv.env.step", "wrappers.FireResetEnv.env.step", "wrappers.FireResetEnv.env.reset", "wrappers.FireResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "1", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "2", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.FireResetEnv.step": [[337, 339], ["wrappers.FireResetEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step"], ["", "def", "step", "(", "self", ",", "ac", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "ac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.EpisodicLifeEnv.__init__": [[342, 349], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Make end-of-life == end-of-episode, but only reset on true game over.\n        Done by DeepMind for the DQN and co. since it helps value estimation.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "lives", "=", "0", "\n", "self", ".", "was_real_done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.EpisodicLifeEnv.step": [[350, 363], ["wrappers.EpisodicLifeEnv.env.step", "wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "was_real_done", "=", "done", "\n", "# check current lives, make loss of life terminal,", "\n", "# then update lives to handle bonus lives", "\n", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "if", "lives", "<", "self", ".", "lives", "and", "lives", ">", "0", ":", "\n", "# for Qbert sometimes we stay in lives == 0 condtion for a few fr", "\n", "# so its important to keep lives > 0, so that we only reset once", "\n", "# the environment advertises done.", "\n", "            ", "done", "=", "True", "\n", "", "self", ".", "lives", "=", "lives", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.EpisodicLifeEnv.reset": [[364, 376], ["wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives", "wrappers.EpisodicLifeEnv.env.reset", "wrappers.EpisodicLifeEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Reset only when lives are exhausted.\n        This way all states are still reachable even though lives are episodic,\n        and the learner need not know about any of this behind-the-scenes.\n        \"\"\"", "\n", "if", "self", ".", "was_real_done", ":", "\n", "            ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "# no-op step to advance from terminal/lost life state", "\n", "            ", "obs", ",", "_", ",", "_", ",", "_", "=", "self", ".", "env", ".", "step", "(", "0", ")", "\n", "", "self", ".", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.MaxAndSkipEnv.__init__": [[379, 386], ["gym.Wrapper.__init__", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "skip", "=", "4", ")", ":", "\n", "        ", "\"\"\"Return only every `skip`-th frame\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "# most recent raw observations (for max pooling across time steps)", "\n", "self", ".", "_obs_buffer", "=", "np", ".", "zeros", "(", "\n", "(", "2", ",", ")", "+", "env", ".", "observation_space", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "_skip", "=", "skip", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.MaxAndSkipEnv.step": [[387, 405], ["range", "wrappers.MaxAndSkipEnv._obs_buffer.max", "wrappers.MaxAndSkipEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Repeat action, sum reward, and max over last observations.\"\"\"", "\n", "total_reward", "=", "0.0", "\n", "done", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "_skip", ")", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "i", "==", "self", ".", "_skip", "-", "2", ":", "\n", "                ", "self", ".", "_obs_buffer", "[", "0", "]", "=", "obs", "\n", "", "if", "i", "==", "self", ".", "_skip", "-", "1", ":", "\n", "                ", "self", ".", "_obs_buffer", "[", "1", "]", "=", "obs", "\n", "", "total_reward", "+=", "reward", "\n", "if", "done", ":", "\n", "                ", "break", "\n", "# Note that the observation on the done=True frame", "\n", "# doesn't matter", "\n", "", "", "max_frame", "=", "self", ".", "_obs_buffer", ".", "max", "(", "axis", "=", "0", ")", "\n", "\n", "return", "max_frame", ",", "total_reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.MaxAndSkipEnv.reset": [[406, 408], ["wrappers.MaxAndSkipEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.WarpFrame.__init__": [[411, 421], ["gym.ObservationWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "dim", ")", ":", "\n", "        ", "\"\"\"Warp frames to the specified size (dim x dim).\"\"\"", "\n", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "width", "=", "dim", "\n", "self", ".", "height", "=", "dim", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "height", ",", "self", ".", "width", ",", "1", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.WarpFrame.observation": [[422, 427], ["cv2.cvtColor", "cv2.resize"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "frame", ")", ":", "\n", "        ", "frame", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "frame", "=", "cv2", ".", "resize", "(", "\n", "frame", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "return", "frame", "[", ":", ",", ":", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.FrameStack.__init__": [[430, 441], ["gym.Wrapper.__init__", "collections.deque", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "k", ")", ":", "\n", "        ", "\"\"\"Stack k last frames.\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "frames", "=", "deque", "(", "[", "]", ",", "maxlen", "=", "k", ")", "\n", "shp", "=", "env", ".", "observation_space", ".", "shape", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "shp", "[", "0", "]", ",", "shp", "[", "1", "]", ",", "shp", "[", "2", "]", "*", "k", ")", ",", "\n", "dtype", "=", "env", ".", "observation_space", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.FrameStack.reset": [[442, 447], ["wrappers.FrameStack.env.reset", "range", "wrappers.FrameStack._get_ob", "wrappers.FrameStack.frames.append"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.FrameStack._get_ob"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "ob", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "            ", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "", "return", "self", ".", "_get_ob", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.FrameStack.step": [[448, 452], ["wrappers.FrameStack.env.step", "wrappers.FrameStack.frames.append", "wrappers.FrameStack._get_ob"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.FrameStack._get_ob"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "ob", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "return", "self", ".", "_get_ob", "(", ")", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.FrameStack._get_ob": [[453, 456], ["numpy.concatenate", "len"], "methods", ["None"], ["", "def", "_get_ob", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "frames", ")", "==", "self", ".", "k", "\n", "return", "np", ".", "concatenate", "(", "self", ".", "frames", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.ScaledFloatFrame.__init__": [[459, 463], ["gym.ObservationWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "env", ".", "observation_space", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.ScaledFloatFrame.observation": [[464, 468], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "# careful! This undoes the memory optimization, use", "\n", "# with smaller replay buffers only.", "\n", "        ", "return", "np", ".", "array", "(", "observation", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.GridworldPreprocess.__init__": [[474, 478], ["gym.ObservationWrapper.__init__", "env.seed"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.seed"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "seed", ")", ":", "\n", "        ", "\"\"\"Custom preprocess function for gridworld observations.\"\"\"", "\n", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.GridworldPreprocess.observation": [[480, 490], ["frame.astype.astype.astype", "numpy.random.randint"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "frame", ")", ":", "\n", "# frame = frame['image'] # gives a (N,M,3) input to the network, else is a dict", "\n", "        ", "frame", "=", "frame", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "size", "=", "3", "\n", "frame", "[", "-", "size", ":", ",", "-", "size", ":", ",", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "size", "=", "(", "size", ",", "size", ")", ")", "\n", "frame", "[", "-", "size", ":", ",", "-", "size", ":", ",", "1", ":", "]", "=", "50", "\n", "# import matplotlib.pyplot as plt", "\n", "# plt.imshow(frame)", "\n", "# plt.show()", "\n", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.GridworldPostprocess.__init__": [[492, 496], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Custom postprocess function for gridworlds.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.GridworldPostprocess.step": [[497, 501], ["wrappers.GridworldPostprocess.env.step", "float"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "reward", "=", "float", "(", "reward", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.GridworldPostprocess.reset": [[502, 504], ["wrappers.GridworldPostprocess.env.reset"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.WarpFrame3D.__init__": [[506, 516], ["gym.ObservationWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "dim", ")", ":", "\n", "        ", "\"\"\"Warp frames to the specified size (dim x dim x 3).\"\"\"", "\n", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "width", "=", "dim", "\n", "self", ".", "height", "=", "dim", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "height", ",", "self", ".", "width", ",", "3", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.WarpFrame3D.observation": [[517, 520], ["cv2.resize"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "frame", ")", ":", "\n", "        ", "frame", "=", "cv2", ".", "resize", "(", "frame", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.AARIproxy.__init__": [[583, 590], ["gym.make", "AARIWrapper"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env_name", ")", ":", "\n", "        ", "self", ".", "env_name", "=", "env_name", "\n", "self", ".", "env", "=", "gym", ".", "make", "(", "env_name", ")", "\n", "self", ".", "aari_env", "=", "AARIWrapper", "(", "self", ".", "env", ")", "\n", "self", ".", "action_space", "=", "self", ".", "aari_env", ".", "action_space", "\n", "self", ".", "observation_space", "=", "self", ".", "aari_env", ".", "observation_space", "\n", "self", ".", "unwrapped", ".", "ale", "=", "self", ".", "aari_env", ".", "unwrapped", ".", "ale", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.AARIproxy.seed": [[591, 593], ["wrappers.AARIproxy.aari_env.seed"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.seed"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "aari_env", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.AARIproxy.step": [[594, 596], ["wrappers.AARIproxy.aari_env.step"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step"], ["", "def", "step", "(", "self", ",", "u", ")", ":", "\n", "        ", "return", "self", ".", "aari_env", ".", "step", "(", "u", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.AARIproxy.reset": [[597, 599], ["wrappers.AARIproxy.aari_env.reset"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "aari_env", ".", "reset", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.wrap_deepmind_minigrid": [[521, 538], ["gym_minigrid.wrappers.RGBImgObsWrapper", "wrappers.GridworldPreprocess", "wrappers.MonitorEnv", "wrappers.WarpFrame3D", "wrappers.GridworldPostprocess"], "function", ["None"], ["", "", "def", "wrap_deepmind_minigrid", "(", "env", ",", "dim", "=", "84", ",", "framestack", "=", "True", ",", "seed", "=", "0", ")", ":", "\n", "    ", "\"\"\"Configure environment for DeepMind-style gridworlds.\n\n    Note that we assume reward clipping is done outside the wrapper.\n\n    Args:\n        dim (int): Dimension to resize observations to (dim x dim).\n        framestack (bool): Whether to framestack observations.\n    \"\"\"", "\n", "env", "=", "RGBImgObsWrapper", "(", "env", ")", "\n", "env", "=", "GridworldPreprocess", "(", "env", ",", "seed", ",", ")", "\n", "env", "=", "MonitorEnv", "(", "env", ")", "\n", "env", "=", "WarpFrame3D", "(", "env", ",", "dim", ")", "\n", "# if framestack:", "\n", "#     env = FrameStack(env, 4)", "\n", "env", "=", "GridworldPostprocess", "(", "env", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.wrap_deepmind_pixelworld": [[539, 555], ["wrappers.GridworldPreprocess", "wrappers.MonitorEnv", "wrappers.WarpFrame3D", "wrappers.GridworldPostprocess"], "function", ["None"], ["", "def", "wrap_deepmind_pixelworld", "(", "env", ",", "dim", "=", "84", ",", "framestack", "=", "True", ",", "seed", "=", "0", ")", ":", "\n", "    ", "\"\"\"Configure environment for DeepMind-style gridworlds.\n\n    Note that we assume reward clipping is done outside the wrapper.\n\n    Args:\n        dim (int): Dimension to resize observations to (dim x dim).\n        framestack (bool): Whether to framestack observations.\n    \"\"\"", "\n", "env", "=", "GridworldPreprocess", "(", "env", ",", "seed", ")", "\n", "env", "=", "MonitorEnv", "(", "env", ")", "\n", "env", "=", "WarpFrame3D", "(", "env", ",", "dim", ")", "\n", "# if framestack:", "\n", "#     env = FrameStack(env, 4)", "\n", "env", "=", "GridworldPostprocess", "(", "env", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.wrappers.wrap_deepmind": [[556, 580], ["FrameStack.seed", "wrappers.MonitorEnv", "wrappers.NoopResetEnv", "wrappers.EpisodicLifeEnv", "wrappers.WarpFrame", "wrappers.MaxAndSkipEnv", "FrameStack.unwrapped.get_action_meanings", "wrappers.FireResetEnv", "wrappers.ClipRewardEnv", "wrappers.FrameStack"], "function", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.seed"], ["", "def", "wrap_deepmind", "(", "env", ",", "dim", "=", "84", ",", "framestack", "=", "True", ",", "seed", "=", "0", ",", "clip_reward", "=", "False", ")", ":", "\n", "    ", "\"\"\"Configure environment for DeepMind-style Atari.\n\n    Note that we assume reward clipping is done outside the wrapper.\n\n    Args:\n        dim (int): Dimension to resize observations to (dim x dim).\n        framestack (bool): Whether to framestack observations.\n    \"\"\"", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "env", "=", "MonitorEnv", "(", "env", ")", "\n", "env", "=", "NoopResetEnv", "(", "env", ",", "noop_max", "=", "30", ")", "\n", "if", "\"NoFrameskip\"", "in", "env", ".", "spec", ".", "id", ":", "\n", "        ", "env", "=", "MaxAndSkipEnv", "(", "env", ",", "skip", "=", "4", ")", "\n", "", "env", "=", "EpisodicLifeEnv", "(", "env", ")", "\n", "if", "\"FIRE\"", "in", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ":", "\n", "        ", "env", "=", "FireResetEnv", "(", "env", ")", "\n", "", "env", "=", "WarpFrame", "(", "env", ",", "dim", ")", "\n", "# env = ScaledFloatFrame(env)  # TODO: use for dqn?", "\n", "if", "clip_reward", ":", "\n", "        ", "env", "=", "ClipRewardEnv", "(", "env", ")", "# reward clipping is handled by policy eval", "\n", "", "if", "framestack", ":", "\n", "        ", "env", "=", "FrameStack", "(", "env", ",", "4", ")", "\n", "", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.Action_net.__init__": [[13, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_actions", ")", ":", "\n", "        ", "\"\"\"\n        The very simple action encoder\n        \"\"\"", "\n", "super", "(", "Action_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "n_actions", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.Action_net.forward": [[25, 27], ["models.Action_net.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.DistributionalHeadModel.__init__": [[29, 42], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "layer_sizes", ",", "output_size", ",", "n_atoms", ",", "fc_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Distributional C51 head copied from rlpyt\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "fc_1", "is", "None", ":", "\n", "            ", "self", ".", "fc_1", "=", "nn", ".", "Linear", "(", "input_size", ",", "layer_sizes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc_1", "=", "fc_1", "\n", "", "self", ".", "fc_2", "=", "nn", ".", "Linear", "(", "layer_sizes", ",", "output_size", "*", "n_atoms", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "*", "[", "self", ".", "fc_1", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "fc_2", "]", ")", "\n", "self", ".", "_output_size", "=", "output_size", "\n", "self", ".", "_n_atoms", "=", "n_atoms", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.DistributionalHeadModel.forward": [[43, 45], ["models.DistributionalHeadModel.mlp().view", "models.DistributionalHeadModel.mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "mlp", "(", "input", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_output_size", ",", "self", ".", "_n_atoms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.DistributionalDuelingHeadModel.__init__": [[48, 74], ["torch.Module.__init__", "isinstance", "rlpyt.models.mlp.MlpModel", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "rlpyt.models.mlp.MlpModel", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_size", ",", "\n", "hidden_sizes", ",", "\n", "output_size", ",", "\n", "n_atoms", ",", "\n", "grad_scale", "=", "2", "**", "(", "-", "1", "/", "2", ")", ",", "\n", "fc_1_V", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Dueling distributional C51 head copied from rlpyt\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "hidden_sizes", ",", "int", ")", ":", "\n", "            ", "hidden_sizes", "=", "[", "hidden_sizes", "]", "\n", "", "self", ".", "advantage_hidden", "=", "MlpModel", "(", "input_size", ",", "hidden_sizes", ")", "\n", "self", ".", "advantage_out", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_sizes", "[", "-", "1", "]", ",", "\n", "output_size", "*", "n_atoms", ",", "bias", "=", "False", ")", "\n", "self", ".", "advantage_bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "n_atoms", ")", ")", "\n", "if", "fc_1_V", "is", "None", ":", "\n", "            ", "self", ".", "value", "=", "MlpModel", "(", "input_size", ",", "hidden_sizes", ",", "output_size", "=", "n_atoms", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "value", "=", "nn", ".", "Sequential", "(", "*", "[", "fc_1_V", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "hidden_sizes", "[", "0", "]", ",", "n_atoms", ")", "]", ")", "\n", "", "self", ".", "_grad_scale", "=", "grad_scale", "\n", "self", ".", "_output_size", "=", "output_size", "\n", "self", ".", "_n_atoms", "=", "n_atoms", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.DistributionalDuelingHeadModel.forward": [[75, 80], ["scale_grad", "models.DistributionalDuelingHeadModel.advantage", "models.DistributionalDuelingHeadModel.value().view", "models.DistributionalDuelingHeadModel.value", "models.DistributionalDuelingHeadModel.mean"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.DistributionalDuelingHeadModel.advantage"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "scale_grad", "(", "input", ",", "self", ".", "_grad_scale", ")", "\n", "advantage", "=", "self", ".", "advantage", "(", "x", ")", "\n", "value", "=", "self", ".", "value", "(", "x", ")", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "_n_atoms", ")", "\n", "return", "value", "+", "(", "advantage", "-", "advantage", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.DistributionalDuelingHeadModel.advantage": [[81, 86], ["models.DistributionalDuelingHeadModel.advantage_hidden", "models.DistributionalDuelingHeadModel.advantage_out", "x.view.view.view"], "methods", ["None"], ["", "def", "advantage", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "advantage_hidden", "(", "input", ")", "\n", "x", "=", "self", ".", "advantage_out", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "_output_size", ",", "self", ".", "_n_atoms", ")", "\n", "return", "x", "+", "self", ".", "advantage_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.Encoder.__init__": [[93, 95], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.Encoder.forward": [[96, 99], ["models.Encoder.global_encoder", "models.Encoder.local_encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_batch", ")", ":", "\n", "        ", "features", "=", "self", ".", "global_encoder", "(", "self", ".", "local_encoder", "(", "input_batch", ")", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.infoNCE_Mnih_84x84_action.__init__": [[101, 141], ["models.Encoder.__init__", "init_fn", "init_fn", "init_fn", "models.Flatten", "init_fn", "models.ResBlock_conv", "models.ResBlock_conv", "models.ResBlock_conv", "models.ResBlock_conv", "models.ResBlock_fc", "models.ResBlock_fc", "models.ResBlock_fc", "models.ResBlock_fc", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.OneHot_fc", "utils.init", "utils.compute_network_output_size", "utils.compute_network_output_size", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.init", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.compute_network_output_size", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.compute_network_output_size"], ["    ", "def", "__init__", "(", "self", ",", "obs_space", ",", "num_outputs", ",", "options", ")", ":", "\n", "        ", "\"\"\"\n        Model with action encoder\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "(", "w", ",", "h", ",", "in_channels", ")", "=", "obs_space", ".", "shape", "\n", "\n", "action_dim", "=", "64", "\n", "rkhs_dim", "=", "512", "\n", "init_fn", "=", "lambda", "m", ":", "init", "(", "m", ",", "\n", "lambda", "x", ":", "nn", ".", "init", ".", "orthogonal_", "(", "x", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", ",", "\n", "#lambda x:torch.nn.init.kaiming_uniform_(x,a=0,mode='fan_in',nonlinearity='relu'),", "\n", "lambda", "x", ":", "nn", ".", "init", ".", "constant_", "(", "x", ",", "0", ")", ")", "\n", "\n", "self", ".", "out_channels", "=", "compute_network_output_size", "(", "h", ",", "w", ",", "[", "8", ",", "4", ",", "3", "]", ",", "[", "8", ",", "4", ",", "3", "]", ",", "[", "4", ",", "2", ",", "1", "]", ",", "[", "4", ",", "2", ",", "1", "]", ")", "*", "64", "\n", "self", ".", "fc_channels", "=", "compute_network_output_size", "(", "h", ",", "w", ",", "[", "8", ",", "4", ",", "3", "]", ",", "[", "8", ",", "4", ",", "3", "]", ",", "[", "4", ",", "2", ",", "1", "]", ",", "[", "4", ",", "2", ",", "1", "]", ")", "*", "64", "\n", "\n", "self", ".", "conv1", "=", "init_fn", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "32", ",", "[", "8", ",", "8", "]", ",", "4", ")", ")", "\n", "self", ".", "conv2", "=", "init_fn", "(", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "[", "4", ",", "4", "]", ",", "2", ")", ")", "\n", "self", ".", "conv3", "=", "init_fn", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "[", "3", ",", "3", "]", ",", "1", ")", ")", "\n", "self", ".", "flatten", "=", "Flatten", "(", ")", "\n", "self", ".", "fc_1", "=", "init_fn", "(", "nn", ".", "Linear", "(", "self", ".", "fc_channels", ",", "512", ")", ")", "\n", "\n", "self", ".", "psi_local_LL_t", "=", "ResBlock_conv", "(", "64", "+", "action_dim", ",", "rkhs_dim", ",", "rkhs_dim", ",", "init_fn", ")", "\n", "self", ".", "psi_local_LL_t_p_1", "=", "ResBlock_conv", "(", "64", ",", "rkhs_dim", ",", "rkhs_dim", ",", "init_fn", ")", "\n", "self", ".", "psi_local_LG", "=", "ResBlock_conv", "(", "64", "+", "action_dim", ",", "rkhs_dim", ",", "rkhs_dim", ",", "init_fn", ")", "\n", "self", ".", "psi_local_GL", "=", "ResBlock_conv", "(", "64", ",", "rkhs_dim", ",", "rkhs_dim", ",", "init_fn", ")", "\n", "\n", "self", ".", "psi_global_LG", "=", "ResBlock_fc", "(", "512", ",", "rkhs_dim", ",", "rkhs_dim", ",", "init_fn", ")", "\n", "self", ".", "psi_global_GL", "=", "ResBlock_fc", "(", "512", "+", "action_dim", ",", "rkhs_dim", ",", "rkhs_dim", ",", "init_fn", ")", "\n", "self", ".", "psi_global_GG_t", "=", "ResBlock_fc", "(", "512", "+", "action_dim", ",", "rkhs_dim", ",", "rkhs_dim", ",", "init_fn", ")", "\n", "self", ".", "psi_global_GG_t_p_1", "=", "ResBlock_fc", "(", "512", ",", "rkhs_dim", ",", "rkhs_dim", ",", "init_fn", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "[", "self", ".", "conv1", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "conv2", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "conv3", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "flatten", ",", "self", ".", "fc_1", ",", "nn", ".", "ReLU", "(", ")", "]", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "[", "self", ".", "conv1", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "conv2", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "conv3", ",", "nn", ".", "ReLU", "(", ")", "]", ")", "\n", "\n", "self", ".", "global_encoder", "=", "nn", ".", "Sequential", "(", "*", "[", "self", ".", "flatten", ",", "self", ".", "fc_1", "]", ")", "\n", "self", ".", "local_encoder", "=", "nn", ".", "Sequential", "(", "*", "[", "self", ".", "conv1", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "conv2", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "conv3", ",", "nn", ".", "ReLU", "(", ")", "]", ")", "\n", "self", ".", "action_encoder", "=", "OneHot_fc", "(", "num_outputs", ",", "action_dim", ",", "action_dim", ",", "init_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.infoNCE_Mnih_84x84.__init__": [[143, 178], ["models.Encoder.__init__", "init_fn", "init_fn", "init_fn", "models.Flatten", "init_fn", "models.ResBlock_conv", "models.ResBlock_conv", "models.ResBlock_conv", "models.ResBlock_fc", "models.ResBlock_fc", "models.ResBlock_fc", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.init", "utils.compute_network_output_size", "utils.compute_network_output_size", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.init", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.compute_network_output_size", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.compute_network_output_size"], ["    ", "def", "__init__", "(", "self", ",", "obs_space", ",", "num_outputs", ",", "options", ")", ":", "\n", "        ", "\"\"\"\n        Model without action encoder\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "(", "w", ",", "h", ",", "in_channels", ")", "=", "obs_space", ".", "shape", "\n", "\n", "rkhs_dim", "=", "128", "\n", "init_fn", "=", "lambda", "m", ":", "init", "(", "m", ",", "\n", "lambda", "x", ":", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "x", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", ",", "\n", "lambda", "x", ":", "nn", ".", "init", ".", "constant_", "(", "x", ",", "0", ")", ")", "\n", "\n", "self", ".", "out_channels", "=", "compute_network_output_size", "(", "h", ",", "w", ",", "[", "8", ",", "4", ",", "3", "]", ",", "[", "8", ",", "4", ",", "3", "]", ",", "[", "4", ",", "2", ",", "1", "]", ",", "[", "4", ",", "2", ",", "1", "]", ")", "*", "64", "\n", "self", ".", "fc_channels", "=", "compute_network_output_size", "(", "h", ",", "w", ",", "[", "8", ",", "4", ",", "3", "]", ",", "[", "8", ",", "4", ",", "3", "]", ",", "[", "4", ",", "2", ",", "1", "]", ",", "[", "4", ",", "2", ",", "1", "]", ")", "*", "64", "\n", "\n", "self", ".", "conv1", "=", "init_fn", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "32", ",", "[", "8", ",", "8", "]", ",", "4", ")", ")", "\n", "self", ".", "conv2", "=", "init_fn", "(", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "[", "4", ",", "4", "]", ",", "2", ")", ")", "\n", "self", ".", "conv3", "=", "init_fn", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "[", "3", ",", "3", "]", ",", "1", ")", ")", "\n", "self", ".", "flatten", "=", "Flatten", "(", ")", "\n", "self", ".", "fc_1", "=", "init_fn", "(", "nn", ".", "Linear", "(", "self", ".", "fc_channels", ",", "512", ")", ")", "\n", "\n", "self", ".", "psi_local_LL", "=", "ResBlock_conv", "(", "64", ",", "rkhs_dim", ",", "rkhs_dim", ",", "init_fn", ")", "\n", "self", ".", "psi_local_LG", "=", "ResBlock_conv", "(", "64", ",", "rkhs_dim", ",", "rkhs_dim", ",", "init_fn", ")", "\n", "self", ".", "psi_local_GL", "=", "ResBlock_conv", "(", "64", ",", "rkhs_dim", ",", "rkhs_dim", ",", "init_fn", ")", "\n", "\n", "self", ".", "psi_global_LG", "=", "ResBlock_fc", "(", "512", ",", "rkhs_dim", ",", "rkhs_dim", ",", "init_fn", ")", "\n", "self", ".", "psi_global_GL", "=", "ResBlock_fc", "(", "512", ",", "rkhs_dim", ",", "rkhs_dim", ",", "init_fn", ")", "\n", "self", ".", "psi_global_GG", "=", "ResBlock_fc", "(", "512", ",", "rkhs_dim", ",", "rkhs_dim", ",", "init_fn", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "[", "self", ".", "conv1", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "conv2", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "conv3", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "flatten", ",", "self", ".", "fc_1", ",", "nn", ".", "ReLU", "(", ")", "]", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "[", "self", ".", "conv1", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "conv2", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "conv3", ",", "nn", ".", "ReLU", "(", ")", "]", ")", "\n", "\n", "self", ".", "global_encoder", "=", "nn", ".", "Sequential", "(", "*", "[", "self", ".", "flatten", ",", "self", ".", "fc_1", "]", ")", "\n", "self", ".", "local_encoder", "=", "nn", ".", "Sequential", "(", "*", "[", "self", ".", "conv1", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "conv2", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "conv3", ",", "nn", ".", "ReLU", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.Flatten.forward": [[184, 186], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.ResBlock_conv.__init__": [[192, 199], ["torch.Module.__init__", "init_fn", "init_fn", "init_fn", "utils.init", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.init"], ["def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", ",", "out_features", ",", "init_fn", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "constant_", "(", "x", ",", "0", ")", ")", ")", ":", "\n", "        ", "super", "(", "ResBlock_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "psi_1", "=", "init_fn", "(", "nn", ".", "Conv2d", "(", "in_features", ",", "hidden_features", ",", "[", "1", ",", "1", "]", ",", "1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "psi_2", "=", "init_fn", "(", "nn", ".", "Conv2d", "(", "hidden_features", ",", "out_features", ",", "[", "1", ",", "1", "]", ",", "1", ",", "bias", "=", "True", ")", ")", "\n", "\n", "self", ".", "W", "=", "init_fn", "(", "nn", ".", "Conv2d", "(", "in_features", ",", "hidden_features", ",", "[", "1", ",", "1", "]", ",", "1", ",", "bias", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.ResBlock_conv.forward": [[200, 207], ["models.ResBlock_conv.W", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.ResBlock_conv.psi_1", "models.ResBlock_conv.psi_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "action", "=", "None", ")", ":", "\n", "        ", "if", "action", "is", "not", "None", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "action", "]", ",", "dim", "=", "1", ")", "\n", "", "residual", "=", "self", ".", "W", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "psi_1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "psi_2", "(", "x", ")", "+", "residual", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.ResBlock_fc.__init__": [[213, 220], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "init_fn", "utils.init", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.init"], ["def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", ",", "out_features", ",", "init_fn", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "constant_", "(", "x", ",", "0", ")", ")", ")", ":", "\n", "        ", "super", "(", "ResBlock_fc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "psi_1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ",", "bias", "=", "True", ")", "\n", "self", ".", "psi_2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "W", "=", "init_fn", "(", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.ResBlock_fc.forward": [[221, 228], ["models.ResBlock_fc.W", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.ResBlock_fc.psi_1", "models.ResBlock_fc.psi_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "action", "=", "None", ")", ":", "\n", "        ", "if", "action", "is", "not", "None", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "action", "]", ",", "dim", "=", "1", ")", "\n", "", "residual", "=", "self", ".", "W", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "psi_1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "psi_2", "(", "x", ")", "+", "residual", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.OneHot_fc.__init__": [[234, 241], ["torch.Module.__init__", "init_fn", "init_fn", "init_fn", "utils.init", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.init"], ["def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", ",", "out_features", ",", "init_fn", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "constant_", "(", "x", ",", "0", ")", ",", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "psi_1", "=", "init_fn", "(", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", ")", "\n", "self", ".", "psi_2", "=", "init_fn", "(", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", ")", "\n", "self", ".", "W", "=", "init_fn", "(", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.models.OneHot_fc.forward": [[242, 248], ["utils.make_one_hot", "models.OneHot_fc.W", "torch.relu", "torch.relu", "torch.relu", "models.OneHot_fc.psi_1", "models.OneHot_fc.psi_2"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.make_one_hot"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "make_one_hot", "(", "x", ",", "self", ".", "in_features", ")", "\n", "residual", "=", "self", ".", "W", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "psi_1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "psi_2", "(", "x", ")", "+", "residual", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_model.AtariCatDqnModel_nce.__init__": [[13, 61], ["torch.Module.__init__", "utils.Arguments", "numpy.zeros", "utils.select_architecture", "utils.select_architecture.", "utils.make_procgen_action_matrix", "torch.Parameter", "torch.Parameter", "torch.Parameter", "globals", "models.DistributionalDuelingHeadModel", "models.DistributionalHeadModel", "tmp_map_procgen.keys", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "models.Action_net", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "int", "env_name.split", "torch.LongTensor.sum", "torch.LongTensor.sum", "torch.LongTensor.sum", "env_name.split"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.select_architecture", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.make_procgen_action_matrix"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "image_shape", ",", "\n", "output_size", ",", "\n", "n_atoms", "=", "51", ",", "\n", "fc_sizes", "=", "512", ",", "\n", "dueling", "=", "False", ",", "\n", "use_maxpool", "=", "False", ",", "\n", "channels", "=", "None", ",", "# None uses default.", "\n", "kernel_sizes", "=", "None", ",", "\n", "strides", "=", "None", ",", "\n", "paddings", "=", "None", ",", "\n", "frame_stack", "=", "4", ",", "\n", "nce_loss", "=", "'InfoNCE_action_loss'", ",", "\n", "algo", "=", "'c51'", ",", "\n", "env_name", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dueling", "=", "dueling", "\n", "c", ",", "h", ",", "w", "=", "image_shape", "\n", "self", ".", "args", "=", "Arguments", "(", "{", "'frame_stack'", ":", "int", "(", "frame_stack", "==", "1", ")", ",", "'nce_loss'", ":", "nce_loss", ",", "'algo'", ":", "algo", "}", ")", "\n", "dummy_state", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "c", ")", ")", "\n", "\n", "network", "=", "select_architecture", "(", "self", ".", "args", ",", "globals", "(", ")", ")", "\n", "self", ".", "model", "=", "network", "(", "dummy_state", ",", "output_size", ",", "{", "}", ")", "\n", "\n", "self", ".", "conv", "=", "self", ".", "model", ".", "convs", "\n", "conv_out_size", "=", "self", ".", "model", ".", "out_channels", "\n", "\n", "# Pick the right head if dueling or not (only ever worked with non-dueling)", "\n", "if", "dueling", ":", "\n", "            ", "self", ".", "head", "=", "DistributionalDuelingHeadModel", "(", "conv_out_size", ",", "fc_sizes", ",", "\n", "output_size", "=", "output_size", ",", "n_atoms", "=", "n_atoms", ",", "fc_1_V", "=", "self", ".", "model", ".", "fc_1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "head", "=", "DistributionalHeadModel", "(", "conv_out_size", ",", "fc_sizes", ",", "\n", "output_size", "=", "output_size", ",", "n_atoms", "=", "n_atoms", ",", "fc_1", "=", "self", ".", "model", ".", "fc_1", ")", "\n", "", "self", ".", "model", ".", "fc_1", ".", "requires_grad", "=", "True", "\n", "\n", "# Make the procgen action mapping matrix", "\n", "tmp_map_procgen", ",", "PROCGEN_ACTION_MAT", "=", "make_procgen_action_matrix", "(", ")", "\n", "\n", "if", "env_name", ".", "split", "(", "'-'", ")", "[", "1", "]", "in", "tmp_map_procgen", ".", "keys", "(", ")", ":", "# procgen n_step_nce = -1", "\n", "            ", "mat", "=", "torch", ".", "LongTensor", "(", "PROCGEN_ACTION_MAT", "[", "env_name", ".", "split", "(", "'-'", ")", "[", "1", "]", "]", ")", "\n", "N_hidden", "=", "15", "\n", "N_visible", "=", "(", "mat", ".", "sum", "(", "0", ")", ">", "0", ")", ".", "sum", "(", ")", "\n", "# There is 15 actions in total, but some actions map to other, making this set reduced", "\n", "self", ".", "action_net", "=", "Action_net", "(", "2", "*", "N_visible", "*", "N_hidden", ")", "\n", "", "self", ".", "A_hat_visible", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "15", ",", "15", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_model.AtariCatDqnModel_nce.forward": [[63, 80], ["observation.type", "img.mul_.mul_.mul_", "rlpyt.utils.tensor.infer_leading_dims", "rlpyt_model.AtariCatDqnModel_nce.conv", "rlpyt_model.AtariCatDqnModel_nce.head", "torch.softmax", "torch.softmax", "torch.softmax", "rlpyt.utils.tensor.restore_leading_dims", "img.mul_.mul_.view", "rlpyt_model.AtariCatDqnModel_nce.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "observation", ",", "prev_action", ",", "prev_reward", ")", ":", "\n", "        ", "\"\"\"Feedforward layers process as [T*B,H]. Return same leading dims as\n        input, can be [T,B], [B], or [].\"\"\"", "\n", "img", "=", "observation", ".", "type", "(", "torch", ".", "float", ")", "# Expect torch.uint8 inputs", "\n", "img", "=", "img", ".", "mul_", "(", "1.", "/", "255", ")", "# From [0-255] to [0-1], in place.", "\n", "\n", "# Infer (presence of) leading dimensions: [T,B], [B], or [].", "\n", "lead_dim", ",", "T", ",", "B", ",", "img_shape", "=", "infer_leading_dims", "(", "img", ",", "3", ")", "\n", "\n", "conv_out", "=", "self", ".", "conv", "(", "img", ".", "view", "(", "T", "*", "B", ",", "*", "img_shape", ")", ")", "# Fold if T dimension.", "\n", "\n", "p", "=", "self", ".", "head", "(", "conv_out", ".", "view", "(", "T", "*", "B", ",", "-", "1", ")", ")", "\n", "p", "=", "F", ".", "softmax", "(", "p", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Restore leading dimensions: [T,B], [B], or [], as input.", "\n", "p", "=", "restore_leading_dims", "(", "p", ",", "lead_dim", ",", "T", ",", "B", ")", "\n", "return", "p", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_algo.CategoricalDQN_nce.__init__": [[40, 55], ["rlpyt.algos.dqn.dqn.DQN.__init__", "rlpyt_algo.CategoricalDQN_nce.reset_nce_accumulators", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_algo.CategoricalDQN_nce.reset_nce_accumulators"], ["    ", "def", "__init__", "(", "self", ",", "V_min", "=", "-", "10", ",", "V_max", "=", "10", ",", "args", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "# self.agent = a", "\n", "self", ".", "V_min", "=", "V_min", "\n", "self", ".", "V_max", "=", "V_max", "\n", "self", ".", "args", "=", "args", "\n", "if", "\"eps\"", "not", "in", "self", ".", "optim_kwargs", ":", "# Assume optim.Adam", "\n", "            ", "self", ".", "optim_kwargs", "[", "\"eps\"", "]", "=", "0.01", "/", "self", ".", "batch_size", "\n", "", "self", ".", "warmup_T", "=", "0", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "self", ".", "reset_nce_accumulators", "(", "device", ")", "\n", "\n", "self", ".", "A_mat_itr", "=", "0", "\n", "self", ".", "itr", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_algo.CategoricalDQN_nce.initialize_replay_buffer": [[56, 86], ["rlpyt.algos.dqn.dqn.SamplesToBuffer", "dict", "ReplayCls", "dict.update", "dict"], "methods", ["None"], ["", "def", "initialize_replay_buffer", "(", "self", ",", "examples", ",", "batch_spec", ",", "async_", "=", "False", ")", ":", "\n", "        ", "example_to_buffer", "=", "SamplesToBuffer", "(", "\n", "observation", "=", "examples", "[", "\"observation\"", "]", ",", "\n", "action", "=", "examples", "[", "\"action\"", "]", ",", "\n", "reward", "=", "examples", "[", "\"reward\"", "]", ",", "\n", "done", "=", "examples", "[", "\"done\"", "]", ",", "\n", ")", "\n", "replay_kwargs", "=", "dict", "(", "\n", "example", "=", "example_to_buffer", ",", "\n", "size", "=", "self", ".", "replay_size", ",", "\n", "B", "=", "batch_spec", ".", "B", ",", "\n", "discount", "=", "self", ".", "discount", ",", "\n", "n_step_return", "=", "self", ".", "n_step_return", ",", "\n", ")", "\n", "if", "self", ".", "args", "[", "'n_step_nce'", "]", ">", "1", "or", "self", ".", "args", "[", "'n_step_nce'", "]", "<", "0", ":", "\n", "            ", "ReplayCls", "=", "UniformSequenceReplayFrameBuffer", "\n", "replay_kwargs", "[", "'rnn_state_interval'", "]", "=", "0", "\n", "replay_kwargs", "[", "'batch_T'", "]", "=", "batch_spec", ".", "T", "+", "self", ".", "warmup_T", "\n", "", "elif", "self", ".", "prioritized_replay", ":", "\n", "            ", "replay_kwargs", ".", "update", "(", "dict", "(", "\n", "alpha", "=", "self", ".", "pri_alpha", ",", "\n", "beta", "=", "self", ".", "pri_beta_init", ",", "\n", "default_priority", "=", "self", ".", "default_priority", ",", "\n", ")", ")", "\n", "ReplayCls", "=", "(", "AsyncPrioritizedReplayFrameBuffer", "if", "async_", "else", "\n", "PrioritizedReplayFrameBuffer", ")", "\n", "", "else", ":", "\n", "            ", "ReplayCls", "=", "(", "AsyncUniformReplayFrameBuffer", "if", "async_", "else", "\n", "UniformReplayFrameBuffer", ")", "\n", "", "self", ".", "replay_buffer", "=", "ReplayCls", "(", "**", "replay_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_algo.CategoricalDQN_nce.optim_initialize": [[87, 99], ["rlpyt_algo.CategoricalDQN_nce.OptimCls", "rlpyt_algo.CategoricalDQN_nce.OptimCls", "rlpyt_algo.CategoricalDQN_nce.agent.parameters", "rlpyt_algo.CategoricalDQN_nce.optimizer.load_state_dict", "max", "rlpyt_algo.CategoricalDQN_nce.agent.model.action_net.parameters"], "methods", ["None"], ["", "def", "optim_initialize", "(", "self", ",", "rank", "=", "0", ")", ":", "\n", "        ", "\"\"\"Called by async runner.\"\"\"", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "optimizer", "=", "self", ".", "OptimCls", "(", "self", ".", "agent", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "learning_rate", ",", "**", "self", ".", "optim_kwargs", ")", "\n", "if", "self", ".", "initial_optim_state_dict", "is", "not", "None", ":", "\n", "            ", "self", ".", "optimizer", ".", "load_state_dict", "(", "self", ".", "initial_optim_state_dict", ")", "\n", "", "if", "self", ".", "prioritized_replay", ":", "\n", "            ", "self", ".", "pri_beta_itr", "=", "max", "(", "1", ",", "self", ".", "pri_beta_steps", "//", "self", ".", "sampler_bs", ")", "\n", "# the q network, which learns pairwise action affinities", "\n", "", "self", ".", "action_net_optimizer", "=", "self", ".", "OptimCls", "(", "self", ".", "agent", ".", "model", ".", "action_net", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "learning_rate", ",", "**", "self", ".", "optim_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_algo.CategoricalDQN_nce.initialize": [[100, 103], ["super().initialize", "rlpyt_algo.CategoricalDQN_nce.agent.give_V_min_max"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_algo.CategoricalDQN_nce.initialize"], ["", "def", "initialize", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "initialize", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "agent", ".", "give_V_min_max", "(", "self", ".", "V_min", ",", "self", ".", "V_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_algo.CategoricalDQN_nce.async_initialize": [[104, 108], ["super().async_initialize", "rlpyt_algo.CategoricalDQN_nce.agent.give_V_min_max"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_algo.CategoricalDQN_nce.async_initialize"], ["", "def", "async_initialize", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "buffer", "=", "super", "(", ")", ".", "async_initialize", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "agent", ".", "give_V_min_max", "(", "self", ".", "V_min", ",", "self", ".", "V_max", ")", "\n", "return", "buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_algo.CategoricalDQN_nce.reset_nce_accumulators": [[109, 122], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "reset_nce_accumulators", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\"\n        Batch accumulators for NCE loss, pre-allocated on the GPU\n        \"\"\"", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "actions", "=", "torch", ".", "zeros", "(", "size", "=", "(", "self", ".", "args", "[", "'nce_batch_size'", "]", ",", ")", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "returns", "=", "torch", ".", "zeros", "(", "size", "=", "(", "self", ".", "args", "[", "'nce_batch_size'", "]", ",", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "nonterminals", "=", "torch", ".", "zeros", "(", "size", "=", "(", "self", ".", "args", "[", "'nce_batch_size'", "]", ",", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "states", "=", "torch", ".", "zeros", "(", "size", "=", "(", "self", ".", "args", "[", "'nce_batch_size'", "]", ",", "self", ".", "args", "[", "'frame_stack'", "]", ",", "104", ",", "80", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "self", ".", "device", ")", "# 104 x 80 for ProcGen", "\n", "self", ".", "next_states", "=", "torch", ".", "zeros", "(", "size", "=", "(", "self", ".", "args", "[", "'nce_batch_size'", "]", ",", "self", ".", "args", "[", "'frame_stack'", "]", ",", "104", ",", "80", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "self", ".", "device", ")", "\n", "if", "self", ".", "prioritized_replay", ":", "\n", "            ", "self", ".", "weights", "=", "torch", ".", "zeros", "(", "size", "=", "(", "self", ".", "args", "[", "'nce_batch_size'", "]", ",", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "self", ".", "device", ")", "\n", "", "self", ".", "nce_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_algo.CategoricalDQN_nce.optimize_agent": [[123, 389], ["OptInfoNCE", "range", "rlpyt_algo.CategoricalDQN_nce.update_itr_hyperparams", "rlpyt_algo.CategoricalDQN_nce.samples_to_buffer", "rlpyt_algo.CategoricalDQN_nce.replay_buffer.append_samples", "numpy.zeros", "rlpyt_algo.CategoricalDQN_nce.optimizer.zero_grad", "rlpyt_algo.CategoricalDQN_nce.loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "rlpyt_algo.CategoricalDQN_nce.optimizer.step", "OptInfoNCE.loss.append", "OptInfoNCE.gradNorm.append", "OptInfoNCE.tdAbsErr.extend", "OptInfoNCE.lossNCE.append", "OptInfoNCE.action0.append", "OptInfoNCE.action1.append", "OptInfoNCE.action2.append", "OptInfoNCE.action3.append", "OptInfoNCE.action4.append", "OptInfoNCE.action5.append", "OptInfoNCE.action6.append", "OptInfoNCE.action7.append", "OptInfoNCE.action8.append", "OptInfoNCE.action9.append", "OptInfoNCE.action10.append", "OptInfoNCE.action11.append", "OptInfoNCE.action12.append", "OptInfoNCE.action13.append", "OptInfoNCE.action14.append", "collections.namedtuple", "collections.namedtuple", "rlpyt_algo.CategoricalDQN_nce.replay_buffer.sample_batch", "len", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "rlpyt_algo.CategoricalDQN_nce.agent.model.action_net", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "rlpyt_algo.CategoricalDQN_nce.agent.model.action_net", "rlpyt_algo.CategoricalDQN_nce.action_net_optimizer.zero_grad", "loss.backward", "rlpyt_algo.CategoricalDQN_nce.action_net_optimizer.step", "numpy.zeros", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.cat().float().to", "torch.softmax().numpy", "torch.softmax().numpy", "torch.softmax().numpy", "torch.softmax().numpy", "torch.softmax().numpy", "torch.softmax().numpy", "torch.softmax().numpy", "torch.softmax().numpy", "torch.softmax().numpy", "numpy.maximum", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "numpy.random.randint.mean", "collections.namedtuple.", "collections.namedtuple.", "collections.namedtuple.", "collections.namedtuple.", "collections.namedtuple.", "numpy.mean", "range", "rlpyt_algo.CategoricalDQN_nce.agent.parameters", "rlpyt_algo.CategoricalDQN_nce.replay_buffer.update_batch_priorities", "loss.item", "td_abs_errors[].numpy", "loss_nce_raw.item", "rlpyt_algo.CategoricalDQN_nce.agent.update_target", "math.log", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "hasattr", "numpy.random.uniform", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "rlpyt_algo.CategoricalDQN_nce.optimize_agent.loss_fn"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_algo.CategoricalDQN_nce.loss", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log"], ["", "def", "optimize_agent", "(", "self", ",", "itr", ",", "samples", "=", "None", ",", "sampler_itr", "=", "None", ")", ":", "\n", "        ", "itr", "=", "itr", "if", "sampler_itr", "is", "None", "else", "sampler_itr", "# Async uses sampler_itr.", "\n", "\n", "self", ".", "A_mat_itr", "+=", "(", "itr", "-", "self", ".", "itr", ")", "\n", "self", ".", "itr", "=", "itr", "\n", "if", "samples", "is", "not", "None", ":", "\n", "            ", "samples_to_buffer", "=", "self", ".", "samples_to_buffer", "(", "samples", ")", "\n", "self", ".", "replay_buffer", ".", "append_samples", "(", "samples_to_buffer", ")", "\n", "\n", "", "opt_info", "=", "OptInfoNCE", "(", "*", "(", "[", "]", "for", "_", "in", "range", "(", "len", "(", "OptInfoNCE", ".", "_fields", ")", ")", ")", ")", "\n", "if", "itr", "<", "self", ".", "min_itr_learn", ":", "\n", "            ", "self", ".", "agent", ".", "A_hat_visible", "=", "None", "\n", "return", "opt_info", "\n", "", "for", "_", "in", "range", "(", "self", ".", "updates_per_optimize", ")", ":", "\n", "            ", "action_counts", "=", "np", ".", "zeros", "(", "shape", "=", "15", ")", "\n", "average_repeating_action_len", "=", "0.", "\n", "average_N", "=", "0.", "\n", "is_procgen", "=", "(", "'procgen'", "in", "self", ".", "args", "[", "'env_name'", "]", ")", "\n", "\n", "if", "self", ".", "args", "[", "'n_step_nce'", "]", "==", "-", "1", ":", "\n", "                ", "\"\"\"\n                DRIML-ada\n                \"\"\"", "\n", "t", "=", "0", "\n", "OneStepSamples", "=", "namedtuple", "(", "\"OneStepSamples\"", ",", "[", "\"agent_inputs\"", ",", "\"action\"", ",", "\"return_\"", ",", "\"target_inputs\"", ",", "\"done\"", ",", "\"done_n\"", ",", "\"is_weights\"", "]", ")", "\n", "ObservedTensor", "=", "namedtuple", "(", "\"ObservedTensor\"", ",", "[", "\"observation\"", ",", "\"prev_action\"", "]", ")", "\n", "samples", "=", "self", ".", "replay_buffer", ".", "sample_batch", "(", "self", ".", "batch_size", ")", "\n", "\n", "actions", "=", "samples", ".", "all_action", "\n", "\n", "\n", "def", "loss_fn", "(", "p", ",", "q", ")", ":", "\n", "                    ", "log_2", "=", "math", ".", "log", "(", "2.", ")", "\n", "# return -F.log_softmax(p).mean()", "\n", "return", "(", "log_2", "-", "F", ".", "softplus", "(", "-", "p", ")", ")", ".", "mean", "(", ")", "-", "(", "F", ".", "softplus", "(", "-", "q", ")", "+", "q", "-", "log_2", ")", ".", "mean", "(", ")", "\n", "\n", "", "device", "=", "self", ".", "agent", ".", "device", "\n", "B", "=", "len", "(", "actions", "[", "0", "]", ")", "\n", "T", "=", "len", "(", "actions", ")", "\n", "Y", "=", "torch", ".", "ones", "(", "size", "=", "(", "B", ",", ")", ")", "\n", "C", "=", "torch", ".", "zeros", "(", "size", "=", "(", "B", ",", ")", ")", "\n", "\n", "if", "is_procgen", ":", "\n", "                    ", "action_type", "=", "'hybrid'", "\n", "mat", "=", "torch", ".", "LongTensor", "(", "PROCGEN_ACTION_MAT", "[", "self", ".", "args", "[", "'env_name'", "]", ".", "split", "(", "'-'", ")", "[", "1", "]", "]", ")", "\n", "mapped_actions", "=", "(", "F", ".", "one_hot", "(", "actions", ")", "@", "mat", ")", ".", "max", "(", "2", ")", "[", "1", "]", "\n", "N_hidden", "=", "15", "\n", "N_visible", "=", "(", "mat", ".", "sum", "(", "0", ")", ">", "0", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "                    ", "action_type", "=", "'hidden'", "\n", "N_hidden", "=", "18", "# ALE", "\n", "N_visible", "=", "18", "\n", "\n", "", "if", "action_type", "==", "'hybrid'", ":", "\n", "                    ", "N_actions", "=", "N_visible", "*", "N_hidden", "\n", "\n", "", "if", "not", "hasattr", "(", "self", ",", "'A_mat'", ")", ":", "\n", "                    ", "self", ".", "A_mat", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "N_actions", ",", "N_actions", ")", ")", "\n", "\n", "", "for", "tt", "in", "range", "(", "1", ",", "T", ")", ":", "\n", "                    ", "\"\"\"\n                    |Hidden| = 15\n                    |Visible| <= 15\n                    0 <= |Mixed| <= |Hidden|*|Visible|, hidden_0_visible_0,...,hidden_0_visible_14,hidden_1_visible_0,etc\n\n                    A) Estimate K for each entry\n                    \"\"\"", "\n", "if", "action_type", "==", "'hybrid'", ":", "\n", "                        ", "aa", "=", "torch", ".", "stack", "(", "[", "actions", "[", "tt", "-", "1", "]", ",", "mapped_actions", "[", "tt", "-", "1", "]", "]", ",", "1", ")", "\n", "bb", "=", "torch", ".", "stack", "(", "[", "actions", "[", "tt", "]", ",", "mapped_actions", "[", "tt", "]", "]", ",", "1", ")", "\n", "\n", "a_t", "=", "(", "N_visible", "-", "1", ")", "*", "aa", "[", ":", ",", "0", "]", "+", "aa", "[", ":", ",", "1", "]", "\n", "a_tp1", "=", "(", "N_visible", "-", "1", ")", "*", "bb", "[", ":", ",", "0", "]", "+", "bb", "[", ":", ",", "1", "]", "\n", "\n", "", "P", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "[", "self", ".", "A_mat", "[", "a_t", "[", "i", "]", ",", "a_tp1", "[", "i", "]", "]", "for", "i", "in", "range", "(", "B", ")", "]", ")", ")", "\n", "S", "=", "torch", ".", "bernoulli", "(", "P", ")", "\n", "Y", "=", "Y", "*", "S", "\n", "C", "=", "C", "+", "Y", "\n", "\n", "", "\"\"\"\n                B) Update A_mat\n                \"\"\"", "\n", "\n", "true_inp", "=", "torch", ".", "cat", "(", "[", "F", ".", "one_hot", "(", "torch", ".", "LongTensor", "(", "actions", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ")", ")", ",", "N_actions", ")", ",", "F", ".", "one_hot", "(", "torch", ".", "LongTensor", "(", "actions", "[", "1", ":", "]", ".", "view", "(", "-", "1", ")", ")", ",", "N_actions", ")", "]", ",", "1", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "p", "=", "self", ".", "agent", ".", "model", ".", "action_net", "(", "true_inp", ")", "\n", "\n", "idx", "=", "torch", ".", "randperm", "(", "B", "*", "(", "T", "-", "1", ")", ")", "\n", "perm_inp", "=", "torch", ".", "cat", "(", "[", "F", ".", "one_hot", "(", "torch", ".", "LongTensor", "(", "actions", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ")", ")", ",", "N_actions", ")", ",", "F", ".", "one_hot", "(", "torch", ".", "LongTensor", "(", "actions", "[", "1", ":", "]", ".", "view", "(", "-", "1", ")", ")", ",", "N_actions", ")", "[", "idx", "]", "]", ",", "1", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "q", "=", "self", ".", "agent", ".", "model", ".", "action_net", "(", "perm_inp", ")", "\n", "\n", "loss", "=", "-", "loss_fn", "(", "p", ",", "q", ")", "\n", "self", ".", "action_net_optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "action_net_optimizer", ".", "step", "(", ")", "\n", "\n", "\"\"\"\n                C) Do smoothing on A_mat to prevent fast changes\n                \"\"\"", "\n", "\n", "A_hat", "=", "np", ".", "zeros", "(", "shape", "=", "(", "N_actions", ",", "N_actions", ")", ")", "\n", "v1", "=", "F", ".", "one_hot", "(", "torch", ".", "arange", "(", "N_actions", ")", ".", "repeat_interleave", "(", "N_actions", ")", ",", "N_actions", ")", "\n", "v2", "=", "F", ".", "one_hot", "(", "torch", ".", "arange", "(", "N_actions", ")", ".", "repeat", "(", "N_actions", ")", ",", "N_actions", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v1", ",", "v2", "]", ",", "dim", "=", "1", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "A_hat", "=", "torch", ".", "softmax", "(", "self", ".", "agent", ".", "model", ".", "action_net", "(", "v", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "N_actions", ",", "N_actions", ")", ",", "dim", "=", "1", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "self", ".", "A_mat", "=", "(", "0.9", ")", "*", "self", ".", "A_mat", "+", "(", "0.1", ")", "*", "A_hat", "\n", "\n", "\n", "optimal_Ns", "=", "np", ".", "maximum", "(", "1", ",", "C", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "adx", "=", "torch", ".", "arange", "(", "0", ",", "len", "(", "actions", "[", "0", "]", ")", ")", ".", "long", "(", ")", "\n", "\n", "average_N", "=", "optimal_Ns", ".", "mean", "(", ")", "\n", "\n", "agent_inputs", "=", "ObservedTensor", "(", "observation", "=", "samples", ".", "all_observation", "[", "t", "]", ",", "prev_action", "=", "samples", ".", "all_action", "[", "t", "]", ")", "\n", "action", "=", "samples", ".", "all_action", "[", "t", "+", "1", "]", "\n", "return_", "=", "samples", ".", "return_", "[", "t", "]", "\n", "target_inputs_rl", "=", "ObservedTensor", "(", "observation", "=", "samples", ".", "all_observation", "[", "t", "+", "1", "]", ",", "prev_action", "=", "samples", ".", "all_action", "[", "t", "+", "1", "]", ")", "\n", "target_inputs_nce", "=", "ObservedTensor", "(", "observation", "=", "samples", ".", "all_observation", ".", "transpose", "(", "1", ",", "0", ")", "[", "adx", "[", "None", ",", ":", "]", ",", "optimal_Ns", "]", "[", "0", "]", ",", "prev_action", "=", "samples", ".", "all_action", ".", "transpose", "(", "1", ",", "0", ")", "[", "adx", "[", "None", ",", ":", "]", ",", "optimal_Ns", "]", "[", "0", "]", ")", "\n", "done", "=", "samples", ".", "done", "[", "t", "]", "\n", "done_n", "=", "samples", ".", "done", "[", "t", "]", "\n", "is_weights", "=", "None", "\n", "\n", "samples_from_replay_nce", "=", "OneStepSamples", "(", "agent_inputs", "=", "agent_inputs", ",", "\n", "action", "=", "action", ",", "\n", "return_", "=", "return_", ",", "\n", "target_inputs", "=", "target_inputs_nce", ",", "\n", "done", "=", "done", ",", "\n", "done_n", "=", "done_n", ",", "\n", "is_weights", "=", "is_weights", ")", "\n", "samples_from_replay_rl", "=", "OneStepSamples", "(", "agent_inputs", "=", "agent_inputs", ",", "\n", "action", "=", "action", ",", "\n", "return_", "=", "return_", ",", "\n", "target_inputs", "=", "target_inputs_rl", ",", "\n", "done", "=", "done", ",", "\n", "done_n", "=", "done_n", ",", "\n", "is_weights", "=", "is_weights", ")", "\n", "\n", "a_diff", "=", "samples", ".", "all_action", ".", "transpose", "(", "0", ",", "1", ")", "[", ":", ",", ":", "-", "1", "]", "-", "samples", ".", "all_action", ".", "transpose", "(", "0", ",", "1", ")", "[", ":", ",", "1", ":", "]", "\n", "idx", "=", "torch", ".", "where", "(", "a_diff", "==", "0", ")", "[", "0", "]", "\n", "average_repeating_action_len", "=", "np", ".", "mean", "(", "list", "(", "Counter", "(", "idx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "values", "(", ")", ")", ")", "\n", "\n", "for", "a", "in", "range", "(", "N_hidden", ")", ":", "\n", "                    ", "action_counts", "[", "a", "]", "=", "torch", ".", "mean", "(", "(", "samples", ".", "all_action", ".", "transpose", "(", "0", ",", "1", ")", "==", "a", ")", ".", "sum", "(", "1", ")", ".", "float", "(", ")", ")", "\n", "", "", "elif", "self", ".", "args", "[", "'n_step_nce'", "]", "==", "-", "2", ":", "\n", "                ", "\"\"\"\n                DRIML-randk\n                \"\"\"", "\n", "t", "=", "0", "\n", "OneStepSamples", "=", "namedtuple", "(", "\"OneStepSamples\"", ",", "[", "\"agent_inputs\"", ",", "\"action\"", ",", "\"return_\"", ",", "\"target_inputs\"", ",", "\"done\"", ",", "\"done_n\"", ",", "\"is_weights\"", "]", ")", "\n", "ObservedTensor", "=", "namedtuple", "(", "\"ObservedTensor\"", ",", "[", "\"observation\"", ",", "\"prev_action\"", "]", ")", "\n", "samples", "=", "self", ".", "replay_buffer", ".", "sample_batch", "(", "self", ".", "batch_size", ")", "\n", "\n", "actions", "=", "samples", ".", "all_action", "\n", "\n", "optimal_Ns", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "3", ",", "size", "=", "(", "actions", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "adx", "=", "torch", ".", "arange", "(", "0", ",", "len", "(", "actions", "[", "0", "]", ")", ")", ".", "long", "(", ")", "\n", "\n", "agent_inputs", "=", "ObservedTensor", "(", "observation", "=", "samples", ".", "all_observation", "[", "t", "]", ",", "prev_action", "=", "samples", ".", "all_action", "[", "t", "]", ")", "\n", "action", "=", "samples", ".", "all_action", "[", "t", "+", "1", "]", "\n", "return_", "=", "samples", ".", "return_", "[", "t", "]", "\n", "target_inputs_rl", "=", "ObservedTensor", "(", "observation", "=", "samples", ".", "all_observation", "[", "t", "+", "1", "]", ",", "prev_action", "=", "samples", ".", "all_action", "[", "t", "+", "1", "]", ")", "\n", "target_inputs_nce", "=", "ObservedTensor", "(", "observation", "=", "samples", ".", "all_observation", ".", "transpose", "(", "1", ",", "0", ")", "[", "adx", "[", "None", ",", ":", "]", ",", "optimal_Ns", "]", "[", "0", "]", ",", "prev_action", "=", "samples", ".", "all_action", ".", "transpose", "(", "1", ",", "0", ")", "[", "adx", "[", "None", ",", ":", "]", ",", "optimal_Ns", "]", "[", "0", "]", ")", "\n", "done", "=", "samples", ".", "done", "[", "t", "]", "\n", "done_n", "=", "samples", ".", "done", "[", "t", "]", "\n", "is_weights", "=", "None", "\n", "\n", "samples_from_replay_nce", "=", "OneStepSamples", "(", "agent_inputs", "=", "agent_inputs", ",", "\n", "action", "=", "action", ",", "\n", "return_", "=", "return_", ",", "\n", "target_inputs", "=", "target_inputs_nce", ",", "\n", "done", "=", "done", ",", "\n", "done_n", "=", "done_n", ",", "\n", "is_weights", "=", "is_weights", ")", "\n", "samples_from_replay_rl", "=", "OneStepSamples", "(", "agent_inputs", "=", "agent_inputs", ",", "\n", "action", "=", "action", ",", "\n", "return_", "=", "return_", ",", "\n", "target_inputs", "=", "target_inputs_rl", ",", "\n", "done", "=", "done", ",", "\n", "done_n", "=", "done_n", ",", "\n", "is_weights", "=", "is_weights", ")", "\n", "", "elif", "self", ".", "args", "[", "'n_step_nce'", "]", ">", "1", ":", "\n", "                ", "\"\"\"\n                DRIML-fix\n                \"\"\"", "\n", "t", "=", "0", "\n", "t_p_k", "=", "t", "+", "self", ".", "args", "[", "'n_step_nce'", "]", "\n", "OneStepSamples", "=", "namedtuple", "(", "\"OneStepSamples\"", ",", "[", "\"agent_inputs\"", ",", "\"action\"", ",", "\"return_\"", ",", "\"target_inputs\"", ",", "\"done\"", ",", "\"done_n\"", ",", "\"is_weights\"", "]", ")", "\n", "ObservedTensor", "=", "namedtuple", "(", "\"ObservedTensor\"", ",", "[", "\"observation\"", ",", "\"prev_action\"", "]", ")", "\n", "samples", "=", "self", ".", "replay_buffer", ".", "sample_batch", "(", "self", ".", "batch_size", ")", "\n", "\n", "agent_inputs", "=", "ObservedTensor", "(", "observation", "=", "samples", ".", "all_observation", "[", "t", "]", ",", "prev_action", "=", "samples", ".", "all_action", "[", "t", "]", ")", "\n", "action", "=", "samples", ".", "all_action", "[", "t", "+", "1", "]", "\n", "return_", "=", "samples", ".", "return_", "[", "t", "]", "\n", "target_inputs_rl", "=", "ObservedTensor", "(", "observation", "=", "samples", ".", "all_observation", "[", "t", "+", "1", "]", ",", "prev_action", "=", "samples", ".", "all_action", "[", "t", "+", "1", "]", ")", "\n", "target_inputs_nce", "=", "ObservedTensor", "(", "observation", "=", "samples", ".", "all_observation", "[", "t_p_k", "]", ",", "prev_action", "=", "samples", ".", "all_action", "[", "t_p_k", "]", ")", "\n", "done", "=", "samples", ".", "done", "[", "t", "]", "\n", "done_n", "=", "samples", ".", "done", "[", "t", "]", "\n", "is_weights", "=", "None", "\n", "\n", "\n", "samples_from_replay_nce", "=", "OneStepSamples", "(", "agent_inputs", "=", "agent_inputs", ",", "\n", "action", "=", "action", ",", "\n", "return_", "=", "return_", ",", "\n", "target_inputs", "=", "target_inputs_nce", ",", "\n", "done", "=", "done", ",", "\n", "done_n", "=", "done_n", ",", "\n", "is_weights", "=", "is_weights", ")", "\n", "samples_from_replay_rl", "=", "OneStepSamples", "(", "agent_inputs", "=", "agent_inputs", ",", "\n", "action", "=", "action", ",", "\n", "return_", "=", "return_", ",", "\n", "target_inputs", "=", "target_inputs_rl", ",", "\n", "done", "=", "done", ",", "\n", "done_n", "=", "done_n", ",", "\n", "is_weights", "=", "is_weights", ")", "\n", "\n", "a_diff", "=", "samples", ".", "all_action", ".", "transpose", "(", "0", ",", "1", ")", "[", ":", ",", ":", "-", "1", "]", "-", "samples", ".", "all_action", ".", "transpose", "(", "0", ",", "1", ")", "[", ":", ",", "1", ":", "]", "\n", "idx", "=", "torch", ".", "where", "(", "a_diff", "==", "0", ")", "[", "0", "]", "\n", "average_repeating_action_len", "=", "np", ".", "mean", "(", "list", "(", "Counter", "(", "idx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "values", "(", ")", ")", ")", "\n", "\n", "for", "a", "in", "range", "(", "15", ")", ":", "\n", "                    ", "action_counts", "[", "a", "]", "=", "torch", ".", "mean", "(", "(", "samples", ".", "all_action", ".", "transpose", "(", "0", ",", "1", ")", "==", "a", ")", ".", "sum", "(", "1", ")", ".", "float", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "\"\"\"\n                C51\n                \"\"\"", "\n", "samples_from_replay_rl", "=", "samples_from_replay_nce", "=", "self", ".", "replay_buffer", ".", "sample_batch", "(", "self", ".", "batch_size", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ",", "td_abs_errors", ",", "_", ",", "_", ",", "loss_nce_raw", "=", "self", ".", "loss", "(", "samples_from_replay_rl", ",", "itr", ",", "samples_from_replay_nce", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "self", ".", "agent", ".", "parameters", "(", ")", ",", "self", ".", "clip_grad_norm", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "prioritized_replay", ":", "# and itr >= self.args['NCE_pretrain_steps']:", "\n", "                ", "self", ".", "replay_buffer", ".", "update_batch_priorities", "(", "td_abs_errors", ")", "\n", "", "opt_info", ".", "loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "opt_info", ".", "gradNorm", ".", "append", "(", "grad_norm", ")", "\n", "opt_info", ".", "tdAbsErr", ".", "extend", "(", "td_abs_errors", "[", ":", ":", "8", "]", ".", "numpy", "(", ")", ")", "# Downsample.", "\n", "\n", "opt_info", ".", "lossNCE", ".", "append", "(", "loss_nce_raw", ".", "item", "(", ")", ")", "\n", "\n", "opt_info", ".", "action0", ".", "append", "(", "action_counts", "[", "0", "]", ")", "\n", "opt_info", ".", "action1", ".", "append", "(", "action_counts", "[", "1", "]", ")", "\n", "opt_info", ".", "action2", ".", "append", "(", "action_counts", "[", "2", "]", ")", "\n", "opt_info", ".", "action3", ".", "append", "(", "action_counts", "[", "3", "]", ")", "\n", "opt_info", ".", "action4", ".", "append", "(", "action_counts", "[", "4", "]", ")", "\n", "opt_info", ".", "action5", ".", "append", "(", "action_counts", "[", "5", "]", ")", "\n", "opt_info", ".", "action6", ".", "append", "(", "action_counts", "[", "6", "]", ")", "\n", "opt_info", ".", "action7", ".", "append", "(", "action_counts", "[", "7", "]", ")", "\n", "opt_info", ".", "action8", ".", "append", "(", "action_counts", "[", "8", "]", ")", "\n", "opt_info", ".", "action9", ".", "append", "(", "action_counts", "[", "9", "]", ")", "\n", "opt_info", ".", "action10", ".", "append", "(", "action_counts", "[", "10", "]", ")", "\n", "opt_info", ".", "action11", ".", "append", "(", "action_counts", "[", "11", "]", ")", "\n", "opt_info", ".", "action12", ".", "append", "(", "action_counts", "[", "12", "]", ")", "\n", "opt_info", ".", "action13", ".", "append", "(", "action_counts", "[", "13", "]", ")", "\n", "opt_info", ".", "action14", ".", "append", "(", "action_counts", "[", "14", "]", ")", "\n", "\n", "self", ".", "update_counter", "+=", "1", "\n", "if", "self", ".", "update_counter", "%", "self", ".", "target_update_interval", "==", "0", ":", "\n", "                ", "self", ".", "agent", ".", "update_target", "(", ")", "\n", "", "", "self", ".", "update_itr_hyperparams", "(", "itr", ")", "\n", "return", "opt_info", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_algo.CategoricalDQN_nce.loss": [[390, 525], ["rlpyt.agents.base.AgentInputs", "rlpyt.agents.base.AgentInputs", "samples_nce.action.type().to", "samples_nce.return_.type().to", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "rl_return_.unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.linspace.view", "torch.linspace.view", "torch.linspace.view", "torch.clamp.unsqueeze", "torch.clamp.unsqueeze", "torch.clamp.unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "rlpyt_algo.CategoricalDQN_nce.agent", "rlpyt.utils.tensor.select_at_indexes", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.mean.get_device", "torch.mean.get_device", "torch.mean.get_device", "samples_nce.agent_inputs.observation.type().to", "samples_nce.target_inputs.observation.type().to", "abs", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "rlpyt_algo.CategoricalDQN_nce.agent.target", "rlpyt.utils.tensor.select_at_indexes", "target_p_unproj.unsqueeze.unsqueeze.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "rlpyt.algos.utils.valid_from_done", "rlpyt.utils.tensor.valid_mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "samples_nce.action.type", "samples_nce.return_.type", "rl_done_n.float", "rlpyt_algo.CategoricalDQN_nce.agent", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "samples_nce.agent_inputs.observation.type", "samples_nce.target_inputs.observation.type", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "nce_scores.get_device", "torch.tensor().cpu.to", "torch.tensor().cpu.to", "torch.tensor().cpu.to", "torch.tensor().cpu.to", "torch.tensor().cpu.to", "torch.tensor().cpu.to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.tensor().cpu", "torch.clamp.detach", "torch.clamp.detach", "torch.clamp.detach", "globals", "samples.is_weights.to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log"], ["", "def", "loss", "(", "self", ",", "samples", ",", "itr", ",", "samples_nce", ")", ":", "\n", "        ", "\"\"\"Samples have leading batch dimension [B,..] (but not time).\"\"\"", "\n", "self", ".", "args", "[", "'device'", "]", "=", "self", ".", "agent", ".", "device", "\n", "\n", "\"\"\"\n        Get rlpyt batch inputs and write them to GPU tensors\n        \"\"\"", "\n", "rl_agent_inputs", "=", "AgentInputs", "(", "observation", "=", "samples", ".", "agent_inputs", ".", "observation", ",", "prev_action", "=", "samples", ".", "agent_inputs", ".", "prev_action", ",", "prev_reward", "=", "None", ")", "\n", "rl_action", "=", "samples", ".", "action", "\n", "rl_return_", "=", "samples", ".", "return_", "\n", "rl_target_inputs", "=", "AgentInputs", "(", "observation", "=", "samples", ".", "target_inputs", ".", "observation", ",", "prev_action", "=", "samples", ".", "target_inputs", ".", "prev_action", ",", "prev_reward", "=", "None", ")", "\n", "rl_done", "=", "samples", ".", "done", "\n", "rl_done_n", "=", "samples", ".", "done_n", "\n", "\n", "self", ".", "states", "[", "(", "self", ".", "nce_counter", "*", "self", ".", "args", "[", "'batch_size'", "]", ")", ":", "(", "self", ".", "nce_counter", "+", "1", ")", "*", "self", ".", "args", "[", "'batch_size'", "]", "]", "=", "samples_nce", ".", "agent_inputs", ".", "observation", ".", "type", "(", "torch", ".", "float32", ")", ".", "to", "(", "self", ".", "args", "[", "'device'", "]", ")", "/", "255.", "\n", "self", ".", "actions", "[", "(", "self", ".", "nce_counter", "*", "self", ".", "args", "[", "'batch_size'", "]", ")", ":", "(", "self", ".", "nce_counter", "+", "1", ")", "*", "self", ".", "args", "[", "'batch_size'", "]", "]", "=", "samples_nce", ".", "action", ".", "type", "(", "torch", ".", "int64", ")", ".", "to", "(", "self", ".", "args", "[", "'device'", "]", ")", "\n", "self", ".", "returns", "[", "(", "self", ".", "nce_counter", "*", "self", ".", "args", "[", "'batch_size'", "]", ")", ":", "(", "self", ".", "nce_counter", "+", "1", ")", "*", "self", ".", "args", "[", "'batch_size'", "]", "]", "=", "samples_nce", ".", "return_", ".", "type", "(", "torch", ".", "float32", ")", ".", "to", "(", "self", ".", "args", "[", "'device'", "]", ")", "\n", "self", ".", "next_states", "[", "(", "self", ".", "nce_counter", "*", "self", ".", "args", "[", "'batch_size'", "]", ")", ":", "(", "self", ".", "nce_counter", "+", "1", ")", "*", "self", ".", "args", "[", "'batch_size'", "]", "]", "=", "samples_nce", ".", "target_inputs", ".", "observation", ".", "type", "(", "torch", ".", "float32", ")", ".", "to", "(", "self", ".", "args", "[", "'device'", "]", ")", "/", "255.", "\n", "self", ".", "nonterminals", "[", "(", "self", ".", "nce_counter", "*", "self", ".", "args", "[", "'batch_size'", "]", ")", ":", "(", "self", ".", "nce_counter", "+", "1", ")", "*", "self", ".", "args", "[", "'batch_size'", "]", "]", "=", "samples_nce", ".", "done", "\n", "if", "self", ".", "prioritized_replay", ":", "\n", "            ", "rl_is_weights", "=", "samples", ".", "is_weights", "\n", "self", ".", "weights", "[", "(", "self", ".", "nce_counter", "*", "self", ".", "args", "[", "'batch_size'", "]", ")", ":", "(", "self", ".", "nce_counter", "+", "1", ")", "*", "self", ".", "args", "[", "'batch_size'", "]", "]", "=", "samples_nce", ".", "is_weights", "\n", "\n", "", "self", ".", "nce_counter", "+=", "1", "\n", "\n", "\"\"\"\n        C51 code from rlpyt (unchanged)\n        \"\"\"", "\n", "\n", "delta_z", "=", "(", "self", ".", "V_max", "-", "self", ".", "V_min", ")", "/", "(", "self", ".", "agent", ".", "n_atoms", "-", "1", ")", "\n", "z", "=", "torch", ".", "linspace", "(", "self", ".", "V_min", ",", "self", ".", "V_max", ",", "self", ".", "agent", ".", "n_atoms", ")", "\n", "# Makde 2-D tensor of contracted z_domain for each data point,", "\n", "# with zeros where next value should not be added.", "\n", "next_z", "=", "z", "*", "(", "self", ".", "discount", "**", "self", ".", "n_step_return", ")", "# [P']", "\n", "next_z", "=", "torch", ".", "ger", "(", "1", "-", "rl_done_n", ".", "float", "(", ")", ",", "next_z", ")", "# [B,P']", "\n", "ret", "=", "rl_return_", ".", "unsqueeze", "(", "1", ")", "# [B,1]", "\n", "next_z", "=", "torch", ".", "clamp", "(", "ret", "+", "next_z", ",", "self", ".", "V_min", ",", "self", ".", "V_max", ")", "# [B,P']", "\n", "\n", "z_bc", "=", "z", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", "# [1,P,1]", "\n", "next_z_bc", "=", "next_z", ".", "unsqueeze", "(", "1", ")", "# [B,1,P']", "\n", "abs_diff_on_delta", "=", "abs", "(", "next_z_bc", "-", "z_bc", ")", "/", "delta_z", "\n", "projection_coeffs", "=", "torch", ".", "clamp", "(", "1", "-", "abs_diff_on_delta", ",", "0", ",", "1", ")", "# Most 0.", "\n", "# projection_coeffs is a 3-D tensor: [B,P,P']", "\n", "# dim-0: independent data entries", "\n", "# dim-1: base_z atoms (remains after projection)", "\n", "# dim-2: next_z atoms (summed in projection)", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "target_ps", "=", "self", ".", "agent", ".", "target", "(", "*", "rl_target_inputs", ")", "# [B,A,P']", "\n", "if", "self", ".", "double_dqn", ":", "\n", "                ", "next_ps", "=", "self", ".", "agent", "(", "*", "rl_target_inputs", ")", "# [B,A,P']", "\n", "next_qs", "=", "torch", ".", "tensordot", "(", "next_ps", ",", "z", ",", "dims", "=", "1", ")", "# [B,A]", "\n", "next_a", "=", "torch", ".", "argmax", "(", "next_qs", ",", "dim", "=", "-", "1", ")", "# [B]", "\n", "", "else", ":", "\n", "                ", "target_qs", "=", "torch", ".", "tensordot", "(", "target_ps", ",", "z", ",", "dims", "=", "1", ")", "# [B,A]", "\n", "next_a", "=", "torch", ".", "argmax", "(", "target_qs", ",", "dim", "=", "-", "1", ")", "# [B]", "\n", "", "target_p_unproj", "=", "select_at_indexes", "(", "next_a", ",", "target_ps", ")", "# [B,P']", "\n", "target_p_unproj", "=", "target_p_unproj", ".", "unsqueeze", "(", "1", ")", "# [B,1,P']", "\n", "target_p", "=", "(", "target_p_unproj", "*", "projection_coeffs", ")", ".", "sum", "(", "-", "1", ")", "# [B,P]", "\n", "", "ps", "=", "self", ".", "agent", "(", "*", "rl_agent_inputs", ")", "# [B,A,P]", "\n", "p", "=", "select_at_indexes", "(", "rl_action", ",", "ps", ")", "# [B,P]", "\n", "p", "=", "torch", ".", "clamp", "(", "p", ",", "EPS", ",", "1", ")", "# NaN-guard.", "\n", "losses", "=", "-", "torch", ".", "sum", "(", "target_p", "*", "torch", ".", "log", "(", "p", ")", ",", "dim", "=", "1", ")", "# Cross-entropy.", "\n", "\n", "if", "self", ".", "prioritized_replay", ":", "\n", "            ", "losses", "*=", "rl_is_weights", "\n", "\n", "", "target_p", "=", "torch", ".", "clamp", "(", "target_p", ",", "EPS", ",", "1", ")", "\n", "KL_div", "=", "torch", ".", "sum", "(", "target_p", "*", "\n", "(", "torch", ".", "log", "(", "target_p", ")", "-", "torch", ".", "log", "(", "p", ".", "detach", "(", ")", ")", ")", ",", "dim", "=", "1", ")", "\n", "KL_div", "=", "torch", ".", "clamp", "(", "KL_div", ",", "EPS", ",", "1", "/", "EPS", ")", "# Avoid <0 from NaN-guard.", "\n", "\n", "if", "not", "self", ".", "mid_batch_reset", ":", "\n", "            ", "valid", "=", "valid_from_done", "(", "rl_done", ")", "\n", "loss", "=", "valid_mean", "(", "losses", ",", "valid", ")", "\n", "KL_div", "*=", "valid", "\n", "", "else", ":", "\n", "            ", "loss", "=", "torch", ".", "mean", "(", "losses", ")", "\n", "# else:", "\n", "#     KL_div = torch.tensor([0.]).cpu()", "\n", "#     loss = torch.tensor([0.]).to(self.args['device'])", "\n", "\n", "", "\"\"\"\n        NCE loss\n        \"\"\"", "\n", "loss_device", "=", "loss", ".", "get_device", "(", ")", "\n", "if", "self", ".", "args", "[", "'lambda_LL'", "]", "!=", "0", "or", "self", ".", "args", "[", "'lambda_LG'", "]", "!=", "0", "or", "self", ".", "args", "[", "'lambda_GL'", "]", "!=", "0", "or", "self", ".", "args", "[", "'lambda_GG'", "]", "!=", "0", ":", "\n", "            ", "\"\"\"\n            Compute this only if one of the 4 lambdas != 0\n            \"\"\"", "\n", "if", "self", ".", "args", "[", "'nce_batch_size'", "]", "//", "self", ".", "args", "[", "'batch_size'", "]", "<=", "self", ".", "nce_counter", ":", "\n", "                ", "target", "=", "None", "\n", "# Select the proper NCE loss passed as argument", "\n", "dict_nce", "=", "globals", "(", ")", "[", "self", ".", "args", "[", "'nce_loss'", "]", "]", "(", "self", ".", "agent", ".", "model", ".", "model", ",", "self", ".", "states", ",", "self", ".", "actions", ",", "self", ".", "returns", ",", "self", ".", "next_states", ",", "self", ".", "args", ",", "target", "=", "target", ")", "\n", "\n", "nce_scores", "=", "self", ".", "args", "[", "'lambda_LL'", "]", "*", "dict_nce", "[", "'nce_L_L'", "]", "+", "self", ".", "args", "[", "'lambda_LG'", "]", "*", "dict_nce", "[", "'nce_L_G'", "]", "+", "self", ".", "args", "[", "'lambda_GL'", "]", "*", "dict_nce", "[", "'nce_G_L'", "]", "+", "self", ".", "args", "[", "'lambda_GG'", "]", "*", "dict_nce", "[", "'nce_G_G'", "]", "\n", "device_", "=", "nce_scores", ".", "device", "\n", "nce_scores_raw", "=", "(", "dict_nce", "[", "'nce_L_L'", "]", "if", "self", ".", "args", "[", "'lambda_LL'", "]", ">", "0", "else", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device_", ")", ")", ".", "mean", "(", ")", "\n", "nce_scores_raw", "+=", "(", "dict_nce", "[", "'nce_L_G'", "]", "if", "self", ".", "args", "[", "'lambda_LG'", "]", ">", "0", "else", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device_", ")", ")", ".", "mean", "(", ")", "\n", "nce_scores_raw", "+=", "(", "dict_nce", "[", "'nce_G_L'", "]", "if", "self", ".", "args", "[", "'lambda_GL'", "]", ">", "0", "else", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device_", ")", ")", ".", "mean", "(", ")", "\n", "nce_scores_raw", "+=", "(", "dict_nce", "[", "'nce_G_G'", "]", "if", "self", ".", "args", "[", "'lambda_GG'", "]", ">", "0", "else", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device_", ")", ")", ".", "mean", "(", ")", "\n", "if", "self", ".", "prioritized_replay", ":", "\n", "                    ", "nce_device", "=", "nce_scores", ".", "get_device", "(", ")", "\n", "if", "nce_device", "<", "0", ":", "\n", "                        ", "nce_scores", "*=", "samples", ".", "is_weights", "\n", "", "else", ":", "\n", "                        ", "nce_scores", "*=", "samples", ".", "is_weights", ".", "to", "(", "nce_device", ")", "\n", "", "", "info_nce_loss_weighted", "=", "(", "-", "nce_scores", ")", ".", "mean", "(", ")", "# decay by epsilon", "\n", "nce_scores_raw", "=", "(", "-", "nce_scores_raw", ")", ".", "mean", "(", ")", "\n", "\n", "if", "loss_device", "<", "0", ":", "\n", "                    ", "info_nce_loss_weighted", "=", "info_nce_loss_weighted", ".", "to", "(", "'cpu'", ")", "\n", "nce_scores_raw", "=", "nce_scores_raw", ".", "to", "(", "'cpu'", ")", "\n", "\n", "# self.reset_nce_accumulators(self.agent.device)", "\n", "", "self", ".", "nce_counter", "=", "0", "\n", "", "else", ":", "\n", "                ", "if", "loss_device", ">", "0", ":", "\n", "                    ", "info_nce_loss_weighted", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "loss_device", ")", "\n", "nce_scores_raw", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "loss_device", ")", "\n", "", "else", ":", "\n", "                    ", "info_nce_loss_weighted", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "cpu", "(", ")", "\n", "nce_scores_raw", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "cpu", "(", ")", "\n", "", "", "", "else", ":", "\n", "            ", "if", "self", ".", "args", "[", "'nce_batch_size'", "]", "//", "self", ".", "args", "[", "'batch_size'", "]", "<=", "self", ".", "nce_counter", ":", "\n", "# self.reset_nce_accumulators(self.agent.device)", "\n", "                ", "self", ".", "nce_counter", "=", "0", "\n", "", "if", "loss_device", ">", "0", ":", "\n", "                ", "info_nce_loss_weighted", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "loss_device", ")", "\n", "nce_scores_raw", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "loss_device", ")", "\n", "", "else", ":", "\n", "                ", "info_nce_loss_weighted", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "cpu", "(", ")", "\n", "nce_scores_raw", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "cpu", "(", ")", "\n", "\n", "", "", "return", "loss", "+", "(", "self", ".", "args", "[", "'nce_batch_size'", "]", "//", "self", ".", "batch_size", ")", "*", "info_nce_loss_weighted", ",", "KL_div", ",", "loss", ",", "info_nce_loss_weighted", ",", "nce_scores_raw", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.__init__": [[8, 10], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "beta", "=", "1", "/", "0.4", ")", ":", "\n", "        ", "self", ".", "beta", "=", "beta", "\n", "", "def", "reset", "(", "self", ",", "N", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.reset": [[10, 14], ["numpy.random.randint"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "N", ")", ":", "\n", "        ", "config", "=", "2", "*", "np", ".", "random", ".", "randint", "(", "2", ",", "size", "=", "(", "N", ",", "N", ")", ")", "-", "1", "\n", "self", ".", "config", "=", "config", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.mcmove": [[16, 33], ["range", "range", "numpy.random.randint", "numpy.random.randint", "numpy.random.rand", "numpy.exp"], "methods", ["None"], ["", "def", "mcmove", "(", "self", ",", "config", ",", "N", ",", "beta", ")", ":", "\n", "        ", "''' This is to execute the MC moves using \n        Metropolis algorithm such that detailed\n        balance condition is satisified'''", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "                    ", "a", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "N", ")", "\n", "b", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "N", ")", "\n", "s", "=", "config", "[", "a", ",", "b", "]", "\n", "nb", "=", "config", "[", "(", "a", "+", "1", ")", "%", "N", ",", "b", "]", "+", "config", "[", "a", ",", "(", "b", "+", "1", ")", "%", "N", "]", "+", "config", "[", "(", "a", "-", "1", ")", "%", "N", ",", "b", "]", "+", "config", "[", "a", ",", "(", "b", "-", "1", ")", "%", "N", "]", "\n", "cost", "=", "2", "*", "s", "*", "nb", "\n", "if", "cost", "<", "0", ":", "\n", "                        ", "s", "*=", "-", "1", "\n", "", "elif", "rand", "(", ")", "<", "np", ".", "exp", "(", "-", "cost", "*", "beta", ")", ":", "\n", "                        ", "s", "*=", "-", "1", "\n", "", "config", "[", "a", ",", "b", "]", "=", "s", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.simulate_n": [[34, 39], ["range", "simulations.Ising.mcmove"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.mcmove"], ["", "def", "simulate_n", "(", "self", ",", "n_steps", ")", ":", "\n", "        ", "''' This module simulates the Ising model'''", "\n", "for", "i", "in", "range", "(", "n_steps", ")", ":", "\n", "            ", "self", ".", "mcmove", "(", "self", ".", "config", ",", "self", ".", "config", ".", "shape", "[", "0", "]", ",", "self", ".", "beta", ")", "\n", "", "return", "self", ".", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.simulations.Ising.configPlot": [[41, 49], ["numpy.meshgrid", "f.add_subplot", "matplotlib.setp", "matplotlib.setp", "matplotlib.pcolormesh", "matplotlib.title", "matplotlib.axis", "range", "range", "f.add_subplot.get_yticklabels", "f.add_subplot.get_xticklabels"], "methods", ["None"], ["", "def", "configPlot", "(", "self", ",", "f", ",", "config", ",", "i", ",", "N", ",", "n_", ")", ":", "\n", "        ", "''' This modules plts the configuration once passed to it along with time etc '''", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "range", "(", "N", ")", ",", "range", "(", "N", ")", ")", "\n", "sp", "=", "f", ".", "add_subplot", "(", "3", ",", "3", ",", "n_", ")", "\n", "plt", ".", "setp", "(", "sp", ".", "get_yticklabels", "(", ")", ",", "visible", "=", "False", ")", "\n", "plt", ".", "setp", "(", "sp", ".", "get_xticklabels", "(", ")", ",", "visible", "=", "False", ")", "\n", "plt", ".", "pcolormesh", "(", "X", ",", "Y", ",", "config", ",", "cmap", "=", "plt", ".", "cm", ".", "RdBu", ")", ";", "\n", "plt", ".", "title", "(", "'Time=%d'", "%", "i", ")", ";", "plt", ".", "axis", "(", "'tight'", ")", "\n", "", "plt", ".", "show", "(", ")", ""]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.SummaryWriter_X.__init__": [[10, 16], ["tensorboardX.SummaryWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ",", "use_TFX", ")", ":", "\n", "        ", "\"\"\"\n        TensorboardX logger for Procgen, which flushes periodically (solves issue on some servers where logs aren't updating)\n        \"\"\"", "\n", "self", ".", "logger", "=", "SummaryWriter", "(", "log_dir", ")", "\n", "self", ".", "use_TFX", "=", "use_TFX", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.SummaryWriter_X.log": [[17, 21], ["loggers.SummaryWriter_X.logger.add_scalar", "loggers.SummaryWriter_X._flush"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.SummaryWriter_X._flush"], ["", "def", "log", "(", "self", ",", "name", ",", "value", ",", "step", ")", ":", "\n", "        ", "self", ".", "logger", ".", "add_scalar", "(", "name", ",", "value", ",", "step", ")", "\n", "if", "self", ".", "use_TFX", ":", "\n", "            ", "self", ".", "_flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.SummaryWriter_X._flush": [[22, 34], ["loggers.SummaryWriter_X.logger.file_writer.event_writer._ev_writer._py_recordio_writer._writer.flush", "open", "loggers.SummaryWriter_X.logger.file_writer.event_writer._event_queue.empty", "time.sleep"], "methods", ["None"], ["", "", "def", "_flush", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "path", "=", "self", ".", "logger", ".", "file_writer", ".", "event_writer", ".", "_ev_writer", ".", "_py_recordio_writer", ".", "path", "\n", "self", ".", "logger", ".", "file_writer", ".", "event_writer", ".", "_ev_writer", ".", "_py_recordio_writer", ".", "_writer", ".", "flush", "(", ")", "\n", "while", "True", ":", "\n", "                ", "if", "self", ".", "logger", ".", "file_writer", ".", "event_writer", ".", "_event_queue", ".", "empty", "(", ")", ":", "\n", "                    ", "break", "\n", "", "time", ".", "sleep", "(", "0.1", ")", "# Increased from 0.1 -> X s", "\n", "\n", "", "self", ".", "logger", ".", "file_writer", ".", "event_writer", ".", "_ev_writer", ".", "_py_recordio_writer", ".", "_writer", "=", "open", "(", "path", ",", "'ab'", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.Logger.__init__": [[37, 57], ["loggers.TextLogger", "os.path.join", "loggers.SummaryWriter_X", "open", "json.dump", "f.flush", "os.fsync", "os.path.join", "f.fileno"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ",", "use_TFX", ",", "params", "=", "None", ",", "comet_experiment", "=", "None", ",", "disable_local", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Meta-logger class\n        \"\"\"", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "self", ".", "use_TFX", "=", "use_TFX", "\n", "self", ".", "disable_local", "=", "disable_local", "\n", "\n", "if", "not", "self", ".", "disable_local", ":", "\n", "            ", "self", ".", "text_logger", "=", "TextLogger", "(", "log_dir", ")", "\n", "tb_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "'tensorboard'", ")", "\n", "self", ".", "tensorboard_logger", "=", "SummaryWriter_X", "(", "tb_path", ",", "self", ".", "use_TFX", ")", "\n", "", "self", ".", "comet_logger", "=", "comet_experiment", "\n", "\n", "if", "not", "self", ".", "disable_local", ":", "\n", "            ", "if", "params", "is", "not", "None", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'params.json'", ")", ",", "'w+'", ")", "as", "f", ":", "\n", "                    ", "json", ".", "dump", "(", "params", ",", "f", ")", "\n", "f", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "f", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.Logger.log": [[58, 69], ["type", "loggers.Logger.text_logger.log", "type", "loggers.Logger.tensorboard_logger.log", "loggers.Logger.comet_logger.log_metric"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log"], ["", "", "", "", "def", "log", "(", "self", ",", "s", ")", ":", "\n", "        ", "if", "type", "(", "s", ")", "==", "str", ":", "\n", "            ", "if", "not", "self", ".", "disable_local", ":", "\n", "                ", "self", ".", "text_logger", ".", "log", "(", "s", ")", "\n", "", "", "elif", "type", "(", "s", ")", "==", "dict", ":", "\n", "            ", "name", ",", "value", ",", "step", "=", "s", "[", "'name'", "]", ",", "s", "[", "'value'", "]", ",", "s", "[", "'step'", "]", "\n", "if", "not", "self", ".", "disable_local", ":", "\n", "                ", "self", ".", "tensorboard_logger", ".", "log", "(", "name", ",", "value", ",", "step", ")", "\n", "\n", "", "if", "self", ".", "comet_logger", ":", "\n", "                ", "self", ".", "comet_logger", ".", "log_metric", "(", "name", ",", "value", ",", "step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.__init__": [[72, 91], ["logging.Formatter", "logging.getLogger", "loggers.TextLogger.logger.setLevel", "logging.FileHandler", "logging.FileHandler.setFormatter", "loggers.TextLogger.logger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "loggers.TextLogger.logger.addHandler"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "\"\"\"\n        Logger in text mode for Procgen runs\n        \"\"\"", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "\"[%(asctime)s] %(message)s\"", ",", "\"%Y-%m-%d %H:%M:%S\"", ")", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "'custom'", ")", "\n", "self", ".", "logger", ".", "propagate", "=", "False", "\n", "self", ".", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "self", ".", "logger", ".", "handlers", "=", "[", "]", "\n", "\n", "fileHandler", "=", "logging", ".", "FileHandler", "(", "'%s/log.log'", "%", "(", "log_dir", ")", ")", "\n", "fileHandler", ".", "setFormatter", "(", "formatter", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "fileHandler", ")", "\n", "\n", "streamHandler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "streamHandler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "streamHandler", ".", "setFormatter", "(", "formatter", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "streamHandler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log": [[92, 96], ["loggers.TextLogger.logger.info", "h.flush"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "s", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "s", ")", "\n", "for", "h", "in", "self", ".", "logger", ".", "handlers", ":", "\n", "            ", "h", ".", "flush", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.Arguments.__init__": [[47, 50], ["args.items", "setattr"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "args", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.init": [[5, 13], ["weight_init", "bias_init"], "function", ["None"], ["def", "init", "(", "module", ",", "weight_init", ",", "bias_init", ")", ":", "\n", "    ", "\"\"\"\n    Apply the initialization function to both weights and bias of input module\n    \"\"\"", "\n", "weight_init", "(", "module", ".", "weight", ".", "data", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "bias_init", "(", "module", ".", "bias", ".", "data", ")", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.make_one_hot": [[14, 23], ["torch.FloatTensor().zero_", "torch.cuda.is_available", "one_hot.cuda.scatter_().float", "one_hot.cuda.cuda", "torch.FloatTensor", "one_hot.cuda.scatter_", "labels.unsqueeze().long", "labels.size", "labels.unsqueeze"], "function", ["None"], ["", "def", "make_one_hot", "(", "labels", ",", "C", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Scatters integer labels into a one-hot encoding\n    \"\"\"", "\n", "one_hot", "=", "torch", ".", "FloatTensor", "(", "size", "=", "(", "labels", ".", "size", "(", "0", ")", ",", "C", ")", ")", ".", "zero_", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "one_hot", "=", "one_hot", ".", "cuda", "(", ")", "\n", "", "target", "=", "one_hot", ".", "scatter_", "(", "1", ",", "labels", ".", "unsqueeze", "(", "-", "1", ")", ".", "long", "(", ")", ",", "1", ")", ".", "float", "(", ")", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.compute_network_output_size": [[24, 32], ["zip", "int", "int"], "function", ["None"], ["", "def", "compute_network_output_size", "(", "h", ",", "w", ",", "kernels_h", ",", "kernels_w", ",", "strides_h", ",", "strides_w", ")", ":", "\n", "    ", "\"\"\"\n    Automatically compute the output size of standard convolutional layers\n    \"\"\"", "\n", "for", "(", "k_h", ",", "k_w", ",", "s_h", ",", "s_w", ")", "in", "zip", "(", "kernels_h", ",", "kernels_w", ",", "strides_h", ",", "strides_w", ")", ":", "\n", "        ", "h", "=", "(", "h", "-", "k_h", ")", "/", "s_h", "+", "1", "\n", "w", "=", "(", "w", "-", "k_w", ")", "/", "s_w", "+", "1", "\n", "", "return", "int", "(", "h", ")", "*", "int", "(", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.select_architecture": [[33, 42], ["None"], "function", ["None"], ["", "def", "select_architecture", "(", "args", ",", "class_list", ")", ":", "\n", "    ", "\"\"\"\n    Method to select the relevant network based on the loss\n    \"\"\"", "\n", "loss_fn", "=", "args", ".", "nce_loss", "\n", "if", "'action'", "in", "loss_fn", ":", "\n", "        ", "return", "class_list", "[", "'infoNCE_Mnih_84x84_action'", "]", "\n", "", "else", ":", "\n", "        ", "return", "class_list", "[", "'infoNCE_Mnih_84x84'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.make_procgen_action_matrix": [[51, 81], ["tmp_map_procgen.items", "numpy.eye", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range"], "function", ["None"], ["", "", "", "def", "make_procgen_action_matrix", "(", ")", ":", "\n", "    ", "\"\"\"\n    Procgen has hidden actions (i.e. 1 to 15 keys), and visible ones (e.g. in running games, the special action key maps to a no-op).\n    This matrix maps every hidden action in every Procgen game to the actual action which is visible to the agent.\n    \"\"\"", "\n", "tmp_map_procgen", "=", "{", "'bigfish'", ":", "[", "[", "a", ",", "4", "]", "for", "a", "in", "range", "(", "9", ",", "15", ")", "]", ",", "#9,10,11,12,13,14 -> no-op (4)", "\n", "'bossfight'", ":", "[", "[", "a", ",", "4", "]", "for", "a", "in", "range", "(", "10", ",", "15", ")", "]", ",", "# 10,11,12,13,14 -> no-op since only 1 special move", "\n", "'caveflyer'", ":", "[", "[", "a", ",", "4", "]", "for", "a", "in", "range", "(", "10", ",", "15", ")", "]", ",", "\n", "'chaser'", ":", "[", "[", "a", ",", "4", "]", "for", "a", "in", "range", "(", "9", ",", "15", ")", "]", ",", "\n", "'climber'", ":", "[", "[", "0", ",", "1", "]", ",", "[", "3", ",", "4", "]", ",", "[", "6", ",", "7", "]", "]", "+", "[", "[", "a", ",", "4", "]", "for", "a", "in", "range", "(", "9", ",", "15", ")", "]", ",", "# clip vel_y to >= 0 and no special move", "\n", "'coinrun'", ":", "[", "[", "a", ",", "4", "]", "for", "a", "in", "range", "(", "9", ",", "15", ")", "]", ",", "\n", "'dodgeball'", ":", "[", "[", "a", ",", "4", "]", "for", "a", "in", "range", "(", "10", ",", "15", ")", "]", ",", "\n", "'fruitbot'", ":", "[", "[", "0", ",", "1", "]", ",", "[", "3", ",", "4", "]", ",", "[", "6", ",", "7", "]", ",", "[", "2", ",", "1", "]", ",", "[", "5", ",", "4", "]", ",", "[", "8", ",", "7", "]", "]", "+", "[", "[", "a", ",", "4", "]", "for", "a", "in", "range", "(", "10", ",", "15", ")", "]", ",", "\n", "'heist'", ":", "[", "[", "a", ",", "4", "]", "for", "a", "in", "range", "(", "9", ",", "15", ")", "]", ",", "\n", "'jumper'", ":", "[", "[", "0", ",", "1", "]", ",", "[", "3", ",", "4", "]", ",", "[", "6", ",", "7", "]", "]", "+", "[", "[", "a", ",", "4", "]", "for", "a", "in", "range", "(", "9", ",", "15", ")", "]", ",", "\n", "'leaper'", ":", "[", "[", "a", ",", "4", "]", "for", "a", "in", "range", "(", "9", ",", "15", ")", "]", ",", "\n", "'maze'", ":", "[", "[", "0", ",", "1", "]", ",", "[", "6", ",", "7", "]", ",", "[", "2", ",", "1", "]", ",", "[", "8", ",", "7", "]", "]", "+", "[", "[", "a", ",", "4", "]", "for", "a", "in", "range", "(", "9", ",", "15", ")", "]", ",", "\n", "'miner'", ":", "[", "[", "0", ",", "1", "]", ",", "[", "6", ",", "7", "]", ",", "[", "2", ",", "1", "]", ",", "[", "8", ",", "7", "]", "]", "+", "[", "[", "a", ",", "4", "]", "for", "a", "in", "range", "(", "9", ",", "15", ")", "]", ",", "\n", "'ninja'", ":", "[", "[", "0", ",", "1", "]", ",", "[", "3", ",", "4", "]", ",", "[", "6", ",", "7", "]", ",", "[", "13", ",", "4", "]", ",", "[", "14", ",", "4", "]", "]", ",", "\n", "'plunder'", ":", "[", "[", "0", ",", "1", "]", ",", "[", "3", ",", "4", "]", ",", "[", "6", ",", "7", "]", ",", "[", "2", ",", "1", "]", ",", "[", "5", ",", "4", "]", ",", "[", "8", ",", "7", "]", "]", "+", "[", "[", "a", ",", "4", "]", "for", "a", "in", "range", "(", "10", ",", "15", ")", "]", ",", "\n", "'starpilot'", ":", "[", "]", "\n", "}", "\n", "PROCGEN_ACTION_MAT", "=", "{", "}", "\n", "for", "env_name", ",", "vec", "in", "tmp_map_procgen", ".", "items", "(", ")", ":", "\n", "        ", "mat", "=", "np", ".", "eye", "(", "15", ")", "\n", "for", "(", "x", ",", "y", ")", "in", "vec", ":", "\n", "            ", "mat", "[", "x", "]", "=", "0.", "\n", "mat", "[", "x", ",", "y", "]", "=", "1.", "\n", "", "PROCGEN_ACTION_MAT", "[", "env_name", "]", "=", "mat", "\n", "", "return", "tmp_map_procgen", ",", "PROCGEN_ACTION_MAT", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.shuffle_joint": [[82, 92], ["len", "numpy.array", "numpy.random.shuffle", "range"], "function", ["None"], ["", "def", "shuffle_joint", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Shuffles input x on first (batch) dimension\n    Args:\n        x (torch.Tensor): (n,**) A >1D tensor, gets shuffled along batch dimension\n    \"\"\"", "\n", "n", "=", "len", "(", "x", ")", "\n", "idx", "=", "np", ".", "array", "(", "range", "(", "n", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "return", "x", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.tanh_clip": [[93, 103], ["torch.tanh"], "function", ["None"], ["", "def", "tanh_clip", "(", "x", ",", "clip_val", "=", "20.", ")", ":", "\n", "    ", "'''\n    soft clip values to the range [-clip_val, +clip_val]\n    Trick from AM-DIM\n    '''", "\n", "if", "clip_val", "is", "not", "None", ":", "\n", "        ", "x_clip", "=", "clip_val", "*", "torch", ".", "tanh", "(", "(", "1.", "/", "clip_val", ")", "*", "x", ")", "\n", "", "else", ":", "\n", "        ", "x_clip", "=", "x", "\n", "", "return", "x_clip", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.set_seed": [[104, 112], ["numpy.random.seed", "random.seed", "torch.manual_seed", "torch.cuda.manual_seed"], "function", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.seed", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.seed"], ["", "def", "set_seed", "(", "seed", ",", "cuda", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.make_config": [[113, 180], ["dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "", "def", "make_config", "(", "algo", ")", ":", "\n", "    ", "if", "algo", "==", "'c51'", ":", "\n", "        ", "config", "=", "dict", "(", "\n", "agent", "=", "dict", "(", "\n", "eps_init", "=", "0.1", ",", "\n", "eps_final", "=", "0.01", "\n", ")", ",", "\n", "algo", "=", "dict", "(", "\n", "discount", "=", "0.99", ",", "\n", "batch_size", "=", "256", ",", "# -> 128", "\n", "delta_clip", "=", "1.", ",", "\n", "learning_rate", "=", "2.5e-4", ",", "# -> 6.5e-4 (rainbow), 2.5e-4 (C51)", "\n", "target_update_interval", "=", "int", "(", "312", ")", ",", "\n", "clip_grad_norm", "=", "10.", ",", "# -> 10", "\n", "min_steps_learn", "=", "int", "(", "1000", ")", ",", "# -> 5e4", "\n", "target_update_tau", "=", "0.95", ",", "# tau * new + (1-tau) * old", "\n", "\n", "double_dqn", "=", "True", ",", "\n", "prioritized_replay", "=", "True", ",", "\n", "n_step_return", "=", "3", ",", "# -> 1", "\n", "\n", "replay_size", "=", "int", "(", "1e6", ")", ",", "\n", "replay_ratio", "=", "8", ",", "# -> 8,", "\n", "\n", "pri_alpha", "=", "0.5", ",", "\n", "pri_beta_init", "=", "0.4", ",", "\n", "pri_beta_final", "=", "1.", ",", "\n", "pri_beta_steps", "=", "int", "(", "50e6", ")", ",", "\n", "\n", "eps_steps", "=", "int", "(", "1e5", ")", "\n", ")", ",", "\n", "env", "=", "dict", "(", "\n", "game", "=", "None", ",", "\n", "episodic_lives", "=", "False", ",", "\n", "clip_reward", "=", "False", ",", "\n", "horizon", "=", "int", "(", "27e3", ")", ",", "\n", "max_start_noops", "=", "0", ",", "\n", "repeat_action_probability", "=", "0.", ",", "\n", "frame_skip", "=", "1", ",", "\n", "num_img_obs", "=", "4", "\n", ")", ",", "\n", "eval_env", "=", "dict", "(", "\n", "game", "=", "None", ",", "\n", "episodic_lives", "=", "False", ",", "\n", "horizon", "=", "int", "(", "27e3", ")", ",", "\n", "clip_reward", "=", "False", ",", "\n", "max_start_noops", "=", "0", ",", "\n", "repeat_action_probability", "=", "0.", ",", "\n", "frame_skip", "=", "1", ",", "\n", "num_img_obs", "=", "4", "\n", ")", ",", "\n", "model", "=", "dict", "(", "dueling", "=", "False", ")", ",", "\n", "optim", "=", "dict", "(", ")", ",", "\n", "runner", "=", "dict", "(", "\n", "n_steps", "=", "5e7", ",", "\n", "log_interval_steps", "=", "5e5", ",", "\n", ")", ",", "\n", "sampler", "=", "dict", "(", "\n", "batch_T", "=", "7", ",", "\n", "batch_B", "=", "32", ",", "# this should be batch_size // replay_ratio", "\n", "max_decorrelation_steps", "=", "1000", ",", "\n", "eval_n_envs", "=", "4", ",", "\n", "eval_max_steps", "=", "int", "(", "125e3", ")", ",", "\n", "eval_max_trajectories", "=", "100", ",", "\n", ")", ",", "\n", ")", "\n", "", "return", "config", "", "", ""]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.losses.abstract_scores_action": [[11, 26], ["model_t_p_1", "score_fn", "model_t", "model_t", "model_t_p_1"], "function", ["None"], ["def", "abstract_scores_action", "(", "model_t", ",", "model_t_p_1", ",", "s_t", ",", "s_t_p_1", ",", "s_t_p_k", ",", "a_t", ",", "encoder_shape", ",", "score_fn", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate psi(s_t), psi(s_t+1), psi(s_t+k) and psi(a_t), then compute NCE scores\n    \"\"\"", "\n", "if", "a_t", "is", "None", ":", "\n", "        ", "t", "=", "model_t", "(", "s_t", ")", "\n", "", "else", ":", "\n", "        ", "t", "=", "model_t", "(", "s_t", ",", "a_t", ")", "\n", "", "t_p_1", "=", "model_t_p_1", "(", "s_t_p_1", ")", "\n", "if", "s_t_p_k", "is", "not", "None", ":", "\n", "        ", "t_p_k", "=", "model_t_p_1", "(", "s_t_p_k", ")", "\n", "", "else", ":", "\n", "        ", "t_p_k", "=", "None", "\n", "", "nce", ",", "reg", "=", "score_fn", "(", "t", ",", "t_p_1", ",", "t_p_k", ",", "encoder_shape", ",", "device", ")", "\n", "return", "nce", ",", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.losses.nce_scores_log_softmax": [[27, 36], ["losses.nce_scores_log_softmax_expanded", "nce_scores.sum.sum"], "function", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.losses.nce_scores_log_softmax_expanded"], ["", "def", "nce_scores_log_softmax", "(", "reference_samples", ",", "positive_samples", ",", "negative_samples", ",", "encoder_shape", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    Compute NCE + and - scores with log_softmax.\n    Re-use the expanded (n_locs x n_batch x n_batch) version\n    \"\"\"", "\n", "nce_scores", ",", "lgt_reg", "=", "nce_scores_log_softmax_expanded", "(", "reference_samples", ",", "positive_samples", ",", "negative_samples", ",", "encoder_shape", ",", "device", ")", "\n", "nce_scores", "=", "nce_scores", ".", "sum", "(", "2", ")", "\n", "\n", "return", "nce_scores", ",", "lgt_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.losses.nce_scores_log_softmax_expanded": [[37, 64], ["reference_samples.unsqueeze().unsqueeze().repeat.view().permute", "positive_samples.unsqueeze().unsqueeze().repeat.view().permute", "utils.tanh_clip", "torch.log_softmax", "torch.eye().unsqueeze().repeat().to", "torch.eye().unsqueeze().repeat().to", "len", "reference_samples.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze().repeat", "len", "positive_samples.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze().repeat", "negative_samples.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze().repeat", "torch.matmul", "torch.matmul", "len", "reference_samples.unsqueeze().unsqueeze().repeat.view", "positive_samples.unsqueeze().unsqueeze().repeat.view", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "reference_samples.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze", "positive_samples.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze", "negative_samples.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "reference_samples.unsqueeze().unsqueeze().repeat.unsqueeze", "positive_samples.unsqueeze().unsqueeze().repeat.unsqueeze", "negative_samples.unsqueeze().unsqueeze().repeat.unsqueeze", "torch.eye", "torch.eye"], "function", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.tanh_clip"], ["", "def", "nce_scores_log_softmax_expanded", "(", "reference_samples", ",", "positive_samples", ",", "negative_samples", ",", "encoder_shape", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    Compute NCE + and - scores with log_softmax but return a vector of n_locs instead of a mean\n    \"\"\"", "\n", "if", "len", "(", "reference_samples", ".", "shape", ")", "==", "2", ":", "\n", "        ", "reference_samples", "=", "reference_samples", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "encoder_shape", "[", "2", "]", ",", "encoder_shape", "[", "3", "]", ")", "\n", "", "if", "len", "(", "positive_samples", ".", "shape", ")", "==", "2", ":", "\n", "        ", "positive_samples", "=", "positive_samples", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "encoder_shape", "[", "2", "]", ",", "encoder_shape", "[", "3", "]", ")", "\n", "", "if", "negative_samples", "is", "not", "None", "and", "len", "(", "negative_samples", ".", "shape", ")", "==", "2", ":", "\n", "        ", "negative_samples", "=", "negative_samples", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "encoder_shape", "[", "2", "]", ",", "encoder_shape", "[", "3", "]", ")", "\n", "\n", "", "reference_samples", "=", "reference_samples", ".", "view", "(", "encoder_shape", "[", ":", "2", "]", "+", "[", "-", "1", "]", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# before permute: n_batch x n_rkhs x n_locs , desired: n_loc x n_batch x n_rkhs", "\n", "positive_samples", "=", "positive_samples", ".", "view", "(", "encoder_shape", "[", ":", "2", "]", "+", "[", "-", "1", "]", ")", ".", "permute", "(", "2", ",", "1", ",", "0", ")", "# before permute: n_batch x n_rkhs x n_locs, desired: n_locs x n_rkhs x n_batch", "\n", "\n", "lgt_reg", "=", "0", "\n", "positive_pairs", "=", "torch", ".", "matmul", "(", "reference_samples", ",", "positive_samples", ")", "/", "encoder_shape", "[", "1", "]", "**", "0.5", "# n_locs x n_batch x n_batch", "\n", "lgt_reg", "+=", "(", "positive_pairs", "**", "2.", ")", ".", "mean", "(", ")", "\n", "positive_pairs", "=", "tanh_clip", "(", "positive_pairs", ")", "\n", "score_shape", "=", "positive_pairs", ".", "shape", "\n", "\n", "scores", "=", "F", ".", "log_softmax", "(", "positive_pairs", ",", "2", ")", "# (n_locs, n_batch, n_batch)", "\n", "\n", "mask", "=", "torch", ".", "eye", "(", "score_shape", "[", "-", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "score_shape", "[", "0", "]", ",", "1", ",", "1", ")", ".", "to", "(", "device", ")", "# n_locs x n_batch x n_batch", "\n", "nce_scores", "=", "(", "scores", "*", "mask", ")", "# n_locs x n_batch x n_batch", "\n", "\n", "\n", "return", "nce_scores", ",", "lgt_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.losses.InfoNCE_action_loss": [[72, 168], ["local_encoder", "model.local_encoder", "action_encoder", "a_t_local.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze().repeat", "list", "globals", "s_t.float", "s_t_p_1.float", "global_encoder", "model.global_encoder", "model.local_encoder", "model.global_encoder", "losses.abstract_scores_action", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "losses.abstract_scores_action", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "losses.abstract_scores_action", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "losses.abstract_scores_action", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "utils.shuffle_joint", "a_t_local.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze", "model.psi_local_LL_t_p_1", "s_t_p_1.float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "a_t_local.unsqueeze().unsqueeze().repeat.unsqueeze"], "function", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.losses.abstract_scores_action", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.losses.abstract_scores_action", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.losses.abstract_scores_action", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.losses.abstract_scores_action", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.shuffle_joint"], ["def", "InfoNCE_action_loss", "(", "model", ",", "s_t", ",", "a_t", ",", "r_t", ",", "s_t_p_1", ",", "args", ",", "s_t_p_k", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "    ", "device", "=", "args", "[", "'device'", "]", "\n", "score_fn", "=", "globals", "(", ")", "[", "args", "[", "'score_fn'", "]", "]", "\n", "\n", "local_encoder", "=", "model", ".", "local_encoder", "# Local encoder", "\n", "global_encoder", "=", "model", ".", "global_encoder", "# Global encoder", "\n", "action_encoder", "=", "model", ".", "action_encoder", "\n", "\n", "# Extract features phi(s)", "\n", "s_t_local", "=", "local_encoder", "(", "s_t", ".", "float", "(", ")", ")", "\n", "\n", "s_t_p_1_local", "=", "model", ".", "local_encoder", "(", "s_t_p_1", ".", "float", "(", ")", ")", "\n", "if", "args", "[", "'lambda_GL'", "]", "!=", "0", "or", "args", "[", "'lambda_GG'", "]", "!=", "0", ":", "\n", "        ", "s_t_global", "=", "global_encoder", "(", "s_t_local", ")", "\n", "", "if", "args", "[", "'lambda_LG'", "]", "!=", "0", "or", "args", "[", "'lambda_GG'", "]", "!=", "0", ":", "\n", "        ", "s_t_p_1_global", "=", "model", ".", "global_encoder", "(", "s_t_p_1_local", ")", "\n", "", "if", "args", "[", "'score_fn'", "]", "not", "in", "(", "'nce_scores_log_softmax'", ",", "'nce_scores_log_softmax_expanded'", ")", ":", "\n", "        ", "s_t_p_k_local", "=", "model", ".", "local_encoder", "(", "shuffle_joint", "(", "s_t_p_1", ".", "float", "(", ")", ")", ")", "\n", "s_t_p_k_global", "=", "model", ".", "global_encoder", "(", "s_t_p_k_local", ")", "\n", "", "else", ":", "\n", "        ", "s_t_p_k_local", "=", "None", "\n", "s_t_p_k_global", "=", "None", "\n", "\n", "", "a_t_global", "=", "action_encoder", "(", "a_t", ")", "\n", "a_t_local", "=", "a_t_global", "\n", "a_t_local", "=", "a_t_local", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "s_t_local", ".", "shape", "[", "2", "]", ",", "s_t_local", ".", "shape", "[", "3", "]", ")", "# repeat HxW times to be compatible with local concats", "\n", "\n", "encoder_shape", "=", "list", "(", "model", ".", "psi_local_LL_t_p_1", "(", "s_t_p_1_local", ")", ".", "shape", ")", "\n", "\n", "# Local -> Local", "\n", "if", "args", "[", "'lambda_LL'", "]", "!=", "0", ":", "\n", "        ", "psi_local_LL_t", "=", "model", ".", "psi_local_LL_t", "\n", "psi_local_LL_t_p_1", "=", "model", ".", "psi_local_LL_t_p_1", "\n", "nce_L_L", ",", "reg_L_L", "=", "abstract_scores_action", "(", "psi_local_LL_t", ",", "psi_local_LL_t_p_1", ",", "\n", "s_t_local", ",", "\n", "s_t_p_1_local", ",", "\n", "s_t_p_k_local", ",", "\n", "a_t_local", ",", "\n", "encoder_shape", ",", "score_fn", ",", "device", ")", "\n", "", "else", ":", "\n", "        ", "nce_L_L", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "reg_L_L", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Local -> Global", "\n", "", "if", "args", "[", "'lambda_LG'", "]", "!=", "0", ":", "\n", "        ", "psi_local_LG", "=", "model", ".", "psi_local_LG", "\n", "psi_global_LG", "=", "model", ".", "psi_global_LG", "\n", "\n", "nce_L_G", ",", "reg_L_G", "=", "abstract_scores_action", "(", "psi_local_LG", ",", "psi_global_LG", ",", "\n", "s_t_local", ",", "\n", "s_t_p_1_global", ",", "\n", "s_t_p_k_global", ",", "\n", "a_t_local", ",", "\n", "encoder_shape", ",", "score_fn", ",", "device", ")", "\n", "", "else", ":", "\n", "        ", "nce_L_G", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "reg_L_G", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Global -> Local", "\n", "", "if", "args", "[", "'lambda_GL'", "]", "!=", "0", ":", "\n", "        ", "psi_local_GL", "=", "model", ".", "psi_local_GL", "\n", "psi_global_GL", "=", "model", ".", "psi_global_GL", "\n", "\n", "nce_G_L", ",", "reg_G_L", "=", "abstract_scores_action", "(", "psi_global_GL", ",", "psi_local_GL", ",", "\n", "s_t_global", ",", "\n", "s_t_p_1_local", ",", "\n", "s_t_p_k_local", ",", "\n", "a_t_global", ",", "\n", "encoder_shape", ",", "score_fn", ",", "device", ")", "\n", "", "else", ":", "\n", "        ", "nce_G_L", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "reg_G_L", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Global -> Global", "\n", "", "if", "args", "[", "'lambda_GG'", "]", "!=", "0", ":", "\n", "        ", "psi_global_GG_t", "=", "model", ".", "psi_global_GG_t", "\n", "psi_global_GG_t_p_1", "=", "model", ".", "psi_global_GG_t_p_1", "\n", "\n", "nce_G_G", ",", "reg_G_G", "=", "abstract_scores_action", "(", "psi_global_GG_t", ",", "psi_global_GG_t_p_1", ",", "\n", "s_t_global", ",", "\n", "s_t_p_1_global", ",", "\n", "s_t_p_k_global", ",", "\n", "a_t_global", ",", "\n", "encoder_shape", ",", "score_fn", ",", "device", ")", "\n", "", "else", ":", "\n", "        ", "nce_G_G", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "reg_G_G", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "return", "{", "'nce_L_L'", ":", "nce_L_L", ",", "\n", "'nce_L_G'", ":", "nce_L_G", ",", "\n", "'nce_G_L'", ":", "nce_G_L", ",", "\n", "'nce_G_G'", ":", "nce_G_G", ",", "\n", "'reg_L_L'", ":", "reg_L_L", ",", "\n", "'reg_L_G'", ":", "reg_L_G", ",", "\n", "'reg_G_L'", ":", "reg_G_L", ",", "\n", "'reg_G_G'", ":", "reg_G_G", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.losses.InfoNCE_no_action_loss": [[171, 256], ["local_encoder", "global_encoder", "local_encoder", "global_encoder", "list", "globals", "s_t.float", "s_t_p_1.float", "local_encoder", "global_encoder", "losses.abstract_scores_action", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "losses.abstract_scores_action", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "losses.abstract_scores_action", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "losses.abstract_scores_action", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "utils.shuffle_joint", "model.psi_local_LL", "s_t_p_1.float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.losses.abstract_scores_action", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.losses.abstract_scores_action", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.losses.abstract_scores_action", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.losses.abstract_scores_action", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.utils.shuffle_joint"], ["", "def", "InfoNCE_no_action_loss", "(", "model", ",", "s_t", ",", "a_t", ",", "r_t", ",", "s_t_p_1", ",", "args", ",", "s_t_p_k", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "    ", "device", "=", "args", "[", "'device'", "]", "\n", "score_fn", "=", "globals", "(", ")", "[", "args", "[", "'score_fn'", "]", "]", "\n", "\n", "local_encoder", "=", "model", ".", "local_encoder", "# Local encoder", "\n", "global_encoder", "=", "model", ".", "global_encoder", "# Global encoder", "\n", "\n", "# Extract features phi(s)", "\n", "s_t_local", "=", "local_encoder", "(", "s_t", ".", "float", "(", ")", ")", "\n", "s_t_global", "=", "global_encoder", "(", "s_t_local", ")", "\n", "s_t_p_1_local", "=", "local_encoder", "(", "s_t_p_1", ".", "float", "(", ")", ")", "\n", "s_t_p_1_global", "=", "global_encoder", "(", "s_t_p_1_local", ")", "\n", "if", "args", "[", "'score_fn'", "]", "not", "in", "(", "'nce_scores_log_softmax'", ",", "'nce_scores_log_softmax_expanded'", ")", ":", "\n", "        ", "s_t_p_k_local", "=", "local_encoder", "(", "shuffle_joint", "(", "s_t_p_1", ".", "float", "(", ")", ")", ")", "\n", "s_t_p_k_global", "=", "global_encoder", "(", "s_t_p_k_local", ")", "\n", "", "else", ":", "\n", "        ", "s_t_p_k_local", "=", "None", "\n", "s_t_p_k_global", "=", "None", "\n", "\n", "", "encoder_shape", "=", "list", "(", "model", ".", "psi_local_LL", "(", "s_t_p_1_local", ")", ".", "shape", ")", "\n", "\n", "# Local -> Local", "\n", "if", "args", "[", "'lambda_LL'", "]", "!=", "0", ":", "\n", "        ", "psi_local_LL_t", "=", "model", ".", "psi_local_LL", "\n", "psi_local_LL_t_p_1", "=", "model", ".", "psi_local_LL", "\n", "nce_L_L", ",", "reg_L_L", "=", "abstract_scores_action", "(", "psi_local_LL_t", ",", "psi_local_LL_t_p_1", ",", "\n", "s_t_local", ",", "\n", "s_t_p_1_local", ",", "\n", "s_t_p_k_local", ",", "\n", "None", ",", "\n", "encoder_shape", ",", "score_fn", ",", "device", ")", "\n", "", "else", ":", "\n", "        ", "nce_L_L", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "reg_L_L", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Local -> Global", "\n", "", "if", "args", "[", "'lambda_LG'", "]", "!=", "0", ":", "\n", "        ", "psi_local_LG", "=", "model", ".", "psi_local_LG", "\n", "psi_global_LG", "=", "model", ".", "psi_global_LG", "\n", "nce_L_G", ",", "reg_L_G", "=", "abstract_scores_action", "(", "psi_local_LG", ",", "psi_global_LG", ",", "\n", "s_t_local", ",", "\n", "s_t_p_1_global", ",", "\n", "s_t_p_k_global", ",", "\n", "None", ",", "\n", "encoder_shape", ",", "score_fn", ",", "device", ")", "\n", "", "else", ":", "\n", "        ", "nce_L_G", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "reg_L_G", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Global -> Local", "\n", "", "if", "args", "[", "'lambda_GL'", "]", "!=", "0", ":", "\n", "        ", "psi_local_GL", "=", "model", ".", "psi_local_GL", "\n", "psi_global_GL", "=", "model", ".", "psi_global_GL", "\n", "nce_G_L", ",", "reg_G_L", "=", "abstract_scores_action", "(", "psi_global_GL", ",", "psi_local_GL", ",", "\n", "s_t_global", ",", "\n", "s_t_p_1_local", ",", "\n", "s_t_p_k_local", ",", "\n", "None", ",", "\n", "encoder_shape", ",", "score_fn", ",", "device", ")", "\n", "", "else", ":", "\n", "        ", "nce_G_L", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "reg_G_L", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Global -> Global", "\n", "", "if", "args", "[", "'lambda_GG'", "]", "!=", "0", ":", "\n", "        ", "psi_global_GG_t", "=", "model", ".", "psi_global_GG", "\n", "psi_global_GG_t_p_1", "=", "model", ".", "psi_global_GG", "\n", "nce_G_G", ",", "reg_G_G", "=", "abstract_scores_action", "(", "psi_global_GG_t", ",", "psi_global_GG_t_p_1", ",", "\n", "s_t_global", ",", "\n", "s_t_p_1_global", ",", "\n", "s_t_p_k_global", ",", "\n", "None", ",", "\n", "encoder_shape", ",", "score_fn", ",", "device", ")", "\n", "", "else", ":", "\n", "        ", "nce_G_G", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "reg_G_G", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "return", "{", "'nce_L_L'", ":", "nce_L_L", ",", "\n", "'nce_L_G'", ":", "nce_L_G", ",", "\n", "'nce_G_L'", ":", "nce_G_L", ",", "\n", "'nce_G_G'", ":", "nce_G_G", ",", "\n", "'reg_L_L'", ":", "reg_L_L", ",", "\n", "'reg_L_G'", ":", "reg_L_G", ",", "\n", "'reg_G_L'", ":", "reg_G_L", ",", "\n", "'reg_G_G'", ":", "reg_G_G", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step": [[28, 43], ["int", "rlpyt_override.GymEnvWrapperFixed.env.step", "rlpyt_override.GymEnvWrapperFixed.observation_space.convert", "rlpyt.envs.gym.info_to_nt", "rlpyt.envs.base.EnvStep", "int.item", "rlpyt.envs.gym.info_to_nt.pop"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.step"], ["    ", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "a", "=", "int", "(", "a", ".", "item", "(", ")", ")", "\n", "o", ",", "r", ",", "d", ",", "info", "=", "self", ".", "env", ".", "step", "(", "a", ")", "\n", "obs", "=", "self", ".", "observation_space", ".", "convert", "(", "o", ")", "\n", "if", "self", ".", "_time_limit", ":", "\n", "            ", "if", "\"TimeLimit.truncated\"", "in", "info", ":", "\n", "                ", "info", "[", "\"timeout\"", "]", "=", "info", ".", "pop", "(", "\"TimeLimit.truncated\"", ")", "\n", "", "else", ":", "\n", "                ", "info", "[", "\"timeout\"", "]", "=", "False", "\n", "", "", "info", "=", "info_to_nt", "(", "info", ")", "\n", "try", ":", "\n", "            ", "info", "=", "info", ".", "coins", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "return", "EnvStep", "(", "obs", ",", "r", ",", "d", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.GymEnvWrapperFixed.seed": [[44, 46], ["None"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.WarpFrame.__init__": [[49, 78], ["gym.ObservationWrapper.__init__", "gym.spaces.Box", "len"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "width", "=", "84", ",", "height", "=", "84", ",", "grayscale", "=", "True", ",", "dict_space_key", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Warp frames to 84x84 as done in the Nature paper and later work.\n        If the environment uses dictionary observations, `dict_space_key` can be specified which indicates which\n        observation should be warped.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "_width", "=", "width", "\n", "self", ".", "_height", "=", "height", "\n", "self", ".", "_grayscale", "=", "grayscale", "\n", "self", ".", "_key", "=", "dict_space_key", "\n", "if", "self", ".", "_grayscale", ":", "\n", "            ", "num_colors", "=", "1", "\n", "", "else", ":", "\n", "            ", "num_colors", "=", "3", "\n", "\n", "", "new_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "num_colors", ",", "self", ".", "_height", ",", "self", ".", "_width", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", ",", "\n", ")", "\n", "if", "self", ".", "_key", "is", "None", ":", "\n", "            ", "original_space", "=", "self", ".", "observation_space", "\n", "self", ".", "observation_space", "=", "new_space", "\n", "", "else", ":", "\n", "            ", "original_space", "=", "self", ".", "observation_space", ".", "spaces", "[", "self", ".", "_key", "]", "\n", "self", ".", "observation_space", ".", "spaces", "[", "self", ".", "_key", "]", "=", "new_space", "\n", "", "assert", "original_space", ".", "dtype", "==", "np", ".", "uint8", "and", "len", "(", "original_space", ".", "shape", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.WarpFrame.observation": [[79, 103], ["obs.copy.copy.astype", "cv2.resize", "obs.copy.copy.transpose", "len", "cv2.cvtColor", "numpy.expand_dims", "obs.copy.copy.copy"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "obs", "=", "obs", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "len", "(", "obs", ".", "shape", ")", "==", "4", ":", "\n", "            ", "obs", "=", "obs", "[", "0", "]", "\n", "", "if", "self", ".", "_key", "is", "None", ":", "\n", "            ", "frame", "=", "obs", "\n", "", "else", ":", "\n", "            ", "frame", "=", "obs", "[", "self", ".", "_key", "]", "\n", "\n", "", "if", "self", ".", "_grayscale", ":", "\n", "            ", "frame", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "", "frame", "=", "cv2", ".", "resize", "(", "\n", "frame", ",", "(", "self", ".", "_width", ",", "self", ".", "_height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", "\n", ")", "\n", "if", "self", ".", "_grayscale", ":", "\n", "            ", "frame", "=", "np", ".", "expand_dims", "(", "frame", ",", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "_key", "is", "None", ":", "\n", "            ", "obs", "=", "frame", "\n", "", "else", ":", "\n", "            ", "obs", "=", "obs", ".", "copy", "(", ")", "\n", "obs", "[", "self", ".", "_key", "]", "=", "frame", "\n", "", "obs", "=", "obs", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__": [[105, 121], ["gym.ObservationWrapper.__init__", "numpy.array", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "dim_permutation", "=", "[", "0", ",", "1", ",", "2", "]", ")", ":", "\n", "        ", "\"\"\"\n        Warp frames to 84x84 as done in the Nature paper and later work.\n        If the environment uses dictionary observations, `dict_space_key` can be specified which indicates which\n        observation should be warped.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "dim_permutation", "=", "dim_permutation", "\n", "old_shape", "=", "np", ".", "array", "(", "self", ".", "observation_space", ".", "shape", ")", "\n", "new_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "old_shape", "[", "dim_permutation", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ",", "\n", ")", "\n", "self", ".", "observation_space", "=", "new_space", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.FramePermute.observation": [[122, 125], ["obs.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "obs", "=", "obs", ".", "transpose", "(", "*", "self", ".", "dim_permutation", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.make_env": [[126, 145], ["rlpyt_override.GymEnvWrapperFixed", "rlpyt.envs.gym.GymEnvWrapper", "kwargs[].split", "env_maker", "rlpyt.envs.gym.EnvInfoWrapper", "rlpyt_override.WarpFrame", "gym.make", "gym.make", "int"], "function", ["None"], ["", "", "def", "make_env", "(", "*", "args", ",", "info_example", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "info_example", "is", "None", ":", "\n", "        ", "if", "'procgen'", "in", "kwargs", "[", "'id'", "]", ":", "\n", "            ", "import", "re", "\n", "env_id", ",", "num_levels", "=", "kwargs", "[", "'id'", "]", ".", "split", "(", "'.'", ")", "# procgen-bigfish-v0.500 -> procgen-bigfish-v0 , 500 levels", "\n", "\n", "env_maker", "=", "lambda", "args", ":", "WarpFrame", "(", "\n", "gym", ".", "make", "(", "id", "=", "env_id", ",", "\n", "start_level", "=", "0", ",", "\n", "num_levels", "=", "int", "(", "num_levels", ")", ",", "\n", "paint_vel_info", "=", "True", ",", "\n", "distribution_mode", "=", "'easy'", ",", "\n", "use_sequential_levels", "=", "True", ")", ",", "\n", "width", "=", "80", ",", "height", "=", "104", ",", "grayscale", "=", "False", ")", "\n", "env", "=", "env_maker", "(", "None", ")", "\n", "", "return", "GymEnvWrapperFixed", "(", "env", ")", "# gym.make(*args, **kwargs)", "\n", "", "else", ":", "\n", "        ", "return", "GymEnvWrapper", "(", "EnvInfoWrapper", "(", "\n", "gym", ".", "make", "(", "*", "args", ",", "**", "kwargs", ")", ",", "info_example", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.evaluate_agent": [[146, 157], ["rlpyt.utils.logging.logger.log", "rlpyt_override..agent.eval_mode", "rlpyt_override..sampler.evaluate_agent", "time.time", "rlpyt.utils.logging.logger.log", "rlpyt_override..pbar.stop", "time.time"], "function", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.evaluate_agent", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log"], ["", "", "def", "evaluate_agent", "(", "self", ",", "itr", ")", ":", "\n", "        ", "self", ".", "itr", "=", "itr", "\n", "if", "itr", ">", "0", ":", "\n", "            ", "self", ".", "pbar", ".", "stop", "(", ")", "\n", "", "logger", ".", "log", "(", "\"Evaluating agent...\"", ")", "\n", "self", ".", "agent", ".", "eval_mode", "(", "itr", ")", "# Might be agent in sampler.", "\n", "eval_time", "=", "-", "time", ".", "time", "(", ")", "\n", "traj_infos", "=", "self", ".", "sampler", ".", "evaluate_agent", "(", "itr", ")", "\n", "eval_time", "+=", "time", ".", "time", "(", ")", "\n", "logger", ".", "log", "(", "\"Evaluation runs complete.\"", ")", "\n", "return", "traj_infos", ",", "eval_time", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override._log_infos": [[158, 178], ["rlpyt_override.._opt_infos.items", "list", "rlpyt_override..TF_logger.log", "k.startswith", "rlpyt.utils.logging.logger.record_tabular_misc_stat", "rlpyt.utils.logging.logger.record_tabular_misc_stat", "rlpyt.utils.logging.logger.record_tabular_misc_stat", "numpy.mean", "x.item"], "function", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log"], ["", "def", "_log_infos", "(", "self", ",", "traj_infos", "=", "None", ")", ":", "\n", "    ", "if", "traj_infos", "is", "None", ":", "\n", "        ", "traj_infos", "=", "self", ".", "_traj_infos", "\n", "", "if", "traj_infos", ":", "\n", "        ", "for", "k", "in", "traj_infos", "[", "0", "]", ":", "\n", "            ", "if", "not", "k", ".", "startswith", "(", "\"_\"", ")", ":", "\n", "                ", "logger", ".", "record_tabular_misc_stat", "(", "k", ",", "\n", "[", "info", "[", "k", "]", "for", "info", "in", "traj_infos", "]", ")", "\n", "\n", "", "", "", "if", "self", ".", "_opt_infos", ":", "\n", "        ", "for", "k", ",", "v", "in", "self", ".", "_opt_infos", ".", "items", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "logger", ".", "record_tabular_misc_stat", "(", "k", ",", "v", ")", "\n", "", "except", ":", "\n", "                ", "v", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "v", "]", "\n", "logger", ".", "record_tabular_misc_stat", "(", "k", ",", "v", ")", "\n", "\n", "", "self", ".", "TF_logger", ".", "log", "(", "{", "'name'", ":", "k", ",", "'value'", ":", "np", ".", "mean", "(", "v", ")", ",", "'step'", ":", "self", ".", "cum_steps", "}", ")", "\n", "\n", "", "", "self", ".", "_opt_infos", "=", "{", "k", ":", "list", "(", ")", "for", "k", "in", "self", ".", "_opt_infos", "}", "# (reset)", "\n", "\n"]], "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override.log_diagnostics_custom": [[180, 248], ["sum", "rlpyt.utils.logging.logger.record_tabular", "rlpyt.utils.logging.logger.record_tabular", "rlpyt.utils.logging.logger.record_tabular", "rlpyt_override..save_itr_snapshot", "time.time", "rlpyt.utils.logging.logger.record_tabular", "rlpyt.utils.logging.logger.record_tabular", "rlpyt.utils.logging.logger.record_tabular", "rlpyt.utils.logging.logger.record_tabular", "rlpyt.utils.logging.logger.record_tabular", "rlpyt.utils.logging.logger.record_tabular", "rlpyt.utils.logging.logger.record_tabular", "rlpyt.utils.logging.logger.record_tabular", "rlpyt.utils.logging.logger.record_tabular", "rlpyt_override.._log_infos", "rlpyt.utils.logging.logger.dump_tabular", "rlpyt_override..TF_logger.log", "rlpyt_override..TF_logger.log", "rlpyt_override..TF_logger.log", "rlpyt_override..TF_logger.log", "rlpyt_override..TF_logger.log", "rlpyt_override..TF_logger.log", "rlpyt_override..TF_logger.log", "rlpyt_override..TF_logger.log", "rlpyt_override..TF_logger.log", "pandas.DataFrame().to_dict", "pd.DataFrame().to_dict.items", "rlpyt.utils.logging.logger.log", "len", "rlpyt_override..pbar.stop", "float", "float", "rlpyt.utils.logging.logger.record_tabular", "rlpyt.utils.logging.logger.log", "rlpyt.utils.prog_bar.ProgBarCounter", "rlpyt_override..TF_logger.log", "pandas.DataFrame", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.rlpyt_override._log_infos", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log", "home.repos.pwc.inspect_result.bmazoure_DRIML.scripts.loggers.TextLogger.log"], ["", "def", "log_diagnostics_custom", "(", "self", ",", "itr", ",", "eval_traj_infos", "=", "None", ",", "eval_time", "=", "0", ")", ":", "\n", "    ", "if", "not", "eval_traj_infos", ":", "\n", "        ", "logger", ".", "log", "(", "\"WARNING: had no complete trajectories in eval.\"", ")", "\n", "", "steps_in_eval", "=", "sum", "(", "[", "info", "[", "\"Length\"", "]", "for", "info", "in", "eval_traj_infos", "]", ")", "\n", "logger", ".", "record_tabular", "(", "'StepsInEval'", ",", "steps_in_eval", ")", "\n", "logger", ".", "record_tabular", "(", "'TrajsInEval'", ",", "len", "(", "eval_traj_infos", ")", ")", "\n", "self", ".", "_cum_eval_time", "+=", "eval_time", "\n", "logger", ".", "record_tabular", "(", "'CumEvalTime'", ",", "self", ".", "_cum_eval_time", ")", "\n", "\n", "if", "itr", ">", "0", ":", "\n", "        ", "self", ".", "pbar", ".", "stop", "(", ")", "\n", "", "self", ".", "save_itr_snapshot", "(", "itr", ")", "\n", "new_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_cum_time", "=", "new_time", "-", "self", ".", "_start_time", "\n", "train_time_elapsed", "=", "new_time", "-", "self", ".", "_last_time", "-", "eval_time", "\n", "new_updates", "=", "self", ".", "algo", ".", "update_counter", "-", "self", ".", "_last_update_counter", "\n", "new_samples", "=", "(", "self", ".", "sampler", ".", "batch_size", "*", "self", ".", "world_size", "*", "\n", "self", ".", "log_interval_itrs", ")", "\n", "updates_per_second", "=", "(", "float", "(", "'nan'", ")", "if", "itr", "==", "0", "else", "\n", "new_updates", "/", "train_time_elapsed", ")", "\n", "samples_per_second", "=", "(", "float", "(", "'nan'", ")", "if", "itr", "==", "0", "else", "\n", "new_samples", "/", "train_time_elapsed", ")", "\n", "replay_ratio", "=", "(", "new_updates", "*", "self", ".", "algo", ".", "batch_size", "*", "self", ".", "world_size", "/", "\n", "new_samples", ")", "\n", "cum_replay_ratio", "=", "(", "self", ".", "algo", ".", "batch_size", "*", "self", ".", "algo", ".", "update_counter", "/", "\n", "(", "(", "itr", "+", "1", ")", "*", "self", ".", "sampler", ".", "batch_size", ")", ")", "# world_size cancels.", "\n", "cum_steps", "=", "(", "itr", "+", "1", ")", "*", "self", ".", "sampler", ".", "batch_size", "*", "self", ".", "world_size", "\n", "\n", "self", ".", "cum_steps", "=", "cum_steps", "\n", "\n", "if", "self", ".", "_eval", ":", "\n", "        ", "logger", ".", "record_tabular", "(", "'CumTrainTime'", ",", "\n", "self", ".", "_cum_time", "-", "self", ".", "_cum_eval_time", ")", "# Already added new eval_time.", "\n", "", "logger", ".", "record_tabular", "(", "'Iteration'", ",", "itr", ")", "\n", "logger", ".", "record_tabular", "(", "'CumTime (s)'", ",", "self", ".", "_cum_time", ")", "\n", "logger", ".", "record_tabular", "(", "'CumSteps'", ",", "cum_steps", ")", "\n", "logger", ".", "record_tabular", "(", "'CumCompletedTrajs'", ",", "self", ".", "_cum_completed_trajs", ")", "\n", "logger", ".", "record_tabular", "(", "'CumUpdates'", ",", "self", ".", "algo", ".", "update_counter", ")", "\n", "logger", ".", "record_tabular", "(", "'StepsPerSecond'", ",", "samples_per_second", ")", "\n", "logger", ".", "record_tabular", "(", "'UpdatesPerSecond'", ",", "updates_per_second", ")", "\n", "logger", ".", "record_tabular", "(", "'ReplayRatio'", ",", "replay_ratio", ")", "\n", "logger", ".", "record_tabular", "(", "'CumReplayRatio'", ",", "cum_replay_ratio", ")", "\n", "self", ".", "_log_infos", "(", "eval_traj_infos", ")", "\n", "logger", ".", "dump_tabular", "(", "with_prefix", "=", "False", ")", "\n", "\n", "self", ".", "_last_time", "=", "new_time", "\n", "self", ".", "_last_update_counter", "=", "self", ".", "algo", ".", "update_counter", "\n", "if", "itr", "<", "self", ".", "n_itr", "-", "1", ":", "\n", "        ", "logger", ".", "log", "(", "f\"Optimizing over {self.log_interval_itrs} iterations.\"", ")", "\n", "self", ".", "pbar", "=", "ProgBarCounter", "(", "self", ".", "log_interval_itrs", ")", "\n", "\n", "## TF log", "\n", "", "self", ".", "TF_logger", ".", "log", "(", "{", "'name'", ":", "'Iteration'", ",", "'value'", ":", "itr", ",", "'step'", ":", "cum_steps", "}", ")", "\n", "self", ".", "TF_logger", ".", "log", "(", "{", "'name'", ":", "'CumTime (s)'", ",", "'value'", ":", "self", ".", "_cum_time", ",", "'step'", ":", "cum_steps", "}", ")", "\n", "\n", "self", ".", "TF_logger", ".", "log", "(", "{", "'name'", ":", "'CumSteps'", ",", "'value'", ":", "cum_steps", ",", "'step'", ":", "cum_steps", "}", ")", "\n", "self", ".", "TF_logger", ".", "log", "(", "{", "'name'", ":", "'CumCompletedTrajs'", ",", "'value'", ":", "self", ".", "_cum_completed_trajs", ",", "'step'", ":", "cum_steps", "}", ")", "\n", "self", ".", "TF_logger", ".", "log", "(", "{", "'name'", ":", "'CumUpdates'", ",", "'value'", ":", "self", ".", "algo", ".", "update_counter", ",", "'step'", ":", "cum_steps", "}", ")", "\n", "self", ".", "TF_logger", ".", "log", "(", "{", "'name'", ":", "'StepsPerSecond'", ",", "'value'", ":", "samples_per_second", ",", "'step'", ":", "cum_steps", "}", ")", "\n", "self", ".", "TF_logger", ".", "log", "(", "{", "'name'", ":", "'UpdatesPerSecond'", ",", "'value'", ":", "updates_per_second", ",", "'step'", ":", "cum_steps", "}", ")", "\n", "\n", "self", ".", "TF_logger", ".", "log", "(", "{", "'name'", ":", "'ReplayRatio'", ",", "'value'", ":", "replay_ratio", ",", "'step'", ":", "cum_steps", "}", ")", "\n", "self", ".", "TF_logger", ".", "log", "(", "{", "'name'", ":", "'CumReplayRatio'", ",", "'value'", ":", "cum_replay_ratio", ",", "'step'", ":", "cum_steps", "}", ")", "\n", "\n", "DL", "=", "pd", ".", "DataFrame", "(", "eval_traj_infos", ")", ".", "to_dict", "(", "'list'", ")", "\n", "\n", "for", "k", ",", "v", "in", "DL", ".", "items", "(", ")", ":", "\n", "        ", "self", ".", "TF_logger", ".", "log", "(", "{", "'name'", ":", "k", ",", "'value'", ":", "np", ".", "mean", "(", "v", ")", ",", "'step'", ":", "cum_steps", "}", ")", "", "", "", ""]]}