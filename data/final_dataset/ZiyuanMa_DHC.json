{"home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.__init__": [[7, 16], ["numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "capacity", ":", "int", ")", ":", "\n", "        ", "layer", "=", "1", "\n", "while", "2", "**", "(", "layer", "-", "1", ")", "<", "capacity", ":", "\n", "            ", "layer", "+=", "1", "\n", "", "assert", "2", "**", "(", "layer", "-", "1", ")", "==", "capacity", ",", "'capacity only allow n**2 size'", "\n", "self", ".", "layer", "=", "layer", "\n", "self", ".", "tree", "=", "np", ".", "zeros", "(", "2", "**", "layer", "-", "1", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.sum": [[17, 20], ["numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.sum", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.sum"], ["", "def", "sum", "(", "self", ")", ":", "\n", "        ", "assert", "np", ".", "sum", "(", "self", ".", "tree", "[", "-", "self", ".", "capacity", ":", "]", ")", "-", "self", ".", "tree", "[", "0", "]", "<", "0.1", ",", "'sum is {} but root is {}'", ".", "format", "(", "np", ".", "sum", "(", "self", ".", "tree", "[", "-", "self", ".", "capacity", ":", "]", ")", ",", "self", ".", "tree", "[", "0", "]", ")", "\n", "return", "self", ".", "tree", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.__getitem__": [[21, 25], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "int", ")", ":", "\n", "        ", "assert", "0", "<=", "idx", "<", "self", ".", "capacity", "\n", "\n", "return", "self", ".", "tree", "[", "self", ".", "capacity", "-", "1", "+", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.batch_sample": [[26, 45], ["numpy.zeros", "range", "numpy.all", "numpy.arange", "numpy.random.uniform", "numpy.where", "numpy.where", "numpy.all", "numpy.all"], "methods", ["None"], ["", "def", "batch_sample", "(", "self", ",", "batch_size", ":", "int", ")", ":", "\n", "        ", "p_sum", "=", "self", ".", "tree", "[", "0", "]", "\n", "interval", "=", "p_sum", "/", "batch_size", "\n", "\n", "prefixsums", "=", "np", ".", "arange", "(", "0", ",", "p_sum", ",", "interval", ",", "dtype", "=", "np", ".", "float64", ")", "+", "np", ".", "random", ".", "uniform", "(", "0", ",", "interval", ",", "batch_size", ")", "\n", "\n", "idxes", "=", "np", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "layer", "-", "1", ")", ":", "\n", "            ", "nodes", "=", "self", ".", "tree", "[", "idxes", "*", "2", "+", "1", "]", "\n", "idxes", "=", "np", ".", "where", "(", "prefixsums", "<", "nodes", ",", "idxes", "*", "2", "+", "1", ",", "idxes", "*", "2", "+", "2", ")", "\n", "prefixsums", "=", "np", ".", "where", "(", "idxes", "%", "2", "==", "0", ",", "prefixsums", "-", "self", ".", "tree", "[", "idxes", "-", "1", "]", ",", "prefixsums", ")", "\n", "\n", "", "priorities", "=", "self", ".", "tree", "[", "idxes", "]", "\n", "idxes", "-=", "self", ".", "capacity", "-", "1", "\n", "\n", "assert", "np", ".", "all", "(", "priorities", ">", "0", ")", ",", "'idx: {}, priority: {}'", ".", "format", "(", "idxes", ",", "priorities", ")", "\n", "assert", "np", ".", "all", "(", "idxes", ">=", "0", ")", "and", "np", ".", "all", "(", "idxes", "<", "self", ".", "capacity", ")", "\n", "\n", "return", "idxes", ",", "priorities", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.batch_update": [[46, 57], ["range", "numpy.unique", "numpy.sum", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.sum", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.sum"], ["", "def", "batch_update", "(", "self", ",", "idxes", ":", "np", ".", "ndarray", ",", "priorities", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "idxes", "+=", "self", ".", "capacity", "-", "1", "\n", "self", ".", "tree", "[", "idxes", "]", "=", "priorities", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "layer", "-", "1", ")", ":", "\n", "            ", "idxes", "=", "(", "idxes", "-", "1", ")", "//", "2", "\n", "idxes", "=", "np", ".", "unique", "(", "idxes", ")", "\n", "self", ".", "tree", "[", "idxes", "]", "=", "self", ".", "tree", "[", "2", "*", "idxes", "+", "1", "]", "+", "self", ".", "tree", "[", "2", "*", "idxes", "+", "2", "]", "\n", "\n", "# check", "\n", "", "assert", "np", ".", "sum", "(", "self", ".", "tree", "[", "-", "self", ".", "capacity", ":", "]", ")", "-", "self", ".", "tree", "[", "0", "]", "<", "0.1", ",", "'sum is {} but root is {}'", ".", "format", "(", "np", ".", "sum", "(", "self", ".", "tree", "[", "-", "self", ".", "capacity", ":", "]", ")", ",", "self", ".", "tree", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.LocalBuffer.__init__": [[62, 83], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "actor_id", ":", "int", ",", "num_agents", ":", "int", ",", "map_len", ":", "int", ",", "init_obs", ":", "np", ".", "ndarray", ",", "\n", "capacity", ":", "int", "=", "configs", ".", "max_episode_length", ",", "\n", "obs_shape", "=", "configs", ".", "obs_shape", ",", "hidden_dim", "=", "configs", ".", "hidden_dim", ",", "action_dim", "=", "configs", ".", "action_dim", ")", ":", "\n", "        ", "\"\"\"\n        buffer for each episode\n        \"\"\"", "\n", "self", ".", "actor_id", "=", "actor_id", "\n", "self", ".", "num_agents", "=", "num_agents", "\n", "self", ".", "map_len", "=", "map_len", "\n", "\n", "self", ".", "obs_buf", "=", "np", ".", "zeros", "(", "(", "capacity", "+", "1", ",", "num_agents", ",", "*", "obs_shape", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "self", ".", "act_buf", "=", "np", ".", "zeros", "(", "(", "capacity", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "rew_buf", "=", "np", ".", "zeros", "(", "(", "capacity", ")", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "self", ".", "hid_buf", "=", "np", ".", "zeros", "(", "(", "capacity", ",", "num_agents", ",", "hidden_dim", ")", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "self", ".", "comm_mask_buf", "=", "np", ".", "zeros", "(", "(", "capacity", "+", "1", ",", "num_agents", ",", "num_agents", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "self", ".", "q_buf", "=", "np", ".", "zeros", "(", "(", "capacity", "+", "1", ",", "action_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "size", "=", "0", "\n", "\n", "self", ".", "obs_buf", "[", "0", "]", "=", "init_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.LocalBuffer.__len__": [[84, 86], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.LocalBuffer.add": [[87, 98], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "q_val", ":", "np", ".", "ndarray", ",", "action", ":", "int", ",", "reward", ":", "float", ",", "next_obs", ":", "np", ".", "ndarray", ",", "hidden", ":", "np", ".", "ndarray", ",", "comm_mask", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "assert", "self", ".", "size", "<", "self", ".", "capacity", "\n", "\n", "self", ".", "act_buf", "[", "self", ".", "size", "]", "=", "action", "\n", "self", ".", "rew_buf", "[", "self", ".", "size", "]", "=", "reward", "\n", "self", ".", "obs_buf", "[", "self", ".", "size", "+", "1", "]", "=", "next_obs", "\n", "self", ".", "q_buf", "[", "self", ".", "size", "]", "=", "q_val", "\n", "self", ".", "hid_buf", "[", "self", ".", "size", "]", "=", "hidden", "\n", "self", ".", "comm_mask_buf", "[", "self", ".", "size", "]", "=", "comm_mask", "\n", "\n", "self", ".", "size", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.LocalBuffer.finish": [[99, 124], ["numpy.zeros", "numpy.max", "numpy.abs().clip", "buffer.LocalBuffer.rew_buf.tolist", "numpy.convolve", "numpy.abs", "range", "numpy.arange", "range"], "methods", ["None"], ["", "def", "finish", "(", "self", ",", "last_q_val", "=", "None", ",", "last_comm_mask", "=", "None", ")", ":", "\n", "# last q value is None if done", "\n", "        ", "if", "last_q_val", "is", "None", ":", "\n", "            ", "done", "=", "True", "\n", "", "else", ":", "\n", "            ", "done", "=", "False", "\n", "self", ".", "q_buf", "[", "self", ".", "size", "]", "=", "last_q_val", "\n", "self", ".", "comm_mask_buf", "[", "self", ".", "size", "]", "=", "last_comm_mask", "\n", "\n", "", "self", ".", "obs_buf", "=", "self", ".", "obs_buf", "[", ":", "self", ".", "size", "+", "1", "]", "\n", "self", ".", "act_buf", "=", "self", ".", "act_buf", "[", ":", "self", ".", "size", "]", "\n", "self", ".", "rew_buf", "=", "self", ".", "rew_buf", "[", ":", "self", ".", "size", "]", "\n", "self", ".", "hid_buf", "=", "self", ".", "hid_buf", "[", ":", "self", ".", "size", "]", "\n", "self", ".", "q_buf", "=", "self", ".", "q_buf", "[", ":", "self", ".", "size", "+", "1", "]", "\n", "self", ".", "comm_mask_buf", "=", "self", ".", "comm_mask_buf", "[", ":", "self", ".", "size", "+", "1", "]", "\n", "\n", "# caculate td errors for prioritized experience replay", "\n", "td_errors", "=", "np", ".", "zeros", "(", "self", ".", "capacity", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "q_max", "=", "np", ".", "max", "(", "self", ".", "q_buf", "[", ":", "self", ".", "size", "]", ",", "axis", "=", "1", ")", "\n", "ret", "=", "self", ".", "rew_buf", ".", "tolist", "(", ")", "+", "[", "0", "for", "_", "in", "range", "(", "configs", ".", "forward_steps", "-", "1", ")", "]", "\n", "reward", "=", "np", ".", "convolve", "(", "ret", ",", "[", "0.99", "**", "(", "configs", ".", "forward_steps", "-", "1", "-", "i", ")", "for", "i", "in", "range", "(", "configs", ".", "forward_steps", ")", "]", ",", "'valid'", ")", "+", "q_max", "\n", "q_val", "=", "self", ".", "q_buf", "[", "np", ".", "arange", "(", "self", ".", "size", ")", ",", "self", ".", "act_buf", "]", "\n", "td_errors", "[", ":", "self", ".", "size", "]", "=", "np", ".", "abs", "(", "reward", "-", "q_val", ")", ".", "clip", "(", "1e-4", ")", "\n", "\n", "return", "self", ".", "actor_id", ",", "self", ".", "num_agents", ",", "self", ".", "map_len", ",", "self", ".", "obs_buf", ",", "self", ".", "act_buf", ",", "self", ".", "rew_buf", ",", "self", ".", "hid_buf", ",", "td_errors", ",", "done", ",", "self", ".", "size", ",", "self", ".", "comm_mask_buf", "", "", "", ""]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.GlobalBuffer.__init__": [[21, 48], ["buffer.SumTree", "threading.Lock", "ray.put", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "episode_capacity", "=", "configs", ".", "episode_capacity", ",", "local_buffer_capacity", "=", "configs", ".", "max_episode_length", ",", "\n", "init_env_settings", "=", "configs", ".", "init_env_settings", ",", "max_comm_agents", "=", "configs", ".", "max_comm_agents", ",", "\n", "alpha", "=", "configs", ".", "prioritized_replay_alpha", ",", "beta", "=", "configs", ".", "prioritized_replay_beta", ")", ":", "\n", "\n", "        ", "self", ".", "capacity", "=", "episode_capacity", "\n", "self", ".", "local_buffer_capacity", "=", "local_buffer_capacity", "\n", "self", ".", "size", "=", "0", "\n", "self", ".", "ptr", "=", "0", "\n", "\n", "# prioritized experience replay", "\n", "self", ".", "priority_tree", "=", "SumTree", "(", "episode_capacity", "*", "local_buffer_capacity", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "batched_data", "=", "[", "]", "\n", "self", ".", "stat_dict", "=", "{", "init_env_settings", ":", "[", "]", "}", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "env_settings_set", "=", "ray", ".", "put", "(", "[", "init_env_settings", "]", ")", "\n", "\n", "self", ".", "obs_buf", "=", "np", ".", "zeros", "(", "(", "(", "local_buffer_capacity", "+", "1", ")", "*", "episode_capacity", ",", "configs", ".", "max_num_agents", ",", "*", "configs", ".", "obs_shape", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "self", ".", "act_buf", "=", "np", ".", "zeros", "(", "(", "local_buffer_capacity", "*", "episode_capacity", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "rew_buf", "=", "np", ".", "zeros", "(", "(", "local_buffer_capacity", "*", "episode_capacity", ")", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "self", ".", "hid_buf", "=", "np", ".", "zeros", "(", "(", "local_buffer_capacity", "*", "episode_capacity", ",", "configs", ".", "max_num_agents", ",", "configs", ".", "hidden_dim", ")", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "self", ".", "done_buf", "=", "np", ".", "zeros", "(", "episode_capacity", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "self", ".", "size_buf", "=", "np", ".", "zeros", "(", "episode_capacity", ",", "dtype", "=", "np", ".", "uint", ")", "\n", "self", ".", "comm_mask_buf", "=", "np", ".", "zeros", "(", "(", "(", "local_buffer_capacity", "+", "1", ")", "*", "episode_capacity", ",", "configs", ".", "max_num_agents", ",", "configs", ".", "max_num_agents", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.GlobalBuffer.__len__": [[50, 52], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.GlobalBuffer.run": [[53, 56], ["threading.Thread", "worker.GlobalBuffer.background_thread.start"], "methods", ["None"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "background_thread", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "prepare_data", ",", "daemon", "=", "True", ")", "\n", "self", ".", "background_thread", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.GlobalBuffer.prepare_data": [[57, 65], ["len", "worker.GlobalBuffer.sample_batch", "ray.put", "worker.GlobalBuffer.batched_data.append", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.GlobalBuffer.sample_batch"], ["", "def", "prepare_data", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "if", "len", "(", "self", ".", "batched_data", ")", "<=", "4", ":", "\n", "                ", "data", "=", "self", ".", "sample_batch", "(", "configs", ".", "batch_size", ")", "\n", "data_id", "=", "ray", ".", "put", "(", "data", ")", "\n", "self", ".", "batched_data", ".", "append", "(", "data_id", ")", "\n", "", "else", ":", "\n", "                ", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.GlobalBuffer.get_data": [[66, 75], ["len", "print", "worker.GlobalBuffer.sample_batch", "ray.put", "worker.GlobalBuffer.batched_data.pop"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.GlobalBuffer.sample_batch"], ["", "", "", "def", "get_data", "(", "self", ")", ":", "\n", "\n", "        ", "if", "len", "(", "self", ".", "batched_data", ")", "==", "0", ":", "\n", "            ", "print", "(", "'no prepared data'", ")", "\n", "data", "=", "self", ".", "sample_batch", "(", "configs", ".", "batch_size", ")", "\n", "data_id", "=", "ray", ".", "put", "(", "data", ")", "\n", "return", "data_id", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "batched_data", ".", "pop", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.GlobalBuffer.add": [[76, 110], ["numpy.arange", "worker.GlobalBuffer.size_buf[].item", "worker.GlobalBuffer.priority_tree.batch_update", "worker.GlobalBuffer.stat_dict[].append", "len", "worker.GlobalBuffer.stat_dict[].pop"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.batch_update"], ["", "", "def", "add", "(", "self", ",", "data", ":", "Tuple", ")", ":", "\n", "        ", "'''\n        data: actor_id 0, num_agents 1, map_len 2, obs_buf 3, act_buf 4, rew_buf 5, hid_buf 6, td_errors 7, done 8, size 9, comm_mask 10\n        '''", "\n", "if", "data", "[", "0", "]", ">=", "12", ":", "\n", "            ", "stat_key", "=", "(", "data", "[", "1", "]", ",", "data", "[", "2", "]", ")", "\n", "\n", "if", "stat_key", "in", "self", ".", "stat_dict", ":", "\n", "\n", "                ", "self", ".", "stat_dict", "[", "stat_key", "]", ".", "append", "(", "data", "[", "8", "]", ")", "\n", "if", "len", "(", "self", ".", "stat_dict", "[", "stat_key", "]", ")", "==", "201", ":", "\n", "                    ", "self", ".", "stat_dict", "[", "stat_key", "]", ".", "pop", "(", "0", ")", "\n", "\n", "", "", "", "with", "self", ".", "lock", ":", "\n", "\n", "            ", "idxes", "=", "np", ".", "arange", "(", "self", ".", "ptr", "*", "self", ".", "local_buffer_capacity", ",", "(", "self", ".", "ptr", "+", "1", ")", "*", "self", ".", "local_buffer_capacity", ")", "\n", "start_idx", "=", "self", ".", "ptr", "*", "self", ".", "local_buffer_capacity", "\n", "# update buffer size", "\n", "self", ".", "size", "-=", "self", ".", "size_buf", "[", "self", ".", "ptr", "]", ".", "item", "(", ")", "\n", "self", ".", "size", "+=", "data", "[", "9", "]", "\n", "self", ".", "counter", "+=", "data", "[", "9", "]", "\n", "\n", "self", ".", "priority_tree", ".", "batch_update", "(", "idxes", ",", "data", "[", "7", "]", "**", "self", ".", "alpha", ")", "\n", "\n", "self", ".", "obs_buf", "[", "start_idx", "+", "self", ".", "ptr", ":", "start_idx", "+", "self", ".", "ptr", "+", "data", "[", "9", "]", "+", "1", ",", ":", "data", "[", "1", "]", "]", "=", "data", "[", "3", "]", "\n", "self", ".", "act_buf", "[", "start_idx", ":", "start_idx", "+", "data", "[", "9", "]", "]", "=", "data", "[", "4", "]", "\n", "self", ".", "rew_buf", "[", "start_idx", ":", "start_idx", "+", "data", "[", "9", "]", "]", "=", "data", "[", "5", "]", "\n", "self", ".", "hid_buf", "[", "start_idx", ":", "start_idx", "+", "data", "[", "9", "]", ",", ":", "data", "[", "1", "]", "]", "=", "data", "[", "6", "]", "\n", "self", ".", "done_buf", "[", "self", ".", "ptr", "]", "=", "data", "[", "8", "]", "\n", "self", ".", "size_buf", "[", "self", ".", "ptr", "]", "=", "data", "[", "9", "]", "\n", "self", ".", "comm_mask_buf", "[", "start_idx", "+", "self", ".", "ptr", ":", "start_idx", "+", "self", ".", "ptr", "+", "data", "[", "9", "]", "+", "1", "]", "=", "0", "\n", "self", ".", "comm_mask_buf", "[", "start_idx", "+", "self", ".", "ptr", ":", "start_idx", "+", "self", ".", "ptr", "+", "data", "[", "9", "]", "+", "1", ",", ":", "data", "[", "1", "]", ",", ":", "data", "[", "1", "]", "]", "=", "data", "[", "10", "]", "\n", "\n", "self", ".", "ptr", "=", "(", "self", ".", "ptr", "+", "1", ")", "%", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.GlobalBuffer.sample_batch": [[111, 187], ["worker.GlobalBuffer.priority_tree.batch_sample", "zip", "numpy.min", "numpy.power", "idxes.tolist", "global_idxes.tolist", "local_idxes.tolist", "min", "min", "range", "b_obs.append", "b_action.append", "b_reward.append", "b_done.append", "b_steps.append", "b_seq_len.append", "b_hidden.append", "b_comm_mask.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.HalfTensor().unsqueeze", "torch.HalfTensor().unsqueeze", "torch.HalfTensor().unsqueeze", "torch.HalfTensor().unsqueeze", "torch.HalfTensor().unsqueeze", "torch.HalfTensor().unsqueeze", "torch.HalfTensor().unsqueeze", "torch.HalfTensor().unsqueeze", "torch.HalfTensor().unsqueeze", "torch.HalfTensor().unsqueeze", "torch.HalfTensor().unsqueeze", "torch.HalfTensor().unsqueeze", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "numpy.zeros", "numpy.pad", "numpy.pad", "numpy.stack().astype", "numpy.concatenate", "numpy.stack", "worker.GlobalBuffer.size_buf[].item", "numpy.zeros", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.HalfTensor", "torch.HalfTensor", "torch.HalfTensor", "torch.HalfTensor", "torch.HalfTensor", "torch.HalfTensor", "torch.HalfTensor", "torch.HalfTensor", "torch.HalfTensor", "torch.HalfTensor", "torch.HalfTensor", "torch.HalfTensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.batch_sample"], ["", "", "def", "sample_batch", "(", "self", ",", "batch_size", ":", "int", ")", "->", "Tuple", ":", "\n", "\n", "        ", "b_obs", ",", "b_action", ",", "b_reward", ",", "b_done", ",", "b_steps", ",", "b_seq_len", ",", "b_comm_mask", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "idxes", ",", "priorities", "=", "[", "]", ",", "[", "]", "\n", "b_hidden", "=", "[", "]", "\n", "\n", "with", "self", ".", "lock", ":", "\n", "\n", "            ", "idxes", ",", "priorities", "=", "self", ".", "priority_tree", ".", "batch_sample", "(", "batch_size", ")", "\n", "global_idxes", "=", "idxes", "//", "self", ".", "local_buffer_capacity", "\n", "local_idxes", "=", "idxes", "%", "self", ".", "local_buffer_capacity", "\n", "\n", "for", "idx", ",", "global_idx", ",", "local_idx", "in", "zip", "(", "idxes", ".", "tolist", "(", ")", ",", "global_idxes", ".", "tolist", "(", ")", ",", "local_idxes", ".", "tolist", "(", ")", ")", ":", "\n", "\n", "                ", "assert", "local_idx", "<", "self", ".", "size_buf", "[", "global_idx", "]", ",", "'index is {} but size is {}'", ".", "format", "(", "local_idx", ",", "self", ".", "size_buf", "[", "global_idx", "]", ")", "\n", "\n", "steps", "=", "min", "(", "configs", ".", "forward_steps", ",", "(", "self", ".", "size_buf", "[", "global_idx", "]", ".", "item", "(", ")", "-", "local_idx", ")", ")", "\n", "seq_len", "=", "min", "(", "local_idx", "+", "1", ",", "configs", ".", "seq_len", ")", "\n", "\n", "if", "local_idx", "<", "configs", ".", "seq_len", "-", "1", ":", "\n", "                    ", "obs", "=", "self", ".", "obs_buf", "[", "global_idx", "*", "(", "self", ".", "local_buffer_capacity", "+", "1", ")", ":", "idx", "+", "global_idx", "+", "1", "+", "steps", "]", "\n", "comm_mask", "=", "self", ".", "comm_mask_buf", "[", "global_idx", "*", "(", "self", ".", "local_buffer_capacity", "+", "1", ")", ":", "idx", "+", "global_idx", "+", "1", "+", "steps", "]", "\n", "hidden", "=", "np", ".", "zeros", "(", "(", "configs", ".", "max_num_agents", ",", "configs", ".", "hidden_dim", ")", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "", "elif", "local_idx", "==", "configs", ".", "seq_len", "-", "1", ":", "\n", "                    ", "obs", "=", "self", ".", "obs_buf", "[", "idx", "+", "global_idx", "+", "1", "-", "configs", ".", "seq_len", ":", "idx", "+", "global_idx", "+", "1", "+", "steps", "]", "\n", "comm_mask", "=", "self", ".", "comm_mask_buf", "[", "global_idx", "*", "(", "self", ".", "local_buffer_capacity", "+", "1", ")", ":", "idx", "+", "global_idx", "+", "1", "+", "steps", "]", "\n", "hidden", "=", "np", ".", "zeros", "(", "(", "configs", ".", "max_num_agents", ",", "configs", ".", "hidden_dim", ")", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "", "else", ":", "\n", "                    ", "obs", "=", "self", ".", "obs_buf", "[", "idx", "+", "global_idx", "+", "1", "-", "configs", ".", "seq_len", ":", "idx", "+", "global_idx", "+", "1", "+", "steps", "]", "\n", "comm_mask", "=", "self", ".", "comm_mask_buf", "[", "idx", "+", "global_idx", "+", "1", "-", "configs", ".", "seq_len", ":", "idx", "+", "global_idx", "+", "1", "+", "steps", "]", "\n", "hidden", "=", "self", ".", "hid_buf", "[", "idx", "-", "configs", ".", "seq_len", "]", "\n", "\n", "", "if", "obs", ".", "shape", "[", "0", "]", "<", "configs", ".", "seq_len", "+", "configs", ".", "forward_steps", ":", "\n", "                    ", "pad_len", "=", "configs", ".", "seq_len", "+", "configs", ".", "forward_steps", "-", "obs", ".", "shape", "[", "0", "]", "\n", "obs", "=", "np", ".", "pad", "(", "obs", ",", "(", "(", "0", ",", "pad_len", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "comm_mask", "=", "np", ".", "pad", "(", "comm_mask", ",", "(", "(", "0", ",", "pad_len", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ")", "\n", "\n", "", "action", "=", "self", ".", "act_buf", "[", "idx", "]", "\n", "reward", "=", "0", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "                    ", "reward", "+=", "self", ".", "rew_buf", "[", "idx", "+", "i", "]", "*", "0.99", "**", "i", "\n", "\n", "", "if", "self", ".", "done_buf", "[", "global_idx", "]", "and", "local_idx", ">=", "self", ".", "size_buf", "[", "global_idx", "]", "-", "configs", ".", "forward_steps", ":", "\n", "                    ", "done", "=", "True", "\n", "", "else", ":", "\n", "                    ", "done", "=", "False", "\n", "\n", "", "b_obs", ".", "append", "(", "obs", ")", "\n", "b_action", ".", "append", "(", "action", ")", "\n", "b_reward", ".", "append", "(", "reward", ")", "\n", "b_done", ".", "append", "(", "done", ")", "\n", "b_steps", ".", "append", "(", "steps", ")", "\n", "b_seq_len", ".", "append", "(", "seq_len", ")", "\n", "b_hidden", ".", "append", "(", "hidden", ")", "\n", "b_comm_mask", ".", "append", "(", "comm_mask", ")", "\n", "\n", "# importance sampling weight", "\n", "", "min_p", "=", "np", ".", "min", "(", "priorities", ")", "\n", "weights", "=", "np", ".", "power", "(", "priorities", "/", "min_p", ",", "-", "self", ".", "beta", ")", "\n", "\n", "data", "=", "(", "\n", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "b_obs", ")", ".", "astype", "(", "np", ".", "float16", ")", ")", ",", "\n", "torch", ".", "LongTensor", "(", "b_action", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "torch", ".", "HalfTensor", "(", "b_reward", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "torch", ".", "HalfTensor", "(", "b_done", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "torch", ".", "HalfTensor", "(", "b_steps", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "torch", ".", "LongTensor", "(", "b_seq_len", ")", ",", "\n", "torch", ".", "from_numpy", "(", "np", ".", "concatenate", "(", "b_hidden", ")", ")", ",", "\n", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "b_comm_mask", ")", ")", ",", "\n", "\n", "idxes", ",", "\n", "torch", ".", "from_numpy", "(", "weights", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "self", ".", "ptr", "\n", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.GlobalBuffer.update_priorities": [[188, 205], ["worker.GlobalBuffer.priority_tree.batch_update", "numpy.copy", "numpy.copy"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.batch_update"], ["", "", "def", "update_priorities", "(", "self", ",", "idxes", ":", "np", ".", "ndarray", ",", "priorities", ":", "np", ".", "ndarray", ",", "old_ptr", ":", "int", ")", ":", "\n", "        ", "\"\"\"Update priorities of sampled transitions\"\"\"", "\n", "with", "self", ".", "lock", ":", "\n", "\n", "# discard the indices that already been discarded in replay buffer during training", "\n", "            ", "if", "self", ".", "ptr", ">", "old_ptr", ":", "\n", "# range from [old_ptr, self.ptr)", "\n", "                ", "mask", "=", "(", "idxes", "<", "old_ptr", "*", "self", ".", "local_buffer_capacity", ")", "|", "(", "idxes", ">=", "self", ".", "ptr", "*", "self", ".", "local_buffer_capacity", ")", "\n", "idxes", "=", "idxes", "[", "mask", "]", "\n", "priorities", "=", "priorities", "[", "mask", "]", "\n", "", "elif", "self", ".", "ptr", "<", "old_ptr", ":", "\n", "# range from [0, self.ptr) & [old_ptr, self,capacity)", "\n", "                ", "mask", "=", "(", "idxes", "<", "old_ptr", "*", "self", ".", "local_buffer_capacity", ")", "&", "(", "idxes", ">=", "self", ".", "ptr", "*", "self", ".", "local_buffer_capacity", ")", "\n", "idxes", "=", "idxes", "[", "mask", "]", "\n", "priorities", "=", "priorities", "[", "mask", "]", "\n", "\n", "", "self", ".", "priority_tree", ".", "batch_update", "(", "np", ".", "copy", "(", "idxes", ")", ",", "np", ".", "copy", "(", "priorities", ")", "**", "self", ".", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.GlobalBuffer.stats": [[206, 240], ["print", "print", "print", "range", "print", "range", "worker.GlobalBuffer.stat_dict.copy().items", "ray.put", "print", "print", "range", "print", "list", "worker.GlobalBuffer.stat_dict.copy", "worker.GlobalBuffer.stat_dict.keys", "print", "print", "len", "sum", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.sum", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.sum"], ["", "", "def", "stats", "(", "self", ",", "interval", ":", "int", ")", ":", "\n", "        ", "print", "(", "'buffer update speed: {}/s'", ".", "format", "(", "self", ".", "counter", "/", "interval", ")", ")", "\n", "print", "(", "'buffer size: {}'", ".", "format", "(", "self", ".", "size", ")", ")", "\n", "\n", "print", "(", "'  '", ",", "end", "=", "''", ")", "\n", "for", "i", "in", "range", "(", "configs", ".", "init_env_settings", "[", "1", "]", ",", "configs", ".", "max_map_lenght", "+", "1", ",", "5", ")", ":", "\n", "            ", "print", "(", "'   {:2d}   '", ".", "format", "(", "i", ")", ",", "end", "=", "''", ")", "\n", "", "print", "(", ")", "\n", "\n", "for", "num_agents", "in", "range", "(", "configs", ".", "init_env_settings", "[", "0", "]", ",", "configs", ".", "max_num_agents", "+", "1", ")", ":", "\n", "            ", "print", "(", "'{:2d}'", ".", "format", "(", "num_agents", ")", ",", "end", "=", "''", ")", "\n", "for", "map_len", "in", "range", "(", "configs", ".", "init_env_settings", "[", "1", "]", ",", "configs", ".", "max_map_lenght", "+", "1", ",", "5", ")", ":", "\n", "                ", "if", "(", "num_agents", ",", "map_len", ")", "in", "self", ".", "stat_dict", ":", "\n", "                    ", "print", "(", "'{:4d}/{:<3d}'", ".", "format", "(", "sum", "(", "self", ".", "stat_dict", "[", "(", "num_agents", ",", "map_len", ")", "]", ")", ",", "len", "(", "self", ".", "stat_dict", "[", "(", "num_agents", ",", "map_len", ")", "]", ")", ")", ",", "end", "=", "''", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'   N/A  '", ",", "end", "=", "''", ")", "\n", "", "", "print", "(", ")", "\n", "\n", "", "for", "key", ",", "val", "in", "self", ".", "stat_dict", ".", "copy", "(", ")", ".", "items", "(", ")", ":", "\n", "# print('{}: {}/{}'.format(key, sum(val), len(val)))", "\n", "            ", "if", "len", "(", "val", ")", "==", "200", "and", "sum", "(", "val", ")", ">=", "200", "*", "configs", ".", "pass_rate", ":", "\n", "# add number of agents", "\n", "                ", "add_agent_key", "=", "(", "key", "[", "0", "]", "+", "1", ",", "key", "[", "1", "]", ")", "\n", "if", "add_agent_key", "[", "0", "]", "<=", "configs", ".", "max_num_agents", "and", "add_agent_key", "not", "in", "self", ".", "stat_dict", ":", "\n", "                    ", "self", ".", "stat_dict", "[", "add_agent_key", "]", "=", "[", "]", "\n", "\n", "", "if", "key", "[", "1", "]", "<", "configs", ".", "max_map_lenght", ":", "\n", "                    ", "add_map_key", "=", "(", "key", "[", "0", "]", ",", "key", "[", "1", "]", "+", "5", ")", "\n", "if", "add_map_key", "not", "in", "self", ".", "stat_dict", ":", "\n", "                        ", "self", ".", "stat_dict", "[", "add_map_key", "]", "=", "[", "]", "\n", "\n", "", "", "", "", "self", ".", "env_settings_set", "=", "ray", ".", "put", "(", "list", "(", "self", ".", "stat_dict", ".", "keys", "(", ")", ")", ")", "\n", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.GlobalBuffer.ready": [[241, 246], ["len"], "methods", ["None"], ["", "def", "ready", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ")", ">=", "configs", ".", "learning_starts", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.GlobalBuffer.get_env_settings": [[247, 249], ["None"], "methods", ["None"], ["", "", "def", "get_env_settings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env_settings_set", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.GlobalBuffer.check_done": [[250, 264], ["range", "len", "sum"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.sum"], ["", "def", "check_done", "(", "self", ")", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "configs", ".", "max_num_agents", ")", ":", "\n", "            ", "if", "(", "i", "+", "1", ",", "configs", ".", "max_map_lenght", ")", "not", "in", "self", ".", "stat_dict", ":", "\n", "                ", "return", "False", "\n", "\n", "", "l", "=", "self", ".", "stat_dict", "[", "(", "i", "+", "1", ",", "configs", ".", "max_map_lenght", ")", "]", "\n", "\n", "if", "len", "(", "l", ")", "<", "200", ":", "\n", "                ", "return", "False", "\n", "", "elif", "sum", "(", "l", ")", "<", "200", "*", "configs", ".", "pass_rate", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.Learner.__init__": [[267, 281], ["torch.device", "torch.device", "torch.device", "torch.device", "model.Network", "worker.Learner.model.to", "copy.deepcopy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "worker.Learner.store_weights", "worker.Learner.model.parameters", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.Learner.store_weights"], ["    ", "def", "__init__", "(", "self", ",", "buffer", ":", "GlobalBuffer", ")", ":", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "self", ".", "model", "=", "Network", "(", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "tar_model", "=", "deepcopy", "(", "self", ".", "model", ")", "\n", "self", ".", "optimizer", "=", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ")", "\n", "self", ".", "scheduler", "=", "MultiStepLR", "(", "self", ".", "optimizer", ",", "milestones", "=", "[", "200000", ",", "400000", "]", ",", "gamma", "=", "0.5", ")", "\n", "self", ".", "buffer", "=", "buffer", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "last_counter", "=", "0", "\n", "self", ".", "done", "=", "False", "\n", "self", ".", "loss", "=", "0", "\n", "\n", "self", ".", "store_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.Learner.get_weights": [[282, 284], ["None"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "weights_id", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.Learner.store_weights": [[285, 290], ["worker.Learner.model.state_dict", "worker.Learner.items", "ray.put", "v.cpu"], "methods", ["None"], ["", "def", "store_weights", "(", "self", ")", ":", "\n", "        ", "state_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "state_dict", "[", "k", "]", "=", "v", ".", "cpu", "(", ")", "\n", "", "self", ".", "weights_id", "=", "ray", ".", "put", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.Learner.run": [[291, 294], ["threading.Thread", "worker.Learner.learning_thread.start"], "methods", ["None"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "learning_thread", "=", "threading", ".", "Thread", "(", "target", "=", "self", ".", "train", ",", "daemon", "=", "True", ")", "\n", "self", ".", "learning_thread", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.Learner.train": [[295, 353], ["torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "range", "ray.get", "ray.get", "ray.get", "b_hidden.to.to.to", "b_comm_mask.to.to.to", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "worker.Learner.model().gather", "td_error.detach().squeeze().abs().clamp().cpu().numpy", "loss.item", "worker.Learner.optimizer.zero_grad", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.unscale_", "torch.cuda.amp.GradScaler.unscale_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "worker.Learner.scheduler.step", "worker.Learner.buffer.update_priorities.remote", "worker.Learner.buffer.check_done.remote", "worker.Learner.buffer.get_data.remote", "b_obs.to", "b_action.to", "b_reward.to", "b_done.to", "b_steps.to", "weights.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "worker.Learner.model.parameters", "worker.Learner.store_weights", "worker.Learner.tar_model.load_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "zip", "worker.Learner.model", "td_error.detach().squeeze().abs().clamp().cpu", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "worker.Learner.model.state_dict", "worker.Learner.model.state_dict", "os.path.join", "worker.Learner.tar_model().max", "worker.Learner.huber_loss", "td_error.detach().squeeze().abs().clamp", "worker.Learner.tar_model", "td_error.detach().squeeze().abs", "td_error.detach().squeeze", "td_error.detach"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.step", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.step", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.step", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.Learner.store_weights", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.Learner.huber_loss"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "scaler", "=", "GradScaler", "(", ")", "\n", "\n", "while", "not", "ray", ".", "get", "(", "self", ".", "buffer", ".", "check_done", ".", "remote", "(", ")", ")", "and", "self", ".", "counter", "<", "configs", ".", "training_times", ":", "\n", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "10001", ")", ":", "\n", "\n", "                ", "data_id", "=", "ray", ".", "get", "(", "self", ".", "buffer", ".", "get_data", ".", "remote", "(", ")", ")", "\n", "data", "=", "ray", ".", "get", "(", "data_id", ")", "\n", "\n", "b_obs", ",", "b_action", ",", "b_reward", ",", "b_done", ",", "b_steps", ",", "b_seq_len", ",", "b_hidden", ",", "b_comm_mask", ",", "idxes", ",", "weights", ",", "old_ptr", "=", "data", "\n", "b_obs", ",", "b_action", ",", "b_reward", "=", "b_obs", ".", "to", "(", "self", ".", "device", ")", ",", "b_action", ".", "to", "(", "self", ".", "device", ")", ",", "b_reward", ".", "to", "(", "self", ".", "device", ")", "\n", "b_done", ",", "b_steps", ",", "weights", "=", "b_done", ".", "to", "(", "self", ".", "device", ")", ",", "b_steps", ".", "to", "(", "self", ".", "device", ")", ",", "weights", ".", "to", "(", "self", ".", "device", ")", "\n", "b_hidden", "=", "b_hidden", ".", "to", "(", "self", ".", "device", ")", "\n", "b_comm_mask", "=", "b_comm_mask", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "b_next_seq_len", "=", "[", "(", "seq_len", "+", "forward_steps", ")", ".", "item", "(", ")", "for", "seq_len", ",", "forward_steps", "in", "zip", "(", "b_seq_len", ",", "b_steps", ")", "]", "\n", "b_next_seq_len", "=", "torch", ".", "LongTensor", "(", "b_next_seq_len", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "b_q_", "=", "(", "1", "-", "b_done", ")", "*", "self", ".", "tar_model", "(", "b_obs", ",", "b_next_seq_len", ",", "b_hidden", ",", "b_comm_mask", ")", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "", "b_q", "=", "self", ".", "model", "(", "b_obs", "[", ":", ",", ":", "-", "configs", ".", "forward_steps", "]", ",", "b_seq_len", ",", "b_hidden", ",", "b_comm_mask", "[", ":", ",", ":", "-", "configs", ".", "forward_steps", "]", ")", ".", "gather", "(", "1", ",", "b_action", ")", "\n", "\n", "td_error", "=", "(", "b_q", "-", "(", "b_reward", "+", "(", "0.99", "**", "b_steps", ")", "*", "b_q_", ")", ")", "\n", "\n", "priorities", "=", "td_error", ".", "detach", "(", ")", ".", "squeeze", "(", ")", ".", "abs", "(", ")", ".", "clamp", "(", "1e-4", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "loss", "=", "(", "weights", "*", "self", ".", "huber_loss", "(", "td_error", ")", ")", ".", "mean", "(", ")", "\n", "self", ".", "loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "\n", "scaler", ".", "unscale_", "(", "self", ".", "optimizer", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "40", ")", "\n", "\n", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "# store new weights in shared memory", "\n", "if", "i", "%", "5", "==", "0", ":", "\n", "                    ", "self", ".", "store_weights", "(", ")", "\n", "\n", "", "self", ".", "buffer", ".", "update_priorities", ".", "remote", "(", "idxes", ",", "priorities", ",", "old_ptr", ")", "\n", "\n", "self", ".", "counter", "+=", "1", "\n", "\n", "# update target net, save model", "\n", "if", "i", "%", "configs", ".", "target_network_update_freq", "==", "0", ":", "\n", "                    ", "self", ".", "tar_model", ".", "load_state_dict", "(", "self", ".", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "if", "i", "%", "configs", ".", "save_interval", "==", "0", ":", "\n", "                    ", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "configs", ".", "save_path", ",", "'{}.pth'", ".", "format", "(", "self", ".", "counter", ")", ")", ")", "\n", "\n", "", "", "", "self", ".", "done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.Learner.huber_loss": [[354, 358], ["td_error.abs", "td_error.abs.pow"], "methods", ["None"], ["", "def", "huber_loss", "(", "self", ",", "td_error", ",", "kappa", "=", "1.0", ")", ":", "\n", "        ", "abs_td_error", "=", "td_error", ".", "abs", "(", ")", "\n", "flag", "=", "(", "abs_td_error", "<", "kappa", ")", ".", "float", "(", ")", "\n", "return", "flag", "*", "abs_td_error", ".", "pow", "(", "2", ")", "*", "0.5", "+", "(", "1", "-", "flag", ")", "*", "(", "abs_td_error", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.Learner.stats": [[359, 368], ["print", "print", "print"], "methods", ["None"], ["", "def", "stats", "(", "self", ",", "interval", ":", "int", ")", ":", "\n", "        ", "print", "(", "'number of updates: {}'", ".", "format", "(", "self", ".", "counter", ")", ")", "\n", "print", "(", "'update speed: {}/s'", ".", "format", "(", "(", "self", ".", "counter", "-", "self", ".", "last_counter", ")", "/", "interval", ")", ")", "\n", "if", "self", ".", "counter", "!=", "self", ".", "last_counter", ":", "\n", "            ", "print", "(", "'loss: {:.4f}'", ".", "format", "(", "self", ".", "loss", "/", "(", "self", ".", "counter", "-", "self", ".", "last_counter", ")", ")", ")", "\n", "\n", "", "self", ".", "last_counter", "=", "self", ".", "counter", "\n", "self", ".", "loss", "=", "0", "\n", "return", "self", ".", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.Actor.__init__": [[372, 382], ["model.Network", "worker.Actor.model.eval", "environment.Environment"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "worker_id", ":", "int", ",", "epsilon", ":", "float", ",", "learner", ":", "Learner", ",", "buffer", ":", "GlobalBuffer", ")", ":", "\n", "        ", "self", ".", "id", "=", "worker_id", "\n", "self", ".", "model", "=", "Network", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "env", "=", "Environment", "(", "curriculum", "=", "True", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "learner", "=", "learner", "\n", "self", ".", "global_buffer", "=", "buffer", "\n", "self", ".", "max_episode_length", "=", "configs", ".", "max_episode_length", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.Actor.run": [[383, 418], ["worker.Actor.reset", "worker.Actor.model.step", "worker.Actor.env.step", "local_buffer.add", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "random.random", "numpy.random.randint", "worker.Actor.global_buffer.add.remote", "worker.Actor.reset", "worker.Actor.update_weights", "obs.astype", "pos.astype", "local_buffer.finish", "worker.Actor.model.step", "local_buffer.finish", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "next_obs.astype", "next_pos.astype"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.reset", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.step", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.step", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.GlobalBuffer.add", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.reset", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.Actor.update_weights", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.LocalBuffer.finish", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.step", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.LocalBuffer.finish"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "done", "=", "False", "\n", "obs", ",", "pos", ",", "local_buffer", "=", "self", ".", "reset", "(", ")", "\n", "\n", "while", "True", ":", "\n", "\n", "# sample action", "\n", "            ", "actions", ",", "q_val", ",", "hidden", ",", "comm_mask", "=", "self", ".", "model", ".", "step", "(", "torch", ".", "from_numpy", "(", "obs", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "from_numpy", "(", "pos", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "epsilon", ":", "\n", "# Note: only one agent do random action in order to keep the environment stable", "\n", "                ", "actions", "[", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "5", ")", "\n", "# take action in env", "\n", "", "(", "next_obs", ",", "next_pos", ")", ",", "rewards", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "actions", ")", "\n", "# return data and update observation", "\n", "local_buffer", ".", "add", "(", "q_val", "[", "0", "]", ",", "actions", "[", "0", "]", ",", "rewards", "[", "0", "]", ",", "next_obs", ",", "hidden", ",", "comm_mask", ")", "\n", "\n", "if", "done", "==", "False", "and", "self", ".", "env", ".", "steps", "<", "self", ".", "max_episode_length", ":", "\n", "                ", "obs", ",", "pos", "=", "next_obs", ",", "next_pos", "\n", "", "else", ":", "\n", "# finish and send buffer", "\n", "                ", "if", "done", ":", "\n", "                    ", "data", "=", "local_buffer", ".", "finish", "(", ")", "\n", "", "else", ":", "\n", "                    ", "_", ",", "q_val", ",", "hidden", ",", "comm_mask", "=", "self", ".", "model", ".", "step", "(", "torch", ".", "from_numpy", "(", "next_obs", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "from_numpy", "(", "next_pos", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", "\n", "data", "=", "local_buffer", ".", "finish", "(", "q_val", "[", "0", "]", ",", "comm_mask", ")", "\n", "\n", "", "self", ".", "global_buffer", ".", "add", ".", "remote", "(", "data", ")", "\n", "done", "=", "False", "\n", "obs", ",", "pos", ",", "local_buffer", "=", "self", ".", "reset", "(", ")", "\n", "\n", "", "self", ".", "counter", "+=", "1", "\n", "if", "self", ".", "counter", "==", "configs", ".", "actor_update_steps", ":", "\n", "                ", "self", ".", "update_weights", "(", ")", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.Actor.update_weights": [[419, 428], ["ray.get", "ray.get", "worker.Actor.model.load_state_dict", "ray.get", "worker.Actor.env.update_env_settings_set", "worker.Actor.learner.get_weights.remote", "worker.Actor.global_buffer.get_env_settings.remote", "ray.get"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.update_env_settings_set"], ["", "", "", "def", "update_weights", "(", "self", ")", ":", "\n", "        ", "'''load weights from learner'''", "\n", "# update network parameters", "\n", "weights_id", "=", "ray", ".", "get", "(", "self", ".", "learner", ".", "get_weights", ".", "remote", "(", ")", ")", "\n", "weights", "=", "ray", ".", "get", "(", "weights_id", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "weights", ")", "\n", "# update environment settings set (number of agents and map size)", "\n", "new_env_settings_set", "=", "ray", ".", "get", "(", "self", ".", "global_buffer", ".", "get_env_settings", ".", "remote", "(", ")", ")", "\n", "self", ".", "env", ".", "update_env_settings_set", "(", "ray", ".", "get", "(", "new_env_settings_set", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.worker.Actor.reset": [[429, 434], ["worker.Actor.model.reset", "worker.Actor.env.reset", "buffer.LocalBuffer"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.reset", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "reset", "(", ")", "\n", "obs", ",", "pos", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "local_buffer", "=", "LocalBuffer", "(", "self", ".", "id", ",", "self", ".", "env", ".", "num_agents", ",", "self", ".", "env", ".", "map_size", "[", "0", "]", ",", "obs", ")", "\n", "return", "obs", ",", "pos", ",", "local_buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.train.main": [[18, 44], ["ray.init", "worker.GlobalBuffer.remote", "worker.Learner.remote", "time.sleep", "print", "GlobalBuffer.remote.run.remote", "Learner.remote.run.remote", "worker.Actor.remote", "actor.run.remote", "ray.get", "time.sleep", "ray.get", "ray.get", "time.sleep", "ray.get", "ray.get", "print", "range", "GlobalBuffer.remote.ready.remote", "Learner.remote.stats.remote", "GlobalBuffer.remote.stats.remote", "Learner.remote.stats.remote", "GlobalBuffer.remote.stats.remote"], "function", ["None"], ["def", "main", "(", "num_actors", "=", "configs", ".", "num_actors", ",", "log_interval", "=", "configs", ".", "log_interval", ")", ":", "\n", "    ", "ray", ".", "init", "(", ")", "\n", "\n", "buffer", "=", "GlobalBuffer", ".", "remote", "(", ")", "\n", "learner", "=", "Learner", ".", "remote", "(", "buffer", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "actors", "=", "[", "Actor", ".", "remote", "(", "i", ",", "0.4", "**", "(", "1", "+", "(", "i", "/", "(", "num_actors", "-", "1", ")", ")", "*", "7", ")", ",", "learner", ",", "buffer", ")", "for", "i", "in", "range", "(", "num_actors", ")", "]", "\n", "\n", "for", "actor", "in", "actors", ":", "\n", "        ", "actor", ".", "run", ".", "remote", "(", ")", "\n", "\n", "", "while", "not", "ray", ".", "get", "(", "buffer", ".", "ready", ".", "remote", "(", ")", ")", ":", "\n", "        ", "time", ".", "sleep", "(", "5", ")", "\n", "ray", ".", "get", "(", "learner", ".", "stats", ".", "remote", "(", "5", ")", ")", "\n", "ray", ".", "get", "(", "buffer", ".", "stats", ".", "remote", "(", "5", ")", ")", "\n", "\n", "", "print", "(", "'start training'", ")", "\n", "buffer", ".", "run", ".", "remote", "(", ")", "\n", "learner", ".", "run", ".", "remote", "(", ")", "\n", "\n", "done", "=", "False", "\n", "while", "not", "done", ":", "\n", "        ", "time", ".", "sleep", "(", "log_interval", ")", "\n", "done", "=", "ray", ".", "get", "(", "learner", ".", "stats", ".", "remote", "(", "log_interval", ")", ")", "\n", "ray", ".", "get", "(", "buffer", ".", "stats", ".", "remote", "(", "log_interval", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.test.create_test": [[22, 40], ["print", "environment.Environment", "tqdm.tqdm", "print", "range", "tests.append", "environment.Environment.reset", "open", "pickle.dump", "numpy.copy", "numpy.copy", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.reset"], ["def", "create_test", "(", "test_env_settings", ",", "num_test_cases", ")", ":", "\n", "\n", "    ", "for", "map_length", ",", "num_agents", ",", "density", "in", "test_env_settings", ":", "\n", "\n", "        ", "name", "=", "'./test_set/{}length_{}agents_{}density.pth'", ".", "format", "(", "map_length", ",", "num_agents", ",", "density", ")", "\n", "print", "(", "'-----{}length {}agents {}density-----'", ".", "format", "(", "map_length", ",", "num_agents", ",", "density", ")", ")", "\n", "\n", "tests", "=", "[", "]", "\n", "\n", "env", "=", "Environment", "(", "fix_density", "=", "density", ",", "num_agents", "=", "num_agents", ",", "map_length", "=", "map_length", ")", "\n", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "num_test_cases", ")", ")", ":", "\n", "            ", "tests", ".", "append", "(", "(", "np", ".", "copy", "(", "env", ".", "map", ")", ",", "np", ".", "copy", "(", "env", ".", "agents_pos", ")", ",", "np", ".", "copy", "(", "env", ".", "goals_pos", ")", ")", ")", "\n", "env", ".", "reset", "(", "num_agents", "=", "num_agents", ",", "map_length", "=", "map_length", ")", "\n", "", "print", "(", ")", "\n", "\n", "with", "open", "(", "name", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "tests", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.test.test_model": [[103, 169], ["model.Network", "model.Network.eval", "model.Network.to", "multiprocessing.Pool", "isinstance", "multiprocessing.cpu_count", "torch.load", "model.Network.load_state_dict", "model.Network.eval", "model.Network.share_memory", "print", "isinstance", "print", "mp.Pool.map", "print", "print", "print", "range", "open", "pickle.load", "torch.load", "model.Network.load_state_dict", "model.Network.eval", "model.Network.share_memory", "print", "print", "print", "mp.Pool.map", "print", "print", "print", "len", "open", "pickle.load", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.load", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.load", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.load", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.load"], ["", "", "", "def", "test_model", "(", "model_range", ":", "Union", "[", "int", ",", "tuple", "]", ")", ":", "\n", "    ", "'''\n    test model in 'models' file with model number \n    '''", "\n", "network", "=", "Network", "(", ")", "\n", "network", ".", "eval", "(", ")", "\n", "network", ".", "to", "(", "device", ")", "\n", "\n", "test_set", "=", "configs", ".", "test_env_settings", "\n", "\n", "pool", "=", "mp", ".", "Pool", "(", "mp", ".", "cpu_count", "(", ")", ")", "\n", "\n", "if", "isinstance", "(", "model_range", ",", "int", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "'./models/{}.pth'", ".", "format", "(", "model_range", ")", ",", "map_location", "=", "device", ")", "\n", "network", ".", "load_state_dict", "(", "state_dict", ")", "\n", "network", ".", "eval", "(", ")", "\n", "network", ".", "share_memory", "(", ")", "\n", "\n", "print", "(", "'----------test model {}----------'", ".", "format", "(", "model_range", ")", ")", "\n", "\n", "for", "case", "in", "test_set", ":", "\n", "            ", "print", "(", "\"test set: {} length {} agents {} density\"", ".", "format", "(", "case", "[", "0", "]", ",", "case", "[", "1", "]", ",", "case", "[", "2", "]", ")", ")", "\n", "with", "open", "(", "'./test_set/{}length_{}agents_{}density.pth'", ".", "format", "(", "case", "[", "0", "]", ",", "case", "[", "1", "]", ",", "case", "[", "2", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "tests", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "tests", "=", "[", "(", "test", ",", "network", ")", "for", "test", "in", "tests", "]", "\n", "ret", "=", "pool", ".", "map", "(", "test_one_case", ",", "tests", ")", "\n", "\n", "success", "=", "0", "\n", "avg_step", "=", "0", "\n", "for", "i", ",", "j", "in", "ret", ":", "\n", "                ", "success", "+=", "i", "\n", "avg_step", "+=", "j", "\n", "\n", "", "print", "(", "\"success rate: {:.2f}%\"", ".", "format", "(", "success", "/", "len", "(", "ret", ")", "*", "100", ")", ")", "\n", "print", "(", "\"average step: {}\"", ".", "format", "(", "avg_step", "/", "len", "(", "ret", ")", ")", ")", "\n", "print", "(", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "model_range", ",", "tuple", ")", ":", "\n", "        ", "for", "model_name", "in", "range", "(", "model_range", "[", "0", "]", ",", "model_range", "[", "1", "]", "+", "1", ",", "configs", ".", "save_interval", ")", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "'./models/{}.pth'", ".", "format", "(", "model_name", ")", ",", "map_location", "=", "device", ")", "\n", "network", ".", "load_state_dict", "(", "state_dict", ")", "\n", "network", ".", "eval", "(", ")", "\n", "network", ".", "share_memory", "(", ")", "\n", "\n", "print", "(", "'----------test model {}----------'", ".", "format", "(", "model_name", ")", ")", "\n", "\n", "for", "case", "in", "test_set", ":", "\n", "                ", "print", "(", "\"test set: {} length {} agents {} density\"", ".", "format", "(", "case", "[", "0", "]", ",", "case", "[", "1", "]", ",", "case", "[", "2", "]", ")", ")", "\n", "with", "open", "(", "'./test_set/{}length_{}agents_{}density.pth'", ".", "format", "(", "case", "[", "0", "]", ",", "case", "[", "1", "]", ",", "case", "[", "2", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "tests", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "tests", "=", "[", "(", "test", ",", "network", ")", "for", "test", "in", "tests", "]", "\n", "ret", "=", "pool", ".", "map", "(", "test_one_case", ",", "tests", ")", "\n", "\n", "success", "=", "0", "\n", "avg_step", "=", "0", "\n", "for", "i", ",", "j", "in", "ret", ":", "\n", "                    ", "success", "+=", "i", "\n", "avg_step", "+=", "j", "\n", "\n", "", "print", "(", "\"success rate: {:.2f}%\"", ".", "format", "(", "success", "/", "len", "(", "ret", ")", "*", "100", ")", ")", "\n", "print", "(", "\"average step: {}\"", ".", "format", "(", "avg_step", "/", "len", "(", "ret", ")", ")", ")", "\n", "print", "(", ")", "\n", "\n", "", "print", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.test.test_one_case": [[171, 189], ["environment.Environment", "environment.Environment.load", "environment.Environment.observe", "network.reset", "network.step", "environment.Environment.step", "numpy.array_equal", "torch.as_tensor", "torch.as_tensor", "obs.astype", "pos.astype"], "function", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.load", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.observe", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.reset", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.step", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.step"], ["", "", "", "def", "test_one_case", "(", "args", ")", ":", "\n", "\n", "    ", "env_set", ",", "network", "=", "args", "\n", "\n", "env", "=", "Environment", "(", ")", "\n", "env", ".", "load", "(", "env_set", "[", "0", "]", ",", "env_set", "[", "1", "]", ",", "env_set", "[", "2", "]", ")", "\n", "obs", ",", "pos", "=", "env", ".", "observe", "(", ")", "\n", "\n", "done", "=", "False", "\n", "network", ".", "reset", "(", ")", "\n", "\n", "step", "=", "0", "\n", "while", "not", "done", "and", "env", ".", "steps", "<", "configs", ".", "max_episode_length", ":", "\n", "        ", "actions", ",", "_", ",", "_", ",", "_", "=", "network", ".", "step", "(", "torch", ".", "as_tensor", "(", "obs", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "torch", ".", "as_tensor", "(", "pos", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", "\n", "(", "obs", ",", "pos", ")", ",", "_", ",", "done", ",", "_", "=", "env", ".", "step", "(", "actions", ")", "\n", "step", "+=", "1", "\n", "\n", "", "return", "np", ".", "array_equal", "(", "env", ".", "agents_pos", ",", "env", ".", "goals_pos", ")", ",", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.test.make_animation": [[190, 273], ["numpy.array", "model.Network", "model.Network.eval", "model.Network.to", "torch.load", "model.Network.load_state_dict", "environment.Environment", "environment.Environment.load", "matplotlib.figure", "environment.Environment.observe", "matplotlib.ArtistAnimation", "animation.ArtistAnimation.save", "open", "pickle.load", "imgs.append", "numpy.copy", "range", "map.astype.astype", "matplotlib.imshow", "imgs[].append", "enumerate", "model.Network.step", "environment.Environment.step", "numpy.copy", "range", "map.astype.astype", "matplotlib.imshow", "range", "numpy.array_equal", "zip", "matplotlib.text", "imgs[].append", "matplotlib.text", "imgs[].append", "torch.from_numpy().to", "torch.from_numpy().to", "numpy.array_equal", "imgs.append", "imgs[].append", "enumerate", "zip", "matplotlib.text", "imgs[].append", "matplotlib.text", "imgs[].append", "torch.from_numpy", "torch.from_numpy", "tuple", "tuple", "tuple", "obs.astype", "pos.astype", "tuple", "tuple", "tuple"], "function", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.load", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.load", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.observe", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.load", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.step", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.step"], ["", "def", "make_animation", "(", "model_name", ":", "int", ",", "test_set_name", ":", "tuple", ",", "test_case_idx", ":", "int", ",", "steps", ":", "int", "=", "25", ")", ":", "\n", "    ", "'''\n    visualize running results\n    model_name: model number in 'models' file\n    test_set_name: (length, num_agents, density)\n    test_case_idx: int, the test case index in test set\n    steps: how many steps to visualize in test case\n    '''", "\n", "color_map", "=", "np", ".", "array", "(", "[", "[", "255", ",", "255", ",", "255", "]", ",", "# white", "\n", "[", "190", ",", "190", ",", "190", "]", ",", "# gray", "\n", "[", "0", ",", "191", ",", "255", "]", ",", "# blue", "\n", "[", "255", ",", "165", ",", "0", "]", ",", "# orange", "\n", "[", "0", ",", "250", ",", "154", "]", "]", ")", "# green", "\n", "\n", "network", "=", "Network", "(", ")", "\n", "network", ".", "eval", "(", ")", "\n", "network", ".", "to", "(", "device", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "'models/{}.pth'", ".", "format", "(", "model_name", ")", ",", "map_location", "=", "device", ")", "\n", "network", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "test_name", "=", "'test_set/40_length_16_agents_0.3_density.pkl'", "\n", "with", "open", "(", "test_name", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "tests", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "env", "=", "Environment", "(", ")", "\n", "env", ".", "load", "(", "tests", "[", "test_case_idx", "]", "[", "0", "]", ",", "tests", "[", "test_case_idx", "]", "[", "1", "]", ",", "tests", "[", "test_case_idx", "]", "[", "2", "]", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "done", "=", "False", "\n", "obs", ",", "pos", "=", "env", ".", "observe", "(", ")", "\n", "\n", "imgs", "=", "[", "]", "\n", "while", "not", "done", "and", "env", ".", "steps", "<", "steps", ":", "\n", "        ", "imgs", ".", "append", "(", "[", "]", ")", "\n", "map", "=", "np", ".", "copy", "(", "env", ".", "map", ")", "\n", "for", "agent_id", "in", "range", "(", "env", ".", "num_agents", ")", ":", "\n", "            ", "if", "np", ".", "array_equal", "(", "env", ".", "agents_pos", "[", "agent_id", "]", ",", "env", ".", "goals_pos", "[", "agent_id", "]", ")", ":", "\n", "                ", "map", "[", "tuple", "(", "env", ".", "agents_pos", "[", "agent_id", "]", ")", "]", "=", "4", "\n", "", "else", ":", "\n", "                ", "map", "[", "tuple", "(", "env", ".", "agents_pos", "[", "agent_id", "]", ")", "]", "=", "2", "\n", "map", "[", "tuple", "(", "env", ".", "goals_pos", "[", "agent_id", "]", ")", "]", "=", "3", "\n", "", "", "map", "=", "map", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "img", "=", "plt", ".", "imshow", "(", "color_map", "[", "map", "]", ",", "animated", "=", "True", ")", "\n", "\n", "imgs", "[", "-", "1", "]", ".", "append", "(", "img", ")", "\n", "\n", "for", "i", ",", "(", "(", "agent_x", ",", "agent_y", ")", ",", "(", "goal_x", ",", "goal_y", ")", ")", "in", "enumerate", "(", "zip", "(", "env", ".", "agents_pos", ",", "env", ".", "goals_pos", ")", ")", ":", "\n", "            ", "text", "=", "plt", ".", "text", "(", "agent_y", ",", "agent_x", ",", "i", ",", "color", "=", "'black'", ",", "ha", "=", "'center'", ",", "va", "=", "'center'", ")", "\n", "imgs", "[", "-", "1", "]", ".", "append", "(", "text", ")", "\n", "text", "=", "plt", ".", "text", "(", "goal_y", ",", "goal_x", ",", "i", ",", "color", "=", "'black'", ",", "ha", "=", "'center'", ",", "va", "=", "'center'", ")", "\n", "imgs", "[", "-", "1", "]", ".", "append", "(", "text", ")", "\n", "\n", "\n", "", "actions", ",", "_", ",", "_", ",", "_", "=", "network", ".", "step", "(", "torch", ".", "from_numpy", "(", "obs", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "from_numpy", "(", "pos", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "to", "(", "device", ")", ")", "\n", "(", "obs", ",", "pos", ")", ",", "_", ",", "done", ",", "_", "=", "env", ".", "step", "(", "actions", ")", "\n", "# print(done)", "\n", "\n", "", "if", "done", "and", "env", ".", "steps", "<", "steps", ":", "\n", "        ", "map", "=", "np", ".", "copy", "(", "env", ".", "map", ")", "\n", "for", "agent_id", "in", "range", "(", "env", ".", "num_agents", ")", ":", "\n", "            ", "if", "np", ".", "array_equal", "(", "env", ".", "agents_pos", "[", "agent_id", "]", ",", "env", ".", "goals_pos", "[", "agent_id", "]", ")", ":", "\n", "                ", "map", "[", "tuple", "(", "env", ".", "agents_pos", "[", "agent_id", "]", ")", "]", "=", "4", "\n", "", "else", ":", "\n", "                ", "map", "[", "tuple", "(", "env", ".", "agents_pos", "[", "agent_id", "]", ")", "]", "=", "2", "\n", "map", "[", "tuple", "(", "env", ".", "goals_pos", "[", "agent_id", "]", ")", "]", "=", "3", "\n", "", "", "map", "=", "map", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "img", "=", "plt", ".", "imshow", "(", "color_map", "[", "map", "]", ",", "animated", "=", "True", ")", "\n", "for", "_", "in", "range", "(", "steps", "-", "env", ".", "steps", ")", ":", "\n", "            ", "imgs", ".", "append", "(", "[", "]", ")", "\n", "imgs", "[", "-", "1", "]", ".", "append", "(", "img", ")", "\n", "for", "i", ",", "(", "(", "agent_x", ",", "agent_y", ")", ",", "(", "goal_x", ",", "goal_y", ")", ")", "in", "enumerate", "(", "zip", "(", "env", ".", "agents_pos", ",", "env", ".", "goals_pos", ")", ")", ":", "\n", "                ", "text", "=", "plt", ".", "text", "(", "agent_y", ",", "agent_x", ",", "i", ",", "color", "=", "'black'", ",", "ha", "=", "'center'", ",", "va", "=", "'center'", ")", "\n", "imgs", "[", "-", "1", "]", ".", "append", "(", "text", ")", "\n", "text", "=", "plt", ".", "text", "(", "goal_y", ",", "goal_x", ",", "i", ",", "color", "=", "'black'", ",", "ha", "=", "'center'", ",", "va", "=", "'center'", ")", "\n", "imgs", "[", "-", "1", "]", ".", "append", "(", "text", ")", "\n", "\n", "\n", "", "", "", "ani", "=", "animation", ".", "ArtistAnimation", "(", "fig", ",", "imgs", ",", "interval", "=", "600", ",", "blit", "=", "True", ",", "repeat_delay", "=", "1000", ")", "\n", "\n", "ani", ".", "save", "(", "'videos/{}_{}_{}_{}.mp4'", ".", "format", "(", "model_name", ",", "*", "test_set_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.model.ResBlock.__init__": [[9, 14], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block1", "=", "nn", ".", "Conv2d", "(", "channel", ",", "channel", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "block2", "=", "nn", ".", "Conv2d", "(", "channel", ",", "channel", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.model.ResBlock.forward": [[15, 28], ["model.ResBlock.block1", "torch.relu", "torch.relu", "torch.relu", "model.ResBlock.block2", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "\n", "x", "+=", "identity", "\n", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.model.MultiHeadAttention.__init__": [[30, 39], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "num_heads", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "W_Q", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", "*", "num_heads", ")", "\n", "self", ".", "W_K", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", "*", "num_heads", ")", "\n", "self", ".", "W_V", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", "*", "num_heads", ")", "\n", "self", ".", "W_O", "=", "nn", ".", "Linear", "(", "output_dim", "*", "num_heads", ",", "output_dim", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.model.MultiHeadAttention.forward": [[40, 68], ["input.size", "model.MultiHeadAttention.W_Q().view().transpose", "model.MultiHeadAttention.W_K().view().transpose", "model.MultiHeadAttention.W_V().view().transpose", "attn_mask.unsqueeze.unsqueeze.unsqueeze().repeat_interleave", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "context.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "model.MultiHeadAttention.W_O", "attn_mask.unsqueeze.unsqueeze.dim", "attn_mask.unsqueeze.unsqueeze.unsqueeze", "attn_mask.unsqueeze.unsqueeze.size", "attn_mask.unsqueeze.unsqueeze.size", "attn_mask.unsqueeze.unsqueeze.size", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "scores.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "model.MultiHeadAttention.W_Q().view", "model.MultiHeadAttention.W_K().view", "model.MultiHeadAttention.W_V().view", "attn_mask.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "context.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "model.MultiHeadAttention.float", "model.MultiHeadAttention.float().transpose", "model.MultiHeadAttention.W_Q", "model.MultiHeadAttention.W_K", "model.MultiHeadAttention.W_V", "context.transpose().contiguous().view.transpose().contiguous().view.transpose", "model.MultiHeadAttention.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "attn_mask", ")", ":", "\n", "# input: [batch_size x num_agents x input_dim]", "\n", "        ", "batch_size", ",", "num_agents", ",", "input_dim", "=", "input", ".", "size", "(", ")", "\n", "assert", "input_dim", "==", "self", ".", "input_dim", "\n", "\n", "# (B, S, D) -proj-> (B, S, D) -split-> (B, S, H, W) -trans-> (B, H, S, W)", "\n", "q_s", "=", "self", ".", "W_Q", "(", "input", ")", ".", "view", "(", "batch_size", ",", "num_agents", ",", "self", ".", "num_heads", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# q_s: [batch_size x num_heads x num_agents x output_dim]", "\n", "k_s", "=", "self", ".", "W_K", "(", "input", ")", ".", "view", "(", "batch_size", ",", "num_agents", ",", "self", ".", "num_heads", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# k_s: [batch_size x num_heads x num_agents x output_dim]", "\n", "v_s", "=", "self", ".", "W_V", "(", "input", ")", ".", "view", "(", "batch_size", ",", "num_agents", ",", "self", ".", "num_heads", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# v_s: [batch_size x num_heads x num_agents x output_dim]", "\n", "\n", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "attn_mask", "=", "attn_mask", ".", "unsqueeze", "(", "0", ")", "\n", "", "assert", "attn_mask", ".", "size", "(", "0", ")", "==", "batch_size", ",", "'mask dim {} while batch size {}'", ".", "format", "(", "attn_mask", ".", "size", "(", "0", ")", ",", "batch_size", ")", "\n", "\n", "attn_mask", "=", "attn_mask", ".", "unsqueeze", "(", "1", ")", ".", "repeat_interleave", "(", "self", ".", "num_heads", ",", "1", ")", "# attn_mask : [batch_size x num_heads x num_agents x num_agents]", "\n", "assert", "attn_mask", ".", "size", "(", ")", "==", "(", "batch_size", ",", "self", ".", "num_heads", ",", "num_agents", ",", "num_agents", ")", "\n", "\n", "# context: [batch_size x num_heads x num_agents x output_dim]", "\n", "with", "autocast", "(", "enabled", "=", "False", ")", ":", "\n", "            ", "scores", "=", "torch", ".", "matmul", "(", "q_s", ".", "float", "(", ")", ",", "k_s", ".", "float", "(", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "/", "(", "self", ".", "output_dim", "**", "0.5", ")", "# scores : [batch_size x n_heads x num_agents x num_agents]", "\n", "scores", ".", "masked_fill_", "(", "attn_mask", ",", "-", "1e9", ")", "# Fills elements of self tensor with value where mask is one.", "\n", "attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "context", "=", "torch", ".", "matmul", "(", "attn", ",", "v_s", ")", "\n", "context", "=", "context", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "num_agents", ",", "self", ".", "num_heads", "*", "self", ".", "output_dim", ")", "# context: [batch_size x len_q x n_heads * d_v]", "\n", "output", "=", "self", ".", "W_O", "(", "context", ")", "\n", "\n", "return", "output", "# output: [batch_size x num_agents x output_dim]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.model.CommBlock.__init__": [[70, 78], ["torch.Module.__init__", "model.MultiHeadAttention", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", "=", "64", ",", "num_heads", "=", "configs", ".", "num_comm_heads", ",", "num_layers", "=", "configs", ".", "num_comm_layers", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "self_attn", "=", "MultiHeadAttention", "(", "input_dim", ",", "output_dim", ",", "num_heads", ")", "\n", "\n", "self", ".", "update_cell", "=", "nn", ".", "GRUCell", "(", "output_dim", ",", "input_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.model.CommBlock.forward": [[80, 116], ["torch.where.size", "torch.where.size", "torch.where.size", "update_mask.unsqueeze.unsqueeze.nonzero", "range", "comm_mask.sum", "len", "len", "update_mask.unsqueeze.unsqueeze.unsqueeze", "model.CommBlock.self_attn", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.CommBlock.update_cell", "model.CommBlock.update_cell().view", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "len", "model.CommBlock.update_cell", "model.CommBlock.view", "torch.where.view", "torch.where.view", "torch.where.view"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.sum"], ["", "def", "forward", "(", "self", ",", "latent", ",", "comm_mask", ")", ":", "\n", "        ", "'''\n        latent shape: batch_size x num_agents x latent_dim\n        \n        '''", "\n", "num_agents", "=", "latent", ".", "size", "(", "1", ")", "\n", "\n", "# agent indices of agent that use communication", "\n", "update_mask", "=", "comm_mask", ".", "sum", "(", "dim", "=", "-", "1", ")", ">", "1", "\n", "comm_idx", "=", "update_mask", ".", "nonzero", "(", "as_tuple", "=", "True", ")", "\n", "\n", "# no agent use communication, return", "\n", "if", "len", "(", "comm_idx", "[", "0", "]", ")", "==", "0", ":", "\n", "            ", "return", "latent", "\n", "\n", "", "if", "len", "(", "comm_idx", ")", ">", "1", ":", "\n", "            ", "update_mask", "=", "update_mask", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "", "attn_mask", "=", "comm_mask", "==", "False", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "\n", "            ", "info", "=", "self", ".", "self_attn", "(", "latent", ",", "attn_mask", "=", "attn_mask", ")", "\n", "# latent = attn_layer(latent, attn_mask=attn_mask)", "\n", "if", "len", "(", "comm_idx", ")", "==", "1", ":", "\n", "\n", "                ", "batch_idx", "=", "torch", ".", "zeros", "(", "len", "(", "comm_idx", "[", "0", "]", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "latent", "[", "batch_idx", ",", "comm_idx", "[", "0", "]", "]", "=", "self", ".", "update_cell", "(", "info", "[", "batch_idx", ",", "comm_idx", "[", "0", "]", "]", ",", "latent", "[", "batch_idx", ",", "comm_idx", "[", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "update_info", "=", "self", ".", "update_cell", "(", "info", ".", "view", "(", "-", "1", ",", "self", ".", "output_dim", ")", ",", "latent", ".", "view", "(", "-", "1", ",", "self", ".", "input_dim", ")", ")", ".", "view", "(", "configs", ".", "batch_size", ",", "num_agents", ",", "self", ".", "input_dim", ")", "\n", "# update_mask = update_mask.unsqueeze(2)", "\n", "latent", "=", "torch", ".", "where", "(", "update_mask", ",", "update_info", ",", "latent", ")", "\n", "# latent[comm_idx] = self.update_cell(info[comm_idx], latent[comm_idx])", "\n", "# latent = self.update_cell(info, latent)", "\n", "\n", "", "", "return", "latent", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.model.Network.__init__": [[118, 159], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "model.CommBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.Network.named_modules", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model.ResBlock", "model.ResBlock", "model.ResBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Flatten", "torch.Flatten", "torch.Flatten", "isinstance", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", "=", "configs", ".", "obs_shape", ",", "cnn_channel", "=", "configs", ".", "cnn_channel", ",", "hidden_dim", "=", "configs", ".", "hidden_dim", ",", "\n", "max_comm_agents", "=", "configs", ".", "max_comm_agents", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "latent_dim", "=", "16", "*", "7", "*", "7", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "max_comm_agents", "=", "max_comm_agents", "\n", "\n", "self", ".", "obs_encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "input_shape", "[", "0", "]", ",", "cnn_channel", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "ResBlock", "(", "cnn_channel", ")", ",", "\n", "\n", "ResBlock", "(", "cnn_channel", ")", ",", "\n", "\n", "ResBlock", "(", "cnn_channel", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "cnn_channel", ",", "16", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "recurrent", "=", "nn", ".", "GRUCell", "(", "self", ".", "latent_dim", ",", "self", ".", "hidden_dim", ")", "\n", "\n", "self", ".", "comm", "=", "CommBlock", "(", "hidden_dim", ")", "\n", "\n", "# dueling q structure", "\n", "self", ".", "adv", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "5", ")", "\n", "self", ".", "state", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", "\n", "\n", "self", ".", "hidden", "=", "None", "\n", "\n", "for", "_", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.model.Network.step": [[160, 198], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "obs.size", "model.Network.obs_encoder", "model.Network.hidden.unsqueeze", "dist_mat.topk", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "model.Network.comm", "model.Network.hidden.squeeze", "model.Network.adv", "model.Network.state", "torch.argmax().tolist", "torch.argmax().tolist", "torch.argmax().tolist", "torch.argmax().tolist", "torch.argmax().tolist", "torch.argmax().tolist", "torch.argmax().tolist", "torch.argmax().tolist", "torch.argmax().tolist", "model.Network.recurrent", "model.Network.recurrent", "min", "model.Network.mean", "q_val.numpy", "model.Network.hidden.numpy", "torch.bitwise_and.numpy", "torch.bitwise_and.numpy", "torch.bitwise_and.numpy", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "agents_pos.unsqueeze", "agents_pos.unsqueeze"], "methods", ["None"], ["", "", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ",", "obs", ",", "pos", ")", ":", "\n", "        ", "num_agents", "=", "obs", ".", "size", "(", "0", ")", "\n", "\n", "latent", "=", "self", ".", "obs_encoder", "(", "obs", ")", "\n", "\n", "if", "self", ".", "hidden", "is", "None", ":", "\n", "            ", "self", ".", "hidden", "=", "self", ".", "recurrent", "(", "latent", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "hidden", "=", "self", ".", "recurrent", "(", "latent", ",", "self", ".", "hidden", ")", "\n", "\n", "# from num_agents x hidden_dim to 1 x num_agents x hidden_dim", "\n", "", "self", ".", "hidden", "=", "self", ".", "hidden", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# masks for communication block", "\n", "agents_pos", "=", "pos", "\n", "pos_mat", "=", "(", "agents_pos", ".", "unsqueeze", "(", "1", ")", "-", "agents_pos", ".", "unsqueeze", "(", "0", ")", ")", ".", "abs", "(", ")", "\n", "dist_mat", "=", "(", "pos_mat", "[", ":", ",", ":", ",", "0", "]", "**", "2", "+", "pos_mat", "[", ":", ",", ":", ",", "1", "]", "**", "2", ")", ".", "sqrt", "(", ")", "\n", "# mask out agents that out of range of FOV", "\n", "in_obs_mask", "=", "(", "pos_mat", "<=", "configs", ".", "obs_radius", ")", ".", "all", "(", "2", ")", "\n", "# mask out agents that are far away", "\n", "_", ",", "ranking", "=", "dist_mat", ".", "topk", "(", "min", "(", "self", ".", "max_comm_agents", ",", "num_agents", ")", ",", "dim", "=", "1", ",", "largest", "=", "False", ")", "\n", "dist_mask", "=", "torch", ".", "zeros", "(", "(", "num_agents", ",", "num_agents", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "dist_mask", ".", "scatter_", "(", "1", ",", "ranking", ",", "True", ")", "\n", "\n", "comm_mask", "=", "torch", ".", "bitwise_and", "(", "in_obs_mask", ",", "dist_mask", ")", "\n", "\n", "self", ".", "hidden", "=", "self", ".", "comm", "(", "self", ".", "hidden", ",", "comm_mask", ")", "\n", "self", ".", "hidden", "=", "self", ".", "hidden", ".", "squeeze", "(", "0", ")", "\n", "\n", "adv_val", "=", "self", ".", "adv", "(", "self", ".", "hidden", ")", "\n", "state_val", "=", "self", ".", "state", "(", "self", ".", "hidden", ")", "\n", "\n", "q_val", "=", "state_val", "+", "adv_val", "-", "adv_val", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "actions", "=", "torch", ".", "argmax", "(", "q_val", ",", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "return", "actions", ",", "q_val", ".", "numpy", "(", ")", ",", "self", ".", "hidden", ".", "numpy", "(", ")", ",", "comm_mask", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.model.Network.reset": [[199, 201], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "hidden", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.model.Network.forward": [[202, 240], ["torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "obs.contiguous().view.contiguous().view.size", "comm_mask.size", "obs.contiguous().view.contiguous().view.transpose", "obs.contiguous().view.contiguous().view.contiguous().view", "model.Network.obs_encoder", "latent.view().transpose.view().transpose.view().transpose", "range", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "model.Network.adv", "model.Network.state", "comm_mask.size", "model.Network.recurrent", "hidden.view.view.view", "model.Network.comm", "torch.stack().transpose.append", "torch.stack().transpose.append", "torch.stack().transpose.append", "hidden.view.view.view", "model.Network.mean", "obs.contiguous().view.contiguous().view.contiguous", "latent.view().transpose.view().transpose.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "@", "autocast", "(", ")", "\n", "def", "forward", "(", "self", ",", "obs", ",", "steps", ",", "hidden", ",", "comm_mask", ")", ":", "\n", "# comm_mask shape: batch_size x seq_len x max_num_agents x max_num_agents", "\n", "        ", "max_steps", "=", "obs", ".", "size", "(", "1", ")", "\n", "num_agents", "=", "comm_mask", ".", "size", "(", "2", ")", "\n", "\n", "assert", "comm_mask", ".", "size", "(", "2", ")", "==", "configs", ".", "max_num_agents", "\n", "\n", "obs", "=", "obs", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "obs", "=", "obs", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "*", "self", ".", "input_shape", ")", "\n", "\n", "latent", "=", "self", ".", "obs_encoder", "(", "obs", ")", "\n", "\n", "latent", "=", "latent", ".", "view", "(", "configs", ".", "batch_size", "*", "num_agents", ",", "max_steps", ",", "self", ".", "latent_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "hidden_buffer", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "max_steps", ")", ":", "\n", "# hidden size: batch_size*num_agents x self.hidden_dim", "\n", "            ", "hidden", "=", "self", ".", "recurrent", "(", "latent", "[", "i", "]", ",", "hidden", ")", "\n", "hidden", "=", "hidden", ".", "view", "(", "configs", ".", "batch_size", ",", "num_agents", ",", "self", ".", "hidden_dim", ")", "\n", "hidden", "=", "self", ".", "comm", "(", "hidden", ",", "comm_mask", "[", ":", ",", "i", "]", ")", "\n", "# only hidden from agent 0", "\n", "hidden_buffer", ".", "append", "(", "hidden", "[", ":", ",", "0", "]", ")", "\n", "hidden", "=", "hidden", ".", "view", "(", "configs", ".", "batch_size", "*", "num_agents", ",", "self", ".", "hidden_dim", ")", "\n", "\n", "# hidden buffer size: batch_size x seq_len x self.hidden_dim", "\n", "", "hidden_buffer", "=", "torch", ".", "stack", "(", "hidden_buffer", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# hidden size: batch_size x self.hidden_dim", "\n", "hidden", "=", "hidden_buffer", "[", "torch", ".", "arange", "(", "configs", ".", "batch_size", ")", ",", "steps", "-", "1", "]", "\n", "\n", "adv_val", "=", "self", ".", "adv", "(", "hidden", ")", "\n", "state_val", "=", "self", ".", "state", "(", "hidden", ")", "\n", "\n", "q_val", "=", "state_val", "+", "adv_val", "-", "adv_val", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "return", "q_val", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.__init__": [[70, 136], ["numpy.random.choice().astype", "environment.map_partition", "numpy.empty", "numpy.empty", "sum", "range", "environment.Environment.get_heuri_map", "numpy.zeros", "numpy.random.triangular", "len", "numpy.random.choice().astype", "environment.map_partition", "random.randint", "random.choice", "partition_list[].remove", "numpy.asarray", "random.choice", "partition_list[].remove", "numpy.asarray", "sum", "numpy.random.choice", "len", "len", "numpy.random.choice", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.map_partition", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.sum", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.get_heuri_map", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.map_partition", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.sum"], ["    ", "def", "__init__", "(", "self", ",", "num_agents", ":", "int", "=", "configs", ".", "init_env_settings", "[", "0", "]", ",", "map_length", ":", "int", "=", "configs", ".", "init_env_settings", "[", "1", "]", ",", "\n", "obs_radius", ":", "int", "=", "configs", ".", "obs_radius", ",", "reward_fn", ":", "dict", "=", "configs", ".", "reward_fn", ",", "fix_density", "=", "None", ",", "\n", "curriculum", "=", "False", ",", "init_env_settings_set", "=", "configs", ".", "init_env_settings", ")", ":", "\n", "\n", "        ", "self", ".", "curriculum", "=", "curriculum", "\n", "if", "curriculum", ":", "\n", "            ", "self", ".", "env_set", "=", "[", "init_env_settings_set", "]", "\n", "self", ".", "num_agents", "=", "init_env_settings_set", "[", "0", "]", "\n", "self", ".", "map_size", "=", "(", "init_env_settings_set", "[", "1", "]", ",", "init_env_settings_set", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_agents", "=", "num_agents", "\n", "self", ".", "map_size", "=", "(", "map_length", ",", "map_length", ")", "\n", "\n", "# set as same as in PRIMAL", "\n", "", "if", "fix_density", "is", "None", ":", "\n", "            ", "self", ".", "fix_density", "=", "False", "\n", "self", ".", "obstacle_density", "=", "np", ".", "random", ".", "triangular", "(", "0", ",", "0.33", ",", "0.5", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fix_density", "=", "True", "\n", "self", ".", "obstacle_density", "=", "fix_density", "\n", "\n", "", "self", ".", "map", "=", "np", ".", "random", ".", "choice", "(", "2", ",", "self", ".", "map_size", ",", "p", "=", "[", "1", "-", "self", ".", "obstacle_density", ",", "self", ".", "obstacle_density", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "partition_list", "=", "map_partition", "(", "self", ".", "map", ")", "\n", "partition_list", "=", "[", "partition", "for", "partition", "in", "partition_list", "if", "len", "(", "partition", ")", ">=", "2", "]", "\n", "\n", "while", "len", "(", "partition_list", ")", "==", "0", ":", "\n", "            ", "self", ".", "map", "=", "np", ".", "random", ".", "choice", "(", "2", ",", "self", ".", "map_size", ",", "p", "=", "[", "1", "-", "self", ".", "obstacle_density", ",", "self", ".", "obstacle_density", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "partition_list", "=", "map_partition", "(", "self", ".", "map", ")", "\n", "partition_list", "=", "[", "partition", "for", "partition", "in", "partition_list", "if", "len", "(", "partition", ")", ">=", "2", "]", "\n", "\n", "", "self", ".", "agents_pos", "=", "np", ".", "empty", "(", "(", "self", ".", "num_agents", ",", "2", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "self", ".", "goals_pos", "=", "np", ".", "empty", "(", "(", "self", ".", "num_agents", ",", "2", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "pos_num", "=", "sum", "(", "[", "len", "(", "partition", ")", "for", "partition", "in", "partition_list", "]", ")", "\n", "\n", "# loop to assign agent original position and goal position for each agent", "\n", "for", "i", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\n", "            ", "pos_idx", "=", "random", ".", "randint", "(", "0", ",", "pos_num", "-", "1", ")", "\n", "partition_idx", "=", "0", "\n", "for", "partition", "in", "partition_list", ":", "\n", "                ", "if", "pos_idx", ">=", "len", "(", "partition", ")", ":", "\n", "                    ", "pos_idx", "-=", "len", "(", "partition", ")", "\n", "partition_idx", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "pos", "=", "random", ".", "choice", "(", "partition_list", "[", "partition_idx", "]", ")", "\n", "partition_list", "[", "partition_idx", "]", ".", "remove", "(", "pos", ")", "\n", "self", ".", "agents_pos", "[", "i", "]", "=", "np", ".", "asarray", "(", "pos", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "pos", "=", "random", ".", "choice", "(", "partition_list", "[", "partition_idx", "]", ")", "\n", "partition_list", "[", "partition_idx", "]", ".", "remove", "(", "pos", ")", "\n", "self", ".", "goals_pos", "[", "i", "]", "=", "np", ".", "asarray", "(", "pos", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "partition_list", "=", "[", "partition", "for", "partition", "in", "partition_list", "if", "len", "(", "partition", ")", ">=", "2", "]", "\n", "pos_num", "=", "sum", "(", "[", "len", "(", "partition", ")", "for", "partition", "in", "partition_list", "]", ")", "\n", "\n", "", "self", ".", "obs_radius", "=", "obs_radius", "\n", "\n", "self", ".", "reward_fn", "=", "reward_fn", "\n", "self", ".", "get_heuri_map", "(", ")", "\n", "self", ".", "steps", "=", "0", "\n", "\n", "self", ".", "last_actions", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_agents", ",", "5", ",", "2", "*", "obs_radius", "+", "1", ",", "2", "*", "obs_radius", "+", "1", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.update_env_settings_set": [[138, 140], ["None"], "methods", ["None"], ["", "def", "update_env_settings_set", "(", "self", ",", "new_env_settings_set", ")", ":", "\n", "        ", "self", ".", "env_set", "=", "new_env_settings_set", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.reset": [[141, 198], ["numpy.random.choice().astype", "environment.map_partition", "numpy.empty", "numpy.empty", "sum", "range", "environment.Environment.get_heuri_map", "numpy.zeros", "environment.Environment.observe", "random.choice", "numpy.random.triangular", "len", "numpy.random.choice().astype", "environment.map_partition", "random.randint", "random.choice", "partition_list[].remove", "numpy.asarray", "random.choice", "partition_list[].remove", "numpy.asarray", "sum", "numpy.random.choice", "len", "len", "numpy.random.choice", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.map_partition", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.sum", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.get_heuri_map", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.observe", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.map_partition", "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.buffer.SumTree.sum"], ["", "def", "reset", "(", "self", ",", "num_agents", "=", "None", ",", "map_length", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "curriculum", ":", "\n", "            ", "rand", "=", "random", ".", "choice", "(", "self", ".", "env_set", ")", "\n", "self", ".", "num_agents", "=", "rand", "[", "0", "]", "\n", "self", ".", "map_size", "=", "(", "rand", "[", "1", "]", ",", "rand", "[", "1", "]", ")", "\n", "\n", "", "elif", "num_agents", "is", "not", "None", "and", "map_length", "is", "not", "None", ":", "\n", "            ", "self", ".", "num_agents", "=", "num_agents", "\n", "self", ".", "map_size", "=", "(", "map_length", ",", "map_length", ")", "\n", "\n", "", "if", "not", "self", ".", "fix_density", ":", "\n", "            ", "self", ".", "obstacle_density", "=", "np", ".", "random", ".", "triangular", "(", "0", ",", "0.33", ",", "0.5", ")", "\n", "\n", "", "self", ".", "map", "=", "np", ".", "random", ".", "choice", "(", "2", ",", "self", ".", "map_size", ",", "p", "=", "[", "1", "-", "self", ".", "obstacle_density", ",", "self", ".", "obstacle_density", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "partition_list", "=", "map_partition", "(", "self", ".", "map", ")", "\n", "partition_list", "=", "[", "partition", "for", "partition", "in", "partition_list", "if", "len", "(", "partition", ")", ">=", "2", "]", "\n", "\n", "while", "len", "(", "partition_list", ")", "==", "0", ":", "\n", "            ", "self", ".", "map", "=", "np", ".", "random", ".", "choice", "(", "2", ",", "self", ".", "map_size", ",", "p", "=", "[", "1", "-", "self", ".", "obstacle_density", ",", "self", ".", "obstacle_density", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "partition_list", "=", "map_partition", "(", "self", ".", "map", ")", "\n", "partition_list", "=", "[", "partition", "for", "partition", "in", "partition_list", "if", "len", "(", "partition", ")", ">=", "2", "]", "\n", "\n", "", "self", ".", "agents_pos", "=", "np", ".", "empty", "(", "(", "self", ".", "num_agents", ",", "2", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "self", ".", "goals_pos", "=", "np", ".", "empty", "(", "(", "self", ".", "num_agents", ",", "2", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "pos_num", "=", "sum", "(", "[", "len", "(", "partition", ")", "for", "partition", "in", "partition_list", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\n", "            ", "pos_idx", "=", "random", ".", "randint", "(", "0", ",", "pos_num", "-", "1", ")", "\n", "partition_idx", "=", "0", "\n", "for", "partition", "in", "partition_list", ":", "\n", "                ", "if", "pos_idx", ">=", "len", "(", "partition", ")", ":", "\n", "                    ", "pos_idx", "-=", "len", "(", "partition", ")", "\n", "partition_idx", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "pos", "=", "random", ".", "choice", "(", "partition_list", "[", "partition_idx", "]", ")", "\n", "partition_list", "[", "partition_idx", "]", ".", "remove", "(", "pos", ")", "\n", "self", ".", "agents_pos", "[", "i", "]", "=", "np", ".", "asarray", "(", "pos", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "pos", "=", "random", ".", "choice", "(", "partition_list", "[", "partition_idx", "]", ")", "\n", "partition_list", "[", "partition_idx", "]", ".", "remove", "(", "pos", ")", "\n", "self", ".", "goals_pos", "[", "i", "]", "=", "np", ".", "asarray", "(", "pos", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "partition_list", "=", "[", "partition", "for", "partition", "in", "partition_list", "if", "len", "(", "partition", ")", ">=", "2", "]", "\n", "pos_num", "=", "sum", "(", "[", "len", "(", "partition", ")", "for", "partition", "in", "partition_list", "]", ")", "\n", "\n", "", "self", ".", "steps", "=", "0", "\n", "self", ".", "get_heuri_map", "(", ")", "\n", "\n", "self", ".", "last_actions", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_agents", ",", "5", ",", "2", "*", "self", ".", "obs_radius", "+", "1", ",", "2", "*", "self", ".", "obs_radius", "+", "1", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "return", "self", ".", "observe", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.load": [[199, 215], ["numpy.copy", "numpy.copy", "numpy.copy", "environment.Environment.get_heuri_map", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.get_heuri_map"], ["", "def", "load", "(", "self", ",", "map", ":", "np", ".", "ndarray", ",", "agents_pos", ":", "np", ".", "ndarray", ",", "goals_pos", ":", "np", ".", "ndarray", ")", ":", "\n", "\n", "        ", "self", ".", "map", "=", "np", ".", "copy", "(", "map", ")", "\n", "self", ".", "agents_pos", "=", "np", ".", "copy", "(", "agents_pos", ")", "\n", "self", ".", "goals_pos", "=", "np", ".", "copy", "(", "goals_pos", ")", "\n", "\n", "self", ".", "num_agents", "=", "agents_pos", ".", "shape", "[", "0", "]", "\n", "self", ".", "map_size", "=", "(", "self", ".", "map", ".", "shape", "[", "0", "]", ",", "self", ".", "map", ".", "shape", "[", "1", "]", ")", "\n", "\n", "self", ".", "steps", "=", "0", "\n", "\n", "self", ".", "imgs", "=", "[", "]", "\n", "\n", "self", ".", "get_heuri_map", "(", ")", "\n", "\n", "self", ".", "last_actions", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_agents", ",", "5", ",", "2", "*", "self", ".", "obs_radius", "+", "1", ",", "2", "*", "self", ".", "obs_radius", "+", "1", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.get_heuri_map": [[216, 276], ["range", "numpy.zeros", "range", "numpy.pad", "numpy.ones", "list", "tuple", "list.append", "range", "list.pop", "range", "list.append", "list.append", "list.append", "list.append"], "methods", ["None"], ["", "def", "get_heuri_map", "(", "self", ")", ":", "\n", "        ", "dist_map", "=", "np", ".", "ones", "(", "(", "self", ".", "num_agents", ",", "*", "self", ".", "map_size", ")", ",", "dtype", "=", "np", ".", "int32", ")", "*", "2147483647", "\n", "for", "i", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "            ", "open_list", "=", "list", "(", ")", "\n", "x", ",", "y", "=", "tuple", "(", "self", ".", "goals_pos", "[", "i", "]", ")", "\n", "open_list", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "dist_map", "[", "i", ",", "x", ",", "y", "]", "=", "0", "\n", "\n", "while", "open_list", ":", "\n", "                ", "x", ",", "y", "=", "open_list", ".", "pop", "(", "0", ")", "\n", "dist", "=", "dist_map", "[", "i", ",", "x", ",", "y", "]", "\n", "\n", "up", "=", "x", "-", "1", ",", "y", "\n", "if", "up", "[", "0", "]", ">=", "0", "and", "self", ".", "map", "[", "up", "]", "==", "0", "and", "dist_map", "[", "i", ",", "x", "-", "1", ",", "y", "]", ">", "dist", "+", "1", ":", "\n", "                    ", "dist_map", "[", "i", ",", "x", "-", "1", ",", "y", "]", "=", "dist", "+", "1", "\n", "if", "up", "not", "in", "open_list", ":", "\n", "                        ", "open_list", ".", "append", "(", "up", ")", "\n", "\n", "", "", "down", "=", "x", "+", "1", ",", "y", "\n", "if", "down", "[", "0", "]", "<", "self", ".", "map_size", "[", "0", "]", "and", "self", ".", "map", "[", "down", "]", "==", "0", "and", "dist_map", "[", "i", ",", "x", "+", "1", ",", "y", "]", ">", "dist", "+", "1", ":", "\n", "                    ", "dist_map", "[", "i", ",", "x", "+", "1", ",", "y", "]", "=", "dist", "+", "1", "\n", "if", "down", "not", "in", "open_list", ":", "\n", "                        ", "open_list", ".", "append", "(", "down", ")", "\n", "\n", "", "", "left", "=", "x", ",", "y", "-", "1", "\n", "if", "left", "[", "1", "]", ">=", "0", "and", "self", ".", "map", "[", "left", "]", "==", "0", "and", "dist_map", "[", "i", ",", "x", ",", "y", "-", "1", "]", ">", "dist", "+", "1", ":", "\n", "                    ", "dist_map", "[", "i", ",", "x", ",", "y", "-", "1", "]", "=", "dist", "+", "1", "\n", "if", "left", "not", "in", "open_list", ":", "\n", "                        ", "open_list", ".", "append", "(", "left", ")", "\n", "\n", "", "", "right", "=", "x", ",", "y", "+", "1", "\n", "if", "right", "[", "1", "]", "<", "self", ".", "map_size", "[", "1", "]", "and", "self", ".", "map", "[", "right", "]", "==", "0", "and", "dist_map", "[", "i", ",", "x", ",", "y", "+", "1", "]", ">", "dist", "+", "1", ":", "\n", "                    ", "dist_map", "[", "i", ",", "x", ",", "y", "+", "1", "]", "=", "dist", "+", "1", "\n", "if", "right", "not", "in", "open_list", ":", "\n", "                        ", "open_list", ".", "append", "(", "right", ")", "\n", "\n", "", "", "", "", "self", ".", "heuri_map", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_agents", ",", "4", ",", "*", "self", ".", "map_size", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "for", "x", "in", "range", "(", "self", ".", "map_size", "[", "0", "]", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "self", ".", "map_size", "[", "1", "]", ")", ":", "\n", "                ", "if", "self", ".", "map", "[", "x", ",", "y", "]", "==", "0", ":", "\n", "                    ", "for", "i", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "\n", "                        ", "if", "x", ">", "0", "and", "dist_map", "[", "i", ",", "x", "-", "1", ",", "y", "]", "<", "dist_map", "[", "i", ",", "x", ",", "y", "]", ":", "\n", "                            ", "assert", "dist_map", "[", "i", ",", "x", "-", "1", ",", "y", "]", "==", "dist_map", "[", "i", ",", "x", ",", "y", "]", "-", "1", "\n", "self", ".", "heuri_map", "[", "i", ",", "0", ",", "x", ",", "y", "]", "=", "1", "\n", "\n", "", "if", "x", "<", "self", ".", "map_size", "[", "0", "]", "-", "1", "and", "dist_map", "[", "i", ",", "x", "+", "1", ",", "y", "]", "<", "dist_map", "[", "i", ",", "x", ",", "y", "]", ":", "\n", "                            ", "assert", "dist_map", "[", "i", ",", "x", "+", "1", ",", "y", "]", "==", "dist_map", "[", "i", ",", "x", ",", "y", "]", "-", "1", "\n", "self", ".", "heuri_map", "[", "i", ",", "1", ",", "x", ",", "y", "]", "=", "1", "\n", "\n", "", "if", "y", ">", "0", "and", "dist_map", "[", "i", ",", "x", ",", "y", "-", "1", "]", "<", "dist_map", "[", "i", ",", "x", ",", "y", "]", ":", "\n", "                            ", "assert", "dist_map", "[", "i", ",", "x", ",", "y", "-", "1", "]", "==", "dist_map", "[", "i", ",", "x", ",", "y", "]", "-", "1", "\n", "self", ".", "heuri_map", "[", "i", ",", "2", ",", "x", ",", "y", "]", "=", "1", "\n", "\n", "", "if", "y", "<", "self", ".", "map_size", "[", "1", "]", "-", "1", "and", "dist_map", "[", "i", ",", "x", ",", "y", "+", "1", "]", "<", "dist_map", "[", "i", ",", "x", ",", "y", "]", ":", "\n", "                            ", "assert", "dist_map", "[", "i", ",", "x", ",", "y", "+", "1", "]", "==", "dist_map", "[", "i", ",", "x", ",", "y", "]", "-", "1", "\n", "self", ".", "heuri_map", "[", "i", ",", "3", ",", "x", ",", "y", "]", "=", "1", "\n", "\n", "", "", "", "", "", "self", ".", "heuri_map", "=", "np", ".", "pad", "(", "self", ".", "heuri_map", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "self", ".", "obs_radius", ",", "self", ".", "obs_radius", ")", ",", "(", "self", ".", "obs_radius", ",", "self", ".", "obs_radius", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.step": [[277, 420], ["all", "numpy.copy", "checking_list.copy", "checking_list.copy", "numpy.copy", "numpy.array_equal", "numpy.zeros", "len", "len", "print", "print", "print", "RuntimeError", "environment.Environment.observe", "range", "numpy.array_equal", "checking_list.remove", "rewards.append", "numpy.any", "numpy.any", "checking_list.remove", "[].tolist", "rewards.append", "rewards.append", "checking_list.remove", "numpy.where", "target_agent_id.item.item.item", "numpy.array_equal", "len", "[].tolist.copy", "range", "numpy.unique", "numpy.arange", "numpy.array", "numpy.all", "checking_list.remove", "checking_list.remove", "next_pos[].tolist", "zip", "next_pos[].tolist.sort", "[].tolist.remove", "checking_list.remove", "tuple", "numpy.where", "[].tolist.remove", "pos.append", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.observe"], ["", "def", "step", "(", "self", ",", "actions", ":", "List", "[", "int", "]", ")", ":", "\n", "        ", "'''\n        actions:\n            list of indices\n                0 stay\n                1 up\n                2 down\n                3 left\n                4 right\n        '''", "\n", "\n", "assert", "len", "(", "actions", ")", "==", "self", ".", "num_agents", ",", "'only {} actions as input while {} agents in environment'", ".", "format", "(", "len", "(", "actions", ")", ",", "self", ".", "num_agents", ")", "\n", "assert", "all", "(", "[", "action_idx", "<", "5", "and", "action_idx", ">=", "0", "for", "action_idx", "in", "actions", "]", ")", ",", "'action index out of range'", "\n", "\n", "checking_list", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "num_agents", ")", "]", "\n", "\n", "rewards", "=", "[", "]", "\n", "next_pos", "=", "np", ".", "copy", "(", "self", ".", "agents_pos", ")", "\n", "\n", "# remove unmoving agent id", "\n", "for", "agent_id", "in", "checking_list", ".", "copy", "(", ")", ":", "\n", "            ", "if", "actions", "[", "agent_id", "]", "==", "0", ":", "\n", "# unmoving", "\n", "\n", "                ", "if", "np", ".", "array_equal", "(", "self", ".", "agents_pos", "[", "agent_id", "]", ",", "self", ".", "goals_pos", "[", "agent_id", "]", ")", ":", "\n", "                    ", "rewards", ".", "append", "(", "self", ".", "reward_fn", "[", "'stay_on_goal'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "rewards", ".", "append", "(", "self", ".", "reward_fn", "[", "'stay_off_goal'", "]", ")", "\n", "\n", "", "checking_list", ".", "remove", "(", "agent_id", ")", "\n", "", "else", ":", "\n", "# move", "\n", "                ", "next_pos", "[", "agent_id", "]", "+=", "action_list", "[", "actions", "[", "agent_id", "]", "]", "\n", "rewards", ".", "append", "(", "self", ".", "reward_fn", "[", "'move'", "]", ")", "\n", "\n", "# first round check, these two conflicts have the heightest priority", "\n", "", "", "for", "agent_id", "in", "checking_list", ".", "copy", "(", ")", ":", "\n", "\n", "            ", "if", "np", ".", "any", "(", "next_pos", "[", "agent_id", "]", "<", "0", ")", "or", "np", ".", "any", "(", "next_pos", "[", "agent_id", "]", ">=", "self", ".", "map_size", "[", "0", "]", ")", ":", "\n", "# agent out of map range", "\n", "                ", "rewards", "[", "agent_id", "]", "=", "self", ".", "reward_fn", "[", "'collision'", "]", "\n", "next_pos", "[", "agent_id", "]", "=", "self", ".", "agents_pos", "[", "agent_id", "]", "\n", "checking_list", ".", "remove", "(", "agent_id", ")", "\n", "\n", "", "elif", "self", ".", "map", "[", "tuple", "(", "next_pos", "[", "agent_id", "]", ")", "]", "==", "1", ":", "\n", "# collide obstacle", "\n", "                ", "rewards", "[", "agent_id", "]", "=", "self", ".", "reward_fn", "[", "'collision'", "]", "\n", "next_pos", "[", "agent_id", "]", "=", "self", ".", "agents_pos", "[", "agent_id", "]", "\n", "checking_list", ".", "remove", "(", "agent_id", ")", "\n", "\n", "# second round check, agent swapping conflict", "\n", "", "", "no_conflict", "=", "False", "\n", "while", "not", "no_conflict", ":", "\n", "\n", "            ", "no_conflict", "=", "True", "\n", "for", "agent_id", "in", "checking_list", ":", "\n", "\n", "                ", "target_agent_id", "=", "np", ".", "where", "(", "np", ".", "all", "(", "next_pos", "[", "agent_id", "]", "==", "self", ".", "agents_pos", ",", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "\n", "if", "target_agent_id", ":", "\n", "\n", "                    ", "target_agent_id", "=", "target_agent_id", ".", "item", "(", ")", "\n", "assert", "target_agent_id", "!=", "agent_id", ",", "'logic bug'", "\n", "\n", "if", "np", ".", "array_equal", "(", "next_pos", "[", "target_agent_id", "]", ",", "self", ".", "agents_pos", "[", "agent_id", "]", ")", ":", "\n", "                        ", "assert", "target_agent_id", "in", "checking_list", ",", "'target_agent_id should be in checking list'", "\n", "\n", "next_pos", "[", "agent_id", "]", "=", "self", ".", "agents_pos", "[", "agent_id", "]", "\n", "rewards", "[", "agent_id", "]", "=", "self", ".", "reward_fn", "[", "'collision'", "]", "\n", "\n", "next_pos", "[", "target_agent_id", "]", "=", "self", ".", "agents_pos", "[", "target_agent_id", "]", "\n", "rewards", "[", "target_agent_id", "]", "=", "self", ".", "reward_fn", "[", "'collision'", "]", "\n", "\n", "checking_list", ".", "remove", "(", "agent_id", ")", "\n", "checking_list", ".", "remove", "(", "target_agent_id", ")", "\n", "\n", "no_conflict", "=", "False", "\n", "break", "\n", "\n", "# third round check, agent collision conflict", "\n", "", "", "", "", "no_conflict", "=", "False", "\n", "while", "not", "no_conflict", ":", "\n", "            ", "no_conflict", "=", "True", "\n", "for", "agent_id", "in", "checking_list", ":", "\n", "\n", "                ", "collide_agent_id", "=", "np", ".", "where", "(", "np", ".", "all", "(", "next_pos", "==", "next_pos", "[", "agent_id", "]", ",", "axis", "=", "1", ")", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "if", "len", "(", "collide_agent_id", ")", ">", "1", ":", "\n", "# collide agent", "\n", "\n", "# if all agents in collide agent are in checking list", "\n", "                    ", "all_in_checking", "=", "True", "\n", "for", "id", "in", "collide_agent_id", ".", "copy", "(", ")", ":", "\n", "                        ", "if", "id", "not", "in", "checking_list", ":", "\n", "                            ", "all_in_checking", "=", "False", "\n", "collide_agent_id", ".", "remove", "(", "id", ")", "\n", "\n", "", "", "if", "all_in_checking", ":", "\n", "\n", "                        ", "collide_agent_pos", "=", "next_pos", "[", "collide_agent_id", "]", ".", "tolist", "(", ")", "\n", "for", "pos", ",", "id", "in", "zip", "(", "collide_agent_pos", ",", "collide_agent_id", ")", ":", "\n", "                            ", "pos", ".", "append", "(", "id", ")", "\n", "", "collide_agent_pos", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", "*", "self", ".", "map_size", "[", "0", "]", "+", "x", "[", "1", "]", ")", "\n", "\n", "collide_agent_id", ".", "remove", "(", "collide_agent_pos", "[", "0", "]", "[", "2", "]", ")", "\n", "\n", "# checking_list.remove(collide_agent_pos[0][2])", "\n", "\n", "", "next_pos", "[", "collide_agent_id", "]", "=", "self", ".", "agents_pos", "[", "collide_agent_id", "]", "\n", "for", "id", "in", "collide_agent_id", ":", "\n", "                        ", "rewards", "[", "id", "]", "=", "self", ".", "reward_fn", "[", "'collision'", "]", "\n", "\n", "", "for", "id", "in", "collide_agent_id", ":", "\n", "                        ", "checking_list", ".", "remove", "(", "id", ")", "\n", "\n", "", "no_conflict", "=", "False", "\n", "break", "\n", "\n", "# self.history.append(np.copy(next_pos))", "\n", "", "", "", "self", ".", "agents_pos", "=", "np", ".", "copy", "(", "next_pos", ")", "\n", "\n", "self", ".", "steps", "+=", "1", "\n", "\n", "# check done", "\n", "if", "np", ".", "array_equal", "(", "self", ".", "agents_pos", ",", "self", ".", "goals_pos", ")", ":", "\n", "            ", "done", "=", "True", "\n", "rewards", "=", "[", "self", ".", "reward_fn", "[", "'finish'", "]", "for", "_", "in", "range", "(", "self", ".", "num_agents", ")", "]", "\n", "", "else", ":", "\n", "            ", "done", "=", "False", "\n", "\n", "", "info", "=", "{", "'step'", ":", "self", ".", "steps", "-", "1", "}", "\n", "\n", "# make sure no overlapping agents", "\n", "if", "np", ".", "unique", "(", "self", ".", "agents_pos", ",", "axis", "=", "0", ")", ".", "shape", "[", "0", "]", "<", "self", ".", "num_agents", ":", "\n", "            ", "print", "(", "self", ".", "steps", ")", "\n", "print", "(", "self", ".", "map", ")", "\n", "print", "(", "self", ".", "agents_pos", ")", "\n", "raise", "RuntimeError", "(", "'unique'", ")", "\n", "\n", "# update last actions", "\n", "", "self", ".", "last_actions", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_agents", ",", "5", ",", "2", "*", "self", ".", "obs_radius", "+", "1", ",", "2", "*", "self", ".", "obs_radius", "+", "1", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "self", ".", "last_actions", "[", "np", ".", "arange", "(", "self", ".", "num_agents", ")", ",", "np", ".", "array", "(", "actions", ")", "]", "=", "1", "\n", "\n", "return", "self", ".", "observe", "(", ")", ",", "rewards", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.observe": [[422, 455], ["numpy.zeros", "numpy.pad", "numpy.zeros", "numpy.pad", "enumerate", "numpy.copy"], "methods", ["None"], ["", "def", "observe", "(", "self", ")", ":", "\n", "        ", "'''\n        return observation and position for each agent\n\n        obs: shape (num_agents, 11, 2*obs_radius+1, 2*obs_radius+1)\n            layer 1: agent map \n            layer 2: obstacle map\n            layer 3-6: heuristic map\n            layer 7-11: one-hot representation of agent's last action\n        \n        pos: used for caculating communication mask\n\n        '''", "\n", "obs", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_agents", ",", "6", ",", "2", "*", "self", ".", "obs_radius", "+", "1", ",", "2", "*", "self", ".", "obs_radius", "+", "1", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "# 0 represents obstacle to match 0 padding in CNN ", "\n", "obstacle_map", "=", "np", ".", "pad", "(", "self", ".", "map", ",", "self", ".", "obs_radius", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "\n", "agent_map", "=", "np", ".", "zeros", "(", "(", "self", ".", "map_size", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "agent_map", "[", "self", ".", "agents_pos", "[", ":", ",", "0", "]", ",", "self", ".", "agents_pos", "[", ":", ",", "1", "]", "]", "=", "1", "\n", "agent_map", "=", "np", ".", "pad", "(", "agent_map", ",", "self", ".", "obs_radius", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "\n", "for", "i", ",", "agent_pos", "in", "enumerate", "(", "self", ".", "agents_pos", ")", ":", "\n", "            ", "x", ",", "y", "=", "agent_pos", "\n", "\n", "obs", "[", "i", ",", "0", "]", "=", "agent_map", "[", "x", ":", "x", "+", "2", "*", "self", ".", "obs_radius", "+", "1", ",", "y", ":", "y", "+", "2", "*", "self", ".", "obs_radius", "+", "1", "]", "\n", "obs", "[", "i", ",", "0", ",", "self", ".", "obs_radius", ",", "self", ".", "obs_radius", "]", "=", "0", "\n", "obs", "[", "i", ",", "1", "]", "=", "obstacle_map", "[", "x", ":", "x", "+", "2", "*", "self", ".", "obs_radius", "+", "1", ",", "y", ":", "y", "+", "2", "*", "self", ".", "obs_radius", "+", "1", "]", "\n", "obs", "[", "i", ",", "2", ":", "]", "=", "self", ".", "heuri_map", "[", "i", ",", ":", ",", "x", ":", "x", "+", "2", "*", "self", ".", "obs_radius", "+", "1", ",", "y", ":", "y", "+", "2", "*", "self", ".", "obs_radius", "+", "1", "]", "\n", "\n", "# obs = np.concatenate((obs, self.last_actions), axis=1)", "\n", "\n", "", "return", "obs", ",", "np", ".", "copy", "(", "self", ".", "agents_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.render": [[456, 491], ["numpy.copy", "range", "map.astype.astype.astype", "environment.Environment.imgs.append", "hasattr", "matplotlib.imshow", "matplotlib.show", "matplotlib.pause", "hasattr", "matplotlib.figure", "numpy.array_equal", "enumerate", "enumerate", "zip", "environment.Environment.texts[].set_position", "environment.Environment.texts[].set_text", "zip", "matplotlib.text", "matplotlib.text", "environment.Environment.texts.append", "tuple", "tuple", "tuple"], "methods", ["None"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'fig'", ")", ":", "\n", "            ", "self", ".", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "", "map", "=", "np", ".", "copy", "(", "self", ".", "map", ")", "\n", "for", "agent_id", "in", "range", "(", "self", ".", "num_agents", ")", ":", "\n", "            ", "if", "np", ".", "array_equal", "(", "self", ".", "agents_pos", "[", "agent_id", "]", ",", "self", ".", "goals_pos", "[", "agent_id", "]", ")", ":", "\n", "                ", "map", "[", "tuple", "(", "self", ".", "agents_pos", "[", "agent_id", "]", ")", "]", "=", "4", "\n", "", "else", ":", "\n", "                ", "map", "[", "tuple", "(", "self", ".", "agents_pos", "[", "agent_id", "]", ")", "]", "=", "2", "\n", "map", "[", "tuple", "(", "self", ".", "goals_pos", "[", "agent_id", "]", ")", "]", "=", "3", "\n", "\n", "", "", "map", "=", "map", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# plt.xlabel('step: {}'.format(self.steps))", "\n", "\n", "# add text in plot", "\n", "self", ".", "imgs", ".", "append", "(", "[", "]", ")", "\n", "if", "hasattr", "(", "self", ",", "'texts'", ")", ":", "\n", "            ", "for", "i", ",", "(", "(", "agent_x", ",", "agent_y", ")", ",", "(", "goal_x", ",", "goal_y", ")", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "agents_pos", ",", "self", ".", "goals_pos", ")", ")", ":", "\n", "                ", "self", ".", "texts", "[", "i", "]", ".", "set_position", "(", "(", "agent_y", ",", "agent_x", ")", ")", "\n", "self", ".", "texts", "[", "i", "]", ".", "set_text", "(", "i", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "texts", "=", "[", "]", "\n", "for", "i", ",", "(", "(", "agent_x", ",", "agent_y", ")", ",", "(", "goal_x", ",", "goal_y", ")", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "agents_pos", ",", "self", ".", "goals_pos", ")", ")", ":", "\n", "                ", "text", "=", "plt", ".", "text", "(", "agent_y", ",", "agent_x", ",", "i", ",", "color", "=", "'black'", ",", "ha", "=", "'center'", ",", "va", "=", "'center'", ")", "\n", "plt", ".", "text", "(", "goal_y", ",", "goal_x", ",", "i", ",", "color", "=", "'black'", ",", "ha", "=", "'center'", ",", "va", "=", "'center'", ")", "\n", "self", ".", "texts", ".", "append", "(", "text", ")", "\n", "\n", "\n", "", "", "plt", ".", "imshow", "(", "color_map", "[", "map", "]", ",", "animated", "=", "True", ")", "\n", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "# plt.ion()", "\n", "plt", ".", "pause", "(", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.close": [[492, 495], ["matplotlib.close"], "methods", ["home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.Environment.close"], ["", "def", "close", "(", "self", ",", "save", "=", "False", ")", ":", "\n", "        ", "plt", ".", "close", "(", ")", "\n", "del", "self", ".", "fig", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZiyuanMa_DHC.None.environment.map_partition": [[19, 68], ["numpy.argwhere().astype().tolist", "list", "tuple", "RuntimeError", "np.argwhere().astype().tolist.pop", "list", "list.append", "list", "list.append", "numpy.argwhere().astype", "list.pop", "list.append", "np.argwhere().astype().tolist.remove", "list.append", "np.argwhere().astype().tolist.remove", "list.append", "np.argwhere().astype().tolist.remove", "list.append", "np.argwhere().astype().tolist.remove", "list.append", "numpy.argwhere"], "function", ["None"], ["def", "map_partition", "(", "map", ")", ":", "\n", "    ", "'''\n    partitioning map into independent partitions \n    '''", "\n", "\n", "empty_pos", "=", "np", ".", "argwhere", "(", "map", "==", "0", ")", ".", "astype", "(", "np", ".", "int", ")", ".", "tolist", "(", ")", "\n", "\n", "empty_pos", "=", "[", "tuple", "(", "pos", ")", "for", "pos", "in", "empty_pos", "]", "\n", "\n", "if", "not", "empty_pos", ":", "\n", "        ", "raise", "RuntimeError", "(", "'no empty position'", ")", "\n", "\n", "", "partition_list", "=", "list", "(", ")", "\n", "while", "empty_pos", ":", "\n", "\n", "        ", "start_pos", "=", "empty_pos", ".", "pop", "(", ")", "\n", "\n", "open_list", "=", "list", "(", ")", "\n", "open_list", ".", "append", "(", "start_pos", ")", "\n", "close_list", "=", "list", "(", ")", "\n", "\n", "while", "open_list", ":", "\n", "            ", "x", ",", "y", "=", "open_list", ".", "pop", "(", "0", ")", "\n", "\n", "up", "=", "x", "-", "1", ",", "y", "\n", "if", "up", "[", "0", "]", ">=", "0", "and", "map", "[", "up", "]", "==", "0", "and", "up", "in", "empty_pos", ":", "\n", "                ", "empty_pos", ".", "remove", "(", "up", ")", "\n", "open_list", ".", "append", "(", "up", ")", "\n", "\n", "", "down", "=", "x", "+", "1", ",", "y", "\n", "if", "down", "[", "0", "]", "<", "map", ".", "shape", "[", "0", "]", "and", "map", "[", "down", "]", "==", "0", "and", "down", "in", "empty_pos", ":", "\n", "                ", "empty_pos", ".", "remove", "(", "down", ")", "\n", "open_list", ".", "append", "(", "down", ")", "\n", "\n", "", "left", "=", "x", ",", "y", "-", "1", "\n", "if", "left", "[", "1", "]", ">=", "0", "and", "map", "[", "left", "]", "==", "0", "and", "left", "in", "empty_pos", ":", "\n", "                ", "empty_pos", ".", "remove", "(", "left", ")", "\n", "open_list", ".", "append", "(", "left", ")", "\n", "\n", "", "right", "=", "x", ",", "y", "+", "1", "\n", "if", "right", "[", "1", "]", "<", "map", ".", "shape", "[", "1", "]", "and", "map", "[", "right", "]", "==", "0", "and", "right", "in", "empty_pos", ":", "\n", "                ", "empty_pos", ".", "remove", "(", "right", ")", "\n", "open_list", ".", "append", "(", "right", ")", "\n", "\n", "", "close_list", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "\n", "", "partition_list", ".", "append", "(", "close_list", ")", "\n", "\n", "", "return", "partition_list", "\n", "\n"]]}