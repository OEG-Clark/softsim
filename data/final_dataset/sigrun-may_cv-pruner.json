{"home.repos.pwc.inspect_result.sigrun-may_cv-pruner.None.setup.get_version": [[34, 42], ["os.path.join", "os.path.dirname", "open", "line.startswith", "line.strip().split", "line.strip"], "function", ["None"], ["def", "get_version", "(", ")", ":", "\n", "    ", "\"\"\"Read version from ``__init__.py``.\"\"\"", "\n", "version_filepath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "project_name", ",", "\"__init__.py\"", ")", "\n", "with", "open", "(", "version_filepath", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "if", "line", ".", "startswith", "(", "\"__version__\"", ")", ":", "\n", "                ", "return", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "-", "1", "]", "[", "1", ":", "-", "1", "]", "\n", "", "", "", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.examples.data_loader.load_colon_data": [[18, 68], ["requests.get", "bs4.BeautifulSoup", "bs4.BeautifulSoup.get_text", "soup.get_text.splitlines", "requests.get", "bs4.BeautifulSoup", "bs4.BeautifulSoup.get_text", "colon_text_label.splitlines.splitlines", "pandas.DataFrame", "len", "len", "numpy.array", "len", "column_names.append", "pandas.Series", "float", "int", "label.append", "line.split", "len", "str"], "function", ["None"], ["def", "load_colon_data", "(", ")", "->", "Tuple", "[", "pd", ".", "Series", ",", "pd", ".", "DataFrame", "]", ":", "\n", "    ", "\"\"\"Load colon data.\n\n    The data is loaded and parsed from the internet.\n    Also see <http://genomics-pubs.princeton.edu/oncology/affydata/index.html>\n\n    Returns:\n        Tuple containing labels and data.\n    \"\"\"", "\n", "html_data", "=", "\"http://genomics-pubs.princeton.edu/oncology/affydata/I2000.html\"", "\n", "\n", "page", "=", "requests", ".", "get", "(", "html_data", ")", "\n", "\n", "soup", "=", "BeautifulSoup", "(", "page", ".", "content", ",", "\"html.parser\"", ")", "\n", "colon_text_data", "=", "soup", ".", "get_text", "(", ")", "\n", "\n", "colon_text_data_lines", "=", "colon_text_data", ".", "splitlines", "(", ")", "\n", "colon_text_data_lines", "=", "[", "[", "float", "(", "s", ")", "for", "s", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "colon_text_data_lines", "if", "len", "(", "line", ")", ">", "20", "]", "\n", "assert", "len", "(", "colon_text_data_lines", ")", "==", "2000", "\n", "assert", "len", "(", "colon_text_data_lines", "[", "0", "]", ")", "==", "62", "\n", "\n", "data", "=", "np", ".", "array", "(", "colon_text_data_lines", ")", ".", "T", "\n", "\n", "html_label", "=", "\"http://genomics-pubs.princeton.edu/oncology/affydata/tissues.html\"", "\n", "page", "=", "requests", ".", "get", "(", "html_label", ")", "\n", "soup", "=", "BeautifulSoup", "(", "page", ".", "content", ",", "\"html.parser\"", ")", "\n", "colon_text_label", "=", "soup", ".", "get_text", "(", ")", "\n", "colon_text_label", "=", "colon_text_label", ".", "splitlines", "(", ")", "\n", "\n", "label", "=", "[", "]", "\n", "\n", "for", "line", "in", "colon_text_label", ":", "\n", "        ", "try", ":", "\n", "            ", "i", "=", "int", "(", "line", ")", "\n", "label", ".", "append", "(", "0", "if", "i", ">", "0", "else", "1", ")", "\n", "", "except", ":", "# noqa: E722", "\n", "            ", "pass", "\n", "\n", "", "", "assert", "len", "(", "label", ")", "==", "62", "\n", "\n", "data_df", "=", "pd", ".", "DataFrame", "(", "data", ")", "\n", "\n", "# generate feature names", "\n", "column_names", "=", "[", "]", "\n", "for", "column_name", "in", "data_df", ".", "columns", ":", "\n", "        ", "column_names", ".", "append", "(", "\"gene_\"", "+", "str", "(", "column_name", ")", ")", "\n", "\n", "", "data_df", ".", "columns", "=", "column_names", "\n", "\n", "return", "pd", ".", "Series", "(", "label", ")", ",", "data_df", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.examples.data_loader.load_prostate_data": [[73, 98], ["pandas.read_csv", "len", "pandas.Series", "labels.append", "labels.append"], "function", ["None"], ["", "def", "load_prostate_data", "(", ")", "->", "Tuple", "[", "pd", ".", "Series", ",", "pd", ".", "DataFrame", "]", ":", "\n", "    ", "\"\"\"Load prostate data.\n\n    The data is loaded and parsed from <https://web.stanford.edu/~hastie/CASI_files/DATA/prostate.html>\n\n    Returns:\n        Tuple containing labels and data.\n    \"\"\"", "\n", "df", "=", "pd", ".", "read_csv", "(", "\"https://web.stanford.edu/~hastie/CASI_files/DATA/prostmat.csv\"", ")", "\n", "data", "=", "df", ".", "T", "\n", "\n", "# labels", "\n", "labels", "=", "[", "]", "\n", "for", "label", "in", "df", ".", "columns", ":", "# pylint:disable=no-member", "\n", "        ", "if", "\"control\"", "in", "label", ":", "\n", "            ", "labels", ".", "append", "(", "0", ")", "\n", "", "elif", "\"cancer\"", "in", "label", ":", "\n", "            ", "labels", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"This must not happen!\"", "\n", "\n", "", "", "assert", "len", "(", "labels", ")", "==", "102", "\n", "assert", "data", ".", "shape", "==", "(", "102", ",", "6033", ")", "\n", "\n", "return", "pd", ".", "Series", "(", "labels", ")", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.examples.data_loader.load_leukemia_data": [[100, 126], ["pandas.read_csv", "len", "pandas.Series", "labels.append", "labels.append"], "function", ["None"], ["", "def", "load_leukemia_data", "(", ")", "->", "Tuple", "[", "pd", ".", "Series", ",", "pd", ".", "DataFrame", "]", ":", "\n", "    ", "\"\"\"Load leukemia data.\n\n    The data is loaded and parsed from the internet.\n    Also see <https://web.stanford.edu/~hastie/CASI_files/DATA/leukemia.html>\n\n    Returns:\n        Tuple containing labels and data.\n    \"\"\"", "\n", "df", "=", "pd", ".", "read_csv", "(", "\"https://web.stanford.edu/~hastie/CASI_files/DATA/leukemia_big.csv\"", ")", "\n", "data", "=", "df", ".", "T", "\n", "\n", "# labels", "\n", "labels", "=", "[", "]", "\n", "for", "label", "in", "df", ".", "columns", ":", "# pylint:disable=no-member", "\n", "        ", "if", "\"ALL\"", "in", "label", ":", "\n", "            ", "labels", ".", "append", "(", "0", ")", "\n", "", "elif", "\"AML\"", "in", "label", ":", "\n", "            ", "labels", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"This must not happen!\"", "\n", "\n", "", "", "assert", "len", "(", "labels", ")", "==", "72", "\n", "assert", "data", ".", "shape", "==", "(", "72", ",", "7128", ")", "\n", "\n", "return", "pd", ".", "Series", "(", "labels", ")", ",", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.examples.test_data_loader.test_load_colon_data": [[11, 16], ["examples.data_loader.load_colon_data", "len"], "function", ["home.repos.pwc.inspect_result.sigrun-may_cv-pruner.examples.data_loader.load_colon_data"], ["def", "test_load_colon_data", "(", ")", ":", "\n", "    ", "colon_data_labels", ",", "colon_data", "=", "load_colon_data", "(", ")", "\n", "\n", "assert", "len", "(", "colon_data_labels", ")", "==", "62", "\n", "assert", "colon_data", ".", "shape", "==", "(", "62", ",", "2000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.examples.test_data_loader.test_load_prostate_data": [[18, 23], ["examples.data_loader.load_prostate_data", "len"], "function", ["home.repos.pwc.inspect_result.sigrun-may_cv-pruner.examples.data_loader.load_prostate_data"], ["", "def", "test_load_prostate_data", "(", ")", ":", "\n", "    ", "prostate_data_labels", ",", "prostate_data", "=", "load_prostate_data", "(", ")", "\n", "\n", "assert", "len", "(", "prostate_data_labels", ")", "==", "102", "\n", "assert", "prostate_data", ".", "shape", "==", "(", "102", ",", "6033", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.examples.test_data_loader.test_load_leukemia_data": [[25, 30], ["examples.data_loader.load_leukemia_data", "len"], "function", ["home.repos.pwc.inspect_result.sigrun-may_cv-pruner.examples.data_loader.load_leukemia_data"], ["", "def", "test_load_leukemia_data", "(", ")", ":", "\n", "    ", "leukemia_data_labels", ",", "leukemia_data", "=", "load_leukemia_data", "(", ")", "\n", "\n", "assert", "len", "(", "leukemia_data_labels", ")", "==", "72", "\n", "assert", "leukemia_data", ".", "shape", "==", "(", "72", ",", "7128", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.examples.example_combined_pruning._optuna_objective": [[25, 115], ["sklearn.model_selection.LeaveOneOut", "enumerate", "scipy.stats.trim_mean", "sklearn.model_selection.LeaveOneOut.split", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "trial.report", "trial.should_prune", "lightgbm.Dataset", "lightgbm.Dataset", "dict", "lightgbm.train", "validation_metric_history.append", "lgb.train.feature_importance", "cv_pruner.cv_pruner.no_features_selected", "cv_pruner.cv_pruner.should_prune_against_threshold", "scipy.stats.trim_mean", "optuna.TrialPruned", "trial.suggest_int", "trial.suggest_int", "optuna.TrialPruned", "trial.report", "scipy.stats.trim_mean", "trial.suggest_int", "trial.suggest_uniform", "trial.suggest_uniform", "trial.suggest_int", "trial.suggest_uniform", "trial.suggest_int", "scipy.stats.trim_mean", "math.floor"], "function", ["home.repos.pwc.inspect_result.sigrun-may_cv-pruner.cv_pruner.cv_pruner.no_features_selected", "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.cv_pruner.cv_pruner.should_prune_against_threshold"], ["def", "_optuna_objective", "(", "trial", ")", ":", "\n", "\n", "    ", "validation_metric_history", "=", "[", "]", "\n", "current_step_of_complete_nested_cross_validation", "=", "0", "\n", "\n", "# outer cross-validation", "\n", "loo", "=", "LeaveOneOut", "(", ")", "\n", "for", "outer_fold_index", ",", "(", "remain_index", ",", "test_index", ")", "in", "enumerate", "(", "loo", ".", "split", "(", "data", ")", ")", ":", "# pylint:disable=unused-variable", "\n", "        ", "x_remain", "=", "data", ".", "iloc", "[", "remain_index", ",", ":", "]", "\n", "y_remain", "=", "label", ".", "iloc", "[", "remain_index", "]", "\n", "\n", "# test splits to determine test metric", "\n", "# x_test = data.iloc[test_index, :]", "\n", "# y_test = label.iloc[test_index]", "\n", "\n", "# inner cross-validation", "\n", "inner_folds", "=", "10", "\n", "k_fold_cv", "=", "StratifiedKFold", "(", "n_splits", "=", "inner_folds", ")", "\n", "for", "train_index", ",", "validation_index", "in", "k_fold_cv", ".", "split", "(", "x_remain", ",", "y_remain", ")", ":", "\n", "# count steps starting with 1", "\n", "            ", "current_step_of_complete_nested_cross_validation", "+=", "1", "\n", "\n", "x_train", "=", "x_remain", ".", "iloc", "[", "train_index", ",", ":", "]", "\n", "x_validation", "=", "x_remain", ".", "iloc", "[", "validation_index", ",", ":", "]", "\n", "y_train", "=", "y_remain", ".", "iloc", "[", "train_index", "]", "\n", "y_validation", "=", "y_remain", ".", "iloc", "[", "validation_index", "]", "\n", "\n", "train_data", "=", "lgb", ".", "Dataset", "(", "x_train", ",", "label", "=", "y_train", ")", "\n", "validation_data", "=", "lgb", ".", "Dataset", "(", "x_validation", ",", "label", "=", "y_validation", ")", "\n", "\n", "# parameters for model training to combat overfitting", "\n", "parameters", "=", "dict", "(", "\n", "min_data_in_leaf", "=", "trial", ".", "suggest_int", "(", "\"min_data_in_leaf\"", ",", "2", ",", "math", ".", "floor", "(", "data", ".", "shape", "[", "0", "]", "/", "2", ")", ")", ",", "\n", "lambda_l1", "=", "trial", ".", "suggest_uniform", "(", "\"lambda_l1\"", ",", "0.0", ",", "3", ")", ",", "\n", "min_gain_to_split", "=", "trial", ".", "suggest_uniform", "(", "\"min_gain_to_split\"", ",", "0", ",", "5", ")", ",", "\n", "max_depth", "=", "trial", ".", "suggest_int", "(", "\"max_depth\"", ",", "2", ",", "20", ")", ",", "\n", "bagging_fraction", "=", "trial", ".", "suggest_uniform", "(", "\"bagging_fraction\"", ",", "0.1", ",", "1.0", ")", ",", "\n", "bagging_freq", "=", "trial", ".", "suggest_int", "(", "\"bagging_freq\"", ",", "1", ",", "10", ")", ",", "\n", "extra_trees", "=", "True", ",", "\n", "objective", "=", "\"binary\"", ",", "\n", "metric", "=", "\"binary_logloss\"", ",", "\n", "boosting_type", "=", "\"rf\"", ",", "\n", "verbose", "=", "-", "1", ",", "\n", ")", "\n", "\n", "# num_leaves must be greater than 2^max_depth", "\n", "max_num_leaves", "=", "2", "**", "parameters", "[", "\"max_depth\"", "]", "-", "1", "\n", "if", "max_num_leaves", "<", "90", ":", "\n", "                ", "parameters", "[", "\"num_leaves\"", "]", "=", "trial", ".", "suggest_int", "(", "\"num_leaves\"", ",", "2", ",", "max_num_leaves", ")", "\n", "", "else", ":", "\n", "                ", "parameters", "[", "\"num_leaves\"", "]", "=", "trial", ".", "suggest_int", "(", "\"num_leaves\"", ",", "2", ",", "90", ")", "\n", "\n", "", "model", "=", "lgb", ".", "train", "(", "\n", "parameters", ",", "\n", "train_data", ",", "\n", "valid_sets", "=", "[", "validation_data", "]", ",", "\n", "verbose_eval", "=", "False", ",", "\n", ")", "\n", "validation_metric_history", ".", "append", "(", "model", ".", "best_score", "[", "\"valid_0\"", "]", "[", "\"binary_logloss\"", "]", ")", "\n", "\n", "selected_features", "=", "model", ".", "feature_importance", "(", "importance_type", "=", "\"gain\"", ")", "\n", "if", "cv_pruner", ".", "no_features_selected", "(", "selected_features", ")", ":", "\n", "                ", "raise", "TrialPruned", "(", ")", "\n", "\n", "", "if", "cv_pruner", ".", "should_prune_against_threshold", "(", "\n", "current_step_of_complete_nested_cross_validation", ",", "\n", "folds_outer_cv", "=", "data", ".", "shape", "[", "0", "]", ",", "# leave one out cross-validation", "\n", "folds_inner_cv", "=", "inner_folds", ",", "\n", "validation_metric_history", "=", "validation_metric_history", ",", "\n", "threshold_for_pruning", "=", "0.45", ",", "\n", "direction_to_optimize_is_minimize", "=", "True", ",", "\n", "optimal_metric", "=", "0", ",", "# optimal metric for logloss", "\n", "method", "=", "Method", ".", "OPTIMAL_METRIC", ",", "\n", ")", ":", "\n", "# Report intermediate results before stopping the trial", "\n", "                ", "trial", ".", "report", "(", "trim_mean", "(", "validation_metric_history", ",", "proportiontocut", "=", "0.2", ")", ",", "outer_fold_index", ")", "\n", "\n", "# Return feedback to the optimizer to enable improvement of the optimization.", "\n", "return", "trim_mean", "(", "validation_metric_history", ",", "proportiontocut", "=", "0.2", ")", "\n", "\n", "# Report intermediate results: Report the trimmed mean of all previously fully calculated inner folds", "\n", "# to reduce the variance of the validation results.", "\n", "", "", "trial", ".", "report", "(", "trim_mean", "(", "validation_metric_history", ",", "proportiontocut", "=", "0.2", ")", ",", "outer_fold_index", ")", "\n", "\n", "# Built in optuna standard pruner handles pruning based on the given intermediate results.", "\n", "if", "trial", ".", "should_prune", "(", ")", ":", "\n", "            ", "raise", "TrialPruned", "(", ")", "\n", "\n", "# optimize based on 20% trimmed mean to exclude outliers", "\n", "", "", "return", "trim_mean", "(", "validation_metric_history", ",", "proportiontocut", "=", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.cv_pruner.cv_pruner._extrapolate_metric": [[53, 83], ["statistics.median", "len", "statistics.mean", "ValueError", "max"], "function", ["None"], ["", "def", "_extrapolate_metric", "(", "validation_metric_history", ":", "List", "[", "float", "]", ",", "method", ":", "Method", ")", "->", "float", ":", "\n", "    ", "\"\"\"Extrapolate metric for missing values of a completed inner cross-validation loop.\n\n    Args:\n        validation_metric_history: list of all previously calculated performance evaluation metrics\n        method: The extrapolation method to be used.\n\n    Returns:\n        Extrapolated performance evaluation metric based on all previously calculated performance evaluation metrics.\n    \"\"\"", "\n", "median_validation_metric", "=", "median", "(", "validation_metric_history", ")", "\n", "\n", "# get deviations from median in direction to optimize", "\n", "deviation_list", "=", "[", "\n", "median_validation_metric", "-", "metric", "for", "metric", "in", "validation_metric_history", "if", "metric", "<", "median_validation_metric", "\n", "]", "\n", "\n", "if", "len", "(", "deviation_list", ")", ">", "0", ":", "\n", "\n", "        ", "if", "method", "==", "Method", ".", "MEAN_DEVIATION_TO_MEDIAN", ":", "\n", "# mean deviation in direction to optimize from median", "\n", "            ", "return", "median_validation_metric", "-", "mean", "(", "deviation_list", ")", "\n", "\n", "", "elif", "method", "==", "Method", ".", "MAX_DEVIATION_TO_MEDIAN", ":", "\n", "# mean deviation in direction to optimize from median", "\n", "            ", "return", "median_validation_metric", "-", "max", "(", "deviation_list", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"'method' must be of type 'Method' but was: {method}\"", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "median_validation_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.cv_pruner.cv_pruner.should_prune_against_threshold": [[85, 170], ["float", "math.floor", "cv_pruner._extrapolate_metric", "statistics.median", "statistics.median"], "function", ["home.repos.pwc.inspect_result.sigrun-may_cv-pruner.cv_pruner.cv_pruner._extrapolate_metric"], ["", "", "def", "should_prune_against_threshold", "(", "\n", "current_step_of_complete_nested_cross_validation", ":", "int", ",", "\n", "folds_outer_cv", ":", "int", ",", "\n", "folds_inner_cv", ":", "int", ",", "\n", "validation_metric_history", ":", "List", "[", "float", "]", ",", "\n", "threshold_for_pruning", ":", "float", ",", "\n", "direction_to_optimize_is_minimize", ":", "bool", ",", "\n", "optimal_metric", ":", "float", ",", "\n", "method", ":", "Method", "=", "Method", ".", "OPTIMAL_METRIC", ",", "\n", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Pruner to detect an invalid performance evaluation value of a trial.\n\n    Args:\n        current_step_of_complete_nested_cross_validation: One based step of the\n            complete nested cross-validation.\n        folds_outer_cv: Absolute number of folds for the outer cross-validation loop (one\n            based): Set to zero for standard cross-validation.\n        folds_inner_cv: Absolute number of folds for the inner cross\n            validation loop (one based).\n        validation_metric_history: List of all previously calculated performance evaluation metric values.\n        threshold_for_pruning: Threshold that should not be exceeded\n            (minimizing) or fallen below (maximizing).\n        direction_to_optimize_is_minimize: True - in case of minimizing and False - in case of maximizing.\n        optimal_metric: Optimal value for the performance evaluation metric.\n        method: The extrapolation method to be used (see Method).\n\n    Returns:\n        If the trial should be pruned. TRUE if it is likely that the final\n        performance evaluation metric will exceed the upper threshold or\n        fall below the lower threshold respectively.\n        FALSE otherwise.\n    \"\"\"", "\n", "current_step_inner_cv", "=", "current_step_of_complete_nested_cross_validation", "%", "folds_inner_cv", "\n", "\n", "# as 0 is not defined as valid step number, step number is reset to number of inner folds", "\n", "if", "current_step_inner_cv", "==", "0", ":", "\n", "        ", "current_step_inner_cv", "=", "folds_inner_cv", "\n", "", "prune", "=", "False", "\n", "\n", "first_third_of_complete_nested_cross_validation", "=", "folds_outer_cv", "/", "3", "\n", "\n", "# in case of standard cross-validation only one \"inner-loop\" is calculated", "\n", "if", "folds_outer_cv", "==", "0", ":", "\n", "        ", "first_third_of_complete_nested_cross_validation", "=", "float", "(", "\"inf\"", ")", "\n", "\n", "# starts calculating after half of the inner k-fold cross-validation of the", "\n", "# nested cross-validation and a minimum of four steps", "\n", "", "if", "(", "\n", "current_step_of_complete_nested_cross_validation", "\n", ">=", "math", ".", "floor", "(", "folds_inner_cv", "/", "2", ")", "\n", "<", "first_third_of_complete_nested_cross_validation", "\n", "and", "current_step_of_complete_nested_cross_validation", ">", "3", "\n", ")", ":", "\n", "# change sign to adapt the calculations to maximize as direction to optimize", "\n", "        ", "if", "not", "direction_to_optimize_is_minimize", ":", "\n", "            ", "validation_metric_history", "=", "[", "metric", "*", "-", "1", "for", "metric", "in", "validation_metric_history", "]", "\n", "threshold_for_pruning", "*=", "-", "1", "\n", "\n", "", "if", "method", "==", "Method", ".", "MEDIAN", ":", "\n", "            ", "return", "median", "(", "validation_metric_history", ")", "<", "threshold_for_pruning", "\n", "\n", "# extrapolate metric for the rest of the inner cross validation loop", "\n", "", "if", "method", "==", "Method", ".", "OPTIMAL_METRIC", ":", "\n", "            ", "extrapolated_metric", "=", "optimal_metric", "\n", "", "else", ":", "\n", "            ", "extrapolated_metric", "=", "_extrapolate_metric", "(", "validation_metric_history", ",", "method", ")", "\n", "\n", "# extrapolate metric up to the next complete loop of the inner k-fold cross-validation  # noqa: E501", "\n", "", "result_already_calculated_steps", "=", "(", "\n", "median", "(", "validation_metric_history", ")", "*", "current_step_of_complete_nested_cross_validation", "\n", ")", "\n", "total_steps_up_to_the_next_completed_inner_cv_loop", "=", "current_step_of_complete_nested_cross_validation", "+", "(", "\n", "folds_inner_cv", "-", "current_step_inner_cv", "\n", ")", "\n", "extrapolated_result_remaining_steps_of_the_inner_cv_loop", "=", "extrapolated_metric", "*", "(", "\n", "folds_inner_cv", "-", "current_step_inner_cv", "\n", ")", "\n", "extrapolated_result_for_next_complete_inner_cv_loop", "=", "(", "\n", "result_already_calculated_steps", "+", "extrapolated_result_remaining_steps_of_the_inner_cv_loop", "\n", ")", "/", "total_steps_up_to_the_next_completed_inner_cv_loop", "\n", "\n", "# extrapolated results worse than threshold?", "\n", "prune", "=", "threshold_for_pruning", "<", "extrapolated_result_for_next_complete_inner_cv_loop", "\n", "\n", "", "return", "prune", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.cv_pruner.cv_pruner.no_features_selected": [[172, 188], ["isinstance", "numpy.array", "numpy.sum"], "function", ["None"], ["", "def", "no_features_selected", "(", "feature_importances", ":", "Union", "[", "np", ".", "ndarray", ",", "List", "[", "float", "]", "]", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Pruner to detect semantically meaningless trials.\n\n    Args:\n        feature_importances: Weights, importances or coefficients for each\n            feature after training.\n\n    Returns:\n        If a trial should be pruned. TRUE if a trial includes a training\n        result without any selected features. FALSE otherwise.\n\n    \"\"\"", "\n", "if", "isinstance", "(", "feature_importances", ",", "list", ")", ":", "\n", "        ", "feature_importances", "=", "np", ".", "array", "(", "feature_importances", ")", "\n", "\n", "", "return", "np", ".", "sum", "(", "feature_importances", "!=", "0", ")", "==", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.tests.test_cv_pruner.test_check_against_threshold_false": [[11, 35], ["cv_pruner.should_prune_against_threshold"], "function", ["home.repos.pwc.inspect_result.sigrun-may_cv-pruner.cv_pruner.cv_pruner.should_prune_against_threshold"], ["def", "test_check_against_threshold_false", "(", ")", ":", "\n", "    ", "validation_metric_history", "=", "[", "\n", "0.5462845376904258", ",", "\n", "1.0892814295723676", ",", "\n", "0.6071417757721475", ",", "\n", "0.8962837776591452", ",", "\n", "0.4806071316499426", ",", "\n", "0.8345930756271068", ",", "\n", "0.6275179297604803", ",", "\n", "0.5881211822461981", ",", "\n", "]", "\n", "\n", "result", "=", "should_prune_against_threshold", "(", "\n", "current_step_of_complete_nested_cross_validation", "=", "8", ",", "\n", "folds_outer_cv", "=", "13", ",", "\n", "folds_inner_cv", "=", "8", ",", "\n", "validation_metric_history", "=", "validation_metric_history", ",", "\n", "threshold_for_pruning", "=", "0.65", ",", "\n", "direction_to_optimize_is_minimize", "=", "True", ",", "\n", "optimal_metric", "=", "0", ",", "\n", "method", "=", "Method", ".", "OPTIMAL_METRIC", ",", "\n", ")", "\n", "\n", "assert", "not", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.tests.test_cv_pruner.test_check_against_threshold_true": [[37, 62], ["cv_pruner.should_prune_against_threshold"], "function", ["home.repos.pwc.inspect_result.sigrun-may_cv-pruner.cv_pruner.cv_pruner.should_prune_against_threshold"], ["", "def", "test_check_against_threshold_true", "(", ")", ":", "\n", "\n", "    ", "validation_metric_history", "=", "[", "\n", "0.6462845376904258", ",", "\n", "1.0892814295723676", ",", "\n", "0.6071417757721475", ",", "\n", "0.8962837776591452", ",", "\n", "0.6806071316499426", ",", "\n", "0.8345930756271068", ",", "\n", "0.6275179297604803", ",", "\n", "0.5881211822461981", ",", "\n", "]", "\n", "\n", "result", "=", "should_prune_against_threshold", "(", "\n", "current_step_of_complete_nested_cross_validation", "=", "8", ",", "\n", "folds_outer_cv", "=", "13", ",", "\n", "folds_inner_cv", "=", "8", ",", "\n", "validation_metric_history", "=", "validation_metric_history", ",", "\n", "threshold_for_pruning", "=", "0.65", ",", "\n", "direction_to_optimize_is_minimize", "=", "True", ",", "\n", "optimal_metric", "=", "0", ",", "\n", "method", "=", "Method", ".", "OPTIMAL_METRIC", ",", "\n", ")", "\n", "\n", "assert", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.tests.test_cv_pruner.test_standard_cross_validation_true": [[64, 88], ["cv_pruner.should_prune_against_threshold"], "function", ["home.repos.pwc.inspect_result.sigrun-may_cv-pruner.cv_pruner.cv_pruner.should_prune_against_threshold"], ["", "def", "test_standard_cross_validation_true", "(", ")", ":", "\n", "    ", "validation_metric_history", "=", "[", "\n", "0.6462845376904258", ",", "\n", "1.0892814295723676", ",", "\n", "0.6071417757721475", ",", "\n", "0.8962837776591452", ",", "\n", "0.6806071316499426", ",", "\n", "0.8345930756271068", ",", "\n", "0.6275179297604803", ",", "\n", "0.5881211822461981", ",", "\n", "]", "\n", "\n", "result", "=", "should_prune_against_threshold", "(", "\n", "current_step_of_complete_nested_cross_validation", "=", "8", ",", "\n", "folds_outer_cv", "=", "0", ",", "\n", "folds_inner_cv", "=", "8", ",", "\n", "validation_metric_history", "=", "validation_metric_history", ",", "\n", "threshold_for_pruning", "=", "0.65", ",", "\n", "direction_to_optimize_is_minimize", "=", "True", ",", "\n", "optimal_metric", "=", "0", ",", "\n", "method", "=", "Method", ".", "OPTIMAL_METRIC", ",", "\n", ")", "\n", "\n", "assert", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.tests.test_cv_pruner.test_check_no_features_selected_ndarray_false_negative": [[90, 93], ["numpy.array", "cv_pruner.no_features_selected"], "function", ["home.repos.pwc.inspect_result.sigrun-may_cv-pruner.cv_pruner.cv_pruner.no_features_selected"], ["", "def", "test_check_no_features_selected_ndarray_false_negative", "(", ")", ":", "\n", "    ", "feature_importances", "=", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "-", "0.1", "]", ")", "\n", "assert", "not", "no_features_selected", "(", "feature_importances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.tests.test_cv_pruner.test_check_no_features_selected_ndarray_false": [[95, 98], ["numpy.array", "cv_pruner.no_features_selected"], "function", ["home.repos.pwc.inspect_result.sigrun-may_cv-pruner.cv_pruner.cv_pruner.no_features_selected"], ["", "def", "test_check_no_features_selected_ndarray_false", "(", ")", ":", "\n", "    ", "feature_importances", "=", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.1", "]", ")", "\n", "assert", "not", "no_features_selected", "(", "feature_importances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.tests.test_cv_pruner.test_check_no_features_selected_ndarray_true": [[100, 103], ["numpy.array", "cv_pruner.no_features_selected"], "function", ["home.repos.pwc.inspect_result.sigrun-may_cv-pruner.cv_pruner.cv_pruner.no_features_selected"], ["", "def", "test_check_no_features_selected_ndarray_true", "(", ")", ":", "\n", "    ", "feature_importances", "=", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "assert", "no_features_selected", "(", "feature_importances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.tests.test_cv_pruner.test_check_no_features_selected_list_false_negative": [[105, 108], ["cv_pruner.no_features_selected"], "function", ["home.repos.pwc.inspect_result.sigrun-may_cv-pruner.cv_pruner.cv_pruner.no_features_selected"], ["", "def", "test_check_no_features_selected_list_false_negative", "(", ")", ":", "\n", "    ", "feature_importances", "=", "[", "0.0", ",", "0.0", ",", "-", "0.1", "]", "\n", "assert", "not", "no_features_selected", "(", "feature_importances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.tests.test_cv_pruner.test_check_no_features_selected_list_true": [[110, 113], ["cv_pruner.no_features_selected"], "function", ["home.repos.pwc.inspect_result.sigrun-may_cv-pruner.cv_pruner.cv_pruner.no_features_selected"], ["", "def", "test_check_no_features_selected_list_true", "(", ")", ":", "\n", "    ", "feature_importances", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "assert", "no_features_selected", "(", "feature_importances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigrun-may_cv-pruner.tests.test_cv_pruner.test_check_no_features_selected_list_false": [[115, 118], ["cv_pruner.no_features_selected"], "function", ["home.repos.pwc.inspect_result.sigrun-may_cv-pruner.cv_pruner.cv_pruner.no_features_selected"], ["", "def", "test_check_no_features_selected_list_false", "(", ")", ":", "\n", "    ", "feature_importances", "=", "[", "0.0", ",", "0.0", ",", "0.1", "]", "\n", "assert", "not", "no_features_selected", "(", "feature_importances", ")", "\n", "", ""]]}