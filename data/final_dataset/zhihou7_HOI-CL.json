{"home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval.VCOCOeval.__init__": [[28, 45], ["pycocotools.coco.COCO", "vsrl_eval._load_vcoco", "numpy.loadtxt", "numpy.all", "vsrl_eval.VCOCOeval._init_coco", "vsrl_eval.VCOCOeval._init_vcoco", "vsrl_eval.VCOCOeval._get_vcocodb", "open", "numpy.equal", "numpy.sort", "numpy.sort", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1._load_vcoco", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._init_coco", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._init_vcoco", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._get_vcocodb"], ["  ", "def", "__init__", "(", "self", ",", "vsrl_annot_file", ",", "coco_annot_file", ",", "\n", "split_file", ")", ":", "\n", "    ", "\"\"\"Input:\n    vslr_annot_file: path to the vcoco annotations\n    coco_annot_file: path to the coco annotations\n    split_file: image ids for split\n    \"\"\"", "\n", "self", ".", "COCO", "=", "COCO", "(", "coco_annot_file", ")", "\n", "self", ".", "VCOCO", "=", "_load_vcoco", "(", "vsrl_annot_file", ")", "\n", "self", ".", "image_ids", "=", "np", ".", "loadtxt", "(", "open", "(", "split_file", ",", "'r'", ")", ")", "\n", "# simple check  ", "\n", "\n", "assert", "np", ".", "all", "(", "np", ".", "equal", "(", "np", ".", "sort", "(", "np", ".", "unique", "(", "self", ".", "VCOCO", "[", "0", "]", "[", "'image_id'", "]", ")", ")", ",", "np", ".", "sort", "(", "self", ".", "image_ids", ")", ")", ")", "\n", "\n", "self", ".", "_init_coco", "(", ")", "\n", "self", ".", "_init_vcoco", "(", ")", "\n", "self", ".", "vcocodb", "=", "self", ".", "_get_vcocodb", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval.VCOCOeval._init_vcoco": [[46, 53], ["len", "enumerate"], "methods", ["None"], ["", "def", "_init_vcoco", "(", "self", ")", ":", "\n", "    ", "actions", "=", "[", "x", "[", "'action_name'", "]", "for", "x", "in", "self", ".", "VCOCO", "]", "\n", "roles", "=", "[", "x", "[", "'role_name'", "]", "for", "x", "in", "self", ".", "VCOCO", "]", "\n", "self", ".", "actions", "=", "actions", "\n", "self", ".", "actions_to_id_map", "=", "{", "v", ":", "i", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "actions", ")", "}", "\n", "self", ".", "num_actions", "=", "len", "(", "self", ".", "actions", ")", "\n", "self", ".", "roles", "=", "roles", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval.VCOCOeval._init_coco": [[55, 65], ["vsrl_eval.VCOCOeval.COCO.getCatIds", "dict", "len", "zip", "vsrl_eval.VCOCOeval.COCO.loadCats", "enumerate", "vsrl_eval.VCOCOeval.json_category_id_to_contiguous_id.items", "vsrl_eval.VCOCOeval.COCO.getCatIds"], "methods", ["None"], ["", "def", "_init_coco", "(", "self", ")", ":", "\n", "    ", "category_ids", "=", "self", ".", "COCO", ".", "getCatIds", "(", ")", "\n", "categories", "=", "[", "c", "[", "'name'", "]", "for", "c", "in", "self", ".", "COCO", ".", "loadCats", "(", "category_ids", ")", "]", "\n", "self", ".", "category_to_id_map", "=", "dict", "(", "zip", "(", "categories", ",", "category_ids", ")", ")", "\n", "self", ".", "classes", "=", "[", "'__background__'", "]", "+", "categories", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "classes", ")", "\n", "self", ".", "json_category_id_to_contiguous_id", "=", "{", "\n", "v", ":", "i", "+", "1", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "COCO", ".", "getCatIds", "(", ")", ")", "}", "\n", "self", ".", "contiguous_category_id_to_json_id", "=", "{", "\n", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "json_category_id_to_contiguous_id", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval.VCOCOeval._get_vcocodb": [[67, 83], ["copy.deepcopy", "vsrl_eval.VCOCOeval.COCO.loadImgs", "vsrl_eval.VCOCOeval._prep_vcocodb_entry", "vsrl_eval.VCOCOeval._add_gt_annotations", "numpy.zeros", "range", "vsrl_eval.VCOCOeval.image_ids.tolist", "range", "print", "numpy.sum", "numpy.logical_and"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._prep_vcocodb_entry", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._add_gt_annotations"], ["", "def", "_get_vcocodb", "(", "self", ")", ":", "\n", "    ", "vcocodb", "=", "copy", ".", "deepcopy", "(", "self", ".", "COCO", ".", "loadImgs", "(", "self", ".", "image_ids", ".", "tolist", "(", ")", ")", ")", "\n", "for", "entry", "in", "vcocodb", ":", "\n", "      ", "self", ".", "_prep_vcocodb_entry", "(", "entry", ")", "\n", "self", ".", "_add_gt_annotations", "(", "entry", ")", "\n", "\n", "# print", "\n", "", "if", "0", ":", "\n", "      ", "nums", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "entry", "in", "vcocodb", ":", "\n", "        ", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "          ", "nums", "[", "aid", "]", "+=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "entry", "[", "'gt_actions'", "]", "[", ":", ",", "aid", "]", "==", "1", ",", "entry", "[", "'gt_classes'", "]", "==", "1", ")", ")", "\n", "", "", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "print", "(", "'Action %s = %d'", "%", "(", "self", ".", "actions", "[", "aid", "]", ",", "nums", "[", "aid", "]", ")", ")", "\n", "\n", "", "", "return", "vcocodb", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval.VCOCOeval._prep_vcocodb_entry": [[85, 91], ["numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty"], "methods", ["None"], ["", "def", "_prep_vcocodb_entry", "(", "self", ",", "entry", ")", ":", "\n", "    ", "entry", "[", "'boxes'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "entry", "[", "'is_crowd'", "]", "=", "np", ".", "empty", "(", "(", "0", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "entry", "[", "'gt_classes'", "]", "=", "np", ".", "empty", "(", "(", "0", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "entry", "[", "'gt_actions'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "entry", "[", "'gt_role_id'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval.VCOCOeval._add_gt_annotations": [[93, 140], ["vsrl_eval.VCOCOeval.COCO.getAnnIds", "vsrl_eval.VCOCOeval.COCO.loadAnns", "enumerate", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "vsrl_eval.clip_xyxy_to_image", "len", "numpy.ones", "numpy.ones", "vsrl_eval.VCOCOeval._get_vsrl_data", "numpy.maximum", "numpy.maximum", "valid_objs.append", "valid_ann_ids.append"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.clip_xyxy_to_image", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._get_vsrl_data"], ["", "def", "_add_gt_annotations", "(", "self", ",", "entry", ")", ":", "\n", "    ", "ann_ids", "=", "self", ".", "COCO", ".", "getAnnIds", "(", "imgIds", "=", "entry", "[", "'id'", "]", ",", "iscrowd", "=", "None", ")", "\n", "objs", "=", "self", ".", "COCO", ".", "loadAnns", "(", "ann_ids", ")", "\n", "# Sanitize bboxes -- some are invalid", "\n", "valid_objs", "=", "[", "]", "\n", "valid_ann_ids", "=", "[", "]", "\n", "width", "=", "entry", "[", "'width'", "]", "\n", "height", "=", "entry", "[", "'height'", "]", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "      ", "if", "'ignore'", "in", "obj", "and", "obj", "[", "'ignore'", "]", "==", "1", ":", "\n", "          ", "continue", "\n", "# Convert form x1, y1, w, h to x1, y1, x2, y2", "\n", "", "x1", "=", "obj", "[", "'bbox'", "]", "[", "0", "]", "\n", "y1", "=", "obj", "[", "'bbox'", "]", "[", "1", "]", "\n", "x2", "=", "x1", "+", "np", ".", "maximum", "(", "0.", ",", "obj", "[", "'bbox'", "]", "[", "2", "]", "-", "1.", ")", "\n", "y2", "=", "y1", "+", "np", ".", "maximum", "(", "0.", ",", "obj", "[", "'bbox'", "]", "[", "3", "]", "-", "1.", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "clip_xyxy_to_image", "(", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "height", ",", "width", ")", "\n", "# Require non-zero seg area and more than 1x1 box size", "\n", "if", "obj", "[", "'area'", "]", ">", "0", "and", "x2", ">", "x1", "and", "y2", ">", "y1", ":", "\n", "        ", "obj", "[", "'clean_bbox'", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "valid_ann_ids", ".", "append", "(", "ann_ids", "[", "i", "]", ")", "\n", "", "", "num_valid_objs", "=", "len", "(", "valid_objs", ")", "\n", "assert", "num_valid_objs", "==", "len", "(", "valid_ann_ids", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ",", "4", ")", ",", "dtype", "=", "entry", "[", "'boxes'", "]", ".", "dtype", ")", "\n", "is_crowd", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ")", ",", "dtype", "=", "entry", "[", "'is_crowd'", "]", ".", "dtype", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ")", ",", "dtype", "=", "entry", "[", "'gt_classes'", "]", ".", "dtype", ")", "\n", "gt_actions", "=", "-", "np", ".", "ones", "(", "(", "num_valid_objs", ",", "self", ".", "num_actions", ")", ",", "dtype", "=", "entry", "[", "'gt_actions'", "]", ".", "dtype", ")", "\n", "gt_role_id", "=", "-", "np", ".", "ones", "(", "(", "num_valid_objs", ",", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "entry", "[", "'gt_role_id'", "]", ".", "dtype", ")", "\n", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "valid_objs", ")", ":", "\n", "      ", "cls", "=", "self", ".", "json_category_id_to_contiguous_id", "[", "obj", "[", "'category_id'", "]", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "obj", "[", "'clean_bbox'", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "is_crowd", "[", "ix", "]", "=", "obj", "[", "'iscrowd'", "]", "\n", "\n", "gt_actions", "[", "ix", ",", ":", "]", ",", "gt_role_id", "[", "ix", ",", ":", ",", ":", "]", "=", "self", ".", "_get_vsrl_data", "(", "valid_ann_ids", "[", "ix", "]", ",", "\n", "valid_ann_ids", ",", "valid_objs", ")", "\n", "\n", "", "entry", "[", "'boxes'", "]", "=", "np", ".", "append", "(", "entry", "[", "'boxes'", "]", ",", "boxes", ",", "axis", "=", "0", ")", "\n", "entry", "[", "'gt_classes'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_classes'", "]", ",", "gt_classes", ")", "\n", "entry", "[", "'is_crowd'", "]", "=", "np", ".", "append", "(", "entry", "[", "'is_crowd'", "]", ",", "is_crowd", ")", "\n", "entry", "[", "'gt_actions'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_actions'", "]", ",", "gt_actions", ",", "axis", "=", "0", ")", "\n", "entry", "[", "'gt_role_id'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_role_id'", "]", ",", "gt_role_id", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval.VCOCOeval._get_vsrl_data": [[142, 169], ["enumerate", "numpy.ones", "numpy.ones", "numpy.where", "numpy.where", "range", "numpy.logical_and", "numpy.where"], "methods", ["None"], ["", "def", "_get_vsrl_data", "(", "self", ",", "ann_id", ",", "ann_ids", ",", "objs", ")", ":", "\n", "    ", "\"\"\" Get VSRL data for ann_id.\"\"\"", "\n", "action_id", "=", "-", "np", ".", "ones", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "role_id", "=", "-", "np", ".", "ones", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# check if ann_id in vcoco annotations", "\n", "in_vcoco", "=", "np", ".", "where", "(", "self", ".", "VCOCO", "[", "0", "]", "[", "'ann_id'", "]", "==", "ann_id", ")", "[", "0", "]", "\n", "if", "in_vcoco", ".", "size", ">", "0", ":", "\n", "      ", "action_id", "[", ":", "]", "=", "0", "\n", "role_id", "[", ":", "]", "=", "-", "1", "\n", "", "else", ":", "\n", "      ", "return", "action_id", ",", "role_id", "\n", "", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "VCOCO", ")", ":", "\n", "      ", "assert", "x", "[", "'action_name'", "]", "==", "self", ".", "actions", "[", "i", "]", "\n", "has_label", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "x", "[", "'ann_id'", "]", "==", "ann_id", ",", "x", "[", "'label'", "]", "==", "1", ")", ")", "[", "0", "]", "\n", "if", "has_label", ".", "size", ">", "0", ":", "\n", "        ", "action_id", "[", "i", "]", "=", "1", "\n", "assert", "has_label", ".", "size", "==", "1", "\n", "rids", "=", "x", "[", "'role_object_id'", "]", "[", "has_label", "]", "\n", "assert", "rids", "[", "0", ",", "0", "]", "==", "ann_id", "\n", "for", "j", "in", "range", "(", "1", ",", "rids", ".", "shape", "[", "1", "]", ")", ":", "\n", "          ", "if", "rids", "[", "0", ",", "j", "]", "==", "0", ":", "\n", "# no role", "\n", "            ", "continue", "\n", "", "aid", "=", "np", ".", "where", "(", "ann_ids", "==", "rids", "[", "0", ",", "j", "]", ")", "[", "0", "]", "\n", "assert", "aid", ".", "size", ">", "0", "\n", "role_id", "[", "i", ",", "j", "-", "1", "]", "=", "aid", "\n", "", "", "", "return", "action_id", ",", "role_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval.VCOCOeval._collect_detections_for_image": [[171, 196], ["numpy.empty", "numpy.empty", "numpy.zeros", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate", "enumerate"], "methods", ["None"], ["", "def", "_collect_detections_for_image", "(", "self", ",", "dets", ",", "image_id", ")", ":", "\n", "\n", "    ", "agents", "=", "np", ".", "empty", "(", "(", "0", ",", "4", "+", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# 4 + 26 = 30", "\n", "roles", "=", "np", ".", "empty", "(", "(", "0", ",", "5", "*", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# (5 * 26), 2", "\n", "for", "det", "in", "dets", ":", "# loop all detection instance", "\n", "# print(det.keys())", "\n", "      ", "if", "det", "[", "'image_id'", "]", "==", "image_id", ":", "# might be several", "\n", "        ", "this_agent", "=", "np", ".", "zeros", "(", "(", "1", ",", "4", "+", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this_role", "=", "np", ".", "zeros", "(", "(", "1", ",", "5", "*", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this_agent", "[", "0", ",", ":", "4", "]", "=", "det", "[", "'person_box'", "]", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "# loop 26 actions", "\n", "          ", "for", "j", ",", "rid", "in", "enumerate", "(", "self", ".", "roles", "[", "aid", "]", ")", ":", "\n", "            ", "if", "rid", "==", "'agent'", ":", "\n", "#if aid == 10:", "\n", "#  this_agent[0, 4 + aid] = det['talk_' + rid]", "\n", "#if aid == 16:", "\n", "#  this_agent[0, 4 + aid] = det['work_' + rid]", "\n", "#if (aid != 10) and (aid != 16):", "\n", "\n", "                ", "this_agent", "[", "0", ",", "4", "+", "aid", "]", "=", "det", "[", "self", ".", "actions", "[", "aid", "]", "+", "'_'", "+", "rid", "]", "\n", "", "else", ":", "\n", "                ", "this_role", "[", "0", ",", "5", "*", "aid", ":", "5", "*", "aid", "+", "5", ",", "j", "-", "1", "]", "=", "det", "[", "self", ".", "actions", "[", "aid", "]", "+", "'_'", "+", "rid", "]", "\n", "", "", "", "agents", "=", "np", ".", "concatenate", "(", "(", "agents", ",", "this_agent", ")", ",", "axis", "=", "0", ")", "\n", "roles", "=", "np", ".", "concatenate", "(", "(", "roles", ",", "this_role", ")", ",", "axis", "=", "0", ")", "\n", "", "", "return", "agents", ",", "roles", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval.VCOCOeval._do_eval": [[198, 202], ["vsrl_eval.VCOCOeval._do_role_eval"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._do_role_eval"], ["", "def", "_do_eval", "(", "self", ",", "detections_file", ",", "ovr_thresh", "=", "0.5", ")", ":", "\n", "\n", "# self._do_agent_eval(vcocodb, detections_file, ovr_thresh=ovr_thresh)", "\n", "    ", "self", ".", "_do_role_eval", "(", "self", ".", "vcocodb", ",", "detections_file", ",", "ovr_thresh", "=", "ovr_thresh", ",", "eval_type", "=", "'scenario_1'", ")", "\n", "# self._do_role_eval(self.vcocodb, detections_file, ovr_thresh=ovr_thresh, eval_type='scenario_2')", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval.VCOCOeval._do_role_eval": [[205, 342], ["numpy.zeros", "range", "numpy.zeros", "range", "print", "range", "print", "print", "print", "print", "open", "pickle.load", "len", "numpy.any", "numpy.all", "range", "vsrl_eval.VCOCOeval._collect_detections_for_image", "range", "range", "range", "range", "range", "range", "numpy.where", "numpy.sum", "range", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.cumsum", "numpy.cumsum", "vsrl_eval.voc_ap", "len", "print", "range", "range", "range", "len", "numpy.zeros", "range", "len", "numpy.array.argsort", "float", "numpy.amax", "numpy.maximum", "len", "len", "numpy.ones_like", "numpy.where", "agent_scores.argsort", "vsrl_eval.get_overlap", "get_overlap.argmax", "get_overlap.max", "numpy.all", "[].append", "int", "numpy.nanmean", "vsrl_eval.get_overlap", "[].append", "[].append", "numpy.finfo", "numpy.where", "numpy.isnan", "gt_roles[].reshape", "[].append", "[].append", "[].append", "[].append", "numpy.all", "numpy.all", "ValueError", "numpy.nanmean", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._collect_detections_for_image", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.voc_ap", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.get_overlap", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.get_overlap"], ["", "def", "_do_role_eval", "(", "self", ",", "vcocodb", ",", "detections_file", ",", "ovr_thresh", "=", "0.5", ",", "eval_type", "=", "'scenario_1'", ")", ":", "\n", "\n", "    ", "with", "open", "(", "detections_file", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "dets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "tp", "=", "[", "[", "[", "]", "for", "r", "in", "range", "(", "2", ")", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "fp", "=", "[", "[", "[", "]", "for", "r", "in", "range", "(", "2", ")", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "sc", "=", "[", "[", "[", "]", "for", "r", "in", "range", "(", "2", ")", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "\n", "npos", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "vcocodb", ")", ")", ":", "\n", "      ", "image_id", "=", "vcocodb", "[", "i", "]", "[", "'id'", "]", "\n", "gt_inds", "=", "np", ".", "where", "(", "vcocodb", "[", "i", "]", "[", "'gt_classes'", "]", "==", "1", ")", "[", "0", "]", "\n", "# person boxes", "\n", "gt_boxes", "=", "vcocodb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_inds", "]", "\n", "gt_actions", "=", "vcocodb", "[", "i", "]", "[", "'gt_actions'", "]", "[", "gt_inds", "]", "\n", "# some peorson instances don't have annotated actions", "\n", "# we ignore those instances", "\n", "ignore", "=", "np", ".", "any", "(", "gt_actions", "==", "-", "1", ",", "axis", "=", "1", ")", "\n", "assert", "np", ".", "all", "(", "gt_actions", "[", "np", ".", "where", "(", "ignore", "==", "True", ")", "[", "0", "]", "]", "==", "-", "1", ")", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "npos", "[", "aid", "]", "+=", "np", ".", "sum", "(", "gt_actions", "[", ":", ",", "aid", "]", "==", "1", ")", "\n", "\n", "", "pred_agents", ",", "pred_roles", "=", "self", ".", "_collect_detections_for_image", "(", "dets", ",", "image_id", ")", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "<", "2", ":", "\n", "# if action has no role, then no role AP computed", "\n", "          ", "continue", "\n", "\n", "", "for", "rid", "in", "range", "(", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "-", "1", ")", ":", "\n", "\n", "# keep track of detected instances for each action for each role", "\n", "          ", "covered", "=", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "# get gt roles for action and role", "\n", "gt_role_inds", "=", "vcocodb", "[", "i", "]", "[", "'gt_role_id'", "]", "[", "gt_inds", ",", "aid", ",", "rid", "]", "\n", "gt_roles", "=", "-", "np", ".", "ones_like", "(", "gt_boxes", ")", "\n", "for", "j", "in", "range", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "gt_role_inds", "[", "j", "]", ">", "-", "1", ":", "\n", "              ", "gt_roles", "[", "j", "]", "=", "vcocodb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_role_inds", "[", "j", "]", "]", "\n", "\n", "", "", "agent_boxes", "=", "pred_agents", "[", ":", ",", ":", "4", "]", "\n", "role_boxes", "=", "pred_roles", "[", ":", ",", "5", "*", "aid", ":", "5", "*", "aid", "+", "4", ",", "rid", "]", "\n", "agent_scores", "=", "pred_roles", "[", ":", ",", "5", "*", "aid", "+", "4", ",", "rid", "]", "\n", "\n", "valid", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "agent_scores", ")", "==", "False", ")", "[", "0", "]", "\n", "#valid = np.where(agent_scores != 0)[0]", "\n", "\n", "\n", "agent_scores", "=", "agent_scores", "[", "valid", "]", "\n", "agent_boxes", "=", "agent_boxes", "[", "valid", ",", ":", "]", "\n", "role_boxes", "=", "role_boxes", "[", "valid", ",", ":", "]", "\n", "\n", "idx", "=", "agent_scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "for", "j", "in", "idx", ":", "\n", "            ", "pred_box", "=", "agent_boxes", "[", "j", ",", ":", "]", "\n", "overlaps", "=", "get_overlap", "(", "gt_boxes", ",", "pred_box", ")", "\n", "\n", "# matching happens based on the person ", "\n", "jmax", "=", "overlaps", ".", "argmax", "(", ")", "\n", "ovmax", "=", "overlaps", ".", "max", "(", ")", "\n", "\n", "# if matched with an instance with no annotations", "\n", "# continue", "\n", "if", "ignore", "[", "jmax", "]", ":", "\n", "              ", "continue", "\n", "\n", "# overlap between predicted role and gt role", "\n", "", "if", "np", ".", "all", "(", "gt_roles", "[", "jmax", ",", ":", "]", "==", "-", "1", ")", ":", "# if no gt role", "\n", "              ", "if", "eval_type", "==", "'scenario_1'", ":", "\n", "                ", "if", "np", ".", "all", "(", "role_boxes", "[", "j", ",", ":", "]", "==", "0.0", ")", "or", "np", ".", "all", "(", "np", ".", "isnan", "(", "role_boxes", "[", "j", ",", ":", "]", ")", ")", ":", "\n", "# if no role is predicted, mark it as correct role overlap", "\n", "                  ", "ov_role", "=", "1.0", "\n", "", "else", ":", "\n", "# if a role is predicted, mark it as false ", "\n", "                  ", "ov_role", "=", "0.0", "\n", "", "", "elif", "eval_type", "==", "'scenario_2'", ":", "\n", "# if no gt role, role prediction is always correct, irrespective of the actual predition", "\n", "                ", "ov_role", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown eval type'", ")", "\n", "", "", "else", ":", "\n", "              ", "ov_role", "=", "get_overlap", "(", "gt_roles", "[", "jmax", ",", ":", "]", ".", "reshape", "(", "(", "1", ",", "4", ")", ")", ",", "role_boxes", "[", "j", ",", ":", "]", ")", "\n", "\n", "", "is_true_action", "=", "(", "gt_actions", "[", "jmax", ",", "aid", "]", "==", "1", ")", "\n", "sc", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "agent_scores", "[", "j", "]", ")", "\n", "if", "is_true_action", "and", "(", "ovmax", ">=", "ovr_thresh", ")", "and", "(", "ov_role", ">=", "ovr_thresh", ")", ":", "\n", "              ", "if", "covered", "[", "jmax", "]", ":", "\n", "                ", "fp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "fp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "1", ")", "\n", "covered", "[", "jmax", "]", "=", "True", "\n", "", "", "else", ":", "\n", "              ", "fp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "\n", "# compute ap for each action", "\n", "", "", "", "", "", "role_ap", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "role_ap", "[", ":", "]", "=", "np", ".", "nan", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "      ", "if", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "<", "2", ":", "\n", "        ", "continue", "\n", "", "for", "rid", "in", "range", "(", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "-", "1", ")", ":", "\n", "        ", "a_fp", "=", "np", ".", "array", "(", "fp", "[", "aid", "]", "[", "rid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_tp", "=", "np", ".", "array", "(", "tp", "[", "aid", "]", "[", "rid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_sc", "=", "np", ".", "array", "(", "sc", "[", "aid", "]", "[", "rid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# sort in descending score order", "\n", "idx", "=", "a_sc", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "a_fp", "=", "a_fp", "[", "idx", "]", "\n", "a_tp", "=", "a_tp", "[", "idx", "]", "\n", "a_sc", "=", "a_sc", "[", "idx", "]", "\n", "\n", "a_fp", "=", "np", ".", "cumsum", "(", "a_fp", ")", "\n", "a_tp", "=", "np", ".", "cumsum", "(", "a_tp", ")", "\n", "rec", "=", "a_tp", "/", "float", "(", "npos", "[", "aid", "]", ")", "\n", "#check", "\n", "assert", "(", "np", ".", "amax", "(", "rec", ")", "<=", "1", ")", "\n", "prec", "=", "a_tp", "/", "np", ".", "maximum", "(", "a_tp", "+", "a_fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "role_ap", "[", "aid", ",", "rid", "]", "=", "voc_ap", "(", "rec", ",", "prec", ")", "\n", "\n", "", "", "print", "(", "'---------Reporting Role AP (%)------------------'", ")", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "      ", "if", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "<", "2", ":", "continue", "\n", "for", "rid", "in", "range", "(", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "-", "1", ")", ":", "\n", "        ", "print", "(", "'{: >23}: AP = {:0.2f} (#pos = {:d})'", ".", "format", "(", "self", ".", "actions", "[", "aid", "]", "+", "'-'", "+", "self", ".", "roles", "[", "aid", "]", "[", "rid", "+", "1", "]", ",", "role_ap", "[", "aid", ",", "rid", "]", "*", "100.0", ",", "int", "(", "npos", "[", "aid", "]", ")", ")", ")", "\n", "\n", "", "", "print", "(", "'Average Role [%s] AP = %.2f'", "%", "(", "eval_type", ",", "np", ".", "nanmean", "(", "role_ap", ")", "*", "100.00", ")", ")", "\n", "print", "(", "'---------------------------------------------'", ")", "\n", "print", "(", "'Average Role [%s] AP = %.2f, omitting the action \"point\"'", "%", "(", "eval_type", ",", "(", "np", ".", "nanmean", "(", "role_ap", ")", "*", "25", "-", "role_ap", "[", "-", "3", "]", "[", "0", "]", ")", "/", "24", "*", "100.00", ")", ")", "\n", "print", "(", "'---------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval.VCOCOeval._do_agent_eval": [[355, 452], ["numpy.zeros", "range", "numpy.zeros", "range", "print", "range", "print", "print", "open", "pickle.load", "len", "numpy.any", "range", "vsrl_eval.VCOCOeval._collect_detections_for_image", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.cumsum", "numpy.cumsum", "vsrl_eval.voc_ap", "print", "range", "range", "range", "numpy.where", "numpy.sum", "numpy.zeros", "numpy.array.argsort", "float", "numpy.amax", "numpy.maximum", "numpy.where", "agent_scores.argsort", "vsrl_eval.get_overlap", "get_overlap.argmax", "get_overlap.max", "sc[].append", "int", "fp[].append", "tp[].append", "numpy.finfo", "numpy.nansum", "numpy.isnan", "fp[].append", "tp[].append", "fp[].append", "tp[].append"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._collect_detections_for_image", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.voc_ap", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.get_overlap"], ["", "def", "_do_agent_eval", "(", "self", ",", "vcocodb", ",", "detections_file", ",", "ovr_thresh", "=", "0.5", ")", ":", "\n", "\n", "    ", "with", "open", "(", "detections_file", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "dets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "tp", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "fp", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "sc", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "\n", "npos", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "vcocodb", ")", ")", ":", "\n", "      ", "image_id", "=", "vcocodb", "[", "i", "]", "[", "'id'", "]", "# img ID, not the full name (e.g. id= 165, 'file_name' = COCO_train2014_000000000165.jpg )", "\n", "gt_inds", "=", "np", ".", "where", "(", "vcocodb", "[", "i", "]", "[", "'gt_classes'", "]", "==", "1", ")", "[", "0", "]", "# index of the person's box among all object boxes", "\n", "# person boxes", "\n", "gt_boxes", "=", "vcocodb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_inds", "]", "# all person's boxes in this image", "\n", "gt_actions", "=", "vcocodb", "[", "i", "]", "[", "'gt_actions'", "]", "[", "gt_inds", "]", "# index of Nx26 binary matrix indicating the actions", "\n", "# some peorson instances don't have annotated actions", "\n", "# we ignore those instances", "\n", "ignore", "=", "np", ".", "any", "(", "gt_actions", "==", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "npos", "[", "aid", "]", "+=", "np", ".", "sum", "(", "gt_actions", "[", ":", ",", "aid", "]", "==", "1", ")", "# how many actions are involved in this image(for all the human)", "\n", "\n", "", "pred_agents", ",", "_", "=", "self", ".", "_collect_detections_for_image", "(", "dets", ",", "image_id", ")", "\n", "# For each image, we have a pred_agents. For example, there are 2 people detected, then pred_agents is a 2x(4+26) matrix. Each row stands for a human, 0-3 human box, 4-25 the score for each action.", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "\n", "# keep track of detected instances for each action", "\n", "        ", "covered", "=", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "bool", ")", "# gt_boxes.shape[0] is the number of people in this image", "\n", "\n", "agent_scores", "=", "pred_agents", "[", ":", ",", "4", "+", "aid", "]", "# score of this action for all people in this image", "\n", "agent_boxes", "=", "pred_agents", "[", ":", ",", ":", "4", "]", "# predicted buman box for all people in this image", "\n", "# remove NaNs", "\n", "# If only use agent, there should be no NAN cause there is no object information provided. Just give a agent score.", "\n", "valid", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "agent_scores", ")", "==", "False", ")", "[", "0", "]", "\n", "agent_scores", "=", "agent_scores", "[", "valid", "]", "\n", "agent_boxes", "=", "agent_boxes", "[", "valid", ",", ":", "]", "\n", "\n", "# sort in descending order", "\n", "idx", "=", "agent_scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# For this action, sort score of all people. A action cam be done by many people.", "\n", "\n", "for", "j", "in", "idx", ":", "# Each predicted person", "\n", "          ", "pred_box", "=", "agent_boxes", "[", "j", ",", ":", "]", "# It's predicted human box", "\n", "overlaps", "=", "get_overlap", "(", "gt_boxes", ",", "pred_box", ")", "# overlap between this predict human and all human gt_boxes", "\n", "\n", "jmax", "=", "overlaps", ".", "argmax", "(", ")", "# Find the idx of gt human box that matches this predicted human", "\n", "ovmax", "=", "overlaps", ".", "max", "(", ")", "\n", "\n", "# if matched with an instance with no annotations", "\n", "# continue", "\n", "if", "ignore", "[", "jmax", "]", ":", "\n", "            ", "continue", "\n", "\n", "", "is_true_action", "=", "(", "gt_actions", "[", "jmax", ",", "aid", "]", "==", "1", ")", "# Is this person actually doing this action according to gt?", "\n", "\n", "sc", "[", "aid", "]", ".", "append", "(", "agent_scores", "[", "j", "]", ")", "# The predicted score of this person doing this action. In descending order.", "\n", "if", "is_true_action", "and", "(", "ovmax", ">=", "ovr_thresh", ")", ":", "# bounding box IOU is larger than 0.5 and this this person is doing this action.", "\n", "            ", "if", "covered", "[", "jmax", "]", ":", "\n", "              ", "fp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "", "else", ":", "# first time see this gt human", "\n", "              ", "fp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "covered", "[", "jmax", "]", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "fp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "\n", "# compute ap for each action", "\n", "", "", "", "", "agent_ap", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "\n", "      ", "a_fp", "=", "np", ".", "array", "(", "fp", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_tp", "=", "np", ".", "array", "(", "tp", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_sc", "=", "np", ".", "array", "(", "sc", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# sort in descending score order", "\n", "idx", "=", "a_sc", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# For each action, sort the score of all predicted people in all images", "\n", "a_fp", "=", "a_fp", "[", "idx", "]", "\n", "a_tp", "=", "a_tp", "[", "idx", "]", "\n", "a_sc", "=", "a_sc", "[", "idx", "]", "\n", "\n", "a_fp", "=", "np", ".", "cumsum", "(", "a_fp", ")", "\n", "a_tp", "=", "np", ".", "cumsum", "(", "a_tp", ")", "\n", "rec", "=", "a_tp", "/", "float", "(", "npos", "[", "aid", "]", ")", "\n", "#check", "\n", "\n", "assert", "(", "np", ".", "amax", "(", "rec", ")", "<=", "1", ")", "\n", "prec", "=", "a_tp", "/", "np", ".", "maximum", "(", "a_tp", "+", "a_fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "agent_ap", "[", "aid", "]", "=", "voc_ap", "(", "rec", ",", "prec", ")", "\n", "\n", "", "print", "(", "'---------Reporting Agent AP (%)------------------'", ")", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "      ", "print", "(", "'{: >20}: AP = {:0.2f} (#pos = {:d})'", ".", "format", "(", "self", ".", "actions", "[", "aid", "]", ",", "agent_ap", "[", "aid", "]", "*", "100.0", ",", "int", "(", "npos", "[", "aid", "]", ")", ")", ")", "\n", "", "print", "(", "'Average Agent AP = %.2f'", "%", "(", "np", ".", "nansum", "(", "agent_ap", ")", "*", "100.00", "/", "self", ".", "num_actions", ")", ")", "\n", "print", "(", "'---------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval._load_vcoco": [[453, 463], ["print", "range", "open", "json.load", "len", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "len", "numpy.array"], "function", ["None"], ["", "", "def", "_load_vcoco", "(", "vcoco_file", ")", ":", "\n", "  ", "print", "(", "'loading vcoco annotations...'", ")", "\n", "with", "open", "(", "vcoco_file", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "vsrl_data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "vsrl_data", ")", ")", ":", "\n", "    ", "vsrl_data", "[", "i", "]", "[", "'role_object_id'", "]", "=", "np", ".", "array", "(", "vsrl_data", "[", "i", "]", "[", "'role_object_id'", "]", ")", ".", "reshape", "(", "(", "len", "(", "vsrl_data", "[", "i", "]", "[", "'role_name'", "]", ")", ",", "-", "1", ")", ")", ".", "T", "\n", "for", "j", "in", "[", "'ann_id'", ",", "'label'", ",", "'image_id'", "]", ":", "\n", "        ", "vsrl_data", "[", "i", "]", "[", "j", "]", "=", "np", ".", "array", "(", "vsrl_data", "[", "i", "]", "[", "j", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "", "return", "vsrl_data", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval.clip_xyxy_to_image": [[465, 471], ["numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "clip_xyxy_to_image", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "height", ",", "width", ")", ":", "\n", "  ", "x1", "=", "np", ".", "minimum", "(", "width", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "x1", ")", ")", "\n", "y1", "=", "np", ".", "minimum", "(", "height", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "y1", ")", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "width", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "x2", ")", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "height", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "y2", ")", ")", "\n", "return", "x1", ",", "y1", ",", "x2", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval.get_overlap": [[473, 489], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "get_overlap", "(", "boxes", ",", "ref_box", ")", ":", "\n", "  ", "ixmin", "=", "np", ".", "maximum", "(", "boxes", "[", ":", ",", "0", "]", ",", "ref_box", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "boxes", "[", ":", ",", "1", "]", ",", "ref_box", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "2", "]", ",", "ref_box", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "3", "]", ",", "ref_box", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "(", "ref_box", "[", "2", "]", "-", "ref_box", "[", "0", "]", "+", "1.", ")", "*", "(", "ref_box", "[", "3", "]", "-", "ref_box", "[", "1", "]", "+", "1.", ")", "+", "\n", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1.", ")", "*", "\n", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1.", ")", "-", "inters", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval.voc_ap": [[491, 512], ["numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ")", ":", "\n", "  ", "\"\"\" ap = voc_ap(rec, prec)\n  Compute VOC AP given precision and recall.\n  [as defined in PASCAL VOC]\n  \"\"\"", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "      ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.Download_data.download_file_from_google_drive": [[15, 43], ["requests.Session", "requests.Session.get", "Download_data.download_file_from_google_drive.get_confirm_token"], "function", ["None"], ["def", "download_file_from_google_drive", "(", "id", ",", "destination", ")", ":", "\n", "    ", "def", "get_confirm_token", "(", "response", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'download_warning'", ")", ":", "\n", "                ", "return", "value", "\n", "\n", "", "", "return", "None", "\n", "\n", "", "def", "save_response_content", "(", "response", ",", "destination", ")", ":", "\n", "        ", "CHUNK_SIZE", "=", "32768", "\n", "\n", "with", "open", "(", "destination", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "for", "chunk", "in", "response", ".", "iter_content", "(", "CHUNK_SIZE", ")", ":", "\n", "                ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                    ", "f", ".", "write", "(", "chunk", ")", "\n", "\n", "", "", "", "", "URL", "=", "\"https://docs.google.com/uc?export=download\"", "\n", "\n", "session", "=", "requests", ".", "Session", "(", ")", "\n", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "{", "'id'", ":", "id", "}", ",", "stream", "=", "True", ")", "\n", "token", "=", "get_confirm_token", "(", "response", ")", "\n", "\n", "if", "token", ":", "\n", "        ", "params", "=", "{", "'id'", ":", "id", ",", "'confirm'", ":", "token", "}", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "params", ",", "stream", "=", "True", ")", "\n", "\n", "", "save_response_content", "(", "response", ",", "destination", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.bbox_trans": [[31, 111], ["human_box_ori.copy", "object_box_ori.copy", "min", "min", "max", "max", "numpy.round", "numpy.round", "min", "min", "max", "max", "min", "min", "max", "max"], "function", ["None"], ["def", "bbox_trans", "(", "human_box_ori", ",", "object_box_ori", ",", "ratio", ",", "size", "=", "64", ")", ":", "\n", "    ", "human_box", "=", "human_box_ori", ".", "copy", "(", ")", "\n", "object_box", "=", "object_box_ori", ".", "copy", "(", ")", "\n", "\n", "InteractionPattern", "=", "[", "min", "(", "human_box", "[", "0", "]", ",", "object_box", "[", "0", "]", ")", ",", "min", "(", "human_box", "[", "1", "]", ",", "object_box", "[", "1", "]", ")", ",", "\n", "max", "(", "human_box", "[", "2", "]", ",", "object_box", "[", "2", "]", ")", ",", "max", "(", "human_box", "[", "3", "]", ",", "object_box", "[", "3", "]", ")", "]", "\n", "\n", "height", "=", "InteractionPattern", "[", "3", "]", "-", "InteractionPattern", "[", "1", "]", "+", "1", "\n", "width", "=", "InteractionPattern", "[", "2", "]", "-", "InteractionPattern", "[", "0", "]", "+", "1", "\n", "\n", "if", "height", ">", "width", ":", "\n", "        ", "ratio", "=", "'height'", "\n", "", "else", ":", "\n", "        ", "ratio", "=", "'width'", "\n", "\n", "# shift the top-left corner to (0,0)", "\n", "\n", "", "human_box", "[", "0", "]", "-=", "InteractionPattern", "[", "0", "]", "\n", "human_box", "[", "2", "]", "-=", "InteractionPattern", "[", "0", "]", "\n", "human_box", "[", "1", "]", "-=", "InteractionPattern", "[", "1", "]", "\n", "human_box", "[", "3", "]", "-=", "InteractionPattern", "[", "1", "]", "\n", "object_box", "[", "0", "]", "-=", "InteractionPattern", "[", "0", "]", "\n", "object_box", "[", "2", "]", "-=", "InteractionPattern", "[", "0", "]", "\n", "object_box", "[", "1", "]", "-=", "InteractionPattern", "[", "1", "]", "\n", "object_box", "[", "3", "]", "-=", "InteractionPattern", "[", "1", "]", "\n", "\n", "if", "ratio", "==", "'height'", ":", "# height is larger than width", "\n", "\n", "        ", "human_box", "[", "0", "]", "=", "0", "+", "size", "*", "human_box", "[", "0", "]", "/", "height", "\n", "human_box", "[", "1", "]", "=", "0", "+", "size", "*", "human_box", "[", "1", "]", "/", "height", "\n", "human_box", "[", "2", "]", "=", "(", "size", "*", "width", "/", "height", "-", "1", ")", "-", "size", "*", "(", "width", "-", "1", "-", "human_box", "[", "2", "]", ")", "/", "height", "\n", "human_box", "[", "3", "]", "=", "(", "size", "-", "1", ")", "-", "size", "*", "(", "height", "-", "1", "-", "human_box", "[", "3", "]", ")", "/", "height", "\n", "\n", "object_box", "[", "0", "]", "=", "0", "+", "size", "*", "object_box", "[", "0", "]", "/", "height", "\n", "object_box", "[", "1", "]", "=", "0", "+", "size", "*", "object_box", "[", "1", "]", "/", "height", "\n", "object_box", "[", "2", "]", "=", "(", "size", "*", "width", "/", "height", "-", "1", ")", "-", "size", "*", "(", "width", "-", "1", "-", "object_box", "[", "2", "]", ")", "/", "height", "\n", "object_box", "[", "3", "]", "=", "(", "size", "-", "1", ")", "-", "size", "*", "(", "height", "-", "1", "-", "object_box", "[", "3", "]", ")", "/", "height", "\n", "\n", "# Need to shift horizontally  ", "\n", "InteractionPattern", "=", "[", "min", "(", "human_box", "[", "0", "]", ",", "object_box", "[", "0", "]", ")", ",", "min", "(", "human_box", "[", "1", "]", ",", "object_box", "[", "1", "]", ")", ",", "\n", "max", "(", "human_box", "[", "2", "]", ",", "object_box", "[", "2", "]", ")", ",", "max", "(", "human_box", "[", "3", "]", ",", "object_box", "[", "3", "]", ")", "]", "\n", "# assert (InteractionPattern[0] == 0) & (InteractionPattern[1] == 0) & (InteractionPattern[3] == 63) & (InteractionPattern[2] <= 63)", "\n", "if", "human_box", "[", "3", "]", ">", "object_box", "[", "3", "]", ":", "\n", "            ", "human_box", "[", "3", "]", "=", "size", "-", "1", "\n", "", "else", ":", "\n", "            ", "object_box", "[", "3", "]", "=", "size", "-", "1", "\n", "\n", "", "shift", "=", "size", "/", "2", "-", "(", "InteractionPattern", "[", "2", "]", "+", "1", ")", "/", "2", "\n", "human_box", "+=", "[", "shift", ",", "0", ",", "shift", ",", "0", "]", "\n", "object_box", "+=", "[", "shift", ",", "0", ",", "shift", ",", "0", "]", "\n", "\n", "", "else", ":", "# width is larger than height", "\n", "\n", "        ", "human_box", "[", "0", "]", "=", "0", "+", "size", "*", "human_box", "[", "0", "]", "/", "width", "\n", "human_box", "[", "1", "]", "=", "0", "+", "size", "*", "human_box", "[", "1", "]", "/", "width", "\n", "human_box", "[", "2", "]", "=", "(", "size", "-", "1", ")", "-", "size", "*", "(", "width", "-", "1", "-", "human_box", "[", "2", "]", ")", "/", "width", "\n", "human_box", "[", "3", "]", "=", "(", "size", "*", "height", "/", "width", "-", "1", ")", "-", "size", "*", "(", "height", "-", "1", "-", "human_box", "[", "3", "]", ")", "/", "width", "\n", "\n", "object_box", "[", "0", "]", "=", "0", "+", "size", "*", "object_box", "[", "0", "]", "/", "width", "\n", "object_box", "[", "1", "]", "=", "0", "+", "size", "*", "object_box", "[", "1", "]", "/", "width", "\n", "object_box", "[", "2", "]", "=", "(", "size", "-", "1", ")", "-", "size", "*", "(", "width", "-", "1", "-", "object_box", "[", "2", "]", ")", "/", "width", "\n", "object_box", "[", "3", "]", "=", "(", "size", "*", "height", "/", "width", "-", "1", ")", "-", "size", "*", "(", "height", "-", "1", "-", "object_box", "[", "3", "]", ")", "/", "width", "\n", "\n", "# Need to shift vertically ", "\n", "InteractionPattern", "=", "[", "min", "(", "human_box", "[", "0", "]", ",", "object_box", "[", "0", "]", ")", ",", "min", "(", "human_box", "[", "1", "]", ",", "object_box", "[", "1", "]", ")", ",", "\n", "max", "(", "human_box", "[", "2", "]", ",", "object_box", "[", "2", "]", ")", ",", "max", "(", "human_box", "[", "3", "]", ",", "object_box", "[", "3", "]", ")", "]", "\n", "\n", "# assert (InteractionPattern[0] == 0) & (InteractionPattern[1] == 0) & (InteractionPattern[2] == 63) & (InteractionPattern[3] <= 63)", "\n", "\n", "if", "human_box", "[", "2", "]", ">", "object_box", "[", "2", "]", ":", "\n", "            ", "human_box", "[", "2", "]", "=", "size", "-", "1", "\n", "", "else", ":", "\n", "            ", "object_box", "[", "2", "]", "=", "size", "-", "1", "\n", "\n", "", "shift", "=", "size", "/", "2", "-", "(", "InteractionPattern", "[", "3", "]", "+", "1", ")", "/", "2", "\n", "\n", "human_box", "=", "human_box", "+", "[", "0", ",", "shift", ",", "0", ",", "shift", "]", "\n", "object_box", "=", "object_box", "+", "[", "0", ",", "shift", ",", "0", ",", "shift", "]", "\n", "\n", "", "return", "np", ".", "round", "(", "human_box", ")", ",", "np", ".", "round", "(", "object_box", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp": [[113, 128], ["numpy.zeros", "min", "min", "max", "max", "ult.bbox_trans", "ult.bbox_trans", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.bbox_trans", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.bbox_trans"], ["", "def", "Get_next_sp", "(", "human_box", ",", "object_box", ")", ":", "\n", "    ", "InteractionPattern", "=", "[", "min", "(", "human_box", "[", "0", "]", ",", "object_box", "[", "0", "]", ")", ",", "min", "(", "human_box", "[", "1", "]", ",", "object_box", "[", "1", "]", ")", ",", "\n", "max", "(", "human_box", "[", "2", "]", ",", "object_box", "[", "2", "]", ")", ",", "max", "(", "human_box", "[", "3", "]", ",", "object_box", "[", "3", "]", ")", "]", "\n", "height", "=", "InteractionPattern", "[", "3", "]", "-", "InteractionPattern", "[", "1", "]", "+", "1", "\n", "width", "=", "InteractionPattern", "[", "2", "]", "-", "InteractionPattern", "[", "0", "]", "+", "1", "\n", "if", "height", ">", "width", ":", "\n", "        ", "H", ",", "O", "=", "bbox_trans", "(", "human_box", ",", "object_box", ",", "'height'", ")", "\n", "", "else", ":", "\n", "        ", "H", ",", "O", "=", "bbox_trans", "(", "human_box", ",", "object_box", ",", "'width'", ")", "\n", "\n", "", "Pattern", "=", "np", ".", "zeros", "(", "(", "64", ",", "64", ",", "2", ")", ")", "\n", "Pattern", "[", "int", "(", "H", "[", "1", "]", ")", ":", "int", "(", "H", "[", "3", "]", ")", "+", "1", ",", "int", "(", "H", "[", "0", "]", ")", ":", "int", "(", "H", "[", "2", "]", ")", "+", "1", ",", "0", "]", "=", "1", "\n", "Pattern", "[", "int", "(", "O", "[", "1", "]", ")", ":", "int", "(", "O", "[", "3", "]", ")", "+", "1", ",", "int", "(", "O", "[", "0", "]", ")", ":", "int", "(", "O", "[", "2", "]", ")", "+", "1", ",", "1", "]", "=", "1", "\n", "\n", "return", "Pattern", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_skeleton": [[156, 172], ["numpy.zeros", "range", "ult.draw_relation", "min", "min", "float", "float", "int", "int", "round", "round"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.draw_relation"], ["", "def", "get_skeleton", "(", "human_box", ",", "human_pose", ",", "human_pattern", ",", "num_joints", "=", "17", ",", "size", "=", "64", ")", ":", "\n", "    ", "width", "=", "human_box", "[", "2", "]", "-", "human_box", "[", "0", "]", "+", "1", "\n", "height", "=", "human_box", "[", "3", "]", "-", "human_box", "[", "1", "]", "+", "1", "\n", "pattern_width", "=", "human_pattern", "[", "2", "]", "-", "human_pattern", "[", "0", "]", "+", "1", "\n", "pattern_height", "=", "human_pattern", "[", "3", "]", "-", "human_pattern", "[", "1", "]", "+", "1", "\n", "joints", "=", "np", ".", "zeros", "(", "(", "num_joints", "+", "1", ",", "2", ")", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_joints", ")", ":", "\n", "        ", "joint_x", ",", "joint_y", ",", "joint_score", "=", "human_pose", "[", "3", "*", "i", ":", "3", "*", "(", "i", "+", "1", ")", "]", "\n", "x_ratio", "=", "(", "joint_x", "-", "human_box", "[", "0", "]", ")", "/", "float", "(", "width", ")", "\n", "y_ratio", "=", "(", "joint_y", "-", "human_box", "[", "1", "]", ")", "/", "float", "(", "height", ")", "\n", "joints", "[", "i", "]", "[", "0", "]", "=", "min", "(", "size", "-", "1", ",", "int", "(", "round", "(", "x_ratio", "*", "pattern_width", "+", "human_pattern", "[", "0", "]", ")", ")", ")", "\n", "joints", "[", "i", "]", "[", "1", "]", "=", "min", "(", "size", "-", "1", ",", "int", "(", "round", "(", "y_ratio", "*", "pattern_height", "+", "human_pattern", "[", "1", "]", ")", ")", ")", "\n", "", "joints", "[", "num_joints", "]", "=", "(", "joints", "[", "5", "]", "+", "joints", "[", "6", "]", ")", "/", "2", "\n", "\n", "return", "draw_relation", "(", "human_pattern", ",", "joints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.draw_relation": [[174, 189], ["numpy.zeros", "range", "len", "cv2.line", "tuple", "tuple"], "function", ["None"], ["", "def", "draw_relation", "(", "human_pattern", ",", "joints", ",", "size", "=", "64", ")", ":", "\n", "    ", "joint_relation", "=", "[", "[", "1", ",", "3", "]", ",", "[", "2", ",", "4", "]", ",", "[", "0", ",", "1", "]", ",", "[", "0", ",", "2", "]", ",", "[", "0", ",", "17", "]", ",", "[", "5", ",", "17", "]", ",", "[", "6", ",", "17", "]", ",", "[", "5", ",", "7", "]", ",", "[", "6", ",", "8", "]", ",", "[", "7", ",", "9", "]", ",", "[", "8", ",", "10", "]", ",", "\n", "[", "11", ",", "17", "]", ",", "[", "12", ",", "17", "]", ",", "[", "11", ",", "13", "]", ",", "[", "12", ",", "14", "]", ",", "[", "13", ",", "15", "]", ",", "[", "14", ",", "16", "]", "]", "\n", "color", "=", "[", "0.15", ",", "0.2", ",", "0.25", ",", "0.3", ",", "0.35", ",", "0.4", ",", "0.45", ",", "0.5", ",", "0.55", ",", "0.6", ",", "0.65", ",", "0.7", ",", "0.75", ",", "0.8", ",", "0.85", ",", "0.9", ",", "0.95", "]", "\n", "skeleton", "=", "np", ".", "zeros", "(", "(", "size", ",", "size", ",", "1", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "joint_relation", ")", ")", ":", "\n", "        ", "cv2", ".", "line", "(", "skeleton", ",", "tuple", "(", "joints", "[", "joint_relation", "[", "i", "]", "[", "0", "]", "]", ")", ",", "tuple", "(", "joints", "[", "joint_relation", "[", "i", "]", "[", "1", "]", "]", ")", ",", "(", "color", "[", "i", "]", ")", ")", "\n", "\n", "# cv2.rectangle(skeleton, (int(human_pattern[0]), int(human_pattern[1])), (int(human_pattern[2]), int(human_pattern[3])), (255))", "\n", "# cv2.imshow(\"Joints\", skeleton)", "\n", "# cv2.waitKey(0)", "\n", "# print(skeleton[:,:,0])", "\n", "\n", "", "return", "skeleton", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.bb_IOU": [[191, 207], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "bb_IOU", "(", "boxA", ",", "boxB", ")", ":", "\n", "    ", "ixmin", "=", "np", ".", "maximum", "(", "boxA", "[", "0", "]", ",", "boxB", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "boxA", "[", "1", "]", ",", "boxB", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "boxA", "[", "2", "]", ",", "boxB", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "boxA", "[", "3", "]", ",", "boxB", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "(", "boxB", "[", "2", "]", "-", "boxB", "[", "0", "]", "+", "1.", ")", "*", "(", "boxB", "[", "3", "]", "-", "boxB", "[", "1", "]", "+", "1.", ")", "+", "\n", "(", "boxA", "[", "2", "]", "-", "boxA", "[", "0", "]", "+", "1.", ")", "*", "\n", "(", "boxA", "[", "3", "]", "-", "boxA", "[", "1", "]", "+", "1.", ")", "-", "inters", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_box": [[209, 245], ["numpy.array().reshape", "np.concatenate.astype", "max", "min", "max", "min", "numpy.array", "random.randint", "random.randint", "ult.bb_IOU", "numpy.array().reshape", "numpy.concatenate", "random.randint", "numpy.floor", "numpy.floor", "numpy.array", "numpy.floor", "numpy.floor", "numpy.array"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.bb_IOU"], ["", "def", "Augmented_box", "(", "bbox", ",", "shape", ",", "image_id", ",", "augment", "=", "15", ")", ":", "\n", "    ", "thres_", "=", "0.7", "\n", "\n", "box", "=", "np", ".", "array", "(", "[", "0", ",", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", "\n", "box", "=", "box", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "bbox", "[", "0", "]", ">=", "bbox", "[", "2", "]", "or", "bbox", "[", "1", "]", ">=", "bbox", "[", "3", "]", ":", "\n", "        ", "return", "box", "\n", "", "count", "=", "0", "\n", "time_count", "=", "0", "\n", "while", "count", "<", "augment", ":", "\n", "\n", "        ", "time_count", "+=", "1", "\n", "height", "=", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "\n", "width", "=", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "\n", "\n", "height_cen", "=", "(", "bbox", "[", "3", "]", "+", "bbox", "[", "1", "]", ")", "/", "2", "\n", "width_cen", "=", "(", "bbox", "[", "2", "]", "+", "bbox", "[", "0", "]", ")", "/", "2", "\n", "\n", "ratio", "=", "1", "+", "randint", "(", "-", "10", ",", "10", ")", "*", "0.01", "\n", "\n", "height_shift", "=", "randint", "(", "-", "np", ".", "floor", "(", "height", ")", ",", "np", ".", "floor", "(", "height", ")", ")", "*", "0.1", "\n", "width_shift", "=", "randint", "(", "-", "np", ".", "floor", "(", "width", ")", ",", "np", ".", "floor", "(", "width", ")", ")", "*", "0.1", "\n", "\n", "H_0", "=", "max", "(", "0", ",", "width_cen", "+", "width_shift", "-", "ratio", "*", "width", "/", "2", ")", "\n", "H_2", "=", "min", "(", "shape", "[", "1", "]", "-", "1", ",", "width_cen", "+", "width_shift", "+", "ratio", "*", "width", "/", "2", ")", "\n", "H_1", "=", "max", "(", "0", ",", "height_cen", "+", "height_shift", "-", "ratio", "*", "height", "/", "2", ")", "\n", "H_3", "=", "min", "(", "shape", "[", "0", "]", "-", "1", ",", "height_cen", "+", "height_shift", "+", "ratio", "*", "height", "/", "2", ")", "\n", "\n", "if", "bb_IOU", "(", "bbox", ",", "np", ".", "array", "(", "[", "H_0", ",", "H_1", ",", "H_2", ",", "H_3", "]", ")", ")", ">", "thres_", ":", "\n", "            ", "box_", "=", "np", ".", "array", "(", "[", "0", ",", "H_0", ",", "H_1", ",", "H_2", ",", "H_3", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", "\n", "box", "=", "np", ".", "concatenate", "(", "(", "box", ",", "box_", ")", ",", "axis", "=", "0", ")", "\n", "count", "+=", "1", "\n", "", "if", "time_count", ">", "150", ":", "\n", "            ", "return", "box", "\n", "\n", "", "", "return", "box", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action": [[247, 253], ["numpy.zeros", "action_.reshape.reshape"], "function", ["None"], ["", "def", "Generate_action", "(", "action_list", ",", "nums", "=", "29", ")", ":", "\n", "    ", "action_", "=", "np", ".", "zeros", "(", "nums", ")", "\n", "for", "GT_idx", "in", "action_list", ":", "\n", "        ", "action_", "[", "GT_idx", "]", "=", "1", "\n", "", "action_", "=", "action_", ".", "reshape", "(", "1", ",", "nums", ")", "\n", "return", "action_", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_Next_Instance_HO_Neg": [[255, 284], ["cv2.imread", "cv2.imread.astype", "im_orig.reshape.reshape", "ult.Augmented_HO_Neg", "len", "os.path.exists", "print", "str().zfill", "str"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_HO_Neg"], ["", "def", "Get_Next_Instance_HO_Neg", "(", "trainval_GT", ",", "Trainval_Neg", ",", "iter", ",", "Pos_augment", ",", "Neg_select", ",", "Data_length", ")", ":", "\n", "    ", "GT", "=", "trainval_GT", "[", "iter", "%", "Data_length", "]", "\n", "image_id", "=", "GT", "[", "0", "]", "\n", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/coco/images/train2014/COCO_train2014_'", "+", "(", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "12", ")", "+", "'.jpg'", "\n", "import", "os", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "im_file", ")", ":", "\n", "        ", "print", "(", "\"not existing:\"", ",", "im_file", ")", "\n", "", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "im_orig", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "True", ")", "\n", "im_orig", "-=", "cfg", ".", "PIXEL_MEANS", "\n", "im_shape", "=", "im_orig", ".", "shape", "\n", "im_orig", "=", "im_orig", ".", "reshape", "(", "1", ",", "im_shape", "[", "0", "]", ",", "im_shape", "[", "1", "]", ",", "3", ")", "\n", "\n", "Pattern", ",", "Human_augmented", ",", "Human_augmented_solo", ",", "Object_augmented", ",", "action_HO", ",", "action_H", ",", "mask_HO", ",", "mask_H", "=", "Augmented_HO_Neg", "(", "\n", "GT", ",", "Trainval_Neg", ",", "im_shape", ",", "Pos_augment", ",", "Neg_select", ")", "\n", "\n", "blobs", "=", "{", "}", "\n", "blobs", "[", "'image'", "]", "=", "im_orig", "\n", "blobs", "[", "'H_boxes_solo'", "]", "=", "Human_augmented_solo", "\n", "blobs", "[", "'H_boxes'", "]", "=", "Human_augmented", "\n", "blobs", "[", "'O_boxes'", "]", "=", "Object_augmented", "\n", "blobs", "[", "'gt_class_HO'", "]", "=", "action_HO", "\n", "blobs", "[", "'gt_class_H'", "]", "=", "action_H", "\n", "blobs", "[", "'Mask_HO'", "]", "=", "mask_HO", "\n", "blobs", "[", "'Mask_H'", "]", "=", "mask_H", "\n", "blobs", "[", "'sp'", "]", "=", "Pattern", "\n", "blobs", "[", "'H_num'", "]", "=", "len", "(", "action_H", ")", "\n", "\n", "return", "blobs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_HO_Neg": [[286, 357], ["ult.Generate_action", "ult.Generate_action", "numpy.asarray().reshape", "numpy.asarray().reshape", "ult.Augmented_box", "ult.Augmented_box", "np.concatenate.copy", "len", "len", "numpy.empty", "range", "range", "range", "range", "np.concatenate.reshape", "np.concatenate.reshape", "Human_augmented_solo.reshape.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "Get_next_sp().reshape", "numpy.concatenate", "numpy.asarray", "numpy.asarray", "min", "min", "len", "random.sample", "range", "len", "len", "len", "len", "numpy.concatenate", "numpy.concatenate", "range", "len", "numpy.concatenate", "numpy.concatenate", "numpy.zeros().reshape", "ult.Get_next_sp", "len", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_box", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_box", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp"], ["", "def", "Augmented_HO_Neg", "(", "GT", ",", "Trainval_Neg", ",", "shape", ",", "Pos_augment", ",", "Neg_select", ")", ":", "\n", "    ", "image_id", "=", "GT", "[", "0", "]", "\n", "Human", "=", "GT", "[", "2", "]", "\n", "Object", "=", "GT", "[", "3", "]", "\n", "\n", "action_HO_", "=", "Generate_action", "(", "GT", "[", "1", "]", ")", "\n", "action_H_", "=", "Generate_action", "(", "GT", "[", "4", "]", ")", "\n", "mask_HO_", "=", "np", ".", "asarray", "(", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", "]", ")", ".", "reshape", "(", "1", ",", "29", ")", "\n", "mask_H_", "=", "np", ".", "asarray", "(", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", ".", "reshape", "(", "1", ",", "29", ")", "\n", "\n", "Human_augmented", "=", "Augmented_box", "(", "Human", ",", "shape", ",", "image_id", ",", "Pos_augment", ")", "\n", "Object_augmented", "=", "Augmented_box", "(", "Object", ",", "shape", ",", "image_id", ",", "Pos_augment", ")", "\n", "Human_augmented_solo", "=", "Human_augmented", ".", "copy", "(", ")", "\n", "\n", "Human_augmented", "=", "Human_augmented", "[", ":", "min", "(", "len", "(", "Human_augmented", ")", ",", "len", "(", "Object_augmented", ")", ")", "]", "\n", "Object_augmented", "=", "Object_augmented", "[", ":", "min", "(", "len", "(", "Human_augmented", ")", ",", "len", "(", "Object_augmented", ")", ")", "]", "\n", "\n", "num_pos", "=", "len", "(", "Human_augmented", ")", "\n", "\n", "if", "image_id", "in", "Trainval_Neg", ":", "\n", "\n", "        ", "if", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", "<", "Neg_select", ":", "\n", "            ", "for", "Neg", "in", "Trainval_Neg", "[", "image_id", "]", ":", "\n", "                ", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Human_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "2", "]", "[", "0", "]", ",", "Neg", "[", "2", "]", "[", "1", "]", ",", "Neg", "[", "2", "]", "[", "2", "]", ",", "Neg", "[", "2", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Object_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "3", "]", "[", "0", "]", ",", "Neg", "[", "3", "]", "[", "1", "]", ",", "Neg", "[", "3", "]", "[", "2", "]", ",", "Neg", "[", "3", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "List", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", ")", ",", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "Neg_select", ")", ":", "\n", "                ", "Neg", "=", "Trainval_Neg", "[", "image_id", "]", "[", "List", "[", "i", "]", "]", "\n", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Human_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "2", "]", "[", "0", "]", ",", "Neg", "[", "2", "]", "[", "1", "]", ",", "Neg", "[", "2", "]", "[", "2", "]", ",", "Neg", "[", "2", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Object_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "3", "]", "[", "0", "]", ",", "Neg", "[", "3", "]", "[", "1", "]", ",", "Neg", "[", "3", "]", "[", "2", "]", ",", "Neg", "[", "3", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "num_pos_neg", "=", "len", "(", "Human_augmented", ")", "\n", "\n", "action_HO", "=", "action_HO_", "\n", "action_H", "=", "action_H_", "\n", "mask_HO", "=", "mask_HO_", "\n", "mask_H", "=", "mask_H_", "\n", "Pattern", "=", "np", ".", "empty", "(", "(", "0", ",", "64", ",", "64", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_pos", "-", "1", ")", ":", "\n", "        ", "action_HO", "=", "np", ".", "concatenate", "(", "(", "action_HO", ",", "action_HO_", ")", ",", "axis", "=", "0", ")", "\n", "action_H", "=", "np", ".", "concatenate", "(", "(", "action_H", ",", "action_H_", ")", ",", "axis", "=", "0", ")", "\n", "mask_H", "=", "np", ".", "concatenate", "(", "(", "mask_H", ",", "mask_H_", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_pos_neg", "-", "1", ")", ":", "\n", "        ", "mask_HO", "=", "np", ".", "concatenate", "(", "(", "mask_HO", ",", "mask_HO_", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_pos_neg", "-", "num_pos", ")", ":", "\n", "        ", "action_HO", "=", "np", ".", "concatenate", "(", "(", "action_HO", ",", "np", ".", "zeros", "(", "29", ")", ".", "reshape", "(", "1", ",", "29", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_pos_neg", ")", ":", "\n", "        ", "Pattern_", "=", "Get_next_sp", "(", "Human_augmented", "[", "i", "]", "[", "1", ":", "]", ",", "Object_augmented", "[", "i", "]", "[", "1", ":", "]", ")", ".", "reshape", "(", "1", ",", "64", ",", "64", ",", "2", ")", "\n", "Pattern", "=", "np", ".", "concatenate", "(", "(", "Pattern", ",", "Pattern_", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "Pattern", "=", "Pattern", ".", "reshape", "(", "num_pos_neg", ",", "64", ",", "64", ",", "2", ")", "\n", "Human_augmented", "=", "Human_augmented", ".", "reshape", "(", "num_pos_neg", ",", "5", ")", "\n", "Human_augmented_solo", "=", "Human_augmented_solo", ".", "reshape", "(", "num_pos", ",", "5", ")", "\n", "Object_augmented", "=", "Object_augmented", ".", "reshape", "(", "num_pos_neg", ",", "5", ")", "\n", "action_HO", "=", "action_HO", ".", "reshape", "(", "num_pos_neg", ",", "29", ")", "\n", "action_H", "=", "action_H", ".", "reshape", "(", "num_pos", ",", "29", ")", "\n", "mask_HO", "=", "mask_HO", ".", "reshape", "(", "num_pos_neg", ",", "29", ")", "\n", "mask_H", "=", "mask_H", ".", "reshape", "(", "num_pos", ",", "29", ")", "\n", "\n", "return", "Pattern", ",", "Human_augmented", ",", "Human_augmented_solo", ",", "Object_augmented", ",", "action_HO", ",", "action_H", ",", "mask_HO", ",", "mask_H", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_HO_spNeg": [[359, 481], ["ult.Generate_action", "ult.Generate_action", "ult.Generate_action", "ult.Generate_action", "numpy.asarray().reshape", "numpy.asarray().reshape", "numpy.asarray().reshape", "ult.Augmented_box", "ult.Augmented_box", "len", "len", "numpy.empty", "range", "range", "range", "range", "np.concatenate.reshape", "np.concatenate.reshape", "Object_augmented[].reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "set_list.index", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "Get_next_sp().reshape", "numpy.concatenate", "len", "len", "numpy.asarray", "numpy.asarray", "numpy.asarray", "len", "numpy.concatenate", "min", "min", "len", "random.sample", "range", "len", "len", "len", "len", "numpy.concatenate", "numpy.concatenate", "range", "len", "numpy.concatenate", "numpy.concatenate", "numpy.zeros().reshape", "numpy.zeros().reshape", "ult.Get_next_sp", "len", "len", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.zeros", "numpy.zeros", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_box", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_box", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp"], ["", "def", "Augmented_HO_spNeg", "(", "GT", ",", "Trainval_Neg", ",", "shape", ",", "Pos_augment", ",", "Neg_select", ")", ":", "\n", "    ", "image_id", "=", "GT", "[", "0", "]", "\n", "Human", "=", "GT", "[", "2", "]", "\n", "Object", "=", "GT", "[", "3", "]", "\n", "set_list", "=", "[", "(", "0", ",", "38", ")", ",", "(", "1", ",", "31", ")", ",", "(", "1", ",", "32", ")", ",", "(", "2", ",", "43", ")", ",", "(", "2", ",", "44", ")", ",", "(", "2", ",", "77", ")", ",", "(", "4", ",", "1", ")", ",", "(", "4", ",", "19", ")", ",", "\n", "(", "4", ",", "28", ")", ",", "(", "4", ",", "46", ")", ",", "(", "4", ",", "47", ")", ",", "(", "4", ",", "48", ")", ",", "(", "4", ",", "49", ")", ",", "(", "4", ",", "51", ")", ",", "(", "4", ",", "52", ")", ",", "(", "4", ",", "54", ")", ",", "\n", "(", "4", ",", "55", ")", ",", "(", "4", ",", "56", ")", ",", "(", "5", ",", "2", ")", ",", "(", "5", ",", "3", ")", ",", "(", "5", ",", "4", ")", ",", "(", "5", ",", "6", ")", ",", "(", "5", ",", "7", ")", ",", "(", "5", ",", "8", ")", ",", "(", "5", ",", "9", ")", ",", "\n", "(", "5", ",", "18", ")", ",", "(", "5", ",", "21", ")", ",", "(", "6", ",", "68", ")", ",", "(", "7", ",", "33", ")", ",", "(", "8", ",", "64", ")", ",", "(", "9", ",", "47", ")", ",", "(", "9", ",", "48", ")", ",", "(", "9", ",", "49", ")", ",", "\n", "(", "9", ",", "50", ")", ",", "(", "9", ",", "51", ")", ",", "(", "9", ",", "52", ")", ",", "(", "9", ",", "53", ")", ",", "(", "9", ",", "54", ")", ",", "(", "9", ",", "55", ")", ",", "(", "9", ",", "56", ")", ",", "(", "10", ",", "2", ")", ",", "\n", "(", "10", ",", "4", ")", ",", "(", "10", ",", "14", ")", ",", "(", "10", ",", "18", ")", ",", "(", "10", ",", "21", ")", ",", "(", "10", ",", "25", ")", ",", "(", "10", ",", "27", ")", ",", "(", "10", ",", "29", ")", ",", "\n", "(", "10", ",", "57", ")", ",", "(", "10", ",", "58", ")", ",", "(", "10", ",", "60", ")", ",", "(", "10", ",", "61", ")", ",", "(", "10", ",", "62", ")", ",", "(", "10", ",", "64", ")", ",", "(", "11", ",", "31", ")", ",", "\n", "(", "11", ",", "32", ")", ",", "(", "11", ",", "37", ")", ",", "(", "11", ",", "38", ")", ",", "(", "12", ",", "14", ")", ",", "(", "12", ",", "57", ")", ",", "(", "12", ",", "58", ")", ",", "(", "12", ",", "60", ")", ",", "\n", "(", "12", ",", "61", ")", ",", "(", "13", ",", "40", ")", ",", "(", "13", ",", "41", ")", ",", "(", "13", ",", "42", ")", ",", "(", "13", ",", "46", ")", ",", "(", "14", ",", "1", ")", ",", "(", "14", ",", "25", ")", ",", "\n", "(", "14", ",", "26", ")", ",", "(", "14", ",", "27", ")", ",", "(", "14", ",", "29", ")", ",", "(", "14", ",", "30", ")", ",", "(", "14", ",", "31", ")", ",", "(", "14", ",", "32", ")", ",", "(", "14", ",", "33", ")", ",", "\n", "(", "14", ",", "34", ")", ",", "(", "14", ",", "35", ")", ",", "(", "14", ",", "37", ")", ",", "(", "14", ",", "38", ")", ",", "(", "14", ",", "39", ")", ",", "(", "14", ",", "40", ")", ",", "(", "14", ",", "41", ")", ",", "\n", "(", "14", ",", "42", ")", ",", "(", "14", ",", "47", ")", ",", "(", "14", ",", "50", ")", ",", "(", "14", ",", "68", ")", ",", "(", "14", ",", "74", ")", ",", "(", "14", ",", "75", ")", ",", "(", "14", ",", "78", ")", ",", "\n", "(", "15", ",", "30", ")", ",", "(", "15", ",", "33", ")", ",", "(", "16", ",", "43", ")", ",", "(", "16", ",", "44", ")", ",", "(", "16", ",", "45", ")", ",", "(", "18", ",", "1", ")", ",", "(", "18", ",", "2", ")", ",", "\n", "(", "18", ",", "3", ")", ",", "(", "18", ",", "4", ")", ",", "(", "18", ",", "5", ")", ",", "(", "18", ",", "6", ")", ",", "(", "18", ",", "7", ")", ",", "(", "18", ",", "8", ")", ",", "(", "18", ",", "11", ")", ",", "\n", "(", "18", ",", "14", ")", ",", "(", "18", ",", "15", ")", ",", "(", "18", ",", "16", ")", ",", "(", "18", ",", "17", ")", ",", "(", "18", ",", "18", ")", ",", "(", "18", ",", "19", ")", ",", "(", "18", ",", "20", ")", ",", "\n", "(", "18", ",", "21", ")", ",", "(", "18", ",", "24", ")", ",", "(", "18", ",", "25", ")", ",", "(", "18", ",", "26", ")", ",", "(", "18", ",", "27", ")", ",", "(", "18", ",", "28", ")", ",", "(", "18", ",", "29", ")", ",", "\n", "(", "18", ",", "30", ")", ",", "(", "18", ",", "31", ")", ",", "(", "18", ",", "32", ")", ",", "(", "18", ",", "33", ")", ",", "(", "18", ",", "34", ")", ",", "(", "18", ",", "35", ")", ",", "(", "18", ",", "36", ")", ",", "\n", "(", "18", ",", "37", ")", ",", "(", "18", ",", "38", ")", ",", "(", "18", ",", "39", ")", ",", "(", "18", ",", "40", ")", ",", "(", "18", ",", "41", ")", ",", "(", "18", ",", "42", ")", ",", "(", "18", ",", "43", ")", ",", "\n", "(", "18", ",", "44", ")", ",", "(", "18", ",", "45", ")", ",", "(", "18", ",", "46", ")", ",", "(", "18", ",", "47", ")", ",", "(", "18", ",", "48", ")", ",", "(", "18", ",", "49", ")", ",", "(", "18", ",", "51", ")", ",", "\n", "(", "18", ",", "53", ")", ",", "(", "18", ",", "54", ")", ",", "(", "18", ",", "55", ")", ",", "(", "18", ",", "56", ")", ",", "(", "18", ",", "57", ")", ",", "(", "18", ",", "61", ")", ",", "(", "18", ",", "62", ")", ",", "\n", "(", "18", ",", "63", ")", ",", "(", "18", ",", "64", ")", ",", "(", "18", ",", "65", ")", ",", "(", "18", ",", "66", ")", ",", "(", "18", ",", "67", ")", ",", "(", "18", ",", "68", ")", ",", "(", "18", ",", "73", ")", ",", "\n", "(", "18", ",", "74", ")", ",", "(", "18", ",", "75", ")", ",", "(", "18", ",", "77", ")", ",", "(", "19", ",", "35", ")", ",", "(", "19", ",", "39", ")", ",", "(", "20", ",", "33", ")", ",", "(", "21", ",", "31", ")", ",", "\n", "(", "21", ",", "32", ")", ",", "(", "23", ",", "1", ")", ",", "(", "23", ",", "11", ")", ",", "(", "23", ",", "19", ")", ",", "(", "23", ",", "20", ")", ",", "(", "23", ",", "24", ")", ",", "(", "23", ",", "28", ")", ",", "\n", "(", "23", ",", "34", ")", ",", "(", "23", ",", "49", ")", ",", "(", "23", ",", "53", ")", ",", "(", "23", ",", "56", ")", ",", "(", "23", ",", "61", ")", ",", "(", "23", ",", "63", ")", ",", "(", "23", ",", "64", ")", ",", "\n", "(", "23", ",", "67", ")", ",", "(", "23", ",", "68", ")", ",", "(", "23", ",", "73", ")", ",", "(", "24", ",", "74", ")", ",", "(", "25", ",", "1", ")", ",", "(", "25", ",", "2", ")", ",", "(", "25", ",", "4", ")", ",", "\n", "(", "25", ",", "8", ")", ",", "(", "25", ",", "9", ")", ",", "(", "25", ",", "14", ")", ",", "(", "25", ",", "15", ")", ",", "(", "25", ",", "16", ")", ",", "(", "25", ",", "17", ")", ",", "(", "25", ",", "18", ")", ",", "\n", "(", "25", ",", "19", ")", ",", "(", "25", ",", "21", ")", ",", "(", "25", ",", "25", ")", ",", "(", "25", ",", "26", ")", ",", "(", "25", ",", "27", ")", ",", "(", "25", ",", "28", ")", ",", "(", "25", ",", "29", ")", ",", "\n", "(", "25", ",", "30", ")", ",", "(", "25", ",", "31", ")", ",", "(", "25", ",", "32", ")", ",", "(", "25", ",", "33", ")", ",", "(", "25", ",", "34", ")", ",", "(", "25", ",", "35", ")", ",", "(", "25", ",", "36", ")", ",", "\n", "(", "25", ",", "37", ")", ",", "(", "25", ",", "38", ")", ",", "(", "25", ",", "39", ")", ",", "(", "25", ",", "40", ")", ",", "(", "25", ",", "41", ")", ",", "(", "25", ",", "42", ")", ",", "(", "25", ",", "43", ")", ",", "\n", "(", "25", ",", "44", ")", ",", "(", "25", ",", "45", ")", ",", "(", "25", ",", "46", ")", ",", "(", "25", ",", "47", ")", ",", "(", "25", ",", "48", ")", ",", "(", "25", ",", "49", ")", ",", "(", "25", ",", "50", ")", ",", "\n", "(", "25", ",", "51", ")", ",", "(", "25", ",", "52", ")", ",", "(", "25", ",", "53", ")", ",", "(", "25", ",", "54", ")", ",", "(", "25", ",", "55", ")", ",", "(", "25", ",", "56", ")", ",", "(", "25", ",", "57", ")", ",", "\n", "(", "25", ",", "64", ")", ",", "(", "25", ",", "65", ")", ",", "(", "25", ",", "66", ")", ",", "(", "25", ",", "67", ")", ",", "(", "25", ",", "68", ")", ",", "(", "25", ",", "73", ")", ",", "(", "25", ",", "74", ")", ",", "\n", "(", "25", ",", "77", ")", ",", "(", "25", ",", "78", ")", ",", "(", "25", ",", "79", ")", ",", "(", "25", ",", "80", ")", ",", "(", "26", ",", "32", ")", ",", "(", "26", ",", "37", ")", ",", "(", "28", ",", "30", ")", ",", "\n", "(", "28", ",", "33", ")", "]", "\n", "\n", "action_sp_", "=", "Generate_action", "(", "GT", "[", "1", "]", ")", "\n", "action_HO_", "=", "Generate_action", "(", "GT", "[", "1", "]", ")", "\n", "obj_cls", "=", "GT", "[", "-", "1", "]", "\n", "action_compose", "=", "[", "set_list", ".", "index", "(", "item", ")", "for", "item", "in", "[", "(", "ho", ",", "obj_cls", "[", "0", "]", ")", "for", "ho", "in", "GT", "[", "1", "]", "]", "]", "\n", "action_compose_", "=", "Generate_action", "(", "action_compose", ",", "nums", "=", "len", "(", "set_list", ")", ")", "\n", "action_H_", "=", "Generate_action", "(", "GT", "[", "4", "]", ")", "\n", "mask_sp_", "=", "np", ".", "asarray", "(", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", "]", ")", ".", "reshape", "(", "1", ",", "29", ")", "\n", "mask_HO_", "=", "np", ".", "asarray", "(", "\n", "[", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", "]", ")", ".", "reshape", "(", "1", ",", "29", ")", "\n", "mask_H_", "=", "np", ".", "asarray", "(", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", ".", "reshape", "(", "1", ",", "29", ")", "\n", "\n", "Human_augmented", "=", "Augmented_box", "(", "Human", ",", "shape", ",", "image_id", ",", "Pos_augment", ")", "\n", "Object_augmented", "=", "Augmented_box", "(", "Object", ",", "shape", ",", "image_id", ",", "Pos_augment", ")", "\n", "if", "Human", "[", "0", "]", "==", "0", "and", "Human", "[", "1", "]", "==", "0", "and", "Human", "[", "2", "]", "==", "0", ":", "\n", "        ", "while", "len", "(", "Human_augmented", ")", "<", "Pos_augment", "+", "1", ":", "\n", "            ", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "[", "Human_augmented", ",", "Human_augmented", "[", "-", "(", "Pos_augment", "+", "1", "-", "len", "(", "Human_augmented", ")", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "Human_augmented", "=", "Human_augmented", "[", ":", "min", "(", "len", "(", "Human_augmented", ")", ",", "len", "(", "Object_augmented", ")", ")", "]", "\n", "Object_augmented", "=", "Object_augmented", "[", ":", "min", "(", "len", "(", "Human_augmented", ")", ",", "len", "(", "Object_augmented", ")", ")", "]", "\n", "\n", "num_pos", "=", "len", "(", "Human_augmented", ")", "\n", "if", "image_id", "in", "Trainval_Neg", ":", "\n", "\n", "        ", "if", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", "<", "Neg_select", ":", "\n", "            ", "for", "Neg", "in", "Trainval_Neg", "[", "image_id", "]", ":", "\n", "                ", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Human_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "2", "]", "[", "0", "]", ",", "Neg", "[", "2", "]", "[", "1", "]", ",", "Neg", "[", "2", "]", "[", "2", "]", ",", "Neg", "[", "2", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Object_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "3", "]", "[", "0", "]", ",", "Neg", "[", "3", "]", "[", "1", "]", ",", "Neg", "[", "3", "]", "[", "2", "]", ",", "Neg", "[", "3", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "List", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", ")", ",", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "Neg_select", ")", ":", "\n", "                ", "Neg", "=", "Trainval_Neg", "[", "image_id", "]", "[", "List", "[", "i", "]", "]", "\n", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Human_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "2", "]", "[", "0", "]", ",", "Neg", "[", "2", "]", "[", "1", "]", ",", "Neg", "[", "2", "]", "[", "2", "]", ",", "Neg", "[", "2", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Object_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "3", "]", "[", "0", "]", ",", "Neg", "[", "3", "]", "[", "1", "]", ",", "Neg", "[", "3", "]", "[", "2", "]", ",", "Neg", "[", "3", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "num_pos_neg", "=", "len", "(", "Human_augmented", ")", "\n", "\n", "action_sp", "=", "action_sp_", "\n", "action_HO", "=", "action_HO_", "\n", "action_H", "=", "action_H_", "\n", "action_compose", "=", "action_compose_", "\n", "mask_sp", "=", "mask_sp_", "\n", "mask_HO", "=", "mask_HO_", "\n", "mask_H", "=", "mask_H_", "\n", "Pattern", "=", "np", ".", "empty", "(", "(", "0", ",", "64", ",", "64", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_pos", "-", "1", ")", ":", "\n", "        ", "action_sp", "=", "np", ".", "concatenate", "(", "(", "action_sp", ",", "action_sp_", ")", ",", "axis", "=", "0", ")", "\n", "action_HO", "=", "np", ".", "concatenate", "(", "(", "action_HO", ",", "action_HO_", ")", ",", "axis", "=", "0", ")", "\n", "action_H", "=", "np", ".", "concatenate", "(", "(", "action_H", ",", "action_H_", ")", ",", "axis", "=", "0", ")", "\n", "action_compose", "=", "np", ".", "concatenate", "(", "(", "action_compose", ",", "action_compose_", ")", ",", "axis", "=", "0", ")", "\n", "mask_HO", "=", "np", ".", "concatenate", "(", "(", "mask_HO", ",", "mask_HO_", ")", ",", "axis", "=", "0", ")", "\n", "mask_H", "=", "np", ".", "concatenate", "(", "(", "mask_H", ",", "mask_H_", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_pos_neg", "-", "1", ")", ":", "\n", "        ", "mask_sp", "=", "np", ".", "concatenate", "(", "(", "mask_sp", ",", "mask_sp_", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_pos_neg", "-", "num_pos", ")", ":", "\n", "        ", "action_sp", "=", "np", ".", "concatenate", "(", "(", "action_sp", ",", "np", ".", "zeros", "(", "29", ")", ".", "reshape", "(", "1", ",", "29", ")", ")", ",", "axis", "=", "0", ")", "\n", "action_compose", "=", "np", ".", "concatenate", "(", "(", "action_compose", ",", "np", ".", "zeros", "(", "len", "(", "set_list", ")", ")", ".", "reshape", "(", "1", ",", "len", "(", "set_list", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_pos_neg", ")", ":", "\n", "        ", "Pattern_", "=", "Get_next_sp", "(", "Human_augmented", "[", "i", "]", "[", "1", ":", "]", ",", "Object_augmented", "[", "i", "]", "[", "1", ":", "]", ")", ".", "reshape", "(", "1", ",", "64", ",", "64", ",", "2", ")", "\n", "Pattern", "=", "np", ".", "concatenate", "(", "(", "Pattern", ",", "Pattern_", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "Pattern", "=", "Pattern", ".", "reshape", "(", "num_pos_neg", ",", "64", ",", "64", ",", "2", ")", "\n", "Human_augmented_sp", "=", "Human_augmented", ".", "reshape", "(", "num_pos_neg", ",", "5", ")", "\n", "Object_augmented", "=", "Object_augmented", "[", ":", "num_pos", "]", ".", "reshape", "(", "num_pos", ",", "5", ")", "\n", "action_sp", "=", "action_sp", ".", "reshape", "(", "num_pos_neg", ",", "29", ")", "\n", "action_HO", "=", "action_HO", ".", "reshape", "(", "num_pos", ",", "29", ")", "\n", "action_H", "=", "action_H", ".", "reshape", "(", "num_pos", ",", "29", ")", "\n", "action_compose", "=", "action_compose", ".", "reshape", "(", "num_pos", ",", "len", "(", "set_list", ")", ")", "\n", "mask_sp", "=", "mask_sp", ".", "reshape", "(", "num_pos_neg", ",", "29", ")", "\n", "mask_HO", "=", "mask_HO", ".", "reshape", "(", "num_pos", ",", "29", ")", "\n", "mask_H", "=", "mask_H", ".", "reshape", "(", "num_pos", ",", "29", ")", "\n", "\n", "return", "Pattern", ",", "Human_augmented_sp", ",", "Human_augmented", ",", "Object_augmented", ",", "action_sp", ",", "action_HO", ",", "action_H", ",", "mask_sp", ",", "mask_HO", ",", "mask_H", ",", "action_compose", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_HO_spNeg2": [[483, 601], ["ult.Generate_action", "ult.Generate_action", "ult.Generate_action", "ult.Generate_action", "numpy.ones", "numpy.ones", "numpy.ones", "ult.Augmented_box", "ult.Augmented_box", "len", "len", "numpy.empty", "range", "range", "range", "range", "np.concatenate.reshape", "np.concatenate.reshape", "Object_augmented[].reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "set_list.index", "pose_box.extend", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "Get_next_sp().reshape", "numpy.concatenate", "numpy.zeros", "len", "len", "min", "min", "len", "random.sample", "range", "len", "len", "len", "len", "numpy.concatenate", "numpy.concatenate", "range", "len", "numpy.concatenate", "numpy.concatenate", "numpy.zeros().reshape", "numpy.zeros().reshape", "ult.Get_next_sp", "len", "len", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.zeros", "numpy.zeros", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_box", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_box", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp"], ["", "def", "Augmented_HO_spNeg2", "(", "GT", ",", "Trainval_Neg", ",", "shape", ",", "Pos_augment", ",", "Neg_select", ")", ":", "\n", "    ", "image_id", "=", "GT", "[", "0", "]", "\n", "Human", "=", "GT", "[", "2", "]", "\n", "Object", "=", "GT", "[", "3", "]", "\n", "set_list", "=", "[", "(", "0", ",", "38", ")", ",", "(", "1", ",", "31", ")", ",", "(", "1", ",", "32", ")", ",", "(", "2", ",", "43", ")", ",", "(", "2", ",", "44", ")", ",", "(", "2", ",", "77", ")", ",", "(", "3", ",", "1", ")", ",", "(", "3", ",", "19", ")", ",", "(", "3", ",", "28", ")", ",", "(", "3", ",", "46", ")", ",", "(", "3", ",", "47", ")", ",", "\n", "(", "3", ",", "48", ")", ",", "(", "3", ",", "49", ")", ",", "(", "3", ",", "51", ")", ",", "(", "3", ",", "52", ")", ",", "(", "3", ",", "54", ")", ",", "(", "3", ",", "55", ")", ",", "(", "3", ",", "56", ")", ",", "(", "4", ",", "2", ")", ",", "(", "4", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "4", ",", "6", ")", ",", "(", "4", ",", "7", ")", ",", "\n", "(", "4", ",", "8", ")", ",", "(", "4", ",", "9", ")", ",", "(", "4", ",", "18", ")", ",", "(", "4", ",", "21", ")", ",", "(", "5", ",", "68", ")", ",", "(", "6", ",", "33", ")", ",", "(", "7", ",", "64", ")", ",", "(", "8", ",", "47", ")", ",", "(", "8", ",", "48", ")", ",", "(", "8", ",", "49", ")", ",", "(", "8", ",", "50", ")", ",", "\n", "(", "8", ",", "51", ")", ",", "(", "8", ",", "52", ")", ",", "(", "8", ",", "53", ")", ",", "(", "8", ",", "54", ")", ",", "(", "8", ",", "55", ")", ",", "(", "8", ",", "56", ")", ",", "(", "9", ",", "2", ")", ",", "(", "9", ",", "4", ")", ",", "(", "9", ",", "14", ")", ",", "(", "9", ",", "18", ")", ",", "(", "9", ",", "21", ")", ",", "\n", "(", "9", ",", "25", ")", ",", "(", "9", ",", "27", ")", ",", "(", "9", ",", "29", ")", ",", "(", "9", ",", "57", ")", ",", "(", "9", ",", "58", ")", ",", "(", "9", ",", "60", ")", ",", "(", "9", ",", "61", ")", ",", "(", "9", ",", "62", ")", ",", "(", "9", ",", "64", ")", ",", "(", "10", ",", "31", ")", ",", "(", "10", ",", "32", ")", ",", "\n", "(", "10", ",", "37", ")", ",", "(", "10", ",", "38", ")", ",", "(", "11", ",", "14", ")", ",", "(", "11", ",", "57", ")", ",", "(", "11", ",", "58", ")", ",", "(", "11", ",", "60", ")", ",", "(", "11", ",", "61", ")", ",", "(", "12", ",", "40", ")", ",", "(", "12", ",", "41", ")", ",", "(", "12", ",", "42", ")", ",", "\n", "(", "12", ",", "46", ")", ",", "(", "13", ",", "1", ")", ",", "(", "13", ",", "25", ")", ",", "(", "13", ",", "26", ")", ",", "(", "13", ",", "27", ")", ",", "(", "13", ",", "29", ")", ",", "(", "13", ",", "30", ")", ",", "(", "13", ",", "31", ")", ",", "(", "13", ",", "32", ")", ",", "(", "13", ",", "33", ")", ",", "\n", "(", "13", ",", "34", ")", ",", "(", "13", ",", "35", ")", ",", "(", "13", ",", "37", ")", ",", "(", "13", ",", "38", ")", ",", "(", "13", ",", "39", ")", ",", "(", "13", ",", "40", ")", ",", "(", "13", ",", "41", ")", ",", "(", "13", ",", "42", ")", ",", "(", "13", ",", "47", ")", ",", "(", "13", ",", "50", ")", ",", "\n", "(", "13", ",", "68", ")", ",", "(", "13", ",", "74", ")", ",", "(", "13", ",", "75", ")", ",", "(", "13", ",", "78", ")", ",", "(", "14", ",", "30", ")", ",", "(", "14", ",", "33", ")", ",", "(", "15", ",", "43", ")", ",", "(", "15", ",", "44", ")", ",", "(", "15", ",", "45", ")", ",", "(", "16", ",", "1", ")", ",", "\n", "(", "16", ",", "2", ")", ",", "(", "16", ",", "3", ")", ",", "(", "16", ",", "4", ")", ",", "(", "16", ",", "5", ")", ",", "(", "16", ",", "6", ")", ",", "(", "16", ",", "7", ")", ",", "(", "16", ",", "8", ")", ",", "(", "16", ",", "11", ")", ",", "(", "16", ",", "14", ")", ",", "(", "16", ",", "15", ")", ",", "(", "16", ",", "16", ")", ",", "\n", "(", "16", ",", "17", ")", ",", "(", "16", ",", "18", ")", ",", "(", "16", ",", "19", ")", ",", "(", "16", ",", "20", ")", ",", "(", "16", ",", "21", ")", ",", "(", "16", ",", "24", ")", ",", "(", "16", ",", "25", ")", ",", "(", "16", ",", "26", ")", ",", "(", "16", ",", "27", ")", ",", "(", "16", ",", "28", ")", ",", "\n", "(", "16", ",", "29", ")", ",", "(", "16", ",", "30", ")", ",", "(", "16", ",", "31", ")", ",", "(", "16", ",", "32", ")", ",", "(", "16", ",", "33", ")", ",", "(", "16", ",", "34", ")", ",", "(", "16", ",", "35", ")", ",", "(", "16", ",", "36", ")", ",", "(", "16", ",", "37", ")", ",", "(", "16", ",", "38", ")", ",", "\n", "(", "16", ",", "39", ")", ",", "(", "16", ",", "40", ")", ",", "(", "16", ",", "41", ")", ",", "(", "16", ",", "42", ")", ",", "(", "16", ",", "43", ")", ",", "(", "16", ",", "44", ")", ",", "(", "16", ",", "45", ")", ",", "(", "16", ",", "46", ")", ",", "(", "16", ",", "47", ")", ",", "(", "16", ",", "48", ")", ",", "\n", "(", "16", ",", "49", ")", ",", "(", "16", ",", "51", ")", ",", "(", "16", ",", "53", ")", ",", "(", "16", ",", "54", ")", ",", "(", "16", ",", "55", ")", ",", "(", "16", ",", "56", ")", ",", "(", "16", ",", "57", ")", ",", "(", "16", ",", "61", ")", ",", "(", "16", ",", "62", ")", ",", "(", "16", ",", "63", ")", ",", "\n", "(", "16", ",", "64", ")", ",", "(", "16", ",", "65", ")", ",", "(", "16", ",", "66", ")", ",", "(", "16", ",", "67", ")", ",", "(", "16", ",", "68", ")", ",", "(", "16", ",", "73", ")", ",", "(", "16", ",", "74", ")", ",", "(", "16", ",", "75", ")", ",", "(", "16", ",", "77", ")", ",", "(", "17", ",", "35", ")", ",", "\n", "(", "17", ",", "39", ")", ",", "(", "18", ",", "33", ")", ",", "(", "19", ",", "31", ")", ",", "(", "19", ",", "32", ")", ",", "(", "20", ",", "74", ")", ",", "(", "21", ",", "1", ")", ",", "(", "21", ",", "2", ")", ",", "(", "21", ",", "4", ")", ",", "(", "21", ",", "8", ")", ",", "(", "21", ",", "9", ")", ",", "(", "21", ",", "14", ")", ",", "\n", "(", "21", ",", "15", ")", ",", "(", "21", ",", "16", ")", ",", "(", "21", ",", "17", ")", ",", "(", "21", ",", "18", ")", ",", "(", "21", ",", "19", ")", ",", "(", "21", ",", "21", ")", ",", "(", "21", ",", "25", ")", ",", "(", "21", ",", "26", ")", ",", "(", "21", ",", "27", ")", ",", "(", "21", ",", "28", ")", ",", "\n", "(", "21", ",", "29", ")", ",", "(", "21", ",", "30", ")", ",", "(", "21", ",", "31", ")", ",", "(", "21", ",", "32", ")", ",", "(", "21", ",", "33", ")", ",", "(", "21", ",", "34", ")", ",", "(", "21", ",", "35", ")", ",", "(", "21", ",", "36", ")", ",", "(", "21", ",", "37", ")", ",", "(", "21", ",", "38", ")", ",", "\n", "(", "21", ",", "39", ")", ",", "(", "21", ",", "40", ")", ",", "(", "21", ",", "41", ")", ",", "(", "21", ",", "42", ")", ",", "(", "21", ",", "43", ")", ",", "(", "21", ",", "44", ")", ",", "(", "21", ",", "45", ")", ",", "(", "21", ",", "46", ")", ",", "(", "21", ",", "47", ")", ",", "(", "21", ",", "48", ")", ",", "\n", "(", "21", ",", "49", ")", ",", "(", "21", ",", "50", ")", ",", "(", "21", ",", "51", ")", ",", "(", "21", ",", "52", ")", ",", "(", "21", ",", "53", ")", ",", "(", "21", ",", "54", ")", ",", "(", "21", ",", "55", ")", ",", "(", "21", ",", "56", ")", ",", "(", "21", ",", "57", ")", ",", "(", "21", ",", "64", ")", ",", "\n", "(", "21", ",", "65", ")", ",", "(", "21", ",", "66", ")", ",", "(", "21", ",", "67", ")", ",", "(", "21", ",", "68", ")", ",", "(", "21", ",", "73", ")", ",", "(", "21", ",", "74", ")", ",", "(", "21", ",", "77", ")", ",", "(", "21", ",", "78", ")", ",", "(", "21", ",", "79", ")", ",", "(", "21", ",", "80", ")", ",", "\n", "(", "22", ",", "32", ")", ",", "(", "22", ",", "37", ")", ",", "(", "23", ",", "30", ")", ",", "(", "23", ",", "33", ")", "]", "\n", "\n", "action_sp_", "=", "Generate_action", "(", "GT", "[", "1", "]", ",", "nums", "=", "24", ")", "\n", "action_HO_", "=", "Generate_action", "(", "GT", "[", "1", "]", ",", "nums", "=", "24", ")", "\n", "obj_cls", "=", "GT", "[", "-", "1", "]", "\n", "action_compose", "=", "[", "set_list", ".", "index", "(", "item", ")", "for", "item", "in", "[", "(", "ho", ",", "obj_cls", "[", "0", "]", ")", "for", "ho", "in", "GT", "[", "1", "]", "]", "]", "\n", "action_compose_", "=", "Generate_action", "(", "action_compose", ",", "nums", "=", "len", "(", "set_list", ")", ")", "\n", "action_H_", "=", "Generate_action", "(", "GT", "[", "4", "]", ",", "nums", "=", "24", ")", "\n", "mask_sp_", "=", "np", ".", "ones", "(", "[", "1", ",", "24", "]", ",", "np", ".", "int32", ")", "\n", "mask_HO_", "=", "np", ".", "ones", "(", "[", "1", ",", "24", "]", ",", "np", ".", "int32", ")", "\n", "mask_H_", "=", "np", ".", "ones", "(", "[", "1", ",", "24", "]", ",", "np", ".", "int32", ")", "\n", "\n", "Human_augmented", "=", "Augmented_box", "(", "Human", ",", "shape", ",", "image_id", ",", "Pos_augment", ")", "\n", "Object_augmented", "=", "Augmented_box", "(", "Object", ",", "shape", ",", "image_id", ",", "Pos_augment", ")", "\n", "\n", "Human_augmented", "=", "Human_augmented", "[", ":", "min", "(", "len", "(", "Human_augmented", ")", ",", "len", "(", "Object_augmented", ")", ")", "]", "\n", "Object_augmented", "=", "Object_augmented", "[", ":", "min", "(", "len", "(", "Human_augmented", ")", ",", "len", "(", "Object_augmented", ")", ")", "]", "\n", "\n", "num_pos", "=", "len", "(", "Human_augmented", ")", "\n", "# pose_list = [GT[5]] * num_pos", "\n", "if", "image_id", "in", "Trainval_Neg", ":", "\n", "\n", "        ", "if", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", "<", "Neg_select", ":", "\n", "            ", "for", "Neg", "in", "Trainval_Neg", "[", "image_id", "]", ":", "\n", "# pose_list.append(Neg[7])", "\n", "                ", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Human_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "2", "]", "[", "0", "]", ",", "Neg", "[", "2", "]", "[", "1", "]", ",", "Neg", "[", "2", "]", "[", "2", "]", ",", "Neg", "[", "2", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Object_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "3", "]", "[", "0", "]", ",", "Neg", "[", "3", "]", "[", "1", "]", ",", "Neg", "[", "3", "]", "[", "2", "]", ",", "Neg", "[", "3", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "List", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", ")", ",", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "Neg_select", ")", ":", "\n", "                ", "Neg", "=", "Trainval_Neg", "[", "image_id", "]", "[", "List", "[", "i", "]", "]", "\n", "# pose_list.append(Neg[7])", "\n", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Human_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "2", "]", "[", "0", "]", ",", "Neg", "[", "2", "]", "[", "1", "]", ",", "Neg", "[", "2", "]", "[", "2", "]", ",", "Neg", "[", "2", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Object_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "3", "]", "[", "0", "]", ",", "Neg", "[", "3", "]", "[", "1", "]", ",", "Neg", "[", "3", "]", "[", "2", "]", ",", "Neg", "[", "3", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "num_pos_neg", "=", "len", "(", "Human_augmented", ")", "\n", "\n", "action_sp", "=", "action_sp_", "\n", "action_HO", "=", "action_HO_", "\n", "action_H", "=", "action_H_", "\n", "action_compose", "=", "action_compose_", "\n", "mask_sp", "=", "mask_sp_", "\n", "mask_HO", "=", "mask_HO_", "\n", "mask_H", "=", "mask_H_", "\n", "Pattern", "=", "np", ".", "empty", "(", "(", "0", ",", "64", ",", "64", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pose_box", "=", "[", "]", "\n", "# print('pose infor:', GT[5], pose_list)", "\n", "# pose_box = obtain_pose_box(Human_augmented, pose_list, shape)", "\n", "for", "item", "in", "Human_augmented", ":", "\n", "        ", "pose_box", ".", "extend", "(", "[", "item", "]", "*", "17", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_pos", "-", "1", ")", ":", "\n", "        ", "action_sp", "=", "np", ".", "concatenate", "(", "(", "action_sp", ",", "action_sp_", ")", ",", "axis", "=", "0", ")", "\n", "action_HO", "=", "np", ".", "concatenate", "(", "(", "action_HO", ",", "action_HO_", ")", ",", "axis", "=", "0", ")", "\n", "action_H", "=", "np", ".", "concatenate", "(", "(", "action_H", ",", "action_H_", ")", ",", "axis", "=", "0", ")", "\n", "action_compose", "=", "np", ".", "concatenate", "(", "(", "action_compose", ",", "action_compose_", ")", ",", "axis", "=", "0", ")", "\n", "mask_HO", "=", "np", ".", "concatenate", "(", "(", "mask_HO", ",", "mask_HO_", ")", ",", "axis", "=", "0", ")", "\n", "mask_H", "=", "np", ".", "concatenate", "(", "(", "mask_H", ",", "mask_H_", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_pos_neg", "-", "1", ")", ":", "\n", "        ", "mask_sp", "=", "np", ".", "concatenate", "(", "(", "mask_sp", ",", "mask_sp_", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_pos_neg", "-", "num_pos", ")", ":", "\n", "        ", "action_sp", "=", "np", ".", "concatenate", "(", "(", "action_sp", ",", "np", ".", "zeros", "(", "24", ")", ".", "reshape", "(", "1", ",", "24", ")", ")", ",", "axis", "=", "0", ")", "\n", "action_compose", "=", "np", ".", "concatenate", "(", "(", "action_compose", ",", "np", ".", "zeros", "(", "len", "(", "set_list", ")", ")", ".", "reshape", "(", "1", ",", "len", "(", "set_list", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_pos_neg", ")", ":", "\n", "        ", "Pattern_", "=", "Get_next_sp", "(", "Human_augmented", "[", "i", "]", "[", "1", ":", "]", ",", "Object_augmented", "[", "i", "]", "[", "1", ":", "]", ")", ".", "reshape", "(", "1", ",", "64", ",", "64", ",", "2", ")", "\n", "Pattern", "=", "np", ".", "concatenate", "(", "(", "Pattern", ",", "Pattern_", ")", ",", "axis", "=", "0", ")", "\n", "\n", "mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "1", ",", "shape", "[", "0", "]", "//", "16", ",", "shape", "[", "1", "]", "//", "16", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# obj_box = Object_augmented[i][1:].astype(np.int32)", "\n", "# print(obj_box)", "\n", "# mask[:, obj_box[0]:obj_box[2], obj_box[1]:obj_box[3]] = 1", "\n", "# from skimage import transform", "\n", "# mask = transform.resize(mask, [1, shape[0] // 16, shape[1] // 16, 1], order=0, preserve_range=True)", "\n", "\n", "", "Pattern", "=", "Pattern", ".", "reshape", "(", "num_pos_neg", ",", "64", ",", "64", ",", "2", ")", "\n", "Human_augmented_sp", "=", "Human_augmented", ".", "reshape", "(", "num_pos_neg", ",", "5", ")", "\n", "Object_augmented", "=", "Object_augmented", "[", ":", "num_pos", "]", ".", "reshape", "(", "num_pos", ",", "5", ")", "\n", "action_sp", "=", "action_sp", ".", "reshape", "(", "num_pos_neg", ",", "24", ")", "\n", "action_HO", "=", "action_HO", ".", "reshape", "(", "num_pos", ",", "24", ")", "\n", "action_H", "=", "action_H", ".", "reshape", "(", "num_pos", ",", "24", ")", "\n", "action_compose", "=", "action_compose", ".", "reshape", "(", "num_pos_neg", ",", "len", "(", "set_list", ")", ")", "\n", "mask_sp", "=", "mask_sp", ".", "reshape", "(", "num_pos_neg", ",", "24", ")", "\n", "mask_HO", "=", "mask_HO", ".", "reshape", "(", "num_pos", ",", "24", ")", "\n", "mask_H", "=", "mask_H", ".", "reshape", "(", "num_pos", ",", "24", ")", "\n", "\n", "return", "Pattern", ",", "Human_augmented_sp", ",", "Human_augmented", ",", "Object_augmented", ",", "action_sp", ",", "action_HO", ",", "action_H", ",", "mask_sp", ",", "mask_HO", ",", "mask_H", ",", "action_compose", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_HO_spNeg3": [[603, 723], ["ult.Generate_action", "ult.Generate_action", "ult.Generate_action", "ult.Generate_action", "numpy.ones", "numpy.ones", "numpy.ones", "ult.Augmented_box", "ult.Augmented_box", "len", "len", "numpy.empty", "range", "range", "range", "range", "np.concatenate.reshape", "np.concatenate.reshape", "Object_augmented[].reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "set_list.index", "pose_box.extend", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "Get_next_sp().reshape", "numpy.concatenate", "numpy.zeros", "len", "len", "min", "min", "len", "random.sample", "range", "len", "len", "len", "len", "numpy.concatenate", "numpy.concatenate", "range", "len", "numpy.concatenate", "numpy.concatenate", "numpy.zeros().reshape", "numpy.zeros().reshape", "ult.Get_next_sp", "len", "len", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.zeros", "numpy.zeros", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_box", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_box", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp"], ["", "def", "Augmented_HO_spNeg3", "(", "GT", ",", "Trainval_Neg", ",", "shape", ",", "Pos_augment", ",", "Neg_select", ")", ":", "\n", "    ", "image_id", "=", "GT", "[", "0", "]", "\n", "Human", "=", "GT", "[", "2", "]", "\n", "Object", "=", "GT", "[", "3", "]", "\n", "set_list", "=", "[", "(", "0", ",", "38", ")", ",", "(", "1", ",", "31", ")", ",", "(", "1", ",", "32", ")", ",", "(", "2", ",", "1", ")", ",", "(", "2", ",", "19", ")", ",", "(", "2", ",", "28", ")", ",", "(", "2", ",", "43", ")", ",", "(", "2", ",", "44", ")", ",", "(", "2", ",", "46", ")", ",", "(", "2", ",", "47", ")", ",", "(", "2", ",", "48", ")", ",", "\n", "(", "2", ",", "49", ")", ",", "\n", "(", "2", ",", "51", ")", ",", "(", "2", ",", "52", ")", ",", "(", "2", ",", "54", ")", ",", "(", "2", ",", "55", ")", ",", "(", "2", ",", "56", ")", ",", "(", "2", ",", "77", ")", ",", "(", "3", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "3", ",", "4", ")", ",", "(", "3", ",", "6", ")", ",", "(", "3", ",", "7", ")", ",", "(", "3", ",", "8", ")", ",", "\n", "(", "3", ",", "9", ")", ",", "(", "3", ",", "18", ")", ",", "(", "3", ",", "21", ")", ",", "(", "4", ",", "68", ")", ",", "(", "5", ",", "33", ")", ",", "(", "6", ",", "64", ")", ",", "(", "7", ",", "43", ")", ",", "(", "7", ",", "44", ")", ",", "(", "7", ",", "45", ")", ",", "(", "7", ",", "47", ")", ",", "(", "7", ",", "48", ")", ",", "\n", "(", "7", ",", "49", ")", ",", "\n", "(", "7", ",", "50", ")", ",", "(", "7", ",", "51", ")", ",", "(", "7", ",", "52", ")", ",", "(", "7", ",", "53", ")", ",", "(", "7", ",", "54", ")", ",", "(", "7", ",", "55", ")", ",", "(", "7", ",", "56", ")", ",", "(", "8", ",", "2", ")", ",", "(", "8", ",", "4", ")", ",", "(", "8", ",", "14", ")", ",", "(", "8", ",", "18", ")", ",", "\n", "(", "8", ",", "21", ")", ",", "\n", "(", "8", ",", "25", ")", ",", "(", "8", ",", "27", ")", ",", "(", "8", ",", "29", ")", ",", "(", "8", ",", "57", ")", ",", "(", "8", ",", "58", ")", ",", "(", "8", ",", "60", ")", ",", "(", "8", ",", "61", ")", ",", "(", "8", ",", "62", ")", ",", "(", "8", ",", "64", ")", ",", "(", "9", ",", "31", ")", ",", "(", "9", ",", "32", ")", ",", "\n", "(", "9", ",", "37", ")", ",", "\n", "(", "9", ",", "38", ")", ",", "(", "10", ",", "14", ")", ",", "(", "10", ",", "57", ")", ",", "(", "10", ",", "58", ")", ",", "(", "10", ",", "60", ")", ",", "(", "10", ",", "61", ")", ",", "(", "11", ",", "40", ")", ",", "(", "11", ",", "41", ")", ",", "(", "11", ",", "42", ")", ",", "(", "11", ",", "46", ")", ",", "\n", "(", "12", ",", "1", ")", ",", "\n", "(", "12", ",", "25", ")", ",", "(", "12", ",", "26", ")", ",", "(", "12", ",", "27", ")", ",", "(", "12", ",", "29", ")", ",", "(", "12", ",", "30", ")", ",", "(", "12", ",", "31", ")", ",", "(", "12", ",", "32", ")", ",", "(", "12", ",", "33", ")", ",", "(", "12", ",", "34", ")", ",", "(", "12", ",", "35", ")", ",", "\n", "(", "12", ",", "37", ")", ",", "(", "12", ",", "38", ")", ",", "(", "12", ",", "39", ")", ",", "(", "12", ",", "40", ")", ",", "(", "12", ",", "41", ")", ",", "(", "12", ",", "42", ")", ",", "(", "12", ",", "47", ")", ",", "(", "12", ",", "50", ")", ",", "(", "12", ",", "68", ")", ",", "(", "12", ",", "74", ")", ",", "\n", "(", "12", ",", "75", ")", ",", "(", "12", ",", "78", ")", ",", "(", "13", ",", "30", ")", ",", "(", "13", ",", "33", ")", ",", "(", "14", ",", "1", ")", ",", "(", "14", ",", "2", ")", ",", "(", "14", ",", "3", ")", ",", "(", "14", ",", "4", ")", ",", "(", "14", ",", "5", ")", ",", "(", "14", ",", "6", ")", ",", "(", "14", ",", "7", ")", ",", "\n", "(", "14", ",", "8", ")", ",", "(", "14", ",", "11", ")", ",", "(", "14", ",", "14", ")", ",", "(", "14", ",", "15", ")", ",", "(", "14", ",", "16", ")", ",", "(", "14", ",", "17", ")", ",", "(", "14", ",", "18", ")", ",", "(", "14", ",", "19", ")", ",", "(", "14", ",", "20", ")", ",", "(", "14", ",", "21", ")", ",", "\n", "(", "14", ",", "24", ")", ",", "\n", "(", "14", ",", "25", ")", ",", "(", "14", ",", "26", ")", ",", "(", "14", ",", "27", ")", ",", "(", "14", ",", "28", ")", ",", "(", "14", ",", "29", ")", ",", "(", "14", ",", "30", ")", ",", "(", "14", ",", "31", ")", ",", "(", "14", ",", "32", ")", ",", "(", "14", ",", "33", ")", ",", "(", "14", ",", "34", ")", ",", "\n", "(", "14", ",", "35", ")", ",", "(", "14", ",", "36", ")", ",", "(", "14", ",", "37", ")", ",", "(", "14", ",", "38", ")", ",", "(", "14", ",", "39", ")", ",", "(", "14", ",", "40", ")", ",", "(", "14", ",", "41", ")", ",", "(", "14", ",", "42", ")", ",", "(", "14", ",", "43", ")", ",", "(", "14", ",", "44", ")", ",", "\n", "(", "14", ",", "45", ")", ",", "(", "14", ",", "46", ")", ",", "(", "14", ",", "47", ")", ",", "(", "14", ",", "48", ")", ",", "(", "14", ",", "49", ")", ",", "(", "14", ",", "51", ")", ",", "(", "14", ",", "53", ")", ",", "(", "14", ",", "54", ")", ",", "(", "14", ",", "55", ")", ",", "(", "14", ",", "56", ")", ",", "\n", "(", "14", ",", "57", ")", ",", "(", "14", ",", "61", ")", ",", "(", "14", ",", "62", ")", ",", "(", "14", ",", "63", ")", ",", "(", "14", ",", "64", ")", ",", "(", "14", ",", "65", ")", ",", "(", "14", ",", "66", ")", ",", "(", "14", ",", "67", ")", ",", "(", "14", ",", "68", ")", ",", "(", "14", ",", "73", ")", ",", "\n", "(", "14", ",", "74", ")", ",", "(", "14", ",", "75", ")", ",", "(", "14", ",", "77", ")", ",", "(", "15", ",", "33", ")", ",", "(", "15", ",", "35", ")", ",", "(", "15", ",", "39", ")", ",", "(", "16", ",", "31", ")", ",", "(", "16", ",", "32", ")", ",", "(", "17", ",", "74", ")", ",", "(", "18", ",", "1", ")", ",", "\n", "(", "18", ",", "2", ")", ",", "\n", "(", "18", ",", "4", ")", ",", "(", "18", ",", "8", ")", ",", "(", "18", ",", "9", ")", ",", "(", "18", ",", "14", ")", ",", "(", "18", ",", "15", ")", ",", "(", "18", ",", "16", ")", ",", "(", "18", ",", "17", ")", ",", "(", "18", ",", "18", ")", ",", "(", "18", ",", "19", ")", ",", "(", "18", ",", "21", ")", ",", "\n", "(", "18", ",", "25", ")", ",", "\n", "(", "18", ",", "26", ")", ",", "(", "18", ",", "27", ")", ",", "(", "18", ",", "28", ")", ",", "(", "18", ",", "29", ")", ",", "(", "18", ",", "30", ")", ",", "(", "18", ",", "31", ")", ",", "(", "18", ",", "32", ")", ",", "(", "18", ",", "33", ")", ",", "(", "18", ",", "34", ")", ",", "(", "18", ",", "35", ")", ",", "\n", "(", "18", ",", "36", ")", ",", "(", "18", ",", "37", ")", ",", "(", "18", ",", "38", ")", ",", "(", "18", ",", "39", ")", ",", "(", "18", ",", "40", ")", ",", "(", "18", ",", "41", ")", ",", "(", "18", ",", "42", ")", ",", "(", "18", ",", "43", ")", ",", "(", "18", ",", "44", ")", ",", "(", "18", ",", "45", ")", ",", "\n", "(", "18", ",", "46", ")", ",", "(", "18", ",", "47", ")", ",", "(", "18", ",", "48", ")", ",", "(", "18", ",", "49", ")", ",", "(", "18", ",", "50", ")", ",", "(", "18", ",", "51", ")", ",", "(", "18", ",", "52", ")", ",", "(", "18", ",", "53", ")", ",", "(", "18", ",", "54", ")", ",", "(", "18", ",", "55", ")", ",", "\n", "(", "18", ",", "56", ")", ",", "(", "18", ",", "57", ")", ",", "(", "18", ",", "64", ")", ",", "(", "18", ",", "65", ")", ",", "(", "18", ",", "66", ")", ",", "(", "18", ",", "67", ")", ",", "(", "18", ",", "68", ")", ",", "(", "18", ",", "73", ")", ",", "(", "18", ",", "74", ")", ",", "(", "18", ",", "77", ")", ",", "\n", "(", "18", ",", "78", ")", ",", "(", "18", ",", "79", ")", ",", "(", "18", ",", "80", ")", ",", "(", "19", ",", "32", ")", ",", "(", "19", ",", "37", ")", ",", "(", "20", ",", "30", ")", ",", "(", "20", ",", "33", ")", "]", "\n", "action_sp_", "=", "Generate_action", "(", "GT", "[", "1", "]", ",", "nums", "=", "21", ")", "\n", "action_HO_", "=", "Generate_action", "(", "GT", "[", "1", "]", ",", "nums", "=", "21", ")", "\n", "obj_cls", "=", "GT", "[", "-", "1", "]", "\n", "action_compose", "=", "[", "set_list", ".", "index", "(", "item", ")", "for", "item", "in", "[", "(", "ho", ",", "obj_cls", "[", "0", "]", ")", "for", "ho", "in", "GT", "[", "1", "]", "]", "]", "\n", "action_compose_", "=", "Generate_action", "(", "action_compose", ",", "nums", "=", "len", "(", "set_list", ")", ")", "\n", "action_H_", "=", "Generate_action", "(", "GT", "[", "4", "]", ",", "nums", "=", "21", ")", "\n", "mask_sp_", "=", "np", ".", "ones", "(", "[", "1", ",", "21", "]", ",", "np", ".", "int32", ")", "\n", "mask_HO_", "=", "np", ".", "ones", "(", "[", "1", ",", "21", "]", ",", "np", ".", "int32", ")", "\n", "mask_H_", "=", "np", ".", "ones", "(", "[", "1", ",", "21", "]", ",", "np", ".", "int32", ")", "\n", "\n", "Human_augmented", "=", "Augmented_box", "(", "Human", ",", "shape", ",", "image_id", ",", "Pos_augment", ")", "\n", "Object_augmented", "=", "Augmented_box", "(", "Object", ",", "shape", ",", "image_id", ",", "Pos_augment", ")", "\n", "\n", "Human_augmented", "=", "Human_augmented", "[", ":", "min", "(", "len", "(", "Human_augmented", ")", ",", "len", "(", "Object_augmented", ")", ")", "]", "\n", "Object_augmented", "=", "Object_augmented", "[", ":", "min", "(", "len", "(", "Human_augmented", ")", ",", "len", "(", "Object_augmented", ")", ")", "]", "\n", "\n", "num_pos", "=", "len", "(", "Human_augmented", ")", "\n", "# pose_list = [GT[5]] * num_pos", "\n", "if", "image_id", "in", "Trainval_Neg", ":", "\n", "\n", "        ", "if", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", "<", "Neg_select", ":", "\n", "            ", "for", "Neg", "in", "Trainval_Neg", "[", "image_id", "]", ":", "\n", "# pose_list.append(Neg[7])", "\n", "                ", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Human_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "2", "]", "[", "0", "]", ",", "Neg", "[", "2", "]", "[", "1", "]", ",", "Neg", "[", "2", "]", "[", "2", "]", ",", "Neg", "[", "2", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Object_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "3", "]", "[", "0", "]", ",", "Neg", "[", "3", "]", "[", "1", "]", ",", "Neg", "[", "3", "]", "[", "2", "]", ",", "Neg", "[", "3", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "List", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", ")", ",", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "Neg_select", ")", ":", "\n", "                ", "Neg", "=", "Trainval_Neg", "[", "image_id", "]", "[", "List", "[", "i", "]", "]", "\n", "# pose_list.append(Neg[7])", "\n", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Human_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "2", "]", "[", "0", "]", ",", "Neg", "[", "2", "]", "[", "1", "]", ",", "Neg", "[", "2", "]", "[", "2", "]", ",", "Neg", "[", "2", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Object_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "3", "]", "[", "0", "]", ",", "Neg", "[", "3", "]", "[", "1", "]", ",", "Neg", "[", "3", "]", "[", "2", "]", ",", "Neg", "[", "3", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "num_pos_neg", "=", "len", "(", "Human_augmented", ")", "\n", "\n", "action_sp", "=", "action_sp_", "\n", "action_HO", "=", "action_HO_", "\n", "action_H", "=", "action_H_", "\n", "action_compose", "=", "action_compose_", "\n", "mask_sp", "=", "mask_sp_", "\n", "mask_HO", "=", "mask_HO_", "\n", "mask_H", "=", "mask_H_", "\n", "Pattern", "=", "np", ".", "empty", "(", "(", "0", ",", "64", ",", "64", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pose_box", "=", "[", "]", "\n", "# print('pose infor:', GT[5], pose_list)", "\n", "# pose_box = obtain_pose_box(Human_augmented, pose_list, shape)", "\n", "for", "item", "in", "Human_augmented", ":", "\n", "        ", "pose_box", ".", "extend", "(", "[", "item", "]", "*", "17", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_pos", "-", "1", ")", ":", "\n", "        ", "action_sp", "=", "np", ".", "concatenate", "(", "(", "action_sp", ",", "action_sp_", ")", ",", "axis", "=", "0", ")", "\n", "action_HO", "=", "np", ".", "concatenate", "(", "(", "action_HO", ",", "action_HO_", ")", ",", "axis", "=", "0", ")", "\n", "action_H", "=", "np", ".", "concatenate", "(", "(", "action_H", ",", "action_H_", ")", ",", "axis", "=", "0", ")", "\n", "action_compose", "=", "np", ".", "concatenate", "(", "(", "action_compose", ",", "action_compose_", ")", ",", "axis", "=", "0", ")", "\n", "mask_HO", "=", "np", ".", "concatenate", "(", "(", "mask_HO", ",", "mask_HO_", ")", ",", "axis", "=", "0", ")", "\n", "mask_H", "=", "np", ".", "concatenate", "(", "(", "mask_H", ",", "mask_H_", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_pos_neg", "-", "1", ")", ":", "\n", "        ", "mask_sp", "=", "np", ".", "concatenate", "(", "(", "mask_sp", ",", "mask_sp_", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_pos_neg", "-", "num_pos", ")", ":", "\n", "        ", "action_sp", "=", "np", ".", "concatenate", "(", "(", "action_sp", ",", "np", ".", "zeros", "(", "21", ")", ".", "reshape", "(", "1", ",", "21", ")", ")", ",", "axis", "=", "0", ")", "\n", "action_compose", "=", "np", ".", "concatenate", "(", "(", "action_compose", ",", "np", ".", "zeros", "(", "len", "(", "set_list", ")", ")", ".", "reshape", "(", "1", ",", "len", "(", "set_list", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_pos_neg", ")", ":", "\n", "        ", "Pattern_", "=", "Get_next_sp", "(", "Human_augmented", "[", "i", "]", "[", "1", ":", "]", ",", "Object_augmented", "[", "i", "]", "[", "1", ":", "]", ")", ".", "reshape", "(", "[", "1", ",", "64", ",", "64", ",", "2", "]", ")", "\n", "# Pattern_ = np.concatenate([Pattern_, np.zeros([1, 64, 64, 1])], axis=-1)", "\n", "Pattern", "=", "np", ".", "concatenate", "(", "(", "Pattern", ",", "Pattern_", ")", ",", "axis", "=", "0", ")", "\n", "\n", "mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "1", ",", "shape", "[", "0", "]", "//", "16", ",", "shape", "[", "1", "]", "//", "16", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "Pattern", "=", "Pattern", ".", "reshape", "(", "num_pos_neg", ",", "64", ",", "64", ",", "2", ")", "\n", "Human_augmented_sp", "=", "Human_augmented", ".", "reshape", "(", "num_pos_neg", ",", "5", ")", "\n", "Object_augmented", "=", "Object_augmented", "[", ":", "num_pos", "]", ".", "reshape", "(", "num_pos", ",", "5", ")", "\n", "action_sp", "=", "action_sp", ".", "reshape", "(", "num_pos_neg", ",", "21", ")", "\n", "action_HO", "=", "action_HO", ".", "reshape", "(", "num_pos", ",", "21", ")", "\n", "action_H", "=", "action_H", ".", "reshape", "(", "num_pos", ",", "21", ")", "\n", "action_compose", "=", "action_compose", ".", "reshape", "(", "num_pos_neg", ",", "len", "(", "set_list", ")", ")", "\n", "mask_sp", "=", "mask_sp", ".", "reshape", "(", "num_pos_neg", ",", "21", ")", "\n", "mask_HO", "=", "mask_HO", ".", "reshape", "(", "num_pos", ",", "21", ")", "\n", "mask_H", "=", "mask_H", ".", "reshape", "(", "num_pos", ",", "21", ")", "\n", "\n", "return", "Pattern", ",", "Human_augmented_sp", ",", "Human_augmented", ",", "Object_augmented", ",", "action_sp", ",", "action_HO", ",", "action_H", ",", "mask_sp", ",", "mask_HO", ",", "mask_H", ",", "action_compose", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action_HICO": [[725, 731], ["numpy.zeros", "action_.reshape.reshape"], "function", ["None"], ["", "def", "Generate_action_HICO", "(", "action_list", ")", ":", "\n", "    ", "action_", "=", "np", ".", "zeros", "(", "600", ")", "\n", "for", "GT_idx", "in", "action_list", ":", "\n", "        ", "action_", "[", "GT_idx", "]", "=", "1", "\n", "", "action_", "=", "action_", ".", "reshape", "(", "1", ",", "600", ")", "\n", "return", "action_", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_Next_Instance_HO_Neg_HICO": [[733, 756], ["cv2.imread", "cv2.imread.astype", "im_orig.reshape.reshape", "ult.Augmented_HO_Neg_HICO", "str().zfill", "str"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_HO_Neg_HICO"], ["", "def", "Get_Next_Instance_HO_Neg_HICO", "(", "trainval_GT", ",", "Trainval_Neg", ",", "iter", ",", "Pos_augment", ",", "Neg_select", ",", "Data_length", ")", ":", "\n", "    ", "GT", "=", "trainval_GT", "[", "iter", "%", "Data_length", "]", "\n", "image_id", "=", "GT", "[", "0", "]", "\n", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/train2015/HICO_train2015_'", "+", "(", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "\n", "8", ")", "+", "'.jpg'", "\n", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "im_orig", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "True", ")", "\n", "im_orig", "-=", "cfg", ".", "PIXEL_MEANS", "\n", "im_shape", "=", "im_orig", ".", "shape", "\n", "im_orig", "=", "im_orig", ".", "reshape", "(", "1", ",", "im_shape", "[", "0", "]", ",", "im_shape", "[", "1", "]", ",", "3", ")", "\n", "\n", "Pattern", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "num_pos", "=", "Augmented_HO_Neg_HICO", "(", "GT", ",", "Trainval_Neg", ",", "im_shape", ",", "\n", "Pos_augment", ",", "Neg_select", ")", "\n", "\n", "blobs", "=", "{", "}", "\n", "blobs", "[", "'image'", "]", "=", "im_orig", "\n", "blobs", "[", "'H_boxes'", "]", "=", "Human_augmented", "\n", "blobs", "[", "'O_boxes'", "]", "=", "Object_augmented", "\n", "blobs", "[", "'gt_class_HO'", "]", "=", "action_HO", "\n", "blobs", "[", "'sp'", "]", "=", "Pattern", "\n", "blobs", "[", "'H_num'", "]", "=", "num_pos", "\n", "\n", "return", "blobs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_neg_box": [[758, 801], ["numpy.empty", "random.randint", "max", "min", "max", "min", "numpy.floor", "random.randint", "numpy.array().reshape", "numpy.concatenate", "random.randint", "numpy.floor", "numpy.floor", "ult.bb_IOU", "numpy.sign", "numpy.floor", "numpy.sign", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.bb_IOU"], ["", "def", "Augmented_neg_box", "(", "bbox", ",", "shape", ",", "image_id", ",", "augment", "=", "15", ",", "bbox_list", "=", "[", "]", ")", ":", "\n", "    ", "thres_", "=", "0.25", "\n", "\n", "# box = np.array([0, bbox[0], bbox[1], bbox[2], bbox[3]]).reshape(1, 5)", "\n", "# box = box.astype(np.float64)", "\n", "box", "=", "np", ".", "empty", "(", "[", "1", ",", "5", "]", ",", "np", ".", "float64", ")", "\n", "\n", "count", "=", "0", "\n", "time_count", "=", "0", "\n", "while", "count", "<", "augment", ":", "\n", "\n", "        ", "time_count", "+=", "1", "\n", "height", "=", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "\n", "width", "=", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "\n", "\n", "height_cen", "=", "(", "bbox", "[", "3", "]", "+", "bbox", "[", "1", "]", ")", "/", "2", "\n", "width_cen", "=", "(", "bbox", "[", "2", "]", "+", "bbox", "[", "0", "]", ")", "/", "2", "\n", "\n", "ratio", "=", "1", "+", "randint", "(", "-", "10", ",", "10", ")", "*", "0.01", "\n", "\n", "height_shift", "=", "randint", "(", "-", "np", ".", "floor", "(", "height", ")", ",", "np", ".", "floor", "(", "height", ")", ")", "\n", "height_shift", "=", "np", ".", "sign", "(", "height_shift", ")", "*", "0.5", "*", "height", "+", "height_shift", "\n", "width_shift", "=", "randint", "(", "-", "np", ".", "floor", "(", "width", ")", ",", "np", ".", "floor", "(", "width", ")", ")", "*", "0.1", "\n", "width_shift", "=", "np", ".", "sign", "(", "width_shift", ")", "*", "0.5", "*", "width", "+", "width_shift", "\n", "\n", "H_0", "=", "max", "(", "0", ",", "width_cen", "+", "width_shift", "-", "ratio", "*", "width", "/", "2", ")", "\n", "H_2", "=", "min", "(", "shape", "[", "1", "]", "-", "1", ",", "width_cen", "+", "width_shift", "+", "ratio", "*", "width", "/", "2", ")", "\n", "H_1", "=", "max", "(", "0", ",", "height_cen", "+", "height_shift", "-", "ratio", "*", "height", "/", "2", ")", "\n", "H_3", "=", "min", "(", "shape", "[", "0", "]", "-", "1", ",", "height_cen", "+", "height_shift", "+", "ratio", "*", "height", "/", "2", ")", "\n", "\n", "valid_neg_box", "=", "True", "\n", "for", "bbox1", "in", "bbox_list", ":", "\n", "            ", "if", "bb_IOU", "(", "bbox1", ",", "np", ".", "array", "(", "[", "H_0", ",", "H_1", ",", "H_2", ",", "H_3", "]", ")", ")", ">", "thres_", ":", "\n", "                ", "valid_neg_box", "=", "False", "\n", "break", "\n", "", "", "if", "valid_neg_box", ":", "\n", "            ", "box_", "=", "np", ".", "array", "(", "[", "0", ",", "H_0", ",", "H_1", ",", "H_2", ",", "H_3", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", "\n", "box", "=", "np", ".", "concatenate", "(", "(", "box", ",", "box_", ")", ",", "axis", "=", "0", ")", "\n", "count", "+=", "1", "\n", "", "if", "time_count", ">", "150", ":", "\n", "            ", "return", "box", "\n", "\n", "", "", "return", "box", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.obtain_data2_large": [[1244, 1355], ["tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "time.time", "g_func", "functools.partial", "open", "open", "open", "open", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "range", "len", "len", "len", "model_name.__contains__", "range", "max", "max", "range", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "range", "range", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "im_list.append", "pos_semi_list.append", "pos_semi_list.append", "numpy.pad", "numpy.concatenate", "sum", "range", "int", "range", "range", "enumerate", "enumerate", "max", "max", "len"], "function", ["None"], ["", "def", "obtain_data2_large", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "60", ",", "augment_type", "=", "0", ",", "model_name", "=", "''", ",", "\n", "pattern_type", "=", "False", ",", "zero_shot_type", "=", "0", ",", "isalign", "=", "False", ",", "bnum", "=", "2", ",", "neg_type_ratio", "=", "0", ")", ":", "\n", "# bnum = 2", "\n", "    ", "if", "pattern_type", "==", "1", ":", "\n", "        ", "Trainval_GT", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO_with_pose.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "Trainval_N", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_Neg_HICO_with_pose.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "", "else", ":", "\n", "        ", "Trainval_GT", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "Trainval_N", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_Neg_HICO.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "", "g_func", "=", "generator2", "\n", "\n", "def", "generator3", "(", "Trainval_GT", ",", "Trainval_N", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ")", ":", "\n", "        ", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "import", "time", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "count_time", "=", "0", "\n", "avg_time", "=", "0", "\n", "# np.random.seed(0)", "\n", "for", "im_orig", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "Pattern", "in", "g_func", "(", "Trainval_GT", ",", "Trainval_N", ",", "Pos_augment", ",", "Neg_select", ",", "\n", "augment_type", ",", "\n", "pattern_type", ",", "zero_shot_type", ",", "isalign", ",", "0", ")", ":", "\n", "            ", "buffer", "[", "0", "]", ".", "append", "(", "im_orig", ")", "\n", "buffer", "[", "1", "]", ".", "append", "(", "image_id", ")", "\n", "buffer", "[", "2", "]", ".", "append", "(", "num_pos", ")", "\n", "buffer", "[", "3", "]", ".", "append", "(", "Human_augmented", ")", "\n", "buffer", "[", "4", "]", ".", "append", "(", "Object_augmented", ")", "\n", "buffer", "[", "5", "]", ".", "append", "(", "action_HO", ")", "\n", "buffer", "[", "6", "]", ".", "append", "(", "Pattern", ")", "\n", "buffer", "[", "3", "]", "[", "-", "1", "]", "[", ":", ",", "0", "]", "=", "len", "(", "buffer", "[", "3", "]", ")", "-", "1", "\n", "buffer", "[", "4", "]", "[", "-", "1", "]", "[", ":", ",", "0", "]", "=", "len", "(", "buffer", "[", "3", "]", ")", "-", "1", "\n", "if", "len", "(", "buffer", "[", "0", "]", ")", ">=", "bnum", ":", "\n", "\n", "# if len(buffer[3][0]) < len(buffer[3][1]):", "\n", "#     # make sure the second batch is less.", "\n", "#     for i in range(len(buffer)):", "\n", "#         tmp = buffer[i][0]", "\n", "#         buffer[i][0] = buffer[i][1]", "\n", "#         buffer[i][1] = tmp", "\n", "\n", "# print(\"inner:\", buffer[0][0].shape, buffer[0][1].shape, buffer[1], buffer[2], buffer[3].shape, buffer[4].shape, buffer[5].shape, buffer[6].shape)", "\n", "# print(\"inner:\", buffer[1], buffer[2][0], buffer[2][1], buffer[3][0].shape, buffer[3][1].shape, buffer[5][0].shape, buffer[5][1].shape)", "\n", "# yield buffer[0][0], buffer[0][1], buffer[1], buffer[2], buffer[3], buffer[4], buffer[5], buffer[6]", "\n", "\n", "# print(\"inner hint:\", buffer[1], 'num_pos:', buffer[2], 'len of h boxes:',len(buffer[3][0]), len(buffer[3][1]),", "\n", "#       len(buffer[4][0]), len(buffer[4][1]), len(buffer[5][0]), len(buffer[5][1]), len(buffer[6][0]), len(buffer[6][1]))", "\n", "\n", "                ", "pos_semi_list", "=", "[", "]", "\n", "if", "model_name", ".", "__contains__", "(", "'x5new'", ")", ":", "\n", "                    ", "for", "b", "in", "range", "(", "bnum", ")", ":", "\n", "                        ", "pos_semi_list", ".", "append", "(", "int", "(", "buffer", "[", "2", "]", "[", "b", "]", "+", "(", "len", "(", "buffer", "[", "3", "]", "[", "b", "]", ")", "-", "buffer", "[", "2", "]", "[", "b", "]", ")", "//", "8", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "for", "b", "in", "range", "(", "bnum", ")", ":", "\n", "                        ", "pos_semi_list", ".", "append", "(", "buffer", "[", "2", "]", "[", "b", "]", ")", "\n", "\n", "", "", "for", "ii", "in", "range", "(", "3", ",", "7", ")", ":", "\n", "                    ", "pos_h_boxes", "=", "np", ".", "concatenate", "(", "[", "buffer", "[", "ii", "]", "[", "pi", "]", "[", ":", "pos2", "]", "for", "pi", ",", "pos2", "in", "enumerate", "(", "pos_semi_list", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "neg_h_boxes", "=", "np", ".", "concatenate", "(", "[", "buffer", "[", "ii", "]", "[", "pi", "]", "[", "pos2", ":", "]", "for", "pi", ",", "pos2", "in", "enumerate", "(", "pos_semi_list", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "buffer", "[", "ii", "]", "=", "np", ".", "concatenate", "(", "[", "pos_h_boxes", ",", "neg_h_boxes", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "width", "=", "max", "(", "[", "buffer", "[", "0", "]", "[", "b", "]", ".", "shape", "[", "1", "]", "for", "b", "in", "range", "(", "bnum", ")", "]", ")", "\n", "height", "=", "max", "(", "[", "buffer", "[", "0", "]", "[", "b", "]", ".", "shape", "[", "2", "]", "for", "b", "in", "range", "(", "bnum", ")", "]", ")", "\n", "\n", "im_list", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "bnum", ")", ":", "\n", "                    ", "im_list", ".", "append", "(", "np", ".", "pad", "(", "buffer", "[", "0", "]", "[", "b", "]", ",", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "max", "(", "0", ",", "width", "-", "buffer", "[", "0", "]", "[", "b", "]", ".", "shape", "[", "1", "]", ")", ")", ",", "\n", "(", "0", ",", "max", "(", "0", ",", "height", "-", "buffer", "[", "0", "]", "[", "b", "]", ".", "shape", "[", "2", "]", ")", ")", ",", "(", "0", ",", "0", ")", "]", ",", "\n", "mode", "=", "'constant'", ")", ")", "\n", "\n", "\n", "", "yield", "np", ".", "concatenate", "(", "im_list", ",", "axis", "=", "0", ")", ",", "buffer", "[", "1", "]", ",", "sum", "(", "pos_semi_list", ")", ",", "buffer", "[", "3", "]", ",", "buffer", "[", "4", "]", ",", "buffer", "[", "5", "]", ",", "buffer", "[", "6", "]", ",", "pos_semi_list", "[", "0", "]", "\n", "\n", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "# avg_time = ((time.time() - st) + avg_time * count_time) / (count_time + 1)", "\n", "# count_time += 1", "\n", "# print('generate batch:', time.time() - st, \"average;\",  avg_time)", "\n", "# st = time.time()", "\n", "\n", "", "", "", "if", "pattern_type", "==", "1", ":", "\n", "        ", "pattern_channel", "=", "3", "\n", "", "else", ":", "\n", "        ", "pattern_channel", "=", "2", "\n", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "\n", "partial", "(", "generator3", ",", "Trainval_GT", ",", "Trainval_N", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ")", ",", "\n", "output_types", "=", "(", "\n", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int64", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "int32", ")", ",", "\n", "output_shapes", "=", "(", "\n", "tf", ".", "TensorShape", "(", "[", "bnum", ",", "None", ",", "None", ",", "3", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "bnum", ",", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "600", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "pattern_channel", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", "\n", ")", "\n", ")", "\n", "# dataset = tf.data.Dataset.from_generator(gen, output_types=(tf.float32, tf.int32),", "\n", "#                                          output_shapes=(tf.TensorShape([1, None, None, 3]), tf.TensorShape([])))", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.shuffle(1000)", "\n", "# dataset = dataset.repeat(100)", "\n", "# dataset = dataset.repeat(1000).shuffle(1000)", "\n", "# dataset._dataset.batch(3)", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "sp", ",", "split_idx", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "image", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "sp", ",", "split_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_HO_Neg_HICO": [[919, 1010], ["ult.Generate_action_HICO", "ult.Augmented_box", "ult.Augmented_box", "max", "numpy.tile", "len", "len", "numpy.empty", "range", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "len", "len", "ult.Augmented_neg_box", "ult.Get_next_sp", "Pattern_.reshape.reshape", "numpy.concatenate", "len", "numpy.concatenate", "len", "numpy.concatenate", "min", "min", "len", "len", "int", "len", "numpy.tile", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "random.sample", "range", "len", "len", "len", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "range", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "len", "len", "numpy.array().reshape", "numpy.array().reshape", "ult.Generate_action_HICO", "numpy.array().reshape", "numpy.array().reshape", "ult.Generate_action_HICO", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "len"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action_HICO", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_box", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_box", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_neg_box", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action_HICO", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action_HICO"], ["", "def", "Augmented_HO_Neg_HICO", "(", "GT", ",", "Trainval_Neg", ",", "shape", ",", "Pos_augment", ",", "Neg_select", ",", "pattern_type", "=", "False", ",", "isalign", "=", "False", ",", "\n", "box_list", "=", "[", "]", ",", "\n", "real_neg_ratio", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n\n    :param GT:\n    :param Trainval_Neg:\n    :param shape:\n    :param Pos_augment:\n    :param Neg_select:\n    :param pattern_type:\n    :param isalign:\n    :param box_list:\n    :param real_neg_ratio: This is for no action HOI (all zeros)\n    :return:\n    \"\"\"", "\n", "image_id", "=", "GT", "[", "0", "]", "\n", "Human", "=", "GT", "[", "2", "]", "\n", "Object", "=", "GT", "[", "3", "]", "\n", "\n", "action_HO_", "=", "Generate_action_HICO", "(", "GT", "[", "1", "]", ")", "\n", "action_HO", "=", "action_HO_", "\n", "\n", "Human_augmented", "=", "Augmented_box", "(", "Human", ",", "shape", ",", "image_id", ",", "Pos_augment", ")", "\n", "Object_augmented", "=", "Augmented_box", "(", "Object", ",", "shape", ",", "image_id", ",", "Pos_augment", ")", "\n", "max_augmented_nums", "=", "max", "(", "len", "(", "Human_augmented", ")", ",", "len", "(", "Object_augmented", ")", ")", "\n", "if", "isalign", ":", "\n", "        ", "while", "len", "(", "Human_augmented", ")", "<", "max_augmented_nums", ":", "\n", "            ", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "[", "Human_augmented", ",", "Human_augmented", "[", "-", "(", "max_augmented_nums", "-", "len", "(", "Human_augmented", ")", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "if", "isalign", ":", "\n", "        ", "while", "len", "(", "Object_augmented", ")", "<", "max_augmented_nums", ":", "\n", "            ", "Object_augmented", "=", "np", ".", "concatenate", "(", "\n", "[", "Object_augmented", ",", "Object_augmented", "[", "-", "(", "max_augmented_nums", "-", "len", "(", "Object_augmented", ")", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "# print(\"shape:\", Human_augmented.shape, Object_augmented.shape)", "\n", "", "", "Human_augmented", "=", "Human_augmented", "[", ":", "min", "(", "len", "(", "Human_augmented", ")", ",", "len", "(", "Object_augmented", ")", ")", "]", "\n", "Object_augmented", "=", "Object_augmented", "[", ":", "min", "(", "len", "(", "Human_augmented", ")", ",", "len", "(", "Object_augmented", ")", ")", "]", "\n", "\n", "action_HO", "=", "np", ".", "tile", "(", "action_HO", ",", "[", "len", "(", "Human_augmented", ")", ",", "1", "]", ")", "\n", "\n", "if", "len", "(", "box_list", ")", ">", "0", "and", "real_neg_ratio", ">", "0", ":", "\n", "        ", "aug_neg_objs", "=", "Augmented_neg_box", "(", "Object", ",", "shape", ",", "image_id", ",", "int", "(", "Pos_augment", "*", "real_neg_ratio", ")", ",", "bbox_list", "=", "box_list", ")", "\n", "if", "len", "(", "aug_neg_objs", ")", ">", "0", ":", "\n", "            ", "aug_neg_humans", "=", "np", ".", "tile", "(", "[", "Human_augmented", "[", "0", "]", "]", ",", "[", "len", "(", "aug_neg_objs", ")", ",", "1", "]", ")", "\n", "aug_neg_actions", "=", "np", ".", "zeros", "(", "[", "len", "(", "aug_neg_objs", ")", ",", "600", "]", ",", ")", "\n", "# print(aug_neg_objs.shape, Object_augmented.shape, Human_augmented.shape, aug_neg_humans.shape)", "\n", "Human_augmented", "=", "np", ".", "concatenate", "(", "[", "Human_augmented", ",", "aug_neg_humans", "]", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "[", "Object_augmented", ",", "aug_neg_objs", "]", ")", "\n", "action_HO", "=", "np", ".", "concatenate", "(", "[", "action_HO", ",", "aug_neg_actions", "]", ")", "\n", "\n", "", "", "num_pos", "=", "len", "(", "Human_augmented", ")", "\n", "pose_list", "=", "[", "]", "\n", "\n", "if", "image_id", "in", "Trainval_Neg", ":", "\n", "\n", "        ", "if", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", "<", "Neg_select", ":", "\n", "            ", "for", "Neg", "in", "Trainval_Neg", "[", "image_id", "]", ":", "\n", "                ", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Human_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "2", "]", "[", "0", "]", ",", "Neg", "[", "2", "]", "[", "1", "]", ",", "Neg", "[", "2", "]", "[", "2", "]", ",", "Neg", "[", "2", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Object_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "3", "]", "[", "0", "]", ",", "Neg", "[", "3", "]", "[", "1", "]", ",", "Neg", "[", "3", "]", "[", "2", "]", ",", "Neg", "[", "3", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "action_HO", "=", "np", ".", "concatenate", "(", "(", "action_HO", ",", "Generate_action_HICO", "(", "[", "Neg", "[", "1", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "List", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", ")", ",", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "Neg_select", ")", ":", "\n", "                ", "Neg", "=", "Trainval_Neg", "[", "image_id", "]", "[", "List", "[", "i", "]", "]", "\n", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Human_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "2", "]", "[", "0", "]", ",", "Neg", "[", "2", "]", "[", "1", "]", ",", "Neg", "[", "2", "]", "[", "2", "]", ",", "Neg", "[", "2", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Object_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "3", "]", "[", "0", "]", ",", "Neg", "[", "3", "]", "[", "1", "]", ",", "Neg", "[", "3", "]", "[", "2", "]", ",", "Neg", "[", "3", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "action_HO", "=", "np", ".", "concatenate", "(", "(", "action_HO", ",", "Generate_action_HICO", "(", "[", "Neg", "[", "1", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "num_pos_neg", "=", "len", "(", "Human_augmented", ")", "\n", "pattern_channel", "=", "2", "\n", "Pattern", "=", "np", ".", "empty", "(", "(", "0", ",", "64", ",", "64", ",", "pattern_channel", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_pos_neg", ")", ":", "\n", "# Pattern_ = Get_next_sp(Human_augmented[i][1:], Object_augmented[i][1:]).reshape(1, 64, 64, 2)", "\n", "# there are poses for the negative sample", "\n", "        ", "Pattern_", "=", "Get_next_sp", "(", "Human_augmented", "[", "i", "]", "[", "1", ":", "]", ",", "Object_augmented", "[", "i", "]", "[", "1", ":", "]", ")", "\n", "Pattern_", "=", "Pattern_", ".", "reshape", "(", "1", ",", "64", ",", "64", ",", "pattern_channel", ")", "\n", "Pattern", "=", "np", ".", "concatenate", "(", "(", "Pattern", ",", "Pattern_", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "Pattern", "=", "Pattern", ".", "reshape", "(", "num_pos_neg", ",", "64", ",", "64", ",", "pattern_channel", ")", "\n", "Human_augmented", "=", "Human_augmented", ".", "reshape", "(", "num_pos_neg", ",", "5", ")", "\n", "Object_augmented", "=", "Object_augmented", ".", "reshape", "(", "num_pos_neg", ",", "5", ")", "\n", "action_HO", "=", "action_HO", ".", "reshape", "(", "num_pos_neg", ",", "600", ")", "\n", "\n", "# print(\"shape1:\", Human_augmented.shape, Object_augmented.shape, num_pos, Neg_select)", "\n", "return", "Pattern", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "num_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.obtain_data2": [[1012, 1126], ["pickle.load", "pickle.load", "tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "open", "open", "time.time", "g_func", "functools.partial", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "range", "len", "model_name.__contains__", "list", "max", "max", "numpy.pad", "numpy.pad", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "len", "len", "range", "int", "int", "range", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "numpy.concatenate", "range", "max", "max", "max", "max", "len", "len"], "function", ["None"], ["", "def", "obtain_data2", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "60", ",", "augment_type", "=", "0", ",", "model_name", "=", "''", ",", "pattern_type", "=", "False", ",", "\n", "zero_shot_type", "=", "0", ",", "isalign", "=", "False", ",", "neg_type_ratio", "=", "0", ")", ":", "\n", "    ", "b_num", "=", "2", "\n", "Trainval_GT", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "Trainval_N", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_Neg_HICO.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "g_func", "=", "generator2", "\n", "\n", "def", "generator3", "(", "Trainval_GT", ",", "Trainval_N", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ")", ":", "\n", "        ", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "7", ")", "]", "\n", "import", "time", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "count_time", "=", "0", "\n", "avg_time", "=", "0", "\n", "for", "im_orig", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "Pattern", "in", "g_func", "(", "Trainval_GT", ",", "Trainval_N", ",", "Pos_augment", ",", "\n", "Neg_select", ",", "\n", "augment_type", ",", "pattern_type", ",", "\n", "zero_shot_type", ",", "isalign", ",", "\n", "0", ")", ":", "\n", "            ", "buffer", "[", "0", "]", ".", "append", "(", "im_orig", ")", "\n", "buffer", "[", "1", "]", ".", "append", "(", "image_id", ")", "\n", "buffer", "[", "2", "]", ".", "append", "(", "num_pos", ")", "\n", "buffer", "[", "3", "]", ".", "append", "(", "Human_augmented", ")", "\n", "buffer", "[", "4", "]", ".", "append", "(", "Object_augmented", ")", "\n", "buffer", "[", "5", "]", ".", "append", "(", "action_HO", ")", "\n", "buffer", "[", "6", "]", ".", "append", "(", "Pattern", ")", "\n", "# buffer[8].append(pose_list)", "\n", "# print(im_orig.shape, image_id, num_pos,", "\n", "if", "len", "(", "buffer", "[", "0", "]", ")", ">=", "b_num", ":", "\n", "\n", "# print(\"inner:\", buffer[0][0].shape, buffer[0][1].shape, buffer[1], buffer[2], buffer[3].shape, buffer[4].shape, buffer[5].shape, buffer[6].shape)", "\n", "# print(\"inner:\", buffer[1], buffer[2][0], buffer[2][1], buffer[3][0].shape, buffer[3][1].shape, buffer[5][0].shape, buffer[5][1].shape)", "\n", "# yield buffer[0][0], buffer[0][1], buffer[1], buffer[2], buffer[3], buffer[4], buffer[5], buffer[6]", "\n", "                ", "if", "len", "(", "buffer", "[", "3", "]", "[", "0", "]", ")", "<", "len", "(", "buffer", "[", "3", "]", "[", "1", "]", ")", ":", "\n", "# make sure the second batch is less.", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "buffer", ")", ")", ":", "\n", "                        ", "tmp", "=", "buffer", "[", "i", "]", "[", "0", "]", "\n", "buffer", "[", "i", "]", "[", "0", "]", "=", "buffer", "[", "i", "]", "[", "1", "]", "\n", "buffer", "[", "i", "]", "[", "1", "]", "=", "tmp", "\n", "\n", "", "", "buffer", "[", "3", "]", "[", "1", "]", "[", ":", ",", "0", "]", "=", "1", "\n", "buffer", "[", "4", "]", "[", "1", "]", "[", ":", ",", "0", "]", "=", "1", "\n", "# print(\"inner hint:\", buffer[1], 'num_pos:', buffer[2], 'len of h boxes:',len(buffer[3][0]), len(buffer[3][1]),", "\n", "#       len(buffer[4][0]), len(buffer[4][1]), len(buffer[5][0]), len(buffer[5][1]), len(buffer[6][0]), len(buffer[6][1]))", "\n", "\n", "if", "model_name", ".", "__contains__", "(", "'x5new'", ")", ":", "\n", "                    ", "pos1", "=", "int", "(", "buffer", "[", "2", "]", "[", "0", "]", "+", "(", "len", "(", "buffer", "[", "3", "]", "[", "0", "]", ")", "-", "buffer", "[", "2", "]", "[", "0", "]", ")", "//", "8", ")", "\n", "pos2", "=", "int", "(", "buffer", "[", "2", "]", "[", "1", "]", "+", "(", "len", "(", "buffer", "[", "3", "]", "[", "1", "]", ")", "-", "buffer", "[", "2", "]", "[", "1", "]", ")", "//", "8", ")", "\n", "", "else", ":", "\n", "                    ", "pos1", "=", "buffer", "[", "2", "]", "[", "0", "]", "\n", "pos2", "=", "buffer", "[", "2", "]", "[", "1", "]", "\n", "\n", "", "for", "ii", "in", "list", "(", "range", "(", "3", ",", "7", ")", ")", ":", "\n", "                    ", "pos_h_boxes", "=", "np", ".", "concatenate", "(", "[", "buffer", "[", "ii", "]", "[", "0", "]", "[", ":", "pos1", "]", ",", "buffer", "[", "ii", "]", "[", "1", "]", "[", ":", "pos2", "]", "]", ",", "axis", "=", "0", ")", "\n", "neg_h_boxes", "=", "np", ".", "concatenate", "(", "[", "buffer", "[", "ii", "]", "[", "0", "]", "[", "pos1", ":", "]", ",", "buffer", "[", "ii", "]", "[", "1", "]", "[", "pos2", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "buffer", "[", "ii", "]", "=", "np", ".", "concatenate", "(", "[", "pos_h_boxes", ",", "neg_h_boxes", "]", ",", "axis", "=", "0", ")", "\n", "# buffer[ii] = np.concatenate([buffer[ii][0], buffer[ii][1]], axis=0)", "\n", "\n", "", "buffer", "=", "buffer", "[", ":", "-", "1", "]", "+", "buffer", "[", "-", "1", ":", "]", "\n", "\n", "im_shape1", "=", "buffer", "[", "0", "]", "[", "0", "]", ".", "shape", "\n", "im_shape2", "=", "buffer", "[", "0", "]", "[", "1", "]", ".", "shape", "\n", "width", "=", "max", "(", "im_shape1", "[", "1", "]", ",", "im_shape2", "[", "1", "]", ")", "\n", "height", "=", "max", "(", "im_shape1", "[", "2", "]", ",", "im_shape2", "[", "2", "]", ")", "\n", "im1", "=", "np", ".", "pad", "(", "buffer", "[", "0", "]", "[", "0", "]", ",", "\n", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "max", "(", "0", ",", "width", "-", "im_shape1", "[", "1", "]", ")", ")", ",", "(", "0", ",", "max", "(", "0", ",", "height", "-", "im_shape1", "[", "2", "]", ")", ")", ",", "(", "0", ",", "0", ")", "]", ",", "\n", "mode", "=", "'constant'", ")", "\n", "im2", "=", "np", ".", "pad", "(", "buffer", "[", "0", "]", "[", "1", "]", ",", "\n", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "max", "(", "0", ",", "width", "-", "im_shape2", "[", "1", "]", ")", ")", ",", "(", "0", ",", "max", "(", "0", ",", "height", "-", "im_shape2", "[", "2", "]", ")", ")", ",", "(", "0", ",", "0", ")", "]", ",", "\n", "mode", "=", "'constant'", ")", "\n", "\n", "\n", "split_idx", "=", "pos1", "\n", "yield", "np", ".", "concatenate", "(", "[", "im1", ",", "im2", "]", ",", "axis", "=", "0", ")", ",", "buffer", "[", "1", "]", ",", "pos1", "+", "pos2", ",", "buffer", "[", "3", "]", ",", "buffer", "[", "4", "]", ",", "buffer", "[", "5", "]", ",", "buffer", "[", "6", "]", ",", "split_idx", "\n", "\n", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "7", ")", "]", "\n", "# avg_time = ((time.time() - st) + avg_time * count_time) / (count_time + 1)", "\n", "# count_time += 1", "\n", "# print('generate batch:', time.time() - st, \"average;\",  avg_time)", "\n", "# st = time.time()", "\n", "\n", "", "", "", "if", "pattern_type", "==", "1", ":", "\n", "        ", "pattern_channel", "=", "3", "\n", "", "else", ":", "\n", "        ", "pattern_channel", "=", "2", "\n", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "\n", "partial", "(", "generator3", ",", "Trainval_GT", ",", "Trainval_N", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ")", ",", "\n", "output_types", "=", "(", "\n", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int64", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "int32", ")", ",", "\n", "output_shapes", "=", "(", "\n", "tf", ".", "TensorShape", "(", "[", "2", ",", "None", ",", "None", ",", "3", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "2", ",", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "600", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "pattern_channel", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", "\n", "# tf.TensorShape([2, None, None, None, 1])", "\n", ")", "\n", ")", "\n", "# dataset = tf.data.Dataset.from_generator(gen, output_types=(tf.float32, tf.int32),", "\n", "#                                          output_shapes=(tf.TensorShape([1, None, None, 3]), tf.TensorShape([])))", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.shuffle(1000)", "\n", "# dataset = dataset.repeat(100)", "\n", "# dataset = dataset.repeat(1000).shuffle(1000)", "\n", "# dataset._dataset.batch(3)", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "sp", ",", "split_idx", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "image", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "sp", ",", "split_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_new_Trainval_GT": [[1127, 1136], ["set", "len", "new_Trainval_GT.append", "set().intersection", "set", "list"], "function", ["None"], ["", "def", "get_new_Trainval_GT", "(", "Trainval_GT", ",", "is_zero_shot", ",", "unseen_idx", ")", ":", "\n", "    ", "unseen_idx", "=", "set", "(", "unseen_idx", ")", "\n", "if", "is_zero_shot", ">", "0", ":", "\n", "        ", "new_Trainval_GT", "=", "[", "]", "\n", "for", "item", "in", "Trainval_GT", ":", "\n", "            ", "if", "len", "(", "set", "(", "list", "(", "item", "[", "1", "]", ")", ")", ".", "intersection", "(", "unseen_idx", ")", ")", "==", "0", ":", "\n", "                ", "new_Trainval_GT", ".", "append", "(", "item", ")", "\n", "", "", "Trainval_GT", "=", "new_Trainval_GT", "\n", "", "return", "Trainval_GT", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.extract_semi_data": [[1138, 1242], ["print", "pickle.load", "pickle.load", "get_new_Trainval_GT.extend", "open", "open", "pickle.load", "pickle.load", "get_new_Trainval_GT.extend", "open", "open", "pickle.load", "pickle.load", "ult.get_zero_shot_type", "ult.get_unseen_index", "print", "print", "print", "print", "get_new_Trainval_GT.extend", "open", "open", "len", "len", "type", "pickle.load", "ult.get_zero_shot_type", "ult.get_unseen_index", "print", "print", "new_semi.append", "open", "type", "pickle.load", "pickle.load", "get_new_Trainval_GT.extend", "len", "len", "new_semi.append", "open", "open", "open", "pickle.load", "model_name.__contains__", "ult.get_zero_shot_type", "ult.get_unseen_index", "ult.get_new_Trainval_GT", "list", "len", "len", "set().intersection", "list", "set", "set().intersection", "set", "set", "set"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_zero_shot_type", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_unseen_index", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_zero_shot_type", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_unseen_index", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_zero_shot_type", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_unseen_index", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_new_Trainval_GT"], ["", "def", "extract_semi_data", "(", "semi_type", ",", "model_name", ")", ":", "\n", "    ", "print", "(", "semi_type", ",", "'==========='", ")", "\n", "semi_pkl_path", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", "\n", "if", "semi_type", "==", "'default'", ":", "\n", "        ", "semi_pkl_path", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", "\n", "", "elif", "semi_type", "==", "'coco'", ":", "\n", "        ", "semi_pkl_path", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO_semi.pkl'", "\n", "", "elif", "semi_type", "==", "'coco2'", ":", "\n", "        ", "semi_pkl_path", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO_semi_coco2.pkl'", "\n", "", "elif", "semi_type", "==", "'coco1'", ":", "# train2017", "\n", "        ", "semi_pkl_path", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO_semi1.pkl'", "\n", "", "elif", "semi_type", "==", "'rehico'", ":", "\n", "        ", "semi_pkl_path", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", "\n", "", "elif", "semi_type", "==", "'vcoco'", ":", "\n", "        ", "semi_pkl_path", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO_vcoco_semi.pkl'", "\n", "", "if", "semi_type", "==", "'both'", ":", "\n", "        ", "Trainval_semi", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO_semi.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "Trainval_semi1", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "# Trainval_semi = Trainval_semi[:5000]", "\n", "for", "item", "in", "Trainval_semi", ":", "\n", "            ", "item", "[", "0", "]", "+=", "MAX_HICO_ID", "\n", "\n", "", "Trainval_semi", ".", "extend", "(", "Trainval_semi1", ")", "\n", "", "elif", "semi_type", "==", "'both1'", ":", "\n", "        ", "Trainval_semi", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO_vcoco_semi.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "Trainval_semi1", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "for", "item", "in", "Trainval_semi", ":", "\n", "            ", "item", "[", "0", "]", "+=", "MAX_HICO_ID", "\n", "", "Trainval_semi", ".", "extend", "(", "Trainval_semi1", ")", "\n", "pass", "\n", "\n", "", "elif", "semi_type", "==", "'bothzs'", ":", "\n", "        ", "Trainval_semi", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO_semi.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "Trainval_semi1", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "# ids1 = [item[0] for item in Trainval_semi]", "\n", "# ids2 = [item[0] for item in Trainval_semi1]", "\n", "# ids = set(ids1).intersection(set(ids2))", "\n", "# Trainval_semi = [item for item in Trainval_semi if item[0] not in ids]", "\n", "zero_shot_type", "=", "get_zero_shot_type", "(", "model_name", ")", "\n", "unseen_idx", "=", "get_unseen_index", "(", "zero_shot_type", ")", "\n", "print", "(", "unseen_idx", ")", "\n", "new_semi", "=", "[", "]", "\n", "print", "(", "len", "(", "Trainval_semi", ")", ")", "# 604907", "\n", "\n", "for", "item", "in", "Trainval_semi", ":", "\n", "            ", "item", "[", "0", "]", "+=", "MAX_HICO_ID", "\n", "# print(item)", "\n", "if", "len", "(", "item", "[", "1", "]", ")", ">", "0", "and", "len", "(", "list", "(", "set", "(", "item", "[", "1", "]", ")", ".", "intersection", "(", "set", "(", "unseen_idx", ")", ")", ")", ")", ">", "0", ":", "\n", "                ", "new_semi", ".", "append", "(", "item", ")", "\n", "", "", "print", "(", "len", "(", "new_semi", ")", ",", "'bothzs semi'", ")", "# 524239 bothzs semi zs3   517008 bothzs semi zs4", "\n", "\n", "print", "(", "type", "(", "Trainval_semi", ")", ")", "\n", "Trainval_semi", "=", "new_semi", "\n", "Trainval_semi", ".", "extend", "(", "Trainval_semi1", ")", "\n", "", "elif", "semi_type", "==", "'cocozs'", ":", "\n", "        ", "Trainval_semi", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO_semi1.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "# ids1 = [item[0] for item in Trainval_semi]", "\n", "# ids2 = [item[0] for item in Trainval_semi1]", "\n", "# ids = set(ids1).intersection(set(ids2))", "\n", "# Trainval_semi = [item for item in Trainval_semi if item[0] not in ids]", "\n", "zero_shot_type", "=", "get_zero_shot_type", "(", "model_name", ")", "\n", "unseen_idx", "=", "get_unseen_index", "(", "zero_shot_type", ")", "\n", "\n", "# Trainval_semi1 = [item for item in Trainval_semi1 if len(list(set(item[1]).intersection(set(unseen_idx)))) == 0] # remove unseen objects.", "\n", "\n", "print", "(", "unseen_idx", ")", "\n", "new_semi", "=", "[", "]", "\n", "for", "item", "in", "Trainval_semi", ":", "\n", "            ", "item", "[", "0", "]", "+=", "MAX_HICO_ID", "\n", "# print(item)", "\n", "if", "len", "(", "item", "[", "1", "]", ")", ">", "0", "and", "len", "(", "list", "(", "set", "(", "item", "[", "1", "]", ")", ".", "intersection", "(", "set", "(", "unseen_idx", ")", ")", ")", ")", ">", "0", ":", "\n", "                ", "new_semi", ".", "append", "(", "item", ")", "\n", "\n", "", "", "print", "(", "type", "(", "Trainval_semi", ")", ")", "\n", "Trainval_semi", "=", "new_semi", "\n", "", "elif", "semi_type", "==", "'coco3'", ":", "\n", "        ", "Trainval_semi", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO_semi1.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "Trainval_semi1", "=", "pickle", ".", "load", "(", "\n", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO_obj365_coco_semi_obj365_coco.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "for", "item", "in", "Trainval_semi", ":", "\n", "            ", "item", "[", "0", "]", "+=", "MAX_HICO_ID", "\n", "", "for", "item", "in", "Trainval_semi1", ":", "\n", "            ", "item", "[", "0", "]", "+=", "MAX_COCO_ID", "\n", "\n", "", "Trainval_semi", ".", "extend", "(", "Trainval_semi1", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "semi_pkl_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "Trainval_semi", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "", "if", "semi_type", "==", "'coco'", "or", "semi_type", "==", "'coco2'", "or", "semi_type", "==", "'coco1'", "or", "semi_type", "==", "'vcoco'", ":", "\n", "            ", "for", "item", "in", "Trainval_semi", ":", "\n", "                ", "item", "[", "0", "]", "+=", "MAX_HICO_ID", "\n", "", "", "if", "semi_type", "==", "'rehico'", "and", "model_name", ".", "__contains__", "(", "'_zs11'", ")", ":", "\n", "            ", "zero_shot_type", "=", "get_zero_shot_type", "(", "model_name", ")", "\n", "unseen_idx", "=", "get_unseen_index", "(", "zero_shot_type", ")", "\n", "Trainval_semi", "=", "get_new_Trainval_GT", "(", "Trainval_semi", ",", "zero_shot_type", ",", "unseen_idx", ")", "\n", "# Trainval_semi = [item for item in Trainval_semi if", "\n", "#                   len(list(set(item[1]).intersection(set(unseen_idx)))) == 0]  # remove unseen objects.", "\n", "\n", "pass", "\n", "", "", "return", "Trainval_semi", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.obtain_batch_data_semi1": [[1357, 1479], ["ult.extract_semi_data", "tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "len", "open", "pickle.load", "open", "pickle.load", "time.time", "ult.generator2", "g_func", "functools.partial", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "range", "model_name.__contains__", "range", "max", "max", "range", "max", "max", "range", "next", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "int", "range", "range", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "im_list.append", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "len", "len", "len", "pos_semi_list.append", "pos_semi_list.append", "numpy.pad", "numpy.concatenate", "range", "int", "range", "range", "range", "range", "sum", "len", "enumerate", "enumerate", "max", "max", "len"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.extract_semi_data", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.generator2"], ["", "def", "obtain_batch_data_semi1", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "60", ",", "augment_type", "=", "0", ",", "model_name", "=", "''", ",", "pattern_type", "=", "0", ",", "\n", "zero_shot_type", "=", "0", ",", "isalign", "=", "False", ",", "epoch", "=", "0", ",", "semi_type", "=", "'default'", ",", "bnum", "=", "2", ",", "neg_type_ratio", "=", "0", ")", ":", "\n", "    ", "assert", "len", "(", "model_name", ")", ">", "1", ",", "model_name", "\n", "\n", "with", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "Trainval_GT", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "Trainval_semi", "=", "extract_semi_data", "(", "semi_type", ",", "model_name", ")", "\n", "with", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_Neg_HICO.pkl'", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "Trainval_N", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "", "g_func", "=", "generator2", "\n", "\n", "def", "generator3", "(", "Trainval_GT", ",", "Trainval_N", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ")", ":", "\n", "        ", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "7", ")", "]", "\n", "import", "time", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "count_time", "=", "0", "\n", "avg_time", "=", "0", "\n", "# np.random.seed(0)", "\n", "semi_g", "=", "generator2", "(", "Trainval_semi", ",", "{", "}", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "False", ",", "zero_shot_type", ",", "isalign", ",", "\n", "epoch", ",", ")", "\n", "for", "im_orig", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "Pattern", "in", "g_func", "(", "Trainval_GT", ",", "Trainval_N", ",", "Pos_augment", ",", "Neg_select", ",", "\n", "augment_type", ",", "\n", "pattern_type", ",", "zero_shot_type", ",", "False", ",", "epoch", ",", "\n", ")", ":", "\n", "            ", "buffer", "[", "0", "]", ".", "append", "(", "im_orig", ")", "\n", "buffer", "[", "1", "]", ".", "append", "(", "image_id", ")", "\n", "buffer", "[", "2", "]", ".", "append", "(", "num_pos", ")", "\n", "buffer", "[", "3", "]", ".", "append", "(", "Human_augmented", ")", "\n", "buffer", "[", "4", "]", ".", "append", "(", "Object_augmented", ")", "\n", "buffer", "[", "5", "]", ".", "append", "(", "action_HO", ")", "\n", "buffer", "[", "6", "]", ".", "append", "(", "Pattern", ")", "\n", "for", "b", "in", "range", "(", "bnum", ")", ":", "\n", "                ", "im_orig", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "Pattern", ",", "=", "next", "(", "semi_g", ")", "\n", "buffer", "[", "0", "]", ".", "append", "(", "im_orig", ")", "\n", "buffer", "[", "1", "]", ".", "append", "(", "image_id", ")", "\n", "buffer", "[", "2", "]", ".", "append", "(", "num_pos", ")", "\n", "buffer", "[", "3", "]", ".", "append", "(", "Human_augmented", ")", "\n", "buffer", "[", "4", "]", ".", "append", "(", "Object_augmented", ")", "\n", "buffer", "[", "5", "]", ".", "append", "(", "action_HO", ")", "\n", "buffer", "[", "6", "]", ".", "append", "(", "Pattern", ")", "\n", "buffer", "[", "3", "]", "[", "b", "+", "1", "]", "[", ":", ",", "0", "]", "=", "b", "+", "1", "\n", "buffer", "[", "4", "]", "[", "b", "+", "1", "]", "[", ":", ",", "0", "]", "=", "b", "+", "1", "\n", "assert", "num_pos", "==", "len", "(", "Human_augmented", ")", "\n", "# print(buffer[3])", "\n", "\n", "# print(len(buffer[0]))", "\n", "# print(\"inner hint:\", buffer[1], 'num_pos:', buffer[2], 'len of h boxes:',len(buffer[3][0]), len(buffer[3][1]),", "\n", "#       len(buffer[4][0]), len(buffer[4][1]), len(buffer[5][0]), len(buffer[5][1]), len(buffer[6][0]), len(buffer[6][1]))", "\n", "", "pos_semi_list", "=", "[", "]", "\n", "if", "model_name", ".", "__contains__", "(", "'x5new'", ")", ":", "\n", "                ", "pos1", "=", "int", "(", "buffer", "[", "2", "]", "[", "0", "]", "+", "(", "len", "(", "buffer", "[", "3", "]", "[", "0", "]", ")", "-", "buffer", "[", "2", "]", "[", "0", "]", ")", "//", "8", ")", "\n", "assert", "len", "(", "buffer", "[", "3", "]", "[", "1", "]", ")", "==", "buffer", "[", "2", "]", "[", "1", "]", ",", "(", "len", "(", "buffer", "[", "3", "]", "[", "1", "]", ")", ",", "buffer", "[", "2", "]", "[", "1", "]", ",", ")", "\n", "# print(pos1, (len(buffer[3][b+1]) - buffer[2][b+1]) // 8)", "\n", "for", "b", "in", "range", "(", "bnum", ")", ":", "\n", "                    ", "pos_semi_list", ".", "append", "(", "int", "(", "buffer", "[", "2", "]", "[", "b", "+", "1", "]", "+", "(", "len", "(", "buffer", "[", "3", "]", "[", "b", "+", "1", "]", ")", "-", "buffer", "[", "2", "]", "[", "b", "+", "1", "]", ")", "//", "8", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "pos1", "=", "buffer", "[", "2", "]", "[", "0", "]", "\n", "for", "b", "in", "range", "(", "bnum", ")", ":", "\n", "                    ", "pos_semi_list", ".", "append", "(", "buffer", "[", "2", "]", "[", "b", "+", "1", "]", ")", "\n", "# print('before', buffer[3])", "\n", "", "", "for", "ii", "in", "range", "(", "3", ",", "7", ")", ":", "\n", "                ", "pos_h_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "buffer", "[", "ii", "]", "[", "0", "]", "[", ":", "pos1", "]", "]", "+", "[", "buffer", "[", "ii", "]", "[", "pi", "+", "1", "]", "[", ":", "pos2", "]", "for", "pi", ",", "pos2", "in", "enumerate", "(", "pos_semi_list", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "neg_h_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "buffer", "[", "ii", "]", "[", "0", "]", "[", "pos1", ":", "]", "]", "+", "[", "buffer", "[", "ii", "]", "[", "pi", "+", "1", "]", "[", "pos2", ":", "]", "for", "pi", ",", "pos2", "in", "enumerate", "(", "pos_semi_list", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "buffer", "[", "ii", "]", "=", "np", ".", "concatenate", "(", "[", "pos_h_boxes", ",", "neg_h_boxes", "]", ",", "axis", "=", "0", ")", "\n", "# buffer[ii] = np.concatenate([buffer[ii][0], buffer[ii][1]], axis=0)", "\n", "# print('after', buffer[3])", "\n", "", "width", "=", "max", "(", "[", "buffer", "[", "0", "]", "[", "b", "]", ".", "shape", "[", "1", "]", "for", "b", "in", "range", "(", "bnum", "+", "1", ")", "]", ")", "\n", "height", "=", "max", "(", "[", "buffer", "[", "0", "]", "[", "b", "]", ".", "shape", "[", "2", "]", "for", "b", "in", "range", "(", "bnum", "+", "1", ")", "]", ")", "\n", "\n", "im_list", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "bnum", "+", "1", ")", ":", "\n", "                ", "im_list", ".", "append", "(", "np", ".", "pad", "(", "buffer", "[", "0", "]", "[", "b", "]", ",", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "max", "(", "0", ",", "width", "-", "buffer", "[", "0", "]", "[", "b", "]", ".", "shape", "[", "1", "]", ")", ")", ",", "\n", "(", "0", ",", "max", "(", "0", ",", "height", "-", "buffer", "[", "0", "]", "[", "b", "]", ".", "shape", "[", "2", "]", ")", ")", ",", "(", "0", ",", "0", ")", "]", ",", "\n", "mode", "=", "'constant'", ")", ")", "\n", "\n", "", "width", "=", "max", "(", "[", "buffer", "[", "7", "]", "[", "b", "]", ".", "shape", "[", "1", "]", "for", "b", "in", "range", "(", "bnum", "+", "1", ")", "]", ")", "\n", "height", "=", "max", "(", "[", "buffer", "[", "7", "]", "[", "b", "]", ".", "shape", "[", "2", "]", "for", "b", "in", "range", "(", "bnum", "+", "1", ")", "]", ")", "\n", "\n", "split_idx", "=", "pos1", "\n", "yield", "np", ".", "concatenate", "(", "im_list", ",", "axis", "=", "0", ")", ",", "buffer", "[", "1", "]", ",", "pos1", "+", "sum", "(", "pos_semi_list", ")", ",", "buffer", "[", "3", "]", ",", "buffer", "[", "4", "]", ",", "buffer", "[", "5", "]", ",", "buffer", "[", "6", "]", ",", "split_idx", "\n", "\n", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "7", ")", "]", "\n", "# avg_time = ((time.time() - st) + avg_time * count_time) / (count_time + 1)", "\n", "# count_time += 1", "\n", "# print('generate batch:', time.time() - st, \"average;\",  avg_time)", "\n", "# st = time.time()", "\n", "\n", "", "", "pattern_channel", "=", "2", "\n", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "\n", "partial", "(", "generator3", ",", "Trainval_GT", ",", "Trainval_N", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ")", ",", "\n", "output_types", "=", "(", "\n", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int64", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "int32", ")", ",", "\n", "output_shapes", "=", "(", "\n", "tf", ".", "TensorShape", "(", "[", "bnum", "+", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "bnum", "+", "1", ",", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "600", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "pattern_channel", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", "\n", "# tf.TensorShape([2, None, None, None, 1])", "\n", ")", "\n", ")", "\n", "# dataset = tf.data.Dataset.from_generator(gen, output_types=(tf.float32, tf.int32),", "\n", "#                                          output_shapes=(tf.TensorShape([1, None, None, 3]), tf.TensorShape([])))", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.shuffle(1000)", "\n", "# dataset = dataset.repeat(100)", "\n", "# dataset = dataset.repeat(1000).shuffle(1000)", "\n", "# dataset._dataset.batch(3)", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "sp", ",", "split_idx", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "image", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "sp", ",", "split_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_HO_Neg_HICO2": [[1481, 1553], ["ult.Generate_action_HICO", "ult.Augmented_box", "ult.Augmented_box", "len", "range", "len", "numpy.empty", "range", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "numpy.concatenate", "ult.Get_next_sp", "Pattern_.reshape.reshape", "numpy.concatenate", "len", "numpy.concatenate", "len", "numpy.concatenate", "min", "min", "len", "len", "len", "random.sample", "range", "len", "len", "len", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "range", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "pose_list.append", "len", "pose_list.append", "numpy.array().reshape", "numpy.array().reshape", "ult.Generate_action_HICO", "numpy.array().reshape", "numpy.array().reshape", "ult.Generate_action_HICO", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "len"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action_HICO", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_box", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_box", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action_HICO", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action_HICO"], ["", "def", "Augmented_HO_Neg_HICO2", "(", "GT", ",", "Trainval_Neg", ",", "shape", ",", "Pos_augment", ",", "Neg_select", ",", "pose_type", "=", "0", ",", "isalign", "=", "False", ")", ":", "\n", "    ", "image_id", "=", "GT", "[", "0", "]", "\n", "Human", "=", "GT", "[", "2", "]", "\n", "Object", "=", "GT", "[", "3", "]", "\n", "\n", "action_HO_", "=", "Generate_action_HICO", "(", "GT", "[", "1", "]", ")", "\n", "action_HO", "=", "action_HO_", "\n", "\n", "Human_augmented", "=", "Augmented_box", "(", "Human", ",", "shape", ",", "image_id", ",", "Pos_augment", ")", "\n", "Object_augmented", "=", "Augmented_box", "(", "Object", ",", "shape", ",", "image_id", ",", "Pos_augment", ")", "\n", "if", "isalign", ":", "\n", "        ", "while", "len", "(", "Human_augmented", ")", "<", "Pos_augment", "+", "1", ":", "\n", "            ", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "[", "Human_augmented", ",", "Human_augmented", "[", "-", "(", "Pos_augment", "+", "1", "-", "len", "(", "Human_augmented", ")", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "if", "isalign", ":", "\n", "        ", "while", "len", "(", "Object_augmented", ")", "<", "Pos_augment", "+", "1", ":", "\n", "            ", "Object_augmented", "=", "np", ".", "concatenate", "(", "\n", "[", "Object_augmented", ",", "Object_augmented", "[", "-", "(", "Pos_augment", "+", "1", "-", "len", "(", "Human_augmented", ")", ")", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "# print(\"shape:\", Human_augmented.shape, Object_augmented.shape)", "\n", "", "", "Human_augmented", "=", "Human_augmented", "[", ":", "min", "(", "len", "(", "Human_augmented", ")", ",", "len", "(", "Object_augmented", ")", ")", "]", "\n", "Object_augmented", "=", "Object_augmented", "[", ":", "min", "(", "len", "(", "Human_augmented", ")", ",", "len", "(", "Object_augmented", ")", ")", "]", "\n", "\n", "if", "isalign", ":", "\n", "        ", "assert", "len", "(", "Human_augmented", ")", "==", "Pos_augment", "+", "1", ",", "(", "len", "(", "Human_augmented", ")", ",", "Pos_augment", ")", "\n", "", "num_pos", "=", "len", "(", "Human_augmented", ")", "\n", "if", "pose_type", ">", "0", ":", "pose_list", "=", "[", "GT", "[", "5", "]", "]", "*", "num_pos", "\n", "for", "i", "in", "range", "(", "num_pos", "-", "1", ")", ":", "\n", "        ", "action_HO", "=", "np", ".", "concatenate", "(", "(", "action_HO", ",", "action_HO_", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "image_id", "in", "Trainval_Neg", ":", "\n", "\n", "        ", "if", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", "<", "Neg_select", ":", "\n", "            ", "for", "Neg", "in", "Trainval_Neg", "[", "image_id", "]", ":", "\n", "                ", "if", "pose_type", ">", "0", ":", "pose_list", ".", "append", "(", "Neg", "[", "7", "]", ")", "\n", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Human_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "2", "]", "[", "0", "]", ",", "Neg", "[", "2", "]", "[", "1", "]", ",", "Neg", "[", "2", "]", "[", "2", "]", ",", "Neg", "[", "2", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Object_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "3", "]", "[", "0", "]", ",", "Neg", "[", "3", "]", "[", "1", "]", ",", "Neg", "[", "3", "]", "[", "2", "]", ",", "Neg", "[", "3", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "action_HO", "=", "np", ".", "concatenate", "(", "(", "action_HO", ",", "Generate_action_HICO", "(", "[", "Neg", "[", "1", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "List", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", ")", ",", "len", "(", "Trainval_Neg", "[", "image_id", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "Neg_select", ")", ":", "\n", "                ", "Neg", "=", "Trainval_Neg", "[", "image_id", "]", "[", "List", "[", "i", "]", "]", "\n", "if", "pose_type", ">", "0", ":", "pose_list", ".", "append", "(", "Neg", "[", "7", "]", ")", "\n", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Human_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "2", "]", "[", "0", "]", ",", "Neg", "[", "2", "]", "[", "1", "]", ",", "Neg", "[", "2", "]", "[", "2", "]", ",", "Neg", "[", "2", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Object_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "3", "]", "[", "0", "]", ",", "Neg", "[", "3", "]", "[", "1", "]", ",", "Neg", "[", "3", "]", "[", "2", "]", ",", "Neg", "[", "3", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "action_HO", "=", "np", ".", "concatenate", "(", "(", "action_HO", ",", "Generate_action_HICO", "(", "[", "Neg", "[", "1", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "num_pos_neg", "=", "len", "(", "Human_augmented", ")", "\n", "if", "pose_type", ">", "0", ":", "\n", "        ", "pattern_channel", "=", "3", "\n", "", "else", ":", "\n", "        ", "pattern_channel", "=", "2", "\n", "", "Pattern", "=", "np", ".", "empty", "(", "(", "0", ",", "64", ",", "64", ",", "pattern_channel", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_pos_neg", ")", ":", "\n", "# Pattern_ = Get_next_sp(Human_augmented[i][1:], Object_augmented[i][1:]).reshape(1, 64, 64, 2)", "\n", "# there are poses for the negative sample", "\n", "        ", "Pattern_", "=", "Get_next_sp", "(", "Human_augmented", "[", "i", "]", "[", "1", ":", "]", ",", "Object_augmented", "[", "i", "]", "[", "1", ":", "]", ")", "\n", "Pattern_", "=", "Pattern_", ".", "reshape", "(", "1", ",", "64", ",", "64", ",", "pattern_channel", ")", "\n", "Pattern", "=", "np", ".", "concatenate", "(", "(", "Pattern", ",", "Pattern_", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "Pattern", "=", "Pattern", ".", "reshape", "(", "num_pos_neg", ",", "64", ",", "64", ",", "pattern_channel", ")", "\n", "Human_augmented", "=", "Human_augmented", ".", "reshape", "(", "num_pos_neg", ",", "5", ")", "\n", "Object_augmented", "=", "Object_augmented", ".", "reshape", "(", "num_pos_neg", ",", "5", ")", "\n", "action_HO", "=", "action_HO", ".", "reshape", "(", "num_pos_neg", ",", "600", ")", "\n", "\n", "# print(\"shape1:\", Human_augmented.shape, Object_augmented.shape, num_pos, Neg_select)", "\n", "return", "Pattern", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "num_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.coco_generator1": [[1555, 1644], ["pickle.load", "pickle.load", "ult.get_aug_params", "list", "print", "enumerate", "list", "img_id_index_map.items", "open", "open", "range", "img_id_index_map.keys", "range", "copy.deepcopy", "numpy.random.shuffle", "copy.deepcopy.keys", "len", "img_id_index_map[].append", "list.append", "numpy.random.shuffle", "cv2.imread", "cv2.imread.astype", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "math.ceil", "os.path.exists", "print", "ult.Augmented_HO_spNeg", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "str().zfill", "len", "len", "str", "len"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_aug_params", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_HO_spNeg"], ["", "def", "coco_generator1", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "30", ",", "augment_type", "=", "0", ",", "with_pose", "=", "False", ",", "is_zero_shot", "=", "0", ")", ":", "\n", "    ", "Trainval_GT", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_VCOCO.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "Trainval_N", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_Neg_VCOCO.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "Neg_select1", ",", "Pos_augment1", ",", "inters_per_img", "=", "get_aug_params", "(", "Neg_select", ",", "Pos_augment", ",", "augment_type", ")", "\n", "index_list", "=", "list", "(", "range", "(", "0", ",", "len", "(", "Trainval_GT", ")", ")", ")", "\n", "print", "(", "\"generator1\"", ",", "inters_per_img", ",", "Pos_augment1", ",", "'Neg_select:'", ",", "Neg_select1", ",", "augment_type", ")", "\n", "import", "math", "\n", "img_id_index_map", "=", "{", "}", "\n", "for", "i", ",", "gt", "in", "enumerate", "(", "Trainval_GT", ")", ":", "\n", "        ", "img_id", "=", "gt", "[", "0", "]", "\n", "if", "img_id", "in", "img_id_index_map", ":", "\n", "            ", "img_id_index_map", "[", "img_id", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "            ", "img_id_index_map", "[", "img_id", "]", "=", "[", "i", "]", "\n", "", "", "img_id_list", "=", "list", "(", "img_id_index_map", ".", "keys", "(", ")", ")", "\n", "for", "k", ",", "v", "in", "img_id_index_map", ".", "items", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "math", ".", "ceil", "(", "len", "(", "v", ")", "*", "1.0", "/", "inters_per_img", ")", "-", "1", ")", ":", "\n", "            ", "img_id_list", ".", "append", "(", "k", ")", "\n", "", "", "import", "copy", "\n", "while", "True", ":", "\n", "        ", "running_map", "=", "copy", ".", "deepcopy", "(", "img_id_index_map", ")", "\n", "# print('Step: ', i)", "\n", "np", ".", "random", ".", "shuffle", "(", "index_list", ")", "\n", "for", "k", "in", "running_map", ".", "keys", "(", ")", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "running_map", "[", "k", "]", ")", "\n", "\n", "", "for", "img_id_tmp", "in", "img_id_list", ":", "\n", "            ", "gt_ids", "=", "running_map", "[", "img_id_tmp", "]", "[", ":", "inters_per_img", "]", "\n", "running_map", "[", "img_id_tmp", "]", "=", "running_map", "[", "img_id_tmp", "]", "[", "inters_per_img", ":", "]", "\n", "\n", "image_id", "=", "img_id_tmp", "\n", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/coco/images/train2014/COCO_train2014_'", "+", "(", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "\n", "12", ")", "+", "'.jpg'", "\n", "import", "os", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "im_file", ")", ":", "\n", "                ", "print", "(", "'not exist'", ",", "im_file", ")", "\n", "", "import", "cv2", "\n", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "im_orig", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "True", ")", "\n", "im_orig", "-=", "cfg", ".", "PIXEL_MEANS", "\n", "im_shape", "=", "im", ".", "shape", "\n", "\n", "blobs", "=", "{", "}", "\n", "blobs", "[", "'H_boxes'", "]", "=", "np", ".", "empty", "(", "[", "0", ",", "5", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "[", "'Hsp_boxes'", "]", "=", "np", ".", "empty", "(", "[", "0", ",", "5", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "[", "'O_boxes'", "]", "=", "np", ".", "empty", "(", "[", "0", ",", "5", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "[", "'gt_class_sp'", "]", "=", "np", ".", "empty", "(", "[", "0", ",", "29", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "[", "'gt_class_HO'", "]", "=", "np", ".", "empty", "(", "[", "0", ",", "29", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "[", "'gt_class_H'", "]", "=", "np", ".", "empty", "(", "[", "0", ",", "29", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "[", "'gt_class_C'", "]", "=", "np", ".", "empty", "(", "[", "0", ",", "238", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "[", "'Mask_sp'", "]", "=", "np", ".", "empty", "(", "[", "0", ",", "29", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "[", "'Mask_HO'", "]", "=", "np", ".", "empty", "(", "[", "0", ",", "29", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "[", "'Mask_H'", "]", "=", "np", ".", "empty", "(", "[", "0", ",", "29", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "[", "'sp'", "]", "=", "np", ".", "empty", "(", "[", "0", ",", "64", ",", "64", ",", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "gt_ids", ":", "\n", "                ", "GT", "=", "Trainval_GT", "[", "i", "]", "\n", "assert", "GT", "[", "0", "]", "==", "image_id", "\n", "\n", "# im_orig = im_orig.reshape(1, im_shape[0], im_shape[1], 3)", "\n", "cur_neg_select", "=", "Neg_select1", "\n", "cur_pos_augment", "=", "Pos_augment1", "\n", "if", "augment_type", ">", "1", ":", "\n", "                    ", "if", "i", "==", "gt_ids", "[", "-", "1", "]", ":", "\n", "                        ", "cur_neg_select", "=", "Neg_select1", "*", "len", "(", "gt_ids", ")", "\n", "", "else", ":", "\n", "                        ", "cur_neg_select", "=", "0", "\n", "", "", "else", ":", "\n", "                    ", "cur_neg_select", "=", "Neg_select1", "\n", "", "Pattern", ",", "Human_augmented_sp", ",", "Human_augmented", ",", "Object_augmented", ",", "action_sp", ",", "action_HO", ",", "action_H", ",", "mask_sp", ",", "mask_HO", ",", "mask_H", ",", "action_compose", "=", "Augmented_HO_spNeg", "(", "GT", ",", "\n", "Trainval_N", ",", "\n", "im_shape", ",", "\n", "Pos_augment", "=", "cur_pos_augment", ",", "\n", "Neg_select", "=", "cur_neg_select", ")", "\n", "\n", "# blobs['image'] = im_orig", "\n", "blobs", "[", "'H_boxes'", "]", "=", "np", ".", "concatenate", "(", "(", "blobs", "[", "'H_boxes'", "]", ",", "Human_augmented", ")", ",", "axis", "=", "0", ")", "\n", "blobs", "[", "'Hsp_boxes'", "]", "=", "np", ".", "concatenate", "(", "(", "blobs", "[", "'Hsp_boxes'", "]", ",", "Human_augmented_sp", ")", ",", "axis", "=", "0", ")", "\n", "blobs", "[", "'O_boxes'", "]", "=", "np", ".", "concatenate", "(", "(", "blobs", "[", "'O_boxes'", "]", ",", "Object_augmented", ")", ",", "axis", "=", "0", ")", "\n", "blobs", "[", "'gt_class_sp'", "]", "=", "np", ".", "concatenate", "(", "(", "blobs", "[", "'gt_class_sp'", "]", ",", "action_sp", ")", ",", "axis", "=", "0", ")", "\n", "blobs", "[", "'gt_class_HO'", "]", "=", "np", ".", "concatenate", "(", "(", "blobs", "[", "'gt_class_HO'", "]", ",", "action_HO", ")", ",", "axis", "=", "0", ")", "\n", "blobs", "[", "'gt_class_H'", "]", "=", "np", ".", "concatenate", "(", "(", "blobs", "[", "'gt_class_H'", "]", ",", "action_H", ")", ",", "axis", "=", "0", ")", "\n", "blobs", "[", "'gt_class_C'", "]", "=", "np", ".", "concatenate", "(", "(", "blobs", "[", "'gt_class_C'", "]", ",", "action_compose", ")", ",", "axis", "=", "0", ")", "\n", "blobs", "[", "'Mask_sp'", "]", "=", "np", ".", "concatenate", "(", "(", "blobs", "[", "'Mask_sp'", "]", ",", "mask_sp", ")", ",", "axis", "=", "0", ")", "\n", "blobs", "[", "'Mask_HO'", "]", "=", "np", ".", "concatenate", "(", "(", "blobs", "[", "'Mask_HO'", "]", ",", "mask_HO", ")", ",", "axis", "=", "0", ")", "\n", "blobs", "[", "'Mask_H'", "]", "=", "np", ".", "concatenate", "(", "(", "blobs", "[", "'Mask_H'", "]", ",", "mask_H", ")", ",", "axis", "=", "0", ")", "\n", "blobs", "[", "'sp'", "]", "=", "np", ".", "concatenate", "(", "(", "blobs", "[", "'sp'", "]", ",", "Pattern", ")", ",", "axis", "=", "0", ")", "\n", "", "yield", "(", "im_orig", ",", "image_id", ",", "len", "(", "blobs", "[", "'gt_class_H'", "]", ")", ",", "blobs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.coco_generator": [[1646, 1711], ["pickle.load", "pickle.load", "list", "open", "open", "range", "numpy.random.shuffle", "len", "cv2.imread", "cv2.imread.astype", "im_orig.reshape.reshape", "ult.Augmented_HO_spNeg", "str().zfill", "len", "str"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_HO_spNeg"], ["", "", "", "def", "coco_generator", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "30", ",", "augment_type", "=", "0", ",", "with_pose", "=", "False", ",", "is_zero_shot", "=", "0", ")", ":", "\n", "    ", "Trainval_GT", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_VCOCO_with_pose_obj.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "Trainval_N", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_Neg_VCOCO_with_pose_obj.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "i", "=", "0", "\n", "index_list", "=", "list", "(", "range", "(", "0", ",", "len", "(", "Trainval_GT", ")", ")", ")", "\n", "set_list", "=", "[", "(", "0", ",", "38", ")", ",", "(", "1", ",", "31", ")", ",", "(", "1", ",", "32", ")", ",", "(", "2", ",", "43", ")", ",", "(", "2", ",", "44", ")", ",", "(", "2", ",", "77", ")", ",", "(", "4", ",", "1", ")", ",", "(", "4", ",", "19", ")", ",", "(", "4", ",", "28", ")", ",", "(", "4", ",", "46", ")", ",", "(", "4", ",", "47", ")", ",", "\n", "(", "4", ",", "48", ")", ",", "(", "4", ",", "49", ")", ",", "(", "4", ",", "51", ")", ",", "(", "4", ",", "52", ")", ",", "(", "4", ",", "54", ")", ",", "(", "4", ",", "55", ")", ",", "(", "4", ",", "56", ")", ",", "(", "5", ",", "2", ")", ",", "(", "5", ",", "3", ")", ",", "(", "5", ",", "4", ")", ",", "(", "5", ",", "6", ")", ",", "(", "5", ",", "7", ")", ",", "\n", "(", "5", ",", "8", ")", ",", "(", "5", ",", "9", ")", ",", "(", "5", ",", "18", ")", ",", "(", "5", ",", "21", ")", ",", "(", "6", ",", "68", ")", ",", "(", "7", ",", "33", ")", ",", "(", "8", ",", "64", ")", ",", "(", "9", ",", "47", ")", ",", "(", "9", ",", "48", ")", ",", "(", "9", ",", "49", ")", ",", "(", "9", ",", "50", ")", ",", "\n", "(", "9", ",", "51", ")", ",", "(", "9", ",", "52", ")", ",", "(", "9", ",", "53", ")", ",", "(", "9", ",", "54", ")", ",", "(", "9", ",", "55", ")", ",", "(", "9", ",", "56", ")", ",", "(", "10", ",", "2", ")", ",", "(", "10", ",", "4", ")", ",", "(", "10", ",", "14", ")", ",", "(", "10", ",", "18", ")", ",", "(", "10", ",", "21", ")", ",", "\n", "(", "10", ",", "25", ")", ",", "(", "10", ",", "27", ")", ",", "(", "10", ",", "29", ")", ",", "(", "10", ",", "57", ")", ",", "(", "10", ",", "58", ")", ",", "(", "10", ",", "60", ")", ",", "(", "10", ",", "61", ")", ",", "(", "10", ",", "62", ")", ",", "(", "10", ",", "64", ")", ",", "(", "11", ",", "31", ")", ",", "\n", "(", "11", ",", "32", ")", ",", "(", "11", ",", "37", ")", ",", "(", "11", ",", "38", ")", ",", "(", "12", ",", "14", ")", ",", "(", "12", ",", "57", ")", ",", "(", "12", ",", "58", ")", ",", "(", "12", ",", "60", ")", ",", "(", "12", ",", "61", ")", ",", "(", "13", ",", "40", ")", ",", "(", "13", ",", "41", ")", ",", "\n", "(", "13", ",", "42", ")", ",", "(", "13", ",", "46", ")", ",", "(", "14", ",", "1", ")", ",", "(", "14", ",", "25", ")", ",", "(", "14", ",", "26", ")", ",", "(", "14", ",", "27", ")", ",", "(", "14", ",", "29", ")", ",", "(", "14", ",", "30", ")", ",", "(", "14", ",", "31", ")", ",", "(", "14", ",", "32", ")", ",", "\n", "(", "14", ",", "33", ")", ",", "(", "14", ",", "34", ")", ",", "(", "14", ",", "35", ")", ",", "(", "14", ",", "37", ")", ",", "(", "14", ",", "38", ")", ",", "(", "14", ",", "39", ")", ",", "(", "14", ",", "40", ")", ",", "(", "14", ",", "41", ")", ",", "(", "14", ",", "42", ")", ",", "(", "14", ",", "47", ")", ",", "\n", "(", "14", ",", "50", ")", ",", "(", "14", ",", "68", ")", ",", "(", "14", ",", "74", ")", ",", "(", "14", ",", "75", ")", ",", "(", "14", ",", "78", ")", ",", "(", "15", ",", "30", ")", ",", "(", "15", ",", "33", ")", ",", "(", "16", ",", "43", ")", ",", "(", "16", ",", "44", ")", ",", "(", "16", ",", "45", ")", ",", "\n", "(", "18", ",", "1", ")", ",", "(", "18", ",", "2", ")", ",", "(", "18", ",", "3", ")", ",", "(", "18", ",", "4", ")", ",", "(", "18", ",", "5", ")", ",", "(", "18", ",", "6", ")", ",", "(", "18", ",", "7", ")", ",", "(", "18", ",", "8", ")", ",", "(", "18", ",", "11", ")", ",", "(", "18", ",", "14", ")", ",", "(", "18", ",", "15", ")", ",", "\n", "(", "18", ",", "16", ")", ",", "(", "18", ",", "17", ")", ",", "(", "18", ",", "18", ")", ",", "(", "18", ",", "19", ")", ",", "(", "18", ",", "20", ")", ",", "(", "18", ",", "21", ")", ",", "(", "18", ",", "24", ")", ",", "(", "18", ",", "25", ")", ",", "(", "18", ",", "26", ")", ",", "(", "18", ",", "27", ")", ",", "\n", "(", "18", ",", "28", ")", ",", "(", "18", ",", "29", ")", ",", "(", "18", ",", "30", ")", ",", "(", "18", ",", "31", ")", ",", "(", "18", ",", "32", ")", ",", "(", "18", ",", "33", ")", ",", "(", "18", ",", "34", ")", ",", "(", "18", ",", "35", ")", ",", "(", "18", ",", "36", ")", ",", "(", "18", ",", "37", ")", ",", "\n", "(", "18", ",", "38", ")", ",", "(", "18", ",", "39", ")", ",", "(", "18", ",", "40", ")", ",", "(", "18", ",", "41", ")", ",", "(", "18", ",", "42", ")", ",", "(", "18", ",", "43", ")", ",", "(", "18", ",", "44", ")", ",", "(", "18", ",", "45", ")", ",", "(", "18", ",", "46", ")", ",", "(", "18", ",", "47", ")", ",", "\n", "(", "18", ",", "48", ")", ",", "(", "18", ",", "49", ")", ",", "(", "18", ",", "51", ")", ",", "(", "18", ",", "53", ")", ",", "(", "18", ",", "54", ")", ",", "(", "18", ",", "55", ")", ",", "(", "18", ",", "56", ")", ",", "(", "18", ",", "57", ")", ",", "(", "18", ",", "61", ")", ",", "(", "18", ",", "62", ")", ",", "\n", "(", "18", ",", "63", ")", ",", "(", "18", ",", "64", ")", ",", "(", "18", ",", "65", ")", ",", "(", "18", ",", "66", ")", ",", "(", "18", ",", "67", ")", ",", "(", "18", ",", "68", ")", ",", "(", "18", ",", "73", ")", ",", "(", "18", ",", "74", ")", ",", "(", "18", ",", "75", ")", ",", "(", "18", ",", "77", ")", ",", "\n", "(", "19", ",", "35", ")", ",", "(", "19", ",", "39", ")", ",", "(", "20", ",", "33", ")", ",", "(", "21", ",", "31", ")", ",", "(", "21", ",", "32", ")", ",", "(", "23", ",", "1", ")", ",", "(", "23", ",", "11", ")", ",", "(", "23", ",", "19", ")", ",", "(", "23", ",", "20", ")", ",", "(", "23", ",", "24", ")", ",", "\n", "(", "23", ",", "28", ")", ",", "(", "23", ",", "34", ")", ",", "(", "23", ",", "49", ")", ",", "(", "23", ",", "53", ")", ",", "(", "23", ",", "56", ")", ",", "(", "23", ",", "61", ")", ",", "(", "23", ",", "63", ")", ",", "(", "23", ",", "64", ")", ",", "(", "23", ",", "67", ")", ",", "(", "23", ",", "68", ")", ",", "\n", "(", "23", ",", "73", ")", ",", "(", "24", ",", "74", ")", ",", "(", "25", ",", "1", ")", ",", "(", "25", ",", "2", ")", ",", "(", "25", ",", "4", ")", ",", "(", "25", ",", "8", ")", ",", "(", "25", ",", "9", ")", ",", "(", "25", ",", "14", ")", ",", "(", "25", ",", "15", ")", ",", "(", "25", ",", "16", ")", ",", "(", "25", ",", "17", ")", ",", "\n", "(", "25", ",", "18", ")", ",", "(", "25", ",", "19", ")", ",", "(", "25", ",", "21", ")", ",", "(", "25", ",", "25", ")", ",", "(", "25", ",", "26", ")", ",", "(", "25", ",", "27", ")", ",", "(", "25", ",", "28", ")", ",", "(", "25", ",", "29", ")", ",", "(", "25", ",", "30", ")", ",", "(", "25", ",", "31", ")", ",", "\n", "(", "25", ",", "32", ")", ",", "(", "25", ",", "33", ")", ",", "(", "25", ",", "34", ")", ",", "(", "25", ",", "35", ")", ",", "(", "25", ",", "36", ")", ",", "(", "25", ",", "37", ")", ",", "(", "25", ",", "38", ")", ",", "(", "25", ",", "39", ")", ",", "(", "25", ",", "40", ")", ",", "(", "25", ",", "41", ")", ",", "\n", "(", "25", ",", "42", ")", ",", "(", "25", ",", "43", ")", ",", "(", "25", ",", "44", ")", ",", "(", "25", ",", "45", ")", ",", "(", "25", ",", "46", ")", ",", "(", "25", ",", "47", ")", ",", "(", "25", ",", "48", ")", ",", "(", "25", ",", "49", ")", ",", "(", "25", ",", "50", ")", ",", "(", "25", ",", "51", ")", ",", "\n", "(", "25", ",", "52", ")", ",", "(", "25", ",", "53", ")", ",", "(", "25", ",", "54", ")", ",", "(", "25", ",", "55", ")", ",", "(", "25", ",", "56", ")", ",", "(", "25", ",", "57", ")", ",", "(", "25", ",", "64", ")", ",", "(", "25", ",", "65", ")", ",", "(", "25", ",", "66", ")", ",", "(", "25", ",", "67", ")", ",", "\n", "(", "25", ",", "68", ")", ",", "(", "25", ",", "73", ")", ",", "(", "25", ",", "74", ")", ",", "(", "25", ",", "77", ")", ",", "(", "25", ",", "78", ")", ",", "(", "25", ",", "79", ")", ",", "(", "25", ",", "80", ")", ",", "(", "26", ",", "32", ")", ",", "(", "26", ",", "37", ")", ",", "(", "28", ",", "30", ")", ",", "\n", "(", "28", ",", "33", ")", "]", "\n", "\n", "while", "True", ":", "\n", "# print('Step: ', i)", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "index_list", ")", "\n", "for", "i", "in", "index_list", ":", "\n", "            ", "GT", "=", "Trainval_GT", "[", "i", "]", "\n", "image_id", "=", "GT", "[", "0", "]", "\n", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/coco/images/train2014/COCO_train2014_'", "+", "(", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "\n", "12", ")", "+", "'.jpg'", "\n", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "im_orig", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "True", ")", "\n", "im_orig", "-=", "cfg", ".", "PIXEL_MEANS", "\n", "im_shape", "=", "im_orig", ".", "shape", "\n", "im_orig", "=", "im_orig", ".", "reshape", "(", "1", ",", "im_shape", "[", "0", "]", ",", "im_shape", "[", "1", "]", ",", "3", ")", "\n", "\n", "Pattern", ",", "Human_augmented_sp", ",", "Human_augmented", ",", "Object_augmented", ",", "action_sp", ",", "action_HO", ",", "action_H", ",", "mask_sp", ",", "mask_HO", ",", "mask_H", ",", "gt_compose", "=", "Augmented_HO_spNeg", "(", "GT", ",", "Trainval_N", ",", "\n", "im_shape", ",", "\n", "Pos_augment", ",", "\n", "Neg_select", ")", "\n", "\n", "blobs", "=", "{", "}", "\n", "# blobs['image'] = im_orig", "\n", "blobs", "[", "'H_boxes'", "]", "=", "Human_augmented", "\n", "blobs", "[", "'Hsp_boxes'", "]", "=", "Human_augmented_sp", "\n", "blobs", "[", "'O_boxes'", "]", "=", "Object_augmented", "\n", "blobs", "[", "'gt_class_sp'", "]", "=", "action_sp", "\n", "blobs", "[", "'gt_class_HO'", "]", "=", "action_HO", "\n", "blobs", "[", "'gt_class_H'", "]", "=", "action_H", "\n", "blobs", "[", "'gt_class_C'", "]", "=", "gt_compose", "\n", "blobs", "[", "'Mask_sp'", "]", "=", "mask_sp", "\n", "blobs", "[", "'Mask_HO'", "]", "=", "mask_HO", "\n", "blobs", "[", "'Mask_H'", "]", "=", "mask_H", "\n", "blobs", "[", "'sp'", "]", "=", "Pattern", "\n", "\n", "yield", "(", "im_orig", ",", "image_id", ",", "len", "(", "action_H", ")", ",", "blobs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.obtain_coco_data": [[1713, 1756], ["tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "functools.partial", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape"], "function", ["None"], ["", "", "", "def", "obtain_coco_data", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "30", ",", "augment_type", "=", "0", ")", ":", "\n", "    ", "if", "augment_type", "==", "0", ":", "\n", "        ", "g", "=", "coco_generator", "\n", "", "else", ":", "\n", "        ", "g", "=", "coco_generator1", "\n", "# generator()", "\n", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "partial", "(", "g", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ")", ",", "\n", "output_types", "=", "(", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int32", ",", "{", "\n", "'H_boxes'", ":", "tf", ".", "float32", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "float32", ",", "\n", "'O_boxes'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_H'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_C'", ":", "tf", ".", "float32", ",", "\n", "'Mask_sp'", ":", "tf", ".", "float32", ",", "\n", "'Mask_HO'", ":", "tf", ".", "float32", ",", "\n", "'Mask_H'", ":", "tf", ".", "float32", ",", "\n", "'sp'", ":", "tf", ".", "float32", ",", "\n", "}", ")", ",", "output_shapes", "=", "(", "\n", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "{", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'gt_class_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'gt_class_C'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "238", "]", ")", ",", "\n", "'Mask_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'Mask_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'Mask_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "3", "]", ")", ",", "\n", "}", ")", ")", "\n", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.shuffle(1000)", "\n", "# dataset = dataset.repeat(100)", "\n", "# dataset = dataset.repeat(1000).shuffle(1000)", "\n", "# dataset._dataset.batch(3)", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "image_id", ",", "num_pos", ",", "blobs", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "image", ",", "image_id", ",", "num_pos", ",", "blobs", "\n", "# image, num_pos = iterator.get_next()", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.obtain_coco_data1": [[1760, 1859], ["tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "time.time", "g_func", "functools.partial", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "range", "len", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "range", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "len", "range"], "function", ["None"], ["", "def", "obtain_coco_data1", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "30", ",", "augment_type", "=", "0", ",", "with_pose", "=", "False", ",", "is_zero_shot", "=", "0", ")", ":", "\n", "    ", "if", "augment_type", "==", "0", ":", "\n", "        ", "g_func", "=", "coco_generator", "\n", "", "else", ":", "\n", "        ", "g_func", "=", "coco_generator1", "\n", "\n", "", "def", "generator3", "(", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "with_pose", ",", "is_zero_shot", ")", ":", "\n", "        ", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "import", "time", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "count_time", "=", "0", "\n", "avg_time", "=", "0", "\n", "for", "im_orig", ",", "image_id", ",", "num_pos", ",", "blobs", "in", "g_func", "(", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "with_pose", ",", "is_zero_shot", ")", ":", "\n", "            ", "buffer", "[", "0", "]", ".", "append", "(", "im_orig", ")", "\n", "buffer", "[", "1", "]", ".", "append", "(", "image_id", ")", "\n", "buffer", "[", "2", "]", ".", "append", "(", "num_pos", ")", "\n", "buffer", "[", "3", "]", ".", "append", "(", "blobs", ")", "\n", "\n", "if", "len", "(", "buffer", "[", "0", "]", ")", ">", "1", ":", "\n", "\n", "                ", "if", "buffer", "[", "2", "]", "[", "0", "]", "<", "buffer", "[", "2", "]", "[", "1", "]", ":", "\n", "# make sure the first batch is less.", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "buffer", ")", ")", ":", "\n", "                        ", "tmp", "=", "buffer", "[", "i", "]", "[", "0", "]", "\n", "buffer", "[", "i", "]", "[", "0", "]", "=", "buffer", "[", "i", "]", "[", "1", "]", "\n", "buffer", "[", "i", "]", "[", "1", "]", "=", "tmp", "\n", "\n", "", "", "yield", "buffer", "[", "0", "]", "[", "0", "]", ",", "buffer", "[", "1", "]", "[", "0", "]", ",", "buffer", "[", "2", "]", "[", "0", "]", ",", "buffer", "[", "3", "]", "[", "0", "]", ",", "buffer", "[", "0", "]", "[", "1", "]", ",", "buffer", "[", "1", "]", "[", "1", "]", ",", "buffer", "[", "2", "]", "[", "1", "]", ",", "buffer", "[", "3", "]", "[", "1", "]", ",", "\n", "\n", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "# avg_time = ((time.time() - st) + avg_time * count_time) / (count_time + 1)", "\n", "# count_time += 1", "\n", "# print('generate batch:', time.time() - st, \"average;\",  avg_time)", "\n", "# st = time.time()", "\n", "\n", "# generator()", "\n", "", "", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "\n", "partial", "(", "generator3", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "with_pose", ",", "is_zero_shot", ")", ",", "\n", "output_types", "=", "(", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int32", ",", "{", "\n", "'H_boxes'", ":", "tf", ".", "float32", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "float32", ",", "\n", "'O_boxes'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_H'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_C'", ":", "tf", ".", "float32", ",", "\n", "'Mask_sp'", ":", "tf", ".", "float32", ",", "\n", "'Mask_HO'", ":", "tf", ".", "float32", ",", "\n", "'Mask_H'", ":", "tf", ".", "float32", ",", "\n", "'sp'", ":", "tf", ".", "float32", ",", "\n", "}", ",", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int32", ",", "{", "\n", "'H_boxes'", ":", "tf", ".", "float32", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "float32", ",", "\n", "'O_boxes'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_H'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_C'", ":", "tf", ".", "float32", ",", "\n", "'Mask_sp'", ":", "tf", ".", "float32", ",", "\n", "'Mask_HO'", ":", "tf", ".", "float32", ",", "\n", "'Mask_H'", ":", "tf", ".", "float32", ",", "\n", "'sp'", ":", "tf", ".", "float32", ",", "\n", "}", ")", ",", "output_shapes", "=", "(", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "{", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'gt_class_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'gt_class_C'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "238", "]", ")", ",", "\n", "'Mask_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'Mask_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'Mask_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "3", "]", ")", ",", "\n", "}", ",", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "{", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'gt_class_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'gt_class_C'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "238", "]", ")", ",", "\n", "'Mask_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'Mask_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'Mask_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "29", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "3", "]", ")", ",", "\n", "}", ")", ")", "\n", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.shuffle(1000)", "\n", "# dataset = dataset.repeat(100)", "\n", "# dataset = dataset.repeat(1000).shuffle(1000)", "\n", "# dataset._dataset.batch(3)", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "image_id", ",", "num_pos", ",", "blobs", ",", "image1", ",", "image_id1", ",", "num_pos1", ",", "blobs1", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "[", "image", ",", "image1", "]", ",", "[", "image_id", ",", "image_id1", "]", ",", "[", "num_pos", ",", "num_pos1", "]", ",", "[", "blobs", ",", "blobs1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.obtain_coco_data_hoicoco_24": [[1861, 1964], ["tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "time.time", "g_func", "functools.partial", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "range", "len", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "range", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "len", "range"], "function", ["None"], ["", "def", "obtain_coco_data_hoicoco_24", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "30", ",", "augment_type", "=", "0", ",", "pattern_type", "=", "False", ",", "is_zero_shot", "=", "0", ",", "type", "=", "0", ")", ":", "\n", "    ", "if", "type", "==", "0", ":", "\n", "        ", "verb_num", "=", "24", "\n", "g_func", "=", "coco_generator2", "\n", "", "elif", "type", "==", "1", ":", "\n", "        ", "verb_num", "=", "21", "\n", "g_func", "=", "coco_generator3", "\n", "\n", "", "def", "generator3", "(", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "pattern_type", ",", "is_zero_shot", ")", ":", "\n", "        ", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "import", "time", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "count_time", "=", "0", "\n", "avg_time", "=", "0", "\n", "for", "im_orig", ",", "image_id", ",", "num_pos", ",", "blobs", "in", "g_func", "(", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "pattern_type", ",", "is_zero_shot", ")", ":", "\n", "            ", "buffer", "[", "0", "]", ".", "append", "(", "im_orig", ")", "\n", "buffer", "[", "1", "]", ".", "append", "(", "image_id", ")", "\n", "buffer", "[", "2", "]", ".", "append", "(", "num_pos", ")", "\n", "buffer", "[", "3", "]", ".", "append", "(", "blobs", ")", "\n", "\n", "\n", "# print(im_orig.shape, image_id, num_pos,", "\n", "if", "len", "(", "buffer", "[", "0", "]", ")", ">", "1", ":", "\n", "\n", "                ", "if", "buffer", "[", "2", "]", "[", "0", "]", "<", "buffer", "[", "2", "]", "[", "1", "]", ":", "\n", "# make sure the first batch is less.", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "buffer", ")", ")", ":", "\n", "                        ", "tmp", "=", "buffer", "[", "i", "]", "[", "0", "]", "\n", "buffer", "[", "i", "]", "[", "0", "]", "=", "buffer", "[", "i", "]", "[", "1", "]", "\n", "buffer", "[", "i", "]", "[", "1", "]", "=", "tmp", "\n", "\n", "", "", "yield", "buffer", "[", "0", "]", "[", "0", "]", ",", "buffer", "[", "1", "]", "[", "0", "]", ",", "buffer", "[", "2", "]", "[", "0", "]", ",", "buffer", "[", "3", "]", "[", "0", "]", ",", "buffer", "[", "0", "]", "[", "1", "]", ",", "buffer", "[", "1", "]", "[", "1", "]", ",", "buffer", "[", "2", "]", "[", "1", "]", ",", "buffer", "[", "3", "]", "[", "1", "]", ",", "\n", "\n", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "# avg_time = ((time.time() - st) + avg_time * count_time) / (count_time + 1)", "\n", "# count_time += 1", "\n", "# print('generate batch:', time.time() - st, \"average;\",  avg_time)", "\n", "# st = time.time()", "\n", "", "", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "partial", "(", "generator3", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "pattern_type", ",", "is_zero_shot", ")", ",", "\n", "output_types", "=", "(", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int32", ",", "{", "\n", "'H_boxes'", ":", "tf", ".", "float32", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "float32", ",", "\n", "'pose_box'", ":", "tf", ".", "float32", ",", "\n", "'O_boxes'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_H'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_C'", ":", "tf", ".", "float32", ",", "\n", "'Mask_sp'", ":", "tf", ".", "float32", ",", "\n", "'Mask_HO'", ":", "tf", ".", "float32", ",", "\n", "'Mask_H'", ":", "tf", ".", "float32", ",", "\n", "'sp'", ":", "tf", ".", "float32", ",", "\n", "}", ",", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int32", ",", "{", "\n", "'H_boxes'", ":", "tf", ".", "float32", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "float32", ",", "\n", "'pose_box'", ":", "tf", ".", "float32", ",", "\n", "'O_boxes'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_H'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_C'", ":", "tf", ".", "float32", ",", "\n", "'Mask_sp'", ":", "tf", ".", "float32", ",", "\n", "'Mask_HO'", ":", "tf", ".", "float32", ",", "\n", "'Mask_H'", ":", "tf", ".", "float32", ",", "\n", "'sp'", ":", "tf", ".", "float32", ",", "\n", "}", ")", ",", "output_shapes", "=", "(", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "{", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'pose_box'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_C'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "222", "]", ")", ",", "\n", "'Mask_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "}", ",", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "{", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'pose_box'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_C'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "222", "]", ")", ",", "\n", "'Mask_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "}", ")", ")", "\n", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.shuffle(1000)", "\n", "# dataset = dataset.repeat(100)", "\n", "# dataset = dataset.repeat(1000).shuffle(1000)", "\n", "# dataset._dataset.batch(3)", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "image_id", ",", "num_pos", ",", "blobs", ",", "image1", ",", "image_id1", ",", "num_pos1", ",", "blobs1", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "[", "image", ",", "image1", "]", ",", "[", "image_id", ",", "image_id1", "]", ",", "[", "num_pos", ",", "num_pos1", "]", ",", "[", "blobs", ",", "blobs1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_new_Trainval_N": [[1967, 1977], ["Trainval_N.keys", "new_Trainval_N[].append"], "function", ["None"], ["", "def", "get_new_Trainval_N", "(", "Trainval_N", ",", "is_zero_shot", ",", "unseen_idx", ")", ":", "\n", "    ", "if", "is_zero_shot", ">", "0", ":", "\n", "        ", "new_Trainval_N", "=", "{", "}", "\n", "for", "k", "in", "Trainval_N", ".", "keys", "(", ")", ":", "\n", "            ", "new_Trainval_N", "[", "k", "]", "=", "[", "]", "\n", "for", "item", "in", "Trainval_N", "[", "k", "]", ":", "# the original code include a bug (k is wrongly set to 4)", "\n", "                ", "if", "item", "[", "1", "]", "not", "in", "unseen_idx", ":", "\n", "                    ", "new_Trainval_N", "[", "k", "]", ".", "append", "(", "item", ")", "\n", "", "", "", "Trainval_N", "=", "new_Trainval_N", "\n", "", "return", "Trainval_N", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_zero_shot_type": [[1979, 1997], ["model_name.__contains__", "model_name.__contains__", "model_name.__contains__", "model_name.__contains__", "model_name.__contains__", "model_name.__contains__"], "function", ["None"], ["", "def", "get_zero_shot_type", "(", "model_name", ")", ":", "\n", "    ", "zero_shot_type", "=", "0", "\n", "if", "model_name", ".", "__contains__", "(", "'_zs_'", ")", ":", "\n", "# for open long-tailed hoi detection", "\n", "        ", "zero_shot_type", "=", "7", "\n", "", "elif", "model_name", ".", "__contains__", "(", "'zsnrare'", ")", ":", "\n", "        ", "zero_shot_type", "=", "4", "\n", "", "elif", "model_name", ".", "__contains__", "(", "'_zsrare_'", ")", ":", "\n", "        ", "zero_shot_type", "=", "3", "\n", "", "elif", "model_name", ".", "__contains__", "(", "'_zsuo_'", ")", ":", "\n", "# for unseen object", "\n", "        ", "zero_shot_type", "=", "11", "\n", "", "elif", "model_name", ".", "__contains__", "(", "'_zs3_'", ")", ":", "\n", "# for VCL model", "\n", "        ", "zero_shot_type", "=", "3", "\n", "", "elif", "model_name", ".", "__contains__", "(", "'_zs4_'", ")", ":", "\n", "        ", "zero_shot_type", "=", "4", "\n", "", "return", "zero_shot_type", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_epoch_iters": [[2918, 2929], ["model_name.__contains__", "model_name.__contains__", "model_name.__contains__"], "function", ["None"], ["", "def", "get_epoch_iters", "(", "model_name", ")", ":", "\n", "    ", "epoch_iters", "=", "43273", "\n", "if", "model_name", ".", "__contains__", "(", "'zsnrare'", ")", ":", "\n", "        ", "epoch_iters", "=", "20000", "\n", "", "elif", "model_name", ".", "__contains__", "(", "'zs_'", ")", ":", "\n", "        ", "epoch_iters", "=", "20000", "\n", "", "elif", "model_name", ".", "__contains__", "(", "'zsrare'", ")", ":", "\n", "        ", "epoch_iters", "=", "40000", "\n", "", "else", ":", "\n", "        ", "epoch_iters", "=", "43273", "\n", "", "return", "epoch_iters", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_augment_type": [[2014, 2024], ["model_name.__contains__", "model_name.__contains__"], "function", ["None"], ["", "def", "get_augment_type", "(", "model_name", ")", ":", "\n", "    ", "augment_type", "=", "0", "\n", "if", "model_name", ".", "__contains__", "(", "'_aug5'", ")", ":", "\n", "        ", "augment_type", "=", "4", "\n", "", "elif", "model_name", ".", "__contains__", "(", "'_aug6'", ")", ":", "\n", "        ", "augment_type", "=", "5", "\n", "", "else", ":", "\n", "# raise Exception('params wrong', args.model)", "\n", "        ", "pass", "\n", "", "return", "augment_type", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_unseen_index": [[2026, 2073], ["None"], "function", ["None"], ["", "def", "get_unseen_index", "(", "zero_shot_type", ")", ":", "\n", "    ", "unseen_idx", "=", "None", "\n", "if", "zero_shot_type", "==", "3", ":", "\n", "# rare first", "\n", "        ", "unseen_idx", "=", "[", "509", ",", "279", ",", "280", ",", "402", ",", "504", ",", "286", ",", "499", ",", "498", ",", "289", ",", "485", ",", "303", ",", "311", ",", "325", ",", "439", ",", "351", ",", "358", ",", "66", ",", "427", ",", "379", ",", "418", ",", "\n", "70", ",", "416", ",", "\n", "389", ",", "90", ",", "395", ",", "76", ",", "397", ",", "84", ",", "135", ",", "262", ",", "401", ",", "592", ",", "560", ",", "586", ",", "548", ",", "593", ",", "526", ",", "181", ",", "257", ",", "539", ",", "535", ",", "260", ",", "\n", "596", ",", "345", ",", "189", ",", "\n", "205", ",", "206", ",", "429", ",", "179", ",", "350", ",", "405", ",", "522", ",", "449", ",", "261", ",", "255", ",", "546", ",", "547", ",", "44", ",", "22", ",", "334", ",", "599", ",", "239", ",", "315", ",", "317", ",", "229", ",", "\n", "158", ",", "195", ",", "\n", "238", ",", "364", ",", "222", ",", "281", ",", "149", ",", "399", ",", "83", ",", "127", ",", "254", ",", "398", ",", "403", ",", "555", ",", "552", ",", "520", ",", "531", ",", "440", ",", "436", ",", "482", ",", "274", ",", "8", ",", "\n", "188", ",", "216", ",", "597", ",", "\n", "77", ",", "407", ",", "556", ",", "469", ",", "474", ",", "107", ",", "390", ",", "410", ",", "27", ",", "381", ",", "463", ",", "99", ",", "184", ",", "100", ",", "292", ",", "517", ",", "80", ",", "333", ",", "62", ",", "354", ",", "\n", "104", ",", "55", ",", "50", ",", "\n", "198", ",", "168", ",", "391", ",", "192", ",", "595", ",", "136", ",", "581", "]", "\n", "", "elif", "zero_shot_type", "==", "4", ":", "\n", "# non rare first", "\n", "        ", "unseen_idx", "=", "[", "38", ",", "41", ",", "20", ",", "18", ",", "245", ",", "11", ",", "19", ",", "154", ",", "459", ",", "42", ",", "155", ",", "139", ",", "60", ",", "461", ",", "577", ",", "153", ",", "582", ",", "89", ",", "141", ",", "576", ",", "75", ",", "\n", "212", ",", "472", ",", "61", ",", "\n", "457", ",", "146", ",", "208", ",", "94", ",", "471", ",", "131", ",", "248", ",", "544", ",", "515", ",", "566", ",", "370", ",", "481", ",", "226", ",", "250", ",", "470", ",", "323", ",", "169", ",", "480", ",", "479", ",", "230", ",", "\n", "385", ",", "73", ",", "\n", "159", ",", "190", ",", "377", ",", "176", ",", "249", ",", "371", ",", "284", ",", "48", ",", "583", ",", "53", ",", "162", ",", "140", ",", "185", ",", "106", ",", "294", ",", "56", ",", "320", ",", "152", ",", "374", ",", "338", ",", "\n", "29", ",", "594", ",", "346", ",", "\n", "456", ",", "589", ",", "45", ",", "23", ",", "67", ",", "478", ",", "223", ",", "493", ",", "228", ",", "240", ",", "215", ",", "91", ",", "115", ",", "337", ",", "559", ",", "7", ",", "218", ",", "518", ",", "297", ",", "191", ",", "266", ",", "\n", "304", ",", "6", ",", "572", ",", "\n", "529", ",", "312", ",", "9", ",", "308", ",", "417", ",", "197", ",", "193", ",", "163", ",", "455", ",", "25", ",", "54", ",", "575", ",", "446", ",", "387", ",", "483", ",", "534", ",", "340", ",", "508", ",", "110", ",", "329", ",", "\n", "246", ",", "173", ",", "506", ",", "\n", "383", ",", "93", ",", "516", ",", "64", "]", "\n", "", "elif", "zero_shot_type", "==", "11", ":", "\n", "        ", "unseen_idx", "=", "[", "111", ",", "112", ",", "113", ",", "114", ",", "115", ",", "116", ",", "117", ",", "118", ",", "119", ",", "120", ",", "121", ",", "122", ",", "123", ",", "124", ",", "125", ",", "\n", "126", ",", "127", ",", "128", ",", "224", ",", "225", ",", "226", ",", "227", ",", "228", ",", "229", ",", "230", ",", "231", ",", "290", ",", "291", ",", "292", ",", "293", ",", "\n", "294", ",", "313", ",", "314", ",", "315", ",", "316", ",", "317", ",", "318", ",", "319", ",", "320", ",", "321", ",", "322", ",", "323", ",", "324", ",", "336", ",", "337", ",", "\n", "338", ",", "339", ",", "340", ",", "341", ",", "418", ",", "419", ",", "420", ",", "421", ",", "422", ",", "423", ",", "424", ",", "425", ",", "426", ",", "427", ",", "428", ",", "\n", "429", ",", "430", ",", "431", ",", "432", ",", "433", ",", "453", ",", "454", ",", "455", ",", "456", ",", "457", ",", "458", ",", "459", ",", "460", ",", "461", ",", "462", ",", "\n", "463", ",", "464", ",", "465", ",", "466", ",", "467", ",", "468", ",", "469", ",", "470", ",", "471", ",", "472", ",", "473", ",", "533", ",", "534", ",", "535", ",", "536", ",", "\n", "537", ",", "558", ",", "559", ",", "560", ",", "561", ",", "595", ",", "596", ",", "597", ",", "598", ",", "599", "]", "\n", "#  miss [ 5, 6, 28, 56, 88] verbs 006  break    007  brush_with 029  flip  057  move  089  slide", "\n", "", "elif", "zero_shot_type", "==", "7", ":", "\n", "# 24 rare merge of zs3 & zs4", "\n", "        ", "unseen_idx", "=", "[", "509", ",", "279", ",", "280", ",", "402", ",", "504", ",", "286", ",", "499", ",", "498", ",", "289", ",", "485", ",", "303", ",", "311", ",", "325", ",", "439", ",", "351", ",", "358", ",", "66", ",", "427", ",", "379", ",", "418", ",", "70", ",", "416", ",", "389", ",", "\n", "90", ",", "38", ",", "41", ",", "20", ",", "18", ",", "245", ",", "11", ",", "19", ",", "154", ",", "459", ",", "42", ",", "155", ",", "139", ",", "60", ",", "461", ",", "577", ",", "153", ",", "582", ",", "89", ",", "141", ",", "576", ",", "75", ",", "212", ",", "472", ",", "61", ",", "\n", "457", ",", "146", ",", "208", ",", "94", ",", "471", ",", "131", ",", "248", ",", "544", ",", "515", ",", "566", ",", "370", ",", "481", ",", "226", ",", "250", ",", "470", ",", "323", ",", "169", ",", "480", ",", "479", ",", "230", ",", "385", ",", "73", ",", "159", ",", "\n", "190", ",", "377", ",", "176", ",", "249", ",", "371", ",", "284", ",", "48", ",", "583", ",", "53", ",", "162", ",", "140", ",", "185", ",", "106", ",", "294", ",", "56", ",", "320", ",", "152", ",", "374", ",", "338", ",", "29", ",", "594", ",", "346", ",", "456", ",", "589", ",", "\n", "45", ",", "23", ",", "67", ",", "478", ",", "223", ",", "493", ",", "228", ",", "240", ",", "215", ",", "91", ",", "115", ",", "337", ",", "559", ",", "7", ",", "218", ",", "518", ",", "297", ",", "191", ",", "266", ",", "304", ",", "6", ",", "572", ",", "529", ",", "312", ",", "\n", "9", "]", "\n", "# 22529, 14830, 22493, 17411, 21912,", "\n", "", "return", "unseen_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.generator2": [[2075, 2205], ["ult.get_aug_params", "ult.get_unseen_index", "ult.get_new_Trainval_N", "print", "enumerate", "list", "img_id_index_map.items", "time.time", "img_id_index_map.keys", "range", "copy.deepcopy", "numpy.random.shuffle", "copy.deepcopy.keys", "img_id_index_map[].append", "list.append", "numpy.random.shuffle", "cv2.imread", "cv2.imread.astype", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.expand_dims", "math.ceil", "os.path.exists", "print", "print", "ult.Augmented_HO_Neg_HICO", "Pattern_list.append", "Human_augmented_list.append", "Object_augmented_list.append", "action_HO_list.append", "len", "str().zfill", "len", "str", "len"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_aug_params", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_unseen_index", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_new_Trainval_N", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_HO_Neg_HICO"], ["", "def", "generator2", "(", "Trainval_GT", ",", "Trainval_N", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "pattern_type", ",", "zero_shot_type", ",", "isalign", ",", "\n", "epoch", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    :param Trainval_GT:\n    :param Trainval_N:\n    :param Pos_augment:\n    :param Neg_select:\n    :param augment_type:\n    :param pattern_type:\n    :return:\n    \"\"\"", "\n", "# import skimage", "\n", "# assert skimage.__version__ == '0.14.2', \"The version of skimage might affect the speed largely. I use 0.14.2\"", "\n", "Neg_select1", ",", "Pos_augment1", ",", "inters_per_img", "=", "get_aug_params", "(", "Neg_select", ",", "Pos_augment", ",", "augment_type", ")", "\n", "unseen_idx", "=", "get_unseen_index", "(", "zero_shot_type", ")", "\n", "Trainval_N", "=", "get_new_Trainval_N", "(", "Trainval_N", ",", "zero_shot_type", ",", "unseen_idx", ")", "\n", "print", "(", "\"generator2\"", ",", "inters_per_img", ",", "Pos_augment1", ",", "'Neg_select:'", ",", "Neg_select1", ",", "augment_type", ",", "'zero shot:'", ",", "\n", "zero_shot_type", ")", "\n", "import", "math", "\n", "img_id_index_map", "=", "{", "}", "\n", "for", "i", ",", "gt", "in", "enumerate", "(", "Trainval_GT", ")", ":", "\n", "        ", "img_id", "=", "gt", "[", "0", "]", "\n", "if", "img_id", "in", "img_id_index_map", ":", "\n", "            ", "img_id_index_map", "[", "img_id", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "            ", "img_id_index_map", "[", "img_id", "]", "=", "[", "i", "]", "\n", "", "", "img_id_list", "=", "list", "(", "img_id_index_map", ".", "keys", "(", ")", ")", "\n", "for", "k", ",", "v", "in", "img_id_index_map", ".", "items", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "math", ".", "ceil", "(", "len", "(", "v", ")", "*", "1.0", "/", "inters_per_img", ")", "-", "1", ")", ":", "\n", "            ", "img_id_list", ".", "append", "(", "k", ")", "\n", "", "", "import", "copy", "\n", "import", "time", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "count_time", "=", "0", "\n", "avg_time", "=", "0", "\n", "while", "True", ":", "\n", "        ", "running_map", "=", "copy", ".", "deepcopy", "(", "img_id_index_map", ")", "\n", "# print('Step: ', i)", "\n", "np", ".", "random", ".", "shuffle", "(", "img_id_list", ")", "\n", "for", "k", "in", "running_map", ".", "keys", "(", ")", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "running_map", "[", "k", "]", ")", "\n", "\n", "", "for", "img_id_tmp", "in", "img_id_list", ":", "\n", "            ", "gt_ids", "=", "running_map", "[", "img_id_tmp", "]", "[", ":", "inters_per_img", "]", "\n", "running_map", "[", "img_id_tmp", "]", "=", "running_map", "[", "img_id_tmp", "]", "[", "inters_per_img", ":", "]", "\n", "Pattern_list", "=", "[", "]", "\n", "Human_augmented_list", "=", "[", "]", "\n", "Object_augmented_list", "=", "[", "]", "\n", "action_HO_list", "=", "[", "]", "\n", "num_pos_list", "=", "0", "\n", "mask_all_list", "=", "[", "]", "\n", "\n", "image_id", "=", "img_id_tmp", "\n", "if", "image_id", "in", "[", "528", ",", "791", ",", "1453", ",", "2783", ",", "3489", ",", "3946", ",", "3946", ",", "11747", ",", "11978", ",", "12677", ",", "16946", ",", "17833", ",", "19218", ",", "19218", ",", "\n", "22347", ",", "27293", ",", "27584", ",", "28514", ",", "33683", ",", "35399", "]", ":", "\n", "# This is a list contain multiple objects within the same object box. It seems like wrong annotations.", "\n", "# We remove those images. This do not affect the performance in our experiment.", "\n", "                ", "continue", "\n", "", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/train2015/HICO_train2015_'", "+", "(", "\n", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "\n", "8", ")", "+", "'.jpg'", "\n", "# id, gt, h, o", "\n", "# print(gt_ids, gt_ids[0], Trainval_GT[gt_ids[0]])", "\n", "import", "cv2", "\n", "import", "os", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "im_file", ")", ":", "\n", "                ", "print", "(", "'not exist'", ",", "im_file", ")", "\n", "continue", "\n", "", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "if", "im", "is", "None", ":", "\n", "                ", "print", "(", "'node'", ",", "im_file", ")", "\n", "continue", "\n", "", "im_orig", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "True", ")", "\n", "im_orig", "-=", "cfg", ".", "PIXEL_MEANS", "\n", "im_shape", "=", "im", ".", "shape", "\n", "import", "os", "\n", "# print('generate batch read image:', time.time() - st, \"average;\", avg_time)", "\n", "for", "i", "in", "gt_ids", ":", "\n", "                ", "GT", "=", "Trainval_GT", "[", "i", "]", "\n", "# rare data", "\n", "if", "zero_shot_type", ">", "0", ":", "\n", "                    ", "has_rare", "=", "False", "\n", "for", "label", "in", "GT", "[", "1", "]", ":", "\n", "                        ", "if", "label", "in", "unseen_idx", ":", "\n", "                            ", "has_rare", "=", "True", "\n", "", "", "if", "has_rare", ":", "\n", "                        ", "continue", "\n", "", "", "assert", "GT", "[", "0", "]", "==", "image_id", "\n", "\n", "# im_orig = im_orig.reshape(1, im_shape[0], im_shape[1], 3)", "\n", "\n", "cur_pos_augment", "=", "Pos_augment1", "\n", "if", "augment_type", ">", "1", ":", "\n", "                    ", "if", "i", "==", "gt_ids", "[", "-", "1", "]", ":", "# This must be -1", "\n", "                        ", "cur_neg_select", "=", "Neg_select1", "*", "len", "(", "gt_ids", ")", "\n", "", "else", ":", "\n", "                        ", "cur_neg_select", "=", "0", "\n", "", "", "else", ":", "\n", "                    ", "cur_neg_select", "=", "Neg_select1", "\n", "# st1 = time.time()", "\n", "\n", "", "Pattern", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "num_pos", "=", "Augmented_HO_Neg_HICO", "(", "\n", "GT", ",", "\n", "Trainval_N", ",", "\n", "im_shape", ",", "\n", "Pos_augment", "=", "cur_pos_augment", ",", "\n", "Neg_select", "=", "cur_neg_select", ",", "\n", "pattern_type", "=", "pattern_type", ",", "\n", "isalign", "=", "isalign", ")", "\n", "\n", "# maintain same number of augmentation,", "\n", "\n", "# print('generate batch read image:', i, time.time() - st1, cur_neg_select, len(Trainval_N[image_id]) if image_id in Trainval_N else 0)", "\n", "Pattern_list", ".", "append", "(", "Pattern", ")", "\n", "Human_augmented_list", ".", "append", "(", "Human_augmented", ")", "\n", "Object_augmented_list", ".", "append", "(", "Object_augmented", ")", "\n", "action_HO_list", ".", "append", "(", "action_HO", ")", "\n", "num_pos_list", "+=", "num_pos", "\n", "# print('item:', Pattern.shape, num_pos)", "\n", "", "if", "len", "(", "Pattern_list", ")", "<=", "0", ":", "\n", "                ", "continue", "\n", "", "Pattern", "=", "np", ".", "concatenate", "(", "Pattern_list", ",", "axis", "=", "0", ")", "\n", "Human_augmented", "=", "np", ".", "concatenate", "(", "Human_augmented_list", ",", "axis", "=", "0", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "Object_augmented_list", ",", "axis", "=", "0", ")", "\n", "action_HO", "=", "np", ".", "concatenate", "(", "action_HO_list", ",", "axis", "=", "0", ")", "\n", "num_pos", "=", "num_pos_list", "\n", "im_orig", "=", "np", ".", "expand_dims", "(", "im_orig", ",", "axis", "=", "0", ")", "\n", "yield", "(", "im_orig", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "Pattern", ")", "\n", "", "if", "augment_type", "<", "0", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_aug_params": [[2207, 2224], ["None"], "function", ["None"], ["", "", "", "def", "get_aug_params", "(", "Neg_select", ",", "Pos_augment", ",", "augment_type", ")", ":", "\n", "    ", "Pos_augment1", "=", "Pos_augment", "\n", "Neg_select1", "=", "Neg_select", "\n", "inters_per_img", "=", "2", "\n", "if", "augment_type", "==", "0", ":", "\n", "        ", "inters_per_img", "=", "1", "\n", "Pos_augment1", "=", "15", "\n", "Neg_select1", "=", "60", "\n", "", "elif", "augment_type", "==", "4", ":", "\n", "        ", "inters_per_img", "=", "5", "\n", "Pos_augment1", "=", "6", "\n", "Neg_select1", "=", "24", "\n", "", "elif", "augment_type", "==", "5", ":", "\n", "        ", "inters_per_img", "=", "7", "\n", "Pos_augment1", "=", "10", "\n", "Neg_select1", "=", "40", "\n", "", "return", "Neg_select1", ",", "Pos_augment1", ",", "inters_per_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_vcoco_aug_params": [[2226, 2247], ["None"], "function", ["None"], ["", "def", "get_vcoco_aug_params", "(", "Neg_select", ",", "Pos_augment", ",", "augment_type", ")", ":", "\n", "    ", "Pos_augment1", "=", "Pos_augment", "\n", "Neg_select1", "=", "Neg_select", "\n", "inters_per_img", "=", "2", "\n", "if", "augment_type", "==", "0", ":", "\n", "        ", "inters_per_img", "=", "1", "\n", "Pos_augment1", "=", "15", "\n", "Neg_select1", "=", "30", "\n", "", "elif", "augment_type", "==", "1", ":", "\n", "        ", "inters_per_img", "=", "2", "\n", "Pos_augment1", "=", "15", "\n", "Neg_select1", "=", "30", "\n", "", "elif", "augment_type", "==", "2", ":", "\n", "        ", "inters_per_img", "=", "3", "\n", "Pos_augment1", "=", "15", "\n", "Neg_select1", "=", "30", "\n", "", "elif", "augment_type", "==", "-", "1", ":", "\n", "        ", "inters_per_img", "=", "1", "\n", "Pos_augment1", "=", "0", "\n", "Neg_select1", "=", "0", "\n", "", "return", "Neg_select1", ",", "Pos_augment1", ",", "inters_per_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.obtain_data": [[2249, 2294], ["tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "open", "pickle.load", "functools.partial", "open", "pickle.load", "open", "pickle.load", "print", "pickle.load", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "open", "pickle.load", "open", "pickle.load", "open", "Trainval_N[].extend"], "function", ["None"], ["", "def", "obtain_data", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "60", ",", "augment_type", "=", "0", ",", "pattern_type", "=", "0", ",", "zero_shot_type", "=", "0", ",", "isalign", "=", "False", ",", "\n", "epoch", "=", "0", ",", "coco", "=", "False", ",", "neg_type", "=", "0", ")", ":", "\n", "    ", "with", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_Neg_HICO.pkl'", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "Trainval_N", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "if", "not", "coco", ":", "\n", "        ", "with", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "Trainval_GT", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "", "elif", "coco", "==", "2", ":", "\n", "# 115904", "\n", "        ", "with", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'new_list_pickle_2.pkl'", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "Trainval_GT", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "", "elif", "coco", "==", "3", ":", "\n", "# 115904", "\n", "        ", "with", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'new_list_pickle_3.pkl'", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "Trainval_GT", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "with", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'new_neg_dict.pkl'", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "Trainval_N1", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "for", "k", "in", "Trainval_N", ":", "\n", "            ", "if", "k", "in", "Trainval_N1", ":", "\n", "                ", "Trainval_N", "[", "k", "]", ".", "extend", "(", "Trainval_N1", "[", "k", "]", ")", "\n", "", "", "", "else", ":", "\n", "        ", "print", "(", "'Trainval_GT_HICO_COCO'", ")", "\n", "Trainval_GT", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO_COCO.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "partial", "(", "generator2", ",", "Trainval_GT", ",", "Trainval_N", ",", "Pos_augment", ",", "Neg_select", ",", "\n", "augment_type", ",", "pattern_type", ",", "zero_shot_type", ",", "isalign", ",", "epoch", ",", "\n", ")", ",", "output_types", "=", "(", "\n", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int64", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ")", ",", "\n", "output_shapes", "=", "(", "\n", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "600", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ")", ")", "\n", "# (im_orig, image_id, num_pos, Human_augmented, Object_augmented, action_HO, Pattern)", "\n", "# dataset = tf.data.Dataset.from_generator(gen, output_types=(tf.float32, tf.int32),", "\n", "#                                          output_shapes=(tf.TensorShape([1, None, None, 3]), tf.TensorShape([])))", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.shuffle(1000)", "\n", "# dataset = dataset.repeat(100)", "\n", "# dataset = dataset.repeat(1000).shuffle(1000)", "\n", "# dataset._dataset.batch(3)", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "sp", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "image", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.obtain_test_data": [[2296, 2323], ["pickle.load", "pickle.load", "tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "open", "open", "functools.partial", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape"], "function", ["None"], ["", "def", "obtain_test_data", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "60", ",", "augment_type", "=", "0", ",", "with_pose", "=", "False", ",", "large_neg_for_ho", "=", "False", ",", "\n", "isalign", "=", "False", ")", ":", "\n", "    ", "Trainval_GT", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Test_GT_HICO.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "Trainval_N", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Test_GT_HICO.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "g", "=", "generator2", "\n", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "\n", "partial", "(", "g", ",", "Trainval_GT", ",", "Trainval_N", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "with_pose", ",", "0", ",", "isalign", ")", ",", "\n", "output_types", "=", "(", "\n", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int64", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ")", ",", "\n", "output_shapes", "=", "(", "\n", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "600", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", ")", ")", "\n", "# (im_orig, image_id, num_pos, Human_augmented, Object_augmented, action_HO, Pattern)", "\n", "# dataset = tf.data.Dataset.from_generator(gen, output_types=(tf.float32, tf.int32),", "\n", "#                                          output_shapes=(tf.TensorShape([1, None, None, 3]), tf.TensorShape([])))", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.shuffle(1000)", "\n", "# dataset = dataset.repeat(100)", "\n", "# dataset = dataset.repeat(1000).shuffle(1000)", "\n", "# dataset._dataset.batch(3)", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "sp", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "image", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.obtain_coco_data_hoicoco": [[2325, 2425], ["tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "time.time", "g_func", "functools.partial", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "range", "len", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "range", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "len", "range"], "function", ["None"], ["", "def", "obtain_coco_data_hoicoco", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "30", ",", "augment_type", "=", "0", ",", "pattern_type", "=", "False", ",", "is_zero_shot", "=", "0", ",", "type", "=", "0", ")", ":", "\n", "    ", "if", "type", "==", "1", ":", "\n", "        ", "verb_num", "=", "21", "\n", "g_func", "=", "coco_generator3", "\n", "\n", "", "def", "generator3", "(", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "pattern_type", ",", "is_zero_shot", ")", ":", "\n", "        ", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "import", "time", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "count_time", "=", "0", "\n", "avg_time", "=", "0", "\n", "for", "im_orig", ",", "image_id", ",", "num_pos", ",", "blobs", "in", "g_func", "(", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "pattern_type", ",", "\n", "is_zero_shot", ")", ":", "\n", "            ", "buffer", "[", "0", "]", ".", "append", "(", "im_orig", ")", "\n", "buffer", "[", "1", "]", ".", "append", "(", "image_id", ")", "\n", "buffer", "[", "2", "]", ".", "append", "(", "num_pos", ")", "\n", "buffer", "[", "3", "]", ".", "append", "(", "blobs", ")", "\n", "\n", "# print(im_orig.shape, image_id, num_pos,", "\n", "if", "len", "(", "buffer", "[", "0", "]", ")", ">", "1", ":", "\n", "\n", "                ", "if", "buffer", "[", "2", "]", "[", "0", "]", "<", "buffer", "[", "2", "]", "[", "1", "]", ":", "\n", "# make sure the first batch is less.", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "buffer", ")", ")", ":", "\n", "                        ", "tmp", "=", "buffer", "[", "i", "]", "[", "0", "]", "\n", "buffer", "[", "i", "]", "[", "0", "]", "=", "buffer", "[", "i", "]", "[", "1", "]", "\n", "buffer", "[", "i", "]", "[", "1", "]", "=", "tmp", "\n", "\n", "", "", "yield", "buffer", "[", "0", "]", "[", "0", "]", ",", "buffer", "[", "1", "]", "[", "0", "]", ",", "buffer", "[", "2", "]", "[", "0", "]", ",", "buffer", "[", "3", "]", "[", "0", "]", ",", "buffer", "[", "0", "]", "[", "1", "]", ",", "buffer", "[", "1", "]", "[", "1", "]", ",", "buffer", "[", "2", "]", "[", "1", "]", ",", "buffer", "[", "3", "]", "[", "1", "]", ",", "\n", "\n", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "# avg_time = ((time.time() - st) + avg_time * count_time) / (count_time + 1)", "\n", "# count_time += 1", "\n", "# print('generate batch:', time.time() - st, \"average;\",  avg_time)", "\n", "# st = time.time()", "\n", "\n", "# generator()", "\n", "", "", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "\n", "partial", "(", "generator3", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "pattern_type", ",", "is_zero_shot", ")", ",", "\n", "output_types", "=", "(", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int32", ",", "{", "\n", "'H_boxes'", ":", "tf", ".", "float32", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "float32", ",", "\n", "'O_boxes'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_H'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_C'", ":", "tf", ".", "float32", ",", "\n", "'Mask_sp'", ":", "tf", ".", "float32", ",", "\n", "'Mask_HO'", ":", "tf", ".", "float32", ",", "\n", "'Mask_H'", ":", "tf", ".", "float32", ",", "\n", "'sp'", ":", "tf", ".", "float32", ",", "\n", "}", ",", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int32", ",", "{", "\n", "'H_boxes'", ":", "tf", ".", "float32", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "float32", ",", "\n", "'O_boxes'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_H'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_C'", ":", "tf", ".", "float32", ",", "\n", "'Mask_sp'", ":", "tf", ".", "float32", ",", "\n", "'Mask_HO'", ":", "tf", ".", "float32", ",", "\n", "'Mask_H'", ":", "tf", ".", "float32", ",", "\n", "'sp'", ":", "tf", ".", "float32", ",", "\n", "}", ")", ",", "output_shapes", "=", "(", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "{", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_C'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "222", "]", ")", ",", "\n", "'Mask_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "}", ",", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "{", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_C'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "222", "]", ")", ",", "\n", "'Mask_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "}", ")", ")", "\n", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.shuffle(1000)", "\n", "# dataset = dataset.repeat(100)", "\n", "# dataset = dataset.repeat(1000).shuffle(1000)", "\n", "# dataset._dataset.batch(3)", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "image_id", ",", "num_pos", ",", "blobs", ",", "image1", ",", "image_id1", ",", "num_pos1", ",", "blobs1", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "[", "image", ",", "image1", "]", ",", "[", "image_id", ",", "image_id1", "]", ",", "[", "num_pos", ",", "num_pos1", "]", ",", "[", "blobs", ",", "blobs1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.coco_generator2": [[2427, 2468], ["pickle.load", "pickle.load", "list", "open", "open", "range", "numpy.random.shuffle", "len", "cv2.imread", "cv2.imread.astype", "im_orig.reshape.reshape", "ult.Augmented_HO_spNeg2", "str().zfill", "len", "str"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_HO_spNeg2"], ["", "def", "coco_generator2", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "30", ",", "augment_type", "=", "0", ",", "pattern_type", "=", "False", ",", "is_zero_shot", "=", "0", ")", ":", "\n", "    ", "Trainval_GT", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_VCOCO_obj_24.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "Trainval_N", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_Neg_VCOCO_obj_24.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "i", "=", "0", "\n", "index_list", "=", "list", "(", "range", "(", "0", ",", "len", "(", "Trainval_GT", ")", ")", ")", "\n", "\n", "while", "True", ":", "\n", "# print('Step: ', i)", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "index_list", ")", "\n", "for", "i", "in", "index_list", ":", "\n", "\n", "            ", "GT", "=", "Trainval_GT", "[", "i", "]", "\n", "image_id", "=", "GT", "[", "0", "]", "\n", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/coco/images/train2014/COCO_train2014_'", "+", "(", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "\n", "12", ")", "+", "'.jpg'", "\n", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "im_orig", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "True", ")", "\n", "im_orig", "-=", "cfg", ".", "PIXEL_MEANS", "\n", "im_shape", "=", "im_orig", ".", "shape", "\n", "im_orig", "=", "im_orig", ".", "reshape", "(", "1", ",", "im_shape", "[", "0", "]", ",", "im_shape", "[", "1", "]", ",", "3", ")", "\n", "\n", "Pattern", ",", "Human_augmented_sp", ",", "Human_augmented", ",", "Object_augmented", ",", "action_sp", ",", "action_HO", ",", "action_H", ",", "mask_sp", ",", "mask_HO", ",", "mask_H", ",", "gt_compose", "=", "Augmented_HO_spNeg2", "(", "GT", ",", "Trainval_N", ",", "im_shape", ",", "Pos_augment", ",", "Neg_select", ")", "\n", "\n", "blobs", "=", "{", "}", "\n", "# blobs['image'] = im_orig", "\n", "blobs", "[", "'H_boxes'", "]", "=", "Human_augmented", "\n", "blobs", "[", "'Hsp_boxes'", "]", "=", "Human_augmented_sp", "\n", "blobs", "[", "'O_boxes'", "]", "=", "Object_augmented", "\n", "blobs", "[", "'gt_class_sp'", "]", "=", "action_sp", "\n", "blobs", "[", "'gt_class_HO'", "]", "=", "action_HO", "\n", "blobs", "[", "'gt_class_H'", "]", "=", "action_H", "\n", "blobs", "[", "'gt_class_C'", "]", "=", "gt_compose", "\n", "blobs", "[", "'Mask_sp'", "]", "=", "mask_sp", "\n", "blobs", "[", "'Mask_HO'", "]", "=", "mask_HO", "\n", "blobs", "[", "'Mask_H'", "]", "=", "mask_H", "\n", "blobs", "[", "'sp'", "]", "=", "Pattern", "\n", "\n", "# blobs['H_num'] = len(action_H)", "\n", "# print(image_id, len(action_H))", "\n", "yield", "(", "im_orig", ",", "image_id", ",", "len", "(", "action_H", ")", ",", "blobs", ")", "\n", "# print(i, image_id, len(Trainval_GT))", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.coco_generator3": [[2475, 2517], ["pickle.load", "pickle.load", "list", "print", "open", "open", "range", "len", "numpy.random.shuffle", "len", "cv2.imread", "cv2.imread.astype", "im_orig.reshape.reshape", "ult.Augmented_HO_spNeg3", "str().zfill", "len", "str"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_HO_spNeg3"], ["", "", "", "def", "coco_generator3", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "30", ",", "augment_type", "=", "0", ",", "pattern_type", "=", "False", ",", "is_zero_shot", "=", "0", ")", ":", "\n", "    ", "Trainval_GT", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_VCOCO_obj_21.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "Trainval_N", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_Neg_VCOCO_obj_21.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "i", "=", "0", "\n", "index_list", "=", "list", "(", "range", "(", "0", ",", "len", "(", "Trainval_GT", ")", ")", ")", "\n", "print", "(", "len", "(", "index_list", ")", ")", "\n", "\n", "while", "True", ":", "\n", "# print('Step: ', i)", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "index_list", ")", "\n", "for", "i", "in", "index_list", ":", "\n", "\n", "            ", "GT", "=", "Trainval_GT", "[", "i", "]", "\n", "image_id", "=", "GT", "[", "0", "]", "\n", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/coco/images/train2014/COCO_train2014_'", "+", "(", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "\n", "12", ")", "+", "'.jpg'", "\n", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "im_orig", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "True", ")", "\n", "im_orig", "-=", "cfg", ".", "PIXEL_MEANS", "\n", "im_shape", "=", "im_orig", ".", "shape", "\n", "im_orig", "=", "im_orig", ".", "reshape", "(", "1", ",", "im_shape", "[", "0", "]", ",", "im_shape", "[", "1", "]", ",", "3", ")", "\n", "\n", "Pattern", ",", "Human_augmented_sp", ",", "Human_augmented", ",", "Object_augmented", ",", "action_sp", ",", "action_HO", ",", "action_H", ",", "mask_sp", ",", "mask_HO", ",", "mask_H", ",", "gt_compose", "=", "Augmented_HO_spNeg3", "(", "GT", ",", "Trainval_N", ",", "im_shape", ",", "Pos_augment", ",", "Neg_select", ")", "\n", "\n", "blobs", "=", "{", "}", "\n", "# blobs['image'] = im_orig", "\n", "blobs", "[", "'H_boxes'", "]", "=", "Human_augmented", "\n", "blobs", "[", "'Hsp_boxes'", "]", "=", "Human_augmented_sp", "\n", "blobs", "[", "'O_boxes'", "]", "=", "Object_augmented", "\n", "blobs", "[", "'gt_class_sp'", "]", "=", "action_sp", "\n", "blobs", "[", "'gt_class_HO'", "]", "=", "action_HO", "\n", "blobs", "[", "'gt_class_H'", "]", "=", "action_H", "\n", "blobs", "[", "'gt_class_C'", "]", "=", "gt_compose", "\n", "blobs", "[", "'Mask_sp'", "]", "=", "mask_sp", "\n", "blobs", "[", "'Mask_HO'", "]", "=", "mask_HO", "\n", "blobs", "[", "'Mask_H'", "]", "=", "mask_H", "\n", "blobs", "[", "'sp'", "]", "=", "Pattern", "\n", "\n", "yield", "(", "im_orig", ",", "image_id", ",", "len", "(", "action_H", ")", ",", "blobs", ")", "\n", "", "if", "augment_type", "<", "0", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.coco_generator_atl": [[2518, 2651], ["print", "list", "pickle.load", "range", "numpy.random.shuffle", "open", "pickle.load", "len", "cv2.imread", "cv2.imread.astype", "im_orig.reshape.reshape", "g_func", "open", "pickle.load", "pickle.load", "pickle.load.extend", "open", "open", "pickle.load", "len", "open", "pickle.load", "pickle.load", "str().zfill", "os.path.exists", "print", "open", "open", "os.path.exists", "os.path.exists", "os.path.exists", "print", "str", "str().zfill", "str().zfill", "os.path.exists", "print", "str().zfill", "os.path.exists", "print", "str().zfill", "str().zfill", "os.path.exists", "str().zfill", "str", "str", "str", "str().zfill", "str().zfill", "os.path.exists", "print", "str", "str", "str().zfill", "str", "str", "str", "str"], "function", ["None"], ["", "", "", "def", "coco_generator_atl", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "0", ",", "augment_type", "=", "0", ",", "pattern_type", "=", "False", ",", "is_zero_shot", "=", "0", ",", "type", "=", "0", ",", "vcoco_type", "=", "21", ")", ":", "\n", "    ", "\"\"\"\n    Here, the name semi means atl. For objects, we do not have verb labels. Thus, we can only provide object id.\n    \"\"\"", "\n", "print", "(", "type", ")", "\n", "if", "type", "==", "0", ":", "\n", "# coco 2014 570834 length", "\n", "        ", "Trainval_GT", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_VCOCO_obj_semi.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "", "elif", "type", "==", "2", ":", "\n", "# hico 68389 length", "\n", "        ", "Trainval_GT", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_VCOCO_hico_obj_semi_21.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "", "elif", "type", "==", "3", ":", "\n", "# both", "\n", "        ", "Trainval_GT_hico", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_VCOCO_hico_obj_semi_21.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "\n", "Trainval_GT", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_VCOCO_obj_semi_21.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "for", "item", "in", "Trainval_GT", ":", "\n", "            ", "item", "[", "0", "]", "+=", "MAX_HICO_ID", "\n", "", "Trainval_GT", ".", "extend", "(", "Trainval_GT_hico", ")", "\n", "\n", "", "elif", "type", "==", "4", ":", "\n", "# --- 42631", "\n", "        ", "Trainval_GT", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_VCOCO_vcoco_obj_semi_21.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "", "elif", "type", "==", "5", ":", "\n", "# vcoco", "\n", "        ", "Trainval_GT", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_VCOCO_vcoco1_obj_semi_21.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "", "else", ":", "\n", "# coco 2014 train 570834", "\n", "        ", "Trainval_GT", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_VCOCO_obj_semi_21.pkl'", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "", "i", "=", "0", "\n", "index_list", "=", "list", "(", "range", "(", "0", ",", "len", "(", "Trainval_GT", ")", ")", ")", "\n", "\n", "if", "vcoco_type", "==", "24", ":", "\n", "        ", "g_func", "=", "Augmented_HO_spNeg2", "\n", "", "else", ":", "\n", "        ", "g_func", "=", "Augmented_HO_spNeg3", "\n", "", "while", "True", ":", "\n", "# print('Step: ', i)", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "index_list", ")", "\n", "for", "i", "in", "index_list", ":", "\n", "\n", "            ", "GT", "=", "Trainval_GT", "[", "i", "]", "\n", "image_id", "=", "GT", "[", "0", "]", "\n", "if", "type", "==", "2", ":", "\n", "                ", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/train2015/HICO_train2015_'", "+", "(", "\n", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "\n", "8", ")", "+", "'.jpg'", "\n", "", "elif", "type", "==", "3", ":", "\n", "                ", "if", "image_id", "<", "MAX_HICO_ID", ":", "\n", "# obj365", "\n", "                    ", "tmp_id", "=", "image_id", "\n", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/train2015/HICO_train2015_'", "+", "(", "\n", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "\n", "8", ")", "+", "'.jpg'", "\n", "pass", "\n", "", "else", ":", "\n", "                    ", "tmp_id", "=", "image_id", "-", "MAX_HICO_ID", "\n", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/coco/images/train2014/COCO_train2014_'", "+", "(", "str", "(", "tmp_id", ")", ")", ".", "zfill", "(", "\n", "12", ")", "+", "'.jpg'", "\n", "import", "os", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "im_file", ")", ":", "\n", "                        ", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/coco/images/val2014/COCO_val2014_'", "+", "(", "\n", "str", "(", "tmp_id", ")", ")", ".", "zfill", "(", "12", ")", "+", "'.jpg'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "im_file", ")", ":", "\n", "                            ", "print", "(", "im_file", ")", "\n", "", "", "", "import", "os", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "im_file", ")", ":", "\n", "                    ", "print", "(", "im_file", ")", "\n", "\n", "", "", "elif", "type", "==", "6", ":", "\n", "                ", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/coco/images/train2014/COCO_train2014_'", "+", "(", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "\n", "12", ")", "+", "'.jpg'", "\n", "import", "os", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "im_file", ")", ":", "\n", "                    ", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/coco/images/val2014/COCO_val2014_'", "+", "(", "\n", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "12", ")", "+", "'.jpg'", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "im_file", ")", ":", "\n", "                    ", "print", "(", "im_file", ")", "\n", "", "", "elif", "type", "==", "7", ":", "\n", "                ", "if", "image_id", ">=", "MAX_COCO_ID", ":", "\n", "# obj365", "\n", "                    ", "tmp_id", "=", "image_id", "-", "MAX_COCO_ID", "\n", "im_file", "=", "cfg", ".", "LOCAL_DATA", "+", "'/dataset/Objects365/Images/train/train/obj365_train_'", "+", "(", "str", "(", "tmp_id", ")", ")", ".", "zfill", "(", "\n", "12", ")", "+", "'.jpg'", "\n", "pass", "\n", "", "else", ":", "\n", "                    ", "tmp_id", "=", "image_id", "\n", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/coco/images/train2014/COCO_train2014_'", "+", "(", "str", "(", "tmp_id", ")", ")", ".", "zfill", "(", "\n", "12", ")", "+", "'.jpg'", "\n", "import", "os", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "im_file", ")", ":", "\n", "                        ", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/coco/images/val2014/COCO_val2014_'", "+", "(", "\n", "str", "(", "tmp_id", ")", ")", ".", "zfill", "(", "12", ")", "+", "'.jpg'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "im_file", ")", ":", "\n", "                            ", "print", "(", "im_file", ")", "\n", "", "", "", "import", "os", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "im_file", ")", ":", "\n", "                    ", "print", "(", "im_file", ")", "\n", "", "", "else", ":", "\n", "                ", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/coco/images/train2014/COCO_train2014_'", "+", "(", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "\n", "12", ")", "+", "'.jpg'", "\n", "", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "im_orig", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "True", ")", "\n", "im_orig", "-=", "cfg", ".", "PIXEL_MEANS", "\n", "im_shape", "=", "im_orig", ".", "shape", "\n", "im_orig", "=", "im_orig", ".", "reshape", "(", "1", ",", "im_shape", "[", "0", "]", ",", "im_shape", "[", "1", "]", ",", "3", ")", "\n", "\n", "Pattern", ",", "Human_augmented_sp", ",", "Human_augmented", ",", "Object_augmented", ",", "action_sp", ",", "action_HO", ",", "action_H", ",", "mask_sp", ",", "mask_HO", ",", "mask_H", ",", "gt_compose", "=", "g_func", "(", "GT", ",", "{", "}", ",", "im_shape", ",", "Pos_augment", ",", "Neg_select", ")", "\n", "\n", "blobs", "=", "{", "}", "\n", "# blobs['image'] = im_orig", "\n", "blobs", "[", "'H_boxes'", "]", "=", "Human_augmented", "\n", "blobs", "[", "'Hsp_boxes'", "]", "=", "Human_augmented_sp", "\n", "blobs", "[", "'O_boxes'", "]", "=", "Object_augmented", "\n", "blobs", "[", "'gt_class_sp'", "]", "=", "action_sp", "\n", "blobs", "[", "'gt_class_HO'", "]", "=", "action_HO", "\n", "blobs", "[", "'gt_class_H'", "]", "=", "action_H", "\n", "blobs", "[", "'gt_class_C'", "]", "=", "gt_compose", "\n", "blobs", "[", "'Mask_sp'", "]", "=", "mask_sp", "\n", "blobs", "[", "'Mask_HO'", "]", "=", "mask_HO", "\n", "blobs", "[", "'Mask_H'", "]", "=", "mask_H", "\n", "blobs", "[", "'sp'", "]", "=", "Pattern", "\n", "\n", "# blobs['H_num'] = len(action_H)", "\n", "# print(image_id, len(action_H))", "\n", "yield", "(", "im_orig", ",", "image_id", ",", "len", "(", "action_H", ")", ",", "blobs", ")", "\n", "# print(i, image_id, len(Trainval_GT))", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.obtain_coco_data2": [[2656, 2708], ["tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "functools.partial", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape"], "function", ["None"], ["", "", "", "def", "obtain_coco_data2", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "30", ",", "augment_type", "=", "0", ",", "type", "=", "0", ")", ":", "\n", "# Trainval_GT = pickle.load(open(cfg.DATA_DIR + '/' + 'Trainval_GT_VCOCO.pkl', \"rb\"), encoding='latin1')", "\n", "# Trainval_N = pickle.load(open(cfg.DATA_DIR + '/' + 'Trainval_Neg_VCOCO.pkl', \"rb\"), encoding='latin1')", "\n", "    ", "if", "type", "==", "0", ":", "\n", "        ", "compose_classes", "=", "222", "\n", "verb_num", "=", "24", "\n", "g_func", "=", "coco_generator2", "\n", "", "elif", "type", "==", "1", ":", "\n", "        ", "compose_classes", "=", "222", "\n", "verb_num", "=", "21", "\n", "g_func", "=", "coco_generator3", "\n", "", "elif", "type", "==", "2", ":", "\n", "        ", "compose_classes", "=", "238", "\n", "verb_num", "=", "29", "\n", "g_func", "=", "coco_generator1", "\n", "\n", "# generator()", "\n", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "partial", "(", "g_func", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ")", ",", "output_types", "=", "(", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int32", ",", "{", "\n", "'H_boxes'", ":", "tf", ".", "float32", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "float32", ",", "\n", "'O_boxes'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_H'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_C'", ":", "tf", ".", "float32", ",", "\n", "'Mask_sp'", ":", "tf", ".", "float32", ",", "\n", "'Mask_HO'", ":", "tf", ".", "float32", ",", "\n", "'Mask_H'", ":", "tf", ".", "float32", ",", "\n", "'sp'", ":", "tf", ".", "float32", ",", "\n", "}", ")", ",", "output_shapes", "=", "(", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "{", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_C'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "compose_classes", "]", ")", ",", "\n", "'Mask_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "}", ")", ")", "\n", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.shuffle(1000)", "\n", "# dataset = dataset.repeat(100)", "\n", "# dataset = dataset.repeat(1000).shuffle(1000)", "\n", "# dataset._dataset.batch(3)", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "image_id", ",", "num_pos", ",", "blobs", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "image", ",", "image_id", ",", "num_pos", ",", "blobs", "\n", "# image, num_pos = iterator.get_next()", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.obtain_coco_data_atl": [[2712, 2817], ["tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "time.time", "ult.coco_generator_atl", "g_func", "functools.partial", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "next", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "range", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "range", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.coco_generator_atl"], ["", "def", "obtain_coco_data_atl", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "30", ",", "augment_type", "=", "0", ",", "pattern_type", "=", "False", ",", "is_zero_shot", "=", "0", ",", "type", "=", "0", ",", "vcoco_type", "=", "21", ")", ":", "\n", "    ", "if", "vcoco_type", "==", "21", ":", "\n", "        ", "verb_num", "=", "21", "\n", "g_func", "=", "coco_generator3", "\n", "", "elif", "vcoco_type", "==", "24", ":", "\n", "        ", "verb_num", "=", "24", "\n", "g_func", "=", "coco_generator2", "\n", "", "else", ":", "\n", "# default", "\n", "        ", "verb_num", "=", "21", "\n", "g_func", "=", "coco_generator3", "\n", "\n", "", "def", "generator3", "(", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "pattern_type", ",", "is_zero_shot", ")", ":", "\n", "        ", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "import", "time", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "count_time", "=", "0", "\n", "avg_time", "=", "0", "\n", "semi_func", "=", "coco_generator_atl", "(", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "pattern_type", ",", "is_zero_shot", ",", "type", ",", "vcoco_type", "=", "vcoco_type", ")", "\n", "# semi is atl. a weak-supervised manner.", "\n", "for", "im_orig", ",", "image_id", ",", "num_pos", ",", "blobs", "in", "g_func", "(", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "pattern_type", ",", "\n", "is_zero_shot", ")", ":", "\n", "            ", "buffer", "[", "0", "]", ".", "append", "(", "im_orig", ")", "\n", "buffer", "[", "1", "]", ".", "append", "(", "image_id", ")", "\n", "buffer", "[", "2", "]", ".", "append", "(", "num_pos", ")", "\n", "buffer", "[", "3", "]", ".", "append", "(", "blobs", ")", "\n", "\n", "im_orig", ",", "image_id", ",", "num_pos", ",", "blobs", "=", "next", "(", "semi_func", ")", "\n", "buffer", "[", "0", "]", ".", "append", "(", "im_orig", ")", "\n", "buffer", "[", "1", "]", ".", "append", "(", "image_id", ")", "\n", "buffer", "[", "2", "]", ".", "append", "(", "num_pos", ")", "\n", "buffer", "[", "3", "]", ".", "append", "(", "blobs", ")", "\n", "\n", "# print(im_orig.shape, image_id, num_pos,", "\n", "yield", "buffer", "[", "0", "]", "[", "0", "]", ",", "buffer", "[", "1", "]", "[", "0", "]", ",", "buffer", "[", "2", "]", "[", "0", "]", ",", "buffer", "[", "3", "]", "[", "0", "]", ",", "buffer", "[", "0", "]", "[", "1", "]", ",", "buffer", "[", "1", "]", "[", "1", "]", ",", "buffer", "[", "2", "]", "[", "1", "]", ",", "buffer", "[", "3", "]", "[", "1", "]", ",", "\n", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "# avg_time = ((time.time() - st) + avg_time * count_time) / (count_time + 1)", "\n", "# count_time += 1", "\n", "# print('generate batch:', time.time() - st, \"average;\",  avg_time)", "\n", "# st = time.time()", "\n", "\n", "# generator()", "\n", "", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "\n", "partial", "(", "generator3", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "pattern_type", ",", "is_zero_shot", ")", ",", "\n", "output_types", "=", "(", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int32", ",", "{", "\n", "'H_boxes'", ":", "tf", ".", "float32", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "float32", ",", "\n", "'O_boxes'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_H'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_C'", ":", "tf", ".", "float32", ",", "\n", "'Mask_sp'", ":", "tf", ".", "float32", ",", "\n", "'Mask_HO'", ":", "tf", ".", "float32", ",", "\n", "'Mask_H'", ":", "tf", ".", "float32", ",", "\n", "'sp'", ":", "tf", ".", "float32", ",", "\n", "}", ",", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int32", ",", "{", "\n", "'H_boxes'", ":", "tf", ".", "float32", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "float32", ",", "\n", "'O_boxes'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_H'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_C'", ":", "tf", ".", "float32", ",", "\n", "'Mask_sp'", ":", "tf", ".", "float32", ",", "\n", "'Mask_HO'", ":", "tf", ".", "float32", ",", "\n", "'Mask_H'", ":", "tf", ".", "float32", ",", "\n", "'sp'", ":", "tf", ".", "float32", ",", "\n", "}", ")", ",", "output_shapes", "=", "(", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "{", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_C'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "222", "]", ")", ",", "\n", "'Mask_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "}", ",", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "{", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_C'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "222", "]", ")", ",", "\n", "'Mask_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "}", ")", ")", "\n", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.shuffle(1000)", "\n", "# dataset = dataset.repeat(100)", "\n", "# dataset = dataset.repeat(1000).shuffle(1000)", "\n", "# dataset._dataset.batch(3)", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "image_id", ",", "num_pos", ",", "blobs", ",", "image1", ",", "image_id1", ",", "num_pos1", ",", "blobs1", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "[", "image", ",", "image1", "]", ",", "[", "image_id", ",", "image_id1", "]", ",", "[", "num_pos", ",", "num_pos1", "]", ",", "[", "blobs", ",", "blobs1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.obtain_coco_data_hoicoco_24_atl": [[2818, 2916], ["tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "time.time", "ult.coco_generator_atl", "g_func", "functools.partial", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "next", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "range", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "range", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.coco_generator_atl"], ["", "def", "obtain_coco_data_hoicoco_24_atl", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "30", ",", "augment_type", "=", "0", ",", "pattern_type", "=", "False", ",", "is_zero_shot", "=", "0", ",", "type", "=", "0", ")", ":", "\n", "# default", "\n", "    ", "verb_num", "=", "24", "\n", "g_func", "=", "coco_generator2", "\n", "\n", "def", "generator3", "(", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "pattern_type", ",", "is_zero_shot", ")", ":", "\n", "        ", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "import", "time", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "count_time", "=", "0", "\n", "avg_time", "=", "0", "\n", "semi_func", "=", "coco_generator_atl", "(", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "pattern_type", ",", "is_zero_shot", ",", "type", ")", "\n", "# semi is atl. a weak-supervised manner.", "\n", "for", "im_orig", ",", "image_id", ",", "num_pos", ",", "blobs", "in", "g_func", "(", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "pattern_type", ",", "\n", "is_zero_shot", ")", ":", "\n", "            ", "buffer", "[", "0", "]", ".", "append", "(", "im_orig", ")", "\n", "buffer", "[", "1", "]", ".", "append", "(", "image_id", ")", "\n", "buffer", "[", "2", "]", ".", "append", "(", "num_pos", ")", "\n", "buffer", "[", "3", "]", ".", "append", "(", "blobs", ")", "\n", "\n", "im_orig", ",", "image_id", ",", "num_pos", ",", "blobs", "=", "next", "(", "semi_func", ")", "\n", "buffer", "[", "0", "]", ".", "append", "(", "im_orig", ")", "\n", "buffer", "[", "1", "]", ".", "append", "(", "image_id", ")", "\n", "buffer", "[", "2", "]", ".", "append", "(", "num_pos", ")", "\n", "buffer", "[", "3", "]", ".", "append", "(", "blobs", ")", "\n", "\n", "# print(im_orig.shape, image_id, num_pos,", "\n", "yield", "buffer", "[", "0", "]", "[", "0", "]", ",", "buffer", "[", "1", "]", "[", "0", "]", ",", "buffer", "[", "2", "]", "[", "0", "]", ",", "buffer", "[", "3", "]", "[", "0", "]", ",", "buffer", "[", "0", "]", "[", "1", "]", ",", "buffer", "[", "1", "]", "[", "1", "]", ",", "buffer", "[", "2", "]", "[", "1", "]", ",", "buffer", "[", "3", "]", "[", "1", "]", ",", "\n", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "# avg_time = ((time.time() - st) + avg_time * count_time) / (count_time + 1)", "\n", "# count_time += 1", "\n", "# print('generate batch:', time.time() - st, \"average;\",  avg_time)", "\n", "# st = time.time()", "\n", "\n", "# generator()", "\n", "", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "\n", "partial", "(", "generator3", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ",", "pattern_type", ",", "is_zero_shot", ")", ",", "\n", "output_types", "=", "(", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int32", ",", "{", "\n", "'H_boxes'", ":", "tf", ".", "float32", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "float32", ",", "\n", "'O_boxes'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_H'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_C'", ":", "tf", ".", "float32", ",", "\n", "'Mask_sp'", ":", "tf", ".", "float32", ",", "\n", "'Mask_HO'", ":", "tf", ".", "float32", ",", "\n", "'Mask_H'", ":", "tf", ".", "float32", ",", "\n", "'sp'", ":", "tf", ".", "float32", ",", "\n", "}", ",", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int32", ",", "{", "\n", "'H_boxes'", ":", "tf", ".", "float32", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "float32", ",", "\n", "'O_boxes'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_H'", ":", "tf", ".", "float32", ",", "\n", "'gt_class_C'", ":", "tf", ".", "float32", ",", "\n", "'Mask_sp'", ":", "tf", ".", "float32", ",", "\n", "'Mask_HO'", ":", "tf", ".", "float32", ",", "\n", "'Mask_H'", ":", "tf", ".", "float32", ",", "\n", "'sp'", ":", "tf", ".", "float32", ",", "\n", "}", ")", ",", "output_shapes", "=", "(", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "{", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_C'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "222", "]", ")", ",", "\n", "'Mask_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "}", ",", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "{", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'Hsp_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'gt_class_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'gt_class_C'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "222", "]", ")", ",", "\n", "'Mask_sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_HO'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'Mask_H'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "verb_num", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "}", ")", ")", "\n", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.shuffle(1000)", "\n", "# dataset = dataset.repeat(100)", "\n", "# dataset = dataset.repeat(1000).shuffle(1000)", "\n", "# dataset._dataset.batch(3)", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "image_id", ",", "num_pos", ",", "blobs", ",", "image1", ",", "image_id1", ",", "num_pos1", ",", "blobs1", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "[", "image", ",", "image1", "]", ",", "[", "image_id", ",", "image_id1", "]", ",", "[", "num_pos", ",", "num_pos1", "]", ",", "[", "blobs", ",", "blobs1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.obtain_data_vcl_hico": [[2931, 3012], ["tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "open", "pickle.load", "open", "pickle.load", "time.time", "g_func", "functools.partial", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "buffer[].append", "range", "len", "len", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "len", "len", "range", "len", "range", "numpy.concatenate"], "function", ["None"], ["", "def", "obtain_data_vcl_hico", "(", "Pos_augment", "=", "15", ",", "Neg_select", "=", "60", ",", "augment_type", "=", "0", ",", "with_pose", "=", "False", ",", "zero_shot_type", "=", "0", ",", "isalign", "=", "False", ",", "\n", "epoch", "=", "0", ")", ":", "\n", "# we do not use pose, thus we remove it.", "\n", "    ", "with", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "Trainval_GT", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "with", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_Neg_HICO.pkl'", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "Trainval_N", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "", "g_func", "=", "generator2", "\n", "\n", "def", "generator3", "(", "Trainval_GT", ",", "Trainval_N", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ")", ":", "\n", "        ", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "7", ")", "]", "\n", "import", "time", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "count_time", "=", "0", "\n", "avg_time", "=", "0", "\n", "for", "im_orig", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "Pattern", "in", "g_func", "(", "Trainval_GT", ",", "\n", "Trainval_N", ",", "\n", "Pos_augment", ",", "\n", "Neg_select", ",", "\n", "augment_type", ",", "\n", "with_pose", ",", "\n", "zero_shot_type", ",", "\n", "isalign", ",", "epoch", ")", ":", "\n", "            ", "buffer", "[", "0", "]", ".", "append", "(", "im_orig", ")", "\n", "buffer", "[", "1", "]", ".", "append", "(", "image_id", ")", "\n", "buffer", "[", "2", "]", ".", "append", "(", "num_pos", ")", "\n", "buffer", "[", "3", "]", ".", "append", "(", "Human_augmented", ")", "\n", "buffer", "[", "4", "]", ".", "append", "(", "Object_augmented", ")", "\n", "buffer", "[", "5", "]", ".", "append", "(", "action_HO", ")", "\n", "buffer", "[", "6", "]", ".", "append", "(", "Pattern", ")", "\n", "if", "len", "(", "buffer", "[", "0", "]", ")", ">", "1", ":", "\n", "\n", "# print(\"inner:\", buffer[0][0].shape, buffer[0][1].shape, buffer[1], buffer[2], buffer[3].shape, buffer[4].shape, buffer[5].shape, buffer[6].shape)", "\n", "# print(\"inner:\", buffer[1], buffer[2][0], buffer[2][1], buffer[3][0].shape, buffer[3][1].shape, buffer[5][0].shape, buffer[5][1].shape)", "\n", "# yield buffer[0][0], buffer[0][1], buffer[1], buffer[2], buffer[3], buffer[4], buffer[5], buffer[6]", "\n", "                ", "if", "len", "(", "buffer", "[", "3", "]", "[", "0", "]", ")", "<", "len", "(", "buffer", "[", "3", "]", "[", "1", "]", ")", ":", "\n", "# make sure the second batch is less.", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "buffer", ")", ")", ":", "\n", "                        ", "tmp", "=", "buffer", "[", "i", "]", "[", "0", "]", "\n", "buffer", "[", "i", "]", "[", "0", "]", "=", "buffer", "[", "i", "]", "[", "1", "]", "\n", "buffer", "[", "i", "]", "[", "1", "]", "=", "tmp", "\n", "", "", "split_idx", "=", "len", "(", "buffer", "[", "5", "]", "[", "0", "]", ")", "\n", "buffer", "=", "buffer", "[", ":", "3", "]", "+", "[", "np", ".", "concatenate", "(", "item", ",", "axis", "=", "0", ")", "for", "item", "in", "buffer", "[", "3", ":", "]", "]", "+", "buffer", "[", "-", "1", ":", "]", "\n", "\n", "yield", "buffer", "[", "0", "]", "[", "0", "]", ",", "buffer", "[", "0", "]", "[", "1", "]", ",", "buffer", "[", "1", "]", ",", "buffer", "[", "2", "]", ",", "buffer", "[", "3", "]", ",", "buffer", "[", "4", "]", ",", "buffer", "[", "5", "]", ",", "buffer", "[", "\n", "6", "]", ",", "split_idx", "\n", "\n", "buffer", "=", "[", "[", "]", "for", "i", "in", "range", "(", "7", ")", "]", "\n", "# avg_time = ((time.time() - st) + avg_time * count_time) / (count_time + 1)", "\n", "# count_time += 1", "\n", "# print('generate batch:', time.time() - st, \"average;\",  avg_time)", "\n", "# st = time.time()", "\n", "\n", "", "", "", "if", "with_pose", ":", "\n", "        ", "pattern_channel", "=", "3", "\n", "", "else", ":", "\n", "        ", "pattern_channel", "=", "2", "\n", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "\n", "partial", "(", "generator3", ",", "Trainval_GT", ",", "Trainval_N", ",", "Pos_augment", ",", "Neg_select", ",", "augment_type", ")", ",", "\n", "output_types", "=", "(", "\n", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "int32", ",", "tf", ".", "int64", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "int32", ")", ",", "\n", "output_shapes", "=", "(", "\n", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "2", ",", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "2", ",", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "600", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "pattern_channel", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", "\n", ")", "\n", ")", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "image2", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "sp", ",", "split_idx", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "[", "image", ",", "image2", "]", ",", "image_id", ",", "num_pos", ",", "[", "Human_augmented", "[", ":", "split_idx", "]", ",", "Human_augmented", "[", "split_idx", ":", "]", "]", ",", "[", "Object_augmented", "[", ":", "split_idx", "]", ",", "Object_augmented", "[", "split_idx", ":", "]", "]", ",", "[", "action_HO", "[", ":", "split_idx", "]", ",", "action_HO", "[", "split_idx", ":", "]", "]", ",", "[", "sp", "[", ":", "split_idx", "]", ",", "sp", "[", "split_idx", ":", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_HO_Neg_HICO_inner": [[3014, 3069], ["len", "ult.get_pattern", "len", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "numpy.empty", "numpy.empty", "numpy.empty", "ult.Generate_action_HICO", "ult.Augmented_box", "ult.Augmented_box", "len", "range", "ult.get_neg_items", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "len", "range", "random.sample", "min", "min", "range", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_pattern", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action_HICO", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_box", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Augmented_box", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_neg_items"], ["", "def", "Augmented_HO_Neg_HICO_inner", "(", "GT", ",", "negs", ",", "shape", ",", "Pos_augment", ",", "Neg_select", ",", "with_pose", ")", ":", "\n", "    ", "image_id", "=", "GT", "[", "0", "]", "\n", "Human", "=", "GT", "[", "2", "]", "\n", "Object", "=", "GT", "[", "3", "]", "\n", "pose_list", "=", "[", "]", "\n", "if", "Pos_augment", "<", "0", ":", "\n", "        ", "action_HO", "=", "np", ".", "empty", "(", "[", "0", ",", "600", "]", ")", "\n", "Human_augmented", "=", "np", ".", "empty", "(", "[", "0", ",", "5", "]", ")", "\n", "Object_augmented", "=", "np", ".", "empty", "(", "[", "0", ",", "5", "]", ")", "\n", "num_pos", "=", "0", "\n", "", "else", ":", "\n", "        ", "action_HO_", "=", "Generate_action_HICO", "(", "GT", "[", "1", "]", ")", "\n", "action_HO", "=", "action_HO_", "\n", "\n", "Human_augmented", "=", "Augmented_box", "(", "Human", ",", "shape", ",", "image_id", ",", "Pos_augment", ")", "\n", "Object_augmented", "=", "Augmented_box", "(", "Object", ",", "shape", ",", "image_id", ",", "Pos_augment", ")", "\n", "\n", "Human_augmented", "=", "Human_augmented", "[", ":", "min", "(", "len", "(", "Human_augmented", ")", ",", "len", "(", "Object_augmented", ")", ")", "]", "\n", "Object_augmented", "=", "Object_augmented", "[", ":", "min", "(", "len", "(", "Human_augmented", ")", ",", "len", "(", "Object_augmented", ")", ")", "]", "\n", "\n", "num_pos", "=", "len", "(", "Human_augmented", ")", "\n", "for", "i", "in", "range", "(", "num_pos", "-", "1", ")", ":", "\n", "            ", "action_HO", "=", "np", ".", "concatenate", "(", "(", "action_HO", ",", "action_HO_", ")", ",", "axis", "=", "0", ")", "\n", "", "", "if", "with_pose", ":", "pose_list", "=", "[", "GT", "[", "5", "]", "]", "*", "num_pos", "\n", "\n", "num_pos_neg", "=", "len", "(", "Human_augmented", ")", "\n", "\n", "if", "with_pose", ":", "\n", "        ", "pattern_channel", "=", "3", "\n", "", "else", ":", "\n", "        ", "pattern_channel", "=", "2", "\n", "\n", "", "Pattern", "=", "get_pattern", "(", "Human_augmented", ",", "Object_augmented", ",", "num_pos_neg", ",", "pose_list", ",", "shape", ",", "with_pose", ")", "\n", "\n", "if", "negs", "is", "not", "None", "and", "Neg_select", ">", "0", ":", "\n", "\n", "        ", "if", "len", "(", "negs", ")", "<", "Neg_select", ":", "\n", "            ", "Neg_select", "=", "len", "(", "negs", ")", "\n", "List", "=", "range", "(", "Neg_select", ")", "\n", "", "else", ":", "\n", "            ", "List", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "negs", ")", ")", ",", "Neg_select", ")", "\n", "\n", "", "_Human_augmented", ",", "_Object_augmented", ",", "_action_HO", ",", "_Pattern", "=", "get_neg_items", "(", "List", ",", "negs", ",", "shape", ",", "with_pose", ")", "\n", "Human_augmented", "=", "np", ".", "concatenate", "(", "[", "Human_augmented", ",", "_Human_augmented", "]", ",", "axis", "=", "0", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "[", "Object_augmented", ",", "_Object_augmented", "]", ",", "axis", "=", "0", ")", "\n", "action_HO", "=", "np", ".", "concatenate", "(", "[", "action_HO", ",", "_action_HO", "]", ",", "axis", "=", "0", ")", "\n", "Pattern", "=", "np", ".", "concatenate", "(", "[", "Pattern", ",", "_Pattern", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "num_pos_neg", "=", "len", "(", "Human_augmented", ")", "\n", "Pattern", "=", "Pattern", ".", "reshape", "(", "num_pos_neg", ",", "64", ",", "64", ",", "pattern_channel", ")", "\n", "Human_augmented", "=", "Human_augmented", ".", "reshape", "(", "num_pos_neg", ",", "5", ")", "\n", "Object_augmented", "=", "Object_augmented", ".", "reshape", "(", "num_pos_neg", ",", "5", ")", "\n", "action_HO", "=", "action_HO", ".", "reshape", "(", "num_pos_neg", ",", "600", ")", "\n", "\n", "return", "Pattern", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "num_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_pattern": [[3071, 3081], ["numpy.empty", "range", "ult.Get_next_sp", "Pattern_.reshape.reshape", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp"], ["", "def", "get_pattern", "(", "Human_augmented", ",", "Object_augmented", ",", "num_pos_neg", ",", "pose_list", ",", "shape", ",", "with_pose", ")", ":", "\n", "    ", "pattern_channel", "=", "2", "\n", "Pattern", "=", "np", ".", "empty", "(", "(", "0", ",", "64", ",", "64", ",", "pattern_channel", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "num_pos_neg", ")", ":", "\n", "# Pattern_ = Get_next_sp(Human_augmented[i][1:], Object_augmented[i][1:]).reshape(1, 64, 64, 2)", "\n", "# there are poses for the negative sample", "\n", "        ", "Pattern_", "=", "Get_next_sp", "(", "Human_augmented", "[", "i", "]", "[", "1", ":", "]", ",", "Object_augmented", "[", "i", "]", "[", "1", ":", "]", ")", "\n", "Pattern_", "=", "Pattern_", ".", "reshape", "(", "1", ",", "64", ",", "64", ",", "pattern_channel", ")", "\n", "Pattern", "=", "np", ".", "concatenate", "(", "(", "Pattern", ",", "Pattern_", ")", ",", "axis", "=", "0", ")", "\n", "", "return", "Pattern", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_neg_items": [[3083, 3102], ["numpy.empty", "numpy.empty", "numpy.empty", "range", "len", "ult.get_pattern", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "pose_list.append", "numpy.array().reshape", "numpy.array().reshape", "ult.Generate_action_HICO", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_pattern", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Generate_action_HICO"], ["", "def", "get_neg_items", "(", "neg_select_list", ",", "negs", ",", "shape", ",", "with_pose", ")", ":", "\n", "    ", "action_HO", "=", "np", ".", "empty", "(", "[", "0", ",", "600", "]", ")", "\n", "Human_augmented", "=", "np", ".", "empty", "(", "[", "0", ",", "5", "]", ")", "\n", "Object_augmented", "=", "np", ".", "empty", "(", "[", "0", ",", "5", "]", ")", "\n", "pose_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "neg_select_list", ")", ")", ":", "\n", "        ", "Neg", "=", "negs", "[", "neg_select_list", "[", "i", "]", "]", "\n", "if", "with_pose", ":", "pose_list", ".", "append", "(", "Neg", "[", "7", "]", ")", "\n", "Human_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Human_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "2", "]", "[", "0", "]", ",", "Neg", "[", "2", "]", "[", "1", "]", ",", "Neg", "[", "2", "]", "[", "2", "]", ",", "Neg", "[", "2", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "Object_augmented", "=", "np", ".", "concatenate", "(", "\n", "(", "Object_augmented", ",", "np", ".", "array", "(", "[", "0", ",", "Neg", "[", "3", "]", "[", "0", "]", ",", "Neg", "[", "3", "]", "[", "1", "]", ",", "Neg", "[", "3", "]", "[", "2", "]", ",", "Neg", "[", "3", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", ")", ",", "axis", "=", "0", ")", "\n", "action_HO", "=", "np", ".", "concatenate", "(", "(", "action_HO", ",", "Generate_action_HICO", "(", "[", "Neg", "[", "1", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "num_pos_neg", "=", "len", "(", "Human_augmented", ")", "\n", "\n", "Pattern", "=", "get_pattern", "(", "Human_augmented", ",", "Object_augmented", ",", "num_pos_neg", ",", "pose_list", ",", "shape", ",", "with_pose", ")", "\n", "\n", "return", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "Pattern", "\n", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vcoco_diagnose.VCOCOdiagnose.__init__": [[31, 46], ["pycocotools.coco.COCO", "vcoco_diagnose._load_vcoco", "numpy.loadtxt", "numpy.all", "vcoco_diagnose.VCOCOdiagnose._init_coco", "vcoco_diagnose.VCOCOdiagnose._init_vcoco", "open", "numpy.equal", "numpy.sort", "numpy.sort", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1._load_vcoco", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._init_coco", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._init_vcoco"], ["  ", "def", "__init__", "(", "self", ",", "vsrl_annot_file", ",", "coco_annot_file", ",", "\n", "split_file", ")", ":", "\n", "    ", "\"\"\"Input:\n    vslr_annot_file: path to the vcoco annotations\n    coco_annot_file: path to the coco annotations\n    split_file: image ids for split\n    \"\"\"", "\n", "self", ".", "COCO", "=", "COCO", "(", "coco_annot_file", ")", "\n", "self", ".", "VCOCO", "=", "_load_vcoco", "(", "vsrl_annot_file", ")", "\n", "self", ".", "image_ids", "=", "np", ".", "loadtxt", "(", "open", "(", "split_file", ",", "'r'", ")", ")", "# Test set, 4946 images", "\n", "# simple check  ", "\n", "assert", "np", ".", "all", "(", "np", ".", "equal", "(", "np", ".", "sort", "(", "np", ".", "unique", "(", "self", ".", "VCOCO", "[", "0", "]", "[", "'image_id'", "]", ")", ")", ",", "np", ".", "sort", "(", "self", ".", "image_ids", ")", ")", ")", "\n", "\n", "self", ".", "_init_coco", "(", ")", "\n", "self", ".", "_init_vcoco", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vcoco_diagnose.VCOCOdiagnose._init_vcoco": [[48, 55], ["len", "enumerate"], "methods", ["None"], ["", "def", "_init_vcoco", "(", "self", ")", ":", "\n", "    ", "actions", "=", "[", "x", "[", "'action_name'", "]", "for", "x", "in", "self", ".", "VCOCO", "]", "\n", "roles", "=", "[", "x", "[", "'role_name'", "]", "for", "x", "in", "self", ".", "VCOCO", "]", "\n", "self", ".", "actions", "=", "actions", "\n", "self", ".", "actions_to_id_map", "=", "{", "v", ":", "i", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "actions", ")", "}", "\n", "self", ".", "num_actions", "=", "len", "(", "self", ".", "actions", ")", "\n", "self", ".", "roles", "=", "roles", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vcoco_diagnose.VCOCOdiagnose._init_coco": [[57, 67], ["vcoco_diagnose.VCOCOdiagnose.COCO.getCatIds", "dict", "len", "zip", "vcoco_diagnose.VCOCOdiagnose.COCO.loadCats", "enumerate", "vcoco_diagnose.VCOCOdiagnose.json_category_id_to_contiguous_id.items", "vcoco_diagnose.VCOCOdiagnose.COCO.getCatIds"], "methods", ["None"], ["", "def", "_init_coco", "(", "self", ")", ":", "\n", "    ", "category_ids", "=", "self", ".", "COCO", ".", "getCatIds", "(", ")", "\n", "categories", "=", "[", "c", "[", "'name'", "]", "for", "c", "in", "self", ".", "COCO", ".", "loadCats", "(", "category_ids", ")", "]", "\n", "self", ".", "category_to_id_map", "=", "dict", "(", "zip", "(", "categories", ",", "category_ids", ")", ")", "\n", "self", ".", "classes", "=", "[", "'__background__'", "]", "+", "categories", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "classes", ")", "\n", "self", ".", "json_category_id_to_contiguous_id", "=", "{", "\n", "v", ":", "i", "+", "1", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "COCO", ".", "getCatIds", "(", ")", ")", "}", "\n", "self", ".", "contiguous_category_id_to_json_id", "=", "{", "\n", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "json_category_id_to_contiguous_id", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vcoco_diagnose.VCOCOdiagnose._get_vcocodb": [[69, 85], ["copy.deepcopy", "vcoco_diagnose.VCOCOdiagnose.COCO.loadImgs", "vcoco_diagnose.VCOCOdiagnose._prep_vcocodb_entry", "vcoco_diagnose.VCOCOdiagnose._add_gt_annotations", "numpy.zeros", "range", "vcoco_diagnose.VCOCOdiagnose.image_ids.tolist", "range", "print", "numpy.sum", "numpy.logical_and"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._prep_vcocodb_entry", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._add_gt_annotations"], ["", "def", "_get_vcocodb", "(", "self", ")", ":", "\n", "    ", "vcocodb", "=", "copy", ".", "deepcopy", "(", "self", ".", "COCO", ".", "loadImgs", "(", "self", ".", "image_ids", ".", "tolist", "(", ")", ")", ")", "\n", "for", "entry", "in", "vcocodb", ":", "\n", "      ", "self", ".", "_prep_vcocodb_entry", "(", "entry", ")", "\n", "self", ".", "_add_gt_annotations", "(", "entry", ")", "\n", "\n", "# print", "\n", "", "if", "0", ":", "\n", "      ", "nums", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "entry", "in", "vcocodb", ":", "\n", "        ", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "          ", "nums", "[", "aid", "]", "+=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "entry", "[", "'gt_actions'", "]", "[", ":", ",", "aid", "]", "==", "1", ",", "entry", "[", "'gt_classes'", "]", "==", "1", ")", ")", "\n", "", "", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "print", "(", "'Action %s = %d'", "%", "(", "self", ".", "actions", "[", "aid", "]", ",", "nums", "[", "aid", "]", ")", ")", "\n", "\n", "", "", "return", "vcocodb", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vcoco_diagnose.VCOCOdiagnose._prep_vcocodb_entry": [[87, 93], ["numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty"], "methods", ["None"], ["", "def", "_prep_vcocodb_entry", "(", "self", ",", "entry", ")", ":", "\n", "    ", "entry", "[", "'boxes'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "entry", "[", "'is_crowd'", "]", "=", "np", ".", "empty", "(", "(", "0", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "entry", "[", "'gt_classes'", "]", "=", "np", ".", "empty", "(", "(", "0", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "entry", "[", "'gt_actions'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "entry", "[", "'gt_role_id'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vcoco_diagnose.VCOCOdiagnose._add_gt_annotations": [[95, 142], ["vcoco_diagnose.VCOCOdiagnose.COCO.getAnnIds", "vcoco_diagnose.VCOCOdiagnose.COCO.loadAnns", "enumerate", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "vcoco_diagnose.clip_xyxy_to_image", "len", "numpy.ones", "numpy.ones", "vcoco_diagnose.VCOCOdiagnose._get_vsrl_data", "numpy.maximum", "numpy.maximum", "valid_objs.append", "valid_ann_ids.append"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.clip_xyxy_to_image", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._get_vsrl_data"], ["", "def", "_add_gt_annotations", "(", "self", ",", "entry", ")", ":", "\n", "    ", "ann_ids", "=", "self", ".", "COCO", ".", "getAnnIds", "(", "imgIds", "=", "entry", "[", "'id'", "]", ",", "iscrowd", "=", "None", ")", "\n", "objs", "=", "self", ".", "COCO", ".", "loadAnns", "(", "ann_ids", ")", "\n", "# Sanitize bboxes -- some are invalid", "\n", "valid_objs", "=", "[", "]", "\n", "valid_ann_ids", "=", "[", "]", "\n", "width", "=", "entry", "[", "'width'", "]", "\n", "height", "=", "entry", "[", "'height'", "]", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "      ", "if", "'ignore'", "in", "obj", "and", "obj", "[", "'ignore'", "]", "==", "1", ":", "\n", "          ", "continue", "\n", "# Convert form x1, y1, w, h to x1, y1, x2, y2", "\n", "", "x1", "=", "obj", "[", "'bbox'", "]", "[", "0", "]", "\n", "y1", "=", "obj", "[", "'bbox'", "]", "[", "1", "]", "\n", "x2", "=", "x1", "+", "np", ".", "maximum", "(", "0.", ",", "obj", "[", "'bbox'", "]", "[", "2", "]", "-", "1.", ")", "\n", "y2", "=", "y1", "+", "np", ".", "maximum", "(", "0.", ",", "obj", "[", "'bbox'", "]", "[", "3", "]", "-", "1.", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "clip_xyxy_to_image", "(", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "height", ",", "width", ")", "\n", "# Require non-zero seg area and more than 1x1 box size", "\n", "if", "obj", "[", "'area'", "]", ">", "0", "and", "x2", ">", "x1", "and", "y2", ">", "y1", ":", "\n", "        ", "obj", "[", "'clean_bbox'", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "valid_ann_ids", ".", "append", "(", "ann_ids", "[", "i", "]", ")", "\n", "", "", "num_valid_objs", "=", "len", "(", "valid_objs", ")", "\n", "assert", "num_valid_objs", "==", "len", "(", "valid_ann_ids", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ",", "4", ")", ",", "dtype", "=", "entry", "[", "'boxes'", "]", ".", "dtype", ")", "\n", "is_crowd", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ")", ",", "dtype", "=", "entry", "[", "'is_crowd'", "]", ".", "dtype", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ")", ",", "dtype", "=", "entry", "[", "'gt_classes'", "]", ".", "dtype", ")", "\n", "gt_actions", "=", "-", "np", ".", "ones", "(", "(", "num_valid_objs", ",", "self", ".", "num_actions", ")", ",", "dtype", "=", "entry", "[", "'gt_actions'", "]", ".", "dtype", ")", "\n", "gt_role_id", "=", "-", "np", ".", "ones", "(", "(", "num_valid_objs", ",", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "entry", "[", "'gt_role_id'", "]", ".", "dtype", ")", "\n", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "valid_objs", ")", ":", "\n", "      ", "cls", "=", "self", ".", "json_category_id_to_contiguous_id", "[", "obj", "[", "'category_id'", "]", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "obj", "[", "'clean_bbox'", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "is_crowd", "[", "ix", "]", "=", "obj", "[", "'iscrowd'", "]", "\n", "\n", "gt_actions", "[", "ix", ",", ":", "]", ",", "gt_role_id", "[", "ix", ",", ":", ",", ":", "]", "=", "self", ".", "_get_vsrl_data", "(", "valid_ann_ids", "[", "ix", "]", ",", "\n", "valid_ann_ids", ",", "valid_objs", ")", "\n", "\n", "", "entry", "[", "'boxes'", "]", "=", "np", ".", "append", "(", "entry", "[", "'boxes'", "]", ",", "boxes", ",", "axis", "=", "0", ")", "\n", "entry", "[", "'gt_classes'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_classes'", "]", ",", "gt_classes", ")", "\n", "entry", "[", "'is_crowd'", "]", "=", "np", ".", "append", "(", "entry", "[", "'is_crowd'", "]", ",", "is_crowd", ")", "\n", "entry", "[", "'gt_actions'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_actions'", "]", ",", "gt_actions", ",", "axis", "=", "0", ")", "\n", "entry", "[", "'gt_role_id'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_role_id'", "]", ",", "gt_role_id", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vcoco_diagnose.VCOCOdiagnose._get_vsrl_data": [[144, 171], ["enumerate", "numpy.ones", "numpy.ones", "numpy.where", "numpy.where", "range", "numpy.logical_and", "numpy.where"], "methods", ["None"], ["", "def", "_get_vsrl_data", "(", "self", ",", "ann_id", ",", "ann_ids", ",", "objs", ")", ":", "\n", "    ", "\"\"\" Get VSRL data for ann_id.\"\"\"", "\n", "action_id", "=", "-", "np", ".", "ones", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "role_id", "=", "-", "np", ".", "ones", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# check if ann_id in vcoco annotations", "\n", "in_vcoco", "=", "np", ".", "where", "(", "self", ".", "VCOCO", "[", "0", "]", "[", "'ann_id'", "]", "==", "ann_id", ")", "[", "0", "]", "\n", "if", "in_vcoco", ".", "size", ">", "0", ":", "\n", "      ", "action_id", "[", ":", "]", "=", "0", "\n", "role_id", "[", ":", "]", "=", "-", "1", "\n", "", "else", ":", "\n", "      ", "return", "action_id", ",", "role_id", "\n", "", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "VCOCO", ")", ":", "\n", "      ", "assert", "x", "[", "'action_name'", "]", "==", "self", ".", "actions", "[", "i", "]", "\n", "has_label", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "x", "[", "'ann_id'", "]", "==", "ann_id", ",", "x", "[", "'label'", "]", "==", "1", ")", ")", "[", "0", "]", "\n", "if", "has_label", ".", "size", ">", "0", ":", "\n", "        ", "action_id", "[", "i", "]", "=", "1", "\n", "assert", "has_label", ".", "size", "==", "1", "\n", "rids", "=", "x", "[", "'role_object_id'", "]", "[", "has_label", "]", "\n", "assert", "rids", "[", "0", ",", "0", "]", "==", "ann_id", "\n", "for", "j", "in", "range", "(", "1", ",", "rids", ".", "shape", "[", "1", "]", ")", ":", "\n", "          ", "if", "rids", "[", "0", ",", "j", "]", "==", "0", ":", "\n", "# no role", "\n", "            ", "continue", "\n", "", "aid", "=", "np", ".", "where", "(", "ann_ids", "==", "rids", "[", "0", ",", "j", "]", ")", "[", "0", "]", "\n", "assert", "aid", ".", "size", ">", "0", "\n", "role_id", "[", "i", ",", "j", "-", "1", "]", "=", "aid", "\n", "", "", "", "return", "action_id", ",", "role_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vcoco_diagnose.VCOCOdiagnose._collect_detections_for_image": [[173, 191], ["numpy.empty", "numpy.empty", "numpy.zeros", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate", "enumerate"], "methods", ["None"], ["", "def", "_collect_detections_for_image", "(", "self", ",", "dets", ",", "image_id", ")", ":", "\n", "\n", "    ", "agents", "=", "np", ".", "empty", "(", "(", "0", ",", "4", "+", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# 4 + 26 = 30", "\n", "roles", "=", "np", ".", "empty", "(", "(", "0", ",", "5", "*", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# (5 * 26), 2", "\n", "for", "det", "in", "dets", ":", "# loop all detection instance", "\n", "      ", "if", "det", "[", "'image_id'", "]", "==", "image_id", ":", "# might be several", "\n", "        ", "this_agent", "=", "np", ".", "zeros", "(", "(", "1", ",", "4", "+", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this_role", "=", "np", ".", "zeros", "(", "(", "1", ",", "5", "*", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this_agent", "[", "0", ",", ":", "4", "]", "=", "det", "[", "'person_box'", "]", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "# loop 26 actions", "\n", "          ", "for", "j", ",", "rid", "in", "enumerate", "(", "self", ".", "roles", "[", "aid", "]", ")", ":", "\n", "            ", "if", "rid", "==", "'agent'", ":", "\n", "                ", "this_agent", "[", "0", ",", "4", "+", "aid", "]", "=", "det", "[", "self", ".", "actions", "[", "aid", "]", "+", "'_'", "+", "rid", "]", "\n", "", "else", ":", "\n", "              ", "this_role", "[", "0", ",", "5", "*", "aid", ":", "5", "*", "aid", "+", "5", ",", "j", "-", "1", "]", "=", "det", "[", "self", ".", "actions", "[", "aid", "]", "+", "'_'", "+", "rid", "]", "\n", "", "", "", "agents", "=", "np", ".", "concatenate", "(", "(", "agents", ",", "this_agent", ")", ",", "axis", "=", "0", ")", "\n", "roles", "=", "np", ".", "concatenate", "(", "(", "roles", ",", "this_role", ")", ",", "axis", "=", "0", ")", "\n", "", "", "return", "agents", ",", "roles", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vcoco_diagnose.VCOCOdiagnose._do_eval": [[193, 200], ["vcoco_diagnose.VCOCOdiagnose._get_vcocodb", "vcoco_diagnose.VCOCOdiagnose._visualize_error"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._get_vcocodb", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vcoco_diagnose.VCOCOdiagnose._visualize_error"], ["", "def", "_do_eval", "(", "self", ",", "detections_file", ",", "ovr_thresh", "=", "0.5", ")", ":", "\n", "    ", "vcocodb", "=", "self", ".", "_get_vcocodb", "(", ")", "\n", "\n", "#self._do_agent_eval(vcocodb, detections_file, ovr_thresh=ovr_thresh)", "\n", "#self._do_role_eval(vcocodb, detections_file, ovr_thresh=ovr_thresh, eval_type='scenario_1')", "\n", "#self._do_role_eval(vcocodb, detections_file, ovr_thresh=ovr_thresh, eval_type='scenario_2')", "\n", "self", ".", "_visualize_error", "(", "vcocodb", ",", "detections_file", ",", "ovr_thresh", "=", "ovr_thresh", ",", "eval_type", "=", "'scenario_1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vcoco_diagnose.VCOCOdiagnose._visualize_error": [[201, 480], ["numpy.zeros", "numpy.zeros", "range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "print", "print", "range", "open", "pickle.load", "len", "numpy.any", "numpy.all", "range", "vcoco_diagnose.VCOCOdiagnose._collect_detections_for_image", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "numpy.where", "numpy.sum", "range", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "int", "numpy.sum", "len", "print", "range", "range", "range", "range", "range", "range", "range", "range", "range", "len", "numpy.zeros", "range", "len", "numpy.array.argsort", "min", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "float", "numpy.sum", "numpy.maximum", "len", "len", "numpy.ones_like", "numpy.where", "agent_scores.argsort", "vcoco_diagnose.get_overlap", "get_overlap.argmax", "get_overlap.max", "numpy.all", "[].append", "numpy.all", "len", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "int", "int", "int", "int", "vcoco_diagnose.get_overlap", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "numpy.sum", "numpy.finfo", "numpy.where", "numpy.isnan().any", "gt_roles[].reshape", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "numpy.sum", "numpy.all", "numpy.all", "ValueError", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "numpy.sum", "numpy.isnan", "numpy.isnan", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "numpy.sum", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "numpy.sum", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "numpy.sum", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "numpy.sum", "numpy.sum", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._collect_detections_for_image", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.get_overlap", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.get_overlap"], ["", "def", "_visualize_error", "(", "self", ",", "vcocodb", ",", "detections_file", ",", "ovr_thresh", "=", "0.5", ",", "eval_type", "=", "'scenario_1'", ")", ":", "\n", "\n", "    ", "with", "open", "(", "detections_file", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "dets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "tp", "=", "[", "[", "[", "]", "for", "r", "in", "range", "(", "2", ")", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "fp1", "=", "[", "[", "[", "]", "for", "r", "in", "range", "(", "2", ")", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "# incorrect label", "\n", "fp2", "=", "[", "[", "[", "]", "for", "r", "in", "range", "(", "2", ")", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "# bck", "\n", "fp3", "=", "[", "[", "[", "]", "for", "r", "in", "range", "(", "2", ")", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "# person misloc", "\n", "fp4", "=", "[", "[", "[", "]", "for", "r", "in", "range", "(", "2", ")", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "# obj misloc", "\n", "fp5", "=", "[", "[", "[", "]", "for", "r", "in", "range", "(", "2", ")", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "# duplicate detection", "\n", "fp6", "=", "[", "[", "[", "]", "for", "r", "in", "range", "(", "2", ")", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "# mis-grouping", "\n", "fp7", "=", "[", "[", "[", "]", "for", "r", "in", "range", "(", "2", ")", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "# occlusion", "\n", "sc", "=", "[", "[", "[", "]", "for", "r", "in", "range", "(", "2", ")", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "\n", "npos", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# A + B", "\n", "ndet", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# B + C", "\n", "Test_occlusion", "=", "{", "}", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "vcocodb", ")", ")", ":", "\n", "\n", "      ", "image_id", "=", "vcocodb", "[", "i", "]", "[", "'id'", "]", "# img ID, not the full name (e.g. id= 165, 'file_name' = COCO_train2014_000000000165.jpg )", "\n", "gt_inds", "=", "np", ".", "where", "(", "vcocodb", "[", "i", "]", "[", "'gt_classes'", "]", "==", "1", ")", "[", "0", "]", "# index of the person's box among all object boxes", "\n", "# person boxes", "\n", "gt_boxes", "=", "vcocodb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_inds", "]", "# Nx4 all person's boxes in this image", "\n", "gt_actions", "=", "vcocodb", "[", "i", "]", "[", "'gt_actions'", "]", "[", "gt_inds", "]", "# Nx26 binary array indicating the actions performed by this person", "\n", "\n", "# some peorson instances don't have annotated actions", "\n", "# we ignore those instances", "\n", "ignore", "=", "np", ".", "any", "(", "gt_actions", "==", "-", "1", ",", "axis", "=", "1", ")", "\n", "assert", "np", ".", "all", "(", "gt_actions", "[", "np", ".", "where", "(", "ignore", "==", "True", ")", "[", "0", "]", "]", "==", "-", "1", ")", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "npos", "[", "aid", "]", "+=", "np", ".", "sum", "(", "gt_actions", "[", ":", ",", "aid", "]", "==", "1", ")", "# how many actions are involved in this image(for all the human)", "\n", "\n", "", "pred_agents", ",", "pred_roles", "=", "self", ".", "_collect_detections_for_image", "(", "dets", ",", "image_id", ")", "\n", "# pred_agents Mx30", "\n", "# pred_roles Mx(5*26)x2", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "<", "2", ":", "\n", "# if action has no role, then no role AP computed", "\n", "          ", "continue", "\n", "\n", "", "for", "rid", "in", "range", "(", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "-", "1", ")", ":", "# rid = 0, instr; rid = 1, obj", "\n", "\n", "# keep track of detected instances for each action for each role. Is this gt_human used or not.", "\n", "          ", "covered", "=", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "# get gt roles for action and role", "\n", "gt_role_inds", "=", "vcocodb", "[", "i", "]", "[", "'gt_role_id'", "]", "[", "gt_inds", ",", "aid", ",", "rid", "]", "# Nx1 index of the object among all detected objects related to this action. -1 means missing object.", "\n", "gt_roles", "=", "-", "np", ".", "ones_like", "(", "gt_boxes", ")", "# Nx4 [-1, -1, -1, -1] means gt missing object", "\n", "for", "j", "in", "range", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ":", "# loop all gt human instance", "\n", "            ", "if", "gt_role_inds", "[", "j", "]", ">", "-", "1", ":", "#", "\n", "              ", "gt_roles", "[", "j", "]", "=", "vcocodb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_role_inds", "[", "j", "]", "]", "\n", "\n", "", "", "agent_boxes", "=", "pred_agents", "[", ":", ",", ":", "4", "]", "# Mx4 all detected human box", "\n", "role_boxes", "=", "pred_roles", "[", ":", ",", "5", "*", "aid", ":", "5", "*", "aid", "+", "4", ",", "rid", "]", "# Mx4 detected object(role) box for this human and action", "\n", "agent_scores", "=", "pred_roles", "[", ":", ",", "5", "*", "aid", "+", "4", ",", "rid", "]", "# Mx1, action score for this human, object and action", "\n", "\n", "if", "role_boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "continue", "\n", "\n", "valid", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "role_boxes", ")", ".", "any", "(", ")", "==", "False", ")", "[", "0", "]", "\n", "\n", "agent_scores", "=", "agent_scores", "[", "valid", "]", "\n", "agent_boxes", "=", "agent_boxes", "[", "valid", ",", ":", "]", "\n", "role_boxes", "=", "role_boxes", "[", "valid", ",", ":", "]", "\n", "\n", "#ndet[aid][rid] += agent_boxes.shape[0]", "\n", "\n", "# sort in descending order", "\n", "idx", "=", "agent_scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# A action can be done by multiple human.", "\n", "for", "j", "in", "idx", ":", "# in this image, this action with highest action score", "\n", "            ", "pred_box", "=", "agent_boxes", "[", "j", ",", ":", "]", "\n", "overlaps", "=", "get_overlap", "(", "gt_boxes", ",", "pred_box", ")", "# gt_boxes: gt human box", "\n", "\n", "\n", "jmax", "=", "overlaps", ".", "argmax", "(", ")", "# which gt_box best matches this detected box", "\n", "ovmax", "=", "overlaps", ".", "max", "(", ")", "\n", "\n", "# if matched with an instance with no annotations", "\n", "# continue", "\n", "if", "ignore", "[", "jmax", "]", ":", "\n", "              ", "continue", "\n", "\n", "# overlap between predicted role and gt role", "\n", "", "if", "np", ".", "all", "(", "gt_roles", "[", "jmax", ",", ":", "]", "==", "-", "1", ")", ":", "# if no gt role", "\n", "              ", "if", "eval_type", "==", "'scenario_1'", ":", "\n", "                ", "if", "np", ".", "all", "(", "role_boxes", "[", "j", ",", ":", "]", "==", "0.0", ")", "or", "np", ".", "all", "(", "np", ".", "isnan", "(", "role_boxes", "[", "j", ",", ":", "]", ")", ")", ":", "\n", "# if no role is predicted, mark it as correct role overlap", "\n", "                  ", "ov_role", "=", "1.0", "\n", "", "else", ":", "\n", "# if a role is predicted, mark it as false ", "\n", "                  ", "ov_role", "=", "-", "1.0", "\n", "", "", "elif", "eval_type", "==", "'scenario_2'", ":", "\n", "# if no gt role, role prediction is always correct, irrespective of the actual predition", "\n", "                ", "ov_role", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown eval type'", ")", "\n", "", "", "else", ":", "\n", "              ", "ov_role", "=", "get_overlap", "(", "gt_roles", "[", "jmax", ",", ":", "]", ".", "reshape", "(", "(", "1", ",", "4", ")", ")", ",", "role_boxes", "[", "j", ",", ":", "]", ")", "\n", "\n", "", "is_true_action", "=", "(", "gt_actions", "[", "jmax", ",", "aid", "]", "==", "1", ")", "# Is this gt human actually doing this action?", "\n", "sc", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "agent_scores", "[", "j", "]", ")", "\n", "ndet", "[", "aid", "]", "[", "rid", "]", "+=", "1", "\n", "if", "np", ".", "all", "(", "gt_actions", "[", ":", ",", "aid", "]", "==", "0", ")", ":", "# All gt are not this action class. All detections are incorrect labels.", "\n", "                ", "fp1", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "1", ")", "\n", "fp2", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp3", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp4", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp5", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp6", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp7", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "continue", "\n", "", "elif", "is_true_action", "==", "False", ":", "# This detection j is a incorrect label", "\n", "                ", "fp1", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "1", ")", "\n", "fp2", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp3", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp4", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp5", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp6", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp7", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "", "elif", "(", "ovmax", "<", "0.1", ")", ":", "# bck", "\n", "                ", "fp1", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp2", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "1", ")", "\n", "fp3", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp4", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp5", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp6", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp7", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "", "elif", "(", "ovmax", "<", "0.5", ")", "&", "(", "ovmax", ">=", "0.1", ")", ":", "# person misloc", "\n", "                ", "fp1", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp2", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp3", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "1", ")", "\n", "fp4", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp5", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp6", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp7", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "", "elif", "(", "ovmax", ">=", "0.5", ")", "&", "(", "ov_role", "==", "-", "1.0", ")", ":", "# occlusion", "\n", "                ", "fp1", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp2", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp3", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp4", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp5", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp6", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp7", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "", "elif", "(", "ovmax", ">=", "0.5", ")", "&", "(", "0", "<=", "ov_role", "<=", "0.1", ")", ":", "# mis-grouping", "\n", "                ", "fp1", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp2", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp3", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp4", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp5", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp6", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "1", ")", "\n", "fp7", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "", "elif", "(", "ovmax", ">=", "0.5", ")", "&", "(", "0.1", "<=", "ov_role", "<", "0.5", ")", ":", "# obj misloc", "\n", "                ", "fp1", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp2", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp3", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp4", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "1", ")", "\n", "fp5", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp6", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp7", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "", "elif", "(", "ovmax", ">=", "0.5", ")", "&", "(", "ov_role", ">=", "0.5", ")", ":", "# true positive", "\n", "                ", "if", "not", "covered", "[", "jmax", "]", ":", "\n", "                    ", "fp1", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp2", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp3", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp4", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp5", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp6", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp7", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "1", ")", "\n", "covered", "[", "jmax", "]", "=", "True", "\n", "", "else", ":", "\n", "                    ", "fp1", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp2", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp3", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp4", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp5", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "1", ")", "\n", "fp6", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "fp7", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", "[", "rid", "]", ".", "append", "(", "0", ")", "\n", "\n", "", "", "", "", "", "", "fp_inc", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp_bck", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp_Hmis", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp_Omis", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp_dupl", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp_misg", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp_occl", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rec", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "prec", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tp_", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "      ", "if", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "<", "2", ":", "\n", "        ", "continue", "\n", "\n", "", "for", "rid", "in", "range", "(", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "-", "1", ")", ":", "\n", "        ", "a_fp1", "=", "np", ".", "array", "(", "fp1", "[", "aid", "]", "[", "rid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_fp2", "=", "np", ".", "array", "(", "fp2", "[", "aid", "]", "[", "rid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_fp3", "=", "np", ".", "array", "(", "fp3", "[", "aid", "]", "[", "rid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_fp4", "=", "np", ".", "array", "(", "fp4", "[", "aid", "]", "[", "rid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_fp5", "=", "np", ".", "array", "(", "fp5", "[", "aid", "]", "[", "rid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_fp6", "=", "np", ".", "array", "(", "fp6", "[", "aid", "]", "[", "rid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_fp7", "=", "np", ".", "array", "(", "fp7", "[", "aid", "]", "[", "rid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_sc", "=", "np", ".", "array", "(", "sc", "[", "aid", "]", "[", "rid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_tp", "=", "np", ".", "array", "(", "tp", "[", "aid", "]", "[", "rid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# sort in descending score order", "\n", "idx", "=", "a_sc", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "a_fp1", "=", "a_fp1", "[", "idx", "]", "\n", "a_fp2", "=", "a_fp2", "[", "idx", "]", "\n", "a_fp3", "=", "a_fp3", "[", "idx", "]", "\n", "a_fp4", "=", "a_fp4", "[", "idx", "]", "\n", "a_fp5", "=", "a_fp5", "[", "idx", "]", "\n", "a_fp6", "=", "a_fp6", "[", "idx", "]", "\n", "a_fp7", "=", "a_fp7", "[", "idx", "]", "\n", "a_tp", "=", "a_tp", "[", "idx", "]", "\n", "a_sc", "=", "a_sc", "[", "idx", "]", "\n", "\n", "# min(# GT, # not zero)", "\n", "num_inst", "=", "int", "(", "min", "(", "npos", "[", "aid", "]", ",", "len", "(", "a_sc", ")", ")", ")", "\n", "\n", "\n", "a_fp1", "=", "a_fp1", "[", ":", "num_inst", "]", "\n", "a_fp2", "=", "a_fp2", "[", ":", "num_inst", "]", "\n", "a_fp3", "=", "a_fp3", "[", ":", "num_inst", "]", "\n", "a_fp4", "=", "a_fp4", "[", ":", "num_inst", "]", "\n", "a_fp5", "=", "a_fp5", "[", ":", "num_inst", "]", "\n", "a_fp6", "=", "a_fp6", "[", ":", "num_inst", "]", "\n", "a_fp7", "=", "a_fp7", "[", ":", "num_inst", "]", "\n", "a_tp", "=", "a_tp", "[", ":", "num_inst", "]", "\n", "a_sc", "=", "a_sc", "[", ":", "num_inst", "]", "\n", "\n", "frac_fp1", "=", "np", ".", "sum", "(", "a_fp1", ")", "/", "(", "num_inst", "-", "np", ".", "sum", "(", "a_tp", ")", ")", "\n", "frac_fp2", "=", "np", ".", "sum", "(", "a_fp2", ")", "/", "(", "num_inst", "-", "np", ".", "sum", "(", "a_tp", ")", ")", "\n", "frac_fp3", "=", "np", ".", "sum", "(", "a_fp3", ")", "/", "(", "num_inst", "-", "np", ".", "sum", "(", "a_tp", ")", ")", "\n", "frac_fp4", "=", "np", ".", "sum", "(", "a_fp4", ")", "/", "(", "num_inst", "-", "np", ".", "sum", "(", "a_tp", ")", ")", "\n", "frac_fp5", "=", "np", ".", "sum", "(", "a_fp5", ")", "/", "(", "num_inst", "-", "np", ".", "sum", "(", "a_tp", ")", ")", "\n", "frac_fp6", "=", "np", ".", "sum", "(", "a_fp6", ")", "/", "(", "num_inst", "-", "np", ".", "sum", "(", "a_tp", ")", ")", "\n", "frac_fp7", "=", "np", ".", "sum", "(", "a_fp7", ")", "/", "(", "num_inst", "-", "np", ".", "sum", "(", "a_tp", ")", ")", "\n", "\n", "tp_", "[", "aid", ",", "rid", "]", "=", "np", ".", "sum", "(", "a_tp", ")", "\n", "rec", "[", "aid", ",", "rid", "]", "=", "np", ".", "sum", "(", "a_tp", ")", "/", "float", "(", "npos", "[", "aid", "]", ")", "\n", "prec", "[", "aid", ",", "rid", "]", "=", "np", ".", "sum", "(", "a_tp", ")", "/", "np", ".", "maximum", "(", "np", ".", "sum", "(", "a_fp1", ")", "+", "np", ".", "sum", "(", "a_fp2", ")", "+", "np", ".", "sum", "(", "a_fp3", ")", "+", "np", ".", "sum", "(", "a_fp4", ")", "+", "np", ".", "sum", "(", "a_fp5", ")", "+", "np", ".", "sum", "(", "a_fp6", ")", "+", "np", ".", "sum", "(", "a_fp7", ")", "+", "np", ".", "sum", "(", "a_tp", ")", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "\n", "fp_inc", "[", "aid", ",", "rid", "]", "=", "frac_fp1", "\n", "fp_bck", "[", "aid", ",", "rid", "]", "=", "frac_fp2", "\n", "fp_Hmis", "[", "aid", ",", "rid", "]", "=", "frac_fp3", "\n", "fp_Omis", "[", "aid", ",", "rid", "]", "=", "frac_fp4", "\n", "fp_dupl", "[", "aid", ",", "rid", "]", "=", "frac_fp5", "\n", "fp_misg", "[", "aid", ",", "rid", "]", "=", "frac_fp6", "\n", "fp_occl", "[", "aid", ",", "rid", "]", "=", "frac_fp7", "\n", "\n", "", "", "print", "(", "'--------------------------------------------Reporting Error Analysis (%)-----------------------------------------------'", ")", "\n", "print", "(", "'{: >27} {:} {:} {:} {:} {:} {:}'", ".", "format", "(", "' '", ",", "'inc'", ",", "'bck'", ",", "'H_mis'", ",", "'O_mis'", ",", "'mis-gr'", ",", "'occl'", ")", ")", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "      ", "if", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "<", "2", ":", "continue", "\n", "for", "rid", "in", "range", "(", "len", "(", "self", ".", "roles", "[", "aid", "]", ")", "-", "1", ")", ":", "\n", "        ", "print", "(", "'{: >23}: {:6.2f} {:4.2f} {:4.2f} {:5.2f} {:5.2f} {:5.2f} (rec:{:5.2f} = #tp:{:4d}/#pos:{:4d}) (prec:{:5.2f} = #tp:{:4d}/#det:{:4d})'", ".", "format", "(", "self", ".", "actions", "[", "aid", "]", "+", "'-'", "+", "self", ".", "roles", "[", "aid", "]", "[", "rid", "+", "1", "]", ",", "fp_inc", "[", "aid", ",", "rid", "]", "*", "100.0", ",", "fp_bck", "[", "aid", ",", "rid", "]", "*", "100.0", ",", "fp_Hmis", "[", "aid", ",", "rid", "]", "*", "100.0", ",", "fp_Omis", "[", "aid", ",", "rid", "]", "*", "100.0", ",", "fp_misg", "[", "aid", ",", "rid", "]", "*", "100.0", ",", "fp_occl", "[", "aid", ",", "rid", "]", "*", "100.0", ",", "rec", "[", "aid", ",", "rid", "]", "*", "100.0", ",", "int", "(", "tp_", "[", "aid", ",", "rid", "]", ")", ",", "int", "(", "npos", "[", "aid", "]", ")", ",", "prec", "[", "aid", ",", "rid", "]", "*", "100.0", ",", "int", "(", "tp_", "[", "aid", ",", "rid", "]", ")", ",", "int", "(", "ndet", "[", "aid", ",", "rid", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vcoco_diagnose._load_vcoco": [[481, 491], ["print", "range", "open", "json.load", "len", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "len", "numpy.array"], "function", ["None"], ["", "", "", "", "def", "_load_vcoco", "(", "vcoco_file", ")", ":", "\n", "  ", "print", "(", "'loading vcoco annotations...'", ")", "\n", "with", "open", "(", "vcoco_file", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "vsrl_data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "vsrl_data", ")", ")", ":", "\n", "    ", "vsrl_data", "[", "i", "]", "[", "'role_object_id'", "]", "=", "np", ".", "array", "(", "vsrl_data", "[", "i", "]", "[", "'role_object_id'", "]", ")", ".", "reshape", "(", "(", "len", "(", "vsrl_data", "[", "i", "]", "[", "'role_name'", "]", ")", ",", "-", "1", ")", ")", ".", "T", "\n", "for", "j", "in", "[", "'ann_id'", ",", "'label'", ",", "'image_id'", "]", ":", "\n", "        ", "vsrl_data", "[", "i", "]", "[", "j", "]", "=", "np", ".", "array", "(", "vsrl_data", "[", "i", "]", "[", "j", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "", "return", "vsrl_data", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vcoco_diagnose.clip_xyxy_to_image": [[493, 499], ["numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "clip_xyxy_to_image", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "height", ",", "width", ")", ":", "\n", "  ", "x1", "=", "np", ".", "minimum", "(", "width", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "x1", ")", ")", "\n", "y1", "=", "np", ".", "minimum", "(", "height", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "y1", ")", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "width", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "x2", ")", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "height", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "y2", ")", ")", "\n", "return", "x1", ",", "y1", ",", "x2", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vcoco_diagnose.get_overlap": [[501, 517], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "get_overlap", "(", "boxes", ",", "ref_box", ")", ":", "\n", "  ", "ixmin", "=", "np", ".", "maximum", "(", "boxes", "[", ":", ",", "0", "]", ",", "ref_box", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "boxes", "[", ":", ",", "1", "]", ",", "ref_box", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "2", "]", ",", "ref_box", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "3", "]", ",", "ref_box", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "(", "ref_box", "[", "2", "]", "-", "ref_box", "[", "0", "]", "+", "1.", ")", "*", "(", "ref_box", "[", "3", "]", "-", "ref_box", "[", "1", "]", "+", "1.", ")", "+", "\n", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1.", ")", "*", "\n", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1.", ")", "-", "inters", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vcoco_diagnose.voc_ap": [[519, 540], ["numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ")", ":", "\n", "  ", "\"\"\" ap = voc_ap(rec, prec)\n  Compute VOC AP given precision and recall.\n  [as defined in PASCAL VOC]\n  \"\"\"", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "      ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.tools.obtain_hoi_to_obj": [[10, 35], ["open", "open", "open", "open.readlines", "line.strip.strip", "open.readlines", "line.strip.strip", "int", "line.strip.split", "line.strip.split", "int", "int"], "function", ["None"], ["def", "obtain_hoi_to_obj", "(", ")", ":", "\n", "    ", "fobj", "=", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/hico_list_obj.txt'", ")", "\n", "fhoi", "=", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/hico_list_hoi.txt'", ")", "\n", "fvb", "=", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/hico_list_vb.txt'", ")", "\n", "hoi_to_obj", "=", "{", "}", "\n", "obj_id", "=", "{", "}", "\n", "obj_name_lists", "=", "[", "''", "]", "*", "80", "\n", "\n", "for", "line", "in", "fobj", ".", "readlines", "(", ")", "[", "2", ":", "]", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "cid", ",", "obj", "=", "[", "item", "for", "item", "in", "line", ".", "split", "(", "' '", ")", "if", "item", "!=", "''", "]", "\n", "obj_id", "[", "obj", "]", "=", "int", "(", "cid", ")", "-", "1", "\n", "obj_name_lists", "[", "int", "(", "cid", ")", "-", "1", "]", "=", "obj", "\n", "\n", "", "for", "line", "in", "fhoi", ".", "readlines", "(", ")", "[", "2", ":", "]", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "# print(line.split(' '), [item for item in line.split(' ') if item != ''])", "\n", "\n", "cid", ",", "obj", ",", "vb", "=", "[", "item", "for", "item", "in", "line", ".", "split", "(", "' '", ")", "if", "item", "!=", "''", "]", "\n", "hoi_to_obj", "[", "int", "(", "cid", ")", "-", "1", "]", "=", "obj_id", "[", "obj", "]", "\n", "\n", "# import json", "\n", "# cat_idx = json.load(open('/data1/zhihou/dataset/data/category.json'))", "\n", "\n", "", "return", "hoi_to_obj", ",", "obj_name_lists", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.tools.obtain_hoi_to_verb": [[36, 62], ["open", "open", "open.readlines", "line.strip.strip", "open.readlines", "line.strip.strip", "int", "line.strip.split", "line.strip.split", "int", "int"], "function", ["None"], ["", "def", "obtain_hoi_to_verb", "(", ")", ":", "\n", "# fobj = open(cfg.DATA_DIR + '/hico_list_obj.txt')", "\n", "    ", "fhoi", "=", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/hico_list_hoi.txt'", ")", "\n", "fvb", "=", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/hico_list_vb.txt'", ")", "\n", "hoi_to_verb", "=", "{", "}", "\n", "verb_id", "=", "{", "}", "\n", "verb_name_lists", "=", "[", "''", "]", "*", "117", "\n", "\n", "for", "line", "in", "fvb", ".", "readlines", "(", ")", "[", "2", ":", "]", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "cid", ",", "verb", "=", "[", "item", "for", "item", "in", "line", ".", "split", "(", "' '", ")", "if", "item", "!=", "''", "]", "\n", "verb_id", "[", "verb", "]", "=", "int", "(", "cid", ")", "-", "1", "\n", "# print(verb, verb_id[verb])", "\n", "verb_name_lists", "[", "int", "(", "cid", ")", "-", "1", "]", "=", "verb", "\n", "\n", "", "for", "line", "in", "fhoi", ".", "readlines", "(", ")", "[", "2", ":", "]", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "# print(line.split(' '), [item for item in line.split(' ') if item != ''])", "\n", "\n", "cid", ",", "obj", ",", "vb", "=", "[", "item", "for", "item", "in", "line", ".", "split", "(", "' '", ")", "if", "item", "!=", "''", "]", "\n", "hoi_to_verb", "[", "int", "(", "cid", ")", "-", "1", "]", "=", "verb_id", "[", "vb", "]", "\n", "\n", "# import json", "\n", "# cat_idx = json.load(open('/data1/zhihou/dataset/data/category.json'))", "\n", "\n", "", "return", "hoi_to_verb", ",", "verb_name_lists", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.tools.visual_tsne": [[63, 104], ["tools.obtain_hoi_to_obj", "time", "manifold.TSNE", "manifold.TSNE.fit_transform", "print", "time", "print", "cm.rainbow", "range", "plt.title", "numpy.linspace", "plt.scatter", "handles.append", "plt.savefig", "plt.show"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.obtain_hoi_to_obj"], ["", "def", "visual_tsne", "(", "X", ",", "y", ",", "label_nums", "=", "80", ",", "title", "=", "'tsne'", ",", "save_fig", "=", "False", ")", ":", "\n", "    ", "hoi_to_obj", ",", "obj_names", "=", "obtain_hoi_to_obj", "(", ")", "\n", "\n", "\n", "\n", "import", "numpy", "as", "np", "\n", "\n", "from", "sklearn", "import", "manifold", "\n", "from", "time", "import", "time", "\n", "import", "matplotlib", ".", "cm", "as", "cm", "\n", "\n", "n_components", "=", "2", "\n", "\n", "t0", "=", "time", "(", ")", "\n", "tsne", "=", "manifold", ".", "TSNE", "(", "n_components", "=", "n_components", ",", "init", "=", "'random'", ",", "\n", "random_state", "=", "0", ",", "perplexity", "=", "10", ")", "\n", "Y", "=", "tsne", ".", "fit_transform", "(", "X", ")", "\n", "print", "(", "Y", ".", "shape", ")", "\n", "t1", "=", "time", "(", ")", "\n", "print", "(", "\"circles, perplexity=%d in %.2g sec\"", "%", "(", "30", ",", "t1", "-", "t0", ")", ")", "\n", "# ax.set_title(\"Perplexity=30\")", "\n", "colors", "=", "cm", ".", "rainbow", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "label_nums", ")", ")", "\n", "handles", "=", "[", "]", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "for", "i", "in", "range", "(", "label_nums", ")", ":", "\n", "        ", "label", "=", "y", "==", "i", "\n", "# print(label, colors[i])", "\n", "p", "=", "plt", ".", "scatter", "(", "Y", "[", "label", ",", "0", "]", ",", "Y", "[", "label", ",", "1", "]", ",", "c", "=", "colors", "[", "i", "]", ")", "\n", "# p = plt.plot(Y[label, 0], Y[label, 1], c=colors[i], label=obj_names[i])", "\n", "handles", ".", "append", "(", "p", ")", "\n", "# plt.legend(loc=2, bbox_to_anchor=(1.05,1.0),borderaxespad = 0., fontsize = 'xx-small')", "\n", "# plt.legend(handles[:3], obj_names[:3], loc=10)", "\n", "# ax.xaxis.set_major_formatter(NullFormatter())", "\n", "# ax.yaxis.set_major_formatter(NullFormatter())", "\n", "# ax.axis('tight')", "\n", "", "plt", ".", "title", "(", "title", ")", "\n", "if", "save_fig", ":", "\n", "        ", "plt", ".", "savefig", "(", "cfg", ".", "LOCAL_DATA", "+", "'/{}.jpg'", ".", "format", "(", "title", ")", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.tools.get_word2vec": [[106, 113], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "get_word2vec", "(", ")", ":", "\n", "    ", "import", "pickle", "\n", "word2vec_pkl", "=", "cfg", ".", "LOCAL_DATA0", "+", "'/coco_glove_word2vec.pkl'", "\n", "# index is sorted by alphabet", "\n", "with", "open", "(", "word2vec_pkl", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "word2vec", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "word2vec", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.tools.get_neighborhood_matrix": [[115, 129], ["tools.get_word2vec", "numpy.expand_dims", "numpy.tile", "numpy.expand_dims", "numpy.tile", "numpy.mean", "numpy.zeros", "range", "numpy.square", "numpy.argsort", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_word2vec"], ["", "def", "get_neighborhood_matrix", "(", "neighbor_num", "=", "5", ")", ":", "\n", "    ", "word2vec_base", "=", "get_word2vec", "(", ")", "\n", "word2vec", "=", "np", ".", "expand_dims", "(", "word2vec_base", ",", "axis", "=", "0", ")", "\n", "t1", "=", "np", ".", "tile", "(", "word2vec", ",", "[", "80", ",", "1", ",", "1", "]", ")", "\n", "\n", "word2vec1", "=", "np", ".", "expand_dims", "(", "word2vec_base", ",", "axis", "=", "1", ")", "\n", "t2", "=", "np", ".", "tile", "(", "word2vec1", ",", "[", "1", ",", "80", ",", "1", "]", ")", "\n", "means", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "t1", "-", "t2", ")", ",", "axis", "=", "-", "1", ")", "\n", "neighbors", "=", "np", ".", "argsort", "(", "means", ",", "axis", "=", "-", "1", ")", "[", ":", ",", ":", "neighbor_num", "+", "1", "]", "\n", "matrix", "=", "np", ".", "zeros", "(", "[", "80", ",", "80", "]", ",", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "neighbors", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "neighbors", "[", "i", "]", ")", ")", ":", "\n", "            ", "matrix", "[", "i", "]", "[", "neighbors", "[", "i", "]", "[", "j", "]", "]", "=", "1", "\n", "", "", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.tools.get_neighborhood_matrix2": [[131, 150], ["tools.get_word2vec", "numpy.expand_dims", "numpy.tile", "numpy.expand_dims", "numpy.tile", "numpy.mean", "numpy.reshape", "numpy.asarray", "numpy.square", "numpy.sort"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_word2vec"], ["", "def", "get_neighborhood_matrix2", "(", "sorted_nums", "=", "480", ")", ":", "\n", "    ", "\"\"\"\n    This is for word embedding similarity between objects\n    :param sorted_nums:\n    :return:\n    \"\"\"", "\n", "word2vec_base", "=", "get_word2vec", "(", ")", "\n", "word2vec", "=", "np", ".", "expand_dims", "(", "word2vec_base", ",", "axis", "=", "0", ")", "\n", "t1", "=", "np", ".", "tile", "(", "word2vec", ",", "[", "80", ",", "1", ",", "1", "]", ")", "\n", "\n", "word2vec1", "=", "np", ".", "expand_dims", "(", "word2vec_base", ",", "axis", "=", "1", ")", "\n", "t2", "=", "np", ".", "tile", "(", "word2vec1", ",", "[", "1", ",", "80", ",", "1", "]", ")", "\n", "means", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "t1", "-", "t2", ")", ",", "axis", "=", "-", "1", ")", "\n", "# print(means.shape)", "\n", "a", "=", "np", ".", "reshape", "(", "means", ",", "(", "-", "1", ")", ")", "\n", "b", "=", "np", ".", "sort", "(", "a", ")", "[", "sorted_nums", "]", "\n", "# print(b, np.sort(a))", "\n", "matrix", "=", "np", ".", "asarray", "(", "means", "<", "b", ",", "np", ".", "float32", ")", "\n", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.tools.get_convert_matrix": [[152, 167], ["numpy.zeros", "pickle.load", "pickle.load.items", "numpy.transpose", "numpy.zeros", "pickle.load", "pickle.load.items", "numpy.transpose", "open", "open"], "function", ["None"], ["", "def", "get_convert_matrix", "(", "verb_class_num", "=", "117", ",", "obj_class_num", "=", "80", ")", ":", "\n", "    ", "import", "pickle", "\n", "import", "numpy", "as", "np", "\n", "verb_to_HO_matrix", "=", "np", ".", "zeros", "(", "(", "600", ",", "verb_class_num", ")", ",", "np", ".", "float32", ")", "\n", "hoi_to_vb", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/hoi_to_vb.pkl'", ",", "'rb'", ")", ")", "\n", "for", "k", ",", "v", "in", "hoi_to_vb", ".", "items", "(", ")", ":", "\n", "        ", "verb_to_HO_matrix", "[", "k", "]", "[", "v", "]", "=", "1", "\n", "", "verb_to_HO_matrix", "=", "np", ".", "transpose", "(", "verb_to_HO_matrix", ")", "\n", "\n", "obj_to_HO_matrix", "=", "np", ".", "zeros", "(", "(", "600", ",", "obj_class_num", ")", ",", "np", ".", "float32", ")", "\n", "hoi_to_obj", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/hoi_to_obj.pkl'", ",", "'rb'", ")", ")", "\n", "for", "k", ",", "v", "in", "hoi_to_obj", ".", "items", "(", ")", ":", "\n", "        ", "obj_to_HO_matrix", "[", "k", "]", "[", "v", "]", "=", "1", "\n", "", "obj_to_HO_matrix", "=", "np", ".", "transpose", "(", "obj_to_HO_matrix", ")", "\n", "return", "verb_to_HO_matrix", ",", "obj_to_HO_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.tools.get_convert_matrix_coco2": [[169, 216], ["numpy.zeros", "range", "numpy.transpose", "numpy.zeros", "range", "numpy.transpose", "len", "len"], "function", ["None"], ["", "def", "get_convert_matrix_coco2", "(", "verb_class_num", "=", "29", ",", "obj_class_num", "=", "80", ")", ":", "\n", "    ", "set_list", "=", "[", "(", "0", ",", "38", ")", ",", "(", "1", ",", "31", ")", ",", "(", "1", ",", "32", ")", ",", "(", "2", ",", "43", ")", ",", "(", "2", ",", "44", ")", ",", "(", "2", ",", "77", ")", ",", "(", "4", ",", "1", ")", ",", "(", "4", ",", "19", ")", ",", "(", "4", ",", "28", ")", ",", "(", "4", ",", "46", ")", ",", "(", "4", ",", "47", ")", ",", "\n", "(", "4", ",", "48", ")", ",", "\n", "(", "4", ",", "49", ")", ",", "(", "4", ",", "51", ")", ",", "(", "4", ",", "52", ")", ",", "(", "4", ",", "54", ")", ",", "(", "4", ",", "55", ")", ",", "(", "4", ",", "56", ")", ",", "(", "5", ",", "2", ")", ",", "(", "5", ",", "3", ")", ",", "(", "5", ",", "4", ")", ",", "(", "5", ",", "6", ")", ",", "(", "5", ",", "7", ")", ",", "(", "5", ",", "8", ")", ",", "\n", "(", "5", ",", "9", ")", ",", "(", "5", ",", "18", ")", ",", "(", "5", ",", "21", ")", ",", "(", "6", ",", "68", ")", ",", "(", "7", ",", "33", ")", ",", "(", "8", ",", "64", ")", ",", "(", "9", ",", "47", ")", ",", "(", "9", ",", "48", ")", ",", "(", "9", ",", "49", ")", ",", "(", "9", ",", "50", ")", ",", "(", "9", ",", "51", ")", ",", "\n", "(", "9", ",", "52", ")", ",", "\n", "(", "9", ",", "53", ")", ",", "(", "9", ",", "54", ")", ",", "(", "9", ",", "55", ")", ",", "(", "9", ",", "56", ")", ",", "(", "10", ",", "2", ")", ",", "(", "10", ",", "4", ")", ",", "(", "10", ",", "14", ")", ",", "(", "10", ",", "18", ")", ",", "(", "10", ",", "21", ")", ",", "(", "10", ",", "25", ")", ",", "(", "10", ",", "27", ")", ",", "\n", "(", "10", ",", "29", ")", ",", "(", "10", ",", "57", ")", ",", "(", "10", ",", "58", ")", ",", "(", "10", ",", "60", ")", ",", "(", "10", ",", "61", ")", ",", "(", "10", ",", "62", ")", ",", "(", "10", ",", "64", ")", ",", "(", "11", ",", "31", ")", ",", "(", "11", ",", "32", ")", ",", "(", "11", ",", "37", ")", ",", "\n", "(", "11", ",", "38", ")", ",", "(", "12", ",", "14", ")", ",", "(", "12", ",", "57", ")", ",", "(", "12", ",", "58", ")", ",", "(", "12", ",", "60", ")", ",", "(", "12", ",", "61", ")", ",", "(", "13", ",", "40", ")", ",", "(", "13", ",", "41", ")", ",", "(", "13", ",", "42", ")", ",", "(", "13", ",", "46", ")", ",", "\n", "(", "14", ",", "1", ")", ",", "\n", "(", "14", ",", "25", ")", ",", "(", "14", ",", "26", ")", ",", "(", "14", ",", "27", ")", ",", "(", "14", ",", "29", ")", ",", "(", "14", ",", "30", ")", ",", "(", "14", ",", "31", ")", ",", "(", "14", ",", "32", ")", ",", "(", "14", ",", "33", ")", ",", "(", "14", ",", "34", ")", ",", "(", "14", ",", "35", ")", ",", "\n", "(", "14", ",", "37", ")", ",", "(", "14", ",", "38", ")", ",", "(", "14", ",", "39", ")", ",", "(", "14", ",", "40", ")", ",", "(", "14", ",", "41", ")", ",", "(", "14", ",", "42", ")", ",", "(", "14", ",", "47", ")", ",", "(", "14", ",", "50", ")", ",", "(", "14", ",", "68", ")", ",", "(", "14", ",", "74", ")", ",", "\n", "(", "14", ",", "75", ")", ",", "(", "14", ",", "78", ")", ",", "(", "15", ",", "30", ")", ",", "(", "15", ",", "33", ")", ",", "(", "16", ",", "43", ")", ",", "(", "16", ",", "44", ")", ",", "(", "16", ",", "45", ")", ",", "(", "18", ",", "1", ")", ",", "(", "18", ",", "2", ")", ",", "(", "18", ",", "3", ")", ",", "\n", "(", "18", ",", "4", ")", ",", "\n", "(", "18", ",", "5", ")", ",", "(", "18", ",", "6", ")", ",", "(", "18", ",", "7", ")", ",", "(", "18", ",", "8", ")", ",", "(", "18", ",", "11", ")", ",", "(", "18", ",", "14", ")", ",", "(", "18", ",", "15", ")", ",", "(", "18", ",", "16", ")", ",", "(", "18", ",", "17", ")", ",", "(", "18", ",", "18", ")", ",", "\n", "(", "18", ",", "19", ")", ",", "\n", "(", "18", ",", "20", ")", ",", "(", "18", ",", "21", ")", ",", "(", "18", ",", "24", ")", ",", "(", "18", ",", "25", ")", ",", "(", "18", ",", "26", ")", ",", "(", "18", ",", "27", ")", ",", "(", "18", ",", "28", ")", ",", "(", "18", ",", "29", ")", ",", "(", "18", ",", "30", ")", ",", "(", "18", ",", "31", ")", ",", "\n", "(", "18", ",", "32", ")", ",", "(", "18", ",", "33", ")", ",", "(", "18", ",", "34", ")", ",", "(", "18", ",", "35", ")", ",", "(", "18", ",", "36", ")", ",", "(", "18", ",", "37", ")", ",", "(", "18", ",", "38", ")", ",", "(", "18", ",", "39", ")", ",", "(", "18", ",", "40", ")", ",", "(", "18", ",", "41", ")", ",", "\n", "(", "18", ",", "42", ")", ",", "(", "18", ",", "43", ")", ",", "(", "18", ",", "44", ")", ",", "(", "18", ",", "45", ")", ",", "(", "18", ",", "46", ")", ",", "(", "18", ",", "47", ")", ",", "(", "18", ",", "48", ")", ",", "(", "18", ",", "49", ")", ",", "(", "18", ",", "51", ")", ",", "(", "18", ",", "53", ")", ",", "\n", "(", "18", ",", "54", ")", ",", "(", "18", ",", "55", ")", ",", "(", "18", ",", "56", ")", ",", "(", "18", ",", "57", ")", ",", "(", "18", ",", "61", ")", ",", "(", "18", ",", "62", ")", ",", "(", "18", ",", "63", ")", ",", "(", "18", ",", "64", ")", ",", "(", "18", ",", "65", ")", ",", "(", "18", ",", "66", ")", ",", "\n", "(", "18", ",", "67", ")", ",", "(", "18", ",", "68", ")", ",", "(", "18", ",", "73", ")", ",", "(", "18", ",", "74", ")", ",", "(", "18", ",", "75", ")", ",", "(", "18", ",", "77", ")", ",", "(", "19", ",", "35", ")", ",", "(", "19", ",", "39", ")", ",", "(", "20", ",", "33", ")", ",", "(", "21", ",", "31", ")", ",", "\n", "(", "21", ",", "32", ")", ",", "(", "23", ",", "1", ")", ",", "(", "23", ",", "11", ")", ",", "(", "23", ",", "19", ")", ",", "(", "23", ",", "20", ")", ",", "(", "23", ",", "24", ")", ",", "(", "23", ",", "28", ")", ",", "(", "23", ",", "34", ")", ",", "(", "23", ",", "49", ")", ",", "(", "23", ",", "53", ")", ",", "\n", "(", "23", ",", "56", ")", ",", "\n", "(", "23", ",", "61", ")", ",", "(", "23", ",", "63", ")", ",", "(", "23", ",", "64", ")", ",", "(", "23", ",", "67", ")", ",", "(", "23", ",", "68", ")", ",", "(", "23", ",", "73", ")", ",", "(", "24", ",", "74", ")", ",", "(", "25", ",", "1", ")", ",", "(", "25", ",", "2", ")", ",", "(", "25", ",", "4", ")", ",", "\n", "(", "25", ",", "8", ")", ",", "\n", "(", "25", ",", "9", ")", ",", "(", "25", ",", "14", ")", ",", "(", "25", ",", "15", ")", ",", "(", "25", ",", "16", ")", ",", "(", "25", ",", "17", ")", ",", "(", "25", ",", "18", ")", ",", "(", "25", ",", "19", ")", ",", "(", "25", ",", "21", ")", ",", "(", "25", ",", "25", ")", ",", "(", "25", ",", "26", ")", ",", "\n", "(", "25", ",", "27", ")", ",", "\n", "(", "25", ",", "28", ")", ",", "(", "25", ",", "29", ")", ",", "(", "25", ",", "30", ")", ",", "(", "25", ",", "31", ")", ",", "(", "25", ",", "32", ")", ",", "(", "25", ",", "33", ")", ",", "(", "25", ",", "34", ")", ",", "(", "25", ",", "35", ")", ",", "(", "25", ",", "36", ")", ",", "(", "25", ",", "37", ")", ",", "\n", "(", "25", ",", "38", ")", ",", "(", "25", ",", "39", ")", ",", "(", "25", ",", "40", ")", ",", "(", "25", ",", "41", ")", ",", "(", "25", ",", "42", ")", ",", "(", "25", ",", "43", ")", ",", "(", "25", ",", "44", ")", ",", "(", "25", ",", "45", ")", ",", "(", "25", ",", "46", ")", ",", "(", "25", ",", "47", ")", ",", "\n", "(", "25", ",", "48", ")", ",", "(", "25", ",", "49", ")", ",", "(", "25", ",", "50", ")", ",", "(", "25", ",", "51", ")", ",", "(", "25", ",", "52", ")", ",", "(", "25", ",", "53", ")", ",", "(", "25", ",", "54", ")", ",", "(", "25", ",", "55", ")", ",", "(", "25", ",", "56", ")", ",", "(", "25", ",", "57", ")", ",", "\n", "(", "25", ",", "64", ")", ",", "(", "25", ",", "65", ")", ",", "(", "25", ",", "66", ")", ",", "(", "25", ",", "67", ")", ",", "(", "25", ",", "68", ")", ",", "(", "25", ",", "73", ")", ",", "(", "25", ",", "74", ")", ",", "(", "25", ",", "77", ")", ",", "(", "25", ",", "78", ")", ",", "(", "25", ",", "79", ")", ",", "\n", "(", "25", ",", "80", ")", ",", "(", "26", ",", "32", ")", ",", "(", "26", ",", "37", ")", ",", "(", "28", ",", "30", ")", ",", "(", "28", ",", "33", ")", "]", "\n", "# there are some duplicate verbs since v-coco contains two kinds of verb (v-instru  v-obj) where v might be similar.", "\n", "# But this do not affect the evaluation.", "\n", "import", "numpy", "as", "np", "\n", "verb_to_HO_matrix", "=", "np", ".", "zeros", "(", "(", "238", ",", "verb_class_num", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "set_list", ")", ")", ":", "\n", "        ", "item", "=", "set_list", "[", "i", "]", "\n", "verb_to_HO_matrix", "[", "i", "]", "[", "item", "[", "0", "]", "]", "=", "1", "\n", "", "verb_to_HO_matrix", "=", "np", ".", "transpose", "(", "verb_to_HO_matrix", ")", "\n", "\n", "obj_to_HO_matrix", "=", "np", ".", "zeros", "(", "(", "238", ",", "obj_class_num", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "set_list", ")", ")", ":", "\n", "        ", "item", "=", "set_list", "[", "i", "]", "\n", "obj_to_HO_matrix", "[", "i", "]", "[", "item", "[", "1", "]", "-", "1", "]", "=", "1", "\n", "", "obj_to_HO_matrix", "=", "np", ".", "transpose", "(", "obj_to_HO_matrix", ")", "\n", "return", "verb_to_HO_matrix", ",", "obj_to_HO_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.__init__": [[12, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_time", "=", "0.", "\n", "self", ".", "calls", "=", "0", "\n", "self", ".", "start_time", "=", "0.", "\n", "self", ".", "diff", "=", "0.", "\n", "self", ".", "average_time", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic": [[19, 23], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "# using time.time instead of time.clock because time time.clock", "\n", "# does not normalize for multithreading", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc": [[24, 33], ["time.time"], "methods", ["None"], ["", "def", "toc", "(", "self", ",", "average", "=", "True", ")", ":", "\n", "        ", "self", ".", "diff", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "self", ".", "total_time", "+=", "self", ".", "diff", "\n", "self", ".", "calls", "+=", "1", "\n", "self", ".", "average_time", "=", "self", ".", "total_time", "/", "self", ".", "calls", "\n", "if", "average", ":", "\n", "            ", "return", "self", ".", "average_time", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "diff", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.visualization._draw_single_box": [[50, 70], ["PIL.Draw", "ImageDraw.Draw.line", "font.getsize", "numpy.ceil", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.text"], "function", ["None"], ["", "def", "_draw_single_box", "(", "image", ",", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ",", "display_str", ",", "font", ",", "color", "=", "'black'", ",", "thickness", "=", "4", ")", ":", "\n", "  ", "draw", "=", "ImageDraw", ".", "Draw", "(", "image", ")", "\n", "(", "left", ",", "right", ",", "top", ",", "bottom", ")", "=", "(", "xmin", ",", "xmax", ",", "ymin", ",", "ymax", ")", "\n", "draw", ".", "line", "(", "[", "(", "left", ",", "top", ")", ",", "(", "left", ",", "bottom", ")", ",", "(", "right", ",", "bottom", ")", ",", "\n", "(", "right", ",", "top", ")", ",", "(", "left", ",", "top", ")", "]", ",", "width", "=", "thickness", ",", "fill", "=", "color", ")", "\n", "text_bottom", "=", "bottom", "\n", "# Reverse list and print from bottom to top.", "\n", "text_width", ",", "text_height", "=", "font", ".", "getsize", "(", "display_str", ")", "\n", "margin", "=", "np", ".", "ceil", "(", "0.05", "*", "text_height", ")", "\n", "draw", ".", "rectangle", "(", "\n", "[", "(", "left", ",", "text_bottom", "-", "text_height", "-", "2", "*", "margin", ")", ",", "(", "left", "+", "text_width", ",", "\n", "text_bottom", ")", "]", ",", "\n", "fill", "=", "color", ")", "\n", "draw", ".", "text", "(", "\n", "(", "left", "+", "margin", ",", "text_bottom", "-", "text_height", "-", "margin", ")", ",", "\n", "display_str", ",", "\n", "fill", "=", "'black'", ",", "\n", "font", "=", "font", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.visualization.draw_bounding_boxes": [[71, 90], ["gt_boxes.copy", "numpy.round", "PIL.fromarray", "six.moves.range", "numpy.array", "numpy.uint8", "int", "visualization._draw_single_box", "gt_boxes_new[].copy"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.visualization._draw_single_box"], ["", "def", "draw_bounding_boxes", "(", "image", ",", "gt_boxes", ",", "im_info", ")", ":", "\n", "  ", "num_boxes", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "gt_boxes_new", "=", "gt_boxes", ".", "copy", "(", ")", "\n", "gt_boxes_new", "[", ":", ",", ":", "4", "]", "=", "np", ".", "round", "(", "gt_boxes_new", "[", ":", ",", ":", "4", "]", ".", "copy", "(", ")", "/", "im_info", "[", "2", "]", ")", "\n", "disp_image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", "[", "0", "]", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_boxes", ")", ":", "\n", "    ", "this_class", "=", "int", "(", "gt_boxes_new", "[", "i", ",", "4", "]", ")", "\n", "disp_image", "=", "_draw_single_box", "(", "disp_image", ",", "\n", "gt_boxes_new", "[", "i", ",", "0", "]", ",", "\n", "gt_boxes_new", "[", "i", ",", "1", "]", ",", "\n", "gt_boxes_new", "[", "i", ",", "2", "]", ",", "\n", "gt_boxes_new", "[", "i", ",", "3", "]", ",", "\n", "'N%02d-C%02d'", "%", "(", "i", ",", "this_class", ")", ",", "\n", "FONT", ",", "\n", "color", "=", "STANDARD_COLORS", "[", "this_class", "%", "NUM_COLORS", "]", ")", "\n", "\n", "", "image", "[", "0", ",", ":", "]", "=", "np", ".", "array", "(", "disp_image", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.visualization.draw_bounding_boxes_HOI": [[91, 120], ["gt_boxes.copy", "numpy.round", "PIL.fromarray", "enumerate", "numpy.array", "gt_boxes_new[].copy", "numpy.uint8", "visualization._draw_single_box"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.visualization._draw_single_box"], ["", "def", "draw_bounding_boxes_HOI", "(", "image", ",", "gt_boxes", ",", "gt_class", ")", ":", "\n", "  ", "num_boxes", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "gt_boxes_new", "=", "gt_boxes", ".", "copy", "(", ")", "\n", "gt_boxes_new", "=", "np", ".", "round", "(", "gt_boxes_new", "[", ":", ",", "1", ":", "]", ".", "copy", "(", ")", ")", "\n", "disp_image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", "[", "0", "]", ")", ")", "\n", "\n", "\n", "show_list", "=", "[", "99", ",", "99", ",", "99", ",", "99", ",", "99", ",", "99", ",", "99", ",", "99", "]", "\n", "count", "=", "0", "\n", "for", "idx", ",", "val", "in", "enumerate", "(", "gt_class", "[", "0", ",", ":", "]", ")", ":", "\n", "    ", "if", "val", "!=", "0", ":", "\n", "      ", "show_list", "[", "count", "]", "=", "idx", "\n", "count", "+=", "1", "\n", "\n", "\n", "#for i in range(1): # change num_boxes to 2", "\n", "", "", "for", "i", "in", "[", "2", "]", ":", "#  show the third boxes", "\n", "    ", "this_class", "=", "0", "\n", "disp_image", "=", "_draw_single_box", "(", "disp_image", ",", "\n", "gt_boxes_new", "[", "i", ",", "0", "]", ",", "\n", "gt_boxes_new", "[", "i", ",", "1", "]", ",", "\n", "gt_boxes_new", "[", "i", ",", "2", "]", ",", "\n", "gt_boxes_new", "[", "i", ",", "3", "]", ",", "\n", "'%01d-%01d-%01d-%01d-%01d-%01d-%01d-%01d'", "%", "(", "show_list", "[", "0", "]", ",", "show_list", "[", "1", "]", ",", "show_list", "[", "2", "]", ",", "show_list", "[", "3", "]", ",", "show_list", "[", "4", "]", ",", "show_list", "[", "5", "]", ",", "show_list", "[", "6", "]", ",", "show_list", "[", "7", "]", ")", ",", "\n", "FONT", ",", "\n", "color", "=", "'Red'", ")", "\n", "\n", "", "image", "[", "0", ",", ":", "]", "=", "np", ".", "array", "(", "disp_image", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.visualization.draw_bounding_boxes_HOI_PIC": [[123, 156], ["gt_boxes.copy", "numpy.round", "PIL.fromarray", "enumerate", "numpy.array", "gt_boxes_new[].copy", "numpy.uint8", "visualization._draw_single_box"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.visualization._draw_single_box"], ["", "def", "draw_bounding_boxes_HOI_PIC", "(", "image", ",", "gt_boxes", ",", "gt_class", ")", ":", "\n", "  ", "num_boxes", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "gt_boxes_new", "=", "gt_boxes", ".", "copy", "(", ")", "\n", "gt_boxes_new", "=", "np", ".", "round", "(", "gt_boxes_new", "[", ":", ",", "1", ":", "]", ".", "copy", "(", ")", ")", "\n", "disp_image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", "[", "0", "]", ")", ")", "\n", "\n", "\n", "show_list", "=", "[", "99", ",", "99", ",", "99", ",", "99", ",", "99", ",", "99", ",", "99", ",", "99", "]", "\n", "count", "=", "0", "\n", "for", "idx", ",", "val", "in", "enumerate", "(", "gt_class", "[", "0", ",", ":", "]", ")", ":", "\n", "    ", "if", "val", "!=", "0", ":", "\n", "      ", "show_list", "[", "count", "]", "=", "idx", "\n", "count", "+=", "1", "\n", "", "", "show_list", "[", "1", "]", "=", "gt_boxes_new", "[", "2", ",", "0", "]", "\n", "show_list", "[", "2", "]", "=", "gt_boxes_new", "[", "2", ",", "1", "]", "\n", "show_list", "[", "3", "]", "=", "gt_boxes_new", "[", "2", ",", "2", "]", "\n", "show_list", "[", "4", "]", "=", "gt_boxes_new", "[", "2", ",", "3", "]", "\n", "\n", "\n", "#for i in range(1): # change num_boxes to 2", "\n", "for", "i", "in", "[", "2", "]", ":", "#  show the third boxes", "\n", "    ", "this_class", "=", "0", "\n", "disp_image", "=", "_draw_single_box", "(", "disp_image", ",", "\n", "gt_boxes_new", "[", "i", ",", "0", "]", ",", "\n", "gt_boxes_new", "[", "i", ",", "1", "]", ",", "\n", "gt_boxes_new", "[", "i", ",", "2", "]", ",", "\n", "gt_boxes_new", "[", "i", ",", "3", "]", ",", "\n", "'%01d-%01d-%01d-%01d-%01d-%01d-%01d-%01d'", "%", "(", "show_list", "[", "0", "]", ",", "show_list", "[", "1", "]", ",", "show_list", "[", "2", "]", ",", "show_list", "[", "3", "]", ",", "show_list", "[", "4", "]", ",", "show_list", "[", "5", "]", ",", "show_list", "[", "6", "]", ",", "show_list", "[", "7", "]", ")", ",", "\n", "FONT", ",", "\n", "color", "=", "'Red'", ")", "\n", "\n", "", "image", "[", "0", ",", ":", "]", "=", "np", ".", "array", "(", "disp_image", ")", "\n", "return", "image", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.Generate_HICO_detection.save_HICO": [[19, 56], ["range", "scipy.savemat", "HICO.items", "range", "numpy.argsort", "min", "all_boxes.append", "str().zfill", "len", "temp.append", "temp.append", "temp.append", "temp.append", "Generate_HICO_detection.obtain_fuse_preds", "temp.append", "total.append", "score.append", "str", "element[].tolist", "element[].tolist", "int", "int"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.Generate_HICO_detection.obtain_fuse_preds"], ["def", "save_HICO", "(", "HICO", ",", "HICO_dir", ",", "classid", ",", "begin", ",", "finish", ",", "fuse_type", "=", "'spho'", ")", ":", "\n", "    ", "all_boxes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "finish", "-", "begin", "+", "1", ")", ":", "\n", "        ", "total", "=", "[", "]", "\n", "score", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "HICO", ".", "items", "(", ")", ":", "\n", "            ", "for", "element", "in", "value", ":", "\n", "                ", "if", "element", "[", "2", "]", "==", "classid", ":", "\n", "                    ", "temp", "=", "[", "]", "\n", "temp", ".", "append", "(", "element", "[", "0", "]", ".", "tolist", "(", ")", ")", "# Human box", "\n", "temp", ".", "append", "(", "element", "[", "1", "]", ".", "tolist", "(", ")", ")", "# Object box", "\n", "temp", ".", "append", "(", "int", "(", "key", ")", ")", "# image id", "\n", "temp", ".", "append", "(", "int", "(", "i", ")", ")", "# action id (0-599)", "\n", "# if fuse_type == 'spv':", "\n", "#     preds = element[11]", "\n", "# else:", "\n", "preds", "=", "obtain_fuse_preds", "(", "element", ",", "fuse_type", ")", "\n", "# preds = obtain_fuse_preds(element, fuse_type)", "\n", "# cls_prob_sp * (cls_prob_O + cls_prob_H) + cls_prob_verbs", "\n", "# preds = pSp * (pO + pH + pVerbs)", "\n", "# preds = pSp * (pO + pH)", "\n", "# preds = pSp", "\n", "# preds = pO + pH", "\n", "# preds = pSp * pVerbs", "\n", "# preds = pVerbs", "\n", "# print(preds, element[4], element[5])", "\n", "temp", ".", "append", "(", "preds", "[", "begin", "-", "1", "+", "i", "]", "*", "element", "[", "4", "]", "*", "element", "[", "5", "]", ")", "\n", "total", ".", "append", "(", "temp", ")", "\n", "score", ".", "append", "(", "preds", "[", "begin", "-", "1", "+", "i", "]", "*", "element", "[", "4", "]", "*", "element", "[", "5", "]", ")", "\n", "\n", "", "", "", "idx", "=", "np", ".", "argsort", "(", "score", ",", "axis", "=", "0", ")", "[", ":", ":", "-", "1", "]", "\n", "for", "i_idx", "in", "range", "(", "min", "(", "len", "(", "idx", ")", ",", "19999", ")", ")", ":", "\n", "            ", "all_boxes", ".", "append", "(", "total", "[", "idx", "[", "i_idx", "]", "]", ")", "\n", "", "", "savefile", "=", "HICO_dir", "+", "'detections_'", "+", "str", "(", "classid", ")", ".", "zfill", "(", "2", ")", "+", "'.mat'", "\n", "# print('length:', classid, len(all_boxes))", "\n", "sio", ".", "savemat", "(", "savefile", ",", "{", "'all_boxes'", ":", "all_boxes", "}", ")", "\n", "return", "all_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.Generate_HICO_detection.obtain_fuse_preds": [[65, 88], ["Exception"], "function", ["None"], ["", "", "", "def", "obtain_fuse_preds", "(", "element", ",", "fuse_type", ")", ":", "\n", "    ", "preds", "=", "element", "[", "3", "]", "\n", "if", "fuse_type", "!=", "'preds'", ":", "\n", "        ", "pH", "=", "element", "[", "6", "]", "\n", "pO", "=", "element", "[", "7", "]", "\n", "pSp", "=", "element", "[", "8", "]", "\n", "pHoi", "=", "element", "[", "9", "]", "\n", "", "if", "fuse_type", "==", "'preds'", ":", "\n", "        ", "preds", "=", "preds", "\n", "", "elif", "fuse_type", "==", "'spho'", ":", "\n", "        ", "preds", "=", "pSp", "*", "(", "pO", "+", "pH", ")", "\n", "", "elif", "fuse_type", "==", "'ho'", ":", "\n", "        ", "preds", "=", "pO", "+", "pH", "\n", "", "elif", "fuse_type", "==", "'spv'", ":", "\n", "        ", "preds", "=", "pSp", "*", "pHoi", "\n", "", "elif", "fuse_type", "==", "'sp'", ":", "\n", "        ", "preds", "=", "pSp", "\n", "", "elif", "fuse_type", "==", "'v'", ":", "\n", "        ", "preds", "=", "pHoi", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'fuse_type error, you must select those types{spho, spv, sp, sphov}'", ")", "\n", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.Generate_HICO_detection.save_HICO3": [[90, 129], ["numpy.ones", "range", "scipy.savemat", "HICO.items", "range", "numpy.argsort", "min", "all_boxes.append", "str().zfill", "len", "Generate_HICO_detection.obtain_fuse_preds", "temp.append", "temp.append", "temp.append", "temp.append", "temp.append", "total.append", "score.append", "str", "element[].tolist", "element[].tolist", "int", "int"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.Generate_HICO_detection.obtain_fuse_preds"], ["", "def", "save_HICO3", "(", "HICO", ",", "HICO_dir", ",", "classid", ",", "begin", ",", "finish", ",", "fuse_type", "=", "'spho'", ")", ":", "\n", "# \"spho\" is from iCAN which includes three branch: sp, v, o", "\n", "    ", "global", "hoi_2_obj", "\n", "global", "obj_to_HO_matrix", "\n", "all_boxes", "=", "[", "]", "\n", "ones", "=", "np", ".", "ones", "(", "600", ")", "\n", "for", "i", "in", "range", "(", "finish", "-", "begin", "+", "1", ")", ":", "\n", "        ", "total", "=", "[", "]", "\n", "score", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "HICO", ".", "items", "(", ")", ":", "\n", "            ", "for", "element", "in", "value", ":", "\n", "                ", "if", "fuse_type", "==", "'spv'", ":", "\n", "                    ", "preds", "=", "element", "[", "11", "]", "\n", "", "else", ":", "\n", "                    ", "preds", "=", "obtain_fuse_preds", "(", "element", ",", "fuse_type", ")", "\n", "# st1 = time.time()", "\n", "", "obj_scores", "=", "element", "[", "12", "]", "# here is the different", "\n", "objid", "=", "element", "[", "13", "]", "\n", "# objid = label_trans_map[objid] + 1", "\n", "objid", "+=", "1", "\n", "element", "[", "5", "]", "=", "obj_scores", "\n", "\n", "if", "objid", "==", "classid", ":", "\n", "                    ", "temp", "=", "[", "]", "\n", "temp", ".", "append", "(", "element", "[", "0", "]", ".", "tolist", "(", ")", ")", "# Human box", "\n", "temp", ".", "append", "(", "element", "[", "1", "]", ".", "tolist", "(", ")", ")", "# Object box", "\n", "temp", ".", "append", "(", "int", "(", "key", ")", ")", "# image id", "\n", "temp", ".", "append", "(", "int", "(", "i", ")", ")", "# action id (0-599)", "\n", "temp", ".", "append", "(", "preds", "[", "begin", "-", "1", "+", "i", "]", "*", "element", "[", "4", "]", "*", "element", "[", "5", "]", ")", "\n", "total", ".", "append", "(", "temp", ")", "\n", "score", ".", "append", "(", "preds", "[", "begin", "-", "1", "+", "i", "]", "*", "element", "[", "4", "]", "*", "element", "[", "5", "]", ")", "\n", "\n", "", "", "", "idx", "=", "np", ".", "argsort", "(", "score", ",", "axis", "=", "0", ")", "[", ":", ":", "-", "1", "]", "\n", "for", "i_idx", "in", "range", "(", "min", "(", "len", "(", "idx", ")", ",", "19999", ")", ")", ":", "\n", "            ", "all_boxes", ".", "append", "(", "total", "[", "idx", "[", "i_idx", "]", "]", ")", "\n", "", "", "savefile", "=", "HICO_dir", "+", "'detections_'", "+", "str", "(", "classid", ")", ".", "zfill", "(", "2", ")", "+", "'.mat'", "\n", "# print('length:', classid, len(all_boxes))", "\n", "sio", ".", "savemat", "(", "savefile", ",", "{", "'all_boxes'", ":", "all_boxes", "}", ")", "\n", "return", "all_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.Generate_HICO_detection.Generate_HICO_detection3": [[131, 252], ["print", "print", "os.path.exists", "os.makedirs", "os.remove", "datetime.datetime.now", "Generate_HICO_detection.save_HICO3", "datetime.datetime.now", "os.listdir", "os.path.join"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.Generate_HICO_detection.save_HICO3"], ["", "def", "Generate_HICO_detection3", "(", "HICO", ",", "HICO_dir", ",", "fuse_type", ",", "gpool", ",", "func_type", "=", "0", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "HICO_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "HICO_dir", ")", "\n", "\n", "# Remove previous results", "\n", "", "filelist", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "HICO_dir", ")", "]", "\n", "for", "f", "in", "filelist", ":", "\n", "        ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "HICO_dir", ",", "f", ")", ")", "\n", "\n", "\n", "", "params", "=", "[", "[", "1", ",", "161", ",", "170", "]", ",", "# 1 person", "\n", "[", "2", ",", "11", ",", "24", "]", ",", "# 2 bicycle", "\n", "[", "3", ",", "66", ",", "76", "]", ",", "# 3 car", "\n", "[", "4", ",", "147", ",", "160", "]", ",", "# 4 motorcycle", "\n", "[", "5", ",", "1", ",", "10", "]", ",", "# 5 airplane", "\n", "[", "6", ",", "55", ",", "65", "]", ",", "# 6 bus", "\n", "[", "7", ",", "187", ",", "194", "]", ",", "# 7 train", "\n", "[", "8", ",", "568", ",", "576", "]", ",", "# 8 truck", "\n", "[", "9", ",", "32", ",", "46", "]", ",", "# 9 boat", "\n", "[", "10", ",", "563", ",", "567", "]", ",", "# 10 traffic light", "\n", "[", "11", ",", "326", ",", "330", "]", ",", "# 11 fire_hydrant", "\n", "[", "12", ",", "503", ",", "506", "]", ",", "# 12 stop_sign", "\n", "[", "13", ",", "415", ",", "418", "]", ",", "# 13 parking_meter", "\n", "[", "14", ",", "244", ",", "247", "]", ",", "# 14 bench", "\n", "[", "15", ",", "25", ",", "31", "]", ",", "# 15 bird", "\n", "[", "16", ",", "77", ",", "86", "]", ",", "# 16 cat", "\n", "[", "17", ",", "112", ",", "129", "]", ",", "# 17 dog", "\n", "[", "18", ",", "130", ",", "146", "]", ",", "# 18 horse", "\n", "[", "19", ",", "175", ",", "186", "]", ",", "# 19 sheep", "\n", "[", "20", ",", "97", ",", "107", "]", ",", "# 20 cow", "\n", "[", "21", ",", "314", ",", "325", "]", ",", "# 21 elephant", "\n", "[", "22", ",", "236", ",", "239", "]", ",", "# 22 bear", "\n", "[", "23", ",", "596", ",", "600", "]", ",", "# 23 zebra", "\n", "[", "24", ",", "343", ",", "348", "]", ",", "# 24 giraffe", "\n", "[", "25", ",", "209", ",", "214", "]", ",", "# 25 backpack", "\n", "[", "26", ",", "577", ",", "584", "]", ",", "# 26 umbrella", "\n", "[", "27", ",", "353", ",", "356", "]", ",", "# 27 handbag", "\n", "[", "28", ",", "539", ",", "546", "]", ",", "# 28 tie", "\n", "[", "29", ",", "507", ",", "516", "]", ",", "# 29 suitcase", "\n", "[", "30", ",", "337", ",", "342", "]", ",", "# 30 Frisbee", "\n", "[", "31", ",", "464", ",", "474", "]", ",", "# 31 skis", "\n", "[", "32", ",", "475", ",", "483", "]", ",", "# 32 snowboard", "\n", "[", "33", ",", "489", ",", "502", "]", ",", "# 33 sports_ball", "\n", "[", "34", ",", "369", ",", "376", "]", ",", "# 34 kite", "\n", "[", "35", ",", "225", ",", "232", "]", ",", "# 35 baseball_bat", "\n", "[", "36", ",", "233", ",", "235", "]", ",", "# 36 baseball_glove", "\n", "[", "37", ",", "454", ",", "463", "]", ",", "# 37 skateboard", "\n", "[", "38", ",", "517", ",", "528", "]", ",", "# 38 surfboard", "\n", "[", "39", ",", "534", ",", "538", "]", ",", "# 39 tennis_racket", "\n", "[", "40", ",", "47", ",", "54", "]", ",", "# 40 bottle", "\n", "[", "41", ",", "589", ",", "595", "]", ",", "# 41 wine_glass", "\n", "[", "42", ",", "296", ",", "305", "]", ",", "# 42 cup", "\n", "[", "43", ",", "331", ",", "336", "]", ",", "# 43 fork", "\n", "[", "44", ",", "377", ",", "383", "]", ",", "# 44 knife", "\n", "[", "45", ",", "484", ",", "488", "]", ",", "# 45 spoon", "\n", "[", "46", ",", "253", ",", "257", "]", ",", "# 46 bowl", "\n", "[", "47", ",", "215", ",", "224", "]", ",", "# 47 banana", "\n", "[", "48", ",", "199", ",", "208", "]", ",", "# 48 apple", "\n", "[", "49", ",", "439", ",", "445", "]", ",", "# 49 sandwich", "\n", "[", "50", ",", "398", ",", "407", "]", ",", "# 50 orange", "\n", "[", "51", ",", "258", ",", "264", "]", ",", "# 51 broccoli", "\n", "[", "52", ",", "274", ",", "283", "]", ",", "# 52 carrot", "\n", "[", "53", ",", "357", ",", "363", "]", ",", "# 53 hot_dog", "\n", "[", "54", ",", "419", ",", "429", "]", ",", "# 54 pizza", "\n", "[", "55", ",", "306", ",", "313", "]", ",", "# 55 donut", "\n", "[", "56", ",", "265", ",", "273", "]", ",", "# 56 cake", "\n", "[", "57", ",", "87", ",", "92", "]", ",", "# 57 chair", "\n", "[", "58", ",", "93", ",", "96", "]", ",", "# 58 couch", "\n", "[", "59", ",", "171", ",", "174", "]", ",", "# 59 potted_plant", "\n", "[", "60", ",", "240", ",", "243", "]", ",", "# 60 bed", "\n", "[", "61", ",", "108", ",", "111", "]", ",", "# 61 dining_table", "\n", "[", "62", ",", "551", ",", "558", "]", ",", "# 62 toilet", "\n", "[", "63", ",", "195", ",", "198", "]", ",", "# 63 TV", "\n", "[", "64", ",", "384", ",", "389", "]", ",", "# 64 laptop", "\n", "[", "65", ",", "394", ",", "397", "]", ",", "# 65 mouse", "\n", "[", "66", ",", "435", ",", "438", "]", ",", "# 66 remote", "\n", "[", "67", ",", "364", ",", "368", "]", ",", "# 67 keyboard", "\n", "[", "68", ",", "284", ",", "290", "]", ",", "# 68 cell_phone", "\n", "[", "69", ",", "390", ",", "393", "]", ",", "# 69 microwave", "\n", "[", "70", ",", "408", ",", "414", "]", ",", "# 70 oven", "\n", "[", "71", ",", "547", ",", "550", "]", ",", "# 71 toaster", "\n", "[", "72", ",", "450", ",", "453", "]", ",", "# 72 sink", "\n", "[", "73", ",", "430", ",", "434", "]", ",", "# 73 refrigerator", "\n", "[", "74", ",", "248", ",", "252", "]", ",", "# 74 book", "\n", "[", "75", ",", "291", ",", "295", "]", ",", "# 75 clock", "\n", "[", "76", ",", "585", ",", "588", "]", ",", "# 76 vase", "\n", "[", "77", ",", "446", ",", "449", "]", ",", "# 77 scissors", "\n", "[", "78", ",", "529", ",", "533", "]", ",", "# 78 teddy_bear", "\n", "[", "79", ",", "349", ",", "352", "]", ",", "# 79 hair_drier", "\n", "[", "80", ",", "559", ",", "562", "]", ",", "# 80 toothbrush", "\n", "\n", "]", "\n", "\n", "import", "datetime", "\n", "\n", "# from multiprocessing import Pool", "\n", "#", "\n", "# process_num = 16 if fuse_type == 'spv' else 2", "\n", "# # global pool", "\n", "# # if pool is None:", "\n", "# pool = Pool(processes=process_num)", "\n", "# def func(item):", "\n", "#", "\n", "#     save_HICO(HICO, HICO_dir, item[0], item[1], item[2])", "\n", "#", "\n", "from", "itertools", "import", "repeat", "\n", "\n", "# gpool.starmap(save_HICO1, zip(repeat(output_file), repeat(HICO_dir), params, repeat(fuse_type)))", "\n", "\n", "from", "sys", "import", "version_info", "\n", "print", "(", "'Load HICO sucessfully'", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "all_boxes", "=", "[", "]", "\n", "for", "p", "in", "params", ":", "\n", "# print(p)", "\n", "        ", "res", "=", "save_HICO3", "(", "HICO", ",", "HICO_dir", ",", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "p", "[", "2", "]", ",", "fuse_type", ")", "\n", "# all_boxes.extend(res)", "\n", "# savefile = HICO_dir + 'detections.mat'", "\n", "# sio.savemat(savefile, {'all_boxes': all_boxes})", "\n", "# print('end', p)", "\n", "", "print", "(", "\"Finish save HICO\"", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.Generate_HICO_detection.Generate_HICO_detection": [[255, 382], ["print", "print", "os.path.exists", "os.makedirs", "os.remove", "pickle.load", "pickle.load", "datetime.datetime.now", "Generate_HICO_detection.save_HICO", "datetime.datetime.now", "os.listdir", "os.path.join", "open", "open"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.Generate_HICO_detection.save_HICO"], ["", "def", "Generate_HICO_detection", "(", "output_file", ",", "HICO_dir", ",", "fuse_type", ",", "gpool", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "HICO_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "HICO_dir", ")", "\n", "\n", "# Remove previous results", "\n", "", "filelist", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "HICO_dir", ")", "]", "\n", "for", "f", "in", "filelist", ":", "\n", "        ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "HICO_dir", ",", "f", ")", ")", "\n", "\n", "\n", "", "params", "=", "[", "[", "1", ",", "161", ",", "170", "]", ",", "# 1 person", "\n", "[", "2", ",", "11", ",", "24", "]", ",", "# 2 bicycle", "\n", "[", "3", ",", "66", ",", "76", "]", ",", "# 3 car", "\n", "[", "4", ",", "147", ",", "160", "]", ",", "# 4 motorcycle", "\n", "[", "5", ",", "1", ",", "10", "]", ",", "# 5 airplane", "\n", "[", "6", ",", "55", ",", "65", "]", ",", "# 6 bus", "\n", "[", "7", ",", "187", ",", "194", "]", ",", "# 7 train", "\n", "[", "8", ",", "568", ",", "576", "]", ",", "# 8 truck", "\n", "[", "9", ",", "32", ",", "46", "]", ",", "# 9 boat", "\n", "[", "10", ",", "563", ",", "567", "]", ",", "# 10 traffic light", "\n", "[", "11", ",", "326", ",", "330", "]", ",", "# 11 fire_hydrant", "\n", "[", "12", ",", "503", ",", "506", "]", ",", "# 12 stop_sign", "\n", "[", "13", ",", "415", ",", "418", "]", ",", "# 13 parking_meter", "\n", "[", "14", ",", "244", ",", "247", "]", ",", "# 14 bench", "\n", "[", "15", ",", "25", ",", "31", "]", ",", "# 15 bird", "\n", "[", "16", ",", "77", ",", "86", "]", ",", "# 16 cat", "\n", "[", "17", ",", "112", ",", "129", "]", ",", "# 17 dog", "\n", "[", "18", ",", "130", ",", "146", "]", ",", "# 18 horse", "\n", "[", "19", ",", "175", ",", "186", "]", ",", "# 19 sheep", "\n", "[", "20", ",", "97", ",", "107", "]", ",", "# 20 cow", "\n", "[", "21", ",", "314", ",", "325", "]", ",", "# 21 elephant", "\n", "[", "22", ",", "236", ",", "239", "]", ",", "# 22 bear", "\n", "[", "23", ",", "596", ",", "600", "]", ",", "# 23 zebra", "\n", "[", "24", ",", "343", ",", "348", "]", ",", "# 24 giraffe", "\n", "[", "25", ",", "209", ",", "214", "]", ",", "# 25 backpack", "\n", "[", "26", ",", "577", ",", "584", "]", ",", "# 26 umbrella", "\n", "[", "27", ",", "353", ",", "356", "]", ",", "# 27 handbag", "\n", "[", "28", ",", "539", ",", "546", "]", ",", "# 28 tie", "\n", "[", "29", ",", "507", ",", "516", "]", ",", "# 29 suitcase", "\n", "[", "30", ",", "337", ",", "342", "]", ",", "# 30 Frisbee", "\n", "[", "31", ",", "464", ",", "474", "]", ",", "# 31 skis", "\n", "[", "32", ",", "475", ",", "483", "]", ",", "# 32 snowboard", "\n", "[", "33", ",", "489", ",", "502", "]", ",", "# 33 sports_ball", "\n", "[", "34", ",", "369", ",", "376", "]", ",", "# 34 kite", "\n", "[", "35", ",", "225", ",", "232", "]", ",", "# 35 baseball_bat", "\n", "[", "36", ",", "233", ",", "235", "]", ",", "# 36 baseball_glove", "\n", "[", "37", ",", "454", ",", "463", "]", ",", "# 37 skateboard", "\n", "[", "38", ",", "517", ",", "528", "]", ",", "# 38 surfboard", "\n", "[", "39", ",", "534", ",", "538", "]", ",", "# 39 tennis_racket", "\n", "[", "40", ",", "47", ",", "54", "]", ",", "# 40 bottle", "\n", "[", "41", ",", "589", ",", "595", "]", ",", "# 41 wine_glass", "\n", "[", "42", ",", "296", ",", "305", "]", ",", "# 42 cup", "\n", "[", "43", ",", "331", ",", "336", "]", ",", "# 43 fork", "\n", "[", "44", ",", "377", ",", "383", "]", ",", "# 44 knife", "\n", "[", "45", ",", "484", ",", "488", "]", ",", "# 45 spoon", "\n", "[", "46", ",", "253", ",", "257", "]", ",", "# 46 bowl", "\n", "[", "47", ",", "215", ",", "224", "]", ",", "# 47 banana", "\n", "[", "48", ",", "199", ",", "208", "]", ",", "# 48 apple", "\n", "[", "49", ",", "439", ",", "445", "]", ",", "# 49 sandwich", "\n", "[", "50", ",", "398", ",", "407", "]", ",", "# 50 orange", "\n", "[", "51", ",", "258", ",", "264", "]", ",", "# 51 broccoli", "\n", "[", "52", ",", "274", ",", "283", "]", ",", "# 52 carrot", "\n", "[", "53", ",", "357", ",", "363", "]", ",", "# 53 hot_dog", "\n", "[", "54", ",", "419", ",", "429", "]", ",", "# 54 pizza", "\n", "[", "55", ",", "306", ",", "313", "]", ",", "# 55 donut", "\n", "[", "56", ",", "265", ",", "273", "]", ",", "# 56 cake", "\n", "[", "57", ",", "87", ",", "92", "]", ",", "# 57 chair", "\n", "[", "58", ",", "93", ",", "96", "]", ",", "# 58 couch", "\n", "[", "59", ",", "171", ",", "174", "]", ",", "# 59 potted_plant", "\n", "[", "60", ",", "240", ",", "243", "]", ",", "# 60 bed", "\n", "[", "61", ",", "108", ",", "111", "]", ",", "# 61 dining_table", "\n", "[", "62", ",", "551", ",", "558", "]", ",", "# 62 toilet", "\n", "[", "63", ",", "195", ",", "198", "]", ",", "# 63 TV", "\n", "[", "64", ",", "384", ",", "389", "]", ",", "# 64 laptop", "\n", "[", "65", ",", "394", ",", "397", "]", ",", "# 65 mouse", "\n", "[", "66", ",", "435", ",", "438", "]", ",", "# 66 remote", "\n", "[", "67", ",", "364", ",", "368", "]", ",", "# 67 keyboard", "\n", "[", "68", ",", "284", ",", "290", "]", ",", "# 68 cell_phone", "\n", "[", "69", ",", "390", ",", "393", "]", ",", "# 69 microwave", "\n", "[", "70", ",", "408", ",", "414", "]", ",", "# 70 oven", "\n", "[", "71", ",", "547", ",", "550", "]", ",", "# 71 toaster", "\n", "[", "72", ",", "450", ",", "453", "]", ",", "# 72 sink", "\n", "[", "73", ",", "430", ",", "434", "]", ",", "# 73 refrigerator", "\n", "[", "74", ",", "248", ",", "252", "]", ",", "# 74 book", "\n", "[", "75", ",", "291", ",", "295", "]", ",", "# 75 clock", "\n", "[", "76", ",", "585", ",", "588", "]", ",", "# 76 vase", "\n", "[", "77", ",", "446", ",", "449", "]", ",", "# 77 scissors", "\n", "[", "78", ",", "529", ",", "533", "]", ",", "# 78 teddy_bear", "\n", "[", "79", ",", "349", ",", "352", "]", ",", "# 79 hair_drier", "\n", "[", "80", ",", "559", ",", "562", "]", ",", "# 80 toothbrush", "\n", "\n", "]", "\n", "\n", "import", "datetime", "\n", "\n", "# from multiprocessing import Pool", "\n", "#", "\n", "# process_num = 16 if fuse_type == 'spv' else 2", "\n", "# # global pool", "\n", "# # if pool is None:", "\n", "# pool = Pool(processes=process_num)", "\n", "# def func(item):", "\n", "#", "\n", "#     save_HICO(HICO, HICO_dir, item[0], item[1], item[2])", "\n", "#", "\n", "\n", "# gpool.starmap(save_HICO1, zip(repeat(output_file), repeat(HICO_dir), params, repeat(fuse_type)))", "\n", "\n", "from", "sys", "import", "version_info", "\n", "if", "version_info", ".", "major", "==", "3", ":", "\n", "        ", "HICO", "=", "pickle", ".", "load", "(", "open", "(", "output_file", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "", "else", ":", "\n", "        ", "HICO", "=", "pickle", ".", "load", "(", "open", "(", "output_file", ",", "\"rb\"", ")", ")", "\n", "", "print", "(", "'Load HICO sucessfully'", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "for", "p", "in", "params", ":", "\n", "# print(p)", "\n", "        ", "save_HICO", "(", "HICO", ",", "HICO_dir", ",", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "p", "[", "2", "]", ",", "fuse_type", ")", "\n", "# print('end', p)", "\n", "# pool.close()", "\n", "# pool.join()", "\n", "# pool.terminate()", "\n", "# del pool", "\n", "# import gc", "\n", "# gc.collect()", "\n", "# pool.map(save_HICO, params)", "\n", "", "print", "(", "\"Finish save HICO\"", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2.VCOCOeval.__init__": [[31, 108], ["numpy.asarray", "numpy.argwhere", "numpy.argwhere", "pycocotools.coco.COCO", "vsrl_eval2._load_vcoco", "numpy.loadtxt", "numpy.all", "vsrl_eval2.VCOCOeval._init_coco", "vsrl_eval2.VCOCOeval._init_vcoco", "vsrl_eval2.VCOCOeval._get_vcocodb", "open", "numpy.equal", "numpy.sort", "numpy.sort", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1._load_vcoco", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._init_coco", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._init_vcoco", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._get_vcocodb"], ["  ", "def", "__init__", "(", "self", ",", "vsrl_annot_file", ",", "coco_annot_file", ",", "\n", "split_file", ")", ":", "\n", "    ", "\"\"\"Input:\n    vslr_annot_file: path to the vcoco annotations\n    coco_annot_file: path to the coco annotations\n    split_file: image ids for split\n    \"\"\"", "\n", "self", ".", "set_list", "=", "[", "(", "0", ",", "38", ")", ",", "(", "1", ",", "31", ")", ",", "(", "1", ",", "32", ")", ",", "(", "2", ",", "1", ")", ",", "(", "2", ",", "19", ")", ",", "(", "2", ",", "28", ")", ",", "(", "2", ",", "43", ")", ",", "(", "2", ",", "44", ")", ",", "(", "2", ",", "46", ")", ",", "(", "2", ",", "47", ")", ",", "(", "2", ",", "48", ")", ",", "(", "2", ",", "49", ")", ",", "\n", "(", "2", ",", "51", ")", ",", "(", "2", ",", "52", ")", ",", "(", "2", ",", "54", ")", ",", "(", "2", ",", "55", ")", ",", "(", "2", ",", "56", ")", ",", "(", "2", ",", "77", ")", ",", "(", "3", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "3", ",", "4", ")", ",", "(", "3", ",", "6", ")", ",", "(", "3", ",", "7", ")", ",", "(", "3", ",", "8", ")", ",", "\n", "(", "3", ",", "9", ")", ",", "(", "3", ",", "18", ")", ",", "(", "3", ",", "21", ")", ",", "(", "4", ",", "68", ")", ",", "(", "5", ",", "33", ")", ",", "(", "6", ",", "64", ")", ",", "(", "7", ",", "43", ")", ",", "(", "7", ",", "44", ")", ",", "(", "7", ",", "45", ")", ",", "(", "7", ",", "47", ")", ",", "(", "7", ",", "48", ")", ",", "(", "7", ",", "49", ")", ",", "\n", "(", "7", ",", "50", ")", ",", "(", "7", ",", "51", ")", ",", "(", "7", ",", "52", ")", ",", "(", "7", ",", "53", ")", ",", "(", "7", ",", "54", ")", ",", "(", "7", ",", "55", ")", ",", "(", "7", ",", "56", ")", ",", "(", "8", ",", "2", ")", ",", "(", "8", ",", "4", ")", ",", "(", "8", ",", "14", ")", ",", "(", "8", ",", "18", ")", ",", "(", "8", ",", "21", ")", ",", "\n", "(", "8", ",", "25", ")", ",", "(", "8", ",", "27", ")", ",", "(", "8", ",", "29", ")", ",", "(", "8", ",", "57", ")", ",", "(", "8", ",", "58", ")", ",", "(", "8", ",", "60", ")", ",", "(", "8", ",", "61", ")", ",", "(", "8", ",", "62", ")", ",", "(", "8", ",", "64", ")", ",", "(", "9", ",", "31", ")", ",", "(", "9", ",", "32", ")", ",", "(", "9", ",", "37", ")", ",", "\n", "(", "9", ",", "38", ")", ",", "(", "10", ",", "14", ")", ",", "(", "10", ",", "57", ")", ",", "(", "10", ",", "58", ")", ",", "(", "10", ",", "60", ")", ",", "(", "10", ",", "61", ")", ",", "(", "11", ",", "40", ")", ",", "(", "11", ",", "41", ")", ",", "(", "11", ",", "42", ")", ",", "(", "11", ",", "46", ")", ",", "(", "12", ",", "1", ")", ",", "\n", "(", "12", ",", "25", ")", ",", "(", "12", ",", "26", ")", ",", "(", "12", ",", "27", ")", ",", "(", "12", ",", "29", ")", ",", "(", "12", ",", "30", ")", ",", "(", "12", ",", "31", ")", ",", "(", "12", ",", "32", ")", ",", "(", "12", ",", "33", ")", ",", "(", "12", ",", "34", ")", ",", "(", "12", ",", "35", ")", ",", "\n", "(", "12", ",", "37", ")", ",", "(", "12", ",", "38", ")", ",", "(", "12", ",", "39", ")", ",", "(", "12", ",", "40", ")", ",", "(", "12", ",", "41", ")", ",", "(", "12", ",", "42", ")", ",", "(", "12", ",", "47", ")", ",", "(", "12", ",", "50", ")", ",", "(", "12", ",", "68", ")", ",", "(", "12", ",", "74", ")", ",", "\n", "(", "12", ",", "75", ")", ",", "(", "12", ",", "78", ")", ",", "(", "13", ",", "30", ")", ",", "(", "13", ",", "33", ")", ",", "(", "14", ",", "1", ")", ",", "(", "14", ",", "2", ")", ",", "(", "14", ",", "3", ")", ",", "(", "14", ",", "4", ")", ",", "(", "14", ",", "5", ")", ",", "(", "14", ",", "6", ")", ",", "(", "14", ",", "7", ")", ",", "\n", "(", "14", ",", "8", ")", ",", "(", "14", ",", "11", ")", ",", "(", "14", ",", "14", ")", ",", "(", "14", ",", "15", ")", ",", "(", "14", ",", "16", ")", ",", "(", "14", ",", "17", ")", ",", "(", "14", ",", "18", ")", ",", "(", "14", ",", "19", ")", ",", "(", "14", ",", "20", ")", ",", "(", "14", ",", "21", ")", ",", "(", "14", ",", "24", ")", ",", "\n", "(", "14", ",", "25", ")", ",", "(", "14", ",", "26", ")", ",", "(", "14", ",", "27", ")", ",", "(", "14", ",", "28", ")", ",", "(", "14", ",", "29", ")", ",", "(", "14", ",", "30", ")", ",", "(", "14", ",", "31", ")", ",", "(", "14", ",", "32", ")", ",", "(", "14", ",", "33", ")", ",", "(", "14", ",", "34", ")", ",", "\n", "(", "14", ",", "35", ")", ",", "(", "14", ",", "36", ")", ",", "(", "14", ",", "37", ")", ",", "(", "14", ",", "38", ")", ",", "(", "14", ",", "39", ")", ",", "(", "14", ",", "40", ")", ",", "(", "14", ",", "41", ")", ",", "(", "14", ",", "42", ")", ",", "(", "14", ",", "43", ")", ",", "(", "14", ",", "44", ")", ",", "\n", "(", "14", ",", "45", ")", ",", "(", "14", ",", "46", ")", ",", "(", "14", ",", "47", ")", ",", "(", "14", ",", "48", ")", ",", "(", "14", ",", "49", ")", ",", "(", "14", ",", "51", ")", ",", "(", "14", ",", "53", ")", ",", "(", "14", ",", "54", ")", ",", "(", "14", ",", "55", ")", ",", "(", "14", ",", "56", ")", ",", "\n", "(", "14", ",", "57", ")", ",", "(", "14", ",", "61", ")", ",", "(", "14", ",", "62", ")", ",", "(", "14", ",", "63", ")", ",", "(", "14", ",", "64", ")", ",", "(", "14", ",", "65", ")", ",", "(", "14", ",", "66", ")", ",", "(", "14", ",", "67", ")", ",", "(", "14", ",", "68", ")", ",", "(", "14", ",", "73", ")", ",", "\n", "(", "14", ",", "74", ")", ",", "(", "14", ",", "75", ")", ",", "(", "14", ",", "77", ")", ",", "(", "15", ",", "33", ")", ",", "(", "15", ",", "35", ")", ",", "(", "15", ",", "39", ")", ",", "(", "16", ",", "31", ")", ",", "(", "16", ",", "32", ")", ",", "(", "17", ",", "74", ")", ",", "(", "18", ",", "1", ")", ",", "(", "18", ",", "2", ")", ",", "\n", "(", "18", ",", "4", ")", ",", "(", "18", ",", "8", ")", ",", "(", "18", ",", "9", ")", ",", "(", "18", ",", "14", ")", ",", "(", "18", ",", "15", ")", ",", "(", "18", ",", "16", ")", ",", "(", "18", ",", "17", ")", ",", "(", "18", ",", "18", ")", ",", "(", "18", ",", "19", ")", ",", "(", "18", ",", "21", ")", ",", "(", "18", ",", "25", ")", ",", "\n", "(", "18", ",", "26", ")", ",", "(", "18", ",", "27", ")", ",", "(", "18", ",", "28", ")", ",", "(", "18", ",", "29", ")", ",", "(", "18", ",", "30", ")", ",", "(", "18", ",", "31", ")", ",", "(", "18", ",", "32", ")", ",", "(", "18", ",", "33", ")", ",", "(", "18", ",", "34", ")", ",", "(", "18", ",", "35", ")", ",", "\n", "(", "18", ",", "36", ")", ",", "(", "18", ",", "37", ")", ",", "(", "18", ",", "38", ")", ",", "(", "18", ",", "39", ")", ",", "(", "18", ",", "40", ")", ",", "(", "18", ",", "41", ")", ",", "(", "18", ",", "42", ")", ",", "(", "18", ",", "43", ")", ",", "(", "18", ",", "44", ")", ",", "(", "18", ",", "45", ")", ",", "\n", "(", "18", ",", "46", ")", ",", "(", "18", ",", "47", ")", ",", "(", "18", ",", "48", ")", ",", "(", "18", ",", "49", ")", ",", "(", "18", ",", "50", ")", ",", "(", "18", ",", "51", ")", ",", "(", "18", ",", "52", ")", ",", "(", "18", ",", "53", ")", ",", "(", "18", ",", "54", ")", ",", "(", "18", ",", "55", ")", ",", "\n", "(", "18", ",", "56", ")", ",", "(", "18", ",", "57", ")", ",", "(", "18", ",", "64", ")", ",", "(", "18", ",", "65", ")", ",", "(", "18", ",", "66", ")", ",", "(", "18", ",", "67", ")", ",", "(", "18", ",", "68", ")", ",", "(", "18", ",", "73", ")", ",", "(", "18", ",", "74", ")", ",", "(", "18", ",", "77", ")", ",", "\n", "(", "18", ",", "78", ")", ",", "(", "18", ",", "79", ")", ",", "(", "18", ",", "80", ")", ",", "(", "19", ",", "32", ")", ",", "(", "19", ",", "37", ")", ",", "(", "20", ",", "30", ")", ",", "(", "20", ",", "33", ")", "]", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "self", ".", "label_nums", "=", "np", ".", "asarray", "(", "[", "485", ",", "434", ",", "3", ",", "6", ",", "6", ",", "3", ",", "3", ",", "207", ",", "1", ",", "3", ",", "4", ",", "7", ",", "1", ",", "7", ",", "32", ",", "2", ",", "160", ",", "37", ",", "67", ",", "9", ",", "126", ",", "1", ",", "24", ",", "6", ",", "31", ",", "\n", "108", ",", "73", ",", "292", ",", "134", ",", "398", ",", "86", ",", "28", ",", "39", ",", "21", ",", "3", ",", "60", ",", "4", ",", "7", ",", "1", ",", "61", ",", "110", ",", "80", ",", "56", ",", "56", ",", "119", ",", "107", ",", "96", ",", "\n", "59", ",", "2", ",", "1", ",", "4", ",", "430", ",", "136", ",", "55", ",", "1", ",", "5", ",", "1", ",", "20", ",", "165", ",", "278", ",", "26", ",", "24", ",", "1", ",", "29", ",", "228", ",", "1", ",", "15", ",", "55", ",", "54", ",", "1", ",", "2", ",", "\n", "57", ",", "52", ",", "93", ",", "72", ",", "3", ",", "7", ",", "12", ",", "6", ",", "6", ",", "1", ",", "11", ",", "105", ",", "4", ",", "2", ",", "1", ",", "1", ",", "7", ",", "1", ",", "17", ",", "1", ",", "1", ",", "2", ",", "170", ",", "91", ",", "445", ",", "6", ",", "\n", "1", ",", "2", ",", "5", ",", "1", ",", "12", ",", "4", ",", "1", ",", "1", ",", "1", ",", "14", ",", "18", ",", "7", ",", "7", ",", "5", ",", "8", ",", "4", ",", "7", ",", "4", ",", "1", ",", "3", ",", "9", ",", "390", ",", "45", ",", "156", ",", "521", ",", "15", ",", "4", ",", "\n", "5", ",", "338", ",", "254", ",", "3", ",", "5", ",", "11", ",", "15", ",", "12", ",", "43", ",", "12", ",", "12", ",", "2", ",", "2", ",", "14", ",", "1", ",", "11", ",", "37", ",", "18", ",", "134", ",", "1", ",", "7", ",", "1", ",", "29", ",", "291", ",", "\n", "1", ",", "3", ",", "4", ",", "62", ",", "4", ",", "75", ",", "1", ",", "22", ",", "228", ",", "109", ",", "233", ",", "1", ",", "366", ",", "86", ",", "50", ",", "46", ",", "68", ",", "1", ",", "1", ",", "1", ",", "1", ",", "8", ",", "14", ",", "45", ",", "2", ",", "\n", "5", ",", "45", ",", "70", ",", "89", ",", "9", ",", "99", ",", "186", ",", "50", ",", "56", ",", "54", ",", "9", ",", "120", ",", "66", ",", "56", ",", "160", ",", "269", ",", "32", ",", "65", ",", "83", ",", "67", ",", "197", ",", "43", ",", "13", ",", "\n", "26", ",", "5", ",", "46", ",", "3", ",", "6", ",", "1", ",", "60", ",", "67", ",", "56", ",", "20", ",", "2", ",", "78", ",", "11", ",", "58", ",", "1", ",", "350", ",", "1", ",", "83", ",", "41", ",", "18", ",", "2", ",", "9", ",", "1", ",", "466", ",", "224", ",", "32", "]", ")", "\n", "nonrare", "=", "np", ".", "argwhere", "(", "self", ".", "label_nums", ">=", "10", ")", "# non rare", "\n", "rare", "=", "np", ".", "argwhere", "(", "self", ".", "label_nums", "<", "10", ")", "\n", "\n", "self", ".", "l_map", "=", "{", "0", ":", "0", ",", "1", ":", "1", ",", "2", ":", "2", ",", "4", ":", "2", ",", "5", ":", "3", ",", "6", ":", "4", ",", "7", ":", "5", ",", "8", ":", "6", ",", "9", ":", "7", ",", "10", ":", "8", ",", "11", ":", "9", ",", "12", ":", "10", ",", "13", ":", "11", ",", "14", ":", "12", ",", "15", ":", "13", ",", "\n", "16", ":", "7", ",", "18", ":", "14", ",", "19", ":", "15", ",", "20", ":", "15", ",", "21", ":", "16", ",", "24", ":", "17", ",", "25", ":", "18", ",", "26", ":", "19", ",", "28", ":", "20", "}", "\n", "\n", "# t = {\"cut_instr\": 2, \"snowboard_instr\": 21, \"cut_obj\": 4, \"surf_instr\": 0, \"skateboard_instr\": 26, \"kick_obj\": 7,", "\n", "#  \"eat_obj\": 9, \"carry_obj\": 14, \"throw_obj\": 15, \"eat_instr\": 16, \"smile\": 17, \"look_obj\": 18, \"hit_instr\": 19,", "\n", "#  \"hit_obj\": 20, \"ski_instr\": 1, \"run\": 22, \"sit_instr\": 10, \"read_obj\": 24, \"ride_instr\": 5, \"walk\": 3,", "\n", "#  \"point_instr\": 23, \"jump_instr\": 11, \"work_on_computer_instr\": 8, \"hold_obj\": 25, \"drink_instr\": 13,", "\n", "#  \"lay_instr\": 12, \"talk_on_phone_instr\": 6, \"stand\": 27, \"catch_obj\": 28}", "\n", "\n", "# [('surf_instr', 0), ('ski_instr', 1), ('cut_instr', 2), ('walk', 3), ('cut_obj', 4), ('ride_instr', 5),", "\n", "#  ('talk_on_phone_instr', 6), ('kick_obj', 7), ('work_on_computer_instr', 8), ('eat_obj', 9), ('sit_instr', 10),", "\n", "#  ('jump_instr', 11), ('lay_instr', 12), ('drink_instr', 13), ('carry_obj', 14), ('throw_obj', 15),", "\n", "#  ('eat_instr', 16), ('smile', 17), ('look_obj', 18), ('hit_instr', 19), ('hit_obj', 20), ('snowboard_instr', 21),", "\n", "#  ('run', 22), ('point_instr', 23), ('read_obj', 24), ('hold_obj', 25), ('skateboard_instr', 26), ('stand', 27),", "\n", "#  ('catch_obj', 28)]", "\n", "\n", "\n", "# map_24_to_2 = {}", "\n", "# 26", "\n", "self", ".", "COCO", "=", "COCO", "(", "coco_annot_file", ")", "\n", "self", ".", "VCOCO", "=", "_load_vcoco", "(", "vsrl_annot_file", ")", "\n", "self", ".", "image_ids", "=", "np", ".", "loadtxt", "(", "open", "(", "split_file", ",", "'r'", ")", ")", "\n", "# simple check  ", "\n", "\n", "assert", "np", ".", "all", "(", "np", ".", "equal", "(", "np", ".", "sort", "(", "np", ".", "unique", "(", "self", ".", "VCOCO", "[", "0", "]", "[", "'image_id'", "]", ")", ")", ",", "np", ".", "sort", "(", "self", ".", "image_ids", ")", ")", ")", "\n", "\n", "self", ".", "_init_coco", "(", ")", "\n", "self", ".", "_init_vcoco", "(", ")", "\n", "self", ".", "vcocodb", "=", "self", ".", "_get_vcocodb", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2.VCOCOeval._init_vcoco": [[109, 117], ["print", "enumerate"], "methods", ["None"], ["", "def", "_init_vcoco", "(", "self", ")", ":", "\n", "    ", "actions", "=", "[", "x", "[", "'action_name'", "]", "for", "x", "in", "self", ".", "VCOCO", "]", "\n", "roles", "=", "[", "x", "[", "'role_name'", "]", "for", "x", "in", "self", ".", "VCOCO", "]", "\n", "print", "(", "roles", ",", "actions", ")", "\n", "self", ".", "actions", "=", "actions", "\n", "self", ".", "actions_to_id_map", "=", "{", "v", ":", "i", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "actions", ")", "}", "\n", "self", ".", "num_actions", "=", "222", "\n", "self", ".", "roles", "=", "roles", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2.VCOCOeval._init_coco": [[119, 129], ["vsrl_eval2.VCOCOeval.COCO.getCatIds", "dict", "len", "zip", "vsrl_eval2.VCOCOeval.COCO.loadCats", "enumerate", "vsrl_eval2.VCOCOeval.json_category_id_to_contiguous_id.items", "vsrl_eval2.VCOCOeval.COCO.getCatIds"], "methods", ["None"], ["", "def", "_init_coco", "(", "self", ")", ":", "\n", "    ", "category_ids", "=", "self", ".", "COCO", ".", "getCatIds", "(", ")", "\n", "categories", "=", "[", "c", "[", "'name'", "]", "for", "c", "in", "self", ".", "COCO", ".", "loadCats", "(", "category_ids", ")", "]", "\n", "self", ".", "category_to_id_map", "=", "dict", "(", "zip", "(", "categories", ",", "category_ids", ")", ")", "\n", "self", ".", "classes", "=", "[", "'__background__'", "]", "+", "categories", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "classes", ")", "\n", "self", ".", "json_category_id_to_contiguous_id", "=", "{", "\n", "v", ":", "i", "+", "1", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "COCO", ".", "getCatIds", "(", ")", ")", "}", "\n", "self", ".", "contiguous_category_id_to_json_id", "=", "{", "\n", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "json_category_id_to_contiguous_id", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2.VCOCOeval._get_vcocodb": [[131, 183], ["copy.deepcopy", "print", "print", "vsrl_eval2.VCOCOeval.COCO.loadImgs", "vsrl_eval2.VCOCOeval._prep_vcocodb_entry", "vsrl_eval2.VCOCOeval._add_gt_annotations", "res_labels.extend", "s_labels.extend", "len", "len", "sorted", "len", "sorted", "numpy.zeros", "range", "vsrl_eval2.VCOCOeval.image_ids.tolist", "set", "list", "set", "list", "range", "print", "set", "set", "numpy.sum", "numpy.logical_and"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._prep_vcocodb_entry", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._add_gt_annotations"], ["", "def", "_get_vcocodb", "(", "self", ")", ":", "\n", "    ", "vcocodb", "=", "copy", ".", "deepcopy", "(", "self", ".", "COCO", ".", "loadImgs", "(", "self", ".", "image_ids", ".", "tolist", "(", ")", ")", ")", "\n", "res_labels", "=", "[", "]", "\n", "counts", "=", "0", "\n", "s_labels", "=", "[", "]", "\n", "for", "entry", "in", "vcocodb", ":", "\n", "      ", "self", ".", "_prep_vcocodb_entry", "(", "entry", ")", "\n", "labels", ",", "seen_labels", ",", "count", "=", "self", ".", "_add_gt_annotations", "(", "entry", ")", "\n", "res_labels", ".", "extend", "(", "labels", ")", "\n", "s_labels", ".", "extend", "(", "seen_labels", ")", "\n", "counts", "+=", "count", "\n", "", "print", "(", "'data statistics'", ",", "counts", ",", "len", "(", "res_labels", ")", ",", "len", "(", "set", "(", "res_labels", ")", ")", ",", "sorted", "(", "list", "(", "set", "(", "res_labels", ")", ")", ")", ")", "\n", "print", "(", "'data statistics'", ",", "len", "(", "set", "(", "s_labels", ")", ")", ",", "sorted", "(", "list", "(", "set", "(", "s_labels", ")", ")", ")", ")", "\n", "\n", "# data", "\n", "# statistics", "\n", "# 13780", "\n", "# 30", "\n", "# 18[", "\n", "#   (2, 37), (2, 50), (2, 53), (2, 64), (2, 74), (10, 62), (12, 2), (12, 3), (12, 17), (12, 19), (12, 55), (12, 64), (", "\n", "#   14, 9), (14, 10), (14, 59), (18, 20), (18, 60), (18, 61)]", "\n", "# data", "\n", "# statistics", "\n", "# 196[(0, 38), (1, 31), (2, 1), (2, 43), (2, 44), (2, 46), (2, 47), (2, 48), (2, 49), (2, 52), (2, 54), (2, 55), (", "\n", "# 2, 56), (2, 77), (3, 2), (3, 3), (3, 4), (3, 6), (3, 7), (3, 8), (3, 9), (3, 18), (3, 21), (4, 68), (5, 33), (", "\n", "#     6, 64), (7, 43), (7, 44), (7, 45), (7, 47), (7, 48), (7, 49), (7, 50), (7, 51), (7, 52), (7, 53), (7, 54), (", "\n", "#     7, 55), (7, 56), (8, 2), (8, 4), (8, 14), (8, 18), (8, 21), (8, 29), (8, 57), (8, 58), (8, 60), (8, 61), (", "\n", "#     8, 62), (9, 31), (9, 32), (9, 37), (9, 38), (10, 14), (10, 57), (10, 58), (10, 60), (11, 40), (11, 41), (", "\n", "#     11, 42), (11, 46), (12, 1), (12, 25), (12, 26), (12, 27), (12, 29), (12, 30), (12, 31), (12, 32), (12, 34), (", "\n", "#     12, 35), (12, 37), (12, 38), (12, 47), (12, 68), (12, 78), (13, 30), (13, 33), (14, 1), (14, 2), (14, 3), (", "\n", "#     14, 4), (14, 5), (14, 6), (14, 7), (14, 8), (14, 14), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (", "\n", "#     14, 20), (14, 21), (14, 25), (14, 26), (14, 27), (14, 28), (14, 29), (14, 30), (14, 31), (14, 32), (14, 33), (", "\n", "#     14, 34), (14, 35), (14, 36), (14, 37), (14, 38), (14, 39), (14, 40), (14, 41), (14, 42), (14, 43), (14, 44), (", "\n", "#     14, 45), (14, 46), (14, 47), (14, 48), (14, 49), (14, 53), (14, 54), (14, 55), (14, 56), (14, 57), (14, 61), (", "\n", "#     14, 63), (14, 64), (14, 65), (14, 66), (14, 67), (14, 68), (14, 74), (14, 75), (14, 77), (15, 33), (15, 35), (", "\n", "#     15, 39), (16, 32), (17, 74), (18, 1), (18, 2), (18, 4), (18, 8), (18, 9), (18, 14), (18, 16), (18, 17), (", "\n", "#     18, 18), (18, 19), (18, 21), (18, 25), (18, 26), (18, 27), (18, 28), (18, 29), (18, 30), (18, 31), (18, 32), (", "\n", "#     18, 33), (18, 34), (18, 35), (18, 36), (18, 37), (18, 38), (18, 39), (18, 40), (18, 41), (18, 42), (18, 43), (", "\n", "#     18, 44), (18, 45), (18, 46), (18, 47), (18, 48), (18, 49), (18, 51), (18, 52), (18, 53), (18, 54), (18, 55), (", "\n", "#     18, 56), (18, 57), (18, 64), (18, 65), (18, 66), (18, 67), (18, 68), (18, 74), (18, 77), (18, 78), (18, 79), (", "\n", "#     18, 80), (19, 37), (20, 30), (20, 33)]", "\n", "\n", "# print", "\n", "if", "0", ":", "\n", "      ", "nums", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "entry", "in", "vcocodb", ":", "\n", "        ", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "          ", "nums", "[", "aid", "]", "+=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "entry", "[", "'gt_actions'", "]", "[", ":", ",", "aid", "]", "==", "1", ",", "entry", "[", "'gt_classes'", "]", "==", "1", ")", ")", "\n", "", "", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "print", "(", "'Action %s = %d'", "%", "(", "self", ".", "actions", "[", "aid", "]", ",", "nums", "[", "aid", "]", ")", ")", "\n", "\n", "", "", "return", "vcocodb", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2.VCOCOeval._prep_vcocodb_entry": [[185, 191], ["numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty"], "methods", ["None"], ["", "def", "_prep_vcocodb_entry", "(", "self", ",", "entry", ")", ":", "\n", "    ", "entry", "[", "'boxes'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "entry", "[", "'is_crowd'", "]", "=", "np", ".", "empty", "(", "(", "0", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "entry", "[", "'gt_classes'", "]", "=", "np", ".", "empty", "(", "(", "0", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "entry", "[", "'gt_actions'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "entry", "[", "'gt_role_id'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2.VCOCOeval._add_gt_annotations": [[193, 284], ["vsrl_eval2.VCOCOeval.COCO.getAnnIds", "vsrl_eval2.VCOCOeval.COCO.loadAnns", "enumerate", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "vsrl_eval2.clip_xyxy_to_image", "len", "numpy.ones", "numpy.ones", "vsrl_eval2.VCOCOeval._get_vsrl_data", "json.load", "numpy.zeros", "numpy.argwhere", "numpy.maximum", "numpy.maximum", "valid_objs.append", "valid_ann_ids.append", "open", "numpy.ones", "enumerate", "numpy.all", "vsrl_eval2.VCOCOeval.set_list.index", "seen_labels.append", "unseen_labels.append"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.clip_xyxy_to_image", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._get_vsrl_data"], ["", "def", "_add_gt_annotations", "(", "self", ",", "entry", ")", ":", "\n", "    ", "ann_ids", "=", "self", ".", "COCO", ".", "getAnnIds", "(", "imgIds", "=", "entry", "[", "'id'", "]", ",", "iscrowd", "=", "None", ")", "\n", "objs", "=", "self", ".", "COCO", ".", "loadAnns", "(", "ann_ids", ")", "\n", "# Sanitize bboxes -- some are invalid", "\n", "valid_objs", "=", "[", "]", "\n", "valid_ann_ids", "=", "[", "]", "\n", "width", "=", "entry", "[", "'width'", "]", "\n", "height", "=", "entry", "[", "'height'", "]", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "      ", "if", "'ignore'", "in", "obj", "and", "obj", "[", "'ignore'", "]", "==", "1", ":", "\n", "          ", "continue", "\n", "# Convert form x1, y1, w, h to x1, y1, x2, y2", "\n", "", "x1", "=", "obj", "[", "'bbox'", "]", "[", "0", "]", "\n", "y1", "=", "obj", "[", "'bbox'", "]", "[", "1", "]", "\n", "x2", "=", "x1", "+", "np", ".", "maximum", "(", "0.", ",", "obj", "[", "'bbox'", "]", "[", "2", "]", "-", "1.", ")", "\n", "y2", "=", "y1", "+", "np", ".", "maximum", "(", "0.", ",", "obj", "[", "'bbox'", "]", "[", "3", "]", "-", "1.", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "clip_xyxy_to_image", "(", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "height", ",", "width", ")", "\n", "# Require non-zero seg area and more than 1x1 box size", "\n", "if", "obj", "[", "'area'", "]", ">", "0", "and", "x2", ">", "x1", "and", "y2", ">", "y1", ":", "\n", "        ", "obj", "[", "'clean_bbox'", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "valid_ann_ids", ".", "append", "(", "ann_ids", "[", "i", "]", ")", "\n", "", "", "num_valid_objs", "=", "len", "(", "valid_objs", ")", "\n", "assert", "num_valid_objs", "==", "len", "(", "valid_ann_ids", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ",", "4", ")", ",", "dtype", "=", "entry", "[", "'boxes'", "]", ".", "dtype", ")", "\n", "is_crowd", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ")", ",", "dtype", "=", "entry", "[", "'is_crowd'", "]", ".", "dtype", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ")", ",", "dtype", "=", "entry", "[", "'gt_classes'", "]", ".", "dtype", ")", "\n", "gt_actions", "=", "-", "np", ".", "ones", "(", "(", "num_valid_objs", ",", "self", ".", "num_actions", ")", ",", "dtype", "=", "entry", "[", "'gt_actions'", "]", ".", "dtype", ")", "\n", "gt_role_id", "=", "-", "np", ".", "ones", "(", "(", "num_valid_objs", ",", "self", ".", "num_actions", ")", ",", "dtype", "=", "entry", "[", "'gt_role_id'", "]", ".", "dtype", ")", "\n", "\n", "unseen_labels", "=", "[", "]", "\n", "seen_labels", "=", "[", "]", "\n", "counts", "=", "0", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "valid_objs", ")", ":", "\n", "      ", "cls", "=", "self", ".", "json_category_id_to_contiguous_id", "[", "obj", "[", "'category_id'", "]", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "obj", "[", "'clean_bbox'", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "is_crowd", "[", "ix", "]", "=", "obj", "[", "'iscrowd'", "]", "\n", "\n", "tmp_action", ",", "tmp_role_id", "=", "self", ".", "_get_vsrl_data", "(", "valid_ann_ids", "[", "ix", "]", ",", "\n", "valid_ann_ids", ",", "valid_objs", ",", "26", ")", "\n", "# reconstruct 222 from 26", "\n", "\n", "label_map", "=", "json", ".", "load", "(", "open", "(", "cfg", ".", "LOCAL_DATA", "+", "\"/Data/action_index.json\"", ")", ")", "\n", "\n", "role_id", "=", "-", "np", ".", "ones", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "gt_actions", "[", "ix", ",", ":", "]", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "aid", "in", "np", ".", "argwhere", "(", "tmp_action", "==", "1", ")", ":", "# loop 26 actions", "\n", "# import ipdb", "\n", "# ipdb.set_trace()", "\n", "        ", "for", "j", ",", "rid", "in", "enumerate", "(", "self", ".", "roles", "[", "aid", "[", "0", "]", "]", ")", ":", "\n", "          ", "if", "rid", "==", "'agent'", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "# tmp_role_id[aid[0]]", "\n", "\n", "            ", "if", "np", ".", "all", "(", "tmp_role_id", "[", "aid", "[", "0", "]", "]", "==", "-", "1", ")", ":", "\n", "              ", "continue", "\n", "", "for", "obj_idx", "in", "tmp_role_id", "[", "aid", "[", "0", "]", "]", ":", "\n", "              ", "if", "obj_idx", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "action_name", "=", "self", ".", "actions", "[", "aid", "[", "0", "]", "]", "+", "'_'", "+", "rid", "\n", "if", "action_name", "not", "in", "label_map", ":", "\n", "                  ", "continue", "\n", "", "if", "label_map", "[", "action_name", "]", "not", "in", "self", ".", "l_map", ":", "\n", "                  ", "continue", "\n", "", "verb_id", "=", "self", ".", "l_map", "[", "label_map", "[", "action_name", "]", "]", "\n", "\n", "obj_cls", "=", "self", ".", "json_category_id_to_contiguous_id", "[", "valid_objs", "[", "obj_idx", "]", "[", "'category_id'", "]", "]", "\n", "if", "(", "verb_id", ",", "obj_cls", ")", "not", "in", "self", ".", "set_list", ":", "\n", "                  ", "unseen_labels", ".", "append", "(", "(", "verb_id", ",", "obj_cls", ")", ")", "\n", "continue", "\n", "\n", "", "counts", "+=", "1", "\n", "action_id", "=", "self", ".", "set_list", ".", "index", "(", "(", "verb_id", ",", "obj_cls", ")", ")", "\n", "seen_labels", ".", "append", "(", "(", "verb_id", ",", "obj_cls", ")", ")", "\n", "gt_actions", "[", "ix", ",", "action_id", "]", "=", "1", "\n", "role_id", "[", "action_id", "]", "=", "obj_idx", "\n", "\n", "", "", "", "", "", "gt_role_id", "[", "ix", ",", ":", "]", "=", "role_id", "\n", "\n", "", "entry", "[", "'boxes'", "]", "=", "np", ".", "append", "(", "entry", "[", "'boxes'", "]", ",", "boxes", ",", "axis", "=", "0", ")", "\n", "entry", "[", "'gt_classes'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_classes'", "]", ",", "gt_classes", ")", "\n", "entry", "[", "'is_crowd'", "]", "=", "np", ".", "append", "(", "entry", "[", "'is_crowd'", "]", ",", "is_crowd", ")", "\n", "entry", "[", "'gt_actions'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_actions'", "]", ",", "gt_actions", ",", "axis", "=", "0", ")", "\n", "entry", "[", "'gt_role_id'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_role_id'", "]", ",", "gt_role_id", ",", "axis", "=", "0", ")", "\n", "return", "unseen_labels", ",", "seen_labels", ",", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2.VCOCOeval._get_vsrl_data": [[285, 312], ["enumerate", "numpy.ones", "numpy.ones", "numpy.where", "numpy.where", "range", "numpy.logical_and", "numpy.where"], "methods", ["None"], ["", "def", "_get_vsrl_data", "(", "self", ",", "ann_id", ",", "ann_ids", ",", "objs", ",", "num_actions", ")", ":", "\n", "    ", "\"\"\" Get VSRL data for ann_id.\"\"\"", "\n", "action_id", "=", "-", "np", ".", "ones", "(", "(", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "role_id", "=", "-", "np", ".", "ones", "(", "(", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# check if ann_id in vcoco annotations", "\n", "in_vcoco", "=", "np", ".", "where", "(", "self", ".", "VCOCO", "[", "0", "]", "[", "'ann_id'", "]", "==", "ann_id", ")", "[", "0", "]", "\n", "if", "in_vcoco", ".", "size", ">", "0", ":", "\n", "      ", "action_id", "[", ":", "]", "=", "0", "\n", "role_id", "[", ":", "]", "=", "-", "1", "\n", "", "else", ":", "\n", "      ", "return", "action_id", ",", "role_id", "\n", "", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "VCOCO", ")", ":", "\n", "      ", "assert", "x", "[", "'action_name'", "]", "==", "self", ".", "actions", "[", "i", "]", "\n", "has_label", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "x", "[", "'ann_id'", "]", "==", "ann_id", ",", "x", "[", "'label'", "]", "==", "1", ")", ")", "[", "0", "]", "\n", "if", "has_label", ".", "size", ">", "0", ":", "\n", "        ", "action_id", "[", "i", "]", "=", "1", "\n", "assert", "has_label", ".", "size", "==", "1", "\n", "rids", "=", "x", "[", "'role_object_id'", "]", "[", "has_label", "]", "\n", "assert", "rids", "[", "0", ",", "0", "]", "==", "ann_id", "\n", "for", "j", "in", "range", "(", "1", ",", "rids", ".", "shape", "[", "1", "]", ")", ":", "\n", "          ", "if", "rids", "[", "0", ",", "j", "]", "==", "0", ":", "\n", "# no role", "\n", "            ", "continue", "\n", "", "aid", "=", "np", ".", "where", "(", "ann_ids", "==", "rids", "[", "0", ",", "j", "]", ")", "[", "0", "]", "\n", "assert", "aid", ".", "size", ">", "0", "\n", "role_id", "[", "i", ",", "j", "-", "1", "]", "=", "aid", "\n", "", "", "", "return", "action_id", ",", "role_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2.VCOCOeval._collect_detections_for_image": [[314, 339], ["numpy.empty", "numpy.empty", "numpy.zeros", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate", "enumerate"], "methods", ["None"], ["", "def", "_collect_detections_for_image", "(", "self", ",", "dets", ",", "image_id", ")", ":", "\n", "\n", "    ", "agents", "=", "np", ".", "empty", "(", "(", "0", ",", "4", "+", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# 4 + 26 = 30", "\n", "roles", "=", "np", ".", "empty", "(", "(", "0", ",", "5", "*", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# (5 * 26), 2", "\n", "for", "det", "in", "dets", ":", "# loop all detection instance", "\n", "# print(det.keys())", "\n", "      ", "if", "det", "[", "'image_id'", "]", "==", "image_id", ":", "# might be several", "\n", "        ", "this_agent", "=", "np", ".", "zeros", "(", "(", "1", ",", "4", "+", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this_role", "=", "np", ".", "zeros", "(", "(", "1", ",", "5", "*", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this_agent", "[", "0", ",", ":", "4", "]", "=", "det", "[", "'person_box'", "]", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "# loop 26 actions", "\n", "          ", "for", "j", ",", "rid", "in", "enumerate", "(", "self", ".", "roles", "[", "aid", "]", ")", ":", "\n", "            ", "if", "rid", "==", "'agent'", ":", "\n", "#if aid == 10:", "\n", "#  this_agent[0, 4 + aid] = det['talk_' + rid]", "\n", "#if aid == 16:", "\n", "#  this_agent[0, 4 + aid] = det['work_' + rid]", "\n", "#if (aid != 10) and (aid != 16):", "\n", "\n", "                ", "this_agent", "[", "0", ",", "4", "+", "aid", "]", "=", "det", "[", "self", ".", "actions", "[", "aid", "]", "+", "'_'", "+", "rid", "]", "\n", "", "else", ":", "\n", "                ", "this_role", "[", "0", ",", "5", "*", "aid", ":", "5", "*", "aid", "+", "5", ",", "j", "-", "1", "]", "=", "det", "[", "self", ".", "actions", "[", "aid", "]", "+", "'_'", "+", "rid", "]", "\n", "", "", "", "agents", "=", "np", ".", "concatenate", "(", "(", "agents", ",", "this_agent", ")", ",", "axis", "=", "0", ")", "\n", "roles", "=", "np", ".", "concatenate", "(", "(", "roles", ",", "this_role", ")", ",", "axis", "=", "0", ")", "\n", "", "", "return", "agents", ",", "roles", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2.VCOCOeval._collect_detections_for_image1": [[340, 365], ["numpy.empty", "numpy.empty", "numpy.zeros", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["", "def", "_collect_detections_for_image1", "(", "self", ",", "dets", ",", "image_id", ")", ":", "\n", "\n", "    ", "agents", "=", "np", ".", "empty", "(", "(", "0", ",", "4", "+", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# 4 + 26 = 30", "\n", "roles", "=", "np", ".", "empty", "(", "(", "0", ",", "5", "*", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# (5 * 26), 2", "\n", "for", "det", "in", "dets", ":", "# loop all detection instance", "\n", "# print(det.keys())", "\n", "      ", "if", "det", "[", "'image_id'", "]", "==", "image_id", ":", "# might be several", "\n", "        ", "this_agent", "=", "np", ".", "zeros", "(", "(", "1", ",", "4", "+", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this_role", "=", "np", ".", "zeros", "(", "(", "1", ",", "5", "*", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this_agent", "[", "0", ",", ":", "4", "]", "=", "det", "[", "'person_box'", "]", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "# loop 222 actions", "\n", "# for j, rid in enumerate(self.roles[self.set_list[aid]]):", "\n", "#   if rid == 'agent':", "\n", "#       #if aid == 10:", "\n", "#       #  this_agent[0, 4 + aid] = det['talk_' + rid]", "\n", "#       #if aid == 16:", "\n", "#       #  this_agent[0, 4 + aid] = det['work_' + rid]", "\n", "#       #if (aid != 10) and (aid != 16):", "\n", "#", "\n", "#       this_agent[0, 4 + aid] = 0", "\n", "#   else:", "\n", "          ", "this_role", "[", "0", ",", "5", "*", "aid", ":", "5", "*", "aid", "+", "5", "]", "=", "det", "[", "aid", "]", "\n", "", "agents", "=", "np", ".", "concatenate", "(", "(", "agents", ",", "this_agent", ")", ",", "axis", "=", "0", ")", "\n", "roles", "=", "np", ".", "concatenate", "(", "(", "roles", ",", "this_role", ")", ",", "axis", "=", "0", ")", "\n", "", "", "return", "agents", ",", "roles", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2.VCOCOeval._do_eval": [[367, 371], ["vsrl_eval2.VCOCOeval._do_role_eval"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._do_role_eval"], ["", "def", "_do_eval", "(", "self", ",", "detections_file", ",", "ovr_thresh", "=", "0.5", ")", ":", "\n", "\n", "# self._do_agent_eval(vcocodb, detections_file, ovr_thresh=ovr_thresh)", "\n", "    ", "self", ".", "_do_role_eval", "(", "self", ".", "vcocodb", ",", "detections_file", ",", "ovr_thresh", "=", "ovr_thresh", ",", "eval_type", "=", "'scenario_1'", ")", "\n", "# self._do_role_eval(vcocodb, detections_file, ovr_thresh=ovr_thresh, eval_type='scenario_2')", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2.VCOCOeval._do_role_eval": [[374, 529], ["numpy.zeros", "range", "numpy.zeros", "range", "print", "range", "numpy.argwhere", "numpy.argwhere", "print", "print", "print", "print", "print", "iter_str.replace.replace.replace", "model_name.replace.replace.replace", "open", "open.write", "open.flush", "open.close", "open", "pickle.load", "len", "numpy.any", "numpy.all", "range", "vsrl_eval2.VCOCOeval._collect_detections_for_image1", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.cumsum", "numpy.cumsum", "vsrl_eval2.voc_ap", "print", "model_name.replace.replace.split", "range", "range", "range", "numpy.where", "numpy.sum", "range", "numpy.array.argsort", "numpy.zeros", "numpy.amax", "numpy.maximum", "len", "numpy.zeros", "range", "float", "int", "len", "numpy.ones_like", "numpy.where", "agent_scores.argsort", "vsrl_eval2.get_overlap", "get_overlap.argmax", "get_overlap.max", "numpy.all", "sc[].append", "numpy.finfo", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "vsrl_eval2.get_overlap", "fp[].append", "tp[].append", "numpy.where", "numpy.isnan", "gt_roles[].reshape", "fp[].append", "tp[].append", "fp[].append", "tp[].append", "numpy.all", "numpy.all", "ValueError", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._collect_detections_for_image1", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.voc_ap", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.get_overlap", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.get_overlap"], ["", "def", "_do_role_eval", "(", "self", ",", "vcocodb", ",", "detections_file", ",", "ovr_thresh", "=", "0.5", ",", "eval_type", "=", "'scenario_1'", ")", ":", "\n", "\n", "    ", "with", "open", "(", "detections_file", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "dets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "tp", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "fp", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "sc", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "\n", "npos", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "vcocodb", ")", ")", ":", "\n", "      ", "image_id", "=", "vcocodb", "[", "i", "]", "[", "'id'", "]", "\n", "gt_inds", "=", "np", ".", "where", "(", "vcocodb", "[", "i", "]", "[", "'gt_classes'", "]", "==", "1", ")", "[", "0", "]", "\n", "# person boxes", "\n", "gt_boxes", "=", "vcocodb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_inds", "]", "\n", "gt_actions", "=", "vcocodb", "[", "i", "]", "[", "'gt_actions'", "]", "[", "gt_inds", "]", "\n", "# some peorson instances don't have annotated actions", "\n", "# we ignore those instances", "\n", "ignore", "=", "np", ".", "any", "(", "gt_actions", "==", "-", "1", ",", "axis", "=", "1", ")", "\n", "assert", "np", ".", "all", "(", "gt_actions", "[", "np", ".", "where", "(", "ignore", "==", "True", ")", "[", "0", "]", "]", "==", "-", "1", ")", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "npos", "[", "aid", "]", "+=", "np", ".", "sum", "(", "gt_actions", "[", ":", ",", "aid", "]", "==", "1", ")", "\n", "\n", "", "pred_agents", ",", "pred_roles", "=", "self", ".", "_collect_detections_for_image1", "(", "dets", ",", "image_id", ")", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "# if len(self.roles[aid])<2:", "\n", "#   if action has no role, then no role AP computed", "\n", "# continue", "\n", "\n", "        ", "for", "rid", "in", "range", "(", "1", ")", ":", "\n", "\n", "# keep track of detected instances for each action for each role", "\n", "          ", "covered", "=", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "# get gt roles for action and role", "\n", "gt_role_inds", "=", "vcocodb", "[", "i", "]", "[", "'gt_role_id'", "]", "[", "gt_inds", ",", "aid", "]", "\n", "gt_roles", "=", "-", "np", ".", "ones_like", "(", "gt_boxes", ")", "\n", "for", "j", "in", "range", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "gt_role_inds", "[", "j", "]", ">", "-", "1", ":", "\n", "              ", "gt_roles", "[", "j", "]", "=", "vcocodb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_role_inds", "[", "j", "]", "]", "\n", "\n", "", "", "agent_boxes", "=", "pred_agents", "[", ":", ",", ":", "4", "]", "\n", "role_boxes", "=", "pred_roles", "[", ":", ",", "5", "*", "aid", ":", "5", "*", "aid", "+", "4", "]", "\n", "agent_scores", "=", "pred_roles", "[", ":", ",", "5", "*", "aid", "+", "4", "]", "\n", "\n", "valid", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "agent_scores", ")", "==", "False", ")", "[", "0", "]", "\n", "#valid = np.where(agent_scores != 0)[0]", "\n", "\n", "\n", "agent_scores", "=", "agent_scores", "[", "valid", "]", "\n", "agent_boxes", "=", "agent_boxes", "[", "valid", ",", ":", "]", "\n", "role_boxes", "=", "role_boxes", "[", "valid", ",", ":", "]", "\n", "\n", "idx", "=", "agent_scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "for", "j", "in", "idx", ":", "\n", "            ", "pred_box", "=", "agent_boxes", "[", "j", ",", ":", "]", "\n", "overlaps", "=", "get_overlap", "(", "gt_boxes", ",", "pred_box", ")", "\n", "\n", "# matching happens based on the person ", "\n", "jmax", "=", "overlaps", ".", "argmax", "(", ")", "\n", "ovmax", "=", "overlaps", ".", "max", "(", ")", "\n", "\n", "# if matched with an instance with no annotations", "\n", "# continue", "\n", "if", "ignore", "[", "jmax", "]", ":", "\n", "              ", "continue", "\n", "\n", "# overlap between predicted role and gt role", "\n", "", "if", "np", ".", "all", "(", "gt_roles", "[", "jmax", ",", ":", "]", "==", "-", "1", ")", ":", "# if no gt role", "\n", "              ", "if", "eval_type", "==", "'scenario_1'", ":", "\n", "                ", "if", "np", ".", "all", "(", "role_boxes", "[", "j", ",", ":", "]", "==", "0.0", ")", "or", "np", ".", "all", "(", "np", ".", "isnan", "(", "role_boxes", "[", "j", ",", ":", "]", ")", ")", ":", "\n", "# if no role is predicted, mark it as correct role overlap", "\n", "                  ", "ov_role", "=", "1.0", "\n", "", "else", ":", "\n", "# if a role is predicted, mark it as false ", "\n", "                  ", "ov_role", "=", "0.0", "\n", "", "", "elif", "eval_type", "==", "'scenario_2'", ":", "\n", "# if no gt role, role prediction is always correct, irrespective of the actual predition", "\n", "                ", "ov_role", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown eval type'", ")", "\n", "", "", "else", ":", "\n", "              ", "ov_role", "=", "get_overlap", "(", "gt_roles", "[", "jmax", ",", ":", "]", ".", "reshape", "(", "(", "1", ",", "4", ")", ")", ",", "role_boxes", "[", "j", ",", ":", "]", ")", "\n", "\n", "", "is_true_action", "=", "(", "gt_actions", "[", "jmax", ",", "aid", "]", "==", "1", ")", "\n", "sc", "[", "aid", "]", ".", "append", "(", "agent_scores", "[", "j", "]", ")", "\n", "# print(ovmax, ov_role, gt_roles[jmax])", "\n", "# import ipdb", "\n", "# ipdb.set_trace()", "\n", "if", "is_true_action", "and", "(", "ovmax", ">=", "ovr_thresh", ")", "and", "(", "ov_role", ">=", "ovr_thresh", ")", ":", "\n", "              ", "if", "covered", "[", "jmax", "]", ":", "\n", "                ", "fp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "fp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "covered", "[", "jmax", "]", "=", "True", "\n", "", "", "else", ":", "\n", "              ", "fp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "\n", "# compute ap for each action", "\n", "", "", "", "", "", "role_ap", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "role_ap", "[", ":", "]", "=", "np", ".", "nan", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "# if len(self.roles[aid])<2:", "\n", "#   continue", "\n", "      ", "a_fp", "=", "np", ".", "array", "(", "fp", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_tp", "=", "np", ".", "array", "(", "tp", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_sc", "=", "np", ".", "array", "(", "sc", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# sort in descending score order", "\n", "idx", "=", "a_sc", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "a_fp", "=", "a_fp", "[", "idx", "]", "\n", "a_tp", "=", "a_tp", "[", "idx", "]", "\n", "a_sc", "=", "a_sc", "[", "idx", "]", "\n", "\n", "a_fp", "=", "np", ".", "cumsum", "(", "a_fp", ")", "\n", "a_tp", "=", "np", ".", "cumsum", "(", "a_tp", ")", "\n", "if", "npos", "[", "aid", "]", "==", "0", ":", "\n", "        ", "rec", "=", "np", ".", "zeros", "(", "a_tp", ".", "shape", ",", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "rec", "=", "a_tp", "/", "float", "(", "npos", "[", "aid", "]", ")", "\n", "#check", "\n", "", "assert", "(", "np", ".", "amax", "(", "rec", ")", "<=", "1", ")", ",", "rec", "\n", "prec", "=", "a_tp", "/", "np", ".", "maximum", "(", "a_tp", "+", "a_fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "role_ap", "[", "aid", "]", "=", "voc_ap", "(", "rec", ",", "prec", ")", "\n", "\n", "", "print", "(", "'---------Reporting Role AP (%)------------------'", ")", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "# if len(self.roles[aid])<2: continue", "\n", "# for rid in range(len(self.roles[aid])-1):", "\n", "      ", "print", "(", "'{: >23}: AP = {:0.2f} (#pos = {:d})'", ".", "format", "(", "aid", ",", "role_ap", "[", "aid", "]", "*", "100.0", ",", "int", "(", "npos", "[", "aid", "]", ")", ")", ")", "\n", "", "nonrare", "=", "np", ".", "argwhere", "(", "self", ".", "label_nums", ">=", "10", ")", "# non rare", "\n", "rare", "=", "np", ".", "argwhere", "(", "self", ".", "label_nums", "<", "10", ")", "\n", "print", "(", "'Average Role [%s] AP = %.2f'", "%", "(", "eval_type", ",", "np", ".", "nanmean", "(", "role_ap", ")", "*", "100.00", ")", ")", "\n", "print", "(", "'Average Role [%s] nonrare = %.2f'", "%", "(", "eval_type", ",", "np", ".", "nanmean", "(", "role_ap", "[", "nonrare", "]", ")", "*", "100.00", ")", ")", "\n", "print", "(", "'Average Role [%s] rare = %.2f'", "%", "(", "eval_type", ",", "np", ".", "nanmean", "(", "role_ap", "[", "rare", "]", ")", "*", "100.00", ")", ")", "\n", "print", "(", "'---------------------------------------------'", ")", "\n", "# print('Average Role [%s] AP = %.2f, omitting the action \"point\"'%(eval_type, (np.nanmean(role_ap) * 25 - role_ap[-3][0]) / 24 * 100.00))", "\n", "print", "(", "'---------------------------------------------'", ")", "\n", "\n", "model_name", "=", "detections_file", "[", "len", "(", "cfg", ".", "LOCAL_DATA", "+", "'Results/'", ")", ":", "]", "\n", "iter_str", "=", "model_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "iter_str", "=", "iter_str", ".", "replace", "(", "'/'", ",", "''", ")", "\n", "model_name", "=", "model_name", "[", "len", "(", "iter_str", ")", "+", "2", ":", "]", "\n", "model_name", "=", "model_name", ".", "replace", "(", "'.pkl'", ",", "''", ")", "\n", "f", "=", "open", "(", "cfg", ".", "LOCAL_DATA", "+", "'/coco_csv/{}_{}.csv'", ".", "format", "(", "model_name", ",", "eval_type", ")", ",", "'a'", ")", "\n", "f", ".", "write", "(", "'%.2f %.2f %.2f %.2f\\n'", "%", "(", "np", ".", "nanmean", "(", "role_ap", ")", "*", "100.00", ",", "np", ".", "nanmean", "(", "role_ap", ")", "*", "100.00", ",", "np", ".", "nanmean", "(", "role_ap", "[", "rare", "]", ")", "*", "100.00", ",", "np", ".", "nanmean", "(", "role_ap", "[", "nonrare", "]", ")", "*", "100.00", ")", ")", "\n", "f", ".", "flush", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2.VCOCOeval._do_agent_eval": [[530, 627], ["numpy.zeros", "range", "numpy.zeros", "range", "print", "range", "print", "print", "open", "pickle.load", "len", "numpy.any", "range", "vsrl_eval2.VCOCOeval._collect_detections_for_image", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.cumsum", "numpy.cumsum", "vsrl_eval2.voc_ap", "print", "range", "range", "range", "numpy.where", "numpy.sum", "numpy.zeros", "numpy.array.argsort", "float", "numpy.amax", "numpy.maximum", "numpy.where", "agent_scores.argsort", "vsrl_eval2.get_overlap", "get_overlap.argmax", "get_overlap.max", "sc[].append", "int", "fp[].append", "tp[].append", "numpy.finfo", "numpy.nansum", "numpy.isnan", "fp[].append", "tp[].append", "fp[].append", "tp[].append"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._collect_detections_for_image", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.voc_ap", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.get_overlap"], ["", "def", "_do_agent_eval", "(", "self", ",", "vcocodb", ",", "detections_file", ",", "ovr_thresh", "=", "0.5", ")", ":", "\n", "\n", "    ", "with", "open", "(", "detections_file", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "dets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "tp", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "fp", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "sc", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "\n", "npos", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "vcocodb", ")", ")", ":", "\n", "      ", "image_id", "=", "vcocodb", "[", "i", "]", "[", "'id'", "]", "# img ID, not the full name (e.g. id= 165, 'file_name' = COCO_train2014_000000000165.jpg )", "\n", "gt_inds", "=", "np", ".", "where", "(", "vcocodb", "[", "i", "]", "[", "'gt_classes'", "]", "==", "1", ")", "[", "0", "]", "# index of the person's box among all object boxes", "\n", "# person boxes", "\n", "gt_boxes", "=", "vcocodb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_inds", "]", "# all person's boxes in this image", "\n", "gt_actions", "=", "vcocodb", "[", "i", "]", "[", "'gt_actions'", "]", "[", "gt_inds", "]", "# index of Nx26 binary matrix indicating the actions", "\n", "# some peorson instances don't have annotated actions", "\n", "# we ignore those instances", "\n", "ignore", "=", "np", ".", "any", "(", "gt_actions", "==", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "npos", "[", "aid", "]", "+=", "np", ".", "sum", "(", "gt_actions", "[", ":", ",", "aid", "]", "==", "1", ")", "# how many actions are involved in this image(for all the human)", "\n", "\n", "", "pred_agents", ",", "_", "=", "self", ".", "_collect_detections_for_image", "(", "dets", ",", "image_id", ")", "\n", "# For each image, we have a pred_agents. For example, there are 2 people detected, then pred_agents is a 2x(4+26) matrix. Each row stands for a human, 0-3 human box, 4-25 the score for each action.", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "\n", "# keep track of detected instances for each action", "\n", "        ", "covered", "=", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "bool", ")", "# gt_boxes.shape[0] is the number of people in this image", "\n", "\n", "agent_scores", "=", "pred_agents", "[", ":", ",", "4", "+", "aid", "]", "# score of this action for all people in this image", "\n", "agent_boxes", "=", "pred_agents", "[", ":", ",", ":", "4", "]", "# predicted buman box for all people in this image", "\n", "# remove NaNs", "\n", "# If only use agent, there should be no NAN cause there is no object information provided. Just give a agent score.", "\n", "valid", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "agent_scores", ")", "==", "False", ")", "[", "0", "]", "\n", "agent_scores", "=", "agent_scores", "[", "valid", "]", "\n", "agent_boxes", "=", "agent_boxes", "[", "valid", ",", ":", "]", "\n", "\n", "# sort in descending order", "\n", "idx", "=", "agent_scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# For this action, sort score of all people. A action cam be done by many people.", "\n", "\n", "for", "j", "in", "idx", ":", "# Each predicted person", "\n", "          ", "pred_box", "=", "agent_boxes", "[", "j", ",", ":", "]", "# It's predicted human box", "\n", "overlaps", "=", "get_overlap", "(", "gt_boxes", ",", "pred_box", ")", "# overlap between this predict human and all human gt_boxes", "\n", "\n", "jmax", "=", "overlaps", ".", "argmax", "(", ")", "# Find the idx of gt human box that matches this predicted human", "\n", "ovmax", "=", "overlaps", ".", "max", "(", ")", "\n", "\n", "# if matched with an instance with no annotations", "\n", "# continue", "\n", "if", "ignore", "[", "jmax", "]", ":", "\n", "            ", "continue", "\n", "\n", "", "is_true_action", "=", "(", "gt_actions", "[", "jmax", ",", "aid", "]", "==", "1", ")", "# Is this person actually doing this action according to gt?", "\n", "\n", "sc", "[", "aid", "]", ".", "append", "(", "agent_scores", "[", "j", "]", ")", "# The predicted score of this person doing this action. In descending order.", "\n", "if", "is_true_action", "and", "(", "ovmax", ">=", "ovr_thresh", ")", ":", "# bounding box IOU is larger than 0.5 and this this person is doing this action.", "\n", "            ", "if", "covered", "[", "jmax", "]", ":", "\n", "              ", "fp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "", "else", ":", "# first time see this gt human", "\n", "              ", "fp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "covered", "[", "jmax", "]", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "fp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "\n", "# compute ap for each action", "\n", "", "", "", "", "agent_ap", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "\n", "      ", "a_fp", "=", "np", ".", "array", "(", "fp", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_tp", "=", "np", ".", "array", "(", "tp", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_sc", "=", "np", ".", "array", "(", "sc", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# sort in descending score order", "\n", "idx", "=", "a_sc", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# For each action, sort the score of all predicted people in all images", "\n", "a_fp", "=", "a_fp", "[", "idx", "]", "\n", "a_tp", "=", "a_tp", "[", "idx", "]", "\n", "a_sc", "=", "a_sc", "[", "idx", "]", "\n", "\n", "a_fp", "=", "np", ".", "cumsum", "(", "a_fp", ")", "\n", "a_tp", "=", "np", ".", "cumsum", "(", "a_tp", ")", "\n", "rec", "=", "a_tp", "/", "float", "(", "npos", "[", "aid", "]", ")", "\n", "#check", "\n", "\n", "assert", "(", "np", ".", "amax", "(", "rec", ")", "<=", "1", ")", "\n", "prec", "=", "a_tp", "/", "np", ".", "maximum", "(", "a_tp", "+", "a_fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "agent_ap", "[", "aid", "]", "=", "voc_ap", "(", "rec", ",", "prec", ")", "\n", "\n", "", "print", "(", "'---------Reporting Agent AP (%)------------------'", ")", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "      ", "print", "(", "'{: >20}: AP = {:0.2f} (#pos = {:d})'", ".", "format", "(", "self", ".", "actions", "[", "aid", "]", ",", "agent_ap", "[", "aid", "]", "*", "100.0", ",", "int", "(", "npos", "[", "aid", "]", ")", ")", ")", "\n", "", "print", "(", "'Average Agent AP = %.2f'", "%", "(", "np", ".", "nansum", "(", "agent_ap", ")", "*", "100.00", "/", "self", ".", "num_actions", ")", ")", "\n", "print", "(", "'---------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2._load_vcoco": [[628, 638], ["print", "range", "open", "json.load", "len", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "len", "numpy.array"], "function", ["None"], ["", "", "def", "_load_vcoco", "(", "vcoco_file", ")", ":", "\n", "  ", "print", "(", "'loading vcoco annotations...'", ")", "\n", "with", "open", "(", "vcoco_file", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "vsrl_data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "vsrl_data", ")", ")", ":", "\n", "    ", "vsrl_data", "[", "i", "]", "[", "'role_object_id'", "]", "=", "np", ".", "array", "(", "vsrl_data", "[", "i", "]", "[", "'role_object_id'", "]", ")", ".", "reshape", "(", "(", "len", "(", "vsrl_data", "[", "i", "]", "[", "'role_name'", "]", ")", ",", "-", "1", ")", ")", ".", "T", "\n", "for", "j", "in", "[", "'ann_id'", ",", "'label'", ",", "'image_id'", "]", ":", "\n", "        ", "vsrl_data", "[", "i", "]", "[", "j", "]", "=", "np", ".", "array", "(", "vsrl_data", "[", "i", "]", "[", "j", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "", "return", "vsrl_data", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2.clip_xyxy_to_image": [[640, 646], ["numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "clip_xyxy_to_image", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "height", ",", "width", ")", ":", "\n", "  ", "x1", "=", "np", ".", "minimum", "(", "width", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "x1", ")", ")", "\n", "y1", "=", "np", ".", "minimum", "(", "height", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "y1", ")", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "width", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "x2", ")", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "height", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "y2", ")", ")", "\n", "return", "x1", ",", "y1", ",", "x2", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2.get_overlap": [[648, 664], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "get_overlap", "(", "boxes", ",", "ref_box", ")", ":", "\n", "  ", "ixmin", "=", "np", ".", "maximum", "(", "boxes", "[", ":", ",", "0", "]", ",", "ref_box", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "boxes", "[", ":", ",", "1", "]", ",", "ref_box", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "2", "]", ",", "ref_box", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "3", "]", ",", "ref_box", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "(", "ref_box", "[", "2", "]", "-", "ref_box", "[", "0", "]", "+", "1.", ")", "*", "(", "ref_box", "[", "3", "]", "-", "ref_box", "[", "1", "]", "+", "1.", ")", "+", "\n", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1.", ")", "*", "\n", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1.", ")", "-", "inters", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval2.voc_ap": [[666, 687], ["numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ")", ":", "\n", "  ", "\"\"\" ap = voc_ap(rec, prec)\n  Compute VOC AP given precision and recall.\n  [as defined in PASCAL VOC]\n  \"\"\"", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "      ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.apply_prior.apply_prior": [[7, 73], ["None"], "function", ["None"], ["def", "apply_prior", "(", "Object", ",", "prediction", ")", ":", "\n", "\n", "\n", "    ", "if", "Object", "[", "4", "]", "!=", "32", ":", "# not a snowboard, then the action is impossible to be snowboard", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "21", "]", "=", "0", "\n", "\n", "", "if", "Object", "[", "4", "]", "!=", "74", ":", "# not a book, then the action is impossible to be read", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "24", "]", "=", "0", "\n", "\n", "", "if", "Object", "[", "4", "]", "!=", "33", ":", "# not a sports ball, then the action is impossible to be kick", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "7", "]", "=", "0", "\n", "\n", "", "if", "(", "Object", "[", "4", "]", "!=", "41", ")", "and", "(", "Object", "[", "4", "]", "!=", "40", ")", "and", "(", "Object", "[", "4", "]", "!=", "42", ")", "and", "(", "Object", "[", "4", "]", "!=", "46", ")", ":", "# not 'wine glass', 'bottle', 'cup', 'bowl', then the action is impossible to be drink", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "13", "]", "=", "0", "\n", "\n", "", "if", "Object", "[", "4", "]", "!=", "37", ":", "# not a skateboard, then the action is impossible to be skateboard", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "26", "]", "=", "0", "\n", "\n", "", "if", "Object", "[", "4", "]", "!=", "38", ":", "# not a surfboard, then the action is impossible to be surfboard", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "0", "]", "=", "0", "\n", "\n", "", "if", "Object", "[", "4", "]", "!=", "31", ":", "# not a ski, then the action is impossible to be ski", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "1", "]", "=", "0", "\n", "\n", "", "if", "Object", "[", "4", "]", "!=", "64", ":", "# not a laptop, then the action is impossible to be work on computer", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "8", "]", "=", "0", "\n", "\n", "", "if", "(", "Object", "[", "4", "]", "!=", "77", ")", "and", "(", "Object", "[", "4", "]", "!=", "43", ")", "and", "(", "Object", "[", "4", "]", "!=", "44", ")", ":", "# not 'scissors', 'fork', 'knife', then the action is impossible to be cur instr", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "2", "]", "=", "0", "\n", "\n", "", "if", "(", "Object", "[", "4", "]", "!=", "33", ")", "and", "(", "Object", "[", "4", "]", "!=", "30", ")", ":", "# not 'sports ball', 'frisbee', then the action is impossible to be throw and catch", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "15", "]", "=", "0", "\n", "prediction", "[", "0", "]", "[", "0", "]", "[", "28", "]", "=", "0", "\n", "\n", "", "if", "Object", "[", "4", "]", "!=", "68", ":", "# not a cellphone, then the action is impossible to be talk_on_phone", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "6", "]", "=", "0", "\n", "\n", "", "if", "(", "Object", "[", "4", "]", "!=", "14", ")", "and", "(", "Object", "[", "4", "]", "!=", "61", ")", "and", "(", "Object", "[", "4", "]", "!=", "62", ")", "and", "(", "Object", "[", "4", "]", "!=", "60", ")", "and", "(", "Object", "[", "4", "]", "!=", "58", ")", "and", "(", "Object", "[", "4", "]", "!=", "57", ")", ":", "# not 'bench', 'dining table', 'toilet', 'bed', 'couch', 'chair', then the action is impossible to be lay", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "12", "]", "=", "0", "\n", "\n", "", "if", "(", "Object", "[", "4", "]", "!=", "32", ")", "and", "(", "Object", "[", "4", "]", "!=", "31", ")", "and", "(", "Object", "[", "4", "]", "!=", "37", ")", "and", "(", "Object", "[", "4", "]", "!=", "38", ")", ":", "# not 'snowboard', 'skis', 'skateboard', 'surfboard', then the action is impossible to be jump", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "11", "]", "=", "0", "\n", "\n", "", "if", "(", "Object", "[", "4", "]", "!=", "47", ")", "and", "(", "Object", "[", "4", "]", "!=", "48", ")", "and", "(", "Object", "[", "4", "]", "!=", "49", ")", "and", "(", "Object", "[", "4", "]", "!=", "50", ")", "and", "(", "Object", "[", "4", "]", "!=", "51", ")", "and", "(", "Object", "[", "4", "]", "!=", "52", ")", "and", "(", "Object", "[", "4", "]", "!=", "53", ")", "and", "(", "Object", "[", "4", "]", "!=", "54", ")", "and", "(", "Object", "[", "4", "]", "!=", "55", ")", "and", "(", "Object", "[", "4", "]", "!=", "56", ")", ":", "# not ''banana', 'apple', 'sandwich', 'orange', 'carrot', 'broccoli', 'hot dog', 'pizza', 'cake', 'donut', then the action is impossible to be eat_obj", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "9", "]", "=", "0", "\n", "\n", "", "if", "(", "Object", "[", "4", "]", "!=", "43", ")", "and", "(", "Object", "[", "4", "]", "!=", "44", ")", "and", "(", "Object", "[", "4", "]", "!=", "45", ")", ":", "# not 'fork', 'knife', 'spoon', then the action is impossible to be eat_instr", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "16", "]", "=", "0", "\n", "\n", "", "if", "(", "Object", "[", "4", "]", "!=", "39", ")", "and", "(", "Object", "[", "4", "]", "!=", "35", ")", ":", "# not 'tennis racket', 'baseball bat', then the action is impossible to be hit_instr", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "19", "]", "=", "0", "\n", "\n", "", "if", "(", "Object", "[", "4", "]", "!=", "33", ")", ":", "# not 'sports ball, then the action is impossible to be hit_obj", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "20", "]", "=", "0", "\n", "\n", "\n", "", "if", "(", "Object", "[", "4", "]", "!=", "2", ")", "and", "(", "Object", "[", "4", "]", "!=", "4", ")", "and", "(", "Object", "[", "4", "]", "!=", "6", ")", "and", "(", "Object", "[", "4", "]", "!=", "8", ")", "and", "(", "Object", "[", "4", "]", "!=", "9", ")", "and", "(", "Object", "[", "4", "]", "!=", "7", ")", "and", "(", "Object", "[", "4", "]", "!=", "5", ")", "and", "(", "Object", "[", "4", "]", "!=", "3", ")", "and", "(", "Object", "[", "4", "]", "!=", "18", ")", "and", "(", "Object", "[", "4", "]", "!=", "21", ")", ":", "# not 'bicycle', 'motorcycle', 'bus', 'truck', 'boat', 'train', 'airplane', 'car', 'horse', 'elephant', then the action is impossible to be ride", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "5", "]", "=", "0", "\n", "\n", "", "if", "(", "Object", "[", "4", "]", "!=", "2", ")", "and", "(", "Object", "[", "4", "]", "!=", "4", ")", "and", "(", "Object", "[", "4", "]", "!=", "18", ")", "and", "(", "Object", "[", "4", "]", "!=", "21", ")", "and", "(", "Object", "[", "4", "]", "!=", "14", ")", "and", "(", "Object", "[", "4", "]", "!=", "57", ")", "and", "(", "Object", "[", "4", "]", "!=", "58", ")", "and", "(", "Object", "[", "4", "]", "!=", "60", ")", "and", "(", "Object", "[", "4", "]", "!=", "62", ")", "and", "(", "Object", "[", "4", "]", "!=", "61", ")", "and", "(", "Object", "[", "4", "]", "!=", "29", ")", "and", "(", "Object", "[", "4", "]", "!=", "27", ")", "and", "(", "Object", "[", "4", "]", "!=", "25", ")", ":", "# not 'bicycle', 'motorcycle', 'horse', 'elephant', 'bench', 'chair', 'couch', 'bed', 'toilet', 'dining table', 'suitcase', 'handbag', 'backpack', then the action is impossible to be sit", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "10", "]", "=", "0", "\n", "\n", "", "if", "(", "Object", "[", "4", "]", "==", "1", ")", ":", "\n", "        ", "prediction", "[", "0", "]", "[", "0", "]", "[", "4", "]", "=", "0", "\n", "\n", "", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval.__init__": [[31, 109], ["numpy.asarray", "numpy.argwhere", "numpy.argwhere", "pycocotools.coco.COCO", "vsrl_eval1._load_vcoco", "numpy.loadtxt", "numpy.all", "vsrl_eval1.VCOCOeval._init_coco", "vsrl_eval1.VCOCOeval._init_vcoco", "vsrl_eval1.VCOCOeval._get_vcocodb", "open", "numpy.equal", "numpy.sort", "numpy.sort", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1._load_vcoco", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._init_coco", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._init_vcoco", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._get_vcocodb"], ["  ", "def", "__init__", "(", "self", ",", "vsrl_annot_file", ",", "coco_annot_file", ",", "\n", "split_file", ")", ":", "\n", "    ", "\"\"\"Input:\n    vslr_annot_file: path to the vcoco annotations\n    coco_annot_file: path to the coco annotations\n    split_file: image ids for split\n    \"\"\"", "\n", "self", ".", "set_list", "=", "[", "(", "0", ",", "38", ")", ",", "(", "1", ",", "31", ")", ",", "(", "1", ",", "32", ")", ",", "(", "2", ",", "43", ")", ",", "(", "2", ",", "44", ")", ",", "(", "2", ",", "77", ")", ",", "(", "3", ",", "1", ")", ",", "(", "3", ",", "19", ")", ",", "(", "3", ",", "28", ")", ",", "(", "3", ",", "46", ")", ",", "(", "3", ",", "47", ")", ",", "\n", "(", "3", ",", "48", ")", ",", "(", "3", ",", "49", ")", ",", "(", "3", ",", "51", ")", ",", "(", "3", ",", "52", ")", ",", "(", "3", ",", "54", ")", ",", "(", "3", ",", "55", ")", ",", "(", "3", ",", "56", ")", ",", "(", "4", ",", "2", ")", ",", "(", "4", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "4", ",", "6", ")", ",", "(", "4", ",", "7", ")", ",", "\n", "(", "4", ",", "8", ")", ",", "(", "4", ",", "9", ")", ",", "(", "4", ",", "18", ")", ",", "(", "4", ",", "21", ")", ",", "(", "5", ",", "68", ")", ",", "(", "6", ",", "33", ")", ",", "(", "7", ",", "64", ")", ",", "(", "8", ",", "47", ")", ",", "(", "8", ",", "48", ")", ",", "(", "8", ",", "49", ")", ",", "(", "8", ",", "50", ")", ",", "\n", "(", "8", ",", "51", ")", ",", "(", "8", ",", "52", ")", ",", "(", "8", ",", "53", ")", ",", "(", "8", ",", "54", ")", ",", "(", "8", ",", "55", ")", ",", "(", "8", ",", "56", ")", ",", "(", "9", ",", "2", ")", ",", "(", "9", ",", "4", ")", ",", "(", "9", ",", "14", ")", ",", "(", "9", ",", "18", ")", ",", "(", "9", ",", "21", ")", ",", "\n", "(", "9", ",", "25", ")", ",", "(", "9", ",", "27", ")", ",", "(", "9", ",", "29", ")", ",", "(", "9", ",", "57", ")", ",", "(", "9", ",", "58", ")", ",", "(", "9", ",", "60", ")", ",", "(", "9", ",", "61", ")", ",", "(", "9", ",", "62", ")", ",", "(", "9", ",", "64", ")", ",", "(", "10", ",", "31", ")", ",", "(", "10", ",", "32", ")", ",", "\n", "(", "10", ",", "37", ")", ",", "(", "10", ",", "38", ")", ",", "(", "11", ",", "14", ")", ",", "(", "11", ",", "57", ")", ",", "(", "11", ",", "58", ")", ",", "(", "11", ",", "60", ")", ",", "(", "11", ",", "61", ")", ",", "(", "12", ",", "40", ")", ",", "(", "12", ",", "41", ")", ",", "(", "12", ",", "42", ")", ",", "\n", "(", "12", ",", "46", ")", ",", "(", "13", ",", "1", ")", ",", "(", "13", ",", "25", ")", ",", "(", "13", ",", "26", ")", ",", "(", "13", ",", "27", ")", ",", "(", "13", ",", "29", ")", ",", "(", "13", ",", "30", ")", ",", "(", "13", ",", "31", ")", ",", "(", "13", ",", "32", ")", ",", "(", "13", ",", "33", ")", ",", "\n", "(", "13", ",", "34", ")", ",", "(", "13", ",", "35", ")", ",", "(", "13", ",", "37", ")", ",", "(", "13", ",", "38", ")", ",", "(", "13", ",", "39", ")", ",", "(", "13", ",", "40", ")", ",", "(", "13", ",", "41", ")", ",", "(", "13", ",", "42", ")", ",", "(", "13", ",", "47", ")", ",", "(", "13", ",", "50", ")", ",", "\n", "(", "13", ",", "68", ")", ",", "(", "13", ",", "74", ")", ",", "(", "13", ",", "75", ")", ",", "(", "13", ",", "78", ")", ",", "(", "14", ",", "30", ")", ",", "(", "14", ",", "33", ")", ",", "(", "15", ",", "43", ")", ",", "(", "15", ",", "44", ")", ",", "(", "15", ",", "45", ")", ",", "(", "16", ",", "1", ")", ",", "\n", "(", "16", ",", "2", ")", ",", "(", "16", ",", "3", ")", ",", "(", "16", ",", "4", ")", ",", "(", "16", ",", "5", ")", ",", "(", "16", ",", "6", ")", ",", "(", "16", ",", "7", ")", ",", "(", "16", ",", "8", ")", ",", "(", "16", ",", "11", ")", ",", "(", "16", ",", "14", ")", ",", "(", "16", ",", "15", ")", ",", "(", "16", ",", "16", ")", ",", "\n", "(", "16", ",", "17", ")", ",", "(", "16", ",", "18", ")", ",", "(", "16", ",", "19", ")", ",", "(", "16", ",", "20", ")", ",", "(", "16", ",", "21", ")", ",", "(", "16", ",", "24", ")", ",", "(", "16", ",", "25", ")", ",", "(", "16", ",", "26", ")", ",", "(", "16", ",", "27", ")", ",", "(", "16", ",", "28", ")", ",", "\n", "(", "16", ",", "29", ")", ",", "(", "16", ",", "30", ")", ",", "(", "16", ",", "31", ")", ",", "(", "16", ",", "32", ")", ",", "(", "16", ",", "33", ")", ",", "(", "16", ",", "34", ")", ",", "(", "16", ",", "35", ")", ",", "(", "16", ",", "36", ")", ",", "(", "16", ",", "37", ")", ",", "(", "16", ",", "38", ")", ",", "\n", "(", "16", ",", "39", ")", ",", "(", "16", ",", "40", ")", ",", "(", "16", ",", "41", ")", ",", "(", "16", ",", "42", ")", ",", "(", "16", ",", "43", ")", ",", "(", "16", ",", "44", ")", ",", "(", "16", ",", "45", ")", ",", "(", "16", ",", "46", ")", ",", "(", "16", ",", "47", ")", ",", "(", "16", ",", "48", ")", ",", "\n", "(", "16", ",", "49", ")", ",", "(", "16", ",", "51", ")", ",", "(", "16", ",", "53", ")", ",", "(", "16", ",", "54", ")", ",", "(", "16", ",", "55", ")", ",", "(", "16", ",", "56", ")", ",", "(", "16", ",", "57", ")", ",", "(", "16", ",", "61", ")", ",", "(", "16", ",", "62", ")", ",", "(", "16", ",", "63", ")", ",", "\n", "(", "16", ",", "64", ")", ",", "(", "16", ",", "65", ")", ",", "(", "16", ",", "66", ")", ",", "(", "16", ",", "67", ")", ",", "(", "16", ",", "68", ")", ",", "(", "16", ",", "73", ")", ",", "(", "16", ",", "74", ")", ",", "(", "16", ",", "75", ")", ",", "(", "16", ",", "77", ")", ",", "(", "17", ",", "35", ")", ",", "\n", "(", "17", ",", "39", ")", ",", "(", "18", ",", "33", ")", ",", "(", "19", ",", "31", ")", ",", "(", "19", ",", "32", ")", ",", "(", "20", ",", "74", ")", ",", "(", "21", ",", "1", ")", ",", "(", "21", ",", "2", ")", ",", "(", "21", ",", "4", ")", ",", "(", "21", ",", "8", ")", ",", "(", "21", ",", "9", ")", ",", "(", "21", ",", "14", ")", ",", "\n", "(", "21", ",", "15", ")", ",", "(", "21", ",", "16", ")", ",", "(", "21", ",", "17", ")", ",", "(", "21", ",", "18", ")", ",", "(", "21", ",", "19", ")", ",", "(", "21", ",", "21", ")", ",", "(", "21", ",", "25", ")", ",", "(", "21", ",", "26", ")", ",", "(", "21", ",", "27", ")", ",", "(", "21", ",", "28", ")", ",", "\n", "(", "21", ",", "29", ")", ",", "(", "21", ",", "30", ")", ",", "(", "21", ",", "31", ")", ",", "(", "21", ",", "32", ")", ",", "(", "21", ",", "33", ")", ",", "(", "21", ",", "34", ")", ",", "(", "21", ",", "35", ")", ",", "(", "21", ",", "36", ")", ",", "(", "21", ",", "37", ")", ",", "(", "21", ",", "38", ")", ",", "\n", "(", "21", ",", "39", ")", ",", "(", "21", ",", "40", ")", ",", "(", "21", ",", "41", ")", ",", "(", "21", ",", "42", ")", ",", "(", "21", ",", "43", ")", ",", "(", "21", ",", "44", ")", ",", "(", "21", ",", "45", ")", ",", "(", "21", ",", "46", ")", ",", "(", "21", ",", "47", ")", ",", "(", "21", ",", "48", ")", ",", "\n", "(", "21", ",", "49", ")", ",", "(", "21", ",", "50", ")", ",", "(", "21", ",", "51", ")", ",", "(", "21", ",", "52", ")", ",", "(", "21", ",", "53", ")", ",", "(", "21", ",", "54", ")", ",", "(", "21", ",", "55", ")", ",", "(", "21", ",", "56", ")", ",", "(", "21", ",", "57", ")", ",", "(", "21", ",", "64", ")", ",", "\n", "(", "21", ",", "65", ")", ",", "(", "21", ",", "66", ")", ",", "(", "21", ",", "67", ")", ",", "(", "21", ",", "68", ")", ",", "(", "21", ",", "73", ")", ",", "(", "21", ",", "74", ")", ",", "(", "21", ",", "77", ")", ",", "(", "21", ",", "78", ")", ",", "(", "21", ",", "79", ")", ",", "(", "21", ",", "80", ")", ",", "\n", "(", "22", ",", "32", ")", ",", "(", "22", ",", "37", ")", ",", "(", "23", ",", "30", ")", ",", "(", "23", ",", "33", ")", "]", "\n", "\n", "self", ".", "label_nums", "=", "np", ".", "asarray", "(", "[", "485", ",", "434", ",", "3", ",", "3", ",", "207", ",", "37", ",", "6", ",", "6", ",", "3", ",", "1", ",", "3", ",", "4", ",", "7", ",", "1", ",", "7", ",", "32", ",", "2", ",", "160", ",", "67", ",", "9", ",", "126", ",", "1", ",", "24", ",", "6", ",", "31", ",", "108", ",", "73", ",", "292", ",", "134", ",", "398", ",", "21", ",", "3", ",", "60", ",", "4", ",", "7", ",", "1", ",", "61", ",", "110", ",", "80", ",", "56", ",", "56", ",", "119", ",", "107", ",", "96", ",", "59", ",", "2", ",", "1", ",", "4", ",", "430", ",", "136", ",", "55", ",", "1", ",", "5", ",", "1", ",", "20", ",", "165", ",", "278", ",", "26", ",", "24", ",", "1", ",", "29", ",", "228", ",", "1", ",", "15", ",", "55", ",", "54", ",", "1", ",", "2", ",", "57", ",", "52", ",", "93", ",", "72", ",", "3", ",", "7", ",", "12", ",", "6", ",", "6", ",", "1", ",", "11", ",", "105", ",", "4", ",", "2", ",", "1", ",", "1", ",", "7", ",", "1", ",", "17", ",", "1", ",", "1", ",", "2", ",", "170", ",", "91", ",", "86", ",", "28", ",", "39", ",", "445", ",", "6", ",", "1", ",", "2", ",", "5", ",", "1", ",", "12", ",", "4", ",", "1", ",", "1", ",", "1", ",", "14", ",", "18", ",", "7", ",", "7", ",", "5", ",", "8", ",", "4", ",", "7", ",", "4", ",", "1", ",", "3", ",", "9", ",", "390", ",", "45", ",", "156", ",", "521", ",", "15", ",", "4", ",", "5", ",", "338", ",", "254", ",", "3", ",", "5", ",", "11", ",", "15", ",", "12", ",", "43", ",", "12", ",", "12", ",", "2", ",", "2", ",", "14", ",", "1", ",", "11", ",", "37", ",", "18", ",", "134", ",", "1", ",", "7", ",", "1", ",", "29", ",", "291", ",", "1", ",", "3", ",", "4", ",", "62", ",", "4", ",", "75", ",", "1", ",", "22", ",", "109", ",", "233", ",", "228", ",", "1", ",", "366", ",", "86", ",", "50", ",", "46", ",", "68", ",", "1", ",", "1", ",", "1", ",", "1", ",", "8", ",", "14", ",", "45", ",", "2", ",", "5", ",", "45", ",", "70", ",", "89", ",", "9", ",", "99", ",", "186", ",", "50", ",", "56", ",", "54", ",", "9", ",", "120", ",", "66", ",", "56", ",", "160", ",", "269", ",", "32", ",", "65", ",", "83", ",", "67", ",", "197", ",", "43", ",", "13", ",", "26", ",", "5", ",", "46", ",", "3", ",", "6", ",", "1", ",", "60", ",", "67", ",", "56", ",", "20", ",", "2", ",", "78", ",", "11", ",", "58", ",", "1", ",", "350", ",", "1", ",", "83", ",", "41", ",", "18", ",", "2", ",", "9", ",", "1", ",", "466", ",", "224", ",", "32", "]", ")", "\n", "nonrare", "=", "np", ".", "argwhere", "(", "self", ".", "label_nums", ">", "10", ")", "# non rare", "\n", "rare", "=", "np", ".", "argwhere", "(", "self", ".", "label_nums", "<=", "10", ")", "\n", "\n", "self", ".", "verb_trans", "=", "{", "\n", "2", ":", "3", ",", "\n", "3", ":", "2", ",", "\n", "17", ":", "18", ",", "\n", "18", ":", "17", ",", "\n", "8", ":", "15", ",", "\n", "15", ":", "8", ",", "\n", "}", "\n", "self", ".", "l_map", "=", "{", "0", ":", "0", ",", "\n", "1", ":", "1", ",", "\n", "2", ":", "2", ",", "\n", "4", ":", "3", ",", "\n", "5", ":", "4", ",", "\n", "6", ":", "5", ",", "\n", "7", ":", "6", ",", "\n", "8", ":", "7", ",", "\n", "9", ":", "8", ",", "\n", "10", ":", "9", ",", "\n", "11", ":", "10", ",", "\n", "12", ":", "11", ",", "\n", "13", ":", "12", ",", "\n", "14", ":", "13", ",", "\n", "15", ":", "14", ",", "\n", "16", ":", "15", ",", "\n", "18", ":", "16", ",", "\n", "19", ":", "17", ",", "\n", "20", ":", "18", ",", "\n", "21", ":", "19", ",", "\n", "24", ":", "20", ",", "\n", "25", ":", "21", ",", "\n", "26", ":", "22", ",", "\n", "28", ":", "23", "}", "\n", "map_24_to_2", "=", "{", "}", "\n", "# 26", "\n", "self", ".", "COCO", "=", "COCO", "(", "coco_annot_file", ")", "\n", "self", ".", "VCOCO", "=", "_load_vcoco", "(", "vsrl_annot_file", ")", "\n", "self", ".", "image_ids", "=", "np", ".", "loadtxt", "(", "open", "(", "split_file", ",", "'r'", ")", ")", "\n", "# simple check  ", "\n", "\n", "assert", "np", ".", "all", "(", "np", ".", "equal", "(", "np", ".", "sort", "(", "np", ".", "unique", "(", "self", ".", "VCOCO", "[", "0", "]", "[", "'image_id'", "]", ")", ")", ",", "np", ".", "sort", "(", "self", ".", "image_ids", ")", ")", ")", "\n", "\n", "self", ".", "_init_coco", "(", ")", "\n", "self", ".", "_init_vcoco", "(", ")", "\n", "self", ".", "vcocodb", "=", "self", ".", "_get_vcocodb", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._init_vcoco": [[110, 117], ["enumerate"], "methods", ["None"], ["", "def", "_init_vcoco", "(", "self", ")", ":", "\n", "    ", "actions", "=", "[", "x", "[", "'action_name'", "]", "for", "x", "in", "self", ".", "VCOCO", "]", "\n", "roles", "=", "[", "x", "[", "'role_name'", "]", "for", "x", "in", "self", ".", "VCOCO", "]", "\n", "self", ".", "actions", "=", "actions", "\n", "self", ".", "actions_to_id_map", "=", "{", "v", ":", "i", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "actions", ")", "}", "\n", "self", ".", "num_actions", "=", "222", "\n", "self", ".", "roles", "=", "roles", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._init_coco": [[119, 129], ["vsrl_eval1.VCOCOeval.COCO.getCatIds", "dict", "len", "zip", "vsrl_eval1.VCOCOeval.COCO.loadCats", "enumerate", "vsrl_eval1.VCOCOeval.json_category_id_to_contiguous_id.items", "vsrl_eval1.VCOCOeval.COCO.getCatIds"], "methods", ["None"], ["", "def", "_init_coco", "(", "self", ")", ":", "\n", "    ", "category_ids", "=", "self", ".", "COCO", ".", "getCatIds", "(", ")", "\n", "categories", "=", "[", "c", "[", "'name'", "]", "for", "c", "in", "self", ".", "COCO", ".", "loadCats", "(", "category_ids", ")", "]", "\n", "self", ".", "category_to_id_map", "=", "dict", "(", "zip", "(", "categories", ",", "category_ids", ")", ")", "\n", "self", ".", "classes", "=", "[", "'__background__'", "]", "+", "categories", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "classes", ")", "\n", "self", ".", "json_category_id_to_contiguous_id", "=", "{", "\n", "v", ":", "i", "+", "1", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "COCO", ".", "getCatIds", "(", ")", ")", "}", "\n", "self", ".", "contiguous_category_id_to_json_id", "=", "{", "\n", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "json_category_id_to_contiguous_id", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._get_vcocodb": [[131, 154], ["copy.deepcopy", "print", "print", "vsrl_eval1.VCOCOeval.COCO.loadImgs", "vsrl_eval1.VCOCOeval._prep_vcocodb_entry", "vsrl_eval1.VCOCOeval._add_gt_annotations", "res_labels.extend", "s_labels.extend", "len", "len", "sorted", "len", "sorted", "numpy.zeros", "range", "vsrl_eval1.VCOCOeval.image_ids.tolist", "set", "list", "set", "list", "range", "print", "set", "set", "numpy.sum", "numpy.logical_and"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._prep_vcocodb_entry", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._add_gt_annotations"], ["", "def", "_get_vcocodb", "(", "self", ")", ":", "\n", "    ", "vcocodb", "=", "copy", ".", "deepcopy", "(", "self", ".", "COCO", ".", "loadImgs", "(", "self", ".", "image_ids", ".", "tolist", "(", ")", ")", ")", "\n", "res_labels", "=", "[", "]", "\n", "counts", "=", "0", "\n", "s_labels", "=", "[", "]", "\n", "for", "entry", "in", "vcocodb", ":", "\n", "      ", "self", ".", "_prep_vcocodb_entry", "(", "entry", ")", "\n", "labels", ",", "seen_labels", ",", "count", "=", "self", ".", "_add_gt_annotations", "(", "entry", ")", "\n", "res_labels", ".", "extend", "(", "labels", ")", "\n", "s_labels", ".", "extend", "(", "seen_labels", ")", "\n", "counts", "+=", "count", "\n", "", "print", "(", "counts", ",", "len", "(", "res_labels", ")", ",", "len", "(", "set", "(", "res_labels", ")", ")", ",", "sorted", "(", "list", "(", "set", "(", "res_labels", ")", ")", ")", ")", "\n", "print", "(", "len", "(", "set", "(", "s_labels", ")", ")", ",", "sorted", "(", "list", "(", "set", "(", "s_labels", ")", ")", ")", ")", "\n", "# print", "\n", "if", "0", ":", "\n", "      ", "nums", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "entry", "in", "vcocodb", ":", "\n", "        ", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "          ", "nums", "[", "aid", "]", "+=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "entry", "[", "'gt_actions'", "]", "[", ":", ",", "aid", "]", "==", "1", ",", "entry", "[", "'gt_classes'", "]", "==", "1", ")", ")", "\n", "", "", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "print", "(", "'Action %s = %d'", "%", "(", "self", ".", "actions", "[", "aid", "]", ",", "nums", "[", "aid", "]", ")", ")", "\n", "\n", "", "", "return", "vcocodb", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._prep_vcocodb_entry": [[156, 162], ["numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty"], "methods", ["None"], ["", "def", "_prep_vcocodb_entry", "(", "self", ",", "entry", ")", ":", "\n", "    ", "entry", "[", "'boxes'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "entry", "[", "'is_crowd'", "]", "=", "np", ".", "empty", "(", "(", "0", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "entry", "[", "'gt_classes'", "]", "=", "np", ".", "empty", "(", "(", "0", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "entry", "[", "'gt_actions'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "entry", "[", "'gt_role_id'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._add_gt_annotations": [[164, 263], ["vsrl_eval1.VCOCOeval.COCO.getAnnIds", "vsrl_eval1.VCOCOeval.COCO.loadAnns", "enumerate", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "vsrl_eval1.clip_xyxy_to_image", "len", "numpy.ones", "numpy.ones", "vsrl_eval1.VCOCOeval._get_vsrl_data", "json.load", "numpy.zeros", "numpy.argwhere", "numpy.maximum", "numpy.maximum", "valid_objs.append", "valid_ann_ids.append", "open", "numpy.ones", "enumerate", "numpy.all", "unseen_labels.append", "vsrl_eval1.VCOCOeval.set_list.index", "seen_labels.append", "vsrl_eval1.VCOCOeval.set_list.index", "seen_labels.append"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.clip_xyxy_to_image", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._get_vsrl_data"], ["", "def", "_add_gt_annotations", "(", "self", ",", "entry", ")", ":", "\n", "    ", "ann_ids", "=", "self", ".", "COCO", ".", "getAnnIds", "(", "imgIds", "=", "entry", "[", "'id'", "]", ",", "iscrowd", "=", "None", ")", "\n", "objs", "=", "self", ".", "COCO", ".", "loadAnns", "(", "ann_ids", ")", "\n", "# Sanitize bboxes -- some are invalid", "\n", "valid_objs", "=", "[", "]", "\n", "valid_ann_ids", "=", "[", "]", "\n", "width", "=", "entry", "[", "'width'", "]", "\n", "height", "=", "entry", "[", "'height'", "]", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "      ", "if", "'ignore'", "in", "obj", "and", "obj", "[", "'ignore'", "]", "==", "1", ":", "\n", "          ", "continue", "\n", "# Convert form x1, y1, w, h to x1, y1, x2, y2", "\n", "", "x1", "=", "obj", "[", "'bbox'", "]", "[", "0", "]", "\n", "y1", "=", "obj", "[", "'bbox'", "]", "[", "1", "]", "\n", "x2", "=", "x1", "+", "np", ".", "maximum", "(", "0.", ",", "obj", "[", "'bbox'", "]", "[", "2", "]", "-", "1.", ")", "\n", "y2", "=", "y1", "+", "np", ".", "maximum", "(", "0.", ",", "obj", "[", "'bbox'", "]", "[", "3", "]", "-", "1.", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "clip_xyxy_to_image", "(", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "height", ",", "width", ")", "\n", "# Require non-zero seg area and more than 1x1 box size", "\n", "if", "obj", "[", "'area'", "]", ">", "0", "and", "x2", ">", "x1", "and", "y2", ">", "y1", ":", "\n", "        ", "obj", "[", "'clean_bbox'", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "valid_ann_ids", ".", "append", "(", "ann_ids", "[", "i", "]", ")", "\n", "", "", "num_valid_objs", "=", "len", "(", "valid_objs", ")", "\n", "assert", "num_valid_objs", "==", "len", "(", "valid_ann_ids", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ",", "4", ")", ",", "dtype", "=", "entry", "[", "'boxes'", "]", ".", "dtype", ")", "\n", "is_crowd", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ")", ",", "dtype", "=", "entry", "[", "'is_crowd'", "]", ".", "dtype", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_valid_objs", ")", ",", "dtype", "=", "entry", "[", "'gt_classes'", "]", ".", "dtype", ")", "\n", "gt_actions", "=", "-", "np", ".", "ones", "(", "(", "num_valid_objs", ",", "self", ".", "num_actions", ")", ",", "dtype", "=", "entry", "[", "'gt_actions'", "]", ".", "dtype", ")", "\n", "gt_role_id", "=", "-", "np", ".", "ones", "(", "(", "num_valid_objs", ",", "self", ".", "num_actions", ")", ",", "dtype", "=", "entry", "[", "'gt_role_id'", "]", ".", "dtype", ")", "\n", "\n", "unseen_labels", "=", "[", "]", "\n", "seen_labels", "=", "[", "]", "\n", "counts", "=", "0", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "valid_objs", ")", ":", "\n", "      ", "cls", "=", "self", ".", "json_category_id_to_contiguous_id", "[", "obj", "[", "'category_id'", "]", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "obj", "[", "'clean_bbox'", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "is_crowd", "[", "ix", "]", "=", "obj", "[", "'iscrowd'", "]", "\n", "\n", "tmp_action", ",", "tmp_role_id", "=", "self", ".", "_get_vsrl_data", "(", "valid_ann_ids", "[", "ix", "]", ",", "\n", "valid_ann_ids", ",", "valid_objs", ",", "26", ")", "\n", "# reconstruct 222 from 26", "\n", "\n", "label_map", "=", "json", ".", "load", "(", "open", "(", "cfg", ".", "LOCAL_DATA", "+", "\"/Data/action_index.json\"", ")", ")", "\n", "\n", "role_id", "=", "-", "np", ".", "ones", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "gt_actions", "[", "ix", ",", ":", "]", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "aid", "in", "np", ".", "argwhere", "(", "tmp_action", "==", "1", ")", ":", "# loop 26 actions", "\n", "# import ipdb", "\n", "# ipdb.set_trace()", "\n", "        ", "for", "j", ",", "rid", "in", "enumerate", "(", "self", ".", "roles", "[", "aid", "[", "0", "]", "]", ")", ":", "\n", "          ", "if", "rid", "==", "'agent'", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "# tmp_role_id[aid[0]]", "\n", "\n", "            ", "if", "np", ".", "all", "(", "tmp_role_id", "[", "aid", "[", "0", "]", "]", "==", "-", "1", ")", ":", "\n", "              ", "continue", "\n", "", "for", "obj_idx", "in", "tmp_role_id", "[", "aid", "[", "0", "]", "]", ":", "\n", "              ", "if", "obj_idx", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "action_name", "=", "self", ".", "actions", "[", "aid", "[", "0", "]", "]", "+", "'_'", "+", "rid", "\n", "if", "action_name", "not", "in", "label_map", ":", "\n", "                  ", "continue", "\n", "", "if", "label_map", "[", "action_name", "]", "not", "in", "self", ".", "l_map", ":", "\n", "                  ", "continue", "\n", "", "verb_id", "=", "self", ".", "l_map", "[", "label_map", "[", "action_name", "]", "]", "\n", "\n", "obj_cls", "=", "self", ".", "json_category_id_to_contiguous_id", "[", "valid_objs", "[", "obj_idx", "]", "[", "'category_id'", "]", "]", "\n", "\n", "# import ipdb", "\n", "# ipdb.set_trace()", "\n", "# if (verb_id, obj_cls) not in self.set_list and (verb_id in self.verb_trans and self.verb_trans[verb_id], obj_cls) not in self.set_list:", "\n", "if", "(", "verb_id", ",", "obj_cls", ")", "not", "in", "self", ".", "set_list", "and", "(", "verb_id", "not", "in", "self", ".", "verb_trans", "or", "(", "(", "self", ".", "verb_trans", "[", "verb_id", "]", ",", "obj_cls", ")", "not", "in", "self", ".", "set_list", ")", ")", ":", "\n", "                  ", "unseen_labels", ".", "append", "(", "(", "verb_id", ",", "obj_cls", ")", ")", "\n", "continue", "\n", "\n", "", "counts", "+=", "1", "\n", "if", "(", "verb_id", ",", "obj_cls", ")", "in", "self", ".", "set_list", ":", "\n", "                  ", "action_id", "=", "self", ".", "set_list", ".", "index", "(", "(", "verb_id", ",", "obj_cls", ")", ")", "\n", "seen_labels", ".", "append", "(", "(", "verb_id", ",", "obj_cls", ")", ")", "\n", "", "else", ":", "\n", "                  ", "action_id", "=", "self", ".", "set_list", ".", "index", "(", "(", "self", ".", "verb_trans", "[", "verb_id", "]", ",", "obj_cls", ")", ")", "\n", "seen_labels", ".", "append", "(", "(", "self", ".", "verb_trans", "[", "verb_id", "]", ",", "obj_cls", ")", ")", "\n", "", "gt_actions", "[", "ix", ",", "action_id", "]", "=", "1", "\n", "role_id", "[", "action_id", "]", "=", "obj_idx", "\n", "\n", "", "", "", "", "", "gt_role_id", "[", "ix", ",", ":", "]", "=", "role_id", "\n", "\n", "", "entry", "[", "'boxes'", "]", "=", "np", ".", "append", "(", "entry", "[", "'boxes'", "]", ",", "boxes", ",", "axis", "=", "0", ")", "\n", "entry", "[", "'gt_classes'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_classes'", "]", ",", "gt_classes", ")", "\n", "entry", "[", "'is_crowd'", "]", "=", "np", ".", "append", "(", "entry", "[", "'is_crowd'", "]", ",", "is_crowd", ")", "\n", "entry", "[", "'gt_actions'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_actions'", "]", ",", "gt_actions", ",", "axis", "=", "0", ")", "\n", "entry", "[", "'gt_role_id'", "]", "=", "np", ".", "append", "(", "entry", "[", "'gt_role_id'", "]", ",", "gt_role_id", ",", "axis", "=", "0", ")", "\n", "return", "unseen_labels", ",", "seen_labels", ",", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._get_vsrl_data": [[264, 291], ["enumerate", "numpy.ones", "numpy.ones", "numpy.where", "numpy.where", "range", "numpy.logical_and", "numpy.where"], "methods", ["None"], ["", "def", "_get_vsrl_data", "(", "self", ",", "ann_id", ",", "ann_ids", ",", "objs", ",", "num_actions", ")", ":", "\n", "    ", "\"\"\" Get VSRL data for ann_id.\"\"\"", "\n", "action_id", "=", "-", "np", ".", "ones", "(", "(", "num_actions", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "role_id", "=", "-", "np", ".", "ones", "(", "(", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# check if ann_id in vcoco annotations", "\n", "in_vcoco", "=", "np", ".", "where", "(", "self", ".", "VCOCO", "[", "0", "]", "[", "'ann_id'", "]", "==", "ann_id", ")", "[", "0", "]", "\n", "if", "in_vcoco", ".", "size", ">", "0", ":", "\n", "      ", "action_id", "[", ":", "]", "=", "0", "\n", "role_id", "[", ":", "]", "=", "-", "1", "\n", "", "else", ":", "\n", "      ", "return", "action_id", ",", "role_id", "\n", "", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "VCOCO", ")", ":", "\n", "      ", "assert", "x", "[", "'action_name'", "]", "==", "self", ".", "actions", "[", "i", "]", "\n", "has_label", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "x", "[", "'ann_id'", "]", "==", "ann_id", ",", "x", "[", "'label'", "]", "==", "1", ")", ")", "[", "0", "]", "\n", "if", "has_label", ".", "size", ">", "0", ":", "\n", "        ", "action_id", "[", "i", "]", "=", "1", "\n", "assert", "has_label", ".", "size", "==", "1", "\n", "rids", "=", "x", "[", "'role_object_id'", "]", "[", "has_label", "]", "\n", "assert", "rids", "[", "0", ",", "0", "]", "==", "ann_id", "\n", "for", "j", "in", "range", "(", "1", ",", "rids", ".", "shape", "[", "1", "]", ")", ":", "\n", "          ", "if", "rids", "[", "0", ",", "j", "]", "==", "0", ":", "\n", "# no role", "\n", "            ", "continue", "\n", "", "aid", "=", "np", ".", "where", "(", "ann_ids", "==", "rids", "[", "0", ",", "j", "]", ")", "[", "0", "]", "\n", "assert", "aid", ".", "size", ">", "0", "\n", "role_id", "[", "i", ",", "j", "-", "1", "]", "=", "aid", "\n", "", "", "", "return", "action_id", ",", "role_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._collect_detections_for_image": [[293, 318], ["numpy.empty", "numpy.empty", "numpy.zeros", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate", "enumerate"], "methods", ["None"], ["", "def", "_collect_detections_for_image", "(", "self", ",", "dets", ",", "image_id", ")", ":", "\n", "\n", "    ", "agents", "=", "np", ".", "empty", "(", "(", "0", ",", "4", "+", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# 4 + 26 = 30", "\n", "roles", "=", "np", ".", "empty", "(", "(", "0", ",", "5", "*", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# (5 * 26), 2", "\n", "for", "det", "in", "dets", ":", "# loop all detection instance", "\n", "# print(det.keys())", "\n", "      ", "if", "det", "[", "'image_id'", "]", "==", "image_id", ":", "# might be several", "\n", "        ", "this_agent", "=", "np", ".", "zeros", "(", "(", "1", ",", "4", "+", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this_role", "=", "np", ".", "zeros", "(", "(", "1", ",", "5", "*", "self", ".", "num_actions", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this_agent", "[", "0", ",", ":", "4", "]", "=", "det", "[", "'person_box'", "]", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "# loop 26 actions", "\n", "          ", "for", "j", ",", "rid", "in", "enumerate", "(", "self", ".", "roles", "[", "aid", "]", ")", ":", "\n", "            ", "if", "rid", "==", "'agent'", ":", "\n", "#if aid == 10:", "\n", "#  this_agent[0, 4 + aid] = det['talk_' + rid]", "\n", "#if aid == 16:", "\n", "#  this_agent[0, 4 + aid] = det['work_' + rid]", "\n", "#if (aid != 10) and (aid != 16):", "\n", "\n", "                ", "this_agent", "[", "0", ",", "4", "+", "aid", "]", "=", "det", "[", "self", ".", "actions", "[", "aid", "]", "+", "'_'", "+", "rid", "]", "\n", "", "else", ":", "\n", "                ", "this_role", "[", "0", ",", "5", "*", "aid", ":", "5", "*", "aid", "+", "5", ",", "j", "-", "1", "]", "=", "det", "[", "self", ".", "actions", "[", "aid", "]", "+", "'_'", "+", "rid", "]", "\n", "", "", "", "agents", "=", "np", ".", "concatenate", "(", "(", "agents", ",", "this_agent", ")", ",", "axis", "=", "0", ")", "\n", "roles", "=", "np", ".", "concatenate", "(", "(", "roles", ",", "this_role", ")", ",", "axis", "=", "0", ")", "\n", "", "", "return", "agents", ",", "roles", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._collect_detections_for_image1": [[319, 344], ["numpy.empty", "numpy.empty", "numpy.zeros", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["", "def", "_collect_detections_for_image1", "(", "self", ",", "dets", ",", "image_id", ")", ":", "\n", "\n", "    ", "agents", "=", "np", ".", "empty", "(", "(", "0", ",", "4", "+", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# 4 + 26 = 30", "\n", "roles", "=", "np", ".", "empty", "(", "(", "0", ",", "5", "*", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# (5 * 26), 2", "\n", "for", "det", "in", "dets", ":", "# loop all detection instance", "\n", "# print(det.keys())", "\n", "      ", "if", "det", "[", "'image_id'", "]", "==", "image_id", ":", "# might be several", "\n", "        ", "this_agent", "=", "np", ".", "zeros", "(", "(", "1", ",", "4", "+", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this_role", "=", "np", ".", "zeros", "(", "(", "1", ",", "5", "*", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this_agent", "[", "0", ",", ":", "4", "]", "=", "det", "[", "'person_box'", "]", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "# loop 222 actions", "\n", "# for j, rid in enumerate(self.roles[self.set_list[aid]]):", "\n", "#   if rid == 'agent':", "\n", "#       #if aid == 10:", "\n", "#       #  this_agent[0, 4 + aid] = det['talk_' + rid]", "\n", "#       #if aid == 16:", "\n", "#       #  this_agent[0, 4 + aid] = det['work_' + rid]", "\n", "#       #if (aid != 10) and (aid != 16):", "\n", "#", "\n", "#       this_agent[0, 4 + aid] = 0", "\n", "#   else:", "\n", "          ", "this_role", "[", "0", ",", "5", "*", "aid", ":", "5", "*", "aid", "+", "5", "]", "=", "det", "[", "aid", "]", "\n", "", "agents", "=", "np", ".", "concatenate", "(", "(", "agents", ",", "this_agent", ")", ",", "axis", "=", "0", ")", "\n", "roles", "=", "np", ".", "concatenate", "(", "(", "roles", ",", "this_role", ")", ",", "axis", "=", "0", ")", "\n", "", "", "return", "agents", ",", "roles", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._do_eval": [[346, 350], ["vsrl_eval1.VCOCOeval._do_role_eval"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._do_role_eval"], ["", "def", "_do_eval", "(", "self", ",", "detections_file", ",", "ovr_thresh", "=", "0.5", ")", ":", "\n", "\n", "# self._do_agent_eval(vcocodb, detections_file, ovr_thresh=ovr_thresh)", "\n", "    ", "self", ".", "_do_role_eval", "(", "self", ".", "vcocodb", ",", "detections_file", ",", "ovr_thresh", "=", "ovr_thresh", ",", "eval_type", "=", "'scenario_1'", ")", "\n", "# self._do_role_eval(vcocodb, detections_file, ovr_thresh=ovr_thresh, eval_type='scenario_2')", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._do_role_eval": [[353, 509], ["numpy.zeros", "range", "numpy.zeros", "range", "print", "range", "numpy.argwhere", "numpy.argwhere", "print", "print", "print", "print", "print", "iter_str.replace.replace.replace", "model_name.replace.replace.replace", "open", "open.write", "open.flush", "open.close", "open", "pickle.load", "len", "numpy.any", "numpy.all", "range", "vsrl_eval1.VCOCOeval._collect_detections_for_image1", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.cumsum", "numpy.cumsum", "vsrl_eval1.voc_ap", "print", "model_name.replace.replace.split", "range", "range", "range", "numpy.where", "numpy.sum", "range", "numpy.array.argsort", "numpy.zeros", "numpy.amax", "numpy.maximum", "len", "numpy.zeros", "range", "float", "int", "len", "numpy.ones_like", "numpy.where", "agent_scores.argsort", "vsrl_eval1.get_overlap", "get_overlap.argmax", "get_overlap.max", "numpy.all", "sc[].append", "numpy.finfo", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "vsrl_eval1.get_overlap", "fp[].append", "tp[].append", "numpy.where", "numpy.isnan", "gt_roles[].reshape", "fp[].append", "tp[].append", "fp[].append", "tp[].append", "numpy.all", "numpy.all", "ValueError", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._collect_detections_for_image1", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.voc_ap", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.get_overlap", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.get_overlap"], ["", "def", "_do_role_eval", "(", "self", ",", "vcocodb", ",", "detections_file", ",", "ovr_thresh", "=", "0.5", ",", "eval_type", "=", "'scenario_1'", ")", ":", "\n", "\n", "    ", "with", "open", "(", "detections_file", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "dets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "tp", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "fp", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "sc", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "\n", "npos", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "vcocodb", ")", ")", ":", "\n", "      ", "image_id", "=", "vcocodb", "[", "i", "]", "[", "'id'", "]", "\n", "gt_inds", "=", "np", ".", "where", "(", "vcocodb", "[", "i", "]", "[", "'gt_classes'", "]", "==", "1", ")", "[", "0", "]", "\n", "# person boxes", "\n", "gt_boxes", "=", "vcocodb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_inds", "]", "\n", "gt_actions", "=", "vcocodb", "[", "i", "]", "[", "'gt_actions'", "]", "[", "gt_inds", "]", "\n", "# some peorson instances don't have annotated actions", "\n", "# we ignore those instances", "\n", "ignore", "=", "np", ".", "any", "(", "gt_actions", "==", "-", "1", ",", "axis", "=", "1", ")", "\n", "assert", "np", ".", "all", "(", "gt_actions", "[", "np", ".", "where", "(", "ignore", "==", "True", ")", "[", "0", "]", "]", "==", "-", "1", ")", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "npos", "[", "aid", "]", "+=", "np", ".", "sum", "(", "gt_actions", "[", ":", ",", "aid", "]", "==", "1", ")", "\n", "\n", "", "pred_agents", ",", "pred_roles", "=", "self", ".", "_collect_detections_for_image1", "(", "dets", ",", "image_id", ")", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "# if len(self.roles[aid])<2:", "\n", "#   if action has no role, then no role AP computed", "\n", "# continue", "\n", "\n", "        ", "for", "rid", "in", "range", "(", "1", ")", ":", "\n", "\n", "# keep track of detected instances for each action for each role", "\n", "          ", "covered", "=", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "# get gt roles for action and role", "\n", "gt_role_inds", "=", "vcocodb", "[", "i", "]", "[", "'gt_role_id'", "]", "[", "gt_inds", ",", "aid", "]", "\n", "gt_roles", "=", "-", "np", ".", "ones_like", "(", "gt_boxes", ")", "\n", "for", "j", "in", "range", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "gt_role_inds", "[", "j", "]", ">", "-", "1", ":", "\n", "              ", "gt_roles", "[", "j", "]", "=", "vcocodb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_role_inds", "[", "j", "]", "]", "\n", "\n", "", "", "agent_boxes", "=", "pred_agents", "[", ":", ",", ":", "4", "]", "\n", "role_boxes", "=", "pred_roles", "[", ":", ",", "5", "*", "aid", ":", "5", "*", "aid", "+", "4", "]", "\n", "agent_scores", "=", "pred_roles", "[", ":", ",", "5", "*", "aid", "+", "4", "]", "\n", "\n", "valid", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "agent_scores", ")", "==", "False", ")", "[", "0", "]", "\n", "#valid = np.where(agent_scores != 0)[0]", "\n", "\n", "\n", "agent_scores", "=", "agent_scores", "[", "valid", "]", "\n", "agent_boxes", "=", "agent_boxes", "[", "valid", ",", ":", "]", "\n", "role_boxes", "=", "role_boxes", "[", "valid", ",", ":", "]", "\n", "\n", "idx", "=", "agent_scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "for", "j", "in", "idx", ":", "\n", "            ", "pred_box", "=", "agent_boxes", "[", "j", ",", ":", "]", "\n", "overlaps", "=", "get_overlap", "(", "gt_boxes", ",", "pred_box", ")", "\n", "\n", "# matching happens based on the person ", "\n", "jmax", "=", "overlaps", ".", "argmax", "(", ")", "\n", "ovmax", "=", "overlaps", ".", "max", "(", ")", "\n", "\n", "# if matched with an instance with no annotations", "\n", "# continue", "\n", "if", "ignore", "[", "jmax", "]", ":", "\n", "              ", "continue", "\n", "\n", "# overlap between predicted role and gt role", "\n", "", "if", "np", ".", "all", "(", "gt_roles", "[", "jmax", ",", ":", "]", "==", "-", "1", ")", ":", "# if no gt role", "\n", "              ", "if", "eval_type", "==", "'scenario_1'", ":", "\n", "                ", "if", "np", ".", "all", "(", "role_boxes", "[", "j", ",", ":", "]", "==", "0.0", ")", "or", "np", ".", "all", "(", "np", ".", "isnan", "(", "role_boxes", "[", "j", ",", ":", "]", ")", ")", ":", "\n", "# if no role is predicted, mark it as correct role overlap", "\n", "                  ", "ov_role", "=", "1.0", "\n", "", "else", ":", "\n", "# if a role is predicted, mark it as false ", "\n", "                  ", "ov_role", "=", "0.0", "\n", "", "", "elif", "eval_type", "==", "'scenario_2'", ":", "\n", "# if no gt role, role prediction is always correct, irrespective of the actual predition", "\n", "                ", "ov_role", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown eval type'", ")", "\n", "", "", "else", ":", "\n", "              ", "ov_role", "=", "get_overlap", "(", "gt_roles", "[", "jmax", ",", ":", "]", ".", "reshape", "(", "(", "1", ",", "4", ")", ")", ",", "role_boxes", "[", "j", ",", ":", "]", ")", "\n", "\n", "", "is_true_action", "=", "(", "gt_actions", "[", "jmax", ",", "aid", "]", "==", "1", ")", "\n", "sc", "[", "aid", "]", ".", "append", "(", "agent_scores", "[", "j", "]", ")", "\n", "# print(ovmax, ov_role, gt_roles[jmax])", "\n", "# import ipdb", "\n", "# ipdb.set_trace()", "\n", "if", "is_true_action", "and", "(", "ovmax", ">=", "ovr_thresh", ")", "and", "(", "ov_role", ">=", "ovr_thresh", ")", ":", "\n", "              ", "if", "covered", "[", "jmax", "]", ":", "\n", "                ", "fp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "fp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "covered", "[", "jmax", "]", "=", "True", "\n", "", "", "else", ":", "\n", "              ", "fp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "\n", "# compute ap for each action", "\n", "", "", "", "", "", "role_ap", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "role_ap", "[", ":", "]", "=", "np", ".", "nan", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "# if len(self.roles[aid])<2:", "\n", "#   continue", "\n", "      ", "a_fp", "=", "np", ".", "array", "(", "fp", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_tp", "=", "np", ".", "array", "(", "tp", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_sc", "=", "np", ".", "array", "(", "sc", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# sort in descending score order", "\n", "idx", "=", "a_sc", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "a_fp", "=", "a_fp", "[", "idx", "]", "\n", "a_tp", "=", "a_tp", "[", "idx", "]", "\n", "a_sc", "=", "a_sc", "[", "idx", "]", "\n", "\n", "a_fp", "=", "np", ".", "cumsum", "(", "a_fp", ")", "\n", "a_tp", "=", "np", ".", "cumsum", "(", "a_tp", ")", "\n", "if", "npos", "[", "aid", "]", "==", "0", ":", "\n", "        ", "rec", "=", "np", ".", "zeros", "(", "a_tp", ".", "shape", ",", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "rec", "=", "a_tp", "/", "float", "(", "npos", "[", "aid", "]", ")", "\n", "#check", "\n", "", "assert", "(", "np", ".", "amax", "(", "rec", ")", "<=", "1", ")", ",", "rec", "\n", "prec", "=", "a_tp", "/", "np", ".", "maximum", "(", "a_tp", "+", "a_fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "role_ap", "[", "aid", "]", "=", "voc_ap", "(", "rec", ",", "prec", ")", "\n", "\n", "", "print", "(", "'---------Reporting Role AP (%)------------------'", ")", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "# if len(self.roles[aid])<2: continue", "\n", "# for rid in range(len(self.roles[aid])-1):", "\n", "      ", "print", "(", "'{: >23}: AP = {:0.2f} (#pos = {:d})'", ".", "format", "(", "aid", ",", "role_ap", "[", "aid", "]", "*", "100.0", ",", "int", "(", "npos", "[", "aid", "]", ")", ")", ")", "\n", "\n", "", "nonrare", "=", "np", ".", "argwhere", "(", "self", ".", "label_nums", ">", "10", ")", "# non rare", "\n", "rare", "=", "np", ".", "argwhere", "(", "self", ".", "label_nums", "<=", "10", ")", "\n", "print", "(", "'Average Role [%s] AP = %.2f'", "%", "(", "eval_type", ",", "np", ".", "nanmean", "(", "role_ap", ")", "*", "100.00", ")", ")", "\n", "print", "(", "'Average Role [%s] nonrare = %.2f'", "%", "(", "eval_type", ",", "np", ".", "nanmean", "(", "role_ap", "[", "nonrare", "]", ")", "*", "100.00", ")", ")", "\n", "print", "(", "'Average Role [%s] rare = %.2f'", "%", "(", "eval_type", ",", "np", ".", "nanmean", "(", "role_ap", "[", "rare", "]", ")", "*", "100.00", ")", ")", "\n", "print", "(", "'---------------------------------------------'", ")", "\n", "# print('Average Role [%s] AP = %.2f, omitting the action \"point\"'%(eval_type, (np.nanmean(role_ap) * 25 - role_ap[-3][0]) / 24 * 100.00))", "\n", "print", "(", "'---------------------------------------------'", ")", "\n", "\n", "model_name", "=", "detections_file", "[", "len", "(", "cfg", ".", "LOCAL_DATA", "+", "\"/Results/\"", ")", ":", "]", "\n", "iter_str", "=", "model_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "iter_str", "=", "iter_str", ".", "replace", "(", "'/'", ",", "''", ")", "\n", "model_name", "=", "model_name", "[", "len", "(", "iter_str", ")", "+", "2", ":", "]", "\n", "model_name", "=", "model_name", ".", "replace", "(", "'.pkl'", ",", "''", ")", "\n", "f", "=", "open", "(", "cfg", ".", "LOCAL_DATA", "+", "'/coco_csv/{}_{}.csv'", ".", "format", "(", "model_name", ",", "eval_type", ")", ",", "'a'", ")", "\n", "f", ".", "write", "(", "'%.2f %.2f %.2f %.2f\\n'", "%", "(", "np", ".", "nanmean", "(", "role_ap", ")", "*", "100.00", ",", "np", ".", "nanmean", "(", "role_ap", ")", "*", "100.00", ",", "np", ".", "nanmean", "(", "role_ap", "[", "rare", "]", ")", "*", "100.00", ",", "np", ".", "nanmean", "(", "role_ap", "[", "nonrare", "]", ")", "*", "100.00", ")", ")", "\n", "f", ".", "flush", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._do_agent_eval": [[510, 607], ["numpy.zeros", "range", "numpy.zeros", "range", "print", "range", "print", "print", "open", "pickle.load", "len", "numpy.any", "range", "vsrl_eval1.VCOCOeval._collect_detections_for_image", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.cumsum", "numpy.cumsum", "vsrl_eval1.voc_ap", "print", "range", "range", "range", "numpy.where", "numpy.sum", "numpy.zeros", "numpy.array.argsort", "float", "numpy.amax", "numpy.maximum", "numpy.where", "agent_scores.argsort", "vsrl_eval1.get_overlap", "get_overlap.argmax", "get_overlap.max", "sc[].append", "int", "fp[].append", "tp[].append", "numpy.finfo", "numpy.nansum", "numpy.isnan", "fp[].append", "tp[].append", "fp[].append", "tp[].append"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.VCOCOeval._collect_detections_for_image", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.voc_ap", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.get_overlap"], ["", "def", "_do_agent_eval", "(", "self", ",", "vcocodb", ",", "detections_file", ",", "ovr_thresh", "=", "0.5", ")", ":", "\n", "\n", "    ", "with", "open", "(", "detections_file", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "dets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "tp", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "fp", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "sc", "=", "[", "[", "]", "for", "a", "in", "range", "(", "self", ".", "num_actions", ")", "]", "\n", "\n", "npos", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "vcocodb", ")", ")", ":", "\n", "      ", "image_id", "=", "vcocodb", "[", "i", "]", "[", "'id'", "]", "# img ID, not the full name (e.g. id= 165, 'file_name' = COCO_train2014_000000000165.jpg )", "\n", "gt_inds", "=", "np", ".", "where", "(", "vcocodb", "[", "i", "]", "[", "'gt_classes'", "]", "==", "1", ")", "[", "0", "]", "# index of the person's box among all object boxes", "\n", "# person boxes", "\n", "gt_boxes", "=", "vcocodb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_inds", "]", "# all person's boxes in this image", "\n", "gt_actions", "=", "vcocodb", "[", "i", "]", "[", "'gt_actions'", "]", "[", "gt_inds", "]", "# index of Nx26 binary matrix indicating the actions", "\n", "# some peorson instances don't have annotated actions", "\n", "# we ignore those instances", "\n", "ignore", "=", "np", ".", "any", "(", "gt_actions", "==", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "        ", "npos", "[", "aid", "]", "+=", "np", ".", "sum", "(", "gt_actions", "[", ":", ",", "aid", "]", "==", "1", ")", "# how many actions are involved in this image(for all the human)", "\n", "\n", "", "pred_agents", ",", "_", "=", "self", ".", "_collect_detections_for_image", "(", "dets", ",", "image_id", ")", "\n", "# For each image, we have a pred_agents. For example, there are 2 people detected, then pred_agents is a 2x(4+26) matrix. Each row stands for a human, 0-3 human box, 4-25 the score for each action.", "\n", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "\n", "# keep track of detected instances for each action", "\n", "        ", "covered", "=", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "bool", ")", "# gt_boxes.shape[0] is the number of people in this image", "\n", "\n", "agent_scores", "=", "pred_agents", "[", ":", ",", "4", "+", "aid", "]", "# score of this action for all people in this image", "\n", "agent_boxes", "=", "pred_agents", "[", ":", ",", ":", "4", "]", "# predicted buman box for all people in this image", "\n", "# remove NaNs", "\n", "# If only use agent, there should be no NAN cause there is no object information provided. Just give a agent score.", "\n", "valid", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "agent_scores", ")", "==", "False", ")", "[", "0", "]", "\n", "agent_scores", "=", "agent_scores", "[", "valid", "]", "\n", "agent_boxes", "=", "agent_boxes", "[", "valid", ",", ":", "]", "\n", "\n", "# sort in descending order", "\n", "idx", "=", "agent_scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# For this action, sort score of all people. A action cam be done by many people.", "\n", "\n", "for", "j", "in", "idx", ":", "# Each predicted person", "\n", "          ", "pred_box", "=", "agent_boxes", "[", "j", ",", ":", "]", "# It's predicted human box", "\n", "overlaps", "=", "get_overlap", "(", "gt_boxes", ",", "pred_box", ")", "# overlap between this predict human and all human gt_boxes", "\n", "\n", "jmax", "=", "overlaps", ".", "argmax", "(", ")", "# Find the idx of gt human box that matches this predicted human", "\n", "ovmax", "=", "overlaps", ".", "max", "(", ")", "\n", "\n", "# if matched with an instance with no annotations", "\n", "# continue", "\n", "if", "ignore", "[", "jmax", "]", ":", "\n", "            ", "continue", "\n", "\n", "", "is_true_action", "=", "(", "gt_actions", "[", "jmax", ",", "aid", "]", "==", "1", ")", "# Is this person actually doing this action according to gt?", "\n", "\n", "sc", "[", "aid", "]", ".", "append", "(", "agent_scores", "[", "j", "]", ")", "# The predicted score of this person doing this action. In descending order.", "\n", "if", "is_true_action", "and", "(", "ovmax", ">=", "ovr_thresh", ")", ":", "# bounding box IOU is larger than 0.5 and this this person is doing this action.", "\n", "            ", "if", "covered", "[", "jmax", "]", ":", "\n", "              ", "fp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "", "else", ":", "# first time see this gt human", "\n", "              ", "fp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "covered", "[", "jmax", "]", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "fp", "[", "aid", "]", ".", "append", "(", "1", ")", "\n", "tp", "[", "aid", "]", ".", "append", "(", "0", ")", "\n", "\n", "# compute ap for each action", "\n", "", "", "", "", "agent_ap", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "\n", "      ", "a_fp", "=", "np", ".", "array", "(", "fp", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_tp", "=", "np", ".", "array", "(", "tp", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a_sc", "=", "np", ".", "array", "(", "sc", "[", "aid", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# sort in descending score order", "\n", "idx", "=", "a_sc", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "# For each action, sort the score of all predicted people in all images", "\n", "a_fp", "=", "a_fp", "[", "idx", "]", "\n", "a_tp", "=", "a_tp", "[", "idx", "]", "\n", "a_sc", "=", "a_sc", "[", "idx", "]", "\n", "\n", "a_fp", "=", "np", ".", "cumsum", "(", "a_fp", ")", "\n", "a_tp", "=", "np", ".", "cumsum", "(", "a_tp", ")", "\n", "rec", "=", "a_tp", "/", "float", "(", "npos", "[", "aid", "]", ")", "\n", "#check", "\n", "\n", "assert", "(", "np", ".", "amax", "(", "rec", ")", "<=", "1", ")", "\n", "prec", "=", "a_tp", "/", "np", ".", "maximum", "(", "a_tp", "+", "a_fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "agent_ap", "[", "aid", "]", "=", "voc_ap", "(", "rec", ",", "prec", ")", "\n", "\n", "", "print", "(", "'---------Reporting Agent AP (%)------------------'", ")", "\n", "for", "aid", "in", "range", "(", "self", ".", "num_actions", ")", ":", "\n", "      ", "print", "(", "'{: >20}: AP = {:0.2f} (#pos = {:d})'", ".", "format", "(", "self", ".", "actions", "[", "aid", "]", ",", "agent_ap", "[", "aid", "]", "*", "100.0", ",", "int", "(", "npos", "[", "aid", "]", ")", ")", ")", "\n", "", "print", "(", "'Average Agent AP = %.2f'", "%", "(", "np", ".", "nansum", "(", "agent_ap", ")", "*", "100.00", "/", "self", ".", "num_actions", ")", ")", "\n", "print", "(", "'---------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1._load_vcoco": [[608, 618], ["print", "range", "open", "json.load", "len", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "len", "numpy.array"], "function", ["None"], ["", "", "def", "_load_vcoco", "(", "vcoco_file", ")", ":", "\n", "  ", "print", "(", "'loading vcoco annotations...'", ")", "\n", "with", "open", "(", "vcoco_file", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "vsrl_data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "vsrl_data", ")", ")", ":", "\n", "    ", "vsrl_data", "[", "i", "]", "[", "'role_object_id'", "]", "=", "np", ".", "array", "(", "vsrl_data", "[", "i", "]", "[", "'role_object_id'", "]", ")", ".", "reshape", "(", "(", "len", "(", "vsrl_data", "[", "i", "]", "[", "'role_name'", "]", ")", ",", "-", "1", ")", ")", ".", "T", "\n", "for", "j", "in", "[", "'ann_id'", ",", "'label'", ",", "'image_id'", "]", ":", "\n", "        ", "vsrl_data", "[", "i", "]", "[", "j", "]", "=", "np", ".", "array", "(", "vsrl_data", "[", "i", "]", "[", "j", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "", "return", "vsrl_data", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.clip_xyxy_to_image": [[620, 626], ["numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "clip_xyxy_to_image", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "height", ",", "width", ")", ":", "\n", "  ", "x1", "=", "np", ".", "minimum", "(", "width", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "x1", ")", ")", "\n", "y1", "=", "np", ".", "minimum", "(", "height", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "y1", ")", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "width", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "x2", ")", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "height", "-", "1.", ",", "np", ".", "maximum", "(", "0.", ",", "y2", ")", ")", "\n", "return", "x1", ",", "y1", ",", "x2", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.get_overlap": [[628, 644], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "get_overlap", "(", "boxes", ",", "ref_box", ")", ":", "\n", "  ", "ixmin", "=", "np", ".", "maximum", "(", "boxes", "[", ":", ",", "0", "]", ",", "ref_box", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "boxes", "[", ":", ",", "1", "]", ",", "ref_box", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "2", "]", ",", "ref_box", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "3", "]", ",", "ref_box", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "(", "ref_box", "[", "2", "]", "-", "ref_box", "[", "0", "]", "+", "1.", ")", "*", "(", "ref_box", "[", "3", "]", "-", "ref_box", "[", "1", "]", "+", "1.", ")", "+", "\n", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1.", ")", "*", "\n", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1.", ")", "-", "inters", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.vsrl_eval1.voc_ap": [[646, 667], ["numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ")", ":", "\n", "  ", "\"\"\" ap = voc_ap(rec, prec)\n  Compute VOC AP given precision and recall.\n  [as defined in PASCAL VOC]\n  \"\"\"", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "      ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_FCL.SolverWrapperFCL.__init__": [[22, 26], ["models.train_Solver_HICO.SolverWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1.__init__"], ["def", "__init__", "(", "self", ",", "sess", ",", "network", ",", "Trainval_GT", ",", "Trainval_N", ",", "output_dir", ",", "tbdir", ",", "Pos_augment", ",", "Neg_select", ",", "Restore_flag", ",", "\n", "pretrained_model", ")", ":", "\n", "        ", "super", "(", "SolverWrapperFCL", ",", "self", ")", ".", "__init__", "(", "sess", ",", "network", ",", "Trainval_GT", ",", "Trainval_N", ",", "output_dir", ",", "tbdir", ",", "Pos_augment", ",", "\n", "Neg_select", ",", "Restore_flag", ",", "pretrained_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_FCL.SolverWrapperFCL.construct_graph": [[27, 62], ["print", "sess.graph.as_default", "tensorflow.set_random_seed", "train_Solver_HICO_FCL.SolverWrapperFCL.net.create_architecture", "train_Solver_HICO_FCL.SolverWrapperFCL.get_step_factor", "train_Solver_HICO_FCL.SolverWrapperFCL.get_optimzer_lr", "train_Solver_HICO_FCL.SolverWrapperFCL.get_optimzer_lr", "train_Solver_HICO_FCL.SolverWrapperFCL.get_all_grads", "train_Solver_HICO_FCL.SolverWrapperFCL.optimizer.apply_gradients", "train_Solver_HICO_FCL.SolverWrapperFCL.get_generator_grads", "train_Solver_HICO_FCL.SolverWrapperFCL.optimizer_g.apply_gradients", "tensorflow.summary.scalar", "tensorflow.summary.merge_all", "tensorflow.train.Saver", "tensorflow.summary.FileWriter", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.create_architecture", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_step_factor", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_optimzer_lr", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_optimzer_lr", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_FCL.SolverWrapperFCL.get_all_grads", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_FCL.SolverWrapperFCL.get_generator_grads"], ["", "def", "construct_graph", "(", "self", ",", "sess", ")", ":", "\n", "        ", "print", "(", "\"construct_graph======================\"", ")", "\n", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "\n", "# Set the random seed for tensorflow", "\n", "            ", "tf", ".", "set_random_seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "\n", "# Build the main computation graph", "\n", "layers", "=", "self", ".", "net", ".", "create_architecture", "(", "True", ")", "# is_training flag: True", "\n", "\n", "step_factor", "=", "self", ".", "get_step_factor", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'tmp'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "                ", "global_step", "=", "tf", ".", "get_variable", "(", "'global_step'", ",", "shape", "=", "(", ")", ",", "trainable", "=", "False", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ")", "\n", "global_step1", "=", "tf", ".", "get_variable", "(", "'global_step1'", ",", "shape", "=", "(", ")", ",", "trainable", "=", "False", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ")", "\n", "\n", "", "lr", ",", "self", ".", "optimizer", "=", "self", ".", "get_optimzer_lr", "(", "global_step", ",", "step_factor", ")", "\n", "lr1", ",", "self", ".", "optimizer_g", "=", "self", ".", "get_optimzer_lr", "(", "global_step1", ",", "step_factor", ")", "\n", "\n", "capped_gvs", "=", "self", ".", "get_all_grads", "(", "layers", ")", "\n", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ",", "global_step", "=", "global_step", ")", "\n", "\n", "# Generator", "\n", "g_loss", ",", "g_capped_gvs", "=", "self", ".", "get_generator_grads", "(", "layers", ",", "self", ".", "optimizer_g", ")", "\n", "train_op_g", "=", "self", ".", "optimizer_g", ".", "apply_gradients", "(", "g_capped_gvs", ",", "global_step", "=", "global_step1", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'lr'", ",", "lr", ")", "\n", "self", ".", "net", ".", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_KEPT", ")", "\n", "# Write the train and validation information to tensorboard", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "tbdir", ",", "sess", ".", "graph", ")", "\n", "\n", "", "return", "lr", ",", "train_op", ",", "train_op_g", ",", "layers", "[", "'total_loss'", "]", "+", "layers", "[", "'fake_total_loss'", "]", ",", "g_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_FCL.SolverWrapperFCL.get_main_grads": [[63, 72], ["train_Solver_HICO_FCL.SolverWrapperFCL.optimizer.compute_gradients", "tensorflow.trainable_variables", "tensorflow.clip_by_norm", "v.name.__contains__"], "methods", ["None"], ["", "def", "get_main_grads", "(", "self", ",", "layers", ")", ":", "\n", "        ", "capped_gvs", "=", "[", "]", "\n", "if", "'total_loss'", "in", "layers", ":", "\n", "            ", "loss", "=", "layers", "[", "'total_loss'", "]", "\n", "varaibles", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "if", "not", "v", ".", "name", ".", "__contains__", "(", "'generator'", ")", "]", "\n", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "loss", ",", "varaibles", ")", "\n", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "1.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "grads_and_vars", "if", "grad", "is", "not", "None", "]", "\n", "\n", "", "return", "capped_gvs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_FCL.SolverWrapperFCL.get_main_all_grads": [[73, 81], ["train_Solver_HICO_FCL.SolverWrapperFCL.optimizer.compute_gradients", "tensorflow.trainable_variables", "tensorflow.clip_by_norm", "v.name.__contains__"], "methods", ["None"], ["", "def", "get_main_all_grads", "(", "self", ",", "layers", ")", ":", "\n", "        ", "capped_gvs", "=", "[", "]", "\n", "loss", "=", "layers", "[", "'total_loss'", "]", "+", "layers", "[", "'fake_total_loss'", "]", "\n", "varaibles", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "if", "not", "v", ".", "name", ".", "__contains__", "(", "'generator'", ")", "]", "\n", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "loss", ",", "varaibles", ")", "\n", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "1.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "grads_and_vars", "if", "grad", "is", "not", "None", "]", "\n", "\n", "return", "capped_gvs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_FCL.SolverWrapperFCL.get_all_grads": [[82, 90], ["train_Solver_HICO_FCL.SolverWrapperFCL.optimizer.compute_gradients", "tensorflow.trainable_variables", "tensorflow.clip_by_norm"], "methods", ["None"], ["", "def", "get_all_grads", "(", "self", ",", "layers", ")", ":", "\n", "        ", "capped_gvs", "=", "[", "]", "\n", "loss", "=", "layers", "[", "'total_loss'", "]", "+", "layers", "[", "'fake_total_loss'", "]", "\n", "varaibles", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "]", "\n", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "loss", ",", "varaibles", ")", "\n", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "1.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "grads_and_vars", "if", "grad", "is", "not", "None", "]", "\n", "\n", "return", "capped_gvs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_FCL.SolverWrapperFCL.get_classification_grads": [[91, 99], ["train_Solver_HICO_FCL.SolverWrapperFCL.get_classifier_variables", "train_Solver_HICO_FCL.SolverWrapperFCL.optimizer.compute_gradients", "print", "tensorflow.clip_by_norm"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO.SolverWrapper.get_classifier_variables"], ["", "def", "get_classification_grads", "(", "self", ",", "layers", ")", ":", "\n", "        ", "loss", "=", "layers", "[", "'total_loss'", "]", "+", "layers", "[", "'fake_total_loss'", "]", "+", "layers", "[", "'fake_D_total_loss'", "]", "\n", "variables", "=", "self", ".", "get_classifier_variables", "(", ")", "\n", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "loss", ",", "variables", ")", "\n", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "1.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "grads_and_vars", "if", "grad", "is", "not", "None", "]", "\n", "for", "grad", ",", "var", "in", "capped_gvs", ":", "\n", "            ", "print", "(", "'d update: {}'", ".", "format", "(", "var", ".", "name", ")", ")", "\n", "", "return", "loss", ",", "capped_gvs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_FCL.SolverWrapperFCL.get_generator_grads": [[100, 111], ["print", "print", "optimizer_g.compute_gradients", "print", "tensorflow.trainable_variables", "v.name.__contains__", "tensorflow.clip_by_norm"], "methods", ["None"], ["", "def", "get_generator_grads", "(", "self", ",", "layers", ",", "optimizer_g", ")", ":", "\n", "# Generator/Fabricator", "\n", "        ", "fake_loss", "=", "layers", "[", "'fake_G_total_loss'", "]", "\n", "print", "(", "'fake loss =========='", ",", "fake_loss", ")", "\n", "g_update_variables", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "if", "v", ".", "name", ".", "__contains__", "(", "'generator'", ")", "]", "\n", "print", "(", "g_update_variables", ")", "\n", "g_grads_and_vars", "=", "optimizer_g", ".", "compute_gradients", "(", "fake_loss", ",", "g_update_variables", ")", "\n", "g_capped_gvs", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "1.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "g_grads_and_vars", "if", "grad", "is", "not", "None", "]", "\n", "for", "grad", ",", "var", "in", "g_capped_gvs", ":", "\n", "            ", "print", "(", "'g update: {}'", ".", "format", "(", "var", ".", "name", ")", ")", "\n", "", "return", "fake_loss", ",", "g_capped_gvs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_FCL.SolverWrapperFCL.train_model_stepwise_inner": [[112, 166], ["timer.tic", "train_Solver_HICO_FCL.SolverWrapperFCL.net.model_name.__contains__", "ult.ult.get_epoch_iters", "timer.toc", "train_Solver_HICO_FCL.SolverWrapperFCL.snapshot", "print", "sess.run", "train_Solver_HICO_FCL.SolverWrapperFCL.writer.add_summary", "sess.run", "sess.run", "train_Solver_HICO_FCL.SolverWrapperFCL.writer.add_summary", "sess.run", "type", "float", "float", "lr.eval"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_epoch_iters", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.snapshot"], ["", "def", "train_model_stepwise_inner", "(", "self", ",", "D_loss", ",", "g_loss", ",", "iter", ",", "lr", ",", "max_iters", ",", "sess", ",", "timer", ",", "train_op", ",", "train_op_g", ")", ":", "\n", "        ", "while", "iter", "<", "max_iters", "+", "1", ":", "\n", "            ", "timer", ".", "tic", "(", ")", "\n", "\n", "total_loss", "=", "0", "\n", "fake_total_loss", "=", "0", "\n", "#", "\n", "save_iters", "=", "50000", "\n", "epoch_stride", "=", "0", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_s1_'", ")", ":", "\n", "# This is for fine-tuning the fabricator in step-wise optimization", "\n", "                ", "epoch_stride", "=", "1", "\n", "", "save_iters", "=", "get_epoch_iters", "(", "self", ".", "net", ".", "model_name", ")", "\n", "\n", "if", "iter", "<", "save_iters", "*", "epoch_stride", ":", "\n", "                ", "if", "(", "iter", "%", "cfg", ".", "TRAIN", ".", "SUMMARY_INTERVAL", "==", "0", ")", "or", "(", "iter", "<", "20", ")", ":", "\n", "# Compute the graph with summary", "\n", "                    ", "fake_total_loss", ",", "_", ",", "summary", ",", "image_id", "=", "sess", ".", "run", "(", "\n", "[", "g_loss", ",", "train_op_g", ",", "self", ".", "net", ".", "summary_op", ",", "self", ".", "net", ".", "image_id", ",", "]", ")", "\n", "\n", "# total_loss, summary = self.net.train_step_with_summary(sess, blobs, lr.eval(), train_op)", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "iter", ")", ")", "\n", "", "else", ":", "\n", "# Compute the graph without summary", "\n", "                    ", "fake_total_loss", ",", "_", ",", "image_id", "=", "sess", ".", "run", "(", "[", "g_loss", ",", "train_op_g", ",", "self", ".", "net", ".", "image_id", ",", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "(", "iter", "%", "cfg", ".", "TRAIN", ".", "SUMMARY_INTERVAL", "==", "0", ")", "or", "(", "iter", "<", "20", ")", ":", "\n", "\n", "# Compute the graph with summary", "\n", "                    ", "total_loss", ",", "_", ",", "summary", ",", "image_id", "=", "sess", ".", "run", "(", "\n", "[", "D_loss", ",", "train_op", ",", "self", ".", "net", ".", "summary_op", ",", "self", ".", "net", ".", "image_id", ",", "]", ")", "\n", "\n", "# total_loss, summary = self.net.train_step_with_summary(sess, blobs, lr.eval(), train_op)", "\n", "# total_loss, summary = self.net.train_step_with_summary(sess, blobs, lr.eval(), train_op)", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "iter", ")", ")", "\n", "\n", "", "else", ":", "\n", "# Compute the graph without summary", "\n", "                    ", "total_loss", ",", "_", ",", "image_id", "=", "sess", ".", "run", "(", "[", "D_loss", ",", "train_op", ",", "self", ".", "net", ".", "image_id", ",", "]", ")", "\n", "\n", "", "", "timer", ".", "toc", "(", ")", "\n", "# print(image_id)", "\n", "# Display training information", "\n", "if", "iter", "%", "cfg", ".", "TRAIN", ".", "DISPLAY", "==", "0", ":", "\n", "                ", "if", "type", "(", "image_id", ")", "==", "tuple", ":", "\n", "                    ", "image_id", "=", "image_id", "[", "0", "]", "\n", "", "print", "(", "'iter: {:d} / {:d}, im_id: {:d}, loss: {:.6f}, G: {:.6f} lr: {:f}, speed: {:.3f} s/iter'", ".", "format", "(", "\n", "iter", ",", "max_iters", ",", "image_id", ",", "total_loss", ",", "fake_total_loss", ",", "lr", ".", "eval", "(", ")", ",", "timer", ".", "average_time", ")", ",", "end", "=", "'\\n'", ",", "\n", "flush", "=", "True", ")", "\n", "# Snapshotting", "\n", "", "t_iter", "=", "iter", "\n", "self", ".", "snapshot", "(", "sess", ",", "t_iter", ")", "\n", "\n", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_FCL.SolverWrapperFCL.train_model": [[167, 181], ["print", "train_Solver_HICO_FCL.SolverWrapperFCL.construct_graph", "train_Solver_HICO_FCL.SolverWrapperFCL.from_snapshot", "sess.graph.finalize", "ult.timer.Timer", "train_Solver_HICO_FCL.SolverWrapperFCL.train_model_stepwise_inner", "train_Solver_HICO_FCL.SolverWrapperFCL.writer.close"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.construct_graph", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.from_snapshot", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.train_model_stepwise_inner"], ["", "", "def", "train_model", "(", "self", ",", "sess", ",", "max_iters", ")", ":", "\n", "        ", "print", "(", "'train: '", ",", "self", ".", "net", ".", "model_name", ")", "\n", "lr", ",", "train_op", ",", "train_op_g", ",", "D_loss", ",", "g_loss", "=", "self", ".", "construct_graph", "(", "sess", ")", "\n", "self", ".", "from_snapshot", "(", "sess", ")", "\n", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "timer", "=", "Timer", "(", ")", "\n", "\n", "# Data_length = len(self.Trainval_GT)", "\n", "iter", "=", "0", "\n", "\n", "self", ".", "train_model_stepwise_inner", "(", "D_loss", ",", "g_loss", ",", "iter", ",", "lr", ",", "max_iters", ",", "sess", ",", "timer", ",", "train_op", ",", "train_op_g", ")", "\n", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_FCL.train_net": [[182, 204], ["tensorflow.ConfigProto", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "tensorflow.Session", "train_Solver_HICO_FCL.SolverWrapperFCL", "print", "train_Solver_HICO_FCL.SolverWrapperFCL.train_model", "print", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.train_model"], ["", "", "def", "train_net", "(", "network", ",", "Trainval_GT", ",", "Trainval_N", ",", "output_dir", ",", "tb_dir", ",", "Pos_augment", ",", "Neg_select", ",", "Restore_flag", ",", "\n", "pretrained_model", ",", "max_iters", "=", "300000", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "tb_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "tb_dir", ")", "\n", "\n", "", "tfconfig", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "\"CPU\"", ":", "32", "}", ",", "\n", "inter_op_parallelism_threads", "=", "16", ",", "\n", "intra_op_parallelism_threads", "=", "16", ")", "\n", "# tfconfig = tf.ConfigProto()", "\n", "tfconfig", ".", "graph_options", ".", "optimizer_options", ".", "global_jit_level", "=", "tf", ".", "OptimizerOptions", ".", "ON_1", "\n", "tfconfig", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "tfconfig", ")", "as", "sess", ":", "\n", "        ", "sw", "=", "SolverWrapperFCL", "(", "sess", ",", "network", ",", "Trainval_GT", ",", "Trainval_N", ",", "output_dir", ",", "tb_dir", ",", "Pos_augment", ",", "Neg_select", ",", "\n", "Restore_flag", ",", "pretrained_model", ")", "\n", "\n", "print", "(", "'Solving..., Pos augment = '", "+", "str", "(", "Pos_augment", ")", "+", "', Neg augment = '", "+", "str", "(", "\n", "Neg_select", ")", "+", "', Restore_flag = '", "+", "str", "(", "Restore_flag", ")", ")", "\n", "sw", ".", "train_model", "(", "sess", ",", "max_iters", ")", "\n", "print", "(", "'done solving'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.__init__": [[30, 41], ["models.train_Solver_HICO.SolverWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1.__init__"], ["def", "__init__", "(", "self", ",", "sess", ",", "network", ",", "output_dir", ",", "tbdir", ",", "Restore_flag", ",", "pretrained_model", ")", ":", "\n", "        ", "super", "(", "SolverWrapperMultiGPU", ",", "self", ")", ".", "__init__", "(", "sess", ",", "network", ",", "None", ",", "None", ",", "output_dir", ",", "tbdir", ",", "None", ",", "None", ",", "Restore_flag", ",", "pretrained_model", ")", "\n", "\n", "self", ".", "image", "=", "None", "\n", "\n", "self", ".", "image_id", "=", "None", "\n", "self", ".", "spatial", "=", "None", "\n", "self", ".", "H_boxes", "=", "None", "\n", "self", ".", "O_boxes", "=", "None", "\n", "self", ".", "gt_class_HO", "=", "None", "\n", "self", ".", "H_num", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.set_data": [[42, 50], ["None"], "methods", ["None"], ["", "def", "set_data", "(", "self", ",", "image", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "sp", ")", ":", "\n", "        ", "self", ".", "image", "=", "image", "\n", "self", ".", "image_id", "=", "image_id", "\n", "self", ".", "spatial", "=", "sp", "\n", "self", ".", "H_boxes", "=", "Human_augmented", "\n", "self", ".", "O_boxes", "=", "Object_augmented", "\n", "self", ".", "gt_class_HO", "=", "action_HO", "\n", "self", ".", "H_num", "=", "num_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.construct_graph2": [[51, 138], ["print", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.compose_feature_helper.get_compose_type", "sess.graph.as_default", "tensorflow.device", "tensorflow.set_random_seed", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.get_init_step", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.get_step_factor", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.get_optimzer_lr", "range", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.optimizer.apply_gradients", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge_all", "tensorflow.train.Saver", "tensorflow.summary.FileWriter", "tensorflow.reduce_sum", "tensorflow.variable_scope", "tensorflow.get_variable", "print", "tensorflow.device", "tensorflow.clip_by_norm", "tensorflow.constant_initializer", "len", "tensorflow.name_scope", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.net.set_ph", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.net.create_architecture", "O_features.append", "V_features.append", "num_stop_list.append", "tower_losses.append", "os.environ[].split", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.net.get_compose_num_stop", "print", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.compose_feature_helper.merge_generate", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.compose_feature_helper.get_ll", "tower_losses.append", "tensorflow.trainable_variables", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.optimizer.compute_gradients", "tower_grads.append", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.net.model_name.__contains__", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.trainable_variables", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.optimizer.compute_gradients", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.net.get_compose_num_stop", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.net.get_compose_num_stop", "tensorflow.reduce_sum", "range"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.get_compose_type", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_init_step", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_step_factor", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_optimzer_lr", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.set_ph", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.create_architecture", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.merge_generate", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.get_ll", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop"], ["", "def", "construct_graph2", "(", "self", ",", "sess", ")", ":", "\n", "        ", "print", "(", "\"construct_graph2\"", ")", "\n", "compose_type", "=", "self", ".", "compose_feature_helper", ".", "get_compose_type", "(", ")", "\n", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ",", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "# Set the random seed for tensorflow", "\n", "            ", "tf", ".", "set_random_seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "\n", "init_step", "=", "self", ".", "get_init_step", "(", ")", "\n", "\n", "# global_step = tf.Variable(init_step, trainable=False, name='global_step')", "\n", "with", "tf", ".", "variable_scope", "(", "'tmp'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "                ", "global_step", "=", "tf", ".", "get_variable", "(", "'global_step'", ",", "shape", "=", "(", ")", ",", "trainable", "=", "False", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ")", "\n", "\n", "", "step_factor", "=", "self", ".", "get_step_factor", "(", ")", "\n", "\n", "lr", ",", "self", ".", "optimizer", "=", "self", ".", "get_optimzer_lr", "(", "global_step", ",", "step_factor", ")", "\n", "\n", "tower_grads", "=", "[", "]", "\n", "V_features", "=", "[", "]", "\n", "O_features", "=", "[", "]", "\n", "num_stop_list", "=", "[", "]", "\n", "tower_losses", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                ", "gpu_idx", "=", "i", "\n", "if", "'CUDA_VISIBLE_DEVICES'", "not", "in", "os", ".", "environ", "or", "len", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ".", "split", "(", "','", ")", ")", "==", "1", ":", "\n", "                    ", "gpu_idx", "=", "0", "\n", "# TODO if there are multiple GPUs, the code possibly raises an Exception.", "\n", "#  But I think multiple GPUs should obtain better result.", "\n", "", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "gpu_idx", ")", ":", "\n", "                    ", "with", "tf", ".", "name_scope", "(", "'%s_%d'", "%", "(", "'HICO'", ",", "i", ")", ",", ")", "as", "scope", ":", "\n", "                        ", "split_image", "=", "self", ".", "image", "[", "i", "]", "\n", "split_image_id", "=", "self", ".", "image_id", "[", "i", "]", "\n", "split_spatial", "=", "self", ".", "spatial", "[", "i", "]", "\n", "split_H_boxes", "=", "self", ".", "H_boxes", "[", "i", "]", "\n", "split_O_boxes", "=", "self", ".", "O_boxes", "[", "i", "]", "\n", "split_gt_class_HO", "=", "self", ".", "gt_class_HO", "[", "i", "]", "\n", "split_H_num", "=", "self", ".", "H_num", "[", "i", "]", "\n", "\n", "self", ".", "net", ".", "set_ph", "(", "split_image", ",", "split_image_id", ",", "split_H_num", ",", "\n", "split_H_boxes", ",", "split_O_boxes", ",", "split_gt_class_HO", ",", "split_spatial", ")", "\n", "\n", "# Build the main computation graph", "\n", "layers", "=", "self", ".", "net", ".", "create_architecture", "(", "True", ")", "# is_training flag: True", "\n", "\n", "O_features", ".", "append", "(", "self", ".", "net", ".", "intermediate", "[", "'fc7_O'", "]", "[", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", ")", "\n", "V_features", ".", "append", "(", "self", ".", "net", ".", "intermediate", "[", "'fc7_verbs'", "]", "[", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", ")", "\n", "num_stop_list", ".", "append", "(", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", ")", "\n", "# Define the loss", "\n", "loss", "=", "layers", "[", "'total_loss'", "]", "\n", "\n", "tower_losses", ".", "append", "(", "loss", ")", "\n", "# variables = tf.trainable_variables()", "\n", "# grads_and_vars = self.optimizer.compute_gradients(loss, variables)", "\n", "# tower_grads.append(grads_and_vars)", "\n", "\n", "if", "i", "==", "1", "and", "not", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_base'", ")", ":", "\n", "                            ", "print", "(", "'compose learning ======================================'", ")", "\n", "new_loss", "=", "self", ".", "compose_feature_helper", ".", "merge_generate", "(", "O_features", ",", "V_features", ",", "\n", "[", "self", ".", "gt_class_HO", "[", "j", "]", "[", "\n", ":", "num_stop_list", "[", "j", "]", "]", "for", "j", "in", "\n", "range", "(", "2", ")", "]", ",", "\n", "compose_type", ")", "\n", "ll", "=", "self", ".", "compose_feature_helper", ".", "get_ll", "(", ")", "\n", "tower_losses", ".", "append", "(", "new_loss", "*", "ll", ")", "\n", "\n", "variables", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "tf", ".", "reduce_sum", "(", "tower_losses", ")", ",", "variables", ")", "\n", "tower_grads", ".", "append", "(", "grads_and_vars", ")", "\n", "", "elif", "i", "==", "1", ":", "\n", "# baseline", "\n", "                            ", "new_loss", "=", "tf", ".", "reduce_sum", "(", "tower_losses", ")", "\n", "variables", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "tf", ".", "reduce_sum", "(", "tower_losses", ")", ",", "variables", ")", "\n", "\n", "", "", "", "", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "1.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "grads_and_vars", "if", "grad", "is", "not", "None", "]", "\n", "\n", "for", "grad", ",", "var", "in", "capped_gvs", ":", "\n", "                ", "print", "(", "'update: {}'", ".", "format", "(", "var", ".", "name", ")", ")", "\n", "", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ",", "global_step", "=", "global_step", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'lr'", ",", "lr", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'merge_loss'", ",", "new_loss", ")", "\n", "self", ".", "net", ".", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_KEPT", ")", "\n", "# Write the train and validation information to tensorboard", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "tbdir", ",", "sess", ".", "graph", ")", "\n", "", "return", "lr", ",", "train_op", ",", "tf", ".", "reduce_sum", "(", "tower_losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.train_model": [[140, 188], ["train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.from_snapshot", "sess.graph.finalize", "ult.timer.Timer", "logging.basicConfig", "logging.getLogger", "logging.getLogger.setLevel", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.get_init_step", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.writer.close", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.construct_graph2", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.construct_graph2", "ult.timer.Timer.tic", "ult.timer.Timer.toc", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.snapshot", "len", "sess.run", "train_Solver_HICO_MultiGPU.SolverWrapperMultiGPU.writer.add_summary", "sess.run", "logging.getLogger.info", "os.environ[].split", "float", "type", "lr.eval"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.from_snapshot", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_init_step", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.construct_graph2", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.construct_graph2", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.snapshot"], ["", "def", "train_model", "(", "self", ",", "sess", ",", "max_iters", ")", ":", "\n", "        ", "if", "'CUDA_VISIBLE_DEVICES'", "not", "in", "os", ".", "environ", "or", "len", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ".", "split", "(", "','", ")", ")", "==", "1", ":", "\n", "            ", "lr", ",", "train_op", ",", "t_loss", "=", "self", ".", "construct_graph2", "(", "sess", ")", "\n", "", "else", ":", "\n", "            ", "lr", ",", "train_op", ",", "t_loss", "=", "self", ".", "construct_graph2", "(", "sess", ")", "\n", "", "self", ".", "from_snapshot", "(", "sess", ")", "\n", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "timer", "=", "Timer", "(", ")", "\n", "import", "logging", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ",", "format", "=", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# Data_length = len(self.Trainval_GT)", "\n", "iter", "=", "self", ".", "get_init_step", "(", ")", "\n", "while", "iter", "<", "max_iters", "+", "1", ":", "\n", "            ", "timer", ".", "tic", "(", ")", "\n", "\n", "blobs", "=", "{", "}", "\n", "from", "tensorflow", ".", "python", ".", "framework", ".", "errors_impl", "import", "InvalidArgumentError", "\n", "if", "(", "iter", "%", "cfg", ".", "TRAIN", ".", "SUMMARY_INTERVAL", "==", "0", ")", "or", "(", "iter", "<", "20", ")", ":", "\n", "\n", "# Compute the graph with summary", "\n", "                ", "total_loss", ",", "summary", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "t_loss", ",", "\n", "self", ".", "net", ".", "summary_op", ",", "self", ".", "net", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "iter", ")", ")", "\n", "\n", "", "else", ":", "\n", "# Compute the graph without summary", "\n", "                ", "total_loss", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "t_loss", ",", "self", ".", "net", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "\n", "", "timer", ".", "toc", "(", ")", "\n", "# print(image_id)", "\n", "# Display training information", "\n", "if", "iter", "%", "(", "cfg", ".", "TRAIN", ".", "DISPLAY", ")", "==", "0", ":", "\n", "                ", "if", "type", "(", "image_id", ")", "==", "tuple", ":", "\n", "                    ", "image_id", "=", "image_id", "[", "0", "]", "\n", "", "logger", ".", "info", "(", "'iter: {:d} / {:d}, im_id: {:d}, total loss: {:.6f}, lr: {:f}, speed: {:.3f} s/iter'", ".", "format", "(", "\n", "iter", ",", "max_iters", ",", "image_id", ",", "total_loss", ",", "lr", ".", "eval", "(", ")", ",", "timer", ".", "average_time", ")", ")", "\n", "# Snapshotting", "\n", "", "self", ".", "snapshot", "(", "sess", ",", "iter", ")", "\n", "\n", "iter", "+=", "1", "\n", "\n", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_VCOCO.get_blob": [[22, 31], ["cv2.imread", "cv2.imread.astype", "im_orig.reshape.reshape", "str().zfill", "str"], "function", ["None"], ["def", "get_blob", "(", "image_id", ")", ":", "\n", "    ", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/coco/images/val2014/COCO_val2014_'", "+", "(", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "12", ")", "+", "'.jpg'", "\n", "# print(im_file)", "\n", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "im_orig", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "True", ")", "\n", "im_orig", "-=", "cfg", ".", "PIXEL_MEANS", "\n", "im_shape", "=", "im_orig", ".", "shape", "\n", "im_orig", "=", "im_orig", ".", "reshape", "(", "1", ",", "im_shape", "[", "0", "]", ",", "im_shape", "[", "1", "]", ",", "3", ")", "\n", "return", "im_orig", ",", "im_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_VCOCO.im_detect": [[32, 161], ["test_VCOCO.get_blob", "numpy.array().reshape", "numpy.empty", "range", "range", "detection.append", "numpy.max", "numpy.argmax", "numpy.array", "numpy.array().reshape", "ult.ult.Get_next_sp().reshape", "net.test_image_HO", "numpy.concatenate", "numpy.concatenate", "numpy.max", "numpy.append", "numpy.append", "numpy.max", "numpy.all", "ult.apply_prior.apply_prior", "ult.apply_prior.apply_prior", "numpy.max", "max", "numpy.max", "max", "numpy.max", "max", "numpy.max", "numpy.max", "Action_dic_inv[].split", "numpy.max", "numpy.full().reshape", "numpy.array", "ult.ult.Get_next_sp", "prior_mask[].reshape", "prior_mask[].reshape", "Object[].reshape", "numpy.max", "numpy.max", "numpy.max", "numpy.full"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.get_blob", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.test_image_HO", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.apply_prior.apply_prior", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.apply_prior.apply_prior", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp"], ["", "def", "im_detect", "(", "sess", ",", "net", ",", "image_id", ",", "Test_RCNN", ",", "prior_mask", ",", "Action_dic_inv", ",", "object_thres", ",", "human_thres", ",", "prior_flag", ",", "detection", ")", ":", "\n", "\n", "    ", "im_orig", ",", "im_shape", "=", "get_blob", "(", "image_id", ")", "\n", "\n", "blobs", "=", "{", "}", "\n", "blobs", "[", "'H_num'", "]", "=", "1", "\n", "\n", "for", "Human_out", "in", "Test_RCNN", "[", "image_id", "]", ":", "\n", "        ", "if", "(", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", ">", "human_thres", ")", "and", "(", "Human_out", "[", "1", "]", "==", "'Human'", ")", ":", "# This is a valid human", "\n", "\n", "# Predict actrion using human appearance only", "\n", "            ", "blobs", "[", "'H_boxes'", "]", "=", "np", ".", "array", "(", "[", "0", ",", "Human_out", "[", "2", "]", "[", "0", "]", ",", "Human_out", "[", "2", "]", "[", "1", "]", ",", "Human_out", "[", "2", "]", "[", "2", "]", ",", "Human_out", "[", "2", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", "\n", "# prediction_H  = net.test_image_H(sess, im_orig, blobs)", "\n", "\n", "# save image information", "\n", "dic", "=", "{", "}", "\n", "dic", "[", "'image_id'", "]", "=", "image_id", "\n", "dic", "[", "'person_box'", "]", "=", "Human_out", "[", "2", "]", "\n", "\n", "# Predict actrion using human and object appearance ", "\n", "Score_obj", "=", "np", ".", "empty", "(", "(", "0", ",", "4", "+", "29", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "Object", "in", "Test_RCNN", "[", "image_id", "]", ":", "\n", "                ", "if", "(", "np", ".", "max", "(", "Object", "[", "5", "]", ")", ">", "object_thres", ")", "and", "not", "(", "np", ".", "all", "(", "Object", "[", "2", "]", "==", "Human_out", "[", "2", "]", ")", ")", ":", "# This is a valid object", "\n", "\n", "                    ", "blobs", "[", "'O_boxes'", "]", "=", "np", ".", "array", "(", "[", "0", ",", "Object", "[", "2", "]", "[", "0", "]", ",", "Object", "[", "2", "]", "[", "1", "]", ",", "Object", "[", "2", "]", "[", "2", "]", ",", "Object", "[", "2", "]", "[", "3", "]", "]", ")", ".", "reshape", "(", "1", ",", "5", ")", "\n", "blobs", "[", "'sp'", "]", "=", "Get_next_sp", "(", "Human_out", "[", "2", "]", ",", "Object", "[", "2", "]", ")", ".", "reshape", "(", "1", ",", "64", ",", "64", ",", "2", ")", "\n", "prediction_HO", "=", "net", ".", "test_image_HO", "(", "sess", ",", "im_orig", ",", "blobs", ")", "\n", "\n", "if", "prior_flag", "==", "1", ":", "\n", "                        ", "prediction_HO", "=", "apply_prior", "(", "Object", ",", "prediction_HO", ")", "\n", "", "if", "prior_flag", "==", "2", ":", "\n", "                        ", "prediction_HO", "=", "prediction_HO", "*", "prior_mask", "[", ":", ",", "Object", "[", "4", "]", "]", ".", "reshape", "(", "1", ",", "29", ")", "\n", "", "if", "prior_flag", "==", "3", ":", "\n", "                        ", "prediction_HO", "=", "apply_prior", "(", "Object", ",", "prediction_HO", ")", "\n", "prediction_HO", "=", "prediction_HO", "*", "prior_mask", "[", ":", ",", "Object", "[", "4", "]", "]", ".", "reshape", "(", "1", ",", "29", ")", "\n", "\n", "", "This_Score_obj", "=", "np", ".", "concatenate", "(", "(", "Object", "[", "2", "]", ".", "reshape", "(", "1", ",", "4", ")", ",", "prediction_HO", "[", "0", "]", "*", "np", ".", "max", "(", "Object", "[", "5", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "Score_obj", "=", "np", ".", "concatenate", "(", "(", "Score_obj", ",", "This_Score_obj", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# print(prediction_HO.shape, blobs['H_boxes'].shape, blobs['O_boxes'].shape)", "\n", "# exit()", "\n", "# There is only a single human detected in this image. I just ignore it. Might be better to add Nan as object box.", "\n", "", "", "if", "Score_obj", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "# Find out the object box associated with highest action score", "\n", "", "max_idx", "=", "np", ".", "argmax", "(", "Score_obj", ",", "0", ")", "[", "4", ":", "]", "\n", "\n", "# agent mAP", "\n", "for", "i", "in", "range", "(", "29", ")", ":", "\n", "#'''", "\n", "# walk, smile, run, stand", "\n", "# if (i == 3) or (i == 17) or (i == 22) or (i == 27):", "\n", "#     agent_name      = Action_dic_inv[i] + '_agent'", "\n", "#     dic[agent_name] = np.max(Human_out[5]) * prediction_H[0][0][i]", "\n", "#     continue", "\n", "\n", "# cut", "\n", "                ", "if", "i", "==", "2", ":", "\n", "                    ", "agent_name", "=", "'cut_agent'", "\n", "dic", "[", "agent_name", "]", "=", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", "*", "max", "(", "Score_obj", "[", "max_idx", "[", "2", "]", "]", "[", "4", "+", "2", "]", ",", "Score_obj", "[", "max_idx", "[", "4", "]", "]", "[", "4", "+", "4", "]", ")", "\n", "continue", "\n", "", "if", "i", "==", "4", ":", "\n", "                    ", "continue", "\n", "\n", "# eat", "\n", "", "if", "i", "==", "9", ":", "\n", "                    ", "agent_name", "=", "'eat_agent'", "\n", "dic", "[", "agent_name", "]", "=", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", "*", "max", "(", "Score_obj", "[", "max_idx", "[", "9", "]", "]", "[", "4", "+", "9", "]", ",", "Score_obj", "[", "max_idx", "[", "16", "]", "]", "[", "4", "+", "16", "]", ")", "\n", "continue", "\n", "", "if", "i", "==", "16", ":", "\n", "                    ", "continue", "\n", "\n", "# hit", "\n", "", "if", "i", "==", "19", ":", "\n", "                    ", "agent_name", "=", "'hit_agent'", "\n", "dic", "[", "agent_name", "]", "=", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", "*", "max", "(", "Score_obj", "[", "max_idx", "[", "19", "]", "]", "[", "4", "+", "19", "]", ",", "Score_obj", "[", "max_idx", "[", "20", "]", "]", "[", "4", "+", "20", "]", ")", "\n", "continue", "\n", "", "if", "i", "==", "20", ":", "\n", "                    ", "continue", "\n", "\n", "# These 2 classes need to save manually because there is '_' in action name", "\n", "", "if", "i", "==", "6", ":", "\n", "                    ", "agent_name", "=", "'talk_on_phone_agent'", "\n", "dic", "[", "agent_name", "]", "=", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", "*", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", "4", "+", "i", "]", "\n", "continue", "\n", "\n", "", "if", "i", "==", "8", ":", "\n", "                    ", "agent_name", "=", "'work_on_computer_agent'", "\n", "dic", "[", "agent_name", "]", "=", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", "*", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", "4", "+", "i", "]", "\n", "continue", "\n", "\n", "# all the rest", "\n", "", "agent_name", "=", "Action_dic_inv", "[", "i", "]", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "+", "'_agent'", "\n", "dic", "[", "agent_name", "]", "=", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", "*", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", "4", "+", "i", "]", "\n", "#'''", "\n", "\n", "'''\n                if i == 6:\n                    agent_name = 'talk_on_phone_agent'  \n                    dic[agent_name] = np.max(Human_out[5]) * prediction_H[0][0][i]\n                    continue\n\n                if i == 8:\n                    agent_name = 'work_on_computer_agent'  \n                    dic[agent_name] = np.max(Human_out[5]) * prediction_H[0][0][i]\n                    continue \n\n                agent_name =  Action_dic_inv[i].split(\"_\")[0] + '_agent'  \n                dic[agent_name] = np.max(Human_out[5]) * prediction_H[0][0][i]\n                '''", "\n", "\n", "# role mAP", "\n", "", "for", "i", "in", "range", "(", "29", ")", ":", "\n", "# walk, smile, run, stand. Won't contribute to role mAP", "\n", "# if (i == 3) or (i == 17) or (i == 22) or (i == 27):", "\n", "#     dic[Action_dic_inv[i]] = np.append(np.full(4, np.nan).reshape(1,4), np.max(Human_out[5]) * prediction_H[0][0][i])", "\n", "#     continue", "\n", "\n", "# Impossible to perform this action", "\n", "                ", "if", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", "*", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", "4", "+", "i", "]", "==", "0", ":", "\n", "                   ", "dic", "[", "Action_dic_inv", "[", "i", "]", "]", "=", "np", ".", "append", "(", "np", ".", "full", "(", "4", ",", "np", ".", "nan", ")", ".", "reshape", "(", "1", ",", "4", ")", ",", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", "*", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", "4", "+", "i", "]", ")", "\n", "\n", "# Action with >0 score", "\n", "", "else", ":", "\n", "                   ", "dic", "[", "Action_dic_inv", "[", "i", "]", "]", "=", "np", ".", "append", "(", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", ":", "4", "]", ",", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", "*", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", "4", "+", "i", "]", ")", "\n", "\n", "", "", "detection", ".", "append", "(", "dic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_VCOCO.test_net": [[163, 188], ["numpy.random.seed", "open", "pickle.dump", "ult.timer.Timer", "ult.timer.Timer", "_t[].tic", "int", "test_VCOCO.im_detect", "_t[].toc", "print", "open", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_VCOCO.im_detect", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc"], ["", "", "", "def", "test_net", "(", "sess", ",", "net", ",", "Test_RCNN", ",", "prior_mask", ",", "Action_dic_inv", ",", "output_dir", ",", "object_thres", ",", "human_thres", ",", "prior_flag", ")", ":", "\n", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "detection", "=", "[", "]", "\n", "count", "=", "0", "\n", "\n", "# timers", "\n", "_t", "=", "{", "'im_detect'", ":", "Timer", "(", ")", ",", "'misc'", ":", "Timer", "(", ")", "}", "\n", "\n", "\n", "for", "line", "in", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'/v-coco/data/splits/vcoco_test.ids'", ",", "'r'", ")", ":", "\n", "\n", "        ", "_t", "[", "'im_detect'", "]", ".", "tic", "(", ")", "\n", "\n", "image_id", "=", "int", "(", "line", ".", "rstrip", "(", ")", ")", "\n", "\n", "im_detect", "(", "sess", ",", "net", ",", "image_id", ",", "Test_RCNN", ",", "prior_mask", ",", "Action_dic_inv", ",", "object_thres", ",", "human_thres", ",", "prior_flag", ",", "detection", ")", "\n", "\n", "_t", "[", "'im_detect'", "]", ".", "toc", "(", ")", "\n", "\n", "print", "(", "'im_detect: {:d}/{:d} {:.3f}s'", ".", "format", "(", "count", "+", "1", ",", "4946", ",", "_t", "[", "'im_detect'", "]", ".", "average_time", ")", ")", "\n", "count", "+=", "1", "\n", "\n", "", "pickle", ".", "dump", "(", "detection", ",", "open", "(", "output_dir", ",", "\"wb\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_VCOCO.test_net_data_api_24": [[191, 422], ["_t[].tic", "_t[].tic", "_t[].toc", "print", "pickle.dump", "print", "ult.timer.Timer", "ult.timer.Timer", "_t[].tic", "range", "_t[].toc", "print", "len", "open", "numpy.empty", "range", "range", "range", "detection.append", "sess.run", "numpy.zeros", "numpy.asarray", "numpy.zeros", "numpy.asarray", "print", "sess.run", "numpy.zeros", "numpy.asarray", "net.model_name.__contains__", "print", "int", "numpy.concatenate", "numpy.concatenate", "print", "numpy.argmax", "print", "ult.apply_prior.apply_prior", "ult.apply_prior.apply_prior", "numpy.max", "numpy.append", "numpy.append", "sess.run", "prior_mask[].reshape", "prior_mask[].reshape", "o_boxes_list[].reshape", "numpy.max", "max", "numpy.max", "max", "numpy.max", "max", "numpy.max", "numpy.max", "Action_dic_inv[].split", "numpy.append", "numpy.max", "numpy.full().reshape", "numpy.max", "numpy.max", "numpy.full().reshape", "numpy.max", "numpy.max", "numpy.max", "numpy.full", "numpy.full"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.apply_prior.apply_prior", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.apply_prior.apply_prior"], ["", "def", "test_net_data_api_24", "(", "sess", ",", "net", ",", "Test_RCNN", ",", "prior_mask", ",", "Action_dic_inv", ",", "output_dir", ",", "\n", "object_thres", ",", "human_thres", ",", "prior_flag", ",", "blobs", ",", "image_id", ",", "img_orig", ")", ":", "\n", "    ", "detection", "=", "[", "]", "\n", "\n", "# prediction_HO  = net.test_image_HO(sess, im_orig, blobs)", "\n", "# timers", "\n", "_t", "=", "{", "'im_detect'", ":", "Timer", "(", ")", ",", "'misc'", ":", "Timer", "(", ")", "}", "\n", "last_img_id", "=", "-", "1", "\n", "count", "=", "0", "\n", "_t", "[", "'im_detect'", "]", ".", "tic", "(", ")", "\n", "_t", "[", "'misc'", "]", ".", "tic", "(", ")", "\n", "while", "True", ":", "\n", "        ", "_t", "[", "'im_detect'", "]", ".", "tic", "(", ")", "\n", "\n", "from", "tensorflow", ".", "python", ".", "framework", ".", "errors_impl", "import", "InvalidArgumentError", "\n", "try", ":", "\n", "\n", "# blobs = {}", "\n", "# blobs['H_num'] = 0", "\n", "# blobs['H_boxes'] = []", "\n", "# blobs['O_boxes'] = []", "\n", "# blobs['sp'] = []", "\n", "# blobs['H_score'] = []", "\n", "# blobs['O_score'] = []", "\n", "# blobs['O_mask'] = []", "\n", "# blobs['O_cls'] = []", "\n", "            ", "if", "'cls_prob_H'", "in", "net", ".", "predictions", ":", "\n", "                ", "prediction_H", ",", "prediction_HO", ",", "_blobs", ",", "_image_id", ",", "_img_orig", "=", "sess", ".", "run", "(", "[", "\n", "net", ".", "predictions", "[", "\"cls_prob_H\"", "]", ",", "net", ".", "predictions", "[", "\"cls_prob_HO\"", "]", ",", "blobs", ",", "image_id", ",", "img_orig", "]", ")", "\n", "# remove 3, 17 22, 23 27", "\n", "tmp", "=", "np", ".", "zeros", "(", "[", "prediction_HO", ".", "shape", "[", "0", "]", ",", "29", "]", ")", "\n", "tmp", "[", ":", ",", "0", ":", "3", "]", "=", "prediction_HO", "[", ":", ",", "0", ":", "3", "]", "\n", "tmp", "[", ":", ",", "4", ":", "17", "]", "=", "prediction_HO", "[", ":", ",", "3", ":", "16", "]", "\n", "tmp", "[", ":", ",", "18", ":", "22", "]", "=", "prediction_HO", "[", ":", ",", "16", ":", "19", "]", "\n", "tmp", "[", ":", ",", "24", ":", "27", "]", "=", "prediction_HO", "[", ":", ",", "20", ":", "23", "]", "\n", "tmp", "[", ":", ",", "28", ":", "29", "]", "=", "prediction_HO", "[", ":", ",", "23", ":", "24", "]", "\n", "prediction_HO", "=", "np", ".", "asarray", "(", "[", "tmp", "]", ")", "\n", "\n", "tmp", "=", "np", ".", "zeros", "(", "[", "prediction_H", ".", "shape", "[", "0", "]", ",", "29", "]", ")", "\n", "tmp", "[", ":", ",", "0", ":", "3", "]", "=", "prediction_H", "[", ":", ",", "0", ":", "3", "]", "\n", "tmp", "[", ":", ",", "4", ":", "17", "]", "=", "prediction_H", "[", ":", ",", "3", ":", "16", "]", "\n", "tmp", "[", ":", ",", "18", ":", "22", "]", "=", "prediction_H", "[", ":", ",", "16", ":", "19", "]", "\n", "tmp", "[", ":", ",", "24", ":", "27", "]", "=", "prediction_H", "[", ":", ",", "20", ":", "23", "]", "\n", "tmp", "[", ":", ",", "28", ":", "29", "]", "=", "prediction_H", "[", ":", ",", "23", ":", "24", "]", "\n", "\n", "prediction_H", "=", "np", ".", "asarray", "(", "[", "tmp", "]", ")", "\n", "# prediction_H = None", "\n", "# print(\"yes prob H\")", "\n", "print", "(", "prediction_HO", ".", "shape", ",", "prediction_H", ".", "shape", ")", "\n", "", "else", ":", "\n", "                ", "prediction_HO", ",", "_blobs", ",", "_image_id", ",", "_img_orig", "=", "sess", ".", "run", "(", "\n", "[", "net", ".", "predictions", "[", "\"cls_prob_HO\"", "]", ",", "blobs", ",", "image_id", ",", "img_orig", "]", ")", "\n", "prediction_H", "=", "None", "\n", "tmp", "=", "np", ".", "zeros", "(", "[", "prediction_HO", ".", "shape", "[", "0", "]", ",", "29", "]", ")", "\n", "tmp", "[", ":", ",", "0", ":", "3", "]", "=", "prediction_HO", "[", ":", ",", "0", ":", "3", "]", "\n", "tmp", "[", ":", ",", "4", ":", "17", "]", "=", "prediction_HO", "[", ":", ",", "3", ":", "16", "]", "\n", "tmp", "[", ":", ",", "18", ":", "22", "]", "=", "prediction_HO", "[", ":", ",", "16", ":", "20", "]", "\n", "tmp", "[", ":", ",", "24", ":", "27", "]", "=", "prediction_HO", "[", ":", ",", "20", ":", "23", "]", "\n", "tmp", "[", ":", ",", "28", ":", "29", "]", "=", "prediction_HO", "[", ":", ",", "23", ":", "24", "]", "\n", "prediction_HO", "=", "np", ".", "asarray", "(", "[", "tmp", "]", ")", "\n", "\n", "", "", "except", "InvalidArgumentError", "as", "e", ":", "\n", "# cls_prob_HO = np.zeros(shape=[blobs['sp'].shape[0], self.num_classes])", "\n", "            ", "if", "net", ".", "model_name", ".", "__contains__", "(", "'lamb'", ")", ":", "\n", "                ", "print", "(", "'InvalidArgumentError'", ",", "sess", ".", "run", "(", "[", "_image_id", "]", ")", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "raise", "e", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "print", "(", "'END'", ")", "\n", "break", "\n", "\n", "", "start", "=", "0", "\n", "# print(_blobs['H_num'], prediction_HO[0].shape)", "\n", "for", "j", "in", "range", "(", "_blobs", "[", "'H_num'", "]", "+", "1", ")", ":", "\n", "            ", "if", "j", "<", "_blobs", "[", "'H_num'", "]", "and", "(", "_blobs", "[", "'H_boxes'", "]", "[", "j", "]", "==", "_blobs", "[", "'H_boxes'", "]", "[", "start", "]", ")", ".", "all", "(", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "h_score", "=", "_blobs", "[", "'H_score'", "]", "[", "start", "]", "\n", "h_boxes", "=", "_blobs", "[", "'H_boxes'", "]", "[", "start", "]", "\n", "\n", "o_boxes_list", "=", "_blobs", "[", "'O_boxes'", "]", "\n", "o_score_list", "=", "_blobs", "[", "'O_score'", "]", "\n", "o_mask_list", "=", "_blobs", "[", "'O_mask'", "]", "\n", "o_cls_list", "=", "_blobs", "[", "'O_cls'", "]", "\n", "\n", "# Predict actrion using human and object appearance", "\n", "Score_obj", "=", "np", ".", "empty", "(", "(", "0", ",", "4", "+", "29", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# save image information", "\n", "dic", "=", "{", "}", "\n", "dic", "[", "'image_id'", "]", "=", "_image_id", "\n", "dic", "[", "'person_box'", "]", "=", "h_boxes", "[", "1", ":", "]", "\n", "for", "i", "in", "range", "(", "start", ",", "j", ")", ":", "\n", "                ", "h_score", "=", "_blobs", "[", "'H_score'", "]", "[", "i", "]", "\n", "\n", "object_score", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "object_score", "[", "4", "]", "=", "o_cls_list", "[", "i", "]", "\n", "# print(prediction_HO.shape, i, prediction_HO.dtype, _blobs['O_cls'])", "\n", "tmp_prediction_HO", "=", "prediction_HO", "[", "0", ":", ",", "i", ":", "i", "+", "1", "]", "\n", "obj_cls", "=", "int", "(", "_blobs", "[", "'O_cls'", "]", "[", "i", "]", ")", "\n", "if", "prior_flag", "==", "1", ":", "\n", "                    ", "tmp_prediction_HO", "=", "apply_prior", "(", "object_score", ",", "tmp_prediction_HO", ")", "\n", "", "if", "prior_flag", "==", "2", ":", "\n", "                    ", "tmp_prediction_HO", "=", "tmp_prediction_HO", "*", "prior_mask", "[", ":", ",", "obj_cls", "]", ".", "reshape", "(", "1", ",", "29", ")", "\n", "", "if", "prior_flag", "==", "3", ":", "\n", "                    ", "tmp_prediction_HO", "=", "apply_prior", "(", "object_score", ",", "tmp_prediction_HO", ")", "\n", "tmp_prediction_HO", "=", "tmp_prediction_HO", "*", "prior_mask", "[", ":", ",", "obj_cls", "]", ".", "reshape", "(", "1", ",", "29", ")", "\n", "\n", "# print(o_boxes_list[i:i+1, 1:].reshape(1, 4).shape, (tmp_prediction_HO* np.max(o_score_list[i])).shape, np.max(o_score_list[i]).shape)", "\n", "", "This_Score_obj", "=", "np", ".", "concatenate", "(", "\n", "(", "o_boxes_list", "[", "i", ":", "i", "+", "1", ",", "1", ":", "]", ".", "reshape", "(", "1", ",", "4", ")", ",", "tmp_prediction_HO", "[", "0", "]", "*", "np", ".", "max", "(", "o_score_list", "[", "i", "]", ")", ")", ",", "\n", "axis", "=", "1", ")", "\n", "# print(This_Score_obj.shape, Score_obj.shape)", "\n", "Score_obj", "=", "np", ".", "concatenate", "(", "(", "Score_obj", ",", "This_Score_obj", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "start", "=", "j", "\n", "# There is only a single human detected in this image. I just ignore it. Might be better to add Nan as object box.", "\n", "if", "Score_obj", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "print", "(", "'no obj box'", ",", "j", ",", "start", ")", "\n", "continue", "\n", "\n", "# Find out the object box associated with highest action score", "\n", "", "max_idx", "=", "np", ".", "argmax", "(", "Score_obj", ",", "0", ")", "[", "4", ":", "]", "\n", "\n", "# agent mAP", "\n", "for", "i", "in", "range", "(", "29", ")", ":", "\n", "# '''", "\n", "# walk, smile, run, stand", "\n", "                ", "if", "prediction_H", "is", "not", "None", ":", "\n", "                    ", "if", "(", "i", "==", "3", ")", "or", "(", "i", "==", "17", ")", "or", "(", "i", "==", "22", ")", "or", "(", "i", "==", "27", ")", ":", "\n", "                        ", "agent_name", "=", "Action_dic_inv", "[", "i", "]", "+", "'_agent'", "\n", "dic", "[", "agent_name", "]", "=", "np", ".", "max", "(", "h_score", ")", "*", "prediction_H", "[", "0", "]", "[", "0", "]", "[", "i", "]", "\n", "continue", "\n", "\n", "# cut", "\n", "", "", "if", "i", "==", "2", ":", "\n", "                    ", "agent_name", "=", "'cut_agent'", "\n", "dic", "[", "agent_name", "]", "=", "np", ".", "max", "(", "h_score", ")", "*", "max", "(", "Score_obj", "[", "max_idx", "[", "2", "]", "]", "[", "4", "+", "2", "]", ",", "\n", "Score_obj", "[", "max_idx", "[", "4", "]", "]", "[", "4", "+", "4", "]", ")", "\n", "continue", "\n", "", "if", "i", "==", "4", ":", "\n", "                    ", "continue", "\n", "\n", "# eat", "\n", "", "if", "i", "==", "9", ":", "\n", "                    ", "agent_name", "=", "'eat_agent'", "\n", "dic", "[", "agent_name", "]", "=", "np", ".", "max", "(", "h_score", ")", "*", "max", "(", "Score_obj", "[", "max_idx", "[", "9", "]", "]", "[", "4", "+", "9", "]", ",", "\n", "Score_obj", "[", "max_idx", "[", "16", "]", "]", "[", "4", "+", "16", "]", ")", "\n", "continue", "\n", "", "if", "i", "==", "16", ":", "\n", "                    ", "continue", "\n", "\n", "# hit", "\n", "", "if", "i", "==", "19", ":", "\n", "                    ", "agent_name", "=", "'hit_agent'", "\n", "dic", "[", "agent_name", "]", "=", "np", ".", "max", "(", "h_score", ")", "*", "max", "(", "Score_obj", "[", "max_idx", "[", "19", "]", "]", "[", "4", "+", "19", "]", ",", "\n", "Score_obj", "[", "max_idx", "[", "20", "]", "]", "[", "4", "+", "20", "]", ")", "\n", "continue", "\n", "", "if", "i", "==", "20", ":", "\n", "                    ", "continue", "\n", "\n", "# These 2 classes need to save manually because there is '_' in action name", "\n", "", "if", "i", "==", "6", ":", "\n", "                    ", "agent_name", "=", "'talk_on_phone_agent'", "\n", "dic", "[", "agent_name", "]", "=", "np", ".", "max", "(", "h_score", ")", "*", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", "4", "+", "i", "]", "\n", "continue", "\n", "\n", "", "if", "i", "==", "8", ":", "\n", "                    ", "agent_name", "=", "'work_on_computer_agent'", "\n", "dic", "[", "agent_name", "]", "=", "np", ".", "max", "(", "h_score", ")", "*", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", "4", "+", "i", "]", "\n", "continue", "\n", "\n", "# all the rest", "\n", "", "agent_name", "=", "Action_dic_inv", "[", "i", "]", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "+", "'_agent'", "\n", "dic", "[", "agent_name", "]", "=", "np", ".", "max", "(", "h_score", ")", "*", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", "4", "+", "i", "]", "\n", "# '''", "\n", "\n", "'''\n                if i == 6:\n                    agent_name = 'talk_on_phone_agent'  \n                    dic[agent_name] = np.max(h_score) * prediction_H[0][0][i]\n                    continue\n\n                if i == 8:\n                    agent_name = 'work_on_computer_agent'  \n                    dic[agent_name] = np.max(h_score) * prediction_H[0][0][i]\n                    continue \n\n                agent_name =  Action_dic_inv[i].split(\"_\")[0] + '_agent'  \n                dic[agent_name] = np.max(h_score) * prediction_H[0][0][i]\n                '''", "\n", "\n", "# role mAP", "\n", "", "for", "i", "in", "range", "(", "29", ")", ":", "\n", "# walk, smile, run, stand. Won't contribute to role mAP", "\n", "                ", "if", "prediction_H", "is", "not", "None", ":", "\n", "                    ", "if", "(", "i", "==", "3", ")", "or", "(", "i", "==", "17", ")", "or", "(", "i", "==", "22", ")", "or", "(", "i", "==", "27", ")", ":", "\n", "                        ", "dic", "[", "Action_dic_inv", "[", "i", "]", "]", "=", "np", ".", "append", "(", "np", ".", "full", "(", "4", ",", "np", ".", "nan", ")", ".", "reshape", "(", "1", ",", "4", ")", ",", "\n", "np", ".", "max", "(", "h_score", ")", "*", "prediction_H", "[", "0", "]", "[", "0", "]", "[", "i", "]", ")", "\n", "continue", "\n", "\n", "# Impossible to perform this action", "\n", "", "", "if", "np", ".", "max", "(", "h_score", ")", "*", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", "4", "+", "i", "]", "==", "0", ":", "\n", "                    ", "dic", "[", "Action_dic_inv", "[", "i", "]", "]", "=", "np", ".", "append", "(", "np", ".", "full", "(", "4", ",", "np", ".", "nan", ")", ".", "reshape", "(", "1", ",", "4", ")", ",", "\n", "np", ".", "max", "(", "h_score", ")", "*", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", "4", "+", "i", "]", ")", "\n", "\n", "# Action with >0 score", "\n", "", "else", ":", "\n", "                    ", "dic", "[", "Action_dic_inv", "[", "i", "]", "]", "=", "np", ".", "append", "(", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", ":", "4", "]", ",", "\n", "np", ".", "max", "(", "h_score", ")", "*", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", "4", "+", "i", "]", ")", "\n", "\n", "", "", "detection", ".", "append", "(", "dic", ")", "\n", "\n", "", "_t", "[", "'im_detect'", "]", ".", "toc", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "print", "(", "'\\rmodel: {} im_detect: {:d}/{:d}  {:d}, {:.3f}s'", ".", "format", "(", "net", ".", "model_name", ",", "count", ",", "15765", ",", "_image_id", ",", "\n", "_t", "[", "'im_detect'", "]", ".", "average_time", ")", ",", "end", "=", "''", ",", "\n", "flush", "=", "True", ")", "\n", "# if count >= 100:", "\n", "#     break", "\n", "\n", "# TODO remove", "\n", "# pickle.dump(detection, open('test_new.pkl', 'wb'))", "\n", "", "_t", "[", "'misc'", "]", ".", "toc", "(", ")", "\n", "print", "(", "'dump detection'", ",", "len", "(", "detection", ")", ",", "_t", "[", "'misc'", "]", ".", "average_time", ")", "\n", "import", "copy", "\n", "# a = copy.deepcopy(detection)", "\n", "# print(detection)", "\n", "pickle", ".", "dump", "(", "detection", ",", "open", "(", "output_dir", ",", "\"wb\"", ")", ")", "\n", "print", "(", "'dump sucessfully'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_VCOCO.obtain_data": [[425, 520], ["numpy.random.seed", "tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "numpy.random.seed", "open", "int", "test_VCOCO.get_blob", "line.rstrip", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "numpy.max", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "numpy.zeros", "[].astype", "blobs[].append", "blobs[].append", "numpy.max", "numpy.all", "numpy.array", "numpy.array", "ult.ult.Get_next_sp_with_pose"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.get_blob"], ["", "def", "obtain_data", "(", "Test_RCNN", ",", "prior_mask", ",", "Action_dic_inv", ",", "output_dir", ",", "object_thres", ",", "human_thres", ",", "prior_flag", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "\n", "def", "generator1", "(", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "i", "=", "0", "\n", "for", "line", "in", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'/v-coco/data/splits/vcoco_test.ids'", ",", "'r'", ")", ":", "\n", "# if i > 10:", "\n", "#     break", "\n", "            ", "i", "+=", "1", "\n", "\n", "image_id", "=", "int", "(", "line", ".", "rstrip", "(", ")", ")", "\n", "\n", "im_orig", ",", "im_shape", "=", "get_blob", "(", "image_id", ")", "\n", "# from skimage import transform", "\n", "# scale = 1", "\n", "# if scale != 1:", "\n", "#     im_orig = transform.resize(im_orig, [1, im_shape[0] * 2, im_shape[1] * 2, 1], preserve_range=True)", "\n", "\n", "blobs", "=", "{", "}", "\n", "blobs", "[", "'H_num'", "]", "=", "0", "\n", "blobs", "[", "'H_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'sp'", "]", "=", "[", "]", "\n", "blobs", "[", "'H_score'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_score'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_mask'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_cls'", "]", "=", "[", "]", "\n", "blobs", "[", "'pose_box'", "]", "=", "[", "]", "\n", "\n", "for", "Human_out", "in", "Test_RCNN", "[", "image_id", "]", ":", "\n", "                ", "if", "(", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", ">", "human_thres", ")", "and", "(", "Human_out", "[", "1", "]", "==", "'Human'", ")", ":", "# This is a valid human", "\n", "\n", "# Predict actrion using human appearance only", "\n", "# blobs['H_boxes'] = np.array(", "\n", "#     [0, Human_out[2][0], Human_out[2][1], Human_out[2][2], Human_out[2][3]]).reshape(1, 5)", "\n", "# prediction_H = net.test_image_H(sess, im_orig, blobs)", "\n", "\n", "                    ", "for", "Object", "in", "Test_RCNN", "[", "image_id", "]", ":", "\n", "                        ", "if", "(", "np", ".", "max", "(", "Object", "[", "5", "]", ")", ">", "object_thres", ")", "and", "not", "(", "\n", "np", ".", "all", "(", "Object", "[", "2", "]", "==", "Human_out", "[", "2", "]", ")", ")", ":", "# This is a valid object", "\n", "\n", "                            ", "blobs", "[", "'H_num'", "]", "+=", "1", "\n", "blobs", "[", "'O_boxes'", "]", ".", "append", "(", "\n", "np", ".", "array", "(", "[", "0", ",", "Object", "[", "2", "]", "[", "0", "]", ",", "Object", "[", "2", "]", "[", "1", "]", ",", "Object", "[", "2", "]", "[", "2", "]", ",", "Object", "[", "2", "]", "[", "3", "]", "]", ")", ")", "\n", "blobs", "[", "'H_score'", "]", ".", "append", "(", "Human_out", "[", "5", "]", ")", "\n", "blobs", "[", "'O_score'", "]", ".", "append", "(", "Object", "[", "5", "]", ")", "\n", "blobs", "[", "'H_boxes'", "]", ".", "append", "(", "np", ".", "array", "(", "\n", "[", "0", ",", "Human_out", "[", "2", "]", "[", "0", "]", ",", "Human_out", "[", "2", "]", "[", "1", "]", ",", "Human_out", "[", "2", "]", "[", "2", "]", ",", "Human_out", "[", "2", "]", "[", "3", "]", "]", ")", ")", "\n", "blobs", "[", "'sp'", "]", ".", "append", "(", "Get_next_sp_with_pose", "(", "Human_out", "[", "2", "]", ",", "Object", "[", "2", "]", ",", "Human_out", "[", "6", "]", ")", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "im_shape", "[", "0", "]", "//", "16", ",", "im_shape", "[", "1", "]", "//", "16", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "obj_box", "=", "blobs", "[", "'O_boxes'", "]", "[", "-", "1", "]", "[", "1", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "# print(obj_box)", "\n", "# print(obj_box, blobs['O_boxes'])", "\n", "# mask[obj_box[0]:obj_box[2], obj_box[1]:obj_box[3]] = 1", "\n", "# from skimage import transform", "\n", "# mask = transform.resize(mask, [im_shape[0] // 16, im_shape[1] // 16, 1], order=0,", "\n", "#                         preserve_range=True)", "\n", "blobs", "[", "'O_mask'", "]", ".", "append", "(", "mask", ")", "\n", "blobs", "[", "'O_cls'", "]", ".", "append", "(", "Object", "[", "4", "]", ")", "\n", "\n", "# There is only a single human detected in this image. I just ignore it. Might be better to add Nan as object box.", "\n", "", "", "", "if", "blobs", "[", "'H_num'", "]", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "yield", "im_orig", ",", "blobs", ",", "image_id", "\n", "blobs", "[", "'H_num'", "]", "=", "0", "\n", "blobs", "[", "'H_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'sp'", "]", "=", "[", "]", "\n", "blobs", "[", "'H_score'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_score'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_mask'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_cls'", "]", "=", "[", "]", "\n", "\n", "", "", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "generator1", ",", "output_types", "=", "(", "\n", "tf", ".", "float32", ",", "\n", "{", "'H_num'", ":", "tf", ".", "int32", ",", "'H_boxes'", ":", "tf", ".", "float32", ",", "'O_boxes'", ":", "tf", ".", "float32", ",", "'sp'", ":", "tf", ".", "float32", ",", "'O_mask'", ":", "tf", ".", "float32", ",", "\n", "'O_cls'", ":", "tf", ".", "float32", ",", "'H_score'", ":", "tf", ".", "float32", ",", "'O_score'", ":", "tf", ".", "float32", ",", "}", ",", "tf", ".", "int32", ",", ")", ",", "\n", "output_shapes", "=", "(", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "\n", "{", "'H_num'", ":", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "3", "]", ")", ",", "\n", "'O_mask'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "None", ",", "None", ",", "1", "]", ")", ",", "\n", "'O_cls'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'H_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'O_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "}", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ")", "\n", ")", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.repeat(100000)  # TODO improve", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "blobs", ",", "image_id", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "image", ",", "blobs", ",", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_VCOCO.test_net_data_api_21": [[522, 664], ["_t[].tic", "_t[].tic", "_t[].toc", "print", "pickle.dump", "print", "ult.timer.Timer", "ult.timer.Timer", "_t[].tic", "range", "_t[].toc", "print", "len", "open", "numpy.empty", "range", "range", "detection.append", "sess.run", "numpy.zeros", "numpy.asarray", "numpy.zeros", "numpy.asarray", "print", "sess.run", "numpy.asarray", "net.model_name.__contains__", "print", "int", "numpy.concatenate", "numpy.concatenate", "print", "numpy.argmax", "numpy.append", "print", "sess.run", "o_boxes_list[].reshape", "numpy.max", "numpy.max"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc"], ["", "def", "test_net_data_api_21", "(", "sess", ",", "net", ",", "Test_RCNN", ",", "prior_mask", ",", "Action_dic_inv", ",", "output_dir", ",", "\n", "object_thres", ",", "human_thres", ",", "prior_flag", ",", "blobs", ",", "image_id", ",", "img_orig", ")", ":", "\n", "    ", "detection", "=", "[", "]", "\n", "\n", "# prediction_HO  = net.test_image_HO(sess, im_orig, blobs)", "\n", "# timers", "\n", "_t", "=", "{", "'im_detect'", ":", "Timer", "(", ")", ",", "'misc'", ":", "Timer", "(", ")", "}", "\n", "last_img_id", "=", "-", "1", "\n", "count", "=", "0", "\n", "_t", "[", "'im_detect'", "]", ".", "tic", "(", ")", "\n", "_t", "[", "'misc'", "]", ".", "tic", "(", ")", "\n", "while", "True", ":", "\n", "        ", "_t", "[", "'im_detect'", "]", ".", "tic", "(", ")", "\n", "\n", "from", "tensorflow", ".", "python", ".", "framework", ".", "errors_impl", "import", "InvalidArgumentError", "\n", "try", ":", "\n", "\n", "# blobs = {}", "\n", "# blobs['H_num'] = 0", "\n", "# blobs['H_boxes'] = []", "\n", "# blobs['O_boxes'] = []", "\n", "# blobs['sp'] = []", "\n", "# blobs['H_score'] = []", "\n", "# blobs['O_score'] = []", "\n", "# blobs['O_mask'] = []", "\n", "# blobs['O_cls'] = []", "\n", "            ", "if", "'cls_prob_H'", "in", "net", ".", "predictions", ":", "\n", "                ", "prediction_H", ",", "prediction_HO", ",", "_blobs", ",", "_image_id", ",", "_img_orig", "=", "sess", ".", "run", "(", "[", "\n", "net", ".", "predictions", "[", "\"cls_prob_H\"", "]", ",", "net", ".", "predictions", "[", "\"cls_prob_HO\"", "]", ",", "blobs", ",", "image_id", ",", "img_orig", "]", ")", "\n", "# remove 3, 17 22, 23 27", "\n", "tmp", "=", "np", ".", "zeros", "(", "[", "prediction_HO", ".", "shape", "[", "0", "]", ",", "29", "]", ")", "\n", "tmp", "[", ":", ",", "0", ":", "3", "]", "=", "prediction_HO", "[", ":", ",", "0", ":", "3", "]", "\n", "tmp", "[", ":", ",", "4", ":", "17", "]", "=", "prediction_HO", "[", ":", ",", "3", ":", "16", "]", "\n", "tmp", "[", ":", ",", "18", ":", "22", "]", "=", "prediction_HO", "[", ":", ",", "16", ":", "19", "]", "\n", "tmp", "[", ":", ",", "24", ":", "27", "]", "=", "prediction_HO", "[", ":", ",", "20", ":", "23", "]", "\n", "tmp", "[", ":", ",", "28", ":", "29", "]", "=", "prediction_HO", "[", ":", ",", "23", ":", "24", "]", "\n", "prediction_HO", "=", "np", ".", "asarray", "(", "[", "tmp", "]", ")", "\n", "\n", "tmp", "=", "np", ".", "zeros", "(", "[", "prediction_H", ".", "shape", "[", "0", "]", ",", "29", "]", ")", "\n", "tmp", "[", ":", ",", "0", ":", "3", "]", "=", "prediction_H", "[", ":", ",", "0", ":", "3", "]", "\n", "tmp", "[", ":", ",", "4", ":", "17", "]", "=", "prediction_H", "[", ":", ",", "3", ":", "16", "]", "\n", "tmp", "[", ":", ",", "18", ":", "22", "]", "=", "prediction_H", "[", ":", ",", "16", ":", "19", "]", "\n", "tmp", "[", ":", ",", "24", ":", "27", "]", "=", "prediction_H", "[", ":", ",", "20", ":", "23", "]", "\n", "tmp", "[", ":", ",", "28", ":", "29", "]", "=", "prediction_H", "[", ":", ",", "23", ":", "24", "]", "\n", "\n", "prediction_H", "=", "np", ".", "asarray", "(", "[", "tmp", "]", ")", "\n", "# prediction_H = None", "\n", "# print(\"yes prob H\")", "\n", "print", "(", "prediction_HO", ".", "shape", ",", "prediction_H", ".", "shape", ")", "\n", "", "else", ":", "\n", "                ", "prediction_HO", ",", "_blobs", ",", "_image_id", ",", "_img_orig", "=", "sess", ".", "run", "(", "\n", "[", "net", ".", "predictions", "[", "\"cls_prob_HO\"", "]", ",", "blobs", ",", "image_id", ",", "img_orig", "]", ")", "\n", "prediction_H", "=", "None", "\n", "# tmp = np.zeros([prediction_HO.shape[0], 29])", "\n", "# tmp[:, 0:3] = prediction_HO[:, 0:3]", "\n", "# tmp[:, 4:17] = prediction_HO[:, 3:16]", "\n", "# tmp[:, 18:22] = prediction_HO[:, 16:20]", "\n", "# tmp[:, 24:27] = prediction_HO[:, 20:23]", "\n", "# tmp[:, 28:29] = prediction_HO[:, 23:24]", "\n", "prediction_HO", "=", "np", ".", "asarray", "(", "[", "prediction_HO", "]", ")", "\n", "\n", "\n", "", "", "except", "InvalidArgumentError", "as", "e", ":", "\n", "# cls_prob_HO = np.zeros(shape=[blobs['sp'].shape[0], self.num_classes])", "\n", "            ", "if", "net", ".", "model_name", ".", "__contains__", "(", "'lamb'", ")", ":", "\n", "                ", "print", "(", "'InvalidArgumentError'", ",", "sess", ".", "run", "(", "[", "_image_id", "]", ")", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "raise", "e", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "print", "(", "'END'", ")", "\n", "break", "\n", "\n", "", "start", "=", "0", "\n", "# print(_blobs['H_num'], prediction_HO[0].shape)", "\n", "for", "j", "in", "range", "(", "_blobs", "[", "'H_num'", "]", "+", "1", ")", ":", "\n", "            ", "if", "j", "<", "_blobs", "[", "'H_num'", "]", "and", "(", "_blobs", "[", "'H_boxes'", "]", "[", "j", "]", "==", "_blobs", "[", "'H_boxes'", "]", "[", "start", "]", ")", ".", "all", "(", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "h_score", "=", "_blobs", "[", "'H_score'", "]", "[", "start", "]", "\n", "h_boxes", "=", "_blobs", "[", "'H_boxes'", "]", "[", "start", "]", "\n", "\n", "o_boxes_list", "=", "_blobs", "[", "'O_boxes'", "]", "\n", "o_score_list", "=", "_blobs", "[", "'O_score'", "]", "\n", "o_cls_list", "=", "_blobs", "[", "'O_cls'", "]", "\n", "\n", "# Predict actrion using human and object appearance", "\n", "Score_obj", "=", "np", ".", "empty", "(", "(", "0", ",", "4", "+", "222", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# save image information", "\n", "dic", "=", "{", "}", "\n", "dic", "[", "'image_id'", "]", "=", "_image_id", "\n", "dic", "[", "'person_box'", "]", "=", "h_boxes", "[", "1", ":", "]", "\n", "for", "i", "in", "range", "(", "start", ",", "j", ")", ":", "\n", "                ", "h_score", "=", "_blobs", "[", "'H_score'", "]", "[", "i", "]", "\n", "\n", "object_score", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "object_score", "[", "4", "]", "=", "o_cls_list", "[", "i", "]", "\n", "# print(prediction_HO.shape, i, prediction_HO.dtype, _blobs['O_cls'])", "\n", "tmp_prediction_HO", "=", "prediction_HO", "[", "0", ":", ",", "i", ":", "i", "+", "1", "]", "\n", "obj_cls", "=", "int", "(", "_blobs", "[", "'O_cls'", "]", "[", "i", "]", ")", "\n", "# print(o_boxes_list[i:i+1, 1:].reshape(1, 4).shape, (tmp_prediction_HO* np.max(o_score_list[i])).shape, np.max(o_score_list[i]).shape)", "\n", "This_Score_obj", "=", "np", ".", "concatenate", "(", "\n", "(", "o_boxes_list", "[", "i", ":", "i", "+", "1", ",", "1", ":", "]", ".", "reshape", "(", "1", ",", "4", ")", ",", "tmp_prediction_HO", "[", "0", "]", "*", "np", ".", "max", "(", "o_score_list", "[", "i", "]", ")", ")", ",", "\n", "axis", "=", "1", ")", "\n", "# print(This_Score_obj.shape, Score_obj.shape)", "\n", "Score_obj", "=", "np", ".", "concatenate", "(", "(", "Score_obj", ",", "This_Score_obj", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "start", "=", "j", "\n", "# There is only a single human detected in this image. I just ignore it. Might be better to add Nan as object box.", "\n", "if", "Score_obj", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "print", "(", "'no obj box'", ",", "j", ",", "start", ")", "\n", "continue", "\n", "\n", "# Find out the object box associated with highest action score", "\n", "", "max_idx", "=", "np", ".", "argmax", "(", "Score_obj", ",", "0", ")", "[", "4", ":", "]", "\n", "\n", "\n", "# role mAP", "\n", "for", "i", "in", "range", "(", "222", ")", ":", "\n", "                ", "dic", "[", "i", "]", "=", "np", ".", "append", "(", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", ":", "4", "]", ",", "np", ".", "max", "(", "h_score", ")", "*", "Score_obj", "[", "max_idx", "[", "i", "]", "]", "[", "4", "+", "i", "]", ")", "\n", "# import ipdb", "\n", "# ipdb.set_trace()", "\n", "", "detection", ".", "append", "(", "dic", ")", "\n", "\n", "", "_t", "[", "'im_detect'", "]", ".", "toc", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "print", "(", "'\\rmodel: {} im_detect: {:d}/{:d}  {:d}, {:.3f}s'", ".", "format", "(", "net", ".", "model_name", ",", "count", ",", "15765", ",", "_image_id", ",", "\n", "_t", "[", "'im_detect'", "]", ".", "average_time", ")", ",", "end", "=", "''", ",", "\n", "flush", "=", "True", ")", "\n", "# if count >= 100:", "\n", "#     break", "\n", "\n", "# TODO remove", "\n", "# pickle.dump(detection, open('test_new.pkl', 'wb'))", "\n", "", "_t", "[", "'misc'", "]", ".", "toc", "(", ")", "\n", "print", "(", "'dump detection'", ",", "len", "(", "detection", ")", ",", "_t", "[", "'misc'", "]", ".", "average_time", ")", "\n", "import", "copy", "\n", "# a = copy.deepcopy(detection)", "\n", "# print(detection)", "\n", "pickle", ".", "dump", "(", "detection", ",", "open", "(", "output_dir", ",", "\"wb\"", ")", ")", "\n", "print", "(", "'dump sucessfully'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.__init__": [[28, 39], ["models.train_Solver_HICO.SolverWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1.__init__"], ["def", "__init__", "(", "self", ",", "sess", ",", "network", ",", "output_dir", ",", "tbdir", ",", "Restore_flag", ",", "pretrained_model", ")", ":", "\n", "        ", "super", "(", "SolverWrapperMultiBatch", ",", "self", ")", ".", "__init__", "(", "sess", ",", "network", ",", "None", ",", "None", ",", "output_dir", ",", "tbdir", ",", "None", ",", "None", ",", "Restore_flag", ",", "pretrained_model", ")", "\n", "\n", "self", ".", "image", "=", "None", "\n", "\n", "self", ".", "image_id", "=", "None", "\n", "self", ".", "spatial", "=", "None", "\n", "self", ".", "H_boxes", "=", "None", "\n", "self", ".", "O_boxes", "=", "None", "\n", "self", ".", "gt_class_HO", "=", "None", "\n", "self", ".", "H_num", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.set_data": [[40, 48], ["None"], "methods", ["None"], ["", "def", "set_data", "(", "self", ",", "image", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "sp", ")", ":", "\n", "        ", "self", ".", "image", "=", "image", "\n", "self", ".", "image_id", "=", "image_id", "\n", "self", ".", "spatial", "=", "sp", "\n", "self", ".", "H_boxes", "=", "Human_augmented", "\n", "self", ".", "O_boxes", "=", "Object_augmented", "\n", "self", ".", "gt_class_HO", "=", "action_HO", "\n", "self", ".", "H_num", "=", "num_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.construct_graph": [[49, 136], ["print", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.compose_feature_helper.get_compose_type", "sess.graph.as_default", "tensorflow.set_random_seed", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.get_init_step", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.get_step_factor", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.get_optimzer_lr", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.net.create_architecture", "tower_losses.append", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.optimizer.compute_gradients", "tower_grads.append", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.optimizer.apply_gradients", "tensorflow.summary.scalar", "tensorflow.summary.merge_all", "tensorflow.train.Saver", "tensorflow.summary.FileWriter", "tensorflow.reduce_sum", "tensorflow.variable_scope", "tensorflow.get_variable", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.net.model_name.__contains__", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.net.model_name.__contains__", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.net.model_name.__contains__", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.compose_feature_helper.get_ll", "tower_losses.append", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.net.model_name.__contains__", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.net.model_name.__contains__", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.get_classifier_variables", "tensorflow.trainable_variables", "tensorflow.reduce_sum", "print", "tensorflow.multiply", "print", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.compose_feature_helper.merge_generate", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.net.model_name.__contains__", "tensorflow.clip_by_norm", "tensorflow.constant_initializer", "tensorflow.expand_dims", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.compose_feature_helper.merge_generate", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.compose_feature_helper.merge_generate", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.net.get_compose_num_stop", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.net.get_compose_num_stop", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.net.get_compose_num_stop", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.net.get_compose_num_stop", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.net.get_compose_num_stop", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.net.get_compose_num_stop"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.get_compose_type", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_init_step", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_step_factor", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_optimzer_lr", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.create_architecture", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.get_ll", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO.SolverWrapper.get_classifier_variables", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.merge_generate", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.merge_generate", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.merge_generate", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop"], ["", "def", "construct_graph", "(", "self", ",", "sess", ")", ":", "\n", "        ", "print", "(", "\"construct_graph\"", ")", "\n", "compose_type", "=", "self", ".", "compose_feature_helper", ".", "get_compose_type", "(", ")", "\n", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "# Set the random seed for tensorflow", "\n", "            ", "tf", ".", "set_random_seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "\n", "init_step", "=", "self", ".", "get_init_step", "(", ")", "\n", "\n", "# global_step = tf.Variable(init_step, trainable=False, name='global_step')", "\n", "with", "tf", ".", "variable_scope", "(", "'tmp'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "                ", "global_step", "=", "tf", ".", "get_variable", "(", "'global_step'", ",", "shape", "=", "(", ")", ",", "trainable", "=", "False", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ")", "\n", "\n", "", "step_factor", "=", "self", ".", "get_step_factor", "(", ")", "\n", "\n", "lr", ",", "self", ".", "optimizer", "=", "self", ".", "get_optimzer_lr", "(", "global_step", ",", "step_factor", ")", "\n", "\n", "tower_grads", "=", "[", "]", "\n", "tower_losses", "=", "[", "]", "\n", "\n", "\n", "# Build the main computation graph", "\n", "layers", "=", "self", ".", "net", ".", "create_architecture", "(", "True", ")", "# is_training flag: True", "\n", "\n", "# Define the loss", "\n", "loss", "=", "layers", "[", "'total_loss'", "]", "\n", "tower_losses", ".", "append", "(", "loss", ")", "\n", "if", "not", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'base'", ")", ":", "\n", "                ", "semi_filter", "=", "tf", ".", "reduce_sum", "(", "self", ".", "H_boxes", "[", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", ",", "1", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "semi_filter", "=", "tf", ".", "cast", "(", "semi_filter", ",", "tf", ".", "bool", ")", "\n", "verb_feats", "=", "self", ".", "net", ".", "intermediate", "[", "'fc7_verbs'", "]", "\n", "semi_filter", "=", "tf", ".", "cast", "(", "semi_filter", ",", "tf", ".", "float32", ")", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'atl1'", ")", ":", "\n", "                    ", "verb_feats", "=", "tf", ".", "multiply", "(", "verb_feats", ",", "tf", ".", "expand_dims", "(", "semi_filter", ",", "axis", "=", "-", "1", ")", ")", "# remove semi data", "\n", "print", "(", "'============'", ",", "verb_feats", ")", "\n", "", "O_features", "=", "[", "self", ".", "net", ".", "intermediate", "[", "'fc7_O'", "]", "[", ":", "self", ".", "net", ".", "pos1_idx", "]", ",", "\n", "self", ".", "net", ".", "intermediate", "[", "'fc7_O'", "]", "[", "self", ".", "net", ".", "pos1_idx", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", "]", "\n", "V_features", "=", "[", "verb_feats", "[", ":", "self", ".", "net", ".", "pos1_idx", "]", ",", "\n", "verb_feats", "[", "self", ".", "net", ".", "pos1_idx", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", "]", "\n", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'atl1'", ")", ":", "\n", "                    ", "new_loss", "=", "self", ".", "compose_feature_helper", ".", "merge_generate", "(", "O_features", ",", "\n", "V_features", ",", "\n", "[", "self", ".", "gt_class_HO", "[", ":", "self", ".", "net", ".", "pos1_idx", "]", ",", "\n", "self", ".", "gt_class_HO", "[", "\n", "self", ".", "net", ".", "pos1_idx", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", "]", ",", "\n", "compose_type", ")", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'atl'", ")", ":", "\n", "                    ", "new_loss", "=", "self", ".", "compose_feature_helper", ".", "merge_generate", "(", "O_features", ",", "\n", "V_features", ",", "\n", "[", "self", ".", "gt_class_HO", "[", ":", "self", ".", "net", ".", "pos1_idx", "]", ",", "self", ".", "gt_class_HO", "[", "self", ".", "net", ".", "pos1_idx", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", "]", ",", "\n", "'atl'", ")", "\n", "", "else", ":", "\n", "                    ", "new_loss", "=", "self", ".", "compose_feature_helper", ".", "merge_generate", "(", "O_features", ",", "\n", "V_features", ",", "\n", "[", "self", ".", "gt_class_HO", "[", ":", "self", ".", "net", ".", "pos1_idx", "]", ",", "self", ".", "gt_class_HO", "[", "self", ".", "net", ".", "pos1_idx", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", "]", ",", "\n", "compose_type", ")", "\n", "", "ll", "=", "self", ".", "compose_feature_helper", ".", "get_ll", "(", ")", "\n", "tower_losses", ".", "append", "(", "new_loss", "*", "ll", ")", "\n", "", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'pret'", ")", "and", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'classifier'", ")", ":", "\n", "                ", "variables", "=", "self", ".", "get_classifier_variables", "(", ")", "\n", "", "else", ":", "\n", "                ", "variables", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "tf", ".", "reduce_sum", "(", "tower_losses", ")", ",", "variables", ")", "\n", "tower_grads", ".", "append", "(", "grads_and_vars", ")", "\n", "# with tf.device('/gpu:%d' % 0):", "\n", "#     new_loss = self.merge_generate(O_features, V_features)", "\n", "#     tower_losses.append(new_loss)", "\n", "#     variables = tf.trainable_variables()", "\n", "#     grads_and_vars = self.optimizer.compute_gradients(new_loss, variables)", "\n", "#     tower_grads.append(grads_and_vars)", "\n", "#", "\n", "#     print('length of grads:', len(tower_grads))", "\n", "# grads_and_vars = self.average_gradients(tower_grads)", "\n", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "1.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "grads_and_vars", "if", "grad", "is", "not", "None", "]", "\n", "\n", "# self.addition_loss(capped_gvs, layers)", "\n", "\n", "for", "grad", ",", "var", "in", "capped_gvs", ":", "\n", "                ", "print", "(", "'update: {}'", ".", "format", "(", "var", ".", "name", ")", ")", "\n", "", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ",", "global_step", "=", "global_step", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'lr'", ",", "lr", ")", "\n", "self", ".", "net", ".", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_KEPT", ")", "\n", "# Write the train and validation information to tensorboard", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "tbdir", ",", "sess", ".", "graph", ")", "\n", "", "return", "lr", ",", "train_op", ",", "tf", ".", "reduce_sum", "(", "tower_losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.train_model": [[138, 188], ["train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.construct_graph", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.from_snapshot", "sess.graph.finalize", "ult.timer.Timer", "logging.basicConfig", "logging.getLogger", "logging.getLogger.setLevel", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.get_init_step", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.writer.close", "ult.timer.Timer.tic", "ult.timer.Timer.toc", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.snapshot", "sess.run", "train_Solver_HICO_MultiBatch.SolverWrapperMultiBatch.writer.add_summary", "sess.run", "logging.getLogger.info", "float", "type", "lr.eval", "type", "len"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.construct_graph", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.from_snapshot", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_init_step", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.snapshot"], ["", "def", "train_model", "(", "self", ",", "sess", ",", "max_iters", ")", ":", "\n", "        ", "lr", ",", "train_op", ",", "t_loss", "=", "self", ".", "construct_graph", "(", "sess", ")", "\n", "self", ".", "from_snapshot", "(", "sess", ")", "\n", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "timer", "=", "Timer", "(", ")", "\n", "import", "logging", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "'/home/zhou9878/{}.log'", ".", "format", "(", "self", ".", "net", ".", "model_name", ")", ",", "level", "=", "logging", ".", "INFO", ",", "format", "=", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "iter", "=", "self", ".", "get_init_step", "(", ")", "\n", "while", "iter", "<", "max_iters", "+", "1", ":", "\n", "            ", "timer", ".", "tic", "(", ")", "\n", "if", "(", "iter", "%", "cfg", ".", "TRAIN", ".", "SUMMARY_INTERVAL", "==", "0", ")", "or", "(", "iter", "<", "20", ")", ":", "\n", "\n", "# Compute the graph with summary", "\n", "# total_loss, image_id, summary = self.net.train_step_tfr_with_summary(sess, blobs, lr, train_op)", "\n", "                ", "total_loss", ",", "summary", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "t_loss", ",", "\n", "self", ".", "net", ".", "summary_op", ",", "self", ".", "net", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "# total_loss, summary = self.net.train_step_with_summary(sess, blobs, lr.eval(), train_op)", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "iter", ")", ")", "\n", "\n", "", "else", ":", "\n", "# Compute the graph without summary", "\n", "                ", "total_loss", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "t_loss", ",", "self", ".", "net", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "# total_loss, image_id = self.net.train_step_tfr(sess, blobs, lr, train_op)", "\n", "\n", "", "timer", ".", "toc", "(", ")", "\n", "# print(image_id)", "\n", "# Display training information", "\n", "if", "iter", "%", "(", "cfg", ".", "TRAIN", ".", "DISPLAY", ")", "==", "0", ":", "\n", "                ", "if", "type", "(", "image_id", ")", "==", "tuple", "or", "(", "type", "(", "image_id", ")", "!=", "np", ".", "int32", "and", "len", "(", "image_id", ")", ">", "1", ")", ":", "\n", "                    ", "image_id", "=", "image_id", "[", "0", "]", "\n", "# print('iter: {:d} / {:d}, im_id: {:d}, total loss: {:.6f}, lr: {:f}, speed: {:.3f} s/iter'.format(", "\n", "#       iter, max_iters, image_id, total_loss, lr.eval(), timer.average_time), end='\\n', flush=True)", "\n", "", "logger", ".", "info", "(", "'iter: {:d} / {:d}, im_id: {:d}, total loss: {:.6f}, lr: {:f}, speed: {:.3f} s/iter'", ".", "format", "(", "\n", "iter", ",", "max_iters", ",", "image_id", ",", "total_loss", ",", "lr", ".", "eval", "(", ")", ",", "timer", ".", "average_time", ")", ")", "\n", "# print('\\rmodel: {} im_detect: {:d}/{:d}  {:d}, {:.3f}s'.format(net.model_name, count, 15765, _image_id,", "\n", "#                                                                _t['im_detect'].average_time), end='',", "\n", "#       flush=True)", "\n", "# Snapshotting", "\n", "\n", "", "self", ".", "snapshot", "(", "sess", ",", "iter", ")", "\n", "\n", "iter", "+=", "1", "\n", "\n", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.__init__": [[33, 45], ["models.train_Solver_HICO.SolverWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1.__init__"], ["def", "__init__", "(", "self", ",", "sess", ",", "network", ",", "output_dir", ",", "tbdir", ",", "Restore_flag", ",", "pretrained_model", ")", ":", "\n", "        ", "super", "(", "SolverWrapperMultiBatchFCL", ",", "self", ")", ".", "__init__", "(", "sess", ",", "network", ",", "None", ",", "None", ",", "output_dir", ",", "tbdir", ",", "None", ",", "None", ",", "\n", "Restore_flag", ",", "pretrained_model", ")", "\n", "\n", "self", ".", "image", "=", "None", "\n", "\n", "self", ".", "image_id", "=", "None", "\n", "self", ".", "spatial", "=", "None", "\n", "self", ".", "H_boxes", "=", "None", "\n", "self", ".", "O_boxes", "=", "None", "\n", "self", ".", "gt_class_HO", "=", "None", "\n", "self", ".", "H_num", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.set_data": [[46, 54], ["None"], "methods", ["None"], ["", "def", "set_data", "(", "self", ",", "image", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "sp", ")", ":", "\n", "        ", "self", ".", "image", "=", "image", "\n", "self", ".", "image_id", "=", "image_id", "\n", "self", ".", "spatial", "=", "sp", "\n", "self", ".", "H_boxes", "=", "Human_augmented", "\n", "self", ".", "O_boxes", "=", "Object_augmented", "\n", "self", ".", "gt_class_HO", "=", "action_HO", "\n", "self", ".", "H_num", "=", "num_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.construct_graph": [[55, 162], ["print", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.compose_feature_helper.get_compose_type", "sess.graph.as_default", "tensorflow.set_random_seed", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.get_init_step", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.get_step_factor", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.get_optimzer_lr", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.get_optimzer_lr", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.create_architecture", "num_stop_list.append", "tower_losses.append", "print", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.model_name.__contains__", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.optimizer.compute_gradients", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.optimizer_g.compute_gradients", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.optimizer.apply_gradients", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.optimizer_g.apply_gradients", "tensorflow.summary.scalar", "tensorflow.summary.merge_all", "tensorflow.train.Saver", "tensorflow.summary.FileWriter", "tensorflow.reduce_sum", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.get_compose_num_stop", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.model_name.__contains__", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.model_name.__contains__", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.model_name.__contains__", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.compose_feature_helper.get_ll", "tower_losses.append", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.Print", "print", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.compose_feature_helper.merge_generate", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.model_name.__contains__", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "v.name.__contains__", "tensorflow.clip_by_norm", "tensorflow.clip_by_norm", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.expand_dims", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.compose_feature_helper.merge_generate", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.compose_feature_helper.merge_generate", "tensorflow.trainable_variables", "tensorflow.reduce_sum", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.get_compose_num_stop", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.get_compose_num_stop", "v.name.__contains__", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.get_compose_num_stop", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.get_compose_num_stop", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.get_compose_num_stop", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.get_compose_num_stop"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.get_compose_type", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_init_step", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_step_factor", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_optimzer_lr", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_optimzer_lr", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.create_architecture", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.get_ll", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.merge_generate", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.merge_generate", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.merge_generate", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop"], ["", "def", "construct_graph", "(", "self", ",", "sess", ")", ":", "\n", "        ", "print", "(", "\"construct_graph, SolverWrapperMultiBatchFCL\"", ")", "\n", "compose_type", "=", "self", ".", "compose_feature_helper", ".", "get_compose_type", "(", ")", "\n", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "# Set the random seed for tensorflow", "\n", "            ", "tf", ".", "set_random_seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "\n", "init_step", "=", "self", ".", "get_init_step", "(", ")", "\n", "\n", "step_factor", "=", "self", ".", "get_step_factor", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'tmp'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "                ", "global_step", "=", "tf", ".", "get_variable", "(", "'global_step'", ",", "shape", "=", "(", ")", ",", "trainable", "=", "False", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ")", "\n", "global_step1", "=", "tf", ".", "get_variable", "(", "'global_step1'", ",", "shape", "=", "(", ")", ",", "trainable", "=", "False", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ")", "\n", "\n", "", "lr", ",", "self", ".", "optimizer", "=", "self", ".", "get_optimzer_lr", "(", "global_step", ",", "step_factor", ")", "\n", "lr1", ",", "self", ".", "optimizer_g", "=", "self", ".", "get_optimzer_lr", "(", "global_step1", ",", "step_factor", ")", "\n", "# self.optimizer_d = tf.train.AdamOptimizer()", "\n", "tower_grads", "=", "[", "]", "\n", "num_stop_list", "=", "[", "]", "\n", "tower_losses", "=", "[", "]", "\n", "fake_tower_losses", "=", "[", "]", "\n", "\n", "# Build the main computation graph", "\n", "layers", "=", "self", ".", "net", ".", "create_architecture", "(", "True", ")", "# is_training flag: True", "\n", "\n", "num_stop_list", ".", "append", "(", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", ")", "\n", "# Define the loss", "\n", "loss", "=", "layers", "[", "'total_loss'", "]", "+", "layers", "[", "'fake_total_loss'", "]", "\n", "fake_loss", "=", "layers", "[", "'fake_G_total_loss'", "]", "\n", "tower_losses", ".", "append", "(", "loss", ")", "\n", "# fake_tower_losses.append(fake_loss)", "\n", "# variables = tf.trainable_variables()", "\n", "# grads_and_vars = self.optimizer.compute_gradients(loss, variables)", "\n", "# tower_grads.append(grads_and_vars)", "\n", "\n", "print", "(", "'compose learning ====================================== batch'", ",", "compose_type", ")", "\n", "\n", "if", "not", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_base'", ")", ":", "\n", "                ", "semi_filter", "=", "tf", ".", "reduce_sum", "(", "self", ".", "H_boxes", "[", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", ",", "1", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "semi_filter", "=", "tf", ".", "cast", "(", "semi_filter", ",", "tf", ".", "bool", ")", "\n", "\n", "verb_feats", "=", "self", ".", "net", ".", "intermediate", "[", "'fc7_verbs'", "]", "\n", "semi_filter", "=", "tf", ".", "cast", "(", "semi_filter", ",", "tf", ".", "float32", ")", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'atl1'", ")", ":", "\n", "                    ", "verb_feats", "=", "tf", ".", "multiply", "(", "verb_feats", ",", "tf", ".", "expand_dims", "(", "semi_filter", ",", "axis", "=", "-", "1", ")", ")", "# remove semi data", "\n", "verb_feats", "=", "tf", ".", "Print", "(", "verb_feats", ",", "[", "tf", ".", "reduce_sum", "(", "verb_feats", ",", "axis", "=", "-", "1", ")", "]", ",", "'message semi1===='", ",", "\n", "summarize", "=", "10000", ",", "\n", "first_n", "=", "100", ")", "\n", "print", "(", "'============'", ",", "verb_feats", ")", "\n", "", "O_features", "=", "[", "self", ".", "net", ".", "intermediate", "[", "'fc7_O'", "]", "[", ":", "self", ".", "net", ".", "pos1_idx", "]", ",", "\n", "self", ".", "net", ".", "intermediate", "[", "'fc7_O'", "]", "[", "self", ".", "net", ".", "pos1_idx", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", "]", "\n", "V_features", "=", "[", "verb_feats", "[", ":", "self", ".", "net", ".", "pos1_idx", "]", ",", "\n", "verb_feats", "[", "self", ".", "net", ".", "pos1_idx", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", "]", "\n", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'atl1'", ")", ":", "\n", "                    ", "new_loss", "=", "self", ".", "compose_feature_helper", ".", "merge_generate", "(", "O_features", ",", "\n", "V_features", ",", "\n", "[", "self", ".", "gt_class_HO", "[", ":", "self", ".", "net", ".", "pos1_idx", "]", ",", "\n", "self", ".", "gt_class_HO", "[", "\n", "self", ".", "net", ".", "pos1_idx", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", "]", ",", "\n", "compose_type", ")", "\n", "new_loss", "=", "new_loss", "[", "'vcl_loss'", "]", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'atl'", ")", ":", "\n", "                    ", "new_loss", "=", "self", ".", "compose_feature_helper", ".", "merge_generate", "(", "O_features", ",", "\n", "V_features", ",", "\n", "[", "self", ".", "gt_class_HO", "[", ":", "self", ".", "net", ".", "pos1_idx", "]", ",", "\n", "self", ".", "gt_class_HO", "[", "\n", "self", ".", "net", ".", "pos1_idx", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", "]", ",", "\n", "'semi'", ")", "\n", "new_loss", "=", "new_loss", "[", "'vcl_loss'", "]", "\n", "", "else", ":", "\n", "                    ", "new_loss", "=", "self", ".", "compose_feature_helper", ".", "merge_generate", "(", "O_features", ",", "\n", "V_features", ",", "\n", "[", "self", ".", "gt_class_HO", "[", ":", "self", ".", "net", ".", "pos1_idx", "]", ",", "\n", "self", ".", "gt_class_HO", "[", "\n", "self", ".", "net", ".", "pos1_idx", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", "]", ",", "\n", "compose_type", ")", "\n", "new_loss", "=", "new_loss", "[", "'vcl_loss'", "]", "\n", "", "ll", "=", "self", ".", "compose_feature_helper", ".", "get_ll", "(", ")", "\n", "tower_losses", ".", "append", "(", "new_loss", "*", "ll", ")", "\n", "", "variables", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "]", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'epic3'", ")", ":", "\n", "                ", "variables", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "if", "not", "v", ".", "name", ".", "__contains__", "(", "'generator'", ")", "]", "\n", "", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "tf", ".", "reduce_sum", "(", "tower_losses", ")", ",", "variables", ")", "\n", "\n", "g_update_variables", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "if", "\n", "v", ".", "name", ".", "__contains__", "(", "'generator'", ")", "]", "\n", "\n", "g_grads_and_vars", "=", "self", ".", "optimizer_g", ".", "compute_gradients", "(", "fake_loss", ",", "g_update_variables", ")", "\n", "\n", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "1.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "grads_and_vars", "if", "grad", "is", "not", "None", "]", "\n", "g_capped_gvs", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "1.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "g_grads_and_vars", "if", "grad", "is", "not", "None", "]", "\n", "\n", "# self.addition_loss(capped_gvs, layers)", "\n", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ",", "global_step", "=", "global_step", ")", "\n", "train_op_g", "=", "self", ".", "optimizer_g", ".", "apply_gradients", "(", "g_capped_gvs", ",", "global_step", "=", "global_step1", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'lr'", ",", "lr", ")", "\n", "# tf.summary.scalar('merge_loss', new_loss)", "\n", "self", ".", "net", ".", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_KEPT", ")", "\n", "# Write the train and validation information to tensorboard", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "tbdir", ",", "sess", ".", "graph", ")", "\n", "", "return", "lr", ",", "train_op", ",", "tf", ".", "reduce_sum", "(", "tower_losses", ")", ",", "train_op_g", ",", "fake_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.train_model_stepwise_inner": [[163, 228], ["timer.tic", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.model_name.__contains__", "ult.ult.get_epoch_iters", "timer.toc", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.snapshot", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.model_name.__contains__", "print", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.model_name.__contains__", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.model_name.__contains__", "sess.run", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.writer.add_summary", "sess.run", "sess.run", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.writer.add_summary", "sess.run", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.net.model_name.__contains__", "float", "float", "lr.eval"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_epoch_iters", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.snapshot"], ["", "def", "train_model_stepwise_inner", "(", "self", ",", "D_loss", ",", "g_loss", ",", "iter", ",", "lr", ",", "max_iters", ",", "sess", ",", "timer", ",", "train_op", ",", "train_op_g", ")", ":", "\n", "        ", "while", "iter", "<", "max_iters", "+", "1", ":", "\n", "            ", "timer", ".", "tic", "(", ")", "\n", "\n", "total_loss", "=", "0", "\n", "fake_total_loss", "=", "0", "\n", "#", "\n", "save_iters", "=", "50000", "\n", "epoch_stride", "=", "5", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_s3_'", ")", ":", "\n", "                ", "epoch_stride", "=", "3", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_s1_'", ")", ":", "\n", "                ", "epoch_stride", "=", "1", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_s05_'", ")", ":", "\n", "                ", "epoch_stride", "=", "0.5", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_s0_'", ")", ":", "\n", "                ", "epoch_stride", "=", "0", "\n", "", "save_iters", "=", "get_epoch_iters", "(", "self", ".", "net", ".", "model_name", ")", "\n", "if", "iter", "<", "save_iters", "*", "epoch_stride", "and", "not", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_reload'", ")", ":", "\n", "                ", "if", "(", "iter", "%", "cfg", ".", "TRAIN", ".", "SUMMARY_INTERVAL", "==", "0", ")", "or", "(", "iter", "<", "20", ")", ":", "\n", "# Compute the graph with summary", "\n", "                    ", "fake_total_loss", ",", "_", ",", "summary", ",", "image_id", "=", "sess", ".", "run", "(", "\n", "[", "g_loss", ",", "train_op_g", ",", "self", ".", "net", ".", "summary_op", ",", "self", ".", "net", ".", "image_id", ",", "]", ")", "\n", "\n", "# total_loss, summary = self.net.train_step_with_summary(sess, blobs, lr.eval(), train_op)", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "iter", ")", ")", "\n", "", "else", ":", "\n", "# Compute the graph without summary", "\n", "                    ", "fake_total_loss", ",", "_", ",", "image_id", "=", "sess", ".", "run", "(", "[", "g_loss", ",", "train_op_g", ",", "self", ".", "net", ".", "image_id", ",", "]", ")", "\n", "", "if", "iter", "+", "1", "==", "save_iters", "*", "epoch_stride", ":", "\n", "                    ", "iter", "=", "save_iters", "-", "1", "\n", "", "", "else", ":", "\n", "                ", "if", "(", "iter", "%", "cfg", ".", "TRAIN", ".", "SUMMARY_INTERVAL", "==", "0", ")", "or", "(", "iter", "<", "20", ")", ":", "\n", "\n", "# Compute the graph with summary", "\n", "                    ", "total_loss", ",", "_", ",", "summary", ",", "image_id", "=", "sess", ".", "run", "(", "\n", "[", "D_loss", ",", "train_op", ",", "self", ".", "net", ".", "summary_op", ",", "self", ".", "net", ".", "image_id", ",", "]", ")", "\n", "\n", "# total_loss, summary = self.net.train_step_with_summary(sess, blobs, lr.eval(), train_op)", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "iter", ")", ")", "\n", "\n", "", "else", ":", "\n", "# Compute the graph without summary", "\n", "                    ", "total_loss", ",", "_", ",", "image_id", "=", "sess", ".", "run", "(", "[", "D_loss", ",", "train_op", ",", "self", ".", "net", ".", "image_id", ",", "]", ")", "\n", "\n", "", "", "timer", ".", "toc", "(", ")", "\n", "# print(image_id)", "\n", "# Display training information", "\n", "if", "iter", "%", "cfg", ".", "TRAIN", ".", "DISPLAY", "==", "0", ":", "\n", "# if type(image_id) == tuple:", "\n", "#     image_id = image_id[0]", "\n", "# print(image_id)", "\n", "                ", "print", "(", "'iter: {:d} / {:d}, im_id: {:d}, loss: {:.6f}, G: {:.6f} lr: {:f}, speed: {:.3f} s/iter'", ".", "format", "(", "\n", "iter", ",", "max_iters", ",", "image_id", "[", "0", "]", ",", "total_loss", ",", "fake_total_loss", ",", "lr", ".", "eval", "(", ")", ",", "timer", ".", "average_time", ")", ",", "end", "=", "'\\n'", ",", "\n", "flush", "=", "True", ")", "\n", "# print('\\rmodel: {} im_detect: {:d}/{:d}  {:d}, {:.3f}s'.format(net.model_name, count, 15765, _image_id,", "\n", "#                                                                _t['im_detect'].average_time), end='',", "\n", "#       flush=True)", "\n", "# Snapshotting", "\n", "", "t_iter", "=", "iter", "\n", "# if iter == 0 and self.net.model_name.__contains__('_pret'):", "\n", "#     t_iter = 1000000", "\n", "self", ".", "snapshot", "(", "sess", ",", "t_iter", ")", "\n", "\n", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.train_model_epic3_inner": [[229, 276], ["timer.tic", "timer.toc", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.snapshot", "sess.run", "sess.run", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.writer.add_summary", "sess.run", "sess.run", "print", "float", "lr.eval"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.snapshot"], ["", "", "def", "train_model_epic3_inner", "(", "self", ",", "D_loss", ",", "g_loss", ",", "iter", ",", "lr", ",", "max_iters", ",", "sess", ",", "timer", ",", "train_op", ",", "train_op_g", ")", ":", "\n", "        ", "while", "iter", "<", "max_iters", "+", "1", ":", "\n", "            ", "timer", ".", "tic", "(", ")", "\n", "\n", "total_loss", "=", "0", "\n", "fake_total_loss", "=", "0", "\n", "#", "\n", "save_iters", "=", "50000", "\n", "epoch_stride", "=", "5", "\n", "\n", "if", "(", "iter", "%", "cfg", ".", "TRAIN", ".", "SUMMARY_INTERVAL", "==", "0", ")", "or", "(", "iter", "<", "20", ")", ":", "\n", "# Compute the graph with summary", "\n", "                ", "fake_total_loss", ",", "_", ",", "summary", ",", "image_id", "=", "sess", ".", "run", "(", "\n", "[", "g_loss", ",", "train_op_g", ",", "self", ".", "net", ".", "summary_op", ",", "self", ".", "net", ".", "image_id", ",", "]", ")", "\n", "\n", "# Compute the graph with summary", "\n", "total_loss", ",", "_", ",", "summary", ",", "image_id", "=", "sess", ".", "run", "(", "\n", "[", "D_loss", ",", "train_op", ",", "self", ".", "net", ".", "summary_op", ",", "self", ".", "net", ".", "image_id", ",", "]", ")", "\n", "\n", "# total_loss, summary = self.net.train_step_with_summary(sess, blobs, lr.eval(), train_op)", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "iter", ")", ")", "\n", "", "else", ":", "\n", "# Compute the graph without summary", "\n", "                ", "fake_total_loss", ",", "_", ",", "image_id", "=", "sess", ".", "run", "(", "[", "g_loss", ",", "train_op_g", ",", "self", ".", "net", ".", "image_id", ",", "]", ")", "\n", "# Compute the graph without summary", "\n", "total_loss", ",", "_", ",", "image_id", "=", "sess", ".", "run", "(", "[", "D_loss", ",", "train_op", ",", "self", ".", "net", ".", "image_id", ",", "]", ")", "\n", "\n", "", "timer", ".", "toc", "(", ")", "\n", "# print(image_id)", "\n", "# Display training information", "\n", "if", "iter", "%", "cfg", ".", "TRAIN", ".", "DISPLAY", "==", "0", ":", "\n", "# if type(image_id) == tuple:", "\n", "#     image_id = image_id[0]", "\n", "# print(image_id)", "\n", "                ", "print", "(", "'iter: {:d} / {:d}, im_id: {:d}, loss: {:.6f}, G: {:.6f} lr: {:f}, speed: {:.3f} s/iter'", ".", "format", "(", "\n", "iter", ",", "max_iters", ",", "image_id", "[", "0", "]", ",", "total_loss", ",", "fake_total_loss", ",", "lr", ".", "eval", "(", ")", ",", "timer", ".", "average_time", ")", ",", "end", "=", "'\\n'", ",", "\n", "flush", "=", "True", ")", "\n", "# print('\\rmodel: {} im_detect: {:d}/{:d}  {:d}, {:.3f}s'.format(net.model_name, count, 15765, _image_id,", "\n", "#                                                                _t['im_detect'].average_time), end='',", "\n", "#       flush=True)", "\n", "# Snapshotting", "\n", "", "t_iter", "=", "iter", "\n", "# if iter == 0 and self.net.model_name.__contains__('_pret'):", "\n", "#     t_iter = 1000000", "\n", "self", ".", "snapshot", "(", "sess", ",", "t_iter", ")", "\n", "\n", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.train_model": [[277, 293], ["train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.construct_graph", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.from_snapshot", "sess.graph.finalize", "ult.timer.Timer", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.get_init_step", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.train_model_stepwise_inner", "train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.writer.close"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.construct_graph", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.from_snapshot", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_init_step", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO_MultiBatch_FCL.SolverWrapperMultiBatchFCL.train_model_stepwise_inner"], ["", "", "def", "train_model", "(", "self", ",", "sess", ",", "max_iters", ")", ":", "\n", "        ", "lr", ",", "train_op", ",", "D_loss", ",", "train_op_g", ",", "g_loss", "=", "self", ".", "construct_graph", "(", "sess", ")", "\n", "\n", "self", ".", "from_snapshot", "(", "sess", ")", "\n", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "timer", "=", "Timer", "(", ")", "\n", "\n", "# Data_length = len(self.Trainval_GT)", "\n", "iter", "=", "self", ".", "get_init_step", "(", ")", "\n", "self", ".", "train_model_stepwise_inner", "(", "D_loss", ",", "g_loss", ",", "iter", ",", "lr", ",", "max_iters", ",", "sess", ",", "timer", ",", "train_op", ",", "train_op_g", ")", "\n", "# elif self.net.model_name.__contains__('epic3'):", "\n", "#     self.train_model_epic3_inner(D_loss, g_loss, iter, lr, max_iters, sess, timer, train_op, train_op_g)", "\n", "\n", "self", ".", "writer", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.__init__": [[24, 33], ["models.train_Solver_VCOCO.SolverWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1.__init__"], ["def", "__init__", "(", "self", ",", "sess", ",", "network", ",", "output_dir", ",", "tbdir", ",", "Restore_flag", ",", "pretrained_model", ")", ":", "\n", "        ", "super", "(", "VCOCOSolverWrapperMultiGPU", ",", "self", ")", ".", "__init__", "(", "sess", ",", "network", ",", "None", ",", "None", ",", "output_dir", ",", "tbdir", ",", "0", ",", "0", ",", "0", ",", "Restore_flag", ",", "pretrained_model", ")", "\n", "\n", "self", ".", "image", "=", "None", "\n", "\n", "self", ".", "image_id", "=", "None", "\n", "self", ".", "spatial", "=", "None", "\n", "self", ".", "H_num", "=", "None", "\n", "self", ".", "blobs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.set_coco_data": [[34, 40], ["None"], "methods", ["None"], ["", "def", "set_coco_data", "(", "self", ",", "image", ",", "image_id", ",", "H_num", ",", "blobs", ")", ":", "\n", "\n", "        ", "if", "image", "is", "not", "None", ":", "self", ".", "image", "=", "image", "\n", "if", "image_id", "is", "not", "None", ":", "self", ".", "image_id", "=", "image_id", "\n", "self", ".", "blobs", "=", "blobs", "\n", "if", "H_num", "is", "not", "None", ":", "self", ".", "H_num", "=", "H_num", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.construct_graph2": [[41, 123], ["print", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.compose_feature_helper.get_compose_type", "sess.graph.as_default", "tensorflow.device", "tensorflow.set_random_seed", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.get_init_step", "tensorflow.Variable", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.get_step_factor", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.get_optimzer_lr", "range", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.net.model_name.__contains__", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.optimizer.apply_gradients", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge_all", "tensorflow.train.Saver", "tensorflow.summary.FileWriter", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.device", "len", "tensorflow.clip_by_norm", "len", "tensorflow.name_scope", "print", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.net.set_ph", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.net.create_architecture", "O_features.append", "V_features.append", "num_stop_list.append", "print", "tower_losses.append", "os.environ[].split", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.net.get_compose_num_stop", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.net.get_compose_num_stop", "tensorflow.trainable_variables", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.optimizer.compute_gradients", "tower_grads.append", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.net.model_name.__contains__", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.compose_feature_helper.merge_generate", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.compose_feature_helper.get_ll", "tower_losses.append", "tensorflow.reduce_sum", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.net.get_compose_num_stop", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.net.get_compose_num_stop", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.net.model_name.__contains__", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.net.model_name.__contains__", "range"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.get_compose_type", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_init_step", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_step_factor", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_optimzer_lr", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.set_ph", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.create_architecture", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.merge_generate", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.get_ll", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop"], ["", "def", "construct_graph2", "(", "self", ",", "sess", ")", ":", "\n", "        ", "print", "(", "\"construct_graph2\"", ")", "\n", "compose_type", "=", "self", ".", "compose_feature_helper", ".", "get_compose_type", "(", ")", "\n", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ",", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "# Set the random seed for tensorflow", "\n", "            ", "tf", ".", "set_random_seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "\n", "init_step", "=", "self", ".", "get_init_step", "(", ")", "\n", "\n", "global_step", "=", "tf", ".", "Variable", "(", "init_step", ",", "trainable", "=", "False", ",", "name", "=", "'global_step'", ")", "\n", "\n", "step_factor", "=", "self", ".", "get_step_factor", "(", ")", "\n", "\n", "lr", ",", "self", ".", "optimizer", "=", "self", ".", "get_optimzer_lr", "(", "global_step", ",", "step_factor", ")", "\n", "\n", "tower_grads", "=", "[", "]", "\n", "V_features", "=", "[", "]", "\n", "O_features", "=", "[", "]", "\n", "num_stop_list", "=", "[", "]", "\n", "tower_losses", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                ", "gpu_idx", "=", "i", "\n", "if", "'CUDA_VISIBLE_DEVICES'", "not", "in", "os", ".", "environ", "or", "len", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ".", "split", "(", "','", ")", ")", "==", "1", ":", "\n", "                    ", "gpu_idx", "=", "0", "\n", "", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "gpu_idx", ")", ":", "\n", "                    ", "with", "tf", ".", "name_scope", "(", "'%s_%d'", "%", "(", "'HICO'", ",", "i", ")", ",", ")", "as", "scope", ":", "\n", "                        ", "split_image", "=", "self", ".", "image", "[", "i", "]", "\n", "split_image_id", "=", "self", ".", "image_id", "[", "i", "]", "\n", "split_H_num", "=", "self", ".", "H_num", "[", "i", "]", "\n", "blobs", "=", "self", ".", "blobs", "[", "i", "]", "\n", "print", "(", "i", ",", "split_H_num", ",", "'----------------------'", ")", "\n", "self", ".", "net", ".", "set_ph", "(", "split_image", ",", "split_image_id", ",", "split_H_num", ",", "blobs", "[", "'sp'", "]", ",", "blobs", "[", "'H_boxes'", "]", ",", "\n", "blobs", "[", "'O_boxes'", "]", ",", "blobs", "[", "'gt_class_H'", "]", ",", "blobs", "[", "'gt_class_HO'", "]", ",", "blobs", "[", "'gt_class_sp'", "]", ",", "\n", "blobs", "[", "'Mask_HO'", "]", ",", "blobs", "[", "'Mask_H'", "]", ",", "blobs", "[", "'Mask_sp'", "]", ",", "blobs", "[", "'gt_class_C'", "]", ")", "\n", "\n", "# Build the main computation graph", "\n", "layers", "=", "self", ".", "net", ".", "create_architecture", "(", "True", ")", "# is_training flag: True", "\n", "O_features", ".", "append", "(", "self", ".", "net", ".", "intermediate", "[", "'fc7_O'", "]", "[", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", ")", "\n", "V_features", ".", "append", "(", "self", ".", "net", ".", "intermediate", "[", "'fc7_verbs'", "]", "[", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", ")", "\n", "\n", "num_stop_list", ".", "append", "(", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", ")", "\n", "print", "(", "'num stop:'", ",", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", ",", "num_stop_list", ")", "\n", "# Define the loss", "\n", "loss", "=", "layers", "[", "'total_loss'", "]", "\n", "tower_losses", ".", "append", "(", "loss", ")", "\n", "\n", "if", "i", "==", "1", ":", "\n", "                            ", "if", "not", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'base'", ")", ":", "\n", "                                ", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_t2_'", ")", "or", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_t3_'", ")", ":", "\n", "                                    ", "key", "=", "'gt_class_C'", "\n", "", "else", ":", "\n", "                                    ", "key", "=", "'gt_class_HO'", "\n", "\n", "", "new_loss", "=", "self", ".", "compose_feature_helper", ".", "merge_generate", "(", "O_features", ",", "V_features", ",", "\n", "[", "self", ".", "blobs", "[", "j", "]", "[", "key", "]", "[", "\n", ":", "num_stop_list", "[", "j", "]", "]", "for", "j", "in", "\n", "range", "(", "2", ")", "]", ",", "\n", "compose_type", ")", "\n", "ll", "=", "self", ".", "compose_feature_helper", ".", "get_ll", "(", ")", "\n", "tower_losses", ".", "append", "(", "new_loss", "*", "ll", ")", "\n", "", "variables", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "tf", ".", "reduce_sum", "(", "tower_losses", ")", ",", "variables", ")", "\n", "tower_grads", ".", "append", "(", "grads_and_vars", ")", "\n", "\n", "", "", "", "", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'base'", ")", ":", "\n", "                ", "assert", "len", "(", "tower_losses", ")", "==", "2", ",", "tower_losses", "\n", "", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "1.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "grads_and_vars", "if", "grad", "is", "not", "None", "]", "\n", "\n", "# self.addition_loss(capped_gvs, layers)", "\n", "\n", "# for grad, var in capped_gvs:", "\n", "#     print('update: {}'.format(var.name))", "\n", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ",", "global_step", "=", "global_step", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'lr'", ",", "lr", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'merge_loss'", ",", "tf", ".", "reduce_sum", "(", "tower_losses", ")", ")", "\n", "self", ".", "net", ".", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_KEPT", ")", "\n", "# Write the train and validation information to tensorboard", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "tbdir", ",", "sess", ".", "graph", ")", "\n", "", "return", "lr", ",", "train_op", ",", "tf", ".", "reduce_sum", "(", "tower_losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.snapshot": [[125, 146], ["train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.net.model_name.__contains__", "os.path.join", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.saver.save", "print", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.net.model_name.__contains__", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.net.model_name.__contains__", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.net.model_name.__contains__", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "def", "snapshot", "(", "self", ",", "sess", ",", "iter", ")", ":", "\n", "        ", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'VCOCO'", ")", ":", "\n", "            ", "snapshot_iters", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_ITERS", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'zs4_'", ")", "and", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'test'", ")", ":", "\n", "            ", "snapshot_iters", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_ITERS", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'multi'", ")", ":", "\n", "            ", "snapshot_iters", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_ITERS", "*", "5", "//", "2", "\n", "\n", "", "else", ":", "\n", "            ", "snapshot_iters", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_ITERS", "*", "5", "\n", "\n", "", "if", "(", "iter", "%", "snapshot_iters", "==", "0", "and", "iter", "!=", "0", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "output_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "output_dir", ")", "\n", "\n", "# Store the model snapshot", "\n", "", "filename", "=", "'HOI'", "+", "'_iter_{:d}'", ".", "format", "(", "iter", ")", "+", "'.ckpt'", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "filename", ")", "\n", "\n", "self", ".", "saver", ".", "save", "(", "sess", ",", "filename", ")", "\n", "print", "(", "'Wrote snapshot to: {:s}'", ".", "format", "(", "filename", ")", ",", "iter", "/", "snapshot_iters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.train_model": [[150, 197], ["train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.construct_graph2", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.from_snapshot", "sess.graph.finalize", "ult.timer.Timer", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.get_init_step", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.writer.close", "ult.timer.Timer.tic", "ult.timer.Timer.toc", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.snapshot", "sess.run", "train_Solver_VCOCO_MultiGPU.VCOCOSolverWrapperMultiGPU.writer.add_summary", "sess.run", "print", "float", "type", "lr.eval"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.construct_graph2", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.from_snapshot", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_init_step", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.snapshot"], ["", "", "def", "train_model", "(", "self", ",", "sess", ",", "max_iters", ")", ":", "\n", "\n", "        ", "lr", ",", "train_op", ",", "t_loss", "=", "self", ".", "construct_graph2", "(", "sess", ")", "\n", "self", ".", "from_snapshot", "(", "sess", ")", "\n", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "timer", "=", "Timer", "(", ")", "\n", "\n", "# Data_length = len(self.Trainval_GT)", "\n", "iter", "=", "self", ".", "get_init_step", "(", ")", "\n", "while", "iter", "<", "max_iters", "+", "1", ":", "\n", "            ", "timer", ".", "tic", "(", ")", "\n", "if", "(", "iter", "%", "cfg", ".", "TRAIN", ".", "SUMMARY_INTERVAL", "==", "0", ")", "or", "(", "iter", "<", "20", ")", ":", "\n", "\n", "# Compute the graph with summary", "\n", "# total_loss, image_id, summary = self.net.train_step_tfr_with_summary(sess, blobs, lr, train_op)", "\n", "                ", "total_loss", ",", "summary", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "t_loss", ",", "\n", "self", ".", "net", ".", "summary_op", ",", "self", ".", "net", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "# total_loss, summary = self.net.train_step_with_summary(sess, blobs, lr.eval(), train_op)", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "iter", ")", ")", "\n", "\n", "", "else", ":", "\n", "# Compute the graph without summary", "\n", "                ", "total_loss", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "t_loss", ",", "self", ".", "net", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "# total_loss, image_id = self.net.train_step_tfr(sess, blobs, lr, train_op)", "\n", "\n", "", "timer", ".", "toc", "(", ")", "\n", "# print(image_id)", "\n", "# Display training information", "\n", "if", "iter", "%", "(", "cfg", ".", "TRAIN", ".", "DISPLAY", ")", "==", "0", ":", "\n", "                ", "if", "type", "(", "image_id", ")", "==", "tuple", ":", "\n", "                    ", "image_id", "=", "image_id", "[", "0", "]", "\n", "", "print", "(", "'iter: {:d} / {:d}, im_id: {:d}, total loss: {:.6f}, lr: {:f}, speed: {:.3f} s/iter'", ".", "format", "(", "\n", "iter", ",", "max_iters", ",", "image_id", ",", "total_loss", ",", "lr", ".", "eval", "(", ")", ",", "timer", ".", "average_time", ")", ",", "end", "=", "'\\r'", ",", "flush", "=", "True", ")", "\n", "# print('\\rmodel: {} im_detect: {:d}/{:d}  {:d}, {:.3f}s'.format(net.model_name, count, 15765, _image_id,", "\n", "#                                                                _t['im_detect'].average_time), end='',", "\n", "#       flush=True)", "\n", "# Snapshotting", "\n", "\n", "", "self", ".", "snapshot", "(", "sess", ",", "iter", ")", "\n", "\n", "iter", "+=", "1", "\n", "\n", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.get_blob": [[29, 37], ["cv2.imread", "cv2.imread.astype", "im_orig.reshape.reshape", "str().zfill", "str"], "function", ["None"], ["def", "get_blob", "(", "image_id", ")", ":", "\n", "    ", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/test2015/HICO_test2015_'", "+", "(", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "8", ")", "+", "'.jpg'", "\n", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "im_orig", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "True", ")", "\n", "im_orig", "-=", "cfg", ".", "PIXEL_MEANS", "\n", "im_shape", "=", "im_orig", ".", "shape", "\n", "im_orig", "=", "im_orig", ".", "reshape", "(", "1", ",", "im_shape", "[", "0", "]", ",", "im_shape", "[", "1", "]", ",", "3", ")", "\n", "return", "im_orig", ",", "im_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.get_coco_blob": [[39, 55], ["cv2.imread", "cv2.imread.astype", "im_orig.reshape.reshape", "str().zfill", "str().zfill", "str().zfill", "str", "str", "str"], "function", ["None"], ["", "def", "get_coco_blob", "(", "image_id", ",", "type", "=", "'coco'", ")", ":", "\n", "    ", "if", "type", "==", "'hico'", "or", "type", "==", "'gthico'", ":", "\n", "        ", "im_file", "=", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/test2015/HICO_test2015_'", "+", "(", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "\n", "8", ")", "+", "'.jpg'", "\n", "", "elif", "type", "==", "'gtobj365_coco'", "or", "type", "==", "'gtobj365'", ":", "\n", "        ", "im_file", "=", "cfg", ".", "LOCAL_DATA", "+", "'/dataset/Objects365/Images/val/val/obj365_val_'", "+", "(", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "\n", "12", ")", "+", "'.jpg'", "\n", "", "else", ":", "\n", "        ", "im_file", "=", "cfg", ".", "LOCAL_DATA", "+", "'/dataset/coco/images/val2017/'", "+", "(", "str", "(", "image_id", ")", ")", ".", "zfill", "(", "12", ")", "+", "'.jpg'", "\n", "# print(im_file)", "\n", "", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "im_orig", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "True", ")", "\n", "im_orig", "-=", "cfg", ".", "PIXEL_MEANS", "\n", "im_shape", "=", "im_orig", ".", "shape", "\n", "im_orig", "=", "im_orig", ".", "reshape", "(", "1", ",", "im_shape", "[", "0", "]", ",", "im_shape", "[", "1", "]", ",", "3", ")", "\n", "return", "im_orig", ",", "im_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.test_net_data_api1": [[56, 112], ["ult.tools.get_convert_matrix", "numpy.ones", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "_t[].tic", "pickle.dump", "gc.collect", "ult.timer.Timer", "ult.timer.Timer", "_t[].tic", "_t[].toc", "print", "open", "sess.run", "detection[].extend", "print", "range", "len"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_convert_matrix", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc"], ["", "def", "test_net_data_api1", "(", "sess", ",", "net", ",", "output_dir", ",", "h_box", ",", "o_box", ",", "o_cls", ",", "h_score", ",", "o_score", ",", "image_id", ")", ":", "\n", "    ", "detection", "=", "{", "}", "\n", "verb_to_HO_matrix", ",", "obj_to_HO_matrix", "=", "get_convert_matrix", "(", ")", "\n", "# prediction_HO  = net.test_image_HO(sess, im_orig, blobs)", "\n", "# timers", "\n", "ones", "=", "np", ".", "ones", "(", "[", "1", ",", "600", "]", ",", "np", ".", "float32", ")", "\n", "_t", "=", "{", "'im_detect'", ":", "Timer", "(", ")", ",", "'misc'", ":", "Timer", "(", ")", "}", "\n", "last_img_id", "=", "-", "1", "\n", "count", "=", "0", "\n", "\n", "fuse_res", "=", "tf", ".", "constant", "(", "0", ")", "\n", "\n", "obj_scores", "=", "tf", ".", "constant", "(", "0", ")", "\n", "objid", "=", "tf", ".", "constant", "(", "0", ")", "\n", "obj_scores", "=", "tf", ".", "constant", "(", "0", ")", "\n", "_t", "[", "'im_detect'", "]", ".", "tic", "(", ")", "\n", "while", "True", ":", "\n", "        ", "_t", "[", "'im_detect'", "]", ".", "tic", "(", ")", "\n", "\n", "from", "tensorflow", ".", "python", ".", "framework", ".", "errors_impl", "import", "InvalidArgumentError", "\n", "try", ":", "\n", "            ", "pH", ",", "pO", ",", "pSp", ",", "pVerbs", ",", "pSpHO", ",", "pFuse", ",", "f_obj_score", ",", "f_obj_cls", ",", "_h_box", ",", "_o_box", ",", "_o_cls", ",", "_h_score", ",", "_o_score", ",", "_image_id", "=", "sess", ".", "run", "(", "[", "\n", "net", ".", "predictions", "[", "\"cls_prob_H\"", "]", "if", "'cls_prob_H'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "net", ".", "predictions", "[", "\"cls_prob_O\"", "]", "if", "'cls_prob_O'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "net", ".", "predictions", "[", "\"cls_prob_sp\"", "]", "if", "'cls_prob_sp'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "net", ".", "predictions", "[", "\"cls_prob_hoi\"", "]", "if", "'cls_prob_hoi'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "net", ".", "predictions", "[", "\"cls_prob_spverbs\"", "]", "if", "'cls_prob_spverbs'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "fuse_res", "if", "'cls_prob_sp'", "in", "net", ".", "predictions", "else", "h_box", ",", "obj_scores", ",", "objid", ",", "\n", "h_box", ",", "o_box", ",", "o_cls", ",", "h_score", ",", "o_score", ",", "image_id", "]", ")", "\n", "# print(pFuse.shape, f_obj_score.shape, f_obj_cls.shape)", "\n", "", "except", "InvalidArgumentError", "as", "e", ":", "\n", "# cls_prob_HO = np.zeros(shape=[blobs['sp'].shape[0], self.num_classes])", "\n", "            ", "raise", "e", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "print", "(", "'END'", ")", "\n", "break", "\n", "\n", "", "temp", "=", "[", "[", "_h_box", "[", "i", "]", ",", "_o_box", "[", "i", "]", ",", "_o_cls", "[", "i", "]", ",", "0", ",", "_h_score", "[", "i", "]", ",", "_o_score", "[", "i", "]", ",", "pH", "[", "i", "]", ",", "pO", "[", "i", "]", ",", "pSp", "[", "i", "]", ",", "pVerbs", "[", "i", "]", ",", "pSpHO", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "_h_box", ")", ")", "]", "\n", "\n", "# detection[_image_id] = temp", "\n", "if", "_image_id", "in", "detection", ":", "\n", "            ", "detection", "[", "_image_id", "]", ".", "extend", "(", "temp", ")", "\n", "", "else", ":", "\n", "            ", "detection", "[", "_image_id", "]", "=", "temp", "\n", "\n", "", "_t", "[", "'im_detect'", "]", ".", "toc", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "print", "(", "'\\rmodel: {} im_detect: {:d}/{:d}  {:d}, {:.3f}s'", ".", "format", "(", "net", ".", "model_name", ",", "count", ",", "10566", ",", "_image_id", ",", "_t", "[", "'im_detect'", "]", ".", "average_time", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "\n", "# TODO remove", "\n", "# pickle.dump(detection, open('test_new.pkl', 'wb'))", "\n", "", "pickle", ".", "dump", "(", "detection", ",", "open", "(", "output_dir", ",", "\"wb\"", ")", ")", "\n", "del", "detection", "\n", "import", "gc", "\n", "gc", ".", "collect", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.obtain_test_dataset_fusion": [[116, 306], ["print", "print", "numpy.random.seed", "tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "glob.iglob", "numpy.random.seed", "test_HICO.obtain_obj_boxes", "pickle.load", "pickle.load", "pickle.load", "test_HICO.get_blob", "numpy.zeros", "sorted", "sorted", "numpy.multiply", "numpy.concatenate", "open", "open", "open", "print", "len", "blobs.items", "tensorflow.TensorShape", "tensorflow.TensorShape", "range", "list_human_included.append", "list_object_included.append", "Human_out_list.append", "Object_list.append", "min", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "numpy.max", "str", "len", "len", "blobs[].append", "numpy.array", "blobs[].append", "blobs[].append", "numpy.zeros", "obj_box[].astype", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "numpy.array", "blobs[].append", "blobs[].append", "numpy.zeros", "obj_box[].astype", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "numpy.array", "ult.ult.Get_next_sp", "len", "blobs[].append", "blobs[].append", "numpy.max", "numpy.all", "numpy.array", "ult.ult.Get_next_sp", "len", "blobs[].append", "blobs[].append", "numpy.ones", "numpy.ones", "numpy.max", "len", "numpy.max", "numpy.max", "len", "numpy.max"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.obtain_obj_boxes", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.get_blob", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp"], ["", "def", "obtain_test_dataset_fusion", "(", "object_thres", ",", "human_thres", ",", "dataset_name", "=", "'test2015'", ",", "test_type", "=", "'default'", ",", "has_human_threhold", "=", "True", ",", "stride", "=", "200", ")", ":", "\n", "    ", "print", "(", "'================================================================================'", ")", "\n", "print", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/'", "+", "dataset_name", "+", "'/*.jpg'", ",", "glob", ".", "iglob", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/'", "+", "dataset_name", "+", "'/*.jpg'", ")", ")", "\n", "from", "sys", "import", "version_info", "\n", "if", "dataset_name", "==", "'test2015'", ":", "\n", "        ", "if", "version_info", ".", "major", "==", "3", ":", "\n", "# Test_Faster_RCNN_R-50-PFN_2x_HICO_DET_with_pose", "\n", "            ", "Test_RCNN", "=", "obtain_obj_boxes", "(", "test_type", ")", "\n", "", "else", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Test_Faster_RCNN_R-50-PFN_2x_HICO_DET.pkl'", ",", "\"rb\"", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "version_info", ".", "major", "==", "3", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "", "else", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ")", "\n", "\n", "", "", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "def", "generator1", "(", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "i", "=", "0", "\n", "# for line in glob.iglob(cfg.DATA_DIR + '/' + 'hico_20160224_det/images/'+dataset_name+'/*.jpg'):", "\n", "for", "image_id", "in", "Test_RCNN", ":", "\n", "            ", "i", "+=", "1", "\n", "# if i > 30: # TODO remove", "\n", "#     break", "\n", "# image_id = int(line[-9:-4])", "\n", "# save image information", "\n", "im_orig", ",", "im_shape", "=", "get_blob", "(", "image_id", ")", "\n", "mask_all", "=", "np", ".", "zeros", "(", "shape", "=", "(", "1", ",", "im_shape", "[", "0", "]", ",", "im_shape", "[", "1", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "=", "{", "}", "\n", "\n", "blobs", "[", "'H_num'", "]", "=", "0", "\n", "blobs", "[", "'H_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'sp'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_mask'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_cls'", "]", "=", "[", "]", "\n", "blobs", "[", "'H_score'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_score'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_all_score'", "]", "=", "[", "]", "\n", "blobs", "[", "'pose_box'", "]", "=", "[", "]", "\n", "\n", "human_out_list", "=", "sorted", "(", "[", "H", "for", "H", "in", "Test_RCNN", "[", "image_id", "]", "if", "H", "[", "1", "]", "==", "'Human'", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "5", "]", ",", "reverse", "=", "True", ")", "\n", "obj_out_list", "=", "sorted", "(", "[", "H", "for", "H", "in", "Test_RCNN", "[", "image_id", "]", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "5", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "# for Human_out in Test_RCNN[image_id]:", "\n", "for", "Human_out", "in", "human_out_list", ":", "\n", "                ", "if", "(", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", ">", "human_thres", ")", "and", "(", "Human_out", "[", "1", "]", "==", "'Human'", ")", ":", "# This is a valid human", "\n", "\n", "# blobs['H_boxes'] = np.array(", "\n", "#     [0, Human_out[2][0], Human_out[2][1], Human_out[2][2], Human_out[2][3]]).reshape(1, 5)", "\n", "\n", "                    ", "for", "Object", "in", "obj_out_list", ":", "\n", "                        ", "if", "(", "np", ".", "max", "(", "Object", "[", "5", "]", ")", ">", "object_thres", ")", "and", "not", "(", "\n", "np", ".", "all", "(", "Object", "[", "2", "]", "==", "Human_out", "[", "2", "]", ")", ")", ":", "# This is a valid object", "\n", "\n", "                            ", "blobs", "[", "'H_num'", "]", "+=", "1", "\n", "blobs", "[", "'H_boxes'", "]", ".", "append", "(", "np", ".", "array", "(", "[", "0", ",", "Human_out", "[", "2", "]", "[", "0", "]", ",", "Human_out", "[", "2", "]", "[", "1", "]", ",", "Human_out", "[", "2", "]", "[", "2", "]", ",", "Human_out", "[", "2", "]", "[", "3", "]", "]", ")", ")", "\n", "obj_box", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "Object", "[", "2", "]", "[", "0", "]", ",", "Object", "[", "2", "]", "[", "1", "]", ",", "Object", "[", "2", "]", "[", "2", "]", ",", "Object", "[", "2", "]", "[", "3", "]", "]", ")", "\n", "blobs", "[", "'O_boxes'", "]", ".", "append", "(", "obj_box", ")", "\n", "blobs", "[", "'sp'", "]", ".", "append", "(", "Get_next_sp", "(", "Human_out", "[", "2", "]", ",", "Object", "[", "2", "]", ")", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "im_shape", "[", "0", "]", "//", "16", ",", "im_shape", "[", "1", "]", "//", "16", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "obj_box", "=", "obj_box", "[", "1", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "mask_all", "[", ":", ",", "obj_box", "[", "0", "]", ":", "obj_box", "[", "2", "]", ",", "obj_box", "[", "1", "]", ":", "obj_box", "[", "3", "]", "]", "=", "1", "\n", "blobs", "[", "'O_mask'", "]", ".", "append", "(", "mask", ")", "\n", "blobs", "[", "'O_cls'", "]", ".", "append", "(", "Object", "[", "4", "]", ")", "\n", "blobs", "[", "'H_score'", "]", ".", "append", "(", "Human_out", "[", "5", "]", ")", "\n", "blobs", "[", "'O_score'", "]", ".", "append", "(", "Object", "[", "5", "]", ")", "\n", "if", "len", "(", "Object", ")", ">=", "7", ":", "\n", "                                ", "blobs", "[", "'O_all_score'", "]", ".", "append", "(", "Object", "[", "6", "]", ")", "\n", "", "else", ":", "\n", "                                ", "blobs", "[", "'O_all_score'", "]", ".", "append", "(", "np", ".", "ones", "(", "[", "80", "]", ",", "np", ".", "float32", ")", ")", "\n", "\n", "", "", "", "", "", "if", "blobs", "[", "'H_num'", "]", "==", "0", "and", "has_human_threhold", ":", "\n", "                ", "print", "(", "'\\rDealing with zero-sample test Image '", "+", "str", "(", "image_id", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "\n", "list_human_included", "=", "[", "]", "\n", "list_object_included", "=", "[", "]", "\n", "Human_out_list", "=", "[", "]", "\n", "Object_list", "=", "[", "]", "\n", "\n", "test_pair_all", "=", "obj_out_list", "\n", "length", "=", "len", "(", "test_pair_all", ")", "\n", "\n", "flag_continue_searching", "=", "1", "\n", "\n", "while", "(", "len", "(", "list_human_included", ")", "<", "human_num_thres", ")", "or", "(", "\n", "len", "(", "list_object_included", ")", "<", "object_num_thres", ")", ":", "\n", "                    ", "h_max", "=", "[", "-", "1", ",", "-", "1.0", "]", "\n", "o_max", "=", "[", "-", "1", ",", "-", "1.0", "]", "\n", "flag_continue_searching", "=", "0", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                        ", "if", "test_pair_all", "[", "i", "]", "[", "1", "]", "==", "'Human'", ":", "\n", "                            ", "if", "(", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", ">", "h_max", "[", "1", "]", ")", "and", "not", "(", "i", "in", "list_human_included", ")", "and", "len", "(", "\n", "list_human_included", ")", "<", "human_num_thres", ":", "\n", "                                ", "h_max", "=", "[", "i", ",", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", "]", "\n", "flag_continue_searching", "=", "1", "\n", "", "", "else", ":", "\n", "                            ", "if", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", ">", "o_max", "[", "1", "]", "and", "not", "(", "i", "in", "list_object_included", ")", "and", "len", "(", "\n", "list_object_included", ")", "<", "object_num_thres", ":", "\n", "                                ", "o_max", "=", "[", "i", ",", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", "]", "\n", "flag_continue_searching", "=", "1", "\n", "\n", "", "", "", "if", "flag_continue_searching", "==", "0", ":", "\n", "                        ", "break", "\n", "\n", "", "list_human_included", ".", "append", "(", "h_max", "[", "0", "]", ")", "\n", "list_object_included", ".", "append", "(", "o_max", "[", "0", "]", ")", "\n", "\n", "Human_out_list", ".", "append", "(", "test_pair_all", "[", "h_max", "[", "0", "]", "]", ")", "\n", "Object_list", ".", "append", "(", "test_pair_all", "[", "o_max", "[", "0", "]", "]", ")", "\n", "\n", "", "for", "Human_out", "in", "Human_out_list", ":", "\n", "                    ", "for", "Object", "in", "Object_list", ":", "\n", "\n", "                        ", "blobs", "[", "'H_num'", "]", "+=", "1", "\n", "blobs", "[", "'H_boxes'", "]", ".", "append", "(", "\n", "np", ".", "array", "(", "[", "0", ",", "Human_out", "[", "2", "]", "[", "0", "]", ",", "Human_out", "[", "2", "]", "[", "1", "]", ",", "Human_out", "[", "2", "]", "[", "2", "]", ",", "Human_out", "[", "2", "]", "[", "3", "]", "]", ")", ")", "\n", "obj_box", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "Object", "[", "2", "]", "[", "0", "]", ",", "Object", "[", "2", "]", "[", "1", "]", ",", "Object", "[", "2", "]", "[", "2", "]", ",", "Object", "[", "2", "]", "[", "3", "]", "]", ")", "\n", "blobs", "[", "'O_boxes'", "]", ".", "append", "(", "obj_box", ")", "\n", "blobs", "[", "'sp'", "]", ".", "append", "(", "Get_next_sp", "(", "Human_out", "[", "2", "]", ",", "Object", "[", "2", "]", ")", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "im_shape", "[", "0", "]", "//", "16", ",", "im_shape", "[", "1", "]", "//", "16", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "obj_box", "=", "obj_box", "[", "1", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "# print(obj_box)", "\n", "# print(obj_box, blobs['O_boxes'])", "\n", "# mask[obj_box[0]:obj_box[2], obj_box[1]:obj_box[3]] = 1", "\n", "mask_all", "[", ":", ",", "obj_box", "[", "0", "]", ":", "obj_box", "[", "2", "]", ",", "obj_box", "[", "1", "]", ":", "obj_box", "[", "3", "]", "]", "=", "1", "\n", "# from skimage import transform", "\n", "# mask = transform.resize(mask, [im_shape[0] // 16, im_shape[1] // 16, 1], order=0,", "\n", "#                         preserve_range=True)", "\n", "blobs", "[", "'O_mask'", "]", ".", "append", "(", "mask", ")", "\n", "blobs", "[", "'O_cls'", "]", ".", "append", "(", "Object", "[", "4", "]", ")", "\n", "blobs", "[", "'H_score'", "]", ".", "append", "(", "Human_out", "[", "5", "]", ")", "\n", "blobs", "[", "'O_score'", "]", ".", "append", "(", "Object", "[", "5", "]", ")", "\n", "# blobs['O_all_score'].append(Object[6])", "\n", "if", "len", "(", "Object", ")", ">=", "7", ":", "\n", "                            ", "blobs", "[", "'O_all_score'", "]", ".", "append", "(", "Object", "[", "6", "]", ")", "\n", "", "else", ":", "\n", "                            ", "blobs", "[", "'O_all_score'", "]", ".", "append", "(", "np", ".", "ones", "(", "[", "80", "]", ",", "np", ".", "float32", ")", ")", "\n", "\n", "", "", "", "", "if", "blobs", "[", "'H_num'", "]", "==", "0", ":", "\n", "# print('None ', image_id)", "\n", "                ", "continue", "\n", "\n", "", "im_mask", "=", "np", ".", "multiply", "(", "im_orig", ",", "mask_all", ")", "\n", "im_orig", "=", "np", ".", "concatenate", "(", "[", "im_orig", ",", "im_mask", "]", ",", "axis", "=", "0", ")", "\n", "start", "=", "0", "\n", "# stride = 200", "\n", "while", "start", "<", "blobs", "[", "'H_num'", "]", ":", "\n", "                ", "b_temp", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "blobs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "not", "k", "==", "'H_num'", ":", "\n", "                        ", "b_temp", "[", "k", "]", "=", "blobs", "[", "k", "]", "[", "start", ":", "start", "+", "stride", "]", "\n", "\n", "\n", "", "", "b_temp", "[", "'H_num'", "]", "=", "min", "(", "start", "+", "stride", ",", "blobs", "[", "'H_num'", "]", ")", "-", "start", "\n", "start", "+=", "stride", "\n", "# print('b_temp' , im_orig.shape, image_id, end=' ')", "\n", "# for k, v in blobs.items():", "\n", "#     if not k == 'H_num':", "\n", "#         blobs[k] = np.asarray(v)", "\n", "#         print(k, blobs[k].shape, end=' ')", "\n", "# print('\\n')", "\n", "yield", "im_orig", ",", "b_temp", ",", "image_id", "\n", "# yield im_orig, blobs, image_id", "\n", "\n", "", "", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "generator1", ",", "output_types", "=", "(", "\n", "tf", ".", "float32", ",", "{", "'H_num'", ":", "tf", ".", "int32", ",", "'H_boxes'", ":", "tf", ".", "float32", ",", "'O_boxes'", ":", "tf", ".", "float32", ",", "'sp'", ":", "tf", ".", "float32", ",", "'O_mask'", ":", "tf", ".", "float32", ",", "\n", "'O_cls'", ":", "tf", ".", "float32", ",", "'H_score'", ":", "tf", ".", "float32", ",", "'O_score'", ":", "tf", ".", "float32", ",", "'O_all_score'", ":", "tf", ".", "float32", "}", ",", "tf", ".", "int32", ",", ")", ",", "\n", "output_shapes", "=", "(", "tf", ".", "TensorShape", "(", "[", "2", ",", "None", ",", "None", ",", "3", "]", ")", ",", "\n", "{", "'H_num'", ":", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "'O_mask'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "None", ",", "None", ",", "1", "]", ")", ",", "# useless", "\n", "'O_cls'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'H_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'O_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'O_all_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "80", "]", ")", "}", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ")", "\n", ")", "\n", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.repeat(100000) # TODO improve", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "blobs", ",", "image_id", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "image", ",", "blobs", ",", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.obtain_test_dataset_fcl": [[310, 455], ["print", "print", "numpy.random.seed", "tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "glob.iglob", "print", "numpy.random.seed", "test_HICO.obtain_obj_boxes", "pickle.load", "pickle.load", "pickle.load", "test_HICO.get_blob", "open", "open", "open", "print", "len", "blobs.items", "tensorflow.TensorShape", "tensorflow.TensorShape", "range", "list_human_included.append", "list_object_included.append", "Human_out_list.append", "Object_list.append", "min", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "numpy.max", "str", "len", "len", "blobs[].append", "numpy.array", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "numpy.array", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "numpy.array", "ult.ult.Get_next_sp", "numpy.max", "numpy.all", "numpy.array", "ult.ult.Get_next_sp", "numpy.max", "len", "numpy.max", "numpy.max", "len", "numpy.max"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.obtain_obj_boxes", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.get_blob", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp"], ["", "def", "obtain_test_dataset_fcl", "(", "object_thres", ",", "human_thres", ",", "dataset_name", "=", "'test2015'", ",", "test_type", "=", "'vcl'", ",", "\n", "has_human_threhold", "=", "True", ",", "stride", "=", "200", ",", "model_name", "=", "''", ",", "pattern_type", "=", "0", ")", ":", "\n", "    ", "print", "(", "'================================================================================'", ")", "\n", "print", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/'", "+", "dataset_name", "+", "'/*.jpg'", ",", "glob", ".", "iglob", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/'", "+", "dataset_name", "+", "'/*.jpg'", ")", ")", "\n", "from", "sys", "import", "version_info", "\n", "if", "dataset_name", "==", "'test2015'", ":", "\n", "        ", "print", "(", "test_type", ",", "version_info", ".", "major", ")", "\n", "if", "version_info", ".", "major", "==", "3", ":", "\n", "# Test_Faster_RCNN_R-50-PFN_2x_HICO_DET_with_pose", "\n", "            ", "Test_RCNN", "=", "obtain_obj_boxes", "(", "test_type", ")", "\n", "", "else", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Test_Faster_RCNN_R-50-PFN_2x_HICO_DET_with_pose.pkl'", ",", "\"rb\"", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "version_info", ".", "major", "==", "3", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "", "else", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ")", "\n", "\n", "", "", "assert", "pattern_type", "==", "0", ",", "\"we remove the pose pattern, if you want to add new pattern type, just remove this line\"", "\n", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "def", "generator1", "(", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "i", "=", "0", "\n", "# for line in glob.iglob(cfg.DATA_DIR + '/' + 'hico_20160224_det/images/'+dataset_name+'/*.jpg'):", "\n", "for", "image_id", "in", "Test_RCNN", ":", "\n", "            ", "i", "+=", "1", "\n", "# if i > 30: # TODO remove", "\n", "#     break", "\n", "im_orig", ",", "im_shape", "=", "get_blob", "(", "image_id", ")", "\n", "blobs", "=", "{", "}", "\n", "\n", "blobs", "[", "'H_num'", "]", "=", "0", "\n", "blobs", "[", "'H_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'sp'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_cls'", "]", "=", "[", "]", "\n", "blobs", "[", "'H_score'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_score'", "]", "=", "[", "]", "\n", "for", "Human_out", "in", "Test_RCNN", "[", "image_id", "]", ":", "\n", "                ", "if", "(", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", ">", "human_thres", ")", "and", "(", "Human_out", "[", "1", "]", "==", "'Human'", ")", ":", "# This is a valid human", "\n", "                    ", "for", "Object", "in", "Test_RCNN", "[", "image_id", "]", ":", "\n", "                        ", "if", "(", "np", ".", "max", "(", "Object", "[", "5", "]", ")", ">", "object_thres", ")", "and", "not", "(", "\n", "np", ".", "all", "(", "Object", "[", "2", "]", "==", "Human_out", "[", "2", "]", ")", ")", ":", "# This is a valid object", "\n", "\n", "                            ", "blobs", "[", "'H_num'", "]", "+=", "1", "\n", "blobs", "[", "'H_boxes'", "]", ".", "append", "(", "np", ".", "array", "(", "[", "0", ",", "Human_out", "[", "2", "]", "[", "0", "]", ",", "Human_out", "[", "2", "]", "[", "1", "]", ",", "Human_out", "[", "2", "]", "[", "2", "]", ",", "Human_out", "[", "2", "]", "[", "3", "]", "]", ")", ")", "\n", "obj_box", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "Object", "[", "2", "]", "[", "0", "]", ",", "Object", "[", "2", "]", "[", "1", "]", ",", "Object", "[", "2", "]", "[", "2", "]", ",", "Object", "[", "2", "]", "[", "3", "]", "]", ")", "\n", "blobs", "[", "'O_boxes'", "]", ".", "append", "(", "obj_box", ")", "\n", "blobs", "[", "'sp'", "]", ".", "append", "(", "Get_next_sp", "(", "Human_out", "[", "2", "]", ",", "Object", "[", "2", "]", ")", ")", "\n", "assert", "Object", "[", "4", "]", ">", "0", ",", "(", "Object", "[", "4", "]", ")", "\n", "blobs", "[", "'O_cls'", "]", ".", "append", "(", "Object", "[", "4", "]", ")", "\n", "blobs", "[", "'H_score'", "]", ".", "append", "(", "Human_out", "[", "5", "]", ")", "\n", "blobs", "[", "'O_score'", "]", ".", "append", "(", "Object", "[", "5", "]", ")", "\n", "\n", "", "", "", "", "if", "blobs", "[", "'H_num'", "]", "==", "0", "and", "has_human_threhold", ":", "\n", "# copy from previous work (TIN). This is useless for better object detector.", "\n", "# This also illustrates the importance of fine-tuned object detector!", "\n", "                ", "print", "(", "'\\rDealing with zero-sample test Image '", "+", "str", "(", "image_id", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "\n", "list_human_included", "=", "[", "]", "\n", "list_object_included", "=", "[", "]", "\n", "Human_out_list", "=", "[", "]", "\n", "Object_list", "=", "[", "]", "\n", "\n", "test_pair_all", "=", "Test_RCNN", "[", "image_id", "]", "\n", "length", "=", "len", "(", "test_pair_all", ")", "\n", "\n", "\n", "while", "(", "len", "(", "list_human_included", ")", "<", "human_num_thres", ")", "or", "(", "\n", "len", "(", "list_object_included", ")", "<", "object_num_thres", ")", ":", "\n", "                    ", "h_max", "=", "[", "-", "1", ",", "-", "1.0", "]", "\n", "o_max", "=", "[", "-", "1", ",", "-", "1.0", "]", "\n", "flag_continue_searching", "=", "0", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                        ", "if", "test_pair_all", "[", "i", "]", "[", "1", "]", "==", "'Human'", ":", "\n", "                            ", "if", "(", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", ">", "h_max", "[", "1", "]", ")", "and", "not", "(", "i", "in", "list_human_included", ")", "and", "len", "(", "\n", "list_human_included", ")", "<", "human_num_thres", ":", "\n", "                                ", "h_max", "=", "[", "i", ",", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", "]", "\n", "flag_continue_searching", "=", "1", "\n", "", "", "else", ":", "\n", "                            ", "if", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", ">", "o_max", "[", "1", "]", "and", "not", "(", "i", "in", "list_object_included", ")", "and", "len", "(", "\n", "list_object_included", ")", "<", "object_num_thres", ":", "\n", "                                ", "o_max", "=", "[", "i", ",", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", "]", "\n", "flag_continue_searching", "=", "1", "\n", "\n", "", "", "", "if", "flag_continue_searching", "==", "0", ":", "\n", "                        ", "break", "\n", "\n", "", "list_human_included", ".", "append", "(", "h_max", "[", "0", "]", ")", "\n", "list_object_included", ".", "append", "(", "o_max", "[", "0", "]", ")", "\n", "\n", "Human_out_list", ".", "append", "(", "test_pair_all", "[", "h_max", "[", "0", "]", "]", ")", "\n", "Object_list", ".", "append", "(", "test_pair_all", "[", "o_max", "[", "0", "]", "]", ")", "\n", "\n", "", "for", "Human_out", "in", "Human_out_list", ":", "\n", "                    ", "for", "Object", "in", "Object_list", ":", "\n", "\n", "                        ", "blobs", "[", "'H_num'", "]", "+=", "1", "\n", "blobs", "[", "'H_boxes'", "]", ".", "append", "(", "\n", "np", ".", "array", "(", "[", "0", ",", "Human_out", "[", "2", "]", "[", "0", "]", ",", "Human_out", "[", "2", "]", "[", "1", "]", ",", "Human_out", "[", "2", "]", "[", "2", "]", ",", "Human_out", "[", "2", "]", "[", "3", "]", "]", ")", ")", "\n", "obj_box", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "Object", "[", "2", "]", "[", "0", "]", ",", "Object", "[", "2", "]", "[", "1", "]", ",", "Object", "[", "2", "]", "[", "2", "]", ",", "Object", "[", "2", "]", "[", "3", "]", "]", ")", "\n", "blobs", "[", "'O_boxes'", "]", ".", "append", "(", "obj_box", ")", "\n", "blobs", "[", "'sp'", "]", ".", "append", "(", "Get_next_sp", "(", "Human_out", "[", "2", "]", ",", "Object", "[", "2", "]", ")", ")", "\n", "blobs", "[", "'O_cls'", "]", ".", "append", "(", "Object", "[", "4", "]", ")", "\n", "blobs", "[", "'H_score'", "]", ".", "append", "(", "Human_out", "[", "5", "]", ")", "\n", "blobs", "[", "'O_score'", "]", ".", "append", "(", "Object", "[", "5", "]", ")", "\n", "\n", "", "", "", "if", "blobs", "[", "'H_num'", "]", "==", "0", ":", "\n", "# print('None ', image_id)", "\n", "                ", "continue", "\n", "\n", "", "start", "=", "0", "\n", "# stride = 200", "\n", "while", "start", "<", "blobs", "[", "'H_num'", "]", ":", "\n", "                ", "b_temp", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "blobs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "not", "k", "==", "'H_num'", ":", "\n", "                        ", "b_temp", "[", "k", "]", "=", "blobs", "[", "k", "]", "[", "start", ":", "start", "+", "stride", "]", "\n", "\n", "\n", "", "", "b_temp", "[", "'H_num'", "]", "=", "min", "(", "start", "+", "stride", ",", "blobs", "[", "'H_num'", "]", ")", "-", "start", "\n", "start", "+=", "stride", "\n", "yield", "im_orig", ",", "b_temp", ",", "image_id", "\n", "\n", "", "", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "generator1", ",", "output_types", "=", "(", "\n", "tf", ".", "float32", ",", "{", "'H_num'", ":", "tf", ".", "int32", ",", "'H_boxes'", ":", "tf", ".", "float32", ",", "'O_boxes'", ":", "tf", ".", "float32", ",", "'sp'", ":", "tf", ".", "float32", ",", "\n", "'O_cls'", ":", "tf", ".", "float32", ",", "'H_score'", ":", "tf", ".", "float32", ",", "'O_score'", ":", "tf", ".", "float32", ",", "}", ",", "tf", ".", "int32", ",", ")", ",", "\n", "output_shapes", "=", "(", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "\n", "{", "'H_num'", ":", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "'O_cls'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'H_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'O_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", "}", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ")", "\n", ")", "\n", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "blobs", ",", "image_id", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "image", ",", "blobs", ",", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.test_net_data_api_fuse_obj": [[457, 538], ["ult.tools.get_convert_matrix", "numpy.ones", "numpy.zeros", "tensorflow.matmul", "tensorflow.argmax", "tensorflow.reduce_max", "_t[].tic", "pickle.dump", "gc.collect", "ult.timer.Timer", "ult.timer.Timer", "tensorflow.multiply", "tensorflow.matmul", "tensorflow.matmul", "_t[].tic", "_t[].toc", "print", "open", "sess.run", "detection[].extend", "net.model_name.__contains__", "print", "range", "print", "len", "sess.run"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_convert_matrix", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc"], ["", "def", "test_net_data_api_fuse_obj", "(", "sess", ",", "net", ",", "output_dir", ",", "h_box", ",", "o_box", ",", "o_cls", ",", "h_score", ",", "o_score", ",", "o_all_score", ",", "image_id", ",", "debug_type", "=", "0", ")", ":", "\n", "    ", "detection", "=", "{", "}", "\n", "verb_to_HO_matrix", ",", "obj_to_HO_matrix", "=", "get_convert_matrix", "(", ")", "\n", "# prediction_HO  = net.test_image_HO(sess, im_orig, blobs)", "\n", "# timers", "\n", "ones", "=", "np", ".", "ones", "(", "[", "1", ",", "600", "]", ",", "np", ".", "float32", ")", "\n", "_t", "=", "{", "'im_detect'", ":", "Timer", "(", ")", ",", "'misc'", ":", "Timer", "(", ")", "}", "\n", "label_trans_map", "=", "{", "0", ":", "4", ",", "1", ":", "47", ",", "2", ":", "24", ",", "3", ":", "46", ",", "4", ":", "34", ",", "5", ":", "35", ",", "6", ":", "21", ",", "7", ":", "59", ",", "8", ":", "13", ",", "9", ":", "1", ",", "10", ":", "14", ",", "11", ":", "8", ",", "12", ":", "73", ",", "\n", "13", ":", "39", ",", "14", ":", "45", ",", "15", ":", "50", ",", "16", ":", "5", ",", "17", ":", "55", ",", "18", ":", "2", ",", "19", ":", "51", ",", "20", ":", "15", ",", "21", ":", "67", ",", "22", ":", "56", ",", "23", ":", "74", ",", "24", ":", "57", ",", "\n", "25", ":", "19", ",", "26", ":", "41", ",", "27", ":", "60", ",", "28", ":", "16", ",", "29", ":", "54", ",", "30", ":", "20", ",", "31", ":", "10", ",", "32", ":", "42", ",", "33", ":", "29", ",", "34", ":", "23", ",", "35", ":", "78", ",", "36", ":", "26", ",", "\n", "37", ":", "17", ",", "38", ":", "52", ",", "39", ":", "66", ",", "40", ":", "33", ",", "41", ":", "43", ",", "42", ":", "63", ",", "43", ":", "68", ",", "44", ":", "3", ",", "45", ":", "64", ",", "46", ":", "49", ",", "47", ":", "69", ",", "48", ":", "12", ",", "\n", "49", ":", "0", ",", "50", ":", "53", ",", "51", ":", "58", ",", "52", ":", "72", ",", "53", ":", "65", ",", "54", ":", "48", ",", "55", ":", "76", ",", "56", ":", "18", ",", "57", ":", "71", ",", "58", ":", "36", ",", "59", ":", "30", ",", "60", ":", "31", ",", "\n", "61", ":", "44", ",", "62", ":", "32", ",", "63", ":", "11", ",", "64", ":", "28", ",", "65", ":", "37", ",", "66", ":", "77", ",", "67", ":", "38", ",", "68", ":", "27", ",", "69", ":", "70", ",", "70", ":", "61", ",", "71", ":", "79", ",", "72", ":", "9", ",", "\n", "73", ":", "6", ",", "74", ":", "7", ",", "75", ":", "62", ",", "76", ":", "25", ",", "77", ":", "75", ",", "78", ":", "40", ",", "79", ":", "22", "}", "\n", "hoi_to_coco_obj", "=", "np", ".", "zeros", "(", "[", "80", ",", "80", "]", ",", "np", ".", "float32", ")", "\n", "for", "k", "in", "label_trans_map", ":", "\n", "        ", "hoi_to_coco_obj", "[", "k", "]", "[", "label_trans_map", "[", "k", "]", "]", "=", "1.", "\n", "", "count", "=", "0", "\n", "if", "\"cls_prob_sp\"", "in", "net", ".", "predictions", ":", "\n", "        ", "fuse_res", "=", "tf", ".", "multiply", "(", "net", ".", "predictions", "[", "\"cls_prob_sp\"", "]", ",", "net", ".", "predictions", "[", "\"cls_prob_verbs\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "fuse_res", "=", "net", ".", "predictions", "[", "\"cls_prob_verbs\"", "]", "\n", "\n", "", "obj_scores", "=", "tf", ".", "matmul", "(", "fuse_res", ",", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", "/", "tf", ".", "matmul", "(", "ones", ",", "obj_to_HO_matrix", ",", "\n", "transpose_b", "=", "True", ")", "\n", "obj_scores", "=", "tf", ".", "matmul", "(", "obj_scores", ",", "hoi_to_coco_obj", ")", "\n", "if", "debug_type", "==", "0", ":", "\n", "        ", "obj_scores", "=", "obj_scores", "*", "0.5", "+", "o_all_score", "*", "0.5", "\n", "", "elif", "debug_type", "==", "1", ":", "\n", "        ", "obj_scores", "=", "obj_scores", "*", "0.3", "+", "o_all_score", "*", "0.7", "\n", "", "objid", "=", "tf", ".", "argmax", "(", "obj_scores", ",", "axis", "=", "-", "1", ")", "\n", "obj_scores", "=", "tf", ".", "reduce_max", "(", "obj_scores", ",", "axis", "=", "-", "1", ")", "\n", "_t", "[", "'im_detect'", "]", ".", "tic", "(", ")", "\n", "while", "True", ":", "\n", "        ", "_t", "[", "'im_detect'", "]", ".", "tic", "(", ")", "\n", "\n", "from", "tensorflow", ".", "python", ".", "framework", ".", "errors_impl", "import", "InvalidArgumentError", "\n", "try", ":", "\n", "            ", "pH", ",", "pO", ",", "pSp", ",", "pVerbs", ",", "pSpHO", ",", "pFuse", ",", "f_obj_score", ",", "f_obj_cls", ",", "_h_box", ",", "_o_box", ",", "_o_cls", ",", "_h_score", ",", "_o_score", ",", "_image_id", "=", "sess", ".", "run", "(", "[", "\n", "net", ".", "predictions", "[", "\"cls_prob_H\"", "]", "if", "'cls_prob_H'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "net", ".", "predictions", "[", "\"cls_prob_O\"", "]", "if", "'cls_prob_O'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "net", ".", "predictions", "[", "\"cls_prob_sp\"", "]", "if", "'cls_prob_sp'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "net", ".", "predictions", "[", "\"cls_prob_verbs\"", "]", "if", "'cls_prob_verbs'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "net", ".", "predictions", "[", "\"cls_prob_spverbs\"", "]", "if", "'cls_prob_spverbs'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "fuse_res", "if", "'cls_prob_sp'", "in", "net", ".", "predictions", "else", "h_box", ",", "obj_scores", ",", "objid", ",", "\n", "h_box", ",", "o_box", ",", "o_cls", ",", "h_score", ",", "o_score", ",", "image_id", "]", ")", "\n", "# print(pFuse.shape, f_obj_score.shape, f_obj_cls.shape)", "\n", "", "except", "InvalidArgumentError", "as", "e", ":", "\n", "# cls_prob_HO = np.zeros(shape=[blobs['sp'].shape[0], self.num_classes])", "\n", "            ", "if", "net", ".", "model_name", ".", "__contains__", "(", "'lamb'", ")", ":", "\n", "                ", "print", "(", "'InvalidArgumentError'", ",", "sess", ".", "run", "(", "[", "image_id", "]", ")", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "raise", "e", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "print", "(", "'END'", ")", "\n", "break", "\n", "# import ipdb;ipdb.set_trace()", "\n", "", "temp", "=", "[", "[", "_h_box", "[", "i", "]", ",", "_o_box", "[", "i", "]", ",", "_o_cls", "[", "i", "]", ",", "0", ",", "_h_score", "[", "i", "]", ",", "_o_score", "[", "i", "]", ",", "0", ",", "0", ",", "pSp", "[", "i", "]", ",", "pVerbs", "[", "i", "]", ",", "0", ",", "pFuse", "[", "i", "]", ",", "f_obj_score", "[", "i", "]", ",", "f_obj_cls", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "_h_box", ")", ")", "]", "\n", "\n", "# detection[_image_id] = temp", "\n", "if", "_image_id", "in", "detection", ":", "\n", "            ", "detection", "[", "_image_id", "]", ".", "extend", "(", "temp", ")", "\n", "", "else", ":", "\n", "            ", "detection", "[", "_image_id", "]", "=", "temp", "\n", "\n", "", "_t", "[", "'im_detect'", "]", ".", "toc", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "print", "(", "'\\rmodel: {} im_detect: {:d}/{:d}  {:d}, {:.3f}s'", ".", "format", "(", "net", ".", "model_name", ",", "count", ",", "10566", ",", "_image_id", ",", "_t", "[", "'im_detect'", "]", ".", "average_time", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "# if net.model_name.__contains__('_debugrl_') or 'DEBUG_NET' in os.environ:", "\n", "#     if count >= 1:", "\n", "#         print(temp)", "\n", "#         break", "\n", "\n", "# TODO remove", "\n", "# pickle.dump(detection, open('test_new.pkl', 'wb'))", "\n", "", "pickle", ".", "dump", "(", "detection", ",", "open", "(", "output_dir", ",", "\"wb\"", ")", ")", "\n", "del", "detection", "\n", "import", "gc", "\n", "gc", ".", "collect", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.test_net_data_fcl": [[541, 594], ["_t[].tic", "pickle.dump", "gc.collect", "ult.timer.Timer", "ult.timer.Timer", "_t[].tic", "_t[].toc", "print", "open", "sess.run", "detection[].extend", "net.model_name.__contains__", "print", "range", "print", "len", "sess.run"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc"], ["", "def", "test_net_data_fcl", "(", "sess", ",", "net", ",", "output_dir", ",", "h_box", ",", "o_box", ",", "o_cls", ",", "h_score", ",", "o_score", ",", "image_id", ")", ":", "\n", "    ", "detection", "=", "{", "}", "\n", "# prediction_HO  = net.test_image_HO(sess, im_orig, blobs)", "\n", "# timers", "\n", "_t", "=", "{", "'im_detect'", ":", "Timer", "(", ")", ",", "'misc'", ":", "Timer", "(", ")", "}", "\n", "last_img_id", "=", "-", "1", "\n", "count", "=", "0", "\n", "\n", "\n", "_t", "[", "'im_detect'", "]", ".", "tic", "(", ")", "\n", "while", "True", ":", "\n", "        ", "_t", "[", "'im_detect'", "]", ".", "tic", "(", ")", "\n", "\n", "from", "tensorflow", ".", "python", ".", "framework", ".", "errors_impl", "import", "InvalidArgumentError", "\n", "try", ":", "\n", "            ", "pH", ",", "pO", ",", "pSp", ",", "pVerbs", ",", "_h_box", ",", "_o_box", ",", "_o_cls", ",", "_h_score", ",", "_o_score", ",", "_image_id", "=", "sess", ".", "run", "(", "[", "\n", "net", ".", "predictions", "[", "\"cls_prob_H\"", "]", "if", "'cls_prob_H'", "in", "net", ".", "predictions", "else", "h_box", ",", "# from previous work", "\n", "net", ".", "predictions", "[", "\"cls_prob_O\"", "]", "if", "'cls_prob_O'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "net", ".", "predictions", "[", "\"cls_prob_sp\"", "]", "if", "'cls_prob_sp'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "net", ".", "predictions", "[", "\"cls_prob_hoi\"", "]", "if", "'cls_prob_hoi'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "h_box", ",", "o_box", ",", "o_cls", ",", "h_score", ",", "o_score", ",", "image_id", "]", ")", "\n", "", "except", "InvalidArgumentError", "as", "e", ":", "\n", "# cls_prob_HO = np.zeros(shape=[blobs['sp'].shape[0], self.num_classes])", "\n", "            ", "if", "net", ".", "model_name", ".", "__contains__", "(", "'lamb'", ")", ":", "\n", "                ", "print", "(", "'InvalidArgumentError'", ",", "sess", ".", "run", "(", "[", "image_id", "]", ")", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "raise", "e", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "print", "(", "'END'", ")", "\n", "break", "\n", "# additional predictions are for ablated study.", "\n", "", "temp", "=", "[", "[", "_h_box", "[", "i", "]", ",", "_o_box", "[", "i", "]", ",", "_o_cls", "[", "i", "]", ",", "0", ",", "_h_score", "[", "i", "]", ",", "_o_score", "[", "i", "]", ",", "pH", "[", "i", "]", ",", "pO", "[", "i", "]", ",", "pSp", "[", "i", "]", ",", "pVerbs", "[", "i", "]", ",", "0", "]", "for", "i", "in", "range", "(", "len", "(", "_h_box", ")", ")", "]", "\n", "\n", "# detection[_image_id] = temp", "\n", "if", "_image_id", "in", "detection", ":", "\n", "            ", "detection", "[", "_image_id", "]", ".", "extend", "(", "temp", ")", "\n", "", "else", ":", "\n", "            ", "detection", "[", "_image_id", "]", "=", "temp", "\n", "\n", "", "_t", "[", "'im_detect'", "]", ".", "toc", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "print", "(", "'\\rmodel: {} im_detect: {:d}/{:d}  {:d}, {:.3f}s'", ".", "format", "(", "net", ".", "model_name", ",", "count", ",", "10566", ",", "_image_id", ",", "_t", "[", "'im_detect'", "]", ".", "average_time", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "# if net.model_name.__contains__('_debugrl_') or 'DEBUG_NET' in os.environ:", "\n", "#     if count >= 1:", "\n", "#         print(temp)", "\n", "#         break", "\n", "\n", "", "pickle", ".", "dump", "(", "detection", ",", "open", "(", "output_dir", ",", "\"wb\"", ")", ")", "\n", "del", "detection", "\n", "import", "gc", "\n", "gc", ".", "collect", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.obtain_test_dataset_with_obj": [[596, 685], ["print", "print", "print", "numpy.random.seed", "tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "len", "numpy.random.seed", "pickle.load", "pickle.load.keys", "open", "pickle.load", "test_HICO.get_coco_blob", "blobs[].append", "numpy.array", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "tensorflow.TensorShape", "tensorflow.TensorShape", "open", "pickle.load", "numpy.array", "numpy.zeros", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "open", "pickle.load", "Exception", "numpy.max", "int", "open"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.get_coco_blob"], ["", "def", "obtain_test_dataset_with_obj", "(", "object_thres", ",", "human_thres", ",", "dataset_name", "=", "'test2015'", ",", "test_type", "=", "'vcl'", ",", "\n", "has_human_threhold", "=", "True", ",", "stride", "=", "200", ",", "hoi_nums", "=", "1", ",", "model_name", "=", "''", ")", ":", "\n", "    ", "print", "(", "'================================================================================'", ")", "\n", "from", "sys", "import", "version_info", "\n", "if", "version_info", ".", "major", "==", "3", ":", "\n", "# Test_RCNN = obtain_obj_boxes('train') # this is useless for object", "\n", "        ", "if", "test_type", "==", "'gtval2017'", ":", "\n", "            ", "Test_RCNN_coco", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "LOCAL_DATA", "+", "'/Test_GT_VCOCO_COCO_VCOCO_coco.pkl'", ",", "\"rb\"", ")", ")", "\n", "", "elif", "test_type", "==", "'gtobj365_coco'", ":", "\n", "# 116841", "\n", "            ", "Test_RCNN_coco", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "LOCAL_DATA", "+", "'/Test_GT_VCOCO_COCO_VCOCO_obj365_coco.pkl'", ",", "\"rb\"", ")", ")", "\n", "", "elif", "test_type", "==", "'gtobj365'", ":", "\n", "            ", "Test_RCNN_coco", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "LOCAL_DATA", "+", "'/Test_GT_VCOCO_COCO_VCOCO_obj365.pkl'", ",", "\"rb\"", ")", ")", "\n", "", "elif", "test_type", "==", "'gthico'", ":", "\n", "# we simply use the Ground truth HICO-DET test. This might contain repeats objects.", "\n", "# However this do not affect the comparison between ATL and Baseline", "\n", "            ", "Test_RCNN_coco", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "LOCAL_DATA", "+", "'/Test_GT_HICO_COCO_HICO.pkl'", ",", "\"rb\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'no test_type {}'", ".", "format", "(", "test_type", ")", ")", "\n", "#", "\n", "# print('sdf val all')", "\n", "", "", "print", "(", "'end load'", ",", "test_type", ")", "\n", "\n", "# keys = list(Test_RCNN.keys())", "\n", "print", "(", "len", "(", "Test_RCNN_coco", ".", "keys", "(", ")", ")", ",", "'length'", ")", "\n", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "def", "generator1", "(", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "# for line in glob.iglob(cfg.DATA_DIR + '/' + 'hico_20160224_det/images/'+dataset_name+'/*.jpg'):", "\n", "for", "coco_image_id", "in", "Test_RCNN_coco", ":", "\n", "            ", "for", "Object", "in", "Test_RCNN_coco", "[", "coco_image_id", "]", ":", "\n", "                ", "if", "not", "(", "np", ".", "max", "(", "Object", "[", "5", "]", ")", ">", "object_thres", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "test_type", "==", "'gtobj365'", "and", "int", "(", "Object", "[", "4", "]", ")", "not", "in", "[", "20", ",", "53", ",", "182", ",", "171", ",", "365", ",", "220", ",", "334", ",", "352", ",", "29", ",", "216", ",", "23", ",", "183", ",", "300", ",", "225", ",", "282", ",", "335", "]", ":", "\n", "# 29: [8, 37, 51, 68, 115, ],  # boots", "\n", "# 216: [1, 5],  # ship", "\n", "# 23: [8, 37, 39, 51, 68],  # flower", "\n", "# 183: [3, 37, 45, 51, 68, 105, ],  # basketball", "\n", "# 300: [8, 16, 24, 37, 51, 55, 68],  # cheese", "\n", "# 225: [8, 16, 24, 37, 51],  # watermelon", "\n", "# 282: [27, 37, 77, 88, 111, 112, 113],  # camel", "\n", "# 335: [27, 37, 77, 88, 111, 112, 113]  # lion", "\n", "                    ", "continue", "\n", "", "coco_im_orig", ",", "coco_im_shape", "=", "get_coco_blob", "(", "coco_image_id", ",", "test_type", ")", "\n", "# coco_im_orig, coco_im_shape = get_blob(coco_image_id)", "\n", "blobs", "=", "{", "}", "\n", "\n", "blobs", "[", "'H_num'", "]", "=", "0", "\n", "blobs", "[", "'H_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'sp'", "]", "=", "[", "]", "\n", "\n", "blobs", "[", "'O_cls'", "]", "=", "[", "]", "\n", "blobs", "[", "'H_score'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_score'", "]", "=", "[", "]", "\n", "\n", "blobs", "[", "'H_num'", "]", "+=", "2", "\n", "blobs", "[", "'H_boxes'", "]", ".", "append", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", ")", "\n", "\n", "obj_box", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "Object", "[", "2", "]", "[", "0", "]", ",", "Object", "[", "2", "]", "[", "1", "]", ",", "Object", "[", "2", "]", "[", "2", "]", ",", "Object", "[", "2", "]", "[", "3", "]", "]", ")", "\n", "blobs", "[", "'O_boxes'", "]", ".", "append", "(", "obj_box", ")", "\n", "# print(len(Human_out), len(Human_out[6]))", "\n", "\n", "blobs", "[", "'sp'", "]", ".", "append", "(", "np", ".", "zeros", "(", "[", "64", ",", "64", ",", "2", "]", ",", "np", ".", "float32", ")", ")", "\n", "blobs", "[", "'O_cls'", "]", ".", "append", "(", "Object", "[", "4", "]", ")", "\n", "blobs", "[", "'H_score'", "]", ".", "append", "(", "0", ")", "# we do not use this here", "\n", "blobs", "[", "'O_score'", "]", ".", "append", "(", "Object", "[", "5", "]", ")", "\n", "\n", "yield", "coco_im_orig", ",", "blobs", ",", "coco_image_id", "\n", "\n", "", "", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "generator1", ",", "output_types", "=", "(", "\n", "tf", ".", "float32", ",", "{", "'H_num'", ":", "tf", ".", "int32", ",", "'H_boxes'", ":", "tf", ".", "float32", ",", "'O_boxes'", ":", "tf", ".", "float32", ",", "'sp'", ":", "tf", ".", "float32", ",", "\n", "'O_cls'", ":", "tf", ".", "float32", ",", "'H_score'", ":", "tf", ".", "float32", ",", "'O_score'", ":", "tf", ".", "float32", "}", ",", "tf", ".", "int32", ",", ")", ",", "\n", "output_shapes", "=", "(", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "\n", "{", "'H_num'", ":", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "'O_cls'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'H_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'O_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", "}", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ")", "\n", ")", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.repeat(100000) # TODO improve", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "blobs", ",", "image_id", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "image", ",", "blobs", ",", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.test_net_data_api_wo_obj": [[687, 765], ["networks.tools.get_convert_matrix", "numpy.ones", "numpy.zeros", "tensorflow.matmul", "tensorflow.argmax", "tensorflow.reduce_max", "_t[].tic", "pickle.dump", "gc.collect", "ult.timer.Timer", "ult.timer.Timer", "tensorflow.multiply", "tensorflow.matmul", "tensorflow.matmul", "_t[].tic", "_t[].toc", "print", "net.model_name.__contains__", "open", "sess.run", "detection[].extend", "net.model_name.__contains__", "print", "range", "print", "len", "sess.run"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_convert_matrix", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc"], ["", "def", "test_net_data_api_wo_obj", "(", "sess", ",", "net", ",", "output_dir", ",", "h_box", ",", "o_box", ",", "o_cls", ",", "h_score", ",", "o_score", ",", "o_all_score", ",", "image_id", ",", "debug_type", "=", "0", ")", ":", "\n", "    ", "detection", "=", "{", "}", "\n", "verb_to_HO_matrix", ",", "obj_to_HO_matrix", "=", "get_cooccurence_matrix", "(", ")", "\n", "# prediction_HO  = net.test_image_HO(sess, im_orig, blobs)", "\n", "# timers", "\n", "ones", "=", "np", ".", "ones", "(", "[", "1", ",", "600", "]", ",", "np", ".", "float32", ")", "\n", "_t", "=", "{", "'im_detect'", ":", "Timer", "(", ")", ",", "'misc'", ":", "Timer", "(", ")", "}", "\n", "# convert HICO object to COCO objects.", "\n", "label_trans_map", "=", "{", "0", ":", "4", ",", "1", ":", "47", ",", "2", ":", "24", ",", "3", ":", "46", ",", "4", ":", "34", ",", "5", ":", "35", ",", "6", ":", "21", ",", "7", ":", "59", ",", "8", ":", "13", ",", "9", ":", "1", ",", "10", ":", "14", ",", "11", ":", "8", ",", "12", ":", "73", ",", "\n", "13", ":", "39", ",", "14", ":", "45", ",", "15", ":", "50", ",", "16", ":", "5", ",", "17", ":", "55", ",", "18", ":", "2", ",", "19", ":", "51", ",", "20", ":", "15", ",", "21", ":", "67", ",", "22", ":", "56", ",", "23", ":", "74", ",", "24", ":", "57", ",", "\n", "25", ":", "19", ",", "26", ":", "41", ",", "27", ":", "60", ",", "28", ":", "16", ",", "29", ":", "54", ",", "30", ":", "20", ",", "31", ":", "10", ",", "32", ":", "42", ",", "33", ":", "29", ",", "34", ":", "23", ",", "35", ":", "78", ",", "36", ":", "26", ",", "\n", "37", ":", "17", ",", "38", ":", "52", ",", "39", ":", "66", ",", "40", ":", "33", ",", "41", ":", "43", ",", "42", ":", "63", ",", "43", ":", "68", ",", "44", ":", "3", ",", "45", ":", "64", ",", "46", ":", "49", ",", "47", ":", "69", ",", "48", ":", "12", ",", "\n", "49", ":", "0", ",", "50", ":", "53", ",", "51", ":", "58", ",", "52", ":", "72", ",", "53", ":", "65", ",", "54", ":", "48", ",", "55", ":", "76", ",", "56", ":", "18", ",", "57", ":", "71", ",", "58", ":", "36", ",", "59", ":", "30", ",", "60", ":", "31", ",", "\n", "61", ":", "44", ",", "62", ":", "32", ",", "63", ":", "11", ",", "64", ":", "28", ",", "65", ":", "37", ",", "66", ":", "77", ",", "67", ":", "38", ",", "68", ":", "27", ",", "69", ":", "70", ",", "70", ":", "61", ",", "71", ":", "79", ",", "72", ":", "9", ",", "\n", "73", ":", "6", ",", "74", ":", "7", ",", "75", ":", "62", ",", "76", ":", "25", ",", "77", ":", "75", ",", "78", ":", "40", ",", "79", ":", "22", "}", "\n", "hoi_to_coco_obj", "=", "np", ".", "zeros", "(", "[", "80", ",", "80", "]", ",", "np", ".", "float32", ")", "\n", "for", "k", "in", "label_trans_map", ":", "\n", "        ", "hoi_to_coco_obj", "[", "k", "]", "[", "label_trans_map", "[", "k", "]", "]", "=", "1.", "\n", "", "last_img_id", "=", "-", "1", "\n", "count", "=", "0", "\n", "if", "\"cls_prob_sp\"", "in", "net", ".", "predictions", ":", "\n", "        ", "fuse_res", "=", "tf", ".", "multiply", "(", "net", ".", "predictions", "[", "\"cls_prob_sp\"", "]", ",", "net", ".", "predictions", "[", "\"cls_prob_verbs\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "fuse_res", "=", "net", ".", "predictions", "[", "\"cls_prob_verbs\"", "]", "\n", "\n", "", "obj_scores", "=", "tf", ".", "matmul", "(", "fuse_res", ",", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", "/", "tf", ".", "matmul", "(", "ones", ",", "obj_to_HO_matrix", ",", "\n", "transpose_b", "=", "True", ")", "\n", "obj_scores", "=", "tf", ".", "matmul", "(", "obj_scores", ",", "hoi_to_coco_obj", ")", "\n", "\n", "# obj_scores = obj_scores *  o_all_score", "\n", "objid", "=", "tf", ".", "argmax", "(", "obj_scores", ",", "axis", "=", "-", "1", ")", "\n", "obj_scores", "=", "tf", ".", "reduce_max", "(", "obj_scores", ",", "axis", "=", "-", "1", ")", "\n", "# obj_scores = tf.constant(1.0)", "\n", "_t", "[", "'im_detect'", "]", ".", "tic", "(", ")", "\n", "while", "True", ":", "\n", "        ", "_t", "[", "'im_detect'", "]", ".", "tic", "(", ")", "\n", "\n", "from", "tensorflow", ".", "python", ".", "framework", ".", "errors_impl", "import", "InvalidArgumentError", "\n", "try", ":", "\n", "            ", "pH", ",", "pO", ",", "pSp", ",", "pVerbs", ",", "pSpHO", ",", "pFuse", ",", "f_obj_score", ",", "f_obj_cls", ",", "_h_box", ",", "_o_box", ",", "_o_cls", ",", "_h_score", ",", "_o_score", ",", "_image_id", "=", "sess", ".", "run", "(", "[", "\n", "net", ".", "predictions", "[", "\"cls_prob_H\"", "]", "if", "'cls_prob_H'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "net", ".", "predictions", "[", "\"cls_prob_O\"", "]", "if", "'cls_prob_O'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "net", ".", "predictions", "[", "\"cls_prob_sp\"", "]", "if", "'cls_prob_sp'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "net", ".", "predictions", "[", "\"cls_prob_verbs\"", "]", "if", "'cls_prob_verbs'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "net", ".", "predictions", "[", "\"cls_prob_spverbs\"", "]", "if", "'cls_prob_spverbs'", "in", "net", ".", "predictions", "else", "h_box", ",", "\n", "fuse_res", "if", "'cls_prob_sp'", "in", "net", ".", "predictions", "else", "h_box", ",", "obj_scores", ",", "objid", ",", "\n", "h_box", ",", "o_box", ",", "o_cls", ",", "h_score", ",", "o_score", ",", "image_id", "]", ")", "\n", "", "except", "InvalidArgumentError", "as", "e", ":", "\n", "            ", "if", "net", ".", "model_name", ".", "__contains__", "(", "'lamb'", ")", ":", "\n", "                ", "print", "(", "'InvalidArgumentError'", ",", "sess", ".", "run", "(", "[", "image_id", "]", ")", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "raise", "e", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "print", "(", "'END'", ")", "\n", "break", "\n", "", "temp", "=", "[", "[", "_h_box", "[", "i", "]", ",", "_o_box", "[", "i", "]", ",", "_o_cls", "[", "i", "]", ",", "0", ",", "_h_score", "[", "i", "]", ",", "_o_score", "[", "i", "]", ",", "0", ",", "0", ",", "pSp", "[", "i", "]", ",", "pVerbs", "[", "i", "]", ",", "0", ",", "pFuse", "[", "i", "]", ",", "f_obj_score", "[", "i", "]", ",", "f_obj_cls", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "_h_box", ")", ")", "]", "\n", "\n", "# detection[_image_id] = temp", "\n", "if", "_image_id", "in", "detection", ":", "\n", "            ", "detection", "[", "_image_id", "]", ".", "extend", "(", "temp", ")", "\n", "", "else", ":", "\n", "            ", "detection", "[", "_image_id", "]", "=", "temp", "\n", "\n", "", "_t", "[", "'im_detect'", "]", ".", "toc", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "print", "(", "'\\rmodel: {} im_detect: {:d}/{:d}  {:d}, {:.3f}s'", ".", "format", "(", "net", ".", "model_name", ",", "count", ",", "10566", ",", "_image_id", ",", "_t", "[", "'im_detect'", "]", ".", "average_time", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "if", "net", ".", "model_name", ".", "__contains__", "(", "'_debugrl_'", ")", ":", "\n", "            ", "if", "count", ">=", "20", ":", "\n", "                ", "break", "\n", "\n", "# TODO remove", "\n", "# pickle.dump(detection, open('test_new.pkl', 'wb'))", "\n", "", "", "", "pickle", ".", "dump", "(", "detection", ",", "open", "(", "output_dir", ",", "\"wb\"", ")", ")", "\n", "del", "detection", "\n", "import", "gc", "\n", "gc", ".", "collect", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.obtain_test_dataset": [[768, 884], ["numpy.random.seed", "tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "numpy.random.seed", "glob.iglob", "pickle.load", "test_HICO.obtain_obj_boxes", "pickle.load", "pickle.load", "pickle.load", "int", "test_HICO.get_blob", "numpy.zeros", "numpy.multiply", "numpy.concatenate", "open", "open", "open", "open", "blobs.items", "tensorflow.TensorShape", "tensorflow.TensorShape", "min", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "numpy.max", "blobs[].append", "numpy.array", "blobs[].append", "blobs[].append", "numpy.zeros", "obj_box[].astype", "blobs[].append", "blobs[].append", "blobs[].append", "numpy.max", "numpy.all", "numpy.array", "ult.ult.Get_next_sp"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.obtain_obj_boxes", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.get_blob", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp"], ["", "def", "obtain_test_dataset", "(", "object_thres", ",", "human_thres", ",", "dataset_name", "=", "'test2015'", ")", ":", "\n", "    ", "from", "sys", "import", "version_info", "\n", "if", "dataset_name", "==", "'test2015'", ":", "\n", "        ", "if", "version_info", ".", "major", "==", "3", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Test_Faster_RCNN_R-50-PFN_2x_HICO_DET.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "Test_RCNN", "=", "obtain_obj_boxes", "(", "'default'", ")", "\n", "", "else", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Test_Faster_RCNN_R-50-PFN_2x_HICO_DET.pkl'", ",", "\"rb\"", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "version_info", ".", "major", "==", "3", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "", "else", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ")", "\n", "\n", "", "", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "def", "generator1", "(", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "i", "=", "0", "\n", "for", "line", "in", "glob", ".", "iglob", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/'", "+", "dataset_name", "+", "'/*.jpg'", ")", ":", "\n", "            ", "i", "+=", "1", "\n", "# if i > 30: # TODO remove", "\n", "#     break", "\n", "image_id", "=", "int", "(", "line", "[", "-", "9", ":", "-", "4", "]", ")", "\n", "# save image information", "\n", "im_orig", ",", "im_shape", "=", "get_blob", "(", "image_id", ")", "\n", "mask_all", "=", "np", ".", "zeros", "(", "shape", "=", "(", "1", ",", "im_shape", "[", "0", "]", ",", "im_shape", "[", "1", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "=", "{", "}", "\n", "\n", "blobs", "[", "'H_num'", "]", "=", "0", "\n", "blobs", "[", "'H_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'sp'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_cls'", "]", "=", "[", "]", "\n", "blobs", "[", "'H_score'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_score'", "]", "=", "[", "]", "\n", "for", "Human_out", "in", "Test_RCNN", "[", "image_id", "]", ":", "\n", "                ", "if", "(", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", ">", "human_thres", ")", "and", "(", "Human_out", "[", "1", "]", "==", "'Human'", ")", ":", "# This is a valid human", "\n", "\n", "# blobs['H_boxes'] = np.array(", "\n", "#     [0, Human_out[2][0], Human_out[2][1], Human_out[2][2], Human_out[2][3]]).reshape(1, 5)", "\n", "\n", "                    ", "for", "Object", "in", "Test_RCNN", "[", "image_id", "]", ":", "\n", "                        ", "if", "(", "np", ".", "max", "(", "Object", "[", "5", "]", ")", ">", "object_thres", ")", "and", "not", "(", "\n", "np", ".", "all", "(", "Object", "[", "2", "]", "==", "Human_out", "[", "2", "]", ")", ")", ":", "# This is a valid object", "\n", "\n", "                            ", "blobs", "[", "'H_num'", "]", "+=", "1", "\n", "blobs", "[", "'H_boxes'", "]", ".", "append", "(", "np", ".", "array", "(", "[", "0", ",", "Human_out", "[", "2", "]", "[", "0", "]", ",", "Human_out", "[", "2", "]", "[", "1", "]", ",", "Human_out", "[", "2", "]", "[", "2", "]", ",", "Human_out", "[", "2", "]", "[", "3", "]", "]", ")", ")", "\n", "obj_box", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "Object", "[", "2", "]", "[", "0", "]", ",", "Object", "[", "2", "]", "[", "1", "]", ",", "Object", "[", "2", "]", "[", "2", "]", ",", "Object", "[", "2", "]", "[", "3", "]", "]", ")", "\n", "blobs", "[", "'O_boxes'", "]", ".", "append", "(", "obj_box", ")", "\n", "blobs", "[", "'sp'", "]", ".", "append", "(", "Get_next_sp", "(", "Human_out", "[", "2", "]", ",", "Object", "[", "2", "]", ")", ")", "\n", "\n", "mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "im_shape", "[", "0", "]", ",", "im_shape", "[", "1", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "obj_box", "=", "obj_box", "[", "1", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "# print(obj_box)", "\n", "# print(obj_box, blobs['O_boxes'])", "\n", "mask", "[", "obj_box", "[", "0", "]", ":", "obj_box", "[", "2", "]", ",", "obj_box", "[", "1", "]", ":", "obj_box", "[", "3", "]", "]", "=", "1", "\n", "mask_all", "[", ":", ",", "obj_box", "[", "0", "]", ":", "obj_box", "[", "2", "]", ",", "obj_box", "[", "1", "]", ":", "obj_box", "[", "3", "]", "]", "=", "1", "\n", "# from skimage import transform", "\n", "# mask = transform.resize(mask, [im_shape[0] // 16, im_shape[1] // 16, 1], order=0,", "\n", "#                         preserve_range=True)", "\n", "blobs", "[", "'O_cls'", "]", ".", "append", "(", "Object", "[", "4", "]", ")", "\n", "blobs", "[", "'H_score'", "]", ".", "append", "(", "Human_out", "[", "5", "]", ")", "\n", "blobs", "[", "'O_score'", "]", ".", "append", "(", "Object", "[", "5", "]", ")", "\n", "\n", "", "", "", "", "if", "blobs", "[", "'H_num'", "]", "==", "0", ":", "\n", "# print('None ', image_id)", "\n", "                ", "continue", "\n", "# print(im_orig.shape, image_id, end=' ')", "\n", "# for k, v in blobs.items():", "\n", "#     if not k == 'H_num':", "\n", "#         blobs[k] = np.asarray(v)", "\n", "#         print(k, blobs[k].shape, end=' ')", "\n", "# print('\\n')", "\n", "", "im_mask", "=", "np", ".", "multiply", "(", "im_orig", ",", "mask_all", ")", "\n", "im_orig", "=", "np", ".", "concatenate", "(", "[", "im_orig", ",", "im_mask", "]", ",", "axis", "=", "0", ")", "\n", "start", "=", "0", "\n", "stride", "=", "200", "\n", "while", "start", "<", "blobs", "[", "'H_num'", "]", ":", "# save GPU memory", "\n", "                ", "b_temp", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "blobs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "not", "k", "==", "'H_num'", ":", "\n", "                        ", "b_temp", "[", "k", "]", "=", "blobs", "[", "k", "]", "[", "start", ":", "start", "+", "stride", "]", "\n", "\n", "", "", "b_temp", "[", "'H_num'", "]", "=", "min", "(", "start", "+", "stride", ",", "blobs", "[", "'H_num'", "]", ")", "-", "start", "\n", "start", "+=", "stride", "\n", "# print('b_temp' , im_orig.shape, image_id, end=' ')", "\n", "# for k, v in blobs.items():", "\n", "#     if not k == 'H_num':", "\n", "#         blobs[k] = np.asarray(v)", "\n", "#         print(k, blobs[k].shape, end=' ')", "\n", "# print('\\n')", "\n", "\n", "yield", "im_orig", ",", "b_temp", ",", "image_id", "\n", "# yield im_orig, blobs, image_id", "\n", "\n", "", "", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "generator1", ",", "output_types", "=", "(", "\n", "tf", ".", "float32", ",", "{", "'H_num'", ":", "tf", ".", "int32", ",", "'H_boxes'", ":", "tf", ".", "float32", ",", "'O_boxes'", ":", "tf", ".", "float32", ",", "'sp'", ":", "tf", ".", "float32", ",", "\n", "'O_cls'", ":", "tf", ".", "float32", ",", "'H_score'", ":", "tf", ".", "float32", ",", "'O_score'", ":", "tf", ".", "float32", "}", ",", "tf", ".", "int32", ",", ")", ",", "\n", "output_shapes", "=", "(", "tf", ".", "TensorShape", "(", "[", "2", ",", "None", ",", "None", ",", "3", "]", ")", ",", "\n", "{", "'H_num'", ":", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "'O_cls'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'H_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'O_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", "}", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ")", "\n", ")", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.repeat(100000) # TODO improve", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "blobs", ",", "image_id", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "image", ",", "blobs", ",", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.obtain_test_dataset1": [[886, 1039], ["print", "print", "numpy.random.seed", "tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "glob.iglob", "print", "numpy.random.seed", "test_HICO.obtain_obj_boxes", "pickle.load", "pickle.load", "pickle.load", "test_HICO.get_blob", "numpy.zeros", "open", "open", "open", "print", "len", "blobs.items", "tensorflow.TensorShape", "tensorflow.TensorShape", "range", "list_human_included.append", "list_object_included.append", "Human_out_list.append", "Object_list.append", "min", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "numpy.max", "str", "len", "len", "blobs[].append", "numpy.array", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "numpy.array", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "numpy.array", "ult.ult.Get_next_sp", "numpy.max", "numpy.all", "numpy.array", "ult.ult.Get_next_sp", "numpy.max", "len", "numpy.max", "numpy.max", "len", "numpy.max"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.obtain_obj_boxes", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.get_blob", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp"], ["", "def", "obtain_test_dataset1", "(", "object_thres", ",", "human_thres", ",", "dataset_name", "=", "'test2015'", ",", "test_type", "=", "'default'", ",", "\n", "has_human_threhold", "=", "True", ",", "stride", "=", "200", ",", "model_name", "=", "''", ")", ":", "\n", "    ", "print", "(", "'================================================================================'", ")", "\n", "print", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/'", "+", "dataset_name", "+", "'/*.jpg'", ",", "glob", ".", "iglob", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/'", "+", "dataset_name", "+", "'/*.jpg'", ")", ")", "\n", "from", "sys", "import", "version_info", "\n", "if", "dataset_name", "==", "'test2015'", ":", "\n", "        ", "print", "(", "test_type", ",", "version_info", ".", "major", ")", "\n", "if", "version_info", ".", "major", "==", "3", ":", "\n", "# Test_Faster_RCNN_R-50-PFN_2x_HICO_DET_with_pose", "\n", "            ", "Test_RCNN", "=", "obtain_obj_boxes", "(", "test_type", ")", "\n", "", "else", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Test_Faster_RCNN_R-50-PFN_2x_HICO_DET_with_pose.pkl'", ",", "\"rb\"", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "version_info", ".", "major", "==", "3", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "", "else", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ")", "\n", "\n", "", "", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "def", "generator1", "(", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "i", "=", "0", "\n", "# for line in glob.iglob(cfg.DATA_DIR + '/' + 'hico_20160224_det/images/'+dataset_name+'/*.jpg'):", "\n", "for", "image_id", "in", "Test_RCNN", ":", "\n", "            ", "i", "+=", "1", "\n", "# if i > 30: # TODO remove", "\n", "#     break", "\n", "# image_id = int(line[-9:-4])", "\n", "# save image information", "\n", "im_orig", ",", "im_shape", "=", "get_blob", "(", "image_id", ")", "\n", "mask_all", "=", "np", ".", "zeros", "(", "shape", "=", "(", "1", ",", "im_shape", "[", "0", "]", ",", "im_shape", "[", "1", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "=", "{", "}", "\n", "\n", "blobs", "[", "'H_num'", "]", "=", "0", "\n", "blobs", "[", "'H_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'sp'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_cls'", "]", "=", "[", "]", "\n", "blobs", "[", "'H_score'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_score'", "]", "=", "[", "]", "\n", "for", "Human_out", "in", "Test_RCNN", "[", "image_id", "]", ":", "\n", "                ", "if", "(", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", ">", "human_thres", ")", "and", "(", "Human_out", "[", "1", "]", "==", "'Human'", ")", ":", "# This is a valid human", "\n", "\n", "# blobs['H_boxes'] = np.array(", "\n", "#     [0, Human_out[2][0], Human_out[2][1], Human_out[2][2], Human_out[2][3]]).reshape(1, 5)", "\n", "\n", "                    ", "for", "Object", "in", "Test_RCNN", "[", "image_id", "]", ":", "\n", "                        ", "if", "(", "np", ".", "max", "(", "Object", "[", "5", "]", ")", ">", "object_thres", ")", "and", "not", "(", "\n", "np", ".", "all", "(", "Object", "[", "2", "]", "==", "Human_out", "[", "2", "]", ")", ")", ":", "# This is a valid object", "\n", "\n", "                            ", "blobs", "[", "'H_num'", "]", "+=", "1", "\n", "blobs", "[", "'H_boxes'", "]", ".", "append", "(", "np", ".", "array", "(", "[", "0", ",", "Human_out", "[", "2", "]", "[", "0", "]", ",", "Human_out", "[", "2", "]", "[", "1", "]", ",", "Human_out", "[", "2", "]", "[", "2", "]", ",", "Human_out", "[", "2", "]", "[", "3", "]", "]", ")", ")", "\n", "obj_box", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "Object", "[", "2", "]", "[", "0", "]", ",", "Object", "[", "2", "]", "[", "1", "]", ",", "Object", "[", "2", "]", "[", "2", "]", ",", "Object", "[", "2", "]", "[", "3", "]", "]", ")", "\n", "blobs", "[", "'O_boxes'", "]", ".", "append", "(", "obj_box", ")", "\n", "# print(len(Human_out), len(Human_out[6]))", "\n", "blobs", "[", "'sp'", "]", ".", "append", "(", "Get_next_sp", "(", "Human_out", "[", "2", "]", ",", "Object", "[", "2", "]", ")", ")", "\n", "\n", "blobs", "[", "'O_cls'", "]", ".", "append", "(", "Object", "[", "4", "]", ")", "\n", "blobs", "[", "'H_score'", "]", ".", "append", "(", "Human_out", "[", "5", "]", ")", "\n", "blobs", "[", "'O_score'", "]", ".", "append", "(", "Object", "[", "5", "]", ")", "\n", "\n", "", "", "", "", "\"\"\"\n            Notice: This strategy is based on TIN and is effective! This could improve the performance around 1.%\n            Re-weighting and This strategy improve our baseline to 18.04%.\n            \"\"\"", "\n", "if", "blobs", "[", "'H_num'", "]", "==", "0", "and", "has_human_threhold", ":", "\n", "                ", "print", "(", "'\\rDealing with zero-sample test Image '", "+", "str", "(", "image_id", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "\n", "list_human_included", "=", "[", "]", "\n", "list_object_included", "=", "[", "]", "\n", "Human_out_list", "=", "[", "]", "\n", "Object_list", "=", "[", "]", "\n", "\n", "test_pair_all", "=", "Test_RCNN", "[", "image_id", "]", "\n", "length", "=", "len", "(", "test_pair_all", ")", "\n", "\n", "flag_continue_searching", "=", "1", "\n", "\n", "while", "(", "len", "(", "list_human_included", ")", "<", "human_num_thres", ")", "or", "(", "\n", "len", "(", "list_object_included", ")", "<", "object_num_thres", ")", ":", "\n", "                    ", "h_max", "=", "[", "-", "1", ",", "-", "1.0", "]", "\n", "o_max", "=", "[", "-", "1", ",", "-", "1.0", "]", "\n", "flag_continue_searching", "=", "0", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                        ", "if", "test_pair_all", "[", "i", "]", "[", "1", "]", "==", "'Human'", ":", "\n", "                            ", "if", "(", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", ">", "h_max", "[", "1", "]", ")", "and", "not", "(", "i", "in", "list_human_included", ")", "and", "len", "(", "\n", "list_human_included", ")", "<", "human_num_thres", ":", "\n", "                                ", "h_max", "=", "[", "i", ",", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", "]", "\n", "flag_continue_searching", "=", "1", "\n", "", "", "else", ":", "\n", "                            ", "if", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", ">", "o_max", "[", "1", "]", "and", "not", "(", "i", "in", "list_object_included", ")", "and", "len", "(", "\n", "list_object_included", ")", "<", "object_num_thres", ":", "\n", "                                ", "o_max", "=", "[", "i", ",", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", "]", "\n", "flag_continue_searching", "=", "1", "\n", "\n", "", "", "", "if", "flag_continue_searching", "==", "0", ":", "\n", "                        ", "break", "\n", "\n", "", "list_human_included", ".", "append", "(", "h_max", "[", "0", "]", ")", "\n", "list_object_included", ".", "append", "(", "o_max", "[", "0", "]", ")", "\n", "\n", "Human_out_list", ".", "append", "(", "test_pair_all", "[", "h_max", "[", "0", "]", "]", ")", "\n", "Object_list", ".", "append", "(", "test_pair_all", "[", "o_max", "[", "0", "]", "]", ")", "\n", "\n", "", "for", "Human_out", "in", "Human_out_list", ":", "\n", "                    ", "for", "Object", "in", "Object_list", ":", "\n", "\n", "                        ", "blobs", "[", "'H_num'", "]", "+=", "1", "\n", "blobs", "[", "'H_boxes'", "]", ".", "append", "(", "\n", "np", ".", "array", "(", "[", "0", ",", "Human_out", "[", "2", "]", "[", "0", "]", ",", "Human_out", "[", "2", "]", "[", "1", "]", ",", "Human_out", "[", "2", "]", "[", "2", "]", ",", "Human_out", "[", "2", "]", "[", "3", "]", "]", ")", ")", "\n", "obj_box", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "Object", "[", "2", "]", "[", "0", "]", ",", "Object", "[", "2", "]", "[", "1", "]", ",", "Object", "[", "2", "]", "[", "2", "]", ",", "Object", "[", "2", "]", "[", "3", "]", "]", ")", "\n", "blobs", "[", "'O_boxes'", "]", ".", "append", "(", "obj_box", ")", "\n", "blobs", "[", "'sp'", "]", ".", "append", "(", "Get_next_sp", "(", "Human_out", "[", "2", "]", ",", "Object", "[", "2", "]", ",", "pattern_type", ")", ")", "\n", "blobs", "[", "'O_cls'", "]", ".", "append", "(", "Object", "[", "4", "]", ")", "\n", "blobs", "[", "'H_score'", "]", ".", "append", "(", "Human_out", "[", "5", "]", ")", "\n", "blobs", "[", "'O_score'", "]", ".", "append", "(", "Object", "[", "5", "]", ")", "\n", "\n", "", "", "", "if", "blobs", "[", "'H_num'", "]", "==", "0", ":", "\n", "# print('None ', image_id)", "\n", "                ", "continue", "\n", "", "start", "=", "0", "\n", "# stride = 200", "\n", "while", "start", "<", "blobs", "[", "'H_num'", "]", ":", "\n", "                ", "b_temp", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "blobs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "not", "k", "==", "'H_num'", ":", "\n", "                        ", "b_temp", "[", "k", "]", "=", "blobs", "[", "k", "]", "[", "start", ":", "start", "+", "stride", "]", "\n", "\n", "", "", "b_temp", "[", "'H_num'", "]", "=", "min", "(", "start", "+", "stride", ",", "blobs", "[", "'H_num'", "]", ")", "-", "start", "\n", "start", "+=", "stride", "\n", "yield", "im_orig", ",", "b_temp", ",", "image_id", "\n", "\n", "", "", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "generator1", ",", "output_types", "=", "(", "\n", "tf", ".", "float32", ",", "{", "'H_num'", ":", "tf", ".", "int32", ",", "'H_boxes'", ":", "tf", ".", "float32", ",", "'O_boxes'", ":", "tf", ".", "float32", ",", "'sp'", ":", "tf", ".", "float32", ",", "\n", "'O_cls'", ":", "tf", ".", "float32", ",", "'H_score'", ":", "tf", ".", "float32", ",", "'O_score'", ":", "tf", ".", "float32", "}", ",", "tf", ".", "int32", ",", ")", ",", "\n", "output_shapes", "=", "(", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "\n", "{", "'H_num'", ":", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "'O_cls'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'H_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'O_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", "}", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ")", "\n", ")", "\n", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "blobs", ",", "image_id", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "image", ",", "blobs", ",", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.obtain_obj_boxes": [[1040, 1061], ["pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "print", "pickle.load", "open", "pickle.load", "pickle.load", "open", "open"], "function", ["None"], ["", "def", "obtain_obj_boxes", "(", "test_type", ")", ":", "\n", "    ", "if", "test_type", "==", "'vcl'", ":", "\n", "# from VCL", "\n", "        ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "LOCAL_DATA", "+", "'/Test_HICO_res101_3x_FPN_hico.pkl'", ",", "\"rb\"", ")", ")", "\n", "", "elif", "test_type", "==", "'drg'", ":", "\n", "# from DRG", "\n", "        ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "LOCAL_DATA", "+", "'/test_HICO_finetuned_v3.pkl'", ",", "'rb'", ")", ")", "\n", "pass", "\n", "", "elif", "test_type", "==", "'gt'", ":", "\n", "        ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "LOCAL_DATA", "+", "'/gt_annotations.pkl'", ",", "'rb'", ")", ")", "\n", "", "elif", "test_type", "==", "'coco50'", ":", "\n", "        ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "LOCAL_DATA", "+", "'/Test_HICO_res50_coco_FPN_hico.pkl'", ",", "'rb'", ")", ")", "\n", "", "elif", "test_type", "==", "'coco101'", ":", "\n", "        ", "print", "(", "'coco101'", ")", "\n", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "LOCAL_DATA", "+", "'/Test_HICO_res101_coco101_FPN_hico.pkl'", ",", "'rb'", ")", ")", "\n", "", "elif", "test_type", "==", "'iCAN'", ":", "\n", "        ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Test_Faster_RCNN_R-50-PFN_2x_HICO_DET.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "", "else", ":", "\n", "        ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "LOCAL_DATA", "+", "'/pkl/Test_HICO_res101_3x_FPN_hico.pkl'", ",", "\"rb\"", ")", ")", "\n", "", "return", "Test_RCNN", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.obtain_test_dataset2": [[1063, 1225], ["numpy.random.seed", "tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "numpy.random.seed", "glob.iglob", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "int", "test_HICO.get_blob", "numpy.zeros", "numpy.multiply", "numpy.concatenate", "open", "pickle.load", "open", "open", "open", "print", "len", "blobs.items", "tensorflow.TensorShape", "tensorflow.TensorShape", "open", "range", "list_human_included.append", "list_object_included.append", "Human_out_list.append", "Object_list.append", "min", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "numpy.max", "str", "len", "len", "blobs[].append", "numpy.array", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "numpy.array", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "numpy.array", "ult.ult.Get_next_sp", "numpy.max", "numpy.all", "numpy.array", "ult.ult.Get_next_sp", "numpy.max", "len", "numpy.max", "numpy.max", "len", "numpy.max"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.get_blob", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp"], ["", "def", "obtain_test_dataset2", "(", "object_thres", ",", "human_thres", ",", "dataset_name", "=", "'test2015'", ",", "test_type", "=", "'default'", ")", ":", "\n", "    ", "from", "sys", "import", "version_info", "\n", "if", "dataset_name", "==", "'test2015'", ":", "\n", "        ", "if", "version_info", ".", "major", "==", "3", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Test_Faster_RCNN_R-50-PFN_2x_HICO_DET_with_pose.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "# Test_Faster_RCNN_R-50-PFN_2x_HICO_DET_with_pose", "\n", "if", "test_type", "!=", "'default'", ":", "\n", "                ", "Test_RCNN", "=", "pickle", ".", "load", "(", "\n", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Test_Faster_RCNN_R-50-PFN_2x_DET_finetune.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "", "", "else", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Test_Faster_RCNN_R-50-PFN_2x_HICO_DET.pkl'", ",", "\"rb\"", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "version_info", ".", "major", "==", "3", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "", "else", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ")", "\n", "\n", "", "", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "def", "generator1", "(", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "i", "=", "0", "\n", "for", "line", "in", "glob", ".", "iglob", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/'", "+", "dataset_name", "+", "'/*.jpg'", ")", ":", "\n", "            ", "i", "+=", "1", "\n", "# if i > 30: # TODO remove", "\n", "#     break", "\n", "image_id", "=", "int", "(", "line", "[", "-", "9", ":", "-", "4", "]", ")", "\n", "# save image information", "\n", "im_orig", ",", "im_shape", "=", "get_blob", "(", "image_id", ")", "\n", "mask_all", "=", "np", ".", "zeros", "(", "shape", "=", "(", "1", ",", "im_shape", "[", "0", "]", ",", "im_shape", "[", "1", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "=", "{", "}", "\n", "\n", "blobs", "[", "'H_num'", "]", "=", "0", "\n", "blobs", "[", "'H_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'sp'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_cls'", "]", "=", "[", "]", "\n", "blobs", "[", "'H_score'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_score'", "]", "=", "[", "]", "\n", "for", "Human_out", "in", "Test_RCNN", "[", "image_id", "]", ":", "\n", "                ", "if", "(", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", ">", "human_thres", ")", "and", "(", "Human_out", "[", "1", "]", "==", "'Human'", ")", ":", "# This is a valid human", "\n", "\n", "# blobs['H_boxes'] = np.array(", "\n", "#     [0, Human_out[2][0], Human_out[2][1], Human_out[2][2], Human_out[2][3]]).reshape(1, 5)", "\n", "\n", "                    ", "for", "Object", "in", "Test_RCNN", "[", "image_id", "]", ":", "\n", "                        ", "if", "(", "np", ".", "max", "(", "Object", "[", "5", "]", ")", ">", "object_thres", ")", "and", "not", "(", "\n", "np", ".", "all", "(", "Object", "[", "2", "]", "==", "Human_out", "[", "2", "]", ")", ")", ":", "# This is a valid object", "\n", "\n", "                            ", "blobs", "[", "'H_num'", "]", "+=", "1", "\n", "blobs", "[", "'H_boxes'", "]", ".", "append", "(", "np", ".", "array", "(", "[", "0", ",", "Human_out", "[", "2", "]", "[", "0", "]", ",", "Human_out", "[", "2", "]", "[", "1", "]", ",", "Human_out", "[", "2", "]", "[", "2", "]", ",", "Human_out", "[", "2", "]", "[", "3", "]", "]", ")", ")", "\n", "obj_box", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "Object", "[", "2", "]", "[", "0", "]", ",", "Object", "[", "2", "]", "[", "1", "]", ",", "Object", "[", "2", "]", "[", "2", "]", ",", "Object", "[", "2", "]", "[", "3", "]", "]", ")", "\n", "blobs", "[", "'O_boxes'", "]", ".", "append", "(", "obj_box", ")", "\n", "blobs", "[", "'sp'", "]", ".", "append", "(", "Get_next_sp", "(", "Human_out", "[", "2", "]", ",", "Object", "[", "2", "]", ")", ")", "\n", "# blobs['sp'].append(Get_next_sp_with_pose(Human_out[2], Object[2], Human_out[6]))", "\n", "\n", "\n", "blobs", "[", "'O_cls'", "]", ".", "append", "(", "Object", "[", "4", "]", ")", "\n", "blobs", "[", "'H_score'", "]", ".", "append", "(", "Human_out", "[", "5", "]", ")", "\n", "blobs", "[", "'O_score'", "]", ".", "append", "(", "Object", "[", "5", "]", ")", "\n", "\n", "", "", "", "", "if", "blobs", "[", "'H_num'", "]", "==", "0", ":", "\n", "                ", "print", "(", "'\\rDealing with zero-sample test Image '", "+", "str", "(", "image_id", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "\n", "list_human_included", "=", "[", "]", "\n", "list_object_included", "=", "[", "]", "\n", "Human_out_list", "=", "[", "]", "\n", "Object_list", "=", "[", "]", "\n", "\n", "test_pair_all", "=", "Test_RCNN", "[", "image_id", "]", "\n", "length", "=", "len", "(", "test_pair_all", ")", "\n", "\n", "flag_continue_searching", "=", "1", "\n", "\n", "while", "(", "len", "(", "list_human_included", ")", "<", "human_num_thres", ")", "or", "(", "\n", "len", "(", "list_object_included", ")", "<", "object_num_thres", ")", ":", "\n", "                    ", "h_max", "=", "[", "-", "1", ",", "-", "1.0", "]", "\n", "o_max", "=", "[", "-", "1", ",", "-", "1.0", "]", "\n", "flag_continue_searching", "=", "0", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                        ", "if", "test_pair_all", "[", "i", "]", "[", "1", "]", "==", "'Human'", ":", "\n", "                            ", "if", "(", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", ">", "h_max", "[", "1", "]", ")", "and", "not", "(", "i", "in", "list_human_included", ")", "and", "len", "(", "\n", "list_human_included", ")", "<", "human_num_thres", ":", "\n", "                                ", "h_max", "=", "[", "i", ",", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", "]", "\n", "flag_continue_searching", "=", "1", "\n", "", "", "else", ":", "\n", "                            ", "if", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", ">", "o_max", "[", "1", "]", "and", "not", "(", "i", "in", "list_object_included", ")", "and", "len", "(", "\n", "list_object_included", ")", "<", "object_num_thres", ":", "\n", "                                ", "o_max", "=", "[", "i", ",", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", "]", "\n", "flag_continue_searching", "=", "1", "\n", "\n", "", "", "", "if", "flag_continue_searching", "==", "0", ":", "\n", "                        ", "break", "\n", "\n", "", "list_human_included", ".", "append", "(", "h_max", "[", "0", "]", ")", "\n", "list_object_included", ".", "append", "(", "o_max", "[", "0", "]", ")", "\n", "\n", "Human_out_list", ".", "append", "(", "test_pair_all", "[", "h_max", "[", "0", "]", "]", ")", "\n", "Object_list", ".", "append", "(", "test_pair_all", "[", "o_max", "[", "0", "]", "]", ")", "\n", "\n", "", "for", "Human_out", "in", "Human_out_list", ":", "\n", "                    ", "for", "Object", "in", "Object_list", ":", "\n", "\n", "                        ", "blobs", "[", "'H_num'", "]", "+=", "1", "\n", "blobs", "[", "'H_boxes'", "]", ".", "append", "(", "\n", "np", ".", "array", "(", "[", "0", ",", "Human_out", "[", "2", "]", "[", "0", "]", ",", "Human_out", "[", "2", "]", "[", "1", "]", ",", "Human_out", "[", "2", "]", "[", "2", "]", ",", "Human_out", "[", "2", "]", "[", "3", "]", "]", ")", ")", "\n", "obj_box", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "Object", "[", "2", "]", "[", "0", "]", ",", "Object", "[", "2", "]", "[", "1", "]", ",", "Object", "[", "2", "]", "[", "2", "]", ",", "Object", "[", "2", "]", "[", "3", "]", "]", ")", "\n", "blobs", "[", "'O_boxes'", "]", ".", "append", "(", "obj_box", ")", "\n", "blobs", "[", "'sp'", "]", ".", "append", "(", "Get_next_sp", "(", "Human_out", "[", "2", "]", ",", "Object", "[", "2", "]", ")", ")", "\n", "# blobs['sp'].append(Get_next_sp_with_pose(Human_out[2], Object[2], Human_out[6]))", "\n", "\n", "\n", "blobs", "[", "'O_cls'", "]", ".", "append", "(", "Object", "[", "4", "]", ")", "\n", "blobs", "[", "'H_score'", "]", ".", "append", "(", "Human_out", "[", "5", "]", ")", "\n", "blobs", "[", "'O_score'", "]", ".", "append", "(", "Object", "[", "5", "]", ")", "\n", "\n", "", "", "", "if", "blobs", "[", "'H_num'", "]", "==", "0", ":", "\n", "# print('None ', image_id)", "\n", "                ", "continue", "\n", "# print(im_orig.shape, image_id, end=' ')", "\n", "# for k, v in blobs.items():", "\n", "#     if not k == 'H_num':", "\n", "#         blobs[k] = np.asarray(v)", "\n", "#         print(k, blobs[k].shape, end=' ')", "\n", "# print('\\n')", "\n", "", "im_mask", "=", "np", ".", "multiply", "(", "im_orig", ",", "mask_all", ")", "\n", "im_orig", "=", "np", ".", "concatenate", "(", "[", "im_orig", ",", "im_mask", "]", ",", "axis", "=", "0", ")", "\n", "start", "=", "0", "\n", "stride", "=", "200", "\n", "while", "start", "<", "blobs", "[", "'H_num'", "]", ":", "\n", "                ", "b_temp", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "blobs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "not", "k", "==", "'H_num'", ":", "\n", "                        ", "b_temp", "[", "k", "]", "=", "blobs", "[", "k", "]", "[", "start", ":", "start", "+", "stride", "]", "\n", "\n", "", "", "b_temp", "[", "'H_num'", "]", "=", "min", "(", "start", "+", "stride", ",", "blobs", "[", "'H_num'", "]", ")", "-", "start", "\n", "start", "+=", "stride", "\n", "\n", "yield", "im_orig", ",", "b_temp", ",", "image_id", "\n", "\n", "", "", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "generator1", ",", "output_types", "=", "(", "\n", "tf", ".", "float32", ",", "{", "'H_num'", ":", "tf", ".", "int32", ",", "'H_boxes'", ":", "tf", ".", "float32", ",", "'O_boxes'", ":", "tf", ".", "float32", ",", "'sp'", ":", "tf", ".", "float32", ",", "\n", "'O_cls'", ":", "tf", ".", "float32", ",", "'H_score'", ":", "tf", ".", "float32", ",", "'O_score'", ":", "tf", ".", "float32", "}", ",", "tf", ".", "int32", ",", ")", ",", "\n", "output_shapes", "=", "(", "tf", ".", "TensorShape", "(", "[", "2", ",", "None", ",", "None", ",", "3", "]", ")", ",", "\n", "{", "'H_num'", ":", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "'O_cls'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'H_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'O_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", "}", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ")", "\n", ")", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.repeat(100000) # TODO improve", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "blobs", ",", "image_id", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "image", ",", "blobs", ",", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.obtain_test_dataset_wo_obj": [[1227, 1374], ["print", "print", "numpy.random.seed", "tensorflow.data.Dataset.from_generator", "dataset.prefetch.prefetch", "dataset.prefetch.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "glob.iglob", "numpy.random.seed", "test_HICO.obtain_obj_boxes", "pickle.load", "pickle.load", "test_HICO.get_blob", "sorted", "sorted", "open", "open", "print", "len", "blobs.items", "tensorflow.TensorShape", "tensorflow.TensorShape", "range", "list_human_included.append", "list_object_included.append", "Human_out_list.append", "Object_list.append", "min", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "numpy.max", "str", "len", "len", "blobs[].append", "numpy.array", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "numpy.array", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "blobs[].append", "numpy.array", "ult.ult.Get_next_sp", "len", "blobs[].append", "blobs[].append", "numpy.max", "numpy.all", "numpy.array", "ult.ult.Get_next_sp", "numpy.ones", "numpy.max", "len", "numpy.max", "numpy.max", "len", "numpy.max"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.obtain_obj_boxes", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_HICO.get_blob", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.Get_next_sp"], ["", "def", "obtain_test_dataset_wo_obj", "(", "object_thres", ",", "human_thres", ",", "dataset_name", "=", "'test2015'", ",", "test_type", "=", "'default'", ",", "has_human_threhold", "=", "True", ",", "stride", "=", "200", ")", ":", "\n", "    ", "print", "(", "'================================================================================'", ")", "\n", "print", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/'", "+", "dataset_name", "+", "'/*.jpg'", ",", "glob", ".", "iglob", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'hico_20160224_det/images/'", "+", "dataset_name", "+", "'/*.jpg'", ")", ")", "\n", "from", "sys", "import", "version_info", "\n", "if", "dataset_name", "==", "'test2015'", ":", "\n", "        ", "if", "version_info", ".", "major", "==", "3", ":", "\n", "            ", "Test_RCNN", "=", "obtain_obj_boxes", "(", "test_type", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "version_info", ".", "major", "==", "3", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "", "else", ":", "\n", "            ", "Test_RCNN", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'Trainval_GT_HICO.pkl'", ",", "\"rb\"", ")", ")", "\n", "\n", "", "", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "def", "generator1", "(", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "i", "=", "0", "\n", "for", "image_id", "in", "Test_RCNN", ":", "\n", "            ", "i", "+=", "1", "\n", "im_orig", ",", "im_shape", "=", "get_blob", "(", "image_id", ")", "\n", "blobs", "=", "{", "}", "\n", "\n", "blobs", "[", "'H_num'", "]", "=", "0", "\n", "blobs", "[", "'H_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_boxes'", "]", "=", "[", "]", "\n", "blobs", "[", "'sp'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_cls'", "]", "=", "[", "]", "\n", "blobs", "[", "'H_score'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_score'", "]", "=", "[", "]", "\n", "blobs", "[", "'O_all_score'", "]", "=", "[", "]", "\n", "\n", "human_out_list", "=", "sorted", "(", "[", "H", "for", "H", "in", "Test_RCNN", "[", "image_id", "]", "if", "H", "[", "1", "]", "==", "'Human'", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "5", "]", ",", "reverse", "=", "True", ")", "\n", "obj_out_list", "=", "sorted", "(", "[", "H", "for", "H", "in", "Test_RCNN", "[", "image_id", "]", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "5", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "# for Human_out in Test_RCNN[image_id]:", "\n", "for", "Human_out", "in", "human_out_list", ":", "\n", "                ", "if", "(", "np", ".", "max", "(", "Human_out", "[", "5", "]", ")", ">", "human_thres", ")", "and", "(", "Human_out", "[", "1", "]", "==", "'Human'", ")", ":", "# This is a valid human", "\n", "\n", "# blobs['H_boxes'] = np.array(", "\n", "#     [0, Human_out[2][0], Human_out[2][1], Human_out[2][2], Human_out[2][3]]).reshape(1, 5)", "\n", "\n", "                    ", "for", "Object", "in", "obj_out_list", ":", "\n", "                        ", "if", "(", "np", ".", "max", "(", "Object", "[", "5", "]", ")", ">", "object_thres", ")", "and", "not", "(", "\n", "np", ".", "all", "(", "Object", "[", "2", "]", "==", "Human_out", "[", "2", "]", ")", ")", ":", "# This is a valid object", "\n", "\n", "                            ", "blobs", "[", "'H_num'", "]", "+=", "1", "\n", "blobs", "[", "'H_boxes'", "]", ".", "append", "(", "np", ".", "array", "(", "[", "0", ",", "Human_out", "[", "2", "]", "[", "0", "]", ",", "Human_out", "[", "2", "]", "[", "1", "]", ",", "Human_out", "[", "2", "]", "[", "2", "]", ",", "Human_out", "[", "2", "]", "[", "3", "]", "]", ")", ")", "\n", "obj_box", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "Object", "[", "2", "]", "[", "0", "]", ",", "Object", "[", "2", "]", "[", "1", "]", ",", "Object", "[", "2", "]", "[", "2", "]", ",", "Object", "[", "2", "]", "[", "3", "]", "]", ")", "\n", "blobs", "[", "'O_boxes'", "]", ".", "append", "(", "obj_box", ")", "\n", "blobs", "[", "'sp'", "]", ".", "append", "(", "Get_next_sp", "(", "Human_out", "[", "2", "]", ",", "Object", "[", "2", "]", ")", ")", "\n", "blobs", "[", "'O_cls'", "]", ".", "append", "(", "Object", "[", "4", "]", ")", "\n", "blobs", "[", "'H_score'", "]", ".", "append", "(", "Human_out", "[", "5", "]", ")", "\n", "blobs", "[", "'O_score'", "]", ".", "append", "(", "Object", "[", "5", "]", ")", "\n", "\n", "", "", "", "", "if", "blobs", "[", "'H_num'", "]", "==", "0", "and", "has_human_threhold", ":", "\n", "                ", "print", "(", "'\\rDealing with zero-sample test Image '", "+", "str", "(", "image_id", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "\n", "list_human_included", "=", "[", "]", "\n", "list_object_included", "=", "[", "]", "\n", "Human_out_list", "=", "[", "]", "\n", "Object_list", "=", "[", "]", "\n", "\n", "test_pair_all", "=", "obj_out_list", "\n", "length", "=", "len", "(", "test_pair_all", ")", "\n", "\n", "flag_continue_searching", "=", "1", "\n", "\n", "while", "(", "len", "(", "list_human_included", ")", "<", "human_num_thres", ")", "or", "(", "\n", "len", "(", "list_object_included", ")", "<", "object_num_thres", ")", ":", "\n", "                    ", "h_max", "=", "[", "-", "1", ",", "-", "1.0", "]", "\n", "o_max", "=", "[", "-", "1", ",", "-", "1.0", "]", "\n", "flag_continue_searching", "=", "0", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                        ", "if", "test_pair_all", "[", "i", "]", "[", "1", "]", "==", "'Human'", ":", "\n", "                            ", "if", "(", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", ">", "h_max", "[", "1", "]", ")", "and", "not", "(", "i", "in", "list_human_included", ")", "and", "len", "(", "\n", "list_human_included", ")", "<", "human_num_thres", ":", "\n", "                                ", "h_max", "=", "[", "i", ",", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", "]", "\n", "flag_continue_searching", "=", "1", "\n", "", "", "else", ":", "\n", "                            ", "if", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", ">", "o_max", "[", "1", "]", "and", "not", "(", "i", "in", "list_object_included", ")", "and", "len", "(", "\n", "list_object_included", ")", "<", "object_num_thres", ":", "\n", "                                ", "o_max", "=", "[", "i", ",", "np", ".", "max", "(", "test_pair_all", "[", "i", "]", "[", "5", "]", ")", "]", "\n", "flag_continue_searching", "=", "1", "\n", "\n", "", "", "", "if", "flag_continue_searching", "==", "0", ":", "\n", "                        ", "break", "\n", "\n", "", "list_human_included", ".", "append", "(", "h_max", "[", "0", "]", ")", "\n", "list_object_included", ".", "append", "(", "o_max", "[", "0", "]", ")", "\n", "\n", "Human_out_list", ".", "append", "(", "test_pair_all", "[", "h_max", "[", "0", "]", "]", ")", "\n", "Object_list", ".", "append", "(", "test_pair_all", "[", "o_max", "[", "0", "]", "]", ")", "\n", "\n", "", "for", "Human_out", "in", "Human_out_list", ":", "\n", "                    ", "for", "Object", "in", "Object_list", ":", "\n", "\n", "                        ", "blobs", "[", "'H_num'", "]", "+=", "1", "\n", "blobs", "[", "'H_boxes'", "]", ".", "append", "(", "\n", "np", ".", "array", "(", "[", "0", ",", "Human_out", "[", "2", "]", "[", "0", "]", ",", "Human_out", "[", "2", "]", "[", "1", "]", ",", "Human_out", "[", "2", "]", "[", "2", "]", ",", "Human_out", "[", "2", "]", "[", "3", "]", "]", ")", ")", "\n", "obj_box", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "Object", "[", "2", "]", "[", "0", "]", ",", "Object", "[", "2", "]", "[", "1", "]", ",", "Object", "[", "2", "]", "[", "2", "]", ",", "Object", "[", "2", "]", "[", "3", "]", "]", ")", "\n", "blobs", "[", "'O_boxes'", "]", ".", "append", "(", "obj_box", ")", "\n", "blobs", "[", "'sp'", "]", ".", "append", "(", "Get_next_sp", "(", "Human_out", "[", "2", "]", ",", "Object", "[", "2", "]", ")", ")", "\n", "\n", "blobs", "[", "'O_cls'", "]", ".", "append", "(", "Object", "[", "4", "]", ")", "\n", "blobs", "[", "'H_score'", "]", ".", "append", "(", "Human_out", "[", "5", "]", ")", "\n", "blobs", "[", "'O_score'", "]", ".", "append", "(", "Object", "[", "5", "]", ")", "\n", "if", "len", "(", "Object", ")", ">=", "7", ":", "\n", "                            ", "blobs", "[", "'O_all_score'", "]", ".", "append", "(", "Object", "[", "6", "]", ")", "\n", "", "else", ":", "\n", "                            ", "blobs", "[", "'O_all_score'", "]", ".", "append", "(", "np", ".", "ones", "(", "[", "80", "]", ",", "np", ".", "float32", ")", ")", "\n", "\n", "", "", "", "", "if", "blobs", "[", "'H_num'", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "start", "=", "0", "\n", "# stride = 200", "\n", "while", "start", "<", "blobs", "[", "'H_num'", "]", ":", "\n", "                ", "b_temp", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "blobs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "not", "k", "==", "'H_num'", ":", "\n", "                        ", "b_temp", "[", "k", "]", "=", "blobs", "[", "k", "]", "[", "start", ":", "start", "+", "stride", "]", "\n", "\n", "", "", "b_temp", "[", "'H_num'", "]", "=", "min", "(", "start", "+", "stride", ",", "blobs", "[", "'H_num'", "]", ")", "-", "start", "\n", "start", "+=", "stride", "\n", "yield", "im_orig", ",", "b_temp", ",", "image_id", "\n", "\n", "", "", "", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "generator1", ",", "output_types", "=", "(", "\n", "tf", ".", "float32", ",", "{", "'H_num'", ":", "tf", ".", "int32", ",", "'H_boxes'", ":", "tf", ".", "float32", ",", "'O_boxes'", ":", "tf", ".", "float32", ",", "'sp'", ":", "tf", ".", "float32", ",", "\n", "'O_cls'", ":", "tf", ".", "float32", ",", "'H_score'", ":", "tf", ".", "float32", ",", "'O_score'", ":", "tf", ".", "float32", ",", "'O_all_score'", ":", "tf", ".", "float32", "}", ",", "tf", ".", "int32", ",", ")", ",", "\n", "output_shapes", "=", "(", "tf", ".", "TensorShape", "(", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", ",", "\n", "{", "'H_num'", ":", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "'H_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'O_boxes'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "5", "]", ")", ",", "\n", "'sp'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "64", ",", "64", ",", "2", "]", ")", ",", "\n", "'O_cls'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'H_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'O_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'O_all_score'", ":", "tf", ".", "TensorShape", "(", "[", "None", ",", "80", "]", ")", "}", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ")", "\n", ")", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "100", ")", "\n", "# dataset = dataset.repeat(100000) # TODO improve", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "image", ",", "blobs", ",", "image_id", "=", "iterator", ".", "get_next", "(", ")", "\n", "return", "image", ",", "blobs", ",", "image_id", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO.SolverWrapper.__init__": [[29, 42], ["networks.VCL.VCL"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sess", ",", "network", ",", "Trainval_GT", ",", "Trainval_N", ",", "output_dir", ",", "tbdir", ",", "Pos_augment", ",", "Neg_select", ",", "Restore_flag", ",", "pretrained_model", ")", ":", "\n", "\n", "        ", "self", ".", "net", "=", "network", "\n", "self", ".", "Trainval_GT", "=", "Trainval_GT", "\n", "self", ".", "Trainval_N", "=", "Trainval_N", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "tbdir", "=", "tbdir", "\n", "self", ".", "Pos_augment", "=", "Pos_augment", "\n", "self", ".", "Neg_select", "=", "Neg_select", "\n", "self", ".", "Restore_flag", "=", "Restore_flag", "\n", "self", ".", "pretrained_model", "=", "pretrained_model", "\n", "\n", "self", ".", "compose_feature_helper", "=", "VCL", "(", "network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO.SolverWrapper.snapshot": [[43, 61], ["train_Solver_HICO.SolverWrapper.net.model_name.__contains__", "os.path.join", "train_Solver_HICO.SolverWrapper.saver.save", "print", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "def", "snapshot", "(", "self", ",", "sess", ",", "iter", ")", ":", "\n", "        ", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'multi'", ")", ":", "\n", "            ", "snapshot_iters", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_ITERS", "*", "5", "//", "2", "\n", "", "else", ":", "\n", "            ", "snapshot_iters", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_ITERS", "*", "5", "\n", "\n", "", "if", "(", "iter", "+", "1", ")", "%", "snapshot_iters", "==", "0", "and", "iter", "!=", "0", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "output_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "output_dir", ")", "\n", "\n", "# Store the model snapshot", "\n", "", "filename", "=", "'HOI'", "+", "'_iter_{:d}'", ".", "format", "(", "iter", "+", "1", ")", "+", "'.ckpt'", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "filename", ")", "\n", "\n", "# for v in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES) + tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES):", "\n", "#     print(v.name)", "\n", "self", ".", "saver", ".", "save", "(", "sess", ",", "filename", ")", "\n", "print", "(", "'Wrote snapshot to: {:s}'", ".", "format", "(", "filename", ")", ",", "iter", "/", "snapshot_iters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO.SolverWrapper.get_step_factor": [[62, 69], ["train_Solver_HICO.SolverWrapper.net.model_name.__contains__"], "methods", ["None"], ["", "", "def", "get_step_factor", "(", "self", ")", ":", "\n", "        ", "step_factor", "=", "5", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'multi'", ")", ":", "\n", "            ", "step_factor", "=", "2.5", "\n", "", "else", ":", "\n", "            ", "step_factor", "=", "5", "\n", "", "return", "step_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO.SolverWrapper.get_classifier_variables": [[70, 76], ["tensorflow.trainable_variables", "v.name.__contains__", "v.name.__contains__", "v.name.__contains__"], "methods", ["None"], ["", "def", "get_classifier_variables", "(", "self", ")", ":", "\n", "        ", "variables", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "\n", "if", "v", ".", "name", ".", "__contains__", "(", "'Concat_verbs'", ")", "\n", "or", "v", ".", "name", ".", "__contains__", "(", "'fc7_verbs'", ")", "\n", "or", "v", ".", "name", ".", "__contains__", "(", "'classification/cls_score_verbs'", ")", "]", "\n", "return", "variables", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO.SolverWrapper.construct_graph": [[78, 113], ["sess.graph.as_default", "tensorflow.set_random_seed", "train_Solver_HICO.SolverWrapper.net.create_architecture", "train_Solver_HICO.SolverWrapper.get_init_step", "tensorflow.Variable", "train_Solver_HICO.SolverWrapper.get_step_factor", "train_Solver_HICO.SolverWrapper.get_optimzer_lr", "train_Solver_HICO.SolverWrapper.optimizer.apply_gradients", "tensorflow.summary.scalar", "tensorflow.train.Saver", "tensorflow.summary.FileWriter", "tensorflow.trainable_variables", "train_Solver_HICO.SolverWrapper.optimizer.compute_gradients", "print", "tensorflow.trainable_variables", "tensorflow.clip_by_norm"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.create_architecture", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_init_step", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_step_factor", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_optimzer_lr"], ["", "def", "construct_graph", "(", "self", ",", "sess", ")", ":", "\n", "        ", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "\n", "# Set the random seed for tensorflow", "\n", "            ", "tf", ".", "set_random_seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "\n", "# Build the main computation graph", "\n", "layers", "=", "self", ".", "net", ".", "create_architecture", "(", "True", ")", "# is_training flag: True", "\n", "\n", "# Define the loss", "\n", "\n", "init_step", "=", "self", ".", "get_init_step", "(", ")", "\n", "\n", "global_step", "=", "tf", ".", "Variable", "(", "init_step", ",", "trainable", "=", "False", ",", "name", "=", "'global_step'", ")", "\n", "\n", "step_factor", "=", "self", ".", "get_step_factor", "(", ")", "\n", "lr", ",", "self", ".", "optimizer", "=", "self", ".", "get_optimzer_lr", "(", "global_step", ",", "step_factor", ")", "\n", "capped_gvs", "=", "[", "]", "\n", "\n", "loss", "=", "0", "\n", "\n", "if", "'total_loss'", "in", "layers", ":", "\n", "                ", "loss", "=", "layers", "[", "'total_loss'", "]", "+", "loss", "\n", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "                    ", "print", "(", "'varaibles:'", ",", "v", ")", "\n", "", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "loss", ",", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "1.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "grads_and_vars", "if", "grad", "is", "not", "None", "]", "\n", "\n", "", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ",", "global_step", "=", "global_step", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'lr'", ",", "lr", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_KEPT", ")", "\n", "# Write the train and validation information to tensorboard", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "tbdir", ",", "sess", ".", "graph", ")", "\n", "\n", "", "return", "lr", ",", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO.SolverWrapper.get_optimzer_lr": [[114, 139], ["ult.ult.get_epoch_iters", "tensorflow.train.exponential_decay", "tensorflow.train.MomentumOptimizer", "train_Solver_HICO.SolverWrapper.net.model_name.__contains__", "print", "cosine_decay_restarts", "tensorflow.train.MomentumOptimizer", "train_Solver_HICO.SolverWrapper.net.model_name.__contains__", "tensorflow.train.exponential_decay", "tensorflow.train.MomentumOptimizer", "train_Solver_HICO.SolverWrapper.net.model_name.__contains__", "int", "tensorflow.train.exponential_decay", "tensorflow.train.MomentumOptimizer", "int"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_epoch_iters"], ["", "def", "get_optimzer_lr", "(", "self", ",", "global_step", ",", "step_factor", ")", ":", "\n", "        ", "gamma", "=", "cfg", ".", "TRAIN", ".", "GAMMA", "\n", "epoch_iters", "=", "get_epoch_iters", "(", "self", ".", "net", ".", "model_name", ")", "\n", "stepsize", "=", "epoch_iters", "*", "2", "\n", "\n", "lr", "=", "tf", ".", "train", ".", "exponential_decay", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", "*", "10", ",", "global_step", ",", "stepsize", ",", "\n", "gamma", ",", "staircase", "=", "True", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr", ",", "cfg", ".", "TRAIN", ".", "MOMENTUM", ")", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'cosine'", ")", ":", "\n", "            ", "print", "(", "'cosine ========='", ")", "\n", "first_decay_steps", "=", "epoch_iters", "*", "10", "# 2 epoches", "\n", "from", "tensorflow", ".", "python", ".", "training", ".", "learning_rate_decay", "import", "cosine_decay_restarts", "\n", "lr", "=", "cosine_decay_restarts", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", "*", "10", ",", "global_step", ",", "first_decay_steps", ",", "t_mul", "=", "2.0", ",", "\n", "m_mul", "=", "0.9", ",", "alpha", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", "*", "0.1", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr", ",", "cfg", ".", "TRAIN", ".", "MOMENTUM", ")", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'zsrare'", ")", ":", "#rare first", "\n", "            ", "lr", "=", "tf", ".", "train", ".", "exponential_decay", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", "*", "10", ",", "global_step", ",", "\n", "int", "(", "cfg", ".", "TRAIN", ".", "STEPSIZE", "*", "2", ")", ",", "\n", "gamma", ",", "staircase", "=", "True", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr", ",", "cfg", ".", "TRAIN", ".", "MOMENTUM", ")", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'zsnrare'", ")", ":", "# non rare first", "\n", "            ", "lr", "=", "tf", ".", "train", ".", "exponential_decay", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", "*", "10", ",", "global_step", ",", "int", "(", "cfg", ".", "TRAIN", ".", "STEPSIZE", "*", "step_factor", ")", ",", "\n", "gamma", ",", "staircase", "=", "True", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr", ",", "cfg", ".", "TRAIN", ".", "MOMENTUM", ")", "\n", "", "return", "lr", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO.SolverWrapper.get_init_step": [[140, 149], ["tensorflow.train.get_checkpoint_state", "int", "print", "[].split", "int.replace", "tensorflow.train.get_checkpoint_state.model_checkpoint_path.split"], "methods", ["None"], ["", "def", "get_init_step", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "Restore_flag", "==", "-", "1", ":", "\n", "            ", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "self", ".", "output_dir", ")", "\n", "init_step", "=", "ckpt", ".", "model_checkpoint_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "init_step", "=", "int", "(", "init_step", ".", "replace", "(", "'.ckpt'", ",", "''", ")", ")", "\n", "print", "(", "\"Init Step:\"", ",", "init_step", ")", "\n", "", "else", ":", "\n", "            ", "init_step", "=", "0", "\n", "", "return", "init_step", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO.SolverWrapper.switch_checkpoint_path": [[150, 154], ["model_checkpoint_path.replace.replace.replace", "model_checkpoint_path.replace.replace.split"], "methods", ["None"], ["", "def", "switch_checkpoint_path", "(", "self", ",", "model_checkpoint_path", ")", ":", "\n", "        ", "head", "=", "model_checkpoint_path", ".", "split", "(", "'Weights'", ")", "[", "0", "]", "\n", "model_checkpoint_path", "=", "model_checkpoint_path", ".", "replace", "(", "head", ",", "cfg", ".", "LOCAL_DATA", "+", "'/'", ")", "\n", "return", "model_checkpoint_path", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO.SolverWrapper.from_snapshot": [[155, 275], ["print", "tensorflow.train.get_checkpoint_state", "sess.run", "tensorflow.train.Saver", "train_Solver_HICO.SolverWrapper.switch_checkpoint_path", "tensorflow.train.Saver.restore", "print", "sess.run", "print", "tensorflow.train.Saver", "train_Solver_HICO.SolverWrapper.saver_restore.restore", "sess.run", "train_Solver_HICO.SolverWrapper.net.model_name.__contains__", "print", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.train.Saver", "train_Solver_HICO.SolverWrapper.saver_restore.restore", "tensorflow.global_variables_initializer", "print", "tensorflow.train.get_checkpoint_state", "tensorflow.train.Saver", "tensorflow.train.Saver.restore", "print", "tensorflow.global_variables_initializer", "tensorflow.global_variables_initializer", "tensorflow.model_variables", "tensorflow.train.Saver", "train_Solver_HICO.SolverWrapper.saver_restore.restore", "tensorflow.model_variables", "tensorflow.train.Saver", "train_Solver_HICO.SolverWrapper.saver_restore.restore", "tensorflow.model_variables", "tensorflow.train.Saver", "train_Solver_HICO.SolverWrapper.saver_restore.restore", "tensorflow.global_variables", "train_Solver_HICO.SolverWrapper.switch_checkpoint_path", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "v.name.__contains__", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "ele.name[].replace", "ele.name[].replace", "ele.name[].replace"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.obtain_hoi_preds.switch_checkpoint_path", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.obtain_hoi_preds.switch_checkpoint_path"], ["", "def", "from_snapshot", "(", "self", ",", "sess", ")", ":", "\n", "# for v in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES) + tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES):", "\n", "#     print(v.name)", "\n", "        ", "if", "self", ".", "Restore_flag", "==", "-", "7", ":", "\n", "            ", "restore_dirs", "=", "'/'", "# TODO set your pretrained model", "\n", "print", "(", "'restore_from'", ",", "restore_dirs", ")", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "restore_dirs", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "variables", "=", "[", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "if", "not", "v", ".", "name", ".", "__contains__", "(", "'Momentum'", ")", "]", "\n", "\n", "for", "v", "in", "variables", ":", "\n", "                ", "print", "(", "'snapshot:'", ",", "v", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "variables", ")", "\n", "ckpt", ".", "model_checkpoint_path", "=", "self", ".", "switch_checkpoint_path", "(", "ckpt", ".", "model_checkpoint_path", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "ckpt", ".", "model_checkpoint_path", ")", "\n", "print", "(", "'Restoring model snapshots from {:s}'", ".", "format", "(", "ckpt", ".", "model_checkpoint_path", ")", ")", "\n", "", "elif", "self", ".", "Restore_flag", "==", "-", "1", ":", "\n", "            ", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "self", ".", "output_dir", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "self", ".", "switch_checkpoint_path", "(", "ckpt", ".", "model_checkpoint_path", ")", ")", "\n", "print", "(", "'Restoring model snapshots from {:s}'", ".", "format", "(", "ckpt", ".", "model_checkpoint_path", ")", ")", "\n", "\n", "\n", "", "if", "self", ".", "Restore_flag", "==", "0", ":", "\n", "\n", "            ", "saver_t", "=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "'conv1'", "in", "var", ".", "name", "and", "'conv1_sp'", "not", "in", "var", ".", "name", "]", "\n", "saver_t", "+=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "'conv2'", "in", "var", ".", "name", "and", "'conv2_sp'", "not", "in", "var", ".", "name", "]", "\n", "saver_t", "+=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "'conv3'", "in", "var", ".", "name", "]", "\n", "saver_t", "+=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "'conv4'", "in", "var", ".", "name", "]", "\n", "saver_t", "+=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "'conv5'", "in", "var", ".", "name", "]", "\n", "saver_t", "+=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "'shortcut'", "in", "var", ".", "name", "]", "\n", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "# for var in tf.trainable_variables():", "\n", "#     print(var.name, var.eval().mean())", "\n", "\n", "print", "(", "'Restoring model snapshots from {:s}'", ".", "format", "(", "self", ".", "pretrained_model", ")", ")", "\n", "\n", "self", ".", "saver_restore", "=", "tf", ".", "train", ".", "Saver", "(", "saver_t", ")", "\n", "self", ".", "saver_restore", ".", "restore", "(", "sess", ",", "self", ".", "pretrained_model", ")", "\n", "\n", "# for var in tf.trainable_variables():", "\n", "#     print(var.name, var.eval().mean())", "\n", "\n", "\n", "", "if", "self", ".", "Restore_flag", "==", "5", "or", "self", ".", "Restore_flag", "==", "6", "or", "self", ".", "Restore_flag", "==", "7", ":", "\n", "\n", "            ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "# for var in tf.trainable_variables():", "\n", "#     print(var.name, var.eval().mean())", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'res101'", ")", ":", "\n", "                ", "model_backbone", "=", "'resnet_v1_101'", "\n", "", "else", ":", "\n", "                ", "model_backbone", "=", "'resnet_v1_50'", "\n", "\n", "", "print", "(", "'Restoring model snapshots from {:s}'", ".", "format", "(", "self", ".", "pretrained_model", ")", ",", "model_backbone", ")", "\n", "saver_t", "=", "{", "}", "\n", "\n", "# Add block0", "\n", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                ", "if", "model_backbone", "+", "'/conv1/weights'", "in", "ele", ".", "name", "or", "model_backbone", "+", "'/conv1/BatchNorm/beta'", "in", "ele", ".", "name", "or", "model_backbone", "+", "'/conv1/BatchNorm/gamma'", "in", "ele", ".", "name", "or", "model_backbone", "+", "'/conv1/BatchNorm/moving_mean'", "in", "ele", ".", "name", "or", "model_backbone", "+", "'/conv1/BatchNorm/moving_variance'", "in", "ele", ".", "name", ":", "\n", "                    ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "ele", "\n", "# Add block1", "\n", "", "", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                ", "if", "'block1'", "in", "ele", ".", "name", ":", "\n", "                    ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "ele", "\n", "\n", "# Add block2", "\n", "", "", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                ", "if", "'block2'", "in", "ele", ".", "name", ":", "\n", "                    ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "ele", "\n", "\n", "# Add block3", "\n", "", "", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                ", "if", "'block3'", "in", "ele", ".", "name", ":", "\n", "                    ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "ele", "\n", "\n", "# Add block4", "\n", "", "", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                ", "if", "'block4'", "in", "ele", ".", "name", ":", "\n", "                    ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "ele", "\n", "\n", "", "", "self", ".", "saver_restore", "=", "tf", ".", "train", ".", "Saver", "(", "saver_t", ")", "\n", "self", ".", "saver_restore", ".", "restore", "(", "sess", ",", "self", ".", "pretrained_model", ")", "\n", "\n", "if", "self", ".", "Restore_flag", ">=", "5", ":", "\n", "\n", "                ", "saver_t", "=", "{", "}", "\n", "# Add block5", "\n", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                    ", "if", "'block4'", "in", "ele", ".", "name", ":", "\n", "                        ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "ele", ".", "name", "[", ":", "-", "2", "]", ".", "replace", "(", "'block4'", ",", "'block5'", ")", "in", "var", ".", "name", "]", "[", "0", "]", "\n", "\n", "\n", "", "", "self", ".", "saver_restore", "=", "tf", ".", "train", ".", "Saver", "(", "saver_t", ")", "\n", "self", ".", "saver_restore", ".", "restore", "(", "sess", ",", "self", ".", "pretrained_model", ")", "\n", "\n", "\n", "", "if", "self", ".", "Restore_flag", ">=", "6", ":", "\n", "                ", "saver_t", "=", "{", "}", "\n", "# Add block6", "\n", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                    ", "if", "'block4'", "in", "ele", ".", "name", ":", "\n", "                        ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "ele", ".", "name", "[", ":", "-", "2", "]", ".", "replace", "(", "'block4'", ",", "'block6'", ")", "in", "var", ".", "name", "]", "[", "0", "]", "\n", "\n", "\n", "", "", "self", ".", "saver_restore", "=", "tf", ".", "train", ".", "Saver", "(", "saver_t", ")", "\n", "self", ".", "saver_restore", ".", "restore", "(", "sess", ",", "self", ".", "pretrained_model", ")", "\n", "\n", "", "if", "self", ".", "Restore_flag", ">=", "7", ":", "\n", "\n", "                ", "saver_t", "=", "{", "}", "\n", "# Add block7", "\n", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                    ", "if", "'block4'", "in", "ele", ".", "name", ":", "\n", "                        ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "ele", ".", "name", "[", ":", "-", "2", "]", ".", "replace", "(", "'block4'", ",", "'block7'", ")", "in", "var", ".", "name", "]", "[", "0", "]", "\n", "\n", "\n", "", "", "self", ".", "saver_restore", "=", "tf", ".", "train", ".", "Saver", "(", "saver_t", ")", "\n", "self", ".", "saver_restore", ".", "restore", "(", "sess", ",", "self", ".", "pretrained_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO.SolverWrapper.train_model": [[276, 323], ["train_Solver_HICO.SolverWrapper.construct_graph", "train_Solver_HICO.SolverWrapper.from_snapshot", "sess.graph.finalize", "ult.timer.Timer", "train_Solver_HICO.SolverWrapper.get_init_step", "logging.basicConfig", "logging.getLogger", "logging.getLogger.setLevel", "train_Solver_HICO.SolverWrapper.writer.close", "ult.timer.Timer.tic", "ult.timer.Timer.toc", "train_Solver_HICO.SolverWrapper.snapshot", "train_Solver_HICO.SolverWrapper.net.train_step_tfr_with_summary", "train_Solver_HICO.SolverWrapper.writer.add_summary", "train_Solver_HICO.SolverWrapper.net.train_step_tfr", "logging.getLogger.info", "float", "type", "lr.eval"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.construct_graph", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.from_snapshot", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_init_step", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.snapshot", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.train_step_tfr_with_summary", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.train_step_tfr"], ["", "", "", "def", "train_model", "(", "self", ",", "sess", ",", "max_iters", ")", ":", "\n", "        ", "lr", ",", "train_op", "=", "self", ".", "construct_graph", "(", "sess", ")", "\n", "self", ".", "from_snapshot", "(", "sess", ")", "\n", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "timer", "=", "Timer", "(", ")", "\n", "\n", "# Data_length = len(self.Trainval_GT)", "\n", "iter", "=", "self", ".", "get_init_step", "(", ")", "\n", "import", "logging", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ",", "format", "=", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "while", "iter", "<", "max_iters", "+", "1", ":", "\n", "            ", "timer", ".", "tic", "(", ")", "\n", "\n", "blobs", "=", "{", "}", "\n", "\n", "from", "tensorflow", ".", "python", ".", "framework", ".", "errors_impl", "import", "InvalidArgumentError", "\n", "if", "(", "iter", "%", "cfg", ".", "TRAIN", ".", "SUMMARY_INTERVAL", "==", "0", ")", "or", "(", "iter", "<", "20", ")", ":", "\n", "\n", "# Compute the graph with summary", "\n", "                ", "total_loss", ",", "image_id", ",", "summary", "=", "self", ".", "net", ".", "train_step_tfr_with_summary", "(", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", "\n", "# total_loss, summary = self.net.train_step_with_summary(sess, blobs, lr.eval(), train_op)", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "iter", ")", ")", "\n", "\n", "", "else", ":", "\n", "# Compute the graph without summary", "\n", "                ", "total_loss", ",", "image_id", "=", "self", ".", "net", ".", "train_step_tfr", "(", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", "\n", "\n", "\n", "", "timer", ".", "toc", "(", ")", "\n", "# print(image_id)", "\n", "# Display training information", "\n", "if", "iter", "%", "(", "cfg", ".", "TRAIN", ".", "DISPLAY", ")", "==", "0", ":", "\n", "                ", "if", "type", "(", "image_id", ")", "==", "tuple", ":", "\n", "                    ", "image_id", "=", "image_id", "[", "0", "]", "\n", "", "logger", ".", "info", "(", "'iter: {:d} / {:d}, im_id: {:d}, total loss: {:.6f}, lr: {:f}, speed: {:.3f} s/iter'", ".", "format", "(", "\n", "iter", ",", "max_iters", ",", "image_id", ",", "total_loss", ",", "lr", ".", "eval", "(", ")", ",", "timer", ".", "average_time", ")", ")", "\n", "# Snapshotting", "\n", "", "t_iter", "=", "iter", "\n", "self", ".", "snapshot", "(", "sess", ",", "t_iter", ")", "\n", "\n", "iter", "+=", "1", "\n", "\n", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_HICO.train_net": [[326, 346], ["tensorflow.ConfigProto", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "tensorflow.Session", "train_Solver_HICO.SolverWrapper", "print", "train_Solver_HICO.SolverWrapper.train_model", "print", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.train_model"], ["", "", "def", "train_net", "(", "network", ",", "Trainval_GT", ",", "Trainval_N", ",", "output_dir", ",", "tb_dir", ",", "Pos_augment", ",", "Neg_select", ",", "Restore_flag", ",", "pretrained_model", ",", "max_iters", "=", "300000", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "tb_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "tb_dir", ")", "\n", "\n", "", "tfconfig", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "\"CPU\"", ":", "32", "}", ",", "\n", "inter_op_parallelism_threads", "=", "16", ",", "\n", "intra_op_parallelism_threads", "=", "16", ")", "\n", "# tfconfig = tf.ConfigProto()", "\n", "tfconfig", ".", "graph_options", ".", "optimizer_options", ".", "global_jit_level", "=", "tf", ".", "OptimizerOptions", ".", "ON_1", "\n", "tfconfig", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "tfconfig", ")", "as", "sess", ":", "\n", "        ", "sw", "=", "SolverWrapper", "(", "sess", ",", "network", ",", "Trainval_GT", ",", "Trainval_N", ",", "output_dir", ",", "tb_dir", ",", "Pos_augment", ",", "Neg_select", ",", "Restore_flag", ",", "pretrained_model", ")", "\n", "\n", "print", "(", "'Solving..., Pos augment = '", "+", "str", "(", "Pos_augment", ")", "+", "', Neg augment = '", "+", "str", "(", "Neg_select", ")", "+", "', Restore_flag = '", "+", "str", "(", "Restore_flag", ")", ",", "max_iters", ")", "\n", "sw", ".", "train_model", "(", "sess", ",", "max_iters", ")", "\n", "print", "(", "'done solving'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.__init__": [[23, 37], ["networks.VCL.VCL"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sess", ",", "network", ",", "Trainval_GT", ",", "Trainval_N", ",", "output_dir", ",", "tbdir", ",", "Pos_augment", ",", "Neg_select", ",", "iCAN_Early_flag", ",", "Restore_flag", ",", "pretrained_model", ")", ":", "\n", "\n", "        ", "self", ".", "net", "=", "network", "\n", "self", ".", "Trainval_GT", "=", "Trainval_GT", "\n", "self", ".", "Trainval_N", "=", "Trainval_N", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "tbdir", "=", "tbdir", "\n", "self", ".", "Pos_augment", "=", "Pos_augment", "\n", "self", ".", "Neg_select", "=", "Neg_select", "\n", "self", ".", "iCAN_Early_flag", "=", "iCAN_Early_flag", "\n", "self", ".", "Restore_flag", "=", "Restore_flag", "\n", "self", ".", "pretrained_model", "=", "pretrained_model", "\n", "\n", "self", ".", "compose_feature_helper", "=", "VCL", "(", "network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_optimzer_lr": [[38, 52], ["int", "tensorflow.train.exponential_decay", "tensorflow.train.MomentumOptimizer", "train_Solver_VCOCO.SolverWrapper.net.model_name.__contains__", "train_Solver_VCOCO.SolverWrapper.net.model_name.__contains__", "tensorflow.train.exponential_decay", "tensorflow.train.MomentumOptimizer", "int"], "methods", ["None"], ["", "def", "get_optimzer_lr", "(", "self", ",", "global_step", ",", "step_factor", ")", ":", "\n", "        ", "stepsize", "=", "int", "(", "cfg", ".", "TRAIN", ".", "STEPSIZE", "*", "step_factor", ")", "\n", "gamma", "=", "cfg", ".", "TRAIN", ".", "GAMMA", "\n", "lr", "=", "tf", ".", "train", ".", "exponential_decay", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", "*", "10", ",", "global_step", ",", "stepsize", ",", "\n", "gamma", ",", "staircase", "=", "True", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr", ",", "cfg", ".", "TRAIN", ".", "MOMENTUM", ")", "\n", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'VCOCO'", ")", "and", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'test'", ")", ":", "\n", "            ", "lr", "=", "tf", ".", "train", ".", "exponential_decay", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", "*", "10", ",", "global_step", ",", "\n", "int", "(", "cfg", ".", "TRAIN", ".", "STEPSIZE", ")", "*", "2", ",", "\n", "gamma", ",", "staircase", "=", "True", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr", ",", "cfg", ".", "TRAIN", ".", "MOMENTUM", ")", "\n", "\n", "", "return", "lr", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_step_factor": [[53, 56], ["None"], "methods", ["None"], ["", "def", "get_step_factor", "(", "self", ")", ":", "\n", "        ", "step_factor", "=", "5", "\n", "return", "step_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.snapshot": [[57, 67], ["os.path.join", "train_Solver_VCOCO.SolverWrapper.saver.save", "print", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "def", "snapshot", "(", "self", ",", "sess", ",", "iter", ")", ":", "\n", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "output_dir", ")", "\n", "\n", "# Store the model snapshot", "\n", "", "filename", "=", "'HOI'", "+", "'_iter_{:d}'", ".", "format", "(", "iter", ")", "+", "'.ckpt'", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "filename", ")", "\n", "self", ".", "saver", ".", "save", "(", "sess", ",", "filename", ")", "\n", "print", "(", "'Wrote snapshot to: {:s}'", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.construct_graph": [[68, 93], ["sess.graph.as_default", "tensorflow.set_random_seed", "train_Solver_VCOCO.SolverWrapper.net.create_architecture", "train_Solver_VCOCO.SolverWrapper.get_init_step", "tensorflow.Variable", "tensorflow.train.exponential_decay", "tensorflow.train.MomentumOptimizer", "train_Solver_VCOCO.SolverWrapper.optimizer.compute_gradients", "train_Solver_VCOCO.SolverWrapper.optimizer.apply_gradients", "tensorflow.train.Saver", "tensorflow.summary.FileWriter", "tensorflow.trainable_variables", "tensorflow.clip_by_norm"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.create_architecture", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_init_step"], ["", "def", "construct_graph", "(", "self", ",", "sess", ")", ":", "\n", "        ", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "\n", "# Set the random seed for tensorflow", "\n", "            ", "tf", ".", "set_random_seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "\n", "# Build the main computation graph", "\n", "layers", "=", "self", ".", "net", ".", "create_architecture", "(", "True", ")", "# is_training flag: True", "\n", "\n", "# Define the loss", "\n", "loss", "=", "layers", "[", "'total_loss'", "]", "\n", "\n", "init_step", "=", "self", ".", "get_init_step", "(", ")", "\n", "global_step", "=", "tf", ".", "Variable", "(", "init_step", ",", "trainable", "=", "False", ")", "\n", "lr", "=", "tf", ".", "train", ".", "exponential_decay", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ",", "global_step", ",", "cfg", ".", "TRAIN", ".", "STEPSIZE", ",", "cfg", ".", "TRAIN", ".", "GAMMA", ",", "staircase", "=", "True", ")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr", ",", "cfg", ".", "TRAIN", ".", "MOMENTUM", ")", "\n", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "loss", ",", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "1.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "grads_and_vars", "if", "grad", "is", "not", "None", "]", "\n", "\n", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ",", "global_step", "=", "global_step", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_KEPT", ")", "\n", "# Write the train and validation information to tensorboard", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "tbdir", ",", "sess", ".", "graph", ")", "\n", "\n", "", "return", "lr", ",", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_init_step": [[94, 104], ["tensorflow.train.get_checkpoint_state", "print", "int", "print", "[].split", "int.replace", "tensorflow.train.get_checkpoint_state.model_checkpoint_path.split"], "methods", ["None"], ["", "def", "get_init_step", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "Restore_flag", "==", "-", "1", ":", "\n", "            ", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "self", ".", "output_dir", ")", "\n", "print", "(", "ckpt", ".", "model_checkpoint_path", ")", "\n", "init_step", "=", "ckpt", ".", "model_checkpoint_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "init_step", "=", "int", "(", "init_step", ".", "replace", "(", "'.ckpt'", ",", "''", ")", ")", "\n", "print", "(", "\"Init Step:\"", ",", "init_step", ")", "\n", "", "else", ":", "\n", "            ", "init_step", "=", "0", "\n", "", "return", "init_step", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.from_snapshot": [[105, 212], ["tensorflow.train.get_checkpoint_state", "tensorflow.train.Saver", "tensorflow.train.Saver.restore", "print", "sess.run", "print", "tensorflow.train.Saver", "train_Solver_VCOCO.SolverWrapper.saver_restore.restore", "sess.run", "tensorflow.trainable_variables", "print", "train_Solver_VCOCO.SolverWrapper.net.model_name.__contains__", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.train.Saver", "train_Solver_VCOCO.SolverWrapper.saver_restore.restore", "tensorflow.global_variables_initializer", "tensorflow.global_variables_initializer", "print", "tensorflow.model_variables", "tensorflow.train.Saver", "train_Solver_VCOCO.SolverWrapper.saver_restore.restore", "tensorflow.model_variables", "tensorflow.train.Saver", "train_Solver_VCOCO.SolverWrapper.saver_restore.restore", "tensorflow.model_variables", "tensorflow.train.Saver", "train_Solver_VCOCO.SolverWrapper.saver_restore.restore", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "var.eval().mean", "var.eval", "tensorflow.model_variables", "tensorflow.model_variables", "tensorflow.model_variables", "ele.name[].replace", "ele.name[].replace", "ele.name[].replace"], "methods", ["None"], ["", "def", "from_snapshot", "(", "self", ",", "sess", ")", ":", "\n", "        ", "if", "self", ".", "Restore_flag", "==", "-", "1", ":", "\n", "            ", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "self", ".", "output_dir", ")", "\n", "# saver = tf.train.import_meta_graph(ckpt.model_checkpoint_path + '.meta')", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "ckpt", ".", "model_checkpoint_path", ")", "\n", "print", "(", "'Restoring model snapshots from {:s}'", ".", "format", "(", "ckpt", ".", "model_checkpoint_path", ")", ")", "\n", "", "if", "self", ".", "Restore_flag", "==", "0", ":", "\n", "            ", "saver_t", "=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "'conv1'", "in", "var", ".", "name", "and", "'conv1_sp'", "not", "in", "var", ".", "name", "]", "\n", "saver_t", "+=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "'conv2'", "in", "var", ".", "name", "and", "'conv2_sp'", "not", "in", "var", ".", "name", "]", "\n", "saver_t", "+=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "'conv3'", "in", "var", ".", "name", "]", "\n", "saver_t", "+=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "'conv4'", "in", "var", ".", "name", "]", "\n", "saver_t", "+=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "'conv5'", "in", "var", ".", "name", "]", "\n", "saver_t", "+=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "'shortcut'", "in", "var", ".", "name", "]", "\n", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "# for var in tf.trainable_variables():", "\n", "#     print(var.name, var.eval().mean())", "\n", "\n", "print", "(", "'Restoring model snapshots from {:s}'", ".", "format", "(", "self", ".", "pretrained_model", ")", ")", "\n", "\n", "self", ".", "saver_restore", "=", "tf", ".", "train", ".", "Saver", "(", "saver_t", ")", "\n", "self", ".", "saver_restore", ".", "restore", "(", "sess", ",", "self", ".", "pretrained_model", ")", "\n", "\n", "# for var in tf.trainable_variables():", "\n", "#     print(var.name, var.eval().mean())", "\n", "\n", "", "if", "self", ".", "Restore_flag", "==", "5", "or", "self", ".", "Restore_flag", "==", "6", "or", "self", ".", "Restore_flag", "==", "7", ":", "\n", "\n", "            ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "                ", "print", "(", "var", ".", "name", ",", "var", ".", "eval", "(", ")", ".", "mean", "(", ")", ")", "\n", "\n", "", "print", "(", "'Restoring model snapshots from {:s}'", ".", "format", "(", "self", ".", "pretrained_model", ")", ")", "\n", "saver_t", "=", "{", "}", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'res101'", ")", ":", "\n", "                ", "model_backbone", "=", "'resnet_v1_101'", "\n", "", "else", ":", "\n", "                ", "model_backbone", "=", "'resnet_v1_50'", "\n", "\n", "# Add block0", "\n", "", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                ", "if", "model_backbone", "+", "'/conv1/weights'", "in", "ele", ".", "name", "or", "model_backbone", "+", "'/conv1/BatchNorm/beta'", "in", "ele", ".", "name", "or", "model_backbone", "+", "'/conv1/BatchNorm/gamma'", "in", "ele", ".", "name", "or", "model_backbone", "+", "'/conv1/BatchNorm/moving_mean'", "in", "ele", ".", "name", "or", "model_backbone", "+", "'/conv1/BatchNorm/moving_variance'", "in", "ele", ".", "name", ":", "\n", "                    ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "ele", "\n", "# Add block1", "\n", "", "", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                ", "if", "'block1'", "in", "ele", ".", "name", ":", "\n", "                    ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "ele", "\n", "\n", "# Add block2", "\n", "", "", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                ", "if", "'block2'", "in", "ele", ".", "name", ":", "\n", "                    ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "ele", "\n", "\n", "# Add block3", "\n", "", "", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                ", "if", "'block3'", "in", "ele", ".", "name", ":", "\n", "                    ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "ele", "\n", "\n", "# Add block4", "\n", "", "", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                ", "if", "'block4'", "in", "ele", ".", "name", ":", "\n", "                    ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "ele", "\n", "\n", "", "", "self", ".", "saver_restore", "=", "tf", ".", "train", ".", "Saver", "(", "saver_t", ")", "\n", "self", ".", "saver_restore", ".", "restore", "(", "sess", ",", "self", ".", "pretrained_model", ")", "\n", "\n", "if", "self", ".", "Restore_flag", ">=", "5", ":", "\n", "\n", "                ", "saver_t", "=", "{", "}", "\n", "# Add block5", "\n", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                    ", "if", "'block4'", "in", "ele", ".", "name", ":", "\n", "                        ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "\n", "ele", ".", "name", "[", ":", "-", "2", "]", ".", "replace", "(", "'block4'", ",", "'block5'", ")", "in", "var", ".", "name", "]", "[", "\n", "0", "]", "\n", "\n", "", "", "self", ".", "saver_restore", "=", "tf", ".", "train", ".", "Saver", "(", "saver_t", ")", "\n", "self", ".", "saver_restore", ".", "restore", "(", "sess", ",", "self", ".", "pretrained_model", ")", "\n", "\n", "", "if", "self", ".", "Restore_flag", ">=", "6", ":", "\n", "                ", "saver_t", "=", "{", "}", "\n", "# Add block6", "\n", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                    ", "if", "'block4'", "in", "ele", ".", "name", ":", "\n", "                        ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "\n", "ele", ".", "name", "[", ":", "-", "2", "]", ".", "replace", "(", "'block4'", ",", "'block6'", ")", "in", "var", ".", "name", "]", "[", "\n", "0", "]", "\n", "\n", "", "", "self", ".", "saver_restore", "=", "tf", ".", "train", ".", "Saver", "(", "saver_t", ")", "\n", "self", ".", "saver_restore", ".", "restore", "(", "sess", ",", "self", ".", "pretrained_model", ")", "\n", "\n", "", "if", "self", ".", "Restore_flag", ">=", "7", ":", "\n", "\n", "                ", "saver_t", "=", "{", "}", "\n", "# Add block7", "\n", "for", "ele", "in", "tf", ".", "model_variables", "(", ")", ":", "\n", "                    ", "if", "'block4'", "in", "ele", ".", "name", ":", "\n", "                        ", "saver_t", "[", "ele", ".", "name", "[", ":", "-", "2", "]", "]", "=", "[", "var", "for", "var", "in", "tf", ".", "model_variables", "(", ")", "if", "\n", "ele", ".", "name", "[", ":", "-", "2", "]", ".", "replace", "(", "'block4'", ",", "'block7'", ")", "in", "var", ".", "name", "]", "[", "\n", "0", "]", "\n", "\n", "", "", "self", ".", "saver_restore", "=", "tf", ".", "train", ".", "Saver", "(", "saver_t", ")", "\n", "self", ".", "saver_restore", ".", "restore", "(", "sess", ",", "self", ".", "pretrained_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.train_model_tf": [[214, 270], ["train_Solver_VCOCO.SolverWrapper.construct_graph", "train_Solver_VCOCO.SolverWrapper.from_snapshot", "sess.graph.finalize", "ult.timer.Timer", "train_Solver_VCOCO.SolverWrapper.get_init_step", "train_Solver_VCOCO.SolverWrapper.writer.close", "ult.timer.Timer.tic", "ult.timer.Timer.toc", "print", "train_Solver_VCOCO.SolverWrapper.snapshot", "train_Solver_VCOCO.SolverWrapper.net.train_step_tfr_with_summary", "train_Solver_VCOCO.SolverWrapper.writer.add_summary", "train_Solver_VCOCO.SolverWrapper.net.train_step_tfr", "print", "train_Solver_VCOCO.SolverWrapper.net.model_name.__contains__", "type", "lr.eval", "float", "lr.eval", "print", "lr.eval"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.construct_graph", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.from_snapshot", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_init_step", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.snapshot", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.train_step_tfr_with_summary", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.train_step_tfr"], ["", "", "", "def", "train_model_tf", "(", "self", ",", "sess", ",", "max_iters", ")", ":", "\n", "\n", "        ", "lr", ",", "train_op", "=", "self", ".", "construct_graph", "(", "sess", ")", "\n", "self", ".", "from_snapshot", "(", "sess", ")", "\n", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "timer", "=", "Timer", "(", ")", "\n", "\n", "# Data_length = len(self.Trainval_GT)", "\n", "iter", "=", "self", ".", "get_init_step", "(", ")", "\n", "\n", "while", "iter", "<", "max_iters", "+", "1", ":", "\n", "\n", "            ", "timer", ".", "tic", "(", ")", "\n", "\n", "blobs", "=", "{", "}", "\n", "from", "tensorflow", ".", "python", ".", "framework", ".", "errors_impl", "import", "InvalidArgumentError", "\n", "try", ":", "\n", "                ", "if", "(", "iter", "%", "cfg", ".", "TRAIN", ".", "SUMMARY_INTERVAL", "==", "0", ")", "or", "(", "iter", "<", "20", ")", ":", "\n", "\n", "# Compute the graph with summary", "\n", "                    ", "total_loss", ",", "image_id", ",", "summary", "=", "self", ".", "net", ".", "train_step_tfr_with_summary", "(", "sess", ",", "blobs", ",", "lr", ".", "eval", "(", ")", ",", "\n", "train_op", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "iter", ")", ")", "\n", "\n", "", "else", ":", "\n", "# Compute the graph without summary", "\n", "                    ", "total_loss", ",", "image_id", "=", "self", ".", "net", ".", "train_step_tfr", "(", "sess", ",", "blobs", ",", "lr", ".", "eval", "(", ")", ",", "train_op", ")", "\n", "", "", "except", "InvalidArgumentError", "as", "e", ":", "\n", "                ", "print", "(", "'InvalidArgumentError'", ")", "\n", "image_id", "=", "-", "1", "\n", "total_loss", "=", "0", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'lamb'", ")", ":", "\n", "                    ", "print", "(", "'InvalidArgumentError'", ",", "image_id", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "e", "\n", "", "", "timer", ".", "toc", "(", ")", "\n", "# print(image_id)", "\n", "# Display training information", "\n", "if", "iter", "%", "(", "cfg", ".", "TRAIN", ".", "DISPLAY", ")", "==", "0", ":", "\n", "                ", "if", "type", "(", "image_id", ")", "==", "tuple", ":", "\n", "                    ", "image_id", "=", "image_id", "[", "0", "]", "\n", "", "out_str", "=", "'iter: %d / %d, im_id: %u, total loss: %.6f, lr: %f, speed: %.3f s/iter'", "%", "(", "iter", ",", "max_iters", ",", "image_id", ",", "total_loss", ",", "lr", ".", "eval", "(", ")", ",", "timer", ".", "average_time", ")", "\n", "print", "(", "out_str", ",", "end", "=", "'\\r'", ",", "flush", "=", "True", ")", "\n", "\n", "\n", "# Snapshotting", "\n", "", "if", "(", "iter", "%", "cfg", ".", "TRAIN", ".", "SNAPSHOT_ITERS", "==", "0", "and", "iter", "!=", "0", ")", "or", "(", "iter", "==", "10", ")", ":", "\n", "# self.net.test_", "\n", "                ", "self", ".", "snapshot", "(", "sess", ",", "iter", ")", "\n", "\n", "", "iter", "+=", "1", "\n", "\n", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.train_net": [[272, 299], ["tensorflow.ConfigProto", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "tensorflow.Session", "train_Solver_VCOCO.SolverWrapper", "print", "train_Solver_VCOCO.SolverWrapper.train_model_tf", "print", "os.remove", "os.listdir", "os.path.join", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.train_model_tf"], ["", "", "def", "train_net", "(", "network", ",", "Trainval_GT", ",", "Trainval_N", ",", "output_dir", ",", "tb_dir", ",", "Pos_augment", ",", "Neg_select", ",", "iCAN_Early_flag", ",", "Restore_flag", ",", "pretrained_model", ",", "max_iters", "=", "300000", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "tb_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "tb_dir", ")", "\n", "\n", "", "if", "Restore_flag", ">=", "0", ":", "\n", "# Remove previous events", "\n", "        ", "filelist", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "tb_dir", ")", "]", "\n", "for", "f", "in", "filelist", ":", "\n", "            ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "tb_dir", ",", "f", ")", ")", "\n", "# Remove previous snapshots", "\n", "\n", "", "", "tfconfig", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "\"CPU\"", ":", "32", "}", ",", "\n", "inter_op_parallelism_threads", "=", "16", ",", "\n", "intra_op_parallelism_threads", "=", "16", ")", "\n", "# tfconfig = tf.ConfigProto()", "\n", "tfconfig", ".", "graph_options", ".", "optimizer_options", ".", "global_jit_level", "=", "tf", ".", "OptimizerOptions", ".", "ON_1", "\n", "tfconfig", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "tfconfig", ")", "as", "sess", ":", "\n", "        ", "sw", "=", "SolverWrapper", "(", "sess", ",", "network", ",", "Trainval_GT", ",", "Trainval_N", ",", "output_dir", ",", "tb_dir", ",", "Pos_augment", ",", "Neg_select", ",", "iCAN_Early_flag", ",", "Restore_flag", ",", "pretrained_model", ")", "\n", "\n", "print", "(", "'Solving..., Pos augment = '", "+", "str", "(", "Pos_augment", ")", "+", "', Neg augment = '", "+", "str", "(", "Neg_select", ")", "+", "', iCAN_Early_flag = '", "+", "str", "(", "iCAN_Early_flag", ")", "+", "', Restore_flag = '", "+", "str", "(", "Restore_flag", ")", ")", "\n", "sw", ".", "train_model_tf", "(", "sess", ",", "max_iters", ")", "\n", "print", "(", "'done solving'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.__init__": [[22, 31], ["models.train_Solver_VCOCO.SolverWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1.__init__"], ["def", "__init__", "(", "self", ",", "sess", ",", "network", ",", "output_dir", ",", "tbdir", ",", "Restore_flag", ",", "pretrained_model", ")", ":", "\n", "        ", "super", "(", "VCOCOSolverWrapperCL", ",", "self", ")", ".", "__init__", "(", "sess", ",", "network", ",", "None", ",", "None", ",", "output_dir", ",", "tbdir", ",", "0", ",", "0", ",", "0", ",", "Restore_flag", ",", "pretrained_model", ")", "\n", "\n", "self", ".", "image", "=", "None", "\n", "\n", "self", ".", "image_id", "=", "None", "\n", "self", ".", "spatial", "=", "None", "\n", "self", ".", "H_num", "=", "None", "\n", "self", ".", "blobs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.set_coco_data": [[32, 38], ["None"], "methods", ["None"], ["", "def", "set_coco_data", "(", "self", ",", "image", ",", "image_id", ",", "H_num", ",", "blobs", ")", ":", "\n", "\n", "        ", "if", "image", "is", "not", "None", ":", "self", ".", "image", "=", "image", "\n", "if", "image_id", "is", "not", "None", ":", "self", ".", "image_id", "=", "image_id", "\n", "self", ".", "blobs", "=", "blobs", "\n", "if", "H_num", "is", "not", "None", ":", "self", ".", "H_num", "=", "H_num", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.construct_graph2": [[39, 138], ["print", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.compose_feature_helper.get_compose_type", "sess.graph.as_default", "tensorflow.device", "tensorflow.set_random_seed", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.get_init_step", "tensorflow.Variable", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.get_step_factor", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.get_optimzer_lr", "range", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.optimizer.apply_gradients", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge_all", "tensorflow.train.Saver", "tensorflow.summary.FileWriter", "tensorflow.reduce_sum", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.net.model_name.__contains__", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.net.model_name.__contains__", "tensorflow.reduce_sum", "tensorflow.device", "len", "tensorflow.clip_by_norm", "len", "tensorflow.name_scope", "print", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.net.set_ph", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.net.create_architecture", "O_features.append", "V_features.append", "num_stop_list.append", "print", "os.environ[].split", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.net.get_compose_num_stop", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.net.get_compose_num_stop", "tower_losses.append", "tensorflow.trainable_variables", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.optimizer.compute_gradients", "tower_grads.append", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.net.model_name.__contains__", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.net.model_name.__contains__", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.net.model_name.__contains__", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.compose_feature_helper.get_ll", "tower_losses.append", "tensorflow.reduce_sum", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.net.get_compose_num_stop", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.net.get_compose_num_stop", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.compose_feature_helper.merge_generate", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.compose_feature_helper.merge_generate", "range", "range"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.get_compose_type", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_init_step", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_step_factor", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_optimzer_lr", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.set_ph", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.create_architecture", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.get_ll", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.merge_generate", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.merge_generate"], ["", "def", "construct_graph2", "(", "self", ",", "sess", ")", ":", "\n", "        ", "print", "(", "\"construct_graph2\"", ")", "\n", "compose_type", "=", "self", ".", "compose_feature_helper", ".", "get_compose_type", "(", ")", "\n", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ",", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "# Set the random seed for tensorflow", "\n", "            ", "tf", ".", "set_random_seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "\n", "init_step", "=", "self", ".", "get_init_step", "(", ")", "\n", "\n", "global_step", "=", "tf", ".", "Variable", "(", "init_step", ",", "trainable", "=", "False", ",", "name", "=", "'global_step'", ")", "\n", "\n", "step_factor", "=", "self", ".", "get_step_factor", "(", ")", "\n", "\n", "lr", ",", "self", ".", "optimizer", "=", "self", ".", "get_optimzer_lr", "(", "global_step", ",", "step_factor", ")", "\n", "\n", "tower_grads", "=", "[", "]", "\n", "V_features", "=", "[", "]", "\n", "O_features", "=", "[", "]", "\n", "num_stop_list", "=", "[", "]", "\n", "tower_losses", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                ", "gpu_idx", "=", "i", "\n", "if", "'CUDA_VISIBLE_DEVICES'", "not", "in", "os", ".", "environ", "or", "len", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ".", "split", "(", "','", ")", ")", "==", "1", ":", "\n", "                    ", "gpu_idx", "=", "0", "\n", "", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "gpu_idx", ")", ":", "\n", "                    ", "with", "tf", ".", "name_scope", "(", "'%s_%d'", "%", "(", "'HICO'", ",", "i", ")", ",", ")", "as", "scope", ":", "\n", "                        ", "split_image", "=", "self", ".", "image", "[", "i", "]", "\n", "split_image_id", "=", "self", ".", "image_id", "[", "i", "]", "\n", "split_H_num", "=", "self", ".", "H_num", "[", "i", "]", "\n", "blobs", "=", "self", ".", "blobs", "[", "i", "]", "\n", "print", "(", "i", ",", "split_H_num", ",", "'----------------------'", ")", "\n", "self", ".", "net", ".", "set_ph", "(", "split_image", ",", "split_image_id", ",", "split_H_num", ",", "blobs", "[", "'sp'", "]", ",", "blobs", "[", "'H_boxes'", "]", ",", "\n", "blobs", "[", "'O_boxes'", "]", ",", "blobs", "[", "'gt_class_H'", "]", ",", "blobs", "[", "'gt_class_HO'", "]", ",", "\n", "blobs", "[", "'gt_class_sp'", "]", ",", "blobs", "[", "'Mask_HO'", "]", ",", "blobs", "[", "'Mask_H'", "]", ",", "blobs", "[", "'Mask_sp'", "]", ",", "\n", "blobs", "[", "'gt_class_C'", "]", ")", "\n", "\n", "# Build the main computation graph", "\n", "layers", "=", "self", ".", "net", ".", "create_architecture", "(", "True", ")", "# is_training flag: True", "\n", "\n", "O_features", ".", "append", "(", "self", ".", "net", ".", "intermediate", "[", "'fc7_O'", "]", "[", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", ")", "\n", "V_features", ".", "append", "(", "self", ".", "net", ".", "intermediate", "[", "'fc7_verbs'", "]", "[", ":", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", "]", ")", "\n", "\n", "num_stop_list", ".", "append", "(", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", ")", "\n", "print", "(", "'num stop:'", ",", "self", ".", "net", ".", "get_compose_num_stop", "(", ")", ",", "num_stop_list", ")", "\n", "# Define the loss", "\n", "loss", "=", "layers", "[", "'total_loss'", "]", "\n", "if", "not", "(", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'atl'", ")", "and", "i", "==", "1", ")", ":", "\n", "                            ", "tower_losses", ".", "append", "(", "loss", ")", "\n", "# variables = tf.trainable_variables()", "\n", "# grads_and_vars = self.optimizer.compute_gradients(loss, variables)", "\n", "# tower_grads.append(grads_and_vars)", "\n", "# tf.get_variable_scope().reuse_variables()", "\n", "", "if", "i", "==", "1", ":", "\n", "# with tf.device('/cpu:0'):", "\n", "#     print(O_features[0] == O_features[1], O_features)", "\n", "#     O_features[1] = tf.Print(O_features[1], [self.image_id, self.H_num, \"res:\",", "\n", "#                                              tf.shape(O_features[0]),tf.shape(O_features[1]),", "\n", "#                                              tf.shape(V_features[0]),tf.shape(V_features[1]),", "\n", "#                                              tf.shape(split_gt_class_HO), num_stop_list[0],", "\n", "#                                              num_stop_list[1]], '1dddmessage:',", "\n", "#                              first_n=10000)", "\n", "                            ", "if", "not", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'base'", ")", ":", "\n", "                                ", "key", "=", "'gt_class_C'", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'atl'", ")", ":", "\n", "                                    ", "new_loss", "=", "self", ".", "compose_feature_helper", ".", "merge_generate", "(", "O_features", ",", "V_features", ",", "\n", "[", "self", ".", "blobs", "[", "j", "]", "[", "key", "]", "[", "\n", ":", "num_stop_list", "[", "j", "]", "]", "for", "j", "in", "\n", "range", "(", "2", ")", "]", ",", "\n", "'atl'", ")", "\n", "# atl1 means we jointly composing HOI images and object images", "\n", "", "else", ":", "\n", "                                    ", "new_loss", "=", "self", ".", "compose_feature_helper", ".", "merge_generate", "(", "O_features", ",", "V_features", ",", "\n", "[", "self", ".", "blobs", "[", "j", "]", "[", "key", "]", "[", "\n", ":", "num_stop_list", "[", "j", "]", "]", "for", "j", "in", "\n", "range", "(", "2", ")", "]", ",", "\n", "compose_type", ")", "\n", "", "ll", "=", "self", ".", "compose_feature_helper", ".", "get_ll", "(", ")", "\n", "tower_losses", ".", "append", "(", "new_loss", "*", "ll", ")", "\n", "", "variables", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "grads_and_vars", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "tf", ".", "reduce_sum", "(", "tower_losses", ")", ",", "variables", ")", "\n", "tower_grads", ".", "append", "(", "grads_and_vars", ")", "\n", "\n", "", "", "", "", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'base'", ")", "or", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'atl'", ")", ":", "\n", "                ", "assert", "len", "(", "tower_losses", ")", "==", "2", ",", "tower_losses", "\n", "", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "1.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "grads_and_vars", "if", "grad", "is", "not", "None", "]", "\n", "\n", "# self.addition_loss(capped_gvs, layers)", "\n", "\n", "# for grad, var in capped_gvs:", "\n", "#     print('update: {}'.format(var.name))", "\n", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ",", "global_step", "=", "global_step", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'lr'", ",", "lr", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'merge_loss'", ",", "tf", ".", "reduce_sum", "(", "tower_losses", ")", ")", "\n", "self", ".", "net", ".", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_KEPT", ")", "\n", "# Write the train and validation information to tensorboard", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "tbdir", ",", "sess", ".", "graph", ")", "\n", "", "return", "lr", ",", "train_op", ",", "tf", ".", "reduce_sum", "(", "tower_losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.snapshot": [[140, 155], ["os.path.join", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.saver.save", "print", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "def", "snapshot", "(", "self", ",", "sess", ",", "iter", ")", ":", "\n", "\n", "        ", "snapshot_iters", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_ITERS", "\n", "if", "(", "iter", "%", "snapshot_iters", "==", "0", "and", "iter", "!=", "0", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "output_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "output_dir", ")", "\n", "\n", "# Store the model snapshot", "\n", "", "filename", "=", "'HOI'", "+", "'_iter_{:d}'", ".", "format", "(", "iter", ")", "+", "'.ckpt'", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "filename", ")", "\n", "\n", "# for v in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES) + tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES):", "\n", "#     print(v.name)", "\n", "self", ".", "saver", ".", "save", "(", "sess", ",", "filename", ")", "\n", "print", "(", "'Wrote snapshot to: {:s}'", ".", "format", "(", "filename", ")", ",", "iter", "/", "snapshot_iters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.train_model": [[157, 200], ["train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.construct_graph2", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.from_snapshot", "sess.graph.finalize", "ult.timer.Timer", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.get_init_step", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.writer.close", "ult.timer.Timer.tic", "ult.timer.Timer.toc", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.snapshot", "sess.run", "train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.writer.add_summary", "sess.run", "print", "float", "type", "lr.eval"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.construct_graph2", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.from_snapshot", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO.SolverWrapper.get_init_step", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.train_Solver_VCOCO_HOI.VCOCOSolverWrapperCL.snapshot"], ["", "", "def", "train_model", "(", "self", ",", "sess", ",", "max_iters", ")", ":", "\n", "\n", "        ", "lr", ",", "train_op", ",", "t_loss", "=", "self", ".", "construct_graph2", "(", "sess", ")", "\n", "self", ".", "from_snapshot", "(", "sess", ")", "\n", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "timer", "=", "Timer", "(", ")", "\n", "\n", "# Data_length = len(self.Trainval_GT)", "\n", "iter", "=", "self", ".", "get_init_step", "(", ")", "\n", "while", "iter", "<", "max_iters", "+", "1", ":", "\n", "            ", "timer", ".", "tic", "(", ")", "\n", "\n", "blobs", "=", "{", "}", "\n", "# blobs = Get_Next_Instance_HO_Neg_HICO(self.Trainval_GT, self.Trainval_N, iter, self.Pos_augment, self.Neg_select, Data_length)", "\n", "if", "(", "iter", "%", "cfg", ".", "TRAIN", ".", "SUMMARY_INTERVAL", "==", "0", ")", "or", "(", "iter", "<", "20", ")", ":", "\n", "\n", "# Compute the graph with summary", "\n", "                ", "total_loss", ",", "summary", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "t_loss", ",", "\n", "self", ".", "net", ".", "summary_op", ",", "self", ".", "net", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "iter", ")", ")", "\n", "\n", "", "else", ":", "\n", "# Compute the graph without summary", "\n", "                ", "total_loss", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "t_loss", ",", "self", ".", "net", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "\n", "", "timer", ".", "toc", "(", ")", "\n", "# print(image_id)", "\n", "# Display training information", "\n", "if", "iter", "%", "(", "cfg", ".", "TRAIN", ".", "DISPLAY", ")", "==", "0", ":", "\n", "                ", "if", "type", "(", "image_id", ")", "==", "tuple", ":", "\n", "                    ", "image_id", "=", "image_id", "[", "0", "]", "\n", "", "print", "(", "'iter: {:d} / {:d}, im_id: {:d}, total loss: {:.6f}, lr: {:f}, speed: {:.3f} s/iter'", ".", "format", "(", "\n", "iter", ",", "max_iters", ",", "image_id", ",", "total_loss", ",", "lr", ".", "eval", "(", ")", ",", "timer", ".", "average_time", ")", ",", "end", "=", "'\\r'", ",", "flush", "=", "True", ")", "\n", "\n", "", "self", ".", "snapshot", "(", "sess", ",", "iter", ")", "\n", "\n", "iter", "+=", "1", "\n", "\n", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.__init__": [[52, 121], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "ResNet50_VCOCO_HOI.ResNet50.model_name.__contains__", "ResNet50_VCOCO_HOI.ResNet50.model_name.__contains__", "numpy.array().reshape", "numpy.array().reshape", "ResNet50_VCOCO_HOI.ResNet50.reset_classes", "ResNet50_VCOCO_HOI.ResNet50.model_name.__contains__", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "print", "ResNet50_VCOCO_HOI.ResNet50.blocks.append", "numpy.array", "numpy.array", "resnet_v1_block"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.reset_classes"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "visualize", "=", "{", "}", "\n", "self", ".", "test_visualize", "=", "{", "}", "\n", "self", ".", "intermediate", "=", "{", "}", "\n", "self", ".", "predictions", "=", "{", "}", "\n", "self", ".", "score_summaries", "=", "{", "}", "\n", "self", ".", "event_summaries", "=", "{", "}", "\n", "self", ".", "train_summaries", "=", "[", "]", "\n", "self", ".", "losses", "=", "{", "}", "\n", "\n", "self", ".", "image", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "1", ",", "None", ",", "None", ",", "3", "]", ",", "name", "=", "'image'", ")", "\n", "self", ".", "spatial", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "64", ",", "64", ",", "3", "]", ",", "name", "=", "'sp'", ")", "\n", "# self.Hsp_boxes   = tf.placeholder(tf.float32, shape=[None, 5], name = 'Hsp_boxes')", "\n", "self", ".", "H_boxes", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "5", "]", ",", "name", "=", "'H_boxes'", ")", "\n", "self", ".", "O_boxes", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "5", "]", ",", "name", "=", "'O_boxes'", ")", "\n", "self", ".", "gt_class_H", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "24", "]", ",", "name", "=", "'gt_class_H'", ")", "\n", "self", ".", "gt_class_HO", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "24", "]", ",", "name", "=", "'gt_class_HO'", ")", "\n", "self", ".", "gt_class_sp", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "24", "]", ",", "name", "=", "'gt_class_sp'", ")", "\n", "self", ".", "Mask_HO", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "24", "]", ",", "name", "=", "'HO_mask'", ")", "\n", "self", ".", "Mask_H", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "24", "]", ",", "name", "=", "'H_mask'", ")", "\n", "self", ".", "Mask_sp", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "24", "]", ",", "name", "=", "'sp_mask'", ")", "\n", "self", ".", "gt_compose", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "222", "]", ",", "name", "=", "'gt_compose'", ")", "\n", "self", ".", "gt_obj", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "80", "]", ",", "name", "=", "'gt_obj'", ")", "\n", "self", ".", "H_num", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "image_id", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "num_classes", "=", "24", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_t4_'", ")", ":", "\n", "            ", "self", ".", "num_classes", "=", "222", "\n", "", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_t5_'", ")", ":", "\n", "            ", "self", ".", "verb_num_classes", "=", "21", "\n", "self", ".", "num_classes", "=", "222", "\n", "", "self", ".", "num_fc", "=", "1024", "\n", "self", ".", "verb_num_classes", "=", "24", "\n", "self", ".", "obj_num_classes", "=", "80", "\n", "self", ".", "scope", "=", "'resnet_v1_50'", "\n", "self", ".", "stride", "=", "[", "16", ",", "]", "\n", "# self.lr          = tf.placeholder(tf.float32)", "\n", "if", "tf", ".", "__version__", "==", "'1.1.0'", ":", "\n", "            ", "self", ".", "blocks", "=", "[", "resnet_utils", ".", "Block", "(", "'block1'", ",", "resnet_v1", ".", "bottleneck", ",", "[", "(", "256", ",", "64", ",", "1", ")", "]", "*", "2", "+", "[", "(", "256", ",", "64", ",", "2", ")", "]", ")", ",", "\n", "resnet_utils", ".", "Block", "(", "'block2'", ",", "resnet_v1", ".", "bottleneck", ",", "[", "(", "512", ",", "128", ",", "1", ")", "]", "*", "3", "+", "[", "(", "512", ",", "128", ",", "2", ")", "]", ")", ",", "\n", "resnet_utils", ".", "Block", "(", "'block3'", ",", "resnet_v1", ".", "bottleneck", ",", "[", "(", "1024", ",", "256", ",", "1", ")", "]", "*", "5", "+", "[", "(", "1024", ",", "256", ",", "1", ")", "]", ")", ",", "\n", "resnet_utils", ".", "Block", "(", "'block4'", ",", "resnet_v1", ".", "bottleneck", ",", "[", "(", "2048", ",", "512", ",", "1", ")", "]", "*", "3", ")", ",", "\n", "resnet_utils", ".", "Block", "(", "'block5'", ",", "resnet_v1", ".", "bottleneck", ",", "[", "(", "2048", ",", "512", ",", "1", ")", "]", "*", "3", ")", "]", "\n", "", "else", ":", "\n", "            ", "from", "tensorflow", ".", "contrib", ".", "slim", ".", "python", ".", "slim", ".", "nets", ".", "resnet_v1", "import", "resnet_v1_block", "\n", "self", ".", "blocks", "=", "[", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "64", ",", "num_units", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "128", ",", "num_units", "=", "4", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "256", ",", "num_units", "=", "6", ",", "stride", "=", "1", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "resnet_v1_block", "(", "'block5'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", "]", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'unique_weights'", ")", ":", "\n", "                ", "print", "(", "\"unique_weights2\"", ")", "\n", "self", ".", "blocks", ".", "append", "(", "resnet_v1_block", "(", "'block6'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", ")", "\n", "\n", "# remove 3, 17 22, 23 27", "\n", "", "", "self", ".", "HO_weight", "=", "np", ".", "array", "(", "[", "3.3510249", ",", "3.4552405", ",", "4.0257854", ",", "4.088436", ",", "\n", "3.4370995", ",", "3.85842", ",", "4.637334", ",", "3.5487218", ",", "3.536237", ",", "\n", "2.5578923", ",", "3.342811", ",", "3.8897269", ",", "4.70686", ",", "3.3952892", ",", "\n", "3.9706533", ",", "4.504736", ",", "1.4873443", ",", "3.700363", ",", "\n", "4.1058283", ",", "3.6298118", ",", "5.0808263", ",", "\n", "1.520838", ",", "3.3888445", ",", "3.9899964", "]", ",", "dtype", "=", "'float32'", ")", ".", "reshape", "(", "1", ",", "24", ")", "\n", "self", ".", "H_weight", "=", "np", ".", "array", "(", "[", "4.0984106", ",", "4.102459", ",", "4.0414762", ",", "4.0414762", ",", "\n", "3.9768186", ",", "4.23686", ",", "5.3542085", ",", "3.723717", ",", "3.4699364", ",", "\n", "2.4587274", ",", "3.7167964", ",", "4.08836", ",", "5.050695", ",", "3.9077065", ",", "\n", "4.534647", ",", "3.4699364", ",", "1.8585607", ",", "3.9433942", ",", "\n", "3.9433942", ",", "4.3523254", ",", "5.138182", ",", "\n", "1.7807873", ",", "4.080392", ",", "4.5761204", "]", ",", "dtype", "=", "'float32'", ")", ".", "reshape", "(", "1", ",", "24", ")", "\n", "self", ".", "reset_classes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.set_ph": [[122, 145], ["print", "ResNet50_VCOCO_HOI.ResNet50.reset_classes"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.reset_classes"], ["", "def", "set_ph", "(", "self", ",", "image", ",", "image_id", ",", "num_pos", ",", "sp", ",", "Human_augmented", ",", "Object_augmented", ",", "\n", "gt_cls_H", "=", "None", ",", "gt_cls_HO", "=", "None", ",", "gt_cls_sp", "=", "None", ",", "\n", "Mask_HO", "=", "None", ",", "Mask_H", "=", "None", ",", "Mask_sp", "=", "None", ",", "gt_compose", "=", "None", ",", "gt_obj", "=", "None", ")", ":", "\n", "# image, image_id, H_num, spatial, H_boxes, O_boxes, gt_cls_H,", "\n", "# gt_cls_HO, gt_cls_sp, Mask_HO, Mask_H, Mask_sp, gt_compose", "\n", "        ", "if", "image", "is", "not", "None", ":", "self", ".", "image", "=", "image", "\n", "if", "image_id", "is", "not", "None", ":", "self", ".", "image_id", "=", "image_id", "\n", "if", "sp", "is", "not", "None", ":", "self", ".", "spatial", "=", "sp", "\n", "if", "Human_augmented", "is", "not", "None", ":", "self", ".", "H_boxes", "=", "Human_augmented", "\n", "# self.Hsp_boxes   = Hsp_boxes", "\n", "if", "Object_augmented", "is", "not", "None", ":", "self", ".", "O_boxes", "=", "Object_augmented", "\n", "if", "gt_cls_H", "is", "not", "None", ":", "self", ".", "gt_class_H", "=", "gt_cls_H", "\n", "if", "gt_cls_HO", "is", "not", "None", ":", "self", ".", "gt_class_HO", "=", "gt_cls_HO", "\n", "if", "gt_cls_sp", "is", "not", "None", ":", "self", ".", "gt_class_sp", "=", "gt_cls_sp", "\n", "if", "Mask_HO", "is", "not", "None", ":", "self", ".", "Mask_HO", "=", "Mask_HO", "\n", "if", "Mask_H", "is", "not", "None", ":", "self", ".", "Mask_H", "=", "Mask_H", "\n", "if", "Mask_sp", "is", "not", "None", ":", "self", ".", "Mask_sp", "=", "Mask_sp", "\n", "if", "num_pos", "is", "not", "None", ":", "self", ".", "H_num", "=", "num_pos", "\n", "if", "gt_compose", "is", "not", "None", ":", "self", ".", "gt_compose", "=", "gt_compose", "\n", "if", "gt_obj", "is", "not", "None", ":", "self", ".", "gt_obj", "=", "gt_obj", "\n", "print", "(", "\"set ph:\"", ",", "self", ".", "image", ")", "\n", "if", "self", ".", "gt_compose", "is", "not", "None", ":", "\n", "            ", "self", ".", "reset_classes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.reset_classes": [[146, 229], ["ResNet50_VCOCO_HOI.ResNet50.model_name.__contains__", "get_word2vec", "tensorflow.constant", "tensorflow.constant", "Exception", "ResNet50_VCOCO_HOI.ResNet50.model_name.__contains__", "ResNet50_VCOCO_HOI.ResNet50.model_name.__contains__", "get_convert_matrix_coco3", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "ResNet50_VCOCO_HOI.ResNet50.model_name.__contains__", "get_convert_matrix_coco3", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "ResNet50_VCOCO_HOI.ResNet50.model_name.__contains__", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "get_convert_matrix_coco3", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "numpy.asarray", "numpy.zeros", "tensorflow.constant", "tensorflow.constant", "numpy.zeros", "tensorflow.constant", "tensorflow.constant", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "numpy.where", "numpy.where", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_word2vec", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_convert_matrix_coco3", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_convert_matrix_coco3", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_convert_matrix_coco3"], ["", "", "def", "reset_classes", "(", "self", ")", ":", "\n", "\n", "        ", "from", "networks", ".", "tools", "import", "get_convert_matrix_coco3", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_t1_'", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"wrong model. t1 is depressed\"", ")", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_t2_'", ")", "or", "self", ".", "model_name", ".", "__contains__", "(", "'_t3_'", ")", ":", "\n", "            ", "self", ".", "verb_num_classes", "=", "24", "\n", "self", ".", "obj_num_classes", "=", "80", "\n", "self", ".", "num_classes", "=", "24", "\n", "self", ".", "compose_num_classes", "=", "222", "\n", "verb_to_HO_matrix", ",", "obj_to_HO_matrix", "=", "get_convert_matrix_coco3", "(", "self", ".", "verb_num_classes", ",", "self", ".", "obj_num_classes", ")", "\n", "\n", "self", ".", "obj_to_HO_matrix", "=", "tf", ".", "constant", "(", "obj_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "verb_to_HO_matrix", "=", "tf", ".", "constant", "(", "verb_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "gt_obj_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_compose", ",", "self", ".", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "self", ".", "gt_verb_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_compose", ",", "self", ".", "verb_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_t4_'", ")", ":", "\n", "            ", "self", ".", "verb_num_classes", "=", "24", "\n", "self", ".", "obj_num_classes", "=", "80", "\n", "self", ".", "num_classes", "=", "222", "\n", "self", ".", "compose_num_classes", "=", "222", "\n", "verb_to_HO_matrix", ",", "obj_to_HO_matrix", "=", "get_convert_matrix_coco3", "(", "self", ".", "verb_num_classes", ",", "self", ".", "obj_num_classes", ")", "\n", "\n", "self", ".", "obj_to_HO_matrix", "=", "tf", ".", "constant", "(", "obj_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "verb_to_HO_matrix", "=", "tf", ".", "constant", "(", "verb_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "gt_obj_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_compose", ",", "self", ".", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "self", ".", "gt_verb_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_compose", ",", "self", ".", "verb_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_t5_'", ")", ":", "\n", "            ", "self", ".", "verb_num_classes", "=", "21", "\n", "self", ".", "obj_num_classes", "=", "80", "\n", "self", ".", "num_classes", "=", "222", "\n", "self", ".", "compose_num_classes", "=", "222", "\n", "verb_to_HO_matrix", ",", "obj_to_HO_matrix", "=", "get_convert_matrix_coco3", "(", "self", ".", "verb_num_classes", ",", "self", ".", "obj_num_classes", ")", "\n", "\n", "self", ".", "obj_to_HO_matrix_np", "=", "obj_to_HO_matrix", "\n", "self", ".", "verb_to_HO_matrix_np", "=", "verb_to_HO_matrix", "\n", "self", ".", "obj_to_HO_matrix", "=", "tf", ".", "constant", "(", "obj_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "verb_to_HO_matrix", "=", "tf", ".", "constant", "(", "verb_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "gt_obj_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_compose", ",", "self", ".", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "self", ".", "gt_verb_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_compose", ",", "self", ".", "verb_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "\n", "num_inst", "=", "np", ".", "asarray", "(", "[", "485", ",", "434", ",", "3", ",", "6", ",", "6", ",", "3", ",", "3", ",", "207", ",", "1", ",", "3", ",", "4", ",", "7", ",", "1", ",", "7", ",", "32", ",", "2", ",", "160", ",", "37", ",", "67", ",", "9", ",", "126", ",", "1", ",", "24", ",", "\n", "6", ",", "31", ",", "108", ",", "73", ",", "292", ",", "134", ",", "398", ",", "86", ",", "28", ",", "39", ",", "21", ",", "3", ",", "60", ",", "4", ",", "7", ",", "1", ",", "61", ",", "110", ",", "80", ",", "56", ",", "56", ",", "\n", "119", ",", "107", ",", "96", ",", "59", ",", "2", ",", "1", ",", "4", ",", "430", ",", "136", ",", "55", ",", "1", ",", "5", ",", "1", ",", "20", ",", "165", ",", "278", ",", "26", ",", "24", ",", "1", ",", "29", ",", "228", ",", "\n", "1", ",", "15", ",", "55", ",", "54", ",", "1", ",", "2", ",", "57", ",", "52", ",", "93", ",", "72", ",", "3", ",", "7", ",", "12", ",", "6", ",", "6", ",", "1", ",", "11", ",", "105", ",", "4", ",", "2", ",", "1", ",", "1", ",", "7", ",", "1", ",", "\n", "17", ",", "1", ",", "1", ",", "2", ",", "170", ",", "91", ",", "445", ",", "6", ",", "1", ",", "2", ",", "5", ",", "1", ",", "12", ",", "4", ",", "1", ",", "1", ",", "1", ",", "14", ",", "18", ",", "7", ",", "7", ",", "5", ",", "8", ",", "4", ",", "7", ",", "\n", "4", ",", "1", ",", "3", ",", "9", ",", "390", ",", "45", ",", "156", ",", "521", ",", "15", ",", "4", ",", "5", ",", "338", ",", "254", ",", "3", ",", "5", ",", "11", ",", "15", ",", "12", ",", "43", ",", "12", ",", "12", ",", "2", ",", "\n", "2", ",", "14", ",", "1", ",", "11", ",", "37", ",", "18", ",", "134", ",", "1", ",", "7", ",", "1", ",", "29", ",", "291", ",", "1", ",", "3", ",", "4", ",", "62", ",", "4", ",", "75", ",", "1", ",", "22", ",", "228", ",", "109", ",", "\n", "233", ",", "1", ",", "366", ",", "86", ",", "50", ",", "46", ",", "68", ",", "1", ",", "1", ",", "1", ",", "1", ",", "8", ",", "14", ",", "45", ",", "2", ",", "5", ",", "45", ",", "70", ",", "89", ",", "9", ",", "99", ",", "186", ",", "\n", "50", ",", "56", ",", "54", ",", "9", ",", "120", ",", "66", ",", "56", ",", "160", ",", "269", ",", "32", ",", "65", ",", "83", ",", "67", ",", "197", ",", "43", ",", "13", ",", "26", ",", "5", ",", "46", ",", "3", ",", "6", ",", "\n", "1", ",", "60", ",", "67", ",", "56", ",", "20", ",", "2", ",", "78", ",", "11", ",", "58", ",", "1", ",", "350", ",", "1", ",", "83", ",", "41", ",", "18", ",", "2", ",", "9", ",", "1", ",", "466", ",", "224", ",", "32", "]", ")", "\n", "self", ".", "num_inst", "=", "self", ".", "num_inst_all", "=", "num_inst", "\n", "tmp", "=", "np", ".", "where", "(", "num_inst", ">", "10", ")", "[", "0", "]", "\n", "tmp1", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "tmp1", "[", "tmp", "]", "=", "1", "\n", "self", ".", "non_rare_cls_index", "=", "tf", ".", "constant", "(", "tmp1", ")", "\n", "\n", "tmp", "=", "np", ".", "where", "(", "num_inst", "<=", "10", ")", "[", "0", "]", "\n", "tmp1", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "tmp1", "[", "tmp", "]", "=", "1", "\n", "self", ".", "rare_cls_index", "=", "tf", ".", "constant", "(", "tmp1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "# verb_to_HO_matrix, obj_to_HO_matrix = get_convert_matrix_coco(self.verb_num_classes, self.obj_num_classes)", "\n", "# self.obj_to_HO_matrix = tf.constant(obj_to_HO_matrix, tf.float32)", "\n", "# self.verb_to_HO_matrix = tf.constant(verb_to_HO_matrix, tf.float32)", "\n", "# self.gt_obj_class = tf.cast(tf.matmul(self.gt_class_HO, self.obj_to_HO_matrix, transpose_b=True) > 0,", "\n", "#                             tf.float32)", "\n", "# self.gt_verb_class = tf.cast(tf.matmul(self.gt_class_HO, self.verb_to_HO_matrix, transpose_b=True) > 0,", "\n", "#                              tf.float32)", "\n", "\n", "", "from", "networks", ".", "tools", "import", "get_word2vec", "\n", "word2vec", "=", "get_word2vec", "(", ")", "\n", "self", ".", "word2vec_emb", "=", "tf", ".", "constant", "(", "word2vec", ")", "\n", "self", ".", "gt_class_HO_for_G_verbs", "=", "None", "\n", "self", ".", "gt_class_HO_for_D_verbs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.build_base": [[230, 237], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.conv2d_same", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.conv2d_same", "tensorflow.pad", "tensorflow.pad", "tensorflow.max_pool2d", "tensorflow.max_pool2d"], "methods", ["None"], ["", "def", "build_base", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "self", ".", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", ")", ":", "\n", "            ", "net", "=", "resnet_utils", ".", "conv2d_same", "(", "self", ".", "image", ",", "64", ",", "7", ",", "stride", "=", "2", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "tf", ".", "pad", "(", "net", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'pool1'", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.image_to_head": [[238, 262], ["tensorflow.arg_scope", "tensorflow.arg_scope", "ResNet50_VCOCO_HOI.ResNet50.build_base", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.arg_scope", "tensorflow.arg_scope", "ResNet50_VCOCO_HOI.ResNet50.model_name.__contains__", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "ResNet50_VCOCO_HOI.resnet_arg_scope", "ResNet50_VCOCO_HOI.resnet_arg_scope", "print"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.build_base", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "image_to_head", "(", "self", ",", "is_training", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "False", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "build_base", "(", ")", "\n", "net", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "net", ",", "\n", "self", ".", "blocks", "[", "0", ":", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "\n", "", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "            ", "if", "self", ".", "model_name", ".", "__contains__", "(", "'unique_weights'", ")", ":", "\n", "                ", "print", "(", "\"unique_weights3\"", ")", "\n", "stop", "=", "-", "3", "\n", "", "else", ":", "\n", "                ", "stop", "=", "-", "2", "\n", "", "head", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "net", ",", "\n", "self", ".", "blocks", "[", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", ":", "stop", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "\n", "", "return", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.sp_to_head": [[264, 276], ["tensorflow.variable_scope", "tensorflow.variable_scope", "ResNet50_VCOCO_HOI.ResNet50.model_name.__contains__", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.flatten", "tensorflow.flatten"], "methods", ["None"], ["", "def", "sp_to_head", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "self", ".", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", ")", ":", "\n", "            ", "ends", "=", "2", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_spose'", ")", ":", "\n", "                ", "ends", "=", "3", "\n", "", "conv1_sp", "=", "slim", ".", "conv2d", "(", "self", ".", "spatial", "[", ":", ",", ":", ",", ":", ",", ":", "ends", "]", ",", "64", ",", "[", "5", ",", "5", "]", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'conv1_sp'", ")", "\n", "pool1_sp", "=", "slim", ".", "max_pool2d", "(", "conv1_sp", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool1_sp'", ")", "\n", "conv2_sp", "=", "slim", ".", "conv2d", "(", "pool1_sp", ",", "32", ",", "[", "5", ",", "5", "]", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'conv2_sp'", ")", "\n", "pool2_sp", "=", "slim", ".", "max_pool2d", "(", "conv2_sp", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool2_sp'", ")", "\n", "pool2_flat_sp", "=", "slim", ".", "flatten", "(", "pool2_sp", ")", "\n", "\n", "", "return", "pool2_flat_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.res5": [[278, 301], ["tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "ResNet50_VCOCO_HOI.resnet_arg_scope"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "res5", "(", "self", ",", "pool5_H", ",", "pool5_O", ",", "sp", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "\n", "            ", "fc7_H", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "pool5_H", ",", "\n", "self", ".", "blocks", "[", "-", "2", ":", "-", "1", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "\n", "# fc7_H = tf.reduce_mean(fc7_H, axis=[1, 2])", "\n", "\n", "\n", "fc7_O", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "pool5_O", ",", "\n", "self", ".", "blocks", "[", "-", "1", ":", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "\n", "# fc7_O = tf.reduce_mean(fc7_O, axis=[1, 2])", "\n", "\n", "", "return", "fc7_H", ",", "fc7_O", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.head_to_tail": [[302, 332], ["tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.concat", "tensorflow.concat", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.concat", "tensorflow.concat", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.concat", "tensorflow.concat", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "ResNet50_VCOCO_HOI.resnet_arg_scope"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "head_to_tail", "(", "self", ",", "fc7_H", ",", "fc7_O", ",", "pool5_SH", ",", "pool5_SO", ",", "sp", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "\n", "            ", "fc7_SH", "=", "tf", ".", "reduce_mean", "(", "pool5_SH", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "fc7_SO", "=", "tf", ".", "reduce_mean", "(", "pool5_SO", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "\n", "Concat_SH", "=", "tf", ".", "concat", "(", "[", "fc7_H", "[", ":", "self", ".", "H_num", ",", ":", "]", ",", "fc7_SH", "[", ":", "self", ".", "H_num", ",", ":", "]", "]", ",", "1", ")", "\n", "\n", "fc8_SH", "=", "slim", ".", "fully_connected", "(", "Concat_SH", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc8_SH'", ")", "\n", "fc8_SH", "=", "slim", ".", "dropout", "(", "fc8_SH", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout8_SH'", ")", "\n", "fc9_SH", "=", "slim", ".", "fully_connected", "(", "fc8_SH", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc9_SH'", ")", "\n", "fc9_SH", "=", "slim", ".", "dropout", "(", "fc9_SH", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout9_SH'", ")", "\n", "\n", "\n", "Concat_SO", "=", "tf", ".", "concat", "(", "[", "fc7_O", ",", "fc7_SO", "]", ",", "1", ")", "\n", "\n", "fc8_SO", "=", "slim", ".", "fully_connected", "(", "Concat_SO", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc8_SO'", ")", "\n", "fc8_SO", "=", "slim", ".", "dropout", "(", "fc8_SO", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout8_SO'", ")", "\n", "fc9_SO", "=", "slim", ".", "fully_connected", "(", "fc8_SO", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc9_SO'", ")", "\n", "fc9_SO", "=", "slim", ".", "dropout", "(", "fc9_SO", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout9_SO'", ")", "\n", "\n", "\n", "Concat_SHsp", "=", "tf", ".", "concat", "(", "[", "fc7_H", ",", "sp", "]", ",", "1", ")", "\n", "Concat_SHsp", "=", "slim", ".", "fully_connected", "(", "Concat_SHsp", ",", "self", ".", "num_fc", ",", "scope", "=", "'Concat_SHsp'", ")", "\n", "Concat_SHsp", "=", "slim", ".", "dropout", "(", "Concat_SHsp", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout6_SHsp'", ")", "\n", "fc7_SHsp", "=", "slim", ".", "fully_connected", "(", "Concat_SHsp", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc7_SHsp'", ")", "\n", "fc7_SHsp", "=", "slim", ".", "dropout", "(", "fc7_SHsp", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout7_SHsp'", ")", "\n", "\n", "\n", "", "return", "fc9_SH", ",", "fc9_SO", ",", "fc7_SHsp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.crop_pool_layer": [[333, 346], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.squeeze", "tensorflow.squeeze", "ResNet50_VCOCO_HOI.ResNet50.trans_boxes_by_feats", "tensorflow.slice", "tensorflow.slice", "tensorflow.image.crop_and_resize", "tensorflow.image.crop_and_resize", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.image.crop_and_resize", "tensorflow.image.crop_and_resize", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.trans_boxes_by_feats"], ["", "def", "crop_pool_layer", "(", "self", ",", "bottom", ",", "rois", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "batch_ids", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"batch_id\"", ")", ",", "[", "1", "]", ")", "\n", "bboxes", "=", "self", ".", "trans_boxes_by_feats", "(", "bottom", ",", "rois", ")", "\n", "\n", "if", "cfg", ".", "RESNET", ".", "MAX_POOL", ":", "\n", "                ", "pre_pool_size", "=", "cfg", ".", "POOLING_SIZE", "*", "2", "\n", "crops", "=", "tf", ".", "image", ".", "crop_and_resize", "(", "bottom", ",", "bboxes", ",", "tf", ".", "to_int32", "(", "batch_ids", ")", ",", "[", "pre_pool_size", ",", "pre_pool_size", "]", ",", "name", "=", "\"crops\"", ")", "\n", "crops", "=", "slim", ".", "max_pool2d", "(", "crops", ",", "[", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ")", "\n", "", "else", ":", "\n", "                ", "crops", "=", "tf", ".", "image", ".", "crop_and_resize", "(", "bottom", ",", "bboxes", ",", "tf", ".", "to_int32", "(", "batch_ids", ")", ",", "[", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", "]", ",", "name", "=", "\"crops\"", ")", "\n", "", "", "return", "crops", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.trans_boxes_by_feats": [[347, 357], ["tensorflow.shape", "tensorflow.shape", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "numpy.float32", "numpy.float32", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.concat", "tensorflow.concat", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float"], "methods", ["None"], ["", "def", "trans_boxes_by_feats", "(", "self", ",", "bottom", ",", "rois", ")", ":", "\n", "        ", "bottom_shape", "=", "tf", ".", "shape", "(", "bottom", ")", "\n", "height", "=", "(", "tf", ".", "to_float", "(", "bottom_shape", "[", "1", "]", ")", "-", "1.", ")", "*", "np", ".", "float32", "(", "self", ".", "stride", "[", "0", "]", ")", "\n", "width", "=", "(", "tf", ".", "to_float", "(", "bottom_shape", "[", "2", "]", ")", "-", "1.", ")", "*", "np", ".", "float32", "(", "self", ".", "stride", "[", "0", "]", ")", "\n", "x1", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"x1\"", ")", "/", "width", "\n", "y1", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "2", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"y1\"", ")", "/", "height", "\n", "x2", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "3", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"x2\"", ")", "/", "width", "\n", "y2", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "4", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"y2\"", ")", "/", "height", "\n", "bboxes", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "concat", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", "]", ",", "axis", "=", "1", ")", ")", "\n", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.attention_pool_layer_H": [[358, 366], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "attention_pool_layer_H", "(", "self", ",", "bottom", ",", "fc7_H", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "fc1", "=", "slim", ".", "fully_connected", "(", "fc7_H", ",", "512", ",", "scope", "=", "'fc1_b'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", ")", "\n", "fc1", "=", "slim", ".", "dropout", "(", "fc1", ",", "keep_prob", "=", "0.8", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout1_b'", ")", "\n", "fc1", "=", "tf", ".", "reshape", "(", "fc1", ",", "[", "tf", ".", "shape", "(", "fc1", ")", "[", "0", "]", ",", "1", ",", "1", ",", "tf", ".", "shape", "(", "fc1", ")", "[", "1", "]", "]", ")", "\n", "att", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "bottom", ",", "fc1", ")", ",", "3", ",", "keep_dims", "=", "True", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.attention_norm_H": [[368, 378], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.shape", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "attention_norm_H", "(", "self", ",", "att", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "att_shape", "=", "tf", ".", "shape", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "[", "att_shape", "[", "0", "]", ",", "att_shape", "[", "1", "]", ",", "-", "1", "]", ")", "\n", "att", "=", "tf", ".", "nn", ".", "softmax", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "att_shape", ")", "\n", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.attention_pool_layer_O": [[379, 387], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "attention_pool_layer_O", "(", "self", ",", "bottom", ",", "fc7_O", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "fc1", "=", "slim", ".", "fully_connected", "(", "fc7_O", ",", "512", ",", "scope", "=", "'fc1_b'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "fc1", "=", "slim", ".", "dropout", "(", "fc1", ",", "keep_prob", "=", "0.8", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout1_b'", ")", "\n", "fc1", "=", "tf", ".", "reshape", "(", "fc1", ",", "[", "tf", ".", "shape", "(", "fc1", ")", "[", "0", "]", ",", "1", ",", "1", ",", "tf", ".", "shape", "(", "fc1", ")", "[", "1", "]", "]", ")", "\n", "att", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "bottom", ",", "fc1", ")", ",", "3", ",", "keep_dims", "=", "True", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.attention_norm_O": [[389, 399], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.shape", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "attention_norm_O", "(", "self", ",", "att", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "att_shape", "=", "tf", ".", "shape", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "[", "att_shape", "[", "0", "]", ",", "att_shape", "[", "1", "]", ",", "-", "1", "]", ")", "\n", "att", "=", "tf", ".", "nn", ".", "softmax", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "att_shape", ")", "\n", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.region_classification": [[400, 434], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["None"], ["", "def", "region_classification", "(", "self", ",", "fc7_H", ",", "fc7_O", ",", "fc7_SHsp", ",", "is_training", ",", "initializer", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "cls_score_H", "=", "slim", ".", "fully_connected", "(", "fc7_H", ",", "self", ".", "num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'cls_score_H'", ")", "\n", "cls_prob_H", "=", "tf", ".", "nn", ".", "sigmoid", "(", "cls_score_H", ",", "name", "=", "'cls_prob_H'", ")", "\n", "tf", ".", "reshape", "(", "cls_prob_H", ",", "[", "1", ",", "self", ".", "num_classes", "]", ")", "\n", "\n", "cls_score_O", "=", "slim", ".", "fully_connected", "(", "fc7_O", ",", "self", ".", "num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'cls_score_O'", ")", "\n", "cls_prob_O", "=", "tf", ".", "nn", ".", "sigmoid", "(", "cls_score_O", ",", "name", "=", "'cls_prob_O'", ")", "\n", "tf", ".", "reshape", "(", "cls_prob_O", ",", "[", "1", ",", "self", ".", "num_classes", "]", ")", "\n", "\n", "cls_score_sp", "=", "slim", ".", "fully_connected", "(", "fc7_SHsp", ",", "self", ".", "num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'cls_score_sp'", ")", "\n", "cls_prob_sp", "=", "tf", ".", "nn", ".", "sigmoid", "(", "cls_score_sp", ",", "name", "=", "'cls_prob_sp'", ")", "\n", "tf", ".", "reshape", "(", "cls_prob_sp", ",", "[", "1", ",", "self", ".", "num_classes", "]", ")", "\n", "\n", "\n", "self", ".", "predictions", "[", "\"cls_score_H\"", "]", "=", "cls_score_H", "\n", "self", ".", "predictions", "[", "\"cls_prob_H\"", "]", "=", "cls_prob_H", "\n", "self", ".", "predictions", "[", "\"cls_score_O\"", "]", "=", "cls_score_O", "\n", "self", ".", "predictions", "[", "\"cls_prob_O\"", "]", "=", "cls_prob_O", "\n", "self", ".", "predictions", "[", "\"cls_score_sp\"", "]", "=", "cls_score_sp", "\n", "self", ".", "predictions", "[", "\"cls_prob_sp\"", "]", "=", "cls_prob_sp", "\n", "\n", "self", ".", "predictions", "[", "\"cls_prob_HO\"", "]", "=", "cls_prob_sp", "*", "(", "cls_prob_O", "+", "cls_prob_H", ")", "\n", "\n", "", "return", "cls_prob_H", ",", "cls_prob_O", ",", "cls_prob_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.bottleneck": [[435, 444], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.conv2d"], "methods", ["None"], ["", "def", "bottleneck", "(", "self", ",", "bottom", ",", "is_training", ",", "name", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "# if reuse:", "\n", "#     scope.reuse_variables()", "\n", "\n", "            ", "head_bottleneck", "=", "slim", ".", "conv2d", "(", "bottom", ",", "1024", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "name", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", ")", "\n", "\n", "", "return", "head_bottleneck", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.build_network": [[447, 488], ["tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "ResNet50_VCOCO_HOI.ResNet50.image_to_head", "ResNet50_VCOCO_HOI.ResNet50.sp_to_head", "ResNet50_VCOCO_HOI.ResNet50.crop_pool_layer", "ResNet50_VCOCO_HOI.ResNet50.crop_pool_layer", "ResNet50_VCOCO_HOI.ResNet50.res5", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "ResNet50_VCOCO_HOI.ResNet50.attention_pool_layer_H", "ResNet50_VCOCO_HOI.ResNet50.attention_norm_H", "tensorflow.multiply", "tensorflow.multiply", "ResNet50_VCOCO_HOI.ResNet50.attention_pool_layer_O", "ResNet50_VCOCO_HOI.ResNet50.attention_norm_O", "tensorflow.multiply", "tensorflow.multiply", "ResNet50_VCOCO_HOI.ResNet50.bottleneck", "ResNet50_VCOCO_HOI.ResNet50.bottleneck", "ResNet50_VCOCO_HOI.ResNet50.head_to_tail", "ResNet50_VCOCO_HOI.ResNet50.region_classification", "ResNet50_VCOCO_HOI.ResNet50.score_summaries.update", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.image_to_head", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.sp_to_head", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.crop_pool_layer", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.crop_pool_layer", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.res5", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_pool_layer_H", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_norm_H", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_pool_layer_O", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_norm_O", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.bottleneck", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.bottleneck", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.head_to_tail", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.region_classification"], ["", "def", "build_network", "(", "self", ",", "is_training", ")", ":", "\n", "        ", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.01", ")", "\n", "\n", "# ResNet Backbone", "\n", "head", "=", "self", ".", "image_to_head", "(", "is_training", ")", "\n", "sp", "=", "self", ".", "sp_to_head", "(", ")", "\n", "pool5_H", "=", "self", ".", "crop_pool_layer", "(", "head", ",", "self", ".", "H_boxes", ",", "'Crop_H'", ")", "\n", "pool5_O", "=", "self", ".", "crop_pool_layer", "(", "head", ",", "self", ".", "O_boxes", ",", "'Crop_O'", ")", "\n", "\n", "fc7_H", ",", "fc7_O", "=", "self", ".", "res5", "(", "pool5_H", ",", "pool5_O", ",", "sp", ",", "is_training", ",", "'res5'", ")", "\n", "fc7_H", "=", "tf", ".", "reduce_mean", "(", "fc7_H", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "fc7_O", "=", "tf", ".", "reduce_mean", "(", "fc7_O", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "\n", "# Phi ", "\n", "head_phi", "=", "slim", ".", "conv2d", "(", "head", ",", "512", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'head_phi'", ")", "\n", "\n", "# g ", "\n", "head_g", "=", "slim", ".", "conv2d", "(", "head", ",", "512", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'head_g'", ")", "\n", "\n", "Att_H", "=", "self", ".", "attention_pool_layer_H", "(", "head_phi", ",", "fc7_H", "[", ":", "self", ".", "H_num", ",", ":", "]", ",", "is_training", ",", "'Att_H'", ")", "\n", "Att_H", "=", "self", ".", "attention_norm_H", "(", "Att_H", ",", "'Norm_Att_H'", ")", "\n", "\n", "att_head_H", "=", "tf", ".", "multiply", "(", "head_g", ",", "Att_H", ")", "\n", "\n", "Att_O", "=", "self", ".", "attention_pool_layer_O", "(", "head_phi", ",", "fc7_O", ",", "is_training", ",", "'Att_O'", ")", "\n", "Att_O", "=", "self", ".", "attention_norm_O", "(", "Att_O", ",", "'Norm_Att_O'", ")", "\n", "att_head_O", "=", "tf", ".", "multiply", "(", "head_g", ",", "Att_O", ")", "\n", "\n", "pool5_SH", "=", "self", ".", "bottleneck", "(", "att_head_H", ",", "is_training", ",", "'bottleneck'", ",", "False", ")", "\n", "pool5_SO", "=", "self", ".", "bottleneck", "(", "att_head_O", ",", "is_training", ",", "'bottleneck'", ",", "True", ")", "\n", "\n", "\n", "fc7_SH", ",", "fc7_SO", ",", "fc7_SHsp", "=", "self", ".", "head_to_tail", "(", "fc7_H", ",", "fc7_O", ",", "pool5_SH", ",", "pool5_SO", ",", "sp", ",", "is_training", ",", "'fc_HO'", ")", "\n", "\n", "cls_prob_H", ",", "cls_prob_O", ",", "cls_prob_sp", "=", "self", ".", "region_classification", "(", "fc7_SH", ",", "fc7_SO", ",", "fc7_SHsp", ",", "is_training", ",", "initializer", ",", "'classification'", ")", "\n", "\n", "self", ".", "score_summaries", ".", "update", "(", "self", ".", "predictions", ")", "\n", "\n", "self", ".", "visualize", "[", "\"attention_map_H\"", "]", "=", "(", "Att_H", "-", "tf", ".", "reduce_min", "(", "Att_H", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", "/", "tf", ".", "reduce_max", "(", "(", "Att_H", "[", "0", ",", ":", ",", ":", ",", ":", "]", "-", "tf", ".", "reduce_min", "(", "Att_H", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", ")", "\n", "self", ".", "visualize", "[", "\"attention_map_O\"", "]", "=", "(", "Att_O", "-", "tf", ".", "reduce_min", "(", "Att_O", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", "/", "tf", ".", "reduce_max", "(", "(", "Att_O", "[", "0", ",", ":", ",", ":", ",", ":", "]", "-", "tf", ".", "reduce_min", "(", "Att_O", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", ")", "\n", "return", "cls_prob_H", ",", "cls_prob_O", ",", "cls_prob_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.create_architecture": [[491, 520], ["ResNet50_VCOCO_HOI.ResNet50.build_network", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "ResNet50_VCOCO_HOI.ResNet50.add_loss", "layers_to_output.update", "ResNet50_VCOCO_HOI.ResNet50.train_summaries.append", "tensorflow.device", "tensorflow.device", "ResNet50_VCOCO_HOI.ResNet50.event_summaries.items", "tensorflow.summary.merge_all", "tensorflow.summary.merge_all", "tensorflow.summary.merge", "tensorflow.summary.merge", "val_summaries.append", "tensorflow.summary.scalar", "tensorflow.summary.scalar"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.build_network", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.add_loss"], ["", "def", "create_architecture", "(", "self", ",", "is_training", ")", ":", "\n", "\n", "        ", "self", ".", "build_network", "(", "is_training", ")", "\n", "\n", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "            ", "self", ".", "train_summaries", ".", "append", "(", "var", ")", "\n", "\n", "", "self", ".", "add_loss", "(", ")", "\n", "layers_to_output", "=", "{", "}", "\n", "layers_to_output", ".", "update", "(", "self", ".", "losses", ")", "\n", "\n", "val_summaries", "=", "[", "]", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "# val_summaries.append(self.add_gt_image_summary_H())", "\n", "# val_summaries.append(self.add_gt_image_summary_HO())", "\n", "# tf.summary.image('ATTENTION_MAP_H',  self.visualize[\"attention_map_H\"], max_outputs=1)", "\n", "# tf.summary.image('ATTENTION_MAP_O',  self.visualize[\"attention_map_O\"], max_outputs=1)", "\n", "            ", "for", "key", ",", "var", "in", "self", ".", "event_summaries", ".", "items", "(", ")", ":", "\n", "                ", "val_summaries", ".", "append", "(", "tf", ".", "summary", ".", "scalar", "(", "key", ",", "var", ")", ")", "\n", "# for key, var in self.score_summaries.items():", "\n", "#     self.add_score_summary(key, var)", "\n", "# for var in self.train_summaries:", "\n", "#     self.add_train_summary(var)", "\n", "\n", "# val_summaries.append(tf.summary.scalar('lr', self.lr))", "\n", "", "self", ".", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "summary_op_val", "=", "tf", ".", "summary", ".", "merge", "(", "val_summaries", ")", "\n", "\n", "", "return", "layers_to_output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.add_loss": [[522, 552], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "ResNet50_VCOCO_HOI.ResNet50.event_summaries.update", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "add_loss", "(", "self", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'LOSS'", ")", "as", "scope", ":", "\n", "            ", "cls_score_H", "=", "self", ".", "predictions", "[", "\"cls_score_H\"", "]", "\n", "cls_score_O", "=", "self", ".", "predictions", "[", "\"cls_score_O\"", "]", "\n", "cls_score_sp", "=", "self", ".", "predictions", "[", "\"cls_score_sp\"", "]", "\n", "\n", "label_H", "=", "self", ".", "gt_class_H", "\n", "label_HO", "=", "self", ".", "gt_class_HO", "\n", "label_sp", "=", "self", ".", "gt_class_sp", "\n", "\n", "H_mask", "=", "self", ".", "Mask_H", "\n", "HO_mask", "=", "self", ".", "Mask_HO", "\n", "sp_mask", "=", "self", ".", "Mask_sp", "\n", "\n", "H_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_H", ",", "logits", "=", "cls_score_H", ")", ",", "H_mask", ")", ")", "\n", "HO_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_HO", ",", "logits", "=", "cls_score_O", ")", ",", "HO_mask", ")", ")", "\n", "sp_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_sp", ",", "logits", "=", "cls_score_sp", ")", ",", "sp_mask", ")", ")", "\n", "\n", "\n", "self", ".", "losses", "[", "'H_cross_entropy'", "]", "=", "H_cross_entropy", "\n", "self", ".", "losses", "[", "'HO_cross_entropy'", "]", "=", "HO_cross_entropy", "\n", "self", ".", "losses", "[", "'sp_cross_entropy'", "]", "=", "sp_cross_entropy", "\n", "\n", "loss", "=", "2", "*", "H_cross_entropy", "+", "HO_cross_entropy", "+", "sp_cross_entropy", "\n", "\n", "self", ".", "losses", "[", "'total_loss'", "]", "=", "loss", "\n", "self", ".", "event_summaries", ".", "update", "(", "self", ".", "losses", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.add_gt_image_summary_H": [[554, 560], ["tensorflow.py_func", "tensorflow.py_func", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.reverse", "tensorflow.reverse"], "methods", ["None"], ["", "def", "add_gt_image_summary_H", "(", "self", ")", ":", "\n", "\n", "        ", "image", "=", "tf", ".", "py_func", "(", "draw_bounding_boxes_HOI", ",", "\n", "[", "tf", ".", "reverse", "(", "self", ".", "image", "+", "cfg", ".", "PIXEL_MEANS", ",", "axis", "=", "[", "-", "1", "]", ")", ",", "self", ".", "H_boxes", ",", "self", ".", "gt_class_H", "]", ",", "\n", "tf", ".", "float32", ",", "name", "=", "\"gt_boxes_H\"", ")", "\n", "return", "tf", ".", "summary", ".", "image", "(", "'GROUND_TRUTH_H'", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.add_gt_image_summary_HO": [[561, 567], ["tensorflow.py_func", "tensorflow.py_func", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.reverse", "tensorflow.reverse"], "methods", ["None"], ["", "def", "add_gt_image_summary_HO", "(", "self", ")", ":", "\n", "\n", "        ", "image", "=", "tf", ".", "py_func", "(", "draw_bounding_boxes_HOI", ",", "\n", "[", "tf", ".", "reverse", "(", "self", ".", "image", "+", "cfg", ".", "PIXEL_MEANS", ",", "axis", "=", "[", "-", "1", "]", ")", ",", "self", ".", "O_boxes", ",", "self", ".", "gt_class_HO", "]", ",", "\n", "tf", ".", "float32", ",", "name", "=", "\"gt_boxes_HO\"", ")", "\n", "return", "tf", ".", "summary", ".", "image", "(", "'GROUND_TRUTH_HO)'", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.add_score_summary": [[569, 571], ["tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["None"], ["", "def", "add_score_summary", "(", "self", ",", "key", ",", "tensor", ")", ":", "\n", "        ", "tf", ".", "summary", ".", "histogram", "(", "'SCORE/'", "+", "tensor", ".", "op", ".", "name", "+", "'/'", "+", "key", "+", "'/scores'", ",", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.add_train_summary": [[573, 575], ["tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["None"], ["", "def", "add_train_summary", "(", "self", ",", "var", ")", ":", "\n", "        ", "tf", ".", "summary", ".", "histogram", "(", "'TRAIN/'", "+", "var", ".", "op", ".", "name", ",", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.get_feed_dict": [[576, 585], ["None"], "methods", ["None"], ["", "def", "get_feed_dict", "(", "self", ",", "blobs", ")", ":", "\n", "        ", "feed_dict", "=", "{", "self", ".", "image", ":", "blobs", "[", "'image'", "]", ",", "\n", "self", ".", "O_boxes", ":", "blobs", "[", "'O_boxes'", "]", ",", "self", ".", "gt_class_H", ":", "blobs", "[", "'gt_class_H'", "]", ",", "\n", "self", ".", "gt_class_HO", ":", "blobs", "[", "'gt_class_HO'", "]", ",", "self", ".", "Mask_H", ":", "blobs", "[", "'Mask_H'", "]", ",", "\n", "self", ".", "Mask_HO", ":", "blobs", "[", "'Mask_HO'", "]", ",", "self", ".", "spatial", ":", "blobs", "[", "'sp'", "]", ",", "\n", "self", ".", "Mask_sp", ":", "blobs", "[", "'Mask_sp'", "]", ",", "\n", "self", ".", "gt_class_sp", ":", "blobs", "[", "'gt_class_sp'", "]", ",", "self", ".", "H_num", ":", "blobs", "[", "'H_num'", "]", ",", "\n", "self", ".", "H_boxes", ":", "blobs", "[", "'H_boxes'", "]", "}", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.train_step": [[586, 593], ["ResNet50_VCOCO_HOI.ResNet50.get_feed_dict", "sess.run"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.get_feed_dict"], ["", "def", "train_step", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "        ", "feed_dict", "=", "self", ".", "get_feed_dict", "(", "blobs", ")", "\n", "\n", "loss", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "\n", "train_op", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.train_step_with_summary": [[594, 603], ["ResNet50_VCOCO_HOI.ResNet50.get_feed_dict", "sess.run"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.get_feed_dict"], ["", "def", "train_step_with_summary", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "        ", "feed_dict", "=", "self", ".", "get_feed_dict", "(", "blobs", ")", "\n", "\n", "loss", ",", "summary", ",", "_", "=", "sess", ".", "run", "(", "[", "\n", "self", ".", "losses", "[", "'total_loss'", "]", ",", "\n", "self", ".", "summary_op", ",", "\n", "train_op", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "loss", ",", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.train_step_tfr": [[604, 608], ["sess.run"], "methods", ["None"], ["", "def", "train_step_tfr", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "        ", "loss", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "self", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "return", "loss", ",", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.train_step_tfr_with_summary": [[609, 615], ["sess.run"], "methods", ["None"], ["", "def", "train_step_tfr_with_summary", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "\n", "        ", "loss", ",", "summary", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "\n", "self", ".", "summary_op", ",", "self", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "return", "loss", ",", "image_id", ",", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.test_image_H": [[616, 622], ["sess.run"], "methods", ["None"], ["", "def", "test_image_H", "(", "self", ",", "sess", ",", "image", ",", "blobs", ")", ":", "\n", "        ", "feed_dict", "=", "{", "self", ".", "image", ":", "image", ",", "self", ".", "H_boxes", ":", "blobs", "[", "'H_boxes'", "]", ",", "self", ".", "H_num", ":", "blobs", "[", "'H_num'", "]", "}", "\n", "\n", "cls_prob_H", "=", "sess", ".", "run", "(", "[", "self", ".", "predictions", "[", "\"cls_prob_H\"", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "return", "cls_prob_H", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.ResNet50.test_image_HO": [[624, 630], ["sess.run"], "methods", ["None"], ["", "def", "test_image_HO", "(", "self", ",", "sess", ",", "image", ",", "blobs", ")", ":", "\n", "        ", "feed_dict", "=", "{", "self", ".", "image", ":", "image", ",", "self", ".", "H_boxes", ":", "blobs", "[", "'H_boxes'", "]", ",", "self", ".", "O_boxes", ":", "blobs", "[", "'O_boxes'", "]", ",", "self", ".", "spatial", ":", "blobs", "[", "'sp'", "]", ",", "self", ".", "H_num", ":", "blobs", "[", "'H_num'", "]", "}", "\n", "\n", "cls_prob_HO", "=", "sess", ".", "run", "(", "[", "self", ".", "predictions", "[", "\"cls_prob_HO\"", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "return", "cls_prob_HO", "", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO_HOI.resnet_arg_scope": [[23, 48], ["tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.variance_scaling_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.constant_initializer"], "function", ["None"], ["def", "resnet_arg_scope", "(", "is_training", "=", "True", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ",", "\n", "batch_norm_decay", "=", "0.997", ",", "\n", "batch_norm_epsilon", "=", "1e-5", ",", "\n", "batch_norm_scale", "=", "True", ")", ":", "\n", "    ", "batch_norm_params", "=", "{", "\n", "'is_training'", ":", "False", ",", "\n", "'decay'", ":", "batch_norm_decay", ",", "\n", "'epsilon'", ":", "batch_norm_epsilon", ",", "\n", "'scale'", ":", "batch_norm_scale", ",", "\n", "'trainable'", ":", "False", ",", "\n", "'updates_collections'", ":", "ops", ".", "GraphKeys", ".", "UPDATE_OPS", "\n", "}", "\n", "with", "arg_scope", "(", "\n", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", "]", ",", "\n", "weights_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", ",", "\n", "weights_initializer", "=", "slim", ".", "variance_scaling_initializer", "(", ")", ",", "\n", "biases_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "normalizer_params", "=", "batch_norm_params", ")", ":", "\n", "        ", "with", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "**", "batch_norm_params", ")", "as", "arg_sc", ":", "\n", "            ", "return", "arg_sc", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.__init__": [[18, 33], ["Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.network.model_name.__contains__", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.variable_scope", "tensorflow.constant", "np.eye"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "network", ",", ")", ":", "\n", "        ", "self", ".", "network", "=", "network", "\n", "self", ".", "obj_num_classes", "=", "self", ".", "network", ".", "obj_num_classes", "\n", "self", ".", "verb_num_classes", "=", "self", ".", "network", ".", "verb_num_classes", "\n", "if", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'var'", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'generator'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "                ", "self", ".", "obj_identity_variable", "=", "tf", ".", "get_variable", "(", "'identity_variable'", ",", "[", "self", ".", "network", ".", "obj_num_classes", ",", "2048", "]", ",", "initializer", "=", "tf", ".", "random_normal_initializer", ",", "trainable", "=", "True", ")", "\n", "# if self.network.model_name.__contains__('var1') or self.network.model_name.__contains__('varv'):", "\n", "#     self.verb_identity_variable = tf.get_variable('identity_verb_variable', [self.network.verb_num_classes, 2048], initializer=tf.random_normal_initializer, trainable=True)", "\n", "", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_ohot'", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'generator'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "                ", "import", "numpy", "as", "np", "\n", "# example code", "\n", "self", ".", "obj_onehot_variable", "=", "tf", ".", "constant", "(", "np", ".", "eye", "(", "self", ".", "obj_num_classes", ")", ",", "tf", ".", "float32", ")", "\n", "", "", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.get_obj_identity_variable": [[34, 45], ["Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.network.model_name.__contains__", "print", "Exception"], "methods", ["None"], ["", "def", "get_obj_identity_variable", "(", "self", ")", ":", "\n", "# if self.network.model_name.__contains__('_ohot'):", "\n", "#     print('onehot')", "\n", "#     return self.obj_onehot_variable", "\n", "        ", "if", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_var_gan'", ")", ":", "\n", "            ", "return", "self", ".", "obj_identity_variable", "\n", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_varl_gan'", ")", ":", "\n", "            ", "return", "self", ".", "obj_identity_variable", "\n", "", "else", ":", "\n", "            ", "print", "(", "'variable'", ")", "\n", "raise", "Exception", "(", "\"wrong model name\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.convert_emb_feats": [[46, 80], ["tensorflow.variable_scope", "print", "print", "slim.fully_connected", "slim.fully_connected", "tensorflow.random_normal", "tensorflow.concat", "tensorflow.concat", "tensorflow.shape", "tensorflow.concat", "tensorflow.zeros_like", "tensorflow.random_normal", "tensorflow.nn.relu", "tensorflow.concat", "tensorflow.random_normal", "tensorflow.concat", "tensorflow.shape", "tensorflow.random_normal", "tensorflow.concat", "tensorflow.shape", "tensorflow.random_normal", "tensorflow.concat", "tensorflow.shape", "tensorflow.zeros_like", "tensorflow.shape", "tensorflow.zeros_like"], "methods", ["None"], ["", "", "def", "convert_emb_feats", "(", "self", ",", "word2vec", ",", "verbs", ",", "target_dims", "=", "2048", ",", "type", "=", "0", ")", ":", "\n", "# this is for ablation study", "\n", "        ", "import", "tensorflow", ".", "contrib", ".", "slim", "as", "slim", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'generator'", ")", ":", "\n", "            ", "print", "(", "'g===================================================='", ",", "word2vec", ")", "\n", "print", "(", "word2vec", ",", "verbs", ",", ")", "\n", "if", "type", "==", "0", ":", "\n", "                ", "noise", "=", "tf", ".", "random_normal", "(", "shape", "=", "tf", ".", "shape", "(", "verbs", ")", ",", "mean", "=", "0.0", ",", "stddev", "=", "1.", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "v", "=", "tf", ".", "concat", "(", "[", "word2vec", ",", "verbs", ",", "noise", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "elif", "type", "==", "3", ":", "\n", "# won_", "\n", "                ", "v", "=", "tf", ".", "concat", "(", "[", "word2vec", ",", "verbs", ",", "tf", ".", "zeros_like", "(", "verbs", ",", "dtype", "=", "tf", ".", "float32", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "elif", "type", "==", "8", ":", "\n", "# won1", "\n", "                ", "v", "=", "tf", ".", "concat", "(", "[", "word2vec", ",", "verbs", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "elif", "type", "==", "4", ":", "\n", "                ", "noise", "=", "tf", ".", "random_normal", "(", "shape", "=", "tf", ".", "shape", "(", "verbs", ")", ",", "mean", "=", "0.0", ",", "stddev", "=", "1.", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "noise", "=", "tf", ".", "nn", ".", "relu", "(", "noise", ")", "\n", "v", "=", "tf", ".", "concat", "(", "[", "word2vec", ",", "verbs", ",", "noise", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "elif", "type", "==", "2", ":", "\n", "                ", "noise", "=", "tf", ".", "random_normal", "(", "shape", "=", "tf", ".", "shape", "(", "verbs", ")", ",", "mean", "=", "0.0", ",", "stddev", "=", "1.", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "v", "=", "tf", ".", "concat", "(", "[", "word2vec", ",", "word2vec", ",", "noise", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "elif", "type", "==", "5", ":", "\n", "                ", "noise", "=", "tf", ".", "random_normal", "(", "shape", "=", "tf", ".", "shape", "(", "verbs", ")", ",", "mean", "=", "0.0", ",", "stddev", "=", "1.", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "v", "=", "tf", ".", "concat", "(", "[", "word2vec", ",", "tf", ".", "zeros_like", "(", "verbs", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "noise", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "elif", "type", "==", "6", ":", "\n", "                ", "noise", "=", "tf", ".", "random_normal", "(", "shape", "=", "tf", ".", "shape", "(", "verbs", ")", ",", "mean", "=", "0.0", ",", "stddev", "=", "1.", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "v", "=", "tf", ".", "concat", "(", "[", "tf", ".", "zeros_like", "(", "verbs", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "verbs", ",", "noise", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "v", "=", "slim", ".", "fully_connected", "(", "v", ",", "2048", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "scope", "=", "'fc3'", ")", "\n", "obj", "=", "slim", ".", "fully_connected", "(", "v", ",", "target_dims", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "scope", "=", "'fc4'", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.get_variable_by_all": [[81, 88], ["np.ones", "Fabricator.Fabricator.get_variable_by_cls_index", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.get_variable_by_cls_index"], ["", "def", "get_variable_by_all", "(", "self", ",", "fc7_verbs", ",", "fc7_objects", ",", "v_gt_class_HO", ")", ":", "\n", "        ", "import", "numpy", "as", "np", "\n", "tmp1", "=", "np", ".", "ones", "(", "self", ".", "network", ".", "compose_num_classes", ")", "\n", "word2vec_list", ",", "new_fc7_verbs", ",", "new_fc7_objects", ",", "tmp_ho_class", "=", "self", ".", "get_variable_by_cls_index", "(", "v_gt_class_HO", ",", "fc7_verbs", ",", "\n", "fc7_objects", ",", "\n", "tf", ".", "constant", "(", "tmp1", ")", ")", "\n", "return", "word2vec_list", ",", "new_fc7_verbs", ",", "new_fc7_objects", ",", "tmp_ho_class", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.get_variable_by_cls_index": [[90, 103], ["Fabricator.Fabricator.extract_ho_conds_by_cls_index", "tensorflow.boolean_mask", "tensorflow.gather", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "Fabricator.Fabricator.get_obj_identity_variable", "tensorflow.math.argmax", "Fabricator.Fabricator.network.get_num_stop"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.extract_ho_conds_by_cls_index", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.get_obj_identity_variable", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_num_stop"], ["", "def", "get_variable_by_cls_index", "(", "self", ",", "v_gt_class_HO", ",", "fc7_verbs", ",", "fc7_objects", ",", "cls_index", ")", ":", "\n", "\n", "        ", "conds", "=", "self", ".", "extract_ho_conds_by_cls_index", "(", "cls_index", ",", "v_gt_class_HO", ")", "\n", "# tmp_ho_index = tf.reshape(tmp_ho_index, [-1])", "\n", "tmp_ho_class", "=", "tf", ".", "boolean_mask", "(", "v_gt_class_HO", ",", "conds", ")", "\n", "# tmp_ho_class = tf.gather(v_gt_class_HO, tmp_ho_index, axis=0)", "\n", "word2vec_list", "=", "tf", ".", "gather", "(", "self", ".", "get_obj_identity_variable", "(", ")", ",", "\n", "tf", ".", "math", ".", "argmax", "(", "self", ".", "network", ".", "gt_obj_class", "[", ":", "self", ".", "network", ".", "get_num_stop", "(", ")", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "word2vec_list", "=", "tf", ".", "boolean_mask", "(", "word2vec_list", ",", "conds", ")", "\n", "new_fc7_verbs", "=", "tf", ".", "boolean_mask", "(", "fc7_verbs", ",", "conds", ")", "\n", "new_fc7_objects", "=", "tf", ".", "boolean_mask", "(", "fc7_objects", ",", "conds", ")", "\n", "return", "word2vec_list", ",", "new_fc7_verbs", ",", "new_fc7_objects", ",", "tmp_ho_class", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.get_features_by_cls_index": [[104, 115], ["Fabricator.Fabricator.extract_ho_index_by_cls_index", "tensorflow.reshape", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.extract_ho_index_by_cls_index"], ["", "def", "get_features_by_cls_index", "(", "self", ",", "v_gt_class_HO", ",", "fc7_O", ",", "fc7_verbs", ",", "cls_index", ")", ":", "\n", "\n", "        ", "tmp_ho_index", "=", "self", ".", "extract_ho_index_by_cls_index", "(", "cls_index", ",", "v_gt_class_HO", ")", "\n", "tmp_ho_index", "=", "tf", ".", "reshape", "(", "tmp_ho_index", ",", "[", "-", "1", "]", ")", "\n", "\n", "tmp_ho_class", "=", "tf", ".", "gather", "(", "v_gt_class_HO", ",", "tmp_ho_index", ")", "\n", "\n", "new_fc7_objects", "=", "tf", ".", "gather", "(", "fc7_O", ",", "tmp_ho_index", ",", "axis", "=", "0", ")", "\n", "new_fc7_verbs", "=", "tf", ".", "gather", "(", "fc7_verbs", ",", "tmp_ho_index", ",", "axis", "=", "0", ")", "\n", "\n", "return", "new_fc7_objects", ",", "new_fc7_verbs", ",", "tmp_ho_class", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.get_features_by_cls_index1": [[116, 125], ["Fabricator.Fabricator.extract_ho_conds_by_cls_index", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.extract_ho_conds_by_cls_index"], ["", "def", "get_features_by_cls_index1", "(", "self", ",", "v_gt_class_HO", ",", "fc7_O", ",", "fc7_verbs", ",", "cls_index", ")", ":", "\n", "\n", "        ", "conds", "=", "self", ".", "extract_ho_conds_by_cls_index", "(", "cls_index", ",", "v_gt_class_HO", ")", "\n", "tmp_ho_class", "=", "tf", ".", "boolean_mask", "(", "v_gt_class_HO", ",", "conds", ")", "\n", "\n", "new_fc7_objects", "=", "tf", ".", "boolean_mask", "(", "fc7_O", ",", "conds", ")", "\n", "new_fc7_verbs", "=", "tf", ".", "boolean_mask", "(", "fc7_verbs", ",", "conds", ")", "\n", "\n", "return", "new_fc7_objects", ",", "new_fc7_verbs", ",", "tmp_ho_class", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.extract_ho_index_by_cls_index": [[126, 132], ["tensorflow.reduce_sum", "tensorflow.where", "tensorflow.squeeze", "tensorflow.multiply", "tensorflow.expand_dims", "tensorflow.cast"], "methods", ["None"], ["", "def", "extract_ho_index_by_cls_index", "(", "self", ",", "cls_index", ",", "v_gt_class_HO", ")", ":", "\n", "        ", "tmp_ho_index", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "v_gt_class_HO", ",", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "cast", "(", "cls_index", ",", "tf", ".", "float32", ")", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "tmp_ho_index", "=", "tf", ".", "where", "(", "tmp_ho_index", ">", "0.0", ")", "\n", "tmp_ho_index", "=", "tf", ".", "squeeze", "(", "tmp_ho_index", ")", "\n", "return", "tmp_ho_index", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.extract_ho_conds_by_cls_index": [[133, 138], ["tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.expand_dims", "tensorflow.cast"], "methods", ["None"], ["", "def", "extract_ho_conds_by_cls_index", "(", "self", ",", "cls_index", ",", "v_gt_class_HO", ")", ":", "\n", "        ", "tmp_ho_index", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "v_gt_class_HO", ",", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "cast", "(", "cls_index", ",", "tf", ".", "float32", ")", ",", "axis", "=", "0", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "conds", "=", "tmp_ho_index", ">", "0.0", "\n", "return", "conds", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.fabricate_model": [[139, 155], ["Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.var_fabricate_gen", "Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.var_fabricate_gen_lite", "Fabricator.Fabricator.var_fabricate_gen_lite"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.var_fabricate_gen", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.var_fabricate_gen_lite", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.var_fabricate_gen_lite"], ["", "def", "fabricate_model", "(", "self", ",", "fc7_O", ",", "fc7_O_raw", ",", "fc7_verbs", ",", "fc7_verbs_raw", ",", "initializer", ",", "is_training", ",", "v_gt_class_HO", ")", ":", "\n", "        ", "if", "is_training", "and", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_var_gan'", ")", ":", "\n", "# this is helpful for visualization.", "\n", "            ", "fc7_O", ",", "fc7_verbs", "=", "self", ".", "var_fabricate_gen", "(", "fc7_O", ",", "fc7_O_raw", ",", "fc7_verbs", ",", "fc7_verbs_raw", ",", "initializer", ",", "is_training", ",", "\n", "v_gt_class_HO", ")", "\n", "", "elif", "is_training", "and", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_varl_gan'", ")", ":", "\n", "# this has similar result to var_gan.", "\n", "            ", "fc7_O", ",", "fc7_verbs", "=", "self", ".", "var_fabricate_gen_lite", "(", "fc7_O", ",", "fc7_O_raw", ",", "fc7_verbs", ",", "fc7_verbs_raw", ",", "initializer", ",", "is_training", ",", "\n", "v_gt_class_HO", ")", "\n", "", "else", ":", "\n", "# this has similar result to var_gan.", "\n", "            ", "fc7_O", ",", "fc7_verbs", "=", "self", ".", "var_fabricate_gen_lite", "(", "fc7_O", ",", "fc7_O_raw", ",", "fc7_verbs", ",", "fc7_verbs_raw", ",", "initializer", ",", "\n", "is_training", ",", "\n", "v_gt_class_HO", ")", "\n", "\n", "", "return", "fc7_O", ",", "fc7_verbs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.obtain_last_verb_dim": [[156, 159], ["None"], "methods", ["None"], ["", "def", "obtain_last_verb_dim", "(", "self", ")", ":", "\n", "        ", "last_dim", "=", "2048", "\n", "return", "last_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.get_ll": [[160, 163], ["None"], "methods", ["None"], ["", "def", "get_ll", "(", "self", ")", ":", "\n", "        ", "ll", "=", "0.5", "\n", "return", "ll", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.obtain_gen_type": [[164, 194], ["Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.network.model_name.__contains__"], "methods", ["None"], ["", "def", "obtain_gen_type", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This is for ablation study\n        :return:\n        \"\"\"", "\n", "noise_type", "=", "0", "\n", "if", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_woa_'", ")", ":", "\n", "# with verb", "\n", "            ", "noise_type", "=", "2", "\n", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_won_'", ")", ":", "\n", "# no noise, with empty variable to keep dimension of FC unchanged", "\n", "            ", "noise_type", "=", "3", "\n", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_won1_'", ")", ":", "\n", "# no noise", "\n", "            ", "noise_type", "=", "8", "\n", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_n1_'", ")", ":", "\n", "# we use positive noise. Because the verb representation is after relu.", "\n", "# this is useless. I can not understand why I tried this.", "\n", "            ", "noise_type", "=", "4", "\n", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_woa1_'", ")", ":", "\n", "# without verb, but we add a placeholder variable to make sure the dimension of FC unchanged.", "\n", "            ", "noise_type", "=", "5", "\n", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_woa2_'", ")", ":", "\n", "# without verb, but we add a duplicate word embedding to make sure the dimension of FC unchanged.", "\n", "# However, this is a little bug because the dimensions of word embedding and Verb representation are different.", "\n", "            ", "noise_type", "=", "7", "\n", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_woo_'", ")", ":", "\n", "# without object, this is for verb fabricator.", "\n", "            ", "noise_type", "=", "6", "\n", "", "return", "noise_type", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.var_fabricate_gen": [[195, 333], ["print", "Fabricator.Fabricator.get_variable_by_all", "Fabricator.Fabricator.convert_emb_feats", "print", "tensorflow.losses.cosine_distance", "Fabricator.Fabricator.network.model_name.__contains__", "tensorflow.concat", "tensorflow.concat", "print", "tensorflow.concat", "Fabricator.Fabricator.network.set_gt_class_HO_for_G_verbs", "Fabricator.Fabricator.network.head_to_tail_ho", "Fabricator.Fabricator.network.region_classification_ho", "tensorflow.tile", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.cast", "tensorflow.tile", "tensorflow.reshape", "tensorflow.cast", "tensorflow.tile", "tensorflow.reshape", "tensorflow.greater", "tensorflow.greater", "tensorflow.cast", "Fabricator.Fabricator.obtain_last_verb_dim", "Fabricator.Fabricator.obtain_last_obj_dim", "tensorflow.reshape", "tensorflow.reshape", "Fabricator.Fabricator.conds_zeros", "Fabricator.Fabricator.sample_instances", "Fabricator.Fabricator.convert_emb_feats", "print", "Fabricator.Fabricator.cal_dax_loss", "Fabricator.Fabricator.get_ll", "Fabricator.Fabricator.get_variable_by_all", "Fabricator.Fabricator.convert_emb_feats", "tensorflow.stop_gradient", "tensorflow.losses.mean_squared_error", "Fabricator.Fabricator.network.model_name.__contains__", "tensorflow.losses.cosine_distance", "tensorflow.where", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "Fabricator.Fabricator.network.set_gt_class_HO_for_D_verbs", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.where", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.logical_and", "tensorflow.device", "tensorflow.Print", "tensorflow.where", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.device", "tensorflow.Print", "tensorflow.one_hot", "Fabricator.Fabricator.get_obj_identity_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.range", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.get_variable_by_all", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.convert_emb_feats", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.set_gt_class_HO_for_G_verbs", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.head_to_tail_ho", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.region_classification_ho", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.obtain_last_verb_dim", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.obtain_last_obj_dim", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.conds_zeros", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.sample_instances", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.convert_emb_feats", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.cal_dax_loss", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.get_ll", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.get_variable_by_all", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.convert_emb_feats", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.set_gt_class_HO_for_D_verbs", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.get_obj_identity_variable"], ["", "def", "var_fabricate_gen", "(", "self", ",", "fc7_O", ",", "fc7_O_raw", ",", "fc7_verbs", ",", "fc7_verbs_raw", ",", "initializer", ",", "is_training", ",", "v_gt_class_HO", ")", ":", "\n", "        ", "print", "(", "'var_gan_gen ======================'", ")", "\n", "if", "'fake_total_loss'", "not", "in", "self", ".", "network", ".", "losses", ":", "\n", "            ", "self", ".", "network", ".", "losses", "[", "'fake_total_loss'", "]", "=", "0", "\n", "", "if", "'fake_G_total_loss'", "not", "in", "self", ".", "network", ".", "losses", ":", "\n", "            ", "self", ".", "network", ".", "losses", "[", "'fake_G_total_loss'", "]", "=", "0", "\n", "# noise_type = self.obtain_gen_type()  # for ablated study", "\n", "", "noise_type", "=", "0", "\n", "gan_fc7_O", "=", "fc7_O", "\n", "gan_fc7_verbs", "=", "fc7_verbs", "\n", "gan_v_gt_class_HO", "=", "v_gt_class_HO", "\n", "\n", "\n", "word2vec_list_G", ",", "new_fc7_verbs_G", ",", "new_fc7_objects_G", ",", "new_ho_class_G", "=", "self", ".", "get_variable_by_all", "(", "gan_fc7_verbs", ",", "gan_fc7_O", ",", "gan_v_gt_class_HO", ")", "\n", "fake_obj_list", "=", "self", ".", "convert_emb_feats", "(", "word2vec_list_G", ",", "new_fc7_verbs_G", ",", "type", "=", "noise_type", ")", "\n", "# with tf.device('/cpu:0'):", "\n", "#     tf.summary.histogram('fake_obj_g', fake_obj_list)", "\n", "#     tf.summary.histogram('real_obj_g', new_fc7_objects_G)", "\n", "fc7_O_G", "=", "fake_obj_list", "\n", "fc7_verbs_G", "=", "new_fc7_verbs_G", "\n", "gt_class_HO_for_G_verbs", "=", "new_ho_class_G", "\n", "print", "(", "'==========='", ",", "fc7_verbs", ",", "gt_class_HO_for_G_verbs", ")", "\n", "\n", "# this does not work and even affects the performance.", "\n", "# tmp_fc7_O = tf.stop_gradient(new_fc7_objects_G)", "\n", "# ll = tf.losses.mean_squared_error(tmp_fc7_O, fake_obj_list)", "\n", "#", "\n", "# self.network.losses['disl_g'] = ll", "\n", "# self.network.losses['fake_G_total_loss'] += ll * 0.3", "\n", "\n", "cos_los", "=", "tf", ".", "losses", ".", "cosine_distance", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "new_fc7_objects_G", ",", "axis", "=", "-", "1", ")", ",", "\n", "tf", ".", "nn", ".", "l2_normalize", "(", "fake_obj_list", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "network", ".", "losses", "[", "'cos_g'", "]", "=", "cos_los", "\n", "if", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_cosg_'", ")", ":", "\n", "            ", "self", ".", "network", ".", "losses", "[", "'fake_G_total_loss'", "]", "+=", "tf", ".", "where", "(", "cos_los", ">", "0.15", ",", "cos_los", ",", "0", ")", "\n", "\n", "\n", "", "tmp_gan_v_gt_class_HO", "=", "gan_v_gt_class_HO", "\n", "fc7_O_G", "=", "tf", ".", "concat", "(", "[", "fc7_O", ",", "fc7_O_G", "]", ",", "axis", "=", "0", ")", "\n", "fc7_verbs_G", "=", "tf", ".", "concat", "(", "[", "fc7_verbs", ",", "fc7_verbs_G", "]", ",", "axis", "=", "0", ")", "\n", "print", "(", "'gan_v_gt_class_HO:'", ",", "gan_v_gt_class_HO", ",", "gt_class_HO_for_G_verbs", ")", "\n", "gt_class_HO_for_G_verbs", "=", "tf", ".", "concat", "(", "[", "tmp_gan_v_gt_class_HO", ",", "gt_class_HO_for_G_verbs", "]", ",", "axis", "=", "0", ")", "\n", "\n", "self", ".", "network", ".", "set_gt_class_HO_for_G_verbs", "(", "gt_class_HO_for_G_verbs", ")", "\n", "fc7_vo", "=", "self", ".", "network", ".", "head_to_tail_ho", "(", "fc7_O_G", ",", "fc7_verbs_G", ",", "None", ",", "None", ",", "is_training", ",", "'fc_HO'", ")", "\n", "cls_prob_verbs", "=", "self", ".", "network", ".", "region_classification_ho", "(", "fc7_vo", ",", "is_training", ",", "initializer", ",", "'classification'", ",", "\n", "nameprefix", "=", "'fake_G_'", ")", "\n", "\n", "\n", "# generate balanced objects", "\n", "obj_labels", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "one_hot", "(", "tf", ".", "range", "(", "self", ".", "obj_num_classes", ")", ",", "self", ".", "obj_num_classes", ")", ",", "axis", "=", "0", ")", ",", "[", "tf", ".", "shape", "(", "gan_fc7_verbs", ")", "[", "0", "]", ",", "1", ",", "1", "]", ")", "\n", "obj_labels", "=", "tf", ".", "reshape", "(", "obj_labels", ",", "[", "tf", ".", "shape", "(", "gan_fc7_verbs", ")", "[", "0", "]", "*", "self", ".", "obj_num_classes", ",", "self", ".", "obj_num_classes", "]", ")", "\n", "tmp_word2vec_list", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "self", ".", "get_obj_identity_variable", "(", ")", ",", "axis", "=", "0", ")", ",", "[", "tf", ".", "shape", "(", "gan_fc7_verbs", ")", "[", "0", "]", ",", "1", ",", "1", "]", ")", "\n", "new_fc7_verbs_D_1", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "gan_fc7_verbs", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "self", ".", "obj_num_classes", ",", "1", "]", ")", "\n", "\n", "verbs_labels", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "gan_v_gt_class_HO", ",", "self", ".", "network", ".", "verb_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "verbs_labels", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "verbs_labels", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "self", ".", "obj_num_classes", ",", "1", "]", ")", "\n", "verbs_labels", "=", "tf", ".", "reshape", "(", "verbs_labels", ",", "[", "tf", ".", "shape", "(", "gan_fc7_verbs", ")", "[", "0", "]", "*", "self", ".", "obj_num_classes", ",", "self", ".", "verb_num_classes", "]", ")", "\n", "\n", "old_obj_labels", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "gan_v_gt_class_HO", ",", "self", ".", "network", ".", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "old_obj_labels", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "old_obj_labels", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "self", ".", "obj_num_classes", ",", "1", "]", ")", "\n", "old_obj_labels", "=", "tf", ".", "reshape", "(", "old_obj_labels", ",", "[", "tf", ".", "shape", "(", "gan_fc7_verbs", ")", "[", "0", "]", "*", "self", ".", "obj_num_classes", ",", "self", ".", "obj_num_classes", "]", ")", "\n", "\n", "# construct_new ho_classes", "\n", "tmp_ho_class_from_obj", "=", "tf", ".", "greater", "(", "tf", ".", "matmul", "(", "obj_labels", ",", "self", ".", "network", ".", "obj_to_HO_matrix", ")", ",", "0.", ")", "\n", "tmp_ho_class_from_vb", "=", "tf", ".", "greater", "(", "tf", ".", "matmul", "(", "verbs_labels", ",", "self", ".", "network", ".", "verb_to_HO_matrix", ")", ",", "0.", ")", "\n", "new_gt_class_HO_1", "=", "tf", ".", "cast", "(", "tf", ".", "logical_and", "(", "tmp_ho_class_from_vb", ",", "tmp_ho_class_from_obj", ")", ",", "tf", ".", "float32", ")", "\n", "last_dim", "=", "self", ".", "obtain_last_verb_dim", "(", ")", "\n", "obj_dim", "=", "self", ".", "obtain_last_obj_dim", "(", ")", "\n", "new_fc7_verbs_D_1", "=", "tf", ".", "reshape", "(", "new_fc7_verbs_D_1", ",", "[", "tf", ".", "shape", "(", "gan_fc7_verbs", ")", "[", "0", "]", "*", "self", ".", "obj_num_classes", ",", "last_dim", "]", ")", "\n", "word2vec_list_D_1", "=", "tf", ".", "reshape", "(", "tmp_word2vec_list", ",", "[", "tf", ".", "shape", "(", "gan_fc7_verbs", ")", "[", "0", "]", "*", "self", ".", "obj_num_classes", ",", "obj_dim", "]", ")", "\n", "\n", "# all", "\n", "all_new_fc7_verbs_D_1", ",", "all_new_ho_class_D_1", ",", "all_word2vec_list_D_1", "=", "self", ".", "conds_zeros", "(", "None", ",", "new_fc7_verbs_D_1", ",", "new_gt_class_HO_1", ",", "word2vec_list_D_1", ")", "\n", "\n", "# we also tried to add contrastive learning loss: the faked objects and its corresponding real objects. However, it is useless.", "\n", "\n", "new_fc7_verbs_D_1", ",", "new_ho_class_D_1", ",", "word2vec_list_D_1", ",", "_", ",", "_", "=", "self", ".", "sample_instances", "(", "gan_fc7_verbs", ",", "new_fc7_verbs_D_1", ",", "\n", "new_gt_class_HO_1", ",", "\n", "word2vec_list_D_1", ",", "old_obj", "=", "old_obj_labels", ",", "\n", "new_obj", "=", "obj_labels", ")", "\n", "\n", "\n", "fake_obj_list", "=", "self", ".", "convert_emb_feats", "(", "word2vec_list_D_1", ",", "new_fc7_verbs_D_1", ",", "type", "=", "noise_type", ")", "\n", "# if self.network.model_name.__contains__('_costive1'):", "\n", "#     self.add_contrastive_loss(fake_obj_list, new_ho_class_D_1, gan_fc7_O, gan_v_gt_class_HO)", "\n", "\n", "print", "(", "fake_obj_list", ",", "new_fc7_verbs_D_1", ",", "new_ho_class_D_1", ",", "'==========='", ")", "\n", "self", ".", "cal_dax_loss", "(", "fake_obj_list", ",", "initializer", ",", "is_training", ",", "new_fc7_verbs_D_1", ",", "new_ho_class_D_1", ",", "nameprefix", "=", "'fake_tmp_'", ")", "\n", "\n", "ll", "=", "self", ".", "get_ll", "(", ")", "\n", "self", ".", "network", ".", "losses", "[", "'fake_total_loss'", "]", "+=", "self", ".", "network", ".", "losses", "[", "'fake_tmp_verbs_cross_entropy'", "]", "*", "ll", "\n", "\n", "gll", "=", "1.", "\n", "self", ".", "network", ".", "losses", "[", "'fake_G_total_loss'", "]", "+=", "(", "self", ".", "network", ".", "losses", "[", "'fake_tmp_verbs_cross_entropy'", "]", "*", "gll", ")", "\n", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "fc7_O", "=", "tf", ".", "Print", "(", "fc7_O", ",", "\n", "[", "1", ",", "tf", ".", "shape", "(", "fc7_O", ")", ",", "tf", ".", "shape", "(", "fc7_verbs", ")", ",", "tf", ".", "shape", "(", "word2vec_list_D_1", ")", ",", "\n", "tf", ".", "shape", "(", "new_ho_class_D_1", ")", ",", "\n", "tf", ".", "shape", "(", "new_fc7_verbs_D_1", ")", "]", ",", "\n", "\"_dax shape:\"", ",", "first_n", "=", "100", ")", "\n", "\n", "", "word2vec_list_D", ",", "new_fc7_verbs_D", ",", "new_fc7_objects_D", ",", "new_ho_class_D", "=", "self", ".", "get_variable_by_all", "(", "gan_fc7_verbs", ",", "gan_fc7_O", ",", "gan_v_gt_class_HO", ")", "\n", "\n", "\n", "fake_obj_list_D", "=", "self", ".", "convert_emb_feats", "(", "word2vec_list_D", ",", "new_fc7_verbs_D", ",", "type", "=", "noise_type", ")", "\n", "tmp_fc7_O", "=", "tf", ".", "stop_gradient", "(", "new_fc7_objects_D", ")", "\n", "\n", "# This is for mean squared loss. However it does not work.", "\n", "# We use this to illustrate the similarity between fake objects and real objects.", "\n", "ll", "=", "tf", ".", "losses", ".", "mean_squared_error", "(", "tmp_fc7_O", ",", "fake_obj_list_D", ")", "\n", "self", ".", "network", ".", "losses", "[", "'disl_d'", "]", "=", "ll", "\n", "if", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_disl_'", ")", ":", "\n", "            ", "self", ".", "network", ".", "losses", "[", "'fake_total_loss'", "]", "+=", "tf", ".", "where", "(", "ll", ">", "1.", ",", "ll", "*", "0.1", ",", "0", ")", "\n", "\n", "", "tmp_cos_fc7_objs", "=", "new_fc7_objects_D", "\n", "cos_los", "=", "tf", ".", "losses", ".", "cosine_distance", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "tmp_cos_fc7_objs", ",", "axis", "=", "-", "1", ")", ",", "\n", "tf", ".", "nn", ".", "l2_normalize", "(", "fake_obj_list_D", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "network", ".", "losses", "[", "'cos_d'", "]", "=", "cos_los", "\n", "self", ".", "network", ".", "losses", "[", "'fake_total_loss'", "]", "+=", "tf", ".", "where", "(", "cos_los", ">", "0.2", ",", "cos_los", ",", "0", ")", "\n", "\n", "fc7_O", "=", "tf", ".", "concat", "(", "[", "fc7_O", ",", "fake_obj_list_D", "]", ",", "axis", "=", "0", ")", "\n", "fc7_verbs", "=", "tf", ".", "concat", "(", "[", "fc7_verbs", ",", "new_fc7_verbs_D", "]", ",", "axis", "=", "0", ")", "\n", "gt_class_HO_for_D_verbs", "=", "tf", ".", "concat", "(", "[", "v_gt_class_HO", ",", "new_ho_class_D", "]", ",", "axis", "=", "0", ")", "\n", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "fc7_O", "=", "tf", ".", "Print", "(", "fc7_O", ",", "\n", "[", "tf", ".", "shape", "(", "fc7_O", ")", ",", "tf", ".", "shape", "(", "fc7_verbs", ")", ",", "tf", ".", "shape", "(", "gt_class_HO_for_D_verbs", ")", ",", "\n", "tf", ".", "shape", "(", "new_ho_class_D", ")", ",", "\n", "tf", ".", "shape", "(", "fake_obj_list_D", ")", ",", "tf", ".", "shape", "(", "fc7_O", ")", ",", "tf", ".", "shape", "(", "v_gt_class_HO", ")", "]", ",", "\n", "\"D shape:\"", ",", "first_n", "=", "100", ")", "\n", "", "self", ".", "network", ".", "set_gt_class_HO_for_D_verbs", "(", "gt_class_HO_for_D_verbs", ")", "\n", "return", "fc7_O", ",", "fc7_verbs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.var_fabricate_gen_lite": [[334, 424], ["print", "Fabricator.Fabricator.obtain_gen_type", "tensorflow.tile", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.cast", "tensorflow.tile", "tensorflow.reshape", "tensorflow.cast", "tensorflow.tile", "tensorflow.reshape", "tensorflow.greater", "tensorflow.greater", "tensorflow.cast", "Fabricator.Fabricator.obtain_last_verb_dim", "Fabricator.Fabricator.obtain_last_obj_dim", "tensorflow.reshape", "tensorflow.reshape", "Fabricator.Fabricator.sample_instances", "Fabricator.Fabricator.convert_emb_feats", "print", "Fabricator.Fabricator.cal_dax_loss", "Fabricator.Fabricator.get_ll", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.logical_and", "tensorflow.device", "tensorflow.Print", "tensorflow.one_hot", "Fabricator.Fabricator.get_obj_identity_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.range", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.obtain_gen_type", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.obtain_last_verb_dim", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.obtain_last_obj_dim", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.sample_instances", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.convert_emb_feats", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.cal_dax_loss", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.get_ll", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.get_obj_identity_variable"], ["", "def", "var_fabricate_gen_lite", "(", "self", ",", "fc7_O", ",", "fc7_O_raw", ",", "fc7_verbs", ",", "fc7_verbs_raw", ",", "initializer", ",", "is_training", ",", "v_gt_class_HO", ")", ":", "\n", "        ", "\"\"\"\n        This is similar to var_gan_gen. We just simplify the code.\n        :param fc7_O:\n        :param fc7_O_raw:\n        :param fc7_verbs:\n        :param fc7_verbs_raw:\n        :param initializer:\n        :param is_training:\n        :param v_gt_class_HO:\n        :return:\n        \"\"\"", "\n", "print", "(", "'wemb_gan_gen ======================'", ")", "\n", "if", "'fake_total_loss'", "not", "in", "self", ".", "network", ".", "losses", ":", "\n", "            ", "self", ".", "network", ".", "losses", "[", "'fake_total_loss'", "]", "=", "0", "\n", "", "if", "'fake_G_total_loss'", "not", "in", "self", ".", "network", ".", "losses", ":", "\n", "            ", "self", ".", "network", ".", "losses", "[", "'fake_G_total_loss'", "]", "=", "0", "\n", "", "noise_type", "=", "self", ".", "obtain_gen_type", "(", ")", "\n", "\n", "gan_fc7_O", "=", "fc7_O", "\n", "gan_fc7_verbs", "=", "fc7_verbs", "\n", "gan_v_gt_class_HO", "=", "v_gt_class_HO", "\n", "\n", "# word2vec_list_G, new_fc7_verbs_G, new_fc7_objects_G, new_ho_class_G = \\", "\n", "#         self.get_variable_by_all(gan_fc7_verbs, gan_fc7_O, gan_v_gt_class_HO)", "\n", "\n", "# fake_obj_list = self.convert_emb_feats(word2vec_list_G, new_fc7_verbs_G, type= noise_type)", "\n", "# with tf.device('/cpu:0'):", "\n", "#     tf.summary.histogram('fake_obj_g', fake_obj_list)", "\n", "#     tf.summary.histogram('real_obj_g', new_fc7_objects_G)", "\n", "# self.add_discriminator_loss(fake_obj_list, new_fc7_objects, initializer, is_training)", "\n", "# fc7_O_G = fake_obj_list", "\n", "# fc7_verbs_G = new_fc7_verbs_G", "\n", "# gt_class_HO_for_G_verbs = new_ho_class_G", "\n", "# print('===========', fc7_verbs, gt_class_HO_for_G_verbs)", "\n", "\n", "obj_labels", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "one_hot", "(", "tf", ".", "range", "(", "self", ".", "obj_num_classes", ")", ",", "self", ".", "obj_num_classes", ")", ",", "axis", "=", "0", ")", ",", "[", "tf", ".", "shape", "(", "gan_fc7_verbs", ")", "[", "0", "]", ",", "1", ",", "1", "]", ")", "\n", "obj_labels", "=", "tf", ".", "reshape", "(", "obj_labels", ",", "[", "tf", ".", "shape", "(", "gan_fc7_verbs", ")", "[", "0", "]", "*", "self", ".", "obj_num_classes", ",", "self", ".", "obj_num_classes", "]", ")", "\n", "tmp_word2vec_list", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "self", ".", "get_obj_identity_variable", "(", ")", ",", "axis", "=", "0", ")", ",", "[", "tf", ".", "shape", "(", "gan_fc7_verbs", ")", "[", "0", "]", ",", "1", ",", "1", "]", ")", "\n", "new_fc7_verbs_D_1", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "gan_fc7_verbs", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "self", ".", "obj_num_classes", ",", "1", "]", ")", "\n", "\n", "verbs_labels", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "gan_v_gt_class_HO", ",", "self", ".", "network", ".", "verb_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "verbs_labels", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "verbs_labels", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "self", ".", "obj_num_classes", ",", "1", "]", ")", "\n", "verbs_labels", "=", "tf", ".", "reshape", "(", "verbs_labels", ",", "[", "tf", ".", "shape", "(", "gan_fc7_verbs", ")", "[", "0", "]", "*", "self", ".", "obj_num_classes", ",", "self", ".", "verb_num_classes", "]", ")", "\n", "\n", "old_obj_labels", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "gan_v_gt_class_HO", ",", "self", ".", "network", ".", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "old_obj_labels", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "old_obj_labels", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "self", ".", "obj_num_classes", ",", "1", "]", ")", "\n", "old_obj_labels", "=", "tf", ".", "reshape", "(", "old_obj_labels", ",", "[", "tf", ".", "shape", "(", "gan_fc7_verbs", ")", "[", "0", "]", "*", "self", ".", "obj_num_classes", ",", "self", ".", "obj_num_classes", "]", ")", "\n", "\n", "# construct_new ho_classes", "\n", "tmp_ho_class_from_obj", "=", "tf", ".", "greater", "(", "tf", ".", "matmul", "(", "obj_labels", ",", "self", ".", "network", ".", "obj_to_HO_matrix", ")", ",", "0.", ")", "\n", "tmp_ho_class_from_vb", "=", "tf", ".", "greater", "(", "tf", ".", "matmul", "(", "verbs_labels", ",", "self", ".", "network", ".", "verb_to_HO_matrix", ")", ",", "0.", ")", "\n", "new_gt_class_HO_1", "=", "tf", ".", "cast", "(", "tf", ".", "logical_and", "(", "tmp_ho_class_from_vb", ",", "tmp_ho_class_from_obj", ")", ",", "tf", ".", "float32", ")", "\n", "last_dim", "=", "self", ".", "obtain_last_verb_dim", "(", ")", "\n", "obj_dim", "=", "self", ".", "obtain_last_obj_dim", "(", ")", "\n", "new_fc7_verbs_D_1", "=", "tf", ".", "reshape", "(", "new_fc7_verbs_D_1", ",", "[", "tf", ".", "shape", "(", "gan_fc7_verbs", ")", "[", "0", "]", "*", "self", ".", "obj_num_classes", ",", "last_dim", "]", ")", "\n", "word2vec_list_D_1", "=", "tf", ".", "reshape", "(", "tmp_word2vec_list", ",", "[", "tf", ".", "shape", "(", "gan_fc7_verbs", ")", "[", "0", "]", "*", "self", ".", "obj_num_classes", ",", "obj_dim", "]", ")", "\n", "\n", "# all", "\n", "# all_new_fc7_verbs_D_1, all_new_ho_class_D_1, all_word2vec_list_D_1 = self.conds_zeros(None, new_fc7_verbs_D_1, new_gt_class_HO_1, word2vec_list_D_1)", "\n", "\n", "# In fact, we also tried use constrastive loss, however, it is useless.", "\n", "\n", "new_fc7_verbs_D_1", ",", "new_ho_class_D_1", ",", "word2vec_list_D_1", ",", "new_old_obj", ",", "new_obj_labels", "=", "self", ".", "sample_instances", "(", "gan_fc7_verbs", ",", "new_fc7_verbs_D_1", ",", "\n", "new_gt_class_HO_1", ",", "\n", "word2vec_list_D_1", ",", "old_obj", "=", "old_obj_labels", ",", "\n", "new_obj", "=", "obj_labels", ")", "\n", "item_weights", "=", "None", "\n", "fake_obj_list", "=", "self", ".", "convert_emb_feats", "(", "word2vec_list_D_1", ",", "new_fc7_verbs_D_1", ",", "type", "=", "noise_type", ")", "\n", "\n", "# self.add_discriminator_loss(fake_obj_list, new_fc7_objects, initializer, is_training)", "\n", "print", "(", "fake_obj_list", ",", "new_fc7_verbs_D_1", ",", "new_ho_class_D_1", ",", "'==========='", ")", "\n", "self", ".", "cal_dax_loss", "(", "fake_obj_list", ",", "initializer", ",", "is_training", ",", "new_fc7_verbs_D_1", ",", "new_ho_class_D_1", ",", "item_weights", "=", "item_weights", ",", "nameprefix", "=", "'fake_tmp_'", ")", "\n", "\n", "ll", "=", "self", ".", "get_ll", "(", ")", "\n", "self", ".", "network", ".", "losses", "[", "'fake_total_loss'", "]", "+=", "self", ".", "network", ".", "losses", "[", "'fake_tmp_verbs_cross_entropy'", "]", "*", "ll", "\n", "\n", "# This is only for step-wise optimization", "\n", "self", ".", "network", ".", "losses", "[", "'fake_G_total_loss'", "]", "+=", "(", "self", ".", "network", ".", "losses", "[", "'fake_tmp_verbs_cross_entropy'", "]", ")", "\n", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "fc7_O", "=", "tf", ".", "Print", "(", "fc7_O", ",", "\n", "[", "1", ",", "tf", ".", "shape", "(", "fc7_O", ")", ",", "tf", ".", "shape", "(", "fc7_verbs", ")", ",", "tf", ".", "shape", "(", "word2vec_list_D_1", ")", ",", "\n", "tf", ".", "shape", "(", "new_ho_class_D_1", ")", ",", "\n", "tf", ".", "shape", "(", "new_fc7_verbs_D_1", ")", "]", ",", "\n", "\"_dax shape:\"", ",", "first_n", "=", "100", ")", "\n", "\n", "", "return", "fc7_O", ",", "fc7_verbs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.cal_dax_loss": [[425, 461], ["print", "Fabricator.Fabricator.network.head_to_tail_ho", "Fabricator.Fabricator.network.region_classification_ho", "print", "np.log", "Fabricator.Fabricator.network.model_name.__contains__", "tensorflow.multiply", "tensorflow.reduce_mean", "get_zero_shot_type", "get_unseen_index", "print", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "np.sum"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.head_to_tail_ho", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.region_classification_ho", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_zero_shot_type", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_unseen_index"], ["", "def", "cal_dax_loss", "(", "self", ",", "fake_obj_list", ",", "initializer", ",", "is_training", ",", "new_fc7_verbs_D_1", ",", "new_ho_class_D_1", ",", "item_weights", "=", "None", ",", "nameprefix", "=", "'fake_tmp_'", ")", ":", "\n", "        ", "\"\"\"\n        This includes all objects. ie for each verb, fabricate all kinds of objects.\n        :param fake_obj_list:\n        :param initializer:\n        :param is_training:\n        :param new_fc7_verbs_D_1:\n        :param new_ho_class_D_1:\n        :param item_weights:\n        :param nameprefix:\n        :return:\n        \"\"\"", "\n", "print", "(", "'before'", ",", "new_ho_class_D_1", ")", "\n", "\n", "fc7_vo", "=", "self", ".", "network", ".", "head_to_tail_ho", "(", "fake_obj_list", ",", "new_fc7_verbs_D_1", ",", "None", ",", "None", ",", "is_training", ",", "'fc_HO'", ")", "\n", "cls_prob_verbs", "=", "self", ".", "network", ".", "region_classification_ho", "(", "fc7_vo", ",", "is_training", ",", "initializer", ",", "'classification'", ",", "\n", "nameprefix", "=", "nameprefix", ")", "\n", "fake_cls_score_verbs", "=", "self", ".", "network", ".", "predictions", "[", "nameprefix", "+", "\"cls_score_hoi\"", "]", "\n", "print", "(", "'lllll'", ",", "fake_cls_score_verbs", ")", "\n", "import", "numpy", "as", "np", "\n", "# reweights = np.log(1 / (self.network.num_inst_all / np.sum(self.network.num_inst_all)))", "\n", "reweights", "=", "np", ".", "log", "(", "1", "/", "(", "self", ".", "network", ".", "num_inst", "/", "np", ".", "sum", "(", "self", ".", "network", ".", "num_inst", ")", ")", ")", "# This is same as network.HO_weights.", "\n", "if", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_zs'", ")", ":", "\n", "# this is only for zero shot. Following previous work.", "\n", "            ", "from", "ult", ".", "ult", "import", "get_zero_shot_type", "\n", "zero_shot_type", "=", "get_zero_shot_type", "(", "self", ".", "network", ".", "model_name", ")", "\n", "from", "ult", ".", "ult", "import", "get_unseen_index", "\n", "unseen_idx", "=", "get_unseen_index", "(", "zero_shot_type", ")", "\n", "import", "numpy", "as", "np", "\n", "reweights", "[", "unseen_idx", "]", "=", "20.", "\n", "print", "(", "reweights", ")", "\n", "\n", "", "loss", "=", "tf", ".", "multiply", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "new_ho_class_D_1", ",", "logits", "=", "fake_cls_score_verbs", ")", ",", "reweights", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "self", ".", "network", ".", "losses", "[", "nameprefix", "+", "'verbs_cross_entropy'", "]", "=", "(", "loss", "/", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.obtain_last_obj_dim": [[462, 474], ["Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.network.model_name.__contains__"], "methods", ["None"], ["", "def", "obtain_last_obj_dim", "(", "self", ")", ":", "\n", "# for ablated study, you can ignore", "\n", "        ", "obj_dim", "=", "2048", "\n", "if", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_ohot'", ")", ":", "\n", "            ", "obj_dim", "=", "self", ".", "obj_num_classes", "\n", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_wemb_gan'", ")", ":", "\n", "            ", "obj_dim", "=", "300", "\n", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_xemb_gan'", ")", ":", "\n", "            ", "obj_dim", "=", "300", "\n", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'_vemb_gan'", ")", ":", "\n", "            ", "obj_dim", "=", "300", "\n", "", "return", "obj_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.get_wemb_mask": [[475, 483], ["get_neighborhood_matrix", "tensorflow.constant", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.logical_and", "tensorflow.cast", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_neighborhood_matrix"], ["", "def", "get_wemb_mask", "(", "self", ",", "gt_obj_class", ",", "gt_obj_class_new", ",", "neighbor_num", "=", "5", ")", ":", "\n", "        ", "from", "networks", ".", "tools", "import", "get_neighborhood_matrix", "\n", "matrix", "=", "get_neighborhood_matrix", "(", "neighbor_num", ")", "\n", "matrix", "=", "tf", ".", "constant", "(", "matrix", ")", "\n", "available_obj_label", "=", "tf", ".", "matmul", "(", "gt_obj_class_new", ",", "matrix", ")", "\n", "conds", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "logical_and", "(", "tf", ".", "cast", "(", "available_obj_label", ",", "tf", ".", "bool", ")", ",", "\n", "tf", ".", "cast", "(", "gt_obj_class", ",", "tf", ".", "bool", ")", ")", ",", "tf", ".", "int32", ")", ",", "axis", "=", "-", "1", ")", ">", "0", "\n", "return", "conds", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.conds_zeros": [[484, 498], ["tensorflow.greater", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "conds_zeros", "(", "self", ",", "fc7_verbs", ",", "new_fc7_verbs_D_1", ",", "new_gt_class_HO_1", ",", "word2vec_list_D_1", ",", ")", ":", "\n", "        ", "\"\"\"\n        remove infeasible HOIs\n        :param fc7_verbs:\n        :param new_fc7_verbs_D_1:\n        :param new_gt_class_HO_1:\n        :param word2vec_list_D_1:\n        :return:\n        \"\"\"", "\n", "conds", "=", "tf", ".", "greater", "(", "tf", ".", "reduce_sum", "(", "new_gt_class_HO_1", ",", "axis", "=", "-", "1", ")", ",", "0", ")", "\n", "word2vec_list_D_1", "=", "tf", ".", "boolean_mask", "(", "word2vec_list_D_1", ",", "conds", ")", "\n", "new_fc7_verbs_D_1", "=", "tf", ".", "boolean_mask", "(", "new_fc7_verbs_D_1", ",", "conds", ")", "\n", "new_ho_class_D_1", "=", "tf", ".", "boolean_mask", "(", "new_gt_class_HO_1", ",", "conds", ")", "\n", "return", "new_fc7_verbs_D_1", ",", "new_ho_class_D_1", ",", "word2vec_list_D_1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.sample_instances": [[499, 593], ["Fabricator.Fabricator.network.model_name.__contains__", "tensorflow.device", "tensorflow.Print", "tensorflow.reshape", "print", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.random.uniform", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reduce_sum", "tensorflow.where", "Fabricator.Fabricator.network.model_name.__contains__", "print", "tensorflow.batch_gather", "tensorflow.batch_gather", "tensorflow.batch_gather", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.greater", "print", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.device", "tensorflow.Print", "Fabricator.Fabricator.obtain_last_verb_dim", "tensorflow.equal", "tensorflow.ones_like", "Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.get_wemb_mask", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.cast", "tensorflow.multiply", "print", "tensorflow.argsort", "tensorflow.reduce_sum", "tensorflow.device", "tensorflow.Print", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.shape", "tensorflow.shape", "tensorflow.reduce_sum", "Fabricator.Fabricator.obtain_last_verb_dim", "Fabricator.Fabricator.obtain_last_obj_dim", "Fabricator.Fabricator.network.model_name.__contains__", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "Fabricator.Fabricator.obtain_last_verb_dim", "Fabricator.Fabricator.obtain_last_obj_dim", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "Fabricator.Fabricator.network.model_name.__contains__", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.network.model_name.__contains__", "Fabricator.Fabricator.network.model_name.__contains__"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.obtain_last_verb_dim", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.get_wemb_mask", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.obtain_last_verb_dim", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.obtain_last_obj_dim", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.obtain_last_verb_dim", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.obtain_last_obj_dim"], ["", "def", "sample_instances", "(", "self", ",", "fc7_verbs", ",", "new_fc7_verbs_D_1", ",", "new_gt_class_HO_1", ",", "word2vec_list_D_1", ",", "\n", "old_obj", "=", "None", ",", "new_obj", "=", "None", ",", "gen_num_clsses", "=", "80", ",", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "word2vec_list_D_1", "=", "tf", ".", "Print", "(", "word2vec_list_D_1", ",", "\n", "[", "tf", ".", "shape", "(", "word2vec_list_D_1", ")", ",", "tf", ".", "shape", "(", "new_fc7_verbs_D_1", ")", ",", "tf", ".", "reduce_sum", "(", "new_gt_class_HO_1", ")", "]", ",", "\n", "'begin indexes:'", ",", "first_n", "=", "100", ")", "\n", "", "conds", "=", "None", "\n", "new_ho_class_D_1", "=", "new_gt_class_HO_1", "\n", "if", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'rands'", ")", ":", "\n", "\n", "            ", "tmp_gt", "=", "tf", ".", "reshape", "(", "new_gt_class_HO_1", ",", "[", "-", "1", ",", "gen_num_clsses", ",", "self", ".", "network", ".", "compose_num_classes", "]", ")", "\n", "print", "(", "'=============='", ",", "gen_num_clsses", ",", "self", ".", "obtain_last_verb_dim", "(", ")", ")", "\n", "new_fc7_verbs_D_1", "=", "tf", ".", "reshape", "(", "new_fc7_verbs_D_1", ",", "[", "-", "1", ",", "gen_num_clsses", ",", "self", ".", "obtain_last_verb_dim", "(", ")", "]", ")", "\n", "word2vec_list_D_1", "=", "tf", ".", "reshape", "(", "word2vec_list_D_1", ",", "[", "-", "1", ",", "gen_num_clsses", ",", "self", ".", "obtain_last_obj_dim", "(", ")", "]", ")", "\n", "\n", "\n", "noise", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "[", "gen_num_clsses", ",", "]", ",", "minval", "=", "0.00001", ",", "maxval", "=", "1.", ")", "\n", "noise", "=", "tf", ".", "expand_dims", "(", "noise", ",", "axis", "=", "0", ")", "\n", "noise", "=", "tf", ".", "expand_dims", "(", "noise", ",", "axis", "=", "-", "1", ")", "\n", "# N O HOI", "\n", "noise", "=", "tf", ".", "tile", "(", "noise", ",", "[", "tf", ".", "shape", "(", "tmp_gt", ")", "[", "0", "]", ",", "1", ",", "self", ".", "network", ".", "compose_num_classes", "]", ")", "\n", "ll", "=", "tf", ".", "reduce_sum", "(", "tmp_gt", ",", "axis", "=", "-", "1", ")", "# the number of labels for each composite HOI", "\n", "ll", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "ll", ",", "0", ")", ",", "tf", ".", "ones_like", "(", "ll", ")", ",", "ll", ")", "\n", "\n", "if", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'select'", ")", ":", "\n", "# for ablated study", "\n", "# old_obj = tf.boolean_mask(old_obj, conds)", "\n", "# new_obj = tf.boolean_mask(new_obj, conds)", "\n", "                ", "neighbor_num", "=", "40", "\n", "if", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'select10'", ")", ":", "\n", "                    ", "neighbor_num", "=", "10", "\n", "pass", "\n", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'select1'", ")", ":", "\n", "                    ", "neighbor_num", "=", "1", "\n", "pass", "\n", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'select5'", ")", ":", "\n", "                    ", "neighbor_num", "=", "5", "\n", "pass", "\n", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'select20'", ")", ":", "\n", "                    ", "neighbor_num", "=", "20", "\n", "pass", "\n", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'select40'", ")", ":", "\n", "                    ", "neighbor_num", "=", "40", "\n", "pass", "\n", "", "elif", "self", ".", "network", ".", "model_name", ".", "__contains__", "(", "'select80'", ")", ":", "\n", "                    ", "neighbor_num", "=", "80", "#", "\n", "pass", "\n", "", "tmp_conds_sim", "=", "self", ".", "get_wemb_mask", "(", "old_obj", ",", "new_obj", ",", "neighbor_num", ")", "\n", "sim_gt", "=", "tf", ".", "reshape", "(", "tmp_conds_sim", ",", "[", "-", "1", ",", "gen_num_clsses", "]", ")", "\n", "sim_gt", "=", "tf", ".", "expand_dims", "(", "sim_gt", ",", "axis", "=", "-", "1", ")", "\n", "sim_gt", "=", "tf", ".", "tile", "(", "sim_gt", ",", "[", "1", ",", "1", ",", "self", ".", "network", ".", "compose_num_classes", "]", ")", "\n", "sim_gt", "=", "tf", ".", "cast", "(", "sim_gt", ",", "tf", ".", "float32", ")", "\n", "sim_gt", "=", "tf", ".", "multiply", "(", "sim_gt", ",", "tmp_gt", ")", "# filter out Dissimilar composite HOIs to original HOI", "\n", "noise", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "sim_gt", ",", "noise", ")", ",", "axis", "=", "-", "1", ")", "/", "ll", "\n", "", "else", ":", "\n", "                ", "print", "(", "tmp_gt", ",", "noise", ",", "'========='", ")", "\n", "noise", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "tmp_gt", ",", "noise", ")", ",", "axis", "=", "-", "1", ")", "/", "ll", "# remove zeros", "\n", "# is equal to : noise = tf.multiply(tf.cast(tf.reduce_sum(tmp_gt, axis=-1) > 0, tf.float32), tf.reduce_sum(noise, axis=-1)) / 600", "\n", "# here 600 does not matter", "\n", "# remove the noise whose corresponding gt label is zero.", "\n", "# N O", "\n", "", "select_num", "=", "3", "\n", "indexes", "=", "tf", ".", "argsort", "(", "noise", ",", "axis", "=", "-", "1", ",", "direction", "=", "'DESCENDING'", ",", "stable", "=", "True", ")", "[", ":", ",", ":", "select_num", "]", "\n", "print", "(", "'=========DEBUG:indexes'", ",", "indexes", ",", ")", "\n", "\n", "word2vec_list_D_1", "=", "tf", ".", "batch_gather", "(", "word2vec_list_D_1", ",", "indexes", ")", "\n", "new_fc7_verbs_D_1", "=", "tf", ".", "batch_gather", "(", "new_fc7_verbs_D_1", ",", "indexes", ")", "\n", "tmp_gt", "=", "tf", ".", "batch_gather", "(", "tmp_gt", ",", "indexes", ")", "\n", "\n", "new_fc7_verbs_D_1", "=", "tf", ".", "reshape", "(", "new_fc7_verbs_D_1", ",", "[", "-", "1", ",", "self", ".", "obtain_last_verb_dim", "(", ")", "]", ")", "\n", "word2vec_list_D_1", "=", "tf", ".", "reshape", "(", "word2vec_list_D_1", ",", "[", "-", "1", ",", "self", ".", "obtain_last_obj_dim", "(", ")", "]", ")", "\n", "new_ho_class_D_1", "=", "tf", ".", "reshape", "(", "tmp_gt", ",", "[", "-", "1", ",", "self", ".", "network", ".", "compose_num_classes", "]", ")", "\n", "\n", "new_gt_class_HO_1", "=", "new_ho_class_D_1", "\n", "conds", "=", "tf", ".", "greater", "(", "tf", ".", "reduce_sum", "(", "new_ho_class_D_1", ",", "axis", "=", "-", "1", ")", ",", "0", ")", "\n", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "                ", "word2vec_list_D_1", "=", "tf", ".", "Print", "(", "word2vec_list_D_1", ",", "\n", "[", "tf", ".", "shape", "(", "noise", ")", ",", "tf", ".", "shape", "(", "fc7_verbs", ")", ",", "tf", ".", "shape", "(", "word2vec_list_D_1", ")", "]", ",", "\n", "'randso indexes:'", ",", "first_n", "=", "100", ")", "\n", "\n", "", "", "if", "conds", "is", "not", "None", ":", "\n", "            ", "print", "(", "conds", ",", "new_gt_class_HO_1", ",", "'=============================='", ")", "\n", "word2vec_list_D_1", "=", "tf", ".", "boolean_mask", "(", "word2vec_list_D_1", ",", "conds", ")", "\n", "new_fc7_verbs_D_1", "=", "tf", ".", "boolean_mask", "(", "new_fc7_verbs_D_1", ",", "conds", ")", "\n", "new_ho_class_D_1", "=", "tf", ".", "boolean_mask", "(", "new_gt_class_HO_1", ",", "conds", ")", "\n", "if", "old_obj", "is", "not", "None", "and", "new_obj", "is", "not", "None", ":", "\n", "                ", "old_obj", "=", "tf", ".", "boolean_mask", "(", "old_obj", ",", "conds", ")", "\n", "new_obj", "=", "tf", ".", "boolean_mask", "(", "new_obj", ",", "conds", ")", "\n", "", "", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "word2vec_list_D_1", "=", "tf", ".", "Print", "(", "word2vec_list_D_1", ",", "\n", "[", "tf", ".", "shape", "(", "word2vec_list_D_1", ")", ",", "tf", ".", "shape", "(", "new_ho_class_D_1", ")", ",", "tf", ".", "shape", "(", "new_gt_class_HO_1", ")", "]", ",", "\n", "'begin2 indexes:'", ",", "first_n", "=", "100", ")", "\n", "", "return", "new_fc7_verbs_D_1", ",", "new_ho_class_D_1", ",", "word2vec_list_D_1", ",", "old_obj", ",", "new_obj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.__init__": [[53, 115], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "numpy.array().reshape", "numpy.array().reshape", "ResNet50_VCOCO.ResNet50.reset_classes", "ResNet50_VCOCO.ResNet50.model_name.__contains__", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "print", "ResNet50_VCOCO.ResNet50.blocks.append", "numpy.array", "numpy.array", "resnet_v1_block"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.reset_classes"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "visualize", "=", "{", "}", "\n", "self", ".", "test_visualize", "=", "{", "}", "\n", "self", ".", "intermediate", "=", "{", "}", "\n", "self", ".", "predictions", "=", "{", "}", "\n", "self", ".", "score_summaries", "=", "{", "}", "\n", "self", ".", "event_summaries", "=", "{", "}", "\n", "self", ".", "train_summaries", "=", "[", "]", "\n", "self", ".", "losses", "=", "{", "}", "\n", "\n", "self", ".", "image", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "1", ",", "None", ",", "None", ",", "3", "]", ",", "name", "=", "'image'", ")", "\n", "self", ".", "spatial", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "64", ",", "64", ",", "2", "]", ",", "name", "=", "'sp'", ")", "\n", "# self.Hsp_boxes   = tf.placeholder(tf.float32, shape=[None, 5], name = 'Hsp_boxes')", "\n", "self", ".", "H_boxes", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "5", "]", ",", "name", "=", "'H_boxes'", ")", "\n", "self", ".", "O_boxes", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "5", "]", ",", "name", "=", "'O_boxes'", ")", "\n", "self", ".", "gt_class_H", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "29", "]", ",", "name", "=", "'gt_class_H'", ")", "\n", "self", ".", "gt_class_HO", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "29", "]", ",", "name", "=", "'gt_class_HO'", ")", "\n", "self", ".", "gt_class_sp", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "29", "]", ",", "name", "=", "'gt_class_sp'", ")", "\n", "self", ".", "Mask_HO", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "29", "]", ",", "name", "=", "'HO_mask'", ")", "\n", "self", ".", "Mask_H", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "29", "]", ",", "name", "=", "'H_mask'", ")", "\n", "self", ".", "Mask_sp", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "29", "]", ",", "name", "=", "'sp_mask'", ")", "\n", "self", ".", "gt_compose", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "238", "]", ",", "name", "=", "'gt_compose'", ")", "\n", "self", ".", "H_num", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "image_id", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "num_classes", "=", "29", "\n", "self", ".", "num_fc", "=", "1024", "\n", "self", ".", "verb_num_classes", "=", "29", "\n", "self", ".", "obj_num_classes", "=", "1", "\n", "self", ".", "scope", "=", "'resnet_v1_50'", "\n", "self", ".", "stride", "=", "[", "16", ",", "]", "\n", "# self.lr          = tf.placeholder(tf.float32)", "\n", "if", "tf", ".", "__version__", "==", "'1.1.0'", ":", "\n", "            ", "self", ".", "blocks", "=", "[", "resnet_utils", ".", "Block", "(", "'block1'", ",", "resnet_v1", ".", "bottleneck", ",", "[", "(", "256", ",", "64", ",", "1", ")", "]", "*", "2", "+", "[", "(", "256", ",", "64", ",", "2", ")", "]", ")", ",", "\n", "resnet_utils", ".", "Block", "(", "'block2'", ",", "resnet_v1", ".", "bottleneck", ",", "[", "(", "512", ",", "128", ",", "1", ")", "]", "*", "3", "+", "[", "(", "512", ",", "128", ",", "2", ")", "]", ")", ",", "\n", "resnet_utils", ".", "Block", "(", "'block3'", ",", "resnet_v1", ".", "bottleneck", ",", "[", "(", "1024", ",", "256", ",", "1", ")", "]", "*", "5", "+", "[", "(", "1024", ",", "256", ",", "1", ")", "]", ")", ",", "\n", "resnet_utils", ".", "Block", "(", "'block4'", ",", "resnet_v1", ".", "bottleneck", ",", "[", "(", "2048", ",", "512", ",", "1", ")", "]", "*", "3", ")", ",", "\n", "resnet_utils", ".", "Block", "(", "'block5'", ",", "resnet_v1", ".", "bottleneck", ",", "[", "(", "2048", ",", "512", ",", "1", ")", "]", "*", "3", ")", "]", "\n", "", "else", ":", "\n", "            ", "from", "tensorflow", ".", "contrib", ".", "slim", ".", "python", ".", "slim", ".", "nets", ".", "resnet_v1", "import", "resnet_v1_block", "\n", "self", ".", "blocks", "=", "[", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "64", ",", "num_units", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "128", ",", "num_units", "=", "4", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "256", ",", "num_units", "=", "6", ",", "stride", "=", "1", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "resnet_v1_block", "(", "'block5'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", "]", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'unique_weights'", ")", ":", "\n", "                ", "print", "(", "\"unique_weights2\"", ")", "\n", "self", ".", "blocks", ".", "append", "(", "resnet_v1_block", "(", "'block6'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", ")", "\n", "\n", "", "", "self", ".", "HO_weight", "=", "np", ".", "array", "(", "[", "3.3510249", ",", "3.4552405", ",", "4.0257854", ",", "0.0", ",", "4.088436", ",", "\n", "3.4370995", ",", "3.85842", ",", "4.637334", ",", "3.5487218", ",", "3.536237", ",", "\n", "2.5578923", ",", "3.342811", ",", "3.8897269", ",", "4.70686", ",", "3.3952892", ",", "\n", "3.9706533", ",", "4.504736", ",", "0.0", ",", "1.4873443", ",", "3.700363", ",", "\n", "4.1058283", ",", "3.6298118", ",", "0.0", ",", "6.490651", ",", "5.0808263", ",", "\n", "1.520838", ",", "3.3888445", ",", "0.0", ",", "3.9899964", "]", ",", "dtype", "=", "'float32'", ")", ".", "reshape", "(", "1", ",", "29", ")", "\n", "self", ".", "H_weight", "=", "np", ".", "array", "(", "[", "4.0984106", ",", "4.102459", ",", "4.0414762", ",", "4.060745", ",", "4.0414762", ",", "\n", "3.9768186", ",", "4.23686", ",", "5.3542085", ",", "3.723717", ",", "3.4699364", ",", "\n", "2.4587274", ",", "3.7167964", ",", "4.08836", ",", "5.050695", ",", "3.9077065", ",", "\n", "4.534647", ",", "3.4699364", ",", "2.9466882", ",", "1.8585607", ",", "3.9433942", ",", "\n", "3.9433942", ",", "4.3523254", ",", "3.8368235", ",", "6.4963055", ",", "5.138182", ",", "\n", "1.7807873", ",", "4.080392", ",", "1.9544303", ",", "4.5761204", "]", ",", "dtype", "=", "'float32'", ")", ".", "reshape", "(", "1", ",", "29", ")", "\n", "self", ".", "reset_classes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.set_ph": [[116, 136], ["print", "ResNet50_VCOCO.ResNet50.reset_classes"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.reset_classes"], ["", "def", "set_ph", "(", "self", ",", "image", ",", "image_id", ",", "H_num", ",", "spatial", ",", "H_boxes", ",", "O_boxes", ",", "gt_cls_H", ",", "\n", "gt_cls_HO", ",", "gt_cls_sp", ",", "Mask_HO", ",", "Mask_H", ",", "Mask_sp", ",", "gt_compose", ")", ":", "\n", "\n", "        ", "if", "image", "is", "not", "None", ":", "self", ".", "image", "=", "image", "\n", "if", "image_id", "is", "not", "None", ":", "self", ".", "image_id", "=", "image_id", "\n", "if", "spatial", "is", "not", "None", ":", "self", ".", "spatial", "=", "spatial", "\n", "if", "H_boxes", "is", "not", "None", ":", "self", ".", "H_boxes", "=", "H_boxes", "\n", "# self.Hsp_boxes   = Hsp_boxes", "\n", "if", "O_boxes", "is", "not", "None", ":", "self", ".", "O_boxes", "=", "O_boxes", "\n", "if", "gt_cls_H", "is", "not", "None", ":", "self", ".", "gt_class_H", "=", "gt_cls_H", "\n", "if", "gt_cls_HO", "is", "not", "None", ":", "self", ".", "gt_class_HO", "=", "gt_cls_HO", "\n", "if", "gt_cls_sp", "is", "not", "None", ":", "self", ".", "gt_class_sp", "=", "gt_cls_sp", "\n", "if", "Mask_HO", "is", "not", "None", ":", "self", ".", "Mask_HO", "=", "Mask_HO", "\n", "if", "Mask_H", "is", "not", "None", ":", "self", ".", "Mask_H", "=", "Mask_H", "\n", "if", "Mask_sp", "is", "not", "None", ":", "self", ".", "Mask_sp", "=", "Mask_sp", "\n", "if", "H_num", "is", "not", "None", ":", "self", ".", "H_num", "=", "H_num", "\n", "self", ".", "gt_compose", "=", "gt_compose", "\n", "print", "(", "\"set ph:\"", ",", "self", ".", "image", ")", "\n", "if", "self", ".", "gt_compose", "is", "not", "None", ":", "\n", "            ", "self", ".", "reset_classes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.reset_classes": [[137, 154], ["ResNet50_VCOCO.ResNet50.model_name.__contains__", "ResNet50_VCOCO.ResNet50.model_name.__contains__", "ult.tools.get_convert_matrix_coco2", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.tools.get_convert_matrix_coco2"], ["", "", "def", "reset_classes", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_t2_'", ")", "or", "self", ".", "model_name", ".", "__contains__", "(", "'_t3_'", ")", ":", "\n", "# we use t3. this is a simple id for some strategies.", "\n", "            ", "self", ".", "verb_num_classes", "=", "29", "\n", "self", ".", "obj_num_classes", "=", "80", "\n", "self", ".", "num_classes", "=", "29", "\n", "self", ".", "compose_num_classes", "=", "238", "\n", "# Noticeably, we regard str and obj differently. In our further experiment, this do not have effect on VCL.", "\n", "verb_to_HO_matrix", ",", "obj_to_HO_matrix", "=", "get_convert_matrix_coco2", "(", "self", ".", "verb_num_classes", ",", "self", ".", "obj_num_classes", ")", "\n", "\n", "self", ".", "obj_to_HO_matrix", "=", "tf", ".", "constant", "(", "obj_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "verb_to_HO_matrix", "=", "tf", ".", "constant", "(", "verb_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "gt_obj_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_compose", ",", "self", ".", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "self", ".", "gt_verb_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_compose", ",", "self", ".", "verb_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.build_base": [[157, 164], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.conv2d_same", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.conv2d_same", "tensorflow.pad", "tensorflow.pad", "tensorflow.max_pool2d", "tensorflow.max_pool2d"], "methods", ["None"], ["", "", "def", "build_base", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "self", ".", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", ")", ":", "\n", "            ", "net", "=", "resnet_utils", ".", "conv2d_same", "(", "self", ".", "image", ",", "64", ",", "7", ",", "stride", "=", "2", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "tf", ".", "pad", "(", "net", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'pool1'", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.image_to_head": [[165, 187], ["tensorflow.arg_scope", "tensorflow.arg_scope", "ResNet50_VCOCO.ResNet50.build_base", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.arg_scope", "tensorflow.arg_scope", "ResNet50_VCOCO.ResNet50.model_name.__contains__", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "ResNet50_VCOCO.resnet_arg_scope", "ResNet50_VCOCO.resnet_arg_scope", "print"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.build_base", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "image_to_head", "(", "self", ",", "is_training", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "False", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "build_base", "(", ")", "\n", "net", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "net", ",", "\n", "self", ".", "blocks", "[", "0", ":", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "            ", "if", "self", ".", "model_name", ".", "__contains__", "(", "'unique_weights'", ")", ":", "\n", "                ", "print", "(", "\"unique_weights3\"", ")", "\n", "stop", "=", "-", "3", "\n", "", "else", ":", "\n", "                ", "stop", "=", "-", "2", "\n", "", "head", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "net", ",", "\n", "self", ".", "blocks", "[", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", ":", "stop", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "", "return", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.sp_to_head": [[189, 201], ["tensorflow.variable_scope", "tensorflow.variable_scope", "ResNet50_VCOCO.ResNet50.model_name.__contains__", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.flatten", "tensorflow.flatten"], "methods", ["None"], ["", "def", "sp_to_head", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "self", ".", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", ")", ":", "\n", "            ", "ends", "=", "2", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_spose'", ")", ":", "\n", "                ", "ends", "=", "3", "\n", "", "conv1_sp", "=", "slim", ".", "conv2d", "(", "self", ".", "spatial", "[", ":", ",", ":", ",", ":", ",", ":", "ends", "]", ",", "64", ",", "[", "5", ",", "5", "]", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'conv1_sp'", ")", "\n", "pool1_sp", "=", "slim", ".", "max_pool2d", "(", "conv1_sp", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool1_sp'", ")", "\n", "conv2_sp", "=", "slim", ".", "conv2d", "(", "pool1_sp", ",", "32", ",", "[", "5", ",", "5", "]", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'conv2_sp'", ")", "\n", "pool2_sp", "=", "slim", ".", "max_pool2d", "(", "conv2_sp", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool2_sp'", ")", "\n", "pool2_flat_sp", "=", "slim", ".", "flatten", "(", "pool2_sp", ")", "\n", "\n", "", "return", "pool2_flat_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.res5": [[203, 226], ["tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "ResNet50_VCOCO.resnet_arg_scope"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "res5", "(", "self", ",", "pool5_H", ",", "pool5_O", ",", "sp", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "\n", "            ", "fc7_H", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "pool5_H", ",", "\n", "self", ".", "blocks", "[", "-", "2", ":", "-", "1", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "\n", "# fc7_H = tf.reduce_mean(fc7_H, axis=[1, 2])", "\n", "\n", "\n", "fc7_O", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "pool5_O", ",", "\n", "self", ".", "blocks", "[", "-", "1", ":", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "\n", "# fc7_O = tf.reduce_mean(fc7_O, axis=[1, 2])", "\n", "\n", "", "return", "fc7_H", ",", "fc7_O", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.head_to_tail": [[227, 257], ["tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.concat", "tensorflow.concat", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.concat", "tensorflow.concat", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.concat", "tensorflow.concat", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "ResNet50_VCOCO.resnet_arg_scope"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "head_to_tail", "(", "self", ",", "fc7_H", ",", "fc7_O", ",", "pool5_SH", ",", "pool5_SO", ",", "sp", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "\n", "            ", "fc7_SH", "=", "tf", ".", "reduce_mean", "(", "pool5_SH", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "fc7_SO", "=", "tf", ".", "reduce_mean", "(", "pool5_SO", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "\n", "Concat_SH", "=", "tf", ".", "concat", "(", "[", "fc7_H", "[", ":", "self", ".", "H_num", ",", ":", "]", ",", "fc7_SH", "[", ":", "self", ".", "H_num", ",", ":", "]", "]", ",", "1", ")", "\n", "\n", "fc8_SH", "=", "slim", ".", "fully_connected", "(", "Concat_SH", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc8_SH'", ")", "\n", "fc8_SH", "=", "slim", ".", "dropout", "(", "fc8_SH", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout8_SH'", ")", "\n", "fc9_SH", "=", "slim", ".", "fully_connected", "(", "fc8_SH", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc9_SH'", ")", "\n", "fc9_SH", "=", "slim", ".", "dropout", "(", "fc9_SH", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout9_SH'", ")", "\n", "\n", "\n", "Concat_SO", "=", "tf", ".", "concat", "(", "[", "fc7_O", ",", "fc7_SO", "]", ",", "1", ")", "\n", "\n", "fc8_SO", "=", "slim", ".", "fully_connected", "(", "Concat_SO", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc8_SO'", ")", "\n", "fc8_SO", "=", "slim", ".", "dropout", "(", "fc8_SO", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout8_SO'", ")", "\n", "fc9_SO", "=", "slim", ".", "fully_connected", "(", "fc8_SO", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc9_SO'", ")", "\n", "fc9_SO", "=", "slim", ".", "dropout", "(", "fc9_SO", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout9_SO'", ")", "\n", "\n", "\n", "Concat_SHsp", "=", "tf", ".", "concat", "(", "[", "fc7_H", ",", "sp", "]", ",", "1", ")", "\n", "Concat_SHsp", "=", "slim", ".", "fully_connected", "(", "Concat_SHsp", ",", "self", ".", "num_fc", ",", "scope", "=", "'Concat_SHsp'", ")", "\n", "Concat_SHsp", "=", "slim", ".", "dropout", "(", "Concat_SHsp", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout6_SHsp'", ")", "\n", "fc7_SHsp", "=", "slim", ".", "fully_connected", "(", "Concat_SHsp", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc7_SHsp'", ")", "\n", "fc7_SHsp", "=", "slim", ".", "dropout", "(", "fc7_SHsp", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout7_SHsp'", ")", "\n", "\n", "\n", "", "return", "fc9_SH", ",", "fc9_SO", ",", "fc7_SHsp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.crop_pool_layer": [[258, 270], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.squeeze", "tensorflow.squeeze", "ResNet50_VCOCO.ResNet50.trans_boxes_by_feats", "tensorflow.slice", "tensorflow.slice", "tensorflow.image.crop_and_resize", "tensorflow.image.crop_and_resize", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.image.crop_and_resize", "tensorflow.image.crop_and_resize", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.trans_boxes_by_feats"], ["", "def", "crop_pool_layer", "(", "self", ",", "bottom", ",", "rois", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "batch_ids", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"batch_id\"", ")", ",", "[", "1", "]", ")", "\n", "bboxes", "=", "self", ".", "trans_boxes_by_feats", "(", "bottom", ",", "rois", ")", "\n", "if", "cfg", ".", "RESNET", ".", "MAX_POOL", ":", "\n", "                ", "pre_pool_size", "=", "cfg", ".", "POOLING_SIZE", "*", "2", "\n", "crops", "=", "tf", ".", "image", ".", "crop_and_resize", "(", "bottom", ",", "bboxes", ",", "tf", ".", "to_int32", "(", "batch_ids", ")", ",", "[", "pre_pool_size", ",", "pre_pool_size", "]", ",", "name", "=", "\"crops\"", ")", "\n", "crops", "=", "slim", ".", "max_pool2d", "(", "crops", ",", "[", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ")", "\n", "", "else", ":", "\n", "                ", "crops", "=", "tf", ".", "image", ".", "crop_and_resize", "(", "bottom", ",", "bboxes", ",", "tf", ".", "to_int32", "(", "batch_ids", ")", ",", "[", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", "]", ",", "name", "=", "\"crops\"", ")", "\n", "", "", "return", "crops", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.trans_boxes_by_feats": [[271, 281], ["tensorflow.shape", "tensorflow.shape", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "numpy.float32", "numpy.float32", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.concat", "tensorflow.concat", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float"], "methods", ["None"], ["", "def", "trans_boxes_by_feats", "(", "self", ",", "bottom", ",", "rois", ")", ":", "\n", "        ", "bottom_shape", "=", "tf", ".", "shape", "(", "bottom", ")", "\n", "height", "=", "(", "tf", ".", "to_float", "(", "bottom_shape", "[", "1", "]", ")", "-", "1.", ")", "*", "np", ".", "float32", "(", "self", ".", "stride", "[", "0", "]", ")", "\n", "width", "=", "(", "tf", ".", "to_float", "(", "bottom_shape", "[", "2", "]", ")", "-", "1.", ")", "*", "np", ".", "float32", "(", "self", ".", "stride", "[", "0", "]", ")", "\n", "x1", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"x1\"", ")", "/", "width", "\n", "y1", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "2", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"y1\"", ")", "/", "height", "\n", "x2", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "3", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"x2\"", ")", "/", "width", "\n", "y2", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "4", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"y2\"", ")", "/", "height", "\n", "bboxes", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "concat", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", "]", ",", "axis", "=", "1", ")", ")", "\n", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.attention_pool_layer_H": [[282, 290], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "attention_pool_layer_H", "(", "self", ",", "bottom", ",", "fc7_H", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "fc1", "=", "slim", ".", "fully_connected", "(", "fc7_H", ",", "512", ",", "scope", "=", "'fc1_b'", ")", "\n", "fc1", "=", "slim", ".", "dropout", "(", "fc1", ",", "keep_prob", "=", "0.8", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout1_b'", ")", "\n", "fc1", "=", "tf", ".", "reshape", "(", "fc1", ",", "[", "tf", ".", "shape", "(", "fc1", ")", "[", "0", "]", ",", "1", ",", "1", ",", "tf", ".", "shape", "(", "fc1", ")", "[", "1", "]", "]", ")", "\n", "att", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "bottom", ",", "fc1", ")", ",", "3", ",", "keep_dims", "=", "True", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.attention_norm_H": [[292, 302], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.shape", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "attention_norm_H", "(", "self", ",", "att", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "att_shape", "=", "tf", ".", "shape", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "[", "att_shape", "[", "0", "]", ",", "att_shape", "[", "1", "]", ",", "-", "1", "]", ")", "\n", "att", "=", "tf", ".", "nn", ".", "softmax", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "att_shape", ")", "\n", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.attention_pool_layer_O": [[303, 311], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "attention_pool_layer_O", "(", "self", ",", "bottom", ",", "fc7_O", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "fc1", "=", "slim", ".", "fully_connected", "(", "fc7_O", ",", "512", ",", "scope", "=", "'fc1_b'", ")", "\n", "fc1", "=", "slim", ".", "dropout", "(", "fc1", ",", "keep_prob", "=", "0.8", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout1_b'", ")", "\n", "fc1", "=", "tf", ".", "reshape", "(", "fc1", ",", "[", "tf", ".", "shape", "(", "fc1", ")", "[", "0", "]", ",", "1", ",", "1", ",", "tf", ".", "shape", "(", "fc1", ")", "[", "1", "]", "]", ")", "\n", "att", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "bottom", ",", "fc1", ")", ",", "3", ",", "keep_dims", "=", "True", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.attention_norm_O": [[313, 323], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.shape", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "attention_norm_O", "(", "self", ",", "att", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "att_shape", "=", "tf", ".", "shape", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "[", "att_shape", "[", "0", "]", ",", "att_shape", "[", "1", "]", ",", "-", "1", "]", ")", "\n", "att", "=", "tf", ".", "nn", ".", "softmax", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "att_shape", ")", "\n", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.region_classification": [[324, 358], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["None"], ["", "def", "region_classification", "(", "self", ",", "fc7_H", ",", "fc7_O", ",", "fc7_SHsp", ",", "is_training", ",", "initializer", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "cls_score_H", "=", "slim", ".", "fully_connected", "(", "fc7_H", ",", "self", ".", "num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'cls_score_H'", ")", "\n", "cls_prob_H", "=", "tf", ".", "nn", ".", "sigmoid", "(", "cls_score_H", ",", "name", "=", "'cls_prob_H'", ")", "\n", "tf", ".", "reshape", "(", "cls_prob_H", ",", "[", "1", ",", "self", ".", "num_classes", "]", ")", "\n", "\n", "cls_score_O", "=", "slim", ".", "fully_connected", "(", "fc7_O", ",", "self", ".", "num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'cls_score_O'", ")", "\n", "cls_prob_O", "=", "tf", ".", "nn", ".", "sigmoid", "(", "cls_score_O", ",", "name", "=", "'cls_prob_O'", ")", "\n", "tf", ".", "reshape", "(", "cls_prob_O", ",", "[", "1", ",", "self", ".", "num_classes", "]", ")", "\n", "\n", "cls_score_sp", "=", "slim", ".", "fully_connected", "(", "fc7_SHsp", ",", "self", ".", "num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'cls_score_sp'", ")", "\n", "cls_prob_sp", "=", "tf", ".", "nn", ".", "sigmoid", "(", "cls_score_sp", ",", "name", "=", "'cls_prob_sp'", ")", "\n", "tf", ".", "reshape", "(", "cls_prob_sp", ",", "[", "1", ",", "self", ".", "num_classes", "]", ")", "\n", "\n", "\n", "self", ".", "predictions", "[", "\"cls_score_H\"", "]", "=", "cls_score_H", "\n", "self", ".", "predictions", "[", "\"cls_prob_H\"", "]", "=", "cls_prob_H", "\n", "self", ".", "predictions", "[", "\"cls_score_O\"", "]", "=", "cls_score_O", "\n", "self", ".", "predictions", "[", "\"cls_prob_O\"", "]", "=", "cls_prob_O", "\n", "self", ".", "predictions", "[", "\"cls_score_sp\"", "]", "=", "cls_score_sp", "\n", "self", ".", "predictions", "[", "\"cls_prob_sp\"", "]", "=", "cls_prob_sp", "\n", "\n", "self", ".", "predictions", "[", "\"cls_prob_HO\"", "]", "=", "cls_prob_sp", "*", "(", "cls_prob_O", "+", "cls_prob_H", ")", "\n", "\n", "", "return", "cls_prob_H", ",", "cls_prob_O", ",", "cls_prob_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.bottleneck": [[359, 368], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.conv2d", "scope.reuse_variables"], "methods", ["None"], ["", "def", "bottleneck", "(", "self", ",", "bottom", ",", "is_training", ",", "name", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "if", "reuse", ":", "\n", "                ", "scope", ".", "reuse_variables", "(", ")", "\n", "\n", "", "head_bottleneck", "=", "slim", ".", "conv2d", "(", "bottom", ",", "1024", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "name", ")", "\n", "\n", "", "return", "head_bottleneck", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.build_network": [[369, 410], ["tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "ResNet50_VCOCO.ResNet50.image_to_head", "ResNet50_VCOCO.ResNet50.sp_to_head", "ResNet50_VCOCO.ResNet50.crop_pool_layer", "ResNet50_VCOCO.ResNet50.crop_pool_layer", "ResNet50_VCOCO.ResNet50.res5", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "ResNet50_VCOCO.ResNet50.attention_pool_layer_H", "ResNet50_VCOCO.ResNet50.attention_norm_H", "tensorflow.multiply", "tensorflow.multiply", "ResNet50_VCOCO.ResNet50.attention_pool_layer_O", "ResNet50_VCOCO.ResNet50.attention_norm_O", "tensorflow.multiply", "tensorflow.multiply", "ResNet50_VCOCO.ResNet50.bottleneck", "ResNet50_VCOCO.ResNet50.bottleneck", "ResNet50_VCOCO.ResNet50.head_to_tail", "ResNet50_VCOCO.ResNet50.region_classification", "ResNet50_VCOCO.ResNet50.score_summaries.update", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.image_to_head", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.sp_to_head", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.crop_pool_layer", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.crop_pool_layer", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.res5", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_pool_layer_H", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_norm_H", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_pool_layer_O", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_norm_O", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.bottleneck", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.bottleneck", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.head_to_tail", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.region_classification"], ["", "def", "build_network", "(", "self", ",", "is_training", ")", ":", "\n", "        ", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.01", ")", "\n", "\n", "# ResNet Backbone", "\n", "head", "=", "self", ".", "image_to_head", "(", "is_training", ")", "\n", "sp", "=", "self", ".", "sp_to_head", "(", ")", "\n", "pool5_H", "=", "self", ".", "crop_pool_layer", "(", "head", ",", "self", ".", "H_boxes", ",", "'Crop_H'", ")", "\n", "pool5_O", "=", "self", ".", "crop_pool_layer", "(", "head", ",", "self", ".", "O_boxes", ",", "'Crop_O'", ")", "\n", "\n", "fc7_H", ",", "fc7_O", "=", "self", ".", "res5", "(", "pool5_H", ",", "pool5_O", ",", "sp", ",", "is_training", ",", "'res5'", ")", "\n", "fc7_H", "=", "tf", ".", "reduce_mean", "(", "fc7_H", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "fc7_O", "=", "tf", ".", "reduce_mean", "(", "fc7_O", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "\n", "# Phi ", "\n", "head_phi", "=", "slim", ".", "conv2d", "(", "head", ",", "512", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'head_phi'", ")", "\n", "\n", "# g ", "\n", "head_g", "=", "slim", ".", "conv2d", "(", "head", ",", "512", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'head_g'", ")", "\n", "\n", "Att_H", "=", "self", ".", "attention_pool_layer_H", "(", "head_phi", ",", "fc7_H", "[", ":", "self", ".", "H_num", ",", ":", "]", ",", "is_training", ",", "'Att_H'", ")", "\n", "Att_H", "=", "self", ".", "attention_norm_H", "(", "Att_H", ",", "'Norm_Att_H'", ")", "\n", "\n", "att_head_H", "=", "tf", ".", "multiply", "(", "head_g", ",", "Att_H", ")", "\n", "\n", "Att_O", "=", "self", ".", "attention_pool_layer_O", "(", "head_phi", ",", "fc7_O", ",", "is_training", ",", "'Att_O'", ")", "\n", "Att_O", "=", "self", ".", "attention_norm_O", "(", "Att_O", ",", "'Norm_Att_O'", ")", "\n", "att_head_O", "=", "tf", ".", "multiply", "(", "head_g", ",", "Att_O", ")", "\n", "\n", "pool5_SH", "=", "self", ".", "bottleneck", "(", "att_head_H", ",", "is_training", ",", "'bottleneck'", ",", "False", ")", "\n", "pool5_SO", "=", "self", ".", "bottleneck", "(", "att_head_O", ",", "is_training", ",", "'bottleneck'", ",", "True", ")", "\n", "\n", "\n", "fc7_SH", ",", "fc7_SO", ",", "fc7_SHsp", "=", "self", ".", "head_to_tail", "(", "fc7_H", ",", "fc7_O", ",", "pool5_SH", ",", "pool5_SO", ",", "sp", ",", "is_training", ",", "'fc_HO'", ")", "\n", "\n", "cls_prob_H", ",", "cls_prob_O", ",", "cls_prob_sp", "=", "self", ".", "region_classification", "(", "fc7_SH", ",", "fc7_SO", ",", "fc7_SHsp", ",", "is_training", ",", "initializer", ",", "'classification'", ")", "\n", "\n", "self", ".", "score_summaries", ".", "update", "(", "self", ".", "predictions", ")", "\n", "\n", "self", ".", "visualize", "[", "\"attention_map_H\"", "]", "=", "(", "Att_H", "-", "tf", ".", "reduce_min", "(", "Att_H", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", "/", "tf", ".", "reduce_max", "(", "(", "Att_H", "[", "0", ",", ":", ",", ":", ",", ":", "]", "-", "tf", ".", "reduce_min", "(", "Att_H", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", ")", "\n", "self", ".", "visualize", "[", "\"attention_map_O\"", "]", "=", "(", "Att_O", "-", "tf", ".", "reduce_min", "(", "Att_O", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", "/", "tf", ".", "reduce_max", "(", "(", "Att_O", "[", "0", ",", ":", ",", ":", ",", ":", "]", "-", "tf", ".", "reduce_min", "(", "Att_O", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", ")", "\n", "return", "cls_prob_H", ",", "cls_prob_O", ",", "cls_prob_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.create_architecture": [[413, 442], ["ResNet50_VCOCO.ResNet50.build_network", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "ResNet50_VCOCO.ResNet50.add_loss", "layers_to_output.update", "ResNet50_VCOCO.ResNet50.train_summaries.append", "tensorflow.device", "tensorflow.device", "val_summaries.append", "val_summaries.append", "ResNet50_VCOCO.ResNet50.event_summaries.items", "tensorflow.summary.merge_all", "tensorflow.summary.merge_all", "tensorflow.summary.merge", "tensorflow.summary.merge", "ResNet50_VCOCO.ResNet50.add_gt_image_summary_H", "ResNet50_VCOCO.ResNet50.add_gt_image_summary_HO", "val_summaries.append", "tensorflow.summary.scalar", "tensorflow.summary.scalar"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.build_network", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.add_loss", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.add_gt_image_summary_H", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.add_gt_image_summary_HO"], ["", "def", "create_architecture", "(", "self", ",", "is_training", ")", ":", "\n", "\n", "        ", "self", ".", "build_network", "(", "is_training", ")", "\n", "\n", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "            ", "self", ".", "train_summaries", ".", "append", "(", "var", ")", "\n", "\n", "", "self", ".", "add_loss", "(", ")", "\n", "layers_to_output", "=", "{", "}", "\n", "layers_to_output", ".", "update", "(", "self", ".", "losses", ")", "\n", "\n", "val_summaries", "=", "[", "]", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "            ", "val_summaries", ".", "append", "(", "self", ".", "add_gt_image_summary_H", "(", ")", ")", "\n", "val_summaries", ".", "append", "(", "self", ".", "add_gt_image_summary_HO", "(", ")", ")", "\n", "# tf.summary.image('ATTENTION_MAP_H',  self.visualize[\"attention_map_H\"], max_outputs=1)", "\n", "# tf.summary.image('ATTENTION_MAP_O',  self.visualize[\"attention_map_O\"], max_outputs=1)", "\n", "for", "key", ",", "var", "in", "self", ".", "event_summaries", ".", "items", "(", ")", ":", "\n", "                ", "val_summaries", ".", "append", "(", "tf", ".", "summary", ".", "scalar", "(", "key", ",", "var", ")", ")", "\n", "# for key, var in self.score_summaries.items():", "\n", "#     self.add_score_summary(key, var)", "\n", "# for var in self.train_summaries:", "\n", "#     self.add_train_summary(var)", "\n", "\n", "# val_summaries.append(tf.summary.scalar('lr', self.lr))", "\n", "", "self", ".", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "summary_op_val", "=", "tf", ".", "summary", ".", "merge", "(", "val_summaries", ")", "\n", "\n", "", "return", "layers_to_output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.add_loss": [[444, 474], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "ResNet50_VCOCO.ResNet50.event_summaries.update", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "add_loss", "(", "self", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'LOSS'", ")", "as", "scope", ":", "\n", "            ", "cls_score_H", "=", "self", ".", "predictions", "[", "\"cls_score_H\"", "]", "\n", "cls_score_O", "=", "self", ".", "predictions", "[", "\"cls_score_O\"", "]", "\n", "cls_score_sp", "=", "self", ".", "predictions", "[", "\"cls_score_sp\"", "]", "\n", "\n", "label_H", "=", "self", ".", "gt_class_H", "\n", "label_HO", "=", "self", ".", "gt_class_HO", "\n", "label_sp", "=", "self", ".", "gt_class_sp", "\n", "\n", "H_mask", "=", "self", ".", "Mask_H", "\n", "HO_mask", "=", "self", ".", "Mask_HO", "\n", "sp_mask", "=", "self", ".", "Mask_sp", "\n", "\n", "H_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_H", ",", "logits", "=", "cls_score_H", ")", ",", "H_mask", ")", ")", "\n", "HO_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_HO", ",", "logits", "=", "cls_score_O", ")", ",", "HO_mask", ")", ")", "\n", "sp_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_sp", ",", "logits", "=", "cls_score_sp", ")", ",", "sp_mask", ")", ")", "\n", "\n", "\n", "self", ".", "losses", "[", "'H_cross_entropy'", "]", "=", "H_cross_entropy", "\n", "self", ".", "losses", "[", "'HO_cross_entropy'", "]", "=", "HO_cross_entropy", "\n", "self", ".", "losses", "[", "'sp_cross_entropy'", "]", "=", "sp_cross_entropy", "\n", "\n", "loss", "=", "2", "*", "H_cross_entropy", "+", "HO_cross_entropy", "+", "sp_cross_entropy", "\n", "\n", "self", ".", "losses", "[", "'total_loss'", "]", "=", "loss", "\n", "self", ".", "event_summaries", ".", "update", "(", "self", ".", "losses", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.add_gt_image_summary_H": [[476, 482], ["tensorflow.py_func", "tensorflow.py_func", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.reverse", "tensorflow.reverse"], "methods", ["None"], ["", "def", "add_gt_image_summary_H", "(", "self", ")", ":", "\n", "\n", "        ", "image", "=", "tf", ".", "py_func", "(", "draw_bounding_boxes_HOI", ",", "\n", "[", "tf", ".", "reverse", "(", "self", ".", "image", "+", "cfg", ".", "PIXEL_MEANS", ",", "axis", "=", "[", "-", "1", "]", ")", ",", "self", ".", "H_boxes", ",", "self", ".", "gt_class_H", "]", ",", "\n", "tf", ".", "float32", ",", "name", "=", "\"gt_boxes_H\"", ")", "\n", "return", "tf", ".", "summary", ".", "image", "(", "'GROUND_TRUTH_H'", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.add_gt_image_summary_HO": [[483, 489], ["tensorflow.py_func", "tensorflow.py_func", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.reverse", "tensorflow.reverse"], "methods", ["None"], ["", "def", "add_gt_image_summary_HO", "(", "self", ")", ":", "\n", "\n", "        ", "image", "=", "tf", ".", "py_func", "(", "draw_bounding_boxes_HOI", ",", "\n", "[", "tf", ".", "reverse", "(", "self", ".", "image", "+", "cfg", ".", "PIXEL_MEANS", ",", "axis", "=", "[", "-", "1", "]", ")", ",", "self", ".", "O_boxes", ",", "self", ".", "gt_class_HO", "]", ",", "\n", "tf", ".", "float32", ",", "name", "=", "\"gt_boxes_HO\"", ")", "\n", "return", "tf", ".", "summary", ".", "image", "(", "'GROUND_TRUTH_HO)'", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.add_score_summary": [[491, 493], ["tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["None"], ["", "def", "add_score_summary", "(", "self", ",", "key", ",", "tensor", ")", ":", "\n", "        ", "tf", ".", "summary", ".", "histogram", "(", "'SCORE/'", "+", "tensor", ".", "op", ".", "name", "+", "'/'", "+", "key", "+", "'/scores'", ",", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.add_train_summary": [[495, 497], ["tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["None"], ["", "def", "add_train_summary", "(", "self", ",", "var", ")", ":", "\n", "        ", "tf", ".", "summary", ".", "histogram", "(", "'TRAIN/'", "+", "var", ".", "op", ".", "name", ",", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.get_feed_dict": [[498, 507], ["None"], "methods", ["None"], ["", "def", "get_feed_dict", "(", "self", ",", "blobs", ")", ":", "\n", "        ", "feed_dict", "=", "{", "self", ".", "image", ":", "blobs", "[", "'image'", "]", ",", "\n", "self", ".", "O_boxes", ":", "blobs", "[", "'O_boxes'", "]", ",", "self", ".", "gt_class_H", ":", "blobs", "[", "'gt_class_H'", "]", ",", "\n", "self", ".", "gt_class_HO", ":", "blobs", "[", "'gt_class_HO'", "]", ",", "self", ".", "Mask_H", ":", "blobs", "[", "'Mask_H'", "]", ",", "\n", "self", ".", "Mask_HO", ":", "blobs", "[", "'Mask_HO'", "]", ",", "self", ".", "spatial", ":", "blobs", "[", "'sp'", "]", ",", "\n", "self", ".", "Mask_sp", ":", "blobs", "[", "'Mask_sp'", "]", ",", "\n", "self", ".", "gt_class_sp", ":", "blobs", "[", "'gt_class_sp'", "]", ",", "self", ".", "H_num", ":", "blobs", "[", "'H_num'", "]", ",", "\n", "self", ".", "H_boxes", ":", "blobs", "[", "'H_boxes'", "]", "}", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.train_step": [[508, 515], ["ResNet50_VCOCO.ResNet50.get_feed_dict", "sess.run"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.get_feed_dict"], ["", "def", "train_step", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "        ", "feed_dict", "=", "self", ".", "get_feed_dict", "(", "blobs", ")", "\n", "\n", "loss", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "\n", "train_op", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.train_step_with_summary": [[516, 525], ["ResNet50_VCOCO.ResNet50.get_feed_dict", "sess.run"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.get_feed_dict"], ["", "def", "train_step_with_summary", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "        ", "feed_dict", "=", "self", ".", "get_feed_dict", "(", "blobs", ")", "\n", "\n", "loss", ",", "summary", ",", "_", "=", "sess", ".", "run", "(", "[", "\n", "self", ".", "losses", "[", "'total_loss'", "]", ",", "\n", "self", ".", "summary_op", ",", "\n", "train_op", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "loss", ",", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.train_step_tfr": [[526, 530], ["sess.run"], "methods", ["None"], ["", "def", "train_step_tfr", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "        ", "loss", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "self", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "return", "loss", ",", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.train_step_tfr_with_summary": [[531, 537], ["sess.run"], "methods", ["None"], ["", "def", "train_step_tfr_with_summary", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "\n", "        ", "loss", ",", "summary", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "\n", "self", ".", "summary_op", ",", "self", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "return", "loss", ",", "image_id", ",", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.test_image_H": [[538, 544], ["sess.run"], "methods", ["None"], ["", "def", "test_image_H", "(", "self", ",", "sess", ",", "image", ",", "blobs", ")", ":", "\n", "        ", "feed_dict", "=", "{", "self", ".", "image", ":", "image", ",", "self", ".", "H_boxes", ":", "blobs", "[", "'H_boxes'", "]", ",", "self", ".", "H_num", ":", "blobs", "[", "'H_num'", "]", "}", "\n", "\n", "cls_prob_H", "=", "sess", ".", "run", "(", "[", "self", ".", "predictions", "[", "\"cls_prob_H\"", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "return", "cls_prob_H", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.ResNet50.test_image_HO": [[546, 552], ["sess.run"], "methods", ["None"], ["", "def", "test_image_HO", "(", "self", ",", "sess", ",", "image", ",", "blobs", ")", ":", "\n", "        ", "feed_dict", "=", "{", "self", ".", "image", ":", "image", ",", "self", ".", "H_boxes", ":", "blobs", "[", "'H_boxes'", "]", ",", "self", ".", "O_boxes", ":", "blobs", "[", "'O_boxes'", "]", ",", "self", ".", "spatial", ":", "blobs", "[", "'sp'", "]", ",", "self", ".", "H_num", ":", "blobs", "[", "'H_num'", "]", "}", "\n", "\n", "cls_prob_HO", "=", "sess", ".", "run", "(", "[", "self", ".", "predictions", "[", "\"cls_prob_HO\"", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "return", "cls_prob_HO", "", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_VCOCO.resnet_arg_scope": [[24, 49], ["tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.variance_scaling_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.constant_initializer"], "function", ["None"], ["def", "resnet_arg_scope", "(", "is_training", "=", "True", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ",", "\n", "batch_norm_decay", "=", "0.997", ",", "\n", "batch_norm_epsilon", "=", "1e-5", ",", "\n", "batch_norm_scale", "=", "True", ")", ":", "\n", "    ", "batch_norm_params", "=", "{", "\n", "'is_training'", ":", "False", ",", "\n", "'decay'", ":", "batch_norm_decay", ",", "\n", "'epsilon'", ":", "batch_norm_epsilon", ",", "\n", "'scale'", ":", "batch_norm_scale", ",", "\n", "'trainable'", ":", "False", ",", "\n", "'updates_collections'", ":", "ops", ".", "GraphKeys", ".", "UPDATE_OPS", "\n", "}", "\n", "with", "arg_scope", "(", "\n", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", "]", ",", "\n", "weights_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", ",", "\n", "weights_initializer", "=", "slim", ".", "variance_scaling_initializer", "(", ")", ",", "\n", "biases_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "normalizer_params", "=", "batch_norm_params", ")", ":", "\n", "        ", "with", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "**", "batch_norm_params", ")", "as", "arg_sc", ":", "\n", "            ", "return", "arg_sc", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.obtain_hoi_to_obj": [[11, 33], ["open", "open", "open", "open.readlines", "line.strip.strip", "open.readlines", "line.strip.strip", "int", "line.strip.split", "line.strip.split", "int", "int"], "function", ["None"], ["    ", "fobj", "=", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/hico_list_obj.txt'", ")", "\n", "fhoi", "=", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/hico_list_hoi.txt'", ")", "\n", "fvb", "=", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/hico_list_vb.txt'", ")", "\n", "hoi_to_obj", "=", "{", "}", "\n", "obj_id", "=", "{", "}", "\n", "obj_name_lists", "=", "[", "''", "]", "*", "80", "\n", "\n", "for", "line", "in", "fobj", ".", "readlines", "(", ")", "[", "2", ":", "]", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "cid", ",", "obj", "=", "[", "item", "for", "item", "in", "line", ".", "split", "(", "' '", ")", "if", "item", "!=", "''", "]", "\n", "obj_id", "[", "obj", "]", "=", "int", "(", "cid", ")", "-", "1", "\n", "obj_name_lists", "[", "int", "(", "cid", ")", "-", "1", "]", "=", "obj", "\n", "\n", "", "for", "line", "in", "fhoi", ".", "readlines", "(", ")", "[", "2", ":", "]", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "# print(line.split(' '), [item for item in line.split(' ') if item != ''])", "\n", "\n", "cid", ",", "obj", ",", "vb", "=", "[", "item", "for", "item", "in", "line", ".", "split", "(", "' '", ")", "if", "item", "!=", "''", "]", "\n", "hoi_to_obj", "[", "int", "(", "cid", ")", "-", "1", "]", "=", "obj_id", "[", "obj", "]", "\n", "\n", "# import json", "\n", "# cat_idx = json.load(open('/data1/zhihou/dataset/data/category.json'))", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.obtain_hoi_to_verb": [[35, 59], ["open", "open", "open.readlines", "line.strip.strip", "open.readlines", "line.strip.strip", "int", "line.strip.split", "line.strip.split", "int", "int"], "function", ["None"], ["\n", "", "def", "obtain_hoi_to_verb", "(", ")", ":", "\n", "# fobj = open(cfg.DATA_DIR + '/hico_list_obj.txt')", "\n", "    ", "fhoi", "=", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/hico_list_hoi.txt'", ")", "\n", "fvb", "=", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/hico_list_vb.txt'", ")", "\n", "hoi_to_verb", "=", "{", "}", "\n", "verb_id", "=", "{", "}", "\n", "verb_name_lists", "=", "[", "''", "]", "*", "117", "\n", "\n", "for", "line", "in", "fvb", ".", "readlines", "(", ")", "[", "2", ":", "]", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "cid", ",", "verb", "=", "[", "item", "for", "item", "in", "line", ".", "split", "(", "' '", ")", "if", "item", "!=", "''", "]", "\n", "verb_id", "[", "verb", "]", "=", "int", "(", "cid", ")", "-", "1", "\n", "# print(verb, verb_id[verb])", "\n", "verb_name_lists", "[", "int", "(", "cid", ")", "-", "1", "]", "=", "verb", "\n", "\n", "", "for", "line", "in", "fhoi", ".", "readlines", "(", ")", "[", "2", ":", "]", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "# print(line.split(' '), [item for item in line.split(' ') if item != ''])", "\n", "\n", "cid", ",", "obj", ",", "vb", "=", "[", "item", "for", "item", "in", "line", ".", "split", "(", "' '", ")", "if", "item", "!=", "''", "]", "\n", "hoi_to_verb", "[", "int", "(", "cid", ")", "-", "1", "]", "=", "verb_id", "[", "vb", "]", "\n", "\n", "# import json", "\n", "# cat_idx = json.load(open('/data1/zhihou/dataset/data/category.json'))", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_word2vec": [[61, 70], ["os.path.exists", "open", "pickle.load"], "function", ["None"], ["", "return", "hoi_to_verb", ",", "verb_name_lists", "\n", "\n", "", "def", "visual_tsne", "(", "X", ",", "y", ",", "label_nums", "=", "80", ",", "title", "=", "'tsne'", ",", "save_fig", "=", "False", ")", ":", "\n", "    ", "hoi_to_obj", ",", "obj_names", "=", "obtain_hoi_to_obj", "(", ")", "\n", "\n", "\n", "\n", "import", "numpy", "as", "np", "\n", "\n", "from", "sklearn", "import", "manifold", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_neighborhood_matrix": [[72, 86], ["tools.get_word2vec", "numpy.expand_dims", "numpy.tile", "numpy.expand_dims", "numpy.tile", "numpy.mean", "numpy.zeros", "range", "numpy.square", "numpy.argsort", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_word2vec"], ["import", "matplotlib", ".", "cm", "as", "cm", "\n", "\n", "n_components", "=", "2", "\n", "\n", "t0", "=", "time", "(", ")", "\n", "tsne", "=", "manifold", ".", "TSNE", "(", "n_components", "=", "n_components", ",", "init", "=", "'random'", ",", "\n", "random_state", "=", "0", ",", "perplexity", "=", "10", ")", "\n", "Y", "=", "tsne", ".", "fit_transform", "(", "X", ")", "\n", "print", "(", "Y", ".", "shape", ")", "\n", "t1", "=", "time", "(", ")", "\n", "print", "(", "\"circles, perplexity=%d in %.2g sec\"", "%", "(", "30", ",", "t1", "-", "t0", ")", ")", "\n", "# ax.set_title(\"Perplexity=30\")", "\n", "colors", "=", "cm", ".", "rainbow", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "label_nums", ")", ")", "\n", "handles", "=", "[", "]", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_convert_matrix": [[88, 103], ["numpy.zeros", "pickle.load", "pickle.load.items", "numpy.transpose", "numpy.zeros", "pickle.load", "pickle.load.items", "numpy.transpose", "open", "open"], "function", ["None"], ["for", "i", "in", "range", "(", "label_nums", ")", ":", "\n", "        ", "label", "=", "y", "==", "i", "\n", "# print(label, colors[i])", "\n", "p", "=", "plt", ".", "scatter", "(", "Y", "[", "label", ",", "0", "]", ",", "Y", "[", "label", ",", "1", "]", ",", "c", "=", "colors", "[", "i", "]", ")", "\n", "# p = plt.plot(Y[label, 0], Y[label, 1], c=colors[i], label=obj_names[i])", "\n", "handles", ".", "append", "(", "p", ")", "\n", "# plt.legend(loc=2, bbox_to_anchor=(1.05,1.0),borderaxespad = 0., fontsize = 'xx-small')", "\n", "# plt.legend(handles[:3], obj_names[:3], loc=10)", "\n", "# ax.xaxis.set_major_formatter(NullFormatter())", "\n", "# ax.yaxis.set_major_formatter(NullFormatter())", "\n", "# ax.axis('tight')", "\n", "", "plt", ".", "title", "(", "title", ")", "\n", "if", "save_fig", ":", "\n", "        ", "plt", ".", "savefig", "(", "cfg", ".", "LOCAL_DATA", "+", "'/{}.jpg'", ".", "format", "(", "title", ")", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.visual_tsne": [[105, 158], ["tools.obtain_hoi_to_obj", "time", "manifold.TSNE", "manifold.TSNE.fit_transform", "print", "time", "print", "cm.rainbow", "range", "plt.title", "numpy.linspace", "plt.clf", "print", "plt.scatter", "handles.append", "print", "plt.savefig", "print", "plt.show"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.obtain_hoi_to_obj"], ["\n", "", "", "def", "get_word2vec", "(", ")", ":", "\n", "    ", "import", "pickle", "\n", "word2vec_pkl", "=", "cfg", ".", "LOCAL_DATA0", "+", "'/coco_glove_word2vec.pkl'", "\n", "# index is sorted by alphabet", "\n", "with", "open", "(", "word2vec_pkl", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "word2vec", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "word2vec", "\n", "\n", "\n", "", "def", "get_neighborhood_matrix", "(", "neighbor_num", "=", "5", ")", ":", "\n", "    ", "word2vec_base", "=", "get_word2vec", "(", ")", "\n", "word2vec", "=", "np", ".", "expand_dims", "(", "word2vec_base", ",", "axis", "=", "0", ")", "\n", "t1", "=", "np", ".", "tile", "(", "word2vec", ",", "[", "80", ",", "1", ",", "1", "]", ")", "\n", "\n", "word2vec1", "=", "np", ".", "expand_dims", "(", "word2vec_base", ",", "axis", "=", "1", ")", "\n", "t2", "=", "np", ".", "tile", "(", "word2vec1", ",", "[", "1", ",", "80", ",", "1", "]", ")", "\n", "means", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "t1", "-", "t2", ")", ",", "axis", "=", "-", "1", ")", "\n", "neighbors", "=", "np", ".", "argsort", "(", "means", ",", "axis", "=", "-", "1", ")", "[", ":", ",", ":", "neighbor_num", "+", "1", "]", "\n", "matrix", "=", "np", ".", "zeros", "(", "[", "80", ",", "80", "]", ",", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "neighbors", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "neighbors", "[", "i", "]", ")", ")", ":", "\n", "            ", "matrix", "[", "i", "]", "[", "neighbors", "[", "i", "]", "[", "j", "]", "]", "=", "1", "\n", "", "", "return", "matrix", "\n", "\n", "\n", "", "def", "get_neighborhood_matrix2", "(", "sorted_nums", "=", "480", ")", ":", "\n", "    ", "\"\"\"\n    This is for word embedding similarity between objects\n    :param sorted_nums:\n    :return:\n    \"\"\"", "\n", "word2vec_base", "=", "get_word2vec", "(", ")", "\n", "word2vec", "=", "np", ".", "expand_dims", "(", "word2vec_base", ",", "axis", "=", "0", ")", "\n", "t1", "=", "np", ".", "tile", "(", "word2vec", ",", "[", "80", ",", "1", ",", "1", "]", ")", "\n", "\n", "word2vec1", "=", "np", ".", "expand_dims", "(", "word2vec_base", ",", "axis", "=", "1", ")", "\n", "t2", "=", "np", ".", "tile", "(", "word2vec1", ",", "[", "1", ",", "80", ",", "1", "]", ")", "\n", "means", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "t1", "-", "t2", ")", ",", "axis", "=", "-", "1", ")", "\n", "# print(means.shape)", "\n", "a", "=", "np", ".", "reshape", "(", "means", ",", "(", "-", "1", ")", ")", "\n", "b", "=", "np", ".", "sort", "(", "a", ")", "[", "sorted_nums", "]", "\n", "# print(b, np.sort(a))", "\n", "matrix", "=", "np", ".", "asarray", "(", "means", "<", "b", ",", "np", ".", "float32", ")", "\n", "return", "matrix", "\n", "\n", "\n", "", "def", "get_convert_matrix", "(", "verb_class_num", "=", "117", ",", "obj_class_num", "=", "80", ")", ":", "\n", "    ", "import", "pickle", "\n", "import", "numpy", "as", "np", "\n", "verb_to_HO_matrix", "=", "np", ".", "zeros", "(", "(", "600", ",", "verb_class_num", ")", ",", "np", ".", "float32", ")", "\n", "hoi_to_vb", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/hoi_to_vb.pkl'", ",", "'rb'", ")", ")", "\n", "for", "k", ",", "v", "in", "hoi_to_vb", ".", "items", "(", ")", ":", "\n", "        ", "verb_to_HO_matrix", "[", "k", "]", "[", "v", "]", "=", "1", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.visual_tsne_multi": [[160, 208], ["time", "manifold.TSNE", "manifold.TSNE.fit_transform", "print", "time", "print", "cm.rainbow", "cm.rainbow", "range", "plt.title", "numpy.linspace", "numpy.linspace", "print", "plt.clf", "print", "range", "print", "plt.savefig", "print", "plt.show", "numpy.arange", "numpy.logical_and", "plt.scatter", "print", "handles.append"], "function", ["None"], ["\n", "obj_to_HO_matrix", "=", "np", ".", "zeros", "(", "(", "600", ",", "obj_class_num", ")", ",", "np", ".", "float32", ")", "\n", "hoi_to_obj", "=", "pickle", ".", "load", "(", "open", "(", "cfg", ".", "DATA_DIR", "+", "'/hoi_to_obj.pkl'", ",", "'rb'", ")", ")", "\n", "for", "k", ",", "v", "in", "hoi_to_obj", ".", "items", "(", ")", ":", "\n", "        ", "obj_to_HO_matrix", "[", "k", "]", "[", "v", "]", "=", "1", "\n", "", "obj_to_HO_matrix", "=", "np", ".", "transpose", "(", "obj_to_HO_matrix", ")", "\n", "return", "verb_to_HO_matrix", ",", "obj_to_HO_matrix", "\n", "\n", "\n", "", "def", "get_convert_matrix_coco2", "(", "verb_class_num", "=", "29", ",", "obj_class_num", "=", "80", ")", ":", "\n", "    ", "set_list", "=", "[", "(", "0", ",", "38", ")", ",", "(", "1", ",", "31", ")", ",", "(", "1", ",", "32", ")", ",", "(", "2", ",", "43", ")", ",", "(", "2", ",", "44", ")", ",", "(", "2", ",", "77", ")", ",", "(", "4", ",", "1", ")", ",", "(", "4", ",", "19", ")", ",", "(", "4", ",", "28", ")", ",", "(", "4", ",", "46", ")", ",", "(", "4", ",", "47", ")", ",", "\n", "(", "4", ",", "48", ")", ",", "\n", "(", "4", ",", "49", ")", ",", "(", "4", ",", "51", ")", ",", "(", "4", ",", "52", ")", ",", "(", "4", ",", "54", ")", ",", "(", "4", ",", "55", ")", ",", "(", "4", ",", "56", ")", ",", "(", "5", ",", "2", ")", ",", "(", "5", ",", "3", ")", ",", "(", "5", ",", "4", ")", ",", "(", "5", ",", "6", ")", ",", "(", "5", ",", "7", ")", ",", "(", "5", ",", "8", ")", ",", "\n", "(", "5", ",", "9", ")", ",", "(", "5", ",", "18", ")", ",", "(", "5", ",", "21", ")", ",", "(", "6", ",", "68", ")", ",", "(", "7", ",", "33", ")", ",", "(", "8", ",", "64", ")", ",", "(", "9", ",", "47", ")", ",", "(", "9", ",", "48", ")", ",", "(", "9", ",", "49", ")", ",", "(", "9", ",", "50", ")", ",", "(", "9", ",", "51", ")", ",", "\n", "(", "9", ",", "52", ")", ",", "\n", "(", "9", ",", "53", ")", ",", "(", "9", ",", "54", ")", ",", "(", "9", ",", "55", ")", ",", "(", "9", ",", "56", ")", ",", "(", "10", ",", "2", ")", ",", "(", "10", ",", "4", ")", ",", "(", "10", ",", "14", ")", ",", "(", "10", ",", "18", ")", ",", "(", "10", ",", "21", ")", ",", "(", "10", ",", "25", ")", ",", "(", "10", ",", "27", ")", ",", "\n", "(", "10", ",", "29", ")", ",", "(", "10", ",", "57", ")", ",", "(", "10", ",", "58", ")", ",", "(", "10", ",", "60", ")", ",", "(", "10", ",", "61", ")", ",", "(", "10", ",", "62", ")", ",", "(", "10", ",", "64", ")", ",", "(", "11", ",", "31", ")", ",", "(", "11", ",", "32", ")", ",", "(", "11", ",", "37", ")", ",", "\n", "(", "11", ",", "38", ")", ",", "(", "12", ",", "14", ")", ",", "(", "12", ",", "57", ")", ",", "(", "12", ",", "58", ")", ",", "(", "12", ",", "60", ")", ",", "(", "12", ",", "61", ")", ",", "(", "13", ",", "40", ")", ",", "(", "13", ",", "41", ")", ",", "(", "13", ",", "42", ")", ",", "(", "13", ",", "46", ")", ",", "\n", "(", "14", ",", "1", ")", ",", "\n", "(", "14", ",", "25", ")", ",", "(", "14", ",", "26", ")", ",", "(", "14", ",", "27", ")", ",", "(", "14", ",", "29", ")", ",", "(", "14", ",", "30", ")", ",", "(", "14", ",", "31", ")", ",", "(", "14", ",", "32", ")", ",", "(", "14", ",", "33", ")", ",", "(", "14", ",", "34", ")", ",", "(", "14", ",", "35", ")", ",", "\n", "(", "14", ",", "37", ")", ",", "(", "14", ",", "38", ")", ",", "(", "14", ",", "39", ")", ",", "(", "14", ",", "40", ")", ",", "(", "14", ",", "41", ")", ",", "(", "14", ",", "42", ")", ",", "(", "14", ",", "47", ")", ",", "(", "14", ",", "50", ")", ",", "(", "14", ",", "68", ")", ",", "(", "14", ",", "74", ")", ",", "\n", "(", "14", ",", "75", ")", ",", "(", "14", ",", "78", ")", ",", "(", "15", ",", "30", ")", ",", "(", "15", ",", "33", ")", ",", "(", "16", ",", "43", ")", ",", "(", "16", ",", "44", ")", ",", "(", "16", ",", "45", ")", ",", "(", "18", ",", "1", ")", ",", "(", "18", ",", "2", ")", ",", "(", "18", ",", "3", ")", ",", "\n", "(", "18", ",", "4", ")", ",", "\n", "(", "18", ",", "5", ")", ",", "(", "18", ",", "6", ")", ",", "(", "18", ",", "7", ")", ",", "(", "18", ",", "8", ")", ",", "(", "18", ",", "11", ")", ",", "(", "18", ",", "14", ")", ",", "(", "18", ",", "15", ")", ",", "(", "18", ",", "16", ")", ",", "(", "18", ",", "17", ")", ",", "(", "18", ",", "18", ")", ",", "\n", "(", "18", ",", "19", ")", ",", "\n", "(", "18", ",", "20", ")", ",", "(", "18", ",", "21", ")", ",", "(", "18", ",", "24", ")", ",", "(", "18", ",", "25", ")", ",", "(", "18", ",", "26", ")", ",", "(", "18", ",", "27", ")", ",", "(", "18", ",", "28", ")", ",", "(", "18", ",", "29", ")", ",", "(", "18", ",", "30", ")", ",", "(", "18", ",", "31", ")", ",", "\n", "(", "18", ",", "32", ")", ",", "(", "18", ",", "33", ")", ",", "(", "18", ",", "34", ")", ",", "(", "18", ",", "35", ")", ",", "(", "18", ",", "36", ")", ",", "(", "18", ",", "37", ")", ",", "(", "18", ",", "38", ")", ",", "(", "18", ",", "39", ")", ",", "(", "18", ",", "40", ")", ",", "(", "18", ",", "41", ")", ",", "\n", "(", "18", ",", "42", ")", ",", "(", "18", ",", "43", ")", ",", "(", "18", ",", "44", ")", ",", "(", "18", ",", "45", ")", ",", "(", "18", ",", "46", ")", ",", "(", "18", ",", "47", ")", ",", "(", "18", ",", "48", ")", ",", "(", "18", ",", "49", ")", ",", "(", "18", ",", "51", ")", ",", "(", "18", ",", "53", ")", ",", "\n", "(", "18", ",", "54", ")", ",", "(", "18", ",", "55", ")", ",", "(", "18", ",", "56", ")", ",", "(", "18", ",", "57", ")", ",", "(", "18", ",", "61", ")", ",", "(", "18", ",", "62", ")", ",", "(", "18", ",", "63", ")", ",", "(", "18", ",", "64", ")", ",", "(", "18", ",", "65", ")", ",", "(", "18", ",", "66", ")", ",", "\n", "(", "18", ",", "67", ")", ",", "(", "18", ",", "68", ")", ",", "(", "18", ",", "73", ")", ",", "(", "18", ",", "74", ")", ",", "(", "18", ",", "75", ")", ",", "(", "18", ",", "77", ")", ",", "(", "19", ",", "35", ")", ",", "(", "19", ",", "39", ")", ",", "(", "20", ",", "33", ")", ",", "(", "21", ",", "31", ")", ",", "\n", "(", "21", ",", "32", ")", ",", "(", "23", ",", "1", ")", ",", "(", "23", ",", "11", ")", ",", "(", "23", ",", "19", ")", ",", "(", "23", ",", "20", ")", ",", "(", "23", ",", "24", ")", ",", "(", "23", ",", "28", ")", ",", "(", "23", ",", "34", ")", ",", "(", "23", ",", "49", ")", ",", "(", "23", ",", "53", ")", ",", "\n", "(", "23", ",", "56", ")", ",", "\n", "(", "23", ",", "61", ")", ",", "(", "23", ",", "63", ")", ",", "(", "23", ",", "64", ")", ",", "(", "23", ",", "67", ")", ",", "(", "23", ",", "68", ")", ",", "(", "23", ",", "73", ")", ",", "(", "24", ",", "74", ")", ",", "(", "25", ",", "1", ")", ",", "(", "25", ",", "2", ")", ",", "(", "25", ",", "4", ")", ",", "\n", "(", "25", ",", "8", ")", ",", "\n", "(", "25", ",", "9", ")", ",", "(", "25", ",", "14", ")", ",", "(", "25", ",", "15", ")", ",", "(", "25", ",", "16", ")", ",", "(", "25", ",", "17", ")", ",", "(", "25", ",", "18", ")", ",", "(", "25", ",", "19", ")", ",", "(", "25", ",", "21", ")", ",", "(", "25", ",", "25", ")", ",", "(", "25", ",", "26", ")", ",", "\n", "(", "25", ",", "27", ")", ",", "\n", "(", "25", ",", "28", ")", ",", "(", "25", ",", "29", ")", ",", "(", "25", ",", "30", ")", ",", "(", "25", ",", "31", ")", ",", "(", "25", ",", "32", ")", ",", "(", "25", ",", "33", ")", ",", "(", "25", ",", "34", ")", ",", "(", "25", ",", "35", ")", ",", "(", "25", ",", "36", ")", ",", "(", "25", ",", "37", ")", ",", "\n", "(", "25", ",", "38", ")", ",", "(", "25", ",", "39", ")", ",", "(", "25", ",", "40", ")", ",", "(", "25", ",", "41", ")", ",", "(", "25", ",", "42", ")", ",", "(", "25", ",", "43", ")", ",", "(", "25", ",", "44", ")", ",", "(", "25", ",", "45", ")", ",", "(", "25", ",", "46", ")", ",", "(", "25", ",", "47", ")", ",", "\n", "(", "25", ",", "48", ")", ",", "(", "25", ",", "49", ")", ",", "(", "25", ",", "50", ")", ",", "(", "25", ",", "51", ")", ",", "(", "25", ",", "52", ")", ",", "(", "25", ",", "53", ")", ",", "(", "25", ",", "54", ")", ",", "(", "25", ",", "55", ")", ",", "(", "25", ",", "56", ")", ",", "(", "25", ",", "57", ")", ",", "\n", "(", "25", ",", "64", ")", ",", "(", "25", ",", "65", ")", ",", "(", "25", ",", "66", ")", ",", "(", "25", ",", "67", ")", ",", "(", "25", ",", "68", ")", ",", "(", "25", ",", "73", ")", ",", "(", "25", ",", "74", ")", ",", "(", "25", ",", "77", ")", ",", "(", "25", ",", "78", ")", ",", "(", "25", ",", "79", ")", ",", "\n", "(", "25", ",", "80", ")", ",", "(", "26", ",", "32", ")", ",", "(", "26", ",", "37", ")", ",", "(", "28", ",", "30", ")", ",", "(", "28", ",", "33", ")", "]", "\n", "# there are some duplicate verbs since v-coco contains two kinds of verb (v-instru  v-obj) where v might be similar.", "\n", "# But this do not affect the evaluation.", "\n", "import", "numpy", "as", "np", "\n", "verb_to_HO_matrix", "=", "np", ".", "zeros", "(", "(", "238", ",", "verb_class_num", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "set_list", ")", ")", ":", "\n", "        ", "item", "=", "set_list", "[", "i", "]", "\n", "verb_to_HO_matrix", "[", "i", "]", "[", "item", "[", "0", "]", "]", "=", "1", "\n", "", "verb_to_HO_matrix", "=", "np", ".", "transpose", "(", "verb_to_HO_matrix", ")", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.visual_tsne1": [[210, 274], ["tools.obtain_hoi_to_obj", "time", "manifold.TSNE", "manifold.TSNE.fit_transform", "print", "time", "print", "cm.rainbow", "int", "range", "range", "plt.title", "numpy.linspace", "plt.clf", "plt.scatter", "handles.append", "plt.scatter", "handles.append", "plt.savefig", "plt.show", "len"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.obtain_hoi_to_obj"], ["obj_to_HO_matrix", "=", "np", ".", "zeros", "(", "(", "238", ",", "obj_class_num", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "set_list", ")", ")", ":", "\n", "        ", "item", "=", "set_list", "[", "i", "]", "\n", "obj_to_HO_matrix", "[", "i", "]", "[", "item", "[", "1", "]", "-", "1", "]", "=", "1", "\n", "", "obj_to_HO_matrix", "=", "np", ".", "transpose", "(", "obj_to_HO_matrix", ")", "\n", "return", "verb_to_HO_matrix", ",", "obj_to_HO_matrix", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "pass", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_convert_matrix_coco3": [[276, 348], ["numpy.zeros", "range", "numpy.transpose", "numpy.zeros", "range", "numpy.transpose", "len", "len", "len", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_convert_matrix_coco": [[350, 365], ["numpy.zeros", "pickle.load", "pickle.load.items", "numpy.transpose", "numpy.zeros", "pickle.load", "pickle.load.items", "numpy.transpose", "open", "open"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.__init__": [[14, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "net", ")", ":", "\n", "        ", "self", ".", "net", "=", "net", "\n", "self", ".", "additional_loss", "=", "None", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.compose_ho_between_images": [[19, 21], ["VCL.VCL.compose_ho_inner"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.compose_ho_inner"], ["", "def", "compose_ho_between_images", "(", "self", ",", "O_features", ",", "V_features", ",", "cur_gt_class_HO", ",", "type", ")", ":", "\n", "        ", "return", "self", ".", "compose_ho_inner", "(", "O_features", ",", "V_features", ",", "cur_gt_class_HO", ",", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.compose_ho_inner": [[23, 131], ["range", "print", "VCL.VCL.select_compose_candidate_elements", "print", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "print", "tensorflow.cast", "tensorflow.shape", "tensorflow.shape", "tensorflow.cast", "tensorflow.cast", "print", "gt_obj_class_l.append", "gt_verb_class_l.append", "VCL.VCL.net.model_name.__contains__", "tensorflow.maximum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.logical_and", "tensorflow.device", "tensorflow.Print", "VCL.VCL.net.model_name.__contains__", "tensorflow.minimum", "print", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.shape", "tensorflow.shape", "tensorflow.device", "tensorflow.Print", "VCL.VCL.net.model_name.__contains__", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.minimum", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.device", "tensorflow.Print", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.select_compose_candidate_elements"], ["", "def", "compose_ho_inner", "(", "self", ",", "O_features", ",", "V_features", ",", "cur_gt_class_HO", ",", "type", ",", "is_single", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param O_features:\n        :param V_features:\n        :param cur_gt_class_HO:\n        :param type:\n        :param is_single:\n        :return: fc7_O, fc7_V, gt_verb_class, new_gt_class_HO, gt_obj_class, gt_obj_class_orig\n        gt_obj_class_orig is corresponding to gt_verb_class\n        \"\"\"", "\n", "fc7_O_0", "=", "O_features", "[", "0", "]", "\n", "fc7_O_1", "=", "O_features", "[", "1", "]", "\n", "fc7_V_0", "=", "V_features", "[", "0", "]", "\n", "fc7_V_1", "=", "V_features", "[", "1", "]", "\n", "shape_0", "=", "tf", ".", "shape", "(", "fc7_O_0", ")", "[", "0", "]", "\n", "shape_1", "=", "tf", ".", "shape", "(", "fc7_O_1", ")", "[", "0", "]", "\n", "gt_obj_class_l", "=", "[", "]", "\n", "gt_verb_class_l", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "gt_obj_class0", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "matmul", "(", "cur_gt_class_HO", "[", "i", "]", ",", "self", ".", "net", ".", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "gt_verb_class0", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "matmul", "(", "cur_gt_class_HO", "[", "i", "]", ",", "self", ".", "net", ".", "verb_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "print", "(", "self", ".", "net", ".", "verb_to_HO_matrix", ",", "gt_verb_class0", ")", "\n", "gt_obj_class_l", ".", "append", "(", "gt_obj_class0", ")", "\n", "gt_verb_class_l", ".", "append", "(", "gt_verb_class0", ")", "\n", "", "print", "(", "'nongsha'", ",", "cur_gt_class_HO", ",", "gt_verb_class_l", ",", "type", ")", "\n", "# with tf.device('/cpu:0'):", "\n", "#     fc7_O_0 = tf.Print(fc7_O_0,", "\n", "#                                    [tf.shape(fc7_O_0), tf.shape(fc7_O_1) ], 'input:', first_n=100)", "\n", "# TODO this function needs to return the gt_obj_class and gt_verb_class", "\n", "# TODO this function will update gt_obj_class_l and gt_verb_class_l", "\n", "fc7_O_0", ",", "fc7_O_1", ",", "fc7_V_0", ",", "fc7_V_1", "=", "self", ".", "select_compose_candidate_elements", "(", "fc7_O_0", ",", "fc7_O_1", ",", "fc7_V_0", ",", "fc7_V_1", ",", "\n", "gt_obj_class_l", ",", "gt_verb_class_l", ",", "\n", "type", ")", "\n", "print", "(", "cur_gt_class_HO", ",", "gt_verb_class_l", ",", "type", ")", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_def1'", ")", "and", "not", "is_single", ":", "\n", "# this is similar to the default. This operation will compose relations from the single image.", "\n", "            ", "len", "=", "tf", ".", "maximum", "(", "tf", ".", "shape", "(", "fc7_O_0", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "fc7_O_1", ")", "[", "0", "]", ")", "\n", "fc7_O_0", "=", "fc7_O_0", "[", ":", "len", "]", "\n", "fc7_O_1", "=", "fc7_O_1", "[", ":", "len", "]", "\n", "fc7_V_1", "=", "fc7_V_1", "[", ":", "len", "]", "\n", "fc7_V_0", "=", "fc7_V_0", "[", ":", "len", "]", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "                ", "fc7_O_0", "=", "tf", ".", "Print", "(", "fc7_O_0", ",", "[", "tf", ".", "shape", "(", "fc7_O_0", ")", ",", "tf", ".", "shape", "(", "fc7_O_1", ")", ",", "tf", ".", "shape", "(", "fc7_V_0", ")", ",", "tf", ".", "shape", "(", "fc7_V_1", ")", "]", ",", "'shape c2:'", ",", "first_n", "=", "100", ")", "\n", "\n", "", "gt_obj_class_l", "[", "0", "]", "=", "gt_obj_class_l", "[", "0", "]", "[", ":", "len", "]", "\n", "gt_obj_class_l", "[", "1", "]", "=", "gt_obj_class_l", "[", "1", "]", "[", ":", "len", "]", "\n", "gt_verb_class_l", "[", "0", "]", "=", "gt_verb_class_l", "[", "0", "]", "[", ":", "len", "]", "\n", "gt_verb_class_l", "[", "1", "]", "=", "gt_verb_class_l", "[", "1", "]", "[", ":", "len", "]", "\n", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_def2'", ")", "and", "not", "is_single", ":", "\n", "# do not compose HOIs within HOIs.", "\n", "            ", "len", "=", "tf", ".", "minimum", "(", "tf", ".", "shape", "(", "fc7_O_0", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "fc7_O_1", ")", "[", "0", "]", ")", "\n", "fc7_O_0", "=", "fc7_O_0", "[", ":", "len", "]", "\n", "fc7_O_1", "=", "fc7_O_1", "[", ":", "len", "]", "\n", "fc7_V_1", "=", "fc7_V_1", "[", ":", "len", "]", "\n", "fc7_V_0", "=", "fc7_V_0", "[", ":", "len", "]", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "                ", "fc7_O_0", "=", "tf", ".", "Print", "(", "fc7_O_0", ",", "[", "tf", ".", "shape", "(", "fc7_O_0", ")", ",", "tf", ".", "shape", "(", "fc7_O_1", ")", ",", "tf", ".", "shape", "(", "fc7_V_0", ")", ",", "tf", ".", "shape", "(", "fc7_V_1", ")", "]", ",", "'shape c2:'", ",", "first_n", "=", "100", ")", "\n", "\n", "", "gt_obj_class_l", "[", "0", "]", "=", "gt_obj_class_l", "[", "0", "]", "[", ":", "len", "]", "\n", "gt_obj_class_l", "[", "1", "]", "=", "gt_obj_class_l", "[", "1", "]", "[", ":", "len", "]", "\n", "gt_verb_class_l", "[", "0", "]", "=", "gt_verb_class_l", "[", "0", "]", "[", ":", "len", "]", "\n", "gt_verb_class_l", "[", "1", "]", "=", "gt_verb_class_l", "[", "1", "]", "[", ":", "len", "]", "\n", "print", "(", "gt_verb_class_l", ")", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_def3'", ")", "and", "not", "is_single", ":", "\n", "# tile the short part. When I use tf.tile, it will throw an Exception, which I do not how to fix.", "\n", "# I do not know whether this will affect the performance or not.", "\n", "# In our experiment, this is apparently worse ``def''.", "\n", "            ", "fc7_O_1", "=", "tf", ".", "concat", "(", "[", "fc7_O_1", ",", "fc7_O_1", ",", "fc7_O_1", ",", "fc7_O_1", ",", "fc7_O_1", ",", "fc7_O_1", "]", ",", "axis", "=", "0", ")", "\n", "fc7_V_1", "=", "tf", ".", "concat", "(", "[", "fc7_V_1", ",", "fc7_V_1", ",", "fc7_V_1", ",", "fc7_V_1", ",", "fc7_O_1", ",", "fc7_O_1", "]", ",", "axis", "=", "0", ")", "\n", "gt_obj_class_l", "[", "1", "]", "=", "tf", ".", "concat", "(", "[", "gt_obj_class_l", "[", "1", "]", ",", "gt_obj_class_l", "[", "1", "]", ",", "gt_obj_class_l", "[", "1", "]", ",", "gt_obj_class_l", "[", "1", "]", ",", "\n", "gt_obj_class_l", "[", "1", "]", ",", "gt_obj_class_l", "[", "1", "]", "]", ",", "axis", "=", "0", ")", "\n", "gt_verb_class_l", "[", "1", "]", "=", "tf", ".", "concat", "(", "[", "gt_verb_class_l", "[", "1", "]", ",", "gt_verb_class_l", "[", "1", "]", ",", "gt_verb_class_l", "[", "1", "]", ",", "gt_verb_class_l", "[", "1", "]", ",", "\n", "gt_verb_class_l", "[", "1", "]", ",", "gt_verb_class_l", "[", "1", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "len", "=", "tf", ".", "minimum", "(", "tf", ".", "shape", "(", "fc7_O_0", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "fc7_O_1", ")", "[", "0", "]", ")", "\n", "fc7_O_0", "=", "fc7_O_0", "[", ":", "len", "]", "\n", "fc7_O_1", "=", "fc7_O_1", "[", ":", "len", "]", "\n", "fc7_V_1", "=", "fc7_V_1", "[", ":", "len", "]", "\n", "fc7_V_0", "=", "fc7_V_0", "[", ":", "len", "]", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "                ", "fc7_O_0", "=", "tf", ".", "Print", "(", "fc7_O_0", ",", "[", "tf", ".", "shape", "(", "fc7_O_0", ")", ",", "tf", ".", "shape", "(", "fc7_O_1", ")", ",", "tf", ".", "shape", "(", "fc7_V_0", ")", ",", "tf", ".", "shape", "(", "fc7_V_1", ")", "]", ",", "'shape c2:'", ",", "first_n", "=", "100", ")", "\n", "\n", "", "gt_obj_class_l", "[", "0", "]", "=", "gt_obj_class_l", "[", "0", "]", "[", ":", "len", "]", "\n", "gt_obj_class_l", "[", "1", "]", "=", "gt_obj_class_l", "[", "1", "]", "[", ":", "len", "]", "\n", "gt_verb_class_l", "[", "0", "]", "=", "gt_verb_class_l", "[", "0", "]", "[", ":", "len", "]", "\n", "gt_verb_class_l", "[", "1", "]", "=", "gt_verb_class_l", "[", "1", "]", "[", ":", "len", "]", "\n", "\n", "# just 1 composition", "\n", "", "fc7_O", "=", "tf", ".", "concat", "(", "[", "fc7_O_0", ",", "fc7_O_1", "]", ",", "axis", "=", "0", ")", "\n", "fc7_V", "=", "tf", ".", "concat", "(", "[", "fc7_V_1", ",", "fc7_V_0", "]", ",", "axis", "=", "0", ")", "\n", "gt_obj_class", "=", "tf", ".", "concat", "(", "[", "gt_obj_class_l", "[", "0", "]", ",", "gt_obj_class_l", "[", "1", "]", "]", ",", "axis", "=", "0", ")", "\n", "gt_verb_class", "=", "tf", ".", "concat", "(", "[", "gt_verb_class_l", "[", "1", "]", ",", "gt_verb_class_l", "[", "0", "]", "]", ",", "axis", "=", "0", ")", "\n", "# based on verb,", "\n", "# the composite verb items are same with the original verb items", "\n", "gt_obj_class_orig", "=", "tf", ".", "concat", "(", "[", "gt_obj_class_l", "[", "1", "]", ",", "gt_obj_class_l", "[", "0", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "print", "(", "gt_verb_class", ",", "self", ".", "net", ".", "verb_to_HO_matrix", ")", "\n", "tmp_ho_class_from_obj", "=", "tf", ".", "matmul", "(", "gt_obj_class", ",", "self", ".", "net", ".", "obj_to_HO_matrix", ")", ">", "0", "\n", "tmp_ho_class_from_vb", "=", "tf", ".", "matmul", "(", "gt_verb_class", ",", "self", ".", "net", ".", "verb_to_HO_matrix", ")", ">", "0", "\n", "new_gt_class_HO", "=", "tf", ".", "cast", "(", "tf", ".", "logical_and", "(", "tmp_ho_class_from_obj", ",", "tmp_ho_class_from_vb", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "return", "fc7_O", ",", "fc7_V", ",", "gt_verb_class", ",", "new_gt_class_HO", ",", "gt_obj_class", ",", "gt_obj_class_orig", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.select_composited_hois": [[132, 140], ["tensorflow.ones", "tensorflow.shape"], "methods", ["None"], ["", "def", "select_composited_hois", "(", "self", ",", "fc7_O", ",", "fc7_V", ",", "gt_obj_class", ",", "gt_obj_class_orig", ",", "gt_verb_class", ",", "is_single", ",", "\n", "new_gt_class_HO", ",", "base_compose_item_weights", "=", "None", ")", ":", "\n", "        ", "conds", "=", "None", "\n", "compose_item_weights", "=", "None", "\n", "# select composited hois according to the similarity of objects.", "\n", "if", "compose_item_weights", "is", "None", ":", "\n", "            ", "compose_item_weights", "=", "tf", ".", "ones", "(", "[", "tf", ".", "shape", "(", "fc7_O", ")", "[", "0", "]", "]", ")", "\n", "", "return", "compose_item_weights", ",", "conds", ",", "fc7_O", ",", "fc7_V", ",", "gt_verb_class", ",", "new_gt_class_HO", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.compose_ho_single_images": [[141, 143], ["VCL.VCL.compose_ho_inner"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.compose_ho_inner"], ["", "def", "compose_ho_single_images", "(", "self", ",", "O_features", ",", "V_features", ",", "cur_gt_class_HO", ",", "type", ")", ":", "\n", "        ", "return", "self", ".", "compose_ho_inner", "(", "O_features", ",", "V_features", ",", "cur_gt_class_HO", ",", "type", ",", "is_single", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.select_compose_candidate_elements": [[145, 176], ["VCL.VCL.net.model_name.__contains__", "VCL.VCL.create_new_HO_features_c2", "tensorflow.device", "tensorflow.Print", "type.__contains__", "VCL.VCL.create_new_HO_features", "tensorflow.device", "tensorflow.Print", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.create_new_HO_features_c2", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.create_new_HO_features"], ["", "def", "select_compose_candidate_elements", "(", "self", ",", "fc7_O_0", ",", "fc7_O_1", ",", "fc7_V_0", ",", "fc7_V_1", ",", "gt_obj_class_l", ",", "gt_verb_class_l", ",", "\n", "type", ")", ":", "\n", "        ", "\"\"\"\n        select candidate elements by similarity or other rules.\n        I have tried various kinds of strategies, but I do not find any apparent improvement.\n        :param fc7_O_0:\n        :param fc7_O_1:\n        :param fc7_V_0:\n        :param fc7_V_1:\n        :param gt_obj_class_l:\n        :param gt_verb_class_l:\n        :param type:\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_c2_'", ")", ":", "\n", "# ignore the augmentation data", "\n", "            ", "fc7_O_0", ",", "fc7_O_1", ",", "fc7_V_0", ",", "fc7_V_1", "=", "self", ".", "create_new_HO_features_c2", "(", "fc7_O_0", ",", "fc7_O_1", ",", "fc7_V_0", ",", "fc7_V_1", ",", "\n", "gt_obj_class_l", ",", "gt_verb_class_l", ")", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "                ", "fc7_O_0", "=", "tf", ".", "Print", "(", "fc7_O_0", ",", "\n", "[", "tf", ".", "shape", "(", "fc7_O_0", ")", ",", "tf", ".", "shape", "(", "fc7_O_1", ")", ",", "tf", ".", "shape", "(", "fc7_V_0", ")", ",", "tf", ".", "shape", "(", "fc7_V_1", ")", "]", ",", "\n", "'shape c1:'", ",", "first_n", "=", "100", ")", "\n", "\n", "", "", "elif", "not", "type", ".", "__contains__", "(", "'default'", ")", ":", "# all", "\n", "            ", "fc7_O_0", ",", "fc7_O_1", ",", "fc7_V_0", ",", "fc7_V_1", "=", "self", ".", "create_new_HO_features", "(", "fc7_O_0", ",", "fc7_O_1", ",", "fc7_V_0", ",", "fc7_V_1", ",", "\n", "gt_obj_class_l", ",", "gt_verb_class_l", ")", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "                ", "fc7_O_0", "=", "tf", ".", "Print", "(", "fc7_O_0", ",", "\n", "[", "tf", ".", "shape", "(", "fc7_O_0", ")", ",", "tf", ".", "shape", "(", "fc7_O_1", ")", ",", "tf", ".", "shape", "(", "fc7_V_0", ")", ",", "tf", ".", "shape", "(", "fc7_V_1", ")", "]", ",", "\n", "'shape c1:'", ",", "first_n", "=", "100", ")", "\n", "", "", "return", "fc7_O_0", ",", "fc7_O_1", ",", "fc7_V_0", ",", "fc7_V_1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.get_ll": [[177, 204], ["VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.model_name.__contains__"], "methods", ["None"], ["", "def", "get_ll", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        the super-parameter, 0.5 is best in our experiment. 1.0 is also ok.\n        :return:\n        \"\"\"", "\n", "ll", "=", "1.0", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_ml2_'", ")", ":", "\n", "            ", "ll", "=", "0.2", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_ml5_'", ")", ":", "\n", "            ", "ll", "=", "0.5", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_ml8_'", ")", ":", "\n", "            ", "ll", "=", "0.8", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_ml05_'", ")", ":", "\n", "            ", "ll", "=", "0.05", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_ml01_'", ")", ":", "\n", "            ", "ll", "=", "0.01", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_ml1_'", ")", ":", "\n", "            ", "ll", "=", "0.1", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_ml10_'", ")", ":", "\n", "            ", "ll", "=", "1.", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_ml0_'", ")", ":", "\n", "            ", "ll", "=", "0", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_ml15_'", ")", ":", "\n", "            ", "ll", "=", "1.5", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_ml20_'", ")", ":", "\n", "            ", "ll", "=", "2.", "\n", "", "return", "ll", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.merge_generate": [[205, 334], ["type.__contains__", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.select_composited_hois", "VCL.VCL.conds_zeros", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.cal_loss_with_new_composing_features", "VCL.VCL.compose_ho_all", "VCL.VCL.conds_zeros", "type.__contains__", "print", "VCL.VCL.conds_zeros", "print", "VCL.VCL.conds_zeros", "print", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.constant", "VCL.VCL.net.model_name.__contains__", "tensorflow.cast", "VCL.VCL.compose_ho_between_images", "tensorflow.device", "tensorflow.Print", "tensorflow.device", "tensorflow.Print", "tensorflow.concat", "tensorflow.concat", "VCL.VCL.net.model_name.__contains__", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.logical_and", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.shape", "tensorflow.minimum", "VCL.VCL.net.model_name.__contains__", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.minimum", "VCL.VCL.net.model_name.__contains__", "tensorflow.shape", "tensorflow.shape", "tensorflow.concat", "tensorflow.cast", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.minimum", "tensorflow.shape", "tensorflow.shape", "range", "range", "range", "tensorflow.matmul", "tensorflow.shape", "tensorflow.shape", "tensorflow.concat", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.select_composited_hois", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.conds_zeros", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.cal_loss_with_new_composing_features", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.compose_ho_all", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.conds_zeros", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.conds_zeros", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.conds_zeros", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.compose_ho_between_images"], ["", "def", "merge_generate", "(", "self", ",", "O_features", ",", "V_features", ",", "cur_gt_class_HO", ",", "type", "=", "'default'", ",", "gt_obj_class_list", "=", "None", ")", ":", "\n", "# assert type == 0 or type == 1 or type == 2 or type == 3", "\n", "        ", "compose_item_weights", "=", "1.", "\n", "\n", "if", "type", ".", "__contains__", "(", "'compose_all_hos'", ")", ":", "\n", "            ", "fc7_O", ",", "fc7_V", ",", "gt_obj_class", ",", "gt_obj_class_orig", ",", "gt_verb_class", ",", "new_gt_class_HO", "=", "self", ".", "compose_ho_all", "(", "O_features", ",", "V_features", ",", "\n", "cur_gt_class_HO", ",", "gt_obj_class_list", ")", "\n", "new_gt_class_HO", ",", "fc7_O", ",", "fc7_V", ",", "gt_obj_class", ",", "gt_obj_class_orig", ",", "gt_verb_class", "=", "self", ".", "conds_zeros", "(", "\n", "new_gt_class_HO", ",", "fc7_O", ",", "fc7_V", ",", "gt_obj_class", ",", "gt_obj_class_orig", ",", "gt_verb_class", ")", "\n", "", "elif", "type", ".", "__contains__", "(", "'atl'", ")", ":", "\n", "            ", "print", "(", "'semi ============================================== merge generate'", ")", "\n", "fc7_O", "=", "O_features", "[", "1", "]", "\n", "fc7_V", "=", "V_features", "[", "0", "]", "\n", "gt_obj_class", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "matmul", "(", "cur_gt_class_HO", "[", "1", "]", ",", "self", ".", "net", ".", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "if", "gt_obj_class_list", "is", "not", "None", ":", "\n", "                ", "gt_obj_class", "=", "gt_obj_class_list", "[", "1", "]", "\n", "", "gt_obj_class_orig", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "matmul", "(", "cur_gt_class_HO", "[", "0", "]", ",", "self", ".", "net", ".", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "gt_verb_class", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "matmul", "(", "cur_gt_class_HO", "[", "0", "]", ",", "self", ".", "net", ".", "verb_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "# fc7_O = tf.Print(fc7_O, [tf.shape(fc7_O), tf.shape(fc7_V), tf.shape(gt_obj_class_orig)[0]], 'test:',", "\n", "#                  first_n=200)", "\n", "tile_mul", "=", "tf", ".", "constant", "(", "3.", ")", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_def1'", ")", ":", "\n", "# error this is similar to the default. This operation will compose relations from the single image.", "\n", "                ", "fc7_O", "=", "tf", ".", "concat", "(", "[", "O_features", "[", "1", "]", ",", "O_features", "[", "0", "]", "]", ",", "axis", "=", "0", ")", "\n", "# fc7_O = tf.Print(fc7_O, [tf.shape(fc7_O), tf.shape(fc7_V), tf.shape(gt_obj_class_orig)[0]], 'test:',", "\n", "#                  first_n=200)", "\n", "gt_obj_class", "=", "tf", ".", "concat", "(", "[", "gt_obj_class", ",", "gt_obj_class_orig", "]", ",", "axis", "=", "0", ")", "\n", "length", "=", "tf", ".", "shape", "(", "gt_obj_class_orig", ")", "[", "0", "]", "\n", "gt_obj_class_orig", "=", "gt_obj_class_orig", "[", ":", "length", "]", "\n", "gt_obj_class", "=", "gt_obj_class", "[", ":", "length", "]", "\n", "gt_verb_class", "=", "gt_verb_class", "[", ":", "length", "]", "\n", "fc7_V", "=", "fc7_V", "[", ":", "length", "]", "\n", "fc7_O", "=", "fc7_O", "[", ":", "length", "]", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_def2'", ")", ":", "\n", "# error this is similar to the default. This operation will compose relations from the single image.", "\n", "                ", "length", "=", "tf", ".", "minimum", "(", "tf", ".", "shape", "(", "gt_obj_class", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "gt_obj_class_orig", ")", "[", "0", "]", ")", "\n", "gt_obj_class_orig", "=", "gt_obj_class_orig", "[", ":", "length", "]", "\n", "gt_obj_class", "=", "gt_obj_class", "[", ":", "length", "]", "\n", "gt_verb_class", "=", "gt_verb_class", "[", ":", "length", "]", "\n", "fc7_V", "=", "fc7_V", "[", ":", "length", "]", "\n", "fc7_O", "=", "fc7_O", "[", ":", "length", "]", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_def3'", ")", ":", "\n", "# tile_mul = tf.ceil(tf.shape(O_features[1])[0] / tf.shape(V_features[1])[0])", "\n", "# tile_mul = 10", "\n", "# gt_verb_class = tf.tile(gt_verb_class, [tile_mul, 1])", "\n", "# gt_obj_class_orig = tf.tile(gt_obj_class_orig, [tile_mul, 1])", "\n", "# fc7_V = tf.tile(fc7_V, [tile_mul, 1])", "\n", "                ", "gt_verb_class", "=", "tf", ".", "concat", "(", "[", "gt_verb_class", "for", "i", "in", "range", "(", "3", ")", "]", ",", "axis", "=", "0", ")", "\n", "gt_obj_class_orig", "=", "tf", ".", "concat", "(", "[", "gt_obj_class_orig", "for", "i", "in", "range", "(", "3", ")", "]", ",", "axis", "=", "0", ")", "\n", "fc7_V", "=", "tf", ".", "concat", "(", "[", "fc7_V", "for", "i", "in", "range", "(", "3", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "length", "=", "tf", ".", "minimum", "(", "tf", ".", "shape", "(", "gt_obj_class", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "gt_obj_class_orig", ")", "[", "0", "]", ")", "\n", "gt_obj_class_orig", "=", "gt_obj_class_orig", "[", ":", "length", "]", "\n", "gt_obj_class", "=", "gt_obj_class", "[", ":", "length", "]", "\n", "gt_verb_class", "=", "gt_verb_class", "[", ":", "length", "]", "\n", "fc7_V", "=", "fc7_V", "[", ":", "length", "]", "\n", "fc7_O", "=", "fc7_O", "[", ":", "length", "]", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_def4'", ")", ":", "\n", "# tile_mul = tf.ceil(tf.shape(O_features[1])[0] / tf.shape(V_features[1])[0])", "\n", "# tile_mul = 10", "\n", "# gt_verb_class = tf.tile(gt_verb_class, [tile_mul, 1])", "\n", "# gt_obj_class_orig = tf.tile(gt_obj_class_orig, [tile_mul, 1])", "\n", "# fc7_V = tf.tile(fc7_V, [tile_mul, 1])", "\n", "                ", "fc7_O", "=", "tf", ".", "concat", "(", "[", "O_features", "[", "1", "]", ",", "O_features", "[", "0", "]", "]", ",", "axis", "=", "0", ")", "\n", "# fc7_O = tf.Print(fc7_O, [tf.shape(fc7_O), tf.shape(fc7_V), tf.shape(gt_obj_class_orig)[0]], 'test:',", "\n", "#                  first_n=200)", "\n", "gt_obj_class", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "matmul", "(", "tf", ".", "concat", "(", "[", "cur_gt_class_HO", "[", "1", "]", ",", "cur_gt_class_HO", "[", "0", "]", "]", ",", "axis", "=", "0", ")", ",", "\n", "self", ".", "net", ".", "obj_to_HO_matrix", ",", "\n", "transpose_b", "=", "True", ")", ">", "0", ",", "tf", ".", "float32", ")", "\n", "\n", "gt_verb_class", "=", "tf", ".", "concat", "(", "[", "gt_verb_class", "for", "i", "in", "range", "(", "10", ")", "]", ",", "axis", "=", "0", ")", "\n", "gt_obj_class_orig", "=", "tf", ".", "concat", "(", "[", "gt_obj_class_orig", "for", "i", "in", "range", "(", "10", ")", "]", ",", "axis", "=", "0", ")", "\n", "fc7_V", "=", "tf", ".", "concat", "(", "[", "fc7_V", "for", "i", "in", "range", "(", "10", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "length", "=", "tf", ".", "minimum", "(", "tf", ".", "shape", "(", "gt_obj_class", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "gt_obj_class_orig", ")", "[", "0", "]", ")", "\n", "gt_obj_class_orig", "=", "gt_obj_class_orig", "[", ":", "length", "]", "\n", "gt_obj_class", "=", "gt_obj_class", "[", ":", "length", "]", "\n", "gt_verb_class", "=", "gt_verb_class", "[", ":", "length", "]", "\n", "fc7_V", "=", "fc7_V", "[", ":", "length", "]", "\n", "fc7_O", "=", "fc7_O", "[", ":", "length", "]", "\n", "\n", "", "tmp_ho_class_from_obj", "=", "tf", ".", "matmul", "(", "gt_obj_class", ",", "self", ".", "net", ".", "obj_to_HO_matrix", ")", ">", "0", "\n", "tmp_ho_class_from_vb", "=", "tf", ".", "matmul", "(", "gt_verb_class", ",", "self", ".", "net", ".", "verb_to_HO_matrix", ")", ">", "0", "\n", "new_gt_class_HO", "=", "tf", ".", "cast", "(", "tf", ".", "logical_and", "(", "tmp_ho_class_from_obj", ",", "tmp_ho_class_from_vb", ")", ",", "tf", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "fc7_O", ",", "fc7_V", ",", "gt_verb_class", ",", "new_gt_class_HO", ",", "gt_obj_class", ",", "gt_obj_class_orig", "=", "self", ".", "compose_ho_between_images", "(", "\n", "O_features", ",", "V_features", ",", "\n", "cur_gt_class_HO", ",", "type", ")", "\n", "\n", "", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'atl1'", ")", ":", "\n", "            ", "print", "(", "'semi1====='", ",", "fc7_O", ",", "fc7_V", ")", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "                ", "new_gt_class_HO", "=", "tf", ".", "Print", "(", "new_gt_class_HO", ",", "[", "tf", ".", "shape", "(", "fc7_O", ")", ",", "tf", ".", "shape", "(", "fc7_V", ")", ",", "tf", ".", "shape", "(", "gt_verb_class", ")", ",", "tf", ".", "shape", "(", "new_gt_class_HO", ")", "]", ",", "'semi1 before:'", ",", "first_n", "=", "100", ")", "\n", "\n", "", "fc7_V", ",", "fc7_O", ",", "new_gt_class_HO", ",", "gt_obj_class", ",", "gt_obj_class_orig", ",", "gt_verb_class", "=", "self", ".", "conds_zeros", "(", "\n", "fc7_V", ",", "fc7_O", ",", "new_gt_class_HO", ",", "gt_obj_class", ",", "gt_obj_class_orig", ",", "gt_verb_class", ")", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "                ", "new_gt_class_HO", "=", "tf", ".", "Print", "(", "new_gt_class_HO", ",", "[", "tf", ".", "shape", "(", "fc7_O", ")", ",", "tf", ".", "shape", "(", "fc7_V", ")", ",", "tf", ".", "shape", "(", "gt_verb_class", ")", ",", "tf", ".", "shape", "(", "new_gt_class_HO", ")", "]", ",", "'semi1 after:'", ",", "first_n", "=", "100", ")", "\n", "\n", "", "", "compose_item_weights", ",", "conds", ",", "fc7_O", ",", "fc7_V", ",", "gt_verb_class", ",", "new_gt_class_HO", "=", "self", ".", "select_composited_hois", "(", "\n", "fc7_O", ",", "\n", "fc7_V", ",", "\n", "gt_obj_class", ",", "\n", "gt_obj_class_orig", ",", "\n", "gt_verb_class", ",", "\n", "False", ",", "\n", "new_gt_class_HO", ",", "\n", "base_compose_item_weights", "=", "compose_item_weights", ")", "\n", "\n", "new_gt_class_HO", ",", "compose_item_weights", ",", "fc7_O", ",", "fc7_V", ",", "gt_obj_class", ",", "gt_obj_class_orig", ",", "gt_verb_class", "=", "self", ".", "conds_zeros", "(", "\n", "new_gt_class_HO", ",", "compose_item_weights", ",", "fc7_O", ",", "fc7_V", ",", "gt_obj_class", ",", "gt_obj_class_orig", ",", "gt_verb_class", ")", "\n", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'atl1'", ")", ":", "\n", "            ", "print", "(", "'semi1====='", ",", "fc7_O", ",", "fc7_V", ")", "\n", "fc7_V", ",", "fc7_O", ",", "gt_verb_class", ",", "new_gt_class_HO", ",", "compose_item_weights", "=", "self", ".", "conds_zeros", "(", "fc7_V", ",", "fc7_O", ",", "gt_verb_class", ",", "new_gt_class_HO", ",", "compose_item_weights", ")", "\n", "\n", "", "new_loss", "=", "self", ".", "cal_loss_with_new_composing_features", "(", "fc7_O", ",", "fc7_V", ",", "gt_verb_class", ",", "new_gt_class_HO", ",", "type", ",", "\n", "compose_item_weights", "=", "compose_item_weights", ",", "\n", "orig_len", "=", "tf", ".", "shape", "(", "O_features", "[", "0", "]", ")", "[", "0", "]", "+", "tf", ".", "shape", "(", "O_features", "[", "1", "]", ")", "[", "0", "]", ")", "\n", "\n", "return", "new_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.conds_zeros": [[337, 350], ["print", "tensorflow.boolean_mask", "tensorflow.reduce_sum", "tensorflow.abs", "tensorflow.boolean_mask", "result.append", "result.append"], "methods", ["None"], ["", "def", "conds_zeros", "(", "self", ",", "new_gt_class_HO", ",", "*", "args", ")", ":", "\n", "\n", "        ", "label_conds", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "new_gt_class_HO", ")", ",", "axis", "=", "-", "1", ")", ">", "0", "\n", "print", "(", "label_conds", ",", "new_gt_class_HO", ")", "\n", "new_gt_class_HO", "=", "tf", ".", "boolean_mask", "(", "new_gt_class_HO", ",", "label_conds", ",", "axis", "=", "0", ")", "\n", "result", "=", "[", "new_gt_class_HO", "]", "\n", "for", "item", "in", "args", ":", "\n", "            ", "if", "item", "is", "not", "None", ":", "\n", "                ", "item", "=", "tf", ".", "boolean_mask", "(", "item", ",", "label_conds", ",", "axis", "=", "0", ")", "\n", "result", ".", "append", "(", "item", ")", "\n", "", "else", ":", "\n", "                ", "result", ".", "append", "(", "item", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.cal_loss_with_new_composing_features": [[351, 405], ["VCL.VCL.net.model_name.__contains__", "loss_func", "tensorflow.device", "tensorflow.Print", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.head_to_tail_ho", "VCL.VCL.net.region_classification_ho", "VCL.VCL.net.head_to_tail_ho", "VCL.VCL.net.region_classification_ho", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.model_name.__contains__", "tensorflow.matmul", "tensorflow.multiply", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.model_name.__contains__", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.multiply", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.model_name.__contains__", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "ult.ult.get_zero_shot_type", "ult.ult.get_unseen_index", "np.asarray().reshape", "new_HO_weight.reshape.reshape.reshape", "tensorflow.multiply", "np.asarray"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.head_to_tail_ho", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.region_classification_ho", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.head_to_tail_ho", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.region_classification_ho", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_zero_shot_type", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_unseen_index"], ["", "def", "cal_loss_with_new_composing_features", "(", "self", ",", "fc7_O", ",", "fc7_V", ",", "gt_verb_class", ",", "new_gt_class_HO", ",", "type", ",", "compose_item_weights", "=", "None", ",", "orig_len", "=", "50", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "new_gt_class_HO", "=", "tf", ".", "Print", "(", "new_gt_class_HO", ",", "[", "tf", ".", "shape", "(", "fc7_O", ")", ",", "tf", ".", "shape", "(", "fc7_V", ")", ",", "tf", ".", "shape", "(", "new_gt_class_HO", ")", "]", ",", "\n", "'1message:'", ",", "first_n", "=", "100", ")", "\n", "", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'VCOCO'", ")", "and", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'t3'", ")", ":", "\n", "            ", "fc7_vo", "=", "self", ".", "net", ".", "head_to_tail_ho", "(", "fc7_O", ",", "fc7_V", ",", "None", ",", "None", ",", "True", ",", "'fc_HO_vcoco'", ")", "\n", "orig_num_classes", "=", "self", ".", "net", ".", "num_classes", "\n", "self", ".", "net", ".", "num_classes", "=", "self", ".", "net", ".", "compose_num_classes", "\n", "self", ".", "net", ".", "region_classification_ho", "(", "fc7_vo", ",", "True", ",", "tf", ".", "random_normal_initializer", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.01", ")", ",", "\n", "'classification_aux'", ",", "nameprefix", "=", "'merge_'", ")", "\n", "self", ".", "net", ".", "num_classes", "=", "orig_num_classes", "\n", "", "else", ":", "\n", "            ", "fc7_vo", "=", "self", ".", "net", ".", "head_to_tail_ho", "(", "fc7_O", ",", "fc7_V", ",", "None", ",", "None", ",", "True", ",", "'fc_HO'", ")", "\n", "self", ".", "net", ".", "region_classification_ho", "(", "fc7_vo", ",", "True", ",", "tf", ".", "random_normal_initializer", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.01", ")", ",", "\n", "'classification'", ",", "nameprefix", "=", "'merge_'", ")", "\n", "", "cls_score_verbs", "=", "self", ".", "net", ".", "predictions", "[", "\"merge_cls_score_hoi\"", "]", "\n", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'VCOCO'", ")", "and", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'t3'", ")", ":", "\n", "            ", "reweights", "=", "tf", ".", "matmul", "(", "self", ".", "net", ".", "HO_weight", ",", "self", ".", "net", ".", "verb_to_HO_matrix", ")", "\n", "", "else", ":", "\n", "            ", "reweights", "=", "self", ".", "net", ".", "HO_weight", "\n", "\n", "", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'rew1'", ")", ":", "\n", "# this means that we also apply the reweight strategy for the generated HO relation", "\n", "            ", "cls_score_verbs", "=", "tf", ".", "multiply", "(", "self", ".", "net", ".", "predictions", "[", "\"merge_cls_score_hoi\"", "]", ",", "reweights", ")", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'rew2'", ")", ":", "\n", "# this means that we also apply the reweight strategy for the generated HO relation", "\n", "# TODO I simply and empirically set the weights for VCL. I think there should be a better solution.", "\n", "#  Noticeably, our method is orthogonal to re-weighting strategy.", "\n", "#  Moreover, completely copying from previous work, we multiply the weights at the logits.", "\n", "#  I think this is also an important reason why baseline of zero-shot has some values!", "\n", "#  This can help the network learn from the known factors (i.e. verb and object)", "\n", "#  It might be because the non-linear sigmoid function.", "\n", "#  After this kind of re-weighting, the small value (e.g. 0.1) will further tend 0 where the gradient", "\n", "#  is larger. It is interesting! We do not mention this in paper since our method is orthogonal to this.", "\n", "#  But I do not understand the reason very good. Hope someone can explain.", "\n", "            ", "cls_score_verbs", "=", "tf", ".", "multiply", "(", "self", ".", "net", ".", "predictions", "[", "\"merge_cls_score_hoi\"", "]", ",", "reweights", "/", "10", ")", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_rew51'", ")", ":", "\n", "# this is for zero-shot, we simply emphasize the weights of zero-shot categories.", "\n", "            ", "zero_shot_type", "=", "get_zero_shot_type", "(", "self", ".", "net", ".", "model_name", ")", "\n", "unseen_idx", "=", "get_unseen_index", "(", "zero_shot_type", ")", "\n", "import", "numpy", "as", "np", "\n", "new_HO_weight", "=", "np", ".", "asarray", "(", "self", ".", "net", ".", "HO_weight", ")", ".", "reshape", "(", "-", "1", ")", "\n", "# use the maximum value for the weight of unseen HOIs", "\n", "new_HO_weight", "[", "unseen_idx", "]", "=", "20.", "\n", "new_HO_weight", "=", "new_HO_weight", ".", "reshape", "(", "1", ",", "600", ")", "\n", "cls_score_verbs", "=", "tf", ".", "multiply", "(", "self", ".", "net", ".", "predictions", "[", "\"merge_cls_score_hoi\"", "]", ",", "\n", "new_HO_weight", "/", "10", ")", "\n", "", "if", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'VCOCO'", ")", "and", "(", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_t1_'", ")", "\n", "or", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'_t2_'", ")", ")", ":", "\n", "            ", "loss_func", "=", "self", ".", "calculate_loss_by_removing_useless_coco", "\n", "", "else", ":", "\n", "            ", "loss_func", "=", "self", ".", "calculate_loss_by_removing_useless", "\n", "", "new_loss", "=", "loss_func", "(", "cls_score_verbs", ",", "new_gt_class_HO", ",", "weights", "=", "compose_item_weights", ")", "\n", "return", "new_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.compose_ho_all": [[407, 415], ["tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "VCL.VCL.compose_ho_all_inner"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.compose_ho_all_inner"], ["", "def", "compose_ho_all", "(", "self", ",", "O_features", ",", "V_features", ",", "cur_gt_class_HO", ")", ":", "\n", "\n", "        ", "_fc7_O", "=", "tf", ".", "concat", "(", "[", "O_features", "[", "0", "]", ",", "O_features", "[", "1", "]", "]", ",", "axis", "=", "0", ")", "\n", "_fc7_V", "=", "tf", ".", "concat", "(", "[", "V_features", "[", "0", "]", ",", "V_features", "[", "1", "]", "]", ",", "axis", "=", "0", ")", "\n", "_gt_class_HO", "=", "tf", ".", "concat", "(", "[", "cur_gt_class_HO", "[", "0", "]", ",", "cur_gt_class_HO", "[", "1", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "fc7_O", ",", "fc7_V", ",", "gt_obj_class", ",", "gt_obj_class_orig", ",", "gt_verb_class", ",", "new_gt_class_HO", "=", "self", ".", "compose_ho_all_inner", "(", "_fc7_O", ",", "_fc7_V", ",", "_gt_class_HO", ")", "\n", "return", "fc7_O", ",", "fc7_V", ",", "gt_obj_class", ",", "gt_obj_class_orig", ",", "gt_verb_class", ",", "new_gt_class_HO", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.compose_ho_all_inner": [[417, 462], ["tensorflow.cast", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.device", "tensorflow.Print", "VCL.VCL.net.model_name.__contains__", "VCL.VCL.net.model_name.__contains__", "tensorflow.shape", "tensorflow.shape", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "compose_ho_all_inner", "(", "self", ",", "fc7_O", ",", "fc7_V", ",", "gt_class_HO", ")", ":", "\n", "        ", "_fc7_O", "=", "fc7_O", "\n", "gt_obj_class", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "matmul", "(", "gt_class_HO", ",", "self", ".", "net", ".", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "gt_obj_class_orig", "=", "gt_obj_class", "\n", "gt_verb_class", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "matmul", "(", "gt_class_HO", ",", "self", ".", "net", ".", "verb_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "last_obj_dim", "=", "2048", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "fc7_V", "=", "tf", ".", "Print", "(", "fc7_V", ",", "\n", "[", "tf", ".", "shape", "(", "fc7_V", ")", "]", ",", "\n", "'fc7_V================:'", ",", "first_n", "=", "100", ")", "\n", "", "if", "not", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'pose'", ")", ":", "\n", "            ", "last_vb_dim", "=", "2048", "\n", "", "elif", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'posesp'", ")", ":", "\n", "            ", "last_vb_dim", "=", "7456", "\n", "", "else", ":", "\n", "            ", "last_vb_dim", "=", "tf", ".", "shape", "(", "fc7_V", ")", "[", "-", "1", "]", "\n", "", "shape_O", "=", "tf", ".", "shape", "(", "fc7_O", ")", "[", "0", "]", "\n", "shape_V", "=", "tf", ".", "shape", "(", "fc7_V", ")", "[", "0", "]", "\n", "fc7_O", "=", "tf", ".", "expand_dims", "(", "fc7_O", ",", "dim", "=", "0", ")", "\n", "fc7_V", "=", "tf", ".", "expand_dims", "(", "fc7_V", ",", "dim", "=", "1", ")", "\n", "fc7_O", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "fc7_O", ",", "[", "shape_V", ",", "1", ",", "1", "]", ")", ",", "\n", "[", "shape_V", "*", "shape_O", ",", "last_obj_dim", "]", ")", "\n", "fc7_V", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "fc7_V", ",", "[", "1", ",", "shape_O", ",", "1", "]", ")", ",", "\n", "[", "shape_V", "*", "shape_O", ",", "last_vb_dim", "]", ")", "\n", "gt_obj_class", "=", "tf", ".", "expand_dims", "(", "gt_obj_class", ",", "dim", "=", "0", ")", "\n", "gt_verb_class", "=", "tf", ".", "expand_dims", "(", "gt_verb_class", ",", "dim", "=", "1", ")", "\n", "gt_obj_class_orig", "=", "tf", ".", "expand_dims", "(", "gt_obj_class_orig", ",", "dim", "=", "1", ")", "\n", "gt_obj_class", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "gt_obj_class", ",", "[", "shape_V", ",", "1", ",", "1", "]", ")", ",", "\n", "[", "shape_V", "*", "shape_O", ",", "\n", "self", ".", "net", ".", "obj_num_classes", "]", ")", "\n", "gt_verb_class", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "gt_verb_class", ",", "[", "1", ",", "shape_O", ",", "1", "]", ")", ",", "\n", "[", "shape_V", "*", "shape_O", ",", "\n", "self", ".", "net", ".", "verb_num_classes", "]", ")", "\n", "gt_obj_class_orig", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "gt_obj_class_orig", ",", "[", "1", ",", "shape_O", ",", "1", "]", ")", ",", "\n", "[", "shape_V", "*", "shape_O", ",", "\n", "self", ".", "net", ".", "obj_num_classes", "]", ")", "\n", "tmp_ho_class_from_obj", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "gt_obj_class", ",", "self", ".", "net", ".", "obj_to_HO_matrix", ")", ">", "0", ",", "tf", ".", "float32", ")", "\n", "tmp_ho_class_from_vb", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "gt_verb_class", ",", "self", ".", "net", ".", "verb_to_HO_matrix", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "new_gt_class_HO", "=", "tf", ".", "cast", "(", "tmp_ho_class_from_obj", "+", "tmp_ho_class_from_vb", ">", "1.", ",", "tf", ".", "float32", ")", "\n", "return", "fc7_O", ",", "fc7_V", ",", "gt_obj_class", ",", "gt_obj_class_orig", ",", "gt_verb_class", ",", "new_gt_class_HO", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.create_new_HO_features": [[463, 501], ["tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "VCL.VCL.net.model_name.__contains__", "tensorflow.shape", "tensorflow.shape", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.shape"], "methods", ["None"], ["", "def", "create_new_HO_features", "(", "self", ",", "fc7_O_0", ",", "fc7_O_1", ",", "fc7_V_0", ",", "fc7_V_1", ",", "gt_obj_class_l", ",", "gt_verb_class_l", ")", ":", "\n", "        ", "last_obj_dim", "=", "2048", "\n", "\n", "if", "not", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'pose'", ")", ":", "\n", "            ", "last_vb_dim", "=", "2048", "\n", "", "else", ":", "\n", "            ", "last_vb_dim", "=", "tf", ".", "shape", "(", "fc7_V_0", ")", "[", "-", "1", "]", "\n", "", "shape_0", "=", "tf", ".", "shape", "(", "fc7_O_0", ")", "[", "0", "]", "\n", "shape_1", "=", "tf", ".", "shape", "(", "fc7_O_1", ")", "[", "0", "]", "\n", "fc7_O_0", "=", "tf", ".", "expand_dims", "(", "fc7_O_0", ",", "dim", "=", "0", ")", "\n", "fc7_V_0", "=", "tf", ".", "expand_dims", "(", "fc7_V_0", ",", "dim", "=", "0", ")", "\n", "fc7_O_1", "=", "tf", ".", "expand_dims", "(", "fc7_O_1", ",", "dim", "=", "1", ")", "\n", "fc7_V_1", "=", "tf", ".", "expand_dims", "(", "fc7_V_1", ",", "dim", "=", "1", ")", "\n", "fc7_O_0", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "fc7_O_0", ",", "[", "shape_1", ",", "1", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", ",", "last_obj_dim", "]", ")", "\n", "fc7_V_1", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "fc7_V_1", ",", "[", "1", ",", "shape_0", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", ",", "last_vb_dim", "]", ")", "\n", "fc7_O_1", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "fc7_O_1", ",", "[", "1", ",", "shape_0", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", ",", "last_obj_dim", "]", ")", "\n", "fc7_V_0", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "fc7_V_0", ",", "[", "shape_1", ",", "1", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", ",", "last_vb_dim", "]", ")", "\n", "gt_obj_class_l", "[", "0", "]", "=", "tf", ".", "expand_dims", "(", "gt_obj_class_l", "[", "0", "]", ",", "dim", "=", "0", ")", "\n", "gt_verb_class_l", "[", "0", "]", "=", "tf", ".", "expand_dims", "(", "gt_verb_class_l", "[", "0", "]", ",", "dim", "=", "0", ")", "\n", "gt_obj_class_l", "[", "1", "]", "=", "tf", ".", "expand_dims", "(", "gt_obj_class_l", "[", "1", "]", ",", "dim", "=", "1", ")", "\n", "gt_verb_class_l", "[", "1", "]", "=", "tf", ".", "expand_dims", "(", "gt_verb_class_l", "[", "1", "]", ",", "dim", "=", "1", ")", "\n", "gt_obj_class_l", "[", "0", "]", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "gt_obj_class_l", "[", "0", "]", ",", "[", "shape_1", ",", "1", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", ",", "\n", "80", "]", ")", "\n", "gt_verb_class_l", "[", "1", "]", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "gt_verb_class_l", "[", "1", "]", ",", "[", "1", ",", "shape_0", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", ",", "\n", "117", "]", ")", "\n", "gt_obj_class_l", "[", "1", "]", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "gt_obj_class_l", "[", "1", "]", ",", "[", "1", ",", "shape_0", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", ",", "\n", "80", "]", ")", "\n", "gt_verb_class_l", "[", "0", "]", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "gt_verb_class_l", "[", "0", "]", ",", "[", "shape_1", ",", "1", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", ",", "\n", "117", "]", ")", "\n", "return", "fc7_O_0", ",", "fc7_O_1", ",", "fc7_V_0", ",", "fc7_V_1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.create_new_HO_features_c2": [[503, 563], ["ult.ult.get_augment_type", "ult.ult.get_aug_params", "print", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "VCL.VCL.net.model_name.__contains__", "tensorflow.shape", "tensorflow.shape", "tensorflow.device", "tensorflow.Print", "tensorflow.shape", "tensorflow.shape", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_augment_type", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.get_aug_params"], ["", "def", "create_new_HO_features_c2", "(", "self", ",", "fc7_O_0", ",", "fc7_O_1", ",", "fc7_V_0", ",", "fc7_V_1", ",", "gt_obj_class_l", ",", "gt_verb_class_l", ")", ":", "\n", "        ", "last_obj_dim", "=", "2048", "\n", "\n", "augment_type", "=", "get_augment_type", "(", "self", ".", "net", ".", "model_name", ")", "\n", "Neg_select1", ",", "Pos_augment1", ",", "inters_per_img", "=", "get_aug_params", "(", "0", ",", "0", ",", "augment_type", ")", "\n", "per_aug_nums", "=", "Pos_augment1", "+", "1", "\n", "if", "not", "self", ".", "net", ".", "model_name", ".", "__contains__", "(", "'pose'", ")", ":", "\n", "            ", "last_vb_dim", "=", "2048", "\n", "", "else", ":", "\n", "            ", "last_vb_dim", "=", "tf", ".", "shape", "(", "fc7_V_0", ")", "[", "-", "1", "]", "\n", "", "shape_0", "=", "tf", ".", "shape", "(", "fc7_O_0", ")", "[", "0", "]", "\n", "shape_1", "=", "tf", ".", "shape", "(", "fc7_O_1", ")", "[", "0", "]", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "fc7_O_0", "=", "tf", ".", "Print", "(", "fc7_O_0", ",", "[", "tf", ".", "shape", "(", "fc7_O_0", ")", ",", "tf", ".", "shape", "(", "fc7_O_1", ")", ",", "tf", ".", "shape", "(", "fc7_O_1", ")", "]", ",", "\n", "'2message:'", ",", "first_n", "=", "100", ")", "\n", "", "print", "(", "fc7_O_0", ",", "per_aug_nums", ",", "augment_type", ",", "'-----------------debug---------------'", ")", "\n", "fc7_O_0", "=", "tf", ".", "reshape", "(", "fc7_O_0", ",", "[", "shape_0", "//", "per_aug_nums", ",", "per_aug_nums", ",", "last_obj_dim", "]", ")", "\n", "fc7_O_1", "=", "tf", ".", "reshape", "(", "fc7_O_1", ",", "[", "shape_1", "//", "per_aug_nums", ",", "per_aug_nums", ",", "last_obj_dim", "]", ")", "\n", "\n", "fc7_V_0", "=", "tf", ".", "reshape", "(", "fc7_V_0", ",", "[", "shape_0", "//", "per_aug_nums", ",", "per_aug_nums", ",", "last_vb_dim", "]", ")", "\n", "fc7_V_1", "=", "tf", ".", "reshape", "(", "fc7_V_1", ",", "[", "shape_1", "//", "per_aug_nums", ",", "per_aug_nums", ",", "last_vb_dim", "]", ")", "\n", "\n", "gt_obj_class_l", "[", "0", "]", "=", "tf", ".", "reshape", "(", "gt_obj_class_l", "[", "0", "]", ",", "[", "shape_0", "//", "per_aug_nums", ",", "per_aug_nums", ",", "80", "]", ")", "\n", "gt_obj_class_l", "[", "1", "]", "=", "tf", ".", "reshape", "(", "gt_obj_class_l", "[", "1", "]", ",", "[", "shape_1", "//", "per_aug_nums", ",", "per_aug_nums", ",", "80", "]", ")", "\n", "\n", "gt_verb_class_l", "[", "0", "]", "=", "tf", ".", "reshape", "(", "gt_verb_class_l", "[", "0", "]", ",", "[", "shape_0", "//", "per_aug_nums", ",", "per_aug_nums", ",", "117", "]", ")", "\n", "gt_verb_class_l", "[", "1", "]", "=", "tf", ".", "reshape", "(", "gt_verb_class_l", "[", "1", "]", ",", "[", "shape_1", "//", "per_aug_nums", ",", "per_aug_nums", ",", "117", "]", ")", "\n", "\n", "shape_0", "=", "tf", ".", "shape", "(", "fc7_O_0", ")", "[", "0", "]", "\n", "shape_1", "=", "tf", ".", "shape", "(", "fc7_O_1", ")", "[", "0", "]", "\n", "\n", "fc7_O_0", "=", "tf", ".", "expand_dims", "(", "fc7_O_0", ",", "dim", "=", "0", ")", "\n", "fc7_V_0", "=", "tf", ".", "expand_dims", "(", "fc7_V_0", ",", "dim", "=", "0", ")", "\n", "fc7_O_1", "=", "tf", ".", "expand_dims", "(", "fc7_O_1", ",", "dim", "=", "1", ")", "\n", "fc7_V_1", "=", "tf", ".", "expand_dims", "(", "fc7_V_1", ",", "dim", "=", "1", ")", "\n", "fc7_O_0", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "fc7_O_0", ",", "[", "shape_1", ",", "1", ",", "1", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", "*", "per_aug_nums", ",", "last_obj_dim", "]", ")", "\n", "fc7_V_1", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "fc7_V_1", ",", "[", "1", ",", "shape_0", ",", "1", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", "*", "per_aug_nums", ",", "last_vb_dim", "]", ")", "\n", "fc7_O_1", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "fc7_O_1", ",", "[", "1", ",", "shape_0", ",", "1", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", "*", "per_aug_nums", ",", "last_obj_dim", "]", ")", "\n", "fc7_V_0", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "fc7_V_0", ",", "[", "shape_1", ",", "1", ",", "1", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", "*", "per_aug_nums", ",", "last_vb_dim", "]", ")", "\n", "gt_obj_class_l", "[", "0", "]", "=", "tf", ".", "expand_dims", "(", "gt_obj_class_l", "[", "0", "]", ",", "dim", "=", "0", ")", "\n", "gt_verb_class_l", "[", "0", "]", "=", "tf", ".", "expand_dims", "(", "gt_verb_class_l", "[", "0", "]", ",", "dim", "=", "0", ")", "\n", "gt_obj_class_l", "[", "1", "]", "=", "tf", ".", "expand_dims", "(", "gt_obj_class_l", "[", "1", "]", ",", "dim", "=", "1", ")", "\n", "gt_verb_class_l", "[", "1", "]", "=", "tf", ".", "expand_dims", "(", "gt_verb_class_l", "[", "1", "]", ",", "dim", "=", "1", ")", "\n", "gt_obj_class_l", "[", "0", "]", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "gt_obj_class_l", "[", "0", "]", ",", "[", "shape_1", ",", "1", ",", "1", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", "*", "per_aug_nums", ",", "\n", "80", "]", ")", "\n", "gt_verb_class_l", "[", "1", "]", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "gt_verb_class_l", "[", "1", "]", ",", "[", "1", ",", "shape_0", ",", "1", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", "*", "per_aug_nums", ",", "\n", "117", "]", ")", "\n", "gt_obj_class_l", "[", "1", "]", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "gt_obj_class_l", "[", "1", "]", ",", "[", "1", ",", "shape_0", ",", "1", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", "*", "per_aug_nums", ",", "\n", "80", "]", ")", "\n", "gt_verb_class_l", "[", "0", "]", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "gt_verb_class_l", "[", "0", "]", ",", "[", "shape_1", ",", "1", ",", "1", ",", "1", "]", ")", ",", "\n", "[", "shape_1", "*", "shape_0", "*", "per_aug_nums", ",", "\n", "117", "]", ")", "\n", "return", "fc7_O_0", ",", "fc7_O_1", ",", "fc7_V_0", ",", "fc7_V_1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.calculate_loss_by_removing_useless": [[564, 572], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "print", "tensorflow.multiply"], "methods", ["None"], ["", "def", "calculate_loss_by_removing_useless", "(", "self", ",", "cls_score_verbs", ",", "new_gt_class_HO", ",", "weights", "=", "None", ")", ":", "\n", "        ", "tmp", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "new_gt_class_HO", ",", "logits", "=", "cls_score_verbs", ")", ",", "axis", "=", "-", "1", ")", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "print", "(", "'calculate_loss_by_removing_useless======= not none'", ")", "\n", "tmp", "=", "tf", ".", "multiply", "(", "tmp", ",", "weights", ")", "\n", "", "new_loss", "=", "tf", ".", "reduce_mean", "(", "tmp", ")", "\n", "return", "new_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.calculate_loss_by_removing_useless_coco": [[573, 584], ["tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.matmul"], "methods", ["None"], ["", "def", "calculate_loss_by_removing_useless_coco", "(", "self", ",", "cls_score_verbs", ",", "new_gt_class_HO", ",", "weights", "=", "None", ")", ":", "\n", "        ", "new_gt_class_verbs", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "matmul", "(", "new_gt_class_HO", ",", "self", ".", "net", ".", "verb_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "tmp", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "new_gt_class_verbs", ",", "logits", "=", "cls_score_verbs", ")", ",", "axis", "=", "-", "1", ")", "\n", "new_loss", "=", "tf", ".", "reduce_mean", "(", "tmp", ")", "\n", "# with tf.device('/cpu:0'):", "\n", "#     new_loss = tf.Print(new_loss, [tf.shape(O_features[0]), tf.shape(new_gt_class_HO), new_loss, entropy1],", "\n", "#                            'after message:', first_n=10000)", "\n", "return", "new_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.VCL.VCL.get_compose_type": [[585, 589], ["None"], "methods", ["None"], ["", "def", "get_compose_type", "(", "self", ")", ":", "\n", "        ", "compose_type", "=", "'default'", "# 0", "\n", "\n", "return", "compose_type", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.__init__": [[44, 55], ["parent_model.__init__", "networks.Fabricator.Fabricator"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_name", "=", "'VCL_union_multi_ml5_def1_l2_rew2_aug5_3_x5new_res101'", ")", ":", "\n", "        ", "super", "(", "HOI", ",", "self", ")", ".", "__init__", "(", "model_name", ")", "\n", "self", ".", "pos1_idx", "=", "None", "\n", "import", "pickle", "\n", "self", ".", "update_ops", "=", "[", "]", "\n", "self", ".", "feature_gen", "=", "Fabricator", "(", "self", ")", "\n", "self", ".", "gt_class_HO_for_G_verbs", "=", "None", "\n", "self", ".", "gt_class_HO_for_D_verbs", "=", "None", "\n", "self", ".", "losses", "[", "'fake_D_total_loss'", "]", "=", "0", "\n", "self", ".", "losses", "[", "'fake_G_total_loss'", "]", "=", "0", "\n", "self", ".", "losses", "[", "'fake_total_loss'", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.set_gt_class_HO_for_G_verbs": [[56, 58], ["None"], "methods", ["None"], ["", "def", "set_gt_class_HO_for_G_verbs", "(", "self", ",", "gt_class_HO_for_G_verbs", ")", ":", "\n", "        ", "self", ".", "gt_class_HO_for_G_verbs", "=", "gt_class_HO_for_G_verbs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.set_gt_class_HO_for_D_verbs": [[59, 61], ["None"], "methods", ["None"], ["", "def", "set_gt_class_HO_for_D_verbs", "(", "self", ",", "gt_class_HO_for_D_verbs", ")", ":", "\n", "        ", "self", ".", "gt_class_HO_for_D_verbs", "=", "gt_class_HO_for_D_verbs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.set_add_ph": [[62, 64], ["None"], "methods", ["None"], ["", "def", "set_add_ph", "(", "self", ",", "pos1_idx", "=", "None", ")", ":", "\n", "        ", "self", ".", "pos1_idx", "=", "pos1_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.res5_ho": [[66, 84], ["tensorflow.arg_scope", "tensorflow.arg_scope", "HOI.HOI.model_name.__contains__", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "resnet_arg_scope", "print"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "res5_ho", "(", "self", ",", "pool5_HO", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "            ", "if", "self", ".", "model_name", ".", "__contains__", "(", "'unique_weights'", ")", ":", "\n", "                ", "print", "(", "\"unique_weights\"", ")", "\n", "st", "=", "-", "3", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", "\n", "if", "name", "!=", "'res5'", ":", "\n", "                    ", "reuse", "=", "True", "\n", "", "", "else", ":", "\n", "                ", "st", "=", "-", "2", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", "\n", "", "fc7_HO", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "pool5_HO", ",", "\n", "self", ".", "blocks", "[", "st", ":", "st", "+", "1", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "reuse", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "", "return", "fc7_HO", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.head_to_tail_ho": [[85, 101], ["tensorflow.arg_scope", "tensorflow.arg_scope", "print", "tensorflow.concat", "tensorflow.concat", "print", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "resnet_arg_scope"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "head_to_tail_ho", "(", "self", ",", "fc7_O", ",", "fc7_verbs", ",", "fc7_O_raw", ",", "fc7_verbs_raw", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "if", "name", "==", "'fc_HO'", ":", "\n", "            ", "nameprefix", "=", "''", "# TODO should improve", "\n", "", "else", ":", "\n", "            ", "nameprefix", "=", "name", "\n", "", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "            ", "print", "(", "'others concat'", ")", "\n", "concat_hoi", "=", "tf", ".", "concat", "(", "[", "fc7_verbs", ",", "fc7_O", "]", ",", "1", ")", "# TODO fix", "\n", "print", "(", "concat_hoi", ")", "\n", "concat_hoi", "=", "slim", ".", "fully_connected", "(", "concat_hoi", ",", "self", ".", "num_fc", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "scope", "=", "nameprefix", "+", "'Concat_verbs'", ")", "\n", "concat_hoi", "=", "slim", ".", "dropout", "(", "concat_hoi", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "nameprefix", "+", "'dropout6_verbs'", ")", "\n", "fc9_hoi", "=", "slim", ".", "fully_connected", "(", "concat_hoi", ",", "self", ".", "num_fc", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "scope", "=", "nameprefix", "+", "'fc7_verbs'", ")", "\n", "fc9_hoi", "=", "slim", ".", "dropout", "(", "fc9_hoi", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "nameprefix", "+", "'dropout7_verbs'", ")", "\n", "\n", "", "return", "fc9_hoi", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.head_to_tail_sp": [[102, 111], ["tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.concat", "tensorflow.concat", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "resnet_arg_scope"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "head_to_tail_sp", "(", "self", ",", "fc7_H", ",", "fc7_O", ",", "sp", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "            ", "Concat_SHsp", "=", "tf", ".", "concat", "(", "[", "fc7_H", ",", "sp", "]", ",", "1", ")", "\n", "Concat_SHsp", "=", "slim", ".", "fully_connected", "(", "Concat_SHsp", ",", "self", ".", "num_fc", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "scope", "=", "'Concat_SHsp'", ")", "\n", "Concat_SHsp", "=", "slim", ".", "dropout", "(", "Concat_SHsp", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout6_SHsp'", ")", "\n", "fc7_SHsp", "=", "slim", ".", "fully_connected", "(", "Concat_SHsp", ",", "self", ".", "num_fc", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "scope", "=", "'fc7_SHsp'", ")", "\n", "fc7_SHsp", "=", "slim", ".", "dropout", "(", "fc7_SHsp", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout7_SHsp'", ")", "\n", "\n", "", "return", "fc7_SHsp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.region_classification_sp": [[112, 127], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["None"], ["", "def", "region_classification_sp", "(", "self", ",", "fc7_SHsp", ",", "is_training", ",", "initializer", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "cls_score_sp", "=", "slim", ".", "fully_connected", "(", "fc7_SHsp", ",", "self", ".", "num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'cls_score_sp'", ")", "\n", "cls_prob_sp", "=", "tf", ".", "nn", ".", "sigmoid", "(", "cls_score_sp", ",", "name", "=", "'cls_prob_sp'", ")", "\n", "tf", ".", "reshape", "(", "cls_prob_sp", ",", "[", "-", "1", ",", "self", ".", "num_classes", "]", ")", "\n", "\n", "self", ".", "predictions", "[", "\"cls_score_sp\"", "]", "=", "cls_score_sp", "\n", "self", ".", "predictions", "[", "\"cls_prob_sp\"", "]", "=", "cls_prob_sp", "\n", "\n", "", "return", "cls_prob_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.region_classification_ho": [[129, 152], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__"], "methods", ["None"], ["", "def", "region_classification_ho", "(", "self", ",", "fc7_verbs", ",", "is_training", ",", "initializer", ",", "name", ",", "nameprefix", "=", "''", ")", ":", "\n", "# if not self.model_name.startswith('VCL_') and not self.model_name.__contains__('_orig_'):", "\n", "#     return None", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "cls_score_hoi", "=", "slim", ".", "fully_connected", "(", "fc7_verbs", ",", "self", ".", "num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'cls_score_verbs'", ")", "\n", "cls_prob_hoi", "=", "tf", ".", "nn", ".", "sigmoid", "(", "cls_score_hoi", ",", "name", "=", "'cls_prob_verbs'", ")", "\n", "self", ".", "predictions", "[", "nameprefix", "+", "\"cls_score_hoi\"", "]", "=", "cls_score_hoi", "\n", "self", ".", "predictions", "[", "nameprefix", "+", "\"cls_prob_hoi\"", "]", "=", "cls_prob_hoi", "\n", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "\"VCOCO\"", ")", ":", "\n", "# if self.model_name.__contains__('_CL_'):", "\n", "#     assert self.num_classes == 222", "\n", "#     print(cls_score_hoi, '=============================================')", "\n", "                ", "if", "self", ".", "model_name", ".", "__contains__", "(", "\"VCL_V\"", ")", ":", "\n", "                    ", "self", ".", "predictions", "[", "nameprefix", "+", "\"cls_prob_HO\"", "]", "=", "cls_prob_hoi", "if", "nameprefix", "==", "''", "else", "0", "\n", "", "else", ":", "\n", "                    ", "self", ".", "predictions", "[", "nameprefix", "+", "\"cls_prob_HO\"", "]", "=", "self", ".", "predictions", "[", "\"cls_prob_sp\"", "]", "*", "cls_prob_hoi", "if", "nameprefix", "==", "''", "else", "0", "\n", "", "", "", "return", "cls_prob_hoi", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_boxes": [[153, 162], ["tensorflow.control_dependencies", "tensorflow.control_dependencies", "tensorflow.minimum", "tensorflow.minimum", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.concat", "tensorflow.concat", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.assert_equal", "tensorflow.assert_equal"], "methods", ["None"], ["", "def", "get_compose_boxes", "(", "self", ",", "h_boxes", ",", "o_boxes", ")", ":", "\n", "        ", "with", "tf", ".", "control_dependencies", "(", "[", "tf", ".", "assert_equal", "(", "h_boxes", "[", ":", ",", "0", "]", ",", "o_boxes", "[", ":", ",", "0", "]", ",", "\n", "data", "=", "[", "h_boxes", "[", ":", ",", "0", "]", ",", "o_boxes", "[", ":", ",", "0", "]", "]", ")", "]", ")", ":", "\n", "            ", "cboxes1", "=", "tf", ".", "minimum", "(", "tf", ".", "slice", "(", "h_boxes", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "3", "]", ")", ",", "\n", "tf", ".", "slice", "(", "o_boxes", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "3", "]", ")", ")", "\n", "cboxes2", "=", "tf", ".", "maximum", "(", "tf", ".", "slice", "(", "h_boxes", ",", "[", "0", ",", "3", "]", ",", "[", "-", "1", ",", "2", "]", ")", ",", "\n", "tf", ".", "slice", "(", "o_boxes", ",", "[", "0", ",", "3", "]", ",", "[", "-", "1", ",", "2", "]", ")", ")", "\n", "cboxes", "=", "tf", ".", "concat", "(", "values", "=", "[", "cboxes1", ",", "cboxes2", "]", ",", "axis", "=", "1", ")", "\n", "return", "cboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.verbs_loss": [[163, 180], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["None"], ["", "", "def", "verbs_loss", "(", "self", ",", "fc7_verbs", ",", "is_training", ",", "initializer", ",", "label", "=", "''", ",", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'verbs_loss'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "cls_verbs", "=", "fc7_verbs", "\n", "# cls_verbs = slim.fully_connected(cls_verbs, self.num_fc, scope='fc8_cls_verbs')", "\n", "# cls_verbs = slim.dropout(cls_verbs, keep_prob=0.5, is_training=is_training, scope='dropout8_cls_verbs')", "\n", "# fc9_verbs = slim.fully_connected(cls_verbs, self.num_fc, scope='fc9_cls_verbs')", "\n", "# verbs_cls = slim.dropout(fc9_verbs, keep_prob=0.5, is_training=is_training, scope='dropout9_cls_verbs')", "\n", "verbs_cls_score", "=", "slim", ".", "fully_connected", "(", "cls_verbs", ",", "self", ".", "verb_num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'verbs_cls_score'", ")", "\n", "verb_cls_prob", "=", "tf", ".", "nn", ".", "sigmoid", "(", "verbs_cls_score", ",", "name", "=", "'verb_cls_prob'", ")", "\n", "tf", ".", "reshape", "(", "verb_cls_prob", ",", "[", "-", "1", ",", "self", ".", "verb_num_classes", "]", ")", "\n", "\n", "self", ".", "predictions", "[", "\"verb_cls_score\"", "+", "label", "]", "=", "verbs_cls_score", "\n", "self", ".", "predictions", "[", "\"verb_cls_prob\"", "+", "label", "]", "=", "verb_cls_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.objects_loss": [[183, 203], ["tensorflow.variable_scope", "tensorflow.variable_scope", "print", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.stop_gradient", "tensorflow.stop_gradient"], "methods", ["None"], ["", "", "def", "objects_loss", "(", "self", ",", "input_feature", ",", "is_training", ",", "initializer", ",", "name", "=", "'objects_loss'", ",", "label", "=", "''", ",", "is_stop_grads", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "print", "(", "'objects_loss:'", ",", "self", ".", "model_name", ")", "\n", "if", "is_stop_grads", ":", "\n", "                ", "input_feature", "=", "tf", ".", "stop_gradient", "(", "input_feature", ")", "\n", "# cls_verbs = slim.fully_connected(cls_verbs, self.num_fc, scope='fc8_cls_verbs')", "\n", "# cls_verbs = slim.dropout(cls_verbs, keep_prob=0.5, is_training=is_training, scope='dropout8_cls_verbs')", "\n", "# fc9_verbs = slim.fully_connected(cls_verbs, self.num_fc, scope='fc9_cls_verbs')", "\n", "# verbs_cls = slim.dropout(fc9_verbs, keep_prob=0.5, is_training=is_training, scope='dropout9_cls_verbs')", "\n", "\n", "", "obj_cls_score", "=", "slim", ".", "fully_connected", "(", "input_feature", ",", "self", ".", "obj_num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'obj_cls_score'", ")", "\n", "obj_cls_prob", "=", "tf", ".", "nn", ".", "sigmoid", "(", "obj_cls_score", ",", "name", "=", "'obj_cls_prob'", ")", "\n", "tf", ".", "reshape", "(", "obj_cls_prob", ",", "[", "-", "1", ",", "self", ".", "obj_num_classes", "]", ")", "\n", "\n", "self", ".", "predictions", "[", "\"obj_cls_score\"", "+", "label", "]", "=", "obj_cls_score", "\n", "self", ".", "predictions", "[", "\"obj_cls_prob\"", "+", "label", "]", "=", "obj_cls_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.build_network": [[205, 354], ["tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.cast", "tensorflow.cast", "HOI.HOI.image_to_head", "HOI.HOI.sp_to_head", "HOI.HOI.get_compose_boxes", "HOI.HOI.crop_pool_layer", "HOI.HOI.crop_pool_layer", "HOI.HOI.extract_pool5_HO", "HOI.HOI.res5", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "HOI.HOI.res5_ho", "HOI.HOI.score_summaries.update", "HOI.HOI.model_name.__contains__", "HOI.HOI.additional_loss", "print", "HOI.HOI.head_to_tail_ho", "HOI.HOI.region_classification_ho", "HOI.HOI.score_summaries.update", "HOI.HOI.get_num_stop", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "HOI.HOI.add_visual_for_test", "print", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "HOI.HOI.attention_pool_layer_H", "HOI.HOI.attention_norm_H", "tensorflow.multiply", "tensorflow.multiply", "HOI.HOI.attention_pool_layer_O", "HOI.HOI.attention_norm_O", "tensorflow.multiply", "tensorflow.multiply", "HOI.HOI.bottleneck", "HOI.HOI.bottleneck", "HOI.HOI.head_to_tail", "HOI.HOI.region_classification", "HOI.HOI.model_name.__contains__", "HOI.HOI.feature_gen.fabricate_model", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "print", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.startswith", "print", "HOI.HOI.head_to_tail_sp", "HOI.HOI.region_classification_sp", "print", "HOI.HOI.head_to_tail_sp", "HOI.HOI.region_classification_sp", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "HOI.HOI.model_name.__contains__", "HOI.HOI.feature_gen.fabricate_model", "HOI.HOI.model_name.__contains__", "tensorflow.device", "tensorflow.device", "tensorflow.Print", "tensorflow.Print", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "HOI.HOI.model_name.__contains__", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.image_to_head", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.sp_to_head", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_boxes", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.crop_pool_layer", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.crop_pool_layer", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.extract_pool5_HO", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.res5", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.res5_ho", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.additional_loss", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.head_to_tail_ho", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.region_classification_ho", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.add_visual_for_test", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_pool_layer_H", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_norm_H", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_pool_layer_O", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_norm_O", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.bottleneck", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.bottleneck", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.head_to_tail", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.region_classification", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.fabricate_model", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.head_to_tail_sp", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.region_classification_sp", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.head_to_tail_sp", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.region_classification_sp", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.Fabricator.Fabricator.fabricate_model"], ["", "", "def", "build_network", "(", "self", ",", "is_training", ")", ":", "\n", "        ", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.01", ")", "\n", "num_stop", "=", "tf", ".", "cast", "(", "self", ".", "get_num_stop", "(", ")", ",", "tf", ".", "int32", ")", "\n", "# ResNet Backbone", "\n", "head", "=", "self", ".", "image_to_head", "(", "is_training", ")", "\n", "sp", "=", "self", ".", "sp_to_head", "(", ")", "\n", "cboxes", "=", "self", ".", "get_compose_boxes", "(", "self", ".", "H_boxes", "[", ":", "num_stop", "]", "if", "self", ".", "model_name", ".", "__contains__", "(", "'VCOCO'", ")", "else", "self", ".", "H_boxes", ",", "self", ".", "O_boxes", ")", "\n", "pool5_O", "=", "self", ".", "crop_pool_layer", "(", "head", ",", "self", ".", "O_boxes", ",", "'Crop_O'", ")", "\n", "pool5_H", "=", "self", ".", "crop_pool_layer", "(", "head", ",", "self", ".", "H_boxes", ",", "'Crop_H'", ")", "\n", "cboxes", "=", "cboxes", "[", ":", "num_stop", "]", "\n", "\n", "pool5_HO", "=", "self", ".", "extract_pool5_HO", "(", "head", ",", "cboxes", ",", "is_training", ",", "pool5_O", ",", "None", ",", "name", "=", "'ho_'", ")", "\n", "# further resnet feature", "\n", "fc7_H_raw", ",", "fc7_O_raw", "=", "self", ".", "res5", "(", "pool5_H", ",", "pool5_O", ",", "None", ",", "is_training", ",", "'res5'", ")", "\n", "fc7_H", "=", "tf", ".", "reduce_mean", "(", "fc7_H_raw", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "fc7_O", "=", "tf", ".", "reduce_mean", "(", "fc7_O_raw", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "fc7_H_pos", "=", "fc7_H", "[", ":", "num_stop", "]", "\n", "fc7_O_pos", "=", "fc7_O", "[", ":", "num_stop", "]", "\n", "fc7_HO_raw", "=", "self", ".", "res5_ho", "(", "pool5_HO", ",", "is_training", ",", "'res5'", ")", "\n", "\n", "fc7_HO", "=", "None", "if", "fc7_HO_raw", "is", "None", "else", "tf", ".", "reduce_mean", "(", "fc7_HO_raw", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "\n", "if", "not", "is_training", ":", "\n", "# add visualization for test", "\n", "            ", "self", ".", "add_visual_for_test", "(", "fc7_HO_raw", ",", "fc7_H_raw", ",", "fc7_O_raw", ",", "head", ",", "is_training", ",", "pool5_O", ")", "\n", "\n", "", "fc7_verbs_raw", "=", "fc7_HO_raw", "\n", "fc7_verbs", "=", "fc7_HO", "\n", "\n", "self", ".", "score_summaries", ".", "update", "(", "{", "'orth_HO'", ":", "fc7_HO", ",", "\n", "'orth_H'", ":", "fc7_H", ",", "'orth_O'", ":", "fc7_O", "}", ")", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_orig_'", ")", ":", "\n", "            ", "print", "(", "'ICAN original code'", ")", "\n", "# Phi", "\n", "head_phi", "=", "slim", ".", "conv2d", "(", "head", ",", "512", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'head_phi'", ")", "\n", "\n", "# g", "\n", "head_g", "=", "slim", ".", "conv2d", "(", "head", ",", "512", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'head_g'", ")", "\n", "\n", "Att_H", "=", "self", ".", "attention_pool_layer_H", "(", "head_phi", ",", "fc7_H", ",", "is_training", ",", "'Att_H'", ")", "\n", "Att_H", "=", "self", ".", "attention_norm_H", "(", "Att_H", ",", "'Norm_Att_H'", ")", "\n", "att_head_H", "=", "tf", ".", "multiply", "(", "head_g", ",", "Att_H", ")", "\n", "\n", "Att_O", "=", "self", ".", "attention_pool_layer_O", "(", "head_phi", ",", "fc7_O_pos", ",", "is_training", ",", "'Att_O'", ")", "\n", "Att_O", "=", "self", ".", "attention_norm_O", "(", "Att_O", ",", "'Norm_Att_O'", ")", "\n", "att_head_O", "=", "tf", ".", "multiply", "(", "head_g", ",", "Att_O", ")", "\n", "\n", "pool5_SH", "=", "self", ".", "bottleneck", "(", "att_head_H", ",", "is_training", ",", "'bottleneck'", ",", "False", ")", "\n", "pool5_SO", "=", "self", ".", "bottleneck", "(", "att_head_O", ",", "is_training", ",", "'bottleneck'", ",", "True", ")", "\n", "fc7_SH", ",", "fc7_SO", ",", "fc7_SHsp", "=", "self", ".", "head_to_tail", "(", "fc7_H", ",", "fc7_O_pos", ",", "pool5_SH", ",", "pool5_SO", ",", "sp", ",", "is_training", ",", "'fc_HO'", ")", "\n", "cls_prob_H", ",", "cls_prob_O", ",", "cls_prob_sp", "=", "self", ".", "region_classification", "(", "fc7_SH", ",", "fc7_SO", ",", "fc7_SHsp", ",", "is_training", ",", "\n", "initializer", ",", "'classification'", ")", "\n", "", "elif", "not", "self", ".", "model_name", ".", "startswith", "(", "'_V_'", ")", ":", "\n", "            ", "print", "(", "'sp'", ",", "sp", ")", "\n", "fc7_SHsp", "=", "self", ".", "head_to_tail_sp", "(", "fc7_H", ",", "fc7_O", ",", "sp", ",", "is_training", ",", "'fc_HO'", ")", "\n", "cls_prob_sp", "=", "self", ".", "region_classification_sp", "(", "fc7_SHsp", ",", "is_training", ",", "initializer", ",", "'classification'", ")", "\n", "print", "(", "\"sp:\"", ",", "fc7_SHsp", ")", "\n", "", "else", ":", "\n", "            ", "fc7_SHsp", "=", "self", ".", "head_to_tail_sp", "(", "fc7_H", ",", "fc7_O", ",", "sp", ",", "is_training", ",", "'fc_HO'", ")", "\n", "cls_prob_sp", "=", "self", ".", "region_classification_sp", "(", "fc7_SHsp", ",", "is_training", ",", "initializer", ",", "'classification'", ")", "\n", "", "self", ".", "additional_loss", "(", "fc7_O", ",", "fc7_H_pos", ",", "fc7_verbs", ",", "fc7_verbs_raw", ",", "initializer", ",", "is_training", ")", "\n", "\n", "print", "(", "'verbs'", ")", "\n", "if", "not", "is_training", ":", "\n", "            ", "self", ".", "test_visualize", "[", "'fc7_O_feats'", "]", "=", "fc7_O", "\n", "self", ".", "test_visualize", "[", "'fc7_verbs_feats'", "]", "=", "fc7_verbs", "\n", "self", ".", "test_visualize", "[", "'fc7_H_feats'", "]", "=", "fc7_H_pos", "\n", "\n", "", "self", ".", "intermediate", "[", "'fc7_O'", "]", "=", "fc7_O", "[", ":", "num_stop", "]", "\n", "self", ".", "intermediate", "[", "'fc7_verbs'", "]", "=", "fc7_verbs", "[", ":", "num_stop", "]", "\n", "\n", "if", "is_training", "and", "self", ".", "model_name", ".", "__contains__", "(", "'gan'", ")", ":", "\n", "# if model_name contains gan, we will use fabricator.", "\n", "# here, gan do not mean that we use generative adversarial network.", "\n", "# We just was planning to use to GAN. But, it is useless.", "\n", "# Possibly, it is too difficult to tune the network with gan.", "\n", "            ", "gt_class", "=", "self", ".", "gt_class_HO", "[", ":", "num_stop", "]", "\n", "tmp_fc7_O", "=", "fc7_O", "[", ":", "num_stop", "]", "\n", "tmp_fc7_verbs", "=", "fc7_verbs", "[", ":", "num_stop", "]", "\n", "tmp_O_raw", "=", "fc7_O_raw", "[", ":", "num_stop", "]", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'batch'", ")", "and", "self", ".", "model_name", ".", "__contains__", "(", "'atl'", ")", ":", "\n", "                ", "tmp_O_raw", "=", "fc7_O", "[", ":", "num_stop", "]", "\n", "tmp_gt_class", "=", "gt_class", "\n", "# remove object list", "\n", "semi_filter", "=", "tf", ".", "reduce_sum", "(", "self", ".", "H_boxes", "[", ":", "tf", ".", "shape", "(", "tmp_fc7_O", ")", "[", "0", "]", ",", "1", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "semi_filter", "=", "tf", ".", "cast", "(", "semi_filter", ",", "tf", ".", "bool", ")", "\n", "\n", "gt_class", "=", "tf", ".", "boolean_mask", "(", "gt_class", ",", "semi_filter", ",", "axis", "=", "0", ")", "\n", "tmp_fc7_O", "=", "tf", ".", "boolean_mask", "(", "tmp_fc7_O", ",", "semi_filter", ",", "axis", "=", "0", ")", "\n", "tmp_fc7_verbs", "=", "tf", ".", "boolean_mask", "(", "tmp_fc7_verbs", ",", "semi_filter", ",", "axis", "=", "0", ")", "\n", "\n", "", "fc7_O", ",", "fc7_verbs", "=", "self", ".", "feature_gen", ".", "fabricate_model", "(", "tmp_fc7_O", ",", "tmp_O_raw", ",", "\n", "tmp_fc7_verbs", ",", "fc7_verbs_raw", "[", ":", "num_stop", "]", ",", "initializer", ",", "is_training", ",", "\n", "gt_class", ")", "\n", "\n", "# if self.model_name.__contains__('laobj'):", "\n", "#     # this aims to evaluate the effect of regularizing fabricated object features, we do not use.", "\n", "#     all_fc7_O = fc7_O", "\n", "#     tmp_class = self.get_hoi_labels()", "\n", "#     self.gt_obj_class = tf.cast(", "\n", "#         tf.matmul(tmp_class, self.obj_to_HO_matrix, transpose_b=True) > 0,", "\n", "#         tf.float32)", "\n", "#     self.objects_loss(all_fc7_O, is_training, initializer, 'objects_loss', label='_o')", "\n", "#     pass", "\n", "", "else", ":", "\n", "            ", "if", "'FEATS'", "in", "os", ".", "environ", "and", "self", ".", "model_name", ".", "__contains__", "(", "\n", "'gan'", ")", ":", "\n", "# This is only for visualization", "\n", "                ", "gt_class", "=", "self", ".", "gt_class_HO", "if", "not", "self", ".", "model_name", ".", "__contains__", "(", "\n", "'VCOCO'", ")", "else", "self", ".", "gt_compose", "[", ":", "num_stop", "]", "\n", "old_fc7_O", "=", "fc7_O", "\n", "fc7_O", ",", "fc7_verbs", "=", "self", ".", "feature_gen", ".", "fabricate_model", "(", "fc7_O", ",", "None", ",", "\n", "fc7_verbs", ",", "fc7_verbs", ",", "initializer", ",", "\n", "True", ",", "\n", "gt_class", ")", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "fc7_O", "=", "tf", ".", "Print", "(", "fc7_O", ",", "[", "tf", ".", "shape", "(", "fc7_O", ")", ",", "num_stop", ",", "tf", ".", "shape", "(", "self", ".", "H_boxes", ")", ",", "tf", ".", "shape", "(", "old_fc7_O", ")", ",", "]", ",", "\n", "'after gan:'", ",", "first_n", "=", "100", ",", "summarize", "=", "10000", ")", "\n", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'varv'", ")", ":", "\n", "                    ", "self", ".", "test_visualize", "[", "'fc7_fake_O_feats'", "]", "=", "fc7_verbs", "[", "tf", ".", "shape", "(", "old_fc7_O", ")", "[", "0", "]", ":", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "test_visualize", "[", "'fc7_fake_O_feats'", "]", "=", "fc7_O", "[", "tf", ".", "shape", "(", "old_fc7_O", ")", "[", "0", "]", ":", "]", "\n", "", "", "pass", "\n", "fc7_O", "=", "fc7_O", "[", ":", "num_stop", "]", "\n", "fc7_verbs", "=", "fc7_verbs", "[", ":", "num_stop", "]", "\n", "\n", "", "fc7_vo", "=", "self", ".", "head_to_tail_ho", "(", "fc7_O", ",", "fc7_verbs", ",", "fc7_O_raw", ",", "fc7_verbs_raw", ",", "is_training", ",", "'fc_HO'", ")", "\n", "cls_prob_verbs", "=", "self", ".", "region_classification_ho", "(", "fc7_vo", ",", "is_training", ",", "initializer", ",", "'classification'", ")", "\n", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_l0_'", ")", "or", "self", ".", "model_name", ".", "__contains__", "(", "'_scale_'", ")", ":", "\n", "            ", "\"\"\"\n            This is for factorized model.\n            \"\"\"", "\n", "verb_prob", "=", "self", ".", "predictions", "[", "'verb_cls_prob'", "]", "\n", "obj_prob", "=", "self", ".", "predictions", "[", "\"obj_cls_prob_o\"", "]", "\n", "print", "(", "verb_prob", ",", "obj_prob", ")", "\n", "tmp_fc7_O_vectors", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "matmul", "(", "obj_prob", ",", "self", ".", "obj_to_HO_matrix", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "tmp_fc7_verbs_vectors", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "matmul", "(", "verb_prob", ",", "self", ".", "verb_to_HO_matrix", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "if", "'cls_prob_verbs'", "not", "in", "self", ".", "predictions", ":", "\n", "                ", "self", ".", "predictions", "[", "'cls_prob_verbs'", "]", "=", "0", "\n", "", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_l0_'", ")", ":", "\n", "                ", "self", ".", "predictions", "[", "'cls_prob_verbs'", "]", "=", "0", "\n", "", "self", ".", "predictions", "[", "'cls_prob_verbs'", "]", "+=", "(", "tmp_fc7_O_vectors", "+", "tmp_fc7_verbs_vectors", ")", "\n", "\n", "", "self", ".", "score_summaries", ".", "update", "(", "self", ".", "predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_hoi_labels": [[355, 363], ["HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__"], "methods", ["None"], ["", "def", "get_hoi_labels", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "gt_class_HO_for_D_verbs", "is", "not", "None", ":", "\n", "# we might have changed label in Fabricator", "\n", "            ", "return", "self", ".", "gt_class_HO_for_D_verbs", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "model_name", ".", "__contains__", "(", "'VCOCO'", ")", "and", "self", ".", "model_name", ".", "__contains__", "(", "'CL'", ")", ":", "\n", "                ", "return", "self", ".", "gt_compose", "\n", "", "return", "self", ".", "gt_class_HO", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.add_visual_for_test": [[364, 386], ["tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "HOI.HOI.res5_ho", "HOI.HOI.model_name.__contains__", "print", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "HOI.HOI.extract_pool5_HO", "HOI.HOI.crop_pool_layer", "HOI.HOI.res5_ho", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.greater", "tensorflow.greater", "tensorflow.greater", "tensorflow.greater", "tensorflow.cast", "tensorflow.cast", "HOI.HOI.extract_pool5_HO", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.greater", "tensorflow.greater", "tensorflow.greater", "tensorflow.greater", "tensorflow.greater", "tensorflow.greater"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.res5_ho", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.extract_pool5_HO", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.crop_pool_layer", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.res5_ho", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.extract_pool5_HO"], ["", "", "def", "add_visual_for_test", "(", "self", ",", "fc7_HO_raw", ",", "fc7_H_raw", ",", "fc7_O_raw", ",", "head", ",", "is_training", ",", "pool5_O", ")", ":", "\n", "        ", "self", ".", "test_visualize", "[", "'fc7_H_raw'", "]", "=", "tf", ".", "expand_dims", "(", "tf", ".", "reduce_mean", "(", "fc7_H_raw", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "test_visualize", "[", "'fc7_O_raw'", "]", "=", "tf", ".", "expand_dims", "(", "tf", ".", "reduce_mean", "(", "fc7_O_raw", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "if", "fc7_HO_raw", "is", "not", "None", ":", "\n", "            ", "self", ".", "test_visualize", "[", "'fc7_HO_raw'", "]", "=", "tf", ".", "expand_dims", "(", "tf", ".", "reduce_mean", "(", "fc7_HO_raw", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "self", ".", "test_visualize", "[", "'fc7_H_acts_num'", "]", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "greater", "(", "fc7_H_raw", ",", "0", ")", ",", "tf", ".", "float32", ")", ")", "\n", "self", ".", "test_visualize", "[", "'fc7_O_acts_num'", "]", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "greater", "(", "fc7_O_raw", ",", "0", ")", ",", "tf", ".", "float32", ")", ")", "\n", "if", "fc7_HO_raw", "is", "not", "None", ":", "\n", "            ", "self", ".", "test_visualize", "[", "'fc7_HO_acts_num'", "]", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "greater", "(", "fc7_HO_raw", ",", "0", ")", ",", "tf", ".", "float32", ")", ")", "\n", "", "res5_ho_h", "=", "self", ".", "res5_ho", "(", "self", ".", "extract_pool5_HO", "(", "head", ",", "self", ".", "H_boxes", ",", "is_training", ",", "pool5_O", ",", "None", ")", ",", "is_training", ",", "\n", "'h'", ")", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'humans'", ")", ":", "\n", "            ", "res5_ho_o", "=", "self", ".", "crop_pool_layer", "(", "head", ",", "self", ".", "O_boxes", ",", "'Crop_HO_h'", ")", "\n", "", "else", ":", "\n", "            ", "res5_ho_o", "=", "self", ".", "res5_ho", "(", "self", ".", "extract_pool5_HO", "(", "head", ",", "self", ".", "O_boxes", ",", "is_training", ",", "pool5_O", ",", "None", ")", ",", "is_training", ",", "\n", "'o'", ")", "\n", "", "print", "(", "\"res5_ho_o\"", ",", "res5_ho_o", ",", "res5_ho_h", ")", "\n", "if", "res5_ho_h", "is", "not", "None", "and", "res5_ho_o", "is", "not", "None", ":", "\n", "            ", "self", ".", "test_visualize", "[", "'res5_ho_H'", "]", "=", "tf", ".", "expand_dims", "(", "tf", ".", "reduce_mean", "(", "res5_ho_h", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "test_visualize", "[", "'res5_ho_O'", "]", "=", "tf", ".", "expand_dims", "(", "tf", ".", "reduce_mean", "(", "res5_ho_o", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "test_visualize", "[", "'res5_ho_H_acts_num'", "]", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "greater", "(", "res5_ho_h", ",", "0", ")", ",", "tf", ".", "float32", ")", ")", "\n", "self", ".", "test_visualize", "[", "'res5_ho_O_acts_num'", "]", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "greater", "(", "res5_ho_o", ",", "0", ")", ",", "tf", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.add_pattern": [[387, 396], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.flatten", "tensorflow.flatten", "HOI.HOI.get_num_stop"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_num_stop"], ["", "", "def", "add_pattern", "(", "self", ",", "name", "=", "'pattern'", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "self", ".", "scope", ")", ":", "\n", "                ", "conv1_sp", "=", "slim", ".", "conv2d", "(", "self", ".", "spatial", "[", ":", ",", ":", ",", ":", ",", "0", ":", "2", "]", "[", ":", "self", ".", "get_num_stop", "(", ")", "]", ",", "64", ",", "[", "5", ",", "5", "]", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'conv1_sp'", ")", "\n", "pool1_sp", "=", "slim", ".", "max_pool2d", "(", "conv1_sp", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool1_sp'", ")", "\n", "conv2_sp", "=", "slim", ".", "conv2d", "(", "pool1_sp", ",", "32", ",", "[", "5", ",", "5", "]", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'conv2_sp'", ")", "\n", "pool2_sp", "=", "slim", ".", "max_pool2d", "(", "conv2_sp", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool2_sp'", ")", "\n", "pool2_flat_sp", "=", "slim", ".", "flatten", "(", "pool2_sp", ")", "\n", "", "", "return", "pool2_flat_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.additional_loss": [[397, 402], ["HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "HOI.HOI.verbs_loss", "HOI.HOI.objects_loss"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.verbs_loss", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.objects_loss"], ["", "def", "additional_loss", "(", "self", ",", "fc7_O", ",", "fc7_H", ",", "fc7_verbs", ",", "fc7_verbs_raw", ",", "initializer", ",", "is_training", ")", ":", "\n", "        ", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_vloss'", ")", ":", "\n", "            ", "self", ".", "verbs_loss", "(", "fc7_verbs", ",", "is_training", ",", "initializer", ")", "\n", "", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_objloss'", ")", ":", "\n", "            ", "self", ".", "objects_loss", "(", "fc7_O", ",", "is_training", ",", "initializer", ",", "'objects_loss'", ",", "label", "=", "'_o'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_num_stop": [[403, 429], ["HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "tensorflow.shape", "tensorflow.shape", "print", "HOI.HOI.model_name.__contains__", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast"], "methods", ["None"], ["", "", "def", "get_num_stop", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        following iCAN, spatial pattern include all negative samples. verb-object branch is for positive samples\n        self.H_num is the partition for positive sample and negative samples.\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'batch'", ")", ":", "\n", "# This is for batch style. i.e. there are multiple images in each batch.", "\n", "            ", "return", "self", ".", "H_num", "\n", "", "num_stop", "=", "tf", ".", "shape", "(", "self", ".", "H_boxes", ")", "[", "0", "]", "# for selecting the positive items", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_new'", ")", ":", "\n", "            ", "print", "(", "'new Add H_num constrains'", ")", "\n", "num_stop", "=", "self", ".", "H_num", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_x5new'", ")", ":", "# contain some negative items", "\n", "# I use this strategy cause I found by accident that including", "\n", "# some negative samples in the positive samples can improve the performance a bit (abount 0.2%).", "\n", "# TODO I think it might have a better solution.", "\n", "#  No-Frills Human-Object Interaction Detection provides some support", "\n", "#  I think VCL do not depend on this. If someone finds This has important impact on result,", "\n", "#  feel happy to contact me.", "\n", "            ", "H_num_tmp", "=", "tf", ".", "cast", "(", "self", ".", "H_num", ",", "tf", ".", "int32", ")", "\n", "num_stop", "=", "tf", ".", "cast", "(", "num_stop", ",", "tf", ".", "int32", ")", "\n", "num_stop", "=", "H_num_tmp", "+", "tf", ".", "cast", "(", "(", "num_stop", "-", "H_num_tmp", ")", "//", "8", ",", "tf", ".", "int32", ")", "\n", "", "else", ":", "\n", "            ", "num_stop", "=", "self", ".", "H_num", "\n", "", "return", "num_stop", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_compose_num_stop": [[430, 433], ["HOI.HOI.get_num_stop"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_num_stop"], ["", "def", "get_compose_num_stop", "(", "self", ")", ":", "\n", "        ", "num_stop", "=", "self", ".", "get_num_stop", "(", ")", "\n", "return", "num_stop", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.extract_pool5_HO": [[434, 447], ["HOI.HOI.model_name.__contains__", "HOI.HOI.crop_pool_layer", "tensorflow.expand_dims", "tensorflow.expand_dims", "HOI.HOI.model_name.__contains__", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "print", "HOI.HOI.crop_pool_layer", "tensorflow.expand_dims", "tensorflow.expand_dims", "print", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "HOI.HOI.get_num_stop"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.crop_pool_layer", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.crop_pool_layer", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_num_stop"], ["", "def", "extract_pool5_HO", "(", "self", ",", "head", ",", "cboxes", ",", "is_training", ",", "pool5_O", ",", "head_mask", "=", "None", ",", "name", "=", "''", ")", ":", "\n", "        ", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_union'", ")", ":", "\n", "            ", "pool5_HO", "=", "self", ".", "crop_pool_layer", "(", "head", ",", "cboxes", ",", "name", "+", "'Crop_HO'", ")", "\n", "self", ".", "test_visualize", "[", "\"pool5_HO\"", "]", "=", "tf", ".", "expand_dims", "(", "tf", ".", "reduce_mean", "(", "pool5_HO", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_humans'", ")", ":", "\n", "            ", "print", "(", "\"humans\"", ")", "\n", "pool5_HO", "=", "self", ".", "crop_pool_layer", "(", "head", ",", "self", ".", "H_boxes", "[", ":", "self", ".", "get_num_stop", "(", ")", "]", ",", "name", "+", "'Crop_HO_h'", ")", "\n", "self", ".", "test_visualize", "[", "\"pool5_HO\"", "]", "=", "tf", ".", "expand_dims", "(", "tf", ".", "reduce_mean", "(", "pool5_HO", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "# pool5_HO = self.crop_pool_layer(head, cboxes, 'Crop_HO')", "\n", "            ", "pool5_HO", "=", "None", "\n", "print", "(", "\"{} doesn\\'t support pool5_HO\"", ".", "format", "(", "self", ".", "model_name", ")", ")", "\n", "", "return", "pool5_HO", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.add_loss": [[448, 605], ["print", "print", "tensorflow.variable_scope", "tensorflow.variable_scope", "HOI.HOI.get_num_stop", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.startswith", "HOI.HOI.add_verb_loss", "HOI.HOI.model_name.__contains__", "HOI.HOI.event_summaries.update", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "HOI.HOI.model_name.__contains__", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "HOI.HOI.model_name.__contains__", "print", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "HOI.HOI.model_name.__contains__", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "HOI.HOI.model_name.__contains__", "HOI.HOI.add_objloss", "print", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.multiply", "tensorflow.multiply", "HOI.HOI.model_name.__contains__", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "HOI.HOI.add_factorized_hoi_loss", "HOI.HOI.get_lamb_1", "numpy.log", "tensorflow.multiply", "tensorflow.multiply", "HOI.HOI.model_name.startswith", "HOI.HOI.model_name.startswith", "HOI.HOI.model_name.startswith", "HOI.HOI.model_name.__contains__", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "HOI.HOI.get_lamb_1", "HOI.HOI.model_name.__contains__", "HOI.HOI.get_hoi_labels", "tensorflow.multiply", "tensorflow.multiply", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "print", "HOI.HOI.model_name.__contains__", "print", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "numpy.log", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "HOI.HOI.model_name.__contains__", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "numpy.sum", "tensorflow.multiply", "tensorflow.multiply", "HOI.HOI.model_name.__contains__", "tensorflow.multiply", "tensorflow.multiply", "HOI.HOI.model_name.__contains__", "numpy.sum", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_num_stop", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.add_verb_loss", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.add_objloss", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.add_factorized_hoi_loss", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_lamb_1", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_lamb_1", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_hoi_labels"], ["", "def", "add_loss", "(", "self", ")", ":", "\n", "        ", "import", "math", "\n", "with", "tf", ".", "variable_scope", "(", "'LOSS'", ")", "as", "scope", ":", "\n", "            ", "num_stop", "=", "self", ".", "get_num_stop", "(", ")", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_VCOCO'", ")", ":", "\n", "                ", "label_H", "=", "self", ".", "gt_class_H", "\n", "label_HO", "=", "self", ".", "gt_class_HO", "\n", "label_sp", "=", "self", ".", "gt_class_sp", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_CL'", ")", ":", "\n", "                    ", "label_H", "=", "self", ".", "gt_compose", "\n", "label_HO", "=", "self", ".", "gt_compose", "\n", "label_sp", "=", "self", ".", "gt_compose", "\n", "", "", "else", ":", "\n", "                ", "label_H", "=", "self", ".", "gt_class_HO", "[", ":", "num_stop", "]", "\n", "# label_HO = self.gt_class_HO_for_verbs", "\n", "label_HO", "=", "self", ".", "gt_class_HO", "[", ":", "num_stop", "]", "\n", "label_sp", "=", "self", ".", "gt_class_HO", "\n", "", "if", "\"cls_score_H\"", "in", "self", ".", "predictions", ":", "\n", "                ", "cls_score_H", "=", "self", ".", "predictions", "[", "\"cls_score_H\"", "]", "\n", "\"\"\"\n                The re-weighting strategy has an important effect on the performance. \n                This will also improve largely our baseline in both common and zero-shot setting.\n                We copy from TIN.\n                \"\"\"", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_rew'", ")", ":", "\n", "                    ", "cls_score_H", "=", "tf", ".", "multiply", "(", "cls_score_H", ",", "self", ".", "HO_weight", ")", "\n", "", "H_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_H", ",", "\n", "logits", "=", "cls_score_H", "[", ":", "num_stop", ",", ":", "]", ")", ")", "\n", "self", ".", "losses", "[", "'H_cross_entropy'", "]", "=", "H_cross_entropy", "\n", "", "if", "\"cls_score_O\"", "in", "self", ".", "predictions", ":", "\n", "                ", "cls_score_O", "=", "self", ".", "predictions", "[", "\"cls_score_O\"", "]", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_rew'", ")", ":", "\n", "                    ", "cls_score_O", "=", "tf", ".", "multiply", "(", "cls_score_O", ",", "self", ".", "HO_weight", ")", "\n", "", "O_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_HO", ",", "\n", "logits", "=", "cls_score_O", "[", ":", "num_stop", ",", ":", "]", ")", ")", "\n", "self", ".", "losses", "[", "'O_cross_entropy'", "]", "=", "O_cross_entropy", "\n", "", "if", "\"cls_score_sp\"", "in", "self", ".", "predictions", ":", "\n", "                ", "cls_score_sp", "=", "self", ".", "predictions", "[", "\"cls_score_sp\"", "]", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_rew'", ")", ":", "\n", "                    ", "cls_score_sp", "=", "tf", ".", "multiply", "(", "cls_score_sp", ",", "self", ".", "HO_weight", ")", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_xrew'", ")", ":", "\n", "                    ", "reweights", "=", "np", ".", "log", "(", "1", "/", "(", "self", ".", "num_inst_all", "/", "np", ".", "sum", "(", "self", ".", "num_inst_all", ")", ")", ")", "\n", "cls_score_sp", "=", "tf", ".", "multiply", "(", "cls_score_sp", ",", "reweights", ")", "\n", "\n", "", "print", "(", "label_sp", ",", "cls_score_sp", ")", "\n", "sp_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_sp", ",", "logits", "=", "cls_score_sp", ")", ")", "\n", "\n", "self", ".", "losses", "[", "'sp_cross_entropy'", "]", "=", "sp_cross_entropy", "\n", "\n", "", "if", "self", ".", "model_name", ".", "startswith", "(", "'_V_'", ")", ":", "\n", "                ", "cls_score_hoi", "=", "self", ".", "predictions", "[", "\"cls_score_hoi\"", "]", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_rew'", ")", ":", "\n", "                    ", "cls_score_hoi", "=", "tf", ".", "multiply", "(", "cls_score_hoi", ",", "self", ".", "HO_weight", ")", "\n", "", "hoi_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_HO", "[", ":", "num_stop", ",", ":", "]", ",", "logits", "=", "cls_score_hoi", "[", ":", "num_stop", ",", ":", "]", ")", ")", "\n", "self", ".", "losses", "[", "'hoi_cross_entropy'", "]", "=", "hoi_cross_entropy", "\n", "\n", "loss", "=", "hoi_cross_entropy", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_fac_'", ")", ":", "\n", "# factorized", "\n", "                ", "gt_verb_label", "=", "self", ".", "gt_verb_class", "[", ":", "num_stop", ",", ":", "]", "\n", "gt_obj_label", "=", "self", ".", "gt_obj_class", "[", ":", "num_stop", ",", ":", "]", "\n", "# label_verb = tf.matmul()", "\n", "cls_score_verbs", "=", "self", ".", "predictions", "[", "\"cls_score_verbs_f\"", "]", "[", ":", "num_stop", ",", ":", "]", "\n", "cls_score_objs", "=", "self", ".", "predictions", "[", "\"cls_score_objs\"", "]", "[", ":", "num_stop", ",", ":", "]", "\n", "hoi_cross_entropy", "=", "self", ".", "add_factorized_hoi_loss", "(", "cls_score_objs", ",", "cls_score_verbs", ",", "gt_obj_label", ",", "\n", "gt_verb_label", ")", "\n", "\n", "# result = tf.equal(tf.cast(tmp_verb_prob * gt_verb_label > 0.5, tf.float32),", "\n", "#                   tf.cast(gt_verb_label, tf.float32))", "\n", "# print('res', result)", "\n", "# tmp_hoi_loss = tf.Print(tmp_hoi_loss, [tf.shape(result)], 'HOI acc:')", "\n", "\n", "self", ".", "losses", "[", "'verbs_cross_entropy'", "]", "=", "hoi_cross_entropy", "\n", "# self.losses[\"pos_hoi_cross_entropy\"] = tf.reduce_mean(", "\n", "#     tf.reduce_sum(tmp_verb_loss * gt_verb_label, axis=-1) / tf.reduce_sum(gt_verb_label, axis=-1))", "\n", "# self.losses[\"pos_sp_cross_entropy\"] = tf.reduce_mean(", "\n", "#     tf.reduce_sum(tmp_sp_cross_entropy * label_sp, axis=-1) / tf.reduce_sum(label_sp, axis=-1))", "\n", "\n", "lamb", "=", "self", ".", "get_lamb_1", "(", ")", "\n", "if", "\"cls_score_sp\"", "not", "in", "self", ".", "predictions", ":", "\n", "                    ", "sp_cross_entropy", "=", "0", "\n", "self", ".", "losses", "[", "'sp_cross_entropy'", "]", "=", "0", "\n", "", "loss", "=", "sp_cross_entropy", "+", "hoi_cross_entropy", "*", "lamb", "\n", "", "elif", "self", ".", "model_name", ".", "startswith", "(", "'VCL_'", ")", "or", "self", ".", "model_name", ".", "startswith", "(", "'FCL_'", ")", "or", "self", ".", "model_name", ".", "startswith", "(", "'ATL_'", ")", ":", "\n", "\n", "                ", "tmp_label_HO", "=", "self", ".", "get_hoi_labels", "(", ")", "[", ":", "num_stop", "]", "\n", "\n", "cls_score_hoi", "=", "self", ".", "predictions", "[", "\"cls_score_hoi\"", "]", "[", ":", "num_stop", ",", ":", "]", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_rew'", ")", ":", "\n", "                    ", "cls_score_hoi", "=", "tf", ".", "multiply", "(", "cls_score_hoi", ",", "self", ".", "HO_weight", ")", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_xrew'", ")", ":", "\n", "                    ", "reweights", "=", "np", ".", "log", "(", "1", "/", "(", "self", ".", "num_inst", "/", "np", ".", "sum", "(", "self", ".", "num_inst", ")", ")", ")", "\n", "# print(reweights, self.HO_weight, self.num_inst_all, self.num_inst)", "\n", "# import ipdb;ipdb.set_trace()", "\n", "cls_score_hoi", "=", "tf", ".", "multiply", "(", "cls_score_hoi", ",", "reweights", ")", "\n", "", "if", "self", ".", "model_name", ".", "__contains__", "(", "'batch'", ")", "and", "self", ".", "model_name", ".", "__contains__", "(", "'semi'", ")", ":", "\n", "                    ", "semi_filter", "=", "tf", ".", "reduce_sum", "(", "self", ".", "H_boxes", "[", ":", "tf", ".", "shape", "(", "cls_score_hoi", ")", "[", "0", "]", ",", "1", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "semi_filter", "=", "tf", ".", "cast", "(", "semi_filter", ",", "tf", ".", "bool", ")", "\n", "\n", "tmp_label_HO", "=", "tf", ".", "boolean_mask", "(", "tmp_label_HO", ",", "semi_filter", ",", "axis", "=", "0", ")", "\n", "cls_score_hoi", "=", "tf", ".", "boolean_mask", "(", "cls_score_hoi", ",", "semi_filter", ",", "axis", "=", "0", ")", "\n", "\n", "", "tmp_hoi_loss", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "tmp_label_HO", ",", "logits", "=", "cls_score_hoi", ")", "\n", "\n", "hoi_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tmp_hoi_loss", ")", "\n", "self", ".", "losses", "[", "'hoi_cross_entropy'", "]", "=", "hoi_cross_entropy", "\n", "\n", "lamb", "=", "self", ".", "get_lamb_1", "(", ")", "\n", "if", "\"cls_score_sp\"", "not", "in", "self", ".", "predictions", ":", "\n", "                    ", "sp_cross_entropy", "=", "0", "\n", "self", ".", "losses", "[", "'sp_cross_entropy'", "]", "=", "0", "\n", "", "loss", "=", "sp_cross_entropy", "+", "hoi_cross_entropy", "*", "lamb", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_orig_'", ")", ":", "\n", "                    ", "loss", "=", "loss", "+", "O_cross_entropy", "+", "H_cross_entropy", "\n", "print", "(", "'Add all loss'", ")", "\n", "", "if", "'fake_G_cls_score_hoi'", "in", "self", ".", "predictions", ":", "\n", "                    ", "fake_cls_score_verbs", "=", "self", ".", "predictions", "[", "\"fake_G_cls_score_hoi\"", "]", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_rew_'", ")", ":", "\n", "                        ", "fake_cls_score_verbs", "=", "tf", ".", "multiply", "(", "fake_cls_score_verbs", ",", "self", ".", "HO_weight", ")", "\n", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_rew2'", ")", ":", "\n", "                        ", "fake_cls_score_verbs", "=", "tf", ".", "multiply", "(", "fake_cls_score_verbs", ",", "self", ".", "HO_weight", "/", "10", ")", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_rew1'", ")", ":", "\n", "                        ", "fake_cls_score_verbs", "=", "tf", ".", "multiply", "(", "fake_cls_score_verbs", ",", "self", ".", "HO_weight", ")", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'rewn'", ")", ":", "\n", "                        ", "pass", "\n", "", "print", "(", "self", ".", "gt_class_HO_for_G_verbs", ",", "fake_cls_score_verbs", ",", "'======================================'", ")", "\n", "self", ".", "losses", "[", "'fake_G_verbs_cross_entropy'", "]", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "self", ".", "gt_class_HO_for_G_verbs", ",", "logits", "=", "fake_cls_score_verbs", ")", ")", "\n", "if", "'fake_G_total_loss'", "not", "in", "self", ".", "losses", ":", "\n", "                        ", "self", ".", "losses", "[", "'fake_G_total_loss'", "]", "=", "0", "\n", "", "gll", "=", "1.", "\n", "self", ".", "losses", "[", "'fake_G_total_loss'", "]", "+=", "(", "self", ".", "losses", "[", "'fake_G_verbs_cross_entropy'", "]", "*", "gll", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", "=", "H_cross_entropy", "+", "O_cross_entropy", "+", "sp_cross_entropy", "\n", "# verb loss", "\n", "", "temp", "=", "self", ".", "add_verb_loss", "(", "num_stop", ")", "\n", "loss", "+=", "temp", "\n", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_objloss'", ")", ":", "\n", "                ", "obj_cls_cross_entropy", "=", "self", ".", "add_objloss", "(", "num_stop", ")", "\n", "\n", "print", "(", "'add objloss'", ")", "\n", "loss", "+=", "obj_cls_cross_entropy", "\n", "\n", "", "self", ".", "losses", "[", "'total_loss'", "]", "=", "loss", "\n", "self", ".", "event_summaries", ".", "update", "(", "self", ".", "losses", ")", "\n", "", "print", "(", "self", ".", "losses", ")", "\n", "print", "(", "self", ".", "predictions", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.add_factorized_hoi_loss": [[606, 628], ["tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "add_factorized_hoi_loss", "(", "self", ",", "cls_score_objs", ",", "cls_score_verbs", ",", "gt_obj_label", ",", "gt_verb_label", ")", ":", "\n", "# cls_score_verbs = tf.multiply(cls_score_verbs, self.HO_weight)", "\n", "# cls_score_objs = tf.multiply(cls_score_objs, self.HO_weight)", "\n", "# tmp_label_HO = tf.Print(tmp_label_HO, [tf.shape(tmp_label_HO), tf.shape(cls_score_verbs)],'sdfsdfsdf')", "\n", "# print('=======', tmp_label_HO, cls_score_verbs)", "\n", "        ", "if", "self", ".", "model_name", ".", "__contains__", "(", "'batch'", ")", "and", "self", ".", "model_name", ".", "__contains__", "(", "'semi'", ")", ":", "\n", "            ", "semi_filter", "=", "tf", ".", "reduce_sum", "(", "self", ".", "H_boxes", "[", ":", "tf", ".", "shape", "(", "cls_score_verbs", ")", "[", "0", "]", ",", "1", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "semi_filter", "=", "tf", ".", "cast", "(", "semi_filter", ",", "tf", ".", "bool", ")", "\n", "\n", "gt_verb_label", "=", "tf", ".", "boolean_mask", "(", "gt_verb_label", ",", "semi_filter", ",", "axis", "=", "0", ")", "\n", "gt_obj_label", "=", "tf", ".", "boolean_mask", "(", "gt_obj_label", ",", "semi_filter", ",", "axis", "=", "0", ")", "\n", "cls_score_verbs", "=", "tf", ".", "boolean_mask", "(", "cls_score_verbs", ",", "semi_filter", ",", "axis", "=", "0", ")", "\n", "cls_score_objs", "=", "tf", ".", "boolean_mask", "(", "cls_score_objs", ",", "semi_filter", ",", "axis", "=", "0", ")", "\n", "", "tmp_verb_loss", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "gt_verb_label", ",", "logits", "=", "cls_score_verbs", ")", "\n", "\n", "tmp_obj_loss", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "gt_obj_label", ",", "logits", "=", "cls_score_objs", ")", "\n", "\n", "hoi_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tmp_verb_loss", ")", "+", "tf", ".", "reduce_mean", "(", "tmp_obj_loss", ")", "\n", "return", "hoi_cross_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_lamb_1": [[629, 648], ["HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__"], "methods", ["None"], ["", "def", "get_lamb_1", "(", "self", ")", ":", "\n", "        ", "lamb", "=", "1", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_l05_'", ")", ":", "\n", "            ", "lamb", "=", "0.5", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_l2_'", ")", ":", "\n", "            ", "lamb", "=", "2", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_l0_'", ")", ":", "\n", "            ", "lamb", "=", "0", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_l1_'", ")", ":", "\n", "            ", "lamb", "=", "1", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_l15_'", ")", ":", "\n", "            ", "lamb", "=", "1.5", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_l25_'", ")", ":", "\n", "            ", "lamb", "=", "2.5", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_l3_'", ")", ":", "\n", "            ", "lamb", "=", "3", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_l4_'", ")", ":", "\n", "            ", "lamb", "=", "4", "\n", "", "return", "lamb", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.filter_loss": [[649, 668], ["HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "filter_loss", "(", "self", ",", "cls_score_sp", ",", "label_sp", ")", ":", "\n", "        ", "if", "self", ".", "model_name", ".", "__contains__", "(", "'batch'", ")", "and", "self", ".", "model_name", ".", "__contains__", "(", "'semi'", ")", ":", "\n", "            ", "semi_filter", "=", "tf", ".", "reduce_sum", "(", "self", ".", "H_boxes", "[", ":", "tf", ".", "shape", "(", "cls_score_sp", ")", "[", "0", "]", ",", "1", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "# label_sp = tf.Print(label_sp, [tf.shape(semi_filter), semi_filter, self.H_boxes, tf.shape(label_sp)], 'batch debug0:', first_n=000, summarize=1000)", "\n", "\n", "semi_filter", "=", "tf", ".", "cast", "(", "semi_filter", ",", "tf", ".", "bool", ")", "\n", "\n", "# label_sp = tf.Print(label_sp, [tf.shape(semi_filter), semi_filter, tf.shape(label_sp)], 'batch debug:', first_n=000, summarize=1000)", "\n", "label", "=", "tf", ".", "boolean_mask", "(", "label_sp", ",", "semi_filter", ",", "axis", "=", "0", ")", "\n", "logits", "=", "tf", ".", "boolean_mask", "(", "cls_score_sp", ",", "semi_filter", ",", "axis", "=", "0", ")", "\n", "# label = tf.Print(label, [tf.shape(semi_filter), tf.shape(label)], 'batch debug1:', first_n=000)", "\n", "\n", "sp_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label", ",", "logits", "=", "logits", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "sp_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_sp", ",", "logits", "=", "cls_score_sp", ")", ")", "\n", "", "return", "sp_cross_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.cal_loss_by_weights": [[669, 674], ["tensorflow.multiply", "tensorflow.multiply", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "cal_loss_by_weights", "(", "self", ",", "cls_score", ",", "label", ",", "orig_weights", ")", ":", "\n", "        ", "sp_cross_entropy", "=", "tf", ".", "multiply", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label", ",", "logits", "=", "cls_score", ")", ",", "orig_weights", ")", "\n", "sp_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "sp_cross_entropy", ")", "\n", "return", "sp_cross_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.obtain_cbl_weights": [[675, 682], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "obtain_cbl_weights", "(", "self", ",", "tmp_label_HO", ",", "weights", ")", ":", "\n", "# weights = tf.expand_dims(weights, 0)", "\n", "        ", "weights", "=", "tf", ".", "tile", "(", "weights", ",", "[", "tf", ".", "shape", "(", "tmp_label_HO", ")", "[", "0", "]", ",", "1", "]", ")", "*", "tmp_label_HO", "\n", "weights", "=", "tf", ".", "reduce_sum", "(", "weights", ",", "axis", "=", "1", ")", "\n", "weights", "=", "tf", ".", "expand_dims", "(", "weights", ",", "1", ")", "\n", "weights", "=", "tf", ".", "tile", "(", "weights", ",", "[", "1", ",", "self", ".", "num_classes", "]", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.add_objloss": [[683, 715], ["HOI.HOI.model_name.__contains__", "model_name.replace.replace.__contains__", "model_name.replace.replace.__contains__", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "model_name.replace.replace.replace", "HOI.HOI.model_name.__contains__", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "model_name.replace.replace.__contains__", "tensorflow.matmul", "tensorflow.matmul", "model_name.replace.replace.__contains__", "HOI.HOI.get_hoi_labels", "model_name.replace.replace.__contains__", "model_name.replace.replace.__contains__", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.get_hoi_labels"], ["", "def", "add_objloss", "(", "self", ",", "num_stop", ")", ":", "\n", "        ", "obj_cls_score", "=", "self", ".", "predictions", "[", "\"obj_cls_score_o\"", "]", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_ce'", ")", ":", "\n", "            ", "obj_cls_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "\n", "labels", "=", "self", ".", "gt_obj_class", "[", ":", "num_stop", "]", ",", "logits", "=", "obj_cls_score", "[", ":", "num_stop", ",", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "label_obj", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "matmul", "(", "self", ".", "get_hoi_labels", "(", ")", ",", "self", ".", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "obj_cls_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "label_obj", "[", ":", "tf", ".", "shape", "(", "obj_cls_score", ")", "[", "0", "]", ",", ":", "]", ",", "logits", "=", "obj_cls_score", ")", ")", "\n", "", "self", ".", "losses", "[", "\"obj_cls_cross_entropy_o\"", "]", "=", "obj_cls_cross_entropy", "\n", "\n", "model_name", "=", "self", ".", "model_name", "\n", "if", "model_name", ".", "__contains__", "(", "'_pobjloss'", ")", ":", "\n", "            ", "model_name", "=", "model_name", ".", "replace", "(", "\"_pobjloss\"", ",", "'_objloss'", ")", "\n", "", "lambda1", "=", "0.1", "\n", "if", "model_name", ".", "__contains__", "(", "'_objloss10'", ")", ":", "\n", "            ", "lambda1", "=", "1.0", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_objloss20'", ")", ":", "\n", "            ", "lambda1", "=", "2.0", "\n", "", "elif", "model_name", ".", "__contains__", "(", "'_objloss1'", ")", ":", "\n", "            ", "lambda1", "=", "0.5", "\n", "", "elif", "model_name", ".", "__contains__", "(", "'_objloss2'", ")", ":", "\n", "            ", "lambda1", "=", "0.3", "\n", "", "elif", "model_name", ".", "__contains__", "(", "'_objloss3'", ")", ":", "\n", "            ", "lambda1", "=", "0.08", "\n", "", "elif", "model_name", ".", "__contains__", "(", "'_objloss4'", ")", ":", "\n", "            ", "lambda1", "=", "0.05", "\n", "", "temp", "=", "(", "obj_cls_cross_entropy", "*", "lambda1", ")", "\n", "\n", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.add_verb_loss": [[716, 768], ["HOI.HOI.filter_loss", "print", "HOI.HOI.model_name.__contains__", "HOI.HOI.filter_loss", "print", "HOI.HOI.model_name.__contains__", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__", "HOI.HOI.model_name.__contains__"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.filter_loss", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.filter_loss"], ["", "def", "add_verb_loss", "(", "self", ",", "num_stop", ")", ":", "\n", "        ", "temp", "=", "0", "\n", "if", "'verb_cls_score'", "in", "self", ".", "predictions", ":", "\n", "            ", "vloss_num_stop", "=", "num_stop", "\n", "verb_cls_score", "=", "self", ".", "predictions", "[", "\"verb_cls_score\"", "]", "\n", "verb_cls_cross_entropy", "=", "self", ".", "filter_loss", "(", "verb_cls_score", "[", ":", "vloss_num_stop", ",", ":", "]", ",", "\n", "self", ".", "gt_verb_class", "[", ":", "vloss_num_stop", "]", ")", "\n", "self", ".", "losses", "[", "\"verb_cls_cross_entropy\"", "]", "=", "verb_cls_cross_entropy", "\n", "if", "'verb_cls_score_gcn'", "in", "self", ".", "predictions", ":", "\n", "                ", "verb_cls_score", "=", "self", ".", "predictions", "[", "\"verb_cls_score_gcn\"", "]", "\n", "verb_cls_cross_entropy1", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "self", ".", "gt_verb_class", "[", ":", "vloss_num_stop", "]", ",", "logits", "=", "verb_cls_score", "[", ":", "vloss_num_stop", ",", ":", "]", ")", ")", "\n", "self", ".", "losses", "[", "\"verb_cls_cross_entropy_gcn\"", "]", "=", "verb_cls_cross_entropy1", "\n", "verb_cls_cross_entropy", "+=", "verb_cls_cross_entropy1", "\n", "", "print", "(", "'add vloss-------'", ")", "\n", "# neg 0.1, negv1 0.5 negv12 0.1 1", "\n", "lambda1", "=", "0.1", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'vloss10'", ")", ":", "\n", "                ", "lambda1", "=", "1.0", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'vloss20'", ")", ":", "\n", "                ", "lambda1", "=", "2.0", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'vloss1'", ")", ":", "\n", "                ", "lambda1", "=", "0.5", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'vloss2'", ")", ":", "\n", "                ", "lambda1", "=", "0.3", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'vloss3'", ")", ":", "\n", "                ", "lambda1", "=", "0.08", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'vloss4'", ")", ":", "\n", "                ", "lambda1", "=", "0.05", "\n", "", "temp", "=", "(", "verb_cls_cross_entropy", "*", "lambda1", ")", "\n", "", "if", "'verb_cls_score_nvgcn_a'", "in", "self", ".", "predictions", ":", "\n", "            ", "vloss_num_stop", "=", "num_stop", "\n", "verb_cls_score", "=", "self", ".", "predictions", "[", "\"verb_cls_score_nvgcn_a\"", "]", "\n", "verb_cls_cross_entropy", "=", "self", ".", "filter_loss", "(", "verb_cls_score", "[", ":", "vloss_num_stop", ",", ":", "]", ",", "\n", "self", ".", "gt_verb_class", "[", ":", "vloss_num_stop", "]", ")", "\n", "\n", "self", ".", "losses", "[", "\"verb_cls_cross_entropy_nvgcn_a\"", "]", "=", "verb_cls_cross_entropy", "\n", "print", "(", "'add vloss==========='", ")", "\n", "# neg 0.1, negv1 0.5 negv12 0.1 1", "\n", "lambda1", "=", "0.1", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_nvgcn_a10'", ")", ":", "\n", "                ", "lambda1", "=", "1.0", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_nvgcn_a1'", ")", ":", "\n", "                ", "lambda1", "=", "0.5", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_nvgcn_a2'", ")", ":", "\n", "                ", "lambda1", "=", "0.3", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_nvgcn_a3'", ")", ":", "\n", "                ", "lambda1", "=", "0.08", "\n", "", "elif", "self", ".", "model_name", ".", "__contains__", "(", "'_nvgcn_a4'", ")", ":", "\n", "                ", "lambda1", "=", "0.05", "\n", "", "temp", "+=", "(", "verb_cls_cross_entropy", "*", "lambda1", ")", "\n", "", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.add_verb_ho_loss": [[769, 780], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "print", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "add_verb_ho_loss", "(", "self", ",", "num_stop", ")", ":", "\n", "        ", "vloss_num_stop", "=", "num_stop", "\n", "verb_cls_score", "=", "self", ".", "predictions", "[", "\"verb_cls_score\"", "]", "\n", "verb_cls_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "labels", "=", "self", ".", "gt_class_HO", "[", ":", "vloss_num_stop", "]", ",", "logits", "=", "verb_cls_score", "[", ":", "vloss_num_stop", ",", ":", "]", ")", ")", "\n", "self", ".", "losses", "[", "\"verb_cls_cross_entropy\"", "]", "=", "verb_cls_cross_entropy", "\n", "print", "(", "'add vloss'", ")", "\n", "# neg 0.1, negv1 0.5 negv12 0.1 1", "\n", "lambda1", "=", "1", "\n", "temp", "=", "(", "verb_cls_cross_entropy", "*", "lambda1", ")", "\n", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.train_step": [[781, 788], ["HOI.HOI.get_feed_dict", "sess.run"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.get_feed_dict"], ["", "def", "train_step", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "        ", "feed_dict", "=", "self", ".", "get_feed_dict", "(", "blobs", ")", "\n", "\n", "loss", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "\n", "train_op", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.HOI.HOI.train_step_with_summary": [[789, 797], ["HOI.HOI.get_feed_dict", "sess.run"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.get_feed_dict"], ["", "def", "train_step_with_summary", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "        ", "feed_dict", "=", "self", ".", "get_feed_dict", "(", "blobs", ")", "\n", "\n", "loss", ",", "summary", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "\n", "self", ".", "summary_op", ",", "\n", "train_op", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "loss", ",", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.__init__": [[54, 204], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "numpy.array().reshape", "numpy.load", "ult.tools.get_convert_matrix", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "Exception", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "ResNet101_HICO.ResNet101.model_name.__contains__", "ResNet101_HICO.ResNet101.model_name.__contains__", "ResNet101_HICO.ResNet101.model_name.__contains__", "print", "ResNet101_HICO.ResNet101.blocks.append", "numpy.array", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "resnet_v1_block"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_convert_matrix"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "visualize", "=", "{", "}", "\n", "self", ".", "test_visualize", "=", "{", "}", "\n", "self", ".", "intermediate", "=", "{", "}", "\n", "self", ".", "predictions", "=", "{", "}", "\n", "self", ".", "score_summaries", "=", "{", "}", "\n", "self", ".", "event_summaries", "=", "{", "}", "\n", "self", ".", "train_summaries", "=", "[", "]", "\n", "self", ".", "losses", "=", "{", "}", "\n", "\n", "self", ".", "image", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "1", ",", "None", ",", "None", ",", "3", "]", ",", "name", "=", "'image'", ")", "\n", "self", ".", "spatial", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "64", ",", "64", ",", "3", "]", ",", "name", "=", "'sp'", ")", "\n", "self", ".", "H_boxes", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "5", "]", ",", "name", "=", "'H_boxes'", ")", "\n", "self", ".", "O_boxes", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "5", "]", ",", "name", "=", "'O_boxes'", ")", "\n", "self", ".", "gt_class_HO", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "600", "]", ",", "name", "=", "'gt_class_HO'", ")", "\n", "self", ".", "H_num", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "# positive nums", "\n", "self", ".", "image_id", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "num_classes", "=", "600", "\n", "self", ".", "compose_num_classes", "=", "600", "\n", "self", ".", "num_fc", "=", "1024", "\n", "self", ".", "verb_num_classes", "=", "117", "\n", "self", ".", "obj_num_classes", "=", "80", "\n", "self", ".", "scope", "=", "'resnet_v1_101'", "\n", "self", ".", "stride", "=", "[", "16", ",", "]", "\n", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "if", "tf", ".", "__version__", "==", "'1.1.0'", ":", "\n", "            ", "raise", "Exception", "(", "'wrong tensorflow version 1.1.0'", ")", "\n", "", "else", ":", "\n", "            ", "from", "tensorflow", ".", "contrib", ".", "slim", ".", "python", ".", "slim", ".", "nets", ".", "resnet_v1", "import", "resnet_v1_block", "\n", "self", ".", "blocks", "=", "[", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "64", ",", "num_units", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "128", ",", "num_units", "=", "4", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "256", ",", "num_units", "=", "23", ",", "stride", "=", "1", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "resnet_v1_block", "(", "'block5'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", "]", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'unique_weights'", ")", "or", "self", ".", "model_name", ".", "__contains__", "(", "'_pa3'", ")", "or", "self", ".", "model_name", ".", "__contains__", "(", "'_pa4'", ")", ":", "\n", "                ", "print", "(", "\"add block6 unique_weights2\"", ")", "\n", "self", ".", "blocks", ".", "append", "(", "resnet_v1_block", "(", "'block6'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", ")", "\n", "\n", "", "", "\"\"\"We copy from TIN. calculated by log(1/(n_c/sum(n_c)) c is the category and n_c is \n        the number of positive samples\"\"\"", "\n", "self", ".", "HO_weight", "=", "np", ".", "array", "(", "[", "\n", "9.192927", ",", "9.778443", ",", "10.338059", ",", "9.164914", ",", "9.075144", ",", "10.045923", ",", "8.714437", ",", "8.59822", ",", "12.977117", ",", "6.2745423", ",", "\n", "11.227917", ",", "6.765012", ",", "9.436157", ",", "9.56762", ",", "11.0675745", ",", "11.530198", ",", "9.609821", ",", "9.897503", ",", "6.664475", ",", "6.811699", ",", "\n", "6.644726", ",", "9.170454", ",", "13.670264", ",", "3.903943", ",", "10.556748", ",", "8.814335", ",", "9.519224", ",", "12.753973", ",", "11.590822", ",", "8.278912", ",", "\n", "5.5245695", ",", "9.7286825", ",", "8.997436", ",", "10.699849", ",", "9.601237", ",", "11.965516", ",", "9.192927", ",", "10.220277", ",", "6.056692", ",", "7.734048", ",", "\n", "8.42324", ",", "6.586457", ",", "6.969533", ",", "10.579222", ",", "13.670264", ",", "4.4531965", ",", "9.326459", ",", "9.288238", ",", "8.071842", ",", "10.431585", ",", "\n", "12.417501", ",", "11.530198", ",", "11.227917", ",", "4.0678477", ",", "8.854023", ",", "12.571651", ",", "8.225684", ",", "10.996116", ",", "11.0675745", ",", "\n", "10.100731", ",", "\n", "7.0376034", ",", "7.463688", ",", "12.571651", ",", "14.363411", ",", "5.4902234", ",", "11.0675745", ",", "14.363411", ",", "8.45805", ",", "10.269067", ",", "\n", "9.820116", ",", "\n", "14.363411", ",", "11.272368", ",", "11.105314", ",", "7.981595", ",", "9.198626", ",", "3.3284247", ",", "14.363411", ",", "12.977117", ",", "9.300817", ",", "\n", "10.032678", ",", "\n", "12.571651", ",", "10.114916", ",", "10.471591", ",", "13.264799", ",", "14.363411", ",", "8.01953", ",", "10.412168", ",", "9.644913", ",", "9.981384", ",", "\n", "7.2197933", ",", "\n", "14.363411", ",", "3.1178555", ",", "11.031207", ",", "8.934066", ",", "7.546675", ",", "6.386472", ",", "12.060826", ",", "8.862153", ",", "9.799063", ",", "12.753973", ",", "\n", "12.753973", ",", "10.412168", ",", "10.8976755", ",", "10.471591", ",", "12.571651", ",", "9.519224", ",", "6.207762", ",", "12.753973", ",", "6.60636", ",", "\n", "6.2896967", ",", "\n", "4.5198326", ",", "9.7887", ",", "13.670264", ",", "11.878505", ",", "11.965516", ",", "8.576513", ",", "11.105314", ",", "9.192927", ",", "11.47304", ",", "11.367679", ",", "\n", "9.275815", ",", "11.367679", ",", "9.944571", ",", "11.590822", ",", "10.451388", ",", "9.511381", ",", "11.144535", ",", "13.264799", ",", "5.888291", ",", "\n", "11.227917", ",", "\n", "10.779892", ",", "7.643191", ",", "11.105314", ",", "9.414651", ",", "11.965516", ",", "14.363411", ",", "12.28397", ",", "9.909063", ",", "8.94731", ",", "7.0330057", ",", "\n", "8.129001", ",", "7.2817025", ",", "9.874775", ",", "9.758241", ",", "11.105314", ",", "5.0690055", ",", "7.4768796", ",", "10.129305", ",", "9.54313", ",", "13.264799", ",", "\n", "9.699972", ",", "11.878505", ",", "8.260853", ",", "7.1437693", ",", "6.9321113", ",", "6.990665", ",", "8.8104515", ",", "11.655361", ",", "13.264799", ",", "\n", "4.515912", ",", "\n", "9.897503", ",", "11.418972", ",", "8.113436", ",", "8.795067", ",", "10.236277", ",", "12.753973", ",", "14.363411", ",", "9.352776", ",", "12.417501", ",", "\n", "0.6271591", ",", "\n", "12.060826", ",", "12.060826", ",", "12.166186", ",", "5.2946343", ",", "11.318889", ",", "9.8308115", ",", "8.016022", ",", "9.198626", ",", "10.8976755", ",", "\n", "13.670264", ",", "\n", "11.105314", ",", "14.363411", ",", "9.653881", ",", "9.503599", ",", "12.753973", ",", "5.80546", ",", "9.653881", ",", "9.592727", ",", "12.977117", ",", "13.670264", ",", "\n", "7.995224", ",", "8.639826", ",", "12.28397", ",", "6.586876", ",", "10.929424", ",", "13.264799", ",", "8.94731", ",", "6.1026597", ",", "12.417501", ",", "11.47304", ",", "\n", "10.451388", ",", "8.95624", ",", "10.996116", ",", "11.144535", ",", "11.031207", ",", "13.670264", ",", "13.670264", ",", "6.397866", ",", "7.513285", ",", "9.981384", ",", "\n", "11.367679", ",", "11.590822", ",", "7.4348736", ",", "4.415428", ",", "12.166186", ",", "8.573451", ",", "12.977117", ",", "9.609821", ",", "8.601359", ",", "9.055143", ",", "\n", "11.965516", ",", "11.105314", ",", "13.264799", ",", "5.8201604", ",", "10.451388", ",", "9.944571", ",", "7.7855496", ",", "14.363411", ",", "8.5463", ",", "\n", "13.670264", ",", "\n", "7.9288645", ",", "5.7561946", ",", "9.075144", ",", "9.0701065", ",", "5.6871653", ",", "11.318889", ",", "10.252538", ",", "9.758241", ",", "9.407584", ",", "\n", "13.670264", ",", "\n", "8.570397", ",", "9.326459", ",", "7.488179", ",", "11.798462", ",", "9.897503", ",", "6.7530537", ",", "4.7828183", ",", "9.519224", ",", "7.6492405", ",", "8.031909", ",", "\n", "7.8180614", ",", "4.451856", ",", "10.045923", ",", "10.83705", ",", "13.264799", ",", "13.670264", ",", "4.5245686", ",", "14.363411", ",", "10.556748", ",", "\n", "10.556748", ",", "\n", "14.363411", ",", "13.670264", ",", "14.363411", ",", "8.037262", ",", "8.59197", ",", "9.738439", ",", "8.652985", ",", "10.045923", ",", "9.400566", ",", "10.9622135", ",", "\n", "11.965516", ",", "10.032678", ",", "5.9017305", ",", "9.738439", ",", "12.977117", ",", "11.105314", ",", "10.725825", ",", "9.080208", ",", "11.272368", ",", "\n", "14.363411", ",", "\n", "14.363411", ",", "13.264799", ",", "6.9279733", ",", "9.153925", ",", "8.075553", ",", "9.126969", ",", "14.363411", ",", "8.903826", ",", "9.488214", ",", "5.4571533", ",", "\n", "10.129305", ",", "10.579222", ",", "12.571651", ",", "11.965516", ",", "6.237189", ",", "9.428937", ",", "9.618479", ",", "8.620408", ",", "11.590822", ",", "\n", "11.655361", ",", "\n", "9.968962", ",", "10.8080635", ",", "10.431585", ",", "14.363411", ",", "3.796231", ",", "12.060826", ",", "10.302968", ",", "9.551227", ",", "8.75394", ",", "\n", "10.579222", ",", "\n", "9.944571", ",", "14.363411", ",", "6.272396", ",", "10.625742", ",", "9.690582", ",", "13.670264", ",", "11.798462", ",", "13.670264", ",", "11.724354", ",", "\n", "9.993963", ",", "\n", "8.230013", ",", "9.100721", ",", "10.374427", ",", "7.865129", ",", "6.514087", ",", "14.363411", ",", "11.031207", ",", "11.655361", ",", "12.166186", ",", "7.419324", ",", "\n", "9.421769", ",", "9.653881", ",", "10.996116", ",", "12.571651", ",", "13.670264", ",", "5.912144", ",", "9.7887", ",", "8.585759", ",", "8.272101", ",", "11.530198", ",", "\n", "8.886948", ",", "\n", "5.9870906", ",", "9.269661", ",", "11.878505", ",", "11.227917", ",", "13.670264", ",", "8.339964", ",", "7.6763024", ",", "10.471591", ",", "10.451388", ",", "\n", "13.670264", ",", "\n", "11.185357", ",", "10.032678", ",", "9.313555", ",", "12.571651", ",", "3.993144", ",", "9.379805", ",", "9.609821", ",", "14.363411", ",", "9.709451", ",", "8.965248", ",", "\n", "10.451388", ",", "7.0609145", ",", "10.579222", ",", "13.264799", ",", "10.49221", ",", "8.978916", ",", "7.124196", ",", "10.602211", ",", "8.9743395", ",", "7.77862", ",", "\n", "8.073695", ",", "9.644913", ",", "9.339531", ",", "8.272101", ",", "4.794418", ",", "9.016304", ",", "8.012526", ",", "10.674532", ",", "14.363411", ",", "7.995224", ",", "\n", "12.753973", ",", "5.5157638", ",", "8.934066", ",", "10.779892", ",", "7.930471", ",", "11.724354", ",", "8.85808", ",", "5.9025764", ",", "14.363411", ",", "\n", "12.753973", ",", "\n", "12.417501", ",", "8.59197", ",", "10.513264", ",", "10.338059", ",", "14.363411", ",", "7.7079706", ",", "14.363411", ",", "13.264799", ",", "13.264799", ",", "\n", "10.752493", ",", "\n", "14.363411", ",", "14.363411", ",", "13.264799", ",", "12.417501", ",", "13.670264", ",", "6.5661197", ",", "12.977117", ",", "11.798462", ",", "9.968962", ",", "\n", "12.753973", ",", "\n", "11.47304", ",", "11.227917", ",", "7.6763024", ",", "10.779892", ",", "11.185357", ",", "14.363411", ",", "7.369478", ",", "14.363411", ",", "9.944571", ",", "\n", "10.779892", ",", "\n", "10.471591", ",", "9.54313", ",", "9.148476", ",", "10.285873", ",", "10.412168", ",", "12.753973", ",", "14.363411", ",", "6.0308623", ",", "13.670264", ",", "\n", "10.725825", ",", "\n", "12.977117", ",", "11.272368", ",", "7.663911", ",", "9.137665", ",", "10.236277", ",", "13.264799", ",", "6.715625", ",", "10.9622135", ",", "14.363411", ",", "\n", "13.264799", ",", "\n", "9.575919", ",", "9.080208", ",", "11.878505", ",", "7.1863923", ",", "9.366199", ",", "8.854023", ",", "9.874775", ",", "8.2857685", ",", "13.670264", ",", "11.878505", ",", "\n", "12.166186", ",", "7.616999", ",", "9.44343", ",", "8.288065", ",", "8.8104515", ",", "8.347254", ",", "7.4738197", ",", "10.302968", ",", "6.936267", ",", "11.272368", ",", "\n", "7.058223", ",", "5.0138307", ",", "12.753973", ",", "10.173757", ",", "9.863602", ",", "11.318889", ",", "9.54313", ",", "10.996116", ",", "12.753973", ",", "\n", "7.8339925", ",", "\n", "7.569945", ",", "7.4427395", ",", "5.560738", ",", "12.753973", ",", "10.725825", ",", "10.252538", ",", "9.307165", ",", "8.491293", ",", "7.9161053", ",", "\n", "7.8849015", ",", "\n", "7.782772", ",", "6.3088884", ",", "8.866243", ",", "9.8308115", ",", "14.363411", ",", "10.8976755", ",", "5.908519", ",", "10.269067", ",", "9.176025", ",", "\n", "9.852551", ",", "\n", "9.488214", ",", "8.90809", ",", "8.537411", ",", "9.653881", ",", "8.662968", ",", "11.965516", ",", "10.143904", ",", "14.363411", ",", "14.363411", ",", "9.407584", ",", "\n", "5.281472", ",", "11.272368", ",", "12.060826", ",", "14.363411", ",", "7.4135547", ",", "8.920994", ",", "9.618479", ",", "8.891141", ",", "14.363411", ",", "\n", "12.060826", ",", "\n", "11.965516", ",", "10.9622135", ",", "10.9622135", ",", "14.363411", ",", "5.658909", ",", "8.934066", ",", "12.571651", ",", "8.614018", ",", "11.655361", ",", "\n", "13.264799", ",", "\n", "10.996116", ",", "13.670264", ",", "8.965248", ",", "9.326459", ",", "11.144535", ",", "14.363411", ",", "6.0517673", ",", "10.513264", ",", "8.7430105", ",", "\n", "10.338059", ",", "\n", "13.264799", ",", "6.878481", ",", "9.065094", ",", "8.87035", ",", "14.363411", ",", "9.92076", ",", "6.5872955", ",", "10.32036", ",", "14.363411", ",", "9.944571", ",", "\n", "11.798462", ",", "10.9622135", ",", "11.031207", ",", "7.652888", ",", "4.334878", ",", "13.670264", ",", "13.670264", ",", "14.363411", ",", "10.725825", ",", "\n", "12.417501", ",", "\n", "14.363411", ",", "13.264799", ",", "11.655361", ",", "10.338059", ",", "13.264799", ",", "12.753973", ",", "8.206432", ",", "8.916674", ",", "8.59509", ",", "\n", "14.363411", ",", "\n", "7.376845", ",", "11.798462", ",", "11.530198", ",", "11.318889", ",", "11.185357", ",", "5.0664344", ",", "11.185357", ",", "9.372978", ",", "10.471591", ",", "\n", "9.6629305", ",", "\n", "11.367679", ",", "8.73579", ",", "9.080208", ",", "11.724354", ",", "5.04781", ",", "7.3777695", ",", "7.065643", ",", "12.571651", ",", "11.724354", ",", "12.166186", ",", "\n", "12.166186", ",", "7.215852", ",", "4.374113", ",", "11.655361", ",", "11.530198", ",", "14.363411", ",", "6.4993753", ",", "11.031207", ",", "8.344818", ",", "\n", "10.513264", ",", "\n", "10.032678", ",", "14.363411", ",", "14.363411", ",", "4.5873594", ",", "12.28397", ",", "13.670264", ",", "12.977117", ",", "10.032678", ",", "9.609821", "\n", "]", ",", "dtype", "=", "'float32'", ")", ".", "reshape", "(", "1", ",", "600", ")", "\n", "num_inst_path", "=", "cfg", ".", "ROOT_DIR", "+", "'/Data/num_inst.npy'", "\n", "num_inst", "=", "np", ".", "load", "(", "num_inst_path", ")", "\n", "self", ".", "num_inst", "=", "num_inst", "\n", "\n", "verb_to_HO_matrix", ",", "obj_to_HO_matrix", "=", "get_convert_matrix", "(", "self", ".", "verb_num_classes", ",", "self", ".", "obj_num_classes", ")", "\n", "\n", "self", ".", "obj_to_HO_matrix", "=", "tf", ".", "constant", "(", "obj_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "verb_to_HO_matrix", "=", "tf", ".", "constant", "(", "verb_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "gt_obj_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_class_HO", ",", "self", ".", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "self", ".", "gt_verb_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_class_HO", ",", "self", ".", "verb_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.init_table": [[205, 207], ["None"], "methods", ["None"], ["", "def", "init_table", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.set_ph": [[208, 218], ["ResNet101_HICO.ResNet101.reset_classes"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.reset_classes"], ["", "def", "set_ph", "(", "self", ",", "image", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", "=", "None", ",", "sp", "=", "None", ")", ":", "\n", "        ", "if", "image", "is", "not", "None", ":", "self", ".", "image", "=", "image", "\n", "if", "image_id", "is", "not", "None", ":", "self", ".", "image_id", "=", "image_id", "\n", "if", "sp", "is", "not", "None", ":", "self", ".", "spatial", "=", "sp", "\n", "if", "Human_augmented", "is", "not", "None", ":", "self", ".", "H_boxes", "=", "Human_augmented", "\n", "if", "Object_augmented", "is", "not", "None", ":", "self", ".", "O_boxes", "=", "Object_augmented", "\n", "if", "action_HO", "is", "not", "None", ":", "self", ".", "gt_class_HO", "=", "action_HO", "\n", "self", ".", "H_num", "=", "num_pos", "\n", "\n", "self", ".", "reset_classes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.reset_classes": [[219, 228], ["ult.tools.get_convert_matrix", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_convert_matrix"], ["", "def", "reset_classes", "(", "self", ")", ":", "\n", "        ", "from", "ult", ".", "tools", "import", "get_convert_matrix", "\n", "verb_to_HO_matrix", ",", "obj_to_HO_matrix", "=", "get_convert_matrix", "(", "self", ".", "verb_num_classes", ",", "self", ".", "obj_num_classes", ")", "\n", "self", ".", "obj_to_HO_matrix", "=", "tf", ".", "constant", "(", "obj_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "verb_to_HO_matrix", "=", "tf", ".", "constant", "(", "verb_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "gt_obj_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_class_HO", ",", "self", ".", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "self", ".", "gt_verb_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_class_HO", ",", "self", ".", "verb_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.build_base": [[229, 236], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.conv2d_same", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.conv2d_same", "tensorflow.pad", "tensorflow.pad", "tensorflow.max_pool2d", "tensorflow.max_pool2d"], "methods", ["None"], ["", "def", "build_base", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "self", ".", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", ")", ":", "\n", "            ", "net", "=", "resnet_utils", ".", "conv2d_same", "(", "self", ".", "image", ",", "64", ",", "7", ",", "stride", "=", "2", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "tf", ".", "pad", "(", "net", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'pool1'", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.image_to_head": [[237, 259], ["tensorflow.arg_scope", "tensorflow.arg_scope", "ResNet101_HICO.ResNet101.build_base", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.arg_scope", "tensorflow.arg_scope", "ResNet101_HICO.ResNet101.model_name.__contains__", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "ResNet101_HICO.resnet_arg_scope", "ResNet101_HICO.resnet_arg_scope", "print"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.build_base", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "image_to_head", "(", "self", ",", "is_training", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "False", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "build_base", "(", ")", "\n", "net", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "net", ",", "\n", "self", ".", "blocks", "[", "0", ":", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "            ", "if", "self", ".", "model_name", ".", "__contains__", "(", "'unique_weights'", ")", ":", "\n", "                ", "print", "(", "\"unique_weights3\"", ")", "\n", "stop", "=", "-", "3", "\n", "", "else", ":", "\n", "                ", "stop", "=", "-", "2", "\n", "", "head", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "net", ",", "\n", "self", ".", "blocks", "[", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", ":", "stop", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "", "return", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.sp_to_head": [[260, 272], ["tensorflow.variable_scope", "tensorflow.variable_scope", "ResNet101_HICO.ResNet101.model_name.__contains__", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.flatten", "tensorflow.flatten"], "methods", ["None"], ["", "def", "sp_to_head", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "self", ".", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", ")", ":", "\n", "            ", "ends", "=", "2", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_spose'", ")", ":", "\n", "                ", "ends", "=", "3", "\n", "", "conv1_sp", "=", "slim", ".", "conv2d", "(", "self", ".", "spatial", "[", ":", ",", ":", ",", ":", ",", "0", ":", "ends", "]", ",", "64", ",", "[", "5", ",", "5", "]", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'conv1_sp'", ")", "\n", "pool1_sp", "=", "slim", ".", "max_pool2d", "(", "conv1_sp", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool1_sp'", ")", "\n", "conv2_sp", "=", "slim", ".", "conv2d", "(", "pool1_sp", ",", "32", ",", "[", "5", ",", "5", "]", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'conv2_sp'", ")", "\n", "pool2_sp", "=", "slim", ".", "max_pool2d", "(", "conv2_sp", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool2_sp'", ")", "\n", "pool2_flat_sp", "=", "slim", ".", "flatten", "(", "pool2_sp", ")", "\n", "\n", "", "return", "pool2_flat_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.res5": [[273, 300], ["tensorflow.arg_scope", "tensorflow.arg_scope", "ResNet101_HICO.resnet_arg_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "res5", "(", "self", ",", "pool5_H", ",", "pool5_O", ",", "sp", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "            ", "if", "pool5_H", "is", "None", ":", "\n", "                ", "fc7_H", "=", "None", "\n", "", "else", ":", "\n", "                ", "fc7_H", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "pool5_H", ",", "\n", "self", ".", "blocks", "[", "-", "2", ":", "-", "1", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "\n", "# fc7_H = tf.reduce_mean(fc7_H, axis=[1, 2])", "\n", "\n", "", "if", "pool5_O", "is", "None", ":", "\n", "                ", "fc7_O", "=", "None", "\n", "", "else", ":", "\n", "                ", "fc7_O", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "pool5_O", ",", "\n", "self", ".", "blocks", "[", "-", "1", ":", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "\n", "# fc7_O = tf.reduce_mean(fc7_O, axis=[1, 2])", "\n", "\n", "", "", "return", "fc7_H", ",", "fc7_O", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.head_to_tail": [[301, 326], ["tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.concat", "tensorflow.concat", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.concat", "tensorflow.concat", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.concat", "tensorflow.concat", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "ResNet101_HICO.resnet_arg_scope"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "head_to_tail", "(", "self", ",", "fc7_H", ",", "fc7_O", ",", "pool5_SH", ",", "pool5_SO", ",", "sp", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "\n", "            ", "fc7_SH", "=", "tf", ".", "reduce_mean", "(", "pool5_SH", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "fc7_SO", "=", "tf", ".", "reduce_mean", "(", "pool5_SO", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "\n", "Concat_SH", "=", "tf", ".", "concat", "(", "[", "fc7_H", ",", "fc7_SH", "]", ",", "1", ")", "\n", "fc8_SH", "=", "slim", ".", "fully_connected", "(", "Concat_SH", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc8_SH'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "fc8_SH", "=", "slim", ".", "dropout", "(", "fc8_SH", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout8_SH'", ")", "\n", "fc9_SH", "=", "slim", ".", "fully_connected", "(", "fc8_SH", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc9_SH'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "fc9_SH", "=", "slim", ".", "dropout", "(", "fc9_SH", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout9_SH'", ")", "\n", "\n", "Concat_SO", "=", "tf", ".", "concat", "(", "[", "fc7_O", ",", "fc7_SO", "]", ",", "1", ")", "\n", "fc8_SO", "=", "slim", ".", "fully_connected", "(", "Concat_SO", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc8_SO'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "fc8_SO", "=", "slim", ".", "dropout", "(", "fc8_SO", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout8_SO'", ")", "\n", "fc9_SO", "=", "slim", ".", "fully_connected", "(", "fc8_SO", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc9_SO'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "fc9_SO", "=", "slim", ".", "dropout", "(", "fc9_SO", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout9_SO'", ")", "\n", "\n", "Concat_SHsp", "=", "tf", ".", "concat", "(", "[", "fc7_H", ",", "sp", "]", ",", "1", ")", "\n", "Concat_SHsp", "=", "slim", ".", "fully_connected", "(", "Concat_SHsp", ",", "self", ".", "num_fc", ",", "scope", "=", "'Concat_SHsp'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "Concat_SHsp", "=", "slim", ".", "dropout", "(", "Concat_SHsp", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout6_SHsp'", ")", "\n", "fc7_SHsp", "=", "slim", ".", "fully_connected", "(", "Concat_SHsp", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc7_SHsp'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "fc7_SHsp", "=", "slim", ".", "dropout", "(", "fc7_SHsp", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout7_SHsp'", ")", "\n", "\n", "", "return", "fc9_SH", ",", "fc9_SO", ",", "fc7_SHsp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.crop_pool_layer": [[328, 340], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.squeeze", "tensorflow.squeeze", "ResNet101_HICO.ResNet101.trans_boxes_by_feats", "tensorflow.slice", "tensorflow.slice", "tensorflow.image.crop_and_resize", "tensorflow.image.crop_and_resize", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.image.crop_and_resize", "tensorflow.image.crop_and_resize", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.trans_boxes_by_feats"], ["", "def", "crop_pool_layer", "(", "self", ",", "bottom", ",", "rois", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "batch_ids", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"batch_id\"", ")", ",", "[", "1", "]", ")", "\n", "bboxes", "=", "self", ".", "trans_boxes_by_feats", "(", "bottom", ",", "rois", ")", "\n", "if", "cfg", ".", "RESNET", ".", "MAX_POOL", ":", "\n", "                ", "pre_pool_size", "=", "cfg", ".", "POOLING_SIZE", "*", "2", "\n", "crops", "=", "tf", ".", "image", ".", "crop_and_resize", "(", "bottom", ",", "bboxes", ",", "tf", ".", "to_int32", "(", "batch_ids", ")", ",", "[", "pre_pool_size", ",", "pre_pool_size", "]", ",", "name", "=", "\"crops\"", ")", "\n", "crops", "=", "slim", ".", "max_pool2d", "(", "crops", ",", "[", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ")", "\n", "", "else", ":", "\n", "                ", "crops", "=", "tf", ".", "image", ".", "crop_and_resize", "(", "bottom", ",", "bboxes", ",", "tf", ".", "to_int32", "(", "batch_ids", ")", ",", "[", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", "]", ",", "name", "=", "\"crops\"", ")", "\n", "", "", "return", "crops", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.trans_boxes_by_feats": [[341, 351], ["tensorflow.shape", "tensorflow.shape", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "numpy.float32", "numpy.float32", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.concat", "tensorflow.concat", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float"], "methods", ["None"], ["", "def", "trans_boxes_by_feats", "(", "self", ",", "bottom", ",", "rois", ")", ":", "\n", "        ", "bottom_shape", "=", "tf", ".", "shape", "(", "bottom", ")", "\n", "height", "=", "(", "tf", ".", "to_float", "(", "bottom_shape", "[", "1", "]", ")", "-", "1.", ")", "*", "np", ".", "float32", "(", "self", ".", "stride", "[", "0", "]", ")", "\n", "width", "=", "(", "tf", ".", "to_float", "(", "bottom_shape", "[", "2", "]", ")", "-", "1.", ")", "*", "np", ".", "float32", "(", "self", ".", "stride", "[", "0", "]", ")", "\n", "x1", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"x1\"", ")", "/", "width", "\n", "y1", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "2", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"y1\"", ")", "/", "height", "\n", "x2", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "3", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"x2\"", ")", "/", "width", "\n", "y2", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "4", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"y2\"", ")", "/", "height", "\n", "bboxes", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "concat", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", "]", ",", "axis", "=", "1", ")", ")", "\n", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.attention_pool_layer_H": [[352, 360], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "attention_pool_layer_H", "(", "self", ",", "bottom", ",", "fc7_H", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "fc1", "=", "slim", ".", "fully_connected", "(", "fc7_H", ",", "512", ",", "scope", "=", "'fc1_b'", ")", "\n", "fc1", "=", "slim", ".", "dropout", "(", "fc1", ",", "keep_prob", "=", "0.8", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout1_b'", ")", "\n", "fc1", "=", "tf", ".", "reshape", "(", "fc1", ",", "[", "tf", ".", "shape", "(", "fc1", ")", "[", "0", "]", ",", "1", ",", "1", ",", "tf", ".", "shape", "(", "fc1", ")", "[", "1", "]", "]", ")", "\n", "att", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "bottom", ",", "fc1", ")", ",", "3", ",", "keep_dims", "=", "True", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.attention_norm_H": [[362, 372], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.shape", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "attention_norm_H", "(", "self", ",", "att", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "att_shape", "=", "tf", ".", "shape", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "[", "att_shape", "[", "0", "]", ",", "att_shape", "[", "1", "]", ",", "-", "1", "]", ")", "\n", "att", "=", "tf", ".", "nn", ".", "softmax", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "att_shape", ")", "\n", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.attention_pool_layer_O": [[373, 381], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "attention_pool_layer_O", "(", "self", ",", "bottom", ",", "fc7_O", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "fc1", "=", "slim", ".", "fully_connected", "(", "fc7_O", ",", "512", ",", "scope", "=", "'fc1_b'", ")", "\n", "fc1", "=", "slim", ".", "dropout", "(", "fc1", ",", "keep_prob", "=", "0.8", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout1_b'", ")", "\n", "fc1", "=", "tf", ".", "reshape", "(", "fc1", ",", "[", "tf", ".", "shape", "(", "fc1", ")", "[", "0", "]", ",", "1", ",", "1", ",", "tf", ".", "shape", "(", "fc1", ")", "[", "1", "]", "]", ")", "\n", "att", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "bottom", ",", "fc1", ")", ",", "3", ",", "keep_dims", "=", "True", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.attention_norm_O": [[383, 393], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.shape", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "attention_norm_O", "(", "self", ",", "att", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "att_shape", "=", "tf", ".", "shape", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "[", "att_shape", "[", "0", "]", ",", "att_shape", "[", "1", "]", ",", "-", "1", "]", ")", "\n", "att", "=", "tf", ".", "nn", ".", "softmax", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "att_shape", ")", "\n", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.region_classification": [[394, 429], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["None"], ["", "def", "region_classification", "(", "self", ",", "fc7_H", ",", "fc7_O", ",", "fc7_SHsp", ",", "is_training", ",", "initializer", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "cls_score_H", "=", "slim", ".", "fully_connected", "(", "fc7_H", ",", "self", ".", "num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'cls_score_H'", ")", "\n", "cls_prob_H", "=", "tf", ".", "nn", ".", "sigmoid", "(", "cls_score_H", ",", "name", "=", "'cls_prob_H'", ")", "\n", "tf", ".", "reshape", "(", "cls_prob_H", ",", "[", "-", "1", ",", "self", ".", "num_classes", "]", ")", "\n", "\n", "cls_score_O", "=", "slim", ".", "fully_connected", "(", "fc7_O", ",", "self", ".", "num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'cls_score_O'", ")", "\n", "cls_prob_O", "=", "tf", ".", "nn", ".", "sigmoid", "(", "cls_score_O", ",", "name", "=", "'cls_prob_O'", ")", "\n", "tf", ".", "reshape", "(", "cls_prob_O", ",", "[", "-", "1", ",", "self", ".", "num_classes", "]", ")", "\n", "\n", "cls_score_sp", "=", "slim", ".", "fully_connected", "(", "fc7_SHsp", ",", "self", ".", "num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'cls_score_sp'", ")", "\n", "cls_prob_sp", "=", "tf", ".", "nn", ".", "sigmoid", "(", "cls_score_sp", ",", "name", "=", "'cls_prob_sp'", ")", "\n", "tf", ".", "reshape", "(", "cls_prob_sp", ",", "[", "-", "1", ",", "self", ".", "num_classes", "]", ")", "\n", "\n", "\n", "self", ".", "predictions", "[", "\"cls_score_H\"", "]", "=", "cls_score_H", "\n", "self", ".", "predictions", "[", "\"cls_prob_H\"", "]", "=", "cls_prob_H", "\n", "self", ".", "predictions", "[", "\"cls_score_O\"", "]", "=", "cls_score_O", "\n", "self", ".", "predictions", "[", "\"cls_prob_O\"", "]", "=", "cls_prob_O", "\n", "self", ".", "predictions", "[", "\"cls_score_sp\"", "]", "=", "cls_score_sp", "\n", "self", ".", "predictions", "[", "\"cls_prob_sp\"", "]", "=", "cls_prob_sp", "\n", "\n", "self", ".", "predictions", "[", "\"cls_prob_HO\"", "]", "=", "cls_prob_sp", "*", "(", "cls_prob_O", "+", "cls_prob_H", ")", "\n", "\n", "", "return", "cls_prob_H", ",", "cls_prob_O", ",", "cls_prob_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.bottleneck": [[430, 439], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.conv2d", "scope.reuse_variables"], "methods", ["None"], ["", "def", "bottleneck", "(", "self", ",", "bottom", ",", "is_training", ",", "name", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "if", "reuse", ":", "\n", "                ", "scope", ".", "reuse_variables", "(", ")", "\n", "\n", "", "head_bottleneck", "=", "slim", ".", "conv2d", "(", "bottom", ",", "1024", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "name", ")", "\n", "\n", "", "return", "head_bottleneck", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.build_network": [[440, 481], ["tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "ResNet101_HICO.ResNet101.image_to_head", "ResNet101_HICO.ResNet101.sp_to_head", "ResNet101_HICO.ResNet101.crop_pool_layer", "ResNet101_HICO.ResNet101.crop_pool_layer", "ResNet101_HICO.ResNet101.res5", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "ResNet101_HICO.ResNet101.attention_pool_layer_H", "ResNet101_HICO.ResNet101.attention_norm_H", "tensorflow.multiply", "tensorflow.multiply", "ResNet101_HICO.ResNet101.attention_pool_layer_O", "ResNet101_HICO.ResNet101.attention_norm_O", "tensorflow.multiply", "tensorflow.multiply", "ResNet101_HICO.ResNet101.bottleneck", "ResNet101_HICO.ResNet101.bottleneck", "ResNet101_HICO.ResNet101.head_to_tail", "ResNet101_HICO.ResNet101.region_classification", "ResNet101_HICO.ResNet101.score_summaries.update", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.image_to_head", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.sp_to_head", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.crop_pool_layer", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.crop_pool_layer", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.res5", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_pool_layer_H", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_norm_H", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_pool_layer_O", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_norm_O", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.bottleneck", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.bottleneck", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.head_to_tail", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.region_classification"], ["", "def", "build_network", "(", "self", ",", "is_training", ")", ":", "\n", "        ", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.01", ")", "\n", "\n", "# ResNet Backbone", "\n", "head", "=", "self", ".", "image_to_head", "(", "is_training", ")", "\n", "sp", "=", "self", ".", "sp_to_head", "(", ")", "\n", "pool5_H", "=", "self", ".", "crop_pool_layer", "(", "head", ",", "self", ".", "H_boxes", ",", "'Crop_H'", ")", "\n", "pool5_O", "=", "self", ".", "crop_pool_layer", "(", "head", ",", "self", ".", "O_boxes", "[", ":", "self", ".", "H_num", ",", ":", "]", ",", "'Crop_O'", ")", "\n", "\n", "fc7_H", ",", "fc7_O", "=", "self", ".", "res5", "(", "pool5_H", ",", "pool5_O", ",", "sp", ",", "is_training", ",", "'res5'", ")", "\n", "fc7_H", "=", "tf", ".", "reduce_mean", "(", "fc7_H", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "fc7_O", "=", "tf", ".", "reduce_mean", "(", "fc7_O", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "\n", "# Phi ", "\n", "head_phi", "=", "slim", ".", "conv2d", "(", "head", ",", "512", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'head_phi'", ")", "\n", "\n", "# g ", "\n", "head_g", "=", "slim", ".", "conv2d", "(", "head", ",", "512", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'head_g'", ")", "\n", "\n", "Att_H", "=", "self", ".", "attention_pool_layer_H", "(", "head_phi", ",", "fc7_H", ",", "is_training", ",", "'Att_H'", ")", "\n", "Att_H", "=", "self", ".", "attention_norm_H", "(", "Att_H", ",", "'Norm_Att_H'", ")", "\n", "att_head_H", "=", "tf", ".", "multiply", "(", "head_g", ",", "Att_H", ")", "\n", "\n", "Att_O", "=", "self", ".", "attention_pool_layer_O", "(", "head_phi", ",", "fc7_O", ",", "is_training", ",", "'Att_O'", ")", "\n", "Att_O", "=", "self", ".", "attention_norm_O", "(", "Att_O", ",", "'Norm_Att_O'", ")", "\n", "att_head_O", "=", "tf", ".", "multiply", "(", "head_g", ",", "Att_O", ")", "\n", "\n", "pool5_SH", "=", "self", ".", "bottleneck", "(", "att_head_H", ",", "is_training", ",", "'bottleneck'", ",", "False", ")", "\n", "pool5_SO", "=", "self", ".", "bottleneck", "(", "att_head_O", ",", "is_training", ",", "'bottleneck'", ",", "True", ")", "\n", "\n", "# fc7_O = tf.Print(fc7_O, [tf.shape(fc7_O), tf.shape(fc7_H)], message='check fc7_O:')", "\n", "fc7_SH", ",", "fc7_SO", ",", "fc7_SHsp", "=", "self", ".", "head_to_tail", "(", "fc7_H", ",", "fc7_O", ",", "pool5_SH", ",", "pool5_SO", ",", "sp", ",", "is_training", ",", "'fc_HO'", ")", "\n", "\n", "# fc7_SO = tf.Print(fc7_SO, [tf.shape(fc7_SO), tf.shape(fc7_SH), tf.shape(fc7_SHsp)], message='check fc7_SHsp:')", "\n", "cls_prob_H", ",", "cls_prob_O", ",", "cls_prob_sp", "=", "self", ".", "region_classification", "(", "fc7_SH", ",", "fc7_SO", ",", "fc7_SHsp", ",", "is_training", ",", "initializer", ",", "'classification'", ")", "\n", "\n", "self", ".", "score_summaries", ".", "update", "(", "self", ".", "predictions", ")", "\n", "self", ".", "visualize", "[", "\"attention_map_H\"", "]", "=", "(", "Att_H", "-", "tf", ".", "reduce_min", "(", "Att_H", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", "/", "tf", ".", "reduce_max", "(", "(", "Att_H", "[", "0", ",", ":", ",", ":", ",", ":", "]", "-", "tf", ".", "reduce_min", "(", "Att_H", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", ")", "\n", "self", ".", "visualize", "[", "\"attention_map_O\"", "]", "=", "(", "Att_O", "-", "tf", ".", "reduce_min", "(", "Att_O", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", "/", "tf", ".", "reduce_max", "(", "(", "Att_O", "[", "0", ",", ":", ",", ":", ",", ":", "]", "-", "tf", ".", "reduce_min", "(", "Att_O", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", ")", "\n", "\n", "return", "cls_prob_H", ",", "cls_prob_O", ",", "cls_prob_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.create_architecture": [[482, 511], ["ResNet101_HICO.ResNet101.build_network", "layers_to_output.update", "ResNet101_HICO.ResNet101.add_loss", "tensorflow.device", "tensorflow.device", "ResNet101_HICO.ResNet101.visualize.items", "ResNet101_HICO.ResNet101.event_summaries.items", "tensorflow.summary.merge_all", "tensorflow.summary.merge_all", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.image", "tensorflow.summary.image", "val_summaries.append", "tensorflow.summary.scalar", "tensorflow.summary.scalar"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.build_network", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.add_loss"], ["", "def", "create_architecture", "(", "self", ",", "is_training", ")", ":", "\n", "\n", "        ", "self", ".", "build_network", "(", "is_training", ")", "\n", "\n", "# for var in tf.trainable_variables():", "\n", "#     self.train_summaries.append(var)", "\n", "\n", "if", "is_training", ":", "self", ".", "add_loss", "(", ")", "\n", "layers_to_output", "=", "{", "}", "\n", "layers_to_output", ".", "update", "(", "self", ".", "losses", ")", "\n", "\n", "val_summaries", "=", "[", "]", "\n", "if", "is_training", ":", "\n", "            ", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "# val_summaries.append(self.add_gt_image_summary_H())", "\n", "# val_summaries.append(self.add_gt_image_summary_HO())", "\n", "# tf.summary.image('ATTENTION_MAP_H',  self.visualize[\"attention_map_H\"], max_outputs=1)", "\n", "# tf.summary.image('ATTENTION_MAP_O',  self.visualize[\"attention_map_O\"], max_outputs=1)", "\n", "\n", "                ", "for", "key", ",", "var", "in", "self", ".", "visualize", ".", "items", "(", ")", ":", "\n", "                    ", "tf", ".", "summary", ".", "image", "(", "key", ",", "var", ",", "max_outputs", "=", "1", ")", "\n", "", "for", "key", ",", "var", "in", "self", ".", "event_summaries", ".", "items", "(", ")", ":", "\n", "                    ", "val_summaries", ".", "append", "(", "tf", ".", "summary", ".", "scalar", "(", "key", ",", "var", ")", ")", "\n", "\n", "# val_summaries.append(tf.summary.scalar('lr', self.lr))", "\n", "", "self", ".", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "summary_op_val", "=", "tf", ".", "summary", ".", "merge", "(", "val_summaries", ")", "\n", "\n", "", "", "return", "layers_to_output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.add_loss": [[513, 535], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "ResNet101_HICO.ResNet101.event_summaries.update", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "add_loss", "(", "self", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'LOSS'", ")", "as", "scope", ":", "\n", "            ", "cls_score_H", "=", "self", ".", "predictions", "[", "\"cls_score_H\"", "]", "\n", "cls_score_O", "=", "self", ".", "predictions", "[", "\"cls_score_O\"", "]", "\n", "cls_score_sp", "=", "self", ".", "predictions", "[", "\"cls_score_sp\"", "]", "\n", "label_HO", "=", "self", ".", "gt_class_HO", "\n", "\n", "H_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_HO", "[", ":", "self", ".", "H_num", ",", ":", "]", ",", "logits", "=", "cls_score_H", "[", ":", "self", ".", "H_num", ",", ":", "]", ")", ")", "\n", "O_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_HO", "[", ":", "self", ".", "H_num", ",", ":", "]", ",", "logits", "=", "cls_score_O", "[", ":", "self", ".", "H_num", ",", ":", "]", ")", ")", "\n", "sp_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_HO", ",", "logits", "=", "cls_score_sp", ")", ")", "\n", "\n", "self", ".", "losses", "[", "'H_cross_entropy'", "]", "=", "H_cross_entropy", "\n", "self", ".", "losses", "[", "'O_cross_entropy'", "]", "=", "O_cross_entropy", "\n", "self", ".", "losses", "[", "'sp_cross_entropy'", "]", "=", "sp_cross_entropy", "\n", "\n", "loss", "=", "H_cross_entropy", "+", "O_cross_entropy", "+", "sp_cross_entropy", "\n", "\n", "self", ".", "losses", "[", "'total_loss'", "]", "=", "loss", "\n", "self", ".", "event_summaries", ".", "update", "(", "self", ".", "losses", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.add_gt_image_summary_H": [[537, 543], ["tensorflow.py_func", "tensorflow.py_func", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.reverse", "tensorflow.reverse"], "methods", ["None"], ["", "def", "add_gt_image_summary_H", "(", "self", ")", ":", "\n", "\n", "        ", "image", "=", "tf", ".", "py_func", "(", "draw_bounding_boxes_HOI", ",", "\n", "[", "tf", ".", "reverse", "(", "self", ".", "image", "+", "cfg", ".", "PIXEL_MEANS", ",", "axis", "=", "[", "-", "1", "]", ")", ",", "self", ".", "H_boxes", ",", "self", ".", "gt_class_HO", "]", ",", "\n", "tf", ".", "float32", ",", "name", "=", "\"gt_boxes_H\"", ")", "\n", "return", "tf", ".", "summary", ".", "image", "(", "'GROUND_TRUTH_H'", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.add_gt_image_summary_HO": [[544, 550], ["tensorflow.py_func", "tensorflow.py_func", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.reverse", "tensorflow.reverse"], "methods", ["None"], ["", "def", "add_gt_image_summary_HO", "(", "self", ")", ":", "\n", "\n", "        ", "image", "=", "tf", ".", "py_func", "(", "draw_bounding_boxes_HOI", ",", "\n", "[", "tf", ".", "reverse", "(", "self", ".", "image", "+", "cfg", ".", "PIXEL_MEANS", ",", "axis", "=", "[", "-", "1", "]", ")", ",", "self", ".", "O_boxes", ",", "self", ".", "gt_class_HO", "]", ",", "\n", "tf", ".", "float32", ",", "name", "=", "\"gt_boxes_HO\"", ")", "\n", "return", "tf", ".", "summary", ".", "image", "(", "'GROUND_TRUTH_HO)'", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.add_score_summary": [[553, 556], ["tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["None"], ["", "def", "add_score_summary", "(", "self", ",", "key", ",", "tensor", ")", ":", "\n", "        ", "if", "tensor", "is", "not", "None", "and", "tensor", ".", "op", "is", "not", "None", ":", "\n", "            ", "tf", ".", "summary", ".", "histogram", "(", "'SCORE/'", "+", "tensor", ".", "op", ".", "name", "+", "'/'", "+", "key", "+", "'/scores'", ",", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.add_train_summary": [[558, 560], ["tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["None"], ["", "", "def", "add_train_summary", "(", "self", ",", "var", ")", ":", "\n", "        ", "tf", ".", "summary", ".", "histogram", "(", "'TRAIN/'", "+", "var", ".", "op", ".", "name", ",", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.get_feed_dict": [[561, 568], ["None"], "methods", ["None"], ["", "def", "get_feed_dict", "(", "self", ",", "blobs", ")", ":", "\n", "        ", "feed_dict", "=", "{", "self", ".", "image", ":", "blobs", "[", "'image'", "]", ",", "self", ".", "H_boxes", ":", "blobs", "[", "'H_boxes'", "]", ",", "\n", "self", ".", "O_boxes", ":", "blobs", "[", "'O_boxes'", "]", ",", "self", ".", "gt_class_HO", ":", "blobs", "[", "'gt_class_HO'", "]", ",", "\n", "self", ".", "spatial", ":", "blobs", "[", "'sp'", "]", ",", "\n", "# self.lr: lr,", "\n", "self", ".", "H_num", ":", "blobs", "[", "'H_num'", "]", "}", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.train_step": [[569, 576], ["ResNet101_HICO.ResNet101.get_feed_dict", "sess.run"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.get_feed_dict"], ["", "def", "train_step", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "        ", "feed_dict", "=", "self", ".", "get_feed_dict", "(", "blobs", ")", "\n", "\n", "loss", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "\n", "train_op", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.train_step_with_summary": [[577, 585], ["ResNet101_HICO.ResNet101.get_feed_dict", "sess.run"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.get_feed_dict"], ["", "def", "train_step_with_summary", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "        ", "feed_dict", "=", "self", ".", "get_feed_dict", "(", "blobs", ")", "\n", "\n", "loss", ",", "summary", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "\n", "self", ".", "summary_op", ",", "\n", "train_op", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "loss", ",", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.train_step_tfr": [[587, 591], ["sess.run"], "methods", ["None"], ["", "def", "train_step_tfr", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "        ", "loss", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "self", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "return", "loss", ",", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.train_step_tfr_with_summary": [[592, 598], ["sess.run"], "methods", ["None"], ["", "def", "train_step_tfr_with_summary", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "\n", "        ", "loss", ",", "summary", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "\n", "self", ".", "summary_op", ",", "self", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "return", "loss", ",", "image_id", ",", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.test_image_HO": [[599, 604], ["sess.run"], "methods", ["None"], ["", "def", "test_image_HO", "(", "self", ",", "sess", ",", "image", ",", "blobs", ")", ":", "\n", "        ", "feed_dict", "=", "{", "self", ".", "image", ":", "image", ",", "self", ".", "H_boxes", ":", "blobs", "[", "'H_boxes'", "]", ",", "self", ".", "O_boxes", ":", "blobs", "[", "'O_boxes'", "]", ",", "self", ".", "spatial", ":", "blobs", "[", "'sp'", "]", ",", "self", ".", "H_num", ":", "blobs", "[", "'H_num'", "]", "}", "\n", "cls_prob_HO", "=", "sess", ".", "run", "(", "[", "self", ".", "predictions", "[", "\"cls_prob_HO\"", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "return", "cls_prob_HO", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.obtain_all_preds": [[605, 611], ["sess.run"], "methods", ["None"], ["", "def", "obtain_all_preds", "(", "self", ",", "sess", ",", "image", ",", "blobs", ")", ":", "\n", "        ", "feed_dict", "=", "{", "self", ".", "image", ":", "image", ",", "self", ".", "H_boxes", ":", "blobs", "[", "'H_boxes'", "]", ",", "self", ".", "O_boxes", ":", "blobs", "[", "'O_boxes'", "]", ",", "\n", "self", ".", "spatial", ":", "blobs", "[", "'sp'", "]", ",", "self", ".", "H_num", ":", "blobs", "[", "'H_num'", "]", "}", "\n", "cls_prob_HO", ",", "pH", ",", "pO", ",", "pSp", "=", "sess", ".", "run", "(", "[", "self", ".", "predictions", "[", "\"cls_prob_HO\"", "]", ",", "self", ".", "predictions", "[", "\"cls_prob_H\"", "]", ",", "\n", "self", ".", "predictions", "[", "\"cls_prob_O\"", "]", ",", "self", ".", "predictions", "[", "\"cls_prob_sp\"", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "return", "cls_prob_HO", ",", "pH", ",", "pO", ",", "pSp", ",", "pSp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.ResNet101.obtain_all_preds_tfr": [[612, 618], ["sess.run"], "methods", ["None"], ["", "def", "obtain_all_preds_tfr", "(", "self", ",", "sess", ")", ":", "\n", "        ", "cls_prob_HO", ",", "pH", ",", "pO", ",", "pSp", "=", "sess", ".", "run", "(", "[", "self", ".", "predictions", "[", "\"cls_prob_HO\"", "]", ",", "self", ".", "predictions", "[", "\"cls_prob_H\"", "]", ",", "\n", "self", ".", "predictions", "[", "\"cls_prob_O\"", "]", ",", "self", ".", "predictions", "[", "\"cls_prob_sp\"", "]", "]", ")", "\n", "\n", "\n", "return", "cls_prob_HO", ",", "pH", ",", "pO", ",", "pSp", ",", "pSp", "", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet101_HICO.resnet_arg_scope": [[25, 50], ["tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.variance_scaling_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.constant_initializer"], "function", ["None"], ["def", "resnet_arg_scope", "(", "is_training", "=", "True", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ",", "\n", "batch_norm_decay", "=", "0.997", ",", "\n", "batch_norm_epsilon", "=", "1e-5", ",", "\n", "batch_norm_scale", "=", "True", ")", ":", "\n", "    ", "batch_norm_params", "=", "{", "\n", "'is_training'", ":", "False", ",", "\n", "'decay'", ":", "batch_norm_decay", ",", "\n", "'epsilon'", ":", "batch_norm_epsilon", ",", "\n", "'scale'", ":", "batch_norm_scale", ",", "\n", "'trainable'", ":", "False", ",", "\n", "'updates_collections'", ":", "ops", ".", "GraphKeys", ".", "UPDATE_OPS", "\n", "}", "\n", "with", "arg_scope", "(", "\n", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", "]", ",", "\n", "weights_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", ",", "\n", "weights_initializer", "=", "slim", ".", "variance_scaling_initializer", "(", ")", ",", "\n", "biases_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "normalizer_params", "=", "batch_norm_params", ")", ":", "\n", "        ", "with", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "**", "batch_norm_params", ")", "as", "arg_sc", ":", "\n", "            ", "return", "arg_sc", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.__init__": [[54, 203], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "numpy.array().reshape", "numpy.load", "ult.tools.get_convert_matrix", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "Exception", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "ResNet50_HICO.ResNet50.model_name.__contains__", "ResNet50_HICO.ResNet50.model_name.__contains__", "ResNet50_HICO.ResNet50.model_name.__contains__", "print", "ResNet50_HICO.ResNet50.blocks.append", "numpy.array", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "resnet_v1_block"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_convert_matrix"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "visualize", "=", "{", "}", "\n", "self", ".", "test_visualize", "=", "{", "}", "\n", "self", ".", "intermediate", "=", "{", "}", "\n", "self", ".", "predictions", "=", "{", "}", "\n", "self", ".", "score_summaries", "=", "{", "}", "\n", "self", ".", "event_summaries", "=", "{", "}", "\n", "self", ".", "train_summaries", "=", "[", "]", "\n", "self", ".", "losses", "=", "{", "}", "\n", "\n", "self", ".", "image", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "1", ",", "None", ",", "None", ",", "3", "]", ",", "name", "=", "'image'", ")", "\n", "self", ".", "spatial", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "64", ",", "64", ",", "3", "]", ",", "name", "=", "'sp'", ")", "\n", "self", ".", "H_boxes", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "5", "]", ",", "name", "=", "'H_boxes'", ")", "\n", "self", ".", "O_boxes", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "5", "]", ",", "name", "=", "'O_boxes'", ")", "\n", "self", ".", "gt_class_HO", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "600", "]", ",", "name", "=", "'gt_class_HO'", ")", "\n", "self", ".", "H_num", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "# positive nums", "\n", "self", ".", "image_id", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "num_classes", "=", "600", "\n", "self", ".", "compose_num_classes", "=", "600", "\n", "self", ".", "num_fc", "=", "1024", "\n", "self", ".", "verb_num_classes", "=", "117", "\n", "self", ".", "obj_num_classes", "=", "80", "\n", "self", ".", "scope", "=", "'resnet_v1_50'", "\n", "self", ".", "stride", "=", "[", "16", ",", "]", "\n", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "if", "tf", ".", "__version__", "==", "'1.1.0'", ":", "\n", "            ", "raise", "Exception", "(", "'wrong tensorflow version 1.1.0'", ")", "\n", "", "else", ":", "\n", "            ", "from", "tensorflow", ".", "contrib", ".", "slim", ".", "python", ".", "slim", ".", "nets", ".", "resnet_v1", "import", "resnet_v1_block", "\n", "self", ".", "blocks", "=", "[", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "64", ",", "num_units", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "128", ",", "num_units", "=", "4", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "256", ",", "num_units", "=", "6", ",", "stride", "=", "1", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "resnet_v1_block", "(", "'block5'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", "]", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'unique_weights'", ")", "or", "self", ".", "model_name", ".", "__contains__", "(", "'_pa3'", ")", "or", "self", ".", "model_name", ".", "__contains__", "(", "'_pa4'", ")", ":", "\n", "                ", "print", "(", "\"add block6 unique_weights2\"", ")", "\n", "self", ".", "blocks", ".", "append", "(", "resnet_v1_block", "(", "'block6'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", ")", "\n", "\n", "", "", "\"\"\"We copy from TIN. calculated by log(1/(n_c/sum(n_c)) c is the category and n_c is the number of samples\"\"\"", "\n", "self", ".", "HO_weight", "=", "np", ".", "array", "(", "[", "\n", "9.192927", ",", "9.778443", ",", "10.338059", ",", "9.164914", ",", "9.075144", ",", "10.045923", ",", "8.714437", ",", "8.59822", ",", "12.977117", ",", "6.2745423", ",", "\n", "11.227917", ",", "6.765012", ",", "9.436157", ",", "9.56762", ",", "11.0675745", ",", "11.530198", ",", "9.609821", ",", "9.897503", ",", "6.664475", ",", "6.811699", ",", "\n", "6.644726", ",", "9.170454", ",", "13.670264", ",", "3.903943", ",", "10.556748", ",", "8.814335", ",", "9.519224", ",", "12.753973", ",", "11.590822", ",", "8.278912", ",", "\n", "5.5245695", ",", "9.7286825", ",", "8.997436", ",", "10.699849", ",", "9.601237", ",", "11.965516", ",", "9.192927", ",", "10.220277", ",", "6.056692", ",", "7.734048", ",", "\n", "8.42324", ",", "6.586457", ",", "6.969533", ",", "10.579222", ",", "13.670264", ",", "4.4531965", ",", "9.326459", ",", "9.288238", ",", "8.071842", ",", "10.431585", ",", "\n", "12.417501", ",", "11.530198", ",", "11.227917", ",", "4.0678477", ",", "8.854023", ",", "12.571651", ",", "8.225684", ",", "10.996116", ",", "11.0675745", ",", "\n", "10.100731", ",", "\n", "7.0376034", ",", "7.463688", ",", "12.571651", ",", "14.363411", ",", "5.4902234", ",", "11.0675745", ",", "14.363411", ",", "8.45805", ",", "10.269067", ",", "\n", "9.820116", ",", "\n", "14.363411", ",", "11.272368", ",", "11.105314", ",", "7.981595", ",", "9.198626", ",", "3.3284247", ",", "14.363411", ",", "12.977117", ",", "9.300817", ",", "\n", "10.032678", ",", "\n", "12.571651", ",", "10.114916", ",", "10.471591", ",", "13.264799", ",", "14.363411", ",", "8.01953", ",", "10.412168", ",", "9.644913", ",", "9.981384", ",", "\n", "7.2197933", ",", "\n", "14.363411", ",", "3.1178555", ",", "11.031207", ",", "8.934066", ",", "7.546675", ",", "6.386472", ",", "12.060826", ",", "8.862153", ",", "9.799063", ",", "12.753973", ",", "\n", "12.753973", ",", "10.412168", ",", "10.8976755", ",", "10.471591", ",", "12.571651", ",", "9.519224", ",", "6.207762", ",", "12.753973", ",", "6.60636", ",", "\n", "6.2896967", ",", "\n", "4.5198326", ",", "9.7887", ",", "13.670264", ",", "11.878505", ",", "11.965516", ",", "8.576513", ",", "11.105314", ",", "9.192927", ",", "11.47304", ",", "11.367679", ",", "\n", "9.275815", ",", "11.367679", ",", "9.944571", ",", "11.590822", ",", "10.451388", ",", "9.511381", ",", "11.144535", ",", "13.264799", ",", "5.888291", ",", "\n", "11.227917", ",", "\n", "10.779892", ",", "7.643191", ",", "11.105314", ",", "9.414651", ",", "11.965516", ",", "14.363411", ",", "12.28397", ",", "9.909063", ",", "8.94731", ",", "7.0330057", ",", "\n", "8.129001", ",", "7.2817025", ",", "9.874775", ",", "9.758241", ",", "11.105314", ",", "5.0690055", ",", "7.4768796", ",", "10.129305", ",", "9.54313", ",", "13.264799", ",", "\n", "9.699972", ",", "11.878505", ",", "8.260853", ",", "7.1437693", ",", "6.9321113", ",", "6.990665", ",", "8.8104515", ",", "11.655361", ",", "13.264799", ",", "\n", "4.515912", ",", "\n", "9.897503", ",", "11.418972", ",", "8.113436", ",", "8.795067", ",", "10.236277", ",", "12.753973", ",", "14.363411", ",", "9.352776", ",", "12.417501", ",", "\n", "0.6271591", ",", "\n", "12.060826", ",", "12.060826", ",", "12.166186", ",", "5.2946343", ",", "11.318889", ",", "9.8308115", ",", "8.016022", ",", "9.198626", ",", "10.8976755", ",", "\n", "13.670264", ",", "\n", "11.105314", ",", "14.363411", ",", "9.653881", ",", "9.503599", ",", "12.753973", ",", "5.80546", ",", "9.653881", ",", "9.592727", ",", "12.977117", ",", "13.670264", ",", "\n", "7.995224", ",", "8.639826", ",", "12.28397", ",", "6.586876", ",", "10.929424", ",", "13.264799", ",", "8.94731", ",", "6.1026597", ",", "12.417501", ",", "11.47304", ",", "\n", "10.451388", ",", "8.95624", ",", "10.996116", ",", "11.144535", ",", "11.031207", ",", "13.670264", ",", "13.670264", ",", "6.397866", ",", "7.513285", ",", "9.981384", ",", "\n", "11.367679", ",", "11.590822", ",", "7.4348736", ",", "4.415428", ",", "12.166186", ",", "8.573451", ",", "12.977117", ",", "9.609821", ",", "8.601359", ",", "9.055143", ",", "\n", "11.965516", ",", "11.105314", ",", "13.264799", ",", "5.8201604", ",", "10.451388", ",", "9.944571", ",", "7.7855496", ",", "14.363411", ",", "8.5463", ",", "\n", "13.670264", ",", "\n", "7.9288645", ",", "5.7561946", ",", "9.075144", ",", "9.0701065", ",", "5.6871653", ",", "11.318889", ",", "10.252538", ",", "9.758241", ",", "9.407584", ",", "\n", "13.670264", ",", "\n", "8.570397", ",", "9.326459", ",", "7.488179", ",", "11.798462", ",", "9.897503", ",", "6.7530537", ",", "4.7828183", ",", "9.519224", ",", "7.6492405", ",", "8.031909", ",", "\n", "7.8180614", ",", "4.451856", ",", "10.045923", ",", "10.83705", ",", "13.264799", ",", "13.670264", ",", "4.5245686", ",", "14.363411", ",", "10.556748", ",", "\n", "10.556748", ",", "\n", "14.363411", ",", "13.670264", ",", "14.363411", ",", "8.037262", ",", "8.59197", ",", "9.738439", ",", "8.652985", ",", "10.045923", ",", "9.400566", ",", "10.9622135", ",", "\n", "11.965516", ",", "10.032678", ",", "5.9017305", ",", "9.738439", ",", "12.977117", ",", "11.105314", ",", "10.725825", ",", "9.080208", ",", "11.272368", ",", "\n", "14.363411", ",", "\n", "14.363411", ",", "13.264799", ",", "6.9279733", ",", "9.153925", ",", "8.075553", ",", "9.126969", ",", "14.363411", ",", "8.903826", ",", "9.488214", ",", "5.4571533", ",", "\n", "10.129305", ",", "10.579222", ",", "12.571651", ",", "11.965516", ",", "6.237189", ",", "9.428937", ",", "9.618479", ",", "8.620408", ",", "11.590822", ",", "\n", "11.655361", ",", "\n", "9.968962", ",", "10.8080635", ",", "10.431585", ",", "14.363411", ",", "3.796231", ",", "12.060826", ",", "10.302968", ",", "9.551227", ",", "8.75394", ",", "\n", "10.579222", ",", "\n", "9.944571", ",", "14.363411", ",", "6.272396", ",", "10.625742", ",", "9.690582", ",", "13.670264", ",", "11.798462", ",", "13.670264", ",", "11.724354", ",", "\n", "9.993963", ",", "\n", "8.230013", ",", "9.100721", ",", "10.374427", ",", "7.865129", ",", "6.514087", ",", "14.363411", ",", "11.031207", ",", "11.655361", ",", "12.166186", ",", "7.419324", ",", "\n", "9.421769", ",", "9.653881", ",", "10.996116", ",", "12.571651", ",", "13.670264", ",", "5.912144", ",", "9.7887", ",", "8.585759", ",", "8.272101", ",", "11.530198", ",", "\n", "8.886948", ",", "\n", "5.9870906", ",", "9.269661", ",", "11.878505", ",", "11.227917", ",", "13.670264", ",", "8.339964", ",", "7.6763024", ",", "10.471591", ",", "10.451388", ",", "\n", "13.670264", ",", "\n", "11.185357", ",", "10.032678", ",", "9.313555", ",", "12.571651", ",", "3.993144", ",", "9.379805", ",", "9.609821", ",", "14.363411", ",", "9.709451", ",", "8.965248", ",", "\n", "10.451388", ",", "7.0609145", ",", "10.579222", ",", "13.264799", ",", "10.49221", ",", "8.978916", ",", "7.124196", ",", "10.602211", ",", "8.9743395", ",", "7.77862", ",", "\n", "8.073695", ",", "9.644913", ",", "9.339531", ",", "8.272101", ",", "4.794418", ",", "9.016304", ",", "8.012526", ",", "10.674532", ",", "14.363411", ",", "7.995224", ",", "\n", "12.753973", ",", "5.5157638", ",", "8.934066", ",", "10.779892", ",", "7.930471", ",", "11.724354", ",", "8.85808", ",", "5.9025764", ",", "14.363411", ",", "\n", "12.753973", ",", "\n", "12.417501", ",", "8.59197", ",", "10.513264", ",", "10.338059", ",", "14.363411", ",", "7.7079706", ",", "14.363411", ",", "13.264799", ",", "13.264799", ",", "\n", "10.752493", ",", "\n", "14.363411", ",", "14.363411", ",", "13.264799", ",", "12.417501", ",", "13.670264", ",", "6.5661197", ",", "12.977117", ",", "11.798462", ",", "9.968962", ",", "\n", "12.753973", ",", "\n", "11.47304", ",", "11.227917", ",", "7.6763024", ",", "10.779892", ",", "11.185357", ",", "14.363411", ",", "7.369478", ",", "14.363411", ",", "9.944571", ",", "\n", "10.779892", ",", "\n", "10.471591", ",", "9.54313", ",", "9.148476", ",", "10.285873", ",", "10.412168", ",", "12.753973", ",", "14.363411", ",", "6.0308623", ",", "13.670264", ",", "\n", "10.725825", ",", "\n", "12.977117", ",", "11.272368", ",", "7.663911", ",", "9.137665", ",", "10.236277", ",", "13.264799", ",", "6.715625", ",", "10.9622135", ",", "14.363411", ",", "\n", "13.264799", ",", "\n", "9.575919", ",", "9.080208", ",", "11.878505", ",", "7.1863923", ",", "9.366199", ",", "8.854023", ",", "9.874775", ",", "8.2857685", ",", "13.670264", ",", "11.878505", ",", "\n", "12.166186", ",", "7.616999", ",", "9.44343", ",", "8.288065", ",", "8.8104515", ",", "8.347254", ",", "7.4738197", ",", "10.302968", ",", "6.936267", ",", "11.272368", ",", "\n", "7.058223", ",", "5.0138307", ",", "12.753973", ",", "10.173757", ",", "9.863602", ",", "11.318889", ",", "9.54313", ",", "10.996116", ",", "12.753973", ",", "\n", "7.8339925", ",", "\n", "7.569945", ",", "7.4427395", ",", "5.560738", ",", "12.753973", ",", "10.725825", ",", "10.252538", ",", "9.307165", ",", "8.491293", ",", "7.9161053", ",", "\n", "7.8849015", ",", "\n", "7.782772", ",", "6.3088884", ",", "8.866243", ",", "9.8308115", ",", "14.363411", ",", "10.8976755", ",", "5.908519", ",", "10.269067", ",", "9.176025", ",", "\n", "9.852551", ",", "\n", "9.488214", ",", "8.90809", ",", "8.537411", ",", "9.653881", ",", "8.662968", ",", "11.965516", ",", "10.143904", ",", "14.363411", ",", "14.363411", ",", "9.407584", ",", "\n", "5.281472", ",", "11.272368", ",", "12.060826", ",", "14.363411", ",", "7.4135547", ",", "8.920994", ",", "9.618479", ",", "8.891141", ",", "14.363411", ",", "\n", "12.060826", ",", "\n", "11.965516", ",", "10.9622135", ",", "10.9622135", ",", "14.363411", ",", "5.658909", ",", "8.934066", ",", "12.571651", ",", "8.614018", ",", "11.655361", ",", "\n", "13.264799", ",", "\n", "10.996116", ",", "13.670264", ",", "8.965248", ",", "9.326459", ",", "11.144535", ",", "14.363411", ",", "6.0517673", ",", "10.513264", ",", "8.7430105", ",", "\n", "10.338059", ",", "\n", "13.264799", ",", "6.878481", ",", "9.065094", ",", "8.87035", ",", "14.363411", ",", "9.92076", ",", "6.5872955", ",", "10.32036", ",", "14.363411", ",", "9.944571", ",", "\n", "11.798462", ",", "10.9622135", ",", "11.031207", ",", "7.652888", ",", "4.334878", ",", "13.670264", ",", "13.670264", ",", "14.363411", ",", "10.725825", ",", "\n", "12.417501", ",", "\n", "14.363411", ",", "13.264799", ",", "11.655361", ",", "10.338059", ",", "13.264799", ",", "12.753973", ",", "8.206432", ",", "8.916674", ",", "8.59509", ",", "\n", "14.363411", ",", "\n", "7.376845", ",", "11.798462", ",", "11.530198", ",", "11.318889", ",", "11.185357", ",", "5.0664344", ",", "11.185357", ",", "9.372978", ",", "10.471591", ",", "\n", "9.6629305", ",", "\n", "11.367679", ",", "8.73579", ",", "9.080208", ",", "11.724354", ",", "5.04781", ",", "7.3777695", ",", "7.065643", ",", "12.571651", ",", "11.724354", ",", "12.166186", ",", "\n", "12.166186", ",", "7.215852", ",", "4.374113", ",", "11.655361", ",", "11.530198", ",", "14.363411", ",", "6.4993753", ",", "11.031207", ",", "8.344818", ",", "\n", "10.513264", ",", "\n", "10.032678", ",", "14.363411", ",", "14.363411", ",", "4.5873594", ",", "12.28397", ",", "13.670264", ",", "12.977117", ",", "10.032678", ",", "9.609821", "\n", "]", ",", "dtype", "=", "'float32'", ")", ".", "reshape", "(", "1", ",", "600", ")", "\n", "num_inst_path", "=", "cfg", ".", "ROOT_DIR", "+", "'/Data/num_inst.npy'", "\n", "num_inst", "=", "np", ".", "load", "(", "num_inst_path", ")", "\n", "self", ".", "num_inst", "=", "num_inst", "\n", "\n", "verb_to_HO_matrix", ",", "obj_to_HO_matrix", "=", "get_convert_matrix", "(", "self", ".", "verb_num_classes", ",", "self", ".", "obj_num_classes", ")", "\n", "\n", "self", ".", "obj_to_HO_matrix", "=", "tf", ".", "constant", "(", "obj_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "verb_to_HO_matrix", "=", "tf", ".", "constant", "(", "verb_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "gt_obj_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_class_HO", ",", "self", ".", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "self", ".", "gt_verb_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_class_HO", ",", "self", ".", "verb_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.init_table": [[204, 206], ["None"], "methods", ["None"], ["", "def", "init_table", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.set_ph": [[207, 217], ["ResNet50_HICO.ResNet50.reset_classes"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.reset_classes"], ["", "def", "set_ph", "(", "self", ",", "image", ",", "image_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", "=", "None", ",", "sp", "=", "None", ")", ":", "\n", "        ", "if", "image", "is", "not", "None", ":", "self", ".", "image", "=", "image", "\n", "if", "image_id", "is", "not", "None", ":", "self", ".", "image_id", "=", "image_id", "\n", "if", "sp", "is", "not", "None", ":", "self", ".", "spatial", "=", "sp", "\n", "if", "Human_augmented", "is", "not", "None", ":", "self", ".", "H_boxes", "=", "Human_augmented", "\n", "if", "Object_augmented", "is", "not", "None", ":", "self", ".", "O_boxes", "=", "Object_augmented", "\n", "if", "action_HO", "is", "not", "None", ":", "self", ".", "gt_class_HO", "=", "action_HO", "\n", "self", ".", "H_num", "=", "num_pos", "\n", "\n", "self", ".", "reset_classes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.reset_classes": [[218, 227], ["ult.tools.get_convert_matrix", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.tools.get_convert_matrix"], ["", "def", "reset_classes", "(", "self", ")", ":", "\n", "        ", "from", "ult", ".", "tools", "import", "get_convert_matrix", "\n", "verb_to_HO_matrix", ",", "obj_to_HO_matrix", "=", "get_convert_matrix", "(", "self", ".", "verb_num_classes", ",", "self", ".", "obj_num_classes", ")", "\n", "self", ".", "obj_to_HO_matrix", "=", "tf", ".", "constant", "(", "obj_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "verb_to_HO_matrix", "=", "tf", ".", "constant", "(", "verb_to_HO_matrix", ",", "tf", ".", "float32", ")", "\n", "self", ".", "gt_obj_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_class_HO", ",", "self", ".", "obj_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "self", ".", "gt_verb_class", "=", "tf", ".", "cast", "(", "tf", ".", "matmul", "(", "self", ".", "gt_class_HO", ",", "self", ".", "verb_to_HO_matrix", ",", "transpose_b", "=", "True", ")", ">", "0", ",", "\n", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.build_base": [[228, 235], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.conv2d_same", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.conv2d_same", "tensorflow.pad", "tensorflow.pad", "tensorflow.max_pool2d", "tensorflow.max_pool2d"], "methods", ["None"], ["", "def", "build_base", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "self", ".", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", ")", ":", "\n", "            ", "net", "=", "resnet_utils", ".", "conv2d_same", "(", "self", ".", "image", ",", "64", ",", "7", ",", "stride", "=", "2", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "tf", ".", "pad", "(", "net", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'pool1'", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.image_to_head": [[236, 258], ["tensorflow.arg_scope", "tensorflow.arg_scope", "ResNet50_HICO.ResNet50.build_base", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.arg_scope", "tensorflow.arg_scope", "ResNet50_HICO.ResNet50.model_name.__contains__", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "ResNet50_HICO.resnet_arg_scope", "ResNet50_HICO.resnet_arg_scope", "print"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.build_base", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "image_to_head", "(", "self", ",", "is_training", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "False", ")", ")", ":", "\n", "            ", "net", "=", "self", ".", "build_base", "(", ")", "\n", "net", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "net", ",", "\n", "self", ".", "blocks", "[", "0", ":", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "            ", "if", "self", ".", "model_name", ".", "__contains__", "(", "'unique_weights'", ")", ":", "\n", "                ", "print", "(", "\"unique_weights3\"", ")", "\n", "stop", "=", "-", "3", "\n", "", "else", ":", "\n", "                ", "stop", "=", "-", "2", "\n", "", "head", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "net", ",", "\n", "self", ".", "blocks", "[", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", ":", "stop", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "", "return", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.sp_to_head": [[259, 271], ["tensorflow.variable_scope", "tensorflow.variable_scope", "ResNet50_HICO.ResNet50.model_name.__contains__", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.flatten", "tensorflow.flatten"], "methods", ["None"], ["", "def", "sp_to_head", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "self", ".", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", ")", ":", "\n", "            ", "ends", "=", "2", "\n", "if", "self", ".", "model_name", ".", "__contains__", "(", "'_spose'", ")", ":", "\n", "                ", "ends", "=", "3", "\n", "", "conv1_sp", "=", "slim", ".", "conv2d", "(", "self", ".", "spatial", "[", ":", ",", ":", ",", ":", ",", "0", ":", "ends", "]", ",", "64", ",", "[", "5", ",", "5", "]", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'conv1_sp'", ")", "\n", "pool1_sp", "=", "slim", ".", "max_pool2d", "(", "conv1_sp", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool1_sp'", ")", "\n", "conv2_sp", "=", "slim", ".", "conv2d", "(", "pool1_sp", ",", "32", ",", "[", "5", ",", "5", "]", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'conv2_sp'", ")", "\n", "pool2_sp", "=", "slim", ".", "max_pool2d", "(", "conv2_sp", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool2_sp'", ")", "\n", "pool2_flat_sp", "=", "slim", ".", "flatten", "(", "pool2_sp", ")", "\n", "\n", "", "return", "pool2_flat_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.res5": [[272, 299], ["tensorflow.arg_scope", "tensorflow.arg_scope", "ResNet50_HICO.resnet_arg_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "res5", "(", "self", ",", "pool5_H", ",", "pool5_O", ",", "sp", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "            ", "if", "pool5_H", "is", "None", ":", "\n", "                ", "fc7_H", "=", "None", "\n", "", "else", ":", "\n", "                ", "fc7_H", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "pool5_H", ",", "\n", "self", ".", "blocks", "[", "-", "2", ":", "-", "1", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "\n", "# fc7_H = tf.reduce_mean(fc7_H, axis=[1, 2])", "\n", "\n", "", "if", "pool5_O", "is", "None", ":", "\n", "                ", "fc7_O", "=", "None", "\n", "", "else", ":", "\n", "                ", "fc7_O", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "pool5_O", ",", "\n", "self", ".", "blocks", "[", "-", "1", ":", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "\n", "scope", "=", "self", ".", "scope", ")", "\n", "\n", "# fc7_O = tf.reduce_mean(fc7_O, axis=[1, 2])", "\n", "\n", "", "", "return", "fc7_H", ",", "fc7_O", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.head_to_tail": [[300, 325], ["tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.concat", "tensorflow.concat", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.concat", "tensorflow.concat", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.concat", "tensorflow.concat", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "ResNet50_HICO.resnet_arg_scope"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "head_to_tail", "(", "self", ",", "fc7_H", ",", "fc7_O", ",", "pool5_SH", ",", "pool5_SO", ",", "sp", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "\n", "            ", "fc7_SH", "=", "tf", ".", "reduce_mean", "(", "pool5_SH", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "fc7_SO", "=", "tf", ".", "reduce_mean", "(", "pool5_SO", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "\n", "Concat_SH", "=", "tf", ".", "concat", "(", "[", "fc7_H", ",", "fc7_SH", "]", ",", "1", ")", "\n", "fc8_SH", "=", "slim", ".", "fully_connected", "(", "Concat_SH", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc8_SH'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "fc8_SH", "=", "slim", ".", "dropout", "(", "fc8_SH", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout8_SH'", ")", "\n", "fc9_SH", "=", "slim", ".", "fully_connected", "(", "fc8_SH", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc9_SH'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "fc9_SH", "=", "slim", ".", "dropout", "(", "fc9_SH", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout9_SH'", ")", "\n", "\n", "Concat_SO", "=", "tf", ".", "concat", "(", "[", "fc7_O", ",", "fc7_SO", "]", ",", "1", ")", "\n", "fc8_SO", "=", "slim", ".", "fully_connected", "(", "Concat_SO", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc8_SO'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "fc8_SO", "=", "slim", ".", "dropout", "(", "fc8_SO", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout8_SO'", ")", "\n", "fc9_SO", "=", "slim", ".", "fully_connected", "(", "fc8_SO", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc9_SO'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "fc9_SO", "=", "slim", ".", "dropout", "(", "fc9_SO", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout9_SO'", ")", "\n", "\n", "Concat_SHsp", "=", "tf", ".", "concat", "(", "[", "fc7_H", ",", "sp", "]", ",", "1", ")", "\n", "Concat_SHsp", "=", "slim", ".", "fully_connected", "(", "Concat_SHsp", ",", "self", ".", "num_fc", ",", "scope", "=", "'Concat_SHsp'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "Concat_SHsp", "=", "slim", ".", "dropout", "(", "Concat_SHsp", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout6_SHsp'", ")", "\n", "fc7_SHsp", "=", "slim", ".", "fully_connected", "(", "Concat_SHsp", ",", "self", ".", "num_fc", ",", "scope", "=", "'fc7_SHsp'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "fc7_SHsp", "=", "slim", ".", "dropout", "(", "fc7_SHsp", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout7_SHsp'", ")", "\n", "\n", "", "return", "fc9_SH", ",", "fc9_SO", ",", "fc7_SHsp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.crop_pool_layer": [[327, 339], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.squeeze", "tensorflow.squeeze", "ResNet50_HICO.ResNet50.trans_boxes_by_feats", "tensorflow.slice", "tensorflow.slice", "tensorflow.image.crop_and_resize", "tensorflow.image.crop_and_resize", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.image.crop_and_resize", "tensorflow.image.crop_and_resize", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.trans_boxes_by_feats"], ["", "def", "crop_pool_layer", "(", "self", ",", "bottom", ",", "rois", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "batch_ids", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"batch_id\"", ")", ",", "[", "1", "]", ")", "\n", "bboxes", "=", "self", ".", "trans_boxes_by_feats", "(", "bottom", ",", "rois", ")", "\n", "if", "cfg", ".", "RESNET", ".", "MAX_POOL", ":", "\n", "                ", "pre_pool_size", "=", "cfg", ".", "POOLING_SIZE", "*", "2", "\n", "crops", "=", "tf", ".", "image", ".", "crop_and_resize", "(", "bottom", ",", "bboxes", ",", "tf", ".", "to_int32", "(", "batch_ids", ")", ",", "[", "pre_pool_size", ",", "pre_pool_size", "]", ",", "name", "=", "\"crops\"", ")", "\n", "crops", "=", "slim", ".", "max_pool2d", "(", "crops", ",", "[", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ")", "\n", "", "else", ":", "\n", "                ", "crops", "=", "tf", ".", "image", ".", "crop_and_resize", "(", "bottom", ",", "bboxes", ",", "tf", ".", "to_int32", "(", "batch_ids", ")", ",", "[", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", "]", ",", "name", "=", "\"crops\"", ")", "\n", "", "", "return", "crops", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.trans_boxes_by_feats": [[340, 350], ["tensorflow.shape", "tensorflow.shape", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "numpy.float32", "numpy.float32", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.concat", "tensorflow.concat", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float"], "methods", ["None"], ["", "def", "trans_boxes_by_feats", "(", "self", ",", "bottom", ",", "rois", ")", ":", "\n", "        ", "bottom_shape", "=", "tf", ".", "shape", "(", "bottom", ")", "\n", "height", "=", "(", "tf", ".", "to_float", "(", "bottom_shape", "[", "1", "]", ")", "-", "1.", ")", "*", "np", ".", "float32", "(", "self", ".", "stride", "[", "0", "]", ")", "\n", "width", "=", "(", "tf", ".", "to_float", "(", "bottom_shape", "[", "2", "]", ")", "-", "1.", ")", "*", "np", ".", "float32", "(", "self", ".", "stride", "[", "0", "]", ")", "\n", "x1", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"x1\"", ")", "/", "width", "\n", "y1", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "2", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"y1\"", ")", "/", "height", "\n", "x2", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "3", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"x2\"", ")", "/", "width", "\n", "y2", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "4", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"y2\"", ")", "/", "height", "\n", "bboxes", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "concat", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", "]", ",", "axis", "=", "1", ")", ")", "\n", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_pool_layer_H": [[351, 359], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "attention_pool_layer_H", "(", "self", ",", "bottom", ",", "fc7_H", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "fc1", "=", "slim", ".", "fully_connected", "(", "fc7_H", ",", "512", ",", "scope", "=", "'fc1_b'", ")", "\n", "fc1", "=", "slim", ".", "dropout", "(", "fc1", ",", "keep_prob", "=", "0.8", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout1_b'", ")", "\n", "fc1", "=", "tf", ".", "reshape", "(", "fc1", ",", "[", "tf", ".", "shape", "(", "fc1", ")", "[", "0", "]", ",", "1", ",", "1", ",", "tf", ".", "shape", "(", "fc1", ")", "[", "1", "]", "]", ")", "\n", "att", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "bottom", ",", "fc1", ")", ",", "3", ",", "keep_dims", "=", "True", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_norm_H": [[361, 371], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.shape", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "attention_norm_H", "(", "self", ",", "att", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "att_shape", "=", "tf", ".", "shape", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "[", "att_shape", "[", "0", "]", ",", "att_shape", "[", "1", "]", ",", "-", "1", "]", ")", "\n", "att", "=", "tf", ".", "nn", ".", "softmax", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "att_shape", ")", "\n", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_pool_layer_O": [[372, 380], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "attention_pool_layer_O", "(", "self", ",", "bottom", ",", "fc7_O", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "fc1", "=", "slim", ".", "fully_connected", "(", "fc7_O", ",", "512", ",", "scope", "=", "'fc1_b'", ")", "\n", "fc1", "=", "slim", ".", "dropout", "(", "fc1", ",", "keep_prob", "=", "0.8", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout1_b'", ")", "\n", "fc1", "=", "tf", ".", "reshape", "(", "fc1", ",", "[", "tf", ".", "shape", "(", "fc1", ")", "[", "0", "]", ",", "1", ",", "1", ",", "tf", ".", "shape", "(", "fc1", ")", "[", "1", "]", "]", ")", "\n", "att", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "multiply", "(", "bottom", ",", "fc1", ")", ",", "3", ",", "keep_dims", "=", "True", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_norm_O": [[382, 392], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.shape", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "def", "attention_norm_O", "(", "self", ",", "att", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "att_shape", "=", "tf", ".", "shape", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "[", "att_shape", "[", "0", "]", ",", "att_shape", "[", "1", "]", ",", "-", "1", "]", ")", "\n", "att", "=", "tf", ".", "nn", ".", "softmax", "(", "att", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "att_shape", ")", "\n", "att", "=", "tf", ".", "transpose", "(", "att", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.region_classification": [[393, 428], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["None"], ["", "def", "region_classification", "(", "self", ",", "fc7_H", ",", "fc7_O", ",", "fc7_SHsp", ",", "is_training", ",", "initializer", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "cls_score_H", "=", "slim", ".", "fully_connected", "(", "fc7_H", ",", "self", ".", "num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'cls_score_H'", ")", "\n", "cls_prob_H", "=", "tf", ".", "nn", ".", "sigmoid", "(", "cls_score_H", ",", "name", "=", "'cls_prob_H'", ")", "\n", "tf", ".", "reshape", "(", "cls_prob_H", ",", "[", "-", "1", ",", "self", ".", "num_classes", "]", ")", "\n", "\n", "cls_score_O", "=", "slim", ".", "fully_connected", "(", "fc7_O", ",", "self", ".", "num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'cls_score_O'", ")", "\n", "cls_prob_O", "=", "tf", ".", "nn", ".", "sigmoid", "(", "cls_score_O", ",", "name", "=", "'cls_prob_O'", ")", "\n", "tf", ".", "reshape", "(", "cls_prob_O", ",", "[", "-", "1", ",", "self", ".", "num_classes", "]", ")", "\n", "\n", "cls_score_sp", "=", "slim", ".", "fully_connected", "(", "fc7_SHsp", ",", "self", ".", "num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'cls_score_sp'", ")", "\n", "cls_prob_sp", "=", "tf", ".", "nn", ".", "sigmoid", "(", "cls_score_sp", ",", "name", "=", "'cls_prob_sp'", ")", "\n", "tf", ".", "reshape", "(", "cls_prob_sp", ",", "[", "-", "1", ",", "self", ".", "num_classes", "]", ")", "\n", "\n", "\n", "self", ".", "predictions", "[", "\"cls_score_H\"", "]", "=", "cls_score_H", "\n", "self", ".", "predictions", "[", "\"cls_prob_H\"", "]", "=", "cls_prob_H", "\n", "self", ".", "predictions", "[", "\"cls_score_O\"", "]", "=", "cls_score_O", "\n", "self", ".", "predictions", "[", "\"cls_prob_O\"", "]", "=", "cls_prob_O", "\n", "self", ".", "predictions", "[", "\"cls_score_sp\"", "]", "=", "cls_score_sp", "\n", "self", ".", "predictions", "[", "\"cls_prob_sp\"", "]", "=", "cls_prob_sp", "\n", "\n", "self", ".", "predictions", "[", "\"cls_prob_HO\"", "]", "=", "cls_prob_sp", "*", "(", "cls_prob_O", "+", "cls_prob_H", ")", "\n", "\n", "", "return", "cls_prob_H", ",", "cls_prob_O", ",", "cls_prob_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.bottleneck": [[429, 438], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.conv2d", "scope.reuse_variables"], "methods", ["None"], ["", "def", "bottleneck", "(", "self", ",", "bottom", ",", "is_training", ",", "name", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "            ", "if", "reuse", ":", "\n", "                ", "scope", ".", "reuse_variables", "(", ")", "\n", "\n", "", "head_bottleneck", "=", "slim", ".", "conv2d", "(", "bottom", ",", "1024", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "name", ")", "\n", "\n", "", "return", "head_bottleneck", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.build_network": [[439, 480], ["tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "ResNet50_HICO.ResNet50.image_to_head", "ResNet50_HICO.ResNet50.sp_to_head", "ResNet50_HICO.ResNet50.crop_pool_layer", "ResNet50_HICO.ResNet50.crop_pool_layer", "ResNet50_HICO.ResNet50.res5", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "ResNet50_HICO.ResNet50.attention_pool_layer_H", "ResNet50_HICO.ResNet50.attention_norm_H", "tensorflow.multiply", "tensorflow.multiply", "ResNet50_HICO.ResNet50.attention_pool_layer_O", "ResNet50_HICO.ResNet50.attention_norm_O", "tensorflow.multiply", "tensorflow.multiply", "ResNet50_HICO.ResNet50.bottleneck", "ResNet50_HICO.ResNet50.bottleneck", "ResNet50_HICO.ResNet50.head_to_tail", "ResNet50_HICO.ResNet50.region_classification", "ResNet50_HICO.ResNet50.score_summaries.update", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reduce_min"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.image_to_head", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.sp_to_head", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.crop_pool_layer", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.crop_pool_layer", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.res5", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_pool_layer_H", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_norm_H", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_pool_layer_O", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.attention_norm_O", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.bottleneck", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.bottleneck", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.head_to_tail", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.region_classification"], ["", "def", "build_network", "(", "self", ",", "is_training", ")", ":", "\n", "        ", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.01", ")", "\n", "\n", "# ResNet Backbone", "\n", "head", "=", "self", ".", "image_to_head", "(", "is_training", ")", "\n", "sp", "=", "self", ".", "sp_to_head", "(", ")", "\n", "pool5_H", "=", "self", ".", "crop_pool_layer", "(", "head", ",", "self", ".", "H_boxes", ",", "'Crop_H'", ")", "\n", "pool5_O", "=", "self", ".", "crop_pool_layer", "(", "head", ",", "self", ".", "O_boxes", "[", ":", "self", ".", "H_num", ",", ":", "]", ",", "'Crop_O'", ")", "\n", "\n", "fc7_H", ",", "fc7_O", "=", "self", ".", "res5", "(", "pool5_H", ",", "pool5_O", ",", "sp", ",", "is_training", ",", "'res5'", ")", "\n", "fc7_H", "=", "tf", ".", "reduce_mean", "(", "fc7_H", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "fc7_O", "=", "tf", ".", "reduce_mean", "(", "fc7_O", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "\n", "# Phi ", "\n", "head_phi", "=", "slim", ".", "conv2d", "(", "head", ",", "512", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'head_phi'", ")", "\n", "\n", "# g ", "\n", "head_g", "=", "slim", ".", "conv2d", "(", "head", ",", "512", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'head_g'", ")", "\n", "\n", "Att_H", "=", "self", ".", "attention_pool_layer_H", "(", "head_phi", ",", "fc7_H", ",", "is_training", ",", "'Att_H'", ")", "\n", "Att_H", "=", "self", ".", "attention_norm_H", "(", "Att_H", ",", "'Norm_Att_H'", ")", "\n", "att_head_H", "=", "tf", ".", "multiply", "(", "head_g", ",", "Att_H", ")", "\n", "\n", "Att_O", "=", "self", ".", "attention_pool_layer_O", "(", "head_phi", ",", "fc7_O", ",", "is_training", ",", "'Att_O'", ")", "\n", "Att_O", "=", "self", ".", "attention_norm_O", "(", "Att_O", ",", "'Norm_Att_O'", ")", "\n", "att_head_O", "=", "tf", ".", "multiply", "(", "head_g", ",", "Att_O", ")", "\n", "\n", "pool5_SH", "=", "self", ".", "bottleneck", "(", "att_head_H", ",", "is_training", ",", "'bottleneck'", ",", "False", ")", "\n", "pool5_SO", "=", "self", ".", "bottleneck", "(", "att_head_O", ",", "is_training", ",", "'bottleneck'", ",", "True", ")", "\n", "\n", "# fc7_O = tf.Print(fc7_O, [tf.shape(fc7_O), tf.shape(fc7_H)], message='check fc7_O:')", "\n", "fc7_SH", ",", "fc7_SO", ",", "fc7_SHsp", "=", "self", ".", "head_to_tail", "(", "fc7_H", ",", "fc7_O", ",", "pool5_SH", ",", "pool5_SO", ",", "sp", ",", "is_training", ",", "'fc_HO'", ")", "\n", "\n", "# fc7_SO = tf.Print(fc7_SO, [tf.shape(fc7_SO), tf.shape(fc7_SH), tf.shape(fc7_SHsp)], message='check fc7_SHsp:')", "\n", "cls_prob_H", ",", "cls_prob_O", ",", "cls_prob_sp", "=", "self", ".", "region_classification", "(", "fc7_SH", ",", "fc7_SO", ",", "fc7_SHsp", ",", "is_training", ",", "initializer", ",", "'classification'", ")", "\n", "\n", "self", ".", "score_summaries", ".", "update", "(", "self", ".", "predictions", ")", "\n", "self", ".", "visualize", "[", "\"attention_map_H\"", "]", "=", "(", "Att_H", "-", "tf", ".", "reduce_min", "(", "Att_H", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", "/", "tf", ".", "reduce_max", "(", "(", "Att_H", "[", "0", ",", ":", ",", ":", ",", ":", "]", "-", "tf", ".", "reduce_min", "(", "Att_H", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", ")", "\n", "self", ".", "visualize", "[", "\"attention_map_O\"", "]", "=", "(", "Att_O", "-", "tf", ".", "reduce_min", "(", "Att_O", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", "/", "tf", ".", "reduce_max", "(", "(", "Att_O", "[", "0", ",", ":", ",", ":", ",", ":", "]", "-", "tf", ".", "reduce_min", "(", "Att_O", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ")", ")", "\n", "\n", "return", "cls_prob_H", ",", "cls_prob_O", ",", "cls_prob_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.create_architecture": [[481, 510], ["ResNet50_HICO.ResNet50.build_network", "layers_to_output.update", "ResNet50_HICO.ResNet50.add_loss", "tensorflow.device", "tensorflow.device", "ResNet50_HICO.ResNet50.visualize.items", "ResNet50_HICO.ResNet50.event_summaries.items", "tensorflow.summary.merge_all", "tensorflow.summary.merge_all", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.image", "tensorflow.summary.image", "val_summaries.append", "tensorflow.summary.scalar", "tensorflow.summary.scalar"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.build_network", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.add_loss"], ["", "def", "create_architecture", "(", "self", ",", "is_training", ")", ":", "\n", "\n", "        ", "self", ".", "build_network", "(", "is_training", ")", "\n", "\n", "# for var in tf.trainable_variables():", "\n", "#     self.train_summaries.append(var)", "\n", "\n", "if", "is_training", ":", "self", ".", "add_loss", "(", ")", "\n", "layers_to_output", "=", "{", "}", "\n", "layers_to_output", ".", "update", "(", "self", ".", "losses", ")", "\n", "\n", "val_summaries", "=", "[", "]", "\n", "if", "is_training", ":", "\n", "            ", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "# val_summaries.append(self.add_gt_image_summary_H())", "\n", "# val_summaries.append(self.add_gt_image_summary_HO())", "\n", "# tf.summary.image('ATTENTION_MAP_H',  self.visualize[\"attention_map_H\"], max_outputs=1)", "\n", "# tf.summary.image('ATTENTION_MAP_O',  self.visualize[\"attention_map_O\"], max_outputs=1)", "\n", "\n", "                ", "for", "key", ",", "var", "in", "self", ".", "visualize", ".", "items", "(", ")", ":", "\n", "                    ", "tf", ".", "summary", ".", "image", "(", "key", ",", "var", ",", "max_outputs", "=", "1", ")", "\n", "", "for", "key", ",", "var", "in", "self", ".", "event_summaries", ".", "items", "(", ")", ":", "\n", "                    ", "val_summaries", ".", "append", "(", "tf", ".", "summary", ".", "scalar", "(", "key", ",", "var", ")", ")", "\n", "\n", "# val_summaries.append(tf.summary.scalar('lr', self.lr))", "\n", "", "self", ".", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "summary_op_val", "=", "tf", ".", "summary", ".", "merge", "(", "val_summaries", ")", "\n", "\n", "", "", "return", "layers_to_output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.add_loss": [[512, 534], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "ResNet50_HICO.ResNet50.event_summaries.update", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "add_loss", "(", "self", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'LOSS'", ")", "as", "scope", ":", "\n", "            ", "cls_score_H", "=", "self", ".", "predictions", "[", "\"cls_score_H\"", "]", "\n", "cls_score_O", "=", "self", ".", "predictions", "[", "\"cls_score_O\"", "]", "\n", "cls_score_sp", "=", "self", ".", "predictions", "[", "\"cls_score_sp\"", "]", "\n", "label_HO", "=", "self", ".", "gt_class_HO", "\n", "\n", "H_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_HO", "[", ":", "self", ".", "H_num", ",", ":", "]", ",", "logits", "=", "cls_score_H", "[", ":", "self", ".", "H_num", ",", ":", "]", ")", ")", "\n", "O_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_HO", "[", ":", "self", ".", "H_num", ",", ":", "]", ",", "logits", "=", "cls_score_O", "[", ":", "self", ".", "H_num", ",", ":", "]", ")", ")", "\n", "sp_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "label_HO", ",", "logits", "=", "cls_score_sp", ")", ")", "\n", "\n", "self", ".", "losses", "[", "'H_cross_entropy'", "]", "=", "H_cross_entropy", "\n", "self", ".", "losses", "[", "'O_cross_entropy'", "]", "=", "O_cross_entropy", "\n", "self", ".", "losses", "[", "'sp_cross_entropy'", "]", "=", "sp_cross_entropy", "\n", "\n", "loss", "=", "H_cross_entropy", "+", "O_cross_entropy", "+", "sp_cross_entropy", "\n", "\n", "self", ".", "losses", "[", "'total_loss'", "]", "=", "loss", "\n", "self", ".", "event_summaries", ".", "update", "(", "self", ".", "losses", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.add_gt_image_summary_H": [[536, 542], ["tensorflow.py_func", "tensorflow.py_func", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.reverse", "tensorflow.reverse"], "methods", ["None"], ["", "def", "add_gt_image_summary_H", "(", "self", ")", ":", "\n", "\n", "        ", "image", "=", "tf", ".", "py_func", "(", "draw_bounding_boxes_HOI", ",", "\n", "[", "tf", ".", "reverse", "(", "self", ".", "image", "+", "cfg", ".", "PIXEL_MEANS", ",", "axis", "=", "[", "-", "1", "]", ")", ",", "self", ".", "H_boxes", ",", "self", ".", "gt_class_HO", "]", ",", "\n", "tf", ".", "float32", ",", "name", "=", "\"gt_boxes_H\"", ")", "\n", "return", "tf", ".", "summary", ".", "image", "(", "'GROUND_TRUTH_H'", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.add_gt_image_summary_HO": [[543, 549], ["tensorflow.py_func", "tensorflow.py_func", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.reverse", "tensorflow.reverse"], "methods", ["None"], ["", "def", "add_gt_image_summary_HO", "(", "self", ")", ":", "\n", "\n", "        ", "image", "=", "tf", ".", "py_func", "(", "draw_bounding_boxes_HOI", ",", "\n", "[", "tf", ".", "reverse", "(", "self", ".", "image", "+", "cfg", ".", "PIXEL_MEANS", ",", "axis", "=", "[", "-", "1", "]", ")", ",", "self", ".", "O_boxes", ",", "self", ".", "gt_class_HO", "]", ",", "\n", "tf", ".", "float32", ",", "name", "=", "\"gt_boxes_HO\"", ")", "\n", "return", "tf", ".", "summary", ".", "image", "(", "'GROUND_TRUTH_HO)'", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.add_score_summary": [[552, 555], ["tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["None"], ["", "def", "add_score_summary", "(", "self", ",", "key", ",", "tensor", ")", ":", "\n", "        ", "if", "tensor", "is", "not", "None", "and", "tensor", ".", "op", "is", "not", "None", ":", "\n", "            ", "tf", ".", "summary", ".", "histogram", "(", "'SCORE/'", "+", "tensor", ".", "op", ".", "name", "+", "'/'", "+", "key", "+", "'/scores'", ",", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.add_train_summary": [[557, 559], ["tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["None"], ["", "", "def", "add_train_summary", "(", "self", ",", "var", ")", ":", "\n", "        ", "tf", ".", "summary", ".", "histogram", "(", "'TRAIN/'", "+", "var", ".", "op", ".", "name", ",", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.get_feed_dict": [[560, 567], ["None"], "methods", ["None"], ["", "def", "get_feed_dict", "(", "self", ",", "blobs", ")", ":", "\n", "        ", "feed_dict", "=", "{", "self", ".", "image", ":", "blobs", "[", "'image'", "]", ",", "self", ".", "H_boxes", ":", "blobs", "[", "'H_boxes'", "]", ",", "\n", "self", ".", "O_boxes", ":", "blobs", "[", "'O_boxes'", "]", ",", "self", ".", "gt_class_HO", ":", "blobs", "[", "'gt_class_HO'", "]", ",", "\n", "self", ".", "spatial", ":", "blobs", "[", "'sp'", "]", ",", "\n", "# self.lr: lr,", "\n", "self", ".", "H_num", ":", "blobs", "[", "'H_num'", "]", "}", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.train_step": [[568, 575], ["ResNet50_HICO.ResNet50.get_feed_dict", "sess.run"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.get_feed_dict"], ["", "def", "train_step", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "        ", "feed_dict", "=", "self", ".", "get_feed_dict", "(", "blobs", ")", "\n", "\n", "loss", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "\n", "train_op", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.train_step_with_summary": [[576, 584], ["ResNet50_HICO.ResNet50.get_feed_dict", "sess.run"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.get_feed_dict"], ["", "def", "train_step_with_summary", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "        ", "feed_dict", "=", "self", ".", "get_feed_dict", "(", "blobs", ")", "\n", "\n", "loss", ",", "summary", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "\n", "self", ".", "summary_op", ",", "\n", "train_op", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "loss", ",", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.train_step_tfr": [[586, 590], ["sess.run"], "methods", ["None"], ["", "def", "train_step_tfr", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "        ", "loss", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "self", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "return", "loss", ",", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.train_step_tfr_with_summary": [[591, 597], ["sess.run"], "methods", ["None"], ["", "def", "train_step_tfr_with_summary", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ")", ":", "\n", "\n", "        ", "loss", ",", "summary", ",", "image_id", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "losses", "[", "'total_loss'", "]", ",", "\n", "self", ".", "summary_op", ",", "self", ".", "image_id", ",", "\n", "train_op", "]", ")", "\n", "return", "loss", ",", "image_id", ",", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.test_image_HO": [[598, 603], ["sess.run"], "methods", ["None"], ["", "def", "test_image_HO", "(", "self", ",", "sess", ",", "image", ",", "blobs", ")", ":", "\n", "        ", "feed_dict", "=", "{", "self", ".", "image", ":", "image", ",", "self", ".", "H_boxes", ":", "blobs", "[", "'H_boxes'", "]", ",", "self", ".", "O_boxes", ":", "blobs", "[", "'O_boxes'", "]", ",", "self", ".", "spatial", ":", "blobs", "[", "'sp'", "]", ",", "self", ".", "H_num", ":", "blobs", "[", "'H_num'", "]", "}", "\n", "cls_prob_HO", "=", "sess", ".", "run", "(", "[", "self", ".", "predictions", "[", "\"cls_prob_HO\"", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "return", "cls_prob_HO", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.obtain_all_preds": [[604, 610], ["sess.run"], "methods", ["None"], ["", "def", "obtain_all_preds", "(", "self", ",", "sess", ",", "image", ",", "blobs", ")", ":", "\n", "        ", "feed_dict", "=", "{", "self", ".", "image", ":", "image", ",", "self", ".", "H_boxes", ":", "blobs", "[", "'H_boxes'", "]", ",", "self", ".", "O_boxes", ":", "blobs", "[", "'O_boxes'", "]", ",", "\n", "self", ".", "spatial", ":", "blobs", "[", "'sp'", "]", ",", "self", ".", "H_num", ":", "blobs", "[", "'H_num'", "]", "}", "\n", "cls_prob_HO", ",", "pH", ",", "pO", ",", "pSp", "=", "sess", ".", "run", "(", "[", "self", ".", "predictions", "[", "\"cls_prob_HO\"", "]", ",", "self", ".", "predictions", "[", "\"cls_prob_H\"", "]", ",", "\n", "self", ".", "predictions", "[", "\"cls_prob_O\"", "]", ",", "self", ".", "predictions", "[", "\"cls_prob_sp\"", "]", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "return", "cls_prob_HO", ",", "pH", ",", "pO", ",", "pSp", ",", "pSp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.ResNet50.obtain_all_preds_tfr": [[611, 617], ["sess.run"], "methods", ["None"], ["", "def", "obtain_all_preds_tfr", "(", "self", ",", "sess", ")", ":", "\n", "        ", "cls_prob_HO", ",", "pH", ",", "pO", ",", "pSp", "=", "sess", ".", "run", "(", "[", "self", ".", "predictions", "[", "\"cls_prob_HO\"", "]", ",", "self", ".", "predictions", "[", "\"cls_prob_H\"", "]", ",", "\n", "self", ".", "predictions", "[", "\"cls_prob_O\"", "]", ",", "self", ".", "predictions", "[", "\"cls_prob_sp\"", "]", "]", ")", "\n", "\n", "\n", "return", "cls_prob_HO", ",", "pH", ",", "pO", ",", "pSp", ",", "pSp", "", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.networks.ResNet50_HICO.resnet_arg_scope": [[25, 50], ["tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.variance_scaling_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.constant_initializer"], "function", ["None"], ["def", "resnet_arg_scope", "(", "is_training", "=", "True", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ",", "\n", "batch_norm_decay", "=", "0.997", ",", "\n", "batch_norm_epsilon", "=", "1e-5", ",", "\n", "batch_norm_scale", "=", "True", ")", ":", "\n", "    ", "batch_norm_params", "=", "{", "\n", "'is_training'", ":", "False", ",", "\n", "'decay'", ":", "batch_norm_decay", ",", "\n", "'epsilon'", ":", "batch_norm_epsilon", ",", "\n", "'scale'", ":", "batch_norm_scale", ",", "\n", "'trainable'", ":", "False", ",", "\n", "'updates_collections'", ":", "ops", ".", "GraphKeys", ".", "UPDATE_OPS", "\n", "}", "\n", "with", "arg_scope", "(", "\n", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", "]", ",", "\n", "weights_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", ",", "\n", "weights_initializer", "=", "slim", ".", "variance_scaling_initializer", "(", ")", ",", "\n", "biases_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "normalizer_params", "=", "batch_norm_params", ")", ":", "\n", "        ", "with", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "**", "batch_norm_params", ")", "as", "arg_sc", ":", "\n", "            ", "return", "arg_sc", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.myunittest._init_paths.add_path": [[4, 7], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.myunittest.test_dataset.IOTestCase.test_Get_Next_Instance_HO_Neg_HICO": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "test_Get_Next_Instance_HO_Neg_HICO", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.myunittest.test_dataset.IOTestCase.test_obtain_data1": [[14, 35], ["obtain_data_vcl_hico", "test_dataset.IOTestCase.test_session", "sess.run", "range", "time.time", "sess.run", "print", "print", "time.time", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.ult.obtain_data_vcl_hico"], ["", "def", "test_obtain_data1", "(", "self", ")", ":", "\n", "        ", "from", "ult", ".", "ult", "import", "obtain_data_vcl_hico", "\n", "\n", "image", ",", "img_id", ",", "num_pos", ",", "Human_augmented", ",", "Object_augmented", ",", "action_HO", ",", "sp", "=", "obtain_data_vcl_hico", "(", "\n", "Pos_augment", "=", "15", ",", "Neg_select", "=", "60", ",", "augment_type", "=", "5", ",", "zero_shot_type", "=", "0", ",", "isalign", "=", "True", ")", "\n", "\n", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "            ", "count_time", "=", "0", "\n", "avg_time", "=", "0", "\n", "res", "=", "sess", ".", "run", "(", "[", "num_pos", ",", "tf", ".", "shape", "(", "image", "[", "0", "]", ")", ",", "tf", ".", "shape", "(", "image", "[", "1", "]", ")", ",", "img_id", ",", "num_pos", ",", "tf", ".", "shape", "(", "Human_augmented", "[", "0", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "                ", "import", "time", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "res", "=", "sess", ".", "run", "(", "[", "tf", ".", "shape", "(", "image", "[", "0", "]", ")", ",", "tf", ".", "shape", "(", "image", "[", "1", "]", ")", ",", "img_id", ",", "num_pos", ",", "tf", ".", "shape", "(", "Human_augmented", "[", "0", "]", ")", "\n", ",", "tf", ".", "shape", "(", "Human_augmented", "[", "1", "]", ")", ",", "action_HO", "]", ")", "\n", "print", "(", "res", "[", "3", "]", ",", "res", "[", "4", "]", ",", "res", "[", "5", "]", ",", "'===='", ")", "\n", "\n", "avg_time", "=", "(", "(", "time", ".", "time", "(", ")", "-", "st", ")", "+", "avg_time", "*", "count_time", ")", "/", "(", "count_time", "+", "1", ")", "\n", "count_time", "+=", "1", "\n", "print", "(", "i", ",", "'generate batch:'", ",", "time", ".", "time", "(", ")", "-", "st", ",", "\"average;\"", ",", "avg_time", ")", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Train_ATL_HOI_COCO_21.parse_args": [[17, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train an iCAN on VCOCO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'max_iters'", ",", "\n", "help", "=", "'Number of iterations to perform'", ",", "\n", "default", "=", "300000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'ATL_union_multi_atl_ml5_l05_t5_def2_aug5_new_VCOCO_coco_CL_21'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--Restore_flag'", ",", "dest", "=", "'Restore_flag'", ",", "\n", "help", "=", "'Number of Res5 blocks'", ",", "\n", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--Pos_augment'", ",", "dest", "=", "'Pos_augment'", ",", "\n", "help", "=", "'Number of augmented detection for each one. (By jittering the object detections)'", ",", "\n", "default", "=", "15", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--Neg_select'", ",", "dest", "=", "'Neg_select'", ",", "\n", "help", "=", "'Number of Negative example selected for each image'", ",", "\n", "default", "=", "30", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Test_VCL_ResNet_VCOCO.parse_args": [[26, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test VCL on VCOCO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "300000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'VCL_union_multi_ml1_l05_t3_rew_aug5_3_new_VCOCO_test'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--prior_flag'", ",", "dest", "=", "'prior_flag'", ",", "\n", "help", "=", "'whether use prior_flag'", ",", "\n", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--object_thres'", ",", "dest", "=", "'object_thres'", ",", "\n", "help", "=", "'Object threshold'", ",", "\n", "default", "=", "0.4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--human_thres'", ",", "dest", "=", "'human_thres'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "0.8", ",", "type", "=", "float", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Test_FCL_HICO.parse_args": [[23, 46], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test an FCL on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "600000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'FCL_union_l2_zs_s0_vloss2_varl_gan_dax_rands_rew_aug5_x5new_res101'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--object_thres'", ",", "dest", "=", "'object_thres'", ",", "\n", "help", "=", "'Object threshold'", ",", "\n", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--human_thres'", ",", "dest", "=", "'human_thres'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "0.3", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "dest", "=", "'debug'", ",", "\n", "help", "=", "'debug, if not debug, ignore.'", ",", "\n", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--type'", ",", "dest", "=", "'test_type'", ",", "\n", "help", "=", "'vcl, drg, gt, coco101, coco50 ...'", ",", "\n", "default", "=", "'vcl'", ",", "type", "=", "str", ")", "\n", "# vcl, drg, gt, coco101, coco50 ...", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Test_FCL_HICO.switch_checkpoint_path": [[47, 51], ["model_checkpoint_path.replace.replace", "model_checkpoint_path.replace.split"], "function", ["None"], ["", "def", "switch_checkpoint_path", "(", "model_checkpoint_path", ")", ":", "\n", "    ", "head", "=", "model_checkpoint_path", ".", "split", "(", "'Weights'", ")", "[", "0", "]", "\n", "model_checkpoint_path", "=", "model_checkpoint_path", ".", "replace", "(", "head", ",", "cfg", ".", "LOCAL_DATA", "+", "'/'", ")", "\n", "return", "model_checkpoint_path", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Test_ATL_ResNet_VCOCO_24.parse_args": [[23, 43], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test an iCAN on VCOCO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "300000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'ATL_union_multi_atl_ml5_l05_t5_def2_aug5_new_VCOCO_coco_CL_24'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--prior_flag'", ",", "dest", "=", "'prior_flag'", ",", "\n", "help", "=", "'whether use prior_flag'", ",", "\n", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--object_thres'", ",", "dest", "=", "'object_thres'", ",", "\n", "help", "=", "'Object threshold'", ",", "\n", "default", "=", "0.4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--human_thres'", ",", "dest", "=", "'human_thres'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "0.8", ",", "type", "=", "float", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Train_FCL_HICO.parse_args": [[24, 50], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train network'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'max_iters'", ",", "\n", "help", "=", "'Number of iterations to perform'", ",", "\n", "default", "=", "600000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model: '", "\n", "'open long-tailed FCL: FCL_union_l2_zs_s0_vloss2_varl_gan_dax_rands_rew_aug5_x5new_res101,'", "\n", "'open long-tailed baseline: FCL_base_union_l2_zs_s0_vloss2_rew_aug5_x5new_res101'", "\n", "'rare-first zero-shot:FCL_union_l2_zsrare_s0_vloss2_varl_gan_dax_rands_rew_aug5_x5new_res101'", "\n", "'non-rare-first zero-shot:FCL_union_l2_zsnrare_s0_vloss2_varl_gan_dax_rands_rew_aug5_x5new_res101'", "\n", "'you can also use FCL_union_l2_zs_s0_vloss2_var_gan_dax_rands_rew_aug5_x5new_res101'", ",", "\n", "default", "=", "'FCL_union_l2_zs_s0_vloss2_varl_gan_dax_rands_rew_aug5_x5new_res101'", ",", "type", "=", "str", ")", "\n", "# This is our baseline FCL_base_union_l2_zs_s0_vloss2_rew_aug5_xnew_res101", "\n", "\n", "parser", ".", "add_argument", "(", "'--Pos_augment'", ",", "dest", "=", "'Pos_augment'", ",", "\n", "help", "=", "'Number of augmented detection for each one. (By jittering the object detections)'", ",", "\n", "default", "=", "15", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--Neg_select'", ",", "dest", "=", "'Neg_select'", ",", "\n", "help", "=", "'Number of Negative example selected for each image'", ",", "\n", "default", "=", "60", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--Restore_flag'", ",", "dest", "=", "'Restore_flag'", ",", "\n", "help", "=", "'How many ResNet blocks are there?'", ",", "\n", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Train_VCL_ResNet_VCOCO.parse_args": [[24, 45], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train VCL on VCOCO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'max_iters'", ",", "\n", "help", "=", "'Number of iterations to perform'", ",", "\n", "default", "=", "500000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'VCL_union_multi_ml1_l05_t3_rew_aug5_3_new_VCOCO_test'", ",", "type", "=", "str", ")", "\n", "# VCL_union_multi_base_l05_t2_rew_aug5_3_new_VCOCO_test", "\n", "# VCL_union_multi_ml1_l05_t3_rew_aug5_3_new_VCOCO_test", "\n", "parser", ".", "add_argument", "(", "'--Restore_flag'", ",", "dest", "=", "'Restore_flag'", ",", "\n", "help", "=", "'Number of Res5 blocks'", ",", "\n", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--Pos_augment'", ",", "dest", "=", "'Pos_augment'", ",", "\n", "help", "=", "'Number of augmented detection for each one. (By jittering the object detections)'", ",", "\n", "default", "=", "15", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--Neg_select'", ",", "dest", "=", "'Neg_select'", ",", "\n", "help", "=", "'Number of Negative example selected for each image'", ",", "\n", "default", "=", "30", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Train_VCL_ResNet_VCOCO.get_available_gpus": [[47, 50], ["tensorflow.python.client.device_lib.list_local_devices"], "function", ["None"], ["def", "get_available_gpus", "(", ")", ":", "\n", "    ", "local_device_protos", "=", "device_lib", ".", "list_local_devices", "(", ")", "\n", "return", "[", "x", ".", "name", "for", "x", "in", "local_device_protos", "if", "x", ".", "device_type", "==", "'GPU'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools._init_paths.add_path": [[4, 7], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Test_ATL_ResNet_VCOCO_21.parse_args": [[23, 43], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test an iCAN on VCOCO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "300000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'ATL_union_multi_atl_ml5_l05_t5_def2_aug5_new_VCOCO_coco_CL_21'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--prior_flag'", ",", "dest", "=", "'prior_flag'", ",", "\n", "help", "=", "'whether use prior_flag'", ",", "\n", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--object_thres'", ",", "dest", "=", "'object_thres'", ",", "\n", "help", "=", "'Object threshold'", ",", "\n", "default", "=", "0.4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--human_thres'", ",", "dest", "=", "'human_thres'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "0.8", ",", "type", "=", "float", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Train_VCL_ResNet_HICO.get_available_gpus": [[35, 38], ["tensorflow.python.client.device_lib.list_local_devices"], "function", ["None"], ["def", "get_available_gpus", "(", ")", ":", "\n", "    ", "local_device_protos", "=", "device_lib", ".", "list_local_devices", "(", ")", "\n", "return", "[", "x", ".", "name", "for", "x", "in", "local_device_protos", "if", "x", ".", "device_type", "==", "'GPU'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Train_VCL_ResNet_HICO.parse_args": [[46, 68], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train VCL on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'max_iters'", ",", "\n", "help", "=", "'Number of iterations to perform'", ",", "\n", "default", "=", "800000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'VCL_union_multi_ml5_def1_l2_rew2_aug5_3_x5new_res101'", ",", "type", "=", "str", ")", "\n", "# VCL_union_multi_base_l2_rew2_aug5_3_x5new_res101", "\n", "# VCL_union_multi_ml5_def1_l2_rew2_aug5_3_x5new", "\n", "# posesp for pose", "\n", "parser", ".", "add_argument", "(", "'--Pos_augment'", ",", "dest", "=", "'Pos_augment'", ",", "\n", "help", "=", "'Number of augmented detection for each one. (By jittering the object detections)'", ",", "\n", "default", "=", "15", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--Neg_select'", ",", "dest", "=", "'Neg_select'", ",", "\n", "help", "=", "'Number of Negative example selected for each image'", ",", "\n", "default", "=", "60", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--Restore_flag'", ",", "dest", "=", "'Restore_flag'", ",", "\n", "help", "=", "'How many ResNet blocks are there?'", ",", "\n", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Train_ATL_HOI_COCO_24.parse_args": [[20, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train an iCAN on VCOCO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'max_iters'", ",", "\n", "help", "=", "'Number of iterations to perform'", ",", "\n", "default", "=", "500000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'ATL_union_multi_atl_ml5_l05_t4_def2_aug5_new_VCOCO_coco_CL_24'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--Restore_flag'", ",", "dest", "=", "'Restore_flag'", ",", "\n", "help", "=", "'Number of Res5 blocks'", ",", "\n", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--Pos_augment'", ",", "dest", "=", "'Pos_augment'", ",", "\n", "help", "=", "'Number of augmented detection for each one. (By jittering the object detections)'", ",", "\n", "default", "=", "15", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--Neg_select'", ",", "dest", "=", "'Neg_select'", ",", "\n", "help", "=", "'Number of Negative example selected for each image'", ",", "\n", "default", "=", "30", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Test_ATL_HICO_wo_obj.parse_args": [[24, 49], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test an iCAN on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "1800000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'iCAN_ResNet50_HICO'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--object_thres'", ",", "dest", "=", "'object_thres'", ",", "\n", "help", "=", "'Object threshold'", ",", "\n", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--human_thres'", ",", "dest", "=", "'human_thres'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "0.3", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "dest", "=", "'debug'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--type'", ",", "dest", "=", "'test_type'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "'vcl'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--not_h_threhold'", ",", "dest", "=", "'not_h_threhold'", ",", "\n", "help", "=", "'not_h_threhold'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Test_VCL_ResNet_HICO.parse_args": [[21, 46], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test VCL on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "800000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'VCL_union_multi_ml5_def1_l2_rew2_aug5_3_x5new_res101'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--object_thres'", ",", "dest", "=", "'object_thres'", ",", "\n", "help", "=", "'Object threshold'", ",", "\n", "default", "=", "0.3", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--human_thres'", ",", "dest", "=", "'human_thres'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "0.8", ",", "type", "=", "float", ")", "\n", "# TODO For better object detector, the object_thres and human_thres should also be changed accordingly.", "\n", "#  e.g. in our fine-tuned detector, object_thres and human_thres is 0.1 and 0.3 respectively.", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "dest", "=", "'debug'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--type'", ",", "dest", "=", "'test_type'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "'res101'", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Test_VCL_ResNet_HICO.switch_checkpoint_path": [[47, 51], ["model_checkpoint_path.replace.replace", "model_checkpoint_path.replace.split"], "function", ["None"], ["", "def", "switch_checkpoint_path", "(", "model_checkpoint_path", ")", ":", "\n", "    ", "head", "=", "model_checkpoint_path", ".", "split", "(", "'Weights'", ")", "[", "0", "]", "\n", "model_checkpoint_path", "=", "model_checkpoint_path", ".", "replace", "(", "head", ",", "cfg", ".", "LOCAL_DATA", "+", "'/'", ")", "\n", "return", "model_checkpoint_path", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Train_ATL_HICO.parse_args": [[36, 59], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train an iCAN on VCOCO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'max_iters'", ",", "\n", "help", "=", "'Number of iterations to perform'", ",", "\n", "default", "=", "1200000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model,ATL: ATL_union_batch1_semi_l2_def4_vloss2_rew2_aug5_3_x5new_coco_res101,'", "\n", "'Baseline: ATL_union_batch1_semi_l2_def4_vloss2_rew2_aug5_3_x5new_rehico_res101'", ",", "\n", "default", "=", "'ATL_union_batch1_semi_l2_def4_vloss2_rew2_aug5_3_x5new_coco_res101'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--Pos_augment'", ",", "dest", "=", "'Pos_augment'", ",", "\n", "help", "=", "'Number of augmented detection for each one. (By jittering the object detections)'", ",", "\n", "default", "=", "15", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--Neg_select'", ",", "dest", "=", "'Neg_select'", ",", "\n", "help", "=", "'Number of Negative example selected for each image'", ",", "\n", "default", "=", "60", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--Restore_flag'", ",", "dest", "=", "'Restore_flag'", ",", "\n", "help", "=", "'How many ResNet blocks are there?'", ",", "\n", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--incre_classes'", ",", "dest", "=", "'incre_classes'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Test_HICO_fusion.parse_args": [[32, 57], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test an model on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "600000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'FCL_union_l2_zs_s0_vloss2_varl_gan_dax_rands_rew_aug5_x5new_res101'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--object_thres'", ",", "dest", "=", "'object_thres'", ",", "\n", "help", "=", "'Object threshold'", ",", "\n", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--human_thres'", ",", "dest", "=", "'human_thres'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "0.3", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "dest", "=", "'debug'", ",", "\n", "help", "=", "'for fusing object prediction'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--type'", ",", "dest", "=", "'test_type'", ",", "\n", "help", "=", "'vcl, drg, gt, coco101, coco50 ...'", ",", "\n", "default", "=", "'vcl'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--not_h_threhold'", ",", "dest", "=", "'not_h_threhold'", ",", "\n", "help", "=", "'not_h_threhold'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.tools.Test_HICO_fusion.switch_checkpoint_path": [[59, 63], ["model_checkpoint_path.replace.replace", "model_checkpoint_path.replace.split"], "function", ["None"], ["", "def", "switch_checkpoint_path", "(", "model_checkpoint_path", ")", ":", "\n", "    ", "head", "=", "model_checkpoint_path", ".", "split", "(", "'Weights'", ")", "[", "0", "]", "\n", "model_checkpoint_path", "=", "model_checkpoint_path", ".", "replace", "(", "head", ",", "cfg", ".", "LOCAL_DATA", "+", "'/'", ")", "\n", "return", "model_checkpoint_path", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.scripts.postprocess_coco.add_path": [[6, 9], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.scripts.postprocess_coco.parse_args": [[18, 33], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test VCL on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'VCL_ResNet50_HICO'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--fuse_type'", ",", "dest", "=", "'fuse_type'", ",", "default", "=", "'spho'", ")", "\n", "parser", ".", "add_argument", "(", "'--object_thres'", ",", "dest", "=", "'object_thres'", ",", "\n", "help", "=", "'Object threshold'", ",", "\n", "default", "=", "0.8", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--human_thres'", ",", "dest", "=", "'human_thres'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "0.6", ",", "type", "=", "float", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.scripts.postprocess_coco.get_vcoco": [[34, 40], ["VCOCOeval"], "function", ["None"], ["", "def", "get_vcoco", "(", ")", ":", "\n", "    ", "from", "ult", ".", "vsrl_eval", "import", "VCOCOeval", "\n", "vcocoeval", "=", "VCOCOeval", "(", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/data/vcoco/vcoco_test.json'", ",", "\n", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/data/instances_vcoco_all_2014.json'", ",", "\n", "cfg", ".", "DATA_DIR", "+", "'/'", "+", "'v-coco/data/splits/vcoco_test.ids'", ")", "\n", "return", "vcocoeval", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.scripts.full_test.parse_args": [[20, 40], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test VCL on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "1800000", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'VCL_ResNet50_HICO'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--forever'", ",", "dest", "=", "'forever'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--fuse_type'", ",", "dest", "=", "'fuse_type'", ",", "default", "=", "'spv'", ")", "\n", "# parser.add_argument('--object_thres', dest='object_thres',", "\n", "#                     help='Object threshold',", "\n", "#                     default=0.8, type=float)", "\n", "# parser.add_argument('--human_thres', dest='human_thres',", "\n", "#                     help='Human threshold',", "\n", "#                     default=0.6, type=float)", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.scripts.evaluate.parse_args": [[23, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test network'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "500000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'FCL_resnet101_union_l2_zs_s0_vloss2_varl_gan_dax_rands_aug5_xnew'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--fuse_type'", ",", "dest", "=", "'fuse_type'", ",", "default", "=", "'spv'", ")", "\n", "parser", ".", "add_argument", "(", "'--type'", ",", "dest", "=", "'test_type'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "'vcl'", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.scripts.postprocess_test.parse_args": [[24, 46], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test VCL on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "1800000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--iter_start'", ",", "dest", "=", "'iter_start'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "20000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'VCL_ResNet50_HICO'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--forever'", ",", "dest", "=", "'forever'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--fuse_type'", ",", "dest", "=", "'fuse_type'", ",", "default", "=", "'spv'", ")", "\n", "# parser.add_argument('--object_thres', dest='object_thres',", "\n", "#                     help='Object threshold',", "\n", "#                     default=0.8, type=float)", "\n", "# parser.add_argument('--human_thres', dest='human_thres',", "\n", "#                     help='Human threshold',", "\n", "#                     default=0.6, type=float)", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.scripts.postprocess_test.kill_child_processes": [[50, 60], ["psutil.Process.children", "psutil.Process", "os.system", "str"], "function", ["None"], ["def", "kill_child_processes", "(", "parent_pid", ",", "sig", "=", "signal", ".", "SIGTERM", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "parent", "=", "psutil", ".", "Process", "(", "parent_pid", ")", "\n", "", "except", "psutil", ".", "NoSuchProcess", ":", "\n", "        ", "return", "\n", "\n", "", "children", "=", "parent", ".", "children", "(", "recursive", "=", "True", ")", "\n", "# print('kill', children)", "\n", "for", "process", "in", "children", ":", "\n", "        ", "os", ".", "system", "(", "'kill -9 '", "+", "str", "(", "process", ".", "pid", ")", ")", "\n", "# process.send_signal(signal.SIGKILL)", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.scripts.eval.parse_args": [[10, 28], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test network'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "500000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'FCL_resnet101_union_l2_zs_s0_vloss2_varl_gan_dax_rands_aug5_xnew'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--fuse_type'", ",", "dest", "=", "'fuse_type'", ",", "default", "=", "'spv'", ")", "\n", "# parser.add_argument('--object_thres', dest='object_thres',", "\n", "#                     help='Object threshold',", "\n", "#                     default=0.1, type=float)", "\n", "# parser.add_argument('--human_thres', dest='human_thres',", "\n", "#                     help='Human threshold',", "\n", "#                     default=0.3, type=float)", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.scripts.extract_HO_feature.parse_args": [[27, 43], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test VCL on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "80000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'VCL_union_multi_base_rew_aug5_3_x5new'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--type'", ",", "dest", "=", "'type'", ",", "\n", "help", "=", "'Object threshold'", ",", "\n", "default", "=", "'train'", ",", "type", "=", "str", ")", "\n", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.scripts._init_paths.add_path": [[4, 7], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.scripts.extract_HO_feature_fake.parse_args": [[23, 44], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test an iCAN on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "80000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'iCAN_R_union_multi_base_rew_aug5_3_x5new'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--object_thres'", ",", "dest", "=", "'object_thres'", ",", "\n", "help", "=", "'Object threshold'", ",", "\n", "default", "=", "0.3", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--type'", ",", "dest", "=", "'type'", ",", "\n", "help", "=", "'Object threshold'", ",", "\n", "default", "=", "'train'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--human_thres'", ",", "dest", "=", "'human_thres'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "0.8", ",", "type", "=", "float", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.scripts.evaluate_fusion.parse_args": [[20, 34], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test network'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "500000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'FCL_resnet101_union_l2_zs_s0_vloss2_varl_gan_dax_rands_aug5_xnew'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--fuse_type'", ",", "dest", "=", "'fuse_type'", ",", "default", "=", "'spv'", ")", "\n", "parser", ".", "add_argument", "(", "'--type'", ",", "dest", "=", "'test_type'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "'vcl'", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.stat_vcoco_affordance.cal_prec": [[171, 195], ["range", "set", "len", "len", "print", "ipdb.set_trace", "len", "len", "len", "range", "range", "set", "len", "len", "set.intersection", "set", "len", "set.intersection", "set", "set", "set"], "function", ["None"], ["", "", "def", "cal_prec", "(", "idx", ",", "map_list", ",", "num_thres", ")", ":", "\n", "    ", "verb_stat", "=", "[", "0", "]", "*", "21", "\n", "for", "k", "in", "range", "(", "len", "(", "map_list", "[", "idx", "]", "[", "1", "]", ")", ")", ":", "\n", "        ", "verb_stat", "[", "hoi_verb", "[", "k", "]", "]", "+=", "map_list", "[", "idx", "]", "[", "1", "]", "[", "k", "]", "\n", "pass", "\n", "", "verb_probs", "=", "[", "verb_stat", "[", "k", "]", "/", "num_gt_verbs", "[", "k", "]", "for", "k", "in", "range", "(", "len", "(", "verb_stat", ")", ")", "]", "\n", "# print(verb_probs)", "\n", "gt_verbs", "=", "set", "(", "obj_verb", "[", "map_list", "[", "idx", "]", "[", "0", "]", "]", ")", "\n", "if", "len", "(", "gt_verbs", ")", "==", "0", ":", "\n", "        ", "print", "(", "gt_verbs", ")", "\n", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "", "verbs", "=", "[", "vcoco", "[", "kk", "]", "for", "kk", "in", "range", "(", "21", ")", "if", "verb_probs", "[", "kk", "]", ">", "0.5", "]", "\n", "# print(map_list[idx][0], gt_verbs)", "\n", "# if dataset == 'gtobj365':", "\n", "#     print(idx, gt_verbs, verbs)", "\n", "#     return 1, 1", "\n", "if", "len", "(", "set", "(", "verbs", ")", ")", "==", "0", ":", "\n", "        ", "prec", "=", "0", "\n", "", "else", ":", "\n", "        ", "prec", "=", "len", "(", "gt_verbs", ".", "intersection", "(", "set", "(", "verbs", ")", ")", ")", "/", "len", "(", "set", "(", "verbs", ")", ")", "\n", "", "recall", "=", "len", "(", "gt_verbs", ".", "intersection", "(", "set", "(", "verbs", ")", ")", ")", "/", "len", "(", "set", "(", "gt_verbs", ")", ")", "\n", "# print(prec, recall, gt_verbs, verbs)", "\n", "# print(gt_verbs, set(verbs))", "\n", "return", "prec", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.stat_vcoco_affordance.stat_prec_recall": [[196, 216], ["range", "len", "stat_vcoco_affordance.cal_prec", "prec_list.append", "recall_list.append", "len", "F1_list.append", "F1_list.append", "sum", "len", "sum", "len", "sum", "len"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.stat_hico_affordance.cal_prec"], ["", "def", "stat_prec_recall", "(", "num_thres", ")", ":", "\n", "    ", "prec_list", "=", "[", "]", "\n", "base_prec_list", "=", "[", "]", "\n", "recall_list", "=", "[", "]", "\n", "F1_list", "=", "[", "]", "\n", "base_recall_list", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "obj_verb_map_list", ")", ")", ":", "\n", "        ", "if", "len", "(", "obj_verb", "[", "obj_verb_map_list", "[", "idx", "]", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "prec", ",", "recall", "=", "cal_prec", "(", "idx", ",", "obj_verb_map_list", ",", "num_thres", ")", "\n", "# print(idx, '====', base_prec, base_recall, prec, recall)", "\n", "# base_prec_list.append(base_prec)", "\n", "if", "prec", "+", "recall", "==", "0", ":", "\n", "            ", "F1_list", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "F1_list", ".", "append", "(", "2", "*", "prec", "*", "recall", "/", "(", "prec", "+", "recall", ")", ")", "\n", "", "prec_list", ".", "append", "(", "prec", ")", "\n", "recall_list", ".", "append", "(", "recall", ")", "\n", "# base_recall_list.append(base_recall)", "\n", "", "return", "0", ",", "sum", "(", "prec_list", ")", "/", "len", "(", "prec_list", ")", ",", "0", ",", "sum", "(", "recall_list", ")", "/", "len", "(", "recall_list", ")", ",", "0", ",", "sum", "(", "F1_list", ")", "/", "len", "(", "F1_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.obtain_hoi_preds.parse_args": [[24, 46], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test an iCAN on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "160000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'ATL_union_multi_atl_ml5_l05_t5_def2_aug5_new_VCOCO_coco_CL_21'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--object_thres'", ",", "dest", "=", "'object_thres'", ",", "\n", "help", "=", "'Object threshold'", ",", "\n", "default", "=", "0.", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--human_thres'", ",", "dest", "=", "'human_thres'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "0.", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "dest", "=", "'dataset'", ",", "\n", "help", "=", "'dataset type: gthico'", ",", "\n", "default", "=", "'gthico'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--no-save'", ",", "action", "=", "'store_true'", ",", "dest", "=", "'no_save'", ")", "\n", "parser", ".", "add_argument", "(", "'--num'", ",", "dest", "=", "'num'", ",", "default", "=", "10000", ",", "\n", "type", "=", "int", ")", "# HOI-COCO has less than 10000 verb features.", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.obtain_hoi_preds.switch_checkpoint_path": [[47, 51], ["model_checkpoint_path.replace.replace", "model_checkpoint_path.replace.split"], "function", ["None"], ["", "def", "switch_checkpoint_path", "(", "model_checkpoint_path", ")", ":", "\n", "    ", "head", "=", "model_checkpoint_path", ".", "split", "(", "'Weights'", ")", "[", "0", "]", "\n", "model_checkpoint_path", "=", "model_checkpoint_path", ".", "replace", "(", "head", ",", "cfg", ".", "LOCAL_DATA", "+", "'/'", ")", "\n", "return", "model_checkpoint_path", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.extract_obj_feature.parse_args": [[22, 43], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test an iCAN on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "259638", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'ATL_union_multi_atl_ml5_l05_t5_def2_aug5_new_VCOCO_coco_CL_21'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--object_thres'", ",", "dest", "=", "'object_thres'", ",", "\n", "help", "=", "'Object threshold'", ",", "\n", "default", "=", "0.", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--human_thres'", ",", "dest", "=", "'human_thres'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "0.8", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--type'", ",", "dest", "=", "'test_type'", ",", "\n", "help", "=", "'Dataset type: gthico'", ",", "\n", "default", "=", "'gthico'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--num'", ",", "dest", "=", "'num'", ",", "\n", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.stat_hico_affordance.cal_prec": [[193, 217], ["np.matmul", "np.asarray", "verb_to_HO_matrix.transpose", "set", "set", "verbs.remove", "len", "len", "len", "len", "len", "range", "range", "set.intersection", "set", "set.intersection", "set", "len", "set", "set"], "function", ["None"], ["", "def", "cal_prec", "(", "idx", ",", "map_list", ",", "num_thres", ")", ":", "\n", "\n", "    ", "coco_objid", "=", "map_list", "[", "idx", "]", "[", "0", "]", "# 1-80", "\n", "verb_stat", "=", "[", "0", "]", "*", "117", "\n", "import", "numpy", "as", "np", "\n", "verb_stat", "=", "np", ".", "matmul", "(", "np", ".", "asarray", "(", "map_list", "[", "idx", "]", "[", "1", "]", ")", ",", "verb_to_HO_matrix", ".", "transpose", "(", ")", ")", "\n", "\n", "verb_probs", "=", "[", "verb_stat", "[", "k", "]", "/", "num_gt_verbs", "[", "k", "]", "for", "k", "in", "range", "(", "len", "(", "verb_stat", ")", ")", "]", "\n", "\n", "if", "dataset", "==", "'gtobj365'", ":", "\n", "# print(coco_objid)", "\n", "        ", "gt_verbs", "=", "set", "(", "obj_verb", "[", "coco_objid", "]", ")", "\n", "", "else", ":", "\n", "        ", "gt_verbs", "=", "set", "(", "obj_verb", "[", "coco_to_hico_obj", "[", "coco_objid", "]", "]", ")", "\n", "", "verbs", "=", "[", "id_vb", "[", "kk", "]", "for", "kk", "in", "range", "(", "117", ")", "if", "verb_probs", "[", "kk", "]", ">", "0.9", "]", "\n", "if", "'no_interaction'", "in", "verbs", ":", "\n", "        ", "verbs", ".", "remove", "(", "'no_interaction'", ")", "\n", "", "if", "len", "(", "verbs", ")", "==", "0", ":", "\n", "        ", "return", "0", ",", "0", "\n", "", "prec", "=", "len", "(", "gt_verbs", ".", "intersection", "(", "set", "(", "verbs", ")", ")", ")", "/", "len", "(", "set", "(", "verbs", ")", ")", "\n", "recall", "=", "len", "(", "gt_verbs", ".", "intersection", "(", "set", "(", "verbs", ")", ")", ")", "/", "len", "(", "set", "(", "gt_verbs", ")", ")", "\n", "# print(prec, recall, gt_verbs, verbs)", "\n", "\n", "return", "prec", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.stat_hico_affordance.stat_prec_recall": [[218, 254], ["range", "len", "model_name.__contains__", "stat_hico_affordance.cal_prec", "base_prec_list.append", "prec_list.append", "recall_list.append", "base_recall_list.append", "F1_list.append", "F1_list.append", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.stat_hico_affordance.cal_prec"], ["", "def", "stat_prec_recall", "(", "num_thres", ")", ":", "\n", "    ", "prec_list", "=", "[", "]", "\n", "base_prec_list", "=", "[", "]", "\n", "recall_list", "=", "[", "]", "\n", "F1_list", "=", "[", "]", "\n", "base_F1_list", "=", "[", "]", "\n", "base_recall_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "obj_verb_map_list", ")", ")", ":", "\n", "        ", "coco_objid", "=", "obj_verb_map_list", "[", "i", "]", "[", "0", "]", "\n", "if", "dataset", "==", "'gtobj365'", ":", "\n", "# print(coco_objid)", "\n", "            ", "if", "len", "(", "obj_verb", "[", "coco_objid", "]", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "", "else", ":", "\n", "            ", "if", "len", "(", "obj_verb", "[", "coco_to_hico_obj", "[", "coco_objid", "]", "]", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "", "base_prec", ",", "base_recall", "=", "1", ",", "1", "\n", "# import ipdb;ipdb.set_trace()", "\n", "# base_prec, base_recall = cal_prec(i, obj_verb_map_list_base, num_thres)", "\n", "if", "model_name", ".", "__contains__", "(", "'zs11'", ")", ":", "\n", "            ", "if", "obj_verb_map_list", "[", "i", "]", "[", "0", "]", "not", "in", "unseen_objs", ":", "\n", "                ", "continue", "\n", "", "", "prec", ",", "recall", "=", "cal_prec", "(", "i", ",", "obj_verb_map_list", ",", "num_thres", ")", "\n", "# import ipdb;", "\n", "# ipdb.set_trace()", "\n", "base_prec_list", ".", "append", "(", "base_prec", ")", "\n", "prec_list", ".", "append", "(", "prec", ")", "\n", "recall_list", ".", "append", "(", "recall", ")", "\n", "base_recall_list", ".", "append", "(", "base_recall", ")", "\n", "\n", "if", "prec", "+", "recall", "==", "0", ":", "\n", "            ", "F1_list", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "F1_list", ".", "append", "(", "2", "*", "prec", "*", "recall", "/", "(", "prec", "+", "recall", ")", ")", "\n", "", "", "return", "sum", "(", "base_prec_list", ")", "/", "len", "(", "base_prec_list", ")", ",", "sum", "(", "prec_list", ")", "/", "len", "(", "prec_list", ")", ",", "sum", "(", "base_recall_list", ")", "/", "len", "(", "base_recall_list", ")", ",", "sum", "(", "recall_list", ")", "/", "len", "(", "recall_list", ")", ",", "0", ",", "sum", "(", "F1_list", ")", "/", "len", "(", "F1_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.postprocess_wo_obj.parse_args": [[12, 29], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test an iCAN on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "1800000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--iter_start'", ",", "dest", "=", "'iter_start'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "20000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'iCAN_ResNet50_HICO'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--fuse_type'", ",", "dest", "=", "'fuse_type'", ",", "default", "=", "'spv'", ")", "\n", "parser", ".", "add_argument", "(", "'--type'", ",", "dest", "=", "'test_type'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "'vcl'", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.convert_feats_to_affor_bank_hico.parse_args": [[23, 35], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'convert feats to verb bank on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "160000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'model'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--num'", ",", "dest", "=", "'num'", ",", "default", "=", "100", ",", "\n", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance._init_paths.add_path": [[4, 7], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.postprocess.parse_args": [[12, 29], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test an iCAN on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "1800000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--iter_start'", ",", "dest", "=", "'iter_start'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "20000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'iCAN_ResNet50_HICO'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--fuse_type'", ",", "dest", "=", "'fuse_type'", ",", "default", "=", "'spv'", ")", "\n", "parser", ".", "add_argument", "(", "'--type'", ",", "dest", "=", "'test_type'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "'vcl'", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.extract_affordance_feature.parse_args": [[21, 41], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test an iCAN on HICO'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iteration'", ",", "dest", "=", "'iteration'", ",", "\n", "help", "=", "'Specify which weight to load'", ",", "\n", "default", "=", "160000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'Select model'", ",", "\n", "default", "=", "'ATL_union_multi_atl_ml5_l05_t5_def2_aug5_new_VCOCO_coco_CL_21'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--object_thres'", ",", "dest", "=", "'object_thres'", ",", "\n", "help", "=", "'Object threshold'", ",", "\n", "default", "=", "0.3", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--type'", ",", "dest", "=", "'type'", ",", "\n", "help", "=", "'Object threshold'", ",", "\n", "default", "=", "'train'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--human_thres'", ",", "dest", "=", "'human_thres'", ",", "\n", "help", "=", "'Human threshold'", ",", "\n", "default", "=", "0.8", ",", "type", "=", "float", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.affordance.extract_affordance_feature.save_img": [[43, 50], ["numpy.squeeze", "transform.resize", "print", "sio.imsave"], "function", ["None"], ["", "def", "save_img", "(", "img", ",", "target_size", ",", "name", ")", ":", "\n", "    ", "import", "skimage", ".", "io", "as", "sio", "\n", "import", "skimage", ".", "transform", "as", "transform", "\n", "img", "=", "np", ".", "squeeze", "(", "img", ",", "axis", "=", "-", "1", ")", "\n", "img", "=", "transform", ".", "resize", "(", "img", ",", "target_size", ",", "order", "=", "0", ")", "\n", "print", "(", "img", ".", "shape", ")", "\n", "sio", ".", "imsave", "(", "cfg", ".", "IMAGE_TEMP", "+", "'/'", "+", "name", "+", "'.jpg'", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args": [[25, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test VCL on VCOCO'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_dir'", ",", "dest", "=", "'img_dir'", ",", "\n", "help", "=", "'Please specify the img folder'", ",", "\n", "default", "=", "'demo/'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--Demo_RCNN'", ",", "dest", "=", "'Demo_RCNN'", ",", "\n", "help", "=", "'The object detection .pkl file'", ",", "\n", "default", "=", "'demo/Object_Detection.pkl'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--img_format'", ",", "dest", "=", "'img_format'", ",", "\n", "help", "=", "'The image format'", ",", "\n", "default", "=", "'png'", ",", "type", "=", "str", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.demo": [[71, 115], ["cv2.imread", "utils.timer.Timer", "utils.timer.Timer.tic", "model.test.im_detect", "utils.timer.Timer.toc", "enumerate", "im_file.split", "numpy.hstack().astype", "model.nms_wrapper.nms", "numpy.hstack", "inst_tmp.append", "inst_tmp.append", "inst_tmp.append", "inst_tmp.append", "tmp.append", "inst_tmp.append", "inst_tmp.append"], "function", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.tic", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.models.test_VCOCO.im_detect", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.ult.timer.Timer.toc"], ["def", "demo", "(", "sess", ",", "net", ",", "im_file", ",", "RCNN", ")", ":", "\n", "    ", "\"\"\"Detect object classes in an image using pre-computed object proposals.\"\"\"", "\n", "\n", "image_name", "=", "im_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "tmp", "=", "[", "]", "\n", "\n", "# Load the demo image", "\n", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "im", "=", "im", "[", ":", ",", ":", ",", "(", "2", ",", "1", ",", "0", ")", "]", "\n", "# Detect all object classes and regress object bounds", "\n", "timer", "=", "Timer", "(", ")", "\n", "timer", ".", "tic", "(", ")", "\n", "scores", ",", "boxes", "=", "im_detect", "(", "sess", ",", "net", ",", "im", ")", "\n", "timer", ".", "toc", "(", ")", "\n", "#print('Detection took {:.3f}s for {:d} object proposals'.format(timer.total_time, boxes.shape[0]))", "\n", "\n", "# Visualize detections for each class", "\n", "CONF_THRESH", "=", "0.3", "\n", "NMS_THRESH", "=", "0.3", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "CLASSES", "[", "1", ":", "]", ")", ":", "\n", "\n", "        ", "cls_ind", "+=", "1", "# because we skipped background", "\n", "cls_boxes", "=", "boxes", "[", ":", ",", "4", "*", "cls_ind", ":", "4", "*", "(", "cls_ind", "+", "1", ")", "]", "\n", "cls_scores", "=", "scores", "[", ":", ",", "cls_ind", "]", "\n", "dets", "=", "np", ".", "hstack", "(", "(", "cls_boxes", ",", "\n", "cls_scores", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "keep", "=", "nms", "(", "dets", ",", "NMS_THRESH", ")", "\n", "dets", "=", "dets", "[", "keep", ",", ":", "]", "\n", "\n", "for", "det_inst", "in", "dets", ":", "\n", "            ", "if", "det_inst", "[", "4", "]", ">", "CONF_THRESH", ":", "\n", "                ", "inst_tmp", "=", "[", "image_name", "]", "\n", "if", "cls_ind", "==", "1", ":", "\n", "                    ", "inst_tmp", ".", "append", "(", "'Human'", ")", "\n", "", "else", ":", "\n", "                    ", "inst_tmp", ".", "append", "(", "'Object'", ")", "\n", "", "inst_tmp", ".", "append", "(", "det_inst", "[", ":", "4", "]", ")", "\n", "inst_tmp", ".", "append", "(", "np", ".", "nan", ")", "\n", "inst_tmp", ".", "append", "(", "cls_ind", ")", "\n", "inst_tmp", ".", "append", "(", "det_inst", "[", "4", "]", ")", "\n", "tmp", ".", "append", "(", "inst_tmp", ")", "\n", "\n", "\n", "", "", "", "RCNN", "[", "image_name", "]", "=", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.Object_Detector.bb_IOU": [[116, 133], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "bb_IOU", "(", "boxA", ",", "boxB", ")", ":", "\n", "\n", "    ", "ixmin", "=", "np", ".", "maximum", "(", "boxA", "[", "0", "]", ",", "boxB", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "boxA", "[", "1", "]", ",", "boxB", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "boxA", "[", "2", "]", ",", "boxB", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "boxA", "[", "3", "]", ",", "boxB", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "(", "boxB", "[", "2", "]", "-", "boxB", "[", "0", "]", "+", "1.", ")", "*", "(", "boxB", "[", "3", "]", "-", "boxB", "[", "1", "]", "+", "1.", ")", "+", "\n", "(", "boxA", "[", "2", "]", "-", "boxA", "[", "0", "]", "+", "1.", ")", "*", "\n", "(", "boxA", "[", "3", "]", "-", "boxA", "[", "1", "]", "+", "1.", ")", "-", "inters", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1.__init__": [[51, 58], ["nets.network.Network.__init__", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnetv1._decide_blocks", "float"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1.__init__", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1._decide_blocks"], ["  ", "def", "__init__", "(", "self", ",", "num_layers", "=", "50", ")", ":", "\n", "    ", "Network", ".", "__init__", "(", "self", ")", "\n", "self", ".", "_feat_stride", "=", "[", "16", ",", "]", "\n", "self", ".", "_feat_compress", "=", "[", "1.", "/", "float", "(", "self", ".", "_feat_stride", "[", "0", "]", ")", ",", "]", "\n", "self", ".", "_num_layers", "=", "num_layers", "\n", "self", ".", "_scope", "=", "'resnet_v1_%d'", "%", "num_layers", "\n", "self", ".", "_decide_blocks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1._crop_pool_layer": [[59, 81], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.shape", "tensorflow.shape", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.slice", "tensorflow.slice", "numpy.float32", "numpy.float32", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.concat", "tensorflow.concat", "tensorflow.image.crop_and_resize", "tensorflow.image.crop_and_resize", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.image.crop_and_resize", "tensorflow.image.crop_and_resize", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32"], "methods", ["None"], ["", "def", "_crop_pool_layer", "(", "self", ",", "bottom", ",", "rois", ",", "name", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "      ", "batch_ids", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"batch_id\"", ")", ",", "[", "1", "]", ")", "\n", "# Get the normalized coordinates of bboxes", "\n", "bottom_shape", "=", "tf", ".", "shape", "(", "bottom", ")", "\n", "height", "=", "(", "tf", ".", "to_float", "(", "bottom_shape", "[", "1", "]", ")", "-", "1.", ")", "*", "np", ".", "float32", "(", "self", ".", "_feat_stride", "[", "0", "]", ")", "\n", "width", "=", "(", "tf", ".", "to_float", "(", "bottom_shape", "[", "2", "]", ")", "-", "1.", ")", "*", "np", ".", "float32", "(", "self", ".", "_feat_stride", "[", "0", "]", ")", "\n", "x1", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"x1\"", ")", "/", "width", "\n", "y1", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "2", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"y1\"", ")", "/", "height", "\n", "x2", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "3", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"x2\"", ")", "/", "width", "\n", "y2", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "4", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"y2\"", ")", "/", "height", "\n", "# Won't be back-propagated to rois anyway, but to save time", "\n", "bboxes", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "concat", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", "]", ",", "1", ")", ")", "\n", "if", "cfg", ".", "RESNET", ".", "MAX_POOL", ":", "\n", "        ", "pre_pool_size", "=", "cfg", ".", "POOLING_SIZE", "*", "2", "\n", "crops", "=", "tf", ".", "image", ".", "crop_and_resize", "(", "bottom", ",", "bboxes", ",", "tf", ".", "to_int32", "(", "batch_ids", ")", ",", "[", "pre_pool_size", ",", "pre_pool_size", "]", ",", "\n", "name", "=", "\"crops\"", ")", "\n", "crops", "=", "slim", ".", "max_pool2d", "(", "crops", ",", "[", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ")", "\n", "", "else", ":", "\n", "        ", "crops", "=", "tf", ".", "image", ".", "crop_and_resize", "(", "bottom", ",", "bboxes", ",", "tf", ".", "to_int32", "(", "batch_ids", ")", ",", "[", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", "]", ",", "\n", "name", "=", "\"crops\"", ")", "\n", "", "", "return", "crops", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1._build_base": [[84, 91], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.conv2d_same", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.conv2d_same", "tensorflow.pad", "tensorflow.pad", "tensorflow.max_pool2d", "tensorflow.max_pool2d"], "methods", ["None"], ["", "def", "_build_base", "(", "self", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "self", ".", "_scope", ",", "self", ".", "_scope", ")", ":", "\n", "      ", "net", "=", "resnet_utils", ".", "conv2d_same", "(", "self", ".", "_image", ",", "64", ",", "7", ",", "stride", "=", "2", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "tf", ".", "pad", "(", "net", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'pool1'", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1._image_to_head": [[92, 118], ["tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnetv1._act_summaries.append", "tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnetv1._build_base", "resnet_v1.resnet_arg_scope", "tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "resnet_v1.resnet_arg_scope", "resnet_v1.resnet_arg_scope"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1._build_base", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope", "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "_image_to_head", "(", "self", ",", "is_training", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "assert", "(", "0", "<=", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", "<=", "3", ")", "\n", "# Now the base is always fixed during training", "\n", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "False", ")", ")", ":", "\n", "      ", "net_conv", "=", "self", ".", "_build_base", "(", ")", "\n", "", "if", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", ">", "0", ":", "\n", "      ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "False", ")", ")", ":", "\n", "        ", "net_conv", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "net_conv", ",", "\n", "self", ".", "_blocks", "[", "0", ":", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "reuse", ",", "\n", "scope", "=", "self", ".", "_scope", ")", "\n", "", "", "if", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", "<", "3", ":", "\n", "      ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "        ", "net_conv", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "net_conv", ",", "\n", "self", ".", "_blocks", "[", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", ":", "-", "1", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "reuse", ",", "\n", "scope", "=", "self", ".", "_scope", ")", "\n", "\n", "", "", "self", ".", "_act_summaries", ".", "append", "(", "net_conv", ")", "\n", "self", ".", "_layers", "[", "'head'", "]", "=", "net_conv", "\n", "\n", "return", "net_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1._head_to_tail": [[119, 130], ["tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "resnet_v1.resnet_arg_scope"], "methods", ["home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope"], ["", "def", "_head_to_tail", "(", "self", ",", "pool5", ",", "is_training", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "      ", "fc7", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "pool5", ",", "\n", "self", ".", "_blocks", "[", "-", "1", ":", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "reuse", ",", "\n", "scope", "=", "self", ".", "_scope", ")", "\n", "# average pooling done by reduce_mean", "\n", "fc7", "=", "tf", ".", "reduce_mean", "(", "fc7", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "", "return", "fc7", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1._decide_blocks": [[131, 163], ["tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.Block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block", "resnet_v1_block"], "methods", ["None"], ["", "def", "_decide_blocks", "(", "self", ")", ":", "\n", "# choose different blocks for different number of layers", "\n", "    ", "if", "self", ".", "_num_layers", "==", "50", ":", "\n", "      ", "if", "tf", ".", "__version__", "==", "'1.1.0'", ":", "\n", "        ", "self", ".", "_blocks", "=", "[", "resnet_utils", ".", "Block", "(", "'block1'", ",", "resnet_v1", ".", "bottleneck", ",", "[", "(", "256", ",", "64", ",", "1", ")", "]", "*", "2", "+", "[", "(", "256", ",", "64", ",", "2", ")", "]", ")", ",", "\n", "resnet_utils", ".", "Block", "(", "'block2'", ",", "resnet_v1", ".", "bottleneck", ",", "[", "(", "512", ",", "128", ",", "1", ")", "]", "*", "3", "+", "[", "(", "512", ",", "128", ",", "2", ")", "]", ")", ",", "\n", "resnet_utils", ".", "Block", "(", "'block3'", ",", "resnet_v1", ".", "bottleneck", ",", "[", "(", "1024", ",", "256", ",", "1", ")", "]", "*", "5", "+", "[", "(", "1024", ",", "256", ",", "1", ")", "]", ")", ",", "\n", "resnet_utils", ".", "Block", "(", "'block4'", ",", "resnet_v1", ".", "bottleneck", ",", "[", "(", "2048", ",", "512", ",", "1", ")", "]", "*", "3", ")", "]", "\n", "", "else", ":", "\n", "        ", "from", "tensorflow", ".", "contrib", ".", "slim", ".", "python", ".", "slim", ".", "nets", ".", "resnet_v1", "import", "resnet_v1_block", "\n", "self", ".", "_blocks", "=", "[", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "64", ",", "num_units", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "128", ",", "num_units", "=", "4", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "256", ",", "num_units", "=", "6", ",", "stride", "=", "1", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", "]", "\n", "\n", "", "", "elif", "self", ".", "_num_layers", "==", "101", ":", "\n", "      ", "self", ".", "_blocks", "=", "[", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "64", ",", "num_units", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "128", ",", "num_units", "=", "4", ",", "stride", "=", "2", ")", ",", "\n", "# use stride 1 for the last conv4 layer", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "256", ",", "num_units", "=", "23", ",", "stride", "=", "1", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", "]", "\n", "\n", "", "elif", "self", ".", "_num_layers", "==", "152", ":", "\n", "      ", "self", ".", "_blocks", "=", "[", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "64", ",", "num_units", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "128", ",", "num_units", "=", "8", ",", "stride", "=", "2", ")", ",", "\n", "# use stride 1 for the last conv4 layer", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "256", ",", "num_units", "=", "36", ",", "stride", "=", "1", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", "]", "\n", "\n", "", "else", ":", "\n", "# other numbers are not supported", "\n", "      ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1.get_variables_to_restore": [[164, 177], ["print", "variables_to_restore.append", "v.name.split"], "methods", ["None"], ["", "", "def", "get_variables_to_restore", "(", "self", ",", "variables", ",", "var_keep_dic", ")", ":", "\n", "    ", "variables_to_restore", "=", "[", "]", "\n", "\n", "for", "v", "in", "variables", ":", "\n", "# exclude the first conv layer to swap RGB to BGR", "\n", "      ", "if", "v", ".", "name", "==", "(", "self", ".", "_scope", "+", "'/conv1/weights:0'", ")", ":", "\n", "        ", "self", ".", "_variables_to_fix", "[", "v", ".", "name", "]", "=", "v", "\n", "continue", "\n", "", "if", "v", ".", "name", ".", "split", "(", "':'", ")", "[", "0", "]", "in", "var_keep_dic", ":", "\n", "        ", "print", "(", "'Variables restored: %s'", "%", "v", ".", "name", ")", "\n", "variables_to_restore", ".", "append", "(", "v", ")", "\n", "\n", "", "", "return", "variables_to_restore", "\n", "\n"]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnetv1.fix_variables": [[178, 189], ["print", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.device", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.train.Saver", "tensorflow.train.Saver", "tensorflow.train.Saver.restore", "sess.run", "tensorflow.assign", "tensorflow.assign", "tensorflow.reverse", "tensorflow.reverse"], "methods", ["None"], ["", "def", "fix_variables", "(", "self", ",", "sess", ",", "pretrained_model", ")", ":", "\n", "    ", "print", "(", "'Fix Resnet V1 layers..'", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Fix_Resnet_V1'", ")", "as", "scope", ":", "\n", "      ", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "# fix RGB to BGR", "\n", "        ", "conv1_rgb", "=", "tf", ".", "get_variable", "(", "\"conv1_rgb\"", ",", "[", "7", ",", "7", ",", "3", ",", "64", "]", ",", "trainable", "=", "False", ")", "\n", "restorer_fc", "=", "tf", ".", "train", ".", "Saver", "(", "{", "self", ".", "_scope", "+", "\"/conv1/weights\"", ":", "conv1_rgb", "}", ")", "\n", "restorer_fc", ".", "restore", "(", "sess", ",", "pretrained_model", ")", "\n", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "_variables_to_fix", "[", "self", ".", "_scope", "+", "'/conv1/weights:0'", "]", ",", "\n", "tf", ".", "reverse", "(", "conv1_rgb", ",", "[", "2", "]", ")", ")", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.zhihou7_HOI-CL.misc.resnet_v1.resnet_arg_scope": [[26, 49], ["tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.arg_scope", "tensorflow.l2_regularizer", "tensorflow.variance_scaling_initializer"], "function", ["None"], ["def", "resnet_arg_scope", "(", "is_training", "=", "True", ",", "\n", "batch_norm_decay", "=", "0.997", ",", "\n", "batch_norm_epsilon", "=", "1e-5", ",", "\n", "batch_norm_scale", "=", "True", ")", ":", "\n", "  ", "batch_norm_params", "=", "{", "\n", "'is_training'", ":", "False", ",", "\n", "'decay'", ":", "batch_norm_decay", ",", "\n", "'epsilon'", ":", "batch_norm_epsilon", ",", "\n", "'scale'", ":", "batch_norm_scale", ",", "\n", "'trainable'", ":", "False", ",", "\n", "'updates_collections'", ":", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", "\n", "}", "\n", "\n", "with", "arg_scope", "(", "\n", "[", "slim", ".", "conv2d", "]", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", ",", "\n", "weights_initializer", "=", "slim", ".", "variance_scaling_initializer", "(", ")", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "normalizer_params", "=", "batch_norm_params", ")", ":", "\n", "    ", "with", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "**", "batch_norm_params", ")", "as", "arg_sc", ":", "\n", "      ", "return", "arg_sc", "\n", "\n"]]}