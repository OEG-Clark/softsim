{"home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.train_IGNN_chains.train": [[88, 120], ["time.time", "model.train", "optimizer.zero_grad", "model", "torch.log_softmax", "torch.nll_loss", "utils.accuracy", "F.nll_loss.backward", "utils.clip_gradient", "optimizer.step", "torch.nll_loss", "utils.accuracy", "torch.nll_loss", "utils.accuracy", "print", "model.eval", "model", "torch.log_softmax", "F.nll_loss.item", "utils.accuracy.item", "F.nll_loss.item", "utils.accuracy.item", "F.nll_loss.item", "utils.accuracy.item", "time.time"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.train_IGNN_PPI.train", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.accuracy", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.functions.ImplicitFunction.backward", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.clip_gradient", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.accuracy", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.accuracy"], ["def", "train", "(", "epoch", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "loss_train", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "acc_train", "=", "accuracy", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_train", ".", "backward", "(", ")", "\n", "clip_gradient", "(", "model", ",", "clip_norm", "=", "0.5", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "not", "args", ".", "fastmode", ":", "\n", "# Evaluate validation set performance separately,", "\n", "# deactivates dropout during validation run.", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "\n", "", "loss_val", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "acc_val", "=", "accuracy", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "loss_test", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "acc_test", "=", "accuracy", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "\n", "print", "(", "'Epoch: {:04d}'", ".", "format", "(", "epoch", "+", "1", ")", ",", "\n", "'loss_train: {:.4f}'", ".", "format", "(", "loss_train", ".", "item", "(", ")", ")", ",", "\n", "'acc_train: {:.4f}'", ".", "format", "(", "acc_train", ".", "item", "(", ")", ")", ",", "\n", "'loss_val: {:.4f}'", ".", "format", "(", "loss_val", ".", "item", "(", ")", ")", ",", "\n", "'acc_val: {:.4f}'", ".", "format", "(", "acc_val", ".", "item", "(", ")", ")", ",", "\n", "'loss_test: {:.4f}'", ".", "format", "(", "loss_test", ".", "item", "(", ")", ")", ",", "\n", "'acc_test: {:.4f}'", ".", "format", "(", "acc_test", ".", "item", "(", ")", ")", ",", "\n", "'time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.train_IGNN_chains.test": [[122, 131], ["model.eval", "model", "torch.nll_loss", "utils.accuracy", "print", "print", "F.nll_loss.item", "utils.accuracy.item"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.accuracy"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "loss_test", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "acc_test", "=", "accuracy", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "print", "(", "\"Dataset: \"", "+", "args", ".", "dataset", ")", "\n", "print", "(", "\"Test set results:\"", ",", "\n", "\"loss= {:.4f}\"", ".", "format", "(", "loss_test", ".", "item", "(", ")", ")", ",", "\n", "\"accuracy= {:.4f}\"", ".", "format", "(", "acc_test", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.train_IGNN_amazon.train": [[91, 122], ["time.time", "model.train", "optimizer.zero_grad", "model", "criterion", "utils.Evaluation", "criterion.backward", "optimizer.step", "criterion", "utils.Evaluation", "print", "model.eval", "model", "criterion.item", "criterion.item", "time.time"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.train_IGNN_PPI.train", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.Evaluation", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.functions.ImplicitFunction.backward", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.Evaluation"], ["def", "train", "(", "epoch", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "loss_train", "=", "criterion", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "f1_train_micro", ",", "f1_train_macro", "=", "Evaluation", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "not", "args", ".", "fastmode", ":", "\n", "# Evaluate validation set performance separately, deactivates dropout during validation run.", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "\n", "#loss_val = criterion(output[idx_val], labels[idx_val])", "\n", "#f1_val_micro, f1_val_macro = Evaluation(output[idx_test], labels[idx_test])", "\n", "", "loss_test", "=", "criterion", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "f1_test_micro", ",", "f1_test_macro", "=", "Evaluation", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "\n", "print", "(", "'Epoch: {:04d}'", ".", "format", "(", "epoch", "+", "1", ")", ",", "\n", "'loss_train: {:.4f}'", ".", "format", "(", "loss_train", ".", "item", "(", ")", ")", ",", "\n", "\"f1_train_micro= {:.4f}\"", ".", "format", "(", "f1_train_micro", ")", ",", "\n", "\"f1_train_macro= {:.4f}\"", ".", "format", "(", "f1_train_macro", ")", ",", "\n", "#'loss_val: {:.4f}'.format(loss_val.item()),", "\n", "#\"f1_val_micro= {:.4f}\".format(f1_val_micro),", "\n", "#\"f1_val_micro= {:.4f}\".format(f1_val_macro),", "\n", "'loss_test: {:.4f}'", ".", "format", "(", "loss_test", ".", "item", "(", ")", ")", ",", "\n", "\"f1_test_micro= {:.4f}\"", ".", "format", "(", "f1_test_micro", ")", ",", "\n", "\"f1_test_macro= {:.4f}\"", ".", "format", "(", "f1_test_macro", ")", ",", "\n", "'time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.train_IGNN_amazon.test": [[123, 133], ["model.eval", "model", "criterion", "utils.Evaluation", "print", "print", "criterion.item"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.Evaluation"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "loss_test", "=", "criterion", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "f1_test_micro", ",", "f1_test_macro", "=", "Evaluation", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "print", "(", "\"Dataset: \"", "+", "args", ".", "dataset", ")", "\n", "print", "(", "\"Test set results:\"", ",", "\n", "\"loss= {:.4f}\"", ".", "format", "(", "loss_test", ".", "item", "(", ")", ")", ",", "\n", "\"f1_test_micro= {:.4f}\"", ".", "format", "(", "f1_test_micro", ")", ",", "\n", "\"f1_test_macro= {:.4f}\"", ".", "format", "(", "f1_test_macro", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.models_chains.IGNN.__init__": [[11, 23], ["torch.Module.__init__", "layers.ImplicitGraph", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.SparseDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nclass", ",", "num_node", ",", "dropout", ",", "kappa", "=", "0.9", ",", "adj_orig", "=", "None", ")", ":", "\n", "        ", "super", "(", "IGNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "adj", "=", "None", "\n", "self", ".", "adj_rho", "=", "None", "\n", "self", ".", "adj_orig", "=", "adj_orig", "\n", "\n", "#one layer with V", "\n", "self", ".", "ig1", "=", "ImplicitGraph", "(", "nfeat", ",", "nhid", ",", "num_node", ",", "kappa", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "X_0", "=", "Parameter", "(", "torch", ".", "zeros", "(", "nhid", ",", "num_node", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "V", "=", "nn", ".", "Linear", "(", "nhid", ",", "nclass", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.models_chains.IGNN.forward": [[24, 35], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "models_chains.IGNN.V", "utils.get_spectral_rad", "models_chains.IGNN.ig1"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.get_spectral_rad"], ["", "def", "forward", "(", "self", ",", "features", ",", "adj", ")", ":", "\n", "        ", "if", "adj", "is", "not", "self", ".", "adj", ":", "\n", "            ", "self", ".", "adj", "=", "adj", "\n", "self", ".", "adj_rho", "=", "get_spectral_rad", "(", "adj", ")", "\n", "\n", "", "x", "=", "features", "\n", "x", "=", "self", ".", "ig1", "(", "self", ".", "X_0", ",", "adj", ",", "x", ",", "F", ".", "relu", ",", "self", ".", "adj_rho", ",", "A_orig", "=", "self", ".", "adj_orig", ")", ".", "T", "\n", "x", "=", "F", ".", "normalize", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "V", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.models_PPI.IGNN.__init__": [[11, 33], ["torch.Module.__init__", "layers.ImplicitGraph", "layers.ImplicitGraph", "layers.ImplicitGraph", "layers.ImplicitGraph", "layers.ImplicitGraph", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.SparseDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nclass", ",", "num_node", ",", "dropout", ",", "kappa", "=", "0.9", ",", "adj_orig", "=", "None", ")", ":", "\n", "        ", "super", "(", "IGNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "adj", "=", "None", "\n", "self", ".", "adj_rho", "=", "None", "\n", "self", ".", "adj_orig", "=", "adj_orig", "\n", "\n", "#five layers", "\n", "self", ".", "ig1", "=", "ImplicitGraph", "(", "nfeat", ",", "4", "*", "nhid", ",", "num_node", ",", "kappa", ")", "\n", "self", ".", "ig2", "=", "ImplicitGraph", "(", "4", "*", "nhid", ",", "2", "*", "nhid", ",", "num_node", ",", "kappa", ")", "\n", "self", ".", "ig3", "=", "ImplicitGraph", "(", "2", "*", "nhid", ",", "2", "*", "nhid", ",", "num_node", ",", "kappa", ")", "\n", "self", ".", "ig4", "=", "ImplicitGraph", "(", "2", "*", "nhid", ",", "nhid", ",", "num_node", ",", "kappa", ")", "\n", "self", ".", "ig5", "=", "ImplicitGraph", "(", "nhid", ",", "nclass", ",", "num_node", ",", "kappa", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "#self.X_0 = Parameter(torch.zeros(nhid, num_node))", "\n", "self", ".", "X_0", "=", "None", "\n", "#self.V = nn.Linear(nhid, nclass, bias=False)", "\n", "self", ".", "V", "=", "nn", ".", "Linear", "(", "nhid", ",", "nclass", ")", "\n", "self", ".", "V_0", "=", "nn", ".", "Linear", "(", "nfeat", ",", "4", "*", "nhid", ")", "\n", "self", ".", "V_1", "=", "nn", ".", "Linear", "(", "4", "*", "nhid", ",", "2", "*", "nhid", ")", "\n", "self", ".", "V_2", "=", "nn", ".", "Linear", "(", "2", "*", "nhid", ",", "2", "*", "nhid", ")", "\n", "self", ".", "V_3", "=", "nn", ".", "Linear", "(", "2", "*", "nhid", ",", "nhid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.models_PPI.IGNN.forward": [[34, 49], ["utils.get_spectral_rad", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "models_PPI.IGNN.V", "models_PPI.IGNN.ig5", "models_PPI.IGNN.V_0", "models_PPI.IGNN.V_1", "models_PPI.IGNN.V_2", "models_PPI.IGNN.V_3", "models_PPI.IGNN.ig1", "models_PPI.IGNN.ig2", "models_PPI.IGNN.ig3", "models_PPI.IGNN.ig4"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.get_spectral_rad"], ["", "def", "forward", "(", "self", ",", "features", ",", "adj", ")", ":", "\n", "        ", "if", "adj", "is", "not", "self", ".", "adj", ":", "\n", "            ", "self", ".", "adj", "=", "adj", "\n", "self", ".", "adj_rho", "=", "get_spectral_rad", "(", "adj", ")", "\n", "\n", "", "x", "=", "features", "\n", "\n", "#five layers", "\n", "x", "=", "F", ".", "elu", "(", "self", ".", "ig1", "(", "self", ".", "X_0", ",", "adj", ",", "x", ",", "F", ".", "relu", ",", "self", ".", "adj_rho", ",", "A_orig", "=", "self", ".", "adj_orig", ")", ".", "T", "+", "self", ".", "V_0", "(", "x", ".", "T", ")", ")", ".", "T", "\n", "x", "=", "F", ".", "elu", "(", "self", ".", "ig2", "(", "self", ".", "X_0", ",", "adj", ",", "x", ",", "F", ".", "relu", ",", "self", ".", "adj_rho", ",", "A_orig", "=", "self", ".", "adj_orig", ")", ".", "T", "+", "self", ".", "V_1", "(", "x", ".", "T", ")", ")", ".", "T", "\n", "x", "=", "F", ".", "elu", "(", "self", ".", "ig3", "(", "self", ".", "X_0", ",", "adj", ",", "x", ",", "F", ".", "relu", ",", "self", ".", "adj_rho", ",", "A_orig", "=", "self", ".", "adj_orig", ")", ".", "T", "+", "self", ".", "V_2", "(", "x", ".", "T", ")", ")", ".", "T", "\n", "x", "=", "F", ".", "elu", "(", "self", ".", "ig4", "(", "self", ".", "X_0", ",", "adj", ",", "x", ",", "F", ".", "relu", ",", "self", ".", "adj_rho", ",", "A_orig", "=", "self", ".", "adj_orig", ")", ".", "T", "+", "self", ".", "V_3", "(", "x", ".", "T", ")", ")", ".", "T", "\n", "x", "=", "self", ".", "ig5", "(", "self", ".", "X_0", ",", "adj", ",", "x", ",", "F", ".", "relu", ",", "self", ".", "adj_rho", ",", "A_orig", "=", "self", ".", "adj_orig", ")", ".", "T", "+", "self", ".", "V", "(", "x", ".", "T", ")", "\n", "#return F.log_softmax(x, dim=1)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.models_amazon.IGNN.__init__": [[11, 23], ["torch.Module.__init__", "layers.ImplicitGraph", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.SparseDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nclass", ",", "num_node", ",", "dropout", ",", "kappa", "=", "0.9", ",", "adj_orig", "=", "None", ")", ":", "\n", "        ", "super", "(", "IGNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "adj", "=", "None", "\n", "self", ".", "adj_rho", "=", "None", "\n", "self", ".", "adj_orig", "=", "adj_orig", "\n", "\n", "#one layer with V", "\n", "self", ".", "ig1", "=", "ImplicitGraph", "(", "nfeat", ",", "nhid", ",", "num_node", ",", "kappa", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "X_0", "=", "Parameter", "(", "torch", ".", "zeros", "(", "nhid", ",", "num_node", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "V", "=", "nn", ".", "Linear", "(", "nhid", ",", "nclass", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.models_amazon.IGNN.forward": [[24, 34], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "models_amazon.IGNN.V", "utils.get_spectral_rad", "models_amazon.IGNN.ig1"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.get_spectral_rad"], ["", "def", "forward", "(", "self", ",", "features", ",", "adj", ")", ":", "\n", "        ", "if", "adj", "is", "not", "self", ".", "adj", ":", "\n", "            ", "self", ".", "adj", "=", "adj", "\n", "self", ".", "adj_rho", "=", "get_spectral_rad", "(", "adj", ")", "\n", "\n", "", "x", "=", "features", "\n", "x", "=", "self", ".", "ig1", "(", "self", ".", "X_0", ",", "adj", ",", "x", ",", "F", ".", "relu", ",", "self", ".", "adj_rho", ",", "A_orig", "=", "self", ".", "adj_orig", ")", ".", "T", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "V", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.normalization.aug_normalized_adjacency": [[5, 14], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot().dot().tocoo", "sp.coo_matrix.sum", "scipy.eye", "numpy.power", "numpy.isinf", "sp.diags.dot().dot", "sp.diags.dot"], "function", ["None"], ["def", "aug_normalized_adjacency", "(", "adj", ",", "need_orig", "=", "False", ")", ":", "\n", "   ", "if", "not", "need_orig", ":", "\n", "       ", "adj", "=", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "row_sum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "row_sum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "d_mat_inv_sqrt", ".", "dot", "(", "adj", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.normalization.fetch_normalization": [[15, 21], ["switcher.get"], "function", ["None"], ["", "def", "fetch_normalization", "(", "type", ")", ":", "\n", "   ", "switcher", "=", "{", "\n", "'AugNormAdj'", ":", "aug_normalized_adjacency", ",", "# A' = (D + I)^-1/2 * ( A + I ) * (D + I)^-1/2", "\n", "}", "\n", "func", "=", "switcher", ".", "get", "(", "type", ",", "lambda", ":", "\"Invalid normalization technique.\"", ")", "\n", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.normalization.row_normalize": [[22, 30], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "row_normalize", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "", ""]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.layers.ImplicitGraph.__init__": [[20, 33], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "layers.ImplicitGraph.init", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.SparseDropout.__init__", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.layers.ImplicitGraph.init"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "num_node", ",", "kappa", "=", "0.99", ",", "b_direct", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImplicitGraph", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "in_features", "\n", "self", ".", "m", "=", "out_features", "\n", "self", ".", "n", "=", "num_node", "\n", "self", ".", "k", "=", "kappa", "# if set kappa=0, projection will be disabled at forward feeding.", "\n", "self", ".", "b_direct", "=", "b_direct", "\n", "\n", "self", ".", "W", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "m", ",", "self", ".", "m", ")", ")", "\n", "self", ".", "Omega_1", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "m", ",", "self", ".", "p", ")", ")", "\n", "self", ".", "Omega_2", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "m", ",", "self", ".", "p", ")", ")", "\n", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "m", ",", "1", ")", ")", "\n", "self", ".", "init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.layers.ImplicitGraph.init": [[34, 40], ["layers.ImplicitGraph.W.data.uniform_", "layers.ImplicitGraph.Omega_1.data.uniform_", "layers.ImplicitGraph.Omega_2.data.uniform_", "layers.ImplicitGraph.bias.data.uniform_", "math.sqrt", "layers.ImplicitGraph.W.size"], "methods", ["None"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "W", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "W", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "Omega_1", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "Omega_2", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.layers.ImplicitGraph.forward": [[41, 50], ["functions.ImplicitFunction.apply", "utils.projection_norm_inf", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.projection_norm_inf"], ["", "def", "forward", "(", "self", ",", "X_0", ",", "A", ",", "U", ",", "phi", ",", "A_rho", "=", "1.0", ",", "fw_mitr", "=", "300", ",", "bw_mitr", "=", "300", ",", "A_orig", "=", "None", ")", ":", "\n", "        ", "\"\"\"Allow one to use a different A matrix for convolution operation in equilibrium equ\"\"\"", "\n", "if", "self", ".", "k", "is", "not", "None", ":", "# when self.k = 0, A_rho is not required", "\n", "            ", "self", ".", "W", "=", "projection_norm_inf", "(", "self", ".", "W", ",", "kappa", "=", "self", ".", "k", "/", "A_rho", ")", "\n", "", "support_1", "=", "torch", ".", "spmm", "(", "torch", ".", "transpose", "(", "U", ",", "0", ",", "1", ")", ",", "self", ".", "Omega_1", ".", "T", ")", ".", "T", "\n", "support_1", "=", "torch", ".", "spmm", "(", "torch", ".", "transpose", "(", "A", ",", "0", ",", "1", ")", ",", "support_1", ".", "T", ")", ".", "T", "\n", "support_2", "=", "torch", ".", "spmm", "(", "torch", ".", "transpose", "(", "U", ",", "0", ",", "1", ")", ",", "self", ".", "Omega_2", ".", "T", ")", ".", "T", "\n", "b_Omega", "=", "support_1", "#+ support_2", "\n", "return", "ImplicitFunction", ".", "apply", "(", "self", ".", "W", ",", "X_0", ",", "A", "if", "A_orig", "is", "None", "else", "A_orig", ",", "b_Omega", ",", "phi", ",", "fw_mitr", ",", "bw_mitr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.functions.ImplicitFunction.forward": [[9, 17], ["functions.ImplicitFunction.inn_pred", "ctx.save_for_backward", "torch.tensor", "print"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.functions.ImplicitFunction.inn_pred"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "W", ",", "X_0", ",", "A", ",", "B", ",", "phi", ",", "fd_mitr", "=", "300", ",", "bw_mitr", "=", "300", ")", ":", "\n", "        ", "X_0", "=", "B", "if", "X_0", "is", "None", "else", "X_0", "\n", "X", ",", "err", ",", "status", ",", "D", "=", "ImplicitFunction", ".", "inn_pred", "(", "W", ",", "X_0", ",", "A", ",", "B", ",", "phi", ",", "mitr", "=", "fd_mitr", ",", "compute_dphi", "=", "True", ")", "\n", "ctx", ".", "save_for_backward", "(", "W", ",", "X", ",", "A", ",", "B", ",", "D", ",", "X_0", ",", "torch", ".", "tensor", "(", "bw_mitr", ")", ")", "\n", "if", "status", "not", "in", "\"converged\"", ":", "\n", "            ", "print", "(", "\"Iterations not converging!\"", ",", "err", ",", "status", ")", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.functions.ImplicitFunction.backward": [[18, 37], ["bw_mitr.cpu().numpy.cpu().numpy.cpu().numpy", "functions.ImplicitFunction.inn_pred", "torch.mul", "torch.spmm", "torch.zeros_like", "bw_mitr.cpu().numpy.cpu().numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.functions.ImplicitFunction.inn_pred"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "grad_outputs", ")", ":", "\n", "\n", "#import pydevd", "\n", "#pydevd.settrace(suspend=False, trace_only_current_thread=True)", "\n", "\n", "        ", "W", ",", "X", ",", "A", ",", "B", ",", "D", ",", "X_0", ",", "bw_mitr", "=", "ctx", ".", "saved_tensors", "\n", "bw_mitr", "=", "bw_mitr", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "grad_x", "=", "grad_outputs", "[", "0", "]", "\n", "\n", "dphi", "=", "lambda", "X", ":", "torch", ".", "mul", "(", "X", ",", "D", ")", "\n", "grad_z", ",", "err", ",", "status", ",", "_", "=", "ImplicitFunction", ".", "inn_pred", "(", "W", ".", "T", ",", "X_0", ",", "A", ",", "grad_x", ",", "dphi", ",", "mitr", "=", "bw_mitr", ",", "trasposed_A", "=", "True", ")", "\n", "#grad_z.clamp_(-1,1)", "\n", "\n", "grad_W", "=", "grad_z", "@", "torch", ".", "spmm", "(", "A", ",", "X", ".", "T", ")", "\n", "grad_B", "=", "grad_z", "\n", "\n", "# Might return gradient for A if needed", "\n", "return", "grad_W", ",", "None", ",", "torch", ".", "zeros_like", "(", "A", ")", ",", "grad_B", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.functions.ImplicitFunction.inn_pred": [[38, 67], ["range", "torch.transpose", "phi", "torch.norm", "torch.spmm", "torch.enable_grad", "Z.requires_grad_", "phi", "torch.spmm", "torch.autograd.grad", "torch.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "inn_pred", "(", "W", ",", "X", ",", "A", ",", "B", ",", "phi", ",", "mitr", "=", "300", ",", "tol", "=", "3e-6", ",", "trasposed_A", "=", "False", ",", "compute_dphi", "=", "False", ")", ":", "\n", "# TODO: randomized speed up", "\n", "        ", "At", "=", "A", "if", "trasposed_A", "else", "torch", ".", "transpose", "(", "A", ",", "0", ",", "1", ")", "\n", "#X = B if X is None else X", "\n", "\n", "err", "=", "0", "\n", "status", "=", "'max itrs reached'", "\n", "for", "i", "in", "range", "(", "mitr", ")", ":", "\n", "# WXA", "\n", "            ", "X_", "=", "W", "@", "X", "\n", "support", "=", "torch", ".", "spmm", "(", "At", ",", "X_", ".", "T", ")", ".", "T", "\n", "X_new", "=", "phi", "(", "support", "+", "B", ")", "\n", "err", "=", "torch", ".", "norm", "(", "X_new", "-", "X", ",", "np", ".", "inf", ")", "\n", "if", "err", "<", "tol", ":", "\n", "                ", "status", "=", "'converged'", "\n", "break", "\n", "", "X", "=", "X_new", "\n", "\n", "", "dphi", "=", "None", "\n", "if", "compute_dphi", ":", "\n", "            ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "support", "=", "torch", ".", "spmm", "(", "At", ",", "(", "W", "@", "X", ")", ".", "T", ")", ".", "T", "\n", "Z", "=", "support", "+", "B", "\n", "Z", ".", "requires_grad_", "(", "True", ")", "\n", "X_new", "=", "phi", "(", "Z", ")", "\n", "dphi", "=", "torch", ".", "autograd", ".", "grad", "(", "torch", ".", "sum", "(", "X_new", ")", ",", "Z", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "\n", "", "", "return", "X_new", ",", "err", ",", "status", ",", "dphi", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.AdditionalLayer.__init__": [[291, 299], ["torch.nn.ReLU", "super().__init__", "utils.AdditionalLayer.add_module", "isinstance", "torch.nn.Linear", "utils.AdditionalLayer.add_module"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.SparseDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "num_input", ",", "num_output", ",", "activation", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "add_module", "(", "\"model\"", ",", "self", ".", "model", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "if", "isinstance", "(", "activation", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\"activation\"", ",", "self", ".", "activation", ")", "\n", "", "self", ".", "func", "=", "torch", ".", "nn", ".", "Linear", "(", "num_input", ",", "num_output", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.AdditionalLayer.forward": [[300, 304], ["utils.AdditionalLayer.model", "utils.AdditionalLayer.activation", "utils.AdditionalLayer.func"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "*", "input", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "return", "self", ".", "func", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.SparseDropout.__init__": [[362, 367], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.SparseDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dprob", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "SparseDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# dprob is ratio of dropout", "\n", "# convert to keep probability", "\n", "self", ".", "kprob", "=", "1", "-", "dprob", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.SparseDropout.forward": [[368, 376], ["torch.sparse.FloatTensor", "x._indices", "torch.Size", "x._values", "torch.rand", "x._values().size", "x._values"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "training", ")", ":", "\n", "        ", "if", "training", ":", "\n", "            ", "mask", "=", "(", "(", "torch", ".", "rand", "(", "x", ".", "_values", "(", ")", ".", "size", "(", ")", ")", "+", "(", "self", ".", "kprob", ")", ")", ".", "floor", "(", ")", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", "rc", "=", "x", ".", "_indices", "(", ")", "[", ":", ",", "mask", "]", "\n", "val", "=", "x", ".", "_values", "(", ")", "[", "mask", "]", "*", "(", "1.0", "/", "self", ".", "kprob", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "rc", ",", "val", ",", "torch", ".", "Size", "(", "x", ".", "shape", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.parse_index_file": [[14, 20], ["open", "index.append", "int", "line.strip"], "function", ["None"], ["def", "parse_index_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Parse index file.\"\"\"", "\n", "index", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "        ", "index", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.preprocess_citation": [[21, 26], ["normalization.fetch_normalization", "normalization.fetch_normalization.", "normalization.row_normalize"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.normalization.fetch_normalization", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.normalization.row_normalize"], ["", "def", "preprocess_citation", "(", "adj", ",", "features", ",", "normalization", "=", "\"FirstOrderGCN\"", ")", ":", "\n", "    ", "adj_normalizer", "=", "fetch_normalization", "(", "normalization", ")", "\n", "adj", "=", "adj_normalizer", "(", "adj", ")", "\n", "features", "=", "row_normalize", "(", "features", ")", "\n", "return", "adj", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.load_citation": [[27, 95], ["range", "tuple", "utils.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "networkx.adjacency_matrix", "numpy.vstack", "np.sort.tolist", "range", "range", "utils.preprocess_citation", "torch.FloatTensor().float", "torch.LongTensor", "sparse_mx_to_torch_sparse_tensor().float", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "utils.load_citation_chain", "len", "range", "scipy.lil_matrix", "numpy.zeros", "networkx.from_dict_of_lists", "adj.cuda.multiply", "len", "len", "normalization.aug_normalized_adjacency", "sparse_mx_to_torch_sparse_tensor().float", "torch.max", "features.cuda.cuda", "adj.cuda.cuda", "labels.cuda.cuda", "idx_train.cuda.cuda", "idx_val.cuda.cuda", "idx_test.cuda.cuda", "open", "min", "scipy.vstack", "adj.cuda.T.multiply", "len", "adj_orig.cuda.cuda", "torch.FloatTensor", "utils.sparse_mx_to_torch_sparse_tensor", "objects.append", "objects.append", "max", "len", "len", "utils.sparse_mx_to_torch_sparse_tensor", "numpy.array", "dataset_str.lower", "pickle.load", "pickle.load", "features.cuda.todense", "min", "min"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.parse_index_file", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.preprocess_citation", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.load_citation_chain", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.normalization.aug_normalized_adjacency", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.sparse_mx_to_torch_sparse_tensor"], ["", "def", "load_citation", "(", "dataset_str", "=", "\"cora\"", ",", "normalization", "=", "\"AugNormAdj\"", ",", "cuda", "=", "True", ",", "need_orig", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Load Citation Networks Datasets.\n    \"\"\"", "\n", "if", "'chains'", "in", "dataset_str", ":", "\n", "        ", "return", "load_citation_chain", "(", "normalization", ",", "cuda", ",", "need_orig", "=", "need_orig", ")", "\n", "\n", "", "names", "=", "[", "'x'", ",", "'y'", ",", "'tx'", ",", "'ty'", ",", "'allx'", ",", "'ally'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "        ", "with", "open", "(", "\"data/ind.{}.{}\"", ".", "format", "(", "dataset_str", ".", "lower", "(", ")", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "", "x", ",", "y", ",", "tx", ",", "ty", ",", "allx", ",", "ally", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"data/ind.{}.test.index\"", ".", "format", "(", "dataset_str", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset_str", "==", "'citeseer'", ":", "\n", "# Fix citeseer dataset (there are some isolated nodes in the graph)", "\n", "# Find isolated nodes, add them as zero-vecs into the right position", "\n", "        ", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "tx_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "tx", "\n", "tx", "=", "tx_extended", "\n", "ty_extended", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "y", ".", "shape", "[", "1", "]", ")", ")", "\n", "ty_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "ty", "\n", "ty", "=", "ty_extended", "\n", "\n", "", "features", "=", "sp", ".", "vstack", "(", "(", "allx", ",", "tx", ")", ")", ".", "tolil", "(", ")", "\n", "features", "[", "test_idx_reorder", ",", ":", "]", "=", "features", "[", "test_idx_range", ",", ":", "]", "\n", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "labels", "=", "np", ".", "vstack", "(", "(", "ally", ",", "ty", ")", ")", "\n", "labels", "[", "test_idx_reorder", ",", ":", "]", "=", "labels", "[", "test_idx_range", ",", ":", "]", "\n", "\n", "idx_test", "=", "test_idx_range", ".", "tolist", "(", ")", "\n", "idx_train", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "idx_val", "=", "range", "(", "len", "(", "y", ")", ",", "len", "(", "y", ")", "+", "500", ")", "\n", "\n", "if", "need_orig", ":", "\n", "        ", "adj_orig", "=", "aug_normalized_adjacency", "(", "adj", ",", "need_orig", "=", "True", ")", "\n", "adj_orig", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj_orig", ")", ".", "float", "(", ")", "\n", "if", "cuda", ":", "\n", "            ", "adj_orig", "=", "adj_orig", ".", "cuda", "(", ")", "\n", "\n", "", "", "adj", ",", "features", "=", "preprocess_citation", "(", "adj", ",", "features", ",", "normalization", ")", "\n", "\n", "# porting to pytorch", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", ")", ")", ".", "float", "(", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "labels", "=", "torch", ".", "max", "(", "labels", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", ".", "float", "(", ")", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "if", "cuda", ":", "\n", "        ", "features", "=", "features", ".", "cuda", "(", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "idx_train", "=", "idx_train", ".", "cuda", "(", ")", "\n", "idx_val", "=", "idx_val", ".", "cuda", "(", ")", "\n", "idx_test", "=", "idx_test", ".", "cuda", "(", ")", "\n", "\n", "", "return", "[", "adj", ",", "adj_orig", "]", "if", "need_orig", "else", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.load_citation_chain": [[96, 151], ["numpy.random.RandomState", "scipy.coo_matrix", "scipy.block_diag", "np.random.RandomState.uniform", "numpy.eye().reshape", "features.cuda.reshape", "numpy.eye().reshape().repeat().repeat", "labels.cuda.reshape", "numpy.arange", "np.random.RandomState.shuffle", "utils.preprocess_citation", "torch.FloatTensor().float", "torch.LongTensor", "sparse_mx_to_torch_sparse_tensor().float", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "normalization.aug_normalized_adjacency", "sparse_mx_to_torch_sparse_tensor().float", "torch.max", "features.cuda.cuda", "adj.cuda.cuda", "labels.cuda.cuda", "idx_train.cuda.cuda", "idx_val.cuda.cuda", "idx_test.cuda.cuda", "numpy.ones", "numpy.eye", "numpy.eye().reshape().repeat", "adj_orig.cuda.cuda", "torch.FloatTensor", "utils.sparse_mx_to_torch_sparse_tensor", "numpy.arange", "numpy.arange", "range", "utils.sparse_mx_to_torch_sparse_tensor", "numpy.array", "numpy.eye().reshape", "scipy.issparse", "features.cuda.todense", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.preprocess_citation", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.normalization.aug_normalized_adjacency", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.sparse_mx_to_torch_sparse_tensor"], ["", "def", "load_citation_chain", "(", "normalization", ",", "cuda", ",", "need_orig", "=", "False", ")", ":", "\n", "    ", "\"\"\"load the synthetic dataset: chain\"\"\"", "\n", "r", "=", "np", ".", "random", ".", "RandomState", "(", "42", ")", "\n", "c", "=", "2", "# num of classes", "\n", "n", "=", "20", "# chains for each class", "\n", "l", "=", "10", "# length of chain", "\n", "f", "=", "100", "# feature dimension", "\n", "tn", "=", "20", "# train nodes", "\n", "vl", "=", "100", "# val nodes", "\n", "tt", "=", "200", "# test nodes", "\n", "noise", "=", "0.00", "\n", "\n", "chain_adj", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "l", "-", "1", ")", ",", "(", "np", ".", "arange", "(", "l", "-", "1", ")", ",", "np", ".", "arange", "(", "1", ",", "l", ")", ")", ")", ",", "shape", "=", "(", "l", ",", "l", ")", ")", "\n", "adj", "=", "sp", ".", "block_diag", "(", "[", "chain_adj", "for", "_", "in", "range", "(", "c", "*", "n", ")", "]", ")", "# square matrix N = c*n*l", "\n", "\n", "features", "=", "r", ".", "uniform", "(", "-", "noise", ",", "noise", ",", "size", "=", "(", "c", ",", "n", ",", "l", ",", "f", ")", ")", "\n", "#features = np.zeros_like(features)", "\n", "features", "[", ":", ",", ":", ",", "0", ",", ":", "c", "]", "+=", "np", ".", "eye", "(", "c", ")", ".", "reshape", "(", "c", ",", "1", ",", "c", ")", "# add class info to the first node of chains.", "\n", "features", "=", "features", ".", "reshape", "(", "-", "1", ",", "f", ")", "\n", "\n", "labels", "=", "np", ".", "eye", "(", "c", ")", ".", "reshape", "(", "c", ",", "1", ",", "1", ",", "c", ")", ".", "repeat", "(", "n", ",", "axis", "=", "1", ")", ".", "repeat", "(", "l", ",", "axis", "=", "2", ")", "# one-hot labels", "\n", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ",", "c", ")", "\n", "\n", "idx_random", "=", "np", ".", "arange", "(", "c", "*", "n", "*", "l", ")", "\n", "r", ".", "shuffle", "(", "idx_random", ")", "\n", "idx_train", "=", "idx_random", "[", ":", "tn", "]", "\n", "idx_val", "=", "idx_random", "[", "tn", ":", "tn", "+", "vl", "]", "\n", "idx_test", "=", "idx_random", "[", "tn", "+", "vl", ":", "tn", "+", "vl", "+", "tt", "]", "\n", "\n", "if", "need_orig", ":", "\n", "        ", "adj_orig", "=", "aug_normalized_adjacency", "(", "adj", ",", "need_orig", "=", "True", ")", "\n", "adj_orig", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj_orig", ")", ".", "float", "(", ")", "\n", "if", "cuda", ":", "\n", "            ", "adj_orig", "=", "adj_orig", ".", "cuda", "(", ")", "\n", "\n", "", "", "adj", ",", "features", "=", "preprocess_citation", "(", "adj", ",", "features", ",", "normalization", ")", "\n", "\n", "# porting to pytorch", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", "if", "sp", ".", "issparse", "(", "features", ")", "else", "features", ")", ")", ".", "float", "(", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "labels", "=", "torch", ".", "max", "(", "labels", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", ".", "float", "(", ")", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "if", "cuda", ":", "\n", "        ", "features", "=", "features", ".", "cuda", "(", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "idx_train", "=", "idx_train", ".", "cuda", "(", ")", "\n", "idx_val", "=", "idx_val", ".", "cuda", "(", ")", "\n", "idx_test", "=", "idx_test", ".", "cuda", "(", ")", "\n", "\n", "", "return", "[", "adj", ",", "adj_orig", "]", "if", "need_orig", "else", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.accuracy": [[153, 158], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "len", "[].type_as.eq", "output.max"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.Evaluation": [[159, 181], ["output.cpu().detach().numpy", "labels.cpu().detach().numpy.cpu().detach().numpy", "numpy.zeros().astype", "range", "print", "labels[].sum().astype", "list", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "output.cpu().detach", "labels.cpu().detach().numpy.cpu().detach", "numpy.zeros", "preds[].argsort", "labels[].sum", "labels[].nonzero", "output.cpu", "labels.cpu().detach().numpy.cpu"], "function", ["None"], ["", "def", "Evaluation", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "'''\n    binary_pred = preds\n    binary_pred[binary_pred > 0.0] = 1\n    binary_pred[binary_pred <= 0.0] = 0\n    '''", "\n", "num_correct", "=", "0", "\n", "binary_pred", "=", "np", ".", "zeros", "(", "preds", ".", "shape", ")", ".", "astype", "(", "'int'", ")", "\n", "for", "i", "in", "range", "(", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "k", "=", "labels", "[", "i", "]", ".", "sum", "(", ")", ".", "astype", "(", "'int'", ")", "\n", "topk_idx", "=", "preds", "[", "i", "]", ".", "argsort", "(", ")", "[", "-", "k", ":", "]", "\n", "binary_pred", "[", "i", "]", "[", "topk_idx", "]", "=", "1", "\n", "for", "pos", "in", "list", "(", "labels", "[", "i", "]", ".", "nonzero", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "if", "labels", "[", "i", "]", "[", "pos", "]", "and", "labels", "[", "i", "]", "[", "pos", "]", "==", "binary_pred", "[", "i", "]", "[", "pos", "]", ":", "\n", "                ", "num_correct", "+=", "1", "\n", "\n", "", "", "", "print", "(", "'total number of correct is: {}'", ".", "format", "(", "num_correct", ")", ")", "\n", "#print('preds max is: {0} and min is: {1}'.format(preds.max(),preds.min()))", "\n", "#'''", "\n", "return", "metrics", ".", "f1_score", "(", "labels", ",", "binary_pred", ",", "average", "=", "\"micro\"", ")", ",", "metrics", ".", "f1_score", "(", "labels", ",", "binary_pred", ",", "average", "=", "\"macro\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.sparse_mx_to_torch_sparse_tensor": [[184, 195], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "numpy.vstack().astype", "tensor.to.to", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ",", "device", "=", "None", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "tensor", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "if", "device", "is", "not", "None", ":", "\n", "        ", "tensor", "=", "tensor", ".", "to", "(", "device", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.get_spectral_rad": [[197, 202], ["sparse_tensor.data.coalesce().cpu", "scipy.coo_matrix", "numpy.abs", "sparse_tensor.data.coalesce", "numpy.abs", "sparse_tensor.data.coalesce().cpu.indices().numpy", "sparse_tensor.data.coalesce().cpu.values().numpy", "scipy.linalg.eigs", "sparse_tensor.data.coalesce().cpu.indices", "sparse_tensor.data.coalesce().cpu.values"], "function", ["None"], ["", "def", "get_spectral_rad", "(", "sparse_tensor", ",", "tol", "=", "1e-5", ")", ":", "\n", "    ", "\"\"\"Compute spectral radius from a tensor\"\"\"", "\n", "A", "=", "sparse_tensor", ".", "data", ".", "coalesce", "(", ")", ".", "cpu", "(", ")", "\n", "A_scipy", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "abs", "(", "A", ".", "values", "(", ")", ".", "numpy", "(", ")", ")", ",", "A", ".", "indices", "(", ")", ".", "numpy", "(", ")", ")", ",", "shape", "=", "A", ".", "shape", ")", "\n", "return", "np", ".", "abs", "(", "sp", ".", "linalg", ".", "eigs", "(", "A_scipy", ",", "k", "=", "1", ",", "return_eigenvectors", "=", "False", ")", "[", "0", "]", ")", "+", "tol", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.projection_norm_inf": [[203, 236], ["numpy.abs().sum", "A.data.copy_", "A.T.clone().detach().cpu().numpy", "A.clone().detach().cpu().numpy", "numpy.where", "numpy.sign", "numpy.abs", "numpy.sort", "float", "range", "numpy.isclose", "torch.tensor", "numpy.abs", "numpy.sum", "len", "len", "numpy.maximum", "numpy.abs().sum", "A.T.clone().detach().cpu", "A.clone().detach().cpu", "numpy.abs", "A.T.clone().detach", "A.clone().detach", "A.T.clone", "A.clone"], "function", ["None"], ["", "def", "projection_norm_inf", "(", "A", ",", "kappa", "=", "0.99", ",", "transpose", "=", "False", ")", ":", "\n", "    ", "\"\"\" project onto ||A||_inf <= kappa return updated A\"\"\"", "\n", "# TODO: speed up if needed", "\n", "v", "=", "kappa", "\n", "if", "transpose", ":", "\n", "        ", "A_np", "=", "A", ".", "T", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "A_np", "=", "A", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "x", "=", "np", ".", "abs", "(", "A_np", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "for", "idx", "in", "np", ".", "where", "(", "x", ">", "v", ")", "[", "0", "]", ":", "\n", "# read the vector", "\n", "        ", "a_orig", "=", "A_np", "[", "idx", ",", ":", "]", "\n", "a_sign", "=", "np", ".", "sign", "(", "a_orig", ")", "\n", "a_abs", "=", "np", ".", "abs", "(", "a_orig", ")", "\n", "a", "=", "np", ".", "sort", "(", "a_abs", ")", "\n", "\n", "s", "=", "np", ".", "sum", "(", "a", ")", "-", "v", "\n", "l", "=", "float", "(", "len", "(", "a", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", ":", "\n", "# proposal: alpha <= a[i]", "\n", "            ", "if", "s", "/", "l", ">", "a", "[", "i", "]", ":", "\n", "                ", "s", "-=", "a", "[", "i", "]", "\n", "l", "-=", "1", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "alpha", "=", "s", "/", "l", "\n", "a", "=", "a_sign", "*", "np", ".", "maximum", "(", "a_abs", "-", "alpha", ",", "0", ")", "\n", "# verify", "\n", "assert", "np", ".", "isclose", "(", "np", ".", "abs", "(", "a", ")", ".", "sum", "(", ")", ",", "v", ",", "atol", "=", "1e-4", ")", "\n", "# write back", "\n", "A_np", "[", "idx", ",", ":", "]", "=", "a", "\n", "", "A", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "A_np", ".", "T", "if", "transpose", "else", "A_np", ",", "dtype", "=", "A", ".", "dtype", ",", "device", "=", "A", ".", "device", ")", ")", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.projection_norm_inf_and_1": [[237, 251], ["A.clone().detach().cpu().numpy", "A.data.copy_", "utils.projection_inf_np", "utils.projection_inf_np", "torch.tensor", "A.clone().detach().cpu", "utils.projection_inf_np", "utils.projection_inf_np", "A.clone().detach", "A.clone"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.projection_inf_np", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.projection_inf_np", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.projection_inf_np", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.projection_inf_np"], ["", "def", "projection_norm_inf_and_1", "(", "A", ",", "kappa_inf", "=", "0.99", ",", "kappa_1", "=", "None", ",", "inf_first", "=", "True", ")", ":", "\n", "    ", "\"\"\" project onto ||A||_inf <= kappa return updated A\"\"\"", "\n", "# TODO: speed up if needed", "\n", "v_inf", "=", "kappa_inf", "\n", "v_1", "=", "kappa_inf", "if", "kappa_1", "is", "None", "else", "kappa_1", "\n", "A_np", "=", "A", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "inf_first", ":", "\n", "        ", "A_np", "=", "projection_inf_np", "(", "A_np", ",", "v_inf", ")", "\n", "A_np", "=", "projection_inf_np", "(", "A_np", ".", "T", ",", "v_1", ")", ".", "T", "\n", "", "else", ":", "\n", "        ", "A_np", "=", "projection_inf_np", "(", "A_np", ".", "T", ",", "v_1", ")", ".", "T", "\n", "A_np", "=", "projection_inf_np", "(", "A_np", ",", "v_inf", ")", "\n", "", "A", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "A_np", ",", "dtype", "=", "A", ".", "dtype", ",", "device", "=", "A", ".", "device", ")", ")", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.projection_inf_np": [[252, 277], ["numpy.abs().sum", "numpy.where", "numpy.sign", "numpy.abs", "numpy.sort", "float", "range", "numpy.isclose", "numpy.abs", "numpy.sum", "len", "len", "numpy.maximum", "numpy.abs().sum", "numpy.abs"], "function", ["None"], ["", "def", "projection_inf_np", "(", "A_np", ",", "v", ")", ":", "\n", "    ", "x", "=", "np", ".", "abs", "(", "A_np", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "for", "idx", "in", "np", ".", "where", "(", "x", ">", "v", ")", "[", "0", "]", ":", "\n", "# read the vector", "\n", "        ", "a_orig", "=", "A_np", "[", "idx", ",", ":", "]", "\n", "a_sign", "=", "np", ".", "sign", "(", "a_orig", ")", "\n", "a_abs", "=", "np", ".", "abs", "(", "a_orig", ")", "\n", "a", "=", "np", ".", "sort", "(", "a_abs", ")", "\n", "\n", "s", "=", "np", ".", "sum", "(", "a", ")", "-", "v", "\n", "l", "=", "float", "(", "len", "(", "a", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", ":", "\n", "# proposal: alpha <= a[i]", "\n", "            ", "if", "s", "/", "l", ">", "a", "[", "i", "]", ":", "\n", "                ", "s", "-=", "a", "[", "i", "]", "\n", "l", "-=", "1", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "alpha", "=", "s", "/", "l", "\n", "a", "=", "a_sign", "*", "np", ".", "maximum", "(", "a_abs", "-", "alpha", ",", "0", ")", "\n", "# verify", "\n", "assert", "np", ".", "isclose", "(", "np", ".", "abs", "(", "a", ")", ".", "sum", "(", ")", ",", "v", ",", "atol", "=", "1e-6", ")", "\n", "# write back", "\n", "A_np", "[", "idx", ",", ":", "]", "=", "a", "\n", "", "return", "A_np", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.clip_gradient": [[278, 283], ["model.parameters", "torch.nn.utils.clip_grad_norm"], "function", ["None"], ["", "def", "clip_gradient", "(", "model", ",", "clip_norm", "=", "10", ")", ":", "\n", "    ", "\"\"\" clip gradients of each parameter by norm \"\"\"", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm", "(", "param", ",", "clip_norm", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.l_1_penalty": [[284, 289], ["model.parameters", "torch.sum", "torch.abs"], "function", ["None"], ["", "def", "l_1_penalty", "(", "model", ",", "alpha", "=", "0.1", ")", ":", "\n", "    ", "regularization_loss", "=", "0", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "regularization_loss", "+=", "alpha", "*", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "param", ")", ")", "\n", "", "return", "regularization_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.load_raw_graph": [[305, 323], ["networkx.adjacency_matrix", "normalization.fetch_normalization", "normalization.fetch_normalization.", "sparse_mx_to_torch_sparse_tensor().float", "open", "networkx.from_dict_of_lists", "row.strip().split.strip().split", "range", "utils.sparse_mx_to_torch_sparse_tensor", "len", "adjs.append", "row.strip().split.strip", "int"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.normalization.fetch_normalization", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.sparse_mx_to_torch_sparse_tensor"], ["", "", "def", "load_raw_graph", "(", "dataset_str", "=", "\"amazon-all\"", ")", ":", "\n", "    ", "txt_file", "=", "'data/'", "+", "dataset_str", "+", "'/adj_list.txt'", "\n", "graph", "=", "{", "}", "\n", "with", "open", "(", "txt_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "cur_idx", "=", "0", "\n", "for", "row", "in", "f", ":", "\n", "            ", "row", "=", "row", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "adjs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "len", "(", "row", ")", ")", ":", "\n", "                ", "adjs", ".", "append", "(", "int", "(", "row", "[", "j", "]", ")", ")", "\n", "", "graph", "[", "cur_idx", "]", "=", "adjs", "\n", "cur_idx", "+=", "1", "\n", "", "", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "normalization", "=", "\"AugNormAdj\"", "\n", "adj_normalizer", "=", "fetch_normalization", "(", "normalization", ")", "\n", "adj", "=", "adj_normalizer", "(", "adj", ")", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", ".", "float", "(", ")", "\n", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.load_txt_data": [[324, 344], ["utils.load_raw_graph", "list", "list", "list", "numpy.loadtxt", "scipy.identity", "sparse_mx_to_torch_sparse_tensor().float", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt", "open", "int", "utils.sparse_mx_to_torch_sparse_tensor", "f.readline().strip().split", "str", "f.readline().strip", "f.readline"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.load_raw_graph", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.sparse_mx_to_torch_sparse_tensor"], ["", "def", "load_txt_data", "(", "dataset_str", "=", "\"amazon-all\"", ",", "portion", "=", "'0.06'", ")", ":", "\n", "    ", "adj", "=", "load_raw_graph", "(", "dataset_str", ")", "\n", "idx_train", "=", "list", "(", "np", ".", "loadtxt", "(", "'data/'", "+", "dataset_str", "+", "'/train_idx-'", "+", "str", "(", "portion", ")", "+", "'.txt'", ",", "dtype", "=", "int", ")", ")", "\n", "idx_val", "=", "list", "(", "np", ".", "loadtxt", "(", "'data/'", "+", "dataset_str", "+", "'/test_idx.txt'", ",", "dtype", "=", "int", ")", ")", "\n", "idx_test", "=", "list", "(", "np", ".", "loadtxt", "(", "'data/'", "+", "dataset_str", "+", "'/test_idx.txt'", ",", "dtype", "=", "int", ")", ")", "\n", "labels", "=", "np", ".", "loadtxt", "(", "'data/'", "+", "dataset_str", "+", "'/label.txt'", ")", "\n", "with", "open", "(", "'data/'", "+", "dataset_str", "+", "'/meta.txt'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "num_nodes", ",", "num_class", "=", "[", "int", "(", "w", ")", "for", "w", "in", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "\n", "", "features", "=", "sp", ".", "identity", "(", "num_nodes", ")", "\n", "\n", "# porting to pytorch", "\n", "features", "=", "sparse_mx_to_torch_sparse_tensor", "(", "features", ")", ".", "float", "(", ")", "\n", "labels", "=", "torch", ".", "FloatTensor", "(", "labels", ")", "\n", "#labels = torch.max(labels, dim=1)[1]", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "return", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", ",", "num_nodes", ",", "num_class", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.utils.sgc_precompute": [[345, 360], ["time.perf_counter", "adj.coalesce().indices", "adj.coalesce().values", "features.coalesce().indices", "features.coalesce().values", "range", "torch_sparse.spspmm", "time.perf_counter", "torch.sparse.FloatTensor", "adj.coalesce", "adj.coalesce", "features.coalesce", "features.coalesce", "torch.Size"], "function", ["None"], ["", "def", "sgc_precompute", "(", "features", ",", "adj", ",", "degree", ")", ":", "\n", "    ", "t", "=", "perf_counter", "(", ")", "\n", "adj_index", "=", "adj", ".", "coalesce", "(", ")", ".", "indices", "(", ")", "\n", "adj_value", "=", "adj", ".", "coalesce", "(", ")", ".", "values", "(", ")", "\n", "features_index", "=", "features", ".", "coalesce", "(", ")", ".", "indices", "(", ")", "\n", "features_value", "=", "features", ".", "coalesce", "(", ")", ".", "values", "(", ")", "\n", "m", "=", "adj", ".", "shape", "[", "0", "]", "\n", "n", "=", "adj", ".", "shape", "[", "1", "]", "\n", "k", "=", "features", ".", "shape", "[", "1", "]", "\n", "\n", "for", "i", "in", "range", "(", "degree", ")", ":", "\n", "#features = torch.spmm(adj, features)", "\n", "        ", "features_index", ",", "features_value", "=", "torch_sparse", ".", "spspmm", "(", "adj_index", ",", "adj_value", ",", "features_index", ",", "features_value", ",", "m", ",", "n", ",", "k", ")", "\n", "", "precompute_time", "=", "perf_counter", "(", ")", "-", "t", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "features_index", ",", "features_value", ",", "torch", ".", "Size", "(", "features", ".", "shape", ")", ")", ",", "precompute_time", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.train_IGNN_PPI.train": [[86, 103], ["model.train", "data.to.to", "optimizer.zero_grad", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "loss_op", "loss_op.backward", "optimizer.step", "len", "torch.ones", "torch.ones", "torch.ones", "torch.Size", "torch.Size", "torch.Size", "model", "loss_op.item", "data.to.edge_index.size"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.train_IGNN_PPI.train", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.functions.ImplicitFunction.backward"], ["def", "train", "(", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "total_loss", "=", "0", "\n", "for", "data", "in", "train_loader", ":", "\n", "        ", "num_graphs", "=", "data", ".", "num_graphs", "\n", "data", ".", "batch", "=", "None", "\n", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "data", ".", "edge_attr", "is", "None", ":", "\n", "            ", "edge_weight", "=", "torch", ".", "ones", "(", "(", "data", ".", "edge_index", ".", "size", "(", "1", ")", ",", ")", ",", "dtype", "=", "data", ".", "x", ".", "dtype", ",", "device", "=", "data", ".", "edge_index", ".", "device", ")", "\n", "", "adj", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "data", ".", "edge_index", ",", "edge_weight", ",", "torch", ".", "Size", "(", "[", "data", ".", "num_nodes", ",", "data", ".", "num_nodes", "]", ")", ")", "\n", "loss", "=", "loss_op", "(", "model", "(", "data", ".", "x", ".", "T", ",", "adj", ")", ",", "data", ".", "y", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "num_graphs", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "return", "total_loss", "/", "len", "(", "train_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.nodeclassification.train_IGNN_PPI.test": [[105, 120], ["model.eval", "ys.append", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "preds.append", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "sklearn.metrics.f1_score", "torch.ones", "torch.ones", "torch.ones", "torch.Size", "torch.Size", "torch.Size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "pred.sum", "data.x.T.to", "torch.sparse.FloatTensor.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "data.edge_index.size"], "function", ["None"], ["", "def", "test", "(", "loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "ys", ",", "preds", "=", "[", "]", ",", "[", "]", "\n", "for", "data", "in", "loader", ":", "\n", "        ", "ys", ".", "append", "(", "data", ".", "y", ")", "\n", "if", "data", ".", "edge_attr", "is", "None", ":", "\n", "            ", "edge_weight", "=", "torch", ".", "ones", "(", "(", "data", ".", "edge_index", ".", "size", "(", "1", ")", ",", ")", ",", "dtype", "=", "data", ".", "x", ".", "dtype", ",", "device", "=", "data", ".", "edge_index", ".", "device", ")", "\n", "", "adj", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "data", ".", "edge_index", ",", "edge_weight", ",", "torch", ".", "Size", "(", "[", "data", ".", "num_nodes", ",", "data", ".", "num_nodes", "]", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "out", "=", "model", "(", "data", ".", "x", ".", "T", ".", "to", "(", "device", ")", ",", "adj", ".", "to", "(", "device", ")", ")", "\n", "", "preds", ".", "append", "(", "(", "out", ">", "0", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "", "y", ",", "pred", "=", "torch", ".", "cat", "(", "ys", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", ",", "torch", ".", "cat", "(", "preds", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "return", "f1_score", "(", "y", ",", "pred", ",", "average", "=", "'micro'", ")", "if", "pred", ".", "sum", "(", ")", ">", "0", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.models.IGNN.__init__": [[12, 27], ["torch.Module.__init__", "layers.ImplicitGraph", "layers.ImplicitGraph", "layers.ImplicitGraph", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.SparseDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nclass", ",", "num_node", ",", "dropout", ",", "kappa", "=", "0.9", ",", "adj_orig", "=", "None", ")", ":", "\n", "        ", "super", "(", "IGNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "adj", "=", "None", "\n", "self", ".", "adj_rho", "=", "None", "\n", "self", ".", "adj_orig", "=", "adj_orig", "\n", "\n", "#three layers and two MLP", "\n", "self", ".", "ig1", "=", "ImplicitGraph", "(", "nfeat", ",", "nhid", ",", "num_node", ",", "kappa", ")", "\n", "self", ".", "ig2", "=", "ImplicitGraph", "(", "nhid", ",", "nhid", ",", "num_node", ",", "kappa", ")", "\n", "self", ".", "ig3", "=", "ImplicitGraph", "(", "nhid", ",", "nhid", ",", "num_node", ",", "kappa", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "X_0", "=", "None", "\n", "self", ".", "V_0", "=", "nn", ".", "Linear", "(", "nhid", ",", "nhid", ")", "\n", "self", ".", "V_1", "=", "nn", ".", "Linear", "(", "nhid", ",", "nclass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.models.IGNN.forward": [[28, 47], ["models.IGNN.ig1", "models.IGNN.ig2", "torch_geometric.nn.global_add_pool", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "models.IGNN.V_1", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "models.IGNN.ig3", "models.IGNN.V_0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "adj", ",", "batch", ")", ":", "\n", "        ", "'''\n        if adj is not self.adj:\n            self.adj = adj\n            self.adj_rho = get_spectral_rad(adj)\n        '''", "\n", "self", ".", "adj_rho", "=", "1", "\n", "\n", "x", "=", "features", "\n", "\n", "#three layers and two MLP", "\n", "x", "=", "self", ".", "ig1", "(", "self", ".", "X_0", ",", "adj", ",", "x", ",", "F", ".", "relu", ",", "self", ".", "adj_rho", ",", "A_orig", "=", "self", ".", "adj_orig", ")", "\n", "x", "=", "self", ".", "ig2", "(", "self", ".", "X_0", ",", "adj", ",", "x", ",", "F", ".", "relu", ",", "self", ".", "adj_rho", ",", "A_orig", "=", "self", ".", "adj_orig", ")", "\n", "x", "=", "self", ".", "ig3", "(", "self", ".", "X_0", ",", "adj", ",", "x", ",", "F", ".", "relu", ",", "self", ".", "adj_rho", ",", "A_orig", "=", "self", ".", "adj_orig", ")", ".", "T", "\n", "x", "=", "global_add_pool", "(", "x", ",", "batch", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "V_0", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "V_1", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.normalization.aug_normalized_adjacency": [[5, 14], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot().dot().tocoo", "sp.coo_matrix.sum", "scipy.eye", "numpy.power", "numpy.isinf", "sp.diags.dot().dot", "sp.diags.dot"], "function", ["None"], ["def", "aug_normalized_adjacency", "(", "adj", ",", "need_orig", "=", "False", ")", ":", "\n", "   ", "if", "not", "need_orig", ":", "\n", "       ", "adj", "=", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "row_sum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "row_sum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "d_mat_inv_sqrt", ".", "dot", "(", "adj", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.normalization.fetch_normalization": [[15, 21], ["switcher.get"], "function", ["None"], ["", "def", "fetch_normalization", "(", "type", ")", ":", "\n", "   ", "switcher", "=", "{", "\n", "'AugNormAdj'", ":", "aug_normalized_adjacency", ",", "# A' = (D + I)^-1/2 * ( A + I ) * (D + I)^-1/2", "\n", "}", "\n", "func", "=", "switcher", ".", "get", "(", "type", ",", "lambda", ":", "\"Invalid normalization technique.\"", ")", "\n", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.normalization.row_normalize": [[22, 30], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "row_normalize", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "", ""]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.layers.ImplicitGraph.__init__": [[20, 33], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "layers.ImplicitGraph.init", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.SparseDropout.__init__", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.layers.ImplicitGraph.init"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "num_node", ",", "kappa", "=", "0.99", ",", "b_direct", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImplicitGraph", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "in_features", "\n", "self", ".", "m", "=", "out_features", "\n", "self", ".", "n", "=", "num_node", "\n", "self", ".", "k", "=", "kappa", "# if set kappa=0, projection will be disabled at forward feeding.", "\n", "self", ".", "b_direct", "=", "b_direct", "\n", "\n", "self", ".", "W", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "m", ",", "self", ".", "m", ")", ")", "\n", "self", ".", "Omega_1", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "m", ",", "self", ".", "p", ")", ")", "\n", "self", ".", "Omega_2", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "m", ",", "self", ".", "p", ")", ")", "\n", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "m", ",", "1", ")", ")", "\n", "self", ".", "init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.layers.ImplicitGraph.init": [[34, 40], ["layers.ImplicitGraph.W.data.uniform_", "layers.ImplicitGraph.Omega_1.data.uniform_", "layers.ImplicitGraph.Omega_2.data.uniform_", "layers.ImplicitGraph.bias.data.uniform_", "math.sqrt", "layers.ImplicitGraph.W.size"], "methods", ["None"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "W", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "W", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "Omega_1", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "Omega_2", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.layers.ImplicitGraph.forward": [[41, 50], ["functions.ImplicitFunction.apply", "utils.projection_norm_inf", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.projection_norm_inf"], ["", "def", "forward", "(", "self", ",", "X_0", ",", "A", ",", "U", ",", "phi", ",", "A_rho", "=", "1.0", ",", "fw_mitr", "=", "300", ",", "bw_mitr", "=", "300", ",", "A_orig", "=", "None", ")", ":", "\n", "        ", "\"\"\"Allow one to use a different A matrix for convolution operation in equilibrium equ\"\"\"", "\n", "if", "self", ".", "k", "is", "not", "None", ":", "# when self.k = 0, A_rho is not required", "\n", "            ", "self", ".", "W", "=", "projection_norm_inf", "(", "self", ".", "W", ",", "kappa", "=", "self", ".", "k", "/", "A_rho", ")", "\n", "", "support_1", "=", "torch", ".", "spmm", "(", "torch", ".", "transpose", "(", "U", ",", "0", ",", "1", ")", ",", "self", ".", "Omega_1", ".", "T", ")", ".", "T", "\n", "support_1", "=", "torch", ".", "spmm", "(", "torch", ".", "transpose", "(", "A", ",", "0", ",", "1", ")", ",", "support_1", ".", "T", ")", ".", "T", "\n", "support_2", "=", "torch", ".", "spmm", "(", "torch", ".", "transpose", "(", "U", ",", "0", ",", "1", ")", ",", "self", ".", "Omega_2", ".", "T", ")", ".", "T", "\n", "b_Omega", "=", "support_1", "#+ support_2", "\n", "return", "ImplicitFunction", ".", "apply", "(", "self", ".", "W", ",", "X_0", ",", "A", "if", "A_orig", "is", "None", "else", "A_orig", ",", "b_Omega", ",", "phi", ",", "fw_mitr", ",", "bw_mitr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.functions.ImplicitFunction.forward": [[11, 19], ["functions.ImplicitFunction.inn_pred", "ctx.save_for_backward", "torch.tensor", "print"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.functions.ImplicitFunction.inn_pred"], ["        ", "X_0", "=", "B", "if", "X_0", "is", "None", "else", "X_0", "\n", "X", ",", "err", ",", "status", ",", "D", "=", "ImplicitFunction", ".", "inn_pred", "(", "W", ",", "X_0", ",", "A", ",", "B", ",", "phi", ",", "mitr", "=", "fd_mitr", ",", "compute_dphi", "=", "True", ")", "\n", "ctx", ".", "save_for_backward", "(", "W", ",", "X", ",", "A", ",", "B", ",", "D", ",", "X_0", ",", "torch", ".", "tensor", "(", "bw_mitr", ")", ")", "\n", "if", "status", "not", "in", "\"converged\"", ":", "\n", "            ", "print", "(", "\"Iterations not converging!\"", ",", "err", ",", "status", ")", "\n", "", "return", "X", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "grad_outputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.functions.ImplicitFunction.backward": [[20, 39], ["bw_mitr.cpu().numpy.cpu().numpy.cpu().numpy", "functions.ImplicitFunction.inn_pred", "torch.mul", "torch.spmm", "torch.zeros_like", "bw_mitr.cpu().numpy.cpu().numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.functions.ImplicitFunction.inn_pred"], ["\n", "#import pydevd", "\n", "#pydevd.settrace(suspend=False, trace_only_current_thread=True)", "\n", "\n", "        ", "W", ",", "X", ",", "A", ",", "B", ",", "D", ",", "X_0", ",", "bw_mitr", "=", "ctx", ".", "saved_tensors", "\n", "bw_mitr", "=", "bw_mitr", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "grad_x", "=", "grad_outputs", "[", "0", "]", "\n", "\n", "dphi", "=", "lambda", "X", ":", "torch", ".", "mul", "(", "X", ",", "D", ")", "\n", "grad_z", ",", "err", ",", "status", ",", "_", "=", "ImplicitFunction", ".", "inn_pred", "(", "W", ".", "T", ",", "X_0", ",", "A", ",", "grad_x", ",", "dphi", ",", "mitr", "=", "bw_mitr", ",", "trasposed_A", "=", "True", ")", "\n", "#grad_z.clamp_(-1,1)", "\n", "\n", "grad_W", "=", "grad_z", "@", "torch", ".", "spmm", "(", "A", ",", "X", ".", "T", ")", "\n", "grad_B", "=", "grad_z", "\n", "\n", "# Might return gradient for A if needed", "\n", "return", "grad_W", ",", "None", ",", "torch", ".", "zeros_like", "(", "A", ")", ",", "grad_B", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "@", "staticmethod", "\n", "def", "inn_pred", "(", "W", ",", "X", ",", "A", ",", "B", ",", "phi", ",", "mitr", "=", "300", ",", "tol", "=", "3e-6", ",", "trasposed_A", "=", "False", ",", "compute_dphi", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.functions.ImplicitFunction.inn_pred": [[40, 69], ["range", "torch.transpose", "phi", "torch.norm", "torch.spmm", "torch.enable_grad", "Z.requires_grad_", "phi", "torch.spmm", "torch.autograd.grad", "torch.sum"], "methods", ["None"], ["# TODO: randomized speed up", "\n", "        ", "At", "=", "A", "if", "trasposed_A", "else", "torch", ".", "transpose", "(", "A", ",", "0", ",", "1", ")", "\n", "#X = B if X is None else X", "\n", "\n", "err", "=", "0", "\n", "status", "=", "'max itrs reached'", "\n", "for", "i", "in", "range", "(", "mitr", ")", ":", "\n", "# WXA", "\n", "            ", "X_", "=", "W", "@", "X", "\n", "support", "=", "torch", ".", "spmm", "(", "At", ",", "X_", ".", "T", ")", ".", "T", "\n", "X_new", "=", "phi", "(", "support", "+", "B", ")", "\n", "err", "=", "torch", ".", "norm", "(", "X_new", "-", "X", ",", "np", ".", "inf", ")", "\n", "if", "err", "<", "tol", ":", "\n", "                ", "status", "=", "'converged'", "\n", "break", "\n", "", "X", "=", "X_new", "\n", "\n", "", "dphi", "=", "None", "\n", "if", "compute_dphi", ":", "\n", "            ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "support", "=", "torch", ".", "spmm", "(", "At", ",", "(", "W", "@", "X", ")", ".", "T", ")", ".", "T", "\n", "Z", "=", "support", "+", "B", "\n", "Z", ".", "requires_grad_", "(", "True", ")", "\n", "X_new", "=", "phi", "(", "Z", ")", "\n", "dphi", "=", "torch", ".", "autograd", ".", "grad", "(", "torch", ".", "sum", "(", "X_new", ")", ",", "Z", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "\n", "", "", "return", "X_new", ",", "err", ",", "status", ",", "dphi", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.AdditionalLayer.__init__": [[291, 299], ["torch.nn.ReLU", "super().__init__", "utils.AdditionalLayer.add_module", "isinstance", "torch.nn.Linear", "utils.AdditionalLayer.add_module"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.SparseDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "num_input", ",", "num_output", ",", "activation", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "add_module", "(", "\"model\"", ",", "self", ".", "model", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "if", "isinstance", "(", "activation", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\"activation\"", ",", "self", ".", "activation", ")", "\n", "", "self", ".", "func", "=", "torch", ".", "nn", ".", "Linear", "(", "num_input", ",", "num_output", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.AdditionalLayer.forward": [[300, 304], ["utils.AdditionalLayer.model", "utils.AdditionalLayer.activation", "utils.AdditionalLayer.func"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "*", "input", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "return", "self", ".", "func", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.SparseDropout.__init__": [[362, 367], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.SparseDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dprob", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "SparseDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# dprob is ratio of dropout", "\n", "# convert to keep probability", "\n", "self", ".", "kprob", "=", "1", "-", "dprob", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.SparseDropout.forward": [[368, 376], ["torch.sparse.FloatTensor", "x._indices", "torch.Size", "x._values", "torch.rand", "x._values().size", "x._values"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "training", ")", ":", "\n", "        ", "if", "training", ":", "\n", "            ", "mask", "=", "(", "(", "torch", ".", "rand", "(", "x", ".", "_values", "(", ")", ".", "size", "(", ")", ")", "+", "(", "self", ".", "kprob", ")", ")", ".", "floor", "(", ")", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", "rc", "=", "x", ".", "_indices", "(", ")", "[", ":", ",", "mask", "]", "\n", "val", "=", "x", ".", "_values", "(", ")", "[", "mask", "]", "*", "(", "1.0", "/", "self", ".", "kprob", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "rc", ",", "val", ",", "torch", ".", "Size", "(", "x", ".", "shape", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.parse_index_file": [[14, 20], ["open", "index.append", "int", "line.strip"], "function", ["None"], ["def", "parse_index_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Parse index file.\"\"\"", "\n", "index", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "        ", "index", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.preprocess_citation": [[21, 26], ["normalization.fetch_normalization", "normalization.fetch_normalization.", "normalization.row_normalize"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.normalization.fetch_normalization", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.normalization.row_normalize"], ["", "def", "preprocess_citation", "(", "adj", ",", "features", ",", "normalization", "=", "\"FirstOrderGCN\"", ")", ":", "\n", "    ", "adj_normalizer", "=", "fetch_normalization", "(", "normalization", ")", "\n", "adj", "=", "adj_normalizer", "(", "adj", ")", "\n", "features", "=", "row_normalize", "(", "features", ")", "\n", "return", "adj", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.load_citation": [[27, 95], ["range", "tuple", "utils.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "networkx.adjacency_matrix", "numpy.vstack", "np.sort.tolist", "range", "range", "utils.preprocess_citation", "torch.FloatTensor().float", "torch.LongTensor", "sparse_mx_to_torch_sparse_tensor().float", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "utils.load_citation_chain", "len", "range", "scipy.lil_matrix", "numpy.zeros", "networkx.from_dict_of_lists", "adj.cuda.multiply", "len", "len", "normalization.aug_normalized_adjacency", "sparse_mx_to_torch_sparse_tensor().float", "torch.max", "features.cuda.cuda", "adj.cuda.cuda", "labels.cuda.cuda", "idx_train.cuda.cuda", "idx_val.cuda.cuda", "idx_test.cuda.cuda", "open", "min", "scipy.vstack", "adj.cuda.T.multiply", "len", "adj_orig.cuda.cuda", "torch.FloatTensor", "utils.sparse_mx_to_torch_sparse_tensor", "objects.append", "objects.append", "max", "len", "len", "utils.sparse_mx_to_torch_sparse_tensor", "numpy.array", "dataset_str.lower", "pickle.load", "pickle.load", "features.cuda.todense", "min", "min"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.parse_index_file", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.preprocess_citation", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.load_citation_chain", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.normalization.aug_normalized_adjacency", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.sparse_mx_to_torch_sparse_tensor"], ["", "def", "load_citation", "(", "dataset_str", "=", "\"cora\"", ",", "normalization", "=", "\"AugNormAdj\"", ",", "cuda", "=", "True", ",", "need_orig", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Load Citation Networks Datasets.\n    \"\"\"", "\n", "if", "'chains'", "in", "dataset_str", ":", "\n", "        ", "return", "load_citation_chain", "(", "normalization", ",", "cuda", ",", "need_orig", "=", "need_orig", ")", "\n", "\n", "", "names", "=", "[", "'x'", ",", "'y'", ",", "'tx'", ",", "'ty'", ",", "'allx'", ",", "'ally'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "        ", "with", "open", "(", "\"data/ind.{}.{}\"", ".", "format", "(", "dataset_str", ".", "lower", "(", ")", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "", "x", ",", "y", ",", "tx", ",", "ty", ",", "allx", ",", "ally", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"data/ind.{}.test.index\"", ".", "format", "(", "dataset_str", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset_str", "==", "'citeseer'", ":", "\n", "# Fix citeseer dataset (there are some isolated nodes in the graph)", "\n", "# Find isolated nodes, add them as zero-vecs into the right position", "\n", "        ", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "tx_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "tx", "\n", "tx", "=", "tx_extended", "\n", "ty_extended", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "y", ".", "shape", "[", "1", "]", ")", ")", "\n", "ty_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "ty", "\n", "ty", "=", "ty_extended", "\n", "\n", "", "features", "=", "sp", ".", "vstack", "(", "(", "allx", ",", "tx", ")", ")", ".", "tolil", "(", ")", "\n", "features", "[", "test_idx_reorder", ",", ":", "]", "=", "features", "[", "test_idx_range", ",", ":", "]", "\n", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "adj", "=", "adj", "+", "adj", ".", "T", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "-", "adj", ".", "multiply", "(", "adj", ".", "T", ">", "adj", ")", "\n", "labels", "=", "np", ".", "vstack", "(", "(", "ally", ",", "ty", ")", ")", "\n", "labels", "[", "test_idx_reorder", ",", ":", "]", "=", "labels", "[", "test_idx_range", ",", ":", "]", "\n", "\n", "idx_test", "=", "test_idx_range", ".", "tolist", "(", ")", "\n", "idx_train", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "idx_val", "=", "range", "(", "len", "(", "y", ")", ",", "len", "(", "y", ")", "+", "500", ")", "\n", "\n", "if", "need_orig", ":", "\n", "        ", "adj_orig", "=", "aug_normalized_adjacency", "(", "adj", ",", "need_orig", "=", "True", ")", "\n", "adj_orig", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj_orig", ")", ".", "float", "(", ")", "\n", "if", "cuda", ":", "\n", "            ", "adj_orig", "=", "adj_orig", ".", "cuda", "(", ")", "\n", "\n", "", "", "adj", ",", "features", "=", "preprocess_citation", "(", "adj", ",", "features", ",", "normalization", ")", "\n", "\n", "# porting to pytorch", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", ")", ")", ".", "float", "(", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "labels", "=", "torch", ".", "max", "(", "labels", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", ".", "float", "(", ")", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "if", "cuda", ":", "\n", "        ", "features", "=", "features", ".", "cuda", "(", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "idx_train", "=", "idx_train", ".", "cuda", "(", ")", "\n", "idx_val", "=", "idx_val", ".", "cuda", "(", ")", "\n", "idx_test", "=", "idx_test", ".", "cuda", "(", ")", "\n", "\n", "", "return", "[", "adj", ",", "adj_orig", "]", "if", "need_orig", "else", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.load_citation_chain": [[96, 151], ["numpy.random.RandomState", "scipy.coo_matrix", "scipy.block_diag", "np.random.RandomState.uniform", "numpy.eye().reshape", "features.cuda.reshape", "numpy.eye().reshape().repeat().repeat", "labels.cuda.reshape", "numpy.arange", "np.random.RandomState.shuffle", "utils.preprocess_citation", "torch.FloatTensor().float", "torch.LongTensor", "sparse_mx_to_torch_sparse_tensor().float", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "normalization.aug_normalized_adjacency", "sparse_mx_to_torch_sparse_tensor().float", "torch.max", "features.cuda.cuda", "adj.cuda.cuda", "labels.cuda.cuda", "idx_train.cuda.cuda", "idx_val.cuda.cuda", "idx_test.cuda.cuda", "numpy.ones", "numpy.eye", "numpy.eye().reshape().repeat", "adj_orig.cuda.cuda", "torch.FloatTensor", "utils.sparse_mx_to_torch_sparse_tensor", "numpy.arange", "numpy.arange", "range", "utils.sparse_mx_to_torch_sparse_tensor", "numpy.array", "numpy.eye().reshape", "scipy.issparse", "features.cuda.todense", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.preprocess_citation", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.normalization.aug_normalized_adjacency", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.sparse_mx_to_torch_sparse_tensor"], ["", "def", "load_citation_chain", "(", "normalization", ",", "cuda", ",", "need_orig", "=", "False", ")", ":", "\n", "    ", "\"\"\"load the synthetic dataset: chain\"\"\"", "\n", "r", "=", "np", ".", "random", ".", "RandomState", "(", "42", ")", "\n", "c", "=", "2", "# num of classes", "\n", "n", "=", "20", "# chains for each class", "\n", "l", "=", "10", "# length of chain", "\n", "f", "=", "100", "# feature dimension", "\n", "tn", "=", "20", "# train nodes", "\n", "vl", "=", "100", "# val nodes", "\n", "tt", "=", "200", "# test nodes", "\n", "noise", "=", "0.00", "\n", "\n", "chain_adj", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "l", "-", "1", ")", ",", "(", "np", ".", "arange", "(", "l", "-", "1", ")", ",", "np", ".", "arange", "(", "1", ",", "l", ")", ")", ")", ",", "shape", "=", "(", "l", ",", "l", ")", ")", "\n", "adj", "=", "sp", ".", "block_diag", "(", "[", "chain_adj", "for", "_", "in", "range", "(", "c", "*", "n", ")", "]", ")", "# square matrix N = c*n*l", "\n", "\n", "features", "=", "r", ".", "uniform", "(", "-", "noise", ",", "noise", ",", "size", "=", "(", "c", ",", "n", ",", "l", ",", "f", ")", ")", "\n", "#features = np.zeros_like(features)", "\n", "features", "[", ":", ",", ":", ",", "0", ",", ":", "c", "]", "+=", "np", ".", "eye", "(", "c", ")", ".", "reshape", "(", "c", ",", "1", ",", "c", ")", "# add class info to the first node of chains.", "\n", "features", "=", "features", ".", "reshape", "(", "-", "1", ",", "f", ")", "\n", "\n", "labels", "=", "np", ".", "eye", "(", "c", ")", ".", "reshape", "(", "c", ",", "1", ",", "1", ",", "c", ")", ".", "repeat", "(", "n", ",", "axis", "=", "1", ")", ".", "repeat", "(", "l", ",", "axis", "=", "2", ")", "# one-hot labels", "\n", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ",", "c", ")", "\n", "\n", "idx_random", "=", "np", ".", "arange", "(", "c", "*", "n", "*", "l", ")", "\n", "r", ".", "shuffle", "(", "idx_random", ")", "\n", "idx_train", "=", "idx_random", "[", ":", "tn", "]", "\n", "idx_val", "=", "idx_random", "[", "tn", ":", "tn", "+", "vl", "]", "\n", "idx_test", "=", "idx_random", "[", "tn", "+", "vl", ":", "tn", "+", "vl", "+", "tt", "]", "\n", "\n", "if", "need_orig", ":", "\n", "        ", "adj_orig", "=", "aug_normalized_adjacency", "(", "adj", ",", "need_orig", "=", "True", ")", "\n", "adj_orig", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj_orig", ")", ".", "float", "(", ")", "\n", "if", "cuda", ":", "\n", "            ", "adj_orig", "=", "adj_orig", ".", "cuda", "(", ")", "\n", "\n", "", "", "adj", ",", "features", "=", "preprocess_citation", "(", "adj", ",", "features", ",", "normalization", ")", "\n", "\n", "# porting to pytorch", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", "if", "sp", ".", "issparse", "(", "features", ")", "else", "features", ")", ")", ".", "float", "(", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "labels", "=", "torch", ".", "max", "(", "labels", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", ".", "float", "(", ")", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "if", "cuda", ":", "\n", "        ", "features", "=", "features", ".", "cuda", "(", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "idx_train", "=", "idx_train", ".", "cuda", "(", ")", "\n", "idx_val", "=", "idx_val", ".", "cuda", "(", ")", "\n", "idx_test", "=", "idx_test", ".", "cuda", "(", ")", "\n", "\n", "", "return", "[", "adj", ",", "adj_orig", "]", "if", "need_orig", "else", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.accuracy": [[153, 158], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "len", "[].type_as.eq", "output.max"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.Evaluation": [[159, 181], ["output.cpu().detach().numpy", "labels.cpu().detach().numpy.cpu().detach().numpy", "numpy.zeros().astype", "range", "print", "labels[].sum().astype", "list", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "output.cpu().detach", "labels.cpu().detach().numpy.cpu().detach", "numpy.zeros", "preds[].argsort", "labels[].sum", "labels[].nonzero", "output.cpu", "labels.cpu().detach().numpy.cpu"], "function", ["None"], ["", "def", "Evaluation", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "'''\n    binary_pred = preds\n    binary_pred[binary_pred > 0.0] = 1\n    binary_pred[binary_pred <= 0.0] = 0\n    '''", "\n", "num_correct", "=", "0", "\n", "binary_pred", "=", "np", ".", "zeros", "(", "preds", ".", "shape", ")", ".", "astype", "(", "'int'", ")", "\n", "for", "i", "in", "range", "(", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "k", "=", "labels", "[", "i", "]", ".", "sum", "(", ")", ".", "astype", "(", "'int'", ")", "\n", "topk_idx", "=", "preds", "[", "i", "]", ".", "argsort", "(", ")", "[", "-", "k", ":", "]", "\n", "binary_pred", "[", "i", "]", "[", "topk_idx", "]", "=", "1", "\n", "for", "pos", "in", "list", "(", "labels", "[", "i", "]", ".", "nonzero", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "if", "labels", "[", "i", "]", "[", "pos", "]", "and", "labels", "[", "i", "]", "[", "pos", "]", "==", "binary_pred", "[", "i", "]", "[", "pos", "]", ":", "\n", "                ", "num_correct", "+=", "1", "\n", "\n", "", "", "", "print", "(", "'total number of correct is: {}'", ".", "format", "(", "num_correct", ")", ")", "\n", "#print('preds max is: {0} and min is: {1}'.format(preds.max(),preds.min()))", "\n", "#'''", "\n", "return", "metrics", ".", "f1_score", "(", "labels", ",", "binary_pred", ",", "average", "=", "\"micro\"", ")", ",", "metrics", ".", "f1_score", "(", "labels", ",", "binary_pred", ",", "average", "=", "\"macro\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.sparse_mx_to_torch_sparse_tensor": [[184, 195], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "numpy.vstack().astype", "tensor.to.to", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ",", "device", "=", "None", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "tensor", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "if", "device", "is", "not", "None", ":", "\n", "        ", "tensor", "=", "tensor", ".", "to", "(", "device", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.get_spectral_rad": [[197, 202], ["sparse_tensor.data.coalesce().cpu", "scipy.coo_matrix", "numpy.abs", "sparse_tensor.data.coalesce", "numpy.abs", "sparse_tensor.data.coalesce().cpu.indices().numpy", "sparse_tensor.data.coalesce().cpu.values().numpy", "scipy.linalg.eigs", "sparse_tensor.data.coalesce().cpu.indices", "sparse_tensor.data.coalesce().cpu.values"], "function", ["None"], ["", "def", "get_spectral_rad", "(", "sparse_tensor", ",", "tol", "=", "1e-5", ")", ":", "\n", "    ", "\"\"\"Compute spectral radius from a tensor\"\"\"", "\n", "A", "=", "sparse_tensor", ".", "data", ".", "coalesce", "(", ")", ".", "cpu", "(", ")", "\n", "A_scipy", "=", "sp", ".", "coo_matrix", "(", "(", "np", ".", "abs", "(", "A", ".", "values", "(", ")", ".", "numpy", "(", ")", ")", ",", "A", ".", "indices", "(", ")", ".", "numpy", "(", ")", ")", ",", "shape", "=", "A", ".", "shape", ")", "\n", "return", "np", ".", "abs", "(", "sp", ".", "linalg", ".", "eigs", "(", "A_scipy", ",", "k", "=", "1", ",", "return_eigenvectors", "=", "False", ")", "[", "0", "]", ")", "+", "tol", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.projection_norm_inf": [[203, 236], ["numpy.abs().sum", "A.data.copy_", "A.T.clone().detach().cpu().numpy", "A.clone().detach().cpu().numpy", "numpy.where", "numpy.sign", "numpy.abs", "numpy.sort", "float", "range", "numpy.isclose", "torch.tensor", "numpy.abs", "numpy.sum", "len", "len", "numpy.maximum", "numpy.abs().sum", "A.T.clone().detach().cpu", "A.clone().detach().cpu", "numpy.abs", "A.T.clone().detach", "A.clone().detach", "A.T.clone", "A.clone"], "function", ["None"], ["", "def", "projection_norm_inf", "(", "A", ",", "kappa", "=", "0.99", ",", "transpose", "=", "False", ")", ":", "\n", "    ", "\"\"\" project onto ||A||_inf <= kappa return updated A\"\"\"", "\n", "# TODO: speed up if needed", "\n", "v", "=", "kappa", "\n", "if", "transpose", ":", "\n", "        ", "A_np", "=", "A", ".", "T", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "A_np", "=", "A", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "x", "=", "np", ".", "abs", "(", "A_np", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "for", "idx", "in", "np", ".", "where", "(", "x", ">", "v", ")", "[", "0", "]", ":", "\n", "# read the vector", "\n", "        ", "a_orig", "=", "A_np", "[", "idx", ",", ":", "]", "\n", "a_sign", "=", "np", ".", "sign", "(", "a_orig", ")", "\n", "a_abs", "=", "np", ".", "abs", "(", "a_orig", ")", "\n", "a", "=", "np", ".", "sort", "(", "a_abs", ")", "\n", "\n", "s", "=", "np", ".", "sum", "(", "a", ")", "-", "v", "\n", "l", "=", "float", "(", "len", "(", "a", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", ":", "\n", "# proposal: alpha <= a[i]", "\n", "            ", "if", "s", "/", "l", ">", "a", "[", "i", "]", ":", "\n", "                ", "s", "-=", "a", "[", "i", "]", "\n", "l", "-=", "1", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "alpha", "=", "s", "/", "l", "\n", "a", "=", "a_sign", "*", "np", ".", "maximum", "(", "a_abs", "-", "alpha", ",", "0", ")", "\n", "# verify", "\n", "assert", "np", ".", "isclose", "(", "np", ".", "abs", "(", "a", ")", ".", "sum", "(", ")", ",", "v", ",", "atol", "=", "1e-4", ")", "\n", "# write back", "\n", "A_np", "[", "idx", ",", ":", "]", "=", "a", "\n", "", "A", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "A_np", ".", "T", "if", "transpose", "else", "A_np", ",", "dtype", "=", "A", ".", "dtype", ",", "device", "=", "A", ".", "device", ")", ")", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.projection_norm_inf_and_1": [[237, 251], ["A.clone().detach().cpu().numpy", "A.data.copy_", "utils.projection_inf_np", "utils.projection_inf_np", "torch.tensor", "A.clone().detach().cpu", "utils.projection_inf_np", "utils.projection_inf_np", "A.clone().detach", "A.clone"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.projection_inf_np", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.projection_inf_np", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.projection_inf_np", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.projection_inf_np"], ["", "def", "projection_norm_inf_and_1", "(", "A", ",", "kappa_inf", "=", "0.99", ",", "kappa_1", "=", "None", ",", "inf_first", "=", "True", ")", ":", "\n", "    ", "\"\"\" project onto ||A||_inf <= kappa return updated A\"\"\"", "\n", "# TODO: speed up if needed", "\n", "v_inf", "=", "kappa_inf", "\n", "v_1", "=", "kappa_inf", "if", "kappa_1", "is", "None", "else", "kappa_1", "\n", "A_np", "=", "A", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "inf_first", ":", "\n", "        ", "A_np", "=", "projection_inf_np", "(", "A_np", ",", "v_inf", ")", "\n", "A_np", "=", "projection_inf_np", "(", "A_np", ".", "T", ",", "v_1", ")", ".", "T", "\n", "", "else", ":", "\n", "        ", "A_np", "=", "projection_inf_np", "(", "A_np", ".", "T", ",", "v_1", ")", ".", "T", "\n", "A_np", "=", "projection_inf_np", "(", "A_np", ",", "v_inf", ")", "\n", "", "A", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "A_np", ",", "dtype", "=", "A", ".", "dtype", ",", "device", "=", "A", ".", "device", ")", ")", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.projection_inf_np": [[252, 277], ["numpy.abs().sum", "numpy.where", "numpy.sign", "numpy.abs", "numpy.sort", "float", "range", "numpy.isclose", "numpy.abs", "numpy.sum", "len", "len", "numpy.maximum", "numpy.abs().sum", "numpy.abs"], "function", ["None"], ["", "def", "projection_inf_np", "(", "A_np", ",", "v", ")", ":", "\n", "    ", "x", "=", "np", ".", "abs", "(", "A_np", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "for", "idx", "in", "np", ".", "where", "(", "x", ">", "v", ")", "[", "0", "]", ":", "\n", "# read the vector", "\n", "        ", "a_orig", "=", "A_np", "[", "idx", ",", ":", "]", "\n", "a_sign", "=", "np", ".", "sign", "(", "a_orig", ")", "\n", "a_abs", "=", "np", ".", "abs", "(", "a_orig", ")", "\n", "a", "=", "np", ".", "sort", "(", "a_abs", ")", "\n", "\n", "s", "=", "np", ".", "sum", "(", "a", ")", "-", "v", "\n", "l", "=", "float", "(", "len", "(", "a", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", ":", "\n", "# proposal: alpha <= a[i]", "\n", "            ", "if", "s", "/", "l", ">", "a", "[", "i", "]", ":", "\n", "                ", "s", "-=", "a", "[", "i", "]", "\n", "l", "-=", "1", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "alpha", "=", "s", "/", "l", "\n", "a", "=", "a_sign", "*", "np", ".", "maximum", "(", "a_abs", "-", "alpha", ",", "0", ")", "\n", "# verify", "\n", "assert", "np", ".", "isclose", "(", "np", ".", "abs", "(", "a", ")", ".", "sum", "(", ")", ",", "v", ",", "atol", "=", "1e-6", ")", "\n", "# write back", "\n", "A_np", "[", "idx", ",", ":", "]", "=", "a", "\n", "", "return", "A_np", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.clip_gradient": [[278, 283], ["model.parameters", "torch.nn.utils.clip_grad_norm"], "function", ["None"], ["", "def", "clip_gradient", "(", "model", ",", "clip_norm", "=", "10", ")", ":", "\n", "    ", "\"\"\" clip gradients of each parameter by norm \"\"\"", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm", "(", "param", ",", "clip_norm", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.l_1_penalty": [[284, 289], ["model.parameters", "torch.sum", "torch.abs"], "function", ["None"], ["", "def", "l_1_penalty", "(", "model", ",", "alpha", "=", "0.1", ")", ":", "\n", "    ", "regularization_loss", "=", "0", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "regularization_loss", "+=", "alpha", "*", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "param", ")", ")", "\n", "", "return", "regularization_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.load_raw_graph": [[305, 323], ["networkx.adjacency_matrix", "normalization.fetch_normalization", "normalization.fetch_normalization.", "sparse_mx_to_torch_sparse_tensor().float", "open", "networkx.from_dict_of_lists", "row.strip().split.strip().split", "range", "utils.sparse_mx_to_torch_sparse_tensor", "len", "adjs.append", "row.strip().split.strip", "int"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.normalization.fetch_normalization", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.sparse_mx_to_torch_sparse_tensor"], ["", "", "def", "load_raw_graph", "(", "dataset_str", "=", "\"amazon-all\"", ")", ":", "\n", "    ", "txt_file", "=", "'data/'", "+", "dataset_str", "+", "'/adj_list.txt'", "\n", "graph", "=", "{", "}", "\n", "with", "open", "(", "txt_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "cur_idx", "=", "0", "\n", "for", "row", "in", "f", ":", "\n", "            ", "row", "=", "row", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "adjs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "len", "(", "row", ")", ")", ":", "\n", "                ", "adjs", ".", "append", "(", "int", "(", "row", "[", "j", "]", ")", ")", "\n", "", "graph", "[", "cur_idx", "]", "=", "adjs", "\n", "cur_idx", "+=", "1", "\n", "", "", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "normalization", "=", "\"AugNormAdj\"", "\n", "adj_normalizer", "=", "fetch_normalization", "(", "normalization", ")", "\n", "adj", "=", "adj_normalizer", "(", "adj", ")", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", ".", "float", "(", ")", "\n", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.load_txt_data": [[324, 344], ["utils.load_raw_graph", "list", "list", "list", "numpy.loadtxt", "scipy.identity", "sparse_mx_to_torch_sparse_tensor().float", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt", "open", "int", "utils.sparse_mx_to_torch_sparse_tensor", "f.readline().strip().split", "str", "f.readline().strip", "f.readline"], "function", ["home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.load_raw_graph", "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.sparse_mx_to_torch_sparse_tensor"], ["", "def", "load_txt_data", "(", "dataset_str", "=", "\"amazon-all\"", ",", "portion", "=", "'0.06'", ")", ":", "\n", "    ", "adj", "=", "load_raw_graph", "(", "dataset_str", ")", "\n", "idx_train", "=", "list", "(", "np", ".", "loadtxt", "(", "'data/'", "+", "dataset_str", "+", "'/train_idx-'", "+", "str", "(", "portion", ")", "+", "'.txt'", ",", "dtype", "=", "int", ")", ")", "\n", "idx_val", "=", "list", "(", "np", ".", "loadtxt", "(", "'data/'", "+", "dataset_str", "+", "'/test_idx.txt'", ",", "dtype", "=", "int", ")", ")", "\n", "idx_test", "=", "list", "(", "np", ".", "loadtxt", "(", "'data/'", "+", "dataset_str", "+", "'/test_idx.txt'", ",", "dtype", "=", "int", ")", ")", "\n", "labels", "=", "np", ".", "loadtxt", "(", "'data/'", "+", "dataset_str", "+", "'/label.txt'", ")", "\n", "with", "open", "(", "'data/'", "+", "dataset_str", "+", "'/meta.txt'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "num_nodes", ",", "num_class", "=", "[", "int", "(", "w", ")", "for", "w", "in", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "\n", "", "features", "=", "sp", ".", "identity", "(", "num_nodes", ")", "\n", "\n", "# porting to pytorch", "\n", "features", "=", "sparse_mx_to_torch_sparse_tensor", "(", "features", ")", ".", "float", "(", ")", "\n", "labels", "=", "torch", ".", "FloatTensor", "(", "labels", ")", "\n", "#labels = torch.max(labels, dim=1)[1]", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", ")", "\n", "\n", "return", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "idx_test", ",", "num_nodes", ",", "num_class", "\n", "\n"]], "home.repos.pwc.inspect_result.SwiftieH_IGNN.graphclassification.utils.sgc_precompute": [[345, 360], ["time.perf_counter", "adj.coalesce().indices", "adj.coalesce().values", "features.coalesce().indices", "features.coalesce().values", "range", "torch_sparse.spspmm", "time.perf_counter", "torch.sparse.FloatTensor", "adj.coalesce", "adj.coalesce", "features.coalesce", "features.coalesce", "torch.Size"], "function", ["None"], ["", "def", "sgc_precompute", "(", "features", ",", "adj", ",", "degree", ")", ":", "\n", "    ", "t", "=", "perf_counter", "(", ")", "\n", "adj_index", "=", "adj", ".", "coalesce", "(", ")", ".", "indices", "(", ")", "\n", "adj_value", "=", "adj", ".", "coalesce", "(", ")", ".", "values", "(", ")", "\n", "features_index", "=", "features", ".", "coalesce", "(", ")", ".", "indices", "(", ")", "\n", "features_value", "=", "features", ".", "coalesce", "(", ")", ".", "values", "(", ")", "\n", "m", "=", "adj", ".", "shape", "[", "0", "]", "\n", "n", "=", "adj", ".", "shape", "[", "1", "]", "\n", "k", "=", "features", ".", "shape", "[", "1", "]", "\n", "\n", "for", "i", "in", "range", "(", "degree", ")", ":", "\n", "#features = torch.spmm(adj, features)", "\n", "        ", "features_index", ",", "features_value", "=", "torch_sparse", ".", "spspmm", "(", "adj_index", ",", "adj_value", ",", "features_index", ",", "features_value", ",", "m", ",", "n", ",", "k", ")", "\n", "", "precompute_time", "=", "perf_counter", "(", ")", "-", "t", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "features_index", ",", "features_value", ",", "torch", ".", "Size", "(", "features", ".", "shape", ")", ")", ",", "precompute_time", "\n", "\n"]]}