{"home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.base.Base.__init__": [[27, 43], ["pytorch_lightning.LightningModule.__init__", "base.Base.save_hyperparameters", "torch.nn.L1Loss", "torch.nn.MSELoss", "torch.nn.BCELoss", "wavebeat.loss.GlobalMSELoss", "wavebeat.loss.GlobalBCELoss", "wavebeat.loss.BCFELoss"], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.filter.FIRFilter.__init__"], ["def", "__init__", "(", "self", ",", "\n", "lr", "=", "3e-4", ",", "\n", "save_dir", "=", "None", ",", "\n", "num_examples", "=", "4", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Base", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n", "# these lines need to be commented out when trying", "\n", "# to jit these models in `export.py`", "\n", "self", ".", "l1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "l2", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "bce", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "self", ".", "gmse", "=", "GlobalMSELoss", "(", ")", "\n", "self", ".", "gbce", "=", "GlobalBCELoss", "(", ")", "\n", "self", ".", "bcfe", "=", "BCFELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.base.Base.forward": [[44, 46], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.base.Base.predict_beats": [[47, 107], ["torchaudio.load", "audio.to.to.abs().max", "audio.to.to.unsqueeze", "wavebeat.eval.find_beats", "wavebeat.eval.find_beats", "julius.resample_frac", "print", "audio.to.to.mean", "audio.to.to.to", "base.Base.to", "base.Base.to", "torch.no_grad", "torch.sigmoid", "pred.cpu.cpu.cpu", "p_beats.numpy", "p_beats.numpy", "p_downbeats.numpy", "p_downbeats.numpy", "audio.to.to.abs", "base.Base."], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.eval.find_beats", "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.eval.find_beats"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "predict_beats", "(", "self", ",", "filename", ",", "use_gpu", "=", "False", ")", ":", "\n", "        ", "\"\"\" Load and audio file and predict the beat and downbeat loctions. \n        \n        Args:\n            filename (str): Path to an audio file. \n            use_gpu (bool, optional): Perform inference on GPU is available. \n        \n        Returns:\n            beats (ndarray): Location of predicted beats in seconds.\n            downbeats (ndarray): Location of predicted downbeats in seconds.\n        \"\"\"", "\n", "\n", "# load the audio into tensor", "\n", "audio", ",", "sr", "=", "torchaudio", ".", "load", "(", "filename", ")", "\n", "\n", "# resample to 22.05 kHz if needed", "\n", "if", "sr", "!=", "self", ".", "hparams", ".", "audio_sample_rate", ":", "\n", "            ", "audio", "=", "julius", ".", "resample_frac", "(", "audio", ",", "sr", ",", "self", ".", "hparams", ".", "audio_sample_rate", ")", "\n", "\n", "", "if", "audio", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "            ", "print", "(", "\"Loaded multichannel audio. Summing to mono...\"", ")", "\n", "audio", "=", "audio", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "\n", "# normalize the audio", "\n", "", "audio", "/=", "audio", ".", "abs", "(", ")", ".", "max", "(", ")", "\n", "\n", "# add a batch dim", "\n", "audio", "=", "audio", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "            ", "audio", "=", "audio", ".", "to", "(", "\"cuda:0\"", ")", "\n", "self", ".", "to", "(", "\"cuda:0\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "to", "(", "'cpu'", ")", "\n", "\n", "# pass audio to model", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pred", "=", "torch", ".", "sigmoid", "(", "self", "(", "audio", ")", ")", "\n", "\n", "# move data back to CPU", "\n", "", "if", "use_gpu", ":", "\n", "            ", "pred", "=", "pred", ".", "cpu", "(", ")", "\n", "\n", "# separate the beats and downbeat activations", "\n", "", "p_beats", "=", "pred", "[", "0", ",", "0", ",", ":", "]", "\n", "p_downbeats", "=", "pred", "[", "0", ",", "1", ",", ":", "]", "\n", "\n", "# use peak picking to find locations of beats and downbeats", "\n", "_", ",", "beats", ",", "_", "=", "find_beats", "(", "p_beats", ".", "numpy", "(", ")", ",", "\n", "p_beats", ".", "numpy", "(", ")", ",", "\n", "beat_type", "=", "\"beat\"", ",", "\n", "sample_rate", "=", "self", ".", "hparams", ".", "target_sample_rate", ")", "\n", "\n", "_", ",", "downbeats", ",", "_", "=", "find_beats", "(", "p_downbeats", ".", "numpy", "(", ")", ",", "\n", "p_downbeats", ".", "numpy", "(", ")", ",", "\n", "beat_type", "=", "\"downbeat\"", ",", "\n", "sample_rate", "=", "self", ".", "hparams", ".", "target_sample_rate", ")", "\n", "\n", "return", "beats", ",", "downbeats", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.base.Base.training_step": [[108, 133], ["base.Base.", "base.Base.bcfe", "base.Base.log", "wavebeat.utils.causal_crop", "wavebeat.utils.center_crop"], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.utils.causal_crop", "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.utils.center_crop"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "input", ",", "target", "=", "batch", "\n", "\n", "# pass the input thrgouh the mode", "\n", "pred", "=", "self", "(", "input", ")", "\n", "\n", "# crop the input and target signals", "\n", "if", "self", ".", "hparams", ".", "causal", ":", "\n", "            ", "target", "=", "causal_crop", "(", "target", ",", "pred", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "target", "=", "center_crop", "(", "target", ",", "pred", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "# compute the error using appropriate loss      ", "\n", "#loss, _, _ = self.gbce(pred, target)", "\n", "", "loss", ",", "_", ",", "_", "=", "self", ".", "bcfe", "(", "pred", ",", "target", ")", "\n", "\n", "self", ".", "log", "(", "'train_loss'", ",", "\n", "loss", ",", "\n", "on_step", "=", "True", ",", "\n", "on_epoch", "=", "True", ",", "\n", "prog_bar", "=", "True", ",", "\n", "logger", "=", "True", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.base.Base.validation_step": [[134, 167], ["base.Base.", "base.Base.bcfe", "base.Base.log", "torch.sigmoid", "wavebeat.utils.causal_crop", "wavebeat.utils.center_crop", "input.cpu", "wavebeat.utils.center_crop.cpu", "torch.sigmoid.cpu"], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.utils.causal_crop", "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.utils.center_crop"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "input", ",", "target", ",", "metadata", "=", "batch", "\n", "\n", "# pass the input thrgouh the mode", "\n", "pred", "=", "self", "(", "input", ")", "\n", "\n", "# crop the input and target signals", "\n", "if", "self", ".", "hparams", ".", "causal", ":", "\n", "            ", "target_crop", "=", "causal_crop", "(", "target", ",", "pred", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "target_crop", "=", "center_crop", "(", "target", ",", "pred", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "# compute the validation error using all losses", "\n", "#loss, _, _ = self.gbce(pred, target_crop)", "\n", "", "loss", ",", "_", ",", "_", "=", "self", ".", "bcfe", "(", "pred", ",", "target_crop", ")", "\n", "\n", "self", ".", "log", "(", "'val_loss'", ",", "loss", ")", "\n", "\n", "# apply sigmoid after computing loss", "\n", "pred", "=", "torch", ".", "sigmoid", "(", "pred", ")", "\n", "\n", "# move tensors to cpu for logging", "\n", "outputs", "=", "{", "\n", "\"input\"", ":", "input", ".", "cpu", "(", ")", ",", "\n", "\"target\"", ":", "target_crop", ".", "cpu", "(", ")", ",", "\n", "\"pred\"", ":", "pred", ".", "cpu", "(", ")", ",", "\n", "\"Filename\"", ":", "metadata", "[", "'Filename'", "]", ",", "\n", "\"Genre\"", ":", "metadata", "[", "'Genre'", "]", ",", "\n", "\"Time signature\"", ":", "metadata", "[", "'Time signature'", "]", "\n", "}", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.base.Base.validation_epoch_end": [[168, 305], ["numpy.arange", "numpy.random.choice", "numpy.arange", "numpy.mean", "numpy.mean", "base.Base.log", "base.Base.log", "base.Base.log", "base.Base.logger.experiment.add_text", "base.Base.logger.experiment.add_image", "enumerate", "out.items", "len", "len", "[].squeeze", "[].squeeze", "wavebeat.eval.evaluate", "songs.append", "beat_f1_scores.append", "downbeat_f1_scores.append", "torch.tensor", "torch.tensor", "torch.tensor", "wavebeat.plot.make_table", "wavebeat.plot.plot_histogram", "list", "[].squeeze", "[].squeeze", "[].squeeze", "wavebeat.eval.find_beats", "wavebeat.eval.find_beats", "base.Base.logger.experiment.add_audio", "base.Base.logger.experiment.add_image", "numpy.arange", "numpy.min", "numpy.mean", "t_beats.numpy", "p_beats.numpy", "t_downbeats.numpy", "p_downbeats.numpy", "wavebeat.plot.plot_activations", "os.path.join", "os.path.join", "torchaudio.save", "len", "os.path.isdir", "os.makedirs", "os.path.isfile", "torchaudio.save", "os.path.isfile", "torchaudio.save", "os.path.join", "torch.tensor().view().float", "outputs[].append", "outputs[].append", "len", "torch.tensor().view().float", "torch.tensor().view().float", "int", "int", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "int", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.eval.evaluate", "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.plot.make_table", "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.plot.plot_histogram", "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.eval.find_beats", "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.eval.find_beats", "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.plot.plot_activations"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "validation_epoch_end", "(", "self", ",", "validation_step_outputs", ")", ":", "\n", "# flatten the output validation step dicts to a single dict", "\n", "        ", "outputs", "=", "{", "\n", "\"input\"", ":", "[", "]", ",", "\n", "\"target\"", ":", "[", "]", ",", "\n", "\"pred\"", ":", "[", "]", ",", "\n", "\"Filename\"", ":", "[", "]", ",", "\n", "\"Genre\"", ":", "[", "]", ",", "\n", "\"Time signature\"", ":", "[", "]", "}", "\n", "\n", "metadata_keys", "=", "[", "\"Filename\"", ",", "\"Genre\"", ",", "\"Time signature\"", "]", "\n", "\n", "for", "out", "in", "validation_step_outputs", ":", "\n", "            ", "for", "key", ",", "val", "in", "out", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "not", "in", "metadata_keys", ":", "\n", "                    ", "bs", "=", "val", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "bs", "=", "len", "(", "val", ")", "\n", "", "for", "bidx", "in", "np", ".", "arange", "(", "bs", ")", ":", "\n", "                    ", "if", "key", "not", "in", "metadata_keys", ":", "\n", "                        ", "outputs", "[", "key", "]", ".", "append", "(", "val", "[", "bidx", ",", "...", "]", ")", "\n", "", "else", ":", "\n", "                        ", "outputs", "[", "key", "]", ".", "append", "(", "val", "[", "bidx", "]", ")", "\n", "\n", "", "", "", "", "example_indices", "=", "np", ".", "arange", "(", "len", "(", "outputs", "[", "\"input\"", "]", ")", ")", "\n", "rand_indices", "=", "np", ".", "random", ".", "choice", "(", "example_indices", ",", "\n", "replace", "=", "False", ",", "\n", "size", "=", "np", ".", "min", "(", "[", "len", "(", "outputs", "[", "\"input\"", "]", ")", ",", "self", ".", "hparams", ".", "num_examples", "]", ")", ")", "\n", "\n", "# compute metrics ", "\n", "songs", "=", "[", "]", "\n", "beat_f1_scores", "=", "[", "]", "\n", "downbeat_f1_scores", "=", "[", "]", "\n", "#dbn_beat_f1_scores = []", "\n", "#dbn_downbeat_f1_scores = []", "\n", "for", "idx", "in", "np", ".", "arange", "(", "len", "(", "outputs", "[", "\"input\"", "]", ")", ")", ":", "\n", "            ", "t", "=", "outputs", "[", "\"target\"", "]", "[", "idx", "]", ".", "squeeze", "(", ")", "\n", "p", "=", "outputs", "[", "\"pred\"", "]", "[", "idx", "]", ".", "squeeze", "(", ")", "\n", "f", "=", "outputs", "[", "\"Filename\"", "]", "[", "idx", "]", "\n", "g", "=", "outputs", "[", "\"Genre\"", "]", "[", "idx", "]", "\n", "s", "=", "outputs", "[", "\"Time signature\"", "]", "[", "idx", "]", "\n", "\n", "beat_scores", ",", "downbeat_scores", "=", "evaluate", "(", "p", ",", "t", ",", "self", ".", "hparams", ".", "target_sample_rate", ")", "\n", "\n", "songs", ".", "append", "(", "{", "\n", "\"Filename\"", ":", "f", ",", "\n", "\"Genre\"", ":", "g", ",", "\n", "\"Time signature\"", ":", "s", ",", "\n", "\"Beat F-measure\"", ":", "beat_scores", "[", "'F-measure'", "]", ",", "\n", "\"Downbeat F-measure\"", ":", "downbeat_scores", "[", "'F-measure'", "]", ",", "\n", "#\"(DBN) Beat F-measure\" : dbn_beat_scores['F-measure'],", "\n", "#\"(DBN) Downbeat F-measure\" : dbn_downbeat_scores['F-measure']", "\n", "}", ")", "\n", "\n", "beat_f1_scores", ".", "append", "(", "beat_scores", "[", "'F-measure'", "]", ")", "\n", "downbeat_f1_scores", ".", "append", "(", "downbeat_scores", "[", "'F-measure'", "]", ")", "\n", "#dbn_beat_f1_scores.append(dbn_beat_scores['F-measure'])", "\n", "#dbn_downbeat_f1_scores.append(dbn_downbeat_scores['F-measure'])", "\n", "\n", "", "beat_f_measure", "=", "np", ".", "mean", "(", "beat_f1_scores", ")", "\n", "downbeat_f_measure", "=", "np", ".", "mean", "(", "downbeat_f1_scores", ")", "\n", "self", ".", "log", "(", "'val_loss/Beat F-measure'", ",", "torch", ".", "tensor", "(", "beat_f_measure", ")", ")", "\n", "self", ".", "log", "(", "'val_loss/Downbeat F-measure'", ",", "torch", ".", "tensor", "(", "downbeat_f_measure", ")", ")", "\n", "self", ".", "log", "(", "'val_loss/Joint F-measure'", ",", "torch", ".", "tensor", "(", "np", ".", "mean", "(", "[", "beat_f_measure", ",", "downbeat_f_measure", "]", ")", ")", ")", "\n", "#self.log('val_loss/(DBN) Beat F-measure', np.mean(dbn_beat_f1_scores))", "\n", "#self.log('val_loss/(DBN) Downbeat F-measure', np.mean(dbn_downbeat_f1_scores))", "\n", "\n", "self", ".", "logger", ".", "experiment", ".", "add_text", "(", "\"perf\"", ",", "\n", "make_table", "(", "songs", ")", ",", "\n", "self", ".", "global_step", ")", "\n", "\n", "# log score histograms plots", "\n", "self", ".", "logger", ".", "experiment", ".", "add_image", "(", "f\"hist/F-measure\"", ",", "\n", "plot_histogram", "(", "songs", ")", ",", "\n", "self", ".", "global_step", ")", "\n", "\n", "for", "idx", ",", "rand_idx", "in", "enumerate", "(", "list", "(", "rand_indices", ")", ")", ":", "\n", "            ", "i", "=", "outputs", "[", "\"input\"", "]", "[", "rand_idx", "]", ".", "squeeze", "(", ")", "\n", "t", "=", "outputs", "[", "\"target\"", "]", "[", "rand_idx", "]", ".", "squeeze", "(", ")", "\n", "p", "=", "outputs", "[", "\"pred\"", "]", "[", "rand_idx", "]", ".", "squeeze", "(", ")", "\n", "f", "=", "outputs", "[", "\"Filename\"", "]", "[", "idx", "]", "\n", "g", "=", "outputs", "[", "\"Genre\"", "]", "[", "idx", "]", "\n", "s", "=", "outputs", "[", "\"Time signature\"", "]", "[", "idx", "]", "\n", "\n", "t_beats", "=", "t", "[", "0", ",", ":", "]", "\n", "t_downbeats", "=", "t", "[", "1", ",", ":", "]", "\n", "p_beats", "=", "p", "[", "0", ",", ":", "]", "\n", "p_downbeats", "=", "p", "[", "1", ",", ":", "]", "\n", "\n", "ref_beats", ",", "est_beats", ",", "est_sm", "=", "find_beats", "(", "t_beats", ".", "numpy", "(", ")", ",", "\n", "p_beats", ".", "numpy", "(", ")", ",", "\n", "beat_type", "=", "\"beat\"", ",", "\n", "sample_rate", "=", "self", ".", "hparams", ".", "target_sample_rate", ")", "\n", "\n", "ref_downbeats", ",", "est_downbeats", ",", "est_downbeat_sm", "=", "find_beats", "(", "t_downbeats", ".", "numpy", "(", ")", ",", "\n", "p_downbeats", ".", "numpy", "(", ")", ",", "\n", "beat_type", "=", "\"downbeat\"", ",", "\n", "sample_rate", "=", "self", ".", "hparams", ".", "target_sample_rate", ")", "\n", "# log audio examples", "\n", "self", ".", "logger", ".", "experiment", ".", "add_audio", "(", "f\"input/{idx}\"", ",", "\n", "i", ",", "self", ".", "global_step", ",", "\n", "sample_rate", "=", "self", ".", "hparams", ".", "audio_sample_rate", ")", "\n", "\n", "# log beats plots", "\n", "self", ".", "logger", ".", "experiment", ".", "add_image", "(", "f\"act/{idx}\"", ",", "\n", "plot_activations", "(", "ref_beats", ",", "\n", "est_beats", ",", "\n", "est_sm", ",", "\n", "self", ".", "hparams", ".", "target_sample_rate", ",", "\n", "ref_downbeats", "=", "ref_downbeats", ",", "\n", "est_downbeats", "=", "est_downbeats", ",", "\n", "est_downbeats_sm", "=", "est_downbeat_sm", ",", "\n", "song_name", "=", "f", ")", ",", "\n", "self", ".", "global_step", ")", "\n", "\n", "if", "self", ".", "hparams", ".", "save_dir", "is", "not", "None", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "hparams", ".", "save_dir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "self", ".", "hparams", ".", "save_dir", ")", "\n", "\n", "", "input_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "hparams", ".", "save_dir", ",", "f\"{idx}-input-{int(prm[0]):1d}-{prm[1]:0.2f}.wav\"", ")", "\n", "target_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "hparams", ".", "save_dir", ",", "f\"{idx}-target-{int(prm[0]):1d}-{prm[1]:0.2f}.wav\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "input_filename", ")", ":", "\n", "                    ", "torchaudio", ".", "save", "(", "input_filename", ",", "\n", "torch", ".", "tensor", "(", "i", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "float", "(", ")", ",", "\n", "sample_rate", "=", "self", ".", "hparams", ".", "audio_sample_rate", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "target_filename", ")", ":", "\n", "                    ", "torchaudio", ".", "save", "(", "target_filename", ",", "\n", "torch", ".", "tensor", "(", "t", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "float", "(", ")", ",", "\n", "sample_rate", "=", "self", ".", "hparams", ".", "audio_sample_rate", ")", "\n", "\n", "", "torchaudio", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "hparams", ".", "save_dir", ",", "\n", "f\"{idx}-pred-{self.hparams.train_loss}-{int(prm[0]):1d}-{prm[1]:0.2f}.wav\"", ")", ",", "\n", "torch", ".", "tensor", "(", "p", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "float", "(", ")", ",", "\n", "sample_rate", "=", "self", ".", "hparams", ".", "audio_sample_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.base.Base.test_step": [[306, 309], ["base.Base.validation_step"], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.base.Base.validation_step"], ["", "", "", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "return", "self", ".", "validation_step", "(", "batch", ",", "batch_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.base.Base.test_epoch_end": [[310, 313], ["base.Base.validation_epoch_end"], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.base.Base.validation_epoch_end"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "test_epoch_end", "(", "self", ",", "test_step_outputs", ")", ":", "\n", "        ", "return", "self", ".", "validation_epoch_end", "(", "test_step_outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.base.Base.configure_optimizers": [[314, 329], ["torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "base.Base.parameters"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "hparams", ".", "lr", ")", "\n", "#lr_scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, ", "\n", "#                                                          patience=self.hparams.patience, ", "\n", "#                                                          verbose=True,", "\n", "#                                                          mode='max')", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "\n", "step_size", "=", "10", ",", "\n", "gamma", "=", "0.5", ",", "\n", "verbose", "=", "True", ")", "\n", "return", "{", "\n", "'optimizer'", ":", "optimizer", ",", "\n", "'lr_scheduler'", ":", "lr_scheduler", ",", "\n", "'monitor'", ":", "'val_loss/Joint F-measure'", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.base.Base.add_model_specific_args": [[332, 342], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_model_specific_args", "(", "parent_parser", ")", ":", "\n", "        ", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ",", "add_help", "=", "False", ")", "\n", "# --- training related ---", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-2", ")", "\n", "# --- vadliation related ---", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--num_examples'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "\n", "return", "parser", "", "", "", ""]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.eval.find_beats": [[6, 70], ["numpy.max", "numpy.squeeze", "scipy.signal.find_peaks_cwt.astype", "float", "float", "scipy.signal.savgol_filter", "numpy.abs", "scipy.signal.find_peaks", "numpy.argwhere().astype", "scipy.signal.cheby1", "scipy.signal.sosfilt", "scipy.signal.find_peaks_cwt", "RuntimeError", "numpy.arange", "numpy.argwhere"], "function", ["None"], ["def", "find_beats", "(", "t", ",", "p", ",", "\n", "smoothing", "=", "127", ",", "\n", "threshold", "=", "0.5", ",", "\n", "distance", "=", "None", ",", "\n", "sample_rate", "=", "44100", ",", "\n", "beat_type", "=", "\"beat\"", ",", "\n", "filter_type", "=", "\"none\"", ",", "\n", "peak_type", "=", "\"simple\"", ")", ":", "\n", "# 15, 2", "\n", "\n", "# t is ground truth beats", "\n", "# p is predicted beats ", "\n", "# 0 - no beat", "\n", "# 1 - beat", "\n", "\n", "    ", "N", "=", "p", ".", "shape", "[", "-", "1", "]", "\n", "\n", "if", "filter_type", "==", "\"savgol\"", ":", "\n", "# apply smoothing with savgol filter", "\n", "        ", "p", "=", "scipy", ".", "signal", ".", "savgol_filter", "(", "p", ",", "smoothing", ",", "2", ")", "\n", "", "elif", "filter_type", "==", "\"cheby\"", ":", "\n", "        ", "sos", "=", "scipy", ".", "signal", ".", "cheby1", "(", "10", ",", "\n", "1", ",", "\n", "45", ",", "\n", "btype", "=", "'lowpass'", ",", "\n", "fs", "=", "sample_rate", ",", "\n", "output", "=", "'sos'", ")", "\n", "p", "=", "scipy", ".", "signal", ".", "sosfilt", "(", "sos", ",", "p", ")", "\n", "\n", "# normalize the smoothed signal between 0.0 and 1.0", "\n", "", "p", "/=", "np", ".", "max", "(", "np", ".", "abs", "(", "p", ")", ")", "\n", "\n", "if", "peak_type", "==", "\"simple\"", ":", "\n", "# by default, we assume that the min distance between beats is fs/4", "\n", "# this allows for at max, 4 BPS, which corresponds to 240 BPM ", "\n", "# for downbeats, we assume max of 1 downBPS", "\n", "        ", "if", "beat_type", "==", "\"beat\"", ":", "\n", "            ", "if", "distance", "is", "None", ":", "\n", "                ", "distance", "=", "sample_rate", "/", "4", "\n", "", "", "elif", "beat_type", "==", "\"downbeat\"", ":", "\n", "            ", "if", "distance", "is", "None", ":", "\n", "                ", "distance", "=", "sample_rate", "/", "2", "\n", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Invalid beat_type: `{beat_type}`.\"", ")", "\n", "\n", "# apply simple peak picking", "\n", "", "est_beats", ",", "heights", "=", "scipy", ".", "signal", ".", "find_peaks", "(", "p", ",", "height", "=", "threshold", ",", "distance", "=", "distance", ")", "\n", "\n", "", "elif", "peak_type", "==", "\"cwt\"", ":", "\n", "# use wavelets", "\n", "        ", "est_beats", "=", "scipy", ".", "signal", ".", "find_peaks_cwt", "(", "p", ",", "np", ".", "arange", "(", "1", ",", "50", ")", ")", "\n", "\n", "# compute the locations of ground truth beats", "\n", "", "ref_beats", "=", "np", ".", "squeeze", "(", "np", ".", "argwhere", "(", "t", "==", "1", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "est_beats", "=", "est_beats", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# compute beat points (samples) to seconds", "\n", "ref_beats", "/=", "float", "(", "sample_rate", ")", "\n", "est_beats", "/=", "float", "(", "sample_rate", ")", "\n", "\n", "# store the smoothed ODF", "\n", "est_sm", "=", "p", "\n", "\n", "return", "ref_beats", ",", "est_beats", ",", "est_sm", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.eval.evaluate": [[71, 120], ["eval.find_beats", "eval.find_beats", "mir_eval.beat.trim_beats", "mir_eval.beat.trim_beats", "mir_eval.beat.evaluate", "mir_eval.beat.trim_beats", "mir_eval.beat.trim_beats", "mir_eval.beat.evaluate", "t_beats.numpy", "p_beats.numpy", "t_downbeats.numpy", "p_downbeats.numpy", "madmom.features.beats.DBNBeatTrackingProcessor", "madmom.features.beats.DBNBeatTrackingProcessor", "pred[].clamp().view().numpy", "pred[].clamp().view().numpy", "madmom.features.beats.DBNBeatTrackingProcessor.process_offline", "madmom.features.beats.DBNBeatTrackingProcessor.process_offline", "pred[].clamp().view", "pred[].clamp().view", "pred[].clamp", "pred[].clamp"], "function", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.eval.find_beats", "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.eval.find_beats", "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.eval.evaluate", "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.eval.evaluate"], ["", "def", "evaluate", "(", "pred", ",", "target", ",", "target_sample_rate", ",", "use_dbn", "=", "False", ")", ":", "\n", "\n", "    ", "t_beats", "=", "target", "[", "0", ",", ":", "]", "\n", "t_downbeats", "=", "target", "[", "1", ",", ":", "]", "\n", "p_beats", "=", "pred", "[", "0", ",", ":", "]", "\n", "p_downbeats", "=", "pred", "[", "1", ",", ":", "]", "\n", "\n", "ref_beats", ",", "est_beats", ",", "_", "=", "find_beats", "(", "t_beats", ".", "numpy", "(", ")", ",", "\n", "p_beats", ".", "numpy", "(", ")", ",", "\n", "beat_type", "=", "\"beat\"", ",", "\n", "sample_rate", "=", "target_sample_rate", ")", "\n", "\n", "ref_downbeats", ",", "est_downbeats", ",", "_", "=", "find_beats", "(", "t_downbeats", ".", "numpy", "(", ")", ",", "\n", "p_downbeats", ".", "numpy", "(", ")", ",", "\n", "beat_type", "=", "\"downbeat\"", ",", "\n", "sample_rate", "=", "target_sample_rate", ")", "\n", "\n", "if", "use_dbn", ":", "\n", "        ", "beat_dbn", "=", "madmom", ".", "features", ".", "beats", ".", "DBNBeatTrackingProcessor", "(", "\n", "min_bpm", "=", "55", ",", "\n", "max_bpm", "=", "215", ",", "\n", "transition_lambda", "=", "100", ",", "\n", "fps", "=", "target_sample_rate", ",", "\n", "online", "=", "False", ")", "\n", "\n", "downbeat_dbn", "=", "madmom", ".", "features", ".", "beats", ".", "DBNBeatTrackingProcessor", "(", "\n", "min_bpm", "=", "10", ",", "\n", "max_bpm", "=", "75", ",", "\n", "transition_lambda", "=", "100", ",", "\n", "fps", "=", "target_sample_rate", ",", "\n", "online", "=", "False", ")", "\n", "\n", "beat_pred", "=", "pred", "[", "0", ",", ":", "]", ".", "clamp", "(", "1e-8", ",", "1", "-", "1e-8", ")", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", "\n", "downbeat_pred", "=", "pred", "[", "1", ",", ":", "]", ".", "clamp", "(", "1e-8", ",", "1", "-", "1e-8", ")", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", "\n", "\n", "est_beats", "=", "beat_dbn", ".", "process_offline", "(", "beat_pred", ")", "\n", "est_downbeats", "=", "downbeat_dbn", ".", "process_offline", "(", "downbeat_pred", ")", "\n", "\n", "# evaluate beats - trim beats before 5 seconds.", "\n", "", "ref_beats", "=", "mir_eval", ".", "beat", ".", "trim_beats", "(", "ref_beats", ")", "\n", "est_beats", "=", "mir_eval", ".", "beat", ".", "trim_beats", "(", "est_beats", ")", "\n", "beat_scores", "=", "mir_eval", ".", "beat", ".", "evaluate", "(", "ref_beats", ",", "est_beats", ")", "\n", "\n", "# evaluate downbeats - trim beats before 5 seconds.", "\n", "ref_downbeats", "=", "mir_eval", ".", "beat", ".", "trim_beats", "(", "ref_downbeats", ")", "\n", "est_downbeats", "=", "mir_eval", ".", "beat", ".", "trim_beats", "(", "est_downbeats", ")", "\n", "downbeat_scores", "=", "mir_eval", ".", "beat", ".", "evaluate", "(", "ref_downbeats", ",", "est_downbeats", ")", "\n", "\n", "return", "beat_scores", ",", "downbeat_scores", "", "", ""]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.dstcn.dsTCNBlock.__init__": [[28, 71], ["super().__init__", "torch.nn.Conv1d", "dstcn.get_activation", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.filter.FIRFilter.__init__", "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.dstcn.get_activation"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_ch", ",", "\n", "out_ch", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "norm_type", "=", "None", ",", "\n", "act_type", "=", "\"PReLU\"", ")", ":", "\n", "        ", "super", "(", "dsTCNBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_ch", "=", "in_ch", "\n", "self", ".", "out_ch", "=", "out_ch", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "norm_type", "=", "norm_type", "\n", "\n", "pad_value", "=", "(", "(", "kernel_size", "-", "1", ")", "*", "dilation", ")", "//", "2", "\n", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "in_ch", ",", "\n", "out_ch", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "pad_value", ")", "\n", "self", ".", "act1", "=", "get_activation", "(", "act_type", ",", "out_ch", ")", "\n", "\n", "if", "norm_type", "==", "\"BatchNorm\"", ":", "\n", "            ", "self", ".", "norm1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "out_ch", ")", "\n", "#self.norm2 = torch.nn.BatchNorm1d(out_ch)", "\n", "self", ".", "res_norm", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "out_ch", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm1", "=", "None", "\n", "self", ".", "res_norm", "=", "None", "\n", "\n", "#self.conv2 = torch.nn.Conv1d(out_ch, ", "\n", "#                             out_ch, ", "\n", "#                             kernel_size=1, ", "\n", "#                             stride=1)", "\n", "#self.act2 = get_activation(act_type, out_ch)", "\n", "\n", "", "self", ".", "res_conv", "=", "torch", ".", "nn", ".", "Conv1d", "(", "in_ch", ",", "\n", "out_ch", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.dstcn.dsTCNBlock.forward": [[72, 93], ["dstcn.dsTCNBlock.conv1", "dstcn.dsTCNBlock.act1", "dstcn.dsTCNBlock.res_conv", "dstcn.dsTCNBlock.norm1", "dstcn.dsTCNBlock.res_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_res", "=", "x", "# store input for later", "\n", "\n", "# -- first section --", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "norm1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "act1", "(", "x", ")", "\n", "\n", "# -- second section --", "\n", "#x = self.conv2(x)", "\n", "#if self.norm_type is not None:", "\n", "#    x = self.norm2(x)", "\n", "#x = self.act2(x)", "\n", "\n", "# -- residual connection --", "\n", "x_res", "=", "self", ".", "res_conv", "(", "x_res", ")", "\n", "if", "self", ".", "res_norm", "is", "not", "None", ":", "\n", "            ", "x_res", "=", "self", ".", "res_norm", "(", "x_res", ")", "\n", "\n", "", "return", "x", "+", "x_res", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.dstcn.dsTCNModel.__init__": [[112, 150], ["wavebeat.base.Base.__init__", "dstcn.dsTCNModel.save_hyperparameters", "torch.nn.ModuleList", "range", "torch.nn.Conv1d", "dstcn.dsTCNModel.blocks.append", "dstcn.dsTCNBlock"], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.filter.FIRFilter.__init__"], ["def", "__init__", "(", "self", ",", "\n", "ninputs", "=", "1", ",", "\n", "noutputs", "=", "2", ",", "\n", "nblocks", "=", "10", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "dilation_growth", "=", "8", ",", "\n", "channel_growth", "=", "1", ",", "\n", "channel_width", "=", "32", ",", "\n", "stack_size", "=", "4", ",", "\n", "grouped", "=", "False", ",", "\n", "causal", "=", "False", ",", "\n", "skip_connections", "=", "False", ",", "\n", "norm_type", "=", "'BatchNorm'", ",", "\n", "act_type", "=", "'PReLU'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "dsTCNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n", "self", ".", "blocks", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "n", "in", "range", "(", "nblocks", ")", ":", "\n", "            ", "in_ch", "=", "ninputs", "if", "n", "==", "0", "else", "out_ch", "\n", "out_ch", "=", "channel_width", "if", "n", "==", "0", "else", "in_ch", "+", "channel_growth", "\n", "dilation", "=", "dilation_growth", "**", "(", "n", "%", "stack_size", ")", "\n", "\n", "self", ".", "blocks", ".", "append", "(", "dsTCNBlock", "(", "\n", "in_ch", ",", "\n", "out_ch", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "dilation", ",", "\n", "norm_type", ",", "\n", "act_type", "\n", ")", ")", "\n", "\n", "", "self", ".", "output", "=", "torch", ".", "nn", ".", "Conv1d", "(", "out_ch", ",", "\n", "noutputs", ",", "\n", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.dstcn.dsTCNModel.forward": [[151, 160], ["dstcn.dsTCNModel.output", "block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "output", "(", "x", ")", "\n", "#x = torch.sigmoid(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.dstcn.dsTCNModel.compute_receptive_field": [[161, 168], ["range"], "methods", ["None"], ["", "def", "compute_receptive_field", "(", "self", ")", ":", "\n", "        ", "\"\"\" Compute the receptive field in samples.\"\"\"", "\n", "rf", "=", "0", "\n", "for", "n", "in", "range", "(", "self", ".", "hparams", ".", "nblocks", ")", ":", "\n", "            ", "rf", "+=", "(", "self", ".", "hparams", ".", "kernel_size", "-", "1", ")", "*", "(", "self", ".", "hparams", ".", "nblocks", "*", "self", ".", "hparams", ".", "stride", ")", "\n", "", "return", "rf", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.dstcn.dsTCNModel.add_model_specific_args": [[170, 192], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_model_specific_args", "(", "parent_parser", ")", ":", "\n", "        ", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ",", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-2", ")", "\n", "parser", ".", "add_argument", "(", "'--patience'", ",", "type", "=", "int", ",", "default", "=", "40", ")", "\n", "# --- model related ---", "\n", "parser", ".", "add_argument", "(", "'--ninputs'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--noutputs'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--nblocks'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--kernel_size'", ",", "type", "=", "int", ",", "default", "=", "15", ")", "\n", "parser", ".", "add_argument", "(", "'--stride'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--dilation_growth'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--channel_growth'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--channel_width'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--stack_size'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--grouped'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--causal'", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "'--skip_connections'", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_type'", ",", "type", "=", "str", ",", "default", "=", "'BatchNorm'", ")", "\n", "parser", ".", "add_argument", "(", "'--act_type'", ",", "type", "=", "str", ",", "default", "=", "'PReLU'", ")", "\n", "\n", "return", "parser", "", "", "", ""]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.dstcn.get_activation": [[6, 26], ["torch.nn.PReLU", "torch.nn.ReLU", "torch.nn.SELU", "torch.nn.ELU"], "function", ["None"], ["def", "get_activation", "(", "act_type", ",", "\n", "ch", "=", "None", ")", ":", "\n", "    ", "\"\"\" Helper function to construct activation functions by a string.\n\n    Args:\n        act_type (str): One of 'ReLU', 'PReLU', 'SELU', 'ELU'.\n        ch (int, optional): Number of channels to use for PReLU.\n    \n    Returns:\n        torch.nn.Module activation function.\n    \"\"\"", "\n", "\n", "if", "act_type", "==", "\"PReLU\"", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "PReLU", "(", "ch", ")", "\n", "", "elif", "act_type", "==", "\"ReLU\"", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "act_type", "==", "\"SELU\"", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "SELU", "(", ")", "\n", "", "elif", "act_type", "==", "\"ELU\"", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "ELU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.data.DownbeatDataset.__init__": [[17, 150], ["int", "glob.glob", "random.shuffle", "os.path.join", "len", "glob.glob", "int", "print", "print", "os.path.basename().replace", "tqdm.tqdm.tqdm", "ValueError", "os.path.join", "int", "int", "data.DownbeatDataset.annot_files.append", "zip", "data.DownbeatDataset.load_data", "data.DownbeatDataset.data.append", "len", "int", "os.path.basename", "os.path.join", "os.path.basename", "data.DownbeatDataset.annot_files.append", "len", "audio.half.half.half", "target.half.half.half", "len", "len", "len", "os.path.dirname", "os.path.join", "os.path.basename", "os.path.join", "data.DownbeatDataset.annot_files.append", "len", "os.path.dirname", "os.path.basename", "os.path.join", "data.DownbeatDataset.annot_files.append", "os.path.dirname", "os.path.join", "data.DownbeatDataset.annot_files.append", "os.path.join", "data.DownbeatDataset.annot_files.append", "glob.glob"], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.data.DownbeatDataset.load_data"], ["def", "__init__", "(", "self", ",", "\n", "audio_dir", ",", "\n", "annot_dir", ",", "\n", "audio_sample_rate", "=", "44100", ",", "\n", "target_factor", "=", "256", ",", "\n", "dataset", "=", "\"ballroom\"", ",", "\n", "subset", "=", "\"train\"", ",", "\n", "length", "=", "16384", ",", "\n", "preload", "=", "False", ",", "\n", "half", "=", "True", ",", "\n", "fraction", "=", "1.0", ",", "\n", "augment", "=", "False", ",", "\n", "dry_run", "=", "False", ",", "\n", "pad_mode", "=", "'constant'", ",", "\n", "examples_per_epoch", "=", "1000", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            audio_dir (str): Path to the root directory containing the audio (.wav) files.\n            annot_dir (str): Path to the root directory containing the annotation (.beats) files.\n            audio_sample_rate (float, optional): Sample rate of the audio files. (Default: 44100)\n            target_factor (float, optional): Sample rate of the audio files. (Default: 256)\n            subset (str, optional): Pull data either from \"train\", \"val\", \"test\", or \"full-train\", \"full-val\" subsets. (Default: \"train\")\n            dataset (str, optional): Name of the dataset to be loaded \"ballroom\", \"beatles\", \"hainsworth\", \"rwc_popular\", \"gtzan\", \"smc\". (Default: \"ballroom\")\n            length (int, optional): Number of samples in the returned examples. (Default: 40)\n            preload (bool, optional): Read in all data into RAM during init. (Default: False)\n            half (bool, optional): Store the float32 audio as float16. (Default: True)\n            fraction (float, optional): Fraction of the data to load from the subset. (Default: 1.0)\n            augment (bool, optional): Apply random data augmentations to input audio. (Default: False)\n            dry_run (bool, optional): Train on a single example. (Default: False)\n            pad_mode (str, optional): Padding type for inputs 'constant', 'reflect', 'replicate' or 'circular'. (Default: 'constant')\n            examples_per_epoch (int, optional): Number of examples to sample from the dataset per epoch. (Default: 1000)\n\n        Notes:\n            - The SMC dataset contains only beats (no downbeats), so it should be used only for beat evaluation.\n        \"\"\"", "\n", "self", ".", "audio_dir", "=", "audio_dir", "\n", "self", ".", "annot_dir", "=", "annot_dir", "\n", "self", ".", "audio_sample_rate", "=", "audio_sample_rate", "\n", "self", ".", "target_factor", "=", "target_factor", "\n", "self", ".", "target_sample_rate", "=", "audio_sample_rate", "/", "target_factor", "\n", "self", ".", "subset", "=", "subset", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "preload", "=", "preload", "\n", "self", ".", "half", "=", "half", "\n", "self", ".", "fraction", "=", "fraction", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "dry_run", "=", "dry_run", "\n", "self", ".", "pad_mode", "=", "pad_mode", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "examples_per_epoch", "=", "examples_per_epoch", "\n", "\n", "self", ".", "target_length", "=", "int", "(", "self", ".", "length", "/", "self", ".", "target_factor", ")", "\n", "#print(f\"Audio length: {self.length}\")", "\n", "#print(f\"Target length: {self.target_length}\")", "\n", "\n", "# first get all of the audio files", "\n", "if", "self", ".", "dataset", "in", "[", "\"beatles\"", ",", "\"rwc_popular\"", "]", ":", "\n", "            ", "file_ext", "=", "\"*L+R.wav\"", "\n", "", "elif", "self", ".", "dataset", "in", "[", "\"ballroom\"", ",", "\"hainsworth\"", ",", "\"gtzan\"", ",", "\"smc\"", "]", ":", "\n", "            ", "file_ext", "=", "\"*.wav\"", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid dataset: {self.dataset}\"", ")", "\n", "\n", "", "self", ".", "audio_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "audio_dir", ",", "\"**\"", ",", "file_ext", ")", ")", "\n", "if", "len", "(", "self", ".", "audio_files", ")", "==", "0", ":", "# try from the root audio dir", "\n", "            ", "self", ".", "audio_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "audio_dir", ",", "file_ext", ")", ")", "\n", "\n", "", "random", ".", "shuffle", "(", "self", ".", "audio_files", ")", "# shuffle them", "\n", "\n", "if", "self", ".", "subset", "==", "\"train\"", ":", "\n", "            ", "start", "=", "0", "\n", "stop", "=", "int", "(", "len", "(", "self", ".", "audio_files", ")", "*", "0.8", ")", "\n", "", "elif", "self", ".", "subset", "==", "\"val\"", ":", "\n", "            ", "start", "=", "int", "(", "len", "(", "self", ".", "audio_files", ")", "*", "0.8", ")", "\n", "stop", "=", "int", "(", "len", "(", "self", ".", "audio_files", ")", "*", "0.9", ")", "\n", "", "elif", "self", ".", "subset", "==", "\"test\"", ":", "\n", "            ", "start", "=", "int", "(", "len", "(", "self", ".", "audio_files", ")", "*", "0.9", ")", "\n", "stop", "=", "None", "\n", "", "elif", "self", ".", "subset", "in", "[", "\"full-train\"", ",", "\"full-val\"", "]", ":", "\n", "            ", "start", "=", "0", "\n", "stop", "=", "None", "\n", "\n", "# select one file for the dry run", "\n", "", "if", "self", ".", "dry_run", ":", "\n", "            ", "self", ".", "audio_files", "=", "[", "self", ".", "audio_files", "[", "0", "]", "]", "*", "50", "\n", "print", "(", "f\"Selected 1 file for dry run.\"", ")", "\n", "", "else", ":", "\n", "# now pick out subset of audio files", "\n", "            ", "self", ".", "audio_files", "=", "self", ".", "audio_files", "[", "start", ":", "stop", "]", "\n", "print", "(", "f\"Selected {len(self.audio_files)} files for {self.subset} set from {self.dataset} dataset.\"", ")", "\n", "\n", "", "self", ".", "annot_files", "=", "[", "]", "\n", "for", "audio_file", "in", "self", ".", "audio_files", ":", "\n", "# find the corresponding annot file", "\n", "            ", "if", "self", ".", "dataset", "in", "[", "\"rwc_popular\"", ",", "\"beatles\"", "]", ":", "\n", "                ", "replace", "=", "\"_L+R.wav\"", "\n", "", "elif", "self", ".", "dataset", "in", "[", "\"ballroom\"", ",", "\"hainsworth\"", ",", "\"gtzan\"", ",", "\"smc\"", "]", ":", "\n", "                ", "replace", "=", "\".wav\"", "\n", "\n", "", "filename", "=", "os", ".", "path", ".", "basename", "(", "audio_file", ")", ".", "replace", "(", "replace", ",", "\"\"", ")", "\n", "\n", "if", "self", ".", "dataset", "==", "\"ballroom\"", ":", "\n", "                ", "self", ".", "annot_files", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "annot_dir", ",", "f\"{filename}.beats\"", ")", ")", "\n", "", "elif", "self", ".", "dataset", "==", "\"hainsworth\"", ":", "\n", "                ", "genre_dir", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "audio_file", ")", ")", "\n", "self", ".", "annot_files", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "annot_dir", ",", "genre_dir", ",", "f\"{filename}.txt\"", ")", ")", "\n", "", "elif", "self", ".", "dataset", "==", "\"beatles\"", ":", "\n", "                ", "album_dir", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "audio_file", ")", ")", "\n", "annot_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "annot_dir", ",", "album_dir", ",", "f\"{filename}.txt\"", ")", "\n", "self", ".", "annot_files", ".", "append", "(", "annot_file", ")", "\n", "", "elif", "self", ".", "dataset", "==", "\"rwc_popular\"", ":", "\n", "                ", "album_dir", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "audio_file", ")", ")", "\n", "annot_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "annot_dir", ",", "album_dir", ",", "f\"{filename}.BEAT.TXT\"", ")", "\n", "self", ".", "annot_files", ".", "append", "(", "annot_file", ")", "\n", "", "elif", "self", ".", "dataset", "==", "\"gtzan\"", ":", "\n", "                ", "annot_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "annot_dir", ",", "f\"{filename}.wav.txt\"", ")", "\n", "self", ".", "annot_files", ".", "append", "(", "annot_file", ")", "\n", "", "elif", "self", ".", "dataset", "==", "\"smc\"", ":", "\n", "                ", "annot_filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "annot_dir", ",", "f\"{filename}*.txt\"", ")", "\n", "annot_file", "=", "glob", ".", "glob", "(", "annot_filepath", ")", "[", "0", "]", "\n", "self", ".", "annot_files", ".", "append", "(", "annot_file", ")", "\n", "\n", "", "", "self", ".", "data", "=", "[", "]", "# when preloading store audio data and metadata", "\n", "if", "self", ".", "preload", ":", "\n", "            ", "for", "audio_filename", ",", "annot_filename", "in", "tqdm", "(", "zip", "(", "self", ".", "audio_files", ",", "self", ".", "annot_files", ")", ",", "\n", "total", "=", "len", "(", "self", ".", "audio_files", ")", ",", "\n", "ncols", "=", "80", ")", ":", "\n", "                    ", "audio", ",", "target", ",", "metadata", "=", "self", ".", "load_data", "(", "audio_filename", ",", "annot_filename", ")", "\n", "if", "self", ".", "half", ":", "\n", "                        ", "audio", "=", "audio", ".", "half", "(", ")", "\n", "target", "=", "target", ".", "half", "(", ")", "\n", "", "self", ".", "data", ".", "append", "(", "(", "audio", ",", "target", ",", "metadata", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.data.DownbeatDataset.__len__": [[151, 157], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "subset", "in", "[", "\"test\"", ",", "\"val\"", ",", "\"full-val\"", ",", "\"full-test\"", "]", ":", "\n", "            ", "length", "=", "len", "(", "self", ".", "audio_files", ")", "\n", "", "else", ":", "\n", "            ", "length", "=", "self", ".", "examples_per_epoch", "\n", "", "return", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.data.DownbeatDataset.__getitem__": [[158, 211], ["torch.nn.functional.pad.float", "torch.nn.functional.pad.float", "data.DownbeatDataset.load_data", "data.DownbeatDataset.apply_augmentations", "numpy.random.randint", "int", "int", "torch.nn.functional.pad", "torch.nn.functional.pad", "RuntimeError", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.data.DownbeatDataset.load_data", "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.data.DownbeatDataset.apply_augmentations"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "if", "self", ".", "preload", ":", "\n", "            ", "audio", ",", "target", ",", "metadata", "=", "self", ".", "data", "[", "idx", "%", "len", "(", "self", ".", "audio_files", ")", "]", "\n", "", "else", ":", "\n", "# get metadata of example", "\n", "            ", "audio_filename", "=", "self", ".", "audio_files", "[", "idx", "%", "len", "(", "self", ".", "audio_files", ")", "]", "\n", "annot_filename", "=", "self", ".", "annot_files", "[", "idx", "%", "len", "(", "self", ".", "audio_files", ")", "]", "\n", "audio", ",", "target", ",", "metadata", "=", "self", ".", "load_data", "(", "audio_filename", ",", "annot_filename", ")", "\n", "\n", "# do all processing in float32 not float16", "\n", "", "audio", "=", "audio", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "\n", "# apply augmentations ", "\n", "if", "self", ".", "augment", ":", "\n", "            ", "audio", ",", "target", "=", "self", ".", "apply_augmentations", "(", "audio", ",", "target", ")", "\n", "\n", "", "N_audio", "=", "audio", ".", "shape", "[", "-", "1", "]", "# audio samples", "\n", "N_target", "=", "target", ".", "shape", "[", "-", "1", "]", "# target samples", "\n", "\n", "# random crop of the audio and target if larger than desired", "\n", "if", "(", "N_audio", ">", "self", ".", "length", "or", "N_target", ">", "self", ".", "target_length", ")", "and", "self", ".", "subset", "not", "in", "[", "'val'", ",", "'test'", ",", "'full-val'", "]", ":", "\n", "            ", "audio_start", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "N_audio", "-", "self", ".", "length", "-", "1", ")", "\n", "audio_stop", "=", "audio_start", "+", "self", ".", "length", "\n", "target_start", "=", "int", "(", "audio_start", "/", "self", ".", "target_factor", ")", "\n", "target_stop", "=", "int", "(", "audio_stop", "/", "self", ".", "target_factor", ")", "\n", "audio", "=", "audio", "[", ":", ",", "audio_start", ":", "audio_stop", "]", "\n", "target", "=", "target", "[", ":", ",", "target_start", ":", "target_stop", "]", "\n", "\n", "# pad the audio and target is shorter than desired", "\n", "", "if", "audio", ".", "shape", "[", "-", "1", "]", "<", "self", ".", "length", "and", "self", ".", "subset", "not", "in", "[", "'val'", ",", "'test'", ",", "'full-val'", "]", ":", "\n", "            ", "pad_size", "=", "self", ".", "length", "-", "audio", ".", "shape", "[", "-", "1", "]", "\n", "padl", "=", "pad_size", "-", "(", "pad_size", "//", "2", ")", "\n", "padr", "=", "pad_size", "//", "2", "\n", "audio", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "audio", ",", "\n", "(", "padl", ",", "padr", ")", ",", "\n", "mode", "=", "self", ".", "pad_mode", ")", "\n", "", "if", "target", ".", "shape", "[", "-", "1", "]", "<", "self", ".", "target_length", "and", "self", ".", "subset", "not", "in", "[", "'val'", ",", "'test'", ",", "'full-val'", "]", ":", "\n", "            ", "pad_size", "=", "self", ".", "target_length", "-", "target", ".", "shape", "[", "-", "1", "]", "\n", "padl", "=", "pad_size", "-", "(", "pad_size", "//", "2", ")", "\n", "padr", "=", "pad_size", "//", "2", "\n", "target", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "target", ",", "\n", "(", "padl", ",", "padr", ")", ",", "\n", "mode", "=", "self", ".", "pad_mode", ")", "\n", "\n", "", "if", "self", ".", "subset", "in", "[", "\"train\"", ",", "\"full-train\"", "]", ":", "\n", "            ", "return", "audio", ",", "target", "\n", "", "elif", "self", ".", "subset", "in", "[", "\"val\"", ",", "\"test\"", ",", "\"full-val\"", "]", ":", "\n", "# this will only work with batch size = 1", "\n", "            ", "return", "audio", ",", "target", ",", "metadata", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Invalid subset: `{self.subset}`\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.data.DownbeatDataset.load_data": [[212, 260], ["torchaudio.load", "julius.resample_frac.float", "julius.resample_frac.abs().max", "data.DownbeatDataset.load_annot", "os.path.basename", "torch.zeros", "numpy.array", "numpy.array", "beat_samples.astype.astype.astype", "downbeat_samples.astype.astype.astype", "julius.resample_frac", "os.path.dirname", "numpy.array", "numpy.array", "int", "julius.resample_frac.abs"], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.data.DownbeatDataset.load_annot"], ["", "", "def", "load_data", "(", "self", ",", "audio_filename", ",", "annot_filename", ")", ":", "\n", "# first load the audio file", "\n", "        ", "audio", ",", "sr", "=", "torchaudio", ".", "load", "(", "audio_filename", ")", "\n", "audio", "=", "audio", ".", "float", "(", ")", "\n", "\n", "# resample if needed", "\n", "if", "sr", "!=", "self", ".", "audio_sample_rate", ":", "\n", "            ", "audio", "=", "julius", ".", "resample_frac", "(", "audio", ",", "sr", ",", "self", ".", "audio_sample_rate", ")", "\n", "\n", "# normalize all audio inputs -1 to 1", "\n", "", "audio", "/=", "audio", ".", "abs", "(", ")", ".", "max", "(", ")", "\n", "\n", "# now get the annotation information", "\n", "annot", "=", "self", ".", "load_annot", "(", "annot_filename", ")", "\n", "beat_samples", ",", "downbeat_samples", ",", "beat_indices", ",", "time_signature", "=", "annot", "\n", "\n", "# get metadata", "\n", "genre", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "audio_filename", ")", ")", "\n", "\n", "# convert beat_samples to beat_seconds", "\n", "beat_sec", "=", "np", ".", "array", "(", "beat_samples", ")", "/", "self", ".", "audio_sample_rate", "\n", "downbeat_sec", "=", "np", ".", "array", "(", "downbeat_samples", ")", "/", "self", ".", "audio_sample_rate", "\n", "\n", "t", "=", "audio", ".", "shape", "[", "-", "1", "]", "/", "self", ".", "audio_sample_rate", "# audio length in sec", "\n", "N", "=", "int", "(", "t", "*", "self", ".", "target_sample_rate", ")", "+", "1", "# target length in samples", "\n", "target", "=", "torch", ".", "zeros", "(", "2", ",", "N", ")", "\n", "\n", "# now convert from seconds to new sample rate", "\n", "beat_samples", "=", "np", ".", "array", "(", "beat_sec", "*", "self", ".", "target_sample_rate", ")", "\n", "downbeat_samples", "=", "np", ".", "array", "(", "downbeat_sec", "*", "self", ".", "target_sample_rate", ")", "\n", "\n", "# check if there are any beats beyond the file end", "\n", "beat_samples", "=", "beat_samples", "[", "beat_samples", "<", "N", "]", "\n", "downbeat_samples", "=", "downbeat_samples", "[", "downbeat_samples", "<", "N", "]", "\n", "\n", "beat_samples", "=", "beat_samples", ".", "astype", "(", "int", ")", "\n", "downbeat_samples", "=", "downbeat_samples", ".", "astype", "(", "int", ")", "\n", "\n", "target", "[", "0", ",", "beat_samples", "]", "=", "1", "# first channel is beats", "\n", "target", "[", "1", ",", "downbeat_samples", "]", "=", "1", "# second channel is downbeats", "\n", "\n", "metadata", "=", "{", "\n", "\"Filename\"", ":", "audio_filename", ",", "\n", "\"Genre\"", ":", "genre", ",", "\n", "\"Time signature\"", ":", "time_signature", "\n", "}", "\n", "\n", "return", "audio", ",", "target", ",", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.data.DownbeatDataset.load_annot": [[261, 329], ["open", "fp.readlines", "int", "int", "beat_samples.append", "beat_indices.append", "numpy.max", "line.strip.strip.strip", "line.strip.strip.replace", "line.strip.strip.split", "int", "downbeat_samples.append", "numpy.max", "line.strip.strip.strip", "line.strip.strip.replace", "line.strip.strip.replace", "line.strip.strip.split", "float", "numpy.max", "line.strip.strip.strip", "line.strip.strip.split", "float", "line.strip.strip.strip", "line.strip.strip.split", "int", "line.strip.strip.strip", "line.strip.strip.split", "int", "line.strip.strip.strip"], "methods", ["None"], ["", "def", "load_annot", "(", "self", ",", "filename", ")", ":", "\n", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "\n", "", "beat_samples", "=", "[", "]", "# array of samples containing beats", "\n", "downbeat_samples", "=", "[", "]", "# array of samples containing downbeats (1)", "\n", "beat_indices", "=", "[", "]", "# array of beat type one-hot encoded  ", "\n", "time_signature", "=", "None", "# estimated time signature (only 3/4 or 4/4)", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "\"ballroom\"", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", "\n", "line", "=", "line", ".", "replace", "(", "'\\t'", ",", "' '", ")", "\n", "time_sec", ",", "beat", "=", "line", ".", "split", "(", "' '", ")", "\n", "", "elif", "self", ".", "dataset", "==", "\"beatles\"", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", "\n", "line", "=", "line", ".", "replace", "(", "'\\t'", ",", "' '", ")", "\n", "line", "=", "line", ".", "replace", "(", "'  '", ",", "' '", ")", "\n", "time_sec", ",", "beat", "=", "line", ".", "split", "(", "' '", ")", "\n", "", "elif", "self", ".", "dataset", "==", "\"hainsworth\"", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", "\n", "time_sec", ",", "beat", "=", "line", ".", "split", "(", "' '", ")", "\n", "", "elif", "self", ".", "dataset", "==", "\"rwc_popular\"", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", "\n", "line", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "time_sec", "=", "int", "(", "line", "[", "0", "]", ")", "/", "100.0", "\n", "beat", "=", "1", "if", "int", "(", "line", "[", "2", "]", ")", "==", "384", "else", "2", "\n", "", "elif", "self", ".", "dataset", "==", "\"gtzan\"", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", "\n", "time_sec", ",", "beat", "=", "line", ".", "split", "(", "' '", ")", "\n", "", "elif", "self", ".", "dataset", "==", "\"smc\"", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", "\n", "time_sec", "=", "line", "\n", "beat", "=", "1", "\n", "\n", "# convert beat to one-hot", "\n", "", "beat", "=", "int", "(", "beat", ")", "\n", "if", "beat", "==", "1", ":", "\n", "                ", "beat_one_hot", "=", "[", "1", ",", "0", ",", "0", ",", "0", "]", "\n", "", "elif", "beat", "==", "2", ":", "\n", "                ", "beat_one_hot", "=", "[", "0", ",", "1", ",", "0", ",", "0", "]", "\n", "", "elif", "beat", "==", "3", ":", "\n", "                ", "beat_one_hot", "=", "[", "0", ",", "0", ",", "1", ",", "0", "]", "\n", "", "elif", "beat", "==", "4", ":", "\n", "                ", "beat_one_hot", "=", "[", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "\n", "# convert seconds to samples", "\n", "", "beat_time_samples", "=", "int", "(", "float", "(", "time_sec", ")", "*", "(", "self", ".", "audio_sample_rate", ")", ")", "\n", "\n", "beat_samples", ".", "append", "(", "beat_time_samples", ")", "\n", "beat_indices", ".", "append", "(", "beat", ")", "\n", "\n", "if", "beat", "==", "1", ":", "\n", "                ", "downbeat_time_samples", "=", "int", "(", "float", "(", "time_sec", ")", "*", "(", "self", ".", "audio_sample_rate", ")", ")", "\n", "downbeat_samples", ".", "append", "(", "downbeat_time_samples", ")", "\n", "\n", "# guess at the time signature", "\n", "", "", "if", "np", ".", "max", "(", "beat_indices", ")", "==", "2", ":", "\n", "            ", "time_signature", "=", "\"2/4\"", "\n", "", "elif", "np", ".", "max", "(", "beat_indices", ")", "==", "3", ":", "\n", "            ", "time_signature", "=", "\"3/4\"", "\n", "", "elif", "np", ".", "max", "(", "beat_indices", ")", "==", "4", ":", "\n", "            ", "time_signature", "=", "\"4/4\"", "\n", "", "else", ":", "\n", "            ", "time_signature", "=", "\"?\"", "\n", "\n", "", "return", "beat_samples", ",", "downbeat_samples", ",", "beat_indices", ",", "time_signature", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.data.DownbeatDataset.apply_augmentations": [[330, 495], ["torch.tanh.float().abs().max", "numpy.random.rand", "numpy.random.rand", "int", "numpy.random.randint", "numpy.random.rand", "numpy.random.normal", "numpy.clip", "soxbindings.Transformer", "soxbindings.Transformer.build_array", "torch.from_numpy().view", "int", "torch.zeros", "numpy.random.rand", "int", "numpy.random.randint", "numpy.random.choice", "torch.roll", "numpy.random.rand", "int", "torch.logical_and().nonzero", "torch.normal", "torch.normal.long", "torch.normal", "torch.normal.long", "torch.zeros", "numpy.random.rand", "numpy.random.choice", "soxbindings.Transformer", "soxbindings.Transformer.pitch", "soxbindings.Transformer.build_array", "torch.from_numpy().view", "numpy.random.rand", "scipy.signal.butter", "scipy.signal.sosfilt", "torch.from_numpy", "numpy.random.rand", "scipy.signal.butter", "scipy.signal.sosfilt", "torch.from_numpy", "numpy.random.rand", "soxbindings.Transformer", "soxbindings.Transformer.chorus", "soxbindings.Transformer.build_array", "torch.from_numpy().view", "numpy.random.rand", "soxbindings.Transformer", "soxbindings.Transformer.compand", "soxbindings.Transformer.build_array", "torch.from_numpy().view", "numpy.random.rand", "numpy.random.normal", "soxbindings.Transformer", "soxbindings.Transformer.equalizer", "soxbindings.Transformer.build_array", "torch.from_numpy().view", "numpy.random.rand", "numpy.random.rand", "torch.tanh", "abs", "soxbindings.Transformer.stretch", "soxbindings.Transformer.tempo", "numpy.ceil", "torch.tanh.numpy", "scipy.signal.sosfilt.astype", "torch.tanh.numpy", "scipy.signal.sosfilt.astype", "torch.tanh.float().abs", "torch.tanh.squeeze().numpy", "torch.from_numpy", "torch.logical_and", "numpy.random.rand", "torch.tanh.squeeze().numpy", "torch.from_numpy", "numpy.random.rand", "numpy.random.rand", "torch.tanh.squeeze().numpy", "torch.from_numpy", "numpy.random.rand", "numpy.random.rand", "torch.tanh.squeeze().numpy", "torch.from_numpy", "numpy.random.rand", "numpy.random.rand", "torch.tanh.squeeze().numpy", "torch.from_numpy", "torch.rand", "torch.tanh.astype", "torch.tanh.astype", "torch.tanh.astype", "torch.tanh.astype", "torch.tanh.astype", "numpy.random.rand", "torch.tanh.float", "torch.tanh.squeeze", "torch.tanh.squeeze", "torch.tanh.squeeze", "torch.tanh.squeeze", "torch.tanh.squeeze", "numpy.random.rand"], "methods", ["None"], ["", "def", "apply_augmentations", "(", "self", ",", "audio", ",", "target", ")", ":", "\n", "\n", "# random gain from 0dB to -6 dB", "\n", "#if np.random.rand() < 0.2:      ", "\n", "#    #sgn = np.random.choice([-1,1])", "\n", "#    audio = audio * (10**((-1 * np.random.rand() * 6)/20))   ", "\n", "\n", "# phase inversion", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "            ", "audio", "=", "-", "audio", "\n", "\n", "# drop continguous frames", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.05", ":", "\n", "            ", "zero_size", "=", "int", "(", "self", ".", "length", "*", "0.1", ")", "\n", "start", "=", "np", ".", "random", ".", "randint", "(", "audio", ".", "shape", "[", "-", "1", "]", "-", "zero_size", "-", "1", ")", "\n", "stop", "=", "start", "+", "zero_size", "\n", "audio", "[", ":", ",", "start", ":", "stop", "]", "=", "0", "\n", "target", "[", ":", ",", "start", ":", "stop", "]", "=", "0", "\n", "\n", "# apply time stretching", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.0", ":", "\n", "            ", "factor", "=", "np", ".", "random", ".", "normal", "(", "1.0", ",", "0.5", ")", "\n", "factor", "=", "np", ".", "clip", "(", "factor", ",", "a_min", "=", "0.6", ",", "a_max", "=", "1.8", ")", "\n", "\n", "tfm", "=", "sox", ".", "Transformer", "(", ")", "\n", "\n", "if", "abs", "(", "factor", "-", "1.0", ")", "<=", "0.1", ":", "# use stretch", "\n", "                ", "tfm", ".", "stretch", "(", "1", "/", "factor", ")", "\n", "", "else", ":", "# use tempo", "\n", "                ", "tfm", ".", "tempo", "(", "factor", ",", "'m'", ")", "\n", "\n", "", "audio", "=", "tfm", ".", "build_array", "(", "input_array", "=", "audio", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "\n", "sample_rate_in", "=", "self", ".", "audio_sample_rate", ")", "\n", "audio", "=", "torch", ".", "from_numpy", "(", "audio", ".", "astype", "(", "'float32'", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "# now we update the targets based on new tempo", "\n", "dbeat_ind", "=", "(", "target", "[", "1", ",", ":", "]", "==", "1", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", "\n", "dbeat_sec", "=", "dbeat_ind", "/", "self", ".", "target_sample_rate", "\n", "new_dbeat_sec", "=", "(", "dbeat_sec", "/", "factor", ")", ".", "squeeze", "(", ")", "\n", "new_dbeat_ind", "=", "(", "new_dbeat_sec", "*", "self", ".", "target_sample_rate", ")", ".", "long", "(", ")", "\n", "\n", "beat_ind", "=", "(", "target", "[", "0", ",", ":", "]", "==", "1", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", "\n", "beat_sec", "=", "beat_ind", "/", "self", ".", "target_sample_rate", "\n", "new_beat_sec", "=", "(", "beat_sec", "/", "factor", ")", ".", "squeeze", "(", ")", "\n", "new_beat_ind", "=", "(", "new_beat_sec", "*", "self", ".", "target_sample_rate", ")", ".", "long", "(", ")", "\n", "\n", "# now convert indices back to target vector", "\n", "new_size", "=", "int", "(", "np", ".", "ceil", "(", "target", ".", "shape", "[", "-", "1", "]", "/", "factor", ")", ")", "\n", "streteched_target", "=", "torch", ".", "zeros", "(", "2", ",", "new_size", ")", "\n", "streteched_target", "[", "0", ",", "new_beat_ind", "]", "=", "1", "\n", "streteched_target", "[", "1", ",", "new_dbeat_ind", "]", "=", "1", "\n", "target", "=", "streteched_target", "\n", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.0", ":", "\n", "# this is the old method (shift all beats)", "\n", "            ", "max_shift", "=", "int", "(", "0.070", "*", "self", ".", "target_sample_rate", ")", "\n", "shift", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "high", "=", "max_shift", ")", "\n", "direction", "=", "np", ".", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "target", "=", "torch", ".", "roll", "(", "target", ",", "shift", "*", "direction", ")", "\n", "\n", "# shift targets forward/back max 70ms", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.3", ":", "\n", "\n", "# in this method we shift each beat and downbeat by a random amount", "\n", "            ", "max_shift", "=", "int", "(", "0.045", "*", "self", ".", "target_sample_rate", ")", "\n", "\n", "beat_ind", "=", "torch", ".", "logical_and", "(", "target", "[", "0", ",", ":", "]", "==", "1", ",", "target", "[", "1", ",", ":", "]", "!=", "1", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", "# all beats EXCEPT downbeats", "\n", "dbeat_ind", "=", "(", "target", "[", "1", ",", ":", "]", "==", "1", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", "\n", "\n", "# shift just the downbeats", "\n", "dbeat_shifts", "=", "torch", ".", "normal", "(", "0.0", ",", "max_shift", "/", "2", ",", "size", "=", "(", "1", ",", "dbeat_ind", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "dbeat_ind", "+=", "dbeat_shifts", ".", "long", "(", ")", "\n", "\n", "# now shift the non-downbeats ", "\n", "beat_shifts", "=", "torch", ".", "normal", "(", "0.0", ",", "max_shift", "/", "2", ",", "size", "=", "(", "1", ",", "beat_ind", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "beat_ind", "+=", "beat_shifts", ".", "long", "(", ")", "\n", "\n", "# ensure we have no beats beyond max index", "\n", "beat_ind", "=", "beat_ind", "[", "beat_ind", "<", "target", ".", "shape", "[", "-", "1", "]", "]", "\n", "dbeat_ind", "=", "dbeat_ind", "[", "dbeat_ind", "<", "target", ".", "shape", "[", "-", "1", "]", "]", "\n", "\n", "# now convert indices back to target vector", "\n", "shifted_target", "=", "torch", ".", "zeros", "(", "2", ",", "target", ".", "shape", "[", "-", "1", "]", ")", "\n", "shifted_target", "[", "0", ",", "beat_ind", "]", "=", "1", "\n", "shifted_target", "[", "0", ",", "dbeat_ind", "]", "=", "1", "# set also downbeats on first channel", "\n", "shifted_target", "[", "1", ",", "dbeat_ind", "]", "=", "1", "\n", "\n", "target", "=", "shifted_target", "\n", "\n", "# apply pitch shifting", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "            ", "sgn", "=", "np", ".", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "factor", "=", "sgn", "*", "np", ".", "random", ".", "rand", "(", ")", "*", "8.0", "\n", "tfm", "=", "sox", ".", "Transformer", "(", ")", "\n", "tfm", ".", "pitch", "(", "factor", ")", "\n", "audio", "=", "tfm", ".", "build_array", "(", "input_array", "=", "audio", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "\n", "sample_rate_in", "=", "self", ".", "audio_sample_rate", ")", "\n", "audio", "=", "torch", ".", "from_numpy", "(", "audio", ".", "astype", "(", "'float32'", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "# apply a lowpass filter", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.1", ":", "\n", "            ", "cutoff", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "4000", ")", "+", "4000", "\n", "sos", "=", "scipy", ".", "signal", ".", "butter", "(", "2", ",", "\n", "cutoff", ",", "\n", "btype", "=", "\"lowpass\"", ",", "\n", "fs", "=", "self", ".", "audio_sample_rate", ",", "\n", "output", "=", "'sos'", ")", "\n", "audio_filtered", "=", "scipy", ".", "signal", ".", "sosfilt", "(", "sos", ",", "audio", ".", "numpy", "(", ")", ")", "\n", "audio", "=", "torch", ".", "from_numpy", "(", "audio_filtered", ".", "astype", "(", "'float32'", ")", ")", "\n", "\n", "# apply a highpass filter", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.1", ":", "\n", "            ", "cutoff", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "1000", ")", "+", "20", "\n", "sos", "=", "scipy", ".", "signal", ".", "butter", "(", "2", ",", "\n", "cutoff", ",", "\n", "btype", "=", "\"highpass\"", ",", "\n", "fs", "=", "self", ".", "audio_sample_rate", ",", "\n", "output", "=", "'sos'", ")", "\n", "audio_filtered", "=", "scipy", ".", "signal", ".", "sosfilt", "(", "sos", ",", "audio", ".", "numpy", "(", ")", ")", "\n", "audio", "=", "torch", ".", "from_numpy", "(", "audio_filtered", ".", "astype", "(", "'float32'", ")", ")", "\n", "\n", "# apply a chorus effect", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.05", ":", "\n", "            ", "tfm", "=", "sox", ".", "Transformer", "(", ")", "\n", "tfm", ".", "chorus", "(", ")", "\n", "audio", "=", "tfm", ".", "build_array", "(", "input_array", "=", "audio", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "\n", "sample_rate_in", "=", "self", ".", "audio_sample_rate", ")", "\n", "audio", "=", "torch", ".", "from_numpy", "(", "audio", ".", "astype", "(", "'float32'", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "# apply a compressor effect", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.15", ":", "\n", "            ", "attack", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "0.300", ")", "+", "0.005", "\n", "release", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "1.000", ")", "+", "0.3", "\n", "tfm", "=", "sox", ".", "Transformer", "(", ")", "\n", "tfm", ".", "compand", "(", "attack_time", "=", "attack", ",", "decay_time", "=", "release", ")", "\n", "audio", "=", "tfm", ".", "build_array", "(", "input_array", "=", "audio", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "\n", "sample_rate_in", "=", "self", ".", "audio_sample_rate", ")", "\n", "audio", "=", "torch", ".", "from_numpy", "(", "audio", ".", "astype", "(", "'float32'", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "# apply an EQ effect", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.15", ":", "\n", "            ", "freq", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "8000", ")", "+", "60", "\n", "q", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "7.0", ")", "+", "0.1", "\n", "g", "=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "6", ")", "\n", "tfm", "=", "sox", ".", "Transformer", "(", ")", "\n", "tfm", ".", "equalizer", "(", "frequency", "=", "freq", ",", "width_q", "=", "q", ",", "gain_db", "=", "g", ")", "\n", "audio", "=", "tfm", ".", "build_array", "(", "input_array", "=", "audio", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ",", "\n", "sample_rate_in", "=", "self", ".", "audio_sample_rate", ")", "\n", "audio", "=", "torch", ".", "from_numpy", "(", "audio", ".", "astype", "(", "'float32'", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "# add white noise", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.05", ":", "\n", "            ", "wn", "=", "(", "torch", ".", "rand", "(", "audio", ".", "shape", ")", "*", "2", ")", "-", "1", "\n", "g", "=", "10", "**", "(", "-", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "20", ")", "-", "12", ")", "/", "20", "\n", "audio", "=", "audio", "+", "(", "g", "*", "wn", ")", "\n", "\n", "# apply nonlinear distortion ", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.2", ":", "\n", "            ", "g", "=", "10", "**", "(", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "12", ")", "/", "20", ")", "\n", "audio", "=", "torch", ".", "tanh", "(", "audio", ")", "\n", "\n", "# normalize the audio", "\n", "", "audio", "/=", "audio", ".", "float", "(", ")", ".", "abs", "(", ")", ".", "max", "(", ")", "\n", "\n", "return", "audio", ",", "target", "", "", "", ""]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.tracker.beatTracker": [[10, 41], ["glob.glob", "wavebeat.dstcn.dsTCNModel.load_from_checkpoint", "dsTCNModel.load_from_checkpoint.eval", "dsTCNModel.load_from_checkpoint.predict_beats", "os.path.join", "len", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.base.Base.predict_beats"], ["def", "beatTracker", "(", "inputFile", ",", "ckpt_dir", "=", "'checkpoints/'", ",", "use_gpu", "=", "False", ")", ":", "\n", "    ", "\"\"\" Functional beat tracker interface. \n\n    Args:\n        inputFile (str): Path to a valid audio file. \n        ckpt_dir (str, optional): Path to a directory containing the checkpoint. (Default: 'checkpoints/')     \n        use_gpu (bool, optional): Perform inference on GPU is available. (Default: False)\n        \n    Returns:\n        beats (ndarray): Location of predicted beats in seconds.\n        downbeats (ndarray): Location of predicted downbeats in seconds.\n\n    \"\"\"", "\n", "\n", "# find the checkpoint path", "\n", "ckpts", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "\"*.ckpt\"", ")", ")", "\n", "if", "len", "(", "ckpts", ")", "<", "1", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"No checkpoints found in {ckpt_dir}. See the README for details.\"", ")", "\n", "", "else", ":", "\n", "        ", "ckpt_path", "=", "ckpts", "[", "-", "1", "]", "\n", "\n", "# construct the model, and load weights from checkpoint", "\n", "", "model", "=", "dsTCNModel", ".", "load_from_checkpoint", "(", "ckpt_path", ")", "\n", "\n", "# set model to eval mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# get the locations of the beats and downbeats", "\n", "beats", ",", "downbeats", "=", "model", ".", "predict_beats", "(", "inputFile", ",", "use_gpu", "=", "use_gpu", ")", "\n", "\n", "return", "beats", ",", "downbeats", "", "", ""]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.loss.GlobalMSELoss.__init__": [[4, 6], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.filter.FIRFilter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GlobalMSELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.loss.GlobalMSELoss.forward": [[7, 22], ["torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "\n", "# beat errors", "\n", "        ", "target_beats", "=", "target", "[", "...", ",", "target", "==", "1", "]", "\n", "input_beats", "=", "input", "[", "...", ",", "target", "==", "1", "]", "\n", "\n", "beat_loss", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "input_beats", ",", "target_beats", ")", "\n", "\n", "# no beat errors", "\n", "target_no_beats", "=", "target", "[", "...", ",", "target", "==", "0", "]", "\n", "input_no_beats", "=", "input", "[", "...", ",", "target", "==", "0", "]", "\n", "\n", "no_beat_loss", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "target_no_beats", ",", "input_no_beats", ")", "\n", "\n", "return", "no_beat_loss", "+", "beat_loss", ",", "beat_loss", ",", "no_beat_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.loss.GlobalBCELoss.__init__": [[24, 26], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.filter.FIRFilter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GlobalBCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.loss.GlobalBCELoss.forward": [[27, 64], ["torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "\n", "# split out the channels", "\n", "        ", "beat_act_target", "=", "target", "[", ":", ",", "0", ",", ":", "]", "\n", "downbeat_act_target", "=", "target", "[", ":", ",", "1", ",", ":", "]", "\n", "\n", "beat_act_input", "=", "input", "[", ":", ",", "0", ",", ":", "]", "\n", "downbeat_act_input", "=", "input", "[", ":", ",", "1", ",", ":", "]", "\n", "\n", "# beat errors", "\n", "target_beats", "=", "beat_act_target", "[", "beat_act_target", "==", "1", "]", "\n", "input_beats", "=", "beat_act_input", "[", "beat_act_target", "==", "1", "]", "\n", "\n", "beat_loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "input_beats", ",", "target_beats", ")", "\n", "\n", "# no beat errors", "\n", "target_no_beats", "=", "beat_act_target", "[", "beat_act_target", "==", "0", "]", "\n", "input_no_beats", "=", "beat_act_input", "[", "beat_act_target", "==", "0", "]", "\n", "\n", "no_beat_loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "input_no_beats", ",", "target_no_beats", ")", "\n", "\n", "# downbeat errors", "\n", "target_downbeats", "=", "downbeat_act_target", "[", "downbeat_act_target", "==", "1", "]", "\n", "input_downbeats", "=", "downbeat_act_input", "[", "downbeat_act_target", "==", "1", "]", "\n", "\n", "downbeat_loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "input_downbeats", ",", "target_downbeats", ")", "\n", "\n", "# no downbeat errors", "\n", "target_no_downbeats", "=", "downbeat_act_target", "[", "downbeat_act_target", "==", "0", "]", "\n", "input_no_downbeats", "=", "downbeat_act_input", "[", "downbeat_act_target", "==", "0", "]", "\n", "\n", "no_downbeat_loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "input_no_downbeats", ",", "target_no_downbeats", ")", "\n", "\n", "# sum up losses", "\n", "total_loss", "=", "beat_loss", "+", "no_beat_loss", "+", "downbeat_loss", "+", "no_downbeat_loss", "\n", "\n", "return", "total_loss", ",", "beat_loss", ",", "no_beat_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.loss.BCFELoss.__init__": [[67, 69], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.filter.FIRFilter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BCFELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.loss.BCFELoss.forward": [[70, 111], ["torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "\n", "# split out the channels", "\n", "        ", "beat_act_target", "=", "target", "[", ":", ",", "0", ",", ":", "]", "\n", "downbeat_act_target", "=", "target", "[", ":", ",", "1", ",", ":", "]", "\n", "\n", "beat_act_input", "=", "input", "[", ":", ",", "0", ",", ":", "]", "\n", "downbeat_act_input", "=", "input", "[", ":", ",", "1", ",", ":", "]", "\n", "\n", "# beat errors", "\n", "target_beats", "=", "beat_act_target", "[", "beat_act_target", "==", "1", "]", "\n", "input_beats", "=", "beat_act_input", "[", "beat_act_target", "==", "1", "]", "\n", "\n", "beat_loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "input_beats", ",", "target_beats", ")", "\n", "\n", "# no beat errors", "\n", "target_no_beats", "=", "beat_act_target", "[", "beat_act_target", "==", "0", "]", "\n", "input_no_beats", "=", "beat_act_input", "[", "beat_act_target", "==", "0", "]", "\n", "\n", "no_beat_loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "input_no_beats", ",", "target_no_beats", ")", "\n", "\n", "# downbeat errors", "\n", "target_downbeats", "=", "downbeat_act_target", "[", "downbeat_act_target", "==", "1", "]", "\n", "input_downbeats", "=", "downbeat_act_input", "[", "downbeat_act_target", "==", "1", "]", "\n", "\n", "downbeat_loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "input_downbeats", ",", "target_downbeats", ")", "\n", "\n", "# no downbeat errors", "\n", "target_no_downbeats", "=", "downbeat_act_target", "[", "downbeat_act_target", "==", "0", "]", "\n", "input_no_downbeats", "=", "downbeat_act_input", "[", "downbeat_act_target", "==", "0", "]", "\n", "\n", "no_downbeat_loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "input_no_downbeats", ",", "target_no_downbeats", ")", "\n", "\n", "# sum up losses", "\n", "total_beat_loss", "=", "1", "/", "2", "*", "(", "(", "beat_loss", "+", "no_beat_loss", ")", "**", "2", "+", "(", "beat_loss", "-", "no_beat_loss", ")", "**", "2", ")", "\n", "total_downbeat_loss", "=", "1", "/", "2", "*", "(", "(", "downbeat_loss", "+", "no_downbeat_loss", ")", "**", "2", "+", "(", "downbeat_loss", "-", "no_downbeat_loss", ")", "**", "2", ")", "\n", "\n", "# find form", "\n", "total_loss", "=", "total_beat_loss", "+", "total_downbeat_loss", "\n", "\n", "return", "total_loss", ",", "total_beat_loss", ",", "total_downbeat_loss", "", "", "", ""]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.plot.plot_activations": [[8, 53], ["matplotlib.figure", "matplotlib.vlines", "matplotlib.vlines", "matplotlib.plot", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.yticks", "matplotlib.tight_layout", "io.BytesIO", "matplotlib.savefig", "io.BytesIO.seek", "PIL.Image.open", "matplotlib.close", "matplotlib.vlines", "matplotlib.vlines", "numpy.arange", "matplotlib.plot", "len", "matplotlib.xlim", "matplotlib.title", "torchvision.transforms.ToTensor", "len"], "function", ["None"], ["def", "plot_activations", "(", "ref_beats", ",", "\n", "est_beats", ",", "\n", "est_sm", ",", "\n", "sample_rate", ",", "\n", "ref_downbeats", "=", "None", ",", "\n", "est_downbeats", "=", "None", ",", "\n", "est_downbeats_sm", "=", "None", ",", "\n", "song_name", "=", "None", ")", ":", "\n", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "3", ")", ")", "\n", "\n", "plt", ".", "vlines", "(", "ref_beats", ",", "1.55", ",", "1.75", ",", "colors", "=", "'lightcoral'", ")", "\n", "plt", ".", "vlines", "(", "est_beats", ",", "1.05", ",", "1.25", ",", "colors", "=", "'lightsteelblue'", ")", "\n", "\n", "if", "ref_downbeats", "is", "not", "None", ":", "\n", "        ", "plt", ".", "vlines", "(", "ref_downbeats", ",", "1.80", ",", "1.95", ",", "colors", "=", "'red'", ")", "\n", "", "if", "est_downbeats", "is", "not", "None", ":", "\n", "        ", "plt", ".", "vlines", "(", "est_downbeats", ",", "1.30", ",", "1.45", ",", "colors", "=", "'blue'", ")", "\n", "\n", "", "t", "=", "np", ".", "arange", "(", "len", "(", "est_sm", ")", ")", "/", "sample_rate", "\n", "plt", ".", "plot", "(", "t", ",", "0.45", "*", "est_sm", ",", "c", "=", "\"lightsteelblue\"", ")", "\n", "\n", "if", "est_downbeats_sm", "is", "not", "None", ":", "\n", "        ", "plt", ".", "plot", "(", "t", ",", "(", "0.45", "*", "est_downbeats_sm", ")", "+", "0.5", ",", "c", "=", "\"blue\"", ")", "\n", "\n", "", "plt", ".", "ylim", "(", "[", "0", ",", "2", "]", ")", "\n", "if", "len", "(", "ref_beats", ")", ">", "0", ":", "\n", "        ", "plt", ".", "xlim", "(", "[", "ref_beats", "[", "0", "]", ",", "ref_beats", "[", "-", "1", "]", "]", ")", "\n", "\n", "", "if", "song_name", "is", "not", "None", ":", "\n", "        ", "plt", ".", "title", "(", "f\"{song_name}\"", ")", "\n", "", "plt", ".", "xlabel", "(", "\"Time (s)\"", ")", "\n", "plt", ".", "yticks", "(", "[", "0.25", ",", "0.75", ",", "1.25", ",", "1.75", "]", ",", "[", "'Beat'", ",", "'Downbeat'", ",", "'Pred.'", ",", "'Target'", "]", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "buf", "=", "io", ".", "BytesIO", "(", ")", "\n", "plt", ".", "savefig", "(", "buf", ",", "format", "=", "'jpeg'", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "\n", "image", "=", "PIL", ".", "Image", ".", "open", "(", "buf", ")", "\n", "image", "=", "ToTensor", "(", ")", "(", "image", ")", "\n", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.plot.plot_histogram": [[54, 81], ["matplotlib.subplots", "axs[].hist", "axs[].set_xlabel", "axs[].hist", "axs[].set_xlabel", "io.BytesIO", "matplotlib.savefig", "io.BytesIO.seek", "PIL.Image.open", "matplotlib.close", "beat_f1_scores.append", "downbeat_f1_scores.append", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "plot_histogram", "(", "songs", ")", ":", "\n", "\n", "    ", "beat_f1_scores", "=", "[", "]", "\n", "downbeat_f1_scores", "=", "[", "]", "\n", "\n", "for", "song", "in", "songs", ":", "\n", "        ", "beat_f1_scores", ".", "append", "(", "song", "[", "\"Beat F-measure\"", "]", ")", "\n", "downbeat_f1_scores", ".", "append", "(", "song", "[", "\"Downbeat F-measure\"", "]", ")", "\n", "\n", "", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "nrows", "=", "2", ",", "ncols", "=", "1", ",", "figsize", "=", "(", "12", ",", "6", ")", ")", "\n", "\n", "axs", "[", "0", "]", ".", "hist", "(", "beat_f1_scores", ",", "bins", "=", "10", ")", "\n", "axs", "[", "0", "]", ".", "set_xlabel", "(", "'Beat F-measure'", ")", "\n", "\n", "axs", "[", "1", "]", ".", "hist", "(", "downbeat_f1_scores", ",", "bins", "=", "10", ")", "\n", "axs", "[", "1", "]", ".", "set_xlabel", "(", "'Downbeat F-measure'", ")", "\n", "\n", "buf", "=", "io", ".", "BytesIO", "(", ")", "\n", "plt", ".", "savefig", "(", "buf", ",", "format", "=", "'jpeg'", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "\n", "image", "=", "PIL", ".", "Image", ".", "open", "(", "buf", ")", "\n", "image", "=", "ToTensor", "(", ")", "(", "image", ")", "\n", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.plot.make_table": [[82, 99], ["sorted", "os.path.basename"], "function", ["None"], ["", "def", "make_table", "(", "songs", ",", "sort_key", "=", "\"Beat F-measure\"", ")", ":", "\n", "\n", "# first sort by ascending f-measure on beats", "\n", "    ", "songs", "=", "sorted", "(", "songs", ",", "key", "=", "lambda", "k", ":", "k", "[", "sort_key", "]", ")", "\n", "\n", "table", "=", "\"\"", "\n", "table", "+=", "\"| File     | Genre | Time Sig.| Beat F-measure |  Downbeat F-measure |\\n\"", "\n", "table", "+=", "\"|:---------|-------|----------|---------------:|--------------------:|\\n\"", "\n", "\n", "for", "song", "in", "songs", ":", "\n", "        ", "table", "+=", "f\"\"\"| {os.path.basename(song[\"Filename\"])} |\"\"\"", "\n", "table", "+=", "f\"\"\"  {song[\"Genre\"]} |\"\"\"", "\n", "table", "+=", "f\"\"\"  {song[\"Time signature\"]} |\"\"\"", "\n", "table", "+=", "f\"\"\"{song[\"Beat F-measure\"]:0.3f} | \"\"\"", "\n", "table", "+=", "f\"\"\"{song[\"Downbeat F-measure\"]:0.3f} |\\n\"\"\"", "\n", "\n", "", "return", "table", "", "", ""]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.utils.center_crop": [[2, 6], ["None"], "function", ["None"], ["def", "center_crop", "(", "x", ",", "length", ":", "int", ")", ":", "\n", "    ", "start", "=", "(", "x", ".", "shape", "[", "-", "1", "]", "-", "length", ")", "//", "2", "\n", "stop", "=", "start", "+", "length", "\n", "return", "x", "[", "...", ",", "start", ":", "stop", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.utils.causal_crop": [[7, 11], ["None"], "function", ["None"], ["", "def", "causal_crop", "(", "x", ",", "length", ":", "int", ")", ":", "\n", "    ", "stop", "=", "x", ".", "shape", "[", "-", "1", "]", "-", "1", "\n", "start", "=", "stop", "-", "length", "\n", "return", "x", "[", "...", ",", "start", ":", "stop", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.filter.FIRFilter.__init__": [[13, 33], ["super().__init__", "ValueError", "scipy.signal.firwin", "torch.nn.Conv1d", "torch.tensor().view", "torch.tensor", "scipy.signal.firwin.astype"], "methods", ["home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.filter.FIRFilter.__init__"], ["def", "__init__", "(", "self", ",", "filter_type", "=", "\"lp\"", ",", "fc", "=", "1000", ",", "fs", "=", "44100", ",", "ntaps", "=", "127", ",", "plot", "=", "False", ")", ":", "\n", "        ", "\"\"\"Initilize FIR filtering module.\"\"\"", "\n", "super", "(", "FIRFilter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "filter_type", "=", "filter_type", "\n", "self", ".", "fc", "=", "fc", "\n", "self", ".", "fs", "=", "fs", "\n", "self", ".", "ntaps", "=", "ntaps", "\n", "self", ".", "plot", "=", "plot", "\n", "\n", "if", "ntaps", "%", "2", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "f\"ntaps must be odd (ntaps={ntaps}).\"", ")", "\n", "\n", "", "if", "filter_type", "==", "\"lp\"", ":", "\n", "# we fit to N tap FIR filter with window method", "\n", "            ", "taps", "=", "scipy", ".", "signal", ".", "firwin", "(", "ntaps", ",", "fc", ",", "fs", "=", "fs", ",", "pass_zero", "=", "False", ")", "\n", "\n", "# now implement this digital FIR filter as a Conv1d layer", "\n", "self", ".", "fir", "=", "torch", ".", "nn", ".", "Conv1d", "(", "1", ",", "1", ",", "kernel_size", "=", "ntaps", ",", "bias", "=", "False", ",", "padding", "=", "ntaps", "//", "2", ")", "\n", "self", ".", "fir", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "fir", ".", "weight", ".", "data", "=", "torch", ".", "tensor", "(", "taps", ".", "astype", "(", "'float32'", ")", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.wavebeat.filter.FIRFilter.forward": [[34, 45], ["torch.nn.functional.conv1d", "torch.nn.functional.conv1d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "\"\"\"Calculate forward propagation.\n        Args:\n            input (Tensor): Predicted signal (B, #channels, #samples).\n            target (Tensor): Groundtruth signal (B, #channels, #samples).\n        Returns:\n            Tensor: Filtered signal.\n        \"\"\"", "\n", "input", "=", "torch", ".", "nn", ".", "functional", ".", "conv1d", "(", "input", ",", "self", ".", "fir", ".", "weight", ".", "data", ",", "padding", "=", "self", ".", "ntaps", "//", "2", ")", "\n", "target", "=", "torch", ".", "nn", ".", "functional", ".", "conv1d", "(", "target", ",", "self", ".", "fir", ".", "weight", ".", "data", ",", "padding", "=", "self", ".", "ntaps", "//", "2", ")", "\n", "return", "input", ",", "target", "", "", "", ""]], "home.repos.pwc.inspect_result.csteinmetz1_wavebeat.util.make_plots.make_dataset_boxplot": [[6, 61], ["matplotlib.subplots", "results.keys", "results.items", "matplotlib.boxplot", "matplotlib.boxplot", "matplotlib.xticks", "ax.axvline", "ax.axvline", "ax.axvline", "zip", "zip", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.xaxis.set_ticks_position", "ax.yaxis.set_ticks_position", "matplotlib.grid", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.savefig", "beat_results.append", "downbeat_results.append", "patch_box.set_facecolor", "patch_median.set_color", "patch_median.set_alpha", "patch_box.set_facecolor", "patch_median.set_color", "patch_median.set_alpha", "matplotlib.lines.Line2D", "matplotlib.lines.Line2D", "matplotlib.lines.Line2D", "matplotlib.lines.Line2D"], "function", ["None"], ["def", "make_dataset_boxplot", "(", "results", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "4.5", ",", "3", ")", ")", "\n", "\n", "beat_results", "=", "[", "]", "\n", "downbeat_results", "=", "[", "]", "\n", "datasets", "=", "results", ".", "keys", "(", ")", "\n", "for", "dataset", ",", "result", "in", "results", ".", "items", "(", ")", ":", "\n", "        ", "beat_results", ".", "append", "(", "result", "[", "'F-measure'", "]", "[", "'beat'", "]", ")", "\n", "downbeat_results", ".", "append", "(", "result", "[", "'F-measure'", "]", "[", "'downbeat'", "]", ")", "\n", "\n", "", "beat_bplot", "=", "plt", ".", "boxplot", "(", "beat_results", ",", "positions", "=", "[", "1", ",", "3", ",", "5", ",", "7", "]", ",", "patch_artist", "=", "True", ",", "vert", "=", "True", ")", "\n", "downbeat_bplot", "=", "plt", ".", "boxplot", "(", "downbeat_results", ",", "positions", "=", "[", "2", ",", "4", ",", "6", ",", "8", "]", ",", "patch_artist", "=", "True", ",", "vert", "=", "True", ")", "\n", "plt", ".", "xticks", "(", "[", "1.5", ",", "3.5", ",", "5.5", ",", "7.5", "]", ",", "datasets", ")", "\n", "\n", "ax", ".", "axvline", "(", "2.5", ",", "linestyle", "=", "'--'", ",", "linewidth", "=", "1", ",", "color", "=", "'lightgray'", ")", "\n", "ax", ".", "axvline", "(", "4.5", ",", "linestyle", "=", "'--'", ",", "linewidth", "=", "1", ",", "color", "=", "'lightgray'", ")", "\n", "ax", ".", "axvline", "(", "6.5", ",", "linestyle", "=", "'--'", ",", "linewidth", "=", "1", ",", "color", "=", "'lightgray'", ")", "\n", "\n", "# fill with colors", "\n", "#colors = ['#FFB000', '#FE6100', '#DC267F', '#1989BE', '#3e4966']", "\n", "#colors = ['#7f7f7f', '#d62728', '#ff7f0e', '#']", "\n", "\n", "#downbeat_colors = [(110/255, 188/255, 200/255), (77/255, 88/255, 201/255), (101/255, 180/255, 138/255), (227/255, 140/255, 60/255)]", "\n", "#beat_colors = [(196/255, 236/255, 237/255), (200/255, 203/255, 240/255), (197/255, 233/255, 219/255), (245/255, 219/255, 183/255)]", "\n", "\n", "downbeat_color", "=", "(", "110", "/", "255", ",", "188", "/", "255", ",", "200", "/", "255", ")", "\n", "beat_color", "=", "(", "196", "/", "255", ",", "236", "/", "255", ",", "237", "/", "255", ")", "\n", "\n", "for", "patch_box", ",", "patch_median", "in", "zip", "(", "beat_bplot", "[", "'boxes'", "]", ",", "beat_bplot", "[", "'medians'", "]", ")", ":", "\n", "        ", "patch_box", ".", "set_facecolor", "(", "beat_color", ")", "\n", "patch_median", ".", "set_color", "(", "'black'", ")", "\n", "patch_median", ".", "set_alpha", "(", "0.7", ")", "\n", "\n", "", "for", "patch_box", ",", "patch_median", "in", "zip", "(", "downbeat_bplot", "[", "'boxes'", "]", ",", "downbeat_bplot", "[", "'medians'", "]", ")", ":", "\n", "        ", "patch_box", ".", "set_facecolor", "(", "downbeat_color", ")", "\n", "patch_median", ".", "set_color", "(", "'black'", ")", "\n", "patch_median", ".", "set_alpha", "(", "0.7", ")", "\n", "\n", "#ax.yaxis.set_label_position(\"right\")", "\n", "#ax.yaxis.tick_right()", "\n", "", "ax", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'bottom'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'left'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "xaxis", ".", "set_ticks_position", "(", "'none'", ")", "\n", "ax", ".", "yaxis", ".", "set_ticks_position", "(", "'none'", ")", "\n", "plt", ".", "grid", "(", "color", "=", "'lightgray'", ",", "axis", "=", "'y'", ",", "linestyle", "=", "'-'", ",", "linewidth", "=", "1", ")", "\n", "\n", "custom_lines", "=", "[", "matplotlib", ".", "lines", ".", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "downbeat_color", ",", "lw", "=", "4", ")", ",", "\n", "matplotlib", ".", "lines", ".", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "beat_color", ",", "lw", "=", "4", ")", "]", "\n", "\n", "plt", ".", "legend", "(", "custom_lines", ",", "[", "'Downbeat'", ",", "'Beat'", "]", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "'plots/beat_boxplot.pdf'", ")", "\n", "plt", ".", "savefig", "(", "'plots/beat_boxplot.png'", ")", "\n", "\n"]]}