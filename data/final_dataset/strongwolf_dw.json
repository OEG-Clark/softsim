{"home.repos.pwc.inspect_result.strongwolf_dw.None.train.parse_args": [[23, 86], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.strongwolf_dw.None.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--work-dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume-from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no-validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether not to evaluate the checkpoint during training'", ")", "\n", "group_gpus", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpu-ids'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'ids of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file (deprecate), '", "\n", "'change to --cfg-options instead.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "if", "args", ".", "options", "and", "args", ".", "cfg_options", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'--options and --cfg-options cannot be both '", "\n", "'specified, --options is deprecated in favor of --cfg-options'", ")", "\n", "", "if", "args", ".", "options", ":", "\n", "        ", "warnings", ".", "warn", "(", "'--options is deprecated in favor of --cfg-options'", ")", "\n", "args", ".", "cfg_options", "=", "args", ".", "options", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.train.main": [[88, 187], ["train.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "mmcv.mkdir_or_exist", "Config.fromfile.dump", "time.strftime", "os.join", "mmdet.utils.get_root_logger", "dict", "mmdet.utils.collect_env", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "os.basename", "mmdet.models.build_detector", "mmdet.models.build_detector.init_weights", "mmdet.apis.train_detector", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "mmcv.runner.init_dist", "mmcv.runner.get_dist_info", "range", "os.abspath", "os.join", "time.localtime", "mmdet.utils.get_root_logger.info", "mmdet.apis.set_random_seed", "mmdet.datasets.build_dataset", "len", "copy.deepcopy", "datasets.append", "dict", "Config.fromfile.get", "os.join", "range", "range", "os.basename", "Config.fromfile.get", "Config.fromfile.get", "mmdet.datasets.build_dataset", "mmdet.utils.collect_env.items", "os.splitext", "os.basename", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.strongwolf_dw.None.test.parse_args", "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead.init_weights"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# work_dir is determined in this priority: CLI > segment in file > filename", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "# update configs according to CLI args if args.work_dir is not None", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "elif", "cfg", ".", "get", "(", "'work_dir'", ",", "None", ")", "is", "None", ":", "\n", "# use config filename as default work_dir if cfg.work_dir is None", "\n", "        ", "cfg", ".", "work_dir", "=", "osp", ".", "join", "(", "'./work_dirs'", ",", "\n", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", "[", "0", "]", ")", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "if", "args", ".", "gpu_ids", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "args", ".", "gpu_ids", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "range", "(", "1", ")", "if", "args", ".", "gpus", "is", "None", "else", "range", "(", "args", ".", "gpus", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "# re-set gpu_ids with distributed training mode", "\n", "_", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "cfg", ".", "gpu_ids", "=", "range", "(", "world_size", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# dump config", "\n", "cfg", ".", "dump", "(", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "f'{timestamp}.log'", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "(", "f'{k}: {v}'", ")", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "meta", "[", "'config'", "]", "=", "cfg", ".", "pretty_text", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "f'Distributed training: {distributed}'", ")", "\n", "logger", ".", "info", "(", "f'Config:\\n{cfg.pretty_text}'", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "f'Set random seed to {args.seed}, '", "\n", "f'deterministic: {args.deterministic}'", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "", "cfg", ".", "seed", "=", "args", ".", "seed", "\n", "meta", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "meta", "[", "'exp_name'", "]", "=", "osp", ".", "basename", "(", "args", ".", "config", ")", "\n", "\n", "model", "=", "build_detector", "(", "\n", "cfg", ".", "model", ",", "\n", "train_cfg", "=", "cfg", ".", "get", "(", "'train_cfg'", ")", ",", "\n", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "if", "len", "(", "cfg", ".", "workflow", ")", "==", "2", ":", "\n", "        ", "val_dataset", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "data", ".", "val", ")", "\n", "val_dataset", ".", "pipeline", "=", "cfg", ".", "data", ".", "train", ".", "pipeline", "\n", "datasets", ".", "append", "(", "build_dataset", "(", "val_dataset", ")", ")", "\n", "", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save mmdet version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "mmdet_version", "=", "__version__", "+", "get_git_hash", "(", ")", "[", ":", "7", "]", ",", "\n", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", ")", "\n", "# add an attribute for visualization convenience", "\n", "", "model", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "train_detector", "(", "\n", "model", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "validate", "=", "(", "not", "args", ".", "no_validate", ")", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.test.parse_args": [[22, 105], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.strongwolf_dw.None.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'MMDet test (and eval) a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work-dir'", ",", "\n", "help", "=", "'the directory to save the file containing evaluation metrics'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file in pickle format'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--fuse-conv-bn'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Whether to fuse conv and bn, this will slightly increase'", "\n", "'the inference speed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--format-only'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Format the output results without perform evaluation. It is'", "\n", "'useful when you want to format the result to a specific format and '", "\n", "'submit it to the test server'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'evaluation metrics, which depends on the dataset, e.g., \"bbox\",'", "\n", "' \"segm\", \"proposal\" for COCO, and \"mAP\", \"recall\" for PASCAL VOC'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-dir'", ",", "help", "=", "'directory where painted images will be saved'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-score-thr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.3", ",", "\n", "help", "=", "'score threshold (default: 0.3)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpu-collect'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to use gpu to collect results.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--tmpdir'", ",", "\n", "help", "=", "'tmp directory used for collecting results from multiple '", "\n", "'workers, available when gpu-collect is not specified'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation, the key-value pair in xxx=yyy '", "\n", "'format will be kwargs for dataset.evaluate() function (deprecate), '", "\n", "'change to --eval-options instead.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation, the key-value pair in xxx=yyy '", "\n", "'format will be kwargs for dataset.evaluate() function'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "if", "args", ".", "options", "and", "args", ".", "eval_options", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'--options and --eval-options cannot be both '", "\n", "'specified, --options is deprecated in favor of --eval-options'", ")", "\n", "", "if", "args", ".", "options", ":", "\n", "        ", "warnings", ".", "warn", "(", "'--options is deprecated in favor of --eval-options'", ")", "\n", "args", ".", "eval_options", "=", "args", ".", "options", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.test.main": [[107, 235], ["test.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "Config.fromfile.model.get", "isinstance", "mmcv.runner.get_dist_info", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "ValueError", "ValueError", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "isinstance", "Config.fromfile.data.test.pop", "isinstance", "mmcv.runner.init_dist", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "mmcv.runner.wrap_fp16_model", "mmcv.cnn.fuse_conv_bn", "mmcv.runner.load_checkpoint.get", "mmcv.parallel.MMDataParallel", "mmdet.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmdet.apis.multi_gpu_test", "parse_args.out.endswith", "Config.fromfile.model.neck.get", "mmdet.datasets.replace_ImageToTensor", "max", "os.abspath", "time.localtime", "Config.fromfile.get", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "mmcv.dump", "mmdet.datasets.build_dataset.format_results", "Config.fromfile.get().copy", "cfg.get().copy.update", "mmdet.datasets.build_dataset.evaluate", "print", "dict", "neck_cfg.get", "Config.fromfile.model.neck.rfp_backbone.get", "cfg.get().copy.pop", "dict", "mmcv.dump", "neck_cfg.rfp_backbone.get", "ds_cfg.pop", "mmdet.datasets.replace_ImageToTensor", "torch.cuda.current_device", "Config.fromfile.get"], "function", ["home.repos.pwc.inspect_result.strongwolf_dw.None.test.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "eval", "or", "args", ".", "format_only", "or", "args", ".", "show", "or", "args", ".", "show_dir", ",", "(", "'Please specify at least one operation (save/eval/format/show the '", "\n", "'results / save the results) with the argument \"--out\", \"--eval\"'", "\n", "', \"--format-only\", \"--show\" or \"--show-dir\"'", ")", "\n", "\n", "if", "args", ".", "eval", "and", "args", ".", "format_only", ":", "\n", "        ", "raise", "ValueError", "(", "'--eval and --format_only cannot be both specified'", ")", "\n", "\n", "", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "if", "cfg", ".", "model", ".", "get", "(", "'neck'", ")", ":", "\n", "        ", "if", "isinstance", "(", "cfg", ".", "model", ".", "neck", ",", "list", ")", ":", "\n", "            ", "for", "neck_cfg", "in", "cfg", ".", "model", ".", "neck", ":", "\n", "                ", "if", "neck_cfg", ".", "get", "(", "'rfp_backbone'", ")", ":", "\n", "                    ", "if", "neck_cfg", ".", "rfp_backbone", ".", "get", "(", "'pretrained'", ")", ":", "\n", "                        ", "neck_cfg", ".", "rfp_backbone", ".", "pretrained", "=", "None", "\n", "", "", "", "", "elif", "cfg", ".", "model", ".", "neck", ".", "get", "(", "'rfp_backbone'", ")", ":", "\n", "            ", "if", "cfg", ".", "model", ".", "neck", ".", "rfp_backbone", ".", "get", "(", "'pretrained'", ")", ":", "\n", "                ", "cfg", ".", "model", ".", "neck", ".", "rfp_backbone", ".", "pretrained", "=", "None", "\n", "\n", "# in case the test dataset is concatenated", "\n", "", "", "", "samples_per_gpu", "=", "1", "\n", "if", "isinstance", "(", "cfg", ".", "data", ".", "test", ",", "dict", ")", ":", "\n", "        ", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "samples_per_gpu", "=", "cfg", ".", "data", ".", "test", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "\n", "if", "samples_per_gpu", ">", "1", ":", "\n", "# Replace 'ImageToTensor' to 'DefaultFormatBundle'", "\n", "            ", "cfg", ".", "data", ".", "test", ".", "pipeline", "=", "replace_ImageToTensor", "(", "\n", "cfg", ".", "data", ".", "test", ".", "pipeline", ")", "\n", "", "", "elif", "isinstance", "(", "cfg", ".", "data", ".", "test", ",", "list", ")", ":", "\n", "        ", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", ":", "\n", "            ", "ds_cfg", ".", "test_mode", "=", "True", "\n", "", "samples_per_gpu", "=", "max", "(", "\n", "[", "ds_cfg", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", "]", ")", "\n", "if", "samples_per_gpu", ">", "1", ":", "\n", "            ", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", ":", "\n", "                ", "ds_cfg", ".", "pipeline", "=", "replace_ImageToTensor", "(", "ds_cfg", ".", "pipeline", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "# allows not to create", "\n", "if", "args", ".", "work_dir", "is", "not", "None", "and", "rank", "==", "0", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "args", ".", "work_dir", ")", ")", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "json_file", "=", "osp", ".", "join", "(", "args", ".", "work_dir", ",", "f'eval_{timestamp}.json'", ")", "\n", "\n", "# build the dataloader", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "samples_per_gpu", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "cfg", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "args", ".", "fuse_conv_bn", ":", "\n", "        ", "model", "=", "fuse_conv_bn", "(", "model", ")", "\n", "# old versions did not save class info in checkpoints, this walkaround is", "\n", "# for backward compatibility", "\n", "", "if", "'CLASSES'", "in", "checkpoint", ".", "get", "(", "'meta'", ",", "{", "}", ")", ":", "\n", "        ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "        ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ",", "args", ".", "show_dir", ",", "\n", "args", ".", "show_score_thr", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ",", "\n", "args", ".", "gpu_collect", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "if", "args", ".", "out", ":", "\n", "            ", "print", "(", "f'\\nwriting results to {args.out}'", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "", "kwargs", "=", "{", "}", "if", "args", ".", "eval_options", "is", "None", "else", "args", ".", "eval_options", "\n", "if", "args", ".", "format_only", ":", "\n", "            ", "dataset", ".", "format_results", "(", "outputs", ",", "**", "kwargs", ")", "\n", "", "if", "args", ".", "eval", ":", "\n", "            ", "eval_kwargs", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", ".", "copy", "(", ")", "\n", "# hard-code way to remove EvalHook args", "\n", "for", "key", "in", "[", "\n", "'interval'", ",", "'tmpdir'", ",", "'start'", ",", "'gpu_collect'", ",", "'save_best'", ",", "\n", "'rule'", "\n", "]", ":", "\n", "                ", "eval_kwargs", ".", "pop", "(", "key", ",", "None", ")", "\n", "", "eval_kwargs", ".", "update", "(", "dict", "(", "metric", "=", "args", ".", "eval", ",", "**", "kwargs", ")", ")", "\n", "metric", "=", "dataset", ".", "evaluate", "(", "outputs", ",", "**", "eval_kwargs", ")", "\n", "print", "(", "metric", ")", "\n", "metric_dict", "=", "dict", "(", "config", "=", "args", ".", "config", ",", "metric", "=", "metric", ")", "\n", "if", "args", ".", "work_dir", "is", "not", "None", "and", "rank", "==", "0", ":", "\n", "                ", "mmcv", ".", "dump", "(", "metric_dict", ",", "json_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.CenterPrior.__init__": [[14, 23], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "soft_prior", "=", "True", ",", "\n", "num_classes", "=", "80", ",", "\n", "strides", "=", "(", "8", ",", "16", ",", "32", ",", "64", ",", "128", ")", ")", ":", "\n", "        ", "super", "(", "CenterPrior", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_classes", ",", "2", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "sigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_classes", ",", "2", ")", "+", "0.11", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "soft_prior", "=", "soft_prior", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.CenterPrior.forward": [[24, 61], ["inside_gt_bbox_mask.clone.clone.clone", "len", "sum", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "slvl_points[].expand", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.exp().prod", "torch.exp().prod", "torch.exp().prod", "torch.exp().prod", "torch.exp().prod", "torch.exp().prod", "torch.exp().prod", "torch.exp().prod", "torch.exp().prod", "center_prior_list.append", "len", "gt_bboxes.new_zeros", "slvl_points.size", "len", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "anchor_points_list", ",", "gt_bboxes", ",", "labels", ",", "\n", "inside_gt_bbox_mask", ")", ":", "\n", "\n", "        ", "inside_gt_bbox_mask", "=", "inside_gt_bbox_mask", ".", "clone", "(", ")", "\n", "num_gts", "=", "len", "(", "labels", ")", "\n", "num_points", "=", "sum", "(", "[", "len", "(", "item", ")", "for", "item", "in", "anchor_points_list", "]", ")", "\n", "if", "num_gts", "==", "0", ":", "\n", "            ", "return", "gt_bboxes", ".", "new_zeros", "(", "num_points", ",", "\n", "num_gts", ")", ",", "inside_gt_bbox_mask", "\n", "", "center_prior_list", "=", "[", "]", "\n", "for", "slvl_points", ",", "stride", "in", "zip", "(", "anchor_points_list", ",", "self", ".", "strides", ")", ":", "\n", "# slvl_points: points from single level in FPN, has shape (h*w, 2)", "\n", "# single_level_points has shape (h*w, num_gt, 2)", "\n", "            ", "single_level_points", "=", "slvl_points", "[", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "\n", "(", "slvl_points", ".", "size", "(", "0", ")", ",", "len", "(", "gt_bboxes", ")", ",", "2", ")", ")", "\n", "gt_center_x", "=", "(", "(", "gt_bboxes", "[", ":", ",", "0", "]", "+", "gt_bboxes", "[", ":", ",", "2", "]", ")", "/", "2", ")", "\n", "gt_center_y", "=", "(", "(", "gt_bboxes", "[", ":", ",", "1", "]", "+", "gt_bboxes", "[", ":", ",", "3", "]", ")", "/", "2", ")", "\n", "gt_center", "=", "torch", ".", "stack", "(", "(", "gt_center_x", ",", "gt_center_y", ")", ",", "dim", "=", "1", ")", "\n", "gt_center", "=", "gt_center", "[", "None", "]", "\n", "# instance_center has shape (1, num_gt, 2)", "\n", "instance_center", "=", "self", ".", "mean", "[", "labels", "]", "[", "None", "]", "\n", "# instance_sigma has shape (1, num_gt, 2)", "\n", "instance_sigma", "=", "self", ".", "sigma", "[", "labels", "]", "[", "None", "]", "\n", "# distance has shape (num_points, num_gt, 2)", "\n", "distance", "=", "(", "(", "(", "single_level_points", "-", "gt_center", ")", "/", "float", "(", "stride", ")", "-", "\n", "instance_center", ")", "**", "2", ")", "\n", "center_prior", "=", "torch", ".", "exp", "(", "-", "distance", "/", "\n", "(", "2", "*", "instance_sigma", "**", "2", ")", ")", ".", "prod", "(", "dim", "=", "-", "1", ")", "\n", "center_prior_list", ".", "append", "(", "center_prior", ")", "\n", "", "center_prior_weights", "=", "torch", ".", "cat", "(", "center_prior_list", ",", "dim", "=", "0", ")", "\n", "if", "not", "self", ".", "soft_prior", ":", "\n", "            ", "prior_mask", "=", "center_prior_weights", ">", "0.3", "\n", "center_prior_weights", "[", "prior_mask", "]", "=", "1", "\n", "center_prior_weights", "[", "~", "prior_mask", "]", "=", "0", "\n", "\n", "", "center_prior_weights", "[", "~", "inside_gt_bbox_mask", "]", "=", "0", "\n", "return", "center_prior_weights", ",", "inside_gt_bbox_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead.__init__": [[65, 92], ["dict", "dict", "mmdet.models.AnchorFreeHead.__init__", "dw_head.CenterPrior", "dict"], "methods", ["home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "*", "args", ",", "\n", "soft_prior", "=", "True", ",", "\n", "reg_refine", "=", "True", ",", "\n", "prior_offset", "=", "0.5", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'GN'", ",", "num_groups", "=", "32", ",", "requires_grad", "=", "True", ")", ",", "\n", "init_cfg", "=", "dict", "(", "\n", "type", "=", "'Normal'", ",", "\n", "layer", "=", "'Conv2d'", ",", "\n", "std", "=", "0.01", ",", "\n", "override", "=", "dict", "(", "\n", "type", "=", "'Normal'", ",", "\n", "name", "=", "'conv_cls'", ",", "\n", "std", "=", "0.01", ",", "\n", "bias_prob", "=", "0.01", ")", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "with_reg_refine", "=", "reg_refine", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "\n", "conv_bias", "=", "True", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "init_cfg", "=", "init_cfg", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "center_prior", "=", "CenterPrior", "(", "\n", "soft_prior", "=", "soft_prior", ",", "\n", "num_classes", "=", "self", ".", "num_classes", ",", "\n", "strides", "=", "self", ".", "strides", ")", "\n", "self", ".", "prior_generator", ".", "offset", "=", "prior_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead.init_weights": [[93, 102], ["super().init_weights", "mmcv.cnn.bias_init_with_prob", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "dw_head.DWHead.reg_offset.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "super", "(", "DWHead", ",", "self", ")", ".", "init_weights", "(", ")", "\n", "bias_cls", "=", "bias_init_with_prob", "(", "0.02", ")", "\n", "normal_init", "(", "self", ".", "conv_cls", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "conv_reg", ",", "std", "=", "0.01", ",", "bias", "=", "4.0", ")", "\n", "normal_init", "(", "self", ".", "conv_centerness", ",", "std", "=", "0.01", ")", "\n", "if", "self", ".", "with_reg_refine", ":", "\n", "            ", "normal_init", "(", "self", ".", "reg_offset", ",", "std", "=", "0.01", ")", "\n", "self", ".", "reg_offset", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead._init_layers": [[103, 109], ["super()._init_layers", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.Scale"], "methods", ["home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead._init_layers"], ["", "", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "_init_layers", "(", ")", "\n", "self", ".", "conv_centerness", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "1", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "scales", "=", "nn", ".", "ModuleList", "(", "[", "Scale", "(", "1.0", ")", "for", "_", "in", "self", ".", "strides", "]", ")", "\n", "if", "self", ".", "with_reg_refine", ":", "\n", "            ", "self", ".", "reg_offset", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "4", "*", "2", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead.deform_sampling": [[110, 115], ["feat.new_ones", "mmcv.ops.deform_conv2d"], "methods", ["None"], ["", "", "def", "deform_sampling", "(", "self", ",", "feat", ",", "offset", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "feat", ".", "shape", "\n", "weight", "=", "feat", ".", "new_ones", "(", "c", ",", "1", ",", "1", ",", "1", ")", "\n", "y", "=", "deform_conv2d", "(", "feat", ",", "offset", ",", "weight", ",", "1", ",", "0", ",", "1", ",", "c", ",", "c", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead.forward": [[116, 119], ["mmdet.core.multi_apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "return", "multi_apply", "(", "self", ".", "forward_single", ",", "feats", ",", "self", ".", "scales", ",", "\n", "self", ".", "strides", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead.forward_single": [[120, 142], ["super().forward_single", "dw_head.DWHead.conv_centerness", "scale().float", "torch.relu", "torch.relu", "torch.relu", "torch.relu.permute().reshape", "dw_head.DWHead.prior_generator.single_level_grid_priors", "points.repeat.repeat.repeat", "mmdet.core.distance2bbox().reshape().permute", "dw_head.DWHead.reg_offset", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "dw_head.DWHead.deform_sampling", "torch.relu", "torch.relu", "torch.relu", "scale", "dw_head.DWHead.strides.index", "mmdet.core.distance2bbox().reshape().permute.contiguous", "torch.stack.contiguous", "torch.stack.contiguous", "torch.stack.contiguous", "mmdet.core.bbox2distance().reshape().permute().contiguous", "torch.relu.permute", "mmdet.core.distance2bbox().reshape", "mmdet.core.bbox2distance().reshape().permute", "mmdet.core.distance2bbox", "mmdet.core.bbox2distance().reshape", "mmdet.core.bbox2distance", "torch.relu.permute().reshape", "torch.relu.permute"], "methods", ["home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead.forward_single", "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead.deform_sampling"], ["", "def", "forward_single", "(", "self", ",", "x", ",", "scale", ",", "stride", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "cls_score", ",", "bbox_pred", ",", "cls_feat", ",", "reg_feat", "=", "super", "(", ")", ".", "forward_single", "(", "x", ")", "\n", "centerness", "=", "self", ".", "conv_centerness", "(", "reg_feat", ")", "\n", "bbox_pred", "=", "scale", "(", "bbox_pred", ")", ".", "float", "(", ")", "\n", "bbox_pred", "=", "F", ".", "relu", "(", "bbox_pred", ")", "\n", "bbox_pred", "*=", "stride", "\n", "if", "self", ".", "with_reg_refine", ":", "\n", "            ", "reg_dist", "=", "bbox_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "points", "=", "self", ".", "prior_generator", ".", "single_level_grid_priors", "(", "(", "h", ",", "w", ")", ",", "self", ".", "strides", ".", "index", "(", "stride", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "points", "=", "points", ".", "repeat", "(", "b", ",", "1", ")", "\n", "decoded_bbox_preds", "=", "distance2bbox", "(", "points", ",", "reg_dist", ")", ".", "reshape", "(", "b", ",", "h", ",", "w", ",", "4", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "reg_offset", "=", "self", ".", "reg_offset", "(", "reg_feat", ")", "\n", "bbox_pred_d", "=", "bbox_pred", "/", "stride", "\n", "reg_offset", "=", "torch", ".", "stack", "(", "[", "reg_offset", "[", ":", ",", "0", "]", ",", "reg_offset", "[", ":", ",", "1", "]", "-", "bbox_pred_d", "[", ":", ",", "0", "]", ",", "reg_offset", "[", ":", ",", "2", "]", "-", "bbox_pred_d", "[", ":", ",", "1", "]", ",", "reg_offset", "[", ":", ",", "3", "]", ",", "\n", "reg_offset", "[", ":", ",", "4", "]", ",", "reg_offset", "[", ":", ",", "5", "]", "+", "bbox_pred_d", "[", ":", ",", "2", "]", ",", "\n", "reg_offset", "[", ":", ",", "6", "]", "+", "bbox_pred_d", "[", ":", ",", "3", "]", ",", "reg_offset", "[", ":", ",", "7", "]", ",", "]", ",", "1", ")", "\n", "bbox_pred", "=", "self", ".", "deform_sampling", "(", "decoded_bbox_preds", ".", "contiguous", "(", ")", ",", "reg_offset", ".", "contiguous", "(", ")", ")", "\n", "bbox_pred", "=", "F", ".", "relu", "(", "bbox2distance", "(", "points", ",", "bbox_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", ")", ".", "reshape", "(", "b", ",", "h", ",", "w", ",", "4", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "", "return", "cls_score", ",", "bbox_pred", ",", "centerness", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead._loss_single": [[143, 193], ["len", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "p_neg_weight.detach.detach.detach", "neg_loss.sum.sum.sum", "p_pos_weight.detach.detach.detach", "range", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "cls_loss.sum", "loc_loss.sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "t", "t.min", "min", "idxs.any", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "t.max", "dw_head.DWHead._loss_single.normalize"], "methods", ["None"], ["", "def", "_loss_single", "(", "self", ",", "cls_score", ",", "objectness", ",", "reg_loss", ",", "gt_labels", ",", "\n", "center_prior_weights", ",", "ious", ",", "inside_gt_bbox_mask", ")", ":", "\n", "        ", "num_gts", "=", "len", "(", "gt_labels", ")", "\n", "joint_conf", "=", "(", "cls_score", "*", "objectness", ")", "\n", "#To more precisely estimate the consistency degree between cls and reg heads, we represent IoU score as an expentional function of the reg loss.", "\n", "p_loc", "=", "torch", ".", "exp", "(", "-", "reg_loss", "*", "5", ")", "\n", "p_cls", "=", "(", "cls_score", "*", "objectness", ")", "[", ":", ",", "gt_labels", "]", "\n", "p_pos", "=", "p_cls", "*", "p_loc", "\n", "\n", "p_neg_weight", "=", "torch", ".", "ones_like", "(", "joint_conf", ")", "\n", "neg_metrics", "=", "torch", ".", "zeros_like", "(", "ious", ")", ".", "fill_", "(", "-", "1", ")", "\n", "alpha", "=", "2", "\n", "t", "=", "lambda", "x", ":", "1", "/", "(", "0.5", "**", "alpha", "-", "1", ")", "*", "x", "**", "alpha", "-", "1", "/", "(", "0.5", "**", "alpha", "-", "1", ")", "\n", "if", "num_gts", ">", "0", ":", "\n", "            ", "def", "normalize", "(", "x", ")", ":", "\n", "                ", "x_", "=", "t", "(", "x", ")", "\n", "t1", "=", "x_", ".", "min", "(", ")", "\n", "t2", "=", "min", "(", "1.", ",", "x_", ".", "max", "(", ")", ")", "\n", "y", "=", "(", "x_", "-", "t1", "+", "EPS", ")", "/", "(", "t2", "-", "t1", "+", "EPS", ")", "\n", "y", "[", "x", "<", "0.5", "]", "=", "1", "\n", "return", "y", "\n", "", "for", "instance_idx", "in", "range", "(", "num_gts", ")", ":", "\n", "                ", "idxs", "=", "inside_gt_bbox_mask", "[", ":", ",", "instance_idx", "]", "\n", "if", "idxs", ".", "any", "(", ")", ":", "\n", "                    ", "neg_metrics", "[", "idxs", ",", "instance_idx", "]", "=", "normalize", "(", "ious", "[", "idxs", ",", "instance_idx", "]", ")", "\n", "", "", "foreground_idxs", "=", "torch", ".", "nonzero", "(", "neg_metrics", "!=", "-", "1", ",", "as_tuple", "=", "True", ")", "\n", "p_neg_weight", "[", "foreground_idxs", "[", "0", "]", ",", "\n", "gt_labels", "[", "foreground_idxs", "[", "1", "]", "]", "]", "=", "neg_metrics", "[", "foreground_idxs", "]", "\n", "\n", "", "p_neg_weight", "=", "p_neg_weight", ".", "detach", "(", ")", "\n", "neg_avg_factor", "=", "(", "1", "-", "p_neg_weight", ")", ".", "sum", "(", ")", "\n", "p_neg_weight", "=", "p_neg_weight", "*", "joint_conf", "**", "2", "\n", "neg_loss", "=", "p_neg_weight", "*", "F", ".", "binary_cross_entropy", "(", "joint_conf", ",", "torch", ".", "zeros_like", "(", "joint_conf", ")", ",", "reduction", "=", "'none'", ")", "\n", "neg_loss", "=", "neg_loss", ".", "sum", "(", ")", "\n", "\n", "p_pos_weight", "=", "(", "torch", ".", "exp", "(", "5", "*", "p_pos", ")", "*", "p_pos", "*", "center_prior_weights", ")", "/", "(", "torch", ".", "exp", "(", "3", "*", "p_pos", ")", "*", "p_pos", "*", "center_prior_weights", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", ".", "clamp", "(", "min", "=", "EPS", ")", "\n", "p_pos_weight", "=", "p_pos_weight", ".", "detach", "(", ")", "\n", "\n", "cls_loss", "=", "F", ".", "binary_cross_entropy", "(", "\n", "p_cls", ",", "\n", "torch", ".", "ones_like", "(", "p_cls", ")", ",", "\n", "reduction", "=", "'none'", ")", "*", "p_pos_weight", "\n", "loc_loss", "=", "F", ".", "binary_cross_entropy", "(", "\n", "p_loc", ",", "\n", "torch", ".", "ones_like", "(", "p_loc", ")", ",", "\n", "reduction", "=", "'none'", ")", "*", "p_pos_weight", "\n", "cls_loss", "=", "cls_loss", ".", "sum", "(", ")", "*", "0.25", "\n", "loc_loss", "=", "loc_loss", ".", "sum", "(", ")", "*", "0.25", "\n", "\n", "return", "cls_loss", ",", "loc_loss", ",", "neg_loss", ",", "neg_avg_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead.loss": [[194, 274], ["mmcv.runner.force_fp32", "sum", "dw_head.DWHead.prior_generator.grid_priors", "dw_head.DWHead.get_targets", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.models.dense_heads.paa_head.levels_to_images", "mmdet.models.dense_heads.paa_head.levels_to_images", "mmdet.models.dense_heads.paa_head.levels_to_images", "len", "zip", "mmdet.core.multi_apply", "mmdet.core.reduce_mean().clamp_", "sum().float", "mmdet.core.reduce_mean().clamp_", "dict", "len", "len", "len", "dw_head.DWHead.center_prior", "center_prior_weight_list.append", "temp_inside_gt_bbox_mask_list.append", "gt_bboxe.reshape.reshape.size", "mlvl_points[].expand().reshape", "gt_bboxe.reshape.reshape.reshape", "bbox_pred[].expand().reshape", "mmdet.core.distance2bbox", "mmdet.core.distance2bbox", "dw_head.DWHead.loss_bbox", "reg_loss_list.append", "item.sigmoid", "item.sigmoid", "sum", "sum", "sum", "len", "featmap.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mmdet.core.bbox_overlaps", "ious.new_zeros.new_zeros.reshape", "ious_list.append", "dw_head.DWHead.reshape", "mmdet.core.reduce_mean", "sum", "mmdet.core.reduce_mean", "mlvl_points[].expand", "bbox_pred[].expand", "ious.new_zeros.new_zeros.new_zeros", "bbox_pred.new_tensor", "item.data.sum"], "methods", ["home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead.get_targets"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_scores'", ",", "'bbox_preds'", ",", "'objectnesses'", ")", ")", "\n", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "objectnesses", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_metas", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "==", "len", "(", "objectnesses", ")", "\n", "all_num_gt", "=", "sum", "(", "[", "len", "(", "gt_bbox", ")", "for", "gt_bbox", "in", "gt_bboxes", "]", ")", "\n", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "all_level_points", "=", "self", ".", "prior_generator", ".", "grid_priors", "(", "featmap_sizes", ",", "bbox_preds", "[", "0", "]", ".", "dtype", ",", "\n", "bbox_preds", "[", "0", "]", ".", "device", ")", "\n", "inside_gt_bbox_mask_list", ",", "bbox_targets_list", "=", "self", ".", "get_targets", "(", "\n", "all_level_points", ",", "gt_bboxes", ")", "\n", "\n", "center_prior_weight_list", "=", "[", "]", "\n", "temp_inside_gt_bbox_mask_list", "=", "[", "]", "\n", "for", "gt_bboxe", ",", "gt_label", ",", "inside_gt_bbox_mask", "in", "zip", "(", "gt_bboxes", ",", "gt_labels", ",", "inside_gt_bbox_mask_list", ")", ":", "\n", "            ", "center_prior_weight", ",", "inside_gt_bbox_mask", "=", "self", ".", "center_prior", "(", "all_level_points", ",", "gt_bboxe", ",", "gt_label", ",", "inside_gt_bbox_mask", ")", "\n", "center_prior_weight_list", ".", "append", "(", "center_prior_weight", ")", "\n", "temp_inside_gt_bbox_mask_list", ".", "append", "(", "inside_gt_bbox_mask", ")", "\n", "", "inside_gt_bbox_mask_list", "=", "temp_inside_gt_bbox_mask_list", "\n", "\n", "mlvl_points", "=", "torch", ".", "cat", "(", "all_level_points", ",", "dim", "=", "0", ")", "\n", "bbox_preds", "=", "levels_to_images", "(", "bbox_preds", ")", "\n", "cls_scores", "=", "levels_to_images", "(", "cls_scores", ")", "\n", "objectnesses", "=", "levels_to_images", "(", "objectnesses", ")", "\n", "\n", "reg_loss_list", "=", "[", "]", "\n", "ious_list", "=", "[", "]", "\n", "num_points", "=", "len", "(", "mlvl_points", ")", "\n", "\n", "for", "bbox_pred", ",", "gt_bboxe", ",", "inside_gt_bbox_mask", "in", "zip", "(", "\n", "bbox_preds", ",", "bbox_targets_list", ",", "inside_gt_bbox_mask_list", ")", ":", "\n", "            ", "temp_num_gt", "=", "gt_bboxe", ".", "size", "(", "1", ")", "\n", "expand_mlvl_points", "=", "mlvl_points", "[", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "\n", "num_points", ",", "temp_num_gt", ",", "2", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "gt_bboxe", "=", "gt_bboxe", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "expand_bbox_pred", "=", "bbox_pred", "[", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "\n", "num_points", ",", "temp_num_gt", ",", "4", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "decoded_bbox_preds", "=", "distance2bbox", "(", "expand_mlvl_points", ",", "\n", "expand_bbox_pred", ")", "\n", "decoded_target_preds", "=", "distance2bbox", "(", "expand_mlvl_points", ",", "gt_bboxe", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "ious", "=", "bbox_overlaps", "(", "\n", "decoded_bbox_preds", ",", "decoded_target_preds", ",", "is_aligned", "=", "True", ")", "\n", "ious", "=", "ious", ".", "reshape", "(", "num_points", ",", "temp_num_gt", ")", "\n", "if", "temp_num_gt", ":", "\n", "                    ", "ious", "=", "ious", "\n", "", "else", ":", "\n", "                    ", "ious", "=", "ious", ".", "new_zeros", "(", "num_points", ",", "temp_num_gt", ")", "\n", "", "ious", "[", "~", "inside_gt_bbox_mask", "]", "=", "0", "\n", "ious_list", ".", "append", "(", "ious", ")", "\n", "", "loss_bbox", "=", "self", ".", "loss_bbox", "(", "\n", "decoded_bbox_preds", ",", "\n", "decoded_target_preds", ",", "\n", "weight", "=", "None", ",", "\n", "reduction_override", "=", "'none'", ")", "\n", "reg_loss_list", ".", "append", "(", "loss_bbox", ".", "reshape", "(", "num_points", ",", "temp_num_gt", ")", ")", "\n", "\n", "", "cls_scores", "=", "[", "item", ".", "sigmoid", "(", ")", "for", "item", "in", "cls_scores", "]", "\n", "objectnesses", "=", "[", "item", ".", "sigmoid", "(", ")", "for", "item", "in", "objectnesses", "]", "\n", "cls_loss_list", ",", "loc_loss_list", ",", "cls_neg_loss_list", ",", "neg_avg_factor_list", "=", "multi_apply", "(", "self", ".", "_loss_single", ",", "cls_scores", ",", "\n", "objectnesses", ",", "reg_loss_list", ",", "gt_labels", ",", "center_prior_weight_list", ",", "ious_list", ",", "inside_gt_bbox_mask_list", ")", "\n", "\n", "pos_avg_factor", "=", "reduce_mean", "(", "\n", "bbox_pred", ".", "new_tensor", "(", "all_num_gt", ")", ")", ".", "clamp_", "(", "min", "=", "1", ")", "\n", "neg_avg_factor", "=", "sum", "(", "item", ".", "data", ".", "sum", "(", ")", "\n", "for", "item", "in", "neg_avg_factor_list", ")", ".", "float", "(", ")", "\n", "neg_avg_factor", "=", "reduce_mean", "(", "neg_avg_factor", ")", ".", "clamp_", "(", "min", "=", "1", ")", "\n", "cls_loss", "=", "sum", "(", "cls_loss_list", ")", "/", "pos_avg_factor", "\n", "loc_loss", "=", "sum", "(", "loc_loss_list", ")", "/", "pos_avg_factor", "\n", "cls_neg_loss", "=", "sum", "(", "cls_neg_loss_list", ")", "/", "neg_avg_factor", "\n", "\n", "loss", "=", "dict", "(", "\n", "loss_cls_pos", "=", "cls_loss", ",", "loss_loc", "=", "loc_loss", ",", "loss_cls_neg", "=", "cls_neg_loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead.get_targets": [[275, 280], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.core.multi_apply"], "methods", ["None"], ["", "def", "get_targets", "(", "self", ",", "points", ",", "gt_bboxes_list", ")", ":", "\n", "        ", "concat_points", "=", "torch", ".", "cat", "(", "points", ",", "dim", "=", "0", ")", "\n", "inside_gt_bbox_mask_list", ",", "bbox_targets_list", "=", "multi_apply", "(", "\n", "self", ".", "_get_target_single", ",", "gt_bboxes_list", ",", "points", "=", "concat_points", ")", "\n", "return", "inside_gt_bbox_mask_list", ",", "bbox_targets_list", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead._get_target_single": [[281, 300], ["points.size", "gt_bboxes[].expand.size", "gt_bboxes[].expand", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.new_zeros", "torch.stack.new_zeros", "torch.stack.new_zeros", "torch.stack.min", "torch.stack.min", "torch.stack.min"], "methods", ["None"], ["", "def", "_get_target_single", "(", "self", ",", "gt_bboxes", ",", "points", ")", ":", "\n", "        ", "num_points", "=", "points", ".", "size", "(", "0", ")", "\n", "num_gts", "=", "gt_bboxes", ".", "size", "(", "0", ")", "\n", "gt_bboxes", "=", "gt_bboxes", "[", "None", "]", ".", "expand", "(", "num_points", ",", "num_gts", ",", "4", ")", "\n", "xs", ",", "ys", "=", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", "\n", "xs", "=", "xs", "[", ":", ",", "None", "]", "\n", "ys", "=", "ys", "[", ":", ",", "None", "]", "\n", "left", "=", "xs", "-", "gt_bboxes", "[", "...", ",", "0", "]", "\n", "right", "=", "gt_bboxes", "[", "...", ",", "2", "]", "-", "xs", "\n", "top", "=", "ys", "-", "gt_bboxes", "[", "...", ",", "1", "]", "\n", "bottom", "=", "gt_bboxes", "[", "...", ",", "3", "]", "-", "ys", "\n", "bbox_targets", "=", "torch", ".", "stack", "(", "(", "left", ",", "top", ",", "right", ",", "bottom", ")", ",", "-", "1", ")", "\n", "if", "num_gts", ":", "\n", "            ", "inside_gt_bbox_mask", "=", "bbox_targets", ".", "min", "(", "-", "1", ")", "[", "0", "]", ">", "0", "\n", "", "else", ":", "\n", "            ", "inside_gt_bbox_mask", "=", "bbox_targets", ".", "new_zeros", "(", "(", "num_points", ",", "num_gts", ")", ",", "\n", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "", "return", "inside_gt_bbox_mask", ",", "bbox_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead.get_bboxes": [[301, 331], ["len", "dw_head.DWHead.prior_generator.grid_priors", "range", "len", "len", "len", "len", "mmdet.core.select_single_mlvl", "mmdet.core.select_single_mlvl", "mmdet.core.select_single_mlvl", "dw_head.DWHead._get_bboxes_single", "result_list.append", "range"], "methods", ["home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead._get_bboxes_single"], ["", "def", "get_bboxes", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "score_factors", "=", "None", ",", "\n", "img_metas", "=", "None", ",", "\n", "cfg", "=", "None", ",", "\n", "rescale", "=", "False", ",", "\n", "with_nms", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "==", "len", "(", "score_factors", ")", "\n", "num_levels", "=", "len", "(", "cls_scores", ")", "\n", "\n", "featmap_sizes", "=", "[", "cls_scores", "[", "i", "]", ".", "shape", "[", "-", "2", ":", "]", "for", "i", "in", "range", "(", "num_levels", ")", "]", "\n", "mlvl_priors", "=", "self", ".", "prior_generator", ".", "grid_priors", "(", "featmap_sizes", ",", "bbox_preds", "[", "0", "]", ".", "dtype", ",", "\n", "bbox_preds", "[", "0", "]", ".", "device", ")", "\n", "result_list", "=", "[", "]", "\n", "\n", "for", "img_id", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "img_meta", "=", "img_metas", "[", "img_id", "]", "\n", "cls_score_list", "=", "select_single_mlvl", "(", "cls_scores", ",", "img_id", ")", "\n", "bbox_pred_list", "=", "select_single_mlvl", "(", "bbox_preds", ",", "img_id", ")", "\n", "score_factor_list", "=", "select_single_mlvl", "(", "score_factors", ",", "img_id", ")", "\n", "\n", "results", "=", "self", ".", "_get_bboxes_single", "(", "cls_score_list", ",", "bbox_pred_list", ",", "\n", "score_factor_list", ",", "mlvl_priors", ",", "\n", "img_meta", ",", "cfg", ",", "rescale", ",", "with_nms", ",", "\n", "**", "kwargs", ")", "\n", "result_list", ".", "append", "(", "results", ")", "\n", "", "return", "result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.strongwolf_dw.None.dw_head.DWHead._get_bboxes_single": [[332, 386], ["cfg.get", "enumerate", "dw_head.DWHead._bbox_post_process", "zip", "bbox_pred.permute().reshape.permute().reshape.permute().reshape", "score_factor.permute().reshape().sigmoid.permute().reshape().sigmoid.permute().reshape().sigmoid", "cls_score.permute().reshape.permute().reshape.permute().reshape", "cls_score.permute().reshape.permute().reshape.sigmoid", "mmdet.core.filter_scores_and_topk", "dw_head.DWHead.bbox_coder.decode", "mlvl_bboxes.append", "mlvl_scores.append", "mlvl_labels.append", "mlvl_score_factors.append", "dict", "cls_score.permute().reshape.permute().reshape.size", "bbox_pred.permute().reshape.permute().reshape.size", "bbox_pred.permute().reshape.permute().reshape.permute", "score_factor.permute().reshape().sigmoid.permute().reshape().sigmoid.permute().reshape", "cls_score.permute().reshape.permute().reshape.permute", "score_factor.permute().reshape().sigmoid.permute().reshape().sigmoid.permute"], "methods", ["None"], ["", "def", "_get_bboxes_single", "(", "self", ",", "\n", "cls_score_list", ",", "\n", "bbox_pred_list", ",", "\n", "score_factor_list", ",", "\n", "mlvl_priors", ",", "\n", "img_meta", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ",", "\n", "with_nms", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "cfg", "=", "self", ".", "test_cfg", "if", "cfg", "is", "None", "else", "cfg", "\n", "img_shape", "=", "img_meta", "[", "'img_shape'", "]", "\n", "nms_pre", "=", "cfg", ".", "get", "(", "'nms_pre'", ",", "-", "1", ")", "\n", "\n", "mlvl_bboxes", "=", "[", "]", "\n", "mlvl_scores", "=", "[", "]", "\n", "mlvl_labels", "=", "[", "]", "\n", "mlvl_score_factors", "=", "[", "]", "\n", "for", "level_idx", ",", "(", "cls_score", ",", "bbox_pred", ",", "score_factor", ",", "priors", ")", "in", "enumerate", "(", "zip", "(", "cls_score_list", ",", "bbox_pred_list", ",", "\n", "score_factor_list", ",", "mlvl_priors", ")", ")", ":", "\n", "\n", "            ", "assert", "cls_score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "bbox_pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "\n", "bbox_pred", "=", "bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "\n", "score_factor", "=", "score_factor", ".", "permute", "(", "1", ",", "2", ",", "\n", "0", ")", ".", "reshape", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "\n", "cls_score", "=", "cls_score", ".", "permute", "(", "1", ",", "2", ",", "\n", "0", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "\n", "scores", "=", "cls_score", ".", "sigmoid", "(", ")", "\n", "results", "=", "filter_scores_and_topk", "(", "\n", "scores", "*", "score_factor", "[", ":", ",", "None", "]", ",", "cfg", ".", "score_thr", ",", "nms_pre", ",", "\n", "dict", "(", "bbox_pred", "=", "bbox_pred", ",", "priors", "=", "priors", ")", ")", "\n", "_", ",", "labels", ",", "keep_idxs", ",", "filtered_results", "=", "results", "\n", "scores", "=", "scores", "[", "keep_idxs", ",", "labels", "]", "\n", "bbox_pred", "=", "filtered_results", "[", "'bbox_pred'", "]", "\n", "priors", "=", "filtered_results", "[", "'priors'", "]", "\n", "\n", "score_factor", "=", "score_factor", "[", "keep_idxs", "]", "\n", "\n", "bboxes", "=", "self", ".", "bbox_coder", ".", "decode", "(", "\n", "priors", ",", "bbox_pred", ",", "max_shape", "=", "img_shape", ")", "\n", "\n", "mlvl_bboxes", ".", "append", "(", "bboxes", ")", "\n", "mlvl_scores", ".", "append", "(", "scores", ")", "\n", "mlvl_labels", ".", "append", "(", "labels", ")", "\n", "mlvl_score_factors", ".", "append", "(", "score_factor", ")", "\n", "\n", "", "return", "self", ".", "_bbox_post_process", "(", "mlvl_scores", ",", "mlvl_labels", ",", "mlvl_bboxes", ",", "\n", "img_meta", "[", "'scale_factor'", "]", ",", "cfg", ",", "rescale", ",", "\n", "with_nms", ",", "mlvl_score_factors", ",", "**", "kwargs", ")", "\n", "", "", ""]]}