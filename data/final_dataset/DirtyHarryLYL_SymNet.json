{"home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_symnet_multi.SolverWrapper.trainval_model": [[56, 91], ["test_symnet_multi.SolverWrapper.logger", "test_symnet_multi.SolverWrapper.info", "test_symnet_multi.SolverWrapper.construct_graph", "test_symnet_multi.SolverWrapper.initialize", "sess.graph.finalize", "utils.utils.evaluator.Multi_Evaluator", "collections.defaultdict", "tqdm.tqdm", "collections.defaultdict.items", "test_symnet_multi.SolverWrapper.info", "enumerate", "test_symnet_multi.SolverWrapper.network.test_step", "all_attr.append", "score_op.keys", "utils.utils.evaluator.Multi_Evaluator.", "print", "len", "torch.from_numpy", "all_pred[].append", "numpy.concatenate", "numpy.concatenate", "utils.utils.utils.formated_multi_result"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.construct_graph", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.initialize", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet_multi.Network.test_step", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.formated_multi_result"], ["    ", "def", "trainval_model", "(", "self", ",", "sess", ",", "max_epoch", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "'test_model'", ")", "\n", "logger", ".", "info", "(", "'Begin testing'", ")", "\n", "\n", "score_op", ",", "train_summary_op", "=", "self", ".", "construct_graph", "(", "sess", ")", "\n", "self", ".", "initialize", "(", "sess", ")", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "\n", "evaluator", "=", "Multi_Evaluator", "(", ")", "\n", "all_attr", "=", "[", "]", "\n", "all_pred", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "image_ind", ",", "batch", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "self", ".", "test_dataloader", ")", ",", "total", "=", "len", "(", "self", ".", "test_dataloader", ")", ",", "postfix", "=", "'test'", ")", ":", "\n", "\n", "            ", "predictions", "=", "self", ".", "network", ".", "test_step", "(", "sess", ",", "batch", ",", "score_op", ")", "\n", "all_attr", ".", "append", "(", "torch", ".", "from_numpy", "(", "batch", "[", "1", "]", ")", ")", "\n", "for", "key", "in", "score_op", ".", "keys", "(", ")", ":", "\n", "                ", "all_pred", "[", "key", "]", ".", "append", "(", "predictions", "[", "key", "]", ")", "\n", "\n", "\n", "", "", "for", "name", ",", "pred", "in", "all_pred", ".", "items", "(", ")", ":", "\n", "            ", "mAP", ",", "mAUC", "=", "evaluator", "(", "\n", "np", ".", "concatenate", "(", "pred", ",", "0", ")", ",", "\n", "np", ".", "concatenate", "(", "all_attr", ",", "0", ")", "\n", ")", "\n", "report_dict", "=", "{", "\n", "'mAP'", ":", "mAP", ",", "\n", "'mAUC'", ":", "mAUC", ",", "\n", "'name'", ":", "self", ".", "args", ".", "name", ",", "\n", "'epoch'", ":", "self", ".", "args", ".", "epoch", ",", "\n", "}", "\n", "\n", "print", "(", "\"%s: \"", "%", "(", "name", ")", "+", "utils", ".", "formated_multi_result", "(", "report_dict", ")", ")", "\n", "", "logger", ".", "info", "(", "'Finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_symnet_multi.main": [[28, 50], ["logging.getLogger", "run_symnet_multi.make_parser", "run_symnet_multi.make_parser.parse_args", "utils.utils.display_args", "logging.getLogger.info", "utils.dataset.get_dataloader", "logging.getLogger.info", "importlib.import_module", "importlib.import_module.Network", "utils.utils.create_session", "test_symnet_multi.SolverWrapper", "test_symnet.SolverWrapper.trainval_model"], "function", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_gczsl.make_parser", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.display_args", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.__init__.get_dataloader", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.create_session", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.trainval_model"], ["def", "main", "(", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'MAIN'", ")", "\n", "\n", "parser", "=", "make_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "network", "=", "'symnet_multi'", "\n", "utils", ".", "display_args", "(", "args", ",", "logger", ")", "\n", "logger", ".", "info", "(", "\"Loading dataset\"", ")", "\n", "\n", "test_dataloader", "=", "dataset", ".", "get_dataloader", "(", "args", ".", "data", ",", "'test'", ",", "\n", "batchsize", "=", "args", ".", "test_bz", ",", "args", "=", "args", ")", "\n", "\n", "\n", "\n", "logger", ".", "info", "(", "\"Loading network and solver\"", ")", "\n", "network", "=", "importlib", ".", "import_module", "(", "'network.'", "+", "args", ".", "network", ")", "\n", "net", "=", "network", ".", "Network", "(", "test_dataloader", ",", "args", ")", "\n", "\n", "\n", "with", "utils", ".", "create_session", "(", ")", "as", "sess", ":", "\n", "        ", "sw", "=", "SolverWrapper", "(", "net", ",", "test_dataloader", ",", "args", ")", "\n", "sw", ".", "trainval_model", "(", "sess", ",", "args", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_symnet_gczsl.SolverWrapper.__init__": [[59, 67], ["test_symnet_gczsl.SolverWrapper.logger", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "test_symnet_gczsl.SolverWrapper.logger().info", "test_symnet_gczsl.SolverWrapper.logger"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger"], ["    ", "def", "__init__", "(", "self", ",", "network", ",", "test_dataloader", ",", "args", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "\"init\"", ")", "\n", "self", ".", "network", "=", "network", "\n", "self", ".", "test_dataloader", "=", "test_dataloader", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "trained_weight", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "WEIGHT_ROOT_DIR", ",", "args", ".", "name", ",", "\"snapshot_epoch_%d.ckpt\"", "%", "args", ".", "epoch", ")", "\n", "self", ".", "logger", "(", "\"init\"", ")", ".", "info", "(", "\"pretrained model <= \"", "+", "self", ".", "trained_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_symnet_gczsl.SolverWrapper.construct_graph": [[69, 79], ["test_symnet_gczsl.SolverWrapper.logger", "sess.graph.as_default", "test_symnet_gczsl.SolverWrapper.network.build_network", "tensorflow.set_random_seed", "tensorflow.set_random_seed"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.build_network"], ["", "def", "construct_graph", "(", "self", ",", "sess", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "'construct_graph'", ")", "\n", "\n", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "if", "cfg", ".", "RANDOM_SEED", "is", "not", "None", ":", "\n", "                ", "tf", ".", "set_random_seed", "(", "cfg", ".", "RANDOM_SEED", ")", "\n", "\n", "", "_", ",", "score_op", ",", "_", "=", "self", ".", "network", ".", "build_network", "(", ")", "\n", "\n", "", "return", "score_op", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_symnet_gczsl.SolverWrapper.trainval_model": [[82, 122], ["test_symnet_gczsl.SolverWrapper.logger", "test_symnet_gczsl.SolverWrapper.info", "test_symnet_gczsl.SolverWrapper.construct_graph", "test_symnet_gczsl.SolverWrapper.initialize", "sess.graph.finalize", "utils.utils.evaluator.GCZSL_Evaluator", "collections.defaultdict", "tqdm.tqdm", "collections.defaultdict.items", "test_symnet_gczsl.SolverWrapper.info", "enumerate", "test_symnet_gczsl.SolverWrapper.network.test_step", "all_attr_lab.append", "all_obj_lab.append", "test_symnet_gczsl.SolverWrapper.keys", "test_symnet_gczsl.SolverWrapper.info", "test_symnet_gczsl.SolverWrapper.test", "len", "torch.from_numpy", "torch.from_numpy", "all_pred[].append"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.construct_graph", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.initialize", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet_multi.Network.test_step", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_gczsl.SolverWrapper.test"], ["", "def", "trainval_model", "(", "self", ",", "sess", ",", "max_epoch", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "'train_model'", ")", "\n", "logger", ".", "info", "(", "'Begin training'", ")", "\n", "\n", "score_op", "=", "self", ".", "construct_graph", "(", "sess", ")", "\n", "#for x in tf.global_variables():", "\n", "#    print(x.name)", "\n", "\n", "self", ".", "initialize", "(", "sess", ")", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "\n", "\n", "evaluator", "=", "GCZSL_Evaluator", "(", "self", ".", "test_dataloader", ".", "dataset", ")", "\n", "\n", "\n", "############################## test czsl ################################", "\n", "\n", "all_attr_lab", "=", "[", "]", "\n", "all_obj_lab", "=", "[", "]", "\n", "all_pred", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "image_ind", ",", "batch", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "self", ".", "test_dataloader", ")", ",", "total", "=", "len", "(", "self", ".", "test_dataloader", ")", ",", "postfix", "=", "'test'", ")", ":", "\n", "\n", "            ", "predictions", "=", "self", ".", "network", ".", "test_step", "(", "sess", ",", "batch", ",", "score_op", ")", "# ordereddict of [score_pair, score_a, score_o]", "\n", "\n", "attr_truth", ",", "obj_truth", "=", "torch", ".", "from_numpy", "(", "batch", "[", "1", "]", ")", ",", "torch", ".", "from_numpy", "(", "batch", "[", "2", "]", ")", "\n", "all_attr_lab", ".", "append", "(", "attr_truth", ")", "\n", "all_obj_lab", ".", "append", "(", "obj_truth", ")", "\n", "\n", "for", "key", "in", "score_op", ".", "keys", "(", ")", ":", "\n", "                ", "all_pred", "[", "key", "]", ".", "append", "(", "predictions", "[", "key", "]", "[", "0", "]", ")", "\n", "\n", "\n", "", "", "for", "key", ",", "value", "in", "all_pred", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "key", ")", "\n", "report", "=", "self", ".", "test", "(", "self", ".", "args", ".", "epoch", ",", "evaluator", ",", "value", ",", "all_attr_lab", ",", "all_obj_lab", ")", "\n", "\n", "\n", "", "logger", ".", "info", "(", "'Finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_symnet_gczsl.main": [[29, 50], ["logging.getLogger", "run_symnet_gczsl.make_parser", "run_symnet_gczsl.make_parser.parse_args", "utils.utils.display_args", "logging.getLogger.info", "utils.dataset.get_dataloader", "logging.getLogger.info", "importlib.import_module", "importlib.import_module.Network", "utils.utils.create_session", "test_symnet_gczsl.SolverWrapper", "run_symnet_gczsl.SolverWrapper.trainval_model"], "function", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_gczsl.make_parser", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.display_args", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.__init__.get_dataloader", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.create_session", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.trainval_model"], ["def", "main", "(", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'MAIN'", ")", "\n", "\n", "parser", "=", "make_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "utils", ".", "display_args", "(", "args", ",", "logger", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loading dataset\"", ")", "\n", "test_dataloader", "=", "dataset", ".", "get_dataloader", "(", "args", ".", "data", ",", "args", ".", "test_set", ",", "\n", "batchsize", "=", "args", ".", "test_bz", ",", "obj_pred", "=", "args", ".", "obj_pred", ")", "\n", "\n", "\n", "\n", "logger", ".", "info", "(", "\"Loading network and solver\"", ")", "\n", "network", "=", "importlib", ".", "import_module", "(", "'network.'", "+", "args", ".", "network", ")", "\n", "net", "=", "network", ".", "Network", "(", "test_dataloader", ",", "args", ")", "\n", "\n", "\n", "with", "utils", ".", "create_session", "(", ")", "as", "sess", ":", "\n", "        ", "sw", "=", "SolverWrapper", "(", "net", ",", "test_dataloader", ",", "args", ")", "\n", "sw", ".", "trainval_model", "(", "sess", ",", "args", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_multi.SolverWrapper.trainval_model": [[69, 152], ["run_symnet_multi.SolverWrapper.logger", "run_symnet_multi.SolverWrapper.info", "run_symnet_multi.SolverWrapper.construct_graph", "run_symnet_multi.SolverWrapper.initialize", "sess.graph.finalize", "tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "utils.utils.evaluator.Multi_Evaluator", "collections.defaultdict", "range", "tensorflow.summary.FileWriter.close", "run_symnet_multi.SolverWrapper.info", "tqdm.tqdm", "tensorflow.summary.FileWriter.add_summary", "enumerate", "isinstance", "run_symnet_multi.SolverWrapper.network.train_step", "float", "collections.defaultdict", "tqdm.tqdm", "collections.defaultdict.items", "run_symnet_multi.SolverWrapper.snapshot", "len", "lr.eval", "enumerate", "run_symnet_multi.SolverWrapper.network.test_step", "all_attr.append", "score_op.keys", "utils.utils.evaluator.Multi_Evaluator.", "all_report.keys", "tensorflow.Summary", "tensorflow.Summary", "report_dict.items", "tensorflow.summary.FileWriter.add_summary", "len", "torch.from_numpy", "all_pred[].append", "numpy.concatenate", "numpy.concatenate", "print", "tensorflow.Summary.value.add", "utils.utils.utils.formated_multi_result"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.construct_graph", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.initialize", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.train_step", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.snapshot", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet_multi.Network.test_step", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.formated_multi_result"], ["    ", "def", "trainval_model", "(", "self", ",", "sess", ",", "max_epoch", ")", ":", "\n", "        ", "self", ".", "criterion", "=", "'mAUC'", "\n", "logger", "=", "self", ".", "logger", "(", "'train_model'", ")", "\n", "logger", ".", "info", "(", "'Begin training'", ")", "\n", "\n", "lr", ",", "score_op", ",", "train_op", ",", "train_summary_op", "=", "self", ".", "construct_graph", "(", "sess", ")", "\n", "self", ".", "initialize", "(", "sess", ")", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "\n", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "log_dir", ",", "sess", ".", "graph", ")", "\n", "evaluator", "=", "Multi_Evaluator", "(", ")", "\n", "\n", "best_report", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epoch_num", "+", "1", ",", "max_epoch", "+", "1", ")", ":", "\n", "################################## train ####################################", "\n", "            ", "summary", "=", "None", "\n", "for", "batch_ind", ",", "batch", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "self", ".", "train_dataloader", ")", ",", "\n", "total", "=", "len", "(", "self", ".", "train_dataloader", ")", ",", "\n", "postfix", "=", "'epoch %d/%d'", "%", "(", "epoch", ",", "max_epoch", ")", ")", ":", "\n", "\n", "                ", "if", "isinstance", "(", "lr", ",", "float", ")", ":", "\n", "                    ", "eval_lr", "=", "lr", "\n", "", "else", ":", "\n", "                    ", "eval_lr", "=", "lr", ".", "eval", "(", ")", "\n", "\n", "", "summary", "=", "self", ".", "network", ".", "train_step", "(", "sess", ",", "batch", ",", "eval_lr", ",", "train_op", ",", "train_summary_op", ")", "\n", "\n", "", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "epoch", ")", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "test_freq", ">", "0", "and", "epoch", "%", "self", ".", "args", ".", "test_freq", "==", "0", ":", "\n", "############################## test ################################", "\n", "\n", "                ", "all_attr", "=", "[", "]", "\n", "all_pred", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "image_ind", ",", "batch", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "self", ".", "test_dataloader", ")", ",", "total", "=", "len", "(", "self", ".", "test_dataloader", ")", ",", "postfix", "=", "'test'", ")", ":", "\n", "\n", "                    ", "predictions", "=", "self", ".", "network", ".", "test_step", "(", "sess", ",", "batch", ",", "score_op", ")", "\n", "\n", "all_attr", ".", "append", "(", "torch", ".", "from_numpy", "(", "batch", "[", "1", "]", ")", ")", "\n", "for", "key", "in", "score_op", ".", "keys", "(", ")", ":", "\n", "                        ", "all_pred", "[", "key", "]", ".", "append", "(", "predictions", "[", "key", "]", ")", "\n", "\n", "\n", "", "", "all_report", "=", "{", "'Current'", ":", "{", "}", ",", "'Best'", ":", "{", "}", "}", "\n", "for", "name", ",", "pred", "in", "all_pred", ".", "items", "(", ")", ":", "\n", "                    ", "mAP", ",", "mAUC", "=", "evaluator", "(", "\n", "np", ".", "concatenate", "(", "pred", ",", "0", ")", ",", "\n", "np", ".", "concatenate", "(", "all_attr", ",", "0", ")", "\n", ")", "\n", "# save to tensorboard", "\n", "report_dict", "=", "{", "\n", "'mAP'", ":", "mAP", ",", "\n", "'mAUC'", ":", "mAUC", ",", "\n", "'name'", ":", "self", ".", "args", ".", "name", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "\n", "if", "self", ".", "criterion", "not", "in", "best_report", "[", "name", "]", "or", "report_dict", "[", "self", ".", "criterion", "]", ">", "best_report", "[", "name", "]", "[", "self", ".", "criterion", "]", ":", "\n", "                        ", "best_report", "[", "name", "]", "=", "report_dict", "\n", "\n", "# print test results", "\n", "", "all_report", "[", "'Current'", "]", "[", "name", "]", "=", "report_dict", "\n", "all_report", "[", "'Best'", "]", "[", "name", "]", "=", "best_report", "[", "name", "]", "\n", "for", "key", "in", "all_report", ".", "keys", "(", ")", ":", "\n", "                        ", "print", "(", "\"%s %s: \"", "%", "(", "key", ",", "name", ")", "+", "utils", ".", "formated_multi_result", "(", "all_report", "[", "key", "]", "[", "name", "]", ")", ")", "\n", "\n", "# save to tensorboard", "\n", "", "summary", "=", "tf", ".", "Summary", "(", ")", "\n", "for", "key", ",", "value", "in", "report_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "key", "not", "in", "[", "'name'", ",", "'epoch'", "]", ":", "\n", "                            ", "summary", ".", "value", ".", "add", "(", "tag", "=", "\"%s/%s\"", "%", "(", "name", ",", "key", ")", ",", "simple_value", "=", "value", ")", "\n", "", "", "writer", ".", "add_summary", "(", "summary", ",", "epoch", ")", "\n", "\n", "", "", "if", "epoch", "%", "self", ".", "args", ".", "snapshot_freq", "==", "0", ":", "\n", "                ", "self", ".", "snapshot", "(", "sess", ",", "epoch", ")", "\n", "\n", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_multi.make_parser": [[28, 35], ["run_symnet.make_parser", "run_symnet.make_parser.add_argument", "run_symnet.make_parser.add_argument", "run_symnet.make_parser.add_argument", "run_symnet.make_parser.add_argument"], "function", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_gczsl.make_parser"], ["def", "make_parser", "(", ")", ":", "\n", "    ", "parser", "=", "make_basic_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda_atten\"", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda_multi_rmd\"", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--sample_bar\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--bce_neg_weight\"", ",", "default", "=", "0.", ",", "type", "=", "float", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_multi.main": [[37, 64], ["logging.getLogger", "run_symnet.make_parser", "run_symnet.make_parser.parse_args", "utils.utils.duplication_check", "utils.utils.display_args", "logging.getLogger.info", "utils.dataset.get_dataloader", "utils.dataset.get_dataloader", "logging.getLogger.info", "importlib.import_module", "importlib.import_module.Network", "utils.utils.create_session", "run_symnet_multi.SolverWrapper", "run_symnet.SolverWrapper.trainval_model"], "function", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_gczsl.make_parser", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.duplication_check", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.display_args", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.__init__.get_dataloader", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.__init__.get_dataloader", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.create_session", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.trainval_model"], ["", "def", "main", "(", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'MAIN'", ")", "\n", "\n", "parser", "=", "make_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "network", "=", "'symnet_multi'", "\n", "\n", "utils", ".", "duplication_check", "(", "args", ")", "\n", "utils", ".", "display_args", "(", "args", ",", "logger", ")", "\n", "logger", ".", "info", "(", "\"Loading dataset\"", ")", "\n", "\n", "\n", "train_dataloader", "=", "dataset", ".", "get_dataloader", "(", "args", ".", "data", ",", "'train'", ",", "\n", "batchsize", "=", "args", ".", "bz", ",", "args", "=", "args", ")", "\n", "test_dataloader", "=", "dataset", ".", "get_dataloader", "(", "args", ".", "data", ",", "'test'", ",", "\n", "batchsize", "=", "args", ".", "test_bz", ",", "args", "=", "args", ")", "\n", "\n", "\n", "\n", "logger", ".", "info", "(", "\"Loading network and solver\"", ")", "\n", "network", "=", "importlib", ".", "import_module", "(", "'network.'", "+", "args", ".", "network", ")", "\n", "net", "=", "network", ".", "Network", "(", "train_dataloader", ",", "args", ")", "\n", "\n", "\n", "with", "utils", ".", "create_session", "(", ")", "as", "sess", ":", "\n", "        ", "sw", "=", "SolverWrapper", "(", "net", ",", "train_dataloader", ",", "test_dataloader", ",", "args", ")", "\n", "sw", ".", "trainval_model", "(", "sess", ",", "args", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_symnet.SolverWrapper.__init__": [[60, 71], ["test_symnet.SolverWrapper.logger", "os.join", "os.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "test_symnet.SolverWrapper.logger().info", "test_symnet.SolverWrapper.logger"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger"], ["    ", "def", "__init__", "(", "self", ",", "network", ",", "test_dataloader", ",", "args", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "\"init\"", ")", "\n", "self", ".", "network", "=", "network", "\n", "\n", "self", ".", "test_dataloader", "=", "test_dataloader", "\n", "self", ".", "weight_dir", "=", "osp", ".", "join", "(", "cfg", ".", "WEIGHT_ROOT_DIR", ",", "args", ".", "name", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "\n", "self", ".", "trained_weight", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "WEIGHT_ROOT_DIR", ",", "args", ".", "name", ",", "\"snapshot_epoch_%d.ckpt\"", "%", "args", ".", "epoch", ")", "\n", "self", ".", "logger", "(", "\"init\"", ")", ".", "info", "(", "\"pretrained model <= \"", "+", "self", ".", "trained_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_symnet.SolverWrapper.construct_graph": [[75, 87], ["test_symnet.SolverWrapper.logger", "sess.graph.as_default", "test_symnet.SolverWrapper.network.build_network", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.set_random_seed", "tensorflow.set_random_seed"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.build_network"], ["", "def", "construct_graph", "(", "self", ",", "sess", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "'construct_graph'", ")", "\n", "\n", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "if", "cfg", ".", "RANDOM_SEED", "is", "not", "None", ":", "\n", "                ", "tf", ".", "set_random_seed", "(", "cfg", ".", "RANDOM_SEED", ")", "\n", "\n", "", "loss_op", ",", "score_op", ",", "train_summary_op", "=", "self", ".", "network", ".", "build_network", "(", ")", "\n", "\n", "global_step", "=", "tf", ".", "Variable", "(", "self", ".", "args", ".", "epoch", ",", "trainable", "=", "False", ")", "\n", "\n", "", "return", "score_op", ",", "train_summary_op", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_symnet.SolverWrapper.trainval_model": [[90, 154], ["test_symnet.SolverWrapper.logger", "test_symnet.SolverWrapper.info", "test_symnet.SolverWrapper.construct_graph", "test_symnet.SolverWrapper.initialize", "sess.graph.finalize", "utils.utils.evaluator.CZSL_Evaluator", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "tqdm.tqdm", "collections.defaultdict.keys", "test_symnet.SolverWrapper.info", "enumerate", "test_symnet.SolverWrapper.network.test_step", "score_op.keys", "zip", "map", "map", "torch.mean().item", "torch.mean().item", "print", "len", "torch.from_numpy", "torch.from_numpy", "utils.utils.evaluator.CZSL_Evaluator.score_model", "utils.utils.evaluator.CZSL_Evaluator.evaluate_predictions", "accuracies_pair[].append", "utils.utils.evaluator.CZSL_Evaluator.evaluate_only_attr_obj", "accuracies_attr[].append", "accuracies_obj[].append", "map", "x.item", "torch.mean", "torch.mean", "utils.utils.utils.formated_czsl_result", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.construct_graph", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.initialize", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet_multi.Network.test_step", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.score_model", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.evaluate_predictions", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.CZSL_Evaluator.evaluate_only_attr_obj", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.formated_czsl_result"], ["", "def", "trainval_model", "(", "self", ",", "sess", ",", "max_epoch", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "'train_model'", ")", "\n", "logger", ".", "info", "(", "'Begin training'", ")", "\n", "\n", "score_op", ",", "train_summary_op", "=", "self", ".", "construct_graph", "(", "sess", ")", "\n", "#for x in tf.global_variables():", "\n", "#    print(x.name)", "\n", "\n", "self", ".", "initialize", "(", "sess", ")", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "evaluator", "=", "CZSL_Evaluator", "(", "self", ".", "test_dataloader", ".", "dataset", ",", "self", ".", "network", ")", "\n", "\n", "\n", "############################## test czsl ################################", "\n", "\n", "accuracies_pair", "=", "defaultdict", "(", "list", ")", "\n", "accuracies_attr", "=", "defaultdict", "(", "list", ")", "\n", "accuracies_obj", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "image_ind", ",", "batch", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "self", ".", "test_dataloader", ")", ",", "total", "=", "len", "(", "self", ".", "test_dataloader", ")", ",", "postfix", "=", "'test'", ")", ":", "\n", "\n", "            ", "predictions", "=", "self", ".", "network", ".", "test_step", "(", "sess", ",", "batch", ",", "score_op", ")", "# ordereddict of [score_pair, score_a, score_o]", "\n", "\n", "attr_truth", ",", "obj_truth", "=", "batch", "[", "1", "]", ",", "batch", "[", "2", "]", "\n", "attr_truth", ",", "obj_truth", "=", "torch", ".", "from_numpy", "(", "attr_truth", ")", ",", "torch", ".", "from_numpy", "(", "obj_truth", ")", "\n", "\n", "match_stats", "=", "[", "]", "\n", "for", "key", "in", "score_op", ".", "keys", "(", ")", ":", "\n", "                ", "p_pair", ",", "p_a", ",", "p_o", "=", "predictions", "[", "key", "]", "\n", "pair_results", "=", "evaluator", ".", "score_model", "(", "p_pair", ",", "obj_truth", ")", "\n", "match_stats", "=", "evaluator", ".", "evaluate_predictions", "(", "pair_results", ",", "attr_truth", ",", "obj_truth", ")", "\n", "accuracies_pair", "[", "key", "]", ".", "append", "(", "match_stats", ")", "# 0/1 sequence of t/f", "\n", "\n", "a_match", ",", "o_match", "=", "evaluator", ".", "evaluate_only_attr_obj", "(", "p_a", ",", "attr_truth", ",", "p_o", ",", "obj_truth", ")", "\n", "\n", "accuracies_attr", "[", "key", "]", ".", "append", "(", "a_match", ")", "\n", "accuracies_obj", "[", "key", "]", ".", "append", "(", "o_match", ")", "\n", "\n", "\n", "\n", "", "", "for", "name", "in", "accuracies_pair", ".", "keys", "(", ")", ":", "\n", "            ", "accuracies", "=", "accuracies_pair", "[", "name", "]", "\n", "accuracies", "=", "zip", "(", "*", "accuracies", ")", "\n", "accuracies", "=", "map", "(", "torch", ".", "mean", ",", "map", "(", "torch", ".", "cat", ",", "accuracies", ")", ")", "\n", "attr_acc", ",", "obj_acc", ",", "closed_1_acc", ",", "closed_2_acc", ",", "closed_3_acc", ",", "_", ",", "objoracle_acc", "=", "map", "(", "lambda", "x", ":", "x", ".", "item", "(", ")", ",", "accuracies", ")", "\n", "\n", "real_attr_acc", "=", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "accuracies_attr", "[", "name", "]", ")", ")", ".", "item", "(", ")", "\n", "real_obj_acc", "=", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "accuracies_obj", "[", "name", "]", ")", ")", ".", "item", "(", ")", "\n", "\n", "report_dict", "=", "{", "\n", "'real_attr_acc'", ":", "real_attr_acc", ",", "\n", "'real_obj_acc'", ":", "real_obj_acc", ",", "\n", "'top1_acc'", ":", "closed_1_acc", ",", "\n", "'top2_acc'", ":", "closed_2_acc", ",", "\n", "'top3_acc'", ":", "closed_3_acc", ",", "\n", "'name'", ":", "self", ".", "args", ".", "name", ",", "\n", "'epoch'", ":", "self", ".", "args", ".", "epoch", ",", "\n", "}", "\n", "\n", "print", "(", "name", "+", "\": \"", "+", "utils", ".", "formated_czsl_result", "(", "report_dict", ")", ")", "\n", "\n", "\n", "", "logger", ".", "info", "(", "'Finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_symnet.main": [[29, 51], ["logging.getLogger", "run_symnet.make_parser", "run_symnet.make_parser.parse_args", "utils.utils.display_args", "logging.getLogger.info", "utils.dataset.get_dataloader", "logging.getLogger.info", "importlib.import_module", "importlib.import_module.Network", "utils.utils.create_session", "test_symnet.SolverWrapper", "test_symnet.SolverWrapper.trainval_model"], "function", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_gczsl.make_parser", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.display_args", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.__init__.get_dataloader", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.create_session", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.trainval_model"], ["def", "main", "(", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'MAIN'", ")", "\n", "\n", "parser", "=", "make_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "utils", ".", "display_args", "(", "args", ",", "logger", ")", "\n", "\n", "\n", "logger", ".", "info", "(", "\"Loading dataset\"", ")", "\n", "test_dataloader", "=", "dataset", ".", "get_dataloader", "(", "args", ".", "data", ",", "'test'", ",", "\n", "batchsize", "=", "args", ".", "test_bz", ",", "obj_pred", "=", "args", ".", "obj_pred", ")", "\n", "\n", "\n", "\n", "logger", ".", "info", "(", "\"Loading network and solver\"", ")", "\n", "network", "=", "importlib", ".", "import_module", "(", "'network.'", "+", "args", ".", "network", ")", "\n", "net", "=", "network", ".", "Network", "(", "test_dataloader", ",", "args", ")", "\n", "\n", "\n", "with", "utils", ".", "create_session", "(", ")", "as", "sess", ":", "\n", "        ", "sw", "=", "SolverWrapper", "(", "net", ",", "test_dataloader", ",", "args", ")", "\n", "sw", ".", "trainval_model", "(", "sess", ",", "args", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet.SolverWrapper.__init__": [[181, 218], ["run_symnet.SolverWrapper.logger", "os.join", "os.join", "os.join", "os.join", "run_symnet.SolverWrapper.info", "run_symnet.SolverWrapper.info", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "run_symnet.SolverWrapper.logger().info", "run_symnet.SolverWrapper.clear_folder", "run_symnet.SolverWrapper.clear_folder", "run_symnet.SolverWrapper.logger"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.clear_folder", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.clear_folder", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger"], ["    ", "def", "__init__", "(", "self", ",", "network", ",", "train_dataloader", ",", "test_dataloader", ",", "args", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "\"init\"", ")", "\n", "self", ".", "network", "=", "network", "\n", "\n", "if", "args", ".", "network", "==", "'fc_obj'", ":", "\n", "            ", "self", ".", "criterion", "=", "'real_obj_acc'", "\n", "self", ".", "key_score_name", "=", "\"score_fc\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "criterion", "=", "'top1_acc'", "\n", "self", ".", "key_score_name", "=", "\"score_rmd\"", "\n", "\n", "\n", "", "self", ".", "train_dataloader", "=", "train_dataloader", "\n", "self", ".", "test_dataloader", "=", "test_dataloader", "\n", "\n", "self", ".", "weight_dir", "=", "osp", ".", "join", "(", "cfg", ".", "WEIGHT_ROOT_DIR", ",", "args", ".", "name", ")", "\n", "self", ".", "log_dir", "=", "osp", ".", "join", "(", "cfg", ".", "LOG_ROOT_DIR", ",", "args", ".", "name", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "logger", ".", "info", "(", "\"training weight  => \"", "+", "self", ".", "weight_dir", ")", "\n", "logger", ".", "info", "(", "\"training log     => \"", "+", "self", ".", "log_dir", ")", "\n", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "weight_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "weight_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "log_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "log_dir", ")", "\n", "\n", "", "if", "args", ".", "trained_weight", "is", "not", "None", ":", "\n", "            ", "self", ".", "trained_weight", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "WEIGHT_ROOT_DIR", ",", "args", ".", "trained_weight", ")", "\n", "self", ".", "logger", "(", "\"init\"", ")", ".", "info", "(", "\"pretrained model <= \"", "+", "self", ".", "trained_weight", ")", "\n", "if", "args", ".", "weight_type", "!=", "1", ":", "\n", "                ", "self", ".", "clear_folder", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "trained_weight", "=", "None", "\n", "self", ".", "clear_folder", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet.SolverWrapper.construct_graph": [[221, 256], ["run_symnet.SolverWrapper.logger", "sess.graph.as_default", "run_symnet.SolverWrapper.network.build_network", "tensorflow.Variable", "tensorflow.Variable", "run_symnet.SolverWrapper.set_lr_decay", "run_symnet.SolverWrapper.set_optimizer", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.train.Saver", "tensorflow.train.Saver", "tensorflow.set_random_seed", "tensorflow.set_random_seed", "tensorflow.control_dependencies", "tensorflow.control_dependencies", "run_symnet.SolverWrapper.compute_gradients", "run_symnet.SolverWrapper.apply_gradients", "int", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.group", "tensorflow.group", "[].split", "tensorflow.clip_by_norm", "tensorflow.clip_by_norm", "run_symnet.SolverWrapper.trained_weight.split"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.build_network", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.set_lr_decay", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.set_optimizer"], ["", "", "def", "construct_graph", "(", "self", ",", "sess", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "'construct_graph'", ")", "\n", "\n", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "if", "cfg", ".", "RANDOM_SEED", "is", "not", "None", ":", "\n", "                ", "tf", ".", "set_random_seed", "(", "cfg", ".", "RANDOM_SEED", ")", "\n", "\n", "", "loss_op", ",", "score_op", ",", "train_summary_op", "=", "self", ".", "network", ".", "build_network", "(", ")", "\n", "\n", "\n", "self", ".", "epoch_num", "=", "0", "\n", "if", "self", ".", "trained_weight", "is", "not", "None", "and", "self", ".", "args", ".", "weight_type", "==", "1", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "epoch_num", "=", "int", "(", "self", ".", "trained_weight", ".", "split", "(", "'.ckpt'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "\n", "", "", "global_step", "=", "tf", ".", "Variable", "(", "self", ".", "epoch_num", ",", "trainable", "=", "False", ")", "\n", "\n", "lr", "=", "self", ".", "set_lr_decay", "(", "global_step", ")", "\n", "optimizer", "=", "self", ".", "set_optimizer", "(", "lr", ")", "\n", "\n", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "tf", ".", "group", "(", "*", "update_ops", ")", "]", ")", ":", "\n", "                ", "grad", "=", "optimizer", ".", "compute_gradients", "(", "loss_op", ",", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "if", "self", ".", "args", ".", "clip_grad", ":", "\n", "                    ", "grad", "=", "[", "(", "tf", ".", "clip_by_norm", "(", "g", ",", "cfg", ".", "GRADIENT_CLIPPING", ")", ",", "var", ")", "for", "g", ",", "var", "in", "grad", "]", "\n", "\n", "", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "grad", ",", "global_step", "=", "global_step", ")", "\n", "\n", "\n", "", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "None", ")", "\n", "\n", "\n", "", "return", "lr", ",", "score_op", ",", "train_op", ",", "train_summary_op", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet.SolverWrapper.trainval_model": [[259, 370], ["run_symnet.SolverWrapper.logger", "run_symnet.SolverWrapper.info", "run_symnet.SolverWrapper.construct_graph", "run_symnet.SolverWrapper.initialize", "sess.graph.finalize", "tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "utils.utils.evaluator.CZSL_Evaluator", "collections.defaultdict", "range", "tensorflow.summary.FileWriter.close", "run_symnet.SolverWrapper.info", "tqdm.tqdm", "tensorflow.summary.FileWriter.add_summary", "enumerate", "isinstance", "run_symnet.SolverWrapper.network.train_step", "float", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "tqdm.tqdm", "collections.defaultdict.keys", "run_symnet.SolverWrapper.snapshot", "len", "lr.eval", "enumerate", "run_symnet.SolverWrapper.network.test_step", "torch.from_numpy", "torch.from_numpy", "score_op.keys", "zip", "map", "map", "torch.mean().item", "torch.mean().item", "all_report.keys", "tensorflow.Summary", "tensorflow.Summary", "report_dict.items", "tensorflow.summary.FileWriter.add_summary", "len", "utils.utils.evaluator.CZSL_Evaluator.score_model", "utils.utils.evaluator.CZSL_Evaluator.evaluate_predictions", "accuracies_pair[].append", "utils.utils.evaluator.CZSL_Evaluator.evaluate_only_attr_obj", "accuracies_attr[].append", "accuracies_obj[].append", "map", "print", "x.item", "torch.mean", "torch.mean", "tensorflow.Summary.value.add", "torch.cat", "torch.cat", "utils.utils.utils.formated_czsl_result"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.construct_graph", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.initialize", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.train_step", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.snapshot", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet_multi.Network.test_step", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.score_model", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.evaluate_predictions", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.CZSL_Evaluator.evaluate_only_attr_obj", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.formated_czsl_result"], ["", "def", "trainval_model", "(", "self", ",", "sess", ",", "max_epoch", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "'train_model'", ")", "\n", "logger", ".", "info", "(", "'Begin training'", ")", "\n", "\n", "lr", ",", "score_op", ",", "train_op", ",", "train_summary_op", "=", "self", ".", "construct_graph", "(", "sess", ")", "\n", "#for x in tf.global_variables():", "\n", "#    print(x.name)", "\n", "\n", "self", ".", "initialize", "(", "sess", ")", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "\n", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "log_dir", ",", "sess", ".", "graph", ")", "\n", "evaluator", "=", "CZSL_Evaluator", "(", "self", ".", "test_dataloader", ".", "dataset", ",", "self", ".", "network", ")", "\n", "best_report", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epoch_num", "+", "1", ",", "max_epoch", "+", "1", ")", ":", "\n", "############################# train ###############################", "\n", "            ", "summary", "=", "None", "\n", "for", "batch_ind", ",", "batch", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "self", ".", "train_dataloader", ")", ",", "\n", "total", "=", "len", "(", "self", ".", "train_dataloader", ")", ",", "\n", "postfix", "=", "'epoch %d/%d'", "%", "(", "epoch", ",", "max_epoch", ")", ")", ":", "\n", "\n", "                ", "if", "isinstance", "(", "lr", ",", "float", ")", ":", "\n", "                    ", "eval_lr", "=", "lr", "\n", "", "else", ":", "\n", "                    ", "eval_lr", "=", "lr", ".", "eval", "(", ")", "\n", "\n", "", "summary", "=", "self", ".", "network", ".", "train_step", "(", "\n", "sess", ",", "batch", ",", "eval_lr", ",", "\n", "train_op", ",", "train_summary_op", ")", "\n", "\n", "", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "epoch", ")", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "test_freq", ">", "0", "and", "epoch", "%", "self", ".", "args", ".", "test_freq", "==", "0", ":", "\n", "########################## test czsl ##########################", "\n", "\n", "                ", "accuracies_pair", "=", "defaultdict", "(", "list", ")", "\n", "accuracies_attr", "=", "defaultdict", "(", "list", ")", "\n", "accuracies_obj", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "image_ind", ",", "batch", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "self", ".", "test_dataloader", ")", ",", "total", "=", "len", "(", "self", ".", "test_dataloader", ")", ",", "postfix", "=", "'test'", ")", ":", "\n", "\n", "                    ", "predictions", "=", "self", ".", "network", ".", "test_step", "(", "sess", ",", "batch", ",", "score_op", ")", "\n", "\n", "attr_truth", "=", "torch", ".", "from_numpy", "(", "batch", "[", "1", "]", ")", "\n", "obj_truth", "=", "torch", ".", "from_numpy", "(", "batch", "[", "2", "]", ")", "\n", "\n", "for", "key", "in", "score_op", ".", "keys", "(", ")", ":", "\n", "                        ", "p_pair", ",", "p_a", ",", "p_o", "=", "predictions", "[", "key", "]", "\n", "pair_results", "=", "evaluator", ".", "score_model", "(", "p_pair", ",", "obj_truth", ")", "\n", "match_stats", "=", "evaluator", ".", "evaluate_predictions", "(", "\n", "pair_results", ",", "attr_truth", ",", "obj_truth", ")", "\n", "accuracies_pair", "[", "key", "]", ".", "append", "(", "match_stats", ")", "\n", "# 0/1 sequence of t/f", "\n", "\n", "a_match", ",", "o_match", "=", "evaluator", ".", "evaluate_only_attr_obj", "(", "\n", "p_a", ",", "attr_truth", ",", "p_o", ",", "obj_truth", ")", "\n", "\n", "accuracies_attr", "[", "key", "]", ".", "append", "(", "a_match", ")", "\n", "accuracies_obj", "[", "key", "]", ".", "append", "(", "o_match", ")", "\n", "\n", "\n", "\n", "", "", "all_report", "=", "{", "'Current'", ":", "{", "}", ",", "'Best'", ":", "{", "}", "}", "\n", "\n", "for", "name", "in", "accuracies_pair", ".", "keys", "(", ")", ":", "\n", "                    ", "accuracies", "=", "accuracies_pair", "[", "name", "]", "\n", "accuracies", "=", "zip", "(", "*", "accuracies", ")", "\n", "accuracies", "=", "map", "(", "torch", ".", "mean", ",", "map", "(", "torch", ".", "cat", ",", "accuracies", ")", ")", "\n", "attr_acc", ",", "obj_acc", ",", "closed_1_acc", ",", "closed_2_acc", ",", "closed_3_acc", ",", "_", ",", "objoracle_acc", "=", "map", "(", "lambda", "x", ":", "x", ".", "item", "(", ")", ",", "accuracies", ")", "\n", "\n", "real_attr_acc", "=", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "accuracies_attr", "[", "name", "]", ")", ")", ".", "item", "(", ")", "\n", "real_obj_acc", "=", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "accuracies_obj", "[", "name", "]", ")", ")", ".", "item", "(", ")", "\n", "\n", "report_dict", "=", "{", "\n", "'real_attr_acc'", ":", "real_attr_acc", ",", "\n", "'real_obj_acc'", ":", "real_obj_acc", ",", "\n", "'top1_acc'", ":", "closed_1_acc", ",", "\n", "'top2_acc'", ":", "closed_2_acc", ",", "\n", "'top3_acc'", ":", "closed_3_acc", ",", "\n", "'name'", ":", "self", ".", "args", ".", "name", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "\n", "if", "self", ".", "criterion", "not", "in", "best_report", "[", "name", "]", "or", "report_dict", "[", "self", ".", "criterion", "]", ">", "best_report", "[", "name", "]", "[", "self", ".", "criterion", "]", ":", "\n", "                        ", "best_report", "[", "name", "]", "=", "report_dict", "\n", "\n", "# print test results", "\n", "", "all_report", "[", "'Current'", "]", "[", "name", "]", "=", "report_dict", "\n", "all_report", "[", "'Best'", "]", "[", "name", "]", "=", "best_report", "[", "name", "]", "\n", "for", "key", "in", "all_report", ".", "keys", "(", ")", ":", "\n", "                        ", "print", "(", "\"%s %s: \"", "%", "(", "key", ",", "name", ")", "+", "utils", ".", "formated_czsl_result", "(", "all_report", "[", "key", "]", "[", "name", "]", ")", ")", "\n", "\n", "# save to tensorboard", "\n", "", "summary", "=", "tf", ".", "Summary", "(", ")", "\n", "for", "key", ",", "value", "in", "report_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "key", "not", "in", "[", "'name'", ",", "'epoch'", "]", ":", "\n", "                            ", "summary", ".", "value", ".", "add", "(", "tag", "=", "\"%s/%s\"", "%", "(", "name", ",", "key", ")", ",", "simple_value", "=", "value", ")", "\n", "", "", "writer", ".", "add_summary", "(", "summary", ",", "epoch", ")", "\n", "\n", "\n", "", "", "if", "epoch", "%", "self", ".", "args", ".", "snapshot_freq", "==", "0", ":", "\n", "                ", "self", ".", "snapshot", "(", "sess", ",", "epoch", ")", "\n", "\n", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet.make_parser": [[27, 142], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "make_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# basic training settings", "\n", "parser", ".", "add_argument", "(", "\"--name\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Experiment name\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "choices", "=", "[", "'MIT'", ",", "'UT'", ",", "'MITg'", ",", "'UTg'", ",", "'APY'", ",", "'SUN'", "]", ",", "\n", "help", "=", "\"Dataset name\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--network\"", ",", "type", "=", "str", ",", "default", "=", "'symnet'", ",", "\n", "help", "=", "\"Network name (the file name in `network` folder, but without suffix `.py`)\"", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "\"--epoch\"", ",", "type", "=", "int", ",", "default", "=", "500", ",", "\n", "help", "=", "\"Maximum epoch during training phase, or epoch to be tested during testing\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--bz\"", ",", "type", "=", "int", ",", "default", "=", "512", ",", "\n", "help", "=", "\"Train batch size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_bz\"", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "\n", "help", "=", "\"Test batch size\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--trained_weight\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Restore from a certain trained weight (relative path to './weights')\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight_type\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Type of the trained weight: 1-previous checkpoint(default), 2-pretrained classifier, 3-pretrained transformer\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--test_freq\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Frequency of testing (#epoch). Set to 0 to skip test phase\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--snapshot_freq\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "\"Frequency of saving snapshots (#epoch)\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--force\"", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"WARINING: clear experiment with duplicated name\"", ")", "\n", "\n", "\n", "# model settings", "\n", "\n", "parser", ".", "add_argument", "(", "\"--rmd_metric\"", ",", "type", "=", "str", ",", "default", "=", "'softmax'", ",", "\n", "help", "=", "\"Similarity metric in RMD classification\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--distance_metric\"", ",", "type", "=", "str", ",", "default", "=", "'L2'", ",", "\n", "help", "=", "\"Distance form\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--obj_pred\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Object prediction from pretrained model\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--wordvec\"", ",", "type", "=", "str", ",", "default", "=", "'glove'", ",", "\n", "help", "=", "\"Pre-extracted word vector type\"", ")", "\n", "\n", "\n", "\n", "# important hyper-parameters", "\n", "\n", "parser", ".", "add_argument", "(", "\"--rep_dim\"", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "\"Dimentionality of attribute/object representation\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "\n", "help", "=", "\"Learning rate\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--dropout\"", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Keep probability of dropout\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batchnorm\"", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Use batch normalization\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_class_weight\"", ",", "default", "=", "True", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Add weight between classes (default=true)\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--fc_att\"", ",", "type", "=", "int", ",", "default", "=", "[", "512", "]", ",", "nargs", "=", "'*'", ",", "\n", "help", "=", "\"#fc layers after word vector\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--fc_compress\"", ",", "type", "=", "int", ",", "default", "=", "[", "768", "]", ",", "nargs", "=", "'*'", ",", "\n", "help", "=", "\"#fc layers after hidden layer\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--fc_cls\"", ",", "type", "=", "int", ",", "default", "=", "[", "512", "]", ",", "nargs", "=", "'*'", ",", "\n", "help", "=", "\"#fc layers in classifiers\"", ")", "\n", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "\"--lambda_cls_attr\"", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda_cls_obj\"", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--lambda_trip\"", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--triplet_margin\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "\"Triplet loss margin\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--lambda_sym\"", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--lambda_axiom\"", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--remove_inv\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--remove_com\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--remove_clo\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--no_attention\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "\n", "\n", "# not so important", "\n", "parser", ".", "add_argument", "(", "\"--activation\"", ",", "type", "=", "str", ",", "default", "=", "'relu'", ",", "\n", "help", "=", "\"Activation function (relu, elu, leaky_relu, relu6)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--initializer\"", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Weight initializer for fc (default=xavier init, set a float number to use Gaussian init)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--optimizer\"", ",", "type", "=", "str", ",", "default", "=", "'sgd'", ",", "\n", "choices", "=", "[", "'sgd'", ",", "'adam'", ",", "'adamw'", ",", "'momentum'", ",", "'rmsprop'", "]", ",", "\n", "help", "=", "\"Type of optimizer (sgd, adam, momentum)\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--lr_decay_type\"", ",", "type", "=", "str", ",", "default", "=", "'no'", ",", "\n", "help", "=", "\"Type of Learning rate decay: no/exp/cos\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_decay_step\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "\"The first learning rate decay step (only for cos/exp)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_decay_rate\"", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "\"Decay rate of cos/exp\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--focal_loss\"", ",", "type", "=", "float", ",", "\n", "help", "=", "\"`gamma` in focal loss. default=0 (=CE)\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--clip_grad\"", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Use gradient clipping\"", ")", "\n", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet.main": [[145, 172], ["logging.getLogger", "run_symnet.make_parser", "make_parser.parse_args", "utils.utils.duplication_check", "utils.utils.display_args", "logging.getLogger.info", "utils.dataset.get_dataloader", "utils.dataset.get_dataloader", "logging.getLogger.info", "importlib.import_module", "importlib.import_module.Network", "utils.utils.create_session", "run_symnet.SolverWrapper", "run_symnet.SolverWrapper.trainval_model"], "function", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_gczsl.make_parser", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.duplication_check", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.display_args", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.__init__.get_dataloader", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.__init__.get_dataloader", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.create_session", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.trainval_model"], ["", "def", "main", "(", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'MAIN'", ")", "\n", "\n", "parser", "=", "make_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "utils", ".", "duplication_check", "(", "args", ")", "\n", "utils", ".", "display_args", "(", "args", ",", "logger", ")", "\n", "\n", "\n", "logger", ".", "info", "(", "\"Loading dataset\"", ")", "\n", "\n", "\n", "train_dataloader", "=", "dataset", ".", "get_dataloader", "(", "args", ".", "data", ",", "'train'", ",", "\n", "batchsize", "=", "args", ".", "bz", ")", "\n", "test_dataloader", "=", "dataset", ".", "get_dataloader", "(", "args", ".", "data", ",", "'test'", ",", "\n", "batchsize", "=", "args", ".", "test_bz", ",", "obj_pred", "=", "args", ".", "obj_pred", ")", "\n", "\n", "\n", "\n", "logger", ".", "info", "(", "\"Loading network and solver\"", ")", "\n", "network", "=", "importlib", ".", "import_module", "(", "'network.'", "+", "args", ".", "network", ")", "\n", "net", "=", "network", ".", "Network", "(", "train_dataloader", ",", "args", ")", "\n", "\n", "\n", "with", "utils", ".", "create_session", "(", ")", "as", "sess", ":", "\n", "        ", "sw", "=", "SolverWrapper", "(", "net", ",", "train_dataloader", ",", "test_dataloader", ",", "args", ")", "\n", "sw", ".", "trainval_model", "(", "sess", ",", "args", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_gczsl.SolverWrapper.trainval_model": [[74, 147], ["run_symnet_gczsl.SolverWrapper.logger", "run_symnet_gczsl.SolverWrapper.info", "run_symnet_gczsl.SolverWrapper.construct_graph", "run_symnet_gczsl.SolverWrapper.initialize", "sess.graph.finalize", "tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "utils.utils.evaluator.GCZSL_Evaluator", "collections.defaultdict", "range", "tensorflow.summary.FileWriter.close", "run_symnet_gczsl.SolverWrapper.info", "tqdm.tqdm", "tensorflow.summary.FileWriter.add_summary", "enumerate", "isinstance", "run_symnet_gczsl.SolverWrapper.network.train_step", "float", "collections.defaultdict", "tqdm.tqdm", "collections.defaultdict.items", "run_symnet_gczsl.SolverWrapper.snapshot", "len", "lr.eval", "enumerate", "run_symnet_gczsl.SolverWrapper.network.test_step", "all_attr_lab.append", "all_obj_lab.append", "score_op.keys", "run_symnet_gczsl.SolverWrapper.info", "run_symnet_gczsl.SolverWrapper.test", "tensorflow.Summary", "tensorflow.Summary", "run_symnet_gczsl.SolverWrapper.items", "tensorflow.summary.FileWriter.add_summary", "len", "torch.from_numpy", "torch.from_numpy", "all_pred[].append", "tensorflow.Summary.value.add"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.construct_graph", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.initialize", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.train_step", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.snapshot", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet_multi.Network.test_step", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_gczsl.SolverWrapper.test"], ["    ", "def", "trainval_model", "(", "self", ",", "sess", ",", "max_epoch", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "'train_model'", ")", "\n", "logger", ".", "info", "(", "'Begin training'", ")", "\n", "\n", "lr", ",", "score_op", ",", "train_op", ",", "train_summary_op", "=", "self", ".", "construct_graph", "(", "sess", ")", "\n", "#for x in tf.global_variables():", "\n", "#    print(x.name)", "\n", "\n", "self", ".", "initialize", "(", "sess", ")", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "\n", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "log_dir", ",", "sess", ".", "graph", ")", "\n", "evaluator", "=", "GCZSL_Evaluator", "(", "self", ".", "test_dataloader", ".", "dataset", ")", "\n", "\n", "best_report", "=", "defaultdict", "(", "dict", ")", "\n", "score_history", "=", "[", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epoch_num", "+", "1", ",", "max_epoch", "+", "1", ")", ":", "\n", "################################## train ####################################", "\n", "            ", "summary", "=", "None", "\n", "for", "batch_ind", ",", "batch", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "self", ".", "train_dataloader", ")", ",", "\n", "total", "=", "len", "(", "self", ".", "train_dataloader", ")", ",", "\n", "postfix", "=", "'epoch %d/%d'", "%", "(", "epoch", ",", "max_epoch", ")", ")", ":", "\n", "\n", "                ", "if", "isinstance", "(", "lr", ",", "float", ")", ":", "\n", "                    ", "eval_lr", "=", "lr", "\n", "", "else", ":", "\n", "                    ", "eval_lr", "=", "lr", ".", "eval", "(", ")", "\n", "\n", "", "summary", "=", "self", ".", "network", ".", "train_step", "(", "sess", ",", "batch", ",", "eval_lr", ",", "train_op", ",", "train_summary_op", ")", "\n", "\n", "", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "epoch", ")", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "test_freq", ">", "0", "and", "epoch", "%", "self", ".", "args", ".", "test_freq", "==", "0", ":", "\n", "############################## test czsl ################################", "\n", "\n", "                ", "all_attr_lab", "=", "[", "]", "\n", "all_obj_lab", "=", "[", "]", "\n", "all_pred", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "image_ind", ",", "batch", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "self", ".", "test_dataloader", ")", ",", "total", "=", "len", "(", "self", ".", "test_dataloader", ")", ",", "postfix", "=", "'test'", ")", ":", "\n", "\n", "                    ", "predictions", "=", "self", ".", "network", ".", "test_step", "(", "sess", ",", "batch", ",", "score_op", ")", "# ordereddict of [score_pair, score_a, score_o]", "\n", "\n", "attr_truth", ",", "obj_truth", "=", "torch", ".", "from_numpy", "(", "batch", "[", "1", "]", ")", ",", "torch", ".", "from_numpy", "(", "batch", "[", "2", "]", ")", "\n", "all_attr_lab", ".", "append", "(", "attr_truth", ")", "\n", "all_obj_lab", ".", "append", "(", "obj_truth", ")", "\n", "\n", "for", "key", "in", "score_op", ".", "keys", "(", ")", ":", "\n", "                        ", "all_pred", "[", "key", "]", ".", "append", "(", "predictions", "[", "key", "]", "[", "0", "]", ")", "\n", "\n", "\n", "", "", "for", "key", ",", "value", "in", "all_pred", ".", "items", "(", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "key", ")", "\n", "report", "=", "self", ".", "test", "(", "epoch", ",", "evaluator", ",", "value", ",", "all_attr_lab", ",", "all_obj_lab", ")", "\n", "\n", "# save to tensorboard", "\n", "summary", "=", "tf", ".", "Summary", "(", ")", "\n", "for", "k", ",", "v", "in", "report", ".", "items", "(", ")", ":", "\n", "                        ", "if", "k", "not", "in", "[", "'name'", ",", "'epoch'", "]", ":", "\n", "                            ", "summary", ".", "value", ".", "add", "(", "tag", "=", "\"%s/%s\"", "%", "(", "key", ",", "k", ")", ",", "simple_value", "=", "v", ")", "\n", "", "", "writer", ".", "add_summary", "(", "summary", ",", "epoch", ")", "\n", "\n", "\n", "\n", "", "", "if", "epoch", "%", "self", ".", "args", ".", "snapshot_freq", "==", "0", ":", "\n", "                ", "self", ".", "snapshot", "(", "sess", ",", "epoch", ")", "\n", "\n", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_gczsl.SolverWrapper.test": [[150, 369], ["torch.cat", "torch.cat", "torch.LongTensor", "all_pred[].keys", "list", "torch.LongTensor", "torch.LongTensor", "evaluator.score_model", "evaluator.evaluate_predictions", "map.append", "zip", "list", "print", "evaluator.score_model", "evaluator.evaluate_predictions", "map.append", "zip", "open_unseen_match.byte.byte.byte", "list", "print", "max", "all_accuracies.extend", "numpy.array", "numpy.array", "numpy.trapz", "print", "torch.cat", "torch.cat.cpu", "torch.cat.cpu", "zip", "map", "map", "torch.sort", "evaluator.score_model", "evaluator.evaluate_predictions", "map.append", "zip", "map", "all_accuracies.append", "print", "list.index", "list", "list", "map", "map", "[].topk", "len", "map", "a[].item", "a[].item", "range", "attr_truth.cpu().numpy", "obj_truth.cpu().numpy", "range", "range", "len", "range", "len", "len", "torch.arange", "len", "attr_truth.cpu", "obj_truth.cpu"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.score_model", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.evaluate_predictions", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.score_model", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.evaluate_predictions", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.score_model", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.evaluate_predictions"], ["", "def", "test", "(", "self", ",", "epoch", ",", "evaluator", ",", "all_pred", ",", "all_attr_lab", ",", "all_obj_lab", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "\n", "accuracies", "=", "[", "]", "\n", "pairs", "=", "self", ".", "test_dataloader", ".", "dataset", ".", "pairs", "\n", "objs", "=", "self", ".", "test_dataloader", ".", "dataset", ".", "objs", "\n", "attrs", "=", "self", ".", "test_dataloader", ".", "dataset", ".", "attrs", "\n", "if", "args", ".", "test_set", "==", "'test'", ":", "\n", "            ", "val_pairs", "=", "self", ".", "test_dataloader", ".", "dataset", ".", "test_pairs", "\n", "", "else", ":", "\n", "            ", "val_pairs", "=", "self", ".", "test_dataloader", ".", "dataset", ".", "val_pairs", "\n", "", "train_pairs", "=", "self", ".", "test_dataloader", ".", "dataset", ".", "train_pairs", "\n", "\n", "\n", "all_attr_lab", "=", "torch", ".", "cat", "(", "all_attr_lab", ")", "\n", "all_obj_lab", "=", "torch", ".", "cat", "(", "all_obj_lab", ")", "\n", "all_pair_lab", "=", "torch", ".", "LongTensor", "(", "[", "\n", "pairs", ".", "index", "(", "(", "attrs", "[", "all_attr_lab", "[", "i", "]", "]", ",", "objs", "[", "all_obj_lab", "[", "i", "]", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "all_attr_lab", ")", ")", "\n", "]", ")", "\n", "all_pred_dict", "=", "{", "}", "\n", "for", "k", "in", "all_pred", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "            ", "all_pred_dict", "[", "k", "]", "=", "torch", ".", "cat", "(", "\n", "[", "all_pred", "[", "i", "]", "[", "k", "]", "for", "i", "in", "range", "(", "len", "(", "all_pred", ")", ")", "]", ")", "\n", "", "all_accuracies", "=", "[", "]", "\n", "\n", "# Calculate best unseen acc", "\n", "# put everything on cpu", "\n", "attr_truth", ",", "obj_truth", "=", "all_attr_lab", ".", "cpu", "(", ")", ",", "all_obj_lab", ".", "cpu", "(", ")", "\n", "pairs", "=", "list", "(", "\n", "zip", "(", "list", "(", "attr_truth", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "list", "(", "obj_truth", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ")", "\n", "seen_ind", "=", "torch", ".", "LongTensor", "(", "[", "\n", "i", "for", "i", "in", "range", "(", "len", "(", "attr_truth", ")", ")", "\n", "if", "pairs", "[", "i", "]", "in", "evaluator", ".", "train_pairs", "\n", "]", ")", "\n", "unseen_ind", "=", "torch", ".", "LongTensor", "(", "[", "\n", "i", "for", "i", "in", "range", "(", "len", "(", "attr_truth", ")", ")", "\n", "if", "pairs", "[", "i", "]", "not", "in", "evaluator", ".", "train_pairs", "\n", "]", ")", "\n", "\n", "\n", "\n", "\n", "# bias=0, for Causal-CZSl eval", "\n", "\n", "accuracies", "=", "[", "]", "\n", "bias", "=", "0", "\n", "args", ".", "bias", "=", "bias", "\n", "results", "=", "evaluator", ".", "score_model", "(", "\n", "all_pred_dict", ",", "all_obj_lab", ",", "bias", "=", "args", ".", "bias", ")", "\n", "match_stats", "=", "evaluator", ".", "evaluate_predictions", "(", "\n", "results", ",", "all_attr_lab", ",", "all_obj_lab", ",", "topk", "=", "args", ".", "topk", ")", "\n", "accuracies", ".", "append", "(", "match_stats", ")", "\n", "accuracies", "=", "zip", "(", "*", "accuracies", ")", "\n", "accuracies", "=", "list", "(", "map", "(", "torch", ".", "mean", ",", "map", "(", "torch", ".", "cat", ",", "accuracies", ")", ")", ")", "\n", "attr_acc", ",", "obj_acc", ",", "closed_acc", ",", "open_acc", ",", "objoracle_acc", ",", "open_seen_acc", ",", "open_unseen_acc", "=", "accuracies", "\n", "print", "(", "\n", "'(val-causal) E:%d|A:%.3f|O:%.3f|Cl:%.3f|Op:%.4f|OpHM:%.4f|OpAvg:%.4f|OpSeen:%.4f|OpUnseen:%.4f|OrO:%.4f|maP:%.4f|bias:%.3f'", "\n", "%", "(", "\n", "epoch", ",", "\n", "attr_acc", ",", "\n", "obj_acc", ",", "\n", "closed_acc", ",", "\n", "open_acc", ",", "\n", "(", "open_seen_acc", "*", "open_unseen_acc", ")", "**", "0.5", ",", "\n", "0.5", "*", "(", "open_seen_acc", "+", "open_unseen_acc", ")", ",", "\n", "open_seen_acc", ",", "\n", "open_unseen_acc", ",", "\n", "objoracle_acc", ",", "\n", "0", ",", "\n", "bias", ",", "\n", ")", ")", "\n", "# end", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "accuracies", "=", "[", "]", "\n", "bias", "=", "1e3", "\n", "args", ".", "bias", "=", "bias", "\n", "results", "=", "evaluator", ".", "score_model", "(", "\n", "all_pred_dict", ",", "all_obj_lab", ",", "bias", "=", "args", ".", "bias", ")", "\n", "match_stats", "=", "evaluator", ".", "evaluate_predictions", "(", "\n", "results", ",", "all_attr_lab", ",", "all_obj_lab", ",", "topk", "=", "args", ".", "topk", ")", "\n", "accuracies", ".", "append", "(", "match_stats", ")", "\n", "meanAP", "=", "0", "\n", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "open_unseen_match", "=", "match_stats", "\n", "accuracies", "=", "zip", "(", "*", "accuracies", ")", "\n", "open_unseen_match", "=", "open_unseen_match", ".", "byte", "(", ")", "\n", "accuracies", "=", "list", "(", "map", "(", "torch", ".", "mean", ",", "map", "(", "torch", ".", "cat", ",", "accuracies", ")", ")", ")", "\n", "attr_acc", ",", "obj_acc", ",", "closed_acc", ",", "open_acc", ",", "objoracle_acc", ",", "open_seen_acc", ",", "open_unseen_acc", "=", "accuracies", "\n", "scores", "=", "results", "[", "'scores'", "]", "\n", "correct_scores", "=", "scores", "[", "torch", ".", "arange", "(", "scores", ".", "shape", "[", "0", "]", ")", ",", "all_pair_lab", "]", "[", "\n", "unseen_ind", "]", "\n", "max_seen_scores", "=", "results", "[", "'scores'", "]", "[", "\n", "unseen_ind", "]", "[", ":", ",", "evaluator", ".", "seen_mask", "]", ".", "topk", "(", "\n", "args", ".", "topk", ",", "dim", "=", "1", ")", "[", "0", "]", "[", ":", ",", "args", ".", "topk", "-", "1", "]", "\n", "unseen_score_diff", "=", "max_seen_scores", "-", "correct_scores", "\n", "correct_unseen_score_diff", "=", "unseen_score_diff", "[", "open_unseen_match", "]", "-", "1e-4", "\n", "full_unseen_acc", "=", "[", "(", "\n", "epoch", ",", "\n", "attr_acc", ",", "\n", "obj_acc", ",", "\n", "closed_acc", ",", "\n", "open_acc", ",", "\n", "(", "open_seen_acc", "*", "open_unseen_acc", ")", "**", "0.5", ",", "\n", "0.5", "*", "(", "open_seen_acc", "+", "open_unseen_acc", ")", ",", "\n", "open_seen_acc", ",", "\n", "open_unseen_acc", ",", "\n", "objoracle_acc", ",", "\n", "meanAP", ",", "\n", "bias", ",", "\n", ")", "]", "\n", "print", "(", "\n", "'(val) E:%d|A:%.3f|O:%.3f|Cl:%.3f|Op:%.4f|OpHM:%.4f|OpAvg:%.4f|OpSeen:%.4f|OpUnseen:%.4f|OrO:%.4f|maP:%.4f|bias:%.3f'", "\n", "%", "(", "\n", "epoch", ",", "\n", "attr_acc", ",", "\n", "obj_acc", ",", "\n", "closed_acc", ",", "\n", "open_acc", ",", "\n", "(", "open_seen_acc", "*", "open_unseen_acc", ")", "**", "0.5", ",", "\n", "0.5", "*", "(", "open_seen_acc", "+", "open_unseen_acc", ")", ",", "\n", "open_seen_acc", ",", "\n", "open_unseen_acc", ",", "\n", "objoracle_acc", ",", "\n", "meanAP", ",", "\n", "bias", ",", "\n", ")", ")", "\n", "\n", "correct_unseen_score_diff", "=", "torch", ".", "sort", "(", "correct_unseen_score_diff", ")", "[", "0", "]", "\n", "magic_binsize", "=", "20", "\n", "bias_skip", "=", "max", "(", "len", "(", "correct_unseen_score_diff", ")", "//", "magic_binsize", ",", "1", ")", "\n", "biaslist", "=", "correct_unseen_score_diff", "[", ":", ":", "bias_skip", "]", "\n", "\n", "for", "bias", "in", "biaslist", ":", "\n", "            ", "accuracies", "=", "[", "]", "\n", "args", ".", "bias", "=", "bias", "\n", "results", "=", "evaluator", ".", "score_model", "(", "\n", "all_pred_dict", ",", "all_obj_lab", ",", "bias", "=", "args", ".", "bias", ")", "\n", "match_stats", "=", "evaluator", ".", "evaluate_predictions", "(", "\n", "results", ",", "all_attr_lab", ",", "all_obj_lab", ",", "topk", "=", "args", ".", "topk", ")", "\n", "accuracies", ".", "append", "(", "match_stats", ")", "\n", "meanAP", "=", "0", "\n", "\n", "accuracies", "=", "zip", "(", "*", "accuracies", ")", "\n", "accuracies", "=", "map", "(", "torch", ".", "mean", ",", "map", "(", "torch", ".", "cat", ",", "accuracies", ")", ")", "\n", "attr_acc", ",", "obj_acc", ",", "closed_acc", ",", "open_acc", ",", "objoracle_acc", ",", "open_seen_acc", ",", "open_unseen_acc", "=", "accuracies", "\n", "all_accuracies", ".", "append", "(", "(", "\n", "epoch", ",", "\n", "attr_acc", ",", "\n", "obj_acc", ",", "\n", "closed_acc", ",", "\n", "open_acc", ",", "\n", "(", "open_seen_acc", "*", "open_unseen_acc", ")", "**", "0.5", ",", "\n", "0.5", "*", "(", "open_seen_acc", "+", "open_unseen_acc", ")", ",", "\n", "open_seen_acc", ",", "\n", "open_unseen_acc", ",", "\n", "objoracle_acc", ",", "\n", "meanAP", ",", "\n", "bias", ",", "\n", ")", ")", "\n", "\n", "print", "(", "\n", "'(val) E:%d|A:%.3f|O:%.3f|Cl:%.3f|Op:%.4f|OpHM:%.4f|OpAvg:%.4f|OpSeen:%.4f|OpUnseen:%.4f|OrO:%.4f|maP:%.4f|bias:%.3f'", "\n", "%", "(", "\n", "epoch", ",", "\n", "attr_acc", ",", "\n", "obj_acc", ",", "\n", "closed_acc", ",", "\n", "open_acc", ",", "\n", "(", "open_seen_acc", "*", "open_unseen_acc", ")", "**", "0.5", ",", "\n", "0.5", "*", "(", "open_seen_acc", "+", "open_unseen_acc", ")", ",", "\n", "open_seen_acc", ",", "\n", "open_unseen_acc", ",", "\n", "objoracle_acc", ",", "\n", "meanAP", ",", "\n", "bias", ",", "\n", ")", ")", "\n", "", "all_accuracies", ".", "extend", "(", "full_unseen_acc", ")", "\n", "seen_accs", "=", "np", ".", "array", "(", "[", "a", "[", "-", "5", "]", ".", "item", "(", ")", "for", "a", "in", "all_accuracies", "]", ")", "\n", "unseen_accs", "=", "np", ".", "array", "(", "[", "a", "[", "-", "4", "]", ".", "item", "(", ")", "for", "a", "in", "all_accuracies", "]", ")", "\n", "area", "=", "np", ".", "trapz", "(", "seen_accs", ",", "unseen_accs", ")", "\n", "\n", "print", "(", "\n", "'(val) E:%d|A:%.3f|O:%.3f|Cl:%.3f|AUC:%.4f|Op:%.4f|OpHM:%.4f|OpAvg:%.4f|OpSeen:%.4f|OpUnseen:%.4f|OrO:%.4f|bias:%.3f'", "\n", "%", "(", "\n", "epoch", ",", "\n", "attr_acc", ",", "\n", "obj_acc", ",", "\n", "closed_acc", ",", "\n", "area", ",", "\n", "open_acc", ",", "\n", "(", "open_seen_acc", "*", "open_unseen_acc", ")", "**", "0.5", ",", "\n", "0.5", "*", "(", "open_seen_acc", "+", "open_unseen_acc", ")", ",", "\n", "open_seen_acc", ",", "\n", "open_unseen_acc", ",", "\n", "objoracle_acc", ",", "\n", "bias", ",", "\n", ")", ")", "\n", "\n", "#all_accuracies = [all_accuracies, area]", "\n", "#return all_accuracies", "\n", "\n", "return", "{", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"A\"", ":", "attr_acc", ",", "\n", "\"O\"", ":", "obj_acc", ",", "\n", "\"Cl\"", ":", "closed_acc", ",", "\n", "\"AUC\"", ":", "area", ",", "\n", "\"Op\"", ":", "open_acc", ",", "\n", "\"OpHM\"", ":", "(", "open_seen_acc", "*", "open_unseen_acc", ")", "**", "0.5", ",", "\n", "\"OpAvg\"", ":", "0.5", "*", "(", "open_seen_acc", "+", "open_unseen_acc", ")", ",", "\n", "\"OpSeen\"", ":", "open_seen_acc", ",", "\n", "\"OpUnseen\"", ":", "open_unseen_acc", ",", "\n", "\"OrO\"", ":", "objoracle_acc", ",", "\n", "\"bias\"", ":", "bias", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_gczsl.make_parser": [[25, 32], ["run_symnet.make_parser", "run_symnet.make_parser.add_argument", "run_symnet.make_parser.add_argument", "run_symnet.make_parser.add_argument"], "function", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_gczsl.make_parser"], ["def", "make_parser", "(", ")", ":", "\n", "    ", "parser", "=", "make_basic_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_set\"", ",", "type", "=", "str", ",", "default", "=", "'val'", ",", "\n", "choices", "=", "[", "'test'", ",", "'val'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--topk\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--bias\"", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_gczsl.main": [[35, 63], ["logging.getLogger", "run_symnet.make_parser", "run_symnet.make_parser.parse_args", "utils.utils.duplication_check", "utils.utils.display_args", "logging.getLogger.info", "utils.dataset.get_dataloader", "utils.dataset.get_dataloader", "logging.getLogger.info", "importlib.import_module", "importlib.import_module.Network", "utils.utils.create_session", "run_symnet_gczsl.SolverWrapper", "run_symnet.SolverWrapper.trainval_model"], "function", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_gczsl.make_parser", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.duplication_check", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.display_args", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.__init__.get_dataloader", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.__init__.get_dataloader", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.create_session", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.trainval_model"], ["", "def", "main", "(", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'MAIN'", ")", "\n", "\n", "parser", "=", "make_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "utils", ".", "duplication_check", "(", "args", ")", "\n", "utils", ".", "display_args", "(", "args", ",", "logger", ")", "\n", "\n", "\n", "logger", ".", "info", "(", "\"Loading dataset\"", ")", "\n", "\n", "\n", "train_dataloader", "=", "dataset", ".", "get_dataloader", "(", "args", ".", "data", ",", "'train'", ",", "\n", "batchsize", "=", "args", ".", "bz", ")", "\n", "test_dataloader", "=", "dataset", ".", "get_dataloader", "(", "args", ".", "data", ",", "args", ".", "test_set", ",", "\n", "batchsize", "=", "args", ".", "test_bz", ",", "obj_pred", "=", "args", ".", "obj_pred", ")", "\n", "\n", "\n", "\n", "logger", ".", "info", "(", "\"Loading network and solver\"", ")", "\n", "network", "=", "importlib", ".", "import_module", "(", "'network.'", "+", "args", ".", "network", ")", "\n", "net", "=", "network", ".", "Network", "(", "train_dataloader", ",", "args", ")", "\n", "\n", "\n", "with", "utils", ".", "create_session", "(", ")", "as", "sess", ":", "\n", "        ", "sw", "=", "SolverWrapper", "(", "net", ",", "train_dataloader", ",", "test_dataloader", ",", "args", ")", "\n", "sw", ".", "trainval_model", "(", "sess", ",", "args", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.__init__": [[51, 68], ["test_obj.SolverWrapper.logger", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "test_obj.SolverWrapper.info", "os.join", "os.join", "test_obj.SolverWrapper.info", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger"], ["    ", "def", "__init__", "(", "self", ",", "network", ",", "test_dataloader", ",", "args", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "\"init\"", ")", "\n", "self", ".", "network", "=", "network", "\n", "\n", "self", ".", "test_dataloader", "=", "test_dataloader", "\n", "\n", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "trained_weight", "=", "os", ".", "path", ".", "join", "(", "\n", "cfg", ".", "WEIGHT_ROOT_DIR", ",", "args", ".", "name", ",", "\n", "'snapshot_epoch_{}.ckpt'", ".", "format", "(", "args", ".", "epoch", ")", ")", "\n", "logger", ".", "info", "(", "\"trained weight <= \"", "+", "self", ".", "trained_weight", ")", "\n", "\n", "self", ".", "filename", "=", "\"%s_%s_ep%d.pkl\"", "%", "(", "args", ".", "name", ",", "args", ".", "test_set", ",", "args", ".", "epoch", ")", "\n", "self", ".", "filepath", "=", "osp", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "\"data/obj_scores\"", ",", "self", ".", "filename", ")", "\n", "assert", "args", ".", "force", "or", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "filepath", ")", ",", "self", ".", "filepath", "\n", "logger", ".", "info", "(", "\"obj prediction => \"", "+", "self", ".", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.initialize": [[72, 79], ["test_obj.SolverWrapper.logger", "test_obj.SolverWrapper.info", "tensorflow.train.Saver", "tensorflow.train.Saver", "tensorflow.train.Saver.restore"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger"], ["", "def", "initialize", "(", "self", ",", "sess", ")", ":", "\n", "        ", "\"\"\"weight initialization\"\"\"", "\n", "logger", "=", "self", ".", "logger", "(", "'initialize'", ")", "\n", "logger", ".", "info", "(", "'Restoring whole snapshots from {:s}'", ".", "format", "(", "\n", "self", ".", "trained_weight", ")", ")", "\n", "saver_restore", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver_restore", ".", "restore", "(", "sess", ",", "self", ".", "trained_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.construct_graph": [[83, 93], ["test_obj.SolverWrapper.logger", "sess.graph.as_default", "test_obj.SolverWrapper.network.build_network", "tensorflow.set_random_seed", "tensorflow.set_random_seed"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.build_network"], ["", "def", "construct_graph", "(", "self", ",", "sess", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "'construct_graph'", ")", "\n", "\n", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "if", "cfg", ".", "RANDOM_SEED", "is", "not", "None", ":", "\n", "                ", "tf", ".", "set_random_seed", "(", "cfg", ".", "RANDOM_SEED", ")", "\n", "\n", "", "prob_op", "=", "self", ".", "network", ".", "build_network", "(", "test_only", "=", "True", ")", "\n", "\n", "", "return", "prob_op", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.trainval_model": [[96, 135], ["test_obj.SolverWrapper.logger", "test_obj.SolverWrapper.info", "test_obj.SolverWrapper.construct_graph", "test_obj.SolverWrapper.initialize", "sess.graph.finalize", "tqdm.tqdm", "numpy.concatenate", "print", "numpy.concatenate", "numpy.concatenate.argmax", "print", "print", "test_obj.SolverWrapper.info", "enumerate", "test_obj.SolverWrapper.network.test_step_no_postprocess", "numpy.concatenate.append", "numpy.concatenate.append", "open", "pickle.dump", "numpy.sum", "len", "numpy.concatenate.tolist", "str"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.construct_graph", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.initialize", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.fc_obj.Network.test_step_no_postprocess"], ["", "def", "trainval_model", "(", "self", ",", "sess", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "'train_model'", ")", "\n", "logger", ".", "info", "(", "'Begin training'", ")", "\n", "\n", "prob_op", "=", "self", ".", "construct_graph", "(", "sess", ")", "\n", "\n", "self", ".", "initialize", "(", "sess", ")", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "\n", "\n", "##################################### test czsl #######################################", "\n", "\n", "predictions", "=", "[", "]", "\n", "obj_truth", "=", "[", "]", "\n", "\n", "for", "image_ind", ",", "batch", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "self", ".", "test_dataloader", ")", ",", "total", "=", "len", "(", "self", ".", "test_dataloader", ")", ",", "postfix", "=", "'test'", ")", ":", "\n", "            ", "pred", "=", "self", ".", "network", ".", "test_step_no_postprocess", "(", "sess", ",", "batch", ",", "prob_op", ")", "\n", "predictions", ".", "append", "(", "pred", ")", "\n", "obj_truth", ".", "append", "(", "batch", "[", "2", "]", ")", "\n", "\n", "\n", "", "predictions", "=", "np", ".", "concatenate", "(", "predictions", ",", "axis", "=", "0", ")", "\n", "\n", "print", "(", "\"Saving %s tensor to %s\"", "%", "(", "str", "(", "predictions", ".", "shape", ")", ",", "self", ".", "filename", ")", ")", "\n", "with", "open", "(", "self", ".", "filepath", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "predictions", ".", "tolist", "(", ")", ",", "fp", ")", "\n", "\n", "\n", "", "obj_truth", "=", "np", ".", "concatenate", "(", "obj_truth", ",", "axis", "=", "0", ")", "\n", "obj_pred", "=", "predictions", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "print", "(", "obj_pred", ".", "shape", ",", "obj_truth", ".", "shape", ")", "\n", "\n", "match", "=", "(", "obj_pred", "==", "obj_truth", ")", ".", "astype", "(", "float", ")", "\n", "acc", "=", "np", ".", "sum", "(", "match", ")", "/", "match", ".", "shape", "[", "0", "]", "\n", "\n", "print", "(", "\"Obj acc = %.3f\"", "%", "(", "acc", "*", "100", ")", ")", "\n", "\n", "\n", "logger", ".", "info", "(", "'Finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.main": [[20, 42], ["logging.getLogger", "run_symnet.make_parser", "run_symnet.make_parser.add_argument", "run_symnet.make_parser.parse_args", "logging.getLogger.info", "utils.dataset.get_dataloader", "logging.getLogger.info", "importlib.import_module", "importlib.import_module.Network", "utils.utils.create_session", "test_obj.SolverWrapper", "test_obj.SolverWrapper.trainval_model"], "function", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.run_symnet_gczsl.make_parser", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.__init__.get_dataloader", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.create_session", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.None.test_obj.SolverWrapper.trainval_model"], ["def", "main", "(", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'MAIN'", ")", "\n", "\n", "parser", "=", "make_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_set\"", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "\n", "choices", "=", "[", "'test'", ",", "'val'", "]", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "logger", ".", "info", "(", "\"Loading dataset\"", ")", "\n", "test_dataloader", "=", "dataset", ".", "get_dataloader", "(", "args", ".", "data", ",", "args", ".", "test_set", ",", "\n", "batchsize", "=", "args", ".", "test_bz", ")", "\n", "\n", "\n", "logger", ".", "info", "(", "\"Loading network and solver\"", ")", "\n", "network", "=", "importlib", ".", "import_module", "(", "'network.'", "+", "args", ".", "network", ")", "\n", "net", "=", "network", ".", "Network", "(", "test_dataloader", ",", "args", ")", "\n", "\n", "\n", "with", "utils", ".", "create_session", "(", ")", "as", "sess", ":", "\n", "        ", "sw", "=", "SolverWrapper", "(", "net", ",", "test_dataloader", ",", "args", ")", "\n", "sw", ".", "trainval_model", "(", "sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.CZSL_Evaluator.__init__": [[17, 37], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "set", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "oracle_obj_mask.append", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dset", ",", "model", ")", ":", "\n", "\n", "        ", "self", ".", "dset", "=", "dset", "\n", "\n", "# convert text pairs to idx tensors: [('sliced', 'apple'), ('ripe', 'apple'), ...] --> torch.LongTensor([[0,1],[1,1], ...])", "\n", "pairs", "=", "[", "(", "dset", ".", "attr2idx", "[", "attr", "]", ",", "dset", ".", "obj2idx", "[", "obj", "]", ")", "\n", "for", "attr", ",", "obj", "in", "dset", ".", "pairs", "]", "\n", "self", ".", "pairs", "=", "torch", ".", "LongTensor", "(", "pairs", ")", "\n", "\n", "# mask over pairs that occur in closed world ", "\n", "test_pair_set", "=", "set", "(", "dset", ".", "test_pairs", ")", "\n", "mask", "=", "[", "1", "if", "pair", "in", "test_pair_set", "else", "0", "for", "pair", "in", "dset", ".", "pairs", "]", "\n", "self", ".", "closed_mask", "=", "torch", ".", "ByteTensor", "(", "mask", ")", "\n", "\n", "# object specific mask over which pairs occur in the object oracle setting", "\n", "oracle_obj_mask", "=", "[", "]", "\n", "for", "_obj", "in", "dset", ".", "objs", ":", "\n", "            ", "mask", "=", "[", "1", "if", "_obj", "==", "obj", "else", "0", "for", "attr", ",", "obj", "in", "dset", ".", "pairs", "]", "\n", "oracle_obj_mask", ".", "append", "(", "torch", ".", "ByteTensor", "(", "mask", ")", ")", "\n", "", "self", ".", "oracle_obj_mask", "=", "torch", ".", "stack", "(", "oracle_obj_mask", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.CZSL_Evaluator.generate_predictions": [[40, 85], ["results.update", "evaluator.CZSL_Evaluator.closed_mask.repeat", "scores.clone", "hasattr", "evaluator.CZSL_Evaluator.generate_predictions.get_pred_from_scores_and_mask_best"], "methods", ["None"], ["", "def", "generate_predictions", "(", "self", ",", "scores", ",", "obj_truth", ")", ":", "# (B, #pairs)", "\n", "\n", "        ", "def", "get_pred_from_scores", "(", "_scores", ")", ":", "\n", "            ", "_", ",", "pair_pred", "=", "_scores", ".", "max", "(", "1", ")", "\n", "attr_pred", ",", "obj_pred", "=", "self", ".", "pairs", "[", "pair_pred", "]", "[", ":", ",", "0", "]", ",", "self", ".", "pairs", "[", "pair_pred", "]", "[", ":", ",", "1", "]", "\n", "return", "(", "attr_pred", ",", "obj_pred", ")", "# attr/obj word id (not name)", "\n", "\n", "", "def", "get_pred_from_scores_and_mask_best", "(", "_scores", ")", ":", "\n", "            ", "_", ",", "pair_pred", "=", "_scores", ".", "max", "(", "1", ")", "\n", "attr_pred", ",", "obj_pred", "=", "self", ".", "pairs", "[", "pair_pred", "]", "[", ":", ",", "0", "]", ",", "self", ".", "pairs", "[", "pair_pred", "]", "[", ":", ",", "1", "]", "\n", "_scores", "[", "range", "(", "pair_pred", ".", "shape", "[", "0", "]", ")", ",", "pair_pred", "]", "=", "-", "1e10", "\n", "return", "_scores", ",", "(", "attr_pred", ",", "obj_pred", ")", "# attr/obj word id (not name)", "\n", "\n", "", "results", "=", "{", "}", "\n", "\n", "# open world setting -- no mask", "\n", "results", ".", "update", "(", "{", "'open'", ":", "get_pred_from_scores", "(", "scores", ")", "}", ")", "\n", "\n", "\n", "# closed world setting - set the score for all NON test-pairs to -1e10", "\n", "mask", "=", "self", ".", "closed_mask", ".", "repeat", "(", "scores", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "closed_scores", "=", "scores", ".", "clone", "(", ")", "\n", "if", "hasattr", "(", "mask", ",", "'bool'", ")", ":", "\n", "            ", "closed_scores", "[", "(", "1", "-", "mask", ")", ".", "bool", "(", ")", "]", "=", "-", "1e10", "\n", "", "else", ":", "\n", "            ", "closed_scores", "[", "(", "1", "-", "mask", ")", ".", "byte", "(", ")", "]", "=", "-", "1e10", "\n", "", "closed_scores", ",", "closed1", "=", "get_pred_from_scores_and_mask_best", "(", "closed_scores", ")", "\n", "results", ".", "update", "(", "{", "'closed1'", ":", "closed1", "}", ")", "\n", "closed_scores", ",", "closed2", "=", "get_pred_from_scores_and_mask_best", "(", "closed_scores", ")", "\n", "results", ".", "update", "(", "{", "'closed2'", ":", "closed2", "}", ")", "\n", "closed_scores", ",", "closed3", "=", "get_pred_from_scores_and_mask_best", "(", "closed_scores", ")", "\n", "results", ".", "update", "(", "{", "'closed3'", ":", "closed3", "}", ")", "\n", "\n", "\n", "# object_oracle setting - set the score to -1e10 for all pairs where the true object does NOT participate", "\n", "mask", "=", "self", ".", "oracle_obj_mask", "[", "obj_truth", "]", "\n", "oracle_obj_scores", "=", "scores", ".", "clone", "(", ")", "\n", "if", "hasattr", "(", "mask", ",", "'bool'", ")", ":", "\n", "            ", "oracle_obj_scores", "[", "(", "1", "-", "mask", ")", ".", "bool", "(", ")", "]", "=", "-", "1e10", "\n", "", "else", ":", "\n", "            ", "oracle_obj_scores", "[", "(", "1", "-", "mask", ")", ".", "byte", "(", ")", "]", "=", "-", "1e10", "\n", "\n", "", "results", ".", "update", "(", "{", "'object_oracle'", ":", "get_pred_from_scores", "(", "oracle_obj_scores", ")", "}", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.CZSL_Evaluator.score_model": [[86, 99], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "evaluator.CZSL_Evaluator.generate_predictions"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.generate_predictions"], ["", "def", "score_model", "(", "self", ",", "scores", ",", "obj_truth", ")", ":", "\n", "\n", "# put everything on CPU", "\n", "#scores = {k:v.cpu() for k,v in scores.items()}", "\n", "#obj_truth = obj_truth.cpu()", "\n", "\n", "# gather scores for all relevant (a,o) pairs", "\n", "        ", "scores", "=", "torch", ".", "stack", "(", "[", "\n", "scores", "[", "(", "self", ".", "dset", ".", "attr2idx", "[", "attr", "]", ",", "self", ".", "dset", ".", "obj2idx", "[", "obj", "]", ")", "]", "\n", "for", "attr", ",", "obj", "in", "self", ".", "dset", ".", "pairs", "\n", "]", ",", "1", ")", "# (B, #pairs)", "\n", "results", "=", "self", ".", "generate_predictions", "(", "scores", ",", "obj_truth", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.CZSL_Evaluator.evaluate_predictions": [[100, 129], ["torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "evaluate_predictions", "(", "self", ",", "predictions", ",", "attr_truth", ",", "obj_truth", ",", "histogram", "=", "False", ",", "synonym_mode", "=", "False", ")", ":", "\n", "        ", "assert", "not", "histogram", "\n", "\n", "# put everything on cpu", "\n", "#attr_truth, obj_truth = attr_truth.cpu(), obj_truth.cpu()", "\n", "\n", "# top 1 pair accuracy", "\n", "# open world: attribute, object and pair", "\n", "attr_match", "=", "(", "attr_truth", "==", "predictions", "[", "'open'", "]", "[", "0", "]", ")", ".", "float", "(", ")", "\n", "obj_match", "=", "(", "obj_truth", "==", "predictions", "[", "'open'", "]", "[", "1", "]", ")", ".", "float", "(", ")", "\n", "open_match", "=", "attr_match", "*", "obj_match", "\n", "\n", "# closed world, obj_oracle: pair", "\n", "closed_1_match", "=", "(", "attr_truth", "==", "predictions", "[", "'closed1'", "]", "[", "0", "]", ")", ".", "float", "(", ")", "*", "(", "obj_truth", "==", "predictions", "[", "'closed1'", "]", "[", "1", "]", ")", ".", "float", "(", ")", "\n", "closed_2_match", "=", "(", "attr_truth", "==", "predictions", "[", "'closed2'", "]", "[", "0", "]", ")", ".", "float", "(", ")", "*", "(", "obj_truth", "==", "predictions", "[", "'closed2'", "]", "[", "1", "]", ")", ".", "float", "(", ")", "+", "closed_1_match", "\n", "closed_3_match", "=", "(", "attr_truth", "==", "predictions", "[", "'closed3'", "]", "[", "0", "]", ")", ".", "float", "(", ")", "*", "(", "obj_truth", "==", "predictions", "[", "'closed3'", "]", "[", "1", "]", ")", ".", "float", "(", ")", "+", "closed_2_match", "\n", "\n", "if", "synonym_mode", ":", "\n", "            ", "closed_2_match", "[", "closed_2_match", ">", "1", "]", "=", "1", "\n", "closed_3_match", "[", "closed_3_match", ">", "1", "]", "=", "1", "\n", "\n", "", "assert", "torch", ".", "max", "(", "closed_1_match", ")", ".", "item", "(", ")", "<=", "1", ",", "torch", ".", "max", "(", "closed_1_match", ")", ".", "item", "(", ")", "\n", "assert", "torch", ".", "max", "(", "closed_2_match", ")", ".", "item", "(", ")", "<=", "1", ",", "torch", ".", "max", "(", "closed_2_match", ")", ".", "item", "(", ")", "\n", "assert", "torch", ".", "max", "(", "closed_3_match", ")", ".", "item", "(", ")", "<=", "1", ",", "torch", ".", "max", "(", "closed_3_match", ")", ".", "item", "(", ")", "\n", "\n", "\n", "obj_oracle_match", "=", "(", "attr_truth", "==", "predictions", "[", "'object_oracle'", "]", "[", "0", "]", ")", ".", "float", "(", ")", "*", "(", "obj_truth", "==", "predictions", "[", "'object_oracle'", "]", "[", "1", "]", ")", ".", "float", "(", ")", "\n", "\n", "return", "attr_match", ",", "obj_match", ",", "closed_1_match", ",", "closed_2_match", ",", "closed_3_match", ",", "open_match", ",", "obj_oracle_match", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.CZSL_Evaluator.evaluate_only_attr_obj": [[131, 140], ["prob_a.max", "prob_o.max", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "evaluate_only_attr_obj", "(", "self", ",", "prob_a", ",", "gt_a", ",", "prob_o", ",", "gt_o", ")", ":", "\n", "        ", "prob_a", ",", "prob_o", "=", "torch", ".", "from_numpy", "(", "prob_a", ")", ",", "torch", ".", "from_numpy", "(", "prob_o", ")", "\n", "_", ",", "pred_a", "=", "prob_a", ".", "max", "(", "1", ")", "\n", "_", ",", "pred_o", "=", "prob_o", ".", "max", "(", "1", ")", "\n", "\n", "attr_match", "=", "(", "pred_a", "==", "gt_a", ")", ".", "float", "(", ")", "\n", "obj_match", "=", "(", "pred_o", "==", "gt_o", ")", ".", "float", "(", ")", "\n", "\n", "return", "attr_match", ",", "obj_match", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.__init__": [[150, 186], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "set", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "print", "set", "oracle_obj_mask.append", "print", "set", "print", "set", "list", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dset", ")", ":", "\n", "\n", "        ", "self", ".", "dset", "=", "dset", "\n", "\n", "# convert text pairs to idx tensors: [('sliced', 'apple'), ('ripe', 'apple'), ...] --> torch.LongTensor([[0,1],[1,1], ...])", "\n", "pairs", "=", "[", "(", "dset", ".", "attr2idx", "[", "attr", "]", ",", "dset", ".", "obj2idx", "[", "obj", "]", ")", "\n", "for", "attr", ",", "obj", "in", "dset", ".", "pairs", "]", "\n", "self", ".", "train_pairs", "=", "[", "(", "dset", ".", "attr2idx", "[", "attr", "]", ",", "dset", ".", "obj2idx", "[", "obj", "]", ")", "\n", "for", "attr", ",", "obj", "in", "dset", ".", "train_pairs", "]", "\n", "self", ".", "pairs", "=", "torch", ".", "LongTensor", "(", "pairs", ")", "\n", "\n", "# mask over pairs that occur in closed world", "\n", "if", "dset", ".", "phase", "==", "'train'", ":", "\n", "            ", "print", "(", "'Evaluating with train pairs'", ")", "\n", "test_pair_set", "=", "set", "(", "dset", ".", "train_pairs", ")", "\n", "", "elif", "dset", ".", "phase", "==", "'val'", ":", "\n", "            ", "print", "(", "'Evaluating with val pairs'", ")", "\n", "test_pair_set", "=", "set", "(", "dset", ".", "val_pairs", "+", "dset", ".", "train_pairs", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Evaluating with test pairs'", ")", "\n", "test_pair_set", "=", "set", "(", "dset", ".", "test_pairs", "+", "dset", ".", "train_pairs", ")", "\n", "", "self", ".", "test_pairs", "=", "[", "(", "dset", ".", "attr2idx", "[", "attr", "]", ",", "dset", ".", "obj2idx", "[", "obj", "]", ")", "\n", "for", "attr", ",", "obj", "in", "list", "(", "test_pair_set", ")", "]", "\n", "mask", "=", "[", "1", "if", "pair", "in", "test_pair_set", "else", "0", "for", "pair", "in", "dset", ".", "pairs", "]", "\n", "self", ".", "closed_mask", "=", "torch", ".", "ByteTensor", "(", "mask", ")", "\n", "\n", "seen_pair_set", "=", "set", "(", "dset", ".", "train_pairs", ")", "\n", "mask", "=", "[", "1", "if", "pair", "in", "seen_pair_set", "else", "0", "for", "pair", "in", "dset", ".", "pairs", "]", "\n", "self", ".", "seen_mask", "=", "torch", ".", "ByteTensor", "(", "mask", ")", "\n", "\n", "# object specific mask over which pairs occur in the object oracle setting", "\n", "oracle_obj_mask", "=", "[", "]", "\n", "for", "_obj", "in", "dset", ".", "objs", ":", "\n", "            ", "mask", "=", "[", "1", "if", "_obj", "==", "obj", "else", "0", "for", "attr", ",", "obj", "in", "dset", ".", "pairs", "]", "\n", "oracle_obj_mask", ".", "append", "(", "torch", ".", "ByteTensor", "(", "mask", ")", ")", "\n", "", "self", ".", "oracle_obj_mask", "=", "torch", ".", "stack", "(", "oracle_obj_mask", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.generate_predictions": [[189, 226], ["evaluator.GCZSL_Evaluator.closed_mask.repeat", "hasattr", "scores.clone", "results.update", "results.update", "scores.clone", "hasattr", "results.update", "_scores.topk", "pair_pred[].contiguous().view", "mask.bool.bool.bool", "mask.bool.bool.bool", "[].view", "[].view", "evaluator.GCZSL_Evaluator.generate_predictions.get_pred_from_scores"], "methods", ["None"], ["", "def", "generate_predictions", "(", "self", ",", "scores", ",", "obj_truth", ")", ":", "# (B, #pairs)", "\n", "        ", "def", "get_pred_from_scores", "(", "_scores", ")", ":", "\n", "            ", "_", ",", "pair_pred", "=", "_scores", ".", "topk", "(", "10", ",", "dim", "=", "1", ")", "#sort(1, descending=True)", "\n", "pair_pred", "=", "pair_pred", "[", ":", ",", ":", "10", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "attr_pred", ",", "obj_pred", "=", "self", ".", "pairs", "[", "pair_pred", "]", "[", ":", ",", "0", "]", ".", "view", "(", "\n", "-", "1", ",", "10", ")", ",", "self", ".", "pairs", "[", "pair_pred", "]", "[", ":", ",", "1", "]", ".", "view", "(", "-", "1", ",", "10", ")", "\n", "return", "(", "attr_pred", ",", "obj_pred", ")", "\n", "\n", "", "results", "=", "{", "}", "\n", "\n", "# open world setting -- no mask", "\n", "mask", "=", "self", ".", "closed_mask", ".", "repeat", "(", "scores", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "mask", "=", "1", "-", "mask", "\n", "if", "hasattr", "(", "mask", ",", "\"bool\"", ")", ":", "\n", "            ", "mask", "=", "mask", ".", "bool", "(", ")", "\n", "", "closed_scores", "=", "scores", ".", "clone", "(", ")", "\n", "closed_scores", "[", "mask", "]", "=", "-", "1e10", "\n", "results", ".", "update", "(", "{", "'open'", ":", "get_pred_from_scores", "(", "closed_scores", ")", "}", ")", "\n", "\n", "# closed world setting - set the score for all NON test-pairs to -1e10", "\n", "#results.update({'closed': get_pred_from_scores(closed_scores)})", "\n", "results", ".", "update", "(", "{", "'closed'", ":", "results", "[", "'open'", "]", "}", ")", "\n", "\n", "# object_oracle setting - set the score to -1e10 for all pairs where the true object does NOT participate", "\n", "mask", "=", "self", ".", "oracle_obj_mask", "[", "obj_truth", "]", "\n", "oracle_obj_scores", "=", "scores", ".", "clone", "(", ")", "\n", "\n", "mask", "=", "1", "-", "mask", "\n", "if", "hasattr", "(", "mask", ",", "\"bool\"", ")", ":", "\n", "            ", "mask", "=", "mask", ".", "bool", "(", ")", "\n", "", "oracle_obj_scores", "[", "mask", "]", "=", "-", "1e10", "\n", "\n", "results", ".", "update", "(", "{", "\n", "'object_oracle'", ":", "get_pred_from_scores", "(", "oracle_obj_scores", ")", "\n", "}", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.score_model": [[228, 246], ["obj_truth.cpu.cpu.cpu", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.clone", "torch.stack.clone", "torch.stack.clone", "evaluator.GCZSL_Evaluator.seen_mask.repeat", "hasattr", "evaluator.GCZSL_Evaluator.generate_predictions", "v.cpu", "mask.bool.bool.bool", "torch.stack.items", "torch.stack.items", "torch.stack.items"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.generate_predictions"], ["", "def", "score_model", "(", "self", ",", "scores", ",", "obj_truth", ",", "bias", "=", "0.0", ")", ":", "\n", "# put everything on CPU", "\n", "        ", "scores", "=", "{", "k", ":", "v", ".", "cpu", "(", ")", "for", "k", ",", "v", "in", "scores", ".", "items", "(", ")", "}", "\n", "obj_truth", "=", "obj_truth", ".", "cpu", "(", ")", "\n", "# gather scores for all relevant (a,o) pairs", "\n", "scores", "=", "torch", ".", "stack", "(", "\n", "[", "scores", "[", "(", "self", ".", "dset", ".", "attr2idx", "[", "attr", "]", ",", "self", ".", "dset", ".", "obj2idx", "[", "obj", "]", ")", "]", "for", "attr", ",", "obj", "in", "self", ".", "dset", ".", "pairs", "]", ",", "\n", "1", ")", "# (B, #pairs)", "\n", "orig_scores", "=", "scores", ".", "clone", "(", ")", "\n", "mask", "=", "self", ".", "seen_mask", ".", "repeat", "(", "scores", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "mask", "=", "1", "-", "mask", "\n", "if", "hasattr", "(", "mask", ",", "\"bool\"", ")", ":", "\n", "            ", "mask", "=", "mask", ".", "bool", "(", ")", "\n", "", "scores", "[", "mask", "]", "+=", "bias", "\n", "results", "=", "self", ".", "generate_predictions", "(", "scores", ",", "obj_truth", ")", "\n", "results", "[", "'biased_scores'", "]", "=", "scores", "\n", "results", "[", "'scores'", "]", "=", "orig_scores", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.GCZSL_Evaluator.evaluate_predictions": [[247, 282], ["list", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "attr_match.any().float.any().float.any().float", "obj_match.any().float.any().float.any().float", "attr_truth.cpu", "obj_truth.cpu", "zip", "attr_truth.unsqueeze().repeat", "obj_truth.unsqueeze().repeat", "list", "list", "attr_match.any().float.any().float.any", "obj_match.any().float.any().float.any", "attr_truth.cpu().numpy", "obj_truth.cpu().numpy", "range", "range", "attr_truth.unsqueeze", "obj_truth.unsqueeze", "len", "len", "attr_truth.cpu", "obj_truth.cpu"], "methods", ["None"], ["", "def", "evaluate_predictions", "(", "self", ",", "predictions", ",", "attr_truth", ",", "obj_truth", ",", "topk", "=", "1", ")", ":", "\n", "\n", "# put everything on cpu", "\n", "        ", "attr_truth", ",", "obj_truth", "=", "attr_truth", ".", "cpu", "(", ")", ",", "obj_truth", ".", "cpu", "(", ")", "\n", "pairs", "=", "list", "(", "\n", "zip", "(", "list", "(", "attr_truth", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "list", "(", "obj_truth", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ")", "\n", "seen_ind", "=", "torch", ".", "LongTensor", "(", "[", "\n", "i", "for", "i", "in", "range", "(", "len", "(", "attr_truth", ")", ")", "if", "pairs", "[", "i", "]", "in", "self", ".", "train_pairs", "\n", "]", ")", "\n", "unseen_ind", "=", "torch", ".", "LongTensor", "(", "[", "\n", "i", "for", "i", "in", "range", "(", "len", "(", "attr_truth", ")", ")", "\n", "if", "pairs", "[", "i", "]", "not", "in", "self", ".", "train_pairs", "\n", "]", ")", "\n", "\n", "# top 1 pair accuracy", "\n", "# open world: attribute, object and pair", "\n", "attr_match", "=", "(", "attr_truth", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "\n", "1", ",", "topk", ")", "==", "predictions", "[", "'open'", "]", "[", "0", "]", "[", ":", ",", ":", "topk", "]", ")", "\n", "obj_match", "=", "(", "obj_truth", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "\n", "1", ",", "topk", ")", "==", "predictions", "[", "'open'", "]", "[", "1", "]", "[", ":", ",", ":", "topk", "]", ")", "\n", "open_match", "=", "(", "attr_match", "*", "obj_match", ")", ".", "any", "(", "1", ")", ".", "float", "(", ")", "\n", "attr_match", "=", "attr_match", ".", "any", "(", "1", ")", ".", "float", "(", ")", "\n", "obj_match", "=", "obj_match", ".", "any", "(", "1", ")", ".", "float", "(", ")", "\n", "open_seen_match", "=", "open_match", "[", "seen_ind", "]", "\n", "open_unseen_match", "=", "open_match", "[", "unseen_ind", "]", "\n", "\n", "# closed world, obj_oracle: pair", "\n", "closed_match", "=", "(", "attr_truth", "==", "predictions", "[", "'closed'", "]", "[", "0", "]", "[", ":", ",", "0", "]", ")", ".", "float", "(", "\n", ")", "*", "(", "obj_truth", "==", "predictions", "[", "'closed'", "]", "[", "1", "]", "[", ":", ",", "0", "]", ")", ".", "float", "(", ")", "\n", "\n", "obj_oracle_match", "=", "(", "\n", "attr_truth", "==", "predictions", "[", "'object_oracle'", "]", "[", "0", "]", "[", ":", ",", "0", "]", ")", ".", "float", "(", ")", "*", "(", "\n", "obj_truth", "==", "predictions", "[", "'object_oracle'", "]", "[", "1", "]", "[", ":", ",", "0", "]", ")", ".", "float", "(", ")", "\n", "\n", "return", "attr_match", ",", "obj_match", ",", "closed_match", ",", "open_match", ",", "obj_oracle_match", ",", "open_seen_match", ",", "open_unseen_match", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.evaluator.Multi_Evaluator.__call__": [[286, 318], ["str", "str", "numpy.zeros", "numpy.zeros", "range", "numpy.nanmean", "numpy.nanmean", "numpy.any", "numpy.sum", "numpy.any", "numpy.sum", "evaluator.Multi_Evaluator.__call__.calc_ap_auc"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "prediction", ",", "gt_attr", ")", ":", "\n", "        ", "assert", "prediction", ".", "shape", "==", "gt_attr", ".", "shape", "\n", "assert", "not", "np", ".", "any", "(", "np", ".", "isnan", "(", "prediction", ")", ")", ",", "str", "(", "np", ".", "sum", "(", "np", ".", "isnan", "(", "prediction", ")", ")", ")", "\n", "assert", "not", "np", ".", "any", "(", "np", ".", "isnan", "(", "gt_attr", ")", ")", ",", "str", "(", "np", ".", "sum", "(", "np", ".", "isnan", "(", "gt_attr", ")", ")", ")", "\n", "\n", "def", "calc_ap_auc", "(", "truth", ",", "scores", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "truth", ">", "0", ")", ">", "0", ":", "\n", "                ", "a", "=", "sklmetric", ".", "average_precision_score", "(", "truth", ",", "scores", ")", "\n", "b", "=", "sklmetric", ".", "roc_auc_score", "(", "truth", ",", "scores", ")", "\n", "assert", "not", "(", "np", ".", "isnan", "(", "a", ")", "or", "np", ".", "isnan", "(", "b", ")", ")", "\n", "return", "a", ",", "b", "\n", "", "else", ":", "\n", "                ", "return", "np", ".", "nan", ",", "np", ".", "nan", "\n", "\n", "", "", "ap", "=", "np", ".", "zeros", "(", "(", "gt_attr", ".", "shape", "[", "1", "]", ",", ")", ")", "\n", "auc", "=", "np", ".", "zeros", "(", "(", "gt_attr", ".", "shape", "[", "1", "]", ",", ")", ")", "\n", "\n", "for", "dim", "in", "range", "(", "gt_attr", ".", "shape", "[", "1", "]", ")", ":", "\n", "# rescale ground truth to [-1, 1]", "\n", "\n", "            ", "gt", "=", "gt_attr", "[", ":", ",", "dim", "]", "\n", "mask", "=", "(", "gt", ">=", "0", ")", "\n", "\n", "gt", "=", "2", "*", "gt", "[", "mask", "]", "-", "1", "# = 0.5 threshold", "\n", "est", "=", "prediction", "[", "mask", ",", "dim", "]", "\n", "\n", "ap", "[", "dim", "]", ",", "auc", "[", "dim", "]", "=", "calc_ap_auc", "(", "gt", ",", "est", ")", "\n", "\n", "", "mAP", "=", "np", ".", "nanmean", "(", "ap", ")", "\n", "mAUC", "=", "np", ".", "nanmean", "(", "auc", ")", "\n", "\n", "return", "mAP", ",", "mAUC", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.Embedder.__init__": [[66, 74], ["utils.Embedder.load_word_embeddings", "len"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.Embedder.load_word_embeddings"], ["def", "__init__", "(", "self", ",", "vec_type", ",", "vocab", ",", "data", ")", ":", "\n", "        ", "self", ".", "vec_type", "=", "vec_type", "\n", "\n", "if", "vec_type", "!=", "'onehot'", ":", "\n", "            ", "self", ".", "embeds", "=", "self", ".", "load_word_embeddings", "(", "vec_type", ",", "vocab", ",", "data", ")", "\n", "self", ".", "emb_dim", "=", "self", ".", "embeds", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb_dim", "=", "len", "(", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.Embedder.get_embedding": [[75, 82], ["tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.matmul"], "methods", ["None"], ["", "", "def", "get_embedding", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"actually implements __getitem__() function\"\"\"", "\n", "if", "self", ".", "vec_type", "==", "'onehot'", ":", "\n", "            ", "return", "tf", ".", "one_hot", "(", "i", ",", "depth", "=", "self", ".", "emb_dim", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "i_onehot", "=", "tf", ".", "one_hot", "(", "i", ",", "depth", "=", "self", ".", "embeds", ".", "shape", "[", "0", "]", ",", "axis", "=", "1", ")", "\n", "return", "tf", ".", "matmul", "(", "i_onehot", ",", "self", ".", "embeds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.Embedder.load_word_embeddings": [[84, 104], ["aux_data.load_wordvec_dict", "numpy.array", "print", "type", "attr_dict.update", "embeds_list.append", "NotImplementedError", "str"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.aux_data.__init__.load_wordvec_dict"], ["", "", "def", "load_word_embeddings", "(", "self", ",", "vec_type", ",", "vocab", ",", "data", ")", ":", "\n", "        ", "tmp", "=", "aux_data", ".", "load_wordvec_dict", "(", "data", ",", "vec_type", ")", "\n", "if", "type", "(", "tmp", ")", "==", "tuple", ":", "\n", "            ", "attr_dict", ",", "obj_dict", "=", "tmp", "\n", "attr_dict", ".", "update", "(", "obj_dict", ")", "\n", "embeds", "=", "attr_dict", "\n", "", "else", ":", "\n", "            ", "embeds", "=", "tmp", "\n", "\n", "", "embeds_list", "=", "[", "]", "\n", "for", "k", "in", "vocab", ":", "\n", "            ", "if", "k", "in", "embeds", ":", "\n", "                ", "embeds_list", ".", "append", "(", "embeds", "[", "k", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'some vocabs are not in dictionary: %s'", "%", "k", ")", "\n", "\n", "", "", "embeds", "=", "np", ".", "array", "(", "embeds_list", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "print", "(", "'Embeddings shape = %s'", "%", "str", "(", "embeds", ".", "shape", ")", ")", "\n", "return", "embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.create_session": [[14, 19], ["tensorflow.ConfigProto", "tensorflow.Session"], "function", ["None"], ["def", "create_session", "(", ")", ":", "\n", "    ", "\"\"\"create tensorflow session\"\"\"", "\n", "tfconfig", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", "\n", "tfconfig", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "return", "tf", ".", "Session", "(", "config", "=", "tfconfig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.display_args": [[22, 35], ["args.__dict__.items", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "callable", "k.startswith"], "function", ["None"], ["", "def", "display_args", "(", "args", ",", "logger", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"print some essential arguments\"\"\"", "\n", "if", "verbose", ":", "\n", "        ", "ignore", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "args", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "callable", "(", "v", ")", "and", "not", "k", ".", "startswith", "(", "'__'", ")", "and", "k", "not", "in", "ignore", ":", "\n", "                ", "logger", ".", "info", "(", "\"{:30s}{}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "'Name:       %s'", "%", "args", ".", "name", ")", "\n", "logger", ".", "info", "(", "'Network:    %s'", "%", "args", ".", "network", ")", "\n", "logger", ".", "info", "(", "'Data:       %s'", "%", "args", ".", "data", ")", "\n", "logger", ".", "info", "(", "'FC layers:  At {fc_att}, Cm {fc_compress}, Cls {fc_cls}'", ".", "format", "(", "\n", "**", "args", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.duplication_check": [[38, 46], ["os.exists", "os.exists", "args.trained_weight.split", "os.join", "os.join"], "function", ["None"], ["", "", "def", "duplication_check", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "force", ":", "\n", "        ", "return", "\n", "", "elif", "args", ".", "trained_weight", "is", "None", "or", "args", ".", "trained_weight", ".", "split", "(", "'/'", ")", "[", "0", "]", "!=", "args", ".", "name", ":", "\n", "        ", "assert", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "cfg", ".", "WEIGHT_ROOT_DIR", ",", "args", ".", "name", ")", ")", ",", "\"weight dir with same name exists (%s)\"", "%", "(", "args", ".", "name", ")", "\n", "assert", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "cfg", ".", "LOG_ROOT_DIR", ",", "args", ".", "name", ")", ")", ",", "\"log dir with same name exists (%s)\"", "%", "(", "args", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.formated_czsl_result": [[48, 51], ["fstr.format"], "function", ["None"], ["", "", "def", "formated_czsl_result", "(", "report", ")", ":", "\n", "    ", "fstr", "=", "'[{name}/{epoch}] rA:{real_attr_acc:.4f}|rO:{real_obj_acc:.4f}|Cl/T1:{top1_acc:.4f}|T2:{top2_acc:.4f}|T3:{top3_acc:.4f}'", "\n", "return", "fstr", ".", "format", "(", "**", "report", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.formated_multi_result": [[52, 55], ["fstr.format"], "function", ["None"], ["", "def", "formated_multi_result", "(", "report", ")", ":", "\n", "    ", "fstr", "=", "'[{name}/{epoch}] mAUC:{mAUC:.4f} | mAP:{mAP:.4f}'", "\n", "return", "fstr", ".", "format", "(", "**", "report", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.repeat_tensor": [[114, 130], ["tf.reshape.shape.as_list", "enumerate", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.reshape", "len", "tensorflow.shape"], "function", ["None"], ["", "", "def", "repeat_tensor", "(", "tensor", ",", "axis", ",", "multiple", ")", ":", "\n", "    ", "\"\"\"e.g. (1,2,3)x3 = (1,1,1,2,2,2,3,3,3)\"\"\"", "\n", "\n", "result_shape", "=", "tensor", ".", "shape", ".", "as_list", "(", ")", "\n", "for", "i", ",", "v", "in", "enumerate", "(", "result_shape", ")", ":", "\n", "        ", "if", "v", "is", "None", ":", "\n", "            ", "result_shape", "[", "i", "]", "=", "tf", ".", "shape", "(", "tensor", ")", "[", "i", "]", "\n", "", "", "result_shape", "[", "axis", "]", "*=", "multiple", "\n", "\n", "tensor", "=", "tf", ".", "expand_dims", "(", "tensor", ",", "axis", "+", "1", ")", "\n", "mul", "=", "[", "1", "]", "*", "len", "(", "tensor", ".", "shape", ")", "\n", "mul", "[", "axis", "+", "1", "]", "=", "multiple", "\n", "tensor", "=", "tf", ".", "tile", "(", "tensor", ",", "mul", ")", "\n", "tensor", "=", "tf", ".", "reshape", "(", "tensor", ",", "result_shape", ")", "\n", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.tile_tensor": [[132, 138], ["tensorflow.tile", "len"], "function", ["None"], ["", "def", "tile_tensor", "(", "tensor", ",", "axis", ",", "multiple", ")", ":", "\n", "    ", "\"\"\"e.g. (1,2,3)x3 = (1,2,3,1,2,3,1,2,3)\"\"\"", "\n", "mul", "=", "[", "1", "]", "*", "len", "(", "tensor", ".", "shape", ")", "\n", "mul", "[", "axis", "]", "=", "multiple", "\n", "\n", "return", "tf", ".", "tile", "(", "tensor", ",", "mul", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.activation_func": [[140, 149], ["NotImplementedError"], "function", ["None"], ["", "def", "activation_func", "(", "name", ")", ":", "\n", "    ", "if", "name", "==", "\"none\"", ":", "\n", "        ", "return", "(", "lambda", "x", ":", "x", ")", "\n", "", "elif", "name", "==", "\"sigmoid\"", ":", "\n", "        ", "return", "tf", ".", "sigmoid", "\n", "", "elif", "name", "==", "\"relu\"", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "relu", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"activation function %s not implemented\"", "%", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.logger": [[22, 24], ["base_solver.BaseSolver.root_logger.getChild"], "methods", ["None"], ["def", "logger", "(", "self", ",", "suffix", ")", ":", "\n", "        ", "return", "self", ".", "root_logger", ".", "getChild", "(", "suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.clear_folder": [[26, 37], ["base_solver.BaseSolver.logger", "os.listdir", "os.listdir", "base_solver.BaseSolver.warning", "os.remove", "base_solver.BaseSolver.warning", "os.remove", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger"], ["", "def", "clear_folder", "(", "self", ")", ":", "\n", "        ", "\"\"\"clear weight and log dir\"\"\"", "\n", "logger", "=", "self", ".", "logger", "(", "'clear_folder'", ")", "\n", "\n", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "log_dir", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "'Deleted log file '", "+", "f", ")", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "f", ")", ")", "\n", "\n", "", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "weight_dir", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "'Deleted weight file '", "+", "f", ")", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "self", ".", "weight_dir", ",", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.snapshot": [[39, 52], ["os.path.join", "base_solver.BaseSolver.saver.save", "base_solver.BaseSolver.logger().info", "os.path.exists", "os.makedirs", "base_solver.BaseSolver.logger"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger"], ["", "", "def", "snapshot", "(", "self", ",", "sess", ",", "iter", ",", "filenames", "=", "None", ")", ":", "\n", "        ", "\"\"\"save checkpoint\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "weight_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "weight_dir", ")", "\n", "\n", "", "if", "filenames", "is", "None", ":", "\n", "            ", "filename", "=", "'snapshot_epoch_{}.ckpt'", ".", "format", "(", "iter", ")", "\n", "", "else", ":", "\n", "            ", "filename", "=", "filenames", "\n", "", "pth", "=", "os", ".", "path", ".", "join", "(", "self", ".", "weight_dir", ",", "filename", ")", "\n", "self", ".", "saver", ".", "save", "(", "sess", ",", "pth", ")", "\n", "\n", "self", ".", "logger", "(", "'snapshot'", ")", ".", "info", "(", "'Wrote snapshot to: {}'", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.initialize": [[54, 65], ["base_solver.BaseSolver.logger", "sess.run", "sess.run", "base_solver.BaseSolver.info", "tensorflow.train.Saver", "tensorflow.train.Saver.restore", "tensorflow.global_variables_initializer", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger"], ["", "def", "initialize", "(", "self", ",", "sess", ")", ":", "\n", "        ", "\"\"\"weight initialization\"\"\"", "\n", "logger", "=", "self", ".", "logger", "(", "'initialize'", ")", "\n", "\n", "if", "self", ".", "trained_weight", "is", "None", ":", "\n", "            ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "logger", ".", "info", "(", "'Restoring whole model snapshots from {:s}'", ".", "format", "(", "self", ".", "trained_weight", ")", ")", "\n", "saver_restore", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver_restore", ".", "restore", "(", "sess", ",", "self", ".", "trained_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.set_lr_decay": [[69, 92], ["tensorflow.train.exponential_decay", "len", "tensorflow.train.cosine_decay_restarts", "len"], "methods", ["None"], ["", "", "def", "set_lr_decay", "(", "self", ",", "global_step", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "lr_decay_type", "==", "'no'", ":", "\n", "            ", "lr", "=", "self", ".", "args", ".", "lr", "\n", "", "elif", "self", ".", "args", ".", "lr_decay_type", "==", "'exp'", ":", "\n", "            ", "decay_stepsize", "=", "len", "(", "self", ".", "train_dataloader", ")", "*", "self", ".", "args", ".", "lr_decay_step", "\n", "lr", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "self", ".", "args", ".", "lr", ",", "\n", "global_step", ",", "\n", "decay_stepsize", ",", "\n", "self", ".", "args", ".", "lr_decay_rate", ",", "\n", "staircase", "=", "True", ")", "\n", "", "elif", "self", ".", "args", ".", "lr_decay_type", "==", "'cos'", ":", "\n", "            ", "decay_stepsize", "=", "len", "(", "self", ".", "train_dataloader", ")", "*", "self", ".", "args", ".", "lr_decay_step", "\n", "lr", "=", "tf", ".", "train", ".", "cosine_decay_restarts", "(", "\n", "self", ".", "args", ".", "lr", ",", "\n", "global_step", ",", "\n", "decay_stepsize", ",", "\n", "t_mul", "=", "2.0", ",", "\n", "m_mul", "=", "0.8", ",", "\n", "alpha", "=", "0.1", "\n", ")", "\n", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.base_solver.BaseSolver.set_optimizer": [[95, 112], ["tensorflow.train.GradientDescentOptimizer", "tensorflow.train.MomentumOptimizer", "logger.info", "tensorflow.train.AdamOptimizer", "logger.info", "tensorflow.contrib.opt.AdamWOptimizer", "logger.info", "tensorflow.train.RMSPropOptimizer", "logger.info"], "methods", ["None"], ["", "def", "set_optimizer", "(", "self", ",", "lr", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "optimizer", "==", "'sgd'", ":", "\n", "            ", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "lr", ")", "\n", "", "elif", "self", ".", "args", ".", "optimizer", "==", "'momentum'", ":", "\n", "            ", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr", ",", "0.9", ")", "\n", "logger", ".", "info", "(", "'Using momentum optimizer'", ")", "\n", "", "elif", "self", ".", "args", ".", "optimizer", "==", "'adam'", ":", "\n", "            ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ")", "\n", "logger", ".", "info", "(", "'Using Adam optimizer'", ")", "\n", "", "elif", "self", ".", "args", ".", "optimizer", "==", "'adamw'", ":", "\n", "            ", "optimizer", "=", "tf", ".", "contrib", ".", "opt", ".", "AdamWOptimizer", "(", "5e-5", ",", "lr", ")", "\n", "logger", ".", "info", "(", "'Using AdamW optimizer'", ")", "\n", "", "elif", "self", ".", "args", ".", "optimizer", "==", "'rmsprop'", ":", "\n", "            ", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "lr", ")", "\n", "logger", ".", "info", "(", "'Using RMSProp optimizer'", ")", "\n", "\n", "", "return", "optimizer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.GCZSL_dataset.CompositionDatasetActivations.__init__": [[18, 94], ["data_utils.imagenet_transform", "data_utils.ImageLoader", "GCZSL_dataset.CompositionDatasetActivations.parse_split", "GCZSL_dataset.CompositionDatasetActivations.get_split_info", "print", "enumerate", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.load", "dict", "activation_data[].size", "print", "set", "GCZSL_dataset.CompositionDatasetActivations.obj_affordance_mask.append", "samples_grouped_by_obj[].append", "len", "GCZSL_dataset.CompositionDatasetActivations.neg_pool.append", "range", "os.join", "os.join", "print", "zip", "enumerate", "enumerate", "enumerate", "len", "range", "len", "GCZSL_dataset.CompositionDatasetActivations.neg_pool[].append", "open", "numpy.array", "len", "len", "pickle.load", "os.join.split"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.data_utils.imagenet_transform", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.CZSL_dataset.CompositionDatasetActivations.parse_split", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.CZSL_dataset.CompositionDatasetActivations.get_split_info"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "root", ",", "phase", ",", "feat_file", ",", "split", "=", "'compositional-split'", ",", "with_image", "=", "False", ",", "obj_pred", "=", "None", ",", "transform_type", "=", "'normal'", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "with_image", "=", "with_image", "\n", "\n", "self", ".", "feat_dim", "=", "None", "\n", "self", ".", "transform", "=", "data_utils", ".", "imagenet_transform", "(", "phase", ",", "transform_type", ")", "\n", "self", ".", "loader", "=", "data_utils", ".", "ImageLoader", "(", "self", ".", "root", "+", "'/images/'", ")", "\n", "\n", "if", "feat_file", "is", "not", "None", ":", "\n", "            ", "feat_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "feat_file", ")", "\n", "activation_data", "=", "torch", ".", "load", "(", "feat_file", ")", "\n", "\n", "self", ".", "activation_dict", "=", "dict", "(", "zip", "(", "activation_data", "[", "'files'", "]", ",", "activation_data", "[", "'features'", "]", ")", ")", "\n", "self", ".", "feat_dim", "=", "activation_data", "[", "'features'", "]", ".", "size", "(", "1", ")", "\n", "print", "(", "'%d activations loaded'", "%", "(", "len", "(", "self", ".", "activation_dict", ")", ")", ")", "\n", "\n", "# pair = (attr, obj)", "\n", "", "(", "self", ".", "attrs", ",", "self", ".", "objs", ",", "self", ".", "pairs", ",", "\n", "self", ".", "train_pairs", ",", "self", ".", "val_pairs", ",", "self", ".", "test_pairs", ")", "=", "self", ".", "parse_split", "(", ")", "\n", "\n", "self", ".", "attr2idx", "=", "{", "attr", ":", "idx", "for", "idx", ",", "attr", "in", "enumerate", "(", "self", ".", "attrs", ")", "}", "\n", "self", ".", "obj2idx", "=", "{", "obj", ":", "idx", "for", "idx", ",", "obj", "in", "enumerate", "(", "self", ".", "objs", ")", "}", "\n", "self", ".", "pair2idx", "=", "{", "pair", ":", "idx", "for", "idx", ",", "pair", "in", "enumerate", "(", "self", ".", "pairs", ")", "}", "\n", "\n", "\n", "self", ".", "train_data", ",", "self", ".", "val_data", ",", "self", ".", "test_data", "=", "self", ".", "get_split_info", "(", ")", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "train_data", "\n", "", "elif", "self", ".", "phase", "==", "'val'", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "val_data", "\n", "", "elif", "self", ".", "phase", "==", "'test'", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "test_data", "\n", "\n", "\n", "# list of [img_name, attr, obj, attr_id, obj_id, feat]", "\n", "", "print", "(", "'#images = %d'", "%", "len", "(", "self", ".", "data", ")", ")", "\n", "\n", "\n", "# fix later -- affordance thing", "\n", "# return {object: all attrs that occur with obj}", "\n", "self", ".", "obj_affordance_mask", "=", "[", "]", "\n", "for", "_obj", "in", "self", ".", "objs", ":", "\n", "            ", "candidates", "=", "[", "x", "[", "1", "]", "for", "x", "in", "self", ".", "train_data", "+", "self", ".", "test_data", "if", "x", "[", "2", "]", "==", "_obj", "]", "\n", "# x = (_,attr,obj,_,_,_)", "\n", "affordance", "=", "set", "(", "candidates", ")", "\n", "mask", "=", "[", "1", "if", "x", "in", "affordance", "else", "0", "for", "x", "in", "self", ".", "attrs", "]", "\n", "self", ".", "obj_affordance_mask", ".", "append", "(", "mask", ")", "\n", "\n", "\n", "# negative image pool", "\n", "", "samples_grouped_by_obj", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "self", ".", "objs", ")", ")", "]", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "train_data", ")", ":", "\n", "            ", "samples_grouped_by_obj", "[", "x", "[", "4", "]", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "self", ".", "neg_pool", "=", "[", "]", "# [obj_id][attr_id] => list of sample id", "\n", "for", "obj_id", "in", "range", "(", "len", "(", "self", ".", "objs", ")", ")", ":", "\n", "            ", "self", ".", "neg_pool", ".", "append", "(", "[", "]", ")", "\n", "for", "attr_id", "in", "range", "(", "len", "(", "self", ".", "attrs", ")", ")", ":", "\n", "                ", "self", ".", "neg_pool", "[", "obj_id", "]", ".", "append", "(", "\n", "[", "i", "for", "i", "in", "samples_grouped_by_obj", "[", "obj_id", "]", "if", "\n", "self", ".", "train_data", "[", "i", "]", "[", "3", "]", "!=", "attr_id", "]", "\n", ")", "\n", "\n", "", "", "self", ".", "comp_gamma", "=", "{", "'a'", ":", "1", ",", "'b'", ":", "1", "}", "\n", "self", ".", "attr_gamma", "=", "{", "'a'", ":", "1", ",", "'b'", ":", "1", "}", "\n", "\n", "if", "obj_pred", "is", "None", ":", "\n", "            ", "self", ".", "obj_pred", "=", "None", "\n", "", "else", ":", "\n", "            ", "obj_pred_path", "=", "osp", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'data/obj_scores'", ",", "obj_pred", ")", "\n", "print", "(", "\"Loading object prediction from %s\"", "%", "obj_pred_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "with", "open", "(", "obj_pred_path", ",", "'rb'", ")", "as", "fp", ":", "\n", "                ", "self", ".", "obj_pred", "=", "np", ".", "array", "(", "pickle", ".", "load", "(", "fp", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.GCZSL_dataset.CompositionDatasetActivations.get_split_info": [[96, 124], ["torch.load", "set", "set", "print", "train_data.append", "val_data.append", "test_data.append", "NotImplementedError"], "methods", ["None"], ["", "", "", "def", "get_split_info", "(", "self", ")", ":", "\n", "        ", "data", "=", "torch", ".", "load", "(", "self", ".", "root", "+", "'/metadata.t7'", ")", "\n", "train_pair_set", "=", "set", "(", "self", ".", "train_pairs", ")", "\n", "test_pair_set", "=", "set", "(", "self", ".", "test_pairs", ")", "\n", "train_data", ",", "val_data", ",", "test_data", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "\n", "print", "(", "\"natural split \"", "+", "self", ".", "phase", ")", "\n", "for", "instance", "in", "data", ":", "\n", "            ", "image", ",", "attr", ",", "obj", ",", "settype", "=", "instance", "[", "'image'", "]", ",", "instance", "[", "'attr'", "]", ",", "instance", "[", "'obj'", "]", ",", "instance", "[", "'set'", "]", "\n", "\n", "if", "attr", "==", "'NA'", "or", "(", "attr", ",", "obj", ")", "not", "in", "self", ".", "pairs", "or", "settype", "==", "'NA'", ":", "\n", "# ignore instances with unlabeled attributes", "\n", "# ignore instances that are not in current split", "\n", "                ", "continue", "\n", "\n", "", "data_i", "=", "[", "image", ",", "attr", ",", "obj", ",", "self", ".", "attr2idx", "[", "attr", "]", ",", "self", ".", "obj2idx", "[", "obj", "]", ",", "self", ".", "activation_dict", "[", "image", "]", "]", "\n", "\n", "if", "settype", "==", "'train'", ":", "\n", "                ", "train_data", ".", "append", "(", "data_i", ")", "\n", "", "elif", "settype", "==", "'val'", ":", "\n", "                ", "val_data", ".", "append", "(", "data_i", ")", "\n", "", "elif", "settype", "==", "'test'", ":", "\n", "                ", "test_data", ".", "append", "(", "data_i", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "settype", ")", "\n", "\n", "", "", "return", "train_data", ",", "val_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.GCZSL_dataset.CompositionDatasetActivations.parse_split": [[126, 145], ["GCZSL_dataset.CompositionDatasetActivations.parse_split.parse_pairs"], "methods", ["None"], ["", "def", "parse_split", "(", "self", ")", ":", "\n", "\n", "        ", "def", "parse_pairs", "(", "pair_list", ")", ":", "\n", "            ", "with", "open", "(", "pair_list", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "pairs", "=", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "pairs", "=", "[", "t", ".", "split", "(", ")", "for", "t", "in", "pairs", "]", "\n", "pairs", "=", "list", "(", "map", "(", "tuple", ",", "pairs", ")", ")", "\n", "", "attrs", ",", "objs", "=", "zip", "(", "*", "pairs", ")", "\n", "return", "attrs", ",", "objs", ",", "pairs", "\n", "\n", "", "tr_attrs", ",", "tr_objs", ",", "tr_pairs", "=", "parse_pairs", "(", "'%s/%s/train_pairs.txt'", "%", "(", "self", ".", "root", ",", "self", ".", "split", ")", ")", "\n", "val_attrs", ",", "val_objs", ",", "val_pairs", "=", "parse_pairs", "(", "'%s/%s/val_pairs.txt'", "%", "(", "self", ".", "root", ",", "self", ".", "split", ")", ")", "\n", "ts_attrs", ",", "ts_objs", ",", "ts_pairs", "=", "parse_pairs", "(", "'%s/%s/test_pairs.txt'", "%", "(", "self", ".", "root", ",", "self", ".", "split", ")", ")", "\n", "\n", "all_attrs", "=", "sorted", "(", "list", "(", "set", "(", "tr_attrs", "+", "val_attrs", "+", "ts_attrs", ")", ")", ")", "\n", "all_objs", "=", "sorted", "(", "list", "(", "set", "(", "tr_objs", "+", "val_objs", "+", "ts_objs", ")", ")", ")", "\n", "all_pairs", "=", "sorted", "(", "list", "(", "set", "(", "tr_pairs", "+", "val_pairs", "+", "ts_pairs", ")", ")", ")", "\n", "\n", "return", "all_attrs", ",", "all_objs", ",", "all_pairs", ",", "tr_pairs", ",", "val_pairs", ",", "ts_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.GCZSL_dataset.CompositionDatasetActivations.sample_negative": [[148, 150], ["numpy.random.choice"], "methods", ["None"], ["", "def", "sample_negative", "(", "self", ",", "attr_id", ",", "obj_id", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "choice", "(", "self", ".", "neg_pool", "[", "obj_id", "]", "[", "attr_id", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.GCZSL_dataset.CompositionDatasetActivations.__getitem__": [[151, 182], ["GCZSL_dataset.CompositionDatasetActivations.__getitem__.get_sample"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "def", "get_sample", "(", "i", ")", ":", "\n", "            ", "image", ",", "attr", ",", "obj", ",", "attr_id", ",", "obj_id", ",", "feat", "=", "self", ".", "data", "[", "i", "]", "\n", "if", "self", ".", "with_image", ":", "\n", "                ", "img", "=", "self", ".", "loader", "(", "image", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "None", "\n", "\n", "", "return", "[", "img", ",", "attr_id", ",", "obj_id", ",", "self", ".", "pair2idx", "[", "(", "attr", ",", "obj", ")", "]", ",", "feat", "]", "\n", "\n", "", "pos", "=", "get_sample", "(", "index", ")", "\n", "\n", "mask", "=", "np", ".", "array", "(", "self", ".", "obj_affordance_mask", "[", "pos", "[", "2", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "            ", "negid", "=", "self", ".", "sample_negative", "(", "pos", "[", "1", "]", ",", "pos", "[", "2", "]", ")", "# negative example", "\n", "neg", "=", "get_sample", "(", "negid", ")", "\n", "\n", "data", "=", "pos", "+", "neg", "+", "[", "mask", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "pos", "+", "[", "mask", "]", "\n", "\n", "# train [img, attr_id, obj_id, pair_id, img_feature, img, attr_id, obj_id, pair_id, img_feature, aff_mask]", "\n", "# test [img, attr_id, obj_id, pair_id, img_feature, aff_mask]", "\n", "\n", "", "if", "self", ".", "obj_pred", "is", "not", "None", ":", "\n", "            ", "data", ".", "append", "(", "self", ".", "obj_pred", "[", "index", ",", ":", "]", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.GCZSL_dataset.CompositionDatasetActivations.__len__": [[183, 185], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.GCZSL_dataset.CompositionDatasetActivationsGenerator.__init__": [[194, 201], ["GCZSL_dataset.CompositionDatasetActivations.__init__", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "print", "torch.no_grad", "GCZSL_dataset.CompositionDatasetActivationsGenerator.generate_features"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.__init__", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.CZSL_dataset.CompositionDatasetActivationsGenerator.generate_features"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "feat_file", ",", "split", "=", "'compositional-split'", ",", "feat_extractor", "=", "None", ",", "transform_type", "=", "'normal'", ")", ":", "\n", "        ", "super", "(", "CompositionDatasetActivationsGenerator", ",", "self", ")", ".", "__init__", "(", "root", ",", "'train'", ",", "None", ",", "split", ",", "transform_type", "=", "transform_type", ")", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "root", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "generate_features", "(", "feat_file", ",", "feat_extractor", ",", "transform_type", ")", "\n", "", "print", "(", "'Features generated.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.GCZSL_dataset.CompositionDatasetActivationsGenerator.get_split_info": [[202, 229], ["torch.load", "set", "set", "print", "train_data.append", "val_data.append", "test_data.append", "NotImplementedError"], "methods", ["None"], ["", "def", "get_split_info", "(", "self", ")", ":", "\n", "        ", "data", "=", "torch", ".", "load", "(", "self", ".", "root", "+", "'/metadata.t7'", ")", "\n", "train_pair_set", "=", "set", "(", "self", ".", "train_pairs", ")", "\n", "test_pair_set", "=", "set", "(", "self", ".", "test_pairs", ")", "\n", "train_data", ",", "val_data", ",", "test_data", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "print", "(", "\"natural split\"", ")", "\n", "for", "instance", "in", "data", ":", "\n", "            ", "image", ",", "attr", ",", "obj", ",", "settype", "=", "instance", "[", "'image'", "]", ",", "instance", "[", "'attr'", "]", ",", "instance", "[", "'obj'", "]", ",", "instance", "[", "'set'", "]", "\n", "\n", "if", "attr", "==", "'NA'", "or", "(", "attr", ",", "obj", ")", "not", "in", "self", ".", "pairs", "or", "settype", "==", "'NA'", ":", "\n", "# ignore instances with unlabeled attributes", "\n", "# ignore instances that are not in current split", "\n", "                ", "continue", "\n", "\n", "", "data_i", "=", "[", "image", ",", "attr", ",", "obj", ",", "self", ".", "attr2idx", "[", "attr", "]", ",", "self", ".", "obj2idx", "[", "obj", "]", ",", "None", "]", "\n", "\n", "if", "settype", "==", "'train'", ":", "\n", "                ", "train_data", ".", "append", "(", "data_i", ")", "\n", "", "elif", "settype", "==", "'val'", ":", "\n", "                ", "val_data", ".", "append", "(", "data_i", ")", "\n", "", "elif", "settype", "==", "'test'", ":", "\n", "                ", "test_data", ".", "append", "(", "data_i", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "settype", ")", "\n", "\n", "", "", "return", "train_data", ",", "val_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.GCZSL_dataset.CompositionDatasetActivationsGenerator.generate_features": [[231, 254], ["data_utils.imagenet_transform", "torchvision.models.resnet18.eval().cuda", "tqdm.tqdm", "torch.cat", "print", "torch.save", "torchvision.models.resnet18", "torch.nn.Sequential", "data_utils.chunks", "list", "list", "torchvision.models.resnet18.", "torch.cat.append", "torchvision.models.resnet18.eval", "zip", "map", "map", "torch.stack().cuda", "torchvision.models.resnet18.data.cpu", "len", "len", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.data_utils.imagenet_transform", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.data_utils.chunks"], ["", "def", "generate_features", "(", "self", ",", "out_file", ",", "feat_extractor", ",", "transform_type", ")", ":", "\n", "\n", "        ", "data", "=", "self", ".", "train_data", "+", "self", ".", "val_data", "+", "self", ".", "test_data", "\n", "transform", "=", "data_utils", ".", "imagenet_transform", "(", "'test'", ",", "transform_type", ")", "\n", "\n", "if", "feat_extractor", "is", "None", ":", "\n", "            ", "feat_extractor", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "feat_extractor", ".", "fc", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "", "feat_extractor", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "image_feats", "=", "[", "]", "\n", "image_files", "=", "[", "]", "\n", "for", "chunk", "in", "tqdm", ".", "tqdm", "(", "data_utils", ".", "chunks", "(", "data", ",", "512", ")", ",", "total", "=", "len", "(", "data", ")", "//", "512", ")", ":", "\n", "            ", "files", "=", "zip", "(", "*", "chunk", ")", "[", "0", "]", "\n", "imgs", "=", "list", "(", "map", "(", "self", ".", "loader", ",", "files", ")", ")", "\n", "imgs", "=", "list", "(", "map", "(", "transform", ",", "imgs", ")", ")", "\n", "feats", "=", "feat_extractor", "(", "torch", ".", "stack", "(", "imgs", ",", "0", ")", ".", "cuda", "(", ")", ")", "\n", "image_feats", ".", "append", "(", "feats", ".", "data", ".", "cpu", "(", ")", ")", "\n", "image_files", "+=", "files", "\n", "", "image_feats", "=", "torch", ".", "cat", "(", "image_feats", ",", "0", ")", "\n", "print", "(", "'features for %d images generated'", "%", "(", "len", "(", "image_files", ")", ")", ")", "\n", "\n", "torch", ".", "save", "(", "{", "'features'", ":", "image_feats", ",", "'files'", ":", "image_files", "}", ",", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.data_utils.ImageLoader.__init__": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ")", ":", "\n", "        ", "self", ".", "img_dir", "=", "root", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.data_utils.ImageLoader.__call__": [[14, 32], ["str_types.append", "type", "PIL.Image.open().convert", "type", "PIL.Image.open().convert", "img.crop.crop.crop", "NotImplementedError", "PIL.Image.open", "str", "PIL.Image.open", "type"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "str_types", "=", "[", "str", "]", "\n", "try", ":", "\n", "            ", "str_types", ".", "append", "(", "unicode", ")", "\n", "", "except", "NameError", ":", "\n", "            ", "pass", "\n", "\n", "", "if", "type", "(", "img", ")", "in", "str_types", ":", "\n", "            ", "f", "=", "'%s/%s'", "%", "(", "self", ".", "img_dir", ",", "img", ")", "\n", "img", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "", "elif", "type", "(", "img", ")", "in", "[", "list", ",", "tuple", "]", ":", "\n", "            ", "f", "=", "'%s/%s'", "%", "(", "self", ".", "img_dir", ",", "img", "[", "0", "]", ")", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "img", "[", "1", ":", "]", "# bbox", "\n", "img", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x", ",", "y", ",", "x", "+", "w", ",", "y", "+", "h", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "str", "(", "type", "(", "img", ")", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.data_utils.imagenet_transform": [[34, 62], ["torchvision.Compose", "torchvision.Compose", "NotImplementedError", "torchvision.Compose", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "imagenet_transform", "(", "phase", ",", "transform_type", ")", ":", "\n", "    ", "mean", ",", "std", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "if", "transform_type", "==", "'normal'", ":", "\n", "        ", "if", "phase", "==", "'train'", ":", "\n", "            ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", ")", "\n", "", "elif", "phase", "in", "[", "'test'", ",", "'val'", "]", ":", "\n", "            ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", ")", "\n", "", "", "elif", "transform_type", "==", "'fixed'", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"transform_type %s\"", "%", "transform_type", ")", "\n", "\n", "", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.data_utils.chunks": [[64, 68], ["range", "len"], "function", ["None"], ["", "def", "chunks", "(", "l", ",", "n", ")", ":", "\n", "    ", "\"\"\"Yield successive n-sized chunks from l.\"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", ":", "\n", "        ", "yield", "l", "[", "i", ":", "i", "+", "n", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.CZSL_dataset.CompositionDatasetActivations.__init__": [[19, 87], ["data_utils.imagenet_transform", "data_utils.ImageLoader", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.load", "dict", "activation_data[].size", "print", "CZSL_dataset.CompositionDatasetActivations.parse_split", "CZSL_dataset.CompositionDatasetActivations.get_split_info", "print", "enumerate", "range", "os.join", "os.join", "json.load", "zip", "set", "CZSL_dataset.CompositionDatasetActivations.obj_affordance_mask.append", "samples_grouped_by_obj[].append", "len", "CZSL_dataset.CompositionDatasetActivations.neg_pool.append", "range", "open", "numpy.array", "os.join", "os.join", "print", "len", "enumerate", "enumerate", "enumerate", "len", "range", "len", "CZSL_dataset.CompositionDatasetActivations.neg_pool[].append", "json.load.items", "open", "numpy.array", "len", "pickle.load", "os.join.split"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.data_utils.imagenet_transform", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.CZSL_dataset.CompositionDatasetActivations.parse_split", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.CZSL_dataset.CompositionDatasetActivations.get_split_info"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "root", ",", "phase", ",", "feat_file", ",", "split", "=", "'compositional-split'", ",", "with_image", "=", "False", ",", "obj_pred", "=", "None", ",", "transform_type", "=", "'normal'", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "with_image", "=", "with_image", "\n", "\n", "self", ".", "feat_dim", "=", "None", "\n", "self", ".", "transform", "=", "data_utils", ".", "imagenet_transform", "(", "phase", ",", "transform_type", ")", "\n", "self", ".", "loader", "=", "data_utils", ".", "ImageLoader", "(", "self", ".", "root", "+", "'/images/'", ")", "\n", "\n", "\n", "feat_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "feat_file", ")", "\n", "activation_data", "=", "torch", ".", "load", "(", "feat_file", ")", "\n", "\n", "self", ".", "activation_dict", "=", "dict", "(", "zip", "(", "activation_data", "[", "'files'", "]", ",", "activation_data", "[", "'features'", "]", ")", ")", "\n", "self", ".", "feat_dim", "=", "activation_data", "[", "'features'", "]", ".", "size", "(", "1", ")", "\n", "print", "(", "'%d activations loaded'", "%", "(", "len", "(", "self", ".", "activation_dict", ")", ")", ")", "\n", "\n", "# pair = (attr, obj)", "\n", "self", ".", "attrs", ",", "self", ".", "objs", ",", "self", ".", "pairs", ",", "self", ".", "train_pairs", ",", "self", ".", "test_pairs", "=", "self", ".", "parse_split", "(", ")", "\n", "self", ".", "attr2idx", "=", "{", "attr", ":", "idx", "for", "idx", ",", "attr", "in", "enumerate", "(", "self", ".", "attrs", ")", "}", "\n", "self", ".", "obj2idx", "=", "{", "obj", ":", "idx", "for", "idx", ",", "obj", "in", "enumerate", "(", "self", ".", "objs", ")", "}", "\n", "self", ".", "pair2idx", "=", "{", "pair", ":", "idx", "for", "idx", ",", "pair", "in", "enumerate", "(", "self", ".", "pairs", ")", "}", "\n", "\n", "\n", "self", ".", "train_data", ",", "self", ".", "test_data", "=", "self", ".", "get_split_info", "(", ")", "\n", "\n", "self", ".", "data", "=", "self", ".", "train_data", "if", "self", ".", "phase", "==", "'train'", "else", "self", ".", "test_data", "# list of [img_name, attr, obj, attr_id, obj_id, feat]", "\n", "print", "(", "'#images = %d'", "%", "len", "(", "self", ".", "data", ")", ")", "\n", "\n", "\n", "# return {object: all attrs that occur with obj}", "\n", "self", ".", "obj_affordance_mask", "=", "[", "]", "\n", "for", "_obj", "in", "self", ".", "objs", ":", "\n", "            ", "candidates", "=", "[", "attr", "for", "(", "_", ",", "attr", ",", "obj", ",", "_", ",", "_", ",", "_", ")", "in", "self", ".", "train_data", "+", "self", ".", "test_data", "if", "obj", "==", "_obj", "]", "\n", "affordance", "=", "set", "(", "candidates", ")", "\n", "mask", "=", "[", "1", "if", "x", "in", "affordance", "else", "0", "for", "x", "in", "self", ".", "attrs", "]", "\n", "self", ".", "obj_affordance_mask", ".", "append", "(", "mask", ")", "\n", "\n", "\n", "# negative image pool", "\n", "", "samples_grouped_by_obj", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "self", ".", "objs", ")", ")", "]", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "train_data", ")", ":", "\n", "            ", "samples_grouped_by_obj", "[", "x", "[", "4", "]", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "self", ".", "neg_pool", "=", "[", "]", "# [obj_id][attr_id] => list of sample id", "\n", "for", "obj_id", "in", "range", "(", "len", "(", "self", ".", "objs", ")", ")", ":", "\n", "            ", "self", ".", "neg_pool", ".", "append", "(", "[", "]", ")", "\n", "for", "attr_id", "in", "range", "(", "len", "(", "self", ".", "attrs", ")", ")", ":", "\n", "                ", "self", ".", "neg_pool", "[", "obj_id", "]", ".", "append", "(", "\n", "[", "i", "for", "i", "in", "samples_grouped_by_obj", "[", "obj_id", "]", "if", "\n", "self", ".", "train_data", "[", "i", "]", "[", "3", "]", "!=", "attr_id", "]", "\n", ")", "\n", "\n", "", "", "aux_data_root", "=", "osp", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'utils/aux_data'", ")", "\n", "gamma", "=", "json", ".", "load", "(", "open", "(", "aux_data_root", "+", "\"/%s_gamma.json\"", "%", "name", ")", ")", "\n", "gamma", "=", "{", "k", ":", "np", ".", "array", "(", "v", ",", "dtype", "=", "np", ".", "float32", ")", "for", "k", ",", "v", "in", "gamma", ".", "items", "(", ")", "}", "\n", "self", ".", "comp_gamma", "=", "{", "'a'", ":", "gamma", "[", "'comp_a'", "]", ",", "'b'", ":", "gamma", "[", "'comp_b'", "]", "}", "\n", "self", ".", "attr_gamma", "=", "{", "'a'", ":", "gamma", "[", "'attr_a'", "]", ",", "'b'", ":", "gamma", "[", "'attr_b'", "]", "}", "\n", "\n", "\n", "if", "obj_pred", "is", "None", ":", "\n", "            ", "self", ".", "obj_pred", "=", "None", "\n", "", "else", ":", "\n", "            ", "obj_pred_path", "=", "osp", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'data/obj_scores'", ",", "obj_pred", ")", "\n", "print", "(", "\"Loading object prediction from %s\"", "%", "obj_pred_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "with", "open", "(", "obj_pred_path", ",", "'rb'", ")", "as", "fp", ":", "\n", "                ", "self", ".", "obj_pred", "=", "np", ".", "array", "(", "pickle", ".", "load", "(", "fp", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.CZSL_dataset.CompositionDatasetActivations.get_split_info": [[89, 111], ["torch.load", "set", "set", "train_data.append", "test_data.append"], "methods", ["None"], ["", "", "", "def", "get_split_info", "(", "self", ")", ":", "\n", "        ", "data", "=", "torch", ".", "load", "(", "self", ".", "root", "+", "'/metadata.t7'", ")", "\n", "train_pair_set", "=", "set", "(", "self", ".", "train_pairs", ")", "\n", "test_pair_set", "=", "set", "(", "self", ".", "test_pairs", ")", "\n", "train_data", ",", "test_data", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "instance", "in", "data", ":", "\n", "\n", "            ", "image", ",", "attr", ",", "obj", "=", "instance", "[", "'image'", "]", ",", "instance", "[", "'attr'", "]", ",", "instance", "[", "'obj'", "]", "\n", "\n", "if", "attr", "==", "'NA'", "or", "(", "attr", ",", "obj", ")", "not", "in", "self", ".", "pairs", ":", "\n", "# ignore instances with unlabeled attributes", "\n", "# ignore instances that are not in current split", "\n", "                ", "continue", "\n", "\n", "", "data_i", "=", "[", "image", ",", "attr", ",", "obj", ",", "self", ".", "attr2idx", "[", "attr", "]", ",", "self", ".", "obj2idx", "[", "obj", "]", ",", "self", ".", "activation_dict", "[", "image", "]", "]", "\n", "if", "(", "attr", ",", "obj", ")", "in", "train_pair_set", ":", "\n", "                ", "train_data", ".", "append", "(", "data_i", ")", "\n", "", "else", ":", "\n", "                ", "test_data", ".", "append", "(", "data_i", ")", "\n", "\n", "", "", "return", "train_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.CZSL_dataset.CompositionDatasetActivations.parse_split": [[112, 129], ["CZSL_dataset.CompositionDatasetActivations.parse_split.parse_pairs"], "methods", ["None"], ["", "def", "parse_split", "(", "self", ")", ":", "\n", "\n", "        ", "def", "parse_pairs", "(", "pair_list", ")", ":", "\n", "            ", "with", "open", "(", "pair_list", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "pairs", "=", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "pairs", "=", "[", "t", ".", "split", "(", ")", "for", "t", "in", "pairs", "]", "\n", "pairs", "=", "list", "(", "map", "(", "tuple", ",", "pairs", ")", ")", "\n", "", "attrs", ",", "objs", "=", "zip", "(", "*", "pairs", ")", "\n", "return", "attrs", ",", "objs", ",", "pairs", "\n", "\n", "", "tr_attrs", ",", "tr_objs", ",", "tr_pairs", "=", "parse_pairs", "(", "'%s/%s/train_pairs.txt'", "%", "(", "self", ".", "root", ",", "self", ".", "split", ")", ")", "\n", "ts_attrs", ",", "ts_objs", ",", "ts_pairs", "=", "parse_pairs", "(", "'%s/%s/test_pairs.txt'", "%", "(", "self", ".", "root", ",", "self", ".", "split", ")", ")", "\n", "\n", "all_attrs", ",", "all_objs", "=", "sorted", "(", "list", "(", "set", "(", "tr_attrs", "+", "ts_attrs", ")", ")", ")", ",", "sorted", "(", "list", "(", "set", "(", "tr_objs", "+", "ts_objs", ")", ")", ")", "\n", "all_pairs", "=", "sorted", "(", "list", "(", "set", "(", "tr_pairs", "+", "ts_pairs", ")", ")", ")", "\n", "\n", "return", "all_attrs", ",", "all_objs", ",", "all_pairs", ",", "tr_pairs", ",", "ts_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.CZSL_dataset.CompositionDatasetActivations.sample_negative": [[131, 133], ["numpy.random.choice"], "methods", ["None"], ["", "def", "sample_negative", "(", "self", ",", "attr_id", ",", "obj_id", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "choice", "(", "self", ".", "neg_pool", "[", "obj_id", "]", "[", "attr_id", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.CZSL_dataset.CompositionDatasetActivations.__getitem__": [[135, 166], ["CZSL_dataset.CompositionDatasetActivations.__getitem__.get_sample"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "def", "get_sample", "(", "i", ")", ":", "\n", "            ", "image", ",", "attr", ",", "obj", ",", "attr_id", ",", "obj_id", ",", "feat", "=", "self", ".", "data", "[", "i", "]", "\n", "if", "self", ".", "with_image", ":", "\n", "                ", "img", "=", "self", ".", "loader", "(", "image", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "None", "\n", "\n", "", "return", "[", "img", ",", "attr_id", ",", "obj_id", ",", "self", ".", "pair2idx", "[", "(", "attr", ",", "obj", ")", "]", ",", "feat", "]", "\n", "\n", "", "pos", "=", "get_sample", "(", "index", ")", "\n", "\n", "mask", "=", "np", ".", "array", "(", "self", ".", "obj_affordance_mask", "[", "pos", "[", "2", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "            ", "negid", "=", "self", ".", "sample_negative", "(", "pos", "[", "1", "]", ",", "pos", "[", "2", "]", ")", "# negative example", "\n", "neg", "=", "get_sample", "(", "negid", ")", "\n", "\n", "data", "=", "pos", "+", "neg", "+", "[", "mask", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "pos", "+", "[", "mask", "]", "\n", "\n", "# train [img, attr_id, obj_id, pair_id, img_feature, img, attr_id, obj_id, pair_id, img_feature, aff_mask]", "\n", "# test [img, attr_id, obj_id, pair_id, img_feature, aff_mask]", "\n", "\n", "", "if", "self", ".", "obj_pred", "is", "not", "None", ":", "\n", "            ", "data", ".", "append", "(", "self", ".", "obj_pred", "[", "index", ",", ":", "]", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.CZSL_dataset.CompositionDatasetActivations.__len__": [[167, 169], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.CZSL_dataset.CompositionDatasetActivationsGenerator.__init__": [[178, 185], ["CZSL_dataset.CompositionDatasetActivations.__init__", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "print", "torch.no_grad", "CZSL_dataset.CompositionDatasetActivationsGenerator.generate_features"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.__init__", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.CZSL_dataset.CompositionDatasetActivationsGenerator.generate_features"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "feat_file", ",", "split", "=", "'compositional-split'", ",", "feat_extractor", "=", "None", ",", "transform_type", "=", "'normal'", ")", ":", "\n", "        ", "super", "(", "CompositionDatasetActivationsGenerator", ",", "self", ")", ".", "__init__", "(", "root", ",", "'train'", ",", "feat_file", ",", "split", ",", "transform_type", "=", "transform_type", ")", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "root", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "generate_features", "(", "feat_file", ",", "feat_extractor", ",", "transform_type", ")", "\n", "", "print", "(", "'Features generated.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.CZSL_dataset.CompositionDatasetActivationsGenerator.generate_features": [[187, 210], ["data_utils.imagenet_transform", "torchvision.models.resnet18.eval().cuda", "tqdm.tqdm", "torch.cat", "print", "torch.save", "torchvision.models.resnet18", "torch.nn.Sequential", "data_utils.chunks", "zip", "list", "list", "torchvision.models.resnet18.", "torch.cat.append", "torchvision.models.resnet18.eval", "map", "map", "torch.stack().cuda", "torchvision.models.resnet18.data.cpu", "len", "len", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.data_utils.imagenet_transform", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.data_utils.chunks"], ["", "def", "generate_features", "(", "self", ",", "out_file", ",", "feat_extractor", ",", "transform_type", ")", ":", "\n", "\n", "        ", "data", "=", "self", ".", "train_data", "+", "self", ".", "test_data", "\n", "transform", "=", "data_utils", ".", "imagenet_transform", "(", "'test'", ",", "transform_type", ")", "\n", "\n", "if", "feat_extractor", "is", "None", ":", "\n", "            ", "feat_extractor", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "feat_extractor", ".", "fc", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "", "feat_extractor", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "image_feats", "=", "[", "]", "\n", "image_files", "=", "[", "]", "\n", "for", "chunk", "in", "tqdm", ".", "tqdm", "(", "data_utils", ".", "chunks", "(", "data", ",", "512", ")", ",", "total", "=", "len", "(", "data", ")", "//", "512", ")", ":", "\n", "            ", "files", ",", "attrs", ",", "objs", "=", "zip", "(", "*", "chunk", ")", "\n", "imgs", "=", "list", "(", "map", "(", "self", ".", "loader", ",", "files", ")", ")", "\n", "imgs", "=", "list", "(", "map", "(", "transform", ",", "imgs", ")", ")", "\n", "feats", "=", "feat_extractor", "(", "torch", ".", "stack", "(", "imgs", ",", "0", ")", ".", "cuda", "(", ")", ")", "\n", "image_feats", ".", "append", "(", "feats", ".", "data", ".", "cpu", "(", ")", ")", "\n", "image_files", "+=", "files", "\n", "", "image_feats", "=", "torch", ".", "cat", "(", "image_feats", ",", "0", ")", "\n", "print", "(", "'features for %d images generated'", "%", "(", "len", "(", "image_files", ")", ")", ")", "\n", "\n", "torch", ".", "save", "(", "{", "'features'", ":", "image_feats", ",", "'files'", ":", "image_files", "}", ",", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.Multi_dataset.MultiDatasetActivations.__init__": [[22, 101], ["super().__init__", "logging.info", "pickle.load", "len", "logging.info", "logging.info", "json.load", "json.load", "numpy.array", "logging.info", "range", "numpy.array", "enumerate", "open", "open", "open", "len", "range", "Multi_dataset.MultiDatasetActivations.neg_pool.append", "Multi_dataset.MultiDatasetActivations.pos_pool.append", "enumerate", "Multi_dataset.MultiDatasetActivations.neg_pair_filtered.append", "Multi_dataset.MultiDatasetActivations.neg_pair_filtered_mask.append", "json.load", "json.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "Multi_dataset.MultiDatasetActivations.attr_pair.append", "Multi_dataset.MultiDatasetActivations.img_att_sim.append", "Multi_dataset.MultiDatasetActivations.img_att_sim.append", "numpy.argsort", "numpy.zeros", "open", "open", "len", "len", "Multi_dataset.MultiDatasetActivations.neg_pool[].append", "Multi_dataset.MultiDatasetActivations.pos_pool[].append", "numpy.array", "numpy.zeros", "numpy.sum", "int", "int", "int", "int", "Multi_dataset.MultiDatasetActivations.neg_pair_filtered[].append", "max", "min", "Multi_dataset.MultiDatasetActivations.neg_pair_filtered[].append", "max", "min", "len", "numpy.logical_not", "numpy.array", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "phase", ",", "args", ")", ":", "\n", "        ", "super", "(", "MultiDatasetActivations", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "args", "=", "args", "\n", "\n", "\n", "pkl_path", "=", "'./data/%s_%s.pkl'", "%", "(", "data", ",", "phase", ")", "\n", "logging", ".", "info", "(", "\"reading \"", "+", "pkl_path", ")", "\n", "\n", "self", ".", "pkldata", "=", "pickle", ".", "load", "(", "open", "(", "pkl_path", ",", "\"rb\"", ")", ")", "\n", "self", ".", "n_instance", "=", "len", "(", "self", ".", "pkldata", ")", "\n", "logging", ".", "info", "(", "\"# instances %d\"", "%", "(", "self", ".", "n_instance", ")", ")", "\n", "\n", "self", ".", "attrs", "=", "[", "a", "[", "0", "]", "for", "a", "in", "json", ".", "load", "(", "open", "(", "'./utils/aux_data/%s_attrs.json'", "%", "data", ")", ")", "]", "\n", "self", ".", "objs", "=", "[", "a", "[", "0", "]", "for", "a", "in", "json", ".", "load", "(", "open", "(", "'./utils/aux_data/%s_objs.json'", "%", "data", ")", ")", "]", "\n", "logging", ".", "info", "(", "\"# objs %d # attrs %d\"", "%", "(", "len", "(", "self", ".", "objs", ")", ",", "len", "(", "self", ".", "attrs", ")", ")", ")", "\n", "\n", "self", ".", "gamma", "=", "json", ".", "load", "(", "open", "(", "'./utils/aux_data/%s_gamma.json'", "%", "data", ")", ")", "\n", "\n", "self", ".", "feat_dim", "=", "2048", "\n", "\n", "self", ".", "att_sim_matrix", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "\"utils/aux_data/similarity_%s.json\"", "%", "data", ")", ")", ")", "\n", "self", ".", "att_sim_matrix", "=", "np", ".", "array", "(", "self", ".", "att_sim_matrix", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "logging", ".", "info", "(", "\"generating neg/pos pool\"", ")", "\n", "\n", "\n", "\n", "# self.attr_pair[ i(i-1)/2 + j]=[i,j] i > j", "\n", "self", ".", "attr_pair", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "attrs", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "self", ".", "attr_pair", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "", "self", ".", "attr_pair", "=", "np", ".", "array", "(", "self", ".", "attr_pair", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "self", ".", "neg_pool", "=", "[", "]", "\n", "self", ".", "pos_pool", "=", "[", "]", "\n", "self", ".", "img_att_sim", "=", "[", "]", "\n", "self", ".", "neg_pair_filtered", "=", "[", "]", "\n", "self", ".", "neg_pair_filtered_mask", "=", "[", "]", "\n", "\n", "for", "i", ",", "info", "in", "enumerate", "(", "self", ".", "pkldata", ")", ":", "\n", "            ", "self", ".", "neg_pool", ".", "append", "(", "[", "]", ")", "\n", "self", ".", "pos_pool", ".", "append", "(", "[", "]", ")", "\n", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "info", "[", "'attr'", "]", ")", ":", "\n", "                ", "if", "label", "==", "0", ":", "\n", "                    ", "self", ".", "neg_pool", "[", "i", "]", ".", "append", "(", "idx", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "pos_pool", "[", "i", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "", "pos_sim", "=", "self", ".", "att_sim_matrix", "[", "np", ".", "array", "(", "info", "[", "'attr'", "]", ",", "dtype", "=", "np", ".", "bool", ")", "]", "\n", "if", "pos_sim", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "self", ".", "img_att_sim", ".", "append", "(", "np", ".", "zeros", "(", "len", "(", "self", ".", "attrs", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "img_att_sim", ".", "append", "(", "np", ".", "sum", "(", "pos_sim", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "sort_idx", "=", "np", ".", "argsort", "(", "self", ".", "img_att_sim", "[", "i", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "sort_idx", "=", "sort_idx", "[", "np", ".", "logical_not", "(", "np", ".", "array", "(", "info", "[", "'attr'", "]", ",", "dtype", "=", "np", ".", "bool", ")", ")", "[", "sort_idx", "]", "]", "\n", "\n", "corre_idx", "=", "sort_idx", "[", ":", "int", "(", "len", "(", "sort_idx", ")", "*", "self", ".", "args", ".", "sample_bar", ")", "]", "\n", "neutral_idx", "=", "sort_idx", "[", "int", "(", "len", "(", "sort_idx", ")", "*", "(", "0.5", "-", "0.5", "*", "self", ".", "args", ".", "sample_bar", ")", ")", ":", "int", "(", "\n", "len", "(", "sort_idx", ")", "*", "(", "0.5", "+", "0.5", "*", "self", ".", "args", ".", "sample_bar", ")", ")", "]", "\n", "exclu_idx", "=", "sort_idx", "[", "int", "(", "len", "(", "sort_idx", ")", "*", "(", "1", "-", "self", ".", "args", ".", "sample_bar", ")", ")", ":", "]", "\n", "\n", "\n", "self", ".", "neg_pair_filtered", ".", "append", "(", "[", "]", ")", "\n", "self", ".", "neg_pair_filtered_mask", ".", "append", "(", "np", ".", "zeros", "(", "self", ".", "attr_pair", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", ")", "\n", "for", "a", "in", "neutral_idx", ":", "\n", "                ", "for", "b", "in", "corre_idx", ":", "\n", "                    ", "self", ".", "neg_pair_filtered", "[", "i", "]", ".", "append", "(", "[", "a", ",", "b", "]", ")", "\n", "mx", "=", "max", "(", "a", ",", "b", ")", "\n", "mn", "=", "min", "(", "a", ",", "b", ")", "\n", "self", ".", "neg_pair_filtered_mask", "[", "i", "]", "[", "mx", "*", "(", "mx", "-", "1", ")", "/", "2", "+", "mn", "]", "=", "True", "\n", "", "for", "b", "in", "exclu_idx", ":", "\n", "                    ", "self", ".", "neg_pair_filtered", "[", "i", "]", ".", "append", "(", "[", "a", ",", "b", "]", ")", "\n", "mx", "=", "max", "(", "a", ",", "b", ")", "\n", "mn", "=", "min", "(", "a", ",", "b", ")", "\n", "self", ".", "neg_pair_filtered_mask", "[", "i", "]", "[", "mx", "*", "(", "mx", "-", "1", ")", "/", "2", "+", "mn", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.Multi_dataset.MultiDatasetActivations.__getitem__": [[104, 112], ["numpy.random.permutation", "len"], "methods", ["None"], ["", "", "", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "feature", "=", "self", ".", "pkldata", "[", "item", "]", "[", "'feature'", "]", "\n", "attr", "=", "self", ".", "pkldata", "[", "item", "]", "[", "'attr'", "]", "\n", "obj", "=", "self", ".", "pkldata", "[", "item", "]", "[", "'category_id'", "]", "\n", "img_a_sim", "=", "self", ".", "img_att_sim", "[", "item", "]", "\n", "random_attr_trip", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "attrs", ")", ")", "\n", "pair_mask", "=", "self", ".", "neg_pair_filtered_mask", "[", "item", "]", "\n", "return", "feature", ",", "attr", ",", "obj", ",", "img_a_sim", ",", "random_attr_trip", ",", "pair_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.Multi_dataset.MultiDatasetActivations.__len__": [[114, 116], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.dataset.__init__.get_dataloader": [[7, 37], ["torch.utils.data.DataLoader", "Multi_dataset.MultiDatasetActivations", "GCZSL_dataset.CompositionDatasetActivations", "CZSL_dataset.CompositionDatasetActivations", "numpy.stack", "zip"], "function", ["None"], []], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.aux_data.__init__.load_loss_weight": [[3, 20], ["importlib.import_module", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.aux_data.__init__.load_wordvec_dict": [[22, 35], ["hasattr", "importlib.import_module", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.fc_obj.Network.__init__": [[19, 28], ["BaseNetwork.__init__", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.__init__"], ["def", "__init__", "(", "self", ",", "dataloader", ",", "args", ",", "feat_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", "dataloader", ",", "args", ",", "feat_dim", ")", "\n", "\n", "self", ".", "pos_obj_id", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_image_feat", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "feat_dim", "]", ")", "\n", "\n", "self", ".", "test_attr_id", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'test_attr_id'", ")", "\n", "self", ".", "test_obj_id", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'test_obj_id'", ")", "\n", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.fc_obj.Network.build_network": [[32, 78], ["fc_obj.Network.logger", "fc_obj.Network.MLP", "tf.nn.softmax", "fc_obj.Network.cross_entropy", "fc_obj.Network.MLP", "tf.nn.softmax", "tf.zeros", "tf.zeros", "collections.OrderedDict", "tf.summary.merge_all", "tf.shape", "tf.device", "tf.summary.scalar", "tf.summary.scalar"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MLP", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MLP"], ["", "def", "build_network", "(", "self", ",", "test_only", "=", "False", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "'create_train_arch'", ")", "\n", "\n", "\n", "########################## classifier losses ##########################", "\n", "score_pos_O", "=", "self", ".", "MLP", "(", "self", ".", "pos_image_feat", ",", "self", ".", "num_obj", ",", "\n", "is_training", "=", "True", ",", "name", "=", "'obj_cls'", ",", "\n", "hidden_layers", "=", "self", ".", "args", ".", "fc_cls", ")", "\n", "prob_pos_O", "=", "tf", ".", "nn", ".", "softmax", "(", "score_pos_O", ",", "1", ")", "\n", "\n", "loss", "=", "self", ".", "cross_entropy", "(", "prob_pos_O", ",", "self", ".", "pos_obj_id", ",", "\n", "depth", "=", "self", ".", "num_obj", ",", "weight", "=", "self", ".", "obj_weight", ")", "\n", "\n", "\n", "################################ test #################################", "\n", "\n", "score_pos_O", "=", "self", ".", "MLP", "(", "self", ".", "pos_image_feat", ",", "self", ".", "num_obj", ",", "\n", "is_training", "=", "False", ",", "name", "=", "'obj_cls'", ",", "\n", "hidden_layers", "=", "self", ".", "args", ".", "fc_cls", ")", "\n", "prob_pos_O", "=", "tf", ".", "nn", ".", "softmax", "(", "score_pos_O", ",", "1", ")", "\n", "\n", "batchsize", "=", "tf", ".", "shape", "(", "self", ".", "pos_image_feat", ")", "[", "0", "]", "\n", "prob_pos_A", "=", "tf", ".", "zeros", "(", "[", "batchsize", ",", "self", ".", "num_attr", "]", ",", "\n", "dtype", "=", "self", ".", "pos_image_feat", ".", "dtype", ")", "\n", "score_original", "=", "tf", ".", "zeros", "(", "[", "batchsize", ",", "self", ".", "num_pair", "]", ",", "\n", "dtype", "=", "self", ".", "pos_image_feat", ".", "dtype", ")", "\n", "\n", "score_res", "=", "OrderedDict", "(", "[", "\n", "(", "\"score_fc\"", ",", "[", "score_original", ",", "prob_pos_A", ",", "prob_pos_O", "]", ")", ",", "\n", "]", ")", "\n", "\n", "\n", "# summary", "\n", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "'loss_total'", ",", "loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'lr'", ",", "self", ".", "lr", ")", "\n", "\n", "\n", "", "train_summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n", "\n", "if", "test_only", ":", "\n", "            ", "return", "prob_pos_O", "\n", "", "else", ":", "\n", "            ", "return", "loss", ",", "score_res", ",", "train_summary_op", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.fc_obj.Network.train_step": [[81, 91], ["sess.run"], "methods", ["None"], ["", "", "def", "train_step", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ",", "train_summary_op", ")", ":", "\n", "        ", "summary", ",", "_", "=", "sess", ".", "run", "(", "\n", "[", "train_summary_op", ",", "train_op", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "pos_obj_id", ":", "blobs", "[", "2", "]", ",", "\n", "self", ".", "pos_image_feat", ":", "blobs", "[", "9", "]", ",", "\n", "self", ".", "lr", ":", "lr", ",", "\n", "}", ")", "\n", "\n", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.fc_obj.Network.test_step_no_postprocess": [[92, 100], ["sess.run"], "methods", ["None"], ["", "def", "test_step_no_postprocess", "(", "self", ",", "sess", ",", "blobs", ",", "score_op", ")", ":", "\n", "        ", "score", "=", "sess", ".", "run", "(", "\n", "score_op", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "pos_image_feat", ":", "blobs", "[", "4", "]", ",", "\n", "}", ")", "\n", "\n", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger": [[12, 14], ["base_network.BaseNetwork.root_logger.getChild"], "methods", ["None"], ["    ", "def", "logger", "(", "self", ",", "suffix", ")", ":", "\n", "        ", "return", "self", ".", "root_logger", ".", "getChild", "(", "suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.__init__": [[15, 41], ["len", "len", "len", "load_loss_weight", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.aux_data.__init__.load_loss_weight"], ["", "def", "__init__", "(", "self", ",", "dataloader", ",", "args", ",", "feat_dim", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "num_attr", "=", "len", "(", "dataloader", ".", "dataset", ".", "attrs", ")", "\n", "self", ".", "num_obj", "=", "len", "(", "dataloader", ".", "dataset", ".", "objs", ")", "\n", "if", "feat_dim", "is", "not", "None", ":", "\n", "            ", "self", ".", "feat_dim", "=", "feat_dim", "\n", "", "else", ":", "\n", "            ", "self", ".", "feat_dim", "=", "dataloader", ".", "dataset", ".", "feat_dim", "\n", "\n", "", "self", ".", "args", "=", "args", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "\n", "\n", "if", "self", ".", "args", ".", "loss_class_weight", "and", "self", ".", "args", ".", "data", "not", "in", "[", "'SUN'", ",", "'APY'", "]", ":", "\n", "            ", "from", "utils", ".", "aux_data", "import", "load_loss_weight", "\n", "self", ".", "num_pair", "=", "len", "(", "dataloader", ".", "dataset", ".", "pairs", ")", "\n", "\n", "attr_weight", ",", "obj_weight", ",", "pair_weight", "=", "load_loss_weight", "(", "self", ".", "args", ".", "data", ")", "\n", "self", ".", "attr_weight", "=", "np", ".", "array", "(", "attr_weight", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "obj_weight", "=", "np", ".", "array", "(", "obj_weight", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "pair_weight", "=", "np", ".", "array", "(", "pair_weight", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "attr_weight", "=", "None", "\n", "self", ".", "obj_weight", "=", "None", "\n", "self", ".", "pair_weight", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.basic_argscope": [[43, 66], ["hasattr", "hasattr", "tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer"], "methods", ["None"], ["", "", "def", "basic_argscope", "(", "self", ",", "is_training", ")", ":", "\n", "        ", "activation_list", "=", "{", "\n", "'relu'", ":", "tf", ".", "nn", ".", "relu", ",", "\n", "'elu'", ":", "tf", ".", "nn", ".", "elu", ",", "\n", "}", "\n", "if", "hasattr", "(", "tf", ".", "nn", ",", "\"leaky_relu\"", ")", ":", "\n", "            ", "activation_list", "[", "'leaky_relu'", "]", "=", "tf", ".", "nn", ".", "leaky_relu", "\n", "", "if", "hasattr", "(", "tf", ".", "nn", ",", "\"relu6\"", ")", ":", "\n", "            ", "activation_list", "[", "'relu6'", "]", "=", "tf", ".", "nn", ".", "relu6", "\n", "\n", "", "if", "self", ".", "args", ".", "initializer", "is", "None", ":", "\n", "            ", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "", "else", ":", "\n", "            ", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "0", ",", "self", ".", "args", ".", "initializer", ")", "\n", "\n", "", "return", "slim", ".", "arg_scope", "(", "\n", "[", "slim", ".", "fully_connected", "]", ",", "\n", "activation_fn", "=", "activation_list", "[", "self", ".", "args", ".", "activation", "]", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", "if", "self", ".", "args", ".", "batchnorm", "else", "None", ",", "\n", "normalizer_params", "=", "{", "\n", "'is_training'", ":", "is_training", ",", "\n", "'decay'", ":", "0.95", ",", "\n", "'fused'", ":", "False", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MLP": [[70, 86], ["base_network.BaseNetwork.basic_argscope", "tensorflow.variable_scope", "tensorflow.variable_scope", "enumerate", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.basic_argscope"], ["", "def", "MLP", "(", "self", ",", "input_feat", ",", "output_dim", ",", "is_training", ",", "name", ",", "hidden_layers", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"multi-layer perceptron, 1 layers as default\"\"\"", "\n", "\n", "with", "self", ".", "basic_argscope", "(", "is_training", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "                ", "for", "i", ",", "size", "in", "enumerate", "(", "hidden_layers", ")", ":", "\n", "                    ", "input_feat", "=", "slim", ".", "fully_connected", "(", "input_feat", ",", "size", ",", "\n", "trainable", "=", "is_training", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "scope", "=", "\"fc_%d\"", "%", "i", ")", "\n", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "                        ", "input_feat", "=", "slim", ".", "dropout", "(", "input_feat", ",", "keep_prob", "=", "self", ".", "dropout", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dropout_%d'", "%", "i", ")", "\n", "\n", "", "", "output_feat", "=", "slim", ".", "fully_connected", "(", "input_feat", ",", "output_dim", ",", "\n", "trainable", "=", "is_training", ",", "activation_fn", "=", "None", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ",", "scope", "=", "\"fc_out\"", ")", "\n", "\n", "", "", "return", "output_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy": [[88, 93], ["tensorflow.one_hot", "tensorflow.one_hot", "base_network.BaseNetwork.cross_entropy_with_labelvec"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy_with_labelvec"], ["", "def", "cross_entropy", "(", "self", ",", "prob", ",", "labels", ",", "depth", ",", "target", "=", "1", ",", "weight", "=", "None", ",", "sample_weight", "=", "None", ",", "neg_loss", "=", "0", ")", ":", "\n", "        ", "\"\"\"cross entropy with GT label id (int)\"\"\"", "\n", "onehot_label", "=", "tf", ".", "one_hot", "(", "labels", ",", "depth", "=", "depth", ",", "axis", "=", "1", ")", "# (bz, depth)", "\n", "return", "self", ".", "cross_entropy_with_labelvec", "(", "prob", ",", "onehot_label", ",", "target", "=", "target", ",", "\n", "weight", "=", "weight", ",", "sample_weight", "=", "sample_weight", ",", "neg_loss", "=", "neg_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy_with_labelvec": [[94, 137], ["tensorflow.python.ops.array_ops.zeros_like", "tensorflow.python.ops.array_ops.zeros_like", "tensorflow.python.ops.array_ops.ones_like", "tensorflow.python.ops.array_ops.ones_like", "tensorflow.python.ops.array_ops.where", "tensorflow.python.ops.array_ops.where", "tensorflow.python.ops.array_ops.where", "tensorflow.python.ops.array_ops.where", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.python.ops.array_ops.zeros_like", "tensorflow.python.ops.array_ops.zeros_like", "tensorflow.log", "tensorflow.log", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.log", "tensorflow.log", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.clip_by_value", "tensorflow.clip_by_value"], "methods", ["None"], ["", "def", "cross_entropy_with_labelvec", "(", "self", ",", "prob", ",", "label_vecs", ",", "target", "=", "1", ",", "weight", "=", "None", ",", "sample_weight", "=", "None", ",", "neg_loss", "=", "0", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"cross entropy with GT onehot vector\"\"\"", "\n", "assert", "target", "in", "[", "0", ",", "1", "]", "\n", "epsilon", "=", "1e-8", "\n", "gamma", "=", "self", ".", "args", ".", "focal_loss", "\n", "alpha", "=", "neg_loss", "\n", "\n", "zeros", "=", "array_ops", ".", "zeros_like", "(", "label_vecs", ",", "dtype", "=", "prob", ".", "dtype", ")", "# (bz, depth)", "\n", "ones", "=", "array_ops", ".", "ones_like", "(", "label_vecs", ",", "dtype", "=", "prob", ".", "dtype", ")", "# (bz, depth)", "\n", "\n", "if", "target", "==", "0", ":", "\n", "            ", "prob", "=", "1", "-", "prob", "\n", "\n", "", "pos_position", "=", "label_vecs", ">", "array_ops", ".", "zeros_like", "(", "label_vecs", ",", "dtype", "=", "label_vecs", ".", "dtype", ")", "\n", "pos_prob", "=", "array_ops", ".", "where", "(", "pos_position", ",", "prob", ",", "ones", ")", "# pos -> p, neg -> 1 (no loss)", "\n", "neg_prob", "=", "array_ops", ".", "where", "(", "pos_position", ",", "zeros", ",", "prob", ")", "# pos -> 0(no loss), neg ->p", "\n", "\n", "\n", "pos_xent", "=", "-", "tf", ".", "log", "(", "tf", ".", "clip_by_value", "(", "pos_prob", ",", "epsilon", ",", "1.0", ")", ")", "\n", "if", "gamma", "is", "not", "None", ":", "\n", "            ", "pos_xent", "=", "(", "(", "1", "-", "pos_prob", ")", "**", "gamma", ")", "*", "pos_xent", "\n", "\n", "", "if", "alpha", "is", "None", "or", "alpha", "==", "0", ":", "\n", "            ", "neg_xent", "=", "0", "\n", "", "else", ":", "\n", "            ", "neg_xent", "=", "-", "alpha", "*", "tf", ".", "log", "(", "tf", ".", "clip_by_value", "(", "1.0", "-", "neg_prob", ",", "epsilon", ",", "1.0", ")", ")", "\n", "\n", "if", "gamma", "is", "not", "None", ":", "\n", "                ", "neg_xent", "=", "(", "neg_prob", "**", "gamma", ")", "*", "neg_xent", "\n", "\n", "", "", "xent", "=", "pos_xent", "+", "neg_xent", "# (bz, depth)", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "xent", "=", "xent", "*", "mask", "\n", "\n", "", "if", "sample_weight", "is", "not", "None", ":", "\n", "            ", "xent", "=", "xent", "*", "tf", ".", "expand_dims", "(", "sample_weight", ",", "axis", "=", "1", ")", "\n", "", "xent", "=", "tf", ".", "reduce_mean", "(", "xent", ",", "axis", "=", "0", ")", "# (depth,)", "\n", "\n", "if", "weight", "is", "not", "None", ":", "\n", "            ", "xent", "=", "xent", "*", "weight", "\n", "\n", "", "return", "tf", ".", "reduce_sum", "(", "xent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.distance_metric": [[140, 154], ["tensorflow.norm", "tensorflow.norm", "tensorflow.norm", "tensorflow.norm", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "NotImplementedError", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize"], "methods", ["None"], ["", "def", "distance_metric", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "if", "(", "self", ".", "args", ".", "distance_metric", "==", "'L2'", ")", ":", "\n", "            ", "return", "tf", ".", "norm", "(", "a", "-", "b", ",", "axis", "=", "-", "1", ")", "\n", "", "elif", "(", "self", ".", "args", ".", "distance_metric", "==", "'L1'", ")", ":", "\n", "            ", "return", "tf", ".", "norm", "(", "a", "-", "b", ",", "axis", "=", "-", "1", ",", "ord", "=", "1", ")", "\n", "", "elif", "(", "self", ".", "args", ".", "distance_metric", "==", "'cos'", ")", ":", "\n", "            ", "return", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "multiply", "(", "\n", "tf", ".", "nn", ".", "l2_normalize", "(", "a", ",", "axis", "=", "-", "1", ")", ",", "\n", "tf", ".", "nn", ".", "l2_normalize", "(", "b", ",", "axis", "=", "-", "1", ")", "\n", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unsupported distance metric: %s\"", "+", "self", ".", "args", ".", "distance_metric", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MSELoss": [[155, 157], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "base_network.BaseNetwork.distance_metric"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.distance_metric"], ["", "", "def", "MSELoss", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_mean", "(", "self", ".", "distance_metric", "(", "a", ",", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.carlibration_look_up": [[158, 172], ["numpy.any", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.abs", "tensorflow.abs", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "ValueError"], "methods", ["None"], ["", "def", "carlibration_look_up", "(", "self", ",", "prob", ",", "transform_attr_onehot", ",", "gt", "=", "1", ",", "margin", "=", "0.05", ")", ":", "\n", "        ", "if", "gt", "==", "1", ":", "\n", "            ", "prob_label_vec", "=", "self", ".", "att_sim", "\n", "", "elif", "gt", "==", "0", ":", "\n", "            ", "prob_label_vec", "=", "1", "-", "self", ".", "att_sim", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "gt", ")", "\n", "", "if", "np", ".", "any", "(", "prob_label_vec", "<", "0", ")", ":", "\n", "            ", "prob_label_vec", "=", "prob_label_vec", "*", "0.5", "+", "0.5", "\n", "", "carlib_prob", "=", "tf", ".", "matmul", "(", "transform_attr_onehot", ",", "tf", ".", "cast", "(", "prob_label_vec", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "prob_diff", "=", "tf", ".", "abs", "(", "prob", "-", "carlib_prob", ")", "\n", "loss", "=", "tf", ".", "maximum", "(", "0.", ",", "prob_diff", "-", "margin", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "loss", ",", "axis", "=", "1", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.triplet_margin_loss": [[173, 177], ["base_network.BaseNetwork.distance_metric", "base_network.BaseNetwork.distance_metric", "base_network.BaseNetwork.triplet_margin_loss_with_distance"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.distance_metric", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.distance_metric", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.triplet_margin_loss_with_distance"], ["", "def", "triplet_margin_loss", "(", "self", ",", "anchor", ",", "positive", ",", "negative", ",", "weight", "=", "None", ",", "margin", "=", "None", ")", ":", "\n", "        ", "d1", "=", "self", ".", "distance_metric", "(", "anchor", ",", "positive", ")", "\n", "d2", "=", "self", ".", "distance_metric", "(", "anchor", ",", "negative", ")", "\n", "return", "self", ".", "triplet_margin_loss_with_distance", "(", "d1", ",", "d2", ",", "weight", ",", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.triplet_margin_loss_with_distance": [[179, 187], ["tensorflow.maximum", "tensorflow.maximum"], "methods", ["None"], ["", "def", "triplet_margin_loss_with_distance", "(", "self", ",", "d1", ",", "d2", ",", "weight", "=", "None", ",", "margin", "=", "None", ")", ":", "\n", "        ", "if", "margin", "is", "None", ":", "\n", "            ", "margin", "=", "self", ".", "args", ".", "triplet_margin", "\n", "", "if", "weight", "is", "None", ":", "\n", "            ", "dist", "=", "d1", "-", "d2", "+", "margin", "\n", "", "else", ":", "\n", "            ", "dist", "=", "weight", "*", "(", "d1", "-", "d2", ")", "+", "margin", "\n", "", "return", "tf", ".", "maximum", "(", "dist", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.test_step": [[188, 210], ["numpy.array", "numpy.array", "sess.run", "score_op.keys", "torch.from_numpy", "enumerate", "zip"], "methods", ["None"], ["", "def", "test_step", "(", "self", ",", "sess", ",", "blobs", ",", "score_op", ")", ":", "\n", "        ", "dset", "=", "self", ".", "dataloader", ".", "dataset", "\n", "test_att", "=", "np", ".", "array", "(", "[", "dset", ".", "attr2idx", "[", "attr", "]", "for", "attr", ",", "_", "in", "dset", ".", "pairs", "]", ")", "\n", "test_obj", "=", "np", ".", "array", "(", "[", "dset", ".", "obj2idx", "[", "obj", "]", "for", "_", ",", "obj", "in", "dset", ".", "pairs", "]", ")", "\n", "\n", "feed_dict", "=", "{", "\n", "self", ".", "pos_image_feat", ":", "blobs", "[", "4", "]", ",", "\n", "self", ".", "test_attr_id", ":", "test_att", ",", "\n", "self", ".", "test_obj_id", ":", "test_obj", ",", "\n", "}", "\n", "if", "self", ".", "args", ".", "obj_pred", "is", "not", "None", ":", "\n", "            ", "feed_dict", "[", "self", ".", "pos_obj_prediction", "]", "=", "blobs", "[", "-", "1", "]", "\n", "\n", "", "score", "=", "sess", ".", "run", "(", "score_op", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "for", "key", "in", "score_op", ".", "keys", "(", ")", ":", "\n", "            ", "score", "[", "key", "]", "[", "0", "]", "=", "{", "\n", "(", "a", ",", "o", ")", ":", "torch", ".", "from_numpy", "(", "score", "[", "key", "]", "[", "0", "]", "[", ":", ",", "i", "]", ")", "\n", "for", "i", ",", "(", "a", ",", "o", ")", "in", "enumerate", "(", "zip", "(", "test_att", ",", "test_obj", ")", ")", "\n", "}", "\n", "\n", "", "return", "score", "", "", "", ""]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet_multi.Network.__init__": [[19, 34], ["network.symnet.Network.__init__", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.__init__"], ["def", "__init__", "(", "self", ",", "dataloader", ",", "args", ",", "feat_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", "dataloader", ",", "args", ",", "feat_dim", ")", "\n", "self", ".", "gt_attr_vec", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "num_attr", "]", ",", "name", "=", "'gt_attr'", ")", "\n", "self", ".", "gt_obj_id", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'gt_obj'", ")", "\n", "self", ".", "attr_a", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'attr_a'", ")", "\n", "self", ".", "attr_b", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'attr_b'", ")", "\n", "self", ".", "attr_c", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'attr_c'", ")", "\n", "self", ".", "img_a_sim", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "num_attr", "]", ",", "name", "=", "'img_a_sim'", ")", "\n", "\n", "self", ".", "attr_pair_a", "=", "self", ".", "dataloader", ".", "dataset", ".", "attr_pair", "[", ":", ",", "0", "]", "\n", "self", ".", "attr_pair_b", "=", "self", ".", "dataloader", ".", "dataset", ".", "attr_pair", "[", ":", ",", "1", "]", "\n", "\n", "self", ".", "num_pair", "=", "self", ".", "attr_pair_a", ".", "shape", "[", "0", "]", "\n", "self", ".", "part_pair_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "num_pair", "]", ",", "name", "=", "'part_pair_mask'", ")", "\n", "self", ".", "att_sim", "=", "self", ".", "dataloader", ".", "dataset", ".", "att_sim_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet_multi.Network.RMD_prob": [[35, 72], ["symnet_multi.Network.distance_metric", "symnet_multi.Network.distance_metric", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.device", "tensorflow.sigmoid", "tensorflow.name_scope", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "NotImplementedError", "tensorflow.sigmoid", "tensorflow.sigmoid"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.distance_metric", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.distance_metric"], ["", "def", "RMD_prob", "(", "self", ",", "feat_plus", ",", "feat_minus", ",", "repeat_img_feat", ",", "is_training", ",", "metric", "=", "'rmd'", ")", ":", "\n", "        ", "\"\"\"return attribute classification probability with our RMD\"\"\"", "\n", "\n", "def", "diff_log", "(", "d_plus", ",", "d_minus", ")", ":", "\n", "            ", "if", "not", "is_training", ":", "\n", "                ", "return", "\n", "", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "'delta_dist'", ")", ":", "\n", "                    ", "tf", ".", "summary", ".", "histogram", "(", "'plus'", ",", "d_plus", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "'minus'", ",", "d_minus", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "'delta'", ",", "d_minus", "-", "d_plus", ")", "\n", "\n", "\n", "", "", "", "d_plus", "=", "self", ".", "distance_metric", "(", "feat_plus", ",", "repeat_img_feat", ")", "\n", "d_minus", "=", "self", ".", "distance_metric", "(", "feat_minus", ",", "repeat_img_feat", ")", "\n", "d_plus", "=", "tf", ".", "reshape", "(", "d_plus", ",", "[", "-", "1", ",", "self", ".", "num_attr", "]", ")", "# bz, #attr", "\n", "d_minus", "=", "tf", ".", "reshape", "(", "d_minus", ",", "[", "-", "1", ",", "self", ".", "num_attr", "]", ")", "# bz, #attr", "\n", "\n", "# if not is_training and not self.args.no_fuse:", "\n", "#     d_plus = tf.matmul(d_plus, self.dset.trained_corre_fuse['fuse_dp'])", "\n", "#     d_minus = tf.matmul(d_minus, self.dset.trained_corre_fuse['fuse_dm'])", "\n", "\n", "if", "metric", "==", "'raw_distance'", ":", "\n", "            ", "return", "d_plus", ",", "d_minus", "\n", "", "elif", "metric", "==", "'rmd'", ":", "\n", "            ", "if", "not", "is_training", ":", "\n", "                ", "d_minus", "=", "d_minus", "*", "self", ".", "dset", ".", "gamma", "[", "'attr_a'", "]", "\n", "d_plus", "=", "d_plus", "*", "self", ".", "dset", ".", "gamma", "[", "'attr_b'", "]", "\n", "", "diff", "=", "d_minus", "-", "d_plus", "\n", "p_diff", "=", "tf", ".", "sigmoid", "(", "diff", ")", "\n", "return", "p_diff", ",", "p_diff", "\n", "\n", "", "elif", "metric", "==", "'sigmoid'", ":", "\n", "            ", "return", "tf", ".", "sigmoid", "(", "-", "d_plus", ")", ",", "tf", ".", "sigmoid", "(", "d_minus", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'metric %s is not implemented yet'", "%", "metric", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet_multi.Network.attr_classification": [[73, 79], ["tensorflow.variable_scope", "symnet_multi.Network.MLP", "tensorflow.sigmoid"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MLP"], ["", "", "def", "attr_classification", "(", "self", ",", "emb", ",", "is_training", ",", "name", "=", "'classifier'", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "score_A", "=", "self", ".", "MLP", "(", "emb", ",", "self", ".", "num_attr", ",", "is_training", ",", "\"attr\"", ",", "\n", "hidden_layers", "=", "self", ".", "args", ".", "fc_cls", ")", "\n", "prob_A", "=", "tf", ".", "sigmoid", "(", "score_A", ")", "\n", "return", "score_A", ",", "prob_A", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet_multi.Network.transformer": [[80, 101], ["tensorflow.variable_scope", "tensorflow.concat", "symnet_multi.Network.MLP", "symnet_multi.Network.MLP", "tensorflow.sigmoid"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MLP", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MLP"], ["", "", "def", "transformer", "(", "self", ",", "rep", ",", "v_attr", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "\"\"\"CoN or DecoN in our paper\"\"\"", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "in_dim", "=", "out_dim", "=", "self", ".", "args", ".", "rep_dim", "\n", "\n", "\n", "if", "not", "self", ".", "args", ".", "no_attention", ":", "\n", "                ", "attention", "=", "self", ".", "MLP", "(", "v_attr", ",", "in_dim", ",", "is_training", ",", "\n", "name", "=", "'fc_attention'", ",", "hidden_layers", "=", "self", ".", "args", ".", "fc_att", ")", "\n", "attention", "=", "tf", ".", "sigmoid", "(", "attention", ")", "\n", "\n", "rep", "=", "attention", "*", "rep", "+", "rep", "# short connection", "\n", "\n", "", "hidden", "=", "tf", ".", "concat", "(", "[", "rep", ",", "v_attr", "]", ",", "axis", "=", "1", ")", "# 512+300", "\n", "\n", "\n", "output", "=", "self", ".", "MLP", "(", "hidden", ",", "out_dim", ",", "is_training", ",", "\n", "name", "=", "'fc_out'", ",", "hidden_layers", "=", "self", ".", "args", ".", "fc_compress", ")", "\n", "\n", "", "return", "output", ",", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet_multi.Network.build_network": [[102, 366], ["symnet_multi.Network.rep_embedder", "utils.utils.utils.repeat_tensor", "tensorflow.one_hot", "symnet_multi.Network.attr_embedder.get_embedding", "utils.utils.utils.tile_tensor", "symnet_multi.Network.transformer", "symnet_multi.Network.transformer", "tensorflow.reshape", "tensorflow.reshape", "symnet_multi.Network.transformer", "symnet_multi.Network.transformer", "sum", "symnet_multi.Network.rep_embedder", "utils.utils.utils.repeat_tensor", "symnet_multi.Network.transformer", "symnet_multi.Network.transformer", "symnet_multi.Network.attr_classification", "collections.OrderedDict", "tensorflow.summary.merge_all", "tensorflow.shape", "numpy.arange", "tensorflow.gather_nd", "tensorflow.gather_nd", "utils.utils.utils.repeat_tensor", "utils.utils.utils.tile_tensor", "symnet_multi.Network.attr_classification", "symnet_multi.Network.cross_entropy_with_labelvec", "tensorflow.minimum", "symnet_multi.Network.attr_classification", "symnet_multi.Network.cross_entropy_with_labelvec", "symnet_multi.Network.carlibration_look_up", "tensorflow.maximum", "symnet_multi.Network.attr_classification", "symnet_multi.Network.cross_entropy_with_labelvec", "symnet_multi.Network.carlibration_look_up", "symnet_multi.Network.cross_entropy_with_labelvec", "total_losses.append", "utils.utils.utils.repeat_tensor", "symnet_multi.Network.obj_classification", "symnet_multi.Network.cross_entropy_with_labelvec", "symnet_multi.Network.obj_classification", "symnet_multi.Network.cross_entropy_with_labelvec", "symnet_multi.Network.obj_classification", "symnet_multi.Network.cross_entropy_with_labelvec", "total_losses.append", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "total_losses.append", "total_losses.append", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "total_losses.append", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.stack", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.gather_nd", "symnet_multi.Network.triplet_margin_loss_with_distance", "total_losses.append", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "total_losses.append", "symnet_multi.Network.RMD_prob", "tensorflow.device", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.eye", "symnet_multi.Network.RMD_prob", "sum", "tensorflow.device", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "sum", "tensorflow.device", "tensorflow.summary.scalar", "symnet_multi.Network.distance_metric", "symnet_multi.Network.distance_metric", "tensorflow.device", "tensorflow.summary.scalar", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.device", "symnet_multi.Network.triplet_margin_loss", "symnet_multi.Network.triplet_margin_loss", "tensorflow.device", "tensorflow.summary.scalar", "symnet_multi.Network.distance_metric", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_mean", "tensorflow.device", "tensorflow.summary.scalar", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "symnet_multi.Network.triplet_margin_loss", "symnet_multi.Network.triplet_margin_loss", "tensorflow.device", "tensorflow.summary.scalar", "tensorflow.stack", "tensorflow.stack", "symnet_multi.Network.distance_metric", "symnet_multi.Network.distance_metric", "symnet_multi.Network.distance_metric", "symnet_multi.Network.distance_metric", "tensorflow.name_scope", "tensorflow.summary.scalar", "tensorflow.name_scope", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.stack", "tensorflow.stack", "tensorflow.reduce_sum", "tensorflow.range", "tensorflow.range", "tensorflow.range", "tensorflow.range", "tensorflow.range", "tensorflow.range", "tensorflow.cast", "tensorflow.cast", "tensorflow.range", "tensorflow.range"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.rep_embedder", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.repeat_tensor", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.Embedder.get_embedding", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.tile_tensor", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.rep_embedder", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.repeat_tensor", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.attr_classification", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.repeat_tensor", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.tile_tensor", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.attr_classification", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy_with_labelvec", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.attr_classification", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy_with_labelvec", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.carlibration_look_up", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.attr_classification", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy_with_labelvec", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.carlibration_look_up", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy_with_labelvec", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.repeat_tensor", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.obj_classification", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy_with_labelvec", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.obj_classification", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy_with_labelvec", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.obj_classification", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy_with_labelvec", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.triplet_margin_loss_with_distance", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.RMD_prob", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.RMD_prob", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.distance_metric", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.distance_metric", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.triplet_margin_loss", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.triplet_margin_loss", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.distance_metric", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.triplet_margin_loss", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.triplet_margin_loss", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.distance_metric", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.distance_metric", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.distance_metric", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.distance_metric"], ["", "def", "build_network", "(", "self", ")", ":", "\n", "        ", "total_losses", "=", "[", "]", "\n", "\n", "batchsize", "=", "tf", ".", "shape", "(", "self", ".", "pos_image_feat", ")", "[", "0", "]", "\n", "\n", "img_feat", "=", "self", ".", "rep_embedder", "(", "self", ".", "pos_image_feat", ",", "True", ",", "\"embedder\"", ")", "\n", "repeat_img_feat", "=", "utils", ".", "repeat_tensor", "(", "img_feat", ",", "0", ",", "self", ".", "num_attr", ")", "# (bz*#attr, dim_rep)", "\n", "\n", "gt_attr_vec", "=", "self", ".", "gt_attr_vec", "\n", "gt_obj_vec", "=", "tf", ".", "one_hot", "(", "self", ".", "gt_obj_id", ",", "depth", "=", "self", ".", "num_obj", ",", "axis", "=", "1", ")", "\n", "\n", "attr_emb", "=", "self", ".", "attr_embedder", ".", "get_embedding", "(", "\n", "np", ".", "arange", "(", "self", ".", "num_attr", ")", ")", "# (#attr, dim_emb), wordvec of all attributes", "\n", "tile_attr_emb", "=", "utils", ".", "tile_tensor", "(", "attr_emb", ",", "0", ",", "batchsize", ")", "# (bz*#attr, dim_emb)", "\n", "\n", "feat_plus", ",", "tile_atten_plus", "=", "self", ".", "transformer", "(", "repeat_img_feat", ",", "tile_attr_emb", ",", "is_training", "=", "True", ",", "name", "=", "'CoN'", ")", "\n", "feat_minus", ",", "tile_atten_minus", "=", "self", ".", "transformer", "(", "repeat_img_feat", ",", "tile_attr_emb", ",", "is_training", "=", "True", ",", "name", "=", "'DeCoN'", ")", "\n", "tile_atten_minus", "=", "tf", ".", "reshape", "(", "tile_atten_minus", ",", "(", "batchsize", ",", "self", ".", "num_attr", ",", "self", ".", "args", ".", "rep_dim", ")", ")", "\n", "tile_atten_plus", "=", "tf", ".", "reshape", "(", "tile_atten_plus", ",", "(", "batchsize", ",", "self", ".", "num_attr", ",", "self", ".", "args", ".", "rep_dim", ")", ")", "\n", "\n", "attr_sim_diff", "=", "tf", ".", "gather_nd", "(", "self", ".", "att_sim", ",", "indices", "=", "tf", ".", "stack", "(", "[", "self", ".", "attr_a", ",", "self", ".", "attr_b", "]", ",", "axis", "=", "1", ")", ")", "-", "tf", ".", "gather_nd", "(", "self", ".", "att_sim", ",", "indices", "=", "tf", ".", "stack", "(", "[", "self", ".", "attr_a", ",", "self", ".", "attr_c", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n", "feat_plus_minus", ",", "_", "=", "self", ".", "transformer", "(", "feat_plus", ",", "tile_attr_emb", ",", "\n", "is_training", "=", "True", ",", "\n", "name", "=", "'DeCoN'", ")", "\n", "feat_minus_plus", ",", "_", "=", "self", ".", "transformer", "(", "feat_minus", ",", "tile_attr_emb", ",", "\n", "is_training", "=", "True", ",", "\n", "name", "=", "'CoN'", ")", "\n", "\n", "########################## classification losses ######################", "\n", "if", "self", ".", "args", ".", "lambda_cls_attr", ">", "0", ":", "\n", "            ", "repeat_gt_attr_vec", "=", "utils", ".", "repeat_tensor", "(", "gt_attr_vec", ",", "0", ",", "self", ".", "num_attr", ")", "# (bz*#attr, #attr)", "\n", "transform_attr_onehot", "=", "utils", ".", "tile_tensor", "(", "tf", ".", "eye", "(", "self", ".", "num_attr", ")", ",", "0", ",", "batchsize", ")", "\n", "###### origin", "\n", "_", ",", "prob_orig_A", "=", "self", ".", "attr_classification", "(", "img_feat", ",", "is_training", "=", "True", ",", "name", "=", "'classifier'", ")", "\n", "loss_cls_orig_a", "=", "self", ".", "cross_entropy_with_labelvec", "(", "prob_orig_A", ",", "gt_attr_vec", ",", "weight", "=", "self", ".", "attr_weight", ",", "\n", "neg_loss", "=", "self", ".", "args", ".", "bce_neg_weight", ")", "\n", "\n", "\n", "###### plus", "\n", "attr_labelvec_plus", "=", "tf", ".", "minimum", "(", "1.", ",", "repeat_gt_attr_vec", "+", "transform_attr_onehot", ")", "\n", "_", ",", "prob_plus_A", "=", "self", ".", "attr_classification", "(", "feat_plus", ",", "is_training", "=", "True", ",", "name", "=", "'classifier'", ")", "\n", "loss_cls_plus_a", "=", "self", ".", "cross_entropy_with_labelvec", "(", "prob_plus_A", ",", "attr_labelvec_plus", ",", "\n", "weight", "=", "self", ".", "attr_weight", ",", "\n", "neg_loss", "=", "self", ".", "args", ".", "bce_neg_weight", ",", "\n", "mask", "=", "transform_attr_onehot", ")", "\n", "\n", "loss_cls_plus_a_carlib", "=", "self", ".", "carlibration_look_up", "(", "prob_plus_A", ",", "transform_attr_onehot", ",", "1", ")", "\n", "loss_cls_plus_a", "=", "loss_cls_plus_a", "+", "loss_cls_plus_a_carlib", "\n", "\n", "###### minus", "\n", "attr_labelvec_minus", "=", "tf", ".", "maximum", "(", "0.", ",", "repeat_gt_attr_vec", "-", "transform_attr_onehot", ")", "\n", "_", ",", "prob_minus_A", "=", "self", ".", "attr_classification", "(", "feat_minus", ",", "is_training", "=", "True", ",", "name", "=", "'classifier'", ")", "\n", "loss_cls_minus_a", "=", "self", ".", "cross_entropy_with_labelvec", "(", "prob_minus_A", ",", "attr_labelvec_minus", ",", "\n", "weight", "=", "self", ".", "attr_weight", ",", "\n", "neg_loss", "=", "self", ".", "args", ".", "bce_neg_weight", ",", "\n", "mask", "=", "transform_attr_onehot", ")", "\n", "\n", "loss_cls_minus_a_carlib", "=", "self", ".", "carlibration_look_up", "(", "prob_minus_A", ",", "transform_attr_onehot", ",", "0", ")", "\n", "loss_cls_minus_a", "=", "loss_cls_minus_a", "+", "loss_cls_minus_a_carlib", "\n", "\n", "###### rmd", "\n", "prob_RMD_plus", ",", "prob_RMD_minus", "=", "self", ".", "RMD_prob", "(", "feat_plus", ",", "feat_minus", ",", "repeat_img_feat", ",", "\n", "is_training", "=", "True", ",", "metric", "=", "self", ".", "args", ".", "rmd_metric", ")", "[", ":", "2", "]", "\n", "prob_RMD", "=", "(", "prob_RMD_minus", "+", "prob_RMD_plus", ")", "/", "2.", "\n", "loss_cls_rmd", "=", "self", ".", "cross_entropy_with_labelvec", "(", "prob_RMD", ",", "gt_attr_vec", ",", "weight", "=", "self", ".", "attr_weight", ",", "\n", "neg_loss", "=", "self", ".", "args", ".", "bce_neg_weight", ")", "\n", "\n", "loss_cls_attr", "=", "self", ".", "args", ".", "lambda_cls_attr", "*", "sum", "(", "[", "\n", "loss_cls_orig_a", ",", "loss_cls_plus_a", ",", "\n", "loss_cls_minus_a", ",", "loss_cls_rmd", "\n", "]", ")", "\n", "\n", "total_losses", ".", "append", "(", "loss_cls_attr", ")", "\n", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "tf", ".", "summary", ".", "scalar", "(", "'loss/loss_cls_attr'", ",", "loss_cls_attr", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss_cls_attr/loss_cls_orig_a'", ",", "loss_cls_orig_a", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss_cls_attr/loss_cls_plus_a'", ",", "loss_cls_plus_a", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss_cls_attr/loss_cls_minus_a'", ",", "loss_cls_minus_a", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss_cls_attr/loss_cls_rmd'", ",", "loss_cls_rmd", ")", "\n", "\n", "", "", "if", "self", ".", "args", ".", "lambda_cls_obj", ">", "0", ":", "\n", "            ", "repeat_gt_obj_vec", "=", "utils", ".", "repeat_tensor", "(", "gt_obj_vec", ",", "0", ",", "self", ".", "num_attr", ")", "# (bz*#attr, #obj)", "\n", "###### origin", "\n", "_", ",", "prob_orig_O", "=", "self", ".", "obj_classification", "(", "img_feat", ",", "is_training", "=", "True", ",", "name", "=", "'classifier'", ")", "\n", "loss_cls_orig_o", "=", "self", ".", "cross_entropy_with_labelvec", "(", "prob_orig_O", ",", "gt_obj_vec", ",", "weight", "=", "self", ".", "obj_weight", ")", "\n", "###### plus", "\n", "_", ",", "prob_plus_O", "=", "self", ".", "obj_classification", "(", "feat_plus", ",", "is_training", "=", "True", ",", "\n", "name", "=", "'classifier'", ")", "# (bz*#attr, #attr)", "\n", "loss_cls_plus_o", "=", "self", ".", "cross_entropy_with_labelvec", "(", "prob_plus_O", ",", "repeat_gt_obj_vec", ",", "weight", "=", "self", ".", "obj_weight", ")", "\n", "###### minus", "\n", "_", ",", "prob_minus_O", "=", "self", ".", "obj_classification", "(", "feat_minus", ",", "is_training", "=", "True", ",", "\n", "name", "=", "'classifier'", ")", "# (bz*#attr, #attr)", "\n", "loss_cls_minus_o", "=", "self", ".", "cross_entropy_with_labelvec", "(", "prob_minus_O", ",", "repeat_gt_obj_vec", ",", "weight", "=", "self", ".", "obj_weight", ")", "\n", "\n", "loss_cls_obj", "=", "self", ".", "args", ".", "lambda_cls_obj", "*", "sum", "(", "[", "\n", "loss_cls_orig_o", ",", "loss_cls_plus_o", ",", "loss_cls_minus_o", "\n", "]", ")", "\n", "total_losses", ".", "append", "(", "loss_cls_obj", ")", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "tf", ".", "summary", ".", "scalar", "(", "'loss/loss_cls_obj'", ",", "loss_cls_obj", ")", "\n", "\n", "################################################ symmetry losses ###############################################", "\n", "", "", "if", "self", ".", "args", ".", "lambda_sym", ">", "0", ":", "\n", "            ", "dist_sym_plus", "=", "tf", ".", "reshape", "(", "self", ".", "distance_metric", "(", "repeat_img_feat", ",", "feat_plus", ")", ",", "[", "batchsize", ",", "self", ".", "num_attr", "]", ")", "\n", "dist_sym_minus", "=", "tf", ".", "reshape", "(", "self", ".", "distance_metric", "(", "repeat_img_feat", ",", "feat_minus", ")", ",", "[", "batchsize", ",", "self", ".", "num_attr", "]", ")", "\n", "# both have shape (bz, #attr)", "\n", "\n", "dist_sym_plus", "=", "dist_sym_plus", "*", "gt_attr_vec", "\n", "dist_sym_minus", "=", "dist_sym_minus", "*", "(", "1", "-", "gt_attr_vec", ")", "\n", "\n", "loss_sym_pos", "=", "tf", ".", "reduce_mean", "(", "dist_sym_plus", ",", "axis", "=", "0", ")", "\n", "loss_sym_neg", "=", "tf", ".", "reduce_mean", "(", "dist_sym_minus", ",", "axis", "=", "0", ")", "\n", "\n", "loss_sym_pos", "=", "tf", ".", "reduce_sum", "(", "loss_sym_pos", ")", "\n", "loss_sym_neg", "=", "tf", ".", "reduce_sum", "(", "loss_sym_neg", ")", "\n", "\n", "loss_sym", "=", "self", ".", "args", ".", "lambda_sym", "*", "(", "loss_sym_pos", "+", "loss_sym_neg", ")", "\n", "total_losses", ".", "append", "(", "loss_sym", ")", "\n", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "tf", ".", "summary", ".", "scalar", "(", "'loss/loss_sym'", ",", "loss_sym", ")", "\n", "\n", "#################################################  axiom losses ################################################", "\n", "", "", "if", "self", ".", "args", ".", "lambda_axiom", ">", "0", ":", "\n", "            ", "loss_clo", "=", "loss_inv", "=", "loss_com", "=", "0", "\n", "################################################# inv loss #################################################", "\n", "if", "not", "self", ".", "args", ".", "remove_inv", ":", "\n", "                ", "dist_plus_minus", "=", "tf", ".", "reshape", "(", "self", ".", "distance_metric", "(", "repeat_img_feat", ",", "feat_plus_minus", ")", ",", "\n", "[", "batchsize", ",", "self", ".", "num_attr", "]", ")", "\n", "dist_minus_plus", "=", "tf", ".", "reshape", "(", "self", ".", "distance_metric", "(", "repeat_img_feat", ",", "feat_minus_plus", ")", ",", "\n", "[", "batchsize", ",", "self", ".", "num_attr", "]", ")", "\n", "\n", "dist_inv_plus", "=", "dist_minus_plus", "*", "gt_attr_vec", "\n", "dist_inv_minus", "=", "dist_plus_minus", "*", "(", "1", "-", "gt_attr_vec", ")", "\n", "\n", "loss_inv_pos", "=", "tf", ".", "reduce_mean", "(", "dist_inv_plus", ",", "axis", "=", "0", ")", "\n", "loss_inv_neg", "=", "tf", ".", "reduce_mean", "(", "dist_inv_minus", ",", "axis", "=", "0", ")", "\n", "\n", "loss_inv_pos", "=", "tf", ".", "reduce_sum", "(", "loss_inv_pos", ")", "\n", "loss_inv_neg", "=", "tf", ".", "reduce_sum", "(", "loss_inv_neg", ")", "\n", "\n", "loss_inv", "=", "loss_inv_pos", "+", "loss_inv_neg", "\n", "\n", "############################################### closure loss ###############################################", "\n", "", "if", "not", "self", ".", "args", ".", "remove_clo", ":", "\n", "                ", "dist_clo_plus", "=", "tf", ".", "reshape", "(", "self", ".", "distance_metric", "(", "feat_minus", ",", "feat_plus_minus", ")", ",", "\n", "[", "batchsize", ",", "self", ".", "num_attr", "]", ")", "\n", "dist_clo_minus", "=", "tf", ".", "reshape", "(", "self", ".", "distance_metric", "(", "feat_plus", ",", "feat_minus_plus", ")", ",", "\n", "[", "batchsize", ",", "self", ".", "num_attr", "]", ")", "\n", "loss_clo_pos", "=", "tf", ".", "reduce_mean", "(", "dist_clo_plus", "*", "gt_attr_vec", ",", "axis", "=", "0", ")", "\n", "loss_clo_neg", "=", "tf", ".", "reduce_mean", "(", "dist_clo_minus", "*", "(", "1", "-", "gt_attr_vec", ")", ",", "axis", "=", "0", ")", "\n", "\n", "loss_clo_pos", "=", "tf", ".", "reduce_sum", "(", "loss_clo_pos", ")", "\n", "loss_clo_neg", "=", "tf", ".", "reduce_sum", "(", "loss_clo_neg", ")", "\n", "\n", "loss_clo", "=", "loss_clo_pos", "+", "loss_clo_neg", "\n", "\n", "", "loss_axiom", "=", "(", "loss_clo", "+", "loss_inv", ")", "*", "self", ".", "args", ".", "lambda_axiom", "\n", "total_losses", ".", "append", "(", "loss_axiom", ")", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "'loss'", ")", ":", "\n", "                    ", "tf", ".", "summary", ".", "scalar", "(", "'loss_axiom'", ",", "loss_axiom", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'loss_axiom'", ")", ":", "\n", "                    ", "tf", ".", "summary", ".", "scalar", "(", "'loss_clo'", ",", "loss_clo", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss_inv'", ",", "loss_inv", ")", "\n", "\n", "################################################  triplet losses ###############################################", "\n", "", "", "", "if", "self", ".", "args", ".", "lambda_trip", ">", "0", ":", "\n", "            ", "triplet_pos", "=", "tf", ".", "reshape", "(", "self", ".", "triplet_margin_loss", "(", "repeat_img_feat", ",", "feat_plus", ",", "feat_minus", ")", ",", "\n", "[", "batchsize", ",", "self", ".", "num_attr", "]", ")", "\n", "triplet_neg", "=", "tf", ".", "reshape", "(", "self", ".", "triplet_margin_loss", "(", "repeat_img_feat", ",", "feat_minus", ",", "feat_plus", ")", ",", "\n", "[", "batchsize", ",", "self", ".", "num_attr", "]", ")", "\n", "\n", "loss_trip_pos", "=", "tf", ".", "reduce_mean", "(", "triplet_pos", "*", "gt_attr_vec", ",", "axis", "=", "0", ")", "\n", "loss_trip_neg", "=", "tf", ".", "reduce_mean", "(", "triplet_neg", "*", "(", "1", "-", "gt_attr_vec", ")", ",", "axis", "=", "0", ")", "\n", "\n", "loss_trip_pos", "=", "tf", ".", "reduce_sum", "(", "loss_trip_pos", ")", "\n", "loss_trip_neg", "=", "tf", ".", "reduce_sum", "(", "loss_trip_neg", ")", "\n", "\n", "loss_trip", "=", "self", ".", "args", ".", "lambda_trip", "*", "(", "loss_trip_pos", "+", "loss_trip_neg", ")", "\n", "total_losses", ".", "append", "(", "loss_trip", ")", "\n", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "tf", ".", "summary", ".", "scalar", "(", "'loss/loss_triplet'", ",", "loss_trip", ")", "\n", "\n", "", "", "if", "self", ".", "args", ".", "lambda_multi_rmd", ">", "0", ":", "\n", "            ", "dist_minus", "=", "tf", ".", "reshape", "(", "self", ".", "distance_metric", "(", "repeat_img_feat", ",", "feat_minus", ")", ",", "[", "batchsize", ",", "self", ".", "num_attr", "]", ")", "\n", "\n", "attr_pair_a", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "self", ".", "attr_pair_a", ",", "0", ")", ",", "(", "batchsize", ",", "1", ")", ")", "\n", "attr_pair_b", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "self", ".", "attr_pair_b", ",", "0", ")", ",", "(", "batchsize", ",", "1", ")", ")", "\n", "\n", "# bz * num_pair", "\n", "idx_a", "=", "tf", ".", "stack", "(", "[", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "batchsize", ")", "]", "*", "self", ".", "num_pair", ",", "axis", "=", "1", ")", ",", "attr_pair_a", "]", ",", "axis", "=", "2", ")", "\n", "idx_b", "=", "tf", ".", "stack", "(", "[", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "batchsize", ")", "]", "*", "self", ".", "num_pair", ",", "axis", "=", "1", ")", ",", "attr_pair_b", "]", ",", "axis", "=", "2", ")", "\n", "\n", "dist_a", "=", "tf", ".", "gather_nd", "(", "dist_minus", ",", "idx_a", ")", "\n", "dist_b", "=", "tf", ".", "gather_nd", "(", "dist_minus", ",", "idx_b", ")", "\n", "\n", "sim_a", "=", "tf", ".", "gather_nd", "(", "self", ".", "img_a_sim", ",", "idx_a", ")", "\n", "sim_b", "=", "tf", ".", "gather_nd", "(", "self", ".", "img_a_sim", ",", "idx_b", ")", "\n", "\n", "loss_multi_rmd", "=", "self", ".", "triplet_margin_loss_with_distance", "(", "dist_a", ",", "dist_b", ",", "weight", "=", "sim_b", "-", "sim_a", ",", "\n", "margin", "=", "self", ".", "args", ".", "triplet_margin", ")", "\n", "loss_multi_rmd", "=", "self", ".", "args", ".", "lambda_trip", "*", "self", ".", "args", ".", "lambda_multi_rmd", "*", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "reduce_sum", "(", "loss_multi_rmd", "*", "self", ".", "part_pair_mask", ",", "axis", "=", "1", ")", ")", "\n", "\n", "total_losses", ".", "append", "(", "loss_multi_rmd", ")", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "tf", ".", "summary", ".", "scalar", "(", "'loss/loss_multi_rmd'", ",", "loss_multi_rmd", ")", "\n", "\n", "############################################# attention triplet losses #########################################", "\n", "", "", "if", "self", ".", "args", ".", "lambda_atten", ">", "0", ":", "\n", "            ", "atten_a_p", "=", "tf", ".", "gather_nd", "(", "tile_atten_plus", ",", "tf", ".", "stack", "(", "(", "tf", ".", "range", "(", "batchsize", ")", ",", "self", ".", "attr_a", ")", ",", "axis", "=", "1", ")", ")", "\n", "atten_a_m", "=", "tf", ".", "gather_nd", "(", "tile_atten_minus", ",", "tf", ".", "stack", "(", "(", "tf", ".", "range", "(", "batchsize", ")", ",", "self", ".", "attr_a", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n", "atten_b_p", "=", "tf", ".", "gather_nd", "(", "tile_atten_plus", ",", "tf", ".", "stack", "(", "(", "tf", ".", "range", "(", "batchsize", ")", ",", "self", ".", "attr_b", ")", ",", "axis", "=", "1", ")", ")", "\n", "atten_c_p", "=", "tf", ".", "gather_nd", "(", "tile_atten_plus", ",", "tf", ".", "stack", "(", "(", "tf", ".", "range", "(", "batchsize", ")", ",", "self", ".", "attr_c", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n", "atten_b_m", "=", "tf", ".", "gather_nd", "(", "tile_atten_minus", ",", "tf", ".", "stack", "(", "(", "tf", ".", "range", "(", "batchsize", ")", ",", "self", ".", "attr_b", ")", ",", "axis", "=", "1", ")", ")", "\n", "atten_c_m", "=", "tf", ".", "gather_nd", "(", "tile_atten_minus", ",", "tf", ".", "stack", "(", "(", "tf", ".", "range", "(", "batchsize", ")", ",", "self", ".", "attr_c", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n", "con_atten_triplet", "=", "tf", ".", "reduce_mean", "(", "\n", "self", ".", "triplet_margin_loss", "(", "atten_a_p", ",", "atten_b_p", ",", "atten_c_p", ",", "\n", "weight", "=", "tf", ".", "cast", "(", "attr_sim_diff", ",", "dtype", "=", "tf", ".", "float32", ")", ")", ")", "\n", "decon_atten_triplet", "=", "tf", ".", "reduce_mean", "(", "\n", "self", ".", "triplet_margin_loss", "(", "atten_a_m", ",", "atten_b_m", ",", "atten_c_m", ",", "\n", "weight", "=", "tf", ".", "cast", "(", "attr_sim_diff", ",", "dtype", "=", "tf", ".", "float32", ")", ")", ")", "\n", "\n", "loss_attention_trip", "=", "self", ".", "args", ".", "lambda_trip", "*", "self", ".", "args", ".", "lambda_atten", "*", "(", "con_atten_triplet", "+", "decon_atten_triplet", ")", "\n", "total_losses", ".", "append", "(", "loss_attention_trip", ")", "\n", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "tf", ".", "summary", ".", "scalar", "(", "'loss/loss_attention_trip'", ",", "loss_attention_trip", ")", "\n", "\n", "", "", "loss", "=", "sum", "(", "total_losses", ")", "\n", "\n", "####################################################### test ###################################################", "\n", "\n", "img_feat", "=", "self", ".", "rep_embedder", "(", "self", ".", "pos_image_feat", ",", "False", ",", "\"embedder\"", ")", "\n", "repeat_img_feat", "=", "utils", ".", "repeat_tensor", "(", "img_feat", ",", "0", ",", "self", ".", "num_attr", ")", "# (bz*#attr, dim_rep)", "\n", "\n", "feat_plus", ",", "_", "=", "self", ".", "transformer", "(", "repeat_img_feat", ",", "tile_attr_emb", ",", "is_training", "=", "False", ",", "name", "=", "'CoN'", ")", "\n", "feat_minus", ",", "_", "=", "self", ".", "transformer", "(", "repeat_img_feat", ",", "tile_attr_emb", ",", "is_training", "=", "False", ",", "name", "=", "'DeCoN'", ")", "\n", "\n", "prob_A_rmd_plus", ",", "prob_A_rmd_minus", "=", "self", ".", "RMD_prob", "(", "feat_plus", ",", "feat_minus", ",", "repeat_img_feat", ",", "\n", "is_training", "=", "False", ")", "[", ":", "2", "]", "\n", "prob_A_rmd", "=", "(", "prob_A_rmd_plus", "+", "prob_A_rmd_minus", ")", "/", "2.", "\n", "\n", "_", ",", "prob_fc", "=", "self", ".", "attr_classification", "(", "img_feat", ",", "is_training", "=", "False", ")", "\n", "score_res", "=", "OrderedDict", "(", "[", "\n", "(", "\"attr_rmd\"", ",", "prob_A_rmd", ")", ",", "\n", "(", "\"FC\"", ",", "prob_fc", ")", "\n", "]", ")", "\n", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "'loss_total'", ",", "loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'lr'", ",", "self", ".", "lr", ")", "\n", "\n", "", "train_summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n", "return", "loss", ",", "score_res", ",", "train_summary_op", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet_multi.Network.train_step": [[367, 384], ["sess.run"], "methods", ["None"], ["", "def", "train_step", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ",", "train_summary_op", ")", ":", "\n", "\n", "        ", "summary", ",", "_", "=", "sess", ".", "run", "(", "\n", "[", "train_summary_op", ",", "train_op", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "pos_image_feat", ":", "blobs", "[", "0", "]", ",", "\n", "self", ".", "gt_attr_vec", ":", "blobs", "[", "1", "]", ",", "\n", "self", ".", "gt_obj_id", ":", "blobs", "[", "2", "]", ",", "\n", "self", ".", "img_a_sim", ":", "blobs", "[", "3", "]", ",", "\n", "self", ".", "attr_a", ":", "blobs", "[", "4", "]", "[", ":", ",", "0", "]", ",", "\n", "self", ".", "attr_b", ":", "blobs", "[", "4", "]", "[", ":", ",", "1", "]", ",", "\n", "self", ".", "attr_c", ":", "blobs", "[", "4", "]", "[", ":", ",", "2", "]", ",", "\n", "self", ".", "part_pair_mask", ":", "blobs", "[", "5", "]", ",", "\n", "self", ".", "lr", ":", "lr", ",", "\n", "}", ")", "\n", "\n", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet_multi.Network.test_step": [[385, 390], ["sess.run"], "methods", ["None"], ["", "def", "test_step", "(", "self", ",", "sess", ",", "blobs", ",", "score_op", ")", ":", "\n", "        ", "score", "=", "sess", ".", "run", "(", "score_op", ",", "feed_dict", "=", "{", "\n", "self", ".", "pos_image_feat", ":", "blobs", "[", "0", "]", "\n", "}", ")", "\n", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.__init__": [[21, 42], ["BaseNetwork.__init__", "utils.utils.utils.Embedder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.__init__"], ["def", "__init__", "(", "self", ",", "dataloader", ",", "args", ",", "feat_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", "dataloader", ",", "args", ",", "feat_dim", ")", "\n", "\n", "self", ".", "dset", "=", "self", ".", "dataloader", ".", "dataset", "\n", "self", ".", "attr_embedder", "=", "utils", ".", "Embedder", "(", "args", ".", "wordvec", ",", "self", ".", "dset", ".", "attrs", ",", "args", ".", "data", ")", "\n", "self", ".", "emb_dim", "=", "self", ".", "attr_embedder", ".", "emb_dim", "# dim of wordvec (attr or obj)", "\n", "\n", "self", ".", "pos_attr_id", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_obj_id", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_image_feat", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "feat_dim", "]", ")", "\n", "\n", "self", ".", "neg_attr_id", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_obj_id", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_image_feat", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "feat_dim", "]", ")", "\n", "\n", "self", ".", "test_attr_id", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'test_attr_id'", ")", "\n", "self", ".", "test_obj_id", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'test_obj_id'", ")", "\n", "\n", "self", ".", "pos_obj_prediction", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "num_obj", "]", ")", "\n", "\n", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.rep_embedder": [[44, 48], ["symnet.Network.MLP"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MLP"], ["", "def", "rep_embedder", "(", "self", ",", "img", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "\"\"\"transform ResNet feature to image representation\"\"\"", "\n", "img", "=", "self", ".", "MLP", "(", "img", ",", "self", ".", "args", ".", "rep_dim", ",", "is_training", ",", "name", ",", "hidden_layers", "=", "[", "]", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer": [[51, 73], ["tf.variable_scope", "tf.concat", "symnet.Network.MLP", "symnet.Network.MLP", "tf.sigmoid"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MLP", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MLP"], ["", "def", "transformer", "(", "self", ",", "rep", ",", "v_attr", ",", "is_training", ",", "name", ")", ":", "\n", "        ", "\"\"\"CoN or DecoN in our paper\"\"\"", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "in_dim", "=", "out_dim", "=", "self", ".", "args", ".", "rep_dim", "\n", "\n", "\n", "if", "not", "self", ".", "args", ".", "no_attention", ":", "\n", "                ", "attention", "=", "self", ".", "MLP", "(", "v_attr", ",", "in_dim", ",", "is_training", ",", "\n", "name", "=", "'fc_attention'", ",", "hidden_layers", "=", "self", ".", "args", ".", "fc_att", ")", "\n", "attention", "=", "tf", ".", "sigmoid", "(", "attention", ")", "\n", "\n", "rep", "=", "attention", "*", "rep", "+", "rep", "# short connection", "\n", "\n", "", "hidden", "=", "tf", ".", "concat", "(", "[", "rep", ",", "v_attr", "]", ",", "axis", "=", "1", ")", "# 512+300", "\n", "\n", "\n", "output", "=", "self", ".", "MLP", "(", "hidden", ",", "out_dim", ",", "is_training", ",", "\n", "name", "=", "'fc_out'", ",", "hidden_layers", "=", "self", ".", "args", ".", "fc_compress", ")", "\n", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.attr_classification": [[75, 81], ["tf.variable_scope", "symnet.Network.MLP", "tf.nn.softmax"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MLP"], ["", "def", "attr_classification", "(", "self", ",", "emb", ",", "is_training", ",", "name", "=", "'classifier'", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "score_A", "=", "self", ".", "MLP", "(", "emb", ",", "self", ".", "num_attr", ",", "is_training", ",", "\"attr\"", ",", "\n", "hidden_layers", "=", "self", ".", "args", ".", "fc_cls", ")", "\n", "prob_A", "=", "tf", ".", "nn", ".", "softmax", "(", "score_A", ",", "1", ")", "\n", "return", "score_A", ",", "prob_A", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.obj_classification": [[83, 89], ["tf.variable_scope", "symnet.Network.MLP", "tf.nn.softmax"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MLP"], ["", "", "def", "obj_classification", "(", "self", ",", "emb", ",", "is_training", ",", "name", "=", "'classifier'", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "score_O", "=", "self", ".", "MLP", "(", "emb", ",", "self", ".", "num_obj", ",", "is_training", ",", "\"obj\"", ",", "\n", "hidden_layers", "=", "self", ".", "args", ".", "fc_cls", ")", "\n", "prob_O", "=", "tf", ".", "nn", ".", "softmax", "(", "score_O", ",", "1", ")", "\n", "return", "score_O", ",", "prob_O", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.RMD_prob": [[93, 121], ["symnet.Network.distance_metric", "symnet.Network.distance_metric", "tf.reshape", "tf.reshape", "tf.nn.softmax", "tf.nn.softmax", "tf.nn.softmax", "tf.nn.softmax"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.distance_metric", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.distance_metric"], ["", "", "def", "RMD_prob", "(", "self", ",", "feat_plus", ",", "feat_minus", ",", "repeat_img_feat", ",", "is_training", ",", "metric", ")", ":", "\n", "        ", "\"\"\"return attribute classification probability with our RMD\"\"\"", "\n", "# feat_plus, feat_minus:  shape=(bz, #attr, dim_emb)", "\n", "# d_plus: distance between feature before&after CoN", "\n", "# d_minus: distance between feature before&after DecoN", "\n", "\n", "d_plus", "=", "self", ".", "distance_metric", "(", "feat_plus", ",", "repeat_img_feat", ")", "\n", "d_minus", "=", "self", ".", "distance_metric", "(", "feat_minus", ",", "repeat_img_feat", ")", "\n", "d_plus", "=", "tf", ".", "reshape", "(", "d_plus", ",", "[", "-", "1", ",", "self", ".", "num_attr", "]", ")", "# bz, #attr", "\n", "d_minus", "=", "tf", ".", "reshape", "(", "d_minus", ",", "[", "-", "1", ",", "self", ".", "num_attr", "]", ")", "# bz, #attr", "\n", "\n", "\n", "if", "metric", "==", "'softmax'", ":", "\n", "            ", "p_plus", "=", "tf", ".", "nn", ".", "softmax", "(", "-", "d_plus", ",", "1", ")", "# (bz, #attr), smaller = better", "\n", "p_minus", "=", "tf", ".", "nn", ".", "softmax", "(", "d_minus", ",", "1", ")", "# (bz, #attr), larger = better", "\n", "return", "p_plus", ",", "p_minus", "\n", "\n", "\n", "", "elif", "metric", "==", "'rmd'", ":", "\n", "            ", "d_plus_comp", "=", "self", ".", "dset", ".", "comp_gamma", "[", "'b'", "]", "*", "d_plus", "\n", "d_minus_comp", "=", "self", ".", "dset", ".", "comp_gamma", "[", "'a'", "]", "*", "d_minus", "\n", "d_plus_attr", "=", "self", ".", "dset", ".", "attr_gamma", "[", "'b'", "]", "*", "d_plus", "\n", "d_minus_attr", "=", "self", ".", "dset", ".", "attr_gamma", "[", "'a'", "]", "*", "d_minus", "\n", "\n", "p_comp", "=", "tf", ".", "nn", ".", "softmax", "(", "d_minus_comp", "-", "d_plus_comp", ",", "axis", "=", "1", ")", "\n", "p_attr", "=", "tf", ".", "nn", ".", "softmax", "(", "d_minus_attr", "-", "d_plus_attr", ",", "axis", "=", "1", ")", "\n", "\n", "return", "p_comp", ",", "p_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.build_network": [[125, 359], ["symnet.Network.logger", "symnet.Network.attr_embedder.get_embedding", "symnet.Network.attr_embedder.get_embedding", "symnet.Network.rep_embedder", "symnet.Network.rep_embedder", "symnet.Network.transformer", "symnet.Network.transformer", "symnet.Network.transformer", "symnet.Network.transformer", "symnet.Network.attr_embedder.get_embedding", "utils.utils.utils.tile_tensor", "symnet.Network.rep_embedder", "utils.utils.utils.repeat_tensor", "symnet.Network.transformer", "symnet.Network.transformer", "symnet.Network.RMD_prob", "symnet.Network.attr_classification", "symnet.Network.obj_classification", "tf.one_hot", "tf.one_hot", "tf.multiply", "dict", "sum", "tf.summary.merge_all", "tf.shape", "numpy.arange", "symnet.Network.attr_classification", "symnet.Network.cross_entropy", "symnet.Network.attr_classification", "symnet.Network.cross_entropy", "utils.utils.utils.repeat_tensor", "symnet.Network.transformer", "symnet.Network.transformer", "symnet.Network.RMD_prob", "symnet.Network.cross_entropy", "symnet.Network.cross_entropy", "total_losses.append", "symnet.Network.obj_classification", "symnet.Network.cross_entropy", "symnet.Network.obj_classification", "symnet.Network.cross_entropy", "symnet.Network.obj_classification", "symnet.Network.cross_entropy", "total_losses.append", "symnet.Network.MSELoss", "symnet.Network.MSELoss", "total_losses.append", "total_losses.append", "tf.reduce_mean", "tf.reduce_mean", "total_losses.append", "tf.matmul", "tf.matmul", "tf.device", "tf.summary.scalar", "tf.summary.scalar", "sum", "tf.device", "tf.summary.scalar", "sum", "tf.device", "tf.summary.scalar", "tf.device", "tf.summary.scalar", "symnet.Network.transformer", "symnet.Network.transformer", "symnet.Network.transformer", "symnet.Network.transformer", "symnet.Network.transformer", "symnet.Network.transformer", "symnet.Network.MSELoss", "tf.device", "symnet.Network.triplet_margin_loss", "symnet.Network.triplet_margin_loss", "tf.device", "tf.summary.scalar", "tf.transpose", "tf.transpose", "symnet.Network.MSELoss", "symnet.Network.MSELoss", "symnet.Network.MSELoss", "symnet.Network.MSELoss", "tf.name_scope", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar"], "methods", ["home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.logger", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.Embedder.get_embedding", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.Embedder.get_embedding", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.rep_embedder", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.rep_embedder", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.Embedder.get_embedding", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.tile_tensor", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.rep_embedder", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.repeat_tensor", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.RMD_prob", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.attr_classification", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.obj_classification", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.attr_classification", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.attr_classification", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.utils.utils.repeat_tensor", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.RMD_prob", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.obj_classification", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.obj_classification", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.obj_classification", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.cross_entropy", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MSELoss", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MSELoss", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.transformer", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MSELoss", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.triplet_margin_loss", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.triplet_margin_loss", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MSELoss", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MSELoss", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MSELoss", "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.base_network.BaseNetwork.MSELoss"], ["", "", "def", "build_network", "(", "self", ",", "test_only", "=", "False", ")", ":", "\n", "        ", "logger", "=", "self", ".", "logger", "(", "'create_train_arch'", ")", "\n", "\n", "total_losses", "=", "[", "]", "\n", "\n", "batchsize", "=", "tf", ".", "shape", "(", "self", ".", "pos_image_feat", ")", "[", "0", "]", "\n", "\n", "pos_attr_emb", "=", "self", ".", "attr_embedder", ".", "get_embedding", "(", "self", ".", "pos_attr_id", ")", "\n", "neg_attr_emb", "=", "self", ".", "attr_embedder", ".", "get_embedding", "(", "self", ".", "neg_attr_id", ")", "\n", "\n", "pos_img", "=", "self", ".", "rep_embedder", "(", "self", ".", "pos_image_feat", ",", "\n", "is_training", "=", "True", ",", "name", "=", "'embedder'", ")", "# (bz,dim)", "\n", "neg_img", "=", "self", ".", "rep_embedder", "(", "self", ".", "neg_image_feat", ",", "\n", "is_training", "=", "True", ",", "name", "=", "'embedder'", ")", "# (bz,dim)", "\n", "\n", "# rA = remove positive attribute A", "\n", "# aA = add positive attribute A", "\n", "# rB = remove negative attribute B", "\n", "# aB = add negative attribute B", "\n", "pos_aA", "=", "self", ".", "transformer", "(", "pos_img", ",", "pos_attr_emb", ",", "True", ",", "name", "=", "'CoN'", ")", "\n", "pos_aB", "=", "self", ".", "transformer", "(", "pos_img", ",", "neg_attr_emb", ",", "True", ",", "name", "=", "'CoN'", ")", "\n", "pos_rA", "=", "self", ".", "transformer", "(", "pos_img", ",", "pos_attr_emb", ",", "True", ",", "name", "=", "'DeCoN'", ")", "\n", "pos_rB", "=", "self", ".", "transformer", "(", "pos_img", ",", "neg_attr_emb", ",", "True", ",", "name", "=", "'DeCoN'", ")", "\n", "\n", "attr_emb", "=", "self", ".", "attr_embedder", ".", "get_embedding", "(", "np", ".", "arange", "(", "self", ".", "num_attr", ")", ")", "\n", "# (#attr, dim_emb), wordvec of all attributes", "\n", "tile_attr_emb", "=", "utils", ".", "tile_tensor", "(", "attr_emb", ",", "0", ",", "batchsize", ")", "\n", "# (bz*#attr, dim_emb)", "\n", "\n", "\n", "########################## classification losses ######################", "\n", "# unnecessary to compute cls loss for neg_img", "\n", "\n", "if", "self", ".", "args", ".", "lambda_cls_attr", ">", "0", ":", "\n", "\n", "# original image", "\n", "            ", "_", ",", "prob_pos_A", "=", "self", ".", "attr_classification", "(", "pos_img", ",", "is_training", "=", "True", ")", "\n", "loss_cls_pos_a", "=", "self", ".", "cross_entropy", "(", "\n", "prob_pos_A", ",", "self", ".", "pos_attr_id", ",", "self", ".", "num_attr", ",", "\n", "weight", "=", "self", ".", "attr_weight", ")", "\n", "\n", "# after removing pos_attr", "\n", "_", ",", "prob_pos_rA_A", "=", "self", ".", "attr_classification", "(", "pos_rA", ",", "is_training", "=", "True", ")", "\n", "loss_cls_pos_rA_a", "=", "self", ".", "cross_entropy", "(", "\n", "prob_pos_rA_A", ",", "self", ".", "pos_attr_id", ",", "self", ".", "num_attr", ",", "\n", "target", "=", "0", ",", "weight", "=", "self", ".", "attr_weight", ")", "\n", "\n", "\n", "# rmd", "\n", "repeat_img_feat", "=", "utils", ".", "repeat_tensor", "(", "pos_img", ",", "0", ",", "self", ".", "num_attr", ")", "\n", "# (bz*#attr, dim_rep)", "\n", "feat_plus", "=", "self", ".", "transformer", "(", "repeat_img_feat", ",", "tile_attr_emb", ",", "\n", "is_training", "=", "True", ",", "name", "=", "'CoN'", ")", "\n", "feat_minus", "=", "self", ".", "transformer", "(", "repeat_img_feat", ",", "tile_attr_emb", ",", "\n", "is_training", "=", "True", ",", "name", "=", "'DeCoN'", ")", "\n", "\n", "prob_RMD_plus", ",", "prob_RMD_minus", "=", "self", ".", "RMD_prob", "(", "feat_plus", ",", "feat_minus", ",", "\n", "repeat_img_feat", ",", "is_training", "=", "True", ",", "metric", "=", "self", ".", "args", ".", "rmd_metric", ")", "\n", "\n", "loss_cls_rmd_plus", "=", "self", ".", "cross_entropy", "(", "\n", "prob_RMD_plus", ",", "self", ".", "pos_attr_id", ",", "self", ".", "num_attr", ",", "\n", "weight", "=", "self", ".", "attr_weight", ")", "\n", "loss_cls_rmd_minus", "=", "self", ".", "cross_entropy", "(", "\n", "prob_RMD_minus", ",", "self", ".", "pos_attr_id", ",", "self", ".", "num_attr", ",", "\n", "weight", "=", "self", ".", "attr_weight", ")", "\n", "\n", "\n", "\n", "loss_cls_attr", "=", "self", ".", "args", ".", "lambda_cls_attr", "*", "sum", "(", "[", "\n", "loss_cls_pos_a", ",", "loss_cls_pos_rA_a", ",", "\n", "loss_cls_rmd_plus", ",", "loss_cls_rmd_minus", "\n", "]", ")", "\n", "\n", "total_losses", ".", "append", "(", "loss_cls_attr", ")", "\n", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "tf", ".", "summary", ".", "scalar", "(", "'loss/loss_cls_attr'", ",", "loss_cls_attr", ")", "\n", "\n", "\n", "\n", "", "", "if", "self", ".", "args", ".", "lambda_cls_obj", ">", "0", ":", "\n", "# original image", "\n", "            ", "_", ",", "prob_pos_O", "=", "self", ".", "obj_classification", "(", "pos_img", ",", "is_training", "=", "True", ")", "\n", "loss_cls_pos_o", "=", "self", ".", "cross_entropy", "(", "\n", "prob_pos_O", ",", "self", ".", "pos_obj_id", ",", "self", ".", "num_obj", ",", "\n", "weight", "=", "self", ".", "obj_weight", ")", "\n", "\n", "# after removing pos_attr", "\n", "_", ",", "prob_pos_rA_O", "=", "self", ".", "obj_classification", "(", "pos_rA", ",", "is_training", "=", "True", ")", "\n", "loss_cls_pos_rA_o", "=", "self", ".", "cross_entropy", "(", "\n", "prob_pos_rA_O", ",", "self", ".", "pos_obj_id", ",", "self", ".", "num_obj", ",", "\n", "weight", "=", "self", ".", "obj_weight", ")", "\n", "\n", "# after adding neg_attr", "\n", "_", ",", "prob_pos_aB_O", "=", "self", ".", "obj_classification", "(", "pos_aB", ",", "is_training", "=", "True", ")", "\n", "loss_cls_pos_aB_o", "=", "self", ".", "cross_entropy", "(", "\n", "prob_pos_aB_O", ",", "self", ".", "pos_obj_id", ",", "self", ".", "num_obj", ",", "\n", "weight", "=", "self", ".", "obj_weight", ")", "\n", "\n", "\n", "loss_cls_obj", "=", "self", ".", "args", ".", "lambda_cls_obj", "*", "sum", "(", "[", "\n", "loss_cls_pos_o", ",", "\n", "loss_cls_pos_rA_o", ",", "\n", "loss_cls_pos_aB_o", "\n", "]", ")", "\n", "\n", "total_losses", ".", "append", "(", "loss_cls_obj", ")", "\n", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "tf", ".", "summary", ".", "scalar", "(", "'loss/loss_cls_obj'", ",", "loss_cls_obj", ")", "\n", "\n", "\n", "\n", "############################# symmetry loss ###########################", "\n", "\n", "", "", "if", "self", ".", "args", ".", "lambda_sym", ">", "0", ":", "\n", "\n", "            ", "loss_sym_pos", "=", "self", ".", "MSELoss", "(", "pos_aA", ",", "pos_img", ")", "\n", "loss_sym_neg", "=", "self", ".", "MSELoss", "(", "pos_rB", ",", "pos_img", ")", "\n", "\n", "loss_sym", "=", "self", ".", "args", ".", "lambda_sym", "*", "(", "loss_sym_pos", "+", "loss_sym_neg", ")", "\n", "total_losses", ".", "append", "(", "loss_sym", ")", "\n", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "tf", ".", "summary", ".", "scalar", "(", "'loss/loss_sym'", ",", "loss_sym", ")", "\n", "\n", "\n", "############################## axiom losses ###########################", "\n", "", "", "if", "self", ".", "args", ".", "lambda_axiom", ">", "0", ":", "\n", "            ", "loss_clo", "=", "loss_inv", "=", "loss_com", "=", "0", "\n", "\n", "# closure", "\n", "if", "not", "self", ".", "args", ".", "remove_clo", ":", "\n", "                ", "pos_aA_rA", "=", "self", ".", "transformer", "(", "pos_aA", ",", "pos_attr_emb", ",", "\n", "is_training", "=", "True", ",", "name", "=", "'DeCoN'", ")", "\n", "pos_rB_aB", "=", "self", ".", "transformer", "(", "pos_rB", ",", "neg_attr_emb", ",", "\n", "is_training", "=", "True", ",", "name", "=", "'CoN'", ")", "\n", "loss_clo", "=", "self", ".", "MSELoss", "(", "pos_aA_rA", ",", "pos_rA", ")", "+", "self", ".", "MSELoss", "(", "pos_rB_aB", ",", "pos_aB", ")", "\n", "\n", "# invertibility", "\n", "", "if", "not", "self", ".", "args", ".", "remove_inv", ":", "\n", "                ", "pos_rA_aA", "=", "self", ".", "transformer", "(", "pos_rA", ",", "pos_attr_emb", ",", "\n", "is_training", "=", "True", ",", "name", "=", "'CoN'", ")", "\n", "pos_aB_rB", "=", "self", ".", "transformer", "(", "pos_aB", ",", "neg_attr_emb", ",", "\n", "is_training", "=", "True", ",", "name", "=", "'DeCoN'", ")", "\n", "loss_inv", "=", "self", ".", "MSELoss", "(", "pos_rA_aA", ",", "pos_img", ")", "+", "self", ".", "MSELoss", "(", "pos_aB_rB", ",", "pos_img", ")", "\n", "\n", "# Commutativity", "\n", "", "if", "not", "self", ".", "args", ".", "remove_com", ":", "\n", "                ", "pos_aA_rB", "=", "self", ".", "transformer", "(", "pos_aA", ",", "neg_attr_emb", ",", "\n", "is_training", "=", "True", ",", "name", "=", "'DeCoN'", ")", "\n", "pos_rB_aA", "=", "self", ".", "transformer", "(", "pos_rB", ",", "pos_attr_emb", ",", "\n", "is_training", "=", "True", ",", "name", "=", "'CoN'", ")", "\n", "loss_com", "=", "self", ".", "MSELoss", "(", "pos_aA_rB", ",", "pos_rB_aA", ")", "\n", "\n", "\n", "", "loss_axiom", "=", "self", ".", "args", ".", "lambda_axiom", "*", "(", "\n", "loss_clo", "+", "loss_inv", "+", "loss_com", ")", "\n", "total_losses", ".", "append", "(", "loss_axiom", ")", "\n", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "'loss'", ")", ":", "\n", "                    ", "tf", ".", "summary", ".", "scalar", "(", "'loss_axiom'", ",", "loss_axiom", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss_clo'", ",", "loss_clo", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss_inv'", ",", "loss_inv", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss_com'", ",", "loss_com", ")", "\n", "\n", "\n", "############################# triplet loss ############################", "\n", "\n", "", "", "", "if", "self", ".", "args", ".", "lambda_trip", ">", "0", ":", "\n", "            ", "pos_triplet", "=", "tf", ".", "reduce_mean", "(", "\n", "self", ".", "triplet_margin_loss", "(", "pos_img", ",", "pos_aA", ",", "pos_rA", ")", ")", "\n", "neg_triplet", "=", "tf", ".", "reduce_mean", "(", "\n", "self", ".", "triplet_margin_loss", "(", "pos_img", ",", "pos_rB", ",", "pos_aB", ")", ")", "\n", "\n", "loss_triplet", "=", "self", ".", "args", ".", "lambda_trip", "*", "(", "pos_triplet", "+", "neg_triplet", ")", "\n", "total_losses", ".", "append", "(", "loss_triplet", ")", "\n", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "tf", ".", "summary", ".", "scalar", "(", "'loss/loss_triplet'", ",", "loss_triplet", ")", "\n", "\n", "\n", "################################ testing ##############################", "\n", "", "", "pos_img", "=", "self", ".", "rep_embedder", "(", "self", ".", "pos_image_feat", ",", "False", ",", "\"embedder\"", ")", "\n", "repeat_img_feat", "=", "utils", ".", "repeat_tensor", "(", "pos_img", ",", "0", ",", "self", ".", "num_attr", ")", "\n", "# (bz*#attr, dim_rep)", "\n", "\n", "feat_plus", "=", "self", ".", "transformer", "(", "repeat_img_feat", ",", "tile_attr_emb", ",", "\n", "is_training", "=", "False", ",", "name", "=", "'CoN'", ")", "\n", "feat_minus", "=", "self", ".", "transformer", "(", "repeat_img_feat", ",", "tile_attr_emb", ",", "\n", "is_training", "=", "False", ",", "name", "=", "'DeCoN'", ")", "\n", "\n", "prob_A_rmd", ",", "prob_A_attr", "=", "self", ".", "RMD_prob", "(", "feat_plus", ",", "feat_minus", ",", "\n", "repeat_img_feat", ",", "is_training", "=", "False", ",", "metric", "=", "'rmd'", ")", "\n", "\n", "_", ",", "prob_A_fc", "=", "self", ".", "attr_classification", "(", "pos_img", ",", "is_training", "=", "False", ")", "\n", "_", ",", "prob_O_fc", "=", "self", ".", "obj_classification", "(", "pos_img", ",", "is_training", "=", "False", ")", "\n", "\n", "\n", "\n", "\n", "if", "self", ".", "args", ".", "obj_pred", "is", "None", ":", "\n", "            ", "prob_O", "=", "prob_O_fc", "\n", "", "else", ":", "\n", "            ", "prob_O", "=", "self", ".", "pos_obj_prediction", "\n", "\n", "", "test_a_onehot", "=", "tf", ".", "one_hot", "(", "self", ".", "test_attr_id", ",", "depth", "=", "self", ".", "num_attr", ",", "axis", "=", "1", ")", "\n", "test_o_onehot", "=", "tf", ".", "one_hot", "(", "self", ".", "test_obj_id", ",", "depth", "=", "self", ".", "num_obj", ",", "axis", "=", "1", ")", "\n", "# (n_p, n_o)", "\n", "prob_P_rmd", "=", "tf", ".", "multiply", "(", "\n", "tf", ".", "matmul", "(", "prob_A_rmd", ",", "tf", ".", "transpose", "(", "test_a_onehot", ")", ")", ",", "\n", "tf", ".", "matmul", "(", "prob_O", ",", "tf", ".", "transpose", "(", "test_o_onehot", ")", ")", "\n", ")", "\n", "\n", "score_res", "=", "dict", "(", "[", "\n", "(", "\"score_rmd\"", ",", "[", "prob_P_rmd", ",", "prob_A_attr", ",", "prob_O", "]", ")", ",", "\n", "]", ")", "\n", "\n", "############################### summary ###############################", "\n", "\n", "loss", "=", "sum", "(", "total_losses", ")", "\n", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "'loss_total'", ",", "loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'lr'", ",", "self", ".", "lr", ")", "\n", "\n", "\n", "", "train_summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n", "\n", "return", "loss", ",", "score_res", ",", "train_summary_op", "\n", "\n"]], "home.repos.pwc.inspect_result.DirtyHarryLYL_SymNet.network.symnet.Network.train_step": [[363, 377], ["sess.run"], "methods", ["None"], ["", "def", "train_step", "(", "self", ",", "sess", ",", "blobs", ",", "lr", ",", "train_op", ",", "train_summary_op", ")", ":", "\n", "\n", "        ", "summary", ",", "_", "=", "sess", ".", "run", "(", "\n", "[", "train_summary_op", ",", "train_op", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "pos_attr_id", ":", "blobs", "[", "1", "]", ",", "\n", "self", ".", "pos_obj_id", ":", "blobs", "[", "2", "]", ",", "\n", "self", ".", "pos_image_feat", ":", "blobs", "[", "4", "]", ",", "\n", "self", ".", "neg_attr_id", ":", "blobs", "[", "6", "]", ",", "\n", "self", ".", "neg_image_feat", ":", "blobs", "[", "9", "]", ",", "\n", "self", ".", "lr", ":", "lr", ",", "\n", "}", ")", "\n", "\n", "return", "summary", "\n", "\n"]]}