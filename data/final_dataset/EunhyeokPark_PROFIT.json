{"home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.None.train_ts.categorize_param": [[110, 135], ["model.named_parameters", "name.find", "name.endswith", "name.endswith", "name.endswith", "name.endswith", "quant.append", "skip.append", "name.endswith", "bnbias.append", "weight.append", "len"], "function", ["None"], ["def", "categorize_param", "(", "model", ",", "skip_list", "=", "(", ")", ")", ":", "\n", "    ", "quant", "=", "[", "]", "\n", "skip", "=", "[", "]", "\n", "bnbias", "=", "[", "]", "\n", "weight", "=", "[", "]", "\n", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "skip_found", "=", "False", "\n", "for", "s", "in", "skip_list", ":", "\n", "            ", "if", "name", ".", "find", "(", "s", ")", "!=", "-", "1", ":", "\n", "                ", "skip_found", "=", "True", "\n", "\n", "", "", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "# frozen weights    ", "\n", "", "elif", "name", ".", "endswith", "(", "\".a\"", ")", "or", "name", ".", "endswith", "(", "\".b\"", ")", "or", "name", ".", "endswith", "(", "\".c\"", ")", "or", "name", ".", "endswith", "(", "\".d\"", ")", ":", "\n", "            ", "quant", ".", "append", "(", "param", ")", "\n", "", "elif", "skip_found", ":", "\n", "            ", "skip", ".", "append", "(", "param", ")", "\n", "", "elif", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", ".", "endswith", "(", "\".bias\"", ")", ":", "\n", "            ", "bnbias", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "weight", ".", "append", "(", "param", ")", "\n", "\n", "", "", "return", "(", "quant", ",", "skip", ",", "weight", ",", "bnbias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.None.train_ts.get_optimizer": [[137, 146], ["torch.SGD"], "function", ["None"], ["", "def", "get_optimizer", "(", "params", ",", "train_quant", ",", "train_weight", ",", "train_bnbias", ")", ":", "\n", "    ", "(", "quant", ",", "skip", ",", "weight", ",", "bnbias", ")", "=", "params", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "skip", ",", "'weight_decay'", ":", "0", ",", "'lr'", ":", "0", "}", ",", "\n", "{", "'params'", ":", "quant", ",", "'weight_decay'", ":", "0.", ",", "'lr'", ":", "args", ".", "lr", "*", "1e-2", "if", "train_quant", "else", "0", "}", ",", "\n", "{", "'params'", ":", "bnbias", ",", "'weight_decay'", ":", "0.", ",", "'lr'", ":", "args", ".", "lr", "if", "train_bnbias", "else", "0", "}", ",", "\n", "{", "'params'", ":", "weight", ",", "'weight_decay'", ":", "args", ".", "decay", ",", "'lr'", ":", "args", ".", "lr", "if", "train_weight", "else", "0", "}", ",", "\n", "]", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.None.train_ts.phase_prefix": [[148, 151], ["None"], "function", ["None"], ["", "def", "phase_prefix", "(", "a_bit", ",", "w_bit", ")", ":", "\n", "    ", "prefix_base", "=", "\"ts_%s_%s_%s_\"", "%", "(", "args", ".", "model", ",", "args", ".", "teacher", ",", "args", ".", "quant_op", ")", "\n", "return", "prefix_base", "+", "(", "\"ema_\"", "if", "args", ".", "use_ema", "else", "\"\"", ")", "+", "(", "\"%d_%d\"", "%", "(", "a_bit", ",", "w_bit", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.None.train_ts.train_epochs": [[153, 181], ["my_lib.train_test.resume_checkpoint", "my_lib.train_test.CosineWithWarmup", "range", "my_lib.train_test.train_ts", "my_lib.train_test.test", "max", "my_lib.train_test.create_checkpoint", "my_lib.train_test.CosineWithWarmup.step", "my_lib.train_test.test"], "function", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.resume_checkpoint", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.train_ts", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.test", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.create_checkpoint", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.test"], ["", "def", "train_epochs", "(", "optimizer", ",", "warmup_len", ",", "max_epochs", ",", "prefix", ")", ":", "\n", "    ", "last_epoch", ",", "best_acc", "=", "resume_checkpoint", "(", "model", ",", "model_ema", ",", "optimizer", ",", "args", ".", "ckpt", ",", "prefix", ")", "\n", "\n", "scheduler", "=", "CosineWithWarmup", "(", "optimizer", ",", "\n", "warmup_len", "=", "warmup_len", ",", "warmup_start_multiplier", "=", "0.1", ",", "\n", "max_epochs", "=", "max_epochs", ",", "eta_min", "=", "1e-3", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "last_epoch", "+", "1", ",", "max_epochs", ")", ":", "\n", "        ", "train_ts", "(", "trainloader", ",", "model", ",", "model_ema", ",", "model_t", ",", "criterion", ",", "optimizer", ",", "epoch", ")", "\n", "acc_base", "=", "test", "(", "testloader", ",", "model", ",", "criterion", ",", "epoch", ")", "\n", "\n", "acc_ema", "=", "0", "\n", "if", "model_ema", "is", "not", "None", ":", "\n", "            ", "acc_ema", "=", "test", "(", "testloader", ",", "model_ema", ",", "criterion", ",", "epoch", ")", "\n", "\n", "", "is_best", "=", "False", "\n", "if", "acc_base", ">", "best_acc", ":", "\n", "            ", "is_best", "=", "True", "\n", "\n", "", "is_ema_best", "=", "False", "\n", "if", "acc_ema", ">", "best_acc", ":", "\n", "            ", "is_ema_best", "=", "True", "\n", "\n", "", "best_acc", "=", "max", "(", "best_acc", ",", "acc_base", ",", "acc_ema", ")", "\n", "create_checkpoint", "(", "model", ",", "model_ema", ",", "optimizer", ",", "\n", "is_best", ",", "is_ema_best", ",", "best_acc", ",", "epoch", ",", "ckpt_root", ",", "1", ",", "prefix", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "", "return", "best_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV2_quant.ConvBNReLU.__init__": [[40, 52], ["torch.nn.Sequential.__init__", "torch.nn.Sequential.__init__", "ops.Conv2d", "torch.nn.BatchNorm2d", "ops.ReLU6", "ops.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ops", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "ReLU6", "=", "True", ")", ":", "\n", "        ", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "if", "ReLU6", ":", "\n", "            ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", "\n", "ops", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "ops", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", "\n", "ops", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV2_quant.InvertedResidual.__init__": [[56, 80], ["torch.nn.Module.__init__", "int", "layers.extend", "ops.Sequential", "round", "layers.append", "ops.Sym", "MobileNetV2_quant.ConvBNReLU", "MobileNetV2_quant.ConvBNReLU", "ops.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ops", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ",", "first", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "int", "(", "round", "(", "inp", "*", "expand_ratio", ")", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "if", "first", ":", "\n", "            ", "layers", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "layers", "=", "[", "ops", ".", "Sym", "(", ")", "]", "\n", "\n", "", "if", "expand_ratio", "!=", "1", ":", "\n", "# pw", "\n", "            ", "layers", ".", "append", "(", "ConvBNReLU", "(", "ops", ",", "inp", ",", "hidden_dim", ",", "kernel_size", "=", "1", ")", ")", "\n", "", "layers", ".", "extend", "(", "[", "\n", "# dw", "\n", "ConvBNReLU", "(", "ops", ",", "hidden_dim", ",", "hidden_dim", ",", "stride", "=", "stride", ",", "groups", "=", "hidden_dim", ")", ",", "\n", "# pw-linear", "\n", "ops", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "]", ")", "\n", "self", ".", "conv", "=", "ops", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV2_quant.InvertedResidual.forward": [[81, 86], ["MobileNetV2_quant.InvertedResidual.conv", "MobileNetV2_quant.InvertedResidual.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV2_quant.MobileNetV2.__init__": [[89, 171], ["torch.nn.Module.__init__", "MobileNetV2_quant._make_divisible", "MobileNetV2_quant._make_divisible", "features.append", "features.append", "ops.Sequential", "torch.nn.Sequential", "ops.ReLU6", "MobileNetV2_quant.MobileNetV2.modules", "ValueError", "MobileNetV2_quant.ConvBNReLU", "MobileNetV2_quant._make_divisible", "range", "ops.Sym", "MobileNetV2_quant.ConvBNReLU", "torch.nn.Dropout", "ops.Linear", "isinstance", "len", "len", "max", "features.append", "torch.nn.init.kaiming_normal_", "isinstance", "block", "torch.nn.init.zeros_", "torch.nn.init.ones_", "torch.nn.init.zeros_", "isinstance", "torch.nn.init.normal_", "torch.nn.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV2_quant._make_divisible", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV2_quant._make_divisible", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV2_quant._make_divisible"], ["    ", "def", "__init__", "(", "self", ",", "\n", "ops", ",", "\n", "num_classes", "=", "1000", ",", "\n", "width_mult", "=", "1.0", ",", "\n", "inverted_residual_setting", "=", "None", ",", "\n", "round_nearest", "=", "8", ",", "\n", "block", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        MobileNet V2 main class\n        Args:\n            num_classes (int): Number of classes\n            width_mult (float): Width multiplier - adjusts number of channels in each layer by this amount\n            inverted_residual_setting: Network structure\n            round_nearest (int): Round the number of channels in each layer to be a multiple of this number\n            Set to 1 to turn off rounding\n            block: Module specifying inverted residual building block for mobilenet\n        \"\"\"", "\n", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "block", "is", "None", ":", "\n", "            ", "block", "=", "InvertedResidual", "\n", "", "input_channel", "=", "32", "\n", "last_channel", "=", "1280", "\n", "\n", "if", "inverted_residual_setting", "is", "None", ":", "\n", "            ", "inverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# only check the first element, assuming user knows t,c,n,s are required", "\n", "", "if", "len", "(", "inverted_residual_setting", ")", "==", "0", "or", "len", "(", "inverted_residual_setting", "[", "0", "]", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\"inverted_residual_setting should be non-empty \"", "\n", "\"or a 4-element list, got {}\"", ".", "format", "(", "inverted_residual_setting", ")", ")", "\n", "\n", "# building first layer", "\n", "", "input_channel", "=", "_make_divisible", "(", "input_channel", "*", "width_mult", ",", "round_nearest", ")", "\n", "self", ".", "last_channel", "=", "_make_divisible", "(", "last_channel", "*", "max", "(", "1.0", ",", "width_mult", ")", ",", "round_nearest", ")", "\n", "features", "=", "[", "ConvBNReLU", "(", "ops", ",", "3", ",", "input_channel", ",", "stride", "=", "2", ")", "]", "\n", "\n", "# building inverted residual blocks", "\n", "first_block", "=", "True", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "inverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "_make_divisible", "(", "c", "*", "width_mult", ",", "round_nearest", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "stride", "=", "s", "if", "i", "==", "0", "else", "1", "\n", "features", ".", "append", "(", "block", "(", "ops", ",", "input_channel", ",", "output_channel", ",", "stride", ",", "expand_ratio", "=", "t", ",", "first", "=", "first_block", ")", ")", "\n", "input_channel", "=", "output_channel", "\n", "first_block", "=", "False", "\n", "\n", "# building last several layers", "\n", "", "", "features", ".", "append", "(", "ops", ".", "Sym", "(", ")", ")", "\n", "features", ".", "append", "(", "ConvBNReLU", "(", "ops", ",", "input_channel", ",", "self", ".", "last_channel", ",", "kernel_size", "=", "1", ",", "ReLU6", "=", "False", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "ops", ".", "Sequential", "(", "*", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.2", ")", ",", "\n", "ops", ".", "Linear", "(", "self", ".", "last_channel", ",", "num_classes", ")", ",", "\n", ")", "\n", "\n", "self", ".", "relu6", "=", "ops", ".", "ReLU6", "(", "False", ")", "\n", "\n", "# weight initialization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV2_quant.MobileNetV2._forward": [[172, 179], ["MobileNetV2_quant.MobileNetV2.features", "torch.relu", "MobileNetV2_quant.MobileNetV2.mean", "MobileNetV2_quant.MobileNetV2.relu6", "MobileNetV2_quant.MobileNetV2.classifier"], "methods", ["None"], ["", "", "", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "x", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "x", "=", "self", ".", "relu6", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV2_quant._make_divisible": [[19, 37], ["max", "int"], "function", ["None"], ["def", "_make_divisible", "(", "v", ",", "divisor", ",", "min_value", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This function is taken from the original tf repo.\n    It ensures that all layers have a channel number that is divisible by 8\n    It can be seen here:\n    https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet.py\n    :param v:\n    :param divisor:\n    :param min_value:\n    :return:\n    \"\"\"", "\n", "if", "min_value", "is", "None", ":", "\n", "        ", "min_value", "=", "divisor", "\n", "", "new_v", "=", "max", "(", "min_value", ",", "int", "(", "v", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_v", "<", "0.9", "*", "v", ":", "\n", "        ", "new_v", "+=", "divisor", "\n", "", "return", "new_v", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV2_quant.mobilenet_v2": [[184, 198], ["MobileNetV2_quant.MobileNetV2", "torch.utils.model_zoo.load_url", "MobileNetV2.load_state_dict"], "function", ["None"], ["", "def", "mobilenet_v2", "(", "ops", ",", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a MobileNetV2 architecture from\n    `\"MobileNetV2: Inverted Residuals and Linear Bottlenecks\" <https://arxiv.org/abs/1801.04381>`_.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "model", "=", "MobileNetV2", "(", "ops", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'mobilenet_v2'", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.h_sigmoid.__init__": [[20, 23], ["torch.Module.__init__", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "super", "(", "h_sigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.h_sigmoid.forward": [[24, 26], ["MobileNetV3Large_pad_quant.h_sigmoid.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "relu", "(", "x", "+", "3", ")", "/", "6", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.h_swish.__init__": [[29, 32], ["torch.Module.__init__", "MobileNetV3Large_pad_quant.h_sigmoid"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "super", "(", "h_swish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigmoid", "=", "h_sigmoid", "(", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.h_swish.forward": [[33, 35], ["MobileNetV3Large_pad_quant.h_swish.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.SEModule.__init__": [[38, 49], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "MobileNetV3Large_pad_quant.ch_8x", "ops.Sequential", "ops.Sym", "ops.Linear", "ops.ReLU", "ops.Linear", "MobileNetV3Large_pad_quant.h_sigmoid"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.ch_8x"], ["    ", "def", "__init__", "(", "self", ",", "ops", ",", "channels", ",", "reduction", "=", "4", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "se_channel", "=", "ch_8x", "(", "channels", "/", "reduction", ")", "\n", "\n", "self", ".", "fc", "=", "ops", ".", "Sequential", "(", "\n", "ops", ".", "Sym", "(", ")", ",", "\n", "ops", ".", "Linear", "(", "channels", ",", "se_channel", ",", "bias", "=", "True", ")", ",", "\n", "ops", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "ops", ".", "Linear", "(", "se_channel", ",", "channels", ",", "bias", "=", "True", ")", ",", "\n", "h_sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.SEModule.forward": [[51, 54], ["MobileNetV3Large_pad_quant.SEModule.avg_pool().view", "MobileNetV3Large_pad_quant.SEModule.fc().view", "MobileNetV3Large_pad_quant.SEModule.avg_pool", "MobileNetV3Large_pad_quant.SEModule.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_avg", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "return", "x", "*", "self", ".", "fc", "(", "x_avg", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.Conv2dPad.__init__": [[75, 78], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "*", "args", ",", "**", "kargs", ")", ":", "\n", "        ", "super", "(", "Conv2dPad", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kargs", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.Conv2dPad.forward": [[79, 89], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "LookupError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "\"HS\"", ":", "\n", "            ", "input", "=", "F", ".", "pad", "(", "input", ",", "self", ".", "padding", "+", "self", ".", "padding", ",", "value", "=", "-", "0.375", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"RE\"", ":", "\n", "            ", "input", "=", "F", ".", "pad", "(", "input", ",", "self", ".", "padding", "+", "self", ".", "padding", ",", "value", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "LookupError", "(", "\"Unknown nonlinear\"", ")", "\n", "\n", "", "return", "F", ".", "conv2d", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "0", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.MobileNetV3Block.__init__": [[92, 129], ["torch.Module.__init__", "MobileNetV3Large_pad_quant.ch_8x", "MobileNetV3Large_pad_quant.ch_8x", "MobileNetV3Large_pad_quant.ch_8x", "ops.Sequential", "ops.Sequential", "ops.HSwish", "ops.Conv2dPad", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "MobileNetV3Large_pad_quant.get_quant", "ops.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ops.Sym", "ops.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "MobileNetV3Large_pad_quant.get_quant", "ops.Conv2dPad", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "MobileNetV3Large_pad_quant.get_quant", "ops.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "MobileNetV3Large_pad_quant.SEModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "MobileNetV3Large_pad_quant.SEModule", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.ch_8x", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.ch_8x", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.ch_8x", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.get_quant", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.get_quant", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.get_quant"], ["    ", "def", "__init__", "(", "self", ",", "ops", ",", "scale", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "expansion", ",", "squeeze_excite", ",", "nonlinear", ",", "stride", ")", ":", "\n", "        ", "super", "(", "MobileNetV3Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "identity", "=", "stride", "==", "1", "and", "in_channels", "==", "out_channels", "\n", "in_channels", "=", "ch_8x", "(", "in_channels", "*", "scale", ")", "\n", "out_channels", "=", "ch_8x", "(", "out_channels", "*", "scale", ")", "\n", "expansion", "=", "ch_8x", "(", "expansion", "*", "scale", ")", "\n", "\n", "if", "in_channels", "==", "expansion", ":", "\n", "            ", "self", ".", "conv", "=", "ops", ".", "Sequential", "(", "\n", "# dw", "\n", "ops", ".", "HSwish", "(", "False", ")", ",", "\n", "ops", ".", "Conv2dPad", "(", "\"HS\"", ",", "in_channels", ",", "in_channels", ",", "kernel_size", ",", "stride", ",", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "groups", "=", "in_channels", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ",", "momentum", "=", "_BN_MOMENTUM", ")", ",", "\n", "# Squeeze-and-Excite", "\n", "SEModule", "(", "ops", ",", "in_channels", ")", "if", "squeeze_excite", "else", "nn", ".", "Sequential", "(", ")", ",", "\n", "get_quant", "(", "ops", ",", "nonlinear", ")", ",", "\n", "# pw-linear", "\n", "ops", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "momentum", "=", "_BN_MOMENTUM", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "ops", ".", "Sequential", "(", "\n", "# pw", "\n", "ops", ".", "Sym", "(", ")", ",", "\n", "ops", ".", "Conv2d", "(", "in_channels", ",", "expansion", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "expansion", ",", "momentum", "=", "_BN_MOMENTUM", ")", ",", "\n", "get_quant", "(", "ops", ",", "nonlinear", ")", ",", "\n", "# dw", "\n", "ops", ".", "Conv2dPad", "(", "nonlinear", ",", "expansion", ",", "expansion", ",", "kernel_size", ",", "stride", ",", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "groups", "=", "expansion", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "expansion", ",", "momentum", "=", "_BN_MOMENTUM", ")", ",", "\n", "# Squeeze-and-Excite", "\n", "SEModule", "(", "ops", ",", "expansion", ")", "if", "squeeze_excite", "else", "nn", ".", "Sequential", "(", ")", ",", "\n", "get_quant", "(", "ops", ",", "nonlinear", ")", ",", "\n", "# pw-linear", "\n", "ops", ".", "Conv2d", "(", "expansion", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "momentum", "=", "_BN_MOMENTUM", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.MobileNetV3Block.forward": [[131, 136], ["MobileNetV3Large_pad_quant.MobileNetV3Block.conv", "MobileNetV3Large_pad_quant.MobileNetV3Block.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "identity", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.MobileNetV3Large.__init__": [[180, 225], ["torch.Module.__init__", "MobileNetV3Large_pad_quant.ch_8x", "MobileNetV3Large_pad_quant.ch_8x", "MobileNetV3Large_pad_quant.ch_8x", "layers.append", "layers.append", "ops.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "ops.Sequential", "MobileNetV3Large_pad_quant.MobileNetV3Large.modules", "MobileNetV3Large_pad_quant.conv_3x3_bn", "layers.append", "ops.Sym", "MobileNetV3Large_pad_quant.conv_1x1_bn", "ops.HSwish", "ops.Linear", "MobileNetV3Large_pad_quant.get_quant", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ops.Linear", "isinstance", "MobileNetV3Large_pad_quant.MobileNetV3Block", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "isinstance", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.ch_8x", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.ch_8x", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.ch_8x", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.conv_3x3_bn", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.conv_1x1_bn", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.get_quant"], ["    ", "def", "__init__", "(", "self", ",", "ops", ",", "scale", "=", "1.", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "MobileNetV3Large", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# building first layer", "\n", "layers", "=", "[", "conv_3x3_bn", "(", "ops", ",", "3", ",", "16", ",", "2", ",", "\"HS\"", ")", "]", "\n", "in_channels", "=", "16", "\n", "\n", "# building inverted residual blocks", "\n", "for", "block", "in", "MV3LargeBlocks", ":", "\n", "            ", "layers", ".", "append", "(", "MobileNetV3Block", "(", "ops", ",", "scale", ",", "in_channels", ",", "*", "block", ")", ")", "\n", "in_channels", "=", "block", ".", "out_channels", "\n", "\n", "", "in_ch", "=", "ch_8x", "(", "in_channels", "*", "scale", ")", "\n", "ch", "=", "ch_8x", "(", "960", "*", "scale", ")", "\n", "ch2", "=", "ch_8x", "(", "1280", "*", "scale", ")", "\n", "layers", ".", "append", "(", "ops", ".", "Sym", "(", ")", ")", "\n", "layers", ".", "append", "(", "conv_1x1_bn", "(", "ops", ",", "in_ch", ",", "ch", ",", "1", ",", "\"HS\"", ")", ")", "\n", "self", ".", "features", "=", "ops", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "# building fully connected blocks", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "self", ".", "classifier", "=", "ops", ".", "Sequential", "(", "\n", "ops", ".", "HSwish", "(", "False", ")", ",", "\n", "ops", ".", "Linear", "(", "ch", ",", "ch2", ",", "bias", "=", "True", ")", ",", "\n", "get_quant", "(", "ops", ",", "\"HS\"", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.2", ")", ",", "\n", "#nn.Dropout(),", "\n", "ops", ".", "Linear", "(", "ch2", ",", "num_classes", ",", "bias", "=", "True", ")", "\n", ")", "\n", "\n", "# weight initialization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "\n", "nonlinearity", "=", "\"relu\"", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "\n", "nonlinearity", "=", "\"sigmoid\"", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.MobileNetV3Large.forward": [[226, 232], ["MobileNetV3Large_pad_quant.MobileNetV3Large.features", "MobileNetV3Large_pad_quant.MobileNetV3Large.pool", "MobileNetV3Large_pad_quant.MobileNetV3Large.view", "MobileNetV3Large_pad_quant.MobileNetV3Large.classifier"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.ch_8x": [[15, 17], ["int"], "function", ["None"], ["def", "ch_8x", "(", "ch", ")", ":", "\n", "    ", "return", "int", "(", "(", "(", "ch", "+", "7", ")", "//", "8", ")", "*", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.get_nonlinear": [[56, 63], ["torch.ReLU", "MobileNetV3Large_pad_quant.h_swish", "LookupError"], "function", ["None"], ["", "", "def", "get_nonlinear", "(", "nonlinear", ")", ":", "\n", "    ", "if", "nonlinear", "==", "\"RE\"", ":", "\n", "        ", "return", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "nonlinear", "==", "\"HS\"", ":", "\n", "        ", "return", "h_swish", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "LookupError", "(", "\"Unknown nonlinear\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.get_quant": [[65, 72], ["ops.ReLU", "ops.HSwish", "LookupError"], "function", ["None"], ["", "", "def", "get_quant", "(", "ops", ",", "nonlinear", ")", ":", "\n", "    ", "if", "nonlinear", "==", "\"RE\"", ":", "\n", "        ", "return", "ops", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "nonlinear", "==", "\"HS\"", ":", "\n", "        ", "return", "ops", ".", "HSwish", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "LookupError", "(", "\"Unknown nonlinear\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.conv_3x3_bn": [[163, 168], ["torch.Sequential", "ops.Conv2d", "torch.BatchNorm2d", "MobileNetV3Large_pad_quant.get_nonlinear"], "function", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.get_nonlinear"], ["def", "conv_3x3_bn", "(", "ops", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "nonlinear", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "ops", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "momentum", "=", "_BN_MOMENTUM", ")", ",", "\n", "get_nonlinear", "(", "nonlinear", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.conv_1x1_bn": [[171, 176], ["torch.Sequential", "ops.Conv2d", "torch.BatchNorm2d", "MobileNetV3Large_pad_quant.get_nonlinear"], "function", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.ilsvrc.MobileNetV3Large_pad_quant.get_nonlinear"], ["", "def", "conv_1x1_bn", "(", "ops", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "nonlinear", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "ops", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "momentum", "=", "_BN_MOMENTUM", ")", ",", "\n", "get_nonlinear", "(", "nonlinear", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.AverageMeter.__init__": [[32, 34], ["train_test.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.AverageMeter.reset": [[35, 40], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.AverageMeter.update": [[41, 46], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.CosineWithWarmup.__init__": [[353, 369], ["super().__init__", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "warmup_len", ":", "int", ",", "\n", "warmup_start_multiplier", ":", "float", ",", "max_epochs", ":", "int", ",", "\n", "eta_min", ":", "float", "=", "0.0", ",", "last_epoch", ":", "int", "=", "-", "1", ")", ":", "\n", "        ", "if", "warmup_len", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Warmup can't be less than 0.\"", ")", "\n", "", "self", ".", "warmup_len", "=", "warmup_len", "\n", "if", "not", "(", "0.0", "<=", "warmup_start_multiplier", "<=", "1.0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Warmup start multiplier must be within [0.0, 1.0].\"", ")", "\n", "", "self", ".", "warmup_start_multiplier", "=", "warmup_start_multiplier", "\n", "if", "max_epochs", "<", "1", "or", "max_epochs", "<", "warmup_len", ":", "\n", "            ", "raise", "ValueError", "(", "\"Max epochs must be longer than warm-up.\"", ")", "\n", "", "self", ".", "max_epochs", "=", "max_epochs", "\n", "self", ".", "cosine_len", "=", "self", ".", "max_epochs", "-", "self", ".", "warmup_len", "\n", "self", ".", "eta_min", "=", "eta_min", "# Final LR multiplier of cosine annealing", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.CosineWithWarmup.get_lr": [[370, 390], ["ValueError", "math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", ">", "self", ".", "max_epochs", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Epoch may not be greater than max_epochs={}.\"", ".", "format", "(", "\n", "self", ".", "max_epochs", ")", ")", "\n", "", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_len", "or", "self", ".", "cosine_len", "==", "0", ":", "\n", "# We're in warm-up, increase LR linearly. End multiplier is implicit 1.0.", "\n", "            ", "slope", "=", "(", "1.0", "-", "self", ".", "warmup_start_multiplier", ")", "/", "self", ".", "warmup_len", "\n", "lr_multiplier", "=", "self", ".", "warmup_start_multiplier", "+", "slope", "*", "self", ".", "last_epoch", "\n", "", "else", ":", "\n", "# We're in the cosine annealing part. Note that the implementation", "\n", "# is different from the paper in that there's no additive part and", "\n", "# the \"low\" LR is not limited by eta_min. Instead, eta_min is", "\n", "# treated as a multiplier as well. The paper implementation is", "\n", "# designed for SGDR.", "\n", "            ", "cosine_epoch", "=", "self", ".", "last_epoch", "-", "self", ".", "warmup_len", "\n", "lr_multiplier", "=", "self", ".", "eta_min", "+", "(", "1.0", "-", "self", ".", "eta_min", ")", "*", "(", "\n", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "cosine_epoch", "/", "self", ".", "cosine_len", ")", ")", "/", "2", "\n", "", "assert", "lr_multiplier", ">=", "0.0", "\n", "return", "[", "base_lr", "*", "lr_multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.set_print_freq": [[21, 24], ["None"], "function", ["None"], ["def", "set_print_freq", "(", "freq", ")", ":", "\n", "    ", "global", "_print_freq", "\n", "_print_freq", "=", "freq", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.get_tmp_dir": [[26, 28], ["None"], "function", ["None"], ["", "def", "get_tmp_dir", "(", ")", ":", "\n", "    ", "return", "_temp_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.accuracy": [[48, 63], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.create_checkpoint": [[65, 102], ["pathlib.Path().mkdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "isinstance", "model.module.state_dict", "model.state_dict", "isinstance", "torch.save", "torch.save", "torch.save", "pathlib.Path", "model_ema.module.state_dict", "model_ema.state_dict", "optimizer.state_dict"], "function", ["None"], ["", "def", "create_checkpoint", "(", "model", ",", "model_ema", ",", "optimizer", ",", "is_best", ",", "is_ema_best", ",", "\n", "best_acc", ",", "epoch", ",", "root", ",", "save_freq", "=", "10", ",", "prefix", "=", "'train'", ")", ":", "\n", "    ", "pathlib", ".", "Path", "(", "root", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'{}_{}.ckpt'", ".", "format", "(", "prefix", ",", "epoch", ")", ")", "\n", "bestname", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'{}_best.pth'", ".", "format", "(", "prefix", ")", ")", "\n", "bestemaname", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'{}_ema_best.pth'", ".", "format", "(", "prefix", ")", ")", "\n", "tempname", "=", "os", ".", "path", ".", "join", "(", "_temp_dir", ",", "'{}_tmp.pth'", ".", "format", "(", "prefix", ")", ")", "\n", "\n", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model_state", "=", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "        ", "model_state", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "", "if", "model_ema", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "model_ema", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "model_ema_state", "=", "model_ema", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "model_ema_state", "=", "model_ema", ".", "state_dict", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "model_ema_state", "=", "None", "\n", "\n", "", "if", "is_best", ":", "\n", "        ", "torch", ".", "save", "(", "model_state", ",", "bestname", ")", "\n", "\n", "", "if", "is_ema_best", ":", "\n", "        ", "torch", ".", "save", "(", "model_ema_state", ",", "bestname", ")", "\n", "\n", "", "if", "epoch", ">", "0", "and", "(", "epoch", "%", "save_freq", ")", "==", "0", ":", "\n", "        ", "state", "=", "{", "\n", "'model'", ":", "model_state", ",", "\n", "'model_ema'", ":", "model_ema_state", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_acc'", ":", "best_acc", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.resume_checkpoint": [[104, 134], ["glob.glob", "os.path.join", "re.search", "torch.load", "isinstance", "optimizer.load_state_dict", "print", "num.group.group", "max", "os.path.join", "model.module.load_state_dict", "model.load_state_dict", "isinstance", "int", "model_ema.module.load_state_dict", "model_ema.load_state_dict"], "function", ["None"], ["", "", "def", "resume_checkpoint", "(", "model", ",", "model_ema", ",", "optimizer", ",", "root", ",", "prefix", "=", "'train'", ")", ":", "\n", "    ", "files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"{}_*.ckpt\"", ".", "format", "(", "prefix", ")", ")", ")", "\n", "\n", "max_idx", "=", "-", "1", "\n", "for", "file", "in", "files", ":", "\n", "        ", "num", "=", "re", ".", "search", "(", "\"{}_(\\d+).ckpt\"", ".", "format", "(", "prefix", ")", ",", "file", ")", "\n", "if", "num", "is", "not", "None", ":", "\n", "            ", "num", "=", "num", ".", "group", "(", "1", ")", "\n", "max_idx", "=", "max", "(", "max_idx", ",", "int", "(", "num", ")", ")", "\n", "\n", "", "", "if", "max_idx", "!=", "-", "1", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "\"{}_{}.ckpt\"", ".", "format", "(", "prefix", ",", "max_idx", ")", ")", ")", "\n", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "\"model\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model\"", "]", ")", "\n", "\n", "", "if", "model_ema", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "model_ema", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "model_ema", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "\"model_ema\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "model_ema", ".", "load_state_dict", "(", "checkpoint", "[", "\"model_ema\"", "]", ")", "\n", "", "", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "best_acc", "=", "checkpoint", "[", "\"best_acc\"", "]", "\n", "return", "(", "epoch", ",", "best_acc", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"==> Can't find checkpoint...training from initial stage\"", ")", "\n", "return", "(", "-", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.test": [[136, 186], ["train_test.AverageMeter", "train_test.AverageMeter", "train_test.AverageMeter", "train_test.AverageMeter", "model.train", "time.time", "enumerate", "print", "isinstance", "train_test.AverageMeter.update", "train_test.AverageMeter.update", "train_test.AverageMeter.update", "train_test.AverageMeter.update", "time.time", "torch.no_grad", "target.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion", "train_test.accuracy", "criterion", "train_test.accuracy", "criterion.data.item", "input.cuda.size", "prec1.item", "input.cuda.size", "prec5.item", "input.cuda.size", "print", "isinstance", "input.cuda.cuda", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.AverageMeter.update", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.AverageMeter.update", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.AverageMeter.update", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.AverageMeter.update", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.accuracy", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.accuracy"], ["", "", "def", "test", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "train", "=", "False", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "train", "(", "train", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "\n", "", "if", "isinstance", "(", "output", ",", "tuple", ")", ":", "\n", "            ", "loss", "=", "criterion", "(", "output", "[", "0", "]", ",", "target_var", ")", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", "[", "0", "]", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "# record loss and accuracy", "\n", "", "losses", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "(", "i", "+", "1", ")", "%", "_print_freq", ")", "==", "0", ":", "\n", "            ", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "i", "+", "1", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "print", "(", "' * Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.train_ts": [[188, 343], ["train_test.AverageMeter", "train_test.AverageMeter", "train_test.AverageMeter", "train_test.AverageMeter", "train_test.AverageMeter", "model.train", "time.time", "model.module.named_modules", "enumerate", "model_t.train", "hasattr", "train_test.AverageMeter.update", "target.cuda.cuda", "model", "criterion", "isinstance", "train_test.AverageMeter.update", "train_test.AverageMeter.update", "train_test.AverageMeter.update", "model.module.named_modules", "optimizer.zero_grad", "loss.backward", "optimizer.step", "train_test.AverageMeter.update", "time.time", "metric_itr_map.items", "hasattr", "isinstance", "input.cuda.cuda", "torch.no_grad", "torch.autograd.Variable", "torch.autograd.Variable", "len", "model.module.named_modules", "hook.remove", "train_test.accuracy", "train_test.accuracy", "criterion.data.item", "input.cuda.size", "prec1.item", "input.cuda.size", "prec5.item", "input.cuda.size", "hasattr", "zip", "print", "time.time", "model_t", "torch.mean", "model.module.modules", "model_ema.module.modules", "isinstance", "isinstance", "time.time", "hasattr", "isinstance", "hooks.append", "torch.sum", "hasattr", "hasattr", "target.cuda.extend", "target.cuda.extend", "getattr", "getattr", "len", "input[].get_device", "torch.no_grad", "torch.nn.functional.conv2d", "torch.transpose().contiguous().view", "torch.mean", "torch.std", "torch.transpose().contiguous().view", "torch.mean", "torch.std", "KL.mean().data.cpu().numpy", "module.register_forward_hook", "module._weight_quant", "target.cuda.append", "hasattr", "torch.nn.functional.softmax", "torch.nn.functional.log_softmax", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.log", "KL.mean().data.cpu", "torch.transpose", "torch.transpose", "KL.mean"], "function", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.AverageMeter.update", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.AverageMeter.update", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.AverageMeter.update", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.AverageMeter.update", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.RoundQuant.backward", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.AverageMeter.update", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.accuracy", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.train_test.accuracy", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Linear._weight_quant"], ["", "def", "train_ts", "(", "train_loader", ",", "model", ",", "model_ema", ",", "model_t", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "metric_map", "=", "{", "}", ",", "ema_rate", "=", "0.9997", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "model_t", "is", "not", "None", ":", "\n", "        ", "model_t", ".", "train", "(", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "name", ",", "module", "in", "model", ".", "module", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "\"_weight_quant\"", ")", ":", "\n", "            ", "if", "hasattr", "(", "module", ",", "\"weight_old\"", ")", ":", "\n", "                ", "del", "module", ".", "weight_old", "\n", "", "module", ".", "weight_old", "=", "None", "\n", "\n", "", "", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "not", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "\n", "", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", "\n", "\n", "if", "model_t", "is", "not", "None", ":", "\n", "                ", "output_t", "=", "model_t", "(", "input_var", ")", "\n", "\n", "# create and attach hook for layer-wise aiwq measure", "\n", "", "", "hooks", "=", "[", "]", "\n", "metric_itr_map", "=", "{", "}", "\n", "\n", "if", "len", "(", "metric_map", ")", ">", "0", ":", "\n", "            ", "def", "forward_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "                ", "if", "self", ".", "weight_old", "is", "not", "None", "and", "input", "[", "0", "]", ".", "get_device", "(", ")", "==", "0", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "out_old", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "input", "[", "0", "]", ",", "self", ".", "weight_old", ",", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "out_t", "=", "torch", ".", "transpose", "(", "output", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "out_channels", ",", "-", "1", ")", "\n", "out_mean", "=", "torch", ".", "mean", "(", "out_t", ",", "1", ")", "\n", "out_std", "=", "torch", ".", "std", "(", "out_t", ",", "1", ")", "# + 1e-8", "\n", "\n", "out_old_t", "=", "torch", ".", "transpose", "(", "out_old", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "out_channels", ",", "-", "1", ")", "\n", "out_old_mean", "=", "torch", ".", "mean", "(", "out_old_t", ",", "1", ")", "\n", "out_old_std", "=", "torch", ".", "std", "(", "out_old_t", ",", "1", ")", "# + 1e-8", "\n", "\n", "out_cond", "=", "out_std", "!=", "0", "\n", "out_old_cond", "=", "out_old_std", "!=", "0", "\n", "cond", "=", "out_cond", "&", "out_old_cond", "\n", "\n", "out_mean", "=", "out_mean", "[", "cond", "]", "\n", "out_std", "=", "out_std", "[", "cond", "]", "\n", "\n", "out_old_mean", "=", "out_old_mean", "[", "cond", "]", "\n", "out_old_std", "=", "out_old_std", "[", "cond", "]", "\n", "\n", "KL", "=", "torch", ".", "log", "(", "out_old_std", "/", "out_std", ")", "+", "(", "out_std", "**", "2", "+", "(", "out_mean", "-", "out_old_mean", ")", "**", "2", ")", "/", "(", "2", "*", "out_old_std", "**", "2", ")", "-", "0.5", "\n", "metric_itr_map", "[", "self", ".", "name", "]", "=", "KL", ".", "mean", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "", "for", "name", ",", "module", "in", "model", ".", "module", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "module", ",", "\"_weight_quant\"", ")", "and", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "module", ".", "name", "=", "name", "\n", "hooks", ".", "append", "(", "module", ".", "register_forward_hook", "(", "forward_hook", ")", ")", "\n", "\n", "# compute output", "\n", "", "", "", "output", "=", "model", "(", "input_var", ")", "\n", "for", "hook", "in", "hooks", ":", "\n", "            ", "hook", ".", "remove", "(", ")", "\n", "\n", "", "loss_class", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "if", "model_t", "is", "not", "None", ":", "\n", "            ", "loss_kd", "=", "-", "1", "*", "torch", ".", "mean", "(", "\n", "torch", ".", "sum", "(", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "output_t", ",", "dim", "=", "1", ")", "\n", "*", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", ")", "\n", "loss", "=", "loss_class", "+", "loss_kd", "\n", "", "else", ":", "\n", "            ", "loss", "=", "loss_class", "\n", "\n", "# measure accuracy and record loss", "\n", "", "if", "isinstance", "(", "output", ",", "tuple", ")", ":", "\n", "            ", "prec1", ",", "prec5", "=", "accuracy", "(", "output", "[", "0", "]", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "", "else", ":", "\n", "            ", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "", "losses", ".", "update", "(", "loss_class", ".", "data", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# store weight for next iteration update", "\n", "for", "name", ",", "module", "in", "model", ".", "module", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "module", ",", "\"_weight_quant\"", ")", ":", "\n", "                ", "if", "name", "in", "metric_map", ":", "\n", "                    ", "module", ".", "weight_old", "=", "module", ".", "_weight_quant", "(", ")", ".", "data", "\n", "", "else", ":", "\n", "                    ", "if", "hasattr", "(", "module", ",", "\"weight_old\"", ")", ":", "\n", "                        ", "del", "module", ".", "weight_old", "\n", "", "module", ".", "weight_old", "=", "None", "\n", "\n", "# compute gradient and do SGD step", "\n", "", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# implementation of weight exponential moving-average ", "\n", "if", "model_ema", "is", "not", "None", ":", "\n", "            ", "for", "module", ",", "module_ema", "in", "zip", "(", "model", ".", "module", ".", "modules", "(", ")", ",", "model_ema", ".", "module", ".", "modules", "(", ")", ")", ":", "\n", "                ", "target", "=", "[", "]", "\n", "\n", "for", "quant_param", "in", "[", "\"a\"", ",", "\"b\"", ",", "\"c\"", ",", "\"d\"", "]", ":", "\n", "                    ", "if", "hasattr", "(", "module", ",", "quant_param", ")", ":", "\n", "                        ", "target", ".", "append", "(", "quant_param", ")", "\n", "\n", "", "", "if", "isinstance", "(", "module", ",", "(", "torch", ".", "nn", ".", "Conv2d", ",", "torch", ".", "nn", ".", "Linear", ")", ")", ":", "\n", "                    ", "target", ".", "extend", "(", "[", "\"weight\"", ",", "\"bias\"", "]", ")", "\n", "\n", "", "if", "isinstance", "(", "module", ",", "(", "torch", ".", "nn", ".", "BatchNorm2d", ")", ")", ":", "\n", "                    ", "target", ".", "extend", "(", "[", "\"weight\"", ",", "\"bias\"", ",", "\"running_mean\"", ",", "\"running_var\"", "]", ")", "\n", "\n", "if", "module", ".", "num_batches_tracked", "is", "not", "None", ":", "\n", "                        ", "module_ema", ".", "num_batches_tracked", ".", "data", "=", "module", ".", "num_batches_tracked", ".", "data", "\n", "\n", "", "", "for", "t", "in", "target", ":", "\n", "                    ", "base", "=", "getattr", "(", "module", ",", "t", ",", "None", ")", "\n", "ema", "=", "getattr", "(", "module_ema", ",", "t", ",", "None", ")", "\n", "\n", "if", "base", "is", "not", "None", "and", "hasattr", "(", "base", ",", "\"data\"", ")", ":", "\n", "                        ", "ema", ".", "data", "+=", "(", "1", "-", "ema_rate", ")", "*", "(", "base", ".", "data", "-", "ema", ".", "data", ")", "\n", "\n", "# measure elapsed time", "\n", "", "", "", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "(", "i", "+", "1", ")", "%", "_print_freq", ")", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", "+", "1", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "metric_itr_map", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", ">", "1", ":", "\n", "                ", "continue", "\n", "", "metric_map", "[", "key", "]", "=", "0.999", "*", "metric_map", "[", "key", "]", "+", "0.001", "*", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.imagenet.SubsetSampler.__init__": [[22, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.imagenet.SubsetSampler.__iter__": [[25, 27], ["range", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "indices", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "indices", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.imagenet.SubsetSampler.__len__": [[28, 30], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.my_lib.imagenet.get_loader": [[32, 92], ["list", "numpy.random.seed", "numpy.random.shuffle", "range", "torchvision.Compose", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.datasets.ImageFolder", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.datasets.ImageFolder", "imagenet.SubsetSampler", "torch.utils.data.DataLoader", "os.path.join", "os.path.join", "os.path.join", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "get_loader", "(", "root", ",", "test_batch", ",", "train_batch", ",", "valid_size", "=", "0", ",", "num_workers", "=", "16", ",", "random_seed", "=", "12345", ")", ":", "\n", "    ", "indices", "=", "list", "(", "range", "(", "50000", ")", ")", "\n", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "test_idx", ",", "valid_idx", "=", "indices", "[", "valid_size", ":", "]", ",", "indices", "[", ":", "valid_size", "]", "\n", "\n", "if", "train_batch", ">", "0", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "interpolation", "=", "PIL", ".", "Image", ".", "BICUBIC", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"train\"", ")", ",", "transform_train", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "train_batch", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "train_loader", "=", "None", "\n", "\n", "", "if", "valid_size", ">", "0", ":", "\n", "        ", "assert", "(", "test_batch", ">", "0", ",", "\"validation set follows the batch size of test set, which is 0\"", ")", "\n", "transform_valid", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ",", "interpolation", "=", "PIL", ".", "Image", ".", "BICUBIC", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "\n", "valid_dataset", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"val_pt\"", ")", ",", "transform_valid", ")", "\n", "valid_sampler", "=", "SubsetRandomSampler", "(", "valid_idx", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valid_dataset", ",", "batch_size", "=", "test_batch", ",", "sampler", "=", "valid_sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "valid_loader", "=", "None", "\n", "\n", "", "if", "test_batch", ">", "0", ":", "\n", "        ", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ",", "interpolation", "=", "PIL", ".", "Image", ".", "BICUBIC", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "\n", "test_dataset", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"val_pt\"", ")", ",", "transform_test", ")", "\n", "test_sampler", "=", "SubsetSampler", "(", "test_idx", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "test_batch", ",", "sampler", "=", "test_sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "", "else", ":", "\n", "        ", "test_loader", "=", "None", "\n", "\n", "", "return", "test_loader", ",", "train_loader", ",", "valid_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.RoundQuant.forward": [[15, 18], ["input.mul().round_().div_", "input.mul().round_", "input.mul"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "n_lv", ")", ":", "\n", "        ", "return", "input", ".", "mul", "(", "n_lv", "-", "1", ")", ".", "round_", "(", ")", ".", "div_", "(", "n_lv", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.RoundQuant.backward": [[19, 22], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_ReLU.__init__": [[25, 32], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_func", "=", "True", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", "Q_ReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_lv", "=", "0", "\n", "self", ".", "act_func", "=", "act_func", "\n", "self", ".", "inplace", "=", "inplace", "\n", "self", ".", "a", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ")", ")", "\n", "self", ".", "c", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_ReLU.initialize": [[33, 37], ["duq.Q_ReLU.a.data.fill_", "duq.Q_ReLU.c.data.fill_", "numpy.log", "numpy.log", "numpy.exp", "numpy.exp"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "n_lv", ",", "offset", ",", "diff", ")", ":", "\n", "        ", "self", ".", "n_lv", "=", "n_lv", "\n", "self", ".", "a", ".", "data", ".", "fill_", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "offset", "+", "diff", ")", "-", "1", ")", ")", "\n", "self", ".", "c", ".", "data", ".", "fill_", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "offset", "+", "diff", ")", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_ReLU.forward": [[38, 50], ["torch.relu", "torch.relu", "torch.relu", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.hardtanh", "torch.hardtanh", "torch.hardtanh", "RoundQuant.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "act_func", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ",", "self", ".", "inplace", ")", "\n", "\n", "", "if", "self", ".", "n_lv", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "a", "=", "F", ".", "softplus", "(", "self", ".", "a", ")", "\n", "c", "=", "F", ".", "softplus", "(", "self", ".", "c", ")", "\n", "x", "=", "F", ".", "hardtanh", "(", "x", "/", "a", ",", "0", ",", "1", ")", "\n", "x", "=", "RoundQuant", ".", "apply", "(", "x", ",", "self", ".", "n_lv", ")", "*", "c", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_ReLU6.__init__": [[53, 55], ["duq.Q_ReLU.__init__"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_func", "=", "True", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", "Q_ReLU6", ",", "self", ")", ".", "__init__", "(", "act_func", ",", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_ReLU6.initialize": [[56, 64], ["duq.Q_ReLU6.a.data.fill_", "duq.Q_ReLU6.c.data.fill_", "duq.Q_ReLU6.a.data.fill_", "duq.Q_ReLU6.c.data.fill_", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "n_lv", ",", "offset", ",", "diff", ")", ":", "\n", "        ", "self", ".", "n_lv", "=", "n_lv", "\n", "if", "offset", "+", "diff", ">", "6", ":", "\n", "            ", "self", ".", "a", ".", "data", ".", "fill_", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "6", ")", "-", "1", ")", ")", "\n", "self", ".", "c", ".", "data", ".", "fill_", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "6", ")", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "a", ".", "data", ".", "fill_", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "offset", "+", "diff", ")", "-", "1", ")", ")", "\n", "self", ".", "c", ".", "data", ".", "fill_", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "offset", "+", "diff", ")", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sym.__init__": [[67, 72], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Q_Sym", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_lv", "=", "0", "\n", "self", ".", "a", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ")", ")", "\n", "self", ".", "c", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sym.initialize": [[73, 77], ["duq.Q_Sym.a.data.fill_", "duq.Q_Sym.c.data.fill_", "numpy.log", "numpy.log", "numpy.exp", "numpy.exp"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "n_lv", ",", "offset", ",", "diff", ")", ":", "\n", "        ", "self", ".", "n_lv", "=", "n_lv", "\n", "self", ".", "a", ".", "data", ".", "fill_", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "offset", "+", "diff", ")", "-", "1", ")", ")", "\n", "self", ".", "c", ".", "data", ".", "fill_", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "offset", "+", "diff", ")", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sym.forward": [[78, 88], ["torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.hardtanh", "torch.hardtanh", "torch.hardtanh", "RoundQuant.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "n_lv", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "a", "=", "F", ".", "softplus", "(", "self", ".", "a", ")", "\n", "c", "=", "F", ".", "softplus", "(", "self", ".", "c", ")", "\n", "\n", "x", "=", "F", ".", "hardtanh", "(", "x", "/", "a", ",", "-", "1", ",", "1", ")", "\n", "x", "=", "RoundQuant", ".", "apply", "(", "x", ",", "self", ".", "n_lv", "//", "2", ")", "*", "c", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_HSwish.__init__": [[91, 99], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_func", "=", "True", ")", ":", "\n", "        ", "super", "(", "Q_HSwish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_lv", "=", "0", "\n", "self", ".", "act_func", "=", "act_func", "\n", "self", ".", "a", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ")", ")", "\n", "self", ".", "b", "=", "3", "/", "8", "\n", "self", ".", "c", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ")", ")", "\n", "self", ".", "d", "=", "-", "3", "/", "8", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_HSwish.initialize": [[100, 104], ["duq.Q_HSwish.a.data.fill_", "duq.Q_HSwish.c.data.fill_", "numpy.log", "numpy.log", "numpy.exp", "numpy.exp"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "n_lv", ",", "offset", ",", "diff", ")", ":", "\n", "        ", "self", ".", "n_lv", "=", "n_lv", "\n", "self", ".", "a", ".", "data", ".", "fill_", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "offset", "+", "diff", ")", "-", "1", ")", ")", "\n", "self", ".", "c", ".", "data", ".", "fill_", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "offset", "+", "diff", ")", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_HSwish.forward": [[105, 119], ["torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.hardtanh", "torch.hardtanh", "torch.hardtanh", "RoundQuant.apply", "torch.hardtanh", "torch.hardtanh", "torch.hardtanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "act_func", ":", "\n", "            ", "x", "=", "x", "*", "(", "F", ".", "hardtanh", "(", "x", "+", "3", ",", "0", ",", "6", ")", "/", "6", ")", "\n", "\n", "", "if", "self", ".", "n_lv", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "a", "=", "F", ".", "softplus", "(", "self", ".", "a", ")", "\n", "c", "=", "F", ".", "softplus", "(", "self", ".", "c", ")", "\n", "x", "=", "x", "+", "self", ".", "b", "\n", "x", "=", "F", ".", "hardtanh", "(", "x", "/", "a", ",", "0", ",", "1", ")", "\n", "x", "=", "RoundQuant", ".", "apply", "(", "x", ",", "self", ".", "n_lv", ")", "*", "c", "\n", "x", "=", "x", "+", "self", ".", "d", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Conv2d.__init__": [[122, 128], ["torch.Conv2d.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kargs", ")", ":", "\n", "        ", "super", "(", "Q_Conv2d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kargs", ")", "\n", "self", ".", "n_lv", "=", "0", "\n", "self", ".", "a", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ")", ")", "\n", "self", ".", "c", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ")", ")", "\n", "self", ".", "weight_old", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Conv2d.initialize": [[129, 134], ["duq.Q_Conv2d.weight.data.abs().max().item", "duq.Q_Conv2d.a.data.fill_", "duq.Q_Conv2d.c.data.fill_", "numpy.log", "numpy.log", "duq.Q_Conv2d.weight.data.abs().max", "numpy.exp", "numpy.exp", "duq.Q_Conv2d.weight.data.abs"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "n_lv", ")", ":", "\n", "        ", "self", ".", "n_lv", "=", "n_lv", "\n", "max_val", "=", "self", ".", "weight", ".", "data", ".", "abs", "(", ")", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "a", ".", "data", ".", "fill_", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "max_val", "*", "0.9", ")", "-", "1", ")", ")", "\n", "self", ".", "c", ".", "data", ".", "fill_", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "max_val", "*", "0.9", ")", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Conv2d._weight_quant": [[135, 142], ["torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.hardtanh", "torch.hardtanh", "torch.hardtanh", "RoundQuant.apply"], "methods", ["None"], ["", "def", "_weight_quant", "(", "self", ")", ":", "\n", "        ", "a", "=", "F", ".", "softplus", "(", "self", ".", "a", ")", "\n", "c", "=", "F", ".", "softplus", "(", "self", ".", "c", ")", "\n", "\n", "weight", "=", "F", ".", "hardtanh", "(", "self", ".", "weight", "/", "a", ",", "-", "1", ",", "1", ")", "\n", "weight", "=", "RoundQuant", ".", "apply", "(", "weight", ",", "self", ".", "n_lv", "//", "2", ")", "*", "c", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Conv2d.forward": [[143, 152], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "duq.Q_Conv2d._weight_quant", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Linear._weight_quant"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "n_lv", "==", "0", ":", "\n", "            ", "return", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "_weight_quant", "(", ")", "\n", "\n", "return", "F", ".", "conv2d", "(", "x", ",", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Linear.__init__": [[155, 161], ["torch.Linear.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kargs", ")", ":", "\n", "        ", "super", "(", "Q_Linear", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kargs", ")", "\n", "self", ".", "n_lv", "=", "0", "\n", "self", ".", "a", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ")", ")", "\n", "self", ".", "c", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ")", ")", "\n", "self", ".", "weight_old", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Linear.initialize": [[162, 167], ["duq.Q_Linear.weight.data.abs().max().item", "duq.Q_Linear.a.data.fill_", "duq.Q_Linear.c.data.fill_", "numpy.log", "numpy.log", "duq.Q_Linear.weight.data.abs().max", "numpy.exp", "numpy.exp", "duq.Q_Linear.weight.data.abs"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "n_lv", ")", ":", "\n", "        ", "self", ".", "n_lv", "=", "n_lv", "\n", "max_val", "=", "self", ".", "weight", ".", "data", ".", "abs", "(", ")", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "a", ".", "data", ".", "fill_", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "max_val", "*", "0.9", ")", "-", "1", ")", ")", "\n", "self", ".", "c", ".", "data", ".", "fill_", "(", "np", ".", "log", "(", "np", ".", "exp", "(", "max_val", "*", "0.9", ")", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Linear._weight_quant": [[168, 175], ["torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.hardtanh", "torch.hardtanh", "torch.hardtanh", "RoundQuant.apply"], "methods", ["None"], ["", "def", "_weight_quant", "(", "self", ")", ":", "\n", "        ", "a", "=", "F", ".", "softplus", "(", "self", ".", "a", ")", "\n", "c", "=", "F", ".", "softplus", "(", "self", ".", "c", ")", "\n", "\n", "weight", "=", "F", ".", "hardtanh", "(", "self", ".", "weight", "/", "a", ",", "-", "1", ",", "1", ")", "\n", "weight", "=", "RoundQuant", ".", "apply", "(", "weight", ",", "self", ".", "n_lv", "//", "2", ")", "*", "c", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Linear.forward": [[176, 182], ["torch.linear", "torch.linear", "torch.linear", "duq.Q_Linear._weight_quant", "torch.linear", "torch.linear", "torch.linear"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Linear._weight_quant"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "n_lv", "==", "0", ":", "\n", "            ", "return", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "_weight_quant", "(", ")", "\n", "return", "F", ".", "linear", "(", "x", ",", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Conv2dPad.__init__": [[185, 188], ["duq.Q_Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "*", "args", ",", "**", "kargs", ")", ":", "\n", "        ", "super", "(", "Q_Conv2dPad", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kargs", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Conv2dPad.forward": [[189, 205], ["torch.pad", "torch.pad", "torch.pad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "duq.Q_Conv2dPad._weight_quant", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.pad", "torch.pad", "torch.pad", "LookupError"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Linear._weight_quant"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "\"HS\"", ":", "\n", "            ", "inputs", "=", "F", ".", "pad", "(", "inputs", ",", "self", ".", "padding", "+", "self", ".", "padding", ",", "value", "=", "-", "3", "/", "8", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"RE\"", ":", "\n", "            ", "inputs", "=", "F", ".", "pad", "(", "inputs", ",", "self", ".", "padding", "+", "self", ".", "padding", ",", "value", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "LookupError", "(", "\"Unknown nonlinear\"", ")", "\n", "\n", "", "if", "self", ".", "n_lv", "==", "0", ":", "\n", "            ", "return", "F", ".", "conv2d", "(", "inputs", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "0", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "_weight_quant", "(", ")", "\n", "\n", "return", "F", ".", "conv2d", "(", "inputs", ",", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "0", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__": [[257, 271], ["torch.Sequential.__init__", "isinstance", "args[].items", "len", "duq.Q_Sequential.add_module", "isinstance", "duq.Q_Sequential.add_module", "duq.Q_Sequential.add_module", "isinstance", "str", "str"], "methods", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.Q_Sequential.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "Q_Sequential", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "len", "(", "args", ")", "==", "1", "and", "isinstance", "(", "args", "[", "0", "]", ",", "OrderedDict", ")", ":", "\n", "            ", "for", "key", ",", "module", "in", "args", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "add_module", "(", "key", ",", "module", ")", "\n", "", "", "else", ":", "\n", "            ", "idx", "=", "0", "\n", "for", "module", "in", "args", ":", "\n", "                ", "if", "isinstance", "(", "module", ",", "Q_Sym", ")", "or", "(", "isinstance", "(", "module", ",", "Q_HSwish", ")", "and", "idx", "==", "0", ")", ":", "\n", "                    ", "self", ".", "add_module", "(", "'-'", "+", "str", "(", "idx", ")", ",", "module", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "module", ")", "\n", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.initialize": [[208, 254], ["model.named_modules", "model.train", "model.cpu", "enumerate", "model.cuda", "module.register_forward_hook", "hooks.append", "module.register_forward_hook.remove", "isinstance", "np.abs.detach().cpu().numpy", "isinstance", "np.abs.reshape", "numpy.sort", "module.initialize", "isinstance", "module.initialize", "torch.no_grad", "torch.no_grad", "torch.no_grad", "isinstance", "isinstance", "numpy.abs", "isinstance", "len", "model.module", "model", "np.abs.detach().cpu", "np.abs.detach", "int", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.initialize", "home.repos.pwc.inspect_result.EunhyeokPark_PROFIT.quant_op.duq.initialize"], ["", "", "", "def", "initialize", "(", "model", ",", "loader", ",", "n_lv", ",", "act", "=", "False", ",", "weight", "=", "False", ",", "eps", "=", "0.05", ")", ":", "\n", "    ", "def", "initialize_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "(", "Q_ReLU", ",", "Q_Sym", ",", "Q_HSwish", ")", ")", "and", "act", ":", "\n", "            ", "if", "not", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "input", "=", "input", "[", "0", "]", "\n", "", "input", "=", "input", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "isinstance", "(", "input", ",", "Q_Sym", ")", ":", "\n", "                ", "input", "=", "np", ".", "abs", "(", "input", ")", "\n", "", "elif", "isinstance", "(", "input", ",", "Q_HSwish", ")", ":", "\n", "                ", "input", "=", "input", "+", "3", "/", "8", "\n", "\n", "", "input", "=", "input", ".", "reshape", "(", "-", "1", ")", "\n", "input", "=", "input", "[", "input", ">", "0", "]", "\n", "input", "=", "np", ".", "sort", "(", "input", ")", "\n", "\n", "if", "len", "(", "input", ")", "==", "0", ":", "\n", "                ", "small", ",", "large", "=", "0", ",", "1e-3", "\n", "", "else", ":", "\n", "                ", "small", ",", "large", "=", "input", "[", "int", "(", "len", "(", "input", ")", "*", "eps", ")", "]", ",", "input", "[", "int", "(", "len", "(", "input", ")", "*", "(", "1", "-", "eps", ")", ")", "]", "\n", "\n", "", "module", ".", "initialize", "(", "n_lv", ",", "small", ",", "large", "-", "small", ")", "\n", "\n", "", "if", "isinstance", "(", "module", ",", "(", "Q_Conv2d", ",", "Q_Linear", ")", ")", "and", "weight", ":", "\n", "            ", "module", ".", "initialize", "(", "n_lv", ")", "\n", "\n", "", "", "hooks", "=", "[", "]", "\n", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "hook", "=", "module", ".", "register_forward_hook", "(", "initialize_hook", ")", "\n", "hooks", ".", "append", "(", "hook", ")", "\n", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "cpu", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "output", "=", "model", ".", "module", "(", "input", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "model", "(", "input", ")", "\n", "", "", "break", "\n", "\n", "", "model", ".", "cuda", "(", ")", "\n", "for", "hook", "in", "hooks", ":", "\n", "        ", "hook", ".", "remove", "(", ")", "\n", "\n"]]}