{"home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.WordEncoder.__init__": [[15, 18], ["NotImplementedError"], "methods", ["None"], ["    ", "@", "abc", ".", "abstractmethod", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.WordEncoder.embed_word": [[19, 22], ["NotImplementedError"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "embed_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.WordEncoder.norm_embed": [[23, 26], ["encoder.WordEncoder.embed_word", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.FTCachedEncoder.embed_word"], ["", "def", "norm_embed", "(", "self", ",", "word", ")", ":", "\n", "        ", "vec", "=", "self", ".", "embed_word", "(", "word", ")", "\n", "return", "vec", "/", "np", ".", "linalg", ".", "norm", "(", "vec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.FTEncoder.__init__": [[29, 41], ["io.open", "map", "set", "set", "io.open.readline().split", "line.rstrip().split", "numpy.asarray", "encoder.FTEncoder.embeddings.keys", "io.open.readline", "line.rstrip", "list", "encoder.FTEncoder.embeddings.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "embed_file_name", ")", ":", "\n", "        ", "fin", "=", "io", ".", "open", "(", "embed_file_name", ",", "'r'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "'\\n'", ",", "errors", "=", "'ignore'", ")", "\n", "n", ",", "d", "=", "map", "(", "int", ",", "fin", ".", "readline", "(", ")", ".", "split", "(", ")", ")", "\n", "self", ".", "embeddings", "=", "{", "}", "\n", "for", "line", "in", "fin", ":", "\n", "            ", "tokens", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "' '", ")", "\n", "self", ".", "embeddings", "[", "tokens", "[", "0", "]", "]", "=", "np", ".", "asarray", "(", "tokens", "[", "1", ":", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "", "self", ".", "vocab", "=", "set", "(", "self", ".", "embeddings", ".", "keys", "(", ")", ")", "\n", "self", ".", "E", "=", "self", ".", "embeddings", "[", "list", "(", "self", ".", "embeddings", ".", "keys", "(", ")", ")", "[", "0", "]", "]", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "cache", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.FTEncoder.embed_word": [[42, 45], ["encoder.FTEncoder.cache.add"], "methods", ["None"], ["", "def", "embed_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "self", ".", "cache", ".", "add", "(", "word", ")", "\n", "return", "self", ".", "embeddings", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.FTEncoder.cache_embed": [[46, 51], ["pickle.dump", "open"], "methods", ["None"], ["", "def", "cache_embed", "(", "self", ",", "path", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "for", "word", "in", "self", ".", "cache", ":", "\n", "            ", "output", "[", "word", "]", "=", "self", ".", "embeddings", "[", "word", "]", "\n", "", "pickle", ".", "dump", "(", "output", ",", "open", "(", "path", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.FTEncoder.clear_cache": [[52, 54], ["set"], "methods", ["None"], ["", "def", "clear_cache", "(", "self", ")", ":", "\n", "        ", "self", ".", "cache", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.FTCachedEncoder.__init__": [[57, 62], ["pickle.load", "set", "open", "encoder.FTCachedEncoder.embeddings.keys", "list", "encoder.FTCachedEncoder.embeddings.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "embed_file_name", ")", ":", "\n", "        ", "self", ".", "embeddings", "=", "pickle", ".", "load", "(", "open", "(", "embed_file_name", ",", "'rb'", ")", ")", "\n", "\n", "self", ".", "vocab", "=", "set", "(", "self", ".", "embeddings", ".", "keys", "(", ")", ")", "\n", "self", ".", "E", "=", "self", ".", "embeddings", "[", "list", "(", "self", ".", "embeddings", ".", "keys", "(", ")", ")", "[", "0", "]", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.FTCachedEncoder.embed_word": [[63, 65], ["None"], "methods", ["None"], ["", "def", "embed_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.SenseEncoder.__init__": [[68, 71], ["NotImplementedError"], "methods", ["None"], ["    ", "@", "abc", ".", "abstractmethod", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.SenseEncoder.encode_dataset": [[72, 95], ["encoder.SenseEncoder.encode_sentences", "encoder.SenseEncoder.encode_sentences", "encoder.SenseEncoder.encode_sentences", "range", "encoder.SenseEncoder.encode_sentences", "encoder.SenseEncoder.encode_dataset.collect_slang_sents"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.SBertEncoder.encode_sentences", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.SBertEncoder.encode_sentences", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.SBertEncoder.encode_sentences", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.SBertEncoder.encode_sentences"], ["", "def", "encode_dataset", "(", "self", ",", "dataset", ",", "slang_ind", ")", ":", "\n", "\n", "        ", "embeds", "=", "{", "}", "\n", "\n", "def", "collect_slang_sents", "(", "dataset", ",", "ind", ")", ":", "\n", "            ", "sentences", "=", "[", "]", "\n", "for", "i", "in", "ind", ":", "\n", "                ", "sentences", ".", "append", "(", "' '", ".", "join", "(", "simple_preprocess", "(", "dataset", ".", "slang_data", "[", "i", "]", ".", "def_sent", ")", ")", ")", "\n", "", "return", "sentences", "\n", "\n", "", "embeds", "[", "'train'", "]", "=", "self", ".", "encode_sentences", "(", "collect_slang_sents", "(", "dataset", ",", "slang_ind", ".", "train", ")", ")", "\n", "embeds", "[", "'dev'", "]", "=", "self", ".", "encode_sentences", "(", "collect_slang_sents", "(", "dataset", ",", "slang_ind", ".", "dev", ")", ")", "\n", "embeds", "[", "'test'", "]", "=", "self", ".", "encode_sentences", "(", "collect_slang_sents", "(", "dataset", ",", "slang_ind", ".", "test", ")", ")", "\n", "\n", "sentences", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ".", "vocab", ")", ")", ":", "\n", "            ", "word", "=", "dataset", ".", "vocab", "[", "i", "]", "\n", "for", "d", "in", "dataset", ".", "conv_data", "[", "word", "]", ".", "definitions", ":", "\n", "                ", "sentences", ".", "append", "(", "' '", ".", "join", "(", "simple_preprocess", "(", "d", "[", "'def'", "]", ")", ")", ")", "\n", "\n", "", "", "embeds", "[", "'standard'", "]", "=", "self", ".", "encode_sentences", "(", "sentences", ")", "\n", "\n", "return", "embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.SenseEncoder.encode_sentences": [[96, 99], ["NotImplementedError"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "encode_sentences", "(", "self", ",", "sentences", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.SBertEncoder.__init__": [[102, 113], ["sentence_transformers.SentenceTransformer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sbert_model_name", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "\n", "        ", "if", "sbert_model_name", "is", "None", ":", "\n", "            ", "sbert_model_name", "=", "'bert-base-nli-mean-tokens'", "\n", "self", ".", "name", "=", "'sbert_base'", "\n", "", "elif", "name", "is", "not", "None", ":", "\n", "            ", "self", ".", "name", "=", "name", "\n", "", "else", ":", "\n", "            ", "self", ".", "name", "=", "sbert_model_name", "\n", "\n", "", "self", ".", "sbert_model", "=", "SentenceTransformer", "(", "sbert_model_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.SBertEncoder.encode_sentences": [[114, 118], ["numpy.asarray", "util.normalize_L2", "encoder.SBertEncoder.sbert_model.encode"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.normalize_L2"], ["", "def", "encode_sentences", "(", "self", ",", "sentences", ")", ":", "\n", "\n", "        ", "sbert_embeddings", "=", "np", ".", "asarray", "(", "self", ".", "sbert_model", ".", "encode", "(", "sentences", ")", ")", "\n", "return", "normalize_L2", "(", "sbert_embeddings", ",", "axis", "=", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.__init__": [[22, 49], ["util.create_directory", "range", "numpy.asarray", "numpy.zeros", "range", "contrastive.SlangGenTrainer.preprocess_word_dist", "numpy.save", "conv_lens.append", "len"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.create_directory", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.preprocess_word_dist"], ["def", "__init__", "(", "self", ",", "dataset", ",", "word_encoder", ",", "out_dir", "=", "''", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "out_dir", "=", "out_dir", "\n", "create_directory", "(", "out_dir", ")", "\n", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n", "self", ".", "word_encoder", "=", "word_encoder", "\n", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "conv_lens", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "dataset", ".", "V", ")", ":", "\n", "            ", "word", "=", "dataset", ".", "vocab", "[", "i", "]", "\n", "conv_lens", ".", "append", "(", "len", "(", "dataset", ".", "conv_data", "[", "word", "]", ".", "definitions", ")", ")", "\n", "", "self", ".", "conv_lens", "=", "np", ".", "asarray", "(", "conv_lens", ")", "\n", "\n", "self", ".", "conv_acc", "=", "np", ".", "zeros", "(", "dataset", ".", "V", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "dataset", ".", "V", ")", ":", "\n", "            ", "self", ".", "conv_acc", "[", "i", "]", "=", "self", ".", "conv_acc", "[", "i", "-", "1", "]", "+", "self", ".", "conv_lens", "[", "i", "-", "1", "]", "\n", "\n", "", "self", ".", "word_dist", "=", "self", ".", "preprocess_word_dist", "(", ")", "\n", "np", ".", "save", "(", "out_dir", "+", "'/word_dist.npy'", ",", "self", ".", "word_dist", ")", "\n", "\n", "self", ".", "sense_encoder", "=", "None", "\n", "self", ".", "se_model_name", "=", "\"INVALID\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.preprocess_slang_data": [[50, 65], ["util.create_directory", "contrastive.SlangGenTrainer.preprocess_contrastive", "numpy.save", "numpy.save", "print", "print"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.create_directory", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.preprocess_contrastive"], ["", "def", "preprocess_slang_data", "(", "self", ",", "slang_ind", ",", "fold_name", "=", "'default'", ",", "skip_steps", "=", "[", "]", ")", ":", "\n", "\n", "        ", "out_dir", "=", "self", ".", "out_dir", "+", "'/'", "+", "fold_name", "\n", "create_directory", "(", "out_dir", ")", "\n", "out_dir", "+=", "'/'", "\n", "\n", "# Generate contrastive pairs for training", "\n", "if", "'contrastive'", "not", "in", "skip_steps", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "\"Generating contrative pairs...\"", ")", "\n", "", "contrastive_pairs_train", ",", "contrastive_pairs_dev", "=", "self", ".", "preprocess_contrastive", "(", "slang_ind", ")", "\n", "np", ".", "save", "(", "out_dir", "+", "'contrastive_train.npy'", ",", "contrastive_pairs_train", ")", "\n", "np", ".", "save", "(", "out_dir", "+", "'contrastive_dev.npy'", ",", "contrastive_pairs_dev", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "\"Complete!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.load_preprocessed_data": [[66, 77], ["numpy.load", "numpy.load"], "methods", ["None"], ["", "", "", "def", "load_preprocessed_data", "(", "self", ",", "fold_name", "=", "'default'", ",", "skip_steps", "=", "[", "]", ")", ":", "\n", "\n", "        ", "out_dir", "=", "self", ".", "out_dir", "+", "'/'", "+", "fold_name", "+", "'/'", "\n", "\n", "preproc_data", "=", "{", "}", "\n", "\n", "if", "'contrastive'", "not", "in", "skip_steps", ":", "\n", "            ", "preproc_data", "[", "'cp_train'", "]", "=", "np", ".", "load", "(", "out_dir", "+", "'contrastive_train.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "preproc_data", "[", "'cp_dev'", "]", "=", "np", ".", "load", "(", "out_dir", "+", "'contrastive_dev.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "\n", "", "return", "preproc_data", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.load_sense_encoder": [[78, 85], ["encoder.SBertEncoder"], "methods", ["None"], ["", "def", "load_sense_encoder", "(", "self", ",", "model_name", ",", "model_path", ")", ":", "\n", "\n", "        ", "if", "self", ".", "se_model_name", "==", "model_name", ":", "\n", "            ", "return", "self", ".", "sense_encoder", "\n", "\n", "", "self", ".", "sense_encoder", "=", "SBertEncoder", "(", "sbert_model_name", "=", "model_name", ",", "name", "=", "model_path", ")", "\n", "self", ".", "se_model_name", "=", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.get_trained_embeddings": [[87, 93], ["contrastive.SlangGenTrainer.load_sense_encoder", "contrastive.SlangGenTrainer.get_sense_embeddings"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.load_sense_encoder", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.get_sense_embeddings"], ["", "def", "get_trained_embeddings", "(", "self", ",", "slang_ind", ",", "fold_name", "=", "'default'", ",", "model_path", "=", "'SBERT_contrastive'", ")", ":", "\n", "\n", "        ", "model_name", "=", "self", ".", "out_dir", "+", "'/'", "+", "fold_name", "+", "'/SBERT_data/'", "+", "model_path", "\n", "self", ".", "load_sense_encoder", "(", "model_name", ",", "model_path", ")", "\n", "\n", "return", "self", ".", "get_sense_embeddings", "(", "slang_ind", ",", "fold_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.get_sense_embeddings": [[94, 108], ["contrastive.SlangGenTrainer.sense_encoder.encode_dataset", "numpy.savez", "print", "print"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.SenseEncoder.encode_dataset"], ["", "def", "get_sense_embeddings", "(", "self", ",", "slang_ind", ",", "fold_name", "=", "'default'", ")", ":", "\n", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"Encoding sense definitions...\"", ")", "\n", "\n", "", "out_dir", "=", "self", ".", "out_dir", "+", "'/'", "+", "fold_name", "+", "'/'", "\n", "\n", "sense_embeds", "=", "self", ".", "sense_encoder", ".", "encode_dataset", "(", "self", ".", "dataset", ",", "slang_ind", ")", "\n", "np", ".", "savez", "(", "out_dir", "+", "\"sum_embed_\"", "+", "self", ".", "sense_encoder", ".", "name", "+", "\".npz\"", ",", "train", "=", "sense_embeds", "[", "'train'", "]", ",", "dev", "=", "sense_embeds", "[", "'dev'", "]", ",", "test", "=", "sense_embeds", "[", "'test'", "]", ",", "standard", "=", "sense_embeds", "[", "'standard'", "]", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"Complete!\"", ")", "\n", "\n", "", "return", "sense_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.get_testtime_embeddings": [[109, 115], ["contrastive.SlangGenTrainer.load_sense_encoder", "contrastive.SlangGenTrainer.sense_encoder.encode_sentences"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.load_sense_encoder", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.SBertEncoder.encode_sentences"], ["", "def", "get_testtime_embeddings", "(", "self", ",", "slang_def_sents", ",", "fold_name", "=", "'default'", ",", "model_path", "=", "'SBERT_contrastive'", ")", ":", "\n", "\n", "        ", "model_name", "=", "self", ".", "out_dir", "+", "'/'", "+", "fold_name", "+", "'/SBERT_data/'", "+", "model_path", "\n", "self", ".", "load_sense_encoder", "(", "model_name", ",", "model_path", ")", "\n", "\n", "return", "self", ".", "sense_encoder", ".", "encode_sentences", "(", "slang_def_sents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.train_contrastive_model": [[117, 148], ["contrastive.SlangGenTrainer.prep_contrastive_training", "sentence_transformers.readers.TripletReader", "sentence_transformers.SentenceTransformer", "sentence_transformers.SentencesDataset", "torch.utils.data.DataLoader", "sentence_transformers.losses.TripletLoss", "sentence_transformers.SentencesDataset", "torch.utils.data.DataLoader", "sentence_transformers.evaluation.TripletEvaluator", "int", "sentence_transformers.SentenceTransformer.fit", "sentence_transformers.readers.TripletReader.get_examples", "sentence_transformers.readers.TripletReader.get_examples", "len", "len"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.prep_contrastive_training"], ["", "def", "train_contrastive_model", "(", "self", ",", "slang_ind", ",", "params", "=", "None", ",", "fold_name", "=", "'default'", ")", ":", "\n", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "{", "'train_batch_size'", ":", "16", ",", "'num_epochs'", ":", "4", ",", "'triplet_margin'", ":", "1", ",", "'outpath'", ":", "'SBERT_contrastive'", "}", "\n", "\n", "", "self", ".", "prep_contrastive_training", "(", "slang_ind", ",", "fold_name", "=", "fold_name", ")", "\n", "\n", "out_dir", "=", "self", ".", "out_dir", "+", "'/'", "+", "fold_name", "+", "'/SBERT_data/'", "\n", "\n", "triplet_reader", "=", "TripletReader", "(", "out_dir", ",", "s1_col_idx", "=", "0", ",", "s2_col_idx", "=", "1", ",", "s3_col_idx", "=", "2", ",", "delimiter", "=", "','", ",", "has_header", "=", "True", ")", "\n", "output_path", "=", "out_dir", "+", "params", "[", "'outpath'", "]", "\n", "\n", "sbert_model", "=", "SentenceTransformer", "(", "'bert-base-nli-mean-tokens'", ")", "\n", "\n", "train_data", "=", "SentencesDataset", "(", "examples", "=", "triplet_reader", ".", "get_examples", "(", "'contrastive_train.csv'", ")", ",", "model", "=", "sbert_model", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "train_data", ",", "shuffle", "=", "True", ",", "batch_size", "=", "params", "[", "'train_batch_size'", "]", ")", "\n", "train_loss", "=", "losses", ".", "TripletLoss", "(", "model", "=", "sbert_model", ",", "triplet_margin", "=", "params", "[", "'triplet_margin'", "]", ")", "\n", "\n", "dev_data", "=", "SentencesDataset", "(", "examples", "=", "triplet_reader", ".", "get_examples", "(", "'contrastive_dev.csv'", ")", ",", "model", "=", "sbert_model", ")", "\n", "dev_dataloader", "=", "DataLoader", "(", "dev_data", ",", "shuffle", "=", "False", ",", "batch_size", "=", "params", "[", "'train_batch_size'", "]", ")", "\n", "evaluator", "=", "TripletEvaluator", "(", "dev_dataloader", ")", "\n", "\n", "warmup_steps", "=", "int", "(", "len", "(", "train_data", ")", "*", "params", "[", "'num_epochs'", "]", "/", "params", "[", "'train_batch_size'", "]", "*", "0.1", ")", "#10% of train data", "\n", "\n", "# Train the model", "\n", "sbert_model", ".", "fit", "(", "train_objectives", "=", "[", "(", "train_dataloader", ",", "train_loss", ")", "]", ",", "\n", "evaluator", "=", "evaluator", ",", "\n", "epochs", "=", "params", "[", "'num_epochs'", "]", ",", "\n", "evaluation_steps", "=", "len", "(", "dev_data", ")", ",", "\n", "warmup_steps", "=", "warmup_steps", ",", "\n", "output_path", "=", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.prep_contrastive_training": [[149, 191], ["util.create_directory", "contrastive.SlangGenTrainer.load_preprocessed_data", "contrastive.SlangGenTrainer.sample_triplets", "contrastive.SlangGenTrainer.sample_triplets", "numpy.save", "numpy.save", "range", "range", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame.to_csv", "pandas.DataFrame.to_csv", "print", "slang_def_sents.append", "print", "conv_def_sents.append", "simple_preprocess", "range", "range", "range", "range", "range", "range", "simple_preprocess"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.create_directory", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.load_preprocessed_data", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.sample_triplets", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.sample_triplets"], ["", "def", "prep_contrastive_training", "(", "self", ",", "slang_ind", ",", "fold_name", "=", "'default'", ")", ":", "\n", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"Generating triplet data for contrastive training...\"", ")", "\n", "\n", "", "out_dir", "=", "self", ".", "out_dir", "+", "'/'", "+", "fold_name", "+", "'/SBERT_data/'", "\n", "create_directory", "(", "out_dir", ")", "\n", "\n", "preproc_data", "=", "self", ".", "load_preprocessed_data", "(", "fold_name", "=", "fold_name", ")", "\n", "\n", "N_train", ",", "triplets", "=", "self", ".", "sample_triplets", "(", "preproc_data", "[", "'cp_train'", "]", ")", "\n", "N_dev", ",", "triplets_dev", "=", "self", ".", "sample_triplets", "(", "preproc_data", "[", "'cp_dev'", "]", ")", "\n", "\n", "np", ".", "save", "(", "out_dir", "+", "'triplets.npy'", ",", "triplets", ")", "\n", "np", ".", "save", "(", "out_dir", "+", "'triplets_dev.npy'", ",", "triplets_dev", ")", "\n", "\n", "slang_def_sents", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "dataset", ".", "N_total", ")", ":", "\n", "            ", "slang_def_sents", ".", "append", "(", "' '", ".", "join", "(", "simple_preprocess", "(", "self", ".", "dataset", ".", "slang_data", "[", "i", "]", ".", "def_sent", ")", ")", ")", "\n", "\n", "", "conv_def_sents", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "dataset", ".", "V", ")", ":", "\n", "            ", "word", "=", "self", ".", "dataset", ".", "vocab", "[", "i", "]", "\n", "for", "d", "in", "self", ".", "dataset", ".", "conv_data", "[", "word", "]", ".", "definitions", ":", "\n", "                ", "conv_def_sents", ".", "append", "(", "' '", ".", "join", "(", "simple_preprocess", "(", "d", "[", "'def'", "]", ")", ")", ")", "\n", "\n", "", "", "data_train", "=", "{", "'anchor'", ":", "[", "slang_def_sents", "[", "slang_ind", ".", "train", "[", "triplets", "[", "i", "]", "[", "0", "]", "]", "]", "for", "i", "in", "range", "(", "N_train", ")", "]", ",", "'positive'", ":", "[", "conv_def_sents", "[", "triplets", "[", "i", "]", "[", "1", "]", "]", "for", "i", "in", "range", "(", "N_train", ")", "]", ",", "'negative'", ":", "[", "conv_def_sents", "[", "triplets", "[", "i", "]", "[", "2", "]", "]", "for", "i", "in", "range", "(", "N_train", ")", "]", "}", "\n", "\n", "data_dev", "=", "{", "'anchor'", ":", "[", "slang_def_sents", "[", "slang_ind", ".", "dev", "[", "triplets_dev", "[", "i", "]", "[", "0", "]", "]", "]", "for", "i", "in", "range", "(", "N_dev", ")", "]", ",", "'positive'", ":", "[", "conv_def_sents", "[", "triplets_dev", "[", "i", "]", "[", "1", "]", "]", "for", "i", "in", "range", "(", "N_dev", ")", "]", ",", "'negative'", ":", "[", "conv_def_sents", "[", "triplets_dev", "[", "i", "]", "[", "2", "]", "]", "for", "i", "in", "range", "(", "N_dev", ")", "]", "}", "\n", "\n", "df_train", "=", "pd", ".", "DataFrame", "(", "data", "=", "data_train", ")", "\n", "df_dev", "=", "pd", ".", "DataFrame", "(", "data", "=", "data_dev", ")", "\n", "\n", "df_train", ".", "to_csv", "(", "out_dir", "+", "'contrastive_train.csv'", ",", "index", "=", "False", ")", "\n", "df_dev", ".", "to_csv", "(", "out_dir", "+", "'contrastive_dev.csv'", ",", "index", "=", "False", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"Complete!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.sample_triplets": [[192, 224], ["range", "len", "numpy.concatenate", "print", "numpy.asarray", "numpy.random.choice", "triplets.append", "Triplet"], "methods", ["None"], ["", "", "def", "sample_triplets", "(", "self", ",", "contrast_data", ")", ":", "\n", "\n", "# Maximum number of positive pairs from the same positive definition", "\n", "        ", "MAX_PER_POSDEF", "=", "1000", "\n", "\n", "triplets", "=", "[", "]", "\n", "\n", "N_def", "=", "contrast_data", ".", "shape", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "N_def", ")", ":", "\n", "            ", "anchor", "=", "i", "\n", "if", "contrast_data", "[", "i", "]", "[", "'negative'", "]", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "pre_pos", "=", "-", "100", "\n", "num_d", "=", "0", "\n", "\n", "for", "positive", "in", "np", ".", "concatenate", "(", "[", "contrast_data", "[", "i", "]", "[", "'positive'", "]", ",", "contrast_data", "[", "i", "]", "[", "'neighbors'", "]", "]", ")", ":", "\n", "                ", "if", "positive", "!=", "pre_pos", "+", "1", ":", "\n", "                    ", "num_d", "=", "MAX_PER_POSDEF", "\n", "", "pre_pos", "=", "positive", "\n", "if", "num_d", ">", "0", ":", "\n", "                    ", "num_d", "-=", "1", "\n", "\n", "negative", "=", "np", ".", "random", ".", "choice", "(", "contrast_data", "[", "i", "]", "[", "'negative'", "]", ")", "\n", "triplets", ".", "append", "(", "Triplet", "(", "anchor", ",", "positive", ",", "negative", ")", ")", "\n", "\n", "", "", "", "N_triplets", "=", "len", "(", "triplets", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"Sampled %d Triplets\"", "%", "N_triplets", ")", "\n", "\n", "", "return", "N_triplets", ",", "np", ".", "asarray", "(", "triplets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.preprocess_word_dist": [[225, 248], ["numpy.zeros", "range", "scipy.squareform", "scipy.pdist", "contrastive.SlangGenTrainer.word_encoder.norm_embed", "contrastive.SlangGenTrainer.dataset.vocab[].split", "len", "numpy.zeros", "contrastive.SlangGenTrainer.word_encoder.norm_embed", "float", "contrastive.SlangGenTrainer.word_encoder.norm_embed"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.WordEncoder.norm_embed", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.WordEncoder.norm_embed", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.encoder.WordEncoder.norm_embed"], ["", "def", "preprocess_word_dist", "(", "self", ")", ":", "\n", "\n", "        ", "vocab_conv_embeds", "=", "np", ".", "zeros", "(", "(", "self", ".", "dataset", ".", "V", ",", "self", ".", "word_encoder", ".", "E", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "dataset", ".", "V", ")", ":", "\n", "            ", "if", "self", ".", "dataset", ".", "vocab", "[", "i", "]", "in", "self", ".", "word_encoder", ".", "vocab", ":", "\n", "                ", "vocab_conv_embeds", "[", "i", ",", ":", "]", "=", "self", ".", "word_encoder", ".", "norm_embed", "(", "self", ".", "dataset", ".", "vocab", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "c_words", "=", "self", ".", "dataset", ".", "vocab", "[", "i", "]", ".", "split", "(", "' '", ")", "\n", "count", "=", "0", "\n", "if", "len", "(", "c_words", ")", ">", "1", ":", "\n", "                    ", "embed", "=", "np", ".", "zeros", "(", "self", ".", "word_encoder", ".", "E", ")", "\n", "for", "w", "in", "c_words", ":", "\n", "                        ", "if", "w", "in", "self", ".", "word_encoder", ".", "vocab", ":", "\n", "                            ", "embed", "=", "embed", "+", "self", ".", "word_encoder", ".", "norm_embed", "(", "w", ")", "\n", "count", "+=", "1", "\n", "", "", "if", "count", ">", "0", ":", "\n", "                        ", "vocab_conv_embeds", "[", "i", ",", ":", "]", "=", "embed", "/", "float", "(", "count", ")", "\n", "\n", "", "", "if", "count", "==", "0", ":", "\n", "                    ", "vocab_conv_embeds", "[", "i", ",", ":", "]", "=", "self", ".", "word_encoder", ".", "norm_embed", "(", "'unk'", ")", "\n", "\n", "", "", "", "return", "dist", ".", "squareform", "(", "dist", ".", "pdist", "(", "vocab_conv_embeds", ",", "metric", "=", "'cosine'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.preprocess_contrastive": [[249, 264], ["int", "min", "numpy.zeros", "numpy.zeros", "range", "contrastive.SlangGenTrainer.compute_contrastive", "contrastive.SlangGenTrainer.compute_contrastive", "numpy.ceil", "numpy.argsort", "numpy.argsort", "max"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.compute_contrastive", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.compute_contrastive"], ["", "def", "preprocess_contrastive", "(", "self", ",", "slang_ind", ")", ":", "\n", "\n", "        ", "Neigh_pivot", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "dataset", ".", "V", "/", "5.0", ")", ")", "\n", "N_neighbor", "=", "min", "(", "self", ".", "MAX_NEIGHBOR", ",", "self", ".", "dataset", ".", "V", "-", "Neigh_pivot", ")", "\n", "\n", "self", ".", "neighbors", "=", "np", ".", "zeros", "(", "(", "self", ".", "dataset", ".", "V", ",", "N_neighbor", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "neighbors_close", "=", "np", ".", "zeros", "(", "(", "self", ".", "dataset", ".", "V", ",", "5", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "dataset", ".", "V", ")", ":", "\n", "            ", "self", ".", "neighbors", "[", "i", ",", ":", "]", "=", "np", ".", "argsort", "(", "self", ".", "word_dist", "[", "i", ",", ":", "]", ")", "[", "max", "(", "Neigh_pivot", ",", "self", ".", "dataset", ".", "V", "-", "self", ".", "MAX_NEIGHBOR", ")", ":", "]", "\n", "self", ".", "neighbors_close", "[", "i", ",", ":", "]", "=", "np", ".", "argsort", "(", "self", ".", "word_dist", "[", "i", ",", ":", "]", ")", "[", "1", ":", "6", "]", "\n", "\n", "", "contrastive_pairs_train", "=", "self", ".", "compute_contrastive", "(", "slang_ind", ".", "train", ")", "\n", "contrastive_pairs_dev", "=", "self", ".", "compute_contrastive", "(", "slang_ind", ".", "dev", ")", "\n", "\n", "return", "contrastive_pairs_train", ",", "contrastive_pairs_dev", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.compute_contrastive": [[265, 302], ["numpy.empty", "tqdm.trange", "numpy.asarray", "numpy.asarray", "numpy.asarray", "range", "neigh_defs.extend", "range", "range", "util.is_close_def", "util.is_close_def", "negatives.append", "range"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.is_close_def", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.is_close_def"], ["", "def", "compute_contrastive", "(", "self", ",", "ind", ")", ":", "\n", "\n", "        ", "def", "get_conv_definds", "(", "word_ind", ")", ":", "\n", "            ", "return", "[", "self", ".", "conv_acc", "[", "word_ind", "]", "+", "j", "for", "j", "in", "range", "(", "self", ".", "conv_lens", "[", "word_ind", "]", ")", "]", "\n", "\n", "", "contrast_data", "=", "np", ".", "empty", "(", "ind", ".", "shape", "[", "0", "]", ",", "dtype", "=", "object", ")", "\n", "\n", "for", "i", "in", "trange", "(", "ind", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "word_ind", "=", "self", ".", "dataset", ".", "vocab_ids", "[", "ind", "[", "i", "]", "]", "\n", "contrast_data", "[", "i", "]", "=", "{", "}", "\n", "\n", "positives", "=", "[", "self", ".", "conv_acc", "[", "word_ind", "]", "+", "j", "for", "j", "in", "range", "(", "self", ".", "conv_lens", "[", "word_ind", "]", ")", "]", "\n", "\n", "negatives", "=", "[", "]", "\n", "conv_self", "=", "[", "d", "[", "'def'", "]", "for", "d", "in", "self", ".", "dataset", ".", "conv_data", "[", "self", ".", "dataset", ".", "vocab", "[", "word_ind", "]", "]", ".", "definitions", "]", "\n", "for", "far_word", "in", "self", ".", "neighbors", "[", "word_ind", "]", ":", "\n", "                ", "conv_defs", "=", "[", "d", "[", "'def'", "]", "for", "d", "in", "self", ".", "dataset", ".", "conv_data", "[", "self", ".", "dataset", ".", "vocab", "[", "far_word", "]", "]", ".", "definitions", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "conv_lens", "[", "far_word", "]", ")", ":", "\n", "                    ", "cand", "=", "self", ".", "conv_acc", "[", "far_word", "]", "+", "j", "\n", "if", "not", "is_close_def", "(", "self", ".", "dataset", ".", "slang_data", "[", "ind", "[", "i", "]", "]", ".", "def_sent", ",", "conv_defs", "[", "j", "]", ",", "threshold", "=", "0.2", ")", ":", "\n", "                        ", "has_close_cf_def", "=", "False", "\n", "for", "self_def", "in", "conv_self", ":", "\n", "                            ", "if", "is_close_def", "(", "self_def", ",", "conv_defs", "[", "j", "]", ",", "threshold", "=", "0.2", ")", ":", "\n", "                                ", "has_close_cf_def", "=", "True", "\n", "break", "\n", "", "", "if", "not", "has_close_cf_def", ":", "\n", "                            ", "negatives", ".", "append", "(", "cand", ")", "\n", "\n", "", "", "", "", "neigh_defs", "=", "[", "]", "\n", "for", "close_word", "in", "self", ".", "neighbors_close", "[", "word_ind", "]", ":", "\n", "                ", "neigh_defs", ".", "extend", "(", "[", "self", ".", "conv_acc", "[", "close_word", "]", "+", "j", "for", "j", "in", "range", "(", "self", ".", "conv_lens", "[", "close_word", "]", ")", "]", ")", "\n", "\n", "", "contrast_data", "[", "i", "]", "[", "'positive'", "]", "=", "np", ".", "asarray", "(", "positives", ")", "\n", "contrast_data", "[", "i", "]", "[", "'negative'", "]", "=", "np", ".", "asarray", "(", "negatives", ")", "\n", "contrast_data", "[", "i", "]", "[", "'neighbors'", "]", "=", "np", ".", "asarray", "(", "neigh_defs", ")", "\n", "\n", "", "return", "contrast_data", "", "", "", ""]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.model.SlangGenModel.__init__": [[16, 26], ["numpy.stack"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "trainer", ",", "data_dir", "=", "''", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "trainer", "=", "trainer", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "self", ".", "vocab", "=", "trainer", ".", "dataset", ".", "vocab", "\n", "self", ".", "labels", "=", "trainer", ".", "dataset", ".", "vocab_ids", "\n", "\n", "self", ".", "cf_feats", "=", "np", ".", "stack", "(", "[", "self", ".", "trainer", ".", "word_dist", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.model.SlangGenModel.train_contrastive": [[27, 35], ["model.SlangGenModel.trainer.preprocess_slang_data", "model.SlangGenModel.trainer.train_contrastive_model", "model.SlangGenModel.trainer.get_trained_embeddings"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.preprocess_slang_data", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.train_contrastive_model", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.get_trained_embeddings"], ["", "def", "train_contrastive", "(", "self", ",", "slang_ind", ",", "fold_name", "=", "'default'", ",", "params", "=", "None", ")", ":", "\n", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "self", ".", "DEFAULT_PARAMS", "\n", "\n", "", "self", ".", "trainer", ".", "preprocess_slang_data", "(", "slang_ind", ",", "fold_name", "=", "fold_name", ")", "\n", "self", ".", "trainer", ".", "train_contrastive_model", "(", "slang_ind", ",", "fold_name", "=", "fold_name", ",", "params", "=", "params", "[", "'contr_params'", "]", ")", "\n", "self", ".", "trainer", ".", "get_trained_embeddings", "(", "slang_ind", ",", "fold_name", "=", "fold_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.model.SlangGenModel.train_categorization": [[36, 65], ["numpy.load", "model.SlangGenModel.load_examplar_embeddings", "numpy.concatenate", "numpy.concatenate", "CatGO.categorize.Categorizer", "util.create_directory", "CatGO.categorize.Categorizer.set_datadir", "CatGO.categorize.Categorizer.run_categorization", "CatGO.categorize.Categorizer.add_prior"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.model.SlangGenModel.load_examplar_embeddings", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.create_directory"], ["", "def", "train_categorization", "(", "self", ",", "slang_ind", ",", "fold_name", "=", "'default'", ",", "params", "=", "None", ")", ":", "\n", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "self", ".", "DEFAULT_PARAMS", "\n", "\n", "", "data_dir", "=", "self", ".", "data_dir", "+", "'/'", "+", "fold_name", "+", "'/'", "\n", "\n", "def_embeds", "=", "np", ".", "load", "(", "data_dir", "+", "'sum_embed_'", "+", "params", "[", "'embed_name'", "]", "+", "'.npz'", ")", "\n", "E", "=", "def_embeds", "[", "'train'", "]", ".", "shape", "[", "1", "]", "\n", "\n", "conv_embed", "=", "def_embeds", "[", "'standard'", "]", "\n", "\n", "vocab_embeds", "=", "self", ".", "load_examplar_embeddings", "(", "fold_name", "=", "fold_name", ",", "def_embeds", "=", "def_embeds", ",", "params", "=", "params", ")", "\n", "\n", "train_dev_inds", "=", "np", ".", "concatenate", "(", "(", "slang_ind", ".", "train", ",", "slang_ind", ".", "dev", ")", ")", "\n", "\n", "slang_def_embeds", "=", "np", ".", "concatenate", "(", "[", "def_embeds", "[", "'train'", "]", ",", "def_embeds", "[", "'dev'", "]", "]", ")", "\n", "labels", "=", "self", ".", "labels", "[", "train_dev_inds", "]", "\n", "\n", "categorizer", "=", "Categorizer", "(", "self", ".", "vocab", ",", "vocab_embeds", ",", "self", ".", "cf_feats", ")", "\n", "\n", "model_dir", "=", "data_dir", "+", "params", "[", "'out_name'", "]", "+", "'/'", "\n", "create_directory", "(", "model_dir", ")", "\n", "categorizer", ".", "set_datadir", "(", "model_dir", ")", "\n", "\n", "if", "params", "[", "'prior_name'", "]", "!=", "'uniform'", ":", "\n", "            ", "categorizer", ".", "add_prior", "(", "params", "[", "'prior_name'", "]", ",", "params", "[", "'prior'", "]", ")", "\n", "\n", "", "categorizer", ".", "run_categorization", "(", "slang_def_embeds", ",", "labels", ",", "models", "=", "[", "params", "[", "'model'", "]", "]", ",", "prior", "=", "params", "[", "'prior_name'", "]", ",", "mode", "=", "'train'", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.model.SlangGenModel.load_examplar_embeddings": [[66, 91], ["range", "numpy.load", "len", "numpy.zeros", "range", "vocab_embeds.append"], "methods", ["None"], ["", "def", "load_examplar_embeddings", "(", "self", ",", "fold_name", "=", "'default'", ",", "def_embeds", "=", "None", ",", "params", "=", "None", ")", ":", "\n", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "self", ".", "DEFAULT_PARAMS", "\n", "\n", "", "data_dir", "=", "self", ".", "data_dir", "+", "'/'", "+", "fold_name", "+", "'/'", "\n", "\n", "if", "def_embeds", "is", "None", ":", "\n", "            ", "def_embeds", "=", "np", ".", "load", "(", "data_dir", "+", "'sum_embed_'", "+", "params", "[", "'embed_name'", "]", "+", "'.npz'", ")", "\n", "\n", "", "E", "=", "def_embeds", "[", "'train'", "]", ".", "shape", "[", "1", "]", "\n", "\n", "conv_embed", "=", "def_embeds", "[", "'standard'", "]", "\n", "\n", "vocab_embeds", "=", "[", "]", "\n", "c", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "trainer", ".", "dataset", ".", "V", ")", ":", "\n", "            ", "num_def", "=", "len", "(", "self", ".", "trainer", ".", "dataset", ".", "conv_data", "[", "self", ".", "vocab", "[", "i", "]", "]", ".", "definitions", ")", "\n", "embed", "=", "np", ".", "zeros", "(", "(", "num_def", ",", "E", ")", ")", "\n", "for", "j", "in", "range", "(", "num_def", ")", ":", "\n", "                ", "embed", "[", "j", ",", ":", "]", "=", "conv_embed", "[", "c", ",", ":", "]", "\n", "c", "+=", "1", "\n", "", "vocab_embeds", ".", "append", "(", "embed", ")", "\n", "\n", "", "return", "vocab_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.model.SlangGenModel.predict_testset": [[92, 106], ["numpy.load", "model.SlangGenModel.predict"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.model.SlangGenModel.predict"], ["", "def", "predict_testset", "(", "self", ",", "slang_ind", ",", "fold_name", "=", "'default'", ",", "params", "=", "None", ")", ":", "\n", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "self", ".", "DEFAULT_PARAMS", "\n", "\n", "", "data_dir", "=", "self", ".", "data_dir", "+", "'/'", "+", "fold_name", "+", "'/'", "\n", "\n", "def_embeds", "=", "np", ".", "load", "(", "data_dir", "+", "'sum_embed_'", "+", "params", "[", "'embed_name'", "]", "+", "'.npz'", ")", "\n", "E", "=", "def_embeds", "[", "'train'", "]", ".", "shape", "[", "1", "]", "\n", "\n", "slang_def_embeds", "=", "def_embeds", "[", "'test'", "]", "\n", "labels", "=", "self", ".", "labels", "[", "slang_ind", ".", "test", "]", "\n", "\n", "self", ".", "predict", "(", "slang_def_embeds", ",", "labels", ",", "fold_name", "=", "fold_name", ",", "mode", "=", "'test'", ",", "params", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.model.SlangGenModel.predict_from_definitions": [[107, 117], ["model.SlangGenModel.trainer.get_testtime_embeddings", "model.SlangGenModel.predict"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.contrastive.SlangGenTrainer.get_testtime_embeddings", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.model.SlangGenModel.predict"], ["", "def", "predict_from_definitions", "(", "self", ",", "slang_def_sents", ",", "labels", ",", "fold_name", "=", "'default'", ",", "mode", "=", "'test'", ",", "params", "=", "None", ")", ":", "\n", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "self", ".", "DEFAULT_PARAMS", "\n", "\n", "", "data_dir", "=", "self", ".", "data_dir", "+", "'/'", "+", "fold_name", "+", "'/'", "\n", "\n", "slang_def_embeds", "=", "self", ".", "trainer", ".", "get_testtime_embeddings", "(", "slang_def_sents", ",", "fold_name", "=", "fold_name", ")", "\n", "\n", "self", ".", "predict", "(", "slang_def_embeds", ",", "labels", ",", "fold_name", "=", "fold_name", ",", "mode", "=", "mode", ",", "params", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.model.SlangGenModel.predict": [[118, 136], ["model.SlangGenModel.load_examplar_embeddings", "CatGO.categorize.Categorizer", "util.create_directory", "CatGO.categorize.Categorizer.set_datadir", "CatGO.categorize.Categorizer.run_categorization", "CatGO.categorize.Categorizer.add_prior"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.model.SlangGenModel.load_examplar_embeddings", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.create_directory"], ["", "def", "predict", "(", "self", ",", "slang_def_embeds", ",", "labels", ",", "fold_name", "=", "'default'", ",", "mode", "=", "'test'", ",", "params", "=", "None", ")", ":", "\n", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "self", ".", "DEFAULT_PARAMS", "\n", "\n", "", "data_dir", "=", "self", ".", "data_dir", "+", "'/'", "+", "fold_name", "+", "'/'", "\n", "\n", "vocab_embeds", "=", "self", ".", "load_examplar_embeddings", "(", "fold_name", "=", "fold_name", ",", "params", "=", "params", ")", "\n", "categorizer", "=", "Categorizer", "(", "self", ".", "vocab", ",", "vocab_embeds", ",", "self", ".", "cf_feats", ")", "\n", "\n", "model_dir", "=", "data_dir", "+", "params", "[", "'out_name'", "]", "+", "'/'", "\n", "create_directory", "(", "model_dir", ")", "\n", "categorizer", ".", "set_datadir", "(", "model_dir", ")", "\n", "\n", "if", "params", "[", "'prior_name'", "]", "!=", "'uniform'", ":", "\n", "            ", "categorizer", ".", "add_prior", "(", "params", "[", "'prior_name'", "]", ",", "params", "[", "'prior'", "]", ")", "\n", "\n", "", "categorizer", ".", "run_categorization", "(", "slang_def_embeds", ",", "labels", ",", "models", "=", "[", "params", "[", "'model'", "]", "]", ",", "prior", "=", "params", "[", "'prior_name'", "]", ",", "mode", "=", "mode", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.model.SlangGenModel.get_results": [[137, 143], ["numpy.load"], "methods", ["None"], ["", "def", "get_results", "(", "self", ",", "fold_name", "=", "'default'", ",", "mode", "=", "'train'", ",", "params", "=", "None", ")", ":", "\n", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "self", ".", "DEFAULT_PARAMS", "\n", "\n", "", "return", "np", ".", "load", "(", "self", ".", "data_dir", "+", "'/'", "+", "fold_name", "+", "'/'", "+", "params", "[", "'out_name'", "]", "+", "'/'", "+", "'l_'", "+", "params", "[", "'model'", "]", "+", "'_'", "+", "params", "[", "'prior_name'", "]", "+", "'_'", "+", "mode", "+", "'.npy'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.dataloader.ConvDataset.__init__": [[11, 20], ["dataloader.ConvDataset.load_data", "len", "len"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.dataloader.Urban_Dataset.load_data"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "self", ".", "entries", ",", "self", ".", "vocab", "=", "self", ".", "load_data", "(", "data_path", ")", "\n", "\n", "self", ".", "N_total", "=", "0", "\n", "for", "e", "in", "self", ".", "entries", ":", "\n", "            ", "self", ".", "N_total", "+=", "len", "(", "e", ".", "definitions", ")", "\n", "", "self", ".", "V", "=", "len", "(", "self", ".", "vocab", ")", "\n", "\n", "self", ".", "data", "=", "{", "d", ".", "word", ":", "d", "for", "d", "in", "self", ".", "entries", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.dataloader.ConvDataset.load_data": [[21, 24], ["NotImplementedError"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "load_data", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.dataloader.ConvDataset.__str__": [[25, 31], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "out", "=", "\"\"", "\n", "out", "+=", "\"Dataset Name: \"", "+", "\"\\n\"", "\n", "out", "+=", "\"Total Definition Entries: %d\"", "%", "self", ".", "N_total", "+", "\"\\n\"", "\n", "out", "+=", "\"Vocab Size: %d\"", "%", "self", ".", "V", "+", "\"\\n\"", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.dataloader.WN_Dataset.load_data": [[34, 38], ["numpy.load", "set"], "methods", ["None"], ["    ", "def", "load_data", "(", "self", ",", "data_path", ")", ":", "\n", "        ", "data_WN", "=", "np", ".", "load", "(", "data_path", ",", "allow_pickle", "=", "True", ")", "\n", "vocab_WN", "=", "set", "(", "[", "w", ".", "word", "for", "w", "in", "data_WN", "]", ")", "\n", "return", "data_WN", ",", "vocab_WN", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.dataloader.SlangDataset.__init__": [[41, 61], ["set", "dataloader.SlangDataset.process_entries", "len", "set", "numpy.asarray", "numpy.asarray", "len", "str", "vocab.append", "set.add", "range", "len", "range"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.dataloader.SlangDataset.process_entries"], ["    ", "def", "__init__", "(", "self", ",", "slang_path", ",", "conv_dataset", ")", ":", "\n", "\n", "        ", "self", ".", "meta_set", "=", "set", "(", ")", "\n", "\n", "self", ".", "slang_data", ",", "self", ".", "conv_data", "=", "self", ".", "process_entries", "(", "slang_path", ",", "conv_dataset", ")", "\n", "\n", "self", ".", "N_total", "=", "len", "(", "self", ".", "slang_data", ")", "\n", "\n", "vocab", "=", "[", "]", "\n", "vocab_set", "=", "set", "(", ")", "\n", "for", "d", "in", "self", ".", "slang_data", ":", "\n", "            ", "word", "=", "str", "(", "d", ".", "word", ")", "\n", "if", "word", "not", "in", "vocab_set", ":", "\n", "                ", "vocab", ".", "append", "(", "word", ")", "\n", "vocab_set", ".", "add", "(", "word", ")", "\n", "", "", "self", ".", "vocab", "=", "np", ".", "asarray", "(", "vocab", ")", "\n", "self", ".", "word2id", "=", "{", "self", ".", "vocab", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "vocab", ")", ")", "}", "\n", "self", ".", "vocab_ids", "=", "np", ".", "asarray", "(", "[", "self", ".", "word2id", "[", "self", ".", "slang_data", "[", "i", "]", ".", "word", "]", "for", "i", "in", "range", "(", "self", ".", "N_total", ")", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "self", ".", "V", "=", "len", "(", "self", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.dataloader.SlangDataset.has_meta": [[62, 64], ["None"], "methods", ["None"], ["", "def", "has_meta", "(", "self", ",", "attribute", ")", ":", "\n", "        ", "return", "attribute", "in", "self", ".", "meta_set", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.dataloader.SlangDataset.load_data": [[65, 68], ["NotImplementedError"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "load_data", "(", "self", ",", "slang_path", ",", "conv_dataset", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.dataloader.SlangDataset.process_entries": [[69, 78], ["dataloader.SlangDataset.load_data", "util.acronym_check", "util.has_close_conv_def", "str"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.dataloader.Urban_Dataset.load_data", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.acronym_check", "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.has_close_conv_def"], ["", "def", "process_entries", "(", "self", ",", "slang_path", ",", "conv_dataset", ")", ":", "\n", "        ", "slang_entries", "=", "self", ".", "load_data", "(", "slang_path", ",", "conv_dataset", ")", "\n", "\n", "conv_data", "=", "conv_dataset", ".", "data", "\n", "\n", "slang_data", "=", "[", "d", "for", "d", "in", "slang_entries", "if", "not", "acronym_check", "(", "d", ")", "]", "\n", "slang_data", "=", "[", "d", "for", "d", "in", "slang_data", "if", "not", "has_close_conv_def", "(", "str", "(", "d", ".", "word", ")", ",", "d", ".", "def_sent", ",", "conv_data", ")", "]", "\n", "\n", "return", "slang_data", ",", "conv_data", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.dataloader.SlangDataset.__str__": [[79, 85], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "out", "=", "\"\"", "\n", "out", "+=", "\"Dataset Name: \"", "+", "\"\\n\"", "\n", "out", "+=", "\"Total Definition Entries: %d\"", "%", "self", ".", "N_total", "+", "\"\\n\"", "\n", "out", "+=", "\"Vocab Size: %d\"", "%", "self", ".", "V", "+", "\"\\n\"", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.dataloader.Urban_Dataset.__init__": [[88, 90], ["dataloader.SlangDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.Word.__init__"], ["    ", "def", "__init__", "(", "self", ",", "slang_path", ",", "conv_dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "slang_path", ",", "conv_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.dataloader.Urban_Dataset.load_data": [[91, 104], ["numpy.load", "re.compile", "re.compile", "SlangEntry", "dataloader.Urban_Dataset.load_data.process_def"], "methods", ["None"], ["", "def", "load_data", "(", "self", ",", "slang_path", ",", "conv_dataset", ")", ":", "\n", "\n", "        ", "data_Urban_raw", "=", "np", ".", "load", "(", "slang_path", ",", "allow_pickle", "=", "True", ")", "\n", "\n", "re_hex", "=", "re", ".", "compile", "(", "r\"\\\\x[a-f0-9][a-f0-9]\"", ")", "\n", "re_spacechar", "=", "re", ".", "compile", "(", "r\"\\\\(n|t)\"", ")", "\n", "\n", "def", "process_def", "(", "d", ")", ":", "\n", "            ", "return", "SlangEntry", "(", "d", "[", "0", "]", ",", "re_spacechar", ".", "sub", "(", "''", ",", "re_hex", ".", "sub", "(", "''", ",", "d", "[", "1", "]", ")", ")", ",", "{", "}", ")", "\n", "\n", "", "data_Urban", "=", "[", "process_def", "(", "d", ")", "for", "d", "in", "data_Urban_raw", "if", "d", "[", "0", "]", "in", "conv_dataset", ".", "vocab", "]", "\n", "\n", "return", "data_Urban", "", "", "", ""]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.Word.__init__": [[83, 87], ["set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "word", ")", ":", "\n", "        ", "self", ".", "word", "=", "word", "\n", "self", ".", "pos_tags", "=", "set", "(", ")", "\n", "self", ".", "definitions", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.Word.attach_def": [[88, 92], ["util.Word.pos_tags.add", "util.Word.definitions.append"], "methods", ["None"], ["", "def", "attach_def", "(", "self", ",", "word_def", ",", "pos", ",", "sentences", ")", ":", "\n", "        ", "new_def", "=", "{", "'def'", ":", "word_def", ",", "'pos'", ":", "pos", ",", "'sents'", ":", "sentences", "}", "\n", "self", ".", "pos_tags", ".", "add", "(", "pos", ")", "\n", "self", ".", "definitions", ".", "append", "(", "new_def", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.tokenize": [[28, 30], ["re.compile().findall", "re.compile"], "function", ["None"], ["def", "tokenize", "(", "sentence", ")", ":", "\n", "    ", "return", "re", ".", "compile", "(", "r\"(?:^|(?<=\\s))\\S+(?=\\s|$)\"", ")", ".", "findall", "(", "sentence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.processTokens": [[31, 33], ["re.compile().sub", "re.compile"], "function", ["None"], ["", "def", "processTokens", "(", "fun", ",", "sentence", ")", ":", "\n", "    ", "return", "re", ".", "compile", "(", "r\"(?:^|(?<=\\s))\\S+(?=\\s|$)\"", ")", ".", "sub", "(", "fun", ",", "sentence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.normalize": [[34, 40], ["numpy.sum"], "function", ["None"], ["", "def", "normalize", "(", "array", ",", "axis", "=", "1", ")", ":", "\n", "    ", "denoms", "=", "np", ".", "sum", "(", "array", ",", "axis", "=", "axis", ")", "\n", "if", "axis", "==", "1", ":", "\n", "        ", "return", "array", "/", "denoms", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "if", "axis", "==", "0", ":", "\n", "        ", "return", "array", "/", "denoms", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.normalize_L2": [[41, 46], ["numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "", "def", "normalize_L2", "(", "array", ",", "axis", "=", "1", ")", ":", "\n", "    ", "if", "axis", "==", "1", ":", "\n", "        ", "return", "array", "/", "np", ".", "linalg", ".", "norm", "(", "array", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "if", "axis", "==", "0", ":", "\n", "        ", "return", "array", "/", "np", ".", "linalg", ".", "norm", "(", "array", ",", "axis", "=", "0", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.acronym_check": [[47, 55], ["str", "ord", "ord"], "function", ["None"], ["", "", "def", "acronym_check", "(", "entry", ")", ":", "\n", "    ", "if", "'acronym'", "in", "entry", ".", "def_sent", ":", "\n", "        ", "return", "True", "\n", "", "for", "c", "in", "str", "(", "entry", ".", "word", ")", ":", "\n", "        ", "if", "ord", "(", "c", ")", ">=", "65", "and", "ord", "(", "c", ")", "<=", "90", ":", "\n", "            ", "continue", "\n", "", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.is_close_def": [[56, 64], ["set", "gensim.utils.simple_preprocess", "len", "gensim.utils.simple_preprocess"], "function", ["None"], ["", "def", "is_close_def", "(", "query_sent", ",", "target_sent", ",", "threshold", "=", "0.5", ")", ":", "\n", "    ", "query_s", "=", "[", "w", "for", "w", "in", "simple_preprocess", "(", "query_sent", ")", "if", "w", "not", "in", "stopwords", "]", "\n", "target_s", "=", "set", "(", "[", "w", "for", "w", "in", "simple_preprocess", "(", "target_sent", ")", "if", "w", "not", "in", "stopwords", "]", ")", "\n", "overlap_c", "=", "0", "\n", "for", "word", "in", "query_s", ":", "\n", "        ", "if", "word", "in", "target_s", ":", "\n", "            ", "overlap_c", "+=", "1", "\n", "", "", "return", "overlap_c", ">=", "len", "(", "query_s", ")", "*", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.has_close_conv_def": [[65, 71], ["util.is_close_def"], "function", ["home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.is_close_def"], ["", "def", "has_close_conv_def", "(", "word", ",", "slang_def_sent", ",", "conv_data", ",", "threshold", "=", "0.5", ")", ":", "\n", "    ", "conv_sents", "=", "[", "d", "[", "'def'", "]", "for", "d", "in", "conv_data", "[", "word", "]", ".", "definitions", "]", "\n", "for", "conv_sent", "in", "conv_sents", ":", "\n", "        ", "if", "is_close_def", "(", "slang_def_sent", ",", "conv_sent", ",", "threshold", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.create_directory": [[72, 78], ["os.path.exists", "os.mkdir", "print"], "function", ["None"], ["", "def", "create_directory", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "", "except", "OSError", ":", "\n", "        ", "print", "(", "\"Creation of the directory %s failed\"", "%", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.get_rankings": [[95, 105], ["numpy.zeros", "numpy.zeros", "range", "numpy.argsort", "ranks[].tolist().index", "ranks[].tolist"], "function", ["None"], ["", "", "def", "get_rankings", "(", "l_model", ",", "inds", ",", "labels", ")", ":", "\n", "    ", "N", "=", "l_model", ".", "shape", "[", "0", "]", "\n", "ranks", "=", "np", ".", "zeros", "(", "l_model", ".", "shape", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "rankings", "=", "np", ".", "zeros", "(", "N", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "ranks", "[", "i", "]", "=", "np", ".", "argsort", "(", "l_model", "[", "i", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "rankings", "[", "i", "]", "=", "ranks", "[", "i", "]", ".", "tolist", "(", ")", ".", "index", "(", "labels", "[", "inds", "[", "i", "]", "]", ")", "+", "1", "\n", "\n", "", "return", "rankings", "\n", "\n"]], "home.repos.pwc.inspect_result.zhewei-sun_slanggen.Code.util.get_roc": [[106, 113], ["numpy.zeros", "range"], "function", ["None"], ["", "def", "get_roc", "(", "rankings", ",", "N_cat", ")", ":", "\n", "    ", "roc", "=", "np", ".", "zeros", "(", "N_cat", "+", "1", ")", "\n", "for", "rank", "in", "rankings", ":", "\n", "        ", "roc", "[", "rank", "]", "+=", "1", "\n", "", "for", "i", "in", "range", "(", "1", ",", "N_cat", "+", "1", ")", ":", "\n", "        ", "roc", "[", "i", "]", "=", "roc", "[", "i", "]", "+", "roc", "[", "i", "-", "1", "]", "\n", "", "return", "roc", "/", "rankings", ".", "shape", "[", "0", "]", "", "", ""]]}