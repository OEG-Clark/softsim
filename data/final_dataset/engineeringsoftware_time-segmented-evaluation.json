{"home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.get_option_as_boolean": [[14, 24], ["options.get", "str().lower", "str"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "get_option_as_boolean", "(", "cls", ",", "options", ",", "opt", ",", "default", "=", "False", ",", "pop", "=", "False", ")", "->", "bool", ":", "\n", "        ", "if", "opt", "not", "in", "options", ":", "\n", "            ", "return", "default", "\n", "", "else", ":", "\n", "# Due to limitations of CliUtils...", "\n", "            ", "value", "=", "options", ".", "get", "(", "opt", ",", "\"false\"", ")", "\n", "if", "pop", ":", "\n", "                ", "del", "options", "[", "opt", "]", "\n", "", "return", "str", "(", "value", ")", ".", "lower", "(", ")", "!=", "\"false\"", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.get_option_as_list": [[25, 36], ["copy.deepcopy", "isinstance"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "get_option_as_list", "(", "cls", ",", "options", ",", "opt", ",", "default", "=", "None", ",", "pop", "=", "False", ")", "->", "list", ":", "\n", "        ", "if", "opt", "not", "in", "options", ":", "\n", "            ", "return", "copy", ".", "deepcopy", "(", "default", ")", "\n", "", "else", ":", "\n", "            ", "lst", "=", "options", "[", "opt", "]", "\n", "if", "pop", ":", "\n", "                ", "del", "options", "[", "opt", "]", "\n", "", "if", "not", "isinstance", "(", "lst", ",", "list", ")", ":", "\n", "                ", "lst", "=", "[", "lst", "]", "\n", "", "return", "lst", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.get_option_and_pop": [[37, 43], ["options.pop", "copy.deepcopy"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "get_option_and_pop", "(", "cls", ",", "options", ",", "opt", ",", "default", "=", "None", ")", "->", "any", ":", "\n", "        ", "if", "opt", "in", "options", ":", "\n", "            ", "return", "options", ".", "pop", "(", "opt", ")", "\n", "", "else", ":", "\n", "            ", "return", "copy", ".", "deepcopy", "(", "default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.parse_cmd_options_for_type": [[67, 125], ["inspect.signature", "inspect.signature.parameters.values", "AssertionError", "Utils.get_option_as_boolean", "missing_options.append", "typing_inspect.get_origin", "Utils.get_option_as_list", "typing_inspect.get_origin", "set", "Utils.get_option_as_list", "typing_inspect.get_origin", "tuple", "unk_options.pop", "Utils.get_option_as_list"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.get_option_as_boolean", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.get_option_as_list", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.get_option_as_list", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.get_option_as_list"], ["@", "classmethod", "\n", "def", "parse_cmd_options_for_type", "(", "\n", "cls", ",", "\n", "options", ":", "dict", ",", "\n", "typ", ":", "type", ",", "\n", "excluding_params", ":", "List", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "dict", ",", "dict", ",", "list", "]", ":", "\n", "        ", "\"\"\"\n        Parses the commandline options (got from seutil.CliUtils) based on the parameters\n        and their types specified in typ.__init__.\n\n        :param options: the commandline options got from seutil.CliUtils.\n        :param typ: the type to initialize.\n        :param excluding_params: the list of parameters that are not expected to be\n            passed from commandline, by default [\"self\"].\n        :return: two dictionaries and a list:\n             a dictionary with options that can be sent to typ.__init__;\n             a dictionary that contains the remaining options;\n             a list of any missing options required by the typ.__init__.\n        \"\"\"", "\n", "if", "excluding_params", "is", "None", ":", "\n", "            ", "excluding_params", "=", "[", "\"self\"", "]", "\n", "\n", "", "accepted_options", "=", "{", "}", "\n", "unk_options", "=", "options", "\n", "missing_options", "=", "[", "]", "\n", "\n", "signature", "=", "inspect", ".", "signature", "(", "typ", ".", "__init__", ")", "\n", "for", "param", "in", "signature", ".", "parameters", ".", "values", "(", ")", ":", "\n", "            ", "if", "param", ".", "name", "in", "excluding_params", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "param", ".", "kind", "==", "Parameter", ".", "POSITIONAL_ONLY", "or", "param", ".", "kind", "==", "Parameter", ".", "VAR_KEYWORD", "or", "param", ".", "kind", "==", "Parameter", ".", "VAR_POSITIONAL", ":", "\n", "                ", "raise", "AssertionError", "(", "f\"Class {typ.__name__} should not have '/', '**' '*'\"", "\n", "f\" parameters in order to be configured from commandline\"", ")", "\n", "\n", "", "if", "param", ".", "name", "not", "in", "unk_options", ":", "\n", "                ", "if", "param", ".", "default", "==", "Parameter", ".", "empty", ":", "\n", "                    ", "missing_options", ".", "append", "(", "param", ".", "name", ")", "\n", "continue", "\n", "", "else", ":", "\n", "# No need to insert anything to model_options", "\n", "                    ", "continue", "\n", "\n", "", "", "if", "param", ".", "annotation", "==", "bool", ":", "\n", "                ", "accepted_options", "[", "param", ".", "name", "]", "=", "Utils", ".", "get_option_as_boolean", "(", "unk_options", ",", "param", ".", "name", ",", "pop", "=", "True", ")", "\n", "", "elif", "typing_inspect", ".", "get_origin", "(", "param", ".", "annotation", ")", "==", "list", ":", "\n", "                ", "accepted_options", "[", "param", ".", "name", "]", "=", "Utils", ".", "get_option_as_list", "(", "unk_options", ",", "param", ".", "name", ",", "pop", "=", "True", ")", "\n", "", "elif", "typing_inspect", ".", "get_origin", "(", "param", ".", "annotation", ")", "==", "set", ":", "\n", "                ", "accepted_options", "[", "param", ".", "name", "]", "=", "set", "(", "Utils", ".", "get_option_as_list", "(", "unk_options", ",", "param", ".", "name", ",", "pop", "=", "True", ")", ")", "\n", "", "elif", "typing_inspect", ".", "get_origin", "(", "param", ".", "annotation", ")", "==", "tuple", ":", "\n", "                ", "accepted_options", "[", "param", ".", "name", "]", "=", "tuple", "(", "Utils", ".", "get_option_as_list", "(", "unk_options", ",", "param", ".", "name", ",", "pop", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "accepted_options", "[", "param", ".", "name", "]", "=", "unk_options", ".", "pop", "(", "param", ".", "name", ")", "\n", "\n", "", "", "return", "accepted_options", ",", "unk_options", ",", "missing_options", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull": [[126, 137], ["path.is_dir", "dvc_file.exists", "print", "print", "print", "AssertionError", "AssertionError"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "expect_dir_or_suggest_dvc_pull", "(", "cls", ",", "path", ":", "Path", ")", ":", "\n", "        ", "if", "not", "path", ".", "is_dir", "(", ")", ":", "\n", "            ", "dvc_file", "=", "path", ".", "parent", "/", "(", "path", ".", "name", "+", "\".dvc\"", ")", "\n", "if", "dvc_file", ".", "exists", "(", ")", ":", "\n", "                ", "print", "(", "f\"{path} does not exist, but {dvc_file} exists. You probably want to dvc pull that file first?\"", ")", "\n", "print", "(", "f\"# DVC command to run:\"", ")", "\n", "print", "(", "f\"  dvc pull {dvc_file}\"", ")", "\n", "raise", "AssertionError", "(", "f\"{path} does not exist but can be pulled from dvc.\\n  dvc pull {dvc_file}\"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "AssertionError", "(", "f\"{path} does not exist.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.suggest_dvc_add": [[138, 146], ["str"], "methods", ["None"], ["", "", "", "@", "classmethod", "\n", "def", "suggest_dvc_add", "(", "cls", ",", "*", "paths", ":", "Path", ")", "->", "str", ":", "\n", "        ", "s", "=", "f\"# DVC commands:\\n\"", "\n", "s", "+=", "f\"  dvc add \"", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "s", "+=", "str", "(", "path", ")", "\n", "", "s", "+=", "\"\\n\"", "\n", "return", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Macros.Macros.get_pairwise_split_types_with": [[32, 45], ["pairs.append", "pairs.append"], "methods", ["None"], ["@", "classmethod", "\n", "def", "get_pairwise_split_types_with", "(", "cls", ",", "split", ":", "str", ")", "->", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ":", "\n", "        ", "pairs", "=", "[", "]", "\n", "before", "=", "True", "\n", "for", "s", "in", "cls", ".", "split_types", ":", "\n", "            ", "if", "s", "==", "split", ":", "\n", "                ", "before", "=", "False", "\n", "", "else", ":", "\n", "                ", "if", "before", ":", "\n", "                    ", "pairs", ".", "append", "(", "(", "s", ",", "split", ")", ")", "\n", "", "else", ":", "\n", "                    ", "pairs", ".", "append", "(", "(", "split", ",", "s", ")", ")", "\n", "", "", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.collect_repos": [[30, 33], ["DataCollector().search_github_java_repos", "DataCollector"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.DataCollector.DataCollector.search_github_java_repos"], ["def", "collect_repos", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "collector", ".", "DataCollector", "import", "DataCollector", "\n", "DataCollector", "(", ")", ".", "search_github_java_repos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.filter_repos": [[35, 43], ["DataCollector().filter_repos", "DataCollector", "options.get", "options.get", "options.get", "options.get", "options.get"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.DataCollector.DataCollector.filter_repos"], ["", "def", "filter_repos", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "collector", ".", "DataCollector", "import", "DataCollector", "\n", "DataCollector", "(", ")", ".", "filter_repos", "(", "\n", "year_end", "=", "options", ".", "get", "(", "\"year_end\"", ",", "2021", ")", ",", "\n", "year_cnt", "=", "options", ".", "get", "(", "\"year_cnt\"", ",", "3", ")", ",", "\n", "loc_min", "=", "options", ".", "get", "(", "\"loc_min\"", ",", "1e6", ")", ",", "\n", "loc_max", "=", "options", ".", "get", "(", "\"loc_max\"", ",", "2e6", ")", ",", "\n", "star_min", "=", "options", ".", "get", "(", "\"star_min\"", ",", "20", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.collect_raw_data": [[46, 53], ["DataCollector().collect_raw_data_projects", "DataCollector", "options.get", "options.get", "tseval.Utils.Utils.get_option_as_boolean", "tseval.Utils.Utils.get_option_as_list"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.DataCollector.DataCollector.collect_raw_data_projects", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.get_option_as_boolean", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.get_option_as_list"], ["", "def", "collect_raw_data", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "collector", ".", "DataCollector", "import", "DataCollector", "\n", "DataCollector", "(", ")", ".", "collect_raw_data_projects", "(", "\n", "year_end", "=", "options", ".", "get", "(", "\"year_end\"", ",", "2021", ")", ",", "\n", "year_cnt", "=", "options", ".", "get", "(", "\"year_cnt\"", ",", "3", ")", ",", "\n", "skip_collected", "=", "Utils", ".", "get_option_as_boolean", "(", "options", ",", "\"skip_collected\"", ")", ",", "\n", "project_names", "=", "Utils", ".", "get_option_as_list", "(", "options", ",", "\"projects\"", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.process_raw_data": [[56, 61], ["DataCollector().process_raw_data", "DataCollector", "options.get", "options.get"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.DataCollector.DataCollector.process_raw_data"], ["", "def", "process_raw_data", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "collector", ".", "DataCollector", "import", "DataCollector", "\n", "DataCollector", "(", ")", ".", "process_raw_data", "(", "\n", "year_end", "=", "options", ".", "get", "(", "\"year_end\"", ",", "2021", ")", ",", "\n", "year_cnt", "=", "options", ".", "get", "(", "\"year_cnt\"", ",", "3", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.get_splits": [[64, 77], ["EvalHelper().get_splits", "EvalHelper", "options.get", "options.get", "options.get", "options.get", "options.get", "options.get", "options.get", "options.get", "tseval.Utils.Utils.get_option_as_boolean"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.get_splits", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.get_option_as_boolean"], ["", "def", "get_splits", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "eval", ".", "EvalHelper", "import", "EvalHelper", "\n", "EvalHelper", "(", ")", ".", "get_splits", "(", "\n", "split_name", "=", "options", "[", "\"split\"", "]", ",", "\n", "seed", "=", "options", ".", "get", "(", "\"seed\"", ",", "7", ")", ",", "\n", "prj_val_ratio", "=", "options", ".", "get", "(", "\"prj_val_ratio\"", ",", "0.1", ")", ",", "\n", "prj_test_ratio", "=", "options", ".", "get", "(", "\"prj_test_ratio\"", ",", "0.2", ")", ",", "\n", "inprj_val_ratio", "=", "options", ".", "get", "(", "\"inprj_val_ratio\"", ",", "0.1", ")", ",", "\n", "inprj_test_ratio", "=", "options", ".", "get", "(", "\"inprj_test_ratio\"", ",", "0.2", ")", ",", "\n", "train_year", "=", "options", ".", "get", "(", "\"train_year\"", ",", "2019", ")", ",", "\n", "val_year", "=", "options", ".", "get", "(", "\"val_year\"", ",", "2020", ")", ",", "\n", "test_year", "=", "options", ".", "get", "(", "\"test_year\"", ",", "2021", ")", ",", "\n", "debug", "=", "Utils", ".", "get_option_as_boolean", "(", "options", ",", "\"debug\"", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.prepare_envs": [[83, 97], ["tseval.Utils.Utils.get_option_as_list", "TransformerACL20.prepare_env", "DeepComHybridESE19.prepare_env", "Code2SeqICLR19.prepare_env", "Code2VecPOPL19.prepare_env"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.get_option_as_list", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.prepare_env", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.prepare_env", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.prepare_env", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.prepare_env"], ["", "def", "prepare_envs", "(", "**", "options", ")", ":", "\n", "    ", "which", "=", "Utils", ".", "get_option_as_list", "(", "options", ",", "\"which\"", ")", "\n", "if", "which", "is", "None", "or", "\"TransformerACL20\"", "in", "which", ":", "\n", "        ", "from", "tseval", ".", "comgen", ".", "model", ".", "TransformerACL20", "import", "TransformerACL20", "\n", "TransformerACL20", ".", "prepare_env", "(", ")", "\n", "", "if", "which", "is", "None", "or", "\"DeepComHybridESE19\"", "in", "which", ":", "\n", "        ", "from", "tseval", ".", "comgen", ".", "model", ".", "DeepComHybridESE19", "import", "DeepComHybridESE19", "\n", "DeepComHybridESE19", ".", "prepare_env", "(", ")", "\n", "", "if", "which", "is", "None", "or", "\"Code2SeqICLR19\"", "in", "which", ":", "\n", "        ", "from", "tseval", ".", "metnam", ".", "model", ".", "Code2SeqICLR19", "import", "Code2SeqICLR19", "\n", "Code2SeqICLR19", ".", "prepare_env", "(", ")", "\n", "", "if", "which", "is", "None", "or", "\"Code2VecPOPL19\"", "in", "which", ":", "\n", "        ", "from", "tseval", ".", "metnam", ".", "model", ".", "Code2VecPOPL19", "import", "Code2VecPOPL19", "\n", "Code2VecPOPL19", ".", "prepare_env", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.exp_prepare": [[99, 102], ["EvalHelper().exp_prepare", "EvalHelper"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.exp_prepare"], ["", "", "def", "exp_prepare", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "eval", ".", "EvalHelper", "import", "EvalHelper", "\n", "EvalHelper", "(", ")", ".", "exp_prepare", "(", "**", "options", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.exp_train": [[104, 107], ["EvalHelper().exp_train", "EvalHelper"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.exp_train"], ["", "def", "exp_train", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "eval", ".", "EvalHelper", "import", "EvalHelper", "\n", "EvalHelper", "(", ")", ".", "exp_train", "(", "**", "options", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.exp_eval": [[109, 112], ["EvalHelper().exp_eval", "EvalHelper"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.exp_eval"], ["", "def", "exp_eval", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "eval", ".", "EvalHelper", "import", "EvalHelper", "\n", "EvalHelper", "(", ")", ".", "exp_eval", "(", "**", "options", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.exp_compute_metrics": [[114, 117], ["EvalHelper().exp_compute_metrics", "EvalHelper"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.exp_compute_metrics"], ["", "def", "exp_compute_metrics", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "eval", ".", "EvalHelper", "import", "EvalHelper", "\n", "EvalHelper", "(", ")", ".", "exp_compute_metrics", "(", "**", "options", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.make_tables": [[122, 125], ["Table().make_tables", "Table"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_tables"], ["", "def", "make_tables", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "Table", "import", "Table", "\n", "Table", "(", ")", ".", "make_tables", "(", "options", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.make_plots": [[127, 130], ["Plot().make_plots", "Plot"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_plots"], ["", "def", "make_plots", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "Plot", "import", "Plot", "\n", "Plot", "(", ")", ".", "make_plots", "(", "options", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.collect_metrics": [[135, 141], ["MetricsCollector", "MetricsCollector.collect_metrics"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.collect_metrics"], ["", "def", "collect_metrics", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "collector", ".", "MetricsCollector", "import", "MetricsCollector", "\n", "\n", "mc", "=", "MetricsCollector", "(", ")", "\n", "mc", ".", "collect_metrics", "(", "**", "options", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.analyze_check_files": [[146, 151], ["ExperimentsAnalyzer().check_files", "ExperimentsAnalyzer", "pathlib.Path", "options.get"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.check_files"], ["", "def", "analyze_check_files", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "collector", ".", "ExperimentsAnalyzer", "import", "ExperimentsAnalyzer", "\n", "ExperimentsAnalyzer", "(", "\n", "exps_spec_path", "=", "Path", "(", "options", "[", "\"exps\"", "]", ")", ",", "\n", "output_prefix", "=", "options", ".", "get", "(", "\"output\"", ")", ",", "\n", ")", ".", "check_files", "(", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.analyze_recompute_metrics": [[154, 159], ["ExperimentsAnalyzer().recompute_metrics", "ExperimentsAnalyzer", "pathlib.Path", "options.get"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.recompute_metrics"], ["", "def", "analyze_recompute_metrics", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "collector", ".", "ExperimentsAnalyzer", "import", "ExperimentsAnalyzer", "\n", "ExperimentsAnalyzer", "(", "\n", "exps_spec_path", "=", "Path", "(", "options", "[", "\"exps\"", "]", ")", ",", "\n", "output_prefix", "=", "options", ".", "get", "(", "\"output\"", ")", ",", "\n", ")", ".", "recompute_metrics", "(", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.analyze_extract_metrics": [[162, 167], ["ExperimentsAnalyzer().extract_metrics", "ExperimentsAnalyzer", "pathlib.Path", "options.get"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.extract_metrics"], ["", "def", "analyze_extract_metrics", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "collector", ".", "ExperimentsAnalyzer", "import", "ExperimentsAnalyzer", "\n", "ExperimentsAnalyzer", "(", "\n", "exps_spec_path", "=", "Path", "(", "options", "[", "\"exps\"", "]", ")", ",", "\n", "output_prefix", "=", "options", ".", "get", "(", "\"output\"", ")", ",", "\n", ")", ".", "extract_metrics", "(", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.analyze_sign_test": [[170, 175], ["ExperimentsAnalyzer().sign_test_default", "ExperimentsAnalyzer", "pathlib.Path", "options.get"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.sign_test_default"], ["", "def", "analyze_sign_test", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "collector", ".", "ExperimentsAnalyzer", "import", "ExperimentsAnalyzer", "\n", "ExperimentsAnalyzer", "(", "\n", "exps_spec_path", "=", "Path", "(", "options", "[", "\"exps\"", "]", ")", ",", "\n", "output_prefix", "=", "options", ".", "get", "(", "\"output\"", ")", ",", "\n", ")", ".", "sign_test_default", "(", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.analyze_make_tables": [[178, 183], ["ExperimentsAnalyzer().make_tables_default", "ExperimentsAnalyzer", "pathlib.Path", "options.get"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_tables_default"], ["", "def", "analyze_make_tables", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "collector", ".", "ExperimentsAnalyzer", "import", "ExperimentsAnalyzer", "\n", "ExperimentsAnalyzer", "(", "\n", "exps_spec_path", "=", "Path", "(", "options", "[", "\"exps\"", "]", ")", ",", "\n", "output_prefix", "=", "options", ".", "get", "(", "\"output\"", ")", ",", "\n", ")", ".", "make_tables_default", "(", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.analyze_make_plots": [[186, 191], ["ExperimentsAnalyzer().make_plots_default", "ExperimentsAnalyzer", "pathlib.Path", "options.get"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_plots_default"], ["", "def", "analyze_make_plots", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "collector", ".", "ExperimentsAnalyzer", "import", "ExperimentsAnalyzer", "\n", "ExperimentsAnalyzer", "(", "\n", "exps_spec_path", "=", "Path", "(", "options", "[", "\"exps\"", "]", ")", ",", "\n", "output_prefix", "=", "options", ".", "get", "(", "\"output\"", ")", ",", "\n", ")", ".", "make_plots_default", "(", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.analyze_sample_results": [[194, 202], ["ExperimentsAnalyzer().sample_results", "ExperimentsAnalyzer", "options.get", "options.get", "pathlib.Path", "options.get"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.sample_results"], ["", "def", "analyze_sample_results", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "collector", ".", "ExperimentsAnalyzer", "import", "ExperimentsAnalyzer", "\n", "ExperimentsAnalyzer", "(", "\n", "exps_spec_path", "=", "Path", "(", "options", "[", "\"exps\"", "]", ")", ",", "\n", "output_prefix", "=", "options", ".", "get", "(", "\"output\"", ")", ",", "\n", ")", ".", "sample_results", "(", "\n", "seed", "=", "options", ".", "get", "(", "\"seed\"", ",", "7", ")", ",", "\n", "count", "=", "options", ".", "get", "(", "\"count\"", ",", "100", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.analyze_extract_data_similarities": [[205, 210], ["ExperimentsAnalyzer().extract_data_similarities", "ExperimentsAnalyzer", "pathlib.Path", "options.get"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.extract_data_similarities"], ["", "def", "analyze_extract_data_similarities", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "collector", ".", "ExperimentsAnalyzer", "import", "ExperimentsAnalyzer", "\n", "ExperimentsAnalyzer", "(", "\n", "exps_spec_path", "=", "Path", "(", "options", "[", "\"exps\"", "]", ")", ",", "\n", "output_prefix", "=", "options", ".", "get", "(", "\"output\"", ")", ",", "\n", ")", ".", "extract_data_similarities", "(", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.analyze_near_duplicates": [[213, 223], ["ExperimentsAnalyzer().filter_near_duplicates_and_analyze", "ExperimentsAnalyzer", "tseval.Utils.Utils.get_option_as_boolean", "pathlib.Path", "options.get"], "function", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.filter_near_duplicates_and_analyze", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.get_option_as_boolean"], ["", "def", "analyze_near_duplicates", "(", "**", "options", ")", ":", "\n", "    ", "from", "tseval", ".", "collector", ".", "ExperimentsAnalyzer", "import", "ExperimentsAnalyzer", "\n", "ExperimentsAnalyzer", "(", "\n", "exps_spec_path", "=", "Path", "(", "options", "[", "\"exps\"", "]", ")", ",", "\n", "output_prefix", "=", "options", ".", "get", "(", "\"output\"", ")", ",", "\n", ")", ".", "filter_near_duplicates_and_analyze", "(", "\n", "code_sim_threshold", "=", "options", "[", "\"code_sim\"", "]", ",", "\n", "nl_sim_threshold", "=", "options", "[", "\"nl_sim\"", "]", ",", "\n", "config_name", "=", "options", "[", "\"config\"", "]", ",", "\n", "only_tables_plots", "=", "Utils", ".", "get_option_as_boolean", "(", "options", ",", "\"only_tables_plots\"", ",", "default", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.main.normalize_options": [[229, 255], ["random.seed", "logger.info", "logger.info", "seutil.LoggingUtils.setup", "logger.debug", "logger.debug", "logger.warning", "int", "time.time_ns", "str().lower", "str().lower", "str", "str"], "function", ["None"], ["", "def", "normalize_options", "(", "opts", ":", "dict", ")", "->", "dict", ":", "\n", "# Set a different log file", "\n", "    ", "if", "\"log_path\"", "in", "opts", ":", "\n", "        ", "logger", ".", "info", "(", "f\"Switching to log file {opts['log_path']}\"", ")", "\n", "LoggingUtils", ".", "setup", "(", "filename", "=", "opts", "[", "'log_path'", "]", ")", "\n", "\n", "# Set debug mode", "\n", "", "if", "\"debug\"", "in", "opts", "and", "str", "(", "opts", "[", "\"debug\"", "]", ")", ".", "lower", "(", ")", "!=", "\"false\"", ":", "\n", "        ", "Environment", ".", "is_debug", "=", "True", "\n", "logger", ".", "debug", "(", "\"Debug mode on\"", ")", "\n", "logger", ".", "debug", "(", "f\"Command line options: {opts}\"", ")", "\n", "\n", "# Set parallel mode - all automatic installations are disabled", "\n", "", "if", "\"parallel\"", "in", "opts", "and", "str", "(", "opts", "[", "\"parallel\"", "]", ")", ".", "lower", "(", ")", "!=", "\"false\"", ":", "\n", "        ", "Environment", ".", "is_parallel", "=", "True", "\n", "logger", ".", "warning", "(", "f\"Parallel mode on\"", ")", "\n", "\n", "# Set/report random seed", "\n", "", "if", "\"random_seed\"", "in", "opts", ":", "\n", "        ", "Environment", ".", "random_seed", "=", "int", "(", "opts", "[", "\"random_seed\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "Environment", ".", "random_seed", "=", "time", ".", "time_ns", "(", ")", "\n", "\n", "", "random", ".", "seed", "(", "Environment", ".", "random_seed", ")", "\n", "logger", ".", "info", "(", "f\"Random seed is {Environment.random_seed}\"", ")", "\n", "return", "opts", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Plot.Plot.init_plot_libs": [[19, 37], ["seaborn.set", "seaborn.set_palette", "seaborn.set_context"], "methods", ["None"], ["@", "classmethod", "\n", "def", "init_plot_libs", "(", "cls", ")", ":", "\n", "# Initialize seaborn", "\n", "        ", "sns", ".", "set", "(", ")", "\n", "sns", ".", "set_palette", "(", "\"Dark2\"", ")", "\n", "sns", ".", "set_context", "(", "\"paper\"", ")", "\n", "# Set matplotlib fonts", "\n", "mpl", ".", "rcParams", "[", "\"axes.titlesize\"", "]", "=", "24", "\n", "mpl", ".", "rcParams", "[", "\"axes.labelsize\"", "]", "=", "24", "\n", "mpl", ".", "rcParams", "[", "\"font.size\"", "]", "=", "18", "\n", "mpl", ".", "rcParams", "[", "\"xtick.labelsize\"", "]", "=", "24", "\n", "mpl", ".", "rcParams", "[", "\"xtick.major.size\"", "]", "=", "14", "\n", "mpl", ".", "rcParams", "[", "\"xtick.minor.size\"", "]", "=", "14", "\n", "mpl", ".", "rcParams", "[", "\"ytick.labelsize\"", "]", "=", "24", "\n", "mpl", ".", "rcParams", "[", "\"ytick.major.size\"", "]", "=", "14", "\n", "mpl", ".", "rcParams", "[", "\"ytick.minor.size\"", "]", "=", "14", "\n", "mpl", ".", "rcParams", "[", "\"legend.fontsize\"", "]", "=", "18", "\n", "mpl", ".", "rcParams", "[", "\"legend.title_fontsize\"", "]", "=", "18", "\n", "# print(mpl.rcParams)", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Plot.Plot.__init__": [[39, 43], ["seutil.IOUtils.mk_dir", "Plot.Plot.init_plot_libs"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Plot.Plot.init_plot_libs"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "plots_dir", ":", "Path", "=", "Macros", ".", "paper_dir", "/", "\"figs\"", "\n", "IOUtils", ".", "mk_dir", "(", "self", ".", "plots_dir", ")", "\n", "self", ".", "init_plot_libs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Plot.Plot.make_plots": [[44, 53], ["options.pop", "Plot.Plot.dataset_metrics_dist", "Plot.Plot.logger.warning"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Plot.Plot.dataset_metrics_dist"], ["", "def", "make_plots", "(", "self", ",", "options", ":", "dict", ")", ":", "\n", "        ", "which", "=", "options", ".", "pop", "(", "\"which\"", ")", "\n", "\n", "if", "which", "==", "\"dataset-metrics-dist\"", ":", "\n", "            ", "self", ".", "dataset_metrics_dist", "(", "\n", "task", "=", "options", "[", "\"task\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "f\"Unknown plot {which}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Plot.Plot.dataset_metrics_dist": [[54, 158], ["str", "seutil.IOUtils.rm_dir", "plots_sub_dir.mkdir", "set", "pandas.DataFrame", "pandas.DataFrame.groupby", "seutil.latex.File", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "zip", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.save", "plots_sub_dir.relative_to", "seutil.IOUtils.load", "tseval.Macros.Macros.get_pairwise_split_types_with", "sn.startswith", "seaborn.jointplot", "seaborn.jointplot.set_axis_labels", "matplotlib.pyplot.tight_layout", "seaborn.jointplot.savefig", "itertools.combinations", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "enumerate", "enumerate", "set.add", "seutil.latex.Macro().use", "seutil.latex.File.append", "zip", "lod.append", "zip", "lod.append", "dict", "seutil.latex.Macro().use", "seutil.latex.Macro", "seutil.latex.Macro", "min"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.save", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Macros.Macros.get_pairwise_split_types_with"], ["", "", "def", "dataset_metrics_dist", "(", "self", ",", "task", ":", "str", ")", ":", "\n", "        ", "plots_sub_dir", "=", "self", ".", "plots_dir", "/", "f\"dataset-{task}\"", "\n", "plots_sub_dir_rel", "=", "str", "(", "plots_sub_dir", ".", "relative_to", "(", "Macros", ".", "paper_dir", ")", ")", "\n", "IOUtils", ".", "rm_dir", "(", "plots_sub_dir", ")", "\n", "plots_sub_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "# Load metrics list into a DataFrame", "\n", "label_x", "=", "\"code\"", "\n", "max_x", "=", "200", "\n", "if", "task", "==", "\"CG\"", ":", "\n", "            ", "label_y", "=", "\"comment\"", "\n", "max_y", "=", "60", "\n", "", "else", ":", "\n", "            ", "label_y", "=", "\"name\"", "\n", "max_y", "=", "8", "\n", "", "lod", ":", "List", "[", "dict", "]", "=", "[", "]", "\n", "seen_split_combination", "=", "set", "(", ")", "\n", "for", "setup", "in", "Macros", ".", "split_types", ":", "\n", "            ", "metrics_list", "=", "IOUtils", ".", "load", "(", "Macros", ".", "results_dir", "/", "\"metrics\"", "/", "f\"setup-dataset-metrics-list_{task}_{setup}.pkl\"", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "for", "sn", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test_standard", "]", ":", "\n", "                ", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "zip", "(", "\n", "metrics_list", "[", "f\"{sn}_len-{label_x}\"", "]", ",", "metrics_list", "[", "f\"{sn}_len-{label_y}\"", "]", ",", "\n", ")", ")", ":", "\n", "                    ", "lod", ".", "append", "(", "{", "\n", "\"i\"", ":", "i", ",", "\n", "\"set_name\"", ":", "f\"{sn}-{setup}\"", ",", "\n", "label_x", ":", "x", ",", "\n", "label_y", ":", "y", ",", "\n", "}", ")", "\n", "\n", "", "", "for", "s1", ",", "s2", "in", "Macros", ".", "get_pairwise_split_types_with", "(", "setup", ")", ":", "\n", "                ", "if", "(", "s1", ",", "s2", ")", "in", "seen_split_combination", ":", "\n", "                    ", "continue", "\n", "", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "zip", "(", "\n", "metrics_list", "[", "f\"{Macros.test_common}-{s1}-{s2}_len-{label_x}\"", "]", ",", "\n", "metrics_list", "[", "f\"{Macros.test_common}-{s1}-{s2}_len-{label_y}\"", "]", ",", "\n", ")", ")", ":", "\n", "                    ", "lod", ".", "append", "(", "{", "\n", "\"i\"", ":", "i", ",", "\n", "\"set_name\"", ":", "f\"{Macros.test_common}-{s1}-{s2}\"", ",", "\n", "label_x", ":", "x", ",", "\n", "label_y", ":", "y", ",", "\n", "}", ")", "\n", "", "seen_split_combination", ".", "add", "(", "(", "s1", ",", "s2", ")", ")", "\n", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "lod", ")", "\n", "\n", "# Make plots", "\n", "for", "sn", ",", "df_sn", "in", "df", ".", "groupby", "(", "\"set_name\"", ",", "as_index", "=", "False", ")", ":", "\n", "            ", "sn", ":", "str", "\n", "if", "sn", "in", "[", "f\"{x}-{Macros.temporally}\"", "for", "x", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test_standard", "]", "]", "+", "[", "f\"{Macros.test_common}-{Macros.cross_prj}-{Macros.temporally}\"", "]", ":", "\n", "                ", "display_xlabel", "=", "\"len(\"", "+", "label_x", "+", "\")\"", "\n", "", "else", ":", "\n", "                ", "display_xlabel", "=", "None", "\n", "", "if", "sn", ".", "startswith", "(", "Macros", ".", "train", ")", ":", "\n", "                ", "display_ylabel", "=", "\"len(\"", "+", "label_y", "+", "\")\"", "\n", "", "else", ":", "\n", "                ", "display_ylabel", "=", "None", "\n", "\n", "", "fig", "=", "sns", ".", "jointplot", "(", "\n", "data", "=", "df_sn", ",", "\n", "x", "=", "label_x", ",", "y", "=", "label_y", ",", "\n", "kind", "=", "\"hist\"", ",", "\n", "xlim", "=", "(", "0", ",", "max_x", ")", ",", "\n", "ylim", "=", "(", "0", ",", "max_y", ")", ",", "\n", "height", "=", "6", ",", "\n", "ratio", "=", "3", ",", "\n", "space", "=", ".01", ",", "\n", "joint_kws", "=", "dict", "(", "\n", "bins", "=", "(", "12", ",", "min", "(", "12", ",", "max_y", "-", "1", ")", ")", ",", "\n", "binrange", "=", "(", "(", "0", ",", "max_x", ")", ",", "(", "0", ",", "max_y", ")", ")", ",", "\n", "pmax", "=", ".5", ",", "\n", ")", ",", "\n", "color", "=", "\"royalblue\"", ",", "\n", ")", "\n", "fig", ".", "set_axis_labels", "(", "display_xlabel", ",", "display_ylabel", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "plots_sub_dir", "/", "f\"{sn}.pdf\"", ")", "\n", "\n", "# Generate a tex file that organizes the plots", "\n", "", "f", "=", "latex", ".", "File", "(", "plots_sub_dir", "/", "f\"plot.tex\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{center}\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{footnotesize}\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{tabular}{|l|c|c|c || l|c|}\"", ")", "\n", "f", ".", "append", "(", "r\"\\hline\"", ")", "\n", "f", ".", "append", "(", "r\"& \\textbf{ATrain} & \\textbf{\\AVal} & \\textbf{\\ATestS} & & \\textbf{\\ATestC} \\\\\"", ")", "\n", "\n", "for", "sn_l", ",", "(", "s1_r", ",", "s2_r", ")", "in", "zip", "(", "Macros", ".", "split_types", ",", "itertools", ".", "combinations", "(", "Macros", ".", "split_types", ",", "2", ")", ")", ":", "\n", "            ", "f", ".", "append", "(", "r\"\\hline\"", ")", "\n", "f", ".", "append", "(", "latex", ".", "Macro", "(", "f\"TH-ds-{sn_l}\"", ")", ".", "use", "(", ")", ")", "\n", "for", "sn", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test_standard", "]", ":", "\n", "                ", "f", ".", "append", "(", "r\" & \\begin{minipage}{.18\\textwidth}\\includegraphics[width=\\textwidth]{\"", "\n", "+", "f\"{plots_sub_dir_rel}/{sn}-{sn_l}\"", "\n", "+", "r\"}\\end{minipage}\"", ")", "\n", "", "f", ".", "append", "(", "\" & \"", "+", "latex", ".", "Macro", "(", "f\"TH-ds-{s1_r}-{s2_r}\"", ")", ".", "use", "(", ")", ")", "\n", "f", ".", "append", "(", "r\" & \\begin{minipage}{.18\\textwidth}\\includegraphics[width=\\textwidth]{\"", "\n", "+", "f\"{plots_sub_dir_rel}/{Macros.test_common}-{s1_r}-{s2_r}\"", "\n", "+", "r\"}\\end{minipage}\"", ")", "\n", "f", ".", "append", "(", "r\"\\\\\"", ")", "\n", "", "f", ".", "append", "(", "r\"\\hline\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{tabular}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{footnotesize}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{center}\"", ")", "\n", "f", ".", "save", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Table.Table.__init__": [[18, 24], ["seutil.IOUtils.mk_dir"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tables_dir", ":", "Path", "=", "Macros", ".", "paper_dir", "/", "\"tables\"", "\n", "IOUtils", ".", "mk_dir", "(", "self", ".", "tables_dir", ")", "\n", "\n", "self", ".", "metrics_dir", ":", "Path", "=", "Macros", ".", "results_dir", "/", "\"metrics\"", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Table.Table.make_tables": [[25, 34], ["options.pop", "Table.Table.make_numbers_dataset_metrics", "Table.Table.make_table_dataset_metrics_small", "Table.Table.logger.warning", "Table.Table.make_table_dataset_metrics"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Table.Table.make_numbers_dataset_metrics", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Table.Table.make_table_dataset_metrics_small", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Table.Table.make_table_dataset_metrics"], ["", "def", "make_tables", "(", "self", ",", "options", ")", ":", "\n", "        ", "which", "=", "options", ".", "pop", "(", "\"which\"", ")", "\n", "if", "which", "==", "\"dataset-metrics\"", ":", "\n", "            ", "self", ".", "make_numbers_dataset_metrics", "(", ")", "\n", "self", ".", "make_table_dataset_metrics_small", "(", ")", "\n", "for", "task", "in", "[", "Macros", ".", "com_gen", ",", "Macros", ".", "met_nam", "]", ":", "\n", "                ", "self", ".", "make_table_dataset_metrics", "(", "task", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "f\"Unknown table name {which}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Table.Table.make_numbers_dataset_metrics": [[35, 66], ["seutil.latex.File", "seutil.IOUtils.load", "seutil.IOUtils.load.items", "seutil.IOUtils.load", "seutil.IOUtils.load.items", "seutil.latex.File.save", "seutil.latex.File.append_macro", "seutil.latex.File.append_macro", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.IOUtils.load", "seutil.IOUtils.load.items", "type", "k.startswith", "seutil.latex.File.append_macro", "type", "k.startswith", "seutil.latex.Macro", "len"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.save", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "", "def", "make_numbers_dataset_metrics", "(", "self", ")", ":", "\n", "        ", "file", "=", "latex", ".", "File", "(", "self", ".", "tables_dir", "/", "f\"numbers-dataset-metrics.tex\"", ")", "\n", "\n", "dataset_filtered_metrics", "=", "IOUtils", ".", "load", "(", "Macros", ".", "results_dir", "/", "\"metrics\"", "/", "f\"raw-data-filtered.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "for", "k", ",", "v", "in", "dataset_filtered_metrics", ".", "items", "(", ")", ":", "\n", "            ", "file", ".", "append_macro", "(", "latex", ".", "Macro", "(", "f\"ds-filter-{k}\"", ",", "f\"{v:,d}\"", ")", ")", "\n", "\n", "", "dataset_metrics", "=", "IOUtils", ".", "load", "(", "Macros", ".", "results_dir", "/", "\"metrics\"", "/", "f\"split-dataset-metrics_Full.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "for", "k", ",", "v", "in", "dataset_metrics", ".", "items", "(", ")", ":", "\n", "            ", "fmt", "=", "f\",d\"", "if", "type", "(", "v", ")", "==", "int", "else", "f\",.2f\"", "\n", "file", ".", "append_macro", "(", "latex", ".", "Macro", "(", "f\"ds-{k}\"", ",", "f\"{v:{fmt}}\"", ")", ")", "\n", "\n", "", "for", "task", "in", "[", "Macros", ".", "com_gen", ",", "Macros", ".", "met_nam", "]", ":", "\n", "            ", "for", "split", "in", "Macros", ".", "split_types", ":", "\n", "                ", "setup_metrics", "=", "IOUtils", ".", "load", "(", "Macros", ".", "results_dir", "/", "\"metrics\"", "/", "f\"setup-dataset-metrics_{task}_{split}.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "for", "k", ",", "v", "in", "setup_metrics", ".", "items", "(", ")", ":", "\n", "                    ", "fmt", "=", "f\",d\"", "if", "type", "(", "v", ")", "==", "int", "else", "f\",.2f\"", "\n", "if", "k", ".", "startswith", "(", "\"all_\"", ")", ":", "\n", "# Skip all_ metrics", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "# Replace train/val/test_standard to train-split/val-split/test_standard-split", "\n", "                        ", "for", "x", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test_standard", "]", ":", "\n", "                            ", "if", "k", ".", "startswith", "(", "f\"{x}_\"", ")", ":", "\n", "                                ", "k", "=", "f\"{x}-{split}_\"", "+", "k", "[", "len", "(", "f\"{x}_\"", ")", ":", "]", "\n", "break", "\n", "", "", "if", "f\"ds-{task}-{k}\"", "in", "file", ".", "macros_indexed", ":", "\n", "                            ", "continue", "\n", "", "file", ".", "append_macro", "(", "latex", ".", "Macro", "(", "f\"ds-{task}-{k}\"", ",", "f\"{v:{fmt}}\"", ")", ")", "\n", "\n", "", "", "", "", "file", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Table.Table.make_table_dataset_metrics": [[67, 168], ["seutil.latex.File", "collections.OrderedDict", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "collections.OrderedDict.items", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.save", "sum", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "itertools.combinations", "seutil.latex.File.append", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.save"], ["", "def", "make_table_dataset_metrics", "(", "self", ",", "task", ":", "str", ")", ":", "\n", "        ", "f", "=", "latex", ".", "File", "(", "self", ".", "tables_dir", "/", "f\"table-dataset-metrics-{task}.tex\"", ")", "\n", "\n", "metric_2_th", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "# metric_2_th[\"num-proj\"] = r\"\\multicolumn{2}{c|}{\\UseMacro{TH-ds-num-project}}\"", "\n", "metric_2_th", "[", "\"num-data\"", "]", "=", "r\"\\multicolumn{2}{c|}{\\UseMacro{TH-ds-num-data}}\"", "\n", "metric_2_th", "[", "\"sep-data\"", "]", "=", "self", ".", "ROWSEP", "\n", "metric_2_th", "[", "\"len-code-AVG\"", "]", "=", "r\"& \\UseMacro{TH-ds-len-code-avg}\"", "\n", "# metric_2_th[\"len-code-MODE\"] = r\"& \\UseMacro{TH-ds-len-code-mode}\"", "\n", "# metric_2_th[\"len-code-MEDIAN\"] = r\"& \\UseMacro{TH-ds-len-code-median}\"", "\n", "metric_2_th", "[", "\"len-code-le-100\"", "]", "=", "r\"& \\UseMacro{TH-ds-len-code-le100}\"", "\n", "metric_2_th", "[", "\"len-code-le-150\"", "]", "=", "r\"& \\UseMacro{TH-ds-len-code-le150}\"", "\n", "metric_2_th", "[", "\"len-code-le-200\"", "]", "=", "r\"\\multirow{-4}{*}{\\UseMacro{TH-ds-len-code}} & \\UseMacro{TH-ds-len-code-le200}\"", "\n", "if", "task", "==", "Macros", ".", "com_gen", ":", "\n", "            ", "metric_2_th", "[", "\"sep-cg\"", "]", "=", "self", ".", "ROWSEP", "\n", "metric_2_th", "[", "\"len-comment-AVG\"", "]", "=", "r\"& \\UseMacro{TH-ds-len-comment-avg}\"", "\n", "# metric_2_th[\"len-comment-MODE\"] = r\"& \\UseMacro{TH-ds-len-comment-mode}\"", "\n", "# metric_2_th[\"len-comment-MEDIAN\"] = r\"& \\UseMacro{TH-ds-len-comment-median}\"", "\n", "metric_2_th", "[", "\"len-comment-le-20\"", "]", "=", "r\"& \\UseMacro{TH-ds-len-comment-le20}\"", "\n", "metric_2_th", "[", "\"len-comment-le-30\"", "]", "=", "r\"& \\UseMacro{TH-ds-len-comment-le30}\"", "\n", "metric_2_th", "[", "\"len-comment-le-50\"", "]", "=", "r\"\\multirow{-4}{*}{\\UseMacro{TH-ds-len-comment}} & \\UseMacro{TH-ds-len-comment-le50}\"", "\n", "", "if", "task", "==", "Macros", ".", "met_nam", ":", "\n", "            ", "metric_2_th", "[", "\"sep-mn\"", "]", "=", "self", ".", "ROWSEP", "\n", "metric_2_th", "[", "\"len-name-AVG\"", "]", "=", "r\"& \\UseMacro{TH-ds-len-name-avg}\"", "\n", "# metric_2_th[\"len-name-MODE\"] = r\"& \\UseMacro{TH-ds-len-name-mode}\"", "\n", "# metric_2_th[\"len-name-MEDIAN\"] = r\"& \\UseMacro{TH-ds-len-name-median}\"", "\n", "metric_2_th", "[", "\"len-name-le-2\"", "]", "=", "r\"& \\UseMacro{TH-ds-len-name-le2}\"", "\n", "metric_2_th", "[", "\"len-name-le-3\"", "]", "=", "r\"& \\UseMacro{TH-ds-len-name-le3}\"", "\n", "metric_2_th", "[", "\"len-name-le-6\"", "]", "=", "r\"\\multirow{-4}{*}{\\UseMacro{TH-ds-len-name}} & \\UseMacro{TH-ds-len-name-le6}\"", "\n", "\n", "", "cols", "=", "sum", "(", "\n", "[", "\n", "[", "f\"{s1}-{s2}\"", "for", "s1", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test_standard", "]", "]", "+", "[", "self", ".", "COLSEP", "]", "\n", "for", "s2", "in", "[", "Macros", ".", "mixed_prj", ",", "Macros", ".", "cross_prj", ",", "Macros", ".", "temporally", "]", "\n", "]", "\n", ",", "[", "]", ",", "\n", ")", "+", "[", "f\"{Macros.test_common}-{x}-{y}\"", "\n", "for", "x", ",", "y", "in", "itertools", ".", "combinations", "(", "[", "Macros", ".", "mixed_prj", ",", "Macros", ".", "cross_prj", ",", "Macros", ".", "temporally", "]", ",", "2", ")", "]", "\n", "\n", "# Header", "\n", "f", ".", "append", "(", "r\"\\begin{table*}[t]\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{footnotesize}\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{center}\"", ")", "\n", "table_name", "=", "f\"dataset-metrics-{task}\"", "\n", "\n", "f", ".", "append", "(", "\n", "r\"\\begin{tabular}{ l@{\\hspace{2pt}}c@{\\hspace{2pt}} | \"", "\n", "r\"r@{\\hspace{4pt}}r@{\\hspace{4pt}}r @{\\hspace{3pt}}c@{\\hspace{3pt}} \"", "\n", "r\"r@{\\hspace{4pt}}r@{\\hspace{4pt}}r @{\\hspace{3pt}}c@{\\hspace{3pt}} \"", "\n", "r\"r@{\\hspace{4pt}}r@{\\hspace{4pt}}r @{\\hspace{3pt}}c@{\\hspace{3pt}} \"", "\n", "r\"r@{\\hspace{4pt}}r@{\\hspace{4pt}}r }\"", "\n", ")", "\n", "\n", "f", ".", "append", "(", "r\"\\toprule\"", ")", "\n", "\n", "# Line 1", "\n", "f", ".", "append", "(", "\n", "r\"\\multicolumn{2}{c|}{}\"", "\n", "r\" & \\multicolumn{3}{c}{\\UseMacro{TH-ds-MP}} &\"", "\n", "r\" & \\multicolumn{3}{c}{\\UseMacro{TH-ds-CP}} &\"", "\n", "r\" & \\multicolumn{3}{c}{\\UseMacro{TH-ds-T}} &\"", "\n", "r\" & \\UseMacro{TH-ds-MP-CP} & \\UseMacro{TH-ds-MP-T} & \\UseMacro{TH-ds-CP-T}\"", "\n", "r\" \\\\\\cline{3-5}\\cline{7-9}\\cline{11-13}\\cline{15-17}\"", "\n", ")", "\n", "\n", "# Line 2", "\n", "f", ".", "append", "(", "\n", "r\"\\multicolumn{2}{c|}{\\multirow{-2}{*}{\\THDSStat}}\"", "\n", "r\" & \\UseMacro{TH-ds-train} & \\UseMacro{TH-ds-val} & \\UseMacro{TH-ds-test_standard} &\"", "\n", "r\" & \\UseMacro{TH-ds-train} & \\UseMacro{TH-ds-val} & \\UseMacro{TH-ds-test_standard} &\"", "\n", "r\" & \\UseMacro{TH-ds-train} & \\UseMacro{TH-ds-val} & \\UseMacro{TH-ds-test_standard} &\"", "\n", "r\" & \\multicolumn{3}{c}{\\UseMacro{TH-ds-test_common}} \\\\\"", "\n", ")", "\n", "\n", "f", ".", "append", "(", "r\"\\midrule\"", ")", "\n", "\n", "for", "metric", ",", "row_th", "in", "metric_2_th", ".", "items", "(", ")", ":", "\n", "            ", "if", "row_th", "==", "self", ".", "ROWSEP", ":", "\n", "                ", "f", ".", "append", "(", "r\"\\midrule\"", ")", "\n", "continue", "\n", "\n", "", "f", ".", "append", "(", "row_th", ")", "\n", "\n", "for", "col", "in", "cols", ":", "\n", "                ", "if", "col", "==", "self", ".", "COLSEP", ":", "\n", "                    ", "f", ".", "append", "(", "\" & \"", ")", "\n", "continue", "\n", "", "f", ".", "append", "(", "\" & \"", "+", "latex", ".", "Macro", "(", "f\"ds-{task}-{col}_{metric}\"", ")", ".", "use", "(", ")", ")", "\n", "\n", "", "f", ".", "append", "(", "r\"\\\\\"", ")", "\n", "\n", "# Footer", "\n", "", "f", ".", "append", "(", "r\"\\bottomrule\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{tabular}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{center}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{footnotesize}\"", ")", "\n", "f", ".", "append", "(", "r\"\\vspace{\"", "+", "latex", ".", "Macro", "(", "f\"TV-{table_name}\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "f", ".", "append", "(", "r\"\\caption{\"", "+", "latex", ".", "Macro", "(", "f\"TC-{table_name}\"", ")", ".", "use", "(", ")", "+", "r\"}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{table*}\"", ")", "\n", "\n", "f", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Table.Table.make_table_dataset_metrics_small": [[169, 226], ["seutil.latex.File", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.save", "seutil.latex.File.append", "enumerate", "zip", "zip", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "itertools.combinations", "seutil.latex.Macro().use", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro().use", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.save"], ["", "def", "make_table_dataset_metrics_small", "(", "self", ")", ":", "\n", "        ", "f", "=", "latex", ".", "File", "(", "self", ".", "tables_dir", "/", "f\"table-dataset-metrics-small.tex\"", ")", "\n", "\n", "# Header", "\n", "f", ".", "append", "(", "r\"\\begin{table}[t]\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{footnotesize}\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{center}\"", ")", "\n", "table_name", "=", "f\"dataset-metrics-small\"", "\n", "\n", "f", ".", "append", "(", "r\"\\begin{tabular}{ @{} l | c @{\\hspace{5pt}} r @{\\hspace{5pt}} r @{\\hspace{5pt}} r @{\\hspace{3pt}}c@{\\hspace{3pt}} c @{\\hspace{5pt}} r@{} }\"", ")", "\n", "f", ".", "append", "(", "r\"\\toprule\"", ")", "\n", "f", ".", "append", "(", "r\"\\textbf{Task} & & \\textbf{\\ATrain} & \\textbf{\\AVal} & \\textbf{\\ATestS} & & & \\textbf{\\ATestC} \\\\\"", ")", "\n", "\n", "for", "task", "in", "[", "Macros", ".", "com_gen", ",", "Macros", ".", "met_nam", "]", ":", "\n", "\n", "            ", "f", ".", "append", "(", "r\"\\midrule\"", ")", "\n", "\n", "for", "i", ",", "(", "m", ",", "p", ")", "in", "enumerate", "(", "zip", "(", "\n", "[", "Macros", ".", "mixed_prj", ",", "Macros", ".", "cross_prj", ",", "Macros", ".", "temporally", "]", ",", "\n", "[", "f\"{x}-{y}\"", "for", "x", ",", "y", "in", "itertools", ".", "combinations", "(", "[", "Macros", ".", "mixed_prj", ",", "Macros", ".", "cross_prj", ",", "Macros", ".", "temporally", "]", ",", "2", ")", "]", ",", "\n", ")", ")", ":", "\n", "                ", "if", "i", "==", "2", ":", "\n", "                    ", "f", ".", "append", "(", "r\"\\multirow{-3}{*}{\\rotatebox[origin=c]{90}{\"", "+", "latex", ".", "Macro", "(", "f\"TaskM_{task}\"", ")", ".", "use", "(", ")", "+", "r\"}}\"", ")", "\n", "\n", "", "f", ".", "append", "(", "\" & \"", "+", "latex", ".", "Macro", "(", "f\"TH-ds-{m}\"", ")", ".", "use", "(", ")", ")", "\n", "for", "sn", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test_standard", "]", ":", "\n", "                    ", "f", ".", "append", "(", "\" & \"", "+", "latex", ".", "Macro", "(", "f\"ds-{task}-{sn}-{m}_num-data\"", ")", ".", "use", "(", ")", ")", "\n", "", "f", ".", "append", "(", "r\" & \\tikz[remember picture, baseline] \\node[inner sep=2pt, outer sep=0, yshift=1ex] (\"", "+", "task", "+", "m", "+", "r\"-base) {\\phantom{XX}};\"", ")", "\n", "f", ".", "append", "(", "\" & \"", "+", "latex", ".", "Macro", "(", "f\"TH-ds-{p}\"", ")", ".", "use", "(", ")", ")", "\n", "f", ".", "append", "(", "\" & \"", "+", "latex", ".", "Macro", "(", "f\"ds-{task}-{Macros.test_common}-{p}_num-data\"", ")", ".", "use", "(", ")", ")", "\n", "f", ".", "append", "(", "r\"\\\\\"", ")", "\n", "\n", "", "", "f", ".", "append", "(", "r\"\\bottomrule\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{tabular}\"", ")", "\n", "\n", "f", ".", "append", "(", "r\"\\begin{tikzpicture}[remember picture, overlay, thick]\"", ")", "\n", "for", "task", "in", "[", "Macros", ".", "com_gen", ",", "Macros", ".", "met_nam", "]", ":", "\n", "            ", "for", "r", ",", "(", "l1", ",", "l2", ")", "in", "zip", "(", "\n", "[", "Macros", ".", "mixed_prj", ",", "Macros", ".", "cross_prj", ",", "Macros", ".", "temporally", "]", ",", "\n", "[", "\n", "(", "Macros", ".", "mixed_prj", ",", "Macros", ".", "cross_prj", ")", ",", "\n", "(", "Macros", ".", "mixed_prj", ",", "Macros", ".", "temporally", ")", ",", "\n", "(", "Macros", ".", "cross_prj", ",", "Macros", ".", "temporally", ")", ",", "\n", "]", "\n", ")", ":", "\n", "                ", "f", ".", "append", "(", "r\"\\draw[->] (\"", "+", "task", "+", "l1", "+", "r\"-base.west) .. controls ($(\"", "+", "task", "+", "r", "+", "r\"-base.east) - (1em,0)$) .. (\"", "+", "task", "+", "r", "+", "r\"-base.east);\"", ")", "\n", "f", ".", "append", "(", "r\"\\draw (\"", "+", "task", "+", "l2", "+", "r\"-base.west) .. controls ($(\"", "+", "task", "+", "r", "+", "r\"-base.east) - (1em,0)$) .. (\"", "+", "task", "+", "r", "+", "r\"-base.east);\"", ")", "\n", "\n", "", "", "f", ".", "append", "(", "r\"\\end{tikzpicture}\"", ")", "\n", "\n", "f", ".", "append", "(", "r\"\\end{center}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{footnotesize}\"", ")", "\n", "f", ".", "append", "(", "r\"\\vspace{\"", "+", "latex", ".", "Macro", "(", "f\"TV-{table_name}\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "f", ".", "append", "(", "r\"\\caption{\"", "+", "latex", ".", "Macro", "(", "f\"TC-{table_name}\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{table}\"", ")", "\n", "\n", "f", ".", "save", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Environment.Environment.get_conda_init_path": [[23, 29], ["seutil.BashUtils.run().stdout.strip", "str", "len", "RuntimeError", "seutil.BashUtils.run", "pathlib.Path"], "methods", ["None"], ["@", "classmethod", "\n", "def", "get_conda_init_path", "(", "cls", ")", "->", "str", ":", "\n", "        ", "which_conda", "=", "BashUtils", ".", "run", "(", "\"which conda\"", ")", ".", "stdout", ".", "strip", "(", ")", "\n", "if", "len", "(", "which_conda", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Cannot detect conda environment!\"", ")", "\n", "", "return", "str", "(", "Path", "(", "which_conda", ")", ".", "parent", ".", "parent", "/", "\"etc\"", "/", "\"profile.d\"", "/", "\"conda.sh\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Environment.Environment.conda_init_path": [[32, 37], ["cls.get_conda_init_path"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Environment.Environment.get_conda_init_path"], ["@", "MiscUtils", ".", "classproperty", "\n", "def", "conda_init_path", "(", "cls", ")", ":", "\n", "        ", "if", "cls", ".", "conda_init_path_cached", "is", "None", ":", "\n", "            ", "cls", ".", "conda_init_path_cached", "=", "cls", ".", "get_conda_init_path", "(", ")", "\n", "", "return", "cls", ".", "conda_init_path_cached", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Environment.Environment.get_cuda_version": [[38, 55], ["seutil.BashUtils.run().stdout.strip", "len", "seutil.BashUtils.run().stdout.strip", "seutil.BashUtils.run().stdout.strip.startswith", "seutil.BashUtils.run().stdout.strip.startswith", "seutil.BashUtils.run", "seutil.BashUtils.run().stdout.strip.startswith", "seutil.BashUtils.run", "seutil.BashUtils.run().stdout.strip.startswith", "RuntimeError"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_cuda_version", "(", "cls", ")", "->", "str", ":", "\n", "        ", "which_nvidia_smi", "=", "BashUtils", ".", "run", "(", "\"which nvidia-smi\"", ")", ".", "stdout", ".", "strip", "(", ")", "\n", "if", "len", "(", "which_nvidia_smi", ")", "==", "0", ":", "\n", "            ", "return", "\"cpu\"", "\n", "", "else", ":", "\n", "            ", "cuda_version_number", "=", "BashUtils", ".", "run", "(", "r'nvcc -V | grep \"release\" | sed -E \"s/.*release ([^,]+),.*/\\1/\"'", ")", ".", "stdout", ".", "strip", "(", ")", "\n", "if", "cuda_version_number", ".", "startswith", "(", "\"10.0\"", ")", ":", "\n", "                ", "return", "\"cu100\"", "\n", "", "elif", "cuda_version_number", ".", "startswith", "(", "\"10.1\"", ")", ":", "\n", "                ", "return", "\"cu101\"", "\n", "", "elif", "cuda_version_number", ".", "startswith", "(", "\"10.2\"", ")", ":", "\n", "                ", "return", "\"cu102\"", "\n", "", "elif", "cuda_version_number", ".", "startswith", "(", "\"11.0\"", ")", ":", "\n", "                ", "return", "\"cu110\"", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"Unsupported cuda version {cuda_version_number}!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Environment.Environment.cuda_version": [[58, 63], ["cls.get_cuda_version"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Environment.Environment.get_cuda_version"], ["@", "MiscUtils", ".", "classproperty", "\n", "def", "cuda_version", "(", "cls", ")", ":", "\n", "        ", "if", "cls", ".", "cuda_version_cached", "is", "None", ":", "\n", "            ", "cls", ".", "cuda_version_cached", "=", "cls", ".", "get_cuda_version", "(", ")", "\n", "", "return", "cls", ".", "cuda_version_cached", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Environment.Environment.get_cuda_toolkit_spec": [[64, 79], ["RuntimeError"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_cuda_toolkit_spec", "(", "cls", ")", ":", "\n", "        ", "cuda_version", "=", "cls", ".", "cuda_version", "\n", "if", "cuda_version", "==", "\"cpu\"", ":", "\n", "            ", "return", "\"cpuonly\"", "\n", "", "elif", "cuda_version", "==", "\"cu100\"", ":", "\n", "            ", "return", "\"cudatoolkit=10.1\"", "\n", "", "elif", "cuda_version", "==", "\"cu101\"", ":", "\n", "            ", "return", "\"cudatoolkit=10.1\"", "\n", "", "elif", "cuda_version", "==", "\"cu102\"", ":", "\n", "            ", "return", "\"cudatoolkit=10.2\"", "\n", "", "elif", "cuda_version", "==", "\"cu110\"", ":", "\n", "            ", "return", "\"cudatoolkit=11.0\"", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Unexpected cuda version {cuda_version}!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Environment.Environment.require_collector": [[87, 99], ["cls.logger.info", "cls.logger.debug", "seutil.IOUtils.cd", "seutil.BashUtils.run"], "methods", ["None"], ["@", "classmethod", "\n", "def", "require_collector", "(", "cls", ")", ":", "\n", "        ", "if", "cls", ".", "is_parallel", ":", "\n", "            ", "return", "\n", "", "if", "not", "cls", ".", "collector_installed", ":", "\n", "            ", "cls", ".", "logger", ".", "info", "(", "\"Require collector, installing ...\"", ")", "\n", "with", "IOUtils", ".", "cd", "(", "Macros", ".", "collector_dir", ")", ":", "\n", "                ", "BashUtils", ".", "run", "(", "f\"mvn clean install -DskipTests\"", ",", "expected_return_code", "=", "0", ")", "\n", "", "cls", ".", "collector_installed", "=", "True", "\n", "", "else", ":", "\n", "            ", "cls", ".", "logger", ".", "debug", "(", "\"Require collector, and already installed\"", ")", "\n", "", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.DeepComHybridESE19.DeepComHybridESE19.prepare_env": [[57, 85], ["tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "pathlib.Path", "seutil.IOUtils.dump", "pathlib.Path.chmod", "print", "seutil.BashUtils.run", "tempfile.mktemp", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull"], ["@", "classmethod", "\n", "def", "prepare_env", "(", "cls", ")", ":", "\n", "        ", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "cls", ".", "SRC_DIR", ")", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda env remove --name {cls.ENV_NAME}\\n\"", "\n", "s", "+=", "f\"conda create --name {cls.ENV_NAME} python=3.7 pip -y\\n\"", "\n", "s", "+=", "f\"conda activate {cls.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd {cls.SRC_DIR}\\n\"", "\n", "if", "Environment", ".", "cuda_version", "==", "\"cpu\"", ":", "\n", "            ", "s", "+=", "f\"pip install tensorflow==1.15\\n\"", "\n", "", "else", ":", "\n", "            ", "s", "+=", "f\"pip install tensorflow-gpu==1.15\\n\"", "\n", "", "s", "+=", "f\"pip install -r requirements.txt\\n\"", "\n", "t", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "IOUtils", ".", "dump", "(", "t", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "t", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "print", "(", "f\"Preparing env for {__name__}...\"", ")", "\n", "rr", "=", "BashUtils", ".", "run", "(", "t", ")", "\n", "if", "rr", ".", "return_code", "==", "0", ":", "\n", "            ", "print", "(", "\"Success!\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Failed!\"", ")", "\n", "print", "(", "f\"STDOUT:\\n{rr.stdout}\"", ")", "\n", "print", "(", "f\"STDERR:\\n{rr.stderr}\"", ")", "\n", "print", "(", "f\"^^^ Preparing env for {__name__} failed!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.DeepComHybridESE19.DeepComHybridESE19.__init__": [[86, 109], ["tseval.util.ModelUtils.ModelUtils.get_random_seed", "tseval.comgen.model.CGModelBase.CGModelBase.__init__", "DeepComHybridESE19.DeepComHybridESE19Config", "DeepComHybridESE19.DeepComHybridESE19.SRC_DIR.is_dir", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.get_random_seed", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.__init__"], ["", "", "def", "__init__", "(", "\n", "self", ",", "\n", "model_work_dir", ":", "Path", ",", "\n", "no_save", ":", "bool", "=", "False", ",", "\n", "vocab_size", ":", "int", "=", "50_000", ",", "\n", "max_code_len", ":", "int", "=", "200", ",", "\n", "max_sbt_len", ":", "int", "=", "500", ",", "\n", "max_tgt_len", ":", "int", "=", "50", ",", "\n", "seed", ":", "int", "=", "ModelUtils", ".", "get_random_seed", "(", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_work_dir", ",", "no_save", ")", "\n", "if", "not", "self", ".", "SRC_DIR", ".", "is_dir", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Environment missing (expected at {self.SRC_DIR})\"", ")", "\n", "\n", "", "self", ".", "config", "=", "DeepComHybridESE19Config", "(", "\n", "vocab_size", "=", "vocab_size", ",", "\n", "max_code_len", "=", "max_code_len", ",", "\n", "max_sbt_len", "=", "max_sbt_len", ",", "\n", "max_tgt_len", "=", "max_tgt_len", ",", "\n", "seed", "=", "seed", ",", "\n", ")", "\n", "self", ".", "train_finished", "=", "False", "\n", "self", ".", "train_data_prepared", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.DeepComHybridESE19.DeepComHybridESE19.prepare_data": [[110, 168], ["sn_dir.mkdir", "seutil.IOUtils.dump", "pathlib.Path", "seutil.IOUtils.dump", "pathlib.Path.chmod", "seutil.BashUtils.run", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "tempfile.mktemp", "str", "d.misc[].replace", "seutil.IOUtils.load", "collections.Counter", "copy.copy", "seutil.IOUtils.dump", "l.split", "collections.Counter.most_common"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split"], ["", "def", "prepare_data", "(", "\n", "self", ",", "\n", "dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "data_dir", ":", "Path", ",", "\n", "sn", ":", "str", ",", "\n", "train", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "sn_dir", "=", "data_dir", "/", "sn", "\n", "sn_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "prefix", "=", "sn", "if", "train", "else", "\"test\"", "\n", "\n", "# code", "\n", "IOUtils", ".", "dump", "(", "\n", "sn_dir", "/", "f\"{prefix}.orig.code\"", ",", "\n", "[", "d", ".", "misc", "[", "\"orig_code\"", "]", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", "for", "d", "in", "dataset", "]", ",", "\n", "IOUtils", ".", "Format", ".", "txtList", ",", "\n", ")", "\n", "\n", "# process", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda activate {self.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd {self.SRC_DIR}/data_utils\\n\"", "\n", "s", "+=", "f\"python get_ast.py '{sn_dir}/{prefix}.orig.code' '{sn_dir}/{prefix}.token.code' '{sn_dir}/{prefix}.ast.json'\\n\"", "\n", "s", "+=", "f\"python ast_traversal.py '{sn_dir}/{prefix}.ast.json' '{sn_dir}/{prefix}.token.sbt'\\n\"", "\n", "script_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "IOUtils", ".", "dump", "(", "script_path", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "script_path", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "BashUtils", ".", "run", "(", "str", "(", "script_path", ")", ",", "0", ")", "\n", "\n", "# subtokenize code", "\n", "IOUtils", ".", "dump", "(", "\n", "sn_dir", "/", "f\"{prefix}.token.code\"", ",", "\n", "[", "\" \"", ".", "join", "(", "d", ".", "code", "[", ":", "self", ".", "config", ".", "max_code_len", "]", ")", "for", "d", "in", "dataset", "]", ",", "\n", "IOUtils", ".", "Format", ".", "txtList", ",", "\n", ")", "\n", "\n", "# subtokenized comment", "\n", "IOUtils", ".", "dump", "(", "\n", "sn_dir", "/", "f\"{prefix}.token.nl\"", ",", "\n", "[", "\" \"", ".", "join", "(", "d", ".", "comment_summary", "[", ":", "self", ".", "config", ".", "max_tgt_len", "]", ")", "for", "d", "in", "dataset", "]", ",", "\n", "IOUtils", ".", "Format", ".", "txtList", ",", "\n", ")", "\n", "\n", "# init vocab", "\n", "if", "train", ":", "\n", "            ", "for", "x", "in", "[", "\"code\"", ",", "\"sbt\"", ",", "\"nl\"", "]", ":", "\n", "                ", "subtokenized", "=", "IOUtils", ".", "load", "(", "sn_dir", "/", "f\"{prefix}.token.{x}\"", ",", "IOUtils", ".", "Format", ".", "txtList", ")", "\n", "vocab_counter", "=", "collections", ".", "Counter", "(", ")", "\n", "for", "l", "in", "subtokenized", ":", "\n", "                    ", "for", "t", "in", "l", ".", "split", "(", ")", ":", "\n", "                        ", "vocab_counter", "[", "t", "]", "+=", "1", "\n", "", "", "vocab", "=", "copy", ".", "copy", "(", "self", ".", "_START_VOCAB", ")", "\n", "vocab", "+=", "[", "x", "for", "x", ",", "_", "in", "vocab_counter", ".", "most_common", "(", ")", "]", "\n", "vocab", "=", "vocab", "[", ":", "self", ".", "config", ".", "vocab_size", "]", "\n", "IOUtils", ".", "dump", "(", "data_dir", "/", "f\"vocab.{x}\"", ",", "vocab", ",", "IOUtils", ".", "Format", ".", "txtList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.DeepComHybridESE19.DeepComHybridESE19.train": [[169, 255], ["seutil.IOUtils.load", "str", "str", "torch.cuda.is_available", "max", "seutil.IOUtils.dump", "DeepComHybridESE19.DeepComHybridESE19.fix_checkpoint_path", "seutil.IOUtils.dump", "script_path.chmod", "tseval.util.TrainConfig.TrainConfig", "seutil.IOUtils.rm_dir", "data_dir.mkdir", "DeepComHybridESE19.DeepComHybridESE19.prepare_data", "DeepComHybridESE19.DeepComHybridESE19.prepare_data", "seutil.IOUtils.cd", "len", "logger.info", "seutil.BashUtils.run", "RuntimeError", "logger.warning", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.DeepComHybridESE19.DeepComHybridESE19.fix_checkpoint_path", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.TransformerACL20.TransformerACL20.prepare_data", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.TransformerACL20.TransformerACL20.prepare_data"], ["", "", "", "def", "train", "(", "\n", "self", ",", "\n", "train_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "val_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "resources_path", ":", "Optional", "[", "Path", "]", "=", "None", ",", "\n", "train_config", ":", "Optional", "[", "TrainConfig", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "train_config", "is", "None", ":", "\n", "            ", "train_config", "=", "TrainConfig", "(", ")", "\n", "\n", "", "data_dir", "=", "self", ".", "model_work_dir", "/", "\"data\"", "\n", "if", "not", "self", ".", "train_data_prepared", ":", "\n", "            ", "IOUtils", ".", "rm_dir", "(", "data_dir", ")", "\n", "data_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "self", ".", "prepare_data", "(", "train_dataset", ",", "data_dir", ",", "\"train\"", ",", "train", "=", "True", ")", "\n", "self", ".", "prepare_data", "(", "val_dataset", ",", "data_dir", ",", "\"dev\"", ")", "\n", "self", ".", "train_data_prepared", "=", "True", "\n", "\n", "# Prepare config", "\n", "", "config", "=", "IOUtils", ".", "load", "(", "self", ".", "SRC_DIR", "/", "\"config\"", "/", "\"config.yaml\"", ",", "IOUtils", ".", "Format", ".", "yaml", ")", "\n", "config", "[", "\"data_dir\"", "]", "=", "str", "(", "data_dir", ")", "\n", "model_dir", "=", "self", ".", "model_work_dir", "/", "\"model\"", "\n", "config", "[", "\"model_dir\"", "]", "=", "str", "(", "model_dir", ")", "\n", "config", "[", "\"dev_prefix\"", "]", "=", "[", "\"dev\"", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "config", "[", "\"gpu_id\"", "]", "=", "train_config", ".", "gpu_id", "\n", "", "else", ":", "\n", "            ", "config", "[", "\"no_gpu\"", "]", "=", "True", "\n", "\n", "", "for", "x", "in", "config", "[", "\"encoders\"", "]", ":", "\n", "            ", "if", "x", "[", "\"name\"", "]", "==", "\"code\"", ":", "\n", "                ", "x", "[", "\"max_len\"", "]", "=", "self", ".", "config", ".", "max_code_len", "\n", "", "if", "x", "[", "\"name\"", "]", "==", "\"sbt\"", ":", "\n", "                ", "x", "[", "\"max_len\"", "]", "=", "self", ".", "config", ".", "max_sbt_len", "\n", "", "", "for", "x", "in", "config", "[", "\"decoders\"", "]", ":", "\n", "            ", "if", "x", "[", "\"name\"", "]", "==", "\"nl\"", ":", "\n", "                ", "x", "[", "\"max_len\"", "]", "=", "self", ".", "config", ".", "max_tgt_len", "\n", "\n", "# Adjust checkpoint and validation to be per-epoch", "\n", "", "", "batch_size", "=", "config", "[", "\"batch_size\"", "]", "\n", "step_per_epoch", "=", "max", "(", "len", "(", "train_dataset", ")", "//", "batch_size", ",", "1", ")", "\n", "config", "[", "\"steps_per_checkpoint\"", "]", "=", "step_per_epoch", "\n", "config", "[", "\"steps_per_eval\"", "]", "=", "step_per_epoch", "\n", "\n", "config_path", "=", "self", ".", "model_work_dir", "/", "\"DeepCom-config.yaml\"", "\n", "IOUtils", ".", "dump", "(", "config_path", ",", "config", ",", "IOUtils", ".", "Format", ".", "yaml", ")", "\n", "\n", "# Prepare script", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda activate {self.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd '{self.SRC_DIR}/source code'\\n\"", "\n", "s", "+=", "f\"\"\"timeout {train_config.train_session_time} python __main__.py {config_path} \\\\\n            --train \\\\\n            -v \\\\\n            --tf-seed {self.config.seed} \\\\\n            --seed {self.config.seed}\n        \"\"\"", "\n", "\n", "self", ".", "fix_checkpoint_path", "(", ")", "\n", "\n", "script_path", "=", "self", ".", "model_work_dir", "/", "\"train.sh\"", "\n", "stdout_path", "=", "self", ".", "model_work_dir", "/", "\"train.stdout\"", "\n", "stderr_path", "=", "self", ".", "model_work_dir", "/", "\"train.stderr\"", "\n", "IOUtils", ".", "dump", "(", "script_path", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "script_path", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "\n", "with", "IOUtils", ".", "cd", "(", "self", ".", "model_work_dir", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "logger", ".", "info", "(", "f\"=====Starting train\\nScript: {script_path}\\nSTDOUT: {stdout_path}\\nSTDERR: {stderr_path}\\n=====\"", ")", "\n", "rr", "=", "BashUtils", ".", "run", "(", "f\"{script_path} 1>{stdout_path} 2>{stderr_path}\"", ",", "timeout", "=", "train_config", ".", "train_session_time", ")", "\n", "if", "rr", ".", "return_code", "!=", "0", ":", "\n", "                    ", "raise", "RuntimeError", "(", "f\"Train returned {rr.return_code}; check STDERR at {stderr_path}\"", ")", "\n", "", "", "except", "(", "TimeoutExpired", ",", "KeyboardInterrupt", ")", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Training not finished\"", ")", "\n", "self", ".", "train_finished", "=", "False", "\n", "return", "\n", "", "except", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"Error during training!\"", ")", "\n", "raise", "\n", "\n", "# If we can reach here, training should be finished", "\n", "", "", "self", ".", "train_finished", "=", "True", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.DeepComHybridESE19.DeepComHybridESE19.is_train_finished": [[256, 258], ["None"], "methods", ["None"], ["", "def", "is_train_finished", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "train_finished", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.DeepComHybridESE19.DeepComHybridESE19.predict": [[259, 265], ["DeepComHybridESE19.DeepComHybridESE19.batch_predict"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.batch_predict"], ["", "def", "predict", "(", "\n", "self", ",", "\n", "data", ":", "MethodData", ",", "\n", "gpu_id", ":", "int", "=", "0", ",", "\n", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "self", ".", "batch_predict", "(", "[", "data", "]", ",", "gpu_id", "=", "gpu_id", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.DeepComHybridESE19.DeepComHybridESE19.batch_predict": [[266, 331], ["pathlib.Path", "enumerate", "DeepComHybridESE19.DeepComHybridESE19.prepare_data", "seutil.IOUtils.load", "str", "pathlib.Path", "str", "torch.cuda.is_available", "seutil.IOUtils.dump", "pathlib.Path", "DeepComHybridESE19.DeepComHybridESE19.fix_checkpoint_path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "seutil.IOUtils.dump", "pathlib.Path.chmod", "seutil.IOUtils.rm_dir", "seutil.IOUtils.rm", "seutil.IOUtils.rm", "seutil.IOUtils.rm", "seutil.IOUtils.rm", "seutil.IOUtils.rm", "tempfile.mkdtemp", "tempfile.mktemp", "tempfile.mktemp", "tempfile.mktemp", "tempfile.mktemp", "tempfile.mktemp", "seutil.IOUtils.cd", "logger.info", "seutil.BashUtils.run", "x.split", "str", "RuntimeError", "seutil.IOUtils.load"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.TransformerACL20.TransformerACL20.prepare_data", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.DeepComHybridESE19.DeepComHybridESE19.fix_checkpoint_path", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "def", "batch_predict", "(", "\n", "self", ",", "\n", "dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "tbar", ":", "Optional", "[", "tqdm", "]", "=", "None", ",", "\n", "gpu_id", ":", "int", "=", "0", ",", "\n", ")", "->", "List", "[", "List", "[", "str", "]", "]", ":", "\n", "# Prepare data", "\n", "        ", "data_dir", "=", "Path", "(", "tempfile", ".", "mkdtemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "\n", "# Use the dummy comment_summary field to carry id information, so that we know what ids are deleted", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "dataset", ")", ":", "\n", "            ", "d", ".", "comment_summary", "=", "[", "str", "(", "i", ")", "]", "\n", "", "self", ".", "prepare_data", "(", "dataset", ",", "data_dir", ",", "\"test\"", ",", "train", "=", "False", ")", "\n", "\n", "# Prepare config", "\n", "config", "=", "IOUtils", ".", "load", "(", "self", ".", "model_work_dir", "/", "\"DeepCom-config.yaml\"", ",", "IOUtils", ".", "Format", ".", "yaml", ")", "\n", "config", "[", "\"data_dir\"", "]", "=", "str", "(", "data_dir", ")", "\n", "config_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "config", "[", "\"model_dir\"", "]", "=", "str", "(", "self", ".", "model_work_dir", "/", "\"model\"", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "config", "[", "\"gpu_id\"", "]", "=", "gpu_id", "\n", "", "else", ":", "\n", "            ", "config", "[", "\"no_gpu\"", "]", "=", "True", "\n", "", "IOUtils", ".", "dump", "(", "config_path", ",", "config", ",", "IOUtils", ".", "Format", ".", "yaml", ")", "\n", "\n", "# Prepare script", "\n", "output_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda activate {self.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd '{self.SRC_DIR}/source code'\\n\"", "\n", "s", "+=", "f\"\"\"python __main__.py {config_path} \\\\\n            --decode test \\\\\n            --output {output_path}\n        \"\"\"", "\n", "\n", "self", ".", "fix_checkpoint_path", "(", ")", "\n", "\n", "script_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval.test.sh-\"", ")", ")", "\n", "stdout_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval.test.stdout-\"", ")", ")", "\n", "stderr_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval.test.stderr-\"", ")", ")", "\n", "IOUtils", ".", "dump", "(", "script_path", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "script_path", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "\n", "# Run predictions", "\n", "with", "IOUtils", ".", "cd", "(", "self", ".", "model_work_dir", ")", ":", "\n", "            ", "logger", ".", "info", "(", "f\"=====Starting eval\\nScript: {script_path}\\nSTDOUT: {stdout_path}\\nSTDERR: {stderr_path}\\n=====\"", ")", "\n", "rr", "=", "BashUtils", ".", "run", "(", "f\"{script_path} 1>{stdout_path} 2>{stderr_path}\"", ")", "\n", "if", "rr", ".", "return_code", "!=", "0", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"Eval returned {rr.return_code}; check STDERR at {stderr_path}\"", ")", "\n", "\n", "# Load predictions", "\n", "", "", "decode_res", "=", "[", "x", ".", "split", "(", ")", "for", "x", "in", "IOUtils", ".", "load", "(", "output_path", ",", "IOUtils", ".", "Format", ".", "txtList", ")", "]", "\n", "\n", "# Delete temp files", "\n", "IOUtils", ".", "rm_dir", "(", "data_dir", ")", "\n", "IOUtils", ".", "rm", "(", "script_path", ")", "\n", "IOUtils", ".", "rm", "(", "stdout_path", ")", "\n", "IOUtils", ".", "rm", "(", "stderr_path", ")", "\n", "IOUtils", ".", "rm", "(", "output_path", ")", "\n", "IOUtils", ".", "rm", "(", "config_path", ")", "\n", "\n", "return", "decode_res", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.DeepComHybridESE19.DeepComHybridESE19.save": [[332, 340], ["seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.jsonfy"], "methods", ["None"], ["", "def", "save", "(", "self", ")", "->", "None", ":", "\n", "# Save config and training status", "\n", "        ", "IOUtils", ".", "dump", "(", "self", ".", "model_work_dir", "/", "\"config.json\"", ",", "IOUtils", ".", "jsonfy", "(", "self", ".", "config", ")", ",", "IOUtils", ".", "Format", ".", "jsonPretty", ")", "\n", "IOUtils", ".", "dump", "(", "self", ".", "model_work_dir", "/", "\"train_finished.json\"", ",", "self", ".", "train_finished", ")", "\n", "IOUtils", ".", "dump", "(", "self", ".", "model_work_dir", "/", "\"train_data_prepared.json\"", ",", "self", ".", "train_data_prepared", ")", "\n", "\n", "# Model should already be saved/checkpointed to the correct path", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.DeepComHybridESE19.DeepComHybridESE19.load": [[341, 350], ["DeepComHybridESE19.DeepComHybridESE19", "seutil.IOUtils.dejsonfy", "seutil.IOUtils.load", "seutil.IOUtils.load", "seutil.IOUtils.load"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "model_work_dir", ")", "->", "\"CGModelBase\"", ":", "\n", "        ", "obj", "=", "DeepComHybridESE19", "(", "model_work_dir", ")", "\n", "obj", ".", "config", "=", "IOUtils", ".", "dejsonfy", "(", "IOUtils", ".", "load", "(", "model_work_dir", "/", "\"config.json\"", ")", ",", "DeepComHybridESE19Config", ")", "\n", "if", "(", "model_work_dir", "/", "\"train_finished.json\"", ")", ".", "exists", ":", "\n", "            ", "obj", ".", "train_finished", "=", "IOUtils", ".", "load", "(", "model_work_dir", "/", "\"train_finished.json\"", ")", "\n", "", "if", "(", "model_work_dir", "/", "\"train_data_prepared.json\"", ")", ".", "exists", ":", "\n", "            ", "obj", ".", "train_data_prepared", "=", "IOUtils", ".", "load", "(", "model_work_dir", "/", "\"train_data_prepared.json\"", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.DeepComHybridESE19.DeepComHybridESE19.fix_checkpoint_path": [[351, 368], ["checkpoint_file.exists", "seutil.IOUtils.load", "seutil.IOUtils.load.splitlines", "seutil.IOUtils.dump", "[].split", "line.replace", "str", "line.split"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split"], ["", "def", "fix_checkpoint_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Fixes the absolute path in checkpoints/checkpoint file, which would cause error\n        if the model has been moved around.\n        \"\"\"", "\n", "checkpoint_file", "=", "self", ".", "model_work_dir", "/", "\"model\"", "/", "\"checkpoints\"", "/", "\"checkpoint\"", "\n", "if", "checkpoint_file", ".", "exists", "(", ")", ":", "\n", "            ", "checkpoint_content", "=", "IOUtils", ".", "load", "(", "checkpoint_file", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "pattern", "=", "f\"/model/checkpoints/\"", "\n", "fixed_checkpoint_content", "=", "\"\"", "\n", "for", "line", "in", "checkpoint_content", ".", "splitlines", "(", ")", ":", "\n", "                ", "if", "pattern", "in", "line", ":", "\n", "                    ", "old_path", "=", "line", ".", "split", "(", "'\"'", ")", "[", "1", "]", ".", "split", "(", "pattern", ")", "[", "0", "]", "\n", "fixed_checkpoint_content", "+=", "line", ".", "replace", "(", "old_path", ",", "str", "(", "self", ".", "model_work_dir", ")", ")", "+", "\"\\n\"", "\n", "", "else", ":", "\n", "                    ", "fixed_checkpoint_content", "+=", "line", "+", "\"\\n\"", "\n", "", "", "IOUtils", ".", "dump", "(", "checkpoint_file", ",", "fixed_checkpoint_content", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.TransformerACL20.TransformerACL20.prepare_env": [[33, 62], ["tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "tseval.Environment.Environment.get_cuda_toolkit_spec", "pathlib.Path", "seutil.IOUtils.dump", "pathlib.Path.chmod", "print", "seutil.BashUtils.run", "tempfile.mktemp", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Environment.Environment.get_cuda_toolkit_spec"], ["@", "classmethod", "\n", "def", "prepare_env", "(", "cls", ")", ":", "\n", "        ", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "cls", ".", "SRC_DIR", ")", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda env remove --name {cls.ENV_NAME}\\n\"", "\n", "s", "+=", "f\"conda create --name {cls.ENV_NAME} python=3.7 pip -y\\n\"", "\n", "s", "+=", "f\"conda activate {cls.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd {cls.SRC_DIR}\\n\"", "\n", "# Pytorch 1.4.0 -> max cuda version 10.1", "\n", "cuda_toolkit_spec", "=", "Environment", ".", "get_cuda_toolkit_spec", "(", ")", "\n", "if", "cuda_toolkit_spec", "in", "[", "\"cudatoolkit=11.0\"", ",", "\"cudatoolkit=10.2\"", "]", ":", "\n", "            ", "cuda_toolkit_spec", "=", "\"cudatoolkit=10.1\"", "\n", "", "s", "+=", "f\"conda install -y pytorch==1.4.0 torchvision==0.5.0 {cuda_toolkit_spec} -c pytorch\\n\"", "\n", "s", "+=", "f\"pip install -r requirements.txt\\n\"", "\n", "t", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "IOUtils", ".", "dump", "(", "t", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "t", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "print", "(", "f\"Preparing env for {__name__}...\"", ")", "\n", "rr", "=", "BashUtils", ".", "run", "(", "t", ")", "\n", "if", "rr", ".", "return_code", "==", "0", ":", "\n", "            ", "print", "(", "\"Success!\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Failed!\"", ")", "\n", "print", "(", "f\"STDOUT:\\n{rr.stdout}\"", ")", "\n", "print", "(", "f\"STDERR:\\n{rr.stderr}\"", ")", "\n", "print", "(", "f\"^^^ Preparing env for {__name__} failed!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.TransformerACL20.TransformerACL20.__init__": [[63, 83], ["tseval.util.ModelUtils.ModelUtils.get_random_seed", "tseval.comgen.model.CGModelBase.CGModelBase.__init__", "TransformerACL20.TransformerACL20Config", "TransformerACL20.TransformerACL20.SRC_DIR.is_dir", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.get_random_seed", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.__init__"], ["", "", "def", "__init__", "(", "\n", "self", ",", "\n", "model_work_dir", ":", "Path", ",", "\n", "no_save", ":", "bool", "=", "False", ",", "\n", "max_src_len", ":", "int", "=", "150", ",", "\n", "max_tgt_len", ":", "int", "=", "50", ",", "\n", "use_rnn", ":", "bool", "=", "False", ",", "\n", "seed", ":", "int", "=", "ModelUtils", ".", "get_random_seed", "(", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_work_dir", ",", "no_save", ")", "\n", "if", "not", "self", ".", "SRC_DIR", ".", "is_dir", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Environment missing (expected at {self.SRC_DIR})\"", ")", "\n", "\n", "", "self", ".", "config", "=", "TransformerACL20Config", "(", "\n", "max_src_len", "=", "max_src_len", ",", "\n", "max_tgt_len", "=", "max_tgt_len", ",", "\n", "use_rnn", "=", "use_rnn", ",", "\n", "seed", "=", "seed", ",", "\n", ")", "\n", "self", ".", "train_finished", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.TransformerACL20.TransformerACL20.prepare_data": [[84, 108], ["seutil.IOUtils.rm_dir", "sn_dir.mkdir", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "open", "tseval.util.ModelUtils.ModelUtils.regroup_subtokens", "f.write"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.regroup_subtokens"], ["", "def", "prepare_data", "(", "self", ",", "dataset", ":", "List", "[", "MethodData", "]", ",", "data_dir", ":", "Path", ",", "sn", ":", "str", ")", ":", "\n", "        ", "sn_dir", "=", "data_dir", "/", "\"java\"", "/", "sn", "\n", "IOUtils", ".", "rm_dir", "(", "sn_dir", ")", "\n", "sn_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "# subtokenized code", "\n", "IOUtils", ".", "dump", "(", "\n", "sn_dir", "/", "\"code.original_subtoken\"", ",", "\n", "[", "\" \"", ".", "join", "(", "d", ".", "code", "[", ":", "self", ".", "config", ".", "max_src_len", "]", ")", "for", "d", "in", "dataset", "]", ",", "\n", "IOUtils", ".", "Format", ".", "txtList", ",", "\n", ")", "\n", "\n", "# subtokenized comment", "\n", "IOUtils", ".", "dump", "(", "\n", "sn_dir", "/", "\"javadoc.original\"", ",", "\n", "[", "\" \"", ".", "join", "(", "d", ".", "comment_summary", "[", ":", "self", ".", "config", ".", "max_tgt_len", "]", ")", "for", "d", "in", "dataset", "]", ",", "\n", "IOUtils", ".", "Format", ".", "txtList", ",", "\n", ")", "\n", "\n", "# tokenized code", "\n", "with", "open", "(", "sn_dir", "/", "\"code.original\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "for", "d", "in", "dataset", ":", "\n", "                ", "tokens", "=", "ModelUtils", ".", "regroup_subtokens", "(", "d", ".", "code", ",", "d", ".", "misc", "[", "\"code_src_ids\"", "]", ")", "\n", "f", ".", "write", "(", "\" \"", ".", "join", "(", "tokens", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.TransformerACL20.TransformerACL20.train": [[109, 223], ["seutil.IOUtils.dump", "script_path.chmod", "seutil.IOUtils.rm", "tseval.util.TrainConfig.TrainConfig", "data_dir.is_dir", "data_dir.mkdir", "TransformerACL20.TransformerACL20.prepare_data", "TransformerACL20.TransformerACL20.prepare_data", "seutil.IOUtils.cd", "logger.info", "seutil.BashUtils.run", "RuntimeError", "logger.warning", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.TransformerACL20.TransformerACL20.prepare_data", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.TransformerACL20.TransformerACL20.prepare_data"], ["", "", "", "def", "train", "(", "\n", "self", ",", "\n", "train_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "val_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "resources_path", ":", "Optional", "[", "Path", "]", "=", "None", ",", "\n", "train_config", ":", "TrainConfig", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "train_config", "is", "None", ":", "\n", "            ", "train_config", "=", "TrainConfig", "(", ")", "\n", "\n", "# Prepare data", "\n", "", "data_dir", "=", "self", ".", "model_work_dir", "/", "\"data\"", "\n", "if", "not", "data_dir", ".", "is_dir", "(", ")", ":", "\n", "            ", "data_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "self", ".", "prepare_data", "(", "train_dataset", ",", "data_dir", ",", "\"train\"", ")", "\n", "self", ".", "prepare_data", "(", "val_dataset", ",", "data_dir", ",", "\"dev\"", ")", "\n", "\n", "# Prepare script", "\n", "", "model_dir", "=", "self", ".", "model_work_dir", "/", "\"model\"", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda activate {self.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd {self.SRC_DIR}\\n\"", "\n", "s", "+=", "f\"\"\"MKL_THREADING_LAYER=GNU CUDA_VISIBLE_DEVICES={train_config.gpu_id} timeout {train_config.train_session_time} python -W ignore '{self.SRC_DIR}/main/train.py' \\\\\n               --data_workers 5 \\\\\n               --dataset_name java \\\\\n               --data_dir '{data_dir}/' \\\\\n               --model_dir '{model_dir}' \\\\\n               --model_name model \\\\\n               --train_src train/code.original_subtoken \\\\\n               --train_tgt train/javadoc.original \\\\\n               --dev_src dev/code.original_subtoken \\\\\n               --dev_tgt dev/javadoc.original \\\\\n               --uncase True \\\\\n               --use_src_word True \\\\\n               --use_src_char False \\\\\n               --use_tgt_word True \\\\\n               --use_tgt_char False \\\\\n               --max_src_len {self.config.max_src_len} \\\\\n               --max_tgt_len {self.config.max_tgt_len} \\\\\n               --emsize 512 \\\\\n               --fix_embeddings False \\\\\n               --src_vocab_size 50000 \\\\\n               --tgt_vocab_size 30000 \\\\\n               --share_decoder_embeddings True \\\\\n               --max_examples -1 \\\\\n               --batch_size 32 \\\\\n               --test_batch_size 64 \\\\\n               --num_epochs 200 \\\\\n               --dropout_emb 0.2 \\\\\n               --dropout 0.2 \\\\\n               --copy_attn True \\\\\n               --early_stop 20 \\\\\n               --optimizer adam \\\\\n               --lr_decay 0.99 \\\\\n               --valid_metric bleu \\\\\n               --checkpoint True \\\\\n               --random_seed {self.config.seed} \\\\\n            \"\"\"", "\n", "\n", "if", "not", "self", ".", "config", ".", "use_rnn", ":", "\n", "            ", "s", "+=", "\"\"\"--model_type transformer \\\\\n               --num_head 8 \\\\\n               --d_k 64 \\\\\n               --d_v 64 \\\\\n               --d_ff 2048 \\\\\n               --src_pos_emb False \\\\\n               --tgt_pos_emb True \\\\\n               --max_relative_pos 32 \\\\\n               --use_neg_dist True \\\\\n               --nlayers 6 \\\\\n               --trans_drop 0.2 \\\\\n               --warmup_steps 2000 \\\\\n               --learning_rate 0.0001\n            \"\"\"", "\n", "", "else", ":", "\n", "            ", "s", "+=", "\"\"\"--model_type rnn \\\\\n               --conditional_decoding False \\\\\n               --nhid 512 \\\\\n               --nlayers 2 \\\\\n               --use_all_enc_layers False \\\\\n               --dropout_rnn 0.2 \\\\\n               --reuse_copy_attn True \\\\\n               --learning_rate 0.002 \\\\\n               --grad_clipping 5.0\n            \"\"\"", "\n", "\n", "", "script_path", "=", "self", ".", "model_work_dir", "/", "\"train.sh\"", "\n", "stdout_path", "=", "self", ".", "model_work_dir", "/", "\"train.stdout\"", "\n", "stderr_path", "=", "self", ".", "model_work_dir", "/", "\"train.stderr\"", "\n", "IOUtils", ".", "dump", "(", "script_path", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "script_path", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "\n", "with", "IOUtils", ".", "cd", "(", "self", ".", "model_work_dir", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "logger", ".", "info", "(", "f\"=====Starting train\\nScript: {script_path}\\nSTDOUT: {stdout_path}\\nSTDERR: {stderr_path}\\n=====\"", ")", "\n", "rr", "=", "BashUtils", ".", "run", "(", "f\"{script_path} 1>{stdout_path} 2>{stderr_path}\"", ",", "timeout", "=", "train_config", ".", "train_session_time", ")", "\n", "if", "rr", ".", "return_code", "!=", "0", ":", "\n", "                    ", "raise", "RuntimeError", "(", "f\"Train returned {rr.return_code}; check STDERR at {stderr_path}\"", ")", "\n", "", "", "except", "(", "TimeoutExpired", ",", "KeyboardInterrupt", ")", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Training not finished\"", ")", "\n", "self", ".", "train_finished", "=", "False", "\n", "return", "\n", "", "except", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"Error during training!\"", ")", "\n", "raise", "\n", "\n", "# If we can reach here, training should be finished", "\n", "", "", "self", ".", "train_finished", "=", "True", "\n", "# Remove the big checkpoint file", "\n", "IOUtils", ".", "rm", "(", "model_dir", "/", "\"model.mdl.checkpoint\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.TransformerACL20.TransformerACL20.is_train_finished": [[224, 226], ["None"], "methods", ["None"], ["", "def", "is_train_finished", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "train_finished", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.TransformerACL20.TransformerACL20.predict": [[227, 229], ["TransformerACL20.TransformerACL20.batch_predict"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.batch_predict"], ["", "def", "predict", "(", "self", ",", "data", ":", "MethodData", ",", "gpu_id", ":", "int", "=", "0", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "self", ".", "batch_predict", "(", "[", "data", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.TransformerACL20.TransformerACL20.batch_predict": [[230, 303], ["pathlib.Path", "enumerate", "TransformerACL20.TransformerACL20.prepare_data", "pathlib.Path", "pathlib.Path", "pathlib.Path", "seutil.IOUtils.dump", "pathlib.Path.chmod", "seutil.IOUtils.load", "seutil.IOUtils.rm_dir", "seutil.IOUtils.rm", "seutil.IOUtils.rm", "seutil.IOUtils.rm", "tempfile.mkdtemp", "tempfile.mktemp", "tempfile.mktemp", "tempfile.mktemp", "seutil.IOUtils.cd", "logger.info", "seutil.BashUtils.run", "[].split", "str", "RuntimeError", "range", "len", "int"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.TransformerACL20.TransformerACL20.prepare_data", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split"], ["", "def", "batch_predict", "(", "\n", "self", ",", "\n", "dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "tbar", ":", "Optional", "[", "tqdm", "]", "=", "None", ",", "\n", "gpu_id", ":", "int", "=", "0", ",", "\n", ")", "->", "List", "[", "List", "[", "str", "]", "]", ":", "\n", "# Prepare data", "\n", "        ", "data_dir", "=", "Path", "(", "tempfile", ".", "mkdtemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "\n", "# Use the dummy comment_summary field to carry id information, so that we know what ids are deleted", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "dataset", ")", ":", "\n", "            ", "d", ".", "comment_summary", "=", "[", "str", "(", "i", ")", "]", "\n", "", "self", ".", "prepare_data", "(", "dataset", ",", "data_dir", ",", "\"test\"", ")", "\n", "\n", "# Prepare script", "\n", "model_dir", "=", "self", ".", "model_work_dir", "/", "\"model\"", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda activate {self.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd {self.SRC_DIR}\\n\"", "\n", "# Reducing test_batch_size to 4, otherwise it will delete some test data due to some bug", "\n", "s", "+=", "f\"\"\"MKL_THREADING_LAYER=GNU CUDA_VISIBLE_DEVICES={gpu_id} python -W ignore '{self.SRC_DIR}/main/test.py' \\\\\n               --data_workers 5 \\\\\n               --dataset_name java \\\\\n               --data_dir '{data_dir}/' \\\\\n               --model_dir '{model_dir}' \\\\\n               --model_name model \\\\\n               --dev_src test/code.original_subtoken \\\\\n               --dev_tgt test/javadoc.original \\\\\n               --uncase True \\\\\n               --max_examples -1 \\\\\n               --max_src_len {self.config.max_src_len} \\\\\n               --max_tgt_len {self.config.max_tgt_len} \\\\\n               --test_batch_size 4 \\\\\n               --beam_size 4 \\\\\n               --n_best 1 \\\\\n               --block_ngram_repeat 3 \\\\\n               --stepwise_penalty False \\\\\n               --coverage_penalty none \\\\\n               --length_penalty none \\\\\n               --beta 0 \\\\\n               --gamma 0 \\\\\n               --replace_unk\n            \"\"\"", "\n", "\n", "script_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval.test.sh-\"", ")", ")", "\n", "stdout_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval.test.stdout-\"", ")", ")", "\n", "stderr_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval.test.stderr-\"", ")", ")", "\n", "IOUtils", ".", "dump", "(", "script_path", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "script_path", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "\n", "# Run predictions", "\n", "with", "IOUtils", ".", "cd", "(", "self", ".", "model_work_dir", ")", ":", "\n", "            ", "logger", ".", "info", "(", "f\"=====Starting eval\\nScript: {script_path}\\nSTDOUT: {stdout_path}\\nSTDERR: {stderr_path}\\n=====\"", ")", "\n", "rr", "=", "BashUtils", ".", "run", "(", "f\"{script_path} 1>{stdout_path} 2>{stderr_path}\"", ")", "\n", "if", "rr", ".", "return_code", "!=", "0", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"Eval returned {rr.return_code}; check STDERR at {stderr_path}\"", ")", "\n", "\n", "# Load predictions", "\n", "", "", "beam_res", "=", "IOUtils", ".", "load", "(", "model_dir", "/", "\"model_beam.json\"", ",", "IOUtils", ".", "Format", ".", "jsonList", ")", "\n", "predictions", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "for", "x", "in", "beam_res", ":", "\n", "            ", "predictions", "[", "int", "(", "x", "[", "\"references\"", "]", "[", "0", "]", ")", "]", "=", "x", "[", "\"predictions\"", "]", "[", "0", "]", ".", "split", "(", "\" \"", ")", "\n", "\n", "# Delete temp files", "\n", "", "IOUtils", ".", "rm_dir", "(", "data_dir", ")", "\n", "IOUtils", ".", "rm", "(", "script_path", ")", "\n", "IOUtils", ".", "rm", "(", "stdout_path", ")", "\n", "IOUtils", ".", "rm", "(", "stderr_path", ")", "\n", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.TransformerACL20.TransformerACL20.save": [[304, 311], ["seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.jsonfy"], "methods", ["None"], ["", "def", "save", "(", "self", ")", "->", "None", ":", "\n", "# Save config and training status", "\n", "        ", "IOUtils", ".", "dump", "(", "self", ".", "model_work_dir", "/", "\"config.json\"", ",", "IOUtils", ".", "jsonfy", "(", "self", ".", "config", ")", ",", "IOUtils", ".", "Format", ".", "jsonPretty", ")", "\n", "IOUtils", ".", "dump", "(", "self", ".", "model_work_dir", "/", "\"train_finished.json\"", ",", "self", ".", "train_finished", ")", "\n", "\n", "# Model should already be saved/checkpointed to the correct path", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.TransformerACL20.TransformerACL20.load": [[312, 318], ["TransformerACL20.TransformerACL20", "seutil.IOUtils.dejsonfy", "seutil.IOUtils.load", "seutil.IOUtils.load"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "model_work_dir", ")", "->", "\"CGModelBase\"", ":", "\n", "        ", "obj", "=", "TransformerACL20", "(", "model_work_dir", ")", "\n", "obj", ".", "config", "=", "IOUtils", ".", "dejsonfy", "(", "IOUtils", ".", "load", "(", "model_work_dir", "/", "\"config.json\"", ")", ",", "TransformerACL20Config", ")", "\n", "obj", ".", "train_finished", "=", "IOUtils", ".", "load", "(", "model_work_dir", "/", "\"train_finished.json\"", ")", "\n", "return", "obj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.__init__.get_model_cls": [[1, 10], ["ValueError"], "function", ["None"], ["import", "os", "\n", "import", "sys", "\n", "\n", "module_root", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "+", "\"/..\"", "\n", "if", "module_root", "not", "in", "sys", ".", "path", ":", "\n", "    ", "sys", ".", "path", ".", "insert", "(", "0", ",", "module_root", ")", "\n", "\n", "# Remove temporary names", "\n", "", "del", "os", "\n", "del", "sys", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.CGModelBase.CGModelBase.__init__": [[14, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_work_dir", ":", "Path", ",", "no_save", ":", "bool", "=", "False", ")", ":", "\n", "        ", "self", ".", "model_work_dir", "=", "model_work_dir", "\n", "self", ".", "no_save", "=", "no_save", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.CGModelBase.CGModelBase.train": [[18, 35], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "train", "(", "\n", "self", ",", "\n", "train_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "val_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "resources_path", ":", "Optional", "[", "Path", "]", "=", "None", ",", "\n", "train_config", ":", "Optional", "[", "TrainConfig", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Trains the model.\n\n        :param train_dataset: training set.\n        :param val_dataset: validation set.\n        :param resources_path: path to resources that could be shared by multiple model's training process,\n            e.g., pre-trained embeddings.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.CGModelBase.CGModelBase.is_train_finished": [[36, 39], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "is_train_finished", "(", "self", ")", "->", "bool", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.CGModelBase.CGModelBase.predict": [[40, 53], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "predict", "(", "\n", "self", ",", "\n", "data", ":", "MethodData", ",", "\n", "gpu_id", ":", "int", "=", "0", ",", "\n", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Predicts the comment summary given the context in data. The model should output\n        results with a confidence score in [0, 1].\n        :param data: the data, with its statements partially filled.\n        :return: a list of predicted comment summary tokens.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.CGModelBase.CGModelBase.batch_predict": [[54, 80], ["tbar.reset", "results.append", "len", "CGModelBase.CGModelBase.predict", "tbar.update"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.predict"], ["", "def", "batch_predict", "(", "\n", "self", ",", "\n", "dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "tbar", ":", "Optional", "[", "tqdm", "]", "=", "None", ",", "\n", "gpu_id", ":", "int", "=", "0", ",", "\n", ")", "->", "List", "[", "List", "[", "str", "]", "]", ":", "\n", "        ", "\"\"\"\n        Performs batched predictions using given dataset as inputs.\n\n        The default implementation invokes #predict multiple times. Subclass can override\n        this method to speed up the prediction by using batching.\n\n        :param dataset: a list of inputs.\n        :param tbar: an optional tqdm progress bar to show prediction progress.\n        :return: a list of the return value of #predict.\n        \"\"\"", "\n", "if", "tbar", "is", "not", "None", ":", "\n", "            ", "tbar", ".", "reset", "(", "len", "(", "dataset", ")", ")", "\n", "\n", "", "results", "=", "[", "]", "\n", "for", "data", "in", "dataset", ":", "\n", "            ", "results", ".", "append", "(", "self", ".", "predict", "(", "data", ",", "gpu_id", "=", "gpu_id", ")", ")", "\n", "if", "tbar", "is", "not", "None", ":", "\n", "                ", "tbar", ".", "update", "(", "1", ")", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.CGModelBase.CGModelBase.save": [[81, 88], ["seutil.IOUtils.dump"], "methods", ["None"], ["", "def", "save", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Saves the current model at the work_dir.\n        Default behavior is to serialize the entire object in model.pkl.\n        \"\"\"", "\n", "if", "not", "self", ".", "no_save", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "self", ".", "model_work_dir", "/", "\"model.pkl\"", ",", "self", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.CGModelBase.CGModelBase.load": [[89, 98], ["seutil.IOUtils.load"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "work_dir", ")", "->", "\"CGModelBase\"", ":", "\n", "        ", "\"\"\"\n        Loads a model from the work_dir.\n        Default behavior is to deserialize the object from model.pkl, with resetting its work_dir.\n        \"\"\"", "\n", "obj", "=", "IOUtils", ".", "load", "(", "work_dir", "/", "\"model.pkl\"", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "obj", ".", "model_work_dir", "=", "work_dir", "\n", "return", "obj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2SeqICLR19.Code2SeqICLR19.prepare_env": [[38, 67], ["tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "pathlib.Path", "seutil.IOUtils.dump", "pathlib.Path.chmod", "print", "seutil.BashUtils.run", "tempfile.mktemp", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull"], ["@", "classmethod", "\n", "def", "prepare_env", "(", "cls", ")", ":", "\n", "        ", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "cls", ".", "SRC_DIR", ")", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda env remove --name {cls.ENV_NAME}\\n\"", "\n", "s", "+=", "f\"conda create --name {cls.ENV_NAME} python=3.6 pip -y\\n\"", "\n", "s", "+=", "f\"conda activate {cls.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd {cls.SRC_DIR}\\n\"", "\n", "if", "Environment", ".", "cuda_version", "==", "\"cpu\"", ":", "\n", "            ", "s", "+=", "f\"pip install tensorflow==1.12.3\\n\"", "\n", "", "else", ":", "\n", "            ", "s", "+=", "f\"conda install cudatoolkit=9.0 cudnn=7.6.5 -y\\n\"", "\n", "s", "+=", "f\"pip install tensorflow-gpu==1.12.3\\n\"", "\n", "", "s", "+=", "f\"pip install -r requirements.txt\\n\"", "\n", "t", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "IOUtils", ".", "dump", "(", "t", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "t", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "print", "(", "f\"Preparing env for {__name__}...\"", ")", "\n", "rr", "=", "BashUtils", ".", "run", "(", "t", ")", "\n", "if", "rr", ".", "return_code", "==", "0", ":", "\n", "            ", "print", "(", "\"Success!\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Failed!\"", ")", "\n", "print", "(", "f\"STDOUT:\\n{rr.stdout}\"", ")", "\n", "print", "(", "f\"STDERR:\\n{rr.stderr}\"", ")", "\n", "print", "(", "f\"^^^ Preparing env for {__name__} failed!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2SeqICLR19.Code2SeqICLR19.__init__": [[68, 95], ["tseval.util.ModelUtils.ModelUtils.get_random_seed", "tseval.metnam.model.MNModelBase.MNModelBase.__init__", "Code2SeqICLR19.Code2SeqICLR19Config", "Code2SeqICLR19.Code2SeqICLR19.SRC_DIR.is_dir", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.get_random_seed", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.__init__"], ["", "", "def", "__init__", "(", "\n", "self", ",", "\n", "model_work_dir", ":", "Path", ",", "\n", "no_save", ":", "bool", "=", "False", ",", "\n", "seed", ":", "int", "=", "ModelUtils", ".", "get_random_seed", "(", ")", ",", "\n", "max_path_length", ":", "int", "=", "8", ",", "\n", "max_path_width", ":", "int", "=", "2", ",", "\n", "max_contexts", ":", "int", "=", "200", ",", "\n", "max_data_contexts", ":", "int", "=", "1000", ",", "\n", "subtoken_vocab_size", ":", "int", "=", "150000", ",", "\n", "target_vocab_size", ":", "int", "=", "25000", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_work_dir", ",", "no_save", ")", "\n", "if", "not", "self", ".", "SRC_DIR", ".", "is_dir", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Environment missing (expected at {self.SRC_DIR})\"", ")", "\n", "\n", "", "self", ".", "config", "=", "Code2SeqICLR19Config", "(", "\n", "seed", "=", "seed", ",", "\n", "max_path_length", "=", "max_path_length", ",", "\n", "max_path_width", "=", "max_path_width", ",", "\n", "max_contexts", "=", "max_contexts", ",", "\n", "max_data_contexts", "=", "max_data_contexts", ",", "\n", "subtoken_vocab_size", "=", "subtoken_vocab_size", ",", "\n", "target_vocab_size", "=", "target_vocab_size", ",", "\n", ")", "\n", "self", ".", "train_finished", "=", "False", "\n", "self", ".", "train_data_prepared", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2SeqICLR19.Code2SeqICLR19.output_source": [[96, 112], ["len", "seutil.IOUtils.dump"], "methods", ["None"], ["", "def", "output_source", "(", "self", ",", "dataset", ":", "List", "[", "MethodData", "]", ",", "output_dir", ":", "Path", ")", ":", "\n", "        ", "batch_size", "=", "500", "\n", "beg", "=", "0", "\n", "i", "=", "0", "\n", "while", "beg", "<", "len", "(", "dataset", ")", ":", "\n", "            ", "batch", "=", "dataset", "[", "beg", ":", "beg", "+", "batch_size", "]", "\n", "cname", "=", "f\"C{i:0>3d}\"", "\n", "i", "+=", "1", "\n", "# Use interface to allow all modifiers (including default) on methods", "\n", "s", "=", "f\"interface {cname} {{\\n\"", "\n", "for", "d", "in", "batch", ":", "\n", "                ", "s", "+=", "d", ".", "misc", "[", "\"orig_code\"", "]", "+", "\"\\n\\n\"", "\n", "", "s", "+=", "\"}\\n\"", "\n", "IOUtils", ".", "dump", "(", "output_dir", "/", "f\"{cname}.java\"", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "\n", "beg", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2SeqICLR19.Code2SeqICLR19.prepare_train_val_data": [[113, 178], ["pathlib.Path", "Code2SeqICLR19.Code2SeqICLR19.output_source", "pathlib.Path", "Code2SeqICLR19.Code2SeqICLR19.output_source", "seutil.IOUtils.rm", "pathlib.Path", "seutil.IOUtils.dump", "pathlib.Path.chmod", "seutil.BashUtils.run", "error_log.exists", "seutil.IOUtils.rm_dir", "seutil.IOUtils.rm", "seutil.IOUtils.rm_dir", "seutil.IOUtils.rm", "tempfile.mkdtemp", "tempfile.mkdtemp", "tempfile.mktemp", "str", "seutil.IOUtils.load().strip", "os.cpu_count", "os.cpu_count", "len", "logger.warning", "seutil.IOUtils.load"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.output_source", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.output_source", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "", "def", "prepare_train_val_data", "(", "\n", "self", ",", "\n", "train_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "val_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "data_dir", ":", "Path", ",", "\n", ")", ":", "\n", "# prepare", "\n", "        ", "train_source_dir", "=", "Path", "(", "tempfile", ".", "mkdtemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "self", ".", "output_source", "(", "train_dataset", ",", "train_source_dir", ")", "\n", "val_source_dir", "=", "Path", "(", "tempfile", ".", "mkdtemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "self", ".", "output_source", "(", "val_dataset", ",", "val_source_dir", ")", "\n", "train_data_file", "=", "data_dir", "/", "\"data.train.raw.txt\"", "\n", "val_data_file", "=", "data_dir", "/", "\"data.val.raw.txt\"", "\n", "tgt_hist_file", "=", "data_dir", "/", "\"data.histo.tgt.c2s\"", "\n", "subtok_hist_file", "=", "data_dir", "/", "\"data.histo.ori.c2s\"", "\n", "node_hist_file", "=", "data_dir", "/", "\"data.histo.node.c2s\"", "\n", "error_log", "=", "data_dir", "/", "\"error_log.txt\"", "\n", "IOUtils", ".", "rm", "(", "error_log", ")", "\n", "\n", "# process", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda activate {self.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd {self.SRC_DIR}\\n\"", "\n", "s", "+=", "f\"python JavaExtractor/extract.py --dir {val_source_dir}\"", "f\" --max_path_length {self.config.max_path_length}\"", "f\" --max_path_width {self.config.max_path_width}\"", "f\" --num_threads {os.cpu_count()}\"", "f\" --jar {self.EXTRACTOR_RELDIR}\"", "f\" > {val_data_file} 2>> {error_log}\\n\"", "\n", "s", "+=", "f\"python JavaExtractor/extract.py --dir {train_source_dir}\"", "f\" --max_path_length {self.config.max_path_length}\"", "f\" --max_path_width {self.config.max_path_width}\"", "f\" --num_threads {os.cpu_count()}\"", "f\" --jar {self.EXTRACTOR_RELDIR}\"", "f\" > {train_data_file} 2>> {error_log}\\n\"", "\n", "# Creating histograms from the training data", "\n", "s", "+=", "f\"cat {train_data_file} | cut -d' ' -f1 | tr '|' '\\\\n' | awk '{{n[$0]++}} END {{for (i in n) print i,n[i]}}' > {tgt_hist_file}\\n\"", "\n", "s", "+=", "f\"cat {train_data_file} | cut -d' ' -f2- | tr ' ' '\\\\n' | cut -d',' -f1,3 | tr ',|' '\\\\n' | awk '{{n[$0]++}} END {{for (i in n) print i,n[i]}}' > {subtok_hist_file}\\n\"", "\n", "s", "+=", "f\"cat {train_data_file} | cut -d' ' -f2- | tr ' ' '\\\\n' | cut -d',' -f2 | tr '|' '\\\\n' | awk '{{n[$0]++}} END {{for (i in n) print i,n[i]}}' > {node_hist_file}\\n\"", "\n", "s", "+=", "f\"python preprocess.py --train_data {train_data_file} --val_data {val_data_file}\"", "f\" --max_contexts {self.config.max_contexts}\"", "f\" --max_data_contexts {self.config.max_data_contexts}\"", "f\" --subtoken_vocab_size {self.config.subtoken_vocab_size}\"", "f\" --target_vocab_size {self.config.target_vocab_size}\"", "f\" --subtoken_histogram {subtok_hist_file}\"", "f\" --node_histogram {node_hist_file}\"", "f\" --target_histogram {tgt_hist_file}\"", "f\" --output_name {data_dir}/data\\n\"", "\n", "script_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "IOUtils", ".", "dump", "(", "script_path", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "script_path", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "BashUtils", ".", "run", "(", "str", "(", "script_path", ")", ",", "0", ")", "\n", "if", "error_log", ".", "exists", "(", ")", ":", "\n", "            ", "errors", "=", "IOUtils", ".", "load", "(", "error_log", ",", "IOUtils", ".", "Format", ".", "txt", ")", ".", "strip", "(", ")", "\n", "if", "len", "(", "errors", ")", ">", "0", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"There are errors during data processing!\\n{errors}\"", ")", "\n", "\n", "# delete temp files", "\n", "", "", "IOUtils", ".", "rm_dir", "(", "train_source_dir", ")", "\n", "IOUtils", ".", "rm", "(", "train_data_file", ")", "\n", "IOUtils", ".", "rm_dir", "(", "val_source_dir", ")", "\n", "IOUtils", ".", "rm", "(", "val_data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2SeqICLR19.Code2SeqICLR19.prepare_eval_data": [[179, 229], ["pathlib.Path", "Code2SeqICLR19.Code2SeqICLR19.output_source", "seutil.IOUtils.rm", "pathlib.Path", "seutil.IOUtils.dump", "pathlib.Path.chmod", "seutil.BashUtils.run", "error_log.exists", "seutil.IOUtils.rm_dir", "seutil.IOUtils.rm", "tempfile.mkdtemp", "tempfile.mktemp", "str", "seutil.IOUtils.load().strip", "os.cpu_count", "len", "logger.warning", "seutil.IOUtils.load"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.output_source", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "def", "prepare_eval_data", "(", "\n", "self", ",", "\n", "eval_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "data_dir", ":", "Path", ",", "\n", "train_data_dir", ":", "Path", ",", "\n", ")", ":", "\n", "# prepare", "\n", "        ", "eval_source_dir", "=", "Path", "(", "tempfile", ".", "mkdtemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "self", ".", "output_source", "(", "eval_dataset", ",", "eval_source_dir", ")", "\n", "eval_data_file", "=", "data_dir", "/", "\"data.eval.raw.txt\"", "\n", "tgt_hist_file", "=", "train_data_dir", "/", "\"data.histo.tgt.c2s\"", "\n", "subtok_hist_file", "=", "train_data_dir", "/", "\"data.histo.ori.c2s\"", "\n", "node_hist_file", "=", "train_data_dir", "/", "\"data.histo.node.c2s\"", "\n", "error_log", "=", "data_dir", "/", "\"error_log.txt\"", "\n", "IOUtils", ".", "rm", "(", "error_log", ")", "\n", "\n", "# process", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda activate {self.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd {self.SRC_DIR}\\n\"", "\n", "s", "+=", "f\"python JavaExtractor/extract.py --dir {eval_source_dir}\"", "f\" --max_path_length {self.config.max_path_length}\"", "f\" --max_path_width {self.config.max_path_width}\"", "f\" --num_threads {os.cpu_count()}\"", "f\" --jar {self.EXTRACTOR_RELDIR}\"", "f\" > {eval_data_file} 2>> {error_log}\\n\"", "\n", "s", "+=", "f\"python preprocess.py --test_data {eval_data_file}\"", "f\" --max_contexts {self.config.max_contexts}\"", "f\" --max_data_contexts {self.config.max_data_contexts}\"", "f\" --subtoken_vocab_size {self.config.subtoken_vocab_size}\"", "f\" --target_vocab_size {self.config.target_vocab_size}\"", "f\" --subtoken_histogram {subtok_hist_file}\"", "f\" --node_histogram {node_hist_file}\"", "f\" --target_histogram {tgt_hist_file}\"", "f\" --output_name {data_dir}/data\\n\"", "\n", "script_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "IOUtils", ".", "dump", "(", "script_path", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "script_path", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "BashUtils", ".", "run", "(", "str", "(", "script_path", ")", ",", "0", ")", "\n", "if", "error_log", ".", "exists", "(", ")", ":", "\n", "            ", "errors", "=", "IOUtils", ".", "load", "(", "error_log", ",", "IOUtils", ".", "Format", ".", "txt", ")", ".", "strip", "(", ")", "\n", "if", "len", "(", "errors", ")", ">", "0", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"There are errors during data processing!\\n{errors}\"", ")", "\n", "\n", "# delete temp files", "\n", "", "", "IOUtils", ".", "rm_dir", "(", "eval_source_dir", ")", "\n", "IOUtils", ".", "rm", "(", "eval_data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2SeqICLR19.Code2SeqICLR19.train": [[230, 293], ["model_dir.mkdir", "seutil.IOUtils.dump", "script_path.chmod", "tseval.util.TrainConfig.TrainConfig", "seutil.IOUtils.rm_dir", "data_dir.mkdir", "Code2SeqICLR19.Code2SeqICLR19.prepare_train_val_data", "seutil.IOUtils.load", "seutil.IOUtils.load.splitlines", "seutil.IOUtils.cd", "line.split", "RuntimeError", "logger.info", "seutil.BashUtils.run", "RuntimeError", "logger.warning", "logger.warning", "v[].split"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.prepare_train_val_data", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split"], ["", "def", "train", "(", "\n", "self", ",", "\n", "train_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "val_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "resources_path", ":", "Optional", "[", "Path", "]", "=", "None", ",", "\n", "train_config", ":", "TrainConfig", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "train_config", "is", "None", ":", "\n", "            ", "train_config", "=", "TrainConfig", "(", ")", "\n", "\n", "", "data_dir", "=", "self", ".", "model_work_dir", "/", "\"data\"", "\n", "if", "not", "self", ".", "train_data_prepared", ":", "\n", "            ", "IOUtils", ".", "rm_dir", "(", "data_dir", ")", "\n", "data_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "self", ".", "prepare_train_val_data", "(", "train_dataset", ",", "val_dataset", ",", "data_dir", ")", "\n", "self", ".", "train_data_prepared", "=", "True", "\n", "\n", "", "model_dir", "=", "self", ".", "model_work_dir", "/", "\"model\"", "\n", "model_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Prepare script", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda activate {self.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd {self.SRC_DIR}\\n\"", "\n", "if", "(", "model_dir", "/", "\"checkpoint\"", ")", ".", "exists", "(", ")", ":", "\n", "            ", "checkpoint_fcontent", "=", "IOUtils", ".", "load", "(", "model_dir", "/", "\"checkpoint\"", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "checkpoint", "=", "None", "\n", "for", "line", "in", "checkpoint_fcontent", ".", "splitlines", "(", ")", ":", "\n", "                ", "k", ",", "v", "=", "line", ".", "split", "(", "\":\"", ",", "1", ")", "\n", "if", "k", "==", "\"model_checkpoint_path\"", ":", "\n", "                    ", "checkpoint", "=", "v", "[", ":", "-", "1", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "", "", "if", "checkpoint", "is", "None", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Unable to get a checkpoint\"", ")", "\n", "", "s", "+=", "f\"CUDA_VISIBLE_DEVICES={train_config.gpu_id} timeout {train_config.train_session_time} python -u code2seq.py --data {data_dir}/data --test {data_dir}/data.val.c2s --save_prefix {model_dir}/model --load {model_dir}/{checkpoint}\\n\"", "\n", "", "else", ":", "\n", "            ", "s", "+=", "f\"CUDA_VISIBLE_DEVICES={train_config.gpu_id} timeout {train_config.train_session_time} python -u code2seq.py --data {data_dir}/data --test {data_dir}/data.val.c2s --save_prefix {model_dir}/model\\n\"", "\n", "\n", "", "script_path", "=", "self", ".", "model_work_dir", "/", "\"train.sh\"", "\n", "stdout_path", "=", "self", ".", "model_work_dir", "/", "\"train.stdout\"", "\n", "stderr_path", "=", "self", ".", "model_work_dir", "/", "\"train.stderr\"", "\n", "IOUtils", ".", "dump", "(", "script_path", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "script_path", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "\n", "with", "IOUtils", ".", "cd", "(", "self", ".", "model_work_dir", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "logger", ".", "info", "(", "f\"=====Starting train\\nScript: {script_path}\\nSTDOUT: {stdout_path}\\nSTDERR: {stderr_path}\\n=====\"", ")", "\n", "rr", "=", "BashUtils", ".", "run", "(", "f\"{script_path} 1>{stdout_path} 2>{stderr_path}\"", ",", "timeout", "=", "train_config", ".", "train_session_time", ")", "\n", "if", "rr", ".", "return_code", "!=", "0", ":", "\n", "                    ", "raise", "RuntimeError", "(", "f\"Train returned {rr.return_code}; check STDERR at {stderr_path}\"", ")", "\n", "", "", "except", "(", "TimeoutExpired", ",", "KeyboardInterrupt", ")", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Training not finished\"", ")", "\n", "self", ".", "train_finished", "=", "False", "\n", "return", "\n", "", "except", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"Error during training!\"", ")", "\n", "raise", "\n", "\n", "# If we can reach here, training should be finished", "\n", "", "", "self", ".", "train_finished", "=", "True", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2SeqICLR19.Code2SeqICLR19.is_train_finished": [[294, 296], ["None"], "methods", ["None"], ["", "def", "is_train_finished", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "train_finished", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2SeqICLR19.Code2SeqICLR19.predict": [[297, 299], ["Code2SeqICLR19.Code2SeqICLR19.batch_predict"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.batch_predict"], ["", "def", "predict", "(", "self", ",", "data", ":", "MethodData", ",", "gpu_id", ":", "int", "=", "0", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "self", ".", "batch_predict", "(", "[", "data", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2SeqICLR19.Code2SeqICLR19.batch_predict": [[300, 355], ["seutil.IOUtils.load", "seutil.IOUtils.load.splitlines", "pathlib.Path", "Code2SeqICLR19.Code2SeqICLR19.prepare_eval_data", "pathlib.Path", "pathlib.Path", "pathlib.Path", "seutil.IOUtils.dump", "pathlib.Path.chmod", "seutil.IOUtils.load", "seutil.IOUtils.load.splitlines", "seutil.IOUtils.rm_dir", "seutil.IOUtils.rm", "seutil.IOUtils.rm", "seutil.IOUtils.rm", "line.split", "RuntimeError", "tempfile.mkdtemp", "tempfile.mktemp", "tempfile.mktemp", "tempfile.mktemp", "seutil.IOUtils.cd", "logger.info", "seutil.BashUtils.run", "decode_res.append", "RuntimeError", "[].strip().split", "v[].split", "[].strip", "line.split"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.prepare_eval_data", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split"], ["", "def", "batch_predict", "(", "\n", "self", ",", "\n", "dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "tbar", ":", "Optional", "[", "tqdm", "]", "=", "None", ",", "\n", "gpu_id", ":", "int", "=", "0", ",", "\n", ")", "->", "List", "[", "List", "[", "str", "]", "]", ":", "\n", "# Figure out which checkpoint to load", "\n", "        ", "model_dir", "=", "self", ".", "model_work_dir", "/", "\"model\"", "\n", "checkpoint_fcontent", "=", "IOUtils", ".", "load", "(", "model_dir", "/", "\"checkpoint\"", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "checkpoint", "=", "None", "\n", "for", "line", "in", "checkpoint_fcontent", ".", "splitlines", "(", ")", ":", "\n", "            ", "k", ",", "v", "=", "line", ".", "split", "(", "\":\"", ",", "1", ")", "\n", "if", "k", "==", "\"model_checkpoint_path\"", ":", "\n", "                ", "checkpoint", "=", "v", "[", ":", "-", "1", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "", "", "if", "checkpoint", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Unable to get a checkpoint\"", ")", "\n", "\n", "# Prepare data", "\n", "", "data_dir", "=", "Path", "(", "tempfile", ".", "mkdtemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "self", ".", "prepare_eval_data", "(", "dataset", ",", "data_dir", ",", "self", ".", "model_work_dir", "/", "\"data\"", ")", "\n", "\n", "# Prepare script", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda activate {self.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd {self.SRC_DIR}\\n\"", "\n", "s", "+=", "f\"CUDA_VISIBLE_DEVICES={gpu_id} python -u code2seq.py --load {model_dir}/{checkpoint} --test {data_dir}/data.test.c2s\\n\"", "\n", "script_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval.test.sh-\"", ")", ")", "\n", "stdout_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval.test.stdout-\"", ")", ")", "\n", "stderr_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval.test.stderr-\"", ")", ")", "\n", "IOUtils", ".", "dump", "(", "script_path", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "script_path", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "\n", "# Run predictions", "\n", "with", "IOUtils", ".", "cd", "(", "self", ".", "model_work_dir", ")", ":", "\n", "            ", "logger", ".", "info", "(", "f\"=====Starting eval\\nScript: {script_path}\\nSTDOUT: {stdout_path}\\nSTDERR: {stderr_path}\\n=====\"", ")", "\n", "rr", "=", "BashUtils", ".", "run", "(", "f\"{script_path} 1>{stdout_path} 2>{stderr_path}\"", ")", "\n", "if", "rr", ".", "return_code", "!=", "0", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"Eval returned {rr.return_code}; check STDERR at {stderr_path}\"", ")", "\n", "\n", "# Load predictions", "\n", "", "", "res", "=", "IOUtils", ".", "load", "(", "model_dir", "/", "\"log.txt\"", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "decode_res", "=", "[", "]", "\n", "for", "line", "in", "res", ".", "splitlines", "(", ")", ":", "\n", "            ", "decode_res", ".", "append", "(", "line", ".", "split", "(", "\":\"", ")", "[", "-", "1", "]", ".", "strip", "(", ")", ".", "split", "(", "\"|\"", ")", ")", "\n", "\n", "# Clean up", "\n", "", "IOUtils", ".", "rm_dir", "(", "data_dir", ")", "\n", "IOUtils", ".", "rm", "(", "script_path", ")", "\n", "IOUtils", ".", "rm", "(", "stdout_path", ")", "\n", "IOUtils", ".", "rm", "(", "stderr_path", ")", "\n", "\n", "return", "decode_res", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2SeqICLR19.Code2SeqICLR19.save": [[356, 364], ["seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.jsonfy"], "methods", ["None"], ["", "def", "save", "(", "self", ")", "->", "None", ":", "\n", "# Save config and training status", "\n", "        ", "IOUtils", ".", "dump", "(", "self", ".", "model_work_dir", "/", "\"config.json\"", ",", "IOUtils", ".", "jsonfy", "(", "self", ".", "config", ")", ",", "IOUtils", ".", "Format", ".", "jsonPretty", ")", "\n", "IOUtils", ".", "dump", "(", "self", ".", "model_work_dir", "/", "\"train_finished.json\"", ",", "self", ".", "train_finished", ")", "\n", "IOUtils", ".", "dump", "(", "self", ".", "model_work_dir", "/", "\"train_data_prepared.json\"", ",", "self", ".", "train_data_prepared", ")", "\n", "\n", "# Model should already be saved/checkpointed to the correct path", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2SeqICLR19.Code2SeqICLR19.load": [[365, 374], ["Code2SeqICLR19.Code2SeqICLR19", "seutil.IOUtils.dejsonfy", "seutil.IOUtils.load", "seutil.IOUtils.load", "seutil.IOUtils.load"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "model_work_dir", ")", "->", "\"MNModelBase\"", ":", "\n", "        ", "obj", "=", "Code2SeqICLR19", "(", "model_work_dir", ")", "\n", "obj", ".", "config", "=", "IOUtils", ".", "dejsonfy", "(", "IOUtils", ".", "load", "(", "model_work_dir", "/", "\"config.json\"", ")", ",", "Code2SeqICLR19Config", ")", "\n", "if", "(", "model_work_dir", "/", "\"train_finished.json\"", ")", ".", "exists", ":", "\n", "            ", "obj", ".", "train_finished", "=", "IOUtils", ".", "load", "(", "model_work_dir", "/", "\"train_finished.json\"", ")", "\n", "", "if", "(", "model_work_dir", "/", "\"train_data_prepared.json\"", ")", ".", "exists", ":", "\n", "            ", "obj", ".", "train_data_prepared", "=", "IOUtils", ".", "load", "(", "model_work_dir", "/", "\"train_data_prepared.json\"", ")", "\n", "", "return", "obj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.prepare_env": [[38, 67], ["tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "pathlib.Path", "seutil.IOUtils.dump", "pathlib.Path.chmod", "print", "seutil.BashUtils.run", "tempfile.mktemp", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull"], ["@", "classmethod", "\n", "def", "prepare_env", "(", "cls", ")", ":", "\n", "        ", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "cls", ".", "SRC_DIR", ")", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda env remove --name {cls.ENV_NAME}\\n\"", "\n", "s", "+=", "f\"conda create --name {cls.ENV_NAME} python=3.6 pip -y\\n\"", "\n", "s", "+=", "f\"conda activate {cls.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd {cls.SRC_DIR}\\n\"", "\n", "if", "Environment", ".", "cuda_version", "==", "\"cpu\"", ":", "\n", "            ", "s", "+=", "f\"pip install tensorflow==2.0.0\\n\"", "\n", "", "else", ":", "\n", "            ", "s", "+=", "f\"conda install cudatoolkit=10.0 cudnn=7.6.5 -y\\n\"", "\n", "s", "+=", "f\"pip install tensorflow-gpu==2.0.0\\n\"", "\n", "", "s", "+=", "f\"pip install -r requirements.txt\\n\"", "\n", "t", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "IOUtils", ".", "dump", "(", "t", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "t", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "print", "(", "f\"Preparing env for {__name__}...\"", ")", "\n", "rr", "=", "BashUtils", ".", "run", "(", "t", ")", "\n", "if", "rr", ".", "return_code", "==", "0", ":", "\n", "            ", "print", "(", "\"Success!\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Failed!\"", ")", "\n", "print", "(", "f\"STDOUT:\\n{rr.stdout}\"", ")", "\n", "print", "(", "f\"STDERR:\\n{rr.stderr}\"", ")", "\n", "print", "(", "f\"^^^ Preparing env for {__name__} failed!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.__init__": [[68, 95], ["tseval.util.ModelUtils.ModelUtils.get_random_seed", "tseval.metnam.model.MNModelBase.MNModelBase.__init__", "Code2VecPOPL19.Code2VecPOPL19Config", "Code2VecPOPL19.Code2VecPOPL19.SRC_DIR.is_dir", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.get_random_seed", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.__init__"], ["", "", "def", "__init__", "(", "\n", "self", ",", "\n", "model_work_dir", ":", "Path", ",", "\n", "no_save", ":", "bool", "=", "False", ",", "\n", "seed", ":", "int", "=", "ModelUtils", ".", "get_random_seed", "(", ")", ",", "\n", "max_path_length", ":", "int", "=", "8", ",", "\n", "max_path_width", ":", "int", "=", "2", ",", "\n", "max_contexts", ":", "int", "=", "200", ",", "\n", "word_vocab_size", ":", "int", "=", "150000", ",", "\n", "path_vocab_size", ":", "int", "=", "150000", ",", "\n", "target_vocab_size", ":", "int", "=", "25000", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model_work_dir", ",", "no_save", ")", "\n", "if", "not", "self", ".", "SRC_DIR", ".", "is_dir", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Environment missing (expected at {self.SRC_DIR})\"", ")", "\n", "\n", "", "self", ".", "config", "=", "Code2VecPOPL19Config", "(", "\n", "seed", "=", "seed", ",", "\n", "max_path_length", "=", "max_path_length", ",", "\n", "max_path_width", "=", "max_path_width", ",", "\n", "max_contexts", "=", "max_contexts", ",", "\n", "word_vocab_size", "=", "word_vocab_size", ",", "\n", "path_vocab_size", "=", "path_vocab_size", ",", "\n", "target_vocab_size", "=", "target_vocab_size", ",", "\n", ")", "\n", "self", ".", "train_finished", "=", "False", "\n", "self", ".", "train_data_prepared", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.output_source": [[96, 112], ["len", "seutil.IOUtils.dump"], "methods", ["None"], ["", "def", "output_source", "(", "self", ",", "dataset", ":", "List", "[", "MethodData", "]", ",", "output_dir", ":", "Path", ")", ":", "\n", "        ", "batch_size", "=", "500", "\n", "beg", "=", "0", "\n", "i", "=", "0", "\n", "while", "beg", "<", "len", "(", "dataset", ")", ":", "\n", "            ", "batch", "=", "dataset", "[", "beg", ":", "beg", "+", "batch_size", "]", "\n", "cname", "=", "f\"C{i:0>3d}\"", "\n", "i", "+=", "1", "\n", "# Use interface to allow all modifiers (including default) on methods", "\n", "s", "=", "f\"interface {cname} {{\\n\"", "\n", "for", "d", "in", "batch", ":", "\n", "                ", "s", "+=", "d", ".", "misc", "[", "\"orig_code\"", "]", "+", "\"\\n\\n\"", "\n", "", "s", "+=", "\"}\\n\"", "\n", "IOUtils", ".", "dump", "(", "output_dir", "/", "f\"{cname}.java\"", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "\n", "beg", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.prepare_train_val_data": [[113, 178], ["pathlib.Path", "Code2VecPOPL19.Code2VecPOPL19.output_source", "pathlib.Path", "Code2VecPOPL19.Code2VecPOPL19.output_source", "seutil.IOUtils.rm", "pathlib.Path", "seutil.IOUtils.dump", "pathlib.Path.chmod", "seutil.BashUtils.run", "error_log.exists", "seutil.IOUtils.rm_dir", "seutil.IOUtils.rm", "seutil.IOUtils.rm_dir", "seutil.IOUtils.rm", "tempfile.mkdtemp", "tempfile.mkdtemp", "tempfile.mktemp", "str", "seutil.IOUtils.load().strip", "os.cpu_count", "os.cpu_count", "len", "logger.warning", "seutil.IOUtils.load"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.output_source", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.output_source", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "", "def", "prepare_train_val_data", "(", "\n", "self", ",", "\n", "train_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "val_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "data_dir", ":", "Path", ",", "\n", ")", ":", "\n", "# prepare", "\n", "        ", "train_source_dir", "=", "Path", "(", "tempfile", ".", "mkdtemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "self", ".", "output_source", "(", "train_dataset", ",", "train_source_dir", ")", "\n", "val_source_dir", "=", "Path", "(", "tempfile", ".", "mkdtemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "self", ".", "output_source", "(", "val_dataset", ",", "val_source_dir", ")", "\n", "train_data_file", "=", "data_dir", "/", "\"data.train.raw.txt\"", "\n", "val_data_file", "=", "data_dir", "/", "\"data.val.raw.txt\"", "\n", "tgt_hist_file", "=", "data_dir", "/", "\"data.histo.tgt.c2v\"", "\n", "origin_hist_file", "=", "data_dir", "/", "\"data.histo.ori.c2v\"", "\n", "path_hist_file", "=", "data_dir", "/", "\"data.histo.path.c2v\"", "\n", "error_log", "=", "data_dir", "/", "\"error_log.txt\"", "\n", "IOUtils", ".", "rm", "(", "error_log", ")", "\n", "\n", "# process", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda activate {self.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd {self.SRC_DIR}\\n\"", "\n", "s", "+=", "f\"python JavaExtractor/extract.py --dir {val_source_dir}\"", "f\" --max_path_length {self.config.max_path_length}\"", "f\" --max_path_width {self.config.max_path_width}\"", "f\" --num_threads {os.cpu_count()}\"", "f\" --jar {self.EXTRACTOR_RELDIR}\"", "f\" > {val_data_file} 2>> {error_log}\\n\"", "\n", "s", "+=", "f\"python JavaExtractor/extract.py --dir {train_source_dir}\"", "f\" --max_path_length {self.config.max_path_length}\"", "f\" --max_path_width {self.config.max_path_width}\"", "f\" --num_threads {os.cpu_count()}\"", "f\" --jar {self.EXTRACTOR_RELDIR}\"", "f\" > {train_data_file} 2>> {error_log}\\n\"", "\n", "# Creating histograms from the training data", "\n", "s", "+=", "f\"cat {train_data_file} | cut -d' ' -f1 | awk '{{n[$0]++}} END {{for (i in n) print i,n[i]}}' > {tgt_hist_file}\\n\"", "\n", "s", "+=", "f\"cat {train_data_file} | cut -d' ' -f2- | tr ' ' '\\\\n' | cut -d',' -f1,3 | tr ',' '\\\\n' | awk '{{n[$0]++}} END {{for (i in n) print i,n[i]}}' > {origin_hist_file}\\n\"", "\n", "s", "+=", "f\"cat {train_data_file} | cut -d' ' -f2- | tr ' ' '\\\\n' | cut -d',' -f2 | awk '{{n[$0]++}} END {{for (i in n) print i,n[i]}}' > {path_hist_file}\\n\"", "\n", "s", "+=", "f\"python preprocess.py --train_data {train_data_file} --val_data {val_data_file}\"", "f\" --max_contexts {self.config.max_contexts}\"", "f\" --word_vocab_size {self.config.word_vocab_size}\"", "f\" --path_vocab_size {self.config.path_vocab_size}\"", "f\" --target_vocab_size {self.config.target_vocab_size}\"", "f\" --word_histogram {origin_hist_file}\"", "f\" --path_histogram {path_hist_file}\"", "f\" --target_histogram {tgt_hist_file}\"", "f\" --output_name {data_dir}/data\\n\"", "\n", "script_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "IOUtils", ".", "dump", "(", "script_path", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "script_path", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "BashUtils", ".", "run", "(", "str", "(", "script_path", ")", ",", "0", ")", "\n", "if", "error_log", ".", "exists", "(", ")", ":", "\n", "            ", "errors", "=", "IOUtils", ".", "load", "(", "error_log", ",", "IOUtils", ".", "Format", ".", "txt", ")", ".", "strip", "(", ")", "\n", "if", "len", "(", "errors", ")", ">", "0", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"There are errors during data processing!\\n{errors}\"", ")", "\n", "\n", "# delete temp files", "\n", "", "", "IOUtils", ".", "rm_dir", "(", "train_source_dir", ")", "\n", "IOUtils", ".", "rm", "(", "train_data_file", ")", "\n", "IOUtils", ".", "rm_dir", "(", "val_source_dir", ")", "\n", "IOUtils", ".", "rm", "(", "val_data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.prepare_eval_data": [[179, 229], ["pathlib.Path", "Code2VecPOPL19.Code2VecPOPL19.output_source", "seutil.IOUtils.rm", "pathlib.Path", "seutil.IOUtils.dump", "pathlib.Path.chmod", "seutil.BashUtils.run", "error_log.exists", "seutil.IOUtils.rm_dir", "seutil.IOUtils.rm", "tempfile.mkdtemp", "tempfile.mktemp", "str", "seutil.IOUtils.load().strip", "os.cpu_count", "len", "logger.warning", "seutil.IOUtils.load"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.output_source", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "def", "prepare_eval_data", "(", "\n", "self", ",", "\n", "eval_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "data_dir", ":", "Path", ",", "\n", "train_data_dir", ":", "Path", ",", "\n", ")", ":", "\n", "# prepare", "\n", "        ", "eval_source_dir", "=", "Path", "(", "tempfile", ".", "mkdtemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "self", ".", "output_source", "(", "eval_dataset", ",", "eval_source_dir", ")", "\n", "eval_data_file", "=", "data_dir", "/", "\"data.eval.raw.txt\"", "\n", "tgt_hist_file", "=", "train_data_dir", "/", "\"data.histo.tgt.c2v\"", "\n", "origin_hist_file", "=", "train_data_dir", "/", "\"data.histo.ori.c2v\"", "\n", "path_hist_file", "=", "train_data_dir", "/", "\"data.histo.path.c2v\"", "\n", "error_log", "=", "data_dir", "/", "\"error_log.txt\"", "\n", "IOUtils", ".", "rm", "(", "error_log", ")", "\n", "\n", "# process", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda activate {self.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd {self.SRC_DIR}\\n\"", "\n", "s", "+=", "f\"python JavaExtractor/extract.py --dir {eval_source_dir}\"", "f\" --max_path_length {self.config.max_path_length}\"", "f\" --max_path_width {self.config.max_path_width}\"", "f\" --num_threads {os.cpu_count()}\"", "f\" --jar {self.EXTRACTOR_RELDIR}\"", "f\" > {eval_data_file} 2>> {error_log}\\n\"", "\n", "s", "+=", "f\"python preprocess.py --test_data {eval_data_file}\"", "f\" --max_contexts {self.config.max_contexts}\"", "f\" --word_vocab_size {self.config.word_vocab_size}\"", "f\" --path_vocab_size {self.config.path_vocab_size}\"", "f\" --target_vocab_size {self.config.target_vocab_size}\"", "f\" --word_histogram {origin_hist_file}\"", "f\" --path_histogram {path_hist_file}\"", "f\" --target_histogram {tgt_hist_file}\"", "f\" --output_name {data_dir}/data\\n\"", "\n", "script_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "IOUtils", ".", "dump", "(", "script_path", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "script_path", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "BashUtils", ".", "run", "(", "str", "(", "script_path", ")", ",", "0", ")", "\n", "if", "error_log", ".", "exists", "(", ")", ":", "\n", "            ", "errors", "=", "IOUtils", ".", "load", "(", "error_log", ",", "IOUtils", ".", "Format", ".", "txt", ")", ".", "strip", "(", ")", "\n", "if", "len", "(", "errors", ")", ">", "0", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"There are errors during data processing!\\n{errors}\"", ")", "\n", "\n", "# delete temp files", "\n", "", "", "IOUtils", ".", "rm_dir", "(", "eval_source_dir", ")", "\n", "IOUtils", ".", "rm", "(", "eval_data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.train": [[230, 293], ["model_dir.mkdir", "seutil.IOUtils.dump", "script_path.chmod", "tseval.util.TrainConfig.TrainConfig", "seutil.IOUtils.rm_dir", "data_dir.mkdir", "Code2VecPOPL19.Code2VecPOPL19.prepare_train_val_data", "seutil.IOUtils.load", "seutil.IOUtils.load.splitlines", "seutil.IOUtils.cd", "line.split", "RuntimeError", "logger.info", "seutil.BashUtils.run", "RuntimeError", "logger.warning", "logger.warning", "v[].split"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.prepare_train_val_data", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split"], ["", "def", "train", "(", "\n", "self", ",", "\n", "train_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "val_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "resources_path", ":", "Optional", "[", "Path", "]", "=", "None", ",", "\n", "train_config", ":", "TrainConfig", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "train_config", "is", "None", ":", "\n", "            ", "train_config", "=", "TrainConfig", "(", ")", "\n", "\n", "", "data_dir", "=", "self", ".", "model_work_dir", "/", "\"data\"", "\n", "if", "not", "self", ".", "train_data_prepared", ":", "\n", "            ", "IOUtils", ".", "rm_dir", "(", "data_dir", ")", "\n", "data_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "self", ".", "prepare_train_val_data", "(", "train_dataset", ",", "val_dataset", ",", "data_dir", ")", "\n", "self", ".", "train_data_prepared", "=", "True", "\n", "\n", "", "model_dir", "=", "self", ".", "model_work_dir", "/", "\"model\"", "\n", "model_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Prepare script", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda activate {self.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd {self.SRC_DIR}\\n\"", "\n", "if", "(", "model_dir", "/", "\"checkpoint\"", ")", ".", "exists", "(", ")", ":", "\n", "            ", "checkpoint_fcontent", "=", "IOUtils", ".", "load", "(", "model_dir", "/", "\"checkpoint\"", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "checkpoint", "=", "None", "\n", "for", "line", "in", "checkpoint_fcontent", ".", "splitlines", "(", ")", ":", "\n", "                ", "k", ",", "v", "=", "line", ".", "split", "(", "\":\"", ",", "1", ")", "\n", "if", "k", "==", "\"model_checkpoint_path\"", ":", "\n", "                    ", "checkpoint", "=", "v", "[", ":", "-", "1", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "", "", "if", "checkpoint", "is", "None", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Unable to get a checkpoint\"", ")", "\n", "", "s", "+=", "f\"CUDA_VISIBLE_DEVICES={train_config.gpu_id} timeout {train_config.train_session_time} python -u code2vec.py --data {data_dir}/data --test {data_dir}/data.val.c2v --save {model_dir}/model --load {model_dir}/{checkpoint}\\n\"", "\n", "", "else", ":", "\n", "            ", "s", "+=", "f\"CUDA_VISIBLE_DEVICES={train_config.gpu_id} timeout {train_config.train_session_time} python -u code2vec.py --data {data_dir}/data --test {data_dir}/data.val.c2v --save {model_dir}/model\\n\"", "\n", "\n", "", "script_path", "=", "self", ".", "model_work_dir", "/", "\"train.sh\"", "\n", "stdout_path", "=", "self", ".", "model_work_dir", "/", "\"train.stdout\"", "\n", "stderr_path", "=", "self", ".", "model_work_dir", "/", "\"train.stderr\"", "\n", "IOUtils", ".", "dump", "(", "script_path", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "script_path", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "\n", "with", "IOUtils", ".", "cd", "(", "self", ".", "model_work_dir", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "logger", ".", "info", "(", "f\"=====Starting train\\nScript: {script_path}\\nSTDOUT: {stdout_path}\\nSTDERR: {stderr_path}\\n=====\"", ")", "\n", "rr", "=", "BashUtils", ".", "run", "(", "f\"{script_path} 1>{stdout_path} 2>{stderr_path}\"", ",", "timeout", "=", "train_config", ".", "train_session_time", ")", "\n", "if", "rr", ".", "return_code", "!=", "0", ":", "\n", "                    ", "raise", "RuntimeError", "(", "f\"Train returned {rr.return_code}; check STDERR at {stderr_path}\"", ")", "\n", "", "", "except", "(", "TimeoutExpired", ",", "KeyboardInterrupt", ")", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Training not finished\"", ")", "\n", "self", ".", "train_finished", "=", "False", "\n", "return", "\n", "", "except", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"Error during training!\"", ")", "\n", "raise", "\n", "\n", "# If we can reach here, training should be finished", "\n", "", "", "self", ".", "train_finished", "=", "True", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.is_train_finished": [[294, 296], ["None"], "methods", ["None"], ["", "def", "is_train_finished", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "train_finished", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.predict": [[297, 299], ["Code2VecPOPL19.Code2VecPOPL19.batch_predict"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.batch_predict"], ["", "def", "predict", "(", "self", ",", "data", ":", "MethodData", ",", "gpu_id", ":", "int", "=", "0", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "self", ".", "batch_predict", "(", "[", "data", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.batch_predict": [[300, 355], ["seutil.IOUtils.load", "seutil.IOUtils.load.splitlines", "pathlib.Path", "Code2VecPOPL19.Code2VecPOPL19.prepare_eval_data", "pathlib.Path", "pathlib.Path", "pathlib.Path", "seutil.IOUtils.dump", "pathlib.Path.chmod", "seutil.IOUtils.load", "seutil.IOUtils.load.splitlines", "seutil.IOUtils.rm_dir", "seutil.IOUtils.rm", "seutil.IOUtils.rm", "seutil.IOUtils.rm", "line.split", "RuntimeError", "tempfile.mkdtemp", "tempfile.mktemp", "tempfile.mktemp", "tempfile.mktemp", "seutil.IOUtils.cd", "logger.info", "seutil.BashUtils.run", "decode_res.append", "RuntimeError", "line.strip().split", "v[].split", "line.strip"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.prepare_eval_data", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split"], ["", "def", "batch_predict", "(", "\n", "self", ",", "\n", "dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "tbar", ":", "Optional", "[", "tqdm", "]", "=", "None", ",", "\n", "gpu_id", ":", "int", "=", "0", ",", "\n", ")", "->", "List", "[", "List", "[", "str", "]", "]", ":", "\n", "# Figure out which checkpoint to load", "\n", "        ", "model_dir", "=", "self", ".", "model_work_dir", "/", "\"model\"", "\n", "checkpoint_fcontent", "=", "IOUtils", ".", "load", "(", "model_dir", "/", "\"checkpoint\"", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "checkpoint", "=", "None", "\n", "for", "line", "in", "checkpoint_fcontent", ".", "splitlines", "(", ")", ":", "\n", "            ", "k", ",", "v", "=", "line", ".", "split", "(", "\":\"", ",", "1", ")", "\n", "if", "k", "==", "\"model_checkpoint_path\"", ":", "\n", "                ", "checkpoint", "=", "v", "[", ":", "-", "1", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "", "", "if", "checkpoint", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Unable to get a checkpoint\"", ")", "\n", "\n", "# Prepare data", "\n", "", "data_dir", "=", "Path", "(", "tempfile", ".", "mkdtemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "self", ".", "prepare_eval_data", "(", "dataset", ",", "data_dir", ",", "self", ".", "model_work_dir", "/", "\"data\"", ")", "\n", "\n", "# Prepare script", "\n", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "f\"source {Environment.conda_init_path}\\n\"", "\n", "s", "+=", "f\"conda activate {self.ENV_NAME}\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "s", "+=", "f\"cd {self.SRC_DIR}\\n\"", "\n", "s", "+=", "f\"CUDA_VISIBLE_DEVICES={gpu_id} python -u code2vec.py --load {model_dir}/{checkpoint} --test {data_dir}/data.test.c2v --logs-path {model_dir}/log.txt\\n\"", "\n", "script_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval.test.sh-\"", ")", ")", "\n", "stdout_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval.test.stdout-\"", ")", ")", "\n", "stderr_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval.test.stderr-\"", ")", ")", "\n", "IOUtils", ".", "dump", "(", "script_path", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "script_path", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "\n", "# Run predictions", "\n", "with", "IOUtils", ".", "cd", "(", "self", ".", "model_work_dir", ")", ":", "\n", "            ", "logger", ".", "info", "(", "f\"=====Starting eval\\nScript: {script_path}\\nSTDOUT: {stdout_path}\\nSTDERR: {stderr_path}\\n=====\"", ")", "\n", "rr", "=", "BashUtils", ".", "run", "(", "f\"{script_path} 1>{stdout_path} 2>{stderr_path}\"", ")", "\n", "if", "rr", ".", "return_code", "!=", "0", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"Eval returned {rr.return_code}; check STDERR at {stderr_path}\"", ")", "\n", "\n", "# Load predictions", "\n", "", "", "res", "=", "IOUtils", ".", "load", "(", "model_dir", "/", "\"log.txt\"", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "decode_res", "=", "[", "]", "\n", "for", "line", "in", "res", ".", "splitlines", "(", ")", ":", "\n", "            ", "decode_res", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "\"|\"", ")", ")", "\n", "\n", "# Clean up", "\n", "", "IOUtils", ".", "rm_dir", "(", "data_dir", ")", "\n", "IOUtils", ".", "rm", "(", "script_path", ")", "\n", "IOUtils", ".", "rm", "(", "stdout_path", ")", "\n", "IOUtils", ".", "rm", "(", "stderr_path", ")", "\n", "\n", "return", "decode_res", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.save": [[356, 364], ["seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.jsonfy"], "methods", ["None"], ["", "def", "save", "(", "self", ")", "->", "None", ":", "\n", "# Save config and training status", "\n", "        ", "IOUtils", ".", "dump", "(", "self", ".", "model_work_dir", "/", "\"config.json\"", ",", "IOUtils", ".", "jsonfy", "(", "self", ".", "config", ")", ",", "IOUtils", ".", "Format", ".", "jsonPretty", ")", "\n", "IOUtils", ".", "dump", "(", "self", ".", "model_work_dir", "/", "\"train_finished.json\"", ",", "self", ".", "train_finished", ")", "\n", "IOUtils", ".", "dump", "(", "self", ".", "model_work_dir", "/", "\"train_data_prepared.json\"", ",", "self", ".", "train_data_prepared", ")", "\n", "\n", "# Model should already be saved/checkpointed to the correct path", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.Code2VecPOPL19.Code2VecPOPL19.load": [[365, 374], ["Code2VecPOPL19.Code2VecPOPL19", "seutil.IOUtils.dejsonfy", "seutil.IOUtils.load", "seutil.IOUtils.load", "seutil.IOUtils.load"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "model_work_dir", ")", "->", "\"MNModelBase\"", ":", "\n", "        ", "obj", "=", "Code2VecPOPL19", "(", "model_work_dir", ")", "\n", "obj", ".", "config", "=", "IOUtils", ".", "dejsonfy", "(", "IOUtils", ".", "load", "(", "model_work_dir", "/", "\"config.json\"", ")", ",", "Code2VecPOPL19Config", ")", "\n", "if", "(", "model_work_dir", "/", "\"train_finished.json\"", ")", ".", "exists", ":", "\n", "            ", "obj", ".", "train_finished", "=", "IOUtils", ".", "load", "(", "model_work_dir", "/", "\"train_finished.json\"", ")", "\n", "", "if", "(", "model_work_dir", "/", "\"train_data_prepared.json\"", ")", ".", "exists", ":", "\n", "            ", "obj", ".", "train_data_prepared", "=", "IOUtils", ".", "load", "(", "model_work_dir", "/", "\"train_data_prepared.json\"", ")", "\n", "", "return", "obj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.__init__": [[14, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_work_dir", ":", "Path", ",", "no_save", ":", "bool", "=", "False", ")", ":", "\n", "        ", "self", ".", "model_work_dir", "=", "model_work_dir", "\n", "self", ".", "no_save", "=", "no_save", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.train": [[18, 35], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "train", "(", "\n", "self", ",", "\n", "train_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "val_dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "resources_path", ":", "Optional", "[", "Path", "]", "=", "None", ",", "\n", "train_config", ":", "Optional", "[", "TrainConfig", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Trains the model.\n\n        :param train_dataset: training set.\n        :param val_dataset: validation set.\n        :param resources_path: path to resources that could be shared by multiple model's training process,\n            e.g., pre-trained embeddings.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.is_train_finished": [[36, 39], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "is_train_finished", "(", "self", ")", "->", "bool", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.predict": [[40, 53], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "predict", "(", "\n", "self", ",", "\n", "data", ":", "MethodData", ",", "\n", "gpu_id", ":", "int", "=", "0", ",", "\n", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Predicts the comment summary given the context in data. The model should output\n        results with a confidence score in [0, 1].\n        :param data: the data, with its statements partially filled.\n        :return: a list of predicted comment summary tokens.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.batch_predict": [[54, 80], ["tbar.reset", "results.append", "len", "MNModelBase.MNModelBase.predict", "tbar.update"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.predict"], ["", "def", "batch_predict", "(", "\n", "self", ",", "\n", "dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "tbar", ":", "Optional", "[", "tqdm", "]", "=", "None", ",", "\n", "gpu_id", ":", "int", "=", "0", ",", "\n", ")", "->", "List", "[", "List", "[", "str", "]", "]", ":", "\n", "        ", "\"\"\"\n        Performs batched predictions using given dataset as inputs.\n\n        The default implementation invokes #predict multiple times. Subclass can override\n        this method to speed up the prediction by using batching.\n\n        :param dataset: a list of inputs.\n        :param tbar: an optional tqdm progress bar to show prediction progress.\n        :return: a list of the return value of #predict.\n        \"\"\"", "\n", "if", "tbar", "is", "not", "None", ":", "\n", "            ", "tbar", ".", "reset", "(", "len", "(", "dataset", ")", ")", "\n", "\n", "", "results", "=", "[", "]", "\n", "for", "data", "in", "dataset", ":", "\n", "            ", "results", ".", "append", "(", "self", ".", "predict", "(", "data", ",", "gpu_id", "=", "gpu_id", ")", ")", "\n", "if", "tbar", "is", "not", "None", ":", "\n", "                ", "tbar", ".", "update", "(", "1", ")", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.save": [[81, 88], ["seutil.IOUtils.dump"], "methods", ["None"], ["", "def", "save", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Saves the current model at the work_dir.\n        Default behavior is to serialize the entire object in model.pkl.\n        \"\"\"", "\n", "if", "not", "self", ".", "no_save", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "self", ".", "model_work_dir", "/", "\"model.pkl\"", ",", "self", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load": [[89, 98], ["seutil.IOUtils.load"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "work_dir", ")", "->", "\"MNModelBase\"", ":", "\n", "        ", "\"\"\"\n        Loads a model from the work_dir.\n        Default behavior is to deserialize the object from model.pkl, with resetting its work_dir.\n        \"\"\"", "\n", "obj", "=", "IOUtils", ".", "load", "(", "work_dir", "/", "\"model.pkl\"", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "obj", ".", "model_work_dir", "=", "work_dir", "\n", "return", "obj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.CGEvalHelper.CGEvalHelper.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "work_subdir", ":", "Path", "=", "Macros", ".", "work_dir", "/", "\"CG\"", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.CGEvalHelper.CGEvalHelper.exp_prepare": [[19, 52], ["seutil.IOUtils.rm_dir", "setup_dir.mkdir", "tseval.comgen.eval.get_setup_cls", "tseval.Utils.Utils.parse_cmd_options_for_type", "tseval.comgen.eval.get_setup_cls.", "seutil.IOUtils.dump", "setup_obj.prepare", "print", "len", "KeyError", "len", "logger.warning", "tseval.Utils.Utils.suggest_dvc_add"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.__init__.get_setup_cls", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.parse_cmd_options_for_type", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.prepare", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.suggest_dvc_add"], ["", "def", "exp_prepare", "(", "self", ",", "setup", ":", "str", ",", "setup_name", ":", "str", ",", "**", "cmd_options", ")", ":", "\n", "# Clean the setup dir", "\n", "        ", "setup_dir", ":", "Path", "=", "self", ".", "work_subdir", "/", "\"setup\"", "/", "setup_name", "\n", "IOUtils", ".", "rm_dir", "(", "setup_dir", ")", "\n", "setup_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "# Initialize setup", "\n", "setup_cls", "=", "get_setup_cls", "(", "setup", ")", "\n", "setup_options", ",", "unk_options", ",", "missing_options", "=", "Utils", ".", "parse_cmd_options_for_type", "(", "\n", "cmd_options", ",", "\n", "setup_cls", ",", "\n", "[", "\"self\"", ",", "\"work_dir\"", ",", "\"work_subdir\"", ",", "\"setup_name\"", "]", ",", "\n", ")", "\n", "if", "len", "(", "missing_options", ")", ">", "0", ":", "\n", "            ", "raise", "KeyError", "(", "f\"Missing options: {missing_options}\"", ")", "\n", "", "if", "len", "(", "unk_options", ")", ">", "0", ":", "\n", "            ", "logger", ".", "warning", "(", "f\"Unrecognized options: {unk_options}\"", ")", "\n", "", "setup_obj", ":", "EvalSetupBase", "=", "setup_cls", "(", "\n", "work_dir", "=", "Macros", ".", "work_dir", ",", "\n", "work_subdir", "=", "self", ".", "work_subdir", ",", "\n", "setup_name", "=", "setup_name", ",", "\n", "**", "setup_options", ",", "\n", ")", "\n", "\n", "# Save setup configs", "\n", "setup_options", "[", "\"setup\"", "]", "=", "setup", "\n", "IOUtils", ".", "dump", "(", "setup_dir", "/", "\"setup_config.json\"", ",", "setup_options", ",", "IOUtils", ".", "Format", ".", "jsonNoSort", ")", "\n", "\n", "# Prepare data", "\n", "setup_obj", ".", "prepare", "(", ")", "\n", "\n", "# Print dvc commands", "\n", "print", "(", "Utils", ".", "suggest_dvc_add", "(", "setup_obj", ".", "setup_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.CGEvalHelper.CGEvalHelper.load_setup": [[53, 61], ["seutil.IOUtils.load", "tseval.comgen.eval.get_setup_cls", "tseval.comgen.eval.get_setup_cls.", "seutil.IOUtils.load.pop"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.__init__.get_setup_cls"], ["", "def", "load_setup", "(", "self", ",", "setup_dir", ":", "Path", ",", "setup_name", ":", "str", ")", "->", "EvalSetupBase", ":", "\n", "        ", "\"\"\"\n        Loads the setup from its save directory, with updating setup_name.\n        \"\"\"", "\n", "config", "=", "IOUtils", ".", "load", "(", "setup_dir", "/", "\"setup_config.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "setup_cls", "=", "get_setup_cls", "(", "config", ".", "pop", "(", "\"setup\"", ")", ")", "\n", "setup_obj", "=", "setup_cls", "(", "work_dir", "=", "Macros", ".", "work_dir", ",", "work_subdir", "=", "self", ".", "work_subdir", ",", "setup_name", "=", "setup_name", ",", "**", "config", ")", "\n", "return", "setup_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.CGEvalHelper.CGEvalHelper.exp_train": [[62, 85], ["tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "CGEvalHelper.CGEvalHelper.load_setup", "CGEvalHelper.CGEvalHelper.train", "print", "seutil.IOUtils.rm_dir", "tseval.Utils.Utils.suggest_dvc_add", "CGEvalHelper.CGEvalHelper.get_exp_dir", "CGEvalHelper.CGEvalHelper.get_exp_dir"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.load_setup", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.train", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.suggest_dvc_add", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_exp_dir", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_exp_dir"], ["", "def", "exp_train", "(", "\n", "self", ",", "\n", "setup_name", ":", "str", ",", "\n", "exp_name", ":", "str", ",", "\n", "model_name", ":", "str", ",", "\n", "cont_train", ":", "bool", ",", "\n", "no_save", ":", "bool", ",", "\n", "**", "cmd_options", ",", "\n", ")", ":", "\n", "# Load saved setup", "\n", "        ", "setup_dir", "=", "self", ".", "work_subdir", "/", "\"setup\"", "/", "setup_name", "\n", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "setup_dir", ")", "\n", "setup", "=", "self", ".", "load_setup", "(", "setup_dir", ",", "setup_name", ")", "\n", "\n", "if", "not", "cont_train", ":", "\n", "# Delete existing trained model", "\n", "            ", "IOUtils", ".", "rm_dir", "(", "setup", ".", "get_exp_dir", "(", "exp_name", ")", ")", "\n", "\n", "# Invoke training", "\n", "", "setup", ".", "train", "(", "exp_name", ",", "model_name", ",", "cont_train", ",", "no_save", ",", "**", "cmd_options", ")", "\n", "\n", "# Print dvc commands", "\n", "print", "(", "Utils", ".", "suggest_dvc_add", "(", "setup", ".", "get_exp_dir", "(", "exp_name", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.CGEvalHelper.CGEvalHelper.exp_eval": [[86, 103], ["tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "CGEvalHelper.CGEvalHelper.load_setup", "CGEvalHelper.CGEvalHelper.eval", "print", "tseval.Utils.Utils.suggest_dvc_add", "CGEvalHelper.CGEvalHelper.get_result_dir"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.load_setup", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.eval", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.suggest_dvc_add", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_result_dir"], ["", "def", "exp_eval", "(", "\n", "self", ",", "\n", "setup_name", ":", "str", ",", "\n", "exp_name", ":", "str", ",", "\n", "action", ":", "Optional", "[", "str", "]", ",", "\n", "gpu_id", ":", "int", "=", "0", ",", "\n", ")", ":", "\n", "# Load saved setup", "\n", "        ", "setup_dir", "=", "self", ".", "work_subdir", "/", "\"setup\"", "/", "setup_name", "\n", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "setup_dir", ")", "\n", "setup", "=", "self", ".", "load_setup", "(", "setup_dir", ",", "setup_name", ")", "\n", "\n", "# Invoke eval", "\n", "setup", ".", "eval", "(", "exp_name", ",", "action", ",", "gpu_id", "=", "gpu_id", ")", "\n", "\n", "# Print dvc commands", "\n", "print", "(", "Utils", ".", "suggest_dvc_add", "(", "setup", ".", "get_result_dir", "(", "exp_name", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.CGEvalHelper.CGEvalHelper.exp_compute_metrics": [[104, 120], ["tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "CGEvalHelper.CGEvalHelper.load_setup", "CGEvalHelper.CGEvalHelper.compute_metrics", "print", "tseval.Utils.Utils.suggest_dvc_add", "CGEvalHelper.CGEvalHelper.get_metric_dir"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.load_setup", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.compute_metrics", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.suggest_dvc_add", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_metric_dir"], ["", "def", "exp_compute_metrics", "(", "\n", "self", ",", "\n", "setup_name", ":", "str", ",", "\n", "exp_name", ":", "str", ",", "\n", "action", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", ":", "\n", "# Load saved setup", "\n", "        ", "setup_dir", "=", "self", ".", "work_subdir", "/", "\"setup\"", "/", "setup_name", "\n", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "setup_dir", ")", "\n", "setup", "=", "self", ".", "load_setup", "(", "setup_dir", ",", "setup_name", ")", "\n", "\n", "# Invoke eval", "\n", "setup", ".", "compute_metrics", "(", "exp_name", ",", "action", ")", "\n", "\n", "# Print dvc commands", "\n", "print", "(", "Utils", ".", "suggest_dvc_add", "(", "setup", ".", "get_metric_dir", "(", "exp_name", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.StandardSetup.StandardSetup.__init__": [[36, 47], ["tseval.eval.EvalSetupBase.EvalSetupBase.__init__"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.__init__"], ["\n", "def", "__init__", "(", "\n", "self", ",", "\n", "work_dir", ":", "Path", ",", "\n", "work_subdir", ":", "Path", ",", "\n", "setup_name", ":", "str", ",", "\n", "split_name", ":", "str", ",", "\n", "split_type", ":", "str", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "work_dir", ",", "work_subdir", ",", "setup_name", ")", "\n", "self", ".", "split_name", "=", "split_name", "\n", "self", ".", "split_type", "=", "split_type", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.StandardSetup.StandardSetup.prepare": [[48, 122], ["StandardSetup.StandardSetup.get_split_dir", "tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "seutil.IOUtils.rm_dir", "StandardSetup.StandardSetup.data_dir.mkdir", "tseval.Macros.Macros.get_pairwise_split_types_with", "list", "tqdm.tqdm.tqdm", "tseval.data.MethodData.MethodData.load_dataset", "tqdm.tqdm.tqdm.close", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "tqdm.tqdm.tqdm.reset", "tseval.util.ModelUtils.ModelUtils.tokenize_javaparser_batch", "tqdm.tqdm.tqdm.set_description", "tqdm.tqdm.tqdm.reset", "zip", "tqdm.tqdm.tqdm.close", "tseval.data.MethodData.MethodData.save_dataset", "seutil.IOUtils.load", "seutil.IOUtils.dump", "seutil.IOUtils.load", "seutil.IOUtils.dump", "sorted", "len", "d.code_masked.replace", "d.fill_none", "orig_code_list.append", "name_list.append", "tqdm.tqdm.tqdm.update", "len", "tseval.util.ModelUtils.ModelUtils.subtokenize_batch", "tseval.util.ModelUtils.ModelUtils.subtokenize", "tqdm.tqdm.tqdm.update", "seutil.IOUtils.load", "seutil.IOUtils.dump", "set", "t.lower", "StandardSetup.StandardSetup.clean_eval_set", "tseval.Macros.Macros.get_pairwise_split_types_with"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_split_dir", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Macros.Macros.get_pairwise_split_types_with", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.load_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.tokenize_javaparser_batch", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.save_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.fill_none", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.subtokenize_batch", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.subtokenize", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.StandardSetup.StandardSetup.clean_eval_set", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Macros.Macros.get_pairwise_split_types_with"], ["\n", "", "def", "prepare", "(", "self", ")", "->", "None", ":", "\n", "# Check and prepare directories", "\n", "        ", "split_dir", "=", "self", ".", "get_split_dir", "(", "self", ".", "split_name", ")", "\n", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "self", ".", "shared_data_dir", ")", "\n", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "split_dir", ")", "\n", "IOUtils", ".", "rm_dir", "(", "self", ".", "data_dir", ")", "\n", "self", ".", "data_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "# Copy split indexes", "\n", "all_indexes", "=", "[", "]", "\n", "for", "sn", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test_standard", "]", ":", "\n", "            ", "ids", "=", "IOUtils", ".", "load", "(", "split_dir", "/", "f\"{self.split_type}-{sn}.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "all_indexes", "+=", "ids", "\n", "IOUtils", ".", "dump", "(", "self", ".", "data_dir", "/", "f\"split_{sn}.json\"", ",", "ids", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "", "for", "s1", ",", "s2", "in", "Macros", ".", "get_pairwise_split_types_with", "(", "self", ".", "split_type", ")", ":", "\n", "            ", "ids", "=", "IOUtils", ".", "load", "(", "split_dir", "/", "f\"{s1}-{s2}-{Macros.test_common}.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "all_indexes", "+=", "ids", "\n", "IOUtils", ".", "dump", "(", "\n", "self", ".", "data_dir", "/", "f\"split_{Macros.test_common}-{s1}-{s2}.json\"", ",", "\n", "ids", ",", "\n", "IOUtils", ".", "Format", ".", "json", ",", "\n", ")", "\n", "", "all_indexes", "=", "list", "(", "sorted", "(", "set", "(", "all_indexes", ")", ")", ")", "\n", "\n", "# Load raw data", "\n", "tbar", "=", "tqdm", "(", ")", "\n", "dataset", ":", "List", "[", "MethodData", "]", "=", "MethodData", ".", "load_dataset", "(", "\n", "self", ".", "shared_data_dir", ",", "\n", "expected_ids", "=", "all_indexes", ",", "\n", "only", "=", "[", "\"code\"", ",", "\"comment_summary\"", ",", "\"misc\"", "]", ",", "\n", "tbar", "=", "tbar", ",", "\n", ")", "\n", "tbar", ".", "close", "(", ")", "\n", "\n", "# Subtokenize code and comments", "\n", "tbar", "=", "tqdm", "(", ")", "\n", "\n", "tbar", ".", "set_description", "(", "\"Subtokenizing\"", ")", "\n", "tbar", ".", "reset", "(", "len", "(", "dataset", ")", ")", "\n", "orig_code_list", "=", "[", "]", "\n", "tokenized_comment_list", "=", "[", "]", "\n", "for", "d", "in", "dataset", ":", "\n", "            ", "d", ".", "fill_none", "(", ")", "\n", "d", ".", "misc", "[", "\"orig_code\"", "]", "=", "d", ".", "code", "\n", "d", ".", "misc", "[", "\"orig_comment_summary\"", "]", "=", "d", ".", "comment_summary", "\n", "orig_code_list", ".", "append", "(", "d", ".", "code", ")", "\n", "tokenized_comment_list", ".", "append", "(", "nltk", ".", "word_tokenize", "(", "d", ".", "comment_summary", ")", ")", "\n", "tbar", ".", "update", "(", "1", ")", "\n", "\n", "", "tokenized_code_list", "=", "ModelUtils", ".", "tokenize_javaparser_batch", "(", "orig_code_list", ",", "dup_share", "=", "False", ",", "tbar", "=", "tbar", ")", "\n", "\n", "tbar", ".", "set_description", "(", "\"Subtokenizing\"", ")", "\n", "tbar", ".", "reset", "(", "len", "(", "dataset", ")", ")", "\n", "for", "d", ",", "tokenized_code", ",", "tokenized_comment", "in", "zip", "(", "dataset", ",", "tokenized_code_list", ",", "tokenized_comment_list", ")", ":", "\n", "            ", "d", ".", "code", ",", "d", ".", "misc", "[", "\"code_src_ids\"", "]", "=", "ModelUtils", ".", "subtokenize_batch", "(", "tokenized_code", ")", "\n", "d", ".", "comment_summary", ",", "d", ".", "misc", "[", "\"comment_summary_src_ids\"", "]", "=", "ModelUtils", ".", "subtokenize_batch", "(", "tokenized_comment", ")", "\n", "\n", "# convert comment to lower case", "\n", "d", ".", "comment_summary", "=", "[", "t", ".", "lower", "(", ")", "for", "t", "in", "d", ".", "comment_summary", "]", "\n", "tbar", ".", "update", "(", "1", ")", "\n", "", "tbar", ".", "close", "(", ")", "\n", "\n", "# Clean eval ids", "\n", "indexed_dataset", "=", "{", "d", ".", "id", ":", "d", "for", "d", "in", "dataset", "}", "\n", "for", "sn", "in", "[", "Macros", ".", "val", ",", "Macros", ".", "test_standard", "]", "+", "[", "f\"{Macros.test_common}-{x}-{y}\"", "for", "x", ",", "y", "in", "Macros", ".", "get_pairwise_split_types_with", "(", "self", ".", "split_type", ")", "]", ":", "\n", "            ", "eval_ids", "=", "IOUtils", ".", "load", "(", "self", ".", "data_dir", "/", "f\"split_{sn}.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "IOUtils", ".", "dump", "(", "self", ".", "data_dir", "/", "f\"split_{sn}.json\"", ",", "self", ".", "clean_eval_set", "(", "indexed_dataset", ",", "eval_ids", ")", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "\n", "# Save dataset", "\n", "", "MethodData", ".", "save_dataset", "(", "dataset", ",", "self", ".", "data_dir", ")", "\n", "\n", "", "def", "clean_eval_set", "(", "self", ",", "indexed_dataset", ":", "Dict", "[", "int", ",", "MethodData", "]", ",", "eval_ids", ":", "List", "[", "int", "]", ")", "->", "List", "[", "int", "]", ":", "\n", "        "]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.StandardSetup.StandardSetup.clean_eval_set": [[123, 143], ["set", "clean_eval_ids.append", "tuple", "tuple", "set.add"], "methods", ["None"], ["\n", "seen_data", "=", "set", "(", ")", "\n", "clean_eval_ids", "=", "[", "]", "\n", "for", "i", "in", "eval_ids", ":", "\n", "            ", "data", "=", "indexed_dataset", "[", "i", "]", "\n", "\n", "# Remove comment like \".\"", "\n", "if", "len", "(", "data", ".", "comment_summary", ")", "==", "1", "and", "data", ".", "comment_summary", "[", "0", "]", "==", "\".\"", ":", "\n", "                ", "continue", "\n", "\n", "# Remove duplicate (comment, code) pairs", "\n", "", "data_key", "=", "(", "tuple", "(", "data", ".", "code", ")", ",", "tuple", "(", "data", ".", "comment_summary", ")", ")", "\n", "if", "data_key", "in", "seen_data", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "seen_data", ".", "add", "(", "data_key", ")", "\n", "\n", "", "clean_eval_ids", ".", "append", "(", "i", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.StandardSetup.StandardSetup.train": [[144, 178], ["StandardSetup.StandardSetup.get_exp_dir", "tseval.util.TrainConfig.TrainConfig.get_train_config_from_cmd_options", "tseval.metnam.eval.MNModelLoader.MNModelLoader.init_or_load_model", "tqdm.tqdm.tqdm", "tseval.data.MethodData.MethodData.load_dataset", "tqdm.tqdm.tqdm.set_description", "tqdm.tqdm.tqdm.reset", "seutil.IOUtils.load", "tqdm.tqdm.tqdm.update", "seutil.IOUtils.load", "tqdm.tqdm.tqdm.update", "tqdm.tqdm.tqdm.close", "time.time", "tseval.metnam.eval.MNModelLoader.MNModelLoader.init_or_load_model.train", "time.time", "seutil.IOUtils.dump", "tseval.metnam.eval.MNModelLoader.MNModelLoader.init_or_load_model.save", "seutil.IOUtils.dump", "seutil.IOUtils.jsonfy"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_exp_dir", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.TrainConfig.TrainConfig.get_train_config_from_cmd_options", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNModelLoader.MNModelLoader.init_or_load_model", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.load_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.train", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.save"], ["", "return", "clean_eval_ids", "\n", "\n", "", "def", "train", "(", "self", ",", "exp_name", ":", "str", ",", "model_name", ":", "str", ",", "cont_train", ":", "bool", ",", "no_save", ":", "bool", ",", "**", "options", ")", "->", "None", ":", "\n", "# Init or load model", "\n", "        ", "exp_dir", "=", "self", ".", "get_exp_dir", "(", "exp_name", ")", "\n", "train_config", "=", "TrainConfig", ".", "get_train_config_from_cmd_options", "(", "options", ")", "\n", "model", "=", "CGModelLoader", ".", "init_or_load_model", "(", "model_name", ",", "exp_dir", ",", "cont_train", ",", "no_save", ",", "options", ")", "\n", "if", "not", "no_save", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "exp_dir", "/", "\"train_config.jsonl\"", ",", "[", "IOUtils", ".", "jsonfy", "(", "train_config", ")", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ",", "append", "=", "True", ")", "\n", "\n", "# Load data", "\n", "", "tbar", "=", "tqdm", "(", "desc", "=", "\"Loading data\"", ")", "\n", "dataset", "=", "MethodData", ".", "load_dataset", "(", "self", ".", "data_dir", ",", "tbar", "=", "tbar", ")", "\n", "indexed_dataset", "=", "{", "d", ".", "id", ":", "d", "for", "d", "in", "dataset", "}", "\n", "\n", "tbar", ".", "set_description", "(", "\"Loading data | take indexes\"", ")", "\n", "tbar", ".", "reset", "(", "2", ")", "\n", "\n", "train_ids", "=", "IOUtils", ".", "load", "(", "self", ".", "data_dir", "/", "f\"split_{Macros.train}.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "train_dataset", "=", "[", "indexed_dataset", "[", "i", "]", "for", "i", "in", "train_ids", "]", "\n", "tbar", ".", "update", "(", "1", ")", "\n", "\n", "val_ids", "=", "IOUtils", ".", "load", "(", "self", ".", "data_dir", "/", "f\"split_{Macros.val}.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "val_dataset", "=", "[", "indexed_dataset", "[", "i", "]", "for", "i", "in", "val_ids", "]", "\n", "tbar", ".", "update", "(", "1", ")", "\n", "\n", "tbar", ".", "close", "(", ")", "\n", "\n", "# Train model", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "model", ".", "train", "(", "train_dataset", ",", "val_dataset", ",", "resources_path", "=", "self", ".", "data_dir", ",", "train_config", "=", "train_config", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "not", "no_save", ":", "\n", "            ", "model", ".", "save", "(", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.StandardSetup.StandardSetup.eval_one": [[179, 205], ["StandardSetup.StandardSetup.get_result_dir", "StandardSetup.StandardSetup.mkdir", "tqdm.tqdm.tqdm", "time.time", "model.batch_predict", "time.time", "tqdm.tqdm.tqdm.close", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "golds.append"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_result_dir", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.batch_predict"], ["IOUtils", ".", "dump", "(", "exp_dir", "/", "\"train_time.json\"", ",", "end", "-", "start", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "\n", "", "", "def", "eval_one", "(", "self", ",", "exp_name", ":", "str", ",", "eval_ids", ":", "List", "[", "int", "]", ",", "prefix", ":", "str", ",", "indexed_dataset", ":", "Dict", "[", "int", ",", "MethodData", "]", ",", "model", ":", "CGModelBase", ",", "gpu_id", ":", "int", "=", "0", ")", ":", "\n", "# Prepare output directory", "\n", "        ", "result_dir", "=", "self", ".", "get_result_dir", "(", "exp_name", ")", "\n", "result_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Prepare eval data (remove target)", "\n", "eval_dataset", "=", "[", "indexed_dataset", "[", "i", "]", "for", "i", "in", "eval_ids", "]", "\n", "golds", "=", "[", "]", "\n", "for", "d", "in", "eval_dataset", ":", "\n", "            ", "golds", ".", "append", "(", "d", ".", "comment_summary", ")", "\n", "d", ".", "comment_summary", "=", "[", "\"dummy\"", "]", "\n", "d", ".", "misc", "[", "\"orig_comment_summary\"", "]", "=", "\"dummy\"", "\n", "d", ".", "misc", "[", "\"comment_summary_src_ids\"", "]", "=", "[", "0", "]", "\n", "\n", "# Perform batched queries", "\n", "", "tbar", "=", "tqdm", "(", "desc", "=", "f\"Predicting | {prefix}\"", ")", "\n", "eval_start", "=", "time", ".", "time", "(", ")", "\n", "predictions", "=", "model", ".", "batch_predict", "(", "eval_dataset", ",", "tbar", "=", "tbar", ",", "gpu_id", "=", "gpu_id", ")", "\n", "eval_end", "=", "time", ".", "time", "(", ")", "\n", "tbar", ".", "close", "(", ")", "\n", "\n", "eval_time", "=", "eval_end", "-", "eval_start", "\n", "\n", "# Save predictions & golds", "\n", "IOUtils", ".", "dump", "(", "result_dir", "/", "f\"{prefix}_predictions.jsonl\"", ",", "predictions", ",", "IOUtils", ".", "Format", ".", "jsonList", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.StandardSetup.StandardSetup.eval": [[206, 246], ["tqdm.tqdm.tqdm", "tseval.data.MethodData.MethodData.load_dataset", "tqdm.tqdm.tqdm.close", "StandardSetup.StandardSetup.get_exp_dir", "tseval.metnam.eval.MNModelLoader.MNModelLoader.load_model", "RuntimeError", "model.is_train_finished", "logger.warning", "StandardSetup.StandardSetup.eval_one", "seutil.IOUtils.load", "tseval.Macros.Macros.get_pairwise_split_types_with", "RuntimeError", "StandardSetup.StandardSetup.eval_one", "seutil.IOUtils.load", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.load_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_exp_dir", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNModelLoader.MNModelLoader.load_model", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.is_train_finished", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.StandardSetup.StandardSetup.eval_one", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Macros.Macros.get_pairwise_split_types_with", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.StandardSetup.StandardSetup.eval_one", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["IOUtils", ".", "dump", "(", "result_dir", "/", "f\"{prefix}_golds.jsonl\"", ",", "golds", ",", "IOUtils", ".", "Format", ".", "jsonList", ")", "\n", "IOUtils", ".", "dump", "(", "result_dir", "/", "f\"{prefix}_eval_time.json\"", ",", "eval_time", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "\n", "", "def", "eval", "(", "self", ",", "exp_name", ":", "str", ",", "action", ":", "str", "=", "None", ",", "gpu_id", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "        ", "if", "action", "is", "None", ":", "\n", "            ", "action", "=", "self", ".", "DEFAULT_EVAL_ACTION", "\n", "", "if", "action", "not", "in", "self", ".", "EVAL_ACTIONS", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Unknown eval action {action}\"", ")", "\n", "\n", "# Load eval data", "\n", "", "tbar", "=", "tqdm", "(", "desc", "=", "\"Loading data\"", ")", "\n", "dataset", "=", "MethodData", ".", "load_dataset", "(", "self", ".", "data_dir", ",", "tbar", "=", "tbar", ")", "\n", "indexed_dataset", "=", "{", "d", ".", "id", ":", "d", "for", "d", "in", "dataset", "}", "\n", "tbar", ".", "close", "(", ")", "\n", "\n", "# Load model", "\n", "exp_dir", "=", "self", ".", "get_exp_dir", "(", "exp_name", ")", "\n", "model", ":", "CGModelBase", "=", "CGModelLoader", ".", "load_model", "(", "exp_dir", ")", "\n", "if", "not", "model", ".", "is_train_finished", "(", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "f\"Model not finished training, at {exp_dir}\"", ")", "\n", "\n", "# Invoke eval_one with specific data ids", "\n", "", "if", "action", "in", "[", "self", ".", "EVAL_VAL", ",", "self", ".", "EVAL_TESTS", "]", ":", "\n", "            ", "self", ".", "eval_one", "(", "\n", "exp_name", ",", "\n", "IOUtils", ".", "load", "(", "self", ".", "data_dir", "/", "f\"split_{action}.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", ",", "\n", "action", ",", "\n", "indexed_dataset", ",", "\n", "model", ",", "\n", "gpu_id", "=", "gpu_id", ",", "\n", ")", "\n", "", "elif", "action", "==", "self", ".", "EVAL_TESTC", ":", "\n", "            ", "for", "s1", ",", "s2", "in", "Macros", ".", "get_pairwise_split_types_with", "(", "self", ".", "split_type", ")", ":", "\n", "                ", "self", ".", "eval_one", "(", "\n", "exp_name", ",", "\n", "IOUtils", ".", "load", "(", "self", ".", "data_dir", "/", "f\"split_{Macros.test_common}-{s1}-{s2}.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", ",", "\n", "f\"{Macros.test_common}-{s1}-{s2}\"", ",", "\n", "copy", ".", "deepcopy", "(", "indexed_dataset", ")", ",", "\n", "model", ",", "\n", "gpu_id", "=", "gpu_id", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.StandardSetup.StandardSetup.compute_metrics_one": [[247, 281], ["StandardSetup.StandardSetup.get_metric_dir", "StandardSetup.StandardSetup.mkdir", "StandardSetup.StandardSetup.get_result_dir", "tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "seutil.IOUtils.load", "seutil.IOUtils.load", "collections.defaultdict", "tseval.eval.EvalMetrics.EvalMetrics.batch_exact_match", "tseval.eval.EvalMetrics.EvalMetrics.batch_token_acc", "tseval.eval.EvalMetrics.EvalMetrics.batch_bleu", "tseval.eval.EvalMetrics.EvalMetrics.batch_rouge_l", "tseval.eval.EvalMetrics.EvalMetrics.batch_meteor", "tseval.eval.EvalMetrics.EvalMetrics.batch_set_match", "metrics_list.items", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "numpy.mean().item", "numpy.mean", "metrics.items"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_metric_dir", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_result_dir", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_exact_match", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_token_acc", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_bleu", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_rouge_l", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_meteor", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_set_match"], ["", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Unknown action {action}\"", ")", "\n", "\n", "", "", "def", "compute_metrics_one", "(", "self", ",", "exp_name", ":", "str", ",", "prefix", ":", "str", ")", ":", "\n", "# Prepare output directory", "\n", "        ", "metric_dir", "=", "self", ".", "get_metric_dir", "(", "exp_name", ")", "\n", "metric_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Load golds and predictions", "\n", "result_dir", "=", "self", ".", "get_result_dir", "(", "exp_name", ")", "\n", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "result_dir", ")", "\n", "golds", "=", "IOUtils", ".", "load", "(", "result_dir", "/", "f\"{prefix}_golds.jsonl\"", ",", "IOUtils", ".", "Format", ".", "jsonList", ")", "\n", "predictions", "=", "IOUtils", ".", "load", "(", "result_dir", "/", "f\"{prefix}_predictions.jsonl\"", ",", "IOUtils", ".", "Format", ".", "jsonList", ")", "\n", "\n", "metrics_list", ":", "Dict", "[", "str", ",", "List", "]", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "metrics_list", "[", "\"exact_match\"", "]", "=", "EvalMetrics", ".", "batch_exact_match", "(", "golds", ",", "predictions", ")", "\n", "metrics_list", "[", "\"token_acc\"", "]", "=", "EvalMetrics", ".", "batch_token_acc", "(", "golds", ",", "predictions", ")", "\n", "metrics_list", "[", "\"bleu\"", "]", "=", "EvalMetrics", ".", "batch_bleu", "(", "golds", ",", "predictions", ")", "\n", "rouge_l_res", "=", "EvalMetrics", ".", "batch_rouge_l", "(", "golds", ",", "predictions", ")", "\n", "metrics_list", "[", "\"rouge_l_f\"", "]", "=", "[", "x", "[", "\"f\"", "]", "for", "x", "in", "rouge_l_res", "]", "\n", "metrics_list", "[", "\"rouge_l_p\"", "]", "=", "[", "x", "[", "\"p\"", "]", "for", "x", "in", "rouge_l_res", "]", "\n", "metrics_list", "[", "\"rouge_l_r\"", "]", "=", "[", "x", "[", "\"r\"", "]", "for", "x", "in", "rouge_l_res", "]", "\n", "metrics_list", "[", "\"meteor\"", "]", "=", "EvalMetrics", ".", "batch_meteor", "(", "golds", ",", "predictions", ")", "\n", "set_match_res", "=", "EvalMetrics", ".", "batch_set_match", "(", "golds", ",", "predictions", ")", "\n", "metrics_list", "[", "\"set_match_f\"", "]", "=", "[", "x", "[", "\"f\"", "]", "for", "x", "in", "set_match_res", "]", "\n", "metrics_list", "[", "\"set_match_p\"", "]", "=", "[", "x", "[", "\"p\"", "]", "for", "x", "in", "set_match_res", "]", "\n", "metrics_list", "[", "\"set_match_r\"", "]", "=", "[", "x", "[", "\"r\"", "]", "for", "x", "in", "set_match_res", "]", "\n", "\n", "# Take average", "\n", "metrics", "=", "{", "}", "\n", "for", "k", ",", "l", "in", "metrics_list", ".", "items", "(", ")", ":", "\n", "            ", "metrics", "[", "k", "]", "=", "np", ".", "mean", "(", "l", ")", ".", "item", "(", ")", "\n", "\n", "# Save metrics", "\n", "", "IOUtils", ".", "dump", "(", "metric_dir", "/", "f\"{prefix}_metrics.json\"", ",", "metrics", ",", "IOUtils", ".", "Format", ".", "jsonNoSort", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.StandardSetup.StandardSetup.compute_metrics": [[282, 301], ["RuntimeError", "StandardSetup.StandardSetup.compute_metrics_one", "tseval.Macros.Macros.get_pairwise_split_types_with", "RuntimeError", "StandardSetup.StandardSetup.compute_metrics_one"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.StandardSetup.StandardSetup.compute_metrics_one", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Macros.Macros.get_pairwise_split_types_with", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.StandardSetup.StandardSetup.compute_metrics_one"], ["IOUtils", ".", "dump", "(", "metric_dir", "/", "f\"{prefix}_metrics.txt\"", ",", "[", "f\"{k}: {v}\"", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", "]", ",", "IOUtils", ".", "Format", ".", "txtList", ")", "\n", "IOUtils", ".", "dump", "(", "metric_dir", "/", "f\"{prefix}_metrics_list.pkl\"", ",", "metrics_list", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "\n", "", "def", "compute_metrics", "(", "self", ",", "exp_name", ":", "str", ",", "action", ":", "str", "=", "None", ")", "->", "None", ":", "\n", "        ", "if", "action", "is", "None", ":", "\n", "            ", "action", "=", "self", ".", "DEFAULT_EVAL_ACTION", "\n", "", "if", "action", "not", "in", "self", ".", "EVAL_ACTIONS", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Unknown eval action {action}\"", ")", "\n", "\n", "", "if", "action", "in", "[", "self", ".", "EVAL_VAL", ",", "self", ".", "EVAL_TESTS", "]", ":", "\n", "            ", "self", ".", "compute_metrics_one", "(", "\n", "exp_name", ",", "\n", "action", ",", "\n", ")", "\n", "", "elif", "action", "==", "self", ".", "EVAL_TESTC", ":", "\n", "            ", "for", "s1", ",", "s2", "in", "Macros", ".", "get_pairwise_split_types_with", "(", "self", ".", "split_type", ")", ":", "\n", "                ", "self", ".", "compute_metrics_one", "(", "\n", "exp_name", ",", "\n", "f\"{Macros.test_common}-{s1}-{s2}\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.__init__.get_setup_cls": [[1, 7], ["ValueError"], "function", ["None"], ["import", "os", "\n", "import", "sys", "\n", "\n", "module_root", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "+", "\"/..\"", "\n", "if", "module_root", "not", "in", "sys", ".", "path", ":", "\n", "    ", "sys", ".", "path", ".", "insert", "(", "0", ",", "module_root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.CGModelLoader.CGModelLoader.init_or_load_model": [[14, 67], ["tseval.comgen.model.get_model_cls", "model_work_dir.is_dir", "seutil.IOUtils.load", "tseval.comgen.model.get_model_cls.load", "tseval.Utils.Utils.parse_cmd_options_for_type", "tseval.comgen.model.get_model_cls.", "ValueError", "len", "logger.warning", "exp_dir.mkdir", "seutil.IOUtils.dump", "seutil.IOUtils.rm", "model_work_dir.mkdir", "len", "KeyError", "len", "logger.warning", "seutil.IOUtils.dump"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.__init__.get_model_cls", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.parse_cmd_options_for_type"], ["    ", "@", "classmethod", "\n", "def", "init_or_load_model", "(", "\n", "cls", ",", "\n", "model_name", ":", "str", ",", "\n", "exp_dir", ":", "Path", ",", "\n", "cont_train", ":", "bool", ",", "\n", "no_save", ":", "bool", ",", "\n", "cmd_options", ":", "dict", ",", "\n", ")", "->", "CGModelBase", ":", "\n", "        ", "model_cls", "=", "get_model_cls", "(", "model_name", ")", "\n", "model_work_dir", "=", "exp_dir", "/", "\"model\"", "\n", "\n", "if", "cont_train", "and", "model_work_dir", ".", "is_dir", "(", ")", "and", "not", "no_save", ":", "\n", "# Restore model name", "\n", "            ", "loaded_model_name", "=", "IOUtils", ".", "load", "(", "exp_dir", "/", "\"model_name.txt\"", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "if", "model_name", "!=", "loaded_model_name", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Contradicting model name (saved: {model_name}; new {loaded_model_name})\"", ")", "\n", "\n", "# Warning about any additional command line arguments", "\n", "", "if", "len", "(", "cmd_options", ")", ">", "0", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"These options will not be used in cont_train mode: {cmd_options}\"", ")", "\n", "\n", "# Load existing model", "\n", "", "model", ":", "CGModelBase", "=", "model_cls", ".", "load", "(", "model_work_dir", ")", "\n", "", "else", ":", "\n", "\n", "            ", "if", "not", "no_save", ":", "\n", "                ", "exp_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Save model name", "\n", "IOUtils", ".", "dump", "(", "exp_dir", "/", "\"model_name.txt\"", ",", "model_name", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "\n", "# Prepare directory for model", "\n", "IOUtils", ".", "rm", "(", "model_work_dir", ")", "\n", "model_work_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "# Initialize the model, using command line arguments", "\n", "", "model_options", ",", "unk_options", ",", "missing_options", "=", "Utils", ".", "parse_cmd_options_for_type", "(", "\n", "cmd_options", ",", "\n", "model_cls", ",", "\n", "[", "\"self\"", ",", "\"model_work_dir\"", "]", ",", "\n", ")", "\n", "if", "len", "(", "missing_options", ")", ">", "0", ":", "\n", "                ", "raise", "KeyError", "(", "f\"Missing options: {missing_options}\"", ")", "\n", "", "if", "len", "(", "unk_options", ")", ">", "0", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"Unrecognized options: {unk_options}\"", ")", "\n", "\n", "", "model", ":", "CGModelBase", "=", "model_cls", "(", "model_work_dir", "=", "model_work_dir", ",", "no_save", "=", "no_save", ",", "**", "model_options", ")", "\n", "\n", "if", "not", "no_save", ":", "\n", "# Save model configs", "\n", "                ", "IOUtils", ".", "dump", "(", "exp_dir", "/", "\"model_config.json\"", ",", "model_options", ",", "IOUtils", ".", "Format", ".", "jsonNoSort", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.CGModelLoader.CGModelLoader.load_model": [[68, 78], ["tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "seutil.IOUtils.load", "tseval.comgen.model.get_model_cls", "tseval.comgen.model.get_model_cls.load"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.__init__.get_model_cls", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "@", "classmethod", "\n", "def", "load_model", "(", "cls", ",", "exp_dir", ":", "Path", ")", "->", "CGModelBase", ":", "\n", "        ", "\"\"\"\n        Loads a trained model from exp_dir. Gets the model name from train_config.json.\n        \"\"\"", "\n", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "exp_dir", ")", "\n", "model_name", "=", "IOUtils", ".", "load", "(", "exp_dir", "/", "\"model_name.txt\"", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "model_cls", "=", "get_model_cls", "(", "model_name", ")", "\n", "model_dir", "=", "exp_dir", "/", "\"model\"", "\n", "return", "model_cls", ".", "load", "(", "model_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.get_splits": [[16, 159], ["seutil.IOUtils.rm_dir", "split_dir.mkdir", "seutil.IOUtils.dump", "tseval.data.MethodData.MethodData.load_dataset", "random.seed", "list", "collections.defaultdict", "min", "enumerate", "seutil.IOUtils.dump", "print", "sorted", "prj2ids[].append", "sum", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "len", "len", "sum", "seutil.IOUtils.dump", "len", "min", "seutil.IOUtils.dump", "len", "len", "len", "len", "list", "list", "list", "range", "tseval.Utils.Utils.suggest_dvc_add", "set", "zip", "prj_split_names.items", "year_split[].append", "sorted", "sorted", "sorted", "seutil.IOUtils.dump", "len", "len", "EvalHelper.EvalHelper.intersect", "seutil.IOUtils.dump", "len", "EvalHelper.EvalHelper.split", "zip", "year_split[].append", "seutil.IOUtils.dump", "random.shuffle", "list", "EvalHelper.EvalHelper.split", "year_split[].append", "sorted"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.load_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.suggest_dvc_add", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.intersect", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split"], ["    ", "def", "get_splits", "(", "\n", "self", ",", "\n", "split_name", ":", "str", ",", "\n", "seed", ":", "int", ",", "\n", "prj_val_ratio", ":", "float", "=", "0.1", ",", "\n", "prj_test_ratio", ":", "float", "=", "0.2", ",", "\n", "inprj_val_ratio", ":", "float", "=", "0.1", ",", "\n", "inprj_test_ratio", ":", "float", "=", "0.2", ",", "\n", "train_year", ":", "int", "=", "2019", ",", "\n", "val_year", ":", "int", "=", "2020", ",", "\n", "test_year", ":", "int", "=", "2021", ",", "\n", "debug", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Gets {mixed-project, cross-project, temporally} splits for the given seed and configurations.\n\n        :param debug: take maximum of 500/100/100 data in the result train/val/test sets.\n        \"\"\"", "\n", "split_dir", "=", "Macros", ".", "work_dir", "/", "\"split\"", "/", "split_name", "\n", "IOUtils", ".", "rm_dir", "(", "split_dir", ")", "\n", "split_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "# Save configs", "\n", "IOUtils", ".", "dump", "(", "\n", "split_dir", "/", "\"config.json\"", ",", "\n", "{", "\n", "\"seed\"", ":", "seed", ",", "\n", "\"prj_val_ratio\"", ":", "prj_val_ratio", ",", "\n", "\"prj_test_ratio\"", ":", "prj_test_ratio", ",", "\n", "\"inprj_val_ratio\"", ":", "inprj_val_ratio", ",", "\n", "\"inprj_test_ratio\"", ":", "inprj_test_ratio", ",", "\n", "\"train_year\"", ":", "train_year", ",", "\n", "\"val_year\"", ":", "val_year", ",", "\n", "\"test_year\"", ":", "test_year", ",", "\n", "\"debug\"", ":", "debug", ",", "\n", "}", ",", "\n", "IOUtils", ".", "Format", ".", "jsonNoSort", ",", "\n", ")", "\n", "stats", "=", "{", "}", "\n", "\n", "# Load shared data", "\n", "dataset", ":", "List", "[", "MethodData", "]", "=", "MethodData", ".", "load_dataset", "(", "Macros", ".", "work_dir", "/", "\"shared\"", ")", "\n", "\n", "# Initialize random state", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "all_prjs", "=", "list", "(", "sorted", "(", "set", "(", "[", "d", ".", "prj", "for", "d", "in", "dataset", "]", ")", ")", ")", "\n", "prj2ids", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "d", "in", "dataset", ":", "\n", "            ", "prj2ids", "[", "d", ".", "prj", "]", ".", "append", "(", "d", ".", "id", ")", "\n", "\n", "# Get project split", "\n", "", "prj_split_names", ":", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", "=", "{", "sn", ":", "l", "for", "sn", ",", "l", "in", "zip", "(", "\n", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test", "]", ",", "\n", "self", ".", "split", "(", "all_prjs", ",", "prj_val_ratio", ",", "prj_test_ratio", ")", ",", "\n", ")", "}", "\n", "prj_split", ":", "Dict", "[", "str", ",", "List", "[", "int", "]", "]", "=", "{", "sn", ":", "sum", "(", "[", "prj2ids", "[", "n", "]", "for", "n", "in", "names", "]", ",", "[", "]", ")", "\n", "for", "sn", ",", "names", "in", "prj_split_names", ".", "items", "(", ")", "}", "\n", "for", "sn", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test", "]", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "split_dir", "/", "f\"prj-{sn}.jsonl\"", ",", "prj_split_names", "[", "sn", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ")", "\n", "IOUtils", ".", "dump", "(", "split_dir", "/", "f\"prj-split-{sn}.jsonl\"", ",", "prj_split", "[", "sn", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ")", "\n", "stats", "[", "f\"num_prj_{sn}\"", "]", "=", "len", "(", "prj_split_names", "[", "sn", "]", ")", "\n", "stats", "[", "f\"num_prj_split_{sn}\"", "]", "=", "len", "(", "prj_split", "[", "sn", "]", ")", "\n", "\n", "# Get in-project splits", "\n", "", "prj2inprj_splits", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", "]", "=", "{", "}", "\n", "\n", "for", "prj", "in", "all_prjs", ":", "\n", "            ", "prj2inprj_splits", "[", "prj", "]", "=", "{", "sn", ":", "l", "for", "sn", ",", "l", "in", "zip", "(", "\n", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test", "]", ",", "\n", "self", ".", "split", "(", "prj2ids", "[", "prj", "]", ",", "inprj_val_ratio", ",", "inprj_test_ratio", ")", ",", "\n", ")", "}", "\n", "", "inprj_split", ":", "Dict", "[", "str", ",", "List", "[", "int", "]", "]", "=", "{", "sn", ":", "sum", "(", "[", "prj2inprj_splits", "[", "prj", "]", "[", "sn", "]", "for", "prj", "in", "all_prjs", "]", ",", "[", "]", ")", "\n", "for", "sn", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test", "]", "}", "\n", "for", "sn", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test", "]", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "split_dir", "/", "f\"inprj-split-{sn}.jsonl\"", ",", "inprj_split", "[", "sn", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ")", "\n", "stats", "[", "f\"num_inprj_split_{sn}\"", "]", "=", "len", "(", "inprj_split", "[", "sn", "]", ")", "\n", "\n", "# Get year splits", "\n", "", "year_split", ":", "Dict", "[", "str", ",", "List", "[", "int", "]", "]", "=", "{", "sn", ":", "[", "]", "for", "sn", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test", "]", "}", "\n", "for", "d", "in", "dataset", ":", "\n", "            ", "min_year", "=", "min", "(", "d", ".", "years", ")", "\n", "if", "min_year", "<=", "train_year", ":", "\n", "                ", "year_split", "[", "Macros", ".", "train", "]", ".", "append", "(", "d", ".", "id", ")", "\n", "", "elif", "min_year", "<=", "val_year", ":", "\n", "                ", "year_split", "[", "Macros", ".", "val", "]", ".", "append", "(", "d", ".", "id", ")", "\n", "", "elif", "min_year", "<=", "test_year", ":", "\n", "                ", "year_split", "[", "Macros", ".", "test", "]", ".", "append", "(", "d", ".", "id", ")", "\n", "", "", "for", "sn", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test", "]", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "split_dir", "/", "f\"year-split-{sn}.jsonl\"", ",", "year_split", "[", "sn", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ")", "\n", "stats", "[", "f\"num_year_split_{sn}\"", "]", "=", "len", "(", "year_split", "[", "sn", "]", ")", "\n", "\n", "# Get actual mixed-prj/cross-prj/temporally splits", "\n", "", "train_size", "=", "min", "(", "len", "(", "inprj_split", "[", "Macros", ".", "train", "]", ")", ",", "len", "(", "prj_split", "[", "Macros", ".", "train", "]", ")", ",", "len", "(", "year_split", "[", "Macros", ".", "train", "]", ")", ")", "\n", "split_sn2split_ids", ":", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "List", "[", "int", "]", "]", "=", "{", "}", "\n", "for", "sn", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test", "]", ":", "\n", "            ", "split_sn2split_ids", "[", "(", "Macros", ".", "mixed_prj", ",", "sn", ")", "]", "=", "list", "(", "sorted", "(", "inprj_split", "[", "sn", "]", ")", ")", "\n", "split_sn2split_ids", "[", "(", "Macros", ".", "cross_prj", ",", "sn", ")", "]", "=", "list", "(", "sorted", "(", "prj_split", "[", "sn", "]", ")", ")", "\n", "split_sn2split_ids", "[", "(", "Macros", ".", "temporally", ",", "sn", ")", "]", "=", "list", "(", "sorted", "(", "year_split", "[", "sn", "]", ")", ")", "\n", "\n", "", "for", "s1_i", ",", "s1", "in", "enumerate", "(", "Macros", ".", "split_types", ")", ":", "\n", "# train/eval/test_standard", "\n", "            ", "for", "sn", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test", "]", ":", "\n", "                ", "split_ids", "=", "split_sn2split_ids", "[", "(", "s1", ",", "sn", ")", "]", "\n", "\n", "# Downsample train set", "\n", "if", "sn", "==", "Macros", ".", "train", ":", "\n", "                    ", "IOUtils", ".", "dump", "(", "split_dir", "/", "f\"{s1}-{sn}_full.json\"", ",", "split_ids", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "random", ".", "shuffle", "(", "split_ids", ")", "\n", "split_ids", "=", "list", "(", "sorted", "(", "split_ids", "[", ":", "train_size", "]", ")", ")", "\n", "\n", "# Debugging", "\n", "", "if", "debug", ":", "\n", "                    ", "if", "sn", "==", "Macros", ".", "train", ":", "\n", "                        ", "split_ids", "=", "split_ids", "[", ":", "500", "]", "\n", "", "else", ":", "\n", "                        ", "split_ids", "=", "split_ids", "[", ":", "100", "]", "\n", "\n", "", "", "sn_oname", "=", "sn", "if", "sn", "!=", "Macros", ".", "test", "else", "Macros", ".", "test_standard", "\n", "IOUtils", ".", "dump", "(", "split_dir", "/", "f\"{s1}-{sn_oname}.json\"", ",", "split_ids", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "stats", "[", "f\"num_{s1}_{sn_oname}\"", "]", "=", "len", "(", "split_ids", ")", "\n", "\n", "# test_common set", "\n", "", "for", "s2_i", "in", "range", "(", "s1_i", "+", "1", ",", "len", "(", "Macros", ".", "split_types", ")", ")", ":", "\n", "                ", "s2", "=", "Macros", ".", "split_types", "[", "s2_i", "]", "\n", "split_ids", "=", "self", ".", "intersect", "(", "\n", "split_sn2split_ids", "[", "(", "s1", ",", "Macros", ".", "test", ")", "]", ",", "\n", "split_sn2split_ids", "[", "(", "s2", ",", "Macros", ".", "test", ")", "]", ",", "\n", ")", "\n", "\n", "# Debugging", "\n", "if", "debug", ":", "\n", "                    ", "split_ids", "=", "split_ids", "[", ":", "100", "]", "\n", "\n", "", "IOUtils", ".", "dump", "(", "split_dir", "/", "f\"{s1}-{s2}-{Macros.test_common}.json\"", ",", "split_ids", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "stats", "[", "f\"num_{s1}-{s2}_{Macros.test_common}\"", "]", "=", "len", "(", "split_ids", ")", "\n", "\n", "# Save stats", "\n", "", "", "IOUtils", ".", "dump", "(", "split_dir", "/", "\"stats.json\"", ",", "stats", ",", "IOUtils", ".", "Format", ".", "jsonNoSort", ")", "\n", "\n", "# Suggest dvc command", "\n", "print", "(", "Utils", ".", "suggest_dvc_add", "(", "split_dir", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split": [[160, 176], ["copy.copy", "random.shuffle", "int", "int", "math.ceil", "math.ceil", "len", "len"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "split", "(", "\n", "cls", ",", "\n", "l", ":", "List", ",", "\n", "val_ratio", ":", "float", ",", "\n", "test_ratio", ":", "float", ",", "\n", ")", "->", "Tuple", "[", "List", ",", "List", ",", "List", "]", ":", "\n", "        ", "assert", "val_ratio", ">", "0", "and", "test_ratio", ">", "0", "and", "val_ratio", "+", "test_ratio", "<", "1", "\n", "lcopy", "=", "copy", ".", "copy", "(", "l", ")", "\n", "random", ".", "shuffle", "(", "lcopy", ")", "\n", "test_val_split", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "lcopy", ")", "*", "test_ratio", ")", ")", "\n", "val_train_split", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "lcopy", ")", "*", "(", "test_ratio", "+", "val_ratio", ")", ")", ")", "\n", "return", "(", "\n", "lcopy", "[", "val_train_split", ":", "]", ",", "\n", "lcopy", "[", "test_val_split", ":", "val_train_split", "]", ",", "\n", "lcopy", "[", ":", "test_val_split", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.intersect": [[178, 181], ["list", "sorted", "set.intersection", "set"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "intersect", "(", "cls", ",", "*", "lists", ":", "List", "[", "int", "]", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "return", "list", "(", "sorted", "(", "set", ".", "intersection", "(", "*", "[", "set", "(", "l", ")", "for", "l", "in", "lists", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.get_task_specific_eval_helper": [[182, 192], ["CGEvalHelper", "MNEvalHelper", "KeyError"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_task_specific_eval_helper", "(", "cls", ",", "task", ")", ":", "\n", "        ", "if", "task", "==", "Macros", ".", "com_gen", ":", "\n", "            ", "from", "tseval", ".", "comgen", ".", "eval", ".", "CGEvalHelper", "import", "CGEvalHelper", "\n", "return", "CGEvalHelper", "(", ")", "\n", "", "elif", "task", "==", "Macros", ".", "met_nam", ":", "\n", "            ", "from", "tseval", ".", "metnam", ".", "eval", ".", "MNEvalHelper", "import", "MNEvalHelper", "\n", "return", "MNEvalHelper", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "f\"Invalid task {task}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.exp_prepare": [[193, 199], ["options.pop", "EvalHelper.EvalHelper.get_task_specific_eval_helper", "options.pop", "options.pop", "EvalHelper.EvalHelper.exp_prepare"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.get_task_specific_eval_helper", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.exp_prepare"], ["", "", "def", "exp_prepare", "(", "self", ",", "**", "options", ")", ":", "\n", "        ", "task", "=", "options", ".", "pop", "(", "\"task\"", ")", "\n", "eh", "=", "self", ".", "get_task_specific_eval_helper", "(", "task", ")", "\n", "setup_cls_name", "=", "options", ".", "pop", "(", "\"setup\"", ")", "\n", "setup_name", "=", "options", ".", "pop", "(", "\"setup_name\"", ")", "\n", "eh", ".", "exp_prepare", "(", "setup_cls_name", ",", "setup_name", ",", "**", "options", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.exp_train": [[200, 209], ["options.pop", "EvalHelper.EvalHelper.get_task_specific_eval_helper", "options.pop", "options.pop", "options.pop", "tseval.Utils.Utils.get_option_as_boolean", "tseval.Utils.Utils.get_option_as_boolean", "EvalHelper.EvalHelper.exp_train"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.get_task_specific_eval_helper", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.get_option_as_boolean", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.get_option_as_boolean", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.exp_train"], ["", "def", "exp_train", "(", "self", ",", "**", "options", ")", ":", "\n", "        ", "task", "=", "options", ".", "pop", "(", "\"task\"", ")", "\n", "eh", "=", "self", ".", "get_task_specific_eval_helper", "(", "task", ")", "\n", "setup_name", "=", "options", ".", "pop", "(", "\"setup_name\"", ")", "\n", "exp_name", "=", "options", ".", "pop", "(", "\"exp_name\"", ")", "\n", "model_name", "=", "options", ".", "pop", "(", "\"model_name\"", ")", "\n", "cont_train", "=", "Utils", ".", "get_option_as_boolean", "(", "options", ",", "\"cont_train\"", ",", "pop", "=", "True", ")", "\n", "no_save", "=", "Utils", ".", "get_option_as_boolean", "(", "options", ",", "\"no_save\"", ",", "pop", "=", "True", ")", "\n", "eh", ".", "exp_train", "(", "setup_name", ",", "exp_name", ",", "model_name", ",", "cont_train", ",", "no_save", ",", "**", "options", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.exp_eval": [[210, 218], ["options.pop", "EvalHelper.EvalHelper.get_task_specific_eval_helper", "options.pop", "options.pop", "options.pop", "tseval.Utils.Utils.get_option_and_pop", "EvalHelper.EvalHelper.exp_eval"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.get_task_specific_eval_helper", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.get_option_and_pop", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.exp_eval"], ["", "def", "exp_eval", "(", "self", ",", "**", "options", ")", ":", "\n", "        ", "task", "=", "options", ".", "pop", "(", "\"task\"", ")", "\n", "eh", "=", "self", ".", "get_task_specific_eval_helper", "(", "task", ")", "\n", "setup_name", "=", "options", ".", "pop", "(", "\"setup_name\"", ")", "\n", "exp_name", "=", "options", ".", "pop", "(", "\"exp_name\"", ")", "\n", "action", "=", "options", ".", "pop", "(", "\"action\"", ")", "\n", "gpu_id", "=", "Utils", ".", "get_option_and_pop", "(", "options", ",", "\"gpu_id\"", ",", "0", ")", "\n", "eh", ".", "exp_eval", "(", "setup_name", ",", "exp_name", ",", "action", ",", "gpu_id", "=", "gpu_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.exp_compute_metrics": [[219, 226], ["options.pop", "EvalHelper.EvalHelper.get_task_specific_eval_helper", "options.pop", "options.pop", "options.pop", "EvalHelper.EvalHelper.exp_compute_metrics"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.get_task_specific_eval_helper", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.exp_compute_metrics"], ["", "def", "exp_compute_metrics", "(", "self", ",", "**", "options", ")", ":", "\n", "        ", "task", "=", "options", ".", "pop", "(", "\"task\"", ")", "\n", "eh", "=", "self", ".", "get_task_specific_eval_helper", "(", "task", ")", "\n", "setup_name", "=", "options", ".", "pop", "(", "\"setup_name\"", ")", "\n", "exp_name", "=", "options", ".", "pop", "(", "\"exp_name\"", ")", "\n", "action", "=", "options", ".", "pop", "(", "\"action\"", ")", "\n", "eh", ".", "exp_compute_metrics", "(", "setup_name", ",", "exp_name", ",", "action", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.__init__": [[8, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "work_dir", ":", "Path", ",", "work_subdir", ":", "Path", ",", "setup_name", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        All setups require the work_dir parameter, which is configured by EvalHelper.\n        Any other parameters for the implemented setup should be passed in via constructor.\n\n        data_dir is an unit directory managed by dvc.\n        \"\"\"", "\n", "self", ".", "work_dir", "=", "work_dir", "\n", "self", ".", "work_subdir", "=", "work_subdir", "\n", "self", ".", "setup_name", "=", "setup_name", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.setup_dir": [[20, 23], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "setup_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "work_subdir", "/", "\"setup\"", "/", "self", ".", "setup_name", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.shared_data_dir": [[24, 27], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shared_data_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "work_dir", "/", "\"shared\"", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_split_dir": [[28, 30], ["None"], "methods", ["None"], ["", "def", "get_split_dir", "(", "self", ",", "split_name", ":", "str", ")", ":", "\n", "        ", "return", "self", ".", "work_dir", "/", "\"split\"", "/", "split_name", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.data_dir": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "setup_dir", "/", "\"data\"", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_exp_dir": [[35, 37], ["None"], "methods", ["None"], ["", "def", "get_exp_dir", "(", "self", ",", "exp_name", ":", "str", ")", ":", "\n", "        ", "return", "self", ".", "work_subdir", "/", "\"exp\"", "/", "self", ".", "setup_name", "/", "exp_name", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_result_dir": [[38, 40], ["None"], "methods", ["None"], ["", "def", "get_result_dir", "(", "self", ",", "exp_name", ":", "str", ")", ":", "\n", "        ", "return", "self", ".", "work_subdir", "/", "\"result\"", "/", "self", ".", "setup_name", "/", "exp_name", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_metric_dir": [[41, 43], ["None"], "methods", ["None"], ["", "def", "get_metric_dir", "(", "self", ",", "exp_name", ":", "str", ")", ":", "\n", "        ", "return", "self", ".", "work_subdir", "/", "\"metric\"", "/", "self", ".", "setup_name", "/", "exp_name", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.prepare": [[44, 53], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "prepare", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Prepares this eval setup, primarily obtains the training/validation/testing sets,\n        reads data from shared_data_dir, saves any processed data to data_dir.\n\n        setup_dir (which includes data_dir) is managed by dvc.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.train": [[54, 71], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "train", "(", "self", ",", "exp_name", ":", "str", ",", "model_name", ":", "str", ",", "cont_train", ":", "bool", ",", "no_save", ":", "bool", ",", "**", "options", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Trains the model, loads data from data_dir, saves the model to\n        get_exp_dir(exp_name) (intermediate files, e.g., logs, can also be saved there).\n\n        get_exp_dir(exp_name) is managed by dvc.\n\n        :param exp_name: name given to this experiment.\n        :param model_name: the model's name.\n        :param cont_train: if True and if there is already a partially trained model in\n            the save directory, load that model and continue training; otherwise, ignore\n            any possible partially trained models.\n        :param no_save: if True, avoids saving anything during training.\n        :param options: options for initializing the models.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.eval": [[72, 86], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "eval", "(", "self", ",", "exp_name", ":", "str", ",", "actions", ":", "List", "[", "str", "]", "=", "None", ",", "gpu_id", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Evaluates the model (usually, on both validation and testing set),\n        loads data from data_dir,\n        loads trained model from get_exp_dir(exp_name),\n        saves results to get_result_dir(exp_name).\n\n        get_result_dir(exp_name) is managed by dvc.\n\n        :param exp_name: name of the experiment.\n        :param actions: a list of eval actions requested.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.compute_metrics": [[87, 101], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "compute_metrics", "(", "self", ",", "exp_name", ":", "str", ",", "actions", ":", "List", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Computes metrics on the prediction results,\n        loads data from data_dir,\n        loads results from get_result_dir(exp_name),\n        saves metrics to get_metric_dir(exp_name).\n\n        get_metric_dir(exp_name) is managed by git.\n\n        :param exp_name: name of the experiment.\n        :param actions: a list of eval actions requested (to compute metrics for).\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_exact_match": [[113, 127], ["zip", "len", "len", "results.append", "results.append"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "batch_exact_match", "(", "cls", ",", "golds", ":", "List", "[", "Any", "]", ",", "preds", ":", "List", "[", "Any", "]", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "\"\"\"\n        return[i] = (golds[i] == preds[i]) ? 1 : 0\n        \"\"\"", "\n", "assert", "len", "(", "golds", ")", "==", "len", "(", "preds", ")", "\n", "\n", "results", "=", "[", "]", "\n", "for", "gold", ",", "pred", "in", "zip", "(", "golds", ",", "preds", ")", ":", "\n", "            ", "if", "gold", "==", "pred", ":", "\n", "                ", "results", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "results", ".", "append", "(", "0", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.token_acc": [[128, 131], ["EvalMetrics.token_acc_cached", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.token_acc_cached"], ["", "@", "classmethod", "\n", "def", "token_acc", "(", "cls", ",", "gold", ":", "List", "[", "str", "]", ",", "pred", ":", "List", "[", "str", "]", ")", "->", "float", ":", "\n", "        ", "return", "token_acc_cached", "(", "tuple", "(", "gold", ")", ",", "tuple", "(", "pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_token_acc": [[132, 138], ["len", "len", "EvalMetrics.token_acc_cached", "tuple", "tuple", "zip"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.token_acc_cached"], ["", "@", "classmethod", "\n", "def", "batch_token_acc", "(", "cls", ",", "golds", ":", "List", "[", "List", "[", "str", "]", "]", ",", "preds", ":", "List", "[", "List", "[", "str", "]", "]", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "assert", "len", "(", "golds", ")", "==", "len", "(", "preds", ")", "\n", "return", "[", "\n", "token_acc_cached", "(", "tuple", "(", "gold", ")", ",", "tuple", "(", "pred", ")", ")", "\n", "for", "gold", ",", "pred", "in", "zip", "(", "golds", ",", "preds", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.bleu": [[140, 146], ["EvalMetrics.bleu_cached", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.bleu_cached"], ["", "@", "classmethod", "\n", "def", "bleu", "(", "cls", ",", "gold", ":", "List", "[", "str", "]", ",", "pred", ":", "List", "[", "str", "]", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        return = BLEU([gold], pred)\n        \"\"\"", "\n", "return", "bleu_cached", "(", "tuple", "(", "gold", ")", ",", "tuple", "(", "pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_bleu": [[147, 156], ["len", "len", "EvalMetrics.bleu_cached", "tuple", "tuple", "zip"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.bleu_cached"], ["", "@", "classmethod", "\n", "def", "batch_bleu", "(", "cls", ",", "golds", ":", "List", "[", "List", "[", "str", "]", "]", ",", "preds", ":", "List", "[", "List", "[", "str", "]", "]", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "\"\"\"\n        return[i] = #bleu(golds[i], preds[i])\n        \"\"\"", "\n", "assert", "len", "(", "golds", ")", "==", "len", "(", "preds", ")", "\n", "return", "[", "\n", "bleu_cached", "(", "tuple", "(", "gold", ")", ",", "tuple", "(", "pred", ")", ")", "\n", "for", "gold", ",", "pred", "in", "zip", "(", "golds", ",", "preds", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.rouge_l": [[158, 164], ["EvalMetrics.rouge_l_cached", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.rouge_l_cached"], ["", "@", "classmethod", "\n", "def", "rouge_l", "(", "cls", ",", "gold", ":", "List", "[", "str", "]", ",", "pred", ":", "List", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "\"\"\"\n        return = rouge l metric computed for given sequences\n        \"\"\"", "\n", "return", "rouge_l_cached", "(", "tuple", "(", "gold", ")", ",", "tuple", "(", "pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_rouge_l": [[165, 174], ["len", "len", "EvalMetrics.rouge_l_cached", "tuple", "tuple", "zip"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.rouge_l_cached"], ["", "@", "classmethod", "\n", "def", "batch_rouge_l", "(", "cls", ",", "golds", ":", "List", "[", "List", "[", "str", "]", "]", ",", "preds", ":", "List", "[", "List", "[", "str", "]", "]", ")", "->", "List", "[", "Dict", "[", "str", ",", "float", "]", "]", ":", "\n", "        ", "\"\"\"\n        return[i] = #rouge_l(golds[i], preds[i])\n        \"\"\"", "\n", "assert", "len", "(", "golds", ")", "==", "len", "(", "preds", ")", "\n", "return", "[", "\n", "rouge_l_cached", "(", "tuple", "(", "gold", ")", ",", "tuple", "(", "pred", ")", ")", "\n", "for", "gold", ",", "pred", "in", "zip", "(", "golds", ",", "preds", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.set_match": [[176, 179], ["EvalMetrics.set_match_cached", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.set_match_cached"], ["", "@", "classmethod", "\n", "def", "set_match", "(", "cls", ",", "gold", ":", "List", "[", "str", "]", ",", "pred", ":", "List", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "return", "set_match_cached", "(", "tuple", "(", "gold", ")", ",", "tuple", "(", "pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_set_match": [[180, 186], ["len", "len", "EvalMetrics.set_match_cached", "tuple", "tuple", "zip"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.set_match_cached"], ["", "@", "classmethod", "\n", "def", "batch_set_match", "(", "cls", ",", "golds", ":", "List", "[", "List", "[", "str", "]", "]", ",", "preds", ":", "List", "[", "List", "[", "str", "]", "]", ")", "->", "List", "[", "Dict", "[", "str", ",", "float", "]", "]", ":", "\n", "        ", "assert", "len", "(", "golds", ")", "==", "len", "(", "preds", ")", "\n", "return", "[", "\n", "set_match_cached", "(", "tuple", "(", "gold", ")", ",", "tuple", "(", "pred", ")", ")", "\n", "for", "gold", ",", "pred", "in", "zip", "(", "golds", ",", "preds", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_set_match_f1": [[188, 194], ["len", "len", "EvalMetrics.set_match_cached", "zip", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.set_match_cached"], ["", "@", "classmethod", "\n", "def", "batch_set_match_f1", "(", "cls", ",", "golds", ":", "List", "[", "List", "[", "str", "]", "]", ",", "preds", ":", "List", "[", "List", "[", "str", "]", "]", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "assert", "len", "(", "golds", ")", "==", "len", "(", "preds", ")", "\n", "return", "[", "\n", "set_match_cached", "(", "tuple", "(", "gold", ")", ",", "tuple", "(", "pred", ")", ")", "[", "\"f\"", "]", "\n", "for", "gold", ",", "pred", "in", "zip", "(", "golds", ",", "preds", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.meteor": [[196, 199], ["EvalMetrics.meteor_cached", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.meteor_cached"], ["", "@", "classmethod", "\n", "def", "meteor", "(", "cls", ",", "gold", ":", "List", "[", "str", "]", ",", "pred", ":", "List", "[", "str", "]", ")", "->", "float", ":", "\n", "        ", "return", "meteor_cached", "(", "tuple", "(", "gold", ")", ",", "tuple", "(", "pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_meteor": [[200, 206], ["len", "len", "EvalMetrics.meteor_cached", "tuple", "tuple", "zip"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.meteor_cached"], ["", "@", "classmethod", "\n", "def", "batch_meteor", "(", "cls", ",", "golds", ":", "List", "[", "List", "[", "str", "]", "]", ",", "preds", ":", "List", "[", "List", "[", "str", "]", "]", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "assert", "len", "(", "golds", ")", "==", "len", "(", "preds", ")", "\n", "return", "[", "\n", "meteor_cached", "(", "tuple", "(", "gold", ")", ",", "tuple", "(", "pred", ")", ")", "\n", "for", "gold", ",", "pred", "in", "zip", "(", "golds", ",", "preds", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.near_duplicate_similarity": [[208, 211], ["EvalMetrics.near_duplicate_similarity_cached", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.near_duplicate_similarity_cached"], ["", "@", "classmethod", "\n", "def", "near_duplicate_similarity", "(", "cls", ",", "gold", ":", "List", "[", "str", "]", ",", "pred", ":", "List", "[", "str", "]", ")", "->", "float", ":", "\n", "        ", "return", "near_duplicate_similarity_cached", "(", "tuple", "(", "gold", ")", ",", "tuple", "(", "pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_near_duplicate_similarity": [[212, 218], ["len", "len", "EvalMetrics.near_duplicate_similarity_cached", "tuple", "tuple", "zip"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.near_duplicate_similarity_cached"], ["", "@", "classmethod", "\n", "def", "batch_near_duplicate_similarity", "(", "cls", ",", "golds", ":", "List", "[", "List", "[", "str", "]", "]", ",", "preds", ":", "List", "[", "List", "[", "str", "]", "]", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "assert", "len", "(", "golds", ")", "==", "len", "(", "preds", ")", "\n", "return", "[", "\n", "near_duplicate_similarity_cached", "(", "tuple", "(", "gold", ")", ",", "tuple", "(", "pred", ")", ")", "\n", "for", "gold", ",", "pred", "in", "zip", "(", "golds", ",", "preds", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.bleu_cached": [[9, 18], ["functools.lru_cache", "nltk.translate.bleu_score.sentence_bleu", "len", "list", "list", "nltk.translate.bleu_score.SmoothingFunction"], "function", ["None"], ["@", "functools", ".", "lru_cache", "(", "maxsize", "=", "128_000", ")", "\n", "def", "bleu_cached", "(", "gold", ":", "Tuple", "[", "str", "]", ",", "pred", ":", "Tuple", "[", "str", "]", ")", "->", "float", ":", "\n", "    ", "if", "len", "(", "pred", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "nltk", ".", "translate", ".", "bleu_score", ".", "sentence_bleu", "(", "\n", "[", "list", "(", "gold", ")", "]", ",", "\n", "list", "(", "pred", ")", ",", "\n", "smoothing_function", "=", "nltk", ".", "translate", ".", "bleu_score", ".", "SmoothingFunction", "(", ")", ".", "method2", ",", "\n", "auto_reweigh", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.token_acc_cached": [[21, 28], ["functools.lru_cache", "len", "max", "len", "len", "range", "min", "len", "len"], "function", ["None"], ["", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "128_000", ")", "\n", "def", "token_acc_cached", "(", "gold", ":", "Tuple", "[", "str", "]", ",", "pred", ":", "Tuple", "[", "str", "]", ")", "->", "float", ":", "\n", "    ", "matches", "=", "len", "(", "[", "\n", "i", "for", "i", "in", "range", "(", "min", "(", "len", "(", "gold", ")", ",", "len", "(", "pred", ")", ")", ")", "\n", "if", "gold", "[", "i", "]", "==", "pred", "[", "i", "]", "\n", "]", ")", "\n", "return", "matches", "/", "max", "(", "len", "(", "gold", ")", ",", "len", "(", "pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.rouge_l_cached": [[30, 42], ["functools.lru_cache", "rouge.Rouge", "rouge.Rouge.get_scores", "len", "len"], "function", ["None"], ["", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "128_000", ")", "\n", "def", "rouge_l_cached", "(", "gold", ":", "Tuple", "[", "str", "]", ",", "pred", ":", "Tuple", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "# Replace the \".\" characters (e.g., in identifier names), otherwise they'll always be considered as sentence boundaries", "\n", "    ", "hyp", "=", "\" \"", ".", "join", "(", "pred", ")", ".", "replace", "(", "\".\"", ",", "\"<DOT>\"", ")", "\n", "ref", "=", "\" \"", ".", "join", "(", "gold", ")", ".", "replace", "(", "\".\"", ",", "\"<DOT>\"", ")", "\n", "\n", "if", "len", "(", "hyp", ")", "==", "0", "or", "len", "(", "ref", ")", "==", "0", ":", "\n", "        ", "return", "{", "'r'", ":", "0", ",", "'p'", ":", "0", ",", "'f'", ":", "0", "}", "\n", "\n", "", "rouge", "=", "Rouge", "(", ")", "\n", "scores", "=", "rouge", ".", "get_scores", "(", "hyps", "=", "hyp", ",", "refs", "=", "ref", ",", "avg", "=", "True", ")", "\n", "return", "scores", "[", "'rouge-l'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.set_match_cached": [[44, 59], ["functools.lru_cache", "set", "set", "min", "min", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "128_000", ")", "\n", "def", "set_match_cached", "(", "gold", ":", "Tuple", "[", "str", "]", ",", "pred", ":", "Tuple", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "    ", "if", "len", "(", "gold", ")", "==", "0", "or", "len", "(", "pred", ")", "==", "0", ":", "\n", "        ", "return", "{", "\"r\"", ":", "0", ",", "\"p\"", ":", "0", ",", "\"f\"", ":", "0", "}", "\n", "\n", "", "gold_unique_tokens", "=", "set", "(", "gold", ")", "\n", "pred_unique_tokens", "=", "set", "(", "pred", ")", "\n", "match_tokens", "=", "gold_unique_tokens", "&", "pred_unique_tokens", "\n", "precision", "=", "min", "(", "len", "(", "match_tokens", ")", "/", "len", "(", "pred_unique_tokens", ")", ",", "1", ")", "\n", "recall", "=", "min", "(", "len", "(", "match_tokens", ")", "/", "len", "(", "gold_unique_tokens", ")", ",", "1", ")", "\n", "if", "precision", "==", "0", "or", "recall", "==", "0", ":", "\n", "        ", "f1", "=", "0", "\n", "", "else", ":", "\n", "        ", "f1", "=", "2", "/", "(", "1", "/", "precision", "+", "1", "/", "recall", ")", "\n", "", "return", "{", "\"r\"", ":", "recall", ",", "\"p\"", ":", "precision", ",", "\"f\"", ":", "f1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.meteor_cached": [[61, 69], ["functools.lru_cache", "nltk.translate.meteor_score.single_meteor_score", "len", "len"], "function", ["None"], ["", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "128_000", ")", "\n", "def", "meteor_cached", "(", "gold", ":", "Tuple", "[", "str", "]", ",", "pred", ":", "Tuple", "[", "str", "]", ")", "->", "float", ":", "\n", "    ", "if", "len", "(", "gold", ")", "==", "0", "or", "len", "(", "pred", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "\n", "", "return", "nltk", ".", "translate", ".", "meteor_score", ".", "single_meteor_score", "(", "\n", "\" \"", ".", "join", "(", "gold", ")", ",", "\n", "\" \"", ".", "join", "(", "pred", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.near_duplicate_similarity_cached": [[72, 109], ["functools.lru_cache", "int", "max", "range", "math.ceil", "abs", "len", "len", "len", "len", "min", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "128_000", ")", "\n", "def", "near_duplicate_similarity_cached", "(", "\n", "gold", ":", "Tuple", "[", "str", "]", ",", "\n", "pred", ":", "Tuple", "[", "str", "]", ",", "\n", "threshold", ":", "float", "=", "0.1", ",", "\n", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Computes the approximate token-level accuracy between gold and pred.\n\n    Returns:\n        token-level accuracy - if not exact match and mismatching tokens <= threshold;\n        0 - otherwise.\n    \"\"\"", "\n", "mismatch_allowed", "=", "int", "(", "math", ".", "ceil", "(", "threshold", "*", "min", "(", "len", "(", "gold", ")", ",", "len", "(", "pred", ")", ")", ")", ")", "\n", "\n", "# Check length difference", "\n", "if", "abs", "(", "len", "(", "gold", ")", "-", "len", "(", "pred", ")", ")", ">=", "mismatch_allowed", ":", "\n", "        ", "return", "0", "\n", "\n", "# Count number of mismatches", "\n", "", "mismatch_count", "=", "0", "\n", "max_len", "=", "max", "(", "len", "(", "gold", ")", ",", "len", "(", "pred", ")", ")", "\n", "for", "i", "in", "range", "(", "max_len", ")", ":", "\n", "        ", "if", "i", ">=", "len", "(", "gold", ")", ":", "\n", "            ", "mismatch_count", "+=", "len", "(", "pred", ")", "-", "i", "\n", "break", "\n", "", "if", "i", ">=", "len", "(", "pred", ")", ":", "\n", "            ", "mismatch_count", "+=", "len", "(", "gold", ")", "-", "i", "\n", "break", "\n", "", "if", "gold", "[", "i", "]", "!=", "pred", "[", "i", "]", ":", "\n", "            ", "mismatch_count", "+=", "1", "\n", "if", "mismatch_count", ">=", "mismatch_allowed", ":", "\n", "                ", "return", "0", "\n", "", "", "", "if", "mismatch_count", ">=", "mismatch_allowed", ":", "\n", "        ", "return", "0", "\n", "", "else", ":", "\n", "        ", "return", "1", "-", "mismatch_count", "/", "max_len", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "work_subdir", ":", "Path", "=", "Macros", ".", "work_dir", "/", "\"MN\"", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.exp_prepare": [[19, 52], ["seutil.IOUtils.rm_dir", "setup_dir.mkdir", "tseval.metnam.eval.get_setup_cls", "tseval.Utils.Utils.parse_cmd_options_for_type", "tseval.metnam.eval.get_setup_cls.", "seutil.IOUtils.dump", "setup_obj.prepare", "print", "len", "KeyError", "len", "logger.warning", "tseval.Utils.Utils.suggest_dvc_add"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.__init__.get_setup_cls", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.parse_cmd_options_for_type", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.prepare", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.suggest_dvc_add"], ["", "def", "exp_prepare", "(", "self", ",", "setup", ":", "str", ",", "setup_name", ":", "str", ",", "**", "cmd_options", ")", ":", "\n", "# Clean the setup dir", "\n", "        ", "setup_dir", ":", "Path", "=", "self", ".", "work_subdir", "/", "\"setup\"", "/", "setup_name", "\n", "IOUtils", ".", "rm_dir", "(", "setup_dir", ")", "\n", "setup_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "# Initialize setup", "\n", "setup_cls", "=", "get_setup_cls", "(", "setup", ")", "\n", "setup_options", ",", "unk_options", ",", "missing_options", "=", "Utils", ".", "parse_cmd_options_for_type", "(", "\n", "cmd_options", ",", "\n", "setup_cls", ",", "\n", "[", "\"self\"", ",", "\"work_dir\"", ",", "\"work_subdir\"", ",", "\"setup_name\"", "]", ",", "\n", ")", "\n", "if", "len", "(", "missing_options", ")", ">", "0", ":", "\n", "            ", "raise", "KeyError", "(", "f\"Missing options: {missing_options}\"", ")", "\n", "", "if", "len", "(", "unk_options", ")", ">", "0", ":", "\n", "            ", "logger", ".", "warning", "(", "f\"Unrecognized options: {unk_options}\"", ")", "\n", "", "setup_obj", ":", "EvalSetupBase", "=", "setup_cls", "(", "\n", "work_dir", "=", "Macros", ".", "work_dir", ",", "\n", "work_subdir", "=", "self", ".", "work_subdir", ",", "\n", "setup_name", "=", "setup_name", ",", "\n", "**", "setup_options", ",", "\n", ")", "\n", "\n", "# Save setup configs", "\n", "setup_options", "[", "\"setup\"", "]", "=", "setup", "\n", "IOUtils", ".", "dump", "(", "setup_dir", "/", "\"setup_config.json\"", ",", "setup_options", ",", "IOUtils", ".", "Format", ".", "jsonNoSort", ")", "\n", "\n", "# Prepare data", "\n", "setup_obj", ".", "prepare", "(", ")", "\n", "\n", "# Print dvc commands", "\n", "print", "(", "Utils", ".", "suggest_dvc_add", "(", "setup_obj", ".", "setup_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.load_setup": [[53, 61], ["seutil.IOUtils.load", "tseval.metnam.eval.get_setup_cls", "tseval.metnam.eval.get_setup_cls.", "seutil.IOUtils.load.pop"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.__init__.get_setup_cls"], ["", "def", "load_setup", "(", "self", ",", "setup_dir", ":", "Path", ",", "setup_name", ":", "str", ")", "->", "EvalSetupBase", ":", "\n", "        ", "\"\"\"\n        Loads the setup from its save directory, with updating setup_name.\n        \"\"\"", "\n", "config", "=", "IOUtils", ".", "load", "(", "setup_dir", "/", "\"setup_config.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "setup_cls", "=", "get_setup_cls", "(", "config", ".", "pop", "(", "\"setup\"", ")", ")", "\n", "setup_obj", "=", "setup_cls", "(", "work_dir", "=", "Macros", ".", "work_dir", ",", "work_subdir", "=", "self", ".", "work_subdir", ",", "setup_name", "=", "setup_name", ",", "**", "config", ")", "\n", "return", "setup_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.exp_train": [[62, 85], ["tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "MNEvalHelper.MNEvalHelper.load_setup", "MNEvalHelper.MNEvalHelper.train", "print", "seutil.IOUtils.rm_dir", "tseval.Utils.Utils.suggest_dvc_add", "MNEvalHelper.MNEvalHelper.get_exp_dir", "MNEvalHelper.MNEvalHelper.get_exp_dir"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.load_setup", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.train", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.suggest_dvc_add", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_exp_dir", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_exp_dir"], ["", "def", "exp_train", "(", "\n", "self", ",", "\n", "setup_name", ":", "str", ",", "\n", "exp_name", ":", "str", ",", "\n", "model_name", ":", "str", ",", "\n", "cont_train", ":", "bool", ",", "\n", "no_save", ":", "bool", ",", "\n", "**", "cmd_options", ",", "\n", ")", ":", "\n", "# Load saved setup", "\n", "        ", "setup_dir", "=", "self", ".", "work_subdir", "/", "\"setup\"", "/", "setup_name", "\n", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "setup_dir", ")", "\n", "setup", "=", "self", ".", "load_setup", "(", "setup_dir", ",", "setup_name", ")", "\n", "\n", "if", "not", "cont_train", ":", "\n", "# Delete existing trained model", "\n", "            ", "IOUtils", ".", "rm_dir", "(", "setup", ".", "get_exp_dir", "(", "exp_name", ")", ")", "\n", "\n", "# Invoke training", "\n", "", "setup", ".", "train", "(", "exp_name", ",", "model_name", ",", "cont_train", ",", "no_save", ",", "**", "cmd_options", ")", "\n", "\n", "# Print dvc commands", "\n", "print", "(", "Utils", ".", "suggest_dvc_add", "(", "setup", ".", "get_exp_dir", "(", "exp_name", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.exp_eval": [[86, 103], ["tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "MNEvalHelper.MNEvalHelper.load_setup", "MNEvalHelper.MNEvalHelper.eval", "print", "tseval.Utils.Utils.suggest_dvc_add", "MNEvalHelper.MNEvalHelper.get_result_dir"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.load_setup", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.eval", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.suggest_dvc_add", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_result_dir"], ["", "def", "exp_eval", "(", "\n", "self", ",", "\n", "setup_name", ":", "str", ",", "\n", "exp_name", ":", "str", ",", "\n", "action", ":", "Optional", "[", "str", "]", ",", "\n", "gpu_id", ":", "int", "=", "0", ",", "\n", ")", ":", "\n", "# Load saved setup", "\n", "        ", "setup_dir", "=", "self", ".", "work_subdir", "/", "\"setup\"", "/", "setup_name", "\n", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "setup_dir", ")", "\n", "setup", "=", "self", ".", "load_setup", "(", "setup_dir", ",", "setup_name", ")", "\n", "\n", "# Invoke eval", "\n", "setup", ".", "eval", "(", "exp_name", ",", "action", ",", "gpu_id", "=", "gpu_id", ")", "\n", "\n", "# Print dvc commands", "\n", "print", "(", "Utils", ".", "suggest_dvc_add", "(", "setup", ".", "get_result_dir", "(", "exp_name", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.exp_compute_metrics": [[104, 120], ["tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "MNEvalHelper.MNEvalHelper.load_setup", "MNEvalHelper.MNEvalHelper.compute_metrics", "print", "tseval.Utils.Utils.suggest_dvc_add", "MNEvalHelper.MNEvalHelper.get_metric_dir"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNEvalHelper.MNEvalHelper.load_setup", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.compute_metrics", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.suggest_dvc_add", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalSetupBase.EvalSetupBase.get_metric_dir"], ["", "def", "exp_compute_metrics", "(", "\n", "self", ",", "\n", "setup_name", ":", "str", ",", "\n", "exp_name", ":", "str", ",", "\n", "action", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", ":", "\n", "# Load saved setup", "\n", "        ", "setup_dir", "=", "self", ".", "work_subdir", "/", "\"setup\"", "/", "setup_name", "\n", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "setup_dir", ")", "\n", "setup", "=", "self", ".", "load_setup", "(", "setup_dir", ",", "setup_name", ")", "\n", "\n", "# Invoke eval", "\n", "setup", ".", "compute_metrics", "(", "exp_name", ",", "action", ")", "\n", "\n", "# Print dvc commands", "\n", "print", "(", "Utils", ".", "suggest_dvc_add", "(", "setup", ".", "get_metric_dir", "(", "exp_name", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNModelLoader.MNModelLoader.init_or_load_model": [[14, 67], ["tseval.metnam.model.get_model_cls", "model_work_dir.is_dir", "seutil.IOUtils.load", "tseval.metnam.model.get_model_cls.load", "tseval.Utils.Utils.parse_cmd_options_for_type", "tseval.metnam.model.get_model_cls.", "ValueError", "len", "logger.warning", "exp_dir.mkdir", "seutil.IOUtils.dump", "seutil.IOUtils.rm", "model_work_dir.mkdir", "len", "KeyError", "len", "logger.warning", "seutil.IOUtils.dump"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.__init__.get_model_cls", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.parse_cmd_options_for_type"], ["    ", "@", "classmethod", "\n", "def", "init_or_load_model", "(", "\n", "cls", ",", "\n", "model_name", ":", "str", ",", "\n", "exp_dir", ":", "Path", ",", "\n", "cont_train", ":", "bool", ",", "\n", "no_save", ":", "bool", ",", "\n", "cmd_options", ":", "dict", ",", "\n", ")", "->", "MNModelBase", ":", "\n", "        ", "model_cls", "=", "get_model_cls", "(", "model_name", ")", "\n", "model_work_dir", "=", "exp_dir", "/", "\"model\"", "\n", "\n", "if", "cont_train", "and", "model_work_dir", ".", "is_dir", "(", ")", "and", "not", "no_save", ":", "\n", "# Restore model name", "\n", "            ", "loaded_model_name", "=", "IOUtils", ".", "load", "(", "exp_dir", "/", "\"model_name.txt\"", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "if", "model_name", "!=", "loaded_model_name", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Contradicting model name (saved: {model_name}; new {loaded_model_name})\"", ")", "\n", "\n", "# Warning about any additional command line arguments", "\n", "", "if", "len", "(", "cmd_options", ")", ">", "0", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"These options will not be used in cont_train mode: {cmd_options}\"", ")", "\n", "\n", "# Load existing model", "\n", "", "model", ":", "MNModelBase", "=", "model_cls", ".", "load", "(", "model_work_dir", ")", "\n", "", "else", ":", "\n", "\n", "            ", "if", "not", "no_save", ":", "\n", "                ", "exp_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Save model name", "\n", "IOUtils", ".", "dump", "(", "exp_dir", "/", "\"model_name.txt\"", ",", "model_name", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "\n", "# Prepare directory for model", "\n", "IOUtils", ".", "rm", "(", "model_work_dir", ")", "\n", "model_work_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "# Initialize the model, using command line arguments", "\n", "", "model_options", ",", "unk_options", ",", "missing_options", "=", "Utils", ".", "parse_cmd_options_for_type", "(", "\n", "cmd_options", ",", "\n", "model_cls", ",", "\n", "[", "\"self\"", ",", "\"model_work_dir\"", "]", ",", "\n", ")", "\n", "if", "len", "(", "missing_options", ")", ">", "0", ":", "\n", "                ", "raise", "KeyError", "(", "f\"Missing options: {missing_options}\"", ")", "\n", "", "if", "len", "(", "unk_options", ")", ">", "0", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"Unrecognized options: {unk_options}\"", ")", "\n", "\n", "", "model", ":", "MNModelBase", "=", "model_cls", "(", "model_work_dir", "=", "model_work_dir", ",", "no_save", "=", "no_save", ",", "**", "model_options", ")", "\n", "\n", "if", "not", "no_save", ":", "\n", "# Save model configs", "\n", "                ", "IOUtils", ".", "dump", "(", "exp_dir", "/", "\"model_config.json\"", ",", "model_options", ",", "IOUtils", ".", "Format", ".", "jsonNoSort", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.MNModelLoader.MNModelLoader.load_model": [[68, 78], ["tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "seutil.IOUtils.load", "tseval.metnam.model.get_model_cls", "tseval.metnam.model.get_model_cls.load"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.__init__.get_model_cls", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "@", "classmethod", "\n", "def", "load_model", "(", "cls", ",", "exp_dir", ":", "Path", ")", "->", "MNModelBase", ":", "\n", "        ", "\"\"\"\n        Loads a trained model from exp_dir. Gets the model name from train_config.json.\n        \"\"\"", "\n", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "exp_dir", ")", "\n", "model_name", "=", "IOUtils", ".", "load", "(", "exp_dir", "/", "\"model_name.txt\"", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "model_cls", "=", "get_model_cls", "(", "model_name", ")", "\n", "model_dir", "=", "exp_dir", "/", "\"model\"", "\n", "return", "model_cls", ".", "load", "(", "model_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.TrainConfig.TrainConfig.get_train_config_from_cmd_options": [[10, 21], ["typing.get_type_hints().items", "cls", "typing.get_type_hints", "t", "options.pop"], "methods", ["None"], ["@", "classmethod", "\n", "def", "get_train_config_from_cmd_options", "(", "cls", ",", "options", ":", "dict", ")", "->", "\"TrainConfig\"", ":", "\n", "        ", "\"\"\"\n        Gets a TrainConfig from the command line options (the options will be modified\n        in place to remove the parsed fields).\n        \"\"\"", "\n", "field_values", "=", "{", "}", "\n", "for", "f", ",", "t", "in", "get_type_hints", "(", "cls", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "f", "in", "options", ":", "\n", "                ", "field_values", "[", "f", "]", "=", "t", "(", "options", ".", "pop", "(", "f", ")", ")", "\n", "", "", "return", "cls", "(", "**", "field_values", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.get_random_seed": [[21, 28], ["time.time_ns"], "methods", ["None"], ["@", "classmethod", "\n", "def", "get_random_seed", "(", "cls", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Generates a random int as seed, within the range of [0, 2**32)\n        The seed is generated based on current time\n        \"\"\"", "\n", "return", "time", ".", "time_ns", "(", ")", "%", "(", "2", "**", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.tokenize_javaparser": [[29, 32], ["cls.tokenize_javaparser_batch"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.tokenize_javaparser_batch"], ["", "@", "classmethod", "\n", "def", "tokenize_javaparser", "(", "cls", ",", "code", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "cls", ".", "tokenize_javaparser_batch", "(", "[", "code", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.tokenize_javaparser_batch": [[33, 70], ["collections.OrderedDict", "list", "range", "ids.append", "code_2_id.keys", "tbar.set_description", "tbar.reset", "len", "cls.tokenize_javaparser_batch_", "code_2_id.setdefault", "len", "copy.copy", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.tokenize_javaparser_batch_"], ["", "@", "classmethod", "\n", "def", "tokenize_javaparser_batch", "(", "\n", "cls", ",", "\n", "code_list", ":", "List", "[", "str", "]", ",", "\n", "dup_share", ":", "bool", "=", "True", ",", "\n", "tbar", ":", "Optional", "[", "tqdm", "]", "=", "None", ",", "\n", ")", "->", "List", "[", "List", "[", "str", "]", "]", ":", "\n", "        ", "\"\"\"\n        Tokenizes a list of code using JavaParser.\n        :param code_list: a list of code to be tokenized.\n        :param dup_share: if True (default), the returned lists of tokens will be shared across duplicate code\n            (thus modifying one of them will affect others).\n        :param tbar: optional tqdm progress bar.\n        :returns a list of tokenized code.\n        \"\"\"", "\n", "# get an unique list of code to tokenize, maintain a backward mapping", "\n", "code_2_id", ":", "OrderedDict", "[", "str", ",", "int", "]", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "ids", ":", "List", "[", "int", "]", "=", "[", "]", "\n", "for", "c", "in", "code_list", ":", "\n", "            ", "ids", ".", "append", "(", "code_2_id", ".", "setdefault", "(", "c", ",", "len", "(", "code_2_id", ")", ")", ")", "\n", "\n", "", "unique_code_list", "=", "list", "(", "code_2_id", ".", "keys", "(", ")", ")", "\n", "if", "tbar", "is", "not", "None", ":", "\n", "            ", "tbar", ".", "set_description", "(", "f\"JavaParser Tokenize ({len(unique_code_list)}U/{len(code_list)})\"", ")", "\n", "tbar", ".", "reset", "(", "len", "(", "unique_code_list", ")", ")", "\n", "\n", "# Tokenize (with batching)", "\n", "", "unique_tokens_list", "=", "[", "]", "\n", "for", "beg", "in", "range", "(", "0", ",", "len", "(", "unique_code_list", ")", ",", "cls", ".", "TOKENIZE_JAVAPARSER_BATCH_SIZE", ")", ":", "\n", "            ", "unique_tokens_list", "+=", "cls", ".", "tokenize_javaparser_batch_", "(", "\n", "unique_code_list", "[", "beg", ":", "beg", "+", "cls", ".", "TOKENIZE_JAVAPARSER_BATCH_SIZE", "]", ",", "tbar", "=", "tbar", ",", "\n", ")", "\n", "\n", "", "if", "dup_share", ":", "\n", "            ", "return", "[", "unique_tokens_list", "[", "i", "]", "for", "i", "in", "ids", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "copy", ".", "copy", "(", "unique_tokens_list", "[", "i", "]", ")", "for", "i", "in", "ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.tokenize_javaparser_batch_": [[71, 112], ["tseval.Environment.Environment.require_collector", "pathlib.Path", "seutil.IOUtils.dump", "pathlib.Path", "seutil.BashUtils.run", "seutil.IOUtils.load", "seutil.IOUtils.rm", "seutil.IOUtils.rm", "zip", "tokenizer_inputs.append", "tempfile.mktemp", "tempfile.mktemp", "tbar.update", "len", "logger.warning", "len", "logger.warning", "len", "len", "code.strip"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Environment.Environment.require_collector", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "", "@", "classmethod", "\n", "def", "tokenize_javaparser_batch_", "(", "\n", "cls", ",", "\n", "code_list", ":", "List", "[", "str", "]", ",", "\n", "tbar", ":", "Optional", "[", "tqdm", "]", "=", "None", ",", "\n", ")", ":", "\n", "# Use JavaParser to tokenize", "\n", "        ", "Environment", ".", "require_collector", "(", ")", "\n", "\n", "tokenizer_inputs", "=", "[", "]", "\n", "for", "code", "in", "code_list", ":", "\n", "            ", "tokenizer_inputs", ".", "append", "(", "{", "\n", "\"index\"", ":", "len", "(", "tokenizer_inputs", ")", ",", "\n", "\"code\"", ":", "code", ",", "\n", "}", ")", "\n", "\n", "", "inputs_file", "=", "Path", "(", "tempfile", ".", "mktemp", "(", ")", ")", "\n", "IOUtils", ".", "dump", "(", "inputs_file", ",", "tokenizer_inputs", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "outputs_file", "=", "Path", "(", "tempfile", ".", "mktemp", "(", ")", ")", "\n", "\n", "BashUtils", ".", "run", "(", "\n", "f\"java -cp {Environment.collector_jar} org.tseval.ExtractToken '{inputs_file}' '{outputs_file}'\"", ",", "\n", "expected_return_code", "=", "0", ",", "\n", ")", "\n", "\n", "tokenizer_outputs", "=", "IOUtils", ".", "load", "(", "outputs_file", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "IOUtils", ".", "rm", "(", "inputs_file", ")", "\n", "IOUtils", ".", "rm", "(", "outputs_file", ")", "\n", "\n", "# Check for tokenizer failures", "\n", "for", "code", ",", "output", "in", "zip", "(", "code_list", ",", "tokenizer_outputs", ")", ":", "\n", "            ", "if", "len", "(", "code", ".", "strip", "(", ")", ")", "==", "0", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"Empty code: {code}\"", ")", "\n", "continue", "\n", "", "if", "len", "(", "output", "[", "\"tokens\"", "]", ")", "==", "0", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"Tokenizer failed: {code}\"", ")", "\n", "\n", "", "", "if", "tbar", "is", "not", "None", ":", "\n", "            ", "tbar", ".", "update", "(", "len", "(", "code_list", ")", ")", "\n", "\n", "", "return", "[", "d", "[", "\"tokens\"", "]", "for", "d", "in", "tokenizer_outputs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.is_identifier": [[116, 121], ["all", "len", "token[].isalpha", "c.isalnum"], "methods", ["None"], ["@", "classmethod", "\n", "def", "is_identifier", "(", "cls", ",", "token", ":", "str", ")", "->", "bool", ":", "\n", "        ", "return", "len", "(", "token", ")", ">", "0", "and", "(", "token", "[", "0", "]", ".", "isalpha", "(", ")", "or", "token", "[", "0", "]", "in", "\"_$\"", ")", "and", "all", "(", "[", "c", ".", "isalnum", "(", ")", "or", "c", "in", "\"_$\"", "for", "c", "in", "token", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.subtokenize": [[122, 132], ["cls.is_identifier", "cls.RE_SUBTOKENIZE.split"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.is_identifier", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split"], ["", "@", "classmethod", "\n", "def", "subtokenize", "(", "cls", ",", "token", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Subtokenizes an identifier name into subtokens, by CamelCase and snake_case.\n        \"\"\"", "\n", "# Only subtokenize identifier words (starts with letter _$, contains only alnum and _$)", "\n", "if", "cls", ".", "is_identifier", "(", "token", ")", ":", "\n", "            ", "return", "cls", ".", "RE_SUBTOKENIZE", ".", "split", "(", "token", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "token", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.subtokenize_batch": [[133, 146], ["enumerate", "cls.subtokenize", "len"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.subtokenize"], ["", "", "@", "classmethod", "\n", "def", "subtokenize_batch", "(", "cls", ",", "tokens", ":", "List", "[", "str", "]", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "int", "]", "]", ":", "\n", "        ", "\"\"\"\n        Subtokenizes list of tokens.\n        :return a list of subtokens, and a list of pointers to the original token indices.\n        \"\"\"", "\n", "sub_tokens", "=", "[", "]", "\n", "src_indices", "=", "[", "]", "\n", "for", "i", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "            ", "new_sub_tokens", "=", "cls", ".", "subtokenize", "(", "token", ")", "\n", "sub_tokens", "+=", "new_sub_tokens", "\n", "src_indices", "+=", "[", "i", "]", "*", "len", "(", "new_sub_tokens", ")", "\n", "", "return", "sub_tokens", ",", "src_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.subtokenize_space_batch": [[147, 167], ["enumerate", "cls.is_identifier", "cls.subtokenize", "sub_tokens.append", "src_indices.append", "len"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.is_identifier", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.subtokenize"], ["", "@", "classmethod", "\n", "def", "subtokenize_space_batch", "(", "cls", ",", "tokens", ":", "List", "[", "str", "]", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "int", "]", "]", ":", "\n", "        ", "\"\"\"\n        Subtokenizes list of tokens, and inserts special <SPACE> token when necessary\n        (between two identifiers).\n        :return a list of subtokens, and a list of pointers to the original token indices.\n        \"\"\"", "\n", "sub_tokens", "=", "[", "]", "\n", "src_indices", "=", "[", "]", "\n", "last_is_identifier", "=", "False", "\n", "for", "i", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "            ", "is_identifier", "=", "cls", ".", "is_identifier", "(", "token", ")", "\n", "if", "last_is_identifier", "and", "is_identifier", ":", "\n", "                ", "sub_tokens", ".", "append", "(", "cls", ".", "SPACE_TOKEN", ")", "\n", "src_indices", ".", "append", "(", "-", "1", ")", "\n", "", "new_sub_tokens", "=", "cls", ".", "subtokenize", "(", "token", ")", "\n", "sub_tokens", "+=", "new_sub_tokens", "\n", "src_indices", "+=", "[", "i", "]", "*", "len", "(", "new_sub_tokens", ")", "\n", "last_is_identifier", "=", "is_identifier", "\n", "", "return", "sub_tokens", ",", "src_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.regroup_subtokens": [[168, 182], ["collections.defaultdict", "zip", "sorted", "id2tokens.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "regroup_subtokens", "(", "cls", ",", "subtokens", ":", "List", "[", "str", "]", ",", "src_indices", ":", "List", "[", "int", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Given a list of subtokens and the original token indices, groups them back to tokens.\n        :param subtokens: a list of subtokens.\n        :param src_indices: the i-th indice should point to the original token that\n            sub_tokens[i] belongs to; -1 means it is a special sub_token.\n        :return: a list of tokens after regrouping.\n        \"\"\"", "\n", "id2tokens", ":", "Dict", "[", "int", ",", "str", "]", "=", "collections", ".", "defaultdict", "(", "str", ")", "\n", "for", "subtoken", ",", "i", "in", "zip", "(", "subtokens", ",", "src_indices", ")", ":", "\n", "            ", "if", "i", ">=", "0", ":", "\n", "                ", "id2tokens", "[", "i", "]", "+=", "subtoken", "\n", "", "", "return", "[", "id2tokens", "[", "i", "]", "for", "i", "in", "sorted", "(", "id2tokens", ".", "keys", "(", ")", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.RevisionIds.RevisionIds.init": [[11, 13], ["None"], "methods", ["None"], ["def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "method_ids", "=", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.init": [[41, 46], ["None"], "methods", ["None"], ["def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "years", "=", "[", "]", "\n", "self", ".", "params", "=", "[", "]", "\n", "self", ".", "misc", "=", "{", "}", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.fill_none": [[47, 54], ["None"], "methods", ["None"], ["", "def", "fill_none", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "years", "is", "None", ":", "\n", "            ", "self", ".", "years", "=", "[", "]", "\n", "", "if", "self", ".", "params", "is", "None", ":", "\n", "            ", "self", ".", "params", "=", "[", "]", "\n", "", "if", "self", ".", "misc", "is", "None", ":", "\n", "            ", "self", ".", "misc", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.save_dataset": [[55, 118], ["save_dir.mkdir", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.dump"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "save_dataset", "(", "\n", "cls", ",", "\n", "dataset", ":", "List", "[", "\"MethodData\"", "]", ",", "\n", "save_dir", ":", "Path", ",", "\n", "exist_ok", ":", "bool", "=", "True", ",", "\n", "append", ":", "bool", "=", "False", ",", "\n", "only", ":", "Optional", "[", "Iterable", "[", "str", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Saves dataset to save_dir. Different fields are saved in different files in the\n        directory.  Call graphs are shared for data from one project.\n        :param dataset: the list of data to save.\n        :param save_dir: the path to save.\n        :param exist_ok: if False, requires that save_dir doesn't exist; otherwise,\n            existing files in save_dir will be modified.\n        :param append: if True, append to current saved data (requires exist_ok=True);\n            otherwise, wipes out existing data at save_dir.\n        :param only: only save certain fields; the files corresponding to the other fields\n            are not touched; id are always saved.\n        \"\"\"", "\n", "save_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "exist_ok", ")", "\n", "\n", "IOUtils", ".", "dump", "(", "save_dir", "/", "\"id.jsonl\"", ",", "[", "d", ".", "id", "for", "d", "in", "dataset", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ",", "append", "=", "append", ")", "\n", "\n", "if", "only", "is", "None", "or", "\"prj\"", "in", "only", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "save_dir", "/", "\"prj.jsonl\"", ",", "[", "d", ".", "prj", "for", "d", "in", "dataset", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ",", "append", "=", "append", ")", "\n", "\n", "", "if", "only", "is", "None", "or", "\"years\"", "in", "only", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "save_dir", "/", "\"years.jsonl\"", ",", "[", "d", ".", "years", "for", "d", "in", "dataset", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ",", "append", "=", "append", ")", "\n", "\n", "", "if", "only", "is", "None", "or", "\"name\"", "in", "only", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "save_dir", "/", "\"name.jsonl\"", ",", "[", "d", ".", "name", "for", "d", "in", "dataset", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ",", "append", "=", "append", ")", "\n", "\n", "", "if", "only", "is", "None", "or", "\"code\"", "in", "only", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "save_dir", "/", "\"code.jsonl\"", ",", "[", "d", ".", "code", "for", "d", "in", "dataset", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ",", "append", "=", "append", ")", "\n", "\n", "", "if", "only", "is", "None", "or", "\"code_masked\"", "in", "only", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "save_dir", "/", "\"code_masked.jsonl\"", ",", "[", "d", ".", "code_masked", "for", "d", "in", "dataset", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ",", "append", "=", "append", ")", "\n", "\n", "", "if", "only", "is", "None", "or", "\"comment\"", "in", "only", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "save_dir", "/", "\"comment.jsonl\"", ",", "[", "d", ".", "comment", "for", "d", "in", "dataset", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ",", "append", "=", "append", ")", "\n", "\n", "", "if", "only", "is", "None", "or", "\"comment_summary\"", "in", "only", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "save_dir", "/", "\"comment_summary.jsonl\"", ",", "[", "d", ".", "comment_summary", "for", "d", "in", "dataset", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ",", "append", "=", "append", ")", "\n", "\n", "", "if", "only", "is", "None", "or", "\"cname\"", "in", "only", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "save_dir", "/", "\"cname.jsonl\"", ",", "[", "d", ".", "cname", "for", "d", "in", "dataset", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ",", "append", "=", "append", ")", "\n", "\n", "", "if", "only", "is", "None", "or", "\"qcname\"", "in", "only", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "save_dir", "/", "\"qcname.jsonl\"", ",", "[", "d", ".", "qcname", "for", "d", "in", "dataset", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ",", "append", "=", "append", ")", "\n", "\n", "", "if", "only", "is", "None", "or", "\"path\"", "in", "only", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "save_dir", "/", "\"path.jsonl\"", ",", "[", "d", ".", "path", "for", "d", "in", "dataset", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ",", "append", "=", "append", ")", "\n", "\n", "", "if", "only", "is", "None", "or", "\"ret\"", "in", "only", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "save_dir", "/", "\"ret.jsonl\"", ",", "[", "d", ".", "ret", "for", "d", "in", "dataset", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ",", "append", "=", "append", ")", "\n", "\n", "", "if", "only", "is", "None", "or", "\"params\"", "in", "only", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "save_dir", "/", "\"params.jsonl\"", ",", "[", "d", ".", "params", "for", "d", "in", "dataset", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ",", "append", "=", "append", ")", "\n", "\n", "", "if", "only", "is", "None", "or", "\"misc\"", "in", "only", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "save_dir", "/", "\"misc.jsonl\"", ",", "[", "d", ".", "misc", "for", "d", "in", "dataset", "]", ",", "IOUtils", ".", "Format", ".", "jsonList", ",", "append", "=", "append", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.iter_load_dataset": [[119, 160], ["seutil.IOUtils.load", "f2file.values", "save_dir.is_dir", "FileNotFoundError", "MethodData.MethodData", "f2file.keys", "file.close", "open", "json.loads", "setattr", "f2file[].readline", "seutil.IOUtils.dejsonfy"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "", "@", "classmethod", "\n", "def", "iter_load_dataset", "(", "\n", "cls", ",", "\n", "save_dir", ":", "Path", ",", "\n", "only", ":", "Optional", "[", "Iterable", "[", "str", "]", "]", "=", "None", ",", "\n", ")", "->", "Generator", "[", "\"MethodData\"", ",", "None", ",", "None", "]", ":", "\n", "        ", "\"\"\"\n        Iteratively loads dataset from the save directory.\n        :param save_dir: the directory to load data from.\n        :param only: only load certain fields; the other fields are not filled in the\n            loaded data; id is always loaded.\n        :return: a generator iteratively loading the dataset.\n        \"\"\"", "\n", "if", "not", "save_dir", ".", "is_dir", "(", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "f\"Not found saved data at {save_dir}\"", ")", "\n", "\n", "# First, load all ids", "\n", "", "ids", "=", "IOUtils", ".", "load", "(", "save_dir", "/", "\"id.jsonl\"", ",", "IOUtils", ".", "Format", ".", "jsonList", ")", "\n", "\n", "# The types of some line-by-line loaded fields", "\n", "f2type", "=", "{", "}", "\n", "f2file", "=", "{", "}", "\n", "for", "f", "in", "[", "\"prj\"", ",", "\"years\"", ",", "\"name\"", ",", "\"code\"", ",", "\"code_masked\"", ",", "\"comment\"", ",", "\"comment_summary\"", ",", "\"cname\"", ",", "\"qcname\"", ",", "\"path\"", ",", "\"ret\"", ",", "\"params\"", ",", "\"misc\"", "]", ":", "\n", "            ", "if", "only", "is", "None", "or", "f", "in", "only", ":", "\n", "                ", "f2file", "[", "f", "]", "=", "open", "(", "save_dir", "/", "f\"{f}.jsonl\"", ",", "\"r\"", ")", "\n", "\n", "", "", "for", "i", "in", "ids", ":", "\n", "            ", "d", "=", "MethodData", "(", "id", "=", "i", ")", "\n", "\n", "# Load line-by-line fields", "\n", "for", "f", "in", "f2file", ".", "keys", "(", ")", ":", "\n", "                ", "o", "=", "json", ".", "loads", "(", "f2file", "[", "f", "]", ".", "readline", "(", ")", ")", "\n", "if", "f", "in", "f2type", ":", "\n", "                    ", "o", "=", "IOUtils", ".", "dejsonfy", "(", "o", ",", "f2type", "[", "f", "]", ")", "\n", "", "setattr", "(", "d", ",", "f", ",", "o", ")", "\n", "\n", "", "yield", "d", "\n", "\n", "# Close all files", "\n", "", "for", "file", "in", "f2file", ".", "values", "(", ")", ":", "\n", "            ", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.load_dataset": [[161, 201], ["set", "cls.iter_load_dataset", "seutil.IOUtils.load", "tbar.set_description", "tbar.reset", "len", "dataset.append", "tbar.update", "len", "len"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.iter_load_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "", "@", "classmethod", "\n", "def", "load_dataset", "(", "\n", "cls", ",", "\n", "save_dir", ":", "Path", ",", "\n", "only", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", "expected_ids", ":", "List", "[", "int", "]", "=", "None", ",", "\n", "tbar", ":", "Optional", "[", "tqdm", "]", "=", "None", ",", "\n", ")", "->", "List", "[", "\"MethodData\"", "]", ":", "\n", "        ", "\"\"\"\n        Loads the dataset from save_dir.\n\n        :param expected_ids: if provided, the list of data ids to load; the returned dataset\n            will only contain these data.\n        :param tbar: an optional progress bar.\n        Other parameters are the same as #iter_load_dataset.\n        \"\"\"", "\n", "dataset", "=", "[", "]", "\n", "\n", "# Load all data by default", "\n", "if", "expected_ids", "is", "None", ":", "\n", "            ", "expected_ids", "=", "IOUtils", ".", "load", "(", "save_dir", "/", "\"id.jsonl\"", ",", "IOUtils", ".", "Format", ".", "jsonList", ")", "\n", "\n", "# Convert to set to speed up checking \"has\" relation", "\n", "", "expected_ids", "=", "set", "(", "expected_ids", ")", "\n", "\n", "if", "tbar", "is", "not", "None", ":", "\n", "            ", "tbar", ".", "set_description", "(", "\"Loading dataset\"", ")", "\n", "tbar", ".", "reset", "(", "len", "(", "expected_ids", ")", ")", "\n", "\n", "", "for", "d", "in", "cls", ".", "iter_load_dataset", "(", "save_dir", "=", "save_dir", ",", "only", "=", "only", ")", ":", "\n", "            ", "if", "d", ".", "id", "in", "expected_ids", ":", "\n", "                ", "dataset", ".", "append", "(", "d", ")", "\n", "if", "tbar", "is", "not", "None", ":", "\n", "                    ", "tbar", ".", "update", "(", "1", ")", "\n", "\n", "# Early stop loading if all data have been loaded", "\n", "", "if", "len", "(", "dataset", ")", "==", "len", "(", "expected_ids", ")", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.DataCollector.DataCollector.__init__": [[23, 36], ["DataCollector.DataCollector.repos_dir.mkdir", "seutil.IOUtils.mk_dir", "seutil.project.Project.set_downloads_dir"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", ")", ":", "\n", "        ", "self", ".", "repos_dir", "=", "Macros", ".", "results_dir", "/", "\"repos\"", "\n", "self", ".", "repos_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "self", ".", "repos_downloads_dir", ":", "Path", "=", "Macros", ".", "repos_downloads_dir", "\n", "IOUtils", ".", "mk_dir", "(", "self", ".", "repos_downloads_dir", ")", "\n", "Project", ".", "set_downloads_dir", "(", "self", ".", "repos_downloads_dir", ")", "\n", "\n", "self", ".", "raw_data_dir", "=", "Macros", ".", "raw_data_dir", "\n", "self", ".", "work_dir", "=", "Macros", ".", "work_dir", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.DataCollector.DataCollector.search_github_java_repos": [[37, 92], ["seutil.GitHubUtils.search_repos", "len", "tqdm.tqdm.tqdm", "indexed_repos.values", "tqdm.tqdm.tqdm.close", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.GitHubUtils.search_repos", "logs[].append", "seutil.project.Project", "seutil.GitHubUtils.ensure_github_api_call", "seutil.GitHubUtils.ensure_github_api_call", "seutil.GitHubUtils.ensure_github_api_call", "seutil.GitHubUtils.ensure_github_api_call", "seutil.GitHubUtils.ensure_github_api_call", "seutil.GitHubUtils.ensure_github_api_call", "projects.append", "tqdm.tqdm.tqdm.update", "seutil.IOUtils.jsonfy", "len", "datetime.datetime.now", "len", "repo.get_languages"], "methods", ["None"], ["", "def", "search_github_java_repos", "(", "self", ")", ":", "\n", "        ", "indexed_repos", "=", "{", "}", "\n", "logs", "=", "{", "\n", "\"start_time\"", ":", "f\"{datetime.datetime.now():%Y-%m-%d %H:%M:%S}\"", ",", "\n", "\"num_repo_topic\"", ":", "0", ",", "\n", "\"num_repo_user\"", ":", "[", "]", ",", "\n", "}", "\n", "\n", "# Find top 1000 starred repos under Java topic", "\n", "repos_topic", "=", "GitHubUtils", ".", "search_repos", "(", "q", "=", "\"topic:java language:java stars:>=20\"", ",", "sort", "=", "\"stars\"", ",", "order", "=", "\"desc\"", ",", "max_num_repos", "=", "1000", ")", "\n", "logs", "[", "\"num_repo_topic\"", "]", "=", "len", "(", "repos_topic", ")", "\n", "for", "repo", "in", "repos_topic", ":", "\n", "            ", "indexed_repos", "[", "repo", ".", "clone_url", "]", "=", "repo", "\n", "\n", "# Find top starred repos per user, list taken from https://github.com/collections/open-source-organizations", "\n", "#   (on Dec 15 2020) union {apache, facebook}", "\n", "", "for", "user", "in", "[", "\n", "\"adobe\"", ",", "\"RedHatOfficial\"", ",", "\"cfpb\"", ",", "\"Netflix\"", ",", "\"Esri\"", ",", "\"square\"", ",", "\"twitter\"", ",", "\n", "\"gilt\"", ",", "\"guardian\"", ",", "\"Yelp\"", ",", "\"Shopify\"", ",", "\"SAP\"", ",", "\"IBM\"", ",", "\"microsoft\"", ",", "\"artsy\"", ",", "\n", "\"OSGeo\"", ",", "\"godaddy\"", ",", "\"cloudflare\"", ",", "\"eleme\"", ",", "\"didi\"", ",", "\"alibaba\"", ",", "\"google\"", ",", "\n", "\"proyecto26\"", ",", "\"mozilla\"", ",", "\"zalando\"", ",", "\"stripe\"", ",", "\"newrelic\"", ",", "\"docker\"", ",", "\n", "\"ExpediaGroup\"", ",", "\"apache\"", ",", "\"facebook\"", ",", "\n", "]", ":", "\n", "            ", "repos_user", "=", "GitHubUtils", ".", "search_repos", "(", "q", "=", "f\"language:java user:{user} stars:>=20\"", ")", "\n", "logs", "[", "\"num_repo_user\"", "]", ".", "append", "(", "(", "user", ",", "len", "(", "repos_user", ")", ")", ")", "\n", "for", "repo", "in", "repos_user", ":", "\n", "                ", "indexed_repos", "[", "repo", ".", "clone_url", "]", "=", "repo", "\n", "\n", "", "", "projects", "=", "[", "]", "\n", "tbar", "=", "tqdm", "(", "desc", "=", "f\"Processing...\"", ",", "total", "=", "len", "(", "indexed_repos", ")", ")", "\n", "for", "repo", "in", "indexed_repos", ".", "values", "(", ")", ":", "\n", "# Put together a project instance", "\n", "            ", "p", "=", "Project", "(", ")", "\n", "p", ".", "url", "=", "GitHubUtils", ".", "ensure_github_api_call", "(", "lambda", "g", ":", "repo", ".", "clone_url", ")", "\n", "p", ".", "data", "[", "\"user\"", "]", "=", "GitHubUtils", ".", "ensure_github_api_call", "(", "lambda", "g", ":", "repo", ".", "owner", ".", "login", ")", "\n", "p", ".", "data", "[", "\"repo\"", "]", "=", "GitHubUtils", ".", "ensure_github_api_call", "(", "lambda", "g", ":", "repo", ".", "name", ")", "\n", "p", ".", "full_name", "=", "f\"{p.data['user']}_{p.data['repo']}\"", "\n", "p", ".", "data", "[", "\"branch\"", "]", "=", "GitHubUtils", ".", "ensure_github_api_call", "(", "lambda", "g", ":", "repo", ".", "default_branch", ")", "\n", "p", ".", "data", "[", "\"stars\"", "]", "=", "GitHubUtils", ".", "ensure_github_api_call", "(", "lambda", "g", ":", "repo", ".", "stargazers_count", ")", "\n", "p", ".", "data", "[", "\"languages\"", "]", "=", "GitHubUtils", ".", "ensure_github_api_call", "(", "lambda", "g", ":", "repo", ".", "get_languages", "(", ")", ")", "\n", "projects", ".", "append", "(", "p", ")", "\n", "tbar", ".", "update", "(", "1", ")", "\n", "", "tbar", ".", "close", "(", ")", "\n", "\n", "IOUtils", ".", "dump", "(", "\n", "self", ".", "repos_dir", "/", "\"github-java-repos.json\"", ",", "\n", "IOUtils", ".", "jsonfy", "(", "projects", ")", ",", "\n", "IOUtils", ".", "Format", ".", "jsonPretty", ",", "\n", ")", "\n", "IOUtils", ".", "dump", "(", "\n", "self", ".", "repos_dir", "/", "\"github-java-repos-logs.json\"", ",", "\n", "logs", ",", "\n", "IOUtils", ".", "Format", ".", "jsonNoSort", ",", "\n", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.DataCollector.DataCollector.filter_repos": [[93, 184], ["seutil.IOUtils.dejsonfy", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.reset", "tqdm.tqdm.tqdm.close", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "seutil.IOUtils.load", "len", "len", "tqdm.tqdm.tqdm.set_description", "tqdm.tqdm.tqdm.update", "seutil.IOUtils.jsonfy", "logs[].append", "filtered_projects.append", "datetime.datetime.now", "p.data[].get", "logs[].append", "p.data[].get", "logs[].append", "p.checkout", "seutil.IOUtils.rm_dir", "seutil.TimeUtils.time_limit", "p.clone", "seutil.IOUtils.cd", "range", "logs[].append", "logger.warning", "logs[].append", "seutil.BashUtils.run", "seutil.BashUtils.run.stdout.split", "logs[].append", "traceback.format_exc", "len", "traceback.format_exc", "seutil.BashUtils.run.stdout.strip"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split"], ["", "def", "filter_repos", "(", "\n", "self", ",", "\n", "year_end", ":", "int", "=", "2021", ",", "\n", "year_cnt", ":", "int", "=", "3", ",", "\n", "loc_min", ":", "int", "=", "1e6", ",", "\n", "loc_max", ":", "int", "=", "2e6", ",", "\n", "star_min", ":", "int", "=", "20", ",", "\n", ")", ":", "\n", "        ", "projects", ":", "List", "[", "Project", "]", "=", "IOUtils", ".", "dejsonfy", "(", "IOUtils", ".", "load", "(", "self", ".", "repos_dir", "/", "\"github-java-repos.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", ",", "List", "[", "Project", "]", ")", "\n", "logs", "=", "{", "\n", "\"start_time\"", ":", "f\"{datetime.datetime.now():%Y-%m-%d %H:%M:%S}\"", ",", "\n", "\"configs\"", ":", "{", "\n", "\"year_end\"", ":", "year_end", ",", "\n", "\"year_cnt\"", ":", "year_cnt", ",", "\n", "\"loc_min\"", ":", "loc_min", ",", "\n", "\"loc_max\"", ":", "loc_max", ",", "\n", "\"star_min\"", ":", "star_min", ",", "\n", "}", ",", "\n", "\"num_repo_initial\"", ":", "len", "(", "projects", ")", ",", "\n", "\"filtered_repos\"", ":", "[", "]", ",", "\n", "\"success\"", ":", "0", ",", "\n", "\"fail\"", ":", "0", ",", "\n", "}", "\n", "\n", "tbar", "=", "tqdm", "(", "\"Filtering... (+0 -0)\"", ")", "\n", "tbar", ".", "reset", "(", "len", "(", "projects", ")", ")", "\n", "success", "=", "0", "\n", "fail", "=", "0", "\n", "filtered_projects", "=", "[", "]", "\n", "for", "p", "in", "projects", ":", "\n", "            ", "tbar", ".", "set_description", "(", "f\"Filtering: {p.full_name} (+{success} -{fail})\"", ")", "\n", "filtered", "=", "True", "\n", "if", "p", ".", "data", "[", "\"stars\"", "]", "<", "star_min", ":", "\n", "                ", "logs", "[", "\"filtered_repos\"", "]", ".", "append", "(", "(", "p", ".", "full_name", ",", "\"star less than min\"", ")", ")", "\n", "", "elif", "p", ".", "data", "[", "\"languages\"", "]", ".", "get", "(", "\"Java\"", ")", "<", "loc_min", ":", "\n", "                ", "logs", "[", "\"filtered_repos\"", "]", ".", "append", "(", "(", "p", ".", "full_name", ",", "\"loc less than min\"", ")", ")", "\n", "", "elif", "p", ".", "data", "[", "\"languages\"", "]", ".", "get", "(", "\"Java\"", ")", ">", "loc_max", ":", "\n", "                ", "logs", "[", "\"filtered_repos\"", "]", ".", "append", "(", "(", "p", ".", "full_name", ",", "\"loc greater than max\"", ")", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "# Try to download the project", "\n", "                    ", "with", "TimeUtils", ".", "time_limit", "(", "300", ")", ":", "\n", "                        ", "p", ".", "clone", "(", ")", "\n", "", "p", ".", "checkout", "(", "p", ".", "data", "[", "\"branch\"", "]", ",", "is_forced", "=", "True", ")", "\n", "\n", "# Find out the shas at each year", "\n", "p", ".", "data", "[", "\"years\"", "]", "=", "{", "}", "\n", "with", "IOUtils", ".", "cd", "(", "p", ".", "checkout_dir", ")", ":", "\n", "                        ", "for", "year", "in", "range", "(", "year_end", ",", "year_end", "-", "year_cnt", "-", "1", ",", "-", "1", ")", ":", "\n", "                            ", "rr", "=", "BashUtils", ".", "run", "(", "f'git rev-list HEAD --first-parent --pretty=\"%at\" --after=\"{year-1}-1-1\" --before=\"{year}-1-1\" -1'", ")", "\n", "if", "rr", ".", "return_code", "==", "0", "and", "len", "(", "rr", ".", "stdout", ".", "strip", "(", ")", ")", ">", "0", ":", "\n", "                                ", "_", ",", "sha", ",", "timestamp", "=", "rr", ".", "stdout", ".", "split", "(", ")", "\n", "p", ".", "data", "[", "\"years\"", "]", "[", "year", "]", "=", "[", "sha", ",", "timestamp", "]", "\n", "", "else", ":", "\n", "                                ", "logs", "[", "\"filtered_repos\"", "]", ".", "append", "(", "(", "p", ".", "full_name", ",", "f\"no sha on year {year}\"", ")", ")", "\n", "break", "\n", "\n", "", "if", "year", "==", "year_end", "-", "year_cnt", ":", "\n", "                                ", "filtered", "=", "False", "\n", "", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "                    ", "raise", "\n", "", "except", "TimeoutException", ":", "\n", "                    ", "logs", "[", "\"filtered_repos\"", "]", ".", "append", "(", "(", "p", ".", "full_name", ",", "\"cannot clone\"", ")", ")", "\n", "", "except", ":", "\n", "                    ", "logger", ".", "warning", "(", "f\"Project {p.full_name} failed: {traceback.format_exc()}\"", ")", "\n", "logs", "[", "\"filtered_repos\"", "]", ".", "append", "(", "(", "p", ".", "full_name", ",", "traceback", ".", "format_exc", "(", ")", ")", ")", "\n", "", "finally", ":", "\n", "                    ", "IOUtils", ".", "rm_dir", "(", "p", ".", "checkout_dir", ")", "\n", "\n", "", "", "if", "not", "filtered", ":", "\n", "                ", "success", "+=", "1", "\n", "filtered_projects", ".", "append", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "fail", "+=", "1", "\n", "", "tbar", ".", "update", "(", "1", ")", "\n", "\n", "", "tbar", ".", "close", "(", ")", "\n", "logs", "[", "\"success\"", "]", "=", "success", "\n", "logs", "[", "\"fail\"", "]", "=", "fail", "\n", "\n", "IOUtils", ".", "dump", "(", "\n", "self", ".", "repos_dir", "/", "\"filtered-repos.json\"", ",", "\n", "IOUtils", ".", "jsonfy", "(", "filtered_projects", ")", ",", "\n", "IOUtils", ".", "Format", ".", "jsonPretty", ",", "\n", ")", "\n", "IOUtils", ".", "dump", "(", "\n", "self", ".", "repos_dir", "/", "\"filtered-repos-logs.json\"", ",", "\n", "logs", ",", "\n", "IOUtils", ".", "Format", ".", "jsonNoSort", ",", "\n", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.DataCollector.DataCollector.collect_raw_data_projects": [[185, 215], ["seutil.IOUtils.dejsonfy", "tqdm.tqdm.tqdm", "enumerate", "tqdm.tqdm.tqdm.close", "seutil.IOUtils.load", "tqdm.tqdm.tqdm.set_description", "len", "DataCollector.DataCollector.collect_raw_data_project", "tqdm.tqdm.tqdm.update", "logger.warning", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.DataCollector.DataCollector.collect_raw_data_project"], ["", "def", "collect_raw_data_projects", "(", "\n", "self", ",", "\n", "year_end", ":", "int", "=", "2021", ",", "\n", "year_cnt", ":", "int", "=", "3", ",", "\n", "skip_collected", ":", "bool", "=", "False", ",", "\n", "project_names", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "# Load (filtered) projects", "\n", "        ", "projects", "=", "IOUtils", ".", "dejsonfy", "(", "IOUtils", ".", "load", "(", "self", ".", "repos_dir", "/", "\"filtered-repos.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", ",", "List", "[", "Project", "]", ")", "\n", "\n", "if", "project_names", "is", "not", "None", ":", "\n", "            ", "projects", "=", "[", "p", "for", "p", "in", "projects", "if", "p", ".", "full_name", "in", "project_names", "]", "\n", "\n", "", "tbar", "=", "tqdm", "(", "total", "=", "len", "(", "projects", ")", ")", "\n", "for", "pi", ",", "prj", "in", "enumerate", "(", "projects", ")", ":", "\n", "            ", "tbar", ".", "set_description", "(", "f\"Processing {prj.full_name}\"", ")", "\n", "try", ":", "\n", "                ", "self", ".", "collect_raw_data_project", "(", "\n", "prj", ",", "\n", "year_end", "=", "year_end", ",", "\n", "year_cnt", "=", "year_cnt", ",", "\n", "skip_collected", "=", "skip_collected", ",", "\n", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "                ", "raise", "\n", "", "except", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"Project {prj.full_name} failed! Exception was:\\n{traceback.format_exc()}\"", ")", "\n", "", "finally", ":", "\n", "                ", "tbar", ".", "update", "(", "1", ")", "\n", "", "", "tbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.DataCollector.DataCollector.collect_raw_data_project": [[216, 256], ["tseval.Environment.Environment.require_collector", "seutil.IOUtils.rm_dir", "prj_raw_data_dir.mkdir", "list", "pathlib.Path", "seutil.IOUtils.dump", "logger.info", "seutil.BashUtils.run", "seutil.IOUtils.rm_dir", "prj_raw_data_dir.is_dir", "logger.info", "seutil.TimeUtils.time_limit", "prj.clone", "reversed", "str", "str", "str", "tempfile.mktemp", "logger.warning", "range", "year2sha.values", "str"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Environment.Environment.require_collector"], ["", "def", "collect_raw_data_project", "(", "\n", "self", ",", "\n", "prj", ":", "Project", ",", "\n", "year_end", ":", "int", "=", "2021", ",", "\n", "year_cnt", ":", "int", "=", "3", ",", "\n", "skip_collected", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "Environment", ".", "require_collector", "(", ")", "\n", "\n", "prj_raw_data_dir", "=", "self", ".", "raw_data_dir", "/", "prj", ".", "full_name", "\n", "if", "skip_collected", "and", "prj_raw_data_dir", ".", "is_dir", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "f\"Project {prj.full_name} already collected, skipping\"", ")", "\n", "\n", "# Clean up target directory", "\n", "", "IOUtils", ".", "rm_dir", "(", "prj_raw_data_dir", ")", "\n", "prj_raw_data_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Clone repo", "\n", "with", "TimeUtils", ".", "time_limit", "(", "300", ")", ":", "\n", "            ", "prj", ".", "clone", "(", ")", "\n", "\n", "# Call Java collector", "\n", "", "years", "=", "list", "(", "reversed", "(", "range", "(", "year_end", ",", "year_end", "-", "year_cnt", "-", "1", ",", "-", "1", ")", ")", ")", "\n", "year2sha", "=", "{", "y", ":", "prj", ".", "data", "[", "\"years\"", "]", "[", "str", "(", "y", ")", "]", "[", "0", "]", "for", "y", "in", "years", "}", "\n", "config", "=", "{", "\n", "\"projectDir\"", ":", "str", "(", "prj", ".", "checkout_dir", ")", ",", "\n", "\"outputDir\"", ":", "str", "(", "prj_raw_data_dir", ")", ",", "\n", "\"logFile\"", ":", "str", "(", "prj_raw_data_dir", "/", "\"log.txt\"", ")", ",", "\n", "\"shas\"", ":", "\" \"", ".", "join", "(", "year2sha", ".", "values", "(", ")", ")", ",", "\n", "}", "\n", "config_file", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "IOUtils", ".", "dump", "(", "config_file", ",", "config", ")", "\n", "\n", "logger", ".", "info", "(", "f\"Starting the Java collector; check log at {prj_raw_data_dir}/log.txt\"", ")", "\n", "rr", "=", "BashUtils", ".", "run", "(", "f\"java -cp {Environment.collector_jar} org.tseval.MethodDataCollector {config_file}\"", ",", "expected_return_code", "=", "0", ")", "\n", "if", "rr", ".", "stderr", ":", "\n", "            ", "logger", ".", "warning", "(", "f\"STDERR of Java collector:\\n{rr.stderr}\"", ")", "\n", "\n", "# Remove temp files and the repo", "\n", "", "IOUtils", ".", "rm_dir", "(", "prj", ".", "checkout_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.DataCollector.DataCollector.process_raw_data": [[257, 335], ["seutil.IOUtils.rm_dir", "shared_data_dir.mkdir", "seutil.IOUtils.dejsonfy", "collections.defaultdict", "tqdm.tqdm.tqdm", "seutil.IOUtils.dump", "print", "seutil.IOUtils.load", "tqdm.tqdm.tqdm.set_description", "seutil.IOUtils.dejsonfy", "seutil.IOUtils.dejsonfy", "seutil.IOUtils.load", "range", "collections.defaultdict", "year2ids.items", "set", "tseval.data.MethodData.MethodData.save_dataset", "seutil.IOUtils.load.items", "tqdm.tqdm.tqdm.update", "tseval.Utils.Utils.suggest_dvc_add", "len", "prj_raw_data_dir.is_dir", "logger.warning", "tqdm.tqdm.tqdm.update", "seutil.IOUtils.load", "seutil.IOUtils.load", "seen_data.values", "list", "unique_ds.append", "str", "logger.warning", "id2years[].add", "id2years[].update", "sorted", "str"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.save_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.suggest_dvc_add", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "def", "process_raw_data", "(", "\n", "self", ",", "\n", "year_end", ":", "int", "=", "2021", ",", "\n", "year_cnt", ":", "int", "=", "3", ",", "\n", ")", ":", "\n", "# Group all projects' data into work_dir", "\n", "        ", "shared_data_dir", "=", "self", ".", "work_dir", "/", "\"shared\"", "\n", "IOUtils", ".", "rm_dir", "(", "shared_data_dir", ")", "\n", "shared_data_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "# Load (filtered) projects", "\n", "projects", "=", "IOUtils", ".", "dejsonfy", "(", "IOUtils", ".", "load", "(", "self", ".", "repos_dir", "/", "\"filtered-repos.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", ",", "List", "[", "Project", "]", ")", "\n", "\n", "data_id", "=", "0", "\n", "filtered_counters", ":", "Dict", "[", "str", ",", "int", "]", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "tbar", "=", "tqdm", "(", "total", "=", "len", "(", "projects", ")", ")", "\n", "for", "prj", "in", "projects", ":", "\n", "            ", "tbar", ".", "set_description", "(", "f\"Processing {prj.full_name} (total collected {data_id})\"", ")", "\n", "# Read collector's results", "\n", "prj_raw_data_dir", "=", "self", ".", "raw_data_dir", "/", "prj", ".", "full_name", "\n", "if", "not", "prj_raw_data_dir", ".", "is_dir", "(", ")", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"Missing raw data from project {prj.full_name}\"", ")", "\n", "tbar", ".", "update", "(", "1", ")", "\n", "continue", "\n", "\n", "", "prj_method_data_list", ":", "List", "[", "MethodData", "]", "=", "IOUtils", ".", "dejsonfy", "(", "IOUtils", ".", "load", "(", "prj_raw_data_dir", "/", "\"method-data.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", ",", "List", "[", "MethodData", "]", ")", "\n", "prj_revisions_ids", ":", "List", "[", "RevisionIds", "]", "=", "IOUtils", ".", "dejsonfy", "(", "IOUtils", ".", "load", "(", "prj_raw_data_dir", "/", "\"revision-ids.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", ",", "List", "[", "RevisionIds", "]", ")", "\n", "prj_filtered_counters", "=", "IOUtils", ".", "load", "(", "prj_raw_data_dir", "/", "\"filtered-counters.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "\n", "# Extend dataset", "\n", "sha2ids", "=", "{", "ri", ".", "revision", ":", "ri", ".", "method_ids", "for", "ri", "in", "prj_revisions_ids", "}", "\n", "\n", "year2ids", "=", "{", "}", "\n", "for", "year", "in", "range", "(", "year_end", ",", "year_end", "-", "year_cnt", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "if", "str", "(", "year", ")", "not", "in", "prj", ".", "data", "[", "\"years\"", "]", ":", "\n", "                    ", "logger", ".", "warning", "(", "f\"Missing year {year} for {prj.full_name}\"", ")", "\n", "", "else", ":", "\n", "                    ", "sha", ",", "_", "=", "prj", ".", "data", "[", "\"years\"", "]", "[", "str", "(", "year", ")", "]", "\n", "year2ids", "[", "year", "]", "=", "sha2ids", "[", "sha", "]", "\n", "", "", "id2years", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "for", "y", ",", "ids", "in", "year2ids", ".", "items", "(", ")", ":", "\n", "                ", "for", "i", "in", "ids", ":", "\n", "                    ", "id2years", "[", "i", "]", ".", "add", "(", "y", ")", "\n", "\n", "# Remove seen data (code+comment+qcname)", "\n", "", "", "seen_data", ":", "Dict", "[", "Tuple", "[", "str", ",", "str", ",", "str", "]", ",", "int", "]", "=", "{", "}", "\n", "for", "md", "in", "prj_method_data_list", ":", "\n", "                ", "key", "=", "(", "md", ".", "code", ",", "md", ".", "comment", ",", "md", ".", "qcname", ")", "\n", "if", "key", "in", "seen_data", ":", "\n", "                    ", "id2years", "[", "seen_data", "[", "key", "]", "]", ".", "update", "(", "id2years", "[", "md", ".", "id", "]", ")", "\n", "", "else", ":", "\n", "                    ", "seen_data", "[", "key", "]", "=", "md", ".", "id", "\n", "\n", "", "", "unique_ids", "=", "set", "(", "seen_data", ".", "values", "(", ")", ")", "\n", "unique_ds", "=", "[", "]", "\n", "for", "md", "in", "prj_method_data_list", ":", "\n", "                ", "if", "md", ".", "id", "not", "in", "unique_ids", ":", "\n", "                    ", "continue", "\n", "\n", "", "md", ".", "years", "=", "list", "(", "sorted", "(", "id2years", "[", "md", ".", "id", "]", ")", ")", "\n", "md", ".", "prj", "=", "prj", ".", "full_name", "\n", "# Reassign id", "\n", "md", ".", "id", "=", "data_id", "\n", "data_id", "+=", "1", "\n", "unique_ds", ".", "append", "(", "md", ")", "\n", "\n", "", "MethodData", ".", "save_dataset", "(", "unique_ds", ",", "shared_data_dir", ",", "append", "=", "True", ")", "\n", "\n", "# Update filtered counters", "\n", "for", "k", ",", "v", "in", "prj_filtered_counters", ".", "items", "(", ")", ":", "\n", "                ", "filtered_counters", "[", "k", "]", "+=", "v", "\n", "\n", "", "tbar", ".", "update", "(", "1", ")", "\n", "\n", "# Save filtered counters", "\n", "", "IOUtils", ".", "dump", "(", "shared_data_dir", "/", "\"filtered-counters.json\"", ",", "filtered_counters", ",", "IOUtils", ".", "Format", ".", "jsonPretty", ")", "\n", "\n", "print", "(", "Utils", ".", "suggest_dvc_add", "(", "shared_data_dir", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.__init__": [[23, 27], ["seutil.IOUtils.mk_dir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "output_dir", "=", "Macros", ".", "results_dir", "/", "\"metrics\"", "\n", "IOUtils", ".", "mk_dir", "(", "self", ".", "output_dir", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.collect_metrics": [[28, 49], ["MetricsCollector.MetricsCollector.split_dataset", "MetricsCollector.MetricsCollector.setup_dataset", "MetricsCollector.MetricsCollector.setup_dataset_leak", "MetricsCollector.MetricsCollector.raw_data_filtered", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.split_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.setup_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.setup_dataset_leak", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.raw_data_filtered"], ["", "def", "collect_metrics", "(", "self", ",", "**", "options", ")", ":", "\n", "        ", "which", "=", "options", "[", "\"which\"", "]", "\n", "\n", "if", "which", "==", "\"split-dataset\"", ":", "\n", "            ", "self", ".", "split_dataset", "(", "\n", "split", "=", "options", "[", "\"split\"", "]", ",", "\n", ")", "\n", "", "elif", "which", "==", "\"setup-dataset\"", ":", "\n", "            ", "self", ".", "setup_dataset", "(", "\n", "task", "=", "options", "[", "\"task\"", "]", ",", "\n", "setup", "=", "options", "[", "\"setup\"", "]", ",", "\n", ")", "\n", "", "elif", "which", "==", "\"setup-dataset-leak\"", ":", "\n", "            ", "self", ".", "setup_dataset_leak", "(", "\n", "task", "=", "options", "[", "\"task\"", "]", ",", "\n", "setup", "=", "options", "[", "\"setup\"", "]", ",", "\n", ")", "\n", "", "elif", "which", "==", "\"raw-data-filtered\"", ":", "\n", "            ", "self", ".", "raw_data_filtered", "(", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "warning", "(", "f\"No such metrics {which}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.split_dataset": [[50, 93], ["tseval.data.MethodData.MethodData.load_dataset", "seutil.IOUtils.load", "sum", "tqdm.tqdm.tqdm", "MetricsCollector.MetricsCollector.collect_metrics_dataset", "x_metrics.items", "x_metrics_list.items", "tqdm.tqdm.tqdm.update", "tqdm.tqdm.tqdm.close", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "print", "tseval.Utils.Utils.suggest_dvc_add", "seutil.IOUtils.load", "MetricsCollector.MetricsCollector.collect_metrics_dataset", "x_metrics.items", "x_metrics_list.items", "tqdm.tqdm.tqdm.update", "itertools.combinations"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.load_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.collect_metrics_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.suggest_dvc_add", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.collect_metrics_dataset"], ["", "", "def", "split_dataset", "(", "self", ",", "split", ":", "str", ")", ":", "\n", "        ", "shared_data_dir", "=", "Macros", ".", "work_dir", "/", "\"shared\"", "\n", "split_dir", "=", "Macros", ".", "work_dir", "/", "\"split\"", "/", "split", "\n", "\n", "dataset", ":", "List", "[", "MethodData", "]", "=", "MethodData", ".", "load_dataset", "(", "shared_data_dir", ")", "\n", "indexed_dataset", ":", "Dict", "[", "int", ",", "MethodData", "]", "=", "{", "d", ".", "id", ":", "d", "for", "d", "in", "dataset", "}", "\n", "\n", "metrics", "=", "IOUtils", ".", "load", "(", "split_dir", "/", "\"stats.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "metrics", "[", "\"num_prj_all\"", "]", "=", "sum", "(", "metrics", "[", "f\"num_prj_{sn}\"", "]", "for", "sn", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test", "]", ")", "\n", "metrics_list", ":", "Dict", "[", "str", ",", "List", "]", "=", "{", "}", "\n", "\n", "tbar", "=", "tqdm", "(", "desc", "=", "\"Computing metrics...\"", ",", "total", "=", "1", "+", "3", "*", "3", "+", "6", ")", "\n", "\n", "# full set", "\n", "x_metrics", ",", "x_metrics_list", "=", "self", ".", "collect_metrics_dataset", "(", "dataset", ")", "\n", "for", "k", ",", "v", "in", "x_metrics", ".", "items", "(", ")", ":", "\n", "            ", "metrics", "[", "f\"all_{k}\"", "]", "=", "v", "\n", "", "for", "k", ",", "l", "in", "x_metrics_list", ".", "items", "(", ")", ":", "\n", "            ", "metrics_list", "[", "f\"all_{k}\"", "]", "=", "l", "\n", "", "tbar", ".", "update", "(", "1", ")", "\n", "\n", "# splits", "\n", "for", "s2", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", ",", "Macros", ".", "test_standard", ",", "Macros", ".", "test_common", "]", ":", "\n", "            ", "if", "s2", "==", "Macros", ".", "test_common", ":", "\n", "                ", "s1_options", "=", "[", "f\"{x}-{y}\"", "for", "x", ",", "y", "in", "itertools", ".", "combinations", "(", "Macros", ".", "split_types", ",", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "s1_options", "=", "Macros", ".", "split_types", "\n", "", "for", "s1", "in", "s1_options", ":", "\n", "                ", "ids", "=", "IOUtils", ".", "load", "(", "split_dir", "/", "f\"{s1}-{s2}.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "x_metrics", ",", "x_metrics_list", "=", "self", ".", "collect_metrics_dataset", "(", "\n", "[", "indexed_dataset", "[", "i", "]", "for", "i", "in", "ids", "]", "\n", ")", "\n", "for", "k", ",", "v", "in", "x_metrics", ".", "items", "(", ")", ":", "\n", "                    ", "metrics", "[", "f\"{s1}-{s2}_{k}\"", "]", "=", "v", "\n", "", "for", "k", ",", "l", "in", "x_metrics_list", ".", "items", "(", ")", ":", "\n", "                    ", "metrics_list", "[", "f\"{split}-{s2}_{k}\"", "]", "=", "l", "\n", "", "tbar", ".", "update", "(", "1", ")", "\n", "", "", "tbar", ".", "close", "(", ")", "\n", "\n", "# Save results", "\n", "IOUtils", ".", "dump", "(", "self", ".", "output_dir", "/", "f\"split-dataset-metrics_{split}.json\"", ",", "metrics", ",", "IOUtils", ".", "Format", ".", "jsonNoSort", ")", "\n", "IOUtils", ".", "dump", "(", "self", ".", "output_dir", "/", "f\"split-dataset-metrics-list_{split}.pkl\"", ",", "metrics_list", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "print", "(", "Utils", ".", "suggest_dvc_add", "(", "self", ".", "output_dir", "/", "f\"split-dataset-metrics-list_{split}.pkl\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.setup_dataset": [[94, 142], ["tseval.data.MethodData.MethodData.load_dataset", "data_dir.glob", "tqdm.tqdm.tqdm", "MetricsCollector.MetricsCollector.collect_metrics_dataset", "x_metrics.items", "x_metrics_list.items", "tqdm.tqdm.tqdm.update", "split2ids.items", "tqdm.tqdm.tqdm.close", "seutil.IOUtils.dump", "seutil.IOUtils.dump", "print", "seutil.IOUtils.load", "MetricsCollector.MetricsCollector.collect_metrics_dataset", "x_metrics.items", "x_metrics_list.items", "tqdm.tqdm.tqdm.update", "tseval.Utils.Utils.suggest_dvc_add", "RuntimeError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.load_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.collect_metrics_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.collect_metrics_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.suggest_dvc_add"], ["", "def", "setup_dataset", "(", "self", ",", "task", ":", "str", ",", "setup", ":", "str", ")", ":", "\n", "        ", "data_dir", "=", "Macros", ".", "work_dir", "/", "task", "/", "\"setup\"", "/", "setup", "/", "\"data\"", "\n", "dataset", ":", "List", "[", "MethodData", "]", "=", "MethodData", ".", "load_dataset", "(", "data_dir", ")", "\n", "indexed_dataset", ":", "Dict", "[", "int", ",", "MethodData", "]", "=", "{", "d", ".", "id", ":", "d", "for", "d", "in", "dataset", "}", "\n", "\n", "split2ids", "=", "{", "}", "\n", "for", "split_file", "in", "data_dir", ".", "glob", "(", "\"split_*.json\"", ")", ":", "\n", "            ", "split_name", "=", "split_file", ".", "stem", "[", "len", "(", "\"split_\"", ")", ":", "]", "\n", "split2ids", "[", "split_name", "]", "=", "IOUtils", ".", "load", "(", "split_file", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "\n", "", "metrics", "=", "{", "}", "\n", "metrics_list", "=", "{", "}", "\n", "\n", "tbar", "=", "tqdm", "(", "desc", "=", "\"Computing metrics...\"", ",", "total", "=", "1", "+", "len", "(", "split2ids", ")", ")", "\n", "\n", "if", "task", "==", "\"CG\"", ":", "\n", "            ", "only", "=", "[", "\"code\"", ",", "\"comment\"", "]", "\n", "", "elif", "task", "==", "\"MN\"", ":", "\n", "            ", "only", "=", "[", "\"code\"", ",", "\"name\"", "]", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", ")", "\n", "\n", "# Full set", "\n", "", "x_metrics", ",", "x_metrics_list", "=", "self", ".", "collect_metrics_dataset", "(", "dataset", ",", "subtokenized", "=", "True", ",", "only", "=", "only", ")", "\n", "for", "k", ",", "v", "in", "x_metrics", ".", "items", "(", ")", ":", "\n", "            ", "metrics", "[", "f\"all_{k}\"", "]", "=", "v", "\n", "", "for", "k", ",", "l", "in", "x_metrics_list", ".", "items", "(", ")", ":", "\n", "            ", "metrics_list", "[", "f\"all_{k}\"", "]", "=", "l", "\n", "", "tbar", ".", "update", "(", "1", ")", "\n", "\n", "# Splits", "\n", "for", "split", ",", "ids", "in", "split2ids", ".", "items", "(", ")", ":", "\n", "            ", "x_metrics", ",", "x_metrics_list", "=", "self", ".", "collect_metrics_dataset", "(", "\n", "[", "indexed_dataset", "[", "i", "]", "for", "i", "in", "ids", "]", ",", "\n", "subtokenized", "=", "True", ",", "\n", "only", "=", "only", ",", "\n", ")", "\n", "for", "k", ",", "v", "in", "x_metrics", ".", "items", "(", ")", ":", "\n", "                ", "metrics", "[", "f\"{split}_{k}\"", "]", "=", "v", "\n", "", "for", "k", ",", "l", "in", "x_metrics_list", ".", "items", "(", ")", ":", "\n", "                ", "metrics_list", "[", "f\"{split}_{k}\"", "]", "=", "l", "\n", "", "tbar", ".", "update", "(", "1", ")", "\n", "", "tbar", ".", "close", "(", ")", "\n", "\n", "# Save results", "\n", "IOUtils", ".", "dump", "(", "self", ".", "output_dir", "/", "f\"setup-dataset-metrics_{task}_{setup}.json\"", ",", "metrics", ",", "IOUtils", ".", "Format", ".", "jsonNoSort", ")", "\n", "IOUtils", ".", "dump", "(", "self", ".", "output_dir", "/", "f\"setup-dataset-metrics-list_{task}_{setup}.pkl\"", ",", "metrics_list", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "print", "(", "Utils", ".", "suggest_dvc_add", "(", "self", ".", "output_dir", "/", "f\"setup-dataset-metrics-list_{task}_{setup}.pkl\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.length_code": [[143, 152], ["len", "list", "traceback.print_exc", "javalang.tokenizer.tokenize"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "length_code", "(", "cls", ",", "code", ":", "str", ")", "->", "int", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "len", "(", "list", "(", "javalang", ".", "tokenizer", ".", "tokenize", "(", "code", ")", ")", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "raise", "\n", "", "except", ":", "\n", "            ", "traceback", ".", "print_exc", "(", ")", "\n", "return", "np", ".", "NaN", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.length_nl": [[153, 162], ["len", "list", "traceback.print_exc", "nltk.tokenize.word_tokenize"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "length_nl", "(", "cls", ",", "nl", ":", "str", ")", "->", "int", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "len", "(", "list", "(", "word_tokenize", "(", "nl", ")", ")", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "raise", "\n", "", "except", ":", "\n", "            ", "traceback", ".", "print_exc", "(", ")", "\n", "return", "np", ".", "NaN", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.subtokenize_code": [[163, 171], ["list", "re.sub().split", "re.sub", "c.lower"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalHelper.EvalHelper.split"], ["", "", "@", "classmethod", "\n", "def", "subtokenize_code", "(", "cls", ",", "tokens", ":", "List", "[", "str", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"Subtokenize the code.\"\"\"", "\n", "subtokens", "=", "list", "(", ")", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "curr", "=", "re", ".", "sub", "(", "'([a-z0-9])([A-Z])'", ",", "r'\\1 \\2'", ",", "token", ")", ".", "split", "(", ")", "\n", "subtokens", "=", "subtokens", "+", "[", "c", ".", "lower", "(", ")", "for", "c", "in", "curr", "]", "\n", "", "return", "subtokens", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.length_name": [[172, 181], ["len", "cls.subtokenize_code", "traceback.print_exc"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.subtokenize_code"], ["", "@", "classmethod", "\n", "def", "length_name", "(", "cls", ",", "name", ":", "str", ")", "->", "int", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "len", "(", "cls", ".", "subtokenize_code", "(", "[", "name", "]", ")", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "raise", "\n", "", "except", ":", "\n", "            ", "traceback", ".", "print_exc", "(", ")", "\n", "return", "np", ".", "NaN", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.collect_metrics_dataset": [[182, 225], ["len", "metrics_list.items", "tseval.Utils.Utils.SUMMARIES_FUNCS.items", "func", "len", "cls.length_code", "len", "cls.length_nl", "len", "cls.length_name", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.length_code", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.length_nl", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.length_name"], ["", "", "@", "classmethod", "\n", "def", "collect_metrics_dataset", "(", "\n", "cls", ",", "\n", "dataset", ":", "List", "[", "MethodData", "]", ",", "\n", "subtokenized", ":", "bool", "=", "False", ",", "\n", "only", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "Dict", "[", "str", ",", "Any", "]", ",", "Dict", "[", "str", ",", "List", "]", "]", ":", "\n", "        ", "metrics_list", ":", "Dict", "[", "str", ",", "List", "]", "=", "{", "}", "\n", "metrics", "=", "{", "}", "\n", "metrics", "[", "f\"num-data\"", "]", "=", "len", "(", "dataset", ")", "\n", "\n", "if", "only", "is", "None", "or", "\"code\"", "in", "only", ":", "\n", "            ", "if", "subtokenized", ":", "\n", "                ", "metrics_list", "[", "\"len-code\"", "]", "=", "[", "len", "(", "d", ".", "code", ")", "for", "d", "in", "dataset", "]", "\n", "", "else", ":", "\n", "                ", "metrics_list", "[", "\"len-code\"", "]", "=", "[", "cls", ".", "length_code", "(", "d", ".", "code", ")", "for", "d", "in", "dataset", "]", "\n", "\n", "", "for", "k", "in", "[", "100", ",", "150", ",", "200", "]", ":", "\n", "                ", "metrics", "[", "f\"len-code-le-{k}\"", "]", "=", "100", "*", "(", "len", "(", "[", "n", "for", "n", "in", "metrics_list", "[", "\"len-code\"", "]", "if", "n", "<=", "k", "]", ")", "/", "len", "(", "metrics_list", "[", "\"len-code\"", "]", ")", ")", "\n", "\n", "", "", "if", "only", "is", "None", "or", "\"comment\"", "in", "only", ":", "\n", "            ", "if", "subtokenized", ":", "\n", "                ", "metrics_list", "[", "\"len-comment\"", "]", "=", "[", "len", "(", "d", ".", "comment_summary", ")", "for", "d", "in", "dataset", "]", "\n", "", "else", ":", "\n", "                ", "metrics_list", "[", "\"len-comment\"", "]", "=", "[", "cls", ".", "length_nl", "(", "d", ".", "comment_summary", ")", "for", "d", "in", "dataset", "]", "\n", "\n", "", "for", "k", "in", "[", "20", ",", "30", ",", "50", "]", ":", "\n", "                ", "metrics", "[", "f\"len-comment-le-{k}\"", "]", "=", "100", "*", "(", "len", "(", "[", "n", "for", "n", "in", "metrics_list", "[", "\"len-comment\"", "]", "if", "n", "<=", "k", "]", ")", "/", "len", "(", "metrics_list", "[", "\"len-comment\"", "]", ")", ")", "\n", "\n", "", "", "if", "only", "is", "None", "or", "\"name\"", "in", "only", ":", "\n", "            ", "if", "subtokenized", ":", "\n", "                ", "metrics_list", "[", "\"len-name\"", "]", "=", "[", "len", "(", "d", ".", "name", ")", "for", "d", "in", "dataset", "]", "\n", "", "else", ":", "\n", "                ", "metrics_list", "[", "\"len-name\"", "]", "=", "[", "cls", ".", "length_name", "(", "d", ".", "name", ")", "for", "d", "in", "dataset", "]", "\n", "\n", "", "for", "k", "in", "[", "2", ",", "3", ",", "6", "]", ":", "\n", "                ", "metrics", "[", "f\"len-name-le-{k}\"", "]", "=", "100", "*", "(", "len", "(", "[", "n", "for", "n", "in", "metrics_list", "[", "\"len-name\"", "]", "if", "n", "<=", "k", "]", ")", "/", "len", "(", "metrics_list", "[", "\"len-name\"", "]", ")", ")", "\n", "\n", "", "", "for", "k", ",", "l", "in", "metrics_list", ".", "items", "(", ")", ":", "\n", "            ", "for", "s", ",", "func", "in", "Utils", ".", "SUMMARIES_FUNCS", ".", "items", "(", ")", ":", "\n", "                ", "metrics", "[", "f\"{k}-{s}\"", "]", "=", "func", "(", "l", ")", "\n", "\n", "", "", "return", "metrics", ",", "metrics_list", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.setup_dataset_leak": [[226, 320], ["tqdm.tqdm.tqdm", "tseval.data.MethodData.MethodData.load_dataset", "tqdm.tqdm.tqdm.close", "tseval.Macros.Macros.get_pairwise_split_types_with", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "metrics.update", "seutil.IOUtils.dump", "eval_sns.append", "seutil.IOUtils.load", "len", "counters.items", "sn2srcs[].add", "sn2tgts[].add", "sn2pairs[].add", "k.startswith", "RuntimeError", "sn2srcs[].add", "sn2tgts[].add", "sn2pairs[].add", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.load_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Macros.Macros.get_pairwise_split_types_with", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "def", "setup_dataset_leak", "(", "self", ",", "task", ":", "str", ",", "setup", ":", "str", ")", ":", "\n", "        ", "setup_dir", "=", "Macros", ".", "work_dir", "/", "task", "/", "\"setup\"", "/", "setup", "\n", "data_dir", "=", "setup_dir", "/", "\"data\"", "\n", "\n", "metrics", "=", "{", "}", "\n", "\n", "tbar", "=", "tqdm", "(", "\"Loading data\"", ")", "\n", "dataset", ":", "List", "[", "MethodData", "]", "=", "MethodData", ".", "load_dataset", "(", "data_dir", ",", "tbar", "=", "tbar", ")", "\n", "tbar", ".", "close", "(", ")", "\n", "indexed_ds", ":", "Dict", "[", "int", ",", "MethodData", "]", "=", "{", "d", ".", "id", ":", "d", "for", "d", "in", "dataset", "}", "\n", "\n", "eval_sns", "=", "[", "Macros", ".", "val", ",", "Macros", ".", "test_standard", "]", "\n", "# Assuming setup's name is the split's name", "\n", "for", "s1", ",", "s2", "in", "Macros", ".", "get_pairwise_split_types_with", "(", "setup", ")", ":", "\n", "            ", "eval_sns", ".", "append", "(", "f\"{Macros.test_common}-{s1}-{s2}\"", ")", "\n", "", "all_sns", "=", "[", "Macros", ".", "train", "]", "+", "eval_sns", "\n", "\n", "sn2ds", "=", "{", "}", "\n", "for", "ns", "in", "all_sns", ":", "\n", "            ", "ns_ids", "=", "IOUtils", ".", "load", "(", "data_dir", "/", "f\"split_{ns}.json\"", ")", "\n", "sn2ds", "[", "ns", "]", "=", "[", "indexed_ds", "[", "i", "]", "for", "i", "in", "ns_ids", "]", "\n", "metrics", "[", "f\"{ns}_num_data\"", "]", "=", "len", "(", "sn2ds", "[", "ns", "]", ")", "\n", "\n", "", "counters", ":", "Dict", "[", "str", ",", "int", "]", "=", "{", "}", "\n", "for", "a", "in", "all_sns", ":", "\n", "            ", "for", "b", "in", "[", "\"dup_src\"", ",", "\"dup_tgt\"", ",", "\"dup_pair\"", "]", ":", "\n", "                ", "counters", "[", "f\"{a}_{b}\"", "]", "=", "0", "\n", "", "if", "a", "!=", "Macros", ".", "train", ":", "\n", "                ", "for", "b", "in", "[", "\"leak_src\"", ",", "\"leak_tgt\"", ",", "\"leak_pair\"", "]", ":", "\n", "                    ", "counters", "[", "f\"{a}_{b}\"", "]", "=", "0", "\n", "", "", "", "sn2pairs", ":", "Dict", "[", "str", ",", "Set", "[", "Tuple", "[", "str", ",", "str", "]", "]", "]", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "sn2srcs", ":", "Dict", "[", "str", ",", "Set", "[", "str", "]", "]", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "sn2tgts", ":", "Dict", "[", "str", ",", "Set", "[", "str", "]", "]", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "\n", "for", "d", "in", "sn2ds", "[", "Macros", ".", "train", "]", ":", "\n", "            ", "src", "=", "\" \"", ".", "join", "(", "d", ".", "code", ")", "\n", "if", "task", "==", "Macros", ".", "com_gen", ":", "\n", "                ", "tgt", "=", "\" \"", ".", "join", "(", "d", ".", "comment_summary", ")", "\n", "", "elif", "task", "==", "Macros", ".", "met_nam", ":", "\n", "                ", "tgt", "=", "\" \"", ".", "join", "(", "d", ".", "name", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", ")", "\n", "\n", "", "if", "src", "in", "sn2srcs", "[", "Macros", ".", "train", "]", ":", "\n", "                ", "counters", "[", "f\"{Macros.train}_dup_src\"", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "sn2srcs", "[", "Macros", ".", "train", "]", ".", "add", "(", "src", ")", "\n", "", "if", "tgt", "in", "sn2tgts", "[", "Macros", ".", "train", "]", ":", "\n", "                ", "counters", "[", "f\"{Macros.train}_dup_tgt\"", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "sn2tgts", "[", "Macros", ".", "train", "]", ".", "add", "(", "tgt", ")", "\n", "", "if", "(", "src", ",", "tgt", ")", "in", "sn2pairs", "[", "Macros", ".", "train", "]", ":", "\n", "                ", "counters", "[", "f\"{Macros.train}_dup_pair\"", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "sn2pairs", "[", "Macros", ".", "train", "]", ".", "add", "(", "(", "src", ",", "tgt", ")", ")", "\n", "\n", "", "", "for", "sn", "in", "eval_sns", ":", "\n", "            ", "for", "d", "in", "sn2ds", "[", "sn", "]", ":", "\n", "                ", "src", "=", "\" \"", ".", "join", "(", "d", ".", "code", ")", "\n", "if", "task", "==", "Macros", ".", "com_gen", ":", "\n", "                    ", "tgt", "=", "\" \"", ".", "join", "(", "d", ".", "comment_summary", ")", "\n", "", "elif", "task", "==", "Macros", ".", "met_nam", ":", "\n", "                    ", "tgt", "=", "\" \"", ".", "join", "(", "d", ".", "name", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", ")", "\n", "\n", "", "if", "src", "in", "sn2srcs", "[", "Macros", ".", "train", "]", ":", "\n", "                    ", "counters", "[", "f\"{sn}_leak_src\"", "]", "+=", "1", "\n", "", "if", "src", "in", "sn2srcs", "[", "sn", "]", ":", "\n", "                    ", "counters", "[", "f\"{sn}_dup_src\"", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "sn2srcs", "[", "sn", "]", ".", "add", "(", "src", ")", "\n", "", "if", "tgt", "in", "sn2tgts", "[", "Macros", ".", "train", "]", ":", "\n", "                    ", "counters", "[", "f\"{sn}_leak_tgt\"", "]", "+=", "1", "\n", "", "if", "tgt", "in", "sn2tgts", "[", "sn", "]", ":", "\n", "                    ", "counters", "[", "f\"{sn}_dup_tgt\"", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "sn2tgts", "[", "sn", "]", ".", "add", "(", "tgt", ")", "\n", "", "if", "(", "src", ",", "tgt", ")", "in", "sn2pairs", "[", "Macros", ".", "train", "]", ":", "\n", "                    ", "counters", "[", "f\"{sn}_leak_pair\"", "]", "+=", "1", "\n", "", "if", "(", "src", ",", "tgt", ")", "in", "sn2pairs", "[", "sn", "]", ":", "\n", "                    ", "counters", "[", "f\"{sn}_dup_pair\"", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "sn2pairs", "[", "sn", "]", ".", "add", "(", "(", "src", ",", "tgt", ")", ")", "\n", "\n", "# Compute fractions", "\n", "", "", "", "metrics", ".", "update", "(", "counters", ")", "\n", "for", "sn", "in", "all_sns", ":", "\n", "            ", "for", "k", ",", "v", "in", "counters", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", ".", "startswith", "(", "sn", ")", ":", "\n", "                    ", "metrics", "[", "f\"{k}_frac\"", "]", "=", "counters", "[", "k", "]", "/", "metrics", "[", "f\"{sn}_num_data\"", "]", "\n", "\n", "# Save results", "\n", "", "", "", "IOUtils", ".", "dump", "(", "self", ".", "output_dir", "/", "f\"setup-dataset-leak-metrics_{task}_{setup}.json\"", ",", "metrics", ",", "IOUtils", ".", "Format", ".", "jsonNoSort", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.MetricsCollector.MetricsCollector.raw_data_filtered": [[321, 331], ["collections.Counter", "tseval.Macros.Macros.raw_data_dir.glob", "seutil.IOUtils.dump", "seutil.IOUtils.load", "collections.Counter.update", "d.is_dir"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "def", "raw_data_filtered", "(", "self", ")", ":", "\n", "        ", "filtered_counters", "=", "collections", ".", "Counter", "(", ")", "\n", "\n", "for", "d", "in", "Macros", ".", "raw_data_dir", ".", "glob", "(", "\"*\"", ")", ":", "\n", "            ", "if", "not", "d", ".", "is_dir", "(", ")", "or", "not", "(", "d", "/", "\"filtered-counters.json\"", ")", ".", "is_file", "(", ")", ":", "\n", "                ", "continue", "\n", "", "prj_filtered_counters", "=", "IOUtils", ".", "load", "(", "d", "/", "\"filtered-counters.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "filtered_counters", ".", "update", "(", "prj_filtered_counters", ")", "\n", "\n", "", "IOUtils", ".", "dump", "(", "self", ".", "output_dir", "/", "\"raw-data-filtered.json\"", ",", "filtered_counters", ",", "IOUtils", ".", "Format", ".", "jsonPretty", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.__init__": [[125, 136], ["seutil.IOUtils.dejsonfy", "ExperimentsAnalyzer.ExperimentsAnalyzer.output_dir.mkdir", "ExperimentsAnalyzer.ExperimentsAnalyzer.table_dir.mkdir", "seutil.IOUtils.load"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["    ", "def", "__init__", "(", "self", ",", "exps_spec_path", ":", "Path", ",", "output_prefix", ":", "str", "=", "None", ")", ":", "\n", "        ", "if", "output_prefix", "is", "None", ":", "\n", "            ", "output_prefix", "=", "exps_spec_path", ".", "stem", "\n", "\n", "", "self", ".", "exps_spec_path", "=", "exps_spec_path", "\n", "self", ".", "spec", ":", "ExperimentsSpec", "=", "IOUtils", ".", "dejsonfy", "(", "IOUtils", ".", "load", "(", "exps_spec_path", ",", "IOUtils", ".", "Format", ".", "yaml", ")", ",", "ExperimentsSpec", ")", "\n", "self", ".", "output_dir", "=", "Macros", ".", "results_dir", "/", "\"exps\"", "/", "output_prefix", "\n", "self", ".", "output_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "table_dir", "=", "Macros", ".", "paper_dir", "/", "\"tables\"", "\n", "self", ".", "table_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "plot_sub_dir", "=", "Macros", ".", "paper_dir", "/", "\"figs\"", "/", "f\"results-{self.spec.task}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.check_files": [[137, 201], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict.items", "collections.defaultdict.items", "print", "print", "print", "print", "print", "print", "len", "errors[].append", "print", "print", "len", "warnings[].append", "result_dir.is_dir", "dvc_pull.append", "metric_dir.is_dir", "dvc_pull.append", "result_dir.is_dir", "metric_dir.is_dir", "ExperimentsAnalyzer.ExperimentsAnalyzer.get_result_prefixes", "warnings[].append", "len", "result_dir_dvc.is_file", "errors[].append", "dvc_pull.append", "metric_dir_dvc.is_file", "errors[].append", "dvc_pull.append", "any", "len", "errors[].append", "any", "str", "errors[].append", "tseval.Macros.Macros.get_pairwise_split_types_with"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.get_result_prefixes", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Macros.Macros.get_pairwise_split_types_with"], ["", "def", "check_files", "(", "self", ")", ":", "\n", "        ", "errors", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "warnings", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "dvc_pull", "=", "[", "]", "\n", "for", "model", "in", "self", ".", "spec", ".", "models", ":", "\n", "            ", "if", "len", "(", "model", ".", "exps", ")", "<", "self", ".", "spec", ".", "num_trials", ":", "\n", "                ", "errors", "[", "\"not_enough_trials\"", "]", ".", "append", "(", "f\"{model}: {len(model.exps)}/{self.spec.num_trials}\"", ")", "\n", "", "elif", "len", "(", "model", ".", "exps", ")", ">", "self", ".", "spec", ".", "num_trials", ":", "\n", "                ", "warnings", "[", "\"too_many_trials\"", "]", ".", "append", "(", "f\"{model}: {len(model.exps)}/{self.spec.num_trials}\"", ")", "\n", "", "for", "setup", "in", "self", ".", "spec", ".", "setups", ":", "\n", "                ", "for", "exp", "in", "model", ".", "exps", ":", "\n", "# Check existence of result/metric directories, and suggest dvc pull", "\n", "                    ", "result_dir", "=", "Macros", ".", "work_dir", "/", "self", ".", "spec", ".", "task", "/", "\"result\"", "/", "setup", "/", "exp", "\n", "result_dir_dvc", "=", "Macros", ".", "work_dir", "/", "self", ".", "spec", ".", "task", "/", "\"result\"", "/", "setup", "/", "f\"{exp}.dvc\"", "\n", "if", "not", "result_dir", ".", "is_dir", "(", ")", ":", "\n", "                        ", "if", "not", "result_dir_dvc", ".", "is_file", "(", ")", ":", "\n", "                            ", "errors", "[", "\"missing_result\"", "]", ".", "append", "(", "f\"{setup}, {model}, {exp}: {result_dir}\"", ")", "\n", "", "else", ":", "\n", "                            ", "dvc_pull", ".", "append", "(", "result_dir_dvc", ")", "\n", "", "", "else", ":", "\n", "                        ", "dvc_pull", ".", "append", "(", "result_dir_dvc", ")", "\n", "\n", "", "metric_dir", "=", "Macros", ".", "work_dir", "/", "self", ".", "spec", ".", "task", "/", "\"metric\"", "/", "setup", "/", "exp", "\n", "metric_dir_dvc", "=", "Macros", ".", "work_dir", "/", "self", ".", "spec", ".", "task", "/", "\"metric\"", "/", "setup", "/", "f\"{exp}.dvc\"", "\n", "if", "not", "metric_dir", ".", "is_dir", "(", ")", ":", "\n", "                        ", "if", "not", "metric_dir_dvc", ".", "is_file", "(", ")", ":", "\n", "                            ", "errors", "[", "\"missing_metric\"", "]", ".", "append", "(", "f\"{setup}, {model}, {exp}: {metric_dir}\"", ")", "\n", "", "else", ":", "\n", "                            ", "dvc_pull", ".", "append", "(", "metric_dir_dvc", ")", "\n", "", "", "else", ":", "\n", "                        ", "dvc_pull", ".", "append", "(", "metric_dir_dvc", ")", "\n", "\n", "", "if", "result_dir", ".", "is_dir", "(", ")", "and", "metric_dir", ".", "is_dir", "(", ")", ":", "\n", "# Check completeness of result/metric files", "\n", "                        ", "sns", "=", "self", ".", "get_result_prefixes", "(", "setup", ")", "\n", "result_suffixes", "=", "[", "\"golds.jsonl\"", ",", "\"predictions.jsonl\"", "]", "\n", "metric_suffixes", "=", "[", "\"metrics.json\"", ",", "\"metrics.txt\"", ",", "\"metrics_list.pkl\"", "]", "\n", "for", "sns", ",", "action", "in", "[", "\n", "(", "[", "Macros", ".", "val", "]", ",", "Macros", ".", "val", ")", ",", "\n", "(", "[", "Macros", ".", "test_standard", "]", ",", "Macros", ".", "test_standard", ")", ",", "\n", "(", "[", "f\"{Macros.test_common}-{x}-{y}\"", "for", "x", ",", "y", "in", "Macros", ".", "get_pairwise_split_types_with", "(", "setup", ")", "]", ",", "\n", "Macros", ".", "test_common", ")", ",", "\n", "]", ":", "\n", "                            ", "if", "any", "(", "not", "(", "result_dir", "/", "f\"{sn}_{sf}\"", ")", ".", "is_file", "(", ")", "for", "sf", "in", "result_suffixes", "for", "sn", "in", "sns", ")", ":", "\n", "                                ", "errors", "[", "\"missing_file\"", "]", ".", "append", "(", "\n", "f\"python -m tseval.main exp_eval --task={self.spec.task} --setup_name={setup} --exp_name={exp} --action={action} && python -m tseval.main exp_compute_metrics --task={self.spec.task} --setup_name={setup} --exp_name={exp} --action={action}\"", ")", "\n", "", "elif", "any", "(", "not", "(", "metric_dir", "/", "f\"{sn}_{sf}\"", ")", ".", "is_file", "(", ")", "for", "sf", "in", "metric_suffixes", "for", "sn", "in", "sns", ")", ":", "\n", "                                ", "errors", "[", "\"missing_file\"", "]", ".", "append", "(", "\n", "f\"python -m tseval.main exp_compute_metrics --task={self.spec.task} --setup_name={setup} --exp_name={exp} --action={action}\"", ")", "\n", "", "", "", "else", ":", "\n", "                        ", "warnings", "[", "\"missing_file_possible\"", "]", ".", "append", "(", "f\"{setup}, {model}, {exp}\"", ")", "\n", "\n", "", "", "", "", "for", "key", ",", "values", "in", "errors", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "f\"ERROR: {key} -----\"", ")", "\n", "for", "value", "in", "values", ":", "\n", "                ", "print", "(", "f\"  {value}\"", ")", "\n", "", "print", "(", "\"-----\"", ")", "\n", "", "for", "key", ",", "values", "in", "warnings", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "f\"WARNING: {key} -----\"", ")", "\n", "for", "value", "in", "values", ":", "\n", "                ", "print", "(", "f\"  {value}\"", ")", "\n", "", "print", "(", "\"-----\"", ")", "\n", "", "print", "(", "f\"Execute this dvc command to update results to latest version:\"", ")", "\n", "print", "(", "f\"  dvc pull \"", "+", "\" \"", ".", "join", "(", "[", "f\"'{str(x)}'\"", "for", "x", "in", "dvc_pull", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.recompute_metrics": [[202, 228], ["pathlib.Path", "seutil.IOUtils.dump", "pathlib.Path.chmod", "print", "tempfile.mktemp", "tseval.Environment.Environment.get_conda_init_path", "dvc_add.append", "str", "commands.append"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Environment.Environment.get_conda_init_path"], ["", "def", "recompute_metrics", "(", "self", ")", ":", "\n", "        ", "commands", "=", "[", "]", "\n", "dvc_add", "=", "[", "]", "\n", "for", "model", "in", "self", ".", "spec", ".", "models", ":", "\n", "            ", "for", "setup", "in", "self", ".", "spec", ".", "setups", ":", "\n", "                ", "for", "exp", "in", "model", ".", "exps", ":", "\n", "                    ", "metric_dir", "=", "Macros", ".", "work_dir", "/", "self", ".", "spec", ".", "task", "/", "\"metric\"", "/", "setup", "/", "exp", "\n", "for", "action", "in", "[", "Macros", ".", "val", ",", "Macros", ".", "test_standard", ",", "Macros", ".", "test_common", "]", ":", "\n", "                        ", "commands", ".", "append", "(", "\n", "f\"python -m tseval.main exp_compute_metrics --task={self.spec.task} --setup_name={setup} --exp_name={exp} --action={action}\"", ")", "\n", "", "dvc_add", ".", "append", "(", "metric_dir", ")", "\n", "\n", "# Prepare a temporary script", "\n", "", "", "", "s", "=", "\"#!/bin/bash\\n\"", "\n", "s", "+=", "f\"source {Environment.get_conda_init_path()}\\n\"", "\n", "s", "+=", "\"conda activate tseval\\n\"", "\n", "s", "+=", "f\"cd {Macros.python_dir}\\n\"", "\n", "s", "+=", "\"set -e\\n\"", "\n", "s", "+=", "\"set -x\\n\"", "\n", "for", "c", "in", "commands", ":", "\n", "            ", "s", "+=", "c", "+", "\"\\n\"", "\n", "", "s", "+=", "\"dvc add \"", "+", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "dvc_add", "]", ")", "\n", "script_path", "=", "Path", "(", "tempfile", ".", "mktemp", "(", "prefix", "=", "\"tseval\"", ")", ")", "\n", "IOUtils", ".", "dump", "(", "script_path", ",", "s", ",", "IOUtils", ".", "Format", ".", "txt", ")", "\n", "script_path", ".", "chmod", "(", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IWUSR", "|", "stat", ".", "S_IXUSR", ")", "\n", "print", "(", "script_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.get_result_prefixes": [[229, 233], ["tseval.Macros.Macros.get_pairwise_split_types_with"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Macros.Macros.get_pairwise_split_types_with"], ["", "@", "classmethod", "\n", "def", "get_result_prefixes", "(", "cls", ",", "split", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "[", "Macros", ".", "val", ",", "Macros", ".", "test_standard", "]", "+", "[", "f\"{Macros.test_common}-{x}-{y}\"", "for", "x", ",", "y", "in", "Macros", ".", "get_pairwise_split_types_with", "(", "split", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.extract_metrics": [[234, 262], ["pandas.DataFrame", "seutil.IOUtils.dump", "ExperimentsAnalyzer.ExperimentsAnalyzer.get_avg_df", "seutil.IOUtils.dump", "ExperimentsAnalyzer.ExperimentsAnalyzer.get_result_prefixes", "enumerate", "seutil.IOUtils.load", "enumerate", "lod.append"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.get_avg_df", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.get_result_prefixes", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "def", "extract_metrics", "(", "self", ")", ":", "\n", "        ", "lod", ":", "List", "[", "dict", "]", "=", "[", "]", "\n", "for", "setup", "in", "self", ".", "spec", ".", "setups", ":", "\n", "            ", "sns", "=", "self", ".", "get_result_prefixes", "(", "setup", ")", "\n", "for", "model", "in", "self", ".", "spec", ".", "models", ":", "\n", "                ", "for", "trial_i", ",", "exp", "in", "enumerate", "(", "model", ".", "exps", ")", ":", "\n", "                    ", "metric_dir", "=", "Macros", ".", "work_dir", "/", "self", ".", "spec", ".", "task", "/", "\"metric\"", "/", "setup", "/", "exp", "\n", "for", "sn", "in", "sns", ":", "\n", "                        ", "metric_file", "=", "metric_dir", "/", "f\"{sn}_metrics_list.pkl\"", "\n", "metrics", "=", "IOUtils", ".", "load", "(", "metric_file", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "for", "m", "in", "self", ".", "spec", ".", "metrics", ":", "\n", "                            ", "for", "data_i", ",", "score", "in", "enumerate", "(", "metrics", "[", "m", "]", ")", ":", "\n", "                                ", "lod", ".", "append", "(", "{", "\n", "\"setup\"", ":", "setup", ",", "\n", "\"model\"", ":", "model", ".", "name", ",", "\n", "\"trial_i\"", ":", "trial_i", ",", "\n", "\"data_i\"", ":", "data_i", ",", "\n", "\"set_name\"", ":", "sn", ",", "\n", "\"metric\"", ":", "m", ",", "\n", "\"score\"", ":", "score", ",", "\n", "}", ")", "\n", "\n", "", "", "", "", "", "", "full_df", "=", "pd", ".", "DataFrame", "(", "lod", ")", "\n", "IOUtils", ".", "dump", "(", "self", ".", "output_dir", "/", "\"full_df.pkl\"", ",", "full_df", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "\n", "# Compute average", "\n", "avg_df", "=", "self", ".", "get_avg_df", "(", "full_df", ")", "\n", "IOUtils", ".", "dump", "(", "self", ".", "output_dir", "/", "\"avg_df.pkl\"", ",", "avg_df", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.extract_data_similarities": [[263, 333], ["itertools.combinations", "pandas.DataFrame", "seutil.IOUtils.dump", "tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "tseval.data.MethodData.MethodData.load_dataset", "seutil.IOUtils.load", "enumerate", "seutil.IOUtils.load", "enumerate", "tseval.util.ModelUtils.ModelUtils.regroup_subtokens", "seutil.IOUtils.load", "ExperimentsAnalyzer.ExperimentsAnalyzer.compute_data_similarities", "lod.append", "ExperimentsAnalyzer.ExperimentsAnalyzer.compute_data_similarities", "RuntimeError", "seutil.IOUtils.load", "lod.append"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Utils.Utils.expect_dir_or_suggest_dvc_pull", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.load_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.util.ModelUtils.ModelUtils.regroup_subtokens", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.compute_data_similarities", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.compute_data_similarities", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "def", "extract_data_similarities", "(", "self", ")", ":", "\n", "        ", "lod", ":", "List", "[", "dict", "]", "=", "[", "]", "\n", "\n", "# Load data", "\n", "setup2code", ":", "Dict", "[", "str", ",", "Dict", "[", "int", ",", "List", "[", "str", "]", "]", "]", "=", "{", "}", "\n", "setup2nl", ":", "Dict", "[", "str", ",", "Dict", "[", "int", ",", "List", "[", "str", "]", "]", "]", "=", "{", "}", "\n", "for", "setup", "in", "self", ".", "spec", ".", "setups", ":", "\n", "            ", "setup_dir", "=", "Macros", ".", "work_dir", "/", "self", ".", "spec", ".", "task", "/", "\"setup\"", "/", "setup", "\n", "Utils", ".", "expect_dir_or_suggest_dvc_pull", "(", "setup_dir", ")", "\n", "\n", "dataset", "=", "MethodData", ".", "load_dataset", "(", "setup_dir", "/", "\"data\"", ")", "\n", "setup2code", "[", "setup", "]", "=", "{", "d", ".", "id", ":", "ModelUtils", ".", "regroup_subtokens", "(", "d", ".", "code", ",", "d", ".", "misc", "[", "\"code_src_ids\"", "]", ")", "for", "d", "in", "dataset", "}", "\n", "if", "self", ".", "spec", ".", "task", "==", "Macros", ".", "com_gen", ":", "\n", "                ", "setup2nl", "[", "setup", "]", "=", "{", "d", ".", "id", ":", "d", ".", "comment_summary", "for", "d", "in", "dataset", "}", "\n", "", "elif", "self", ".", "spec", ".", "task", "==", "Macros", ".", "met_nam", ":", "\n", "                ", "setup2nl", "[", "setup", "]", "=", "{", "d", ".", "id", ":", "d", ".", "name", "for", "d", "in", "dataset", "}", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Unknown task\"", ")", "\n", "\n", "# Compute similarities for TestS sets", "\n", "", "", "for", "setup", "in", "self", ".", "spec", ".", "setups", ":", "\n", "            ", "train_code", "=", "[", "]", "\n", "train_nl", "=", "[", "]", "\n", "for", "split", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", "]", ":", "\n", "                ", "ids", "=", "IOUtils", ".", "load", "(", "Macros", ".", "work_dir", "/", "self", ".", "spec", ".", "task", "/", "\"setup\"", "/", "setup", "/", "\"data\"", "/", "f\"split_{split}.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "train_code", "+=", "[", "setup2code", "[", "setup", "]", "[", "i", "]", "for", "i", "in", "ids", "]", "\n", "train_nl", "+=", "[", "setup2nl", "[", "setup", "]", "[", "i", "]", "for", "i", "in", "ids", "]", "\n", "\n", "", "ids", "=", "IOUtils", ".", "load", "(", "Macros", ".", "work_dir", "/", "self", ".", "spec", ".", "task", "/", "\"setup\"", "/", "setup", "/", "\"data\"", "/", "f\"split_{Macros.test_standard}.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "tests_code", "=", "[", "setup2code", "[", "setup", "]", "[", "i", "]", "for", "i", "in", "ids", "]", "\n", "tests_nl", "=", "[", "setup2nl", "[", "setup", "]", "[", "i", "]", "for", "i", "in", "ids", "]", "\n", "for", "data_i", ",", "(", "code_sim", ",", "nl_sim", ")", "in", "enumerate", "(", "self", ".", "compute_data_similarities", "(", "\n", "tests_code", ",", "tests_nl", ",", "train_code", ",", "train_nl", ",", "\n", ")", ")", ":", "\n", "                ", "lod", ".", "append", "(", "{", "\n", "\"setup\"", ":", "setup", ",", "\n", "\"set_name\"", ":", "Macros", ".", "test_standard", ",", "\n", "\"data_i\"", ":", "data_i", ",", "\n", "\"code_sim\"", ":", "code_sim", ",", "\n", "\"nl_sim\"", ":", "nl_sim", ",", "\n", "}", ")", "\n", "\n", "# Compute similarities for TestC sets", "\n", "", "", "for", "setup1", ",", "setup2", "in", "itertools", ".", "combinations", "(", "self", ".", "spec", ".", "setups", ",", "2", ")", ":", "\n", "            ", "train_code", "=", "[", "]", "\n", "train_nl", "=", "[", "]", "\n", "for", "setup", "in", "[", "setup1", ",", "setup2", "]", ":", "\n", "                ", "for", "split", "in", "[", "Macros", ".", "train", ",", "Macros", ".", "val", "]", ":", "\n", "                    ", "ids", "=", "IOUtils", ".", "load", "(", "Macros", ".", "work_dir", "/", "self", ".", "spec", ".", "task", "/", "\"setup\"", "/", "setup", "/", "\"data\"", "/", "f\"split_{split}.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "train_code", "+=", "[", "setup2code", "[", "setup", "]", "[", "i", "]", "for", "i", "in", "ids", "]", "\n", "train_nl", "+=", "[", "setup2nl", "[", "setup", "]", "[", "i", "]", "for", "i", "in", "ids", "]", "\n", "\n", "", "", "ids", "=", "IOUtils", ".", "load", "(", "Macros", ".", "work_dir", "/", "self", ".", "spec", ".", "task", "/", "\"setup\"", "/", "setup1", "/", "\"data\"", "/", "f\"split_{Macros.test_common}-{setup1}-{setup2}.json\"", ",", "IOUtils", ".", "Format", ".", "json", ")", "\n", "testc_code", "=", "[", "setup2code", "[", "setup1", "]", "[", "i", "]", "for", "i", "in", "ids", "]", "\n", "testc_nl", "=", "[", "setup2nl", "[", "setup1", "]", "[", "i", "]", "for", "i", "in", "ids", "]", "\n", "for", "data_i", ",", "(", "code_sim", ",", "nl_sim", ")", "in", "enumerate", "(", "self", ".", "compute_data_similarities", "(", "\n", "testc_code", ",", "testc_nl", ",", "train_code", ",", "train_nl", ",", "\n", ")", ")", ":", "\n", "                ", "for", "setup", "in", "[", "setup1", ",", "setup2", "]", ":", "\n", "                    ", "lod", ".", "append", "(", "{", "\n", "\"setup\"", ":", "setup", ",", "\n", "\"set_name\"", ":", "f\"{Macros.test_common}-{setup1}-{setup2}\"", ",", "\n", "\"data_i\"", ":", "data_i", ",", "\n", "\"code_sim\"", ":", "code_sim", ",", "\n", "\"nl_sim\"", ":", "nl_sim", ",", "\n", "}", ")", "\n", "\n", "# Save the similarities", "\n", "", "", "", "data_sim_df", "=", "pd", ".", "DataFrame", "(", "lod", ")", "\n", "IOUtils", ".", "dump", "(", "self", ".", "output_dir", "/", "\"data_sim_df.pkl\"", ",", "data_sim_df", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.filter_near_duplicates_and_analyze": [[334, 393], ["ExperimentsAnalyzer.ExperimentsAnalyzer.make_tables", "ExperimentsAnalyzer.ExperimentsAnalyzer.make_plots", "seutil.IOUtils.rm_dir", "output_dir.mkdir", "seutil.IOUtils.load", "seutil.IOUtils.load", "seutil.IOUtils.load.merge().drop", "seutil.IOUtils.dump", "ExperimentsAnalyzer.ExperimentsAnalyzer.get_avg_df", "seutil.IOUtils.dump", "seutil.IOUtils.rm_dir", "table_sub_dir.mkdir", "ExperimentsAnalyzer.ExperimentsAnalyzer.make_numbers_nd_dataset", "ExperimentsAnalyzer.ExperimentsAnalyzer.sign_test", "seutil.IOUtils.load", "seutil.IOUtils.load", "seutil.IOUtils.load", "seutil.IOUtils.load.merge"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_tables", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_plots", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.get_avg_df", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_numbers_nd_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.sign_test", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "def", "filter_near_duplicates_and_analyze", "(", "\n", "self", ",", "\n", "code_sim_threshold", ":", "float", ",", "\n", "nl_sim_threshold", ":", "float", ",", "\n", "config_name", ":", "str", ",", "\n", "only_tables_plots", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "output_dir", "=", "self", ".", "output_dir", "/", "f\"nd_{config_name}\"", "\n", "\n", "if", "not", "only_tables_plots", ":", "\n", "            ", "IOUtils", ".", "rm_dir", "(", "output_dir", ")", "\n", "output_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "# Filter data", "\n", "data_sim_df", "=", "IOUtils", ".", "load", "(", "self", ".", "output_dir", "/", "\"data_sim_df.pkl\"", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "filtered_data_sim_df", "=", "data_sim_df", ".", "loc", "[", "lambda", "x", ":", "(", "x", "[", "\"code_sim\"", "]", "<", "code_sim_threshold", ")", "&", "(", "x", "[", "\"nl_sim\"", "]", "<", "nl_sim_threshold", ")", "]", "\n", "full_df", "=", "IOUtils", ".", "load", "(", "self", ".", "output_dir", "/", "\"full_df.pkl\"", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "filtered_df", "=", "full_df", ".", "merge", "(", "filtered_data_sim_df", ",", "on", "=", "[", "\"setup\"", ",", "\"set_name\"", ",", "\"data_i\"", "]", ")", ".", "drop", "(", "[", "\"code_sim\"", ",", "\"nl_sim\"", "]", ",", "axis", "=", "1", ")", "\n", "IOUtils", ".", "dump", "(", "output_dir", "/", "\"filtered_df.pkl\"", ",", "filtered_df", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "\n", "# Compute average", "\n", "avg_df", "=", "self", ".", "get_avg_df", "(", "filtered_df", ")", "\n", "IOUtils", ".", "dump", "(", "output_dir", "/", "\"avg_df.pkl\"", ",", "avg_df", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "\n", "# Make numbers for data", "\n", "table_sub_dir", "=", "self", ".", "table_dir", "/", "f\"{self.spec.task}_nd_{config_name}\"", "\n", "IOUtils", ".", "rm_dir", "(", "table_sub_dir", ")", "\n", "table_sub_dir", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "self", ".", "make_numbers_nd_dataset", "(", "\n", "table_dir", "=", "table_sub_dir", ",", "\n", "spec", "=", "self", ".", "spec", ",", "\n", "original_data_sim_df", "=", "data_sim_df", ",", "\n", "filtered_data_sim_df", "=", "filtered_data_sim_df", ",", "\n", "suffix", "=", "f\"_{config_name}\"", ",", "\n", ")", "\n", "\n", "# Significant test", "\n", "compare_df", "=", "self", ".", "sign_test", "(", "filtered_df", ",", "avg_df", ",", "output_dir", ")", "\n", "", "else", ":", "\n", "            ", "table_sub_dir", "=", "self", ".", "table_dir", "/", "f\"{self.spec.task}_nd_{config_name}\"", "\n", "filtered_df", "=", "IOUtils", ".", "load", "(", "output_dir", "/", "\"filtered_df.pkl\"", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "avg_df", "=", "IOUtils", ".", "load", "(", "output_dir", "/", "\"avg_df.pkl\"", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "compare_df", "=", "IOUtils", ".", "load", "(", "output_dir", "/", "\"compare_df.pkl\"", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "\n", "# Make tables for results", "\n", "", "self", ".", "make_tables", "(", "\n", "table_dir", "=", "table_sub_dir", ",", "\n", "spec", "=", "self", ".", "spec", ",", "\n", "avg_df", "=", "avg_df", ",", "\n", "compare_df", "=", "compare_df", ",", "\n", "suffix", "=", "f\"_{config_name}\"", ",", "\n", ")", "\n", "\n", "# Make plots", "\n", "self", ".", "make_plots", "(", "\n", "plot_sub_dir", "=", "Macros", ".", "paper_dir", "/", "\"figs\"", "/", "f\"results-{self.spec.task}_nd_{config_name}\"", ",", "\n", "spec", "=", "self", ".", "spec", ",", "\n", "full_df", "=", "filtered_df", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.compute_data_similarities": [[395, 424], ["tqdm.tqdm.tqdm", "range", "max", "max", "similarities.append", "len", "tseval.eval.EvalMetrics.EvalMetrics.batch_near_duplicate_similarity", "tseval.eval.EvalMetrics.EvalMetrics.batch_near_duplicate_similarity", "len", "len"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_near_duplicate_similarity", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.eval.EvalMetrics.EvalMetrics.batch_near_duplicate_similarity"], ["", "@", "classmethod", "\n", "def", "compute_data_similarities", "(", "\n", "cls", ",", "\n", "eval_code_tokens", ":", "List", "[", "List", "[", "str", "]", "]", ",", "\n", "eval_nl_tokens", ":", "List", "[", "List", "[", "str", "]", "]", ",", "\n", "train_code_tokens", ":", "List", "[", "List", "[", "str", "]", "]", ",", "\n", "train_nl_tokens", ":", "List", "[", "List", "[", "str", "]", "]", ",", "\n", ")", "->", "List", "[", "Tuple", "[", "float", ",", "float", "]", "]", ":", "\n", "        ", "\"\"\"\n        Measures the similarities between each eval set data against the most similar train set data, using the \"near_duplicate_similarity\" metric.\n\n        The metric computes token level accuracy, and early stops computation if more than 10% tokens are mismatching.\n        It is used because of its low computation time; other metrics (e.g., BLEU, edit distance) can take\n        prohibited time (48+ hours) on a decent-sized dataset (~70k data).\n        \"\"\"", "\n", "similarities", ":", "List", "[", "Tuple", "[", "float", ",", "float", "]", "]", "=", "[", "]", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "eval_code_tokens", ")", ")", ")", ":", "\n", "            ", "code_sim", "=", "max", "(", "EvalMetrics", ".", "batch_near_duplicate_similarity", "(", "\n", "[", "eval_code_tokens", "[", "i", "]", "]", "*", "len", "(", "train_code_tokens", ")", ",", "\n", "train_code_tokens", ",", "\n", ")", ")", "\n", "nl_sim", "=", "max", "(", "EvalMetrics", ".", "batch_near_duplicate_similarity", "(", "\n", "[", "eval_nl_tokens", "[", "i", "]", "]", "*", "len", "(", "train_code_tokens", ")", ",", "\n", "train_nl_tokens", ",", "\n", ")", ")", "\n", "similarities", ".", "append", "(", "(", "code_sim", ",", "nl_sim", ")", ")", "\n", "\n", "", "return", "similarities", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.get_avg_df": [[425, 431], ["full_df.groupby().mean().drop", "full_df.groupby().mean", "full_df.groupby"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_avg_df", "(", "cls", ",", "full_df", ":", "pd", ".", "DataFrame", ")", "->", "pd", ".", "DataFrame", ":", "\n", "        ", "return", "full_df", ".", "groupby", "(", "[", "\"setup\"", ",", "\"model\"", ",", "\"set_name\"", ",", "\"metric\"", "]", ",", "as_index", "=", "False", ")", ".", "mean", "(", ")", ".", "drop", "(", "[", "\"trial_i\"", ",", "\"data_i\"", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.sign_test_default": [[432, 436], ["seutil.IOUtils.load", "seutil.IOUtils.load", "ExperimentsAnalyzer.ExperimentsAnalyzer.sign_test"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.sign_test"], ["", "def", "sign_test_default", "(", "self", ")", ":", "\n", "        ", "full_df", "=", "IOUtils", ".", "load", "(", "self", ".", "output_dir", "/", "\"full_df.pkl\"", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "avg_df", "=", "IOUtils", ".", "load", "(", "self", ".", "output_dir", "/", "\"avg_df.pkl\"", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "self", ".", "sign_test", "(", "full_df", ",", "avg_df", ",", "self", ".", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.sign_test": [[437, 496], ["tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "sum", "tqdm.tqdm.tqdm.reset", "full_df.groupby", "pandas.DataFrame", "cls.get_avg_df", "sub_df.groupby", "itertools.combinations", "seutil.IOUtils.dump", "len", "setup_model_scores.append", "range", "tqdm.tqdm.tqdm.set_description", "compare_lod.append", "tqdm.tqdm.tqdm.update", "list", "cls.get_avg_df.groupby().groups.values", "len", "numpy.mean", "numpy.mean", "ExperimentsAnalyzer.bootstrap", "ExperimentsAnalyzer.bootstrap", "itertools.combinations", "[].tolist", "range", "len", "cls.get_avg_df.groupby", "sub_sub_df.sort_values"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.get_avg_df", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.bootstrap", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.bootstrap"], ["", "@", "classmethod", "\n", "def", "sign_test", "(", "\n", "cls", ",", "\n", "full_df", ":", "pd", ".", "DataFrame", ",", "\n", "avg_df", ":", "Optional", "[", "pd", ".", "DataFrame", "]", "=", "None", ",", "\n", "output_dir", ":", "Optional", "[", "Path", "]", "=", "None", ",", "\n", ")", "->", "pd", ".", "DataFrame", ":", "\n", "        ", "tbar", "=", "tqdm", "(", "\"Loading data\"", ")", "\n", "if", "avg_df", "is", "None", ":", "\n", "            ", "avg_df", "=", "cls", ".", "get_avg_df", "(", "full_df", ")", "\n", "\n", "", "compare_lod", ":", "List", "[", "dict", "]", "=", "[", "]", "\n", "tbar", ".", "set_description", "(", "\"Performing significance tests\"", ")", "\n", "total", "=", "sum", "(", "[", "\n", "len", "(", "list", "(", "itertools", ".", "combinations", "(", "range", "(", "len", "(", "g", ")", ")", ",", "2", ")", ")", ")", "\n", "for", "g", "in", "avg_df", ".", "groupby", "(", "[", "\"set_name\"", ",", "\"metric\"", "]", ")", ".", "groups", ".", "values", "(", ")", "\n", "]", ")", "\n", "tbar", ".", "reset", "(", "total", ")", "\n", "for", "(", "sn", ",", "metric", ")", ",", "sub_df", "in", "full_df", ".", "groupby", "(", "[", "\"set_name\"", ",", "\"metric\"", "]", ",", "as_index", "=", "False", ")", ":", "\n", "            ", "setup_model_scores", ":", "List", "[", "Tuple", "[", "str", ",", "str", ",", "List", "[", "float", "]", "]", "]", "=", "[", "]", "\n", "for", "(", "setup", ",", "model", ")", ",", "sub_sub_df", "in", "sub_df", ".", "groupby", "(", "[", "\"setup\"", ",", "\"model\"", "]", ",", "as_index", "=", "False", ")", ":", "\n", "                ", "setup_model_scores", ".", "append", "(", "(", "\n", "setup", ",", "\n", "model", ",", "\n", "sub_sub_df", ".", "sort_values", "(", "[", "\"trial_i\"", ",", "\"data_i\"", "]", ")", "[", "\"score\"", "]", ".", "tolist", "(", ")", ",", "\n", ")", ")", "\n", "", "for", "i", ",", "j", "in", "itertools", ".", "combinations", "(", "range", "(", "len", "(", "setup_model_scores", ")", ")", ",", "2", ")", ":", "\n", "                ", "setup_i", ",", "model_i", ",", "scores_i", "=", "setup_model_scores", "[", "i", "]", "\n", "setup_j", ",", "model_j", ",", "scores_j", "=", "setup_model_scores", "[", "j", "]", "\n", "if", "setup_i", "!=", "setup_j", "and", "sn", "not", "in", "[", "\n", "f\"{Macros.test_common}-{setup_i}-{setup_j}\"", ",", "\n", "f\"{Macros.test_common}-{setup_j}-{setup_i}\"", ",", "\n", "]", ":", "\n", "                    ", "tbar", ".", "total", "-=", "1", "\n", "continue", "\n", "\n", "", "tbar", ".", "set_description", "(", "f\"{sn} {metric}: {setup_i} {model_i} vs. {setup_j} {model_j}\"", ")", "\n", "\n", "i_ge_j", "=", "(", "np", ".", "mean", "(", "scores_i", ")", ">=", "np", ".", "mean", "(", "scores_j", ")", ")", "\n", "if", "i_ge_j", ":", "\n", "                    ", "sign_p", "=", "bootstrap", "(", "scores_i", ",", "scores_j", ")", "\n", "", "else", ":", "\n", "                    ", "sign_p", "=", "bootstrap", "(", "scores_j", ",", "scores_i", ")", "\n", "", "compare_lod", ".", "append", "(", "{", "\n", "\"set_name\"", ":", "sn", ",", "\n", "\"metric\"", ":", "metric", ",", "\n", "\"setup_i\"", ":", "setup_i", ",", "\n", "\"model_i\"", ":", "model_i", ",", "\n", "\"setup_j\"", ":", "setup_j", ",", "\n", "\"model_j\"", ":", "model_j", ",", "\n", "\"i_ge_j\"", ":", "i_ge_j", ",", "\n", "\"sign_p\"", ":", "sign_p", ",", "\n", "}", ")", "\n", "tbar", ".", "update", "(", "1", ")", "\n", "\n", "", "", "compare_df", "=", "pd", ".", "DataFrame", "(", "compare_lod", ")", "\n", "if", "output_dir", "is", "not", "None", ":", "\n", "            ", "IOUtils", ".", "dump", "(", "output_dir", "/", "\"compare_df.pkl\"", ",", "compare_df", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "", "return", "compare_df", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_tables_default": [[497, 505], ["seutil.IOUtils.load", "seutil.IOUtils.load", "ExperimentsAnalyzer.ExperimentsAnalyzer.make_tables"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_tables"], ["", "def", "make_tables_default", "(", "self", ")", ":", "\n", "        ", "avg_df", "=", "IOUtils", ".", "load", "(", "self", ".", "output_dir", "/", "\"avg_df.pkl\"", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "compare_df", "=", "IOUtils", ".", "load", "(", "self", ".", "output_dir", "/", "\"compare_df.pkl\"", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "self", ".", "make_tables", "(", "\n", "table_dir", "=", "self", ".", "table_dir", ",", "\n", "spec", "=", "self", ".", "spec", ",", "\n", "avg_df", "=", "avg_df", ",", "\n", "compare_df", "=", "compare_df", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_tables": [[507, 519], ["cls.make_numbers_results", "cls.make_table_metrics", "cls.make_table_aux_metrics"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_numbers_results", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_table_metrics", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_table_aux_metrics"], ["", "@", "classmethod", "\n", "def", "make_tables", "(", "\n", "cls", ",", "\n", "table_dir", ":", "Path", ",", "\n", "spec", ":", "ExperimentsSpec", ",", "\n", "avg_df", ":", "pd", ".", "DataFrame", ",", "\n", "compare_df", ":", "pd", ".", "DataFrame", ",", "\n", "suffix", ":", "str", "=", "\"\"", ",", "\n", ")", ":", "\n", "        ", "cls", ".", "make_numbers_results", "(", "table_dir", ",", "spec", ",", "avg_df", ",", "suffix", ")", "\n", "cls", ".", "make_table_metrics", "(", "table_dir", ",", "spec", ",", "avg_df", ",", "compare_df", ",", "suffix", ")", "\n", "cls", ".", "make_table_aux_metrics", "(", "table_dir", ",", "spec", ",", "avg_df", ",", "compare_df", ",", "suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_numbers_results": [[520, 535], ["seutil.latex.File", "avg_df.itertuples", "seutil.latex.File.save", "seutil.latex.File.append_macro", "seutil.latex.Macro"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.save"], ["", "@", "classmethod", "\n", "def", "make_numbers_results", "(", "\n", "cls", ",", "\n", "table_dir", ":", "Path", ",", "\n", "spec", ":", "ExperimentsSpec", ",", "\n", "avg_df", ":", "pd", ".", "DataFrame", ",", "\n", "suffix", ":", "str", "=", "\"\"", ",", "\n", ")", ":", "\n", "        ", "f", "=", "latex", ".", "File", "(", "table_dir", "/", "f\"numbers-results-{spec.task}.tex\"", ")", "\n", "for", "row", "in", "avg_df", ".", "itertuples", "(", ")", ":", "\n", "            ", "f", ".", "append_macro", "(", "latex", ".", "Macro", "(", "\n", "f\"result-{spec.task}_{row.setup}_{row.model}_{row.set_name}_{row.metric}{suffix}\"", ",", "\n", "f\"{row.score * 100:.1f}\"", ",", "\n", ")", ")", "\n", "", "f", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_numbers_nd_dataset": [[536, 582], ["seutil.latex.File", "seutil.latex.File.save", "len", "len", "set_name.startswith", "set_name.startswith", "seutil.latex.File.append_macro", "seutil.latex.File.append_macro", "seutil.latex.File.append_macro", "seutil.latex.File.append_macro", "seutil.latex.File.append_macro", "seutil.latex.File.append_macro", "seutil.latex.File.append_macro", "seutil.latex.File.append_macro", "print", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro", "locals", "locals", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro", "itertools.combinations"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.save"], ["", "@", "classmethod", "\n", "def", "make_numbers_nd_dataset", "(", "\n", "cls", ",", "\n", "table_dir", ":", "Path", ",", "\n", "spec", ":", "ExperimentsSpec", ",", "\n", "original_data_sim_df", ":", "pd", ".", "DataFrame", ",", "\n", "filtered_data_sim_df", ":", "pd", ".", "DataFrame", ",", "\n", "suffix", ":", "str", "=", "\"\"", ",", "\n", ")", ":", "\n", "        ", "f", "=", "latex", ".", "File", "(", "table_dir", "/", "f\"numbers-dataset-metrics.tex\"", ")", "\n", "\n", "# The (setup, set_name) pairs to count; avoid double-counting test_common sets", "\n", "pairs", "=", "[", "(", "setup", ",", "Macros", ".", "test_standard", ")", "for", "setup", "in", "spec", ".", "setups", "]", "+", "[", "(", "setup1", ",", "f\"{Macros.test_common}-{setup1}-{setup2}\"", ")", "for", "setup1", ",", "setup2", "in", "itertools", ".", "combinations", "(", "spec", ".", "setups", ",", "2", ")", "]", "\n", "\n", "total_num_original", ",", "total_num_filtered", "=", "0", ",", "0", "\n", "test_standard_num_original", ",", "test_standard_num_filtered", "=", "0", ",", "0", "\n", "test_common_num_original", ",", "test_common_num_filtered", "=", "0", ",", "0", "\n", "for", "(", "setup", ",", "set_name", ")", "in", "pairs", ":", "\n", "            ", "original_df", "=", "original_data_sim_df", "[", "lambda", "x", ":", "(", "x", "[", "\"setup\"", "]", "==", "setup", ")", "&", "(", "x", "[", "\"set_name\"", "]", "==", "set_name", ")", "]", "\n", "filtered_df", "=", "filtered_data_sim_df", "[", "lambda", "x", ":", "(", "x", "[", "\"setup\"", "]", "==", "setup", ")", "&", "(", "x", "[", "\"set_name\"", "]", "==", "set_name", ")", "]", "\n", "num_original", "=", "len", "(", "original_df", ")", "\n", "total_num_original", "+=", "num_original", "\n", "num_filtered", "=", "len", "(", "filtered_df", ")", "\n", "total_num_filtered", "+=", "num_filtered", "\n", "if", "set_name", ".", "startswith", "(", "Macros", ".", "test_standard", ")", ":", "\n", "                ", "test_standard_num_original", "+=", "num_original", "\n", "test_standard_num_filtered", "+=", "num_filtered", "\n", "", "if", "set_name", ".", "startswith", "(", "Macros", ".", "test_common", ")", ":", "\n", "                ", "test_common_num_original", "+=", "num_original", "\n", "test_common_num_filtered", "+=", "num_filtered", "\n", "", "f", ".", "append_macro", "(", "latex", ".", "Macro", "(", "f\"ds-{spec.task}-{setup}-{set_name}-original_data{suffix}\"", ",", "f\"{num_original:,d}\"", ")", ")", "\n", "f", ".", "append_macro", "(", "latex", ".", "Macro", "(", "f\"ds-{spec.task}-{setup}-{set_name}-filtered_data{suffix}\"", ",", "f\"{num_filtered:,d}\"", ")", ")", "\n", "f", ".", "append_macro", "(", "latex", ".", "Macro", "(", "f\"ds-{spec.task}-{setup}-{set_name}-filter{suffix}\"", ",", "f\"{num_original - num_filtered:,d}\"", ")", ")", "\n", "f", ".", "append_macro", "(", "latex", ".", "Macro", "(", "f\"ds-{spec.task}-{setup}-{set_name}-filter_pct{suffix}\"", ",", "f\"{(num_original - num_filtered) / num_original:.1%}\"", ".", "replace", "(", "\"%\"", ",", "r\"\\%\"", ")", ")", ")", "\n", "\n", "", "for", "s", "in", "[", "\"total\"", ",", "Macros", ".", "test_standard", ",", "Macros", ".", "test_common", "]", ":", "\n", "            ", "num_original", "=", "locals", "(", ")", "[", "f\"{s}_num_original\"", "]", "\n", "num_filtered", "=", "locals", "(", ")", "[", "f\"{s}_num_filtered\"", "]", "\n", "f", ".", "append_macro", "(", "latex", ".", "Macro", "(", "f\"ds-{spec.task}-{s}-original_data{suffix}\"", ",", "f\"{num_original:,d}\"", ")", ")", "\n", "f", ".", "append_macro", "(", "latex", ".", "Macro", "(", "f\"ds-{spec.task}-{s}-filtered_data{suffix}\"", ",", "f\"{num_filtered:,d}\"", ")", ")", "\n", "f", ".", "append_macro", "(", "latex", ".", "Macro", "(", "f\"ds-{spec.task}-{s}-filter{suffix}\"", ",", "f\"{num_original - num_filtered:,d}\"", ")", ")", "\n", "f", ".", "append_macro", "(", "latex", ".", "Macro", "(", "f\"ds-{spec.task}-{s}-filter_pct{suffix}\"", ",", "f\"{(num_original - num_filtered) / num_original:.1%}\"", ".", "replace", "(", "\"%\"", ",", "r\"\\%\"", ")", ")", ")", "\n", "print", "(", "f\"Filtered {(num_original - num_filtered) / num_original:.1%} of {s} data\"", ")", "\n", "\n", "", "f", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.round_scores": [[583, 586], ["float"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "round_scores", "(", "cls", ",", "df", ")", ":", "\n", "        ", "df", "[", "\"score\"", "]", "=", "[", "float", "(", "f\"{x * 100:.1f}\"", ")", "for", "x", "in", "df", "[", "\"score\"", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_table_metrics": [[598, 645], ["seutil.latex.File", "cls.round_scores", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "itertools.combinations", "seutil.latex.File.append", "seutil.latex.File.append", "itertools.combinations", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.save", "seutil.latex.File.append", "cls.add_table_section_metric", "seutil.latex.File.append", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro", "seutil.latex.Macro().use", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.round_scores", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.save", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.add_table_section_metric"], ["@", "classmethod", "\n", "def", "make_table_metrics", "(", "\n", "cls", ",", "\n", "table_dir", ":", "Path", ",", "\n", "spec", ":", "ExperimentsSpec", ",", "\n", "avg_df", ":", "pd", ".", "DataFrame", ",", "\n", "compare_df", ":", "pd", ".", "DataFrame", ",", "\n", "suffix", ":", "str", "=", "\"\"", ",", "\n", ")", ":", "\n", "        ", "f", "=", "latex", ".", "File", "(", "table_dir", "/", "f\"table-results-{spec.task}{suffix}.tex\"", ")", "\n", "cls", ".", "round_scores", "(", "avg_df", ")", "\n", "\n", "metrics", "=", "spec", ".", "table_args", "[", "\"metrics\"", "]", "\n", "\n", "f", ".", "append", "(", "r\"\\begin{table}[t]\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{footnotesize}\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{center}\"", ")", "\n", "table_name", "=", "f\"results-{spec.task}{suffix}\"", "\n", "f", ".", "append", "(", "r\"\\begin{tabular}{@{\\hspace{0pt}} l @{\\hspace{0pt}} | r@{\\hspace{3pt}}r | r@{\\hspace{3pt}}r | r@{\\hspace{3pt}}r @{\\hspace{0pt}}}\"", ")", "\n", "f", ".", "append", "(", "r\"\\toprule\"", ")", "\n", "\n", "f", ".", "append", "(", "r\"\\makecell[c]{\"", "+", "latex", ".", "Macro", "(", "\"TH-train-on\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "for", "s1", ",", "s2", "in", "itertools", ".", "combinations", "(", "Macros", ".", "split_types", ",", "2", ")", ":", "\n", "            ", "for", "setup", "in", "[", "s1", ",", "s2", "]", ":", "\n", "                ", "f", ".", "append", "(", "r\" & \\makecell[c]{\"", "+", "latex", ".", "Macro", "(", "f\"TH-{setup}\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "", "", "f", ".", "append", "(", "r\"\\\\ \\cline{2-3} \\cline{4-5} \\cline{6-7}\"", ")", "\n", "\n", "f", ".", "append", "(", "r\"\\makecell[c]{\"", "+", "latex", ".", "Macro", "(", "\"TH-test-on\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "for", "s1", ",", "s2", "in", "itertools", ".", "combinations", "(", "Macros", ".", "split_types", ",", "2", ")", ":", "\n", "# f.append(r\" & \\makecell[l]{\" + latex.Macro(f\"TH-{s1}-{s2}\").use() + r\"}\\hspace{-24pt} & \")", "\n", "            ", "style", "=", "\"c|\"", "if", "s1", "!=", "Macros", ".", "split_types", "[", "-", "2", "]", "else", "\"c\"", "\n", "f", ".", "append", "(", "r\" & \\multicolumn{2}{\"", "+", "style", "+", "\"}{\"", "+", "latex", ".", "Macro", "(", "f\"TH-{s1}-{s2}\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "", "f", ".", "append", "(", "r\"\\\\\"", ")", "\n", "\n", "symbol_i", "=", "0", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "symbol_i", "=", "cls", ".", "add_table_section_metric", "(", "f", ",", "spec", ",", "avg_df", ",", "compare_df", ",", "metric", ",", "symbol_i", ",", "suffix", ")", "\n", "\n", "", "f", ".", "append", "(", "r\"\\bottomrule\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{tabular}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{center}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{footnotesize}\"", ")", "\n", "f", ".", "append", "(", "r\"\\vspace{\"", "+", "latex", ".", "Macro", "(", "f\"TV-{table_name}\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "f", ".", "append", "(", "r\"\\caption{\"", "+", "latex", ".", "Macro", "(", "f\"TC-{table_name}\"", ")", ".", "use", "(", ")", "+", "r\"}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{table}\"", ")", "\n", "\n", "f", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.add_table_section_metric": [[646, 703], ["f.append", "f.append", "f.append", "f.append", "collections.defaultdict", "itertools.combinations", "collections.defaultdict", "itertools.combinations", "compare_df.loc[].itertuples", "f.append", "itertools.combinations", "f.append", "relevant_df[].max", "relevant_df.loc[].itertuples", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "key2prefixes[].insert", "key2prefixes[].insert", "seutil.latex.Macro().use", "f.append", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "add_table_section_metric", "(", "\n", "cls", ",", "\n", "f", ":", "latex", ".", "File", ",", "\n", "spec", ":", "ExperimentsSpec", ",", "\n", "avg_df", ":", "pd", ".", "DataFrame", ",", "\n", "compare_df", ":", "pd", ".", "DataFrame", ",", "\n", "metric", ":", "str", ",", "\n", "symbol_i", ":", "int", ",", "\n", "suffix", ":", "str", "=", "\"\"", ",", "\n", ")", "->", "int", ":", "\n", "        ", "f", ".", "append", "(", "r\"\\midrule\"", ")", "\n", "f", ".", "append", "(", "r\"\\midrule\"", ")", "\n", "f", ".", "append", "(", "r\"\\multicolumn{7}{c}{\"", "+", "latex", ".", "Macro", "(", "f\"TH-metric-table-{metric}\"", ")", ".", "use", "(", ")", "+", "r\"} \\\\\"", ")", "\n", "f", ".", "append", "(", "r\"\\midrule\"", ")", "\n", "\n", "# Figure out max values", "\n", "key2bold", "=", "collections", ".", "defaultdict", "(", "bool", ")", "\n", "for", "s1", ",", "s2", "in", "itertools", ".", "combinations", "(", "Macros", ".", "split_types", ",", "2", ")", ":", "\n", "            ", "for", "setup", "in", "[", "s1", ",", "s2", "]", ":", "\n", "                ", "relevant_df", "=", "avg_df", ".", "loc", "[", "\n", "lambda", "df", ":", "(", "df", "[", "\"metric\"", "]", "==", "metric", ")", "&", "\n", "(", "df", "[", "\"set_name\"", "]", "==", "f\"{Macros.test_common}-{s1}-{s2}\"", ")", "&", "\n", "(", "df", "[", "\"setup\"", "]", "==", "setup", ")", "\n", "]", "\n", "max_score", "=", "relevant_df", "[", "\"score\"", "]", ".", "max", "(", ")", "\n", "for", "row", "in", "relevant_df", ".", "loc", "[", "lambda", "df", ":", "(", "df", "[", "\"score\"", "]", "==", "max_score", ")", "]", ".", "itertuples", "(", ")", ":", "\n", "                    ", "key2bold", "[", "(", "row", ".", "setup", ",", "row", ".", "model", ",", "row", ".", "set_name", ")", "]", "=", "True", "\n", "\n", "# Figure out sign tests prefixes", "\n", "", "", "", "key2prefixes", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "s1", ",", "s2", "in", "itertools", ".", "combinations", "(", "Macros", ".", "split_types", ",", "2", ")", ":", "\n", "            ", "for", "row", "in", "compare_df", ".", "loc", "[", "\n", "lambda", "df", ":", "(", "df", "[", "\"metric\"", "]", "==", "metric", ")", "&", "(", "df", "[", "\"set_name\"", "]", "==", "f\"{Macros.test_common}-{s1}-{s2}\"", ")", "\n", "]", ".", "itertuples", "(", ")", ":", "\n", "                ", "if", "row", ".", "sign_p", ">", "cls", ".", "SIGN_LEVEL", ":", "\n", "                    ", "symbol", "=", "cls", ".", "SYMBOLS", "[", "symbol_i", "]", "\n", "symbol_i", "+=", "1", "\n", "key2prefixes", "[", "(", "row", ".", "setup_i", ",", "row", ".", "model_i", ",", "row", ".", "set_name", ")", "]", ".", "insert", "(", "0", ",", "symbol", ")", "\n", "key2prefixes", "[", "(", "row", ".", "setup_j", ",", "row", ".", "model_j", ",", "row", ".", "set_name", ")", "]", ".", "insert", "(", "0", ",", "symbol", ")", "\n", "\n", "", "", "", "for", "model", "in", "spec", ".", "models", ":", "\n", "            ", "f", ".", "append", "(", "latex", ".", "Macro", "(", "f\"TH-model-{model.name}\"", ")", ".", "use", "(", ")", ")", "\n", "for", "s1", ",", "s2", "in", "itertools", ".", "combinations", "(", "Macros", ".", "split_types", ",", "2", ")", ":", "\n", "                ", "for", "setup", "in", "[", "s1", ",", "s2", "]", ":", "\n", "                    ", "number", "=", "latex", ".", "Macro", "(", "\n", "f\"result-{spec.task}_{setup}_{model.name}_{Macros.test_common}-{s1}-{s2}_{metric}{suffix}\"", ")", ".", "use", "(", ")", "\n", "# Add modifiers (bold, prefixes)", "\n", "if", "key2bold", "[", "(", "setup", ",", "model", ".", "name", ",", "f\"{Macros.test_common}-{s1}-{s2}\"", ")", "]", ":", "\n", "                        ", "number", "=", "r\"\\textbf{\"", "+", "number", "+", "\"}\"", "\n", "", "for", "prefix", "in", "key2prefixes", "[", "(", "setup", ",", "model", ".", "name", ",", "f\"{Macros.test_common}-{s1}-{s2}\"", ")", "]", ":", "\n", "                        ", "number", "=", "r\"$^{\"", "+", "prefix", "+", "r\"}$\"", "+", "number", "\n", "\n", "", "f", ".", "append", "(", "r\" & \"", "+", "number", ")", "\n", "\n", "", "", "f", ".", "append", "(", "r\"\\\\\"", ")", "\n", "", "return", "symbol_i", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_table_aux_metrics": [[704, 750], ["seutil.latex.File", "cls.round_scores", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.save", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "cls.add_table_aux_section_metric", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.round_scores", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.save", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.add_table_aux_section_metric"], ["", "@", "classmethod", "\n", "def", "make_table_aux_metrics", "(", "\n", "cls", ",", "\n", "table_dir", ":", "Path", ",", "\n", "spec", ":", "ExperimentsSpec", ",", "\n", "avg_df", ":", "pd", ".", "DataFrame", ",", "\n", "compare_df", ":", "pd", ".", "DataFrame", ",", "\n", "suffix", ":", "str", "=", "\"\"", ",", "\n", ")", ":", "\n", "        ", "f", "=", "latex", ".", "File", "(", "table_dir", "/", "f\"table-results-aux-{spec.task}{suffix}.tex\"", ")", "\n", "cls", ".", "round_scores", "(", "avg_df", ")", "\n", "\n", "metrics", "=", "spec", ".", "table_args", "[", "\"metrics\"", "]", "\n", "\n", "f", ".", "append", "(", "r\"\\begin{table}[t]\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{footnotesize}\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{center}\"", ")", "\n", "table_name", "=", "f\"results-aux-{spec.task}{suffix}\"", "\n", "f", ".", "append", "(", "r\"\\begin{tabular}{@{\\hspace{0pt}} l @{\\hspace{0pt}} | @{\\hspace{2pt}}r@{\\hspace{2pt}} | @{\\hspace{2pt}}r@{\\hspace{2pt}} | r@{\\hspace{2pt}} | @{\\hspace{2pt}}r@{\\hspace{2pt}} | r@{\\hspace{2pt}} | @{\\hspace{2pt}}r @{\\hspace{0pt}}}\"", ")", "\n", "f", ".", "append", "(", "r\"\\toprule\"", ")", "\n", "\n", "f", ".", "append", "(", "r\"\\makecell[c]{\"", "+", "latex", ".", "Macro", "(", "\"TH-train-on\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "for", "s", "in", "Macros", ".", "split_types", ":", "\n", "            ", "style", "=", "\"c|\"", "if", "s", "!=", "Macros", ".", "split_types", "[", "-", "1", "]", "else", "\"c\"", "\n", "f", ".", "append", "(", "r\" & \\multicolumn{2}{\"", "+", "style", "+", "\"}{\"", "+", "latex", ".", "Macro", "(", "f\"TH-{s}\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "", "f", ".", "append", "(", "r\"\\\\ \\cline{2-3} \\cline{4-5} \\cline{6-7}\"", ")", "\n", "\n", "f", ".", "append", "(", "r\"\\makecell[c]{\"", "+", "latex", ".", "Macro", "(", "\"TH-test-on\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "for", "s", "in", "Macros", ".", "split_types", ":", "\n", "            ", "f", ".", "append", "(", "r\" & \"", "+", "latex", ".", "Macro", "(", "f\"TH-{Macros.val}\"", ")", ".", "use", "(", ")", ")", "\n", "f", ".", "append", "(", "r\" & \"", "+", "latex", ".", "Macro", "(", "f\"TH-{Macros.test_standard}\"", ")", ".", "use", "(", ")", ")", "\n", "", "f", ".", "append", "(", "r\"\\\\\"", ")", "\n", "\n", "symbol_i", "=", "0", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "symbol_i", "=", "cls", ".", "add_table_aux_section_metric", "(", "f", ",", "spec", ",", "avg_df", ",", "compare_df", ",", "metric", ",", "symbol_i", ",", "suffix", ")", "\n", "\n", "", "f", ".", "append", "(", "r\"\\bottomrule\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{tabular}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{center}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{footnotesize}\"", ")", "\n", "f", ".", "append", "(", "r\"\\vspace{\"", "+", "latex", ".", "Macro", "(", "f\"TV-{table_name}\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "f", ".", "append", "(", "r\"\\caption{\"", "+", "latex", ".", "Macro", "(", "f\"TC-{table_name}\"", ")", ".", "use", "(", ")", "+", "r\"}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{table}\"", ")", "\n", "\n", "f", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.add_table_aux_section_metric": [[751, 802], ["f.append", "f.append", "f.append", "f.append", "collections.defaultdict", "collections.defaultdict", "compare_df.loc[].itertuples", "f.append", "f.append", "relevant_df[].max", "relevant_df.loc[].itertuples", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "key2prefixes[].insert", "key2prefixes[].insert", "seutil.latex.Macro().use", "f.append", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "add_table_aux_section_metric", "(", "\n", "cls", ",", "\n", "f", ":", "latex", ".", "File", ",", "\n", "spec", ":", "ExperimentsSpec", ",", "\n", "avg_df", ":", "pd", ".", "DataFrame", ",", "\n", "compare_df", ":", "pd", ".", "DataFrame", ",", "\n", "metric", ":", "str", ",", "\n", "symbol_i", ":", "int", ",", "\n", "suffix", ":", "str", "=", "\"\"", ",", "\n", ")", ":", "\n", "        ", "f", ".", "append", "(", "r\"\\midrule\"", ")", "\n", "f", ".", "append", "(", "r\"\\midrule\"", ")", "\n", "f", ".", "append", "(", "r\"\\multicolumn{7}{c}{\"", "+", "latex", ".", "Macro", "(", "f\"TH-metric-table-{metric}\"", ")", ".", "use", "(", ")", "+", "r\"} \\\\\"", ")", "\n", "f", ".", "append", "(", "r\"\\midrule\"", ")", "\n", "\n", "# Figure out max values", "\n", "key2bold", "=", "collections", ".", "defaultdict", "(", "bool", ")", "\n", "for", "setup", "in", "Macros", ".", "split_types", ":", "\n", "            ", "for", "sn", "in", "[", "Macros", ".", "val", ",", "Macros", ".", "test_standard", "]", ":", "\n", "                ", "relevant_df", "=", "avg_df", ".", "loc", "[", "\n", "lambda", "df", ":", "(", "df", "[", "\"metric\"", "]", "==", "metric", ")", "&", "(", "df", "[", "\"set_name\"", "]", "==", "sn", ")", "&", "(", "df", "[", "\"setup\"", "]", "==", "setup", ")", "]", "\n", "max_score", "=", "relevant_df", "[", "\"score\"", "]", ".", "max", "(", ")", "\n", "for", "row", "in", "relevant_df", ".", "loc", "[", "lambda", "df", ":", "(", "df", "[", "\"score\"", "]", "==", "max_score", ")", "]", ".", "itertuples", "(", ")", ":", "\n", "                    ", "key2bold", "[", "(", "row", ".", "setup", ",", "row", ".", "model", ",", "row", ".", "set_name", ")", "]", "=", "True", "\n", "\n", "# Figure out sign tests prefixes", "\n", "", "", "", "key2prefixes", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "sn", "in", "[", "Macros", ".", "val", ",", "Macros", ".", "test_standard", "]", ":", "\n", "            ", "for", "row", "in", "compare_df", ".", "loc", "[", "lambda", "df", ":", "(", "df", "[", "\"metric\"", "]", "==", "metric", ")", "&", "(", "df", "[", "\"set_name\"", "]", "==", "sn", ")", "]", ".", "itertuples", "(", ")", ":", "\n", "                ", "if", "row", ".", "sign_p", ">", "cls", ".", "SIGN_LEVEL", ":", "\n", "                    ", "symbol", "=", "cls", ".", "SYMBOLS", "[", "symbol_i", "]", "\n", "symbol_i", "+=", "1", "\n", "key2prefixes", "[", "(", "row", ".", "setup_i", ",", "row", ".", "model_i", ",", "row", ".", "set_name", ")", "]", ".", "insert", "(", "0", ",", "symbol", ")", "\n", "key2prefixes", "[", "(", "row", ".", "setup_j", ",", "row", ".", "model_j", ",", "row", ".", "set_name", ")", "]", ".", "insert", "(", "0", ",", "symbol", ")", "\n", "\n", "", "", "", "for", "model", "in", "spec", ".", "models", ":", "\n", "            ", "f", ".", "append", "(", "latex", ".", "Macro", "(", "f\"TH-model-{model.name}\"", ")", ".", "use", "(", ")", ")", "\n", "for", "setup", "in", "Macros", ".", "split_types", ":", "\n", "                ", "for", "sn", "in", "[", "Macros", ".", "val", ",", "Macros", ".", "test_standard", "]", ":", "\n", "                    ", "number", "=", "latex", ".", "Macro", "(", "f\"result-{spec.task}_{setup}_{model.name}_{sn}_{metric}{suffix}\"", ")", ".", "use", "(", ")", "\n", "# Add modifiers (bold, prefixes)", "\n", "if", "key2bold", "[", "(", "setup", ",", "model", ".", "name", ",", "sn", ")", "]", ":", "\n", "                        ", "number", "=", "r\"\\textbf{\"", "+", "number", "+", "\"}\"", "\n", "", "for", "prefix", "in", "key2prefixes", "[", "(", "setup", ",", "model", ".", "name", ",", "sn", ")", "]", ":", "\n", "                        ", "number", "=", "r\"$^{\"", "+", "prefix", "+", "r\"}$\"", "+", "number", "\n", "\n", "", "f", ".", "append", "(", "r\" & \"", "+", "number", ")", "\n", "\n", "", "", "f", ".", "append", "(", "r\"\\\\\"", ")", "\n", "", "return", "symbol_i", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_plots_default": [[803, 809], ["seutil.IOUtils.load", "ExperimentsAnalyzer.ExperimentsAnalyzer.make_plots"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_plots"], ["", "def", "make_plots_default", "(", "self", ")", ":", "\n", "        ", "full_df", "=", "IOUtils", ".", "load", "(", "self", ".", "output_dir", "/", "\"full_df.pkl\"", ",", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "self", ".", "make_plots", "(", "\n", "plot_sub_dir", "=", "self", ".", "plot_sub_dir", ",", "\n", "spec", "=", "self", ".", "spec", ",", "\n", "full_df", "=", "full_df", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_plots": [[811, 823], ["seutil.IOUtils.rm_dir", "plot_sub_dir.mkdir", "Plot.init_plot_libs", "cls.make_plot_metrics_bars"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.tseval.Plot.Plot.init_plot_libs", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_plot_metrics_bars"], ["", "@", "classmethod", "\n", "def", "make_plots", "(", "\n", "cls", ",", "\n", "plot_sub_dir", ":", "Path", ",", "\n", "spec", ":", "ExperimentsSpec", ",", "\n", "full_df", ":", "pd", ".", "DataFrame", ",", "\n", ")", ":", "\n", "        ", "from", "tseval", ".", "Plot", "import", "Plot", "\n", "IOUtils", ".", "rm_dir", "(", "plot_sub_dir", ")", "\n", "plot_sub_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "Plot", ".", "init_plot_libs", "(", ")", "\n", "cls", ".", "make_plot_metrics_bars", "(", "plot_sub_dir", ",", "spec", ",", "full_df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.make_plot_metrics_bars": [[824, 886], ["spec.plot_args[].keys", "full_df.groupby", "cls.gen_plot_tex_file", "cls.gen_plot_aux_tex_file", "spec.plot_args[].get", "matplotlib.pyplot.figure", "fig.add_subplot", "seaborn.barplot", "ax.set_xlabel", "ax.set_ylabel", "ax.set_yticklabels", "spec.plot_args[].get", "ax.get_legend().remove", "fig.tight_layout", "fig.savefig", "matplotlib.pyplot.close", "ax.set_xlim", "ax.set_xlim", "matplotlib.pyplot.figure", "fig_legend.legend", "fig_legend.savefig", "matplotlib.pyplot.close", "ax.get_legend", "len"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.gen_plot_tex_file", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.gen_plot_aux_tex_file"], ["", "@", "classmethod", "\n", "def", "make_plot_metrics_bars", "(", "\n", "cls", ",", "\n", "plot_sub_dir", ":", "Path", ",", "\n", "spec", ":", "ExperimentsSpec", ",", "\n", "full_df", ":", "pd", ".", "DataFrame", ",", "\n", ")", ":", "\n", "        ", "metrics_order", "=", "spec", ".", "plot_args", "[", "\"metrics\"", "]", ".", "keys", "(", ")", "\n", "hue_order", "=", "[", "model", ".", "name", "for", "model", "in", "spec", ".", "models", "]", "\n", "\n", "# Process the metrics that should be shown in percentage", "\n", "for", "metric", "in", "metrics_order", ":", "\n", "            ", "if", "spec", ".", "plot_args", "[", "\"metrics_percent\"", "]", ".", "get", "(", "metric", ",", "False", ")", ":", "\n", "                ", "full_df", ".", "loc", "[", "lambda", "x", ":", "x", "[", "\"metric\"", "]", "==", "metric", ",", "\"score\"", "]", "=", "full_df", ".", "loc", "[", "lambda", "x", ":", "x", "[", "\"metric\"", "]", "==", "metric", ",", "\"score\"", "]", "*", "100", "\n", "\n", "# Draw plots", "\n", "", "", "extracted_legend", "=", "False", "\n", "for", "(", "setup", ",", "set_name", ",", "metric", ")", ",", "df", "in", "full_df", ".", "groupby", "(", "[", "\"setup\"", ",", "\"set_name\"", ",", "\"metric\"", "]", ",", "as_index", "=", "False", ")", ":", "\n", "            ", "if", "metric", "not", "in", "metrics_order", ":", "\n", "                ", "continue", "\n", "", "fig", ":", "plt", ".", "Figure", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "5", ",", "3", ")", ")", "\n", "ax", ":", "plt", ".", "Axes", "=", "fig", ".", "add_subplot", "(", ")", "\n", "sns", ".", "barplot", "(", "\n", "ax", "=", "ax", ",", "\n", "data", "=", "df", ",", "\n", "orient", "=", "\"h\"", ",", "\n", "x", "=", "\"score\"", ",", "\n", "y", "=", "\"metric\"", ",", "\n", "hue", "=", "\"model\"", ",", "hue_order", "=", "hue_order", ",", "\n", "ci", "=", "None", ",", "\n", ")", "\n", "ax", ".", "set_xlabel", "(", "None", ")", "\n", "ax", ".", "set_ylabel", "(", "None", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "\"\"", "]", ")", "\n", "if", "spec", ".", "plot_args", "[", "\"metrics_percent\"", "]", ".", "get", "(", "metric", ",", "False", ")", ":", "\n", "                ", "ax", ".", "set_xlim", "(", "0", ",", "100", ")", "\n", "", "else", ":", "\n", "                ", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "\n", "# Extract legend", "\n", "", "if", "not", "extracted_legend", ":", "\n", "                ", "fig_legend", ":", "plt", ".", "Figure", "=", "plt", ".", "figure", "(", ")", "\n", "legend", "=", "fig_legend", ".", "legend", "(", "handles", "=", "ax", ".", "legend_", ".", "legendHandles", ",", "\n", "labels", "=", "[", "spec", ".", "plot_args", "[", "\"models\"", "]", "[", "model", ".", "name", "]", "for", "model", "in", "spec", ".", "models", "]", ",", "\n", "ncol", "=", "len", "(", "spec", ".", "models", ")", ")", "\n", "fig_legend", ".", "savefig", "(", "\n", "plot_sub_dir", "/", "f\"legend.pdf\"", ",", "\n", "bbox_extra_artists", "=", "(", "legend", ",", ")", ",", "\n", "bbox_inches", "=", "\"tight\"", ",", "\n", ")", "\n", "extracted_legend", "=", "True", "\n", "plt", ".", "close", "(", "fig_legend", ")", "\n", "\n", "", "ax", ".", "get_legend", "(", ")", ".", "remove", "(", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "plot_sub_dir", "/", "f\"bar-{setup}-{set_name}-{metric}.pdf\"", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "# Generate tex files that organizes the plots", "\n", "", "cls", ".", "gen_plot_tex_file", "(", "plot_sub_dir", ",", "metrics_order", ")", "\n", "cls", ".", "gen_plot_aux_tex_file", "(", "plot_sub_dir", ",", "metrics_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.gen_plot_tex_file": [[887, 926], ["str", "seutil.latex.File", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "itertools.combinations", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "itertools.combinations", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.save", "plot_sub_dir.relative_to", "seutil.latex.File.append", "seutil.latex.File.append", "itertools.combinations", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.File.append", "seutil.latex.Macro().use", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro().use", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.save"], ["", "@", "classmethod", "\n", "def", "gen_plot_tex_file", "(", "cls", ",", "plot_sub_dir", ":", "Path", ",", "metrics_order", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "plot_sub_dir_rel", "=", "str", "(", "plot_sub_dir", ".", "relative_to", "(", "Macros", ".", "paper_dir", ")", ")", "\n", "\n", "f", "=", "latex", ".", "File", "(", "plot_sub_dir", "/", "f\"plot.tex\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{center}\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{footnotesize}\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{tabular}{|r|@{}c@{}c@{}|@{}c@{}c@{}|@{}c@{}c@{}|}\"", ")", "\n", "f", ".", "append", "(", "r\"\\hline\"", ")", "\n", "\n", "f", ".", "append", "(", "r\"\\makecell[c]{\"", "+", "latex", ".", "Macro", "(", "\"TH-train-on\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "for", "s1", ",", "s2", "in", "itertools", ".", "combinations", "(", "Macros", ".", "split_types", ",", "2", ")", ":", "\n", "            ", "for", "setup", "in", "[", "s1", ",", "s2", "]", ":", "\n", "                ", "f", ".", "append", "(", "r\" & \\makecell[c]{\"", "+", "latex", ".", "Macro", "(", "f\"TH-{setup}\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "", "", "f", ".", "append", "(", "r\"\\\\\"", ")", "\n", "f", ".", "append", "(", "r\"\\hline\"", ")", "\n", "\n", "f", ".", "append", "(", "r\"\\makecell[c]{\"", "+", "latex", ".", "Macro", "(", "\"TH-test-on\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "for", "s1", ",", "s2", "in", "itertools", ".", "combinations", "(", "Macros", ".", "split_types", ",", "2", ")", ":", "\n", "            ", "style", "=", "\"c|\"", "\n", "f", ".", "append", "(", "r\" & \\multicolumn{2}{\"", "+", "style", "+", "\"}{\"", "+", "latex", ".", "Macro", "(", "f\"TH-{s1}-{s2}\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "", "f", ".", "append", "(", "r\"\\\\\"", ")", "\n", "\n", "f", ".", "append", "(", "r\"\\hline\"", ")", "\n", "\n", "for", "metric", "in", "metrics_order", ":", "\n", "            ", "f", ".", "append", "(", "latex", ".", "Macro", "(", "f\"TH-metric-{metric}\"", ")", ".", "use", "(", ")", ")", "\n", "for", "s1", ",", "s2", "in", "itertools", ".", "combinations", "(", "Macros", ".", "split_types", ",", "2", ")", ":", "\n", "                ", "for", "setup", "in", "[", "s1", ",", "s2", "]", ":", "\n", "                    ", "f", ".", "append", "(", "r\" & \\begin{minipage}{.12\\textwidth}\\includegraphics[width=\\textwidth]{\"", "\n", "+", "f\"{plot_sub_dir_rel}/bar-{setup}-{Macros.test_common}-{s1}-{s2}-{metric}\"", "\n", "+", "r\"}\\end{minipage}\"", ")", "\n", "", "", "f", ".", "append", "(", "r\"\\\\\"", ")", "\n", "", "f", ".", "append", "(", "r\"\\hline\"", ")", "\n", "f", ".", "append", "(", "r\"\\multicolumn{7}{c}{\\includegraphics[scale=0.3]{\"", "+", "f\"{plot_sub_dir_rel}/legend\"", "+", "r\"}} \\\\\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{tabular}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{footnotesize}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{center}\"", ")", "\n", "f", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.gen_plot_aux_tex_file": [[927, 965], ["str", "seutil.latex.File", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.save", "plot_sub_dir.relative_to", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.File.append", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.Macro().use", "seutil.latex.File.append", "seutil.latex.Macro().use", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro", "seutil.latex.Macro"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.save"], ["", "@", "classmethod", "\n", "def", "gen_plot_aux_tex_file", "(", "cls", ",", "plot_sub_dir", ":", "Path", ",", "metrics_order", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "plot_sub_dir_rel", "=", "str", "(", "plot_sub_dir", ".", "relative_to", "(", "Macros", ".", "paper_dir", ")", ")", "\n", "f", "=", "latex", ".", "File", "(", "plot_sub_dir", "/", "f\"plot-aux.tex\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{center}\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{footnotesize}\"", ")", "\n", "f", ".", "append", "(", "r\"\\begin{tabular}{|r|c|c|c|c|c|c|}\"", ")", "\n", "f", ".", "append", "(", "r\"\\hline\"", ")", "\n", "\n", "f", ".", "append", "(", "r\"\\makecell[c]{\"", "+", "latex", ".", "Macro", "(", "\"TH-train-on\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "for", "s", "in", "Macros", ".", "split_types", ":", "\n", "            ", "style", "=", "\"c|\"", "\n", "f", ".", "append", "(", "r\" & \\multicolumn{2}{\"", "+", "style", "+", "\"}{\"", "+", "latex", ".", "Macro", "(", "f\"TH-{s}\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "", "f", ".", "append", "(", "r\"\\\\\"", ")", "\n", "f", ".", "append", "(", "r\"\\hline\"", ")", "\n", "\n", "f", ".", "append", "(", "r\"\\makecell[c]{\"", "+", "latex", ".", "Macro", "(", "\"TH-test-on\"", ")", ".", "use", "(", ")", "+", "\"}\"", ")", "\n", "for", "s", "in", "Macros", ".", "split_types", ":", "\n", "            ", "f", ".", "append", "(", "r\" & \"", "+", "latex", ".", "Macro", "(", "f\"TH-{Macros.val}\"", ")", ".", "use", "(", ")", ")", "\n", "f", ".", "append", "(", "r\" & \"", "+", "latex", ".", "Macro", "(", "f\"TH-{Macros.test_standard}\"", ")", ".", "use", "(", ")", ")", "\n", "", "f", ".", "append", "(", "r\"\\\\\"", ")", "\n", "\n", "f", ".", "append", "(", "r\"\\hline\"", ")", "\n", "\n", "for", "metric", "in", "metrics_order", ":", "\n", "            ", "f", ".", "append", "(", "latex", ".", "Macro", "(", "f\"TH-metric-{metric}\"", ")", ".", "use", "(", ")", ")", "\n", "for", "setup", "in", "Macros", ".", "split_types", ":", "\n", "                ", "for", "sn", "in", "[", "Macros", ".", "val", ",", "Macros", ".", "test_standard", "]", ":", "\n", "                    ", "f", ".", "append", "(", "r\" & \\begin{minipage}{.12\\textwidth}\\includegraphics[width=\\textwidth]{\"", "\n", "+", "f\"{plot_sub_dir_rel}/bar-{setup}-{sn}-{metric}\"", "\n", "+", "r\"}\\end{minipage}\"", ")", "\n", "", "", "f", ".", "append", "(", "r\"\\\\\"", ")", "\n", "", "f", ".", "append", "(", "r\"\\hline\"", ")", "\n", "f", ".", "append", "(", "r\"\\multicolumn{7}{c}{\\includegraphics[scale=0.3]{\"", "+", "f\"{plot_sub_dir_rel}/legend\"", "+", "r\"}} \\\\\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{tabular}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{footnotesize}\"", ")", "\n", "f", ".", "append", "(", "r\"\\end{center}\"", ")", "\n", "f", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.sample_results": [[966, 976], ["tqdm.tqdm.tqdm", "itertools.combinations", "ExperimentsAnalyzer.ExperimentsAnalyzer.sample_results_one", "tqdm.tqdm.tqdm.update", "ExperimentsAnalyzer.ExperimentsAnalyzer.sample_results_one", "tqdm.tqdm.tqdm.update", "len", "len", "list", "itertools.combinations"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.sample_results_one", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.sample_results_one"], ["", "def", "sample_results", "(", "self", ",", "seed", ":", "int", "=", "7", ",", "count", ":", "int", "=", "100", ")", ":", "\n", "        ", "tbar", "=", "tqdm", "(", "\"Sample results\"", ",", "\n", "total", "=", "len", "(", "self", ".", "spec", ".", "setups", ")", "+", "len", "(", "list", "(", "itertools", ".", "combinations", "(", "self", ".", "spec", ".", "setups", ",", "2", ")", ")", ")", ")", "\n", "for", "setup", "in", "self", ".", "spec", ".", "setups", ":", "\n", "            ", "self", ".", "sample_results_one", "(", "Macros", ".", "val", ",", "[", "setup", "]", ",", "seed", ",", "count", ")", "\n", "tbar", ".", "update", "(", "1", ")", "\n", "\n", "", "for", "s1", ",", "s2", "in", "itertools", ".", "combinations", "(", "self", ".", "spec", ".", "setups", ",", "2", ")", ":", "\n", "            ", "self", ".", "sample_results_one", "(", "f\"{Macros.test_common}-{s1}-{s2}\"", ",", "[", "s1", ",", "s2", "]", ",", "seed", ",", "count", ")", "\n", "tbar", ".", "update", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.ExperimentsAnalyzer.sample_results_one": [[977, 1036], ["seutil.IOUtils.load", "tseval.data.MethodData.MethodData.load_dataset", "random.seed", "list", "random.shuffle", "sample_file.parent.mkdir", "range", "len", "open", "f.write", "enumerate", "len", "f.write", "key2results.keys", "f.write", "f.flush", "seutil.IOUtils.load", "seutil.IOUtils.load", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "len", "f.write"], "methods", ["home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.data.MethodData.MethodData.load_dataset", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load", "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.model.MNModelBase.MNModelBase.load"], ["", "", "def", "sample_results_one", "(", "self", ",", "set_name", ":", "str", ",", "setups", ":", "List", "[", "str", "]", ",", "seed", ":", "int", "=", "7", ",", "count", ":", "int", "=", "100", ")", ":", "\n", "        ", "eval_ids", "=", "IOUtils", ".", "load", "(", "\n", "Macros", ".", "work_dir", "/", "self", ".", "spec", ".", "task", "/", "\"setup\"", "/", "setups", "[", "0", "]", "/", "\"data\"", "/", "f\"split_{set_name}.json\"", ",", "\n", "IOUtils", ".", "Format", ".", "json", ")", "\n", "dataset", ":", "List", "[", "MethodData", "]", "=", "MethodData", ".", "load_dataset", "(", "\n", "Macros", ".", "work_dir", "/", "self", ".", "spec", ".", "task", "/", "\"setup\"", "/", "setups", "[", "0", "]", "/", "\"data\"", ",", "expected_ids", "=", "eval_ids", ")", "\n", "\n", "# Ensure dataset is in the order of eval_ids", "\n", "indexed_dataset", "=", "{", "d", ".", "id", ":", "d", "for", "d", "in", "dataset", "}", "\n", "dataset", "=", "[", "indexed_dataset", "[", "i", "]", "for", "i", "in", "eval_ids", "]", "\n", "\n", "# Collect model results & metrics", "\n", "key2results", ":", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "List", "[", "List", "[", "str", "]", "]", "]", "=", "{", "}", "\n", "key2metrics", ":", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "Dict", "[", "str", ",", "List", "[", "List", "[", "float", "]", "]", "]", "]", "=", "{", "}", "\n", "for", "setup", "in", "setups", ":", "\n", "            ", "for", "model", "in", "self", ".", "spec", ".", "models", ":", "\n", "                ", "for", "exp", "in", "model", ".", "exps", ":", "\n", "                    ", "key2results", "[", "(", "setup", ",", "exp", ")", "]", "=", "IOUtils", ".", "load", "(", "\n", "Macros", ".", "work_dir", "/", "self", ".", "spec", ".", "task", "/", "\"result\"", "/", "setup", "/", "exp", "/", "f\"{set_name}_predictions.jsonl\"", ",", "\n", "IOUtils", ".", "Format", ".", "jsonList", ")", "\n", "metrics_list", "=", "IOUtils", ".", "load", "(", "\n", "Macros", ".", "work_dir", "/", "self", ".", "spec", ".", "task", "/", "\"metric\"", "/", "setup", "/", "exp", "/", "f\"{set_name}_metrics_list.pkl\"", ",", "\n", "IOUtils", ".", "Format", ".", "pkl", ")", "\n", "key2metrics", "[", "(", "setup", ",", "exp", ")", "]", "=", "{", "}", "\n", "for", "metric", "in", "self", ".", "spec", ".", "metrics", ":", "\n", "                        ", "key2metrics", "[", "(", "setup", ",", "exp", ")", "]", "[", "metric", "]", "=", "metrics_list", "[", "metric", "]", "\n", "\n", "# Sample", "\n", "", "", "", "", "random", ".", "seed", "(", "seed", ")", "\n", "indices", "=", "list", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "indices", ")", "\n", "\n", "if", "len", "(", "setups", ")", "==", "1", ":", "\n", "            ", "sample_file", "=", "self", ".", "output_dir", "/", "\"sample\"", "/", "f\"{set_name}-{setups[0]}.java\"", "\n", "", "else", ":", "\n", "            ", "sample_file", "=", "self", ".", "output_dir", "/", "\"sample\"", "/", "f\"{set_name}.java\"", "\n", "", "sample_file", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "sample_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "f\"// Sample {count}/{len(indices)} data, seed {seed}\\n\"", ")", "\n", "for", "count_i", ",", "i", "in", "enumerate", "(", "indices", "[", ":", "count", "]", ")", ":", "\n", "                ", "data", "=", "dataset", "[", "i", "]", "\n", "f", ".", "write", "(", "f\"// ----- {count_i + 1}/{count} | Data #{data.id} -----\\n\"", ")", "\n", "if", "self", ".", "spec", ".", "task", "==", "\"CG\"", ":", "\n", "                    ", "f", ".", "write", "(", "f\"/** {data.misc['orig_comment_summary']} */\\n\"", ")", "\n", "f", ".", "write", "(", "data", ".", "misc", "[", "\"orig_code\"", "]", "+", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "f\"/** {' '.join(data.comment_summary)} */\\n\"", ")", "\n", "", "else", ":", "\n", "                    ", "f", ".", "write", "(", "f\"/** {data.misc['orig_name']} */\\n\"", ")", "\n", "f", ".", "write", "(", "data", ".", "misc", "[", "\"orig_code_masked\"", "]", "+", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "f\"/** {' '.join(data.name)} */\\n\"", ")", "\n", "", "for", "setup", ",", "exp", "in", "key2results", ".", "keys", "(", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"// vvv {setup} {exp}\\n\"", ")", "\n", "f", ".", "write", "(", "f\"/** {' '.join(key2results[(setup, exp)][i])} */\\n\"", ")", "\n", "f", ".", "write", "(", "f\"//     \"", ")", "\n", "for", "metric", "in", "self", ".", "spec", ".", "metrics", ":", "\n", "                        ", "f", ".", "write", "(", "f\"{metric}: {key2metrics[(setup, exp)][metric][i] * 100:5.1f} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "f", ".", "flush", "(", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.engineeringsoftware_time-segmented-evaluation.collector.ExperimentsAnalyzer.bootstrap": [[43, 121], ["torch.cuda.is_available", "torch.tensor", "torch.tensor", "range", "range", "seutil.LoggingUtils.log_and_raise", "torch.device", "torch.device", "a_scores.extend", "b_scores.extend", "len", "len", "torch.multinomial", "torch.gather", "torch.gather", "torch.multinomial", "torch.gather", "torch.multinomial", "torch.gather", "torch.gather.mean().tolist", "torch.gather.mean().tolist", "float", "torch.ones", "torch.tensor.repeat", "torch.tensor.repeat", "torch.ones", "torch.tensor.repeat", "torch.ones", "torch.tensor.repeat", "torch.gather.mean", "torch.gather.mean", "len", "len", "len"], "function", ["None"], ["", "def", "bootstrap", "(", "\n", "full_a_scores", ":", "List", "[", "float", "]", ",", "\n", "full_b_scores", ":", "List", "[", "float", "]", ",", "\n", "num_samples", ":", "int", "=", "10_000", ",", "\n", "test_size", ":", "int", "=", "1000", ",", "\n", "is_pairwise", ":", "bool", "=", "True", ",", "\n", "batch_size", ":", "int", "=", "10_000", ",", "\n", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Uses bootstrap method to perform the statistical significance test for the hypothesis: a > b, and returns the\n    probability (p-value) to reject the hypothesis.\n\n    Args:\n        full_a_scores: the full set of a values to sample from\n        full_b_scores: the full set of b values to sample from\n        num_samples: the number of samples to repeat\n        test_size: the size at each sample\n        is_pairwise: if the test is pairwise (requires len(full_a_scores) == len(full_b_scores))\n    Returns:\n        the p-value, which should be smaller than or equal to the significance level (usually 5%) to claim\n        that a > b is a statistical significant result\n    \"\"\"", "\n", "if", "is_pairwise", "and", "len", "(", "full_a_scores", ")", "!=", "len", "(", "full_b_scores", ")", ":", "\n", "        ", "LoggingUtils", ".", "log_and_raise", "(", "logger", ",", "\n", "\"Cannot perform pairwise significance test if two sets do not have the same size.\"", ",", "\n", "Exception", ")", "\n", "\n", "", "a_scores", "=", "[", "]", "\n", "b_scores", "=", "[", "]", "\n", "\n", "# Prepare torch device", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "tensor_full_a", "=", "torch", ".", "tensor", "(", "full_a_scores", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "tensor_full_b", "=", "torch", ".", "tensor", "(", "full_b_scores", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "for", "sample_i", "in", "range", "(", "0", ",", "num_samples", ",", "batch_size", ")", ":", "\n", "        ", "if", "sample_i", "+", "batch_size", ">", "num_samples", ":", "\n", "            ", "batch", "=", "num_samples", "-", "sample_i", "\n", "", "else", ":", "\n", "            ", "batch", "=", "batch_size", "\n", "\n", "", "if", "is_pairwise", ":", "\n", "            ", "sample_indices", "=", "torch", ".", "multinomial", "(", "\n", "torch", ".", "ones", "(", "(", "batch", ",", "len", "(", "full_a_scores", ")", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", ",", "\n", "test_size", ",", "\n", "replacement", "=", "True", ",", "\n", ")", "\n", "tensor_a", "=", "torch", ".", "gather", "(", "tensor_full_a", ".", "repeat", "(", "batch", ",", "1", ")", ",", "1", ",", "sample_indices", ")", "\n", "tensor_b", "=", "torch", ".", "gather", "(", "tensor_full_b", ".", "repeat", "(", "batch", ",", "1", ")", ",", "1", ",", "sample_indices", ")", "\n", "del", "sample_indices", "\n", "", "else", ":", "\n", "            ", "sample_indices_a", "=", "torch", ".", "multinomial", "(", "\n", "torch", ".", "ones", "(", "(", "batch", ",", "len", "(", "full_a_scores", ")", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", ",", "\n", "test_size", ",", "\n", "replacement", "=", "True", ",", "\n", ")", "\n", "tensor_a", "=", "torch", ".", "gather", "(", "tensor_full_a", ".", "repeat", "(", "batch", ",", "1", ")", ",", "1", ",", "sample_indices_a", ")", "\n", "sample_indices_b", "=", "torch", ".", "multinomial", "(", "\n", "torch", ".", "ones", "(", "(", "batch", ",", "len", "(", "full_b_scores", ")", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", ",", "\n", "test_size", ",", "\n", "replacement", "=", "True", ",", "\n", ")", "\n", "tensor_b", "=", "torch", ".", "gather", "(", "tensor_full_b", ".", "repeat", "(", "batch", ",", "1", ")", ",", "1", ",", "sample_indices_b", ")", "\n", "del", "sample_indices_a", ",", "sample_indices_b", "\n", "\n", "", "a_scores", ".", "extend", "(", "tensor_a", ".", "mean", "(", "dim", "=", "1", ")", ".", "tolist", "(", ")", ")", "\n", "b_scores", ".", "extend", "(", "tensor_b", ".", "mean", "(", "dim", "=", "1", ")", ".", "tolist", "(", ")", ")", "\n", "del", "tensor_a", ",", "tensor_b", "\n", "\n", "", "significance_a_over_b", "=", "0", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "if", "a_scores", "[", "i", "]", ">", "b_scores", "[", "i", "]", ":", "\n", "            ", "significance_a_over_b", "+=", "1", "\n", "\n", "", "", "return", "1", "-", "significance_a_over_b", "/", "float", "(", "num_samples", ")", "\n", "\n"]]}