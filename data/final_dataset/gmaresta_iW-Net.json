{"home.repos.pwc.inspect_result.gmaresta_iW-Net.None.models.unet3D.__init__": [[58, 73], ["int", "numpy.floor", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.models.unet3D.log", "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.models.unet3D.log"], ["    ", "def", "__init__", "(", "self", ",", "sz", ",", "bot_neck", ",", "nf", ",", "regul", ",", "dropout", ",", "seed", ",", "bn", "=", "True", ")", ":", "\n", "\n", "#bot_neck is the size for which the bottle neck should be one", "\n", "#sz is the side of the cube", "\n", "#bn - if true, add batchnorm", "\n", "\n", "\n", "        ", "self", ".", "sz", "=", "sz", "\n", "#self.nlayers = int(np.floor(np.log(sz)/np.log(2)))+1", "\n", "self", ".", "nlayers", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "log", "(", "bot_neck", ")", "/", "np", ".", "log", "(", "2", ")", ")", ")", "+", "1", "\n", "self", ".", "nf", "=", "nf", "\n", "self", ".", "regul", "=", "regul", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "bn", "=", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.models.unet3D.createModel": [[74, 160], ["keras.layers.Input", "conv1.append", "range", "range", "print", "keras.models.Model", "keras.layers.convolutional.Conv3D", "keras.layers.core.Activation", "conv1.append", "print", "keras.layers.convolutional.Conv3D", "keras.layers.core.Activation", "keras.backend.int_shape", "keras.layers.normalization.BatchNormalization", "keras.layers.Concatenate", "keras.layers.convolutional.Conv3D", "keras.layers.core.Activation", "keras.layers.convolutional.Conv3D", "keras.layers.convolutional.Conv3D", "keras.layers.Dropout", "keras.layers.normalization.BatchNormalization", "keras.layers.core.Activation", "keras.layers.normalization.BatchNormalization", "keras.layers.convolutional.Conv3D", "keras.layers.core.Activation", "keras.layers.UpSampling3D", "keras.regularizers.l2", "keras.layers.normalization.BatchNormalization", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2"], "methods", ["None"], ["", "def", "createModel", "(", "self", ")", ":", "\n", "\n", "\n", "        ", "nf", "=", "self", ".", "nf", "\n", "regul", "=", "self", ".", "regul", "\n", "dropout", "=", "self", ".", "dropout", "\n", "seed", "=", "self", ".", "seed", "\n", "sz", "=", "self", ".", "sz", "\n", "\n", "inputs", "=", "Input", "(", "(", "self", ".", "sz", ",", "self", ".", "sz", ",", "self", ".", "sz", ",", "1", ")", ")", "\n", "#        points = Input((self.sz, self.sz,self.sz,1))", "\n", "\n", "conv1", "=", "[", "]", "\n", "\n", "\n", "conv", "=", "Conv3D", "(", "nf", ",", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "inputs", ")", "\n", "#        conv = Concatenate(axis=-1)([conv,points])", "\n", "if", "self", ".", "bn", ":", "\n", "            ", "conv", "=", "BatchNormalization", "(", "axis", "=", "-", "1", ")", "(", "conv", ")", "\n", "", "conv", "=", "Activation", "(", "'relu'", ")", "(", "conv", ")", "\n", "\n", "conv1", ".", "append", "(", "conv", ")", "\n", "c", "=", "-", "1", "\n", "for", "ii", "in", "range", "(", "1", ",", "self", ".", "nlayers", ")", ":", "\n", "            ", "c", "+=", "1", "\n", "if", "ii", "<", "8", ":", "\n", "                ", "nnf", "=", "nf", "*", "ii", "\n", "", "else", ":", "\n", "                ", "nnf", "=", "nnf", "*", "8", "\n", "", "if", "ii", "==", "self", ".", "nlayers", "-", "1", ":", "\n", "                ", "conv", "=", "Conv3D", "(", "nnf", ",", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "regul", ")", ")", "(", "conv1", "[", "ii", "-", "1", "]", ")", "#last layer", "\n", "", "else", ":", "\n", "\n", "                    ", "conv", "=", "Conv3D", "(", "nnf", ",", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "regul", ")", ")", "(", "conv1", "[", "ii", "-", "1", "]", ")", "\n", "\n", "", "if", "dropout", "!=", "0", ":", "\n", "                ", "conv", "=", "Dropout", "(", "dropout", ",", "seed", "=", "seed", ")", "(", "conv", ")", "\n", "", "if", "self", ".", "bn", ":", "\n", "                ", "conv", "=", "BatchNormalization", "(", "axis", "=", "-", "1", ")", "(", "conv", ")", "\n", "", "conv1", ".", "append", "(", "Activation", "(", "'relu'", ")", "(", "conv", ")", ")", "\n", "", "upconv1", "=", "conv1", "[", "-", "1", "]", "\n", "ind", "=", "0", "\n", "c", "=", "-", "1", "\n", "for", "xx", "in", "range", "(", "self", ".", "nlayers", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "c", "+=", "1", "\n", "if", "xx", "<", "8", "and", "xx", ">", "0", ":", "\n", "                ", "nnf", "=", "nf", "*", "xx", "\n", "", "elif", "xx", "<=", "0", ":", "\n", "                ", "nnf", "=", "1", "\n", "", "else", ":", "\n", "                ", "nnf", "=", "nnf", "*", "8", "\n", "", "print", "(", "xx", ")", "\n", "#up = merge([UpSampling2D(size=(2, 2))(upconv1), conv1[xx]], mode='concat', concat_axis=1)", "\n", "up", "=", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "UpSampling3D", "(", "size", "=", "(", "2", ",", "2", ",", "2", ")", ")", "(", "upconv1", ")", ",", "conv1", "[", "xx", "]", "]", ")", "\n", "upconv", "=", "Conv3D", "(", "nnf", "*", "8", ",", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "regul", ")", ")", "(", "up", ")", "\n", "if", "self", ".", "bn", ":", "\n", "                ", "upconv", "=", "BatchNormalization", "(", "axis", "=", "-", "1", ")", "(", "upconv", ")", "\n", "", "upconv", "=", "Activation", "(", "'relu'", ")", "(", "upconv", ")", "\n", "# conv7 = Dropout(0.2)(conv7)", "\n", "if", "xx", ">", "0", ":", "\n", "                ", "upconv", "=", "Conv3D", "(", "nnf", "*", "8", ",", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "regul", ")", ")", "(", "upconv", ")", "\n", "#if dropout !=0:", "\n", "#    conv = Dropout(dropout,seed = seed)(upconv) # TO DO - change (25JUl)", "\n", "if", "self", ".", "bn", ":", "\n", "                    ", "upconv", "=", "BatchNormalization", "(", "axis", "=", "-", "1", ")", "(", "upconv", ")", "\n", "", "upconv1", "=", "Activation", "(", "'relu'", ")", "(", "upconv", ")", "\n", "ind", "+=", "1", "\n", "# nf*8 x 2 x 2", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "#        upconv = Concatenate(axis=-1)([upconv,points])", "\n", "\n", "", "", "upconv", "=", "Conv3D", "(", "1", ",", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "upconv", ")", "\n", "\n", "\n", "\n", "out", "=", "Activation", "(", "'sigmoid'", ",", "name", "=", "'segmentation'", ")", "(", "upconv", ")", "\n", "\n", "print", "(", "K", ".", "int_shape", "(", "out", ")", ")", "\n", "\n", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "out", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.models.unet3D.createGuidedModel": [[162, 249], ["keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "conv1.append", "range", "range", "print", "keras.models.Model", "keras.layers.convolutional.Conv3D", "keras.layers.Concatenate", "keras.layers.core.Activation", "conv1.append", "print", "keras.layers.convolutional.Conv3D", "keras.layers.core.Activation", "keras.backend.int_shape", "keras.layers.normalization.BatchNormalization", "keras.layers.Concatenate", "keras.layers.convolutional.Conv3D", "keras.layers.core.Activation", "keras.layers.convolutional.Conv3D", "keras.layers.convolutional.Conv3D", "keras.layers.Dropout", "keras.layers.normalization.BatchNormalization", "keras.layers.core.Activation", "keras.layers.normalization.BatchNormalization", "keras.layers.convolutional.Conv3D", "keras.layers.core.Activation", "keras.layers.UpSampling3D", "keras.regularizers.l2", "keras.layers.normalization.BatchNormalization", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2"], "methods", ["None"], ["", "def", "createGuidedModel", "(", "self", ")", ":", "\n", "\n", "\n", "        ", "nf", "=", "self", ".", "nf", "\n", "regul", "=", "self", ".", "regul", "\n", "dropout", "=", "self", ".", "dropout", "\n", "seed", "=", "self", ".", "seed", "\n", "sz", "=", "self", ".", "sz", "\n", "\n", "inputs", "=", "Input", "(", "(", "self", ".", "sz", ",", "self", ".", "sz", ",", "self", ".", "sz", ",", "1", ")", ")", "\n", "points", "=", "Input", "(", "(", "self", ".", "sz", ",", "self", ".", "sz", ",", "self", ".", "sz", ",", "1", ")", ")", "\n", "segmentation", "=", "Input", "(", "(", "self", ".", "sz", ",", "self", ".", "sz", ",", "self", ".", "sz", ",", "1", ")", ")", "\n", "\n", "conv1", "=", "[", "]", "\n", "\n", "\n", "conv", "=", "Conv3D", "(", "nf", ",", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "inputs", ")", "\n", "conv", "=", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "conv", ",", "points", ",", "segmentation", "]", ")", "\n", "if", "self", ".", "bn", ":", "\n", "            ", "conv", "=", "BatchNormalization", "(", "axis", "=", "-", "1", ")", "(", "conv", ")", "\n", "", "conv", "=", "Activation", "(", "'relu'", ")", "(", "conv", ")", "\n", "\n", "conv1", ".", "append", "(", "conv", ")", "\n", "c", "=", "-", "1", "\n", "for", "ii", "in", "range", "(", "1", ",", "self", ".", "nlayers", ")", ":", "\n", "            ", "c", "+=", "1", "\n", "if", "ii", "<", "8", ":", "\n", "                ", "nnf", "=", "nf", "*", "ii", "\n", "", "else", ":", "\n", "                ", "nnf", "=", "nnf", "*", "8", "\n", "", "if", "ii", "==", "self", ".", "nlayers", "-", "1", ":", "\n", "                ", "conv", "=", "Conv3D", "(", "nnf", ",", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "regul", ")", ")", "(", "conv1", "[", "ii", "-", "1", "]", ")", "#last layer", "\n", "", "else", ":", "\n", "\n", "                    ", "conv", "=", "Conv3D", "(", "nnf", ",", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "regul", ")", ")", "(", "conv1", "[", "ii", "-", "1", "]", ")", "\n", "\n", "", "if", "dropout", "!=", "0", ":", "\n", "                ", "conv", "=", "Dropout", "(", "dropout", ",", "seed", "=", "seed", ")", "(", "conv", ")", "\n", "", "if", "self", ".", "bn", ":", "\n", "                ", "conv", "=", "BatchNormalization", "(", "axis", "=", "-", "1", ")", "(", "conv", ")", "\n", "", "conv1", ".", "append", "(", "Activation", "(", "'relu'", ")", "(", "conv", ")", ")", "\n", "", "upconv1", "=", "conv1", "[", "-", "1", "]", "\n", "ind", "=", "0", "\n", "c", "=", "-", "1", "\n", "for", "xx", "in", "range", "(", "self", ".", "nlayers", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "c", "+=", "1", "\n", "if", "xx", "<", "8", "and", "xx", ">", "0", ":", "\n", "                ", "nnf", "=", "nf", "*", "xx", "\n", "", "elif", "xx", "<=", "0", ":", "\n", "                ", "nnf", "=", "1", "\n", "", "else", ":", "\n", "                ", "nnf", "=", "nnf", "*", "8", "\n", "", "print", "(", "xx", ")", "\n", "#up = merge([UpSampling2D(size=(2, 2))(upconv1), conv1[xx]], mode='concat', concat_axis=1)", "\n", "up", "=", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "UpSampling3D", "(", "size", "=", "(", "2", ",", "2", ",", "2", ")", ")", "(", "upconv1", ")", ",", "conv1", "[", "xx", "]", "]", ")", "\n", "upconv", "=", "Conv3D", "(", "nnf", "*", "8", ",", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "regul", ")", ")", "(", "up", ")", "\n", "if", "self", ".", "bn", ":", "\n", "                ", "upconv", "=", "BatchNormalization", "(", "axis", "=", "-", "1", ")", "(", "upconv", ")", "\n", "", "upconv", "=", "Activation", "(", "'relu'", ")", "(", "upconv", ")", "\n", "# conv7 = Dropout(0.2)(conv7)", "\n", "if", "xx", ">", "0", ":", "\n", "                ", "upconv", "=", "Conv3D", "(", "nnf", "*", "8", ",", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "\"same\"", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "regul", ")", ")", "(", "upconv", ")", "\n", "#if dropout !=0:", "\n", "#    conv = Dropout(dropout,seed = seed)(upconv) # TO DO - change (25JUl)", "\n", "if", "self", ".", "bn", ":", "\n", "                    ", "upconv", "=", "BatchNormalization", "(", "axis", "=", "-", "1", ")", "(", "upconv", ")", "\n", "", "upconv1", "=", "Activation", "(", "'relu'", ")", "(", "upconv", ")", "\n", "ind", "+=", "1", "\n", "# nf*8 x 2 x 2", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "#        upconv = Concatenate(axis=-1)([upconv,points])", "\n", "\n", "", "", "upconv", "=", "Conv3D", "(", "1", ",", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "upconv", ")", "\n", "\n", "\n", "\n", "out", "=", "Activation", "(", "'sigmoid'", ",", "name", "=", "'segmentation'", ")", "(", "upconv", ")", "\n", "\n", "print", "(", "K", ".", "int_shape", "(", "out", ")", ")", "\n", "\n", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "inputs", ",", "points", ",", "segmentation", "]", ",", "outputs", "=", "out", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.models.unet3D.correctionModel": [[251, 270], ["keras.layers.Input", "keras.layers.Input", "models.unet3D.createModel", "models.unet3D.load_weights", "models.unet3D.", "models.unet3D.createGuidedModel", "models.unet3D.", "keras.models.Model", "keras.layers.core.Activation", "keras.layers.core.Activation", "keras.layers.core.Activation"], "methods", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.models.unet3D.createModel", "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.models.unet3D.createGuidedModel"], ["", "def", "correctionModel", "(", "self", ",", "weights", ")", ":", "\n", "        ", "volume", "=", "Input", "(", "(", "self", ".", "sz", ",", "self", ".", "sz", ",", "self", ".", "sz", ",", "1", ")", ")", "\n", "mapping", "=", "Input", "(", "(", "self", ".", "sz", ",", "self", ".", "sz", ",", "self", ".", "sz", ",", "1", ")", ")", "\n", "#        segmentation = Input((self.sz, self.sz,self.sz,1))", "\n", "\n", "seg_model", "=", "self", ".", "createModel", "(", ")", "\n", "seg_model", ".", "load_weights", "(", "weights", ")", "\n", "seg_model", ".", "trainable", "=", "False", "\n", "\n", "segmentation", "=", "seg_model", "(", "volume", ")", "\n", "\n", "correction_model", "=", "self", ".", "createGuidedModel", "(", ")", "\n", "seg", "=", "correction_model", "(", "[", "volume", ",", "mapping", ",", "segmentation", "]", ")", "\n", "seg", "=", "Activation", "(", "'linear'", ",", "name", "=", "'segmentation'", ")", "(", "seg", ")", "\n", "aux", "=", "Activation", "(", "'linear'", ",", "name", "=", "'attraction'", ")", "(", "seg", ")", "\n", "init", "=", "Activation", "(", "'linear'", ",", "name", "=", "'initial'", ")", "(", "segmentation", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "volume", ",", "mapping", "]", ",", "outputs", "=", "[", "seg", ",", "aux", ",", "init", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.models.unet3D.log": [[271, 282], ["open", "open.write", "open.write", "open.close", "open", "open.write", "open.close"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "hist", ",", "params", "=", "False", ",", "file", "=", "'log.txt'", ")", ":", "\n", "\n", "        ", "if", "params", "is", "True", ":", "\n", "            ", "out", "=", "open", "(", "file", ",", "'ab+'", ")", "\n", "out", ".", "write", "(", "(", "hist", ".", "params", "+", "'\\n'", ")", ")", "\n", "out", ".", "write", "(", "(", "hist", ".", "epoch", "+", "hist", ".", "history", "+", "'\\n'", ")", ")", "\n", "out", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "open", "(", "file", ",", "'ab+'", ")", "\n", "out", ".", "write", "(", "(", "hist", ".", "epoch", "+", "hist", ".", "history", "+", "'\\n'", ")", ")", "\n", "out", ".", "close", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.models.IoU_loss": [[21, 30], ["keras.backend.sum", "keras.backend.sum", "keras.backend.mean"], "function", ["None"], ["def", "IoU_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "smooth", "=", "1e-12", "\n", "# author = Vladimir Iglovikov", "\n", "intersection", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred", ")", "#,axis=[1,2,3,4])", "\n", "sum_", "=", "K", ".", "sum", "(", "y_true", "+", "y_pred", ")", "#,axis=[1,2,3,4])", "\n", "\n", "jac", "=", "(", "intersection", "+", "smooth", ")", "/", "(", "sum_", "-", "intersection", "+", "smooth", ")", "\n", "\n", "return", "K", ".", "mean", "(", "1", "-", "jac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.models.IoU": [[32, 41], ["keras.backend.round", "keras.backend.sum", "keras.backend.sum", "keras.backend.mean", "keras.backend.clip"], "function", ["None"], ["", "def", "IoU", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# author = Vladimir Iglovikov", "\n", "    ", "smooth", "=", "1e-12", "\n", "y_pred_pos", "=", "K", ".", "round", "(", "K", ".", "clip", "(", "y_pred", ",", "0", ",", "1", ")", ")", "\n", "\n", "intersection", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred_pos", ")", "#,axis=[1,2,3,4])", "\n", "sum_", "=", "K", ".", "sum", "(", "y_true", "+", "y_pred", ")", "#,axis=[1,2,3,4])", "\n", "jac", "=", "(", "intersection", "+", "smooth", ")", "/", "(", "sum_", "-", "intersection", "+", "smooth", ")", "\n", "return", "K", ".", "mean", "(", "jac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.models.attraction_loss": [[42, 51], ["keras.backend.sum", "keras.backend.sum", "keras.backend.mean"], "function", ["None"], ["", "def", "attraction_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "smooth", "=", "1e-12", "\n", "intersection", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred", ")", "\n", "sum_", "=", "K", ".", "sum", "(", "y_true", ")", "\n", "value", "=", "(", "intersection", "+", "smooth", ")", "/", "(", "sum_", "+", "smooth", ")", "\n", "\n", "\n", "\n", "return", "K", ".", "mean", "(", "1", "-", "value", ")", "# + K.mean(Lp)", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.create_model.load_model": [[7, 43], ["dict", "dict", "models.unet3D", "models.unet3D.correctionModel", "unet.correctionModel.load_weights", "unet.correctionModel.get_layer", "model_guided.get_layer.get_weights", "models.unet3D.createGuidedModel", "unet.createGuidedModel.set_weights", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.models.unet3D.correctionModel", "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.models.unet3D.createGuidedModel"], ["def", "load_model", "(", ")", ":", "\n", "\n", "#read the config file", "\n", "    ", "with", "open", "(", "'config.json'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "", "config_gen", "=", "{", "}", "\n", "\n", "config_gen", "[", "'train'", "]", "=", "dict", "(", "config", "[", "'generator'", "]", ")", "\n", "config_gen", "[", "'train'", "]", "[", "'IMAGE_FOLDER'", "]", "=", "\"\"", "\n", "config_gen", "[", "'train'", "]", "[", "'SEG_FOLDER'", "]", "=", "\"\"", "\n", "config_gen", "[", "'train'", "]", "[", "'IMAGE_EXTENSION'", "]", "=", "'.npy'", "\n", "config_model", "=", "dict", "(", "config", "[", "'model'", "]", ")", "\n", "\n", "unet", "=", "unet3D", "(", "config_gen", "[", "'train'", "]", "[", "'IMAGE_W'", "]", ",", "config_gen", "[", "'train'", "]", "[", "'IMAGE_W'", "]", "/", "4", ",", "\n", "config_model", "[", "'INIT_MAPS'", "]", ",", "config_model", "[", "'REGUL'", "]", ",", "\n", "config_model", "[", "'DROPOUT'", "]", ",", "0", ",", "\n", "bn", "=", "config_model", "[", "'BATCH_NORM'", "]", ")", "\n", "\n", "\n", "\n", "model_guided", "=", "unet", ".", "correctionModel", "(", "'best_1st.hdf5'", ")", "\n", "model_guided", ".", "load_weights", "(", "'best.hdf5'", ")", "\n", "#model.load_weights(os.path.join(args.exp_path,'best.hdf5'))", "\n", "\n", "\n", "temp", "=", "model_guided", ".", "get_layer", "(", "name", "=", "'model_2'", ")", "\n", "W", "=", "temp", ".", "get_weights", "(", ")", "\n", "\n", "#print(W)", "\n", "\n", "\n", "\n", "iterative", "=", "unet", ".", "createGuidedModel", "(", ")", "\n", "iterative", ".", "set_weights", "(", "W", ")", "\n", "\n", "return", "model_guided", "", "", ""]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.Segmentation_Function.seg": [[94, 99], ["DRM"], "methods", ["None"], ["    ", "def", "seg", "(", "self", ")", ":", "\n", "\n", "        ", "from", "DataReadingMain", "import", "DRM", "\n", "[", "BestCost", ",", "FeatureMatrix", ",", "Size", ",", "Slice", ",", "SliceM", ",", "MaxIt", ",", "SI", ",", "GT3D", ",", "ImageM", ",", "SegmentedNoduleLabel", ",", "Measure", "]", "=", "DRM", "(", "self", ")", "\n", "return", "BestCost", ",", "FeatureMatrix", ",", "Size", ",", "Slice", ",", "SliceM", ",", "MaxIt", ",", "SI", ",", "GT3D", ",", "ImageM", ",", "SegmentedNoduleLabel", ",", "Measure", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.Segmentation_Function.rep": [[100, 104], ["RR"], "methods", ["None"], ["", "def", "rep", "(", "BestCost", ",", "FeatureMatrix", ",", "Size", ",", "Slice", ",", "SliceM", ",", "MaxIt", ",", "SI", ",", "GT3D", ",", "ImageM", ",", "SegmentedNoduleLabel", ",", "Measure", ",", "self", ")", ":", "\n", "\n", "        ", "from", "ResultRep1", "import", "RR", "\n", "RR", "(", "BestCost", ",", "FeatureMatrix", ",", "Size", ",", "Slice", ",", "SliceM", ",", "MaxIt", ",", "SI", ",", "GT3D", ",", "ImageM", ",", "SegmentedNoduleLabel", ",", "Measure", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.__init__": [[110, 216], ["create_model.load_model", "GUI_guided_segmentation.NoduleSegmentation.master.title", "tkinter.Button", "GUI_guided_segmentation.NoduleSegmentation.browse_button.grid", "GUI_guided_segmentation.NoduleSegmentation.browse_button.config", "tkinter.Button", "GUI_guided_segmentation.NoduleSegmentation.segmentation_button.grid", "GUI_guided_segmentation.NoduleSegmentation.segmentation_button.config", "tkinter.Button", "GUI_guided_segmentation.NoduleSegmentation.correction_button.grid", "GUI_guided_segmentation.NoduleSegmentation.correction_button.config", "tkinter.StringVar", "GUI_guided_segmentation.NoduleSegmentation.label_text1.set", "tkinter.Label", "GUI_guided_segmentation.NoduleSegmentation.label1.grid", "tkinter.StringVar", "GUI_guided_segmentation.NoduleSegmentation.label_text2.set", "tkinter.Label", "GUI_guided_segmentation.NoduleSegmentation.label2.grid", "tkinter.StringVar", "GUI_guided_segmentation.NoduleSegmentation.label_text3.set", "tkinter.Label", "GUI_guided_segmentation.NoduleSegmentation.label3.grid", "tkinter.Label", "GUI_guided_segmentation.NoduleSegmentation.label_author.grid", "GUI_guided_segmentation.NoduleSegmentation.__ititFrames__"], "methods", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.create_model.load_model", "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.__ititFrames__"], ["    ", "def", "__init__", "(", "self", ",", "master", ")", ":", "\n", "\n", "# Calls the constructor for the parent class.", "\n", "        ", "self", ".", "master", "=", "master", "\n", "\n", "\n", "self", ".", "model", "=", "load_model", "(", ")", "\n", "\n", "self", ".", "colors", "=", "[", "(", "253", "/", "255", ",", "174", "/", "255", ",", "97", "/", "255", ")", ",", "(", "215", "/", "255", ",", "25", "/", "255", ",", "28", "/", "255", ")", ",", "(", "0", ",", "168", "/", "255", ",", "188", "/", "255", ")", ",", "(", "197", "/", "255", ",", "0", ",", "188", "/", "255", ")", "]", "\n", "\n", "\n", "self", ".", "w", "=", "420", "\n", "self", ".", "h", "=", "420", "\n", "self", ".", "z", "=", "32", "\n", "\n", "#set up the title of the window", "\n", "self", ".", "master", ".", "title", "(", "\"iW-Net\"", ")", "\n", "\n", "#self.master.configure(bg=\"black\")  ", "\n", "# get screen width and height", "\n", "#        ws = self.master.winfo_screenwidth() # width of the screen", "\n", "#        hs = self.master.winfo_screenheight() # height of the screen", "\n", "#        self.master.geometry('%dx%d+%d+%d' % (ws, hs, 0, 0))", "\n", "#self.master.geometry('+205+15')", "\n", "\n", "\n", "#        self.data_path = \"\"   ", "\n", "#        self.message = \"Path to file\"", "\n", "#        self.label_text = StringVar()", "\n", "#        self.label_text.set(self.message)", "\n", "#        self.label = Label(self.master, textvariable=self.label_text, bg=\"white\")", "\n", "#        self.label.grid(row=0, column=0, columnspan=1, sticky=(N, E, W), pady=5, padx=5)", "\n", "\n", "\n", "#self.error_message = \"Select a .npy containing a nodule\"", "\n", "#self.label_text_error = tk.StringVar()", "\n", "#self.label_text_error.set(self.error_message)", "\n", "#self.label_error = tk.Label(self.master, textvariable=self.label_text_error,justify='left',anchor='w')", "\n", "#self.label_error.grid(row=0, column=1, columnspan=1, sticky=(tk.N, tk.E, tk.W), pady=5, padx=0)", "\n", "\n", "\n", "#text field", "\n", "#vcmd = self.master.register(self.validate) # we have to wrap the command        ", "\n", "#self.entry = tk.Entry(self.master, validate=\"key\", validatecommand=(vcmd, '%P'))", "\n", "#self.entry.grid(row=0, column=0, columnspan=2, sticky=(tk.N, tk.E, tk.W), pady=5, padx=5)", "\n", "\n", "\n", "self", ".", "browse_button", "=", "tk", ".", "Button", "(", "self", ".", "master", ",", "text", "=", "\"Browse\"", ",", "command", "=", "self", ".", "browse", ",", "state", "=", "tk", ".", "NORMAL", ")", "\n", "self", ".", "browse_button", ".", "grid", "(", "row", "=", "0", ",", "column", "=", "0", ",", "sticky", "=", "(", "tk", ".", "N", ",", "tk", ".", "W", ")", ")", "\n", "self", ".", "browse_button", ".", "config", "(", "width", "=", "20", ")", "\n", "\n", "\n", "self", ".", "segmentation_button", "=", "tk", ".", "Button", "(", "self", ".", "master", ",", "text", "=", "\"Segment\"", ",", "command", "=", "self", ".", "segmentation", ",", "state", "=", "tk", ".", "DISABLED", ")", "\n", "self", ".", "segmentation_button", ".", "grid", "(", "row", "=", "0", ",", "column", "=", "3", ",", "sticky", "=", "(", "tk", ".", "N", ",", "tk", ".", "W", ")", ")", "\n", "self", ".", "segmentation_button", ".", "config", "(", "width", "=", "20", ")", "\n", "\n", "\n", "self", ".", "correction_button", "=", "tk", ".", "Button", "(", "self", ".", "master", ",", "text", "=", "\"Select points\"", ",", "command", "=", "self", ".", "select_points", ",", "state", "=", "tk", ".", "DISABLED", ")", "\n", "self", ".", "correction_button", ".", "grid", "(", "row", "=", "0", ",", "column", "=", "6", ",", "sticky", "=", "(", "tk", ".", "N", ",", "tk", ".", "W", ")", ")", "\n", "self", ".", "correction_button", ".", "config", "(", "width", "=", "20", ")", "\n", "\n", "\n", "#        self.correction_button.config()", "\n", "\n", "\n", "#self.reset_button = tk.Button(self.master, text=\"Reset\", command=self.reset, state=tk.DISABLED)", "\n", "#self.reset_button.grid(row=10, column=0, sticky=(tk.N, tk.E), pady=5, padx=5)", "\n", "#self.reset_button.config(width=20)", "\n", "\n", "\n", "#self.exit_button = tk.Button(self.master, text=\"Exit\", command=self.exit, state=tk.NORMAL)", "\n", "#self.exit_button.grid(row=11, column=5, sticky=(tk.S, tk.E), pady=5, padx=5) ", "\n", "#self.exit_button.config(width=20)", "\n", "\n", "\n", "#INITIAL IMAGE", "\n", "self", ".", "message1", "=", "\"Central slice of the nodule (axial view)\"", "\n", "self", ".", "label_text1", "=", "tk", ".", "StringVar", "(", ")", "\n", "self", ".", "label_text1", ".", "set", "(", "self", ".", "message1", ")", "\n", "self", ".", "label1", "=", "tk", ".", "Label", "(", "self", ".", "master", ",", "textvariable", "=", "self", ".", "label_text1", ",", "anchor", "=", "'w'", ")", "\n", "self", ".", "label1", ".", "grid", "(", "row", "=", "0", ",", "column", "=", "2", ",", "columnspan", "=", "1", ",", "sticky", "=", "(", "tk", ".", "N", ",", "tk", ".", "E", ",", "tk", ".", "W", ")", ",", "pady", "=", "5", ",", "padx", "=", "0", ")", "\n", "\n", "#INITIAL SEGMENTATION", "\n", "self", ".", "message2", "=", "\"Initial segmentation\"", "\n", "self", ".", "label_text2", "=", "tk", ".", "StringVar", "(", ")", "\n", "self", ".", "label_text2", ".", "set", "(", "self", ".", "message2", ")", "\n", "self", ".", "label2", "=", "tk", ".", "Label", "(", "self", ".", "master", ",", "textvariable", "=", "self", ".", "label_text2", ",", "anchor", "=", "'w'", ")", "\n", "self", ".", "label2", ".", "grid", "(", "row", "=", "0", ",", "column", "=", "5", ",", "columnspan", "=", "1", ",", "sticky", "=", "(", "tk", ".", "N", ",", "tk", ".", "E", ",", "tk", ".", "W", ")", ",", "pady", "=", "5", ",", "padx", "=", "0", ")", "\n", "#holder to place the imshow", "\n", "\n", "\n", "\n", "\n", "#CORRECTED SEGMENTATION", "\n", "self", ".", "message3", "=", "\"Corrected segmentation\"", "\n", "self", ".", "label_text3", "=", "tk", ".", "StringVar", "(", ")", "\n", "self", ".", "label_text3", ".", "set", "(", "self", ".", "message3", ")", "\n", "self", ".", "label3", "=", "tk", ".", "Label", "(", "self", ".", "master", ",", "textvariable", "=", "self", ".", "label_text3", ",", "anchor", "=", "'w'", ")", "\n", "self", ".", "label3", ".", "grid", "(", "row", "=", "0", ",", "column", "=", "8", ",", "columnspan", "=", "1", ",", "sticky", "=", "(", "tk", ".", "N", ",", "tk", ".", "E", ",", "tk", ".", "W", ")", ",", "pady", "=", "5", ",", "padx", "=", "0", ")", "\n", "\n", "self", ".", "label_author", "=", "tk", ".", "Label", "(", "self", ".", "master", ",", "text", "=", "'iW-Net: an automatic and minimalistic interactive lung nodule segmentation deep network. 2018. G. Aresta et al.'", ",", "fg", "=", "'gray'", ",", "anchor", "=", "'w'", ")", "\n", "self", ".", "label_author", ".", "grid", "(", "row", "=", "10", ",", "column", "=", "0", ",", "columnspan", "=", "5", ",", "sticky", "=", "(", "tk", ".", "N", ",", "tk", ".", "E", ",", "tk", ".", "W", ")", ",", "pady", "=", "5", ",", "padx", "=", "0", ")", "\n", "\n", "#holder to place the imshow", "\n", "\n", "self", ".", "__ititFrames__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.validate": [[220, 303], ["print", "GUI_guided_segmentation.NoduleSegmentation.__ititFrames__", "GUI_guided_segmentation.preprocess", "matplotlib.figure.Figure", "matplotlib.figure.Figure.add_subplot().imshow", "GUI_guided_segmentation.NoduleSegmentation.draw_figure", "len", "len", "matplotlib.figure.Figure.add_subplot"], "methods", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.__ititFrames__", "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.preprocess", "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.draw_figure"], ["", "def", "validate", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "print", "(", "\"Inside validate\"", ")", "\n", "\n", "if", "not", "path", ":", "# the field is being cleared", "\n", "\n", "            ", "\"\"\"\n            self.data_path = \"\"\n            self.message = \"Enter the path of the nodule to be segmented\"\n            self.label_text.set(self.message)\n            self.label.grid(row=0, column=0, columnspan=2, sticky=(N, E, W), pady=5, padx=5)\n            \"\"\"", "\n", "\n", "\n", "return", "True", "\n", "\n", "", "try", ":", "\n", "\n", "\n", "\n", "            ", "FileExt", "=", "path", "[", "(", "len", "(", "path", ")", "-", "4", ")", ":", "len", "(", "path", ")", "]", "\n", "\n", "if", "path", "==", "\"\"", "or", "FileExt", "!=", "\".npy\"", ":", "\n", "                ", "\"\"\"\n                self.message = \"Wrong Path!\"\n                self.label_text.set(self.message)\n                self.label.grid(row=0, column=0, columnspan=2, sticky=(N, E, W), pady=5, padx=5)\n                self.data_path = \"\"\n                \"\"\"", "\n", "#self.entry.delete(0, tk.END)", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "\"\"\"\n                self.data_path = path \n                self.message = \"Correct Path!\"\n                self.label_text.set(self.message) \n                self.label.grid(row=0, column=0, columnspan=2, sticky=(N, E, W), pady=5, padx=5)\n                \"\"\"", "\n", "\n", "self", ".", "__ititFrames__", "(", ")", "\n", "self", ".", "nodule", "=", "preprocess", "(", "path", ")", "\n", "self", ".", "view", "=", "self", ".", "nodule", "[", "0", ",", ":", ",", ":", ",", "self", ".", "z", ",", "0", "]", "\n", "fig", "=", "Figure", "(", "figsize", "=", "(", "4", ",", "4", ")", ",", "dpi", "=", "100", ")", "\n", "fig", ".", "add_subplot", "(", "111", ")", ".", "imshow", "(", "self", ".", "view", ",", "cmap", "=", "'gray'", ")", "\n", "self", ".", "draw_figure", "(", "self", ".", "frame1", ",", "fig", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\"\"\"\n                ImageM1 = resize(view, (385, 500))\n                ImageM2 = resize(view, (385, 500))\n                ImageM3 = resize(view, (385, 500))\n                \n                pyplot.figure(1,figsize=(3, 3)), pyplot.subplot(3,1,2), pyplot.xticks([]), pyplot.yticks([])\n                pyplot.imshow( ImageM1 , cmap = 'gray' )\n    \n                pyplot.figure(1,figsize=(3, 3)), pyplot.subplot(3,1,3), pyplot.xticks([]), pyplot.yticks([])\n                pyplot.imshow( ImageM2, cmap = 'gray' )\n    \n                pyplot.figure(1,figsize=(3, 3)), pyplot.subplot(3,1,1), pyplot.xticks([]), pyplot.yticks([])\n                pyplot.imshow( ImageM3, cmap = 'gray' )\n                \n                pyplot.savefig( ResultsPath + 'Figures.png', format='png', dpi=300 ) \n                pyplot.close() \n                \"\"\"", "\n", "\"\"\" \n                Timage = Image.open(ResultsPath + 'Figures.png')\n                Timage = Timage.resize([385, 500], Image.NEAREST)\n                self.image1 = ImageTk.PhotoImage(Timage)\n                self.label6 = tk.Label(self.frame1, image=self.image1)   \n                self.label6.grid(row=7, column=0, sticky=(N, E, W)) \n                \"\"\"", "\n", "\n", "", "return", "True", "\n", "\n", "", "except", "ValueError", ":", "\n", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.OpenFile": [[305, 330], ["print", "tkinter.filedialog.askopenfilename", "GUI_guided_segmentation.NoduleSegmentation.validate", "open", "UseFile.read"], "methods", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.validate"], ["", "", "def", "OpenFile", "(", "self", ")", ":", "\n", "            ", "print", "(", "'Inside OpenFile'", ")", "\n", "name", "=", "askopenfilename", "(", "\n", "filetypes", "=", "(", "(", "\"Python File\"", ",", "\"*.npy\"", ")", ",", "(", "\"All Files\"", ",", "\"*.npy\"", ")", ")", ",", "\n", "title", "=", "\"Choose a file.\"", "\n", ")", "\n", "\n", "#Using try in case user types in unknown file or closes without choosing a file.", "\n", "try", ":", "\n", "\n", "                ", "with", "open", "(", "name", ",", "'rb'", ")", "as", "UseFile", ":", "\n", "                    ", "self", ".", "message", "=", "UseFile", ".", "read", "(", ")", "\n", "#self.label_text.set(self.message)                    ", "\n", "#self.label.grid(row=0, column=0, columnspan=2, sticky=(tk.N, tk.E, tk.W), pady=5, padx=5)", "\n", "#self.entry.insert(0, str(name))", "\n", "\n", "", "self", ".", "validate", "(", "name", ")", "\n", "\n", "", "except", ":", "\n", "                ", "\"\"\"\n                self.message = \"Wrong Path!\"\n                self.label_text.set(self.message)\n                self.label.grid(row=0, column=0, columnspan=2, sticky=(N, E, W), pady=5, padx=5)\n                self.data_path = \"\"  \n                \"\"\"", "\n", "#self.entry.delete(0, tk.END)", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.browse": [[334, 356], ["print", "GUI_guided_segmentation.NoduleSegmentation.OpenFile", "GUI_guided_segmentation.NoduleSegmentation.browse_button.configure", "GUI_guided_segmentation.NoduleSegmentation.segmentation_button.configure"], "methods", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.OpenFile"], ["", "", "def", "browse", "(", "self", ")", ":", "\n", "\n", "#self.message = \"Enter the path of the nodule to be segmented:\"", "\n", "#self.label_text.set(self.message)", "\n", "#self.label.grid(row=0, column=0, columnspan=2, sticky=(N, E, W), pady=5, padx=5)", "\n", "\n", "#self.data_path = \"\"", "\n", "\n", "#self.entry.delete(0, tk.END)", "\n", "\n", "        ", "\"\"\"\n        self.content1 = tk.Frame(self.master, padding=(3,3,12,12))\n        self.frame1 = tk.Frame(self.content1, borderwidth=10, relief=\"sunken\", width=410, height=535)  \n        self.content1.grid(row=7, column=0, sticky=(tk.N,tk.E, tk.W))\n        self.frame1.grid(row=7, column=0, columnspan=3, rowspan=2, sticky=(tk.N, tk.E, tk.W)) \n        \"\"\"", "\n", "print", "(", "'Inside browse'", ")", "\n", "\n", "self", ".", "OpenFile", "(", ")", "\n", "\n", "self", ".", "browse_button", ".", "configure", "(", "state", "=", "tk", ".", "NORMAL", ")", "\n", "self", ".", "segmentation_button", ".", "configure", "(", "state", "=", "tk", ".", "NORMAL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.segmentation": [[358, 381], ["GUI_guided_segmentation.NoduleSegmentation.model.predict", "GUI_guided_segmentation.filterSegmentation", "GUI_guided_segmentation.NoduleSegmentation.segmentation_button.configure", "GUI_guided_segmentation.createOverlay", "matplotlib.figure.Figure", "matplotlib.figure.Figure.add_subplot().imshow", "GUI_guided_segmentation.NoduleSegmentation.draw_figure", "GUI_guided_segmentation.NoduleSegmentation.correction_button.configure", "matplotlib.figure.Figure", "GUI_guided_segmentation.NoduleSegmentation.figc.add_subplot", "GUI_guided_segmentation.NoduleSegmentation.ax3.imshow", "matplotlib.backends.backend_tkagg.FigureCanvasTkAgg", "GUI_guided_segmentation.NoduleSegmentation.canvas3.draw", "GUI_guided_segmentation.NoduleSegmentation.canvas3.get_tk_widget().pack", "numpy.zeros", "matplotlib.figure.Figure.add_subplot", "GUI_guided_segmentation.NoduleSegmentation.canvas3.get_tk_widget"], "methods", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.filterSegmentation", "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.createOverlay", "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.draw_figure"], ["", "def", "segmentation", "(", "self", ")", ":", "\n", "\n", "        ", "pred", "=", "self", ".", "model", ".", "predict", "(", "[", "self", ".", "nodule", ",", "np", ".", "zeros", "(", "self", ".", "nodule", ".", "shape", ")", "]", ")", "\n", "\n", "self", ".", "initial_segmentation", "=", "pred", "[", "-", "1", "]", ">=", "0.5", "\n", "\n", "self", ".", "initial_segmentation", "=", "filterSegmentation", "(", "self", ".", "initial_segmentation", ")", "\n", "self", ".", "segmentation_button", ".", "configure", "(", "state", "=", "tk", ".", "DISABLED", ")", "\n", "\n", "\n", "self", ".", "initial_overlay", "=", "createOverlay", "(", "self", ".", "view", ",", "self", ".", "initial_segmentation", "[", "0", ",", ":", ",", ":", ",", "self", ".", "z", ",", "0", "]", ",", "color", "=", "self", ".", "colors", "[", "0", "]", ")", "\n", "fig", "=", "Figure", "(", "figsize", "=", "(", "4", ",", "4", ")", ",", "dpi", "=", "100", ")", "\n", "fig", ".", "add_subplot", "(", "111", ")", ".", "imshow", "(", "self", ".", "initial_overlay", ")", "\n", "self", ".", "draw_figure", "(", "self", ".", "frame2", ",", "fig", ")", "\n", "self", ".", "correction_button", ".", "configure", "(", "state", "=", "tk", ".", "NORMAL", ")", "\n", "\n", "\n", "self", ".", "figc", "=", "Figure", "(", "figsize", "=", "(", "4", ",", "4", ")", ",", "dpi", "=", "100", ")", "\n", "self", ".", "ax3", "=", "self", ".", "figc", ".", "add_subplot", "(", "111", ")", "\n", "self", ".", "imshow3", "=", "self", ".", "ax3", ".", "imshow", "(", "self", ".", "view", ",", "cmap", "=", "'gray'", ")", "\n", "self", ".", "canvas3", "=", "FigureCanvasTkAgg", "(", "self", ".", "figc", ",", "master", "=", "self", ".", "frame3", ")", "# A tk.DrawingArea.", "\n", "self", ".", "canvas3", ".", "draw", "(", ")", "\n", "self", ".", "canvas3", ".", "get_tk_widget", "(", ")", ".", "pack", "(", "side", "=", "tk", ".", "TOP", ",", "fill", "=", "tk", ".", "BOTH", ",", "expand", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.select_points": [[385, 410], ["GUI_guided_segmentation.NoduleSegmentation.imshow3.set_data", "GUI_guided_segmentation.NoduleSegmentation.canvas3.draw", "GUI_guided_segmentation.NoduleSegmentation.canvas3.get_tk_widget().pack", "numpy.zeros", "numpy.copy", "GUI_guided_segmentation.NoduleSegmentation.figc.canvas.callbacks.connect", "GUI_guided_segmentation.NoduleSegmentation.canvas3.get_tk_widget"], "methods", ["None"], ["", "def", "select_points", "(", "self", ")", ":", "\n", "\n", "\n", "        ", "self", ".", "imshow3", ".", "set_data", "(", "self", ".", "view", ")", "\n", "self", ".", "canvas3", ".", "draw", "(", ")", "\n", "self", ".", "canvas3", ".", "get_tk_widget", "(", ")", ".", "pack", "(", "side", "=", "tk", ".", "TOP", ",", "fill", "=", "tk", ".", "BOTH", ",", "expand", "=", "1", ")", "\n", "\n", "self", ".", "clicked_points", "=", "[", "]", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "self", ".", "point_mask", "=", "np", ".", "zeros", "(", "self", ".", "nodule", "[", "0", ",", ":", ",", ":", ",", "self", ".", "z", ",", "0", "]", ".", "shape", ")", "\n", "\n", "\n", "self", ".", "point_marks", "=", "np", ".", "copy", "(", "self", ".", "view", ")", "\n", "\n", "\n", "\n", "self", ".", "clicked", "=", "False", "\n", "\n", "\n", "self", ".", "cid", "=", "self", ".", "figc", ".", "canvas", ".", "callbacks", ".", "connect", "(", "'button_press_event'", ",", "self", ".", "on_click", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.correct_segmentation": [[412, 437], ["utils.attractionField3D", "numpy.expand_dims", "numpy.expand_dims", "GUI_guided_segmentation.NoduleSegmentation.model.predict", "GUI_guided_segmentation.filterSegmentation", "GUI_guided_segmentation.createOverlay", "GUI_guided_segmentation.createOverlay", "GUI_guided_segmentation.NoduleSegmentation.imshow3.set_data", "GUI_guided_segmentation.NoduleSegmentation.canvas3.draw", "GUI_guided_segmentation.NoduleSegmentation.canvas3.get_tk_widget().pack", "GUI_guided_segmentation.NoduleSegmentation.correction_button.configure", "GUI_guided_segmentation.NoduleSegmentation.canvas3.get_tk_widget"], "methods", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.attractionField3D", "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.filterSegmentation", "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.createOverlay", "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.createOverlay"], ["", "def", "correct_segmentation", "(", "self", ")", ":", "\n", "\n", "\n", "\n", "#p1 = [int(self.p1c.get()),int(self.p1r.get()),self.z]", "\n", "#p2 = [int(self.p2c.get()),int(self.p2r.get()),self.z]", "\n", "\n", "        ", "_", ",", "_", ",", "_", ",", "gravmap", "=", "attractionField3D", "(", "[", "self", ".", "clicked_points", "[", "0", "]", "]", ",", "[", "self", ".", "clicked_points", "[", "1", "]", "]", ",", "weight_mode", "=", "'constant'", ",", "p", "=", "0.4376", ")", "\n", "gravmap", "=", "np", ".", "expand_dims", "(", "gravmap", ",", "axis", "=", "0", ")", "\n", "gravmap", "=", "np", ".", "expand_dims", "(", "gravmap", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "pred", "=", "self", ".", "model", ".", "predict", "(", "[", "self", ".", "nodule", ",", "gravmap", "]", ")", "\n", "self", ".", "corrected_segmentation", "=", "pred", "[", "0", "]", ">=", "0.5", "\n", "self", ".", "corrected_segmentation", "=", "filterSegmentation", "(", "self", ".", "corrected_segmentation", ")", "\n", "self", ".", "corrected_overlay", "=", "createOverlay", "(", "self", ".", "view", ",", "self", ".", "corrected_segmentation", "[", "0", ",", ":", ",", ":", ",", "self", ".", "z", ",", "0", "]", ",", "color", "=", "self", ".", "colors", "[", "1", "]", ")", "\n", "self", ".", "corrected_overlay", "=", "createOverlay", "(", "self", ".", "corrected_overlay", ",", "self", ".", "point_mask", ",", "color", "=", "(", "171", "/", "255", ",", "221", "/", "255", ",", "164", "/", "255", ")", ",", "contour", "=", "False", ")", "\n", "\n", "\n", "self", ".", "imshow3", ".", "set_data", "(", "self", ".", "corrected_overlay", ")", "\n", "self", ".", "canvas3", ".", "draw", "(", ")", "\n", "self", ".", "canvas3", ".", "get_tk_widget", "(", ")", ".", "pack", "(", "side", "=", "tk", ".", "TOP", ",", "fill", "=", "tk", ".", "BOTH", ",", "expand", "=", "1", ")", "\n", "\n", "\n", "self", ".", "correction_button", ".", "configure", "(", "state", "=", "tk", ".", "NORMAL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.__ititFrames__": [[438, 445], ["tkinter.Frame", "GUI_guided_segmentation.NoduleSegmentation.frame1.grid", "tkinter.Frame", "GUI_guided_segmentation.NoduleSegmentation.frame2.grid", "tkinter.Frame", "GUI_guided_segmentation.NoduleSegmentation.frame3.grid"], "methods", ["None"], ["", "def", "__ititFrames__", "(", "self", ")", ":", "\n", "        ", "self", ".", "frame1", "=", "tk", ".", "Frame", "(", "self", ".", "master", ",", "borderwidth", "=", "10", ",", "relief", "=", "\"sunken\"", ",", "width", "=", "self", ".", "w", ",", "height", "=", "self", ".", "h", ")", "\n", "self", ".", "frame1", ".", "grid", "(", "row", "=", "7", ",", "column", "=", "0", ",", "columnspan", "=", "3", ",", "rowspan", "=", "2", ",", "sticky", "=", "(", "tk", ".", "N", ",", "tk", ".", "E", ",", "tk", ".", "W", ")", ")", "\n", "self", ".", "frame2", "=", "tk", ".", "Frame", "(", "self", ".", "master", ",", "borderwidth", "=", "10", ",", "relief", "=", "\"sunken\"", ",", "width", "=", "self", ".", "w", ",", "height", "=", "self", ".", "h", ")", "\n", "self", ".", "frame2", ".", "grid", "(", "row", "=", "7", ",", "column", "=", "3", ",", "columnspan", "=", "3", ",", "rowspan", "=", "2", ",", "sticky", "=", "(", "tk", ".", "N", ",", "tk", ".", "E", ",", "tk", ".", "W", ")", ")", "\n", "self", ".", "frame3", "=", "tk", ".", "Frame", "(", "self", ".", "master", ",", "borderwidth", "=", "10", ",", "relief", "=", "\"sunken\"", ",", "width", "=", "self", ".", "w", ",", "height", "=", "self", ".", "h", ")", "\n", "self", ".", "frame3", ".", "grid", "(", "row", "=", "7", ",", "column", "=", "6", ",", "columnspan", "=", "3", ",", "rowspan", "=", "2", ",", "sticky", "=", "(", "tk", ".", "N", ",", "tk", ".", "E", ",", "tk", ".", "W", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.draw_figure": [[446, 455], ["matplotlib.backends.backend_tkagg.FigureCanvasTkAgg", "matplotlib.backends.backend_tkagg.FigureCanvasTkAgg.draw", "matplotlib.backends.backend_tkagg.FigureCanvasTkAgg.get_tk_widget().pack", "matplotlib.backends.backend_tkagg.FigureCanvasTkAgg.get_tk_widget"], "methods", ["None"], ["", "def", "draw_figure", "(", "self", ",", "master", ",", "fig", ",", "click", "=", "None", ")", ":", "\n", "\n", "\n", "        ", "canvas", "=", "FigureCanvasTkAgg", "(", "fig", ",", "master", "=", "master", ")", "# A tk.DrawingArea.", "\n", "\n", "\n", "canvas", ".", "draw", "(", ")", "\n", "\n", "canvas", ".", "get_tk_widget", "(", ")", ".", "pack", "(", "side", "=", "tk", ".", "TOP", ",", "fill", "=", "tk", ".", "BOTH", ",", "expand", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.exit": [[462, 466], ["GUI_guided_segmentation.NoduleSegmentation.master.destroy", "sys.exit"], "methods", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.exit"], ["", "def", "exit", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "master", ".", "destroy", "(", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "#https://stackoverflow.com/questions/27565939/getting-the-location-of-a-mouse-click-in-matplotlib-using-tkinter ", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.on_click": [[467, 497], ["GUI_guided_segmentation.NoduleSegmentation.clicked_points.append", "print", "GUI_guided_segmentation.createOverlay", "GUI_guided_segmentation.NoduleSegmentation.imshow3.set_data", "GUI_guided_segmentation.NoduleSegmentation.canvas3.draw", "GUI_guided_segmentation.NoduleSegmentation.canvas3.get_tk_widget().pack", "print", "len", "GUI_guided_segmentation.NoduleSegmentation.figc.canvas.callbacks.disconnect", "GUI_guided_segmentation.NoduleSegmentation.correction_button.configure", "GUI_guided_segmentation.NoduleSegmentation.correct_segmentation", "GUI_guided_segmentation.NoduleSegmentation.canvas3.get_tk_widget", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.createOverlay", "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.NoduleSegmentation.correct_segmentation"], ["", "def", "on_click", "(", "self", ",", "event", ")", ":", "\n", "        ", "if", "event", ".", "inaxes", "is", "not", "None", ":", "\n", "\n", "            ", "self", ".", "clicked_points", ".", "append", "(", "[", "event", ".", "xdata", ",", "event", ".", "ydata", ",", "self", ".", "z", "]", ")", "\n", "\n", "print", "(", "self", ".", "clicked_points", ")", "\n", "\n", "self", ".", "point_mask", "[", "int", "(", "self", ".", "clicked_points", "[", "-", "1", "]", "[", "1", "]", ")", "-", "1", ":", "int", "(", "self", ".", "clicked_points", "[", "-", "1", "]", "[", "1", "]", ")", "+", "1", ",", "\n", "int", "(", "self", ".", "clicked_points", "[", "-", "1", "]", "[", "0", "]", ")", "-", "1", ":", "int", "(", "self", ".", "clicked_points", "[", "-", "1", "]", "[", "0", "]", "+", "1", ")", "]", "=", "1", "\n", "self", ".", "point_marks", "=", "createOverlay", "(", "self", ".", "point_marks", ",", "self", ".", "point_mask", ",", "color", "=", "(", "171", "/", "255", ",", "221", "/", "255", ",", "164", "/", "255", ")", ",", "contour", "=", "False", ")", "\n", "\n", "\n", "\n", "#self.figc.add_subplot(111).imshow(self.point_marks)", "\n", "self", ".", "imshow3", ".", "set_data", "(", "self", ".", "point_marks", ")", "\n", "self", ".", "canvas3", ".", "draw", "(", ")", "\n", "self", ".", "canvas3", ".", "get_tk_widget", "(", ")", ".", "pack", "(", "side", "=", "tk", ".", "TOP", ",", "fill", "=", "tk", ".", "BOTH", ",", "expand", "=", "1", ")", "\n", "\n", "if", "len", "(", "self", ".", "clicked_points", ")", "==", "2", ":", "\n", "                ", "self", ".", "figc", ".", "canvas", ".", "callbacks", ".", "disconnect", "(", "self", ".", "cid", ")", "\n", "self", ".", "correction_button", ".", "configure", "(", "state", "=", "tk", ".", "NORMAL", ")", "\n", "self", ".", "correct_segmentation", "(", ")", "\n", "\n", "return", "\n", "\n", "\n", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Clicked ouside axes bounds but inside plot window'", ")", "\n", "", "self", ".", "clicked", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.filterSegmentation": [[33, 47], ["scipy.ndimage.measurements.label", "numpy.expand_dims", "numpy.ones", "range", "numpy.expand_dims", "numpy.sum"], "function", ["None"], ["def", "filterSegmentation", "(", "x", ")", ":", "\n", "    ", "lab", ",", "n_label", "=", "label", "(", "x", "[", "0", ",", ":", ",", ":", ",", ":", ",", "0", "]", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ",", "3", ")", ")", ")", "\n", "\n", "dim", "=", "0", "\n", "best_label", "=", "1", "\n", "\n", "if", "n_label", ">", "1", ":", "#keep the largest segmented object also", "\n", "        ", "for", "y", "in", "range", "(", "1", ",", "n_label", "+", "1", ")", ":", "\n", "            ", "temp", "=", "lab", "==", "y", "\n", "temp_dim", "=", "np", ".", "sum", "(", "temp", ")", "\n", "if", "temp_dim", ">", "dim", ":", "\n", "                ", "dim", "=", "temp_dim", "\n", "best_label", "=", "y", "\n", "", "", "", "return", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "lab", "==", "best_label", ",", "axis", "=", "0", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.createOverlay": [[48, 69], ["range", "len", "numpy.expand_dims", "numpy.repeat", "skimage.segmentation.find_boundaries", "numpy.multiply", "len", "ValueError", "ValueError", "numpy.logical_not"], "function", ["None"], ["", "def", "createOverlay", "(", "im", ",", "mask", ",", "color", "=", "(", "0", ",", "1", ",", "0", ")", ",", "contour", "=", "True", ")", ":", "\n", "    ", "if", "len", "(", "im", ".", "shape", ")", "==", "2", ":", "\n", "        ", "im", "=", "np", ".", "expand_dims", "(", "im", ",", "axis", "=", "-", "1", ")", "\n", "im", "=", "np", ".", "repeat", "(", "im", ",", "3", ",", "axis", "=", "-", "1", ")", "\n", "", "elif", "len", "(", "im", ".", "shape", ")", "==", "3", ":", "\n", "        ", "if", "im", ".", "shape", "[", "-", "1", "]", "!=", "3", ":", "\n", "            ", "ValueError", "(", "'Unexpected image format. I was expecting either (X,X) or (X,X,3), instead found'", ",", "im", ".", "shape", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "ValueError", "(", "'Unexpected image format. I was expecting either (X,X) or (X,X,3), instead found'", ",", "im", ".", "shape", ")", "\n", "\n", "", "if", "contour", ":", "\n", "        ", "bw", "=", "find_boundaries", "(", "mask", ",", "mode", "=", "'inner'", ")", "#thick", "\n", "", "else", ":", "\n", "        ", "bw", "=", "mask", "\n", "", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "im_temp", "=", "im", "[", ":", ",", ":", ",", "i", "]", "\n", "im_temp", "=", "np", ".", "multiply", "(", "im_temp", ",", "np", ".", "logical_not", "(", "bw", ")", "*", "1", ")", "\n", "im_temp", "+=", "bw", "*", "color", "[", "i", "]", "\n", "im", "[", ":", ",", ":", ",", "i", "]", "=", "im_temp", "\n", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.GUI_guided_segmentation.preprocess": [[70, 83], ["numpy.load", "scipy.ndimage.interpolation.zoom", "numpy.expand_dims", "numpy.expand_dims", "utils.normFunc"], "function", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.normFunc"], ["", "def", "preprocess", "(", "image", ",", "order", "=", "2", ",", "norm", "=", "True", ")", ":", "\n", "    ", "image", "=", "np", ".", "load", "(", "image", ")", "\n", "target_size", "=", "(", "64", ",", "64", ",", "64", ")", "\n", "if", "norm", ":", "image", "=", "normFunc", "(", "image", ")", "\n", "h2", ",", "w2", ",", "z2", "=", "image", ".", "shape", "\n", "image", "=", "zoom", "(", "image", ",", "(", "target_size", "[", "0", "]", "/", "h2", ",", "\n", "target_size", "[", "1", "]", "/", "w2", ",", "\n", "target_size", "[", "2", "]", "/", "z2", ")", ",", "\n", "order", "=", "order", ")", "\n", "\n", "image", "=", "np", ".", "expand_dims", "(", "image", ",", "axis", "=", "0", ")", "\n", "image", "=", "np", ".", "expand_dims", "(", "image", ",", "axis", "=", "-", "1", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.IoU": [[9, 15], ["numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_or"], "function", ["None"], ["def", "IoU", "(", "a1", ",", "a2", ")", ":", "\n", "    ", "smooth", "=", "2e-12", "\n", "intersection", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "a1", "!=", "0", ",", "a2", "!=", "0", ")", ")", "\n", "union", "=", "np", ".", "sum", "(", "np", ".", "logical_or", "(", "a1", "!=", "0", ",", "a2", "!=", "0", ")", ")", "\n", "\n", "return", "intersection", "/", "(", "union", "+", "smooth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.sortByDistance": [[18, 38], ["numpy.array", "new_point_list.append", "numpy.delete", "range", "numpy.array", "len", "scipy.spatial.KDTree().query", "new_point_list.append", "numpy.delete", "scipy.spatial.KDTree"], "function", ["None"], ["", "def", "sortByDistance", "(", "point_list", ")", ":", "\n", "\n", "    ", "point_list", "=", "np", ".", "array", "(", "point_list", ")", "\n", "\n", "\n", "new_point_list", "=", "[", "]", "\n", "\n", "new_point_list", ".", "append", "(", "point_list", "[", "0", ",", ":", "]", ")", "\n", "#remove that point from the point list", "\n", "point_list", "=", "np", ".", "delete", "(", "point_list", ",", "0", ",", "axis", "=", "0", ")", "\n", "\n", "for", "x", "in", "range", "(", "0", ",", "len", "(", "point_list", ")", ")", ":", "\n", "        ", "pt", "=", "new_point_list", "[", "-", "1", "]", "\n", "_", ",", "index", "=", "spatial", ".", "KDTree", "(", "point_list", ")", ".", "query", "(", "pt", ")", "\n", "new_point_list", ".", "append", "(", "point_list", "[", "index", ",", ":", "]", ")", "\n", "#remove that point from the point list", "\n", "point_list", "=", "np", ".", "delete", "(", "point_list", ",", "index", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "", "return", "np", ".", "array", "(", "new_point_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.sampleContour": [[40, 66], ["numpy.nonzero", "len", "numpy.linspace", "int", "utils.sortByDistance", "zip", "int", "numpy.repeat", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.sortByDistance"], ["", "def", "sampleContour", "(", "contour", ",", "nb_points", "=", "25", ")", ":", "\n", "\n", "    ", "loc", "=", "np", ".", "nonzero", "(", "contour", ")", "\n", "\n", "nb", "=", "len", "(", "loc", "[", "0", "]", ")", "#number of points of the boundary", "\n", "\n", "idx", "=", "np", ".", "linspace", "(", "0", ",", "nb", ",", "nb_points", ",", "endpoint", "=", "False", ")", "\n", "idx", "=", "[", "int", "(", "i", ")", "for", "i", "in", "idx", "]", "\n", "\n", "if", "nb", ">", "0", ":", "\n", "\n", "        ", "points", "=", "[", "[", "a", ",", "b", "]", "for", "a", ",", "b", "in", "zip", "(", "loc", "[", "0", "]", ",", "loc", "[", "1", "]", ")", "]", "\n", "points", "=", "sortByDistance", "(", "points", ")", "\n", "if", "nb", "==", "nb_points", ":", "\n", "            ", "return", "points", "\n", "", "elif", "nb", "<", "nb_points", ":", "\n", "#add redudant points", "\n", "            ", "diff", "=", "int", "(", "np", ".", "ceil", "(", "nb_points", "/", "nb", ")", ")", "\n", "points", "=", "np", ".", "repeat", "(", "points", ",", "diff", "+", "1", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "", "points", "=", "points", "[", "idx", ",", "...", "]", "\n", "\n", "return", "points", "\n", "", "else", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.normalizeHU": [[69, 74], ["None"], "function", ["None"], ["", "", "def", "normalizeHU", "(", "npzarray", ",", "maxHU", "=", "400.", ",", "minHU", "=", "-", "1200.", ")", ":", "\n", "    ", "npzarray", "=", "(", "npzarray", "-", "minHU", ")", "/", "(", "maxHU", "-", "minHU", ")", "\n", "npzarray", "[", "npzarray", ">", "1", "]", "=", "1.", "\n", "npzarray", "[", "npzarray", "<", "0", "]", "=", "0.", "\n", "return", "npzarray", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.normFunc": [[75, 85], ["utils.normalizeHU", "numpy.float64", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.normalizeHU"], ["", "def", "normFunc", "(", "im", ")", ":", "\n", "\n", "    ", "if", "np", ".", "mean", "(", "im", ")", "<", "-", "300", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "im", "=", "im", "-", "1024", "\n", "\n", "", "im", "=", "normalizeHU", "(", "im", ")", "\n", "\n", "return", "np", ".", "float64", "(", "im", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.minmaxNorm": [[86, 88], ["numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "minmaxNorm", "(", "a", ")", ":", "\n", "    ", "return", "(", "a", "-", "np", ".", "min", "(", "a", ")", ")", "/", "(", "np", ".", "max", "(", "a", ")", "-", "np", ".", "min", "(", "a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.normFunc_simple": [[89, 101], ["numpy.float64", "numpy.mean"], "function", ["None"], ["", "def", "normFunc_simple", "(", "im", ")", ":", "\n", "\n", "    ", "if", "np", ".", "mean", "(", "im", ")", "<", "-", "300", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "im", "=", "im", "-", "1024", "\n", "\n", "\n", "", "im", "[", "im", "<", "-", "1200", "]", "=", "-", "1200", "\n", "im", "[", "im", ">", "400", "]", "=", "400", "\n", "\n", "return", "np", ".", "float64", "(", "im", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.findExtension": [[102, 113], ["os.listdir", "files.sort", "full_path.sort", "file.endswith", "os.path.join"], "function", ["None"], ["", "def", "findExtension", "(", "directory", ",", "extension", "=", "'.npy'", ")", ":", "\n", "    ", "files", "=", "[", "]", "\n", "full_path", "=", "[", "]", "\n", "for", "file", "in", "os", ".", "listdir", "(", "directory", ")", ":", "\n", "        ", "if", "file", ".", "endswith", "(", "extension", ")", ":", "\n", "            ", "files", "+=", "[", "file", "]", "\n", "full_path", "+=", "[", "os", ".", "path", ".", "join", "(", "directory", ",", "file", ")", "]", "\n", "\n", "", "", "files", ".", "sort", "(", ")", "\n", "full_path", ".", "sort", "(", ")", "\n", "return", "files", ",", "full_path", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.gravFields": [[114, 147], ["numpy.meshgrid", "numpy.zeros", "C.append", "numpy.arange", "numpy.arange", "numpy.arange", "utils.normFunc"], "function", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.normFunc"], ["", "def", "gravFields", "(", "centers", ",", "M", "=", "100", ",", "dim", "=", "64", ",", "normalization", "=", "None", ")", ":", "\n", "# centers is a list of tuples containing the coordinates of each dark hole center", "\n", "# the origin of the reference is the upper left corner", "\n", "#x are columns and y are rows", "\n", "\n", "    ", "C", "=", "[", "]", "\n", "\n", "for", "c", "in", "centers", ":", "\n", "        ", "C_", "=", "[", "cc", "-", "dim", "/", "2", "for", "cc", "in", "c", "]", "\n", "C", ".", "append", "(", "C_", ")", "\n", "\n", "\n", "", "amin", "=", "-", "dim", "/", "2", "\n", "amax", "=", "dim", "/", "2", "\n", "x", ",", "y", ",", "z", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "amin", ",", "amax", ")", ",", "np", ".", "arange", "(", "amin", ",", "amax", ")", ",", "np", ".", "arange", "(", "amin", ",", "amax", ")", ")", "\n", "\n", "out", "=", "np", ".", "zeros", "(", "(", "dim", ",", "dim", ",", "dim", ")", ")", "\n", "\n", "for", "c", "in", "C", ":", "\n", "        ", "x__", "=", "x", "-", "c", "[", "0", "]", "\n", "y__", "=", "y", "-", "c", "[", "1", "]", "\n", "z__", "=", "z", "-", "c", "[", "2", "]", "\n", "temp", "=", "x__", "**", "2", "+", "y__", "**", "2", "+", "z__", "**", "2", "\n", "temp", "+=", "M", "\n", "\n", "out", "+=", "1", "/", "(", "temp", "+", "2e-12", ")", "\n", "out", "+=", "temp", "\n", "\n", "\n", "", "if", "normalization", ":", "\n", "        ", "out", "=", "normFunc", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "", "def", "computeField3D", "(", "amin", ",", "amax", ",", "center", ",", "weight_mode", "=", "'constant'", ",", "p", "=", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.computeField3D": [[147, 185], ["numpy.meshgrid", "numpy.sqrt", "numpy.copy", "numpy.nan_to_num", "numpy.nan_to_num", "numpy.nan_to_num", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "computeField3D", "(", "amin", ",", "amax", ",", "center", ",", "weight_mode", "=", "'constant'", ",", "p", "=", "0", ")", ":", "\n", "\n", "    ", "x", ",", "y", ",", "z", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "amin", ",", "amax", ")", ",", "np", ".", "arange", "(", "amin", ",", "amax", ")", ",", "np", ".", "arange", "(", "amin", ",", "amax", ")", ")", "\n", "\n", "x_", "=", "x", "-", "center", "[", "0", "]", "\n", "y_", "=", "y", "-", "center", "[", "1", "]", "\n", "z_", "=", "z", "-", "center", "[", "2", "]", "\n", "norm", "=", "np", ".", "sqrt", "(", "(", "2", "*", "x_", ")", "**", "2", "+", "(", "2", "*", "y_", ")", "**", "2", "+", "(", "2", "*", "z_", ")", "**", "2", ")", "\n", "\n", "radius", "=", "np", ".", "copy", "(", "norm", ")", "\n", "\n", "x_", "/=", "norm", "\n", "y_", "/=", "norm", "\n", "z_", "/=", "norm", "\n", "\n", "\n", "if", "weight_mode", "==", "'linear'", ":", "\n", "        ", "x_", "/=", "radius", "\n", "y_", "/=", "radius", "\n", "z_", "/=", "radius", "\n", "", "if", "weight_mode", "==", "'sqrt'", ":", "\n", "        ", "x_", "/=", "np", ".", "sqrt", "(", "radius", ")", "\n", "y_", "/=", "np", ".", "sqrt", "(", "radius", ")", "\n", "z_", "/=", "np", ".", "sqrt", "(", "radius", ")", "\n", "", "if", "weight_mode", "==", "'free'", ":", "\n", "        ", "x_", "/=", "radius", "**", "p", "\n", "y_", "/=", "radius", "**", "p", "\n", "z_", "/=", "radius", "**", "p", "\n", "\n", "#", "\n", "#    plt.figure()", "\n", "#    plt.imshow(norm[...,32])    ", "\n", "\n", "", "x_", "=", "np", ".", "nan_to_num", "(", "x_", ")", "\n", "y_", "=", "np", ".", "nan_to_num", "(", "y_", ")", "\n", "z_", "=", "np", ".", "nan_to_num", "(", "z_", ")", "\n", "\n", "return", "x_", ",", "y_", ",", "z_", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.attractionField3D": [[186, 227], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "enumerate", "numpy.sqrt", "in_.append", "out_.append", "utils.computeField3D", "utils.computeField3D", "normalization", "numpy.max", "numpy.min", "enumerate", "enumerate"], "function", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.computeField3D", "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.computeField3D"], ["", "def", "attractionField3D", "(", "center_in", ",", "center_out", ",", "dim", "=", "(", "64", ",", "64", ",", "64", ")", ",", "normalization", "=", "minmaxNorm", ",", "weight_mode", "=", "'constant'", ",", "p", "=", "0", ")", ":", "\n", "# centers is a list of tuples containing the coordinates of each dark hole center", "\n", "# the origin of the reference is the upper left corner", "\n", "#x are columns and y are rows", "\n", "\n", "    ", "in_", "=", "[", "]", "\n", "out_", "=", "[", "]", "\n", "\n", "for", "c", "in", "center_in", ":", "\n", "        ", "in_", ".", "append", "(", "[", "cc", "-", "dim", "[", "i", "]", "/", "2", "for", "i", ",", "cc", "in", "enumerate", "(", "c", ")", "]", ")", "\n", "", "for", "c", "in", "center_out", ":", "\n", "        ", "out_", ".", "append", "(", "[", "cc", "-", "dim", "[", "i", "]", "/", "2", "for", "i", ",", "cc", "in", "enumerate", "(", "c", ")", "]", ")", "\n", "\n", "", "amin", "=", "-", "dim", "[", "0", "]", "/", "2", "\n", "amax", "=", "dim", "[", "1", "]", "/", "2", "\n", "\n", "\n", "out_x", "=", "np", ".", "zeros", "(", "dim", ")", "\n", "out_y", "=", "np", ".", "zeros", "(", "dim", ")", "\n", "out_z", "=", "np", ".", "zeros", "(", "dim", ")", "\n", "\n", "\n", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "in_", ")", ":", "\n", "        ", "x_", ",", "y_", ",", "z_", "=", "computeField3D", "(", "amin", ",", "amax", ",", "c", ",", "weight_mode", "=", "weight_mode", ",", "p", "=", "p", ")", "\n", "out_x", "+=", "x_", "\n", "out_y", "+=", "y_", "\n", "out_z", "+=", "z_", "\n", "", "for", "i", ",", "c", "in", "enumerate", "(", "out_", ")", ":", "\n", "        ", "x_", ",", "y_", ",", "z_", "=", "computeField3D", "(", "amin", ",", "amax", ",", "c", ",", "weight_mode", "=", "weight_mode", ",", "p", "=", "p", ")", "\n", "out_x", "+=", "x_", "*", "-", "1", "\n", "out_y", "+=", "y_", "*", "-", "1", "\n", "out_z", "+=", "z_", "*", "-", "1", "\n", "\n", "", "mag", "=", "np", ".", "sqrt", "(", "out_x", "**", "2", "+", "out_y", "**", "2", "+", "out_z", "**", "2", ")", "\n", "\n", "if", "normalization", "and", "np", ".", "max", "(", "mag", ")", "!=", "np", ".", "min", "(", "mag", ")", ":", "\n", "        ", "mag", "=", "normalization", "(", "mag", ")", "\n", "\n", "\n", "", "return", "out_x", ",", "out_y", ",", "out_z", ",", "mag", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.findDistantPoints2D": [[228, 255], ["numpy.nonzero", "numpy.array", "range", "skimage.segmentation.find_boundaries", "numpy.random.shuffle", "numpy.sqrt", "range", "len"], "function", ["None"], ["", "def", "findDistantPoints2D", "(", "seg", ",", "iterations", "=", "100", ",", "compute_boundary", "=", "True", ")", ":", "\n", "#go to that slice and get the boundary", "\n", "    ", "if", "compute_boundary", ":", "\n", "        ", "bound", "=", "find_boundaries", "(", "seg", "!=", "0", ",", "connectivity", "=", "2", ",", "mode", "=", "'inside'", ")", "\n", "bound", "=", "bound", "!=", "0", "\n", "", "else", ":", "\n", "        ", "bound", "=", "seg", "\n", "\n", "#collect a random point from the boundary", "\n", "", "bound_p", "=", "np", ".", "nonzero", "(", "bound", ")", "\n", "\n", "idx", "=", "np", ".", "array", "(", "[", "x", "for", "x", "in", "range", "(", "len", "(", "bound_p", "[", "0", "]", ")", ")", "]", ")", "\n", "\n", "dist", "=", "0", "\n", "best", "=", "[", "]", "\n", "\n", "\n", "for", "x", "in", "range", "(", "0", ",", "iterations", ")", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "p1", "=", "[", "bound_p", "[", "1", "]", "[", "idx", "[", "0", "]", "]", ",", "bound_p", "[", "0", "]", "[", "idx", "[", "0", "]", "]", "]", "\n", "p2", "=", "[", "bound_p", "[", "1", "]", "[", "idx", "[", "1", "]", "]", ",", "bound_p", "[", "0", "]", "[", "idx", "[", "1", "]", "]", "]", "\n", "\n", "curr_distance", "=", "np", ".", "sqrt", "(", "(", "p2", "[", "0", "]", "-", "p1", "[", "0", "]", ")", "**", "2", "+", "(", "p2", "[", "1", "]", "-", "p1", "[", "1", "]", ")", "**", "2", ")", "\n", "if", "curr_distance", ">", "dist", ":", "\n", "            ", "dist", "=", "curr_distance", "\n", "best", "=", "[", "p1", ",", "p2", "]", "\n", "", "", "return", "best", "\n", "\n"]], "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.generateCirclePoints": [[256, 266], ["numpy.meshgrid", "skimage.segmentation.find_boundaries", "utils.sampleContour", "utils.sortByDistance", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.sampleContour", "home.repos.pwc.inspect_result.gmaresta_iW-Net.None.utils.sortByDistance"], ["", "def", "generateCirclePoints", "(", "radius", ",", "nb_points", ",", "size", "=", "64", ")", ":", "\n", "    ", "amin", "=", "-", "size", "/", "2", "\n", "amax", "=", "size", "/", "2", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "amin", ",", "amax", ")", ",", "np", ".", "arange", "(", "amin", ",", "amax", ")", ")", "\n", "\n", "circle", "=", "(", "x", "**", "2", "+", "y", "**", "2", ")", "<=", "radius", "**", "2", "\n", "contour", "=", "find_boundaries", "(", "circle", ",", "mode", "=", "'inner'", ")", "#inner", "\n", "points", "=", "sampleContour", "(", "contour", ",", "nb_points", "=", "nb_points", ")", "\n", "points", "=", "sortByDistance", "(", "points", ")", "\n", "return", "points", "", "", ""]]}