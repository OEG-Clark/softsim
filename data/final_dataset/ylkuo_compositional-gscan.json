{"home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.predict.sequence_accuracy": [[19, 40], ["prediction.copy.copy", "target.copy.copy", "enumerate", "len", "len", "prediction.copy.extend", "len", "len", "target.copy.extend", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["def", "sequence_accuracy", "(", "prediction", ":", "List", "[", "int", "]", ",", "target", ":", "List", "[", "int", "]", ")", "->", "float", ":", "\n", "    ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "prediction", "=", "prediction", ".", "copy", "(", ")", "\n", "target", "=", "target", ".", "copy", "(", ")", "\n", "if", "len", "(", "prediction", ")", "<", "len", "(", "target", ")", ":", "\n", "        ", "difference", "=", "len", "(", "target", ")", "-", "len", "(", "prediction", ")", "\n", "prediction", ".", "extend", "(", "[", "0", "]", "*", "difference", ")", "\n", "", "if", "len", "(", "target", ")", "<", "len", "(", "prediction", ")", ":", "\n", "        ", "difference", "=", "len", "(", "prediction", ")", "-", "len", "(", "target", ")", "\n", "target", ".", "extend", "(", "[", "-", "1", "]", "*", "difference", ")", "\n", "", "for", "i", ",", "target_int", "in", "enumerate", "(", "target", ")", ":", "\n", "        ", "if", "i", ">=", "len", "(", "prediction", ")", ":", "\n", "            ", "break", "\n", "", "prediction_int", "=", "prediction", "[", "i", "]", "\n", "if", "prediction_int", "==", "target_int", ":", "\n", "            ", "correct", "+=", "1", "\n", "", "total", "+=", "1", "\n", "", "if", "not", "total", ":", "\n", "        ", "return", "0.", "\n", "", "return", "(", "correct", "/", "total", ")", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.predict.predict_and_save": [[42, 108], ["open", "logger.info", "collections.defaultdict", "collections.defaultdict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "predict.predict", "logger.info", "collections.defaultdict.keys", "logger.info", "logger.info", "logger.info", "json.dump", "dataset.get_data_iterator", "predict.sequence_accuracy", "dataset.array_to_sentence", "dataset.array_to_sentence", "logger.info", "target_sequence[].tolist", "output.append", "target_sequence[].tolist", "int", "sum", "float", "float", "len", "float", "collections.defaultdict.values", "sum", "len", "len", "collections.defaultdict.values"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.predict.predict", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.get_data_iterator", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.predict.sequence_accuracy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.array_to_sentence", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.array_to_sentence"], ["", "def", "predict_and_save", "(", "dataset", ":", "GroundedScanDataset", ",", "model", ":", "nn", ".", "Module", ",", "output_file_path", ":", "str", ",", "\n", "max_steps", ":", "int", ",", "device", "=", "None", ",", "save", "=", "True", ",", "performance_by_length", "=", "False", ",", "\n", "parser", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Predict all data in dataset with a model and write the predictions to output_file_path.\n    :param dataset: a dataset with test examples\n    :param model: a trained model from model.py\n    :param output_file_path: a path where a .json file with predictions will be saved.\n    :param max_steps: after how many steps to force quit decoding\n    :param device: device to put the tensors\n    :param save: save the predictions as json file or not\n    :param performance_by_length: log performance by sequence length\n    :param parser: the parser used for deriving the model\n    \"\"\"", "\n", "\n", "with", "open", "(", "output_file_path", ",", "mode", "=", "'w'", ")", "as", "outfile", ":", "\n", "        ", "output", "=", "[", "]", "\n", "i", "=", "0", "\n", "if", "performance_by_length", ":", "\n", "            ", "n_exact_match", "=", "defaultdict", "(", "int", ")", "\n", "n_examples", "=", "defaultdict", "(", "int", ")", "\n", "", "else", ":", "\n", "            ", "n_exact_match", "=", "0", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "(", "success", ",", "input_text", ",", "init_situ_spec", ",", "situations", ",", "output_sequence", ",", "target_sequence", ",", "att_maps", ")", "in", "predict", "(", "\n", "dataset", ".", "get_data_iterator", "(", "batch_size", "=", "1", ",", "is_test", "=", "True", ")", ",", "\n", "world", "=", "dataset", ".", "dataset", ".", "_world", ",", "model", "=", "model", ",", "\n", "max_steps", "=", "max_steps", ",", "vocab", "=", "dataset", ".", "target_vocabulary", ",", "\n", "pad_idx", "=", "dataset", ".", "target_vocabulary", ".", "pad_idx", ",", "sos_idx", "=", "dataset", ".", "target_vocabulary", ".", "sos_idx", ",", "\n", "eos_idx", "=", "dataset", ".", "target_vocabulary", ".", "eos_idx", ",", "device", "=", "device", ",", "parser", "=", "parser", ")", ":", "\n", "                ", "i", "+=", "1", "\n", "if", "not", "success", ":", "\n", "                    ", "if", "performance_by_length", ":", "\n", "                        ", "n_examples", "[", "len", "(", "target_str_sequence", ")", "]", "+=", "1", "\n", "", "continue", "\n", "", "accuracy", "=", "sequence_accuracy", "(", "output_sequence", ",", "target_sequence", "[", "0", "]", ".", "tolist", "(", ")", "[", ":", "-", "1", "]", ")", "\n", "target_str_sequence", "=", "dataset", ".", "array_to_sentence", "(", "target_sequence", "[", "0", "]", ".", "tolist", "(", ")", ")", "\n", "target_str_sequence", "=", "target_str_sequence", "[", ":", "-", "1", "]", "# Get rid of <SOS> and <EOS>", "\n", "output_str_sequence", "=", "dataset", ".", "array_to_sentence", "(", "output_sequence", ")", "\n", "exact_match", "=", "True", "if", "int", "(", "accuracy", ")", "==", "100", "else", "False", "\n", "if", "save", ":", "\n", "                    ", "output", ".", "append", "(", "{", "\"input\"", ":", "input_text", ",", "\"prediction\"", ":", "output_str_sequence", ",", "\n", "\"target\"", ":", "target_str_sequence", ",", "\"situation\"", ":", "init_situ_spec", ",", "\n", "\"attention_weights\"", ":", "att_maps", ",", "\n", "\"accuracy\"", ":", "accuracy", ",", "\n", "\"exact_match\"", ":", "exact_match", "}", ")", "\n", "", "if", "exact_match", ":", "\n", "                    ", "if", "performance_by_length", ":", "\n", "                        ", "n_exact_match", "[", "len", "(", "target_str_sequence", ")", "]", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "n_exact_match", "+=", "1", "\n", "", "", "if", "performance_by_length", ":", "\n", "                    ", "n_examples", "[", "len", "(", "target_str_sequence", ")", "]", "+=", "1", "\n", "", "", "", "logger", ".", "info", "(", "\"Wrote predictions for {} examples.\"", ".", "format", "(", "i", ")", ")", "\n", "if", "performance_by_length", ":", "\n", "            ", "logger", ".", "info", "(", "\"Percentage of exact match by target lengths:\"", ")", "\n", "for", "l", "in", "n_examples", ".", "keys", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\" {}, {}, {}, {}\"", ".", "format", "(", "l", ",", "n_exact_match", "[", "l", "]", ",", "n_examples", "[", "l", "]", ",", "\n", "n_exact_match", "[", "l", "]", "/", "float", "(", "n_examples", "[", "l", "]", ")", ")", ")", "\n", "", "logger", ".", "info", "(", "\"Percentage of exact match: {}\"", ".", "format", "(", "sum", "(", "n_exact_match", ".", "values", "(", ")", ")", "/", "float", "(", "sum", "(", "n_examples", ".", "values", "(", ")", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Num of exact match: {}, total: {}\"", ".", "format", "(", "n_exact_match", ",", "i", ")", ")", "\n", "logger", ".", "info", "(", "\"Percentage of exact match: {}\"", ".", "format", "(", "n_exact_match", "/", "float", "(", "i", ")", ")", ")", "\n", "", "if", "save", ":", "\n", "            ", "json", ".", "dump", "(", "output", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "", "", "return", "output_file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.predict.evaluate": [[110, 126], ["predict.predict", "predict.sequence_accuracy", "dataset.array_to_sentence", "accuracies.append", "float", "int", "numpy.mean", "target_sequence[].tolist", "int", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.predict.predict", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.predict.sequence_accuracy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.array_to_sentence"], ["", "def", "evaluate", "(", "dataset", ":", "GroundedScanDataset", ",", "data_iterator", ":", "Iterator", ",", "model", ":", "nn", ".", "Module", ",", "\n", "world", ":", "World", ",", "max_steps", ":", "int", ",", "vocab", ":", "Vocabulary", ",", "max_examples_to_evaluate", "=", "None", ",", "\n", "device", "=", "None", ",", "parser", "=", "None", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "    ", "accuracies", "=", "[", "]", "\n", "n_exact_match", "=", "0", "\n", "for", "(", "success", ",", "input_text", ",", "init_situ_spec", ",", "situations", ",", "output_sequence", ",", "target_sequence", ",", "att_maps", ")", "in", "predict", "(", "\n", "data_iterator", ",", "world", "=", "world", ",", "model", "=", "model", ",", "max_steps", "=", "max_steps", ",", "vocab", "=", "vocab", ",", "\n", "pad_idx", "=", "vocab", ".", "pad_idx", ",", "sos_idx", "=", "vocab", ".", "sos_idx", ",", "eos_idx", "=", "vocab", ".", "eos_idx", ",", "\n", "device", "=", "device", ",", "parser", "=", "parser", ")", ":", "\n", "        ", "accuracy", "=", "sequence_accuracy", "(", "output_sequence", ",", "target_sequence", "[", "0", "]", ".", "tolist", "(", ")", "[", ":", "-", "1", "]", ")", "\n", "output_str_sequence", "=", "dataset", ".", "array_to_sentence", "(", "output_sequence", ")", "\n", "exact_match", "=", "True", "if", "int", "(", "accuracy", ")", "==", "100", "else", "False", "\n", "if", "int", "(", "accuracy", ")", "==", "100", ":", "\n", "            ", "n_exact_match", "+=", "1", "\n", "", "accuracies", ".", "append", "(", "accuracy", ")", "\n", "", "return", "(", "float", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "accuracies", ")", ")", ")", ",", "(", "n_exact_match", "/", "len", "(", "accuracies", ")", ")", "*", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.predict.initialize_world": [[128, 141], ["world.initialize", "objects.append"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.initialize"], ["", "def", "initialize_world", "(", "world", ":", "World", ",", "situation", ":", "Situation", ")", "->", "World", ":", "\n", "    ", "\"\"\"\n    Initializes the world with the passed situation.\n    :param world: a simulated world for grounded SCAN\n    :param situation: class describing the current situation in the world, fully determined by a grid size,\n    agent position, agent direction, list of placed objects, an optional target object and optional carrying object.\n    \"\"\"", "\n", "objects", "=", "[", "]", "\n", "for", "positioned_object", "in", "situation", ".", "placed_objects", ":", "\n", "        ", "objects", ".", "append", "(", "(", "positioned_object", ".", "object", ",", "positioned_object", ".", "position", ")", ")", "\n", "", "world", ".", "initialize", "(", "objects", ",", "agent_position", "=", "situation", ".", "agent_pos", ",", "agent_direction", "=", "situation", ".", "agent_direction", ",", "\n", "target_object", "=", "situation", ".", "target_object", ",", "carrying", "=", "situation", ".", "carrying", ")", "\n", "return", "world", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.predict.predict": [[143, 243], ["model.eval", "time.time", "language.grammar.Grammar", "enumerate", "logging.info", "logging.info", "model.update_words", "GroundedScan.world.Situation.from_representation", "initialize_world.clear_situation", "predict.initialize_world", "torch.tensor", "torch.tensor", "torch.tensor", "feature.unsqueeze.unsqueeze", "collections.defaultdict", "torch.tensor", "torch.tensor", "torch.tensor", "time.time", "language.grammar.Grammar.arg_tree", "parser.parse", "initialize_world.get_current_situation", "initialize_world.get_current_situation_grid_repr", "torch.log_softmax", "[].data[].item", "enumerate", "output_sequence.pop", "language.grammar.split_str", "model.forward", "output_sequence.append", "vocab.idx_to_word", "initialize_world.execute_command", "out_spec.append", "torch.tensor", "torch.tensor", "torch.tensor", "feature.unsqueeze.unsqueeze", "len", "type", "int", "out_att_maps[].append", "out_att_maps[].append", "int", "out_att_maps[].append", "initialize_world.get_current_situation", "initialize_world.get_current_situation_grid_repr", "numpy.sqrt", "tmp_att_map[].view().cpu().data.numpy().tolist", "tmp_att_map[].view().cpu().data.numpy().tolist", "numpy.sqrt", "att_map[].view().cpu().data.numpy().tolist", "len", "F.log_softmax.max", "tmp_att_map[].view().cpu().data.numpy", "tmp_att_map[].view().cpu().data.numpy", "att_map[].view().cpu().data.numpy", "tmp_att_map[].view().cpu", "tmp_att_map[].view().cpu", "att_map[].view().cpu", "tmp_att_map[].view", "tmp_att_map[].view", "att_map[].view"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.update_words", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.from_representation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.Grammar.arg_tree", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.StanfordDependencyParser.parse", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation_grid_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.split_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.forward", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.idx_to_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.execute_command", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation_grid_repr"], ["", "def", "predict", "(", "data_iterator", ":", "Iterator", ",", "world", ":", "World", ",", "model", ":", "nn", ".", "Module", ",", "max_steps", ":", "int", ",", "\n", "vocab", ":", "Vocabulary", ",", "pad_idx", ":", "int", ",", "sos_idx", ":", "int", ",", "eos_idx", ":", "int", ",", "\n", "max_examples_to_evaluate", "=", "None", ",", "device", "=", "None", ",", "parser", "=", "None", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Loop over all data in data_iterator and predict until <EOS> token is reached.\n    :param data_iterator: iterator containing the data to predict\n    :param world: a simulated world for grounded SCAN\n    :param model: a trained model from model.py\n    :param max_steps: after how many steps to abort decoding\n    :param vocab: Vocabulary of the dataset\n    :param pad_idx: the padding idx of the target vocabulary\n    :param sos_idx: the start-of-sequence idx of the target vocabulary\n    :param eos_idx: the end-of-sequence idx of the target vocabulary\n    :param max_examples_to_evaluate: after how many examples to break prediction, if none all are predicted\n    :param device: device to put the tensors\n    :param parser: the parser used for deriving the model\n    \"\"\"", "\n", "# Disable dropout and other regularization.", "\n", "model", ".", "eval", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "grammar", "=", "Grammar", "(", ")", "\n", "\n", "# Loop over the data.", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_iterator", ")", ":", "\n", "        ", "input_text", ",", "_", ",", "situation_sequence", ",", "situation_spec", ",", "target_sequence", ",", "target_lengths", ",", "agent_positions", ",", "target_positions", "=", "data", "\n", "if", "max_examples_to_evaluate", ":", "\n", "            ", "if", "i", "+", "1", ">", "max_examples_to_evaluate", ":", "\n", "                ", "break", "\n", "", "", "if", "parser", "is", "None", ":", "\n", "            ", "arg_tree", "=", "grammar", ".", "arg_tree", "(", "split_str", "(", "input_text", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "arg_tree", "=", "parser", ".", "parse", "(", "input_text", "[", "0", "]", ")", "\n", "\n", "", "model", ".", "update_words", "(", "arg_tree", ")", "\n", "# Prepare the initial env", "\n", "situation", "=", "Situation", ".", "from_representation", "(", "situation_spec", "[", "0", "]", ")", "\n", "world", ".", "clear_situation", "(", ")", "\n", "world", "=", "initialize_world", "(", "world", ",", "situation", ")", "\n", "out_spec", "=", "[", "world", ".", "get_current_situation", "(", ")", "]", "\n", "feature", "=", "torch", ".", "tensor", "(", "world", ".", "get_current_situation_grid_repr", "(", ")", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "feature", "=", "feature", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# Iteratively decode the output.", "\n", "# TODO: retrieve attention as well.", "\n", "output_sequence", "=", "[", "]", ";", "out_att_maps", "=", "defaultdict", "(", "list", ")", "\n", "token", "=", "torch", ".", "tensor", "(", "[", "sos_idx", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "decoding_iteration", "=", "0", "\n", "proposals", "=", "None", "\n", "hidden_states", "=", "None", "\n", "success", "=", "True", "\n", "while", "token", "!=", "eos_idx", "and", "decoding_iteration", "<=", "max_steps", ":", "\n", "# Take one forward step", "\n", "            ", "try", ":", "\n", "                ", "proposals", ",", "hidden_states", "=", "model", ".", "forward", "(", "obs", "=", "feature", ",", "prev_hidden_states", "=", "hidden_states", ")", "\n", "", "except", ":", "\n", "                ", "success", "=", "False", "\n", "break", "\n", "", "output", "=", "F", ".", "log_softmax", "(", "proposals", "[", "len", "(", "model", ".", "current_words", ")", "-", "1", "]", ",", "dim", "=", "-", "1", ")", "\n", "token", "=", "output", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "1", "]", ".", "data", "[", "0", "]", ".", "item", "(", ")", "\n", "decoding_iteration", "+=", "1", "\n", "if", "token", "!=", "sos_idx", "and", "token", "!=", "pad_idx", ":", "\n", "                ", "output_sequence", ".", "append", "(", "token", ")", "\n", "", "att_maps", "=", "model", ".", "att_maps", "\n", "for", "j", ",", "att_map", "in", "enumerate", "(", "att_maps", ")", ":", "\n", "                ", "if", "att_map", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "if", "type", "(", "att_map", ")", "is", "list", ":", "\n", "                    ", "other_word", "=", "'small'", "\n", "if", "model", ".", "current_words", "[", "j", "]", "==", "'small'", ":", "\n", "                        ", "other_word", "=", "'big'", "\n", "# current word", "\n", "", "tmp_att_map", "=", "att_map", "[", "0", "]", "\n", "att_size", "=", "int", "(", "np", ".", "sqrt", "(", "tmp_att_map", ".", "shape", "[", "1", "]", ")", ")", "\n", "out_att_maps", "[", "model", ".", "current_words", "[", "j", "]", "]", ".", "append", "(", "tmp_att_map", "[", "0", "]", ".", "view", "(", "att_size", ",", "att_size", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "# word for comparison", "\n", "tmp_att_map", "=", "att_map", "[", "1", "]", "\n", "out_att_maps", "[", "other_word", "]", ".", "append", "(", "tmp_att_map", "[", "0", "]", ".", "view", "(", "att_size", ",", "att_size", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "att_size", "=", "int", "(", "np", ".", "sqrt", "(", "att_map", ".", "shape", "[", "1", "]", ")", ")", "\n", "out_att_maps", "[", "model", ".", "current_words", "[", "j", "]", "]", ".", "append", "(", "att_map", "[", "0", "]", ".", "view", "(", "att_size", ",", "att_size", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "# Agent moves and update the input feature if not reaching the end", "\n", "", "", "if", "token", "not", "in", "[", "eos_idx", ",", "sos_idx", ",", "pad_idx", "]", ":", "\n", "                ", "target_command", "=", "vocab", ".", "idx_to_word", "(", "token", ")", "\n", "world", ".", "execute_command", "(", "target_command", ")", "\n", "out_spec", ".", "append", "(", "world", ".", "get_current_situation", "(", ")", ")", "\n", "feature", "=", "torch", ".", "tensor", "(", "world", ".", "get_current_situation_grid_repr", "(", ")", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "feature", "=", "feature", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "", "if", "len", "(", "output_sequence", ")", ">", "0", "and", "output_sequence", "[", "-", "1", "]", "==", "eos_idx", ":", "\n", "            ", "output_sequence", ".", "pop", "(", ")", "\n", "", "del", "situation", "\n", "del", "feature", "\n", "yield", "(", "success", ",", "input_text", ",", "situation_spec", "[", "0", "]", ",", "out_spec", ",", "output_sequence", ",", "target_sequence", ",", "out_att_maps", ")", "\n", "\n", "", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "logging", ".", "info", "(", "\"Predicted for {} examples.\"", ".", "format", "(", "i", ")", ")", "\n", "logging", ".", "info", "(", "\"Done predicting in {} seconds.\"", ".", "format", "(", "elapsed_time", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.train.setup_summary_writer": [[19, 33], ["datetime.datetime.now", "datetime.now.strftime", "torch.utils.tensorboard.SummaryWriter", "str().split", "str", "str"], "function", ["None"], ["def", "setup_summary_writer", "(", "args", ")", ":", "\n", "    ", "now", "=", "datetime", ".", "now", "(", ")", "\n", "now_str", "=", "now", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", "\n", "lr_str", "=", "str", "(", "args", ".", "lr", ")", ".", "split", "(", "'.'", ")", "[", "1", "]", "\n", "dir_name", "=", "'runs/datetime=%s_split=%s_k=%d_lr=%s_rnndim=%d_rnndepth=%d_ours_parse=%s'", "%", "(", "now_str", ",", "args", ".", "split", ",", "args", ".", "k", ",", "lr_str", ",", "args", ".", "rnn_dim", ",", "args", ".", "rnn_depth", ",", "args", ".", "parse_type", ")", "\n", "if", "args", ".", "no_attention", ":", "\n", "        ", "dir_name", "+=", "'_noatt'", "\n", "", "if", "args", ".", "pass_state", ":", "\n", "        ", "dir_name", "+=", "'_passstate'", "\n", "", "if", "args", ".", "split", "==", "'target_length_split'", ":", "\n", "        ", "dir_name", "+=", "'_seqlen='", "+", "str", "(", "args", ".", "max_seq_length", ")", "\n", "", "args", ".", "writer", "=", "SummaryWriter", "(", "dir_name", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.train.train": [[35, 168], ["gSCAN_dataset.GroundedScanDataset", "gSCAN_dataset.GroundedScanDataset.read_dataset", "gSCAN_dataset.GroundedScanDataset.shuffle_data", "gSCAN_dataset.GroundedScanDataset", "gSCAN_dataset.GroundedScanDataset.read_dataset", "gSCAN_dataset.GroundedScanDataset.shuffle_data", "gSCAN_dataset.GroundedScanDataset.get_data_iterator", "next", "model.SentenceNetwork", "model.SentenceNetwork.to", "torch.Adam", "gSCAN_dataset.GroundedScanDataset.shuffle_data", "range", "language.grammar.Grammar", "os.path.isfile", "args.logger.info", "model.SentenceNetwork.load_state_dict", "torch.save", "torch.save", "model.SentenceNetwork.parameters", "enumerate", "language.parse.ConstituencyParser", "gSCAN_dataset.GroundedScanDataset.get_data_iterator", "model.SentenceNetwork.train", "args.logger.info", "model.SentenceNetwork.update_words", "torch.tensor", "torch.tensor", "model.SentenceNetwork.loss", "args.logger.info", "language.parse.StanfordDependencyParser", "torch.load", "torch.load", "model.SentenceNetwork.state_dict", "language.grammar.Grammar.arg_tree", "language.parse.StanfordDependencyParser.parse", "log_model_params", "args.writer.add_scalar", "torch.save", "torch.save", "gSCAN_dataset.GroundedScanDataset.shuffle_data", "model.SentenceNetwork.eval", "enumerate", "args.logger.info", "args.writer.add_scalar", "predict.evaluate", "args.logger.info", "args.writer.add_scalar", "args.writer.add_scalar", "language.grammar.split_str", "float", "float", "gSCAN_dataset.GroundedScanDataset.get_data_iterator", "model.SentenceNetwork.update_words", "float", "gSCAN_dataset.GroundedScanDataset.get_data_iterator", "torch.save", "torch.save", "args.logger.info", "str", "model.SentenceNetwork.state_dict", "language.grammar.Grammar.arg_tree", "language.parse.StanfordDependencyParser.parse", "torch.no_grad", "torch.no_grad", "torch.tensor", "torch.tensor", "model.SentenceNetwork.loss", "float", "float", "language.grammar.split_str", "model.SentenceNetwork.state_dict"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.read_dataset", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.shuffle_data", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.read_dataset", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.shuffle_data", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.get_data_iterator", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.shuffle_data", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.get_data_iterator", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.train.train", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.update_words", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.loss", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.Grammar.arg_tree", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.StanfordDependencyParser.parse", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.log_model_params", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.shuffle_data", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.predict.evaluate", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.split_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.get_data_iterator", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.update_words", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.get_data_iterator", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.Grammar.arg_tree", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.StanfordDependencyParser.parse", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.loss", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.split_str"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "max_seq_length", "<=", "0", ":", "\n", "        ", "args", ".", "max_seq_length", "=", "np", ".", "inf", "\n", "# load training data", "\n", "", "training_set", "=", "GroundedScanDataset", "(", "args", ".", "data_path", ",", "\n", "args", ".", "data_directory", "+", "args", ".", "split", "+", "'/'", ",", "\n", "split", "=", "\"train\"", ",", "\n", "target_vocabulary_file", "=", "args", ".", "target_vocabulary_file", ",", "\n", "k", "=", "args", ".", "k", ",", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", ")", "\n", "training_set", ".", "read_dataset", "(", "max_examples", "=", "None", ",", "# use all dataset", "\n", "simple_situation_representation", "=", "args", ".", "simple_situation_representation", ")", "\n", "training_set", ".", "shuffle_data", "(", ")", "\n", "# load validation data", "\n", "validation_set", "=", "GroundedScanDataset", "(", "args", ".", "data_path", ",", "\n", "args", ".", "data_directory", "+", "args", ".", "split", "+", "'/'", ",", "\n", "split", "=", "\"dev\"", ",", "\n", "target_vocabulary_file", "=", "args", ".", "target_vocabulary_file", ",", "\n", "k", "=", "args", ".", "k", ",", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", ")", "\n", "validation_set", ".", "read_dataset", "(", "max_examples", "=", "None", ",", "# use all dataset", "\n", "simple_situation_representation", "=", "args", ".", "simple_situation_representation", ")", "\n", "validation_set", ".", "shuffle_data", "(", ")", "\n", "parser", "=", "None", "\n", "if", "args", ".", "parse_type", "==", "'default'", ":", "\n", "        ", "grammar", "=", "Grammar", "(", ")", "\n", "word2narg", "=", "WORD2NARG", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "parse_type", "==", "'constituency'", ":", "\n", "            ", "parser", "=", "ConstituencyParser", "(", ")", "\n", "", "elif", "args", ".", "parse_type", "==", "'dependency'", ":", "\n", "            ", "parser", "=", "StanfordDependencyParser", "(", ")", "\n", "", "word2narg", "=", "parser", ".", "word2narg", "\n", "", "if", "args", ".", "compare_attention", ":", "\n", "        ", "compare_list", "=", "COMPARE_LIST", "\n", "", "else", ":", "\n", "        ", "compare_list", "=", "None", "\n", "", "data_iter", "=", "training_set", ".", "get_data_iterator", "(", "batch_size", "=", "args", ".", "training_batch_size", ")", "\n", "input_text_batch", ",", "_", ",", "situation_batch", ",", "situation_representation_batch", ",", "target_batch", ",", "target_lengths", ",", "agent_positions", ",", "target_positions", "=", "next", "(", "data_iter", ")", "\n", "example_feature", "=", "situation_batch", "[", "0", "]", "[", "0", "]", "# first seq, first observation", "\n", "model", "=", "SentenceNetwork", "(", "words", "=", "word2narg", ",", "\n", "cnn_kernel_size", "=", "args", ".", "cnn_kernel_size", ",", "\n", "n_channels", "=", "args", ".", "cnn_num_channels", ",", "\n", "example_feature", "=", "example_feature", ",", "\n", "rnn_dim", "=", "args", ".", "rnn_dim", ",", "\n", "rnn_depth", "=", "args", ".", "rnn_depth", ",", "\n", "attention_dim", "=", "args", ".", "att_dim", ",", "\n", "output_dim", "=", "args", ".", "output_dim", ",", "\n", "device", "=", "args", ".", "device", ",", "\n", "compare_list", "=", "compare_list", ",", "\n", "compare_weight", "=", "args", ".", "compare_weight", ",", "\n", "normalize_size", "=", "args", ".", "normalize_size", ",", "\n", "no_attention", "=", "args", ".", "no_attention", ",", "\n", "parse_type", "=", "args", ".", "parse_type", ",", "\n", "pass_state", "=", "args", ".", "pass_state", ")", "\n", "n_update", "=", "0", ";", "n_validate", "=", "0", ";", "n_checkpoint", "=", "0", ";", "best_match", "=", "0", "\n", "if", "args", ".", "resume_from_file", "!=", "''", ":", "\n", "        ", "resume_file", "=", "args", ".", "model_prefix", "+", "args", ".", "resume_from_file", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "resume_file", ")", ",", "\"No checkpoint found at {}\"", ".", "format", "(", "resume_file", ")", "\n", "args", ".", "logger", ".", "info", "(", "\"Loading checkpoint from file at '{}'\"", ".", "format", "(", "resume_file", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "resume_file", ")", "[", "0", "]", ")", "\n", "n_checkpoint", "=", "args", ".", "resume_n_update", "\n", "n_update", "=", "args", ".", "checkpoint_range", "*", "n_checkpoint", "\n", "n_validate", "=", "n_update", "/", "args", ".", "validate_every", "\n", "", "else", ":", "\n", "        ", "torch", ".", "save", "(", "[", "model", ".", "state_dict", "(", ")", "]", ",", "args", ".", "model_prefix", "+", "'/model_0.pkl'", ")", "\n", "", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "args", ".", "adam_beta_1", ",", "args", ".", "adam_beta_2", ")", ")", "\n", "# training", "\n", "training_set", ".", "shuffle_data", "(", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "n_epochs", ")", ":", "\n", "        ", "for", "j", ",", "data", "in", "enumerate", "(", "training_set", ".", "get_data_iterator", "(", "batch_size", "=", "args", ".", "training_batch_size", ")", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "input_text_batch", ",", "_", ",", "situation_batch", ",", "situation_representation_batch", ",", "target_batch", ",", "target_lengths", ",", "agent_positions", ",", "target_positions", "=", "data", "\n", "if", "args", ".", "parse_type", "==", "'default'", ":", "\n", "                ", "arg_tree", "=", "grammar", ".", "arg_tree", "(", "split_str", "(", "input_text_batch", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "arg_tree", "=", "parser", ".", "parse", "(", "input_text_batch", "[", "0", "]", ")", "\n", "", "args", ".", "logger", ".", "info", "(", "'train {}, arg tree: {}'", ".", "format", "(", "input_text_batch", "[", "0", "]", ",", "arg_tree", ")", ")", "\n", "model", ".", "update_words", "(", "arg_tree", ")", "\n", "target_lengths", "=", "torch", ".", "tensor", "(", "target_lengths", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "args", ".", "device", ")", "\n", "success", ",", "total_loss", ",", "word_losses", "=", "model", ".", "loss", "(", "situation_batch", ",", "target_batch", ",", "target_lengths", ",", "optimizer", ")", "\n", "if", "not", "success", ":", "\n", "                ", "continue", "\n", "", "args", ".", "logger", ".", "info", "(", "'epoch {}, iter {}, train loss: {}'", ".", "format", "(", "i", ",", "j", ",", "float", "(", "total_loss", ")", ")", ")", "\n", "# save checkpoints", "\n", "if", "n_update", "%", "args", ".", "checkpoint_range", "==", "0", ":", "\n", "                ", "log_model_params", "(", "model", ",", "args", ".", "writer", ",", "'comp_gscan'", ",", "n_update", ")", "\n", "# log numbers, TODO: log loss per word", "\n", "args", ".", "writer", ".", "add_scalar", "(", "'loss/train_total'", ",", "float", "(", "total_loss", ")", ",", "n_checkpoint", ")", "\n", "model_path", "=", "args", ".", "model_prefix", "+", "'/model_'", "+", "str", "(", "n_checkpoint", ")", "+", "'.pkl'", "\n", "torch", ".", "save", "(", "[", "model", ".", "state_dict", "(", ")", "]", ",", "model_path", ")", "\n", "n_checkpoint", "+=", "1", "\n", "# validation", "\n", "", "if", "n_update", "%", "args", ".", "validate_every", "==", "0", ":", "\n", "                ", "validation_set", ".", "shuffle_data", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "# compute loss", "\n", "loss", "=", "0", ";", "n_batch", "=", "0", "\n", "for", "k", ",", "data", "in", "enumerate", "(", "validation_set", ".", "get_data_iterator", "(", "batch_size", "=", "args", ".", "training_batch_size", ")", ")", ":", "\n", "                    ", "input_text_batch", ",", "_", ",", "situation_batch", ",", "situation_representation_batch", ",", "target_batch", ",", "target_lengths", ",", "agent_positions", ",", "target_positions", "=", "data", "\n", "if", "args", ".", "parse_type", "==", "'default'", ":", "\n", "                        ", "arg_tree", "=", "grammar", ".", "arg_tree", "(", "split_str", "(", "input_text_batch", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                        ", "arg_tree", "=", "parser", ".", "parse", "(", "input_text_batch", "[", "0", "]", ")", "\n", "", "model", ".", "update_words", "(", "arg_tree", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "target_lengths", "=", "torch", ".", "tensor", "(", "target_lengths", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "args", ".", "device", ")", "\n", "success", ",", "total_loss", ",", "word_losses", "=", "model", ".", "loss", "(", "situation_batch", ",", "target_batch", ",", "target_lengths", ")", "\n", "loss", "+=", "float", "(", "total_loss", ")", "\n", "", "n_batch", "+=", "1", "\n", "", "loss", "=", "loss", "/", "n_batch", "\n", "args", ".", "logger", ".", "info", "(", "'epoch {}, iter {}, val loss: {}'", ".", "format", "(", "i", ",", "j", ",", "float", "(", "loss", ")", ")", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "'loss/val_total'", ",", "float", "(", "loss", ")", ",", "n_validate", ")", "\n", "# run evaluation", "\n", "accuracy", ",", "exact_match", "=", "evaluate", "(", "training_set", ",", "\n", "validation_set", ".", "get_data_iterator", "(", "batch_size", "=", "1", ")", ",", "model", "=", "model", ",", "world", "=", "validation_set", ".", "dataset", ".", "_world", ",", "\n", "max_steps", "=", "args", ".", "max_steps", ",", "vocab", "=", "validation_set", ".", "target_vocabulary", ",", "\n", "max_examples_to_evaluate", "=", "args", ".", "max_testing_examples", ",", "device", "=", "args", ".", "device", ",", "parser", "=", "parser", ")", "\n", "args", ".", "logger", ".", "info", "(", "\"  Evaluation Accuracy: %5.2f Exact Match: %5.2f\"", "%", "(", "accuracy", ",", "exact_match", ")", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "'accuracy/val_total'", ",", "accuracy", ",", "n_validate", ")", "\n", "args", ".", "writer", ".", "add_scalar", "(", "'exact_match/val_total'", ",", "exact_match", ",", "n_validate", ")", "\n", "# save the best model", "\n", "if", "exact_match", ">", "best_match", ":", "\n", "                    ", "model_path", "=", "args", ".", "model_prefix", "+", "'/model_best.pkl'", "\n", "torch", ".", "save", "(", "[", "model", ".", "state_dict", "(", ")", ",", "n_update", ",", "exact_match", "]", ",", "model_path", ")", "\n", "best_match", "=", "exact_match", "\n", "args", ".", "logger", ".", "info", "(", "'save best model at n_update {}'", ".", "format", "(", "n_update", ")", ")", "\n", "", "n_validate", "+=", "1", "\n", "", "n_update", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.test.test": [[16, 86], ["args.splits.split", "args.logger.info", "gSCAN_dataset.GroundedScanDataset", "gSCAN_dataset.GroundedScanDataset.read_dataset", "args.logger.info", "args.logger.info", "args.logger.info", "args.logger.info", "gSCAN_dataset.GroundedScanDataset.get_data_iterator", "next", "model.SentenceNetwork", "os.path.isfile", "args.logger.info", "model.SentenceNetwork.load_state_dict", "model.SentenceNetwork.to", "os.path.join", "predict.predict_and_save", "args.logger.info", "language.parse.ConstituencyParser", "language.parse.StanfordDependencyParser", "gSCAN_dataset.GroundedScanDataset.target_vocabulary.most_common", "torch.load"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.read_dataset", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.get_data_iterator", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.predict.predict_and_save", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.most_common", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.load"], ["def", "test", "(", "args", ")", ":", "\n", "    ", "splits", "=", "args", ".", "splits", ".", "split", "(", "','", ")", "\n", "parser", "=", "None", "\n", "if", "args", ".", "parse_type", "==", "'default'", ":", "\n", "        ", "word2narg", "=", "WORD2NARG", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "parse_type", "==", "'constituency'", ":", "\n", "            ", "parser", "=", "ConstituencyParser", "(", ")", "\n", "", "elif", "args", ".", "parse_type", "==", "'dependency'", ":", "\n", "            ", "parser", "=", "StanfordDependencyParser", "(", ")", "\n", "", "word2narg", "=", "parser", ".", "word2narg", "\n", "", "if", "args", ".", "compare_attention", ":", "\n", "        ", "compare_list", "=", "COMPARE_LIST", "\n", "", "else", ":", "\n", "        ", "compare_list", "=", "None", "\n", "", "for", "split", "in", "splits", ":", "\n", "        ", "args", ".", "logger", ".", "info", "(", "\"Loading {} dataset split...\"", ".", "format", "(", "split", ")", ")", "\n", "test_set", "=", "GroundedScanDataset", "(", "args", ".", "data_path", ",", "\n", "args", ".", "data_directory", "+", "args", ".", "split", "+", "'/'", ",", "\n", "split", "=", "split", ",", "\n", "target_vocabulary_file", "=", "args", ".", "target_vocabulary_file", ",", "\n", "k", "=", "args", ".", "k", ")", "\n", "test_set", ".", "read_dataset", "(", "max_examples", "=", "None", ",", "# use all dataset", "\n", "simple_situation_representation", "=", "args", ".", "simple_situation_representation", ",", "\n", "is_test", "=", "True", ")", "\n", "args", ".", "logger", ".", "info", "(", "\"Done Loading {} dataset split.\"", ".", "format", "(", "split", ")", ")", "\n", "args", ".", "logger", ".", "info", "(", "\"  Loaded {} examples.\"", ".", "format", "(", "test_set", ".", "num_examples", ")", ")", "\n", "args", ".", "logger", ".", "info", "(", "\"  Output vocabulary size: {}\"", ".", "format", "(", "test_set", ".", "target_vocabulary_size", ")", ")", "\n", "args", ".", "logger", ".", "info", "(", "\"  Most common target words: {}\"", ".", "format", "(", "test_set", ".", "target_vocabulary", ".", "most_common", "(", "5", ")", ")", ")", "\n", "\n", "# set up model", "\n", "data_iter", "=", "test_set", ".", "get_data_iterator", "(", "batch_size", "=", "1", ",", "is_test", "=", "True", ")", "\n", "input_text_batch", ",", "_", ",", "situation_batch", ",", "situation_representation_batch", ",", "target_batch", ",", "target_lengths", ",", "agent_positions", ",", "target_positions", "=", "next", "(", "data_iter", ")", "\n", "example_feature", "=", "situation_batch", "[", "0", "]", "[", "0", "]", "# first seq, first observation", "\n", "model", "=", "SentenceNetwork", "(", "words", "=", "word2narg", ",", "\n", "cnn_kernel_size", "=", "args", ".", "cnn_kernel_size", ",", "\n", "n_channels", "=", "args", ".", "cnn_num_channels", ",", "\n", "example_feature", "=", "example_feature", ",", "\n", "rnn_dim", "=", "args", ".", "rnn_dim", ",", "\n", "rnn_depth", "=", "args", ".", "rnn_depth", ",", "\n", "attention_dim", "=", "args", ".", "att_dim", ",", "\n", "output_dim", "=", "args", ".", "output_dim", ",", "\n", "device", "=", "args", ".", "device", ",", "\n", "compare_list", "=", "compare_list", ",", "\n", "normalize_size", "=", "args", ".", "normalize_size", ",", "\n", "no_attention", "=", "args", ".", "no_attention", ",", "\n", "parse_type", "=", "args", ".", "parse_type", ",", "\n", "pass_state", "=", "args", ".", "pass_state", ")", "\n", "\n", "# Load model and vocabularies", "\n", "resume_file", "=", "args", ".", "model_prefix", "+", "args", ".", "resume_from_file", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "resume_file", ")", ",", "\"No checkpoint found at {}\"", ".", "format", "(", "resume_file", ")", "\n", "args", ".", "logger", ".", "info", "(", "\"Loading checkpoint from file at '{}'\"", ".", "format", "(", "resume_file", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "resume_file", ")", "[", "0", "]", ")", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "# Run test", "\n", "performance_by_length", "=", "split", "==", "'target_lengths'", "\n", "\n", "output_file_name", "=", "\"_\"", ".", "join", "(", "[", "split", ",", "args", ".", "output_file_name", "]", ")", "\n", "output_file_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_directory", ",", "output_file_name", ")", "\n", "output_file", "=", "predict_and_save", "(", "dataset", "=", "test_set", ",", "model", "=", "model", ",", "\n", "output_file_path", "=", "output_file_path", ",", "\n", "max_steps", "=", "args", ".", "max_steps", ",", "\n", "device", "=", "args", ".", "device", ",", "\n", "save", "=", "args", ".", "save_prediction", ",", "\n", "performance_by_length", "=", "performance_by_length", ",", "\n", "parser", "=", "parser", ")", "\n", "args", ".", "logger", ".", "info", "(", "\"Saved predictions to {}\"", ".", "format", "(", "output_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.ConvolutionalNet.__init__": [[11, 25], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.ConvolutionalNet.forward", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.forward"], ["def", "__init__", "(", "self", ",", "num_channels", ":", "int", ",", "cnn_kernel_size", ":", "int", ",", "num_conv_channels", ":", "int", ",", "dropout_probability", ":", "float", ",", "\n", "stride", "=", "1", ",", "input_shape", "=", "None", ")", ":", "\n", "        ", "super", "(", "ConvolutionalNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "num_conv_channels", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ",", "stride", "=", "stride", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "num_conv_channels", ",", "kernel_size", "=", "5", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "2", ")", "\n", "self", ".", "conv_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "num_conv_channels", ",", "kernel_size", "=", "cnn_kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "cnn_kernel_size", "//", "2", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_probability", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "layers", "=", "[", "self", ".", "relu", ",", "self", ".", "dropout", "]", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "cnn_output_shape", "=", "self", ".", "forward", "(", "torch", ".", "zeros", "(", "input_shape", ")", ".", "unsqueeze", "(", "0", ")", ")", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.ConvolutionalNet.forward": [[26, 41], ["input_images.transpose.transpose.size", "input_images.transpose.transpose.transpose", "model.ConvolutionalNet.conv_1", "model.ConvolutionalNet.conv_2", "model.ConvolutionalNet.conv_3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.ConvolutionalNet.size", "model.ConvolutionalNet.transpose", "model.ConvolutionalNet.layers", "model.ConvolutionalNet.reshape"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.size", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.size"], ["", "def", "forward", "(", "self", ",", "input_images", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param input_images: [batch_size, image_width, image_width, image_channels]\n        :return: [batch_size, image_width * image_width, num_conv_channels]\n        \"\"\"", "\n", "batch_size", "=", "input_images", ".", "size", "(", "0", ")", "\n", "input_images", "=", "input_images", ".", "transpose", "(", "1", ",", "3", ")", "\n", "conved_1", "=", "self", ".", "conv_1", "(", "input_images", ")", "\n", "conved_2", "=", "self", ".", "conv_2", "(", "input_images", ")", "\n", "conved_3", "=", "self", ".", "conv_3", "(", "input_images", ")", "\n", "images_features", "=", "torch", ".", "cat", "(", "[", "conved_1", ",", "conved_2", ",", "conved_3", "]", ",", "dim", "=", "1", ")", "\n", "_", ",", "num_channels", ",", "_", ",", "image_dimension", "=", "images_features", ".", "size", "(", ")", "\n", "images_features", "=", "images_features", ".", "transpose", "(", "1", ",", "3", ")", "\n", "images_features", "=", "self", ".", "layers", "(", "images_features", ")", "\n", "return", "images_features", ".", "reshape", "(", "batch_size", ",", "image_dimension", "*", "image_dimension", ",", "num_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.AttentionArgN.__init__": [[44, 55], ["torch.Module.__init__", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.AttentionArgN.smp_att.append", "model.AttentionArgN.add_module", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ",", "smp_dim", ",", "hidden_dim", ",", "attention_dim", ",", "n", "=", "1", ")", ":", "\n", "        ", "super", "(", "AttentionArgN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "smp_att", "=", "[", "]", "\n", "n", "=", "1", "if", "n", "==", "0", "else", "n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "self", ".", "smp_att", ".", "append", "(", "nn", ".", "Linear", "(", "smp_dim", ",", "attention_dim", ")", ")", "\n", "self", ".", "add_module", "(", "'smp_att_{}_'", ".", "format", "(", "i", ")", ",", "self", ".", "smp_att", "[", "i", "]", ")", "\n", "", "self", ".", "init_hidden_att", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "attention_dim", ")", "\n", "self", ".", "dim", "=", "attention_dim", "*", "(", "n", "+", "1", ")", "\n", "self", ".", "full_att", "=", "nn", ".", "Linear", "(", "self", ".", "dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.AttentionArgN.forward": [[56, 68], ["enumerate", "model.AttentionArgN.init_hidden_att", "att_smp.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.AttentionArgN.full_att", "torch.softmax", "torch.softmax", "torch.softmax", "att_smp.append", "len", "att_smp.append", "model.AttentionArgN.unsqueeze().repeat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.AttentionArgN.unsqueeze", "in_att.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "smp_out", ",", "rnn_hidden", ",", "in_atts", ")", ":", "\n", "        ", "att_smp", "=", "[", "]", "\n", "for", "i", ",", "in_att", "in", "enumerate", "(", "in_atts", ")", ":", "\n", "            ", "att_smp", ".", "append", "(", "self", ".", "smp_att", "[", "i", "]", "(", "smp_out", "*", "in_att", ".", "unsqueeze", "(", "2", ")", ")", ")", "# (batch_size, num_pixels, attention_dim)", "\n", "", "if", "len", "(", "in_atts", ")", "==", "0", ":", "\n", "            ", "att_smp", ".", "append", "(", "self", ".", "smp_att", "[", "0", "]", "(", "smp_out", ")", ")", "\n", "", "att2", "=", "self", ".", "init_hidden_att", "(", "rnn_hidden", ")", "# (batch_size, attention_dim)", "\n", "att_smp", ".", "append", "(", "att2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "smp_out", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "emb", "=", "torch", ".", "cat", "(", "att_smp", ",", "dim", "=", "2", ")", "\n", "att", "=", "self", ".", "full_att", "(", "torch", ".", "relu", "(", "emb", ")", ")", "\n", "alpha", "=", "F", ".", "softmax", "(", "att", ",", "dim", "=", "1", ")", "\n", "return", "alpha", "[", ":", ",", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.ComponentNetwork.__init__": [[71, 99], ["torch.Module.__init__", "model.ComponentNetwork._set_rnn", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.AttentionArgN", "model.AttentionArgN", "model.ComponentNetwork.add_module"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.ComponentNetwork._set_rnn"], ["    ", "def", "__init__", "(", "self", ",", "nargs", "=", "0", ",", "smp_emb_dim", "=", "64", ",", "attention_dim", "=", "16", ",", "\n", "rnn_dim", "=", "256", ",", "rnn_depth", "=", "1", ",", "output_dim", "=", "9", ",", "device", "=", "None", ",", "\n", "related_words", "=", "None", ",", "normalize_att", "=", "False", ",", "\n", "no_attention", "=", "False", ",", "pass_state", "=", "False", ")", ":", "\n", "        ", "super", "(", "ComponentNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "nargs", "=", "nargs", "\n", "self", ".", "related_words", "=", "related_words", "\n", "self", ".", "normalize_att", "=", "normalize_att", "\n", "self", ".", "no_attention", "=", "no_attention", "\n", "self", ".", "pass_state", "=", "pass_state", "\n", "# set up layers", "\n", "self", ".", "smp_emb_dim", "=", "smp_emb_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "if", "not", "self", ".", "no_attention", ":", "\n", "            ", "if", "related_words", "is", "None", ":", "\n", "                ", "self", ".", "attention", "=", "AttentionArgN", "(", "smp_emb_dim", ",", "rnn_dim", "*", "rnn_depth", ",", "attention_dim", ",", "n", "=", "nargs", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "attention", "=", "{", "}", "\n", "for", "word", "in", "related_words", ":", "\n", "                    ", "self", ".", "attention", "[", "word", "]", "=", "AttentionArgN", "(", "smp_emb_dim", ",", "rnn_dim", "*", "rnn_depth", ",", "\n", "attention_dim", ",", "n", "=", "nargs", ")", "\n", "self", ".", "add_module", "(", "'attention_{}_{}'", ".", "format", "(", "word", ",", "nargs", ")", ",", "self", ".", "attention", "[", "word", "]", ")", "\n", "", "", "", "if", "pass_state", "and", "self", ".", "nargs", ">", "0", ":", "\n", "            ", "self", ".", "combine_state", "=", "nn", ".", "Linear", "(", "self", ".", "nargs", "*", "rnn_dim", "*", "rnn_depth", ",", "rnn_dim", ")", "\n", "", "self", ".", "_set_rnn", "(", "rnn_dim", ",", "rnn_depth", ")", "\n", "self", ".", "hidden_to_output", "=", "nn", ".", "Linear", "(", "rnn_dim", ",", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.ComponentNetwork.get_parameter_str": [[100, 105], ["model.ComponentNetwork.parameters", "type", "list", "p.size"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.size"], ["", "def", "get_parameter_str", "(", "self", ")", ":", "\n", "        ", "ret", "=", "''", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "ret", "=", "ret", "+", "'{0} {1}\\n'", ".", "format", "(", "type", "(", "p", ".", "data", ")", ",", "list", "(", "p", ".", "size", "(", ")", ")", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.ComponentNetwork._set_rnn": [[106, 119], ["torch.GRU", "torch.GRU", "torch.GRU", "model.ComponentNetwork.rnn.reset_parameters", "range", "hh.size", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.size"], ["", "def", "_set_rnn", "(", "self", ",", "rnn_dim", ",", "rnn_depth", ")", ":", "\n", "        ", "self", ".", "rnn_dim", "=", "rnn_dim", "\n", "self", ".", "rnn_depth", "=", "rnn_depth", "\n", "if", "self", ".", "pass_state", "and", "self", ".", "nargs", ">", "0", ":", "\n", "            ", "self", ".", "rnn_input_dim", "=", "self", ".", "smp_emb_dim", "+", "rnn_dim", "\n", "", "else", ":", "\n", "            ", "self", ".", "rnn_input_dim", "=", "self", ".", "smp_emb_dim", "\n", "", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "self", ".", "rnn_input_dim", ",", "rnn_dim", ",", "rnn_depth", ")", "\n", "self", ".", "rnn", ".", "reset_parameters", "(", ")", "\n", "# orthogonal initialization of recurrent weights", "\n", "for", "_", ",", "hh", ",", "_", ",", "_", "in", "self", ".", "rnn", ".", "all_weights", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "hh", ".", "size", "(", "0", ")", ",", "self", ".", "rnn", ".", "hidden_size", ")", ":", "\n", "                ", "nn", ".", "init", ".", "orthogonal_", "(", "hh", "[", "i", ":", "i", "+", "self", ".", "rnn", ".", "hidden_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.ComponentNetwork.forward": [[120, 179], ["smp_emb.view", "torch.zeros.permute", "torch.zeros.permute", "torch.zeros.permute", "torch.zeros.contiguous().view", "torch.zeros.contiguous().view", "torch.zeros.contiguous().view", "torch.zeros.view", "torch.zeros.view", "torch.zeros.view", "torch.zeros.permute().contiguous", "torch.zeros.permute().contiguous", "torch.zeros.permute().contiguous", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "model.ComponentNetwork.rnn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "smp_emb.view.sum", "range", "model.ComponentNetwork.hidden_to_output", "torch.zeros.contiguous", "torch.zeros.contiguous", "torch.zeros.contiguous", "model.ComponentNetwork.attention", "len", "in_states[].permute().contiguous().view", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.ComponentNetwork.combine_state", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros.permute", "torch.zeros.permute", "torch.zeros.permute", "list", "enumerate", "set().difference", "range", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "out_alpha.append", "model.ComponentNetwork.unsqueeze", "in_states[].permute().contiguous", "set", "torch.clamp.max", "torch.clamp.max", "torch.clamp.max", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "set", "torch.clamp.min", "torch.clamp.min", "torch.clamp.min", "in_states[].permute", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set"], ["", "", "", "def", "forward", "(", "self", ",", "smp_emb", "=", "None", ",", "prev_hidden_state", "=", "None", ",", "\n", "in_att_maps", "=", "[", "]", ",", "gen_proposal", "=", "False", ",", "\n", "in_states", "=", "[", "]", ",", "in_actions", "=", "[", "]", ",", "current_word", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "smp_emb", ".", "shape", "[", "0", "]", "\n", "if", "prev_hidden_state", "is", "None", ":", "\n", "            ", "prev_hidden_state", "=", "torch", ".", "zeros", "(", "self", ".", "rnn_depth", ",", "batch_size", ",", "self", ".", "rnn_dim", ",", "device", "=", "self", ".", "device", ")", "\n", "# compute attention map", "\n", "", "att_in", "=", "smp_emb", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "smp_emb_dim", ")", "# (batch_size, num_pixels, smp_emb_dim)", "\n", "prev_hidden_state", "=", "prev_hidden_state", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# swap to batch first for operations", "\n", "prev_hidden_state", "=", "prev_hidden_state", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "if", "self", ".", "no_attention", ":", "\n", "            ", "rnn_input", "=", "att_in", ".", "sum", "(", "dim", "=", "1", ")", "\n", "out_alpha", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "related_words", "is", "not", "None", ":", "\n", "                ", "other_word", "=", "list", "(", "set", "(", "self", ".", "related_words", ")", ".", "difference", "(", "set", "(", "[", "current_word", "]", ")", ")", ")", "[", "0", "]", "\n", "alpha", "=", "self", ".", "attention", "[", "current_word", "]", "(", "att_in", ",", "prev_hidden_state", ",", "in_att_maps", ")", "\n", "related_alpha", "=", "self", ".", "attention", "[", "other_word", "]", "(", "att_in", ",", "prev_hidden_state", ",", "in_att_maps", ")", "\n", "if", "self", ".", "normalize_att", ":", "\n", "                    ", "out_alpha", "=", "[", "]", "\n", "for", "k", ",", "a", "in", "enumerate", "(", "[", "alpha", ",", "related_alpha", "]", ")", ":", "\n", "                        ", "a", "=", "a", "-", "a", ".", "min", "(", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "maxes", "=", "a", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "for", "b", "in", "range", "(", "maxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                            ", "if", "maxes", "[", "b", "]", "[", "0", "]", "==", "0", ":", "\n", "                                ", "maxes", "[", "b", "]", "[", "0", "]", "=", "1", "\n", "", "", "a", "=", "a", "/", "maxes", "\n", "const", "=", "torch", ".", "ones", "(", "a", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "*", "(", "10", "**", "-", "5", ")", "\n", "a", "=", "a", "+", "const", "\n", "a", "=", "torch", ".", "clamp", "(", "a", ",", "min", "=", "0.", ",", "max", "=", "1.", ")", "\n", "if", "k", "==", "0", ":", "\n", "                            ", "alpha", "=", "a", "\n", "", "out_alpha", ".", "append", "(", "a", ")", "\n", "", "", "else", ":", "\n", "                    ", "out_alpha", "=", "[", "alpha", ",", "related_alpha", "]", "\n", "", "", "else", ":", "\n", "                ", "alpha", "=", "self", ".", "attention", "(", "att_in", ",", "prev_hidden_state", ",", "in_att_maps", ")", "\n", "out_alpha", "=", "alpha", "\n", "", "rnn_input", "=", "(", "att_in", "*", "alpha", ".", "unsqueeze", "(", "2", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "# combine states if pass_state is True", "\n", "", "if", "self", ".", "pass_state", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "in_states", ")", ")", ":", "\n", "                ", "in_states", "[", "i", "]", "=", "in_states", "[", "i", "]", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "-", "1", ")", "# switch to batch first", "\n", "", "if", "len", "(", "in_states", ")", ">", "0", ":", "\n", "                ", "in_states", "=", "torch", ".", "cat", "(", "in_states", ",", "dim", "=", "1", ")", "\n", "in_states", "=", "self", ".", "combine_state", "(", "in_states", ")", "\n", "rnn_input", "=", "torch", ".", "cat", "(", "[", "rnn_input", ",", "in_states", "]", ",", "dim", "=", "1", ")", "\n", "# prepare rnn input", "\n", "", "", "prev_hidden_state", "=", "prev_hidden_state", ".", "view", "(", "batch_size", ",", "self", ".", "rnn_depth", ",", "self", ".", "rnn_dim", ")", "\n", "prev_hidden_state", "=", "prev_hidden_state", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "# swap back", "\n", "rnn_input", "=", "rnn_input", ".", "unsqueeze", "(", "0", ")", "\n", "rnn_output", ",", "hidden_state", "=", "self", ".", "rnn", "(", "rnn_input", ",", "prev_hidden_state", ")", "\n", "# generate proposal if needed", "\n", "if", "gen_proposal", ":", "\n", "            ", "proposal_input", "=", "rnn_output", "[", "0", "]", "# only has one time step, gets that one", "\n", "proposals", "=", "self", ".", "hidden_to_output", "(", "proposal_input", ")", "\n", "return", "proposals", ",", "hidden_state", ",", "out_alpha", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "hidden_state", ",", "out_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.__init__": [[182, 260], ["torch.Module.__init__", "dict", "ComponentNetwork.SentenceNetwork.set_sample_embedding", "words.items", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "ComponentNetwork.ComponentNetwork", "ComponentNetwork.SentenceNetwork.add_module", "type", "ComponentNetwork.ComponentNetwork", "ComponentNetwork.SentenceNetwork.add_module", "type", "ComponentNetwork.ComponentNetwork", "ComponentNetwork.SentenceNetwork.add_module", "str", "str"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.set_sample_embedding"], ["    ", "def", "__init__", "(", "self", ",", "words", ",", "cnn_kernel_size", "=", "7", ",", "n_channels", "=", "50", ",", "attention_dim", "=", "16", ",", "\n", "example_feature", "=", "None", ",", "rnn_dim", "=", "256", ",", "rnn_depth", "=", "1", ",", "output_dim", "=", "9", ",", "\n", "device", "=", "None", ",", "compare_list", "=", "None", ",", "compare_weight", "=", "1", ",", "normalize_size", "=", "False", ",", "\n", "no_attention", "=", "False", ",", "parse_type", "=", "'default'", ",", "pass_state", "=", "False", ")", ":", "\n", "        ", "super", "(", "SentenceNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rnn_depth", "=", "rnn_depth", "\n", "self", ".", "rnn_dim", "=", "rnn_dim", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "compare_list", "=", "compare_list", "\n", "self", ".", "compare_weight", "=", "compare_weight", "\n", "self", ".", "normalize_size", "=", "normalize_size", "\n", "self", ".", "parse_type", "=", "parse_type", "\n", "\n", "self", ".", "current_words", "=", "[", "]", "\n", "self", ".", "current_tree", "=", "[", "]", "\n", "self", ".", "models", "=", "dict", "(", ")", "\n", "self", ".", "hidden_states", "=", "[", "]", "\n", "self", ".", "set_sample_embedding", "(", "n_channels", ",", "cnn_kernel_size", ",", "example_feature", ")", "\n", "for", "word", ",", "nargs", "in", "words", ".", "items", "(", ")", ":", "\n", "            ", "if", "compare_list", "is", "not", "None", ":", "\n", "                ", "skip", "=", "False", "\n", "for", "compare_words", "in", "compare_list", ":", "\n", "                    ", "if", "word", "in", "compare_words", ":", "\n", "                        ", "skip", "=", "True", "\n", "", "", "if", "skip", ":", "\n", "                    ", "continue", "\n", "", "", "if", "parse_type", "!=", "'default'", ":", "\n", "                ", "if", "type", "(", "nargs", ")", "is", "not", "list", ":", "\n", "                    ", "nargs", "=", "[", "nargs", "]", "\n", "", "for", "narg", "in", "nargs", ":", "\n", "                    ", "model_idx", "=", "word", "+", "'_'", "+", "str", "(", "narg", ")", "\n", "self", ".", "models", "[", "model_idx", "]", "=", "ComponentNetwork", "(", "rnn_dim", "=", "rnn_dim", ",", "rnn_depth", "=", "rnn_depth", ",", "\n", "smp_emb_dim", "=", "self", ".", "smp_emb_dim", ",", "\n", "attention_dim", "=", "attention_dim", ",", "\n", "nargs", "=", "narg", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "device", "=", "device", ",", "\n", "no_attention", "=", "no_attention", ",", "\n", "pass_state", "=", "pass_state", ")", "\n", "self", ".", "add_module", "(", "'ComponentNetwork_{}_'", ".", "format", "(", "model_idx", ")", ",", "self", ".", "models", "[", "model_idx", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "models", "[", "word", "]", "=", "ComponentNetwork", "(", "rnn_dim", "=", "rnn_dim", ",", "rnn_depth", "=", "rnn_depth", ",", "\n", "smp_emb_dim", "=", "self", ".", "smp_emb_dim", ",", "\n", "attention_dim", "=", "attention_dim", ",", "\n", "nargs", "=", "nargs", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "device", "=", "device", ",", "\n", "no_attention", "=", "no_attention", ",", "\n", "pass_state", "=", "pass_state", ")", "\n", "self", ".", "add_module", "(", "'ComponentNetwork_{}_'", ".", "format", "(", "word", ")", ",", "self", ".", "models", "[", "word", "]", ")", "\n", "", "", "if", "compare_list", "is", "not", "None", ":", "\n", "# share weights for related words", "\n", "            ", "for", "compare_words", "in", "compare_list", ":", "\n", "                ", "if", "type", "(", "words", "[", "compare_words", "[", "0", "]", "]", ")", "is", "list", ":", "\n", "                    ", "nargs", "=", "words", "[", "compare_words", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                    ", "nargs", "=", "[", "words", "[", "compare_words", "[", "0", "]", "]", "]", "\n", "", "for", "narg", "in", "nargs", ":", "\n", "                    ", "model", "=", "ComponentNetwork", "(", "rnn_dim", "=", "rnn_dim", ",", "rnn_depth", "=", "rnn_depth", ",", "\n", "smp_emb_dim", "=", "self", ".", "smp_emb_dim", ",", "\n", "attention_dim", "=", "attention_dim", ",", "\n", "nargs", "=", "narg", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "device", "=", "device", ",", "\n", "related_words", "=", "compare_words", ",", "\n", "normalize_att", "=", "self", ".", "normalize_size", ",", "\n", "pass_state", "=", "pass_state", ")", "\n", "for", "word", "in", "compare_words", ":", "\n", "                        ", "if", "parse_type", "==", "'default'", ":", "\n", "                            ", "self", ".", "models", "[", "word", "]", "=", "model", "\n", "", "else", ":", "\n", "                            ", "self", ".", "models", "[", "word", "+", "'_'", "+", "str", "(", "narg", ")", "]", "=", "model", "\n", "", "", "word_str", "=", "'_'", ".", "join", "(", "compare_words", ")", "\n", "self", ".", "add_module", "(", "'ComponentNetwork_{}_{}'", ".", "format", "(", "word_str", ",", "narg", ")", ",", "model", ")", "\n", "# set up loss criterion for training", "\n", "", "", "", "self", ".", "loss_criterion", "=", "nn", ".", "NLLLoss", "(", "ignore_index", "=", "0", ",", "reduction", "=", "'none'", ")", "# ignore the padding index", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to": [[261, 264], ["super().to"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "super", "(", "SentenceNetwork", ",", "self", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.set_sample_embedding": [[265, 271], ["model.ConvolutionalNet"], "methods", ["None"], ["", "def", "set_sample_embedding", "(", "self", ",", "n_channels", ",", "cnn_kernel_size", ",", "example_feature", ")", ":", "\n", "        ", "num_in_channels", "=", "example_feature", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "sample_layer", "=", "ConvolutionalNet", "(", "num_channels", "=", "num_in_channels", ",", "\n", "cnn_kernel_size", "=", "cnn_kernel_size", ",", "num_conv_channels", "=", "n_channels", ",", "\n", "dropout_probability", "=", "0.1", ",", "stride", "=", "1", ",", "input_shape", "=", "example_feature", ".", "shape", ")", "\n", "self", ".", "smp_emb_dim", "=", "self", ".", "sample_layer", ".", "cnn_output_shape", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.update_words": [[272, 293], ["model.SentenceNetwork.current_words.append", "model.SentenceNetwork.current_words.append", "model.SentenceNetwork.update_words.update_word_order"], "methods", ["None"], ["", "def", "update_words", "(", "self", ",", "tree", ")", ":", "\n", "        ", "self", ".", "current_words", "=", "[", "]", "\n", "def", "update_word_order", "(", "word", ",", "args", ")", ":", "\n", "            ", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "                ", "for", "arg", "in", "args", ":", "\n", "                    ", "update_word_order", "(", "arg", "[", "0", "]", ",", "arg", "[", "1", ":", "]", ")", "\n", "", "", "self", ".", "current_words", ".", "append", "(", "word", ")", "\n", "", "def", "update_word_order_parse", "(", "node", ")", ":", "\n", "            ", "for", "sub_tree", "in", "node", ".", "children", ":", "\n", "                ", "update_word_order_parse", "(", "sub_tree", ")", "\n", "", "self", ".", "current_words", ".", "append", "(", "node", ".", "name", ")", "\n", "", "self", ".", "current_tree", "=", "tree", "\n", "if", "self", ".", "parse_type", "==", "'default'", ":", "\n", "            ", "update_word_order", "(", "self", ".", "current_tree", "[", "0", "]", ",", "self", ".", "current_tree", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "update_word_order_parse", "(", "self", ".", "current_tree", ")", "\n", "", "self", ".", "prev_hidden_states", "=", "[", "None", "for", "_", "in", "self", ".", "current_words", "]", "\n", "self", ".", "hidden_states", "=", "[", "None", "for", "_", "in", "self", ".", "current_words", "]", "\n", "# store attention map or list of attention maps if it is comparative word", "\n", "self", ".", "att_maps", "=", "[", "None", "for", "_", "in", "self", ".", "current_words", "]", "\n", "self", ".", "proposals", "=", "[", "None", "for", "_", "in", "self", ".", "current_words", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.forward_child": [[295, 321], ["model.SentenceNetwork.models[].forward", "len", "model.SentenceNetwork.forward_child", "states.append", "actions.append", "type", "alphas.append", "alphas.append"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.forward", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.forward_child"], ["", "def", "forward_child", "(", "self", ",", "smp_emb", ",", "word", ",", "args", ",", "gen_proposal", "=", "False", ",", "idx", "=", "0", ")", ":", "\n", "# forward args", "\n", "        ", "alphas", "=", "[", "]", ";", "states", "=", "[", "]", ";", "actions", "=", "[", "]", "\n", "new_idx", "=", "idx", ";", "old_idx", "=", "idx", "\n", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "            ", "for", "arg", "in", "args", ":", "\n", "                ", "new_word", "=", "arg", "[", "0", "]", "\n", "new_args", "=", "arg", "[", "1", ":", "]", "\n", "new_idx", "=", "self", ".", "forward_child", "(", "smp_emb", ",", "new_word", ",", "new_args", ",", "gen_proposal", "=", "gen_proposal", ",", "idx", "=", "new_idx", ")", "\n", "if", "type", "(", "self", ".", "att_maps", "[", "new_idx", "-", "1", "]", ")", "is", "list", ":", "\n", "                    ", "alphas", ".", "append", "(", "self", ".", "att_maps", "[", "new_idx", "-", "1", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "alphas", ".", "append", "(", "self", ".", "att_maps", "[", "new_idx", "-", "1", "]", ")", "\n", "", "states", ".", "append", "(", "self", ".", "hidden_states", "[", "new_idx", "-", "1", "]", ")", "\n", "actions", ".", "append", "(", "self", ".", "proposals", "[", "new_idx", "-", "1", "]", ")", "\n", "# forward current word", "\n", "", "", "prev_hidden_state", "=", "self", ".", "prev_hidden_states", "[", "new_idx", "]", "\n", "out_hidden_states", "=", "None", "\n", "self", ".", "proposals", "[", "new_idx", "]", ",", "out_hidden_states", ",", "self", ".", "att_maps", "[", "new_idx", "]", "=", "self", ".", "models", "[", "word", "]", ".", "forward", "(", "smp_emb", "=", "smp_emb", ",", "\n", "prev_hidden_state", "=", "prev_hidden_state", ",", "\n", "in_att_maps", "=", "alphas", ",", "gen_proposal", "=", "gen_proposal", ",", "\n", "in_states", "=", "states", ",", "in_actions", "=", "actions", ",", "current_word", "=", "word", ")", "\n", "self", ".", "hidden_states", "[", "new_idx", "]", "=", "out_hidden_states", "\n", "new_idx", "+=", "1", "\n", "return", "new_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.forward_child_parse": [[322, 345], ["model.SentenceNetwork.models[].forward", "model.SentenceNetwork.forward_child_parse", "states.append", "actions.append", "type", "alphas.append", "alphas.append", "node.name.split"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.forward", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.forward_child_parse"], ["", "def", "forward_child_parse", "(", "self", ",", "smp_emb", ",", "node", ",", "gen_proposal", "=", "False", ",", "idx", "=", "0", ")", ":", "\n", "# forward args", "\n", "        ", "alphas", "=", "[", "]", ";", "states", "=", "[", "]", ";", "actions", "=", "[", "]", "\n", "new_idx", "=", "idx", ";", "old_idx", "=", "idx", "\n", "for", "arg", "in", "node", ".", "children", ":", "\n", "            ", "new_idx", "=", "self", ".", "forward_child_parse", "(", "smp_emb", ",", "arg", ",", "gen_proposal", "=", "gen_proposal", ",", "idx", "=", "new_idx", ")", "\n", "if", "type", "(", "self", ".", "att_maps", "[", "new_idx", "-", "1", "]", ")", "is", "list", ":", "\n", "                ", "alphas", ".", "append", "(", "self", ".", "att_maps", "[", "new_idx", "-", "1", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "alphas", ".", "append", "(", "self", ".", "att_maps", "[", "new_idx", "-", "1", "]", ")", "\n", "", "states", ".", "append", "(", "self", ".", "hidden_states", "[", "new_idx", "-", "1", "]", ")", "\n", "actions", ".", "append", "(", "self", ".", "proposals", "[", "new_idx", "-", "1", "]", ")", "\n", "# forward current word", "\n", "", "prev_hidden_state", "=", "self", ".", "prev_hidden_states", "[", "new_idx", "]", "\n", "self", ".", "proposals", "[", "new_idx", "]", ",", "self", ".", "hidden_states", "[", "new_idx", "]", ",", "self", ".", "att_maps", "[", "new_idx", "]", "=", "self", ".", "models", "[", "node", ".", "name", "]", ".", "forward", "(", "smp_emb", "=", "smp_emb", ",", "\n", "prev_hidden_state", "=", "prev_hidden_state", ",", "\n", "in_att_maps", "=", "alphas", ",", "gen_proposal", "=", "gen_proposal", ",", "\n", "in_states", "=", "states", ",", "\n", "in_actions", "=", "actions", ",", "\n", "current_word", "=", "node", ".", "name", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "new_idx", "+=", "1", "\n", "return", "new_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.forward": [[346, 362], ["model.SentenceNetwork.sample_layer", "len", "smp_emb.permute.permute.permute", "model.SentenceNetwork.forward_child", "model.SentenceNetwork.forward_child_parse"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.forward_child", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.forward_child_parse"], ["", "def", "forward", "(", "self", ",", "obs", ",", "prev_hidden_states", "=", "None", ")", ":", "\n", "# get low level embeddings", "\n", "        ", "smp_emb", "=", "self", ".", "sample_layer", "(", "obs", ")", "\n", "if", "len", "(", "smp_emb", ".", "shape", ")", "==", "4", ":", "\n", "            ", "smp_emb", "=", "smp_emb", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "# get words", "\n", "", "if", "prev_hidden_states", "is", "not", "None", ":", "\n", "            ", "self", ".", "prev_hidden_states", "=", "prev_hidden_states", "\n", "# make prediction for each word following the parse tree", "\n", "", "if", "self", ".", "parse_type", "==", "'default'", ":", "\n", "            ", "word", "=", "self", ".", "current_tree", "[", "0", "]", "\n", "args", "=", "self", ".", "current_tree", "[", "1", ":", "]", "\n", "self", ".", "forward_child", "(", "smp_emb", ",", "word", ",", "args", ",", "gen_proposal", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "forward_child_parse", "(", "smp_emb", ",", "self", ".", "current_tree", ",", "gen_proposal", "=", "True", ")", "\n", "", "return", "self", ".", "proposals", ",", "self", ".", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.loss": [[363, 404], ["dict", "dict", "situation_batch.permute().to", "target_batch.permute().to.permute().to.permute().to", "target_lengths.to.to.to", "range", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "model.SentenceNetwork.forward", "enumerate", "float", "situation_batch.permute", "target_batch.permute().to.permute().to.permute", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model.SentenceNetwork.loss_criterion", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.nonzero", "optimizer.zero_grad", "total_loss.backward", "optimizer.step", "model.SentenceNetwork.current_words.index", "type", "dict.values", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.forward", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.step"], ["", "def", "loss", "(", "self", ",", "situation_batch", ",", "target_batch", ",", "target_lengths", ",", "optimizer", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "target_lengths", ".", "shape", "[", "0", "]", "\n", "words", "=", "[", "self", ".", "current_words", "[", "-", "1", "]", "]", "# only compute loss from root of the tree", "\n", "hidden_states", "=", "None", "\n", "losses", "=", "dict", "(", ")", ";", "log_probs", "=", "dict", "(", ")", "\n", "for", "word", "in", "words", ":", "\n", "            ", "log_probs", "[", "word", "]", "=", "torch", ".", "zeros", "(", "batch_size", ",", "device", "=", "self", ".", "device", ")", "\n", "# switch to seq-first instead of batch-first", "\n", "", "features", "=", "situation_batch", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "target_batch", "=", "target_batch", ".", "permute", "(", "1", ",", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "target_lengths", "=", "target_lengths", ".", "to", "(", "self", ".", "device", ")", "\n", "# start trainging each time step", "\n", "for", "t", "in", "range", "(", "torch", ".", "max", "(", "target_lengths", ")", ")", ":", "\n", "            ", "proposals", ",", "hidden_states", "=", "self", ".", "forward", "(", "obs", "=", "features", "[", "t", "]", ",", "prev_hidden_states", "=", "hidden_states", ")", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "                ", "target_scores_2d", "=", "F", ".", "log_softmax", "(", "proposals", "[", "self", ".", "current_words", ".", "index", "(", "word", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "log_probs", "[", "word", "]", "+=", "self", ".", "loss_criterion", "(", "target_scores_2d", ",", "target_batch", "[", "t", "]", ")", "\n", "if", "self", ".", "compare_list", "is", "not", "None", ":", "\n", "# compute difference for comparison attention maps", "\n", "                    ", "for", "att_map", "in", "self", ".", "att_maps", ":", "\n", "                        ", "if", "type", "(", "att_map", ")", "is", "list", ":", "# TODO: only works for two words now, make it generic", "\n", "                            ", "att_loss", "=", "torch", ".", "mul", "(", "att_map", "[", "0", "]", ",", "att_map", "[", "1", "]", ")", ".", "sum", "(", "dim", "=", "1", ")", "/", "att_map", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "# add loss", "\n", "log_probs", "[", "word", "]", "+=", "att_loss", "*", "self", ".", "compare_weight", "\n", "# aggregate loss", "\n", "", "", "", "", "", "total_loss", "=", "0", "\n", "for", "word", "in", "words", ":", "\n", "            ", "loss", "=", "log_probs", "[", "word", "]", "/", "target_lengths", "\n", "losses", "[", "word", "]", "=", "torch", ".", "sum", "(", "loss", ")", "/", "batch_size", "\n", "total_loss", "=", "total_loss", "+", "losses", "[", "word", "]", "\n", "# backpropagate if loss != 0", "\n", "", "n_words", "=", "len", "(", "np", ".", "nonzero", "(", "[", "v", "for", "v", "in", "losses", ".", "values", "(", ")", "]", ")", "[", "0", "]", ")", "\n", "if", "n_words", ">", "0", ":", "\n", "            ", "total_loss", "/=", "float", "(", "n_words", ")", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "", "return", "True", ",", "total_loss", ",", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.__init__": [[22, 34], ["collections.defaultdict", "collections.Counter", "gSCAN_dataset.Vocabulary._idx_to_word.index"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sos_token", "=", "\"<SOS>\"", ",", "eos_token", "=", "\"<EOS>\"", ",", "pad_token", "=", "\"<PAD>\"", ")", ":", "\n", "        ", "\"\"\"\n        NB: <PAD> token is by construction idx 0.\n        \"\"\"", "\n", "self", ".", "sos_token", "=", "sos_token", "\n", "self", ".", "eos_token", "=", "eos_token", "\n", "self", ".", "pad_token", "=", "pad_token", "\n", "self", ".", "_idx_to_word", "=", "[", "pad_token", ",", "sos_token", ",", "eos_token", "]", "\n", "self", ".", "_word_to_idx", "=", "defaultdict", "(", "lambda", ":", "self", ".", "_idx_to_word", ".", "index", "(", "self", ".", "pad_token", ")", ")", "\n", "self", ".", "_word_to_idx", "[", "sos_token", "]", "=", "1", "\n", "self", ".", "_word_to_idx", "[", "eos_token", "]", "=", "2", "\n", "self", ".", "_word_frequencies", "=", "Counter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.word_to_idx": [[35, 37], ["None"], "methods", ["None"], ["", "def", "word_to_idx", "(", "self", ",", "word", ":", "str", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_word_to_idx", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.idx_to_word": [[38, 40], ["None"], "methods", ["None"], ["", "def", "idx_to_word", "(", "self", ",", "idx", ":", "int", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_idx_to_word", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.add_sentence": [[41, 47], ["gSCAN_dataset.Vocabulary._idx_to_word.append"], "methods", ["None"], ["", "def", "add_sentence", "(", "self", ",", "sentence", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "for", "word", "in", "sentence", ":", "\n", "            ", "if", "word", "not", "in", "self", ".", "_word_to_idx", ":", "\n", "                ", "self", ".", "_word_to_idx", "[", "word", "]", "=", "self", ".", "size", "\n", "self", ".", "_idx_to_word", ".", "append", "(", "word", ")", "\n", "", "self", ".", "_word_frequencies", "[", "word", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.most_common": [[48, 50], ["gSCAN_dataset.Vocabulary._word_frequencies.most_common"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.most_common"], ["", "", "def", "most_common", "(", "self", ",", "n", "=", "10", ")", ":", "\n", "        ", "return", "self", ".", "_word_frequencies", ".", "most_common", "(", "n", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.pad_idx": [[51, 54], ["gSCAN_dataset.Vocabulary.word_to_idx"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.word_to_idx"], ["", "@", "property", "\n", "def", "pad_idx", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "word_to_idx", "(", "self", ".", "pad_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.sos_idx": [[55, 58], ["gSCAN_dataset.Vocabulary.word_to_idx"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.word_to_idx"], ["", "@", "property", "\n", "def", "sos_idx", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "word_to_idx", "(", "self", ".", "sos_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.eos_idx": [[59, 62], ["gSCAN_dataset.Vocabulary.word_to_idx"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.word_to_idx"], ["", "@", "property", "\n", "def", "eos_idx", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "word_to_idx", "(", "self", ".", "eos_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.size": [[63, 66], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_idx_to_word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.load": [[67, 82], ["os.path.exists", "open", "json.load", "cls", "collections.defaultdict", "all_data[].items", "collections.Counter"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "path", ":", "str", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "\"Trying to load a vocabulary from a non-existing file {}\"", ".", "format", "(", "path", ")", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "infile", ":", "\n", "            ", "all_data", "=", "json", ".", "load", "(", "infile", ")", "\n", "sos_token", "=", "all_data", "[", "\"sos_token\"", "]", "\n", "eos_token", "=", "all_data", "[", "\"eos_token\"", "]", "\n", "pad_token", "=", "all_data", "[", "\"pad_token\"", "]", "\n", "vocab", "=", "cls", "(", "sos_token", "=", "sos_token", ",", "eos_token", "=", "eos_token", ",", "pad_token", "=", "pad_token", ")", "\n", "vocab", ".", "_idx_to_word", "=", "all_data", "[", "\"idx_to_word\"", "]", "\n", "vocab", ".", "_word_to_idx", "=", "defaultdict", "(", "int", ")", "\n", "for", "word", ",", "idx", "in", "all_data", "[", "\"word_to_idx\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "vocab", ".", "_word_to_idx", "[", "word", "]", "=", "idx", "\n", "", "vocab", ".", "_word_frequencies", "=", "Counter", "(", "all_data", "[", "\"word_frequencies\"", "]", ")", "\n", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.to_dict": [[83, 91], ["None"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", "->", "dict", ":", "\n", "        ", "return", "{", "\n", "\"sos_token\"", ":", "self", ".", "sos_token", ",", "\n", "\"eos_token\"", ":", "self", ".", "eos_token", ",", "\n", "\"pad_token\"", ":", "self", ".", "pad_token", ",", "\n", "\"idx_to_word\"", ":", "self", ".", "_idx_to_word", ",", "\n", "\"word_to_idx\"", ":", "self", ".", "_word_to_idx", ",", "\n", "\"word_frequencies\"", ":", "self", ".", "_word_frequencies", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.save": [[93, 97], ["open", "json.dump", "gSCAN_dataset.Vocabulary.to_dict"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Situation.to_dict"], ["", "def", "save", "(", "self", ",", "path", ":", "str", ")", "->", "str", ":", "\n", "        ", "with", "open", "(", "path", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "to_dict", "(", ")", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.__init__": [[104, 146], ["os.path.exists", "GroundedScan.dataset.GroundedScan.dataset.GroundedScan.load_dataset_from_file", "gSCAN_dataset.GroundedScanDataset.dataset._data_statistics.get", "set", "collections.defaultdict", "collections.defaultdict", "os.path.exists", "logger.warning", "logger.info", "[].items", "logger.info", "[].items", "logger.info", "gSCAN_dataset.Vocabulary", "gSCAN_dataset.GroundedScanDataset.read_vocabularies", "logger.info", "logger.info", "gSCAN_dataset.Vocabulary.load", "logger.info", "os.path.join", "logger.info", "items.items", "logger.info", "items.items", "os.path.join", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.load_dataset_from_file", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.read_vocabularies", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.load"], ["def", "__init__", "(", "self", ",", "path_to_data", ":", "str", ",", "save_directory", ":", "str", ",", "k", ":", "int", ",", "split", "=", "\"train\"", ",", "\n", "target_vocabulary_file", "=", "\"\"", ",", "generate_vocabulary", "=", "False", ",", "max_seq_length", "=", "np", ".", "inf", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "path_to_data", ")", ",", "\"Trying to read a gSCAN dataset from a non-existing file {}.\"", ".", "format", "(", "path_to_data", ")", "\n", "# only needs vocabulary for the output action sequences", "\n", "if", "not", "generate_vocabulary", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "save_directory", ",", "target_vocabulary_file", ")", ")", ",", "\"Trying to load vocabularies from non-existing files.\"", "\n", "", "if", "split", "==", "\"test\"", "and", "generate_vocabulary", ":", "\n", "            ", "logger", ".", "warning", "(", "\"WARNING: generating a vocabulary from the test set.\"", ")", "\n", "", "self", ".", "dataset", "=", "GroundedScan", ".", "load_dataset_from_file", "(", "path_to_data", ",", "save_directory", "=", "save_directory", ",", "k", "=", "k", ")", "\n", "if", "self", ".", "dataset", ".", "_data_statistics", ".", "get", "(", "\"adverb_1\"", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Verb-adverb combinations in training set: \"", ")", "\n", "for", "adverb", ",", "items", "in", "self", ".", "dataset", ".", "_data_statistics", "[", "\"train\"", "]", "[", "\"verb_adverb_combinations\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\"Verbs for adverb: {}\"", ".", "format", "(", "adverb", ")", ")", "\n", "for", "key", ",", "count", "in", "items", ".", "items", "(", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "\"   {}: {} occurrences.\"", ".", "format", "(", "key", ",", "count", ")", ")", "\n", "", "", "logger", ".", "info", "(", "\"Verb-adverb combinations in dev set: \"", ")", "\n", "for", "adverb", ",", "items", "in", "self", ".", "dataset", ".", "_data_statistics", "[", "\"dev\"", "]", "[", "\"verb_adverb_combinations\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\"Verbs for adverb: {}\"", ".", "format", "(", "adverb", ")", ")", "\n", "for", "key", ",", "count", "in", "items", ".", "items", "(", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "\"   {}: {} occurrences.\"", ".", "format", "(", "key", ",", "count", ")", ")", "\n", "", "", "", "self", ".", "image_dimensions", "=", "self", ".", "dataset", ".", "situation_image_dimension", "\n", "self", ".", "image_channels", "=", "3", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "directory", "=", "save_directory", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "\n", "# Keeping track of data.", "\n", "# key: input command, value: list of examples", "\n", "self", ".", "_input_commands", "=", "set", "(", ")", "\n", "self", ".", "_examples", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "_target_lengths", "=", "defaultdict", "(", "list", ")", "\n", "if", "generate_vocabulary", ":", "\n", "            ", "logger", ".", "info", "(", "\"Generating vocabularies...\"", ")", "\n", "self", ".", "target_vocabulary", "=", "Vocabulary", "(", ")", "\n", "self", ".", "read_vocabularies", "(", ")", "\n", "logger", ".", "info", "(", "\"Done generating vocabularies.\"", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Loading vocabularies...\"", ")", "\n", "self", ".", "target_vocabulary", "=", "Vocabulary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "save_directory", ",", "target_vocabulary_file", ")", ")", "\n", "logger", ".", "info", "(", "\"Done loading vocabularies.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.read_vocabularies": [[147, 154], ["logger.info", "enumerate", "gSCAN_dataset.GroundedScanDataset.dataset.get_examples_with_image", "gSCAN_dataset.GroundedScanDataset.target_vocabulary.add_sentence"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_examples_with_image", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.add_sentence"], ["", "", "def", "read_vocabularies", "(", "self", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"\n        Loop over all examples in the dataset and add the words in them to the vocabularies.\n        \"\"\"", "\n", "logger", ".", "info", "(", "\"Populating vocabulary...\"", ")", "\n", "for", "i", ",", "example", "in", "enumerate", "(", "self", ".", "dataset", ".", "get_examples_with_image", "(", "self", ".", "split", ")", ")", ":", "\n", "            ", "self", ".", "target_vocabulary", ".", "add_sentence", "(", "example", "[", "\"target_command\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.save_vocabularies": [[155, 157], ["gSCAN_dataset.GroundedScanDataset.target_vocabulary.save", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.save"], ["", "", "def", "save_vocabularies", "(", "self", ",", "target_vocabulary_file", ":", "str", ")", ":", "\n", "        ", "self", ".", "target_vocabulary", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "target_vocabulary_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.get_vocabulary": [[158, 164], ["ValueError"], "methods", ["None"], ["", "def", "get_vocabulary", "(", "self", ",", "vocabulary", ":", "str", ")", "->", "Vocabulary", ":", "\n", "        ", "if", "vocabulary", "==", "\"target\"", ":", "\n", "            ", "vocab", "=", "self", ".", "target_vocabulary", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Specified unknown vocabulary in sentence_to_array: {}\"", ".", "format", "(", "vocabulary", ")", ")", "\n", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.shuffle_data": [[165, 170], ["random.shuffle"], "methods", ["None"], ["", "def", "shuffle_data", "(", "self", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"\n        Reorder the data examples and reorder the lengths of the input and target commands accordingly.\n        \"\"\"", "\n", "random", ".", "shuffle", "(", "self", ".", "_input_commands", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.get_data_iterator": [[171, 217], ["range", "len", "numpy.max", "torch.cat", "input_text_batch.append", "target_batch.append", "situation_batch.append", "situation_representation_batch.append", "derivation_representation_batch.append", "agent_positions_batch.append", "target_positions_batch.append", "example[].size", "example[].size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros", "int", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.size", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.size"], ["", "def", "get_data_iterator", "(", "self", ",", "batch_size", "=", "10", ",", "is_test", "=", "False", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "\n", "List", "[", "int", "]", ",", "torch", ".", "Tensor", ",", "List", "[", "dict", "]", ",", "torch", ".", "Tensor", ",", "List", "[", "int", "]", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Iterate over batches of example tensors, pad them to the max length in the batch and yield.\n        :param batch_size: how many examples to put in each batch.\n        :param is_test: running test or not.\n        :return: tuple of input commands batch, situation image batch,\n        list of corresponding situation representations, target commands batch and corresponding target lengths.\n        \"\"\"", "\n", "for", "input_text", "in", "self", ".", "_input_commands", ":", "\n", "            ", "for", "example_i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "_examples", "[", "input_text", "]", ")", ",", "batch_size", ")", ":", "\n", "                ", "examples", "=", "self", ".", "_examples", "[", "input_text", "]", "[", "example_i", ":", "example_i", "+", "batch_size", "]", "\n", "target_lengths", "=", "self", ".", "_target_lengths", "[", "input_text", "]", "[", "example_i", ":", "example_i", "+", "batch_size", "]", "\n", "max_target_length", "=", "np", ".", "max", "(", "target_lengths", ")", "\n", "input_text_batch", "=", "[", "]", "\n", "target_batch", "=", "[", "]", "\n", "situation_batch", "=", "[", "]", "\n", "situation_representation_batch", "=", "[", "]", "\n", "derivation_representation_batch", "=", "[", "]", "\n", "agent_positions_batch", "=", "[", "]", "\n", "target_positions_batch", "=", "[", "]", "\n", "for", "example", "in", "examples", ":", "\n", "                    ", "to_pad_target", "=", "max_target_length", "-", "example", "[", "\"target_tensor\"", "]", ".", "size", "(", "1", ")", "\n", "padded_target", "=", "torch", ".", "cat", "(", "[", "\n", "example", "[", "\"target_tensor\"", "]", ",", "\n", "torch", ".", "zeros", "(", "int", "(", "to_pad_target", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "unsqueeze", "(", "0", ")", "]", ",", "dim", "=", "1", ")", "\n", "to_pad_situation", "=", "max_target_length", "-", "example", "[", "\"situation_tensor\"", "]", ".", "size", "(", "1", ")", "\n", "if", "to_pad_situation", ">", "0", "and", "not", "is_test", ":", "\n", "                        ", "situation_size", "=", "example", "[", "\"situation_tensor\"", "]", ".", "shape", "\n", "pad_size", "=", "(", "to_pad_situation", ",", "situation_size", "[", "2", "]", ",", "situation_size", "[", "3", "]", ",", "situation_size", "[", "4", "]", ")", "\n", "padded_situation", "=", "torch", ".", "cat", "(", "[", "\n", "example", "[", "\"situation_tensor\"", "]", ",", "\n", "torch", ".", "zeros", "(", "pad_size", ")", ".", "unsqueeze", "(", "0", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                        ", "padded_situation", "=", "example", "[", "\"situation_tensor\"", "]", "\n", "", "input_text_batch", ".", "append", "(", "input_text", ")", "\n", "target_batch", ".", "append", "(", "padded_target", ")", "\n", "situation_batch", ".", "append", "(", "padded_situation", ")", "\n", "situation_representation_batch", ".", "append", "(", "example", "[", "\"situation_representation\"", "]", ")", "\n", "derivation_representation_batch", ".", "append", "(", "example", "[", "\"derivation_representation\"", "]", ")", "\n", "agent_positions_batch", ".", "append", "(", "example", "[", "\"agent_position\"", "]", ")", "\n", "target_positions_batch", ".", "append", "(", "example", "[", "\"target_position\"", "]", ")", "\n", "\n", "", "yield", "(", "input_text_batch", ",", "derivation_representation_batch", ",", "\n", "torch", ".", "cat", "(", "situation_batch", ",", "dim", "=", "0", ")", ",", "situation_representation_batch", ",", "torch", ".", "cat", "(", "target_batch", ",", "dim", "=", "0", ")", ",", "\n", "target_lengths", ",", "torch", ".", "cat", "(", "agent_positions_batch", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "target_positions_batch", ",", "dim", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.read_dataset": [[218, 264], ["logger.info", "enumerate", "list", "gSCAN_dataset.GroundedScanDataset.dataset.get_examples_with_image", "gSCAN_dataset.GroundedScanDataset.sentence_to_array", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "gSCAN_dataset.GroundedScanDataset._input_commands.add", "gSCAN_dataset.GroundedScanDataset._target_lengths[].append", "gSCAN_dataset.GroundedScanDataset._examples[].append", "len", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_examples_with_image", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.sentence_to_array"], ["", "", "", "def", "read_dataset", "(", "self", ",", "max_examples", "=", "None", ",", "simple_situation_representation", "=", "True", ",", "is_test", "=", "False", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"\n        Loop over the data examples in GroundedScan and convert them to tensors, also save the lengths\n        for input and target sequences that are needed for padding.\n        :param max_examples: how many examples to read maximally, read all if None.\n        :param simple_situation_representation: whether to read the full situation image in RGB or the simplified\n        smaller representation.\n        :param is_test: running test or not.\n        \"\"\"", "\n", "logger", ".", "info", "(", "\"Converting dataset to tensors...\"", ")", "\n", "for", "i", ",", "example", "in", "enumerate", "(", "self", ".", "dataset", ".", "get_examples_with_image", "(", "self", ".", "split", ",", "simple_situation_representation", ")", ")", ":", "\n", "            ", "if", "max_examples", ":", "\n", "                ", "if", "len", "(", "self", ".", "_examples", ")", ">", "max_examples", ":", "\n", "                    ", "return", "\n", "", "", "empty_example", "=", "{", "}", "\n", "input_commands", "=", "example", "[", "\"input_command\"", "]", "\n", "input_text", "=", "' '", ".", "join", "(", "input_commands", ")", "\n", "target_commands", "=", "example", "[", "\"target_command\"", "]", "\n", "situation_images", "=", "example", "[", "\"situation_images\"", "]", "\n", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "image_dimensions", "=", "situation_images", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "self", ".", "image_channels", "=", "situation_images", "[", "0", "]", ".", "shape", "[", "-", "1", "]", "\n", "", "situation_repr", "=", "example", "[", "\"situation_representation\"", "]", "\n", "target_array", "=", "self", ".", "sentence_to_array", "(", "target_commands", ",", "vocabulary", "=", "\"target\"", ")", "\n", "if", "len", "(", "target_array", ")", ">", "self", ".", "max_seq_length", "+", "1", ":", "# skip the last target token", "\n", "                ", "continue", "\n", "", "empty_example", "[", "\"target_tensor\"", "]", "=", "torch", ".", "tensor", "(", "target_array", ",", "dtype", "=", "torch", ".", "long", ")", ".", "unsqueeze", "(", "\n", "dim", "=", "0", ")", "\n", "if", "is_test", ":", "\n", "                ", "empty_example", "[", "\"situation_tensor\"", "]", "=", "torch", ".", "tensor", "(", "situation_images", "[", ":", "1", "]", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "empty_example", "[", "\"situation_tensor\"", "]", "=", "torch", ".", "tensor", "(", "situation_images", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "", "empty_example", "[", "\"situation_representation\"", "]", "=", "situation_repr", "\n", "empty_example", "[", "\"derivation_representation\"", "]", "=", "example", "[", "\"derivation_representation\"", "]", "\n", "empty_example", "[", "\"agent_position\"", "]", "=", "torch", ".", "tensor", "(", "\n", "(", "int", "(", "situation_repr", "[", "\"agent_position\"", "]", "[", "\"row\"", "]", ")", "*", "int", "(", "situation_repr", "[", "\"grid_size\"", "]", ")", ")", "+", "\n", "int", "(", "situation_repr", "[", "\"agent_position\"", "]", "[", "\"column\"", "]", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "empty_example", "[", "\"target_position\"", "]", "=", "torch", ".", "tensor", "(", "\n", "(", "int", "(", "situation_repr", "[", "\"target_object\"", "]", "[", "\"position\"", "]", "[", "\"row\"", "]", ")", "*", "int", "(", "situation_repr", "[", "\"grid_size\"", "]", ")", ")", "+", "\n", "int", "(", "situation_repr", "[", "\"target_object\"", "]", "[", "\"position\"", "]", "[", "\"column\"", "]", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "# update data", "\n", "self", ".", "_input_commands", ".", "add", "(", "input_text", ")", "\n", "self", ".", "_target_lengths", "[", "input_text", "]", ".", "append", "(", "len", "(", "target_array", ")", ")", "\n", "self", ".", "_examples", "[", "input_text", "]", ".", "append", "(", "empty_example", ")", "\n", "", "self", ".", "_input_commands", "=", "list", "(", "self", ".", "_input_commands", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.sentence_to_array": [[265, 279], ["gSCAN_dataset.GroundedScanDataset.get_vocabulary", "sentence_array.append", "sentence_array.append", "gSCAN_dataset.GroundedScanDataset.word_to_idx"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.get_vocabulary", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.word_to_idx"], ["", "def", "sentence_to_array", "(", "self", ",", "sentence", ":", "List", "[", "str", "]", ",", "vocabulary", ":", "str", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "\"\"\"\n        Convert each string word in a sentence to the corresponding integer from the vocabulary and append\n        a start-of-sequence and end-of-sequence token.\n        :param sentence: the sentence in words (strings)\n        :param vocabulary: whether to use the input or target vocabulary.\n        :return: the sentence in integers.\n        \"\"\"", "\n", "vocab", "=", "self", ".", "get_vocabulary", "(", "vocabulary", ")", "\n", "sentence_array", "=", "[", "]", "\n", "for", "word", "in", "sentence", ":", "\n", "            ", "sentence_array", ".", "append", "(", "vocab", ".", "word_to_idx", "(", "word", ")", ")", "\n", "", "sentence_array", ".", "append", "(", "vocab", ".", "eos_idx", ")", "\n", "return", "sentence_array", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.array_to_sentence": [[280, 288], ["vocab.idx_to_word"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.idx_to_word"], ["", "def", "array_to_sentence", "(", "self", ",", "sentence_array", ":", "List", "[", "int", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Translate each integer in a sentence array to the corresponding word.\n        :param sentence_array: array with integers representing words from the vocabulary.\n        :return: the sentence in words.\n        \"\"\"", "\n", "vocab", "=", "self", ".", "target_vocabulary", "\n", "return", "[", "vocab", ".", "idx_to_word", "(", "word_idx", ")", "for", "word_idx", "in", "sentence_array", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.num_examples": [[289, 295], ["gSCAN_dataset.GroundedScanDataset._examples.keys", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_examples", "(", "self", ")", ":", "\n", "        ", "n_examples", "=", "0", "\n", "for", "text", "in", "self", ".", "_examples", ".", "keys", "(", ")", ":", "\n", "            ", "n_examples", "+=", "len", "(", "self", ".", "_examples", "[", "text", "]", ")", "\n", "", "return", "n_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.GroundedScanDataset.target_vocabulary_size": [[296, 299], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "target_vocabulary_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "target_vocabulary", ".", "size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.Grammar.__init__": [[69, 76], ["grammar.Grammar._load_from_file", "nltk.parse.BottomUpLeftCornerChartParser", "os.path.dirname", "os.path.realpath"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.Grammar._load_from_file"], ["    ", "def", "__init__", "(", "self", ",", "cfg_filename", "=", "''", ",", "terminals", "=", "TERMINALS", ")", ":", "\n", "        ", "if", "cfg_filename", "==", "''", ":", "\n", "            ", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "cfg_filename", "=", "dir_path", "+", "'/grammar.cfg'", "\n", "", "self", ".", "grammar", "=", "self", ".", "_load_from_file", "(", "cfg_filename", ")", "\n", "self", ".", "parser", "=", "BottomUpLeftCornerChartParser", "(", "self", ".", "grammar", ")", "\n", "self", ".", "terminals", "=", "terminals", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.Grammar.sample_sentence": [[77, 109], ["collections.defaultdict", "grammar.Grammar.sample_sentence.generate_sample"], "methods", ["None"], ["", "def", "sample_sentence", "(", "self", ",", "cfactor", "=", "0.5", ")", ":", "\n", "        ", "pcount", "=", "defaultdict", "(", "int", ")", "\n", "\n", "def", "weighted_choice", "(", "weights", ")", ":", "\n", "            ", "rnd", "=", "random", ".", "random", "(", ")", "*", "sum", "(", "weights", ")", "\n", "for", "i", ",", "w", "in", "enumerate", "(", "weights", ")", ":", "\n", "                ", "rnd", "-=", "w", "\n", "if", "rnd", "<", "0", ":", "\n", "                    ", "return", "i", "\n", "\n", "", "", "", "def", "generate_sample", "(", "grammar", ",", "prod", ",", "frags", ")", ":", "\n", "            ", "if", "prod", "in", "grammar", ".", "_lhs_index", ":", "# derivation", "\n", "                ", "derivations", "=", "grammar", ".", "_lhs_index", "[", "prod", "]", "\n", "weights", "=", "[", "]", "\n", "for", "prod", "in", "derivations", ":", "\n", "                    ", "if", "prod", "in", "pcount", ":", "\n", "                       ", "weights", ".", "append", "(", "cfactor", "**", "(", "pcount", "[", "prod", "]", ")", ")", "\n", "", "else", ":", "\n", "                        ", "weights", ".", "append", "(", "1.0", ")", "\n", "# tend to not sample the already expanded productions", "\n", "", "", "derivation", "=", "derivations", "[", "weighted_choice", "(", "weights", ")", "]", "\n", "pcount", "[", "derivation", "]", "+=", "1", "\n", "for", "d", "in", "derivation", ".", "_rhs", ":", "\n", "                    ", "generate_sample", "(", "grammar", ",", "d", ",", "frags", ")", "\n", "", "pcount", "[", "derivation", "]", "-=", "1", "\n", "", "elif", "prod", "in", "grammar", ".", "_rhs_index", ":", "# terminal", "\n", "                ", "prod", "=", "str", "(", "prod", ")", "\n", "frags", ".", "append", "(", "prod", ")", "\n", "", "", "frags", "=", "[", "]", "\n", "generate_sample", "(", "self", ".", "grammar", ",", "self", ".", "grammar", ".", "start", "(", ")", ",", "frags", ")", "\n", "parse", "=", "self", ".", "parser", ".", "parse", "(", "frags", ")", "\n", "return", "frags", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.Grammar.arg_tree": [[110, 117], ["grammar.Grammar.parser.parse", "grammar.to_arg_tree", "grammar.reorg_arg_tree"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.StanfordDependencyParser.parse", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.to_arg_tree", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.reorg_arg_tree"], ["", "def", "arg_tree", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parser", ".", "parse", "(", "sentence", ")", ":", "\n", "            ", "parse", "=", "p", "\n", "break", "\n", "", "arg_tree", "=", "to_arg_tree", "(", "parse", ",", "self", ".", "terminals", ")", "\n", "arg_tree", "=", "reorg_arg_tree", "(", "arg_tree", ")", "\n", "return", "arg_tree", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.Grammar._load_from_file": [[118, 122], ["url.replace", "nltk.data.load"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Term.replace", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.load"], ["", "def", "_load_from_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "url", "=", "'file:%s'", "%", "filename", "\n", "url", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "return", "nltk_data", ".", "load", "(", "url", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.to_arg_tree": [[23, 36], ["sub_tree.label", "sub_tree.label", "args.append", "grammar.to_arg_tree", "args.append", "sub_tree.leaves"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.to_arg_tree"], ["def", "to_arg_tree", "(", "parse", ",", "terminals", ")", ":", "\n", "    ", "args", "=", "[", "]", "\n", "for", "sub_tree", "in", "parse", ":", "\n", "        ", "if", "sub_tree", ".", "label", "(", ")", "in", "terminals", ":", "\n", "            ", "value", "=", "sub_tree", ".", "leaves", "(", ")", "[", "0", "]", "\n", "pos", "=", "sub_tree", ".", "label", "(", ")", "\n", "if", "pos", "in", "[", "'DIR'", ",", "'DET'", "]", ":", "\n", "                ", "continue", "\n", "", "args", ".", "append", "(", "value", ")", "\n", "", "else", ":", "\n", "            ", "new_args", "=", "to_arg_tree", "(", "sub_tree", ",", "terminals", ")", "\n", "args", ".", "append", "(", "new_args", ")", "\n", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.reorg_arg_tree": [[38, 50], ["len", "type", "grammar.reorg_arg_tree", "len", "type", "grammar.reorg_arg_tree", "grammar.reorg_arg_tree"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.reorg_arg_tree", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.reorg_arg_tree", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.reorg_arg_tree"], ["", "def", "reorg_arg_tree", "(", "arg_tree", ")", ":", "\n", "    ", "if", "len", "(", "arg_tree", ")", "==", "1", ":", "\n", "        ", "if", "type", "(", "arg_tree", "[", "0", "]", ")", "is", "list", ":", "\n", "            ", "return", "reorg_arg_tree", "(", "arg_tree", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "arg_tree", "[", "0", "]", "]", "\n", "", "", "elif", "len", "(", "arg_tree", ")", "==", "2", ":", "\n", "        ", "if", "type", "(", "arg_tree", "[", "0", "]", ")", "is", "str", ":", "\n", "            ", "return", "[", "arg_tree", "[", "0", "]", ",", "reorg_arg_tree", "(", "arg_tree", "[", "1", "]", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "arg_tree", "[", "1", "]", ",", "reorg_arg_tree", "(", "arg_tree", "[", "0", "]", ")", "]", "\n", "", "", "return", "arg_tree", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.grammar.split_str": [[52, 66], ["text.split", "enumerate", "out.append", "out.append"], "function", ["None"], ["", "def", "split_str", "(", "text", ")", ":", "\n", "    ", "\"\"\"Special split to make sure `while verb-ing` are combined together\"\"\"", "\n", "parts", "=", "text", ".", "split", "(", "' '", ")", "\n", "out", "=", "[", "]", ";", "skip", "=", "False", "\n", "for", "i", ",", "part", "in", "enumerate", "(", "parts", ")", ":", "\n", "        ", "if", "skip", ":", "\n", "            ", "skip", "=", "False", "\n", "continue", "\n", "", "if", "part", "==", "'while'", ":", "\n", "            ", "out", ".", "append", "(", "part", "+", "' '", "+", "parts", "[", "i", "+", "1", "]", ")", "\n", "skip", "=", "True", "\n", "", "else", ":", "\n", "            ", "out", ".", "append", "(", "part", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.ArgNode.__init__": [[8, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "children", "=", "[", "]", "\n", "self", ".", "parent", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.ArgNode.narg": [[13, 16], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "narg", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "children", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.ArgNode.__str__": [[17, 23], ["c.__str__"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.__str__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "narg", ">", "0", ":", "\n", "            ", "children_str", "=", "', '", ".", "join", "(", "[", "c", ".", "__str__", "(", ")", "for", "c", "in", "self", ".", "children", "]", ")", "\n", "return", "self", ".", "name", "+", "' [ '", "+", "children_str", "+", "' ]'", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.Parser.__init__": [[71, 75], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "None", "\n", "self", ".", "words", "=", "[", "]", "# including leaves and intermediate nodes", "\n", "self", ".", "word2narg", "=", "{", "}", "# number of args supported for each node", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.Parser.parse": [[76, 82], ["parse.Parser.model.predict", "parse.to_arg_tree", "parse.relabel_narg"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.predict.predict", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.to_arg_tree", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.relabel_narg"], ["", "def", "parse", "(", "self", ",", "text", ")", ":", "\n", "        ", "out", "=", "self", ".", "model", ".", "predict", "(", "text", ")", "\n", "root", "=", "out", "[", "'hierplane_tree'", "]", "[", "'root'", "]", "\n", "arg_tree", "=", "to_arg_tree", "(", "root", ")", "\n", "relabel_narg", "(", "arg_tree", ")", "\n", "return", "arg_tree", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.ConstituencyParser.__init__": [[85, 96], ["parse.Parser.__init__", "allennlp.predictors.predictor.Predictor.from_path", "parse.ConstituencyParser.words.extend", "parse.ConstituencyParser.word2narg.keys"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "predictor", "=", "Predictor", ".", "from_path", "(", "\"https://storage.googleapis.com/allennlp-public-models/elmo-constituency-parser-2020.02.10.tar.gz\"", ")", "\n", "self", ".", "words", "=", "WORDS", "\n", "self", ".", "words", ".", "extend", "(", "[", "'VP'", ",", "'NP'", "]", ")", "\n", "self", ".", "word2narg", "=", "WORD2NARG", "\n", "for", "key", "in", "self", ".", "word2narg", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "word2narg", "[", "key", "]", "=", "0", "\n", "", "self", ".", "word2narg", "[", "'VP'", "]", "=", "[", "2", ",", "3", "]", "\n", "self", ".", "word2narg", "[", "'NP'", "]", "=", "[", "1", ",", "2", ",", "3", "]", "\n", "self", ".", "word2narg", "[", "'cautiously'", "]", "=", "[", "0", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.StanfordDependencyParser.__init__": [[99, 111], ["stanza.Pipeline", "parse.StanfordDependencyParser.word2narg.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "stanza", ".", "Pipeline", "(", "lang", "=", "'en'", ",", "processors", "=", "'tokenize,pos,lemma,depparse'", ")", "\n", "self", ".", "words", "=", "WORDS", "\n", "self", ".", "word2narg", "=", "WORD2NARG", "\n", "for", "key", "in", "self", ".", "word2narg", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "word2narg", "[", "key", "]", "=", "0", "\n", "", "self", ".", "word2narg", "[", "'walk'", "]", "=", "[", "1", ",", "2", "]", "\n", "self", ".", "word2narg", "[", "'push'", "]", "=", "[", "1", ",", "2", "]", "\n", "self", ".", "word2narg", "[", "'pull'", "]", "=", "[", "1", ",", "2", "]", "\n", "self", ".", "word2narg", "[", "'circle'", "]", "=", "[", "0", ",", "1", ",", "2", "]", "\n", "self", ".", "word2narg", "[", "'square'", "]", "=", "[", "0", ",", "1", ",", "2", "]", "\n", "self", ".", "word2narg", "[", "'cylinder'", "]", "=", "[", "0", ",", "1", ",", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.StanfordDependencyParser.parse": [[112, 131], ["parse.StanfordDependencyParser.model", "range", "parse.relabel_narg", "len", "parse.ArgNode", "parse.ArgNode", "sub_tree[].children.append"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.relabel_narg"], ["", "def", "parse", "(", "self", ",", "text", ")", ":", "\n", "        ", "doc", "=", "self", ".", "model", "(", "text", ")", "\n", "sub_tree", "=", "{", "}", "\n", "for", "head_idx", "in", "range", "(", "len", "(", "doc", ".", "sentences", "[", "0", "]", ".", "words", ")", "+", "1", ")", ":", "\n", "            ", "for", "word", "in", "doc", ".", "sentences", "[", "0", "]", ".", "words", ":", "\n", "                ", "if", "word", ".", "head", "!=", "head_idx", ":", "\n", "                    ", "continue", "\n", "", "if", "word", ".", "text", "in", "[", "'to'", ",", "'a'", ",", "'while'", ",", "'the'", "]", ":", "\n", "                    ", "continue", "\n", "", "if", "word", ".", "text", "in", "[", "'zigzagging'", ",", "'spinning'", "]", ":", "\n", "                    ", "node", "=", "ArgNode", "(", "'while '", "+", "word", ".", "text", ")", "\n", "", "else", ":", "\n", "                    ", "node", "=", "ArgNode", "(", "word", ".", "text", ")", "\n", "", "if", "word", ".", "head", ">", "0", ":", "\n", "                    ", "node", ".", "parent", "=", "sub_tree", "[", "word", ".", "head", "]", "\n", "sub_tree", "[", "word", ".", "head", "]", ".", "children", ".", "append", "(", "node", ")", "\n", "", "sub_tree", "[", "word", ".", "id", "]", "=", "node", "\n", "", "", "relabel_narg", "(", "sub_tree", "[", "1", "]", ")", "\n", "return", "sub_tree", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.to_arg_tree": [[24, 62], ["parse.ArgNode", "parse.keys", "parent.children.append", "len", "parse.ArgNode", "parse.ArgNode", "parse.to_arg_tree", "value.split", "parent.children.append", "parse.to_arg_tree", "parent.children.append", "parse.keys", "to_arg_tree.children.append", "parse.to_arg_tree", "parse.to_arg_tree", "parse.ArgNode"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.to_arg_tree", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.to_arg_tree", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.to_arg_tree", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.to_arg_tree"], ["", "", "", "def", "to_arg_tree", "(", "parse", ",", "parent", "=", "None", ")", ":", "\n", "    ", "node", "=", "None", "\n", "value", "=", "parse", "[", "'word'", "]", "\n", "pos", "=", "parse", "[", "'attributes'", "]", "[", "0", "]", "\n", "if", "pos", "not", "in", "[", "'S'", ",", "'ADP'", ",", "'DET'", ",", "'SCONJ'", "]", ":", "\n", "        ", "if", "value", "in", "[", "'zigzagging'", ",", "'spinning'", "]", ":", "\n", "            ", "node", "=", "ArgNode", "(", "'while '", "+", "value", ")", "\n", "node", ".", "parent", "=", "parent", "\n", "if", "parent", ":", "parent", ".", "children", ".", "append", "(", "node", ")", "\n", "", "elif", "len", "(", "value", ".", "split", "(", "' '", ")", ")", ">", "1", ":", "# intermediate nodes", "\n", "            ", "node", "=", "ArgNode", "(", "pos", ")", "\n", "node", ".", "parent", "=", "parent", "\n", "if", "parent", ":", "parent", ".", "children", ".", "append", "(", "node", ")", "\n", "for", "sub_tree", "in", "parse", "[", "'children'", "]", ":", "\n", "                ", "value", "=", "sub_tree", "[", "'word'", "]", "\n", "pos", "=", "sub_tree", "[", "'attributes'", "]", "[", "0", "]", "\n", "if", "pos", "in", "[", "'IN'", ",", "'DT'", "]", ":", "# constituency parse", "\n", "                    ", "continue", "\n", "", "if", "pos", "==", "'SBAR'", "or", "pos", "==", "'ADVP'", ":", "\n", "                    ", "node", ".", "children", ".", "append", "(", "ArgNode", "(", "value", ")", ")", "\n", "node", ".", "children", "[", "-", "1", "]", ".", "parent", "=", "node", "\n", "continue", "\n", "", "if", "pos", "==", "'PP'", ":", "\n", "                    ", "to_arg_tree", "(", "sub_tree", "[", "'children'", "]", "[", "1", "]", ",", "node", ")", "\n", "continue", "\n", "", "to_arg_tree", "(", "sub_tree", ",", "node", ")", "\n", "", "", "else", ":", "\n", "            ", "node", "=", "ArgNode", "(", "value", ")", "\n", "node", ".", "parent", "=", "parent", "\n", "if", "parent", ":", "parent", ".", "children", ".", "append", "(", "node", ")", "\n", "if", "'children'", "in", "parse", ".", "keys", "(", ")", ":", "\n", "                ", "for", "sub_tree", "in", "parse", "[", "'children'", "]", ":", "\n", "                    ", "to_arg_tree", "(", "sub_tree", ",", "node", ")", "\n", "", "", "", "", "else", ":", "\n", "        ", "if", "'children'", "in", "parse", ".", "keys", "(", ")", ":", "\n", "            ", "for", "sub_tree", "in", "parse", "[", "'children'", "]", ":", "\n", "                ", "node", "=", "to_arg_tree", "(", "sub_tree", ",", "parent", ")", "\n", "", "", "", "return", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.relabel_narg": [[64, 68], ["str", "parse.relabel_narg"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.language.parse.relabel_narg"], ["", "def", "relabel_narg", "(", "node", ")", ":", "\n", "    ", "node", ".", "name", "=", "node", ".", "name", "+", "'_'", "+", "str", "(", "node", ".", "narg", ")", "\n", "for", "sub_tree", "in", "node", ".", "children", ":", "\n", "        ", "relabel_narg", "(", "sub_tree", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.__init__": [[14, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "file", ")", ":", "\n", "        ", "self", ".", "file", "=", "file", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write": [[17, 21], ["len", "tqdm.tqdm.write", "x.rstrip"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write"], ["", "def", "write", "(", "self", ",", "x", ")", ":", "\n", "# Avoid print() second call (useless \\n)", "\n", "        ", "if", "len", "(", "x", ".", "rstrip", "(", ")", ")", ">", "0", ":", "\n", "            ", "tqdm", ".", "tqdm", ".", "write", "(", "x", ",", "file", "=", "self", ".", "file", ",", "end", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.flush": [[22, 24], ["getattr"], "methods", ["None"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "file", ",", "\"flush\"", ",", "lambda", ":", "None", ")", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.get_logger": [[26, 34], ["logging.getLogger", "logging.getLogger.setLevel", "logging.basicConfig", "logging.getLogger", "logger.DummyTqdmFile"], "function", ["None"], ["", "", "def", "get_logger", "(", "name", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "# temp fix to avoid PIL logging polution", "\n", "    ", "pil_logger", "=", "logging", ".", "getLogger", "(", "'PIL'", ")", "\n", "pil_logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "# our logger", "\n", "logging", ".", "basicConfig", "(", "level", "=", "level", ",", "stream", "=", "DummyTqdmFile", "(", "sys", ".", "stderr", ")", ")", "\n", "log", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.log_model_params": [[36, 44], ["model.named_parameters", "tag.replace().replace.replace().replace", "writer.add_histogram", "value.data.cpu().numpy", "writer.add_histogram", "tag.replace().replace.replace", "value.grad.data.cpu().numpy", "value.data.cpu", "value.grad.data.cpu"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Term.replace", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Term.replace"], ["", "def", "log_model_params", "(", "model", ",", "writer", ",", "name", ",", "n_update", ")", ":", "\n", "    ", "for", "tag", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "tag", "=", "tag", ".", "replace", "(", "'.'", ",", "'/'", ")", ".", "replace", "(", "' '", ",", "'_'", ")", "\n", "writer", ".", "add_histogram", "(", "name", "+", "'_'", "+", "tag", ",", "\n", "value", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "n_update", ")", "\n", "if", "value", ".", "grad", "is", "not", "None", ":", "\n", "            ", "writer", ".", "add_histogram", "(", "name", "+", "'_'", "+", "tag", "+", "'/grad'", ",", "\n", "value", ".", "grad", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "n_update", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.make_filter_image": [[46, 54], ["layer.weight.data.to", "torchvision.utils.make_grid", "weights.view.view", "weights.view.size", "weights.view.size", "weights.view.size", "weights.view.size", "weights.view.size"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.model.SentenceNetwork.to", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.size", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.size", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.size", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.size", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.size"], ["", "", "", "def", "make_filter_image", "(", "layer", ",", "use_color", "=", "True", ",", "scale_each", "=", "True", ")", ":", "\n", "    ", "\"\"\"Build an image of the weights of the filters in a given convolutional layer.\"\"\"", "\n", "weights", "=", "layer", ".", "weight", ".", "data", ".", "to", "(", "\"cpu\"", ")", "\n", "if", "not", "use_color", ":", "\n", "        ", "n_input_channels", "=", "weights", ".", "size", "(", ")", "[", "1", "]", "\n", "weights", "=", "weights", ".", "view", "(", "[", "weights", ".", "size", "(", ")", "[", "0", "]", ",", "1", ",", "weights", ".", "size", "(", ")", "[", "1", "]", "*", "weights", ".", "size", "(", ")", "[", "2", "]", ",", "weights", ".", "size", "(", ")", "[", "3", "]", "]", ")", "\n", "", "img", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "weights", ",", "normalize", "=", "True", ",", "scale_each", "=", "scale_each", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.log_conv_filters": [[56, 60], ["writer.add_image", "writer.add_image", "writer.add_image", "logger.make_filter_image", "logger.make_filter_image", "logger.make_filter_image"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.make_filter_image", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.make_filter_image", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.make_filter_image"], ["", "def", "log_conv_filters", "(", "model", ",", "writer", ",", "n_update", ")", ":", "\n", "    ", "writer", ".", "add_image", "(", "'image/conv1'", ",", "make_filter_image", "(", "model", ".", "sample_layer", ".", "conv_1", ",", "use_color", "=", "False", ")", ",", "n_update", ")", "\n", "writer", ".", "add_image", "(", "'image/conv2'", ",", "make_filter_image", "(", "model", ".", "sample_layer", ".", "conv_2", ",", "use_color", "=", "False", ")", ",", "n_update", ")", "\n", "writer", ".", "add_image", "(", "'image/conv3'", ",", "make_filter_image", "(", "model", ".", "sample_layer", ".", "conv_3", ",", "use_color", "=", "False", ")", ",", "n_update", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_save_and_load_dataset": [[93, 116], ["time.time", "dataset.get_data_pairs", "dataset.save_dataset", "dataset.save_dataset_statistics", "dataset.save_dataset_statistics", "GroundedScan.dataset.GroundedScan.load_dataset_from_file", "zip", "os.remove", "time.time", "logger.info", "os.path.join", "dataset.get_examples_with_image", "GroundedScan.load_dataset_from_file.get_examples_with_image", "numpy.array_equal", "os.path.join", "dataset.command_repr", "GroundedScan.load_dataset_from_file.command_repr", "dataset.command_repr", "GroundedScan.load_dataset_from_file.command_repr", "dataset.command_repr", "GroundedScan.load_dataset_from_file.command_repr"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_data_pairs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_dataset", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.load_dataset_from_file", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_examples_with_image", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_examples_with_image", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr"], ["def", "test_save_and_load_dataset", "(", "dataset", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "dataset", ".", "get_data_pairs", "(", "max_examples", "=", "EXAMPLES_TO_TEST", ")", "\n", "dataset", ".", "save_dataset", "(", "\"test.txt\"", ")", "\n", "dataset", ".", "save_dataset_statistics", "(", "split", "=", "\"train\"", ")", "\n", "dataset", ".", "save_dataset_statistics", "(", "split", "=", "\"test\"", ")", "\n", "\n", "test_grounded_scan", "=", "GroundedScan", ".", "load_dataset_from_file", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test.txt\"", ")", ",", "\n", "TEST_DIRECTORY", ")", "\n", "for", "example_one", ",", "example_two", "in", "zip", "(", "dataset", ".", "get_examples_with_image", "(", "\"train\"", ")", ",", "\n", "test_grounded_scan", ".", "get_examples_with_image", "(", "\"train\"", ")", ")", ":", "\n", "        ", "assert", "dataset", ".", "command_repr", "(", "example_one", "[", "\"input_command\"", "]", ")", "==", "test_grounded_scan", ".", "command_repr", "(", "\n", "example_two", "[", "\"input_command\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "assert", "dataset", ".", "command_repr", "(", "example_one", "[", "\"target_command\"", "]", ")", "==", "test_grounded_scan", ".", "command_repr", "(", "\n", "example_two", "[", "\"target_command\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "assert", "np", ".", "array_equal", "(", "example_one", "[", "\"situation_image\"", "]", ",", "example_two", "[", "\"situation_image\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "assert", "dataset", ".", "command_repr", "(", "example_one", "[", "\"input_meaning\"", "]", ")", "==", "test_grounded_scan", ".", "command_repr", "(", "\n", "example_two", "[", "\"input_meaning\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test.txt\"", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_save_and_load_dataset PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_save_and_load_dataset_nonce": [[118, 142], ["time.time", "TEST_DATASET_NONCE.get_data_pairs", "TEST_DATASET_NONCE.save_dataset", "TEST_DATASET_NONCE.save_dataset_statistics", "TEST_DATASET_NONCE.save_dataset_statistics", "GroundedScan.dataset.GroundedScan.load_dataset_from_file", "zip", "os.remove", "time.time", "logger.info", "os.path.join", "TEST_DATASET_NONCE.get_examples_with_image", "GroundedScan.load_dataset_from_file.get_examples_with_image", "numpy.array_equal", "os.path.join", "TEST_DATASET_NONCE.command_repr", "GroundedScan.load_dataset_from_file.command_repr", "TEST_DATASET_NONCE.command_repr", "GroundedScan.load_dataset_from_file.command_repr", "TEST_DATASET_NONCE.command_repr", "GroundedScan.load_dataset_from_file.command_repr"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_data_pairs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_dataset", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.load_dataset_from_file", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_examples_with_image", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_examples_with_image", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr"], ["", "def", "test_save_and_load_dataset_nonce", "(", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "TEST_DATASET_NONCE", ".", "get_data_pairs", "(", "max_examples", "=", "EXAMPLES_TO_TEST", ")", "\n", "TEST_DATASET_NONCE", ".", "save_dataset", "(", "\"test.txt\"", ")", "\n", "TEST_DATASET_NONCE", ".", "save_dataset_statistics", "(", "split", "=", "\"train\"", ")", "\n", "TEST_DATASET_NONCE", ".", "save_dataset_statistics", "(", "split", "=", "\"test\"", ")", "\n", "\n", "test_grounded_scan", "=", "GroundedScan", ".", "load_dataset_from_file", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test.txt\"", ")", ",", "\n", "TEST_DIRECTORY", ")", "\n", "\n", "for", "example_one", ",", "example_two", "in", "zip", "(", "TEST_DATASET_NONCE", ".", "get_examples_with_image", "(", "\"train\"", ")", ",", "\n", "test_grounded_scan", ".", "get_examples_with_image", "(", "\"train\"", ")", ")", ":", "\n", "        ", "assert", "TEST_DATASET_NONCE", ".", "command_repr", "(", "example_one", "[", "\"input_command\"", "]", ")", "==", "test_grounded_scan", ".", "command_repr", "(", "\n", "example_two", "[", "\"input_command\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "assert", "TEST_DATASET_NONCE", ".", "command_repr", "(", "example_one", "[", "\"target_command\"", "]", ")", "==", "test_grounded_scan", ".", "command_repr", "(", "\n", "example_two", "[", "\"target_command\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "assert", "np", ".", "array_equal", "(", "example_one", "[", "\"situation_image\"", "]", ",", "example_two", "[", "\"situation_image\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "assert", "TEST_DATASET_NONCE", ".", "command_repr", "(", "example_one", "[", "\"input_meaning\"", "]", ")", "==", "test_grounded_scan", ".", "command_repr", "(", "\n", "example_two", "[", "\"input_meaning\"", "]", ")", ",", "\"test_save_and_load_dataset FAILED\"", "\n", "", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test.txt\"", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_save_and_load_dataset PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_derivation_from_rules": [[144, 154], ["time.time", "dataset.sample_command", "derivation.to_rules", "GroundedScan.grammar.Derivation.from_rules", "time.time", "logger.info", "Derivation.from_rules.words", "derivation.words"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.sample_command", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.to_rules", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_rules", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words"], ["", "def", "test_derivation_from_rules", "(", "dataset", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "derivation", ",", "arguments", "=", "dataset", ".", "sample_command", "(", ")", "\n", "rules_list", "=", "[", "]", "\n", "lexicon", "=", "{", "}", "\n", "derivation", ".", "to_rules", "(", "rules_list", ",", "lexicon", ")", "\n", "test", "=", "Derivation", ".", "from_rules", "(", "rules_list", ",", "lexicon", "=", "lexicon", ")", "\n", "assert", "' '", ".", "join", "(", "test", ".", "words", "(", ")", ")", "==", "' '", ".", "join", "(", "derivation", ".", "words", "(", ")", ")", ",", "\"test_derivation_from_rules FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_derivation_from_rules PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_derivation_from_string": [[156, 165], ["time.time", "dataset.sample_command", "derivation.__repr__", "derivation.__repr__.split", "GroundedScan.grammar.Derivation.from_str", "time.time", "logger.info", "Derivation.from_str.words", "derivation.words"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.sample_command", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.__repr__", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words"], ["", "def", "test_derivation_from_string", "(", "dataset", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "derivation", ",", "arguments", "=", "dataset", ".", "sample_command", "(", ")", "\n", "derivation_str", "=", "derivation", ".", "__repr__", "(", ")", "\n", "rules_str", ",", "lexicon_str", "=", "derivation_str", ".", "split", "(", "';'", ")", "\n", "new_derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "assert", "' '", ".", "join", "(", "new_derivation", ".", "words", "(", ")", ")", "==", "' '", ".", "join", "(", "derivation", ".", "words", "(", ")", ")", ",", "\"test_derivation_from_string FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_derivation_from_string PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_target_commands_one": [[167, 185], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "dataset.demonstrate_target_commands", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "Derivation.from_str.words"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_command", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_target_commands", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words"], ["", "def", "test_demonstrate_target_commands_one", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that target commands sequence resulting from demonstrate_command is the same as the one executed by\n     demonstrate_target_commands\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "TEST_SITUATION_1", ")", "\n", "command", "=", "' '", ".", "join", "(", "derivation", ".", "words", "(", ")", ")", "\n", "target_commands", ",", "_", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_target_commands", "(", "command", ",", "TEST_SITUATION_1", ",", "actual_target_commands", ")", "\n", "assert", "','", ".", "join", "(", "actual_target_commands", ")", "==", "','", ".", "join", "(", "target_commands", ")", ",", "\"test_demonstrate_target_commands_one FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_target_commands_one PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_target_commands_two": [[187, 204], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "dataset.demonstrate_target_commands", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "Derivation.from_str.words"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_command", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_target_commands", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words"], ["", "def", "test_demonstrate_target_commands_two", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that target commands sequence resulting from demonstrate_command for pushing a heavy objectis the same as\n     the executed one by demonstrate_target_commands\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_trans DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_transitive -> {},T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_2", ")", "\n", "command", "=", "' '", ".", "join", "(", "derivation", ".", "words", "(", ")", ")", "\n", "target_commands", ",", "_", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_target_commands", "(", "command", ",", "TEST_SITUATION_2", ",", "actual_target_commands", ")", "\n", "assert", "','", ".", "join", "(", "actual_target_commands", ")", "==", "','", ".", "join", "(", "target_commands", ")", ",", "\"test_demonstrate_target_commands_two FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_target_commands_two PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_target_commands_three": [[206, 223], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "dataset.demonstrate_target_commands", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "Derivation.from_str.words"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_command", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_target_commands", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words"], ["", "def", "test_demonstrate_target_commands_three", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that target commands sequence resulting from demonstrate_command for pushing a light object is the same as\n     the executed one by demonstrate_target_commands\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_trans DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_transitive -> {},T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_1", ")", "\n", "command", "=", "' '", ".", "join", "(", "derivation", ".", "words", "(", ")", ")", "\n", "target_commands", ",", "_", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_target_commands", "(", "command", ",", "TEST_SITUATION_1", ",", "actual_target_commands", ")", "\n", "assert", "','", ".", "join", "(", "actual_target_commands", ")", "==", "','", ".", "join", "(", "target_commands", ")", ",", "\"test_demonstrate_target_commands_three FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_target_commands_three PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_one": [[225, 241], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_command"], ["", "def", "test_demonstrate_command_one", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test pushing a light object (where one target command of 'push <dir>' results in movement of 1 grid).\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_trans DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_transitive -> {},T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "expected_target_commands", "=", "\"walk,walk,turn right,walk,walk,walk,\"", "\"push,push,push,push\"", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_1", ")", "\n", "assert", "expected_target_commands", "==", "','", ".", "join", "(", "actual_target_commands", ")", ",", "\"test_demonstrate_command_one FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_command_one PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_two": [[243, 259], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_command"], ["", "def", "test_demonstrate_command_two", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test pushing a heavy object (where one target command of 'push <dir>' results in movement of 1 grid).\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_trans DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_transitive -> {},T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"push\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "expected_target_commands", "=", "\"walk,walk,turn right,walk,walk,walk,\"", "\"push,push,push,push,push,push,push,push\"", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_2", ")", "\n", "assert", "expected_target_commands", "==", "','", ".", "join", "(", "actual_target_commands", ")", ",", "\"test_demonstrate_command_two FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_command_two PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_three": [[261, 278], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_command"], ["", "def", "test_demonstrate_command_three", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test walk to a small circle, tests that the function demonstrate command is able to find the target small circle\n    even if that circle isn't explicitly set as the target object in the situation (which it wouldn't be at test time).\n    \"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "expected_target_commands", "=", "\"walk,walk,turn right,walk,walk,walk\"", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_3", ")", "\n", "assert", "expected_target_commands", "==", "','", ".", "join", "(", "actual_target_commands", ")", ",", "\"test_demonstrate_command_three FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_command_three PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_four": [[280, 297], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_command"], ["", "def", "test_demonstrate_command_four", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test walk to a small circle, tests that the function demonstrate command is able to find the target big circle\n    even if that circle isn't explicitly set as the target object in the situation (which it wouldn't be at test time).\n    \"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "expected_target_commands", "=", "\"turn left,turn left,walk,turn right,walk,walk,walk,walk\"", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_3", ")", "\n", "assert", "expected_target_commands", "==", "','", ".", "join", "(", "actual_target_commands", ")", ",", "\"test_demonstrate_command_four FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_command_four PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_five": [[299, 314], ["time.time", "GroundedScan.grammar.Derivation.from_str", "dataset.demonstrate_command", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_command"], ["", "def", "test_demonstrate_command_five", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that when referring to a small red circle and two present in the world, it finds the correct one.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {}:JJ -> {},T:{},T:{},NT:\"", "\"NN -> {}\"", ".", "format", "(", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"red\"", ")", ",", "\n", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"red\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "expected_target_commands", "=", "\"walk,walk,turn right,walk,walk,walk\"", "\n", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_4", ")", "\n", "assert", "expected_target_commands", "==", "','", ".", "join", "(", "actual_target_commands", ")", ",", "\"test_demonstrate_command_five FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_command_five PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_six": [[316, 334], ["time.time", "GroundedScan.grammar.Derivation.from_str", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "dataset.demonstrate_command"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_command"], ["", "def", "test_demonstrate_command_six", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that when referring to a small red circle but only one red circle is present, demonstrate_commands fails.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {}:JJ -> {},T:{},T:{},NT:\"", "\"NN -> {}\"", ".", "format", "(", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"red\"", ")", ",", "\n", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"red\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "expected_target_commands", "=", "\"\"", "\n", "try", ":", "\n", "        ", "actual_target_commands", ",", "_", ",", "_", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_3", ")", "\n", "", "except", "AssertionError", ":", "\n", "        ", "actual_target_commands", "=", "\"\"", "\n", "", "assert", "expected_target_commands", "==", "','", ".", "join", "(", "actual_target_commands", ")", ",", "\"test_demonstrate_command_six FAILED\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_demonstrate_command_six PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_find_referred_target_one": [[336, 358], ["time.time", "GroundedScan.grammar.Derivation.from_str", "Derivation.from_str.meaning", "arguments.pop().to_predicate", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "len", "translate_fn", "translate_fn", "translate_fn", "arguments.pop", "translate_fn_word", "target_str.split"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.to_predicate", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop"], ["", "def", "test_find_referred_target_one", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that for particular referred targets, the Derivation class identifies it correctly.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {}:JJ -> {},T:{},T:{},NT:\"", "\"NN -> {}\"", ".", "format", "(", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"red\"", ")", ",", "\n", "translate_fn", "(", "\"small\"", ")", ",", "translate_fn", "(", "\"red\"", ")", ",", "translate_fn", "(", "\"small\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "arguments", "=", "[", "]", "\n", "derivation", ".", "meaning", "(", "arguments", ")", "\n", "assert", "len", "(", "arguments", ")", "==", "1", ",", "\"test_find_referred_target_one FAILED.\"", "\n", "target_str", ",", "target_predicate", "=", "arguments", ".", "pop", "(", ")", ".", "to_predicate", "(", ")", "\n", "translate_fn_word", "=", "dataset", ".", "_vocabulary", ".", "translate_word", "\n", "translated_target_str", "=", "' '", ".", "join", "(", "[", "translate_fn_word", "(", "word", ")", "for", "word", "in", "target_str", ".", "split", "(", ")", "]", ")", "\n", "assert", "translated_target_str", "==", "\"red circle\"", ",", "\"test_find_referred_target FAILED.\"", "\n", "assert", "target_predicate", "[", "\"noun\"", "]", "==", "translate_fn", "(", "\"circle\"", ")", ",", "\"test_find_referred_target_one FAILED.\"", "\n", "assert", "target_predicate", "[", "\"size\"", "]", "==", "translate_fn", "(", "\"small\"", ")", ",", "\"test_find_referred_target_one FAILED.\"", "\n", "assert", "target_predicate", "[", "\"color\"", "]", "==", "translate_fn", "(", "\"red\"", ")", ",", "\"test_find_referred_target_one FAILED.\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_find_referred_target_one PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_find_referred_target_two": [[360, 382], ["time.time", "GroundedScan.grammar.Derivation.from_str", "Derivation.from_str.meaning", "arguments.pop().to_predicate", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "len", "translate_fn", "translate_fn", "translate_fn", "arguments.pop", "translate_fn_word", "target_str.split"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.to_predicate", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop"], ["", "def", "test_find_referred_target_two", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that for particular referred targets, the Derivation class identifies it correctly.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "arguments", "=", "[", "]", "\n", "derivation", ".", "meaning", "(", "arguments", ")", "\n", "assert", "len", "(", "arguments", ")", "==", "1", ",", "\"test_find_referred_target_two FAILED.\"", "\n", "target_str", ",", "target_predicate", "=", "arguments", ".", "pop", "(", ")", ".", "to_predicate", "(", ")", "\n", "translate_fn_word", "=", "dataset", ".", "_vocabulary", ".", "translate_word", "\n", "translated_target_str", "=", "' '", ".", "join", "(", "[", "translate_fn_word", "(", "word", ")", "for", "word", "in", "target_str", ".", "split", "(", ")", "]", ")", "\n", "assert", "translated_target_str", "==", "\"circle\"", ",", "\"test_find_referred_target_two FAILED.\"", "\n", "assert", "target_predicate", "[", "\"noun\"", "]", "==", "translate_fn", "(", "\"circle\"", ")", ",", "\"test_find_referred_target_two FAILED.\"", "\n", "assert", "target_predicate", "[", "\"size\"", "]", "==", "translate_fn", "(", "\"big\"", ")", ",", "\"test_find_referred_target_two FAILED.\"", "\n", "assert", "target_predicate", "[", "\"color\"", "]", "==", "translate_fn", "(", "\"\"", ")", ",", "\"test_find_referred_target_two FAILED.\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_find_referred_target_two PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_generate_possible_targets_one": [[384, 401], ["time.time", "dataset.generate_possible_targets", "time.time", "logger.info", "translate_meaning", "translate_meaning", "translate_meaning", "translate_word", "translate_word", "translate_word"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.generate_possible_targets", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "test_generate_possible_targets_one", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that for particular referred targets, the right possible target objects get generated.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "translate_meaning", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "target_predicate", "=", "{", "\"noun\"", ":", "translate_meaning", "(", "\"circle\"", ")", ",", "\n", "\"color\"", ":", "translate_meaning", "(", "\"red\"", ")", ",", "\n", "\"size\"", ":", "translate_meaning", "(", "\"big\"", ")", "}", "\n", "translate_word", "=", "dataset", ".", "_vocabulary", ".", "translate_word", "\n", "expected_possible_targets", "=", "{", "(", "2", ",", "\"red\"", ",", "\"circle\"", ")", ",", "(", "3", ",", "\"red\"", ",", "\"circle\"", ")", ",", "(", "4", ",", "\"red\"", ",", "\"circle\"", ")", "}", "\n", "actual_possible_targets", "=", "dataset", ".", "generate_possible_targets", "(", "\n", "referred_size", "=", "translate_word", "(", "target_predicate", "[", "\"size\"", "]", ")", ",", "\n", "referred_color", "=", "translate_word", "(", "target_predicate", "[", "\"color\"", "]", ")", ",", "\n", "referred_shape", "=", "translate_word", "(", "target_predicate", "[", "\"noun\"", "]", ")", ")", "\n", "for", "actual_possible_target", "in", "actual_possible_targets", ":", "\n", "        ", "assert", "actual_possible_target", "in", "expected_possible_targets", ",", "\"test_generate_possible_targets_one FAILED.\"", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_generate_possible_targets_one PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_generate_possible_targets_two": [[403, 422], ["time.time", "dataset.generate_possible_targets", "zip", "time.time", "logger.info", "translate_meaning", "translate_meaning", "translate_meaning", "translate_word", "translate_word", "translate_word"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.generate_possible_targets", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "test_generate_possible_targets_two", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that for particular referred targets, the right possible target objects get generated.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "translate_meaning", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "target_predicate", "=", "{", "\"noun\"", ":", "translate_meaning", "(", "\"circle\"", ")", ",", "\n", "\"color\"", ":", "translate_meaning", "(", "\"red\"", ")", ",", "\n", "\"size\"", ":", "translate_meaning", "(", "\"small\"", ")", "}", "\n", "translate_word", "=", "dataset", ".", "_vocabulary", ".", "translate_word", "\n", "expected_possible_targets", "=", "{", "(", "1", ",", "\"red\"", ",", "\"circle\"", ")", ",", "(", "2", ",", "\"red\"", ",", "\"circle\"", ")", ",", "(", "3", ",", "\"red\"", ",", "\"circle\"", ")", ",", "\n", "(", "1", ",", "\"blue\"", ",", "\"circle\"", ")", ",", "(", "2", ",", "\"blue\"", ",", "\"circle\"", ")", ",", "(", "3", ",", "\"blue\"", ",", "\"circle\"", ")", ",", "\n", "(", "1", ",", "\"green\"", ",", "\"circle\"", ")", ",", "(", "2", ",", "\"green\"", ",", "\"circle\"", ")", ",", "(", "3", ",", "\"green\"", ",", "\"circle\"", ")", "}", "\n", "actual_possible_targets", "=", "dataset", ".", "generate_possible_targets", "(", "\n", "referred_size", "=", "translate_word", "(", "target_predicate", "[", "\"size\"", "]", ")", ",", "\n", "referred_color", "=", "translate_word", "(", "target_predicate", "[", "\"color\"", "]", ")", ",", "\n", "referred_shape", "=", "translate_word", "(", "target_predicate", "[", "\"noun\"", "]", ")", ")", "\n", "for", "expected_possible_target", ",", "actual_possible_target", "in", "zip", "(", "expected_possible_targets", ",", "actual_possible_targets", ")", ":", "\n", "        ", "assert", "actual_possible_target", "in", "expected_possible_targets", ",", "\"test_generate_possible_targets_two FAILED.\"", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_generate_possible_targets_two PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_generate_situations_one": [[424, 456], ["time.time", "translate_meaning", "translate_meaning", "translate_meaning", "dataset.generate_situations", "[].pop", "dataset.initialize_world_from_spec", "dataset._world.object_positions().pop", "dataset._world.object_positions", "time.time", "logger.info", "len", "dataset._world.object_positions", "larger_objects.extend"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.generate_situations", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world_from_spec", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.object_positions", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.object_positions"], ["", "def", "test_generate_situations_one", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that when a small green circle is referred to there exist no smaller green circles than the target object in\n    the world and at least one larger green circle.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "translate_meaning", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "target_shape", "=", "\"circle\"", "\n", "target_color", "=", "\"green\"", "\n", "target_size", "=", "2", "\n", "referred_size", "=", "translate_meaning", "(", "\"small\"", ")", "\n", "referred_color", "=", "translate_meaning", "(", "\"green\"", ")", "\n", "referred_shape", "=", "translate_meaning", "(", "\"circle\"", ")", "\n", "situation_specifications", "=", "dataset", ".", "generate_situations", "(", "num_resampling", "=", "1", ")", "\n", "relevant_situation", "=", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "[", "target_size", "]", ".", "pop", "(", ")", "\n", "dataset", ".", "initialize_world_from_spec", "(", "relevant_situation", ",", "referred_size", "=", "referred_size", ",", "\n", "referred_color", "=", "referred_color", ",", "\n", "referred_shape", "=", "referred_shape", ",", "\n", "actual_size", "=", "target_size", ",", "\n", "sample_percentage", "=", "0.5", "\n", ")", "\n", "smallest_object", "=", "dataset", ".", "_world", ".", "object_positions", "(", "\"green circle\"", ",", "\n", "object_size", "=", "\"small\"", ")", ".", "pop", "(", ")", "\n", "assert", "smallest_object", "==", "relevant_situation", "[", "\"target_position\"", "]", ",", "\"test_generate_situations_one FAILED.\"", "\n", "other_related_objects", "=", "dataset", ".", "_world", ".", "object_positions", "(", "\"green circle\"", ")", "\n", "larger_objects", "=", "[", "]", "\n", "for", "size", ",", "sized_objects", "in", "other_related_objects", ":", "\n", "        ", "if", "size", "<", "target_size", ":", "\n", "            ", "assert", "not", "sized_objects", ",", "\"test_generate_situations_one FAILED.\"", "\n", "", "elif", "size", ">", "target_size", ":", "\n", "            ", "larger_objects", ".", "extend", "(", "sized_objects", ")", "\n", "", "", "assert", "len", "(", "larger_objects", ")", ">=", "1", ",", "\"test_generate_situations_one FAILED.\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_generate_situations_one PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_generate_situations_two": [[458, 490], ["time.time", "translate_meaning", "translate_meaning", "translate_meaning", "dataset.generate_situations", "[].pop", "dataset.initialize_world_from_spec", "dataset._world.object_positions().pop", "dataset._world.object_positions", "time.time", "logger.info", "len", "dataset._world.object_positions", "smaller_objects.extend"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.generate_situations", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world_from_spec", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.object_positions", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.object_positions"], ["", "def", "test_generate_situations_two", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that when a big green circle is referred to there exists no larger green circles and the exists at least\n    one smaller green circle.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "translate_meaning", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "target_shape", "=", "\"circle\"", "\n", "target_color", "=", "\"green\"", "\n", "target_size", "=", "2", "\n", "referred_size", "=", "translate_meaning", "(", "\"big\"", ")", "\n", "referred_color", "=", "translate_meaning", "(", "\"green\"", ")", "\n", "referred_shape", "=", "translate_meaning", "(", "\"circle\"", ")", "\n", "situation_specifications", "=", "dataset", ".", "generate_situations", "(", "num_resampling", "=", "1", ")", "\n", "relevant_situation", "=", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "[", "target_size", "]", ".", "pop", "(", ")", "\n", "dataset", ".", "initialize_world_from_spec", "(", "relevant_situation", ",", "referred_size", "=", "referred_size", ",", "\n", "referred_color", "=", "referred_color", ",", "\n", "referred_shape", "=", "referred_shape", ",", "\n", "actual_size", "=", "target_size", ",", "\n", "sample_percentage", "=", "0.5", "\n", ")", "\n", "largest_object", "=", "dataset", ".", "_world", ".", "object_positions", "(", "\"green circle\"", ",", "\n", "object_size", "=", "\"big\"", ")", ".", "pop", "(", ")", "\n", "assert", "largest_object", "==", "relevant_situation", "[", "\"target_position\"", "]", ",", "\"test_generate_situations_two FAILED.\"", "\n", "other_related_objects", "=", "dataset", ".", "_world", ".", "object_positions", "(", "\"green circle\"", ")", "\n", "smaller_objects", "=", "[", "]", "\n", "for", "size", ",", "sized_objects", "in", "other_related_objects", ":", "\n", "        ", "if", "size", ">", "target_size", ":", "\n", "            ", "assert", "not", "sized_objects", ",", "\"test_generate_situations_two FAILED.\"", "\n", "", "elif", "size", "<", "target_size", ":", "\n", "            ", "smaller_objects", ".", "extend", "(", "sized_objects", ")", "\n", "", "", "assert", "len", "(", "smaller_objects", ")", ">=", "1", ",", "\"test_generate_situations_two FAILED.\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_generate_situations_two PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_generate_situations_three": [[492, 522], ["time.time", "translate_meaning", "translate_meaning", "dataset.generate_situations", "[].pop", "dataset.initialize_world_from_spec", "dataset._world.object_positions().pop", "dataset._world.object_positions", "time.time", "logger.info", "len", "dataset._world.object_positions", "smaller_objects.extend"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.generate_situations", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world_from_spec", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.object_positions", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.object_positions"], ["", "def", "test_generate_situations_three", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that for particular commands the right situations get matched.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "translate_meaning", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "target_shape", "=", "\"circle\"", "\n", "target_color", "=", "\"green\"", "\n", "target_size", "=", "2", "\n", "referred_size", "=", "translate_meaning", "(", "\"big\"", ")", "\n", "referred_shape", "=", "translate_meaning", "(", "\"circle\"", ")", "\n", "situation_specifications", "=", "dataset", ".", "generate_situations", "(", "num_resampling", "=", "1", ")", "\n", "relevant_situation", "=", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "[", "target_size", "]", ".", "pop", "(", ")", "\n", "dataset", ".", "initialize_world_from_spec", "(", "relevant_situation", ",", "referred_size", "=", "referred_size", ",", "\n", "referred_color", "=", "\"\"", ",", "\n", "referred_shape", "=", "referred_shape", ",", "\n", "actual_size", "=", "target_size", ",", "\n", "sample_percentage", "=", "0.5", "\n", ")", "\n", "largest_object", "=", "dataset", ".", "_world", ".", "object_positions", "(", "\"circle\"", ",", "\n", "object_size", "=", "\"big\"", ")", ".", "pop", "(", ")", "\n", "assert", "largest_object", "==", "relevant_situation", "[", "\"target_position\"", "]", ",", "\"test_generate_situations_three FAILED.\"", "\n", "other_related_objects", "=", "dataset", ".", "_world", ".", "object_positions", "(", "\"circle\"", ")", "\n", "smaller_objects", "=", "[", "]", "\n", "for", "size", ",", "sized_objects", "in", "other_related_objects", ":", "\n", "        ", "if", "size", ">", "target_size", ":", "\n", "            ", "assert", "not", "sized_objects", ",", "\"test_generate_situations_three FAILED.\"", "\n", "", "elif", "size", "<", "target_size", ":", "\n", "            ", "smaller_objects", ".", "extend", "(", "sized_objects", ")", "\n", "", "", "assert", "len", "(", "smaller_objects", ")", ">=", "1", ",", "\"test_generate_situations_three FAILED.\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_generate_situations_three PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_situation_representation_eq": [[524, 535], ["time.time", "enumerate", "time.time", "logger.info", "enumerate"], "function", ["None"], ["", "def", "test_situation_representation_eq", "(", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "test_situations", "=", "[", "TEST_SITUATION_1", ",", "TEST_SITUATION_2", ",", "TEST_SITUATION_3", ",", "TEST_SITUATION_4", "]", "\n", "for", "i", ",", "test_situation_1", "in", "enumerate", "(", "test_situations", ")", ":", "\n", "        ", "for", "j", ",", "test_situation_2", "in", "enumerate", "(", "test_situations", ")", ":", "\n", "            ", "if", "i", "==", "j", ":", "\n", "                ", "assert", "test_situation_1", "==", "test_situation_2", ",", "\"test_situation_representation_eq FAILED.\"", "\n", "", "else", ":", "\n", "                ", "assert", "test_situation_1", "!=", "test_situation_2", ",", "\"test_situation_representation_eq FAILED.\"", "\n", "", "", "", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_situation_representation_eq PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_example_representation_eq": [[537, 563], ["time.time", "GroundedScan.grammar.Derivation.from_str", "Derivation.from_str.meaning", "arguments.pop().to_predicate", "Derivation.from_str.words", "dataset.demonstrate_command", "TEST_DATASET.fill_example", "TEST_DATASET.get_data_pairs", "dataset._data_pairs.items", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "Derivation.from_str.words", "arguments.pop", "dataset._vocabulary.get_adverbs", "dataset.compare_examples"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.to_predicate", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_command", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.fill_example", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_data_pairs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_adverbs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.compare_examples"], ["", "def", "test_example_representation_eq", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that the function for comparing examples returns true when exactly the same example is passed twice.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "arguments", "=", "[", "]", "\n", "derivation", ".", "meaning", "(", "arguments", ")", "\n", "target_str", ",", "target_predicate", "=", "arguments", ".", "pop", "(", ")", ".", "to_predicate", "(", ")", "\n", "adverb", "=", "\"\"", "\n", "for", "word", "in", "derivation", ".", "words", "(", ")", ":", "\n", "        ", "if", "word", "in", "dataset", ".", "_vocabulary", ".", "get_adverbs", "(", ")", ":", "\n", "            ", "adverb", "=", "word", "\n", "", "", "target_commands", ",", "_", ",", "target_action", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_1", ")", "\n", "TEST_DATASET", ".", "fill_example", "(", "derivation", ".", "words", "(", ")", ",", "derivation", ",", "TEST_SITUATION_1", ",", "target_commands", ",", "target_action", ",", "\n", "target_predicate", ",", "visualize", "=", "False", ",", "splits", "=", "[", "\"train\"", "]", ",", "adverb", "=", "adverb", ")", "\n", "TEST_DATASET", ".", "get_data_pairs", "(", "max_examples", "=", "10", ",", "num_resampling", "=", "2", ")", "\n", "for", "split", ",", "examples", "in", "dataset", ".", "_data_pairs", ".", "items", "(", ")", ":", "\n", "        ", "for", "example", "in", "examples", ":", "\n", "            ", "assert", "dataset", ".", "compare_examples", "(", "example", ",", "example", ")", ",", "\"test_example_representation_eq FAILED.\"", "\n", "", "", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_example_representation_eq PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_example_representation": [[565, 606], ["time.time", "GroundedScan.grammar.Derivation.from_str", "Derivation.from_str.meaning", "arguments.pop().to_predicate", "Derivation.from_str.words", "dataset.demonstrate_command", "dataset.fill_example", "dataset._data_pairs[].pop", "dataset.parse_example", "GroundedScan.world.Situation.from_representation", "time.time", "logger.info", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "translate_fn", "Derivation.from_str.words", "dataset.command_repr", "dataset.command_repr", "dataset.derivation_repr", "dataset.command_repr", "dataset._vocabulary.translate_word", "arguments.pop", "dataset._vocabulary.get_adverbs", "dataset._vocabulary.translate_word", "dataset._vocabulary.translate_word", "dataset._vocabulary.translate_word"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.to_predicate", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_command", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.fill_example", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_example", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.from_representation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.derivation_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_adverbs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "test_example_representation", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that when you save an example in its representation its the same if you parse it again.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "rules_str", "=", "\"NP -> NN,NP -> JJ NP,DP -> 'a' NP,VP -> VV_intrans 'to' DP,ROOT -> VP\"", "\n", "translate_fn", "=", "dataset", ".", "_vocabulary", ".", "translate_meaning", "\n", "lexicon_str", "=", "\"T:{},NT:VV_intransitive -> {},T:to,T:a,T:{},NT:JJ -> {},T:{},NT:NN -> {}\"", ".", "format", "(", "\n", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"walk\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"big\"", ")", ",", "translate_fn", "(", "\"circle\"", ")", ",", "\n", "translate_fn", "(", "\"circle\"", ")", "\n", ")", "\n", "derivation", "=", "Derivation", ".", "from_str", "(", "rules_str", ",", "lexicon_str", ",", "dataset", ".", "_grammar", ")", "\n", "arguments", "=", "[", "]", "\n", "derivation", ".", "meaning", "(", "arguments", ")", "\n", "target_str", ",", "target_predicate", "=", "arguments", ".", "pop", "(", ")", ".", "to_predicate", "(", ")", "\n", "adverb", "=", "\"\"", "\n", "for", "word", "in", "derivation", ".", "words", "(", ")", ":", "\n", "        ", "if", "word", "in", "dataset", ".", "_vocabulary", ".", "get_adverbs", "(", ")", ":", "\n", "            ", "adverb", "=", "word", "\n", "", "", "target_commands", ",", "_", ",", "target_action", "=", "dataset", ".", "demonstrate_command", "(", "derivation", ",", "initial_situation", "=", "TEST_SITUATION_1", ")", "\n", "dataset", ".", "fill_example", "(", "derivation", ".", "words", "(", ")", ",", "derivation", ",", "TEST_SITUATION_1", ",", "target_commands", ",", "target_action", ",", "\n", "target_predicate", ",", "visualize", "=", "False", ",", "splits", "=", "[", "\"train\"", "]", ",", "adverb", "=", "adverb", ")", "\n", "example", "=", "dataset", ".", "_data_pairs", "[", "\"train\"", "]", ".", "pop", "(", ")", "\n", "(", "parsed_command", ",", "parsed_meaning", ",", "parsed_derivation", ",", "parsed_situation", ",", "\n", "parsed_target_commands", ",", "_", ",", "parsed_action", ")", "=", "dataset", ".", "parse_example", "(", "\n", "example", "\n", ")", "\n", "assert", "example", "[", "\"command\"", "]", "==", "dataset", ".", "command_repr", "(", "parsed_command", ")", ",", "\"test_example_representation FAILED.\"", "\n", "assert", "example", "[", "\"meaning\"", "]", "==", "dataset", ".", "command_repr", "(", "parsed_meaning", ")", ",", "\"test_example_representation FAILED.\"", "\n", "assert", "example", "[", "\"derivation\"", "]", "==", "dataset", ".", "derivation_repr", "(", "parsed_derivation", ")", ",", "\"test_example_representation \"", "\"FAILED.\"", "\n", "situation", "=", "Situation", ".", "from_representation", "(", "example", "[", "\"situation\"", "]", ")", "\n", "assert", "situation", "==", "parsed_situation", ",", "\"test_example_representation FAILED.\"", "\n", "assert", "example", "[", "\"target_commands\"", "]", "==", "dataset", ".", "command_repr", "(", "parsed_target_commands", ")", ",", "\"test_example_representation FAILED.\"", "\n", "assert", "example", "[", "\"verb_in_command\"", "]", "==", "dataset", ".", "_vocabulary", ".", "translate_word", "(", "parsed_action", ")", ",", "\"test_example_representation FAILED.\"", "\n", "assert", "example", "[", "\"referred_target\"", "]", "==", "' '", ".", "join", "(", "[", "dataset", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"size\"", "]", ")", ",", "\n", "dataset", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"color\"", "]", ")", ",", "\n", "dataset", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"noun\"", "]", ")", "]", ")", ",", "\"test_example_representation FAILED.\"", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_example_representation PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_initialize_world": [[608, 629], ["time.time", "dataset._world.get_current_situation", "enumerate", "dataset.initialize_world", "time.time", "logger.info", "enumerate", "dataset._world.clear_situation", "dataset.initialize_world", "dataset._world.get_current_situation", "dataset._world.clear_situation", "dataset.initialize_world", "dataset._world.get_current_situation"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation"], ["", "def", "test_initialize_world", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that two the same situations get represented in exactly the same image by rendering.py and minigrid.py\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "test_situations", "=", "[", "TEST_SITUATION_1", ",", "TEST_SITUATION_2", ",", "TEST_SITUATION_3", ",", "TEST_SITUATION_4", "]", "\n", "current_situation", "=", "dataset", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "dataset", ".", "_world", ".", "mission", "\n", "for", "i", ",", "test_situation_1", "in", "enumerate", "(", "test_situations", ")", ":", "\n", "        ", "for", "j", ",", "test_situation_2", "in", "enumerate", "(", "test_situations", ")", ":", "\n", "            ", "dataset", ".", "_world", ".", "clear_situation", "(", ")", "\n", "dataset", ".", "initialize_world", "(", "test_situation_1", ")", "\n", "situation_1", "=", "dataset", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "dataset", ".", "_world", ".", "clear_situation", "(", ")", "\n", "dataset", ".", "initialize_world", "(", "test_situation_2", ")", "\n", "situation_2", "=", "dataset", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "if", "i", "==", "j", ":", "\n", "                ", "assert", "situation_1", "==", "situation_2", ",", "\"test_initialize_world FAILED.\"", "\n", "", "else", ":", "\n", "                ", "assert", "situation_1", "!=", "situation_2", ",", "\"test_initialize_world FAILED.\"", "\n", "", "", "", "dataset", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_initialize_world PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_image_representation_situations": [[631, 664], ["time.time", "dataset._world.get_current_situation", "enumerate", "os.remove", "os.remove", "dataset.initialize_world", "time.time", "logger.info", "enumerate", "os.path.join", "os.path.join", "dataset._world.clear_situation", "dataset.initialize_world", "dataset._world.render().getArray", "GroundedScan.helpers.numpy_array_to_image", "GroundedScan.helpers.image_to_numpy_array", "numpy.array_equal", "dataset._world.clear_situation", "dataset.initialize_world", "dataset._world.render().getArray", "GroundedScan.helpers.numpy_array_to_image", "GroundedScan.helpers.image_to_numpy_array", "numpy.array_equal", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.array_equal", "dataset._world.render", "dataset._world.render", "numpy.array_equal"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.getArray", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.numpy_array_to_image", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.image_to_numpy_array", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.getArray", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.numpy_array_to_image", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.image_to_numpy_array", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.render", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.render"], ["", "def", "test_image_representation_situations", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Test that situations are still the same when they need to be in image / numpy RGB array form.\"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "current_situation", "=", "dataset", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "dataset", ".", "_world", ".", "mission", "\n", "test_situations", "=", "[", "TEST_SITUATION_1", ",", "TEST_SITUATION_2", ",", "TEST_SITUATION_3", ",", "TEST_SITUATION_4", "]", "\n", "for", "i", ",", "test_situation_1", "in", "enumerate", "(", "test_situations", ")", ":", "\n", "        ", "for", "j", ",", "test_situation_2", "in", "enumerate", "(", "test_situations", ")", ":", "\n", "            ", "dataset", ".", "_world", ".", "clear_situation", "(", ")", "\n", "dataset", ".", "initialize_world", "(", "test_situation_1", ")", "\n", "np_situation_image_1", "=", "dataset", ".", "_world", ".", "render", "(", "mode", "=", "'human'", ")", ".", "getArray", "(", ")", "\n", "numpy_array_to_image", "(", "np_situation_image_1", ",", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test_im_1.png\"", ")", ")", "\n", "np_situation_image_1_reread", "=", "image_to_numpy_array", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test_im_1.png\"", ")", ")", "\n", "assert", "np", ".", "array_equal", "(", "np_situation_image_1", ",", "\n", "np_situation_image_1_reread", ")", ",", "\"test_image_representation_situations FAILED.\"", "\n", "dataset", ".", "_world", ".", "clear_situation", "(", ")", "\n", "dataset", ".", "initialize_world", "(", "test_situation_2", ")", "\n", "np_situation_image_2", "=", "dataset", ".", "_world", ".", "render", "(", ")", ".", "getArray", "(", ")", "\n", "numpy_array_to_image", "(", "np_situation_image_2", ",", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test_im_2.png\"", ")", ")", "\n", "np_situation_image_2_reread", "=", "image_to_numpy_array", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test_im_2.png\"", ")", ")", "\n", "assert", "np", ".", "array_equal", "(", "np_situation_image_2", ",", "\n", "np_situation_image_2_reread", ")", ",", "\"test_image_representation_situations FAILED.\"", "\n", "if", "i", "==", "j", ":", "\n", "                ", "assert", "np", ".", "array_equal", "(", "np_situation_image_1", ",", "np_situation_image_2", ")", ",", "\"test_image_representation_situations FAILED.\"", "\n", "", "else", ":", "\n", "                ", "assert", "not", "np", ".", "array_equal", "(", "np_situation_image_1", ",", "np_situation_image_2", ")", ",", "\"test_image_representation_situations FAILED.\"", "\n", "", "", "", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test_im_1.png\"", ")", ")", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "TEST_DIRECTORY", ",", "\"test_im_2.png\"", ")", ")", "\n", "dataset", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_image_representation_situations PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_encode_situation": [[666, 694], ["time.time", "dataset._world.get_current_situation", "GroundedScan.world.Situation", "dataset._world.clear_situation", "dataset.initialize_world", "numpy.zeros", "numpy.array", "dataset._object_vocabulary.get_object_vector", "dataset._object_vocabulary.get_object_vector", "dataset._world.grid.encode", "numpy.array_equal", "dataset.initialize_world", "time.time", "logger.info", "GroundedScan.world.Position", "GroundedScan.world.PositionedObject", "GroundedScan.world.PositionedObject", "GroundedScan.world.PositionedObject", "GroundedScan.world.Object", "GroundedScan.world.Position", "numpy.array", "GroundedScan.world.Object", "GroundedScan.world.Position", "numpy.array", "GroundedScan.world.Object", "GroundedScan.world.Position", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.get_object_vector", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.get_object_vector", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.encode", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world"], ["", "def", "test_encode_situation", "(", "dataset", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "current_situation", "=", "dataset", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "dataset", ".", "_world", ".", "mission", "\n", "test_situation", "=", "Situation", "(", "grid_size", "=", "15", ",", "agent_position", "=", "Position", "(", "row", "=", "7", ",", "column", "=", "2", ")", ",", "agent_direction", "=", "INT_TO_DIR", "[", "0", "]", ",", "\n", "target_object", "=", "PositionedObject", "(", "object", "=", "Object", "(", "size", "=", "2", ",", "color", "=", "'red'", ",", "shape", "=", "'circle'", ")", ",", "\n", "position", "=", "Position", "(", "row", "=", "7", ",", "column", "=", "2", ")", ",", "\n", "vector", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "1", "]", ")", ")", ",", "\n", "placed_objects", "=", "[", "PositionedObject", "(", "object", "=", "Object", "(", "size", "=", "2", ",", "color", "=", "'red'", ",", "shape", "=", "'circle'", ")", ",", "\n", "position", "=", "Position", "(", "row", "=", "7", ",", "column", "=", "2", ")", ",", "\n", "vector", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "1", "]", ")", ")", ",", "\n", "PositionedObject", "(", "object", "=", "Object", "(", "size", "=", "4", ",", "color", "=", "'green'", ",", "shape", "=", "'circle'", ")", ",", "\n", "position", "=", "Position", "(", "row", "=", "3", ",", "column", "=", "12", ")", ",", "\n", "vector", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", ")", "]", ",", "carrying", "=", "None", ")", "\n", "dataset", ".", "_world", ".", "clear_situation", "(", ")", "\n", "dataset", ".", "initialize_world", "(", "test_situation", ")", "\n", "expected_numpy_array", "=", "np", ".", "zeros", "(", "[", "15", ",", "15", ",", "dataset", ".", "_world", ".", "grid", ".", "_num_attributes_object", "+", "1", "+", "4", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "expected_numpy_array", "[", "7", ",", "2", ",", "-", "5", "]", "=", "1", "\n", "expected_numpy_array", "[", "7", ",", "2", ",", "-", "4", ":", "]", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "expected_numpy_array", "[", "7", ",", "2", ",", ":", "-", "5", "]", "=", "dataset", ".", "_object_vocabulary", ".", "get_object_vector", "(", "shape", "=", "'circle'", ",", "color", "=", "'red'", ",", "\n", "size", "=", "2", ")", "\n", "expected_numpy_array", "[", "3", ",", "12", ",", ":", "-", "5", "]", "=", "dataset", ".", "_object_vocabulary", ".", "get_object_vector", "(", "shape", "=", "'circle'", ",", "color", "=", "'green'", ",", "\n", "size", "=", "4", ")", "\n", "encoded_numpy_array", "=", "dataset", ".", "_world", ".", "grid", ".", "encode", "(", "agent_row", "=", "7", ",", "agent_column", "=", "2", ",", "agent_direction", "=", "0", ")", "\n", "assert", "np", ".", "array_equal", "(", "expected_numpy_array", ",", "encoded_numpy_array", ")", ",", "\"test_encode_situation FAILED.\"", "\n", "dataset", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_encode_situation PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_k_shot_generalization": [[696, 755], ["time.time", "dataset._world.get_current_situation", "dataset.get_data_pairs", "examples_per_split.items", "dataset.initialize_world", "time.time", "logger.info", "dataset._vocabulary.translate_meaning", "dataset._vocabulary.get_transitive_verbs", "dataset._vocabulary.translate_meaning", "dataset._vocabulary.get_transitive_verbs"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_data_pairs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_transitive_verbs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_transitive_verbs"], ["", "def", "test_k_shot_generalization", "(", "dataset", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "current_situation", "=", "dataset", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "dataset", ".", "_world", ".", "mission", "\n", "k_shot_generalization", "=", "5", "\n", "dataset", ".", "get_data_pairs", "(", "max_examples", "=", "100000", ",", "num_resampling", "=", "1", ",", "other_objects_sample_percentage", "=", "0.5", ",", "\n", "split_type", "=", "\"generalization\"", ",", "k_shot_generalization", "=", "k_shot_generalization", ")", "\n", "# Test that all the splits only contain examples related to their split.", "\n", "visual_split_examples", "=", "dataset", ".", "_data_pairs", "[", "\"visual\"", "]", "\n", "for", "example", "in", "visual_split_examples", ":", "\n", "        ", "target_object", "=", "example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"object\"", "]", "\n", "assert", "target_object", "[", "\"shape\"", "]", "==", "\"square\"", "and", "target_object", "[", "\"color\"", "]", "==", "\"red\"", ",", "\"test_k_shot_generalization FAILED in split visual.\"", "\n", "", "situational_split_1", "=", "dataset", ".", "_data_pairs", "[", "\"situational_1\"", "]", "\n", "for", "example", "in", "situational_split_1", ":", "\n", "        ", "direction_to_target", "=", "example", "[", "\"situation\"", "]", "[", "\"direction_to_target\"", "]", "\n", "assert", "direction_to_target", "==", "\"sw\"", ",", "\"test_k_shot_generalization FAILED in split situational_1.\"", "\n", "", "situational_split_2", "=", "dataset", ".", "_data_pairs", "[", "\"situational_2\"", "]", "\n", "for", "example", "in", "situational_split_2", ":", "\n", "        ", "referred_target", "=", "example", "[", "\"referred_target\"", "]", "\n", "assert", "\"small\"", "in", "referred_target", ",", "\"test_k_shot_generalization FAILED in split situational_2.\"", "\n", "target_size", "=", "example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"object\"", "]", "[", "\"size\"", "]", "\n", "assert", "target_size", "==", "'2'", ",", "\"test_k_shot_generalization FAILED in split situational_2.\"", "\n", "", "contextual_split", "=", "dataset", ".", "_data_pairs", "[", "\"contextual\"", "]", "\n", "for", "example", "in", "contextual_split", ":", "\n", "        ", "assert", "(", "dataset", ".", "_vocabulary", ".", "translate_meaning", "(", "example", "[", "\"verb_in_command\"", "]", ")", "\n", "in", "dataset", ".", "_vocabulary", ".", "get_transitive_verbs", "(", ")", ")", ",", "\"test_k_shot_generalization FAILED in split contextual.\"", "\n", "target_object", "=", "example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"object\"", "]", "\n", "assert", "target_object", "[", "\"shape\"", "]", "==", "\"square\"", "and", "target_object", "[", "\"size\"", "]", "==", "'3'", ",", "\"test_k_shot_generalization FAILED in split contextual.\"", "\n", "\n", "# Test that the training set doesn't contain more than k examples of each of the test splits.", "\n", "", "examples_per_split", "=", "{", "\"visual\"", ":", "0", ",", "\"situational_1\"", ":", "0", ",", "\"situational_2\"", ":", "0", ",", "\"contextual\"", ":", "0", ",", "\"adverb_1\"", ":", "0", "}", "\n", "for", "example", "in", "dataset", ".", "_data_pairs", "[", "\"train\"", "]", ":", "\n", "        ", "target_object", "=", "example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"object\"", "]", "\n", "target_size", "=", "target_object", "[", "\"size\"", "]", "\n", "direction_to_target", "=", "example", "[", "\"situation\"", "]", "[", "\"direction_to_target\"", "]", "\n", "referred_target", "=", "example", "[", "\"referred_target\"", "]", "\n", "if", "target_object", "[", "\"shape\"", "]", "==", "\"square\"", "and", "target_object", "[", "\"color\"", "]", "==", "\"red\"", ":", "\n", "            ", "examples_per_split", "[", "\"visual\"", "]", "+=", "1", "\n", "", "if", "direction_to_target", "==", "\"sw\"", ":", "\n", "            ", "examples_per_split", "[", "\"situational_1\"", "]", "+=", "1", "\n", "", "if", "\"small\"", "in", "referred_target", "and", "target_size", "==", "2", ":", "\n", "            ", "examples_per_split", "[", "\"situational_2\"", "]", "+=", "1", "\n", "", "if", "(", "dataset", ".", "_vocabulary", ".", "translate_meaning", "(", "example", "[", "\"verb_in_command\"", "]", ")", "in", "\n", "dataset", ".", "_vocabulary", ".", "get_transitive_verbs", "(", ")", "and", "\n", "target_object", "[", "\"shape\"", "]", "==", "\"square\"", "and", "target_object", "[", "\"size\"", "]", "==", "'3'", ")", ":", "\n", "            ", "examples_per_split", "[", "\"contextual\"", "]", "+=", "1", "\n", "", "", "for", "split", ",", "examples_count", "in", "examples_per_split", ".", "items", "(", ")", ":", "\n", "        ", "if", "split", "==", "\"adverb_1\"", ":", "\n", "            ", "assert", "examples_count", "==", "k_shot_generalization", ",", "\"test_k_shot_generalization FAILED in split train for split {}.\"", ".", "format", "(", "split", ")", "\n", "", "else", ":", "\n", "            ", "assert", "examples_count", "==", "0", ",", "\"test_k_shot_generalization FAILED in split train for split {}.\"", ".", "format", "(", "split", ")", "\n", "", "", "dataset", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"test_k_shot_generalization PASSED in {} seconds\"", ".", "format", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.run_all_tests": [[757, 811], ["dataset_test.test_save_and_load_dataset", "dataset_test.test_save_and_load_dataset", "dataset_test.test_save_and_load_dataset_nonce", "dataset_test.test_derivation_from_rules", "dataset_test.test_derivation_from_rules", "dataset_test.test_derivation_from_string", "dataset_test.test_derivation_from_string", "dataset_test.test_demonstrate_target_commands_one", "dataset_test.test_demonstrate_target_commands_one", "dataset_test.test_demonstrate_target_commands_two", "dataset_test.test_demonstrate_target_commands_two", "dataset_test.test_demonstrate_target_commands_three", "dataset_test.test_demonstrate_target_commands_three", "dataset_test.test_demonstrate_command_one", "dataset_test.test_demonstrate_command_one", "dataset_test.test_demonstrate_command_two", "dataset_test.test_demonstrate_command_two", "dataset_test.test_demonstrate_command_three", "dataset_test.test_demonstrate_command_three", "dataset_test.test_demonstrate_command_four", "dataset_test.test_demonstrate_command_four", "dataset_test.test_demonstrate_command_five", "dataset_test.test_demonstrate_command_five", "dataset_test.test_demonstrate_command_six", "dataset_test.test_demonstrate_command_six", "dataset_test.test_find_referred_target_one", "dataset_test.test_find_referred_target_one", "dataset_test.test_find_referred_target_two", "dataset_test.test_find_referred_target_two", "dataset_test.test_generate_possible_targets_one", "dataset_test.test_generate_possible_targets_one", "dataset_test.test_generate_possible_targets_two", "dataset_test.test_generate_possible_targets_two", "dataset_test.test_generate_situations_one", "dataset_test.test_generate_situations_one", "dataset_test.test_generate_situations_two", "dataset_test.test_generate_situations_two", "dataset_test.test_generate_situations_three", "dataset_test.test_generate_situations_three", "dataset_test.test_situation_representation_eq", "dataset_test.test_example_representation_eq", "dataset_test.test_example_representation_eq", "dataset_test.test_example_representation", "dataset_test.test_example_representation", "dataset_test.test_initialize_world", "dataset_test.test_initialize_world", "dataset_test.test_image_representation_situations", "dataset_test.test_image_representation_situations", "dataset_test.test_encode_situation", "dataset_test.test_encode_situation", "shutil.rmtree"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_save_and_load_dataset", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_save_and_load_dataset", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_save_and_load_dataset_nonce", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_derivation_from_rules", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_derivation_from_rules", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_derivation_from_string", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_derivation_from_string", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_target_commands_one", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_target_commands_one", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_target_commands_two", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_target_commands_two", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_target_commands_three", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_target_commands_three", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_one", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_one", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_two", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_two", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_three", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_three", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_four", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_four", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_five", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_five", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_six", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_demonstrate_command_six", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_find_referred_target_one", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_find_referred_target_one", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_find_referred_target_two", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_find_referred_target_two", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_generate_possible_targets_one", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_generate_possible_targets_one", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_generate_possible_targets_two", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_generate_possible_targets_two", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_generate_situations_one", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_generate_situations_one", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_generate_situations_two", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_generate_situations_two", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_generate_situations_three", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_generate_situations_three", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_situation_representation_eq", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_example_representation_eq", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_example_representation_eq", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_example_representation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_example_representation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_image_representation_situations", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_image_representation_situations", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_encode_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.test_encode_situation"], ["", "def", "run_all_tests", "(", ")", ":", "\n", "    ", "test_save_and_load_dataset", "(", "TEST_DATASET", ")", "\n", "test_save_and_load_dataset", "(", "TEST_DATASET_NONCE", ")", "\n", "test_save_and_load_dataset_nonce", "(", ")", "\n", "test_derivation_from_rules", "(", "TEST_DATASET", ")", "\n", "test_derivation_from_rules", "(", "TEST_DATASET_NONCE", ")", "\n", "test_derivation_from_string", "(", "TEST_DATASET", ")", "\n", "test_derivation_from_string", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_target_commands_one", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_target_commands_one", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_target_commands_two", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_target_commands_two", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_target_commands_three", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_target_commands_three", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_command_one", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_command_one", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_command_two", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_command_two", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_command_three", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_command_three", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_command_four", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_command_four", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_command_five", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_command_five", "(", "TEST_DATASET_NONCE", ")", "\n", "test_demonstrate_command_six", "(", "TEST_DATASET", ")", "\n", "test_demonstrate_command_six", "(", "TEST_DATASET_NONCE", ")", "\n", "test_find_referred_target_one", "(", "TEST_DATASET", ")", "\n", "test_find_referred_target_one", "(", "TEST_DATASET_NONCE", ")", "\n", "test_find_referred_target_two", "(", "TEST_DATASET", ")", "\n", "test_find_referred_target_two", "(", "TEST_DATASET_NONCE", ")", "\n", "test_generate_possible_targets_one", "(", "TEST_DATASET", ")", "\n", "test_generate_possible_targets_one", "(", "TEST_DATASET_NONCE", ")", "\n", "test_generate_possible_targets_two", "(", "TEST_DATASET", ")", "\n", "test_generate_possible_targets_two", "(", "TEST_DATASET_NONCE", ")", "\n", "test_generate_situations_one", "(", "TEST_DATASET", ")", "\n", "test_generate_situations_one", "(", "TEST_DATASET_NONCE", ")", "\n", "test_generate_situations_two", "(", "TEST_DATASET", ")", "\n", "test_generate_situations_two", "(", "TEST_DATASET_NONCE", ")", "\n", "test_generate_situations_three", "(", "TEST_DATASET", ")", "\n", "test_generate_situations_three", "(", "TEST_DATASET_NONCE", ")", "\n", "test_situation_representation_eq", "(", ")", "\n", "test_example_representation_eq", "(", "TEST_DATASET", ")", "\n", "test_example_representation_eq", "(", "TEST_DATASET_NONCE", ")", "\n", "test_example_representation", "(", "TEST_DATASET", ")", "\n", "test_example_representation", "(", "TEST_DATASET_NONCE", ")", "\n", "test_initialize_world", "(", "TEST_DATASET", ")", "\n", "test_initialize_world", "(", "TEST_DATASET_NONCE", ")", "\n", "test_image_representation_situations", "(", "TEST_DATASET", ")", "\n", "test_image_representation_situations", "(", "TEST_DATASET_NONCE", ")", "\n", "test_encode_situation", "(", "TEST_DATASET", ")", "\n", "test_encode_situation", "(", "TEST_DATASET_NONCE", ")", "\n", "#test_k_shot_generalization(TEST_DATASET)", "\n", "#test_k_shot_generalization(TEST_DATASET_NONCE)", "\n", "shutil", ".", "rmtree", "(", "TEST_DIRECTORY", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Term.__init__": [[96, 102], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "function", ":", "str", ",", "args", ":", "tuple", ",", "weights", "=", "None", ",", "meta", "=", "None", ",", "specs", "=", "None", ")", ":", "\n", "        ", "self", ".", "function", "=", "function", "\n", "self", ".", "arguments", "=", "args", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "meta", "=", "meta", "\n", "self", ".", "specs", "=", "specs", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Term.replace": [[103, 110], ["world.Term", "tuple"], "methods", ["None"], ["", "def", "replace", "(", "self", ",", "var_to_find", ":", "Variable", ",", "replace_by_var", ":", "Variable", ")", ":", "\n", "        ", "\"\"\"Find a variable `var_to_find` the arguments and replace it by `replace_by_var`.\"\"\"", "\n", "return", "Term", "(", "\n", "function", "=", "self", ".", "function", ",", "\n", "args", "=", "tuple", "(", "replace_by_var", "if", "variable", "==", "var_to_find", "else", "variable", "for", "variable", "in", "self", ".", "arguments", ")", ",", "\n", "specs", "=", "self", ".", "specs", ",", "\n", "meta", "=", "self", ".", "meta", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Term.to_predicate": [[112, 121], ["None"], "methods", ["None"], ["", "def", "to_predicate", "(", "self", ",", "predicate", ":", "dict", ")", ":", "\n", "        ", "assert", "self", ".", "specs", "is", "not", "None", "\n", "output", "=", "self", ".", "function", "\n", "if", "self", ".", "specs", ".", "noun", ":", "\n", "            ", "predicate", "[", "\"noun\"", "]", "=", "output", "\n", "", "elif", "self", ".", "specs", ".", "adjective_type", "==", "SIZE", ":", "\n", "            ", "predicate", "[", "\"size\"", "]", "=", "output", "\n", "", "elif", "self", ".", "specs", ".", "adjective_type", "==", "COLOR", ":", "\n", "            ", "predicate", "[", "\"color\"", "]", "=", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Term.__repr__": [[122, 127], ["parts.append"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "parts", "=", "[", "self", ".", "function", "]", "\n", "for", "variable", "in", "self", ".", "arguments", ":", "\n", "            ", "parts", ".", "append", "(", "\"{}:{}\"", ".", "format", "(", "variable", ".", "name", ",", "variable", ".", "sem_type", ".", "name", ")", ")", "\n", "", "return", "\"({})\"", ".", "format", "(", "\" \"", ".", "join", "(", "parts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.__init__": [[136, 141], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "variables", ":", "Tuple", "[", "Variable", "]", ",", "terms", ":", "Tuple", "[", "Term", "]", ")", ":", "\n", "        ", "self", ".", "variables", "=", "variables", "\n", "self", ".", "terms", "=", "terms", "\n", "if", "len", "(", "variables", ")", ">", "0", ":", "\n", "            ", "self", ".", "head", "=", "variables", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.bind": [[142, 154], ["world.LogicalForm", "term.replace", "tuple"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Term.replace"], ["", "", "def", "bind", "(", "self", ",", "bind_var", ":", "Variable", ")", ":", "\n", "        ", "\"\"\"\n        Bind a variable to its head, e.g for 'kick the ball', 'kick' is the head and 'the ball' will be bind to it.\n        Or in the case of NP -> JJ NP, bind the JJ (adjective) to the head of the noun-phrase.\n        E.g. 'the big red square', bind 'big' to 'square'.\n        :param bind_var:\n        :return:\n        \"\"\"", "\n", "sub_var", ",", "variables_out", "=", "self", ".", "variables", "[", "0", "]", ",", "self", ".", "variables", "[", "1", ":", "]", "\n", "# assert sub_var.sem_type == bind_var.sem_type", "\n", "terms_out", "=", "[", "term", ".", "replace", "(", "sub_var", ",", "bind_var", ")", "for", "term", "in", "self", ".", "terms", "]", "\n", "return", "LogicalForm", "(", "variables", "=", "(", "bind_var", ",", ")", "+", "variables_out", ",", "terms", "=", "tuple", "(", "terms_out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.select": [[155, 173], ["frozenset", "list", "set", "list", "world.LogicalForm", "len", "list.pop", "set", "tuple", "tuple", "list.append", "set.add", "list.append"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set"], ["", "def", "select", "(", "self", ",", "variables", ":", "list", ",", "exclude", "=", "frozenset", "(", ")", ")", ":", "\n", "        ", "\"\"\"Select and return the sub-logical form of the variables in the variables list.\"\"\"", "\n", "queue", "=", "list", "(", "variables", ")", "\n", "used_vars", "=", "set", "(", ")", "\n", "terms_out", "=", "[", "]", "\n", "while", "len", "(", "queue", ")", ">", "0", ":", "\n", "            ", "var", "=", "queue", ".", "pop", "(", ")", "\n", "deps", "=", "[", "term", "for", "term", "in", "self", ".", "terms", "if", "term", ".", "function", "not", "in", "exclude", "and", "term", ".", "arguments", "[", "0", "]", "==", "var", "]", "\n", "for", "term", "in", "deps", ":", "\n", "                ", "terms_out", ".", "append", "(", "term", ")", "\n", "used_vars", ".", "add", "(", "var", ")", "\n", "for", "variable", "in", "term", ".", "arguments", "[", "1", ":", "]", ":", "\n", "                    ", "if", "variable", "not", "in", "used_vars", ":", "\n", "                        ", "queue", ".", "append", "(", "variable", ")", "\n", "\n", "", "", "", "", "vars_out", "=", "[", "var", "for", "var", "in", "self", ".", "variables", "if", "var", "in", "used_vars", "]", "\n", "terms_out", "=", "list", "(", "set", "(", "terms_out", ")", ")", "\n", "return", "LogicalForm", "(", "tuple", "(", "vars_out", ")", ",", "tuple", "(", "terms_out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.to_predicate": [[174, 184], ["object_str.strip.strip.strip", "len", "term.to_predicate"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.to_predicate"], ["", "def", "to_predicate", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "variables", ")", "==", "1", "\n", "predicate", "=", "{", "\"noun\"", ":", "\"\"", ",", "\"size\"", ":", "\"\"", ",", "\"color\"", ":", "\"\"", "}", "\n", "[", "term", ".", "to_predicate", "(", "predicate", ")", "for", "term", "in", "self", ".", "terms", "]", "\n", "object_str", "=", "\"\"", "\n", "if", "predicate", "[", "\"color\"", "]", ":", "\n", "            ", "object_str", "+=", "' '", "+", "predicate", "[", "\"color\"", "]", "\n", "", "object_str", "+=", "' '", "+", "predicate", "[", "\"noun\"", "]", "\n", "object_str", "=", "object_str", ".", "strip", "(", ")", "\n", "return", "object_str", ",", "predicate", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.__repr__": [[185, 187], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"LF({})\"", ".", "format", "(", "\" ^ \"", ".", "join", "(", "[", "repr", "(", "term", ")", "for", "term", "in", "self", ".", "terms", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Situation.__init__": [[234, 242], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "grid_size", ":", "int", ",", "agent_position", ":", "Position", ",", "agent_direction", ":", "Direction", ",", "\n", "target_object", ":", "PositionedObject", ",", "placed_objects", ":", "List", "[", "PositionedObject", "]", ",", "carrying", "=", "None", ")", ":", "\n", "        ", "self", ".", "grid_size", "=", "grid_size", "\n", "self", ".", "agent_pos", "=", "agent_position", "# position is [col, row] (i.e. [x-axis, y-axis])", "\n", "self", ".", "agent_direction", "=", "agent_direction", "\n", "self", ".", "placed_objects", "=", "placed_objects", "\n", "self", ".", "carrying", "=", "carrying", "# The object the agent is carrying", "\n", "self", ".", "target_object", "=", "target_object", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Situation.distance_to_target": [[243, 248], ["abs", "abs"], "methods", ["None"], ["", "@", "property", "\n", "def", "distance_to_target", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of grid steps to take to reach the target position from the agent position.\"\"\"", "\n", "return", "abs", "(", "self", ".", "agent_pos", ".", "column", "-", "self", ".", "target_object", ".", "position", ".", "column", ")", "+", "abs", "(", "self", ".", "agent_pos", ".", "row", "-", "self", ".", "target_object", ".", "position", ".", "row", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Situation.direction_to_target": [[249, 257], ["min", "min", "max", "max"], "methods", ["None"], ["", "@", "property", "\n", "def", "direction_to_target", "(", "self", ")", ":", "\n", "        ", "\"\"\"Direction to the target in terms of north, east, south, north-east, etc. Needed for a grounded scan split.\"\"\"", "\n", "column_distance", "=", "self", ".", "target_object", ".", "position", ".", "column", "-", "self", ".", "agent_pos", ".", "column", "\n", "column_distance", "=", "min", "(", "max", "(", "-", "1", ",", "column_distance", ")", ",", "1", ")", "\n", "row_distance", "=", "self", ".", "agent_pos", ".", "row", "-", "self", ".", "target_object", ".", "position", ".", "row", "\n", "row_distance", "=", "min", "(", "max", "(", "-", "1", ",", "row_distance", ")", ",", "1", ")", "\n", "return", "DIR_VEC_TO_DIR", "[", "(", "column_distance", ",", "row_distance", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Situation.to_dict": [[258, 267], ["Position"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", "->", "dict", ":", "\n", "        ", "\"\"\"Represent this situation in a dictionary.\"\"\"", "\n", "return", "{", "\n", "\"agent_position\"", ":", "Position", "(", "column", "=", "self", ".", "agent_pos", "[", "0", "]", ",", "row", "=", "self", ".", "agent_pos", "[", "1", "]", ")", ",", "\n", "\"agent_direction\"", ":", "self", ".", "agent_direction", ",", "\n", "\"target_object\"", ":", "self", ".", "target_object", ",", "\n", "\"grid_size\"", ":", "self", ".", "grid_size", ",", "\n", "\"objects\"", ":", "self", ".", "placed_objects", ",", "\n", "\"carrying\"", ":", "self", ".", "carrying", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Situation.to_representation": [[269, 281], ["world.position_to_repr", "world.positioned_object_to_repr", "str", "str", "world.positioned_object_to_repr", "world.object_to_repr", "enumerate"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.position_to_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.positioned_object_to_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.positioned_object_to_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.object_to_repr"], ["", "def", "to_representation", "(", "self", ")", "->", "dict", ":", "\n", "        ", "\"\"\"Represent this situation in serializable dict that can be written to a file.\"\"\"", "\n", "return", "{", "\n", "\"grid_size\"", ":", "self", ".", "grid_size", ",", "\n", "\"agent_position\"", ":", "position_to_repr", "(", "self", ".", "agent_pos", ")", ",", "\n", "\"agent_direction\"", ":", "DIR_TO_INT", "[", "self", ".", "agent_direction", "]", ",", "\n", "\"target_object\"", ":", "positioned_object_to_repr", "(", "self", ".", "target_object", ")", "if", "self", ".", "target_object", "else", "None", ",", "\n", "\"distance_to_target\"", ":", "str", "(", "self", ".", "distance_to_target", ")", "if", "self", ".", "target_object", "else", "None", ",", "\n", "\"direction_to_target\"", ":", "self", ".", "direction_to_target", "if", "self", ".", "target_object", "else", "None", ",", "\n", "\"placed_objects\"", ":", "{", "str", "(", "i", ")", ":", "positioned_object_to_repr", "(", "placed_object", ")", "for", "i", ",", "placed_object", "\n", "in", "enumerate", "(", "self", ".", "placed_objects", ")", "}", ",", "\n", "\"carrying_object\"", ":", "object_to_repr", "(", "self", ".", "carrying", ")", "if", "self", ".", "carrying", "else", "None", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Situation.from_representation": [[283, 299], ["placed_object_reps.values", "cls", "placed_objects.append", "world.parse_positioned_object_repr", "world.parse_position_repr", "world.parse_positioned_object_repr", "world.parse_object_repr"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.parse_positioned_object_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_position_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.parse_positioned_object_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.parse_object_repr"], ["", "@", "classmethod", "\n", "def", "from_representation", "(", "cls", ",", "situation_representation", ":", "dict", ")", ":", "\n", "        ", "\"\"\"Initialize this class by some situation as represented by .to_representation().\"\"\"", "\n", "target_object", "=", "situation_representation", "[", "\"target_object\"", "]", "\n", "carrying_object", "=", "situation_representation", "[", "\"carrying_object\"", "]", "\n", "placed_object_reps", "=", "situation_representation", "[", "\"placed_objects\"", "]", "\n", "placed_objects", "=", "[", "]", "\n", "for", "placed_object_rep", "in", "placed_object_reps", ".", "values", "(", ")", ":", "\n", "            ", "placed_objects", ".", "append", "(", "parse_positioned_object_repr", "(", "placed_object_rep", ")", ")", "\n", "", "situation", "=", "cls", "(", "grid_size", "=", "situation_representation", "[", "\"grid_size\"", "]", ",", "\n", "agent_position", "=", "parse_position_repr", "(", "situation_representation", "[", "\"agent_position\"", "]", ")", ",", "\n", "agent_direction", "=", "INT_TO_DIR", "[", "situation_representation", "[", "\"agent_direction\"", "]", "]", ",", "\n", "target_object", "=", "parse_positioned_object_repr", "(", "target_object", ")", "if", "target_object", "else", "None", ",", "\n", "placed_objects", "=", "placed_objects", ",", "\n", "carrying", "=", "parse_object_repr", "(", "carrying_object", ")", "if", "carrying_object", "else", "None", ")", "\n", "return", "situation", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.Situation.__eq__": [[300, 321], ["other.to_representation", "world.Situation.to_representation", "world.Situation.__eq__.compare_nested_dict"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.to_representation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.to_representation"], ["", "def", "__eq__", "(", "self", ",", "other", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Recursive function to compare this situation to another and determine if they are equivalent.\"\"\"", "\n", "representation_other", "=", "other", ".", "to_representation", "(", ")", "\n", "representation_self", "=", "self", ".", "to_representation", "(", ")", "\n", "\n", "def", "compare_nested_dict", "(", "value_1", ",", "value_2", ",", "unequal_values", ")", ":", "\n", "            ", "if", "len", "(", "unequal_values", ")", ">", "0", ":", "\n", "                ", "return", "\n", "", "if", "isinstance", "(", "value_1", ",", "dict", ")", ":", "\n", "                ", "for", "k", ",", "v_1", "in", "value_1", ".", "items", "(", ")", ":", "\n", "                    ", "v_2", "=", "value_2", ".", "get", "(", "k", ")", "\n", "if", "not", "v_2", "and", "v_1", ":", "\n", "                        ", "unequal_values", ".", "append", "(", "False", ")", "\n", "", "compare_nested_dict", "(", "v_1", ",", "v_2", ",", "unequal_values", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "value_1", "!=", "value_2", ":", "\n", "                    ", "unequal_values", ".", "append", "(", "False", ")", "\n", "", "", "return", "\n", "", "result", "=", "[", "]", "\n", "compare_nested_dict", "(", "representation_self", ",", "representation_other", ",", "result", ")", "\n", "return", "not", "len", "(", "result", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.__init__": [[332, 369], ["set", "len", "set", "len", "list", "len", "world.ObjectVocabulary._object_class.update", "world.ObjectVocabulary.generate_objects", "set", "range", "enumerate", "range", "range", "itertools.product"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.generate_objects", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set"], ["def", "__init__", "(", "self", ",", "shapes", ":", "List", "[", "str", "]", ",", "colors", ":", "List", "[", "str", "]", ",", "min_size", ":", "int", ",", "max_size", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        :param shapes: a list of string names for nouns.\n        :param colors: a list of string names for colors.\n        :param min_size: minimum object size\n        :param max_size: maximum object size\n        \"\"\"", "\n", "assert", "self", ".", "SIZES", "[", "0", "]", "<=", "min_size", "<=", "max_size", "<=", "self", ".", "SIZES", "[", "-", "1", "]", ",", "\"Unsupported object sizes (min: {}, max: {}) specified.\"", ".", "format", "(", "min_size", ",", "max_size", ")", "\n", "self", ".", "_min_size", "=", "min_size", "\n", "self", ".", "_max_size", "=", "max_size", "\n", "\n", "# Translation from shape nouns to shapes.", "\n", "self", ".", "_shapes", "=", "set", "(", "shapes", ")", "\n", "self", ".", "_n_shapes", "=", "len", "(", "self", ".", "_shapes", ")", "\n", "self", ".", "_colors", "=", "set", "(", "colors", ")", "\n", "self", ".", "_n_colors", "=", "len", "(", "self", ".", "_colors", ")", "\n", "self", ".", "_idx_to_shapes_and_colors", "=", "shapes", "+", "colors", "\n", "self", ".", "_shapes_and_colors_to_idx", "=", "{", "token", ":", "i", "for", "i", ",", "token", "in", "enumerate", "(", "self", ".", "_idx_to_shapes_and_colors", ")", "}", "\n", "self", ".", "_sizes", "=", "list", "(", "range", "(", "min_size", ",", "max_size", "+", "1", ")", ")", "\n", "\n", "# Also size specification for 'average' size, e.g. if adjectives are small and big, 3 sizes exist.", "\n", "self", ".", "_n_sizes", "=", "len", "(", "self", ".", "_sizes", ")", "\n", "assert", "(", "self", ".", "_n_sizes", "%", "2", ")", "==", "0", ",", "\"Please specify an even amount of sizes \"", "\" (needs to be split in 2 classes.)\"", "\n", "self", ".", "_middle_size", "=", "(", "max_size", "+", "min_size", ")", "//", "2", "\n", "\n", "# Make object classes.", "\n", "self", ".", "_object_class", "=", "{", "i", ":", "\"light\"", "for", "i", "in", "range", "(", "min_size", ",", "self", ".", "_middle_size", "+", "1", ")", "}", "\n", "self", ".", "_heavy_weights", "=", "{", "i", ":", "\"heavy\"", "for", "i", "in", "range", "(", "self", ".", "_middle_size", "+", "1", ",", "max_size", "+", "1", ")", "}", "\n", "self", ".", "_object_class", ".", "update", "(", "self", ".", "_heavy_weights", ")", "\n", "\n", "# Prepare object vectors.", "\n", "self", ".", "_object_vector_size", "=", "self", ".", "_n_shapes", "+", "self", ".", "_n_colors", "+", "self", ".", "_n_sizes", "\n", "self", ".", "_object_vectors", "=", "self", ".", "generate_objects", "(", ")", "\n", "self", ".", "_possible_colored_objects", "=", "set", "(", "[", "color", "+", "' '", "+", "shape", "for", "color", ",", "shape", "in", "itertools", ".", "product", "(", "self", ".", "_colors", ",", "\n", "self", ".", "_shapes", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.has_object": [[370, 372], ["None"], "methods", ["None"], ["", "def", "has_object", "(", "self", ",", "shape", ":", "str", ",", "color", ":", "str", ",", "size", ":", "int", ")", ":", "\n", "        ", "return", "shape", "in", "self", ".", "_shapes", "and", "color", "in", "self", ".", "_colors", "and", "size", "in", "self", ".", "_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.object_in_class": [[373, 375], ["None"], "methods", ["None"], ["", "def", "object_in_class", "(", "self", ",", "size", ":", "int", ")", ":", "\n", "        ", "return", "self", ".", "_object_class", "[", "size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.num_object_attributes": [[376, 380], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_object_attributes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Dimension of object vectors is one hot for shapes and colors + 1 ordinal dimension for size.\"\"\"", "\n", "return", "len", "(", "self", ".", "_idx_to_shapes_and_colors", ")", "+", "self", ".", "_n_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.smallest_size": [[381, 384], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "smallest_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_min_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.largest_size": [[385, 388], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "largest_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.object_shapes": [[389, 392], ["world.ObjectVocabulary._shapes.copy"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["", "@", "property", "\n", "def", "object_shapes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_shapes", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.object_sizes": [[393, 396], ["world.ObjectVocabulary._sizes.copy"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["", "@", "property", "\n", "def", "object_sizes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sizes", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.object_colors": [[397, 400], ["world.ObjectVocabulary._colors.copy"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["", "@", "property", "\n", "def", "object_colors", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_colors", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.all_objects": [[401, 404], ["itertools.product"], "methods", ["None"], ["", "@", "property", "\n", "def", "all_objects", "(", "self", ")", ":", "\n", "        ", "return", "product", "(", "self", ".", "object_sizes", ",", "self", ".", "object_colors", ",", "self", ".", "object_shapes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.sample_size": [[405, 407], ["random.choice"], "methods", ["None"], ["", "def", "sample_size", "(", "self", ")", ":", "\n", "        ", "return", "random", ".", "choice", "(", "self", ".", "_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.sample_color": [[408, 410], ["random.choice", "list"], "methods", ["None"], ["", "def", "sample_color", "(", "self", ")", ":", "\n", "        ", "return", "random", ".", "choice", "(", "list", "(", "self", ".", "_colors", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.get_object_vector": [[411, 414], ["world.ObjectVocabulary.has_object"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.has_object"], ["", "def", "get_object_vector", "(", "self", ",", "shape", ":", "str", ",", "color", ":", "str", ",", "size", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "assert", "self", ".", "has_object", "(", "shape", ",", "color", ",", "size", ")", ",", "\"Trying to get an unavailable object vector from the vocabulary/\"", "\n", "return", "self", ".", "_object_vectors", "[", "shape", "]", "[", "color", "]", "[", "size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.generate_objects": [[415, 435], ["itertools.product", "GroundedScan.helpers.one_hot", "object_to_object_vector.keys", "object_to_object_vector[].keys", "GroundedScan.helpers.one_hot", "GroundedScan.helpers.one_hot"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.one_hot", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.one_hot", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.one_hot"], ["", "def", "generate_objects", "(", "self", ")", "->", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", "]", ":", "\n", "        ", "\"\"\"\n        An object vector is built as follows: the first entry is an ordinal entry defining the size (from 1 the smallest\n        to 4 the largest), then 2 entries define a one-hot vector over shape, the last two entries define a one-hot\n        vector over color. A red circle of size 1 could then be: [1 0 1 0 1], meaning a blue square of size 2 would be\n        [2 1 0 1 0].\n        \"\"\"", "\n", "object_to_object_vector", "=", "{", "}", "\n", "for", "size", ",", "color", ",", "shape", "in", "itertools", ".", "product", "(", "self", ".", "_sizes", ",", "self", ".", "_colors", ",", "self", ".", "_shapes", ")", ":", "\n", "            ", "object_vector", "=", "one_hot", "(", "self", ".", "_object_vector_size", ",", "size", "-", "1", ")", "+", "one_hot", "(", "self", ".", "_object_vector_size", ",", "self", ".", "_shapes_and_colors_to_idx", "[", "color", "]", "+", "self", ".", "_n_sizes", ")", "+", "one_hot", "(", "self", ".", "_object_vector_size", ",", "self", ".", "_shapes_and_colors_to_idx", "[", "shape", "]", "+", "self", ".", "_n_sizes", ")", "\n", "# object_vector = np.concatenate(([size], object_vector))", "\n", "if", "shape", "not", "in", "object_to_object_vector", ".", "keys", "(", ")", ":", "\n", "                ", "object_to_object_vector", "[", "shape", "]", "=", "{", "}", "\n", "", "if", "color", "not", "in", "object_to_object_vector", "[", "shape", "]", ".", "keys", "(", ")", ":", "\n", "                ", "object_to_object_vector", "[", "shape", "]", "[", "color", "]", "=", "{", "}", "\n", "", "object_to_object_vector", "[", "shape", "]", "[", "color", "]", "[", "size", "]", "=", "object_vector", "\n", "\n", "", "return", "object_to_object_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.__init__": [[448, 479], ["zip", "len", "set", "set", "GroundedScan.gym_minigrid.minigrid.MiniGridEnv.__init__", "GroundedScan.gym_minigrid.minigrid.IDX_TO_OBJECT.keys", "GroundedScan.gym_minigrid.minigrid.OBJECT_TO_IDX.keys"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "grid_size", ":", "int", ",", "shapes", ":", "List", "[", "str", "]", ",", "colors", ":", "List", "[", "str", "]", ",", "object_vocabulary", ":", "ObjectVocabulary", ",", "\n", "save_directory", ":", "str", ")", ":", "\n", "# Some checks on the input", "\n", "        ", "for", "shape", ",", "color", "in", "zip", "(", "shapes", ",", "colors", ")", ":", "\n", "            ", "assert", "shape", "in", "self", ".", "AVAILABLE_SHAPES", ",", "\"Specified shape {} not implemented in minigrid env.\"", ".", "format", "(", "shape", ")", "\n", "assert", "color", "in", "self", ".", "AVAILABLE_COLORS", ",", "\"Specified color {}, not implemented in minigrid env.\"", ".", "format", "(", "color", ")", "\n", "\n", "# Define the grid world.", "\n", "", "self", ".", "grid_size", "=", "grid_size", "\n", "\n", "# Column, row", "\n", "self", ".", "agent_start_pos", "=", "(", "0", ",", "0", ")", "\n", "self", ".", "agent_start_dir", "=", "DIR_TO_INT", "[", "EAST", "]", "\n", "self", ".", "mission", "=", "None", "\n", "\n", "# Generate the object vocabulary.", "\n", "self", ".", "_object_vocabulary", "=", "object_vocabulary", "\n", "self", ".", "num_available_objects", "=", "len", "(", "IDX_TO_OBJECT", ".", "keys", "(", ")", ")", "\n", "self", ".", "available_objects", "=", "set", "(", "OBJECT_TO_IDX", ".", "keys", "(", ")", ")", "\n", "\n", "# Data structures for keeping track of the current state of the world.", "\n", "self", ".", "_placed_object_list", "=", "[", "]", "\n", "self", ".", "_target_object", "=", "None", "\n", "self", ".", "_observed_commands", "=", "[", "]", "\n", "self", ".", "_observed_situations", "=", "[", "]", "\n", "self", ".", "_occupied_positions", "=", "set", "(", ")", "\n", "# Hash table for looking up locations of objects based on partially formed references (e.g. find the location(s)", "\n", "# of a red cylinder when the grid has both a big red cylinder and a small red cylinder.)", "\n", "self", ".", "_object_lookup_table", "=", "{", "}", "\n", "self", ".", "save_directory", "=", "save_directory", "\n", "super", "(", ")", ".", "__init__", "(", "grid_size", "=", "grid_size", ",", "max_steps", "=", "4", "*", "grid_size", "*", "grid_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World._gen_grid": [[480, 491], ["GroundedScan.gym_minigrid.minigrid.Grid", "world.World.place_agent", "world.World._occupied_positions.add"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create an empty grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ",", "depth", "=", "self", ".", "_object_vocabulary", ".", "num_object_attributes", ")", "\n", "\n", "# Place the agent", "\n", "if", "self", ".", "agent_start_pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "agent_pos", "=", "self", ".", "agent_start_pos", "\n", "self", ".", "agent_dir", "=", "self", ".", "agent_start_dir", "\n", "", "else", ":", "\n", "            ", "position", "=", "self", ".", "place_agent", "(", ")", "\n", "self", ".", "_occupied_positions", ".", "add", "(", "position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.initialize": [[492, 516], ["world.World.clear_situation", "world.World.place_agent_at", "world.World.place_object", "world.World.create_object", "numpy.array", "world.World._object_vocabulary.get_object_vector"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.place_agent_at", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.place_object", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.create_object", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.get_object_vector"], ["", "", "def", "initialize", "(", "self", ",", "objects", ":", "List", "[", "Tuple", "[", "Object", ",", "Position", "]", "]", ",", "agent_position", ":", "Position", ",", "agent_direction", ":", "Direction", ",", "\n", "target_object", ":", "PositionedObject", ",", "carrying", ":", "Object", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Create a grid world by placing the objects that are passed as an argument at the specified locations and the\n        agent at the specified location.\n        \"\"\"", "\n", "self", ".", "clear_situation", "(", ")", "\n", "self", ".", "agent_dir", "=", "DIR_TO_INT", "[", "agent_direction", "]", "\n", "self", ".", "place_agent_at", "(", "agent_position", ")", "\n", "self", ".", "_target_object", "=", "target_object", "\n", "for", "current_object", ",", "current_position", "in", "objects", ":", "\n", "            ", "target", "=", "False", "\n", "if", "target_object", ":", "\n", "                ", "if", "target_object", ".", "position", "==", "current_position", ":", "\n", "                    ", "target", "=", "True", "\n", "", "", "self", ".", "place_object", "(", "current_object", ",", "current_position", ",", "target", "=", "target", ")", "\n", "", "if", "carrying", ":", "\n", "            ", "carrying_object", "=", "self", ".", "create_object", "(", "carrying", ",", "\n", "self", ".", "_object_vocabulary", ".", "get_object_vector", "(", "carrying", ".", "shape", ",", "\n", "carrying", ".", "color", ",", "\n", "carrying", ".", "size", ")", ")", "\n", "self", ".", "carrying", "=", "carrying_object", "\n", "self", ".", "carrying", ".", "cur_pos", "=", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "self", ".", "carrying", ".", "cur_pos", "=", "self", ".", "agent_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.create_object": [[517, 532], ["GroundedScan.gym_minigrid.minigrid.Circle", "GroundedScan.gym_minigrid.minigrid.Square", "world.World._object_vocabulary.object_in_class", "GroundedScan.gym_minigrid.minigrid.Cylinder", "ValueError", "world.World._object_vocabulary.object_in_class", "world.World._object_vocabulary.object_in_class"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.object_in_class", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.object_in_class", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.object_in_class"], ["", "", "def", "create_object", "(", "self", ",", "object_spec", ":", "Object", ",", "object_vector", ":", "np", ".", "ndarray", ",", "target", "=", "False", ")", ":", "\n", "        ", "if", "object_spec", ".", "shape", "==", "\"circle\"", ":", "\n", "            ", "return", "Circle", "(", "object_spec", ".", "color", ",", "size", "=", "object_spec", ".", "size", ",", "vector_representation", "=", "object_vector", ",", "\n", "object_representation", "=", "object_spec", ",", "target", "=", "target", ",", "\n", "weight", "=", "self", ".", "_object_vocabulary", ".", "object_in_class", "(", "object_spec", ".", "size", ")", ")", "\n", "", "elif", "object_spec", ".", "shape", "==", "\"square\"", ":", "\n", "            ", "return", "Square", "(", "object_spec", ".", "color", ",", "size", "=", "object_spec", ".", "size", ",", "vector_representation", "=", "object_vector", ",", "\n", "object_representation", "=", "object_spec", ",", "target", "=", "target", ",", "\n", "weight", "=", "self", ".", "_object_vocabulary", ".", "object_in_class", "(", "object_spec", ".", "size", ")", ")", "\n", "", "elif", "object_spec", ".", "shape", "==", "\"cylinder\"", ":", "\n", "            ", "return", "Cylinder", "(", "object_spec", ".", "color", ",", "size", "=", "object_spec", ".", "size", ",", "vector_representation", "=", "object_vector", ",", "\n", "object_representation", "=", "object_spec", ",", "\n", "weight", "=", "self", ".", "_object_vocabulary", ".", "object_in_class", "(", "object_spec", ".", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Trying to create an object shape {} that is not implemented.\"", ".", "format", "(", "object_spec", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.position_taken": [[533, 535], ["world.World.grid.get"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get"], ["", "", "def", "position_taken", "(", "self", ",", "position", ":", "Position", ")", ":", "\n", "        ", "return", "self", ".", "grid", ".", "get", "(", "position", ".", "column", ",", "position", ".", "row", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.within_grid": [[536, 541], ["None"], "methods", ["None"], ["", "def", "within_grid", "(", "self", ",", "position", ":", "Position", ")", ":", "\n", "        ", "if", "0", "<=", "position", ".", "row", "<", "self", ".", "grid_size", "and", "0", "<=", "position", ".", "column", "<", "self", ".", "grid_size", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.place_agent_at": [[542, 548], ["world.World.position_taken", "world.World.place_agent", "world.World._occupied_positions.add", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.position_taken", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "", "def", "place_agent_at", "(", "self", ",", "position", ":", "Position", ")", ":", "\n", "        ", "if", "not", "self", ".", "position_taken", "(", "position", ")", ":", "\n", "            ", "self", ".", "place_agent", "(", "top", "=", "(", "position", ".", "column", ",", "position", ".", "row", ")", ",", "size", "=", "(", "1", ",", "1", ")", ",", "rand_dir", "=", "False", ")", "\n", "self", ".", "_occupied_positions", ".", "add", "(", "(", "position", ".", "column", ",", "position", ".", "row", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Trying to place agent on cell that is already taken.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.sample_position": [[549, 555], ["random.sample().pop", "Position", "itertools.product", "random.sample", "list", "list", "range", "range"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.sample"], ["", "", "def", "sample_position", "(", "self", ")", "->", "Position", ":", "\n", "        ", "available_positions", "=", "[", "(", "row", ",", "col", ")", "for", "row", ",", "col", "in", "itertools", ".", "product", "(", "list", "(", "range", "(", "self", ".", "grid_size", ")", ")", ",", "\n", "list", "(", "range", "(", "self", ".", "grid_size", ")", ")", ")", "\n", "if", "(", "col", ",", "row", ")", "not", "in", "self", ".", "_occupied_positions", "]", "\n", "sampled_position", "=", "random", ".", "sample", "(", "available_positions", ",", "1", ")", ".", "pop", "(", ")", "\n", "return", "Position", "(", "row", "=", "sampled_position", "[", "0", "]", ",", "column", "=", "sampled_position", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.min_distance_from_edge": [[556, 560], ["min", "min", "min"], "methods", ["None"], ["", "def", "min_distance_from_edge", "(", "self", ",", "position", ":", "Position", ")", ":", "\n", "        ", "row_distance", "=", "min", "(", "self", ".", "grid_size", "-", "position", ".", "row", ",", "position", ".", "row", ")", "\n", "column_distance", "=", "min", "(", "self", ".", "grid_size", "-", "position", ".", "column", ",", "position", ".", "column", ")", "\n", "return", "min", "(", "row_distance", ",", "column_distance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.sample_position_steps_from_edge": [[561, 571], ["random.sample().pop", "Position", "itertools.product", "world.World.min_distance_from_edge", "actual_available_positions.append", "random.sample", "list", "list", "Position", "range", "range"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.min_distance_from_edge", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.sample"], ["", "def", "sample_position_steps_from_edge", "(", "self", ",", "distance_from_edge", "=", "1", ")", "->", "Position", ":", "\n", "        ", "available_positions", "=", "[", "(", "row", ",", "col", ")", "for", "row", ",", "col", "in", "itertools", ".", "product", "(", "list", "(", "range", "(", "self", ".", "grid_size", ")", ")", ",", "\n", "list", "(", "range", "(", "self", ".", "grid_size", ")", ")", ")", "\n", "if", "(", "row", ",", "col", ")", "not", "in", "self", ".", "_occupied_positions", "]", "\n", "actual_available_positions", "=", "[", "]", "\n", "for", "row", ",", "col", "in", "available_positions", ":", "\n", "            ", "if", "self", ".", "min_distance_from_edge", "(", "Position", "(", "row", "=", "row", ",", "column", "=", "col", ")", ")", "<=", "distance_from_edge", ":", "\n", "                ", "actual_available_positions", ".", "append", "(", "(", "row", ",", "col", ")", ")", "\n", "", "", "sampled_position", "=", "random", ".", "sample", "(", "actual_available_positions", ",", "1", ")", ".", "pop", "(", ")", "\n", "return", "Position", "(", "row", "=", "sampled_position", "[", "0", "]", ",", "column", "=", "sampled_position", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.sample_position_conditioned": [[572, 589], ["range", "random.sample().pop", "Position", "range", "available_positions.append", "random.sample"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.sample"], ["", "def", "sample_position_conditioned", "(", "self", ",", "north", ",", "east", ",", "south", ",", "west", ")", ":", "\n", "        ", "\"\"\"\n        Specify for each direction how many steps should be free (i.e. before hitting wall) in that direction.\n        \"\"\"", "\n", "assert", "north", "==", "0", "or", "south", "==", "0", ",", "\"Can't take steps in both North and South direction\"", "\n", "assert", "east", "==", "0", "or", "west", "==", "0", ",", "\"Can't take steps in both East and West direction\"", "\n", "\n", "max_col", "=", "self", ".", "grid_size", "-", "east", "if", "east", ">", "0", "else", "self", ".", "grid_size", "-", "1", "\n", "min_col", "=", "west", "-", "1", "if", "west", ">", "0", "else", "0", "\n", "max_row", "=", "self", ".", "grid_size", "-", "south", "if", "south", ">", "0", "else", "self", ".", "grid_size", "-", "1", "\n", "min_row", "=", "north", "-", "1", "if", "north", ">", "0", "else", "0", "\n", "available_positions", "=", "[", "]", "\n", "for", "col", "in", "range", "(", "min_col", ",", "max_col", "+", "1", ")", ":", "\n", "            ", "for", "row", "in", "range", "(", "min_row", ",", "max_row", "+", "1", ")", ":", "\n", "                ", "available_positions", ".", "append", "(", "(", "row", ",", "col", ")", ")", "\n", "", "", "sampled_position", "=", "random", ".", "sample", "(", "available_positions", ",", "1", ")", ".", "pop", "(", ")", "\n", "return", "Position", "(", "row", "=", "sampled_position", "[", "0", "]", ",", "column", "=", "sampled_position", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.place_object": [[590, 616], ["world.World.position_taken", "world.World.within_grid", "IndexError", "print", "world.World._object_vocabulary.get_object_vector", "PositionedObject", "world.World.place_obj", "world.World._placed_object_list.append", "world.World._add_object_to_lookup_table", "world.World._occupied_positions.add", "world.World.create_object"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.position_taken", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.get_object_vector", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World._add_object_to_lookup_table", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.create_object"], ["", "def", "place_object", "(", "self", ",", "object_spec", ":", "Object", ",", "position", ":", "Position", ",", "target", "=", "False", ")", ":", "\n", "        ", "if", "not", "self", ".", "within_grid", "(", "position", ")", ":", "\n", "            ", "raise", "IndexError", "(", "\"Trying to place object '{}' outside of grid of size {}.\"", ".", "format", "(", "\n", "object_spec", ".", "shape", ",", "self", ".", "grid_size", ")", ")", "\n", "# Object already placed at this location", "\n", "", "if", "self", ".", "position_taken", "(", "position", ")", ":", "\n", "            ", "print", "(", "\"WARNING: attempt to place two objects at location ({}, {}), but overlapping objects not \"", "\n", "\"supported. Skipping object.\"", ".", "format", "(", "position", ".", "row", ",", "position", ".", "column", ")", ")", "\n", "", "else", ":", "\n", "            ", "object_vector", "=", "self", ".", "_object_vocabulary", ".", "get_object_vector", "(", "shape", "=", "object_spec", ".", "shape", ",", "color", "=", "object_spec", ".", "color", ",", "\n", "size", "=", "object_spec", ".", "size", ")", "\n", "positioned_object", "=", "PositionedObject", "(", "object", "=", "object_spec", ",", "position", "=", "position", ",", "vector", "=", "object_vector", ")", "\n", "self", ".", "place_obj", "(", "self", ".", "create_object", "(", "object_spec", ",", "object_vector", ",", "target", "=", "target", ")", ",", "\n", "top", "=", "(", "position", ".", "column", ",", "position", ".", "row", ")", ",", "size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "# Add to list that keeps track of all objects currently positioned on the grid.", "\n", "self", ".", "_placed_object_list", ".", "append", "(", "positioned_object", ")", "\n", "\n", "# Adjust the object lookup table accordingly.", "\n", "self", ".", "_add_object_to_lookup_table", "(", "positioned_object", ")", "\n", "\n", "# Add to occupied positions:", "\n", "self", ".", "_occupied_positions", ".", "add", "(", "(", "position", ".", "column", ",", "position", ".", "row", ")", ")", "\n", "\n", "if", "target", ":", "\n", "                ", "self", ".", "_target_object", "=", "positioned_object", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World._add_object_to_lookup_table": [[617, 634], ["GroundedScan.helpers.generate_possible_object_names", "[].append", "world.World._object_lookup_table.keys", "world.World._object_lookup_table[].keys"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.generate_possible_object_names"], ["", "", "", "def", "_add_object_to_lookup_table", "(", "self", ",", "positioned_object", ":", "PositionedObject", ")", ":", "\n", "        ", "object_size", "=", "positioned_object", ".", "object", ".", "size", "\n", "object_color", "=", "positioned_object", ".", "object", ".", "color", "\n", "object_shape", "=", "positioned_object", ".", "object", ".", "shape", "\n", "\n", "# Generate all possible names", "\n", "object_names", "=", "generate_possible_object_names", "(", "color", "=", "object_color", ",", "shape", "=", "object_shape", ")", "\n", "for", "possible_object_name", "in", "object_names", ":", "\n", "            ", "if", "possible_object_name", "not", "in", "self", ".", "_object_lookup_table", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "_object_lookup_table", "[", "possible_object_name", "]", "=", "{", "}", "\n", "\n", "# This part allows for multiple exactly the same objects (e.g. 2 small red circles) to be on the grid.", "\n", "", "if", "positioned_object", ".", "object", ".", "size", "not", "in", "self", ".", "_object_lookup_table", "[", "possible_object_name", "]", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "_object_lookup_table", "[", "possible_object_name", "]", "=", "{", "\n", "size", ":", "[", "]", "for", "size", "in", "self", ".", "_object_vocabulary", ".", "object_sizes", "}", "\n", "", "self", ".", "_object_lookup_table", "[", "possible_object_name", "]", "[", "object_size", "]", ".", "append", "(", "\n", "positioned_object", ".", "position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World._remove_object": [[635, 654], ["enumerate", "world.World._remove_object_from_lookup_table", "world.World.grid.get", "world.World.grid.set", "world.World._occupied_positions.remove"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World._remove_object_from_lookup_table", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set"], ["", "", "def", "_remove_object", "(", "self", ",", "target_position", ":", "Position", ")", "->", "PositionedObject", ":", "\n", "# remove from placed_object_list", "\n", "        ", "target_object", "=", "None", "\n", "for", "i", ",", "positioned_object", "in", "enumerate", "(", "self", ".", "_placed_object_list", ")", ":", "\n", "            ", "if", "positioned_object", ".", "position", "==", "target_position", ":", "\n", "                ", "target_object", "=", "self", ".", "_placed_object_list", "[", "i", "]", "\n", "del", "self", ".", "_placed_object_list", "[", "i", "]", "\n", "break", "\n", "\n", "# remove from object_lookup Table", "\n", "", "", "self", ".", "_remove_object_from_lookup_table", "(", "target_object", ")", "\n", "\n", "# remove from gym grid", "\n", "self", ".", "grid", ".", "get", "(", "target_position", ".", "column", ",", "target_position", ".", "row", ")", "\n", "self", ".", "grid", ".", "set", "(", "target_position", ".", "column", ",", "target_position", ".", "row", ",", "None", ")", "\n", "\n", "self", ".", "_occupied_positions", ".", "remove", "(", "(", "target_position", ".", "column", ",", "target_position", ".", "row", ")", ")", "\n", "\n", "return", "target_object", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World._remove_object_from_lookup_table": [[655, 661], ["GroundedScan.helpers.generate_possible_object_names", "[].remove"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.generate_possible_object_names"], ["", "def", "_remove_object_from_lookup_table", "(", "self", ",", "positioned_object", ":", "PositionedObject", ")", ":", "\n", "        ", "possible_object_names", "=", "generate_possible_object_names", "(", "positioned_object", ".", "object", ".", "color", ",", "\n", "positioned_object", ".", "object", ".", "shape", ")", "\n", "for", "possible_object_name", "in", "possible_object_names", ":", "\n", "            ", "self", ".", "_object_lookup_table", "[", "possible_object_name", "]", "[", "positioned_object", ".", "object", ".", "size", "]", ".", "remove", "(", "\n", "positioned_object", ".", "position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.move_object": [[662, 671], ["world.World._remove_object", "world.World.place_object", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World._remove_object", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.place_object"], ["", "", "def", "move_object", "(", "self", ",", "old_position", ":", "Position", ",", "new_position", ":", "Position", ")", ":", "\n", "# Remove object from old position", "\n", "        ", "old_positioned_object", "=", "self", ".", "_remove_object", "(", "old_position", ")", "\n", "if", "not", "old_positioned_object", ":", "\n", "            ", "raise", "ValueError", "(", "\"Trying to move an object from an empty grid location (row {}, col {})\"", ".", "format", "(", "\n", "old_position", ".", "row", ",", "old_position", ".", "column", ")", ")", "\n", "\n", "# Add object at new position", "\n", "", "self", ".", "place_object", "(", "old_positioned_object", ".", "object", ",", "new_position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.pull": [[672, 676], ["world.World._observed_commands.append", "world.World._observed_situations.append", "world.World.get_current_situation"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation"], ["", "def", "pull", "(", "self", ",", "position", ":", "Position", ")", ":", "\n", "        ", "self", ".", "agent_pos", "=", "(", "position", ".", "column", ",", "position", ".", "row", ")", "\n", "self", ".", "_observed_commands", ".", "append", "(", "\"pull\"", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.pick_up_object": [[677, 688], ["world.World.step", "world.World.grid.get", "world.World._remove_object", "world.World._observed_commands.append", "world.World._observed_situations.append", "Position", "world.World.get_current_situation"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World._remove_object", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation"], ["", "def", "pick_up_object", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Picking up an object in gym-minigrid means removing it and saying the agent is carrying it.\n        :return:\n        \"\"\"", "\n", "assert", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "agent_pos", ")", "is", "not", "None", ",", "\"Trying to pick up an object at an empty cell.\"", "\n", "self", ".", "step", "(", "self", ".", "actions", ".", "pickup", ")", "\n", "if", "self", ".", "carrying", ":", "\n", "            ", "self", ".", "_remove_object", "(", "Position", "(", "column", "=", "self", ".", "agent_pos", "[", "0", "]", ",", "row", "=", "self", ".", "agent_pos", "[", "1", "]", ")", ")", "\n", "self", ".", "_observed_commands", ".", "append", "(", "\"PICK UP\"", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.drop_object": [[689, 696], ["world.World.place_object", "world.World._observed_commands.append", "world.World._observed_situations.append", "Position", "world.World.get_current_situation"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.place_object", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation"], ["", "", "def", "drop_object", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "carrying", "is", "not", "None", ",", "\"Trying to drop something but not carrying anything.\"", "\n", "self", ".", "place_object", "(", "self", ".", "carrying", ".", "object_representation", ",", "Position", "(", "column", "=", "self", ".", "agent_pos", "[", "0", "]", ",", "\n", "row", "=", "self", ".", "agent_pos", "[", "1", "]", ")", ")", "\n", "self", ".", "carrying", "=", "None", "\n", "self", ".", "_observed_commands", ".", "append", "(", "\"DROP\"", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.push_or_pull_object": [[697, 720], ["world.World.grid.get", "world.World._observed_commands.append", "world.World._observed_situations.append", "world.World.can_push", "world.World.push", "world.World.get_current_situation", "Position", "world.World.within_grid", "world.World._observed_commands.append", "world.World._observed_situations.append", "world.World.get_current_situation", "world.World.grid.get", "world.World.move_object", "Position", "world.World.take_step_in_direction", "world.World.pull"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Circle.can_push", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Circle.push", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.move_object", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.pull"], ["", "def", "push_or_pull_object", "(", "self", ",", "direction", ":", "Direction", ",", "primitive_command", ":", "str", ")", ":", "\n", "        ", "current_object", "=", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "agent_pos", ")", "\n", "if", "not", "current_object", ":", "\n", "            ", "self", ".", "_observed_commands", ".", "append", "(", "primitive_command", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "current_object", ".", "can_push", "(", ")", ",", "\"Trying to push an object that cannot be pushed\"", "\n", "if", "current_object", ".", "push", "(", ")", ":", "\n", "                ", "new_position", "=", "self", ".", "agent_pos", "+", "DIR_TO_VEC", "[", "DIR_TO_INT", "[", "direction", "]", "]", "\n", "new_position", "=", "Position", "(", "column", "=", "new_position", "[", "0", "]", ",", "row", "=", "new_position", "[", "1", "]", ")", "\n", "# If the new position isn't occupied by another object, push it forward.", "\n", "if", "self", ".", "within_grid", "(", "new_position", ")", ":", "\n", "                    ", "if", "not", "self", ".", "grid", ".", "get", "(", "new_position", "[", "0", "]", ",", "new_position", "[", "1", "]", ")", ":", "\n", "                        ", "self", ".", "move_object", "(", "Position", "(", "column", "=", "self", ".", "agent_pos", "[", "0", "]", ",", "row", "=", "self", ".", "agent_pos", "[", "1", "]", ")", ",", "new_position", ")", "\n", "if", "primitive_command", "==", "\"push\"", ":", "\n", "                            ", "self", ".", "take_step_in_direction", "(", "direction", ",", "primitive_command", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "pull", "(", "position", "=", "new_position", ")", "\n", "\n", "", "", "", "", "else", ":", "\n", "# Pushing an object that won't move just yet (because it's heavy).", "\n", "                ", "self", ".", "_observed_commands", ".", "append", "(", "primitive_command", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.move_object_to_wall": [[721, 734], ["world.World.empty_cell_in_direction", "world.World.push_or_pull_object", "world.World.spin", "world.World.hesitate", "world.World.look_left_and_right"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.empty_cell_in_direction", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.push_or_pull_object", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.spin", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.hesitate", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.look_left_and_right"], ["", "", "", "def", "move_object_to_wall", "(", "self", ",", "action", ":", "str", ",", "manner", ":", "str", ")", ":", "\n", "        ", "if", "action", "==", "\"push\"", ":", "\n", "            ", "direction", "=", "INT_TO_DIR", "[", "self", ".", "agent_dir", "]", "\n", "", "else", ":", "\n", "            ", "direction", "=", "INT_TO_DIR", "[", "(", "self", ".", "agent_dir", "+", "2", ")", "%", "4", "]", "\n", "", "while", "self", ".", "empty_cell_in_direction", "(", "direction", "=", "direction", ")", ":", "\n", "            ", "if", "manner", "==", "\"while spinning\"", ":", "\n", "                ", "self", ".", "spin", "(", ")", "\n", "", "elif", "manner", "==", "\"cautiously\"", ":", "\n", "                ", "self", ".", "look_left_and_right", "(", ")", "\n", "", "self", ".", "push_or_pull_object", "(", "direction", "=", "direction", ",", "primitive_command", "=", "action", ")", "\n", "if", "manner", "==", "\"hesitantly\"", ":", "\n", "                ", "self", ".", "hesitate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_direction": [[735, 738], ["None"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "get_direction", "(", "direction_str", ":", "str", ")", ":", "\n", "        ", "return", "DIR_STR_TO_DIR", "[", "direction_str", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_position_at": [[739, 748], ["Position", "len", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_position_at", "(", "current_position", ":", "Position", ",", "direction_str", ":", "str", ",", "distance", ":", "int", ")", "->", "Position", ":", "\n", "        ", "\"\"\"Returns the column and row of a position on the grid some distance away in a particular direction.\"\"\"", "\n", "assert", "len", "(", "DIR_STR_TO_DIR", "[", "direction_str", "]", ")", "==", "1", ",", "\"getting a position at a distance only implemented for \"", "\"straight directions\"", "\n", "direction", "=", "DIR_STR_TO_DIR", "[", "direction_str", "]", "\n", "direction_vec", "=", "DIR_TO_VEC", "[", "DIR_TO_INT", "[", "direction", "]", "]", "*", "distance", "\n", "position", "=", "np", ".", "array", "(", "[", "current_position", ".", "column", ",", "current_position", ".", "row", "]", ")", "+", "direction_vec", "\n", "return", "Position", "(", "column", "=", "position", "[", "0", "]", ",", "row", "=", "position", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.direction_to_goal": [[749, 762], ["numpy.array"], "methods", ["None"], ["", "def", "direction_to_goal", "(", "self", ",", "goal", ":", "Position", ")", ":", "\n", "        ", "difference_vec", "=", "np", ".", "array", "(", "[", "goal", ".", "column", "-", "self", ".", "agent_pos", "[", "0", "]", ",", "goal", ".", "row", "-", "self", ".", "agent_pos", "[", "1", "]", "]", ")", "\n", "difference_vec", "[", "difference_vec", "<", "0", "]", "=", "0", "\n", "col_difference", "=", "difference_vec", "[", "0", "]", "\n", "row_difference", "=", "difference_vec", "[", "1", "]", "\n", "if", "col_difference", "and", "row_difference", ":", "\n", "            ", "return", "\"SE\"", ",", "self", ".", "actions", ".", "left", "\n", "", "elif", "col_difference", "and", "not", "row_difference", ":", "\n", "            ", "return", "\"NE\"", ",", "self", ".", "actions", ".", "right", "\n", "", "elif", "row_difference", "and", "not", "col_difference", ":", "\n", "            ", "return", "\"SW\"", ",", "self", ".", "actions", ".", "right", "\n", "", "else", ":", "\n", "            ", "return", "\"NW\"", ",", "self", ".", "actions", ".", "left", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.execute_command": [[763, 784], ["command_str.split", "len", "world.World.take_step", "world.World.take_step_in_direction", "world.World.take_step", "ValueError", "world.World.push_or_pull_object", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.push_or_pull_object"], ["", "", "def", "execute_command", "(", "self", ",", "command_str", ":", "str", ")", ":", "\n", "        ", "command_list", "=", "command_str", ".", "split", "(", ")", "\n", "verb", "=", "command_list", "[", "0", "]", "\n", "if", "len", "(", "command_list", ")", ">", "1", "and", "verb", "==", "\"turn\"", ":", "\n", "            ", "direction", "=", "command_list", "[", "1", "]", "\n", "if", "direction", "==", "\"left\"", ":", "\n", "                ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "", "elif", "direction", "==", "\"right\"", ":", "\n", "                ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "right", ",", "\"turn right\"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Trying to turn in an unknown direction\"", ")", "\n", "", "", "elif", "verb", "==", "\"walk\"", "or", "verb", "==", "\"run\"", "or", "verb", "==", "\"jump\"", ":", "\n", "            ", "self", ".", "take_step_in_direction", "(", "direction", "=", "DIR_STR_TO_DIR", "[", "INT_TO_DIR", "[", "self", ".", "agent_dir", "]", ".", "name", "[", "0", "]", "]", ",", "\n", "primitive_command", "=", "verb", ")", "\n", "", "elif", "verb", "==", "\"push\"", "or", "verb", "==", "\"pull\"", ":", "\n", "            ", "self", ".", "push_or_pull_object", "(", "direction", "=", "DIR_STR_TO_DIR", "[", "INT_TO_DIR", "[", "self", ".", "agent_dir", "]", ".", "name", "[", "0", "]", "]", ",", "\n", "primitive_command", "=", "verb", ")", "\n", "", "elif", "verb", "==", "\"stay\"", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Incorrect command {}.\"", ".", "format", "(", "command_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.empty_cell_in_direction": [[785, 792], ["world.World.within_grid", "Position", "world.World.grid.get"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get"], ["", "", "def", "empty_cell_in_direction", "(", "self", ",", "direction", ":", "Direction", ")", ":", "\n", "        ", "next_cell", "=", "self", ".", "agent_pos", "+", "DIR_TO_VEC", "[", "DIR_TO_INT", "[", "direction", "]", "]", "\n", "if", "self", ".", "within_grid", "(", "Position", "(", "column", "=", "next_cell", "[", "0", "]", ",", "row", "=", "next_cell", "[", "1", "]", ")", ")", ":", "\n", "            ", "next_cell_object", "=", "self", ".", "grid", ".", "get", "(", "*", "next_cell", ")", "\n", "return", "not", "next_cell_object", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.look_left_and_right": [[793, 798], ["world.World.take_step", "world.World.take_step", "world.World.take_step", "world.World.take_step"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step"], ["", "", "def", "look_left_and_right", "(", "self", ")", ":", "\n", "        ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "self", ".", "take_step", "(", "self", ".", "actions", ".", "right", ",", "\"turn right\"", ")", "\n", "self", ".", "take_step", "(", "self", ".", "actions", ".", "right", ",", "\"turn right\"", ")", "\n", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.hesitate": [[799, 802], ["world.World._observed_commands.append", "world.World._observed_situations.append", "world.World.get_current_situation"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation"], ["", "def", "hesitate", "(", "self", ")", ":", "\n", "        ", "self", ".", "_observed_commands", ".", "append", "(", "\"stay\"", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.spin": [[803, 806], ["range", "world.World.take_step"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step"], ["", "def", "spin", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.move_with_manners": [[807, 823], ["world.World.spin", "world.World.take_step_in_direction", "world.World.hesitate", "world.World.turn_to_direction", "world.World.look_left_and_right", "world.World.take_step_in_direction", "world.World.take_step_in_direction"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.spin", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.hesitate", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.turn_to_direction", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.look_left_and_right", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step_in_direction"], ["", "", "def", "move_with_manners", "(", "self", ",", "direction", ":", "Direction", ",", "manner", ":", "str", ",", "primitive_command", ":", "str", ")", ":", "\n", "# Spin to the left", "\n", "        ", "if", "manner", "==", "\"while spinning\"", ":", "\n", "            ", "self", ".", "spin", "(", ")", "\n", "self", ".", "take_step_in_direction", "(", "direction", "=", "direction", ",", "primitive_command", "=", "primitive_command", ")", "\n", "# Look left and right if cautious", "\n", "", "elif", "manner", "==", "\"cautiously\"", ":", "\n", "            ", "self", ".", "turn_to_direction", "(", "direction", "=", "direction", ")", "\n", "self", ".", "look_left_and_right", "(", ")", "\n", "self", ".", "take_step_in_direction", "(", "direction", "=", "direction", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "take_step_in_direction", "(", "direction", "=", "direction", ",", "primitive_command", "=", "primitive_command", ")", "\n", "\n", "# Stop after each step", "\n", "", "if", "manner", "==", "\"hesitantly\"", ":", "\n", "            ", "self", ".", "hesitate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.go_to_position": [[824, 866], ["world.World.direction_to_goal", "world.World.agent_in_line_with_goal", "world.World.take_step_in_direction", "world.World.take_step_in_direction", "world.World.agent_in_line_with_goal", "world.World.take_step", "world.World.take_step_in_direction", "world.World.take_step_in_direction", "world.World.take_step_in_direction", "world.World.take_step_in_direction", "world.World.move_with_manners", "world.World.move_with_manners", "world.World.move_with_manners", "world.World.move_with_manners", "world.World.take_step", "world.World.take_step"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.direction_to_goal", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.agent_in_line_with_goal", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.agent_in_line_with_goal", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step_in_direction", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.move_with_manners", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.move_with_manners", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.move_with_manners", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.move_with_manners", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step"], ["", "", "def", "go_to_position", "(", "self", ",", "position", ":", "Position", ",", "manner", ":", "str", ",", "primitive_command", ":", "str", ")", ":", "\n", "        ", "\"\"\"Move to the position denoted in the argument. Adds an action for each step to self._observed_commands\n        and self._observed_situations. If a manner is specified, the sequence of actions will be transformed to\n        represent the specified manner.\"\"\"", "\n", "# Zigzag somewhere until in line with the goal, then just go straight for the goal", "\n", "if", "manner", "==", "\"while zigzagging\"", "and", "not", "self", ".", "agent_in_line_with_goal", "(", "position", ")", ":", "\n", "# Find direction of goal.", "\n", "            ", "direction_to_goal", ",", "first_move", "=", "self", ".", "direction_to_goal", "(", "position", ")", "\n", "previous_step", "=", "first_move", "\n", "if", "direction_to_goal", "==", "\"NE\"", "or", "direction_to_goal", "==", "\"SE\"", ":", "\n", "                ", "self", ".", "take_step_in_direction", "(", "direction", "=", "EAST", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "take_step_in_direction", "(", "direction", "=", "WEST", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "while", "not", "self", ".", "agent_in_line_with_goal", "(", "position", ")", ":", "\n", "# turn in opposite direction of previous step and take take step", "\n", "                ", "if", "previous_step", "==", "self", ".", "actions", ".", "left", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "right", ",", "\"turn right\"", ")", "\n", "previous_step", "=", "self", ".", "actions", ".", "right", "\n", "", "else", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "previous_step", "=", "self", ".", "actions", ".", "left", "\n", "", "self", ".", "take_step", "(", "self", ".", "actions", ".", "forward", ",", "primitive_command", ")", "\n", "\n", "# Finish the route not zigzagging", "\n", "", "while", "self", ".", "agent_pos", "[", "0", "]", ">", "position", ".", "column", ":", "\n", "                ", "self", ".", "take_step_in_direction", "(", "direction", "=", "WEST", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "while", "self", ".", "agent_pos", "[", "0", "]", "<", "position", ".", "column", ":", "\n", "                ", "self", ".", "take_step_in_direction", "(", "direction", "=", "EAST", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "while", "self", ".", "agent_pos", "[", "1", "]", ">", "position", ".", "row", ":", "\n", "                ", "self", ".", "take_step_in_direction", "(", "direction", "=", "NORTH", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "while", "self", ".", "agent_pos", "[", "1", "]", "<", "position", ".", "row", ":", "\n", "                ", "self", ".", "take_step_in_direction", "(", "direction", "=", "SOUTH", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "", "else", ":", "\n", "# Calculate the route to the object on the grid.", "\n", "            ", "while", "self", ".", "agent_pos", "[", "0", "]", ">", "position", ".", "column", ":", "\n", "                ", "self", ".", "move_with_manners", "(", "direction", "=", "WEST", ",", "manner", "=", "manner", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "while", "self", ".", "agent_pos", "[", "0", "]", "<", "position", ".", "column", ":", "\n", "                ", "self", ".", "move_with_manners", "(", "direction", "=", "EAST", ",", "manner", "=", "manner", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "while", "self", ".", "agent_pos", "[", "1", "]", ">", "position", ".", "row", ":", "\n", "                ", "self", ".", "move_with_manners", "(", "direction", "=", "NORTH", ",", "manner", "=", "manner", ",", "primitive_command", "=", "primitive_command", ")", "\n", "", "while", "self", ".", "agent_pos", "[", "1", "]", "<", "position", ".", "row", ":", "\n", "                ", "self", ".", "move_with_manners", "(", "direction", "=", "SOUTH", ",", "manner", "=", "manner", ",", "primitive_command", "=", "primitive_command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.has_object": [[867, 872], ["world.World._object_lookup_table.keys"], "methods", ["None"], ["", "", "", "def", "has_object", "(", "self", ",", "object_str", ":", "str", ")", "->", "bool", ":", "\n", "        ", "if", "object_str", "not", "in", "self", ".", "_object_lookup_table", ".", "keys", "(", ")", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.object_positions": [[873, 891], ["world.World.has_object", "present_object_sizes.sort", "object_locations.items.items.items", "len", "object_locations.items.items.items", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.has_object"], ["", "", "def", "object_positions", "(", "self", ",", "object_str", ":", "str", ",", "object_size", "=", "None", ")", "->", "List", "[", "Position", "]", ":", "\n", "        ", "assert", "self", ".", "has_object", "(", "object_str", ")", ",", "\"Trying to get an object's position that is not placed in the world.\"", "\n", "object_locations", "=", "self", ".", "_object_lookup_table", "[", "object_str", "]", "\n", "if", "object_size", ":", "\n", "            ", "present_object_sizes", "=", "[", "size", "for", "size", ",", "objects", "in", "object_locations", ".", "items", "(", ")", "if", "objects", "]", "\n", "present_object_sizes", ".", "sort", "(", ")", "\n", "assert", "len", "(", "present_object_sizes", ")", ">=", "2", ",", "\"referring to a {} object but only one of its size present.\"", ".", "format", "(", "\n", "object_size", ")", "\n", "# Perhaps just keep track of smallest and largest object in world", "\n", "if", "object_size", "==", "\"small\"", ":", "\n", "                ", "object_locations", "=", "object_locations", "[", "present_object_sizes", "[", "0", "]", "]", "\n", "", "elif", "object_size", "==", "\"big\"", ":", "\n", "                ", "object_locations", "=", "object_locations", "[", "present_object_sizes", "[", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Wrong size in term specifications.\"", ")", "\n", "", "", "else", ":", "\n", "            ", "object_locations", "=", "object_locations", ".", "items", "(", ")", "\n", "", "return", "object_locations", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.agent_in_line_with_goal": [[892, 894], ["None"], "methods", ["None"], ["", "def", "agent_in_line_with_goal", "(", "self", ",", "goal", ":", "Position", ")", ":", "\n", "        ", "return", "goal", ".", "column", "==", "self", ".", "agent_pos", "[", "0", "]", "or", "goal", ".", "row", "==", "self", ".", "agent_pos", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step": [[895, 899], ["world.World.step", "world.World._observed_situations.append", "world.World._observed_commands.append", "world.World.get_current_situation"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation"], ["", "def", "take_step", "(", "self", ",", "action", ",", "observed_command", ":", "str", ")", ":", "\n", "        ", "self", ".", "step", "(", "action", "=", "action", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "self", ".", "_observed_commands", ".", "append", "(", "observed_command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.turn_to_direction": [[900, 928], ["numpy.linalg.norm", "world.World.take_step", "world.World.take_step", "world.World.take_step", "world.World.take_step", "world.World.take_step", "world.World.take_step", "world.World.take_step", "world.World.take_step"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step"], ["", "def", "turn_to_direction", "(", "self", ",", "direction", ":", "Direction", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"Turn to some direction.\"\"\"", "\n", "current_direction", "=", "self", ".", "agent_dir", "\n", "target_direction", "=", "DIR_TO_INT", "[", "direction", "]", "\n", "if", "current_direction", "==", "target_direction", ":", "\n", "            ", "return", "\n", "", "assert", "current_direction", "!=", "target_direction", ",", "\"Trying to turn to a direction that is the current direction.\"", "\n", "difference_vector", "=", "DIR_TO_VEC", "[", "target_direction", "]", "-", "DIR_TO_VEC", "[", "self", ".", "agent_dir", "]", "\n", "difference_norm", "=", "np", ".", "linalg", ".", "norm", "(", "difference_vector", ",", "ord", "=", "2", ")", "\n", "if", "difference_norm", ">=", "2", ":", "\n", "            ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "", "else", ":", "\n", "            ", "if", "current_direction", "==", "0", ":", "# East", "\n", "                ", "if", "target_direction", "==", "1", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "right", ",", "\"turn right\"", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "", "", "elif", "current_direction", "==", "3", ":", "# North", "\n", "                ", "if", "target_direction", "==", "0", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "right", ",", "\"turn right\"", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "", "", "else", ":", "# South and West", "\n", "                ", "if", "target_direction", ">", "current_direction", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "right", ",", "\"turn right\"", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "take_step", "(", "self", ".", "actions", ".", "left", ",", "\"turn left\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.take_step_in_direction": [[929, 939], ["world.World.within_grid", "world.World.turn_to_direction", "Position", "world.World.step", "world.World._observed_commands.append", "world.World._observed_situations.append", "world.World.get_current_situation"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.turn_to_direction", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.step", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation"], ["", "", "", "", "def", "take_step_in_direction", "(", "self", ",", "direction", ":", "Direction", ",", "primitive_command", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Turn to some direction and take a step forward.\n        \"\"\"", "\n", "if", "DIR_TO_INT", "[", "direction", "]", "!=", "self", ".", "agent_dir", ":", "\n", "            ", "self", ".", "turn_to_direction", "(", "direction", ")", "\n", "", "if", "self", ".", "within_grid", "(", "Position", "(", "column", "=", "self", ".", "front_pos", "[", "0", "]", ",", "row", "=", "self", ".", "front_pos", "[", "1", "]", ")", ")", ":", "\n", "            ", "self", ".", "step", "(", "action", "=", "self", ".", "actions", ".", "forward", ")", "\n", "self", ".", "_observed_commands", ".", "append", "(", "primitive_command", ")", "\n", "self", ".", "_observed_situations", ".", "append", "(", "self", ".", "get_current_situation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.save_situation": [[940, 949], ["os.path.join", "os.path.join.endswith", "world.World.render().save", "print", "world.World.render"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.render"], ["", "", "def", "save_situation", "(", "self", ",", "file_name", ",", "attention_weights", "=", "[", "]", ")", "->", "str", ":", "\n", "        ", "save_location", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "file_name", ")", "\n", "assert", "save_location", ".", "endswith", "(", "'.png'", ")", ",", "\"Invalid file name passed to save_situation, must end with .png.\"", "\n", "success", "=", "self", ".", "render", "(", "mode", "=", "\"human\"", ",", "attention_weights", "=", "attention_weights", ")", ".", "save", "(", "save_location", ")", "\n", "if", "not", "success", ":", "\n", "            ", "print", "(", "\"WARNING: image with name {} failed to save.\"", ".", "format", "(", "file_name", ")", ")", "\n", "return", "''", "\n", "", "else", ":", "\n", "            ", "return", "save_location", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation_image": [[950, 952], ["world.World.render().getArray", "world.World.render"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.getArray", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.render"], ["", "", "def", "get_current_situation_image", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "self", ".", "render", "(", ")", ".", "getArray", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation_grid_repr": [[953, 956], ["world.World.grid.encode"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.encode"], ["", "def", "get_current_situation_grid_repr", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "self", ".", "grid", ".", "encode", "(", "agent_row", "=", "self", ".", "agent_pos", "[", "1", "]", ",", "agent_column", "=", "self", ".", "agent_pos", "[", "0", "]", ",", "\n", "agent_direction", "=", "self", ".", "agent_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.save_current_situation_image": [[957, 961], ["os.path.join", "world.World.get_current_situation_image", "GroundedScan.helpers.numpy_array_to_image"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation_image", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.numpy_array_to_image"], ["", "def", "save_current_situation_image", "(", "self", ",", "image_name", ":", "str", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "image_name", ")", "\n", "current_situation_array", "=", "self", ".", "get_current_situation_image", "(", ")", "\n", "numpy_array_to_image", "(", "current_situation_array", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation": [[962, 972], ["world.Situation", "Position", "world.World._placed_object_list.copy"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_current_situation", "(", "self", ")", "->", "Situation", ":", "\n", "        ", "if", "self", ".", "carrying", ":", "\n", "            ", "carrying", "=", "self", ".", "carrying", ".", "object_representation", "\n", "", "else", ":", "\n", "            ", "carrying", "=", "None", "\n", "", "return", "Situation", "(", "grid_size", "=", "self", ".", "grid_size", ",", "\n", "agent_position", "=", "Position", "(", "column", "=", "self", ".", "agent_pos", "[", "0", "]", ",", "row", "=", "self", ".", "agent_pos", "[", "1", "]", ")", ",", "\n", "target_object", "=", "self", ".", "_target_object", ",", "\n", "agent_direction", "=", "INT_TO_DIR", "[", "self", ".", "agent_dir", "]", ",", "placed_objects", "=", "self", ".", "_placed_object_list", ".", "copy", "(", ")", ",", "\n", "carrying", "=", "carrying", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_observations": [[973, 975], ["world.World._observed_commands.copy", "world.World._observed_situations.copy"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_current_observations", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_observed_commands", ".", "copy", "(", ")", ",", "self", ".", "_observed_situations", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.clear_situation": [[976, 983], ["world.World._object_lookup_table.clear", "world.World._placed_object_list.clear", "world.World._observed_commands.clear", "world.World._observed_situations.clear", "world.World._occupied_positions.clear", "world.World.reset"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "clear_situation", "(", "self", ")", ":", "\n", "        ", "self", ".", "_object_lookup_table", ".", "clear", "(", ")", "\n", "self", ".", "_placed_object_list", ".", "clear", "(", ")", "\n", "self", ".", "_observed_commands", ".", "clear", "(", ")", "\n", "self", ".", "_observed_situations", ".", "clear", "(", ")", "\n", "self", ".", "_occupied_positions", ".", "clear", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.set_mission": [[984, 986], ["None"], "methods", ["None"], ["", "def", "set_mission", "(", "self", ",", "mission", ":", "str", ")", ":", "\n", "        ", "self", ".", "mission", "=", "mission", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.object_to_repr": [[189, 194], ["str"], "function", ["None"], ["", "", "def", "object_to_repr", "(", "object", ":", "Object", ")", "->", "dict", ":", "\n", "    ", "return", "{", "\n", "\"shape\"", ":", "object", ".", "shape", ",", "\n", "\"color\"", ":", "object", ".", "color", ",", "\n", "\"size\"", ":", "str", "(", "object", ".", "size", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.position_to_repr": [[197, 201], ["str", "str"], "function", ["None"], ["", "def", "position_to_repr", "(", "position", ":", "Position", ")", "->", "dict", ":", "\n", "    ", "return", "{", "\n", "\"row\"", ":", "str", "(", "position", ".", "row", ")", ",", "\n", "\"column\"", ":", "str", "(", "position", ".", "column", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.positioned_object_to_repr": [[204, 209], ["world.position_to_repr", "world.object_to_repr", "str"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.position_to_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.object_to_repr"], ["", "def", "positioned_object_to_repr", "(", "positioned_object", ":", "PositionedObject", ")", "->", "dict", ":", "\n", "    ", "return", "{", "\n", "\"vector\"", ":", "''", ".", "join", "(", "[", "str", "(", "idx", ")", "for", "idx", "in", "positioned_object", ".", "vector", "]", ")", ",", "\n", "\"position\"", ":", "position_to_repr", "(", "positioned_object", ".", "position", ")", ",", "\n", "\"object\"", ":", "object_to_repr", "(", "positioned_object", ".", "object", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.parse_object_repr": [[212, 214], ["Object", "int"], "function", ["None"], ["", "def", "parse_object_repr", "(", "object_repr", ":", "dict", ")", "->", "Object", ":", "\n", "    ", "return", "Object", "(", "shape", "=", "object_repr", "[", "\"shape\"", "]", ",", "color", "=", "object_repr", "[", "\"color\"", "]", ",", "size", "=", "int", "(", "object_repr", "[", "\"size\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.parse_position_repr": [[216, 218], ["Position", "int", "int"], "function", ["None"], ["", "def", "parse_position_repr", "(", "position_repr", ":", "dict", ")", "->", "Position", ":", "\n", "    ", "return", "Position", "(", "column", "=", "int", "(", "position_repr", "[", "\"column\"", "]", ")", ",", "row", "=", "int", "(", "position_repr", "[", "\"row\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.parse_object_vector_repr": [[220, 222], ["numpy.array", "int"], "function", ["None"], ["", "def", "parse_object_vector_repr", "(", "object_vector_repr", ":", "str", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "int", "(", "idx", ")", "for", "idx", "in", "object_vector_repr", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.parse_positioned_object_repr": [[224, 228], ["PositionedObject", "world.parse_object_repr", "world.parse_position_repr", "world.parse_object_vector_repr"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.parse_object_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_position_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.parse_object_vector_repr"], ["", "def", "parse_positioned_object_repr", "(", "positioned_object_repr", ":", "dict", ")", ":", "\n", "    ", "return", "PositionedObject", "(", "object", "=", "parse_object_repr", "(", "positioned_object_repr", "[", "\"object\"", "]", ")", ",", "\n", "position", "=", "parse_position_repr", "(", "positioned_object_repr", "[", "\"position\"", "]", ")", ",", "\n", "vector", "=", "parse_object_vector_repr", "(", "positioned_object_repr", "[", "\"vector\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.__init__": [[17, 43], ["set", "vocabulary.Vocabulary._translation_table.update", "vocabulary.Vocabulary._translation_table.update", "vocabulary.Vocabulary._translation_table.update", "vocabulary.Vocabulary._translation_table.update", "vocabulary.Vocabulary._translation_table.update", "vocabulary.Vocabulary._translation_table.update", "list", "len", "len", "list", "size_adjectives.keys", "len", "len", "list", "list", "len", "list", "list", "vocabulary.Vocabulary._translation_table.items", "list", "color_adjectives.keys", "vocabulary.Vocabulary._color_adjectives.values", "vocabulary.Vocabulary._size_adjectives.values", "vocabulary.Vocabulary._color_adjectives.values", "vocabulary.Vocabulary._size_adjectives.values", "list", "nouns.keys", "list", "list", "adverbs.keys", "intransitive_verbs.keys", "transitive_verbs.keys"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set"], ["def", "__init__", "(", "self", ",", "intransitive_verbs", ":", "Dict", "[", "str", ",", "str", "]", ",", "transitive_verbs", ":", "Dict", "[", "str", ",", "str", "]", ",", "adverbs", ":", "Dict", "[", "str", ",", "str", "]", ",", "\n", "nouns", ":", "Dict", "[", "str", ",", "str", "]", ",", "color_adjectives", ":", "Dict", "[", "str", ",", "str", "]", ",", "size_adjectives", ":", "Dict", "[", "str", ",", "str", "]", ")", ":", "\n", "        ", "all_words", "=", "list", "(", "intransitive_verbs", ".", "keys", "(", ")", ")", "+", "list", "(", "transitive_verbs", ".", "keys", "(", ")", ")", "+", "list", "(", "adverbs", ".", "keys", "(", ")", ")", "+", "list", "(", "nouns", ".", "keys", "(", ")", ")", "+", "list", "(", "color_adjectives", ".", "keys", "(", ")", ")", "+", "list", "(", "size_adjectives", ".", "keys", "(", ")", ")", "\n", "all_unique_words", "=", "set", "(", "all_words", ")", "\n", "self", ".", "_intransitive_verbs", "=", "intransitive_verbs", "\n", "self", ".", "_transitive_verbs", "=", "transitive_verbs", "\n", "self", ".", "_adverbs", "=", "adverbs", "\n", "self", ".", "_nouns", "=", "nouns", "\n", "self", ".", "_color_adjectives", "=", "color_adjectives", "\n", "self", ".", "_size_adjectives", "=", "size_adjectives", "\n", "assert", "len", "(", "all_words", ")", "==", "len", "(", "all_unique_words", ")", ",", "\"Overlapping vocabulary (the same string used twice).\"", "\n", "if", "len", "(", "color_adjectives", ")", ">", "0", "and", "len", "(", "size_adjectives", ")", ">", "0", ":", "\n", "            ", "self", ".", "_adjectives", "=", "list", "(", "self", ".", "_color_adjectives", ".", "values", "(", ")", ")", "+", "list", "(", "self", ".", "_size_adjectives", ".", "values", "(", ")", ")", "\n", "", "elif", "len", "(", "color_adjectives", ")", ">", "0", ":", "\n", "            ", "self", ".", "_adjectives", "=", "list", "(", "self", ".", "_color_adjectives", ".", "values", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_adjectives", "=", "list", "(", "self", ".", "_size_adjectives", ".", "values", "(", ")", ")", "\n", "", "self", ".", "_translation_table", "=", "{", "'to'", ":", "'to'", ",", "'a'", ":", "'a'", ",", "'and'", ":", "'and'", "}", "\n", "self", ".", "_translation_table", ".", "update", "(", "self", ".", "_intransitive_verbs", ")", "\n", "self", ".", "_translation_table", ".", "update", "(", "self", ".", "_transitive_verbs", ")", "\n", "self", ".", "_translation_table", ".", "update", "(", "self", ".", "_nouns", ")", "\n", "self", ".", "_translation_table", ".", "update", "(", "self", ".", "_color_adjectives", ")", "\n", "self", ".", "_translation_table", ".", "update", "(", "self", ".", "_size_adjectives", ")", "\n", "self", ".", "_translation_table", ".", "update", "(", "self", ".", "_adverbs", ")", "\n", "self", ".", "_translate_to", "=", "{", "semantic_word", ":", "word", "for", "word", ",", "semantic_word", "in", "self", ".", "_translation_table", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_intransitive_verbs": [[44, 46], ["list().copy", "list", "vocabulary.Vocabulary._intransitive_verbs.keys"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_intransitive_verbs", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_intransitive_verbs", ".", "keys", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_transitive_verbs": [[47, 49], ["list().copy", "list", "vocabulary.Vocabulary._transitive_verbs.keys"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_transitive_verbs", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_transitive_verbs", ".", "keys", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_adverbs": [[50, 52], ["list().copy", "list", "vocabulary.Vocabulary._adverbs.keys"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_adverbs", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_adverbs", ".", "keys", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_nouns": [[53, 55], ["list().copy", "list", "vocabulary.Vocabulary._nouns.keys"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_nouns", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_nouns", ".", "keys", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_color_adjectives": [[56, 58], ["list().copy", "list", "vocabulary.Vocabulary._color_adjectives.keys"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_color_adjectives", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_color_adjectives", ".", "keys", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_size_adjectives": [[59, 61], ["list().copy", "list", "vocabulary.Vocabulary._size_adjectives.keys"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_size_adjectives", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_size_adjectives", ".", "keys", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_semantic_shapes": [[62, 64], ["list().copy", "list", "vocabulary.Vocabulary._nouns.values"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_semantic_shapes", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_nouns", ".", "values", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_semantic_colors": [[65, 67], ["list().copy", "list", "vocabulary.Vocabulary._color_adjectives.values"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["", "def", "get_semantic_colors", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_color_adjectives", ".", "values", "(", ")", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word": [[68, 73], ["None"], "methods", ["None"], ["", "def", "translate_word", "(", "self", ",", "word", ":", "str", ")", "->", "str", ":", "\n", "        ", "if", "word", "in", "self", ".", "_translation_table", ":", "\n", "            ", "return", "self", ".", "_translation_table", "[", "word", "]", "\n", "", "else", ":", "\n", "            ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning": [[74, 79], ["None"], "methods", ["None"], ["", "", "def", "translate_meaning", "(", "self", ",", "meaning", ":", "str", ")", "->", "str", ":", "\n", "        ", "if", "meaning", "in", "self", ".", "_translate_to", ":", "\n", "            ", "return", "self", ".", "_translate_to", "[", "meaning", "]", "\n", "", "else", ":", "\n", "            ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.n_attributes": [[80, 83], ["len", "len"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "n_attributes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_nouns", ")", "*", "len", "(", "self", ".", "_color_adjectives", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings": [[84, 97], ["len", "len", "available_semantic_meanings.remove", "available_semantic_meanings.pop"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop"], ["", "@", "staticmethod", "\n", "def", "bind_words_to_meanings", "(", "available_words", ":", "List", "[", "str", "]", ",", "available_semantic_meanings", ":", "Set", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "str", "]", ":", "\n", "        ", "assert", "len", "(", "available_words", ")", "<=", "len", "(", "available_semantic_meanings", ")", ",", "\"Too many words specified for available\"", "\"semantic meanings: {}\"", ".", "format", "(", "\n", "available_semantic_meanings", ")", "\n", "translation_table", "=", "{", "}", "\n", "for", "word", "in", "available_words", ":", "\n", "            ", "if", "word", "in", "available_semantic_meanings", ":", "\n", "                ", "translation_table", "[", "word", "]", "=", "word", "\n", "available_semantic_meanings", ".", "remove", "(", "word", ")", "\n", "", "else", ":", "\n", "                ", "translation_table", "[", "word", "]", "=", "available_semantic_meanings", ".", "pop", "(", ")", "\n", "", "", "return", "translation_table", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.initialize": [[98, 108], ["cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls", "cls.INTRANSITIVE_VERBS.copy", "cls.TRANSITIVE_VERBS.copy", "cls.NOUNS.copy", "cls.COLOR_ADJECTIVES.copy", "cls.SIZE_ADJECTIVES.copy", "cls.ADVERBS.copy"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["", "@", "classmethod", "\n", "def", "initialize", "(", "cls", ",", "intransitive_verbs", ":", "List", "[", "str", "]", ",", "transitive_verbs", ":", "List", "[", "str", "]", ",", "adverbs", ":", "List", "[", "str", "]", ",", "\n", "nouns", ":", "List", "[", "str", "]", ",", "color_adjectives", ":", "List", "[", "str", "]", ",", "size_adjectives", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "intransitive_verbs", "=", "cls", ".", "bind_words_to_meanings", "(", "intransitive_verbs", ",", "cls", ".", "INTRANSITIVE_VERBS", ".", "copy", "(", ")", ")", "\n", "transitive_verbs", "=", "cls", ".", "bind_words_to_meanings", "(", "transitive_verbs", ",", "cls", ".", "TRANSITIVE_VERBS", ".", "copy", "(", ")", ")", "\n", "nouns", "=", "cls", ".", "bind_words_to_meanings", "(", "nouns", ",", "cls", ".", "NOUNS", ".", "copy", "(", ")", ")", "\n", "color_adjectives", "=", "cls", ".", "bind_words_to_meanings", "(", "color_adjectives", ",", "cls", ".", "COLOR_ADJECTIVES", ".", "copy", "(", ")", ")", "\n", "size_adjectives", "=", "cls", ".", "bind_words_to_meanings", "(", "size_adjectives", ",", "cls", ".", "SIZE_ADJECTIVES", ".", "copy", "(", ")", ")", "\n", "adverbs", "=", "cls", ".", "bind_words_to_meanings", "(", "adverbs", ",", "cls", ".", "ADVERBS", ".", "copy", "(", ")", ")", "\n", "return", "cls", "(", "intransitive_verbs", ",", "transitive_verbs", ",", "adverbs", ",", "nouns", ",", "color_adjectives", ",", "size_adjectives", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.sample": [[109, 129], ["cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls.bind_words_to_meanings", "cls", "pronounceable.generate_word", "pronounceable.generate_word", "pronounceable.generate_word", "pronounceable.generate_word", "pronounceable.generate_word", "pronounceable.generate_word", "cls.INTRANSITIVE_VERBS.copy", "cls.TRANSITIVE_VERBS.copy", "cls.NOUNS.copy", "cls.COLOR_ADJECTIVES.copy", "cls.SIZE_ADJECTIVES.copy", "cls.ADVERBS.copy", "range", "range", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.bind_words_to_meanings", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy"], ["", "@", "classmethod", "\n", "def", "sample", "(", "cls", ",", "num_intransitive", "=", "1", ",", "num_transitive", "=", "1", ",", "num_adverbs", "=", "6", ",", "num_nouns", "=", "3", ",", "\n", "num_color_adjectives", "=", "3", ",", "num_size_adjectives", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n        Sample random nonce-words and initialize the vocabulary with these.\n        \"\"\"", "\n", "# Generate random nonce-words", "\n", "intransitive_verbs", "=", "[", "pronounceable", ".", "generate_word", "(", ")", "for", "_", "in", "range", "(", "num_intransitive", ")", "]", "\n", "transitive_verbs", "=", "[", "pronounceable", ".", "generate_word", "(", ")", "for", "_", "in", "range", "(", "num_transitive", ")", "]", "\n", "adverbs", "=", "[", "pronounceable", ".", "generate_word", "(", ")", "for", "_", "in", "range", "(", "num_adverbs", ")", "]", "\n", "nouns", "=", "[", "pronounceable", ".", "generate_word", "(", ")", "for", "_", "in", "range", "(", "num_nouns", ")", "]", "\n", "color_adjectives", "=", "[", "pronounceable", ".", "generate_word", "(", ")", "for", "_", "in", "range", "(", "num_color_adjectives", ")", "]", "\n", "size_adjectives", "=", "[", "pronounceable", ".", "generate_word", "(", ")", "for", "_", "in", "range", "(", "num_size_adjectives", ")", "]", "\n", "intransitive_verbs", "=", "cls", ".", "bind_words_to_meanings", "(", "intransitive_verbs", ",", "cls", ".", "INTRANSITIVE_VERBS", ".", "copy", "(", ")", ")", "\n", "transitive_verbs", "=", "cls", ".", "bind_words_to_meanings", "(", "transitive_verbs", ",", "cls", ".", "TRANSITIVE_VERBS", ".", "copy", "(", ")", ")", "\n", "nouns", "=", "cls", ".", "bind_words_to_meanings", "(", "nouns", ",", "cls", ".", "NOUNS", ".", "copy", "(", ")", ")", "\n", "color_adjectives", "=", "cls", ".", "bind_words_to_meanings", "(", "color_adjectives", ",", "cls", ".", "COLOR_ADJECTIVES", ".", "copy", "(", ")", ")", "\n", "size_adjectives", "=", "cls", ".", "bind_words_to_meanings", "(", "size_adjectives", ",", "cls", ".", "SIZE_ADJECTIVES", ".", "copy", "(", ")", ")", "\n", "adverbs", "=", "cls", ".", "bind_words_to_meanings", "(", "adverbs", ",", "cls", ".", "ADVERBS", ".", "copy", "(", ")", ")", "\n", "return", "cls", "(", "intransitive_verbs", ",", "transitive_verbs", ",", "adverbs", ",", "nouns", ",", "color_adjectives", ",", "size_adjectives", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.to_representation": [[130, 138], ["None"], "methods", ["None"], ["", "def", "to_representation", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"intransitive_verbs\"", ":", "self", ".", "_intransitive_verbs", ",", "\n", "\"transitive_verbs\"", ":", "self", ".", "_transitive_verbs", ",", "\n", "\"nouns\"", ":", "self", ".", "_nouns", ",", "\n", "\"adverbs\"", ":", "self", ".", "_adverbs", ",", "\n", "\"color_adjectives\"", ":", "self", ".", "_color_adjectives", ",", "\n", "\"size_adjectives\"", ":", "self", ".", "_size_adjectives", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.from_representation": [[140, 145], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_representation", "(", "cls", ",", "representation", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", ")", ":", "\n", "        ", "return", "cls", "(", "representation", "[", "\"intransitive_verbs\"", "]", ",", "representation", "[", "\"transitive_verbs\"", "]", ",", "\n", "representation", "[", "\"adverbs\"", "]", ",", "representation", "[", "\"nouns\"", "]", ",", "representation", "[", "\"color_adjectives\"", "]", ",", "\n", "representation", "[", "\"size_adjectives\"", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Rule.__init__": [[46, 51], ["None"], "methods", ["None"], ["            ", "return", "[", "arg_tree", "[", "0", "]", ",", "reorg_arg_tree", "(", "arg_tree", "[", "1", "]", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "arg_tree", "[", "1", "]", ",", "reorg_arg_tree", "(", "arg_tree", "[", "0", "]", ")", "]", "\n", "", "", "return", "arg_tree", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Rule.instantiate": [[52, 54], ["NotImplementedError"], "methods", ["None"], ["", "def", "split_str", "(", "text", ")", ":", "\n", "    ", "\"\"\"Special split to make sure `while verb-ing` are combined together\"\"\"", "\n", "parts", "=", "text", ".", "split", "(", "' '", ")", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.LexicalRule.__init__": [[60, 65], ["grammar.Rule.__init__", "Terminal"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["", "if", "part", "==", "'while'", ":", "\n", "            ", "out", ".", "append", "(", "part", "+", "' '", "+", "parts", "[", "i", "+", "1", "]", ")", "\n", "skip", "=", "True", "\n", "", "else", ":", "\n", "            ", "out", ".", "append", "(", "part", ")", "\n", "", "", "return", "out", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.LexicalRule.instantiate": [[66, 72], ["grammar.free_var", "GroundedScan.world.LogicalForm", "GroundedScan.world.Term"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.free_var"], ["\n", "\n", "", "class", "Grammar", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "cfg_filename", "=", "''", ",", "terminals", "=", "TERMINALS", ")", ":", "\n", "        ", "if", "cfg_filename", "==", "''", ":", "\n", "            ", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "cfg_filename", "=", "dir_path", "+", "'/grammar.cfg'", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.LexicalRule.__repr__": [[74, 78], ["None"], "methods", ["None"], ["self", ".", "parser", "=", "BottomUpLeftCornerChartParser", "(", "self", ".", "grammar", ")", "\n", "self", ".", "terminals", "=", "terminals", "\n", "\n", "", "def", "sample_sentence", "(", "self", ",", "cfactor", "=", "0.5", ")", ":", "\n", "        ", "pcount", "=", "defaultdict", "(", "int", ")", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Root.__init__": [[81, 83], ["grammar.Rule.__init__"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["            ", "rnd", "=", "random", ".", "random", "(", ")", "*", "sum", "(", "weights", ")", "\n", "for", "i", ",", "w", "in", "enumerate", "(", "weights", ")", ":", "\n", "                ", "rnd", "-=", "w", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Root.instantiate": [[84, 86], ["None"], "methods", ["None"], ["if", "rnd", "<", "0", ":", "\n", "                    ", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Root.__repr__": [[87, 89], ["None"], "methods", ["None"], ["", "", "", "def", "generate_sample", "(", "grammar", ",", "prod", ",", "frags", ")", ":", "\n", "            ", "if", "prod", "in", "grammar", ".", "_lhs_index", ":", "# derivation", "\n", "                ", "derivations", "=", "grammar", ".", "_lhs_index", "[", "prod", "]", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.RootConj.__init__": [[92, 94], ["grammar.Rule.__init__", "Terminal"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["                    ", "if", "prod", "in", "pcount", ":", "\n", "                       ", "weights", ".", "append", "(", "cfactor", "**", "(", "pcount", "[", "prod", "]", ")", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.RootConj.instantiate": [[95, 99], ["GroundedScan.world.LogicalForm", "GroundedScan.world.Term"], "methods", ["None"], ["                        ", "weights", ".", "append", "(", "1.0", ")", "\n", "# tend to not sample the already expanded productions", "\n", "", "", "derivation", "=", "derivations", "[", "weighted_choice", "(", "weights", ")", "]", "\n", "pcount", "[", "derivation", "]", "+=", "1", "\n", "for", "d", "in", "derivation", ".", "_rhs", ":", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.RootConj.__repr__": [[101, 103], ["None"], "methods", ["None"], ["", "pcount", "[", "derivation", "]", "-=", "1", "\n", "", "elif", "prod", "in", "grammar", ".", "_rhs_index", ":", "# terminal", "\n", "                ", "prod", "=", "str", "(", "prod", ")", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.VpWrapper.__init__": [[106, 108], ["grammar.Rule.__init__"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["generate_sample", "(", "self", ".", "grammar", ",", "self", ".", "grammar", ".", "start", "(", ")", ",", "frags", ")", "\n", "parse", "=", "self", ".", "parser", ".", "parse", "(", "frags", ")", "\n", "return", "frags", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.VpWrapper.instantiate": [[109, 113], ["rb.bind", "GroundedScan.world.LogicalForm"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.bind"], ["\n", "", "def", "arg_tree", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parser", ".", "parse", "(", "sentence", ")", ":", "\n", "            ", "parse", "=", "p", "\n", "break", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.VpWrapper.__repr__": [[114, 116], ["None"], "methods", ["None"], ["", "arg_tree", "=", "to_arg_tree", "(", "parse", ",", "self", ".", "terminals", ")", "\n", "arg_tree", "=", "reorg_arg_tree", "(", "arg_tree", ")", "\n", "return", "arg_tree", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.VpIntransitive.__init__": [[119, 121], ["grammar.Rule.__init__", "Terminal"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["        ", "url", "=", "'file:%s'", "%", "filename", "\n", "url", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "return", "nltk_data", ".", "load", "(", "url", ")", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.VpIntransitive.instantiate": [[122, 126], ["GroundedScan.world.Term", "meta[].append", "GroundedScan.world.LogicalForm"], "methods", ["None"], ["\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "grammar", "=", "Grammar", "(", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.VpIntransitive.__repr__": [[127, 129], ["None"], "methods", ["None"], ["        ", "sentence", "=", "grammar", ".", "sample_sentence", "(", ")", "\n", "print", "(", "i", ",", "sentence", ",", "grammar", ".", "arg_tree", "(", "sentence", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.VpTransitive.__init__": [[132, 134], ["grammar.Rule.__init__"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.VpTransitive.instantiate": [[135, 139], ["GroundedScan.world.Term", "meta[].append", "GroundedScan.world.LogicalForm"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.VpTransitive.__repr__": [[140, 142], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Dp.__init__": [[145, 147], ["grammar.Rule.__init__", "Terminal"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Dp.instantiate": [[148, 150], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Dp.__repr__": [[151, 153], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.NpWrapper.__init__": [[156, 158], ["grammar.Rule.__init__"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.NpWrapper.instantiate": [[159, 163], ["jj.bind", "GroundedScan.world.LogicalForm"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.bind"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.NpWrapper.__repr__": [[164, 166], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Np.__init__": [[169, 171], ["grammar.Rule.__init__"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Np.instantiate": [[172, 174], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Np.__repr__": [[175, 177], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.__init__": [[185, 190], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_rules": [[191, 206], ["isinstance", "grammar.Derivation", "lexicon.keys", "rules.pop", "lexicon[].pop", "tuple", "cls.from_rules"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_rules"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.to_rules": [[208, 222], ["isinstance", "isinstance", "rules.append", "child.to_rules"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.to_rules"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words": [[223, 232], ["tuple", "isinstance", "out.append", "child.words"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.meaning": [[234, 246], ["hasattr", "grammar.Derivation.rule.instantiate", "child.meaning", "isinstance"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Np.instantiate", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.meaning"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str": [[247, 269], ["rules_str.split", "lexicon_str.split", "cls.from_rules", "rules_list.append", "entry.split", "Terminal", "lexicon[].append"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_rules"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.__repr__": [[270, 286], ["grammar.Derivation.to_rules", "lexicon.items", "isinstance", "str", "lexicon_list.append", "lexicon_list.append"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.to_rules"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Template.__init__": [[294, 299], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Template.add_value": [[300, 307], ["grammar.Template._right_values.append", "grammar.Template._left_values.append"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Template.has_nonterminal": [[308, 310], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Template.get_leftmost_nonterminal": [[311, 314], ["grammar.Template.has_nonterminal"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Template.has_nonterminal"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Template.expand_leftmost_nonterminal": [[315, 326], ["grammar.Template", "grammar.Template.rules.copy", "Template.rules.append", "grammar.Template.add_value", "grammar.Template.add_value"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Template.add_value", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Template.add_value"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Template.to_derivation": [[327, 331], ["grammar.Template.rules.reverse", "grammar.Template.has_nonterminal"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Template.has_nonterminal"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.__init__": [[344, 390], ["set", "grammar.Grammar.categories.items", "grammar.Grammar.empty_command_statistics", "grammar.Grammar.lexical_rules", "grammar.Grammar.rules[].append", "set", "set", "set", "len", "vocabulary.get_intransitive_verbs", "vocabulary.get_transitive_verbs", "vocabulary.get_adverbs", "vocabulary.get_nouns", "vocabulary.get_color_adjectives", "vocabulary.get_size_adjectives", "vocabulary.get_adverbs", "vocabulary.get_intransitive_verbs", "len", "str", "vocabulary.get_nouns", "vocabulary.get_transitive_verbs", "isinstance", "vocabulary.get_color_adjectives", "vocabulary.get_size_adjectives"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.empty_command_statistics", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.lexical_rules", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_intransitive_verbs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_transitive_verbs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_adverbs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_nouns", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_color_adjectives", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_size_adjectives", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_adverbs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_intransitive_verbs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_nouns", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_transitive_verbs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_color_adjectives", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_size_adjectives"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.empty_command_statistics": [[391, 399], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.reset_grammar": [[401, 405], ["grammar.Grammar.empty_command_statistics", "grammar.Grammar.all_templates.clear", "grammar.Grammar.all_derivations.clear"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.empty_command_statistics"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.lexical_rules": [[406, 439], ["grammar.LexicalRule", "grammar.LexicalRule", "jj_rules.extend", "jj_rules.extend", "grammar.LexicalRule", "grammar.LexicalRule", "GroundedScan.world.Weights", "GroundedScan.world.Weights", "grammar.LexicalRule", "grammar.LexicalRule", "GroundedScan.world.Weights", "GroundedScan.world.Weights", "GroundedScan.world.Weights", "GroundedScan.world.Weights"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.sample": [[440, 464], ["isinstance", "grammar.Derivation", "tuple", "numpy.random.randint", "len", "grammar.Grammar.sample"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.sample"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.generate_all": [[466, 503], ["current_template.get_leftmost_nonterminal", "current_template.has_nonterminal", "all_templates.append", "isinstance", "rule_use_counter.copy", "current_template.expand_leftmost_nonterminal", "grammar.Grammar.generate_all", "current_template.to_derivation", "rule_use_counter.copy.keys"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Template.get_leftmost_nonterminal", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Template.has_nonterminal", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Template.expand_leftmost_nonterminal", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.generate_all", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Template.to_derivation"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.form_commands_from_template": [[504, 556], ["isinstance", "zip", "grammar.Derivation.from_rules", "all_derivations.append", "replaced_template.append", "itertools.product", "isinstance", "derivation_rules.copy", "replaced_template.pop", "grammar.Grammar.split_on_category", "replaced_template.append", "replaced_template.append", "replaced_template.append", "grammar.Derivation.from_rules", "grammar.Grammar.command_statistics[].keys"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_rules", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.split_on_category", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_rules"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.generate_all_commands": [[557, 569], ["grammar.Template", "grammar.Template.add_value", "grammar.Grammar.generate_all", "enumerate", "grammar.Grammar.form_commands_from_template"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Template.add_value", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.generate_all", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.form_commands_from_template"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.split_on_category": [[570, 580], ["grammar.Grammar.category", "grammar.Grammar.category", "first_category_words.append", "second_category_words.append"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.category", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.category"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.category": [[581, 583], ["grammar.Grammar.word_to_category.get"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.is_coherent": [[584, 596], ["grammar.Grammar.category", "len", "len", "set"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.category", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.__str__": [[597, 602], ["rule.__str__"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.__str__"], []], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.free_var": [[36, 40], ["GroundedScan.world.Variable"], "function", ["None"], ["\n", "\n", "", "def", "reorg_arg_tree", "(", "arg_tree", ")", ":", "\n", "    ", "if", "len", "(", "arg_tree", ")", "==", "1", ":", "\n", "        ", "if", "type", "(", "arg_tree", "[", "0", "]", ")", "is", "list", ":", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.__init__": [[27, 100], ["os.getcwd", "GroundedScan.world.ObjectVocabulary", "GroundedScan.world.World", "GroundedScan.grammar.Grammar", "dataset.GroundedScan.get_empty_split_dict", "dataset.GroundedScan.get_empty_split_dict", "collections.Counter", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "GroundedScan.vocabulary.Vocabulary.initialize", "dataset.GroundedScan.get_empty_data_statistics", "GroundedScan.vocabulary.Vocabulary.sample", "dataset.GroundedScan._vocabulary.get_semantic_shapes", "dataset.GroundedScan._vocabulary.get_semantic_colors", "dataset.GroundedScan._vocabulary.get_semantic_colors", "dataset.GroundedScan._vocabulary.get_semantic_shapes", "ValueError", "GroundedScan.vocabulary.Vocabulary", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_empty_split_dict", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_empty_split_dict", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.initialize", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_empty_data_statistics", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.sample", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_semantic_shapes", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_semantic_colors", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_semantic_colors", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_semantic_shapes"], ["def", "__init__", "(", "self", ",", "intransitive_verbs", ":", "Union", "[", "Dict", "[", "str", ",", "str", "]", ",", "List", "[", "str", "]", ",", "int", "]", ",", "\n", "transitive_verbs", ":", "Union", "[", "Dict", "[", "str", ",", "str", "]", ",", "List", "[", "str", "]", ",", "int", "]", ",", "\n", "adverbs", ":", "Union", "[", "Dict", "[", "str", ",", "str", "]", ",", "List", "[", "str", "]", ",", "int", "]", ",", "nouns", ":", "Union", "[", "Dict", "[", "str", ",", "str", "]", ",", "List", "[", "str", "]", ",", "int", "]", ",", "\n", "color_adjectives", ":", "Union", "[", "Dict", "[", "str", ",", "str", "]", ",", "List", "[", "str", "]", ",", "int", "]", ",", "\n", "size_adjectives", ":", "Union", "[", "Dict", "[", "str", ",", "str", "]", ",", "List", "[", "str", "]", ",", "int", "]", ",", "\n", "grid_size", ":", "int", ",", "min_object_size", ":", "int", ",", "\n", "max_object_size", ":", "int", ",", "type_grammar", ":", "str", ",", "sample_vocabulary", ":", "str", ",", "percentage_train", ":", "float", ",", "\n", "percentage_dev", "=", "0.01", ",", "\n", "save_directory", "=", "os", ".", "getcwd", "(", ")", ",", "max_recursion", "=", "1", ")", ":", "\n", "        ", "if", "sample_vocabulary", "==", "'sample'", ":", "\n", "            ", "needed_type", "=", "int", "\n", "", "elif", "sample_vocabulary", "==", "'load'", ":", "\n", "            ", "needed_type", "=", "dict", "\n", "", "elif", "sample_vocabulary", "==", "'default'", ":", "\n", "            ", "needed_type", "=", "list", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown value specified for sample_vocabulary: {}\"", ".", "format", "(", "sample_vocabulary", ")", ")", "\n", "", "assert", "(", "isinstance", "(", "intransitive_verbs", ",", "needed_type", ")", "and", "isinstance", "(", "transitive_verbs", ",", "needed_type", ")", "and", "\n", "isinstance", "(", "adverbs", ",", "needed_type", ")", "and", "isinstance", "(", "nouns", ",", "needed_type", ")", "and", "\n", "isinstance", "(", "color_adjectives", ",", "needed_type", ")", "and", "isinstance", "(", "size_adjectives", ",", "needed_type", ")", ")", ",", "\"please specify correct flags for words for --sample_vocabulary={}.\"", ".", "format", "(", "sample_vocabulary", ")", "\n", "\n", "# All images, data and data statistics will be saved in this directory.", "\n", "self", ".", "save_directory", "=", "save_directory", "\n", "\n", "# Command vocabulary.", "\n", "if", "sample_vocabulary", "==", "'default'", ":", "\n", "            ", "self", ".", "_vocabulary", "=", "Vocabulary", ".", "initialize", "(", "intransitive_verbs", "=", "intransitive_verbs", ",", "\n", "transitive_verbs", "=", "transitive_verbs", ",", "adverbs", "=", "adverbs", ",", "nouns", "=", "nouns", ",", "\n", "color_adjectives", "=", "color_adjectives", ",", "\n", "size_adjectives", "=", "size_adjectives", ")", "\n", "", "elif", "sample_vocabulary", "==", "'sample'", ":", "\n", "            ", "self", ".", "_vocabulary", "=", "Vocabulary", ".", "sample", "(", "num_intransitive", "=", "intransitive_verbs", ",", "num_transitive", "=", "transitive_verbs", ",", "\n", "num_adverbs", "=", "adverbs", ",", "num_color_adjectives", "=", "color_adjectives", ",", "\n", "num_size_adjectives", "=", "size_adjectives", ")", "\n", "# We need to be able to load the saved vocabulary from file to map nonce words to their original meaning.", "\n", "", "elif", "sample_vocabulary", "==", "'load'", ":", "\n", "            ", "self", ".", "_vocabulary", "=", "Vocabulary", "(", "intransitive_verbs", "=", "intransitive_verbs", ",", "\n", "transitive_verbs", "=", "transitive_verbs", ",", "\n", "adverbs", "=", "adverbs", ",", "nouns", "=", "nouns", ",", "color_adjectives", "=", "color_adjectives", ",", "\n", "size_adjectives", "=", "size_adjectives", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown value for sample_vocabulary.\"", ")", "\n", "\n", "# Object vocabulary.", "\n", "", "self", ".", "_object_vocabulary", "=", "ObjectVocabulary", "(", "shapes", "=", "self", ".", "_vocabulary", ".", "get_semantic_shapes", "(", ")", ",", "\n", "colors", "=", "self", ".", "_vocabulary", ".", "get_semantic_colors", "(", ")", ",", "\n", "min_size", "=", "min_object_size", ",", "max_size", "=", "max_object_size", ")", "\n", "\n", "# Initialize the world.", "\n", "self", ".", "_world", "=", "World", "(", "grid_size", "=", "grid_size", ",", "colors", "=", "self", ".", "_vocabulary", ".", "get_semantic_colors", "(", ")", ",", "\n", "object_vocabulary", "=", "self", ".", "_object_vocabulary", ",", "\n", "shapes", "=", "self", ".", "_vocabulary", ".", "get_semantic_shapes", "(", ")", ",", "\n", "save_directory", "=", "self", ".", "save_directory", ")", "\n", "self", ".", "_relative_directions", "=", "{", "\"n\"", ",", "\"e\"", ",", "\"s\"", ",", "\"w\"", ",", "\"ne\"", ",", "\"se\"", ",", "\"sw\"", ",", "\"nw\"", "}", "\n", "self", ".", "_straight_directions", "=", "{", "\"n\"", ",", "\"e\"", ",", "\"s\"", ",", "\"w\"", "}", "\n", "self", ".", "_combined_directions", "=", "{", "\"ne\"", ",", "\"se\"", ",", "\"sw\"", ",", "\"nw\"", "}", "\n", "\n", "# Generate the grammar.", "\n", "self", ".", "_type_grammar", "=", "type_grammar", "\n", "self", ".", "max_recursion", "=", "max_recursion", "\n", "self", ".", "_grammar", "=", "Grammar", "(", "vocabulary", "=", "self", ".", "_vocabulary", ",", "type_grammar", "=", "type_grammar", ",", "max_recursion", "=", "max_recursion", ")", "\n", "\n", "# Structures for data and statistics.", "\n", "self", ".", "_percentage_train", "=", "percentage_train", "\n", "self", ".", "_percentage_dev", "=", "percentage_dev", "\n", "self", ".", "_possible_splits", "=", "[", "\"train\"", ",", "\"dev\"", ",", "\"test\"", ",", "\"visual\"", ",", "\"situational_1\"", ",", "\"situational_2\"", ",", "\"contextual\"", ",", "\n", "\"adverb_1\"", ",", "\"adverb_2\"", ",", "\"visual_easier\"", ",", "\"target_lengths\"", "]", "\n", "self", ".", "_data_pairs", "=", "self", ".", "get_empty_split_dict", "(", ")", "\n", "self", ".", "_template_identifiers", "=", "self", ".", "get_empty_split_dict", "(", ")", "\n", "self", ".", "_examples_to_visualize", "=", "[", "]", "\n", "self", ".", "_k_shot_examples_in_train", "=", "Counter", "(", ")", "\n", "self", ".", "_data_statistics", "=", "{", "split", ":", "self", ".", "get_empty_data_statistics", "(", ")", "for", "split", "in", "self", ".", "_possible_splits", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.reset_dataset": [[101, 107], ["dataset.GroundedScan._grammar.reset_grammar", "dataset.GroundedScan.get_empty_split_dict", "dataset.GroundedScan.get_empty_split_dict", "dataset.GroundedScan._examples_to_visualize.clear", "dataset.GroundedScan.get_empty_data_statistics"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.reset_grammar", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_empty_split_dict", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_empty_split_dict", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_empty_data_statistics"], ["", "def", "reset_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_grammar", ".", "reset_grammar", "(", ")", "\n", "self", ".", "_data_pairs", "=", "self", ".", "get_empty_split_dict", "(", ")", "\n", "self", ".", "_template_identifiers", "=", "self", ".", "get_empty_split_dict", "(", ")", "\n", "self", ".", "_examples_to_visualize", ".", "clear", "(", ")", "\n", "self", ".", "_data_statistics", "=", "{", "split", ":", "self", ".", "get_empty_data_statistics", "(", ")", "for", "split", "in", "self", ".", "_possible_splits", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_empty_split_dict": [[108, 110], ["None"], "methods", ["None"], ["", "def", "get_empty_split_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "split", ":", "[", "]", "for", "split", "in", "self", ".", "_possible_splits", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.make_test_set": [[111, 122], ["int", "random.sample", "sorted", "range", "copy.deepcopy", "dataset.GroundedScan._data_pairs[].append", "dataset.GroundedScan._template_identifiers[].append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.sample"], ["", "def", "make_test_set", "(", "self", ",", "type_set", ":", "str", ",", "percentage", ":", "float", ")", ":", "\n", "        ", "num_examples", "=", "int", "(", "percentage", "*", "len", "(", "self", ".", "_data_pairs", "[", "\"train\"", "]", ")", ")", "\n", "k_random_indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "self", ".", "_data_pairs", "[", "\"train\"", "]", ")", ")", ",", "k", "=", "num_examples", ")", "\n", "for", "example_idx", "in", "k_random_indices", ":", "\n", "            ", "example", "=", "deepcopy", "(", "self", ".", "_data_pairs", "[", "\"train\"", "]", "[", "example_idx", "]", ")", "\n", "template_identifier", "=", "self", ".", "_template_identifiers", "[", "\"train\"", "]", "[", "example_idx", "]", "\n", "self", ".", "_data_pairs", "[", "type_set", "]", ".", "append", "(", "example", ")", "\n", "self", ".", "_template_identifiers", "[", "type_set", "]", ".", "append", "(", "template_identifier", ")", "\n", "", "for", "example_idx", "in", "sorted", "(", "k_random_indices", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "del", "self", ".", "_data_pairs", "[", "\"train\"", "]", "[", "example_idx", "]", "\n", "del", "self", ".", "_template_identifiers", "[", "\"train\"", "]", "[", "example_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.move_k_examples_to_train": [[123, 136], ["random.sample", "sorted", "len", "logger.info", "range", "copy.deepcopy", "dataset.GroundedScan._data_pairs[].append", "dataset.GroundedScan._template_identifiers[].append", "len"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.sample"], ["", "", "def", "move_k_examples_to_train", "(", "self", ",", "k", ":", "int", ",", "split", ":", "str", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_data_pairs", "[", "split", "]", ")", "<", "k", "+", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\"Not enough examples in split {} for k(k={})-shot generalization\"", ".", "format", "(", "split", ",", "k", ")", ")", "\n", "", "k_random_indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "self", ".", "_data_pairs", "[", "split", "]", ")", ")", ",", "k", "=", "k", ")", "\n", "for", "example_idx", "in", "k_random_indices", ":", "\n", "            ", "example", "=", "deepcopy", "(", "self", ".", "_data_pairs", "[", "split", "]", "[", "example_idx", "]", ")", "\n", "template_identifier", "=", "self", ".", "_template_identifiers", "[", "split", "]", "[", "example_idx", "]", "\n", "self", ".", "_data_pairs", "[", "\"train\"", "]", ".", "append", "(", "example", ")", "\n", "self", ".", "_template_identifiers", "[", "\"train\"", "]", ".", "append", "(", "template_identifier", ")", "\n", "self", ".", "_k_shot_examples_in_train", "[", "split", "]", "+=", "1", "\n", "", "for", "example_idx", "in", "sorted", "(", "k_random_indices", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "del", "self", ".", "_data_pairs", "[", "split", "]", "[", "example_idx", "]", "\n", "del", "self", ".", "_template_identifiers", "[", "split", "]", "[", "example_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_examples_with_image": [[137, 175], ["random.shuffle", "dataset.GroundedScan.parse_command_repr", "example.get", "dataset.GroundedScan.parse_command_repr", "GroundedScan.world.Situation.from_representation", "dataset.GroundedScan._world.clear_situation", "dataset.GroundedScan.initialize_world", "situation_images.append", "dataset.GroundedScan.parse_command_repr", "dataset.GroundedScan._world.get_current_situation_grid_repr", "dataset.GroundedScan._world.get_current_situation_image", "dataset.GroundedScan._world.execute_command", "situation_images.append", "dataset.GroundedScan._world.get_current_situation_grid_repr", "dataset.GroundedScan._world.get_current_situation_image", "example.get"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.from_representation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation_grid_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation_image", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.execute_command", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation_grid_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation_image", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get"], ["", "", "def", "get_examples_with_image", "(", "self", ",", "split", "=", "\"train\"", ",", "simple_situation_representation", "=", "False", ")", "->", "dict", ":", "\n", "        ", "\"\"\"\n        Get data pairs with images in the form of np.ndarray's with RGB values or with 1 pixel per grid cell\n        (see encode in class Grid of minigrid.py for details on what such representation looks like).\n        :param split: string specifying which split to load.\n        :param simple_situation_representation:  whether to get the full RGB image or a simple representation.\n        :return: data examples.\n        \"\"\"", "\n", "random", ".", "shuffle", "(", "self", ".", "_data_pairs", "[", "split", "]", ")", "\n", "for", "example", "in", "self", ".", "_data_pairs", "[", "split", "]", ":", "\n", "            ", "command", "=", "self", ".", "parse_command_repr", "(", "example", "[", "\"command\"", "]", ")", "\n", "if", "example", ".", "get", "(", "\"meaning\"", ")", ":", "\n", "                ", "meaning", "=", "example", "[", "\"meaning\"", "]", "\n", "", "else", ":", "\n", "                ", "meaning", "=", "example", "[", "\"command\"", "]", "\n", "", "meaning", "=", "self", ".", "parse_command_repr", "(", "meaning", ")", "\n", "situation", "=", "Situation", ".", "from_representation", "(", "example", "[", "\"situation\"", "]", ")", "\n", "self", ".", "_world", ".", "clear_situation", "(", ")", "\n", "self", ".", "initialize_world", "(", "situation", ")", "\n", "situation_images", "=", "[", "]", "\n", "if", "simple_situation_representation", ":", "\n", "                ", "situation_image", "=", "self", ".", "_world", ".", "get_current_situation_grid_repr", "(", ")", "\n", "", "else", ":", "\n", "                ", "situation_image", "=", "self", ".", "_world", ".", "get_current_situation_image", "(", ")", "\n", "", "situation_images", ".", "append", "(", "situation_image", ")", "\n", "target_commands", "=", "self", ".", "parse_command_repr", "(", "example", "[", "\"target_commands\"", "]", ")", "\n", "# ylkuo: change from init situation to a list of observed situations given a command", "\n", "for", "target_command", "in", "target_commands", ":", "\n", "                ", "self", ".", "_world", ".", "execute_command", "(", "target_command", ")", "\n", "if", "simple_situation_representation", ":", "\n", "                    ", "situation_image", "=", "self", ".", "_world", ".", "get_current_situation_grid_repr", "(", ")", "\n", "", "else", ":", "\n", "                    ", "situation_image", "=", "self", ".", "_world", ".", "get_current_situation_image", "(", ")", "\n", "", "situation_images", ".", "append", "(", "situation_image", ")", "\n", "", "yield", "{", "\"input_command\"", ":", "command", ",", "\"input_meaning\"", ":", "meaning", ",", "\n", "\"derivation_representation\"", ":", "example", ".", "get", "(", "\"derivation\"", ")", ",", "\n", "\"situation_images\"", ":", "situation_images", ",", "\"situation_representation\"", ":", "example", "[", "\"situation\"", "]", ",", "\n", "\"target_command\"", ":", "target_commands", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.situation_image_dimension": [[176, 179], ["dataset.GroundedScan._world.get_current_situation_image"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation_image"], ["", "", "@", "property", "\n", "def", "situation_image_dimension", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_world", ".", "get_current_situation_image", "(", ")", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.num_examples": [[180, 182], ["len"], "methods", ["None"], ["", "def", "num_examples", "(", "self", ",", "split", "=", "\"train\"", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_data_pairs", "[", "split", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.count_equivalent_examples": [[183, 196], ["logger.info", "enumerate", "enumerate", "len", "len", "dataset.GroundedScan.compare_examples"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.compare_examples"], ["", "def", "count_equivalent_examples", "(", "self", ",", "split_1", "=", "\"train\"", ",", "split_2", "=", "\"test\"", ")", ":", "\n", "        ", "\"\"\"Count the number of equivalent examples between two specified splits.\"\"\"", "\n", "logger", ".", "info", "(", "\"WARNING: about to compare a maximum of {} examples.\"", ".", "format", "(", "\n", "len", "(", "self", ".", "_data_pairs", "[", "split_1", "]", ")", "*", "len", "(", "self", ".", "_data_pairs", "[", "split_2", "]", ")", ")", ")", "\n", "equivalent_examples", "=", "0", "\n", "for", "i", ",", "example_1", "in", "enumerate", "(", "self", ".", "_data_pairs", "[", "split_1", "]", ")", ":", "\n", "            ", "template_identifier_1", "=", "self", ".", "_template_identifiers", "[", "split_1", "]", "[", "i", "]", "\n", "for", "j", ",", "example_2", "in", "enumerate", "(", "self", ".", "_data_pairs", "[", "split_2", "]", ")", ":", "\n", "                ", "template_identifier_2", "=", "self", ".", "_template_identifiers", "[", "split_2", "]", "[", "j", "]", "\n", "if", "template_identifier_2", "==", "template_identifier_1", ":", "\n", "                    ", "if", "self", ".", "compare_examples", "(", "example_1", ",", "example_2", ")", ":", "\n", "                        ", "equivalent_examples", "+=", "1", "\n", "", "", "", "", "return", "equivalent_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.discard_equivalent_examples": [[197, 210], ["enumerate", "sorted", "dataset.GroundedScan.has_equivalent_example", "to_delete.append"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.has_equivalent_example"], ["", "def", "discard_equivalent_examples", "(", "self", ",", "split", "=", "\"test\"", ")", "->", "int", ":", "\n", "        ", "\"\"\"Go over the specified split and discard any examples that are already found in the training set.\"\"\"", "\n", "equivalent_examples", "=", "0", "\n", "to_delete", "=", "[", "]", "\n", "for", "i", ",", "example", "in", "enumerate", "(", "self", ".", "_data_pairs", "[", "split", "]", ")", ":", "\n", "            ", "template_identifier", "=", "self", ".", "_template_identifiers", "[", "split", "]", "[", "i", "]", "\n", "if", "self", ".", "has_equivalent_example", "(", "example", ",", "template_identifier", ",", "split", "=", "\"train\"", ")", ":", "\n", "                ", "equivalent_examples", "+=", "1", "\n", "to_delete", ".", "append", "(", "i", ")", "\n", "", "", "for", "i_to_delete", "in", "sorted", "(", "to_delete", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "del", "self", ".", "_data_pairs", "[", "split", "]", "[", "i_to_delete", "]", "\n", "del", "self", ".", "_template_identifiers", "[", "split", "]", "[", "i_to_delete", "]", "\n", "", "return", "equivalent_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.has_equivalent_example": [[211, 219], ["enumerate", "dataset.GroundedScan.compare_examples"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.compare_examples"], ["", "def", "has_equivalent_example", "(", "self", ",", "example", ":", "dict", ",", "template_identifier", ":", "int", ",", "split", "=", "\"train\"", ")", ":", "\n", "        ", "\"\"\"Go over the matching templates in the specified split and compare for equivalent with the passed example.\"\"\"", "\n", "for", "i", ",", "example_1", "in", "enumerate", "(", "self", ".", "_data_pairs", "[", "split", "]", ")", ":", "\n", "            ", "template_identifier_1", "=", "self", ".", "_template_identifiers", "[", "split", "]", "[", "i", "]", "\n", "if", "template_identifier_1", "==", "template_identifier", ":", "\n", "                ", "if", "self", ".", "compare_examples", "(", "example_1", ",", "example", ")", ":", "\n", "                    ", "return", "True", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.meaning_command": [[220, 222], ["dataset.GroundedScan._vocabulary.translate_word"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "meaning_command", "(", "self", ",", "input_command", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "return", "[", "self", ".", "_vocabulary", ".", "translate_word", "(", "word", ")", "for", "word", "in", "input_command", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.fill_example": [[223, 243], ["dataset.GroundedScan.command_repr", "dataset.GroundedScan.command_repr", "dataset.GroundedScan.derivation_repr", "situation.to_representation", "dataset.GroundedScan.command_repr", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._data_pairs[].append", "dataset.GroundedScan._examples_to_visualize.append", "dataset.GroundedScan.meaning_command", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.derivation_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.to_representation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.meaning_command", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "fill_example", "(", "self", ",", "command", ":", "List", "[", "str", "]", ",", "derivation", ":", "Derivation", ",", "situation", ":", "Situation", ",", "target_commands", ":", "List", "[", "str", "]", ",", "\n", "verb_in_command", ":", "str", ",", "target_predicate", ":", "dict", ",", "visualize", ":", "bool", ",", "adverb", ":", "str", ",", "splits", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "\"\"\"Add an example to the list of examples for the specified split.\"\"\"", "\n", "example", "=", "{", "\n", "\"command\"", ":", "self", ".", "command_repr", "(", "command", ")", ",", "\n", "\"meaning\"", ":", "self", ".", "command_repr", "(", "self", ".", "meaning_command", "(", "command", ")", ")", ",", "\n", "\"derivation\"", ":", "self", ".", "derivation_repr", "(", "derivation", ")", ",", "\n", "\"situation\"", ":", "situation", ".", "to_representation", "(", ")", ",", "\n", "\"target_commands\"", ":", "self", ".", "command_repr", "(", "target_commands", ")", ",", "\n", "\"verb_in_command\"", ":", "self", ".", "_vocabulary", ".", "translate_word", "(", "verb_in_command", ")", ",", "\n", "\"manner\"", ":", "self", ".", "_vocabulary", ".", "translate_word", "(", "adverb", ")", ",", "\n", "\"referred_target\"", ":", "' '", ".", "join", "(", "[", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"size\"", "]", ")", ",", "\n", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"color\"", "]", ")", ",", "\n", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"noun\"", "]", ")", "]", ")", "\n", "}", "\n", "for", "split", "in", "splits", ":", "\n", "            ", "self", ".", "_data_pairs", "[", "split", "]", ".", "append", "(", "example", ")", "\n", "", "if", "visualize", ":", "\n", "            ", "self", ".", "_examples_to_visualize", ".", "append", "(", "example", ")", "\n", "", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.compare_examples": [[244, 257], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compare_examples", "(", "example_1", ":", "dict", ",", "example_2", ":", "dict", ")", "->", "bool", ":", "\n", "        ", "\"\"\"An example is regarded the same if the command, situation, target commands are the same.\"\"\"", "\n", "if", "example_1", "[", "\"command\"", "]", "!=", "example_2", "[", "\"command\"", "]", ":", "\n", "            ", "return", "False", "\n", "", "if", "example_1", "[", "\"target_commands\"", "]", "!=", "example_2", "[", "\"target_commands\"", "]", ":", "\n", "            ", "return", "False", "\n", "", "target_position_1", "=", "example_1", "[", "'situation'", "]", "[", "'target_object'", "]", "[", "'position'", "]", "\n", "target_position_2", "=", "example_2", "[", "'situation'", "]", "[", "'target_object'", "]", "[", "'position'", "]", "\n", "if", "(", "target_position_1", "[", "'row'", "]", "!=", "target_position_2", "[", "'row'", "]", "or", "\n", "target_position_1", "[", "'column'", "]", "!=", "target_position_2", "[", "'column'", "]", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_example": [[258, 270], ["dataset.GroundedScan.parse_command_repr", "dataset.GroundedScan.parse_command_repr", "GroundedScan.world.Situation.from_representation", "dataset.GroundedScan.parse_command_repr", "dataset.GroundedScan.parse_derivation_repr", "dataset.GroundedScan.demonstrate_command", "dataset.GroundedScan.derivation_repr", "dataset.GroundedScan.command_repr", "dataset.GroundedScan.command_repr"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.from_representation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_derivation_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_command", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.derivation_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr"], ["", "def", "parse_example", "(", "self", ",", "data_example", ":", "dict", ")", ":", "\n", "        ", "\"\"\"Take an example as written in a file and parse it to its internal representations such that we can interact\n        with it.\"\"\"", "\n", "command", "=", "self", ".", "parse_command_repr", "(", "data_example", "[", "\"command\"", "]", ")", "\n", "meaning", "=", "self", ".", "parse_command_repr", "(", "data_example", "[", "\"meaning\"", "]", ")", "\n", "situation", "=", "Situation", ".", "from_representation", "(", "data_example", "[", "\"situation\"", "]", ")", "\n", "target_commands", "=", "self", ".", "parse_command_repr", "(", "data_example", "[", "\"target_commands\"", "]", ")", "\n", "derivation", "=", "self", ".", "parse_derivation_repr", "(", "data_example", "[", "\"derivation\"", "]", ")", "\n", "assert", "self", ".", "derivation_repr", "(", "derivation", ")", "==", "data_example", "[", "\"derivation\"", "]", "\n", "actual_target_commands", ",", "target_demonstration", ",", "action", "=", "self", ".", "demonstrate_command", "(", "derivation", ",", "situation", ")", "\n", "assert", "self", ".", "command_repr", "(", "actual_target_commands", ")", "==", "self", ".", "command_repr", "(", "target_commands", ")", "\n", "return", "command", ",", "meaning", ",", "derivation", ",", "situation", ",", "actual_target_commands", ",", "target_demonstration", ",", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_empty_situation": [[271, 281], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_empty_situation", "(", ")", ":", "\n", "        ", "return", "{", "\n", "\"distance_to_target\"", ":", "None", ",", "\n", "\"direction_to_target\"", ":", "None", ",", "\n", "\"target_shape\"", ":", "None", ",", "\n", "\"target_color\"", ":", "None", ",", "\n", "\"target_size\"", ":", "None", ",", "\n", "\"target_position\"", ":", "None", ",", "\n", "\"agent_position\"", ":", "None", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_empty_data_statistics": [[283, 315], ["collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "collections.Counter", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "empty_dict[].keys", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.Counter", "collections.defaultdict", "collections.Counter", "collections.defaultdict", "collections.Counter", "collections.defaultdict", "collections.Counter", "collections.defaultdict", "collections.Counter", "str"], "methods", ["None"], ["", "def", "get_empty_data_statistics", "(", "self", ")", ":", "\n", "        ", "empty_dict", "=", "{", "\n", "\"distance_to_target\"", ":", "Counter", "(", ")", ",", "\n", "\"direction_to_target\"", ":", "Counter", "(", ")", ",", "\n", "\"input_length\"", ":", "Counter", "(", ")", ",", "\n", "\"target_length\"", ":", "Counter", "(", ")", ",", "\n", "\"target_shape\"", ":", "Counter", "(", ")", ",", "\n", "\"target_color\"", ":", "Counter", "(", ")", ",", "\n", "\"target_size\"", ":", "Counter", "(", ")", ",", "\n", "\"target_position\"", ":", "Counter", "(", ")", ",", "\n", "\"agent_position\"", ":", "Counter", "(", ")", ",", "\n", "\"verbs_in_command\"", ":", "defaultdict", "(", "int", ")", ",", "\n", "\"manners_in_command\"", ":", "defaultdict", "(", "int", ")", ",", "\n", "\"verb_adverb_combinations\"", ":", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "int", ")", ")", ",", "\n", "\"verb_target_combinations\"", ":", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "int", ")", ")", ",", "\n", "\"referred_targets\"", ":", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "int", ")", ")", ",", "\n", "\"placed_targets\"", ":", "defaultdict", "(", "int", ")", ",", "\n", "\"situations\"", ":", "{", "\n", "\"shape\"", ":", "{", "\"objects_in_world\"", ":", "defaultdict", "(", "int", ")", ",", "\"num_objects_placed\"", ":", "Counter", "(", ")", "}", ",", "\n", "\"color,shape\"", ":", "{", "\"objects_in_world\"", ":", "defaultdict", "(", "int", ")", ",", "\"num_objects_placed\"", ":", "Counter", "(", ")", "}", ",", "\n", "\"size,shape\"", ":", "{", "\"objects_in_world\"", ":", "defaultdict", "(", "int", ")", ",", "\"num_objects_placed\"", ":", "Counter", "(", ")", "}", ",", "\n", "\"size,color,shape\"", ":", "{", "\"objects_in_world\"", ":", "defaultdict", "(", "int", ")", ",", "\"num_objects_placed\"", ":", "Counter", "(", ")", "}", ",", "\n", "\"all\"", ":", "{", "\"objects_in_world\"", ":", "defaultdict", "(", "int", ")", ",", "\"num_objects_placed\"", ":", "Counter", "(", ")", "}", ",", "\n", "}", ",", "\n", "\"examples_in_train\"", ":", "0", "\n", "}", "\n", "for", "target_object", "in", "self", ".", "_object_vocabulary", ".", "all_objects", ":", "\n", "            ", "target_object_str", "=", "' '", ".", "join", "(", "[", "str", "(", "target_object", "[", "0", "]", ")", ",", "target_object", "[", "1", "]", ",", "target_object", "[", "2", "]", "]", ")", "\n", "for", "key", "in", "empty_dict", "[", "\"situations\"", "]", ".", "keys", "(", ")", ":", "\n", "                ", "empty_dict", "[", "\"situations\"", "]", "[", "key", "]", "[", "target_object_str", "]", "=", "0", "\n", "", "empty_dict", "[", "\"placed_targets\"", "]", "[", "target_object_str", "]", "=", "0", "\n", "", "return", "empty_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.update_data_statistics": [[316, 368], ["data_example.get", "data_example.get", "len", "[].values", "referred_target.split.split.split", "len", "[].keys", "int", "str", "len", "len", "len", "data_example.get", "data_example[].split", "data_example[].split"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get"], ["", "def", "update_data_statistics", "(", "self", ",", "data_example", ",", "split", "=", "\"train\"", ")", ":", "\n", "        ", "\"\"\"Keeps track of certain statistics regarding the data pairs generated.\"\"\"", "\n", "\n", "# Update the statistics regarding the situation.", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"distance_to_target\"", "]", "[", "int", "(", "data_example", "[", "\"situation\"", "]", "[", "\"distance_to_target\"", "]", ")", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"direction_to_target\"", "]", "[", "data_example", "[", "\"situation\"", "]", "[", "\"direction_to_target\"", "]", "]", "+=", "1", "\n", "target_size", "=", "data_example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"object\"", "]", "[", "\"size\"", "]", "\n", "target_color", "=", "data_example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"object\"", "]", "[", "\"color\"", "]", "\n", "target_shape", "=", "data_example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"object\"", "]", "[", "\"shape\"", "]", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"target_shape\"", "]", "[", "target_shape", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"target_color\"", "]", "[", "target_color", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"target_size\"", "]", "[", "target_size", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"target_position\"", "]", "[", "\n", "(", "data_example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"position\"", "]", "[", "\"column\"", "]", ",", "\n", "data_example", "[", "\"situation\"", "]", "[", "\"target_object\"", "]", "[", "\"position\"", "]", "[", "\"row\"", "]", ")", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"agent_position\"", "]", "[", "(", "data_example", "[", "\"situation\"", "]", "[", "\"agent_position\"", "]", "[", "\"column\"", "]", ",", "\n", "data_example", "[", "\"situation\"", "]", "[", "\"agent_position\"", "]", "[", "\"row\"", "]", ")", "]", "+=", "1", "\n", "placed_target", "=", "' '", ".", "join", "(", "[", "str", "(", "target_size", ")", ",", "target_color", ",", "target_shape", "]", ")", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"placed_targets\"", "]", "[", "placed_target", "]", "+=", "1", "\n", "\n", "# Update the statistics regarding the command.", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"verbs_in_command\"", "]", "[", "data_example", "[", "\"verb_in_command\"", "]", "]", "+=", "1", "\n", "manner", "=", "data_example", ".", "get", "(", "\"manner\"", ")", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"manners_in_command\"", "]", "[", "manner", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"referred_targets\"", "]", "[", "data_example", ".", "get", "(", "\"referred_target\"", ")", "]", "[", "placed_target", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"verb_adverb_combinations\"", "]", "[", "manner", "]", "[", "data_example", "[", "\"verb_in_command\"", "]", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"verb_target_combinations\"", "]", "[", "data_example", "[", "\"verb_in_command\"", "]", "]", "[", "placed_target", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"input_length\"", "]", "[", "len", "(", "data_example", "[", "\"command\"", "]", ".", "split", "(", "','", ")", ")", "]", "+=", "1", "\n", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"target_length\"", "]", "[", "len", "(", "data_example", "[", "\"target_commands\"", "]", ".", "split", "(", "','", ")", ")", "]", "+=", "1", "\n", "referred_target", "=", "data_example", ".", "get", "(", "\"referred_target\"", ")", "\n", "if", "referred_target", ":", "\n", "            ", "referred_target", "=", "referred_target", ".", "split", "(", ")", "\n", "", "else", ":", "\n", "            ", "referred_target", "=", "[", "\"\"", "]", "\n", "", "if", "len", "(", "referred_target", ")", "==", "3", ":", "\n", "            ", "referred_categories", "=", "\"size,color,shape\"", "\n", "", "elif", "len", "(", "referred_target", ")", "==", "1", ":", "\n", "            ", "referred_categories", "=", "\"shape\"", "\n", "", "else", ":", "\n", "            ", "if", "referred_target", "[", "0", "]", "in", "self", ".", "_object_vocabulary", ".", "object_colors", ":", "\n", "                ", "referred_categories", "=", "\"color,shape\"", "\n", "", "else", ":", "\n", "                ", "referred_categories", "=", "\"size,shape\"", "\n", "", "", "num_placed_objects", "=", "len", "(", "data_example", "[", "'situation'", "]", "[", "'placed_objects'", "]", ".", "keys", "(", ")", ")", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"situations\"", "]", "[", "referred_categories", "]", "[", "\"num_objects_placed\"", "]", "[", "num_placed_objects", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"situations\"", "]", "[", "\"all\"", "]", "[", "\"num_objects_placed\"", "]", "[", "num_placed_objects", "]", "+=", "1", "\n", "for", "placed_object", "in", "data_example", "[", "'situation'", "]", "[", "'placed_objects'", "]", ".", "values", "(", ")", ":", "\n", "            ", "placed_object", "=", "' '", ".", "join", "(", "[", "placed_object", "[", "'object'", "]", "[", "'size'", "]", ",", "placed_object", "[", "'object'", "]", "[", "'color'", "]", ",", "\n", "placed_object", "[", "'object'", "]", "[", "'shape'", "]", "]", ")", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"situations\"", "]", "[", "referred_categories", "]", "[", "\"objects_in_world\"", "]", "[", "placed_object", "]", "+=", "1", "\n", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"situations\"", "]", "[", "\"all\"", "]", "[", "\"objects_in_world\"", "]", "[", "placed_object", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_position_counts": [[369, 389], ["file.write", "range", "file.write", "file.write", "range", "file.write", "file.write", "file.write", "len", "len", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write"], ["", "", "def", "save_position_counts", "(", "self", ",", "position_counts", ",", "file", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"\n        Prints a grid with at each position a count of something occurring at that position in the dataset\n        (e.g. the agent or the target object.)\n        \"\"\"", "\n", "file", ".", "write", "(", "\"Columns\\n\"", ")", "\n", "for", "row", "in", "range", "(", "self", ".", "_world", ".", "grid_size", ")", ":", "\n", "            ", "row_print", "=", "\"Row {}\"", ".", "format", "(", "row", ")", "\n", "file", ".", "write", "(", "row_print", ")", "\n", "file", ".", "write", "(", "(", "8", "-", "len", "(", "row_print", ")", ")", "*", "' '", ")", "\n", "for", "column", "in", "range", "(", "self", ".", "_world", ".", "grid_size", ")", ":", "\n", "                ", "if", "(", "str", "(", "column", ")", ",", "str", "(", "row", ")", ")", "in", "position_counts", ":", "\n", "                    ", "count", "=", "position_counts", "[", "(", "str", "(", "column", ")", ",", "str", "(", "row", ")", ")", "]", "\n", "", "else", ":", "\n", "                    ", "count", "=", "0", "\n", "", "count_print", "=", "\"({}, {}): {}\"", ".", "format", "(", "column", ",", "row", ",", "count", ")", "\n", "fill_spaces", "=", "20", "-", "len", "(", "count_print", ")", "\n", "file", ".", "write", "(", "count_print", "+", "fill_spaces", "*", "' '", ")", "\n", "", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_dataset_statistics": [[390, 467], ["[].items", "dataset.GroundedScan.get_empty_situation().keys", "GroundedScan.helpers.bar_plot", "GroundedScan.helpers.bar_plot", "GroundedScan.helpers.bar_plot", "GroundedScan.helpers.bar_plot", "dataset.GroundedScan.update_data_statistics", "open", "len", "infile.write", "infile.write", "[].items", "sum", "infile.write", "infile.write", "dataset.GroundedScan.save_position_counts", "infile.write", "dataset.GroundedScan.save_position_counts", "infile.write", "infile.write", "verb_target_combinations.items", "infile.write", "infile.write", "infile.write", "GroundedScan.helpers.save_counter", "infile.write", "infile.write", "verb_adverb_combinations.items", "infile.write", "infile.write", "referred_targets.items", "infile.write", "GroundedScan.helpers.save_counter", "infile.write", "situation_stats.items", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "logger.info", "[].values", "GroundedScan.helpers.save_counter", "GroundedScan.helpers.save_counter", "GroundedScan.helpers.save_counter", "GroundedScan.helpers.save_counter", "GroundedScan.helpers.save_counter", "GroundedScan.helpers.bar_plot", "dataset.GroundedScan.get_empty_situation", "GroundedScan.helpers.bar_plot", "str", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.update_data_statistics", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_position_counts", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_position_counts", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.save_counter", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.save_counter", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.save_counter", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.save_counter", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.save_counter", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.save_counter", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.save_counter", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_empty_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.bar_plot"], ["", "", "def", "save_dataset_statistics", "(", "self", ",", "split", "=", "\"train\"", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"\n        Summarizes the statistics and saves and prints them.\n        \"\"\"", "\n", "examples", "=", "self", ".", "_data_pairs", "[", "split", "]", "\n", "for", "example", "in", "examples", ":", "\n", "            ", "self", ".", "update_data_statistics", "(", "example", ",", "split", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "split", "+", "\"_dataset_stats.txt\"", ")", ",", "'w'", ")", "as", "infile", ":", "\n", "# General statistics", "\n", "            ", "number_of_examples", "=", "len", "(", "self", ".", "_data_pairs", "[", "split", "]", ")", "\n", "if", "number_of_examples", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"WARNING: trying to save dataset statistics for an empty split {}.\"", ".", "format", "(", "split", ")", ")", "\n", "return", "\n", "", "infile", ".", "write", "(", "\"Number of examples: {}\\n\"", ".", "format", "(", "number_of_examples", ")", ")", "\n", "infile", ".", "write", "(", "\"Number of examples of this split in train: {}\\n\"", ".", "format", "(", "\n", "str", "(", "self", ".", "_k_shot_examples_in_train", "[", "split", "]", ")", ")", ")", "\n", "# Situation statistics.", "\n", "mean_distance_to_target", "=", "0", "\n", "for", "distance_to_target", ",", "count", "in", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"distance_to_target\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "mean_distance_to_target", "+=", "count", "*", "distance_to_target", "\n", "", "mean_distance_to_target", "/=", "sum", "(", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"distance_to_target\"", "]", ".", "values", "(", ")", ")", "\n", "infile", ".", "write", "(", "\"Mean walking distance to target: {}\\n\"", ".", "format", "(", "mean_distance_to_target", ")", ")", "\n", "infile", ".", "write", "(", "\"Agent positions:\\n\"", ")", "\n", "self", ".", "save_position_counts", "(", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"agent_position\"", "]", ",", "infile", ")", "\n", "infile", ".", "write", "(", "\"Target positions:\\n\"", ")", "\n", "self", ".", "save_position_counts", "(", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"target_position\"", "]", ",", "infile", ")", "\n", "\n", "infile", ".", "write", "(", "\"Verbs:\\n\"", ")", "\n", "verb_target_combinations", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"verb_target_combinations\"", "]", "\n", "infile", ".", "write", "(", "\"Verb target combinations:\\n\"", ")", "\n", "for", "key", ",", "values", "in", "verb_target_combinations", ".", "items", "(", ")", ":", "\n", "                ", "save_counter", "(", "\" \"", "+", "key", ",", "values", ",", "infile", ")", "\n", "", "infile", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "infile", ".", "write", "(", "\"Adverbs:\\n\"", ")", "\n", "manners_in_command", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"manners_in_command\"", "]", "\n", "infile", ".", "write", "(", "\"Adverb occurrences:\\n\"", ")", "\n", "save_counter", "(", "\"Adverbs\"", ",", "manners_in_command", ",", "infile", ")", "\n", "infile", ".", "write", "(", "\"\\n\"", ")", "\n", "verb_adverb_combinations", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"verb_adverb_combinations\"", "]", "\n", "infile", ".", "write", "(", "\"Verb adverb combinations:\\n\"", ")", "\n", "for", "key", ",", "values", "in", "verb_adverb_combinations", ".", "items", "(", ")", ":", "\n", "                ", "save_counter", "(", "\" \"", "+", "key", ",", "values", ",", "infile", ")", "\n", "", "infile", ".", "write", "(", "\"\\n\"", ")", "\n", "referred_targets", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"referred_targets\"", "]", "\n", "infile", ".", "write", "(", "\"\\nReferred Targets: \\n\"", ")", "\n", "for", "key", ",", "values", "in", "referred_targets", ".", "items", "(", ")", ":", "\n", "                ", "save_counter", "(", "\"  \"", "+", "key", ",", "values", ",", "infile", ")", "\n", "", "placed_targets", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"placed_targets\"", "]", "\n", "infile", ".", "write", "(", "\"\\n\"", ")", "\n", "save_counter", "(", "\"placed_targets\"", ",", "placed_targets", ",", "infile", ")", "\n", "situation_stats", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"situations\"", "]", "\n", "infile", ".", "write", "(", "\"\\nObjects placed in the world for particular referenced objects: \\n\"", ")", "\n", "for", "key", ",", "values", "in", "situation_stats", ".", "items", "(", ")", ":", "\n", "                ", "save_counter", "(", "\"  \"", "+", "key", ",", "values", "[", "\"num_objects_placed\"", "]", ",", "infile", ")", "\n", "save_counter", "(", "\"  \"", "+", "key", ",", "values", "[", "\"objects_in_world\"", "]", ",", "infile", ")", "\n", "\n", "", "", "for", "key", ",", "values", "in", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"situations\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "values", "[", "\"objects_in_world\"", "]", ")", ":", "\n", "                ", "bar_plot", "(", "values", "[", "\"objects_in_world\"", "]", ",", "key", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "split", "+", "\"_\"", "+", "key", "+", "\".png\"", ")", ")", "\n", "\n", "", "", "for", "key", "in", "self", ".", "get_empty_situation", "(", ")", ".", "keys", "(", ")", ":", "\n", "            ", "occurrence_counter", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "key", "]", "\n", "if", "key", "!=", "\"agent_position\"", "and", "key", "!=", "\"target_position\"", "and", "key", "!=", "\"distance_to_target\"", ":", "\n", "                ", "bar_plot", "(", "occurrence_counter", ",", "key", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "split", "+", "\"_\"", "+", "key", "+", "\".png\"", ")", ")", "\n", "\n", "# Command statistics.", "\n", "", "", "verbs_in_command", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"verbs_in_command\"", "]", "\n", "bar_plot", "(", "verbs_in_command", ",", "\"verbs_in_command\"", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "\n", "split", "+", "\"_\"", "+", "\"verbs_in_command.png\"", ")", ")", "\n", "manners_in_command", "=", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"manners_in_command\"", "]", "\n", "bar_plot", "(", "manners_in_command", ",", "\"manners_in_command\"", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "\n", "split", "+", "\"_\"", "+", "\"manners_in_command.png\"", ")", ")", "\n", "bar_plot", "(", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"target_length\"", "]", ",", "\"target_lengths\"", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "split", "+", "\"_\"", "+", "\"target_lengths.png\"", ")", ")", "\n", "bar_plot", "(", "self", ".", "_data_statistics", "[", "split", "]", "[", "\"input_length\"", "]", ",", "\"input_lengths\"", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "split", "+", "\"_\"", "+", "\"input_lengths.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_dataset": [[468, 496], ["os.path.join", "len", "open", "dataset_representation.update", "json.dump", "dataset.GroundedScan._grammar.__str__", "dataset.GroundedScan._vocabulary.to_representation", "dataset.GroundedScan._data_pairs.items"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.__str__", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.to_representation"], ["", "def", "save_dataset", "(", "self", ",", "file_name", ":", "str", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Saves the current generated data to a file in a particular format that is readable by load_examples_from_file.\n        :param file_name: file name to save the dataset in. Will get saved in self.save_directory\n        :return: path to saved file.\n        \"\"\"", "\n", "assert", "len", "(", "self", ".", "_data_pairs", ")", ">", "0", ",", "\"No data to save, call .get_data_pairs()\"", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "file_name", ")", "\n", "with", "open", "(", "output_path", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "dataset_representation", "=", "{", "\n", "\"grid_size\"", ":", "self", ".", "_world", ".", "grid_size", ",", "\n", "\"type_grammar\"", ":", "self", ".", "_type_grammar", ",", "\n", "\"grammar\"", ":", "self", ".", "_grammar", ".", "__str__", "(", ")", ",", "\n", "\"min_object_size\"", ":", "self", ".", "_object_vocabulary", ".", "smallest_size", ",", "\n", "\"max_object_size\"", ":", "self", ".", "_object_vocabulary", ".", "largest_size", ",", "\n", "\"max_recursion\"", ":", "self", ".", "max_recursion", ",", "\n", "\"percentage_train\"", ":", "self", ".", "_percentage_train", ",", "\n", "\"examples\"", ":", "{", "key", ":", "values", "for", "key", ",", "values", "in", "self", ".", "_data_pairs", ".", "items", "(", ")", "}", "\n", "}", "\n", "dataset_representation", ".", "update", "(", "self", ".", "_vocabulary", ".", "to_representation", "(", ")", ")", "\n", "if", "self", ".", "_type_grammar", "==", "\"simple_intrans\"", ":", "\n", "                ", "dataset_representation", "[", "\"transitive_verbs\"", "]", "=", "{", "}", "\n", "", "if", "self", ".", "_type_grammar", "==", "\"simple_trans\"", ":", "\n", "                ", "dataset_representation", "[", "\"intransitive_verbs\"", "]", "=", "{", "}", "\n", "", "if", "not", "(", "self", ".", "_type_grammar", "==", "\"adverb\"", "or", "self", ".", "_type_grammar", "==", "\"conjunction\"", ")", ":", "\n", "                ", "dataset_representation", "[", "\"adverbs\"", "]", "=", "{", "}", "\n", "", "json", ".", "dump", "(", "dataset_representation", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "", "return", "output_path", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.load_dataset_from_file": [[497, 529], ["open", "json.load", "json.load.get", "cls", "all_data[].items", "logger.info", "enumerate", "len", "len", "random.sample", "len", "range", "cls._data_pairs[].append", "cls.update_data_statistics", "cls._data_pairs[].append", "cls.update_data_statistics", "cls._data_pairs[].append", "cls.update_data_statistics"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.sample", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.update_data_statistics", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.update_data_statistics", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.update_data_statistics"], ["", "@", "classmethod", "\n", "def", "load_dataset_from_file", "(", "cls", ",", "file_path", ":", "str", ",", "save_directory", ":", "str", ",", "k", "=", "0", ")", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "infile", ":", "\n", "            ", "all_data", "=", "json", ".", "load", "(", "infile", ")", "\n", "percentage_train", "=", "all_data", ".", "get", "(", "\"percentage_train\"", ")", "\n", "if", "not", "percentage_train", ":", "\n", "                ", "percentage_train", "=", "0.8", "\n", "", "dataset", "=", "cls", "(", "all_data", "[", "\"intransitive_verbs\"", "]", ",", "all_data", "[", "\"transitive_verbs\"", "]", ",", "all_data", "[", "\"adverbs\"", "]", ",", "\n", "all_data", "[", "\"nouns\"", "]", ",", "all_data", "[", "\"color_adjectives\"", "]", ",", "all_data", "[", "\"size_adjectives\"", "]", ",", "\n", "all_data", "[", "\"grid_size\"", "]", ",", "all_data", "[", "\"min_object_size\"", "]", ",", "all_data", "[", "\"max_object_size\"", "]", ",", "\n", "type_grammar", "=", "all_data", "[", "\"type_grammar\"", "]", ",", "save_directory", "=", "save_directory", ",", "\n", "percentage_train", "=", "percentage_train", ",", "\n", "max_recursion", "=", "all_data", "[", "\"max_recursion\"", "]", ",", "sample_vocabulary", "=", "'load'", ")", "\n", "for", "split", ",", "examples", "in", "all_data", "[", "\"examples\"", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "examples", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "logger", ".", "info", "(", "\"split {}: {}\"", ".", "format", "(", "split", ",", "len", "(", "examples", ")", ")", ")", "\n", "if", "split", "==", "\"adverb_1\"", ":", "\n", "                    ", "num_examples", "=", "len", "(", "examples", ")", "\n", "k_random_indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "num_examples", ")", ",", "k", "=", "k", ")", "\n", "", "else", ":", "\n", "                    ", "k_random_indices", "=", "[", "]", "\n", "", "for", "i", ",", "example", "in", "enumerate", "(", "examples", ")", ":", "\n", "                    ", "if", "i", "in", "k_random_indices", ":", "\n", "                        ", "dataset", ".", "_data_pairs", "[", "\"train\"", "]", ".", "append", "(", "example", ")", "\n", "dataset", ".", "update_data_statistics", "(", "example", ",", "\"train\"", ")", "\n", "dataset", ".", "_data_pairs", "[", "\"dev\"", "]", ".", "append", "(", "example", ")", "\n", "dataset", ".", "update_data_statistics", "(", "example", ",", "\"dev\"", ")", "\n", "", "else", ":", "\n", "                        ", "dataset", ".", "_data_pairs", "[", "split", "]", ".", "append", "(", "example", ")", "\n", "dataset", ".", "update_data_statistics", "(", "example", ",", "split", ")", "\n", "", "", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.generate_all_commands": [[530, 532], ["dataset.GroundedScan._grammar.generate_all_commands"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.generate_all_commands"], ["", "", "def", "generate_all_commands", "(", "self", ")", "->", "{", "}", ":", "\n", "        ", "self", ".", "_grammar", ".", "generate_all_commands", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.sample_command": [[533, 543], ["dataset.GroundedScan._grammar.sample", "dataset.GroundedScan.meaning", "dataset.GroundedScan._grammar.is_coherent"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.sample", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.is_coherent"], ["", "def", "sample_command", "(", "self", ")", "->", "Tuple", "[", "Derivation", ",", "list", "]", ":", "\n", "        ", "coherent", "=", "False", "\n", "while", "not", "coherent", ":", "\n", "            ", "command", "=", "self", ".", "_grammar", ".", "sample", "(", ")", "\n", "arguments", "=", "[", "]", "\n", "meaning", "=", "command", ".", "meaning", "(", "arguments", ")", "\n", "if", "not", "self", ".", "_grammar", ".", "is_coherent", "(", "meaning", ")", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "return", "command", ",", "arguments", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_target_commands": [[544, 563], ["dataset.GroundedScan._world.get_current_situation", "dataset.GroundedScan.initialize_world", "dataset.GroundedScan._world.get_current_observations", "dataset.GroundedScan._world.clear_situation", "dataset.GroundedScan.initialize_world", "dataset.GroundedScan._world.execute_command"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_observations", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.execute_command"], ["", "", "", "def", "demonstrate_target_commands", "(", "self", ",", "command", ":", "str", ",", "initial_situation", ":", "Situation", ",", "\n", "target_commands", ":", "List", "[", "str", "]", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "Situation", "]", ",", "int", ",", "int", "]", ":", "\n", "        ", "\"\"\"Executes a sequence of commands starting from initial_situation.\"\"\"", "\n", "current_situation", "=", "self", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "self", ".", "_world", ".", "mission", "\n", "\n", "# Initialize the world based on the initial situation and the command.", "\n", "self", ".", "initialize_world", "(", "initial_situation", ",", "mission", "=", "command", ")", "\n", "\n", "for", "target_command", "in", "target_commands", ":", "\n", "            ", "self", ".", "_world", ".", "execute_command", "(", "target_command", ")", "\n", "\n", "", "target_commands", ",", "target_demonstration", "=", "self", ".", "_world", ".", "get_current_observations", "(", ")", "\n", "end_column", ",", "end_row", "=", "self", ".", "_world", ".", "agent_pos", "\n", "self", ".", "_world", ".", "clear_situation", "(", ")", "\n", "\n", "# Re-initialize the world as before the command", "\n", "self", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "return", "target_commands", ",", "target_demonstration", ",", "end_column", ",", "end_row", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_command": [[564, 651], ["derivation.meaning", "dataset.GroundedScan._world.get_current_situation", "dataset.GroundedScan.initialize_world", "GroundedScan.helpers.topo_sort", "dataset.GroundedScan._world.get_current_observations", "dataset.GroundedScan._world.clear_situation", "dataset.GroundedScan.initialize_world", "derivation.words", "derivation.meaning.select", "derivation.meaning.select.select", "manner.pop", "len", "len", "derivation.meaning.select.select", "logical_form.select.select.to_predicate", "random.sample().pop", "dataset.GroundedScan._world.go_to_position", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._world.has_object", "len", "logger.info", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._world.move_object_to_wall", "dataset.GroundedScan._world.object_positions", "random.sample", "dataset.GroundedScan._vocabulary.translate_word", "len", "object_str.split"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.topo_sort", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_observations", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.select", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.select", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.select", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.to_predicate", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.go_to_position", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.has_object", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.move_object_to_wall", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.object_positions", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.sample", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "demonstrate_command", "(", "self", ",", "derivation", ":", "Derivation", ",", "initial_situation", ":", "Situation", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "\n", "List", "[", "Situation", "]", ",", "str", "]", ":", "\n", "        ", "\"\"\"\n        Demonstrate a command derivation and situation pair. Done by extracting the events from the logical form\n        of the command derivation, extracting the arguments of each event. The argument of the event gets located in the\n        situation of the world and the path to that target gets calculated. Based on whether the verb in the command is\n        transitive or not, the agent interacts with the object.\n        :param derivation:\n        :param initial_situation:\n        :returns\n        \"\"\"", "\n", "command", "=", "' '", ".", "join", "(", "derivation", ".", "words", "(", ")", ")", "\n", "arguments", "=", "[", "]", "\n", "logical_form", "=", "derivation", ".", "meaning", "(", "arguments", ")", "\n", "current_situation", "=", "self", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "self", ".", "_world", ".", "mission", "\n", "\n", "# Initialize the world based on the initial situation and the command.", "\n", "self", ".", "initialize_world", "(", "initial_situation", ",", "mission", "=", "command", ")", "\n", "\n", "# Extract all present events in the current command and order them by constraints.", "\n", "events", "=", "[", "variable", "for", "variable", "in", "logical_form", ".", "variables", "if", "variable", ".", "sem_type", "==", "EVENT", "]", "\n", "seq_constraints", "=", "[", "term", ".", "arguments", "for", "term", "in", "logical_form", ".", "terms", "if", "term", ".", "function", "==", "\"seq\"", "]", "\n", "ordered_events", "=", "topo_sort", "(", "events", ",", "seq_constraints", ")", "\n", "\n", "# Loop over the events to get the demonstrations.", "\n", "action", "=", "None", "\n", "for", "event", "in", "ordered_events", ":", "\n", "\n", "# Get the logical form of the current event", "\n", "            ", "sub_logical_form", "=", "logical_form", ".", "select", "(", "[", "event", "]", ",", "exclude", "=", "{", "\"seq\"", "}", ")", "\n", "event_lf", "=", "sub_logical_form", ".", "select", "(", "[", "event", "]", ",", "exclude", "=", "{", "\"patient\"", "}", ")", "\n", "args", "=", "[", "term", ".", "arguments", "[", "1", "]", "for", "term", "in", "sub_logical_form", ".", "terms", "if", "term", ".", "function", "==", "\"patient\"", "]", "\n", "\n", "# Find the action verb if it exists.", "\n", "is_transitive", "=", "False", "\n", "if", "event_lf", ".", "head", ".", "sem_type", "==", "EVENT", ":", "\n", "                ", "for", "term", "in", "event_lf", ".", "terms", ":", "\n", "                    ", "if", "term", ".", "specs", ".", "action", ":", "\n", "                        ", "action", "=", "term", ".", "specs", ".", "action", "\n", "is_transitive", "=", "term", ".", "specs", ".", "is_transitive", "\n", "\n", "# Find the manner adverb if it exists.", "\n", "", "", "", "manner", "=", "[", "term", ".", "specs", ".", "manner", "for", "term", "in", "event_lf", ".", "terms", "if", "term", ".", "specs", ".", "manner", "]", "\n", "manner", "=", "manner", ".", "pop", "(", ")", "if", "manner", "else", "None", "\n", "assert", "len", "(", "args", ")", "<=", "1", ",", "\"Only one target object supported, but two arguments parsed in a derivation.\"", "\n", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "# Find the logical form of the argument of the verb and find its location.", "\n", "                ", "arg_logical_form", "=", "sub_logical_form", ".", "select", "(", "[", "args", "[", "0", "]", "]", ")", "\n", "object_str", ",", "object_predicate", "=", "arg_logical_form", ".", "to_predicate", "(", ")", "\n", "\n", "# If no location is passed, find the target object there.", "\n", "if", "not", "initial_situation", ".", "target_object", ":", "\n", "                    ", "translated_object_str", "=", "' '", ".", "join", "(", "[", "self", ".", "_vocabulary", ".", "translate_word", "(", "word", ")", "for", "word", "in", "object_str", ".", "split", "(", ")", "]", ")", "\n", "translated_object_size", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "object_predicate", "[", "\"size\"", "]", ")", "\n", "if", "self", ".", "_world", ".", "has_object", "(", "translated_object_str", ")", ":", "\n", "                        ", "object_locations", "=", "self", ".", "_world", ".", "object_positions", "(", "translated_object_str", ",", "\n", "object_size", "=", "translated_object_size", ")", "\n", "", "else", ":", "\n", "                        ", "object_locations", "=", "{", "}", "\n", "# Else we have saved the target location when we generated the situation.", "\n", "", "", "else", ":", "\n", "                    ", "object_locations", "=", "[", "initial_situation", ".", "target_object", ".", "position", "]", "\n", "\n", "", "if", "len", "(", "object_locations", ")", ">", "1", ":", "\n", "                    ", "logger", ".", "info", "(", "\"WARNING: {} possible target locations.\"", ".", "format", "(", "len", "(", "object_locations", ")", ")", ")", "\n", "", "if", "not", "object_locations", ":", "\n", "                    ", "continue", "\n", "", "goal", "=", "random", ".", "sample", "(", "object_locations", ",", "1", ")", ".", "pop", "(", ")", "\n", "if", "not", "is_transitive", ":", "\n", "                    ", "primitive_command", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "action", ")", "\n", "", "else", ":", "\n", "                    ", "primitive_command", "=", "\"walk\"", "\n", "\n", "", "self", ".", "_world", ".", "go_to_position", "(", "position", "=", "goal", ",", "manner", "=", "manner", ",", "primitive_command", "=", "primitive_command", ")", "\n", "\n", "# Interact with the object for transitive verbs.", "\n", "if", "is_transitive", ":", "\n", "                    ", "semantic_action", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "action", ")", "\n", "self", ".", "_world", ".", "move_object_to_wall", "(", "action", "=", "semantic_action", ",", "manner", "=", "manner", ")", "\n", "\n", "", "", "", "target_commands", ",", "target_demonstration", "=", "self", ".", "_world", ".", "get_current_observations", "(", ")", "\n", "self", ".", "_world", ".", "clear_situation", "(", ")", "\n", "\n", "# Re-initialize the world as before the command", "\n", "self", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "return", "target_commands", ",", "target_demonstration", ",", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world": [[652, 666], ["dataset.GroundedScan._world.initialize", "objects.append", "dataset.GroundedScan._world.set_mission"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.initialize", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.set_mission"], ["", "def", "initialize_world", "(", "self", ",", "situation", ":", "Situation", ",", "mission", "=", "\"\"", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"\n        Initializes the world with the passed situation.\n        :param situation: class describing the current situation in the world, fully determined by a grid size,\n        agent position, agent direction, list of placed objects, an optional target object and optional carrying object.\n        :param mission: a string defining a command (e.g. \"Walk to a green circle.\")\n        \"\"\"", "\n", "objects", "=", "[", "]", "\n", "for", "positioned_object", "in", "situation", ".", "placed_objects", ":", "\n", "            ", "objects", ".", "append", "(", "(", "positioned_object", ".", "object", ",", "positioned_object", ".", "position", ")", ")", "\n", "", "self", ".", "_world", ".", "initialize", "(", "objects", ",", "agent_position", "=", "situation", ".", "agent_pos", ",", "agent_direction", "=", "situation", ".", "agent_direction", ",", "\n", "target_object", "=", "situation", ".", "target_object", ",", "carrying", "=", "situation", ".", "carrying", ")", "\n", "if", "mission", ":", "\n", "            ", "self", ".", "_world", ".", "set_mission", "(", "mission", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.visualize_attention": [[667, 670], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "visualize_attention", "(", "self", ",", "input_commands", ":", "List", "[", "str", "]", ",", "target_commands", ":", "List", "[", "str", "]", ",", "situation", ":", "Situation", ",", "\n", "attention_weights_commands", ":", "List", "[", "List", "[", "int", "]", "]", ",", "attention_weights_situation", ":", "List", "[", "List", "[", "int", "]", "]", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.error_analysis": [[671, 826], ["os.path.exists", "xlwt.Workbook", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "open", "json.load", "logger.info", "open", "outfile.write", "outfile.write", "outfile.write", "collections.Counter", "outfile.write", "outfile.write", "error_analysis.items", "xlwt.Workbook.save", "all_accuracies.append", "exact_matches.append", "numpy.array.append", "dataset.GroundedScan.parse_derivation_repr", "dataset.GroundedScan.meaning", "arguments.pop().to_predicate", "dataset.GroundedScan.words", "dataset.GroundedScan._vocabulary.translate_word", "len", "GroundedScan.world.Situation.from_representation", "error_analysis.keys", "xlwt.Workbook.add_sheet", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "outfile.write", "enumerate", "outfile.write", "GroundedScan.helpers.bar_plot", "GroundedScan.helpers.bar_plot", "GroundedScan.helpers.bar_plot", "GroundedScan.helpers.grouped_bar_plot", "len", "len", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "[].append", "[].append", "[].append", "numpy.mean", "numpy.mean", "values.items", "outfile.write", "numpy.array", "numpy.mean", "numpy.array", "numpy.mean", "len", "numpy.std", "numpy.std", "collections.Counter", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "outfile.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "xlwt.Workbook.add_sheet.write", "output_file.split", "arguments.pop", "dataset.GroundedScan._vocabulary.get_adverbs", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "str", "numpy.array", "numpy.array", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_derivation_repr", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.to_predicate", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.from_representation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.bar_plot", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.grouped_bar_plot", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_adverbs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "error_analysis", "(", "self", ",", "predictions_file", ":", "str", ",", "output_file", ":", "str", ",", "save_directory", ":", "str", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "predictions_file", ")", ",", "\"Trying to open a non-existing predictions file.\"", "\n", "error_analysis", "=", "{", "\n", "\"target_length\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"input_length\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"verb_in_command\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"manner\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"referred_target\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"referred_size\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"distance_to_target\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"direction_to_target\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "\"actual_target\"", ":", "defaultdict", "(", "lambda", ":", "{", "\"accuracy\"", ":", "[", "]", ",", "\"exact_match\"", ":", "[", "]", ",", "\"position_accuracy\"", ":", "[", "]", "}", ")", ",", "\n", "}", "\n", "all_accuracies", "=", "[", "]", "\n", "exact_matches", "=", "[", "]", "\n", "position_accuracies", "=", "[", "]", "\n", "workbook", "=", "Workbook", "(", ")", "\n", "with", "open", "(", "predictions_file", ",", "'r'", ")", "as", "infile", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "infile", ")", "\n", "logger", ".", "info", "(", "\"Running error analysis on {} examples.\"", ".", "format", "(", "len", "(", "data", ")", ")", ")", "\n", "for", "predicted_example", "in", "data", ":", "\n", "\n", "# Get the scores of the current example.", "\n", "                ", "accuracy", "=", "predicted_example", "[", "\"accuracy\"", "]", "\n", "exact_match", "=", "predicted_example", "[", "\"exact_match\"", "]", "\n", "position_accuracy", "=", "predicted_example", "[", "\"position_accuracy\"", "]", "\n", "\n", "all_accuracies", ".", "append", "(", "accuracy", ")", "\n", "exact_matches", ".", "append", "(", "exact_match", ")", "\n", "position_accuracies", ".", "append", "(", "position_accuracy", ")", "\n", "# Get the information about the current example.", "\n", "example_information", "=", "{", "\n", "\"input_length\"", ":", "len", "(", "predicted_example", "[", "\"input\"", "]", ")", ",", "\n", "\"verb_in_command\"", ":", "self", ".", "_vocabulary", ".", "translate_word", "(", "predicted_example", "[", "\"input\"", "]", "[", "0", "]", ")", "}", "\n", "derivation", "=", "self", ".", "parse_derivation_repr", "(", "predicted_example", "[", "\"derivation\"", "]", "[", "0", "]", ")", "\n", "arguments", "=", "[", "]", "\n", "derivation", ".", "meaning", "(", "arguments", ")", "\n", "target_str", ",", "target_predicate", "=", "arguments", ".", "pop", "(", ")", ".", "to_predicate", "(", ")", "\n", "adverb", "=", "\"\"", "\n", "for", "word", "in", "derivation", ".", "words", "(", ")", ":", "\n", "                    ", "if", "word", "in", "self", ".", "_vocabulary", ".", "get_adverbs", "(", ")", ":", "\n", "                        ", "adverb", "=", "word", "\n", "", "", "manner", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "adverb", ")", "\n", "example_information", "[", "\"referred_target\"", "]", "=", "' '", ".", "join", "(", "[", "\n", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"size\"", "]", ")", ",", "\n", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"color\"", "]", ")", ",", "\n", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"noun\"", "]", ")", "]", ")", "\n", "if", "target_predicate", "[", "\"size\"", "]", ":", "\n", "                    ", "example_information", "[", "\"referred_size\"", "]", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"size\"", "]", ")", "\n", "", "else", ":", "\n", "                    ", "example_information", "[", "\"referred_size\"", "]", "=", "\"None\"", "\n", "", "example_information", "[", "\"target_length\"", "]", "=", "len", "(", "predicted_example", "[", "\"target\"", "]", ")", "\n", "situation_repr", "=", "predicted_example", "[", "\"situation\"", "]", "\n", "situation", "=", "Situation", ".", "from_representation", "(", "situation_repr", "[", "0", "]", ")", "\n", "example_information", "[", "\"actual_target\"", "]", "=", "' '", ".", "join", "(", "[", "str", "(", "situation", ".", "target_object", ".", "object", ".", "size", ")", ",", "\n", "situation", ".", "target_object", ".", "object", ".", "color", ",", "\n", "situation", ".", "target_object", ".", "object", ".", "shape", "]", ")", "\n", "example_information", "[", "\"direction_to_target\"", "]", "=", "situation", ".", "direction_to_target", "\n", "example_information", "[", "\"distance_to_target\"", "]", "=", "situation", ".", "distance_to_target", "\n", "example_information", "[", "\"manner\"", "]", "=", "manner", "\n", "# Add that information to the analysis.", "\n", "for", "key", "in", "error_analysis", ".", "keys", "(", ")", ":", "\n", "                    ", "error_analysis", "[", "key", "]", "[", "example_information", "[", "key", "]", "]", "[", "\"accuracy\"", "]", ".", "append", "(", "accuracy", ")", "\n", "error_analysis", "[", "key", "]", "[", "example_information", "[", "key", "]", "]", "[", "\"exact_match\"", "]", ".", "append", "(", "exact_match", ")", "\n", "error_analysis", "[", "key", "]", "[", "example_information", "[", "key", "]", "]", "[", "\"position_accuracy\"", "]", ".", "append", "(", "position_accuracy", ")", "\n", "\n", "# Write the information to a file and make plots", "\n", "", "", "", "with", "open", "(", "output_file", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "write", "(", "\"Error Analysis\\n\\n\"", ")", "\n", "outfile", ".", "write", "(", "\" Mean accuracy: {}\\n\"", ".", "format", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "all_accuracies", ")", ")", ")", ")", "\n", "outfile", ".", "write", "(", "\" Mean position accuracy: {}\\n\"", ".", "format", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "position_accuracies", ")", ")", ")", ")", "\n", "exact_matches_counter", "=", "Counter", "(", "exact_matches", ")", "\n", "outfile", ".", "write", "(", "\" Num. exact matches: {}\\n\"", ".", "format", "(", "exact_matches_counter", "[", "True", "]", ")", ")", "\n", "outfile", ".", "write", "(", "\" Num not exact matches: {}\\n\\n\"", ".", "format", "(", "exact_matches_counter", "[", "False", "]", ")", ")", "\n", "\n", "for", "key", ",", "values", "in", "error_analysis", ".", "items", "(", ")", ":", "\n", "                ", "sheet", "=", "workbook", ".", "add_sheet", "(", "key", ")", "\n", "sheet", ".", "write", "(", "0", ",", "0", ",", "key", ")", "\n", "sheet", ".", "write", "(", "0", ",", "1", ",", "\"Num examples\"", ")", "\n", "sheet", ".", "write", "(", "0", ",", "2", ",", "\"Mean accuracy\"", ")", "\n", "sheet", ".", "write", "(", "0", ",", "3", ",", "\"Std. accuracy\"", ")", "\n", "\n", "sheet", ".", "write", "(", "0", ",", "5", ",", "\"Mean position accuracy\"", ")", "\n", "\n", "sheet", ".", "write", "(", "0", ",", "6", ",", "\"Exact Match\"", ")", "\n", "sheet", ".", "write", "(", "0", ",", "7", ",", "\"Not Exact Match\"", ")", "\n", "sheet", ".", "write", "(", "0", ",", "8", ",", "\"Exact Match Percentage\"", ")", "\n", "outfile", ".", "write", "(", "\"\\nDimension {}\\n\\n\"", ".", "format", "(", "key", ")", ")", "\n", "means", "=", "{", "}", "\n", "position_means", "=", "{", "}", "\n", "standard_deviations", "=", "{", "}", "\n", "position_standard_deviations", "=", "{", "}", "\n", "num_examples", "=", "{", "}", "\n", "exact_match_distributions", "=", "{", "}", "\n", "exact_match_relative_distributions", "=", "{", "}", "\n", "\n", "for", "i", ",", "(", "item_key", ",", "item_values", ")", "in", "enumerate", "(", "values", ".", "items", "(", ")", ")", ":", "\n", "                    ", "outfile", ".", "write", "(", "\"  {}:{}\\n\\n\"", ".", "format", "(", "key", ",", "item_key", ")", ")", "\n", "accuracies", "=", "np", ".", "array", "(", "item_values", "[", "\"accuracy\"", "]", ")", "\n", "mean_accuracy", "=", "np", ".", "mean", "(", "accuracies", ")", "\n", "means", "[", "item_key", "]", "=", "mean_accuracy", "\n", "\n", "position_accuracies", "=", "np", ".", "array", "(", "item_values", "[", "\"position_accuracy\"", "]", ")", "\n", "mean_position_accuracy", "=", "np", ".", "mean", "(", "position_accuracies", ")", "\n", "position_means", "[", "item_key", "]", "=", "mean_position_accuracy", "\n", "\n", "num_examples", "[", "item_key", "]", "=", "len", "(", "item_values", "[", "\"accuracy\"", "]", ")", "\n", "standard_deviation", "=", "np", ".", "std", "(", "accuracies", ")", "\n", "standard_deviations", "[", "item_key", "]", "=", "standard_deviation", "\n", "\n", "position_standard_deviation", "=", "np", ".", "std", "(", "position_accuracies", ")", "\n", "position_standard_deviations", "[", "item_key", "]", "=", "position_standard_deviation", "\n", "exact_match_distribution", "=", "Counter", "(", "item_values", "[", "\"exact_match\"", "]", ")", "\n", "exact_match_distributions", "[", "item_key", "]", "=", "exact_match_distribution", "\n", "exact_match_relative_distributions", "[", "item_key", "]", "=", "exact_match_distribution", "[", "True", "]", "/", "(", "\n", "exact_match_distribution", "[", "False", "]", "+", "exact_match_distribution", "[", "True", "]", ")", "\n", "outfile", ".", "write", "(", "\"    Num. examples: {}\\n\"", ".", "format", "(", "len", "(", "item_values", "[", "\"accuracy\"", "]", ")", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Mean accuracy: {}\\n\"", ".", "format", "(", "mean_accuracy", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Min. accuracy: {}\\n\"", ".", "format", "(", "np", ".", "min", "(", "accuracies", ")", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Max. accuracy: {}\\n\"", ".", "format", "(", "np", ".", "max", "(", "accuracies", ")", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Std. accuracy: {}\\n\"", ".", "format", "(", "standard_deviation", ")", ")", "\n", "\n", "outfile", ".", "write", "(", "\"    Mean position accuracy: {}\\n\"", ".", "format", "(", "mean_position_accuracy", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Min. accuracy: {}\\n\"", ".", "format", "(", "np", ".", "min", "(", "position_accuracies", ")", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Max. accuracy: {}\\n\"", ".", "format", "(", "np", ".", "max", "(", "position_accuracies", ")", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Std. accuracy: {}\\n\"", ".", "format", "(", "position_standard_deviation", ")", ")", "\n", "\n", "outfile", ".", "write", "(", "\"    Num. exact match: {}\\n\"", ".", "format", "(", "exact_match_distribution", "[", "True", "]", ")", ")", "\n", "outfile", ".", "write", "(", "\"    Num. not exact match: {}\\n\\n\"", ".", "format", "(", "exact_match_distribution", "[", "False", "]", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "0", ",", "item_key", ")", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "1", ",", "len", "(", "item_values", "[", "\"accuracy\"", "]", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "2", ",", "mean_accuracy", ")", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "3", ",", "standard_deviation", ")", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "4", ",", "exact_match_distribution", "[", "True", "]", ")", "\n", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "5", ",", "mean_position_accuracy", ")", "\n", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "6", ",", "exact_match_distribution", "[", "False", "]", ")", "\n", "sheet", ".", "write", "(", "i", "+", "1", ",", "7", ",", "exact_match_distribution", "[", "True", "]", "/", "(", "\n", "exact_match_distribution", "[", "False", "]", "+", "exact_match_distribution", "[", "True", "]", ")", ")", "\n", "", "outfile", ".", "write", "(", "\"\\n\\n\\n\"", ")", "\n", "bar_plot", "(", "means", ",", "title", "=", "key", ",", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "key", "+", "'_accuracy'", ")", ",", "\n", "errors", "=", "standard_deviations", ",", "y_axis_label", "=", "\"accuracy\"", ")", "\n", "bar_plot", "(", "position_means", ",", "title", "=", "key", ",", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "key", "+", "'_position_accuracy'", ")", ",", "\n", "errors", "=", "position_standard_deviations", ",", "y_axis_label", "=", "\"position_accuracy\"", ")", "\n", "\n", "bar_plot", "(", "exact_match_relative_distributions", ",", "title", "=", "key", ",", "save_path", "=", "os", ".", "path", ".", "join", "(", "\n", "save_directory", ",", "key", "+", "'_exact_match_rel'", ")", ",", "\n", "errors", "=", "{", "}", ",", "y_axis_label", "=", "\"Exact Match Percentage\"", ")", "\n", "grouped_bar_plot", "(", "values", "=", "exact_match_distributions", ",", "group_one_key", "=", "True", ",", "group_two_key", "=", "False", ",", "\n", "title", "=", "key", "+", "' Exact Matches'", ",", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "\n", "key", "+", "'_exact_match'", ")", ",", "\n", "sort_on_key", "=", "True", ")", "\n", "", "outfile_excel", "=", "output_file", ".", "split", "(", "\".txt\"", ")", "[", "0", "]", "+", "\".xls\"", "\n", "workbook", ".", "save", "(", "outfile_excel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.position_analysis": [[827, 889], ["os.path.exists", "open", "json.load", "workbook.add_sheet", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "enumerate", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "GroundedScan.world.Situation.from_representation", "dataset.GroundedScan.demonstrate_target_commands", "dataset.GroundedScan.demonstrate_target_commands", "[].split", "dataset.GroundedScan._vocabulary.translate_word", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "workbook.add_sheet.write", "int", "int", "int", "int", "int", "int", "int", "int", "[].split", "predictions_file.split"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.from_representation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_target_commands", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_target_commands", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write"], ["", "", "def", "position_analysis", "(", "self", ",", "predictions_file", ":", "str", ",", "workbook", "=", "None", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"For each prediction in a file visualizes it in a gif and writes to self.save_directory.\"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "predictions_file", ")", ",", "\"Trying to open a non-existing predictions file.\"", "\n", "with", "open", "(", "predictions_file", ",", "'r'", ")", "as", "infile", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "infile", ")", "\n", "save_dirs", "=", "[", "]", "\n", "sheet", "=", "workbook", ".", "add_sheet", "(", "predictions_file", ".", "split", "(", "\"/\"", ")", "[", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "\n", "sheet", ".", "write", "(", "0", ",", "0", ",", "\"Col Matches\"", ")", "\n", "sheet", ".", "write", "(", "0", ",", "1", ",", "\"Row Matches\"", ")", "\n", "sheet", ".", "write", "(", "0", ",", "2", ",", "\"Full Match\"", ")", "\n", "sheet", ".", "write", "(", "0", ",", "3", ",", "\"No Match\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "0", ",", "\"pred col\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "1", ",", "\"actual col\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "2", ",", "\"match\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "3", ",", "\"pred row\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "4", ",", "\"actual row\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "5", ",", "\"match\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "6", ",", "\"full match\"", ")", "\n", "sheet", ".", "write", "(", "2", ",", "7", ",", "\"no match\"", ")", "\n", "col_matches", "=", "0", "\n", "row_matches", "=", "0", "\n", "full_matches", "=", "0", "\n", "no_matches", "=", "0", "\n", "for", "i", ",", "predicted_example", "in", "enumerate", "(", "data", ")", ":", "\n", "                ", "command", "=", "predicted_example", "[", "\"input\"", "]", "\n", "prediction", "=", "predicted_example", "[", "\"prediction\"", "]", "\n", "target", "=", "predicted_example", "[", "\"target\"", "]", "\n", "meaning", "=", "[", "self", ".", "_vocabulary", ".", "translate_word", "(", "word", ")", "for", "word", "in", "command", "]", "\n", "situation_repr", "=", "predicted_example", "[", "\"situation\"", "]", "\n", "situation", "=", "Situation", ".", "from_representation", "(", "situation_repr", "[", "0", "]", ")", "\n", "(", "predicted_commands", ",", "predicted_demonstration", ",", "\n", "predicted_end_column", ",", "predicted_end_row", ")", "=", "self", ".", "demonstrate_target_commands", "(", "\n", "command", ",", "situation", ",", "target_commands", "=", "prediction", ")", "\n", "(", "target_commands", ",", "target_demonstration", ",", "\n", "actual_end_column", ",", "actual_end_row", ")", "=", "self", ".", "demonstrate_target_commands", "(", "\n", "command", ",", "situation", ",", "target_commands", "=", "target", ")", "\n", "col_match", "=", "predicted_end_column", "==", "actual_end_column", "\n", "row_match", "=", "predicted_end_row", "==", "actual_end_row", "\n", "full_match", "=", "col_match", "and", "row_match", "\n", "no_match", "=", "not", "col_match", "and", "not", "row_match", "\n", "if", "i", "<", "2000", ":", "\n", "                    ", "sheet", ".", "write", "(", "i", "+", "3", ",", "0", ",", "int", "(", "predicted_end_column", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "3", ",", "1", ",", "int", "(", "actual_end_column", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "3", ",", "2", ",", "int", "(", "col_match", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "3", ",", "3", ",", "int", "(", "predicted_end_row", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "3", ",", "4", ",", "int", "(", "actual_end_row", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "3", ",", "5", ",", "int", "(", "row_match", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "3", ",", "6", ",", "int", "(", "full_match", ")", ")", "\n", "sheet", ".", "write", "(", "i", "+", "3", ",", "7", ",", "int", "(", "no_match", ")", ")", "\n", "", "if", "col_match", ":", "\n", "                    ", "col_matches", "+=", "1", "\n", "", "if", "row_match", ":", "\n", "                    ", "row_matches", "+=", "1", "\n", "", "if", "full_match", ":", "\n", "                    ", "full_matches", "+=", "1", "\n", "", "if", "no_match", ":", "\n", "                    ", "no_matches", "+=", "1", "\n", "", "", "sheet", ".", "write", "(", "1", ",", "0", ",", "col_matches", ")", "\n", "sheet", ".", "write", "(", "1", ",", "1", ",", "row_matches", ")", "\n", "sheet", ".", "write", "(", "1", ",", "2", ",", "full_matches", ")", "\n", "sheet", ".", "write", "(", "1", ",", "3", ",", "no_matches", ")", "\n", "", "return", "save_dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.visualize_prediction": [[890, 926], ["os.path.exists", "open", "json.load", "enumerate", "GroundedScan.world.Situation.from_representation", "dataset.GroundedScan.demonstrate_target_commands", "dataset.GroundedScan.demonstrate_target_commands", "dataset.GroundedScan.visualize_command", "save_dirs.append", "dataset.GroundedScan._vocabulary.translate_word"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.load", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.from_representation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_target_commands", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_target_commands", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.visualize_command", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "visualize_prediction", "(", "self", ",", "predictions_file", ":", "str", ",", "folder", "=", "None", ",", "only_save_errors", "=", "False", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"For each prediction in a file visualizes it in a gif and writes to self.save_directory.\"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "predictions_file", ")", ",", "\"Trying to open a non-existing predictions file.\"", "\n", "with", "open", "(", "predictions_file", ",", "'r'", ")", "as", "infile", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "infile", ")", "\n", "save_dirs", "=", "[", "]", "\n", "for", "i", ",", "predicted_example", "in", "enumerate", "(", "data", ")", ":", "\n", "                ", "command", "=", "predicted_example", "[", "\"input\"", "]", "\n", "prediction", "=", "predicted_example", "[", "\"prediction\"", "]", "\n", "target", "=", "predicted_example", "[", "\"target\"", "]", "\n", "meaning", "=", "[", "self", ".", "_vocabulary", ".", "translate_word", "(", "word", ")", "for", "word", "in", "command", "]", "\n", "situation_repr", "=", "predicted_example", "[", "\"situation\"", "]", "\n", "situation", "=", "Situation", ".", "from_representation", "(", "situation_repr", ")", "\n", "(", "predicted_commands", ",", "predicted_demonstration", ",", "\n", "predicted_end_column", ",", "predicted_end_row", ")", "=", "self", ".", "demonstrate_target_commands", "(", "\n", "command", ",", "situation", ",", "target_commands", "=", "prediction", ")", "\n", "(", "target_commands", ",", "target_demonstration", ",", "\n", "actual_end_column", ",", "actual_end_row", ")", "=", "self", ".", "demonstrate_target_commands", "(", "\n", "command", ",", "situation", ",", "target_commands", "=", "target", ")", "\n", "str_command", "=", "' '", ".", "join", "(", "command", ")", "\n", "mission", "=", "' '", ".", "join", "(", "[", "\"Command:\"", ",", "str_command", ",", "\"\\nMeaning:\"", "]", "+", "meaning", "\n", "+", "[", "\"\\nPrediction\"", "]", "+", "predicted_example", "[", "\"prediction\"", "]", "\n", "+", "[", "\"\\n      Target:\"", "]", "+", "target_commands", ")", "\n", "if", "predicted_example", "[", "\"exact_match\"", "]", ":", "\n", "                    ", "if", "only_save_errors", ":", "\n", "                        ", "continue", "\n", "", "parent_save_dir", "=", "\"exact_matches\"", "\n", "", "else", ":", "\n", "                    ", "parent_save_dir", "=", "\"errors\"", "\n", "", "if", "folder", "is", "not", "None", ":", "\n", "                    ", "parent_save_dir", "=", "folder", "\n", "", "save_dir_prediction", "=", "self", ".", "visualize_command", "(", "\n", "situation", ",", "command", ",", "predicted_demonstration", ",", "mission", "=", "mission", ",", "parent_save_dir", "=", "parent_save_dir", ",", "\n", "attention_weights", "=", "predicted_example", "[", "\"attention_weights\"", "]", ")", "\n", "save_dirs", ".", "append", "(", "save_dir_prediction", ")", "\n", "", "", "return", "save_dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.visualize_data_example": [[927, 935], ["dataset.GroundedScan.parse_example", "dataset.GroundedScan.visualize_command"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_example", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.visualize_command"], ["", "def", "visualize_data_example", "(", "self", ",", "data_example", ":", "dict", ")", "->", "str", ":", "\n", "        ", "command", ",", "meaning", ",", "derivation", ",", "situation", ",", "actual_target_commands", ",", "target_demonstration", ",", "_", "=", "self", ".", "parse_example", "(", "\n", "data_example", ")", "\n", "mission", "=", "' '", ".", "join", "(", "[", "\"Command:\"", ",", "' '", ".", "join", "(", "command", ")", ",", "\"\\nMeaning: \"", ",", "' '", ".", "join", "(", "meaning", ")", ",", "\n", "\"\\nTarget:\"", "]", "+", "actual_target_commands", ")", "\n", "save_dir", "=", "self", ".", "visualize_command", "(", "situation", ",", "command", ",", "target_demonstration", ",", "\n", "mission", "=", "mission", ")", "\n", "return", "save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.visualize_data_examples": [[936, 944], ["len", "logger.info", "dataset.GroundedScan.visualize_data_example", "save_dirs.append"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.visualize_data_example"], ["", "def", "visualize_data_examples", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "if", "len", "(", "self", ".", "_examples_to_visualize", ")", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"No examples to visualize.\"", ")", "\n", "", "save_dirs", "=", "[", "]", "\n", "for", "data_example", "in", "self", ".", "_examples_to_visualize", ":", "\n", "            ", "save_dir", "=", "self", ".", "visualize_data_example", "(", "data_example", ")", "\n", "save_dirs", ".", "append", "(", "save_dir", ")", "\n", "", "return", "save_dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.visualize_command": [[945, 1018], ["dataset.GroundedScan._world.get_current_situation", "os.path.join", "os.path.join", "os.path.join", "dataset.GroundedScan.initialize_world", "dataset.GroundedScan._world.save_situation", "collections.defaultdict", "enumerate", "os.path.join", "imageio.mimsave", "collections.defaultdict.keys", "dataset.GroundedScan.initialize_world", "os.path.join", "os.path.exists", "os.mkdir", "os.listdir", "len", "os.path.exists", "os.mkdir", "os.path.join", "dataset.GroundedScan.initialize_world", "dataset.GroundedScan._world.save_situation", "filenames.append", "attention_weights.keys", "images.append", "os.path.join", "imageio.mimsave", "dataset.GroundedScan._vocabulary.translate_word", "os.path.exists", "os.mkdir", "os.path.join", "dataset.GroundedScan._world.save_situation", "att_files[].append", "dataset.GroundedScan._world.save_situation", "att_files[].append", "imageio.imread", "images.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "attention_weights.keys", "attention_weights.keys", "os.path.join", "imageio.imread", "numpy.array", "numpy.array", "str", "numpy.array", "str", "str"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.save_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.save_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.save_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.save_situation"], ["", "def", "visualize_command", "(", "self", ",", "initial_situation", ":", "Situation", ",", "command", ":", "List", "[", "str", "]", ",", "demonstration", ":", "List", "[", "Situation", "]", ",", "\n", "mission", ":", "str", ",", "parent_save_dir", "=", "\"\"", ",", "attention_weights", "=", "[", "]", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        :param initial_situation: (list of objects with their location, grid size, agent position)\n        :param command: command in natural language\n        :param demonstration: action sequence\n        :param mission: the string you want to display in the text box of the image\n        :param parent_save_dir: directory to save in, can be the instruction text separated by _'s\n        :param attention_weights: if filled, colors grid cells with higher values darker grey\n        :return: path_to_visualization\n        \"\"\"", "\n", "# Save current situation.", "\n", "current_situation", "=", "self", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "self", ".", "_world", ".", "mission", "\n", "\n", "# Initialize directory with current command as its name.", "\n", "mission_folder", "=", "'_'", ".", "join", "(", "[", "self", ".", "_vocabulary", ".", "translate_word", "(", "word", ")", "for", "word", "in", "command", "]", ")", "\n", "if", "parent_save_dir", ":", "\n", "            ", "mission_folder", "=", "os", ".", "path", ".", "join", "(", "parent_save_dir", ",", "mission_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "parent_save_dir", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "parent_save_dir", ")", ")", "\n", "", "", "full_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "mission_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "full_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "full_dir", ")", "\n", "file_count", "=", "0", "\n", "", "else", ":", "\n", "            ", "files_list", "=", "os", ".", "listdir", "(", "full_dir", ")", "\n", "file_count", "=", "len", "(", "files_list", ")", "\n", "", "mission_folder", "=", "os", ".", "path", ".", "join", "(", "mission_folder", ",", "\"situation_{}\"", ".", "format", "(", "file_count", ")", ")", "\n", "final_dir", "=", "os", ".", "path", ".", "join", "(", "full_dir", ",", "\"situation_{}\"", ".", "format", "(", "file_count", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "final_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "final_dir", ")", "\n", "\n", "# Visualize command.", "\n", "", "self", ".", "initialize_world", "(", "initial_situation", ",", "mission", "=", "mission", ")", "\n", "save_location", "=", "self", ".", "_world", ".", "save_situation", "(", "os", ".", "path", ".", "join", "(", "mission_folder", ",", "'initial.png'", ")", ")", "\n", "filenames", "=", "[", "save_location", "]", "\n", "att_files", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "situation", "in", "enumerate", "(", "demonstration", ")", ":", "\n", "            ", "self", ".", "initialize_world", "(", "situation", ",", "mission", "=", "mission", ")", "\n", "save_location", "=", "self", ".", "_world", ".", "save_situation", "(", "os", ".", "path", ".", "join", "(", "mission_folder", ",", "'situation_'", "+", "str", "(", "i", ")", "+", "'.png'", ")", ")", "\n", "filenames", ".", "append", "(", "save_location", ")", "\n", "for", "key", "in", "attention_weights", ".", "keys", "(", ")", ":", "\n", "                ", "save_location", "=", "self", ".", "_world", ".", "save_situation", "(", "os", ".", "path", ".", "join", "(", "mission_folder", ",", "\n", "'att_'", "+", "key", "+", "'_'", "+", "str", "(", "i", ")", "+", "'.png'", ")", ",", "\n", "attention_weights", "=", "np", ".", "array", "(", "attention_weights", "[", "key", "]", "[", "i", "]", ")", ")", "\n", "att_files", "[", "key", "]", ".", "append", "(", "save_location", ")", "\n", "# visualize size ordering", "\n", "", "if", "'big'", "in", "attention_weights", ".", "keys", "(", ")", "and", "'small'", "in", "attention_weights", ".", "keys", "(", ")", ":", "\n", "                ", "key", "=", "'size_order'", "\n", "att_size", "=", "(", "-", "np", ".", "array", "(", "attention_weights", "[", "'small'", "]", "[", "i", "]", ")", "+", "np", ".", "array", "(", "attention_weights", "[", "'big'", "]", "[", "i", "]", ")", ")", "/", "2.", "\n", "save_location", "=", "self", ".", "_world", ".", "save_situation", "(", "os", ".", "path", ".", "join", "(", "mission_folder", ",", "\n", "'att_'", "+", "key", "+", "'_'", "+", "str", "(", "i", ")", "+", "'.png'", ")", ",", "\n", "attention_weights", "=", "att_size", ")", "\n", "att_files", "[", "key", "]", ".", "append", "(", "save_location", ")", "\n", "\n", "# Make a gif of the action sequence.", "\n", "", "", "images", "=", "[", "]", "\n", "for", "filename", "in", "filenames", ":", "\n", "            ", "images", ".", "append", "(", "imageio", ".", "imread", "(", "filename", ")", ")", "\n", "", "movie_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "mission_folder", ")", "\n", "imageio", ".", "mimsave", "(", "os", ".", "path", ".", "join", "(", "movie_dir", ",", "'movie.gif'", ")", ",", "images", ",", "fps", "=", "5", ")", "\n", "for", "word", "in", "att_files", ".", "keys", "(", ")", ":", "\n", "            ", "images", "=", "[", "]", "\n", "for", "filename", "in", "att_files", "[", "word", "]", ":", "\n", "                ", "images", ".", "append", "(", "imageio", ".", "imread", "(", "filename", ")", ")", "\n", "", "imageio", ".", "mimsave", "(", "os", ".", "path", ".", "join", "(", "movie_dir", ",", "'movie_'", "+", "word", "+", "'.gif'", ")", ",", "images", ",", "fps", "=", "5", ")", "\n", "\n", "# Restore situation.", "\n", "", "self", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "\n", "return", "movie_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.generate_possible_targets": [[1019, 1041], ["list", "itertools.product", "ValueError"], "methods", ["None"], ["", "def", "generate_possible_targets", "(", "self", ",", "referred_size", ":", "str", ",", "referred_color", ":", "str", ",", "referred_shape", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Generate a list of possible target objects based on some target referred to in a command, e.g.\n        for small red circle any sized circle but the largest can be a potential target.\n        \"\"\"", "\n", "if", "referred_size", ":", "\n", "            ", "if", "referred_size", "==", "\"small\"", ":", "\n", "                ", "target_sizes", "=", "self", ".", "_object_vocabulary", ".", "object_sizes", "[", ":", "-", "1", "]", "\n", "", "elif", "referred_size", "==", "\"big\"", ":", "\n", "                ", "target_sizes", "=", "self", ".", "_object_vocabulary", ".", "object_sizes", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unknown size adjective in command.\"", ")", "\n", "", "", "else", ":", "\n", "            ", "target_sizes", "=", "self", ".", "_object_vocabulary", ".", "object_sizes", "\n", "# If no color specified, use all colors.", "\n", "", "if", "not", "referred_color", ":", "\n", "            ", "target_colors", "=", "self", ".", "_object_vocabulary", ".", "object_colors", "\n", "", "else", ":", "\n", "            ", "target_colors", "=", "[", "referred_color", "]", "\n", "\n", "# Return all possible combinations of sizes and colors", "\n", "", "return", "list", "(", "itertools", ".", "product", "(", "target_sizes", ",", "target_colors", ",", "[", "referred_shape", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.all_objects_except_shape": [[1042, 1048], ["all_shapes.remove", "list", "itertools.product"], "methods", ["None"], ["", "def", "all_objects_except_shape", "(", "self", ",", "shape", ":", "str", ")", "->", "List", "[", "tuple", "]", ":", "\n", "        ", "all_sizes", "=", "self", ".", "_object_vocabulary", ".", "object_sizes", "\n", "all_colors", "=", "self", ".", "_object_vocabulary", ".", "object_colors", "\n", "all_shapes", "=", "self", ".", "_object_vocabulary", ".", "object_shapes", "\n", "all_shapes", ".", "remove", "(", "shape", ")", "\n", "return", "list", "(", "itertools", ".", "product", "(", "all_sizes", ",", "all_colors", ",", "all_shapes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_larger_sizes": [[1049, 1051], ["list", "range"], "methods", ["None"], ["", "def", "get_larger_sizes", "(", "self", ",", "size", ":", "int", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "return", "list", "(", "range", "(", "size", "+", "1", ",", "self", ".", "_object_vocabulary", ".", "largest_size", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_smaller_sizes": [[1052, 1054], ["list", "range"], "methods", ["None"], ["", "def", "get_smaller_sizes", "(", "self", ",", "size", ":", "int", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "return", "list", "(", "range", "(", "self", ".", "_object_vocabulary", ".", "smallest_size", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.generate_distinct_objects": [[1055, 1127], ["all_shapes.remove", "objects.append", "all_other_shapes.remove", "dataset.GroundedScan.get_larger_sizes", "dataset.GroundedScan.get_smaller_sizes", "ValueError", "dataset.GroundedScan._object_vocabulary.sample_size", "dataset.GroundedScan._object_vocabulary.sample_color", "objects.append", "range", "objects.append", "range", "objects.append", "obligatory_objects.append", "colored_shapes.append", "range", "objects.append", "obligatory_objects.append", "colored_shapes.append", "dataset.GroundedScan._object_vocabulary.sample_size", "colored_shapes.append", "random.choice", "dataset.GroundedScan._object_vocabulary.sample_size", "random.choice", "dataset.GroundedScan._object_vocabulary.sample_size", "random.choice"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_larger_sizes", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_smaller_sizes", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.sample_size", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.sample_color", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.sample_size", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.sample_size", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.ObjectVocabulary.sample_size"], ["", "def", "generate_distinct_objects", "(", "self", ",", "referred_size", ":", "str", ",", "referred_color", ":", "str", ",", "referred_shape", ":", "str", ",", "\n", "actual_size", ":", "int", ",", "actual_color", ":", "str", ")", "->", "Tuple", "[", "list", ",", "list", "]", ":", "\n", "        ", "\"\"\"\n        Generate a list of objects that are distinct from some referred target. E.g. if the referred target is a\n        small circle, and the actual color of the target object is red, there cannot also be a blue circle of the same\n        size, since then there will be 2 possible targets.\n        Currently makes sure at least 2 sized objects of each group is placed whenever a size is referred to in the\n        referred_size. E.g. if the command is 'walk to a big circle', make sure there are at least 2 sized circles.\n        This doesn't get done for the color, e.g. if the comment is 'walk to a green circle', there are not\n        necessarily also other colored circles in obligatory_objects.\n        \"\"\"", "\n", "objects", "=", "[", "]", "\n", "# Initialize list that will be filled with objects that need to be present in the situation for it to make sense", "\n", "# E.g. if the referred object is 'small circle' there needs to be at least 1 larger circle.", "\n", "obligatory_objects", "=", "[", "]", "\n", "# E.g. distinct from 'circle' -> no other circles; generate one random object of each other shape.", "\n", "if", "not", "referred_size", "and", "not", "referred_color", ":", "\n", "            ", "all_shapes", "=", "self", ".", "_object_vocabulary", ".", "object_shapes", "\n", "all_shapes", ".", "remove", "(", "referred_shape", ")", "\n", "for", "shape", "in", "all_shapes", ":", "\n", "                ", "objects", ".", "append", "(", "[", "(", "self", ".", "_object_vocabulary", ".", "sample_size", "(", ")", ",", "self", ".", "_object_vocabulary", ".", "sample_color", "(", ")", ",", "shape", ")", "]", ")", "\n", "", "return", "objects", ",", "obligatory_objects", "\n", "# E.g. distinct from 'red circle' -> no other red circles of any size; generate one randomly size object for", "\n", "# each color, shape combination that is not a 'red circle'.", "\n", "", "elif", "not", "referred_size", ":", "\n", "            ", "for", "shape", "in", "self", ".", "_object_vocabulary", ".", "object_shapes", ":", "\n", "                ", "for", "color", "in", "self", ".", "_object_vocabulary", ".", "object_colors", ":", "\n", "                    ", "if", "not", "(", "shape", "==", "referred_shape", "and", "color", "==", "referred_color", ")", ":", "\n", "                        ", "objects", ".", "append", "(", "[", "(", "self", ".", "_object_vocabulary", ".", "sample_size", "(", ")", ",", "color", ",", "shape", ")", "]", ")", "\n", "", "", "", "return", "objects", ",", "obligatory_objects", "\n", "", "else", ":", "\n", "            ", "if", "referred_size", "==", "\"small\"", ":", "\n", "                ", "all_other_sizes", "=", "self", ".", "get_larger_sizes", "(", "actual_size", ")", "\n", "", "elif", "referred_size", "==", "\"big\"", ":", "\n", "                ", "all_other_sizes", "=", "self", ".", "get_smaller_sizes", "(", "actual_size", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unknown referred size in command\"", ")", "\n", "", "all_other_shapes", "=", "self", ".", "_object_vocabulary", ".", "object_shapes", "\n", "all_other_shapes", ".", "remove", "(", "referred_shape", ")", "\n", "# E.g. distinct from 'small circle' -> no circles of size <= than target in any color; generate two", "\n", "# random sizes for each color-shape pair except for the shape that is referred generate one larger objects", "\n", "# (if referred size is small, else a smaller object)", "\n", "if", "not", "referred_color", ":", "\n", "                ", "for", "shape", "in", "self", ".", "_object_vocabulary", ".", "object_shapes", ":", "\n", "                    ", "for", "color", "in", "self", ".", "_object_vocabulary", ".", "object_colors", ":", "\n", "                        ", "if", "not", "shape", "==", "referred_shape", ":", "\n", "                            ", "colored_shapes", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "                                ", "colored_shapes", ".", "append", "(", "(", "self", ".", "_object_vocabulary", ".", "sample_size", "(", ")", ",", "color", ",", "shape", ")", ")", "\n", "", "objects", ".", "append", "(", "colored_shapes", ")", "\n", "", "else", ":", "\n", "                            ", "if", "not", "color", "==", "actual_color", ":", "\n", "                                ", "colored_shapes", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "                                    ", "colored_shapes", ".", "append", "(", "(", "random", ".", "choice", "(", "all_other_sizes", ")", ",", "color", ",", "shape", ")", ")", "\n", "", "objects", ".", "append", "(", "colored_shapes", ")", "\n", "", "else", ":", "\n", "                                ", "obligatory_objects", ".", "append", "(", "(", "random", ".", "choice", "(", "all_other_sizes", ")", ",", "color", ",", "shape", ")", ")", "\n", "", "", "", "", "return", "objects", ",", "obligatory_objects", "\n", "# E.g. distinct from 'small red circle' -> no red circles of size <= as target; generate for each", "\n", "# color-shape pair two random sizes, and when the pair is the referred pair, one larger size.", "\n", "", "else", ":", "\n", "                ", "for", "shape", "in", "self", ".", "_object_vocabulary", ".", "object_shapes", ":", "\n", "                    ", "for", "color", "in", "self", ".", "_object_vocabulary", ".", "object_colors", ":", "\n", "                        ", "if", "not", "(", "shape", "==", "referred_shape", "and", "color", "==", "referred_color", ")", ":", "\n", "                            ", "colored_shapes", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "                                ", "colored_shapes", ".", "append", "(", "(", "self", ".", "_object_vocabulary", ".", "sample_size", "(", ")", ",", "color", ",", "shape", ")", ")", "\n", "", "objects", ".", "append", "(", "colored_shapes", ")", "\n", "", "else", ":", "\n", "                            ", "obligatory_objects", ".", "append", "(", "(", "random", ".", "choice", "(", "all_other_sizes", ")", ",", "color", ",", "shape", ")", ")", "\n", "", "", "", "return", "objects", ",", "obligatory_objects", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.generate_situations": [[1128, 1227], ["itertools.product", "situation_specifications.keys", "situation_specifications[].keys", "[].keys", "range", "range", "range", "dataset.GroundedScan.get_empty_situation", "GroundedScan.world.Position", "[].append", "range", "dataset.GroundedScan._world.within_grid", "dataset.GroundedScan._world.sample_position_conditioned", "dataset.GroundedScan._world.get_position_at", "dataset.GroundedScan._world.within_grid", "dataset.GroundedScan._world.within_grid", "dataset.GroundedScan.get_empty_situation", "random.randint", "list", "GroundedScan.world.Position", "[].append", "max", "min", "dataset.GroundedScan._world.within_grid", "dataset.GroundedScan._world.sample_position_conditioned", "dataset.GroundedScan._world.get_position_at", "dataset.GroundedScan._world.get_position_at", "dataset.GroundedScan._world.within_grid", "dataset.GroundedScan._world.within_grid", "condition.values", "condition.values"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_empty_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.sample_position_conditioned", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_position_at", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_empty_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.sample_position_conditioned", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_position_at", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_position_at", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.within_grid", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.within_grid"], ["", "", "", "def", "generate_situations", "(", "self", ",", "num_resampling", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Generate all semantically distinct situations with an agent and a target object.\n        A semantically distinct situation is based on the target object (shape, color and size), the direction the\n        agent has w.r.t. the target (e.g. North, South-West, etc.) and the number of steps the agent is removed from\n        the target. For each of these possible situations, num_resampling defines how often other objects positions\n        are resampled to create a new situation.\n        :param num_resampling: how often to resample a semantically equivalent situation but with non-target objects at\n        different locations.\n        :return: a dictionary with situations.\n        \"\"\"", "\n", "# All possible target objects", "\n", "all_targets", "=", "itertools", ".", "product", "(", "self", ".", "_object_vocabulary", ".", "object_sizes", ",", "self", ".", "_object_vocabulary", ".", "object_colors", ",", "\n", "self", ".", "_object_vocabulary", ".", "object_shapes", ")", "\n", "\n", "# Loop over all semantically different situation specifications", "\n", "situation_specifications", "=", "{", "}", "\n", "for", "target_size", ",", "target_color", ",", "target_shape", "in", "all_targets", ":", "\n", "            ", "if", "target_shape", "not", "in", "situation_specifications", ".", "keys", "(", ")", ":", "\n", "                ", "situation_specifications", "[", "target_shape", "]", "=", "{", "}", "\n", "", "if", "target_color", "not", "in", "situation_specifications", "[", "target_shape", "]", ".", "keys", "(", ")", ":", "\n", "                ", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "=", "{", "}", "\n", "", "if", "target_size", "not", "in", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", ".", "keys", "(", ")", ":", "\n", "                ", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "[", "target_size", "]", "=", "[", "]", "\n", "\n", "# Loop over all possible directions from agent to target (e.g. agent is facing the target from the NW).", "\n", "", "for", "direction_str", "in", "self", ".", "_relative_directions", ":", "\n", "\n", "# For straight directions (e.g. North, East, South and West) loop over 1 to grid size number of steps.", "\n", "                ", "if", "direction_str", "in", "self", ".", "_straight_directions", ":", "\n", "                    ", "for", "num_steps_to_target", "in", "range", "(", "1", ",", "self", ".", "_world", ".", "grid_size", ")", ":", "\n", "\n", "# Don't resample too often on the edges of the grid-world.", "\n", "                        ", "if", "1", "<", "num_steps_to_target", "<", "self", ".", "_world", ".", "grid_size", "-", "1", ":", "\n", "                            ", "num_to_resample", "=", "num_resampling", "\n", "", "else", ":", "\n", "                            ", "num_to_resample", "=", "1", "\n", "\n", "# Resample a semantically equivalent situation based on positions of non-target objects.", "\n", "", "for", "_", "in", "range", "(", "num_to_resample", ")", ":", "\n", "                            ", "empty_situation", "=", "self", ".", "get_empty_situation", "(", ")", "\n", "target_position", "=", "Position", "(", "column", "=", "self", ".", "_world", ".", "grid_size", "+", "1", ",", "row", "=", "self", ".", "_world", ".", "grid_size", "+", "1", ")", "\n", "while", "not", "self", ".", "_world", ".", "within_grid", "(", "target_position", ")", ":", "\n", "                                ", "condition", "=", "{", "\"n\"", ":", "0", ",", "\"e\"", ":", "0", ",", "\"s\"", ":", "0", ",", "\"w\"", ":", "0", "}", "\n", "condition", "[", "direction_str", "]", "=", "num_steps_to_target", "\n", "agent_position", "=", "self", ".", "_world", ".", "sample_position_conditioned", "(", "*", "condition", ".", "values", "(", ")", ")", "\n", "target_position", "=", "self", ".", "_world", ".", "get_position_at", "(", "agent_position", ",", "direction_str", ",", "\n", "num_steps_to_target", ")", "\n", "", "assert", "self", ".", "_world", ".", "within_grid", "(", "target_position", ")", "and", "self", ".", "_world", ".", "within_grid", "(", "agent_position", ")", "\n", "\n", "# Save a situation.", "\n", "empty_situation", "[", "\"agent_position\"", "]", "=", "agent_position", "\n", "empty_situation", "[", "\"target_position\"", "]", "=", "target_position", "\n", "empty_situation", "[", "\"distance_to_target\"", "]", "=", "num_steps_to_target", "\n", "empty_situation", "[", "\"direction_to_target\"", "]", "=", "direction_str", "\n", "empty_situation", "[", "\"target_shape\"", "]", "=", "target_shape", "\n", "empty_situation", "[", "\"target_color\"", "]", "=", "target_color", "\n", "empty_situation", "[", "\"target_size\"", "]", "=", "target_size", "\n", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "[", "target_size", "]", ".", "append", "(", "empty_situation", ")", "\n", "\n", "# For combined dirs (e.g. North-East, South-West, etc.) loop over 1 to 2 * grid size number of steps", "\n", "", "", "", "elif", "direction_str", "in", "self", ".", "_combined_directions", ":", "\n", "                    ", "for", "number_of_steps_in_direction", "in", "range", "(", "2", ",", "2", "*", "(", "self", ".", "_world", ".", "grid_size", "-", "1", ")", "+", "1", ")", ":", "\n", "                        ", "if", "1", "<", "number_of_steps_in_direction", "<", "2", "*", "(", "self", ".", "_world", ".", "grid_size", "-", "1", ")", ":", "\n", "                            ", "num_to_resample", "=", "num_resampling", "\n", "", "else", ":", "\n", "                            ", "num_to_resample", "=", "1", "\n", "", "for", "_", "in", "range", "(", "num_to_resample", ")", ":", "\n", "                            ", "empty_situation", "=", "self", ".", "get_empty_situation", "(", ")", "\n", "\n", "# Randomly divide the number of steps over each direction of the combination", "\n", "random_divide", "=", "random", ".", "randint", "(", "max", "(", "1", ",", "number_of_steps_in_direction", "-", "self", ".", "_world", ".", "grid_size", "+", "1", ")", ",", "\n", "min", "(", "number_of_steps_in_direction", "-", "1", ",", "self", ".", "_world", ".", "grid_size", "-", "1", ")", ")", "\n", "steps_in_first_direction", "=", "random_divide", "\n", "steps_in_second_direction", "=", "number_of_steps_in_direction", "-", "random_divide", "\n", "assert", "(", "steps_in_second_direction", "+", "steps_in_first_direction", ")", "==", "number_of_steps_in_direction", "\n", "assert", "(", "steps_in_first_direction", "and", "steps_in_second_direction", ")", "<=", "self", ".", "_world", ".", "grid_size", "-", "1", "\n", "directions", "=", "list", "(", "direction_str", ")", "\n", "target_position", "=", "Position", "(", "column", "=", "self", ".", "_world", ".", "grid_size", "+", "1", ",", "row", "=", "self", ".", "_world", ".", "grid_size", "+", "1", ")", "\n", "while", "not", "self", ".", "_world", ".", "within_grid", "(", "target_position", ")", ":", "\n", "                                ", "condition", "=", "{", "\"n\"", ":", "0", ",", "\"e\"", ":", "0", ",", "\"s\"", ":", "0", ",", "\"w\"", ":", "0", "}", "\n", "condition", "[", "directions", "[", "0", "]", "]", "=", "steps_in_first_direction", "\n", "condition", "[", "directions", "[", "1", "]", "]", "=", "steps_in_second_direction", "\n", "agent_position", "=", "self", ".", "_world", ".", "sample_position_conditioned", "(", "*", "condition", ".", "values", "(", ")", ")", "\n", "intermediate_target_position", "=", "self", ".", "_world", ".", "get_position_at", "(", "agent_position", ",", "\n", "directions", "[", "0", "]", ",", "\n", "steps_in_first_direction", ")", "\n", "target_position", "=", "self", ".", "_world", ".", "get_position_at", "(", "intermediate_target_position", ",", "\n", "directions", "[", "1", "]", ",", "steps_in_second_direction", ")", "\n", "", "assert", "self", ".", "_world", ".", "within_grid", "(", "target_position", ")", "and", "self", ".", "_world", ".", "within_grid", "(", "agent_position", ")", "\n", "empty_situation", "[", "\"agent_position\"", "]", "=", "agent_position", "\n", "empty_situation", "[", "\"target_position\"", "]", "=", "target_position", "\n", "empty_situation", "[", "\"distance_to_target\"", "]", "=", "number_of_steps_in_direction", "\n", "empty_situation", "[", "\"direction_to_target\"", "]", "=", "direction_str", "\n", "empty_situation", "[", "\"target_shape\"", "]", "=", "target_shape", "\n", "empty_situation", "[", "\"target_color\"", "]", "=", "target_color", "\n", "empty_situation", "[", "\"target_size\"", "]", "=", "target_size", "\n", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "[", "target_size", "]", ".", "append", "(", "empty_situation", ")", "\n", "", "", "", "", "", "return", "situation_specifications", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world_from_spec": [[1228, 1252], ["dataset.GroundedScan._world.clear_situation", "dataset.GroundedScan._world.place_agent_at", "dataset.GroundedScan._world.place_object", "dataset.GroundedScan.generate_distinct_objects", "int", "max", "random.sample", "GroundedScan.world.Object", "objects_to_place.extend", "dataset.GroundedScan._world.sample_position", "dataset.GroundedScan._world.place_object", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "len", "GroundedScan.world.Object"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.place_agent_at", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.place_object", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.generate_distinct_objects", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.sample", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.sample_position", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.place_object", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word"], ["", "def", "initialize_world_from_spec", "(", "self", ",", "situation_spec", ",", "referred_size", ":", "str", ",", "referred_color", ":", "str", ",", "referred_shape", ":", "str", ",", "\n", "actual_size", ":", "int", ",", "sample_percentage", "=", "0.5", ",", "min_other_objects", "=", "0", ")", ":", "\n", "        ", "self", ".", "_world", ".", "clear_situation", "(", ")", "\n", "self", ".", "_world", ".", "place_agent_at", "(", "situation_spec", "[", "\"agent_position\"", "]", ")", "\n", "target_shape", "=", "situation_spec", "[", "\"target_shape\"", "]", "\n", "target_color", "=", "situation_spec", "[", "\"target_color\"", "]", "\n", "target_size", "=", "situation_spec", "[", "\"target_size\"", "]", "\n", "self", ".", "_world", ".", "place_object", "(", "Object", "(", "size", "=", "target_size", ",", "color", "=", "target_color", ",", "shape", "=", "target_shape", ")", ",", "\n", "position", "=", "situation_spec", "[", "\"target_position\"", "]", ",", "target", "=", "True", ")", "\n", "distinct_objects", ",", "obligatory_objects", "=", "self", ".", "generate_distinct_objects", "(", "\n", "referred_size", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "referred_size", ")", ",", "\n", "referred_color", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "referred_color", ")", ",", "\n", "referred_shape", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "referred_shape", ")", ",", "\n", "actual_size", "=", "actual_size", ",", "\n", "actual_color", "=", "target_color", ")", "\n", "num_to_sample", "=", "int", "(", "len", "(", "distinct_objects", ")", "*", "sample_percentage", ")", "\n", "num_to_sample", "=", "max", "(", "min_other_objects", ",", "num_to_sample", ")", "\n", "objects_to_place", "=", "obligatory_objects", "\n", "sampled_objects", "=", "random", ".", "sample", "(", "distinct_objects", ",", "k", "=", "num_to_sample", ")", "\n", "for", "sampled_objs", "in", "sampled_objects", ":", "\n", "            ", "objects_to_place", ".", "extend", "(", "sampled_objs", ")", "\n", "", "for", "size", ",", "color", ",", "shape", "in", "objects_to_place", ":", "\n", "            ", "other_position", "=", "self", ".", "_world", ".", "sample_position", "(", ")", "\n", "self", ".", "_world", ".", "place_object", "(", "Object", "(", "size", "=", "size", ",", "color", "=", "color", ",", "shape", "=", "shape", ")", ",", "position", "=", "other_position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.command_repr": [[1253, 1256], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "command_repr", "(", "command", ":", "List", "[", "str", "]", ")", "->", "str", ":", "\n", "        ", "return", "','", ".", "join", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_command_repr": [[1257, 1260], ["command_repr.split"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "parse_command_repr", "(", "command_repr", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "command_repr", ".", "split", "(", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.derivation_repr": [[1261, 1264], ["str"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "derivation_repr", "(", "derivation", ":", "Derivation", ")", "->", "str", ":", "\n", "        ", "return", "str", "(", "derivation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_derivation_repr": [[1265, 1268], ["derivation_repr.split", "GroundedScan.grammar.Derivation.from_str"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.from_str"], ["", "def", "parse_derivation_repr", "(", "self", ",", "derivation_repr", ":", "str", ")", "->", "Derivation", ":", "\n", "        ", "command_rules", ",", "command_lexicon", "=", "derivation_repr", ".", "split", "(", "';'", ")", "\n", "return", "Derivation", ".", "from_str", "(", "command_rules", ",", "command_lexicon", ",", "self", ".", "_grammar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.position_repr": [[1269, 1272], ["str", "str"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "position_repr", "(", "position", ":", "Position", ")", ":", "\n", "        ", "return", "','", ".", "join", "(", "[", "str", "(", "position", ".", "column", ")", ",", "str", "(", "position", ".", "row", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.parse_position_repr": [[1273, 1277], ["position_repr.split", "GroundedScan.world.Position", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "parse_position_repr", "(", "position_repr", ":", "str", ")", "->", "Position", ":", "\n", "        ", "column", ",", "row", "=", "position_repr", ".", "split", "(", "','", ")", "\n", "return", "Position", "(", "column", "=", "int", "(", "column", ")", ",", "row", "=", "int", "(", "row", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_data_pairs": [[1278, 1406], ["dataset.GroundedScan._world.get_current_situation", "dataset.GroundedScan.reset_dataset", "dataset.GroundedScan.generate_situations", "dataset.GroundedScan.generate_all_commands", "dataset.GroundedScan._grammar.all_derivations.items", "logger.info", "logger.info", "dataset.GroundedScan.discard_equivalent_examples", "logger.info", "dataset.GroundedScan.initialize_world", "logger.info", "dataset.GroundedScan.make_test_set", "dataset.GroundedScan.make_test_set", "dataset.GroundedScan.move_k_examples_to_train", "derivation.meaning", "derivation.words", "arguments.pop().to_predicate", "dataset.GroundedScan.generate_possible_targets", "len", "len", "random.sample().pop", "enumerate", "dataset.GroundedScan._vocabulary.get_adverbs", "arguments.pop", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "random.sample", "set", "dataset.GroundedScan.initialize_world_from_spec", "dataset.GroundedScan._world.get_current_situation", "dataset.GroundedScan.demonstrate_command", "dataset.GroundedScan.fill_example", "dataset.GroundedScan._world.clear_situation", "random.sample", "logger.info", "dataset.GroundedScan._template_identifiers[].append", "int", "dataset.GroundedScan.assign_splits", "derivation.words", "range", "dataset.GroundedScan._vocabulary.translate_word", "len", "ValueError", "range", "len", "dataset.GroundedScan._world.clear_situation", "len"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.reset_dataset", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.generate_situations", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.generate_all_commands", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.discard_equivalent_examples", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.make_test_set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.make_test_set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.move_k_examples_to_train", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.LogicalForm.to_predicate", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.generate_possible_targets", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.get_adverbs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.sample", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.initialize_world_from_spec", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.get_current_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.demonstrate_command", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.fill_example", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.clear_situation", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Grammar.sample", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.assign_splits", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.grammar.Derivation.words", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.world.World.clear_situation"], ["", "def", "get_data_pairs", "(", "self", ",", "max_examples", "=", "None", ",", "num_resampling", "=", "1", ",", "other_objects_sample_percentage", "=", "0.5", ",", "\n", "split_type", "=", "\"uniform\"", ",", "visualize_per_template", "=", "0", ",", "visualize_per_split", "=", "0", ",", "train_percentage", "=", "0.8", ",", "\n", "min_other_objects", "=", "0", ",", "k_shot_generalization", "=", "0", ",", "make_dev_set", "=", "False", ",", "\n", "cut_off_target_length", "=", "25", ")", "->", "{", "}", ":", "\n", "        ", "\"\"\"\n        Generate a set of situations and generate all possible commands based on the current grammar and lexicon,\n        match commands to situations based on relevance (if a command refers to a target object, it needs to be\n        present in the situation) and save these pairs in a the list of data examples.\n        \"\"\"", "\n", "if", "k_shot_generalization", ">", "0", "and", "split_type", "==", "\"uniform\"", ":", "\n", "            ", "logger", ".", "info", "(", "\"WARNING: k_shot_generalization set to {} but for split_type uniform this is not used.\"", ".", "format", "(", "\n", "k_shot_generalization", ")", ")", "\n", "\n", "# Save current situation of the world for later restoration.", "\n", "", "current_situation", "=", "self", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "current_mission", "=", "self", ".", "_world", ".", "mission", "\n", "self", ".", "reset_dataset", "(", ")", "\n", "\n", "# Generate all situations and commands.", "\n", "situation_specifications", "=", "self", ".", "generate_situations", "(", "num_resampling", "=", "num_resampling", ")", "\n", "self", ".", "generate_all_commands", "(", ")", "\n", "example_count", "=", "0", "\n", "dropped_examples", "=", "0", "\n", "for", "template_num", ",", "template_derivations", "in", "self", ".", "_grammar", ".", "all_derivations", ".", "items", "(", ")", ":", "\n", "            ", "visualized_per_template", "=", "0", "\n", "visualized_per_split", "=", "{", "split", ":", "0", "for", "split", "in", "self", ".", "_possible_splits", "}", "\n", "for", "derivation", "in", "template_derivations", ":", "\n", "                ", "arguments", "=", "[", "]", "\n", "derivation", ".", "meaning", "(", "arguments", ")", "\n", "assert", "len", "(", "arguments", ")", "==", "1", ",", "\"Only one target object currently supported.\"", "\n", "adverb", "=", "\"\"", "\n", "for", "word", "in", "derivation", ".", "words", "(", ")", ":", "\n", "                    ", "if", "word", "in", "self", ".", "_vocabulary", ".", "get_adverbs", "(", ")", ":", "\n", "                        ", "adverb", "=", "word", "\n", "", "", "target_str", ",", "target_predicate", "=", "arguments", ".", "pop", "(", ")", ".", "to_predicate", "(", ")", "\n", "possible_target_objects", "=", "self", ".", "generate_possible_targets", "(", "\n", "referred_size", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"size\"", "]", ")", ",", "\n", "referred_color", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"color\"", "]", ")", ",", "\n", "referred_shape", "=", "self", ".", "_vocabulary", ".", "translate_word", "(", "target_predicate", "[", "\"noun\"", "]", ")", ")", "\n", "for", "target_size", ",", "target_color", ",", "target_shape", "in", "possible_target_objects", ":", "\n", "                    ", "relevant_situations", "=", "situation_specifications", "[", "target_shape", "]", "[", "target_color", "]", "[", "target_size", "]", "\n", "num_relevant_situations", "=", "len", "(", "relevant_situations", ")", "\n", "idx_to_visualize", "=", "random", ".", "sample", "(", "[", "i", "for", "i", "in", "range", "(", "num_relevant_situations", ")", "]", ",", "k", "=", "1", ")", ".", "pop", "(", ")", "\n", "\n", "if", "split_type", "==", "\"uniform\"", ":", "\n", "                        ", "idx_for_train", "=", "random", ".", "sample", "(", "[", "i", "for", "i", "in", "range", "(", "num_relevant_situations", ")", "]", ",", "k", "=", "int", "(", "\n", "num_relevant_situations", "*", "train_percentage", ")", ")", "\n", "idx_for_train", "=", "set", "(", "idx_for_train", ")", "\n", "", "for", "i", ",", "relevant_situation", "in", "enumerate", "(", "relevant_situations", ")", ":", "\n", "                        ", "visualize", "=", "False", "\n", "if", "(", "example_count", "+", "1", ")", "%", "10000", "==", "0", ":", "\n", "                            ", "logger", ".", "info", "(", "\"Number of examples: {}\"", ".", "format", "(", "example_count", "+", "1", ")", ")", "\n", "", "if", "max_examples", ":", "\n", "                            ", "if", "example_count", ">=", "max_examples", ":", "\n", "                                ", "break", "\n", "", "", "self", ".", "initialize_world_from_spec", "(", "relevant_situation", ",", "\n", "referred_size", "=", "target_predicate", "[", "\"size\"", "]", ",", "\n", "referred_color", "=", "target_predicate", "[", "\"color\"", "]", ",", "\n", "referred_shape", "=", "target_predicate", "[", "\"noun\"", "]", ",", "\n", "actual_size", "=", "target_size", ",", "\n", "sample_percentage", "=", "other_objects_sample_percentage", ",", "\n", "min_other_objects", "=", "min_other_objects", "\n", ")", "\n", "situation", "=", "self", ".", "_world", ".", "get_current_situation", "(", ")", "\n", "assert", "situation", ".", "direction_to_target", "==", "relevant_situation", "[", "\"direction_to_target\"", "]", "\n", "assert", "situation", ".", "distance_to_target", "==", "relevant_situation", "[", "\"distance_to_target\"", "]", "\n", "target_commands", ",", "target_situations", ",", "target_action", "=", "self", ".", "demonstrate_command", "(", "\n", "derivation", ",", "initial_situation", "=", "situation", ")", "\n", "if", "i", "==", "idx_to_visualize", ":", "\n", "                            ", "visualize", "=", "True", "\n", "", "if", "visualized_per_template", ">=", "visualize_per_template", ":", "\n", "                            ", "visualize", "=", "False", "\n", "", "if", "adverb", "and", "visualized_per_template", "<=", "visualize_per_template", ":", "\n", "                            ", "visualize", "=", "True", "\n", "", "if", "split_type", "==", "\"uniform\"", ":", "\n", "                            ", "if", "i", "in", "idx_for_train", ":", "\n", "                                ", "splits", "=", "[", "\"train\"", "]", "\n", "", "else", ":", "\n", "                                ", "splits", "=", "[", "\"test\"", "]", "\n", "", "", "elif", "split_type", "==", "\"generalization\"", ":", "\n", "                            ", "splits", "=", "self", ".", "assign_splits", "(", "target_size", ",", "target_color", ",", "target_shape", ",", "target_action", ",", "\n", "situation", ".", "direction_to_target", ",", "target_predicate", ",", "\n", "self", ".", "_vocabulary", ".", "translate_word", "(", "adverb", ")", ")", "\n", "if", "len", "(", "splits", ")", "==", "0", ":", "\n", "                                ", "splits", "=", "[", "\"train\"", "]", "\n", "", "elif", "len", "(", "splits", ")", ">", "1", ":", "\n", "                                ", "dropped_examples", "+=", "1", "\n", "self", ".", "_world", ".", "clear_situation", "(", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                                ", "if", "split_type", "==", "\"generalization\"", ":", "\n", "                                    ", "if", "visualized_per_split", "[", "splits", "[", "0", "]", "]", "<=", "visualize_per_split", ":", "\n", "                                        ", "visualized_per_split", "[", "splits", "[", "0", "]", "]", "+=", "1", "\n", "visualize", "=", "True", "\n", "", "", "", "", "elif", "split_type", "==", "\"target_lengths\"", ":", "\n", "                            ", "if", "len", "(", "target_commands", ")", ">", "cut_off_target_length", ":", "\n", "                                ", "splits", "=", "[", "\"test\"", "]", "\n", "", "else", ":", "\n", "                                ", "splits", "=", "[", "\"train\"", "]", "\n", "", "", "else", ":", "\n", "                            ", "raise", "ValueError", "(", "\"Unknown split_type in .get_data_pairs().\"", ")", "\n", "", "self", ".", "fill_example", "(", "command", "=", "derivation", ".", "words", "(", ")", ",", "derivation", "=", "derivation", ",", "\n", "situation", "=", "situation", ",", "target_commands", "=", "target_commands", ",", "\n", "verb_in_command", "=", "target_action", ",", "target_predicate", "=", "target_predicate", ",", "\n", "visualize", "=", "visualize", ",", "adverb", "=", "adverb", ",", "splits", "=", "splits", ")", "\n", "for", "split", "in", "splits", ":", "\n", "                            ", "self", ".", "_template_identifiers", "[", "split", "]", ".", "append", "(", "template_num", ")", "\n", "", "example_count", "+=", "1", "\n", "if", "visualize", ":", "\n", "                            ", "visualized_per_template", "+=", "1", "\n", "", "self", ".", "_world", ".", "clear_situation", "(", ")", "\n", "", "", "", "", "logger", ".", "info", "(", "\"Dropped {} examples due to belonging to multiple splits.\"", ".", "format", "(", "dropped_examples", ")", ")", "\n", "if", "split_type", "==", "\"generalization\"", ":", "\n", "            ", "self", ".", "make_test_set", "(", "percentage", "=", "(", "1", "-", "self", ".", "_percentage_train", ")", ",", "type_set", "=", "\"test\"", ")", "\n", "", "logger", ".", "info", "(", "\"Discarding equivalent examples, may take a while...\"", ")", "\n", "equivalent_examples", "=", "self", ".", "discard_equivalent_examples", "(", ")", "\n", "logger", ".", "info", "(", "\"Discarded {} examples from the test set that were already in the training set.\"", ".", "format", "(", "\n", "equivalent_examples", ")", ")", "\n", "\n", "if", "make_dev_set", ":", "\n", "            ", "self", ".", "make_test_set", "(", "percentage", "=", "self", ".", "_percentage_dev", ",", "type_set", "=", "\"dev\"", ")", "\n", "\n", "", "if", "k_shot_generalization", ">", "0", ":", "\n", "            ", "self", ".", "move_k_examples_to_train", "(", "k_shot_generalization", ",", "split", "=", "\"adverb_1\"", ")", "\n", "\n", "# restore situation", "\n", "", "self", ".", "initialize_world", "(", "current_situation", ",", "mission", "=", "current_mission", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.assign_splits": [[1407, 1437], ["splits.append", "splits.append", "splits.append", "splits.append", "splits.append", "splits.append", "splits.append", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_word", "dataset.GroundedScan._vocabulary.translate_meaning", "dataset.GroundedScan._vocabulary.translate_meaning"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_word", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.vocabulary.Vocabulary.translate_meaning"], ["", "def", "assign_splits", "(", "self", ",", "target_size", ":", "str", ",", "target_color", ":", "str", ",", "target_shape", ":", "str", ",", "verb_in_command", ":", "str", ",", "\n", "direction_to_target", ":", "str", ",", "referred_target", ":", "dict", ",", "manner", ":", "str", ")", ":", "\n", "        ", "splits", "=", "[", "]", "\n", "# Experiment 1: visual generalization, hold out all red squares as targets.", "\n", "if", "target_color", "==", "\"red\"", "and", "target_shape", "==", "\"square\"", ":", "\n", "            ", "splits", ".", "append", "(", "\"visual\"", ")", "\n", "# Experiment 2: situational generalization, hold out all directions of agent to target = South-West.", "\n", "", "if", "direction_to_target", "==", "\"sw\"", ":", "\n", "            ", "splits", ".", "append", "(", "\"situational_1\"", ")", "\n", "# Experiment 3: situational generalization, hold out all situations where a circle of size 2 is referred to", "\n", "# as the small circle.", "\n", "", "if", "self", ".", "_vocabulary", ".", "translate_word", "(", "referred_target", "[", "\"size\"", "]", ")", "==", "\"small\"", "and", "target_shape", "==", "\"circle\"", "and", "target_size", "==", "2", ":", "\n", "            ", "splits", ".", "append", "(", "\"situational_2\"", ")", "\n", "# Experiment 4: contextual generalization, hold out all situations where interaction with a red square of", "\n", "# size 3 is required.", "\n", "", "if", "self", ".", "_vocabulary", ".", "translate_word", "(", "verb_in_command", ")", "==", "\"push\"", "and", "target_shape", "==", "\"square\"", "and", "target_size", "==", "3", ":", "\n", "            ", "splits", ".", "append", "(", "\"contextual\"", ")", "\n", "# Experiment 5: generalize adverb to new situations.", "\n", "", "if", "manner", "==", "\"cautiously\"", ":", "\n", "            ", "splits", ".", "append", "(", "\"adverb_1\"", ")", "\n", "# Experiment 6: generalize adverb to new verb 'pull'.", "\n", "", "if", "(", "verb_in_command", "==", "self", ".", "_vocabulary", ".", "translate_meaning", "(", "\"pull\"", ")", "\n", "and", "manner", "==", "\"while spinning\"", ")", ":", "\n", "            ", "splits", ".", "append", "(", "\"adverb_2\"", ")", "\n", "# Experiment 7: visual gen. easier, hold out all yellow squares as targets if also yellow in referred target.", "\n", "", "if", "(", "self", ".", "_vocabulary", ".", "translate_meaning", "(", "\"yellow\"", ")", "==", "referred_target", "[", "\"color\"", "]", "and", "\n", "target_color", "==", "\"yellow\"", "and", "target_shape", "==", "\"square\"", ")", ":", "\n", "            ", "splits", ".", "append", "(", "\"visual_easier\"", ")", "\n", "", "return", "splits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.__main__.main": [[17, 224], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "vars", "argparse.ArgumentParser.parse_args", "NotImplementedError", "os.path.exists", "os.path.join", "GroundedScan.dataset.GroundedScan", "GroundedScan.load_dataset_from_file.get_data_pairs", "logger.info", "GroundedScan.load_dataset_from_file.save_dataset_statistics", "GroundedScan.load_dataset_from_file.save_dataset", "GroundedScan.load_dataset_from_file.visualize_data_examples", "logger.info", "os.getcwd", "os.path.exists", "os.mkdir", "flags[].split", "flags[].split", "flags[].split", "flags[].split", "GroundedScan.load_dataset_from_file.save_dataset_statistics", "flags[].split", "flags[].split", "flags[].split", "GroundedScan.load_dataset_from_file.save_dataset_statistics", "GroundedScan.load_dataset_from_file.save_dataset_statistics", "logger.info", "logger.info", "GroundedScan.dataset.GroundedScan.load_dataset_from_file", "GroundedScan.load_dataset_from_file.visualize_prediction", "logger.info", "flags[].split", "xlwt.Workbook", "os.path.join", "xlwt.Workbook.save", "logger.info", "GroundedScan.load_dataset_from_file.save_dataset_statistics", "ValueError", "os.path.join", "logger.info", "GroundedScan.dataset.GroundedScan.load_dataset_from_file", "GroundedScan.load_dataset_from_file.position_analysis", "logger.info", "logger.info", "GroundedScan.dataset_test.run_all_tests", "GroundedScan.load_dataset_from_file.count_equivalent_examples", "os.path.join", "flags[].split", "ValueError", "logger.info", "GroundedScan.dataset.GroundedScan.load_dataset_from_file", "os.path.join", "GroundedScan.load_dataset_from_file.error_analysis", "logger.info", "logger.info", "file.split", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.get_data_pairs", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_dataset", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.visualize_data_examples", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.load_dataset_from_file", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.visualize_prediction", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.save_dataset_statistics", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.load_dataset_from_file", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.position_analysis", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset_test.run_all_tests", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.count_equivalent_examples", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.load_dataset_from_file", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.dataset.GroundedScan.error_analysis"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Grounded SCAN\"", ")", "\n", "\n", "# General arguments.", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'execute_commands'", ",", "\n", "help", "=", "'Generate (mode=generate) data, run tests (mode=test), analyse the end positions of'", "\n", "' predictions compared to ground truth end positions (mode=position_analysis) '", "\n", "' or execute commands from a file (mode=execute_commands).'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_dataset_from'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Path to file with dataset.'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_directory'", ",", "type", "=", "str", ",", "default", "=", "'output'", ",", "help", "=", "'Path to a folder in which '", "\n", "'all outputs should be '", "\n", "'stored.'", ")", "\n", "parser", ".", "add_argument", "(", "'--predicted_commands_files'", ",", "type", "=", "str", ",", "default", "=", "'predict.json'", ",", "\n", "help", "=", "'Path to a file with predictions.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dataset_as'", ",", "type", "=", "str", ",", "default", "=", "'dataset.txt'", ",", "help", "=", "'Filename to save dataset in.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--count_equivalent_examples\"", ",", "dest", "=", "\"count_equivalent_examples\"", ",", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ",", "help", "=", "\"Whether or not to count the number of equivalent examples in the \"", "\n", "\"training and test set at the end of generation.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--only_save_errors\"", ",", "dest", "=", "\"only_save_errors\"", ",", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ",", "help", "=", "\"If mode=execute_commands, whether to only save the errors.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--make_dev_set\"", ",", "dest", "=", "\"make_dev_set\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "# Dataset arguments.", "\n", "parser", ".", "add_argument", "(", "'--max_examples'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"Max. number of examples to generate.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--split'", ",", "type", "=", "str", ",", "default", "=", "'generalization'", ",", "choices", "=", "[", "'uniform'", ",", "'generalization'", ",", "\n", "\"target_lengths\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--k_shot_generalization'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Number of examples of a particular \"", "\n", "\"split to add to the training set.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_resampling'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'Number of time to resample a semantically '", "\n", "'equivalent situation (which will likely result'", "\n", "' in different situations in terms of object '", "\n", "'locations).'", ")", "\n", "parser", ".", "add_argument", "(", "'--visualize_per_template'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'How many visualization to generate per '", "\n", "'command template.'", ")", "\n", "parser", ".", "add_argument", "(", "'--visualize_per_split'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'How many visualization to generate per '", "\n", "'test split.'", ")", "\n", "parser", ".", "add_argument", "(", "'--percentage_train'", ",", "type", "=", "float", ",", "default", "=", ".7", ",", "\n", "help", "=", "'Percentage of examples to put in the training set (rest is test set).'", ")", "\n", "parser", ".", "add_argument", "(", "'--percentage_dev'", ",", "type", "=", "float", ",", "default", "=", ".05", ",", "\n", "help", "=", "'Percentage of examples to put in the training set (rest is test set).'", ")", "\n", "parser", ".", "add_argument", "(", "'--cut_off_target_length'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"Examples of what target length to put\"", "\n", "\" in the test set for \"", "\n", "\"--split=target_lengths\"", ")", "\n", "\n", "# World arguments.", "\n", "parser", ".", "add_argument", "(", "'--grid_size'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "'Number of rows (and columns) in the grid world.'", ")", "\n", "parser", ".", "add_argument", "(", "'--min_other_objects'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Minimum amount of objects to put in the grid '", "\n", "'world.'", ")", "# TODO: being used?", "\n", "parser", ".", "add_argument", "(", "'--max_objects'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Maximum amount of objects to put in the grid '", "\n", "'world.'", ")", "# TODO: being used?", "\n", "parser", ".", "add_argument", "(", "'--min_object_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Smallest object size.'", ")", "# TODO: remove these?", "\n", "parser", ".", "add_argument", "(", "'--max_object_size'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'Biggest object size.'", ")", "# TODO: remove these?", "\n", "parser", ".", "add_argument", "(", "'--other_objects_sample_percentage'", ",", "type", "=", "float", ",", "default", "=", ".5", ",", "\n", "help", "=", "'Percentage of possible objects distinct from the target to place in the world.'", ")", "\n", "\n", "# Grammar and Vocabulary arguments", "\n", "parser", ".", "add_argument", "(", "'--type_grammar'", ",", "type", "=", "str", ",", "default", "=", "'adverb'", ",", "choices", "=", "[", "'simple_intrans'", ",", "'simple_trans'", ",", "\n", "'normal'", ",", "'adverb'", ",", "'full'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--intransitive_verbs'", ",", "type", "=", "str", ",", "default", "=", "'walk'", ",", "help", "=", "'Comma-separated list of '", "\n", "'intransitive verbs.'", ")", "\n", "parser", ".", "add_argument", "(", "'--transitive_verbs'", ",", "type", "=", "str", ",", "default", "=", "'pull,push'", ",", "help", "=", "'Comma-separated list of '", "\n", "'transitive verbs.'", ")", "\n", "parser", ".", "add_argument", "(", "'--adverbs'", ",", "type", "=", "str", ",", "\n", "default", "=", "'cautiously,while spinning,hesitantly,while zigzagging'", ",", "\n", "help", "=", "'Comma-separated list of adverbs.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nouns'", ",", "type", "=", "str", ",", "default", "=", "'square,cylinder,circle'", ",", "help", "=", "'Comma-separated list of nouns.'", ")", "\n", "parser", ".", "add_argument", "(", "'--color_adjectives'", ",", "type", "=", "str", ",", "default", "=", "'red,green,yellow,blue'", ",", "help", "=", "'Comma-separated list of '", "\n", "'colors.'", ")", "\n", "parser", ".", "add_argument", "(", "'--size_adjectives'", ",", "type", "=", "str", ",", "default", "=", "'big,small'", ",", "help", "=", "'Comma-separated list of sizes.'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_vocabulary'", ",", "type", "=", "str", ",", "default", "=", "'default'", ",", "choices", "=", "[", "'default'", ",", "'sample'", "]", ",", "\n", "help", "=", "\"Whether to specify own vocabulary or to sample a nonsensical one.\"", ")", "\n", "\n", "# Only relevant when --sample_vocabulary='sample'", "\n", "parser", ".", "add_argument", "(", "'--num_intransitive_verbs'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of intransitive verbs to sample.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_transitive_verbs'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of transitive verbs to sample.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_adverbs'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "'number of adverbs to sample.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_nouns'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of nouns to sample.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_color_adjectives'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of color adjectives to sample.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_size_adjectives'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of size adjectives to sample.'", ")", "\n", "\n", "flags", "=", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", "\n", "\n", "if", "flags", "[", "\"type_grammar\"", "]", "==", "\"full\"", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Full type grammar (with conjunctions) not implemented (yet).\"", ")", "\n", "\n", "", "if", "flags", "[", "'mode'", "]", "==", "'execute_commands'", "or", "flags", "[", "'mode'", "]", "==", "'error_analysis'", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "flags", "[", "'load_dataset_from'", "]", ")", ",", "\"if mode={}, please specify data location in --load_dataset_from\"", ".", "format", "(", "flags", "[", "'mode'", "]", ")", "\n", "\n", "", "if", "flags", "[", "\"split\"", "]", "==", "\"target_lengths\"", ":", "\n", "        ", "assert", "flags", "[", "\"cut_off_target_length\"", "]", ",", "\"Specify --cut_off_target_length if --split=target_lengths.\"", "\n", "\n", "# Create directory for visualizations if it doesn't exist.", "\n", "", "if", "flags", "[", "'output_directory'", "]", ":", "\n", "        ", "visualization_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "flags", "[", "'output_directory'", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "visualization_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "visualization_path", ")", "\n", "\n", "", "", "if", "flags", "[", "'mode'", "]", "==", "'generate'", ":", "\n", "        ", "intransitive_verbs", "=", "flags", "[", "\"intransitive_verbs\"", "]", ".", "split", "(", "','", ")", "if", "flags", "[", "\"sample_vocabulary\"", "]", "!=", "'sample'", "else", "flags", "[", "\"num_intransitive_verbs\"", "]", "\n", "transitive_verbs", "=", "flags", "[", "\"transitive_verbs\"", "]", ".", "split", "(", "','", ")", "if", "flags", "[", "\"sample_vocabulary\"", "]", "!=", "'sample'", "else", "flags", "[", "\"num_transitive_verbs\"", "]", "\n", "adverbs", "=", "flags", "[", "\"adverbs\"", "]", ".", "split", "(", "','", ")", "if", "flags", "[", "\"sample_vocabulary\"", "]", "!=", "'sample'", "else", "flags", "[", "\"num_adverbs\"", "]", "\n", "nouns", "=", "flags", "[", "\"nouns\"", "]", ".", "split", "(", "','", ")", "if", "flags", "[", "\"sample_vocabulary\"", "]", "!=", "'sample'", "else", "flags", "[", "\"num_nouns\"", "]", "\n", "if", "flags", "[", "\"sample_vocabulary\"", "]", "!=", "'sample'", ":", "\n", "# Special case when no color or size adjectives specified.", "\n", "            ", "color_adjectives", "=", "flags", "[", "\"color_adjectives\"", "]", ".", "split", "(", "','", ")", "if", "flags", "[", "\"color_adjectives\"", "]", "else", "[", "]", "\n", "size_adjectives", "=", "flags", "[", "\"size_adjectives\"", "]", ".", "split", "(", "','", ")", "if", "flags", "[", "\"size_adjectives\"", "]", "else", "[", "]", "\n", "", "else", ":", "\n", "            ", "color_adjectives", "=", "flags", "[", "\"num_color_adjectives\"", "]", "\n", "size_adjectives", "=", "flags", "[", "\"num_size_adjectives\"", "]", "\n", "\n", "# Sample a vocabulary and a grammar with rules of form NT -> T and T -> {words from vocab}.", "\n", "", "grounded_scan", "=", "GroundedScan", "(", "\n", "intransitive_verbs", "=", "intransitive_verbs", ",", "transitive_verbs", "=", "transitive_verbs", ",", "adverbs", "=", "adverbs", ",", "nouns", "=", "nouns", ",", "\n", "color_adjectives", "=", "color_adjectives", ",", "size_adjectives", "=", "size_adjectives", ",", "\n", "min_object_size", "=", "flags", "[", "\"min_object_size\"", "]", ",", "max_object_size", "=", "flags", "[", "\"max_object_size\"", "]", ",", "\n", "percentage_train", "=", "flags", "[", "\"percentage_train\"", "]", ",", "percentage_dev", "=", "flags", "[", "\"percentage_dev\"", "]", ",", "\n", "sample_vocabulary", "=", "flags", "[", "\"sample_vocabulary\"", "]", ",", "save_directory", "=", "flags", "[", "\"output_directory\"", "]", ",", "\n", "grid_size", "=", "flags", "[", "\"grid_size\"", "]", ",", "type_grammar", "=", "flags", "[", "\"type_grammar\"", "]", ")", "\n", "\n", "# Generate all possible commands from the grammar and pair them with relevant situations.", "\n", "grounded_scan", ".", "get_data_pairs", "(", "max_examples", "=", "flags", "[", "\"max_examples\"", "]", ",", "\n", "num_resampling", "=", "flags", "[", "'num_resampling'", "]", ",", "\n", "other_objects_sample_percentage", "=", "flags", "[", "'other_objects_sample_percentage'", "]", ",", "\n", "visualize_per_template", "=", "flags", "[", "'visualize_per_template'", "]", ",", "\n", "visualize_per_split", "=", "flags", "[", "'visualize_per_split'", "]", ",", "\n", "split_type", "=", "flags", "[", "\"split\"", "]", ",", "\n", "train_percentage", "=", "flags", "[", "'percentage_train'", "]", ",", "\n", "min_other_objects", "=", "flags", "[", "'min_other_objects'", "]", ",", "\n", "k_shot_generalization", "=", "flags", "[", "'k_shot_generalization'", "]", ",", "\n", "make_dev_set", "=", "flags", "[", "\"make_dev_set\"", "]", ",", "\n", "cut_off_target_length", "=", "flags", "[", "\"cut_off_target_length\"", "]", ")", "\n", "logger", ".", "info", "(", "\"Gathering dataset statistics...\"", ")", "\n", "grounded_scan", ".", "save_dataset_statistics", "(", "split", "=", "\"train\"", ")", "\n", "if", "flags", "[", "\"split\"", "]", "==", "\"uniform\"", "or", "flags", "[", "\"split\"", "]", "==", "\"target_lengths\"", ":", "\n", "            ", "if", "flags", "[", "\"make_dev_set\"", "]", ":", "\n", "                ", "grounded_scan", ".", "save_dataset_statistics", "(", "split", "=", "\"dev\"", ")", "\n", "", "grounded_scan", ".", "save_dataset_statistics", "(", "split", "=", "\"test\"", ")", "\n", "if", "flags", "[", "\"split\"", "]", "==", "\"target_lengths\"", ":", "\n", "                ", "grounded_scan", ".", "save_dataset_statistics", "(", "split", "=", "\"target_lengths\"", ")", "\n", "", "", "elif", "flags", "[", "\"split\"", "]", "==", "\"generalization\"", ":", "\n", "            ", "splits", "=", "[", "\"test\"", ",", "\"visual\"", ",", "\"situational_1\"", ",", "\"situational_2\"", ",", "\"contextual\"", ",", "\"adverb_1\"", ",", "\"adverb_2\"", ",", "\n", "\"visual_easier\"", "]", "\n", "if", "flags", "[", "\"make_dev_set\"", "]", ":", "\n", "                ", "splits", "+=", "[", "\"dev\"", "]", "\n", "", "for", "split", "in", "splits", ":", "\n", "                ", "grounded_scan", ".", "save_dataset_statistics", "(", "split", "=", "split", ")", "\n", "", "", "dataset_path", "=", "grounded_scan", ".", "save_dataset", "(", "flags", "[", "'save_dataset_as'", "]", ")", "\n", "grounded_scan", ".", "visualize_data_examples", "(", ")", "\n", "logger", ".", "info", "(", "\"Saved dataset to {}\"", ".", "format", "(", "dataset_path", ")", ")", "\n", "if", "flags", "[", "'count_equivalent_examples'", "]", ":", "\n", "            ", "if", "flags", "[", "\"split\"", "]", "==", "\"uniform\"", ":", "\n", "                ", "splits_to_count", "=", "[", "\"test\"", "]", "\n", "", "elif", "flags", "[", "\"split\"", "]", "==", "\"generalization\"", ":", "\n", "                ", "splits_to_count", "=", "[", "\"visual\"", ",", "\"situational_1\"", ",", "\"situational_2\"", ",", "\"contextual\"", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unknown option for flag --split: {}\"", ".", "format", "(", "flags", "[", "\"split\"", "]", ")", ")", "\n", "", "for", "split", "in", "splits_to_count", ":", "\n", "                ", "logger", ".", "info", "(", "\"Equivalent examples in train and testset: {}\"", ".", "format", "(", "\n", "grounded_scan", ".", "count_equivalent_examples", "(", "\"train\"", ",", "split", ")", ")", ")", "\n", "", "", "", "elif", "flags", "[", "'mode'", "]", "==", "'execute_commands'", ":", "\n", "        ", "files", "=", "flags", "[", "\"predicted_commands_files\"", "]", ".", "split", "(", "\",\"", ")", "\n", "for", "file", "in", "files", ":", "\n", "            ", "logger", ".", "info", "(", "\"Performing error analysis on file with predictions: {}\"", ".", "format", "(", "\n", "file", ")", ")", "\n", "grounded_scan", "=", "GroundedScan", ".", "load_dataset_from_file", "(", "flags", "[", "\"load_dataset_from\"", "]", ",", "\n", "flags", "[", "\"output_directory\"", "]", ")", "\n", "grounded_scan", ".", "visualize_prediction", "(", "os", ".", "path", ".", "join", "(", "flags", "[", "\"output_directory\"", "]", ",", "file", ")", ",", "\n", "only_save_errors", "=", "flags", "[", "\"only_save_errors\"", "]", ")", "\n", "logger", ".", "info", "(", "\"Saved visualizations in directory: {}.\"", ".", "format", "(", "flags", "[", "\"output_directory\"", "]", ")", ")", "\n", "", "", "elif", "flags", "[", "'mode'", "]", "==", "'position_analysis'", ":", "\n", "        ", "files", "=", "flags", "[", "\"predicted_commands_files\"", "]", ".", "split", "(", "\",\"", ")", "\n", "workbook", "=", "Workbook", "(", ")", "\n", "for", "file", "in", "files", ":", "\n", "            ", "logger", ".", "info", "(", "\"Performing position analysis on file with predictions: {}\"", ".", "format", "(", "\n", "file", ")", ")", "\n", "grounded_scan", "=", "GroundedScan", ".", "load_dataset_from_file", "(", "flags", "[", "\"load_dataset_from\"", "]", ",", "\n", "flags", "[", "\"output_directory\"", "]", ")", "\n", "grounded_scan", ".", "position_analysis", "(", "os", ".", "path", ".", "join", "(", "flags", "[", "\"output_directory\"", "]", ",", "file", ")", ",", "\n", "workbook", "=", "workbook", ")", "\n", "logger", ".", "info", "(", "\"Wrote position analysis for {}\"", ".", "format", "(", "file", ")", ")", "\n", "", "outfile_excel", "=", "os", ".", "path", ".", "join", "(", "flags", "[", "\"output_directory\"", "]", ",", "\"position_analysis.xls\"", ")", "\n", "workbook", ".", "save", "(", "outfile_excel", ")", "\n", "logger", ".", "info", "(", "\"Done.\"", ")", "\n", "", "elif", "flags", "[", "'mode'", "]", "==", "'test'", ":", "\n", "        ", "logger", ".", "info", "(", "\"Running all tests..\"", ")", "\n", "run_all_tests", "(", ")", "\n", "", "elif", "flags", "[", "'mode'", "]", "==", "'error_analysis'", ":", "\n", "        ", "files", "=", "flags", "[", "\"predicted_commands_files\"", "]", ".", "split", "(", "\",\"", ")", "\n", "for", "file", "in", "files", ":", "\n", "            ", "file_name", "=", "file", ".", "split", "(", "\".json\"", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "\"Performing error analysis on file with predictions: {}\"", ".", "format", "(", "\n", "file", ")", ")", "\n", "grounded_scan", "=", "GroundedScan", ".", "load_dataset_from_file", "(", "flags", "[", "\"load_dataset_from\"", "]", ",", "\n", "flags", "[", "\"output_directory\"", "]", ")", "\n", "save_plots_in", "=", "os", ".", "path", ".", "join", "(", "flags", "[", "\"output_directory\"", "]", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_plots_in", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "save_plots_in", ")", "\n", "", "grounded_scan", ".", "error_analysis", "(", "predictions_file", "=", "os", ".", "path", ".", "join", "(", "flags", "[", "\"output_directory\"", "]", ",", "file", ")", ",", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "save_plots_in", ",", "\"error_analysis.txt\"", ")", ",", "\n", "save_directory", "=", "save_plots_in", ")", "\n", "logger", ".", "info", "(", "\"Wrote data to path: {}.\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "save_plots_in", ",", "\"error_analysis.txt\"", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"Saved plots in directory: {}.\"", ".", "format", "(", "save_plots_in", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown value for command-line argument 'mode'={}.\"", ".", "format", "(", "flags", "[", "'mode'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.topo_sort": [[12, 29], ["list", "list", "len", "list.remove", "out.append", "len", "any"], "function", ["None"], ["def", "topo_sort", "(", "items", ",", "constraints", ")", ":", "\n", "    ", "if", "not", "constraints", ":", "\n", "        ", "return", "items", "\n", "", "items", "=", "list", "(", "items", ")", "\n", "constraints", "=", "list", "(", "constraints", ")", "\n", "out", "=", "[", "]", "\n", "while", "len", "(", "items", ")", ">", "0", ":", "\n", "        ", "roots", "=", "[", "\n", "i", "for", "i", "in", "items", "\n", "if", "not", "any", "(", "c", "[", "1", "]", "==", "i", "for", "c", "in", "constraints", ")", "\n", "]", "\n", "assert", "len", "(", "roots", ")", ">", "0", ",", "(", "items", ",", "constraints", ")", "\n", "to_pop", "=", "roots", "[", "0", "]", "\n", "items", ".", "remove", "(", "to_pop", ")", "\n", "constraints", "=", "[", "c", "for", "c", "in", "constraints", "if", "c", "[", "0", "]", "!=", "to_pop", "]", "\n", "out", ".", "append", "(", "to_pop", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.random_weights": [[31, 33], ["numpy.random.random"], "function", ["None"], ["", "def", "random_weights", "(", "size", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "return", "2", "*", "(", "np", ".", "random", ".", "random", "(", "size", ")", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.accept_weights": [[35, 37], ["numpy.ones"], "function", ["None"], ["", "def", "accept_weights", "(", "size", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "return", "np", ".", "ones", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.plan_step": [[39, 49], ["None"], "function", ["None"], ["", "def", "plan_step", "(", "position", ":", "Tuple", "[", "int", ",", "int", "]", ",", "move_direction", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n\n    :param position: current position of form (x-axis, y-axis) (i.e. column, row)\n    :param move_direction: East is 0, south is 1, west is 2, north is 3.\n    :return: next position of form (x-axis, y-axis) (i.e. column, row)\n    \"\"\"", "\n", "assert", "0", "<=", "move_direction", "<", "4", "\n", "dir_vec", "=", "DIR_TO_VEC", "[", "move_direction", "]", "\n", "return", "position", "+", "dir_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.one_hot": [[51, 55], ["numpy.zeros"], "function", ["None"], ["", "def", "one_hot", "(", "size", ":", "int", ",", "idx", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "one_hot_vector", "=", "np", ".", "zeros", "(", "size", ",", "dtype", "=", "int", ")", "\n", "one_hot_vector", "[", "idx", "]", "=", "1", "\n", "return", "one_hot_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.generate_possible_object_names": [[57, 61], ["None"], "function", ["None"], ["", "def", "generate_possible_object_names", "(", "color", ":", "str", ",", "shape", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "# TODO: does this still make sense when size is not small or large", "\n", "    ", "names", "=", "[", "shape", ",", "' '", ".", "join", "(", "[", "color", ",", "shape", "]", ")", "]", "\n", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.save_counter": [[63, 67], ["file.write", "counter.items", "file.write"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.logger.logger.DummyTqdmFile.write"], ["", "def", "save_counter", "(", "description", ",", "counter", ",", "file", ")", ":", "\n", "    ", "file", ".", "write", "(", "description", "+", "\": \\n\"", ")", "\n", "for", "key", ",", "occurrence_count", "in", "counter", ".", "items", "(", ")", ":", "\n", "        ", "file", ".", "write", "(", "\"   {}: {}\\n\"", ".", "format", "(", "key", ",", "occurrence_count", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.bar_plot": [[69, 90], ["list", "list.sort", "numpy.arange", "matplotlib.bar", "matplotlib.gcf().subplots_adjust", "matplotlib.xticks", "matplotlib.ylabel", "matplotlib.title", "matplotlib.savefig", "matplotlib.close", "values.items", "len", "len", "len", "len", "matplotlib.gcf"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.close"], ["", "", "def", "bar_plot", "(", "values", ":", "dict", ",", "title", ":", "str", ",", "save_path", ":", "str", ",", "errors", "=", "{", "}", ",", "y_axis_label", "=", "\"Occurrence\"", ")", ":", "\n", "    ", "sorted_values", "=", "list", "(", "values", ".", "items", "(", ")", ")", "\n", "sorted_values", "=", "[", "(", "y", ",", "x", ")", "for", "x", ",", "y", "in", "sorted_values", "]", "\n", "sorted_values", ".", "sort", "(", ")", "\n", "values_per_label", "=", "[", "value", "[", "0", "]", "for", "value", "in", "sorted_values", "]", "\n", "if", "len", "(", "errors", ")", ">", "0", ":", "\n", "        ", "sorted_errors", "=", "[", "errors", "[", "value", "[", "1", "]", "]", "for", "value", "in", "sorted_values", "]", "\n", "", "else", ":", "\n", "        ", "sorted_errors", "=", "None", "\n", "", "labels", "=", "[", "value", "[", "1", "]", "for", "value", "in", "sorted_values", "]", "\n", "assert", "len", "(", "labels", ")", "==", "len", "(", "values_per_label", ")", "\n", "y_pos", "=", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", "\n", "\n", "plt", ".", "bar", "(", "y_pos", ",", "values_per_label", ",", "yerr", "=", "sorted_errors", ",", "align", "=", "'center'", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "gcf", "(", ")", ".", "subplots_adjust", "(", "bottom", "=", "0.2", ",", ")", "\n", "plt", ".", "xticks", "(", "y_pos", ",", "labels", ",", "rotation", "=", "90", ",", "fontsize", "=", "\"xx-small\"", ")", "\n", "plt", ".", "ylabel", "(", "y_axis_label", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "\n", "plt", ".", "savefig", "(", "save_path", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.grouped_bar_plot": [[92, 122], ["list", "numpy.arange", "matplotlib.subplots", "ax.bar", "ax.bar", "matplotlib.gcf().subplots_adjust", "matplotlib.xticks", "matplotlib.ylabel", "matplotlib.title", "ax.legend", "matplotlib.savefig", "matplotlib.close", "values.items", "list.sort", "len", "len", "len", "len", "len", "len", "matplotlib.gcf"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.close"], ["", "def", "grouped_bar_plot", "(", "values", ":", "dict", ",", "group_one_key", ":", "Any", ",", "group_two_key", ":", "Any", ",", "title", ":", "str", ",", "save_path", ":", "str", ",", "\n", "errors_group_one", "=", "{", "}", ",", "errors_group_two", "=", "{", "}", ",", "y_axis_label", "=", "\"Occurence\"", ",", "sort_on_key", "=", "True", ")", ":", "\n", "    ", "sorted_values", "=", "list", "(", "values", ".", "items", "(", ")", ")", "\n", "if", "sort_on_key", ":", "\n", "        ", "sorted_values", ".", "sort", "(", ")", "\n", "", "values_group_one", "=", "[", "value", "[", "1", "]", "[", "group_one_key", "]", "for", "value", "in", "sorted_values", "]", "\n", "values_group_two", "=", "[", "value", "[", "1", "]", "[", "group_two_key", "]", "for", "value", "in", "sorted_values", "]", "\n", "if", "len", "(", "errors_group_one", ")", ">", "0", ":", "\n", "        ", "sorted_errors_group_one", "=", "[", "errors_group_one", "[", "value", "[", "0", "]", "]", "for", "value", "in", "sorted_values", "]", "\n", "sorted_errors_group_two", "=", "[", "errors_group_two", "[", "value", "[", "0", "]", "]", "for", "value", "in", "sorted_values", "]", "\n", "", "else", ":", "\n", "        ", "sorted_errors_group_one", "=", "None", "\n", "sorted_errors_group_two", "=", "None", "\n", "", "labels", "=", "[", "value", "[", "0", "]", "for", "value", "in", "sorted_values", "]", "\n", "assert", "len", "(", "labels", ")", "==", "len", "(", "values_group_one", ")", "\n", "assert", "len", "(", "labels", ")", "==", "len", "(", "values_group_two", ")", "\n", "y_pos", "=", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "width", "=", "0.35", "\n", "p1", "=", "ax", ".", "bar", "(", "y_pos", ",", "values_group_one", ",", "width", ",", "yerr", "=", "sorted_errors_group_one", ",", "align", "=", "'center'", ",", "alpha", "=", "0.5", ")", "\n", "p2", "=", "ax", ".", "bar", "(", "y_pos", "+", "width", ",", "values_group_two", ",", "width", ",", "yerr", "=", "sorted_errors_group_two", ",", "align", "=", "'center'", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "gcf", "(", ")", ".", "subplots_adjust", "(", "bottom", "=", "0.2", ",", ")", "\n", "plt", ".", "xticks", "(", "y_pos", ",", "labels", ",", "rotation", "=", "90", ",", "fontsize", "=", "\"xx-small\"", ")", "\n", "plt", ".", "ylabel", "(", "y_axis_label", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "ax", ".", "legend", "(", "(", "p1", "[", "0", "]", ",", "p2", "[", "0", "]", ")", ",", "(", "group_one_key", ",", "group_two_key", ")", ")", "\n", "\n", "plt", ".", "savefig", "(", "save_path", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.numpy_array_to_image": [[124, 126], ["matplotlib.imsave"], "function", ["None"], ["", "def", "numpy_array_to_image", "(", "numpy_array", ",", "image_name", ")", ":", "\n", "    ", "plt", ".", "imsave", "(", "image_name", ",", "numpy_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.GroundedScan.helpers.image_to_numpy_array": [[128, 131], ["cv2.imread", "numpy.flip"], "function", ["None"], ["", "def", "image_to_numpy_array", "(", "image_path", ")", ":", "\n", "    ", "im", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "return", "np", ".", "flip", "(", "im", ",", "2", ")", "# cv2 returns image in BGR order", "\n", "", ""]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.ReseedWrapper.__init__": [[18, 22], ["list", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "seeds", "=", "[", "0", "]", ",", "seed_idx", "=", "0", ")", ":", "\n", "        ", "self", ".", "seeds", "=", "list", "(", "seeds", ")", "\n", "self", ".", "seed_idx", "=", "seed_idx", "\n", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.ReseedWrapper.reset": [[23, 28], ["wrappers.ReseedWrapper.env.seed", "wrappers.ReseedWrapper.env.reset", "len"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.seed", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "seed", "=", "self", ".", "seeds", "[", "self", ".", "seed_idx", "]", "\n", "self", ".", "seed_idx", "=", "(", "self", ".", "seed_idx", "+", "1", ")", "%", "len", "(", "self", ".", "seeds", ")", "\n", "self", ".", "env", ".", "seed", "(", "seed", ")", "\n", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.ReseedWrapper.step": [[29, 32], ["wrappers.ReseedWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.ActionBonus.__init__": [[40, 43], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "counts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.ActionBonus.step": [[44, 63], ["wrappers.ActionBonus.env.step", "tuple", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "env", "=", "self", ".", "unwrapped", "\n", "tup", "=", "(", "tuple", "(", "env", ".", "agent_pos", ")", ",", "env", ".", "agent_dir", ",", "action", ")", "\n", "\n", "# Get the count for this (s,a) pair", "\n", "pre_count", "=", "0", "\n", "if", "tup", "in", "self", ".", "counts", ":", "\n", "            ", "pre_count", "=", "self", ".", "counts", "[", "tup", "]", "\n", "\n", "# Update the count for this (s,a) pair", "\n", "", "new_count", "=", "pre_count", "+", "1", "\n", "self", ".", "counts", "[", "tup", "]", "=", "new_count", "\n", "\n", "bonus", "=", "1", "/", "math", ".", "sqrt", "(", "new_count", ")", "\n", "reward", "+=", "bonus", "\n", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.ActionBonus.reset": [[64, 66], ["wrappers.ActionBonus.env.reset"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.StateBonus.__init__": [[73, 76], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "counts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.StateBonus.step": [[77, 98], ["wrappers.StateBonus.env.step", "tuple", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "# Tuple based on which we index the counts", "\n", "# We use the position after an update", "\n", "env", "=", "self", ".", "unwrapped", "\n", "tup", "=", "(", "tuple", "(", "env", ".", "agent_pos", ")", ")", "\n", "\n", "# Get the count for this key", "\n", "pre_count", "=", "0", "\n", "if", "tup", "in", "self", ".", "counts", ":", "\n", "            ", "pre_count", "=", "self", ".", "counts", "[", "tup", "]", "\n", "\n", "# Update the count for this key", "\n", "", "new_count", "=", "pre_count", "+", "1", "\n", "self", ".", "counts", "[", "tup", "]", "=", "new_count", "\n", "\n", "bonus", "=", "1", "/", "math", ".", "sqrt", "(", "new_count", ")", "\n", "reward", "+=", "bonus", "\n", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.StateBonus.reset": [[99, 101], ["wrappers.StateBonus.env.reset"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.ImgObsWrapper.__init__": [[107, 111], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "observation_space", "=", "env", ".", "observation_space", ".", "spaces", "[", "'image'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.ImgObsWrapper.observation": [[112, 114], ["None"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "obs", "[", "'image'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.RGBImgObsWrapper.__init__": [[122, 132], ["super().__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "tile_size", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "tile_size", "=", "tile_size", "\n", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "env", ".", "width", "*", "tile_size", ",", "self", ".", "env", ".", "height", "*", "tile_size", ",", "3", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.RGBImgObsWrapper.observation": [[134, 140], ["env.render"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.render"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "env", "=", "self", ".", "unwrapped", "\n", "return", "env", ".", "render", "(", "\n", "mode", "=", "'rgb_array'", ",", "\n", "highlight", "=", "False", ",", "\n", "tile_size", "=", "self", ".", "tile_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.FullyObsWrapper.__init__": [[147, 155], ["super().__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "env", ".", "width", ",", "self", ".", "env", ".", "height", ",", "3", ")", ",", "# number of cells", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.FullyObsWrapper.observation": [[157, 167], ["env.grid.encode", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.encode"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "env", "=", "self", ".", "unwrapped", "\n", "full_grid", "=", "env", ".", "grid", ".", "encode", "(", ")", "\n", "full_grid", "[", "env", ".", "agent_pos", "[", "0", "]", "]", "[", "env", ".", "agent_pos", "[", "1", "]", "]", "=", "np", ".", "array", "(", "[", "\n", "OBJECT_TO_IDX", "[", "'agent'", "]", ",", "\n", "COLOR_TO_IDX", "[", "'red'", "]", ",", "\n", "env", ".", "agent_dir", "\n", "]", ")", "\n", "\n", "return", "full_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.FlatObsWrapper.__init__": [[174, 192], ["super().__init__", "functools.reduce", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "maxStrLen", "=", "96", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "maxStrLen", "=", "maxStrLen", "\n", "self", ".", "numCharCodes", "=", "27", "\n", "\n", "imgSpace", "=", "env", ".", "observation_space", ".", "spaces", "[", "'image'", "]", "\n", "imgSize", "=", "reduce", "(", "operator", ".", "mul", ",", "imgSpace", ".", "shape", ",", "1", ")", "\n", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "1", ",", "imgSize", "+", "self", ".", "numCharCodes", "*", "self", ".", "maxStrLen", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n", "\n", "self", ".", "cachedStr", "=", "None", "\n", "self", ".", "cachedArray", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.FlatObsWrapper.observation": [[193, 218], ["numpy.concatenate", "mission.lower.lower.lower", "numpy.zeros", "enumerate", "len", "len", "image.flatten", "wrappers.FlatObsWrapper.cachedArray.flatten", "ord", "ord", "ord", "ord"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "image", "=", "obs", "[", "'image'", "]", "\n", "mission", "=", "obs", "[", "'mission'", "]", "\n", "\n", "# Cache the last-encoded mission string", "\n", "if", "mission", "!=", "self", ".", "cachedStr", ":", "\n", "            ", "assert", "len", "(", "mission", ")", "<=", "self", ".", "maxStrLen", ",", "'mission string too long ({} chars)'", ".", "format", "(", "len", "(", "mission", ")", ")", "\n", "mission", "=", "mission", ".", "lower", "(", ")", "\n", "\n", "strArray", "=", "np", ".", "zeros", "(", "shape", "=", "(", "self", ".", "maxStrLen", ",", "self", ".", "numCharCodes", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "for", "idx", ",", "ch", "in", "enumerate", "(", "mission", ")", ":", "\n", "                ", "if", "ch", ">=", "'a'", "and", "ch", "<=", "'z'", ":", "\n", "                    ", "chNo", "=", "ord", "(", "ch", ")", "-", "ord", "(", "'a'", ")", "\n", "", "elif", "ch", "==", "' '", ":", "\n", "                    ", "chNo", "=", "ord", "(", "'z'", ")", "-", "ord", "(", "'a'", ")", "+", "1", "\n", "", "assert", "chNo", "<", "self", ".", "numCharCodes", ",", "'%s : %d'", "%", "(", "ch", ",", "chNo", ")", "\n", "strArray", "[", "idx", ",", "chNo", "]", "=", "1", "\n", "\n", "", "self", ".", "cachedStr", "=", "mission", "\n", "self", ".", "cachedArray", "=", "strArray", "\n", "\n", "", "obs", "=", "np", ".", "concatenate", "(", "(", "image", ".", "flatten", "(", ")", ",", "self", ".", "cachedArray", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.AgentViewWrapper.__init__": [[224, 241], ["super().__init__", "gym.spaces.Box", "gym.spaces.Dict"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "agent_view_size", "=", "7", ")", ":", "\n", "        ", "super", "(", "AgentViewWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "# Override default view size", "\n", "env", ".", "unwrapped", ".", "agent_view_size", "=", "agent_view_size", "\n", "\n", "# Compute observation space with specified view size", "\n", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "agent_view_size", ",", "agent_view_size", ",", "3", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n", "\n", "# Override the environment's observation space", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "{", "\n", "'image'", ":", "observation_space", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.AgentViewWrapper.reset": [[243, 245], ["wrappers.AgentViewWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.wrappers.AgentViewWrapper.step": [[246, 248], ["wrappers.AgentViewWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Window.__init__": [[14, 52], ["PyQt5.QtWidgets.QMainWindow.__init__", "rendering.Window.setWindowTitle", "PyQt5.QtWidgets.QLabel", "rendering.Window.imgLabel.setFrameStyle", "PyQt5.QtWidgets.QTextEdit", "rendering.Window.missionBox.setReadOnly", "rendering.Window.missionBox.setMinimumSize", "PyQt5.QtWidgets.QHBoxLayout", "PyQt5.QtWidgets.QHBoxLayout.addStretch", "PyQt5.QtWidgets.QHBoxLayout.addWidget", "PyQt5.QtWidgets.QHBoxLayout.addStretch", "PyQt5.QtWidgets.QVBoxLayout", "PyQt5.QtWidgets.QVBoxLayout.addLayout", "PyQt5.QtWidgets.QVBoxLayout.addWidget", "PyQt5.QtWidgets.QWidget", "rendering.Window.setCentralWidget", "rendering.Window.mainWidget.setLayout", "rendering.Window.show", "rendering.Window.setFocus"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "setWindowTitle", "(", "'MiniGrid Gym Environment'", ")", "\n", "\n", "# Image label to display the rendering", "\n", "self", ".", "imgLabel", "=", "QLabel", "(", ")", "\n", "self", ".", "imgLabel", ".", "setFrameStyle", "(", "QFrame", ".", "Panel", "|", "QFrame", ".", "Sunken", ")", "\n", "\n", "# Text box for the mission", "\n", "self", ".", "missionBox", "=", "QTextEdit", "(", ")", "\n", "self", ".", "missionBox", ".", "setReadOnly", "(", "True", ")", "\n", "self", ".", "missionBox", ".", "setMinimumSize", "(", "400", ",", "100", ")", "\n", "\n", "# Center the image", "\n", "hbox", "=", "QHBoxLayout", "(", ")", "\n", "hbox", ".", "addStretch", "(", "1", ")", "\n", "hbox", ".", "addWidget", "(", "self", ".", "imgLabel", ")", "\n", "hbox", ".", "addStretch", "(", "1", ")", "\n", "\n", "# Arrange widgets vertically", "\n", "vbox", "=", "QVBoxLayout", "(", ")", "\n", "vbox", ".", "addLayout", "(", "hbox", ")", "\n", "vbox", ".", "addWidget", "(", "self", ".", "missionBox", ")", "\n", "\n", "# Create a main widget for the window", "\n", "self", ".", "mainWidget", "=", "QWidget", "(", "self", ")", "\n", "self", ".", "setCentralWidget", "(", "self", ".", "mainWidget", ")", "\n", "self", ".", "mainWidget", ".", "setLayout", "(", "vbox", ")", "\n", "\n", "# Show the application window", "\n", "self", ".", "show", "(", ")", "\n", "self", ".", "setFocus", "(", ")", "\n", "\n", "self", ".", "closed", "=", "False", "\n", "\n", "# Callback for keyboard events", "\n", "self", ".", "keyDownCb", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Window.closeEvent": [[53, 55], ["None"], "methods", ["None"], ["", "def", "closeEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "self", ".", "closed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Window.setPixmap": [[56, 58], ["rendering.Window.imgLabel.setPixmap"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Window.setPixmap"], ["", "def", "setPixmap", "(", "self", ",", "pixmap", ")", ":", "\n", "        ", "self", ".", "imgLabel", ".", "setPixmap", "(", "pixmap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Window.setText": [[59, 61], ["rendering.Window.missionBox.setPlainText"], "methods", ["None"], ["", "def", "setText", "(", "self", ",", "text", ")", ":", "\n", "        ", "self", ".", "missionBox", ".", "setPlainText", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Window.setKeyDownCb": [[62, 64], ["None"], "methods", ["None"], ["", "def", "setKeyDownCb", "(", "self", ",", "callback", ")", ":", "\n", "        ", "self", ".", "keyDownCb", "=", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Window.keyPressEvent": [[65, 98], ["rendering.Window.keyDownCb", "e.key", "e.key", "e.key", "e.key", "e.key", "e.key", "e.key", "e.key", "e.key", "e.key", "e.key", "e.key"], "methods", ["None"], ["", "def", "keyPressEvent", "(", "self", ",", "e", ")", ":", "\n", "        ", "if", "self", ".", "keyDownCb", "==", "None", ":", "\n", "            ", "return", "\n", "\n", "", "keyName", "=", "None", "\n", "if", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Left", ":", "\n", "            ", "keyName", "=", "'LEFT'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Right", ":", "\n", "            ", "keyName", "=", "'RIGHT'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Up", ":", "\n", "            ", "keyName", "=", "'UP'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Down", ":", "\n", "            ", "keyName", "=", "'DOWN'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Space", ":", "\n", "            ", "keyName", "=", "'SPACE'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Return", ":", "\n", "            ", "keyName", "=", "'RETURN'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Alt", ":", "\n", "            ", "keyName", "=", "'ALT'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Control", ":", "\n", "            ", "keyName", "=", "'CTRL'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_PageUp", ":", "\n", "            ", "keyName", "=", "'PAGE_UP'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_PageDown", ":", "\n", "            ", "keyName", "=", "'PAGE_DOWN'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Backspace", ":", "\n", "            ", "keyName", "=", "'BACKSPACE'", "\n", "", "elif", "e", ".", "key", "(", ")", "==", "Qt", ".", "Key_Escape", ":", "\n", "            ", "keyName", "=", "'ESCAPE'", "\n", "\n", "", "if", "keyName", "==", "None", ":", "\n", "            ", "return", "\n", "", "self", ".", "keyDownCb", "(", "keyName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.__init__": [[101, 112], ["PyQt5.QtGui.QImage", "PyQt5.QtGui.QPainter", "PyQt5.QtWidgets.QApplication", "rendering.Window"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "height", ",", "ownWindow", "=", "False", ")", ":", "\n", "        ", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "\n", "self", ".", "img", "=", "QImage", "(", "width", ",", "height", ",", "QImage", ".", "Format_RGB888", ")", "\n", "self", ".", "painter", "=", "QPainter", "(", ")", "\n", "\n", "self", ".", "window", "=", "None", "\n", "if", "ownWindow", ":", "\n", "            ", "self", ".", "app", "=", "QApplication", "(", "[", "]", ")", "\n", "self", ".", "window", "=", "Window", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.close": [[113, 118], ["None"], "methods", ["None"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Deallocate resources used\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.beginFrame": [[119, 126], ["rendering.Renderer.painter.begin", "rendering.Renderer.painter.setRenderHint", "rendering.Renderer.painter.setBrush", "rendering.Renderer.painter.drawRect", "PyQt5.QtGui.QColor"], "methods", ["None"], ["", "def", "beginFrame", "(", "self", ")", ":", "\n", "        ", "self", ".", "painter", ".", "begin", "(", "self", ".", "img", ")", "\n", "self", ".", "painter", ".", "setRenderHint", "(", "QPainter", ".", "Antialiasing", ",", "False", ")", "\n", "\n", "# Clear the background", "\n", "self", ".", "painter", ".", "setBrush", "(", "QColor", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "painter", ".", "drawRect", "(", "0", ",", "0", ",", "self", ".", "width", "-", "1", ",", "self", ".", "height", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.endFrame": [[127, 136], ["rendering.Renderer.painter.end", "rendering.Renderer.window.setPixmap", "rendering.Renderer.app.processEvents", "rendering.Renderer.getPixmap"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Window.setPixmap", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.getPixmap"], ["", "def", "endFrame", "(", "self", ")", ":", "\n", "        ", "self", ".", "painter", ".", "end", "(", ")", "\n", "\n", "if", "self", ".", "window", ":", "\n", "            ", "if", "self", ".", "window", ".", "closed", ":", "\n", "                ", "self", ".", "window", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "window", ".", "setPixmap", "(", "self", ".", "getPixmap", "(", ")", ")", "\n", "self", ".", "app", ".", "processEvents", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.getPixmap": [[137, 139], ["PyQt5.QtGui.QPixmap.fromImage"], "methods", ["None"], ["", "", "", "def", "getPixmap", "(", "self", ")", ":", "\n", "        ", "return", "QPixmap", ".", "fromImage", "(", "self", ".", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.save": [[140, 147], ["rendering.Renderer.app.processEvents", "rendering.Renderer.window.show", "PyQt5.QtGui.QPixmap", "rendering.Renderer.window.mainWidget.render", "PyQt5.QtGui.QPixmap.save", "rendering.Renderer.window.mainWidget.size"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.render", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.size"], ["", "def", "save", "(", "self", ",", "save_location", ")", ":", "\n", "        ", "self", ".", "app", ".", "processEvents", "(", ")", "\n", "self", ".", "window", ".", "show", "(", ")", "\n", "pix", "=", "QPixmap", "(", "self", ".", "window", ".", "mainWidget", ".", "size", "(", ")", ")", "\n", "self", ".", "window", ".", "mainWidget", ".", "render", "(", "pix", ")", "\n", "success", "=", "pix", ".", "save", "(", "save_location", ")", "\n", "return", "success", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.getArray": [[148, 159], ["rendering.Renderer.img.bits().asstring", "numpy.frombuffer", "output.reshape.reshape.reshape", "rendering.Renderer.img.bits"], "methods", ["None"], ["", "def", "getArray", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get a numpy array of RGB pixel values.\n        The array will have shape (height, width, 3)\n        \"\"\"", "\n", "\n", "numBytes", "=", "self", ".", "width", "*", "self", ".", "height", "*", "3", "\n", "buf", "=", "self", ".", "img", ".", "bits", "(", ")", ".", "asstring", "(", "numBytes", ")", "\n", "output", "=", "np", ".", "frombuffer", "(", "buf", ",", "dtype", "=", "'uint8'", ")", "\n", "output", "=", "output", ".", "reshape", "(", "(", "self", ".", "height", ",", "self", ".", "width", ",", "3", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.getFullScreen": [[160, 168], ["PyQt5.QtGui.QPixmap", "rendering.Renderer.window.mainWidget.render", "PyQt5.QtGui.QPixmap.toImage", "PyQt5.QtGui.QPixmap.toImage.bits().asstring", "numpy.fromstring().reshape", "PyQt5.QtGui.QPixmap.save", "rendering.Renderer.window.mainWidget.size", "PyQt5.QtGui.QPixmap.toImage.bits", "numpy.fromstring", "PyQt5.QtGui.QPixmap.toImage.width", "PyQt5.QtGui.QPixmap.toImage.height", "PyQt5.QtGui.QPixmap.toImage.width", "PyQt5.QtGui.QPixmap.toImage.height"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.render", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.save", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.None.gSCAN_dataset.Vocabulary.size"], ["", "def", "getFullScreen", "(", "self", ",", "temp", ")", ":", "\n", "        ", "pix", "=", "QPixmap", "(", "self", ".", "window", ".", "mainWidget", ".", "size", "(", ")", ")", "\n", "self", ".", "window", ".", "mainWidget", ".", "render", "(", "pix", ")", "\n", "image", "=", "pix", ".", "toImage", "(", ")", "\n", "s", "=", "image", ".", "bits", "(", ")", ".", "asstring", "(", "image", ".", "width", "(", ")", "*", "image", ".", "height", "(", ")", "*", "3", ")", "\n", "arr", "=", "np", ".", "fromstring", "(", "s", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "(", "image", ".", "width", "(", ")", ",", "image", ".", "height", "(", ")", ",", "3", ")", ")", "\n", "pix", ".", "save", "(", "temp", ")", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.push": [[169, 171], ["rendering.Renderer.painter.save"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.save"], ["", "def", "push", "(", "self", ")", ":", "\n", "        ", "self", ".", "painter", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop": [[172, 174], ["rendering.Renderer.painter.restore"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "self", ".", "painter", ".", "restore", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.rotate": [[175, 177], ["rendering.Renderer.painter.rotate"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.rotate"], ["", "def", "rotate", "(", "self", ",", "degrees", ")", ":", "\n", "        ", "self", ".", "painter", ".", "rotate", "(", "degrees", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.translate": [[178, 180], ["rendering.Renderer.painter.translate"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.translate"], ["", "def", "translate", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "self", ".", "painter", ".", "translate", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.scale": [[181, 183], ["rendering.Renderer.painter.scale"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.scale"], ["", "def", "scale", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "self", ".", "painter", ".", "scale", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.setLineColor": [[184, 186], ["rendering.Renderer.painter.setPen", "PyQt5.QtGui.QColor"], "methods", ["None"], ["", "def", "setLineColor", "(", "self", ",", "r", ",", "g", ",", "b", ",", "a", "=", "255", ")", ":", "\n", "        ", "self", ".", "painter", ".", "setPen", "(", "QColor", "(", "r", ",", "g", ",", "b", ",", "a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.setColor": [[187, 189], ["rendering.Renderer.painter.setBrush", "PyQt5.QtGui.QColor"], "methods", ["None"], ["", "def", "setColor", "(", "self", ",", "r", ",", "g", ",", "b", ",", "a", "=", "255", ")", ":", "\n", "        ", "self", ".", "painter", ".", "setBrush", "(", "QColor", "(", "r", ",", "g", ",", "b", ",", "a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.setLineWidth": [[190, 194], ["rendering.Renderer.painter.pen", "rendering.Renderer.setWidthF", "rendering.Renderer.painter.setPen"], "methods", ["None"], ["", "def", "setLineWidth", "(", "self", ",", "width", ")", ":", "\n", "        ", "pen", "=", "self", ".", "painter", ".", "pen", "(", ")", "\n", "pen", ".", "setWidthF", "(", "width", ")", "\n", "self", ".", "painter", ".", "setPen", "(", "pen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.drawLine": [[195, 197], ["rendering.Renderer.painter.drawLine"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.drawLine"], ["", "def", "drawLine", "(", "self", ",", "x0", ",", "y0", ",", "x1", ",", "y1", ")", ":", "\n", "        ", "self", ".", "painter", ".", "drawLine", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.drawCircle": [[198, 201], ["PyQt5.QtCore.QPoint", "rendering.Renderer.painter.drawEllipse"], "methods", ["None"], ["", "def", "drawCircle", "(", "self", ",", "x", ",", "y", ",", "r", ")", ":", "\n", "        ", "center", "=", "QPoint", "(", "x", ",", "y", ")", "\n", "self", ".", "painter", ".", "drawEllipse", "(", "center", ",", "r", ",", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.drawPolygon": [[202, 206], ["map", "rendering.Renderer.painter.drawPolygon", "PyQt5.QtGui.QPolygon", "PyQt5.QtCore.QPoint"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.drawPolygon"], ["", "def", "drawPolygon", "(", "self", ",", "points", ")", ":", "\n", "        ", "\"\"\"Takes a list of points (tuples) as input\"\"\"", "\n", "points", "=", "map", "(", "lambda", "p", ":", "QPoint", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ")", ",", "points", ")", "\n", "self", ".", "painter", ".", "drawPolygon", "(", "QPolygon", "(", "points", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.drawPolyline": [[207, 211], ["map", "rendering.Renderer.painter.drawPolyline", "PyQt5.QtGui.QPolygon", "PyQt5.QtCore.QPoint"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.drawPolyline"], ["", "def", "drawPolyline", "(", "self", ",", "points", ")", ":", "\n", "        ", "\"\"\"Takes a list of points (tuples) as input\"\"\"", "\n", "points", "=", "map", "(", "lambda", "p", ":", "QPoint", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ")", ",", "points", ")", "\n", "self", ".", "painter", ".", "drawPolyline", "(", "QPolygon", "(", "points", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.fillRect": [[212, 214], ["rendering.Renderer.painter.fillRect", "PyQt5.QtCore.QRect", "PyQt5.QtGui.QColor"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.fillRect"], ["", "def", "fillRect", "(", "self", ",", "x", ",", "y", ",", "width", ",", "height", ",", "r", ",", "g", ",", "b", ",", "a", "=", "255", ")", ":", "\n", "        ", "self", ".", "painter", ".", "fillRect", "(", "QRect", "(", "x", ",", "y", ",", "width", ",", "height", ")", ",", "QColor", "(", "r", ",", "g", ",", "b", ",", "a", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.WorldObj.__init__": [[73, 101], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "type", ",", "color", ",", "size", "=", "1", ",", "vector_representation", "=", "None", ",", "object_representation", "=", "None", ",", "target", "=", "False", ",", "\n", "weight", "=", "\"light\"", ")", ":", "\n", "        ", "assert", "type", "in", "OBJECT_TO_IDX", ",", "type", "\n", "assert", "color", "in", "COLOR_TO_IDX", ",", "color", "\n", "assert", "1", "<=", "size", "<=", "4", ",", "\"Sizes outside of range [1,4] not supported.\"", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "color", "=", "color", "\n", "self", ".", "border_color", "=", "color", "\n", "self", ".", "contains", "=", "None", "\n", "self", ".", "size", "=", "size", "\n", "\n", "# Initial position of the object", "\n", "self", ".", "init_pos", "=", "None", "\n", "\n", "# Current position of the object", "\n", "self", ".", "cur_pos", "=", "None", "\n", "\n", "# Representations", "\n", "self", ".", "vector_representation", "=", "vector_representation", "\n", "self", ".", "object_representation", "=", "object_representation", "\n", "\n", "# Boolean whether an object is a target", "\n", "self", ".", "target", "=", "target", "\n", "\n", "# Determining whether a heavy object can be moved in the next step or not", "\n", "self", ".", "momentum", "=", "0", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "momentum_threshold", "=", "WEIGHT_TO_MOMENTUM", "[", "self", ".", "weight", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.WorldObj.can_overlap": [[102, 105], ["None"], "methods", ["None"], ["", "def", "can_overlap", "(", "self", ")", ":", "\n", "        ", "\"\"\"Can the agent overlap with this?\"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.WorldObj.can_pickup": [[106, 109], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "\"\"\"Can the agent pick this up?\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.WorldObj.can_push": [[110, 113], ["None"], "methods", ["None"], ["", "def", "can_push", "(", "self", ")", ":", "\n", "        ", "\"\"\"Can the agent push this?\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.WorldObj.render": [[114, 117], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "r", ")", ":", "\n", "        ", "\"\"\"Draw this object with the given renderer\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.WorldObj._set_color": [[118, 124], ["r.setLineColor", "r.setColor"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.setLineColor", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.setColor"], ["", "def", "_set_color", "(", "self", ",", "r", ")", ":", "\n", "        ", "\"\"\"Set the color of this object as the active drawing color\"\"\"", "\n", "c", "=", "COLORS", "[", "self", ".", "color", "]", "\n", "border_color", "=", "COLORS", "[", "self", ".", "border_color", "]", "\n", "r", ".", "setLineColor", "(", "border_color", "[", "0", "]", ",", "border_color", "[", "1", "]", ",", "border_color", "[", "2", "]", ")", "\n", "r", ".", "setColor", "(", "c", "[", "0", "]", ",", "c", "[", "1", "]", ",", "c", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Square.__init__": [[127, 131], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", "=", "'grey'", ",", "size", "=", "1", ",", "vector_representation", "=", "None", ",", "object_representation", "=", "None", ",", "target", "=", "False", ",", "\n", "weight", "=", "\"light\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'square'", ",", "color", ",", "size", ",", "vector_representation", "=", "vector_representation", ",", "\n", "object_representation", "=", "object_representation", ",", "target", "=", "target", ",", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Square.render": [[132, 141], ["minigrid.Square._set_color", "r.drawPolygon"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.WorldObj._set_color", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.drawPolygon"], ["", "def", "render", "(", "self", ",", "r", ")", ":", "\n", "        ", "self", ".", "_set_color", "(", "r", ")", "\n", "\n", "# TODO: max_size is 4 here hardcoded", "\n", "r", ".", "drawPolygon", "(", "[", "\n", "(", "0", ",", "CELL_PIXELS", "*", "(", "self", ".", "size", "/", "4", ")", ")", ",", "\n", "(", "CELL_PIXELS", "*", "(", "self", ".", "size", "/", "4", ")", ",", "CELL_PIXELS", "*", "(", "self", ".", "size", "/", "4", ")", ")", ",", "\n", "(", "CELL_PIXELS", "*", "(", "self", ".", "size", "/", "4", ")", ",", "0", ")", ",", "\n", "(", "0", ",", "0", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Square.can_pickup": [[143, 145], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Square.can_push": [[146, 148], ["None"], "methods", ["None"], ["", "def", "can_push", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Square.push": [[149, 156], ["None"], "methods", ["None"], ["", "def", "push", "(", "self", ")", ":", "\n", "        ", "self", ".", "momentum", "+=", "1", "\n", "if", "self", ".", "momentum", ">=", "self", ".", "momentum_threshold", ":", "\n", "            ", "self", ".", "momentum", "=", "0", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Cylinder.__init__": [[159, 162], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", "=", "'blue'", ",", "size", "=", "1", ",", "vector_representation", "=", "None", ",", "object_representation", "=", "None", ",", "weight", "=", "\"light\"", ")", ":", "\n", "        ", "super", "(", "Cylinder", ",", "self", ")", ".", "__init__", "(", "'cylinder'", ",", "color", ",", "size", ",", "vector_representation", ",", "\n", "object_representation", "=", "object_representation", ",", "weight", "=", "weight", ")", "\n", "# TODO: generalize sizes", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Cylinder.can_pickup": [[164, 166], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Cylinder.render": [[167, 178], ["minigrid.Cylinder._set_color", "r.drawPolygon"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.WorldObj._set_color", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.drawPolygon"], ["", "def", "render", "(", "self", ",", "r", ")", ":", "\n", "        ", "self", ".", "_set_color", "(", "r", ")", "\n", "\n", "# Vertical quad", "\n", "parallelogram_width", "=", "(", "CELL_PIXELS", "/", "2", ")", "*", "(", "self", ".", "size", "/", "4", ")", "\n", "parallelogram_height", "=", "CELL_PIXELS", "*", "(", "self", ".", "size", "/", "4", ")", "\n", "r", ".", "drawPolygon", "(", "[", "\n", "(", "CELL_PIXELS", "/", "2", ",", "0", ")", ",", "\n", "(", "CELL_PIXELS", "/", "2", "+", "parallelogram_width", ",", "0", ")", ",", "\n", "(", "CELL_PIXELS", "/", "2", ",", "parallelogram_height", ")", ",", "\n", "(", "CELL_PIXELS", "/", "2", "-", "parallelogram_width", ",", "parallelogram_height", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Cylinder.can_push": [[180, 182], ["None"], "methods", ["None"], ["", "def", "can_push", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Cylinder.push": [[183, 190], ["None"], "methods", ["None"], ["", "def", "push", "(", "self", ")", ":", "\n", "        ", "self", ".", "momentum", "+=", "1", "\n", "if", "self", ".", "momentum", ">=", "self", ".", "momentum_threshold", ":", "\n", "            ", "self", ".", "momentum", "=", "0", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Circle.__init__": [[193, 197], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", "=", "'blue'", ",", "size", "=", "1", ",", "vector_representation", "=", "None", ",", "object_representation", "=", "None", ",", "target", "=", "False", ",", "\n", "weight", "=", "\"light\"", ")", ":", "\n", "        ", "super", "(", "Circle", ",", "self", ")", ".", "__init__", "(", "'circle'", ",", "color", ",", "size", ",", "vector_representation", ",", "\n", "object_representation", "=", "object_representation", ",", "target", "=", "target", ",", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Circle.can_pickup": [[198, 200], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Circle.can_push": [[201, 203], ["None"], "methods", ["None"], ["", "def", "can_push", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Circle.render": [[204, 207], ["minigrid.Circle._set_color", "r.drawCircle"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.WorldObj._set_color", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.drawCircle"], ["", "def", "render", "(", "self", ",", "r", ")", ":", "\n", "        ", "self", ".", "_set_color", "(", "r", ")", "\n", "r", ".", "drawCircle", "(", "CELL_PIXELS", "*", "0.5", ",", "CELL_PIXELS", "*", "0.5", ",", "CELL_PIXELS", "//", "10", "*", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Circle.push": [[208, 215], ["None"], "methods", ["None"], ["", "def", "push", "(", "self", ")", ":", "\n", "        ", "self", ".", "momentum", "+=", "1", "\n", "if", "self", ".", "momentum", ">=", "self", ".", "momentum_threshold", ":", "\n", "            ", "self", ".", "momentum", "=", "0", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.__init__": [[222, 230], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "width", ",", "height", ",", "depth", ")", ":", "\n", "        ", "assert", "width", ">=", "3", "\n", "assert", "height", ">=", "3", "\n", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "_num_attributes_object", "=", "depth", "\n", "self", ".", "grid", "=", "[", "None", "]", "*", "width", "*", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.__contains__": [[231, 245], ["isinstance", "isinstance"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "isinstance", "(", "key", ",", "WorldObj", ")", ":", "\n", "            ", "for", "e", "in", "self", ".", "grid", ":", "\n", "                ", "if", "e", "is", "key", ":", "\n", "                    ", "return", "True", "\n", "", "", "", "elif", "isinstance", "(", "key", ",", "tuple", ")", ":", "\n", "            ", "for", "e", "in", "self", ".", "grid", ":", "\n", "                ", "if", "e", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "if", "(", "e", ".", "color", ",", "e", ".", "type", ")", "==", "key", ":", "\n", "                    ", "return", "True", "\n", "", "if", "key", "[", "0", "]", "is", "None", "and", "key", "[", "1", "]", "==", "e", ".", "type", ":", "\n", "                    ", "return", "True", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.__eq__": [[246, 250], ["minigrid.Grid.encode", "other.encode", "numpy.array_equal"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.encode", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.encode"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "grid1", "=", "self", ".", "encode", "(", ")", "\n", "grid2", "=", "other", ".", "encode", "(", ")", "\n", "return", "np", ".", "array_equal", "(", "grid2", ",", "grid1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.__ne__": [[251, 253], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "self", "==", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.copy": [[254, 257], ["deepcopy"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "from", "copy", "import", "deepcopy", "\n", "return", "deepcopy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set": [[258, 262], ["None"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "i", ",", "j", ",", "v", ")", ":", "\n", "        ", "assert", "i", ">=", "0", "and", "i", "<", "self", ".", "width", "\n", "assert", "j", ">=", "0", "and", "j", "<", "self", ".", "height", "\n", "self", ".", "grid", "[", "j", "*", "self", ".", "width", "+", "i", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get": [[263, 267], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "        ", "assert", "i", ">=", "0", "and", "i", "<", "self", ".", "width", "\n", "assert", "j", ">=", "0", "and", "j", "<", "self", ".", "height", "\n", "return", "self", ".", "grid", "[", "j", "*", "self", ".", "width", "+", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.rotate_left": [[268, 281], ["minigrid.Grid", "range", "range", "minigrid.Grid.get", "minigrid.Grid.set"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set"], ["", "def", "rotate_left", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Rotate the grid to the left (counter-clockwise)\n        \"\"\"", "\n", "\n", "grid", "=", "Grid", "(", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "width", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "height", ")", ":", "\n", "                ", "v", "=", "self", ".", "get", "(", "i", ",", "j", ")", "\n", "grid", ".", "set", "(", "j", ",", "grid", ".", "height", "-", "1", "-", "i", ",", "v", ")", "\n", "\n", "", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.slice": [[282, 303], ["minigrid.Grid", "range", "range", "minigrid.Grid.set", "minigrid.Grid.get", "minigrid.Square"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get"], ["", "def", "slice", "(", "self", ",", "topX", ",", "topY", ",", "width", ",", "height", ")", ":", "\n", "        ", "\"\"\"\n        Get a subset of the grid\n        \"\"\"", "\n", "\n", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "for", "j", "in", "range", "(", "0", ",", "height", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "width", ")", ":", "\n", "                ", "x", "=", "topX", "+", "i", "\n", "y", "=", "topY", "+", "j", "\n", "\n", "if", "x", ">=", "0", "and", "x", "<", "self", ".", "width", "and", "y", ">=", "0", "and", "y", "<", "self", ".", "height", ":", "\n", "                    ", "v", "=", "self", ".", "get", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "                    ", "v", "=", "Square", "(", ")", "\n", "\n", "", "grid", ".", "set", "(", "i", ",", "j", ",", "v", ")", "\n", "\n", "", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.render": [[304, 382], ["r.push", "r.scale", "r.setLineColor", "range", "range", "range", "r.pop", "len", "r.fillRect", "range", "r.drawLine", "r.drawLine", "range", "range", "minigrid.Grid.get", "r.push", "r.translate", "minigrid.Grid.render", "r.pop", "int", "r.push", "r.fillRect", "r.pop", "int", "r.push", "r.fillRect", "len"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Circle.push", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.scale", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.setLineColor", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.fillRect", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.drawLine", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.drawLine", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Circle.push", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.translate", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.render", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Circle.push", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.fillRect", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Circle.push", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.fillRect"], ["", "def", "render", "(", "self", ",", "r", ",", "tile_size", ",", "attention_weights", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Render this grid at a given scale\n        :param r: target renderer object\n        :param tile_size: tile size in pixels\n        \"\"\"", "\n", "\n", "assert", "r", ".", "width", "==", "self", ".", "width", "*", "tile_size", "\n", "assert", "r", ".", "height", "==", "self", ".", "height", "*", "tile_size", "\n", "\n", "# Total grid size at native scale", "\n", "widthPx", "=", "self", ".", "width", "*", "CELL_PIXELS", "\n", "heightPx", "=", "self", ".", "height", "*", "CELL_PIXELS", "\n", "\n", "r", ".", "push", "(", ")", "\n", "\n", "# Internally, we draw at the \"large\" full-grid resolution, but we", "\n", "# use the renderer to scale back to the desired size", "\n", "r", ".", "scale", "(", "tile_size", "/", "CELL_PIXELS", ",", "tile_size", "/", "CELL_PIXELS", ")", "\n", "\n", "pixel_attention", "=", "False", "\n", "if", "len", "(", "attention_weights", ")", ">", "0", ":", "\n", "            ", "'''\n            if len(attention_weights) == self.width * self.height:\n                pixel_attention = False\n                attention_weights = attention_weights.reshape(self.width, self.height)\n            elif len(attention_weights) == self.width * CELL_PIXELS * self.height * CELL_PIXELS:\n                pixel_attention = True\n                attention_weights = attention_weights.reshape(self.width * CELL_PIXELS, self.height * CELL_PIXELS)\n            '''", "\n", "start_range", "=", "0", "\n", "end_range", "=", "150", "\n", "", "else", ":", "\n", "            ", "pixel_attention", "=", "False", "\n", "# Draw the background of the in-world cells black", "\n", "", "if", "not", "pixel_attention", ":", "\n", "            ", "r", ".", "fillRect", "(", "\n", "0", ",", "\n", "0", ",", "\n", "widthPx", ",", "\n", "heightPx", ",", "\n", "255", ",", "255", ",", "255", "\n", ")", "\n", "", "else", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "heightPx", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "0", ",", "widthPx", ")", ":", "\n", "                    ", "current_weight", "=", "attention_weights", "[", "j", ",", "i", "]", "\n", "color", "=", "int", "(", "(", "end_range", "-", "start_range", ")", "*", "(", "1", "-", "current_weight", ")", ")", "\n", "r", ".", "push", "(", ")", "\n", "r", ".", "fillRect", "(", "i", ",", "j", ",", "1", ",", "1", ",", "r", "=", "color", ",", "g", "=", "color", ",", "b", "=", "color", ")", "\n", "r", ".", "pop", "(", ")", "\n", "\n", "# Draw grid lines", "\n", "", "", "", "r", ".", "setLineColor", "(", "100", ",", "100", ",", "100", ")", "\n", "for", "rowIdx", "in", "range", "(", "0", ",", "self", ".", "height", ")", ":", "\n", "            ", "y", "=", "CELL_PIXELS", "*", "rowIdx", "\n", "r", ".", "drawLine", "(", "0", ",", "y", ",", "widthPx", ",", "y", ")", "\n", "", "for", "colIdx", "in", "range", "(", "0", ",", "self", ".", "width", ")", ":", "\n", "            ", "x", "=", "CELL_PIXELS", "*", "colIdx", "\n", "r", ".", "drawLine", "(", "x", ",", "0", ",", "x", ",", "heightPx", ")", "\n", "\n", "# Render the grid", "\n", "", "for", "j", "in", "range", "(", "0", ",", "self", ".", "height", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "width", ")", ":", "\n", "                ", "cell", "=", "self", ".", "get", "(", "i", ",", "j", ")", "\n", "if", "len", "(", "attention_weights", ")", ">", "0", "and", "not", "pixel_attention", ":", "\n", "                    ", "current_weight", "=", "attention_weights", "[", "j", ",", "i", "]", "\n", "color", "=", "int", "(", "(", "end_range", "-", "start_range", ")", "*", "(", "1", "-", "current_weight", ")", ")", "\n", "r", ".", "push", "(", ")", "\n", "r", ".", "fillRect", "(", "i", "*", "CELL_PIXELS", ",", "j", "*", "CELL_PIXELS", ",", "CELL_PIXELS", ",", "CELL_PIXELS", ",", "r", "=", "color", ",", "g", "=", "color", ",", "b", "=", "color", ")", "\n", "", "if", "cell", "==", "None", ":", "\n", "                    ", "continue", "\n", "", "r", ".", "push", "(", ")", "\n", "r", ".", "translate", "(", "i", "*", "CELL_PIXELS", ",", "j", "*", "CELL_PIXELS", ")", "\n", "cell", ".", "render", "(", "r", ")", "\n", "r", ".", "pop", "(", ")", "\n", "\n", "", "", "r", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.encode": [[383, 403], ["numpy.zeros", "range", "range", "minigrid.Grid.get", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get"], ["", "def", "encode", "(", "self", ",", "agent_row", ":", "int", ",", "agent_column", ":", "int", ",", "agent_direction", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Produce a compact numpy encoding of the grid.\n        \"\"\"", "\n", "array", "=", "np", ".", "zeros", "(", "(", "self", ".", "width", ",", "self", ".", "height", ",", "self", ".", "_num_attributes_object", "+", "1", "+", "4", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "for", "col", "in", "range", "(", "self", ".", "width", ")", ":", "\n", "            ", "for", "row", "in", "range", "(", "self", ".", "height", ")", ":", "\n", "                ", "grid_cell", "=", "self", ".", "get", "(", "col", ",", "row", ")", "\n", "empty_representation", "=", "np", ".", "zeros", "(", "self", ".", "_num_attributes_object", "+", "1", "+", "4", ")", "\n", "if", "grid_cell", ":", "\n", "                    ", "empty_representation", "[", ":", "-", "5", "]", "=", "grid_cell", ".", "vector_representation", "\n", "\n", "# Set agent feature to 1 for the grid cell with the agent and add it's direction in one-hot form.", "\n", "", "if", "col", "==", "agent_column", "and", "row", "==", "agent_row", ":", "\n", "                    ", "empty_representation", "[", "-", "5", "]", "=", "1", "\n", "one_hot_direction", "=", "np", ".", "zeros", "(", "4", ")", "\n", "one_hot_direction", "[", "agent_direction", "]", "=", "1", "\n", "empty_representation", "[", "-", "4", ":", "]", "=", "one_hot_direction", "\n", "", "array", "[", "row", ",", "col", ",", ":", "]", "=", "empty_representation", "\n", "", "", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.__init__": [[430, 466], ["gym.spaces.Discrete", "minigrid.MiniGridEnv.seed", "minigrid.MiniGridEnv.reset", "len"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.seed", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "__init__", "(", "self", ",", "grid_size", "=", "None", ",", "width", "=", "None", ",", "height", "=", "None", ",", "max_steps", "=", "100", ",", "seed", "=", "1337", ")", ":", "\n", "# Can't set both grid_size and width/height", "\n", "        ", "if", "grid_size", ":", "\n", "            ", "assert", "width", "==", "None", "and", "height", "==", "None", "\n", "width", "=", "grid_size", "\n", "height", "=", "grid_size", "\n", "\n", "# Action enumeration for this environment", "\n", "", "self", ".", "actions", "=", "MiniGridEnv", ".", "Actions", "\n", "\n", "# Actions are discrete integer values", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "len", "(", "self", ".", "actions", ")", ")", "\n", "\n", "# Range of possible rewards", "\n", "self", ".", "reward_range", "=", "(", "0", ",", "1", ")", "\n", "\n", "# Renderer object used to render the whole grid (full-scale)", "\n", "self", ".", "grid_render", "=", "None", "\n", "\n", "# Renderer used to render observations (small-scale agent view)", "\n", "self", ".", "obs_render", "=", "None", "\n", "\n", "# Environment configuration", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "max_steps", "=", "max_steps", "\n", "\n", "# Current position and direction of the agent", "\n", "self", ".", "agent_pos", "=", "None", "\n", "self", ".", "agent_dir", "=", "None", "\n", "\n", "# Initialize the RNG", "\n", "self", ".", "seed", "(", "seed", "=", "seed", ")", "\n", "\n", "# Initialize the state", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.reset": [[467, 492], ["minigrid.MiniGridEnv._gen_grid", "minigrid.MiniGridEnv.grid.get", "minigrid.MiniGridEnv.can_overlap"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid._gen_grid", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.WorldObj.can_overlap"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# Current position and direction of the agent", "\n", "        ", "self", ".", "agent_pos", "=", "None", "\n", "self", ".", "agent_dir", "=", "None", "\n", "\n", "# Generate a new random grid at the start of each episode", "\n", "# To keep the same grid for each episode, call env.seed() with", "\n", "# the same seed before calling env.reset()", "\n", "self", ".", "_gen_grid", "(", "self", ".", "width", ",", "self", ".", "height", ")", "\n", "\n", "# These fields should be defined by _gen_grid", "\n", "assert", "self", ".", "agent_pos", "is", "not", "None", "\n", "assert", "self", ".", "agent_dir", "is", "not", "None", "\n", "\n", "# Check that the agent doesn't overlap with an object", "\n", "start_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "agent_pos", ")", "\n", "assert", "start_cell", "is", "None", "or", "start_cell", ".", "can_overlap", "(", ")", "\n", "\n", "# Item picked up, being carried, initially nothing", "\n", "self", ".", "carrying", "=", "None", "\n", "\n", "# Step count since episode start", "\n", "self", ".", "step_count", "=", "0", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.seed": [[493, 497], ["gym.utils.seeding.np_random"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", "=", "1337", ")", ":", "\n", "# Seed the random number generator", "\n", "        ", "self", ".", "np_random", ",", "_", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.steps_remaining": [[498, 501], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "steps_remaining", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "max_steps", "-", "self", ".", "step_count", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.__str__": [[502, 538], ["range", "range", "minigrid.MiniGridEnv.grid.get", "minigrid.MiniGridEnv.color[].upper"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Produce a pretty string of the environment's grid along with the agent.\n        A grid cell is represented by 2-character string, the first one for\n        the object and the second one for the color.\n        \"\"\"", "\n", "\n", "# Map of object types to short string", "\n", "OBJECT_TO_STR", "=", "{", "\n", "'circle'", ":", "'A'", ",", "\n", "'square'", ":", "'B'", ",", "\n", "'cylinder'", ":", "'C'", ",", "\n", "}", "\n", "\n", "# Map agent's direction to short string", "\n", "AGENT_DIR_TO_STR", "=", "{", "\n", "0", ":", "'>'", ",", "\n", "1", ":", "'V'", ",", "\n", "2", ":", "'<'", ",", "\n", "3", ":", "'^'", "\n", "}", "\n", "\n", "str", "=", "''", "\n", "for", "j", "in", "range", "(", "self", ".", "grid", ".", "height", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "grid", ".", "width", ")", ":", "\n", "                ", "if", "i", "==", "self", ".", "agent_pos", "[", "0", "]", "and", "j", "==", "self", ".", "agent_pos", "[", "1", "]", ":", "\n", "                    ", "str", "+=", "2", "*", "AGENT_DIR_TO_STR", "[", "self", ".", "agent_dir", "]", "\n", "continue", "\n", "", "c", "=", "self", ".", "grid", ".", "get", "(", "i", ",", "j", ")", "\n", "if", "not", "c", ":", "\n", "                    ", "str", "+=", "'  '", "\n", "continue", "\n", "", "str", "+=", "OBJECT_TO_STR", "[", "c", ".", "type", "]", "+", "c", ".", "color", "[", "0", "]", ".", "upper", "(", ")", "\n", "", "if", "j", "<", "self", ".", "grid", ".", "height", "-", "1", ":", "\n", "                ", "str", "+=", "'\\n'", "\n", "", "", "return", "str", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv._gen_grid": [[539, 541], ["None"], "methods", ["None"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "assert", "False", ",", "\"_gen_grid needs to be implemented by each environment\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv._rand_int": [[542, 548], ["minigrid.MiniGridEnv.np_random.randint"], "methods", ["None"], ["", "def", "_rand_int", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "\"\"\"\n        Generate random integer in [low,high[\n        \"\"\"", "\n", "\n", "return", "self", ".", "np_random", ".", "randint", "(", "low", ",", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.place_obj": [[549, 600], ["minigrid.MiniGridEnv.grid.set", "numpy.array", "max", "max", "RecursionError", "minigrid.MiniGridEnv.grid.get", "reject_fn", "minigrid.MiniGridEnv._rand_int", "minigrid.MiniGridEnv._rand_int", "min", "min"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "place_obj", "(", "self", ",", "obj", ",", "top", "=", "None", ",", "size", "=", "None", ",", "reject_fn", "=", "None", ",", "max_tries", "=", "math", ".", "inf", ")", ":", "\n", "        ", "\"\"\"\n        Place an object at an empty position in the grid\n\n        :param obj:\n        :param top: top-left position of the rectangle where to place\n        :param size: size of the rectangle where to place\n        :param reject_fn: function to filter out potential positions\n        :param max_tries:\n        \"\"\"", "\n", "\n", "if", "top", "is", "None", ":", "\n", "            ", "top", "=", "(", "0", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "top", "=", "(", "max", "(", "top", "[", "0", "]", ",", "0", ")", ",", "max", "(", "top", "[", "1", "]", ",", "0", ")", ")", "\n", "\n", "", "if", "size", "is", "None", ":", "\n", "            ", "size", "=", "(", "self", ".", "grid", ".", "width", ",", "self", ".", "grid", ".", "height", ")", "\n", "\n", "", "num_tries", "=", "0", "\n", "\n", "while", "True", ":", "\n", "# This is to handle with rare cases where rejection sampling", "\n", "# gets stuck in an infinite loop", "\n", "            ", "if", "num_tries", ">", "max_tries", ":", "\n", "                ", "raise", "RecursionError", "(", "'rejection sampling failed in place_obj'", ")", "\n", "\n", "", "num_tries", "+=", "1", "\n", "\n", "pos", "=", "np", ".", "array", "(", "(", "\n", "self", ".", "_rand_int", "(", "top", "[", "0", "]", ",", "min", "(", "top", "[", "0", "]", "+", "size", "[", "0", "]", ",", "self", ".", "grid", ".", "width", ")", ")", ",", "\n", "self", ".", "_rand_int", "(", "top", "[", "1", "]", ",", "min", "(", "top", "[", "1", "]", "+", "size", "[", "1", "]", ",", "self", ".", "grid", ".", "height", ")", ")", "\n", ")", ")", "\n", "\n", "# Don't place the object on top of another object", "\n", "if", "self", ".", "grid", ".", "get", "(", "*", "pos", ")", "!=", "None", ":", "\n", "                ", "continue", "\n", "\n", "# Check if there is a filtering criterion", "\n", "", "if", "reject_fn", "and", "reject_fn", "(", "self", ",", "pos", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "break", "\n", "\n", "", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "obj", ")", "\n", "\n", "if", "obj", "is", "not", "None", ":", "\n", "            ", "obj", ".", "init_pos", "=", "pos", "\n", "obj", ".", "cur_pos", "=", "pos", "\n", "\n", "", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.place_agent": [[601, 620], ["minigrid.MiniGridEnv.place_obj", "minigrid.MiniGridEnv._rand_int"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "place_agent", "(", "\n", "self", ",", "\n", "top", "=", "None", ",", "\n", "size", "=", "None", ",", "\n", "rand_dir", "=", "True", ",", "\n", "max_tries", "=", "math", ".", "inf", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Set the agent's starting point at an empty position in the grid\n        \"\"\"", "\n", "\n", "self", ".", "agent_pos", "=", "None", "\n", "pos", "=", "self", ".", "place_obj", "(", "None", ",", "top", ",", "size", ",", "max_tries", "=", "max_tries", ")", "\n", "self", ".", "agent_pos", "=", "pos", "\n", "\n", "if", "rand_dir", ":", "\n", "            ", "self", ".", "agent_dir", "=", "self", ".", "_rand_int", "(", "0", ",", "4", ")", "\n", "\n", "", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.dir_vec": [[621, 630], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dir_vec", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the direction vector for the agent, pointing in the direction\n        of forward movement.\n        \"\"\"", "\n", "\n", "assert", "self", ".", "agent_dir", ">=", "0", "and", "self", ".", "agent_dir", "<", "4", "\n", "return", "DIR_TO_VEC", "[", "self", ".", "agent_dir", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.right_vec": [[631, 639], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "right_vec", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the vector pointing to the right of the agent.\n        \"\"\"", "\n", "\n", "dx", ",", "dy", "=", "self", ".", "dir_vec", "\n", "return", "np", ".", "array", "(", "(", "-", "dy", ",", "dx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.front_pos": [[640, 647], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "front_pos", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the position of the cell that is right in front of the agent\n        \"\"\"", "\n", "\n", "return", "self", ".", "agent_pos", "+", "self", ".", "dir_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.step": [[648, 707], ["minigrid.MiniGridEnv.grid.get", "minigrid.MiniGridEnv.grid.get", "minigrid.MiniGridEnv.can_overlap", "minigrid.MiniGridEnv._reward", "minigrid.MiniGridEnv.can_pickup", "numpy.array", "minigrid.MiniGridEnv.grid.set", "minigrid.MiniGridEnv.grid.set"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.WorldObj.can_overlap", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Circle.can_pickup", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "step_count", "+=", "1", "\n", "\n", "reward", "=", "0", "\n", "done", "=", "False", "\n", "\n", "current_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "agent_pos", ")", "\n", "\n", "# Rotate left", "\n", "if", "action", "==", "self", ".", "actions", ".", "left", ":", "\n", "            ", "self", ".", "agent_dir", "-=", "1", "\n", "if", "self", ".", "agent_dir", "<", "0", ":", "\n", "                ", "self", ".", "agent_dir", "+=", "4", "\n", "\n", "# Rotate right", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "right", ":", "\n", "            ", "self", ".", "agent_dir", "=", "(", "self", ".", "agent_dir", "+", "1", ")", "%", "4", "\n", "\n", "# Move forward", "\n", "", "elif", "action", "==", "self", ".", "actions", ".", "forward", ":", "\n", "# Get the position in front of the agent", "\n", "            ", "fwd_pos", "=", "self", ".", "front_pos", "\n", "\n", "# Get the contents of the cell in front of the agent", "\n", "fwd_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "fwd_pos", ")", "\n", "if", "fwd_cell", "==", "None", "or", "fwd_cell", ".", "can_overlap", "(", ")", ":", "\n", "                ", "self", ".", "agent_pos", "=", "fwd_pos", "\n", "", "if", "fwd_cell", "!=", "None", "and", "fwd_cell", ".", "type", "==", "'goal'", ":", "\n", "                ", "done", "=", "True", "\n", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "", "if", "fwd_cell", "!=", "None", "and", "fwd_cell", ".", "type", "==", "'lava'", ":", "\n", "                ", "done", "=", "True", "\n", "\n", "# Pick up an object", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "pickup", ":", "\n", "            ", "if", "current_cell", ".", "can_pickup", "(", ")", ":", "\n", "                ", "if", "self", ".", "carrying", "is", "None", ":", "\n", "                    ", "self", ".", "carrying", "=", "current_cell", "\n", "self", ".", "carrying", ".", "cur_pos", "=", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "self", ".", "agent_pos", ",", "None", ")", "\n", "\n", "# Drop an object", "\n", "", "", "", "elif", "action", "==", "self", ".", "actions", ".", "drop", ":", "\n", "            ", "if", "not", "current_cell", "and", "self", ".", "carrying", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "*", "self", ".", "agent_pos", ",", "self", ".", "carrying", ")", "\n", "self", ".", "carrying", ".", "cur_pos", "=", "self", ".", "agent_pos", "\n", "self", ".", "carrying", "=", "None", "\n", "\n", "# Done action (not used by default)", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "done", ":", "\n", "            ", "pass", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"unknown action\"", "\n", "\n", "", "if", "self", ".", "step_count", ">=", "self", ".", "max_steps", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "", "return", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.render": [[708, 760], ["r.beginFrame", "minigrid.MiniGridEnv.grid.render", "r.push", "r.scale", "r.translate", "r.rotate", "r.setLineColor", "r.setColor", "r.drawPolygon", "r.pop", "r.endFrame", "Renderer", "r.window.setText", "r.getArray", "minigrid.MiniGridEnv.grid_render.close", "r.getPixmap"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.beginFrame", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.render", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Circle.push", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.scale", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.translate", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.rotate", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.setLineColor", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.setColor", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.drawPolygon", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.pop", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.endFrame", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Window.setText", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.getArray", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.close", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.rendering.Renderer.getPixmap"], ["", "def", "render", "(", "self", ",", "mode", "=", "''", ",", "close", "=", "False", ",", "highlight", "=", "True", ",", "tile_size", "=", "CELL_PIXELS", ",", "attention_weights", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Render the whole-grid human view\n        \"\"\"", "\n", "\n", "if", "close", ":", "\n", "            ", "if", "self", ".", "grid_render", ":", "\n", "                ", "self", ".", "grid_render", ".", "close", "(", ")", "\n", "", "return", "\n", "\n", "", "if", "self", ".", "grid_render", "is", "None", "or", "self", ".", "grid_render", ".", "window", "is", "None", "or", "(", "self", ".", "grid_render", ".", "width", "!=", "self", ".", "width", "*", "tile_size", ")", ":", "\n", "            ", "from", "GroundedScan", ".", "gym_minigrid", ".", "rendering", "import", "Renderer", "\n", "self", ".", "grid_render", "=", "Renderer", "(", "\n", "self", ".", "width", "*", "tile_size", ",", "\n", "self", ".", "height", "*", "tile_size", ",", "\n", "True", "if", "mode", "==", "'human'", "else", "False", "\n", ")", "\n", "\n", "", "r", "=", "self", ".", "grid_render", "\n", "\n", "if", "r", ".", "window", ":", "\n", "            ", "r", ".", "window", ".", "setText", "(", "self", ".", "mission", ")", "\n", "\n", "", "r", ".", "beginFrame", "(", ")", "\n", "\n", "# Render the whole grid", "\n", "self", ".", "grid", ".", "render", "(", "r", ",", "tile_size", ",", "attention_weights", "=", "attention_weights", ")", "\n", "\n", "# Draw the agent", "\n", "ratio", "=", "tile_size", "/", "CELL_PIXELS", "\n", "r", ".", "push", "(", ")", "\n", "r", ".", "scale", "(", "ratio", ",", "ratio", ")", "\n", "r", ".", "translate", "(", "\n", "CELL_PIXELS", "*", "(", "self", ".", "agent_pos", "[", "0", "]", "+", "0.5", ")", ",", "\n", "CELL_PIXELS", "*", "(", "self", ".", "agent_pos", "[", "1", "]", "+", "0.5", ")", "\n", ")", "\n", "r", ".", "rotate", "(", "self", ".", "agent_dir", "*", "90", ")", "\n", "r", ".", "setLineColor", "(", "255", ",", "192", ",", "203", ")", "\n", "r", ".", "setColor", "(", "255", ",", "192", ",", "203", ")", "\n", "r", ".", "drawPolygon", "(", "[", "\n", "(", "-", "12", ",", "10", ")", ",", "\n", "(", "12", ",", "0", ")", ",", "\n", "(", "-", "12", ",", "-", "10", ")", "\n", "]", ")", "\n", "r", ".", "pop", "(", ")", "\n", "r", ".", "endFrame", "(", ")", "\n", "\n", "if", "mode", "==", "'rgb_array'", ":", "\n", "            ", "return", "r", ".", "getArray", "(", ")", "\n", "", "elif", "mode", "==", "'pixmap'", ":", "\n", "            ", "return", "r", ".", "getPixmap", "(", ")", "\n", "", "return", "r", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.Room.__init__": [[15, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "top", ",", "\n", "size", "\n", ")", ":", "\n", "# Top-left corner and size (tuples)", "\n", "        ", "self", ".", "top", "=", "top", "\n", "self", ".", "size", "=", "size", "\n", "\n", "# List of door objects and door positions", "\n", "# Order of the doors is right, down, left, up", "\n", "self", ".", "doors", "=", "[", "None", "]", "*", "4", "\n", "self", ".", "door_pos", "=", "[", "None", "]", "*", "4", "\n", "\n", "# List of rooms adjacent to this one", "\n", "# Order of the neighbors is right, down, left, up", "\n", "self", ".", "neighbors", "=", "[", "None", "]", "*", "4", "\n", "\n", "# Indicates if this room is behind a locked door", "\n", "self", ".", "locked", "=", "False", "\n", "\n", "# List of objects contained", "\n", "self", ".", "objs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.Room.rand_pos": [[39, 45], ["env._randPos"], "methods", ["None"], ["", "def", "rand_pos", "(", "self", ",", "env", ")", ":", "\n", "        ", "topX", ",", "topY", "=", "self", ".", "top", "\n", "sizeX", ",", "sizeY", "=", "self", ".", "size", "\n", "return", "env", ".", "_randPos", "(", "\n", "topX", "+", "1", ",", "topX", "+", "sizeX", "-", "1", ",", "\n", "topY", "+", "1", ",", "topY", "+", "sizeY", "-", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.Room.pos_inside": [[47, 62], ["None"], "methods", ["None"], ["", "def", "pos_inside", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Check if a position is within the bounds of this room\n        \"\"\"", "\n", "\n", "topX", ",", "topY", "=", "self", ".", "top", "\n", "sizeX", ",", "sizeY", "=", "self", ".", "size", "\n", "\n", "if", "x", "<", "topX", "or", "y", "<", "topY", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "x", ">=", "topX", "+", "sizeX", "or", "y", ">=", "topY", "+", "sizeY", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__": [[69, 97], ["minigrid.MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "room_size", "=", "7", ",", "\n", "num_rows", "=", "3", ",", "\n", "num_cols", "=", "3", ",", "\n", "max_steps", "=", "100", ",", "\n", "seed", "=", "0", "\n", ")", ":", "\n", "        ", "assert", "room_size", ">", "0", "\n", "assert", "room_size", ">=", "3", "\n", "assert", "num_rows", ">", "0", "\n", "assert", "num_cols", ">", "0", "\n", "self", ".", "room_size", "=", "room_size", "\n", "self", ".", "num_rows", "=", "num_rows", "\n", "self", ".", "num_cols", "=", "num_cols", "\n", "\n", "height", "=", "(", "room_size", "-", "1", ")", "*", "num_rows", "+", "1", "\n", "width", "=", "(", "room_size", "-", "1", ")", "*", "num_cols", "+", "1", "\n", "\n", "# By default, this environment has no mission", "\n", "self", ".", "mission", "=", "''", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "width", "=", "width", ",", "\n", "height", "=", "height", ",", "\n", "max_steps", "=", "max_steps", ",", "\n", "see_through_walls", "=", "False", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.room_from_pos": [[99, 112], ["None"], "methods", ["None"], ["", "def", "room_from_pos", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"Get the room a given position maps to\"\"\"", "\n", "\n", "assert", "x", ">=", "0", "\n", "assert", "y", ">=", "0", "\n", "\n", "i", "=", "x", "//", "(", "self", ".", "room_size", "-", "1", ")", "\n", "j", "=", "y", "//", "(", "self", ".", "room_size", "-", "1", ")", "\n", "\n", "assert", "i", "<", "self", ".", "num_cols", "\n", "assert", "j", "<", "self", ".", "num_rows", "\n", "\n", "return", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.get_room": [[113, 117], ["None"], "methods", ["None"], ["", "def", "get_room", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "        ", "assert", "i", "<", "self", ".", "num_cols", "\n", "assert", "j", "<", "self", ".", "num_rows", "\n", "return", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid._gen_grid": [[118, 170], ["minigrid.Grid", "range", "range", "range", "roomgrid.RoomGrid.room_grid.append", "range", "roomgrid.Room", "row.append", "roomgrid.RoomGrid.grid.wall_rect", "roomgrid.RoomGrid._rand_int", "roomgrid.RoomGrid._rand_int"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create the grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "self", ".", "room_grid", "=", "[", "]", "\n", "\n", "# For each row of rooms", "\n", "for", "j", "in", "range", "(", "0", ",", "self", ".", "num_rows", ")", ":", "\n", "            ", "row", "=", "[", "]", "\n", "\n", "# For each column of rooms", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_cols", ")", ":", "\n", "                ", "room", "=", "Room", "(", "\n", "(", "i", "*", "(", "self", ".", "room_size", "-", "1", ")", ",", "j", "*", "(", "self", ".", "room_size", "-", "1", ")", ")", ",", "\n", "(", "self", ".", "room_size", ",", "self", ".", "room_size", ")", "\n", ")", "\n", "row", ".", "append", "(", "room", ")", "\n", "\n", "# Generate the walls for this room", "\n", "self", ".", "grid", ".", "wall_rect", "(", "*", "room", ".", "top", ",", "*", "room", ".", "size", ")", "\n", "\n", "", "self", ".", "room_grid", ".", "append", "(", "row", ")", "\n", "\n", "# For each row of rooms", "\n", "", "for", "j", "in", "range", "(", "0", ",", "self", ".", "num_rows", ")", ":", "\n", "# For each column of rooms", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_cols", ")", ":", "\n", "                ", "room", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n", "x_l", ",", "y_l", "=", "(", "room", ".", "top", "[", "0", "]", "+", "1", ",", "room", ".", "top", "[", "1", "]", "+", "1", ")", "\n", "x_m", ",", "y_m", "=", "(", "room", ".", "top", "[", "0", "]", "+", "room", ".", "size", "[", "0", "]", "-", "1", ",", "room", ".", "top", "[", "1", "]", "+", "room", ".", "size", "[", "1", "]", "-", "1", ")", "\n", "\n", "# Door positions, order is right, down, left, up", "\n", "if", "i", "<", "self", ".", "num_cols", "-", "1", ":", "\n", "                    ", "room", ".", "neighbors", "[", "0", "]", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "+", "1", "]", "\n", "room", ".", "door_pos", "[", "0", "]", "=", "(", "x_m", ",", "self", ".", "_rand_int", "(", "y_l", ",", "y_m", ")", ")", "\n", "", "if", "j", "<", "self", ".", "num_rows", "-", "1", ":", "\n", "                    ", "room", ".", "neighbors", "[", "1", "]", "=", "self", ".", "room_grid", "[", "j", "+", "1", "]", "[", "i", "]", "\n", "room", ".", "door_pos", "[", "1", "]", "=", "(", "self", ".", "_rand_int", "(", "x_l", ",", "x_m", ")", ",", "y_m", ")", "\n", "", "if", "i", ">", "0", ":", "\n", "                    ", "room", ".", "neighbors", "[", "2", "]", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "-", "1", "]", "\n", "room", ".", "door_pos", "[", "2", "]", "=", "room", ".", "neighbors", "[", "2", "]", ".", "door_pos", "[", "0", "]", "\n", "", "if", "j", ">", "0", ":", "\n", "                    ", "room", ".", "neighbors", "[", "3", "]", "=", "self", ".", "room_grid", "[", "j", "-", "1", "]", "[", "i", "]", "\n", "room", ".", "door_pos", "[", "3", "]", "=", "room", ".", "neighbors", "[", "3", "]", ".", "door_pos", "[", "1", "]", "\n", "\n", "# The agent starts in the middle, facing right", "\n", "", "", "", "self", ".", "agent_pos", "=", "(", "\n", "(", "self", ".", "num_cols", "//", "2", ")", "*", "(", "self", ".", "room_size", "-", "1", ")", "+", "(", "self", ".", "room_size", "//", "2", ")", ",", "\n", "(", "self", ".", "num_rows", "//", "2", ")", "*", "(", "self", ".", "room_size", "-", "1", ")", "+", "(", "self", ".", "room_size", "//", "2", ")", "\n", ")", "\n", "self", ".", "agent_dir", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.place_in_room": [[171, 189], ["roomgrid.RoomGrid.get_room", "roomgrid.RoomGrid.place_obj", "roomgrid.RoomGrid.objs.append"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.get_room", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv.place_obj"], ["", "def", "place_in_room", "(", "self", ",", "i", ",", "j", ",", "obj", ")", ":", "\n", "        ", "\"\"\"\n        Add an existing object to room (i, j)\n        \"\"\"", "\n", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "pos", "=", "self", ".", "place_obj", "(", "\n", "obj", ",", "\n", "room", ".", "top", ",", "\n", "room", ".", "size", ",", "\n", "reject_fn", "=", "reject_next_to", ",", "\n", "max_tries", "=", "1000", "\n", ")", "\n", "\n", "room", ".", "objs", ".", "append", "(", "obj", ")", "\n", "\n", "return", "obj", ",", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.add_object": [[190, 211], ["roomgrid.RoomGrid.place_in_room", "roomgrid.RoomGrid._rand_elem", "roomgrid.RoomGrid._rand_color", "Key", "Ball", "Box"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.place_in_room"], ["", "def", "add_object", "(", "self", ",", "i", ",", "j", ",", "kind", "=", "None", ",", "color", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Add a new object to room (i, j)\n        \"\"\"", "\n", "\n", "if", "kind", "==", "None", ":", "\n", "            ", "kind", "=", "self", ".", "_rand_elem", "(", "[", "'key'", ",", "'ball'", ",", "'box'", "]", ")", "\n", "\n", "", "if", "color", "==", "None", ":", "\n", "            ", "color", "=", "self", ".", "_rand_color", "(", ")", "\n", "\n", "# TODO: we probably want to add an Object.make helper function", "\n", "", "assert", "kind", "in", "[", "'key'", ",", "'ball'", ",", "'box'", "]", "\n", "if", "kind", "==", "'key'", ":", "\n", "            ", "obj", "=", "Key", "(", "color", ")", "\n", "", "elif", "kind", "==", "'ball'", ":", "\n", "            ", "obj", "=", "Ball", "(", "color", ")", "\n", "", "elif", "kind", "==", "'box'", ":", "\n", "            ", "obj", "=", "Box", "(", "color", ")", "\n", "\n", "", "return", "self", ".", "place_in_room", "(", "i", ",", "j", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.add_door": [[212, 247], ["roomgrid.RoomGrid.get_room", "Door", "roomgrid.RoomGrid.grid.set", "roomgrid.RoomGrid._rand_color", "roomgrid.RoomGrid._rand_bool", "roomgrid.RoomGrid._rand_int"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.get_room", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "add_door", "(", "self", ",", "i", ",", "j", ",", "door_idx", "=", "None", ",", "color", "=", "None", ",", "locked", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Add a door to a room, connecting it to a neighbor\n        \"\"\"", "\n", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "if", "door_idx", "==", "None", ":", "\n", "# Need to make sure that there is a neighbor along this wall", "\n", "# and that there is not already a door", "\n", "            ", "while", "True", ":", "\n", "                ", "door_idx", "=", "self", ".", "_rand_int", "(", "0", ",", "4", ")", "\n", "if", "room", ".", "neighbors", "[", "door_idx", "]", "and", "room", ".", "doors", "[", "door_idx", "]", "is", "None", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "if", "color", "==", "None", ":", "\n", "            ", "color", "=", "self", ".", "_rand_color", "(", ")", "\n", "\n", "", "if", "locked", "is", "None", ":", "\n", "            ", "locked", "=", "self", ".", "_rand_bool", "(", ")", "\n", "\n", "", "assert", "room", ".", "doors", "[", "door_idx", "]", "is", "None", ",", "\"door already exists\"", "\n", "\n", "room", ".", "locked", "=", "locked", "\n", "door", "=", "Door", "(", "color", ",", "is_locked", "=", "locked", ")", "\n", "\n", "pos", "=", "room", ".", "door_pos", "[", "door_idx", "]", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "door", ")", "\n", "door", ".", "cur_pos", "=", "pos", "\n", "\n", "neighbor", "=", "room", ".", "neighbors", "[", "door_idx", "]", "\n", "room", ".", "doors", "[", "door_idx", "]", "=", "door", "\n", "neighbor", ".", "doors", "[", "(", "door_idx", "+", "2", ")", "%", "4", "]", "=", "door", "\n", "\n", "return", "door", ",", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.remove_wall": [[248, 283], ["roomgrid.RoomGrid.get_room", "range", "roomgrid.RoomGrid.grid.set", "range", "roomgrid.RoomGrid.grid.set", "range", "roomgrid.RoomGrid.grid.set", "range", "roomgrid.RoomGrid.grid.set"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.get_room", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set"], ["", "def", "remove_wall", "(", "self", ",", "i", ",", "j", ",", "wall_idx", ")", ":", "\n", "        ", "\"\"\"\n        Remove a wall between two rooms\n        \"\"\"", "\n", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "assert", "wall_idx", ">=", "0", "and", "wall_idx", "<", "4", "\n", "assert", "room", ".", "doors", "[", "wall_idx", "]", "is", "None", ",", "\"door exists on this wall\"", "\n", "assert", "room", ".", "neighbors", "[", "wall_idx", "]", ",", "\"invalid wall\"", "\n", "\n", "neighbor", "=", "room", ".", "neighbors", "[", "wall_idx", "]", "\n", "\n", "tx", ",", "ty", "=", "room", ".", "top", "\n", "w", ",", "h", "=", "room", ".", "size", "\n", "\n", "# Ordering of walls is right, down, left, up", "\n", "if", "wall_idx", "==", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "h", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", "+", "w", "-", "1", ",", "ty", "+", "i", ",", "None", ")", "\n", "", "", "elif", "wall_idx", "==", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "w", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", "+", "i", ",", "ty", "+", "h", "-", "1", ",", "None", ")", "\n", "", "", "elif", "wall_idx", "==", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "h", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", ",", "ty", "+", "i", ",", "None", ")", "\n", "", "", "elif", "wall_idx", "==", "3", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "w", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", "+", "i", ",", "ty", ",", "None", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"invalid wall index\"", "\n", "\n", "# Mark the rooms as connected", "\n", "", "room", ".", "doors", "[", "wall_idx", "]", "=", "True", "\n", "neighbor", ".", "doors", "[", "(", "wall_idx", "+", "2", ")", "%", "4", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.place_agent": [[284, 304], ["roomgrid.RoomGrid._rand_int", "roomgrid.RoomGrid._rand_int", "super().place_agent", "roomgrid.RoomGrid.grid.get"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.get"], ["", "def", "place_agent", "(", "self", ",", "i", "=", "None", ",", "j", "=", "None", ",", "rand_dir", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Place the agent in a room\n        \"\"\"", "\n", "\n", "if", "i", "==", "None", ":", "\n", "            ", "i", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "", "if", "j", "==", "None", ":", "\n", "            ", "j", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "\n", "", "room", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n", "# Find a position that is not right in front of an object", "\n", "while", "True", ":", "\n", "            ", "super", "(", ")", ".", "place_agent", "(", "room", ".", "top", ",", "room", ".", "size", ",", "rand_dir", ",", "max_tries", "=", "1000", ")", "\n", "front_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "front_pos", ")", "\n", "if", "front_cell", "is", "None", "or", "front_cell", ".", "type", "is", "'wall'", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "self", ".", "agent_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.connect_all": [[305, 360], ["roomgrid.RoomGrid.room_from_pos", "set", "roomgrid.RoomGrid.connect_all.find_reach"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.room_from_pos", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.Grid.set"], ["", "def", "connect_all", "(", "self", ",", "door_colors", "=", "COLOR_NAMES", ",", "max_itrs", "=", "5000", ")", ":", "\n", "        ", "\"\"\"\n        Make sure that all rooms are reachable by the agent from its\n        starting position\n        \"\"\"", "\n", "\n", "start_room", "=", "self", ".", "room_from_pos", "(", "*", "self", ".", "agent_pos", ")", "\n", "\n", "added_doors", "=", "[", "]", "\n", "\n", "def", "find_reach", "(", ")", ":", "\n", "            ", "reach", "=", "set", "(", ")", "\n", "stack", "=", "[", "start_room", "]", "\n", "while", "len", "(", "stack", ")", ">", "0", ":", "\n", "                ", "room", "=", "stack", ".", "pop", "(", ")", "\n", "if", "room", "in", "reach", ":", "\n", "                    ", "continue", "\n", "", "reach", ".", "add", "(", "room", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "                    ", "if", "room", ".", "doors", "[", "i", "]", ":", "\n", "                        ", "stack", ".", "append", "(", "room", ".", "neighbors", "[", "i", "]", ")", "\n", "", "", "", "return", "reach", "\n", "\n", "", "num_itrs", "=", "0", "\n", "\n", "while", "True", ":", "\n", "# This is to handle rare situations where random sampling produces", "\n", "# a level that cannot be connected, producing in an infinite loop", "\n", "            ", "if", "num_itrs", ">", "max_itrs", ":", "\n", "                ", "raise", "RecursionError", "(", "'connect_all failed'", ")", "\n", "", "num_itrs", "+=", "1", "\n", "\n", "# If all rooms are reachable, stop", "\n", "reach", "=", "find_reach", "(", ")", "\n", "if", "len", "(", "reach", ")", "==", "self", ".", "num_rows", "*", "self", ".", "num_cols", ":", "\n", "                ", "break", "\n", "\n", "# Pick a random room and door position", "\n", "", "i", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "j", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "k", "=", "self", ".", "_rand_int", "(", "0", ",", "4", ")", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "# If there is already a door there, skip", "\n", "if", "not", "room", ".", "door_pos", "[", "k", "]", "or", "room", ".", "doors", "[", "k", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "room", ".", "locked", "or", "room", ".", "neighbors", "[", "k", "]", ".", "locked", ":", "\n", "                ", "continue", "\n", "\n", "", "color", "=", "self", ".", "_rand_elem", "(", "door_colors", ")", "\n", "door", ",", "_", "=", "self", ".", "add_door", "(", "i", ",", "j", ",", "k", ",", "color", ",", "False", ")", "\n", "added_doors", ".", "append", "(", "door", ")", "\n", "\n", "", "return", "added_doors", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.add_distractors": [[361, 398], ["len", "roomgrid.RoomGrid._rand_elem", "roomgrid.RoomGrid._rand_elem", "roomgrid.RoomGrid.add_object", "objs.append", "dists.append", "roomgrid.RoomGrid._rand_int", "roomgrid.RoomGrid._rand_int", "objs.append"], "methods", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "add_distractors", "(", "self", ",", "i", "=", "None", ",", "j", "=", "None", ",", "num_distractors", "=", "10", ",", "all_unique", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Add random objects that can potentially distract/confuse the agent.\n        \"\"\"", "\n", "\n", "# Collect a list of existing objects", "\n", "objs", "=", "[", "]", "\n", "for", "row", "in", "self", ".", "room_grid", ":", "\n", "            ", "for", "room", "in", "row", ":", "\n", "                ", "for", "obj", "in", "room", ".", "objs", ":", "\n", "                    ", "objs", ".", "append", "(", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n", "# List of distractors added", "\n", "", "", "", "dists", "=", "[", "]", "\n", "\n", "while", "len", "(", "dists", ")", "<", "num_distractors", ":", "\n", "            ", "color", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "type", "=", "self", ".", "_rand_elem", "(", "[", "'key'", ",", "'ball'", ",", "'box'", "]", ")", "\n", "obj", "=", "(", "type", ",", "color", ")", "\n", "\n", "if", "all_unique", "and", "obj", "in", "objs", ":", "\n", "                ", "continue", "\n", "\n", "# Add the object to a random room if no room specified", "\n", "", "room_i", "=", "i", "\n", "room_j", "=", "j", "\n", "if", "room_i", "==", "None", ":", "\n", "                ", "room_i", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "", "if", "room_j", "==", "None", ":", "\n", "                ", "room_j", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "\n", "", "dist", ",", "pos", "=", "self", ".", "add_object", "(", "room_i", ",", "room_j", ",", "*", "obj", ")", "\n", "\n", "objs", ".", "append", "(", "obj", ")", "\n", "dists", ".", "append", "(", "dist", ")", "\n", "\n", "", "return", "dists", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.roomgrid.reject_next_to": [[3, 13], ["abs", "abs"], "function", ["None"], ["def", "reject_next_to", "(", "env", ",", "pos", ")", ":", "\n", "    ", "\"\"\"\n    Function to filter out object positions that are right next to\n    the agent's starting point\n    \"\"\"", "\n", "\n", "sx", ",", "sy", "=", "env", ".", "agent_pos", "\n", "x", ",", "y", "=", "pos", "\n", "d", "=", "abs", "(", "sx", "-", "x", ")", "+", "abs", "(", "sy", "-", "y", ")", "\n", "return", "d", "<", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.register.register": [[5, 22], ["id.startswith", "gym.envs.registration.register", "env_list.append"], "function", ["home.repos.pwc.inspect_result.ylkuo_compositional-gscan.gym_minigrid.register.register"], ["def", "register", "(", "\n", "id", ",", "\n", "entry_point", ",", "\n", "reward_threshold", "=", "0.95", "\n", ")", ":", "\n", "    ", "assert", "id", ".", "startswith", "(", "\"MiniGrid-\"", ")", "\n", "assert", "id", "not", "in", "env_list", "\n", "\n", "# Register the environment with OpenAI gym", "\n", "gym_register", "(", "\n", "id", "=", "id", ",", "\n", "entry_point", "=", "entry_point", ",", "\n", "reward_threshold", "=", "reward_threshold", "\n", ")", "\n", "\n", "# Add the environment to the set", "\n", "env_list", ".", "append", "(", "id", ")", "\n", "", ""]]}