{"home.repos.pwc.inspect_result.wzell_mann.None.parameter_sensitivity.load_dataset": [[52, 63], ["scipy.io.loadmat", "yy.ravel", "xx[].toarray"], "function", ["None"], ["def", "load_dataset", "(", "n_features", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Load amazon reviews\n    \"\"\"", "\n", "mat", "=", "loadmat", "(", "filename", ")", "\n", "xx", "=", "mat", "[", "'xx'", "]", "\n", "yy", "=", "mat", "[", "'yy'", "]", "\n", "offset", "=", "mat", "[", "'offset'", "]", "\n", "x", "=", "xx", "[", ":", "n_features", ",", ":", "]", ".", "toarray", "(", ")", ".", "T", "#n_samples X n_features", "\n", "y", "=", "yy", ".", "ravel", "(", ")", "\n", "return", "x", ",", "y", ",", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.None.parameter_sensitivity.shuffle": [[64, 73], ["numpy.arange", "numpy.random.shuffle"], "function", ["home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.shuffle"], ["", "def", "shuffle", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    shuffle data (used by split)\n    \"\"\"", "\n", "index_shuf", "=", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "index_shuf", ")", "\n", "x", "=", "x", "[", "index_shuf", ",", ":", "]", "\n", "y", "=", "y", "[", "index_shuf", "]", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.None.parameter_sensitivity.split_data": [[74, 96], ["numpy.random.seed", "parameter_sensitivity.shuffle", "parameter_sensitivity.shuffle", "parameter_sensitivity.shuffle", "parameter_sensitivity.shuffle"], "function", ["home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.shuffle", "home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.shuffle", "home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.shuffle", "home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.shuffle"], ["", "def", "split_data", "(", "d_s_ind", ",", "d_t_ind", ",", "x", ",", "y", ",", "offset", ",", "n_tr_samples", ",", "r_seed", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    split data (train/validation/test, source/target)\n    \"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "r_seed", ")", "\n", "x_s_tr", "=", "x", "[", "offset", "[", "d_s_ind", ",", "0", "]", ":", "offset", "[", "d_s_ind", ",", "0", "]", "+", "n_tr_samples", ",", ":", "]", "\n", "x_t_tr", "=", "x", "[", "offset", "[", "d_t_ind", ",", "0", "]", ":", "offset", "[", "d_t_ind", ",", "0", "]", "+", "n_tr_samples", ",", ":", "]", "\n", "x_s_tst", "=", "x", "[", "offset", "[", "d_s_ind", ",", "0", "]", "+", "n_tr_samples", ":", "offset", "[", "d_s_ind", "+", "1", ",", "0", "]", ",", ":", "]", "\n", "x_t_tst", "=", "x", "[", "offset", "[", "d_t_ind", ",", "0", "]", "+", "n_tr_samples", ":", "offset", "[", "d_t_ind", "+", "1", ",", "0", "]", ",", ":", "]", "\n", "y_s_tr", "=", "y", "[", "offset", "[", "d_s_ind", ",", "0", "]", ":", "offset", "[", "d_s_ind", ",", "0", "]", "+", "n_tr_samples", "]", "\n", "y_t_tr", "=", "y", "[", "offset", "[", "d_t_ind", ",", "0", "]", ":", "offset", "[", "d_t_ind", ",", "0", "]", "+", "n_tr_samples", "]", "\n", "y_s_tst", "=", "y", "[", "offset", "[", "d_s_ind", ",", "0", "]", "+", "n_tr_samples", ":", "offset", "[", "d_s_ind", "+", "1", ",", "0", "]", "]", "\n", "y_t_tst", "=", "y", "[", "offset", "[", "d_t_ind", ",", "0", "]", "+", "n_tr_samples", ":", "offset", "[", "d_t_ind", "+", "1", ",", "0", "]", "]", "\n", "x_s_tr", ",", "y_s_tr", "=", "shuffle", "(", "x_s_tr", ",", "y_s_tr", ")", "\n", "x_t_tr", ",", "y_t_tr", "=", "shuffle", "(", "x_t_tr", ",", "y_t_tr", ")", "\n", "x_s_tst", ",", "y_s_tst", "=", "shuffle", "(", "x_s_tst", ",", "y_s_tst", ")", "\n", "x_t_tst", ",", "y_t_tst", "=", "shuffle", "(", "x_t_tst", ",", "y_t_tst", ")", "\n", "y_s_tr", "[", "y_s_tr", "==", "-", "1", "]", "=", "0", "\n", "y_t_tr", "[", "y_t_tr", "==", "-", "1", "]", "=", "0", "\n", "y_s_tst", "[", "y_s_tst", "==", "-", "1", "]", "=", "0", "\n", "y_t_tst", "[", "y_t_tst", "==", "-", "1", "]", "=", "0", "\n", "return", "x_s_tr", ",", "y_s_tr", ",", "x_t_tr", ",", "y_t_tr", ",", "x_s_tst", ",", "y_s_tst", ",", "x_t_tst", ",", "y_t_tst", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.None.parameter_sensitivity.accuracy": [[97, 102], ["numpy.sum", "numpy.abs", "numpy.round().ravel", "y_true.ravel", "numpy.round"], "function", ["None"], ["", "def", "accuracy", "(", "y", ",", "y_true", ")", ":", "\n", "    ", "\"\"\"\n    amount of right classified reviews\n    \"\"\"", "\n", "return", "1", "-", "np", ".", "sum", "(", "np", ".", "abs", "(", "np", ".", "round", "(", "y", ")", ".", "ravel", "(", ")", "-", "y_true", ".", "ravel", "(", ")", ")", ")", "/", "y", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.shuffle": [[51, 60], ["numpy.arange", "numpy.random.shuffle"], "function", ["home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.shuffle"], ["def", "shuffle", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    shuffle data (used by split)\n    \"\"\"", "\n", "index_shuf", "=", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "index_shuf", ")", "\n", "x", "=", "x", "[", "index_shuf", ",", ":", "]", "\n", "y", "=", "y", "[", "index_shuf", "]", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.split_data": [[61, 83], ["numpy.random.seed", "sentiment_analysis.shuffle", "sentiment_analysis.shuffle", "sentiment_analysis.shuffle", "sentiment_analysis.shuffle"], "function", ["home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.shuffle", "home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.shuffle", "home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.shuffle", "home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.shuffle"], ["", "def", "split_data", "(", "d_s_ind", ",", "d_t_ind", ",", "x", ",", "y", ",", "offset", ",", "n_tr_samples", ",", "r_seed", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    split data (train/validation/test, source/target)\n    \"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "r_seed", ")", "\n", "x_s_tr", "=", "x", "[", "offset", "[", "d_s_ind", ",", "0", "]", ":", "offset", "[", "d_s_ind", ",", "0", "]", "+", "n_tr_samples", ",", ":", "]", "\n", "x_t_tr", "=", "x", "[", "offset", "[", "d_t_ind", ",", "0", "]", ":", "offset", "[", "d_t_ind", ",", "0", "]", "+", "n_tr_samples", ",", ":", "]", "\n", "x_s_tst", "=", "x", "[", "offset", "[", "d_s_ind", ",", "0", "]", "+", "n_tr_samples", ":", "offset", "[", "d_s_ind", "+", "1", ",", "0", "]", ",", ":", "]", "\n", "x_t_tst", "=", "x", "[", "offset", "[", "d_t_ind", ",", "0", "]", "+", "n_tr_samples", ":", "offset", "[", "d_t_ind", "+", "1", ",", "0", "]", ",", ":", "]", "\n", "y_s_tr", "=", "y", "[", "offset", "[", "d_s_ind", ",", "0", "]", ":", "offset", "[", "d_s_ind", ",", "0", "]", "+", "n_tr_samples", "]", "\n", "y_t_tr", "=", "y", "[", "offset", "[", "d_t_ind", ",", "0", "]", ":", "offset", "[", "d_t_ind", ",", "0", "]", "+", "n_tr_samples", "]", "\n", "y_s_tst", "=", "y", "[", "offset", "[", "d_s_ind", ",", "0", "]", "+", "n_tr_samples", ":", "offset", "[", "d_s_ind", "+", "1", ",", "0", "]", "]", "\n", "y_t_tst", "=", "y", "[", "offset", "[", "d_t_ind", ",", "0", "]", "+", "n_tr_samples", ":", "offset", "[", "d_t_ind", "+", "1", ",", "0", "]", "]", "\n", "x_s_tr", ",", "y_s_tr", "=", "shuffle", "(", "x_s_tr", ",", "y_s_tr", ")", "\n", "x_t_tr", ",", "y_t_tr", "=", "shuffle", "(", "x_t_tr", ",", "y_t_tr", ")", "\n", "x_s_tst", ",", "y_s_tst", "=", "shuffle", "(", "x_s_tst", ",", "y_s_tst", ")", "\n", "x_t_tst", ",", "y_t_tst", "=", "shuffle", "(", "x_t_tst", ",", "y_t_tst", ")", "\n", "y_s_tr", "[", "y_s_tr", "==", "-", "1", "]", "=", "0", "\n", "y_t_tr", "[", "y_t_tr", "==", "-", "1", "]", "=", "0", "\n", "y_s_tst", "[", "y_s_tst", "==", "-", "1", "]", "=", "0", "\n", "y_t_tst", "[", "y_t_tst", "==", "-", "1", "]", "=", "0", "\n", "return", "x_s_tr", ",", "y_s_tr", ",", "x_t_tr", ",", "y_t_tr", ",", "x_s_tst", ",", "y_s_tst", ",", "x_t_tst", ",", "y_t_tst", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.load_dataset": [[84, 95], ["scipy.io.loadmat", "yy.ravel", "xx[].toarray"], "function", ["None"], ["", "def", "load_dataset", "(", "n_features", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Load amazon reviews\n    \"\"\"", "\n", "mat", "=", "loadmat", "(", "filename", ")", "\n", "xx", "=", "mat", "[", "'xx'", "]", "\n", "yy", "=", "mat", "[", "'yy'", "]", "\n", "offset", "=", "mat", "[", "'offset'", "]", "\n", "x", "=", "xx", "[", ":", "n_features", ",", ":", "]", ".", "toarray", "(", ")", ".", "T", "#n_samples X n_features", "\n", "y", "=", "yy", ".", "ravel", "(", ")", "\n", "return", "x", ",", "y", ",", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.accuracy": [[96, 101], ["numpy.sum", "numpy.abs", "numpy.round().ravel", "y_true.ravel", "numpy.round"], "function", ["None"], ["", "def", "accuracy", "(", "y", ",", "y_true", ")", ":", "\n", "    ", "\"\"\"\n    amount of right classified reviews\n    \"\"\"", "\n", "return", "1", "-", "np", ".", "sum", "(", "np", ".", "abs", "(", "np", ".", "round", "(", "y", ")", ".", "ravel", "(", ")", "-", "y_true", ".", "ravel", "(", ")", ")", ")", "/", "y", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.reverse_validation": [[102, 137], ["model.fit", "model.save", "model.predict", "model.predict", "model.fit", "model.predict", "sentiment_analysis.accuracy", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.fit", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.save", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.predict", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.predict", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.fit", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.predict", "home.repos.pwc.inspect_result.wzell_mann.None.sentiment_analysis.accuracy"], ["", "def", "reverse_validation", "(", "model", ",", "init_weights", ",", "S", ",", "T", ",", "name", "=", "'nn'", ")", ":", "\n", "    ", "\"\"\"\n    reverse validation\n    \n    - Zhong, Erheng, et al. \"Cross validation framework to choose amongst\n    models and datasets for transfer learning.\", Joint European Conference on\n    Machine Learning and Knowledge Discovery in Databases. Springer Berlin\n    Heidelberg, 2010.\n    \"\"\"", "\n", "train_perc", "=", "0.8", "\n", "x_tr_s", "=", "S", "[", "0", "]", "[", ":", "int", "(", "S", "[", "0", "]", ".", "shape", "[", "0", "]", "*", "train_perc", ")", ",", ":", "]", "\n", "y_tr_s", "=", "S", "[", "1", "]", "[", ":", "int", "(", "S", "[", "1", "]", ".", "shape", "[", "0", "]", "*", "train_perc", ")", "]", "\n", "x_val_s", "=", "S", "[", "0", "]", "[", "int", "(", "S", "[", "0", "]", ".", "shape", "[", "0", "]", "*", "train_perc", ")", ":", ",", ":", "]", "\n", "y_val_s", "=", "S", "[", "1", "]", "[", "int", "(", "S", "[", "1", "]", ".", "shape", "[", "0", "]", "*", "train_perc", ")", ":", "]", "\n", "x_tr_t", "=", "T", "[", ":", "int", "(", "T", ".", "shape", "[", "0", "]", "*", "train_perc", ")", ",", ":", "]", "\n", "x_val_t", "=", "T", "[", "int", "(", "T", ".", "shape", "[", "0", "]", "*", "train_perc", ")", ":", ",", ":", "]", "\n", "# Train model \\nu", "\n", "model", ".", "fit", "(", "x_tr_s", ",", "y_tr_s", ",", "x_tr_t", ",", "val_set", "=", "(", "x_val_s", ",", "y_val_s", ")", ",", "init_weights", "=", "init_weights", ")", "\n", "# Save the weights as init for next turn", "\n", "model", ".", "save", "(", "'tmp_weights_rv'", ")", "\n", "# Predict target labels", "\n", "y_pred_t", "=", "model", ".", "predict", "(", "x_tr_t", ")", "\n", "y_pred_val_t", "=", "model", ".", "predict", "(", "x_val_t", ")", "\n", "# Learn reverse classifier \\nu_r (load weights)", "\n", "# Init with first fitted weights, procedere taken from", "\n", "# Ganin, Yaroslav, et al. \"Domain-adversarial training of neural networks.\",", "\n", "# arXiv preprint arXiv:1505.07818 (2015).", "\n", "model", ".", "fit", "(", "x_tr_t", ",", "y_pred_t", ",", "x_tr_s", ",", "val_set", "=", "(", "x_val_t", ",", "y_pred_val_t", ")", ",", "\n", "init_weights", "=", "'tmp_weights_rv'", ")", "\n", "# Evaluate reverse classifier", "\n", "y_pred_s", "=", "model", ".", "predict", "(", "x_val_s", ")", "\n", "# Calculate accuracy", "\n", "acc", "=", "accuracy", "(", "y_pred_s", ",", "y_val_s", ")", "\n", "# Return reverse validation risk", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.None.artificial_example.cmd": [[51, 73], ["x1.mean", "x2.mean", "artificial_example.l2diff", "range", "artificial_example.moment_diff"], "function", ["home.repos.pwc.inspect_result.wzell_mann.models.central_moment_discrepancy.l2diff", "home.repos.pwc.inspect_result.wzell_mann.models.central_moment_discrepancy.moment_diff"], ["def", "cmd", "(", "labels", ",", "y_pred", ")", ":", "\n", "    ", "\"\"\"\n    central moment discrepancy (cmd)\n    objective function for keras models (theano or tensorflow backend)\n    \n    - Zellinger, Werner, et al. \"Robust unsupervised domain adaptation for\n    neural networks via moment alignment.\", TODO\n    - Zellinger, Werner, et al. \"Central moment discrepancy (CMD) for\n    domain-invariant representation learning.\", ICLR, 2017.\n    \"\"\"", "\n", "x1", "=", "y_pred", "[", ":", ",", ":", "N_HIDDEN_NODES", "]", "\n", "x2", "=", "y_pred", "[", ":", ",", "N_HIDDEN_NODES", ":", "]", "\n", "mx1", "=", "x1", ".", "mean", "(", "0", ")", "\n", "mx2", "=", "x2", ".", "mean", "(", "0", ")", "\n", "sx1", "=", "x1", "-", "mx1", "\n", "sx2", "=", "x2", "-", "mx2", "\n", "dm", "=", "l2diff", "(", "mx1", ",", "mx2", ")", "\n", "scms", "=", "dm", "\n", "for", "i", "in", "range", "(", "N_MOMENTS", "-", "1", ")", ":", "\n", "# moment diff of centralized samples", "\n", "        ", "scms", "+=", "moment_diff", "(", "sx1", ",", "sx2", ",", "i", "+", "2", ")", "\n", "", "return", "scms", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.None.artificial_example.l2diff": [[74, 79], ["None"], "function", ["None"], ["", "def", "l2diff", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "\"\"\"\n    standard euclidean norm\n    \"\"\"", "\n", "return", "(", "(", "x1", "-", "x2", ")", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.None.artificial_example.moment_diff": [[80, 87], ["artificial_example.l2diff", "keras.backend.cast", "keras.backend.cast"], "function", ["home.repos.pwc.inspect_result.wzell_mann.models.central_moment_discrepancy.l2diff"], ["", "def", "moment_diff", "(", "sx1", ",", "sx2", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    difference between moments\n    \"\"\"", "\n", "ss1", "=", "(", "sx1", "**", "K", ".", "cast", "(", "k", ",", "'int32'", ")", ")", ".", "mean", "(", "0", ")", "\n", "ss2", "=", "(", "sx2", "**", "K", ".", "cast", "(", "k", ",", "'int32'", ")", ")", ".", "mean", "(", "0", ")", "\n", "return", "l2diff", "(", "ss1", ",", "ss2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.None.artificial_example.neural_network": [[88, 129], ["keras.layers.Input", "keras.layers.Input", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense.", "keras.layers.Dense.", "keras.layers.Dense.", "keras.layers.Dense.", "keras.layers.merge", "keras.models.Model", "keras.models.Model", "keras.models.Model.compile", "keras.optimizers.Adadelta"], "function", ["None"], ["", "def", "neural_network", "(", "domain_adaptation", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    moment alignment neural network (MANN)\n    \n    - Zellinger, Werner, et al. \"Robust unsupervised domain adaptation for\n    neural networks via moment alignment.\", arXiv preprint arXiv:1711.06114, 2017\n    \"\"\"", "\n", "# layer definition", "\n", "input_s", "=", "Input", "(", "shape", "=", "(", "2", ",", ")", ",", "name", "=", "'souce_input'", ")", "\n", "input_t", "=", "Input", "(", "shape", "=", "(", "2", ",", ")", ",", "name", "=", "'target_input'", ")", "\n", "encoding", "=", "Dense", "(", "N_HIDDEN_NODES", ",", "\n", "activation", "=", "'sigmoid'", ",", "\n", "name", "=", "'hidden'", ")", "\n", "prediction", "=", "Dense", "(", "N_CLASSES", ",", "\n", "activation", "=", "'softmax'", ",", "\n", "name", "=", "'pred'", ")", "\n", "# network architecture", "\n", "encoded_s", "=", "encoding", "(", "input_s", ")", "\n", "encoded_t", "=", "encoding", "(", "input_t", ")", "\n", "pred_s", "=", "prediction", "(", "encoded_s", ")", "\n", "pred_t", "=", "prediction", "(", "encoded_t", ")", "\n", "dense_s_t", "=", "merge", "(", "[", "encoded_s", ",", "encoded_t", "]", ",", "mode", "=", "'concat'", ",", "concat_axis", "=", "1", ")", "\n", "# input/output definition", "\n", "nn", "=", "Model", "(", "input", "=", "[", "input_s", ",", "input_t", "]", ",", "\n", "output", "=", "[", "pred_s", ",", "pred_t", ",", "dense_s_t", "]", ")", "\n", "# seperate model for activation visualization", "\n", "visualize_model", "=", "Model", "(", "input", "=", "[", "input_s", ",", "input_t", "]", ",", "\n", "output", "=", "[", "encoded_s", ",", "encoded_t", "]", ")", "\n", "# compile model", "\n", "if", "domain_adaptation", "==", "False", ":", "\n", "        ", "cmd_weight", "=", "0.", "\n", "", "else", ":", "\n", "# Please note that the loss weight of the cmd is one per default", "\n", "# (see paper).", "\n", "        ", "cmd_weight", "=", "1.", "\n", "", "nn", ".", "compile", "(", "loss", "=", "[", "'categorical_crossentropy'", ",", "\n", "'categorical_crossentropy'", ",", "cmd", "]", ",", "\n", "loss_weights", "=", "[", "1.", ",", "0.", ",", "cmd_weight", "]", ",", "\n", "optimizer", "=", "Adadelta", "(", ")", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "return", "nn", ",", "visualize_model", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.None.artificial_example.plot_classification_boarders": [[130, 158], ["matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "numpy.argmax", "matplotlib.contour", "matplotlib.contour", "matplotlib.axis", "matplotlib.savefig", "numpy.mgrid[].reshape", "nn.predict", "z[].reshape", "z[].reshape"], "function", ["home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.predict"], ["", "def", "plot_classification_boarders", "(", "nn", ",", "save_name", ")", ":", "\n", "    ", "\"\"\"\n    plot dataset and classification boarders\n    \"\"\"", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "x_s", "[", "y_s", "[", ":", ",", "0", "]", "==", "1", ",", "0", "]", ",", "x_s", "[", "y_s", "[", ":", ",", "0", "]", "==", "1", ",", "1", "]", ",", "color", "=", "'k'", ",", "marker", "=", "r'$+$'", ",", "\n", "linestyle", "=", "''", ",", "ms", "=", "15", ")", "\n", "plt", ".", "plot", "(", "x_s", "[", "y_s", "[", ":", ",", "1", "]", "==", "1", ",", "0", "]", ",", "x_s", "[", "y_s", "[", ":", ",", "1", "]", "==", "1", ",", "1", "]", ",", "color", "=", "'k'", ",", "marker", "=", "r'$-$'", ",", "\n", "linestyle", "=", "''", ",", "ms", "=", "15", ")", "\n", "plt", ".", "plot", "(", "x_s", "[", "y_s", "[", ":", ",", "2", "]", "==", "1", ",", "0", "]", ",", "x_s", "[", "y_s", "[", ":", ",", "2", "]", "==", "1", ",", "1", "]", ",", "color", "=", "'k'", ",", "marker", "=", "'*'", ",", "\n", "linestyle", "=", "''", ",", "ms", "=", "15", ")", "\n", "plt", ".", "plot", "(", "x_t", "[", ":", ",", "0", "]", ",", "x_t", "[", ":", ",", "1", "]", ",", "'k.'", ")", "\n", "x_min", "=", "-", "1", "\n", "y_min", "=", "-", "0.75", "\n", "x_max", "=", "1.2", "\n", "y_max", "=", "1.3", "\n", "xy", "=", "np", ".", "mgrid", "[", "x_min", ":", "x_max", ":", "0.001", ",", "y_min", ":", "y_max", ":", "0.001", "]", ".", "reshape", "(", "2", ",", "-", "1", ")", ".", "T", "\n", "z", "=", "nn", ".", "predict", "(", "[", "xy", ",", "xy", "]", ")", "[", "0", "]", "\n", "ind", "=", "np", ".", "argmax", "(", "z", ",", "axis", "=", "1", ")", "\n", "z", "[", "ind", "!=", "0", ",", "0", "]", "=", "0", "\n", "z", "[", "ind", "!=", "1", ",", "1", "]", "=", "0", "\n", "x", ",", "y", "=", "np", ".", "mgrid", "[", "x_min", ":", "x_max", ":", "0.001", ",", "y_min", ":", "y_max", ":", "0.001", "]", "\n", "plt", ".", "contour", "(", "x", ",", "y", ",", "z", "[", ":", ",", "0", "]", ".", "reshape", "(", "x", ".", "shape", ")", ",", "levels", "=", "[", "0.1", "]", ",", "\n", "colors", "=", "(", "'k'", ",", ")", ",", "linestyles", "=", "(", "'-'", ",", ")", ",", "linewidths", "=", "(", "2", ",", ")", ")", "\n", "plt", ".", "contour", "(", "x", ",", "y", ",", "z", "[", ":", ",", "1", "]", ".", "reshape", "(", "x", ".", "shape", ")", ",", "levels", "=", "[", "0", "]", ",", "\n", "colors", "=", "(", "'k'", ",", ")", ",", "linestyles", "=", "(", "'-'", ",", ")", ",", "linewidths", "=", "(", "2", ",", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "savefig", "(", "save_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.None.artificial_example.plot_activations": [[159, 181], ["int", "matplotlib.subplots", "enumerate", "fig.set_figheight", "matplotlib.setp", "matplotlib.setp", "matplotlib.savefig", "axs.reshape", "seaborn.kdeplot", "seaborn.kdeplot", "matplotlib.setp", "matplotlib.setp", "ax.xaxis.get_ticklabels", "ax.yaxis.get_ticklabels"], "function", ["None"], ["", "def", "plot_activations", "(", "a_s", ",", "a_t", ",", "save_name", ")", ":", "\n", "    ", "\"\"\"\n    activation visualization via seaborn library\n    \"\"\"", "\n", "n_dim", "=", "a_s", ".", "shape", "[", "1", "]", "\n", "n_rows", "=", "1", "\n", "n_cols", "=", "int", "(", "n_dim", "/", "n_rows", ")", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "nrows", "=", "n_rows", ",", "ncols", "=", "n_cols", ",", "sharey", "=", "True", ",", "\n", "sharex", "=", "True", ")", "\n", "for", "k", ",", "ax", "in", "enumerate", "(", "axs", ".", "reshape", "(", "-", "1", ")", ")", ":", "\n", "        ", "if", "k", ">=", "n_dim", ":", "\n", "            ", "continue", "\n", "", "sns", ".", "kdeplot", "(", "a_t", "[", ":", ",", "k", "]", ",", "ax", "=", "ax", ",", "shade", "=", "True", ",", "label", "=", "'target'", ",", "\n", "legend", "=", "False", ",", "color", "=", "'0.4'", ",", "bw", "=", "0.03", ")", "\n", "sns", ".", "kdeplot", "(", "a_s", "[", ":", ",", "k", "]", ",", "ax", "=", "ax", ",", "shade", "=", "True", ",", "label", "=", "'source'", ",", "\n", "legend", "=", "False", ",", "color", "=", "'0'", ",", "bw", "=", "0.03", ")", "\n", "plt", ".", "setp", "(", "ax", ".", "xaxis", ".", "get_ticklabels", "(", ")", ",", "fontsize", "=", "10", ")", "\n", "plt", ".", "setp", "(", "ax", ".", "yaxis", ".", "get_ticklabels", "(", ")", ",", "fontsize", "=", "10", ")", "\n", "", "fig", ".", "set_figheight", "(", "3", ")", "\n", "plt", ".", "setp", "(", "axs", ",", "xticks", "=", "[", "0", ",", "0.5", ",", "1", "]", ")", "\n", "plt", ".", "setp", "(", "axs", ",", "ylim", "=", "[", "0", ",", "10", "]", ")", "\n", "plt", ".", "savefig", "(", "save_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.Batches.__init__": [[39, 43], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x", ",", "y", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "x", "=", "x", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.Batches.next_batch": [[44, 55], ["mann_object_recognition.Batches.next_batch_smaller", "mann_object_recognition.Batches.next_batch_bigger"], "methods", ["home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.Batches.next_batch_smaller", "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.Batches.next_batch_bigger"], ["", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        get next batch\n        \"\"\"", "\n", "if", "self", ".", "y", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", ":", "\n", "# this case is not used in the experiments", "\n", "            ", "x", ",", "y", "=", "self", ".", "next_batch_smaller", "(", "self", ".", "x", ",", "self", ".", "y", ",", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "# only this case is used", "\n", "            ", "x", ",", "y", "=", "self", ".", "next_batch_bigger", "(", ")", "\n", "", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.Batches.next_batch_smaller": [[56, 94], ["numpy.array", "numpy.array", "int", "int", "numpy.array", "range", "numpy.ones", "numpy.concatenate", "numpy.concatenate", "numpy.min", "int", "numpy.concatenate", "numpy.random.permutation", "mann_object_recognition.Batches.y.sum", "numpy.arange", "numpy.random.permutation", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.astype", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "next_batch_smaller", "(", "self", ",", "x", ",", "y", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\n        downsample a batch\n        \"\"\"", "\n", "x_batch", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "y_batch", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "# n_min is the smallest class size", "\n", "n_min", "=", "int", "(", "np", ".", "min", "(", "self", ".", "y", ".", "sum", "(", "0", ")", ")", ")", "\n", "n_rest", "=", "int", "(", "batch_size", "-", "n_min", "*", "y", ".", "shape", "[", "1", "]", ")", "\n", "if", "n_rest", "<", "0", ":", "\n", "            ", "n_min", "=", "int", "(", "batch_size", "/", "y", ".", "shape", "[", "1", "]", ")", "\n", "n_rest", "=", "batch_size", "%", "y", ".", "shape", "[", "1", "]", "\n", "", "ind_chos", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "is_first", "=", "True", "\n", "# fill with n_min samples per class", "\n", "for", "cl", "in", "range", "(", "y", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "ind_cl", "=", "np", ".", "arange", "(", "y", ".", "shape", "[", "0", "]", ")", "[", "y", "[", ":", ",", "cl", "]", "!=", "0", "]", "\n", "ind_cl_choose", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "ind_cl", ".", "shape", "[", "0", "]", ")", ")", "[", ":", "n_min", "]", "\n", "if", "is_first", ":", "\n", "                ", "x_batch", "=", "x", "[", "ind_cl", "[", "ind_cl_choose", "]", "]", "\n", "y_batch", "=", "y", "[", "ind_cl", "[", "ind_cl_choose", "]", "]", "\n", "is_first", "=", "False", "\n", "", "else", ":", "\n", "                ", "x_batch", "=", "np", ".", "concatenate", "(", "(", "x_batch", ",", "x", "[", "ind_cl", "[", "ind_cl_choose", "]", "]", ")", ",", "\n", "axis", "=", "0", ")", "\n", "y_batch", "=", "np", ".", "concatenate", "(", "(", "y_batch", ",", "y", "[", "ind_cl", "[", "ind_cl_choose", "]", "]", ")", ",", "\n", "axis", "=", "0", ")", "\n", "", "ind_chos", "=", "np", ".", "concatenate", "(", "(", "ind_chos", ",", "ind_cl", "[", "ind_cl_choose", "]", ")", ")", "\n", "# fill with n_rest random samples", "\n", "", "mask", "=", "np", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "bool", ")", "\n", "mask", "[", "ind_chos", ".", "astype", "(", "int", ")", "]", "=", "False", "\n", "x_rem", "=", "x", "[", "mask", "]", "\n", "y_rem", "=", "y", "[", "mask", "]", "\n", "ind_choose", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "x_rem", ".", "shape", "[", "0", "]", ")", ")", "[", ":", "n_rest", "]", "\n", "x_batch", "=", "np", ".", "concatenate", "(", "(", "x_batch", ",", "x_rem", "[", "ind_choose", "]", ")", ",", "axis", "=", "0", ")", "\n", "y_batch", "=", "np", ".", "concatenate", "(", "(", "y_batch", ",", "y_rem", "[", "ind_choose", "]", ")", ",", "axis", "=", "0", ")", "\n", "return", "x_batch", ",", "y_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.Batches.next_batch_bigger": [[95, 116], ["mann_object_recognition.Batches.next_batch_smaller", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.Batches.next_batch_smaller"], ["", "def", "next_batch_bigger", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        upsample a batch\n        \"\"\"", "\n", "n_remaining", "=", "self", ".", "batch_size", "\n", "is_first", "=", "True", "\n", "while", "n_remaining", ">=", "self", ".", "x", ".", "shape", "[", "0", "]", ":", "\n", "# copy full samples to the batch", "\n", "            ", "if", "is_first", ":", "\n", "                ", "x_batch", "=", "self", ".", "x", "\n", "y_batch", "=", "self", ".", "y", "\n", "is_first", "=", "False", "\n", "", "else", ":", "\n", "                ", "x_batch", "=", "np", ".", "concatenate", "(", "(", "x_batch", ",", "self", ".", "x", ")", ",", "axis", "=", "0", ")", "\n", "y_batch", "=", "np", ".", "concatenate", "(", "(", "y_batch", ",", "self", ".", "y", ")", ",", "axis", "=", "0", ")", "\n", "", "n_remaining", "-=", "self", ".", "x", ".", "shape", "[", "0", "]", "\n", "# fill the remaining samples such that the classes are balanced", "\n", "", "x_add", ",", "y_add", "=", "self", ".", "next_batch_smaller", "(", "self", ".", "x", ",", "self", ".", "y", ",", "n_remaining", ")", "\n", "x_batch", "=", "np", ".", "concatenate", "(", "(", "x_batch", ",", "x_add", ")", ",", "axis", "=", "0", ")", "\n", "y_batch", "=", "np", ".", "concatenate", "(", "(", "y_batch", ",", "y_add", ")", ",", "axis", "=", "0", ")", "\n", "return", "x_batch", ",", "y_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.MANN.__init__": [[122, 137], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "folder", ",", "\n", "n_features", "=", "256", ",", "\n", "max_n_epoch", "=", "10000", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "save_weights", "=", "'save_weights'", ",", "\n", "optimizer", "=", "'sgd'", ")", ":", "\n", "        ", "self", ".", "nn", "=", "None", "\n", "self", ".", "exp_folder", "=", "folder", "\n", "self", ".", "max_n_epoch", "=", "max_n_epoch", "\n", "self", ".", "n_features", "=", "n_features", "\n", "self", ".", "save_weights", "=", "save_weights", "\n", "self", ".", "activity_regularizer", "=", "activity_regularizer", "\n", "self", ".", "visualize_model", "=", "None", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.MANN.create": [[138, 180], ["keras.layers.Input", "keras.layers.Input", "keras.layers.Dense", "keras.layers.Dense.", "keras.layers.Dense.", "keras.layers.Dense.", "keras.layers.Dense.", "keras.models.Model", "mann_object_recognition.MANN.nn.compile", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dropout", "keras.optimizers.sgd", "keras.optimizers.Adadelta"], "methods", ["None"], ["", "def", "create", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        create two layer classifier\n        \"\"\"", "\n", "# input", "\n", "img_repr_s", "=", "Input", "(", "shape", "=", "(", "4096", ",", ")", ",", "name", "=", "'souce_input'", ")", "\n", "img_repr_t", "=", "Input", "(", "shape", "=", "(", "4096", ",", ")", ",", "name", "=", "'target_input'", ")", "\n", "# layers", "\n", "if", "self", ".", "activity_regularizer", ":", "\n", "            ", "shared_dense", "=", "Dense", "(", "self", ".", "n_features", ",", "\n", "name", "=", "'shared_dense'", ",", "\n", "activation", "=", "'sigmoid'", ",", "\n", "init", "=", "'he_normal'", ",", "\n", "activity_regularizer", "=", "self", ".", "activity_regularizer", ")", "\n", "", "else", ":", "\n", "            ", "shared_dense", "=", "Dense", "(", "self", ".", "n_features", ",", "\n", "name", "=", "'shared_dense'", ",", "\n", "activation", "=", "'sigmoid'", ",", "\n", "init", "=", "'he_normal'", ")", "\n", "", "classifier", "=", "Dense", "(", "31", ",", "\n", "name", "=", "'clf'", ",", "\n", "activation", "=", "'softmax'", ")", "\n", "# encoding", "\n", "s_d_s", "=", "shared_dense", "(", "img_repr_s", ")", "\n", "s_d_s", "=", "Dropout", "(", "0.8", ")", "(", "s_d_s", ")", "\n", "s_d_t", "=", "shared_dense", "(", "img_repr_t", ")", "\n", "s_d_t", "=", "Dropout", "(", "0.8", ")", "(", "s_d_t", ")", "\n", "# prediction", "\n", "pred_s", "=", "classifier", "(", "s_d_s", ")", "\n", "pred_t", "=", "classifier", "(", "s_d_t", ")", "\n", "# model definition", "\n", "self", ".", "nn", "=", "Model", "(", "input", "=", "[", "img_repr_s", ",", "img_repr_t", "]", ",", "\n", "output", "=", "[", "pred_s", ",", "pred_t", "]", ")", "\n", "# model compilation", "\n", "if", "self", ".", "optimizer", "==", "'sgd'", ":", "\n", "            ", "opt", "=", "sgd", "(", "lr", "=", "1e-2", ",", "decay", "=", "1e-4", ",", "momentum", "=", "0.9", ")", "\n", "", "else", ":", "\n", "            ", "opt", "=", "Adadelta", "(", ")", "\n", "", "self", ".", "nn", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "\n", "optimizer", "=", "opt", ",", "\n", "metrics", "=", "[", "'categorical_accuracy'", "]", ",", "\n", "loss_weights", "=", "[", "1.", ",", "0.", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.MANN.create_img_repr_alexnet": [[181, 245], ["mann_object_recognition.MANN.AlexNet", "keras.models.Model", "keras.models.Model.compile", "os.path.isfile", "print", "numpy.array", "numpy.save", "numpy.save", "print", "numpy.load", "numpy.load", "gen.next", "keras.models.Model.predict", "open", "open", "open", "open", "int", "numpy.zeros", "numpy.zeros", "print", "mann_object_recognition.MANN.get_layer", "str", "str", "img[].mean", "img[].mean", "img[].mean", "str"], "methods", ["home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.MANN.AlexNet", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.save", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.save", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.load", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.load", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.predict"], ["", "def", "create_img_repr_alexnet", "(", "self", ",", "weights_file", ",", "gen", ",", "save_name", ",", "max_n_imgs", ")", ":", "\n", "        ", "\"\"\"\n        calculate image representation\n        via pre-trained convolutional neural network\n        \"\"\"", "\n", "an", "=", "self", ".", "AlexNet", "(", "weights_file", ")", "\n", "an_repr", "=", "Model", "(", "input", "=", "an", ".", "input", ",", "\n", "output", "=", "[", "an", ".", "get_layer", "(", "'dense_2'", ")", ".", "output", "]", ")", "\n", "an_repr", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "\n", "optimizer", "=", "'sgd'", ",", "\n", "metrics", "=", "[", "'categorical_accuracy'", "]", ")", "\n", "\n", "if", "not", "isfile", "(", "self", ".", "exp_folder", "+", "save_name", "+", "'_img_repr.npy'", ")", ":", "\n", "            ", "print", "(", "'Calculating image representations of '", "+", "str", "(", "save_name", ")", "+", "'..'", ")", "\n", "repres", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "labels", "=", "None", "\n", "batch_size", "=", "0", "\n", "is_first", "=", "True", "\n", "n_processed", "=", "0", "\n", "while", "True", ":", "\n", "                ", "(", "x", ",", "y", ")", "=", "gen", ".", "next", "(", ")", "\n", "# crop img to use by pre-trained network", "\n", "if", "x", ".", "shape", "[", "2", "]", ">", "227", ":", "\n", "                    ", "cut", "=", "int", "(", "(", "x", ".", "shape", "[", "2", "]", "-", "227", ")", "/", "2", ")", "\n", "if", "cut", "%", "2", "==", "0", ":", "\n", "                        ", "x", "=", "x", "[", ":", ",", "[", "0", ",", "1", ",", "2", "]", ",", "cut", "+", "1", ":", "x", ".", "shape", "[", "2", "]", "-", "cut", ",", "cut", "+", "1", ":", "x", ".", "shape", "[", "2", "]", "-", "cut", "]", "\n", "", "else", ":", "\n", "                        ", "x", "=", "x", "[", ":", ",", "[", "0", ",", "1", ",", "2", "]", ",", "cut", ":", "x", ".", "shape", "[", "2", "]", "-", "cut", ",", "cut", ":", "x", ".", "shape", "[", "2", "]", "-", "cut", "]", "\n", "# subtract imagenet mean of imagenet challange", "\n", "# according to best practice in domain adaptation", "\n", "", "", "if", "save_name", "==", "'amazon'", ":", "\n", "                    ", "for", "img", "in", "x", ":", "\n", "                        ", "img", "[", "0", ",", ":", ",", ":", "]", "=", "img", "[", "0", ",", ":", ",", ":", "]", "-", "img", "[", "0", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "+", "104.0", "\n", "img", "[", "1", ",", ":", ",", ":", "]", "=", "img", "[", "1", ",", ":", ",", ":", "]", "-", "img", "[", "1", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "+", "116.0", "\n", "img", "[", "2", ",", ":", ",", ":", "]", "=", "img", "[", "2", ",", ":", ",", ":", "]", "-", "img", "[", "2", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "+", "122.0", "\n", "n_processed", "+=", "1", "\n", "", "", "else", ":", "\n", "                    ", "n_processed", "+=", "x", ".", "shape", "[", "0", "]", "\n", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "# calculate img representations", "\n", "", "img_repr", "=", "an_repr", ".", "predict", "(", "x", ")", "\n", "if", "is_first", ":", "\n", "                    ", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "is_first", "=", "False", "\n", "repres", "=", "np", ".", "zeros", "(", "[", "max_n_imgs", ",", "img_repr", ".", "shape", "[", "1", "]", "]", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "[", "max_n_imgs", ",", "y", ".", "shape", "[", "1", "]", "]", ")", "\n", "", "if", "n_processed", "<=", "max_n_imgs", ":", "\n", "                    ", "repres", "[", "n_processed", "-", "batch_size", ":", "n_processed", ",", ":", "]", "=", "img_repr", "\n", "labels", "[", "n_processed", "-", "batch_size", ":", "n_processed", ",", ":", "]", "=", "y", "\n", "", "else", ":", "\n", "                    ", "repres", "[", "max_n_imgs", "-", "batch_size", ":", "n_processed", ",", ":", "]", "=", "img_repr", "\n", "labels", "[", "max_n_imgs", "-", "batch_size", ":", "n_processed", ",", ":", "]", "=", "y", "\n", "", "if", "n_processed", ">=", "max_n_imgs", ":", "\n", "                    ", "break", "\n", "", "if", "n_processed", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "'processing img '", "+", "str", "(", "n_processed", ")", "+", "'..'", ")", "\n", "", "", "np", ".", "save", "(", "open", "(", "self", ".", "exp_folder", "+", "save_name", "+", "'_img_repr.npy'", ",", "'w'", ")", ",", "\n", "repres", ")", "\n", "np", ".", "save", "(", "open", "(", "self", ".", "exp_folder", "+", "save_name", "+", "'_labels.npy'", ",", "'w'", ")", ",", "labels", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Loading image representations of '", "+", "str", "(", "save_name", ")", "+", "'..'", ")", "\n", "repres", "=", "np", ".", "load", "(", "open", "(", "self", ".", "exp_folder", "+", "save_name", "+", "'_img_repr.npy'", ")", ")", "\n", "labels", "=", "np", ".", "load", "(", "open", "(", "self", ".", "exp_folder", "+", "save_name", "+", "'_labels.npy'", ")", ")", "\n", "", "return", "repres", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.MANN.fit": [[246, 324], ["datetime.datetime.now().replace", "mann_object_recognition.MANN.create", "numpy.zeros", "range", "mann_object_recognition.MANN.load", "datetime.datetime.now().replace", "print", "mann_object_recognition.Batches", "mann_object_recognition.Batches", "mann_object_recognition.MANN.nn.train_on_batch", "datetime.datetime.now", "mann_object_recognition.Batches", "mann_object_recognition.Batches", "mann_object_recognition.Batches.next_batch", "mann_object_recognition.Batches.next_batch", "mann_object_recognition.MANN.save", "mann_object_recognition.MANN.nn.evaluate", "print", "datetime.datetime.now", "str", "mann_object_recognition.Batches.next_batch", "mann_object_recognition.Batches.next_batch", "mann_object_recognition.MANN.save"], "methods", ["home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.create", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.load", "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.Batches.next_batch", "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.Batches.next_batch", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.save", "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.MANN.evaluate", "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.Batches.next_batch", "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.Batches.next_batch", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.save"], ["", "def", "fit", "(", "self", ",", "x_s", ",", "y_s", ",", "x_t", ",", "verbose", "=", "False", ",", "x_val", "=", "[", "]", ",", "y_val", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        train classifier\n        \"\"\"", "\n", "start", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "replace", "(", "microsecond", "=", "0", ")", "\n", "# init", "\n", "self", ".", "create", "(", ")", "\n", "best_acc", "=", "0", "\n", "best_loss", "=", "0", "\n", "counter", "=", "0", "\n", "dummy_y_t", "=", "np", ".", "zeros", "(", "(", "x_t", ".", "shape", "[", "0", "]", ",", "y_s", ".", "shape", "[", "1", "]", ")", ")", "\n", "# batch size is 2000 (arbitrary) when working with augmented data", "\n", "# batch size is ", "\n", "# Note that such high numbers are not possible in fine-tuning with", "\n", "# the learning rates of lower layers >0. If we set the lower learning", "\n", "# rates to zero, this is equivalent to pre-computing image", "\n", "# representations, as we are doing.", "\n", "iter_batches", "=", "None", "\n", "if", "x_t", ".", "shape", "[", "0", "]", ">", "3000", ":", "\n", "# data augmentation is used : equal batches are computed", "\n", "            ", "batch_s", "=", "Batches", "(", "x_s", ",", "y_s", ",", "2000", ")", "\n", "batch_t", "=", "Batches", "(", "x_t", ",", "dummy_y_t", ",", "2000", ")", "\n", "", "elif", "x_t", ".", "shape", "[", "0", "]", ">=", "x_s", ".", "shape", "[", "0", "]", ":", "\n", "# target batch is larger than source batch", "\n", "# source batch will be up-sampled via class-balanced copies", "\n", "            ", "iter_batches", "=", "Batches", "(", "x_s", ",", "y_s", ",", "x_t", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "# target batch is smaller than source batch", "\n", "# target batch will be randomly up-sampled", "\n", "            ", "iter_batches", "=", "Batches", "(", "x_t", ",", "dummy_y_t", ",", "x_s", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "max_n_epoch", ")", ":", "\n", "            ", "if", "x_t", ".", "shape", "[", "0", "]", ">", "3000", ":", "\n", "# equal batches are generated", "\n", "                ", "x_s_batch", ",", "y_s_batch", "=", "batch_s", ".", "next_batch", "(", ")", "\n", "x_t_batch", ",", "y_t_batch", "=", "batch_t", ".", "next_batch", "(", ")", "\n", "", "elif", "x_t", ".", "shape", "[", "0", "]", ">=", "x_s", ".", "shape", "[", "0", "]", ":", "\n", "# source batch is up-sampled via class-balanced copies", "\n", "                ", "x_s_batch", ",", "y_s_batch", "=", "iter_batches", ".", "next_batch", "(", ")", "\n", "x_t_batch", ",", "y_t_batch", "=", "x_t", ",", "dummy_y_t", "\n", "", "else", ":", "\n", "# target batch is randomly up-sampled", "\n", "                ", "x_s_batch", ",", "y_s_batch", "=", "x_s", ",", "y_s", "\n", "x_t_batch", ",", "y_t_batch", "=", "iter_batches", ".", "next_batch", "(", ")", "\n", "# one full-batch update", "\n", "", "metrics", "=", "self", ".", "nn", ".", "train_on_batch", "(", "[", "x_s_batch", ",", "x_t_batch", "]", ",", "\n", "[", "y_s_batch", ",", "y_t_batch", "]", ")", "\n", "if", "metrics", "[", "3", "]", ">", "best_acc", ":", "\n", "# an improvement happened", "\n", "                ", "self", ".", "save", "(", "self", ".", "save_weights", ")", "\n", "best_acc", "=", "metrics", "[", "3", "]", "\n", "best_loss", "=", "metrics", "[", "1", "]", "\n", "counter", "=", "0", "\n", "", "elif", "metrics", "[", "3", "]", "==", "best_acc", "and", "metrics", "[", "1", "]", "<", "best_loss", ":", "\n", "# save model with best accuracy and best loss", "\n", "                ", "self", ".", "save", "(", "self", ".", "save_weights", ")", "\n", "best_loss", "=", "metrics", "[", "1", "]", "\n", "best_acc", "=", "metrics", "[", "3", "]", "\n", "counter", "+=", "1", "\n", "", "else", ":", "\n", "                ", "counter", "+=", "1", "\n", "# Try the verbose command and you will get a fealing for the target", "\n", "# error during training. Maybe manually decreasing CMD weighting", "\n", "# can help the optimization, as used by various other works.", "\n", "", "if", "i", "%", "2", "==", "0", "and", "verbose", ":", "\n", "                ", "accs", "=", "self", ".", "nn", ".", "evaluate", "(", "[", "x_val", ",", "x_val", "]", ",", "\n", "[", "y_val", ",", "y_val", "]", ",", "\n", "verbose", "=", "0", ")", "\n", "print", "(", "'Batch update %.4d loss= %.4f tr-acc= %.4f tst-acc= %.4f'", "\n", "%", "(", "i", ",", "metrics", "[", "1", "]", ",", "best_acc", ",", "accs", "[", "4", "]", ")", ")", "\n", "", "if", "counter", ">", "1000", ":", "\n", "# early stopping after 1000 epochs", "\n", "# without accuracy increase", "\n", "                ", "break", "\n", "# load best model", "\n", "", "", "self", ".", "load", "(", "self", ".", "save_weights", ")", "\n", "stop", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "replace", "(", "microsecond", "=", "0", ")", "\n", "print", "(", "'done in '", "+", "str", "(", "stop", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.MANN.evaluate": [[325, 333], ["mann_object_recognition.MANN.nn.evaluate"], "methods", ["home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.MANN.evaluate"], ["", "def", "evaluate", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        evaluate classifier\n        \"\"\"", "\n", "accs", "=", "self", ".", "nn", ".", "evaluate", "(", "[", "x", ",", "x", "]", ",", "\n", "[", "y", ",", "y", "]", ",", "\n", "verbose", "=", "0", ")", "\n", "return", "accs", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.MANN.predict": [[334, 339], ["mann_object_recognition.MANN.nn.predict"], "methods", ["home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.predict"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        predict classifier\n        \"\"\"", "\n", "return", "self", ".", "nn", ".", "predict", "(", "[", "x", ",", "x", "]", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.MANN.save": [[340, 345], ["mann_object_recognition.MANN.nn.save_weights"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        save weights\n        \"\"\"", "\n", "self", ".", "nn", ".", "save_weights", "(", "self", ".", "exp_folder", "+", "name", "+", "'.hdf5'", ",", "overwrite", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.MANN.load": [[346, 352], ["mann_object_recognition.MANN.create", "mann_object_recognition.MANN.nn.load_weights"], "methods", ["home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.create"], ["", "def", "load", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        load weights\n        \"\"\"", "\n", "self", ".", "create", "(", ")", "\n", "self", ".", "nn", ".", "load_weights", "(", "self", ".", "exp_folder", "+", "name", "+", "'.hdf5'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_object_recognition.MANN.AlexNet": [[353, 461], ["keras.layers.Input", "keras.layers.merge", "keras.layers.merge", "keras.layers.merge", "keras.models.Model", "keras.layers.Lambda", "keras.layers.Lambda", "keras.layers.convolutional.Convolution2D", "keras.layers.convolutional.MaxPooling2D", "mann_object_recognition.MANN.AlexNet.crosschannelnormalization"], "methods", ["None"], ["", "def", "AlexNet", "(", "self", ",", "weights_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        AlexNet\n        implemented in keras and weights ported from caffe by\n        https://github.com/heuritech/convnets-keras\n        \n        A. Krizhevsky, I. Sutskever, and G. E. Hinton, \"Imagenet classification\n        with deep convolutional neural networks,\" in Advances in neural\n        information processing systems, pp. 109--1105, 2012.\n        \"\"\"", "\n", "\n", "def", "crosschannelnormalization", "(", "alpha", "=", "1e-4", ",", "k", "=", "2", ",", "beta", "=", "0.75", ",", "n", "=", "5", ",", "\n", "**", "kwargs", ")", ":", "\n", "            ", "def", "f", "(", "X", ")", ":", "\n", "                ", "b", ",", "ch", ",", "r", ",", "c", "=", "X", ".", "shape", "\n", "half", "=", "n", "//", "2", "\n", "square", "=", "K", ".", "square", "(", "X", ")", "\n", "extra_channels", "=", "K", ".", "spatial_2d_padding", "(", "K", ".", "permute_dimensions", "(", "square", ",", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", ",", "\n", "(", "0", ",", "half", ")", ")", "\n", "extra_channels", "=", "K", ".", "permute_dimensions", "(", "extra_channels", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "scale", "=", "k", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                    ", "scale", "+=", "alpha", "*", "extra_channels", "[", ":", ",", "i", ":", "i", "+", "ch", ",", ":", ",", ":", "]", "\n", "", "scale", "=", "scale", "**", "beta", "\n", "return", "X", "/", "scale", "\n", "", "return", "Lambda", "(", "f", ",", "output_shape", "=", "lambda", "input_shape", ":", "input_shape", ",", "\n", "**", "kwargs", ")", "\n", "\n", "", "def", "splittensor", "(", "axis", "=", "1", ",", "ratio_split", "=", "1", ",", "id_split", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "            ", "def", "f", "(", "X", ")", ":", "\n", "                ", "div", "=", "X", ".", "shape", "[", "axis", "]", "//", "ratio_split", "\n", "if", "axis", "==", "0", ":", "\n", "                    ", "output", "=", "X", "[", "id_split", "*", "div", ":", "(", "id_split", "+", "1", ")", "*", "div", ",", ":", ",", ":", ",", ":", "]", "\n", "", "elif", "axis", "==", "1", ":", "\n", "                    ", "output", "=", "X", "[", ":", ",", "id_split", "*", "div", ":", "(", "id_split", "+", "1", ")", "*", "div", ",", ":", ",", ":", "]", "\n", "", "elif", "axis", "==", "2", ":", "\n", "                    ", "output", "=", "X", "[", ":", ",", ":", ",", "id_split", "*", "div", ":", "(", "id_split", "+", "1", ")", "*", "div", ",", ":", "]", "\n", "", "elif", "axis", "==", "3", ":", "\n", "                    ", "output", "=", "X", "[", ":", ",", ":", ",", ":", ",", "id_split", "*", "div", ":", "(", "id_split", "+", "1", ")", "*", "div", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "'This axis is not possible'", ")", "\n", "", "return", "output", "\n", "\n", "", "def", "g", "(", "input_shape", ")", ":", "\n", "                ", "output_shape", "=", "list", "(", "input_shape", ")", "\n", "output_shape", "[", "axis", "]", "=", "output_shape", "[", "axis", "]", "//", "ratio_split", "\n", "return", "tuple", "(", "output_shape", ")", "\n", "\n", "", "return", "Lambda", "(", "f", ",", "output_shape", "=", "lambda", "input_shape", ":", "g", "(", "input_shape", ")", ",", "\n", "**", "kwargs", ")", "\n", "\n", "", "inputs", "=", "Input", "(", "shape", "=", "(", "3", ",", "227", ",", "227", ")", ")", "\n", "\n", "conv_1", "=", "Convolution2D", "(", "96", ",", "11", ",", "11", ",", "subsample", "=", "(", "4", ",", "4", ")", ",", "activation", "=", "'relu'", ",", "\n", "name", "=", "'conv_1'", ")", "(", "inputs", ")", "\n", "\n", "conv_2", "=", "MaxPooling2D", "(", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ")", "(", "conv_1", ")", "\n", "conv_2", "=", "crosschannelnormalization", "(", "name", "=", "'convpool_1'", ")", "(", "conv_2", ")", "\n", "conv_2", "=", "ZeroPadding2D", "(", "(", "2", ",", "2", ")", ")", "(", "conv_2", ")", "\n", "conv_2", "=", "merge", "(", "[", "Convolution2D", "(", "128", ",", "5", ",", "5", ",", "activation", "=", "'relu'", ",", "\n", "name", "=", "'conv_2_'", "+", "str", "(", "i", "+", "1", ")", ")", "(", "\n", "splittensor", "(", "ratio_split", "=", "2", ",", "id_split", "=", "i", ")", "(", "conv_2", ")", "\n", ")", "for", "i", "in", "range", "(", "2", ")", "]", ",", "\n", "mode", "=", "'concat'", ",", "concat_axis", "=", "1", ",", "\n", "name", "=", "'conv_2'", ")", "\n", "\n", "conv_3", "=", "MaxPooling2D", "(", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ")", "(", "conv_2", ")", "\n", "conv_3", "=", "crosschannelnormalization", "(", ")", "(", "conv_3", ")", "\n", "conv_3", "=", "ZeroPadding2D", "(", "(", "1", ",", "1", ")", ")", "(", "conv_3", ")", "\n", "conv_3", "=", "Convolution2D", "(", "384", ",", "3", ",", "3", ",", "activation", "=", "'relu'", ",", "\n", "name", "=", "'conv_3'", ")", "(", "conv_3", ")", "\n", "\n", "conv_4", "=", "ZeroPadding2D", "(", "(", "1", ",", "1", ")", ")", "(", "conv_3", ")", "\n", "conv_4", "=", "merge", "(", "[", "\n", "Convolution2D", "(", "192", ",", "3", ",", "3", ",", "activation", "=", "'relu'", ",", "\n", "name", "=", "'conv_4_'", "+", "str", "(", "i", "+", "1", ")", ")", "(", "\n", "splittensor", "(", "ratio_split", "=", "2", ",", "id_split", "=", "i", ")", "(", "conv_4", ")", "\n", ")", "for", "i", "in", "range", "(", "2", ")", "]", ",", "mode", "=", "'concat'", ",", "\n", "concat_axis", "=", "1", ",", "name", "=", "'conv_4'", ")", "\n", "\n", "conv_5", "=", "ZeroPadding2D", "(", "(", "1", ",", "1", ")", ")", "(", "conv_4", ")", "\n", "conv_5", "=", "merge", "(", "[", "\n", "Convolution2D", "(", "128", ",", "3", ",", "3", ",", "activation", "=", "'relu'", ",", "\n", "name", "=", "'conv_5_'", "+", "str", "(", "i", "+", "1", ")", ")", "(", "\n", "splittensor", "(", "ratio_split", "=", "2", ",", "id_split", "=", "i", ")", "(", "conv_5", ")", "\n", ")", "for", "i", "in", "range", "(", "2", ")", "]", ",", "\n", "mode", "=", "'concat'", ",", "concat_axis", "=", "1", ",", "\n", "name", "=", "'conv_5'", ")", "\n", "\n", "dense_1", "=", "MaxPooling2D", "(", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "name", "=", "'convpool_5'", ")", "(", "conv_5", ")", "\n", "\n", "dense_1", "=", "Flatten", "(", "name", "=", "'flatten'", ")", "(", "dense_1", ")", "\n", "dense_1", "=", "Dense", "(", "4096", ",", "activation", "=", "'relu'", ",", "name", "=", "'dense_1'", ")", "(", "dense_1", ")", "\n", "dense_2", "=", "Dropout", "(", "0.5", ")", "(", "dense_1", ")", "\n", "dense_2", "=", "Dense", "(", "4096", ",", "activation", "=", "'relu'", ",", "name", "=", "'dense_2'", ")", "(", "dense_2", ")", "\n", "dense_3", "=", "Dropout", "(", "0.5", ")", "(", "dense_2", ")", "\n", "dense_3", "=", "Dense", "(", "1000", ",", "name", "=", "'dense_3'", ")", "(", "dense_3", ")", "\n", "prediction", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'softmax'", ")", "(", "dense_3", ")", "\n", "\n", "model", "=", "Model", "(", "input", "=", "inputs", ",", "output", "=", "prediction", ")", "\n", "\n", "if", "weights_path", ":", "\n", "            ", "model", ".", "load_weights", "(", "weights_path", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.__init__": [[32, 49], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "n_features", "=", "5000", ",", "\n", "n_hiddens", "=", "50", ",", "\n", "folder", "=", "'temp/sentiment_analysis/'", ",", "\n", "n_epochs", "=", "1500", ",", "\n", "bsize", "=", "300", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "save_weights", "=", "'tmp_weights'", ")", ":", "\n", "        ", "self", ".", "n_features", "=", "n_features", "\n", "self", ".", "nn", "=", "None", "\n", "self", ".", "n_epochs", "=", "n_epochs", "\n", "self", ".", "batch_size", "=", "bsize", "\n", "self", ".", "n_hiddens", "=", "n_hiddens", "\n", "self", ".", "activity_regularizer", "=", "activity_regularizer", "\n", "self", ".", "tmp_folder", "=", "folder", "\n", "self", ".", "save_weights", "=", "save_weights", "+", "'.hdf5'", "\n", "self", ".", "visualize_model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.create": [[50, 100], ["keras.layers.Input", "keras.layers.Input", "keras.layers.Dense", "keras.layers.Dense.", "keras.layers.Dense.", "keras.layers.Dense.", "keras.layers.Dense.", "keras.models.Model", "keras.optimizers.Adagrad", "mann_sentiment_analysis.MANN.nn.compile", "keras.callbacks.EarlyStopping", "keras.callbacks.ModelCheckpoint", "keras.models.Model", "keras.layers.Dense", "keras.layers.Dense"], "methods", ["None"], ["", "def", "create", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        create two layer classifier\n        as in Algorithm 1 of the paper\n        \"\"\"", "\n", "# input", "\n", "input_s", "=", "Input", "(", "shape", "=", "(", "self", ".", "n_features", ",", ")", ",", "name", "=", "'souce_input'", ")", "\n", "input_t", "=", "Input", "(", "shape", "=", "(", "self", ".", "n_features", ",", ")", ",", "name", "=", "'target_input'", ")", "\n", "# layers", "\n", "if", "self", ".", "activity_regularizer", ":", "\n", "            ", "encoding", "=", "Dense", "(", "self", ".", "n_hiddens", ",", "\n", "activation", "=", "'sigmoid'", ",", "\n", "name", "=", "'encoded'", ",", "\n", "activity_regularizer", "=", "self", ".", "activity_regularizer", ")", "\n", "", "else", ":", "\n", "            ", "encoding", "=", "Dense", "(", "self", ".", "n_hiddens", ",", "\n", "activation", "=", "'sigmoid'", ",", "\n", "name", "=", "'encoded'", ")", "\n", "", "prediction", "=", "Dense", "(", "2", ",", "\n", "activation", "=", "'softmax'", ",", "\n", "name", "=", "'pred'", ")", "\n", "# encoding", "\n", "encoded_s", "=", "encoding", "(", "input_s", ")", "\n", "encoded_t", "=", "encoding", "(", "input_t", ")", "\n", "# prediction", "\n", "pred_s", "=", "prediction", "(", "encoded_s", ")", "\n", "pred_t", "=", "prediction", "(", "encoded_t", ")", "\n", "# model definition", "\n", "self", ".", "nn", "=", "Model", "(", "input", "=", "[", "input_s", ",", "input_t", "]", ",", "\n", "output", "=", "[", "pred_s", ",", "pred_t", "]", ")", "\n", "# adagrad optimizer, good choice for sparse data as in our case", "\n", "adagrad", "=", "Adagrad", "(", ")", "\n", "# model compilation", "\n", "self", ".", "nn", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "\n", "optimizer", "=", "adagrad", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ",", "\n", "loss_weights", "=", "[", "1.", ",", "0.", "]", ")", "\n", "# early stopping and save best model", "\n", "early_stopping", "=", "EarlyStopping", "(", "monitor", "=", "'val_loss'", ",", "\n", "patience", "=", "10", ",", "\n", "verbose", "=", "0", ")", "\n", "checkpointer", "=", "ModelCheckpoint", "(", "filepath", "=", "self", ".", "tmp_folder", "+", "\n", "self", ".", "save_weights", ",", "\n", "monitor", "=", "'val_pred_acc_1'", ",", "\n", "verbose", "=", "0", ",", "\n", "save_best_only", "=", "True", ")", "\n", "self", ".", "callbacks", "=", "[", "early_stopping", ",", "checkpointer", "]", "\n", "# Create seperate model for activation visualization", "\n", "self", ".", "visualize_model", "=", "Model", "(", "input", "=", "[", "input_s", ",", "input_t", "]", ",", "\n", "output", "=", "[", "encoded_s", ",", "encoded_t", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.fit": [[101, 147], ["datetime.datetime.now().replace", "numpy.random.seed", "mann_sentiment_analysis.MANN.create", "numpy.zeros", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "mann_sentiment_analysis.MANN.load", "datetime.datetime.now().replace", "mann_sentiment_analysis.MANN.nn.load_weights", "keras.utils.np_utils.to_categorical.astype", "numpy.zeros.astype", "mann_sentiment_analysis.MANN.nn.fit", "keras.utils.np_utils.to_categorical", "mann_sentiment_analysis.MANN.nn.fit", "print", "datetime.datetime.now", "val_set[].astype", "datetime.datetime.now", "str"], "methods", ["home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.create", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.load", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.fit", "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.fit"], ["", "def", "fit", "(", "self", ",", "x_s", ",", "y_s", ",", "x_t", ",", "val_set", "=", "None", ",", "init_weights", "=", "None", ",", "verbose", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        train classifier\n        \"\"\"", "\n", "start", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "replace", "(", "microsecond", "=", "0", ")", "\n", "# init", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "self", ".", "create", "(", ")", "\n", "if", "init_weights", ":", "\n", "# to use the same initial weights for all methods", "\n", "            ", "self", ".", "nn", ".", "load_weights", "(", "self", ".", "tmp_folder", "+", "init_weights", "+", "'.hdf5'", ")", "\n", "", "dummy", "=", "np", ".", "zeros", "(", "(", "x_t", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "dummy", "[", "0", "]", "=", "1", "\n", "y_s", "=", "to_categorical", "(", "y_s", ".", "astype", "(", "int", ")", ")", "\n", "y_t", "=", "to_categorical", "(", "dummy", ".", "astype", "(", "int", ")", ")", "\n", "\n", "# main training function of keras", "\n", "# the early stopping criteria is a patience of 10 according to a ", "\n", "# validation set", "\n", "if", "not", "val_set", ":", "\n", "# the validation set is not given and randomly choosen", "\n", "            ", "self", ".", "nn", ".", "fit", "(", "[", "x_s", ",", "x_t", "]", ",", "\n", "[", "y_s", ",", "y_t", "]", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "nb_epoch", "=", "self", ".", "n_epochs", ",", "\n", "callbacks", "=", "self", ".", "callbacks", ",", "\n", "verbose", "=", "verbose", ",", "\n", "validation_split", "=", "0.3", ")", "\n", "", "else", ":", "\n", "# the validation set is given", "\n", "# e.g. when applying the reverse cross-validation procedure", "\n", "            ", "y_val", "=", "to_categorical", "(", "val_set", "[", "1", "]", ".", "astype", "(", "int", ")", ")", "\n", "self", ".", "nn", ".", "fit", "(", "[", "x_s", ",", "x_t", "]", ",", "\n", "[", "y_s", ",", "y_t", "]", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "nb_epoch", "=", "self", ".", "n_epochs", ",", "\n", "callbacks", "=", "self", ".", "callbacks", ",", "\n", "verbose", "=", "verbose", ",", "\n", "validation_data", "=", "(", "[", "val_set", "[", "0", "]", ",", "val_set", "[", "0", "]", "]", ",", "\n", "[", "y_val", ",", "y_val", "]", ")", ")", "\n", "", "self", ".", "load", "(", "self", ".", "save_weights", ")", "# use with checkpointer", "\n", "stop", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "replace", "(", "microsecond", "=", "0", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'done in '", "+", "str", "(", "stop", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.predict": [[148, 157], ["numpy.zeros", "range", "mann_sentiment_analysis.MANN.nn.predict", "numpy.argmax", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.predict"], ["", "", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        predict classifier\n        \"\"\"", "\n", "y", "=", "self", ".", "nn", ".", "predict", "(", "[", "x", ",", "x", "]", ")", "[", "1", "]", "\n", "out", "=", "np", ".", "zeros", "(", "y", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "out", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "out", "[", "i", "]", "=", "np", ".", "argmax", "(", "np", ".", "round", "(", "y", "[", "i", ",", ":", "]", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.load": [[158, 164], ["mann_sentiment_analysis.MANN.create", "mann_sentiment_analysis.MANN.nn.load_weights"], "methods", ["home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.create"], ["", "def", "load", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        load weights\n        \"\"\"", "\n", "self", ".", "create", "(", ")", "\n", "self", ".", "nn", ".", "load_weights", "(", "self", ".", "tmp_folder", "+", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.save": [[165, 170], ["mann_sentiment_analysis.MANN.nn.save_weights"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        save weights\n        \"\"\"", "\n", "self", ".", "nn", ".", "save_weights", "(", "self", ".", "tmp_folder", "+", "name", "+", "'.hdf5'", ",", "overwrite", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.create_initial_weights": [[171, 206], ["keras.layers.Input", "keras.layers.Input", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense.", "keras.layers.Dense.", "keras.layers.Dense.", "keras.layers.Dense.", "keras.models.Model", "keras.optimizers.SGD", "keras.models.Model.compile", "numpy.zeros", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "keras.models.Model.fit", "keras.models.Model.save_weights", "keras.utils.np_utils.to_categorical.astype", "numpy.zeros.astype"], "methods", ["home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.fit"], ["", "def", "create_initial_weights", "(", "self", ",", "x_s", ",", "y_s", ",", "x_t", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        create and save a random weight initialization\n        done by setting up a randomly initialized keras model and perform\n        one 1 epoch sgd update\n        \"\"\"", "\n", "input_s", "=", "Input", "(", "shape", "=", "(", "self", ".", "n_features", ",", ")", ",", "name", "=", "'souce_input'", ")", "\n", "input_t", "=", "Input", "(", "shape", "=", "(", "self", ".", "n_features", ",", ")", ",", "name", "=", "'target_input'", ")", "\n", "encoding", "=", "Dense", "(", "self", ".", "n_hiddens", ",", "\n", "activation", "=", "'sigmoid'", ",", "\n", "init", "=", "'lecun_uniform'", ",", "\n", "name", "=", "'encoded'", ")", "\n", "prediction", "=", "Dense", "(", "2", ",", "\n", "activation", "=", "'softmax'", ",", "\n", "init", "=", "'lecun_uniform'", ",", "\n", "name", "=", "'pred'", ")", "\n", "encoded_s", "=", "encoding", "(", "input_s", ")", "\n", "encoded_t", "=", "encoding", "(", "input_t", ")", "\n", "pred_s", "=", "prediction", "(", "encoded_s", ")", "\n", "pred_t", "=", "prediction", "(", "encoded_t", ")", "\n", "\n", "nn", "=", "Model", "(", "input", "=", "[", "input_s", ",", "input_t", "]", ",", "\n", "output", "=", "[", "pred_s", ",", "pred_t", "]", ")", "\n", "sgd", "=", "SGD", "(", "0.1", ")", "\n", "nn", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "\n", "optimizer", "=", "sgd", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ",", "\n", "loss_weights", "=", "[", "1.", ",", "0.", "]", ")", "\n", "\n", "dummy", "=", "np", ".", "zeros", "(", "(", "x_t", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "dummy", "[", "0", "]", "=", "1", "\n", "y_s", "=", "to_categorical", "(", "y_s", ".", "astype", "(", "int", ")", ")", "\n", "y_t", "=", "to_categorical", "(", "dummy", ".", "astype", "(", "int", ")", ")", "\n", "nn", ".", "fit", "(", "[", "x_s", ",", "x_t", "]", ",", "[", "y_s", ",", "y_t", "]", ",", "nb_epoch", "=", "1", ",", "validation_split", "=", "0.3", ",", "verbose", "=", "0", ")", "\n", "nn", ".", "save_weights", "(", "self", ".", "tmp_folder", "+", "name", "+", "'.hdf5'", ",", "overwrite", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.get_activations": [[207, 212], ["mann_sentiment_analysis.MANN.visualize_model.predict"], "methods", ["home.repos.pwc.inspect_result.wzell_mann.models.mann_sentiment_analysis.MANN.predict"], ["", "def", "get_activations", "(", "self", ",", "x_s", ",", "x_t", ")", ":", "\n", "        ", "\"\"\"\n        returns hidden activations\n        \"\"\"", "\n", "return", "self", ".", "visualize_model", ".", "predict", "(", "[", "x_s", ",", "x_t", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.correlation_alignment.CORALRegularizer.__init__": [[45, 48], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "l", "=", "1", ")", ":", "\n", "        ", "self", ".", "uses_learning_phase", "=", "1", "\n", "self", ".", "l", "=", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.correlation_alignment.CORALRegularizer.set_layer": [[49, 52], ["None"], "methods", ["None"], ["", "def", "set_layer", "(", "self", ",", "layer", ")", ":", "\n", "# needed for keras layer", "\n", "        ", "self", ".", "layer", "=", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.correlation_alignment.CORALRegularizer.__call__": [[53, 67], ["keras.backend.switch", "keras.backend.in_train_phase", "hasattr", "Exception", "len", "correlation_alignment.coral", "keras.backend.equal", "correlation_alignment.CORALRegularizer.layer.get_output_at", "correlation_alignment.CORALRegularizer.layer.get_output_at", "len"], "methods", ["home.repos.pwc.inspect_result.wzell_mann.models.correlation_alignment.coral"], ["", "def", "__call__", "(", "self", ",", "loss", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'layer'", ")", ":", "\n", "            ", "raise", "Exception", "(", "'Need to call `set_layer` on '", "\n", "'ActivityRegularizer instance '", "\n", "'before calling the instance.'", ")", "\n", "", "regularizer_loss", "=", "loss", "\n", "sim", "=", "0", "\n", "if", "len", "(", "self", ".", "layer", ".", "inbound_nodes", ")", ">", "1", ":", "\n", "# we are in a shared keras layer", "\n", "            ", "sim", "=", "coral", "(", "self", ".", "layer", ".", "get_output_at", "(", "0", ")", ",", "\n", "self", ".", "layer", ".", "get_output_at", "(", "1", ")", ")", "\n", "", "add_loss", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "len", "(", "self", ".", "layer", ".", "inbound_nodes", ")", ",", "2", ")", ",", "sim", ",", "0", ")", "\n", "regularizer_loss", "+=", "self", ".", "l", "*", "add_loss", "\n", "return", "K", ".", "in_train_phase", "(", "regularizer_loss", ",", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.correlation_alignment.CORALRegularizer.get_config": [[68, 72], ["float"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "# needed for keras layer", "\n", "        ", "return", "{", "'name'", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "'l'", ":", "float", "(", "self", ".", "l", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wzell_mann.models.correlation_alignment.coral": [[25, 39], ["keras.backend.dot", "keras.backend.dot", "keras.backend.dot", "keras.backend.dot", "keras.backend.transpose", "keras.backend.transpose", "x1.sum", "keras.backend.transpose", "keras.backend.transpose", "x2.sum", "x1.mean", "x2.mean"], "function", ["None"], ["def", "coral", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "\"\"\"\n    correlation alignment objective (CORAL)\n    objective function for keras models (theano or tensorflow backend)\n    \n    - S. Baochen, and K. Saenko. \"Deep coral: Correlation alignment for deep\n    domain adaptation,\" Computer Vision--ECCV 2016 Workshops. Springer\n    International Publishing, 2016.\n    \"\"\"", "\n", "c1", "=", "1.", "/", "(", "x1", ".", "shape", "[", "0", "]", "-", "1", ")", "*", "(", "K", ".", "dot", "(", "K", ".", "transpose", "(", "x1", ")", ",", "x1", ")", "-", "\n", "K", ".", "dot", "(", "K", ".", "transpose", "(", "x1", ".", "mean", "(", "axis", "=", "0", ")", ")", ",", "x1", ".", "sum", "(", "axis", "=", "0", ")", ")", ")", "\n", "c2", "=", "1.", "/", "(", "x2", ".", "shape", "[", "0", "]", "-", "1", ")", "*", "(", "K", ".", "dot", "(", "K", ".", "transpose", "(", "x2", ")", ",", "x2", ")", "-", "\n", "K", ".", "dot", "(", "K", ".", "transpose", "(", "x2", ".", "mean", "(", "axis", "=", "0", ")", ")", ",", "x2", ".", "sum", "(", "axis", "=", "0", ")", ")", ")", "\n", "return", "1.", "/", "(", "4", "*", "x1", ".", "shape", "[", "0", "]", "**", "2", ")", "*", "(", "(", "c1", "-", "c2", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.central_moment_discrepancy.CMDRegularizer.__init__": [[73, 77], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "l", "=", "1.", ",", "n_moments", "=", "5", ")", ":", "\n", "        ", "self", ".", "uses_learning_phase", "=", "1", "\n", "self", ".", "l", "=", "l", "\n", "self", ".", "n_moments", "=", "n_moments", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.central_moment_discrepancy.CMDRegularizer.set_layer": [[78, 81], ["None"], "methods", ["None"], ["", "def", "set_layer", "(", "self", ",", "layer", ")", ":", "\n", "# needed for keras layer", "\n", "        ", "self", ".", "layer", "=", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.central_moment_discrepancy.CMDRegularizer.__call__": [[82, 97], ["keras.backend.switch", "keras.backend.in_train_phase", "hasattr", "Exception", "len", "central_moment_discrepancy.cmd", "keras.backend.equal", "central_moment_discrepancy.CMDRegularizer.layer.get_output_at", "central_moment_discrepancy.CMDRegularizer.layer.get_output_at", "len"], "methods", ["home.repos.pwc.inspect_result.wzell_mann.models.central_moment_discrepancy.cmd"], ["", "def", "__call__", "(", "self", ",", "loss", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'layer'", ")", ":", "\n", "            ", "raise", "Exception", "(", "'Need to call `set_layer` on '", "\n", "'ActivityRegularizer instance '", "\n", "'before calling the instance.'", ")", "\n", "", "regularizer_loss", "=", "loss", "\n", "sim", "=", "0", "\n", "if", "len", "(", "self", ".", "layer", ".", "inbound_nodes", ")", ">", "1", ":", "\n", "# we are in a shared keras layer", "\n", "            ", "sim", "=", "cmd", "(", "self", ".", "layer", ".", "get_output_at", "(", "0", ")", ",", "\n", "self", ".", "layer", ".", "get_output_at", "(", "1", ")", ",", "\n", "self", ".", "n_moments", ")", "\n", "", "add_loss", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "len", "(", "self", ".", "layer", ".", "inbound_nodes", ")", ",", "2", ")", ",", "sim", ",", "0", ")", "\n", "regularizer_loss", "+=", "self", ".", "l", "*", "add_loss", "\n", "return", "K", ".", "in_train_phase", "(", "regularizer_loss", ",", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.central_moment_discrepancy.CMDRegularizer.get_config": [[98, 102], ["float"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "# needed for keras layer", "\n", "        ", "return", "{", "'name'", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "'l'", ":", "float", "(", "self", ".", "l", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wzell_mann.models.central_moment_discrepancy.cmd": [[32, 53], ["x1.mean", "x2.mean", "central_moment_discrepancy.l2diff", "range", "central_moment_discrepancy.moment_diff"], "function", ["home.repos.pwc.inspect_result.wzell_mann.models.central_moment_discrepancy.l2diff", "home.repos.pwc.inspect_result.wzell_mann.models.central_moment_discrepancy.moment_diff"], ["def", "cmd", "(", "x1", ",", "x2", ",", "n_moments", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    central moment discrepancy (cmd)\n    objective function for keras models (theano or tensorflow backend)\n    \n    - Zellinger, Werner et al. \"Robust unsupervised domain adaptation\n    for neural networks via moment alignment,\" arXiv preprint arXiv:1711.06114,\n    2017.\n    - Zellinger, Werner, et al. \"Central moment discrepancy (CMD) for\n    domain-invariant representation learning.\", ICLR, 2017.\n    \"\"\"", "\n", "mx1", "=", "x1", ".", "mean", "(", "0", ")", "\n", "mx2", "=", "x2", ".", "mean", "(", "0", ")", "\n", "sx1", "=", "x1", "-", "mx1", "\n", "sx2", "=", "x2", "-", "mx2", "\n", "dm", "=", "l2diff", "(", "mx1", ",", "mx2", ")", "\n", "scms", "=", "dm", "\n", "for", "i", "in", "range", "(", "n_moments", "-", "1", ")", ":", "\n", "# moment diff of centralized samples", "\n", "        ", "scms", "+=", "moment_diff", "(", "sx1", ",", "sx2", ",", "i", "+", "2", ")", "\n", "", "return", "scms", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.central_moment_discrepancy.l2diff": [[54, 59], ["None"], "function", ["None"], ["", "def", "l2diff", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "\"\"\"\n    standard euclidean norm\n    \"\"\"", "\n", "return", "(", "(", "x1", "-", "x2", ")", "**", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.central_moment_discrepancy.moment_diff": [[60, 67], ["central_moment_discrepancy.l2diff", "keras.backend.cast", "keras.backend.cast"], "function", ["home.repos.pwc.inspect_result.wzell_mann.models.central_moment_discrepancy.l2diff"], ["", "def", "moment_diff", "(", "sx1", ",", "sx2", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    difference between moments\n    \"\"\"", "\n", "ss1", "=", "(", "sx1", "**", "K", ".", "cast", "(", "k", ",", "'int32'", ")", ")", ".", "mean", "(", "0", ")", "\n", "ss2", "=", "(", "sx2", "**", "K", ".", "cast", "(", "k", ",", "'int32'", ")", ")", ".", "mean", "(", "0", ")", "\n", "return", "l2diff", "(", "ss1", ",", "ss2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.maximum_mean_discrepancy.MMDRegularizer.__init__": [[46, 50], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "l", "=", "1", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "uses_learning_phase", "=", "1", "\n", "self", ".", "l", "=", "l", "\n", "self", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.maximum_mean_discrepancy.MMDRegularizer.set_layer": [[51, 54], ["None"], "methods", ["None"], ["", "def", "set_layer", "(", "self", ",", "layer", ")", ":", "\n", "# needed for keras layer", "\n", "        ", "self", ".", "layer", "=", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.maximum_mean_discrepancy.MMDRegularizer.__call__": [[55, 70], ["keras.backend.switch", "keras.backend.in_train_phase", "hasattr", "Exception", "len", "maximum_mean_discrepancy.mmd", "keras.backend.equal", "maximum_mean_discrepancy.MMDRegularizer.layer.get_output_at", "maximum_mean_discrepancy.MMDRegularizer.layer.get_output_at", "len"], "methods", ["home.repos.pwc.inspect_result.wzell_mann.models.maximum_mean_discrepancy.mmd"], ["", "def", "__call__", "(", "self", ",", "loss", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'layer'", ")", ":", "\n", "            ", "raise", "Exception", "(", "'Need to call `set_layer` on '", "\n", "'ActivityRegularizer instance '", "\n", "'before calling the instance.'", ")", "\n", "", "regularizer_loss", "=", "loss", "\n", "sim", "=", "0", "\n", "if", "len", "(", "self", ".", "layer", ".", "inbound_nodes", ")", ">", "1", ":", "\n", "# we are in a shared keras layer", "\n", "            ", "sim", "=", "mmd", "(", "self", ".", "layer", ".", "get_output_at", "(", "0", ")", ",", "\n", "self", ".", "layer", ".", "get_output_at", "(", "1", ")", ",", "\n", "self", ".", "beta", ")", "\n", "", "add_loss", "=", "K", ".", "switch", "(", "K", ".", "equal", "(", "len", "(", "self", ".", "layer", ".", "inbound_nodes", ")", ",", "2", ")", ",", "sim", ",", "0", ")", "\n", "regularizer_loss", "+=", "self", ".", "l", "*", "add_loss", "\n", "return", "K", ".", "in_train_phase", "(", "regularizer_loss", ",", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.maximum_mean_discrepancy.MMDRegularizer.get_config": [[71, 75], ["float"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "# needed for keras layer", "\n", "        ", "return", "{", "'name'", ":", "self", ".", "__class__", ".", "__name__", ",", "\n", "'l'", ":", "float", "(", "self", ".", "l", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wzell_mann.models.maximum_mean_discrepancy.mmd": [[23, 36], ["maximum_mean_discrepancy.gaussian_kernel", "maximum_mean_discrepancy.gaussian_kernel", "maximum_mean_discrepancy.gaussian_kernel", "gaussian_kernel.mean", "gaussian_kernel.mean", "gaussian_kernel.mean"], "function", ["home.repos.pwc.inspect_result.wzell_mann.models.maximum_mean_discrepancy.gaussian_kernel", "home.repos.pwc.inspect_result.wzell_mann.models.maximum_mean_discrepancy.gaussian_kernel", "home.repos.pwc.inspect_result.wzell_mann.models.maximum_mean_discrepancy.gaussian_kernel"], ["def", "mmd", "(", "x1", ",", "x2", ",", "beta", ")", ":", "\n", "    ", "\"\"\"\n    maximum mean discrepancy (MMD) based on Gaussian kernel\n    function for keras models (theano or tensorflow backend)\n    \n    - Gretton, Arthur, et al. \"A kernel method for the two-sample-problem.\"\n    Advances in neural information processing systems. 2007.\n    \"\"\"", "\n", "x1x1", "=", "gaussian_kernel", "(", "x1", ",", "x1", ",", "beta", ")", "\n", "x1x2", "=", "gaussian_kernel", "(", "x1", ",", "x2", ",", "beta", ")", "\n", "x2x2", "=", "gaussian_kernel", "(", "x2", ",", "x2", ",", "beta", ")", "\n", "diff", "=", "x1x1", ".", "mean", "(", ")", "-", "2", "*", "x1x2", ".", "mean", "(", ")", "+", "x2x2", ".", "mean", "(", ")", "\n", "return", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.wzell_mann.models.maximum_mean_discrepancy.gaussian_kernel": [[37, 40], ["x1.dimshuffle", "keras.backend.exp", "keras.backend.square().sum", "keras.backend.square"], "function", ["None"], ["", "def", "gaussian_kernel", "(", "x1", ",", "x2", ",", "beta", "=", "1.0", ")", ":", "\n", "    ", "r", "=", "x1", ".", "dimshuffle", "(", "0", ",", "'x'", ",", "1", ")", "\n", "return", "K", ".", "exp", "(", "-", "beta", "*", "K", ".", "square", "(", "r", "-", "x2", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", ")", "\n", "\n"]]}