{"home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.my_dataloader.__init__": [[204, 229], ["len", "random_erasing.RandomErasing", "os.listdir", "range", "range", "range", "range", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ImgDir", ",", "bndbox", ",", "augment", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "ImgDir", "=", "ImgDir", "\n", "self", ".", "bndbox", "=", "bndbox", "\n", "self", ".", "length", "=", "len", "(", "os", ".", "listdir", "(", "self", ".", "ImgDir", ")", ")", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "randomErase", "=", "random_erasing", ".", "RandomErasing", "(", "probability", "=", "0.5", ",", "sl", "=", "0.02", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ",", "mean", "=", "[", "0", "]", ")", "\n", "\n", "if", "augment", "and", "args", ".", "use_01", ":", "\n", "            ", "self", ".", "length", "=", "self", ".", "length", "//", "10", "\n", "self", ".", "index_mapper", "=", "{", "i", ":", "i", "*", "10", "for", "i", "in", "range", "(", "self", ".", "length", ")", "}", "\n", "", "elif", "augment", "and", "args", ".", "use_001", ":", "\n", "            ", "self", ".", "length", "=", "self", ".", "length", "//", "100", "\n", "self", ".", "index_mapper", "=", "{", "i", ":", "i", "*", "100", "for", "i", "in", "range", "(", "self", ".", "length", ")", "}", "\n", "", "elif", "augment", "and", "args", ".", "use_0001", ":", "\n", "            ", "self", ".", "length", "=", "self", ".", "length", "//", "1000", "\n", "self", ".", "index_mapper", "=", "{", "i", ":", "i", "*", "1000", "for", "i", "in", "range", "(", "self", ".", "length", ")", "}", "\n", "", "elif", "augment", "and", "args", ".", "use_0005", ":", "\n", "            ", "self", ".", "length", "=", "self", ".", "length", "//", "200", "\n", "self", ".", "index_mapper", "=", "{", "i", ":", "i", "*", "200", "for", "i", "in", "range", "(", "self", ".", "length", ")", "}", "\n", "", "elif", "augment", "and", "args", ".", "use_0002", ":", "\n", "            ", "self", ".", "length", "=", "self", ".", "length", "//", "500", "\n", "self", ".", "index_mapper", "=", "{", "i", ":", "i", "*", "500", "for", "i", "in", "range", "(", "self", ".", "length", ")", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "index_mapper", "=", "{", "i", ":", "i", "for", "i", "in", "range", "(", "self", ".", "length", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.my_dataloader.__getitem__": [[230, 258], ["scipy.loadmat", "isinstance", "main.dataPreprocess", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "main.my_dataloader.__getitem__", "keypointsWorld.astype", "str", "main.my_dataloader.__len__", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.dataPreprocess", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DatasetFromSampler.__getitem__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DatasetFromSampler.__len__"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "index", "=", "self", ".", "index_mapper", "[", "index", "]", "\n", "\n", "data", "=", "scio", ".", "loadmat", "(", "self", ".", "ImgDir", "+", "str", "(", "index", "+", "1", ")", "+", "'.mat'", ")", "\n", "depth", "=", "data", "[", "'DepthNormal'", "]", "[", ":", ",", ":", ",", "3", "]", "\n", "keypointsPixel", "=", "data", "[", "'keypointsPixel'", "]", "\n", "keypointsWorld", "=", "data", "[", "'keypointsWorld'", "]", "\n", "\n", "if", "isinstance", "(", "self", ".", "bndbox", ",", "dict", ")", ":", "\n", "            ", "if", "self", ".", "bndbox", "[", "str", "(", "index", "+", "1", ")", "]", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "# print(\"skip\")", "\n", "                ", "return", "self", ".", "__getitem__", "(", "(", "index", "+", "1", ")", "%", "self", ".", "__len__", "(", ")", ")", "\n", "# print(self.bndbox[str(index+1)])", "\n", "", "lefttop_pixel", "=", "self", ".", "bndbox", "[", "str", "(", "index", "+", "1", ")", "]", "[", "0", ",", "0", ":", "2", "]", "\n", "lefttop_pixel", "[", "0", "]", "-=", "25", "\n", "lefttop_pixel", "[", "1", "]", "-=", "15", "\n", "rightbottom_pixel", "=", "self", ".", "bndbox", "[", "str", "(", "index", "+", "1", ")", "]", "[", "0", ",", "2", ":", "4", "]", "\n", "rightbottom_pixel", "[", "0", "]", "+=", "25", "\n", "rightbottom_pixel", "[", "1", "]", "+=", "15", "\n", "", "else", ":", "\n", "            ", "lefttop_pixel", "=", "self", ".", "bndbox", "[", "index", "]", "[", "0", ":", "2", "]", "\n", "rightbottom_pixel", "=", "self", ".", "bndbox", "[", "index", "]", "[", "2", ":", "4", "]", "\n", "", "data", ",", "label", ",", "mean", ",", "std", "=", "dataPreprocess", "(", "depth", ",", "keypointsPixel", ",", "keypointsWorld", ",", "lefttop_pixel", ",", "rightbottom_pixel", ",", "None", ",", "augment", "=", "self", ".", "augment", ")", "\n", "\n", "# if self.augment:", "\n", "#     data = self.randomErase(data)", "\n", "\n", "return", "data", ",", "label", ",", "torch", ".", "from_numpy", "(", "keypointsWorld", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.my_dataloader.__len__": [[259, 261], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.pixel2world": [[86, 90], ["None"], "function", ["None"], ["def", "pixel2world", "(", "x", ",", "y", ",", "z", ")", ":", "\n", "    ", "worldX", "=", "(", "x", "-", "160.0", ")", "*", "z", "*", "0.0035", "\n", "worldY", "=", "(", "120.0", "-", "y", ")", "*", "z", "*", "0.0035", "\n", "return", "worldX", ",", "worldY", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.world2pixel": [[91, 95], ["None"], "function", ["None"], ["", "def", "world2pixel", "(", "x", ",", "y", ",", "z", ")", ":", "\n", "    ", "pixelX", "=", "160.0", "+", "x", "/", "(", "0.0035", "*", "z", ")", "\n", "pixelY", "=", "120.0", "-", "y", "/", "(", "0.0035", "*", "z", ")", "\n", "return", "pixelX", ",", "pixelY", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.transform": [[118, 129], ["cv2.warpAffine", "numpy.ones", "label[].copy", "numpy.matmul", "label_out.transpose.transpose", "label_out.transpose.transpose"], "function", ["None"], ["def", "transform", "(", "img", ",", "label", ",", "matrix", ")", ":", "\n", "    ", "'''\n    img: [H, W]  label, [N,2]   \n    '''", "\n", "img_out", "=", "cv2", ".", "warpAffine", "(", "img", ",", "matrix", ",", "(", "cropWidth", ",", "cropHeight", ")", ")", "\n", "label_out", "=", "np", ".", "ones", "(", "(", "keypointsNumber", ",", "3", ")", ")", "\n", "label_out", "[", ":", ",", ":", "2", "]", "=", "label", "[", ":", ",", ":", "2", "]", ".", "copy", "(", ")", "\n", "label_out", "=", "np", ".", "matmul", "(", "matrix", ",", "label_out", ".", "transpose", "(", ")", ")", "\n", "label_out", "=", "label_out", ".", "transpose", "(", ")", "\n", "\n", "return", "img_out", ",", "label_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.dataPreprocess": [[130, 189], ["numpy.ones", "numpy.ones", "max", "max", "min", "min", "img[].copy", "cv2.resize", "numpy.asarray", "main.crop_human_pcd", "numpy.ones", "numpy.asarray", "np.asarray.transpose", "numpy.asarray", "numpy.asarray", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.normal().reshape", "numpy.random.randint", "cv2.getRotationMatrix2D", "cv2.getRotationMatrix2D", "main.transform", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.normal", "numpy.where", "numpy.random.rand", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.crop_human_pcd", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.transform"], ["", "def", "dataPreprocess", "(", "img", ",", "keypointsPixel", ",", "keypointsWorld", ",", "lefttop_pixel", ",", "rightbottom_pixel", ",", "center", ",", "depth_thres", "=", "0.4", ",", "augment", "=", "False", ")", ":", "\n", "\n", "    ", "imageOutputs", "=", "np", ".", "ones", "(", "(", "cropHeight", ",", "cropWidth", ",", "1", ")", ",", "dtype", "=", "'float32'", ")", "\n", "labelOutputs", "=", "np", ".", "ones", "(", "(", "keypointsNumber", ",", "3", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "if", "augment", ":", "\n", "        ", "RandomOffset_1", "=", "np", ".", "random", ".", "randint", "(", "-", "1", "*", "RandCropShift", ",", "RandCropShift", ")", "\n", "RandomOffset_2", "=", "np", ".", "random", ".", "randint", "(", "-", "1", "*", "RandCropShift", ",", "RandCropShift", ")", "\n", "RandomOffset_3", "=", "np", ".", "random", ".", "randint", "(", "-", "1", "*", "RandCropShift", ",", "RandCropShift", ")", "\n", "RandomOffset_4", "=", "np", ".", "random", ".", "randint", "(", "-", "1", "*", "RandCropShift", ",", "RandCropShift", ")", "\n", "RandomOffsetDepth", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "RandshiftDepth", ",", "cropHeight", "*", "cropWidth", ")", ".", "reshape", "(", "cropHeight", ",", "cropWidth", ")", "\n", "RandomOffsetDepth", "[", "np", ".", "where", "(", "RandomOffsetDepth", "<", "RandshiftDepth", ")", "]", "=", "0", "\n", "RandomRotate", "=", "np", ".", "random", ".", "randint", "(", "-", "1", "*", "RandRotate", ",", "RandRotate", ")", "\n", "RandomScale", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "RandScale", "[", "0", "]", "+", "RandScale", "[", "1", "]", "\n", "matrix", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "cropWidth", "/", "2", ",", "cropHeight", "/", "2", ")", ",", "RandomRotate", ",", "RandomScale", ")", "\n", "", "else", ":", "\n", "        ", "RandomOffset_1", ",", "RandomOffset_2", ",", "RandomOffset_3", ",", "RandomOffset_4", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "RandomRotate", "=", "0", "\n", "RandomScale", "=", "1", "\n", "RandomOffsetDepth", "=", "0", "\n", "matrix", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "cropWidth", "/", "2", ",", "cropHeight", "/", "2", ")", ",", "RandomRotate", ",", "RandomScale", ")", "\n", "\n", "", "new_Xmin", "=", "max", "(", "lefttop_pixel", "[", "0", "]", "+", "RandomOffset_1", ",", "0", ")", "\n", "new_Ymin", "=", "max", "(", "lefttop_pixel", "[", "1", "]", "+", "RandomOffset_2", ",", "0", ")", "\n", "new_Xmax", "=", "min", "(", "rightbottom_pixel", "[", "0", "]", "+", "RandomOffset_3", ",", "img", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "new_Ymax", "=", "min", "(", "rightbottom_pixel", "[", "1", "]", "+", "RandomOffset_4", ",", "img", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "# print(new_Ymin, new_Ymax, new_Xmin, new_Xmax)", "\n", "\n", "imCrop", "=", "img", "[", "int", "(", "new_Ymin", ")", ":", "int", "(", "new_Ymax", ")", ",", "int", "(", "new_Xmin", ")", ":", "int", "(", "new_Xmax", ")", "]", ".", "copy", "(", ")", "\n", "imgResize", "=", "cv2", ".", "resize", "(", "imCrop", ",", "(", "cropWidth", ",", "cropHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "imgResize", "=", "np", ".", "asarray", "(", "imgResize", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "std", "=", "1", "\n", "imgResize", ",", "mean", "=", "crop_human_pcd", "(", "imgResize", ",", "keypointsWorld", "[", ":", ",", "2", "]", ")", "\n", "imgResize", "[", "imgResize", "!=", "0", "]", "=", "(", "imgResize", "[", "imgResize", "!=", "0", "]", "-", "mean", ")", "/", "std", "\n", "\n", "## label", "\n", "label_xy", "=", "np", ".", "ones", "(", "(", "keypointsNumber", ",", "2", ")", ",", "dtype", "=", "'float32'", ")", "\n", "label_xy", "[", ":", ",", "0", "]", "=", "(", "keypointsPixel", "[", ":", ",", "0", "]", "-", "new_Xmin", ")", "*", "cropWidth", "/", "(", "new_Xmax", "-", "new_Xmin", ")", "\n", "label_xy", "[", ":", ",", "1", "]", "=", "(", "keypointsPixel", "[", ":", ",", "1", "]", "-", "new_Ymin", ")", "*", "cropHeight", "/", "(", "new_Ymax", "-", "new_Ymin", ")", "\n", "\n", "if", "augment", ":", "\n", "        ", "imgResize", ",", "label_xy", "=", "transform", "(", "imgResize", ",", "label_xy", ",", "matrix", ")", "\n", "\n", "", "imageOutputs", "[", ":", ",", ":", ",", "0", "]", "=", "imgResize", "\n", "\n", "labelOutputs", "[", ":", ",", "1", "]", "=", "label_xy", "[", ":", ",", "0", "]", "\n", "labelOutputs", "[", ":", ",", "0", "]", "=", "label_xy", "[", ":", ",", "1", "]", "\n", "labelOutputs", "[", ":", ",", "2", "]", "=", "(", "keypointsWorld", "[", ":", ",", "2", "]", "-", "mean", ")", "/", "std", "*", "depthFactor", "\n", "\n", "imageOutputs", "=", "np", ".", "asarray", "(", "imageOutputs", ")", "\n", "imageNCHWOut", "=", "imageOutputs", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# [H, W, C] --->>>  [C, H, W]", "\n", "imageNCHWOut", "=", "np", ".", "asarray", "(", "imageNCHWOut", ")", "\n", "labelOutputs", "=", "np", ".", "asarray", "(", "labelOutputs", ")", "\n", "\n", "data", ",", "label", "=", "torch", ".", "from_numpy", "(", "imageNCHWOut", ")", ",", "torch", ".", "from_numpy", "(", "labelOutputs", ")", "\n", "\n", "return", "data", ",", "label", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.crop_human_pcd": [[190, 199], ["label_z.max", "depth.copy", "depth.copy.sum"], "function", ["None"], ["", "def", "crop_human_pcd", "(", "depth", ",", "label_z", ")", ":", "\n", "    ", "max_z", "=", "label_z", ".", "max", "(", ")", "\n", "filtered_depth", "=", "depth", ".", "copy", "(", ")", "\n", "filtered_depth", "[", "depth", ">", "max_z", "+", "0.05", "]", "=", "0", "\n", "if", "(", "filtered_depth", "!=", "0", ")", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "mean", "=", "0", "\n", "", "else", ":", "\n", "        ", "mean", "=", "filtered_depth", ".", "sum", "(", ")", "/", "(", "filtered_depth", "!=", "0", ")", ".", "sum", "(", ")", "\n", "", "return", "filtered_depth", ",", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.train": [[286, 391], ["net.eval.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.StepLR", "logging.basicConfig", "logging.info", "range", "model.A2J_HRNet_model", "anchor.post_process", "anchor.A2J_loss", "net.eval.parameters", "net.eval.train", "time.time", "enumerate", "lr_scheduler.StepLR.step", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "print", "print", "print", "print", "logging.info", "model.A2J_model", "anchor.post_process", "anchor.A2J_loss", "os.path.join", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "net.eval.", "torch.optim.Adam.zero_grad", "anchor.A2J_loss.", "loss.backward", "torch.optim.Adam.step", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "net.eval.eval", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "tqdm.tqdm", "torch.cat.cpu().data.numpy", "main.evaluation10CMRule", "main.evaluation10CMRule_perJoint", "print", "img.cuda.cuda", "label.cuda", "print", "enumerate", "torch.cat.numpy", "torch.cat.numpy", "torch.save", "torch.save", "torch.save", "loss.item", "len", "Cls_loss.item", "len", "Reg_loss.item", "len", "Cls_loss.item", "Reg_loss.item", "loss.item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "img.cuda.cuda", "net.eval.", "anchor.post_process.cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "net.eval.state_dict", "mean.unsqueeze", "torch.cat.cpu", "lr_scheduler.StepLR.get_lr", "anchor.post_process.", "std.unsqueeze().float", "float", "std.unsqueeze"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.evaluation10CMRule", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.evaluation10CMRule_perJoint", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["def", "train", "(", ")", ":", "\n", "    ", "if", "arch", "==", "'HRNet'", ":", "\n", "        ", "net", "=", "model", ".", "A2J_HRNet_model", "(", "num_classes", "=", "keypointsNumber", ",", "\n", "num_anchors", "=", "P_h", ".", "shape", "[", "0", "]", "*", "P_w", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "width", ",", "\n", "pretrain_pth", "=", "pretrain_pth", ",", "\n", "is_3D", "=", "True", ")", "\n", "post_precess", "=", "anchor", ".", "post_process", "(", "shape", "=", "[", "cropHeight", "//", "4", ",", "cropWidth", "//", "4", "]", ",", "stride", "=", "4", ",", "P_h", "=", "P_h", ",", "P_w", "=", "P_w", ")", "\n", "criterion", "=", "anchor", ".", "A2J_loss", "(", "shape", "=", "[", "cropHeight", "//", "4", ",", "cropWidth", "//", "4", "]", ",", "thres", "=", "[", "16.0", ",", "32.0", "]", ",", "stride", "=", "4", ",", "spatialFactor", "=", "spatialFactor", ",", "img_shape", "=", "[", "cropHeight", ",", "cropWidth", "]", ",", "P_h", "=", "P_h", ",", "P_w", "=", "P_w", ")", "\n", "", "elif", "arch", "==", "'ResNet'", ":", "\n", "        ", "net", "=", "model", ".", "A2J_model", "(", "num_classes", "=", "keypointsNumber", ")", "\n", "post_precess", "=", "anchor", ".", "post_process", "(", "shape", "=", "[", "cropHeight", "//", "16", ",", "cropWidth", "//", "16", "]", ",", "stride", "=", "16", ",", "P_h", "=", "None", ",", "P_w", "=", "None", ")", "\n", "criterion", "=", "anchor", ".", "A2J_loss", "(", "shape", "=", "[", "cropHeight", "//", "16", ",", "cropWidth", "//", "16", "]", ",", "thres", "=", "[", "16.0", ",", "32.0", "]", ",", "stride", "=", "16", ",", "spatialFactor", "=", "spatialFactor", ",", "img_shape", "=", "[", "cropHeight", ",", "cropWidth", "]", ",", "P_h", "=", "None", ",", "P_w", "=", "None", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "net", "=", "net", ".", "cuda", "(", ")", "\n", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ",", "weight_decay", "=", "Weight_Decay", ")", "\n", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "10", ",", "gamma", "=", "0.2", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s %(message)s'", ",", "datefmt", "=", "'%Y/%m/%d %H:%M:%S'", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'train.log'", ")", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "logging", ".", "info", "(", "'======================================================'", ")", "\n", "\n", "best_score", "=", "-", "100", "\n", "\n", "for", "epoch", "in", "range", "(", "nepoch", ")", ":", "\n", "        ", "net", "=", "net", ".", "train", "(", ")", "\n", "train_loss_add", "=", "0.0", "\n", "Cls_loss_add", "=", "0.0", "\n", "Reg_loss_add", "=", "0.0", "\n", "timer", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Training loop", "\n", "for", "i", ",", "(", "img", ",", "label", ",", "_", ",", "_", ",", "_", ")", "in", "enumerate", "(", "train_dataloaders", ")", ":", "\n", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "img", ",", "label", "=", "img", ".", "cuda", "(", ")", ",", "label", ".", "cuda", "(", ")", "\n", "\n", "heads", "=", "net", "(", "img", ")", "\n", "#print(regression)     ", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "Cls_loss", ",", "Reg_loss", "=", "criterion", "(", "heads", ",", "label", ")", "\n", "\n", "loss", "=", "1", "*", "Cls_loss", "+", "Reg_loss", "*", "RegLossFactor", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "train_loss_add", "=", "train_loss_add", "+", "(", "loss", ".", "item", "(", ")", ")", "*", "len", "(", "img", ")", "\n", "Cls_loss_add", "=", "Cls_loss_add", "+", "(", "Cls_loss", ".", "item", "(", ")", ")", "*", "len", "(", "img", ")", "\n", "Reg_loss_add", "=", "Reg_loss_add", "+", "(", "Reg_loss", ".", "item", "(", ")", ")", "*", "len", "(", "img", ")", "\n", "\n", "# printing loss info", "\n", "if", "i", "%", "200", "==", "0", ":", "\n", "                ", "print", "(", "'epoch: '", ",", "epoch", ",", "' step: '", ",", "i", ",", "'Cls_loss '", ",", "Cls_loss", ".", "item", "(", ")", ",", "'Reg_loss '", ",", "Reg_loss", ".", "item", "(", ")", ",", "' total loss '", ",", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "", "scheduler", ".", "step", "(", "epoch", ")", "\n", "\n", "# time taken", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "timer", "=", "time", ".", "time", "(", ")", "-", "timer", "\n", "timer", "=", "timer", "/", "TrainImgFrames", "\n", "print", "(", "'==> time to learn 1 sample = %f (ms)'", "%", "(", "timer", "*", "1000", ")", ")", "\n", "\n", "train_loss_add", "=", "train_loss_add", "/", "TrainImgFrames", "\n", "Cls_loss_add", "=", "Cls_loss_add", "/", "TrainImgFrames", "\n", "Reg_loss_add", "=", "Reg_loss_add", "/", "TrainImgFrames", "\n", "print", "(", "'mean train_loss_add of 1 sample: %f, #train_indexes = %d'", "%", "(", "train_loss_add", ",", "TrainImgFrames", ")", ")", "\n", "print", "(", "'mean Cls_loss_add of 1 sample: %f, #train_indexes = %d'", "%", "(", "Cls_loss_add", ",", "TrainImgFrames", ")", ")", "\n", "print", "(", "'mean Reg_loss_add of 1 sample: %f, #train_indexes = %d'", "%", "(", "Reg_loss_add", ",", "TrainImgFrames", ")", ")", "\n", "\n", "\n", "if", "(", "epoch", "%", "args", ".", "freq", "==", "0", ")", "or", "epoch", "==", "nepoch", "-", "1", ":", "\n", "            ", "net", "=", "net", ".", "eval", "(", ")", "\n", "output", "=", "torch", ".", "FloatTensor", "(", ")", "\n", "all_label", "=", "torch", ".", "FloatTensor", "(", ")", "\n", "\n", "for", "i", ",", "(", "img", ",", "_", ",", "label", ",", "mean", ",", "std", ")", "in", "tqdm", "(", "enumerate", "(", "test_dataloaders", ")", ")", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "heads", "=", "net", "(", "img", ")", "\n", "pred_keypoints", "=", "post_precess", "(", "heads", ",", "voting", "=", "False", ")", ".", "cpu", "(", ")", "\n", "pred_keypoints", "[", ":", ",", ":", ",", "-", "1", "]", "=", "(", "pred_keypoints", "[", ":", ",", ":", ",", "-", "1", "]", "/", "float", "(", "depthFactor", ")", "/", "std", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", ")", "+", "mean", ".", "unsqueeze", "(", "-", "1", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "pred_keypoints", "]", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "[", "all_label", ",", "label", "]", ",", "0", ")", "\n", "\n", "", "", "result", "=", "output", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "Accuracy_test", "=", "evaluation10CMRule", "(", "result", ",", "all_label", ".", "numpy", "(", ")", ")", "\n", "evaluation10CMRule_perJoint", "(", "result", ",", "all_label", ".", "numpy", "(", ")", ")", "\n", "if", "best_score", "<", "Accuracy_test", ":", "\n", "                ", "best_score", "=", "Accuracy_test", "\n", "saveNamePrefix", "=", "'%s/net_%d_wetD_'", "%", "(", "save_dir", ",", "epoch", ")", "+", "str", "(", "best_score", ")", "\n", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "saveNamePrefix", "+", "'.pth'", ")", "\n", "", "print", "(", "'epoch: '", ",", "epoch", ",", "'Test acc:'", ",", "Accuracy_test", ",", "'Current Best:'", ",", "best_score", ")", "\n", "\n", "# log", "\n", "", "logging", ".", "info", "(", "'Epoch#%d: total loss=%.4f, Cls_loss=%.4f, Reg_loss=%.4f, Acc_test=%.4f, lr = %.6f'", "\n", "%", "(", "epoch", ",", "train_loss_add", ",", "Cls_loss_add", ",", "Reg_loss_add", ",", "Accuracy_test", ",", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.test": [[394, 421], ["model.A2J_model", "net.cuda.load_state_dict", "net.cuda.cuda", "net.cuda.eval", "anchor.post_process", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "tqdm.tqdm", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cat.cpu().data.numpy", "main.evaluation10CMRule", "main.evaluation10CMRule_perJoint", "print", "torch.load", "torch.load", "torch.load", "enumerate", "torch.cat.numpy", "torch.cat.numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net.cuda.", "anchor.post_process.cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "img.cuda", "label.cuda", "mean.unsqueeze", "torch.cat.cpu", "anchor.post_process.", "std.unsqueeze().float", "float", "std.unsqueeze"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.evaluation10CMRule", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.evaluation10CMRule_perJoint", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "", "def", "test", "(", "model_dir", "=", "None", ")", ":", "\n", "    ", "net", "=", "model", ".", "A2J_model", "(", "num_classes", "=", "keypointsNumber", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_dir", ")", ")", "\n", "net", "=", "net", ".", "cuda", "(", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "post_precess", "=", "anchor", ".", "post_process", "(", "shape", "=", "[", "cropHeight", "//", "16", ",", "cropWidth", "//", "16", "]", ",", "stride", "=", "16", ",", "P_h", "=", "None", ",", "P_w", "=", "None", ")", "\n", "\n", "output", "=", "torch", ".", "FloatTensor", "(", ")", "\n", "all_label", "=", "torch", ".", "FloatTensor", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "for", "i", ",", "(", "img", ",", "_", ",", "label", ",", "mean", ",", "std", ")", "in", "tqdm", "(", "enumerate", "(", "test_dataloaders", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "img", ",", "label", "=", "img", ".", "cuda", "(", ")", ",", "label", ".", "cuda", "(", ")", "\n", "heads", "=", "net", "(", "img", ")", "\n", "pred_keypoints", "=", "post_precess", "(", "heads", ",", "voting", "=", "False", ")", ".", "cpu", "(", ")", "\n", "pred_keypoints", "[", ":", ",", ":", ",", "-", "1", "]", "=", "(", "pred_keypoints", "[", ":", ",", ":", ",", "-", "1", "]", "/", "float", "(", "depthFactor", ")", "/", "std", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", ")", "+", "mean", ".", "unsqueeze", "(", "-", "1", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "pred_keypoints", "]", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "[", "all_label", ",", "label", "]", ",", "0", ")", "\n", "\n", "", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "result", "=", "output", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "Accuracy_test", "=", "evaluation10CMRule", "(", "result", ",", "all_label", ".", "numpy", "(", ")", ")", "\n", "evaluation10CMRule_perJoint", "(", "result", ",", "all_label", ".", "numpy", "(", ")", ")", "\n", "print", "(", "'Acc:'", ",", "Accuracy_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.evaluation10CMRule": [[423, 450], ["numpy.zeros", "range", "numpy.ones", "main.pixel2world", "range", "numpy.shape", "numpy.shape", "len", "len", "range", "len", "len", "numpy.square", "numpy.square", "numpy.square", "numpy.square"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.pixel2world"], ["", "def", "evaluation10CMRule", "(", "source", ",", "target", ")", ":", "\n", "    ", "assert", "np", ".", "shape", "(", "source", ")", "==", "np", ".", "shape", "(", "target", ")", ",", "\"source has different shape with target\"", "\n", "Test1_", "=", "np", ".", "zeros", "(", "source", ".", "shape", ")", "\n", "Test1_", "[", ":", ",", ":", ",", "0", "]", "=", "source", "[", ":", ",", ":", ",", "1", "]", "\n", "Test1_", "[", ":", ",", ":", ",", "1", "]", "=", "source", "[", ":", ",", ":", ",", "0", "]", "\n", "Test1_", "[", ":", ",", ":", ",", "2", "]", "=", "source", "[", ":", ",", ":", ",", "2", "]", "\n", "Test1", "=", "Test1_", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "Test1_", ")", ")", ":", "\n", "        ", "Test1", "[", "i", ",", ":", ",", "0", "]", "=", "Test1_", "[", "i", ",", ":", ",", "0", "]", "*", "(", "bndbox_test", "[", "i", ",", "2", "]", "-", "bndbox_test", "[", "i", ",", "0", "]", ")", "/", "cropWidth", "+", "bndbox_test", "[", "i", ",", "0", "]", "# x", "\n", "Test1", "[", "i", ",", ":", ",", "1", "]", "=", "Test1_", "[", "i", ",", ":", ",", "1", "]", "*", "(", "bndbox_test", "[", "i", ",", "3", "]", "-", "bndbox_test", "[", "i", ",", "1", "]", ")", "/", "cropHeight", "+", "bndbox_test", "[", "i", ",", "1", "]", "# y   ", "\n", "# Test1[i,:,2] = Test1_[i,:,2]/depthFactor ", "\n", "\n", "", "TestWorld", "=", "np", ".", "ones", "(", "(", "len", "(", "Test1", ")", ",", "keypointsNumber", ",", "3", ")", ")", "\n", "TestWorld_tuple", "=", "pixel2world", "(", "Test1", "[", ":", ",", ":", ",", "0", "]", ",", "Test1", "[", ":", ",", ":", ",", "1", "]", ",", "Test1", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "\n", "TestWorld", "[", ":", ",", ":", ",", "0", "]", "=", "TestWorld_tuple", "[", "0", "]", "\n", "TestWorld", "[", ":", ",", ":", ",", "1", "]", "=", "TestWorld_tuple", "[", "1", "]", "\n", "TestWorld", "[", ":", ",", ":", ",", "2", "]", "=", "Test1", "[", ":", ",", ":", ",", "2", "]", "\n", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "source", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "keypointsNumber", ")", ":", "\n", "            ", "if", "np", ".", "square", "(", "TestWorld", "[", "i", ",", "j", ",", "0", "]", "-", "target", "[", "i", ",", "j", ",", "0", "]", ")", "+", "np", ".", "square", "(", "TestWorld", "[", "i", ",", "j", ",", "1", "]", "-", "target", "[", "i", ",", "j", ",", "1", "]", ")", "+", "np", ".", "square", "(", "TestWorld", "[", "i", ",", "j", ",", "2", "]", "-", "target", "[", "i", ",", "j", ",", "2", "]", ")", "<", "np", ".", "square", "(", "0.1", ")", ":", "#10cm   ", "\n", "                ", "count", "=", "count", "+", "1", "\n", "", "", "", "accuracy", "=", "count", "/", "(", "len", "(", "source", ")", "*", "keypointsNumber", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.evaluation10CMRule_perJoint": [[452, 482], ["numpy.zeros", "range", "numpy.ones", "main.pixel2world", "range", "numpy.shape", "numpy.shape", "len", "range", "print", "len", "len", "len", "numpy.square", "numpy.square", "numpy.square", "numpy.square"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.pixel2world"], ["", "def", "evaluation10CMRule_perJoint", "(", "source", ",", "target", ")", ":", "\n", "    ", "assert", "np", ".", "shape", "(", "source", ")", "==", "np", ".", "shape", "(", "target", ")", ",", "\"source has different shape with target\"", "\n", "Test1_", "=", "np", ".", "zeros", "(", "source", ".", "shape", ")", "\n", "Test1_", "[", ":", ",", ":", ",", "0", "]", "=", "source", "[", ":", ",", ":", ",", "1", "]", "\n", "Test1_", "[", ":", ",", ":", ",", "1", "]", "=", "source", "[", ":", ",", ":", ",", "0", "]", "\n", "Test1_", "[", ":", ",", ":", ",", "2", "]", "=", "source", "[", ":", ",", ":", ",", "2", "]", "\n", "Test1", "=", "Test1_", "# [x, y, z]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "Test1_", ")", ")", ":", "\n", "        ", "Test1", "[", "i", ",", ":", ",", "0", "]", "=", "Test1_", "[", "i", ",", ":", ",", "0", "]", "*", "(", "bndbox_test", "[", "i", ",", "2", "]", "-", "bndbox_test", "[", "i", ",", "0", "]", ")", "/", "cropWidth", "+", "bndbox_test", "[", "i", ",", "0", "]", "# x", "\n", "Test1", "[", "i", ",", ":", ",", "1", "]", "=", "Test1_", "[", "i", ",", ":", ",", "1", "]", "*", "(", "bndbox_test", "[", "i", ",", "3", "]", "-", "bndbox_test", "[", "i", ",", "1", "]", ")", "/", "cropHeight", "+", "bndbox_test", "[", "i", ",", "1", "]", "# y ", "\n", "# Test1[i,:,2] = Test1_[i,:,2]/depthFactor ", "\n", "", "TestWorld", "=", "np", ".", "ones", "(", "(", "len", "(", "Test1", ")", ",", "keypointsNumber", ",", "3", ")", ")", "\n", "TestWorld_tuple", "=", "pixel2world", "(", "Test1", "[", ":", ",", ":", ",", "0", "]", ",", "Test1", "[", ":", ",", ":", ",", "1", "]", ",", "Test1", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "\n", "TestWorld", "[", ":", ",", ":", ",", "0", "]", "=", "TestWorld_tuple", "[", "0", "]", "\n", "TestWorld", "[", ":", ",", ":", ",", "1", "]", "=", "TestWorld_tuple", "[", "1", "]", "\n", "TestWorld", "[", ":", ",", ":", ",", "2", "]", "=", "Test1", "[", ":", ",", ":", ",", "2", "]", "\n", "\n", "count", "=", "0", "\n", "accuracy", "=", "0", "\n", "for", "j", "in", "range", "(", "keypointsNumber", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "source", ")", ")", ":", "\n", "            ", "if", "np", ".", "square", "(", "TestWorld", "[", "i", ",", "j", ",", "0", "]", "-", "target", "[", "i", ",", "j", ",", "0", "]", ")", "+", "np", ".", "square", "(", "TestWorld", "[", "i", ",", "j", ",", "1", "]", "-", "target", "[", "i", ",", "j", ",", "1", "]", ")", "+", "np", ".", "square", "(", "TestWorld", "[", "i", ",", "j", ",", "2", "]", "-", "target", "[", "i", ",", "j", ",", "2", "]", ")", "<", "np", ".", "square", "(", "0.1", ")", ":", "#10cm   ", "\n", "                ", "count", "=", "count", "+", "1", "\n", "\n", "", "", "accuracy", "=", "count", "/", "(", "len", "(", "source", ")", ")", "\n", "print", "(", "'joint_'", ",", "j", ",", "joint_id_to_name", "[", "j", "]", ",", "', accuracy: '", ",", "accuracy", ")", "\n", "accuracy", "=", "0", "\n", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.random_erasing.RandomErasing.__init__": [[23, 30], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ",", "sl", "=", "0.02", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ",", "mean", "=", "[", "3.44405131", "]", ",", "scale", "=", "1", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r1", "=", "r1", "\n", "self", ".", "scale", "=", "scale", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.random_erasing.RandomErasing.__call__": [[30, 57], ["range", "random.uniform", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "img.size", "img.size", "math.sqrt", "math.sqrt", "torch.randn", "img.size", "img.size", "img.size", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "probability", ":", "\n", "            ", "return", "img", "\n", "\n", "", "for", "attempt", "in", "range", "(", "100", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "(", ")", "[", "1", "]", "*", "img", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r1", ",", "1", "/", "self", ".", "r1", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<", "img", ".", "size", "(", ")", "[", "2", "]", "and", "h", "<", "img", ".", "size", "(", ")", "[", "1", "]", ":", "\n", "                ", "rand_patch", "=", "self", ".", "scale", "*", "torch", ".", "randn", "(", "h", ",", "w", ")", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "1", "]", "-", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "2", "]", "-", "w", ")", "\n", "if", "img", ".", "size", "(", ")", "[", "0", "]", "==", "3", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "+=", "rand_patch", "#self.mean[0]", "\n", "img", "[", "1", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "+=", "rand_patch", "#self.mean[1]", "\n", "img", "[", "2", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "+=", "rand_patch", "#self.mean[2]", "\n", "", "else", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "+=", "rand_patch", "#self.mean[0]", "\n", "", "return", "img", "\n", "\n", "", "", "return", "img", "", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.resnet.BasicBlock.__init__": [[32, 41], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.conv3x3", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.resnet.BasicBlock.forward": [[42, 59], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.resnet.Bottleneck.__init__": [[64, 75], ["torch.Module.__init__", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.conv1x1", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.conv3x3", "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.resnet.Bottleneck.forward": [[76, 97], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.resnet.ResNet.__init__": [[101, 132], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.resnet.ResNet._make_layer": [[133, 148], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.resnet.ResNet.forward": [[149, 165], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.resnet.conv3x3": [[18, 22], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.resnet.conv1x1": [[24, 27], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.resnet.resnet18": [[167, 176], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.resnet.resnet34": [[178, 187], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.resnet.resnet50": [[189, 198], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.resnet.resnet101": [[200, 209], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.resnet.resnet152": [[211, 220], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.anchor.post_process.__init__": [[45, 51], ["torch.Module.__init__", "anchor.generate_anchors", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "anchor.shift", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.anchor.generate_anchors", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.anchor.shift"], ["    ", "def", "__init__", "(", "self", ",", "P_h", "=", "[", "2", ",", "6", "]", ",", "P_w", "=", "[", "2", ",", "6", "]", ",", "shape", "=", "[", "48", ",", "26", "]", ",", "stride", "=", "8", ",", "thres", "=", "8", ",", "is_3D", "=", "True", ")", ":", "\n", "        ", "super", "(", "post_process", ",", "self", ")", ".", "__init__", "(", ")", "\n", "anchors", "=", "generate_anchors", "(", "P_h", "=", "P_h", ",", "P_w", "=", "P_w", ")", "\n", "self", ".", "all_anchors", "=", "torch", ".", "from_numpy", "(", "shift", "(", "shape", ",", "stride", ",", "anchors", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "self", ".", "thres", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "thres", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "self", ".", "is_3D", "=", "is_3D", "\n", "", "def", "calc_distance", "(", "self", ",", "a", ",", "b", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.anchor.post_process.calc_distance": [[51, 56], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "def", "calc_distance", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "dis", "=", "torch", ".", "zeros", "(", "a", ".", "shape", "[", "0", "]", ",", "b", ".", "shape", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "a", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "dis", "+=", "torch", ".", "pow", "(", "torch", ".", "unsqueeze", "(", "a", "[", ":", ",", "i", "]", ",", "dim", "=", "1", ")", "-", "b", "[", ":", ",", "i", "]", ",", "0.5", ")", "\n", "", "return", "dis", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.anchor.post_process.forward": [[57, 83], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.softmax", "torch.softmax", "torch.softmax", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "P_keys.append", "P_keys.append", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "heads", ",", "voting", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "is_3D", ":", "\n", "            ", "classifications", ",", "regressions", ",", "depthregressions", "=", "heads", "\n", "", "else", ":", "\n", "            ", "classifications", ",", "regressions", "=", "heads", "\n", "", "batch_size", "=", "classifications", ".", "shape", "[", "0", "]", "\n", "anchor", "=", "self", ".", "all_anchors", "#*(w*h*A)*2", "\n", "P_keys", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "            ", "classification", "=", "classifications", "[", "j", ",", ":", ",", ":", "]", "#N*(w*h*A)*P", "\n", "regression", "=", "regressions", "[", "j", ",", ":", ",", ":", ",", ":", "]", "#N*(w*h*A)*P*2", "\n", "if", "self", ".", "is_3D", ":", "\n", "                ", "depthregression", "=", "depthregressions", "[", "j", ",", ":", ",", ":", "]", "#N*(w*h*A)*P", "\n", "", "reg", "=", "torch", ".", "unsqueeze", "(", "anchor", ",", "1", ")", "+", "regression", "\n", "reg_weight", "=", "F", ".", "softmax", "(", "classifications", "[", "j", ",", ":", ",", ":", "]", ",", "dim", "=", "0", ")", "#(w*h*A)*P", "\n", "reg_weight_xy", "=", "torch", ".", "unsqueeze", "(", "reg_weight", ",", "2", ")", ".", "expand", "(", "reg_weight", ".", "shape", "[", "0", "]", ",", "reg_weight", ".", "shape", "[", "1", "]", ",", "2", ")", "#(w*h*A)*P*2", "\n", "P_xy", "=", "(", "reg_weight_xy", "*", "reg", ")", ".", "sum", "(", "0", ")", "\n", "if", "self", ".", "is_3D", ":", "\n", "                ", "P_depth", "=", "(", "reg_weight", "*", "depthregression", ")", ".", "sum", "(", "0", ")", "\n", "P_depth", "=", "torch", ".", "unsqueeze", "(", "P_depth", ",", "1", ")", "\n", "P_key", "=", "torch", ".", "cat", "(", "(", "P_xy", ",", "P_depth", ")", ",", "1", ")", "\n", "P_keys", ".", "append", "(", "P_key", ")", "\n", "", "else", ":", "\n", "                ", "P_keys", ".", "append", "(", "P_xy", ")", "\n", "", "", "return", "torch", ".", "stack", "(", "P_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.anchor.A2J_loss.__init__": [[85, 93], ["torch.Module.__init__", "anchor.generate_anchors", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "anchor.shift", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.anchor.generate_anchors", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.anchor.shift"], ["    ", "def", "__init__", "(", "self", ",", "P_h", "=", "[", "2", ",", "6", "]", ",", "P_w", "=", "[", "2", ",", "6", "]", ",", "shape", "=", "[", "8", ",", "4", "]", ",", "stride", "=", "8", ",", "thres", "=", "[", "10.0", ",", "20.0", "]", ",", "spatialFactor", "=", "0.1", ",", "img_shape", "=", "[", "0", ",", "0", "]", ",", "is_3D", "=", "True", ")", ":", "\n", "        ", "super", "(", "A2J_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "anchors", "=", "generate_anchors", "(", "P_h", "=", "P_h", ",", "P_w", "=", "P_w", ")", "\n", "self", ".", "all_anchors", "=", "torch", ".", "from_numpy", "(", "shift", "(", "shape", ",", "stride", ",", "anchors", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "self", ".", "thres", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "thres", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "self", ".", "spatialFactor", "=", "spatialFactor", "\n", "self", ".", "img_shape", "=", "img_shape", "\n", "self", ".", "is_3D", "=", "is_3D", "\n", "", "def", "calc_distance", "(", "self", ",", "a", ",", "b", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.anchor.A2J_loss.calc_distance": [[93, 98], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "def", "calc_distance", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "dis", "=", "torch", ".", "zeros", "(", "a", ".", "shape", "[", "0", "]", ",", "b", ".", "shape", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "a", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "dis", "+=", "torch", ".", "abs", "(", "torch", ".", "unsqueeze", "(", "a", "[", ":", ",", "i", "]", ",", "dim", "=", "1", ")", "-", "b", "[", ":", ",", "i", "]", ")", "\n", "", "return", "dis", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.anchor.A2J_loss.forward": [[99, 155], ["range", "torch.softmax", "torch.softmax", "torch.softmax", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where.mean", "torch.where.mean", "torch.where.mean", "anchor_regression_loss_tuple.append", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "regression_losses.append", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.where.mean", "torch.where.mean", "torch.where.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where.mean", "torch.where.mean", "torch.where.mean", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.le", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "heads", ",", "annotations", ")", ":", "\n", "        ", "alpha", "=", "0.25", "\n", "gamma", "=", "2.0", "\n", "if", "self", ".", "is_3D", ":", "\n", "            ", "classifications", ",", "regressions", ",", "depthregressions", "=", "heads", "\n", "", "else", ":", "\n", "            ", "classifications", ",", "regressions", "=", "heads", "\n", "#classifications,scalar,mu = classifications_tuple", "\n", "", "batch_size", "=", "classifications", ".", "shape", "[", "0", "]", "\n", "classification_losses", "=", "[", "]", "\n", "regression_losses", "=", "[", "]", "\n", "\n", "anchor", "=", "self", ".", "all_anchors", "# num_anchors(w*h*A) x 2", "\n", "anchor_regression_loss_tuple", "=", "[", "]", "\n", "\n", "for", "j", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "            ", "classification", "=", "classifications", "[", "j", ",", ":", ",", ":", "]", "#N*(w*h*A)*P", "\n", "regression", "=", "regressions", "[", "j", ",", ":", ",", ":", ",", ":", "]", "#N*(w*h*A)*P*2", "\n", "if", "self", ".", "is_3D", ":", "\n", "                ", "depthregression", "=", "depthregressions", "[", "j", ",", ":", ",", ":", "]", "#N*(w*h*A)*P", "\n", "", "bbox_annotation", "=", "annotations", "[", "j", ",", ":", ",", ":", "]", "#N*P*3=>P*3", "\n", "reg_weight", "=", "F", ".", "softmax", "(", "classification", ",", "dim", "=", "0", ")", "#(w*h*A)*P", "\n", "reg_weight_xy", "=", "torch", ".", "unsqueeze", "(", "reg_weight", ",", "2", ")", ".", "expand", "(", "reg_weight", ".", "shape", "[", "0", "]", ",", "reg_weight", ".", "shape", "[", "1", "]", ",", "2", ")", "#(w*h*A)*P*2         ", "\n", "gt_xy", "=", "bbox_annotation", "[", ":", ",", ":", "2", "]", "#P*2 ", "\n", "\n", "anchor_diff", "=", "torch", ".", "abs", "(", "gt_xy", "-", "(", "reg_weight_xy", "*", "torch", ".", "unsqueeze", "(", "anchor", ",", "1", ")", ")", ".", "sum", "(", "0", ")", ")", "#P*2", "\n", "anchor_loss", "=", "torch", ".", "where", "(", "\n", "torch", ".", "le", "(", "anchor_diff", ",", "1", ")", ",", "\n", "0.5", "*", "1", "*", "torch", ".", "pow", "(", "anchor_diff", ",", "2", ")", ",", "\n", "anchor_diff", "-", "0.5", "/", "1", "\n", ")", "\n", "anchor_regression_loss", "=", "anchor_loss", ".", "mean", "(", ")", "\n", "anchor_regression_loss_tuple", ".", "append", "(", "anchor_regression_loss", ")", "\n", "#######################regression 4 spatial###################", "\n", "reg", "=", "torch", ".", "unsqueeze", "(", "anchor", ",", "1", ")", "+", "regression", "#(w*h*A)*P*2", "\n", "regression_diff", "=", "torch", ".", "abs", "(", "gt_xy", "-", "(", "reg_weight_xy", "*", "reg", ")", ".", "sum", "(", "0", ")", ")", "#P*2", "\n", "regression_loss", "=", "torch", ".", "where", "(", "\n", "torch", ".", "le", "(", "regression_diff", ",", "1", ")", ",", "\n", "0.5", "*", "1", "*", "torch", ".", "pow", "(", "regression_diff", ",", "2", ")", ",", "\n", "regression_diff", "-", "0.5", "/", "1", "\n", ")", "\n", "regression_loss", "=", "regression_loss", ".", "mean", "(", ")", "*", "self", ".", "spatialFactor", "\n", "########################regression 4 depth###################", "\n", "if", "self", ".", "is_3D", ":", "\n", "                ", "gt_depth", "=", "bbox_annotation", "[", ":", ",", "2", "]", "#P", "\n", "regression_diff_depth", "=", "torch", ".", "abs", "(", "gt_depth", "-", "(", "reg_weight", "*", "depthregression", ")", ".", "sum", "(", "0", ")", ")", "#(w*h*A)*P       ", "\n", "regression_loss_depth", "=", "torch", ".", "where", "(", "\n", "torch", ".", "le", "(", "regression_diff_depth", ",", "3", ")", ",", "\n", "0.5", "*", "(", "1", "/", "3", ")", "*", "torch", ".", "pow", "(", "regression_diff_depth", ",", "2", ")", ",", "\n", "regression_diff_depth", "-", "0.5", "/", "(", "1", "/", "3", ")", "\n", ")", "\n", "regression_loss", "+=", "regression_loss_depth", ".", "mean", "(", ")", "\n", "############################################################", "\n", "", "regression_losses", ".", "append", "(", "regression_loss", ")", "\n", "", "return", "torch", ".", "stack", "(", "anchor_regression_loss_tuple", ")", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ",", "torch", ".", "stack", "(", "regression_losses", ")", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.anchor.generate_anchors": [[7, 25], ["numpy.zeros", "range", "numpy.array", "numpy.array", "len", "len", "len", "range", "len"], "function", ["None"], ["def", "generate_anchors", "(", "P_h", "=", "None", ",", "P_w", "=", "None", ")", ":", "\n", "    ", "if", "P_h", "is", "None", ":", "\n", "        ", "P_h", "=", "np", ".", "array", "(", "[", "2", ",", "6", ",", "10", ",", "14", "]", ")", "\n", "\n", "", "if", "P_w", "is", "None", ":", "\n", "        ", "P_w", "=", "np", ".", "array", "(", "[", "2", ",", "6", ",", "10", ",", "14", "]", ")", "\n", "\n", "", "num_anchors", "=", "len", "(", "P_h", ")", "*", "len", "(", "P_h", ")", "\n", "\n", "# initialize output anchors", "\n", "anchors", "=", "np", ".", "zeros", "(", "(", "num_anchors", ",", "2", ")", ")", "\n", "k", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "P_w", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "P_h", ")", ")", ":", "\n", "            ", "anchors", "[", "k", ",", "1", "]", "=", "P_w", "[", "j", "]", "\n", "anchors", "[", "k", ",", "0", "]", "=", "P_h", "[", "i", "]", "\n", "k", "+=", "1", "\n", "", "", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.anchor.shift": [[26, 43], ["numpy.meshgrid", "numpy.vstack().transpose", "all_anchors.reshape.reshape", "numpy.arange", "numpy.arange", "anchors.reshape", "np.vstack().transpose.reshape().transpose", "numpy.vstack", "np.vstack().transpose.reshape", "shift_h.ravel", "shift_w.ravel"], "function", ["None"], ["", "def", "shift", "(", "shape", ",", "stride", ",", "anchors", ")", ":", "\n", "    ", "shift_h", "=", "np", ".", "arange", "(", "0", ",", "shape", "[", "0", "]", ")", "*", "stride", "\n", "shift_w", "=", "np", ".", "arange", "(", "0", ",", "shape", "[", "1", "]", ")", "*", "stride", "\n", "\n", "shift_h", ",", "shift_w", "=", "np", ".", "meshgrid", "(", "shift_h", ",", "shift_w", ")", "\n", "shifts", "=", "np", ".", "vstack", "(", "(", "shift_h", ".", "ravel", "(", ")", ",", "shift_w", ".", "ravel", "(", ")", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "# add A anchors (1, A, 2) to", "\n", "# cell K shifts (K, 1, 2) to get", "\n", "# shift anchors (K, A, 2)", "\n", "# reshape to (K*A, 4) shifted anchors", "\n", "A", "=", "anchors", ".", "shape", "[", "0", "]", "\n", "K", "=", "shifts", ".", "shape", "[", "0", "]", "\n", "all_anchors", "=", "(", "anchors", ".", "reshape", "(", "(", "1", ",", "A", ",", "2", ")", ")", "+", "shifts", ".", "reshape", "(", "(", "1", ",", "K", ",", "2", ")", ")", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", ")", "\n", "all_anchors", "=", "all_anchors", ".", "reshape", "(", "(", "K", "*", "A", ",", "2", ")", ")", "\n", "\n", "return", "all_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.model.DepthRegressionModel.__init__": [[8, 32], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.DepthRegressionModel.modules", "isinstance", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features_in", ",", "num_anchors", "=", "16", ",", "num_classes", "=", "15", ",", "feature_size", "=", "256", ")", ":", "\n", "        ", "super", "(", "DepthRegressionModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_anchors", "=", "num_anchors", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_features_in", ",", "feature_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "feature_size", ")", "\n", "self", ".", "act1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "feature_size", ")", "\n", "self", ".", "act2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "feature_size", ")", "\n", "self", ".", "act3", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "feature_size", ")", "\n", "self", ".", "act4", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "output", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "num_anchors", "*", "num_classes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.model.DepthRegressionModel.forward": [[33, 53], ["model.DepthRegressionModel.conv1", "model.DepthRegressionModel.bn1", "model.DepthRegressionModel.act1", "model.DepthRegressionModel.conv2", "model.DepthRegressionModel.bn2", "model.DepthRegressionModel.act2", "model.DepthRegressionModel.conv3", "model.DepthRegressionModel.bn3", "model.DepthRegressionModel.act3", "model.DepthRegressionModel.conv4", "model.DepthRegressionModel.bn4", "model.DepthRegressionModel.act4", "model.DepthRegressionModel.output", "model.DepthRegressionModel.permute", "model.DepthRegressionModel.permute.view", "out.permute.view.contiguous().view", "out.permute.view.contiguous"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "act1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "act2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "act3", "(", "out", ")", "\n", "out", "=", "self", ".", "conv4", "(", "out", ")", "\n", "out", "=", "self", ".", "bn4", "(", "out", ")", "\n", "out", "=", "self", ".", "act4", "(", "out", ")", "\n", "out", "=", "self", ".", "output", "(", "out", ")", "\n", "\n", "# out is B x C x W x H, with C = 3*num_anchors", "\n", "out1", "=", "out", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", "batch_size", ",", "width", ",", "height", ",", "channels", "=", "out1", ".", "shape", "\n", "out2", "=", "out1", ".", "view", "(", "batch_size", ",", "width", ",", "height", ",", "self", ".", "num_anchors", ",", "self", ".", "num_classes", ")", "\n", "return", "out2", ".", "contiguous", "(", ")", ".", "view", "(", "out2", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.model.RegressionModel.__init__": [[55, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.RegressionModel.modules", "isinstance", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features_in", ",", "num_anchors", "=", "16", ",", "num_classes", "=", "15", ",", "feature_size", "=", "256", ")", ":", "\n", "        ", "super", "(", "RegressionModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_anchors", "=", "num_anchors", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_features_in", ",", "feature_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "feature_size", ")", "\n", "self", ".", "act1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "feature_size", ")", "\n", "self", ".", "act2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "feature_size", ")", "\n", "self", ".", "act3", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "feature_size", ")", "\n", "self", ".", "act4", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "output", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "num_anchors", "*", "num_classes", "*", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.model.RegressionModel.forward": [[79, 99], ["model.RegressionModel.conv1", "model.RegressionModel.bn1", "model.RegressionModel.act1", "model.RegressionModel.conv2", "model.RegressionModel.bn2", "model.RegressionModel.act2", "model.RegressionModel.conv3", "model.RegressionModel.bn3", "model.RegressionModel.act3", "model.RegressionModel.conv4", "model.RegressionModel.bn4", "model.RegressionModel.act4", "model.RegressionModel.output", "model.RegressionModel.permute", "model.RegressionModel.permute.view", "out.permute.view.contiguous().view", "out.permute.view.contiguous"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "act1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "act2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "act3", "(", "out", ")", "\n", "out", "=", "self", ".", "conv4", "(", "out", ")", "\n", "out", "=", "self", ".", "bn4", "(", "out", ")", "\n", "out", "=", "self", ".", "act4", "(", "out", ")", "\n", "out", "=", "self", ".", "output", "(", "out", ")", "\n", "\n", "# out is B x C x W x H, with C = 3*num_anchors", "\n", "out1", "=", "out", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", "batch_size", ",", "width", ",", "height", ",", "channels", "=", "out1", ".", "shape", "\n", "out2", "=", "out1", ".", "view", "(", "batch_size", ",", "width", ",", "height", ",", "self", ".", "num_anchors", ",", "self", ".", "num_classes", ",", "2", ")", "\n", "return", "out2", ".", "contiguous", "(", ")", ".", "view", "(", "out2", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "num_classes", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.model.ClassificationModel.__init__": [[101, 124], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.ClassificationModel.modules", "isinstance", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features_in", ",", "num_anchors", "=", "16", ",", "num_classes", "=", "15", ",", "prior", "=", "0.01", ",", "feature_size", "=", "256", ")", ":", "\n", "        ", "super", "(", "ClassificationModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_anchors", "=", "num_anchors", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_features_in", ",", "feature_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "feature_size", ")", "\n", "self", ".", "act1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "feature_size", ")", "\n", "self", ".", "act2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "feature_size", ")", "\n", "self", ".", "act3", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "feature_size", ")", "\n", "self", ".", "act4", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "output", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "num_anchors", "*", "num_classes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.model.ClassificationModel.forward": [[125, 145], ["model.ClassificationModel.conv1", "model.ClassificationModel.bn1", "model.ClassificationModel.act1", "model.ClassificationModel.conv2", "model.ClassificationModel.bn2", "model.ClassificationModel.act2", "model.ClassificationModel.conv3", "model.ClassificationModel.bn3", "model.ClassificationModel.act3", "model.ClassificationModel.conv4", "model.ClassificationModel.bn4", "model.ClassificationModel.act4", "model.ClassificationModel.output", "model.ClassificationModel.permute", "model.ClassificationModel.permute.view", "out.permute.view.contiguous().view", "out.permute.view.contiguous"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "act1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "act2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "act3", "(", "out", ")", "\n", "out", "=", "self", ".", "conv4", "(", "out", ")", "\n", "out", "=", "self", ".", "bn4", "(", "out", ")", "\n", "out", "=", "self", ".", "act4", "(", "out", ")", "\n", "out", "=", "self", ".", "output", "(", "out", ")", "\n", "\n", "# out is B x C x W x H, with C = n_classes + n_anchors", "\n", "out1", "=", "out", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", "batch_size", ",", "width", ",", "height", ",", "channels", "=", "out1", ".", "shape", "\n", "out2", "=", "out1", ".", "view", "(", "batch_size", ",", "width", ",", "height", ",", "self", ".", "num_anchors", ",", "self", ".", "num_classes", ")", "\n", "return", "out2", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.model.ResNetBackBone.__init__": [[148, 153], ["torch.Module.__init__", "resnet.resnet50"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.resnet50"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ResNetBackBone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "modelPreTrain50", "=", "resnet", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "model", "=", "modelPreTrain50", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.model.ResNetBackBone.forward": [[154, 170], ["model.ResNetBackBone.size", "model.ResNetBackBone.expand", "model.ResNetBackBone.model.conv1", "model.ResNetBackBone.model.bn1", "model.ResNetBackBone.model.relu", "model.ResNetBackBone.model.maxpool", "model.ResNetBackBone.model.layer1", "model.ResNetBackBone.model.layer2", "model.ResNetBackBone.model.layer3", "model.ResNetBackBone.model.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "# x: [B, 1, H ,W]", "\n", "\n", "x", "=", "x", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "# depth", "\n", "x", "=", "x", ".", "expand", "(", "n", ",", "3", ",", "h", ",", "w", ")", "\n", "\n", "x", "=", "self", ".", "model", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "maxpool", "(", "x", ")", "\n", "x1", "=", "self", ".", "model", ".", "layer1", "(", "x", ")", "\n", "x2", "=", "self", ".", "model", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "model", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "model", ".", "layer4", "(", "x3", ")", "\n", "\n", "return", "x3", ",", "x4", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.model.A2J_model.__init__": [[173, 181], ["torch.Module.__init__", "model.ResNetBackBone", "model.RegressionModel", "model.ClassificationModel", "model.DepthRegressionModel"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "is_3D", "=", "True", ")", ":", "\n", "        ", "super", "(", "A2J_model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_3D", "=", "is_3D", "\n", "self", ".", "Backbone", "=", "ResNetBackBone", "(", ")", "# 1 channel depth only, resnet50 ", "\n", "self", ".", "regressionModel", "=", "RegressionModel", "(", "2048", ",", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "classificationModel", "=", "ClassificationModel", "(", "1024", ",", "num_classes", "=", "num_classes", ")", "\n", "if", "is_3D", ":", "\n", "            ", "self", ".", "DepthRegressionModel", "=", "DepthRegressionModel", "(", "2048", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.model.A2J_model.forward": [[182, 190], ["model.A2J_model.Backbone", "model.A2J_model.classificationModel", "model.A2J_model.regressionModel", "model.A2J_model.DepthRegressionModel"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x3", ",", "x4", "=", "self", ".", "Backbone", "(", "x", ")", "\n", "classification", "=", "self", ".", "classificationModel", "(", "x3", ")", "\n", "regression", "=", "self", ".", "regressionModel", "(", "x4", ")", "\n", "if", "self", ".", "is_3D", ":", "\n", "            ", "DepthRegressionModel", "=", "self", ".", "DepthRegressionModel", "(", "x4", ")", "\n", "return", "(", "classification", ",", "regression", ",", "DepthRegressionModel", ")", "\n", "", "return", "(", "classification", ",", "regression", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.model.A2J_HRNet_model.__init__": [[192, 214], ["torch.Module.__init__", "model.RegressionModel", "model.ClassificationModel", "hrnet.official_hrnet.get_hrnet_w18_backbone", "sum", "model.DepthRegressionModel", "hrnet.official_hrnet.get_hrnet_w32_backbone", "sum", "hrnet.official_hrnet.get_hrnet_w48_backbone", "sum"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_hrnet_w18_backbone", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_hrnet_w32_backbone", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_hrnet_w48_backbone"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "num_anchors", ",", "width", "=", "18", ",", "pretrain_pth", "=", "None", ",", "is_3D", "=", "True", ")", ":", "\n", "        ", "super", "(", "A2J_HRNet_model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_3D", "=", "is_3D", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "num_anchors", "=", "num_anchors", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "width", "==", "18", ":", "\n", "            ", "self", ".", "Backbone", "=", "get_hrnet_w18_backbone", "(", "pretrain_pth", ")", "\n", "out_channel", "=", "sum", "(", "[", "18", ",", "36", ",", "72", ",", "144", "]", ")", "\n", "", "elif", "width", "==", "32", ":", "\n", "            ", "self", ".", "Backbone", "=", "get_hrnet_w32_backbone", "(", "pretrain_pth", ")", "\n", "out_channel", "=", "sum", "(", "[", "32", ",", "64", ",", "128", ",", "256", "]", ")", "\n", "", "elif", "width", "==", "48", ":", "\n", "            ", "self", ".", "Backbone", "=", "get_hrnet_w48_backbone", "(", "pretrain_pth", ")", "\n", "out_channel", "=", "sum", "(", "[", "48", ",", "96", ",", "192", ",", "384", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "regressionModel", "=", "RegressionModel", "(", "out_channel", ",", "num_anchors", "=", "num_anchors", ",", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "classificationModel", "=", "ClassificationModel", "(", "out_channel", ",", "num_anchors", "=", "num_anchors", ",", "num_classes", "=", "num_classes", ")", "\n", "if", "is_3D", ":", "\n", "            ", "self", ".", "DepthRegressionModel", "=", "DepthRegressionModel", "(", "out_channel", ",", "num_anchors", "=", "num_anchors", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.model.A2J_HRNet_model.merge_all_res": [[215, 223], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x[].size", "x[].size"], "methods", ["None"], ["", "", "def", "merge_all_res", "(", "self", ",", "x", ")", ":", "\n", "        ", "ALIGN_CORNERS", "=", "False", "\n", "x0_h", ",", "x0_w", "=", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x2", "=", "F", ".", "interpolate", "(", "x", "[", "2", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x3", "=", "F", ".", "interpolate", "(", "x", "[", "3", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", "0", "]", ",", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.model.A2J_HRNet_model.forward": [[224, 237], ["x.expand.expand.size", "x.expand.expand.expand", "model.A2J_HRNet_model.Backbone", "model.A2J_HRNet_model.merge_all_res", "model.A2J_HRNet_model.classificationModel", "model.A2J_HRNet_model.regressionModel", "model.A2J_HRNet_model.DepthRegressionModel"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.merge_all_res"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "# x: [B, 1, H ,W]", "\n", "x", "=", "x", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "# depth", "\n", "x", "=", "x", ".", "expand", "(", "n", ",", "3", ",", "h", ",", "w", ")", "\n", "\n", "feat_list", "=", "self", ".", "Backbone", "(", "x", ")", "\n", "merged_feat", "=", "self", ".", "merge_all_res", "(", "feat_list", ")", "\n", "classification", "=", "self", ".", "classificationModel", "(", "merged_feat", ")", "\n", "regression", "=", "self", ".", "regressionModel", "(", "merged_feat", ")", "\n", "if", "self", ".", "is_3D", ":", "\n", "            ", "DepthRegressionModel", "=", "self", ".", "DepthRegressionModel", "(", "merged_feat", ")", "\n", "return", "(", "classification", ",", "regression", ",", "DepthRegressionModel", ")", "\n", "", "return", "(", "classification", ",", "regression", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.data.data_preprocess.GetDepthNormal": [[17, 54], ["numpy.zeros", "range", "print", "[].astype", "numpy.shape", "scipy.savemat", "print", "str"], "function", ["None"], ["def", "GetDepthNormal", "(", "depth_maps", ",", "labels", ")", ":", "\n", "    ", "DepthNormal", "=", "np", ".", "zeros", "(", "(", "240", ",", "320", ",", "4", ")", ",", "dtype", "=", "'float32'", ")", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "depth_maps", "[", "'data'", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "labels", "[", "'is_valid'", "]", "[", "i", "]", ":", "\n", "            ", "if", "count", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "count", ")", "\n", "", "depth_map", "=", "depth_maps", "[", "'data'", "]", "[", "i", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "coor_joints", "=", "labels", "[", "'image_coordinates'", "]", "[", "i", "]", "\n", "world_joints", "=", "labels", "[", "'real_world_coordinates'", "]", "[", "i", "]", "\n", "height", ",", "width", "=", "np", ".", "shape", "(", "depth_map", ")", "\n", "\n", "# DepthNormal[1:height-1, 1:width-1, 0] = -(depth_map[2:height, 1:width-1] - depth_map[0:height-2, 1:width-1]) / 2.0", "\n", "# DepthNormal[1:height-1, 1:width-1, 1] = -(depth_map[1:height-1, 2:width] - depth_map[1:height-1, 0:width-2]) / 2.0", "\n", "# DepthNormal[1:height-1, 1:width-1, 2] = 1", "\n", "DepthNormal", "[", ":", ",", ":", ",", "3", "]", "=", "depth_map", "[", ":", ",", ":", "]", "\n", "\n", "# for x in range(1,height-1):", "\n", "#     for y in range(1,width-1):", "\n", "#         dzdx = (depth_map[x+1,y] - depth_map[x-1,y]) / 2.0", "\n", "#         dzdy = (depth_map[x,y+1] - depth_map[x,y-1]) / 2.0", "\n", "\n", "#         # DepthNormal[x,y,0] = -dzdx", "\n", "#         # DepthNormal[x,y,1] = -dzdy", "\n", "#         # DepthNormal[x,y,2] = 1", "\n", "#         assert DepthNormal[x,y,0] == -dzdx", "\n", "#         assert DepthNormal[x,y,1] == -dzdy", "\n", "\n", "count", "=", "count", "+", "1", "\n", "\n", "scio", ".", "savemat", "(", "saveDir", "+", "str", "(", "count", ")", "+", "'.mat'", ",", "{", "\n", "'DepthNormal'", ":", "DepthNormal", ",", "\n", "'keypointsPixel'", ":", "coor_joints", ",", "\n", "'keypointsWorld'", ":", "world_joints", "}", ")", "\n", "", "", "print", "(", "count", ")", "\n", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.default_config.update_config": [[112, 119], ["cfg.defrost", "cfg.merge_from_file", "cfg.merge_from_list", "cfg.freeze"], "function", ["None"], ["def", "update_config", "(", "cfg", ",", "args", ")", ":", "\n", "    ", "cfg", ".", "defrost", "(", ")", "\n", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "cfg", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.default_config.update_from_yaml": [[120, 126], ["cfg.defrost", "cfg.merge_from_file", "cfg.freeze"], "function", ["None"], ["", "def", "update_from_yaml", "(", "cfg", ",", "cfg_fname", ")", ":", "\n", "    ", "cfg", ".", "defrost", "(", ")", "\n", "\n", "cfg", ".", "merge_from_file", "(", "cfg_fname", ")", "\n", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.BasicBlock.__init__": [[35, 44], ["torch.Module.__init__", "official_hrnet.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "official_hrnet.conv3x3", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.conv3x3", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.BasicBlock.forward": [[45, 62], ["official_hrnet.BasicBlock.conv1", "official_hrnet.BasicBlock.bn1", "official_hrnet.BasicBlock.relu", "official_hrnet.BasicBlock.conv2", "official_hrnet.BasicBlock.bn2", "official_hrnet.BasicBlock.relu", "official_hrnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.Bottleneck.__init__": [[67, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.Bottleneck.forward": [[82, 103], ["official_hrnet.Bottleneck.conv1", "official_hrnet.Bottleneck.bn1", "official_hrnet.Bottleneck.relu", "official_hrnet.Bottleneck.conv2", "official_hrnet.Bottleneck.bn2", "official_hrnet.Bottleneck.relu", "official_hrnet.Bottleneck.conv3", "official_hrnet.Bottleneck.bn3", "official_hrnet.Bottleneck.relu", "official_hrnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.HighResolutionModule.__init__": [[106, 122], ["torch.Module.__init__", "official_hrnet.HighResolutionModule._check_branches", "official_hrnet.HighResolutionModule._make_branches", "official_hrnet.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.HighResolutionModule._check_branches": [[123, 142], ["len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.HighResolutionModule._make_one_branch": [[143, 166], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.HighResolutionModule._make_branches": [[167, 175], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "official_hrnet.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.HighResolutionModule._make_fuse_layers": [[176, 221], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.HighResolutionModule.get_num_inchannels": [[222, 224], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.HighResolutionModule.forward": [[225, 250], ["range", "range", "len", "range", "x_fuse.append", "official_hrnet.HighResolutionModule.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "elif", "j", ">", "i", ":", "\n", "                    ", "width_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "1", "]", "\n", "height_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "2", "]", "\n", "y", "=", "y", "+", "F", ".", "interpolate", "(", "\n", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", ",", "\n", "size", "=", "[", "height_output", ",", "width_output", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.HighResolutionNet.__init__": [[260, 309], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "official_hrnet.HighResolutionNet._make_layer", "official_hrnet.HighResolutionNet._make_transition_layer", "official_hrnet.HighResolutionNet._make_stage", "official_hrnet.HighResolutionNet._make_transition_layer", "official_hrnet.HighResolutionNet._make_stage", "official_hrnet.HighResolutionNet._make_transition_layer", "official_hrnet.HighResolutionNet._make_stage", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "extra", "=", "config", ".", "MODEL", ".", "EXTRA", "\n", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# stem net", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "stage1_cfg", "=", "extra", "[", "'STAGE1'", "]", "\n", "num_channels", "=", "self", ".", "stage1_cfg", "[", "'NUM_CHANNELS'", "]", "[", "0", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage1_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_blocks", "=", "self", ".", "stage1_cfg", "[", "'NUM_BLOCKS'", "]", "[", "0", "]", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_channels", ",", "num_blocks", ")", "\n", "stage1_out_channel", "=", "block", ".", "expansion", "*", "num_channels", "\n", "\n", "self", ".", "stage2_cfg", "=", "extra", "[", "'STAGE2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "\n", "[", "stage1_out_channel", "]", ",", "num_channels", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "extra", "[", "'STAGE3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "extra", "[", "'STAGE4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.HighResolutionNet._make_transition_layer": [[329, 364], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "outchannels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.HighResolutionNet._make_layer": [[365, 381], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.HighResolutionNet._make_stage": [[382, 410], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "official_hrnet.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.HighResolutionNet.forward": [[411, 455], ["official_hrnet.HighResolutionNet.conv1", "official_hrnet.HighResolutionNet.bn1", "official_hrnet.HighResolutionNet.relu", "official_hrnet.HighResolutionNet.conv2", "official_hrnet.HighResolutionNet.bn2", "official_hrnet.HighResolutionNet.relu", "official_hrnet.HighResolutionNet.layer1", "range", "official_hrnet.HighResolutionNet.stage2", "range", "official_hrnet.HighResolutionNet.stage3", "range", "official_hrnet.HighResolutionNet.stage4", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "x", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "# # Upsampling", "\n", "# x0_h, x0_w = x[0].size(2), x[0].size(3)", "\n", "# x1 = F.upsample(x[1], size=(x0_h, x0_w), mode='bilinear')", "\n", "# x2 = F.upsample(x[2], size=(x0_h, x0_w), mode='bilinear')", "\n", "# x3 = F.upsample(x[3], size=(x0_h, x0_w), mode='bilinear')", "\n", "\n", "# x = torch.cat([x[0], x1, x2, x3], 1)", "\n", "\n", "# x = self.last_layer(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.HighResolutionNet.init_weights": [[456, 476], ["logger.info", "official_hrnet.HighResolutionNet.modules", "os.path.isfile", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logger.info", "print", "official_hrnet.HighResolutionNet.state_dict", "official_hrnet.HighResolutionNet.update", "official_hrnet.HighResolutionNet.load_state_dict", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "official_hrnet.HighResolutionNet.keys", "default_config._C.MODEL.PRETRAINED", "default_config._C.MODEL.PRETRAINED", "default_config._C.MODEL.PRETRAINED"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "''", ",", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'=> init weights from normal distribution'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained", ",", "map_location", "=", "'cpu'", ")", "\n", "logger", ".", "info", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "print", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "#for k, _ in pretrained_dict.items():", "\n", "#    logger.info(", "\n", "#        '=> loading {} pretrained model {}'.format(k, pretrained))", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.conv3x3": [[26, 30], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.get_seg_model": [[477, 482], ["official_hrnet.HighResolutionNet", "official_hrnet.HighResolutionNet.init_weights"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.init_weights"], ["", "", "", "def", "get_seg_model", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "HighResolutionNet", "(", "cfg", ",", "**", "kwargs", ")", "\n", "model", ".", "init_weights", "(", "cfg", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.get_hrnet_w48_backbone": [[485, 494], ["default_config.update_from_yaml", "official_hrnet.HighResolutionNet", "official_hrnet.HighResolutionNet.init_weights", "official_hrnet.HighResolutionNet.init_weights"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.default_config.update_from_yaml", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.init_weights", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.init_weights"], ["def", "get_hrnet_w48_backbone", "(", "pretrain_pth", "=", "None", ")", ":", "\n", "    ", "update_from_yaml", "(", "_C", ",", "'./hrnet/seg_hrnet_w48_473x473_sgd_lr7e-3_wd5e-4_bs_40_epoch150.yaml'", ")", "\n", "model", "=", "HighResolutionNet", "(", "_C", ")", "\n", "if", "pretrain_pth", "is", "None", ":", "\n", "        ", "model", ".", "init_weights", "(", "_C", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "init_weights", "(", "pretrain_pth", ")", "\n", "# model.init_weights('')", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.get_hrnet_w32_backbone": [[495, 504], ["default_config.update_from_yaml", "official_hrnet.HighResolutionNet", "official_hrnet.HighResolutionNet.init_weights", "official_hrnet.HighResolutionNet.init_weights"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.default_config.update_from_yaml", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.init_weights", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.init_weights"], ["", "def", "get_hrnet_w32_backbone", "(", "pretrain_pth", "=", "None", ")", ":", "\n", "    ", "update_from_yaml", "(", "_C", ",", "'./hrnet/seg_hrnet_w32_473x473_sgd_lr7e-3_wd5e-4_bs_40_epoch150.yaml'", ")", "\n", "model", "=", "HighResolutionNet", "(", "_C", ")", "\n", "if", "pretrain_pth", "is", "None", ":", "\n", "        ", "model", ".", "init_weights", "(", "_C", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "init_weights", "(", "pretrain_pth", ")", "\n", "# model.init_weights('')", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.hrnet.official_hrnet.get_hrnet_w18_backbone": [[505, 516], ["default_config.update_from_yaml", "official_hrnet.HighResolutionNet", "official_hrnet.HighResolutionNet.init_weights", "official_hrnet.HighResolutionNet.init_weights", "official_hrnet.HighResolutionNet.init_weights"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.default_config.update_from_yaml", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.init_weights", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.init_weights", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.init_weights"], ["", "def", "get_hrnet_w18_backbone", "(", "pretrain_pth", "=", "None", ")", ":", "\n", "    ", "update_from_yaml", "(", "_C", ",", "'./hrnet/seg_hrnet_w18_473x473_sgd_lr7e-3_wd5e-4_bs_40_epoch150.yaml'", ")", "\n", "model", "=", "HighResolutionNet", "(", "_C", ")", "\n", "if", "pretrain_pth", "is", "None", ":", "\n", "        ", "model", ".", "init_weights", "(", "''", ")", "\n", "", "elif", "pretrain_pth", "==", "'IN'", ":", "\n", "        ", "model", ".", "init_weights", "(", "_C", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "init_weights", "(", "pretrain_pth", ")", "\n", "# model.init_weights('')", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.metric._fast_hist": [[8, 15], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "function", ["None"], ["def", "_fast_hist", "(", "label_true", ",", "label_pred", ",", "n_class", ")", ":", "\n", "    ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "n_class", ")", "\n", "hist", "=", "np", ".", "bincount", "(", "\n", "n_class", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "label_pred", "[", "mask", "]", ",", "\n", "minlength", "=", "n_class", "**", "2", ",", "\n", ")", ".", "reshape", "(", "n_class", ",", "n_class", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.metric.scores": [[17, 37], ["numpy.zeros", "zip", "numpy.nanmean", "numpy.nanmean", "dict", "metric._fast_hist", "numpy.diag().sum", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "np.zeros.sum", "np.zeros.sum", "zip", "lt.flatten", "lp.flatten", "numpy.diag", "range", "numpy.diag", "np.zeros.sum", "np.zeros.sum"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.metric._fast_hist"], ["", "def", "scores", "(", "label_trues", ",", "label_preds", ",", "n_class", ")", ":", "\n", "    ", "hist", "=", "np", ".", "zeros", "(", "(", "n_class", ",", "n_class", ")", ")", "\n", "for", "lt", ",", "lp", "in", "zip", "(", "label_trues", ",", "label_preds", ")", ":", "\n", "        ", "hist", "+=", "_fast_hist", "(", "lt", ".", "flatten", "(", ")", ",", "lp", ".", "flatten", "(", ")", ",", "n_class", ")", "\n", "", "acc", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "valid", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", ">", "0", "# added", "\n", "mean_iu", "=", "np", ".", "nanmean", "(", "iu", "[", "valid", "]", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "fwavacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "cls_iu", "=", "dict", "(", "zip", "(", "range", "(", "n_class", ")", ",", "iu", ")", ")", "\n", "\n", "return", "{", "\n", "\"Overall Acc\"", ":", "acc", ",", "\n", "\"Mean Acc\"", ":", "acc_cls", ",", "\n", "\"FreqW Acc\"", ":", "fwavacc", ",", "\n", "\"Mean IoU\"", ":", "mean_iu", ",", "\n", "\"Class IoU\"", ":", "cls_iu", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.metric.batch_pix_accuracy": [[40, 56], ["torch.max", "numpy.sum", "numpy.sum", "predict.cpu().numpy().astype", "target.cpu().numpy().astype", "predict.cpu().numpy", "target.cpu().numpy", "predict.cpu", "target.cpu"], "function", ["None"], ["", "def", "batch_pix_accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "\"\"\"Batch Pixel Accuracy\n    Args:\n        predict: input 4D tensor\n        target: label 3D tensor\n    \"\"\"", "\n", "_", ",", "predict", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "\n", "predict", "=", "predict", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "\n", "pixel_labeled", "=", "np", ".", "sum", "(", "target", ">", "0", ")", "\n", "pixel_correct", "=", "np", ".", "sum", "(", "(", "predict", "==", "target", ")", "*", "(", "target", ">", "0", ")", ")", "\n", "assert", "pixel_correct", "<=", "pixel_labeled", ",", "\"Correct area should be smaller than Labeled\"", "\n", "return", "pixel_correct", ",", "pixel_labeled", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.metric.batch_intersection_union": [[58, 82], ["torch.max", "numpy.histogram", "numpy.histogram", "numpy.histogram", "predict.cpu().numpy().astype", "target.cpu().numpy().astype", "predict.cpu().numpy", "target.cpu().numpy", "predict.cpu", "target.cpu"], "function", ["None"], ["", "def", "batch_intersection_union", "(", "output", ",", "target", ",", "nclass", ")", ":", "\n", "    ", "\"\"\"Batch Intersection of Union\n    Args:\n        predict: input 4D tensor\n        target: label 3D tensor\n        nclass: number of categories (int)\n    \"\"\"", "\n", "_", ",", "predict", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "mini", "=", "1", "\n", "maxi", "=", "nclass", "\n", "nbins", "=", "nclass", "\n", "predict", "=", "predict", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "'int64'", ")", "+", "1", "\n", "\n", "predict", "=", "predict", "*", "(", "target", ">", "0", ")", ".", "astype", "(", "predict", ".", "dtype", ")", "\n", "intersection", "=", "predict", "*", "(", "predict", "==", "target", ")", "\n", "# areas of intersection and union", "\n", "area_inter", ",", "_", "=", "np", ".", "histogram", "(", "intersection", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "\n", "area_pred", ",", "_", "=", "np", ".", "histogram", "(", "predict", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "\n", "area_lab", ",", "_", "=", "np", ".", "histogram", "(", "target", ",", "bins", "=", "nbins", ",", "range", "=", "(", "mini", ",", "maxi", ")", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_inter", "\n", "assert", "(", "area_inter", "<=", "area_union", ")", ".", "all", "(", ")", ",", "\"Intersection area should be smaller than Union area\"", "\n", "return", "area_inter", ",", "area_union", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.metric.pixel_accuracy": [[85, 95], ["numpy.asarray", "numpy.asarray", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "pixel_accuracy", "(", "im_pred", ",", "im_lab", ")", ":", "\n", "    ", "im_pred", "=", "np", ".", "asarray", "(", "im_pred", ")", "\n", "im_lab", "=", "np", ".", "asarray", "(", "im_lab", ")", "\n", "\n", "# Remove classes from unlabeled pixels in gt image. ", "\n", "# We should not penalize detections in unlabeled portions of the image.", "\n", "pixel_labeled", "=", "np", ".", "sum", "(", "im_lab", ">", "0", ")", "\n", "pixel_correct", "=", "np", ".", "sum", "(", "(", "im_pred", "==", "im_lab", ")", "*", "(", "im_lab", ">", "0", ")", ")", "\n", "#pixel_accuracy = 1.0 * pixel_correct / pixel_labeled", "\n", "return", "pixel_correct", ",", "pixel_labeled", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.metric.intersection_and_union": [[97, 113], ["numpy.asarray", "numpy.asarray", "numpy.histogram", "numpy.histogram", "numpy.histogram"], "function", ["None"], ["", "def", "intersection_and_union", "(", "im_pred", ",", "im_lab", ",", "num_class", ")", ":", "\n", "    ", "im_pred", "=", "np", ".", "asarray", "(", "im_pred", ")", "\n", "im_lab", "=", "np", ".", "asarray", "(", "im_lab", ")", "\n", "# Remove classes from unlabeled pixels in gt image. ", "\n", "im_pred", "=", "im_pred", "*", "(", "im_lab", ">", "0", ")", "\n", "# Compute area intersection:", "\n", "intersection", "=", "im_pred", "*", "(", "im_pred", "==", "im_lab", ")", "\n", "area_inter", ",", "_", "=", "np", ".", "histogram", "(", "intersection", ",", "bins", "=", "num_class", "-", "1", ",", "\n", "range", "=", "(", "1", ",", "num_class", "-", "1", ")", ")", "\n", "# Compute area union: ", "\n", "area_pred", ",", "_", "=", "np", ".", "histogram", "(", "im_pred", ",", "bins", "=", "num_class", "-", "1", ",", "\n", "range", "=", "(", "1", ",", "num_class", "-", "1", ")", ")", "\n", "area_lab", ",", "_", "=", "np", ".", "histogram", "(", "im_lab", ",", "bins", "=", "num_class", "-", "1", ",", "\n", "range", "=", "(", "1", ",", "num_class", "-", "1", ")", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_inter", "\n", "return", "area_inter", ",", "area_union", "\n", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.modelsummary.get_model_summary": [[19, 136], ["collections.namedtuple", "model.eval", "model.apply", "model", "hook.remove", "str", "isinstance", "isinstance", "summary.append", "hooks.append", "str", "module.parameters", "hasattr", "isinstance", "collections.namedtuple.", "isinstance", "isinstance", "module.register_forward_hook", "str.find", "str.find", "str.find", "param_.view().size", "str.find", "list", "list", "param_.view", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "input[].size", "output.size", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.prod", "torch.prod", "input[].size", "list", "torch.LongTensor", "torch.LongTensor", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "module.weight.data.size", "list", "list", "str", "str", "str", "str", "output.size", "output.size"], "function", ["None"], ["def", "get_model_summary", "(", "model", ",", "*", "input_tensors", ",", "item_length", "=", "26", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param model:\n    :param input_tensors:\n    :param item_length:\n    :return:\n    \"\"\"", "\n", "\n", "summary", "=", "[", "]", "\n", "\n", "ModuleDetails", "=", "namedtuple", "(", "\n", "\"Layer\"", ",", "[", "\"name\"", ",", "\"input_size\"", ",", "\"output_size\"", ",", "\"num_parameters\"", ",", "\"multiply_adds\"", "]", ")", "\n", "hooks", "=", "[", "]", "\n", "layer_instances", "=", "{", "}", "\n", "\n", "def", "add_hooks", "(", "module", ")", ":", "\n", "\n", "        ", "def", "hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "class_name", "=", "str", "(", "module", ".", "__class__", ".", "__name__", ")", "\n", "\n", "instance_index", "=", "1", "\n", "if", "class_name", "not", "in", "layer_instances", ":", "\n", "                ", "layer_instances", "[", "class_name", "]", "=", "instance_index", "\n", "", "else", ":", "\n", "                ", "instance_index", "=", "layer_instances", "[", "class_name", "]", "+", "1", "\n", "layer_instances", "[", "class_name", "]", "=", "instance_index", "\n", "\n", "", "layer_name", "=", "class_name", "+", "\"_\"", "+", "str", "(", "instance_index", ")", "\n", "\n", "params", "=", "0", "\n", "\n", "if", "class_name", ".", "find", "(", "\"Conv\"", ")", "!=", "-", "1", "or", "class_name", ".", "find", "(", "\"BatchNorm\"", ")", "!=", "-", "1", "or", "class_name", ".", "find", "(", "\"Linear\"", ")", "!=", "-", "1", ":", "\n", "                ", "for", "param_", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                    ", "params", "+=", "param_", ".", "view", "(", "-", "1", ")", ".", "size", "(", "0", ")", "\n", "\n", "", "", "flops", "=", "\"Not Available\"", "\n", "if", "class_name", ".", "find", "(", "\"Conv\"", ")", "!=", "-", "1", "and", "hasattr", "(", "module", ",", "\"weight\"", ")", ":", "\n", "                ", "flops", "=", "(", "\n", "torch", ".", "prod", "(", "\n", "torch", ".", "LongTensor", "(", "list", "(", "module", ".", "weight", ".", "data", ".", "size", "(", ")", ")", ")", ")", "*", "\n", "torch", ".", "prod", "(", "\n", "torch", ".", "LongTensor", "(", "list", "(", "output", ".", "size", "(", ")", ")", "[", "2", ":", "]", ")", ")", ")", ".", "item", "(", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "flops", "=", "(", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "list", "(", "output", ".", "size", "(", ")", ")", ")", ")", "*", "input", "[", "0", "]", ".", "size", "(", "1", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "input", "[", "0", "]", ",", "list", ")", ":", "\n", "                ", "input", "=", "input", "[", "0", "]", "\n", "", "if", "isinstance", "(", "output", ",", "list", ")", ":", "\n", "                ", "output", "=", "output", "[", "0", "]", "\n", "\n", "", "summary", ".", "append", "(", "\n", "ModuleDetails", "(", "\n", "name", "=", "layer_name", ",", "\n", "input_size", "=", "list", "(", "input", "[", "0", "]", ".", "size", "(", ")", ")", ",", "\n", "output_size", "=", "list", "(", "output", ".", "size", "(", ")", ")", ",", "\n", "num_parameters", "=", "params", ",", "\n", "multiply_adds", "=", "flops", ")", "\n", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "module", ",", "nn", ".", "ModuleList", ")", "and", "not", "isinstance", "(", "module", ",", "nn", ".", "Sequential", ")", "and", "module", "!=", "model", ":", "\n", "            ", "hooks", ".", "append", "(", "module", ".", "register_forward_hook", "(", "hook", ")", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "model", ".", "apply", "(", "add_hooks", ")", "\n", "\n", "space_len", "=", "item_length", "\n", "\n", "model", "(", "*", "input_tensors", ")", "\n", "for", "hook", "in", "hooks", ":", "\n", "        ", "hook", ".", "remove", "(", ")", "\n", "\n", "", "details", "=", "''", "\n", "if", "verbose", ":", "\n", "        ", "details", "=", "\"Model Summary\"", "+", "os", ".", "linesep", "+", "\"Name{}Input Size{}Output Size{}Parameters{}Multiply Adds (Flops){}\"", ".", "format", "(", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Name\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Input Size\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Output Size\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Parameters\"", ")", ")", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "\"Multiply Adds (Flops)\"", ")", ")", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "\n", "", "params_sum", "=", "0", "\n", "flops_sum", "=", "0", "\n", "for", "layer", "in", "summary", ":", "\n", "        ", "params_sum", "+=", "layer", ".", "num_parameters", "\n", "if", "layer", ".", "multiply_adds", "!=", "\"Not Available\"", ":", "\n", "            ", "flops_sum", "+=", "layer", ".", "multiply_adds", "\n", "", "if", "verbose", ":", "\n", "            ", "details", "+=", "\"{}{}{}{}{}{}{}{}{}{}\"", ".", "format", "(", "\n", "layer", ".", "name", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "layer", ".", "name", ")", ")", ",", "\n", "layer", ".", "input_size", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "str", "(", "layer", ".", "input_size", ")", ")", ")", ",", "\n", "layer", ".", "output_size", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "str", "(", "layer", ".", "output_size", ")", ")", ")", ",", "\n", "layer", ".", "num_parameters", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "str", "(", "layer", ".", "num_parameters", ")", ")", ")", ",", "\n", "layer", ".", "multiply_adds", ",", "\n", "' '", "*", "(", "space_len", "-", "len", "(", "str", "(", "layer", ".", "multiply_adds", ")", ")", ")", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "\n", "", "", "details", "+=", "os", ".", "linesep", "+", "\"Total Parameters: {:,}\"", ".", "format", "(", "params_sum", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "details", "+=", "\"Total Multiply Adds (For Convolution and Linear Layers only): {:,} GFLOPs\"", ".", "format", "(", "flops_sum", "/", "(", "1024", "**", "3", ")", ")", "+", "os", ".", "linesep", "+", "'-'", "*", "space_len", "*", "5", "+", "os", ".", "linesep", "\n", "details", "+=", "\"Number of Layers\"", "+", "os", ".", "linesep", "\n", "for", "layer", "in", "layer_instances", ":", "\n", "        ", "details", "+=", "\"{} : {} layers   \"", ".", "format", "(", "layer", ",", "layer_instances", "[", "layer", "]", ")", "\n", "\n", "", "return", "details", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.FullModel.__init__": [[28, 32], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "loss", ")", ":", "\n", "    ", "super", "(", "FullModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "loss", "=", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.FullModel.forward": [[33, 37], ["utils.FullModel.model", "utils.FullModel.loss", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "labels", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "model", "(", "inputs", ")", "\n", "loss", "=", "self", ".", "loss", "(", "outputs", ",", "labels", ")", "\n", "return", "torch", ".", "unsqueeze", "(", "loss", ",", "0", ")", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.AverageMeter.__init__": [[51, 57], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "self", ".", "val", "=", "None", "\n", "self", ".", "avg", "=", "None", "\n", "self", ".", "sum", "=", "None", "\n", "self", ".", "count", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.AverageMeter.initialize": [[58, 64], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "val", ",", "weight", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "avg", "=", "val", "\n", "self", ".", "sum", "=", "val", "*", "weight", "\n", "self", ".", "count", "=", "weight", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.AverageMeter.update": [[65, 70], ["utils.AverageMeter.initialize", "utils.AverageMeter.add"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.AverageMeter.add"], ["", "def", "update", "(", "self", ",", "val", ",", "weight", "=", "1", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", "val", ",", "weight", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add", "(", "val", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.AverageMeter.add": [[71, 76], ["None"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "val", ",", "weight", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "weight", "\n", "self", ".", "count", "+=", "weight", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.AverageMeter.value": [[77, 79], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.AverageMeter.average": [[80, 82], ["None"], "methods", ["None"], ["", "def", "average", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size": [[38, 42], ["torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.is_initialized", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size"], ["", "", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_rank": [[43, 47], ["torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.is_initialized", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_rank", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.create_logger": [[83, 116], ["pathlib.Path", "print", "final_output_dir.mkdir", "time.strftime", "logging.basicConfig", "logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.getLogger().addHandler", "print", "tensorboard_log_dir.mkdir", "pathlib.Path.exists", "print", "pathlib.Path.mkdir", "os.path.basename().split", "str", "str", "str", "logging.getLogger", "os.path.basename", "pathlib.Path"], "function", ["None"], ["", "", "def", "create_logger", "(", "cfg", ",", "cfg_name", ",", "phase", "=", "'train'", ")", ":", "\n", "    ", "root_output_dir", "=", "Path", "(", "cfg", ".", "OUTPUT_DIR", ")", "\n", "# set up logger", "\n", "if", "not", "root_output_dir", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "'=> creating {}'", ".", "format", "(", "root_output_dir", ")", ")", "\n", "root_output_dir", ".", "mkdir", "(", ")", "\n", "\n", "", "dataset", "=", "cfg", ".", "DATASET", ".", "DATASET", "\n", "model", "=", "cfg", ".", "MODEL", ".", "NAME", "\n", "cfg_name", "=", "os", ".", "path", ".", "basename", "(", "cfg_name", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "final_output_dir", "=", "root_output_dir", "/", "dataset", "/", "cfg_name", "\n", "\n", "print", "(", "'=> creating {}'", ".", "format", "(", "final_output_dir", ")", ")", "\n", "final_output_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "time_str", "=", "time", ".", "strftime", "(", "'%Y-%m-%d-%H-%M'", ")", "\n", "log_file", "=", "'{}_{}_{}.log'", ".", "format", "(", "cfg_name", ",", "time_str", ",", "phase", ")", "\n", "final_log_file", "=", "final_output_dir", "/", "log_file", "\n", "head", "=", "'%(asctime)-15s %(message)s'", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "str", "(", "final_log_file", ")", ",", "\n", "format", "=", "head", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "console", ")", "\n", "\n", "tensorboard_log_dir", "=", "Path", "(", "cfg", ".", "LOG_DIR", ")", "/", "dataset", "/", "model", "/", "(", "cfg_name", "+", "'_'", "+", "time_str", ")", "\n", "print", "(", "'=> creating {}'", ".", "format", "(", "tensorboard_log_dir", ")", ")", "\n", "tensorboard_log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "return", "logger", ",", "str", "(", "final_output_dir", ")", ",", "str", "(", "tensorboard_log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_confusion_matrix": [[117, 141], ["pred.cpu().numpy().transpose", "numpy.asarray", "numpy.asarray", "numpy.bincount", "numpy.zeros", "range", "numpy.argmax", "range", "pred.cpu().numpy", "label.cpu().numpy", "len", "pred.cpu", "label.cpu"], "function", ["None"], ["", "def", "get_confusion_matrix", "(", "label", ",", "pred", ",", "size", ",", "num_class", ",", "ignore", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    Calcute the confusion matrix by given label and pred\n    \"\"\"", "\n", "output", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "seg_pred", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "seg_gt", "=", "np", ".", "asarray", "(", "\n", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", "size", "[", "-", "2", "]", ",", ":", "size", "[", "-", "1", "]", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "ignore_index", "=", "seg_gt", "!=", "ignore", "\n", "seg_gt", "=", "seg_gt", "[", "ignore_index", "]", "\n", "seg_pred", "=", "seg_pred", "[", "ignore_index", "]", "\n", "\n", "index", "=", "(", "seg_gt", "*", "num_class", "+", "seg_pred", ")", ".", "astype", "(", "'int32'", ")", "\n", "label_count", "=", "np", ".", "bincount", "(", "index", ")", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "num_class", ",", "num_class", ")", ")", "\n", "\n", "for", "i_label", "in", "range", "(", "num_class", ")", ":", "\n", "        ", "for", "i_pred", "in", "range", "(", "num_class", ")", ":", "\n", "            ", "cur_index", "=", "i_label", "*", "num_class", "+", "i_pred", "\n", "if", "cur_index", "<", "len", "(", "label_count", ")", ":", "\n", "                ", "confusion_matrix", "[", "i_label", ",", "\n", "i_pred", "]", "=", "label_count", "[", "cur_index", "]", "\n", "", "", "", "return", "confusion_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.adjust_learning_rate": [[142, 147], ["float"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "base_lr", ",", "max_iters", ",", "\n", "cur_iters", ",", "power", "=", "0.9", ")", ":", "\n", "    ", "lr", "=", "base_lr", "*", "(", "(", "1", "-", "float", "(", "cur_iters", ")", "/", "max_iters", ")", "**", "(", "power", ")", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "return", "lr", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.human36m.Human36M.__init__": [[57, 109], ["base_dataset.BaseDataset.__init__", "numpy.array", "numpy.array", "numpy.arange", "enumerate", "human36m.Human36M.read_files", "open", "l.strip", "os.path.join", "f.readlines"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.read_files"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "list_path", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "25", ",", "\n", "multi_scale", "=", "True", ",", "\n", "flip", "=", "True", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "base_size", "=", "473", ",", "\n", "crop_size", "=", "(", "473", ",", "473", ")", ",", "\n", "downsample_rate", "=", "1", ",", "\n", "scale_factor", "=", "11", ",", "\n", "center_crop_test", "=", "False", ",", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "\n", "        ", "super", "(", "Human36M", ",", "self", ")", ".", "__init__", "(", "ignore_label", ",", "base_size", ",", "\n", "crop_size", ",", "downsample_rate", ",", "scale_factor", ",", "mean", ",", "std", ")", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "class_weights", "=", "None", "\n", "\n", "self", ".", "left_right_pairs", "=", "np", ".", "array", "(", "\n", "[", "[", "1", ",", "6", "]", ",", "\n", "[", "2", ",", "7", "]", ",", "\n", "[", "3", ",", "8", "]", ",", "\n", "[", "17", ",", "25", "]", ",", "\n", "[", "18", ",", "26", "]", ",", "\n", "[", "19", ",", "27", "]", ",", "\n", "[", "33", ",", "38", "]", ",", "\n", "[", "34", ",", "39", "]", ",", "\n", "[", "49", ",", "56", "]", ",", "\n", "[", "50", ",", "58", "]", "]", "\n", ")", "\n", "\n", "self", ".", "original_label", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "6", ",", "7", ",", "8", ",", "17", ",", "18", ",", "19", ",", "25", ",", "26", ",", "27", ",", "32", ",", "33", ",", "34", ",", "38", ",", "39", ",", "43", ",", "44", ",", "46", ",", "49", ",", "50", ",", "56", ",", "58", "]", ")", "\n", "self", ".", "label_mapper", "=", "np", ".", "arange", "(", "60", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "self", ".", "original_label", ")", ":", "\n", "            ", "self", ".", "label_mapper", "[", "l", "]", "=", "i", "\n", "", "self", ".", "mapped_left_right_pairs", "=", "self", ".", "label_mapper", "[", "self", ".", "left_right_pairs", "]", "\n", "\n", "self", ".", "multi_scale", "=", "multi_scale", "\n", "self", ".", "flip", "=", "flip", "\n", "with", "open", "(", "self", ".", "list_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "]", "\n", "self", ".", "img_list", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "l", ")", "for", "l", "in", "lines", "]", "\n", "\n", "", "self", ".", "files", "=", "self", ".", "read_files", "(", ")", "\n", "if", "num_samples", ":", "\n", "            ", "self", ".", "files", "=", "self", ".", "files", "[", ":", "num_samples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.human36m.Human36M.read_files": [[110, 124], ["image_path.split", "files.append"], "methods", ["None"], ["", "", "def", "read_files", "(", "self", ")", ":", "\n", "        ", "files", "=", "[", "]", "\n", "for", "image_path", "in", "self", ".", "img_list", ":", "\n", "            ", "splitpath", "=", "image_path", ".", "split", "(", "'/'", ")", "\n", "splitpath", "[", "-", "4", "]", "=", "'seg'", "\n", "label_path", "=", "'/'", ".", "join", "(", "splitpath", ")", "\n", "name", "=", "'/'", ".", "join", "(", "splitpath", "[", "-", "3", ":", "]", ")", "\n", "sample", "=", "{", "\n", "'img'", ":", "image_path", ",", "\n", "'label'", ":", "label_path", ",", "\n", "'name'", ":", "name", "\n", "}", "\n", "files", ".", "append", "(", "sample", ")", "\n", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.human36m.Human36M.resize_image": [[125, 129], ["cv2.resize", "cv2.resize"], "methods", ["None"], ["", "def", "resize_image", "(", "self", ",", "image", ",", "label", ",", "size", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "size", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "size", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.human36m.Human36M.__getitem__": [[130, 168], ["cv2.imread", "numpy.array", "human36m.Human36M.resize_image", "human36m.Human36M.gen_sample", "PIL.Image.open", "cv2.resize", "cv2.resize", "human36m.Human36M.input_transform", "image.transpose.transpose.transpose", "image.transpose.transpose.copy", "cv2.resize.copy", "numpy.array", "image.transpose.transpose.copy", "cv2.resize.copy", "numpy.array", "human36m.Human36M.mapped_left_right_pairs[].reshape", "human36m.Human36M.mapped_left_right_pairs[].reshape", "range", "numpy.random.choice", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.resize_image", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.gen_sample", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.input_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "files", "[", "index", "]", "\n", "name", "=", "item", "[", "\"name\"", "]", "\n", "\n", "image", "=", "cv2", ".", "imread", "(", "item", "[", "'img'", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "item", "[", "'label'", "]", ")", ")", "\n", "label", "=", "self", ".", "label_mapper", "[", "label", "]", "\n", "\n", "size", "=", "label", ".", "shape", "\n", "\n", "if", "'eval'", "in", "self", ".", "list_path", ":", "\n", "            ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "self", ".", "crop_size", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "(", "1000", ",", "1000", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR_EXACT", ")", "\n", "image", "=", "self", ".", "input_transform", "(", "image", ")", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n", "", "if", "self", ".", "flip", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ":", "flip", ",", ":", "]", "\n", "label", "=", "label", "[", ":", ",", ":", ":", "flip", "]", "\n", "\n", "if", "flip", "==", "-", "1", ":", "\n", "                ", "left_idx", "=", "self", ".", "mapped_left_right_pairs", "[", ":", ",", "0", "]", ".", "reshape", "(", "-", "1", ")", "\n", "right_idx", "=", "self", ".", "mapped_left_right_pairs", "[", ":", ",", "1", "]", ".", "reshape", "(", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "mapped_left_right_pairs", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "right_pos", "=", "np", ".", "where", "(", "label", "==", "right_idx", "[", "i", "]", ")", "\n", "left_pos", "=", "np", ".", "where", "(", "label", "==", "left_idx", "[", "i", "]", ")", "\n", "label", "[", "right_pos", "[", "0", "]", ",", "right_pos", "[", "1", "]", "]", "=", "left_idx", "[", "i", "]", "\n", "label", "[", "left_pos", "[", "0", "]", ",", "left_pos", "[", "1", "]", "]", "=", "right_idx", "[", "i", "]", "\n", "\n", "", "", "", "image", ",", "label", "=", "self", ".", "resize_image", "(", "image", ",", "label", ",", "self", ".", "crop_size", ")", "\n", "image", ",", "label", "=", "self", ".", "gen_sample", "(", "image", ",", "label", ",", "\n", "self", ".", "multi_scale", ",", "False", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.human36m.Human36M.inference": [[169, 190], ["image.size", "model", "torch.nn.functional.upsample", "torch.nn.functional.upsample.exp", "model", "torch.nn.functional.upsample", "flip_output.cpu().numpy.cpu().numpy.cpu().numpy", "flip_output.cpu().numpy.cpu().numpy.copy", "torch.from_numpy().cuda", "image.numpy", "torch.from_numpy", "flip_img.copy", "flip_output.cpu().numpy.cpu().numpy.cpu", "torch.from_numpy", "flip_pred[].copy"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "def", "inference", "(", "self", ",", "model", ",", "image", ",", "flip", ")", ":", "\n", "        ", "size", "=", "image", ".", "size", "(", ")", "\n", "pred", "=", "model", "(", "image", ")", "\n", "pred", "=", "F", ".", "upsample", "(", "input", "=", "pred", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "if", "flip", ":", "\n", "            ", "flip_img", "=", "image", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "flip_output", "=", "model", "(", "torch", ".", "from_numpy", "(", "flip_img", ".", "copy", "(", ")", ")", ")", "\n", "flip_output", "=", "F", ".", "upsample", "(", "input", "=", "flip_output", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "flip_output", "=", "flip_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flip_pred", "=", "flip_output", ".", "copy", "(", ")", "\n", "for", "pair", "in", "self", ".", "mapped_left_right_pairs", ":", "\n", "                ", "flip_pred", "[", ":", ",", "pair", "[", "0", "]", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "pair", "[", "1", "]", ",", ":", ",", ":", "]", "\n", "flip_pred", "[", ":", ",", "pair", "[", "1", "]", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "pair", "[", "0", "]", ",", ":", ",", ":", "]", "\n", "", "flip_pred", "=", "torch", ".", "from_numpy", "(", "flip_pred", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "pred", "+=", "flip_pred", "\n", "pred", "=", "pred", "*", "0.5", "\n", "", "return", "pred", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.human36m.Human36M.convert_label": [[191, 200], ["label.copy", "enumerate", "enumerate"], "methods", ["None"], ["", "def", "convert_label", "(", "self", ",", "label", ",", "inverse", "=", "False", ")", ":", "\n", "        ", "temp", "=", "label", ".", "copy", "(", ")", "\n", "if", "inverse", ":", "\n", "            ", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "label_mapper", ")", ":", "\n", "                ", "label", "[", "temp", "==", "k", "]", "=", "v", "\n", "", "", "else", ":", "\n", "            ", "for", "v", ",", "k", "in", "enumerate", "(", "self", ".", "label_mapper", ")", ":", "\n", "                ", "label", "[", "temp", "==", "k", "]", "=", "v", "\n", "", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.human36m.Human36M.get_palette": [[201, 216], ["range"], "methods", ["None"], ["", "def", "get_palette", "(", "self", ",", "n", ")", ":", "\n", "        ", "palette", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "            ", "lab", "=", "j", "\n", "palette", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "lab", ":", "\n", "                ", "palette", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "+=", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.human36m.Human36M.save_gt": [[217, 233], ["human36m.Human36M.get_palette", "preds.cpu().numpy().copy().astype.cpu().numpy().copy().astype.cpu().numpy().copy().astype", "images.astype.astype.permute().cpu().numpy", "images.astype.astype.astype", "range", "human36m.Human36M.convert_label", "PIL.Image.fromarray", "PIL.Image.fromarray.putpalette", "PIL.Image.fromarray.save", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "preds.cpu().numpy().copy().astype.cpu().numpy().copy().astype.cpu().numpy().copy", "images.astype.astype.permute().cpu", "os.path.join", "os.path.join", "preds.cpu().numpy().copy().astype.cpu().numpy().copy().astype.cpu().numpy", "images.astype.astype.permute", "name[].split", "name[].split", "preds.cpu().numpy().copy().astype.cpu().numpy().copy().astype.cpu"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.get_palette", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.convert_label", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save"], ["", "def", "save_gt", "(", "self", ",", "images", ",", "preds", ",", "sv_path1", ",", "sv_path2", ",", "name", ")", ":", "\n", "        ", "palette", "=", "self", ".", "get_palette", "(", "256", ")", "\n", "preds", "=", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# preds = np.asarray(np.argmax(preds, axis=1), dtype=np.uint8)", "\n", "images", "=", "images", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "images", "=", "(", "(", "images", "*", "self", ".", "std", ")", "+", "self", ".", "mean", ")", "*", "255", "\n", "images", "=", "images", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "            ", "pred", "=", "self", ".", "convert_label", "(", "preds", "[", "i", "]", ",", "inverse", "=", "True", ")", "\n", "save_img", "=", "Image", ".", "fromarray", "(", "pred", ")", "\n", "save_img", ".", "putpalette", "(", "palette", ")", "\n", "save_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "sv_path2", ",", "'_'", ".", "join", "(", "name", "[", "i", "]", ".", "split", "(", "'/'", ")", ")", ")", ")", "\n", "\n", "ori_img", "=", "Image", ".", "fromarray", "(", "images", "[", "i", "]", ")", "\n", "ori_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "sv_path1", ",", "'_'", ".", "join", "(", "name", "[", "i", "]", ".", "split", "(", "'/'", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.human36m.Human36M.save_pred": [[234, 243], ["human36m.Human36M.get_palette", "numpy.asarray.cpu().numpy().copy", "numpy.asarray", "range", "numpy.argmax", "human36m.Human36M.convert_label", "PIL.Image.fromarray", "PIL.Image.fromarray.putpalette", "PIL.Image.fromarray.save", "numpy.asarray.cpu().numpy", "os.path.join", "numpy.asarray.cpu", "name[].split"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.get_palette", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.convert_label", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save"], ["", "", "def", "save_pred", "(", "self", ",", "preds", ",", "sv_path", ",", "name", ")", ":", "\n", "        ", "palette", "=", "self", ".", "get_palette", "(", "256", ")", "\n", "preds", "=", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "preds", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "preds", ",", "axis", "=", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "pred", "=", "self", ".", "convert_label", "(", "preds", "[", "i", "]", ",", "inverse", "=", "True", ")", "\n", "save_img", "=", "Image", ".", "fromarray", "(", "pred", ")", "\n", "save_img", ".", "putpalette", "(", "palette", ")", "\n", "save_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "sv_path", ",", "'_'", ".", "join", "(", "name", "[", "i", "]", ".", "split", "(", "'/'", ")", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_rgb.NTURGBDRGB.__init__": [[57, 114], ["base_dataset.BaseDataset.__init__", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.arange", "enumerate", "nturgbd_rgb.NTURGBDRGB.read_files", "numpy.array().astype", "open", "l.strip", "os.path.join", "numpy.array", "f.readlines"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.read_files"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "list_path", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "25", ",", "\n", "multi_scale", "=", "True", ",", "\n", "flip", "=", "True", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "base_size", "=", "473", ",", "\n", "crop_size", "=", "(", "473", ",", "473", ")", ",", "\n", "downsample_rate", "=", "1", ",", "\n", "scale_factor", "=", "11", ",", "\n", "center_crop_test", "=", "False", ",", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "\n", "        ", "super", "(", "NTURGBDRGB", ",", "self", ")", ".", "__init__", "(", "ignore_label", ",", "base_size", ",", "\n", "crop_size", ",", "downsample_rate", ",", "scale_factor", ",", "mean", ",", "std", ")", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "list_path", "=", "list_path", "\n", "\n", "# self.class_weights = None", "\n", "# v1 train statistics", "\n", "# weights = [1.453,49.297,49.219,47.848,49.313,49.235,47.818,49.520,49.960,49.140,49.468,49.995,49.167,49.194,45.048,46.354,45.038,46.415,43.543,41.302,43.245,48.408,48.542,48.298,48.659]", "\n", "weights", "=", "[", "1.448", ",", "49.234", ",", "49.483", ",", "48.030", ",", "49.247", ",", "49.492", ",", "48.018", ",", "49.704", ",", "50.052", ",", "49.369", ",", "49.694", ",", "50.090", ",", "49.425", ",", "49.459", ",", "45.846", ",", "47.156", ",", "45.868", ",", "47.197", ",", "44.167", ",", "42.789", ",", "44.341", ",", "48.632", ",", "48.873", ",", "48.644", ",", "49.004", "]", "\n", "self", ".", "class_weights", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "weights", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "self", ".", "left_right_pairs", "=", "np", ".", "array", "(", "\n", "[", "[", "1", ",", "6", "]", ",", "\n", "[", "2", ",", "7", "]", ",", "\n", "[", "3", ",", "8", "]", ",", "\n", "[", "17", ",", "25", "]", ",", "\n", "[", "18", ",", "26", "]", ",", "\n", "[", "19", ",", "27", "]", ",", "\n", "[", "33", ",", "38", "]", ",", "\n", "[", "34", ",", "39", "]", ",", "\n", "[", "49", ",", "56", "]", ",", "\n", "[", "50", ",", "58", "]", "]", "\n", ")", "\n", "\n", "self", ".", "original_label", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "6", ",", "7", ",", "8", ",", "17", ",", "18", ",", "19", ",", "25", ",", "26", ",", "27", ",", "32", ",", "33", ",", "34", ",", "38", ",", "39", ",", "43", ",", "44", ",", "46", ",", "49", ",", "50", ",", "56", ",", "58", "]", ")", "\n", "self", ".", "label_mapper", "=", "np", ".", "arange", "(", "60", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "self", ".", "original_label", ")", ":", "\n", "            ", "self", ".", "label_mapper", "[", "l", "]", "=", "i", "\n", "", "self", ".", "mapped_left_right_pairs", "=", "self", ".", "label_mapper", "[", "self", ".", "left_right_pairs", "]", "\n", "\n", "self", ".", "multi_scale", "=", "multi_scale", "\n", "self", ".", "flip", "=", "flip", "\n", "with", "open", "(", "self", ".", "list_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "]", "\n", "self", ".", "img_list", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "l", ")", "for", "l", "in", "lines", "]", "\n", "\n", "", "self", ".", "files", "=", "self", ".", "read_files", "(", ")", "\n", "if", "num_samples", ":", "\n", "            ", "self", ".", "files", "=", "self", ".", "files", "[", ":", "num_samples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_rgb.NTURGBDRGB.read_files": [[115, 130], ["image_path.split", "files.append"], "methods", ["None"], ["", "", "def", "read_files", "(", "self", ")", ":", "\n", "        ", "files", "=", "[", "]", "\n", "for", "image_path", "in", "self", ".", "img_list", ":", "\n", "            ", "splitpath", "=", "image_path", ".", "split", "(", "'/'", ")", "\n", "splitpath", "[", "-", "2", "]", "=", "'png_annotation_v2'", "\n", "label_path", "=", "'/'", ".", "join", "(", "splitpath", ")", "\n", "label_path", "=", "label_path", "[", ":", "-", "3", "]", "+", "'png'", "\n", "name", "=", "splitpath", "[", "-", "1", "]", "\n", "sample", "=", "{", "\n", "'img'", ":", "image_path", ",", "\n", "'label'", ":", "label_path", ",", "\n", "'name'", ":", "name", "\n", "}", "\n", "files", ".", "append", "(", "sample", ")", "\n", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_rgb.NTURGBDRGB.resize_image": [[131, 135], ["cv2.resize", "cv2.resize"], "methods", ["None"], ["", "def", "resize_image", "(", "self", ",", "image", ",", "label", ",", "size", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "size", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "size", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_rgb.NTURGBDRGB.__getitem__": [[136, 174], ["cv2.imread", "numpy.array", "nturgbd_rgb.NTURGBDRGB.resize_image", "nturgbd_rgb.NTURGBDRGB.gen_sample", "PIL.Image.open", "cv2.resize", "cv2.resize", "nturgbd_rgb.NTURGBDRGB.input_transform", "image.transpose.transpose.transpose", "image.transpose.transpose.copy", "cv2.resize.copy", "numpy.array", "image.transpose.transpose.copy", "cv2.resize.copy", "numpy.array", "nturgbd_rgb.NTURGBDRGB.mapped_left_right_pairs[].reshape", "nturgbd_rgb.NTURGBDRGB.mapped_left_right_pairs[].reshape", "range", "numpy.random.choice", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.resize_image", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.gen_sample", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.input_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "files", "[", "index", "]", "\n", "name", "=", "item", "[", "\"name\"", "]", "\n", "\n", "image", "=", "cv2", ".", "imread", "(", "item", "[", "'img'", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "item", "[", "'label'", "]", ")", ")", "\n", "label", "=", "self", ".", "label_mapper", "[", "label", "]", "\n", "\n", "size", "=", "label", ".", "shape", "\n", "\n", "if", "'val'", "in", "self", ".", "list_path", ":", "\n", "            ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "self", ".", "crop_size", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "(", "1000", ",", "1000", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR_EXACT", ")", "\n", "image", "=", "self", ".", "input_transform", "(", "image", ")", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n", "", "if", "self", ".", "flip", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ":", "flip", ",", ":", "]", "\n", "label", "=", "label", "[", ":", ",", ":", ":", "flip", "]", "\n", "\n", "if", "flip", "==", "-", "1", ":", "\n", "                ", "left_idx", "=", "self", ".", "mapped_left_right_pairs", "[", ":", ",", "0", "]", ".", "reshape", "(", "-", "1", ")", "\n", "right_idx", "=", "self", ".", "mapped_left_right_pairs", "[", ":", ",", "1", "]", ".", "reshape", "(", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "mapped_left_right_pairs", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "right_pos", "=", "np", ".", "where", "(", "label", "==", "right_idx", "[", "i", "]", ")", "\n", "left_pos", "=", "np", ".", "where", "(", "label", "==", "left_idx", "[", "i", "]", ")", "\n", "label", "[", "right_pos", "[", "0", "]", ",", "right_pos", "[", "1", "]", "]", "=", "left_idx", "[", "i", "]", "\n", "label", "[", "left_pos", "[", "0", "]", ",", "left_pos", "[", "1", "]", "]", "=", "right_idx", "[", "i", "]", "\n", "\n", "", "", "", "image", ",", "label", "=", "self", ".", "resize_image", "(", "image", ",", "label", ",", "self", ".", "crop_size", ")", "\n", "image", ",", "label", "=", "self", ".", "gen_sample", "(", "image", ",", "label", ",", "\n", "self", ".", "multi_scale", ",", "False", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_rgb.NTURGBDRGB.inference": [[175, 196], ["image.size", "model", "torch.nn.functional.upsample", "torch.nn.functional.upsample.exp", "model", "torch.nn.functional.upsample", "flip_output.cpu().numpy.cpu().numpy.cpu().numpy", "flip_output.cpu().numpy.cpu().numpy.copy", "torch.from_numpy().cuda", "image.numpy", "torch.from_numpy", "flip_img.copy", "flip_output.cpu().numpy.cpu().numpy.cpu", "torch.from_numpy", "flip_pred[].copy"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "def", "inference", "(", "self", ",", "model", ",", "image", ",", "flip", ")", ":", "\n", "        ", "size", "=", "image", ".", "size", "(", ")", "\n", "pred", "=", "model", "(", "image", ")", "\n", "pred", "=", "F", ".", "upsample", "(", "input", "=", "pred", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "if", "flip", ":", "\n", "            ", "flip_img", "=", "image", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "flip_output", "=", "model", "(", "torch", ".", "from_numpy", "(", "flip_img", ".", "copy", "(", ")", ")", ")", "\n", "flip_output", "=", "F", ".", "upsample", "(", "input", "=", "flip_output", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "flip_output", "=", "flip_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flip_pred", "=", "flip_output", ".", "copy", "(", ")", "\n", "for", "pair", "in", "self", ".", "mapped_left_right_pairs", ":", "\n", "                ", "flip_pred", "[", ":", ",", "pair", "[", "0", "]", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "pair", "[", "1", "]", ",", ":", ",", ":", "]", "\n", "flip_pred", "[", ":", ",", "pair", "[", "1", "]", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "pair", "[", "0", "]", ",", ":", ",", ":", "]", "\n", "", "flip_pred", "=", "torch", ".", "from_numpy", "(", "flip_pred", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "pred", "+=", "flip_pred", "\n", "pred", "=", "pred", "*", "0.5", "\n", "", "return", "pred", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.lip.LIP.__init__": [[18, 49], ["base_dataset.BaseDataset.__init__", "lip.LIP.read_files", "line.strip().split", "open", "line.strip"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.read_files"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "list_path", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "20", ",", "\n", "multi_scale", "=", "True", ",", "\n", "flip", "=", "True", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "base_size", "=", "473", ",", "\n", "crop_size", "=", "(", "473", ",", "473", ")", ",", "\n", "downsample_rate", "=", "1", ",", "\n", "scale_factor", "=", "11", ",", "\n", "center_crop_test", "=", "False", ",", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "\n", "        ", "super", "(", "LIP", ",", "self", ")", ".", "__init__", "(", "ignore_label", ",", "base_size", ",", "\n", "crop_size", ",", "downsample_rate", ",", "scale_factor", ",", "mean", ",", "std", ")", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "class_weights", "=", "None", "\n", "\n", "self", ".", "multi_scale", "=", "multi_scale", "\n", "self", ".", "flip", "=", "flip", "\n", "self", ".", "img_list", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "line", "in", "open", "(", "root", "+", "list_path", ")", "]", "\n", "\n", "self", ".", "files", "=", "self", ".", "read_files", "(", ")", "\n", "if", "num_samples", ":", "\n", "            ", "self", ".", "files", "=", "self", ".", "files", "[", ":", "num_samples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.lip.LIP.read_files": [[50, 60], ["files.append", "os.path.splitext", "os.path.basename"], "methods", ["None"], ["", "", "def", "read_files", "(", "self", ")", ":", "\n", "        ", "files", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "img_list", ":", "\n", "            ", "image_path", ",", "label_path", "=", "item", "[", ":", "2", "]", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "label_path", ")", ")", "[", "0", "]", "\n", "sample", "=", "{", "\"img\"", ":", "image_path", ",", "\n", "\"label\"", ":", "label_path", ",", "\n", "\"name\"", ":", "name", ",", "}", "\n", "files", ".", "append", "(", "sample", ")", "\n", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.lip.LIP.resize_image": [[61, 65], ["cv2.resize", "cv2.resize"], "methods", ["None"], ["", "def", "resize_image", "(", "self", ",", "image", ",", "label", ",", "size", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "size", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "size", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.lip.LIP.__getitem__": [[66, 106], ["cv2.imread", "cv2.imread", "lip.LIP.resize_image", "lip.LIP.gen_sample", "os.path.join", "os.path.join", "cv2.resize", "lip.LIP.input_transform", "image.transpose.transpose.transpose", "image.transpose.transpose.copy", "cv2.imread.copy", "numpy.array", "image.transpose.transpose.copy", "cv2.imread.copy", "numpy.array", "range", "numpy.random.choice", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.resize_image", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.gen_sample", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.input_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "files", "[", "index", "]", "\n", "name", "=", "item", "[", "\"name\"", "]", "\n", "\n", "image", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "'lip/TrainVal_images/'", ",", "item", "[", "\"img\"", "]", ")", ",", "\n", "cv2", ".", "IMREAD_COLOR", ")", "\n", "label", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "'lip/TrainVal_parsing_annotations/'", ",", "\n", "item", "[", "\"label\"", "]", ")", ",", "\n", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "size", "=", "label", ".", "shape", "\n", "\n", "if", "'testval'", "in", "self", ".", "list_path", ":", "\n", "            ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "self", ".", "crop_size", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "image", "=", "self", ".", "input_transform", "(", "image", ")", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n", "", "if", "self", ".", "flip", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ":", "flip", ",", ":", "]", "\n", "label", "=", "label", "[", ":", ",", ":", ":", "flip", "]", "\n", "\n", "if", "flip", "==", "-", "1", ":", "\n", "                ", "right_idx", "=", "[", "15", ",", "17", ",", "19", "]", "\n", "left_idx", "=", "[", "14", ",", "16", ",", "18", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                    ", "right_pos", "=", "np", ".", "where", "(", "label", "==", "right_idx", "[", "i", "]", ")", "\n", "left_pos", "=", "np", ".", "where", "(", "label", "==", "left_idx", "[", "i", "]", ")", "\n", "label", "[", "right_pos", "[", "0", "]", ",", "right_pos", "[", "1", "]", "]", "=", "left_idx", "[", "i", "]", "\n", "label", "[", "left_pos", "[", "0", "]", ",", "left_pos", "[", "1", "]", "]", "=", "right_idx", "[", "i", "]", "\n", "\n", "", "", "", "image", ",", "label", "=", "self", ".", "resize_image", "(", "image", ",", "label", ",", "self", ".", "crop_size", ")", "\n", "image", ",", "label", "=", "self", ".", "gen_sample", "(", "image", ",", "label", ",", "\n", "self", ".", "multi_scale", ",", "False", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.lip.LIP.inference": [[107, 131], ["image.size", "model", "torch.nn.functional.upsample", "torch.nn.functional.upsample.exp", "model", "torch.nn.functional.upsample", "flip_output.cpu().numpy.cpu().numpy.cpu().numpy", "flip_output.cpu().numpy.cpu().numpy.copy", "torch.from_numpy().cuda", "image.numpy", "torch.from_numpy", "flip_img.copy", "flip_output.cpu().numpy.cpu().numpy.cpu", "torch.from_numpy", "flip_pred[].copy"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "def", "inference", "(", "self", ",", "model", ",", "image", ",", "flip", ")", ":", "\n", "        ", "size", "=", "image", ".", "size", "(", ")", "\n", "pred", "=", "model", "(", "image", ")", "\n", "pred", "=", "F", ".", "upsample", "(", "input", "=", "pred", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "if", "flip", ":", "\n", "            ", "flip_img", "=", "image", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "flip_output", "=", "model", "(", "torch", ".", "from_numpy", "(", "flip_img", ".", "copy", "(", ")", ")", ")", "\n", "flip_output", "=", "F", ".", "upsample", "(", "input", "=", "flip_output", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "flip_output", "=", "flip_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flip_pred", "=", "flip_output", ".", "copy", "(", ")", "\n", "flip_pred", "[", ":", ",", "14", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "15", ",", ":", ",", ":", "]", "\n", "flip_pred", "[", ":", ",", "15", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "14", ",", ":", ",", ":", "]", "\n", "flip_pred", "[", ":", ",", "16", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "17", ",", ":", ",", ":", "]", "\n", "flip_pred", "[", ":", ",", "17", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "16", ",", ":", ",", ":", "]", "\n", "flip_pred", "[", ":", ",", "18", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "19", ",", ":", ",", ":", "]", "\n", "flip_pred", "[", ":", ",", "19", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "18", ",", ":", ",", ":", "]", "\n", "flip_pred", "=", "torch", ".", "from_numpy", "(", "flip_pred", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "pred", "+=", "flip_pred", "\n", "pred", "=", "pred", "*", "0.5", "\n", "", "return", "pred", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.pascal_ctx.PASCALContext.__init__": [[20, 77], ["base_dataset.BaseDataset.__init__", "os.path.join", "os.path.join", "os.path.join", "pascal_ctx.PASCALContext.detail.getImgs", "numpy.sort", "print", "os.path.exists", "Detail", "os.path.join", "numpy.array", "torch.load", "pascal_ctx.PASCALContext._preprocess", "Detail", "os.path.join", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.pascal_ctx.PASCALContext._preprocess"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "list_path", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "59", ",", "\n", "multi_scale", "=", "True", ",", "\n", "flip", "=", "True", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "base_size", "=", "520", ",", "\n", "crop_size", "=", "(", "480", ",", "480", ")", ",", "\n", "downsample_rate", "=", "1", ",", "\n", "scale_factor", "=", "16", ",", "\n", "center_crop_test", "=", "False", ",", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", ")", ":", "\n", "\n", "        ", "super", "(", "PASCALContext", ",", "self", ")", ".", "__init__", "(", "ignore_label", ",", "base_size", ",", "\n", "crop_size", ",", "downsample_rate", ",", "scale_factor", ",", "mean", ",", "std", ")", "\n", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'pascal_ctx/VOCdevkit/VOC2010'", ")", "\n", "self", ".", "split", "=", "list_path", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "class_weights", "=", "None", "\n", "\n", "self", ".", "multi_scale", "=", "multi_scale", "\n", "self", ".", "flip", "=", "flip", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n", "# prepare data", "\n", "annots", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'trainval_merged.json'", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'JPEGImages'", ")", "\n", "from", "detail", "import", "Detail", "\n", "if", "'val'", "in", "self", ".", "split", ":", "\n", "            ", "self", ".", "detail", "=", "Detail", "(", "annots", ",", "img_path", ",", "'val'", ")", "\n", "mask_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'val.pth'", ")", "\n", "", "elif", "'train'", "in", "self", ".", "split", ":", "\n", "            ", "self", ".", "mode", "=", "'train'", "\n", "self", ".", "detail", "=", "Detail", "(", "annots", ",", "img_path", ",", "'train'", ")", "\n", "mask_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'train.pth'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'only supporting train and val set.'", ")", "\n", "", "self", ".", "files", "=", "self", ".", "detail", ".", "getImgs", "(", ")", "\n", "\n", "# generate masks", "\n", "self", ".", "_mapping", "=", "np", ".", "sort", "(", "np", ".", "array", "(", "[", "\n", "0", ",", "2", ",", "259", ",", "260", ",", "415", ",", "324", ",", "9", ",", "258", ",", "144", ",", "18", ",", "19", ",", "22", ",", "\n", "23", ",", "397", ",", "25", ",", "284", ",", "158", ",", "159", ",", "416", ",", "33", ",", "162", ",", "420", ",", "454", ",", "295", ",", "296", ",", "\n", "427", ",", "44", ",", "45", ",", "46", ",", "308", ",", "59", ",", "440", ",", "445", ",", "31", ",", "232", ",", "65", ",", "354", ",", "424", ",", "\n", "68", ",", "326", ",", "72", ",", "458", ",", "34", ",", "207", ",", "80", ",", "355", ",", "85", ",", "347", ",", "220", ",", "349", ",", "360", ",", "\n", "98", ",", "187", ",", "104", ",", "105", ",", "366", ",", "189", ",", "368", ",", "113", ",", "115", "]", ")", ")", "\n", "\n", "print", "(", "'mask_file:'", ",", "mask_file", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "mask_file", ")", ":", "\n", "            ", "self", ".", "masks", "=", "torch", ".", "load", "(", "mask_file", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "masks", "=", "self", ".", "_preprocess", "(", "mask_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.pascal_ctx.PASCALContext._class_to_index": [[78, 85], ["numpy.unique", "range", "numpy.digitize", "pascal_ctx.PASCALContext._key[].reshape", "len", "mask.ravel"], "methods", ["None"], ["", "", "def", "_class_to_index", "(", "self", ",", "mask", ")", ":", "\n", "# assert the values", "\n", "        ", "values", "=", "np", ".", "unique", "(", "mask", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "values", ")", ")", ":", "\n", "            ", "assert", "(", "values", "[", "i", "]", "in", "self", ".", "_mapping", ")", "\n", "", "index", "=", "np", ".", "digitize", "(", "mask", ".", "ravel", "(", ")", ",", "self", ".", "_mapping", ",", "right", "=", "True", ")", "\n", "return", "self", ".", "_key", "[", "index", "]", ".", "reshape", "(", "mask", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.pascal_ctx.PASCALContext._preprocess": [[86, 97], ["print", "range", "torch.save", "len", "PIL.Image.fromarray", "pascal_ctx.PASCALContext._class_to_index", "pascal_ctx.PASCALContext.detail.getMask"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.pascal_ctx.PASCALContext._class_to_index"], ["", "def", "_preprocess", "(", "self", ",", "mask_file", ")", ":", "\n", "        ", "masks", "=", "{", "}", "\n", "print", "(", "\"Preprocessing mask, this will take a while.\"", "+", "\"But don't worry, it only run once for each split.\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "files", ")", ")", ":", "\n", "            ", "img_id", "=", "self", ".", "files", "[", "i", "]", "\n", "mask", "=", "Image", ".", "fromarray", "(", "self", ".", "_class_to_index", "(", "\n", "self", ".", "detail", ".", "getMask", "(", "img_id", ")", ")", ")", "\n", "masks", "[", "img_id", "[", "'image_id'", "]", "]", "=", "mask", "\n", "", "torch", ".", "save", "(", "masks", ",", "mask_file", ")", "\n", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.pascal_ctx.PASCALContext.__getitem__": [[98, 127], ["cv2.imread", "numpy.asarray", "os.path.join", "cv2.resize", "pascal_ctx.PASCALContext.input_transform", "image.transpose.transpose.transpose", "cv2.resize", "pascal_ctx.PASCALContext.label_transform", "image.transpose.transpose.copy", "pascal_ctx.PASCALContext.copy", "numpy.array", "pascal_ctx.PASCALContext.input_transform", "image.transpose.transpose.transpose", "pascal_ctx.PASCALContext.label_transform", "pascal_ctx.PASCALContext.gen_sample"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.input_transform", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.label_transform", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.input_transform", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.label_transform", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.gen_sample"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "files", "[", "index", "]", "\n", "name", "=", "item", "[", "'file_name'", "]", "\n", "img_id", "=", "item", "[", "'image_id'", "]", "\n", "\n", "image", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "detail", ".", "img_folder", ",", "name", ")", ",", "\n", "cv2", ".", "IMREAD_COLOR", ")", "\n", "label", "=", "np", ".", "asarray", "(", "self", ".", "masks", "[", "img_id", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "size", "=", "image", ".", "shape", "\n", "\n", "if", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "self", ".", "crop_size", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "image", "=", "self", ".", "input_transform", "(", "image", ")", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "self", ".", "crop_size", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "label", "=", "self", ".", "label_transform", "(", "label", ")", "\n", "", "elif", "self", ".", "split", "==", "'testval'", ":", "\n", "# evaluate model on val dataset", "\n", "            ", "image", "=", "self", ".", "input_transform", "(", "image", ")", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "label", "=", "self", ".", "label_transform", "(", "label", ")", "\n", "", "else", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "gen_sample", "(", "image", ",", "label", ",", "\n", "self", ".", "multi_scale", ",", "self", ".", "flip", ")", "\n", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.pascal_ctx.PASCALContext.label_transform": [[128, 136], ["numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "label_transform", "(", "self", ",", "label", ")", ":", "\n", "        ", "if", "self", ".", "num_classes", "==", "59", ":", "\n", "# background is ignored", "\n", "            ", "label", "=", "np", ".", "array", "(", "label", ")", ".", "astype", "(", "'int32'", ")", "-", "1", "\n", "label", "[", "label", "==", "-", "2", "]", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "label", "=", "np", ".", "array", "(", "label", ")", ".", "astype", "(", "'int32'", ")", "\n", "", "return", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.cityscapes.Cityscapes.__init__": [[19, 69], ["base_dataset.BaseDataset.__init__", "torch.FloatTensor().cuda", "cityscapes.Cityscapes.read_files", "line.strip().split", "torch.FloatTensor", "open", "line.strip"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.read_files"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "list_path", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "19", ",", "\n", "multi_scale", "=", "True", ",", "\n", "flip", "=", "True", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "base_size", "=", "2048", ",", "\n", "crop_size", "=", "(", "512", ",", "1024", ")", ",", "\n", "center_crop_test", "=", "False", ",", "\n", "downsample_rate", "=", "1", ",", "\n", "scale_factor", "=", "16", ",", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "\n", "        ", "super", "(", "Cityscapes", ",", "self", ")", ".", "__init__", "(", "ignore_label", ",", "base_size", ",", "\n", "crop_size", ",", "downsample_rate", ",", "scale_factor", ",", "mean", ",", "std", ",", ")", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "class_weights", "=", "torch", ".", "FloatTensor", "(", "[", "0.8373", ",", "0.918", ",", "0.866", ",", "1.0345", ",", "\n", "1.0166", ",", "0.9969", ",", "0.9754", ",", "1.0489", ",", "\n", "0.8786", ",", "1.0023", ",", "0.9539", ",", "0.9843", ",", "\n", "1.1116", ",", "0.9037", ",", "1.0865", ",", "1.0955", ",", "\n", "1.0865", ",", "1.1529", ",", "1.0507", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "multi_scale", "=", "multi_scale", "\n", "self", ".", "flip", "=", "flip", "\n", "self", ".", "center_crop_test", "=", "center_crop_test", "\n", "\n", "self", ".", "img_list", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "line", "in", "open", "(", "root", "+", "list_path", ")", "]", "\n", "\n", "self", ".", "files", "=", "self", ".", "read_files", "(", ")", "\n", "if", "num_samples", ":", "\n", "            ", "self", ".", "files", "=", "self", ".", "files", "[", ":", "num_samples", "]", "\n", "\n", "", "self", ".", "label_mapping", "=", "{", "-", "1", ":", "ignore_label", ",", "0", ":", "ignore_label", ",", "\n", "1", ":", "ignore_label", ",", "2", ":", "ignore_label", ",", "\n", "3", ":", "ignore_label", ",", "4", ":", "ignore_label", ",", "\n", "5", ":", "ignore_label", ",", "6", ":", "ignore_label", ",", "\n", "7", ":", "0", ",", "8", ":", "1", ",", "9", ":", "ignore_label", ",", "\n", "10", ":", "ignore_label", ",", "11", ":", "2", ",", "12", ":", "3", ",", "\n", "13", ":", "4", ",", "14", ":", "ignore_label", ",", "15", ":", "ignore_label", ",", "\n", "16", ":", "ignore_label", ",", "17", ":", "5", ",", "18", ":", "ignore_label", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "\n", "25", ":", "12", ",", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "\n", "29", ":", "ignore_label", ",", "30", ":", "ignore_label", ",", "\n", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.cityscapes.Cityscapes.read_files": [[70, 91], ["files.append", "files.append", "os.path.splitext", "os.path.splitext", "os.path.basename", "os.path.basename"], "methods", ["None"], ["", "def", "read_files", "(", "self", ")", ":", "\n", "        ", "files", "=", "[", "]", "\n", "if", "'test'", "in", "self", ".", "list_path", ":", "\n", "            ", "for", "item", "in", "self", ".", "img_list", ":", "\n", "                ", "image_path", "=", "item", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "image_path", "[", "0", "]", ")", ")", "[", "0", "]", "\n", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "image_path", "[", "0", "]", ",", "\n", "\"name\"", ":", "name", ",", "\n", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "item", "in", "self", ".", "img_list", ":", "\n", "                ", "image_path", ",", "label_path", "=", "item", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "label_path", ")", ")", "[", "0", "]", "\n", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "image_path", ",", "\n", "\"label\"", ":", "label_path", ",", "\n", "\"name\"", ":", "name", ",", "\n", "\"weight\"", ":", "1", "\n", "}", ")", "\n", "", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.cityscapes.Cityscapes.convert_label": [[92, 101], ["label.copy", "cityscapes.Cityscapes.label_mapping.items", "cityscapes.Cityscapes.label_mapping.items"], "methods", ["None"], ["", "def", "convert_label", "(", "self", ",", "label", ",", "inverse", "=", "False", ")", ":", "\n", "        ", "temp", "=", "label", ".", "copy", "(", ")", "\n", "if", "inverse", ":", "\n", "            ", "for", "v", ",", "k", "in", "self", ".", "label_mapping", ".", "items", "(", ")", ":", "\n", "                ", "label", "[", "temp", "==", "k", "]", "=", "v", "\n", "", "", "else", ":", "\n", "            ", "for", "k", ",", "v", "in", "self", ".", "label_mapping", ".", "items", "(", ")", ":", "\n", "                ", "label", "[", "temp", "==", "k", "]", "=", "v", "\n", "", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.cityscapes.Cityscapes.__getitem__": [[102, 124], ["cv2.imread", "cv2.imread", "cityscapes.Cityscapes.convert_label", "cityscapes.Cityscapes.gen_sample", "os.path.join", "cityscapes.Cityscapes.input_transform", "image.transpose.transpose.transpose", "os.path.join", "image.transpose.transpose.copy", "cityscapes.Cityscapes.copy", "numpy.array", "image.transpose.transpose.copy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.convert_label", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.gen_sample", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.input_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "files", "[", "index", "]", "\n", "name", "=", "item", "[", "\"name\"", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'cityscapes'", ",", "item", "[", "\"img\"", "]", ")", ",", "\n", "cv2", ".", "IMREAD_COLOR", ")", "\n", "size", "=", "image", ".", "shape", "\n", "\n", "if", "'test'", "in", "self", ".", "list_path", ":", "\n", "            ", "image", "=", "self", ".", "input_transform", "(", "image", ")", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n", "", "label", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'cityscapes'", ",", "item", "[", "\"label\"", "]", ")", ",", "\n", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "label", "=", "self", ".", "convert_label", "(", "label", ")", "\n", "\n", "image", ",", "label", "=", "self", ".", "gen_sample", "(", "image", ",", "label", ",", "\n", "self", ".", "multi_scale", ",", "self", ".", "flip", ",", "\n", "self", ".", "center_crop_test", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.cityscapes.Cityscapes.multi_scale_inference": [[125, 176], ["[].transpose().copy.size", "[].transpose().copy", "numpy.int", "numpy.int", "torch.zeros().cuda", "cityscapes.Cityscapes.multi_scale_aug", "torch.nn.functional.upsample", "[].transpose", "torch.zeros", "torch.from_numpy.transpose", "numpy.expand_dims", "torch.from_numpy", "cityscapes.Cityscapes.inference", "torch.zeros().cuda", "torch.zeros().cuda", "range", "numpy.int", "numpy.int", "range", "numpy.ceil", "numpy.ceil", "torch.zeros", "torch.zeros", "min", "min", "max", "max", "torch.from_numpy.transpose", "numpy.expand_dims", "torch.from_numpy", "cityscapes.Cityscapes.inference", "[].transpose().copy.numpy", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.multi_scale_aug", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.inference", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.inference"], ["", "def", "multi_scale_inference", "(", "self", ",", "model", ",", "image", ",", "scales", "=", "[", "1", "]", ",", "flip", "=", "False", ")", ":", "\n", "        ", "batch", ",", "_", ",", "ori_height", ",", "ori_width", "=", "image", ".", "size", "(", ")", "\n", "assert", "batch", "==", "1", ",", "\"only supporting batchsize 1.\"", "\n", "image", "=", "image", ".", "numpy", "(", ")", "[", "0", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ".", "copy", "(", ")", "\n", "stride_h", "=", "np", ".", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "1.0", ")", "\n", "stride_w", "=", "np", ".", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "1.0", ")", "\n", "final_pred", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "num_classes", ",", "\n", "ori_height", ",", "ori_width", "]", ")", ".", "cuda", "(", ")", "\n", "for", "scale", "in", "scales", ":", "\n", "            ", "new_img", "=", "self", ".", "multi_scale_aug", "(", "image", "=", "image", ",", "\n", "rand_scale", "=", "scale", ",", "\n", "rand_crop", "=", "False", ")", "\n", "height", ",", "width", "=", "new_img", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "if", "scale", "<=", "1.0", ":", "\n", "                ", "new_img", "=", "new_img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "new_img", "=", "np", ".", "expand_dims", "(", "new_img", ",", "axis", "=", "0", ")", "\n", "new_img", "=", "torch", ".", "from_numpy", "(", "new_img", ")", "\n", "preds", "=", "self", ".", "inference", "(", "model", ",", "new_img", ",", "flip", ")", "\n", "preds", "=", "preds", "[", ":", ",", ":", ",", "0", ":", "height", ",", "0", ":", "width", "]", "\n", "", "else", ":", "\n", "                ", "new_h", ",", "new_w", "=", "new_img", ".", "shape", "[", ":", "-", "1", "]", "\n", "rows", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "1.0", "*", "(", "new_h", "-", "\n", "self", ".", "crop_size", "[", "0", "]", ")", "/", "stride_h", ")", ")", "+", "1", "\n", "cols", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "1.0", "*", "(", "new_w", "-", "\n", "self", ".", "crop_size", "[", "1", "]", ")", "/", "stride_w", ")", ")", "+", "1", "\n", "preds", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "num_classes", ",", "\n", "new_h", ",", "new_w", "]", ")", ".", "cuda", "(", ")", "\n", "count", "=", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "new_h", ",", "new_w", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "r", "in", "range", "(", "rows", ")", ":", "\n", "                    ", "for", "c", "in", "range", "(", "cols", ")", ":", "\n", "                        ", "h0", "=", "r", "*", "stride_h", "\n", "w0", "=", "c", "*", "stride_w", "\n", "h1", "=", "min", "(", "h0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "new_h", ")", "\n", "w1", "=", "min", "(", "w0", "+", "self", ".", "crop_size", "[", "1", "]", ",", "new_w", ")", "\n", "h0", "=", "max", "(", "int", "(", "h1", "-", "self", ".", "crop_size", "[", "0", "]", ")", ",", "0", ")", "\n", "w0", "=", "max", "(", "int", "(", "w1", "-", "self", ".", "crop_size", "[", "1", "]", ")", ",", "0", ")", "\n", "crop_img", "=", "new_img", "[", "h0", ":", "h1", ",", "w0", ":", "w1", ",", ":", "]", "\n", "crop_img", "=", "crop_img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "crop_img", "=", "np", ".", "expand_dims", "(", "crop_img", ",", "axis", "=", "0", ")", "\n", "crop_img", "=", "torch", ".", "from_numpy", "(", "crop_img", ")", "\n", "pred", "=", "self", ".", "inference", "(", "model", ",", "crop_img", ",", "flip", ")", "\n", "preds", "[", ":", ",", ":", ",", "h0", ":", "h1", ",", "w0", ":", "w1", "]", "+=", "pred", "[", ":", ",", ":", ",", "0", ":", "h1", "-", "h0", ",", "0", ":", "w1", "-", "w0", "]", "\n", "count", "[", ":", ",", ":", ",", "h0", ":", "h1", ",", "w0", ":", "w1", "]", "+=", "1", "\n", "", "", "preds", "=", "preds", "/", "count", "\n", "preds", "=", "preds", "[", ":", ",", ":", ",", ":", "height", ",", ":", "width", "]", "\n", "", "preds", "=", "F", ".", "upsample", "(", "preds", ",", "(", "ori_height", ",", "ori_width", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "final_pred", "+=", "preds", "\n", "", "return", "final_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.cityscapes.Cityscapes.get_palette": [[177, 192], ["range"], "methods", ["None"], ["", "def", "get_palette", "(", "self", ",", "n", ")", ":", "\n", "        ", "palette", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "            ", "lab", "=", "j", "\n", "palette", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "lab", ":", "\n", "                ", "palette", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "+=", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.cityscapes.Cityscapes.save_pred": [[193, 202], ["cityscapes.Cityscapes.get_palette", "numpy.asarray.cpu().numpy().copy", "numpy.asarray", "range", "numpy.argmax", "cityscapes.Cityscapes.convert_label", "PIL.Image.fromarray", "PIL.Image.fromarray.putpalette", "PIL.Image.fromarray.save", "numpy.asarray.cpu().numpy", "os.path.join", "numpy.asarray.cpu"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.get_palette", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.convert_label", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save"], ["", "def", "save_pred", "(", "self", ",", "preds", ",", "sv_path", ",", "name", ")", ":", "\n", "        ", "palette", "=", "self", ".", "get_palette", "(", "256", ")", "\n", "preds", "=", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "preds", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "preds", ",", "axis", "=", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "pred", "=", "self", ".", "convert_label", "(", "preds", "[", "i", "]", ",", "inverse", "=", "True", ")", "\n", "save_img", "=", "Image", ".", "fromarray", "(", "pred", ")", "\n", "save_img", ".", "putpalette", "(", "palette", ")", "\n", "save_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "sv_path", ",", "name", "[", "i", "]", "+", "'.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.__init__": [[61, 118], ["base_dataset.BaseDataset.__init__", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.arange", "enumerate", "nturgbd_d.NTURGBDD.read_files", "numpy.array().astype", "open", "l.strip", "os.path.join", "numpy.array", "f.readlines"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.read_files"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "list_path", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "25", ",", "\n", "multi_scale", "=", "True", ",", "\n", "flip", "=", "True", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "base_size", "=", "473", ",", "\n", "crop_size", "=", "(", "473", ",", "473", ")", ",", "\n", "downsample_rate", "=", "1", ",", "\n", "scale_factor", "=", "11", ",", "\n", "center_crop_test", "=", "False", ",", "\n", "mean", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "std", "=", "[", "1", ",", "1", ",", "1", "]", ")", ":", "\n", "\n", "        ", "super", "(", "NTURGBDD", ",", "self", ")", ".", "__init__", "(", "ignore_label", ",", "base_size", ",", "\n", "crop_size", ",", "downsample_rate", ",", "scale_factor", ",", "mean", ",", "std", ")", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "list_path", "=", "list_path", "\n", "\n", "# self.class_weights = None", "\n", "# v1 train statistics", "\n", "# weights = [1.453,49.297,49.219,47.848,49.313,49.235,47.818,49.520,49.960,49.140,49.468,49.995,49.167,49.194,45.048,46.354,45.038,46.415,43.543,41.302,43.245,48.408,48.542,48.298,48.659]", "\n", "weights", "=", "[", "1.448", ",", "49.234", ",", "49.483", ",", "48.030", ",", "49.247", ",", "49.492", ",", "48.018", ",", "49.704", ",", "50.052", ",", "49.369", ",", "49.694", ",", "50.090", ",", "49.425", ",", "49.459", ",", "45.846", ",", "47.156", ",", "45.868", ",", "47.197", ",", "44.167", ",", "42.789", ",", "44.341", ",", "48.632", ",", "48.873", ",", "48.644", ",", "49.004", "]", "\n", "self", ".", "class_weights", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "weights", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "self", ".", "left_right_pairs", "=", "np", ".", "array", "(", "\n", "[", "[", "1", ",", "6", "]", ",", "\n", "[", "2", ",", "7", "]", ",", "\n", "[", "3", ",", "8", "]", ",", "\n", "[", "17", ",", "25", "]", ",", "\n", "[", "18", ",", "26", "]", ",", "\n", "[", "19", ",", "27", "]", ",", "\n", "[", "33", ",", "38", "]", ",", "\n", "[", "34", ",", "39", "]", ",", "\n", "[", "49", ",", "56", "]", ",", "\n", "[", "50", ",", "58", "]", "]", "\n", ")", "\n", "\n", "self", ".", "original_label", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "6", ",", "7", ",", "8", ",", "17", ",", "18", ",", "19", ",", "25", ",", "26", ",", "27", ",", "32", ",", "33", ",", "34", ",", "38", ",", "39", ",", "43", ",", "44", ",", "46", ",", "49", ",", "50", ",", "56", ",", "58", "]", ")", "\n", "self", ".", "label_mapper", "=", "np", ".", "arange", "(", "60", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "self", ".", "original_label", ")", ":", "\n", "            ", "self", ".", "label_mapper", "[", "l", "]", "=", "i", "\n", "", "self", ".", "mapped_left_right_pairs", "=", "self", ".", "label_mapper", "[", "self", ".", "left_right_pairs", "]", "\n", "\n", "self", ".", "multi_scale", "=", "multi_scale", "\n", "self", ".", "flip", "=", "flip", "\n", "with", "open", "(", "self", ".", "list_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "]", "\n", "self", ".", "img_list", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "l", ")", "for", "l", "in", "lines", "]", "\n", "\n", "", "self", ".", "files", "=", "self", ".", "read_files", "(", ")", "\n", "if", "num_samples", ":", "\n", "            ", "self", ".", "files", "=", "self", ".", "files", "[", ":", "num_samples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.read_files": [[119, 137], ["image_path.split", "files.append"], "methods", ["None"], ["", "", "def", "read_files", "(", "self", ")", ":", "\n", "        ", "files", "=", "[", "]", "\n", "for", "image_path", "in", "self", ".", "img_list", ":", "\n", "            ", "splitpath", "=", "image_path", ".", "split", "(", "'/'", ")", "\n", "splitpath", "[", "-", "2", "]", "=", "'png_annotation_v2'", "\n", "label_path", "=", "'/'", ".", "join", "(", "splitpath", ")", "\n", "label_path", "=", "label_path", "[", ":", "-", "3", "]", "+", "'png'", "\n", "name", "=", "splitpath", "[", "-", "1", "]", "\n", "splitpath", "[", "-", "2", "]", "=", "'depth'", "\n", "splitpath", "[", "-", "1", "]", "=", "'MDepth-'", "+", "splitpath", "[", "-", "1", "]", "[", ":", "-", "3", "]", "+", "'png'", "\n", "depth_path", "=", "'/'", ".", "join", "(", "splitpath", ")", "\n", "sample", "=", "{", "\n", "'img'", ":", "depth_path", ",", "\n", "'label'", ":", "label_path", ",", "\n", "'name'", ":", "name", "\n", "}", "\n", "files", ".", "append", "(", "sample", ")", "\n", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.resize_image": [[138, 142], ["cv2.resize", "cv2.resize"], "methods", ["None"], ["", "def", "resize_image", "(", "self", ",", "image", ",", "label", ",", "size", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "size", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "size", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.process_depth_map": [[143, 156], ["numpy.stack", "image.transpose.transpose.transpose", "image.transpose.transpose.astype", "image.transpose.transpose.sum"], "methods", ["None"], ["", "def", "process_depth_map", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "/", "1000.0", "\n", "image", "=", "np", ".", "stack", "(", "[", "image", ",", "image", ",", "image", "]", ",", "-", "1", ")", "\n", "\n", "if", "(", "image", "!=", "0", ")", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "mean", "=", "0", "\n", "", "else", ":", "\n", "            ", "mean", "=", "image", ".", "sum", "(", ")", "/", "(", "image", "!=", "0", ")", ".", "sum", "(", ")", "\n", "", "image", "[", "image", "!=", "0", "]", "=", "image", "[", "image", "!=", "0", "]", "-", "mean", "\n", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.rand_crop": [[157, 171], ["nturgbd_d.NTURGBDD.pad_image", "nturgbd_d.NTURGBDD.pad_image", "random.randint", "random.randint"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.pad_image", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.pad_image"], ["", "def", "rand_crop", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "shape", "\n", "image", "=", "self", ".", "pad_image", "(", "image", ",", "h", ",", "w", ",", "self", ".", "crop_size", ",", "\n", "(", "0.0", ",", "0.0", ")", ")", "\n", "label", "=", "self", ".", "pad_image", "(", "label", ",", "h", ",", "w", ",", "self", ".", "crop_size", ",", "\n", "(", "self", ".", "ignore_label", ",", ")", ")", "\n", "\n", "new_h", ",", "new_w", "=", "label", ".", "shape", "\n", "x", "=", "random", ".", "randint", "(", "0", ",", "new_w", "-", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "new_h", "-", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "image", "=", "image", "[", "y", ":", "y", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x", ":", "x", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "label", "=", "label", "[", "y", ":", "y", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x", ":", "x", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.gen_sample": [[172, 200], ["nturgbd_d.NTURGBDD.process_depth_map", "nturgbd_d.NTURGBDD.label_transform", "nturgbd_d.NTURGBDD.multi_scale_aug", "nturgbd_d.NTURGBDD.image_resize", "nturgbd_d.NTURGBDD.center_crop", "cv2.resize", "random.randint", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.process_depth_map", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.label_transform", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.multi_scale_aug", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.image_resize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.center_crop"], ["", "def", "gen_sample", "(", "self", ",", "image", ",", "label", ",", "multi_scale", "=", "True", ",", "is_flip", "=", "True", ",", "center_crop_test", "=", "False", ")", ":", "\n", "        ", "if", "multi_scale", ":", "\n", "            ", "rand_scale", "=", "0.5", "+", "random", ".", "randint", "(", "0", ",", "self", ".", "scale_factor", ")", "/", "10.0", "\n", "image", ",", "label", "=", "self", ".", "multi_scale_aug", "(", "image", ",", "label", ",", "\n", "rand_scale", "=", "rand_scale", ")", "\n", "\n", "", "if", "center_crop_test", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "image_resize", "(", "image", ",", "\n", "self", ".", "base_size", ",", "\n", "label", ")", "\n", "image", ",", "label", "=", "self", ".", "center_crop", "(", "image", ",", "label", ")", "\n", "\n", "", "image", "=", "self", ".", "process_depth_map", "(", "image", ")", "\n", "label", "=", "self", ".", "label_transform", "(", "label", ")", "\n", "\n", "if", "is_flip", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "flip", "]", "\n", "label", "=", "label", "[", ":", ",", ":", ":", "flip", "]", "\n", "\n", "", "if", "self", ".", "downsample_rate", "!=", "1", ":", "\n", "            ", "label", "=", "cv2", ".", "resize", "(", "label", ",", "\n", "None", ",", "\n", "fx", "=", "self", ".", "downsample_rate", ",", "\n", "fy", "=", "self", ".", "downsample_rate", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.__getitem__": [[201, 238], ["cv2.imread().astype", "numpy.array", "nturgbd_d.NTURGBDD.resize_image", "nturgbd_d.NTURGBDD.gen_sample", "PIL.Image.open", "cv2.resize", "cv2.resize", "nturgbd_d.NTURGBDD.process_depth_map", "nturgbd_d.NTURGBDD.copy", "cv2.resize.copy", "numpy.array", "cv2.imread", "nturgbd_d.NTURGBDD.copy", "cv2.resize.copy", "numpy.array", "nturgbd_d.NTURGBDD.mapped_left_right_pairs[].reshape", "nturgbd_d.NTURGBDD.mapped_left_right_pairs[].reshape", "range", "numpy.random.choice", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.resize_image", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.gen_sample", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.process_depth_map"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "files", "[", "index", "]", "\n", "name", "=", "item", "[", "\"name\"", "]", "\n", "\n", "image", "=", "cv2", ".", "imread", "(", "item", "[", "'img'", "]", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "item", "[", "'label'", "]", ")", ")", "\n", "label", "=", "self", ".", "label_mapper", "[", "label", "]", "\n", "\n", "size", "=", "label", ".", "shape", "\n", "\n", "if", "'val'", "in", "self", ".", "list_path", ":", "\n", "            ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "self", ".", "crop_size", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "# label = cv2.resize(label, (1000, 1000), interpolation = cv2.INTER_LINEAR_EXACT)", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "(", "1000", ",", "1000", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "image", "=", "self", ".", "process_depth_map", "(", "image", ")", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n", "", "if", "self", ".", "flip", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ":", "flip", "]", "\n", "label", "=", "label", "[", ":", ",", ":", ":", "flip", "]", "\n", "\n", "if", "flip", "==", "-", "1", ":", "\n", "                ", "left_idx", "=", "self", ".", "mapped_left_right_pairs", "[", ":", ",", "0", "]", ".", "reshape", "(", "-", "1", ")", "\n", "right_idx", "=", "self", ".", "mapped_left_right_pairs", "[", ":", ",", "1", "]", ".", "reshape", "(", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "mapped_left_right_pairs", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "right_pos", "=", "np", ".", "where", "(", "label", "==", "right_idx", "[", "i", "]", ")", "\n", "left_pos", "=", "np", ".", "where", "(", "label", "==", "left_idx", "[", "i", "]", ")", "\n", "label", "[", "right_pos", "[", "0", "]", ",", "right_pos", "[", "1", "]", "]", "=", "left_idx", "[", "i", "]", "\n", "label", "[", "left_pos", "[", "0", "]", ",", "left_pos", "[", "1", "]", "]", "=", "right_idx", "[", "i", "]", "\n", "\n", "", "", "", "image", ",", "label", "=", "self", ".", "resize_image", "(", "image", ",", "label", ",", "self", ".", "crop_size", ")", "\n", "image", ",", "label", "=", "self", ".", "gen_sample", "(", "image", ",", "label", ",", "\n", "self", ".", "multi_scale", ",", "False", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.inference": [[239, 260], ["image.size", "model", "torch.nn.functional.upsample", "torch.nn.functional.upsample.exp", "model", "torch.nn.functional.upsample", "flip_output.cpu().numpy.cpu().numpy.cpu().numpy", "flip_output.cpu().numpy.cpu().numpy.copy", "torch.from_numpy().cuda", "image.numpy", "torch.from_numpy", "flip_img.copy", "flip_output.cpu().numpy.cpu().numpy.cpu", "torch.from_numpy", "flip_pred[].copy"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "def", "inference", "(", "self", ",", "model", ",", "image", ",", "flip", ")", ":", "\n", "        ", "size", "=", "image", ".", "size", "(", ")", "\n", "pred", "=", "model", "(", "image", ")", "\n", "pred", "=", "F", ".", "upsample", "(", "input", "=", "pred", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "if", "flip", ":", "\n", "            ", "flip_img", "=", "image", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "flip_output", "=", "model", "(", "torch", ".", "from_numpy", "(", "flip_img", ".", "copy", "(", ")", ")", ")", "\n", "flip_output", "=", "F", ".", "upsample", "(", "input", "=", "flip_output", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "flip_output", "=", "flip_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flip_pred", "=", "flip_output", ".", "copy", "(", ")", "\n", "for", "pair", "in", "self", ".", "mapped_left_right_pairs", ":", "\n", "                ", "flip_pred", "[", ":", ",", "pair", "[", "0", "]", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "pair", "[", "1", "]", ",", ":", ",", ":", "]", "\n", "flip_pred", "[", ":", ",", "pair", "[", "1", "]", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "pair", "[", "0", "]", ",", ":", ",", ":", "]", "\n", "", "flip_pred", "=", "torch", ".", "from_numpy", "(", "flip_pred", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "pred", "+=", "flip_pred", "\n", "pred", "=", "pred", "*", "0.5", "\n", "", "return", "pred", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.convert_label": [[261, 270], ["label.copy", "enumerate", "enumerate"], "methods", ["None"], ["", "def", "convert_label", "(", "self", ",", "label", ",", "inverse", "=", "False", ")", ":", "\n", "        ", "temp", "=", "label", ".", "copy", "(", ")", "\n", "if", "inverse", ":", "\n", "            ", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "label_mapper", ")", ":", "\n", "                ", "label", "[", "temp", "==", "k", "]", "=", "v", "\n", "", "", "else", ":", "\n", "            ", "for", "v", ",", "k", "in", "enumerate", "(", "self", ".", "label_mapper", ")", ":", "\n", "                ", "label", "[", "temp", "==", "k", "]", "=", "v", "\n", "", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.get_palette": [[271, 286], ["range"], "methods", ["None"], ["", "def", "get_palette", "(", "self", ",", "n", ")", ":", "\n", "        ", "palette", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "            ", "lab", "=", "j", "\n", "palette", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "lab", ":", "\n", "                ", "palette", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "+=", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.save_pred": [[308, 318], ["nturgbd_d.NTURGBDD.get_palette", "numpy.asarray.cpu().numpy().copy", "numpy.asarray", "range", "numpy.argmax", "nturgbd_d.NTURGBDD.convert_label", "PIL.Image.fromarray", "PIL.Image.fromarray.putpalette", "PIL.Image.fromarray.save", "numpy.asarray.cpu().numpy", "os.path.join", "numpy.asarray.cpu", "name[].split"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.get_palette", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.convert_label", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save"], ["", "def", "save_pred", "(", "self", ",", "preds", ",", "sv_path", ",", "name", ")", ":", "\n", "        ", "palette", "=", "self", ".", "get_palette", "(", "256", ")", "\n", "preds", "=", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "preds", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "preds", ",", "axis", "=", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "# pred = preds[i]", "\n", "            ", "pred", "=", "self", ".", "convert_label", "(", "preds", "[", "i", "]", ",", "inverse", "=", "True", ")", "\n", "save_img", "=", "Image", ".", "fromarray", "(", "pred", ")", "\n", "save_img", ".", "putpalette", "(", "palette", ")", "\n", "save_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "sv_path", ",", "(", "'_'", ".", "join", "(", "name", "[", "i", "]", ".", "split", "(", "'/'", ")", ")", "[", ":", "-", "3", "]", "+", "'png'", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.__init__": [[18, 37], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "base_size", "=", "2048", ",", "\n", "crop_size", "=", "(", "512", ",", "1024", ")", ",", "\n", "downsample_rate", "=", "1", ",", "\n", "scale_factor", "=", "16", ",", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "\n", "        ", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "downsample_rate", "=", "1.", "/", "downsample_rate", "\n", "\n", "self", ".", "files", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.input_transform": [[41, 47], ["image.astype"], "methods", ["None"], ["", "def", "input_transform", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "image", "=", "image", "/", "255.0", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "/=", "self", ".", "std", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.label_transform": [[48, 50], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "label_transform", "(", "self", ",", "label", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "label", ")", ".", "astype", "(", "'int32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.pad_image": [[51, 61], ["image.copy", "max", "max", "cv2.copyMakeBorder"], "methods", ["None"], ["", "def", "pad_image", "(", "self", ",", "image", ",", "h", ",", "w", ",", "size", ",", "padvalue", ")", ":", "\n", "        ", "pad_image", "=", "image", ".", "copy", "(", ")", "\n", "pad_h", "=", "max", "(", "size", "[", "0", "]", "-", "h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "size", "[", "1", "]", "-", "w", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "pad_image", "=", "cv2", ".", "copyMakeBorder", "(", "image", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "padvalue", ")", "\n", "\n", "", "return", "pad_image", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.rand_crop": [[62, 76], ["base_dataset.BaseDataset.pad_image", "base_dataset.BaseDataset.pad_image", "random.randint", "random.randint"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.pad_image", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.pad_image"], ["", "def", "rand_crop", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "-", "1", "]", "\n", "image", "=", "self", ".", "pad_image", "(", "image", ",", "h", ",", "w", ",", "self", ".", "crop_size", ",", "\n", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "label", "=", "self", ".", "pad_image", "(", "label", ",", "h", ",", "w", ",", "self", ".", "crop_size", ",", "\n", "(", "self", ".", "ignore_label", ",", ")", ")", "\n", "\n", "new_h", ",", "new_w", "=", "label", ".", "shape", "\n", "x", "=", "random", ".", "randint", "(", "0", ",", "new_w", "-", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "new_h", "-", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "image", "=", "image", "[", "y", ":", "y", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x", ":", "x", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "label", "=", "label", "[", "y", ":", "y", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x", ":", "x", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.center_crop": [[77, 85], ["int", "int", "round", "round"], "methods", ["None"], ["", "def", "center_crop", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "x", "=", "int", "(", "round", "(", "(", "w", "-", "self", ".", "crop_size", "[", "1", "]", ")", "/", "2.", ")", ")", "\n", "y", "=", "int", "(", "round", "(", "(", "h", "-", "self", ".", "crop_size", "[", "0", "]", ")", "/", "2.", ")", ")", "\n", "image", "=", "image", "[", "y", ":", "y", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x", ":", "x", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "label", "=", "label", "[", "y", ":", "y", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x", ":", "x", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.image_resize": [[86, 104], ["cv2.resize", "numpy.int", "numpy.int", "cv2.resize"], "methods", ["None"], ["", "def", "image_resize", "(", "self", ",", "image", ",", "long_size", ",", "label", "=", "None", ")", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "if", "h", ">", "w", ":", "\n", "            ", "new_h", "=", "long_size", "\n", "new_w", "=", "np", ".", "int", "(", "w", "*", "long_size", "/", "h", "+", "0.5", ")", "\n", "", "else", ":", "\n", "            ", "new_w", "=", "long_size", "\n", "new_h", "=", "np", ".", "int", "(", "h", "*", "long_size", "/", "w", "+", "0.5", ")", "\n", "\n", "", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "new_w", ",", "new_h", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "label", "=", "cv2", ".", "resize", "(", "label", ",", "(", "new_w", ",", "new_h", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "return", "image", "\n", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.multi_scale_aug": [[105, 116], ["numpy.int", "base_dataset.BaseDataset.image_resize", "base_dataset.BaseDataset.image_resize", "base_dataset.BaseDataset.rand_crop"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.image_resize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.image_resize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.rand_crop"], ["", "def", "multi_scale_aug", "(", "self", ",", "image", ",", "label", "=", "None", ",", "\n", "rand_scale", "=", "1", ",", "rand_crop", "=", "True", ")", ":", "\n", "        ", "long_size", "=", "np", ".", "int", "(", "self", ".", "base_size", "*", "rand_scale", "+", "0.5", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "image_resize", "(", "image", ",", "long_size", ",", "label", ")", "\n", "if", "rand_crop", ":", "\n", "                ", "image", ",", "label", "=", "self", ".", "rand_crop", "(", "image", ",", "label", ")", "\n", "", "return", "image", ",", "label", "\n", "", "else", ":", "\n", "            ", "image", "=", "self", ".", "image_resize", "(", "image", ",", "long_size", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.gen_sample": [[117, 148], ["base_dataset.BaseDataset.input_transform", "base_dataset.BaseDataset.label_transform", "image.transpose.transpose.transpose", "base_dataset.BaseDataset.multi_scale_aug", "base_dataset.BaseDataset.image_resize", "base_dataset.BaseDataset.center_crop", "cv2.resize", "random.randint", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.input_transform", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.label_transform", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.multi_scale_aug", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.image_resize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.center_crop"], ["", "", "def", "gen_sample", "(", "self", ",", "image", ",", "label", ",", "\n", "multi_scale", "=", "True", ",", "is_flip", "=", "True", ",", "center_crop_test", "=", "False", ")", ":", "\n", "        ", "if", "multi_scale", ":", "\n", "            ", "rand_scale", "=", "0.5", "+", "random", ".", "randint", "(", "0", ",", "self", ".", "scale_factor", ")", "/", "10.0", "\n", "image", ",", "label", "=", "self", ".", "multi_scale_aug", "(", "image", ",", "label", ",", "\n", "rand_scale", "=", "rand_scale", ")", "\n", "\n", "", "if", "center_crop_test", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "image_resize", "(", "image", ",", "\n", "self", ".", "base_size", ",", "\n", "label", ")", "\n", "image", ",", "label", "=", "self", ".", "center_crop", "(", "image", ",", "label", ")", "\n", "\n", "", "image", "=", "self", ".", "input_transform", "(", "image", ")", "\n", "label", "=", "self", ".", "label_transform", "(", "label", ")", "\n", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "if", "is_flip", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "flip", "]", "\n", "label", "=", "label", "[", ":", ",", ":", ":", "flip", "]", "\n", "\n", "", "if", "self", ".", "downsample_rate", "!=", "1", ":", "\n", "            ", "label", "=", "cv2", ".", "resize", "(", "label", ",", "\n", "None", ",", "\n", "fx", "=", "self", ".", "downsample_rate", ",", "\n", "fy", "=", "self", ".", "downsample_rate", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.inference": [[149, 166], ["image.size", "model", "torch.nn.functional.upsample", "torch.nn.functional.upsample.exp", "model", "torch.nn.functional.upsample", "torch.nn.functional.upsample.cpu().numpy().copy", "torch.from_numpy().cuda", "image.numpy", "torch.from_numpy", "flip_img.copy", "torch.nn.functional.upsample.cpu().numpy", "torch.from_numpy", "flip_pred[].copy", "torch.nn.functional.upsample.cpu"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "def", "inference", "(", "self", ",", "model", ",", "image", ",", "flip", "=", "False", ")", ":", "\n", "        ", "size", "=", "image", ".", "size", "(", ")", "\n", "pred", "=", "model", "(", "image", ")", "\n", "pred", "=", "F", ".", "upsample", "(", "input", "=", "pred", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "if", "flip", ":", "\n", "            ", "flip_img", "=", "image", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "flip_output", "=", "model", "(", "torch", ".", "from_numpy", "(", "flip_img", ".", "copy", "(", ")", ")", ")", "\n", "flip_output", "=", "F", ".", "upsample", "(", "input", "=", "flip_output", ",", "\n", "size", "=", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "flip_pred", "=", "flip_output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "flip_pred", "=", "torch", ".", "from_numpy", "(", "flip_pred", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "pred", "+=", "flip_pred", "\n", "pred", "=", "pred", "*", "0.5", "\n", "", "return", "pred", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.multi_scale_inference": [[167, 230], ["[].transpose().copy.size", "torch.device", "[].transpose().copy", "numpy.int", "numpy.int", "torch.zeros().to", "numpy.array", "base_dataset.BaseDataset.multi_scale_aug", "torch.nn.functional.upsample", "[].transpose", "torch.zeros", "numpy.array", "max", "numpy.min", "base_dataset.BaseDataset.pad_image", "base_dataset.BaseDataset.transpose", "numpy.expand_dims", "torch.from_numpy", "base_dataset.BaseDataset.inference", "torch.zeros().to", "torch.zeros().to", "range", "base_dataset.BaseDataset.pad_image", "numpy.int", "numpy.int", "range", "numpy.ceil", "numpy.ceil", "torch.zeros", "torch.zeros", "min", "min", "base_dataset.BaseDataset.transpose", "numpy.expand_dims", "torch.from_numpy", "base_dataset.BaseDataset.inference", "[].transpose().copy.numpy", "base_dataset.BaseDataset.pad_image"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.multi_scale_aug", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.pad_image", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.inference", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.pad_image", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.inference", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.pad_image"], ["", "def", "multi_scale_inference", "(", "self", ",", "model", ",", "image", ",", "scales", "=", "[", "1", "]", ",", "flip", "=", "False", ")", ":", "\n", "        ", "batch", ",", "_", ",", "ori_height", ",", "ori_width", "=", "image", ".", "size", "(", ")", "\n", "assert", "batch", "==", "1", ",", "\"only supporting batchsize 1.\"", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "model", ".", "device_ids", "[", "0", "]", ")", "\n", "image", "=", "image", ".", "numpy", "(", ")", "[", "0", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ".", "copy", "(", ")", "\n", "stride_h", "=", "np", ".", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "2.0", "/", "3.0", ")", "\n", "stride_w", "=", "np", ".", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "2.0", "/", "3.0", ")", "\n", "final_pred", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "num_classes", ",", "\n", "ori_height", ",", "ori_width", "]", ")", ".", "to", "(", "device", ")", "\n", "padvalue", "=", "-", "1.0", "*", "np", ".", "array", "(", "self", ".", "mean", ")", "/", "np", ".", "array", "(", "self", ".", "std", ")", "\n", "for", "scale", "in", "scales", ":", "\n", "            ", "new_img", "=", "self", ".", "multi_scale_aug", "(", "image", "=", "image", ",", "\n", "rand_scale", "=", "scale", ",", "\n", "rand_crop", "=", "False", ")", "\n", "height", ",", "width", "=", "new_img", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "if", "max", "(", "height", ",", "width", ")", "<=", "np", ".", "min", "(", "self", ".", "crop_size", ")", ":", "\n", "                ", "new_img", "=", "self", ".", "pad_image", "(", "new_img", ",", "height", ",", "width", ",", "\n", "self", ".", "crop_size", ",", "padvalue", ")", "\n", "new_img", "=", "new_img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "new_img", "=", "np", ".", "expand_dims", "(", "new_img", ",", "axis", "=", "0", ")", "\n", "new_img", "=", "torch", ".", "from_numpy", "(", "new_img", ")", "\n", "preds", "=", "self", ".", "inference", "(", "model", ",", "new_img", ",", "flip", ")", "\n", "preds", "=", "preds", "[", ":", ",", ":", ",", "0", ":", "height", ",", "0", ":", "width", "]", "\n", "", "else", ":", "\n", "                ", "if", "height", "<", "self", ".", "crop_size", "[", "0", "]", "or", "width", "<", "self", ".", "crop_size", "[", "1", "]", ":", "\n", "                    ", "new_img", "=", "self", ".", "pad_image", "(", "new_img", ",", "height", ",", "width", ",", "\n", "self", ".", "crop_size", ",", "padvalue", ")", "\n", "", "new_h", ",", "new_w", "=", "new_img", ".", "shape", "[", ":", "-", "1", "]", "\n", "rows", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "1.0", "*", "(", "new_h", "-", "\n", "self", ".", "crop_size", "[", "0", "]", ")", "/", "stride_h", ")", ")", "+", "1", "\n", "cols", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "1.0", "*", "(", "new_w", "-", "\n", "self", ".", "crop_size", "[", "1", "]", ")", "/", "stride_w", ")", ")", "+", "1", "\n", "preds", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "num_classes", ",", "\n", "new_h", ",", "new_w", "]", ")", ".", "to", "(", "device", ")", "\n", "count", "=", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "new_h", ",", "new_w", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "r", "in", "range", "(", "rows", ")", ":", "\n", "                    ", "for", "c", "in", "range", "(", "cols", ")", ":", "\n", "                        ", "h0", "=", "r", "*", "stride_h", "\n", "w0", "=", "c", "*", "stride_w", "\n", "h1", "=", "min", "(", "h0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "new_h", ")", "\n", "w1", "=", "min", "(", "w0", "+", "self", ".", "crop_size", "[", "1", "]", ",", "new_w", ")", "\n", "crop_img", "=", "new_img", "[", "h0", ":", "h1", ",", "w0", ":", "w1", ",", ":", "]", "\n", "if", "h1", "==", "new_h", "or", "w1", "==", "new_w", ":", "\n", "                            ", "crop_img", "=", "self", ".", "pad_image", "(", "crop_img", ",", "\n", "h1", "-", "h0", ",", "\n", "w1", "-", "w0", ",", "\n", "self", ".", "crop_size", ",", "\n", "padvalue", ")", "\n", "", "crop_img", "=", "crop_img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "crop_img", "=", "np", ".", "expand_dims", "(", "crop_img", ",", "axis", "=", "0", ")", "\n", "crop_img", "=", "torch", ".", "from_numpy", "(", "crop_img", ")", "\n", "pred", "=", "self", ".", "inference", "(", "model", ",", "crop_img", ",", "flip", ")", "\n", "\n", "preds", "[", ":", ",", ":", ",", "h0", ":", "h1", ",", "w0", ":", "w1", "]", "+=", "pred", "[", ":", ",", ":", ",", "0", ":", "h1", "-", "h0", ",", "0", ":", "w1", "-", "w0", "]", "\n", "count", "[", ":", ",", ":", ",", "h0", ":", "h1", ",", "w0", ":", "w1", "]", "+=", "1", "\n", "", "", "preds", "=", "preds", "/", "count", "\n", "preds", "=", "preds", "[", ":", ",", ":", ",", ":", "height", ",", ":", "width", "]", "\n", "", "preds", "=", "F", ".", "upsample", "(", "preds", ",", "(", "ori_height", ",", "ori_width", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "final_pred", "+=", "preds", "\n", "", "return", "final_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.ImageFolderInstance.__init__": [[12, 19], ["torchvision.datasets.ImageFolder.__init__", "dataset.ImageFolderInstance.__len__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DatasetFromSampler.__len__"], ["def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "two_crop", "=", "False", ",", "jigsaw_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "ImageFolderInstance", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", ",", "target_transform", ")", "\n", "self", ".", "two_crop", "=", "two_crop", "\n", "self", ".", "jigsaw_transform", "=", "jigsaw_transform", "\n", "self", ".", "use_jigsaw", "=", "(", "jigsaw_transform", "is", "not", "None", ")", "\n", "self", ".", "num", "=", "self", ".", "__len__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.ImageFolderInstance.__getitem__": [[20, 47], ["dataset.ImageFolderInstance.loader", "dataset.ImageFolderInstance.transform", "dataset.ImageFolderInstance.jigsaw_transform", "dataset.ImageFolderInstance.transform", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.transform", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): index\n        Returns:\n            tuple: (image, index, ...)\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "image", "=", "self", ".", "loader", "(", "path", ")", "\n", "\n", "# # image", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "image", ")", "\n", "if", "self", ".", "two_crop", ":", "\n", "                ", "img2", "=", "self", ".", "transform", "(", "image", ")", "\n", "img", "=", "torch", ".", "cat", "(", "[", "img", ",", "img2", "]", ",", "dim", "=", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "img", "=", "image", "\n", "\n", "# # jigsaw", "\n", "", "if", "self", ".", "use_jigsaw", ":", "\n", "            ", "jigsaw_image", "=", "self", ".", "jigsaw_transform", "(", "image", ")", "\n", "\n", "", "if", "self", ".", "use_jigsaw", ":", "\n", "            ", "return", "img", ",", "index", ",", "jigsaw_image", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBD.__init__": [[66, 94], ["torch.Dataset.__init__", "f.replace.replace.strip", "f.replace.replace.replace", "f.replace.replace.replace", "f.replace.replace.replace", "os.path.join", "os.path.join", "open().readlines", "dataset.NTURGBD.__init__.transfer_fname"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "file_list", ",", "size", "=", "320", ",", "random_flip", "=", "False", ",", "random_resized_crop", "=", "False", ",", "use_jigsaw", "=", "False", ",", "need_gt", "=", "False", ")", ":", "\n", "        ", "super", "(", "NTURGBD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "file_list", "=", "[", "f", ".", "strip", "(", ")", "for", "f", "in", "open", "(", "file_list", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "\n", "\n", "self", ".", "scale", "=", "(", "0.8", ",", "1.2", ")", "\n", "# self.scale = (1, 1)", "\n", "self", ".", "ratio", "=", "(", "3.", "/", "4", ",", "4.", "/", "3", ")", "\n", "# self.ratio = (1, 1)", "\n", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "\n", "self", ".", "random_flip", "=", "random_flip", "\n", "self", ".", "random_resized_crop", "=", "random_resized_crop", "\n", "self", ".", "use_jigsaw", "=", "use_jigsaw", "\n", "self", ".", "need_gt", "=", "need_gt", "\n", "\n", "assert", "not", "self", ".", "use_jigsaw", "\n", "assert", "not", "self", ".", "need_gt", "\n", "\n", "def", "transfer_fname", "(", "f", ",", "replace_prefix", "=", "'HumanRGBD/NTURGBD/nturgb+d_depth_masked'", ")", ":", "\n", "# f = f.replace('nturgb+d_rgb_warped', 'nturgb+d_depth_masked')", "\n", "            ", "f", "=", "f", ".", "replace", "(", "'nturgb+d_rgb_warped_correction'", ",", "replace_prefix", ")", "\n", "f", "=", "f", ".", "replace", "(", "'WRGB'", ",", "'MDepth'", ")", "\n", "f", "=", "f", ".", "replace", "(", "'jpg'", ",", "'png'", ")", "\n", "return", "f", "\n", "\n", "", "self", ".", "image_list", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "f", ")", "for", "f", "in", "self", ".", "file_list", "]", "\n", "self", ".", "depth_list", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "transfer_fname", "(", "f", ")", ")", "for", "f", "in", "self", ".", "file_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBD.__len__": [[95, 97], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBD.__getitem__": [[98, 161], ["PIL.Image.open().convert", "cv2.imread().astype", "cv2.imread().astype", "cv2.imread().astype", "cv2.imread().astype", "numpy.where", "PIL.Image.fromarray", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "ind[].min", "ind[].max", "ind[].min", "ind[].max", "torchvision.transforms.RandomResizedCrop.get_params", "int", "int", "torchvision.transforms.functional.resized_crop", "torchvision.transforms.functional.resized_crop", "random.random", "random.random", "random.random", "random.random", "img.transpose.transpose.transpose", "depth.transpose.transpose.transpose", "numpy.array", "numpy.array", "numpy.array", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "PIL.Image.open", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "numpy.array().astype", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "img.transpose.transpose.permute", "numpy.array", "img.transpose.transpose.permute"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ",", "return_resize_param", "=", "False", ")", ":", "\n", "        ", "image_path", "=", "self", ".", "image_list", "[", "index", "]", "\n", "depth_path", "=", "self", ".", "depth_list", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "depth", "=", "cv2", ".", "imread", "(", "depth_path", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "ind", "=", "np", ".", "where", "(", "depth", ">", "0", ")", "\n", "xmin", ",", "xmax", "=", "ind", "[", "0", "]", ".", "min", "(", ")", ",", "ind", "[", "0", "]", ".", "max", "(", ")", "\n", "ymin", ",", "ymax", "=", "ind", "[", "1", "]", ".", "min", "(", ")", ",", "ind", "[", "1", "]", ".", "max", "(", ")", "\n", "\n", "depth", "=", "Image", ".", "fromarray", "(", "depth", ")", "\n", "\n", "if", "self", ".", "random_resized_crop", ":", "\n", "            ", "i", ",", "j", ",", "h", ",", "w", "=", "transforms", ".", "RandomResizedCrop", ".", "get_params", "(", "\n", "img", ",", "scale", "=", "self", ".", "scale", ",", "ratio", "=", "self", ".", "ratio", "\n", ")", "\n", "mid_x", "=", "i", "+", "h", "/", "2.0", "\n", "mid_y", "=", "j", "+", "w", "/", "2.0", "\n", "\n", "if", "mid_x", "<", "xmin", ":", "\n", "                ", "new_mid_x", "=", "xmin", "\n", "", "elif", "mid_x", ">", "xmax", ":", "\n", "                ", "new_mid_x", "=", "xmax", "\n", "", "else", ":", "\n", "                ", "new_mid_x", "=", "mid_x", "\n", "\n", "", "if", "mid_y", "<", "ymin", ":", "\n", "                ", "new_mid_y", "=", "ymin", "\n", "", "elif", "mid_y", ">", "ymax", ":", "\n", "                ", "new_mid_y", "=", "ymax", "\n", "", "else", ":", "\n", "                ", "new_mid_y", "=", "mid_y", "\n", "\n", "", "i", "=", "int", "(", "new_mid_x", "-", "h", "/", "2.0", ")", "\n", "j", "=", "int", "(", "new_mid_y", "-", "w", "/", "2.0", ")", "\n", "\n", "img", "=", "TF", ".", "resized_crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ")", "\n", "depth", "=", "TF", ".", "resized_crop", "(", "depth", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "interpolation", "=", "PIL", ".", "Image", ".", "NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "i", ",", "j", ",", "h", ",", "w", "=", "0", ",", "0", ",", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", "\n", "\n", "", "need_flip", "=", "random", ".", "random", "(", ")", ">=", "0.5", "\n", "if", "self", ".", "random_flip", "and", "need_flip", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "depth", "=", "depth", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "img", "/=", "255.0", "\n", "img", "-=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ")", "\n", "img", "/=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ")", "\n", "\n", "depth", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "depth", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "1000.0", ")", "\n", "depth", "=", "torch", ".", "stack", "(", "[", "depth", ",", "depth", ",", "depth", "]", ",", "dim", "=", "0", ")", "\n", "\n", "if", "return_resize_param", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "\n", "img", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "\n", "depth", ",", "\n", "]", ",", "dim", "=", "0", ")", ",", "index", ",", "(", "i", ",", "j", ",", "h", ",", "w", ",", "need_flip", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "[", "\n", "img", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "\n", "depth", ",", "\n", "]", ",", "dim", "=", "0", ")", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBD3DSkeleton.__init__": [[163, 174], ["dataset.NTURGBD.__init__", "f.replace.replace.replace", "f.replace.replace.replace", "f.replace.replace.replace", "int", "os.path.join", "dataset.NTURGBD3DSkeleton.__init__.transfer_fname"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "file_list", ",", "size", "=", "320", ",", "random_flip", "=", "False", ",", "random_resized_crop", "=", "False", ",", "use_jigsaw", "=", "False", ",", "need_gt", "=", "False", ")", ":", "\n", "        ", "super", "(", "NTURGBD3DSkeleton", ",", "self", ")", ".", "__init__", "(", "root", ",", "file_list", ",", "size", ",", "random_flip", ",", "random_resized_crop", ",", "use_jigsaw", ",", "need_gt", ")", "\n", "def", "transfer_fname", "(", "f", ",", "replace_prefix", "=", "'HumanRGBD/NTURGBD/nturgb+d_parsed_skeleton'", ")", ":", "\n", "# f = f.replace('nturgb+d_rgb_warped', 'nturgb+d_parsed_skeleton')", "\n", "            ", "f", "=", "f", ".", "replace", "(", "'nturgb+d_rgb_warped_correction'", ",", "replace_prefix", ")", "\n", "f", "=", "f", ".", "replace", "(", "'WRGB'", ",", "'Skeleton'", ")", "\n", "f", "=", "f", ".", "replace", "(", "'jpg'", ",", "'pkl'", ")", "\n", "num", "=", "int", "(", "f", "[", "-", "12", ":", "-", "4", "]", ")", "\n", "f", "=", "f", "[", ":", "-", "12", "]", "+", "str", "(", "num", "-", "1", ")", ".", "zfill", "(", "8", ")", "+", "f", "[", "-", "4", ":", "]", "\n", "return", "f", "\n", "", "self", ".", "skeleton_list", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "transfer_fname", "(", "f", ")", ")", "for", "f", "in", "self", ".", "file_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBD3DSkeleton.__getitem__": [[175, 251], ["PIL.Image.open().convert", "cv2.imread().astype", "cv2.imread().astype", "cv2.imread().astype", "cv2.imread().astype", "PIL.Image.fromarray", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "open", "pickle.load", "torch.from_numpy.append", "torch.from_numpy.append", "numpy.array", "random.randrange", "random.randrange", "random.randrange", "random.randrange", "random.randrange", "random.randrange", "random.randrange", "random.randrange", "torchvision.transforms.RandomResizedCrop.get_params", "int", "int", "torchvision.transforms.functional.resized_crop", "torchvision.transforms.functional.resized_crop", "random.random", "random.random", "random.random", "random.random", "img.transpose.transpose.transpose", "depth.transpose.transpose.transpose", "numpy.array", "numpy.array", "numpy.array", "PIL.Image.open", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "numpy.array", "numpy.array.append", "numpy.any", "joints2d[].min", "joints2d[].max", "joints2d[].min", "joints2d[].max", "int", "int", "int", "int", "numpy.array().astype", "img.transpose.transpose.permute", "numpy.isnan", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ",", "return_resize_param", "=", "False", ")", ":", "\n", "# if return_resize_param:", "\n", "#     rgbd, index, resize_param = super().__getitem__(index, True)", "\n", "# else:", "\n", "#     rgbd, index = super().__getitem__(index, False)", "\n", "\n", "        ", "image_path", "=", "self", ".", "image_list", "[", "index", "]", "\n", "depth_path", "=", "self", ".", "depth_list", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "depth", "=", "cv2", ".", "imread", "(", "depth_path", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "depth", "=", "Image", ".", "fromarray", "(", "depth", ")", "\n", "\n", "original_h", ",", "original_w", "=", "img", ".", "size", "[", "1", "]", ",", "img", ".", "size", "[", "0", "]", "\n", "\n", "skeleton_fname", "=", "self", ".", "skeleton_list", "[", "index", "]", "\n", "with", "open", "(", "skeleton_fname", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "skeleton_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "# assert len(skeleton_dict['joints']) == 1, print(len(skeleton_dict['joints']), skeleton_fname)", "\n", "", "joints3d", "=", "[", "]", "\n", "for", "j", "in", "skeleton_dict", "[", "'joints'", "]", "[", "0", "]", "[", "'3d_loc'", "]", ":", "\n", "            ", "joints3d", ".", "append", "(", "j", ")", "\n", "", "root_joint", "=", "np", ".", "array", "(", "joints3d", "[", "0", "]", ")", "\n", "\n", "# print(\">>>>>>>>>joints3d\")", "\n", "# print(joints3d)", "\n", "# print(\">>>>>>>>>joints_depth\")", "\n", "# jointsdepth = []", "\n", "# joints2d = []", "\n", "# for joint in skeleton_dict['joints'][0]['d_loc']:", "\n", "#     joints2d.append(joint)", "\n", "#     jointsdepth.append(np.array(depth)[int(joint[1]), int(joint[0])] / 1000.0)", "\n", "# print(jointsdepth)", "\n", "# print(\">>>>>>>>>joints2d\")", "\n", "# print(joints2d)", "\n", "\n", "joints3d", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "joints3d", ",", "dtype", "=", "np", ".", "float32", ")", "-", "root_joint", ")", "\n", "\n", "if", "self", ".", "random_resized_crop", ":", "\n", "            ", "joints2d", "=", "[", "]", "\n", "for", "j", "in", "skeleton_dict", "[", "'joints'", "]", "[", "0", "]", "[", "'d_loc'", "]", ":", "\n", "                ", "joints2d", ".", "append", "(", "j", ")", "\n", "", "joints2d", "=", "np", ".", "array", "(", "joints2d", ")", "\n", "assert", "not", "np", ".", "any", "(", "np", ".", "isnan", "(", "joints2d", ")", ")", ",", "skeleton_fname", "\n", "human_min_x", ",", "human_max_x", "=", "joints2d", "[", ":", ",", "1", "]", ".", "min", "(", ")", ",", "joints2d", "[", ":", ",", "1", "]", ".", "max", "(", ")", "\n", "human_min_y", ",", "human_max_y", "=", "joints2d", "[", ":", ",", "0", "]", ".", "min", "(", ")", ",", "joints2d", "[", ":", ",", "0", "]", ".", "max", "(", ")", "\n", "rand_x", "=", "random", ".", "randrange", "(", "int", "(", "human_min_x", ")", ",", "int", "(", "human_max_x", ")", ")", "\n", "rand_y", "=", "random", ".", "randrange", "(", "int", "(", "human_min_y", ")", ",", "int", "(", "human_max_y", ")", ")", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "transforms", ".", "RandomResizedCrop", ".", "get_params", "(", "\n", "img", ",", "scale", "=", "(", "0.08", ",", "1.2", ")", ",", "ratio", "=", "(", "1", ",", "1", ")", "\n", ")", "\n", "i", "=", "int", "(", "rand_x", "-", "h", "/", "2.0", ")", "\n", "j", "=", "int", "(", "rand_y", "-", "w", "/", "2.0", ")", "\n", "img", "=", "TF", ".", "resized_crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ")", "\n", "depth", "=", "TF", ".", "resized_crop", "(", "depth", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "interpolation", "=", "PIL", ".", "Image", ".", "NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "i", ",", "j", ",", "h", ",", "w", "=", "0", ",", "0", ",", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", "\n", "\n", "", "need_flip", "=", "random", ".", "random", "(", ")", ">=", "0.5", "\n", "if", "self", ".", "random_flip", "and", "need_flip", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "depth", "=", "depth", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "img", "/=", "255.0", "\n", "img", "-=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ")", "\n", "img", "/=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ")", "\n", "\n", "depth", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "depth", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "1000.0", ")", "\n", "depth", "=", "torch", ".", "stack", "(", "[", "depth", ",", "depth", ",", "depth", "]", ",", "dim", "=", "0", ")", "\n", "\n", "rgbd", "=", "torch", ".", "cat", "(", "[", "img", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "depth", "]", ",", "dim", "=", "0", ")", "\n", "resize_param", "=", "(", "i", ",", "j", ",", "h", ",", "w", ",", "need_flip", ",", "original_h", ",", "original_w", ")", "\n", "\n", "if", "return_resize_param", ":", "\n", "            ", "return", "rgbd", ",", "index", ",", "joints3d", ",", "resize_param", ",", "skeleton_dict", "\n", "", "return", "rgbd", ",", "index", ",", "joints3d", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBD3D2DSkeleton.__init__": [[253, 263], ["dataset.NTURGBD3DSkeleton.__init__", "numpy.zeros", "range"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "file_list", ",", "size", "=", "320", ",", "random_flip", "=", "False", ",", "random_resized_crop", "=", "False", ",", "use_jigsaw", "=", "False", ",", "need_gt", "=", "False", ")", ":", "\n", "        ", "super", "(", "NTURGBD3D2DSkeleton", ",", "self", ")", ".", "__init__", "(", "root", ",", "file_list", ",", "size", ",", "random_flip", ",", "random_resized_crop", ",", "use_jigsaw", ",", "need_gt", ")", "\n", "self", ".", "sigma", "=", "2", "\n", "self", ".", "num_joints", "=", "25", "\n", "pos_enc", "=", "np", ".", "zeros", "(", "[", "self", ".", "num_joints", ",", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_joints", "+", "1", ")", ":", "\n", "            ", "pos_enc", "[", "i", "-", "1", ",", "0", "]", "=", "(", "i", "%", "3", ")", "\n", "pos_enc", "[", "i", "-", "1", ",", "1", "]", "=", "(", "i", "//", "3", ")", "%", "3", "\n", "pos_enc", "[", "i", "-", "1", ",", "2", "]", "=", "(", "i", "//", "9", ")", "%", "3", "\n", "", "self", ".", "pos_enc_kinect", "=", "pos_enc", "*", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBD3D2DSkeleton.generate_joint2d_heatmap": [[264, 276], ["numpy.zeros", "range", "numpy.amax().transpose", "numpy.arange", "numpy.arange", "numpy.exp", "pos_enc.reshape", "numpy.tile().transpose", "numpy.amax", "numpy.tile"], "methods", ["None"], ["", "def", "generate_joint2d_heatmap", "(", "self", ",", "joints2d", ",", "num_joints", ",", "image_h", ",", "image_w", ",", "pos_enc", ")", ":", "\n", "        ", "heatmap", "=", "np", ".", "zeros", "(", "[", "num_joints", ",", "image_h", ",", "image_w", "]", ")", "\n", "for", "i", "in", "range", "(", "num_joints", ")", ":", "\n", "            ", "mu_x", "=", "joints2d", "[", "i", ",", "0", "]", "\n", "mu_y", "=", "joints2d", "[", "i", ",", "1", "]", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "image_w", ",", "1", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "arange", "(", "0", ",", "image_h", ",", "1", ",", "np", ".", "float32", ")", "\n", "y", "=", "y", "[", ":", ",", "None", "]", "\n", "heatmap", "[", "i", "]", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "mu_x", ")", "**", "2", "+", "(", "y", "-", "mu_y", ")", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma", "**", "2", ")", ")", "\n", "", "rgb_heatmap", "=", "pos_enc", ".", "reshape", "(", "-", "1", ",", "3", ",", "1", ",", "1", ")", "*", "np", ".", "tile", "(", "heatmap", ",", "(", "3", ",", "1", ",", "1", ",", "1", ")", ")", ".", "transpose", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "rgb_heatmap", "=", "np", ".", "amax", "(", "rgb_heatmap", ",", "axis", "=", "0", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "return", "rgb_heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBD3D2DSkeleton.transform_heatmap": [[277, 292], ["range", "numpy.stack", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "PIL.Image.fromarray", "rgb_heatmap_list.append", "torchvision.transforms.functional.resized_crop", "rgb_heatmap_i.transpose.transpose.transpose", "numpy.array", "torch.from_numpy.astype", "torch.from_numpy.astype", "float"], "methods", ["None"], ["", "def", "transform_heatmap", "(", "self", ",", "rgb_heatmap", ",", "resize_param", ")", ":", "\n", "        ", "scale", "=", "10000", "\n", "rgb_heatmap", "=", "(", "rgb_heatmap", "*", "scale", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "rgb_heatmap_list", "=", "[", "]", "\n", "i", ",", "j", ",", "h", ",", "w", ",", "need_flip", ",", "_", ",", "_", "=", "resize_param", "\n", "for", "dim", "in", "range", "(", "3", ")", ":", "\n", "            ", "rgb_heatmap_i", "=", "Image", ".", "fromarray", "(", "rgb_heatmap", "[", ":", ",", ":", ",", "dim", "]", ")", "\n", "if", "self", ".", "random_resized_crop", ":", "\n", "                ", "rgb_heatmap_i", "=", "TF", ".", "resized_crop", "(", "rgb_heatmap_i", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "interpolation", "=", "PIL", ".", "Image", ".", "NEAREST", ")", "\n", "", "if", "need_flip", "and", "self", ".", "random_flip", ":", "\n", "                ", "rgb_heatmap_i", "=", "rgb_heatmap_i", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "rgb_heatmap_list", ".", "append", "(", "np", ".", "array", "(", "rgb_heatmap_i", ")", ")", "\n", "", "rgb_heatmap", "=", "np", ".", "stack", "(", "rgb_heatmap_list", ",", "axis", "=", "-", "1", ")", "\n", "rgb_heatmap", "=", "torch", ".", "from_numpy", "(", "rgb_heatmap", ".", "astype", "(", "np", ".", "float32", ")", "/", "float", "(", "scale", ")", ")", "\n", "return", "rgb_heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBD3D2DSkeleton.__getitem__": [[293, 305], ["dataset.NTURGBD3DSkeleton.__getitem__", "numpy.array", "dataset.NTURGBD3D2DSkeleton.generate_joint2d_heatmap", "dataset.NTURGBD3D2DSkeleton.transform_heatmap", "numpy.array.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dataset.NTURGBD3D2DSkeleton.permute"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DatasetFromSampler.__getitem__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBD3D2DSkeleton.generate_joint2d_heatmap", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBD3D2DSkeleton.transform_heatmap"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "rgbd", ",", "index", ",", "joints3d", ",", "resize_param", ",", "skeleton_dict", "=", "super", "(", ")", ".", "__getitem__", "(", "index", ",", "return_resize_param", "=", "True", ")", "\n", "joints2d", "=", "[", "]", "\n", "for", "joint", "in", "skeleton_dict", "[", "'joints'", "]", "[", "0", "]", "[", "'d_loc'", "]", ":", "\n", "            ", "joints2d", ".", "append", "(", "joint", ")", "\n", "", "joints2d", "=", "np", ".", "array", "(", "joints2d", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "num_joints", "=", "joints2d", ".", "shape", "[", "0", "]", "\n", "assert", "num_joints", "==", "self", ".", "num_joints", "\n", "image_h", ",", "image_w", "=", "rgbd", ".", "shape", "[", "-", "2", "]", ",", "rgbd", ".", "shape", "[", "-", "1", "]", "\n", "rgb_heatmap", "=", "self", ".", "generate_joint2d_heatmap", "(", "joints2d", ",", "num_joints", ",", "image_h", ",", "image_w", ",", "self", ".", "pos_enc_kinect", ")", "\n", "rgb_heatmap", "=", "self", ".", "transform_heatmap", "(", "rgb_heatmap", ",", "resize_param", ")", "\n", "return", "torch", ".", "cat", "(", "[", "rgbd", ",", "rgb_heatmap", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "]", ",", "dim", "=", "0", ")", ",", "index", ",", "joints3d", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUMPIIRGBD3D2DSkeleton.__init__": [[307, 324], ["dataset.NTURGBD3D2DSkeleton.__init__", "numpy.zeros", "range", "dataset.NTUMPIIRGBD3D2DSkeleton._get_db"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN._get_db"], ["    ", "def", "__init__", "(", "self", ",", "ntu_root", ",", "ntu_file_list", ",", "mpii_root", ",", "mpii_image_set", ",", "size", "=", "320", ",", "random_flip", "=", "False", ",", "random_resized_crop", "=", "False", ",", "\n", "use_jigsaw", "=", "False", ",", "need_gt", "=", "False", ")", ":", "\n", "        ", "super", "(", "NTUMPIIRGBD3D2DSkeleton", ",", "self", ")", ".", "__init__", "(", "ntu_root", ",", "ntu_file_list", ",", "size", ",", "random_flip", ",", "random_resized_crop", ",", "use_jigsaw", ",", "need_gt", ")", "\n", "self", ".", "mpii_root", "=", "mpii_root", "\n", "self", ".", "mpii_image_set", "=", "mpii_image_set", "\n", "\n", "self", ".", "mpii_num_joints", "=", "16", "\n", "pos_enc", "=", "np", ".", "zeros", "(", "[", "self", ".", "mpii_num_joints", ",", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "mpii_num_joints", "+", "1", ")", ":", "\n", "            ", "pos_enc", "[", "i", "-", "1", ",", "0", "]", "=", "(", "i", "%", "3", ")", "\n", "pos_enc", "[", "i", "-", "1", ",", "1", "]", "=", "(", "i", "//", "3", ")", "%", "3", "\n", "pos_enc", "[", "i", "-", "1", ",", "2", "]", "=", "(", "i", "//", "9", ")", "%", "3", "\n", "", "self", ".", "pos_enc_mpii", "=", "pos_enc", "*", "0.5", "\n", "\n", "self", ".", "mpii_num_joints_half_body", "=", "8", "\n", "self", ".", "mpii_data_format", "=", "'jpg'", "\n", "self", ".", "db", "=", "self", ".", "_get_db", "(", "mpii_root", ",", "mpii_image_set", ",", "self", ".", "mpii_num_joints", ",", "self", ".", "mpii_data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUMPIIRGBD3D2DSkeleton.Kinect2MPII": [[325, 329], ["joints[].reshape"], "methods", ["None"], ["", "def", "Kinect2MPII", "(", "self", ",", "joints", ")", ":", "\n", "# select_ind = [18, 17, 16, 12, 13, 14, 0, 1, 2, 3, 10, 9, 8, 4, 5, 6]", "\n", "        ", "select_ind", "=", "[", "14", ",", "13", ",", "12", ",", "16", ",", "17", ",", "18", ",", "0", ",", "1", ",", "2", ",", "3", ",", "6", ",", "5", ",", "4", ",", "8", ",", "9", ",", "10", "]", "\n", "return", "joints", "[", "select_ind", "]", ".", "reshape", "(", "16", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUMPIIRGBD3D2DSkeleton._get_db": [[330, 382], ["os.path.join", "open", "json_tricks.load", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "gt_db.append", "numpy.array", "numpy.array", "len", "len", "os.path.join"], "methods", ["None"], ["", "def", "_get_db", "(", "self", ",", "root", ",", "image_set", ",", "num_joints", ",", "data_format", ")", ":", "\n", "# create train/val split", "\n", "        ", "file_name", "=", "os", ".", "path", ".", "join", "(", "\n", "root", ",", "'annot'", ",", "image_set", "+", "'.json'", "\n", ")", "\n", "with", "open", "(", "file_name", ")", "as", "anno_file", ":", "\n", "            ", "anno", "=", "json", ".", "load", "(", "anno_file", ")", "\n", "\n", "", "gt_db", "=", "[", "]", "\n", "for", "a", "in", "anno", ":", "\n", "            ", "image_name", "=", "a", "[", "'image'", "]", "\n", "\n", "c", "=", "np", ".", "array", "(", "a", "[", "'center'", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "s", "=", "np", ".", "array", "(", "[", "a", "[", "'scale'", "]", ",", "a", "[", "'scale'", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "# Adjust center/scale slightly to avoid cropping limbs", "\n", "if", "c", "[", "0", "]", "!=", "-", "1", ":", "\n", "                ", "c", "[", "1", "]", "=", "c", "[", "1", "]", "+", "15", "*", "s", "[", "1", "]", "\n", "s", "=", "s", "*", "1.25", "\n", "\n", "# MPII uses matlab format, index is based 1,", "\n", "# we should first convert to 0-based index", "\n", "", "c", "=", "c", "-", "1", "\n", "\n", "joints_3d", "=", "np", ".", "zeros", "(", "(", "num_joints", ",", "3", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "joints_3d_vis", "=", "np", ".", "zeros", "(", "(", "num_joints", ",", "3", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "image_set", "!=", "'test'", ":", "\n", "                ", "joints", "=", "np", ".", "array", "(", "a", "[", "'joints'", "]", ")", "\n", "joints", "[", ":", ",", "0", ":", "2", "]", "=", "joints", "[", ":", ",", "0", ":", "2", "]", "-", "1", "\n", "joints_vis", "=", "np", ".", "array", "(", "a", "[", "'joints_vis'", "]", ")", "\n", "assert", "len", "(", "joints", ")", "==", "num_joints", ",", "'joint num diff: {} vs {}'", ".", "format", "(", "len", "(", "joints", ")", ",", "\n", "num_joints", ")", "\n", "\n", "joints_3d", "[", ":", ",", "0", ":", "2", "]", "=", "joints", "[", ":", ",", "0", ":", "2", "]", "\n", "joints_3d_vis", "[", ":", ",", "0", "]", "=", "joints_vis", "[", ":", "]", "\n", "joints_3d_vis", "[", ":", ",", "1", "]", "=", "joints_vis", "[", ":", "]", "\n", "\n", "", "image_dir", "=", "'images.zip@'", "if", "data_format", "==", "'zip'", "else", "'images'", "\n", "gt_db", ".", "append", "(", "\n", "{", "\n", "'image'", ":", "os", ".", "path", ".", "join", "(", "root", ",", "image_dir", ",", "image_name", ")", ",", "\n", "'center'", ":", "c", ",", "\n", "'scale'", ":", "s", ",", "\n", "'joints_3d'", ":", "joints_3d", ",", "\n", "'joints_3d_vis'", ":", "joints_3d_vis", ",", "\n", "'filename'", ":", "''", ",", "\n", "'imgnum'", ":", "0", ",", "\n", "}", "\n", ")", "\n", "\n", "", "return", "gt_db", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUMPIIRGBD3D2DSkeleton.__len__": [[383, 385], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "db", ")", "+", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUMPIIRGBD3D2DSkeleton.mpii_getitem": [[386, 434], ["copy.deepcopy", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "mpii_utils.get_affine_transform", "cv2.warpAffine", "cv2.warpAffine", "cv2.warpAffine", "cv2.warpAffine", "range", "dataset.NTUMPIIRGBD3D2DSkeleton.generate_joint2d_heatmap", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "img.permute.permute.permute", "rgb_heatmap.permute.permute.permute", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.array", "numpy.array", "numpy.array", "rgb_heatmap.permute.permute.astype", "numpy.clip", "numpy.clip", "mpii_utils.affine_transform", "random.random", "random.random", "random.random", "random.random", "numpy.array", "random.random", "random.random", "random.random", "random.random", "numpy.random.randn", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.mpii_utils.get_affine_transform", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBD3D2DSkeleton.generate_joint2d_heatmap", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.mpii_utils.affine_transform"], ["", "def", "mpii_getitem", "(", "self", ",", "index", ")", ":", "\n", "        ", "db_rec", "=", "copy", ".", "deepcopy", "(", "self", ".", "db", "[", "index", "]", ")", "\n", "image_file", "=", "db_rec", "[", "'image'", "]", "\n", "filename", "=", "db_rec", "[", "'filename'", "]", "if", "'filename'", "in", "db_rec", "else", "''", "\n", "imgnum", "=", "db_rec", "[", "'imgnum'", "]", "if", "'imgnum'", "in", "db_rec", "else", "''", "\n", "\n", "data_numpy", "=", "cv2", ".", "imread", "(", "image_file", ",", "cv2", ".", "IMREAD_COLOR", "|", "cv2", ".", "IMREAD_IGNORE_ORIENTATION", ")", "\n", "data_numpy", "=", "cv2", ".", "cvtColor", "(", "data_numpy", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "joints", "=", "db_rec", "[", "'joints_3d'", "]", "\n", "joints_vis", "=", "db_rec", "[", "'joints_3d_vis'", "]", "\n", "c", "=", "db_rec", "[", "'center'", "]", "\n", "s", "=", "db_rec", "[", "'scale'", "]", "\n", "score", "=", "db_rec", "[", "'score'", "]", "if", "'score'", "in", "db_rec", "else", "1", "\n", "r", "=", "0", "\n", "\n", "if", "self", ".", "random_resized_crop", ":", "\n", "            ", "sf", "=", "0.25", "\n", "rf", "=", "30", "\n", "s", "=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "sf", "+", "1", ",", "1", "-", "sf", ",", "1", "+", "sf", ")", "\n", "r", "=", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "rf", ",", "-", "rf", "*", "2", ",", "rf", "*", "2", ")", "if", "random", ".", "random", "(", ")", "<", "0.6", "else", "0", "\n", "", "trans", "=", "get_affine_transform", "(", "c", ",", "s", ",", "r", ",", "self", ".", "size", ")", "\n", "img", "=", "cv2", ".", "warpAffine", "(", "\n", "data_numpy", ",", "\n", "trans", ",", "\n", "self", ".", "size", ",", "\n", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "mpii_num_joints", ")", ":", "\n", "            ", "if", "joints_vis", "[", "i", ",", "0", "]", ">", "0.0", ":", "\n", "                ", "joints", "[", "i", ",", "0", ":", "2", "]", "=", "affine_transform", "(", "joints", "[", "i", ",", "0", ":", "2", "]", ",", "trans", ")", "\n", "", "", "rgb_heatmap", "=", "self", ".", "generate_joint2d_heatmap", "(", "joints", "[", ":", ",", ":", "2", "]", ",", "self", ".", "mpii_num_joints", ",", "self", ".", "size", "[", "0", "]", ",", "self", ".", "size", "[", "1", "]", ",", "self", ".", "pos_enc_mpii", ")", "\n", "\n", "if", "self", ".", "random_flip", "and", "random", ".", "random", "(", ")", "<=", "0.5", ":", "\n", "            ", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "rgb_heatmap", "=", "rgb_heatmap", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "img", "/=", "255.0", "\n", "img", "-=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ")", "\n", "img", "/=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ")", "\n", "rgb_heatmap", "=", "torch", ".", "from_numpy", "(", "rgb_heatmap", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "\n", "img", "=", "img", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "rgb_heatmap", "=", "rgb_heatmap", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "fake_depth", "=", "torch", ".", "zeros_like", "(", "img", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "img", ",", "fake_depth", ",", "rgb_heatmap", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUMPIIRGBD3D2DSkeleton.__getitem__": [[435, 456], ["len", "dataset.NTUMPIIRGBD3D2DSkeleton.mpii_getitem", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "dataset.NTURGBD3DSkeleton.__getitem__", "numpy.array", "dataset.NTUMPIIRGBD3D2DSkeleton.Kinect2MPII", "dataset.NTUMPIIRGBD3D2DSkeleton.generate_joint2d_heatmap", "dataset.NTUMPIIRGBD3D2DSkeleton.transform_heatmap", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dataset.NTUMPIIRGBD3D2DSkeleton.append", "len", "dataset.NTUMPIIRGBD3D2DSkeleton.permute"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUMPIIRGBD3D2DSkeletonGCN.mpii_getitem", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DatasetFromSampler.__getitem__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBDSegJoint.Kinect2MPII", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBD3D2DSkeleton.generate_joint2d_heatmap", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBD3D2DSkeleton.transform_heatmap"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "index", "<", "len", "(", "self", ".", "db", ")", ":", "\n", "            ", "data", "=", "self", ".", "mpii_getitem", "(", "index", ")", "\n", "joints3d", "=", "torch", ".", "zeros", "(", "[", "self", ".", "num_joints", ",", "3", "]", ")", "\n", "true_depth", "=", "0", "\n", "", "else", ":", "\n", "            ", "rgbd", ",", "_", ",", "joints3d", ",", "resize_param", ",", "skeleton_dict", "=", "NTURGBD3DSkeleton", ".", "__getitem__", "(", "self", ",", "index", "-", "len", "(", "self", ".", "db", ")", ",", "return_resize_param", "=", "True", ")", "\n", "joints2d", "=", "[", "]", "\n", "for", "joint", "in", "skeleton_dict", "[", "'joints'", "]", "[", "0", "]", "[", "'d_loc'", "]", ":", "\n", "                ", "joints2d", ".", "append", "(", "joint", ")", "\n", "", "joints2d", "=", "np", ".", "array", "(", "joints2d", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "joints2d", "=", "self", ".", "Kinect2MPII", "(", "joints2d", ")", "\n", "num_joints", "=", "joints2d", ".", "shape", "[", "0", "]", "\n", "assert", "num_joints", "==", "self", ".", "mpii_num_joints", "\n", "image_h", ",", "image_w", "=", "rgbd", ".", "shape", "[", "-", "2", "]", ",", "rgbd", ".", "shape", "[", "-", "1", "]", "\n", "rgb_heatmap", "=", "self", ".", "generate_joint2d_heatmap", "(", "joints2d", ",", "num_joints", ",", "image_h", ",", "image_w", ",", "self", ".", "pos_enc_mpii", ")", "\n", "rgb_heatmap", "=", "self", ".", "transform_heatmap", "(", "rgb_heatmap", ",", "resize_param", ")", "\n", "data", "=", "torch", ".", "cat", "(", "[", "rgbd", ",", "rgb_heatmap", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "]", ",", "dim", "=", "0", ")", "\n", "true_depth", "=", "1", "\n", "\n", "", "return", "data", ",", "index", ",", "joints3d", ",", "true_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUMPIIRGBD3D2DSkeletonGCN.__init__": [[475, 481], ["dataset.NTUMPIIRGBD3D2DSkeleton.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ntu_root", ",", "ntu_file_list", ",", "mpii_root", ",", "mpii_image_set", ",", "size", "=", "320", ",", "random_flip", "=", "False", ",", "random_resized_crop", "=", "False", ",", "\n", "use_jigsaw", "=", "False", ",", "need_gt", "=", "False", ")", ":", "\n", "        ", "super", "(", "NTUMPIIRGBD3D2DSkeletonGCN", ",", "self", ")", ".", "__init__", "(", "ntu_root", ",", "ntu_file_list", ",", "mpii_root", ",", "mpii_image_set", ",", "size", "=", "size", ",", "\n", "random_flip", "=", "random_flip", ",", "random_resized_crop", "=", "random_resized_crop", ",", "\n", "use_jigsaw", "=", "use_jigsaw", ",", "need_gt", "=", "need_gt", ")", "\n", "self", ".", "flip_pairs", "=", "[", "[", "0", ",", "5", "]", ",", "[", "1", ",", "4", "]", ",", "[", "2", ",", "3", "]", ",", "[", "10", ",", "15", "]", ",", "[", "11", ",", "14", "]", ",", "[", "12", ",", "13", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUMPIIRGBD3D2DSkeletonGCN.normalize_joints_myway": [[482, 489], ["_joints2d.copy", "max", "_joints2d.copy.max", "numpy.abs", "_joints2d.copy.min"], "methods", ["None"], ["", "def", "normalize_joints_myway", "(", "self", ",", "_joints2d", ",", "root_index", "=", "6", ")", ":", "\n", "        ", "joints2d", "=", "_joints2d", ".", "copy", "(", ")", "\n", "joints2d", "-=", "joints2d", "[", "root_index", ",", ":", "]", "\n", "joints2d", "=", "joints2d", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "s", "=", "max", "(", "joints2d", ".", "max", "(", ")", ",", "np", ".", "abs", "(", "joints2d", ".", "min", "(", ")", ")", ")", "\n", "joints2d", "/=", "s", "\n", "return", "joints2d", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUMPIIRGBD3D2DSkeletonGCN.normalize_joints_liftway": [[490, 493], ["numpy.array"], "methods", ["None"], ["", "def", "normalize_joints_liftway", "(", "self", ",", "_joints2d", ",", "w", ",", "h", ")", ":", "\n", "        ", "_joints2d", "=", "_joints2d", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "return", "_joints2d", "/", "w", "*", "2", "-", "np", ".", "array", "(", "[", "1", ",", "h", "/", "w", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUMPIIRGBD3D2DSkeletonGCN.flip_normalized_joints": [[494, 501], ["norm_joints.copy"], "methods", ["None"], ["", "def", "flip_normalized_joints", "(", "self", ",", "norm_joints", ")", ":", "\n", "        ", "norm_joints", "[", ":", ",", "1", "]", "=", "-", "norm_joints", "[", ":", ",", "1", "]", "\n", "tmp_joints", "=", "norm_joints", ".", "copy", "(", ")", "\n", "for", "i", ",", "j", "in", "self", ".", "flip_pairs", ":", "\n", "            ", "norm_joints", "[", "i", ",", ":", "]", "=", "tmp_joints", "[", "j", ",", ":", "]", "\n", "norm_joints", "[", "j", ",", ":", "]", "=", "tmp_joints", "[", "i", ",", ":", "]", "\n", "", "return", "norm_joints", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUMPIIRGBD3D2DSkeletonGCN.mpii_getitem": [[502, 563], ["copy.deepcopy", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "mpii_utils.get_affine_transform", "cv2.warpAffine", "cv2.warpAffine", "cv2.warpAffine", "cv2.warpAffine", "joints[].copy", "dataset.NTUMPIIRGBD3D2DSkeletonGCN.normalize_joints_myway", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "img.permute.permute.permute", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "numpy.logical_and", "range", "dataset.NTUMPIIRGBD3D2DSkeletonGCN.flip_normalized_joints", "numpy.array", "numpy.array", "numpy.array", "numpy.logical_and", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.clip", "numpy.clip", "random.random", "random.random", "random.random", "random.random", "numpy.array", "numpy.logical_and", "numpy.logical_and", "random.random", "random.random", "random.random", "random.random", "mpii_utils.affine_transform", "numpy.random.randn", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.mpii_utils.get_affine_transform", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBDSegJoint.normalize_joints_myway", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.flip_normalized_joints", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.mpii_utils.affine_transform"], ["", "def", "mpii_getitem", "(", "self", ",", "index", ")", ":", "\n", "        ", "db_rec", "=", "copy", ".", "deepcopy", "(", "self", ".", "db", "[", "index", "]", ")", "\n", "image_file", "=", "db_rec", "[", "'image'", "]", "\n", "filename", "=", "db_rec", "[", "'filename'", "]", "if", "'filename'", "in", "db_rec", "else", "''", "\n", "imgnum", "=", "db_rec", "[", "'imgnum'", "]", "if", "'imgnum'", "in", "db_rec", "else", "''", "\n", "\n", "data_numpy", "=", "cv2", ".", "imread", "(", "image_file", ",", "cv2", ".", "IMREAD_COLOR", "|", "cv2", ".", "IMREAD_IGNORE_ORIENTATION", ")", "\n", "data_numpy", "=", "cv2", ".", "cvtColor", "(", "data_numpy", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "joints", "=", "db_rec", "[", "'joints_3d'", "]", "\n", "joints_vis", "=", "db_rec", "[", "'joints_3d_vis'", "]", "\n", "c", "=", "db_rec", "[", "'center'", "]", "\n", "s", "=", "db_rec", "[", "'scale'", "]", "\n", "score", "=", "db_rec", "[", "'score'", "]", "if", "'score'", "in", "db_rec", "else", "1", "\n", "r", "=", "0", "\n", "\n", "if", "self", ".", "random_resized_crop", ":", "\n", "            ", "sf", "=", "0.25", "\n", "rf", "=", "30", "\n", "s", "=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "sf", "+", "1", ",", "1", "-", "sf", ",", "1", "+", "sf", ")", "\n", "r", "=", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "rf", ",", "-", "rf", "*", "2", ",", "rf", "*", "2", ")", "if", "random", ".", "random", "(", ")", "<", "0.6", "else", "0", "\n", "", "trans", "=", "get_affine_transform", "(", "c", ",", "s", ",", "r", ",", "self", ".", "size", ")", "\n", "img", "=", "cv2", ".", "warpAffine", "(", "\n", "data_numpy", ",", "\n", "trans", ",", "\n", "self", ".", "size", ",", "\n", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "original_joints", "=", "joints", "[", ":", ",", ":", "2", "]", ".", "copy", "(", ")", "\n", "if", "self", ".", "random_resized_crop", ":", "\n", "            ", "num_joints", "=", "joints_vis", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "num_joints", ")", ":", "\n", "                ", "if", "joints_vis", "[", "i", ",", "0", "]", ">", "0.0", ":", "\n", "                    ", "original_joints", "[", "i", ",", "0", ":", "2", "]", "=", "affine_transform", "(", "joints", "[", "i", ",", "0", ":", "2", "]", ",", "trans", ")", "\n", "\n", "", "", "", "norm_joints", "=", "self", ".", "normalize_joints_myway", "(", "joints", "[", ":", ",", ":", "2", "]", ")", "\n", "\n", "original_joints", "=", "original_joints", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "# rgb_heatmap = self.generate_joint2d_heatmap(joints[:, :2], self.mpii_num_joints, self.size[0], self.size[1], self.pos_enc_mpii)", "\n", "\n", "if", "self", ".", "random_flip", "and", "random", ".", "random", "(", ")", "<=", "0.5", ":", "\n", "            ", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "norm_joints", "=", "self", ".", "flip_normalized_joints", "(", "norm_joints", ")", "\n", "original_joints", "[", ":", ",", "1", "]", "=", "self", ".", "size", "[", "1", "]", "-", "original_joints", "[", ":", ",", "1", "]", "\n", "# rgb_heatmap = rgb_heatmap[:, ::-1, :]", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "img", "/=", "255.0", "\n", "img", "-=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ")", "\n", "img", "/=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ")", "\n", "# rgb_heatmap = torch.from_numpy(rgb_heatmap.astype(np.float32))", "\n", "\n", "img", "=", "img", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "# rgb_heatmap = rgb_heatmap.permute(2, 0, 1)", "\n", "fake_depth", "=", "torch", ".", "zeros_like", "(", "img", ")", "\n", "\n", "joints_vis", "=", "np", ".", "logical_and", "(", "\n", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "original_joints", "[", ":", ",", "0", "]", ">=", "0", ",", "original_joints", "[", ":", ",", "0", "]", "<", "self", ".", "size", "[", "0", "]", ")", ",", "\n", "np", ".", "logical_and", "(", "original_joints", "[", ":", ",", "1", "]", ">=", "0", ",", "original_joints", "[", ":", ",", "1", "]", "<", "self", ".", "size", "[", "0", "]", ")", ")", ",", "\n", "joints_vis", "[", ":", ",", "0", "]", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "img", ",", "fake_depth", "]", ",", "0", ")", ",", "norm_joints", ",", "original_joints", ",", "joints_vis", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUMPIIRGBD3D2DSkeletonGCN.transfer_fname_geodesic": [[564, 569], ["f.replace.replace.replace", "f.replace.replace.replace", "f.replace.replace.replace"], "methods", ["None"], ["", "def", "transfer_fname_geodesic", "(", "self", ",", "f", ")", ":", "\n", "        ", "f", "=", "f", ".", "replace", "(", "'nturgb+d_rgb_warped_correction'", ",", "'HumanRGBD/NTURGBD/nturgb+d_geodesic_masked'", ")", "\n", "f", "=", "f", ".", "replace", "(", "'WRGB'", ",", "'Geo'", ")", "\n", "f", "=", "f", ".", "replace", "(", "'jpg'", ",", "'pkl'", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUMPIIRGBD3D2DSkeletonGCN.__getitem__": [[570, 618], ["dataset.generate_scale_mpii", "len", "dataset.NTUMPIIRGBD3D2DSkeletonGCN.mpii_getitem", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "dataset.NTURGBD3DSkeleton.__getitem__", "numpy.array", "dataset.NTUMPIIRGBD3D2DSkeletonGCN.Kinect2MPII", "dataset.NTUMPIIRGBD3D2DSkeletonGCN.normalize_joints_myway", "numpy.logical_and", "joints2d[].copy", "torch.zeros_like.sum", "torch.zeros_like.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "norm_depth.unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.zeros_like.float", "torch.zeros_like.float", "dataset.NTUMPIIRGBD3D2DSkeletonGCN.append", "dataset.NTUMPIIRGBD3D2DSkeletonGCN.flip_normalized_joints", "numpy.logical_and", "numpy.logical_and", "depth.sum", "torch.zeros_like.sum", "torch.zeros_like.sum", "dataset.NTUMPIIRGBD3D2DSkeletonGCN.copy().astype", "joints2d[].copy.copy", "numpy.logical_and.astype().copy", "len", "numpy.logical_not", "numpy.logical_not", "dataset.NTUMPIIRGBD3D2DSkeletonGCN.copy", "numpy.logical_and.astype"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.generate_scale_mpii", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUMPIIRGBD3D2DSkeletonGCN.mpii_getitem", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DatasetFromSampler.__getitem__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBDSegJoint.Kinect2MPII", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBDSegJoint.normalize_joints_myway", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.flip_normalized_joints"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "index", "<", "len", "(", "self", ".", "db", ")", ":", "\n", "            ", "rgbd", ",", "norm_joints", ",", "original_joints2d", ",", "joints_vis", "=", "self", ".", "mpii_getitem", "(", "index", ")", "\n", "joints3d", "=", "torch", ".", "zeros", "(", "[", "self", ".", "num_joints", ",", "3", "]", ")", "\n", "true_depth", "=", "0", "\n", "depth_mask", "=", "torch", ".", "zeros_like", "(", "rgbd", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "rgbd", ",", "_", ",", "joints3d", ",", "resize_param", ",", "skeleton_dict", "=", "NTURGBD3DSkeleton", ".", "__getitem__", "(", "self", ",", "index", "-", "len", "(", "self", ".", "db", ")", ",", "return_resize_param", "=", "True", ")", "\n", "joints2d", "=", "[", "]", "\n", "for", "joint", "in", "skeleton_dict", "[", "'joints'", "]", "[", "0", "]", "[", "'d_loc'", "]", ":", "\n", "                ", "joints2d", ".", "append", "(", "joint", ")", "\n", "", "joints2d", "=", "np", ".", "array", "(", "joints2d", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "joints2d", "=", "self", ".", "Kinect2MPII", "(", "joints2d", ")", "\n", "num_joints", "=", "joints2d", ".", "shape", "[", "0", "]", "\n", "assert", "num_joints", "==", "self", ".", "mpii_num_joints", "\n", "\n", "i", ",", "j", ",", "h", ",", "w", ",", "need_flip", ",", "original_h", ",", "original_w", "=", "resize_param", "\n", "\n", "norm_joints", "=", "self", ".", "normalize_joints_myway", "(", "joints2d", ")", "\n", "if", "self", ".", "random_flip", "and", "resize_param", "[", "-", "1", "]", ":", "\n", "                ", "norm_joints", "=", "self", ".", "flip_normalized_joints", "(", "norm_joints", ")", "\n", "\n", "", "joints_vis", "=", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "joints2d", "[", ":", ",", "1", "]", ">", "i", ",", "joints2d", "[", ":", ",", "1", "]", "<", "i", "+", "h", ")", ",", "\n", "np", ".", "logical_and", "(", "joints2d", "[", ":", ",", "0", "]", ">", "j", ",", "joints2d", "[", ":", ",", "1", "]", "<", "j", "+", "w", ")", ")", "\n", "original_joints2d", "=", "joints2d", "[", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "original_joints2d", "[", ":", ",", "0", "]", "=", "(", "original_joints2d", "[", ":", ",", "0", "]", "-", "i", ")", "/", "h", "*", "self", ".", "size", "[", "0", "]", "\n", "original_joints2d", "[", ":", ",", "1", "]", "=", "(", "original_joints2d", "[", ":", ",", "1", "]", "-", "j", ")", "/", "w", "*", "self", ".", "size", "[", "0", "]", "\n", "true_depth", "=", "1", "\n", "\n", "depth", "=", "rgbd", "[", "3", ",", ":", ",", ":", "]", "\n", "depth_mask", "=", "depth", ">", "0", "\n", "\n", "mean", "=", "depth", ".", "sum", "(", ")", "/", "depth_mask", ".", "sum", "(", ")", "\n", "n", "=", "depth_mask", ".", "sum", "(", ")", "\n", "std", "=", "torch", ".", "sqrt", "(", "(", "(", "(", "depth", "-", "mean", ")", "**", "2", ")", "*", "depth_mask", ")", ".", "sum", "(", ")", "/", "(", "n", "-", "1", ")", ")", "\n", "norm_depth", "=", "(", "depth", "-", "mean", ")", "\n", "norm_depth", "[", "~", "depth_mask", "]", "=", "0", "\n", "rgbd", "[", "3", ":", ",", ":", ",", ":", "]", "=", "norm_depth", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "original_joints2d", "[", "np", ".", "logical_not", "(", "joints_vis", ")", ",", ":", "]", "=", "0", "\n", "norm_joints", "[", "np", ".", "logical_not", "(", "joints_vis", ")", ",", ":", "]", "=", "0", "\n", "\n", "scale", "=", "generate_scale_mpii", "(", "original_joints2d", ",", "joints_vis", ")", "\n", "\n", "return", "rgbd", ",", "index", ",", "torch", ".", "from_numpy", "(", "norm_joints", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "joints3d", ",", "torch", ".", "from_numpy", "(", "original_joints2d", ".", "copy", "(", ")", ")", ",", "torch", ".", "from_numpy", "(", "joints_vis", ".", "astype", "(", "np", ".", "int32", ")", ".", "copy", "(", ")", ")", ",", "true_depth", ",", "depth_mask", ".", "float", "(", ")", ",", "scale", "\n", "#    i, j, h, w, original_h, original_w", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.__init__": [[623, 671], ["dataset.NTURGBD3D2DSkeleton.__init__", "pycocotools.coco.COCO", "print", "len", "dict", "dict", "dict", "dataset.NTUCOCORGBD3D2DSkeletonGCN._load_image_set_index", "len", "print", "numpy.array().reshape", "dataset.NTUCOCORGBD3D2DSkeletonGCN._get_db", "dataset.NTUCOCORGBD3D2DSkeletonGCN._get_ann_file_keypoint", "zip", "zip", "dataset.NTUCOCORGBD3D2DSkeletonGCN.coco.loadCats", "range", "dataset.NTUCOCORGBD3D2DSkeletonGCN.coco.getCatIds", "numpy.array", "dataset.NTUCOCORGBD3D2DSkeletonGCN.coco.getCatIds"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN._load_image_set_index", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN._get_db", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN._get_ann_file_keypoint"], ["    ", "def", "__init__", "(", "self", ",", "ntu_root", ",", "ntu_file_list", ",", "coco_root", ",", "coco_image_set", ",", "size", "=", "320", ",", "random_flip", "=", "False", ",", "random_resized_crop", "=", "False", ",", "\n", "use_jigsaw", "=", "False", ",", "need_gt", "=", "False", ")", ":", "\n", "        ", "super", "(", "NTUCOCORGBD3D2DSkeletonGCN", ",", "self", ")", ".", "__init__", "(", "ntu_root", ",", "ntu_file_list", ",", "size", "=", "size", ",", "\n", "random_flip", "=", "random_flip", ",", "random_resized_crop", "=", "random_resized_crop", ",", "\n", "use_jigsaw", "=", "use_jigsaw", ",", "need_gt", "=", "need_gt", ")", "\n", "self", ".", "coco_root", "=", "coco_root", "\n", "self", ".", "coco_image_set", "=", "coco_image_set", "\n", "\n", "self", ".", "coco", "=", "COCO", "(", "self", ".", "_get_ann_file_keypoint", "(", ")", ")", "\n", "cats", "=", "[", "cat", "[", "'name'", "]", "\n", "for", "cat", "in", "self", ".", "coco", ".", "loadCats", "(", "self", ".", "coco", ".", "getCatIds", "(", ")", ")", "]", "\n", "self", ".", "classes", "=", "[", "'__background__'", "]", "+", "cats", "\n", "print", "(", "'=> classes: {}'", ".", "format", "(", "self", ".", "classes", ")", ")", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "classes", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "classes", ",", "range", "(", "self", ".", "num_classes", ")", ")", ")", "\n", "self", ".", "_class_to_coco_ind", "=", "dict", "(", "zip", "(", "cats", ",", "self", ".", "coco", ".", "getCatIds", "(", ")", ")", ")", "\n", "self", ".", "_coco_ind_to_class_ind", "=", "dict", "(", "\n", "[", "\n", "(", "self", ".", "_class_to_coco_ind", "[", "cls", "]", ",", "self", ".", "_class_to_ind", "[", "cls", "]", ")", "\n", "for", "cls", "in", "self", ".", "classes", "[", "1", ":", "]", "\n", "]", "\n", ")", "\n", "self", ".", "image_set_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "\n", "self", ".", "num_images", "=", "len", "(", "self", ".", "image_set_index", ")", "\n", "print", "(", "'=> num_images: {}'", ".", "format", "(", "self", ".", "num_images", ")", ")", "\n", "\n", "self", ".", "coco_num_joints", "=", "17", "\n", "self", ".", "flip_pairs", "=", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", ",", "[", "5", ",", "6", "]", ",", "[", "7", ",", "8", "]", ",", "\n", "[", "9", ",", "10", "]", ",", "[", "11", ",", "12", "]", ",", "[", "13", ",", "14", "]", ",", "[", "15", ",", "16", "]", "]", "\n", "self", ".", "parent_ids", "=", "None", "\n", "self", ".", "upper_body_ids", "=", "(", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ")", "\n", "self", ".", "lower_body_ids", "=", "(", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ")", "\n", "\n", "self", ".", "joints_weight", "=", "np", ".", "array", "(", "\n", "[", "\n", "1.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", ",", "1.2", ",", "1.2", ",", "\n", "1.5", ",", "1.5", ",", "1.", ",", "1.", ",", "1.2", ",", "1.2", ",", "1.5", ",", "1.5", "\n", "]", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", ".", "reshape", "(", "(", "self", ".", "coco_num_joints", ",", "1", ")", ")", "\n", "\n", "self", ".", "is_train", "=", "True", "\n", "self", ".", "aspect_ratio", "=", "1.0", "\n", "self", ".", "pixel_std", "=", "200", "\n", "self", ".", "data_format", "=", "'jpg'", "\n", "\n", "self", ".", "db", "=", "self", ".", "_get_db", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.__len__": [[672, 674], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "db", ")", "+", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN._get_ann_file_keypoint": [[675, 683], ["os.path.join"], "methods", ["None"], ["", "def", "_get_ann_file_keypoint", "(", "self", ")", ":", "\n", "        ", "\"\"\" self.root / annotations / person_keypoints_train2017.json \"\"\"", "\n", "prefix", "=", "'person_keypoints'", "if", "'test'", "not", "in", "self", ".", "coco_image_set", "else", "'image_info'", "\n", "return", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "coco_root", ",", "\n", "'annotations'", ",", "\n", "prefix", "+", "'_'", "+", "self", ".", "coco_image_set", "+", "'.json'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN._load_image_set_index": [[685, 689], ["dataset.NTUCOCORGBD3D2DSkeletonGCN.coco.getImgIds"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\" image id: int \"\"\"", "\n", "image_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "return", "image_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN._get_db": [[690, 697], ["dataset.NTUCOCORGBD3D2DSkeletonGCN._load_coco_keypoint_annotations"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN._load_coco_keypoint_annotations"], ["", "def", "_get_db", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_train", "or", "self", ".", "use_gt_bbox", ":", "\n", "# use ground truth bbox", "\n", "            ", "gt_db", "=", "self", ".", "_load_coco_keypoint_annotations", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "gt_db", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN._load_coco_keypoint_annotations": [[698, 704], ["gt_db.extend", "dataset.NTUCOCORGBD3D2DSkeletonGCN._load_coco_keypoint_annotation_kernal"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN._load_coco_keypoint_annotation_kernal"], ["", "def", "_load_coco_keypoint_annotations", "(", "self", ")", ":", "\n", "        ", "\"\"\" ground truth bbox and keypoints \"\"\"", "\n", "gt_db", "=", "[", "]", "\n", "for", "index", "in", "self", ".", "image_set_index", ":", "\n", "            ", "gt_db", ".", "extend", "(", "self", ".", "_load_coco_keypoint_annotation_kernal", "(", "index", ")", ")", "\n", "", "return", "gt_db", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN._load_coco_keypoint_annotation_kernal": [[705, 771], ["dataset.NTUCOCORGBD3D2DSkeletonGCN.coco.getAnnIds", "dataset.NTUCOCORGBD3D2DSkeletonGCN.coco.loadAnns", "dataset.NTUCOCORGBD3D2DSkeletonGCN.coco.loadImgs", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "numpy.zeros", "numpy.zeros", "range", "dataset.NTUCOCORGBD3D2DSkeletonGCN._box2cs", "rec.append", "valid_objs.append", "max", "dataset.NTUCOCORGBD3D2DSkeletonGCN.image_path_from_index", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN._box2cs", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.image_path_from_index"], ["", "def", "_load_coco_keypoint_annotation_kernal", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        coco ann: [u'segmentation', u'area', u'iscrowd', u'image_id', u'bbox', u'category_id', u'id']\n        iscrowd:\n            crowd instances are handled by marking their overlaps with all categories to -1\n            and later excluded in training\n        bbox:\n            [x1, y1, w, h]\n        :param index: coco image id\n        :return: db entry\n        \"\"\"", "\n", "im_ann", "=", "self", ".", "coco", ".", "loadImgs", "(", "index", ")", "[", "0", "]", "\n", "width", "=", "im_ann", "[", "'width'", "]", "\n", "height", "=", "im_ann", "[", "'height'", "]", "\n", "\n", "annIds", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "index", ",", "iscrowd", "=", "False", ")", "\n", "objs", "=", "self", ".", "coco", ".", "loadAnns", "(", "annIds", ")", "\n", "\n", "# sanitize bboxes", "\n", "valid_objs", "=", "[", "]", "\n", "for", "obj", "in", "objs", ":", "\n", "            ", "x", ",", "y", ",", "w", ",", "h", "=", "obj", "[", "'bbox'", "]", "\n", "x1", "=", "np", ".", "max", "(", "(", "0", ",", "x", ")", ")", "\n", "y1", "=", "np", ".", "max", "(", "(", "0", ",", "y", ")", ")", "\n", "x2", "=", "np", ".", "min", "(", "(", "width", "-", "1", ",", "x1", "+", "np", ".", "max", "(", "(", "0", ",", "w", "-", "1", ")", ")", ")", ")", "\n", "y2", "=", "np", ".", "min", "(", "(", "height", "-", "1", ",", "y1", "+", "np", ".", "max", "(", "(", "0", ",", "h", "-", "1", ")", ")", ")", ")", "\n", "if", "obj", "[", "'area'", "]", ">", "0", "and", "x2", ">=", "x1", "and", "y2", ">=", "y1", ":", "\n", "                ", "obj", "[", "'clean_bbox'", "]", "=", "[", "x1", ",", "y1", ",", "x2", "-", "x1", ",", "y2", "-", "y1", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "", "", "objs", "=", "valid_objs", "\n", "\n", "rec", "=", "[", "]", "\n", "for", "obj", "in", "objs", ":", "\n", "            ", "cls", "=", "self", ".", "_coco_ind_to_class_ind", "[", "obj", "[", "'category_id'", "]", "]", "\n", "if", "cls", "!=", "1", ":", "\n", "                ", "continue", "\n", "\n", "# ignore objs without keypoints annotation", "\n", "", "if", "max", "(", "obj", "[", "'keypoints'", "]", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "joints_3d", "=", "np", ".", "zeros", "(", "(", "self", ".", "coco_num_joints", ",", "3", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "joints_3d_vis", "=", "np", ".", "zeros", "(", "(", "self", ".", "coco_num_joints", ",", "3", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "ipt", "in", "range", "(", "self", ".", "coco_num_joints", ")", ":", "\n", "                ", "joints_3d", "[", "ipt", ",", "0", "]", "=", "obj", "[", "'keypoints'", "]", "[", "ipt", "*", "3", "+", "0", "]", "\n", "joints_3d", "[", "ipt", ",", "1", "]", "=", "obj", "[", "'keypoints'", "]", "[", "ipt", "*", "3", "+", "1", "]", "\n", "joints_3d", "[", "ipt", ",", "2", "]", "=", "0", "\n", "t_vis", "=", "obj", "[", "'keypoints'", "]", "[", "ipt", "*", "3", "+", "2", "]", "\n", "if", "t_vis", ">", "1", ":", "\n", "                    ", "t_vis", "=", "1", "\n", "", "joints_3d_vis", "[", "ipt", ",", "0", "]", "=", "t_vis", "\n", "joints_3d_vis", "[", "ipt", ",", "1", "]", "=", "t_vis", "\n", "joints_3d_vis", "[", "ipt", ",", "2", "]", "=", "0", "\n", "\n", "", "center", ",", "scale", "=", "self", ".", "_box2cs", "(", "obj", "[", "'clean_bbox'", "]", "[", ":", "4", "]", ")", "\n", "rec", ".", "append", "(", "{", "\n", "'image'", ":", "self", ".", "image_path_from_index", "(", "index", ")", ",", "\n", "'center'", ":", "center", ",", "\n", "'scale'", ":", "scale", ",", "\n", "'joints_3d'", ":", "joints_3d", ",", "\n", "'joints_3d_vis'", ":", "joints_3d_vis", ",", "\n", "'filename'", ":", "''", ",", "\n", "'imgnum'", ":", "0", ",", "\n", "}", ")", "\n", "\n", "", "return", "rec", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN._box2cs": [[772, 775], ["dataset.NTUCOCORGBD3D2DSkeletonGCN._xywh2cs"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN._xywh2cs"], ["", "def", "_box2cs", "(", "self", ",", "box", ")", ":", "\n", "        ", "x", ",", "y", ",", "w", ",", "h", "=", "box", "[", ":", "4", "]", "\n", "return", "self", ".", "_xywh2cs", "(", "x", ",", "y", ",", "w", ",", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN._xywh2cs": [[776, 792], ["numpy.zeros", "numpy.array"], "methods", ["None"], ["", "def", "_xywh2cs", "(", "self", ",", "x", ",", "y", ",", "w", ",", "h", ")", ":", "\n", "        ", "center", "=", "np", ".", "zeros", "(", "(", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "center", "[", "0", "]", "=", "x", "+", "w", "*", "0.5", "\n", "center", "[", "1", "]", "=", "y", "+", "h", "*", "0.5", "\n", "\n", "if", "w", ">", "self", ".", "aspect_ratio", "*", "h", ":", "\n", "            ", "h", "=", "w", "*", "1.0", "/", "self", ".", "aspect_ratio", "\n", "", "elif", "w", "<", "self", ".", "aspect_ratio", "*", "h", ":", "\n", "            ", "w", "=", "h", "*", "self", ".", "aspect_ratio", "\n", "", "scale", "=", "np", ".", "array", "(", "\n", "[", "w", "*", "1.0", "/", "self", ".", "pixel_std", ",", "h", "*", "1.0", "/", "self", ".", "pixel_std", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "center", "[", "0", "]", "!=", "-", "1", ":", "\n", "            ", "scale", "=", "scale", "*", "1.25", "\n", "\n", "", "return", "center", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.image_path_from_index": [[793, 807], ["os.path.join"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\" example: images / train2017 / 000000119993.jpg \"\"\"", "\n", "file_name", "=", "'%012d.jpg'", "%", "index", "\n", "if", "'2014'", "in", "self", ".", "coco_image_set", ":", "\n", "            ", "file_name", "=", "'COCO_%s_'", "%", "self", ".", "coco_image_set", "+", "file_name", "\n", "\n", "", "prefix", "=", "'test2017'", "if", "'test'", "in", "self", ".", "coco_image_set", "else", "self", ".", "coco_image_set", "\n", "\n", "data_name", "=", "prefix", "+", "'.zip@'", "if", "self", ".", "data_format", "==", "'zip'", "else", "prefix", "\n", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "coco_root", ",", "'images'", ",", "data_name", ",", "file_name", ")", "\n", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.normalize_joints_myway": [[808, 815], ["_joints2d.copy", "max", "_joints2d.copy.max", "numpy.abs", "_joints2d.copy.min"], "methods", ["None"], ["", "def", "normalize_joints_myway", "(", "self", ",", "_joints2d", ",", "root_index", "=", "6", ")", ":", "\n", "        ", "joints2d", "=", "_joints2d", ".", "copy", "(", ")", "\n", "joints2d", "-=", "joints2d", "[", "root_index", ",", ":", "]", "\n", "joints2d", "=", "joints2d", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "s", "=", "max", "(", "joints2d", ".", "max", "(", ")", ",", "np", ".", "abs", "(", "joints2d", ".", "min", "(", ")", ")", ")", "\n", "joints2d", "/=", "s", "\n", "return", "joints2d", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.normalize_joints_liftway": [[816, 819], ["numpy.array"], "methods", ["None"], ["", "def", "normalize_joints_liftway", "(", "self", ",", "_joints2d", ",", "w", ",", "h", ")", ":", "\n", "        ", "_joints2d", "=", "_joints2d", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "return", "_joints2d", "/", "w", "*", "2", "-", "np", ".", "array", "(", "[", "1", ",", "h", "/", "w", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.flip_normalized_joints": [[820, 827], ["norm_joints.copy"], "methods", ["None"], ["", "def", "flip_normalized_joints", "(", "self", ",", "norm_joints", ")", ":", "\n", "        ", "norm_joints", "[", ":", ",", "1", "]", "=", "-", "norm_joints", "[", ":", ",", "1", "]", "\n", "tmp_joints", "=", "norm_joints", ".", "copy", "(", ")", "\n", "for", "i", ",", "j", "in", "self", ".", "flip_pairs", ":", "\n", "            ", "norm_joints", "[", "i", ",", ":", "]", "=", "tmp_joints", "[", "j", ",", ":", "]", "\n", "norm_joints", "[", "j", ",", ":", "]", "=", "tmp_joints", "[", "i", ",", ":", "]", "\n", "", "return", "norm_joints", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.coco_getitem": [[828, 888], ["copy.deepcopy", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "cv2.cvtColor", "mpii_utils.get_affine_transform", "cv2.warpAffine", "cv2.warpAffine", "cv2.warpAffine", "cv2.warpAffine", "joints[].copy", "dataset.NTUCOCORGBD3D2DSkeletonGCN.normalize_joints_myway", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "img.permute.permute.permute", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "numpy.logical_and", "range", "dataset.NTUCOCORGBD3D2DSkeletonGCN.flip_normalized_joints", "numpy.array", "numpy.array", "numpy.array", "numpy.logical_and", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.clip", "numpy.clip", "random.random", "random.random", "random.random", "random.random", "numpy.array", "numpy.logical_and", "numpy.logical_and", "random.random", "random.random", "random.random", "random.random", "mpii_utils.affine_transform", "numpy.random.randn", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.mpii_utils.get_affine_transform", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBDSegJoint.normalize_joints_myway", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.flip_normalized_joints", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.mpii_utils.affine_transform"], ["", "def", "coco_getitem", "(", "self", ",", "index", ")", ":", "\n", "        ", "db_rec", "=", "copy", ".", "deepcopy", "(", "self", ".", "db", "[", "index", "]", ")", "\n", "image_file", "=", "db_rec", "[", "'image'", "]", "\n", "filename", "=", "db_rec", "[", "'filename'", "]", "if", "'filename'", "in", "db_rec", "else", "''", "\n", "imgnum", "=", "db_rec", "[", "'imgnum'", "]", "if", "'imgnum'", "in", "db_rec", "else", "''", "\n", "\n", "data_numpy", "=", "cv2", ".", "imread", "(", "image_file", ",", "cv2", ".", "IMREAD_COLOR", "|", "cv2", ".", "IMREAD_IGNORE_ORIENTATION", ")", "\n", "data_numpy", "=", "cv2", ".", "cvtColor", "(", "data_numpy", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "joints", "=", "db_rec", "[", "'joints_3d'", "]", "\n", "joints_vis", "=", "db_rec", "[", "'joints_3d_vis'", "]", "\n", "c", "=", "db_rec", "[", "'center'", "]", "\n", "s", "=", "db_rec", "[", "'scale'", "]", "\n", "score", "=", "db_rec", "[", "'score'", "]", "if", "'score'", "in", "db_rec", "else", "1", "\n", "r", "=", "0", "\n", "\n", "if", "self", ".", "random_resized_crop", ":", "\n", "            ", "sf", "=", "0.25", "\n", "rf", "=", "30", "\n", "s", "=", "s", "*", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "sf", "+", "1", ",", "1", "-", "sf", ",", "1", "+", "sf", ")", "\n", "r", "=", "np", ".", "clip", "(", "np", ".", "random", ".", "randn", "(", ")", "*", "rf", ",", "-", "rf", "*", "2", ",", "rf", "*", "2", ")", "if", "random", ".", "random", "(", ")", "<", "0.6", "else", "0", "\n", "", "trans", "=", "get_affine_transform", "(", "c", ",", "s", ",", "r", ",", "self", ".", "size", ")", "\n", "img", "=", "cv2", ".", "warpAffine", "(", "\n", "data_numpy", ",", "\n", "trans", ",", "\n", "self", ".", "size", ",", "\n", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "original_joints", "=", "joints", "[", ":", ",", ":", "2", "]", ".", "copy", "(", ")", "\n", "if", "self", ".", "random_resized_crop", ":", "\n", "            ", "num_joints", "=", "joints_vis", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "num_joints", ")", ":", "\n", "                ", "if", "joints_vis", "[", "i", ",", "0", "]", ">", "0.0", ":", "\n", "                    ", "original_joints", "[", "i", ",", "0", ":", "2", "]", "=", "affine_transform", "(", "joints", "[", "i", ",", "0", ":", "2", "]", ",", "trans", ")", "\n", "", "", "", "norm_joints", "=", "self", ".", "normalize_joints_myway", "(", "joints", "[", ":", ",", ":", "2", "]", ")", "\n", "\n", "original_joints", "=", "original_joints", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "# rgb_heatmap = self.generate_joint2d_heatmap(joints[:, :2], self.mpii_num_joints, self.size[0], self.size[1], self.pos_enc_mpii)", "\n", "\n", "if", "self", ".", "random_flip", "and", "random", ".", "random", "(", ")", "<=", "0.5", ":", "\n", "            ", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "norm_joints", "=", "self", ".", "flip_normalized_joints", "(", "norm_joints", ")", "\n", "original_joints", "[", ":", ",", "1", "]", "=", "self", ".", "size", "[", "1", "]", "-", "original_joints", "[", ":", ",", "1", "]", "\n", "# rgb_heatmap = rgb_heatmap[:, ::-1, :]", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "img", "/=", "255.0", "\n", "img", "-=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ")", "\n", "img", "/=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ")", "\n", "# rgb_heatmap = torch.from_numpy(rgb_heatmap.astype(np.float32))", "\n", "\n", "img", "=", "img", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "# rgb_heatmap = rgb_heatmap.permute(2, 0, 1)", "\n", "fake_depth", "=", "torch", ".", "zeros_like", "(", "img", ")", "\n", "\n", "joints_vis", "=", "np", ".", "logical_and", "(", "\n", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "original_joints", "[", ":", ",", "0", "]", ">=", "0", ",", "original_joints", "[", ":", ",", "0", "]", "<", "self", ".", "size", "[", "0", "]", ")", ",", "\n", "np", ".", "logical_and", "(", "original_joints", "[", ":", ",", "1", "]", ">=", "0", ",", "original_joints", "[", ":", ",", "1", "]", "<", "self", ".", "size", "[", "0", "]", ")", ")", ",", "\n", "joints_vis", "[", ":", ",", "0", "]", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "img", ",", "fake_depth", "]", ",", "0", ")", ",", "norm_joints", ",", "original_joints", ",", "joints_vis", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.COCOReduce": [[889, 904], ["norm_joints[].reshape", "original_joints2d[].reshape"], "methods", ["None"], ["", "def", "COCOReduce", "(", "self", ",", "norm_joints", ",", "original_joints2d", ",", "joints_vis", ")", ":", "\n", "# COCO: 0 - \"nose\", 1 - \"left_eye\", 2 - \"right_eye\", 3 - \"left_ear\", 4 - \"right_ear\",", "\n", "#       5 - \"left_shoulder\", 6 - \"right_shoulder\", 7 - \"left_elbow\", 8 - \"right_elbow\",", "\n", "#       9 - \"left_wrist\", 10 - \"right_wrist\", 11 - \"left_hip\", 12 - \"right_hip\",", "\n", "#       13 - \"left_knee\", 14 - \"right_knee\", 15 - \"left_ankle\", 16 - \"right_ankle\"", "\n", "# MPII: 0 - r ankle, 1 - r knee, 2 - r hip, 3 - l hip, 4 - l knee,", "\n", "#       5 - l ankle, 6 - pelvis, 7 - thorax, 8 - upper neck, 9 - head top,", "\n", "#       10 - r wrist, 11 - r elbow, 12 - r shoulder, 13 - l shoulder,", "\n", "#       14 - l elbow, 15 - l wrist", "\n", "# Reduce: 0 - r ankle, 1 - r knee, 2 - r hip, 3 - l hip, 4 - l knee,", "\n", "#         5 - l ankle, 6 - head top,", "\n", "#         7 - r wrist, 8 - r elbow, 9 - r shoulder, 10 - l shoulder,", "\n", "#         11 - l elbow, 12 - l wrist", "\n", "        ", "select_ind", "=", "[", "16", ",", "14", ",", "12", ",", "11", ",", "13", ",", "15", ",", "0", ",", "10", ",", "8", ",", "6", ",", "5", ",", "7", ",", "9", "]", "\n", "return", "norm_joints", "[", "select_ind", "]", ".", "reshape", "(", "13", ",", "2", ")", ",", "original_joints2d", "[", "select_ind", "]", ".", "reshape", "(", "13", ",", "2", ")", ",", "joints_vis", "[", "select_ind", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.KinectReduce": [[905, 908], ["joints[].reshape"], "methods", ["None"], ["", "def", "KinectReduce", "(", "self", ",", "joints", ")", ":", "\n", "        ", "select_ind", "=", "[", "14", ",", "13", ",", "12", ",", "16", ",", "17", ",", "18", ",", "3", ",", "6", ",", "5", ",", "4", ",", "8", ",", "9", ",", "10", "]", "\n", "return", "joints", "[", "select_ind", "]", ".", "reshape", "(", "13", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.__getitem__": [[909, 955], ["dataset.generate_scale_mpii", "len", "dataset.NTUCOCORGBD3D2DSkeletonGCN.coco_getitem", "dataset.NTUCOCORGBD3D2DSkeletonGCN.COCOReduce", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "dataset.NTURGBD3DSkeleton.__getitem__", "numpy.array", "dataset.NTUCOCORGBD3D2DSkeletonGCN.KinectReduce", "dataset.NTUCOCORGBD3D2DSkeletonGCN.normalize_joints_myway", "numpy.logical_and", "joints2d[].copy", "torch.zeros_like.sum", "torch.zeros_like.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "norm_depth.unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.zeros_like.float", "torch.zeros_like.float", "dataset.NTUCOCORGBD3D2DSkeletonGCN.append", "dataset.NTUCOCORGBD3D2DSkeletonGCN.flip_normalized_joints", "numpy.logical_and", "numpy.logical_and", "depth.sum", "torch.zeros_like.sum", "torch.zeros_like.sum", "dataset.NTUCOCORGBD3D2DSkeletonGCN.copy().astype", "joints2d[].copy.copy", "numpy.logical_and.astype().copy", "len", "numpy.logical_not", "numpy.logical_not", "dataset.NTUCOCORGBD3D2DSkeletonGCN.copy", "numpy.logical_and.astype"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.generate_scale_mpii", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.coco_getitem", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.COCOReduce", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DatasetFromSampler.__getitem__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.KinectReduce", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBDSegJoint.normalize_joints_myway", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.flip_normalized_joints"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "index", "<", "len", "(", "self", ".", "db", ")", ":", "\n", "            ", "rgbd", ",", "norm_joints", ",", "original_joints2d", ",", "joints_vis", "=", "self", ".", "coco_getitem", "(", "index", ")", "\n", "norm_joints", ",", "original_joints2d", ",", "joints_vis", "=", "self", ".", "COCOReduce", "(", "norm_joints", ",", "original_joints2d", ",", "joints_vis", ")", "\n", "joints3d", "=", "torch", ".", "zeros", "(", "[", "self", ".", "num_joints", ",", "3", "]", ")", "\n", "true_depth", "=", "0", "\n", "depth_mask", "=", "torch", ".", "zeros_like", "(", "rgbd", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "rgbd", ",", "_", ",", "joints3d", ",", "resize_param", ",", "skeleton_dict", "=", "NTURGBD3DSkeleton", ".", "__getitem__", "(", "self", ",", "index", "-", "len", "(", "self", ".", "db", ")", ",", "return_resize_param", "=", "True", ")", "\n", "joints2d", "=", "[", "]", "\n", "for", "joint", "in", "skeleton_dict", "[", "'joints'", "]", "[", "0", "]", "[", "'d_loc'", "]", ":", "\n", "                ", "joints2d", ".", "append", "(", "joint", ")", "\n", "", "joints2d", "=", "np", ".", "array", "(", "joints2d", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "joints2d", "=", "self", ".", "KinectReduce", "(", "joints2d", ")", "\n", "\n", "i", ",", "j", ",", "h", ",", "w", ",", "need_flip", ",", "original_h", ",", "original_w", "=", "resize_param", "\n", "\n", "norm_joints", "=", "self", ".", "normalize_joints_myway", "(", "joints2d", ")", "\n", "if", "self", ".", "random_flip", "and", "resize_param", "[", "-", "1", "]", ":", "\n", "                ", "norm_joints", "=", "self", ".", "flip_normalized_joints", "(", "norm_joints", ")", "\n", "\n", "", "joints_vis", "=", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "joints2d", "[", ":", ",", "1", "]", ">", "i", ",", "joints2d", "[", ":", ",", "1", "]", "<", "i", "+", "h", ")", ",", "\n", "np", ".", "logical_and", "(", "joints2d", "[", ":", ",", "0", "]", ">", "j", ",", "joints2d", "[", ":", ",", "1", "]", "<", "j", "+", "w", ")", ")", "\n", "original_joints2d", "=", "joints2d", "[", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "original_joints2d", "[", ":", ",", "0", "]", "=", "(", "original_joints2d", "[", ":", ",", "0", "]", "-", "i", ")", "/", "h", "*", "self", ".", "size", "[", "0", "]", "\n", "original_joints2d", "[", ":", ",", "1", "]", "=", "(", "original_joints2d", "[", ":", ",", "1", "]", "-", "j", ")", "/", "w", "*", "self", ".", "size", "[", "0", "]", "\n", "true_depth", "=", "1", "\n", "\n", "depth", "=", "rgbd", "[", "3", ",", ":", ",", ":", "]", "\n", "depth_mask", "=", "depth", ">", "0", "\n", "\n", "mean", "=", "depth", ".", "sum", "(", ")", "/", "depth_mask", ".", "sum", "(", ")", "\n", "n", "=", "depth_mask", ".", "sum", "(", ")", "\n", "std", "=", "torch", ".", "sqrt", "(", "(", "(", "(", "depth", "-", "mean", ")", "**", "2", ")", "*", "depth_mask", ")", ".", "sum", "(", ")", "/", "(", "n", "-", "1", ")", ")", "\n", "norm_depth", "=", "(", "depth", "-", "mean", ")", "\n", "norm_depth", "[", "~", "depth_mask", "]", "=", "0", "\n", "rgbd", "[", "3", ":", ",", ":", ",", ":", "]", "=", "norm_depth", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "original_joints2d", "[", "np", ".", "logical_not", "(", "joints_vis", ")", ",", ":", "]", "=", "0", "\n", "norm_joints", "[", "np", ".", "logical_not", "(", "joints_vis", ")", ",", ":", "]", "=", "0", "\n", "scale", "=", "generate_scale_mpii", "(", "original_joints2d", ",", "joints_vis", ")", "\n", "\n", "return", "rgbd", ",", "index", ",", "torch", ".", "from_numpy", "(", "norm_joints", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "joints3d", ",", "torch", ".", "from_numpy", "(", "original_joints2d", ".", "copy", "(", ")", ")", ",", "torch", ".", "from_numpy", "(", "joints_vis", ".", "astype", "(", "np", ".", "int32", ")", ".", "copy", "(", ")", ")", ",", "true_depth", ",", "depth_mask", ".", "float", "(", ")", ",", "scale", "\n", "#    i, j, h, w, original_h, original_w", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBDSegJoint.__init__": [[958, 1021], ["dataset.NTURGBD3D2DSkeleton.__init__", "sorted", "re.compile", "len", "numpy.array", "numpy.arange", "enumerate", "open", "f.readlines", "fn.split", "fn.split", "re.match", "os.path.join", "os.path.join", "dataset.NTURGBDSegJoint.__init__.convert2skeleton"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ntu_root", ",", "ntu_file_list", ",", "seg_root", ",", "seg_image_set", ",", "size", "=", "320", ",", "random_flip", "=", "False", ",", "random_resized_crop", "=", "False", ",", "use_jigsaw", "=", "False", ",", "need_gt", "=", "False", ",", "\n", "only_seg", "=", "False", ",", "mask_seg_depth", "=", "False", ",", "mask_seg_rgb", "=", "False", ")", ":", "\n", "        ", "super", "(", "NTURGBDSegJoint", ",", "self", ")", ".", "__init__", "(", "ntu_root", ",", "ntu_file_list", ",", "size", ",", "random_flip", ",", "random_resized_crop", ",", "use_jigsaw", ",", "need_gt", ")", "\n", "self", ".", "seg_root", "=", "seg_root", "\n", "self", ".", "seg_image_set", "=", "seg_image_set", "\n", "self", ".", "mpii_num_joints", "=", "16", "\n", "self", ".", "only_seg", "=", "only_seg", "\n", "self", ".", "mask_seg_depth", "=", "mask_seg_depth", "\n", "self", ".", "mask_seg_rgb", "=", "mask_seg_rgb", "\n", "\n", "with", "open", "(", "self", ".", "seg_image_set", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "lines", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "lines", "]", "\n", "", "lines", "=", "sorted", "(", "lines", ")", "\n", "\n", "def", "convert2depth", "(", "fn", ")", ":", "\n", "            ", "fn_list", "=", "fn", ".", "split", "(", "'/'", ")", "\n", "fn_list", "[", "0", "]", "=", "'depth'", "\n", "fn_list", "[", "1", "]", "=", "'MDepth-'", "+", "fn_list", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.png'", "\n", "return", "'/'", ".", "join", "(", "fn_list", ")", "\n", "\n", "", "def", "convert2gt", "(", "fn", ")", ":", "\n", "            ", "fn_list", "=", "fn", ".", "split", "(", "'/'", ")", "\n", "fn_list", "[", "0", "]", "=", "'png_annotation_v2'", "\n", "fn_list", "[", "1", "]", "=", "fn_list", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.png'", "\n", "return", "'/'", ".", "join", "(", "fn_list", ")", "\n", "\n", "", "compiled_regex", "=", "re", ".", "compile", "(", "'.*S(\\d{3})C(\\d{3})P(\\d{3})R(\\d{3})A(\\d{3})F(\\d{3}).*'", ")", "\n", "def", "convert2skeleton", "(", "fn", ")", ":", "\n", "            ", "match", "=", "re", ".", "match", "(", "compiled_regex", ",", "fn", ")", "\n", "setup", ",", "camera", ",", "performer", ",", "replication", ",", "action", ",", "frame", "=", "[", "*", "map", "(", "int", ",", "match", ".", "groups", "(", ")", ")", "]", "\n", "tag", "=", "fn", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "8", "]", "\n", "if", "setup", "<", "18", ":", "\n", "                ", "skeleton_fname", "=", "os", ".", "path", ".", "join", "(", "'./data/NTURGBD/NTURGBD/'", ",", "'nturgb+d_parsed_skeleton'", ",", "tag", ",", "'Skeleton-{:08d}.pkl'", ".", "format", "(", "frame", ")", ")", "\n", "", "else", ":", "\n", "                ", "skeleton_fname", "=", "os", ".", "path", ".", "join", "(", "'./data/NTURGBD/NTURGBD120/'", ",", "'nturgb+d_parsed_skeleton'", ",", "tag", ",", "'Skeleton-{:08d}.pkl'", ".", "format", "(", "frame", ")", ")", "\n", "", "return", "skeleton_fname", "\n", "\n", "", "self", ".", "seg_image_list", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "seg_root", ",", "l", ")", "for", "l", "in", "lines", "]", "\n", "self", ".", "seg_depth_list", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "seg_root", ",", "convert2depth", "(", "l", ")", ")", "for", "l", "in", "lines", "]", "\n", "self", ".", "seg_skeleton_list", "=", "[", "convert2skeleton", "(", "l", ")", "for", "l", "in", "lines", "]", "\n", "self", ".", "seg_gt_list", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "seg_root", ",", "convert2gt", "(", "l", ")", ")", "for", "l", "in", "lines", "]", "\n", "\n", "self", ".", "split", "=", "len", "(", "self", ".", "image_list", ")", "\n", "\n", "if", "not", "only_seg", ":", "\n", "            ", "self", ".", "image_list", "=", "self", ".", "image_list", "+", "self", ".", "seg_image_list", "\n", "self", ".", "depth_list", "=", "self", ".", "depth_list", "+", "self", ".", "seg_depth_list", "\n", "self", ".", "skeleton_list", "=", "self", ".", "skeleton_list", "+", "self", ".", "seg_skeleton_list", "\n", "", "else", ":", "\n", "            ", "self", ".", "image_list", "=", "self", ".", "seg_image_list", "\n", "self", ".", "depth_list", "=", "self", ".", "seg_depth_list", "\n", "self", ".", "skeleton_list", "=", "self", ".", "seg_skeleton_list", "\n", "\n", "\n", "", "self", ".", "original_label", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "6", ",", "7", ",", "8", ",", "17", ",", "18", ",", "19", ",", "25", ",", "26", ",", "27", ",", "32", ",", "33", ",", "34", ",", "38", ",", "39", ",", "43", ",", "44", ",", "46", ",", "49", ",", "50", ",", "56", ",", "58", "]", ")", "\n", "self", ".", "label_mapper", "=", "np", ".", "arange", "(", "60", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "self", ".", "original_label", ")", ":", "\n", "            ", "self", ".", "label_mapper", "[", "l", "]", "=", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBDSegJoint.Kinect2MPII": [[1022, 1025], ["joints[].reshape"], "methods", ["None"], ["", "", "def", "Kinect2MPII", "(", "self", ",", "joints", ")", ":", "\n", "        ", "select_ind", "=", "[", "14", ",", "13", ",", "12", ",", "16", ",", "17", ",", "18", ",", "0", ",", "1", ",", "2", ",", "3", ",", "6", ",", "5", ",", "4", ",", "8", ",", "9", ",", "10", "]", "\n", "return", "joints", "[", "select_ind", "]", ".", "reshape", "(", "16", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBDSegJoint.__len__": [[1026, 1028], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBDSegJoint.normalize_joints_myway": [[1029, 1036], ["_joints2d.copy", "max", "_joints2d.copy.max", "numpy.abs", "_joints2d.copy.min"], "methods", ["None"], ["", "def", "normalize_joints_myway", "(", "self", ",", "_joints2d", ",", "root_index", "=", "6", ")", ":", "\n", "        ", "joints2d", "=", "_joints2d", ".", "copy", "(", ")", "\n", "joints2d", "-=", "joints2d", "[", "root_index", ",", ":", "]", "\n", "joints2d", "=", "joints2d", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "s", "=", "max", "(", "joints2d", ".", "max", "(", ")", ",", "np", ".", "abs", "(", "joints2d", ".", "min", "(", ")", ")", ")", "\n", "joints2d", "/=", "s", "\n", "return", "joints2d", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBDSegJoint.__getitem__": [[1037, 1119], ["dataset.NTURGBD3DSkeleton.__getitem__", "numpy.array", "dataset.NTURGBDSegJoint.Kinect2MPII", "dataset.NTURGBDSegJoint.normalize_joints_myway", "numpy.logical_and", "joints2d[].copy", "torch.zeros_like.sum", "torch.zeros_like.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "norm_depth.unsqueeze", "dataset.generate_scale_mpii", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "PIL.Image.fromarray", "PIL.Image.fromarray", "torchvision.transforms.functional.resized_crop", "torchvision.transforms.functional.resized_crop", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "dataset.NTURGBDSegJoint.append", "dataset.NTURGBDSegJoint.flip_normalized_joints", "numpy.logical_and", "numpy.logical_and", "torch.zeros_like.sum", "torch.zeros_like.sum", "PIL.Image.open", "torchvision.transforms.functional.resized_crop", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torchvision.transforms.functional.resized_crop.numpy().astype", "torchvision.transforms.functional.resized_crop.numpy().astype", "numpy.stack().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.zeros_like.float", "torch.zeros_like.float", "int", "int", "float", "depth.sum", "torch.zeros_like.sum", "torch.zeros_like.sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dataset.NTURGBDSegJoint.copy().astype", "joints2d[].copy.copy", "numpy.logical_and.astype().copy", "numpy.logical_not", "numpy.logical_not", "numpy.array().astype", "torchvision.transforms.functional.resized_crop.numpy", "torchvision.transforms.functional.resized_crop.numpy", "numpy.stack", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "dataset.NTURGBDSegJoint.copy", "numpy.logical_and.astype", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DatasetFromSampler.__getitem__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBDSegJoint.Kinect2MPII", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTURGBDSegJoint.normalize_joints_myway", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.generate_scale_mpii", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.NTUCOCORGBD3D2DSkeletonGCN.flip_normalized_joints"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "rgbd", ",", "_", ",", "joints3d", ",", "resize_param", ",", "skeleton_dict", "=", "NTURGBD3DSkeleton", ".", "__getitem__", "(", "self", ",", "index", ",", "return_resize_param", "=", "True", ")", "\n", "joints2d", "=", "[", "]", "\n", "for", "joint", "in", "skeleton_dict", "[", "'joints'", "]", "[", "0", "]", "[", "'d_loc'", "]", ":", "\n", "            ", "joints2d", ".", "append", "(", "joint", ")", "\n", "", "joints2d", "=", "np", ".", "array", "(", "joints2d", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "joints2d", "=", "self", ".", "Kinect2MPII", "(", "joints2d", ")", "\n", "num_joints", "=", "joints2d", ".", "shape", "[", "0", "]", "\n", "assert", "num_joints", "==", "self", ".", "mpii_num_joints", "\n", "\n", "i", ",", "j", ",", "h", ",", "w", ",", "need_flip", ",", "original_h", ",", "original_w", "=", "resize_param", "\n", "\n", "norm_joints", "=", "self", ".", "normalize_joints_myway", "(", "joints2d", ")", "\n", "if", "self", ".", "random_flip", "and", "resize_param", "[", "-", "1", "]", ":", "\n", "            ", "norm_joints", "=", "self", ".", "flip_normalized_joints", "(", "norm_joints", ")", "\n", "\n", "", "joints_vis", "=", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "joints2d", "[", ":", ",", "1", "]", ">", "i", ",", "joints2d", "[", ":", ",", "1", "]", "<", "i", "+", "h", ")", ",", "\n", "np", ".", "logical_and", "(", "joints2d", "[", ":", ",", "0", "]", ">", "j", ",", "joints2d", "[", ":", ",", "1", "]", "<", "j", "+", "w", ")", ")", "\n", "original_joints2d", "=", "joints2d", "[", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "original_joints2d", "[", ":", ",", "0", "]", "=", "(", "original_joints2d", "[", ":", ",", "0", "]", "-", "i", ")", "/", "h", "*", "self", ".", "size", "[", "0", "]", "\n", "original_joints2d", "[", ":", ",", "1", "]", "=", "(", "original_joints2d", "[", ":", ",", "1", "]", "-", "j", ")", "/", "w", "*", "self", ".", "size", "[", "0", "]", "\n", "true_depth", "=", "1", "\n", "\n", "depth", "=", "rgbd", "[", "3", ",", ":", ",", ":", "]", "\n", "depth_mask", "=", "depth", ">", "0", "\n", "\n", "if", "depth_mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "mean", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "mean", "=", "depth", ".", "sum", "(", ")", "/", "depth_mask", ".", "sum", "(", ")", "\n", "", "n", "=", "depth_mask", ".", "sum", "(", ")", "\n", "std", "=", "torch", ".", "sqrt", "(", "(", "(", "(", "depth", "-", "mean", ")", "**", "2", ")", "*", "depth_mask", ")", ".", "sum", "(", ")", "/", "(", "n", "-", "1", ")", ")", "\n", "norm_depth", "=", "(", "depth", "-", "mean", ")", "\n", "norm_depth", "[", "~", "depth_mask", "]", "=", "0", "\n", "rgbd", "[", "3", ":", ",", ":", ",", ":", "]", "=", "norm_depth", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "original_joints2d", "[", "np", ".", "logical_not", "(", "joints_vis", ")", ",", ":", "]", "=", "0", "\n", "norm_joints", "[", "np", ".", "logical_not", "(", "joints_vis", ")", ",", ":", "]", "=", "0", "\n", "\n", "scale", "=", "generate_scale_mpii", "(", "original_joints2d", ",", "joints_vis", ")", "\n", "\n", "if", "index", ">=", "self", ".", "split", "or", "self", ".", "only_seg", ":", "\n", "            ", "if", "not", "self", ".", "only_seg", ":", "\n", "                ", "gt_fname", "=", "self", ".", "seg_gt_list", "[", "index", "-", "self", ".", "split", "]", "\n", "", "else", ":", "\n", "                ", "gt_fname", "=", "self", ".", "seg_gt_list", "[", "index", "]", "\n", "", "label", "=", "Image", ".", "open", "(", "gt_fname", ")", "\n", "label", "=", "TF", ".", "resized_crop", "(", "label", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "interpolation", "=", "PIL", ".", "Image", ".", "NEAREST", ")", "\n", "label", "=", "self", ".", "label_mapper", "[", "np", ".", "array", "(", "label", ")", ".", "astype", "(", "np", ".", "uint8", ")", "]", "\n", "label", "=", "torch", ".", "from_numpy", "(", "label", ")", "\n", "assert", "not", "self", ".", "random_flip", "\n", "true_label", "=", "1", "\n", "", "else", ":", "\n", "            ", "label", "=", "torch", ".", "zeros_like", "(", "rgbd", "[", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ")", "+", "255", "\n", "true_label", "=", "0", "\n", "\n", "", "if", "self", ".", "mask_seg_depth", ":", "\n", "            ", "if", "index", ">=", "self", ".", "split", "and", "not", "self", ".", "only_seg", ":", "\n", "                ", "true_depth", "=", "0", "\n", "depth_mask", "=", "torch", ".", "zeros_like", "(", "rgbd", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "rgbd", "=", "torch", ".", "cat", "(", "[", "rgbd", "[", ":", "3", "]", ",", "torch", ".", "zeros_like", "(", "rgbd", "[", ":", "3", "]", ")", "]", ",", "0", ")", "\n", "\n", "", "", "true_rgb", "=", "1", "\n", "if", "self", ".", "mask_seg_rgb", ":", "\n", "            ", "if", "index", ">=", "self", ".", "split", "and", "not", "self", ".", "only_seg", ":", "\n", "                ", "true_rgb", "=", "0", "\n", "rgbd", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros_like", "(", "rgbd", "[", ":", "3", "]", ")", ",", "rgbd", "[", "3", ":", "]", "]", ",", "0", ")", "\n", "\n", "", "", "grid_x", "=", "torch", ".", "arange", "(", "original_h", ")", "\n", "grid_y", "=", "torch", ".", "arange", "(", "original_w", ")", "\n", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "grid_x", ",", "grid_y", ")", "\n", "grid_x", "=", "Image", ".", "fromarray", "(", "grid_x", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint16", ")", ")", "\n", "grid_y", "=", "Image", ".", "fromarray", "(", "grid_y", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint16", ")", ")", "\n", "grid_x", "=", "TF", ".", "resized_crop", "(", "grid_x", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "interpolation", "=", "PIL", ".", "Image", ".", "NEAREST", ")", "\n", "grid_y", "=", "TF", ".", "resized_crop", "(", "grid_y", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "interpolation", "=", "PIL", ".", "Image", ".", "NEAREST", ")", "\n", "grid_xy", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "grid_x", ")", ",", "np", ".", "array", "(", "grid_y", ")", "]", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "int32", ")", ")", "\n", "\n", "return", "rgbd", ",", "index", ",", "torch", ".", "from_numpy", "(", "norm_joints", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "joints3d", ",", "torch", ".", "from_numpy", "(", "original_joints2d", ".", "copy", "(", ")", ")", ",", "torch", ".", "from_numpy", "(", "joints_vis", ".", "astype", "(", "np", ".", "int32", ")", ".", "copy", "(", ")", ")", ",", "true_depth", ",", "depth_mask", ".", "float", "(", ")", ",", "scale", ",", "label", ",", "true_label", ",", "true_rgb", ",", "grid_xy", ",", "int", "(", "original_h", ")", ",", "int", "(", "original_w", ")", ",", "float", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.dataset.generate_scale_mpii": [[457, 473], ["numpy.sqrt", "np.sqrt.max", "joint2d.reshape", "joint2d.reshape"], "function", ["None"], ["", "", "def", "generate_scale_mpii", "(", "joint2d", ",", "joint_vis", ")", ":", "\n", "# MPII: 0 - r ankle, 1 - r knee, 2 - r hip, 3 - l hip, 4 - l knee,", "\n", "#       5 - l ankle, 6 - pelvis, 7 - thorax, 8 - upper neck, 9 - head top,", "\n", "#       10 - r wrist, 11 - r elbow, 12 - r shoulder, 13 - l shoulder,", "\n", "#       14 - l elbow, 15 - l wrist", "\n", "# reference_pair = [[0, 1], [1, 2], [3, 4], [4, 5], [6, 7], [7, 8], [10, 11], [11, 12], [13, 14], [14, 15]]", "\n", "# reference_pair = [p for p in reference_pair if joint_vis[p[0]] and joint_vis[p[1]]]", "\n", "    ", "num_joints", "=", "joint2d", ".", "shape", "[", "0", "]", "\n", "pairwise_dist", "=", "joint2d", ".", "reshape", "(", "num_joints", ",", "1", ",", "2", ")", "-", "joint2d", ".", "reshape", "(", "1", ",", "num_joints", ",", "2", ")", "\n", "pairwise_dist", "=", "np", ".", "sqrt", "(", "(", "pairwise_dist", "**", "2", ")", ".", "sum", "(", "-", "1", ")", ")", "\n", "pairwise_dist", "[", "~", "joint_vis", ",", ":", "]", "=", "-", "1", "\n", "pairwise_dist", "[", ":", ",", "~", "joint_vis", "]", "=", "-", "1", "\n", "max_dist", "=", "pairwise_dist", ".", "max", "(", ")", "\n", "if", "max_dist", "==", "-", "1", "or", "max_dist", "==", "0", ":", "\n", "        ", "return", "80", "\n", "", "return", "max_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.AutoAugmentOp.__init__": [[283, 300], ["hparams.copy", "dict", "RandAugment.AutoAugmentOp.hparams.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "prob", "=", "0.5", ",", "magnitude", "=", "10", ",", "hparams", "=", "None", ")", ":", "\n", "        ", "hparams", "=", "hparams", "or", "_HPARAMS_DEFAULT", "\n", "self", ".", "aug_fn", "=", "NAME_TO_OP", "[", "name", "]", "\n", "self", ".", "level_fn", "=", "LEVEL_TO_ARG", "[", "name", "]", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "magnitude", "=", "magnitude", "\n", "self", ".", "hparams", "=", "hparams", ".", "copy", "(", ")", "\n", "self", ".", "kwargs", "=", "dict", "(", "\n", "fillcolor", "=", "hparams", "[", "'img_mean'", "]", "if", "'img_mean'", "in", "hparams", "else", "_FILL", ",", "\n", "resample", "=", "hparams", "[", "'interpolation'", "]", "if", "'interpolation'", "in", "hparams", "else", "_RANDOM_INTERPOLATION", ",", "\n", ")", "\n", "\n", "# If magnitude_std is > 0, we introduce some randomness", "\n", "# in the usually fixed policy and sample magnitude from a normal distribution", "\n", "# with mean `magnitude` and std-dev of `magnitude_std`.", "\n", "# NOTE This is my own hack, being tested, not in papers or reference impls.", "\n", "self", ".", "magnitude_std", "=", "self", ".", "hparams", ".", "get", "(", "'magnitude_std'", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.AutoAugmentOp.__call__": [[301, 310], ["min", "RandAugment.AutoAugmentOp.aug_fn", "random.random", "random.gauss", "max", "RandAugment.AutoAugmentOp.level_fn", "tuple"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "return", "img", "\n", "", "magnitude", "=", "self", ".", "magnitude", "\n", "if", "self", ".", "magnitude_std", "and", "self", ".", "magnitude_std", ">", "0", ":", "\n", "            ", "magnitude", "=", "random", ".", "gauss", "(", "magnitude", ",", "self", ".", "magnitude_std", ")", "\n", "", "magnitude", "=", "min", "(", "_MAX_LEVEL", ",", "max", "(", "0", ",", "magnitude", ")", ")", "# clip to valid range", "\n", "level_args", "=", "self", ".", "level_fn", "(", "magnitude", ",", "self", ".", "hparams", ")", "if", "self", ".", "level_fn", "is", "not", "None", "else", "tuple", "(", ")", "\n", "return", "self", ".", "aug_fn", "(", "img", ",", "*", "level_args", ",", "**", "self", ".", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.RandAugment.__init__": [[391, 395], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ops", ",", "num_layers", "=", "2", ",", "choice_weights", "=", "None", ")", ":", "\n", "        ", "self", ".", "ops", "=", "ops", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "choice_weights", "=", "choice_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.RandAugment.__call__": [[396, 403], ["numpy.random.choice", "op"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "# no replacement when using weighted choice", "\n", "        ", "ops", "=", "np", ".", "random", ".", "choice", "(", "\n", "self", ".", "ops", ",", "self", ".", "num_layers", ",", "replace", "=", "self", ".", "choice_weights", "is", "None", ",", "p", "=", "self", ".", "choice_weights", ")", "\n", "for", "op", "in", "ops", ":", "\n", "            ", "img", "=", "op", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._interpolation": [[31, 37], ["kwargs.pop", "isinstance", "random.choice"], "function", ["None"], ["def", "_interpolation", "(", "kwargs", ")", ":", "\n", "    ", "interpolation", "=", "kwargs", ".", "pop", "(", "'resample'", ",", "Image", ".", "BILINEAR", ")", "\n", "if", "isinstance", "(", "interpolation", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "return", "random", ".", "choice", "(", "interpolation", ")", "\n", "", "else", ":", "\n", "        ", "return", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._check_args_tf": [[39, 43], ["RandAugment._interpolation", "kwargs.pop"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._interpolation"], ["", "", "def", "_check_args_tf", "(", "kwargs", ")", ":", "\n", "    ", "if", "'fillcolor'", "in", "kwargs", "and", "_PIL_VER", "<", "(", "5", ",", "0", ")", ":", "\n", "        ", "kwargs", ".", "pop", "(", "'fillcolor'", ")", "\n", "", "kwargs", "[", "'resample'", "]", "=", "_interpolation", "(", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.shear_x": [[45, 48], ["RandAugment._check_args_tf", "img.transform"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._check_args_tf", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.transform"], ["", "def", "shear_x", "(", "img", ",", "factor", ",", "**", "kwargs", ")", ":", "\n", "    ", "_check_args_tf", "(", "kwargs", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "factor", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.shear_y": [[50, 53], ["RandAugment._check_args_tf", "img.transform"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._check_args_tf", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.transform"], ["", "def", "shear_y", "(", "img", ",", "factor", ",", "**", "kwargs", ")", ":", "\n", "    ", "_check_args_tf", "(", "kwargs", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "factor", ",", "1", ",", "0", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.translate_x_rel": [[55, 59], ["RandAugment._check_args_tf", "img.transform"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._check_args_tf", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.transform"], ["", "def", "translate_x_rel", "(", "img", ",", "pct", ",", "**", "kwargs", ")", ":", "\n", "    ", "pixels", "=", "pct", "*", "img", ".", "size", "[", "0", "]", "\n", "_check_args_tf", "(", "kwargs", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "pixels", ",", "0", ",", "1", ",", "0", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.translate_y_rel": [[61, 65], ["RandAugment._check_args_tf", "img.transform"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._check_args_tf", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.transform"], ["", "def", "translate_y_rel", "(", "img", ",", "pct", ",", "**", "kwargs", ")", ":", "\n", "    ", "pixels", "=", "pct", "*", "img", ".", "size", "[", "1", "]", "\n", "_check_args_tf", "(", "kwargs", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "pixels", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.translate_x_abs": [[67, 70], ["RandAugment._check_args_tf", "img.transform"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._check_args_tf", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.transform"], ["", "def", "translate_x_abs", "(", "img", ",", "pixels", ",", "**", "kwargs", ")", ":", "\n", "    ", "_check_args_tf", "(", "kwargs", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "pixels", ",", "0", ",", "1", ",", "0", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.translate_y_abs": [[72, 75], ["RandAugment._check_args_tf", "img.transform"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._check_args_tf", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.transform"], ["", "def", "translate_y_abs", "(", "img", ",", "pixels", ",", "**", "kwargs", ")", ":", "\n", "    ", "_check_args_tf", "(", "kwargs", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "pixels", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.rotate": [[77, 107], ["RandAugment._check_args_tf", "img.rotate", "RandAugment.rotate.transform"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._check_args_tf", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.rotate", "home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.transform"], ["", "def", "rotate", "(", "img", ",", "degrees", ",", "**", "kwargs", ")", ":", "\n", "    ", "_check_args_tf", "(", "kwargs", ")", "\n", "if", "_PIL_VER", ">=", "(", "5", ",", "2", ")", ":", "\n", "        ", "return", "img", ".", "rotate", "(", "degrees", ",", "**", "kwargs", ")", "\n", "", "elif", "_PIL_VER", ">=", "(", "5", ",", "0", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "post_trans", "=", "(", "0", ",", "0", ")", "\n", "rotn_center", "=", "(", "w", "/", "2.0", ",", "h", "/", "2.0", ")", "\n", "angle", "=", "-", "math", ".", "radians", "(", "degrees", ")", "\n", "matrix", "=", "[", "\n", "round", "(", "math", ".", "cos", "(", "angle", ")", ",", "15", ")", ",", "\n", "round", "(", "math", ".", "sin", "(", "angle", ")", ",", "15", ")", ",", "\n", "0.0", ",", "\n", "round", "(", "-", "math", ".", "sin", "(", "angle", ")", ",", "15", ")", ",", "\n", "round", "(", "math", ".", "cos", "(", "angle", ")", ",", "15", ")", ",", "\n", "0.0", ",", "\n", "]", "\n", "\n", "def", "transform", "(", "x", ",", "y", ",", "matrix", ")", ":", "\n", "            ", "(", "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f", ")", "=", "matrix", "\n", "return", "a", "*", "x", "+", "b", "*", "y", "+", "c", ",", "d", "*", "x", "+", "e", "*", "y", "+", "f", "\n", "\n", "", "matrix", "[", "2", "]", ",", "matrix", "[", "5", "]", "=", "transform", "(", "\n", "-", "rotn_center", "[", "0", "]", "-", "post_trans", "[", "0", "]", ",", "-", "rotn_center", "[", "1", "]", "-", "post_trans", "[", "1", "]", ",", "matrix", "\n", ")", "\n", "matrix", "[", "2", "]", "+=", "rotn_center", "[", "0", "]", "\n", "matrix", "[", "5", "]", "+=", "rotn_center", "[", "1", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "matrix", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "return", "img", ".", "rotate", "(", "degrees", ",", "resample", "=", "kwargs", "[", "'resample'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.auto_contrast": [[109, 111], ["PIL.ImageOps.autocontrast"], "function", ["None"], ["", "", "def", "auto_contrast", "(", "img", ",", "**", "__", ")", ":", "\n", "    ", "return", "ImageOps", ".", "autocontrast", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.invert": [[113, 115], ["PIL.ImageOps.invert"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.invert"], ["", "def", "invert", "(", "img", ",", "**", "__", ")", ":", "\n", "    ", "return", "ImageOps", ".", "invert", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.identity": [[117, 119], ["None"], "function", ["None"], ["", "def", "identity", "(", "img", ",", "**", "__", ")", ":", "\n", "    ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.equalize": [[121, 123], ["PIL.ImageOps.equalize"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.equalize"], ["", "def", "equalize", "(", "img", ",", "**", "__", ")", ":", "\n", "    ", "return", "ImageOps", ".", "equalize", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.solarize": [[125, 127], ["PIL.ImageOps.solarize"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.solarize"], ["", "def", "solarize", "(", "img", ",", "thresh", ",", "**", "__", ")", ":", "\n", "    ", "return", "ImageOps", ".", "solarize", "(", "img", ",", "thresh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.solarize_add": [[129, 142], ["range", "img.point", "lut.append", "lut.append", "min", "len"], "function", ["None"], ["", "def", "solarize_add", "(", "img", ",", "add", ",", "thresh", "=", "128", ",", "**", "__", ")", ":", "\n", "    ", "lut", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "256", ")", ":", "\n", "        ", "if", "i", "<", "thresh", ":", "\n", "            ", "lut", ".", "append", "(", "min", "(", "255", ",", "i", "+", "add", ")", ")", "\n", "", "else", ":", "\n", "            ", "lut", ".", "append", "(", "i", ")", "\n", "", "", "if", "img", ".", "mode", "in", "(", "\"L\"", ",", "\"RGB\"", ")", ":", "\n", "        ", "if", "img", ".", "mode", "==", "\"RGB\"", "and", "len", "(", "lut", ")", "==", "256", ":", "\n", "            ", "lut", "=", "lut", "+", "lut", "+", "lut", "\n", "", "return", "img", ".", "point", "(", "lut", ")", "\n", "", "else", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.posterize": [[144, 148], ["PIL.ImageOps.posterize"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.posterize"], ["", "", "def", "posterize", "(", "img", ",", "bits_to_keep", ",", "**", "__", ")", ":", "\n", "    ", "if", "bits_to_keep", ">=", "8", ":", "\n", "        ", "return", "img", "\n", "", "return", "ImageOps", ".", "posterize", "(", "img", ",", "bits_to_keep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.contrast": [[150, 152], ["PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast"], "function", ["None"], ["", "def", "contrast", "(", "img", ",", "factor", ",", "**", "__", ")", ":", "\n", "    ", "return", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.color": [[154, 156], ["PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color"], "function", ["None"], ["", "def", "color", "(", "img", ",", "factor", ",", "**", "__", ")", ":", "\n", "    ", "return", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.brightness": [[158, 160], ["PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness"], "function", ["None"], ["", "def", "brightness", "(", "img", ",", "factor", ",", "**", "__", ")", ":", "\n", "    ", "return", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.sharpness": [[162, 164], ["PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness"], "function", ["None"], ["", "def", "sharpness", "(", "img", ",", "factor", ",", "**", "__", ")", ":", "\n", "    ", "return", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._randomly_negate": [[166, 169], ["random.random"], "function", ["None"], ["", "def", "_randomly_negate", "(", "v", ")", ":", "\n", "    ", "\"\"\"With 50% prob, negate the value\"\"\"", "\n", "return", "-", "v", "if", "random", ".", "random", "(", ")", ">", "0.5", "else", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._rotate_level_to_arg": [[171, 176], ["RandAugment._randomly_negate"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._randomly_negate"], ["", "def", "_rotate_level_to_arg", "(", "level", ",", "_hparams", ")", ":", "\n", "# range [-30, 30]", "\n", "    ", "level", "=", "(", "level", "/", "_MAX_LEVEL", ")", "*", "30.", "\n", "level", "=", "_randomly_negate", "(", "level", ")", "\n", "return", "level", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._enhance_level_to_arg": [[178, 181], ["None"], "function", ["None"], ["", "def", "_enhance_level_to_arg", "(", "level", ",", "_hparams", ")", ":", "\n", "# range [0.1, 1.9]", "\n", "    ", "return", "(", "level", "/", "_MAX_LEVEL", ")", "*", "1.8", "+", "0.1", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._shear_level_to_arg": [[183, 188], ["RandAugment._randomly_negate"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._randomly_negate"], ["", "def", "_shear_level_to_arg", "(", "level", ",", "_hparams", ")", ":", "\n", "# range [-0.3, 0.3]", "\n", "    ", "level", "=", "(", "level", "/", "_MAX_LEVEL", ")", "*", "0.3", "\n", "level", "=", "_randomly_negate", "(", "level", ")", "\n", "return", "level", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._translate_abs_level_to_arg": [[190, 195], ["RandAugment._randomly_negate", "float"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._randomly_negate"], ["", "def", "_translate_abs_level_to_arg", "(", "level", ",", "hparams", ")", ":", "\n", "    ", "translate_const", "=", "hparams", "[", "'translate_const'", "]", "\n", "level", "=", "(", "level", "/", "_MAX_LEVEL", ")", "*", "float", "(", "translate_const", ")", "\n", "level", "=", "_randomly_negate", "(", "level", ")", "\n", "return", "level", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._translate_rel_level_to_arg": [[197, 202], ["RandAugment._randomly_negate"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._randomly_negate"], ["", "def", "_translate_rel_level_to_arg", "(", "level", ",", "_hparams", ")", ":", "\n", "# range [-0.45, 0.45]", "\n", "    ", "level", "=", "(", "level", "/", "_MAX_LEVEL", ")", "*", "0.45", "\n", "level", "=", "_randomly_negate", "(", "level", ")", "\n", "return", "level", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._posterize_original_level_to_arg": [[204, 208], ["int"], "function", ["None"], ["", "def", "_posterize_original_level_to_arg", "(", "level", ",", "_hparams", ")", ":", "\n", "# As per original AutoAugment paper description", "\n", "# range [4, 8], 'keep 4 up to 8 MSB of image'", "\n", "    ", "return", "int", "(", "(", "level", "/", "_MAX_LEVEL", ")", "*", "4", ")", "+", "4", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._posterize_research_level_to_arg": [[210, 214], ["int"], "function", ["None"], ["", "def", "_posterize_research_level_to_arg", "(", "level", ",", "_hparams", ")", ":", "\n", "# As per Tensorflow models research and UDA impl", "\n", "# range [4, 0], 'keep 4 down to 0 MSB of original image'", "\n", "    ", "return", "4", "-", "int", "(", "(", "level", "/", "_MAX_LEVEL", ")", "*", "4", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._posterize_tpu_level_to_arg": [[216, 220], ["int"], "function", ["None"], ["", "def", "_posterize_tpu_level_to_arg", "(", "level", ",", "_hparams", ")", ":", "\n", "# As per Tensorflow TPU EfficientNet impl", "\n", "# range [0, 4], 'keep 0 up to 4 MSB of original image'", "\n", "    ", "return", "int", "(", "(", "level", "/", "_MAX_LEVEL", ")", "*", "4", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._solarize_level_to_arg": [[222, 225], ["int"], "function", ["None"], ["", "def", "_solarize_level_to_arg", "(", "level", ",", "_hparams", ")", ":", "\n", "# range [0, 256]", "\n", "    ", "return", "int", "(", "(", "level", "/", "_MAX_LEVEL", ")", "*", "256", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._solarize_add_level_to_arg": [[227, 230], ["int"], "function", ["None"], ["", "def", "_solarize_add_level_to_arg", "(", "level", ",", "_hparams", ")", ":", "\n", "# range [0, 110]", "\n", "    ", "return", "int", "(", "(", "level", "/", "_MAX_LEVEL", ")", "*", "110", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._select_rand_weights": [[365, 372], ["numpy.sum"], "function", ["None"], ["def", "_select_rand_weights", "(", "weight_idx", "=", "0", ",", "transforms", "=", "None", ")", ":", "\n", "    ", "transforms", "=", "transforms", "or", "_RAND_TRANSFORMS", "\n", "assert", "weight_idx", "==", "0", "# only one set of weights currently", "\n", "rand_weights", "=", "_RAND_CHOICE_WEIGHTS_0", "\n", "probs", "=", "[", "rand_weights", "[", "k", "]", "for", "k", "in", "transforms", "]", "\n", "probs", "/=", "np", ".", "sum", "(", "probs", ")", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.rand_augment_ops": [[374, 380], ["RandAugment.AutoAugmentOp"], "function", ["None"], ["", "def", "rand_augment_ops", "(", "magnitude", "=", "10", ",", "hparams", "=", "None", ",", "transforms", "=", "None", ")", ":", "\n", "    ", "\"\"\"rand augment ops for RGB images\"\"\"", "\n", "hparams", "=", "hparams", "or", "_HPARAMS_DEFAULT", "\n", "transforms", "=", "transforms", "or", "_RAND_TRANSFORMS", "\n", "return", "[", "AutoAugmentOp", "(", "\n", "name", ",", "prob", "=", "0.5", ",", "magnitude", "=", "magnitude", ",", "hparams", "=", "hparams", ")", "for", "name", "in", "transforms", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.rand_augment_ops_cmc": [[382, 388], ["RandAugment.AutoAugmentOp"], "function", ["None"], ["", "def", "rand_augment_ops_cmc", "(", "magnitude", "=", "10", ",", "hparams", "=", "None", ",", "transforms", "=", "None", ")", ":", "\n", "    ", "\"\"\"rand augment ops for CMC images (removing color ops)\"\"\"", "\n", "hparams", "=", "hparams", "or", "_HPARAMS_DEFAULT", "\n", "transforms", "=", "transforms", "or", "_RAND_TRANSFORMS_CMC", "\n", "return", "[", "AutoAugmentOp", "(", "\n", "name", ",", "prob", "=", "0.5", ",", "magnitude", "=", "magnitude", ",", "hparams", "=", "hparams", ")", "for", "name", "in", "transforms", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.rand_augment_transform": [[405, 449], ["config_str.split", "RandAugment.RandAugment", "re.split", "RandAugment.rand_augment_ops_cmc", "RandAugment.rand_augment_ops", "RandAugment._select_rand_weights", "len", "hparams.setdefault", "float", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.rand_augment_ops_cmc", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.rand_augment_ops", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment._select_rand_weights"], ["", "", "def", "rand_augment_transform", "(", "config_str", ",", "hparams", ",", "use_cmc", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Create a RandAugment transform\n    :param config_str: String defining configuration of random augmentation. Consists of multiple sections separated by\n    dashes ('-'). The first section defines the specific variant of rand augment (currently only 'rand'). The remaining\n    sections, not order sepecific determine\n        'm' - integer magnitude of rand augment\n        'n' - integer num layers (number of transform ops selected per image)\n        'w' - integer probabiliy weight index (index of a set of weights to influence choice of op)\n        'mstd' -  float std deviation of magnitude noise applied\n    Ex 'rand-m9-n3-mstd0.5' results in RandAugment with magnitude 9, num_layers 3, magnitude_std 0.5\n    'rand-mstd1-w0' results in magnitude_std 1.0, weights 0, default magnitude of 10 and num_layers 2\n    :param hparams: Other hparams (kwargs) for the RandAugmentation scheme\n    :param use_cmc: Flag indicates removing augmentation for coloring ops.\n    :return: A PyTorch compatible Transform\n    \"\"\"", "\n", "magnitude", "=", "_MAX_LEVEL", "# default to _MAX_LEVEL for magnitude (currently 10)", "\n", "num_layers", "=", "2", "# default to 2 ops per image", "\n", "weight_idx", "=", "None", "# default to no probability weights for op choice", "\n", "config", "=", "config_str", ".", "split", "(", "'-'", ")", "\n", "assert", "config", "[", "0", "]", "==", "'rand'", "\n", "config", "=", "config", "[", "1", ":", "]", "\n", "for", "c", "in", "config", ":", "\n", "        ", "cs", "=", "re", ".", "split", "(", "r'(\\d.*)'", ",", "c", ")", "\n", "if", "len", "(", "cs", ")", "<", "2", ":", "\n", "            ", "continue", "\n", "", "key", ",", "val", "=", "cs", "[", ":", "2", "]", "\n", "if", "key", "==", "'mstd'", ":", "\n", "# noise param injected via hparams for now", "\n", "            ", "hparams", ".", "setdefault", "(", "'magnitude_std'", ",", "float", "(", "val", ")", ")", "\n", "", "elif", "key", "==", "'m'", ":", "\n", "            ", "magnitude", "=", "int", "(", "val", ")", "\n", "", "elif", "key", "==", "'n'", ":", "\n", "            ", "num_layers", "=", "int", "(", "val", ")", "\n", "", "elif", "key", "==", "'w'", ":", "\n", "            ", "weight_idx", "=", "int", "(", "val", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'Unknown RandAugment config section'", "\n", "", "", "if", "use_cmc", ":", "\n", "        ", "ra_ops", "=", "rand_augment_ops_cmc", "(", "magnitude", "=", "magnitude", ",", "hparams", "=", "hparams", ")", "\n", "", "else", ":", "\n", "        ", "ra_ops", "=", "rand_augment_ops", "(", "magnitude", "=", "magnitude", ",", "hparams", "=", "hparams", ")", "\n", "", "choice_weights", "=", "None", "if", "weight_idx", "is", "None", "else", "_select_rand_weights", "(", "weight_idx", ")", "\n", "return", "RandAugment", "(", "ra_ops", ",", "num_layers", ",", "choice_weights", "=", "choice_weights", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.StackTransform.__init__": [[18, 20], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transform", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.StackTransform.__call__": [[21, 23], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "util.StackTransform.transform"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.A2J.main.transform"], ["", "def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "self", ".", "transform", "(", "crop", ")", "for", "crop", "in", "imgs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.JigsawCrop.__init__": [[27, 37], ["int", "numpy.meshgrid", "numpy.reshape", "numpy.reshape", "numpy.arange", "numpy.arange"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_grid", "=", "3", ",", "img_size", "=", "255", ",", "crop_size", "=", "64", ")", ":", "\n", "        ", "self", ".", "n_grid", "=", "n_grid", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "grid_size", "=", "int", "(", "img_size", "/", "self", ".", "n_grid", ")", "\n", "self", ".", "side", "=", "self", ".", "grid_size", "-", "self", ".", "crop_size", "\n", "\n", "yy", ",", "xx", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "n_grid", ")", ",", "np", ".", "arange", "(", "n_grid", ")", ")", "\n", "self", ".", "yy", "=", "np", ".", "reshape", "(", "yy", "*", "self", ".", "grid_size", ",", "(", "n_grid", "*", "n_grid", ",", ")", ")", "\n", "self", ".", "xx", "=", "np", ".", "reshape", "(", "xx", "*", "self", ".", "grid_size", ",", "(", "n_grid", "*", "n_grid", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.JigsawCrop.__call__": [[38, 48], ["numpy.random.randint", "numpy.random.randint", "numpy.asarray", "range", "crops.append", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "r_x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "side", "+", "1", ",", "self", ".", "n_grid", "*", "self", ".", "n_grid", ")", "\n", "r_y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "side", "+", "1", ",", "self", ".", "n_grid", "*", "self", ".", "n_grid", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "crops", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_grid", "*", "self", ".", "n_grid", ")", ":", "\n", "            ", "crops", ".", "append", "(", "img", "[", "self", ".", "xx", "[", "i", "]", "+", "r_x", "[", "i", "]", ":", "self", ".", "xx", "[", "i", "]", "+", "r_x", "[", "i", "]", "+", "self", ".", "crop_size", ",", "\n", "self", ".", "yy", "[", "i", "]", "+", "r_y", "[", "i", "]", ":", "self", ".", "yy", "[", "i", "]", "+", "r_y", "[", "i", "]", "+", "self", ".", "crop_size", ",", ":", "]", ")", "\n", "", "crops", "=", "[", "Image", ".", "fromarray", "(", "crop", ")", "for", "crop", "in", "crops", "]", "\n", "return", "crops", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.Rotate.__init__": [[52, 54], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "angles", "=", "[", "0", ",", "90", ",", "180", ",", "270", "]", ")", ":", "\n", "        ", "self", ".", "angles", "=", "angles", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.Rotate.__call__": [[55, 76], ["numpy.random.choice", "isinstance", "numpy.asarray.rotate", "isinstance", "TypeError", "type", "numpy.flipud", "numpy.transpose", "numpy.fliplr", "numpy.flipud", "numpy.transpose", "PIL.Image.fromarray", "numpy.asarray.rotate", "numpy.asarray", "numpy.flipud"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.rotate", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.rotate"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "angle", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "angles", ")", "\n", "if", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ":", "\n", "            ", "img", "=", "img", ".", "rotate", "(", "angle", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", "\n", "return", "img", "\n", "", "elif", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "angle", "==", "0", ":", "\n", "                ", "pass", "\n", "", "elif", "angle", "==", "90", ":", "\n", "                ", "img", "=", "np", ".", "flipud", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "0", ",", "2", ")", ")", ")", "\n", "", "elif", "angle", "==", "180", ":", "\n", "                ", "img", "=", "np", ".", "fliplr", "(", "np", ".", "flipud", "(", "img", ")", ")", "\n", "", "elif", "angle", "==", "270", ":", "\n", "                ", "img", "=", "np", ".", "transpose", "(", "np", ".", "flipud", "(", "img", ")", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", "=", "img", ".", "rotate", "(", "angle", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "", "return", "img", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'not supported type in rotation: '", ",", "type", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.RGB2RGB.__call__": [[80, 82], ["None"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.RGB2Lab.__call__": [[86, 90], ["numpy.asarray", "skimage.color.rgb2lab"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2lab", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.RGB2YCbCr.__call__": [[94, 98], ["numpy.asarray", "skimage.color.rgb2ycbcr"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2ycbcr", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.RGB2YDbDr.__call__": [[102, 106], ["numpy.asarray", "skimage.color.rgb2ydbdr"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2ydbdr", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.RGB2YPbPr.__call__": [[110, 114], ["numpy.asarray", "skimage.color.rgb2ypbpr"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2ypbpr", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.RGB2YIQ.__call__": [[118, 122], ["numpy.asarray", "skimage.color.rgb2yiq"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2yiq", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.GaussianBlur.__init__": [[126, 144], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torchvision.transforms.ToTensor", "torchvision.transforms.ToPILImage", "torch.ReflectionPad2d", "torch.ReflectionPad2d"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "kernel_size", ")", ":", "\n", "        ", "radias", "=", "kernel_size", "//", "2", "\n", "kernel_size", "=", "radias", "*", "2", "+", "1", "\n", "self", ".", "blur_h", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "kernel_size", "=", "(", "kernel_size", ",", "1", ")", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "groups", "=", "3", ")", "\n", "self", ".", "blur_v", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "kernel_size", "=", "(", "1", ",", "kernel_size", ")", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "groups", "=", "3", ")", "\n", "self", ".", "k", "=", "kernel_size", "\n", "self", ".", "r", "=", "radias", "\n", "\n", "self", ".", "blur", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "radias", ")", ",", "\n", "self", ".", "blur_h", ",", "\n", "self", ".", "blur_v", "\n", ")", "\n", "\n", "self", ".", "pil_to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "tensor_to_pil", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.GaussianBlur.__call__": [[145, 164], ["util.GaussianBlur.pil_to_tensor().unsqueeze", "numpy.random.uniform", "numpy.arange", "numpy.exp", "torch.from_numpy().view().repeat", "torch.from_numpy().view().repeat", "torch.from_numpy().view().repeat", "torch.from_numpy().view().repeat", "util.GaussianBlur.blur_h.weight.data.copy_", "util.GaussianBlur.blur_v.weight.data.copy_", "util.GaussianBlur.tensor_to_pil", "torch.from_numpy().view().repeat.sum", "torch.from_numpy().view().repeat.sum", "torch.from_numpy().view().repeat.view", "torch.from_numpy().view().repeat.view", "torch.from_numpy().view().repeat.view", "torch.from_numpy().view().repeat.view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "util.GaussianBlur.blur", "img.squeeze.squeeze.squeeze", "util.GaussianBlur.pil_to_tensor", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "numpy.power", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "self", ".", "pil_to_tensor", "(", "img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "sigma", "=", "np", ".", "random", ".", "uniform", "(", "0.1", ",", "2.0", ")", "\n", "x", "=", "np", ".", "arange", "(", "-", "self", ".", "r", ",", "self", ".", "r", "+", "1", ")", "\n", "x", "=", "np", ".", "exp", "(", "-", "np", ".", "power", "(", "x", ",", "2", ")", "/", "(", "2", "*", "sigma", "*", "sigma", ")", ")", "\n", "x", "=", "x", "/", "x", ".", "sum", "(", ")", "\n", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "3", ",", "1", ")", "\n", "\n", "self", ".", "blur_h", ".", "weight", ".", "data", ".", "copy_", "(", "x", ".", "view", "(", "3", ",", "1", ",", "self", ".", "k", ",", "1", ")", ")", "\n", "self", ".", "blur_v", ".", "weight", ".", "data", ".", "copy_", "(", "x", ".", "view", "(", "3", ",", "1", ",", "1", ",", "self", ".", "k", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "img", "=", "self", ".", "blur", "(", "img", ")", "\n", "img", "=", "img", ".", "squeeze", "(", ")", "\n", "\n", "", "img", "=", "self", ".", "tensor_to_pil", "(", "img", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.GaussianBlur2.__call__": [[168, 172], ["numpy.random.uniform", "x.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "sigma", "=", "np", ".", "random", ".", "uniform", "(", "0.1", ",", "2.0", ")", "\n", "x", "=", "x", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.GaussianBlurBatch.__init__": [[176, 197], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "util.GaussianBlurBatch.blur.cuda"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["def", "__init__", "(", "self", ",", "kernel_size", ",", "use_cuda", "=", "False", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "radias", "=", "kernel_size", "//", "2", "\n", "kernel_size", "=", "radias", "*", "2", "+", "1", "\n", "self", ".", "blur_h", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "kernel_size", "=", "(", "kernel_size", ",", "1", ")", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "groups", "=", "3", ")", "\n", "self", ".", "blur_v", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "kernel_size", "=", "(", "1", ",", "kernel_size", ")", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "groups", "=", "3", ")", "\n", "self", ".", "k", "=", "kernel_size", "\n", "self", ".", "r", "=", "radias", "\n", "\n", "self", ".", "blur", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "radias", ")", ",", "\n", "self", ".", "blur_h", ",", "\n", "self", ".", "blur_v", "\n", ")", "\n", "\n", "assert", "0", "<=", "p", "<=", "1.0", ",", "'p is out of range [0, 1]'", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "if", "use_cuda", ":", "\n", "            ", "self", ".", "blur", "=", "self", ".", "blur", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.GaussianBlurBatch.__call__": [[198, 224], ["numpy.random.uniform", "numpy.arange", "numpy.exp", "torch.from_numpy().view().repeat", "torch.from_numpy().view().repeat", "torch.from_numpy().view().repeat", "torch.from_numpy().view().repeat", "util.GaussianBlurBatch.blur_h.weight.data.copy_", "util.GaussianBlurBatch.blur_v.weight.data.copy_", "int", "x.cuda.cuda.sum", "x.cuda.cuda.cuda", "x.cuda.cuda.view", "x.cuda.cuda.view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "util.GaussianBlurBatch.blur", "numpy.power", "torch.split", "torch.split", "torch.split", "torch.split", "util.GaussianBlurBatch.blur", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "", "def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "\n", "        ", "sigma", "=", "np", ".", "random", ".", "uniform", "(", "0.1", ",", "2.0", ")", "\n", "x", "=", "np", ".", "arange", "(", "-", "self", ".", "r", ",", "self", ".", "r", "+", "1", ")", "\n", "x", "=", "np", ".", "exp", "(", "-", "np", ".", "power", "(", "x", ",", "2", ")", "/", "(", "2", "*", "sigma", "*", "sigma", ")", ")", "\n", "x", "=", "x", "/", "x", ".", "sum", "(", ")", "\n", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "3", ",", "1", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "            ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "blur_h", ".", "weight", ".", "data", ".", "copy_", "(", "x", ".", "view", "(", "3", ",", "1", ",", "self", ".", "k", ",", "1", ")", ")", "\n", "self", ".", "blur_v", ".", "weight", ".", "data", ".", "copy_", "(", "x", ".", "view", "(", "3", ",", "1", ",", "1", ",", "self", ".", "k", ")", ")", "\n", "\n", "bsz", "=", "imgs", ".", "shape", "[", "0", "]", "\n", "n_blur", "=", "int", "(", "bsz", "*", "self", ".", "p", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "n_blur", "==", "bsz", ":", "\n", "                ", "imgs", "=", "self", ".", "blur", "(", "imgs", ")", "\n", "", "elif", "n_blur", "==", "0", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "imgs_1", ",", "imgs_2", "=", "torch", ".", "split", "(", "imgs", ",", "[", "n_blur", ",", "bsz", "-", "n_blur", "]", ",", "dim", "=", "0", ")", "\n", "imgs_1", "=", "self", ".", "blur", "(", "imgs_1", ")", "\n", "imgs", "=", "torch", ".", "cat", "(", "[", "imgs_1", ",", "imgs_2", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DatasetFromSampler.__init__": [[462, 466], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ":", "Sampler", ")", ":", "\n", "        ", "\"\"\"Initialisation for DatasetFromSampler.\"\"\"", "\n", "self", ".", "sampler", "=", "sampler", "\n", "self", ".", "sampler_list", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DatasetFromSampler.__getitem__": [[467, 477], ["list"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "        ", "\"\"\"Gets element of the dataset.\n        Args:\n            index: index of the element in the dataset\n        Returns:\n            Single element by index\n        \"\"\"", "\n", "if", "self", ".", "sampler_list", "is", "None", ":", "\n", "            ", "self", ".", "sampler_list", "=", "list", "(", "self", ".", "sampler", ")", "\n", "", "return", "self", ".", "sampler_list", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DatasetFromSampler.__len__": [[478, 484], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Returns:\n            int: length of the dataset\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DistributedSamplerWrapper.__init__": [[498, 522], ["torch.utils.data.distributed.DistributedSampler.__init__", "util.DatasetFromSampler"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sampler", ",", "\n", "num_replicas", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "rank", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "shuffle", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            sampler: Sampler used for subsampling\n            num_replicas (int, optional): Number of processes participating in\n              distributed training\n            rank (int, optional): Rank of the current process\n              within ``num_replicas``\n            shuffle (bool, optional): If true (default),\n              sampler will shuffle the indices\n        \"\"\"", "\n", "super", "(", "DistributedSamplerWrapper", ",", "self", ")", ".", "__init__", "(", "\n", "DatasetFromSampler", "(", "sampler", ")", ",", "\n", "num_replicas", "=", "num_replicas", ",", "\n", "rank", "=", "rank", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", ")", "\n", "self", ".", "sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DistributedSamplerWrapper.__iter__": [[523, 529], ["util.DatasetFromSampler", "torch.utils.data.distributed.DistributedSampler.__iter__", "iter", "operator.itemgetter"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DistributedSamplerWrapper.__iter__"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"@TODO: Docs. Contribution is welcome.\"\"\"", "\n", "self", ".", "dataset", "=", "DatasetFromSampler", "(", "self", ".", "sampler", ")", "\n", "indexes_of_indexes", "=", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "subsampler_indexes", "=", "self", ".", "dataset", "\n", "return", "iter", "(", "itemgetter", "(", "*", "indexes_of_indexes", ")", "(", "subsampler_indexes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.build_transforms": [[226, 337], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "util.RGB2RGB", "util.RGB2YDbDr", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "util.JigsawCrop", "util.StackTransform", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.RandomApply", "torchvision.transforms.ToTensor", "dict", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "dict", "torchvision.transforms.Compose", "NotImplementedError", "torchvision.transforms.ToTensor", "torchvision.transforms.ColorJitter", "util.GaussianBlur2", "int", "tuple", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomApply", "RandAugment.rand_augment_transform", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.ToTensor", "int", "tuple", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomApply", "RandAugment.rand_augment_transform", "torchvision.transforms.ToTensor", "min", "torchvision.transforms.ColorJitter", "util.GaussianBlur", "round", "min", "torchvision.transforms.ColorJitter", "util.GaussianBlur", "round"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.rand_augment_transform", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.rand_augment_transform"], ["", "", "def", "build_transforms", "(", "aug", ",", "modal", ",", "use_memory_bank", "=", "True", ")", ":", "\n", "    ", "if", "use_memory_bank", ":", "\n", "# memory bank likes 0.08", "\n", "        ", "crop", "=", "0.08", "\n", "", "else", ":", "\n", "# moco cache likes 0.2", "\n", "        ", "crop", "=", "0.2", "\n", "\n", "", "if", "modal", "==", "'RGB'", ":", "\n", "        ", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "color_transfer", "=", "RGB2RGB", "(", ")", "\n", "", "else", ":", "\n", "        ", "mean", "=", "[", "0.457", ",", "-", "0.082", ",", "-", "0.052", "]", "\n", "std", "=", "[", "0.500", ",", "1.331", ",", "1.333", "]", "\n", "color_transfer", "=", "RGB2YDbDr", "(", ")", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "\n", "if", "aug", "==", "'A'", ":", "\n", "# used in InsDis, MoCo, PIRL", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "crop", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "color_transfer", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "", "elif", "aug", "==", "'B'", ":", "\n", "# used in MoCoV2", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "crop", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", "\n", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "GaussianBlur2", "(", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "color_transfer", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "", "elif", "aug", "==", "'C'", ":", "\n", "# used in CMC, CMCPIRL", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "crop", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", ",", "\n", "color_transfer", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "", "elif", "aug", "==", "'D'", ":", "\n", "# used in InfoMin", "\n", "        ", "rgb_mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", "\n", "ra_params", "=", "dict", "(", "\n", "translate_const", "=", "int", "(", "224", "*", "0.45", ")", ",", "\n", "img_mean", "=", "tuple", "(", "[", "min", "(", "255", ",", "round", "(", "255", "*", "x", ")", ")", "for", "x", "in", "rgb_mean", "]", ")", ",", "\n", ")", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "crop", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.8", ",", "0.8", ",", "0.8", ",", "0.2", ")", "\n", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "GaussianBlur", "(", "22", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "rand_augment_transform", "(", "'rand-n{}-m{}-mstd0.5'", ".", "format", "(", "2", ",", "10", ")", ",", "\n", "ra_params", ",", "\n", "use_cmc", "=", "(", "modal", "==", "'CMC'", ")", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "color_transfer", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "", "elif", "aug", "==", "'E'", ":", "\n", "# used in CMCv2", "\n", "        ", "rgb_mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", "\n", "ra_params", "=", "dict", "(", "\n", "translate_const", "=", "int", "(", "224", "*", "0.45", ")", ",", "\n", "img_mean", "=", "tuple", "(", "[", "min", "(", "255", ",", "round", "(", "255", "*", "x", ")", ")", "for", "x", "in", "rgb_mean", "]", ")", ",", "\n", ")", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "crop", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", "\n", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "GaussianBlur", "(", "22", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "rand_augment_transform", "(", "'rand-n{}-m{}-mstd0.5'", ".", "format", "(", "2", ",", "10", ")", ",", "\n", "ra_params", ",", "\n", "use_cmc", "=", "(", "modal", "==", "'CMC'", ")", ")", ",", "\n", "color_transfer", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'transform not found: {}'", ".", "format", "(", "aug", ")", ")", "\n", "\n", "", "jigsaw_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "255", ",", "scale", "=", "(", "0.6", ",", "1", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "JigsawCrop", "(", ")", ",", "\n", "StackTransform", "(", "transforms", ".", "Compose", "(", "[", "\n", "color_transfer", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "]", ")", "\n", "\n", "return", "train_transform", ",", "jigsaw_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.build_contrast_loader": [[340, 375], ["int", "int", "util.build_transforms", "os.path.join", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "dataset.ImageFolderInstance", "dataset.ImageFolderInstance", "len"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.build_transforms"], ["", "def", "build_contrast_loader", "(", "opt", ",", "ngpus_per_node", ")", ":", "\n", "    ", "\"\"\"build loaders for contrastive training\"\"\"", "\n", "data_folder", "=", "opt", ".", "data_folder", "\n", "aug", "=", "opt", ".", "aug", "\n", "modal", "=", "opt", ".", "modal", "\n", "use_jigsaw", "=", "opt", ".", "jigsaw", "\n", "use_memory_bank", "=", "(", "opt", ".", "mem", "==", "'bank'", ")", "\n", "batch_size", "=", "int", "(", "opt", ".", "batch_size", "/", "opt", ".", "world_size", ")", "\n", "num_workers", "=", "int", "(", "(", "opt", ".", "num_workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "\n", "train_transform", ",", "jigsaw_transform", "=", "build_transforms", "(", "aug", ",", "modal", ",", "use_memory_bank", ")", "\n", "\n", "train_dir", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "'train'", ")", "\n", "if", "use_jigsaw", ":", "\n", "        ", "train_dataset", "=", "ImageFolderInstance", "(", "\n", "train_dir", ",", "transform", "=", "train_transform", ",", "\n", "two_crop", "=", "(", "not", "use_memory_bank", ")", ",", "\n", "jigsaw_transform", "=", "jigsaw_transform", "\n", ")", "\n", "", "else", ":", "\n", "        ", "train_dataset", "=", "ImageFolderInstance", "(", "\n", "train_dir", ",", "transform", "=", "train_transform", ",", "\n", "two_crop", "=", "(", "not", "use_memory_bank", ")", "\n", ")", "\n", "\n", "", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "print", "(", "'train images: {}'", ".", "format", "(", "len", "(", "train_dataset", ")", ")", ")", "\n", "\n", "return", "train_dataset", ",", "train_loader", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.build_linear_loader": [[377, 448], ["torchvision.transforms.Normalize", "os.path.join", "os.path.join", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "int", "int", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "util.RGB2RGB", "util.RGB2YDbDr", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "dict", "torchvision.transforms.Compose", "NotImplementedError", "len", "len", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "tuple", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "RandAugment.rand_augment_transform", "torchvision.transforms.ToTensor", "min", "round"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.rand_augment_transform"], ["", "def", "build_linear_loader", "(", "opt", ",", "ngpus_per_node", ")", ":", "\n", "    ", "\"\"\"build loaders for linear evaluation\"\"\"", "\n", "# transform", "\n", "if", "opt", ".", "modal", "==", "'RGB'", ":", "\n", "        ", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "color_transfer", "=", "RGB2RGB", "(", ")", "\n", "", "else", ":", "\n", "        ", "mean", "=", "[", "0.457", ",", "-", "0.082", ",", "-", "0.052", "]", "\n", "std", "=", "[", "0.500", ",", "1.331", ",", "1.333", "]", "\n", "color_transfer", "=", "RGB2YDbDr", "(", ")", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "\n", "if", "opt", ".", "aug_linear", "==", "'NULL'", ":", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "opt", ".", "crop", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "color_transfer", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "", "elif", "opt", ".", "aug_linear", "==", "'RA'", ":", "\n", "        ", "rgb_mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", "\n", "ra_params", "=", "dict", "(", "\n", "translate_const", "=", "100", ",", "\n", "img_mean", "=", "tuple", "(", "[", "min", "(", "255", ",", "round", "(", "255", "*", "x", ")", ")", "for", "x", "in", "rgb_mean", "]", ")", ",", "\n", ")", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "opt", ".", "crop", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "rand_augment_transform", "(", "'rand-n{}-m{}-mstd0.5'", ".", "format", "(", "2", ",", "10", ")", ",", "\n", "ra_params", ",", "\n", "use_cmc", "=", "(", "opt", ".", "modal", "==", "'CMC'", ")", ")", ",", "\n", "color_transfer", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'aug not found: {}'", ".", "format", "(", "opt", ".", "aug_linear", ")", ")", "\n", "\n", "# dataset", "\n", "", "data_folder", "=", "opt", ".", "data_folder", "\n", "train_dir", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "'train'", ")", "\n", "val_dir", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "'val'", ")", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "train_dir", ",", "train_transform", ")", "\n", "val_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "val_dir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "color_transfer", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", ")", "\n", "\n", "# loader", "\n", "batch_size", "=", "int", "(", "opt", ".", "batch_size", "/", "opt", ".", "world_size", ")", "\n", "num_workers", "=", "int", "(", "(", "opt", ".", "num_workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "128", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "32", ",", "pin_memory", "=", "True", ")", "\n", "\n", "print", "(", "'train images: {}'", ".", "format", "(", "len", "(", "train_dataset", ")", ")", ")", "\n", "print", "(", "'test images: {}'", ".", "format", "(", "len", "(", "val_dataset", ")", ")", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.build_own_contrast_loader": [[530, 598], ["int", "int", "numpy.zeros", "torch.utils.data.sampler.WeightedRandomSampler", "util.DistributedSamplerWrapper", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.modal2Dataset.keys", "len", "len", "len", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "print", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "build_own_contrast_loader", "(", "opt", ",", "ngpus_per_node", ",", "need_gt", "=", "False", ",", "need_val", "=", "False", ")", ":", "\n", "    ", "modal", "=", "opt", ".", "modal", "\n", "assert", "opt", ".", "dataset", "+", "modal", "in", "modal2Dataset", ".", "keys", "(", ")", "\n", "use_jigsaw", "=", "opt", ".", "jigsaw", "\n", "assert", "not", "use_jigsaw", "\n", "assert", "not", "need_gt", "\n", "\n", "random_flip", "=", "True", "if", "opt", ".", "random_flip", "else", "False", "\n", "\n", "batch_size", "=", "int", "(", "opt", ".", "batch_size", "/", "opt", ".", "world_size", ")", "\n", "num_workers", "=", "int", "(", "(", "opt", ".", "num_workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "assert", "not", "opt", ".", "downstream_training", "\n", "if", "opt", ".", "dataset", "in", "[", "'NTU'", ",", "''", "]", ":", "\n", "        ", "train_dataset", "=", "modal2Dataset", "[", "opt", ".", "dataset", "+", "modal", "]", "(", "opt", ".", "data_folder", ",", "opt", ".", "train_file_list", ",", "random_flip", "=", "random_flip", ",", "random_resized_crop", "=", "True", ",", "need_gt", "=", "need_gt", ",", "need_geodesic", "=", "need_geodesic", ")", "\n", "", "else", ":", "\n", "        ", "if", "opt", ".", "dataset", "+", "modal", "==", "'NTUMPIIRGBD2S'", ":", "\n", "            ", "train_dataset", "=", "modal2Dataset", "[", "'NTUMPIIRGBD2S'", "]", "(", "opt", ".", "data_folder", ",", "opt", ".", "train_file_list", ",", "opt", ".", "mpii_root", ",", "'train'", ",", "random_flip", "=", "random_flip", ",", "\n", "random_resized_crop", "=", "True", ",", "need_gt", "=", "need_gt", ")", "\n", "", "elif", "opt", ".", "dataset", "+", "modal", "==", "'NTUCOCORGBD2S'", ":", "\n", "            ", "train_dataset", "=", "modal2Dataset", "[", "'NTUCOCORGBD2S'", "]", "(", "opt", ".", "data_folder", ",", "opt", ".", "train_file_list", ",", "opt", ".", "coco_root", ",", "'train2014'", ",", "random_flip", "=", "random_flip", ",", "\n", "random_resized_crop", "=", "True", ",", "need_gt", "=", "need_gt", ")", "\n", "", "elif", "opt", ".", "dataset", "+", "modal", "==", "'NTUSegRGBD2S'", ":", "\n", "            ", "train_dataset", "=", "modal2Dataset", "[", "'NTUSegRGBD2S'", "]", "(", "opt", ".", "data_folder", ",", "opt", ".", "train_file_list", ",", "opt", ".", "seg_root", ",", "opt", ".", "seg_file_list", ",", "random_flip", "=", "random_flip", ",", "\n", "random_resized_crop", "=", "True", ",", "need_gt", "=", "need_gt", ",", "\n", "mask_seg_depth", "=", "opt", ".", "mask_seg_depth", ",", "mask_seg_rgb", "=", "opt", ".", "mask_seg_rgb", ")", "\n", "", "else", ":", "\n", "            ", "train_dataset", "=", "modal2Dataset", "[", "opt", ".", "dataset", "+", "modal", "]", "(", "opt", ".", "data_folder", ",", "opt", ".", "train_file_list", ",", "opt", ".", "mpii_root", ",", "'train'", ",", "random_flip", "=", "random_flip", ",", "random_resized_crop", "=", "True", ",", "need_gt", "=", "need_gt", ",", "need_geodesic", "=", "need_geodesic", ")", "\n", "\n", "", "", "weights", "=", "np", ".", "zeros", "(", "[", "len", "(", "train_dataset", ")", "]", ")", "\n", "try", ":", "\n", "        ", "db_len", "=", "len", "(", "train_dataset", ".", "db", ")", "\n", "ntu_len", "=", "len", "(", "train_dataset", ".", "image_list", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "\"Not using db...\"", ")", "\n", "if", "not", "opt", ".", "not_use_weighted_sampler", ":", "\n", "            ", "db_len", "=", "len", "(", "train_dataset", ")", "-", "train_dataset", ".", "split", "\n", "ntu_len", "=", "train_dataset", ".", "split", "\n", "", "else", ":", "\n", "            ", "db_len", "=", "len", "(", "train_dataset", ")", "\n", "ntu_len", "=", "len", "(", "train_dataset", ")", "\n", "\n", "", "", "if", "opt", ".", "dataset", "+", "modal", "==", "'NTUSegRGBD2S'", ":", "\n", "        ", "weights", "[", ":", "ntu_len", "]", "=", "db_len", "/", "len", "(", "train_dataset", ")", "\n", "weights", "[", "ntu_len", ":", "]", "=", "ntu_len", "/", "len", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "weights", "[", ":", "db_len", "]", "=", "ntu_len", "/", "len", "(", "train_dataset", ")", "\n", "weights", "[", "db_len", ":", "]", "=", "db_len", "/", "len", "(", "train_dataset", ")", "\n", "", "sampler", "=", "WeightedRandomSampler", "(", "weights", ",", "len", "(", "weights", ")", ")", "\n", "train_sampler", "=", "DistributedSamplerWrapper", "(", "sampler", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "if", "not", "need_val", ":", "\n", "        ", "return", "train_dataset", ",", "train_loader", ",", "train_sampler", "\n", "", "else", ":", "\n", "        ", "if", "opt", ".", "dataset", "+", "modal", "==", "'NTUSegRGBD2S'", ":", "\n", "            ", "val_dataset", "=", "modal2Dataset", "[", "'NTUSegRGBD2S'", "]", "(", "opt", ".", "data_folder", ",", "opt", ".", "train_file_list", ",", "opt", ".", "seg_root", ",", "opt", ".", "seg_val_file_list", ",", "random_flip", "=", "random_flip", ",", "\n", "random_resized_crop", "=", "True", ",", "need_gt", "=", "need_gt", ",", "need_geodesic", "=", "need_geodesic", ",", "\n", "only_seg", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "val_dataset", "=", "modal2Dataset", "[", "opt", ".", "dataset", "+", "modal", "]", "(", "opt", ".", "data_folder", ",", "opt", ".", "val_file_list", ",", "random_flip", "=", "random_flip", ",", "random_resized_crop", "=", "False", ",", "need_gt", "=", "need_gt", ",", "need_geodesic", "=", "need_geodesic", ")", "\n", "", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "(", "val_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "val_sampler", ")", "\n", "return", "train_loader", ",", "train_dataset", ",", "val_loader", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.mpii_utils.get_dir": [[15, 23], ["numpy.sin", "numpy.cos"], "function", ["None"], ["def", "get_dir", "(", "src_point", ",", "rot_rad", ")", ":", "\n", "    ", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "\n", "src_result", "=", "[", "0", ",", "0", "]", "\n", "src_result", "[", "0", "]", "=", "src_point", "[", "0", "]", "*", "cs", "-", "src_point", "[", "1", "]", "*", "sn", "\n", "src_result", "[", "1", "]", "=", "src_point", "[", "0", "]", "*", "sn", "+", "src_point", "[", "1", "]", "*", "cs", "\n", "\n", "return", "src_result", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.mpii_utils.get_3rd_point": [[24, 27], ["numpy.array"], "function", ["None"], ["", "def", "get_3rd_point", "(", "a", ",", "b", ")", ":", "\n", "    ", "direct", "=", "a", "-", "b", "\n", "return", "b", "+", "np", ".", "array", "(", "[", "-", "direct", "[", "1", "]", ",", "direct", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.mpii_utils.get_affine_transform": [[28, 61], ["numpy.array", "mpii_utils.get_dir", "numpy.array", "numpy.zeros", "numpy.zeros", "mpii_utils.get_3rd_point", "mpii_utils.get_3rd_point", "print", "numpy.array", "numpy.array", "cv2.getAffineTransform", "cv2.getAffineTransform", "isinstance", "isinstance", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.mpii_utils.get_dir", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.mpii_utils.get_3rd_point", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.mpii_utils.get_3rd_point"], ["", "def", "get_affine_transform", "(", "\n", "center", ",", "scale", ",", "rot", ",", "output_size", ",", "\n", "shift", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "inv", "=", "0", "\n", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "scale", ",", "np", ".", "ndarray", ")", "and", "not", "isinstance", "(", "scale", ",", "list", ")", ":", "\n", "        ", "print", "(", "scale", ")", "\n", "scale", "=", "np", ".", "array", "(", "[", "scale", ",", "scale", "]", ")", "\n", "\n", "", "scale_tmp", "=", "scale", "*", "200.0", "\n", "src_w", "=", "scale_tmp", "[", "0", "]", "\n", "dst_w", "=", "output_size", "[", "0", "]", "\n", "dst_h", "=", "output_size", "[", "1", "]", "\n", "\n", "rot_rad", "=", "np", ".", "pi", "*", "rot", "/", "180", "\n", "src_dir", "=", "get_dir", "(", "[", "0", ",", "src_w", "*", "-", "0.5", "]", ",", "rot_rad", ")", "\n", "dst_dir", "=", "np", ".", "array", "(", "[", "0", ",", "dst_w", "*", "-", "0.5", "]", ",", "np", ".", "float32", ")", "\n", "\n", "src", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dst", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "src", "[", "0", ",", ":", "]", "=", "center", "+", "scale_tmp", "*", "shift", "\n", "src", "[", "1", ",", ":", "]", "=", "center", "+", "src_dir", "+", "scale_tmp", "*", "shift", "\n", "dst", "[", "0", ",", ":", "]", "=", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", "\n", "dst", "[", "1", ",", ":", "]", "=", "np", ".", "array", "(", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", ")", "+", "dst_dir", "\n", "\n", "src", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "src", "[", "0", ",", ":", "]", ",", "src", "[", "1", ",", ":", "]", ")", "\n", "dst", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "dst", "[", "0", ",", ":", "]", ",", "dst", "[", "1", ",", ":", "]", ")", "\n", "\n", "if", "inv", ":", "\n", "        ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "dst", ")", ",", "np", ".", "float32", "(", "src", ")", ")", "\n", "", "else", ":", "\n", "        ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "src", ")", ",", "np", ".", "float32", "(", "dst", ")", ")", "\n", "\n", "", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.mpii_utils.affine_transform": [[62, 66], ["numpy.dot", "numpy.array"], "function", ["None"], ["", "def", "affine_transform", "(", "pt", ",", "t", ")", ":", "\n", "    ", "new_pt", "=", "np", ".", "array", "(", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "1.", "]", ")", ".", "T", "\n", "new_pt", "=", "np", ".", "dot", "(", "t", ",", "new_pt", ")", "\n", "return", "new_pt", "[", ":", "2", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.config.default.update_config": [[112, 119], ["cfg.defrost", "cfg.merge_from_file", "cfg.merge_from_list", "cfg.freeze"], "function", ["None"], ["def", "update_config", "(", "cfg", ",", "args", ")", ":", "\n", "    ", "cfg", ".", "defrost", "(", ")", "\n", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "cfg", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.BasicBlock.__init__": [[35, 44], ["torch.Module.__init__", "seg_hrnet.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "seg_hrnet.conv3x3", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.conv3x3", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.BasicBlock.forward": [[45, 62], ["seg_hrnet.BasicBlock.conv1", "seg_hrnet.BasicBlock.bn1", "seg_hrnet.BasicBlock.relu", "seg_hrnet.BasicBlock.conv2", "seg_hrnet.BasicBlock.bn2", "seg_hrnet.BasicBlock.relu", "seg_hrnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.Bottleneck.__init__": [[67, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.Bottleneck.forward": [[82, 103], ["seg_hrnet.Bottleneck.conv1", "seg_hrnet.Bottleneck.bn1", "seg_hrnet.Bottleneck.relu", "seg_hrnet.Bottleneck.conv2", "seg_hrnet.Bottleneck.bn2", "seg_hrnet.Bottleneck.relu", "seg_hrnet.Bottleneck.conv3", "seg_hrnet.Bottleneck.bn3", "seg_hrnet.Bottleneck.relu", "seg_hrnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.HighResolutionModule.__init__": [[106, 122], ["torch.Module.__init__", "seg_hrnet.HighResolutionModule._check_branches", "seg_hrnet.HighResolutionModule._make_branches", "seg_hrnet.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.HighResolutionModule._check_branches": [[123, 142], ["len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.HighResolutionModule._make_one_branch": [[143, 166], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.HighResolutionModule._make_branches": [[167, 175], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "seg_hrnet.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.HighResolutionModule._make_fuse_layers": [[176, 221], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.HighResolutionModule.get_num_inchannels": [[222, 224], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.HighResolutionModule.forward": [[225, 250], ["range", "range", "len", "range", "x_fuse.append", "seg_hrnet.HighResolutionModule.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "elif", "j", ">", "i", ":", "\n", "                    ", "width_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "1", "]", "\n", "height_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "2", "]", "\n", "y", "=", "y", "+", "F", ".", "interpolate", "(", "\n", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", ",", "\n", "size", "=", "[", "height_output", ",", "width_output", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.HighResolutionNet.__init__": [[260, 327], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "seg_hrnet.HighResolutionNet._make_layer", "seg_hrnet.HighResolutionNet._make_transition_layer", "seg_hrnet.HighResolutionNet._make_stage", "seg_hrnet.HighResolutionNet._make_transition_layer", "seg_hrnet.HighResolutionNet._make_stage", "seg_hrnet.HighResolutionNet._make_transition_layer", "seg_hrnet.HighResolutionNet._make_stage", "numpy.int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "numpy.sum", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "extra", "=", "config", ".", "MODEL", ".", "EXTRA", "\n", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# stem net", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "stage1_cfg", "=", "extra", "[", "'STAGE1'", "]", "\n", "num_channels", "=", "self", ".", "stage1_cfg", "[", "'NUM_CHANNELS'", "]", "[", "0", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage1_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_blocks", "=", "self", ".", "stage1_cfg", "[", "'NUM_BLOCKS'", "]", "[", "0", "]", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_channels", ",", "num_blocks", ")", "\n", "stage1_out_channel", "=", "block", ".", "expansion", "*", "num_channels", "\n", "\n", "self", ".", "stage2_cfg", "=", "extra", "[", "'STAGE2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "\n", "[", "stage1_out_channel", "]", ",", "num_channels", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "extra", "[", "'STAGE3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "extra", "[", "'STAGE4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ")", "\n", "\n", "last_inp_channels", "=", "np", ".", "int", "(", "np", ".", "sum", "(", "pre_stage_channels", ")", ")", "\n", "\n", "self", ".", "last_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "last_inp_channels", ",", "\n", "out_channels", "=", "last_inp_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", ",", "\n", "BatchNorm2d", "(", "last_inp_channels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "last_inp_channels", ",", "\n", "out_channels", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "kernel_size", "=", "extra", ".", "FINAL_CONV_KERNEL", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "if", "extra", ".", "FINAL_CONV_KERNEL", "==", "3", "else", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.HighResolutionNet._make_transition_layer": [[329, 364], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "outchannels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.HighResolutionNet._make_layer": [[365, 381], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.HighResolutionNet._make_stage": [[382, 410], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "seg_hrnet.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.HighResolutionNet.forward": [[411, 455], ["seg_hrnet.HighResolutionNet.conv1", "seg_hrnet.HighResolutionNet.bn1", "seg_hrnet.HighResolutionNet.relu", "seg_hrnet.HighResolutionNet.conv2", "seg_hrnet.HighResolutionNet.bn2", "seg_hrnet.HighResolutionNet.relu", "seg_hrnet.HighResolutionNet.layer1", "range", "seg_hrnet.HighResolutionNet.stage2", "range", "seg_hrnet.HighResolutionNet.stage3", "range", "seg_hrnet.HighResolutionNet.stage4", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seg_hrnet.HighResolutionNet.last_layer", "x[].size", "x[].size", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "x", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "# Upsampling", "\n", "x0_h", ",", "x0_w", "=", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "x1", "=", "F", ".", "upsample", "(", "x", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x2", "=", "F", ".", "upsample", "(", "x", "[", "2", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x3", "=", "F", ".", "upsample", "(", "x", "[", "3", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", "0", "]", ",", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "last_layer", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.HighResolutionNet.init_weights": [[456, 481], ["logger.info", "seg_hrnet.HighResolutionNet.modules", "os.path.isfile", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logger.info", "seg_hrnet.HighResolutionNet.state_dict", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "seg_hrnet.HighResolutionNet.items", "seg_hrnet.HighResolutionNet.update", "seg_hrnet.HighResolutionNet.load_state_dict", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "seg_hrnet.HighResolutionNet.keys", "logger.info", "torch.load.keys", "torch.load.keys", "torch.load.keys", "torch.load.keys", "logger.info", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "seg_hrnet.HighResolutionNet.keys"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "''", ",", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'=> init weights from normal distribution'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained", ",", "map_location", "=", "'cpu'", ")", "\n", "logger", ".", "info", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "_", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "not", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "'{} not in model_dict'", ".", "format", "(", "k", ")", ")", "\n", "", "", "for", "k", ",", "_", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "not", "in", "pretrained_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "'{} not in pretrained_dict'", ".", "format", "(", "k", ")", ")", "\n", "", "", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "# for k, _ in pretrained_dict.items():", "\n", "#    logger.info(", "\n", "#        '=> loading {} pretrained model {}'.format(k, pretrained))", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.conv3x3": [[26, 30], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.models.seg_hrnet.get_seg_model": [[482, 487], ["seg_hrnet.HighResolutionNet", "seg_hrnet.HighResolutionNet.init_weights"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.init_weights"], ["", "", "", "def", "get_seg_model", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "HighResolutionNet", "(", "cfg", ",", "**", "kwargs", ")", "\n", "model", ".", "init_weights", "(", "cfg", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions.InPlaceABN.forward": [[76, 114], ["functions._count_samples", "x.contiguous.contiguous.contiguous", "_backend.forward", "functions._act_forward", "ctx.save_for_backward", "weight.contiguous", "x.contiguous.contiguous.new_empty", "bias.contiguous", "x.contiguous.contiguous.new_empty", "_backend.mean_var", "running_mean.mul_().add_", "running_var.mul_().add_", "ctx.mark_dirty", "ctx.mark_dirty", "running_mean.contiguous", "running_var.contiguous", "running_mean.mul_", "running_var.mul_"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions._count_samples", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.forward", "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions._act_forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "weight", ",", "bias", ",", "running_mean", ",", "running_var", ",", "\n", "training", "=", "True", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-05", ",", "activation", "=", "ACT_LEAKY_RELU", ",", "slope", "=", "0.01", ")", ":", "\n", "# Save context", "\n", "        ", "ctx", ".", "training", "=", "training", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "eps", "=", "eps", "\n", "ctx", ".", "activation", "=", "activation", "\n", "ctx", ".", "slope", "=", "slope", "\n", "ctx", ".", "affine", "=", "weight", "is", "not", "None", "and", "bias", "is", "not", "None", "\n", "\n", "# Prepare inputs", "\n", "count", "=", "_count_samples", "(", "x", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "bias", "=", "bias", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "mean", ",", "var", "=", "_backend", ".", "mean_var", "(", "x", ")", "\n", "\n", "# Update running stats", "\n", "running_mean", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "mean", ")", "\n", "running_var", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "var", "*", "count", "/", "(", "count", "-", "1", ")", ")", "\n", "\n", "# Mark in-place modified tensors", "\n", "ctx", ".", "mark_dirty", "(", "x", ",", "running_mean", ",", "running_var", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "running_mean", ".", "contiguous", "(", ")", ",", "running_var", ".", "contiguous", "(", ")", "\n", "ctx", ".", "mark_dirty", "(", "x", ")", "\n", "\n", "# BN forward + activation", "\n", "", "_backend", ".", "forward", "(", "x", ",", "mean", ",", "var", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "_act_forward", "(", "ctx", ",", "x", ")", "\n", "\n", "# Output", "\n", "ctx", ".", "var", "=", "var", "\n", "ctx", ".", "save_for_backward", "(", "x", ",", "var", ",", "weight", ",", "bias", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions.InPlaceABN.backward": [[115, 136], ["dz.contiguous.contiguous.contiguous", "functions._act_backward", "_backend.backward", "_backend.edz_eydz", "dz.contiguous.contiguous.new_zeros", "dz.contiguous.contiguous.new_zeros", "dz.contiguous.contiguous.size", "dz.contiguous.contiguous.size"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions._act_backward", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "dz", ")", ":", "\n", "        ", "z", ",", "var", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "dz", "=", "dz", ".", "contiguous", "(", ")", "\n", "\n", "# Undo activation", "\n", "_act_backward", "(", "ctx", ",", "z", ",", "dz", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "edz", ",", "eydz", "=", "_backend", ".", "edz_eydz", "(", "z", ",", "dz", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "", "else", ":", "\n", "# TODO: implement simplified CUDA backward for inference mode", "\n", "            ", "edz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "eydz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "dx", ",", "dweight", ",", "dbias", "=", "_backend", ".", "backward", "(", "z", ",", "dz", ",", "var", ",", "weight", ",", "bias", ",", "edz", ",", "eydz", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "dweight", "=", "dweight", "if", "ctx", ".", "affine", "else", "None", "\n", "dbias", "=", "dbias", "if", "ctx", ".", "affine", "else", "None", "\n", "\n", "return", "dx", ",", "dweight", ",", "dbias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions.InPlaceABNSync.forward": [[139, 200], ["cls._parse_extra", "x.contiguous.contiguous.contiguous", "_backend.forward", "functions._act_forward", "ctx.save_for_backward", "functions._count_samples", "weight.contiguous", "x.contiguous.contiguous.new_empty", "bias.contiguous", "x.contiguous.contiguous.new_empty", "_backend.mean_var", "running_mean.mul_().add_", "running_var.mul_().add_", "ctx.mark_dirty", "ctx.mark_dirty", "range", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.mean", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "zip", "ctx.master_queue.put", "ctx.worker_queue.get", "ctx.worker_queue.task_done", "running_mean.contiguous", "running_var.contiguous", "ctx.master_queue.get", "ctx.master_queue.task_done", "torch.gather.append", "torch.gather.append", "queue.put", "running_mean.mul_", "running_var.mul_", "comm.gather.mean.unsqueeze", "var.unsqueeze", "mean_w.unsqueeze", "var_w.unsqueeze", "comm.gather.mean.get_device"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions.InPlaceABNSync._parse_extra", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.forward", "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions._act_forward", "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions._count_samples"], ["    ", "@", "classmethod", "\n", "def", "forward", "(", "cls", ",", "ctx", ",", "x", ",", "weight", ",", "bias", ",", "running_mean", ",", "running_var", ",", "\n", "extra", ",", "training", "=", "True", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-05", ",", "activation", "=", "ACT_LEAKY_RELU", ",", "slope", "=", "0.01", ")", ":", "\n", "# Save context", "\n", "        ", "cls", ".", "_parse_extra", "(", "ctx", ",", "extra", ")", "\n", "ctx", ".", "training", "=", "training", "\n", "ctx", ".", "momentum", "=", "momentum", "\n", "ctx", ".", "eps", "=", "eps", "\n", "ctx", ".", "activation", "=", "activation", "\n", "ctx", ".", "slope", "=", "slope", "\n", "ctx", ".", "affine", "=", "weight", "is", "not", "None", "and", "bias", "is", "not", "None", "\n", "\n", "# Prepare inputs", "\n", "count", "=", "_count_samples", "(", "x", ")", "*", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "bias", "=", "bias", ".", "contiguous", "(", ")", "if", "ctx", ".", "affine", "else", "x", ".", "new_empty", "(", "0", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "mean", ",", "var", "=", "_backend", ".", "mean_var", "(", "x", ")", "\n", "\n", "if", "ctx", ".", "is_master", ":", "\n", "                ", "means", ",", "vars", "=", "[", "mean", ".", "unsqueeze", "(", "0", ")", "]", ",", "[", "var", ".", "unsqueeze", "(", "0", ")", "]", "\n", "for", "_", "in", "range", "(", "ctx", ".", "master_queue", ".", "maxsize", ")", ":", "\n", "                    ", "mean_w", ",", "var_w", "=", "ctx", ".", "master_queue", ".", "get", "(", ")", "\n", "ctx", ".", "master_queue", ".", "task_done", "(", ")", "\n", "means", ".", "append", "(", "mean_w", ".", "unsqueeze", "(", "0", ")", ")", "\n", "vars", ".", "append", "(", "var_w", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "means", "=", "comm", ".", "gather", "(", "means", ")", "\n", "vars", "=", "comm", ".", "gather", "(", "vars", ")", "\n", "\n", "mean", "=", "means", ".", "mean", "(", "0", ")", "\n", "var", "=", "(", "vars", "+", "(", "mean", "-", "means", ")", "**", "2", ")", ".", "mean", "(", "0", ")", "\n", "\n", "tensors", "=", "comm", ".", "broadcast_coalesced", "(", "(", "mean", ",", "var", ")", ",", "[", "mean", ".", "get_device", "(", ")", "]", "+", "ctx", ".", "worker_ids", ")", "\n", "for", "ts", ",", "queue", "in", "zip", "(", "tensors", "[", "1", ":", "]", ",", "ctx", ".", "worker_queues", ")", ":", "\n", "                    ", "queue", ".", "put", "(", "ts", ")", "\n", "", "", "else", ":", "\n", "                ", "ctx", ".", "master_queue", ".", "put", "(", "(", "mean", ",", "var", ")", ")", "\n", "mean", ",", "var", "=", "ctx", ".", "worker_queue", ".", "get", "(", ")", "\n", "ctx", ".", "worker_queue", ".", "task_done", "(", ")", "\n", "\n", "# Update running stats", "\n", "", "running_mean", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "mean", ")", "\n", "running_var", ".", "mul_", "(", "(", "1", "-", "ctx", ".", "momentum", ")", ")", ".", "add_", "(", "ctx", ".", "momentum", "*", "var", "*", "count", "/", "(", "count", "-", "1", ")", ")", "\n", "\n", "# Mark in-place modified tensors", "\n", "ctx", ".", "mark_dirty", "(", "x", ",", "running_mean", ",", "running_var", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "var", "=", "running_mean", ".", "contiguous", "(", ")", ",", "running_var", ".", "contiguous", "(", ")", "\n", "ctx", ".", "mark_dirty", "(", "x", ")", "\n", "\n", "# BN forward + activation", "\n", "", "_backend", ".", "forward", "(", "x", ",", "mean", ",", "var", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "_act_forward", "(", "ctx", ",", "x", ")", "\n", "\n", "# Output", "\n", "ctx", ".", "var", "=", "var", "\n", "ctx", ".", "save_for_backward", "(", "x", ",", "var", ",", "weight", ",", "bias", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions.InPlaceABNSync.backward": [[201, 240], ["dz.contiguous.contiguous.contiguous", "functions._act_backward", "_backend.backward", "_backend.edz_eydz", "dz.contiguous.contiguous.new_zeros", "dz.contiguous.contiguous.new_zeros", "range", "torch.broadcast_coalesced", "torch.broadcast_coalesced", "zip", "ctx.master_queue.put", "ctx.worker_queue.get", "ctx.worker_queue.task_done", "dz.contiguous.contiguous.size", "dz.contiguous.contiguous.size", "len", "ctx.master_queue.get", "ctx.master_queue.task_done", "edzs.append", "eydzs.append", "torch.reduce_add", "torch.reduce_add", "torch.reduce_add", "torch.reduce_add", "queue.put", "dz.contiguous.new_zeros.get_device"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions._act_backward", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "dz", ")", ":", "\n", "        ", "z", ",", "var", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "dz", "=", "dz", ".", "contiguous", "(", ")", "\n", "\n", "# Undo activation", "\n", "_act_backward", "(", "ctx", ",", "z", ",", "dz", ")", "\n", "\n", "if", "ctx", ".", "training", ":", "\n", "            ", "edz", ",", "eydz", "=", "_backend", ".", "edz_eydz", "(", "z", ",", "dz", ",", "weight", ",", "bias", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "\n", "if", "ctx", ".", "is_master", ":", "\n", "                ", "edzs", ",", "eydzs", "=", "[", "edz", "]", ",", "[", "eydz", "]", "\n", "for", "_", "in", "range", "(", "len", "(", "ctx", ".", "worker_queues", ")", ")", ":", "\n", "                    ", "edz_w", ",", "eydz_w", "=", "ctx", ".", "master_queue", ".", "get", "(", ")", "\n", "ctx", ".", "master_queue", ".", "task_done", "(", ")", "\n", "edzs", ".", "append", "(", "edz_w", ")", "\n", "eydzs", ".", "append", "(", "eydz_w", ")", "\n", "\n", "", "edz", "=", "comm", ".", "reduce_add", "(", "edzs", ")", "/", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "eydz", "=", "comm", ".", "reduce_add", "(", "eydzs", ")", "/", "(", "ctx", ".", "master_queue", ".", "maxsize", "+", "1", ")", "\n", "\n", "tensors", "=", "comm", ".", "broadcast_coalesced", "(", "(", "edz", ",", "eydz", ")", ",", "[", "edz", ".", "get_device", "(", ")", "]", "+", "ctx", ".", "worker_ids", ")", "\n", "for", "ts", ",", "queue", "in", "zip", "(", "tensors", "[", "1", ":", "]", ",", "ctx", ".", "worker_queues", ")", ":", "\n", "                    ", "queue", ".", "put", "(", "ts", ")", "\n", "", "", "else", ":", "\n", "                ", "ctx", ".", "master_queue", ".", "put", "(", "(", "edz", ",", "eydz", ")", ")", "\n", "edz", ",", "eydz", "=", "ctx", ".", "worker_queue", ".", "get", "(", ")", "\n", "ctx", ".", "worker_queue", ".", "task_done", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "edz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "eydz", "=", "dz", ".", "new_zeros", "(", "dz", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "dx", ",", "dweight", ",", "dbias", "=", "_backend", ".", "backward", "(", "z", ",", "dz", ",", "var", ",", "weight", ",", "bias", ",", "edz", ",", "eydz", ",", "ctx", ".", "affine", ",", "ctx", ".", "eps", ")", "\n", "dweight", "=", "dweight", "if", "ctx", ".", "affine", "else", "None", "\n", "dbias", "=", "dbias", "if", "ctx", ".", "affine", "else", "None", "\n", "\n", "return", "dx", ",", "dweight", ",", "dbias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions.InPlaceABNSync._parse_extra": [[241, 251], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_parse_extra", "(", "ctx", ",", "extra", ")", ":", "\n", "        ", "ctx", ".", "is_master", "=", "extra", "[", "\"is_master\"", "]", "\n", "if", "ctx", ".", "is_master", ":", "\n", "            ", "ctx", ".", "master_queue", "=", "extra", "[", "\"master_queue\"", "]", "\n", "ctx", ".", "worker_queues", "=", "extra", "[", "\"worker_queues\"", "]", "\n", "ctx", ".", "worker_ids", "=", "extra", "[", "\"worker_ids\"", "]", "\n", "", "else", ":", "\n", "            ", "ctx", ".", "master_queue", "=", "extra", "[", "\"master_queue\"", "]", "\n", "ctx", ".", "worker_queue", "=", "extra", "[", "\"worker_queue\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions._check": [[25, 29], ["fn", "RuntimeError"], "function", ["None"], ["def", "_check", "(", "fn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "success", "=", "fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "not", "success", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"CUDA Error encountered in {}\"", ".", "format", "(", "fn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions._broadcast_shape": [[31, 39], ["enumerate", "x.size", "out_size.append", "out_size.append"], "function", ["None"], ["", "", "def", "_broadcast_shape", "(", "x", ")", ":", "\n", "    ", "out_size", "=", "[", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "x", ".", "size", "(", ")", ")", ":", "\n", "        ", "if", "i", "!=", "1", ":", "\n", "            ", "out_size", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "out_size", ".", "append", "(", "s", ")", "\n", "", "", "return", "out_size", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions._reduce": [[41, 47], ["len", "x.sum", "x.contiguous().view().sum().sum", "x.size", "x.size", "x.contiguous().view().sum", "x.contiguous().view", "x.contiguous"], "function", ["None"], ["", "def", "_reduce", "(", "x", ")", ":", "\n", "    ", "if", "len", "(", "x", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "        ", "return", "x", ".", "sum", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "n", ",", "c", "=", "x", ".", "size", "(", ")", "[", "0", ":", "2", "]", "\n", "return", "x", ".", "contiguous", "(", ")", ".", "view", "(", "(", "n", ",", "c", ",", "-", "1", ")", ")", ".", "sum", "(", "2", ")", ".", "sum", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions._count_samples": [[49, 55], ["enumerate", "x.size"], "function", ["None"], ["", "", "def", "_count_samples", "(", "x", ")", ":", "\n", "    ", "count", "=", "1", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "x", ".", "size", "(", ")", ")", ":", "\n", "        ", "if", "i", "!=", "1", ":", "\n", "            ", "count", "*=", "s", "\n", "", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions._act_forward": [[57, 64], ["_backend.leaky_relu_forward", "_backend.elu_forward"], "function", ["None"], ["", "def", "_act_forward", "(", "ctx", ",", "x", ")", ":", "\n", "    ", "if", "ctx", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "        ", "_backend", ".", "leaky_relu_forward", "(", "x", ",", "ctx", ".", "slope", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_ELU", ":", "\n", "        ", "_backend", ".", "elu_forward", "(", "x", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_NONE", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.functions._act_backward": [[66, 73], ["_backend.leaky_relu_backward", "_backend.elu_backward"], "function", ["None"], ["", "", "def", "_act_backward", "(", "ctx", ",", "x", ",", "dx", ")", ":", "\n", "    ", "if", "ctx", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "        ", "_backend", ".", "leaky_relu_backward", "(", "x", ",", "dx", ",", "ctx", ".", "slope", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_ELU", ":", "\n", "        ", "_backend", ".", "elu_backward", "(", "x", ",", "dx", ")", "\n", "", "elif", "ctx", ".", "activation", "==", "ACT_NONE", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.bn.ABN.__init__": [[23, 57], ["torch.Module.__init__", "bn.ABN.register_buffer", "bn.ABN.register_buffer", "bn.ABN.reset_parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "bn.ABN.register_parameter", "bn.ABN.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.bn.ABN.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "slope", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Creates an Activated Batch Normalization module\n\n        Parameters\n        ----------\n        num_features : int\n            Number of feature channels in the input and output.\n        eps : float\n            Small constant to prevent numerical issues.\n        momentum : float\n            Momentum factor applied to compute running statistics as.\n        affine : bool\n            If `True` apply learned scale and shift transformation after normalization.\n        activation : str\n            Name of the activation functions, one of: `leaky_relu`, `elu` or `none`.\n        slope : float\n            Negative slope for the `leaky_relu` activation.\n        \"\"\"", "\n", "super", "(", "ABN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "slope", "=", "slope", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.bn.ABN.reset_parameters": [[58, 64], ["torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "running_mean", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "running_var", ",", "1", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.bn.ABN.forward": [[65, 77], ["torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.relu", "torch.relu", "torch.relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.elu", "torch.elu", "torch.elu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "functional", ".", "batch_norm", "(", "x", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "if", "self", ".", "activation", "==", "ACT_RELU", ":", "\n", "            ", "return", "functional", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "activation", "==", "ACT_LEAKY_RELU", ":", "\n", "            ", "return", "functional", ".", "leaky_relu", "(", "x", ",", "negative_slope", "=", "self", ".", "slope", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "activation", "==", "ACT_ELU", ":", "\n", "            ", "return", "functional", ".", "elu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.bn.ABN.__repr__": [[78, 86], ["rep.format"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "rep", "=", "'{name}({num_features}, eps={eps}, momentum={momentum},'", "' affine={affine}, activation={activation}'", "\n", "if", "self", ".", "activation", "==", "\"leaky_relu\"", ":", "\n", "            ", "rep", "+=", "', slope={slope})'", "\n", "", "else", ":", "\n", "            ", "rep", "+=", "')'", "\n", "", "return", "rep", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.bn.InPlaceABN.__init__": [[91, 110], ["bn.ABN.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "slope", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Creates an InPlace Activated Batch Normalization module\n\n        Parameters\n        ----------\n        num_features : int\n            Number of feature channels in the input and output.\n        eps : float\n            Small constant to prevent numerical issues.\n        momentum : float\n            Momentum factor applied to compute running statistics as.\n        affine : bool\n            If `True` apply learned scale and shift transformation after normalization.\n        activation : str\n            Name of the activation functions, one of: `leaky_relu`, `elu` or `none`.\n        slope : float\n            Negative slope for the `leaky_relu` activation.\n        \"\"\"", "\n", "super", "(", "InPlaceABN", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "activation", ",", "slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.bn.InPlaceABN.forward": [[111, 114], ["inplace_abn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "inplace_abn", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "self", ".", "activation", ",", "self", ".", "slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.bn.InPlaceABNSync.__init__": [[122, 150], ["bn.ABN.__init__", "Queue", "list", "len", "Queue", "range", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "devices", "=", "None", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "activation", "=", "\"leaky_relu\"", ",", "\n", "slope", "=", "0.01", ")", ":", "\n", "        ", "\"\"\"Creates a synchronized, InPlace Activated Batch Normalization module\n\n        Parameters\n        ----------\n        num_features : int\n            Number of feature channels in the input and output.\n        devices : list of int or None\n            IDs of the GPUs that will run the replicas of this module.\n        eps : float\n            Small constant to prevent numerical issues.\n        momentum : float\n            Momentum factor applied to compute running statistics as.\n        affine : bool\n            If `True` apply learned scale and shift transformation after normalization.\n        activation : str\n            Name of the activation functions, one of: `leaky_relu`, `elu` or `none`.\n        slope : float\n            Negative slope for the `leaky_relu` activation.\n        \"\"\"", "\n", "super", "(", "InPlaceABNSync", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ",", "activation", ",", "slope", ")", "\n", "self", ".", "devices", "=", "devices", "if", "devices", "else", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "\n", "# Initialize queues", "\n", "self", ".", "worker_ids", "=", "self", ".", "devices", "[", "1", ":", "]", "\n", "self", ".", "master_queue", "=", "Queue", "(", "len", "(", "self", ".", "worker_ids", ")", ")", "\n", "self", ".", "worker_queues", "=", "[", "Queue", "(", "1", ")", "for", "_", "in", "self", ".", "worker_ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.bn.InPlaceABNSync.forward": [[151, 170], ["inplace_abn_sync", "x.get_device", "bn.InPlaceABNSync.worker_ids.index", "x.get_device"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "get_device", "(", ")", "==", "self", ".", "devices", "[", "0", "]", ":", "\n", "# Master mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "True", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queues\"", ":", "self", ".", "worker_queues", ",", "\n", "\"worker_ids\"", ":", "self", ".", "worker_ids", "\n", "}", "\n", "", "else", ":", "\n", "# Worker mode", "\n", "            ", "extra", "=", "{", "\n", "\"is_master\"", ":", "False", ",", "\n", "\"master_queue\"", ":", "self", ".", "master_queue", ",", "\n", "\"worker_queue\"", ":", "self", ".", "worker_queues", "[", "self", ".", "worker_ids", ".", "index", "(", "x", ".", "get_device", "(", ")", ")", "]", "\n", "}", "\n", "\n", "", "return", "inplace_abn_sync", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "\n", "extra", ",", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "self", ".", "activation", ",", "self", ".", "slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.inplace_abn.bn.InPlaceABNSync.__repr__": [[171, 179], ["rep.format"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "rep", "=", "'{name}({num_features}, eps={eps}, momentum={momentum},'", "' affine={affine}, devices={devices}, activation={activation}'", "\n", "if", "self", ".", "activation", "==", "\"leaky_relu\"", ":", "\n", "            ", "rep", "+=", "', slope={slope})'", "\n", "", "else", ":", "\n", "            ", "rep", "+=", "')'", "\n", "", "return", "rep", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.core.function.reduce_tensor": [[25, 37], ["utils.utils.get_world_size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.reduce"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size"], ["def", "reduce_tensor", "(", "inp", ")", ":", "\n", "    ", "\"\"\"\n    Reduce the loss from all processes so that \n    process with rank 0 has the averaged results.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "inp", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "reduced_inp", "=", "inp", "\n", "dist", ".", "reduce", "(", "reduced_inp", ",", "dst", "=", "0", ")", "\n", "", "return", "reduced_inp", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.core.function.train": [[38, 88], ["model.train", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "time.time", "utils.utils.get_rank", "utils.utils.get_world_size", "enumerate", "images.to.to", "labels.long().to.long().to", "model", "losses.mean", "function.reduce_tensor", "model.zero_grad", "losses.mean.backward", "optimizer.step", "utils.utils.AverageMeter.update", "time.time", "utils.utils.AverageMeter.update", "utils.utils.adjust_learning_rate", "reduce_tensor.item", "logging.info", "writer.add_scalar", "labels.long().to.long", "time.time", "utils.utils.AverageMeter.average", "utils.utils.AverageMeter.average"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_rank", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.core.function.reduce_tensor", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.adjust_learning_rate", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.AverageMeter.average"], ["", "def", "train", "(", "config", ",", "epoch", ",", "num_epoch", ",", "epoch_iters", ",", "base_lr", ",", "num_iters", ",", "\n", "trainloader", ",", "optimizer", ",", "model", ",", "writer_dict", ",", "device", ")", ":", "\n", "\n", "# Training", "\n", "    ", "model", ".", "train", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "ave_loss", "=", "AverageMeter", "(", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "cur_iters", "=", "epoch", "*", "epoch_iters", "\n", "writer", "=", "writer_dict", "[", "'writer'", "]", "\n", "global_steps", "=", "writer_dict", "[", "'train_global_steps'", "]", "\n", "rank", "=", "get_rank", "(", ")", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "for", "i_iter", ",", "batch", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "images", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "losses", ",", "_", "=", "model", "(", "images", ",", "labels", ")", "\n", "loss", "=", "losses", ".", "mean", "(", ")", "\n", "\n", "reduced_loss", "=", "reduce_tensor", "(", "loss", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "tic", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "# update average loss", "\n", "ave_loss", ".", "update", "(", "reduced_loss", ".", "item", "(", ")", ")", "\n", "\n", "lr", "=", "adjust_learning_rate", "(", "optimizer", ",", "\n", "base_lr", ",", "\n", "num_iters", ",", "\n", "i_iter", "+", "cur_iters", ")", "\n", "\n", "if", "i_iter", "%", "config", ".", "PRINT_FREQ", "==", "0", "and", "rank", "==", "0", ":", "\n", "            ", "print_loss", "=", "ave_loss", ".", "average", "(", ")", "/", "world_size", "\n", "msg", "=", "'Epoch: [{}/{}] Iter:[{}/{}], Time: {:.2f}, '", "'lr: {:.6f}, Loss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "num_epoch", ",", "i_iter", ",", "epoch_iters", ",", "\n", "batch_time", ".", "average", "(", ")", ",", "lr", ",", "print_loss", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'train_loss'", ",", "print_loss", ",", "global_steps", ")", "\n", "writer_dict", "[", "'train_global_steps'", "]", "=", "global_steps", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.core.function.validate": [[89, 137], ["utils.utils.get_rank", "utils.utils.get_world_size", "model.eval", "utils.utils.AverageMeter", "numpy.zeros", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "function.reduce_tensor", "reduce_tensor.cpu().numpy", "reduced_confusion_matrix.cpu().numpy.sum", "reduced_confusion_matrix.cpu().numpy.sum", "numpy.diag", "IoU_array.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "numpy.maximum", "utils.utils.AverageMeter.average", "writer.add_scalar", "writer.add_scalar", "label.long().to.size", "image.to.to", "label.long().to.long().to", "model", "torch.nn.functional.upsample", "losses.mean", "function.reduce_tensor", "utils.utils.AverageMeter.update", "utils.utils.get_confusion_matrix", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "reduce_tensor.cpu", "reduce_tensor.item", "label.long().to.long"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_rank", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.core.function.reduce_tensor", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.hongfz16_hcmoco.core.function.reduce_tensor", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_confusion_matrix"], ["", "", "", "def", "validate", "(", "config", ",", "testloader", ",", "model", ",", "writer_dict", ",", "device", ")", ":", "\n", "\n", "    ", "rank", "=", "get_rank", "(", ")", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "ave_loss", "=", "AverageMeter", "(", ")", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "\n", "(", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "config", ".", "DATASET", ".", "NUM_CLASSES", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", ",", "batch", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "image", ",", "label", ",", "_", ",", "_", "=", "batch", "\n", "size", "=", "label", ".", "size", "(", ")", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "losses", ",", "pred", "=", "model", "(", "image", ",", "label", ")", "\n", "pred", "=", "F", ".", "upsample", "(", "input", "=", "pred", ",", "size", "=", "(", "\n", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "loss", "=", "losses", ".", "mean", "(", ")", "\n", "reduced_loss", "=", "reduce_tensor", "(", "loss", ")", "\n", "ave_loss", ".", "update", "(", "reduced_loss", ".", "item", "(", ")", ")", "\n", "\n", "confusion_matrix", "+=", "get_confusion_matrix", "(", "\n", "label", ",", "\n", "pred", ",", "\n", "size", ",", "\n", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ")", "\n", "\n", "", "", "confusion_matrix", "=", "torch", ".", "from_numpy", "(", "confusion_matrix", ")", ".", "to", "(", "device", ")", "\n", "reduced_confusion_matrix", "=", "reduce_tensor", "(", "confusion_matrix", ")", "\n", "\n", "confusion_matrix", "=", "reduced_confusion_matrix", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pos", "=", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "res", "=", "confusion_matrix", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "IoU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IoU", "=", "IoU_array", ".", "mean", "(", ")", "\n", "print_loss", "=", "ave_loss", ".", "average", "(", ")", "/", "world_size", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "writer", "=", "writer_dict", "[", "'writer'", "]", "\n", "global_steps", "=", "writer_dict", "[", "'valid_global_steps'", "]", "\n", "writer", ".", "add_scalar", "(", "'valid_loss'", ",", "print_loss", ",", "global_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'valid_mIoU'", ",", "mean_IoU", ",", "global_steps", ")", "\n", "writer_dict", "[", "'valid_global_steps'", "]", "=", "global_steps", "+", "1", "\n", "", "return", "print_loss", ",", "mean_IoU", ",", "IoU_array", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.core.function.testval": [[139, 200], ["model.eval", "numpy.zeros", "np.zeros.sum", "np.zeros.sum", "numpy.diag", "IoU_array.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "np.diag.sum", "confusion_matrix.sum.sum", "numpy.maximum", "tqdm.tqdm", "label.size", "test_dataset.multi_scale_inference", "utils.utils.get_confusion_matrix", "torch.nn.functional.upsample", "os.path.join", "test_dataset.save_pred", "logging.info", "np.zeros.sum", "np.zeros.sum", "numpy.diag", "IoU_array.mean", "logging.info", "numpy.maximum", "os.path.exists", "os.mkdir", "numpy.maximum", "F.upsample.size", "F.upsample.size"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.multi_scale_inference", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_confusion_matrix", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.save_pred"], ["", "def", "testval", "(", "config", ",", "test_dataset", ",", "testloader", ",", "model", ",", "\n", "sv_dir", "=", "''", ",", "sv_pred", "=", "False", ",", "subfolder", "=", "''", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "confusion_matrix", "=", "np", ".", "zeros", "(", "\n", "(", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "config", ".", "DATASET", ".", "NUM_CLASSES", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "index", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "testloader", ")", ")", ":", "\n", "            ", "image", ",", "label", ",", "_", ",", "name", "=", "batch", "\n", "size", "=", "label", ".", "size", "(", ")", "\n", "pred", "=", "test_dataset", ".", "multi_scale_inference", "(", "\n", "model", ",", "\n", "image", ",", "\n", "scales", "=", "config", ".", "TEST", ".", "SCALE_LIST", ",", "\n", "flip", "=", "config", ".", "TEST", ".", "FLIP_TEST", ")", "\n", "\n", "if", "pred", ".", "size", "(", ")", "[", "-", "2", "]", "!=", "size", "[", "-", "2", "]", "or", "pred", ".", "size", "(", ")", "[", "-", "1", "]", "!=", "size", "[", "-", "1", "]", ":", "\n", "                ", "pred", "=", "F", ".", "upsample", "(", "pred", ",", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "confusion_matrix", "+=", "get_confusion_matrix", "(", "\n", "label", ",", "\n", "pred", ",", "\n", "size", ",", "\n", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ")", "\n", "\n", "if", "sv_pred", ":", "\n", "                ", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "subfolder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sv_path", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "sv_path", ")", "\n", "", "test_dataset", ".", "save_pred", "(", "pred", ",", "sv_path", ",", "name", ")", "\n", "\n", "# sv_path1 = os.path.join(sv_dir, 'ori_img_'+subfolder)", "\n", "# sv_path2 = os.path.join(sv_dir, 'gt_'+subfolder)", "\n", "# if not os.path.exists(sv_path1):", "\n", "#     os.mkdir(sv_path1)", "\n", "# if not os.path.exists(sv_path2):", "\n", "#     os.mkdir(sv_path2)", "\n", "# test_dataset.save_gt(image, label, sv_path1, sv_path2, name)", "\n", "\n", "", "if", "index", "%", "100", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'processing: %d images'", "%", "index", ")", "\n", "pos", "=", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "res", "=", "confusion_matrix", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "IoU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IoU", "=", "IoU_array", ".", "mean", "(", ")", "\n", "logging", ".", "info", "(", "'mIoU: %.4f'", "%", "(", "mean_IoU", ")", ")", "\n", "\n", "# if index == 1000:", "\n", "#     break", "\n", "\n", "", "", "", "pos", "=", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "res", "=", "confusion_matrix", ".", "sum", "(", "0", ")", "\n", "tp", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "pixel_acc", "=", "tp", ".", "sum", "(", ")", "/", "pos", ".", "sum", "(", ")", "\n", "mean_acc", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", ")", ")", ".", "mean", "(", ")", "\n", "IoU_array", "=", "(", "tp", "/", "np", ".", "maximum", "(", "1.0", ",", "pos", "+", "res", "-", "tp", ")", ")", "\n", "mean_IoU", "=", "IoU_array", ".", "mean", "(", ")", "\n", "\n", "return", "mean_IoU", ",", "IoU_array", ",", "pixel_acc", ",", "mean_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.core.function.test": [[201, 223], ["model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "tqdm.tqdm", "test_dataset.multi_scale_inference", "torch.nn.functional.upsample", "os.path.join", "test_dataset.save_pred", "os.path.exists", "os.mkdir", "F.upsample.size", "F.upsample.size"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.base_dataset.BaseDataset.multi_scale_inference", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.nturgbd_d.NTURGBDD.save_pred"], ["", "def", "test", "(", "config", ",", "test_dataset", ",", "testloader", ",", "model", ",", "\n", "sv_dir", "=", "''", ",", "sv_pred", "=", "True", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "testloader", ")", ")", ":", "\n", "            ", "image", ",", "size", ",", "name", "=", "batch", "\n", "size", "=", "size", "[", "0", "]", "\n", "pred", "=", "test_dataset", ".", "multi_scale_inference", "(", "\n", "model", ",", "\n", "image", ",", "\n", "scales", "=", "config", ".", "TEST", ".", "SCALE_LIST", ",", "\n", "flip", "=", "config", ".", "TEST", ".", "FLIP_TEST", ")", "\n", "\n", "if", "pred", ".", "size", "(", ")", "[", "-", "2", "]", "!=", "size", "[", "0", "]", "or", "pred", ".", "size", "(", ")", "[", "-", "1", "]", "!=", "size", "[", "1", "]", ":", "\n", "                ", "pred", "=", "F", ".", "upsample", "(", "pred", ",", "(", "size", "[", "-", "2", "]", ",", "size", "[", "-", "1", "]", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "if", "sv_pred", ":", "\n", "                ", "sv_path", "=", "os", ".", "path", ".", "join", "(", "sv_dir", ",", "'test_results'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sv_path", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "sv_path", ")", "\n", "", "test_dataset", ".", "save_pred", "(", "pred", ",", "sv_path", ",", "name", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.core.criterion.CrossEntropy.__init__": [[12, 17], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_label", "=", "-", "1", ",", "weight", "=", "None", ")", ":", "\n", "        ", "super", "(", "CrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight", ",", "\n", "ignore_index", "=", "ignore_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.core.criterion.CrossEntropy.forward": [[18, 28], ["criterion.CrossEntropy.criterion", "torch.nn.functional.upsample.size", "torch.nn.functional.upsample.size", "target.size", "target.size", "torch.nn.functional.upsample", "torch.nn.functional.upsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "score", ",", "target", ")", ":", "\n", "        ", "ph", ",", "pw", "=", "score", ".", "size", "(", "2", ")", ",", "score", ".", "size", "(", "3", ")", "\n", "h", ",", "w", "=", "target", ".", "size", "(", "1", ")", ",", "target", ".", "size", "(", "2", ")", "\n", "if", "ph", "!=", "h", "or", "pw", "!=", "w", ":", "\n", "            ", "score", "=", "F", ".", "upsample", "(", "\n", "input", "=", "score", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "loss", "=", "self", ".", "criterion", "(", "score", ",", "target", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.core.criterion.OhemCrossEntropy.__init__": [[30, 39], ["torch.Module.__init__", "max", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_label", "=", "-", "1", ",", "thres", "=", "0.7", ",", "\n", "min_kept", "=", "100000", ",", "weight", "=", "None", ")", ":", "\n", "        ", "super", "(", "OhemCrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "thresh", "=", "thres", "\n", "self", ".", "min_kept", "=", "max", "(", "1", ",", "min_kept", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight", ",", "\n", "ignore_index", "=", "ignore_label", ",", "\n", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.core.criterion.OhemCrossEntropy.forward": [[40, 59], ["torch.nn.functional.softmax", "torch.nn.functional.softmax", "criterion.OhemCrossEntropy.criterion().contiguous().view", "target.clone", "pred.gather.gather.gather", "[].contiguous().sort", "max", "criterion.OhemCrossEntropy.mean", "torch.nn.functional.upsample.size", "torch.nn.functional.upsample.size", "target.size", "target.size", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "target.contiguous().view", "target.clone.unsqueeze", "criterion.OhemCrossEntropy.criterion().contiguous", "[].contiguous", "min", "target.contiguous", "criterion.OhemCrossEntropy.criterion", "pred.gather.gather.numel", "pred.gather.gather.contiguous().view", "pred.gather.gather.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "score", ",", "target", ",", "**", "kwargs", ")", ":", "\n", "        ", "ph", ",", "pw", "=", "score", ".", "size", "(", "2", ")", ",", "score", ".", "size", "(", "3", ")", "\n", "h", ",", "w", "=", "target", ".", "size", "(", "1", ")", ",", "target", ".", "size", "(", "2", ")", "\n", "if", "ph", "!=", "h", "or", "pw", "!=", "w", ":", "\n", "            ", "score", "=", "F", ".", "upsample", "(", "input", "=", "score", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "", "pred", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "1", ")", "\n", "pixel_losses", "=", "self", ".", "criterion", "(", "score", ",", "target", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "mask", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "!=", "self", ".", "ignore_label", "\n", "\n", "tmp_target", "=", "target", ".", "clone", "(", ")", "\n", "tmp_target", "[", "tmp_target", "==", "self", ".", "ignore_label", "]", "=", "0", "\n", "pred", "=", "pred", ".", "gather", "(", "1", ",", "tmp_target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "pred", ",", "ind", "=", "pred", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", ")", "[", "mask", "]", ".", "contiguous", "(", ")", ".", "sort", "(", ")", "\n", "min_value", "=", "pred", "[", "min", "(", "self", ".", "min_kept", ",", "pred", ".", "numel", "(", ")", "-", "1", ")", "]", "\n", "threshold", "=", "max", "(", "min_value", ",", "self", ".", "thresh", ")", "\n", "\n", "pixel_losses", "=", "pixel_losses", "[", "mask", "]", "[", "ind", "]", "\n", "pixel_losses", "=", "pixel_losses", "[", "pred", "<", "threshold", "]", "\n", "return", "pixel_losses", ".", "mean", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.tools.train.parse_args": [[37, 55], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.update_config"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.tools.test.parse_args", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.default_config.update_config"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train segmentation network'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "\n", "help", "=", "'experiment configure file name'", ",", "\n", "required", "=", "True", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'opts'", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "parser", ".", "add_argument", "(", "'--freq'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "update_config", "(", "config", ",", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.tools.train.main": [[56, 286], ["train.parse_args", "utils.utils.create_logger", "logger.info", "logger.info", "list", "torch.device", "torch.device", "torch.device", "torch.device", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.utils.FullModel", "torch.SyncBatchNorm.convert_sync_batchnorm", "nn.parallel.DistributedDataParallel.to", "torch.parallel.DistributedDataParallel", "numpy.int", "timeit.default_timer", "range", "pprint.pformat", "tensorboardX.SummaryWriter", "len", "eval", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "logger.info", "os.path.dirname", "os.path.join", "os.path.exists", "shutil.copytree", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "eval", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "eval", "torch.utils.data.distributed.DistributedSampler", "core.criterion.OhemCrossEntropy", "core.criterion.CrossEntropy", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "ValueError", "os.path.join", "os.path.isfile", "utils.modelsummary.get_model_summary", "shutil.rmtree", "os.path.join", "eval", "torch.utils.data.distributed.DistributedSampler", "len", "torch.load", "torch.load", "torch.load", "torch.load", "nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.optim.SGD.load_state_dict", "logger.info", "torch.utils.data.distributed.DistributedSampler.set_epoch", "core.function.train", "core.function.train", "core.function.validate", "logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "nn.parallel.DistributedDataParallel.to", "torch.rand.to", "train_dataset.__len__", "os.path.join", "logging.info", "logging.info", "torch.save", "torch.save", "torch.save", "torch.save", "writer_dict[].close", "timeit.default_timer", "logger.info", "logger.info", "filter", "nn.parallel.DistributedDataParallel.module.state_dict", "torch.optim.SGD.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "nn.parallel.DistributedDataParallel.module.state_dict", "os.path.join", "nn.parallel.DistributedDataParallel.parameters", "nn.parallel.DistributedDataParallel.module.state_dict", "os.path.join", "numpy.int"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.tools.test.parse_args", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.create_logger", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.modelsummary.get_model_summary", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.validate", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DatasetFromSampler.__len__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "logger", ",", "final_output_dir", ",", "tb_log_dir", "=", "create_logger", "(", "\n", "config", ",", "args", ".", "cfg", ",", "'train'", ")", "\n", "\n", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "args", ")", ")", "\n", "logger", ".", "info", "(", "config", ")", "\n", "\n", "writer_dict", "=", "{", "\n", "'writer'", ":", "SummaryWriter", "(", "tb_log_dir", ")", ",", "\n", "'train_global_steps'", ":", "0", ",", "\n", "'valid_global_steps'", ":", "0", ",", "\n", "}", "\n", "\n", "# cudnn related setting", "\n", "cudnn", ".", "benchmark", "=", "config", ".", "CUDNN", ".", "BENCHMARK", "\n", "cudnn", ".", "deterministic", "=", "config", ".", "CUDNN", ".", "DETERMINISTIC", "\n", "cudnn", ".", "enabled", "=", "config", ".", "CUDNN", ".", "ENABLED", "\n", "gpus", "=", "list", "(", "config", ".", "GPUS", ")", "\n", "distributed", "=", "len", "(", "gpus", ")", ">=", "1", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "args", ".", "local_rank", ")", ")", "\n", "\n", "# build model", "\n", "model", "=", "eval", "(", "'models.'", "+", "config", ".", "MODEL", ".", "NAME", "+", "\n", "'.get_seg_model'", ")", "(", "config", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "# provide the summary of model", "\n", "        ", "dump_input", "=", "torch", ".", "rand", "(", "\n", "(", "1", ",", "3", ",", "config", ".", "TRAIN", ".", "IMAGE_SIZE", "[", "1", "]", ",", "config", ".", "TRAIN", ".", "IMAGE_SIZE", "[", "0", "]", ")", "\n", ")", "\n", "logger", ".", "info", "(", "get_model_summary", "(", "model", ".", "to", "(", "device", ")", ",", "dump_input", ".", "to", "(", "device", ")", ")", ")", "\n", "\n", "# copy model file", "\n", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "models_dst_dir", "=", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "'models'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "models_dst_dir", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "models_dst_dir", ")", "\n", "", "shutil", ".", "copytree", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "'../lib/models'", ")", ",", "models_dst_dir", ")", "\n", "\n", "", "if", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", ",", "\n", ")", "\n", "\n", "# prepare data", "\n", "", "crop_size", "=", "(", "config", ".", "TRAIN", ".", "IMAGE_SIZE", "[", "1", "]", ",", "config", ".", "TRAIN", ".", "IMAGE_SIZE", "[", "0", "]", ")", "\n", "train_dataset", "=", "eval", "(", "'datasets.'", "+", "config", ".", "DATASET", ".", "DATASET", ")", "(", "\n", "root", "=", "config", ".", "DATASET", ".", "ROOT", ",", "\n", "list_path", "=", "config", ".", "DATASET", ".", "TRAIN_SET", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "multi_scale", "=", "config", ".", "TRAIN", ".", "MULTI_SCALE", ",", "\n", "flip", "=", "config", ".", "TRAIN", ".", "FLIP", ",", "\n", "ignore_label", "=", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ",", "\n", "base_size", "=", "config", ".", "TRAIN", ".", "BASE_SIZE", ",", "\n", "crop_size", "=", "crop_size", ",", "\n", "downsample_rate", "=", "config", ".", "TRAIN", ".", "DOWNSAMPLERATE", ",", "\n", "scale_factor", "=", "config", ".", "TRAIN", ".", "SCALE_FACTOR", ")", "\n", "\n", "if", "distributed", ":", "\n", "        ", "train_sampler", "=", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "config", ".", "TRAIN", ".", "BATCH_SIZE_PER_GPU", ",", "\n", "shuffle", "=", "config", ".", "TRAIN", ".", "SHUFFLE", "and", "train_sampler", "is", "None", ",", "\n", "num_workers", "=", "config", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ")", "\n", "\n", "if", "config", ".", "DATASET", ".", "EXTRA_TRAIN_SET", ":", "\n", "        ", "extra_train_dataset", "=", "eval", "(", "'datasets.'", "+", "config", ".", "DATASET", ".", "DATASET", ")", "(", "\n", "root", "=", "config", ".", "DATASET", ".", "ROOT", ",", "\n", "list_path", "=", "config", ".", "DATASET", ".", "EXTRA_TRAIN_SET", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "multi_scale", "=", "config", ".", "TRAIN", ".", "MULTI_SCALE", ",", "\n", "flip", "=", "config", ".", "TRAIN", ".", "FLIP", ",", "\n", "ignore_label", "=", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ",", "\n", "base_size", "=", "config", ".", "TRAIN", ".", "BASE_SIZE", ",", "\n", "crop_size", "=", "crop_size", ",", "\n", "downsample_rate", "=", "config", ".", "TRAIN", ".", "DOWNSAMPLERATE", ",", "\n", "scale_factor", "=", "config", ".", "TRAIN", ".", "SCALE_FACTOR", ")", "\n", "\n", "if", "distributed", ":", "\n", "            ", "extra_train_sampler", "=", "DistributedSampler", "(", "extra_train_dataset", ")", "\n", "", "else", ":", "\n", "            ", "extra_train_sampler", "=", "None", "\n", "\n", "", "extra_trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "extra_train_dataset", ",", "\n", "batch_size", "=", "config", ".", "TRAIN", ".", "BATCH_SIZE_PER_GPU", ",", "\n", "shuffle", "=", "config", ".", "TRAIN", ".", "SHUFFLE", "and", "extra_train_sampler", "is", "None", ",", "\n", "num_workers", "=", "config", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "sampler", "=", "extra_train_sampler", ")", "\n", "\n", "", "test_size", "=", "(", "config", ".", "TEST", ".", "IMAGE_SIZE", "[", "1", "]", ",", "config", ".", "TEST", ".", "IMAGE_SIZE", "[", "0", "]", ")", "\n", "test_dataset", "=", "eval", "(", "'datasets.'", "+", "config", ".", "DATASET", ".", "DATASET", ")", "(", "\n", "root", "=", "config", ".", "DATASET", ".", "ROOT", ",", "\n", "list_path", "=", "config", ".", "DATASET", ".", "TEST_SET", ",", "\n", "num_samples", "=", "config", ".", "TEST", ".", "NUM_SAMPLES", ",", "\n", "num_classes", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "multi_scale", "=", "False", ",", "\n", "flip", "=", "False", ",", "\n", "ignore_label", "=", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ",", "\n", "base_size", "=", "config", ".", "TEST", ".", "BASE_SIZE", ",", "\n", "crop_size", "=", "test_size", ",", "\n", "center_crop_test", "=", "config", ".", "TEST", ".", "CENTER_CROP_TEST", ",", "\n", "downsample_rate", "=", "1", ")", "\n", "\n", "if", "distributed", ":", "\n", "        ", "test_sampler", "=", "DistributedSampler", "(", "test_dataset", ")", "\n", "", "else", ":", "\n", "        ", "test_sampler", "=", "None", "\n", "\n", "", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "config", ".", "TEST", ".", "BATCH_SIZE_PER_GPU", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "config", ".", "WORKERS", ",", "\n", "pin_memory", "=", "False", ",", "\n", "sampler", "=", "test_sampler", ")", "\n", "\n", "# criterion", "\n", "if", "config", ".", "LOSS", ".", "USE_OHEM", ":", "\n", "        ", "criterion", "=", "OhemCrossEntropy", "(", "ignore_label", "=", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ",", "\n", "thres", "=", "config", ".", "LOSS", ".", "OHEMTHRES", ",", "\n", "min_kept", "=", "config", ".", "LOSS", ".", "OHEMKEEP", ",", "\n", "weight", "=", "train_dataset", ".", "class_weights", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "CrossEntropy", "(", "ignore_label", "=", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ",", "\n", "weight", "=", "train_dataset", ".", "class_weights", ")", "\n", "\n", "", "model", "=", "FullModel", "(", "model", ",", "criterion", ")", "\n", "model", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "output_device", "=", "args", ".", "local_rank", ")", "\n", "\n", "# optimizer", "\n", "if", "config", ".", "TRAIN", ".", "OPTIMIZER", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "{", "'params'", ":", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "\n", "model", ".", "parameters", "(", ")", ")", ",", "\n", "'lr'", ":", "config", ".", "TRAIN", ".", "LR", "}", "]", ",", "\n", "lr", "=", "config", ".", "TRAIN", ".", "LR", ",", "\n", "momentum", "=", "config", ".", "TRAIN", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "config", ".", "TRAIN", ".", "WD", ",", "\n", "nesterov", "=", "config", ".", "TRAIN", ".", "NESTEROV", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Only Support SGD optimizer'", ")", "\n", "\n", "", "epoch_iters", "=", "np", ".", "int", "(", "train_dataset", ".", "__len__", "(", ")", "/", "\n", "config", ".", "TRAIN", ".", "BATCH_SIZE_PER_GPU", "/", "len", "(", "gpus", ")", ")", "\n", "best_mIoU", "=", "0", "\n", "last_epoch", "=", "0", "\n", "if", "config", ".", "TRAIN", ".", "RESUME", ":", "\n", "        ", "model_state_file", "=", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "\n", "'checkpoint.pth.tar'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "model_state_file", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "best_mIoU", "=", "checkpoint", "[", "'best_mIoU'", "]", "\n", "last_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "logger", ".", "info", "(", "\"=> loaded checkpoint (epoch {})\"", "\n", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "", "", "start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "end_epoch", "=", "config", ".", "TRAIN", ".", "END_EPOCH", "+", "config", ".", "TRAIN", ".", "EXTRA_EPOCH", "\n", "num_iters", "=", "config", ".", "TRAIN", ".", "END_EPOCH", "*", "epoch_iters", "\n", "extra_iters", "=", "config", ".", "TRAIN", ".", "EXTRA_EPOCH", "*", "epoch_iters", "\n", "\n", "for", "epoch", "in", "range", "(", "last_epoch", ",", "end_epoch", ")", ":", "\n", "        ", "if", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "if", "epoch", ">=", "config", ".", "TRAIN", ".", "END_EPOCH", ":", "\n", "            ", "train", "(", "config", ",", "epoch", "-", "config", ".", "TRAIN", ".", "END_EPOCH", ",", "\n", "config", ".", "TRAIN", ".", "EXTRA_EPOCH", ",", "epoch_iters", ",", "\n", "config", ".", "TRAIN", ".", "EXTRA_LR", ",", "extra_iters", ",", "\n", "extra_trainloader", ",", "optimizer", ",", "model", ",", "\n", "writer_dict", ",", "device", ")", "\n", "", "else", ":", "\n", "            ", "train", "(", "config", ",", "epoch", ",", "config", ".", "TRAIN", ".", "END_EPOCH", ",", "\n", "epoch_iters", ",", "config", ".", "TRAIN", ".", "LR", ",", "num_iters", ",", "\n", "trainloader", ",", "optimizer", ",", "model", ",", "writer_dict", ",", "\n", "device", ")", "\n", "\n", "", "if", "epoch", "%", "args", ".", "freq", "==", "0", "or", "epoch", "==", "end_epoch", "-", "1", ":", "\n", "            ", "valid_loss", ",", "mean_IoU", ",", "IoU_array", "=", "validate", "(", "config", ",", "\n", "testloader", ",", "model", ",", "writer_dict", ",", "device", ")", "\n", "\n", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'=> saving checkpoint to {}'", ".", "format", "(", "\n", "final_output_dir", "+", "'checkpoint.pth.tar'", ")", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'best_mIoU'", ":", "best_mIoU", ",", "\n", "'state_dict'", ":", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "'checkpoint.pth.tar'", ")", ")", "\n", "\n", "if", "epoch", "%", "args", ".", "freq", "==", "0", "or", "epoch", "==", "config", ".", "TRAIN", ".", "END_EPOCH", ":", "\n", "                ", "if", "mean_IoU", ">", "best_mIoU", ":", "\n", "                    ", "best_mIoU", "=", "mean_IoU", "\n", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "'best.pth'", ")", ")", "\n", "", "msg", "=", "'Loss: {:.3f}, MeanIU: {: 4.4f}, Best_mIoU: {: 4.4f}'", ".", "format", "(", "\n", "valid_loss", ",", "mean_IoU", ",", "best_mIoU", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "logging", ".", "info", "(", "IoU_array", ")", "\n", "\n", "", "if", "epoch", "==", "end_epoch", "-", "1", ":", "\n", "                ", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "'final_state.pth'", ")", ")", "\n", "\n", "writer_dict", "[", "'writer'", "]", ".", "close", "(", ")", "\n", "end", "=", "timeit", ".", "default_timer", "(", ")", "\n", "logger", ".", "info", "(", "'Hours: %d'", "%", "np", ".", "int", "(", "(", "end", "-", "start", ")", "/", "3600", ")", ")", "\n", "logger", ".", "info", "(", "'Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.tools._init_paths.add_path": [[15, 18], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.tools.test.parse_args": [[33, 50], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.update_config"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.tools.test.parse_args", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.default_config.update_config"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train segmentation network'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "\n", "help", "=", "'experiment configure file name'", ",", "\n", "required", "=", "True", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--sv_folder'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'opts'", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "update_config", "(", "config", ",", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.tools.test.main": [[51, 140], ["test.parse_args", "utils.utils.create_logger", "logger.info", "logger.info", "torch.rand", "torch.rand", "torch.rand", "logger.info", "logger.info", "torch.load", "torch.load", "torch.load", "nn.DataParallel().cuda.state_dict", "torch.load.items", "model.state_dict.update", "nn.DataParallel().cuda.load_state_dict", "list", "torch.DataParallel().cuda", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "timeit.default_timer", "timeit.default_timer", "logger.info", "logger.info", "pprint.pformat", "pprint.pformat", "eval", "utils.modelsummary.get_model_summary", "os.path.join", "logger.info", "eval", "core.function.testval", "logging.info", "logging.info", "nn.DataParallel().cuda.cuda", "torch.rand.cuda", "torch.load.items", "torch.DataParallel", "core.function.test", "numpy.int", "model.state_dict.keys"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.tools.test.parse_args", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.create_logger", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.modelsummary.get_model_summary", "home.repos.pwc.inspect_result.hongfz16_hcmoco.core.function.testval", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.core.function.test"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "logger", ",", "final_output_dir", ",", "_", "=", "create_logger", "(", "\n", "config", ",", "args", ".", "cfg", ",", "'test'", ")", "\n", "\n", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "args", ")", ")", "\n", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "config", ")", ")", "\n", "\n", "# cudnn related setting", "\n", "cudnn", ".", "benchmark", "=", "config", ".", "CUDNN", ".", "BENCHMARK", "\n", "cudnn", ".", "deterministic", "=", "config", ".", "CUDNN", ".", "DETERMINISTIC", "\n", "cudnn", ".", "enabled", "=", "config", ".", "CUDNN", ".", "ENABLED", "\n", "\n", "# build model", "\n", "model", "=", "eval", "(", "'models.'", "+", "config", ".", "MODEL", ".", "NAME", "+", "\n", "'.get_seg_model'", ")", "(", "config", ")", "\n", "\n", "dump_input", "=", "torch", ".", "rand", "(", "\n", "(", "1", ",", "3", ",", "config", ".", "TRAIN", ".", "IMAGE_SIZE", "[", "1", "]", ",", "config", ".", "TRAIN", ".", "IMAGE_SIZE", "[", "0", "]", ")", "\n", ")", "\n", "logger", ".", "info", "(", "get_model_summary", "(", "model", ".", "cuda", "(", ")", ",", "dump_input", ".", "cuda", "(", ")", ")", ")", "\n", "\n", "if", "config", ".", "TEST", ".", "MODEL_FILE", ":", "\n", "        ", "model_state_file", "=", "config", ".", "TEST", ".", "MODEL_FILE", "\n", "", "else", ":", "\n", "        ", "model_state_file", "=", "os", ".", "path", ".", "join", "(", "final_output_dir", ",", "\n", "'final_state.pth'", ")", "\n", "", "logger", ".", "info", "(", "'=> loading model from {}'", ".", "format", "(", "model_state_file", ")", ")", "\n", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "model_state_file", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", "[", "6", ":", "]", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "[", "6", ":", "]", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "for", "k", ",", "_", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "'=> loading {} from pretrained model'", ".", "format", "(", "k", ")", ")", "\n", "", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "gpus", "=", "list", "(", "config", ".", "GPUS", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "gpus", ")", ".", "cuda", "(", ")", "\n", "\n", "# prepare data", "\n", "test_size", "=", "(", "config", ".", "TEST", ".", "IMAGE_SIZE", "[", "1", "]", ",", "config", ".", "TEST", ".", "IMAGE_SIZE", "[", "0", "]", ")", "\n", "test_dataset", "=", "eval", "(", "'datasets.'", "+", "config", ".", "DATASET", ".", "DATASET", ")", "(", "\n", "root", "=", "config", ".", "DATASET", ".", "ROOT", ",", "\n", "list_path", "=", "config", ".", "DATASET", ".", "TEST_SET", ",", "\n", "num_samples", "=", "None", ",", "\n", "num_classes", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", ",", "\n", "multi_scale", "=", "False", ",", "\n", "flip", "=", "False", ",", "\n", "ignore_label", "=", "config", ".", "TRAIN", ".", "IGNORE_LABEL", ",", "\n", "base_size", "=", "config", ".", "TEST", ".", "BASE_SIZE", ",", "\n", "crop_size", "=", "test_size", ",", "\n", "downsample_rate", "=", "1", ")", "\n", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "config", ".", "WORKERS", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "if", "'val'", "in", "config", ".", "DATASET", ".", "TEST_SET", ":", "\n", "        ", "mean_IoU", ",", "IoU_array", ",", "pixel_acc", ",", "mean_acc", "=", "testval", "(", "config", ",", "\n", "test_dataset", ",", "\n", "testloader", ",", "\n", "model", ",", "\n", "'video_human36m_vis'", ",", "\n", "True", ",", "\n", "args", ".", "sv_folder", ")", "\n", "\n", "msg", "=", "'MeanIU: {: 4.4f}, Pixel_Acc: {: 4.4f}, \\\n            Mean_Acc: {: 4.4f}, Class IoU: '", ".", "format", "(", "mean_IoU", ",", "\n", "pixel_acc", ",", "mean_acc", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "logging", ".", "info", "(", "IoU_array", ")", "\n", "", "elif", "'test'", "in", "config", ".", "DATASET", ".", "TEST_SET", ":", "\n", "        ", "test", "(", "config", ",", "\n", "test_dataset", ",", "\n", "testloader", ",", "\n", "model", ",", "\n", "sv_dir", "=", "final_output_dir", ")", "\n", "\n", "", "end", "=", "timeit", ".", "default_timer", "(", ")", "\n", "logger", ".", "info", "(", "'Mins: %d'", "%", "np", ".", "int", "(", "(", "end", "-", "start", ")", "/", "60", ")", ")", "\n", "logger", ".", "info", "(", "'Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pycontrast.main_segmentor.main": [[18, 30], ["options.train_options.TrainOptions().parse", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "main_segmentor.main_worker", "NotImplementedError", "options.train_options.TrainOptions"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.parse", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pycontrast.main_contrast.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "TrainOptions", "(", ")", ".", "parse", "(", ")", "\n", "\n", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# mp.spawn(main_worker, nprocs=ngpus_per_node, args=(ngpus_per_node, args))", "\n", "main_worker", "(", "0", ",", "ngpus_per_node", ",", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Currently only DDP training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pycontrast.main_segmentor.main_worker": [[32, 129], ["learning.segment_trainer.SegTrainer", "learning.segment_trainer.SegTrainer.init_ddp_environment", "networks.build_backbone.build_model", "networks.build_linear.build_segmentor", "datasets.util.build_own_contrast_loader", "memory.build_memory.build_mem", "memory.build_memory.build_mem.cuda", "torch.CrossEntropyLoss().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "learning.segment_trainer.SegTrainer.wrap_up", "learning.segment_trainer.SegTrainer.resume_model", "learning.segment_trainer.SegTrainer.init_tensorboard_logger", "range", "len", "torch.load", "torch.load", "torch.load", "ckpt[].items", "model.state_dict().items", "print", "model.load_state_dict", "memory.build_memory.build_mem.load_state_dict", "numpy.array().astype", "torch.CrossEntropyLoss().cuda", "train_sampler.set_epoch", "learning.segment_trainer.SegTrainer.adjust_learning_rate", "learning.segment_trainer.SegTrainer.train_soft_joint_pri3d", "learning.segment_trainer.SegTrainer.validate", "learning.segment_trainer.SegTrainer.save", "torch.CrossEntropyLoss", "list", "list", "learning.segment_trainer.SegTrainer.save_seg_models", "model.state_dict", "unmatched_key.append", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "numpy.array", "torch.CrossEntropyLoss", "model.parameters", "networks.build_linear.build_segmentor.parameters", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.init_ddp_environment", "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.build_model", "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_linear.build_segmentor", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.build_own_contrast_loader", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.build_memory.build_mem", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.wrap_up", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.resume_model", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.init_tensorboard_logger", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.adjust_learning_rate", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.train_soft_joint_pri3d", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.validate", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.save_seg_models", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "\n", "# initialize trainer and ddp environment", "\n", "    ", "trainer", "=", "SegTrainer", "(", "args", ")", "\n", "trainer", ".", "init_ddp_environment", "(", "gpu", ",", "ngpus_per_node", ")", "\n", "\n", "# build encoder and classifier", "\n", "model", ",", "_", "=", "build_model", "(", "args", ")", "\n", "classifier", "=", "build_segmentor", "(", "args", ")", "\n", "\n", "# build dataset", "\n", "train_loader", ",", "train_dataset", ",", "val_loader", ",", "train_sampler", "=", "build_own_contrast_loader", "(", "args", ",", "ngpus_per_node", ",", "need_gt", "=", "False", ",", "need_val", "=", "True", ")", "\n", "\n", "contrast", "=", "build_mem", "(", "args", ",", "len", "(", "train_dataset", ")", ")", "\n", "contrast", ".", "cuda", "(", ")", "\n", "\n", "if", "args", ".", "pretrain", "is", "not", "None", "and", "not", "args", ".", "resume", ":", "\n", "        ", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "pretrain", ",", "map_location", "=", "'cpu'", ")", "\n", "update_dict", "=", "{", "}", "\n", "unmatched_key", "=", "[", "]", "\n", "converted_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "ckpt", "[", "'model'", "]", ".", "items", "(", ")", ":", "\n", "            ", "converted_dict", "[", "k", "[", "7", ":", "]", "]", "=", "v", "\n", "", "for", "k", ",", "v", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "converted_dict", ":", "\n", "                ", "update_dict", "[", "k", "]", "=", "converted_dict", "[", "k", "]", "\n", "", "else", ":", "\n", "                ", "unmatched_key", ".", "append", "(", "k", ")", "\n", "update_dict", "[", "k", "]", "=", "v", "\n", "", "", "print", "(", "\"Unmatched Keys: {}\"", ".", "format", "(", "', '", ".", "join", "(", "unmatched_key", ")", ")", ")", "\n", "model", ".", "load_state_dict", "(", "update_dict", ")", "\n", "contrast", ".", "load_state_dict", "(", "ckpt", "[", "'contrast'", "]", ")", "\n", "\n", "# build criterion and optimizer", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "if", "args", ".", "mem", "==", "'bank+clip'", "or", "args", ".", "mem", "==", "'bank+pri3d'", "or", "args", ".", "mem", "==", "'bank+jointspri3d'", "or", "args", ".", "mem", "==", "'bank+crosssubjoints'", "or", "args", ".", "mem", "==", "'bank+geojointspri3d'", ":", "\n", "        ", "criterion", "=", "[", "criterion", ",", "[", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", ",", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "]", "]", "\n", "", "elif", "args", ".", "mem", "==", "'bank+clip+geo'", ":", "\n", "        ", "criterion", "=", "[", "criterion", ",", "[", "]", "]", "\n", "", "elif", "args", ".", "mem", "==", "'bank+clip+humangps'", ":", "\n", "        ", "criterion", "=", "[", "criterion", ",", "[", "]", "]", "\n", "\n", "", "weights", "=", "[", "1.448", ",", "49.234", ",", "49.483", ",", "48.030", ",", "49.247", ",", "49.492", ",", "48.018", ",", "49.704", ",", "50.052", ",", "49.369", ",", "49.694", ",", "50.090", ",", "49.425", ",", "49.459", ",", "45.846", ",", "47.156", ",", "45.868", ",", "47.197", ",", "44.167", ",", "42.789", ",", "44.341", ",", "48.632", ",", "48.873", ",", "48.644", ",", "49.004", "]", "\n", "class_weights", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "weights", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "criterion_seg", "=", "[", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ",", "weight", "=", "class_weights", ")", ".", "cuda", "(", ")", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "list", "(", "model", ".", "parameters", "(", ")", ")", "+", "list", "(", "classifier", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# load pre-trained ckpt for encoder", "\n", "# model = trainer.load_encoder_weights(model)", "\n", "\n", "# wrap up models", "\n", "model", ",", "classifier", "=", "trainer", ".", "wrap_up", "(", "model", ",", "classifier", ")", "\n", "\n", "# check and resume a classifier", "\n", "start_epoch", "=", "trainer", ".", "resume_model", "(", "model", ",", "contrast", ",", "classifier", ",", "optimizer", ")", "\n", "\n", "# init tensorboard logger", "\n", "trainer", ".", "init_tensorboard_logger", "(", ")", "\n", "\n", "best_miou", "=", "-", "1", "\n", "\n", "# routine", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "trainer", ".", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "outs", "=", "trainer", ".", "train_soft_joint_pri3d", "(", "epoch", ",", "train_loader", ",", "model", ",", "classifier", ",", "contrast", ",", "\n", "criterion", "[", "0", "]", ",", "criterion", "[", "1", "]", ",", "criterion_seg", ",", "optimizer", ")", "\n", "\n", "# log to tensorbard", "\n", "# trainer.logging(epoch, outs, optimizer.param_groups[0]['lr'], train=True)", "\n", "\n", "# evaluation and logging", "\n", "# if args.rank % ngpus_per_node == 0:", "\n", "# if epoch % args.save_freq == 0:", "\n", "res", "=", "trainer", ".", "validate", "(", "epoch", ",", "val_loader", ",", "model", ",", "\n", "classifier", ",", "criterion_seg", ")", "\n", "# trainer.logging(epoch, outs, train=False)", "\n", "if", "args", ".", "test_type", "==", "0", ":", "\n", "            ", "ref_miou", "=", "res", "[", "'rgbd'", "]", "[", "'miou'", "]", "\n", "", "elif", "args", ".", "test_type", "==", "1", ":", "\n", "            ", "ref_miou", "=", "res", "[", "'rgb'", "]", "[", "'miou'", "]", "\n", "", "elif", "args", ".", "test_type", "==", "2", ":", "\n", "            ", "ref_miou", "=", "res", "[", "'d'", "]", "[", "'miou'", "]", "\n", "\n", "", "if", "ref_miou", ">", "best_miou", ":", "\n", "            ", "best_miou", "=", "ref_miou", "\n", "trainer", ".", "save_seg_models", "(", "model", ",", "classifier", ",", "epoch", ",", "res", ")", "\n", "\n", "# saving model", "\n", "", "trainer", ".", "save", "(", "model", ",", "contrast", ",", "classifier", ",", "optimizer", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pycontrast.main_linear.main": [[17, 28], ["options.test_options.TestOptions().parse", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.spawn", "NotImplementedError", "options.test_options.TestOptions"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.parse"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "TestOptions", "(", ")", ".", "parse", "(", ")", "\n", "\n", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Currently only DDP training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pycontrast.main_linear.main_worker": [[30, 82], ["learning.linear_trainer.LinearTrainer", "learning.linear_trainer.LinearTrainer.init_ddp_environment", "networks.build_backbone.build_model", "networks.build_linear.build_linear", "datasets.util.build_linear_loader", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "learning.linear_trainer.LinearTrainer.load_encoder_weights", "learning.linear_trainer.LinearTrainer.wrap_up", "learning.linear_trainer.LinearTrainer.resume_model", "learning.linear_trainer.LinearTrainer.init_tensorboard_logger", "range", "networks.build_linear.build_linear.parameters", "train_sampler.set_epoch", "learning.linear_trainer.LinearTrainer.adjust_learning_rate", "learning.linear_trainer.LinearTrainer.train", "learning.linear_trainer.LinearTrainer.logging", "learning.linear_trainer.LinearTrainer.save", "torch.CrossEntropyLoss", "learning.linear_trainer.LinearTrainer.validate", "learning.linear_trainer.LinearTrainer.logging"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.init_ddp_environment", "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.build_model", "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_linear.build_linear", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.build_linear_loader", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.load_encoder_weights", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.wrap_up", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.resume_model", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.init_tensorboard_logger", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.adjust_learning_rate", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.logging", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.validate", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.logging"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "\n", "# initialize trainer and ddp environment", "\n", "    ", "trainer", "=", "LinearTrainer", "(", "args", ")", "\n", "trainer", ".", "init_ddp_environment", "(", "gpu", ",", "ngpus_per_node", ")", "\n", "\n", "# build encoder and classifier", "\n", "model", ",", "_", "=", "build_model", "(", "args", ")", "\n", "classifier", "=", "build_linear", "(", "args", ")", "\n", "\n", "# build dataset", "\n", "train_loader", ",", "val_loader", ",", "train_sampler", "=", "build_linear_loader", "(", "args", ",", "ngpus_per_node", ")", "\n", "\n", "# build criterion and optimizer", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "classifier", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# load pre-trained ckpt for encoder", "\n", "model", "=", "trainer", ".", "load_encoder_weights", "(", "model", ")", "\n", "\n", "# wrap up models", "\n", "model", ",", "classifier", "=", "trainer", ".", "wrap_up", "(", "model", ",", "classifier", ")", "\n", "\n", "# check and resume a classifier", "\n", "start_epoch", "=", "trainer", ".", "resume_model", "(", "classifier", ",", "optimizer", ")", "\n", "\n", "# init tensorboard logger", "\n", "trainer", ".", "init_tensorboard_logger", "(", ")", "\n", "\n", "# routine", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "trainer", ".", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "outs", "=", "trainer", ".", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "classifier", ",", "\n", "criterion", ",", "optimizer", ")", "\n", "\n", "# log to tensorbard", "\n", "trainer", ".", "logging", "(", "epoch", ",", "outs", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "train", "=", "True", ")", "\n", "\n", "# evaluation and logging", "\n", "if", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ":", "\n", "            ", "outs", "=", "trainer", ".", "validate", "(", "epoch", ",", "val_loader", ",", "model", ",", "\n", "classifier", ",", "criterion", ")", "\n", "trainer", ".", "logging", "(", "epoch", ",", "outs", ",", "train", "=", "False", ")", "\n", "\n", "# saving model", "\n", "", "trainer", ".", "save", "(", "classifier", ",", "optimizer", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pycontrast.main_contrast.main": [[19, 31], ["options.train_options.TrainOptions().parse", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "main_contrast.main_worker", "NotImplementedError", "options.train_options.TrainOptions"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.parse", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pycontrast.main_contrast.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "TrainOptions", "(", ")", ".", "parse", "(", ")", "\n", "\n", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# mp.spawn(main_worker, nprocs=ngpus_per_node, args=(ngpus_per_node, args))", "\n", "main_worker", "(", "0", ",", "ngpus_per_node", ",", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Currently only DDP training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pycontrast.main_contrast.main_worker": [[33, 107], ["learning.contrast_trainer.ContrastTrainer", "learning.contrast_trainer.ContrastTrainer.init_ddp_environment", "networks.build_backbone.build_model", "datasets.util.build_own_contrast_loader", "memory.build_memory.build_mem", "memory.build_memory.build_mem.cuda", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "learning.contrast_trainer.ContrastTrainer.wrap_up", "learning.contrast_trainer.ContrastTrainer.broadcast_memory", "learning.contrast_trainer.ContrastTrainer.resume_model", "learning.contrast_trainer.ContrastTrainer.init_tensorboard_logger", "range", "len", "torch.load", "torch.load", "torch.load", "torch.load", "ckpt[].items", "model.state_dict().items", "print", "model.load_state_dict", "memory.build_memory.build_mem.load_state_dict", "model.parameters", "train_sampler.set_epoch", "learning.contrast_trainer.ContrastTrainer.adjust_learning_rate", "learning.contrast_trainer.ContrastTrainer.train", "learning.contrast_trainer.ContrastTrainer.logging", "learning.contrast_trainer.ContrastTrainer.save", "torch.CrossEntropyLoss", "model.state_dict", "unmatched_key.append", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.init_ddp_environment", "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.build_model", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.build_own_contrast_loader", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.build_memory.build_mem", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.wrap_up", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.broadcast_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.resume_model", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.init_tensorboard_logger", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.adjust_learning_rate", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.logging", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "\n", "# initialize trainer and ddp environment", "\n", "    ", "trainer", "=", "ContrastTrainer", "(", "args", ")", "\n", "trainer", ".", "init_ddp_environment", "(", "gpu", ",", "ngpus_per_node", ")", "\n", "\n", "# build model", "\n", "model", ",", "model_ema", "=", "build_model", "(", "args", ")", "\n", "\n", "# build dataset", "\n", "# train_dataset, train_loader, train_sampler = \\", "\n", "# build_contrast_loader(args, ngpus_per_node)", "\n", "train_dataset", ",", "train_loader", ",", "train_sampler", "=", "build_own_contrast_loader", "(", "args", ",", "ngpus_per_node", ")", "\n", "\n", "# build memory", "\n", "contrast", "=", "build_mem", "(", "args", ",", "len", "(", "train_dataset", ")", ")", "\n", "contrast", ".", "cuda", "(", ")", "\n", "\n", "if", "args", ".", "pretrain", "is", "not", "None", ":", "\n", "        ", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "pretrain", ",", "map_location", "=", "'cpu'", ")", "\n", "update_dict", "=", "{", "}", "\n", "unmatched_key", "=", "[", "]", "\n", "converted_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "ckpt", "[", "'model'", "]", ".", "items", "(", ")", ":", "\n", "            ", "converted_dict", "[", "k", "[", "7", ":", "]", "]", "=", "v", "\n", "", "for", "k", ",", "v", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "converted_dict", ":", "\n", "                ", "update_dict", "[", "k", "]", "=", "converted_dict", "[", "k", "]", "\n", "", "else", ":", "\n", "                ", "unmatched_key", ".", "append", "(", "k", ")", "\n", "update_dict", "[", "k", "]", "=", "v", "\n", "", "", "print", "(", "\"Unmatched Keys: {}\"", ".", "format", "(", "', '", ".", "join", "(", "unmatched_key", ")", ")", ")", "\n", "model", ".", "load_state_dict", "(", "update_dict", ")", "\n", "contrast", ".", "load_state_dict", "(", "ckpt", "[", "'contrast'", "]", ")", "\n", "\n", "# build criterion and optimizer", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "if", "args", ".", "mem", "==", "'bank+clip'", "or", "args", ".", "mem", "==", "'bank+pri3d'", "or", "args", ".", "mem", "==", "'bank+jointspri3d'", "or", "args", ".", "mem", "==", "'bank+crosssubjoints'", "or", "args", ".", "mem", "==", "'bank+geojointspri3d'", ":", "\n", "        ", "criterion", "=", "[", "criterion", ",", "[", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", ",", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "]", "]", "\n", "", "elif", "args", ".", "mem", "==", "'bank+clip+geo'", ":", "\n", "        ", "criterion", "=", "[", "criterion", ",", "[", "]", "]", "\n", "", "elif", "args", ".", "mem", "==", "'bank+clip+humangps'", ":", "\n", "        ", "criterion", "=", "[", "criterion", ",", "[", "]", "]", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# wrap up models", "\n", "model", ",", "model_ema", ",", "optimizer", "=", "trainer", ".", "wrap_up", "(", "model", ",", "model_ema", ",", "optimizer", ")", "\n", "\n", "# optional step: synchronize memory", "\n", "trainer", ".", "broadcast_memory", "(", "contrast", ")", "\n", "\n", "# check and resume a model", "\n", "start_epoch", "=", "trainer", ".", "resume_model", "(", "model", ",", "model_ema", ",", "contrast", ",", "optimizer", ")", "\n", "\n", "# init tensorboard logger", "\n", "trainer", ".", "init_tensorboard_logger", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "trainer", ".", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "outs", "=", "trainer", ".", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "model_ema", ",", "\n", "contrast", ",", "criterion", ",", "optimizer", ")", "\n", "\n", "# log to tensorbard", "\n", "trainer", ".", "logging", "(", "epoch", ",", "outs", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "\n", "# save model", "\n", "trainer", ".", "save", "(", "model", ",", "model_ema", ",", "contrast", ",", "optimizer", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_moco.BaseMoCo.__init__": [[8, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "K", "=", "65536", ",", "T", "=", "0.07", ")", ":", "\n", "        ", "super", "(", "BaseMoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "index", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_moco.BaseMoCo._update_pointer": [[14, 16], ["None"], "methods", ["None"], ["", "def", "_update_pointer", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "self", ".", "index", "=", "(", "self", ".", "index", "+", "bsz", ")", "%", "self", ".", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_moco.BaseMoCo._update_memory": [[17, 28], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.fmod().long", "torch.fmod().long", "torch.fmod().long", "torch.fmod().long", "torch.fmod().long", "torch.fmod().long", "torch.fmod().long", "torch.fmod().long", "torch.fmod().long", "queue.index_copy_", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "def", "_update_memory", "(", "self", ",", "k", ",", "queue", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n          k: key feature\n          queue: memory buffer\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "num_neg", "=", "k", ".", "shape", "[", "0", "]", "\n", "out_ids", "=", "torch", ".", "arange", "(", "num_neg", ")", ".", "cuda", "(", ")", "\n", "out_ids", "=", "torch", ".", "fmod", "(", "out_ids", "+", "self", ".", "index", ",", "self", ".", "K", ")", ".", "long", "(", ")", "\n", "queue", ".", "index_copy_", "(", "0", ",", "out_ids", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_moco.BaseMoCo._compute_logit": [[29, 50], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "pos.view.view.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "neg.transpose.transpose.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "out.squeeze().contiguous.squeeze().contiguous.squeeze().contiguous", "q.view", "k.view", "q.transpose", "out.squeeze().contiguous.squeeze().contiguous.squeeze"], "methods", ["None"], ["", "", "def", "_compute_logit", "(", "self", ",", "q", ",", "k", ",", "queue", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n          q: query/anchor feature\n          k: key feature\n          queue: memory buffer\n        \"\"\"", "\n", "# pos logit", "\n", "bsz", "=", "q", ".", "shape", "[", "0", "]", "\n", "pos", "=", "torch", ".", "bmm", "(", "q", ".", "view", "(", "bsz", ",", "1", ",", "-", "1", ")", ",", "k", ".", "view", "(", "bsz", ",", "-", "1", ",", "1", ")", ")", "\n", "pos", "=", "pos", ".", "view", "(", "bsz", ",", "1", ")", "\n", "\n", "# neg logit", "\n", "neg", "=", "torch", ".", "mm", "(", "queue", ",", "q", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "neg", "=", "neg", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "(", "pos", ",", "neg", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "torch", ".", "div", "(", "out", ",", "self", ".", "T", ")", "\n", "out", "=", "out", ".", "squeeze", "(", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_moco.RGBMoCo.__init__": [[54, 59], ["mem_moco.BaseMoCo.__init__", "mem_moco.RGBMoCo.register_buffer", "torch.normalize", "torch.normalize", "torch.normalize", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize"], ["def", "__init__", "(", "self", ",", "n_dim", ",", "K", "=", "65536", ",", "T", "=", "0.07", ")", ":", "\n", "        ", "super", "(", "RGBMoCo", ",", "self", ")", ".", "__init__", "(", "K", ",", "T", ")", "\n", "# create memory queue", "\n", "self", ".", "register_buffer", "(", "'memory'", ",", "torch", ".", "randn", "(", "K", ",", "n_dim", ")", ")", "\n", "self", ".", "memory", "=", "F", ".", "normalize", "(", "self", ".", "memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_moco.RGBMoCo.forward": [[60, 89], ["q.size", "k.detach.detach.detach", "mem_moco.RGBMoCo.memory.clone().detach", "mem_moco.RGBMoCo._compute_logit", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "mem_moco.RGBMoCo._update_memory", "mem_moco.RGBMoCo._update_pointer", "mem_moco.RGBMoCo._compute_logit", "all_k.size", "mem_moco.RGBMoCo.memory.clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_moco.BaseMoCo._update_pointer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "q_jig", "=", "None", ",", "all_k", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n          q: query on current node\n          k: key on current node\n          q_jig: jigsaw query\n          all_k: gather of feats across nodes; otherwise use q\n        \"\"\"", "\n", "bsz", "=", "q", ".", "size", "(", "0", ")", "\n", "k", "=", "k", ".", "detach", "(", ")", "\n", "\n", "# compute logit", "\n", "queue", "=", "self", ".", "memory", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "logits", "=", "self", ".", "_compute_logit", "(", "q", ",", "k", ",", "queue", ")", "\n", "if", "q_jig", "is", "not", "None", ":", "\n", "            ", "logits_jig", "=", "self", ".", "_compute_logit", "(", "q_jig", ",", "k", ",", "queue", ")", "\n", "\n", "# set label", "\n", "", "labels", "=", "torch", ".", "zeros", "(", "bsz", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "# update memory", "\n", "all_k", "=", "all_k", "if", "all_k", "is", "not", "None", "else", "k", "\n", "self", ".", "_update_memory", "(", "all_k", ",", "self", ".", "memory", ")", "\n", "self", ".", "_update_pointer", "(", "all_k", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "q_jig", "is", "not", "None", ":", "\n", "            ", "return", "logits", ",", "logits_jig", ",", "labels", "\n", "", "else", ":", "\n", "            ", "return", "logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_moco.CMCMoCo.__init__": [[93, 100], ["mem_moco.BaseMoCo.__init__", "mem_moco.CMCMoCo.register_buffer", "mem_moco.CMCMoCo.register_buffer", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize"], ["def", "__init__", "(", "self", ",", "n_dim", ",", "K", "=", "65536", ",", "T", "=", "0.07", ")", ":", "\n", "        ", "super", "(", "CMCMoCo", ",", "self", ")", ".", "__init__", "(", "K", ",", "T", ")", "\n", "# create memory queue", "\n", "self", ".", "register_buffer", "(", "'memory_1'", ",", "torch", ".", "randn", "(", "K", ",", "n_dim", ")", ")", "\n", "self", ".", "register_buffer", "(", "'memory_2'", ",", "torch", ".", "randn", "(", "K", ",", "n_dim", ")", ")", "\n", "self", ".", "memory_1", "=", "F", ".", "normalize", "(", "self", ".", "memory_1", ")", "\n", "self", ".", "memory_2", "=", "F", ".", "normalize", "(", "self", ".", "memory_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_moco.CMCMoCo.forward": [[101, 143], ["q1.size", "k1.detach.detach.detach", "k2.detach.detach.detach", "mem_moco.CMCMoCo.memory_1.clone().detach", "mem_moco.CMCMoCo.memory_2.clone().detach", "mem_moco.CMCMoCo._compute_logit", "mem_moco.CMCMoCo._compute_logit", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "mem_moco.CMCMoCo._update_memory", "mem_moco.CMCMoCo._update_memory", "mem_moco.CMCMoCo._update_pointer", "mem_moco.CMCMoCo._compute_logit", "mem_moco.CMCMoCo._compute_logit", "all_k1.size", "all_k2.size", "all_k1.size", "mem_moco.CMCMoCo.memory_1.clone", "mem_moco.CMCMoCo.memory_2.clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_moco.BaseMoCo._update_pointer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit"], ["", "def", "forward", "(", "self", ",", "q1", ",", "k1", ",", "q2", ",", "k2", ",", "\n", "q1_jig", "=", "None", ",", "q2_jig", "=", "None", ",", "\n", "all_k1", "=", "None", ",", "all_k2", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n          q1: q of modal 1\n          k1: k of modal 1\n          q2: q of modal 2\n          k2: k of modal 2\n          q1_jig: q jig of modal 1\n          q2_jig: q jig of modal 2\n          all_k1: gather of k1 across nodes; otherwise use k1\n          all_k2: gather of k2 across nodes; otherwise use k2\n        \"\"\"", "\n", "bsz", "=", "q1", ".", "size", "(", "0", ")", "\n", "k1", "=", "k1", ".", "detach", "(", ")", "\n", "k2", "=", "k2", ".", "detach", "(", ")", "\n", "\n", "# compute logit", "\n", "queue1", "=", "self", ".", "memory_1", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "queue2", "=", "self", ".", "memory_2", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "logits1", "=", "self", ".", "_compute_logit", "(", "q1", ",", "k2", ",", "queue2", ")", "\n", "logits2", "=", "self", ".", "_compute_logit", "(", "q2", ",", "k1", ",", "queue1", ")", "\n", "if", "(", "q1_jig", "is", "not", "None", ")", "and", "(", "q2_jig", "is", "not", "None", ")", ":", "\n", "            ", "logits1_jig", "=", "self", ".", "_compute_logit", "(", "q1_jig", ",", "k2", ",", "queue2", ")", "\n", "logits2_jig", "=", "self", ".", "_compute_logit", "(", "q2_jig", ",", "k1", ",", "queue1", ")", "\n", "\n", "# set label", "\n", "", "labels", "=", "torch", ".", "zeros", "(", "bsz", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "# update memory", "\n", "all_k1", "=", "all_k1", "if", "all_k1", "is", "not", "None", "else", "k1", "\n", "all_k2", "=", "all_k2", "if", "all_k2", "is", "not", "None", "else", "k2", "\n", "assert", "all_k1", ".", "size", "(", "0", ")", "==", "all_k2", ".", "size", "(", "0", ")", "\n", "self", ".", "_update_memory", "(", "all_k1", ",", "self", ".", "memory_1", ")", "\n", "self", ".", "_update_memory", "(", "all_k2", ",", "self", ".", "memory_2", ")", "\n", "self", ".", "_update_pointer", "(", "all_k1", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "(", "q1_jig", "is", "not", "None", ")", "and", "(", "q2_jig", "is", "not", "None", ")", ":", "\n", "            ", "return", "logits1", ",", "logits2", ",", "logits1_jig", ",", "logits2_jig", ",", "labels", "\n", "", "else", ":", "\n", "            ", "return", "logits1", ",", "logits2", ",", "labels", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem.__init__": [[9, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "K", "=", "65536", ",", "T", "=", "0.07", ",", "m", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "BaseMem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "m", "=", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory": [[15, 29], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "x.detach.detach.detach", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select.mul_", "torch.index_select.mul_", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.add_", "torch.index_select.add_", "torch.normalize", "torch.normalize", "torch.normalize", "memory.index_copy_", "y.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize"], ["", "def", "_update_memory", "(", "self", ",", "memory", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n          memory: memory buffer\n          x: features\n          y: index of updating position\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x", "=", "x", ".", "detach", "(", ")", "\n", "w_pos", "=", "torch", ".", "index_select", "(", "memory", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "w_pos", ".", "mul_", "(", "self", ".", "m", ")", "\n", "w_pos", ".", "add_", "(", "torch", ".", "mul", "(", "x", ",", "1", "-", "self", ".", "m", ")", ")", "\n", "updated_weight", "=", "F", ".", "normalize", "(", "w_pos", ")", "\n", "memory", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit": [[30, 41], ["x.unsqueeze.unsqueeze.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "out.squeeze().contiguous.squeeze().contiguous.squeeze().contiguous", "out.squeeze().contiguous.squeeze().contiguous.squeeze"], "methods", ["None"], ["", "", "def", "_compute_logit", "(", "self", ",", "x", ",", "w", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n          x: feat, shape [bsz, n_dim]\n          w: softmax weight, shape [bsz, self.K + 1, n_dim]\n        \"\"\"", "\n", "x", "=", "x", ".", "unsqueeze", "(", "2", ")", "\n", "out", "=", "torch", ".", "bmm", "(", "w", ",", "x", ")", "\n", "out", "=", "torch", ".", "div", "(", "out", ",", "self", ".", "T", ")", "\n", "out", "=", "out", ".", "squeeze", "(", ")", ".", "contiguous", "(", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.RGBMem.__init__": [[45, 54], ["mem_bank.BaseMem.__init__", "alias_multinomial.AliasMethod", "mem_bank.RGBMem.multinomial.cuda", "mem_bank.RGBMem.register_buffer", "torch.normalize", "torch.normalize", "torch.normalize", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize"], ["def", "__init__", "(", "self", ",", "n_dim", ",", "n_data", ",", "K", "=", "65536", ",", "T", "=", "0.07", ",", "m", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "RGBMem", ",", "self", ")", ".", "__init__", "(", "K", ",", "T", ",", "m", ")", "\n", "# create sampler", "\n", "self", ".", "multinomial", "=", "AliasMethod", "(", "torch", ".", "ones", "(", "n_data", ")", ")", "\n", "self", ".", "multinomial", ".", "cuda", "(", ")", "\n", "\n", "# create memory bank", "\n", "self", ".", "register_buffer", "(", "'memory'", ",", "torch", ".", "randn", "(", "n_data", ",", "n_dim", ")", ")", "\n", "self", ".", "memory", "=", "F", ".", "normalize", "(", "self", ".", "memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.RGBMem.forward": [[55, 91], ["x.size", "x.size", "mem_bank.RGBMem.multinomial.draw().view", "mem_bank.RGBMem.select().copy_", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "w.view.view.view", "mem_bank.RGBMem._compute_logit", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "mem_bank.RGBMem.view", "mem_bank.RGBMem._compute_logit", "mem_bank.RGBMem._update_memory", "mem_bank.RGBMem._update_memory", "mem_bank.RGBMem.multinomial.draw", "mem_bank.RGBMem.select", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.draw"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "x_jig", "=", "None", ",", "all_x", "=", "None", ",", "all_y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n          x: feat on current node\n          y: index on current node\n          x_jig: jigsaw feat on current node\n          all_x: gather of feats across nodes; otherwise use x\n          all_y: gather of index across nodes; otherwise use y\n        \"\"\"", "\n", "bsz", "=", "x", ".", "size", "(", "0", ")", "\n", "n_dim", "=", "x", ".", "size", "(", "1", ")", "\n", "\n", "# sample negative features", "\n", "idx", "=", "self", ".", "multinomial", ".", "draw", "(", "bsz", "*", "(", "self", ".", "K", "+", "1", ")", ")", ".", "view", "(", "bsz", ",", "-", "1", ")", "\n", "idx", ".", "select", "(", "1", ",", "0", ")", ".", "copy_", "(", "y", ".", "data", ")", "\n", "w", "=", "torch", ".", "index_select", "(", "self", ".", "memory", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", "\n", "w", "=", "w", ".", "view", "(", "bsz", ",", "self", ".", "K", "+", "1", ",", "n_dim", ")", "\n", "\n", "# compute logits", "\n", "logits", "=", "self", ".", "_compute_logit", "(", "x", ",", "w", ")", "\n", "if", "x_jig", "is", "not", "None", ":", "\n", "            ", "logits_jig", "=", "self", ".", "_compute_logit", "(", "x_jig", ",", "w", ")", "\n", "\n", "# set label", "\n", "", "labels", "=", "torch", ".", "zeros", "(", "bsz", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "# update memory", "\n", "if", "(", "all_x", "is", "not", "None", ")", "and", "(", "all_y", "is", "not", "None", ")", ":", "\n", "            ", "self", ".", "_update_memory", "(", "self", ".", "memory", ",", "all_x", ",", "all_y", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_update_memory", "(", "self", ".", "memory", ",", "x", ",", "y", ")", "\n", "\n", "", "if", "x_jig", "is", "not", "None", ":", "\n", "            ", "return", "logits", ",", "logits_jig", ",", "labels", "\n", "", "else", ":", "\n", "            ", "return", "logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.CMCMem.__init__": [[95, 106], ["mem_bank.BaseMem.__init__", "alias_multinomial.AliasMethod", "mem_bank.CMCMem.multinomial.cuda", "mem_bank.CMCMem.register_buffer", "mem_bank.CMCMem.register_buffer", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize"], ["def", "__init__", "(", "self", ",", "n_dim", ",", "n_data", ",", "K", "=", "65536", ",", "T", "=", "0.07", ",", "m", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "CMCMem", ",", "self", ")", ".", "__init__", "(", "K", ",", "T", ",", "m", ")", "\n", "# create sampler", "\n", "self", ".", "multinomial", "=", "AliasMethod", "(", "torch", ".", "ones", "(", "n_data", ")", ")", "\n", "self", ".", "multinomial", ".", "cuda", "(", ")", "\n", "\n", "# create memory bank", "\n", "self", ".", "register_buffer", "(", "'memory_1'", ",", "torch", ".", "randn", "(", "n_data", ",", "n_dim", ")", ")", "\n", "self", ".", "register_buffer", "(", "'memory_2'", ",", "torch", ".", "randn", "(", "n_data", ",", "n_dim", ")", ")", "\n", "self", ".", "memory_1", "=", "F", ".", "normalize", "(", "self", ".", "memory_1", ")", "\n", "self", ".", "memory_2", "=", "F", ".", "normalize", "(", "self", ".", "memory_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.CMCMem.forward": [[107, 155], ["x1.size", "x1.size", "mem_bank.CMCMem.multinomial.draw().view", "mem_bank.CMCMem.select().copy_", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "w1.view.view.view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "w2.view.view.view", "mem_bank.CMCMem._compute_logit", "mem_bank.CMCMem._compute_logit", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "mem_bank.CMCMem.view", "mem_bank.CMCMem.view", "mem_bank.CMCMem._compute_logit", "mem_bank.CMCMem._compute_logit", "mem_bank.CMCMem._update_memory", "mem_bank.CMCMem._update_memory", "mem_bank.CMCMem._update_memory", "mem_bank.CMCMem._update_memory", "mem_bank.CMCMem.multinomial.draw", "mem_bank.CMCMem.select", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.draw"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "y", ",", "x1_jig", "=", "None", ",", "x2_jig", "=", "None", ",", "\n", "all_x1", "=", "None", ",", "all_x2", "=", "None", ",", "all_y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n          x1: feat of modal 1\n          x2: feat of modal 2\n          y: index on current node\n          x1_jig: jigsaw feat of modal1\n          x2_jig: jigsaw feat of modal2\n          all_x1: gather of feats across nodes; otherwise use x1\n          all_x2: gather of feats across nodes; otherwise use x2\n          all_y: gather of index across nodes; otherwise use y\n        \"\"\"", "\n", "bsz", "=", "x1", ".", "size", "(", "0", ")", "\n", "n_dim", "=", "x1", ".", "size", "(", "1", ")", "\n", "\n", "# sample negative features", "\n", "idx", "=", "self", ".", "multinomial", ".", "draw", "(", "bsz", "*", "(", "self", ".", "K", "+", "1", ")", ")", ".", "view", "(", "bsz", ",", "-", "1", ")", "\n", "idx", ".", "select", "(", "1", ",", "0", ")", ".", "copy_", "(", "y", ".", "data", ")", "\n", "\n", "w1", "=", "torch", ".", "index_select", "(", "self", ".", "memory_1", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", "\n", "w1", "=", "w1", ".", "view", "(", "bsz", ",", "self", ".", "K", "+", "1", ",", "n_dim", ")", "\n", "w2", "=", "torch", ".", "index_select", "(", "self", ".", "memory_2", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", "\n", "w2", "=", "w2", ".", "view", "(", "bsz", ",", "self", ".", "K", "+", "1", ",", "n_dim", ")", "\n", "\n", "# compute logits", "\n", "logits1", "=", "self", ".", "_compute_logit", "(", "x1", ",", "w2", ")", "\n", "logits2", "=", "self", ".", "_compute_logit", "(", "x2", ",", "w1", ")", "\n", "if", "(", "x1_jig", "is", "not", "None", ")", "and", "(", "x2_jig", "is", "not", "None", ")", ":", "\n", "            ", "logits1_jig", "=", "self", ".", "_compute_logit", "(", "x1_jig", ",", "w2", ")", "\n", "logits2_jig", "=", "self", ".", "_compute_logit", "(", "x2_jig", ",", "w1", ")", "\n", "\n", "# set label", "\n", "", "labels", "=", "torch", ".", "zeros", "(", "bsz", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "# update memory", "\n", "if", "(", "all_x1", "is", "not", "None", ")", "and", "(", "all_x2", "is", "not", "None", ")", "and", "(", "all_y", "is", "not", "None", ")", ":", "\n", "            ", "self", ".", "_update_memory", "(", "self", ".", "memory_1", ",", "all_x1", ",", "all_y", ")", "\n", "self", ".", "_update_memory", "(", "self", ".", "memory_2", ",", "all_x2", ",", "all_y", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_update_memory", "(", "self", ".", "memory_1", ",", "x1", ",", "y", ")", "\n", "self", ".", "_update_memory", "(", "self", ".", "memory_2", ",", "x2", ",", "y", ")", "\n", "\n", "", "if", "(", "x1_jig", "is", "not", "None", ")", "and", "(", "x2_jig", "is", "not", "None", ")", ":", "\n", "            ", "return", "logits1", ",", "logits2", ",", "logits1_jig", ",", "logits2_jig", ",", "labels", "\n", "", "else", ":", "\n", "            ", "return", "logits1", ",", "logits2", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.CMCMem3.__init__": [[158, 171], ["mem_bank.BaseMem.__init__", "alias_multinomial.AliasMethod", "mem_bank.CMCMem3.multinomial.cuda", "mem_bank.CMCMem3.register_buffer", "mem_bank.CMCMem3.register_buffer", "mem_bank.CMCMem3.register_buffer", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize"], ["    ", "def", "__init__", "(", "self", ",", "n_dim", ",", "n_data", ",", "K", "=", "65536", ",", "T", "=", "0.07", ",", "m", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "CMCMem3", ",", "self", ")", ".", "__init__", "(", "K", ",", "T", ",", "m", ")", "\n", "# create sampler", "\n", "self", ".", "multinomial", "=", "AliasMethod", "(", "torch", ".", "ones", "(", "n_data", ")", ")", "\n", "self", ".", "multinomial", ".", "cuda", "(", ")", "\n", "\n", "# create memory bank", "\n", "self", ".", "register_buffer", "(", "'memory_1'", ",", "torch", ".", "randn", "(", "n_data", ",", "n_dim", ")", ")", "\n", "self", ".", "register_buffer", "(", "'memory_2'", ",", "torch", ".", "randn", "(", "n_data", ",", "n_dim", ")", ")", "\n", "self", ".", "register_buffer", "(", "'memory_3'", ",", "torch", ".", "randn", "(", "n_data", ",", "n_dim", ")", ")", "\n", "self", ".", "memory_1", "=", "F", ".", "normalize", "(", "self", ".", "memory_1", ")", "\n", "self", ".", "memory_2", "=", "F", ".", "normalize", "(", "self", ".", "memory_2", ")", "\n", "self", ".", "memory_3", "=", "F", ".", "normalize", "(", "self", ".", "memory_3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.CMCMem3.forward": [[172, 206], ["x1.size", "x1.size", "mem_bank.CMCMem3.multinomial.draw().view", "mem_bank.CMCMem3.select().copy_", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "w1.view.view.view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "w2.view.view.view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "w3.view.view.view", "mem_bank.CMCMem3._compute_logit", "mem_bank.CMCMem3._compute_logit", "mem_bank.CMCMem3._compute_logit", "mem_bank.CMCMem3._compute_logit", "mem_bank.CMCMem3._compute_logit", "mem_bank.CMCMem3._compute_logit", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "mem_bank.CMCMem3.view", "mem_bank.CMCMem3.view", "mem_bank.CMCMem3.view", "mem_bank.CMCMem3._update_memory", "mem_bank.CMCMem3._update_memory", "mem_bank.CMCMem3._update_memory", "mem_bank.CMCMem3._update_memory", "mem_bank.CMCMem3._update_memory", "mem_bank.CMCMem3._update_memory", "mem_bank.CMCMem3.multinomial.draw", "mem_bank.CMCMem3.select", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._compute_logit", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.mem_bank.BaseMem._update_memory", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.draw"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "x3", ",", "y", ",", "all_x1", "=", "None", ",", "all_x2", "=", "None", ",", "all_x3", "=", "None", ",", "all_y", "=", "None", ")", ":", "\n", "        ", "bsz", "=", "x1", ".", "size", "(", "0", ")", "\n", "n_dim", "=", "x1", ".", "size", "(", "1", ")", "\n", "\n", "idx", "=", "self", ".", "multinomial", ".", "draw", "(", "bsz", "*", "(", "self", ".", "K", "+", "1", ")", ")", ".", "view", "(", "bsz", ",", "-", "1", ")", "\n", "idx", ".", "select", "(", "1", ",", "0", ")", ".", "copy_", "(", "y", ".", "data", ")", "\n", "\n", "w1", "=", "torch", ".", "index_select", "(", "self", ".", "memory_1", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", "\n", "w1", "=", "w1", ".", "view", "(", "bsz", ",", "self", ".", "K", "+", "1", ",", "n_dim", ")", "\n", "w2", "=", "torch", ".", "index_select", "(", "self", ".", "memory_2", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", "\n", "w2", "=", "w2", ".", "view", "(", "bsz", ",", "self", ".", "K", "+", "1", ",", "n_dim", ")", "\n", "w3", "=", "torch", ".", "index_select", "(", "self", ".", "memory_3", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", "\n", "w3", "=", "w3", ".", "view", "(", "bsz", ",", "self", ".", "K", "+", "1", ",", "n_dim", ")", "\n", "\n", "logits12", "=", "self", ".", "_compute_logit", "(", "x1", ",", "w2", ")", "\n", "logits21", "=", "self", ".", "_compute_logit", "(", "x2", ",", "w1", ")", "\n", "logits23", "=", "self", ".", "_compute_logit", "(", "x2", ",", "w3", ")", "\n", "logits32", "=", "self", ".", "_compute_logit", "(", "x3", ",", "w2", ")", "\n", "logits13", "=", "self", ".", "_compute_logit", "(", "x1", ",", "w3", ")", "\n", "logits31", "=", "self", ".", "_compute_logit", "(", "x3", ",", "w1", ")", "\n", "\n", "labels", "=", "torch", ".", "zeros", "(", "bsz", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "(", "all_x1", "is", "not", "None", ")", "and", "(", "all_x2", "is", "not", "None", ")", "and", "(", "all_x3", "is", "not", "None", ")", "and", "(", "all_y", "is", "not", "None", ")", ":", "\n", "            ", "self", ".", "_update_memory", "(", "self", ".", "memory_1", ",", "all_x1", ",", "all_y", ")", "\n", "self", ".", "_update_memory", "(", "self", ".", "memory_2", ",", "all_x2", ",", "all_y", ")", "\n", "self", ".", "_update_memory", "(", "self", ".", "memory_3", ",", "all_x3", ",", "all_y", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_update_memory", "(", "self", ".", "memory_1", ",", "x1", ",", "y", ")", "\n", "self", ".", "_update_memory", "(", "self", ".", "memory_2", ",", "x2", ",", "y", ")", "\n", "self", ".", "_update_memory", "(", "self", ".", "memory_3", ",", "x3", ",", "y", ")", "\n", "\n", "", "return", "logits12", ",", "logits21", ",", "logits23", ",", "logits32", ",", "logits13", ",", "logits31", ",", "labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.build_memory.build_mem": [[5, 18], ["opt.mem.startswith", "mem_func", "mem_func", "NotImplementedError"], "function", ["None"], ["def", "build_mem", "(", "opt", ",", "n_data", ")", ":", "\n", "    ", "if", "opt", ".", "mem", ".", "startswith", "(", "'bank'", ")", ":", "\n", "        ", "mem_func", "=", "CMCMem3", "\n", "memory", "=", "mem_func", "(", "opt", ".", "feat_dim", ",", "n_data", ",", "\n", "opt", ".", "nce_k", ",", "opt", ".", "nce_t", ",", "opt", ".", "nce_m", ")", "\n", "", "elif", "opt", ".", "mem", "==", "'moco'", ":", "\n", "        ", "mem_func", "=", "RGBMoCo", "if", "opt", ".", "modal", "==", "'RGB'", "else", "CMCMoCo", "\n", "memory", "=", "mem_func", "(", "opt", ".", "feat_dim", ",", "opt", ".", "nce_k", ",", "opt", ".", "nce_t", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'mem not suported: {}'", ".", "format", "(", "opt", ".", "mem", ")", ")", "\n", "\n", "", "return", "memory", "\n", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.__init__": [[8, 44], ["len", "torch.zeros", "torch.LongTensor", "enumerate", "probs.sum", "probs.div_", "smaller.pop", "larger.pop", "probs.sum", "smaller.append", "larger.append", "len", "len", "smaller.append", "larger.append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probs", ")", ":", "\n", "\n", "        ", "if", "probs", ".", "sum", "(", ")", ">", "1", ":", "\n", "            ", "probs", ".", "div_", "(", "probs", ".", "sum", "(", ")", ")", "\n", "", "K", "=", "len", "(", "probs", ")", "\n", "self", ".", "prob", "=", "torch", ".", "zeros", "(", "K", ")", "\n", "self", ".", "alias", "=", "torch", ".", "LongTensor", "(", "[", "0", "]", "*", "K", ")", "\n", "\n", "# Sort the data into the outcomes with probabilities", "\n", "# that are larger and smaller than 1/K.", "\n", "smaller", "=", "[", "]", "\n", "larger", "=", "[", "]", "\n", "for", "kk", ",", "prob", "in", "enumerate", "(", "probs", ")", ":", "\n", "            ", "self", ".", "prob", "[", "kk", "]", "=", "K", "*", "prob", "\n", "if", "self", ".", "prob", "[", "kk", "]", "<", "1.0", ":", "\n", "                ", "smaller", ".", "append", "(", "kk", ")", "\n", "", "else", ":", "\n", "                ", "larger", ".", "append", "(", "kk", ")", "\n", "\n", "# Loop though and create little binary mixtures that", "\n", "# appropriately allocate the larger outcomes over the", "\n", "# overall uniform mixture.", "\n", "", "", "while", "len", "(", "smaller", ")", ">", "0", "and", "len", "(", "larger", ")", ">", "0", ":", "\n", "            ", "small", "=", "smaller", ".", "pop", "(", ")", "\n", "large", "=", "larger", ".", "pop", "(", ")", "\n", "\n", "self", ".", "alias", "[", "small", "]", "=", "large", "\n", "self", ".", "prob", "[", "large", "]", "=", "(", "self", ".", "prob", "[", "large", "]", "-", "1.0", ")", "+", "self", ".", "prob", "[", "small", "]", "\n", "\n", "if", "self", ".", "prob", "[", "large", "]", "<", "1.0", ":", "\n", "                ", "smaller", ".", "append", "(", "large", ")", "\n", "", "else", ":", "\n", "                ", "larger", ".", "append", "(", "large", ")", "\n", "\n", "", "", "for", "last_one", "in", "smaller", "+", "larger", ":", "\n", "            ", "self", ".", "prob", "[", "last_one", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda": [[45, 48], ["alias_multinomial.AliasMethod.prob.cuda", "alias_multinomial.AliasMethod.alias.cuda"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "prob", "=", "self", ".", "prob", ".", "cuda", "(", ")", "\n", "self", ".", "alias", "=", "self", ".", "alias", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.draw": [[49, 66], ["alias_multinomial.AliasMethod.alias.size", "torch.zeros().random_", "alias_multinomial.AliasMethod.prob.index_select", "alias_multinomial.AliasMethod.alias.index_select", "torch.bernoulli", "torch.zeros().random_.mul", "alias_multinomial.AliasMethod.mul", "torch.bernoulli.long", "torch.zeros"], "methods", ["None"], ["", "def", "draw", "(", "self", ",", "N", ")", ":", "\n", "        ", "\"\"\"\n        Draw N samples from multinomial\n        :param N: number of samples\n        :return: samples\n        \"\"\"", "\n", "K", "=", "self", ".", "alias", ".", "size", "(", "0", ")", "\n", "\n", "kk", "=", "torch", ".", "zeros", "(", "N", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "prob", ".", "device", ")", ".", "random_", "(", "0", ",", "K", ")", "\n", "prob", "=", "self", ".", "prob", ".", "index_select", "(", "0", ",", "kk", ")", "\n", "alias", "=", "self", ".", "alias", ".", "index_select", "(", "0", ",", "kk", ")", "\n", "# b is whether a random number is greater than q", "\n", "b", "=", "torch", ".", "bernoulli", "(", "prob", ")", "\n", "oq", "=", "kk", ".", "mul", "(", "b", ".", "long", "(", ")", ")", "\n", "oj", "=", "alias", ".", "mul", "(", "(", "1", "-", "b", ")", ".", "long", "(", ")", ")", "\n", "\n", "return", "oq", "+", "oj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.pointnet2_msg.Pointnet2MSG.__init__": [[23, 57], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "range", "NPOINTS.__len__", "MLPS[].copy", "range", "pointnet2_msg.Pointnet2MSG.SA_modules.append", "skip_channel_list.append", "FP_MLPS.__len__", "pointnet2_msg.Pointnet2MSG.FP_modules.append", "MLPS[].copy.__len__", "pointnet2.pointnet2_modules.PointnetSAModuleMSG", "pointnet2.pointnet2_modules.PointnetFPModule", "len"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DatasetFromSampler.__len__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DatasetFromSampler.__len__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.util.DatasetFromSampler.__len__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", "=", "6", ",", "class_num", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "SA_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "channel_in", "=", "input_channels", "\n", "self", ".", "class_num", "=", "class_num", "\n", "\n", "skip_channel_list", "=", "[", "input_channels", "]", "\n", "for", "k", "in", "range", "(", "NPOINTS", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "mlps", "=", "MLPS", "[", "k", "]", ".", "copy", "(", ")", "\n", "channel_out", "=", "0", "\n", "for", "idx", "in", "range", "(", "mlps", ".", "__len__", "(", ")", ")", ":", "\n", "                ", "mlps", "[", "idx", "]", "=", "[", "channel_in", "]", "+", "mlps", "[", "idx", "]", "\n", "channel_out", "+=", "mlps", "[", "idx", "]", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "SA_modules", ".", "append", "(", "\n", "PointnetSAModuleMSG", "(", "\n", "npoint", "=", "NPOINTS", "[", "k", "]", ",", "\n", "radii", "=", "RADIUS", "[", "k", "]", ",", "\n", "nsamples", "=", "NSAMPLE", "[", "k", "]", ",", "\n", "mlps", "=", "mlps", ",", "\n", "use_xyz", "=", "True", ",", "\n", "bn", "=", "True", "\n", ")", "\n", ")", "\n", "skip_channel_list", ".", "append", "(", "channel_out", ")", "\n", "channel_in", "=", "channel_out", "\n", "\n", "", "self", ".", "FP_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "k", "in", "range", "(", "FP_MLPS", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "pre_channel", "=", "FP_MLPS", "[", "k", "+", "1", "]", "[", "-", "1", "]", "if", "k", "+", "1", "<", "len", "(", "FP_MLPS", ")", "else", "channel_out", "\n", "self", ".", "FP_modules", ".", "append", "(", "\n", "PointnetFPModule", "(", "mlp", "=", "[", "pre_channel", "+", "skip_channel_list", "[", "k", "]", "]", "+", "FP_MLPS", "[", "k", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.pointnet2_msg.Pointnet2MSG._break_up_pc": [[70, 78], ["pc[].contiguous", "pc[].transpose().contiguous", "pc.size", "pc[].transpose"], "methods", ["None"], ["", "", "def", "_break_up_pc", "(", "self", ",", "pc", ")", ":", "\n", "        ", "xyz", "=", "pc", "[", "...", ",", "0", ":", "3", "]", ".", "contiguous", "(", ")", "\n", "features", "=", "(", "\n", "pc", "[", "...", ",", "3", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "pc", ".", "size", "(", "-", "1", ")", ">", "3", "else", "None", "\n", ")", "\n", "\n", "return", "xyz", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.pointnet2_msg.Pointnet2MSG.forward": [[79, 96], ["pointnet2_msg.Pointnet2MSG._break_up_pc", "range", "range", "len", "l_xyz.append", "l_features.append", "len"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.pointnet2_msg.Pointnet2MSG._break_up_pc"], ["", "def", "forward", "(", "self", ",", "pointcloud", ":", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "xyz", ",", "features", "=", "self", ".", "_break_up_pc", "(", "pointcloud", ")", "\n", "\n", "l_xyz", ",", "l_features", "=", "[", "xyz", "]", ",", "[", "features", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "SA_modules", ")", ")", ":", "\n", "            ", "li_xyz", ",", "li_features", "=", "self", ".", "SA_modules", "[", "i", "]", "(", "l_xyz", "[", "i", "]", ",", "l_features", "[", "i", "]", ")", "\n", "l_xyz", ".", "append", "(", "li_xyz", ")", "\n", "l_features", ".", "append", "(", "li_features", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "-", "1", ",", "-", "(", "len", "(", "self", ".", "FP_modules", ")", "+", "1", ")", ",", "-", "1", ")", ":", "\n", "            ", "l_features", "[", "i", "-", "1", "]", "=", "self", ".", "FP_modules", "[", "i", "]", "(", "\n", "l_xyz", "[", "i", "-", "1", "]", ",", "l_xyz", "[", "i", "]", ",", "l_features", "[", "i", "-", "1", "]", ",", "l_features", "[", "i", "]", "\n", ")", "\n", "\n", "# pred_cls = self.cls_layer(l_features[0]).transpose(1, 2).contiguous()  # (B, N, self.class_num)", "\n", "# return pred_cls", "\n", "", "return", "l_features", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.pointnet2_msg.get_model": [[7, 9], ["pointnet2_msg.Pointnet2MSG"], "function", ["None"], ["def", "get_model", "(", "input_channels", "=", "0", ",", "class_num", "=", "1", ")", ":", "\n", "    ", "return", "Pointnet2MSG", "(", "input_channels", "=", "input_channels", ",", "class_num", "=", "class_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.RGBSingleHead.__init__": [[16, 40], ["torch.Module.__init__", "build_backbone.RGBSingleHead._parse_width", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "util.Normalize", "torch.Sequential", "torch.Sequential", "torch.Sequential", "NotImplementedError", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "util.Normalize"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMCSingleHead._parse_width"], ["def", "__init__", "(", "self", ",", "name", "=", "'resnet50'", ",", "head", "=", "'linear'", ",", "feat_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "RGBSingleHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "name", ",", "width", "=", "self", ".", "_parse_width", "(", "name", ")", "\n", "dim_in", "=", "int", "(", "2048", "*", "width", ")", "\n", "self", ".", "width", "=", "width", "\n", "\n", "self", ".", "encoder", "=", "resnet_model_dict", "[", "name", "]", "(", "width", "=", "width", ")", "\n", "\n", "if", "head", "==", "'linear'", ":", "\n", "            ", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "feat_dim", ")", ",", "\n", "Normalize", "(", "2", ")", "\n", ")", "\n", "", "elif", "head", "==", "'mlp'", ":", "\n", "            ", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "dim_in", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "feat_dim", ")", ",", "\n", "Normalize", "(", "2", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'head not supported: {}'", ".", "format", "(", "head", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.RGBSingleHead._parse_width": [[41, 49], ["name.endswith", "name.endswith"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_parse_width", "(", "name", ")", ":", "\n", "        ", "if", "name", ".", "endswith", "(", "'x4'", ")", ":", "\n", "            ", "return", "name", "[", ":", "-", "2", "]", ",", "4", "\n", "", "elif", "name", ".", "endswith", "(", "'x2'", ")", ":", "\n", "            ", "return", "name", "[", ":", "-", "2", "]", ",", "2", "\n", "", "else", ":", "\n", "            ", "return", "name", ",", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.RGBSingleHead.forward": [[50, 59], ["build_backbone.RGBSingleHead.encoder", "build_backbone.RGBSingleHead.head"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "mode", "=", "0", ")", ":", "\n", "# mode --", "\n", "# 0: normal encoder,", "\n", "# 1: momentum encoder,", "\n", "# 2: testing mode", "\n", "        ", "feat", "=", "self", ".", "encoder", "(", "x", ")", "\n", "if", "mode", "==", "0", "or", "mode", "==", "1", ":", "\n", "            ", "feat", "=", "self", ".", "head", "(", "feat", ")", "\n", "", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.RGBMultiHeads.__init__": [[62, 68], ["build_backbone.RGBSingleHead.__init__", "util.JigsawHead", "int"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "name", "=", "'resnet50'", ",", "head", "=", "'linear'", ",", "feat_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "RGBMultiHeads", ",", "self", ")", ".", "__init__", "(", "name", ",", "head", ",", "feat_dim", ")", "\n", "\n", "self", ".", "head_jig", "=", "JigsawHead", "(", "dim_in", "=", "int", "(", "2048", "*", "self", ".", "width", ")", ",", "\n", "dim_out", "=", "feat_dim", ",", "\n", "head", "=", "head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.RGBMultiHeads.forward": [[69, 84], ["build_backbone.RGBMultiHeads.head", "build_backbone.RGBMultiHeads.head_jig", "build_backbone.RGBMultiHeads.encoder", "build_backbone.RGBMultiHeads.encoder", "build_backbone.RGBMultiHeads.head", "build_backbone.RGBMultiHeads.encoder", "build_backbone.RGBMultiHeads.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_jig", "=", "None", ",", "mode", "=", "0", ")", ":", "\n", "# mode --", "\n", "# 0: normal encoder,", "\n", "# 1: momentum encoder,", "\n", "# 2: testing mode", "\n", "        ", "if", "mode", "==", "0", ":", "\n", "            ", "feat", "=", "self", ".", "head", "(", "self", ".", "encoder", "(", "x", ")", ")", "\n", "feat_jig", "=", "self", ".", "head_jig", "(", "self", ".", "encoder", "(", "x_jig", ")", ")", "\n", "return", "feat", ",", "feat_jig", "\n", "", "elif", "mode", "==", "1", ":", "\n", "            ", "feat", "=", "self", ".", "head", "(", "self", ".", "encoder", "(", "x", ")", ")", "\n", "return", "feat", "\n", "", "else", ":", "\n", "            ", "feat", "=", "self", ".", "encoder", "(", "x", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMCSingleHead.__init__": [[87, 123], ["torch.Module.__init__", "build_backbone.CMCSingleHead._parse_width", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "util.Normalize", "torch.Linear", "torch.Linear", "torch.Linear", "util.Normalize", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "NotImplementedError", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "util.Normalize", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "util.Normalize"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMCSingleHead._parse_width"], ["def", "__init__", "(", "self", ",", "name", "=", "'resnet50'", ",", "head", "=", "'linear'", ",", "feat_dim", "=", "128", ",", "in_channel_list", "=", "[", "1", ",", "2", "]", ",", "linear_feat_map", "=", "False", ",", "width", "=", "50", ")", ":", "\n", "        ", "super", "(", "CMCSingleHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "name", ",", "width", "=", "self", ".", "_parse_width", "(", "name", ")", "\n", "dim_in", "=", "int", "(", "2048", "*", "width", ")", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "in_channel_list", "=", "in_channel_list", "\n", "\n", "self", ".", "encoder1", "=", "resnet_model_dict", "[", "name", "]", "(", "width", "=", "width", ",", "in_channel", "=", "in_channel_list", "[", "0", "]", ")", "\n", "self", ".", "encoder2", "=", "resnet_model_dict", "[", "name", "]", "(", "width", "=", "width", ",", "in_channel", "=", "in_channel_list", "[", "1", "]", ")", "\n", "\n", "if", "head", "==", "'linear'", ":", "\n", "            ", "self", ".", "head1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "feat_dim", ")", ",", "\n", "Normalize", "(", "2", ")", "\n", ")", "\n", "self", ".", "head2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "feat_dim", ")", ",", "\n", "Normalize", "(", "2", ")", "\n", ")", "\n", "", "elif", "head", "==", "'mlp'", ":", "\n", "            ", "self", ".", "head1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "dim_in", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "feat_dim", ")", ",", "\n", "Normalize", "(", "2", ")", "\n", ")", "\n", "self", ".", "head2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "dim_in", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "feat_dim", ")", ",", "\n", "Normalize", "(", "2", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'head not supported: {}'", ".", "format", "(", "head", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMCSingleHead._parse_width": [[124, 132], ["name.endswith", "name.endswith"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_parse_width", "(", "name", ")", ":", "\n", "        ", "if", "name", ".", "endswith", "(", "'x4'", ")", ":", "\n", "            ", "return", "name", "[", ":", "-", "2", "]", ",", "2", "\n", "", "elif", "name", ".", "endswith", "(", "'x2'", ")", ":", "\n", "            ", "return", "name", "[", ":", "-", "2", "]", ",", "1", "\n", "", "else", ":", "\n", "            ", "return", "name", ",", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMCSingleHead.forward": [[133, 147], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "build_backbone.CMCSingleHead.encoder1", "build_backbone.CMCSingleHead.encoder2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "build_backbone.CMCSingleHead.head1", "build_backbone.CMCSingleHead.head2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "mode", "=", "0", ",", "return_fm", "=", "False", ")", ":", "\n", "# mode --", "\n", "# 0: normal encoder,", "\n", "# 1: momentum encoder,", "\n", "# 2: testing mode", "\n", "        ", "x1", ",", "x2", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "in_channel_list", ",", "dim", "=", "1", ")", "\n", "feat1", "=", "self", ".", "encoder1", "(", "x1", ",", "return_fm", "=", "return_fm", ")", "\n", "feat2", "=", "self", ".", "encoder2", "(", "x2", ",", "return_fm", "=", "return_fm", ")", "\n", "if", "return_fm", ":", "\n", "            ", "return", "feat1", ",", "feat2", "\n", "", "if", "mode", "==", "0", "or", "mode", "==", "1", ":", "\n", "            ", "feat1", "=", "self", ".", "head1", "(", "feat1", ")", "\n", "feat2", "=", "self", ".", "head2", "(", "feat2", ")", "\n", "", "return", "torch", ".", "cat", "(", "(", "feat1", ",", "feat2", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMCMultiHeads.__init__": [[150, 159], ["build_backbone.CMCSingleHead.__init__", "util.JigsawHead", "util.JigsawHead", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "name", "=", "'resnet50'", ",", "head", "=", "'linear'", ",", "feat_dim", "=", "128", ",", "in_channel_list", "=", "[", "1", ",", "2", "]", ")", ":", "\n", "        ", "super", "(", "CMCMultiHeads", ",", "self", ")", ".", "__init__", "(", "name", ",", "head", ",", "feat_dim", ",", "in_channel_list", ")", "\n", "\n", "self", ".", "head1_jig", "=", "JigsawHead", "(", "dim_in", "=", "int", "(", "2048", "*", "self", ".", "width", ")", ",", "\n", "dim_out", "=", "feat_dim", ",", "\n", "head", "=", "head", ")", "\n", "self", ".", "head2_jig", "=", "JigsawHead", "(", "dim_in", "=", "int", "(", "2048", "*", "self", ".", "width", ")", ",", "\n", "dim_out", "=", "feat_dim", ",", "\n", "head", "=", "head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMCMultiHeads.forward": [[160, 185], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "build_backbone.CMCMultiHeads.encoder1", "build_backbone.CMCMultiHeads.encoder2", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "build_backbone.CMCMultiHeads.encoder1", "build_backbone.CMCMultiHeads.encoder2", "build_backbone.CMCMultiHeads.head1_jig", "build_backbone.CMCMultiHeads.head2_jig", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "build_backbone.CMCMultiHeads.head1", "build_backbone.CMCMultiHeads.head2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "build_backbone.CMCMultiHeads.head1", "build_backbone.CMCMultiHeads.head2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_jig", "=", "None", ",", "mode", "=", "0", ")", ":", "\n", "# mode --", "\n", "# 0: normal encoder,", "\n", "# 1: momentum encoder,", "\n", "# 2: testing mode", "\n", "        ", "x1", ",", "x2", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "in_channel_list", ",", "dim", "=", "1", ")", "\n", "feat1", "=", "self", ".", "encoder1", "(", "x1", ")", "\n", "feat2", "=", "self", ".", "encoder2", "(", "x2", ")", "\n", "\n", "if", "mode", "==", "0", ":", "\n", "            ", "x1_jig", ",", "x2_jig", "=", "torch", ".", "split", "(", "x_jig", ",", "self", ".", "in_channel_list", ",", "dim", "=", "1", ")", "\n", "feat1_jig", "=", "self", ".", "encoder1", "(", "x1_jig", ")", "\n", "feat2_jig", "=", "self", ".", "encoder2", "(", "x2_jig", ")", "\n", "\n", "feat1", ",", "feat2", "=", "self", ".", "head1", "(", "feat1", ")", ",", "self", ".", "head2", "(", "feat2", ")", "\n", "feat1_jig", "=", "self", ".", "head1_jig", "(", "feat1_jig", ")", "\n", "feat2_jig", "=", "self", ".", "head2_jig", "(", "feat2_jig", ")", "\n", "feat", "=", "torch", ".", "cat", "(", "(", "feat1", ",", "feat2", ")", ",", "dim", "=", "1", ")", "\n", "feat_jig", "=", "torch", ".", "cat", "(", "(", "feat1_jig", ",", "feat2_jig", ")", ",", "dim", "=", "1", ")", "\n", "return", "feat", ",", "feat_jig", "\n", "", "elif", "mode", "==", "1", ":", "\n", "            ", "feat1", ",", "feat2", "=", "self", ".", "head1", "(", "feat1", ")", ",", "self", ".", "head2", "(", "feat2", ")", "\n", "return", "torch", ".", "cat", "(", "(", "feat1", ",", "feat2", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "(", "feat1", ",", "feat2", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMC3HRNetSGCNSingleHead.__init__": [[188, 246], ["torch.Module.__init__", "SGCN.create_SGCN.create_sgcn", "sum", "official_hrnet.official_hrnet.get_hrnet_w18_backbone", "official_hrnet.official_hrnet.get_hrnet_w18_backbone", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "sum", "official_hrnet.official_hrnet.get_hrnet_w32_backbone", "official_hrnet.official_hrnet.get_hrnet_w32_backbone", "torch.Linear", "torch.Linear", "torch.Linear", "util.Normalize", "torch.Linear", "torch.Linear", "torch.Linear", "util.Normalize", "torch.Linear", "torch.Linear", "torch.Linear", "util.Normalize", "NotImplementedError", "sum", "official_hrnet.official_hrnet.get_hrnet_w48_backbone", "official_hrnet.official_hrnet.get_hrnet_w48_backbone"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.create_SGCN.create_sgcn", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_hrnet_w18_backbone", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_hrnet_w18_backbone", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_hrnet_w32_backbone", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_hrnet_w32_backbone", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_hrnet_w48_backbone", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_hrnet_w48_backbone"], ["def", "__init__", "(", "self", ",", "name", "=", "'HRNet'", ",", "head", "=", "'linear'", ",", "feat_dim", "=", "128", ",", "in_channel_list", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "linear_feat_map", "=", "False", ",", "width", "=", "18", ",", "pool_method", "=", "'mean'", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", "CMC3HRNetSGCNSingleHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "assert", "name", "==", "'HRNet'", "\n", "self", ".", "in_channel_list", "=", "in_channel_list", "\n", "self", ".", "linear_feat_map", "=", "linear_feat_map", "\n", "self", ".", "width", "=", "width", "\n", "assert", "pool_method", "in", "[", "'mean'", ",", "'max'", "]", "\n", "self", ".", "pool_method", "=", "pool_method", "\n", "\n", "if", "width", "==", "18", ":", "\n", "            ", "dim_in", "=", "sum", "(", "[", "18", ",", "36", ",", "72", ",", "144", "]", ")", "\n", "self", ".", "encoder1", "=", "get_hrnet_w18_backbone", "(", ")", "\n", "self", ".", "encoder2", "=", "get_hrnet_w18_backbone", "(", ")", "\n", "# assert not self.linear_feat_map", "\n", "\n", "", "elif", "width", "==", "32", ":", "\n", "            ", "dim_in", "=", "sum", "(", "[", "32", ",", "64", ",", "128", ",", "256", "]", ")", "\n", "self", ".", "encoder1", "=", "get_hrnet_w32_backbone", "(", ")", "\n", "self", ".", "encoder2", "=", "get_hrnet_w32_backbone", "(", ")", "\n", "# assert not self.linear_feat_map", "\n", "\n", "", "elif", "width", "==", "48", ":", "\n", "            ", "dim_in", "=", "sum", "(", "[", "48", ",", "96", ",", "192", ",", "384", "]", ")", "\n", "self", ".", "encoder1", "=", "get_hrnet_w48_backbone", "(", ")", "\n", "self", ".", "encoder2", "=", "get_hrnet_w48_backbone", "(", ")", "\n", "# assert not self.linear_feat_map", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "sgcn_dim", "=", "128", "\n", "self", ".", "encoder3", "=", "create_sgcn", "(", "opt", ".", "skeleton_meta_name", ",", "sgcn_dim", ",", "4", ")", "\n", "\n", "if", "head", "==", "'linear'", ":", "\n", "            ", "self", ".", "head1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "feat_dim", ")", ",", "\n", "Normalize", "(", "2", ")", "\n", ")", "\n", "self", ".", "head2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "feat_dim", ")", ",", "\n", "Normalize", "(", "2", ")", "\n", ")", "\n", "self", ".", "head3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "sgcn_dim", ",", "feat_dim", ")", ",", "\n", "Normalize", "(", "2", ")", "\n", ")", "\n", "", "elif", "head", "==", "'mlp'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'head not supported: {}'", ".", "format", "(", "head", ")", ")", "\n", "\n", "", "if", "self", ".", "linear_feat_map", ":", "\n", "            ", "self", ".", "encoder1_linear", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "sgcn_dim", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "encoder2_linear", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "sgcn_dim", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMC3HRNetSGCNSingleHead.merge_all_res": [[247, 255], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x[].size", "x[].size"], "methods", ["None"], ["", "", "def", "merge_all_res", "(", "self", ",", "x", ")", ":", "\n", "        ", "ALIGN_CORNERS", "=", "False", "\n", "x0_h", ",", "x0_w", "=", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x2", "=", "F", ".", "interpolate", "(", "x", "[", "2", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x3", "=", "F", ".", "interpolate", "(", "x", "[", "3", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", "0", "]", ",", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMC3HRNetSGCNSingleHead.forward": [[256, 304], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "build_backbone.CMC3HRNetSGCNSingleHead.encoder1", "build_backbone.CMC3HRNetSGCNSingleHead.encoder2", "build_backbone.CMC3HRNetSGCNSingleHead.encoder3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "build_backbone.CMC3HRNetSGCNSingleHead.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "build_backbone.CMC3HRNetSGCNSingleHead.head1", "build_backbone.CMC3HRNetSGCNSingleHead.head2", "build_backbone.CMC3HRNetSGCNSingleHead.head3", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "range", "build_backbone.CMC3HRNetSGCNSingleHead.merge_all_res", "build_backbone.CMC3HRNetSGCNSingleHead.merge_all_res", "build_backbone.CMC3HRNetSGCNSingleHead.encoder1_linear", "build_backbone.CMC3HRNetSGCNSingleHead.encoder2_linear", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.merge_all_res", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.merge_all_res"], ["", "def", "forward", "(", "self", ",", "x", ",", "s", ",", "mode", "=", "0", ",", "return_fm", "=", "False", ")", ":", "\n", "# mode --", "\n", "# 0: normal encoder,", "\n", "# 1: momentum encoder,", "\n", "# 2: testing mode", "\n", "        ", "x1", ",", "x2", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "in_channel_list", ",", "dim", "=", "1", ")", "\n", "_feat1", "=", "self", ".", "encoder1", "(", "x1", ")", "\n", "_feat2", "=", "self", ".", "encoder2", "(", "x2", ")", "\n", "_feat3", "=", "self", ".", "encoder3", "(", "s", ")", "\n", "avg_feat1", "=", "[", "]", "\n", "avg_feat2", "=", "[", "]", "\n", "if", "self", ".", "pool_method", "==", "'mean'", ":", "\n", "            ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "avg_feat1", ".", "append", "(", "torch", ".", "flatten", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "(", "_feat1", "[", "i", "]", ")", ",", "1", ")", ")", "\n", "avg_feat2", ".", "append", "(", "torch", ".", "flatten", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "(", "_feat2", "[", "i", "]", ")", ",", "1", ")", ")", "\n", "", "", "elif", "self", ".", "pool_method", "==", "'max'", ":", "\n", "            ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "avg_feat1", ".", "append", "(", "torch", ".", "flatten", "(", "nn", ".", "AdaptiveMaxPool2d", "(", "(", "1", ",", "1", ")", ")", "(", "_feat1", "[", "i", "]", ")", ",", "1", ")", ")", "\n", "avg_feat2", ".", "append", "(", "torch", ".", "flatten", "(", "nn", ".", "AdaptiveMaxPool2d", "(", "(", "1", ",", "1", ")", ")", "(", "_feat2", "[", "i", "]", ")", ",", "1", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "avg_feat1", "=", "torch", ".", "cat", "(", "avg_feat1", ",", "1", ")", "\n", "avg_feat2", "=", "torch", ".", "cat", "(", "avg_feat2", ",", "1", ")", "\n", "avg_feat3", "=", "_feat3", ".", "mean", "(", "1", ")", "\n", "\n", "if", "mode", "==", "0", "or", "mode", "==", "1", ":", "\n", "            ", "feat1", "=", "self", ".", "head1", "(", "avg_feat1", ")", "\n", "feat2", "=", "self", ".", "head2", "(", "avg_feat2", ")", "\n", "feat3", "=", "self", ".", "head3", "(", "avg_feat3", ")", "\n", "", "else", ":", "\n", "            ", "feat1", "=", "avg_feat1", "\n", "feat2", "=", "avg_feat2", "\n", "feat3", "=", "avg_feat3", "\n", "", "if", "return_fm", ":", "\n", "            ", "if", "self", ".", "linear_feat_map", ":", "\n", "                ", "merge1", "=", "self", ".", "merge_all_res", "(", "_feat1", ")", "\n", "merge2", "=", "self", ".", "merge_all_res", "(", "_feat2", ")", "\n", "linear_merge1", "=", "self", ".", "encoder1_linear", "(", "merge1", ")", "\n", "linear_merge2", "=", "self", ".", "encoder2_linear", "(", "merge2", ")", "\n", "return", "_feat1", ",", "_feat2", ",", "_feat3", ",", "torch", ".", "cat", "(", "(", "feat1", ",", "feat2", ",", "feat3", ")", ",", "dim", "=", "1", ")", ",", "{", "\n", "'merge1'", ":", "merge1", ",", "\n", "'merge2'", ":", "merge2", ",", "\n", "'linear_merge1'", ":", "linear_merge1", ",", "\n", "'linear_merge2'", ":", "linear_merge2", "\n", "}", "\n", "", "else", ":", "\n", "                ", "return", "_feat1", ",", "_feat2", ",", "_feat3", ",", "avg_feat1", ",", "avg_feat2", ",", "avg_feat3", ",", "torch", ".", "cat", "(", "(", "feat1", ",", "feat2", ",", "feat3", ")", ",", "dim", "=", "1", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "(", "feat1", ",", "feat2", ",", "feat3", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMC3HRNetSGCNPN2SingleHead.__init__": [[307, 369], ["torch.Module.__init__", "pointnet2_msg.Pointnet2MSG", "SGCN.create_SGCN.create_sgcn", "sum", "official_hrnet.official_hrnet.get_hrnet_w18_backbone", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "pointnet2.pytorch_utils.Conv1d", "sum", "official_hrnet.official_hrnet.get_hrnet_w32_backbone", "torch.Linear", "torch.Linear", "torch.Linear", "util.Normalize", "torch.Linear", "torch.Linear", "torch.Linear", "util.Normalize", "torch.Linear", "torch.Linear", "torch.Linear", "util.Normalize", "NotImplementedError", "sum", "official_hrnet.official_hrnet.get_hrnet_w48_backbone"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.create_SGCN.create_sgcn", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_hrnet_w18_backbone", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_hrnet_w32_backbone", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_hrnet_w48_backbone"], ["def", "__init__", "(", "self", ",", "name", "=", "'HRNetPN'", ",", "head", "=", "'linear'", ",", "feat_dim", "=", "128", ",", "in_channel_list", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "linear_feat_map", "=", "False", ",", "width", "=", "18", ",", "pool_method", "=", "'mean'", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", "CMC3HRNetSGCNPN2SingleHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "assert", "name", "==", "'HRNetPN'", "\n", "self", ".", "in_channel_list", "=", "in_channel_list", "\n", "self", ".", "linear_feat_map", "=", "linear_feat_map", "\n", "self", ".", "width", "=", "width", "\n", "assert", "pool_method", "in", "[", "'mean'", ",", "'max'", "]", "\n", "self", ".", "pool_method", "=", "pool_method", "\n", "\n", "if", "width", "==", "18", ":", "\n", "            ", "dim_in", "=", "sum", "(", "[", "18", ",", "36", ",", "72", ",", "144", "]", ")", "\n", "self", ".", "encoder1", "=", "get_hrnet_w18_backbone", "(", ")", "\n", "# self.encoder2 = get_hrnet_w18_backbone()", "\n", "# assert not self.linear_feat_map", "\n", "\n", "", "elif", "width", "==", "32", ":", "\n", "            ", "dim_in", "=", "sum", "(", "[", "32", ",", "64", ",", "128", ",", "256", "]", ")", "\n", "self", ".", "encoder1", "=", "get_hrnet_w32_backbone", "(", ")", "\n", "# self.encoder2 = get_hrnet_w32_backbone()", "\n", "# assert not self.linear_feat_map", "\n", "\n", "", "elif", "width", "==", "48", ":", "\n", "            ", "dim_in", "=", "sum", "(", "[", "48", ",", "96", ",", "192", ",", "384", "]", ")", "\n", "self", ".", "encoder1", "=", "get_hrnet_w48_backbone", "(", ")", "\n", "# self.encoder2 = get_hrnet_w48_backbone()", "\n", "# assert not self.linear_feat_map", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "encoder2", "=", "Pointnet2MSG", "(", "input_channels", "=", "0", ")", "\n", "self", ".", "pn_dim", "=", "128", "\n", "\n", "sgcn_dim", "=", "128", "\n", "self", ".", "encoder3", "=", "create_sgcn", "(", "opt", ".", "skeleton_meta_name", ",", "sgcn_dim", ",", "4", ")", "\n", "\n", "if", "head", "==", "'linear'", ":", "\n", "            ", "self", ".", "head1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "feat_dim", ")", ",", "\n", "Normalize", "(", "2", ")", "\n", ")", "\n", "self", ".", "head2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "pn_dim", ",", "feat_dim", ")", ",", "\n", "Normalize", "(", "2", ")", "\n", ")", "\n", "self", ".", "head3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "sgcn_dim", ",", "feat_dim", ")", ",", "\n", "Normalize", "(", "2", ")", "\n", ")", "\n", "", "elif", "head", "==", "'mlp'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'head not supported: {}'", ".", "format", "(", "head", ")", ")", "\n", "\n", "", "if", "self", ".", "linear_feat_map", ":", "\n", "            ", "self", ".", "encoder1_linear", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "sgcn_dim", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", "\n", "# self.encoder2_linear = nn.Conv2d(dim_in, sgcn_dim, kernel_size=1, stride=1, bias=True)", "\n", "self", ".", "encoder2_linear", "=", "pt_utils", ".", "Conv1d", "(", "self", ".", "pn_dim", ",", "sgcn_dim", ",", "bn", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMC3HRNetSGCNPN2SingleHead.merge_all_res": [[370, 378], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x[].size", "x[].size"], "methods", ["None"], ["", "", "def", "merge_all_res", "(", "self", ",", "x", ")", ":", "\n", "        ", "ALIGN_CORNERS", "=", "False", "\n", "x0_h", ",", "x0_w", "=", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x2", "=", "F", ".", "interpolate", "(", "x", "[", "2", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x3", "=", "F", ".", "interpolate", "(", "x", "[", "3", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", "0", "]", ",", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMC3HRNetSGCNPN2SingleHead.depth2pts": [[379, 446], ["mean.reshape.reshape.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "worldX.reshape().float", "worldY.reshape().float", "worldZ.reshape().float", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.interpolate", "torch.interpolate", "torch.interpolate", "valid_depth_prob.reshape.reshape.reshape", "valid_depth_prob.reshape.reshape.sum", "valid_depth_prob.reshape.reshape.multinomial", "random_sample_ind.unsqueeze.unsqueeze.unsqueeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "mean.reshape.reshape.squeeze", "depth_mask.unsqueeze().float", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grid_xy[].reshape().float", "grid_xy[].reshape().float", "worldX.reshape", "worldY.reshape", "worldZ.reshape", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "depth[].unsqueeze", "depth_mask.unsqueeze", "grid_xy[].reshape", "grid_xy[].reshape", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "def", "depth2pts", "(", "self", ",", "depth", ",", "depth_mask", ",", "grid_xy", ",", "ori_h", ",", "ori_w", ",", "mean", ")", ":", "\n", "# 320 x 320", "\n", "        ", "h", "=", "w", "=", "size", "=", "depth", ".", "shape", "[", "-", "1", "]", "\n", "bs", "=", "depth", ".", "shape", "[", "0", "]", "\n", "\n", "# wrong", "\n", "# depth_min = depth.min().item() - 1", "\n", "# x = torch.arange(size).cuda()", "\n", "# grid_x, grid_y = torch.meshgrid(x, x)", "\n", "# pcd = torch.cat([grid_x.reshape(1, 1, size, size).repeat(bs, 1, 1, 1),", "\n", "#                  grid_y.reshape(1, 1, size, size).repeat(bs, 1, 1, 1),", "\n", "#                  depth[:, 0, :, :].unsqueeze(1)], 1)", "\n", "# worldX = (pcd[:, 0, :, :] - 160) * pcd[:, 2, :, :] * 0.0035", "\n", "# worldY = (160 - pcd[:, 1, :, :]) * pcd[:, 2, :, :] * 0.0035", "\n", "# worldZ = pcd[:, 2, :, :]", "\n", "\n", "# correct", "\n", "mean", "=", "mean", ".", "reshape", "(", "bs", ",", "1", ",", "1", ",", "1", ")", "\n", "pcd", "=", "torch", ".", "cat", "(", "[", "grid_xy", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "reshape", "(", "bs", ",", "1", ",", "size", ",", "size", ")", ".", "float", "(", ")", ",", "\n", "grid_xy", "[", ":", ",", ":", ",", ":", ",", "1", "]", ".", "reshape", "(", "bs", ",", "1", ",", "size", ",", "size", ")", ".", "float", "(", ")", ",", "\n", "depth", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "+", "mean", "]", ",", "1", ")", "\n", "worldX", "=", "(", "pcd", "[", ":", ",", "0", ",", ":", ",", ":", "]", "-", "ori_h", "/", "2", ")", "*", "pcd", "[", ":", ",", "2", ",", ":", ",", ":", "]", "*", "0.0035", "\n", "worldY", "=", "(", "ori_w", "/", "2", "-", "pcd", "[", ":", ",", "1", ",", ":", ",", ":", "]", ")", "*", "pcd", "[", ":", ",", "2", ",", ":", ",", ":", "]", "*", "0.0035", "\n", "worldZ", "=", "pcd", "[", ":", ",", "2", ",", ":", ",", ":", "]", "-", "mean", ".", "squeeze", "(", "1", ")", "\n", "\n", "x", "=", "worldX", ".", "reshape", "(", "bs", ",", "1", ",", "h", "*", "w", ")", ".", "float", "(", ")", "\n", "y", "=", "worldY", ".", "reshape", "(", "bs", ",", "1", ",", "h", "*", "w", ")", ".", "float", "(", ")", "\n", "z", "=", "worldZ", ".", "reshape", "(", "bs", ",", "1", ",", "h", "*", "w", ")", ".", "float", "(", ")", "\n", "\n", "original_x", "=", "torch", ".", "zeros_like", "(", "x", ")", ".", "cuda", "(", ")", "\n", "original_y", "=", "torch", ".", "zeros_like", "(", "y", ")", ".", "cuda", "(", ")", "\n", "original_z", "=", "torch", ".", "zeros_like", "(", "z", ")", ".", "cuda", "(", ")", "\n", "\n", "original_sampled_x", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "1", ",", "4096", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "original_sampled_y", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "1", ",", "4096", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "original_sampled_z", "=", "torch", ".", "zeros", "(", "[", "bs", ",", "1", ",", "4096", "]", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "valid_depth_prob", "=", "F", ".", "interpolate", "(", "depth_mask", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "valid_depth_prob", "=", "valid_depth_prob", ".", "reshape", "(", "bs", ",", "h", "*", "w", ")", "\n", "\n", "valid_depth_prob_sum", "=", "valid_depth_prob", ".", "sum", "(", "-", "1", ")", "\n", "mask", "=", "valid_depth_prob_sum", ">", "0", "\n", "valid_depth_prob", "=", "valid_depth_prob", "[", "mask", "]", "\n", "x", "=", "x", "[", "mask", "]", "\n", "y", "=", "y", "[", "mask", "]", "\n", "z", "=", "z", "[", "mask", "]", "\n", "# bs = mask.sum()", "\n", "\n", "random_sample_ind", "=", "valid_depth_prob", ".", "multinomial", "(", "num_samples", "=", "4096", ",", "replacement", "=", "True", ")", "\n", "random_sample_ind", "=", "random_sample_ind", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "assert", "random_sample_ind", ".", "shape", "[", "-", "1", "]", "==", "4096", "\n", "assert", "torch", ".", "all", "(", "random_sample_ind", ">=", "0", ")", "and", "torch", ".", "all", "(", "random_sample_ind", "<", "h", "*", "w", ")", "\n", "\n", "sample_x", "=", "torch", ".", "gather", "(", "x", ",", "2", ",", "random_sample_ind", ")", "\n", "sample_y", "=", "torch", ".", "gather", "(", "y", ",", "2", ",", "random_sample_ind", ")", "\n", "sample_z", "=", "torch", ".", "gather", "(", "z", ",", "2", ",", "random_sample_ind", ")", "\n", "\n", "original_x", "[", "mask", "]", "=", "x", "\n", "original_y", "[", "mask", "]", "=", "y", "\n", "original_z", "[", "mask", "]", "=", "z", "\n", "\n", "original_sampled_x", "[", "mask", "]", "=", "sample_x", "\n", "original_sampled_y", "[", "mask", "]", "=", "sample_y", "\n", "original_sampled_z", "[", "mask", "]", "=", "sample_z", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "original_sampled_x", ",", "original_sampled_y", ",", "original_sampled_z", "]", ",", "1", ")", ",", "torch", ".", "cat", "(", "[", "original_x", ",", "original_y", ",", "original_z", "]", ",", "1", ")", ",", "random_sample_ind", "\n", "# return torch.cat([sample_x, sample_y, sample_z], 1), torch.cat([x, y, z], 1), random_sample_ind", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMC3HRNetSGCNPN2SingleHead.pts2depth": [[448, 456], ["pointnet2.pointnet2_utils.three_nn", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pointnet2.pointnet2_utils.three_interpolate", "pointnet2.pointnet2_utils.three_interpolate.reshape", "pts.transpose().contiguous", "sampled_pts.transpose().contiguous", "feat.contiguous", "pts.transpose", "sampled_pts.transpose"], "methods", ["None"], ["", "def", "pts2depth", "(", "self", ",", "sampled_pts", ",", "pts", ",", "feat", ",", "h", ",", "w", ")", ":", "\n", "        ", "bs", ",", "fdim", "=", "feat", ".", "shape", "[", "0", "]", ",", "feat", ".", "shape", "[", "1", "]", "\n", "dist", ",", "idx", "=", "pointnet2_utils", ".", "three_nn", "(", "pts", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ",", "sampled_pts", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ")", "\n", "dist_recip", "=", "1.0", "/", "(", "dist", "+", "1e-8", ")", "\n", "norm", "=", "torch", ".", "sum", "(", "dist_recip", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "dist_recip", "/", "norm", "\n", "interpolated_feats", "=", "pointnet2_utils", ".", "three_interpolate", "(", "feat", ".", "contiguous", "(", ")", ",", "idx", ",", "weight", ")", "\n", "return", "interpolated_feats", ".", "reshape", "(", "bs", ",", "fdim", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMC3HRNetSGCNPN2SingleHead.forward": [[457, 515], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "build_backbone.CMC3HRNetSGCNPN2SingleHead.encoder1", "build_backbone.CMC3HRNetSGCNPN2SingleHead.depth2pts", "build_backbone.CMC3HRNetSGCNPN2SingleHead.encoder2", "build_backbone.CMC3HRNetSGCNPN2SingleHead.encoder3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "build_backbone.CMC3HRNetSGCNPN2SingleHead.mean", "build_backbone.CMC3HRNetSGCNPN2SingleHead.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sample_x2_pn.transpose", "range", "build_backbone.CMC3HRNetSGCNPN2SingleHead.head1", "build_backbone.CMC3HRNetSGCNPN2SingleHead.head2", "build_backbone.CMC3HRNetSGCNPN2SingleHead.head3", "torch.cat.append", "torch.cat.append", "torch.cat.append", "range", "build_backbone.CMC3HRNetSGCNPN2SingleHead.merge_all_res", "build_backbone.CMC3HRNetSGCNPN2SingleHead.encoder1_linear", "build_backbone.CMC3HRNetSGCNPN2SingleHead.encoder2_linear", "build_backbone.CMC3HRNetSGCNPN2SingleHead.pts2depth", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMC3HRNetSGCNPN2SingleHead.depth2pts", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.merge_all_res", "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.CMC3HRNetSGCNPN2SingleHead.pts2depth"], ["", "def", "forward", "(", "self", ",", "x", ",", "s", ",", "depth_mask", ",", "grid_xy", ",", "original_h", ",", "original_w", ",", "mean", ",", "mode", "=", "0", ",", "return_fm", "=", "False", ")", ":", "\n", "# mode --", "\n", "# 0: normal encoder,", "\n", "# 1: momentum encoder,", "\n", "# 2: testing mode", "\n", "        ", "x1", ",", "x2", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "in_channel_list", ",", "dim", "=", "1", ")", "\n", "_feat1", "=", "self", ".", "encoder1", "(", "x1", ")", "\n", "\n", "h", ",", "w", "=", "x1", ".", "shape", "[", "-", "2", "]", ",", "x1", ".", "shape", "[", "-", "1", "]", "\n", "sample_x2_pn", ",", "x2_pn", ",", "_", "=", "self", ".", "depth2pts", "(", "x2", ",", "depth_mask", ",", "grid_xy", ",", "original_h", ",", "original_w", ",", "mean", ")", "\n", "_feat2", "=", "self", ".", "encoder2", "(", "sample_x2_pn", ".", "transpose", "(", "1", ",", "2", ")", ")", "# bs x fdim x 4096", "\n", "\n", "# np_pn = sample_x2_pn.transpose(1,2).detach().cpu().numpy()", "\n", "# np.save('sample_pn.pth', np_pn)", "\n", "# exit(0)", "\n", "\n", "_feat3", "=", "self", ".", "encoder3", "(", "s", ")", "\n", "avg_feat1", "=", "[", "]", "\n", "if", "self", ".", "pool_method", "==", "'mean'", ":", "\n", "            ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "avg_feat1", ".", "append", "(", "torch", ".", "flatten", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "(", "_feat1", "[", "i", "]", ")", ",", "1", ")", ")", "\n", "", "", "elif", "self", ".", "pool_method", "==", "'max'", ":", "\n", "            ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "avg_feat1", ".", "append", "(", "torch", ".", "flatten", "(", "nn", ".", "AdaptiveMaxPool2d", "(", "(", "1", ",", "1", ")", ")", "(", "_feat1", "[", "i", "]", ")", ",", "1", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "avg_feat1", "=", "torch", ".", "cat", "(", "avg_feat1", ",", "1", ")", "\n", "avg_feat2", "=", "_feat2", ".", "mean", "(", "-", "1", ")", "\n", "avg_feat3", "=", "_feat3", ".", "mean", "(", "1", ")", "\n", "\n", "if", "mode", "==", "0", "or", "mode", "==", "1", ":", "\n", "            ", "feat1", "=", "self", ".", "head1", "(", "avg_feat1", ")", "\n", "feat2", "=", "self", ".", "head2", "(", "avg_feat2", ")", "\n", "feat3", "=", "self", ".", "head3", "(", "avg_feat3", ")", "\n", "", "else", ":", "\n", "            ", "feat1", "=", "avg_feat1", "\n", "feat2", "=", "avg_feat2", "\n", "feat3", "=", "avg_feat3", "\n", "", "if", "return_fm", ":", "\n", "            ", "if", "self", ".", "linear_feat_map", ":", "\n", "                ", "merge1", "=", "self", ".", "merge_all_res", "(", "_feat1", ")", "\n", "linear_merge1", "=", "self", ".", "encoder1_linear", "(", "merge1", ")", "\n", "\n", "merge2", "=", "_feat2", "\n", "linear_merge2", "=", "self", ".", "encoder2_linear", "(", "_feat2", ")", "\n", "linear_merge2", "=", "self", ".", "pts2depth", "(", "sample_x2_pn", ",", "x2_pn", ",", "linear_merge2", ",", "h", ",", "w", ")", "\n", "linear_merge2", "=", "F", ".", "interpolate", "(", "linear_merge2", ",", "size", "=", "(", "linear_merge1", ".", "shape", "[", "-", "2", "]", ",", "linear_merge1", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "return", "_feat1", ",", "_feat2", ",", "_feat3", ",", "torch", ".", "cat", "(", "(", "feat1", ",", "feat2", ",", "feat3", ")", ",", "dim", "=", "1", ")", ",", "{", "\n", "'merge1'", ":", "merge1", ",", "\n", "'merge2'", ":", "merge2", ",", "\n", "'linear_merge1'", ":", "linear_merge1", ",", "\n", "'linear_merge2'", ":", "linear_merge2", "\n", "}", "\n", "", "else", ":", "\n", "                ", "return", "_feat1", ",", "_feat2", ",", "_feat3", ",", "avg_feat1", ",", "avg_feat2", ",", "avg_feat3", ",", "torch", ".", "cat", "(", "(", "feat1", ",", "feat2", ",", "feat3", ")", ",", "dim", "=", "1", ")", "\n", "", "", "return", "torch", ".", "cat", "(", "(", "feat1", ",", "feat2", ",", "feat3", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_backbone.build_model": [[525, 567], ["print", "opt.arch.startswith", "print", "opt.arch.startswith", "torch.load", "torch.load", "torch.load", "model.encoder1.state_dict", "torch.load.items", "model.encoder2.state_dict.update", "model.encoder1.load_state_dict", "torch.load", "torch.load", "torch.load", "model.encoder2.state_dict", "torch.load.items", "model.encoder2.state_dict.update", "model.encoder2.load_state_dict", "model.encoder2.state_dict.keys", "print", "model.encoder2.state_dict.keys", "print"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update"], ["def", "build_model", "(", "opt", ")", ":", "\n", "# specify modal key", "\n", "    ", "branch", "=", "'Mul'", "if", "opt", ".", "jigsaw", "else", "'Sin'", "\n", "model_key", "=", "opt", ".", "modal", "+", "opt", ".", "arch", "+", "branch", "\n", "\n", "model", "=", "NAME_TO_FUNC", "[", "model_key", "]", "(", "opt", ".", "arch", ",", "opt", ".", "head", ",", "opt", ".", "feat_dim", ",", "opt", ".", "in_channel_list", ",", "opt", ".", "linear_feat_map", ",", "opt", ".", "width", ",", "opt", ".", "pool_method", ",", "opt", ")", "\n", "if", "opt", ".", "IN_Pretrain", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Init Encoder1 from {}\"", ".", "format", "(", "opt", ".", "IN_Pretrain", ")", ")", "\n", "if", "opt", ".", "arch", ".", "startswith", "(", "'HRNet'", ")", ":", "\n", "            ", "pretrained_ckpt", "=", "torch", ".", "load", "(", "opt", ".", "IN_Pretrain", ",", "map_location", "=", "'cpu'", ")", "\n", "model_state_dict", "=", "model", ".", "encoder1", ".", "state_dict", "(", ")", "\n", "update_model_state", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "pretrained_ckpt", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "in", "model_state_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "update_model_state", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\"{} not matched.\"", ".", "format", "(", "k", ")", ")", "\n", "", "", "model_state_dict", ".", "update", "(", "update_model_state", ")", "\n", "model", ".", "encoder1", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "if", "opt", ".", "depth_Pretrain", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Init Encoder2 from {}\"", ".", "format", "(", "opt", ".", "depth_Pretrain", ")", ")", "\n", "if", "opt", ".", "arch", ".", "startswith", "(", "'HRNet'", ")", ":", "\n", "            ", "pretrained_ckpt", "=", "torch", ".", "load", "(", "opt", ".", "depth_Pretrain", ",", "map_location", "=", "'cpu'", ")", "\n", "model_state_dict", "=", "model", ".", "encoder2", ".", "state_dict", "(", ")", "\n", "update_model_state", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "pretrained_ckpt", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "in", "model_state_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "update_model_state", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\"{} not matched.\"", ".", "format", "(", "k", ")", ")", "\n", "", "", "model_state_dict", ".", "update", "(", "update_model_state", ")", "\n", "model", ".", "encoder2", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "if", "opt", ".", "mem", "==", "'moco'", ":", "\n", "        ", "model_ema", "=", "NAME_TO_FUNC", "[", "model_key", "]", "(", "opt", ".", "arch", ",", "opt", ".", "head", ",", "opt", ".", "feat_dim", ")", "\n", "", "else", ":", "\n", "        ", "model_ema", "=", "None", "\n", "\n", "", "return", "model", ",", "model_ema", "\n", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnest.DropBlock2D.__init__": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnest.SplAtConv2d.__init__": [[22, 51], ["torch.nn.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "max", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "RFConv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "resnest.DropBlock2D"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "kernel_size", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "\n", "rectify", "=", "False", ",", "rectify_avg", "=", "False", ",", "norm_layer", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SplAtConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "rectify", "=", "rectify", "and", "(", "padding", "[", "0", "]", ">", "0", "or", "padding", "[", "1", "]", ">", "0", ")", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "inter_channels", "=", "max", "(", "in_channels", "*", "radix", "//", "reduction_factor", ",", "32", ")", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "if", "self", ".", "rectify", ":", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "self", ".", "conv", "=", "RFConv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "average_mode", "=", "rectify_avg", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "Conv2d", "(", "in_channels", ",", "channels", "*", "radix", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", "=", "groups", "*", "radix", ",", "bias", "=", "bias", ",", "**", "kwargs", ")", "\n", "", "self", ".", "use_bn", "=", "norm_layer", "is", "not", "None", "\n", "self", ".", "bn0", "=", "norm_layer", "(", "channels", "*", "radix", ")", "\n", "self", ".", "relu", "=", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc1", "=", "Conv2d", "(", "channels", ",", "inter_channels", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "inter_channels", ")", "\n", "self", ".", "fc2", "=", "Conv2d", "(", "inter_channels", ",", "channels", "*", "radix", ",", "1", ",", "groups", "=", "self", ".", "cardinality", ")", "\n", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnest.SplAtConv2d.forward": [[52, 85], ["resnest.SplAtConv2d.conv", "resnest.SplAtConv2d.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "resnest.SplAtConv2d.fc1", "resnest.SplAtConv2d.relu", "resnest.SplAtConv2d.fc2().view", "sum.contiguous", "resnest.SplAtConv2d.bn0", "resnest.SplAtConv2d.dropblock", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "resnest.SplAtConv2d.bn1", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "sum", "resnest.SplAtConv2d.fc2", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "zip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "x", "=", "self", ".", "dropblock", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "batch", ",", "channel", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "splited", "=", "torch", ".", "split", "(", "x", ",", "channel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "gap", "=", "sum", "(", "splited", ")", "\n", "", "else", ":", "\n", "            ", "gap", "=", "x", "\n", "", "gap", "=", "F", ".", "adaptive_avg_pool2d", "(", "gap", ",", "1", ")", "\n", "gap", "=", "self", ".", "fc1", "(", "gap", ")", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "gap", "=", "self", ".", "bn1", "(", "gap", ")", "\n", "", "gap", "=", "self", ".", "relu", "(", "gap", ")", "\n", "\n", "atten", "=", "self", ".", "fc2", "(", "gap", ")", ".", "view", "(", "(", "batch", ",", "self", ".", "radix", ",", "self", ".", "channels", ")", ")", "\n", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "atten", "=", "F", ".", "softmax", "(", "atten", ",", "dim", "=", "1", ")", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "atten", "=", "F", ".", "sigmoid", "(", "atten", ",", "dim", "=", "1", ")", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "radix", ">", "1", ":", "\n", "            ", "atten", "=", "torch", ".", "split", "(", "atten", ",", "channel", "//", "self", ".", "radix", ",", "dim", "=", "1", ")", "\n", "out", "=", "sum", "(", "[", "att", "*", "split", "for", "(", "att", ",", "split", ")", "in", "zip", "(", "atten", ",", "splited", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "atten", "*", "x", "\n", "", "return", "out", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnest.GlobalAvgPool2d.__init__": [[88, 91], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Global average pooling over the input's spatial dimensions\"\"\"", "\n", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnest.GlobalAvgPool2d.forward": [[92, 94], ["torch.functional.adaptive_avg_pool2d().view", "torch.functional.adaptive_avg_pool2d().view", "torch.functional.adaptive_avg_pool2d().view", "inputs.size", "torch.functional.adaptive_avg_pool2d", "torch.functional.adaptive_avg_pool2d", "torch.functional.adaptive_avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "inputs", ",", "1", ")", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnest.Bottleneck.__init__": [[102, 161], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "resnest.DropBlock2D", "resnest.DropBlock2D", "resnest.SplAtConv2d", "zeros_", "resnest.DropBlock2D", "RFConv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "radix", "=", "1", ",", "cardinality", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "avd", "=", "False", ",", "avd_first", "=", "False", ",", "dilation", "=", "1", ",", "is_first", "=", "False", ",", "\n", "rectified_conv", "=", "False", ",", "rectify_avg", "=", "False", ",", "\n", "norm_layer", "=", "None", ",", "dropblock_prob", "=", "0.0", ",", "last_gamma", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "int", "(", "planes", "*", "(", "bottleneck_width", "/", "64.", ")", ")", "*", "cardinality", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "group_width", ")", "\n", "self", ".", "dropblock_prob", "=", "dropblock_prob", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "avd", "=", "avd", "and", "(", "stride", ">", "1", "or", "is_first", ")", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "\n", "if", "self", ".", "avd", ":", "\n", "            ", "self", ".", "avd_layer", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", ",", "padding", "=", "1", ")", "\n", "stride", "=", "1", "\n", "\n", "", "if", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "self", ".", "dropblock1", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "if", "radix", "==", "1", ":", "\n", "                ", "self", ".", "dropblock2", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "", "self", ".", "dropblock3", "=", "DropBlock2D", "(", "dropblock_prob", ",", "3", ")", "\n", "\n", "", "if", "radix", ">", "1", ":", "\n", "            ", "self", ".", "conv2", "=", "SplAtConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n", "radix", "=", "radix", ",", "rectify", "=", "rectified_conv", ",", "\n", "rectify_avg", "=", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "elif", "rectified_conv", ":", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "self", ".", "conv2", "=", "RFConv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ",", "\n", "average_mode", "=", "rectify_avg", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "group_width", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "group_width", ")", "\n", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "group_width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "4", ")", "\n", "\n", "if", "last_gamma", ":", "\n", "            ", "from", "torch", ".", "nn", ".", "init", "import", "zeros_", "\n", "zeros_", "(", "self", ".", "bn3", ".", "weight", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnest.Bottleneck.forward": [[162, 196], ["resnest.Bottleneck.conv1", "resnest.Bottleneck.bn1", "resnest.Bottleneck.relu", "resnest.Bottleneck.conv2", "resnest.Bottleneck.conv3", "resnest.Bottleneck.bn3", "resnest.Bottleneck.relu", "resnest.Bottleneck.dropblock1", "resnest.Bottleneck.avd_layer", "resnest.Bottleneck.bn2", "resnest.Bottleneck.relu", "resnest.Bottleneck.avd_layer", "resnest.Bottleneck.dropblock3", "resnest.Bottleneck.downsample", "resnest.Bottleneck.dropblock2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "out", "=", "self", ".", "dropblock1", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "avd", "and", "self", ".", "avd_first", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "self", ".", "radix", "==", "1", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "                ", "out", "=", "self", ".", "dropblock2", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "avd", "and", "not", "self", ".", "avd_first", ":", "\n", "            ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "dropblock_prob", ">", "0.0", ":", "\n", "            ", "out", "=", "self", ".", "dropblock3", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnest.ResNet.__init__": [[219, 299], ["int", "torch.Module.__init__", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnest.ResNet._make_layer", "resnest.ResNet._make_layer", "resnest.GlobalAvgPool2d", "resnest.ResNet.modules", "max", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv_layer", "resnest.ResNet._make_layer", "resnest.ResNet._make_layer", "isinstance", "int", "conv_layer", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "conv_layer", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "conv_layer", "resnest.ResNet._make_layer", "resnest.ResNet._make_layer", "resnest.ResNet._make_layer", "resnest.ResNet._make_layer", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "radix", "=", "1", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "num_classes", "=", "1000", ",", "dilated", "=", "False", ",", "dilation", "=", "1", ",", "\n", "deep_stem", "=", "False", ",", "stem_width", "=", "64", ",", "avg_down", "=", "False", ",", "\n", "rectified_conv", "=", "False", ",", "rectify_avg", "=", "False", ",", "\n", "avd", "=", "False", ",", "avd_first", "=", "False", ",", "\n", "final_drop", "=", "0.0", ",", "dropblock_prob", "=", "0", ",", "\n", "last_gamma", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "width", "=", "1", ",", "in_channel", "=", "3", ")", ":", "\n", "        ", "self", ".", "cardinality", "=", "groups", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "# ResNet-D params", "\n", "self", ".", "inplanes", "=", "stem_width", "*", "2", "if", "deep_stem", "else", "max", "(", "int", "(", "64", "*", "width", ")", ",", "64", ")", "\n", "self", ".", "base", "=", "int", "(", "64", "*", "width", ")", "\n", "self", ".", "avg_down", "=", "avg_down", "\n", "self", ".", "last_gamma", "=", "last_gamma", "\n", "# ResNeSt params", "\n", "self", ".", "radix", "=", "radix", "\n", "self", ".", "avd", "=", "avd", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rectified_conv", "=", "rectified_conv", "\n", "self", ".", "rectify_avg", "=", "rectify_avg", "\n", "if", "rectified_conv", ":", "\n", "            ", "from", "rfconv", "import", "RFConv2d", "\n", "conv_layer", "=", "RFConv2d", "\n", "", "else", ":", "\n", "            ", "conv_layer", "=", "nn", ".", "Conv2d", "\n", "", "conv_kwargs", "=", "{", "'average_mode'", ":", "rectify_avg", "}", "if", "rectified_conv", "else", "{", "}", "\n", "if", "deep_stem", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "conv_layer", "(", "in_channel", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_width", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", "norm_layer", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv_layer", "(", "stem_width", ",", "stem_width", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "**", "conv_kwargs", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "conv_layer", "(", "in_channel", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "**", "conv_kwargs", ")", "\n", "", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", ",", "layers", "[", "0", "]", ",", "norm_layer", "=", "norm_layer", ",", "is_first", "=", "False", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "if", "dilated", "or", "dilation", "==", "4", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "4", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "elif", "dilation", "==", "2", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "dropblock_prob", "=", "dropblock_prob", ")", "\n", "", "self", ".", "avgpool", "=", "GlobalAvgPool2d", "(", ")", "\n", "# disable for contrastive learning", "\n", "# self.drop = nn.Dropout(final_drop) if final_drop > 0.0 else None", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "norm_layer", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnest.ResNet._make_layer": [[300, 354], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "down_layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "down_layers.append", "down_layers.append", "norm_layer", "block", "layers.append", "RuntimeError", "block", "down_layers.append", "down_layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "\n", "dropblock_prob", "=", "0.0", ",", "is_first", "=", "True", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "down_layers", "=", "[", "]", "\n", "if", "self", ".", "avg_down", ":", "\n", "                ", "if", "dilation", "==", "1", ":", "\n", "                    ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                    ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "down_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "downsample", "=", "nn", ".", "Sequential", "(", "*", "down_layers", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "dilation", "==", "1", "or", "dilation", "==", "2", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "1", ",", "is_first", "=", "is_first", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "", "elif", "dilation", "==", "4", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", "=", "downsample", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "2", ",", "is_first", "=", "is_first", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"=> unknown dilation size: {}\"", ".", "format", "(", "dilation", ")", ")", "\n", "\n", "", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "radix", "=", "self", ".", "radix", ",", "cardinality", "=", "self", ".", "cardinality", ",", "\n", "bottleneck_width", "=", "self", ".", "bottleneck_width", ",", "\n", "avd", "=", "self", ".", "avd", ",", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "dilation", "=", "dilation", ",", "rectified_conv", "=", "self", ".", "rectified_conv", ",", "\n", "rectify_avg", "=", "self", ".", "rectify_avg", ",", "\n", "norm_layer", "=", "norm_layer", ",", "dropblock_prob", "=", "dropblock_prob", ",", "\n", "last_gamma", "=", "self", ".", "last_gamma", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnest.ResNet.forward": [[355, 374], ["resnest.ResNet.conv1", "resnest.ResNet.bn1", "resnest.ResNet.relu", "resnest.ResNet.maxpool", "resnest.ResNet.layer1", "resnest.ResNet.layer2", "resnest.ResNet.layer3", "resnest.ResNet.layer4", "resnest.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "# disable for contrastive learning", "\n", "# if self.drop:", "\n", "#     x = self.drop(x)", "\n", "# x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnest.resnest50": [[376, 384], ["resnest.ResNet", "NotImplementedError"], "function", ["None"], ["", "", "def", "resnest50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "radix", "=", "2", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "deep_stem", "=", "True", ",", "stem_width", "=", "32", ",", "avg_down", "=", "True", ",", "\n", "avd", "=", "True", ",", "avd_first", "=", "False", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'pretrained model not available'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnest.resnest101": [[386, 394], ["resnest.ResNet", "NotImplementedError"], "function", ["None"], ["", "def", "resnest101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "radix", "=", "2", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "deep_stem", "=", "True", ",", "stem_width", "=", "64", ",", "avg_down", "=", "True", ",", "\n", "avd", "=", "True", ",", "avd_first", "=", "False", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'pretrained model not available'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnest.resnest200": [[396, 404], ["resnest.ResNet", "NotImplementedError"], "function", ["None"], ["", "def", "resnest200", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "24", ",", "36", ",", "3", "]", ",", "\n", "radix", "=", "2", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "deep_stem", "=", "True", ",", "stem_width", "=", "64", ",", "avg_down", "=", "True", ",", "\n", "avd", "=", "True", ",", "avd_first", "=", "False", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'pretrained model not available'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnest.resnest269": [[406, 414], ["resnest.ResNet", "NotImplementedError"], "function", ["None"], ["", "def", "resnest269", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "30", ",", "48", ",", "8", "]", ",", "\n", "radix", "=", "2", ",", "groups", "=", "1", ",", "bottleneck_width", "=", "64", ",", "\n", "deep_stem", "=", "True", ",", "stem_width", "=", "64", ",", "avg_down", "=", "True", ",", "\n", "avd", "=", "True", ",", "avd_first", "=", "False", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'pretrained model not available'", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_linear.build_segmentor": [[4, 16], ["fcn.FCNHead", "sum", "sum"], "function", ["None"], ["def", "build_segmentor", "(", "opt", ")", ":", "\n", "    ", "n_class", "=", "opt", ".", "n_class", "\n", "# channels = [18, 36, 72, 144]", "\n", "channels", "=", "[", "128", "]", "\n", "classifier", "=", "FCNHead", "(", "\n", "sum", "(", "channels", ")", ",", "\n", "sum", "(", "channels", ")", ",", "\n", "n_class", ",", "\n", "num_convs", "=", "1", ",", "\n", "kernel_size", "=", "1", "\n", ")", "\n", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.build_linear.build_linear": [[17, 29], ["arch.endswith", "torch.Linear", "arch.endswith"], "function", ["None"], ["", "def", "build_linear", "(", "opt", ")", ":", "\n", "    ", "n_class", "=", "opt", ".", "n_class", "\n", "arch", "=", "opt", ".", "arch", "\n", "if", "arch", ".", "endswith", "(", "'x4'", ")", ":", "\n", "        ", "n_feat", "=", "2048", "*", "4", "\n", "", "elif", "arch", ".", "endswith", "(", "'x2'", ")", ":", "\n", "        ", "n_feat", "=", "2048", "*", "2", "\n", "", "else", ":", "\n", "        ", "n_feat", "=", "2048", "\n", "\n", "", "classifier", "=", "nn", ".", "Linear", "(", "n_feat", ",", "n_class", ")", "\n", "return", "classifier", "\n", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.fcn.ConvModule.__init__": [[6, 23], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "fcn.ConvModule.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_func", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "'auto'", ")", ":", "\n", "        ", "super", "(", "ConvModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "norm", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "add_module", "(", "'norm_name'", ",", "norm", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", "\n", ")", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.fcn.ConvModule.norm1": [[24, 28], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "\"\"\"nn.Module: normalization layer after the first convolution layer\"\"\"", "\n", "return", "getattr", "(", "self", ",", "'norm_name'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.fcn.ConvModule.forward": [[29, 34], ["fcn.ConvModule.conv", "fcn.ConvModule.norm1", "fcn.ConvModule.act"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.fcn.ConvModule.norm1"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "conv", "(", "x", ")", "\n", "output", "=", "self", ".", "norm1", "(", "output", ")", "\n", "output", "=", "self", ".", "act", "(", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.fcn.FCNHead.__init__": [[36, 104], ["torch.Module.__init__", "convs.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "fcn.ConvModule", "convs.append", "fcn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "num_classes", ",", "norm_func", "=", "nn", ".", "BatchNorm2d", ",", "num_convs", "=", "2", ",", "kernel_size", "=", "3", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "FCNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_convs", "=", "num_convs", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "norm_func", "=", "norm_func", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "conv_padding", "=", "(", "kernel_size", "//", "2", ")", "*", "dilation", "\n", "convs", "=", "[", "]", "\n", "# convs.append(", "\n", "#     nn.Conv2d(", "\n", "#         self.in_channels,", "\n", "#         self.channels,", "\n", "#         self.kernel_size,", "\n", "#         stride=1,", "\n", "#         padding=conv_padding,", "\n", "#         dilation=self.dilation,", "\n", "#         groups=1,", "\n", "#         bias='auto'", "\n", "# ))", "\n", "# convs.append(norm_func(self.channels))", "\n", "# convs.append(nn.ReLU())", "\n", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "norm_func", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "self", ".", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "conv_padding", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "'auto'", "\n", ")", "\n", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_convs", "-", "1", ")", ":", "\n", "# convs.append(", "\n", "#     nn.Conv2d(", "\n", "#         self.channels,", "\n", "#         self.channels,", "\n", "#         self.kernel_size,", "\n", "#         stride=1,", "\n", "#         padding=conv_padding,", "\n", "#         dilation=self.dilation,", "\n", "#         groups=1,", "\n", "#         bias='auto'", "\n", "# ))", "\n", "# convs.append(norm_func(self.channels))", "\n", "# convs.append(nn.ReLU())", "\n", "            ", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "norm_func", ",", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "self", ".", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "conv_padding", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "'auto'", "\n", ")", "\n", ")", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "# self.dropout = nn.Dropout2d(0.1)", "\n", "self", ".", "conv_seg", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.fcn.FCNHead.forward": [[105, 112], ["fcn.FCNHead.convs", "fcn.FCNHead.conv_seg", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "convs", "(", "input", ")", "\n", "# output = self.dropout(output)", "\n", "logits", "=", "self", ".", "conv_seg", "(", "output", ")", "\n", "w", ",", "h", "=", "logits", ".", "shape", "[", "2", "]", "*", "4", ",", "logits", ".", "shape", "[", "3", "]", "*", "4", "\n", "logits_resize", "=", "F", ".", "interpolate", "(", "logits", ",", "size", "=", "(", "w", ",", "h", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "return", "logits_resize", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.BasicBlock.__init__": [[43, 60], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.conv3x3", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.conv3x3"], ["        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.BasicBlock.forward": [[61, 78], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.Bottleneck.__init__": [[89, 105], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.conv1x1", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.conv3x3", "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.conv1x1"], ["\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.Bottleneck.forward": [[106, 127], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.ResNet.__init__": [[131, 184], ["torch.Module.__init__", "max", "int", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "resnet.ResNet.modules", "int", "len", "ValueError", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer"], ["                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n", "", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "\n", "", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.ResNet._make_layer": [[185, 208], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.conv1x1"], ["        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.ResNet.forward": [[209, 235], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "feat_map.append", "resnet.ResNet.layer1", "feat_map.append", "resnet.ResNet.layer2", "feat_map.append", "resnet.ResNet.layer3", "feat_map.append", "resnet.ResNet.layer4", "feat_map.append", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "feat_map.append"], "methods", ["None"], ["\n", "\n", "", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.conv3x3": [[29, 33], ["torch.Conv2d"], "function", ["None"], ["", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.conv1x1": [[35, 38], ["torch.Conv2d"], "function", ["None"], ["self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet._resnet": [[237, 244], ["resnet.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], []], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.resnet18": [[246, 255], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet._resnet"], []], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.resnet34": [[257, 266], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet._resnet"], []], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.resnet50": [[268, 277], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet._resnet"], []], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.resnet101": [[279, 288], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet._resnet"], []], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.resnet152": [[290, 299], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet._resnet"], []], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.resnext50_32x4d": [[301, 312], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet._resnet"], []], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.resnext101_32x4d": [[314, 325], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet._resnet"], []], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.resnext101_32x8d": [[327, 338], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet._resnet"], []], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.resnext101_64x4d": [[340, 351], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet._resnet"], []], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.resnext152_32x4d": [[353, 364], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet._resnet"], []], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.resnext152_32x8d": [[366, 377], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet._resnet"], []], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.resnext152_64x4d": [[379, 390], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet._resnet"], []], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.wide_resnet50_2": [[392, 406], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet._resnet"], []], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet.wide_resnet101_2": [[408, 422], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet._resnet"], []], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.util.GaussianSmoothing.__init__": [[21, 61], ["torch.Module.__init__", "isinstance", "isinstance", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "zip", "kernel.repeat.repeat.view", "kernel.repeat.repeat.repeat", "util.GaussianSmoothing.register_buffer", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "kernel.repeat.repeat.size", "RuntimeError", "math.sqrt", "kernel.repeat.repeat.dim"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["", "def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "self", ".", "transform", "(", "crop", ")", "for", "crop", "in", "imgs", "]", ")", "\n", "\n", "\n", "", "", "class", "JigsawCrop", "(", "object", ")", ":", "\n", "    ", "\"\"\"Jigsaw style crop\"\"\"", "\n", "def", "__init__", "(", "self", ",", "n_grid", "=", "3", ",", "img_size", "=", "255", ",", "crop_size", "=", "64", ")", ":", "\n", "        ", "self", ".", "n_grid", "=", "n_grid", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "grid_size", "=", "int", "(", "img_size", "/", "self", ".", "n_grid", ")", "\n", "self", ".", "side", "=", "self", ".", "grid_size", "-", "self", ".", "crop_size", "\n", "\n", "yy", ",", "xx", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "n_grid", ")", ",", "np", ".", "arange", "(", "n_grid", ")", ")", "\n", "self", ".", "yy", "=", "np", ".", "reshape", "(", "yy", "*", "self", ".", "grid_size", ",", "(", "n_grid", "*", "n_grid", ",", ")", ")", "\n", "self", ".", "xx", "=", "np", ".", "reshape", "(", "xx", "*", "self", ".", "grid_size", ",", "(", "n_grid", "*", "n_grid", ",", ")", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "r_x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "side", "+", "1", ",", "self", ".", "n_grid", "*", "self", ".", "n_grid", ")", "\n", "r_y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "side", "+", "1", ",", "self", ".", "n_grid", "*", "self", ".", "n_grid", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "crops", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_grid", "*", "self", ".", "n_grid", ")", ":", "\n", "            ", "crops", ".", "append", "(", "img", "[", "self", ".", "xx", "[", "i", "]", "+", "r_x", "[", "i", "]", ":", "self", ".", "xx", "[", "i", "]", "+", "r_x", "[", "i", "]", "+", "self", ".", "crop_size", ",", "\n", "self", ".", "yy", "[", "i", "]", "+", "r_y", "[", "i", "]", ":", "self", ".", "yy", "[", "i", "]", "+", "r_y", "[", "i", "]", "+", "self", ".", "crop_size", ",", ":", "]", ")", "\n", "", "crops", "=", "[", "Image", ".", "fromarray", "(", "crop", ")", "for", "crop", "in", "crops", "]", "\n", "return", "crops", "\n", "\n", "\n", "", "", "class", "Rotate", "(", "object", ")", ":", "\n", "    ", "\"\"\"rotation\"\"\"", "\n", "def", "__init__", "(", "self", ",", "angles", "=", "[", "0", ",", "90", ",", "180", ",", "270", "]", ")", ":", "\n", "        ", "self", ".", "angles", "=", "angles", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "angle", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "angles", ")", "\n", "if", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ":", "\n", "            ", "img", "=", "img", ".", "rotate", "(", "angle", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", "\n", "return", "img", "\n", "", "elif", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "angle", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.util.GaussianSmoothing.forward": [[63, 72], ["util.GaussianSmoothing.conv"], "methods", ["None"], ["", "elif", "angle", "==", "90", ":", "\n", "                ", "img", "=", "np", ".", "flipud", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "0", ",", "2", ")", ")", ")", "\n", "", "elif", "angle", "==", "180", ":", "\n", "                ", "img", "=", "np", ".", "fliplr", "(", "np", ".", "flipud", "(", "img", ")", ")", "\n", "", "elif", "angle", "==", "270", ":", "\n", "                ", "img", "=", "np", ".", "transpose", "(", "np", ".", "flipud", "(", "img", ")", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", "=", "img", ".", "rotate", "(", "angle", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.util.Normalize.__init__": [[75, 78], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["            ", "raise", "TypeError", "(", "'not supported type in rotation: '", ",", "type", "(", "img", ")", ")", "\n", "\n", "\n", "", "", "", "class", "RGB2RGB", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.util.Normalize.forward": [[79, 81], ["torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize"], ["    ", "\"\"\"Dummy RGB transfer.\"\"\"", "\n", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "img", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.util.JigsawHead.__init__": [[85, 101], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "util.Normalize", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "NotImplementedError", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "\"\"\"Convert RGB PIL image to ndarray Lab.\"\"\"", "\n", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2lab", "(", "img", ")", "\n", "return", "img", "\n", "\n", "\n", "", "", "class", "RGB2YCbCr", "(", "object", ")", ":", "\n", "    ", "\"\"\"Convert RGB PIL image to ndarray YCbCr.\"\"\"", "\n", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2ycbcr", "(", "img", ")", "\n", "return", "img", "\n", "\n", "\n", "", "", "class", "RGB2YDbDr", "(", "object", ")", ":", "\n", "    ", "\"\"\"Convert RGB PIL image to ndarray YDbDr.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.util.JigsawHead.forward": [[102, 115], ["util.JigsawHead.fc1", "util.JigsawHead.get_shuffle_ids", "int", "util.JigsawHead.view", "util.JigsawHead.fc2", "util.JigsawHead.l2norm"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.util.JigsawHead.get_shuffle_ids"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2ydbdr", "(", "img", ")", "\n", "return", "img", "\n", "\n", "\n", "", "", "class", "RGB2YPbPr", "(", "object", ")", ":", "\n", "    ", "\"\"\"Convert RGB PIL image to ndarray YPbPr.\"\"\"", "\n", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2ypbpr", "(", "img", ")", "\n", "return", "img", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.util.JigsawHead.get_shuffle_ids": [[116, 125], ["int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.div().long", "torch.div().long", "torch.div().long", "torch.div().long", "torch.div().long", "torch.div().long", "torch.div().long", "torch.div().long", "torch.div().long", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "range", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div"], "methods", ["None"], ["", "", "class", "RGB2YIQ", "(", "object", ")", ":", "\n", "    ", "\"\"\"Convert RGB PIL image to ndarray YIQ.\"\"\"", "\n", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2yiq", "(", "img", ")", "\n", "return", "img", "\n", "\n", "\n", "", "", "class", "GaussianBlur", "(", "object", ")", ":", "\n", "    ", "\"\"\"blur a single image on CPU\"\"\"", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.Normalize.__init__": [[27, 30], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "power", "=", "2", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "power", "=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.Normalize.forward": [[31, 35], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "self", ".", "power", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "self", ".", "power", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.BasicBlock.__init__": [[40, 49], ["torch.Module.__init__", "resnet_cmc.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_cmc.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.conv3x3", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.BasicBlock.forward": [[50, 67], ["resnet_cmc.BasicBlock.conv1", "resnet_cmc.BasicBlock.bn1", "resnet_cmc.BasicBlock.relu", "resnet_cmc.BasicBlock.conv2", "resnet_cmc.BasicBlock.bn2", "resnet_cmc.BasicBlock.relu", "resnet_cmc.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.Bottleneck.__init__": [[72, 84], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "groups", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "groups", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.Bottleneck.forward": [[85, 106], ["resnet_cmc.Bottleneck.conv1", "resnet_cmc.Bottleneck.bn1", "resnet_cmc.Bottleneck.relu", "resnet_cmc.Bottleneck.conv2", "resnet_cmc.Bottleneck.bn2", "resnet_cmc.Bottleneck.relu", "resnet_cmc.Bottleneck.conv3", "resnet_cmc.Bottleneck.bn3", "resnet_cmc.Bottleneck.relu", "resnet_cmc.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.ResNet.__init__": [[110, 136], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_cmc.ResNet._make_layer", "resnet_cmc.ResNet._make_layer", "resnet_cmc.ResNet._make_layer", "resnet_cmc.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "resnet_cmc.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "width", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "*", "2", "\n", "self", ".", "conv1_v1", "=", "nn", ".", "Conv2d", "(", "1", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1_v2", "=", "nn", ".", "Conv2d", "(", "2", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "base", "=", "int", "(", "64", "*", "width", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "# self.fc = nn.Linear(self.base * 8 * block.expansion, low_dim)", "\n", "# self.l2norm = Normalize(2)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.ResNet._make_layer": [[137, 153], ["list", "list.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "list.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "groups", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "list", "(", "[", "]", ")", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.ResNet.forward": [[154, 174], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "resnet_cmc.ResNet.conv1_v1", "resnet_cmc.ResNet.conv1_v2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "resnet_cmc.ResNet.bn1", "resnet_cmc.ResNet.relu", "resnet_cmc.ResNet.maxpool", "resnet_cmc.ResNet.layer1", "resnet_cmc.ResNet.layer2", "resnet_cmc.ResNet.layer3", "resnet_cmc.ResNet.layer4", "resnet_cmc.ResNet.avgpool", "x.view.view.view", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "torch", ".", "split", "(", "x", ",", "[", "1", ",", "2", "]", ",", "dim", "=", "1", ")", "\n", "x1", "=", "self", ".", "conv1_v1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "conv1_v2", "(", "x2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "feat_dim", "=", "x", ".", "shape", "[", "1", "]", "\n", "x1", ",", "x2", "=", "torch", ".", "split", "(", "x", ",", "[", "feat_dim", "//", "2", ",", "feat_dim", "//", "2", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "groups", "=", "2", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.resnet18": [[176, 185], ["resnet_cmc.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.resnet34": [[187, 196], ["resnet_cmc.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.resnet50": [[198, 207], ["resnet_cmc.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.resnet101": [[209, 218], ["resnet_cmc.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.networks.resnet_cmc.resnet152": [[220, 229], ["resnet_cmc.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_non_local._NonLocalBlock.__init__": [[8, 78], ["torch.nn.Module.__init__", "conv_nd", "conv_nd", "conv_nd", "torch.nn.Sequential", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Sequential", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "conv_nd", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Sequential", "torch.nn.Sequential", "conv_nd", "bn", "max_pool", "max_pool", "Exception"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "dimension", "=", "3", ",", "sub_sample", "=", "1", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "_NonLocalBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "dimension", "in", "[", "1", ",", "2", ",", "3", "]", "\n", "\n", "self", ".", "dimension", "=", "dimension", "\n", "self", ".", "sub_sample", "=", "sub_sample", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inter_channels", "=", "inter_channels", "\n", "\n", "if", "self", ".", "inter_channels", "is", "None", ":", "\n", "            ", "self", ".", "inter_channels", "=", "in_channels", "//", "2", "\n", "\n", "", "assert", "self", ".", "inter_channels", ">", "0", "\n", "\n", "if", "dimension", "==", "3", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv3d", "\n", "max_pool", "=", "nn", ".", "MaxPool3d", "\n", "bn", "=", "nn", ".", "BatchNorm3d", "\n", "", "elif", "dimension", "==", "2", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv2d", "\n", "max_pool", "=", "nn", ".", "MaxPool2d", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "\n", "", "elif", "dimension", "==", "1", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv1d", "\n", "max_pool", "=", "nn", ".", "MaxPool1d", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Error feature dimension.'", ")", "\n", "\n", "", "self", ".", "g", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "theta", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "phi", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "concat_project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inter_channels", "*", "2", ",", "1", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "concat_project", "[", "0", "]", ".", "weight", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "g", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "g", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "theta", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "theta", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "phi", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "phi", ".", "bias", ",", "0", ")", "\n", "\n", "if", "bn_layer", ":", "\n", "            ", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "bn", "(", "self", ".", "in_channels", ")", "\n", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "W", "[", "0", "]", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "0", "]", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "W", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "bias", ",", "0", ")", "\n", "\n", "", "if", "sub_sample", ">", "1", ":", "\n", "            ", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "self", ".", "g", ",", "max_pool", "(", "kernel_size", "=", "sub_sample", ")", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Sequential", "(", "self", ".", "phi", ",", "max_pool", "(", "kernel_size", "=", "sub_sample", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_non_local._NonLocalBlock.forward": [[79, 110], ["x.size", "graph_non_local._NonLocalBlock.g().view", "g_x.permute.permute.permute", "graph_non_local._NonLocalBlock.theta().view", "graph_non_local._NonLocalBlock.phi().view", "theta_x.expand.expand.size", "phi_x.expand.expand.size", "theta_x.expand.expand.expand", "phi_x.expand.expand.expand", "torch.cat", "graph_non_local._NonLocalBlock.concat_project", "f.view.view.size", "f.view.view.view", "f.view.view.size", "torch.matmul", "y.view.view.permute().contiguous", "y.view.view.view", "graph_non_local._NonLocalBlock.W", "graph_non_local._NonLocalBlock.g", "graph_non_local._NonLocalBlock.theta", "graph_non_local._NonLocalBlock.phi", "y.view.view.permute", "x.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "# x: (b, c, t, h, w)", "\n", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# (b, c, N, 1)", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ",", "1", ")", "\n", "# (b, c, 1, N)", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "1", ",", "-", "1", ")", "\n", "\n", "h", "=", "theta_x", ".", "size", "(", "2", ")", "\n", "w", "=", "phi_x", ".", "size", "(", "3", ")", "\n", "theta_x", "=", "theta_x", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "w", ")", "\n", "phi_x", "=", "phi_x", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "h", ",", "-", "1", ")", "\n", "\n", "concat_feature", "=", "torch", ".", "cat", "(", "[", "theta_x", ",", "phi_x", "]", ",", "dim", "=", "1", ")", "\n", "f", "=", "self", ".", "concat_project", "(", "concat_feature", ")", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "f", ".", "size", "(", ")", "\n", "f", "=", "f", ".", "view", "(", "b", ",", "h", ",", "w", ")", "\n", "\n", "N", "=", "f", ".", "size", "(", "-", "1", ")", "\n", "f_div_C", "=", "f", "/", "N", "\n", "\n", "y", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "g_x", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "W_y", "=", "self", ".", "W", "(", "y", ")", "\n", "z", "=", "W_y", "+", "x", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_non_local.GraphNonLocal.__init__": [[113, 116], ["graph_non_local._NonLocalBlock.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "1", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphNonLocal", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "inter_channels", "=", "inter_channels", ",", "dimension", "=", "1", ",", "\n", "sub_sample", "=", "sub_sample", ",", "bn_layer", "=", "bn_layer", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.skeleton_meta.mpii_skeleton.parents": [[6, 8], ["None"], "methods", ["None"], ["def", "parents", "(", ")", ":", "\n", "        ", "return", "mpii_skeleton", ".", "parents_data", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.skeleton_meta.mpii_skeleton.num_joints": [[9, 11], ["len"], "methods", ["None"], ["", "def", "num_joints", "(", ")", ":", "\n", "        ", "return", "len", "(", "mpii_skeleton", ".", "parents_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.skeleton_meta.coco_reduce_skeleton.parents": [[19, 21], ["None"], "methods", ["None"], ["def", "parents", "(", ")", ":", "\n", "        ", "return", "coco_reduce_skeleton", ".", "parents_data", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.skeleton_meta.coco_reduce_skeleton.num_joints": [[22, 24], ["len"], "methods", ["None"], ["", "def", "num_joints", "(", ")", ":", "\n", "        ", "return", "len", "(", "coco_reduce_skeleton", ".", "parents_data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize": [[8, 16], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["def", "normalize", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.sparse_mx_to_torch_sparse_tensor": [[18, 25], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.adj_mx_from_edges": [[27, 40], ["numpy.array", "scipy.coo_matrix", "graph_utils.normalize", "numpy.ones", "torch.tensor.multiply", "graph_utils.sparse_mx_to_torch_sparse_tensor", "torch.tensor", "torch.tensor.T.multiply", "scipy.eye", "torch.tensor.todense"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.sparse_mx_to_torch_sparse_tensor"], ["", "def", "adj_mx_from_edges", "(", "num_pts", ",", "edges", ",", "sparse", "=", "True", ")", ":", "\n", "    ", "edges", "=", "np", ".", "array", "(", "edges", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "data", ",", "i", ",", "j", "=", "np", ".", "ones", "(", "edges", ".", "shape", "[", "0", "]", ")", ",", "edges", "[", ":", ",", "0", "]", ",", "edges", "[", ":", ",", "1", "]", "\n", "adj_mx", "=", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "i", ",", "j", ")", ")", ",", "shape", "=", "(", "num_pts", ",", "num_pts", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# build symmetric adjacency matrix", "\n", "adj_mx", "=", "adj_mx", "+", "adj_mx", ".", "T", ".", "multiply", "(", "adj_mx", ".", "T", ">", "adj_mx", ")", "-", "adj_mx", ".", "multiply", "(", "adj_mx", ".", "T", ">", "adj_mx", ")", "\n", "adj_mx", "=", "normalize", "(", "adj_mx", "+", "sp", ".", "eye", "(", "adj_mx", ".", "shape", "[", "0", "]", ")", ")", "\n", "if", "sparse", ":", "\n", "        ", "adj_mx", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj_mx", ")", "\n", "", "else", ":", "\n", "        ", "adj_mx", "=", "torch", ".", "tensor", "(", "adj_mx", ".", "todense", "(", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "", "return", "adj_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.adj_mx_from_skeleton": [[42, 46], ["skeleton.num_joints", "list", "graph_utils.adj_mx_from_edges", "filter", "zip", "list", "skeleton.parents", "range"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.skeleton_meta.coco_reduce_skeleton.num_joints", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.adj_mx_from_edges", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.skeleton_meta.coco_reduce_skeleton.parents"], ["", "def", "adj_mx_from_skeleton", "(", "skeleton", ")", ":", "\n", "    ", "num_joints", "=", "skeleton", ".", "num_joints", "(", ")", "\n", "edges", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "1", "]", ">=", "0", ",", "zip", "(", "list", "(", "range", "(", "0", ",", "num_joints", ")", ")", ",", "skeleton", ".", "parents", "(", ")", ")", ")", ")", "\n", "return", "adj_mx_from_edges", "(", "num_joints", ",", "edges", ",", "sparse", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.sem_graph_conv.SemGraphConv.__init__": [[14, 33], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "sem_graph_conv.SemGraphConv.bias.data.uniform_", "sem_graph_conv.SemGraphConv.register_parameter", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "math.sqrt", "sem_graph_conv.SemGraphConv.m.nonzero", "sem_graph_conv.SemGraphConv.W.size"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "adj", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "SemGraphConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "size", "=", "(", "2", ",", "in_features", ",", "out_features", ")", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "\n", "self", ".", "adj", "=", "adj", "\n", "self", ".", "m", "=", "(", "self", ".", "adj", ">", "0", ")", "\n", "self", ".", "e", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "len", "(", "self", ".", "m", ".", "nonzero", "(", ")", ")", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "e", ".", "data", ",", "1", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_features", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "W", ".", "size", "(", "2", ")", ")", "\n", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.sem_graph_conv.SemGraphConv.forward": [[34, 49], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "sem_graph_conv.SemGraphConv.bias.view", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.softmax.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h0", "=", "torch", ".", "matmul", "(", "input", ",", "self", ".", "W", "[", "0", "]", ")", "\n", "h1", "=", "torch", ".", "matmul", "(", "input", ",", "self", ".", "W", "[", "1", "]", ")", "\n", "\n", "adj", "=", "-", "9e15", "*", "torch", ".", "ones_like", "(", "self", ".", "adj", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "adj", "[", "self", ".", "m", "]", "=", "self", ".", "e", "\n", "adj", "=", "F", ".", "softmax", "(", "adj", ",", "dim", "=", "1", ")", "\n", "\n", "M", "=", "torch", ".", "eye", "(", "adj", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "adj", "*", "M", ",", "h0", ")", "+", "torch", ".", "matmul", "(", "adj", "*", "(", "1", "-", "M", ")", ",", "h1", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.sem_graph_conv.SemGraphConv.__repr__": [[50, 52], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.sem_gcn._GraphConv.__init__": [[9, 20], ["torch.Module.__init__", "sem_graph_conv.SemGraphConv", "torch.BatchNorm1d", "torch.ReLU", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "adj", ",", "input_dim", ",", "output_dim", ",", "p_dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "_GraphConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gconv", "=", "SemGraphConv", "(", "input_dim", ",", "output_dim", ",", "adj", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "output_dim", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "if", "p_dropout", "is", "not", "None", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p_dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.sem_gcn._GraphConv.forward": [[21, 29], ["sem_gcn._GraphConv.gconv().transpose", "sem_gcn._GraphConv.bn().transpose", "sem_gcn._GraphConv.relu", "sem_gcn._GraphConv.dropout", "sem_gcn._GraphConv.gconv", "sem_gcn._GraphConv.bn", "sem_gcn._GraphConv.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "gconv", "(", "x", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "self", ".", "relu", "(", "x", ")", ")", "\n", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.sem_gcn._ResGraphConv.__init__": [[32, 37], ["torch.Module.__init__", "sem_gcn._GraphConv", "sem_gcn._GraphConv"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "adj", ",", "input_dim", ",", "output_dim", ",", "hid_dim", ",", "p_dropout", ")", ":", "\n", "        ", "super", "(", "_ResGraphConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gconv1", "=", "_GraphConv", "(", "adj", ",", "input_dim", ",", "hid_dim", ",", "p_dropout", ")", "\n", "self", ".", "gconv2", "=", "_GraphConv", "(", "adj", ",", "hid_dim", ",", "output_dim", ",", "p_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.sem_gcn._ResGraphConv.forward": [[38, 43], ["sem_gcn._ResGraphConv.gconv1", "sem_gcn._ResGraphConv.gconv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "gconv1", "(", "x", ")", "\n", "out", "=", "self", ".", "gconv2", "(", "out", ")", "\n", "return", "residual", "+", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.sem_gcn._GraphNonLocal.__init__": [[46, 52], ["torch.Module.__init__", "graph_non_local.GraphNonLocal"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hid_dim", ",", "grouped_order", ",", "restored_order", ",", "group_size", ")", ":", "\n", "        ", "super", "(", "_GraphNonLocal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_nonlocal", "=", "GraphNonLocal", "(", "hid_dim", ",", "sub_sample", "=", "group_size", ")", "\n", "self", ".", "grouped_order", "=", "grouped_order", "\n", "self", ".", "restored_order", "=", "restored_order", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.sem_gcn._GraphNonLocal.forward": [[53, 58], ["sem_gcn._GraphNonLocal._nonlocal().transpose", "sem_gcn._GraphNonLocal._nonlocal", "sem_gcn._GraphNonLocal.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "[", ":", ",", "self", ".", "grouped_order", ",", ":", "]", "\n", "out", "=", "self", ".", "_nonlocal", "(", "out", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "out", "=", "out", "[", ":", ",", "self", ".", "restored_order", ",", ":", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.sem_gcn.SemGCN.__init__": [[61, 90], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "sem_graph_conv.SemGraphConv", "sem_gcn._GraphConv", "range", "len", "list", "range", "_gconv_input.append", "range", "_gconv_layers.append", "reduce", "len", "len", "range", "sem_gcn._GraphNonLocal", "_gconv_layers.append", "_gconv_layers.append", "sem_gcn._ResGraphConv", "len", "sem_gcn._ResGraphConv", "sem_gcn._GraphNonLocal"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "adj", ",", "hid_dim", ",", "coords_dim", "=", "(", "2", ",", "3", ")", ",", "num_layers", "=", "4", ",", "nodes_group", "=", "None", ",", "p_dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "SemGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "_gconv_input", "=", "[", "_GraphConv", "(", "adj", ",", "coords_dim", "[", "0", "]", ",", "hid_dim", ",", "p_dropout", "=", "p_dropout", ")", "]", "\n", "_gconv_layers", "=", "[", "]", "\n", "\n", "if", "nodes_group", "is", "None", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                ", "_gconv_layers", ".", "append", "(", "_ResGraphConv", "(", "adj", ",", "hid_dim", ",", "hid_dim", ",", "hid_dim", ",", "p_dropout", "=", "p_dropout", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "group_size", "=", "len", "(", "nodes_group", "[", "0", "]", ")", "\n", "assert", "group_size", ">", "1", "\n", "\n", "grouped_order", "=", "list", "(", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "nodes_group", ")", ")", "\n", "restored_order", "=", "[", "0", "]", "*", "len", "(", "grouped_order", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "restored_order", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "grouped_order", ")", ")", ":", "\n", "                    ", "if", "grouped_order", "[", "j", "]", "==", "i", ":", "\n", "                        ", "restored_order", "[", "i", "]", "=", "j", "\n", "break", "\n", "\n", "", "", "", "_gconv_input", ".", "append", "(", "_GraphNonLocal", "(", "hid_dim", ",", "grouped_order", ",", "restored_order", ",", "group_size", ")", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                ", "_gconv_layers", ".", "append", "(", "_ResGraphConv", "(", "adj", ",", "hid_dim", ",", "hid_dim", ",", "hid_dim", ",", "p_dropout", "=", "p_dropout", ")", ")", "\n", "_gconv_layers", ".", "append", "(", "_GraphNonLocal", "(", "hid_dim", ",", "grouped_order", ",", "restored_order", ",", "group_size", ")", ")", "\n", "\n", "", "", "self", ".", "gconv_input", "=", "nn", ".", "Sequential", "(", "*", "_gconv_input", ")", "\n", "self", ".", "gconv_layers", "=", "nn", ".", "Sequential", "(", "*", "_gconv_layers", ")", "\n", "self", ".", "gconv_output", "=", "SemGraphConv", "(", "hid_dim", ",", "coords_dim", "[", "1", "]", ",", "adj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.sem_gcn.SemGCN.forward": [[91, 96], ["sem_gcn.SemGCN.gconv_input", "sem_gcn.SemGCN.gconv_layers", "sem_gcn.SemGCN.gconv_output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "gconv_input", "(", "x", ")", "\n", "out", "=", "self", ".", "gconv_layers", "(", "out", ")", "\n", "out", "=", "self", ".", "gconv_output", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.create_SGCN.create_sgcn": [[6, 15], ["sem_gcn.SemGCN", "graph_utils.adj_mx_from_skeleton", "graph_utils.adj_mx_from_skeleton"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.adj_mx_from_skeleton", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.adj_mx_from_skeleton"], ["def", "create_sgcn", "(", "name", ",", "hidden_dim", ",", "num_layers", ")", ":", "\n", "    ", "if", "name", "==", "'mpii'", ":", "\n", "        ", "adj", "=", "adj_mx_from_skeleton", "(", "mpii_skeleton", ")", "\n", "", "elif", "name", "==", "'coco_reduce'", ":", "\n", "        ", "adj", "=", "adj_mx_from_skeleton", "(", "coco_reduce_skeleton", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "model", "=", "SemGCN", "(", "adj", ",", "hidden_dim", ",", "coords_dim", "=", "(", "2", ",", "hidden_dim", ")", ",", "num_layers", "=", "num_layers", ",", "p_dropout", "=", "0", ",", "nodes_group", "=", "None", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.create_SGCN.create_gcn_mapper": [[16, 25], ["sem_graph_conv.SemGraphConv", "graph_utils.adj_mx_from_skeleton", "graph_utils.adj_mx_from_skeleton"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.adj_mx_from_skeleton", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.adj_mx_from_skeleton"], ["", "def", "create_gcn_mapper", "(", "name", ",", "input_dim", ",", "output_dim", ")", ":", "\n", "    ", "if", "name", "==", "'mpii'", ":", "\n", "        ", "adj", "=", "adj_mx_from_skeleton", "(", "mpii_skeleton", ")", "\n", "", "elif", "name", "==", "'coco_reduce'", ":", "\n", "        ", "adj", "=", "adj_mx_from_skeleton", "(", "coco_reduce_skeleton", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "mapper", "=", "SemGraphConv", "(", "input_dim", ",", "output_dim", ",", "adj", ")", "\n", "return", "mapper", "\n", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_modules._PointnetSAModuleBase.__init__": [[12, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "None", "\n", "self", ".", "groupers", "=", "None", "\n", "self", ".", "mlps", "=", "None", "\n", "self", ".", "pool_method", "=", "'max_pool'", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_modules._PointnetSAModuleBase.forward": [[19, 56], ["xyz.transpose().contiguous", "range", "len", "torch.avg_pool2d.squeeze", "new_features_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xyz.transpose", "pointnet2_utils.gather_operation().transpose().contiguous", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pointnet2_utils.gather_operation().transpose", "torch.avg_pool2d.size", "pointnet2_utils.gather_operation", "torch.avg_pool2d.size", "pointnet2_utils.furthest_point_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ",", "new_xyz", "=", "None", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) tensor of the xyz coordinates of the features\n        :param features: (B, N, C) tensor of the descriptors of the the features\n        :param new_xyz:\n        :return:\n            new_xyz: (B, npoint, 3) tensor of the new features' xyz\n            new_features: (B, npoint, \\sum_k(mlps[k][-1])) tensor of the new_features descriptors\n        \"\"\"", "\n", "new_features_list", "=", "[", "]", "\n", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "new_xyz", "is", "None", ":", "\n", "            ", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "\n", "xyz_flipped", ",", "\n", "pointnet2_utils", ".", "furthest_point_sample", "(", "xyz", ",", "self", ".", "npoint", ")", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "if", "self", ".", "npoint", "is", "not", "None", "else", "None", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "groupers", "[", "i", "]", "(", "xyz", ",", "new_xyz", ",", "features", ")", "# (B, C, npoint, nsample)", "\n", "\n", "new_features", "=", "self", ".", "mlps", "[", "i", "]", "(", "new_features", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "if", "self", ".", "pool_method", "==", "'max_pool'", ":", "\n", "                ", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "elif", "self", ".", "pool_method", "==", "'avg_pool'", ":", "\n", "                ", "new_features", "=", "F", ".", "avg_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "new_xyz", ",", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_modules.PointnetSAModuleMSG.__init__": [[61, 93], ["pointnet2_modules._PointnetSAModuleBase.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "len", "len", "len", "pointnet2_modules.PointnetSAModuleMSG.groupers.append", "pointnet2_modules.PointnetSAModuleMSG.mlps.append", "pytorch_utils.SharedMLP", "pointnet2_utils.QueryAndGroup", "pointnet2_utils.GroupAll"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "npoint", ":", "int", ",", "radii", ":", "List", "[", "float", "]", ",", "nsamples", ":", "List", "[", "int", "]", ",", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "pool_method", "=", "'max_pool'", ",", "instance_norm", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param npoint: int\n        :param radii: list of float, list of radii to group with\n        :param nsamples: list of int, number of samples in each ball query\n        :param mlps: list of list of int, spec of the pointnet before the global pooling for each scale\n        :param bn: whether to use batchnorm\n        :param use_xyz:\n        :param pool_method: max_pool / avg_pool\n        :param instance_norm: whether to use instance_norm\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "radii", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "mlps", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "radius", "=", "radii", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "\n", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "use_xyz", "=", "use_xyz", ")", "\n", "if", "npoint", "is", "not", "None", "else", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ")", "\n", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "if", "use_xyz", ":", "\n", "                ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "\n", "", "self", ".", "mlps", ".", "append", "(", "pt_utils", ".", "SharedMLP", "(", "mlp_spec", ",", "bn", "=", "bn", ",", "instance_norm", "=", "instance_norm", ")", ")", "\n", "", "self", ".", "pool_method", "=", "pool_method", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_modules.PointnetSAModule.__init__": [[98, 113], ["pointnet2_modules.PointnetSAModuleMSG.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "mlp", ":", "List", "[", "int", "]", ",", "npoint", ":", "int", "=", "None", ",", "radius", ":", "float", "=", "None", ",", "nsample", ":", "int", "=", "None", ",", "\n", "bn", ":", "bool", "=", "True", ",", "use_xyz", ":", "bool", "=", "True", ",", "pool_method", "=", "'max_pool'", ",", "instance_norm", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param mlp: list of int, spec of the pointnet before the global max_pool\n        :param npoint: int, number of features\n        :param radius: float, radius of ball\n        :param nsample: int, number of samples in the ball query\n        :param bn: whether to use batchnorm\n        :param use_xyz:\n        :param pool_method: max_pool / avg_pool\n        :param instance_norm: whether to use instance_norm\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "mlps", "=", "[", "mlp", "]", ",", "npoint", "=", "npoint", ",", "radii", "=", "[", "radius", "]", ",", "nsamples", "=", "[", "nsample", "]", ",", "bn", "=", "bn", ",", "use_xyz", "=", "use_xyz", ",", "\n", "pool_method", "=", "pool_method", ",", "instance_norm", "=", "instance_norm", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_modules.PointnetFPModule.__init__": [[119, 126], ["torch.Module.__init__", "pytorch_utils.SharedMLP"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "mlp", ":", "List", "[", "int", "]", ",", "bn", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param mlp: list of int\n        :param bn: whether to use batchnorm\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp", "=", "pt_utils", ".", "SharedMLP", "(", "mlp", ",", "bn", "=", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_modules.PointnetFPModule.forward": [[127, 157], ["torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "pointnet2_modules.PointnetFPModule.mlp", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "pointnet2_utils.three_nn", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pointnet2_utils.three_interpolate", "known_feats.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unknown.size", "known_feats.size"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ",", "unknow_feats", ":", "torch", ".", "Tensor", ",", "known_feats", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param unknown: (B, n, 3) tensor of the xyz positions of the unknown features\n        :param known: (B, m, 3) tensor of the xyz positions of the known features\n        :param unknow_feats: (B, C1, n) tensor of the features to be propigated to\n        :param known_feats: (B, C2, m) tensor of features to be propigated\n        :return:\n            new_features: (B, mlp[-1], n) tensor of the features of the unknown features\n        \"\"\"", "\n", "if", "known", "is", "not", "None", ":", "\n", "            ", "dist", ",", "idx", "=", "pointnet2_utils", ".", "three_nn", "(", "unknown", ",", "known", ")", "\n", "dist_recip", "=", "1.0", "/", "(", "dist", "+", "1e-8", ")", "\n", "norm", "=", "torch", ".", "sum", "(", "dist_recip", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "dist_recip", "/", "norm", "\n", "\n", "interpolated_feats", "=", "pointnet2_utils", ".", "three_interpolate", "(", "known_feats", ",", "idx", ",", "weight", ")", "\n", "", "else", ":", "\n", "            ", "interpolated_feats", "=", "known_feats", ".", "expand", "(", "*", "known_feats", ".", "size", "(", ")", "[", "0", ":", "2", "]", ",", "unknown", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "if", "unknow_feats", "is", "not", "None", ":", "\n", "            ", "new_features", "=", "torch", ".", "cat", "(", "[", "interpolated_feats", ",", "unknow_feats", "]", ",", "dim", "=", "1", ")", "# (B, C2 + C1, n)", "\n", "", "else", ":", "\n", "            ", "new_features", "=", "interpolated_feats", "\n", "\n", "", "new_features", "=", "new_features", ".", "unsqueeze", "(", "-", "1", ")", "\n", "new_features", "=", "self", ".", "mlp", "(", "new_features", ")", "\n", "\n", "return", "new_features", ".", "squeeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.FurthestPointSampling.forward": [[11, 30], ["xyz.is_contiguous", "xyz.size", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "pointnet2_cuda.furthest_point_sampling_wrapper", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz", ":", "torch", ".", "Tensor", ",", "npoint", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Uses iterative furthest point sampling to select a set of npoint features that have the largest\n        minimum distance\n        :param ctx:\n        :param xyz: (B, N, 3) where N > npoint\n        :param npoint: int, number of features in the sampled set\n        :return:\n             output: (B, npoint) tensor containing the set\n        \"\"\"", "\n", "assert", "xyz", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "xyz", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "npoint", ")", "\n", "temp", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "N", ")", ".", "fill_", "(", "1e10", ")", "\n", "\n", "pointnet2", ".", "furthest_point_sampling_wrapper", "(", "B", ",", "N", ",", "npoint", ",", "xyz", ",", "temp", ",", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.FurthestPointSampling.backward": [[31, 34], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "xyz", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.GatherOperation.forward": [[41, 61], ["features.is_contiguous", "idx.is_contiguous", "idx.size", "features.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "pointnet2_cuda.gather_points_wrapper"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param features: (B, C, N)\n        :param idx: (B, npoint) index tensor of the features to gather\n        :return:\n            output: (B, C, npoint)\n        \"\"\"", "\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "npoint", "=", "idx", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "npoint", ")", "\n", "\n", "pointnet2", ".", "gather_points_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "features", ",", "idx", ",", "output", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "C", ",", "N", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.GatherOperation.backward": [[62, 71], ["idx.size", "torch.autograd.Variable", "torch.autograd.Variable", "grad_out.data.contiguous", "pointnet2_cuda.gather_points_grad_wrapper", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "        ", "idx", ",", "C", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "B", ",", "npoint", "=", "idx", ".", "size", "(", ")", "\n", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "N", ")", ".", "zero_", "(", ")", ")", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "pointnet2", ".", "gather_points_grad_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "grad_out_data", ",", "idx", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.ThreeNN.forward": [[78, 99], ["unknown.is_contiguous", "known.is_contiguous", "unknown.size", "known.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "pointnet2_cuda.three_nn_wrapper", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Find the three nearest neighbors of unknown in known\n        :param ctx:\n        :param unknown: (B, N, 3)\n        :param known: (B, M, 3)\n        :return:\n            dist: (B, N, 3) l2 distance to the three nearest neighbors\n            idx: (B, N, 3) index of 3 nearest neighbors\n        \"\"\"", "\n", "assert", "unknown", ".", "is_contiguous", "(", ")", "\n", "assert", "known", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "unknown", ".", "size", "(", ")", "\n", "m", "=", "known", ".", "size", "(", "1", ")", "\n", "dist2", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "N", ",", "3", ")", "\n", "idx", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "N", ",", "3", ")", "\n", "\n", "pointnet2", ".", "three_nn_wrapper", "(", "B", ",", "N", ",", "m", ",", "unknown", ",", "known", ",", "dist2", ",", "idx", ")", "\n", "return", "torch", ".", "sqrt", "(", "dist2", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.ThreeNN.backward": [[100, 103], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ",", "b", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.ThreeInterpolate.forward": [[110, 132], ["features.is_contiguous", "idx.is_contiguous", "weight.is_contiguous", "features.size", "idx.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "pointnet2_cuda.three_interpolate_wrapper"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ",", "weight", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Performs weight linear interpolation on 3 features\n        :param ctx:\n        :param features: (B, C, M) Features descriptors to be interpolated from\n        :param idx: (B, n, 3) three nearest neighbors of the target features in features\n        :param weight: (B, n, 3) weights\n        :return:\n            output: (B, C, N) tensor of the interpolated features\n        \"\"\"", "\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "assert", "weight", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "c", ",", "m", "=", "features", ".", "size", "(", ")", "\n", "n", "=", "idx", ".", "size", "(", "1", ")", "\n", "ctx", ".", "three_interpolate_for_backward", "=", "(", "idx", ",", "weight", ",", "m", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "c", ",", "n", ")", "\n", "\n", "pointnet2", ".", "three_interpolate_wrapper", "(", "B", ",", "c", ",", "m", ",", "n", ",", "features", ",", "idx", ",", "weight", ",", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.ThreeInterpolate.backward": [[133, 151], ["grad_out.size", "torch.autograd.Variable", "torch.autograd.Variable", "grad_out.data.contiguous", "pointnet2_cuda.three_interpolate_grad_wrapper", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param grad_out: (B, C, N) tensor with gradients of outputs\n        :return:\n            grad_features: (B, C, M) tensor with gradients of features\n            None:\n            None:\n        \"\"\"", "\n", "idx", ",", "weight", ",", "m", "=", "ctx", ".", "three_interpolate_for_backward", "\n", "B", ",", "c", ",", "n", "=", "grad_out", ".", "size", "(", ")", "\n", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "c", ",", "m", ")", ".", "zero_", "(", ")", ")", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "\n", "pointnet2", ".", "three_interpolate_grad_wrapper", "(", "B", ",", "c", ",", "n", ",", "m", ",", "grad_out_data", ",", "idx", ",", "weight", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.GroupingOperation.forward": [[158, 178], ["features.is_contiguous", "idx.is_contiguous", "idx.size", "features.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "pointnet2_cuda.group_points_wrapper"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param features: (B, C, N) tensor of features to group\n        :param idx: (B, npoint, nsample) tensor containing the indicies of features to group with\n        :return:\n            output: (B, C, npoint, nsample) tensor\n        \"\"\"", "\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "nfeatures", ",", "nsample", "=", "idx", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "nfeatures", ",", "nsample", ")", "\n", "\n", "pointnet2", ".", "group_points_wrapper", "(", "B", ",", "C", ",", "N", ",", "nfeatures", ",", "nsample", ",", "features", ",", "idx", ",", "output", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "N", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.GroupingOperation.backward": [[179, 195], ["grad_out.size", "torch.autograd.Variable", "torch.autograd.Variable", "grad_out.data.contiguous", "pointnet2_cuda.group_points_grad_wrapper", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param grad_out: (B, C, npoint, nsample) tensor of the gradients of the output from forward\n        :return:\n            grad_features: (B, C, N) gradient of the features\n        \"\"\"", "\n", "idx", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "\n", "B", ",", "C", ",", "npoint", ",", "nsample", "=", "grad_out", ".", "size", "(", ")", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "B", ",", "C", ",", "N", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "pointnet2", ".", "group_points_grad_wrapper", "(", "B", ",", "C", ",", "N", ",", "npoint", ",", "nsample", ",", "grad_out_data", ",", "idx", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.forward": [[202, 222], ["new_xyz.is_contiguous", "xyz.is_contiguous", "xyz.size", "new_xyz.size", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "torch.cuda.IntTensor().zero_", "pointnet2_cuda.ball_query_wrapper", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "radius", ":", "float", ",", "nsample", ":", "int", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param radius: float, radius of the balls\n        :param nsample: int, maximum number of features in the balls\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: (B, npoint, 3) centers of the ball query\n        :return:\n            idx: (B, npoint, nsample) tensor with the indicies of the features that form the query balls\n        \"\"\"", "\n", "assert", "new_xyz", ".", "is_contiguous", "(", ")", "\n", "assert", "xyz", ".", "is_contiguous", "(", ")", "\n", "\n", "B", ",", "N", ",", "_", "=", "xyz", ".", "size", "(", ")", "\n", "npoint", "=", "new_xyz", ".", "size", "(", "1", ")", "\n", "idx", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "B", ",", "npoint", ",", "nsample", ")", ".", "zero_", "(", ")", "\n", "\n", "pointnet2", ".", "ball_query_wrapper", "(", "B", ",", "N", ",", "npoint", ",", "radius", ",", "nsample", ",", "new_xyz", ",", "xyz", ",", "idx", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward": [[223, 226], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.QueryAndGroup.__init__": [[232, 240], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "radius", ":", "float", ",", "nsample", ":", "int", ",", "use_xyz", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param radius: float, radius of ball\n        :param nsample: int, maximum number of features to gather in the ball\n        :param use_xyz:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radius", ",", "self", ".", "nsample", ",", "self", ".", "use_xyz", "=", "radius", ",", "nsample", ",", "use_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.QueryAndGroup.forward": [[241, 265], ["ball_query", "xyz.transpose().contiguous", "grouping_operation", "new_xyz.transpose().unsqueeze", "grouping_operation", "xyz.transpose", "new_xyz.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "Tuple", "[", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: (B, npoint, 3) centroids\n        :param features: (B, C, N) descriptors of the features\n        :return:\n            new_features: (B, 3 + C, npoint, nsample)\n        \"\"\"", "\n", "idx", "=", "ball_query", "(", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "xyz_trans", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "grouped_xyz", "=", "grouping_operation", "(", "xyz_trans", ",", "idx", ")", "# (B, 3, npoint, nsample)", "\n", "grouped_xyz", "-=", "new_xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "grouping_operation", "(", "features", ",", "idx", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", ")", "# (B, C + 3, npoint, nsample)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "assert", "self", ".", "use_xyz", ",", "\"Cannot have not features and not use xyz as a feature!\"", "\n", "new_features", "=", "grouped_xyz", "\n", "\n", "", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.GroupAll.__init__": [[268, 271], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_xyz", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.GroupAll.forward": [[272, 291], ["xyz.transpose().unsqueeze", "features.unsqueeze", "xyz.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "new_xyz", ":", "torch", ".", "Tensor", ",", "features", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param xyz: (B, N, 3) xyz coordinates of the features\n        :param new_xyz: ignored\n        :param features: (B, C, N) descriptors of the features\n        :return:\n            new_features: (B, C + 3, 1, N)\n        \"\"\"", "\n", "grouped_xyz", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "features", ".", "unsqueeze", "(", "2", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", ")", "# (B, 3 + C, 1, N)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "new_features", "=", "grouped_xyz", "\n", "\n", "", "return", "new_features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pytorch_utils.SharedMLP.__init__": [[7, 31], ["torch.ReLU", "torch.Sequential.__init__", "range", "pytorch_utils.SharedMLP.add_module", "len", "pytorch_utils.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ":", "List", "[", "int", "]", ",", "\n", "*", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "first", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", ",", "\n", "instance_norm", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "args", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\n", "name", "+", "'layer{}'", ".", "format", "(", "i", ")", ",", "\n", "Conv2d", "(", "\n", "args", "[", "i", "]", ",", "\n", "args", "[", "i", "+", "1", "]", ",", "\n", "bn", "=", "(", "not", "first", "or", "not", "preact", "or", "(", "i", "!=", "0", ")", ")", "and", "bn", ",", "\n", "activation", "=", "activation", "\n", "if", "(", "not", "first", "or", "not", "preact", "or", "(", "i", "!=", "0", ")", ")", "else", "None", ",", "\n", "preact", "=", "preact", ",", "\n", "instance_norm", "=", "instance_norm", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pytorch_utils._ConvBase.__init__": [[37, 102], ["torch.Sequential.__init__", "conv", "init", "pytorch_utils._ConvBase.add_module", "torch.init.constant_", "batch_norm", "batch_norm", "instance_norm_func", "instance_norm_func", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "None", ",", "\n", "batch_norm", "=", "None", ",", "\n", "bias", "=", "True", ",", "\n", "preact", "=", "False", ",", "\n", "name", "=", "\"\"", ",", "\n", "instance_norm", "=", "False", ",", "\n", "instance_norm_func", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "bias", "=", "bias", "and", "(", "not", "bn", ")", "\n", "conv_unit", "=", "conv", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "bias", "\n", ")", "\n", "init", "(", "conv_unit", ".", "weight", ")", "\n", "if", "bias", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "conv_unit", ".", "bias", ",", "0", ")", "\n", "\n", "", "if", "bn", ":", "\n", "            ", "if", "not", "preact", ":", "\n", "                ", "bn_unit", "=", "batch_norm", "(", "out_size", ")", "\n", "", "else", ":", "\n", "                ", "bn_unit", "=", "batch_norm", "(", "in_size", ")", "\n", "", "", "if", "instance_norm", ":", "\n", "            ", "if", "not", "preact", ":", "\n", "                ", "in_unit", "=", "instance_norm_func", "(", "out_size", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "in_unit", "=", "instance_norm_func", "(", "in_size", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "\n", "", "", "if", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "bn_unit", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n", "", "if", "not", "bn", "and", "instance_norm", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'in'", ",", "in_unit", ")", "\n", "\n", "", "", "self", ".", "add_module", "(", "name", "+", "'conv'", ",", "conv_unit", ")", "\n", "\n", "if", "not", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "bn_unit", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n", "", "if", "not", "bn", "and", "instance_norm", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'in'", ",", "in_unit", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pytorch_utils._BNBase.__init__": [[106, 112], ["torch.Sequential.__init__", "pytorch_utils._BNBase.add_module", "torch.init.constant_", "torch.init.constant_", "batch_norm"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "batch_norm", "=", "None", ",", "name", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "name", "+", "\"bn\"", ",", "batch_norm", "(", "in_size", ")", ")", "\n", "\n", "nn", ".", "init", ".", "constant_", "(", "self", "[", "0", "]", ".", "weight", ",", "1.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", "[", "0", "]", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pytorch_utils.BatchNorm1d.__init__": [[116, 118], ["pytorch_utils._BNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ":", "int", ",", "*", ",", "name", ":", "str", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_size", ",", "batch_norm", "=", "nn", ".", "BatchNorm1d", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pytorch_utils.BatchNorm2d.__init__": [[122, 124], ["pytorch_utils._BNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ":", "int", ",", "name", ":", "str", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_size", ",", "batch_norm", "=", "nn", ".", "BatchNorm2d", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pytorch_utils.Conv1d.__init__": [[128, 160], ["torch.ReLU", "pytorch_utils._ConvBase.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "kernel_size", ":", "int", "=", "1", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "padding", ":", "int", "=", "0", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", ",", "\n", "instance_norm", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "nn", ".", "Conv1d", ",", "\n", "batch_norm", "=", "BatchNorm1d", ",", "\n", "bias", "=", "bias", ",", "\n", "preact", "=", "preact", ",", "\n", "name", "=", "name", ",", "\n", "instance_norm", "=", "instance_norm", ",", "\n", "instance_norm_func", "=", "nn", ".", "InstanceNorm1d", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pytorch_utils.Conv2d.__init__": [[165, 197], ["torch.ReLU", "pytorch_utils._ConvBase.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "kernel_size", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "0", ",", "0", ")", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", ",", "\n", "instance_norm", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "nn", ".", "Conv2d", ",", "\n", "batch_norm", "=", "BatchNorm2d", ",", "\n", "bias", "=", "bias", ",", "\n", "preact", "=", "preact", ",", "\n", "name", "=", "name", ",", "\n", "instance_norm", "=", "instance_norm", ",", "\n", "instance_norm_func", "=", "nn", ".", "InstanceNorm2d", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pytorch_utils.FC.__init__": [[202, 236], ["torch.ReLU", "torch.Sequential.__init__", "torch.Linear", "pytorch_utils.FC.add_module", "init", "torch.init.constant", "pytorch_utils.FC.add_module", "pytorch_utils.FC.add_module", "pytorch_utils.FC.add_module", "pytorch_utils.FC.add_module", "pytorch_utils.BatchNorm1d", "pytorch_utils.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "None", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "fc", "=", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ",", "bias", "=", "not", "bn", ")", "\n", "if", "init", "is", "not", "None", ":", "\n", "            ", "init", "(", "fc", ".", "weight", ")", "\n", "", "if", "not", "bn", ":", "\n", "            ", "nn", ".", "init", ".", "constant", "(", "fc", ".", "bias", ",", "0", ")", "\n", "\n", "", "if", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "BatchNorm1d", "(", "in_size", ")", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n", "", "", "self", ".", "add_module", "(", "name", "+", "'fc'", ",", "fc", ")", "\n", "\n", "if", "not", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "BatchNorm1d", "(", "out_size", ")", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.default_config.update_config": [[112, 119], ["cfg.defrost", "cfg.merge_from_file", "cfg.merge_from_list", "cfg.freeze"], "function", ["None"], ["def", "update_config", "(", "cfg", ",", "args", ")", ":", "\n", "    ", "cfg", ".", "defrost", "(", ")", "\n", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "cfg", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.default_config.update_from_yaml": [[120, 126], ["cfg.defrost", "cfg.merge_from_file", "cfg.freeze"], "function", ["None"], ["", "def", "update_from_yaml", "(", "cfg", ",", "cfg_fname", ")", ":", "\n", "    ", "cfg", ".", "defrost", "(", ")", "\n", "\n", "cfg", ".", "merge_from_file", "(", "cfg_fname", ")", "\n", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.BasicBlock.__init__": [[35, 44], ["torch.Module.__init__", "official_hrnet.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "official_hrnet.conv3x3", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.conv3x3", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.BasicBlock.forward": [[45, 62], ["official_hrnet.BasicBlock.conv1", "official_hrnet.BasicBlock.bn1", "official_hrnet.BasicBlock.relu", "official_hrnet.BasicBlock.conv2", "official_hrnet.BasicBlock.bn2", "official_hrnet.BasicBlock.relu", "official_hrnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.Bottleneck.__init__": [[67, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.Bottleneck.forward": [[82, 103], ["official_hrnet.Bottleneck.conv1", "official_hrnet.Bottleneck.bn1", "official_hrnet.Bottleneck.relu", "official_hrnet.Bottleneck.conv2", "official_hrnet.Bottleneck.bn2", "official_hrnet.Bottleneck.relu", "official_hrnet.Bottleneck.conv3", "official_hrnet.Bottleneck.bn3", "official_hrnet.Bottleneck.relu", "official_hrnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule.__init__": [[106, 122], ["torch.Module.__init__", "official_hrnet.HighResolutionModule._check_branches", "official_hrnet.HighResolutionModule._make_branches", "official_hrnet.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._check_branches": [[123, 142], ["len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._make_one_branch": [[143, 166], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._make_branches": [[167, 175], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "official_hrnet.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule._make_fuse_layers": [[176, 221], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule.get_num_inchannels": [[222, 224], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule.forward": [[225, 250], ["range", "range", "len", "range", "x_fuse.append", "official_hrnet.HighResolutionModule.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "elif", "j", ">", "i", ":", "\n", "                    ", "width_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "1", "]", "\n", "height_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "2", "]", "\n", "y", "=", "y", "+", "F", ".", "interpolate", "(", "\n", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", ",", "\n", "size", "=", "[", "height_output", ",", "width_output", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.__init__": [[260, 309], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "official_hrnet.HighResolutionNet._make_layer", "official_hrnet.HighResolutionNet._make_transition_layer", "official_hrnet.HighResolutionNet._make_stage", "official_hrnet.HighResolutionNet._make_transition_layer", "official_hrnet.HighResolutionNet._make_stage", "official_hrnet.HighResolutionNet._make_transition_layer", "official_hrnet.HighResolutionNet._make_stage", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "extra", "=", "config", ".", "MODEL", ".", "EXTRA", "\n", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# stem net", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "stage1_cfg", "=", "extra", "[", "'STAGE1'", "]", "\n", "num_channels", "=", "self", ".", "stage1_cfg", "[", "'NUM_CHANNELS'", "]", "[", "0", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage1_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_blocks", "=", "self", ".", "stage1_cfg", "[", "'NUM_BLOCKS'", "]", "[", "0", "]", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_channels", ",", "num_blocks", ")", "\n", "stage1_out_channel", "=", "block", ".", "expansion", "*", "num_channels", "\n", "\n", "self", ".", "stage2_cfg", "=", "extra", "[", "'STAGE2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "\n", "[", "stage1_out_channel", "]", ",", "num_channels", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "extra", "[", "'STAGE3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "extra", "[", "'STAGE4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_transition_layer": [[329, 364], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "outchannels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_layer": [[365, 381], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet._make_stage": [[382, 410], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "official_hrnet.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.forward": [[411, 455], ["official_hrnet.HighResolutionNet.conv1", "official_hrnet.HighResolutionNet.bn1", "official_hrnet.HighResolutionNet.relu", "official_hrnet.HighResolutionNet.conv2", "official_hrnet.HighResolutionNet.bn2", "official_hrnet.HighResolutionNet.relu", "official_hrnet.HighResolutionNet.layer1", "range", "official_hrnet.HighResolutionNet.stage2", "range", "official_hrnet.HighResolutionNet.stage3", "range", "official_hrnet.HighResolutionNet.stage4", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "x", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "# # Upsampling", "\n", "# x0_h, x0_w = x[0].size(2), x[0].size(3)", "\n", "# x1 = F.upsample(x[1], size=(x0_h, x0_w), mode='bilinear')", "\n", "# x2 = F.upsample(x[2], size=(x0_h, x0_w), mode='bilinear')", "\n", "# x3 = F.upsample(x[3], size=(x0_h, x0_w), mode='bilinear')", "\n", "\n", "# x = torch.cat([x[0], x1, x2, x3], 1)", "\n", "\n", "# x = self.last_layer(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.init_weights": [[456, 475], ["logger.info", "official_hrnet.HighResolutionNet.modules", "os.path.isfile", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logger.info", "official_hrnet.HighResolutionNet.state_dict", "official_hrnet.HighResolutionNet.update", "official_hrnet.HighResolutionNet.load_state_dict", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "official_hrnet.HighResolutionNet.keys"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "''", ",", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'=> init weights from normal distribution'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained", ",", "map_location", "=", "'cpu'", ")", "\n", "logger", ".", "info", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "print", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "#for k, _ in pretrained_dict.items():", "\n", "#    logger.info(", "\n", "#        '=> loading {} pretrained model {}'.format(k, pretrained))", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.conv3x3": [[26, 30], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_seg_model": [[476, 481], ["official_hrnet.HighResolutionNet", "official_hrnet.HighResolutionNet.init_weights"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.init_weights"], ["\n", "", "", "", "def", "get_seg_model", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "HighResolutionNet", "(", "cfg", ",", "**", "kwargs", ")", "\n", "model", ".", "init_weights", "(", "cfg", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "\n", "return", "model", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_hrnet_w48_backbone": [[484, 490], ["default_config.update_from_yaml", "official_hrnet.HighResolutionNet", "official_hrnet.HighResolutionNet.init_weights"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.default_config.update_from_yaml", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.init_weights"], ["\n", "def", "get_hrnet_w48_backbone", "(", "pretrain_pth", "=", "None", ")", ":", "\n", "    ", "update_from_yaml", "(", "_C", ",", "'./hrnet/seg_hrnet_w48_473x473_sgd_lr7e-3_wd5e-4_bs_40_epoch150.yaml'", ")", "\n", "model", "=", "HighResolutionNet", "(", "_C", ")", "\n", "if", "pretrain_pth", "is", "None", ":", "\n", "        ", "model", ".", "init_weights", "(", "_C", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_hrnet_w32_backbone": [[491, 497], ["default_config.update_from_yaml", "official_hrnet.HighResolutionNet", "official_hrnet.HighResolutionNet.init_weights"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.default_config.update_from_yaml", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.init_weights"], ["        ", "model", ".", "init_weights", "(", "pretrain_pth", ")", "\n", "# model.init_weights('')", "\n", "", "return", "model", "\n", "\n", "", "def", "get_hrnet_w32_backbone", "(", "pretrain_pth", "=", "None", ")", ":", "\n", "    ", "update_from_yaml", "(", "_C", ",", "'./hrnet/seg_hrnet_w32_473x473_sgd_lr7e-3_wd5e-4_bs_40_epoch150.yaml'", ")", "\n", "model", "=", "HighResolutionNet", "(", "_C", ")", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.get_hrnet_w18_backbone": [[498, 504], ["default_config.update_from_yaml", "official_hrnet.HighResolutionNet", "official_hrnet.HighResolutionNet.init_weights"], "function", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.default_config.update_from_yaml", "home.repos.pwc.inspect_result.hongfz16_hcmoco.official_hrnet.official_hrnet.HighResolutionNet.init_weights"], ["if", "pretrain_pth", "is", "None", ":", "\n", "        ", "model", ".", "init_weights", "(", "_C", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "init_weights", "(", "pretrain_pth", ")", "\n", "# model.init_weights('')", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer.__init__": [[25, 32], ["base_trainer.BaseTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "ContrastTrainer", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "# self.lambda1 = 0.1", "\n", "self", ".", "lambda1", "=", "2.0", "\n", "self", ".", "lambda2", "=", "5.0", "\n", "self", ".", "lambda3", "=", "1.0", "\n", "self", ".", "lambda4", "=", "1.0", "\n", "#self.smoothing = GaussianSmoothing(128, 5, 1)", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer.logging": [[34, 49], ["contrast_trainer.ContrastTrainer.logger.log_value", "contrast_trainer.ContrastTrainer.logger.log_value", "contrast_trainer.ContrastTrainer.logger.log_value", "contrast_trainer.ContrastTrainer.logger.log_value", "contrast_trainer.ContrastTrainer.logger.log_value"], "methods", ["None"], ["", "def", "logging", "(", "self", ",", "epoch", ",", "logs", ",", "lr", ")", ":", "\n", "        ", "\"\"\" logging to tensorboard\n\n        Args:\n          epoch: training epoch\n          logs: loss and accuracy\n          lr: learning rate\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "log_value", "(", "'loss'", ",", "logs", "[", "0", "]", ",", "epoch", ")", "\n", "self", ".", "logger", ".", "log_value", "(", "'acc'", ",", "logs", "[", "1", "]", ",", "epoch", ")", "\n", "self", ".", "logger", ".", "log_value", "(", "'jig_loss'", ",", "logs", "[", "2", "]", ",", "epoch", ")", "\n", "self", ".", "logger", ".", "log_value", "(", "'jig_acc'", ",", "logs", "[", "3", "]", ",", "epoch", ")", "\n", "self", ".", "logger", ".", "log_value", "(", "'learning_rate'", ",", "lr", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer.wrap_up": [[50, 80], ["torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "isinstance", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "isinstance", "amp.initialize.cuda", "amp.initialize", "isinstance", "contrast_trainer.ContrastTrainer.momentum_update", "amp.initialize"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer.momentum_update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.initialize"], ["", "", "def", "wrap_up", "(", "self", ",", "model", ",", "model_ema", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"Wrap up models with apex and DDP\n\n        Args:\n          model: model\n          model_ema: momentum encoder\n          optimizer: optimizer\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "if", "isinstance", "(", "model_ema", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "            ", "model_ema", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "# to amp model if needed", "\n", "", "if", "args", ".", "amp", ":", "\n", "            ", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "\n", "model", ",", "optimizer", ",", "opt_level", "=", "args", ".", "opt_level", "\n", ")", "\n", "if", "isinstance", "(", "model_ema", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "model_ema", "=", "amp", ".", "initialize", "(", "\n", "model_ema", ",", "opt_level", "=", "args", ".", "opt_level", "\n", ")", "\n", "# to distributed data parallel", "\n", "", "", "model", "=", "DDP", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "\n", "if", "isinstance", "(", "model_ema", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "            ", "self", ".", "momentum_update", "(", "model", ".", "module", ",", "model_ema", ",", "0", ")", "\n", "\n", "", "return", "model", ",", "model_ema", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer.broadcast_memory": [[81, 92], ["torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast"], "methods", ["None"], ["", "def", "broadcast_memory", "(", "self", ",", "contrast", ")", ":", "\n", "        ", "\"\"\"Synchronize memory buffers\n\n        Args:\n          contrast: memory.\n        \"\"\"", "\n", "if", "self", ".", "args", ".", "modal", "==", "'RGB'", ":", "\n", "            ", "dist", ".", "broadcast", "(", "contrast", ".", "memory", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "dist", ".", "broadcast", "(", "contrast", ".", "memory_1", ",", "0", ")", "\n", "dist", ".", "broadcast", "(", "contrast", ".", "memory_2", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer.resume_model": [[93, 116], ["os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "contrast.load_state_dict", "optimizer.load_state_dict", "isinstance", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "model_ema.load_state_dict", "amp.load_state_dict"], "methods", ["None"], ["", "", "def", "resume_model", "(", "self", ",", "model", ",", "model_ema", ",", "contrast", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"load checkpoint\"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "start_epoch", "=", "1", "\n", "if", "args", ".", "resume", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "contrast", ".", "load_state_dict", "(", "checkpoint", "[", "'contrast'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "if", "isinstance", "(", "model_ema", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                    ", "model_ema", ".", "load_state_dict", "(", "checkpoint", "[", "'model_ema'", "]", ")", "\n", "", "if", "args", ".", "amp", ":", "\n", "                    ", "amp", ".", "load_state_dict", "(", "checkpoint", "[", "'amp'", "]", ")", "\n", "", "print", "(", "\"=> resume successfully '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "del", "checkpoint", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "return", "start_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer.save": [[117, 141], ["print", "isinstance", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.state_dict", "contrast.state_dict", "optimizer.state_dict", "model_ema.state_dict", "amp.state_dict", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save"], ["", "def", "save", "(", "self", ",", "model", ",", "model_ema", ",", "contrast", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"save model to checkpoint\"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "# saving the model to each instance", "\n", "            ", "print", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'contrast'", ":", "contrast", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "if", "isinstance", "(", "model_ema", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "state", "[", "'model_ema'", "]", "=", "model_ema", ".", "state_dict", "(", ")", "\n", "", "if", "args", ".", "amp", ":", "\n", "                ", "state", "[", "'amp'", "]", "=", "amp", ".", "state_dict", "(", ")", "\n", "", "save_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_folder", ",", "'current.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_file", ")", "\n", "if", "epoch", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "                ", "save_file", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "model_folder", ",", "'ckpt_epoch_{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_file", ")", "\n", "# help release GPU memory", "\n", "", "del", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer.train": [[142, 159], ["model.train", "time.time", "time.time", "print", "contrast_trainer.ContrastTrainer._train_moco", "contrast_trainer.ContrastTrainer._train_mem_skeleton3d", "contrast_trainer.ContrastTrainer._train_bank_joints_pri3d_cmc3"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer._train_moco", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer._train_mem_skeleton3d", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer._train_bank_joints_pri3d_cmc3"], ["", "", "def", "train", "(", "self", ",", "epoch", ",", "train_loader", ",", "model", ",", "model_ema", ",", "contrast", ",", "\n", "criterion", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"one epoch training\"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "model", ".", "train", "(", ")", "\n", "\n", "time1", "=", "time", ".", "time", "(", ")", "\n", "if", "args", ".", "mem", "==", "'moco'", ":", "\n", "            ", "outs", "=", "self", ".", "_train_moco", "(", "epoch", ",", "train_loader", ",", "model", ",", "model_ema", ",", "contrast", ",", "criterion", ",", "optimizer", ")", "\n", "", "elif", "args", ".", "mem", "==", "'bank'", ":", "\n", "            ", "outs", "=", "self", ".", "_train_mem_skeleton3d", "(", "epoch", ",", "train_loader", ",", "model", ",", "contrast", ",", "criterion", ",", "optimizer", ")", "\n", "", "elif", "args", ".", "mem", "==", "'bank+jointspri3d'", ":", "\n", "            ", "outs", "=", "self", ".", "_train_bank_joints_pri3d_cmc3", "(", "epoch", ",", "train_loader", ",", "model", ",", "contrast", ",", "criterion", "[", "0", "]", ",", "criterion", "[", "1", "]", ",", "optimizer", ")", "\n", "", "time2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {}, total time {:.2f}'", ".", "format", "(", "epoch", ",", "time2", "-", "time1", ")", ")", "\n", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer._global_gather": [[160, 166], ["torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size"], ["", "@", "staticmethod", "\n", "def", "_global_gather", "(", "x", ")", ":", "\n", "        ", "all_x", "=", "[", "torch", ".", "ones_like", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "dist", ".", "all_gather", "(", "all_x", ",", "x", ",", "async_op", "=", "False", ")", "\n", "return", "torch", ".", "cat", "(", "all_x", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer._shuffle_bn": [[167, 211], ["x.size", "torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "contrast_trainer.ContrastTrainer._global_gather", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "x.contiguous", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "model_ema", "model_ema", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._global_gather", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size"], ["", "def", "_shuffle_bn", "(", "self", ",", "x", ",", "model_ema", ")", ":", "\n", "        ", "\"\"\" Shuffle BN implementation\n\n        Args:\n          x: input image on each GPU/process\n          model_ema: momentum encoder on each GPU/process\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "local_gp", "=", "self", ".", "local_group", "\n", "bsz", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "# gather x locally for each node", "\n", "node_x", "=", "[", "torch", ".", "ones_like", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", "local_gp", ")", ")", "]", "\n", "dist", ".", "all_gather", "(", "node_x", ",", "x", ".", "contiguous", "(", ")", ",", "\n", "group", "=", "local_gp", ",", "async_op", "=", "False", ")", "\n", "node_x", "=", "torch", ".", "cat", "(", "node_x", ",", "dim", "=", "0", ")", "\n", "\n", "# shuffle bn", "\n", "shuffle_ids", "=", "torch", ".", "randperm", "(", "\n", "bsz", "*", "dist", ".", "get_world_size", "(", "local_gp", ")", ")", ".", "cuda", "(", ")", "\n", "reverse_ids", "=", "torch", ".", "argsort", "(", "shuffle_ids", ")", "\n", "dist", ".", "broadcast", "(", "shuffle_ids", ",", "0", ")", "\n", "dist", ".", "broadcast", "(", "reverse_ids", ",", "0", ")", "\n", "\n", "this_ids", "=", "shuffle_ids", "[", "args", ".", "local_rank", "*", "bsz", ":", "(", "args", ".", "local_rank", "+", "1", ")", "*", "bsz", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "this_x", "=", "node_x", "[", "this_ids", "]", "\n", "if", "args", ".", "jigsaw", ":", "\n", "                ", "k", "=", "model_ema", "(", "this_x", ",", "x_jig", "=", "None", ",", "mode", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "k", "=", "model_ema", "(", "this_x", ",", "mode", "=", "1", ")", "\n", "\n", "# globally gather k", "\n", "", "", "all_k", "=", "self", ".", "_global_gather", "(", "k", ")", "\n", "\n", "# unshuffle bn", "\n", "node_id", "=", "args", ".", "node_rank", "\n", "ngpus", "=", "args", ".", "ngpus_per_node", "\n", "node_k", "=", "all_k", "[", "node_id", "*", "ngpus", "*", "bsz", ":", "(", "node_id", "+", "1", ")", "*", "ngpus", "*", "bsz", "]", "\n", "this_ids", "=", "reverse_ids", "[", "args", ".", "local_rank", "*", "bsz", ":", "(", "args", ".", "local_rank", "+", "1", ")", "*", "bsz", "]", "\n", "k", "=", "node_k", "[", "this_ids", "]", "\n", "\n", "return", "k", ",", "all_k", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer._compute_loss_accuracy": [[212, 254], ["util.accuracy", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and.sum", "torch.logical_and.sum", "torch.logical_and.sum", "criterion", "contrast_trainer.ContrastTrainer._compute_loss_accuracy.acc"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.accuracy"], ["", "@", "staticmethod", "\n", "def", "_compute_loss_accuracy", "(", "logits", ",", "target", ",", "criterion", ",", "use_depth", "=", "None", ",", "use_rgb", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n          logits: a list of logits, each with a contrastive task\n          target: contrastive learning target\n          criterion: typically nn.CrossEntropyLoss\n        \"\"\"", "\n", "def", "acc", "(", "l", ",", "t", ")", ":", "\n", "            ", "acc1", "=", "accuracy", "(", "l", ",", "t", ")", "\n", "return", "acc1", "[", "0", "]", "\n", "", "if", "use_rgb", "is", "not", "None", ":", "\n", "            ", "assert", "use_depth", "is", "not", "None", "\n", "depth_ind", "=", "(", "use_depth", "==", "1", ")", "\n", "rgb_ind", "=", "(", "use_rgb", "==", "1", ")", "\n", "together_ind", "=", "torch", ".", "logical_and", "(", "depth_ind", ",", "rgb_ind", ")", "\n", "if", "together_ind", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "losses", "=", "[", "(", "logit", "-", "logit", ")", ".", "sum", "(", ")", "for", "logit", "in", "logits", "[", ":", "-", "2", "]", "]", "+", "[", "criterion", "(", "logit", ",", "target", ")", "for", "logit", "in", "logits", "[", "-", "2", ":", "]", "]", "\n", "accuracies", "=", "[", "np", ".", "array", "(", "[", "0", "]", ")", "for", "logit", "in", "logits", "[", ":", "-", "2", "]", "]", "+", "[", "acc", "(", "logit", ",", "target", ")", "for", "logit", "in", "logits", "[", "-", "2", ":", "]", "]", "\n", "return", "losses", ",", "accuracies", "\n", "", "losses", "=", "[", "criterion", "(", "logit", "[", "together_ind", "]", ",", "target", "[", "together_ind", "]", ")", "for", "logit", "in", "logits", "]", "\n", "accuracies", "=", "[", "acc", "(", "logit", "[", "together_ind", "]", ",", "target", "[", "together_ind", "]", ")", "for", "logit", "in", "logits", "]", "\n", "", "elif", "use_depth", "is", "not", "None", ":", "\n", "            ", "depth_ind", "=", "(", "use_depth", "==", "1", ")", "\n", "if", "use_depth", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "losses", "=", "[", "(", "logit", "-", "logit", ")", ".", "sum", "(", ")", "for", "logit", "in", "logits", "[", ":", "-", "2", "]", "]", "+", "[", "criterion", "(", "logit", ",", "target", ")", "for", "logit", "in", "logits", "[", "-", "2", ":", "]", "]", "\n", "accuracies", "=", "[", "np", ".", "array", "(", "[", "0", "]", ")", "for", "logit", "in", "logits", "[", ":", "-", "2", "]", "]", "+", "[", "acc", "(", "logit", ",", "target", ")", "for", "logit", "in", "logits", "[", "-", "2", ":", "]", "]", "\n", "return", "losses", ",", "accuracies", "\n", "", "losses", "=", "[", "]", "\n", "accuracies", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "logits", ")", ")", ":", "\n", "                ", "if", "i", "<=", "3", ":", "\n", "                    ", "losses", ".", "append", "(", "criterion", "(", "logits", "[", "i", "]", "[", "depth_ind", "]", ",", "target", "[", "depth_ind", "]", ")", ")", "\n", "accuracies", ".", "append", "(", "acc", "(", "logits", "[", "i", "]", "[", "depth_ind", "]", ",", "target", "[", "depth_ind", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "losses", ".", "append", "(", "criterion", "(", "logits", "[", "i", "]", ",", "target", ")", ")", "\n", "accuracies", ".", "append", "(", "acc", "(", "logits", "[", "i", "]", ",", "target", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "losses", "=", "[", "criterion", "(", "logit", ",", "target", ")", "for", "logit", "in", "logits", "]", "\n", "accuracies", "=", "[", "acc", "(", "logit", ",", "target", ")", "for", "logit", "in", "logits", "]", "\n", "\n", "", "return", "losses", ",", "accuracies", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer._train_moco": [[255, 393], ["model.train", "model_ema.eval", "model_ema.apply", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "time.time", "enumerate", "util.AverageMeter.update", "data[].float().cuda", "data[].float().cuda.size", "contrast_trainer.ContrastTrainer.warmup_learning_rate", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "contrast_trainer.ContrastTrainer._shuffle_bn", "optimizer.zero_grad", "optimizer.step", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "contrast_trainer.ContrastTrainer.momentum_update", "util.AverageMeter.update", "time.time", "classname.find", "m.train", "len", "data[].float().cuda", "inputs_jig.view.view.view", "model", "model", "loss.backward", "update_loss.item", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "time.time", "data[].float", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "contrast", "contrast_trainer.ContrastTrainer._compute_loss_accuracy", "contrast", "contrast_trainer.ContrastTrainer._compute_loss_accuracy", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "contrast", "contrast_trainer.ContrastTrainer._compute_loss_accuracy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "contrast", "contrast_trainer.ContrastTrainer._compute_loss_accuracy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "amp.scale_loss", "scaled_loss.backward", "time.time", "print", "sys.stdout.flush", "data[].float", "len"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.warmup_learning_rate", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._shuffle_bn", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer.momentum_update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.contrast", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_loss_accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.contrast", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_loss_accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.contrast", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_loss_accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.contrast", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_loss_accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward"], ["", "def", "_train_moco", "(", "self", ",", "epoch", ",", "train_loader", ",", "model", ",", "model_ema", ",", "contrast", ",", "\n", "criterion", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"\n        MoCo encoder style training. This needs two forward passes,\n        one for normal encoder, and one for moco encoder\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "model", ".", "train", "(", ")", "\n", "model_ema", ".", "eval", "(", ")", "\n", "\n", "def", "set_bn_train", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "                ", "m", ".", "train", "(", ")", "\n", "", "", "model_ema", ".", "apply", "(", "set_bn_train", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "acc_meter", "=", "AverageMeter", "(", ")", "\n", "loss_jig_meter", "=", "AverageMeter", "(", ")", "\n", "acc_jig_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "inputs", "=", "data", "[", "0", "]", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "bsz", "=", "inputs", ".", "size", "(", "0", ")", "\n", "\n", "# warm-up learning rate", "\n", "self", ".", "warmup_learning_rate", "(", "\n", "epoch", ",", "idx", ",", "len", "(", "train_loader", ")", ",", "optimizer", ")", "\n", "\n", "# split into two crops", "\n", "x1", ",", "x2", "=", "torch", ".", "split", "(", "inputs", ",", "[", "3", ",", "3", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# shuffle BN for momentum encoder", "\n", "k", ",", "all_k", "=", "self", ".", "_shuffle_bn", "(", "x2", ",", "model_ema", ")", "\n", "\n", "# loss and metrics", "\n", "if", "args", ".", "jigsaw", ":", "\n", "                ", "inputs_jig", "=", "data", "[", "2", "]", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "bsz", ",", "m", ",", "c", ",", "h", ",", "w", "=", "inputs_jig", ".", "shape", "\n", "inputs_jig", "=", "inputs_jig", ".", "view", "(", "bsz", "*", "m", ",", "c", ",", "h", ",", "w", ")", "\n", "q", ",", "q_jig", "=", "model", "(", "x1", ",", "inputs_jig", ")", "\n", "if", "args", ".", "modal", "==", "'CMC'", ":", "\n", "                    ", "q1", ",", "q2", "=", "torch", ".", "chunk", "(", "q", ",", "2", ",", "dim", "=", "1", ")", "\n", "q1_jig", ",", "q2_jig", "=", "torch", ".", "chunk", "(", "q_jig", ",", "2", ",", "dim", "=", "1", ")", "\n", "k1", ",", "k2", "=", "torch", ".", "chunk", "(", "k", ",", "2", ",", "dim", "=", "1", ")", "\n", "all_k1", ",", "all_k2", "=", "torch", ".", "chunk", "(", "all_k", ",", "2", ",", "dim", "=", "1", ")", "\n", "output", "=", "contrast", "(", "q1", ",", "k1", ",", "q2", ",", "k2", ",", "q2_jig", ",", "q1_jig", ",", "\n", "all_k1", ",", "all_k2", ")", "\n", "losses", ",", "accuracies", "=", "self", ".", "_compute_loss_accuracy", "(", "\n", "logits", "=", "output", "[", ":", "-", "1", "]", ",", "target", "=", "output", "[", "-", "1", "]", ",", "\n", "criterion", "=", "criterion", ")", "\n", "loss", "=", "(", "1", "-", "args", ".", "beta", ")", "*", "(", "losses", "[", "0", "]", "+", "losses", "[", "1", "]", ")", "+", "args", ".", "beta", "*", "(", "losses", "[", "2", "]", "+", "losses", "[", "3", "]", ")", "\n", "update_loss", "=", "0.5", "*", "(", "losses", "[", "0", "]", "+", "losses", "[", "1", "]", ")", "\n", "update_acc", "=", "0.5", "*", "(", "accuracies", "[", "0", "]", "+", "accuracies", "[", "1", "]", ")", "\n", "update_loss_jig", "=", "0.5", "*", "(", "losses", "[", "2", "]", "+", "losses", "[", "3", "]", ")", "\n", "update_acc_jig", "=", "0.5", "*", "(", "accuracies", "[", "2", "]", "+", "accuracies", "[", "3", "]", ")", "\n", "", "else", ":", "\n", "                    ", "output", "=", "contrast", "(", "q", ",", "k", ",", "q_jig", ",", "all_k", ")", "\n", "losses", ",", "accuracies", "=", "self", ".", "_compute_loss_accuracy", "(", "\n", "logits", "=", "output", "[", ":", "-", "1", "]", ",", "target", "=", "output", "[", "-", "1", "]", ",", "\n", "criterion", "=", "criterion", ")", "\n", "loss", "=", "(", "1", "-", "args", ".", "beta", ")", "*", "losses", "[", "0", "]", "+", "args", ".", "beta", "*", "losses", "[", "1", "]", "\n", "update_loss", "=", "losses", "[", "0", "]", "\n", "update_acc", "=", "accuracies", "[", "0", "]", "\n", "update_loss_jig", "=", "losses", "[", "1", "]", "\n", "update_acc_jig", "=", "accuracies", "[", "1", "]", "\n", "", "", "else", ":", "\n", "                ", "q", "=", "model", "(", "x1", ")", "\n", "if", "args", ".", "modal", "==", "'CMC'", ":", "\n", "                    ", "q1", ",", "q2", "=", "torch", ".", "chunk", "(", "q", ",", "2", ",", "dim", "=", "1", ")", "\n", "k1", ",", "k2", "=", "torch", ".", "chunk", "(", "k", ",", "2", ",", "dim", "=", "1", ")", "\n", "all_k1", ",", "all_k2", "=", "torch", ".", "chunk", "(", "all_k", ",", "2", ",", "dim", "=", "1", ")", "\n", "output", "=", "contrast", "(", "q1", ",", "k1", ",", "q2", ",", "k2", ",", "\n", "all_k1", "=", "all_k1", ",", "\n", "all_k2", "=", "all_k2", ")", "\n", "losses", ",", "accuracies", "=", "self", ".", "_compute_loss_accuracy", "(", "\n", "logits", "=", "output", "[", ":", "-", "1", "]", ",", "target", "=", "output", "[", "-", "1", "]", ",", "\n", "criterion", "=", "criterion", ")", "\n", "loss", "=", "losses", "[", "0", "]", "+", "losses", "[", "1", "]", "\n", "update_loss", "=", "0.5", "*", "(", "losses", "[", "0", "]", "+", "losses", "[", "1", "]", ")", "\n", "update_acc", "=", "0.5", "*", "(", "accuracies", "[", "0", "]", "+", "accuracies", "[", "1", "]", ")", "\n", "update_loss_jig", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", "\n", "update_acc_jig", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "output", "=", "contrast", "(", "q", ",", "k", ",", "all_k", "=", "all_k", ")", "\n", "losses", ",", "accuracies", "=", "self", ".", "_compute_loss_accuracy", "(", "\n", "logits", "=", "output", "[", ":", "-", "1", "]", ",", "target", "=", "output", "[", "-", "1", "]", ",", "\n", "criterion", "=", "criterion", ")", "\n", "loss", "=", "losses", "[", "0", "]", "\n", "update_loss", "=", "losses", "[", "0", "]", "\n", "update_acc", "=", "accuracies", "[", "0", "]", "\n", "update_loss_jig", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", "\n", "update_acc_jig", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", "\n", "\n", "# backward", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "args", ".", "amp", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# update meters", "\n", "loss_meter", ".", "update", "(", "update_loss", ".", "item", "(", ")", ",", "bsz", ")", "\n", "loss_jig_meter", ".", "update", "(", "update_loss_jig", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc_meter", ".", "update", "(", "update_acc", "[", "0", "]", ",", "bsz", ")", "\n", "acc_jig_meter", ".", "update", "(", "update_acc_jig", "[", "0", "]", ",", "bsz", ")", "\n", "\n", "# update momentum encoder", "\n", "self", ".", "momentum_update", "(", "model", ".", "module", ",", "model_ema", ",", "args", ".", "alpha", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# print info", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "if", "(", "idx", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                    ", "print", "(", "'Train: [{0}][{1}/{2}]\\t'", "\n", "'BT {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'DT {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'l_I {loss.val:.3f} ({loss.avg:.3f})\\t'", "\n", "'a_I {acc.val:.3f} ({acc.avg:.3f})\\t'", "\n", "'l_J {loss_jig.val:.3f} ({loss_jig.avg:.3f})\\t'", "\n", "'a_J {acc_jig.val:.3f} ({acc_jig.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "idx", "+", "1", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "loss_meter", ",", "acc", "=", "acc_meter", ",", "\n", "loss_jig", "=", "loss_jig_meter", ",", "acc_jig", "=", "acc_jig_meter", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "", "return", "loss_meter", ".", "avg", ",", "acc_meter", ".", "avg", ",", "loss_jig_meter", ".", "avg", ",", "acc_jig_meter", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer._train_mem": [[394, 531], ["model.train", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "time.time", "enumerate", "util.AverageMeter.update", "data[].float().cuda", "data[].cuda", "data[].float().cuda.size", "contrast_trainer.ContrastTrainer.warmup_learning_rate", "contrast_trainer.ContrastTrainer._global_gather", "contrast_trainer.ContrastTrainer._global_gather", "optimizer.zero_grad", "optimizer.step", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "time.time", "len", "data[].float().cuda", "inputs_jig.view.view.view", "model", "loss.backward", "update_loss.item", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "time.time", "data[].float", "data[].cuda", "model", "model", "args.modal.startswith", "args.modal.startswith", "args.modal.startswith", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "contrast", "contrast_trainer.ContrastTrainer._compute_loss_accuracy", "contrast", "contrast_trainer.ContrastTrainer._compute_loss_accuracy", "args.modal.startswith", "args.modal.startswith", "args.modal.startswith", "args.modal.startswith", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "contrast", "contrast_trainer.ContrastTrainer._compute_loss_accuracy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "contrast", "contrast_trainer.ContrastTrainer._compute_loss_accuracy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "amp.scale_loss", "scaled_loss.backward", "time.time", "print", "sys.stdout.flush", "data[].float", "len"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.warmup_learning_rate", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._global_gather", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._global_gather", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.contrast", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_loss_accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.contrast", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_loss_accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.contrast", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_loss_accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.contrast", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_loss_accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward"], ["", "def", "_train_mem", "(", "self", ",", "epoch", ",", "train_loader", ",", "model", ",", "contrast", ",", "\n", "criterion", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"\n        Training based on memory bank mechanism. Only one forward pass.\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "model", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "acc_meter", "=", "AverageMeter", "(", ")", "\n", "loss_jig_meter", "=", "AverageMeter", "(", ")", "\n", "acc_jig_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "\n", "inputs", "=", "data", "[", "0", "]", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "index", "=", "data", "[", "1", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "bsz", "=", "inputs", ".", "size", "(", "0", ")", "\n", "\n", "# warm-up learning rate", "\n", "self", ".", "warmup_learning_rate", "(", "\n", "epoch", ",", "idx", ",", "len", "(", "train_loader", ")", ",", "optimizer", ")", "\n", "\n", "# compute feature", "\n", "if", "args", ".", "jigsaw", ":", "\n", "                ", "inputs_jig", "=", "data", "[", "2", "]", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "bsz", ",", "m", ",", "c", ",", "h", ",", "w", "=", "inputs_jig", ".", "shape", "\n", "inputs_jig", "=", "inputs_jig", ".", "view", "(", "bsz", "*", "m", ",", "c", ",", "h", ",", "w", ")", "\n", "f", ",", "f_jig", "=", "model", "(", "inputs", ",", "inputs_jig", ")", "\n", "", "else", ":", "\n", "                ", "if", "args", ".", "modal", "==", "'DS'", ":", "\n", "                    ", "s", "=", "data", "[", "2", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "f", "=", "model", "(", "inputs", ",", "s", ")", "\n", "", "else", ":", "\n", "                    ", "f", "=", "model", "(", "inputs", ")", "\n", "\n", "# gather all feature and index", "\n", "", "", "all_f", "=", "self", ".", "_global_gather", "(", "f", ")", "\n", "all_index", "=", "self", ".", "_global_gather", "(", "index", ")", "\n", "\n", "# loss and metrics", "\n", "if", "args", ".", "jigsaw", ":", "\n", "                ", "if", "args", ".", "modal", ".", "startswith", "(", "'CMC'", ")", "or", "args", ".", "modal", ".", "startswith", "(", "'RGBHHA'", ")", "or", "args", ".", "modal", ".", "startswith", "(", "'RGBD'", ")", ":", "\n", "                    ", "f1", ",", "f2", "=", "torch", ".", "chunk", "(", "f", ",", "2", ",", "dim", "=", "1", ")", "\n", "f1_jig", ",", "f2_jig", "=", "torch", ".", "chunk", "(", "f_jig", ",", "2", ",", "dim", "=", "1", ")", "\n", "all_f1", ",", "all_f2", "=", "torch", ".", "chunk", "(", "all_f", ",", "2", ",", "dim", "=", "1", ")", "\n", "output", "=", "contrast", "(", "f1", ",", "f2", ",", "index", ",", "f2_jig", ",", "f1_jig", ",", "\n", "all_f1", ",", "all_f2", ",", "all_index", ")", "\n", "losses", ",", "accuracies", "=", "self", ".", "_compute_loss_accuracy", "(", "\n", "logits", "=", "output", "[", ":", "-", "1", "]", ",", "target", "=", "output", "[", "-", "1", "]", ",", "\n", "criterion", "=", "criterion", ")", "\n", "loss", "=", "(", "1", "-", "args", ".", "beta", ")", "*", "(", "losses", "[", "0", "]", "+", "losses", "[", "1", "]", ")", "+", "args", ".", "beta", "*", "(", "losses", "[", "2", "]", "+", "losses", "[", "3", "]", ")", "\n", "update_loss", "=", "0.5", "*", "(", "losses", "[", "0", "]", "+", "losses", "[", "1", "]", ")", "\n", "update_acc", "=", "0.5", "*", "(", "accuracies", "[", "0", "]", "+", "accuracies", "[", "1", "]", ")", "\n", "update_loss_jig", "=", "0.5", "*", "(", "losses", "[", "2", "]", "+", "losses", "[", "3", "]", ")", "\n", "update_acc_jig", "=", "0.5", "*", "(", "accuracies", "[", "2", "]", "+", "accuracies", "[", "3", "]", ")", "\n", "", "else", ":", "\n", "                    ", "output", "=", "contrast", "(", "f", ",", "index", ",", "f_jig", ",", "all_f", ",", "all_index", ")", "\n", "losses", ",", "accuracies", "=", "self", ".", "_compute_loss_accuracy", "(", "\n", "logits", "=", "output", "[", ":", "-", "1", "]", ",", "target", "=", "output", "[", "-", "1", "]", ",", "\n", "criterion", "=", "criterion", ")", "\n", "loss", "=", "(", "1", "-", "args", ".", "beta", ")", "*", "losses", "[", "0", "]", "+", "args", ".", "beta", "*", "losses", "[", "1", "]", "\n", "update_loss", "=", "losses", "[", "0", "]", "\n", "update_acc", "=", "accuracies", "[", "0", "]", "\n", "update_loss_jig", "=", "losses", "[", "1", "]", "\n", "update_acc_jig", "=", "accuracies", "[", "1", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "args", ".", "modal", ".", "startswith", "(", "'CMC'", ")", "or", "args", ".", "modal", ".", "startswith", "(", "'RGBHHA'", ")", "or", "args", ".", "modal", ".", "startswith", "(", "'RGBD'", ")", "or", "args", ".", "modal", ".", "startswith", "(", "'DS'", ")", ":", "\n", "                    ", "f1", ",", "f2", "=", "torch", ".", "chunk", "(", "f", ",", "2", ",", "dim", "=", "1", ")", "\n", "all_f1", ",", "all_f2", "=", "torch", ".", "chunk", "(", "all_f", ",", "2", ",", "dim", "=", "1", ")", "\n", "output", "=", "contrast", "(", "f1", ",", "f2", ",", "index", ",", "None", ",", "None", ",", "\n", "all_f1", ",", "all_f2", ",", "all_index", ")", "\n", "losses", ",", "accuracies", "=", "self", ".", "_compute_loss_accuracy", "(", "\n", "logits", "=", "output", "[", ":", "-", "1", "]", ",", "target", "=", "output", "[", "-", "1", "]", ",", "\n", "criterion", "=", "criterion", ")", "\n", "loss", "=", "losses", "[", "0", "]", "+", "losses", "[", "1", "]", "\n", "update_loss", "=", "0.5", "*", "(", "losses", "[", "0", "]", "+", "losses", "[", "1", "]", ")", "\n", "update_acc", "=", "0.5", "*", "(", "accuracies", "[", "0", "]", "+", "accuracies", "[", "1", "]", ")", "\n", "update_loss_jig", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", "\n", "update_acc_jig", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "output", "=", "contrast", "(", "f", ",", "index", ",", "None", ",", "all_f", ",", "all_index", ")", "\n", "losses", ",", "accuracies", "=", "self", ".", "_compute_loss_accuracy", "(", "\n", "logits", "=", "output", "[", ":", "-", "1", "]", ",", "target", "=", "output", "[", "-", "1", "]", ",", "\n", "criterion", "=", "criterion", ")", "\n", "loss", "=", "losses", "[", "0", "]", "\n", "update_loss", "=", "losses", "[", "0", "]", "\n", "update_acc", "=", "accuracies", "[", "0", "]", "\n", "update_loss_jig", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", "\n", "update_acc_jig", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", "\n", "\n", "# backward", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "args", ".", "amp", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# update meters", "\n", "loss_meter", ".", "update", "(", "update_loss", ".", "item", "(", ")", ",", "bsz", ")", "\n", "loss_jig_meter", ".", "update", "(", "update_loss_jig", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc_meter", ".", "update", "(", "update_acc", "[", "0", "]", ",", "bsz", ")", "\n", "acc_jig_meter", ".", "update", "(", "update_acc_jig", "[", "0", "]", ",", "bsz", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# print info", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "if", "(", "idx", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                    ", "print", "(", "'Train: [{0}][{1}/{2}]\\t'", "\n", "'BT {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'DT {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'l_I {loss.val:.3f} ({loss.avg:.3f})\\t'", "\n", "'a_I {acc.val:.3f} ({acc.avg:.3f})\\t'", "\n", "'l_J {loss_jig.val:.3f} ({loss_jig.avg:.3f})\\t'", "\n", "'a_J {acc_jig.val:.3f} ({acc_jig.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "idx", "+", "1", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "loss_meter", ",", "acc", "=", "acc_meter", ",", "\n", "loss_jig", "=", "loss_jig_meter", ",", "acc_jig", "=", "acc_jig_meter", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "", "return", "loss_meter", ".", "avg", ",", "acc_meter", ".", "avg", ",", "loss_jig_meter", ".", "avg", ",", "acc_jig_meter", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer._train_mem_skeleton3d": [[532, 641], ["model.train", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "time.time", "enumerate", "util.AverageMeter.update", "data[].float().cuda", "data[].cuda", "data[].cuda", "data[].cuda", "data[].float().cuda.size", "contrast_trainer.ContrastTrainer.warmup_learning_rate", "contrast_trainer.ContrastTrainer._global_gather", "contrast_trainer.ContrastTrainer._global_gather", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "contrast", "contrast_trainer.ContrastTrainer._compute_loss_accuracy", "sum", "optimizer.zero_grad", "optimizer.step", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "time.time", "data[].cuda", "[].item", "[].item", "data[].cuda", "len", "data[].cuda", "data[].cuda", "sum.backward", "update_loss_12.item", "update_loss_23.item", "update_loss_13.item", "time.time", "data[].float", "model", "model", "amp.scale_loss", "scaled_loss.backward", "time.time", "print", "sys.stdout.flush", "len"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.warmup_learning_rate", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._global_gather", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._global_gather", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.contrast", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_loss_accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward"], ["", "def", "_train_mem_skeleton3d", "(", "self", ",", "epoch", ",", "train_loader", ",", "model", ",", "contrast", ",", "criterion", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"\n        Training based on memory bank mechanism. Only one forward pass.\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "assert", "not", "args", ".", "jigsaw", "\n", "model", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "loss1_meter", "=", "AverageMeter", "(", ")", "\n", "acc1_meter", "=", "AverageMeter", "(", ")", "\n", "loss2_meter", "=", "AverageMeter", "(", ")", "\n", "acc2_meter", "=", "AverageMeter", "(", ")", "\n", "loss3_meter", "=", "AverageMeter", "(", ")", "\n", "acc3_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "inputs", "=", "data", "[", "0", "]", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "index", "=", "data", "[", "1", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "skeleton", "=", "data", "[", "2", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "depth_mask", "=", "data", "[", "7", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "if", "args", ".", "arch", "==", "'HRNetPN'", ":", "\n", "                ", "grid_xy", "=", "data", "[", "12", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "original_h", "=", "data", "[", "13", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "original_w", "=", "data", "[", "14", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "mean", "=", "data", "[", "15", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "bsz", "=", "inputs", ".", "size", "(", "0", ")", "\n", "\n", "# warm-up learning rate", "\n", "self", ".", "warmup_learning_rate", "(", "\n", "epoch", ",", "idx", ",", "len", "(", "train_loader", ")", ",", "optimizer", ")", "\n", "\n", "# compute feature", "\n", "if", "args", ".", "jigsaw", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "                ", "if", "args", ".", "arch", "==", "'HRNetPN'", ":", "\n", "                    ", "f", "=", "model", "(", "inputs", ",", "skeleton", ",", "depth_mask", ",", "grid_xy", ",", "original_h", ",", "original_w", ",", "mean", ")", "\n", "", "else", ":", "\n", "                    ", "f", "=", "model", "(", "inputs", ",", "skeleton", ")", "\n", "\n", "# gather all feature and index", "\n", "", "", "all_f", "=", "self", ".", "_global_gather", "(", "f", ")", "\n", "all_index", "=", "self", ".", "_global_gather", "(", "index", ")", "\n", "\n", "# loss and metrics", "\n", "f1", ",", "f2", ",", "f3", "=", "torch", ".", "chunk", "(", "f", ",", "3", ",", "dim", "=", "1", ")", "\n", "all_f1", ",", "all_f2", ",", "all_f3", "=", "torch", ".", "chunk", "(", "all_f", ",", "3", ",", "dim", "=", "1", ")", "\n", "output", "=", "contrast", "(", "f1", ",", "f2", ",", "f3", ",", "index", ",", "all_f1", ",", "all_f2", ",", "all_f3", ",", "all_index", ")", "\n", "if", "args", ".", "modality_missing", ":", "\n", "                ", "use_depth", "=", "data", "[", "6", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "use_depth", "=", "None", "\n", "", "try", ":", "\n", "                ", "use_rgb", "=", "data", "[", "11", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "except", ":", "\n", "                ", "use_rgb", "=", "None", "\n", "", "losses", ",", "accuracies", "=", "self", ".", "_compute_loss_accuracy", "(", "\n", "logits", "=", "output", "[", ":", "-", "1", "]", ",", "target", "=", "output", "[", "-", "1", "]", ",", "\n", "criterion", "=", "criterion", ",", "use_depth", "=", "use_depth", ",", "use_rgb", "=", "use_rgb", ")", "\n", "loss", "=", "sum", "(", "losses", ")", "\n", "update_loss_12", "=", "0.5", "*", "(", "losses", "[", "0", "]", "+", "losses", "[", "1", "]", ")", "\n", "update_acc_12", "=", "0.5", "*", "(", "accuracies", "[", "0", "]", "+", "accuracies", "[", "1", "]", ")", "\n", "update_loss_23", "=", "0.5", "*", "(", "losses", "[", "2", "]", "+", "losses", "[", "3", "]", ")", "\n", "update_acc_23", "=", "0.5", "*", "(", "accuracies", "[", "2", "]", "+", "accuracies", "[", "3", "]", ")", "\n", "update_loss_13", "=", "0.5", "*", "(", "losses", "[", "4", "]", "+", "losses", "[", "5", "]", ")", "\n", "update_acc_13", "=", "0.5", "*", "(", "accuracies", "[", "4", "]", "+", "accuracies", "[", "5", "]", ")", "\n", "\n", "# backward", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "args", ".", "amp", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# update meters", "\n", "loss1_meter", ".", "update", "(", "update_loss_12", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc1_meter", ".", "update", "(", "update_acc_12", "[", "0", "]", ",", "bsz", ")", "\n", "loss2_meter", ".", "update", "(", "update_loss_23", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc2_meter", ".", "update", "(", "update_acc_23", "[", "0", "]", ",", "bsz", ")", "\n", "loss3_meter", ".", "update", "(", "update_loss_13", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc3_meter", ".", "update", "(", "update_acc_13", "[", "0", "]", ",", "bsz", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# print info", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "if", "(", "idx", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                    ", "print", "(", "'Train: [{0}][{1}/{2}]\\t'", "\n", "'BT {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'l_I {loss1.val:.3f} ({loss1.avg:.3f})\\t'", "\n", "'a_I {acc1.val:.3f} ({acc1.avg:.3f})\\t'", "\n", "'l_I {loss2.val:.3f} ({loss2.avg:.3f})\\t'", "\n", "'a_I {acc2.val:.3f} ({acc2.avg:.3f})\\t'", "\n", "'l_I {loss3.val:.3f} ({loss3.avg:.3f})\\t'", "\n", "'a_I {acc3.val:.3f} ({acc3.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "idx", "+", "1", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "loss1", "=", "loss1_meter", ",", "acc1", "=", "acc1_meter", ",", "loss2", "=", "loss2_meter", ",", "acc2", "=", "acc2_meter", ",", "\n", "loss3", "=", "loss3_meter", ",", "acc3", "=", "acc3_meter", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "", "return", "loss1_meter", ".", "avg", ",", "acc1_meter", ".", "avg", ",", "loss2_meter", ".", "avg", ",", "acc2_meter", ".", "avg", ",", "loss3_meter", ".", "avg", ",", "acc3_meter", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer._compute_soft_pri3d_loss_accuracy": [[642, 724], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "resized_depth.reshape.reshape.reshape", "merge_all_res.reshape", "merge_all_res.reshape", "torch.interpolate", "torch.interpolate", "torch.interpolate", "valid_depth_prob.reshape.reshape.reshape", "valid_depth_prob.reshape.reshape.sum", "mask.sum", "valid_depth_prob.reshape.reshape.multinomial", "random_sample_ind.unsqueeze().repeat.unsqueeze().repeat.clone", "random_sample_ind.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "isinstance", "contrast_trainer.ContrastTrainer._compute_soft_pri3d_loss_accuracy.merge_all_res"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.merge_all_res"], ["", "def", "_compute_soft_pri3d_loss_accuracy", "(", "self", ",", "_feat1_", ",", "_feat2_", ",", "_depth", ",", "criterion_pri3d", ",", "use_depth", "=", "None", ",", "depth_mask", "=", "None", ",", "scale", "=", "None", ")", ":", "\n", "        ", "_feat1", "=", "_feat1_", "\n", "_feat2", "=", "_feat2_", "\n", "depth", "=", "_depth", "\n", "def", "merge_all_res", "(", "x", ")", ":", "\n", "            ", "ALIGN_CORNERS", "=", "False", "\n", "x0_h", ",", "x0_w", "=", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x2", "=", "F", ".", "interpolate", "(", "x", "[", "2", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x3", "=", "F", ".", "interpolate", "(", "x", "[", "3", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", "0", "]", ",", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "return", "x", "\n", "", "if", "isinstance", "(", "_feat1", ",", "list", ")", "and", "isinstance", "(", "_feat2", ",", "list", ")", ":", "\n", "            ", "merge1", "=", "merge_all_res", "(", "_feat1", ")", "\n", "merge2", "=", "merge_all_res", "(", "_feat2", ")", "\n", "h", ",", "w", "=", "_feat1", "[", "0", "]", ".", "size", "(", "2", ")", ",", "_feat1", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "", "else", ":", "\n", "            ", "merge1", "=", "_feat1", "\n", "merge2", "=", "_feat2", "\n", "h", ",", "w", "=", "merge1", ".", "size", "(", "2", ")", ",", "merge2", ".", "size", "(", "3", ")", "\n", "\n", "", "if", "use_depth", "is", "not", "None", ":", "\n", "            ", "if", "use_depth", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "return", "[", "(", "merge1", "-", "merge1", "+", "merge2", "-", "merge2", ")", ".", "mean", "(", ")", "for", "_", "in", "range", "(", "2", ")", "]", ",", "[", "np", ".", "array", "(", "[", "0", "]", ")", ",", "np", ".", "array", "(", "[", "0", "]", ")", "]", "\n", "\n", "", "", "bs", ",", "fdim", "=", "merge1", ".", "size", "(", "0", ")", ",", "merge1", ".", "size", "(", "1", ")", "\n", "resized_depth", "=", "F", ".", "interpolate", "(", "depth", ".", "unsqueeze", "(", "1", ")", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "resized_depth", "=", "resized_depth", ".", "reshape", "(", "bs", ",", "h", "*", "w", ")", "\n", "merge1", "=", "merge1", ".", "reshape", "(", "bs", ",", "fdim", ",", "h", "*", "w", ")", "\n", "merge2", "=", "merge2", ".", "reshape", "(", "bs", ",", "fdim", ",", "h", "*", "w", ")", "\n", "\n", "# valid_depth_prob = (resized_depth > 0).float()", "\n", "valid_depth_prob", "=", "F", ".", "interpolate", "(", "depth_mask", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "valid_depth_prob", "=", "valid_depth_prob", ".", "reshape", "(", "bs", ",", "h", "*", "w", ")", "\n", "\n", "valid_depth_prob_sum", "=", "valid_depth_prob", ".", "sum", "(", "-", "1", ")", "\n", "mask", "=", "valid_depth_prob_sum", ">", "0", "\n", "valid_depth_prob", "=", "valid_depth_prob", "[", "mask", "]", "\n", "merge1", "=", "merge1", "[", "mask", "]", "\n", "merge2", "=", "merge2", "[", "mask", "]", "\n", "bs", "=", "mask", ".", "sum", "(", ")", "\n", "\n", "num_samples", "=", "self", ".", "args", ".", "pri3d_num_samples_per_image", "\n", "random_sample_ind", "=", "valid_depth_prob", ".", "multinomial", "(", "num_samples", "=", "num_samples", ",", "replacement", "=", "True", ")", "# bs, num_samples", "\n", "random_sample_ind_copy", "=", "random_sample_ind", ".", "clone", "(", ")", "\n", "random_sample_ind", "=", "random_sample_ind", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "fdim", ",", "1", ")", "\n", "\n", "sampled_merge1", "=", "torch", ".", "gather", "(", "merge1", ",", "2", ",", "random_sample_ind", ")", "\n", "sampled_merge2", "=", "torch", ".", "gather", "(", "merge2", ",", "2", ",", "random_sample_ind", ")", "\n", "\n", "sampled_merge1", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "sampled_merge1", ",", "dim", "=", "1", ")", "\n", "sampled_merge2", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "sampled_merge2", ",", "dim", "=", "1", ")", "\n", "\n", "rgb2depth_logits", "=", "torch", ".", "matmul", "(", "sampled_merge2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "sampled_merge1", ")", "\n", "depth2rgb_logits", "=", "torch", ".", "matmul", "(", "sampled_merge1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "sampled_merge2", ")", "\n", "\n", "rgb2depth_logits", "=", "rgb2depth_logits", "/", "self", ".", "args", ".", "temperature", "\n", "depth2rgb_logits", "=", "depth2rgb_logits", "/", "self", ".", "args", ".", "temperature", "\n", "\n", "### START: generate soft target", "\n", "sample_xy", "=", "torch", ".", "stack", "(", "[", "random_sample_ind_copy", "//", "w", ",", "random_sample_ind_copy", "%", "w", "]", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "sample_xy_dist", "=", "sample_xy", ".", "reshape", "(", "bs", ",", "num_samples", ",", "1", ",", "2", ")", "-", "sample_xy", ".", "reshape", "(", "bs", ",", "1", ",", "num_samples", ",", "2", ")", "\n", "sample_xy_dist", "=", "torch", ".", "sqrt", "(", "(", "sample_xy_dist", "**", "2", ")", ".", "sum", "(", "-", "1", ")", ")", "\n", "\n", "soft_target", "=", "torch", ".", "softmax", "(", "-", "sample_xy_dist", ",", "1", ")", "\n", "rgb2depth_logsoft", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "rgb2depth_logits", ",", "dim", "=", "1", ")", "\n", "depth2rgb_logsoft", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "depth2rgb_logits", ",", "dim", "=", "1", ")", "\n", "\n", "losses", "=", "[", "\n", "-", "(", "soft_target", "*", "rgb2depth_logsoft", ")", ".", "sum", "(", "-", "2", ")", ".", "mean", "(", ")", ",", "\n", "-", "(", "soft_target", "*", "depth2rgb_logsoft", ")", ".", "sum", "(", "-", "2", ")", ".", "mean", "(", ")", "\n", "]", "\n", "### END", "\n", "target", "=", "torch", ".", "arange", "(", "num_samples", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "bs", ",", "1", ")", "\n", "\n", "rgb2depth_pred", "=", "rgb2depth_logits", ".", "argmax", "(", "-", "2", ")", "\n", "depth2rgb_pred", "=", "depth2rgb_logits", ".", "argmax", "(", "-", "2", ")", "\n", "rgb2depth_acc", "=", "(", "rgb2depth_pred", "==", "target", ")", ".", "sum", "(", "-", "1", ")", ".", "float", "(", ")", "/", "num_samples", "\n", "depth2rgb_acc", "=", "(", "depth2rgb_pred", "==", "target", ")", ".", "sum", "(", "-", "1", ")", ".", "float", "(", ")", "/", "num_samples", "\n", "acces", "=", "[", "rgb2depth_acc", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "depth2rgb_acc", ".", "float", "(", ")", ".", "mean", "(", ")", "]", "\n", "\n", "return", "losses", ",", "acces", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer._gaussian_joint_pooling": [[725, 743], ["torch.pad", "torch.pad", "torch.pad", "networks.util.GaussianSmoothing().cuda", "networks.util.GaussianSmoothing().cuda.", "downsampled_joints2d.long.long.long", "sample_ind.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "GaussianSmoothing().cuda.reshape", "networks.util.GaussianSmoothing", "sample_ind.unsqueeze().repeat.unsqueeze().repeat.max", "sample_ind.unsqueeze().repeat.unsqueeze().repeat.min", "sample_ind.unsqueeze().repeat.unsqueeze().repeat.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "def", "_gaussian_joint_pooling", "(", "self", ",", "feat_map", ",", "original_joints2d", ")", ":", "\n", "        ", "pad_feat_map", "=", "F", ".", "pad", "(", "feat_map", ",", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "mode", "=", "'reflect'", ")", "\n", "smoothing", "=", "GaussianSmoothing", "(", "128", ",", "5", ",", "1", ")", ".", "cuda", "(", ")", "\n", "smooth_feat_map", "=", "smoothing", "(", "pad_feat_map", ")", "\n", "\n", "assert", "smooth_feat_map", ".", "shape", "==", "feat_map", ".", "shape", "\n", "bs", ",", "fdim", ",", "h", ",", "w", "=", "feat_map", ".", "shape", "\n", "\n", "downsampled_joints2d", "=", "original_joints2d", "//", "4", "\n", "downsampled_joints2d", "=", "downsampled_joints2d", ".", "long", "(", ")", "\n", "downsampled_joints2d", "[", "downsampled_joints2d", ">=", "h", "]", "=", "h", "-", "1", "\n", "downsampled_joints2d", "[", "downsampled_joints2d", "<", "0", "]", "=", "0", "\n", "sample_ind", "=", "downsampled_joints2d", "[", ":", ",", ":", ",", "0", "]", "*", "h", "+", "downsampled_joints2d", "[", ":", ",", ":", ",", "1", "]", "\n", "assert", "sample_ind", ".", "max", "(", ")", "<", "h", "*", "w", "and", "sample_ind", ".", "min", "(", ")", ">=", "0", "\n", "sample_ind", "=", "sample_ind", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "fdim", ",", "1", ")", "\n", "joints_feat", "=", "torch", ".", "gather", "(", "smooth_feat_map", ".", "reshape", "(", "bs", ",", "fdim", ",", "h", "*", "w", ")", ",", "2", ",", "sample_ind", ")", "\n", "\n", "return", "joints_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer._compute_joints_pri3d_loss_accuracy": [[744, 829], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda.clone", "torch.arange().long().unsqueeze().repeat().cuda.clone", "torch.arange().long().unsqueeze().repeat().cuda.clone", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "downsampled_joints2d.long.long.long", "sample_ind.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "_feat_rgb.permute", "_feat_d.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "losses.append", "rgb2joints_acc_valid.float().mean", "d2joints_acc_valid.float().mean", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "acces.append", "_feat_rgb.reshape", "_feat_d.reshape", "_feat_rgb.permute.permute", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "rgb2d_acc_valid.float().mean", "sample_ind.unsqueeze().repeat.unsqueeze().repeat.max", "sample_ind.unsqueeze().repeat.unsqueeze().repeat.min", "sample_ind.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "rgb2joints_acc_valid.float", "d2joints_acc_valid.float", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "rgb2d_acc_valid.float", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "def", "_compute_joints_pri3d_loss_accuracy", "(", "self", ",", "_feat_rgb", ",", "_feat_d", ",", "_feat_joints2d", ",", "criterion_pri3d", ",", "original_joints2d", ",", "joints_vis", ",", "use_depth", "=", "None", ",", "ready_joint_feat", "=", "False", ",", "use_rgb2d", "=", "False", ")", ":", "\n", "# if use_depth is not None:", "\n", "#     if use_depth.sum() == 0:", "\n", "#         return [(_feat_rgb - _feat_rgb + _feat_d - _feat_d).mean() for _ in range(2)], [np.array([0]), np.array([0])]", "\n", "\n", "        ", "if", "not", "ready_joint_feat", ":", "\n", "            ", "bs", ",", "fdim", ",", "h", ",", "w", "=", "_feat_rgb", ".", "shape", "\n", "assert", "h", "==", "w", "\n", "\n", "", "if", "not", "ready_joint_feat", ":", "\n", "            ", "downsampled_joints2d", "=", "original_joints2d", "//", "4", "\n", "downsampled_joints2d", "=", "downsampled_joints2d", ".", "long", "(", ")", "\n", "downsampled_joints2d", "[", "downsampled_joints2d", ">=", "h", "]", "=", "h", "-", "1", "\n", "downsampled_joints2d", "[", "downsampled_joints2d", "<", "0", "]", "=", "0", "\n", "sample_ind", "=", "downsampled_joints2d", "[", ":", ",", ":", ",", "0", "]", "*", "h", "+", "downsampled_joints2d", "[", ":", ",", ":", ",", "1", "]", "\n", "assert", "sample_ind", ".", "max", "(", ")", "<", "h", "*", "w", "and", "sample_ind", ".", "min", "(", ")", ">=", "0", "\n", "sample_ind", "=", "sample_ind", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "fdim", ",", "1", ")", "\n", "rgb_joints_feat", "=", "torch", ".", "gather", "(", "_feat_rgb", ".", "reshape", "(", "bs", ",", "fdim", ",", "h", "*", "w", ")", ",", "2", ",", "sample_ind", ")", "\n", "d_joints_feat", "=", "torch", ".", "gather", "(", "_feat_d", ".", "reshape", "(", "bs", ",", "fdim", ",", "h", "*", "w", ")", ",", "2", ",", "sample_ind", ")", "\n", "", "else", ":", "\n", "            ", "rgb_joints_feat", "=", "_feat_rgb", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "d_joints_feat", "=", "_feat_d", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "rgb_joints_feat", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "rgb_joints_feat", ",", "dim", "=", "1", ")", "\n", "d_joints_feat", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "d_joints_feat", ",", "dim", "=", "1", ")", "\n", "joints2d_feat", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "_feat_joints2d", ",", "dim", "=", "-", "1", ")", "\n", "\n", "rgb2joints_logits", "=", "torch", ".", "matmul", "(", "joints2d_feat", ",", "rgb_joints_feat", ")", "\n", "d2joints_logits", "=", "torch", ".", "matmul", "(", "joints2d_feat", ",", "d_joints_feat", ")", "\n", "\n", "if", "use_rgb2d", ":", "\n", "            ", "rgb2d_logits", "=", "torch", ".", "matmul", "(", "rgb_joints_feat", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "d_joints_feat", ")", "\n", "\n", "", "rgb2joints_logits", "=", "rgb2joints_logits", "/", "self", ".", "args", ".", "temperature", "\n", "d2joints_logits", "=", "d2joints_logits", "/", "self", ".", "args", ".", "temperature", "\n", "\n", "if", "use_rgb2d", ":", "\n", "            ", "rgb2d_logits", "=", "rgb2d_logits", "/", "self", ".", "args", ".", "temperature", "\n", "\n", "", "bs", "=", "original_joints2d", ".", "shape", "[", "0", "]", "\n", "target", "=", "torch", ".", "arange", "(", "joints_vis", ".", "shape", "[", "1", "]", ")", ".", "long", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "bs", ",", "1", ")", ".", "cuda", "(", ")", "\n", "assert", "joints_vis", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", "\n", "assert", "joints_vis", ".", "shape", "[", "1", "]", "==", "target", ".", "shape", "[", "1", "]", "\n", "target", "[", "torch", ".", "logical_not", "(", "joints_vis", ")", "]", "=", "-", "100", "\n", "\n", "depth_target", "=", "target", ".", "clone", "(", ")", "\n", "if", "use_depth", "is", "not", "None", ":", "\n", "            ", "depth_target", "[", "torch", ".", "logical_not", "(", "use_depth", ")", "]", "=", "-", "100", "\n", "\n", "", "losses", "=", "[", "\n", "criterion_pri3d", "[", "0", "]", "(", "rgb2joints_logits", ",", "target", ")", ",", "\n", "criterion_pri3d", "[", "1", "]", "(", "d2joints_logits", ",", "depth_target", ")", ",", "\n", "]", "\n", "\n", "if", "use_rgb2d", ":", "\n", "            ", "losses", ".", "append", "(", "criterion_pri3d", "[", "1", "]", "(", "rgb2d_logits", ",", "depth_target", ")", ")", "\n", "\n", "", "rgb2joints_pred", "=", "rgb2joints_logits", ".", "argmax", "(", "-", "2", ")", "\n", "d2joints_pred", "=", "d2joints_logits", ".", "argmax", "(", "-", "2", ")", "\n", "\n", "target_denom", "=", "(", "target", "!=", "-", "100", ")", ".", "sum", "(", "-", "1", ")", "\n", "target_denom_copy", "=", "(", "target", "!=", "-", "100", ")", ".", "sum", "(", "-", "1", ")", "\n", "target_denom", "[", "target_denom", "==", "0", "]", "=", "1", "\n", "\n", "depth_target_denom", "=", "(", "depth_target", "!=", "-", "100", ")", ".", "sum", "(", "-", "1", ")", "\n", "depth_target_denom_copy", "=", "(", "depth_target", "!=", "-", "100", ")", ".", "sum", "(", "-", "1", ")", "\n", "depth_target_denom", "[", "depth_target_denom", "==", "0", "]", "=", "1", "\n", "\n", "rgb2joints_acc", "=", "(", "rgb2joints_pred", "==", "target", ")", ".", "sum", "(", "-", "1", ")", ".", "float", "(", ")", "/", "target_denom", "\n", "d2joints_acc", "=", "(", "d2joints_pred", "==", "depth_target", ")", ".", "sum", "(", "-", "1", ")", ".", "float", "(", ")", "/", "depth_target_denom", "\n", "\n", "# rgb2joints_acc[target_denom_copy == 0] = 0.5", "\n", "# d2joints_acc[depth_target_denom_copy == 0] = 0.5", "\n", "rgb2joints_acc_valid", "=", "rgb2joints_acc", "[", "target_denom_copy", "!=", "0", "]", "\n", "d2joints_acc_valid", "=", "d2joints_acc", "[", "depth_target_denom_copy", "!=", "0", "]", "\n", "\n", "acces", "=", "[", "rgb2joints_acc_valid", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "d2joints_acc_valid", ".", "float", "(", ")", ".", "mean", "(", ")", "]", "\n", "\n", "if", "use_rgb2d", ":", "\n", "            ", "rgb2d_pred", "=", "rgb2d_logits", ".", "argmax", "(", "-", "2", ")", "\n", "rgb2d_acc", "=", "(", "rgb2d_pred", "==", "depth_target", ")", ".", "sum", "(", "-", "1", ")", ".", "float", "(", ")", "/", "depth_target_denom", "\n", "rgb2d_acc_valid", "=", "rgb2d_acc", "[", "depth_target_denom_copy", "!=", "0", "]", "\n", "acces", ".", "append", "(", "rgb2d_acc_valid", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "\n", "", "return", "losses", ",", "acces", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer._compute_cross_subject_joints_pri3d_loss": [[830, 893], ["torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "positive_ind.repeat().reshape.repeat().reshape.repeat().reshape", "numpy.diag_indices", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.cat.reshape().repeat().reshape", "torch.cat.reshape().repeat().reshape", "torch.cat.reshape().repeat().reshape", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "not_use_rgb.reshape().repeat().reshape.reshape().repeat().reshape.reshape().repeat().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "positive_ind.repeat().reshape.repeat().reshape.sum", "positive_logits_mean.mean", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "downsampled_joints2d.long.long.long", "sample_ind.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "merge_all_res.permute", "merge_all_res.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "x[].size", "x[].size", "isinstance", "isinstance", "contrast_trainer.ContrastTrainer._compute_soft_pri3d_loss_accuracy.merge_all_res"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.merge_all_res"], ["", "def", "_compute_cross_subject_joints_pri3d_loss", "(", "self", ",", "_feat_rgb", ",", "_feat_d", ",", "_feat_joints2d", ",", "criterion_pri3d", ",", "original_joints2d", ",", "joints_vis", ",", "use_depth", "=", "None", ",", "ready_joint_feat", "=", "False", ",", "index", "=", "None", ",", "memory", "=", "None", ",", "use_rgb", "=", "None", ")", ":", "\n", "        ", "def", "merge_all_res", "(", "x", ")", ":", "\n", "            ", "ALIGN_CORNERS", "=", "False", "\n", "x0_h", ",", "x0_w", "=", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x2", "=", "F", ".", "interpolate", "(", "x", "[", "2", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x3", "=", "F", ".", "interpolate", "(", "x", "[", "3", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", "0", "]", ",", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "return", "x", "\n", "\n", "", "if", "not", "ready_joint_feat", ":", "\n", "            ", "if", "isinstance", "(", "_feat_rgb", ",", "list", ")", "and", "isinstance", "(", "_feat_d", ",", "list", ")", ":", "\n", "                ", "_feat_rgb", "=", "merge_all_res", "(", "_feat_rgb", ")", "\n", "_feat_d", "=", "merge_all_res", "(", "_feat_d", ")", "\n", "\n", "", "if", "use_depth", "is", "not", "None", ":", "\n", "                ", "if", "use_depth", ".", "sum", "(", ")", "==", "0", ":", "\n", "                    ", "return", "[", "(", "_feat_rgb", "-", "_feat_rgb", "+", "_feat_d", "-", "_feat_d", ")", ".", "mean", "(", ")", "for", "_", "in", "range", "(", "4", ")", "]", ",", "[", "np", ".", "array", "(", "[", "0", "]", ")", "for", "_", "in", "range", "(", "4", ")", "]", "\n", "\n", "", "", "bs", ",", "fdim", ",", "h", ",", "w", "=", "_feat_rgb", ".", "shape", "\n", "num_joints", "=", "original_joints2d", ".", "shape", "[", "-", "2", "]", "\n", "assert", "h", "==", "w", "\n", "downsampled_joints2d", "=", "original_joints2d", "//", "4", "\n", "downsampled_joints2d", "=", "downsampled_joints2d", ".", "long", "(", ")", "\n", "downsampled_joints2d", "[", "downsampled_joints2d", ">=", "h", "]", "=", "h", "-", "1", "\n", "downsampled_joints2d", "[", "downsampled_joints2d", "<", "0", "]", "=", "0", "\n", "sample_ind", "=", "downsampled_joints2d", "[", ":", ",", ":", ",", "0", "]", "*", "h", "+", "downsampled_joints2d", "[", ":", ",", ":", ",", "1", "]", "\n", "assert", "sample_ind", ".", "max", "(", ")", "<", "h", "*", "w", "and", "sample_ind", ".", "min", "(", ")", ">=", "0", "\n", "sample_ind", "=", "sample_ind", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "fdim", ",", "1", ")", "\n", "rgb_joints_feat", "=", "torch", ".", "gather", "(", "_feat_rgb", ".", "reshape", "(", "bs", ",", "fdim", ",", "h", "*", "w", ")", ",", "2", ",", "sample_ind", ")", "\n", "d_joints_feat", "=", "torch", ".", "gather", "(", "_feat_d", ".", "reshape", "(", "bs", ",", "fdim", ",", "h", "*", "w", ")", ",", "2", ",", "sample_ind", ")", "\n", "", "else", ":", "\n", "            ", "bs", ",", "num_joints", ",", "fdim", "=", "_feat_rgb", ".", "shape", "\n", "rgb_joints_feat", "=", "_feat_rgb", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "d_joints_feat", "=", "_feat_d", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "temp", "=", "self", ".", "args", ".", "temperature", "\n", "rgb_joints_feat", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "rgb_joints_feat", ",", "dim", "=", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "bs", "*", "num_joints", ",", "fdim", ")", "\n", "d_joints_feat", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "d_joints_feat", ",", "dim", "=", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "bs", "*", "num_joints", ",", "fdim", ")", "\n", "\n", "cat_feat", "=", "torch", ".", "cat", "(", "[", "rgb_joints_feat", ",", "d_joints_feat", "]", ",", "0", ")", "\n", "logits", "=", "torch", ".", "matmul", "(", "cat_feat", ",", "cat_feat", ".", "permute", "(", "1", ",", "0", ")", ")", "/", "temp", "# 2*num_joints*bs x 2*num_joints*bs", "\n", "logsoftmax_logits", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "logits", ",", "1", ")", "\n", "positive_ind", "=", "torch", ".", "zeros", "(", "[", "num_joints", ",", "2", "*", "bs", "*", "num_joints", "]", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "num_joints", ")", ":", "\n", "            ", "positive_ind", "[", "i", ",", "i", ":", ":", "num_joints", "]", "=", "1", "\n", "", "positive_ind", "=", "positive_ind", ".", "repeat", "(", "2", "*", "bs", ",", "1", ")", ".", "reshape", "(", "2", "*", "bs", "*", "num_joints", ",", "2", "*", "bs", "*", "num_joints", ")", "\n", "ind", "=", "np", ".", "diag_indices", "(", "2", "*", "bs", "*", "num_joints", ")", "\n", "positive_ind", "[", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", "=", "0", "\n", "not_use_depth", "=", "torch", ".", "logical_not", "(", "use_depth", ")", "\n", "not_use_depth", "=", "not_use_depth", ".", "reshape", "(", "bs", ",", "1", ")", ".", "repeat", "(", "1", ",", "num_joints", ")", ".", "reshape", "(", "bs", "*", "num_joints", ")", "\n", "not_use_rgb", "=", "torch", ".", "logical_not", "(", "use_rgb", ")", "\n", "not_use_rgb", "=", "not_use_rgb", ".", "reshape", "(", "bs", ",", "1", ")", ".", "repeat", "(", "1", ",", "num_joints", ")", ".", "reshape", "(", "bs", "*", "num_joints", ")", "\n", "not_use_depth", "=", "torch", ".", "cat", "(", "[", "not_use_rgb", ",", "not_use_depth", "]", ")", "\n", "positive_ind", "[", "not_use_depth", ",", ":", "]", "=", "0", "\n", "positive_ind", "[", ":", ",", "not_use_depth", "]", "=", "0", "\n", "\n", "positive_logits", "=", "logsoftmax_logits", "*", "positive_ind", "\n", "positive_ind_sum", "=", "positive_ind", ".", "sum", "(", "-", "1", ")", "\n", "positive_ind_sum", "[", "positive_ind_sum", "==", "0", "]", "=", "1", "\n", "positive_logits_mean", "=", "-", "positive_logits", ".", "sum", "(", "-", "1", ")", "/", "positive_ind_sum", "\n", "loss", "=", "positive_logits_mean", ".", "mean", "(", ")", "\n", "return", "[", "loss", "]", ",", "[", "np", ".", "array", "(", "[", "0", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer._train_bank_joints_pri3d_cmc3": [[894, 1040], ["model.train", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "time.time", "enumerate", "util.AverageMeter.update", "data[].float().cuda", "data[].cuda", "data[].cuda", "data[].cuda", "data[].cuda", "data[].cuda", "data[].cuda", "data[].float().cuda.size", "contrast_trainer.ContrastTrainer.warmup_learning_rate", "contrast_trainer.ContrastTrainer._global_gather", "contrast_trainer.ContrastTrainer._global_gather", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "contrast", "contrast_trainer.ContrastTrainer._compute_loss_accuracy", "contrast_trainer.ContrastTrainer._compute_soft_pri3d_loss_accuracy", "contrast_trainer.ContrastTrainer._compute_joints_pri3d_loss_accuracy", "contrast_trainer.ContrastTrainer._compute_cross_subject_joints_pri3d_loss", "optimizer.zero_grad", "optimizer.step", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "time.time", "data[].cuda", "[].item", "[].item", "data[].cuda", "len", "model", "model", "data[].cuda", "data[].cuda", "sum", "loss.backward", "loss.item", "update_acc_12.item", "update_acc_23.item", "update_acc_13.item", "losses_clip[].item", "losses_clip[].item", "accuracies_clip[].item", "accuracies_clip[].item", "loss_joints[].item", "loss_joints[].item", "accuracies_joints[].item", "accuracies_joints[].item", "loss_scl[].item", "time.time", "data[].float", "sum", "amp.scale_loss", "scaled_loss.backward", "time.time", "print", "sys.stdout.flush", "sum", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.warmup_learning_rate", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._global_gather", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._global_gather", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.contrast", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_loss_accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_soft_pri3d_loss_accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_joints_pri3d_loss_accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_cross_subject_joints_pri3d_loss", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward"], ["", "def", "_train_bank_joints_pri3d_cmc3", "(", "self", ",", "epoch", ",", "train_loader", ",", "model", ",", "contrast", ",", "\n", "criterion_contrast", ",", "criterion_pri3d", ",", "optimizer", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "model", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "acc1_meter", "=", "AverageMeter", "(", ")", "\n", "acc2_meter", "=", "AverageMeter", "(", ")", "\n", "acc3_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "loss_jig_meter", "=", "AverageMeter", "(", ")", "\n", "acc_jig_meter", "=", "AverageMeter", "(", ")", "\n", "loss_rgb2depth_meter", "=", "AverageMeter", "(", ")", "\n", "loss_depth2rgb_meter", "=", "AverageMeter", "(", ")", "\n", "acc_rgb2depth_meter", "=", "AverageMeter", "(", ")", "\n", "acc_depth2rgb_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "loss_rgb2joint_meter", "=", "AverageMeter", "(", ")", "\n", "loss_d2joint_meter", "=", "AverageMeter", "(", ")", "\n", "acc_rgb2joint_meter", "=", "AverageMeter", "(", ")", "\n", "acc_d2joint_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "loss_scl_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "inputs", "=", "data", "[", "0", "]", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "index", "=", "data", "[", "1", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "skeleton", "=", "data", "[", "2", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "original_joints2d", "=", "data", "[", "4", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "joints_vis", "=", "data", "[", "5", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "depth_mask", "=", "data", "[", "7", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "scale", "=", "data", "[", "8", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "if", "args", ".", "arch", "==", "'HRNetPN'", ":", "\n", "                ", "grid_xy", "=", "data", "[", "12", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "original_h", "=", "data", "[", "13", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "original_w", "=", "data", "[", "14", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "mean", "=", "data", "[", "15", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "bsz", "=", "inputs", ".", "size", "(", "0", ")", "\n", "\n", "# warm-up learning rate", "\n", "self", ".", "warmup_learning_rate", "(", "\n", "epoch", ",", "idx", ",", "len", "(", "train_loader", ")", ",", "optimizer", ")", "\n", "\n", "# compute feature", "\n", "if", "args", ".", "arch", "==", "'HRNetPN'", ":", "\n", "                ", "_feat1", ",", "_feat2", ",", "_feat3", ",", "f", ",", "aux_dict", "=", "model", "(", "inputs", ",", "skeleton", ",", "depth_mask", ",", "grid_xy", ",", "original_h", ",", "original_w", ",", "mean", ",", "return_fm", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "_feat1", ",", "_feat2", ",", "_feat3", ",", "f", ",", "aux_dict", "=", "model", "(", "inputs", ",", "skeleton", ",", "return_fm", "=", "True", ")", "\n", "\n", "# gather all feature and index", "\n", "", "all_f", "=", "self", ".", "_global_gather", "(", "f", ")", "\n", "all_index", "=", "self", ".", "_global_gather", "(", "index", ")", "\n", "\n", "# loss and metrics", "\n", "f1", ",", "f2", ",", "f3", "=", "torch", ".", "chunk", "(", "f", ",", "3", ",", "dim", "=", "1", ")", "\n", "all_f1", ",", "all_f2", ",", "all_f3", "=", "torch", ".", "chunk", "(", "all_f", ",", "3", ",", "dim", "=", "1", ")", "\n", "output", "=", "contrast", "(", "f1", ",", "f2", ",", "f3", ",", "index", ",", "all_f1", ",", "all_f2", ",", "all_f3", ",", "all_index", ")", "\n", "if", "args", ".", "modality_missing", ":", "\n", "                ", "use_depth", "=", "data", "[", "6", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "use_depth", "=", "None", "\n", "", "try", ":", "\n", "                ", "use_rgb", "=", "data", "[", "11", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "except", ":", "\n", "                ", "use_rgb", "=", "None", "\n", "", "losses", ",", "accuracies", "=", "self", ".", "_compute_loss_accuracy", "(", "\n", "logits", "=", "output", "[", ":", "-", "1", "]", ",", "target", "=", "output", "[", "-", "1", "]", ",", "\n", "criterion", "=", "criterion_contrast", ",", "use_depth", "=", "use_depth", ")", "\n", "\n", "losses_clip", ",", "accuracies_clip", "=", "self", ".", "_compute_soft_pri3d_loss_accuracy", "(", "\n", "aux_dict", "[", "'linear_merge1'", "]", ",", "aux_dict", "[", "'linear_merge2'", "]", ",", "inputs", "[", ":", ",", "3", ",", ":", ",", ":", "]", ",", "criterion_pri3d", ",", "use_depth", "=", "use_depth", ",", "depth_mask", "=", "depth_mask", ",", "scale", "=", "scale", ")", "\n", "\n", "loss_joints", ",", "accuracies_joints", "=", "self", ".", "_compute_joints_pri3d_loss_accuracy", "(", "\n", "aux_dict", "[", "'linear_merge1'", "]", ",", "aux_dict", "[", "'linear_merge2'", "]", ",", "_feat3", ",", "criterion_pri3d", ",", "original_joints2d", ",", "joints_vis", ",", "use_depth", "=", "use_depth", "\n", ")", "\n", "\n", "loss_scl", ",", "_", "=", "self", ".", "_compute_cross_subject_joints_pri3d_loss", "(", "\n", "aux_dict", "[", "'linear_merge1'", "]", ",", "aux_dict", "[", "'linear_merge2'", "]", ",", "None", ",", "criterion_pri3d", ",", "original_joints2d", ",", "joints_vis", ",", "use_depth", "=", "use_depth", ",", "index", "=", "index", ",", "memory", "=", "contrast", ".", "memory_3", ",", "use_rgb", "=", "use_rgb", ",", "\n", ")", "\n", "\n", "loss", "=", "sum", "(", "losses", ")", "+", "sum", "(", "losses_clip", ")", "+", "sum", "(", "loss_joints", ")", "+", "sum", "(", "loss_scl", ")", "\n", "\n", "update_loss_12", "=", "0.5", "*", "(", "losses", "[", "0", "]", "+", "losses", "[", "1", "]", ")", "\n", "update_acc_12", "=", "0.5", "*", "(", "accuracies", "[", "0", "]", "+", "accuracies", "[", "1", "]", ")", "\n", "update_loss_23", "=", "0.5", "*", "(", "losses", "[", "2", "]", "+", "losses", "[", "3", "]", ")", "\n", "update_acc_23", "=", "0.5", "*", "(", "accuracies", "[", "2", "]", "+", "accuracies", "[", "3", "]", ")", "\n", "update_loss_13", "=", "0.5", "*", "(", "losses", "[", "4", "]", "+", "losses", "[", "5", "]", ")", "\n", "update_acc_13", "=", "0.5", "*", "(", "accuracies", "[", "4", "]", "+", "accuracies", "[", "5", "]", ")", "\n", "\n", "# backward", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "args", ".", "amp", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# update meters", "\n", "loss_meter", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc1_meter", ".", "update", "(", "update_acc_12", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc2_meter", ".", "update", "(", "update_acc_23", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc3_meter", ".", "update", "(", "update_acc_13", ".", "item", "(", ")", ",", "bsz", ")", "\n", "\n", "loss_rgb2depth_meter", ".", "update", "(", "losses_clip", "[", "0", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "loss_depth2rgb_meter", ".", "update", "(", "losses_clip", "[", "1", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc_rgb2depth_meter", ".", "update", "(", "accuracies_clip", "[", "0", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc_depth2rgb_meter", ".", "update", "(", "accuracies_clip", "[", "1", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "\n", "loss_rgb2joint_meter", ".", "update", "(", "loss_joints", "[", "0", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "loss_d2joint_meter", ".", "update", "(", "loss_joints", "[", "1", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc_rgb2joint_meter", ".", "update", "(", "accuracies_joints", "[", "0", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc_d2joint_meter", ".", "update", "(", "accuracies_joints", "[", "1", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "\n", "loss_scl_meter", ".", "update", "(", "loss_scl", "[", "0", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# print info", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "if", "(", "idx", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                    ", "print", "(", "'Train: [{0}][{1}/{2}]\\t'", "\n", "'BT {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'DT {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'L {loss.val:.3f} ({loss.avg:.3f})\\t'", "\n", "'a_I {acc1.avg:.3f} {acc2.avg:.3f} {acc3.avg:.3f}\\t'", "\n", "'p3d {loss_rgb2depth.avg:.3f} {acc_rgb2depth.avg:.3f} {loss_depth2rgb.avg:.3f} {acc_depth2rgb.avg:.3f}\\t'", "\n", "'j {loss_rgb2joint.avg:.3f} {acc_rgb2joint.avg:.3f} {loss_d2joint.avg:.3f} {acc_d2joint.avg:.3f}\\t'", "\n", "'scl {loss_scl_meter.avg:.3f}'", ".", "format", "(", "\n", "epoch", ",", "idx", "+", "1", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "loss_meter", ",", "\n", "data_time", "=", "data_time", ",", "acc1", "=", "acc1_meter", ",", "acc2", "=", "acc2_meter", ",", "acc3", "=", "acc3_meter", ",", "\n", "loss_rgb2depth", "=", "loss_rgb2depth_meter", ",", "loss_depth2rgb", "=", "loss_depth2rgb_meter", ",", "\n", "acc_rgb2depth", "=", "acc_rgb2depth_meter", ",", "acc_depth2rgb", "=", "acc_depth2rgb_meter", ",", "\n", "loss_rgb2joint", "=", "loss_rgb2joint_meter", ",", "acc_rgb2joint", "=", "acc_rgb2joint_meter", ",", "\n", "loss_d2joint", "=", "loss_d2joint_meter", ",", "acc_d2joint", "=", "acc_d2joint_meter", ",", "\n", "loss_scl_meter", "=", "loss_scl_meter", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "", "return", "loss_meter", ".", "avg", ",", "acc1_meter", ".", "avg", ",", "loss_jig_meter", ".", "avg", ",", "acc_jig_meter", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.contrast_trainer.ContrastTrainer.momentum_update": [[1041, 1046], ["zip", "model.parameters", "model_ema.parameters", "p2.data.mul_().add_", "p2.data.mul_", "p1.detach"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "momentum_update", "(", "model", ",", "model_ema", ",", "m", ")", ":", "\n", "        ", "\"\"\" model_ema = m * model_ema + (1 - m) model \"\"\"", "\n", "for", "p1", ",", "p2", "in", "zip", "(", "model", ".", "parameters", "(", ")", ",", "model_ema", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "p2", ".", "data", ".", "mul_", "(", "m", ")", ".", "add_", "(", "1", "-", "m", ",", "p1", ".", "detach", "(", ")", ".", "data", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.__init__": [[56, 65], ["base_trainer.BaseTrainer.__init__", "open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "SegTrainer", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "# self.lambda1 = 0.5", "\n", "# self.lambda2 = 0.05", "\n", "# self.lambda1 = 2.0", "\n", "# self.lambda2 = 20.0", "\n", "self", ".", "lambda1", "=", "0.125", "\n", "self", ".", "lambda2", "=", "10.0", "\n", "self", ".", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "tb_folder", ",", "'log.txt'", ")", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.mprint": [[66, 70], ["segment_trainer.SegTrainer.f.write", "print", "segment_trainer.SegTrainer.f.flush"], "methods", ["None"], ["", "def", "mprint", "(", "self", ",", "string", ")", ":", "\n", "        ", "self", ".", "f", ".", "write", "(", "string", "+", "'\\n'", ")", "\n", "print", "(", "string", ")", "\n", "self", ".", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.logging": [[71, 88], ["segment_trainer.SegTrainer.logger.log_value", "segment_trainer.SegTrainer.logger.log_value", "segment_trainer.SegTrainer.logger.log_value", "segment_trainer.SegTrainer.logger.log_value"], "methods", ["None"], ["", "def", "logging", "(", "self", ",", "epoch", ",", "logs", ",", "lr", "=", "None", ",", "train", "=", "True", ")", ":", "\n", "        ", "\"\"\" d to tensorboard\n\n        Args:\n          epoch: training epoch\n          logs: loss and accuracy\n          lr: learning rate\n          train: True of False\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "pre", "=", "'train_'", "if", "train", "else", "'test_'", "\n", "self", ".", "logger", ".", "log_value", "(", "pre", "+", "'miou'", ",", "logs", "[", "0", "]", ",", "epoch", ")", "\n", "self", ".", "logger", ".", "log_value", "(", "pre", "+", "'macc'", ",", "logs", "[", "1", "]", ",", "epoch", ")", "\n", "self", ".", "logger", ".", "log_value", "(", "pre", "+", "'aacc'", ",", "logs", "[", "2", "]", ",", "epoch", ")", "\n", "if", "train", "and", "(", "lr", "is", "not", "None", ")", ":", "\n", "                ", "self", ".", "logger", ".", "log_value", "(", "'learning_rate'", ",", "lr", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.wrap_up": [[89, 103], ["torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "", "", "def", "wrap_up", "(", "self", ",", "model", ",", "classifier", ")", ":", "\n", "        ", "\"\"\"Wrap up models with DDP\n\n        Args:\n          model: pretrained encoder\n          classifier: linear classifier\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "classifier", "=", "classifier", ".", "cuda", "(", ")", "\n", "model", "=", "DDP", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "classifier", "=", "DDP", "(", "classifier", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "\n", "return", "model", ",", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.broadcast_memory": [[104, 115], ["torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast"], "methods", ["None"], ["", "def", "broadcast_memory", "(", "self", ",", "contrast", ")", ":", "\n", "        ", "\"\"\"Synchronize memory buffers\n\n        Args:\n          contrast: memory.\n        \"\"\"", "\n", "if", "self", ".", "args", ".", "modal", "==", "'RGB'", ":", "\n", "            ", "dist", ".", "broadcast", "(", "contrast", ".", "memory", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "dist", ".", "broadcast", "(", "contrast", ".", "memory_1", ",", "0", ")", "\n", "dist", ".", "broadcast", "(", "contrast", ".", "memory_2", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.gather_eval_counter": [[116, 139], ["os.path.join", "torch.barrier", "torch.barrier", "torch.barrier", "pickle.dump", "torch.barrier", "torch.barrier", "torch.barrier", "range", "os.path.exists", "os.makedirs", "open", "os.path.join", "pickle.load", "os.path.join", "open"], "methods", ["None"], ["", "", "def", "gather_eval_counter", "(", "self", ",", "intersect", ",", "union", ",", "pred_label", ",", "label", ")", ":", "\n", "        ", "folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "tb_folder", ",", "'tmp'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "pickle", ".", "dump", "(", "{", "\n", "'intersect'", ":", "intersect", ",", "\n", "'union'", ":", "union", ",", "\n", "'pred_label'", ":", "pred_label", ",", "\n", "'label'", ":", "label", ",", "\n", "}", ",", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "'evaluator_part{}.pkl'", ".", "format", "(", "self", ".", "args", ".", "rank", ")", ")", ",", "'wb'", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "if", "self", ".", "args", ".", "rank", "!=", "0", ":", "\n", "            ", "return", "intersect", ",", "union", ",", "pred_label", ",", "label", "\n", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "world_size", ")", ":", "\n", "            ", "part_file", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'evaluator_part{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_dict", "=", "pickle", ".", "load", "(", "open", "(", "part_file", ",", "'rb'", ")", ")", "\n", "intersect", "+=", "part_dict", "[", "'intersect'", "]", "\n", "union", "+=", "part_dict", "[", "'union'", "]", "\n", "pred_label", "+=", "part_dict", "[", "'pred_label'", "]", "\n", "label", "+=", "part_dict", "[", "'label'", "]", "\n", "\n", "", "return", "intersect", ",", "union", ",", "pred_label", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.load_encoder_weights": [[140, 170], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "contrast.load_state_dict", "collections.OrderedDict", "collections.OrderedDict", "state_dict.items", "model.encoder1.load_state_dict", "model.encoder2.load_state_dict", "print", "print", "print", "print", "k.replace.replace.replace", "k.replace.replace.replace", "k.replace.replace.replace"], "methods", ["None"], ["", "def", "load_encoder_weights", "(", "self", ",", "model", ",", "contrast", ")", ":", "\n", "        ", "\"\"\"load pre-trained weights for encoder\n\n        Args:\n          model: pretrained encoder\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "if", "args", ".", "ckpt", ":", "\n", "            ", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "ckpt", ",", "map_location", "=", "'cpu'", ")", "\n", "state_dict", "=", "ckpt", "[", "'model'", "]", "\n", "contrast", ".", "load_state_dict", "(", "ckpt", "[", "'contrast'", "]", ")", "\n", "encoder1_state_dict", "=", "OrderedDict", "(", ")", "\n", "encoder2_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "                ", "k", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "\n", "if", "'encoder1'", "in", "k", ":", "\n", "                    ", "k", "=", "k", ".", "replace", "(", "'encoder1.'", ",", "''", ")", "\n", "encoder1_state_dict", "[", "k", "]", "=", "v", "\n", "", "if", "'encoder2'", "in", "k", ":", "\n", "                    ", "k", "=", "k", ".", "replace", "(", "'encoder2.'", ",", "''", ")", "\n", "encoder2_state_dict", "[", "k", "]", "=", "v", "\n", "", "", "model", ".", "encoder1", ".", "load_state_dict", "(", "encoder1_state_dict", ")", "\n", "model", ".", "encoder2", ".", "load_state_dict", "(", "encoder2_state_dict", ")", "\n", "print", "(", "'Pre-trained weights loaded!'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'=============================='", ")", "\n", "print", "(", "'warning: no pre-trained model!'", ")", "\n", "print", "(", "'=============================='", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.resume_model": [[171, 191], ["os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "contrast.load_state_dict", "classifier.load_state_dict", "optimizer.load_state_dict", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print"], "methods", ["None"], ["", "def", "resume_model", "(", "self", ",", "model", ",", "contrast", ",", "classifier", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"load classifier checkpoint\"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "start_epoch", "=", "1", "\n", "if", "args", ".", "resume", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "contrast", ".", "load_state_dict", "(", "checkpoint", "[", "'contrast'", "]", ")", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'classifier'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "del", "checkpoint", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "return", "start_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.save": [[192, 213], ["print", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.state_dict", "contrast.state_dict", "classifier.state_dict", "optimizer.state_dict", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save"], ["", "def", "save", "(", "self", ",", "model", ",", "contrast", ",", "classifier", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"save classifier to checkpoint\"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "# saving the classifier to each instance", "\n", "            ", "print", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'contrast'", ":", "contrast", ".", "state_dict", "(", ")", ",", "\n", "'classifier'", ":", "classifier", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_folder", ",", "'current.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_file", ")", "\n", "if", "epoch", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "                ", "save_file", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "model_folder", ",", "'ckpt_epoch_{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_file", ")", "\n", "# help release GPU memory", "\n", "", "del", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.save_seg_models": [[214, 228], ["print", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.state_dict", "classifier.state_dict"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save"], ["", "", "def", "save_seg_models", "(", "self", ",", "model", ",", "classifier", ",", "epoch", ",", "res", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "# saving the classifier to each instance", "\n", "            ", "print", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'classifier'", ":", "classifier", ".", "state_dict", "(", ")", ",", "\n", "'results'", ":", "res", ",", "\n", "}", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_folder", ",", "'best_seg.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_file", ")", "\n", "del", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.merge_all_res": [[229, 238], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x[].size", "x[].size"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "merge_all_res", "(", "x", ")", ":", "\n", "        ", "ALIGN_CORNERS", "=", "False", "\n", "x0_h", ",", "x0_w", "=", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x2", "=", "F", ".", "interpolate", "(", "x", "[", "2", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x3", "=", "F", ".", "interpolate", "(", "x", "[", "3", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "_x", "=", "torch", ".", "cat", "(", "[", "x", "[", "0", "]", ",", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "return", "_x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._global_gather": [[239, 245], ["torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size"], ["", "@", "staticmethod", "\n", "def", "_global_gather", "(", "x", ")", ":", "\n", "        ", "all_x", "=", "[", "torch", ".", "ones_like", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "dist", ".", "all_gather", "(", "all_x", ",", "x", ",", "async_op", "=", "False", ")", "\n", "return", "torch", ".", "cat", "(", "all_x", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._shuffle_bn": [[246, 290], ["x.size", "torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "segment_trainer.SegTrainer._global_gather", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "x.contiguous", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "model_ema", "model_ema", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._global_gather", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size"], ["", "def", "_shuffle_bn", "(", "self", ",", "x", ",", "model_ema", ")", ":", "\n", "        ", "\"\"\" Shuffle BN implementation\n\n        Args:\n          x: input image on each GPU/process\n          model_ema: momentum encoder on each GPU/process\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "local_gp", "=", "self", ".", "local_group", "\n", "bsz", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "# gather x locally for each node", "\n", "node_x", "=", "[", "torch", ".", "ones_like", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", "local_gp", ")", ")", "]", "\n", "dist", ".", "all_gather", "(", "node_x", ",", "x", ".", "contiguous", "(", ")", ",", "\n", "group", "=", "local_gp", ",", "async_op", "=", "False", ")", "\n", "node_x", "=", "torch", ".", "cat", "(", "node_x", ",", "dim", "=", "0", ")", "\n", "\n", "# shuffle bn", "\n", "shuffle_ids", "=", "torch", ".", "randperm", "(", "\n", "bsz", "*", "dist", ".", "get_world_size", "(", "local_gp", ")", ")", ".", "cuda", "(", ")", "\n", "reverse_ids", "=", "torch", ".", "argsort", "(", "shuffle_ids", ")", "\n", "dist", ".", "broadcast", "(", "shuffle_ids", ",", "0", ")", "\n", "dist", ".", "broadcast", "(", "reverse_ids", ",", "0", ")", "\n", "\n", "this_ids", "=", "shuffle_ids", "[", "args", ".", "local_rank", "*", "bsz", ":", "(", "args", ".", "local_rank", "+", "1", ")", "*", "bsz", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "this_x", "=", "node_x", "[", "this_ids", "]", "\n", "if", "args", ".", "jigsaw", ":", "\n", "                ", "k", "=", "model_ema", "(", "this_x", ",", "x_jig", "=", "None", ",", "mode", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "k", "=", "model_ema", "(", "this_x", ",", "mode", "=", "1", ")", "\n", "\n", "# globally gather k", "\n", "", "", "all_k", "=", "self", ".", "_global_gather", "(", "k", ")", "\n", "\n", "# unshuffle bn", "\n", "node_id", "=", "args", ".", "node_rank", "\n", "ngpus", "=", "args", ".", "ngpus_per_node", "\n", "node_k", "=", "all_k", "[", "node_id", "*", "ngpus", "*", "bsz", ":", "(", "node_id", "+", "1", ")", "*", "ngpus", "*", "bsz", "]", "\n", "this_ids", "=", "reverse_ids", "[", "args", ".", "local_rank", "*", "bsz", ":", "(", "args", ".", "local_rank", "+", "1", ")", "*", "bsz", "]", "\n", "k", "=", "node_k", "[", "this_ids", "]", "\n", "\n", "return", "k", ",", "all_k", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_loss_accuracy": [[291, 333], ["util.accuracy", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and.sum", "torch.logical_and.sum", "torch.logical_and.sum", "criterion", "segment_trainer.SegTrainer._compute_loss_accuracy.acc"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.accuracy"], ["", "@", "staticmethod", "\n", "def", "_compute_loss_accuracy", "(", "logits", ",", "target", ",", "criterion", ",", "use_depth", "=", "None", ",", "use_rgb", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n          logits: a list of logits, each with a contrastive task\n          target: contrastive learning target\n          criterion: typically nn.CrossEntropyLoss\n        \"\"\"", "\n", "def", "acc", "(", "l", ",", "t", ")", ":", "\n", "            ", "acc1", "=", "accuracy", "(", "l", ",", "t", ")", "\n", "return", "acc1", "[", "0", "]", "\n", "", "if", "use_rgb", "is", "not", "None", ":", "\n", "            ", "assert", "use_depth", "is", "not", "None", "\n", "depth_ind", "=", "(", "use_depth", "==", "1", ")", "\n", "rgb_ind", "=", "(", "use_rgb", "==", "1", ")", "\n", "together_ind", "=", "torch", ".", "logical_and", "(", "depth_ind", ",", "rgb_ind", ")", "\n", "if", "together_ind", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "losses", "=", "[", "(", "logit", "-", "logit", ")", ".", "sum", "(", ")", "for", "logit", "in", "logits", "[", ":", "-", "2", "]", "]", "+", "[", "criterion", "(", "logit", ",", "target", ")", "for", "logit", "in", "logits", "[", "-", "2", ":", "]", "]", "\n", "accuracies", "=", "[", "np", ".", "array", "(", "[", "0", "]", ")", "for", "logit", "in", "logits", "[", ":", "-", "2", "]", "]", "+", "[", "acc", "(", "logit", ",", "target", ")", "for", "logit", "in", "logits", "[", "-", "2", ":", "]", "]", "\n", "return", "losses", ",", "accuracies", "\n", "", "losses", "=", "[", "criterion", "(", "logit", "[", "together_ind", "]", ",", "target", "[", "together_ind", "]", ")", "for", "logit", "in", "logits", "]", "\n", "accuracies", "=", "[", "acc", "(", "logit", "[", "together_ind", "]", ",", "target", "[", "together_ind", "]", ")", "for", "logit", "in", "logits", "]", "\n", "", "elif", "use_depth", "is", "not", "None", ":", "\n", "            ", "depth_ind", "=", "(", "use_depth", "==", "1", ")", "\n", "if", "use_depth", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "losses", "=", "[", "(", "logit", "-", "logit", ")", ".", "sum", "(", ")", "for", "logit", "in", "logits", "[", ":", "-", "2", "]", "]", "+", "[", "criterion", "(", "logit", ",", "target", ")", "for", "logit", "in", "logits", "[", "-", "2", ":", "]", "]", "\n", "accuracies", "=", "[", "np", ".", "array", "(", "[", "0", "]", ")", "for", "logit", "in", "logits", "[", ":", "-", "2", "]", "]", "+", "[", "acc", "(", "logit", ",", "target", ")", "for", "logit", "in", "logits", "[", "-", "2", ":", "]", "]", "\n", "return", "losses", ",", "accuracies", "\n", "", "losses", "=", "[", "]", "\n", "accuracies", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "logits", ")", ")", ":", "\n", "                ", "if", "i", "<=", "3", ":", "\n", "                    ", "losses", ".", "append", "(", "criterion", "(", "logits", "[", "i", "]", "[", "depth_ind", "]", ",", "target", "[", "depth_ind", "]", ")", ")", "\n", "accuracies", ".", "append", "(", "acc", "(", "logits", "[", "i", "]", "[", "depth_ind", "]", ",", "target", "[", "depth_ind", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "losses", ".", "append", "(", "criterion", "(", "logits", "[", "i", "]", ",", "target", ")", ")", "\n", "accuracies", ".", "append", "(", "acc", "(", "logits", "[", "i", "]", ",", "target", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "losses", "=", "[", "criterion", "(", "logit", ",", "target", ")", "for", "logit", "in", "logits", "]", "\n", "accuracies", "=", "[", "acc", "(", "logit", ",", "target", ")", "for", "logit", "in", "logits", "]", "\n", "\n", "", "return", "losses", ",", "accuracies", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.intersection_and_union": [[334, 346], ["pred[].view", "gt[].view", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "torch.histc", "intersect.double", "pred[].view.double", "gt[].view.double"], "methods", ["None"], ["", "def", "intersection_and_union", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "num_classes", "=", "self", ".", "args", ".", "n_class", "\n", "mask", "=", "gt", "!=", "255", "\n", "pred", "=", "pred", "[", "mask", "]", ".", "view", "(", "-", "1", ")", "\n", "gt", "=", "gt", "[", "mask", "]", ".", "view", "(", "-", "1", ")", "\n", "\n", "intersect", "=", "pred", "[", "pred", "==", "gt", "]", "\n", "area_intersect", "=", "torch", ".", "histc", "(", "intersect", ".", "double", "(", ")", ",", "bins", "=", "(", "num_classes", ")", ",", "min", "=", "0", ",", "max", "=", "num_classes", "-", "1", ")", "\n", "area_pred_label", "=", "torch", ".", "histc", "(", "pred", ".", "double", "(", ")", ",", "bins", "=", "(", "num_classes", ")", ",", "min", "=", "0", ",", "max", "=", "num_classes", "-", "1", ")", "\n", "area_label", "=", "torch", ".", "histc", "(", "gt", ".", "double", "(", ")", ",", "bins", "=", "(", "num_classes", ")", ",", "min", "=", "0", ",", "max", "=", "num_classes", "-", "1", ")", "\n", "area_union", "=", "area_pred_label", "+", "area_label", "-", "area_intersect", "\n", "return", "area_intersect", ",", "area_union", ",", "area_pred_label", ",", "area_label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.eval_seg_iou_acc": [[347, 364], ["logits.detach().cpu.detach().cpu.detach().cpu", "target.detach().cpu.detach().cpu.detach().cpu", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "segment_trainer.SegTrainer.intersection_and_union", "logits.detach().cpu.detach().cpu.detach", "target.detach().cpu.detach().cpu.detach"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.intersection_and_union"], ["", "def", "eval_seg_iou_acc", "(", "self", ",", "logits", ",", "target", ")", ":", "\n", "        ", "logits", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "target", "=", "target", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "preds", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "batch_size", "=", "logits", ".", "shape", "[", "0", "]", "\n", "total_area_intersect", "=", "torch", ".", "zeros", "(", "[", "self", ".", "args", ".", "n_class", ",", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "total_area_union", "=", "torch", ".", "zeros", "(", "[", "self", ".", "args", ".", "n_class", ",", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "total_area_pred_label", "=", "torch", ".", "zeros", "(", "[", "self", ".", "args", ".", "n_class", ",", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "total_area_label", "=", "torch", ".", "zeros", "(", "[", "self", ".", "args", ".", "n_class", ",", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "area_intersect", ",", "area_union", ",", "area_pred_label", ",", "area_label", "=", "self", ".", "intersection_and_union", "(", "preds", "[", "i", "]", ",", "target", "[", "i", "]", ")", "\n", "total_area_intersect", "+=", "area_intersect", "\n", "total_area_union", "+=", "area_union", "\n", "total_area_pred_label", "+=", "area_pred_label", "\n", "total_area_label", "+=", "area_label", "\n", "", "return", "total_area_intersect", ",", "total_area_union", ",", "total_area_pred_label", ",", "total_area_label", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.calc_metrics": [[365, 374], ["iou.mean", "acc.mean", "intersect.sum", "label.sum", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan"], "methods", ["None"], ["", "def", "calc_metrics", "(", "self", ",", "intersect", ",", "union", ",", "pred_label", ",", "label", ")", ":", "\n", "        ", "aacc", "=", "intersect", ".", "sum", "(", ")", "/", "label", ".", "sum", "(", ")", "\n", "iou", "=", "intersect", "/", "union", "\n", "acc", "=", "intersect", "/", "label", "\n", "iou", "[", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "iou", ")", ")", "]", "=", "0", "\n", "acc", "[", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "acc", ")", ")", "]", "=", "0", "\n", "miou", "=", "iou", ".", "mean", "(", ")", "\n", "macc", "=", "acc", ".", "mean", "(", ")", "\n", "return", "aacc", ",", "miou", ",", "macc", ",", "iou", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.eval_seg_aacc": [[375, 380], ["torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "float", "torch.argmax.view", "torch.argmax.view", "torch.argmax.view"], "methods", ["None"], ["", "def", "eval_seg_aacc", "(", "self", ",", "logits", ",", "target", ")", ":", "\n", "        ", "preds", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "same", "=", "(", "preds", "==", "target", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "all", "=", "preds", ".", "view", "(", "-", "1", ")", ".", "shape", "[", "0", "]", "\n", "return", "same", "/", "float", "(", "all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_soft_pri3d_loss_accuracy": [[381, 463], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "resized_depth.reshape.reshape.reshape", "merge_all_res.reshape", "merge_all_res.reshape", "torch.interpolate", "torch.interpolate", "torch.interpolate", "valid_depth_prob.reshape.reshape.reshape", "valid_depth_prob.reshape.reshape.sum", "mask.sum", "valid_depth_prob.reshape.reshape.multinomial", "random_sample_ind.unsqueeze().repeat.unsqueeze().repeat.clone", "random_sample_ind.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.stack().float", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.arange().long().cuda().unsqueeze().repeat", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "isinstance", "segment_trainer.SegTrainer.merge_all_res"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.merge_all_res"], ["", "def", "_compute_soft_pri3d_loss_accuracy", "(", "self", ",", "_feat1_", ",", "_feat2_", ",", "_depth", ",", "criterion_pri3d", ",", "use_depth", "=", "None", ",", "depth_mask", "=", "None", ",", "scale", "=", "None", ")", ":", "\n", "        ", "_feat1", "=", "_feat1_", "\n", "_feat2", "=", "_feat2_", "\n", "depth", "=", "_depth", "\n", "def", "merge_all_res", "(", "x", ")", ":", "\n", "            ", "ALIGN_CORNERS", "=", "False", "\n", "x0_h", ",", "x0_w", "=", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x2", "=", "F", ".", "interpolate", "(", "x", "[", "2", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x3", "=", "F", ".", "interpolate", "(", "x", "[", "3", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", "0", "]", ",", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "return", "x", "\n", "", "if", "isinstance", "(", "_feat1", ",", "list", ")", "and", "isinstance", "(", "_feat2", ",", "list", ")", ":", "\n", "            ", "merge1", "=", "merge_all_res", "(", "_feat1", ")", "\n", "merge2", "=", "merge_all_res", "(", "_feat2", ")", "\n", "h", ",", "w", "=", "_feat1", "[", "0", "]", ".", "size", "(", "2", ")", ",", "_feat1", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "", "else", ":", "\n", "            ", "merge1", "=", "_feat1", "\n", "merge2", "=", "_feat2", "\n", "h", ",", "w", "=", "merge1", ".", "size", "(", "2", ")", ",", "merge2", ".", "size", "(", "3", ")", "\n", "\n", "", "if", "use_depth", "is", "not", "None", ":", "\n", "            ", "if", "use_depth", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "return", "[", "(", "merge1", "-", "merge1", "+", "merge2", "-", "merge2", ")", ".", "mean", "(", ")", "for", "_", "in", "range", "(", "2", ")", "]", ",", "[", "np", ".", "array", "(", "[", "0", "]", ")", ",", "np", ".", "array", "(", "[", "0", "]", ")", "]", "\n", "\n", "", "", "bs", ",", "fdim", "=", "merge1", ".", "size", "(", "0", ")", ",", "merge1", ".", "size", "(", "1", ")", "\n", "resized_depth", "=", "F", ".", "interpolate", "(", "depth", ".", "unsqueeze", "(", "1", ")", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "resized_depth", "=", "resized_depth", ".", "reshape", "(", "bs", ",", "h", "*", "w", ")", "\n", "merge1", "=", "merge1", ".", "reshape", "(", "bs", ",", "fdim", ",", "h", "*", "w", ")", "\n", "merge2", "=", "merge2", ".", "reshape", "(", "bs", ",", "fdim", ",", "h", "*", "w", ")", "\n", "\n", "# valid_depth_prob = (resized_depth > 0).float()", "\n", "valid_depth_prob", "=", "F", ".", "interpolate", "(", "depth_mask", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'nearest'", ")", "\n", "valid_depth_prob", "=", "valid_depth_prob", ".", "reshape", "(", "bs", ",", "h", "*", "w", ")", "\n", "\n", "valid_depth_prob_sum", "=", "valid_depth_prob", ".", "sum", "(", "-", "1", ")", "\n", "mask", "=", "valid_depth_prob_sum", ">", "0", "\n", "valid_depth_prob", "=", "valid_depth_prob", "[", "mask", "]", "\n", "merge1", "=", "merge1", "[", "mask", "]", "\n", "merge2", "=", "merge2", "[", "mask", "]", "\n", "bs", "=", "mask", ".", "sum", "(", ")", "\n", "\n", "num_samples", "=", "self", ".", "args", ".", "pri3d_num_samples_per_image", "\n", "random_sample_ind", "=", "valid_depth_prob", ".", "multinomial", "(", "num_samples", "=", "num_samples", ",", "replacement", "=", "True", ")", "# bs, num_samples", "\n", "random_sample_ind_copy", "=", "random_sample_ind", ".", "clone", "(", ")", "\n", "random_sample_ind", "=", "random_sample_ind", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "fdim", ",", "1", ")", "\n", "\n", "sampled_merge1", "=", "torch", ".", "gather", "(", "merge1", ",", "2", ",", "random_sample_ind", ")", "\n", "sampled_merge2", "=", "torch", ".", "gather", "(", "merge2", ",", "2", ",", "random_sample_ind", ")", "\n", "\n", "sampled_merge1", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "sampled_merge1", ",", "dim", "=", "1", ")", "\n", "sampled_merge2", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "sampled_merge2", ",", "dim", "=", "1", ")", "\n", "\n", "rgb2depth_logits", "=", "torch", ".", "matmul", "(", "sampled_merge2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "sampled_merge1", ")", "\n", "depth2rgb_logits", "=", "torch", ".", "matmul", "(", "sampled_merge1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "sampled_merge2", ")", "\n", "\n", "rgb2depth_logits", "=", "rgb2depth_logits", "/", "self", ".", "args", ".", "temperature", "\n", "depth2rgb_logits", "=", "depth2rgb_logits", "/", "self", ".", "args", ".", "temperature", "\n", "\n", "### START: generate soft target", "\n", "sample_xy", "=", "torch", ".", "stack", "(", "[", "random_sample_ind_copy", "//", "w", ",", "random_sample_ind_copy", "%", "w", "]", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "sample_xy_dist", "=", "sample_xy", ".", "reshape", "(", "bs", ",", "num_samples", ",", "1", ",", "2", ")", "-", "sample_xy", ".", "reshape", "(", "bs", ",", "1", ",", "num_samples", ",", "2", ")", "\n", "sample_xy_dist", "=", "torch", ".", "sqrt", "(", "(", "sample_xy_dist", "**", "2", ")", ".", "sum", "(", "-", "1", ")", ")", "\n", "\n", "soft_target", "=", "torch", ".", "softmax", "(", "-", "sample_xy_dist", ",", "1", ")", "\n", "rgb2depth_logsoft", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "rgb2depth_logits", ",", "dim", "=", "1", ")", "\n", "depth2rgb_logsoft", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "depth2rgb_logits", ",", "dim", "=", "1", ")", "\n", "\n", "losses", "=", "[", "\n", "-", "(", "soft_target", "*", "rgb2depth_logsoft", ")", ".", "sum", "(", "-", "2", ")", ".", "mean", "(", ")", ",", "\n", "-", "(", "soft_target", "*", "depth2rgb_logsoft", ")", ".", "sum", "(", "-", "2", ")", ".", "mean", "(", ")", "\n", "]", "\n", "### END", "\n", "target", "=", "torch", ".", "arange", "(", "num_samples", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "bs", ",", "1", ")", "\n", "\n", "rgb2depth_pred", "=", "rgb2depth_logits", ".", "argmax", "(", "-", "2", ")", "\n", "depth2rgb_pred", "=", "depth2rgb_logits", ".", "argmax", "(", "-", "2", ")", "\n", "rgb2depth_acc", "=", "(", "rgb2depth_pred", "==", "target", ")", ".", "sum", "(", "-", "1", ")", ".", "float", "(", ")", "/", "num_samples", "\n", "depth2rgb_acc", "=", "(", "depth2rgb_pred", "==", "target", ")", ".", "sum", "(", "-", "1", ")", ".", "float", "(", ")", "/", "num_samples", "\n", "acces", "=", "[", "rgb2depth_acc", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "depth2rgb_acc", ".", "float", "(", ")", ".", "mean", "(", ")", "]", "\n", "\n", "return", "losses", ",", "acces", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_joints_pri3d_loss_accuracy": [[464, 549], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda", "torch.arange().long().unsqueeze().repeat().cuda.clone", "torch.arange().long().unsqueeze().repeat().cuda.clone", "torch.arange().long().unsqueeze().repeat().cuda.clone", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "downsampled_joints2d.long.long.long", "sample_ind.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "_feat_rgb.permute", "_feat_d.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "losses.append", "rgb2joints_acc_valid.float().mean", "d2joints_acc_valid.float().mean", "torch.matmul.argmax", "torch.matmul.argmax", "torch.matmul.argmax", "acces.append", "_feat_rgb.reshape", "_feat_d.reshape", "_feat_rgb.permute.permute", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.arange().long().unsqueeze().repeat", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "rgb2d_acc_valid.float().mean", "sample_ind.unsqueeze().repeat.unsqueeze().repeat.max", "sample_ind.unsqueeze().repeat.unsqueeze().repeat.min", "sample_ind.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "rgb2joints_acc_valid.float", "d2joints_acc_valid.float", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "torch.arange().long().unsqueeze", "rgb2d_acc_valid.float", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "def", "_compute_joints_pri3d_loss_accuracy", "(", "self", ",", "_feat_rgb", ",", "_feat_d", ",", "_feat_joints2d", ",", "criterion_pri3d", ",", "original_joints2d", ",", "joints_vis", ",", "use_depth", "=", "None", ",", "ready_joint_feat", "=", "False", ",", "use_rgb2d", "=", "False", ")", ":", "\n", "# if use_depth is not None:", "\n", "#     if use_depth.sum() == 0:", "\n", "#         return [(_feat_rgb - _feat_rgb + _feat_d - _feat_d).mean() for _ in range(2)], [np.array([0]), np.array([0])]", "\n", "\n", "        ", "if", "not", "ready_joint_feat", ":", "\n", "            ", "bs", ",", "fdim", ",", "h", ",", "w", "=", "_feat_rgb", ".", "shape", "\n", "assert", "h", "==", "w", "\n", "\n", "", "if", "not", "ready_joint_feat", ":", "\n", "            ", "downsampled_joints2d", "=", "original_joints2d", "//", "4", "\n", "downsampled_joints2d", "=", "downsampled_joints2d", ".", "long", "(", ")", "\n", "downsampled_joints2d", "[", "downsampled_joints2d", ">=", "h", "]", "=", "h", "-", "1", "\n", "downsampled_joints2d", "[", "downsampled_joints2d", "<", "0", "]", "=", "0", "\n", "sample_ind", "=", "downsampled_joints2d", "[", ":", ",", ":", ",", "0", "]", "*", "h", "+", "downsampled_joints2d", "[", ":", ",", ":", ",", "1", "]", "\n", "assert", "sample_ind", ".", "max", "(", ")", "<", "h", "*", "w", "and", "sample_ind", ".", "min", "(", ")", ">=", "0", "\n", "sample_ind", "=", "sample_ind", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "fdim", ",", "1", ")", "\n", "rgb_joints_feat", "=", "torch", ".", "gather", "(", "_feat_rgb", ".", "reshape", "(", "bs", ",", "fdim", ",", "h", "*", "w", ")", ",", "2", ",", "sample_ind", ")", "\n", "d_joints_feat", "=", "torch", ".", "gather", "(", "_feat_d", ".", "reshape", "(", "bs", ",", "fdim", ",", "h", "*", "w", ")", ",", "2", ",", "sample_ind", ")", "\n", "", "else", ":", "\n", "            ", "rgb_joints_feat", "=", "_feat_rgb", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "d_joints_feat", "=", "_feat_d", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "rgb_joints_feat", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "rgb_joints_feat", ",", "dim", "=", "1", ")", "\n", "d_joints_feat", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "d_joints_feat", ",", "dim", "=", "1", ")", "\n", "joints2d_feat", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "_feat_joints2d", ",", "dim", "=", "-", "1", ")", "\n", "\n", "rgb2joints_logits", "=", "torch", ".", "matmul", "(", "joints2d_feat", ",", "rgb_joints_feat", ")", "\n", "d2joints_logits", "=", "torch", ".", "matmul", "(", "joints2d_feat", ",", "d_joints_feat", ")", "\n", "\n", "if", "use_rgb2d", ":", "\n", "            ", "rgb2d_logits", "=", "torch", ".", "matmul", "(", "rgb_joints_feat", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "d_joints_feat", ")", "\n", "\n", "", "rgb2joints_logits", "=", "rgb2joints_logits", "/", "self", ".", "args", ".", "temperature", "\n", "d2joints_logits", "=", "d2joints_logits", "/", "self", ".", "args", ".", "temperature", "\n", "\n", "if", "use_rgb2d", ":", "\n", "            ", "rgb2d_logits", "=", "rgb2d_logits", "/", "self", ".", "args", ".", "temperature", "\n", "\n", "", "bs", "=", "original_joints2d", ".", "shape", "[", "0", "]", "\n", "target", "=", "torch", ".", "arange", "(", "joints_vis", ".", "shape", "[", "1", "]", ")", ".", "long", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "bs", ",", "1", ")", ".", "cuda", "(", ")", "\n", "assert", "joints_vis", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", "\n", "assert", "joints_vis", ".", "shape", "[", "1", "]", "==", "target", ".", "shape", "[", "1", "]", "\n", "target", "[", "torch", ".", "logical_not", "(", "joints_vis", ")", "]", "=", "-", "100", "\n", "\n", "depth_target", "=", "target", ".", "clone", "(", ")", "\n", "if", "use_depth", "is", "not", "None", ":", "\n", "            ", "depth_target", "[", "torch", ".", "logical_not", "(", "use_depth", ")", "]", "=", "-", "100", "\n", "\n", "", "losses", "=", "[", "\n", "criterion_pri3d", "[", "0", "]", "(", "rgb2joints_logits", ",", "target", ")", ",", "\n", "criterion_pri3d", "[", "1", "]", "(", "d2joints_logits", ",", "depth_target", ")", ",", "\n", "]", "\n", "\n", "if", "use_rgb2d", ":", "\n", "            ", "losses", ".", "append", "(", "criterion_pri3d", "[", "1", "]", "(", "rgb2d_logits", ",", "depth_target", ")", ")", "\n", "\n", "", "rgb2joints_pred", "=", "rgb2joints_logits", ".", "argmax", "(", "-", "2", ")", "\n", "d2joints_pred", "=", "d2joints_logits", ".", "argmax", "(", "-", "2", ")", "\n", "\n", "target_denom", "=", "(", "target", "!=", "-", "100", ")", ".", "sum", "(", "-", "1", ")", "\n", "target_denom_copy", "=", "(", "target", "!=", "-", "100", ")", ".", "sum", "(", "-", "1", ")", "\n", "target_denom", "[", "target_denom", "==", "0", "]", "=", "1", "\n", "\n", "depth_target_denom", "=", "(", "depth_target", "!=", "-", "100", ")", ".", "sum", "(", "-", "1", ")", "\n", "depth_target_denom_copy", "=", "(", "depth_target", "!=", "-", "100", ")", ".", "sum", "(", "-", "1", ")", "\n", "depth_target_denom", "[", "depth_target_denom", "==", "0", "]", "=", "1", "\n", "\n", "rgb2joints_acc", "=", "(", "rgb2joints_pred", "==", "target", ")", ".", "sum", "(", "-", "1", ")", ".", "float", "(", ")", "/", "target_denom", "\n", "d2joints_acc", "=", "(", "d2joints_pred", "==", "depth_target", ")", ".", "sum", "(", "-", "1", ")", ".", "float", "(", ")", "/", "depth_target_denom", "\n", "\n", "# rgb2joints_acc[target_denom_copy == 0] = 0.5", "\n", "# d2joints_acc[depth_target_denom_copy == 0] = 0.5", "\n", "rgb2joints_acc_valid", "=", "rgb2joints_acc", "[", "target_denom_copy", "!=", "0", "]", "\n", "d2joints_acc_valid", "=", "d2joints_acc", "[", "depth_target_denom_copy", "!=", "0", "]", "\n", "\n", "acces", "=", "[", "rgb2joints_acc_valid", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "d2joints_acc_valid", ".", "float", "(", ")", ".", "mean", "(", ")", "]", "\n", "\n", "if", "use_rgb2d", ":", "\n", "            ", "rgb2d_pred", "=", "rgb2d_logits", ".", "argmax", "(", "-", "2", ")", "\n", "rgb2d_acc", "=", "(", "rgb2d_pred", "==", "depth_target", ")", ".", "sum", "(", "-", "1", ")", ".", "float", "(", ")", "/", "depth_target_denom", "\n", "rgb2d_acc_valid", "=", "rgb2d_acc", "[", "depth_target_denom_copy", "!=", "0", "]", "\n", "acces", ".", "append", "(", "rgb2d_acc_valid", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "\n", "", "return", "losses", ",", "acces", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_cross_subject_joints_pri3d_loss": [[550, 616], ["torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.nn.functional.normalize().permute().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "positive_ind.repeat().reshape.repeat().reshape.repeat().reshape", "numpy.diag_indices", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.cat.reshape().repeat().reshape", "torch.cat.reshape().repeat().reshape", "torch.cat.reshape().repeat().reshape", "positive_ind.repeat().reshape.repeat().reshape.sum", "positive_logits_mean.mean", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "downsampled_joints2d.long.long.long", "sample_ind.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "merge_all_res.permute", "merge_all_res.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "not_use_rgb.reshape().repeat().reshape.reshape().repeat().reshape.reshape().repeat().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x[].size", "x[].size", "isinstance", "isinstance", "segment_trainer.SegTrainer.merge_all_res"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.merge_all_res"], ["", "def", "_compute_cross_subject_joints_pri3d_loss", "(", "self", ",", "_feat_rgb", ",", "_feat_d", ",", "_feat_joints2d", ",", "criterion_pri3d", ",", "original_joints2d", ",", "joints_vis", ",", "use_depth", "=", "None", ",", "ready_joint_feat", "=", "False", ",", "index", "=", "None", ",", "memory", "=", "None", ",", "use_rgb", "=", "None", ")", ":", "\n", "        ", "def", "merge_all_res", "(", "x", ")", ":", "\n", "            ", "ALIGN_CORNERS", "=", "False", "\n", "x0_h", ",", "x0_w", "=", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x2", "=", "F", ".", "interpolate", "(", "x", "[", "2", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x3", "=", "F", ".", "interpolate", "(", "x", "[", "3", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "ALIGN_CORNERS", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", "0", "]", ",", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "return", "x", "\n", "\n", "", "if", "not", "ready_joint_feat", ":", "\n", "            ", "if", "isinstance", "(", "_feat_rgb", ",", "list", ")", "and", "isinstance", "(", "_feat_d", ",", "list", ")", ":", "\n", "                ", "_feat_rgb", "=", "merge_all_res", "(", "_feat_rgb", ")", "\n", "_feat_d", "=", "merge_all_res", "(", "_feat_d", ")", "\n", "\n", "", "if", "use_depth", "is", "not", "None", ":", "\n", "                ", "if", "use_depth", ".", "sum", "(", ")", "==", "0", ":", "\n", "                    ", "return", "[", "(", "_feat_rgb", "-", "_feat_rgb", "+", "_feat_d", "-", "_feat_d", ")", ".", "mean", "(", ")", "for", "_", "in", "range", "(", "4", ")", "]", ",", "[", "np", ".", "array", "(", "[", "0", "]", ")", "for", "_", "in", "range", "(", "4", ")", "]", "\n", "\n", "", "", "bs", ",", "fdim", ",", "h", ",", "w", "=", "_feat_rgb", ".", "shape", "\n", "num_joints", "=", "original_joints2d", ".", "shape", "[", "-", "2", "]", "\n", "assert", "h", "==", "w", "\n", "downsampled_joints2d", "=", "original_joints2d", "//", "4", "\n", "downsampled_joints2d", "=", "downsampled_joints2d", ".", "long", "(", ")", "\n", "downsampled_joints2d", "[", "downsampled_joints2d", ">=", "h", "]", "=", "h", "-", "1", "\n", "downsampled_joints2d", "[", "downsampled_joints2d", "<", "0", "]", "=", "0", "\n", "sample_ind", "=", "downsampled_joints2d", "[", ":", ",", ":", ",", "0", "]", "*", "h", "+", "downsampled_joints2d", "[", ":", ",", ":", ",", "1", "]", "\n", "assert", "sample_ind", ".", "max", "(", ")", "<", "h", "*", "w", "and", "sample_ind", ".", "min", "(", ")", ">=", "0", "\n", "sample_ind", "=", "sample_ind", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "fdim", ",", "1", ")", "\n", "rgb_joints_feat", "=", "torch", ".", "gather", "(", "_feat_rgb", ".", "reshape", "(", "bs", ",", "fdim", ",", "h", "*", "w", ")", ",", "2", ",", "sample_ind", ")", "\n", "d_joints_feat", "=", "torch", ".", "gather", "(", "_feat_d", ".", "reshape", "(", "bs", ",", "fdim", ",", "h", "*", "w", ")", ",", "2", ",", "sample_ind", ")", "\n", "", "else", ":", "\n", "            ", "bs", ",", "num_joints", ",", "fdim", "=", "_feat_rgb", ".", "shape", "\n", "rgb_joints_feat", "=", "_feat_rgb", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "d_joints_feat", "=", "_feat_d", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "temp", "=", "self", ".", "args", ".", "temperature", "\n", "rgb_joints_feat", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "rgb_joints_feat", ",", "dim", "=", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "bs", "*", "num_joints", ",", "fdim", ")", "\n", "d_joints_feat", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "d_joints_feat", ",", "dim", "=", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "bs", "*", "num_joints", ",", "fdim", ")", "\n", "\n", "cat_feat", "=", "torch", ".", "cat", "(", "[", "rgb_joints_feat", ",", "d_joints_feat", "]", ",", "0", ")", "\n", "logits", "=", "torch", ".", "matmul", "(", "cat_feat", ",", "cat_feat", ".", "permute", "(", "1", ",", "0", ")", ")", "/", "temp", "# 2*num_joints*bs x 2*num_joints*bs", "\n", "logsoftmax_logits", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "logits", ",", "1", ")", "\n", "positive_ind", "=", "torch", ".", "zeros", "(", "[", "num_joints", ",", "2", "*", "bs", "*", "num_joints", "]", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "num_joints", ")", ":", "\n", "            ", "positive_ind", "[", "i", ",", "i", ":", ":", "num_joints", "]", "=", "1", "\n", "", "positive_ind", "=", "positive_ind", ".", "repeat", "(", "2", "*", "bs", ",", "1", ")", ".", "reshape", "(", "2", "*", "bs", "*", "num_joints", ",", "2", "*", "bs", "*", "num_joints", ")", "\n", "ind", "=", "np", ".", "diag_indices", "(", "2", "*", "bs", "*", "num_joints", ")", "\n", "positive_ind", "[", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", "=", "0", "\n", "not_use_depth", "=", "torch", ".", "logical_not", "(", "use_depth", ")", "\n", "not_use_depth", "=", "not_use_depth", ".", "reshape", "(", "bs", ",", "1", ")", ".", "repeat", "(", "1", ",", "num_joints", ")", ".", "reshape", "(", "bs", "*", "num_joints", ")", "\n", "if", "use_rgb", "is", "not", "None", ":", "\n", "            ", "not_use_rgb", "=", "torch", ".", "logical_not", "(", "use_rgb", ")", "\n", "not_use_rgb", "=", "not_use_rgb", ".", "reshape", "(", "bs", ",", "1", ")", ".", "repeat", "(", "1", ",", "num_joints", ")", ".", "reshape", "(", "bs", "*", "num_joints", ")", "\n", "not_use_depth", "=", "torch", ".", "cat", "(", "[", "not_use_rgb", ",", "not_use_depth", "]", ")", "\n", "", "else", ":", "\n", "            ", "not_use_depth", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros_like", "(", "not_use_depth", ")", ",", "not_use_depth", "]", ")", "\n", "", "positive_ind", "[", "not_use_depth", ",", ":", "]", "=", "0", "\n", "positive_ind", "[", ":", ",", "not_use_depth", "]", "=", "0", "\n", "\n", "positive_logits", "=", "logsoftmax_logits", "*", "positive_ind", "\n", "positive_ind_sum", "=", "positive_ind", ".", "sum", "(", "-", "1", ")", "\n", "positive_ind_sum", "[", "positive_ind_sum", "==", "0", "]", "=", "1", "\n", "positive_logits_mean", "=", "-", "positive_logits", ".", "sum", "(", "-", "1", ")", "/", "positive_ind_sum", "\n", "loss", "=", "positive_logits_mean", ".", "mean", "(", ")", "\n", "return", "[", "loss", "]", ",", "[", "np", ".", "array", "(", "[", "0", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.train_soft_joint_pri3d": [[617, 825], ["model.train", "classifier.train", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "time.time", "enumerate", "util.AverageMeter.update", "data[].float().cuda", "data[].cuda", "data[].cuda", "data[].cuda", "data[].cuda", "data[].cuda", "data[].cuda", "data[].cuda().long", "data[].cuda", "data[].float().cuda.size", "segment_trainer.SegTrainer.warmup_learning_rate", "segment_trainer.SegTrainer._global_gather", "segment_trainer.SegTrainer._global_gather", "optimizer.zero_grad", "optimizer.step", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "time.time", "len", "model", "loss.backward", "loss.item", "update_acc_12.item", "update_acc_23.item", "update_acc_13.item", "losses_clip[].item", "losses_clip[].item", "accuracies_clip[].item", "accuracies_clip[].item", "loss_joints[].item", "loss_joints[].item", "accuracies_joints[].item", "accuracies_joints[].item", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "data[].cuda.sum", "util.AverageMeter.update", "util.AverageMeter.update", "time.time", "data[].float", "data[].cuda", "args.modal.startswith", "args.modal.startswith", "args.modal.startswith", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "contrast", "segment_trainer.SegTrainer._compute_loss_accuracy", "segment_trainer.SegTrainer._compute_soft_pri3d_loss_accuracy", "segment_trainer.SegTrainer._compute_joints_pri3d_loss_accuracy", "segment_trainer.SegTrainer._compute_cross_subject_joints_pri3d_loss", "amp.scale_loss", "scaled_loss.backward", "loss_jointpairs[].item", "loss_jointpairs[].item", "loss_jointpairs[].item", "loss_scl[].item", "loss_seg.item", "segment_trainer.SegTrainer.item", "time.time", "print", "sys.stdout.flush", "data[].cuda", "data[].cuda", "data[].cuda.sum", "classifier", "sum", "sum", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "classifier", "segment_trainer.SegTrainer.eval_seg_aacc", "len", "sum", "sum", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "classifier", "segment_trainer.SegTrainer.eval_seg_aacc", "data[].cuda.bool", "data[].cuda.bool", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "classifier", "segment_trainer.SegTrainer.eval_seg_aacc", "classifier", "data[].cuda.bool", "data[].cuda.bool", "data[].cuda.bool", "data[].cuda.bool", "data[].cuda.bool", "data[].cuda.bool", "data[].cuda.bool", "data[].cuda.bool"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.warmup_learning_rate", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._global_gather", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._global_gather", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.datasets.RandAugment.contrast", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_loss_accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_soft_pri3d_loss_accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_joints_pri3d_loss_accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer._compute_cross_subject_joints_pri3d_loss", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.eval_seg_aacc", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.eval_seg_aacc", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.eval_seg_aacc"], ["", "def", "train_soft_joint_pri3d", "(", "self", ",", "epoch", ",", "train_loader", ",", "model", ",", "classifier", ",", "contrast", ",", "\n", "criterion_contrast", ",", "criterion_pri3d", ",", "criterion_seg", ",", "optimizer", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "model", ".", "train", "(", ")", "\n", "classifier", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "acc1_meter", "=", "AverageMeter", "(", ")", "\n", "acc2_meter", "=", "AverageMeter", "(", ")", "\n", "acc3_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "loss_jig_meter", "=", "AverageMeter", "(", ")", "\n", "acc_jig_meter", "=", "AverageMeter", "(", ")", "\n", "loss_rgb2depth_meter", "=", "AverageMeter", "(", ")", "\n", "loss_depth2rgb_meter", "=", "AverageMeter", "(", ")", "\n", "acc_rgb2depth_meter", "=", "AverageMeter", "(", ")", "\n", "acc_depth2rgb_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "loss_rgb2joint_meter", "=", "AverageMeter", "(", ")", "\n", "loss_d2joint_meter", "=", "AverageMeter", "(", ")", "\n", "acc_rgb2joint_meter", "=", "AverageMeter", "(", ")", "\n", "acc_d2joint_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "loss_jointpairs_rgb", "=", "AverageMeter", "(", ")", "\n", "loss_jointpairs_d", "=", "AverageMeter", "(", ")", "\n", "loss_jointpairs_joints", "=", "AverageMeter", "(", ")", "\n", "\n", "loss_scl_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "seg_loss_meter", "=", "AverageMeter", "(", ")", "\n", "seg_aacc_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "inputs", "=", "data", "[", "0", "]", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "index", "=", "data", "[", "1", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "skeleton", "=", "data", "[", "2", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "original_joints2d", "=", "data", "[", "4", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "joints_vis", "=", "data", "[", "5", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "depth_mask", "=", "data", "[", "7", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "scale", "=", "data", "[", "8", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "label", "=", "data", "[", "9", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", ".", "long", "(", ")", "\n", "true_label", "=", "data", "[", "10", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "bsz", "=", "inputs", ".", "size", "(", "0", ")", "\n", "\n", "# warm-up learning rate", "\n", "self", ".", "warmup_learning_rate", "(", "\n", "epoch", ",", "idx", ",", "len", "(", "train_loader", ")", ",", "optimizer", ")", "\n", "\n", "# compute feature", "\n", "if", "args", ".", "jigsaw", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "                ", "_feat1", ",", "_feat2", ",", "_feat3", ",", "f", ",", "aux_dict", "=", "model", "(", "inputs", ",", "skeleton", ",", "return_fm", "=", "True", ")", "\n", "\n", "# gather all feature and index", "\n", "", "all_f", "=", "self", ".", "_global_gather", "(", "f", ")", "\n", "all_index", "=", "self", ".", "_global_gather", "(", "index", ")", "\n", "\n", "# loss and metrics", "\n", "if", "args", ".", "jigsaw", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "                ", "if", "args", ".", "modal", ".", "startswith", "(", "'CMC'", ")", "or", "args", ".", "modal", ".", "startswith", "(", "'RGBHHA'", ")", "or", "args", ".", "modal", ".", "startswith", "(", "'RGBD'", ")", ":", "\n", "                    ", "f1", ",", "f2", ",", "f3", "=", "torch", ".", "chunk", "(", "f", ",", "3", ",", "dim", "=", "1", ")", "\n", "all_f1", ",", "all_f2", ",", "all_f3", "=", "torch", ".", "chunk", "(", "all_f", ",", "3", ",", "dim", "=", "1", ")", "\n", "output", "=", "contrast", "(", "f1", ",", "f2", ",", "f3", ",", "index", ",", "all_f1", ",", "all_f2", ",", "all_f3", ",", "all_index", ")", "\n", "if", "args", ".", "modality_missing", ":", "\n", "                        ", "use_depth", "=", "data", "[", "6", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "use_depth", "=", "None", "\n", "", "try", ":", "\n", "                        ", "use_rgb", "=", "data", "[", "11", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "except", ":", "\n", "                        ", "use_rgb", "=", "None", "\n", "", "losses", ",", "accuracies", "=", "self", ".", "_compute_loss_accuracy", "(", "\n", "logits", "=", "output", "[", ":", "-", "1", "]", ",", "target", "=", "output", "[", "-", "1", "]", ",", "\n", "criterion", "=", "criterion_contrast", ",", "use_depth", "=", "use_depth", ",", "use_rgb", "=", "use_rgb", ")", "\n", "\n", "losses_clip", ",", "accuracies_clip", "=", "self", ".", "_compute_soft_pri3d_loss_accuracy", "(", "\n", "aux_dict", "[", "'linear_merge1'", "]", ",", "aux_dict", "[", "'linear_merge2'", "]", ",", "inputs", "[", ":", ",", "3", ",", ":", ",", ":", "]", ",", "criterion_pri3d", ",", "use_depth", "=", "use_depth", ",", "depth_mask", "=", "depth_mask", ",", "scale", "=", "scale", ")", "\n", "\n", "loss_joints", ",", "accuracies_joints", "=", "self", ".", "_compute_joints_pri3d_loss_accuracy", "(", "\n", "aux_dict", "[", "'linear_merge1'", "]", ",", "aux_dict", "[", "'linear_merge2'", "]", ",", "_feat3", ",", "criterion_pri3d", ",", "original_joints2d", ",", "joints_vis", ",", "use_depth", "=", "use_depth", "\n", ")", "\n", "\n", "loss_jointpairs", "=", "None", "\n", "\n", "loss_scl", ",", "_", "=", "self", ".", "_compute_cross_subject_joints_pri3d_loss", "(", "\n", "aux_dict", "[", "'linear_merge1'", "]", ",", "aux_dict", "[", "'linear_merge2'", "]", ",", "None", ",", "criterion_pri3d", ",", "original_joints2d", ",", "joints_vis", ",", "use_depth", "=", "use_depth", ",", "index", "=", "index", ",", "memory", "=", "contrast", ".", "memory_3", ",", "use_rgb", "=", "use_rgb", "\n", ")", "\n", "\n", "loss", "=", "sum", "(", "losses", ")", "*", "args", ".", "cmc_loss_weights", "+", "sum", "(", "losses_clip", ")", "*", "args", ".", "other_loss_weights", "+", "sum", "(", "loss_joints", ")", "*", "args", ".", "other_loss_weights", "\n", "loss", "=", "loss", "+", "sum", "(", "loss_scl", ")", "*", "args", ".", "other_loss_weights", "\n", "\n", "if", "true_label", ".", "sum", "(", ")", "!=", "0", ":", "\n", "                        ", "if", "args", ".", "supervise_type", "==", "0", ":", "\n", "                            ", "linear_merge1", "=", "aux_dict", "[", "'linear_merge1'", "]", "[", "true_label", ".", "bool", "(", ")", "]", "\n", "linear_merge2", "=", "aux_dict", "[", "'linear_merge2'", "]", "[", "true_label", ".", "bool", "(", ")", "]", "\n", "linear_merge1", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "linear_merge1", ",", "dim", "=", "1", ")", "\n", "linear_merge2", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "linear_merge2", ",", "dim", "=", "1", ")", "\n", "max_linear_merge", "=", "torch", ".", "max", "(", "torch", ".", "stack", "(", "[", "linear_merge1", ",", "linear_merge2", "]", ")", ",", "0", ")", "[", "0", "]", "\n", "seg_output", "=", "classifier", "(", "max_linear_merge", ")", "\n", "loss_seg", "=", "criterion_seg", "[", "0", "]", "(", "seg_output", ",", "label", "[", "true_label", ".", "bool", "(", ")", "]", ")", "\n", "aacc", "=", "self", ".", "eval_seg_aacc", "(", "seg_output", ",", "label", "[", "true_label", ".", "bool", "(", ")", "]", ")", "\n", "", "elif", "args", ".", "supervise_type", "==", "1", ":", "\n", "                            ", "linear_merge1", "=", "aux_dict", "[", "'linear_merge1'", "]", "[", "true_label", ".", "bool", "(", ")", "]", "\n", "linear_merge1", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "linear_merge1", ",", "dim", "=", "1", ")", "\n", "seg_output", "=", "classifier", "(", "linear_merge1", ")", "\n", "loss_seg", "=", "criterion_seg", "[", "0", "]", "(", "seg_output", ",", "label", "[", "true_label", ".", "bool", "(", ")", "]", ")", "\n", "aacc", "=", "self", ".", "eval_seg_aacc", "(", "seg_output", ",", "label", "[", "true_label", ".", "bool", "(", ")", "]", ")", "\n", "", "elif", "args", ".", "supervise_type", "==", "2", ":", "\n", "                            ", "linear_merge2", "=", "aux_dict", "[", "'linear_merge2'", "]", "[", "true_label", ".", "bool", "(", ")", "]", "\n", "linear_merge2", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "linear_merge2", ",", "dim", "=", "1", ")", "\n", "seg_output", "=", "classifier", "(", "linear_merge2", ")", "\n", "loss_seg", "=", "criterion_seg", "[", "0", "]", "(", "seg_output", ",", "label", "[", "true_label", ".", "bool", "(", ")", "]", ")", "\n", "aacc", "=", "self", ".", "eval_seg_aacc", "(", "seg_output", ",", "label", "[", "true_label", ".", "bool", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "                            ", "tmp", "=", "classifier", "(", "aux_dict", "[", "'linear_merge1'", "]", ")", "\n", "loss_seg", "=", "(", "tmp", "-", "tmp", ")", ".", "mean", "(", ")", "\n", "aacc", "=", "loss_seg", "\n", "", "loss", "+=", "loss_seg", "*", "10", "\n", "", "else", ":", "\n", "                        ", "tmp", "=", "classifier", "(", "aux_dict", "[", "'linear_merge1'", "]", ")", "\n", "loss", "+=", "(", "tmp", "-", "tmp", ")", ".", "mean", "(", ")", "\n", "\n", "", "update_loss_12", "=", "0.5", "*", "(", "losses", "[", "0", "]", "+", "losses", "[", "1", "]", ")", "\n", "update_acc_12", "=", "0.5", "*", "(", "accuracies", "[", "0", "]", "+", "accuracies", "[", "1", "]", ")", "\n", "update_loss_23", "=", "0.5", "*", "(", "losses", "[", "2", "]", "+", "losses", "[", "3", "]", ")", "\n", "update_acc_23", "=", "0.5", "*", "(", "accuracies", "[", "2", "]", "+", "accuracies", "[", "3", "]", ")", "\n", "update_loss_13", "=", "0.5", "*", "(", "losses", "[", "4", "]", "+", "losses", "[", "5", "]", ")", "\n", "update_acc_13", "=", "0.5", "*", "(", "accuracies", "[", "4", "]", "+", "accuracies", "[", "5", "]", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "# backward", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "args", ".", "amp", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# update meters", "\n", "loss_meter", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc1_meter", ".", "update", "(", "update_acc_12", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc2_meter", ".", "update", "(", "update_acc_23", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc3_meter", ".", "update", "(", "update_acc_13", ".", "item", "(", ")", ",", "bsz", ")", "\n", "\n", "loss_rgb2depth_meter", ".", "update", "(", "losses_clip", "[", "0", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "loss_depth2rgb_meter", ".", "update", "(", "losses_clip", "[", "1", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc_rgb2depth_meter", ".", "update", "(", "accuracies_clip", "[", "0", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc_depth2rgb_meter", ".", "update", "(", "accuracies_clip", "[", "1", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "\n", "loss_rgb2joint_meter", ".", "update", "(", "loss_joints", "[", "0", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "loss_d2joint_meter", ".", "update", "(", "loss_joints", "[", "1", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc_rgb2joint_meter", ".", "update", "(", "accuracies_joints", "[", "0", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "acc_d2joint_meter", ".", "update", "(", "accuracies_joints", "[", "1", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "\n", "if", "loss_jointpairs", "is", "not", "None", ":", "\n", "                ", "loss_jointpairs_rgb", ".", "update", "(", "loss_jointpairs", "[", "0", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "loss_jointpairs_d", ".", "update", "(", "loss_jointpairs", "[", "1", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "loss_jointpairs_joints", ".", "update", "(", "loss_jointpairs", "[", "2", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "\n", "", "if", "loss_scl", "is", "not", "None", ":", "\n", "                ", "loss_scl_meter", ".", "update", "(", "loss_scl", "[", "0", "]", ".", "item", "(", ")", ",", "bsz", ")", "\n", "\n", "", "if", "true_label", ".", "sum", "(", ")", "!=", "0", ":", "\n", "                ", "seg_loss_meter", ".", "update", "(", "loss_seg", ".", "item", "(", ")", ",", "bsz", ")", "\n", "seg_aacc_meter", ".", "update", "(", "aacc", ".", "item", "(", ")", ",", "bsz", ")", "\n", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# print info", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "if", "(", "idx", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                    ", "print", "(", "'Train: [{0}][{1}/{2}] '", "\n", "'BT {batch_time.val:.3f} ({batch_time.avg:.3f}) '", "\n", "'DT {data_time.val:.3f} ({data_time.avg:.3f}) '", "\n", "'L {loss.val:.3f} ({loss.avg:.3f}) '", "\n", "'a_I {acc1.avg:.3f} {acc2.avg:.3f} {acc3.avg:.3f} '", "\n", "'p3d {loss_rgb2depth.avg:.3f} {acc_rgb2depth.avg:.3f} {loss_depth2rgb.avg:.3f} {acc_depth2rgb.avg:.3f} '", "\n", "'j {loss_rgb2joint.avg:.3f} {acc_rgb2joint.avg:.3f} {loss_d2joint.avg:.3f} {acc_d2joint.avg:.3f} '", "\n", "'jp {loss_jp_rgb.avg:.3f} {loss_jp_d.avg:.3f} {loss_jp_joints.avg:.3f} '", "\n", "'scl {loss_scl_meter.avg:.3f} '", "\n", "'seg {seg_loss_meter.avg:.3f} {seg_aacc_meter.avg:.3f}'", ".", "format", "(", "\n", "epoch", ",", "idx", "+", "1", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "loss_meter", ",", "\n", "data_time", "=", "data_time", ",", "acc1", "=", "acc1_meter", ",", "acc2", "=", "acc2_meter", ",", "acc3", "=", "acc3_meter", ",", "\n", "loss_rgb2depth", "=", "loss_rgb2depth_meter", ",", "loss_depth2rgb", "=", "loss_depth2rgb_meter", ",", "\n", "acc_rgb2depth", "=", "acc_rgb2depth_meter", ",", "acc_depth2rgb", "=", "acc_depth2rgb_meter", ",", "\n", "loss_rgb2joint", "=", "loss_rgb2joint_meter", ",", "acc_rgb2joint", "=", "acc_rgb2joint_meter", ",", "\n", "loss_d2joint", "=", "loss_d2joint_meter", ",", "acc_d2joint", "=", "acc_d2joint_meter", ",", "\n", "loss_jp_rgb", "=", "loss_jointpairs_rgb", ",", "loss_jp_d", "=", "loss_jointpairs_d", ",", "loss_jp_joints", "=", "loss_jointpairs_joints", ",", "\n", "loss_scl_meter", "=", "loss_scl_meter", ",", "seg_loss_meter", "=", "seg_loss_meter", ",", "seg_aacc_meter", "=", "seg_aacc_meter", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "", "return", "seg_loss_meter", ".", "avg", ",", "seg_aacc_meter", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.validate": [[826, 934], ["time.time", "model.eval", "classifier.eval", "util.AverageMeter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "segment_trainer.SegTrainer.gather_eval_counter", "torch.barrier", "torch.barrier", "torch.barrier", "segment_trainer.SegTrainer.gather_eval_counter", "torch.barrier", "torch.barrier", "torch.barrier", "segment_trainer.SegTrainer.gather_eval_counter", "segment_trainer.SegTrainer.calc_metrics", "segment_trainer.SegTrainer.calc_metrics", "segment_trainer.SegTrainer.calc_metrics", "data[].float().cuda", "data[].cuda", "data[].cuda", "data[].cuda", "data[].cuda", "data[].cuda", "data[].cuda", "data[].cuda", "data[].cuda", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "model", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "classifier", "classifier", "classifier", "enumerate", "util.AverageMeter.update", "time.time", "segment_trainer.SegTrainer.mprint", "enumerate", "segment_trainer.SegTrainer.mprint", "segment_trainer.SegTrainer.mprint", "time.time", "segment_trainer.SegTrainer.mprint", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "segment_trainer.SegTrainer.eval_seg_iou_acc", "print", "segment_trainer.SegTrainer.mprint", "data[].float", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.gather_eval_counter", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.gather_eval_counter", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.gather_eval_counter", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.calc_metrics", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.calc_metrics", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.calc_metrics", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.SGCN.graph_utils.normalize", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.mprint", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.mprint", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.mprint", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.mprint", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.eval_seg_iou_acc", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.segment_trainer.SegTrainer.mprint"], ["", "def", "validate", "(", "self", ",", "epoch", ",", "val_loader", ",", "model", ",", "classifier", ",", "criterion_seg", ")", ":", "\n", "        ", "time1", "=", "time", ".", "time", "(", ")", "\n", "args", "=", "self", ".", "args", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "\n", "total_area_intersect", "=", "torch", ".", "zeros", "(", "[", "3", ",", "self", ".", "args", ".", "n_class", ",", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "total_area_union", "=", "torch", ".", "zeros", "(", "[", "3", ",", "self", ".", "args", ".", "n_class", ",", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "total_area_pred_label", "=", "torch", ".", "zeros", "(", "[", "3", ",", "self", ".", "args", ".", "n_class", ",", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "total_area_label", "=", "torch", ".", "zeros", "(", "[", "3", ",", "self", ".", "args", ".", "n_class", ",", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                ", "inputs", "=", "data", "[", "0", "]", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "index", "=", "data", "[", "1", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "skeleton", "=", "data", "[", "2", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "original_joints2d", "=", "data", "[", "4", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "joints_vis", "=", "data", "[", "5", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "depth_mask", "=", "data", "[", "7", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "scale", "=", "data", "[", "8", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "label", "=", "data", "[", "9", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "true_label", "=", "data", "[", "10", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "assert", "torch", ".", "all", "(", "true_label", "==", "1", ")", "\n", "\n", "# compute output", "\n", "_feat1", ",", "_feat2", ",", "_feat3", ",", "f", ",", "aux_dict", "=", "model", "(", "inputs", ",", "skeleton", ",", "return_fm", "=", "True", ")", "\n", "\n", "linear_merge1", "=", "aux_dict", "[", "'linear_merge1'", "]", "\n", "linear_merge2", "=", "aux_dict", "[", "'linear_merge2'", "]", "\n", "linear_merge1", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "linear_merge1", ",", "dim", "=", "1", ")", "\n", "linear_merge2", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "linear_merge2", ",", "dim", "=", "1", ")", "\n", "max_linear_merge", "=", "torch", ".", "max", "(", "torch", ".", "stack", "(", "[", "linear_merge1", ",", "linear_merge2", "]", ")", ",", "0", ")", "[", "0", "]", "\n", "\n", "rgbd_output", "=", "classifier", "(", "max_linear_merge", ")", "\n", "rgbd_loss_seg", "=", "criterion_seg", "[", "0", "]", "(", "rgbd_output", ",", "label", ")", "\n", "\n", "rgb_output", "=", "classifier", "(", "linear_merge1", ")", "\n", "rgb_loss_seg", "=", "criterion_seg", "[", "0", "]", "(", "rgb_output", ",", "label", ")", "\n", "\n", "d_output", "=", "classifier", "(", "linear_merge2", ")", "\n", "d_loss_seg", "=", "criterion_seg", "[", "0", "]", "(", "d_output", ",", "label", ")", "\n", "\n", "for", "i", ",", "output", "in", "enumerate", "(", "[", "rgb_output", ",", "d_output", ",", "rgbd_output", "]", ")", ":", "\n", "                    ", "area_intersect", ",", "area_union", ",", "area_pred_label", ",", "area_label", "=", "self", ".", "eval_seg_iou_acc", "(", "output", ",", "label", ")", "\n", "total_area_intersect", "[", "i", "]", "+=", "area_intersect", "\n", "total_area_union", "[", "i", "]", "+=", "area_union", "\n", "total_area_pred_label", "[", "i", "]", "+=", "area_pred_label", "\n", "total_area_label", "[", "i", "]", "+=", "area_label", "\n", "\n", "# measure elapsed time", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", "and", "idx", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                    ", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", ".", "format", "(", "\n", "idx", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ")", ")", "\n", "\n", "", "", "total_area_intersect", "[", "0", "]", ",", "total_area_union", "[", "0", "]", ",", "total_area_pred_label", "[", "0", "]", ",", "total_area_label", "[", "0", "]", "=", "self", ".", "gather_eval_counter", "(", "\n", "total_area_intersect", "[", "0", "]", ",", "total_area_union", "[", "0", "]", ",", "\n", "total_area_pred_label", "[", "0", "]", ",", "total_area_label", "[", "0", "]", "\n", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "total_area_intersect", "[", "1", "]", ",", "total_area_union", "[", "1", "]", ",", "total_area_pred_label", "[", "1", "]", ",", "total_area_label", "[", "1", "]", "=", "self", ".", "gather_eval_counter", "(", "\n", "total_area_intersect", "[", "1", "]", ",", "total_area_union", "[", "1", "]", ",", "\n", "total_area_pred_label", "[", "1", "]", ",", "total_area_label", "[", "1", "]", "\n", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "total_area_intersect", "[", "2", "]", ",", "total_area_union", "[", "2", "]", ",", "total_area_pred_label", "[", "2", "]", ",", "total_area_label", "[", "2", "]", "=", "self", ".", "gather_eval_counter", "(", "\n", "total_area_intersect", "[", "2", "]", ",", "total_area_union", "[", "2", "]", ",", "\n", "total_area_pred_label", "[", "2", "]", ",", "total_area_label", "[", "2", "]", "\n", ")", "\n", "\n", "aacc1", ",", "miou1", ",", "macc1", ",", "iou1", ",", "acc1", "=", "self", ".", "calc_metrics", "(", "total_area_intersect", "[", "0", "]", ",", "\n", "total_area_union", "[", "0", "]", ",", "\n", "total_area_pred_label", "[", "0", "]", ",", "\n", "total_area_label", "[", "0", "]", ")", "\n", "aacc2", ",", "miou2", ",", "macc2", ",", "iou2", ",", "acc2", "=", "self", ".", "calc_metrics", "(", "total_area_intersect", "[", "1", "]", ",", "\n", "total_area_union", "[", "1", "]", ",", "\n", "total_area_pred_label", "[", "1", "]", ",", "\n", "total_area_label", "[", "1", "]", ")", "\n", "aacc3", ",", "miou3", ",", "macc3", ",", "iou3", ",", "acc3", "=", "self", ".", "calc_metrics", "(", "total_area_intersect", "[", "2", "]", ",", "\n", "total_area_union", "[", "2", "]", ",", "\n", "total_area_pred_label", "[", "2", "]", ",", "\n", "total_area_label", "[", "2", "]", ")", "\n", "\n", "if", "self", ".", "args", ".", "rank", "==", "0", ":", "\n", "                ", "self", ".", "mprint", "(", "'name            \\t\\t iou1   \\t\\t acc1   \\t\\t iou2   \\t\\t acc2   \\t\\t iou3   \\t\\t acc3  '", ")", "\n", "for", "i", ",", "class_name", "in", "enumerate", "(", "classes", ")", ":", "\n", "                    ", "self", ".", "mprint", "(", "f'{class_name:15s} \\t\\t {iou1[i]:.4f} \\t\\t {acc1[i]:.4f} \\t\\t {iou2[i]:.4f} \\t\\t {acc2[i]:.4f} \\t\\t {iou3[i]:.4f} \\t\\t {acc3[i]:.4f}'", ")", "\n", "\n", "", "self", ".", "mprint", "(", "f'mean           \\t\\t {miou1:.4f} \\t {macc1:.4f} \\t {miou2:.4f} \\t {macc2:.4f} \\t {miou3:.4f} \\t {macc3:.4f}'", ")", "\n", "self", ".", "mprint", "(", "f'All Acc: {aacc1:.4f} \\t {aacc2:.4f} \\t {aacc3:.4f}'", ")", "\n", "\n", "time2", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "mprint", "(", "'eval epoch {}, total time {:.2f}'", ".", "format", "(", "epoch", ",", "time2", "-", "time1", ")", ")", "\n", "\n", "", "", "return", "{", "\n", "'rgb'", ":", "{", "'aacc'", ":", "aacc1", ",", "'miou'", ":", "miou1", ",", "'macc'", ":", "macc1", ",", "'iou'", ":", "iou1", ",", "'acc'", ":", "acc1", "}", ",", "\n", "'d'", ":", "{", "'aacc'", ":", "aacc2", ",", "'miou'", ":", "miou2", ",", "'macc'", ":", "macc2", ",", "'iou'", ":", "iou2", ",", "'acc'", ":", "acc2", "}", ",", "\n", "'rgbd'", ":", "{", "'aacc'", ":", "aacc3", ",", "'miou'", ":", "miou3", ",", "'macc'", ":", "macc3", ",", "'iou'", ":", "iou3", ",", "'acc'", ":", "acc3", "}", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.__init__": [[16, 18], ["base_trainer.BaseTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "LinearTrainer", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.logging": [[19, 36], ["linear_trainer.LinearTrainer.logger.log_value", "linear_trainer.LinearTrainer.logger.log_value", "linear_trainer.LinearTrainer.logger.log_value", "linear_trainer.LinearTrainer.logger.log_value"], "methods", ["None"], ["", "def", "logging", "(", "self", ",", "epoch", ",", "logs", ",", "lr", "=", "None", ",", "train", "=", "True", ")", ":", "\n", "        ", "\"\"\" logging to tensorboard\n\n        Args:\n          epoch: training epoch\n          logs: loss and accuracy\n          lr: learning rate\n          train: True of False\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "pre", "=", "'train_'", "if", "train", "else", "'test_'", "\n", "self", ".", "logger", ".", "log_value", "(", "pre", "+", "'acc'", ",", "logs", "[", "0", "]", ",", "epoch", ")", "\n", "self", ".", "logger", ".", "log_value", "(", "pre", "+", "'acc5'", ",", "logs", "[", "1", "]", ",", "epoch", ")", "\n", "self", ".", "logger", ".", "log_value", "(", "pre", "+", "'loss'", ",", "logs", "[", "2", "]", ",", "epoch", ")", "\n", "if", "train", "and", "(", "lr", "is", "not", "None", ")", ":", "\n", "                ", "self", ".", "logger", ".", "log_value", "(", "'learning_rate'", ",", "lr", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.wrap_up": [[37, 52], ["torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.eval", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda"], ["", "", "", "def", "wrap_up", "(", "self", ",", "model", ",", "classifier", ")", ":", "\n", "        ", "\"\"\"Wrap up models with DDP\n\n        Args:\n          model: pretrained encoder, should be frozen\n          classifier: linear classifier\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "classifier", "=", "classifier", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", "=", "DDP", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "classifier", "=", "DDP", "(", "classifier", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "\n", "return", "model", ",", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.load_encoder_weights": [[53, 93], ["torch.load", "print", "print", "print", "print", "collections.OrderedDict", "state_dict.items", "model.encoder.load_state_dict", "collections.OrderedDict", "collections.OrderedDict", "state_dict.items", "model.encoder1.load_state_dict", "model.encoder2.load_state_dict", "k.replace.replace.replace", "k.replace.replace.replace", "k.replace.replace.replace", "k.replace.replace.replace", "k.replace.replace.replace"], "methods", ["None"], ["", "def", "load_encoder_weights", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\"load pre-trained weights for encoder\n\n        Args:\n          model: pretrained encoder, should be frozen\n        \"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "if", "args", ".", "ckpt", ":", "\n", "            ", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "ckpt", ",", "map_location", "=", "'cpu'", ")", "\n", "state_dict", "=", "ckpt", "[", "'model'", "]", "\n", "if", "args", ".", "modal", "==", "'RGB'", ":", "\n", "# Unimodal (RGB) case", "\n", "                ", "encoder_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "                    ", "k", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "\n", "if", "'encoder'", "in", "k", ":", "\n", "                        ", "k", "=", "k", ".", "replace", "(", "'encoder.'", ",", "''", ")", "\n", "encoder_state_dict", "[", "k", "]", "=", "v", "\n", "", "", "model", ".", "encoder", ".", "load_state_dict", "(", "encoder_state_dict", ")", "\n", "", "else", ":", "\n", "# Multimodal (CMC) case", "\n", "                ", "encoder1_state_dict", "=", "OrderedDict", "(", ")", "\n", "encoder2_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "                    ", "k", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "\n", "if", "'encoder1'", "in", "k", ":", "\n", "                        ", "k", "=", "k", ".", "replace", "(", "'encoder1.'", ",", "''", ")", "\n", "encoder1_state_dict", "[", "k", "]", "=", "v", "\n", "", "if", "'encoder2'", "in", "k", ":", "\n", "                        ", "k", "=", "k", ".", "replace", "(", "'encoder2.'", ",", "''", ")", "\n", "encoder2_state_dict", "[", "k", "]", "=", "v", "\n", "", "", "model", ".", "encoder1", ".", "load_state_dict", "(", "encoder1_state_dict", ")", "\n", "model", ".", "encoder2", ".", "load_state_dict", "(", "encoder2_state_dict", ")", "\n", "", "print", "(", "'Pre-trained weights loaded!'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'=============================='", ")", "\n", "print", "(", "'warning: no pre-trained model!'", ")", "\n", "print", "(", "'=============================='", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.resume_model": [[94, 112], ["os.path.isfile", "torch.load", "classifier.load_state_dict", "optimizer.load_state_dict", "print", "torch.cuda.empty_cache", "print"], "methods", ["None"], ["", "def", "resume_model", "(", "self", ",", "classifier", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"load classifier checkpoint\"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "start_epoch", "=", "1", "\n", "if", "args", ".", "resume", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'classifier'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "del", "checkpoint", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "return", "start_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save": [[113, 132], ["print", "os.path.join", "torch.save", "classifier.state_dict", "optimizer.state_dict", "os.path.join", "torch.save"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.save"], ["", "def", "save", "(", "self", ",", "classifier", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"save classifier to checkpoint\"\"\"", "\n", "args", "=", "self", ".", "args", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "# saving the classifier to each instance", "\n", "            ", "print", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'classifier'", ":", "classifier", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_folder", ",", "'current.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_file", ")", "\n", "if", "epoch", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "                ", "save_file", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "model_folder", ",", "'ckpt_epoch_{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_file", ")", "\n", "# help release GPU memory", "\n", "", "del", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train": [[133, 192], ["time.time", "model.eval", "classifier.train", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "time.time", "enumerate", "time.time", "print", "util.AverageMeter.update", "input.cuda.cuda.float", "input.cuda.cuda.cuda", "target.cuda.cuda.cuda", "classifier", "criterion", "util.accuracy", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "util.AverageMeter.update", "time.time", "torch.no_grad", "model", "feat.detach.detach.detach", "criterion.item", "input.cuda.cuda.size", "input.cuda.cuda.size", "input.cuda.cuda.size", "print", "sys.stdout.flush", "time.time", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.train", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update"], ["", "", "def", "train", "(", "self", ",", "epoch", ",", "train_loader", ",", "model", ",", "classifier", ",", "\n", "criterion", ",", "optimizer", ")", ":", "\n", "        ", "time1", "=", "time", ".", "time", "(", ")", "\n", "args", "=", "self", ".", "args", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "classifier", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "input", "=", "input", ".", "float", "(", ")", "\n", "input", "=", "input", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# forward", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "feat", "=", "model", "(", "x", "=", "input", ",", "mode", "=", "2", ")", "\n", "feat", "=", "feat", ".", "detach", "(", ")", "\n", "\n", "", "output", "=", "classifier", "(", "feat", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# backward", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# print info", "\n", "if", "args", ".", "local_rank", "==", "0", "and", "idx", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Acc@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Acc@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "idx", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "time2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'train epoch {}, total time {:.2f}'", ".", "format", "(", "epoch", ",", "time2", "-", "time1", ")", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.linear_trainer.LinearTrainer.validate": [[193, 243], ["time.time", "model.eval", "classifier.eval", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "time.time", "print", "torch.no_grad", "time.time", "enumerate", "print", "input.cuda.cuda.float", "input.cuda.cuda.cuda", "target.cuda.cuda.cuda", "model", "classifier", "criterion", "util.accuracy", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "time.time", "criterion.item", "input.cuda.cuda.size", "input.cuda.cuda.size", "input.cuda.cuda.size", "print", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.memory.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.accuracy", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update", "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update"], ["", "def", "validate", "(", "self", ",", "epoch", ",", "val_loader", ",", "model", ",", "classifier", ",", "criterion", ")", ":", "\n", "        ", "time1", "=", "time", ".", "time", "(", ")", "\n", "args", "=", "self", ".", "args", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                ", "input", "=", "input", ".", "float", "(", ")", "\n", "input", "=", "input", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "feat", "=", "model", "(", "x", "=", "input", ",", "mode", "=", "2", ")", "\n", "output", "=", "classifier", "(", "feat", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "local_rank", "==", "0", "and", "idx", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                    ", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Acc@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Acc@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "idx", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "print", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "time2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'eval epoch {}, total time {:.2f}'", ".", "format", "(", "epoch", ",", "time2", "-", "time1", ")", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "losses", ".", "avg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.__init__": [[15, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "local_group", "=", "None", "\n", "self", ".", "logger", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.init_ddp_environment": [[20, 74], ["range", "print", "int", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "subprocess.getoutput", "str", "str", "torch.init_process_group", "torch.init_process_group", "torch.init_process_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "torch.distributed.new_group", "local_groups.append", "print", "print", "print", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "list", "range"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size", "home.repos.pwc.inspect_result.hongfz16_hcmoco.utils.utils.get_world_size"], ["", "def", "init_ddp_environment", "(", "self", ",", "gpu", ",", "ngpus_per_node", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n          gpu: current gpu id\n          ngpus_per_node: num of process/gpus per node\n        \"\"\"", "\n", "\n", "# torch.cuda.set_device(gpu)", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "self", ".", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "self", ".", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "distributed", ":", "\n", "            ", "os", ".", "environ", "[", "'PYTHONWARNINGS'", "]", "=", "'ignore:semaphore_tracker:UserWarning'", "\n", "# dist.init_process_group(", "\n", "#     backend=self.args.dist_backend, init_method=self.args.dist_url,", "\n", "#     world_size=self.args.world_size, rank=self.args.rank)", "\n", "proc_id", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "ntasks", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_NTASKS'", "]", ")", "\n", "node_list", "=", "os", ".", "environ", "[", "'SLURM_NODELIST'", "]", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "proc_id", "%", "num_gpus", ")", "\n", "addr", "=", "subprocess", ".", "getoutput", "(", "'scontrol show hostname {} | head -n1'", ".", "format", "(", "node_list", ")", ")", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "addr", "\n", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", "=", "str", "(", "ntasks", ")", "\n", "os", ".", "environ", "[", "'RANK'", "]", "=", "str", "(", "proc_id", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "self", ".", "args", ".", "dist_backend", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "args", ".", "gpu", "=", "proc_id", "\n", "self", ".", "args", ".", "ngpus_per_node", "=", "ngpus_per_node", "\n", "self", ".", "args", ".", "node_rank", "=", "self", ".", "args", ".", "rank", "\n", "self", ".", "args", ".", "local_rank", "=", "proc_id", "\n", "self", ".", "args", ".", "local_center", "=", "self", ".", "args", ".", "rank", "*", "ngpus_per_node", "\n", "if", "self", ".", "args", ".", "multiprocessing_distributed", ":", "\n", "            ", "self", ".", "args", ".", "rank", "=", "self", ".", "args", ".", "rank", "*", "ngpus_per_node", "+", "proc_id", "\n", "\n", "# setup local group on each node, for ShuffleBN", "\n", "", "local_groups", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "args", ".", "world_size", "//", "ngpus_per_node", ")", ":", "\n", "            ", "gp", "=", "torch", ".", "distributed", ".", "new_group", "(", "\n", "ranks", "=", "list", "(", "range", "(", "i", "*", "ngpus_per_node", ",", "(", "i", "+", "1", ")", "*", "ngpus_per_node", ")", ")", ",", "\n", "backend", "=", "self", ".", "args", ".", "dist_backend", ")", "\n", "local_groups", ".", "append", "(", "gp", ")", "\n", "\n", "", "local_group", "=", "local_groups", "[", "self", ".", "args", ".", "rank", "//", "ngpus_per_node", "]", "\n", "if", "self", ".", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "print", "(", "\"node_rank:\"", ",", "self", ".", "args", ".", "node_rank", ")", "\n", "print", "(", "\"local_center:\"", ",", "self", ".", "args", ".", "local_center", ")", "\n", "print", "(", "\"local group size:\"", ",", "dist", ".", "get_world_size", "(", "local_group", ")", ")", "\n", "\n", "", "self", ".", "local_group", "=", "local_group", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.init_tensorboard_logger": [[75, 79], ["tensorboard_logger.Logger"], "methods", ["None"], ["", "def", "init_tensorboard_logger", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "self", ".", "logger", "=", "tb_logger", ".", "Logger", "(", "logdir", "=", "args", ".", "tb_folder", ",", "flush_secs", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.adjust_learning_rate": [[80, 94], ["numpy.sum", "numpy.asarray", "math.cos"], "methods", ["None"], ["", "", "def", "adjust_learning_rate", "(", "self", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "lr", "=", "args", ".", "learning_rate", "\n", "if", "args", ".", "cosine", ":", "\n", "            ", "eta_min", "=", "lr", "*", "(", "args", ".", "lr_decay_rate", "**", "3", ")", "\n", "lr", "=", "eta_min", "+", "(", "lr", "-", "eta_min", ")", "*", "(", "\n", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "/", "2", "\n", "", "else", ":", "\n", "            ", "steps", "=", "np", ".", "sum", "(", "epoch", ">", "np", ".", "asarray", "(", "args", ".", "lr_decay_epochs", ")", ")", "\n", "if", "steps", ">", "0", ":", "\n", "                ", "lr", "=", "lr", "*", "(", "args", ".", "lr_decay_rate", "**", "steps", ")", "\n", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.base_trainer.BaseTrainer.warmup_learning_rate": [[95, 104], ["None"], "methods", ["None"], ["", "", "def", "warmup_learning_rate", "(", "self", ",", "epoch", ",", "batch_id", ",", "total_batches", ",", "optimizer", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "if", "args", ".", "warm", "and", "epoch", "<=", "args", ".", "warm_epochs", ":", "\n", "            ", "p", "=", "(", "batch_id", "+", "(", "epoch", "-", "1", ")", "*", "total_batches", ")", "/", "(", "args", ".", "warm_epochs", "*", "total_batches", ")", "\n", "lr", "=", "args", ".", "warmup_from", "+", "p", "*", "(", "args", ".", "warmup_to", "-", "args", ".", "warmup_from", ")", "\n", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.__init__": [[8, 10], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.reset"], ["from", "skimage", "import", "color", "\n", "from", "torchvision", "import", "transforms", ",", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.reset": [[11, 16], ["None"], "methods", ["None"], ["from", ".", "dataset", "import", "ImageFolderInstance", "\n", "from", ".", "RandAugment", "import", "rand_augment_transform", "\n", "\n", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "class", "StackTransform", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.AverageMeter.update": [[17, 22], ["None"], "methods", ["None"], ["    ", "\"\"\"transform a group of images independently\"\"\"", "\n", "def", "__init__", "(", "self", ",", "transform", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "\n", "", "def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "self", ".", "transform", "(", "crop", ")", "for", "crop", "in", "imgs", "]", ")", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.learning.util.accuracy": [[24, 39], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["\n", "", "", "class", "JigsawCrop", "(", "object", ")", ":", "\n", "    ", "\"\"\"Jigsaw style crop\"\"\"", "\n", "def", "__init__", "(", "self", ",", "n_grid", "=", "3", ",", "img_size", "=", "255", ",", "crop_size", "=", "64", ")", ":", "\n", "        ", "self", ".", "n_grid", "=", "n_grid", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "grid_size", "=", "int", "(", "img_size", "/", "self", ".", "n_grid", ")", "\n", "self", ".", "side", "=", "self", ".", "grid_size", "-", "self", ".", "crop_size", "\n", "\n", "yy", ",", "xx", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "n_grid", ")", ",", "np", ".", "arange", "(", "n_grid", ")", ")", "\n", "self", ".", "yy", "=", "np", ".", "reshape", "(", "yy", "*", "self", ".", "grid_size", ",", "(", "n_grid", "*", "n_grid", ",", ")", ")", "\n", "self", ".", "xx", "=", "np", ".", "reshape", "(", "xx", "*", "self", ".", "grid_size", ",", "(", "n_grid", "*", "n_grid", ",", ")", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "r_x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "side", "+", "1", ",", "self", ".", "n_grid", "*", "self", ".", "n_grid", ")", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.NTURGBD.preprocess_nturgbd.process_video_set": [[23, 56], ["print", "range", "numpy.concatenate().astype", "numpy.concatenate().astype", "cv2.findHomography", "print", "len", "range", "np.concatenate().astype.append", "np.concatenate().astype.append", "open", "fd.readlines", "int", "range", "numpy.array", "depth.append", "color.append", "len", "numpy.stack", "numpy.stack", "numpy.concatenate", "numpy.concatenate", "numpy.random.rand", "os.path.join", "fd.readlines.pop", "int", "fd.readlines.pop", "range", "len", "fd.readlines.pop", "int", "fd.readlines.pop().split", "fd.readlines.pop", "joint_data.append", "fd.readlines.pop"], "function", ["None"], ["", "def", "process_video_set", "(", "target_video_set", ")", ":", "\n", "    ", "print", "(", "\"Starting {}\"", ".", "format", "(", "target_video_set", ")", ")", "\n", "rgb", "=", "[", "]", "\n", "d", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "tags", ")", ")", ":", "\n", "        ", "if", "video_set", "[", "i", "]", "!=", "target_video_set", "or", "np", ".", "random", ".", "rand", "(", ")", ">", "0.5", ":", "\n", "            ", "continue", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "skeleton_folder", ",", "tags", "[", "i", "]", "+", "'.skeleton'", ")", ",", "'r'", ")", "as", "fd", ":", "\n", "            ", "data", "=", "fd", ".", "readlines", "(", ")", "\n", "", "joint_data", "=", "[", "]", "\n", "for", "frame_idx", "in", "range", "(", "int", "(", "data", ".", "pop", "(", "0", ")", ")", ")", ":", "\n", "            ", "for", "body_idx", "in", "range", "(", "int", "(", "data", ".", "pop", "(", "0", ")", ")", ")", ":", "\n", "                ", "body", "=", "data", ".", "pop", "(", "0", ")", "\n", "for", "joint_idx", "in", "range", "(", "int", "(", "data", ".", "pop", "(", "0", ")", ")", ")", ":", "\n", "                    ", "line", "=", "data", ".", "pop", "(", "0", ")", ".", "split", "(", ")", "\n", "if", "body_idx", "==", "0", ":", "\n", "                        ", "joint_data", ".", "append", "(", "(", "frame_idx", ",", "body_idx", ",", "joint_idx", ",", "line", "[", ":", "7", "]", ")", ")", "\n", "", "", "", "", "depth", "=", "[", "]", "\n", "color", "=", "[", "]", "\n", "for", "joint", "in", "joint_data", ":", "\n", "            ", "x", "=", "np", ".", "array", "(", "joint", "[", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "depth", ".", "append", "(", "x", "[", "3", ":", "5", "]", ")", "\n", "color", ".", "append", "(", "x", "[", "5", ":", "7", "]", ")", "\n", "", "if", "len", "(", "depth", ")", "==", "0", ":", "\n", "            ", "assert", "len", "(", "color", ")", "==", "0", "\n", "continue", "\n", "", "d", ".", "append", "(", "np", ".", "stack", "(", "depth", ")", ")", "\n", "rgb", ".", "append", "(", "np", ".", "stack", "(", "color", ")", ")", "\n", "", "rgb", "=", "np", ".", "concatenate", "(", "rgb", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "d", "=", "np", ".", "concatenate", "(", "d", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "H", ",", "_", "=", "cv2", ".", "findHomography", "(", "rgb", ",", "d", ",", "cv2", ".", "RANSAC", ")", "\n", "print", "(", "\"Finishing {}\"", ".", "format", "(", "target_video_set", ")", ")", "\n", "return", "(", "target_video_set", ",", "H", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.NTURGBD.preprocess_nturgbd.process_tag": [[57, 76], ["print", "os.path.join", "cv2.VideoCapture", "print", "os.path.exists", "os.makedirs", "os.path.join", "cv2.VideoCapture.read", "cv2.warpPerspective", "os.path.join", "cv2.imwrite", "str().zfill", "str"], "function", ["None"], ["", "def", "process_tag", "(", "arg", ")", ":", "\n", "    ", "tag", "=", "arg", "[", "0", "]", "\n", "H", "=", "arg", "[", "1", "]", "\n", "print", "(", "\"Starting {}\"", ".", "format", "(", "tag", ")", ")", "\n", "target_folder", "=", "os", ".", "path", ".", "join", "(", "root_folder", ",", "'./nturgb+d_rgb_warped_correction'", ",", "tag", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "target_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "target_folder", ",", "exist_ok", "=", "True", ")", "\n", "", "vidcap", "=", "cv2", ".", "VideoCapture", "(", "os", ".", "path", ".", "join", "(", "rgb_folder", ",", "tag", "+", "'_rgb.avi'", ")", ")", "\n", "counter", "=", "1", "\n", "success", "=", "1", "\n", "while", "success", ":", "\n", "        ", "success", ",", "image", "=", "vidcap", ".", "read", "(", ")", "\n", "if", "not", "success", ":", "\n", "            ", "break", "\n", "", "warped_image", "=", "cv2", ".", "warpPerspective", "(", "image", ",", "H", ",", "(", "512", ",", "424", ")", ")", "\n", "save_image_fname", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "'WRGB-{}.jpg'", ".", "format", "(", "str", "(", "counter", ")", ".", "zfill", "(", "8", ")", ")", ")", "\n", "cv2", ".", "imwrite", "(", "save_image_fname", ",", "warped_image", ")", "\n", "counter", "+=", "1", "\n", "", "print", "(", "\"Finishing {} with {} frames\"", ".", "format", "(", "tag", ",", "counter", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.NTURGBD.generate_skeleton_data.func": [[13, 47], ["range", "os.path.join", "enumerate", "print", "open", "fd.readlines", "int", "range", "frame_data.append", "os.path.exists", "os.makedirs", "os.path.join", "fd.readlines.pop", "int", "fd.readlines.pop", "cur_frame_data[].append", "range", "open", "pickle.dump", "fd.readlines.pop", "int", "fd.readlines.pop().split", "joint_data.append", "numpy.array", "[].append", "[].append", "[].append", "str().zfill", "fd.readlines.pop", "list", "list", "list", "fd.readlines.pop", "str"], "function", ["None"], ["def", "func", "(", "arg", ")", ":", "\n", "    ", "t", ",", "sf", "=", "arg", "\n", "with", "open", "(", "sf", ",", "'r'", ")", "as", "fd", ":", "\n", "        ", "data", "=", "fd", ".", "readlines", "(", ")", "\n", "", "joint_data", "=", "[", "]", "\n", "frame_data", "=", "[", "]", "\n", "for", "frame_idx", "in", "range", "(", "int", "(", "data", ".", "pop", "(", "0", ")", ")", ")", ":", "\n", "        ", "cur_frame_data", "=", "{", "}", "\n", "cur_frame_data", "[", "'frame_idx'", "]", "=", "frame_idx", "\n", "cur_frame_data", "[", "'joints'", "]", "=", "[", "]", "\n", "for", "body_idx", "in", "range", "(", "int", "(", "data", ".", "pop", "(", "0", ")", ")", ")", ":", "\n", "            ", "body", "=", "data", ".", "pop", "(", "0", ")", "\n", "cur_frame_data", "[", "'joints'", "]", ".", "append", "(", "{", "\n", "'body_idx'", ":", "body_idx", ",", "\n", "'3d_loc'", ":", "[", "]", ",", "\n", "'rgb_loc'", ":", "[", "]", ",", "\n", "'d_loc'", ":", "[", "]", ",", "\n", "}", ")", "\n", "for", "joint_idx", "in", "range", "(", "int", "(", "data", ".", "pop", "(", "0", ")", ")", ")", ":", "\n", "                ", "line", "=", "data", ".", "pop", "(", "0", ")", ".", "split", "(", ")", "\n", "joint_data", ".", "append", "(", "(", "frame_idx", ",", "body_idx", ",", "joint_idx", ",", "line", "[", ":", "7", "]", ")", ")", "\n", "x", "=", "np", ".", "array", "(", "line", "[", ":", "7", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cur_frame_data", "[", "'joints'", "]", "[", "-", "1", "]", "[", "'3d_loc'", "]", ".", "append", "(", "list", "(", "x", "[", ":", "3", "]", ")", ")", "\n", "cur_frame_data", "[", "'joints'", "]", "[", "-", "1", "]", "[", "'rgb_loc'", "]", ".", "append", "(", "list", "(", "x", "[", "5", ":", "7", "]", ")", ")", "\n", "cur_frame_data", "[", "'joints'", "]", "[", "-", "1", "]", "[", "'d_loc'", "]", ".", "append", "(", "list", "(", "x", "[", "3", ":", "5", "]", ")", ")", "\n", "", "", "frame_data", ".", "append", "(", "cur_frame_data", ")", "\n", "", "cur_target_folder", "=", "os", ".", "path", ".", "join", "(", "target_folder", ",", "t", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cur_target_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cur_target_folder", ",", "exist_ok", "=", "True", ")", "\n", "", "for", "i", ",", "fd", "in", "enumerate", "(", "frame_data", ")", ":", "\n", "        ", "cur_target_fname", "=", "os", ".", "path", ".", "join", "(", "cur_target_folder", ",", "'Skeleton-{}.pkl'", ".", "format", "(", "str", "(", "i", ")", ".", "zfill", "(", "8", ")", ")", ")", "\n", "with", "open", "(", "cur_target_fname", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "fd", ",", "f", ")", "\n", "", "", "print", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.options.test_options.TestOptions.initialize": [[7, 27], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.set_defaults", "base_options.BaseOptions.initialize.set_defaults", "base_options.BaseOptions.initialize.set_defaults", "base_options.BaseOptions.initialize.set_defaults", "base_options.BaseOptions.initialize.set_defaults"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--ckpt'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'the checkpoint to test'", ")", "\n", "parser", ".", "add_argument", "(", "'--aug_linear'", ",", "type", "=", "str", ",", "default", "=", "'NULL'", ",", "\n", "choices", "=", "[", "'NULL'", ",", "'RA'", "]", ",", "\n", "help", "=", "'linear evaluation augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "\n", "help", "=", "'crop threshold for RandomResizedCrop'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_class'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'number of classes for linear probing'", ")", "\n", "\n", "parser", ".", "set_defaults", "(", "epochs", "=", "60", ")", "\n", "parser", ".", "set_defaults", "(", "learning_rate", "=", "30", ")", "\n", "parser", ".", "set_defaults", "(", "lr_decay_epochs", "=", "'30,40,50'", ")", "\n", "parser", ".", "set_defaults", "(", "lr_decay_rate", "=", "0.2", ")", "\n", "parser", ".", "set_defaults", "(", "weight_decay", "=", "0", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.options.test_options.TestOptions.modify_options": [[28, 56], ["test_options.TestOptions.override_options", "test_options.TestOptions.lr_decay_epochs.split", "list", "os.path.join", "os.path.join", "test_options.TestOptions.lr_decay_epochs.append", "print", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "int", "test_options.TestOptions.ckpt.split"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.override_options"], ["", "def", "modify_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "opt", "=", "self", ".", "override_options", "(", "opt", ")", "\n", "\n", "iterations", "=", "opt", ".", "lr_decay_epochs", ".", "split", "(", "','", ")", "\n", "opt", ".", "lr_decay_epochs", "=", "list", "(", "[", "]", ")", "\n", "for", "it", "in", "iterations", ":", "\n", "            ", "opt", ".", "lr_decay_epochs", ".", "append", "(", "int", "(", "it", ")", ")", "\n", "\n", "# set up saving name", "\n", "", "if", "opt", ".", "ckpt", ":", "\n", "            ", "opt", ".", "model_name", "=", "opt", ".", "ckpt", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "'warning: no pre-trained model!'", ")", "\n", "opt", ".", "model_name", "=", "'Scratch'", "\n", "", "opt", ".", "model_name", "=", "'{}_linear_{}_{}'", ".", "format", "(", "\n", "opt", ".", "model_name", ",", "opt", ".", "aug_linear", ",", "opt", ".", "crop", ")", "\n", "if", "opt", ".", "cosine", ":", "\n", "            ", "opt", ".", "model_name", "=", "'{}_cosine'", ".", "format", "(", "opt", ".", "model_name", ")", "\n", "\n", "# create folders", "\n", "", "opt", ".", "model_folder", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "model_path", ",", "opt", ".", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "model_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "opt", ".", "model_folder", ")", "\n", "", "opt", ".", "tb_folder", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "tb_path", ",", "opt", ".", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "tb_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "opt", ".", "tb_folder", ")", "\n", "\n", "", "return", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.options.train_options.TrainOptions.initialize": [[8, 25], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--aug'", ",", "default", "=", "'A'", ",", "type", "=", "str", ",", "\n", "help", "=", "'data augmentation for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'balance between Jigsaw and InsDis'", ")", "\n", "parser", ".", "add_argument", "(", "'--warm'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'add warm-up setting'", ")", "\n", "parser", ".", "add_argument", "(", "'--amp'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'using mixed precision'", ")", "\n", "parser", ".", "add_argument", "(", "'--opt_level'", ",", "type", "=", "str", ",", "default", "=", "'O2'", ",", "\n", "choices", "=", "[", "'O1'", ",", "'O2'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--n_class'", ",", "type", "=", "int", ",", "default", "=", "31", ",", "\n", "help", "=", "'number of classes for linear probing'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.options.train_options.TrainOptions.modify_options": [[26, 75], ["train_options.TrainOptions.override_options", "train_options.TrainOptions.lr_decay_epochs.split", "list", "train_options.TrainOptions.in_channel_list.split", "list", "os.path.join", "os.path.join", "train_options.TrainOptions.lr_decay_epochs.append", "train_options.TrainOptions.in_channel_list.append", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "int", "int", "math.cos"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.override_options"], ["", "def", "modify_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "opt", "=", "self", ".", "override_options", "(", "opt", ")", "\n", "\n", "iterations", "=", "opt", ".", "lr_decay_epochs", ".", "split", "(", "','", ")", "\n", "opt", ".", "lr_decay_epochs", "=", "list", "(", "[", "]", ")", "\n", "for", "it", "in", "iterations", ":", "\n", "            ", "opt", ".", "lr_decay_epochs", ".", "append", "(", "int", "(", "it", ")", ")", "\n", "\n", "", "in_channel_list", "=", "opt", ".", "in_channel_list", ".", "split", "(", "','", ")", "\n", "opt", ".", "in_channel_list", "=", "list", "(", "[", "]", ")", "\n", "for", "ic", "in", "in_channel_list", ":", "\n", "            ", "opt", ".", "in_channel_list", ".", "append", "(", "int", "(", "ic", ")", ")", "\n", "\n", "# set up saving name", "\n", "", "opt", ".", "model_name", "=", "'{}_{}_{}_Jig_{}_{}_aug_{}_{}_{}_{}'", ".", "format", "(", "\n", "opt", ".", "method", ",", "opt", ".", "arch", ",", "opt", ".", "modal", ",", "opt", ".", "jigsaw", ",", "opt", ".", "mem", ",", "\n", "opt", ".", "aug", ",", "opt", ".", "head", ",", "opt", ".", "nce_t", ",", "opt", ".", "tag", ",", "\n", ")", "\n", "if", "opt", ".", "amp", ":", "\n", "            ", "opt", ".", "model_name", "=", "'{}_amp_{}'", ".", "format", "(", "opt", ".", "model_name", ",", "opt", ".", "opt_level", ")", "\n", "", "if", "opt", ".", "cosine", ":", "\n", "            ", "opt", ".", "model_name", "=", "'{}_cosine'", ".", "format", "(", "opt", ".", "model_name", ")", "\n", "\n", "# warm-up for large-batch training, e.g. 1024 with multiple nodes", "\n", "", "if", "opt", ".", "batch_size", ">", "256", ":", "\n", "            ", "opt", ".", "warm", "=", "True", "\n", "", "if", "opt", ".", "warm", ":", "\n", "            ", "opt", ".", "model_name", "=", "'{}_warm'", ".", "format", "(", "opt", ".", "model_name", ")", "\n", "opt", ".", "warmup_from", "=", "0.01", "\n", "if", "opt", ".", "epochs", ">", "500", ":", "\n", "                ", "opt", ".", "warm_epochs", "=", "10", "\n", "", "else", ":", "\n", "                ", "opt", ".", "warm_epochs", "=", "5", "\n", "", "if", "opt", ".", "cosine", ":", "\n", "                ", "eta_min", "=", "opt", ".", "learning_rate", "*", "(", "opt", ".", "lr_decay_rate", "**", "3", ")", "\n", "opt", ".", "warmup_to", "=", "eta_min", "+", "(", "opt", ".", "learning_rate", "-", "eta_min", ")", "*", "(", "\n", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "opt", ".", "warm_epochs", "/", "opt", ".", "epochs", ")", ")", "/", "2", "\n", "", "else", ":", "\n", "                ", "opt", ".", "warmup_to", "=", "opt", ".", "learning_rate", "\n", "\n", "# create folders", "\n", "", "", "opt", ".", "model_folder", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "model_path", ",", "opt", ".", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "model_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "opt", ".", "model_folder", ",", "exist_ok", "=", "True", ")", "\n", "", "opt", ".", "tb_folder", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "tb_path", ",", "opt", ".", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "tb_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "opt", ".", "tb_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "return", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.__init__": [[7, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "self", ".", "parser", "=", "None", "\n", "self", ".", "opt", "=", "None", "\n", "# config for predefined method", "\n", "self", ".", "override_dict", "=", "{", "\n", "'InsDis'", ":", "[", "'RGB'", ",", "False", ",", "'bank'", ",", "'A'", ",", "'linear'", ",", "0.07", "]", ",", "\n", "'CMC'", ":", "[", "'CMC'", ",", "False", ",", "'bank'", ",", "'C'", ",", "'linear'", ",", "0.07", "]", ",", "\n", "'MoCo'", ":", "[", "'RGB'", ",", "False", ",", "'moco'", ",", "'A'", ",", "'linear'", ",", "0.07", "]", ",", "\n", "'PIRL'", ":", "[", "'RGB'", ",", "True", ",", "'bank'", ",", "'A'", ",", "'linear'", ",", "0.07", "]", ",", "\n", "'MoCov2'", ":", "[", "'RGB'", ",", "False", ",", "'moco'", ",", "'B'", ",", "'mlp'", ",", "0.2", "]", ",", "\n", "'CMCv2'", ":", "[", "'CMC'", ",", "False", ",", "'moco'", ",", "'E'", ",", "'mlp'", ",", "0.2", "]", ",", "\n", "'InfoMin'", ":", "[", "'RGB'", ",", "True", ",", "'moco'", ",", "'D'", ",", "'mlp'", ",", "0.15", "]", ",", "\n", "'CMCRGBD2S'", ":", "[", "'RGBD2S'", ",", "False", ",", "'bank'", ",", "'C'", ",", "'linear'", ",", "0.07", "]", ",", "\n", "'CMCJointsPri3DRGBD2S'", ":", "[", "'RGBD2S'", ",", "False", ",", "'bank+jointspri3d'", ",", "'C'", ",", "'linear'", ",", "0.07", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.initialize": [[31, 152], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "# specify folder", "\n", "        ", "parser", ".", "add_argument", "(", "'--data_folder'", ",", "type", "=", "str", ",", "default", "=", "'./data'", ",", "\n", "help", "=", "'path to data'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_file_list'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--val_file_list'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "'./save'", ",", "\n", "help", "=", "'path to save model'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb_path'", ",", "type", "=", "str", ",", "default", "=", "'./tb'", ",", "\n", "help", "=", "'path to tensorboard'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--tag'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "\n", "# basics", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "'batch_size'", ")", "\n", "parser", ".", "add_argument", "(", "'-j'", ",", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "40", ",", "\n", "help", "=", "'num of workers to use'", ")", "\n", "\n", "# optimization", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "\n", "help", "=", "'number of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.03", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'120,160'", ",", "\n", "help", "=", "'where to decay lr, can be a list'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'decay rate for learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "'momentum for SGD'", ")", "\n", "parser", ".", "add_argument", "(", "'--cosine'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'using cosine annealing'", ")", "\n", "parser", ".", "add_argument", "(", "'--downstream_training'", ",", "action", "=", "'store_true'", ")", "###", "\n", "\n", "# method selection", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "default", "=", "'Customize'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'InsDis'", ",", "'CMC'", ",", "'CMCv2'", ",", "'MoCo'", ",", "'MoCov2'", ",", "\n", "'PIRL'", ",", "'InfoMin'", ",", "'Customize'", ",", "'CMCRGBD2S'", "]", ",", "\n", "help", "=", "'Choose predefined method. Configs will be override '", "\n", "'for all methods except for `Customize`, which allows '", "\n", "'for user-defined combination of methods'", ")", "\n", "# method configuration", "\n", "parser", ".", "add_argument", "(", "'--modal'", ",", "default", "=", "'RGB'", ",", "type", "=", "str", ",", "choices", "=", "[", "'RGB'", ",", "'CMC'", ",", "'RGBD2S'", "]", ",", "\n", "help", "=", "'single RGB modal, or two modalities in CMC'", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--in_channel_list'", ",", "type", "=", "str", ",", "default", "=", "'1,2'", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--linear_feat_map'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--width'", ",", "type", "=", "int", ",", "default", "=", "18", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--IN_Pretrain'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--pri3d_num_samples_per_image'", ",", "type", "=", "int", ",", "default", "=", "400", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--modality_missing'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--mpii_root'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--pool_method'", ",", "type", "=", "str", ",", "default", "=", "'mean'", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--depth_Pretrain'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--cmc_loss_weight'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--skeleton_meta_name'", ",", "type", "=", "str", ",", "default", "=", "'mpii'", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--coco_root'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--not_use_weighted_sampler'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--seg_root'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--seg_file_list'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--seg_val_file_list'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--mask_seg_depth'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "### for dataset", "\n", "parser", ".", "add_argument", "(", "'--test_type'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "###0:rgbd; 1:rgb; 2:depth", "\n", "parser", ".", "add_argument", "(", "'--cmc_loss_weights'", ",", "type", "=", "float", ",", "default", "=", "1", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--other_loss_weights'", ",", "type", "=", "float", ",", "default", "=", "1", ")", "###", "\n", "parser", ".", "add_argument", "(", "'--supervise_type'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "###0:rgbd; 1:rgb; 2:depth; 3: no sup", "\n", "parser", ".", "add_argument", "(", "'--mask_seg_rgb'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "### for dataset", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "type", "=", "float", ",", "default", "=", "0.07", ")", "\n", "parser", ".", "add_argument", "(", "'--random_flip'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--jigsaw'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'adding PIRL branch'", ")", "\n", "parser", ".", "add_argument", "(", "'--mem'", ",", "default", "=", "'bank'", ",", "type", "=", "str", ",", "choices", "=", "[", "'bank'", ",", "'moco'", "]", ",", "\n", "help", "=", "'memory mechanism: memory bank, or moco encoder cache'", ")", "\n", "\n", "# model setup", "\n", "parser", ".", "add_argument", "(", "'--arch'", ",", "default", "=", "'resnet50'", ",", "type", "=", "str", ",", "\n", "help", "=", "'e.g., resnet50, resnext50, resnext101'", "\n", "'and their wider variants, resnet50x4'", ",", ")", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--feat_dim'", ",", "default", "=", "128", ",", "type", "=", "int", ",", "\n", "help", "=", "'feature dimension for contrastive loss'", ")", "\n", "parser", ".", "add_argument", "(", "'-k'", ",", "'--nce_k'", ",", "default", "=", "65536", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of negatives'", ")", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "'--nce_m'", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "\n", "help", "=", "'momentum for memory update'", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--nce_t'", ",", "default", "=", "0.07", ",", "type", "=", "float", ",", "\n", "help", "=", "'temperature'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "default", "=", "0.999", ",", "type", "=", "float", ",", "\n", "help", "=", "'momentum coefficients for moco encoder update'", ")", "\n", "parser", ".", "add_argument", "(", "'--head'", ",", "default", "=", "'linear'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'linear'", ",", "'mlp'", "]", ",", "help", "=", "'projection head'", ")", "\n", "\n", "# resume", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to latest checkpoint (default: none)'", ")", "\n", "\n", "# Parallel setting", "\n", "parser", ".", "add_argument", "(", "'--world-size'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of nodes for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--rank'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'node rank for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist-url'", ",", "default", "=", "'tcp://127.0.0.1:23456'", ",", "type", "=", "str", ",", "\n", "help", "=", "'url used to set up distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist-backend'", ",", "default", "=", "'nccl'", ",", "type", "=", "str", ",", "\n", "help", "=", "'distributed backend'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'seed for initializing training. '", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'GPU id to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--multiprocessing-distributed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use multi-processing distributed training to launch '", "\n", "'N processes per node, which has N GPUs. This is the '", "\n", "'fastest way to use PyTorch for either single node or '", "\n", "'multi node data parallel training'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.print_options": [[153, 164], ["sorted", "print", "vars().items", "base_options.BaseOptions.parser.get_default", "str", "str", "vars", "str"], "methods", ["None"], ["", "def", "print_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>35}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.modify_options": [[165, 167], ["None"], "methods", ["None"], ["", "def", "modify_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.override_options": [[168, 178], ["base_options.BaseOptions.override_dict.keys"], "methods", ["None"], ["", "def", "override_options", "(", "self", ",", "opt", ")", ":", "\n", "# override parameters for predefined method", "\n", "        ", "if", "opt", ".", "method", "in", "self", ".", "override_dict", ".", "keys", "(", ")", ":", "\n", "            ", "opt", ".", "modal", "=", "self", ".", "override_dict", "[", "opt", ".", "method", "]", "[", "0", "]", "\n", "opt", ".", "jigsaw", "=", "self", ".", "override_dict", "[", "opt", ".", "method", "]", "[", "1", "]", "\n", "opt", ".", "mem", "=", "self", ".", "override_dict", "[", "opt", ".", "method", "]", "[", "2", "]", "\n", "opt", ".", "aug", "=", "self", ".", "override_dict", "[", "opt", ".", "method", "]", "[", "3", "]", "\n", "opt", ".", "head", "=", "self", ".", "override_dict", "[", "opt", ".", "method", "]", "[", "4", "]", "\n", "opt", ".", "nce_t", "=", "self", ".", "override_dict", "[", "opt", ".", "method", "]", "[", "5", "]", "\n", "", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.parse": [[179, 195], ["base_options.BaseOptions.parse_args", "base_options.BaseOptions.modify_options", "base_options.BaseOptions.print_options", "argparse.ArgumentParser", "base_options.BaseOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.hongfz16_hcmoco.tools.test.parse_args", "home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.modify_options", "home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.print_options", "home.repos.pwc.inspect_result.hongfz16_hcmoco.options.base_options.BaseOptions.initialize"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'arguments options'", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "self", ".", "parser", "=", "parser", "\n", "self", ".", "initialized", "=", "True", "\n", "", "else", ":", "\n", "            ", "parser", "=", "self", ".", "parser", "\n", "\n", "", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "opt", "=", "self", ".", "modify_options", "(", "opt", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "self", ".", "print_options", "(", "opt", ")", "\n", "\n", "return", "opt", "\n", "", "", ""]]}