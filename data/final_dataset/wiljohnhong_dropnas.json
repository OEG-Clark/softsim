{"home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.genotypes.to_dag": [[27, 46], ["torch.ModuleList", "torch.ModuleList", "nn.ModuleList.append", "nn.ModuleList.append", "isinstance", "torch.Sequential", "models.ops.DropPath_"], "function", ["None"], ["def", "to_dag", "(", "C_in", ",", "gene", ",", "reduction", ")", ":", "\n", "    ", "\"\"\" generate discrete ops from gene \"\"\"", "\n", "dag", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "edges", "in", "gene", ":", "\n", "        ", "row", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "op_name", ",", "s_idx", "in", "edges", ":", "\n", "# reduction cell & from input nodes => stride = 2", "\n", "            ", "stride", "=", "2", "if", "reduction", "and", "s_idx", "<", "2", "else", "1", "\n", "op", "=", "ops", ".", "OPS", "[", "op_name", "]", "(", "C_in", ",", "stride", ",", "True", ")", "\n", "if", "not", "isinstance", "(", "op", ",", "ops", ".", "Identity", ")", ":", "# Identity does not use drop path", "\n", "                ", "op", "=", "nn", ".", "Sequential", "(", "\n", "op", ",", "\n", "ops", ".", "DropPath_", "(", ")", "\n", ")", "\n", "", "op", ".", "s_idx", "=", "s_idx", "\n", "row", ".", "append", "(", "op", ")", "\n", "", "dag", ".", "append", "(", "row", ")", "\n", "\n", "", "return", "dag", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.genotypes.from_str": [[48, 66], ["eval"], "function", ["None"], ["", "def", "from_str", "(", "s", ")", ":", "\n", "    ", "\"\"\" generate genotype from string\n    e.g. \"Genotype(\n            normal=[[('sep_conv_3x3', 0), ('sep_conv_3x3', 1)],\n                    [('sep_conv_3x3', 1), ('dil_conv_3x3', 2)],\n                    [('sep_conv_3x3', 1), ('sep_conv_3x3', 2)],\n                    [('sep_conv_3x3', 1), ('dil_conv_3x3', 4)]],\n            normal_concat=range(2, 6),\n            reduce=[[('max_pool_3x3', 0), ('max_pool_3x3', 1)],\n                    [('max_pool_3x3', 0), ('skip_connect', 2)],\n                    [('max_pool_3x3', 0), ('skip_connect', 2)],\n                    [('max_pool_3x3', 0), ('skip_connect', 2)]],\n            reduce_concat=range(2, 6))\"\n    \"\"\"", "\n", "\n", "genotype", "=", "eval", "(", "s", ")", "\n", "\n", "return", "genotype", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.genotypes.parse": [[68, 104], ["torch.topk", "torch.topk", "torch.topk", "torch.topk", "gene.append", "edge_max.view", "node_gene.append", "edge_idx.item"], "function", ["None"], ["", "def", "parse", "(", "alpha", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    parse continuous alpha to discrete gene.\n    alpha is ParameterList:\n    ParameterList [\n        Parameter(n_edges1, n_ops),\n        Parameter(n_edges2, n_ops),\n        ...\n    ]\n    gene is list:\n    [\n        [('node1_ops_1', node_idx), ..., ('node1_ops_k', node_idx)],\n        [('node2_ops_1', node_idx), ..., ('node2_ops_k', node_idx)],\n        ...\n    ]\n    each node has two edges (k=2) in CNN.\n    \"\"\"", "\n", "\n", "gene", "=", "[", "]", "\n", "assert", "PRIMITIVES", "[", "-", "1", "]", "==", "'none'", "# assume last PRIMITIVE is 'none'", "\n", "\n", "# 1) Convert the mixed op to discrete edge (single op) by choosing top-1 weight edge", "\n", "# 2) Choose top-k edges per node by edge score (top-1 weight in edge)", "\n", "for", "edges", "in", "alpha", ":", "\n", "# edges: Tensor(n_edges, n_ops)", "\n", "        ", "edge_max", ",", "primitive_indices", "=", "torch", ".", "topk", "(", "edges", "[", ":", ",", ":", "-", "1", "]", ",", "1", ")", "# ignore 'none'", "\n", "topk_edge_values", ",", "topk_edge_indices", "=", "torch", ".", "topk", "(", "edge_max", ".", "view", "(", "-", "1", ")", ",", "k", ")", "\n", "node_gene", "=", "[", "]", "\n", "for", "edge_idx", "in", "topk_edge_indices", ":", "\n", "            ", "prim_idx", "=", "primitive_indices", "[", "edge_idx", "]", "\n", "prim", "=", "PRIMITIVES", "[", "prim_idx", "]", "\n", "node_gene", ".", "append", "(", "(", "prim", ",", "edge_idx", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "gene", ".", "append", "(", "node_gene", ")", "\n", "\n", "", "return", "gene", "\n", "", ""]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.augment.main": [[24, 92], ["logger.info", "torch.cuda.set_device", "torch.cuda.set_device", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "utils.get_data", "torch.CrossEntropyLoss().to", "models.augment_cnn.AugmentCNN", "torch.DataParallel().to", "utils.param_size", "logger.info", "torch.optim.SGD", "torch.optim.SGD", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "range", "logger.info", "nn.DataParallel().to.parameters", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "nn.DataParallel().to.module.drop_path_prob", "augment.train", "augment.validate", "utils.save_checkpoint", "print", "torch.CrossEntropyLoss", "torch.DataParallel", "len"], "function", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.get_data", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.param_size", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.augment_cnn.AugmentCNN.drop_path_prob", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.search.train", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.augment.validate", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.save_checkpoint"], ["def", "main", "(", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"Logger is set - training start\"", ")", "\n", "\n", "# set default gpu device id", "\n", "torch", ".", "cuda", ".", "set_device", "(", "config", ".", "gpus", "[", "0", "]", ")", "\n", "\n", "# set seed", "\n", "np", ".", "random", ".", "seed", "(", "config", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "config", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "config", ".", "seed", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# get data with meta info", "\n", "input_size", ",", "input_channels", ",", "n_classes", ",", "train_data", ",", "valid_data", "=", "utils", ".", "get_data", "(", "\n", "config", ".", "dataset", ",", "config", ".", "data_path", ",", "config", ".", "cutout_length", ",", "validation", "=", "True", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "use_aux", "=", "config", ".", "aux_weight", ">", "0.", "\n", "model", "=", "AugmentCNN", "(", "input_size", ",", "input_channels", ",", "config", ".", "init_channels", ",", "n_classes", ",", "config", ".", "layers", ",", "\n", "use_aux", ",", "config", ".", "genotype", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "config", ".", "gpus", ")", ".", "to", "(", "device", ")", "\n", "\n", "# model size", "\n", "mb_params", "=", "utils", ".", "param_size", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"Model size = {:.3f} MB\"", ".", "format", "(", "mb_params", ")", ")", "\n", "\n", "# weights optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "config", ".", "lr", ",", "momentum", "=", "config", ".", "momentum", ",", "\n", "weight_decay", "=", "config", ".", "weight_decay", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "config", ".", "workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valid_data", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "config", ".", "workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "config", ".", "epochs", ")", "\n", "\n", "best_top1", "=", "0.", "\n", "# training loop", "\n", "for", "epoch", "in", "range", "(", "config", ".", "epochs", ")", ":", "\n", "        ", "lr_scheduler", ".", "step", "(", ")", "\n", "drop_prob", "=", "config", ".", "drop_path_prob", "*", "epoch", "/", "config", ".", "epochs", "\n", "model", ".", "module", ".", "drop_path_prob", "(", "drop_prob", ")", "\n", "\n", "# training", "\n", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "criterion", ",", "epoch", ")", "\n", "\n", "# validation", "\n", "cur_step", "=", "(", "epoch", "+", "1", ")", "*", "len", "(", "train_loader", ")", "\n", "top1", "=", "validate", "(", "valid_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "cur_step", ")", "\n", "\n", "# save", "\n", "if", "best_top1", "<", "top1", ":", "\n", "            ", "best_top1", "=", "top1", "\n", "is_best", "=", "True", "\n", "", "else", ":", "\n", "            ", "is_best", "=", "False", "\n", "", "utils", ".", "save_checkpoint", "(", "model", ",", "config", ".", "path", ",", "is_best", ")", "\n", "\n", "print", "(", "\"\"", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Final best Prec@1 = {:.4%}\"", ".", "format", "(", "best_top1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.augment.train": [[94, 138], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "logger.info", "writer.add_scalar", "model.train", "enumerate", "logger.info", "len", "X.size", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "X.to", "y.to", "model.parameters", "criterion.item", "prec1.item", "prec5.item", "logger.info", "criterion.item", "prec1.item", "prec5.item", "criterion", "len", "len"], "function", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.search.train", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.accuracy", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.AverageMeter.update"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "criterion", ",", "epoch", ")", ":", "\n", "    ", "top1", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "losses", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "\n", "cur_step", "=", "epoch", "*", "len", "(", "train_loader", ")", "\n", "cur_lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "logger", ".", "info", "(", "\"Epoch {} LR {}\"", ".", "format", "(", "epoch", ",", "cur_lr", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'train/lr'", ",", "cur_lr", ",", "cur_step", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "step", ",", "(", "X", ",", "y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "X", ",", "y", "=", "X", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ",", "y", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "N", "=", "X", ".", "size", "(", "0", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "aux_logits", "=", "model", "(", "X", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "y", ")", "\n", "if", "config", ".", "aux_weight", ">", "0.", ":", "\n", "            ", "loss", "+=", "config", ".", "aux_weight", "*", "criterion", "(", "aux_logits", ",", "y", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "# gradient clipping", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "config", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "y", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "N", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "N", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "N", ")", "\n", "\n", "if", "step", "%", "config", ".", "print_freq", "==", "0", "or", "step", "==", "len", "(", "train_loader", ")", "-", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"Train: [{:3d}/{}] Step {:03d}/{:03d} Loss {losses.avg:.3f} \"", "\n", "\"Prec@(1,5) ({top1.avg:.1%}, {top5.avg:.1%})\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "config", ".", "epochs", ",", "step", ",", "len", "(", "train_loader", ")", "-", "1", ",", "losses", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "writer", ".", "add_scalar", "(", "'train/loss'", ",", "loss", ".", "item", "(", ")", ",", "cur_step", ")", "\n", "writer", ".", "add_scalar", "(", "'train/top1'", ",", "prec1", ".", "item", "(", ")", ",", "cur_step", ")", "\n", "writer", ".", "add_scalar", "(", "'train/top5'", ",", "prec5", ".", "item", "(", ")", ",", "cur_step", ")", "\n", "cur_step", "+=", "1", "\n", "\n", "", "logger", ".", "info", "(", "\"Train: [{:3d}/{}] Final Prec@1 {:.4%}\"", ".", "format", "(", "epoch", "+", "1", ",", "config", ".", "epochs", ",", "top1", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.augment.validate": [[140, 174], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.eval", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "logger.info", "torch.no_grad", "torch.no_grad", "enumerate", "X.size", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "X.to", "y.to", "criterion.item", "prec1.item", "prec5.item", "logger.info", "len", "len"], "function", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.accuracy", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.AverageMeter.update"], ["", "def", "validate", "(", "valid_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "cur_step", ")", ":", "\n", "    ", "top1", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "losses", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "(", "X", ",", "y", ")", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "            ", "X", ",", "y", "=", "X", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ",", "y", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "N", "=", "X", ".", "size", "(", "0", ")", "\n", "\n", "logits", ",", "_", "=", "model", "(", "X", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "y", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "y", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "N", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "N", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "N", ")", "\n", "\n", "if", "step", "%", "config", ".", "print_freq", "==", "0", "or", "step", "==", "len", "(", "valid_loader", ")", "-", "1", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "\"Valid: [{:3d}/{}] Step {:03d}/{:03d} Loss {losses.avg:.3f} \"", "\n", "\"Prec@(1,5) ({top1.avg:.1%}, {top5.avg:.1%})\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "config", ".", "epochs", ",", "step", ",", "len", "(", "valid_loader", ")", "-", "1", ",", "losses", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "", "writer", ".", "add_scalar", "(", "'val/loss'", ",", "losses", ".", "avg", ",", "cur_step", ")", "\n", "writer", ".", "add_scalar", "(", "'val/top1'", ",", "top1", ".", "avg", ",", "cur_step", ")", "\n", "writer", ".", "add_scalar", "(", "'val/top5'", ",", "top5", ".", "avg", ",", "cur_step", ")", "\n", "\n", "logger", ".", "info", "(", "\"Valid: [{:3d}/{}] Final Prec@1 {:.4%}\"", ".", "format", "(", "epoch", "+", "1", ",", "config", ".", "epochs", ",", "top1", ".", "avg", ")", ")", "\n", "\n", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.config.BaseConfig.print_params": [[26, 32], ["prtf", "prtf", "sorted", "prtf", "vars().items", "prtf", "vars", "attr.upper"], "methods", ["None"], ["    ", "def", "print_params", "(", "self", ",", "prtf", "=", "print", ")", ":", "\n", "        ", "prtf", "(", "\"\"", ")", "\n", "prtf", "(", "\"Parameters:\"", ")", "\n", "for", "attr", ",", "value", "in", "sorted", "(", "vars", "(", "self", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "prtf", "(", "\"{}={}\"", ".", "format", "(", "attr", ".", "upper", "(", ")", ",", "value", ")", ")", "\n", "", "prtf", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.config.BaseConfig.as_markdown": [[33, 40], ["sorted", "vars().items", "vars"], "methods", ["None"], ["", "def", "as_markdown", "(", "self", ")", ":", "\n", "        ", "\"\"\" Return configs as markdown format \"\"\"", "\n", "text", "=", "\"|name|value|  \\n|-|-|  \\n\"", "\n", "for", "attr", ",", "value", "in", "sorted", "(", "vars", "(", "self", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "text", "+=", "\"|{}|{}|  \\n\"", ".", "format", "(", "attr", ",", "value", ")", "\n", "\n", "", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.config.SearchConfig.build_parser": [[43, 67], ["config.get_parser", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.config.get_parser"], ["    ", "def", "build_parser", "(", "self", ")", ":", "\n", "        ", "parser", "=", "get_parser", "(", "\"Search config\"", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "required", "=", "True", ",", "help", "=", "'CIFAR10 / MNIST / FashionMNIST / CIFAR100'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "96", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_lr'", ",", "type", "=", "float", ",", "default", "=", "0.0375", ",", "help", "=", "'lr for weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_lr_min'", ",", "type", "=", "float", ",", "default", "=", "0.0015", ",", "help", "=", "'minimum lr for weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum for weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "3e-4", ",", "help", "=", "'weight decay for weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_grad_clip'", ",", "type", "=", "float", ",", "default", "=", "3.", ",", "help", "=", "'gradient clipping for weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "default", "=", "'0'", ",", "help", "=", "'gpu device ids separated by comma.'", "\n", "'`all` indicates use all gpus.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "76", ",", "help", "=", "'# of training epochs, including warmup epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_epochs'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'# of warming up epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_channels'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--layers'", ",", "type", "=", "int", ",", "default", "=", "14", ",", "help", "=", "'# of layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "666", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'# of workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--drop_rate'", ",", "type", "=", "float", ",", "default", "=", "3e-5", ",", "help", "=", "'drop path rate when searching finishes'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha_lr'", ",", "type", "=", "float", ",", "default", "=", "3e-4", ",", "help", "=", "'lr for alpha'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'weight decay for alpha'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.config.SearchConfig.__init__": [[68, 77], ["config.SearchConfig.build_parser", "config.SearchConfig.parse_args", "argparse.Namespace.__init__", "os.path.join", "os.path.join", "config.parse_gpus", "vars"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.config.AugmentConfig.build_parser", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.config.parse_gpus"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "parser", "=", "self", ".", "build_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "super", "(", ")", ".", "__init__", "(", "**", "vars", "(", "args", ")", ")", "\n", "\n", "self", ".", "data_path", "=", "'data/CIFAR10'", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "'searchs'", ",", "self", ".", "name", ")", "\n", "self", ".", "plot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'plots'", ")", "\n", "self", ".", "gpus", "=", "parse_gpus", "(", "self", ".", "gpus", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.config.AugmentConfig.build_parser": [[80, 103], ["config.get_parser", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.config.get_parser"], ["    ", "def", "build_parser", "(", "self", ")", ":", "\n", "        ", "parser", "=", "get_parser", "(", "\"Augment config\"", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "required", "=", "True", ",", "help", "=", "'CIFAR10 / MNIST / FashionMNIST / CIFAR100'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "192", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "help", "=", "'lr for weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "3e-4", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--grad_clip'", ",", "type", "=", "float", ",", "default", "=", "3.", ",", "help", "=", "'gradient clipping for weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "default", "=", "'0'", ",", "help", "=", "'gpu device ids separated by comma.'", "\n", "'`all` indicates use all gpus.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "600", ",", "help", "=", "'# of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_channels'", ",", "type", "=", "int", ",", "default", "=", "36", ")", "\n", "parser", ".", "add_argument", "(", "'--layers'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'# of layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "666", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'# of workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--aux_weight'", ",", "type", "=", "float", ",", "default", "=", "0.4", ",", "help", "=", "'auxiliary loss weight'", ")", "\n", "parser", ".", "add_argument", "(", "'--cutout_length'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'cutout length'", ")", "\n", "parser", ".", "add_argument", "(", "'--drop_path_prob'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'drop path prob'", ")", "\n", "parser", ".", "add_argument", "(", "'--genotype'", ",", "required", "=", "True", ",", "help", "=", "'Cell genotype'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.config.AugmentConfig.__init__": [[104, 113], ["config.AugmentConfig.build_parser", "config.AugmentConfig.parse_args", "argparse.Namespace.__init__", "os.path.join", "genotypes.from_str", "config.parse_gpus", "vars"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.config.AugmentConfig.build_parser", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.genotypes.from_str", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.config.parse_gpus"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "parser", "=", "self", ".", "build_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "super", "(", ")", ".", "__init__", "(", "**", "vars", "(", "args", ")", ")", "\n", "\n", "self", ".", "data_path", "=", "'data/CIFAR10'", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "'augments'", ",", "self", ".", "name", ")", "\n", "self", ".", "genotype", "=", "gt", ".", "from_str", "(", "self", ".", "genotype", ")", "\n", "self", ".", "gpus", "=", "parse_gpus", "(", "self", ".", "gpus", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.config.get_parser": [[10, 16], ["argparse.ArgumentParser", "functools.partial"], "function", ["None"], ["def", "get_parser", "(", "name", ")", ":", "\n", "    ", "\"\"\" make default formatted parser \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "name", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "# print default value always", "\n", "parser", ".", "add_argument", "=", "partial", "(", "parser", ".", "add_argument", ",", "help", "=", "' '", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.config.parse_gpus": [[18, 23], ["list", "range", "int", "torch.cuda.device_count", "gpus.split"], "function", ["None"], ["", "def", "parse_gpus", "(", "gpus", ")", ":", "\n", "    ", "if", "gpus", "==", "'all'", ":", "\n", "        ", "return", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "[", "int", "(", "s", ")", "for", "s", "in", "gpus", ".", "split", "(", "','", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.preproc.Cutout.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.preproc.Cutout.__call__": [[11, 28], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "# img.size(): [1, h, w], mask.size(): [h, w]", "\n", "img", "*=", "mask", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.preproc.data_transforms": [[30, 74], ["dataset.lower.lower", "torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "preproc.Cutout", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomAffine", "ValueError", "torchvision.RandomAffine", "torchvision.RandomVerticalFlip"], "function", ["None"], ["", "", "def", "data_transforms", "(", "dataset", ",", "cutout_length", ")", ":", "\n", "    ", "dataset", "=", "dataset", ".", "lower", "(", ")", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "transf", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", "\n", "]", "\n", "", "elif", "dataset", "==", "\"cifar100\"", ":", "\n", "        ", "MEAN", "=", "[", "0.50707519", ",", "0.48654887", ",", "0.44091785", "]", "\n", "STD", "=", "[", "0.26733428", ",", "0.25643846", ",", "0.27615049", "]", "\n", "transf", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", "\n", "]", "\n", "", "elif", "dataset", "==", "'mnist'", ":", "\n", "        ", "MEAN", "=", "[", "0.13066051707548254", "]", "\n", "STD", "=", "[", "0.30810780244715075", "]", "\n", "transf", "=", "[", "\n", "transforms", ".", "RandomAffine", "(", "degrees", "=", "15", ",", "translate", "=", "(", "0.1", ",", "0.1", ")", ",", "scale", "=", "(", "0.9", ",", "1.1", ")", ",", "shear", "=", "0.1", ")", "\n", "]", "\n", "", "elif", "dataset", "==", "'fashionmnist'", ":", "\n", "        ", "MEAN", "=", "[", "0.28604063146254594", "]", "\n", "STD", "=", "[", "0.35302426207299326", "]", "\n", "transf", "=", "[", "\n", "transforms", ".", "RandomAffine", "(", "degrees", "=", "15", ",", "translate", "=", "(", "0.1", ",", "0.1", ")", ",", "scale", "=", "(", "0.9", ",", "1.1", ")", ",", "shear", "=", "0.1", ")", ",", "\n", "transforms", ".", "RandomVerticalFlip", "(", ")", "\n", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'not expected dataset = {}'", ".", "format", "(", "dataset", ")", ")", "\n", "\n", "", "normalize", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "# transforms to range [0, 1], by directly / 255.0", "\n", "transforms", ".", "Normalize", "(", "MEAN", ",", "STD", ")", "\n", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "transf", "+", "normalize", ")", "\n", "valid_transform", "=", "transforms", ".", "Compose", "(", "normalize", ")", "\n", "\n", "if", "cutout_length", ">", "0", ":", "\n", "        ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "cutout_length", ")", ")", "\n", "\n", "", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.single_run.single_run": [[15, 30], ["os.system", "os.system", "str", "open", "f.read", "os.path.join"], "function", ["None"], ["def", "single_run", "(", "seed", ",", "gpu", ")", ":", "\n", "    ", "n_layers1", "=", "14", "\n", "n_layers2", "=", "20", "\n", "n_epochs1", "=", "76", "\n", "\n", "name", "=", "base_name", "+", "'_v'", "+", "str", "(", "gpu", ")", "\n", "\n", "os", ".", "system", "(", "'python /cache/code/search.py --name {} --dataset {} --layers {} --epochs {} --seed {} --gpus {} --drop_rate 0.00003'", "\n", ".", "format", "(", "name", ",", "dataset", ",", "n_layers1", ",", "n_epochs1", ",", "seed", ",", "gpu", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'searchs'", ",", "name", ",", "'genotype.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "genotype", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "os", ".", "system", "(", "'python /cache/code/augment.py --name {} --dataset {} --seed {} --gpus {} --genotype \"{}\"'", ".", "\n", "format", "(", "name", ",", "dataset", ",", "seed", ",", "gpu", ",", "genotype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.start.single_run": [[14, 29], ["os.system", "os.system", "str", "open", "f.read", "os.path.join"], "function", ["None"], ["def", "single_run", "(", "seed", ",", "gpu", ")", ":", "\n", "    ", "n_layers1", "=", "14", "\n", "n_layers2", "=", "20", "\n", "n_epochs1", "=", "76", "\n", "\n", "name", "=", "base_name", "+", "'_v'", "+", "str", "(", "gpu", ")", "\n", "\n", "os", ".", "system", "(", "'python /cache/code/search.py --name {} --dataset {} --layers {} --epochs {} --seed {} --gpus {} --drop_rate 0.00003'", "\n", ".", "format", "(", "name", ",", "dataset", ",", "n_layers1", ",", "n_epochs1", ",", "seed", ",", "gpu", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'searchs'", ",", "name", ",", "'genotype.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "genotype", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "os", ".", "system", "(", "'python /cache/code/augment.py --name {} --dataset {} --seed {} --gpus {} --genotype \"{}\"'", ".", "\n", "format", "(", "name", ",", "dataset", ",", "seed", ",", "gpu", ",", "genotype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.search.main": [[26, 85], ["logger.info", "torch.cuda.set_device", "torch.cuda.set_device", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "utils.get_data", "torch.CrossEntropyLoss().to", "models.search_cnn.SearchCNNController", "model.to.to", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adam", "len", "list", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "range", "model.to.weights", "model.to.alphas", "range", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "logger.info", "model.to.print_alphas", "search.train", "model.to.genotype", "logger.info", "utils.save_checkpoint", "print", "torch.CrossEntropyLoss", "torch.optim.lr_scheduler.CosineAnnealingLR.get_lr", "open", "f.write", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.get_data", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.weights", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.alphas", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.print_alphas", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.search.train", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.genotype", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.save_checkpoint"], ["def", "main", "(", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"Logger is set - training start\"", ")", "\n", "\n", "# set default gpu device id", "\n", "torch", ".", "cuda", ".", "set_device", "(", "config", ".", "gpus", "[", "0", "]", ")", "\n", "\n", "# set seed", "\n", "random", ".", "seed", "(", "config", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "config", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "config", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "config", ".", "seed", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# get data with meta info", "\n", "input_size", ",", "input_channels", ",", "n_classes", ",", "train_data", "=", "utils", ".", "get_data", "(", "\n", "config", ".", "dataset", ",", "config", ".", "data_path", ",", "cutout_length", "=", "0", ",", "validation", "=", "False", ")", "\n", "\n", "net_crit", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "model", "=", "SearchCNNController", "(", "input_size", ",", "input_channels", ",", "config", ".", "init_channels", ",", "n_classes", ",", "\n", "config", ".", "layers", ",", "net_crit", ",", "device_ids", "=", "config", ".", "gpus", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "# weights optimizer, weight decay is computed later in `train()`", "\n", "w_optim", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "weights", "(", ")", ",", "config", ".", "w_lr", ",", "momentum", "=", "config", ".", "w_momentum", ",", "weight_decay", "=", "0.", ")", "\n", "# alphas optimizer", "\n", "alpha_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "alphas", "(", ")", ",", "config", ".", "alpha_lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "0.", ")", "\n", "\n", "# dataloader, we use the whole training data to search", "\n", "n_train", "=", "len", "(", "train_data", ")", "\n", "indices", "=", "list", "(", "range", "(", "n_train", ")", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "num_workers", "=", "config", ".", "workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "w_optim", ",", "config", ".", "epochs", ",", "eta_min", "=", "config", ".", "w_lr_min", ")", "\n", "\n", "# training loop", "\n", "for", "epoch", "in", "range", "(", "config", ".", "epochs", ")", ":", "\n", "        ", "lr_scheduler", ".", "step", "(", ")", "\n", "lr", "=", "lr_scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "\n", "drop_rate", "=", "0.", "if", "epoch", "<", "config", ".", "warmup_epochs", "else", "config", ".", "drop_rate", "\n", "logger", ".", "info", "(", "\"Current drop rate: {:.6f}\"", ".", "format", "(", "drop_rate", ")", ")", "\n", "model", ".", "print_alphas", "(", "logger", ")", "\n", "\n", "# training", "\n", "train", "(", "train_loader", ",", "model", ",", "w_optim", ",", "alpha_optim", ",", "lr", ",", "epoch", ",", "drop_rate", ")", "\n", "\n", "# log genotype", "\n", "genotype", "=", "model", ".", "genotype", "(", ")", "\n", "logger", ".", "info", "(", "\"genotype = {}\"", ".", "format", "(", "genotype", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", ".", "path", ",", "'genotype.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "genotype", ")", ")", "\n", "\n", "", "utils", ".", "save_checkpoint", "(", "model", ",", "config", ".", "path", ",", "True", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.search.train": [[87, 147], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "writer.add_scalar", "model.train", "enumerate", "logger.info", "len", "trn_X.size", "alpha_optim.zero_grad", "w_optim.zero_grad", "model", "model.criterion", "model.criterion.backward", "torch.utils.clip_grad_norm_", "w_optim.step", "alpha_optim.zero_grad", "w_optim.zero_grad", "loss_2.backward", "torch.utils.clip_grad_norm_", "w_optim.step", "alpha_optim.step", "model.adjust_alphas", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "trn_X.to", "trn_y.to", "model.weights", "alpha_optim.step", "model.weight_decay_loss", "model.alpha_decay_loss", "model.weights", "loss.item", "prec1.item", "prec5.item", "logger.info", "loss.item", "prec1.item", "prec5.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.search.train", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.adjust_alphas", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.accuracy", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.weights", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.weight_decay_loss", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.alpha_decay_loss", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.weights"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "w_optim", ",", "alpha_optim", ",", "lr", ",", "epoch", ",", "drop_rate", ")", ":", "\n", "    ", "top1", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "losses", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "\n", "cur_step", "=", "epoch", "*", "len", "(", "train_loader", ")", "\n", "writer", ".", "add_scalar", "(", "'train/lr'", ",", "lr", ",", "cur_step", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "step", ",", "(", "trn_X", ",", "trn_y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "trn_X", ",", "trn_y", "=", "trn_X", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ",", "trn_y", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "N", "=", "trn_X", ".", "size", "(", "0", ")", "\n", "\n", "# forward pass loss", "\n", "alpha_optim", ".", "zero_grad", "(", ")", "\n", "w_optim", ".", "zero_grad", "(", ")", "\n", "\n", "logits", "=", "model", "(", "trn_X", ",", "drop_rate", "=", "drop_rate", ")", "\n", "loss_1", "=", "model", ".", "criterion", "(", "logits", ",", "trn_y", ")", "\n", "loss_1", ".", "backward", "(", ")", "\n", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "weights", "(", ")", ",", "config", ".", "w_grad_clip", ")", "# gradient clipping", "\n", "w_optim", ".", "step", "(", ")", "\n", "if", "epoch", ">=", "config", ".", "warmup_epochs", ":", "\n", "            ", "alpha_optim", ".", "step", "(", ")", "\n", "\n", "# weight decay loss", "\n", "", "loss_2", "=", "model", ".", "weight_decay_loss", "(", "config", ".", "w_weight_decay", ")", "+", "model", ".", "alpha_decay_loss", "(", "config", ".", "alpha_weight_decay", ")", "\n", "\n", "alpha_optim", ".", "zero_grad", "(", ")", "\n", "w_optim", ".", "zero_grad", "(", ")", "\n", "loss_2", ".", "backward", "(", ")", "\n", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "weights", "(", ")", ",", "config", ".", "w_grad_clip", ")", "# gradient clipping", "\n", "w_optim", ".", "step", "(", ")", "\n", "alpha_optim", ".", "step", "(", ")", "\n", "\n", "model", ".", "adjust_alphas", "(", ")", "\n", "\n", "loss", "=", "loss_1", "+", "loss_2", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "trn_y", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "N", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "N", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "N", ")", "\n", "\n", "if", "step", "%", "config", ".", "print_freq", "==", "0", "or", "step", "==", "len", "(", "train_loader", ")", "-", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"Train: [{:2d}/{}] Step {:03d}/{:03d} Loss {losses.avg:.3f} \"", "\n", "\"Prec@(1,5) ({top1.avg:.1%}, {top5.avg:.1%})\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "config", ".", "epochs", ",", "step", ",", "len", "(", "train_loader", ")", "-", "1", ",", "losses", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "writer", ".", "add_scalar", "(", "'train/loss'", ",", "loss", ".", "item", "(", ")", ",", "cur_step", ")", "\n", "writer", ".", "add_scalar", "(", "'train/top1'", ",", "prec1", ".", "item", "(", ")", ",", "cur_step", ")", "\n", "writer", ".", "add_scalar", "(", "'train/top5'", ",", "prec5", ".", "item", "(", ")", ",", "cur_step", ")", "\n", "cur_step", "+=", "1", "\n", "\n", "", "logger", ".", "info", "(", "\"Train: [{:2d}/{}] Final Prec@1 {:.4%}\"", ".", "format", "(", "epoch", "+", "1", ",", "config", ".", "epochs", ",", "top1", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.visualize.plot": [[7, 61], ["graphviz.Digraph", "graphviz.Digraph.body.extend", "graphviz.Digraph.node", "graphviz.Digraph.node", "len", "range", "enumerate", "graphviz.Digraph.node", "range", "graphviz.Digraph.render", "graphviz.Digraph.node", "graphviz.Digraph.edge", "graphviz.Digraph.attr", "str", "str", "graphviz.Digraph.edge", "str", "str"], "function", ["None"], ["def", "plot", "(", "genotype", ",", "file_path", ",", "caption", "=", "None", ")", ":", "\n", "    ", "\"\"\" make DAG plot and save to file_path as .png \"\"\"", "\n", "edge_attr", "=", "{", "\n", "'fontsize'", ":", "'70'", ",", "\n", "'fontname'", ":", "'times'", "\n", "}", "\n", "node_attr", "=", "{", "\n", "'style'", ":", "'filled'", ",", "\n", "'shape'", ":", "'rect'", ",", "\n", "'align'", ":", "'center'", ",", "\n", "'fontsize'", ":", "'70'", ",", "\n", "'height'", ":", "'0.5'", ",", "\n", "'width'", ":", "'0.5'", ",", "\n", "'penwidth'", ":", "'2'", ",", "\n", "'fontname'", ":", "'times'", "\n", "}", "\n", "g", "=", "Digraph", "(", "\n", "format", "=", "'png'", ",", "\n", "edge_attr", "=", "edge_attr", ",", "\n", "node_attr", "=", "node_attr", ",", "\n", "engine", "=", "'dot'", ")", "\n", "g", ".", "body", ".", "extend", "(", "[", "'rankdir=LR'", "]", ")", "\n", "\n", "# input nodes", "\n", "g", ".", "node", "(", "\"c_{k-2}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "g", ".", "node", "(", "\"c_{k-1}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "\n", "# intermediate nodes", "\n", "n_nodes", "=", "len", "(", "genotype", ")", "\n", "for", "i", "in", "range", "(", "n_nodes", ")", ":", "\n", "        ", "g", ".", "node", "(", "str", "(", "i", ")", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "\n", "", "for", "i", ",", "edges", "in", "enumerate", "(", "genotype", ")", ":", "\n", "        ", "for", "op", ",", "j", "in", "edges", ":", "\n", "            ", "if", "j", "==", "0", ":", "\n", "                ", "u", "=", "\"c_{k-2}\"", "\n", "", "elif", "j", "==", "1", ":", "\n", "                ", "u", "=", "\"c_{k-1}\"", "\n", "", "else", ":", "\n", "                ", "u", "=", "str", "(", "j", "-", "2", ")", "\n", "\n", "", "v", "=", "str", "(", "i", ")", "\n", "g", ".", "edge", "(", "u", ",", "v", ",", "label", "=", "op", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "# output node", "\n", "", "", "g", ".", "node", "(", "\"c_{k}\"", ",", "fillcolor", "=", "'palegoldenrod'", ")", "\n", "for", "i", "in", "range", "(", "n_nodes", ")", ":", "\n", "        ", "g", ".", "edge", "(", "str", "(", "i", ")", ",", "\"c_{k}\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "# add image caption", "\n", "", "if", "caption", ":", "\n", "        ", "g", ".", "attr", "(", "label", "=", "caption", ",", "overlap", "=", "'false'", ",", "fontsize", "=", "'20'", ",", "fontname", "=", "'times'", ")", "\n", "\n", "", "g", ".", "render", "(", "file_path", ",", "view", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.AverageMeter.__init__": [[70, 72], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.AverageMeter.reset": [[73, 79], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\" Reset all statistics \"\"\"", "\n", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.AverageMeter.update": [[80, 86], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "\"\"\" Update statistics \"\"\"", "\n", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.get_data": [[11, 41], ["dataset.lower.lower", "preproc.data_transforms", "dset_cls", "ret.append", "len", "dset_cls", "ValueError"], "function", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.preproc.data_transforms"], ["def", "get_data", "(", "dataset", ",", "data_path", ",", "cutout_length", ",", "validation", ")", ":", "\n", "    ", "\"\"\" Get torchvision dataset \"\"\"", "\n", "dataset", "=", "dataset", ".", "lower", "(", ")", "\n", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "dset_cls", "=", "dset", ".", "CIFAR10", "\n", "n_classes", "=", "10", "\n", "", "elif", "dataset", "==", "'mnist'", ":", "\n", "        ", "dset_cls", "=", "dset", ".", "MNIST", "\n", "n_classes", "=", "10", "\n", "", "elif", "dataset", "==", "'fashionmnist'", ":", "\n", "        ", "dset_cls", "=", "dset", ".", "FashionMNIST", "\n", "n_classes", "=", "10", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "dataset", ")", "\n", "\n", "", "trn_transform", ",", "val_transform", "=", "preproc", ".", "data_transforms", "(", "dataset", ",", "cutout_length", ")", "\n", "trn_data", "=", "dset_cls", "(", "root", "=", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "trn_transform", ")", "\n", "\n", "# assuming shape is NHW or NHWC", "\n", "shape", "=", "trn_data", ".", "train_data", ".", "shape", "\n", "input_channels", "=", "3", "if", "len", "(", "shape", ")", "==", "4", "else", "1", "\n", "assert", "shape", "[", "1", "]", "==", "shape", "[", "2", "]", ",", "\"not expected shape = {}\"", ".", "format", "(", "shape", ")", "\n", "input_size", "=", "shape", "[", "1", "]", "\n", "\n", "ret", "=", "[", "input_size", ",", "input_channels", ",", "n_classes", ",", "trn_data", "]", "\n", "if", "validation", ":", "# append validation data", "\n", "        ", "ret", ".", "append", "(", "dset_cls", "(", "root", "=", "data_path", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "val_transform", ")", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.get_logger": [[43, 59], ["logging.getLogger", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger.setLevel"], "function", ["None"], ["", "def", "get_logger", "(", "file_path", ")", ":", "\n", "    ", "\"\"\" Make python logger \"\"\"", "\n", "# [!] Since tensorboardX use default logger (e.g. logging.info()), we should use custom logger", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'darts'", ")", "\n", "log_format", "=", "'%(asctime)s | %(message)s'", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "log_format", ",", "datefmt", "=", "'%m/%d %I:%M:%S %p'", ")", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.param_size": [[61, 66], ["sum", "numpy.prod", "v.size", "model.named_parameters", "k.startswith"], "function", ["None"], ["", "def", "param_size", "(", "model", ")", ":", "\n", "    ", "\"\"\" Compute parameter size in MB \"\"\"", "\n", "n_params", "=", "sum", "(", "\n", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", "if", "not", "k", ".", "startswith", "(", "'aux_head'", ")", ")", "\n", "return", "n_params", "/", "1024.", "/", "1024.", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.accuracy": [[88, 107], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.ndimension", "target.view().expand_as", "correct[].view().float().sum", "res.append", "target.max", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\" Computes the precision@k for the specified values of k \"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "# one-hot case", "\n", "if", "target", ".", "ndimension", "(", ")", ">", "1", ":", "\n", "        ", "target", "=", "target", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "\n", "", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "1.0", "/", "batch_size", ")", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.utils.save_checkpoint": [[109, 115], ["os.path.join", "torch.save", "os.path.join", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "ckpt_dir", ",", "is_best", "=", "False", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "best_filename", "=", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "'best.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "best_filename", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.augment_cells.AugmentCell.__init__": [[13, 33], ["torch.Module.__init__", "len", "models.ops.StdConv", "genotypes.to_dag", "models.ops.FactorizedReduce", "models.ops.StdConv"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.genotypes.to_dag"], ["def", "__init__", "(", "self", ",", "genotype", ",", "C_pp", ",", "C_p", ",", "C", ",", "reduction_p", ",", "reduction", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "n_nodes", "=", "len", "(", "genotype", ".", "normal", ")", "\n", "\n", "if", "reduction_p", ":", "\n", "            ", "self", ".", "preproc0", "=", "ops", ".", "FactorizedReduce", "(", "C_pp", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preproc0", "=", "ops", ".", "StdConv", "(", "C_pp", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preproc1", "=", "ops", ".", "StdConv", "(", "C_p", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "# generate dag", "\n", "if", "reduction", ":", "\n", "            ", "gene", "=", "genotype", ".", "reduce", "\n", "self", ".", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "            ", "gene", "=", "genotype", ".", "normal", "\n", "self", ".", "concat", "=", "genotype", ".", "normal_concat", "\n", "\n", "", "self", ".", "dag", "=", "gt", ".", "to_dag", "(", "C", ",", "gene", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.augment_cells.AugmentCell.forward": [[34, 46], ["augment_cells.AugmentCell.preproc0", "augment_cells.AugmentCell.preproc1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "states.append", "op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preproc0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preproc1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "edges", "in", "self", ".", "dag", ":", "\n", "            ", "s_cur", "=", "sum", "(", "op", "(", "states", "[", "op", ".", "s_idx", "]", ")", "for", "op", "in", "edges", ")", "\n", "states", ".", "append", "(", "s_cur", ")", "\n", "\n", "", "s_out", "=", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "concat", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "s_out", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.DropPath_.__init__": [[31, 38], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.", ")", ":", "\n", "        ", "\"\"\" [!] DropPath is inplace module\n        Args:\n            p: probability of an path to be zeroed.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.DropPath_.extra_repr": [[39, 41], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'p={}, inplace'", ".", "format", "(", "self", ".", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.DropPath_.forward": [[42, 46], ["ops.drop_path_"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.drop_path_"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "drop_path_", "(", "x", ",", "self", ".", "p", ",", "self", ".", "training", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.PoolBN.__init__": [[52, 66], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "pool_type.lower", "torch.MaxPool2d", "torch.MaxPool2d", "pool_type.lower", "torch.AvgPool2d", "torch.AvgPool2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "pool_type", ",", "C", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pool_type: 'max' or 'avg'\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "pool_type", ".", "lower", "(", ")", "==", "'max'", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", ",", "stride", ",", "padding", ")", "\n", "", "elif", "pool_type", ".", "lower", "(", ")", "==", "'avg'", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", ",", "stride", ",", "padding", ",", "count_include_pad", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.PoolBN.forward": [[67, 71], ["ops.PoolBN.pool", "ops.PoolBN.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pool", "(", "x", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.StdConv.__init__": [[77, 83], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.StdConv.forward": [[85, 87], ["ops.StdConv.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.FacConv.__init__": [[93, 100], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_length", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "(", "kernel_length", ",", "1", ")", ",", "stride", ",", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "(", "1", ",", "kernel_length", ")", ",", "stride", ",", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.FacConv.forward": [[102, 104], ["ops.FacConv.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.DilConv.__init__": [[113, 121], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.DilConv.forward": [[123, 125], ["ops.DilConv.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.SepConv.__init__": [[131, 136], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "ops.DilConv", "ops.DilConv"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "DilConv", "(", "C_in", ",", "C_in", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", "=", "1", ",", "affine", "=", "affine", ")", ",", "\n", "DilConv", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "1", ",", "padding", ",", "dilation", "=", "1", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.SepConv.forward": [[138, 140], ["ops.SepConv.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.Identity.__init__": [[143, 145], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.Identity.forward": [[146, 148], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.Zero.__init__": [[151, 154], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.Zero.forward": [[155, 161], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", "*", "0.", "\n", "\n", "# re-sizing by stride", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", "*", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.FactorizedReduce.__init__": [[167, 173], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.FactorizedReduce.forward": [[174, 179], ["ops.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ops.FactorizedReduce.bn", "ops.FactorizedReduce.conv1", "ops.FactorizedReduce.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv1", "(", "x", ")", ",", "self", ".", "conv2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.MixedOp.__init__": [[183, 189], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "ops.MixedOp._ops.append"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "C", ",", "stride", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "primitive", "in", "gt", ".", "PRIMITIVES", ":", "\n", "            ", "op", "=", "OPS", "[", "primitive", "]", "(", "C", ",", "stride", ",", "affine", "=", "False", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.MixedOp.forward": [[190, 198], ["sum", "op", "zip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ",", "masks", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: input\n            weights: weight for each operation\n            masks: list of boolean\n        \"\"\"", "\n", "return", "sum", "(", "w", "*", "op", "(", "x", ")", "for", "w", ",", "op", ",", "mask", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ",", "masks", ")", "if", "mask", ")", "\n", "# return sum(w * op(x) for w, op in zip(weights, self._ops))", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.ops.drop_path_": [[21, 28], ["torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor().bernoulli_", "x.div_().mul_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "x.div_", "x.size"], "function", ["None"], ["def", "drop_path_", "(", "x", ",", "drop_prob", ",", "training", ")", ":", "\n", "    ", "if", "training", "and", "drop_prob", ">", "0.", ":", "\n", "        ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "# per data point mask; assuming x in cuda.", "\n", "mask", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.augment_cnn.AuxiliaryHead.__init__": [[11, 26], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "C", ",", "n_classes", ")", ":", "\n", "        ", "\"\"\" assuming input size 7x7 or 8x8 \"\"\"", "\n", "assert", "input_size", "in", "[", "7", ",", "8", "]", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "input_size", "-", "5", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# 2x2 out", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "# 1x1 out", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "768", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.augment_cnn.AuxiliaryHead.forward": [[27, 32], ["augment_cnn.AuxiliaryHead.net", "out.view.view.view", "augment_cnn.AuxiliaryHead.linear", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "net", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# flatten", "\n", "logits", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.augment_cnn.AugmentCNN.__init__": [[36, 83], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.augment_cells.AugmentCell", "augment_cnn.AugmentCNN.cells.append", "len", "augment_cnn.AuxiliaryHead"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "C_in", ",", "C", ",", "n_classes", ",", "n_layers", ",", "auxiliary", ",", "genotype", ",", "\n", "stem_multiplier", "=", "3", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_size: size of height and width (assuming height = width)\n            C_in: # of input channels\n            C: # of starting model channels\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "genotype", "=", "genotype", "\n", "# aux head position", "\n", "self", ".", "aux_pos", "=", "2", "*", "n_layers", "//", "3", "if", "auxiliary", "else", "-", "1", "\n", "\n", "C_cur", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_cur", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_cur", ")", "\n", ")", "\n", "\n", "C_pp", ",", "C_p", ",", "C_cur", "=", "C_cur", ",", "C_cur", ",", "C", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_p", "=", "False", "\n", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "n_layers", "//", "3", ",", "2", "*", "n_layers", "//", "3", "]", ":", "\n", "                ", "C_cur", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "\n", "", "cell", "=", "AugmentCell", "(", "genotype", ",", "C_pp", ",", "C_p", ",", "C_cur", ",", "reduction_p", ",", "reduction", ")", "\n", "reduction_p", "=", "reduction", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_cur_out", "=", "C_cur", "*", "len", "(", "cell", ".", "concat", ")", "\n", "C_pp", ",", "C_p", "=", "C_p", ",", "C_cur_out", "\n", "\n", "if", "i", "==", "self", ".", "aux_pos", ":", "\n", "# [!] this auxiliary head is ignored in computing parameter size", "\n", "#     by the name 'aux_head'", "\n", "                ", "self", ".", "aux_head", "=", "AuxiliaryHead", "(", "input_size", "//", "4", ",", "C_p", ",", "n_classes", ")", "\n", "\n", "", "", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "C_p", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.augment_cnn.AugmentCNN.forward": [[84, 97], ["augment_cnn.AugmentCNN.stem", "enumerate", "augment_cnn.AugmentCNN.gap", "out.view.view.view", "augment_cnn.AugmentCNN.linear", "out.view.view.size", "cell", "augment_cnn.AugmentCNN.aux_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "s0", "=", "s1", "=", "self", ".", "stem", "(", "x", ")", "\n", "\n", "aux_logits", "=", "None", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ")", "\n", "if", "i", "==", "self", ".", "aux_pos", "and", "self", ".", "training", ":", "\n", "                ", "aux_logits", "=", "self", ".", "aux_head", "(", "s1", ")", "\n", "\n", "", "", "out", "=", "self", ".", "gap", "(", "s1", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# flatten", "\n", "logits", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "logits", ",", "aux_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.augment_cnn.AugmentCNN.drop_path_prob": [[98, 103], ["augment_cnn.AugmentCNN.modules", "isinstance"], "methods", ["None"], ["", "def", "drop_path_prob", "(", "self", ",", "p", ")", ":", "\n", "        ", "\"\"\" Set drop path probability \"\"\"", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "ops", ".", "DropPath_", ")", ":", "\n", "                ", "module", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cells.SearchCell.__init__": [[12, 43], ["torch.Module.__init__", "models.ops.StdConv", "torch.ModuleList", "torch.ModuleList", "range", "models.ops.FactorizedReduce", "models.ops.StdConv", "search_cells.SearchCell.dag.append", "range", "torch.ModuleList", "torch.ModuleList", "models.ops.MixedOp", "search_cells.SearchCell.dag[].append"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "n_nodes", ",", "C_pp", ",", "C_p", ",", "C", ",", "reduction_p", ",", "reduction", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            n_nodes: # of intermediate n_nodes\n            C_pp: C_out[k-2]\n            C_p : C_out[k-1]\n            C   : C_in[k] (current)\n            reduction_p: flag for whether the previous cell is reduction cell or not\n            reduction: flag for whether the current cell is reduction cell or not\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "n_nodes", "=", "n_nodes", "\n", "\n", "# If previous cell is reduction cell, current input size does not match with", "\n", "# output size of cell[k-2]. So the output[k-2] should be reduced by preprocessing.", "\n", "if", "reduction_p", ":", "\n", "            ", "self", ".", "preproc0", "=", "ops", ".", "FactorizedReduce", "(", "C_pp", ",", "C", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preproc0", "=", "ops", ".", "StdConv", "(", "C_pp", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "", "self", ".", "preproc1", "=", "ops", ".", "StdConv", "(", "C_p", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "\n", "# generate dag", "\n", "self", ".", "dag", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_nodes", ")", ":", "\n", "            ", "self", ".", "dag", ".", "append", "(", "nn", ".", "ModuleList", "(", ")", ")", "\n", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "# include 2 input nodes", "\n", "# reduction should be used only for input node", "\n", "                ", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "ops", ".", "MixedOp", "(", "C", ",", "stride", ")", "\n", "self", ".", "dag", "[", "i", "]", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cells.SearchCell.forward": [[44, 55], ["search_cells.SearchCell.preproc0", "search_cells.SearchCell.preproc1", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "states.append", "enumerate", "zip"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "w_dag", ",", "masks", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preproc0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preproc1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "edges", ",", "w_list", ",", "m_list", "in", "zip", "(", "self", ".", "dag", ",", "w_dag", ",", "masks", ")", ":", "\n", "            ", "s_cur", "=", "sum", "(", "edges", "[", "i", "]", "(", "s", ",", "w", ",", "m", ")", "for", "i", ",", "(", "s", ",", "w", ",", "m", ")", "in", "enumerate", "(", "zip", "(", "states", ",", "w_list", ",", "m_list", ")", ")", ")", "\n", "states", ".", "append", "(", "s_cur", ")", "\n", "\n", "", "s_out", "=", "torch", ".", "cat", "(", "states", "[", "2", ":", "]", ",", "dim", "=", "1", ")", "\n", "return", "s_out", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNN.__init__": [[26, 69], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.search_cells.SearchCell", "search_cnn.SearchCNN.cells.append"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "C_in", ",", "C", ",", "n_classes", ",", "n_layers", ",", "n_nodes", "=", "4", ",", "stem_multiplier", "=", "3", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            C_in: # of input channels\n            C: # of starting model channels\n            n_classes: # of classes\n            n_layers: # of layers\n            n_nodes: # of intermediate nodes in Cell\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "\n", "C_cur", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_cur", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_cur", ")", "\n", ")", "\n", "\n", "# for the first cell, stem is used for both s0 and s1", "\n", "# [!] C_pp and C_p is output channel size, but C_cur is input channel size.", "\n", "C_pp", ",", "C_p", ",", "C_cur", "=", "C_cur", ",", "C_cur", ",", "C", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_p", "=", "False", "\n", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "# Reduce featuremap size and double channels in 1/3 and 2/3 layer.", "\n", "            ", "if", "i", "in", "[", "n_layers", "//", "3", ",", "2", "*", "n_layers", "//", "3", "]", ":", "\n", "                ", "C_cur", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "\n", "", "cell", "=", "SearchCell", "(", "n_nodes", ",", "C_pp", ",", "C_p", ",", "C_cur", ",", "reduction_p", ",", "reduction", ")", "\n", "reduction_p", "=", "reduction", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_cur_out", "=", "C_cur", "*", "n_nodes", "\n", "C_pp", ",", "C_p", "=", "C_p", ",", "C_cur_out", "\n", "\n", "", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "C_p", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNN.forward": [[70, 87], ["search_cnn.SearchCNN.stem", "enumerate", "search_cnn.SearchCNN.gap", "out.view.view.view", "search_cnn.SearchCNN.linear", "out.view.view.size", "cell"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "weights_normal", ",", "weights_reduce", ",", "masks_normal", ",", "masks_reduce", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            weights_xxx: probability contribution of each operation\n            masks_xxx: decide whether to drop an operation\n        \"\"\"", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "x", ")", "\n", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "weights", "=", "weights_reduce", "if", "cell", ".", "reduction", "else", "weights_normal", "\n", "masks", "=", "masks_reduce", "if", "cell", ".", "reduction", "else", "masks_normal", "#######################################", "\n", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "weights", ",", "masks", ")", "####################################################", "\n", "\n", "", "out", "=", "self", ".", "gap", "(", "s1", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# flatten", "\n", "logits", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__": [[91, 117], ["torch.Module.__init__", "len", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "range", "search_cnn.SearchCNNController.named_parameters", "search_cnn.SearchCNN", "list", "search_cnn.SearchCNNController.alpha_normal.append", "search_cnn.SearchCNNController.alpha_reduce.append", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "search_cnn.SearchCNNController._alphas.append", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "C_in", ",", "C", ",", "n_classes", ",", "n_layers", ",", "\n", "criterion", ",", "n_nodes", "=", "4", ",", "stem_multiplier", "=", "3", ",", "device_ids", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_nodes", "=", "n_nodes", "\n", "self", ".", "criterion", "=", "criterion", "\n", "if", "device_ids", "is", "None", ":", "\n", "            ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "self", ".", "device_ids", "=", "device_ids", "\n", "\n", "# initialize architect parameters: alphas", "\n", "n_ops", "=", "len", "(", "gt", ".", "PRIMITIVES", ")", "\n", "\n", "self", ".", "alpha_normal", "=", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "alpha_reduce", "=", "nn", ".", "ParameterList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_nodes", ")", ":", "\n", "            ", "self", ".", "alpha_normal", ".", "append", "(", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "i", "+", "2", ",", "n_ops", ")", ")", ")", "\n", "self", ".", "alpha_reduce", ".", "append", "(", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "i", "+", "2", ",", "n_ops", ")", ")", ")", "\n", "\n", "# setup alphas list", "\n", "", "self", ".", "_alphas", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'alpha'", "in", "n", ":", "\n", "                ", "self", ".", "_alphas", ".", "append", "(", "(", "n", ",", "p", ")", ")", "\n", "\n", "", "", "self", ".", "net", "=", "SearchCNN", "(", "input_size", ",", "C_in", ",", "C", ",", "n_classes", ",", "n_layers", ",", "n_nodes", ",", "stem_multiplier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.forward": [[118, 142], ["search_cnn.SearchCNNController.generate_masks", "search_cnn.SearchCNNController.generate_masks", "search_cnn.SearchCNNController.generate_weights", "search_cnn.SearchCNNController.generate_weights", "torch.parallel.scatter", "torch.parallel.scatter", "torch.parallel.scatter", "search_cnn.broadcast_list", "search_cnn.broadcast_list", "search_cnn.broadcast_list", "search_cnn.broadcast_list", "torch.parallel.replicate", "torch.parallel.replicate", "torch.parallel.replicate", "torch.parallel.parallel_apply", "torch.parallel.parallel_apply", "torch.parallel.parallel_apply", "torch.parallel.gather", "torch.parallel.gather", "torch.parallel.gather", "len", "search_cnn.SearchCNNController.net", "list", "zip"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.generate_masks", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.generate_masks", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.generate_weights", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.generate_weights", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.broadcast_list", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.broadcast_list", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.broadcast_list", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.broadcast_list"], ["", "def", "forward", "(", "self", ",", "x", ",", "drop_rate", ")", ":", "\n", "        ", "self", ".", "masks_normal", "=", "self", ".", "generate_masks", "(", "self", ".", "alpha_normal", ",", "drop_rate", ")", "\n", "self", ".", "masks_reduce", "=", "self", ".", "generate_masks", "(", "self", ".", "alpha_reduce", ",", "drop_rate", ")", "\n", "\n", "weights_normal", ",", "self", ".", "ratios_normal", "=", "self", ".", "generate_weights", "(", "self", ".", "alpha_normal", ",", "self", ".", "masks_normal", ")", "\n", "weights_reduce", ",", "self", ".", "ratios_reduce", "=", "self", ".", "generate_weights", "(", "self", ".", "alpha_reduce", ",", "self", ".", "masks_reduce", ")", "\n", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "net", "(", "x", ",", "weights_normal", ",", "weights_reduce", ",", "self", ".", "masks_normal", ",", "self", ".", "masks_reduce", ")", "\n", "\n", "# scatter x", "\n", "", "xs", "=", "nn", ".", "parallel", ".", "scatter", "(", "x", ",", "self", ".", "device_ids", ")", "\n", "# broadcast weights", "\n", "wnormal_copies", "=", "broadcast_list", "(", "weights_normal", ",", "self", ".", "device_ids", ")", "\n", "wreduce_copies", "=", "broadcast_list", "(", "weights_reduce", ",", "self", ".", "device_ids", ")", "\n", "mnormal_copies", "=", "broadcast_list", "(", "self", ".", "masks_normal", ",", "self", ".", "device_ids", ")", "\n", "mreduce_copies", "=", "broadcast_list", "(", "self", ".", "masks_reduce", ",", "self", ".", "device_ids", ")", "\n", "\n", "# replicate modules", "\n", "replicas", "=", "nn", ".", "parallel", ".", "replicate", "(", "self", ".", "net", ",", "self", ".", "device_ids", ")", "\n", "outputs", "=", "nn", ".", "parallel", ".", "parallel_apply", "(", "replicas", ",", "\n", "list", "(", "zip", "(", "xs", ",", "wnormal_copies", ",", "wreduce_copies", ",", "mnormal_copies", ",", "mreduce_copies", ")", ")", ",", "\n", "devices", "=", "self", ".", "device_ids", ")", "\n", "return", "nn", ".", "parallel", ".", "gather", "(", "outputs", ",", "self", ".", "device_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.print_alphas": [[143, 163], ["logger.info", "logger.info", "logger.info", "logger.info", "zip", "org_formatters.append", "handler.setFormatter", "logger.info", "logger.info", "handler.setFormatter", "logging.Formatter", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "print_alphas", "(", "self", ",", "logger", ")", ":", "\n", "# remove formats", "\n", "        ", "org_formatters", "=", "[", "]", "\n", "for", "handler", "in", "logger", ".", "handlers", ":", "\n", "            ", "org_formatters", ".", "append", "(", "handler", ".", "formatter", ")", "\n", "handler", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "\"%(message)s\"", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"####### ALPHA #######\"", ")", "\n", "logger", ".", "info", "(", "\"# Alpha - normal\"", ")", "\n", "for", "alpha", "in", "self", ".", "alpha_normal", ":", "\n", "            ", "logger", ".", "info", "(", "F", ".", "softmax", "(", "alpha", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"\\n# Alpha - reduce\"", ")", "\n", "for", "alpha", "in", "self", ".", "alpha_reduce", ":", "\n", "            ", "logger", ".", "info", "(", "F", ".", "softmax", "(", "alpha", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "logger", ".", "info", "(", "\"#####################\"", ")", "\n", "\n", "# restore formats", "\n", "for", "handler", ",", "formatter", "in", "zip", "(", "logger", ".", "handlers", ",", "org_formatters", ")", ":", "\n", "            ", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.genotype": [[164, 171], ["genotypes.parse", "genotypes.parse", "range", "genotypes.Genotype"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.genotypes.parse", "home.repos.pwc.inspect_result.wiljohnhong_dropnas.None.genotypes.parse"], ["", "", "def", "genotype", "(", "self", ")", ":", "\n", "        ", "gene_normal", "=", "gt", ".", "parse", "(", "self", ".", "alpha_normal", ",", "k", "=", "2", ")", "\n", "gene_reduce", "=", "gt", ".", "parse", "(", "self", ".", "alpha_reduce", ",", "k", "=", "2", ")", "\n", "concat", "=", "range", "(", "2", ",", "2", "+", "self", ".", "n_nodes", ")", "# concat all intermediate nodes", "\n", "\n", "return", "gt", ".", "Genotype", "(", "normal", "=", "gene_normal", ",", "normal_concat", "=", "concat", ",", "\n", "reduce", "=", "gene_reduce", ",", "reduce_concat", "=", "concat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.weights": [[172, 174], ["search_cnn.SearchCNNController.net.parameters"], "methods", ["None"], ["", "def", "weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "net", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.named_weights": [[175, 177], ["search_cnn.SearchCNNController.net.named_parameters"], "methods", ["None"], ["", "def", "named_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "net", ".", "named_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.alphas": [[178, 181], ["None"], "methods", ["None"], ["", "def", "alphas", "(", "self", ")", ":", "\n", "        ", "for", "n", ",", "p", "in", "self", ".", "_alphas", ":", "\n", "            ", "yield", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.named_alphas": [[182, 185], ["None"], "methods", ["None"], ["", "", "def", "named_alphas", "(", "self", ")", ":", "\n", "        ", "for", "n", ",", "p", "in", "self", ".", "_alphas", ":", "\n", "            ", "yield", "n", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.generate_masks": [[186, 206], ["torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "masks.append", "sum", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "random.random", "range", "search_cnn.SearchCNNController.generate_masks.generate_mask"], "methods", ["None"], ["", "", "def", "generate_masks", "(", "self", ",", "weights", ",", "drop_rate", ")", ":", "\n", "\n", "        ", "def", "generate_mask", "(", "drop_prob", ",", "length", ")", ":", "\n", "# generate a list of boolean as the mask for each group, and resample if all zero", "\n", "            ", "while", "True", ":", "\n", "                ", "mask", "=", "[", "random", ".", "random", "(", ")", ">", "drop_prob", "for", "_", "in", "range", "(", "length", ")", "]", "\n", "if", "sum", "(", "mask", ")", ">", "0", ":", "\n", "                    ", "return", "mask", "\n", "\n", "", "", "", "masks", "=", "[", "]", "# List[List[List[bool]]]], mask for the whole cell", "\n", "for", "ws", "in", "weights", ":", "\n", "            ", "s1", ",", "_", "=", "ws", ".", "shape", "\n", "drop_prob_para", "=", "(", "drop_rate", ")", "**", "(", "1", "/", "4", ")", "\n", "drop_prob_nopara", "=", "(", "drop_rate", ")", "**", "(", "1", "/", "4", ")", "\n", "mask", "=", "torch", ".", "Tensor", "(", "[", "generate_mask", "(", "drop_prob_para", ",", "length", "=", "4", ")", "+", "generate_mask", "(", "drop_prob_nopara", ",", "length", "=", "4", ")", "\n", "for", "_", "in", "range", "(", "s1", ")", "]", ")", ".", "cuda", "(", ")", "# mask for each node", "\n", "# the length of the second mask list is set to 2 in the `1-skip` search space", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "\n", "", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.generate_weights": [[207, 226], ["zip", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "range", "weights.append", "ratios.append", "alpha.size", "sum", "ratio.append", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "sum.item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "zip", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "generate_weights", "(", "self", ",", "alphas", ",", "masks", ")", ":", "\n", "        ", "weights", "=", "[", "]", "\n", "ratios", "=", "[", "]", "\n", "\n", "for", "alpha", ",", "mask", "in", "zip", "(", "alphas", ",", "masks", ")", ":", "\n", "# for each cell", "\n", "            ", "weight", "=", "torch", ".", "empty_like", "(", "alpha", ")", "\n", "ratio", "=", "[", "]", "# ratio means the total probability of the kept operations on each edge", "\n", "\n", "for", "i", "in", "range", "(", "alpha", ".", "size", "(", "0", ")", ")", ":", "\n", "# for each edge", "\n", "                ", "denominator", "=", "sum", "(", "[", "torch", ".", "exp", "(", "a", ")", "for", "a", ",", "m", "in", "zip", "(", "alpha", "[", "i", "]", ",", "mask", "[", "i", "]", ")", "if", "m", "]", ")", "\n", "weight", "[", "i", "]", "=", "torch", ".", "exp", "(", "alpha", "[", "i", "]", ")", "/", "denominator", "\n", "ratio", ".", "append", "(", "denominator", ".", "item", "(", ")", "/", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "alpha", "[", "i", "]", ")", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "weights", ".", "append", "(", "weight", ")", "\n", "ratios", ".", "append", "(", "ratio", ")", "\n", "\n", "", "return", "weights", ",", "ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.adjust_alphas": [[227, 243], ["search_cnn.SearchCNNController.adjust_alphas.adjust"], "methods", ["None"], ["", "def", "adjust_alphas", "(", "self", ")", ":", "\n", "\n", "        ", "def", "adjust", "(", "alphas", ",", "masks", ",", "ratios", ")", ":", "\n", "            ", "for", "alpha", ",", "mask", ",", "ratio", "in", "zip", "(", "alphas", ",", "masks", ",", "ratios", ")", ":", "# for each cell", "\n", "                ", "for", "i", "in", "range", "(", "alpha", ".", "size", "(", "0", ")", ")", ":", "# for each edge", "\n", "                    ", "if", "sum", "(", "mask", "[", "i", "]", ")", "<", "len", "(", "gt", ".", "PRIMITIVES", ")", ":", "# if there's any dropped operation", "\n", "# The following part works in the same way as introduced in the paper, but more redundant", "\n", "                        ", "updated_sum", "=", "sum", "(", "[", "torch", ".", "exp", "(", "a", ")", "for", "a", ",", "m", "in", "zip", "(", "alpha", "[", "i", "]", ",", "mask", "[", "i", "]", ")", "if", "m", "]", ")", "\n", "remain_sum", "=", "sum", "(", "[", "torch", ".", "exp", "(", "a", ")", "for", "a", ",", "m", "in", "zip", "(", "alpha", "[", "i", "]", ",", "mask", "[", "i", "]", ")", "if", "not", "m", "]", ")", "\n", "k", "=", "math", ".", "log", "(", "ratio", "[", "i", "]", "/", "(", "1", "-", "ratio", "[", "i", "]", ")", "*", "remain_sum", "/", "updated_sum", ")", "\n", "for", "a", ",", "m", "in", "zip", "(", "alpha", "[", "i", "]", ",", "mask", "[", "i", "]", ")", ":", "\n", "                            ", "if", "m", ":", "\n", "                                ", "a", ".", "data", ".", "add_", "(", "k", ")", "\n", "\n", "", "", "", "", "", "", "adjust", "(", "self", ".", "alpha_normal", ",", "self", ".", "masks_normal", ",", "self", ".", "ratios_normal", ")", "\n", "adjust", "(", "self", ".", "alpha_reduce", ",", "self", ".", "masks_reduce", ",", "self", ".", "ratios_reduce", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.weight_decay_loss": [[244, 252], ["search_cnn.SearchCNNController.weights", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "w.norm", "[].item", "w.grad.view"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.weights"], ["", "def", "weight_decay_loss", "(", "self", ",", "w_decay_rate", ")", ":", "\n", "# conduct partial-decay for weights", "\n", "        ", "loss", "=", "0", "\n", "for", "w", "in", "self", ".", "weights", "(", ")", ":", "\n", "            ", "if", "w", ".", "grad", "is", "not", "None", "and", "not", "w", ".", "grad", ".", "view", "(", "-", "1", ")", "[", "0", "]", ".", "item", "(", ")", "==", "0.", ":", "\n", "                ", "loss", "+=", "torch", ".", "pow", "(", "w", ".", "norm", "(", "2", ")", ",", "2", ")", "\n", "\n", "", "", "return", "loss", "*", "w_decay_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.alpha_decay_loss": [[253, 262], ["search_cnn.SearchCNNController.alphas", "a.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow().view", "torch.pow().view", "torch.pow().view", "torch.pow().view", "torch.pow().view", "torch.pow().view", "torch.pow().view", "torch.pow().view", "torch.pow().view", "a.grad.abs", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.SearchCNNController.alphas"], ["", "def", "alpha_decay_loss", "(", "self", ",", "alpha_decay_rate", ")", ":", "\n", "# conduct partial-decay for alphas", "\n", "        ", "loss", "=", "0", "\n", "for", "a", "in", "self", ".", "alphas", "(", ")", ":", "\n", "            ", "decay_idx", "=", "(", "a", ".", "grad", ".", "abs", "(", ")", ">", "1e-7", ")", ".", "float", "(", ")", "\n", "decay_alpha", "=", "a", ".", "mul", "(", "decay_idx", ")", "\n", "loss", "+=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "decay_alpha", ",", "2", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "", "return", "loss", "*", "alpha_decay_rate", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wiljohnhong_dropnas.models.search_cnn.broadcast_list": [[16, 22], ["torch.nn.parallel._functions.Broadcast.apply", "range", "len", "len", "len"], "function", ["None"], ["def", "broadcast_list", "(", "l", ",", "device_ids", ")", ":", "\n", "    ", "\"\"\" Broadcasting list \"\"\"", "\n", "l_copies", "=", "Broadcast", ".", "apply", "(", "device_ids", ",", "*", "l", ")", "\n", "l_copies", "=", "[", "l_copies", "[", "i", ":", "i", "+", "len", "(", "l", ")", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l_copies", ")", ",", "len", "(", "l", ")", ")", "]", "\n", "\n", "return", "l_copies", "\n", "\n"]]}