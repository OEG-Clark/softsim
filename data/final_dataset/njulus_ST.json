{"home.repos.pwc.inspect_result.njulus_ST.None.main.display_args": [[18, 47], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "str", "str"], "function", ["None"], ["def", "display_args", "(", "args", ")", ":", "\n", "    ", "print", "(", "'===== task arguments ====='", ")", "\n", "print", "(", "'data_name = %s'", "%", "(", "args", ".", "data_name", ")", ")", "\n", "print", "(", "'network_name = %s'", "%", "(", "args", ".", "network_name", ")", ")", "\n", "print", "(", "'model_name = %s'", "%", "(", "args", ".", "model_name", ")", ")", "\n", "print", "(", "'N = %d'", "%", "(", "args", ".", "N", ")", ")", "\n", "print", "(", "'K = %d'", "%", "(", "args", ".", "K", ")", ")", "\n", "print", "(", "'Q = %d'", "%", "(", "args", ".", "Q", ")", ")", "\n", "print", "(", "'===== experiment environment arguments ====='", ")", "\n", "print", "(", "'devices = %s'", "%", "str", "(", "args", ".", "devices", ")", ")", "\n", "print", "(", "'flag_debug = %r'", "%", "(", "args", ".", "flag_debug", ")", ")", "\n", "print", "(", "'n_workers = %d'", "%", "(", "args", ".", "n_workers", ")", ")", "\n", "print", "(", "'===== optimizer arguments ====='", ")", "\n", "print", "(", "'lr_network = %f'", "%", "(", "args", ".", "lr_network", ")", ")", "\n", "print", "(", "'lr = %f'", "%", "(", "args", ".", "lr", ")", ")", "\n", "print", "(", "'point = %s'", "%", "str", "(", "args", ".", "point", ")", ")", "\n", "print", "(", "'gamma = %f'", "%", "(", "args", ".", "gamma", ")", ")", "\n", "print", "(", "'wd = %f'", "%", "(", "args", ".", "wd", ")", ")", "\n", "print", "(", "'mo = %f'", "%", "(", "args", ".", "mo", ")", ")", "\n", "print", "(", "'===== training procedure arguments ====='", ")", "\n", "print", "(", "'n_training_episodes = %d'", "%", "(", "args", ".", "n_training_episodes", ")", ")", "\n", "print", "(", "'n_validating_episodes = %d'", "%", "(", "args", ".", "n_validating_episodes", ")", ")", "\n", "print", "(", "'n_testing_episodes = %d'", "%", "(", "args", ".", "n_testing_episodes", ")", ")", "\n", "print", "(", "'flag_random_task = %r'", "%", "(", "args", ".", "flag_random_task", ")", ")", "\n", "print", "(", "'episode_gap = %d'", "%", "(", "args", ".", "episode_gap", ")", ")", "\n", "print", "(", "'===== model arguments ====='", ")", "\n", "print", "(", "'tau = %f'", "%", "(", "args", ".", "tau", ")", ")", "\n", "print", "(", "'NN = %d'", "%", "(", "args", ".", "NN", ")", ")", "\n", "print", "(", "'lambd = %f'", "%", "(", "args", ".", "lambd", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.None.Test.test": [[3, 22], ["model.eval", "enumerate", "len", "images.float().cuda.float().cuda", "labels.long().cuda.long().cuda", "torch.arange().repeat().long", "query_targets.cuda.cuda", "torch.argmax", "torch.mean().cpu().item", "torch.no_grad", "model.forward", "images.float().cuda.float", "labels.long().cuda.long", "torch.arange().repeat", "torch.mean().cpu", "torch.arange", "torch.mean"], "function", ["home.repos.pwc.inspect_result.njulus_ST.networks.dropblock.DropBlock.forward"], ["def", "test", "(", "args", ",", "data_loader", ",", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "accuracy", "=", "0", "\n", "for", "task_index", ",", "task", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "images", ",", "labels", "=", "task", "\n", "images", "=", "images", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", "=", "model", ".", "forward", "(", "images", ",", "output_type", "=", "'logits'", ")", "\n", "\n", "", "query_targets", "=", "torch", ".", "arange", "(", "args", ".", "N", ")", ".", "repeat", "(", "args", ".", "Q", ")", ".", "long", "(", ")", "\n", "query_targets", "=", "query_targets", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "\n", "predictions", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "accuracy", "+=", "torch", ".", "mean", "(", "(", "predictions", "==", "query_targets", ")", ".", "float", "(", ")", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "accuracy", "/=", "len", "(", "data_loader", ")", "\n", "return", "accuracy", "", "", ""]], "home.repos.pwc.inspect_result.njulus_ST.None.Train.train": [[8, 59], ["torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "enumerate", "model.train", "images.float().cuda.float().cuda", "labels.long().cuda.long().cuda", "model.forward", "model.forward.cpu().item", "torch.optim.SGD.zero_grad", "model.forward.backward", "torch.optim.SGD.step", "Test.test", "training_loss_list.append", "validating_accuracy_list.append", "print", "torch.optim.lr_scheduler.MultiStepLR.step", "model.get_network_params", "model.get_other_params", "images.float().cuda.float", "labels.long().cuda.long", "model.forward.cpu", "torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.njulus_ST.None.Train.train", "home.repos.pwc.inspect_result.njulus_ST.networks.dropblock.DropBlock.forward", "home.repos.pwc.inspect_result.njulus_ST.None.Test.test", "home.repos.pwc.inspect_result.njulus_ST.models.linear_classifier.MyModel.get_network_params", "home.repos.pwc.inspect_result.njulus_ST.models.linear_classifier.MyModel.get_other_params"], ["def", "train", "(", "args", ",", "train_data_loader", ",", "validate_data_loader", ",", "model", ",", "model_save_path", ")", ":", "\n", "    ", "optimizer", "=", "SGD", "(", "[", "\n", "{", "'params'", ":", "model", ".", "get_network_params", "(", ")", ",", "'lr'", ":", "args", ".", "lr_network", "}", ",", "\n", "{", "'params'", ":", "model", ".", "get_other_params", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", "\n", "]", ",", "weight_decay", "=", "args", ".", "wd", ",", "momentum", "=", "args", ".", "mo", ",", "nesterov", "=", "True", ")", "\n", "\n", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "args", ".", "point", ",", "args", ".", "gamma", ")", "\n", "\n", "training_loss_list", "=", "[", "]", "\n", "validating_accuracy_list", "=", "[", "]", "\n", "best_validating_accuracy", "=", "0", "\n", "\n", "training_loss", "=", "0", "\n", "\n", "for", "task_index", ",", "task", "in", "enumerate", "(", "train_data_loader", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n", "images", ",", "labels", "=", "task", "\n", "images", "=", "images", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "\n", "loss", "=", "model", ".", "forward", "(", "images", ")", "\n", "training_loss", "+=", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "(", "task_index", "+", "1", ")", "%", "args", ".", "episode_gap", "==", "0", ":", "\n", "            ", "training_loss", "/=", "args", ".", "episode_gap", "\n", "validating_accuracy", "=", "test", "(", "args", ",", "validate_data_loader", ",", "model", ")", "\n", "training_loss_list", ".", "append", "(", "training_loss", ")", "\n", "validating_accuracy_list", ".", "append", "(", "validating_accuracy", ")", "\n", "print", "(", "'epoch %d finish: training loss = %f, validating acc = %f'", "%", "(", "\n", "(", "task_index", "+", "1", ")", "/", "args", ".", "episode_gap", ",", "training_loss", ",", "validating_accuracy", "\n", ")", ")", "\n", "\n", "if", "not", "args", ".", "flag_debug", ":", "\n", "                ", "if", "validating_accuracy", ">", "best_validating_accuracy", ":", "\n", "                    ", "best_validating_accuracy", "=", "validating_accuracy", "\n", "record", "=", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'validating_accuracy'", ":", "validating_accuracy", ",", "\n", "'epoch'", ":", "(", "task_index", "+", "1", ")", "/", "args", ".", "episode_gap", "\n", "}", "\n", "torch", ".", "save", "(", "record", ",", "model_save_path", ")", "\n", "\n", "", "", "training_loss", "=", "0", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "return", "training_loss_list", ",", "validating_accuracy_list", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.None.Train.train_st": [[62, 133], ["torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "enumerate", "model.train", "images.float().cuda.float().cuda", "labels.long().cuda.long().cuda", "labels[].cpu().numpy", "model.forward.cpu().item", "support_loss.cpu().item", "distill_loss.cpu().item", "torch.optim.SGD.zero_grad", "model.forward.backward", "torch.optim.SGD.step", "model.forward", "model.forward", "Test.test", "training_loss_list.append", "validating_accuracy_list.append", "print", "torch.optim.lr_scheduler.MultiStepLR.step", "model.get_network_params", "model.get_other_params", "images.float().cuda.float", "labels.long().cuda.long", "labels[].cpu", "model.forward.cpu", "support_loss.cpu", "distill_loss.cpu", "torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.njulus_ST.None.Train.train", "home.repos.pwc.inspect_result.njulus_ST.networks.dropblock.DropBlock.forward", "home.repos.pwc.inspect_result.njulus_ST.networks.dropblock.DropBlock.forward", "home.repos.pwc.inspect_result.njulus_ST.None.Test.test", "home.repos.pwc.inspect_result.njulus_ST.models.linear_classifier.MyModel.get_network_params", "home.repos.pwc.inspect_result.njulus_ST.models.linear_classifier.MyModel.get_other_params"], ["", "def", "train_st", "(", "args", ",", "train_data_loader", ",", "validate_data_loader", ",", "model", ",", "model_save_path", ",", "target_task", ")", ":", "\n", "    ", "optimizer", "=", "SGD", "(", "[", "\n", "{", "'params'", ":", "model", ".", "get_network_params", "(", ")", ",", "'lr'", ":", "args", ".", "lr_network", "}", ",", "\n", "{", "'params'", ":", "model", ".", "get_other_params", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", "\n", "]", ",", "weight_decay", "=", "args", ".", "wd", ",", "momentum", "=", "args", ".", "mo", ",", "nesterov", "=", "True", ")", "\n", "\n", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "args", ".", "point", ",", "args", ".", "gamma", ")", "\n", "\n", "training_loss_list", "=", "[", "]", "\n", "validating_accuracy_list", "=", "[", "]", "\n", "best_validating_accuracy", "=", "0", "\n", "\n", "training_loss", "=", "0", "\n", "training_support_loss", "=", "0", "\n", "training_distill_loss", "=", "0", "\n", "n_taught_tasks", "=", "0", "\n", "\n", "for", "task_index", ",", "task", "in", "enumerate", "(", "train_data_loader", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n", "images", ",", "labels", "=", "task", "\n", "images", "=", "images", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "\n", "label_set", "=", "labels", "[", ":", "args", ".", "N", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flag_in_task", "=", "True", "\n", "for", "x", "in", "label_set", ":", "\n", "            ", "if", "not", "x", "in", "target_task", ":", "\n", "                ", "flag_in_task", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "flag_in_task", ":", "\n", "            ", "n_taught_tasks", "+=", "1", "\n", "loss", ",", "support_loss", ",", "distill_loss", "=", "model", ".", "forward", "(", "images", ",", "output_type", "=", "'loss'", ",", "flag_in_task", "=", "True", ",", "labels", "=", "labels", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "model", ".", "forward", "(", "images", ",", "output_type", "=", "'loss'", ")", "\n", "", "training_loss", "+=", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "training_support_loss", "+=", "support_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "training_distill_loss", "+=", "distill_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "(", "task_index", "+", "1", ")", "%", "args", ".", "episode_gap", "==", "0", ":", "\n", "            ", "training_loss", "/=", "args", ".", "episode_gap", "\n", "training_support_loss", "/=", "args", ".", "episode_gap", "\n", "training_distill_loss", "/=", "args", ".", "episode_gap", "\n", "validating_accuracy", "=", "test", "(", "args", ",", "validate_data_loader", ",", "model", ")", "\n", "training_loss_list", ".", "append", "(", "training_loss", ")", "\n", "validating_accuracy_list", ".", "append", "(", "validating_accuracy", ")", "\n", "print", "(", "'epoch %d finish: training support loss = %f, training distill loss = %f, validating acc = %f, taught tasks = %d'", "%", "(", "\n", "(", "task_index", "+", "1", ")", "/", "args", ".", "episode_gap", ",", "training_support_loss", ",", "training_distill_loss", ",", "validating_accuracy", ",", "n_taught_tasks", "\n", ")", "\n", ")", "\n", "\n", "if", "not", "args", ".", "flag_debug", ":", "\n", "                ", "if", "validating_accuracy", ">", "best_validating_accuracy", ":", "\n", "                    ", "best_validating_accuracy", "=", "validating_accuracy", "\n", "record", "=", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'validating_accuracy'", ":", "validating_accuracy", ",", "\n", "'epoch'", ":", "(", "task_index", "+", "1", ")", "/", "args", ".", "episode_gap", "\n", "}", "\n", "torch", ".", "save", "(", "record", ",", "model_save_path", ")", "\n", "\n", "", "", "training_loss", "=", "0", "\n", "n_taught_tasks", "=", "0", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "return", "training_loss_list", ",", "validating_accuracy_list", "", "", ""]], "home.repos.pwc.inspect_result.njulus_ST.None.finetune.get_similarity_matrix": [[19, 49], ["len", "torch.zeros", "torch.zeros", "enumerate", "class_count.cuda.unsqueeze", "torch.nn.functional.normalize", "torch.mm", "class_center.cuda.cuda", "class_count.cuda.cuda", "class_center.cuda.t", "images.float().cuda", "images.float", "labels.long().cuda", "labels.long", "torch.no_grad", "baseline_model.forward", "range", "torch.sum", "images.float", "labels.long", "index_of_class_i.size"], "function", ["home.repos.pwc.inspect_result.njulus_ST.networks.dropblock.DropBlock.forward"], ["def", "get_similarity_matrix", "(", "args", ",", "finetune_data_loader", ",", "baseline_model", ")", ":", "\n", "    ", "n_classes", "=", "len", "(", "finetune_data_loader", ".", "dataset", ".", "label2name", ")", "\n", "if", "args", ".", "network_name", "==", "'convnet'", ":", "\n", "        ", "n_dimension", "=", "64", "\n", "", "elif", "args", ".", "network_name", "==", "'resnet'", ":", "\n", "        ", "n_dimension", "=", "640", "\n", "\n", "", "class_center", "=", "torch", ".", "zeros", "(", "(", "n_classes", ",", "n_dimension", ")", ")", "\n", "class_count", "=", "torch", ".", "zeros", "(", "n_classes", ")", "\n", "if", "not", "args", ".", "flag_not_use_gpu", ":", "\n", "        ", "class_center", "=", "class_center", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "class_count", "=", "class_count", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "\n", "", "for", "batch_index", ",", "batch", "in", "enumerate", "(", "finetune_data_loader", ")", ":", "\n", "        ", "images", ",", "labels", "=", "batch", "\n", "images", "=", "images", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "if", "not", "args", ".", "flag_not_use_gpu", "else", "images", ".", "float", "(", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "if", "not", "args", ".", "flag_not_use_gpu", "else", "labels", ".", "long", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "embeddings", "=", "baseline_model", ".", "forward", "(", "images", ",", "flag_embedding", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n_classes", ")", ":", "\n", "                ", "index_of_class_i", "=", "(", "labels", "==", "i", ")", "\n", "class_center", "[", "i", "]", "+=", "torch", ".", "sum", "(", "embeddings", "[", "index_of_class_i", "]", ",", "dim", "=", "0", ")", "\n", "class_count", "[", "i", "]", "+=", "index_of_class_i", ".", "size", "(", ")", "[", "0", "]", "\n", "", "", "", "class_count", "=", "class_count", ".", "unsqueeze", "(", "1", ")", "\n", "class_center", "=", "class_center", "/", "class_count", "\n", "class_center", "=", "F", ".", "normalize", "(", "class_center", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "similarity_matrix", "=", "torch", ".", "mm", "(", "class_center", ",", "class_center", ".", "t", "(", ")", ")", "\n", "return", "class_center", ",", "similarity_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.None.finetune.select_task": [[52, 67], ["numpy.arange", "numpy.random.shuffle", "similarity_matrix.cpu().numpy.cpu().numpy", "[].copy", "numpy.sum", "similarity_matrix.cpu().numpy.cpu", "numpy.argsort"], "function", ["None"], ["", "def", "select_task", "(", "args", ",", "similarity_matrix", ")", ":", "\n", "    ", "if", "args", ".", "data_name", "==", "'mini_imagenet'", ":", "\n", "        ", "n_classes", "=", "64", "\n", "", "elif", "args", ".", "data_name", "==", "'tiered_imagenet'", ":", "\n", "        ", "n_classes", "=", "351", "\n", "\n", "", "if", "args", ".", "policy", "==", "'random'", ":", "\n", "        ", "task", "=", "np", ".", "arange", "(", "n_classes", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "task", ")", "\n", "task", "=", "task", "[", ":", "args", ".", "NN", "]", "\n", "", "elif", "args", ".", "policy", "==", "'hardness'", ":", "\n", "        ", "similarity_matrix", "=", "similarity_matrix", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "hardness_score", "=", "-", "np", ".", "sum", "(", "similarity_matrix", ",", "axis", "=", "1", ")", "\n", "task", "=", "np", ".", "argsort", "(", "hardness_score", ")", "[", ":", ":", "-", "1", "]", "[", ":", "args", ".", "NN", "]", ".", "copy", "(", ")", "\n", "", "return", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.None.finetune.get_task_indices": [[70, 75], ["None"], "function", ["None"], ["", "def", "get_task_indices", "(", "dataset", ",", "task", ")", ":", "\n", "    ", "indices", "=", "[", "]", "\n", "for", "label", "in", "task", ":", "\n", "        ", "indices", "+=", "dataset", ".", "label2indices", "[", "label", "]", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.None.finetune.test_model": [[78, 99], ["label_map.long().cuda.long().cuda", "enumerate", "model.eval", "enumerate", "data_loader.dataset.__len__", "torch.zeros", "images.float().cuda.float().cuda", "labels.long().cuda.long().cuda", "torch.argmax", "torch.sum().cpu().item", "label_map.long().cuda.long", "torch.no_grad", "model", "max", "images.float().cuda.float", "labels.long().cuda.long", "torch.sum().cpu", "torch.sum"], "function", ["home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__len__"], ["", "def", "test_model", "(", "args", ",", "data_loader", ",", "model", ",", "task", ")", ":", "\n", "    ", "label_map", "=", "torch", ".", "zeros", "(", "1", "+", "max", "(", "task", ")", ")", "-", "1", "\n", "label_map", "=", "label_map", ".", "long", "(", ")", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "task", ")", ":", "\n", "        ", "label_map", "[", "x", "]", "=", "i", "\n", "\n", "", "acc", "=", "0", "\n", "model", ".", "eval", "(", ")", "\n", "for", "batch_index", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "images", ",", "labels", "=", "batch", "\n", "images", "=", "images", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "labels", "=", "label_map", "[", "labels", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", "=", "model", "(", "images", ")", "\n", "", "predicted_labels", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "acc", "+=", "torch", ".", "sum", "(", "(", "predicted_labels", "==", "labels", ")", ".", "float", "(", ")", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "acc", "/=", "data_loader", ".", "dataset", ".", "__len__", "(", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.None.finetune.do_finetune": [[102, 160], ["torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "label_map.long().cuda.long().cuda", "enumerate", "range", "torch.zeros", "finetune_model.train", "enumerate", "train_data_loader.dataset.__len__", "train_data_loader.dataset.__len__", "finetune_model.eval", "finetune.test_model", "print", "torch.optim.lr_scheduler.MultiStepLR.step", "label_map.long().cuda.long", "images.float().cuda.float().cuda", "labels.long().cuda.long().cuda", "finetune_model", "torch.optim.SGD.zero_grad", "loss_value.backward", "torch.optim.SGD.step", "torch.argmax", "loss_value.cpu().item", "torch.sum().cpu().item", "finetune_model.get_network_params", "finetune_model.get_other_params", "max", "torch.nn.CrossEntropyLoss", "torch.save", "images.float().cuda.float", "labels.long().cuda.long", "loss_value.cpu", "torch.sum().cpu", "finetune_model.state_dict", "torch.sum"], "function", ["home.repos.pwc.inspect_result.njulus_ST.None.Train.train", "home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__len__", "home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__len__", "home.repos.pwc.inspect_result.njulus_ST.None.finetune.test_model", "home.repos.pwc.inspect_result.njulus_ST.models.linear_classifier.MyModel.get_network_params", "home.repos.pwc.inspect_result.njulus_ST.models.linear_classifier.MyModel.get_other_params"], ["", "def", "do_finetune", "(", "args", ",", "train_data_loader", ",", "validate_data_loader", ",", "finetune_model", ",", "task", ",", "finetune_model_save_path", ")", ":", "\n", "    ", "optimizer", "=", "SGD", "(", "[", "\n", "{", "'params'", ":", "finetune_model", ".", "get_network_params", "(", ")", ",", "'lr'", ":", "args", ".", "lr_network", "}", ",", "\n", "{", "'params'", ":", "finetune_model", ".", "get_other_params", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", "\n", "]", ",", "weight_decay", "=", "args", ".", "wd", ",", "momentum", "=", "args", ".", "mo", ",", "nesterov", "=", "True", ")", "\n", "\n", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "args", ".", "point", ",", "args", ".", "gamma", ")", "\n", "\n", "label_map", "=", "torch", ".", "zeros", "(", "1", "+", "max", "(", "task", ")", ")", "-", "1", "\n", "label_map", "=", "label_map", ".", "long", "(", ")", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "task", ")", ":", "\n", "        ", "label_map", "[", "x", "]", "=", "i", "\n", "\n", "", "best_validating_accuracy", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "0", ",", "args", ".", "n_training_epochs", ")", ":", "\n", "        ", "finetune_model", ".", "train", "(", ")", "\n", "training_loss", "=", "0", "\n", "training_acc", "=", "0", "\n", "for", "batch_index", ",", "batch", "in", "enumerate", "(", "train_data_loader", ")", ":", "\n", "            ", "images", ",", "labels", "=", "batch", "\n", "images", "=", "images", ".", "float", "(", ")", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "labels", "=", "label_map", "[", "labels", "]", "\n", "\n", "logits", "=", "finetune_model", "(", "images", ")", "\n", "loss_value", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "logits", ",", "labels", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_value", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "predicted_labels", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "training_loss", "+=", "loss_value", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "training_acc", "+=", "torch", ".", "sum", "(", "(", "predicted_labels", "==", "labels", ")", ".", "float", "(", ")", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "training_loss", "/=", "train_data_loader", ".", "dataset", ".", "__len__", "(", ")", "\n", "training_acc", "/=", "train_data_loader", ".", "dataset", ".", "__len__", "(", ")", "\n", "finetune_model", ".", "eval", "(", ")", "\n", "validation_acc", "=", "test_model", "(", "args", ",", "validate_data_loader", ",", "finetune_model", ",", "task", ")", "\n", "print", "(", "'finetune epoch %d finish: loss = %f, tr-acc = %f, va-acc = %f'", "%", "\n", "(", "epoch", "+", "1", ",", "training_loss", ",", "training_acc", ",", "validation_acc", ")", ")", "\n", "\n", "if", "not", "args", ".", "flag_debug", ":", "\n", "            ", "if", "validation_acc", ">", "best_validating_accuracy", ":", "\n", "                ", "best_validating_accuracy", "=", "validation_acc", "\n", "record", "=", "{", "\n", "'state_dict'", ":", "finetune_model", ".", "state_dict", "(", ")", ",", "\n", "'validating_accuracy'", ":", "validation_acc", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'task'", ":", "task", ",", "\n", "'args'", ":", "args", "\n", "}", "\n", "torch", ".", "save", "(", "record", ",", "finetune_model_save_path", ")", "\n", "\n", "", "", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "return", "best_validating_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.None.finetune.display_args": [[163, 184], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "str", "str"], "function", ["None"], ["", "def", "display_args", "(", "args", ")", ":", "\n", "    ", "print", "(", "'===== task arguments ====='", ")", "\n", "print", "(", "'data_name = %s'", "%", "(", "args", ".", "data_name", ")", ")", "\n", "print", "(", "'network_name = %s'", "%", "(", "args", ".", "network_name", ")", ")", "\n", "print", "(", "'model_name = %s'", "%", "(", "args", ".", "model_name", ")", ")", "\n", "print", "(", "'NN = %d'", "%", "(", "args", ".", "NN", ")", ")", "\n", "print", "(", "'===== experiment environment arguments ====='", ")", "\n", "print", "(", "'devices = %s'", "%", "str", "(", "args", ".", "devices", ")", ")", "\n", "print", "(", "'flag_debug = %r'", "%", "(", "args", ".", "flag_debug", ")", ")", "\n", "print", "(", "'n_workers = %d'", "%", "(", "args", ".", "n_workers", ")", ")", "\n", "print", "(", "'===== optimizer arguments ====='", ")", "\n", "print", "(", "'lr_network = %f'", "%", "(", "args", ".", "lr_network", ")", ")", "\n", "print", "(", "'lr = %f'", "%", "(", "args", ".", "lr", ")", ")", "\n", "print", "(", "'point = %s'", "%", "str", "(", "args", ".", "point", ")", ")", "\n", "print", "(", "'gamma = %f'", "%", "(", "args", ".", "gamma", ")", ")", "\n", "print", "(", "'wd = %f'", "%", "(", "args", ".", "wd", ")", ")", "\n", "print", "(", "'mo = %f'", "%", "(", "args", ".", "mo", ")", ")", "\n", "print", "(", "'===== training procedure arguments ====='", ")", "\n", "print", "(", "'policy = %s'", "%", "(", "args", ".", "policy", ")", ")", "\n", "print", "(", "'n_training_epochs = %d'", "%", "(", "args", ".", "n_training_epochs", ")", ")", "\n", "print", "(", "'batch_size = %d'", "%", "(", "args", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.models.protonet.MyModel.__init__": [[8, 12], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "network", ")", ":", "\n", "        ", "super", "(", "MyModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "encoder", "=", "network", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.models.protonet.MyModel.forward": [[13, 33], ["protonet.MyModel.encoder", "embeddings.view.view.view", "torch.mean", "torch.nn.functional.normalize", "support_embeddings.view", "torch.mm", "torch.nn.functional.normalize.t", "torch.arange().repeat().long", "query_targets.cuda.cuda.cuda", "torch.nn.CrossEntropyLoss", "torch.arange().repeat", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ",", "output_type", "=", "'loss'", ")", ":", "\n", "        ", "embeddings", "=", "self", ".", "encoder", "(", "images", ")", "\n", "embeddings", "=", "embeddings", ".", "view", "(", "self", ".", "args", ".", "N", "*", "(", "self", ".", "args", ".", "K", "+", "self", ".", "args", ".", "Q", ")", ",", "-", "1", ")", "\n", "\n", "support_embeddings", "=", "embeddings", "[", ":", "self", ".", "args", ".", "N", "*", "self", ".", "args", ".", "K", ",", ":", "]", "\n", "query_embeddings", "=", "embeddings", "[", "self", ".", "args", ".", "N", "*", "self", ".", "args", ".", "K", ":", ",", ":", "]", "\n", "\n", "prototypes", "=", "torch", ".", "mean", "(", "support_embeddings", ".", "view", "(", "self", ".", "args", ".", "K", ",", "self", ".", "args", ".", "N", ",", "-", "1", ")", ",", "dim", "=", "0", ")", "\n", "prototypes", "=", "F", ".", "normalize", "(", "prototypes", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "\n", "logits", "=", "torch", ".", "mm", "(", "query_embeddings", ",", "prototypes", ".", "t", "(", ")", ")", "/", "self", ".", "args", ".", "tau", "\n", "\n", "if", "output_type", "==", "'logits'", ":", "\n", "            ", "return", "logits", "\n", "", "elif", "output_type", "==", "'loss'", ":", "\n", "            ", "query_targets", "=", "torch", ".", "arange", "(", "self", ".", "args", ".", "N", ")", ".", "repeat", "(", "self", ".", "args", ".", "Q", ")", ".", "long", "(", ")", "\n", "query_targets", "=", "query_targets", ".", "cuda", "(", "self", ".", "args", ".", "devices", "[", "0", "]", ")", "\n", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "logits", ",", "query_targets", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.models.protonet.MyModel.get_network_params": [[34, 39], ["range", "len", "modules[].parameters"], "methods", ["None"], ["", "", "def", "get_network_params", "(", "self", ")", ":", "\n", "        ", "modules", "=", "[", "self", ".", "encoder", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "modules", ")", ")", ":", "\n", "            ", "for", "j", "in", "modules", "[", "i", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "yield", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.models.protonet.MyModel.get_other_params": [[40, 45], ["range", "len", "modules[].parameters"], "methods", ["None"], ["", "", "", "def", "get_other_params", "(", "self", ")", ":", "\n", "        ", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "modules", ")", ")", ":", "\n", "            ", "for", "j", "in", "modules", "[", "i", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "yield", "j", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.njulus_ST.models.st.MyModel.__init__": [[8, 19], ["torch.nn.Module.__init__", "st.MyModel.label_map.long().cuda", "enumerate", "torch.zeros", "st.MyModel.label_map.long", "max"], "methods", ["home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "network", ",", "target_model", ",", "target_task", ")", ":", "\n", "        ", "super", "(", "MyModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "encoder", "=", "network", "\n", "self", ".", "target_model", "=", "target_model", "\n", "self", ".", "target_task", "=", "target_task", "\n", "\n", "self", ".", "label_map", "=", "torch", ".", "zeros", "(", "1", "+", "max", "(", "target_task", ")", ")", "-", "1", "\n", "self", ".", "label_map", "=", "self", ".", "label_map", ".", "long", "(", ")", ".", "cuda", "(", "args", ".", "devices", "[", "0", "]", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "target_task", ")", ":", "\n", "            ", "self", ".", "label_map", "[", "x", "]", "=", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.models.st.MyModel.forward": [[20, 57], ["st.MyModel.encoder", "embeddings.view.view.view", "torch.mean", "torch.nn.functional.normalize", "support_embeddings.view", "torch.mm", "torch.mm", "torch.nn.functional.normalize.t", "torch.nn.functional.normalize.t", "torch.arange().repeat().long", "query_targets.cuda.cuda.cuda", "torch.arange().repeat().long", "support_targets.cuda.cuda.cuda", "torch.nn.CrossEntropyLoss", "torch.no_grad", "torch.nn.CrossEntropyLoss", "torch.arange().repeat", "st.MyModel.target_model", "torch.arange().repeat", "torch.nn.KLDivLoss", "torch.nn.functional.log_softmax", "torch.nn.functional.softmax", "torch.arange", "torch.arange"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "images", ",", "flag_in_task", "=", "False", ",", "output_type", "=", "'loss'", ",", "labels", "=", "-", "1", ")", ":", "\n", "        ", "embeddings", "=", "self", ".", "encoder", "(", "images", ")", "\n", "embeddings", "=", "embeddings", ".", "view", "(", "self", ".", "args", ".", "N", "*", "(", "self", ".", "args", ".", "K", "+", "self", ".", "args", ".", "Q", ")", ",", "-", "1", ")", "\n", "\n", "support_embeddings", "=", "embeddings", "[", ":", "self", ".", "args", ".", "N", "*", "self", ".", "args", ".", "K", ",", ":", "]", "\n", "query_embeddings", "=", "embeddings", "[", "self", ".", "args", ".", "N", "*", "self", ".", "args", ".", "K", ":", ",", ":", "]", "\n", "\n", "prototypes", "=", "torch", ".", "mean", "(", "support_embeddings", ".", "view", "(", "self", ".", "args", ".", "K", ",", "self", ".", "args", ".", "N", ",", "-", "1", ")", ",", "dim", "=", "0", ")", "\n", "prototypes", "=", "F", ".", "normalize", "(", "prototypes", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "\n", "support_logits", "=", "torch", ".", "mm", "(", "support_embeddings", ",", "prototypes", ".", "t", "(", ")", ")", "/", "self", ".", "args", ".", "tau", "\n", "query_logits", "=", "torch", ".", "mm", "(", "query_embeddings", ",", "prototypes", ".", "t", "(", ")", ")", "/", "self", ".", "args", ".", "tau", "\n", "\n", "if", "not", "flag_in_task", ":", "\n", "            ", "if", "output_type", "==", "'logits'", ":", "\n", "                ", "return", "query_logits", "\n", "", "elif", "output_type", "==", "'loss'", ":", "\n", "                ", "query_targets", "=", "torch", ".", "arange", "(", "self", ".", "args", ".", "N", ")", ".", "repeat", "(", "self", ".", "args", ".", "Q", ")", ".", "long", "(", ")", "\n", "query_targets", "=", "query_targets", ".", "cuda", "(", "self", ".", "args", ".", "devices", "[", "0", "]", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "query_logits", ",", "query_targets", ")", "\n", "return", "loss", "\n", "", "", "else", ":", "\n", "            ", "if", "output_type", "==", "'logits'", ":", "\n", "                ", "return", "query_logits", "\n", "", "elif", "output_type", "==", "'loss'", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "target_logits", "=", "self", ".", "target_model", "(", "images", ")", "[", ":", ",", "self", ".", "label_map", "[", "labels", "[", ":", "self", ".", "args", ".", "N", "]", "]", "]", "\n", "target_support_logits", "=", "target_logits", "[", ":", "self", ".", "args", ".", "N", "*", "self", ".", "args", ".", "K", ",", ":", "]", "\n", "target_query_logits", "=", "target_logits", "[", "self", ".", "args", ".", "N", "*", "self", ".", "args", ".", "K", ",", ":", "]", "\n", "", "support_targets", "=", "torch", ".", "arange", "(", "self", ".", "args", ".", "N", ")", ".", "repeat", "(", "self", ".", "args", ".", "K", ")", ".", "long", "(", ")", "\n", "support_targets", "=", "support_targets", ".", "cuda", "(", "self", ".", "args", ".", "devices", "[", "0", "]", ")", "\n", "support_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "support_logits", ",", "support_targets", ")", "\n", "distill_loss", "=", "self", ".", "args", ".", "lambd", "*", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'batchmean'", ")", "(", "\n", "F", ".", "log_softmax", "(", "support_logits", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "target_support_logits", ",", "dim", "=", "1", ")", "\n", ")", "\n", "loss", "=", "support_loss", "+", "distill_loss", "\n", "return", "loss", ",", "support_loss", ",", "distill_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.models.st.MyModel.get_network_params": [[58, 63], ["range", "len", "modules[].parameters"], "methods", ["None"], ["", "", "", "def", "get_network_params", "(", "self", ")", ":", "\n", "        ", "modules", "=", "[", "self", ".", "encoder", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "modules", ")", ")", ":", "\n", "            ", "for", "j", "in", "modules", "[", "i", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "yield", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.models.st.MyModel.get_other_params": [[64, 69], ["range", "len", "modules[].parameters"], "methods", ["None"], ["", "", "", "def", "get_other_params", "(", "self", ")", ":", "\n", "        ", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "modules", ")", ")", ":", "\n", "            ", "for", "j", "in", "modules", "[", "i", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "yield", "j", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.njulus_ST.models.linear_classifier.MyModel.__init__": [[6, 19], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "network", ",", "out_dimension", ")", ":", "\n", "        ", "super", "(", "MyModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "encoder", "=", "network", "\n", "self", ".", "out_dimension", "=", "out_dimension", "\n", "\n", "# determine input features", "\n", "if", "args", ".", "network_name", "==", "'convnet'", ":", "\n", "            ", "in_dimension", "=", "64", "\n", "", "elif", "args", ".", "network_name", "==", "'resnet'", ":", "\n", "            ", "in_dimension", "=", "640", "\n", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_features", "=", "in_dimension", ",", "out_features", "=", "out_dimension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.models.linear_classifier.MyModel.forward": [[20, 24], ["linear_classifier.MyModel.encoder", "linear_classifier.MyModel.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "embeddings", "=", "self", ".", "encoder", "(", "images", ")", "\n", "logits", "=", "self", ".", "fc", "(", "embeddings", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.models.linear_classifier.MyModel.get_network_params": [[25, 30], ["range", "len", "modules[].parameters"], "methods", ["None"], ["", "def", "get_network_params", "(", "self", ")", ":", "\n", "        ", "modules", "=", "[", "self", ".", "encoder", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "modules", ")", ")", ":", "\n", "            ", "for", "j", "in", "modules", "[", "i", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "yield", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.models.linear_classifier.MyModel.get_other_params": [[31, 36], ["range", "len", "modules[].parameters"], "methods", ["None"], ["", "", "", "def", "get_other_params", "(", "self", ")", ":", "\n", "        ", "modules", "=", "[", "self", ".", "fc", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "modules", ")", ")", ":", "\n", "            ", "for", "j", "in", "modules", "[", "i", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "yield", "j", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.njulus_ST.networks.convnet.MyNetwork.__init__": [[13, 20], ["torch.Module.__init__", "torch.Sequential", "convnet.conv_block", "convnet.conv_block", "convnet.conv_block", "convnet.conv_block"], "methods", ["home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__init__", "home.repos.pwc.inspect_result.njulus_ST.networks.convnet.conv_block", "home.repos.pwc.inspect_result.njulus_ST.networks.convnet.conv_block", "home.repos.pwc.inspect_result.njulus_ST.networks.convnet.conv_block", "home.repos.pwc.inspect_result.njulus_ST.networks.convnet.conv_block"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "x_dim", "=", "3", ",", "hid_dim", "=", "64", ",", "z_dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "MyNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "conv_block", "(", "x_dim", ",", "hid_dim", ")", ",", "\n", "conv_block", "(", "hid_dim", ",", "hid_dim", ")", ",", "\n", "conv_block", "(", "hid_dim", ",", "hid_dim", ")", ",", "\n", "conv_block", "(", "hid_dim", ",", "z_dim", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.networks.convnet.MyNetwork.forward": [[22, 27], ["convnet.MyNetwork.encoder", "y.view.view.view", "torch.MaxPool2d", "y.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encoder", "(", "x", ")", "\n", "y", "=", "nn", ".", "MaxPool2d", "(", "5", ")", "(", "x", ")", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "y", "", "", "", ""]], "home.repos.pwc.inspect_result.njulus_ST.networks.convnet.conv_block": [[3, 9], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d"], "function", ["None"], ["def", "conv_block", "(", "in_channels", ",", "out_channels", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.networks.resnet.BasicBlock.__init__": [[13, 31], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "networks.dropblock.DropBlock"], "methods", ["home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__init__", "home.repos.pwc.inspect_result.njulus_ST.networks.resnet.conv3x3", "home.repos.pwc.inspect_result.njulus_ST.networks.resnet.conv3x3", "home.repos.pwc.inspect_result.njulus_ST.networks.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "args", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "drop_rate", "=", "0.0", ",", "flag_drop_block", "=", "False", ",", "block_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "stride", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "num_batches_tracked", "=", "0", "\n", "self", ".", "flag_drop_block", "=", "flag_drop_block", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n", "self", ".", "DropBlock", "=", "DropBlock", "(", "args", ",", "block_size", "=", "self", ".", "block_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.networks.resnet.BasicBlock.forward": [[32, 64], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv3", "resnet.BasicBlock.bn3", "resnet.BasicBlock.relu", "resnet.BasicBlock.maxpool", "resnet.BasicBlock.downsample", "max", "resnet.BasicBlock.DropBlock", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "if", "self", ".", "flag_drop_block", "==", "True", ":", "\n", "                ", "feat_size", "=", "out", ".", "size", "(", ")", "[", "2", "]", "\n", "keep_rate", "=", "max", "(", "1.0", "-", "self", ".", "drop_rate", "/", "(", "20", "*", "2000", ")", "*", "(", "self", ".", "num_batches_tracked", ")", ",", "1.0", "-", "self", ".", "drop_rate", ")", "\n", "gamma", "=", "(", "1", "-", "keep_rate", ")", "/", "self", ".", "block_size", "**", "2", "*", "feat_size", "**", "2", "/", "(", "feat_size", "-", "self", ".", "block_size", "+", "1", ")", "**", "2", "\n", "out", "=", "self", ".", "DropBlock", "(", "out", ",", "gamma", "=", "gamma", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "True", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.networks.resnet.MyNetwork.__init__": [[68, 90], ["torch.Module.__init__", "resnet.MyNetwork._make_layer", "resnet.MyNetwork._make_layer", "resnet.MyNetwork._make_layer", "resnet.MyNetwork._make_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "resnet.MyNetwork.modules", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__init__", "home.repos.pwc.inspect_result.njulus_ST.networks.resnet.MyNetwork._make_layer", "home.repos.pwc.inspect_result.njulus_ST.networks.resnet.MyNetwork._make_layer", "home.repos.pwc.inspect_result.njulus_ST.networks.resnet.MyNetwork._make_layer", "home.repos.pwc.inspect_result.njulus_ST.networks.resnet.MyNetwork._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "block", "=", "BasicBlock", ",", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "True", ",", "drop_rate", "=", "0.1", ",", "block_size", "=", "5", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "3", "\n", "self", ".", "args", "=", "args", "\n", "super", "(", "MyNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "160", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "320", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ",", "flag_drop_block", "=", "True", ",", "block_size", "=", "block_size", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "640", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ",", "flag_drop_block", "=", "True", ",", "block_size", "=", "block_size", ")", "\n", "if", "avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "1", ")", "\n", "", "self", ".", "keep_prob", "=", "keep_prob", "\n", "self", ".", "keep_avg_pool", "=", "avg_pool", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "1", "-", "self", ".", "keep_prob", ",", "inplace", "=", "False", ")", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.networks.resnet.MyNetwork._make_layer": [[91, 105], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "stride", "=", "1", ",", "drop_rate", "=", "0.0", ",", "flag_drop_block", "=", "False", ",", "block_size", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "args", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "drop_rate", ",", "flag_drop_block", ",", "block_size", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.networks.resnet.MyNetwork.forward": [[106, 115], ["resnet.MyNetwork.layer1", "resnet.MyNetwork.layer2", "resnet.MyNetwork.layer3", "resnet.MyNetwork.layer4", "resnet.MyNetwork.view", "resnet.MyNetwork.avgpool", "resnet.MyNetwork.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "self", ".", "keep_avg_pool", ":", "\n", "            ", "y", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "y", "=", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "y", "", "", "", ""]], "home.repos.pwc.inspect_result.njulus_ST.networks.resnet.conv3x3": [[6, 8], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.networks.mlp.MyNetwork.__init__": [[7, 14], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "input_dim", "=", "2", ",", "output_dim", "=", "100", ",", "n_hidden", "=", "100", ")", ":", "\n", "        ", "super", "(", "MyNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "layer1", "=", "nn", ".", "Linear", "(", "input_dim", ",", "n_hidden", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Linear", "(", "n_hidden", ",", "n_hidden", ")", "\n", "self", ".", "layer3", "=", "nn", ".", "Linear", "(", "n_hidden", ",", "n_hidden", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Linear", "(", "n_hidden", ",", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.networks.mlp.MyNetwork.forward": [[15, 27], ["torch.nn.functional.linear", "torch.nn.functional.relu", "torch.nn.functional.linear", "torch.nn.functional.relu", "torch.nn.functional.linear", "torch.nn.functional.relu", "torch.nn.functional.linear", "collections.OrderedDict", "mlp.MyNetwork.named_parameters"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "params", "=", "None", ")", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "OrderedDict", "(", "self", ".", "named_parameters", "(", ")", ")", "\n", "\n", "", "x", "=", "F", ".", "linear", "(", "x", ",", "weight", "=", "params", "[", "'layer1.weight'", "]", ",", "bias", "=", "params", "[", "'layer1.bias'", "]", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "linear", "(", "x", ",", "weight", "=", "params", "[", "'layer2.weight'", "]", ",", "bias", "=", "params", "[", "'layer2.bias'", "]", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "linear", "(", "x", ",", "weight", "=", "params", "[", "'layer3.weight'", "]", ",", "bias", "=", "params", "[", "'layer3.bias'", "]", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "linear", "(", "x", ",", "weight", "=", "params", "[", "'layer4.weight'", "]", ",", "bias", "=", "params", "[", "'layer4.bias'", "]", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.njulus_ST.networks.dropblock.DropBlock.__init__": [[7, 11], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "block_size", ")", ":", "\n", "        ", "super", "(", "DropBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.networks.dropblock.DropBlock.forward": [[12, 28], ["torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "dropblock.DropBlock._compute_block_mask", "dropblock.DropBlock.sum", "mask.cuda.cuda.cuda", "dropblock.DropBlock.size", "dropblock.DropBlock.size", "dropblock.DropBlock.size", "dropblock.DropBlock.size"], "methods", ["home.repos.pwc.inspect_result.njulus_ST.networks.dropblock.DropBlock._compute_block_mask"], ["", "def", "forward", "(", "self", ",", "x", ",", "gamma", ")", ":", "\n", "# shape: (bsize, channels, height, width)", "\n", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "bernoulli", "=", "Bernoulli", "(", "gamma", ")", "\n", "mask", "=", "bernoulli", ".", "sample", "(", "(", "batch_size", ",", "channels", ",", "height", "-", "(", "self", ".", "block_size", "-", "1", ")", ",", "width", "-", "(", "self", ".", "block_size", "-", "1", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "mask", "=", "mask", ".", "cuda", "(", "self", ".", "args", ".", "devices", "[", "0", "]", ")", "\n", "", "block_mask", "=", "self", ".", "_compute_block_mask", "(", "mask", ")", "\n", "countM", "=", "block_mask", ".", "size", "(", ")", "[", "0", "]", "*", "block_mask", ".", "size", "(", ")", "[", "1", "]", "*", "block_mask", ".", "size", "(", ")", "[", "2", "]", "*", "block_mask", ".", "size", "(", ")", "[", "3", "]", "\n", "count_ones", "=", "block_mask", ".", "sum", "(", ")", "\n", "\n", "return", "block_mask", "*", "x", "*", "(", "countM", "/", "count_ones", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.networks.dropblock.DropBlock._compute_block_mask": [[29, 61], ["int", "int", "mask.nonzero", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "offsets.long.long.cuda", "non_zero_idxs.repeat.repeat.repeat", "offsets.long.long.repeat().view", "offsets.long.long.long", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "offsets.long.long.long", "offsets.long.long.repeat", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "", "def", "_compute_block_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "left_padding", "=", "int", "(", "(", "self", ".", "block_size", "-", "1", ")", "/", "2", ")", "\n", "right_padding", "=", "int", "(", "self", ".", "block_size", "/", "2", ")", "\n", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "mask", ".", "shape", "\n", "non_zero_idxs", "=", "mask", ".", "nonzero", "(", ")", "\n", "nr_blocks", "=", "non_zero_idxs", ".", "shape", "[", "0", "]", "\n", "\n", "offsets", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "self", ".", "block_size", ",", "self", ".", "block_size", ")", ".", "reshape", "(", "-", "1", ")", ",", "# - left_padding,", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "repeat", "(", "self", ".", "block_size", ")", ",", "#- left_padding", "\n", "]", "\n", ")", ".", "t", "(", ")", "\n", "offsets", "=", "torch", ".", "cat", "(", "(", "torch", ".", "zeros", "(", "self", ".", "block_size", "**", "2", ",", "2", ")", ".", "long", "(", ")", ",", "offsets", ".", "long", "(", ")", ")", ",", "1", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "offsets", "=", "offsets", ".", "cuda", "(", "self", ".", "args", ".", "devices", "[", "0", "]", ")", "\n", "\n", "", "if", "nr_blocks", ">", "0", ":", "\n", "            ", "non_zero_idxs", "=", "non_zero_idxs", ".", "repeat", "(", "self", ".", "block_size", "**", "2", ",", "1", ")", "\n", "offsets", "=", "offsets", ".", "repeat", "(", "nr_blocks", ",", "1", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "offsets", "=", "offsets", ".", "long", "(", ")", "\n", "\n", "block_idxs", "=", "non_zero_idxs", "+", "offsets", "\n", "#block_idxs += left_padding", "\n", "padded_mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ")", "\n", "padded_mask", "[", "block_idxs", "[", ":", ",", "0", "]", ",", "block_idxs", "[", ":", ",", "1", "]", ",", "block_idxs", "[", ":", ",", "2", "]", ",", "block_idxs", "[", ":", ",", "3", "]", "]", "=", "1.", "\n", "", "else", ":", "\n", "            ", "padded_mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ")", "\n", "\n", "", "block_mask", "=", "1", "-", "padded_mask", "#[:height, :width]", "\n", "return", "block_mask", "", "", "", ""]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.tiered_imagenet.MyDataset.__init__": [[23, 57], ["torch.utils.data.Dataset.__init__", "tiered_imagenet.MyDataset.read_data", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "os.path.join", "os.path.join", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "os.path.join", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "os.path.join", "os.path.join", "print"], "methods", ["home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__init__", "home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MyDataset.read_data"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ",", "flag_mode", ")", ":", "\n", "        ", "super", "(", "MyDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "flag_mode", "=", "flag_mode", "\n", "\n", "if", "flag_mode", "==", "'train'", ":", "\n", "            ", "self", ".", "csv_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'split/train.csv'", ")", "\n", "", "elif", "flag_mode", "==", "'validate'", ":", "\n", "            ", "self", ".", "csv_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'split/val.csv'", ")", "\n", "", "elif", "flag_mode", "==", "'test'", ":", "\n", "            ", "self", ".", "csv_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'split/test.csv'", ")", "\n", "", "elif", "flag_mode", "==", "'finetune'", ":", "\n", "            ", "self", ".", "csv_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'split/train.csv'", ")", "\n", "", "elif", "flag_mode", "==", "'auxiliary'", ":", "\n", "            ", "self", ".", "csv_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'split/aux_val.csv'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Error: flag_mode %s is not supported.'", "%", "(", "flag_mode", ")", ")", "\n", "\n", "", "self", ".", "data_all", ",", "self", ".", "label_all", ",", "self", ".", "name2label", ",", "self", ".", "label2name", ",", "self", ".", "label2indices", "=", "self", ".", "read_data", "(", ")", "\n", "\n", "self", ".", "transform_simple", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "92", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "84", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ")", "\n", "]", ")", "\n", "self", ".", "transform_augment", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "84", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.tiered_imagenet.MyDataset.read_data": [[59, 89], ["line.split", "label2indices[].append", "data_all.append", "label_all.append", "x.strip", "name2label.keys", "open().readlines", "open"], "methods", ["None"], ["", "def", "read_data", "(", "self", ")", ":", "\n", "        ", "lines", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "self", ".", "csv_path", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "[", "1", ":", "]", "\n", "data_all", "=", "[", "]", "\n", "label_all", "=", "[", "]", "\n", "name2label", "=", "{", "}", "\n", "label2name", "=", "{", "}", "\n", "label2indices", "=", "{", "}", "\n", "current_label", "=", "0", "\n", "\n", "cnt", "=", "0", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "file_name", ",", "name", "=", "line", ".", "split", "(", "','", ")", "\n", "if", "self", ".", "flag_mode", "==", "'auxiliary'", ":", "\n", "                ", "file_path", "=", "self", ".", "data_path", "+", "'images_aux/'", "+", "file_name", "\n", "", "else", ":", "\n", "                ", "file_path", "=", "self", ".", "data_path", "+", "'images/'", "+", "file_name", "\n", "", "if", "name", "not", "in", "name2label", ".", "keys", "(", ")", ":", "\n", "                ", "name2label", "[", "name", "]", "=", "current_label", "\n", "label2name", "[", "current_label", "]", "=", "name", "\n", "label2indices", "[", "current_label", "]", "=", "[", "]", "\n", "current_label", "+=", "1", "\n", "\n", "", "label2indices", "[", "name2label", "[", "name", "]", "]", ".", "append", "(", "cnt", ")", "\n", "\n", "data_all", ".", "append", "(", "file_path", ")", "\n", "label_all", ".", "append", "(", "name2label", "[", "name", "]", ")", "\n", "\n", "cnt", "+=", "1", "\n", "\n", "", "return", "data_all", ",", "label_all", ",", "name2label", ",", "label2name", ",", "label2indices", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.tiered_imagenet.MyDataset.__len__": [[90, 92], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "label_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.tiered_imagenet.MyDataset.__getitem__": [[93, 98], ["PIL.Image.open().convert", "tiered_imagenet.MyDataset.transform_simple", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "label", "=", "self", ".", "data_all", "[", "index", "]", ",", "self", ".", "label_all", "[", "index", "]", "\n", "data", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image", "=", "self", ".", "transform_simple", "(", "data", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.tiered_imagenet.MySampler.__init__": [[103, 121], ["numpy.array", "range", "numpy.argwhere().reshape", "torch.from_numpy", "tiered_imagenet.MySampler.class2indexes.append", "open", "pickle.load", "numpy.max", "numpy.argwhere"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "label_all", ",", "n_episodes", ",", "N", ",", "S", ",", "flag_random_task", ",", "task_list_file_path", ")", ":", "\n", "        ", "self", ".", "label_all", "=", "label_all", "\n", "self", ".", "n_episodes", "=", "n_episodes", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "S", "=", "S", "\n", "self", ".", "flag_random_task", "=", "flag_random_task", "\n", "self", ".", "task_list_file_path", "=", "task_list_file_path", "\n", "\n", "if", "self", ".", "flag_random_task", ":", "\n", "            ", "label_all", "=", "np", ".", "array", "(", "label_all", ")", "\n", "self", ".", "class2indexes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "np", ".", "max", "(", "label_all", ")", "+", "1", ")", ":", "\n", "                ", "indexes", "=", "np", ".", "argwhere", "(", "label_all", "==", "i", ")", ".", "reshape", "(", "-", "1", ")", "\n", "indexes", "=", "torch", ".", "from_numpy", "(", "indexes", ")", "\n", "self", ".", "class2indexes", ".", "append", "(", "indexes", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "self", ".", "task_list_file_path", ",", "'rb'", ")", "as", "fp", ":", "\n", "                ", "self", ".", "task_list", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.tiered_imagenet.MySampler.__len__": [[122, 127], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "flag_random_task", ":", "\n", "            ", "return", "self", ".", "n_episodes", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "task_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.tiered_imagenet.MySampler.__iter__": [[128, 144], ["range", "range", "torch.stack().t().reshape", "len", "torch.randperm", "torch.stack().t().reshape.append", "len", "torch.randperm", "torch.stack().t", "len", "torch.stack"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "flag_random_task", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_episodes", ")", ":", "\n", "                ", "task", "=", "[", "]", "\n", "classes_needed", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "class2indexes", ")", ")", "[", ":", "self", ".", "N", "]", "\n", "for", "c", "in", "classes_needed", ":", "\n", "                    ", "indexes", "=", "self", ".", "class2indexes", "[", "c", "]", "\n", "pos", "=", "torch", ".", "randperm", "(", "len", "(", "indexes", ")", ")", "[", ":", "self", ".", "S", "]", "\n", "task", ".", "append", "(", "indexes", "[", "pos", "]", ")", "\n", "# task is a Tensor of shape (N, S) before transpose", "\n", "# here transpose is important  ", "\n", "", "task", "=", "torch", ".", "stack", "(", "task", ")", ".", "t", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "yield", "task", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "task_list", ")", ")", ":", "\n", "                ", "yield", "self", ".", "task_list", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.tiered_imagenet.generate_data_loader": [[147, 153], ["tiered_imagenet.MyDataset", "tiered_imagenet.MySampler", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "", "", "def", "generate_data_loader", "(", "data_path", ",", "flag_mode", ",", "n_episodes", ",", "N", ",", "S", ",", "flag_random_task", ",", "task_list_file_path", ")", ":", "\n", "    ", "my_dataset", "=", "MyDataset", "(", "data_path", ",", "flag_mode", ")", "\n", "my_sampler", "=", "MySampler", "(", "my_dataset", ".", "label_all", ",", "n_episodes", ",", "N", ",", "S", ",", "flag_random_task", ",", "task_list_file_path", ")", "\n", "my_data_loader", "=", "DataLoader", "(", "my_dataset", ",", "batch_sampler", "=", "my_sampler", ")", "\n", "\n", "return", "my_data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MyDataset.__init__": [[23, 57], ["torch.utils.data.Dataset.__init__", "mini_imagenet.MyDataset.read_data", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "os.path.join", "os.path.join", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "os.path.join", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "os.path.join", "os.path.join", "print"], "methods", ["home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__init__", "home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MyDataset.read_data"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ",", "flag_mode", ")", ":", "\n", "        ", "super", "(", "MyDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "flag_mode", "=", "flag_mode", "\n", "\n", "if", "flag_mode", "==", "'train'", ":", "\n", "            ", "self", ".", "csv_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'split/train.csv'", ")", "\n", "", "elif", "flag_mode", "==", "'validate'", ":", "\n", "            ", "self", ".", "csv_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'split/val.csv'", ")", "\n", "", "elif", "flag_mode", "==", "'test'", ":", "\n", "            ", "self", ".", "csv_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'split/test.csv'", ")", "\n", "", "elif", "flag_mode", "==", "'finetune'", ":", "\n", "            ", "self", ".", "csv_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'split/train.csv'", ")", "\n", "", "elif", "flag_mode", "==", "'auxiliary'", ":", "\n", "            ", "self", ".", "csv_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'split/aux_val.csv'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Error: flag_mode %s is not supported.'", "%", "(", "flag_mode", ")", ")", "\n", "\n", "", "self", ".", "data_all", ",", "self", ".", "label_all", ",", "self", ".", "name2label", ",", "self", ".", "label2name", ",", "self", ".", "label2indices", "=", "self", ".", "read_data", "(", ")", "\n", "\n", "self", ".", "transform_simple", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "92", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "84", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ")", "\n", "]", ")", "\n", "self", ".", "transform_augment", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "84", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MyDataset.read_data": [[59, 89], ["line.split", "label2indices[].append", "data_all.append", "label_all.append", "x.strip", "name2label.keys", "open().readlines", "open"], "methods", ["None"], ["", "def", "read_data", "(", "self", ")", ":", "\n", "        ", "lines", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "self", ".", "csv_path", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "[", "1", ":", "]", "\n", "data_all", "=", "[", "]", "\n", "label_all", "=", "[", "]", "\n", "name2label", "=", "{", "}", "\n", "label2name", "=", "{", "}", "\n", "label2indices", "=", "{", "}", "\n", "current_label", "=", "0", "\n", "\n", "cnt", "=", "0", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "file_name", ",", "name", "=", "line", ".", "split", "(", "','", ")", "\n", "if", "self", ".", "flag_mode", "==", "'auxiliary'", ":", "\n", "                ", "file_path", "=", "self", ".", "data_path", "+", "'images_aux/'", "+", "file_name", "\n", "", "else", ":", "\n", "                ", "file_path", "=", "self", ".", "data_path", "+", "'images/'", "+", "file_name", "\n", "", "if", "name", "not", "in", "name2label", ".", "keys", "(", ")", ":", "\n", "                ", "name2label", "[", "name", "]", "=", "current_label", "\n", "label2name", "[", "current_label", "]", "=", "name", "\n", "label2indices", "[", "current_label", "]", "=", "[", "]", "\n", "current_label", "+=", "1", "\n", "\n", "", "label2indices", "[", "name2label", "[", "name", "]", "]", ".", "append", "(", "cnt", ")", "\n", "\n", "data_all", ".", "append", "(", "file_path", ")", "\n", "label_all", ".", "append", "(", "name2label", "[", "name", "]", ")", "\n", "\n", "cnt", "+=", "1", "\n", "\n", "", "return", "data_all", ",", "label_all", ",", "name2label", ",", "label2name", ",", "label2indices", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MyDataset.__len__": [[90, 92], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "label_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MyDataset.__getitem__": [[93, 98], ["PIL.Image.open().convert", "mini_imagenet.MyDataset.transform_simple", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "label", "=", "self", ".", "data_all", "[", "index", "]", ",", "self", ".", "label_all", "[", "index", "]", "\n", "data", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image", "=", "self", ".", "transform_simple", "(", "data", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__init__": [[103, 121], ["numpy.array", "range", "numpy.argwhere().reshape", "torch.from_numpy", "mini_imagenet.MySampler.class2indexes.append", "open", "pickle.load", "numpy.max", "numpy.argwhere"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "label_all", ",", "n_episodes", ",", "N", ",", "S", ",", "flag_random_task", ",", "task_list_file_path", ")", ":", "\n", "        ", "self", ".", "label_all", "=", "label_all", "\n", "self", ".", "n_episodes", "=", "n_episodes", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "S", "=", "S", "\n", "self", ".", "flag_random_task", "=", "flag_random_task", "\n", "self", ".", "task_list_file_path", "=", "task_list_file_path", "\n", "\n", "if", "self", ".", "flag_random_task", ":", "\n", "            ", "label_all", "=", "np", ".", "array", "(", "label_all", ")", "\n", "self", ".", "class2indexes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "np", ".", "max", "(", "label_all", ")", "+", "1", ")", ":", "\n", "                ", "indexes", "=", "np", ".", "argwhere", "(", "label_all", "==", "i", ")", ".", "reshape", "(", "-", "1", ")", "\n", "indexes", "=", "torch", ".", "from_numpy", "(", "indexes", ")", "\n", "self", ".", "class2indexes", ".", "append", "(", "indexes", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "self", ".", "task_list_file_path", ",", "'rb'", ")", "as", "fp", ":", "\n", "                ", "self", ".", "task_list", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__len__": [[122, 127], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "flag_random_task", ":", "\n", "            ", "return", "self", ".", "n_episodes", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "task_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.MySampler.__iter__": [[128, 144], ["range", "range", "torch.stack().t().reshape", "len", "torch.randperm", "torch.stack().t().reshape.append", "len", "torch.randperm", "torch.stack().t", "len", "torch.stack"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "flag_random_task", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_episodes", ")", ":", "\n", "                ", "task", "=", "[", "]", "\n", "classes_needed", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "class2indexes", ")", ")", "[", ":", "self", ".", "N", "]", "\n", "for", "c", "in", "classes_needed", ":", "\n", "                    ", "indexes", "=", "self", ".", "class2indexes", "[", "c", "]", "\n", "pos", "=", "torch", ".", "randperm", "(", "len", "(", "indexes", ")", ")", "[", ":", "self", ".", "S", "]", "\n", "task", ".", "append", "(", "indexes", "[", "pos", "]", ")", "\n", "# task is a Tensor of shape (N, S) before transpose", "\n", "# here transpose is important  ", "\n", "", "task", "=", "torch", ".", "stack", "(", "task", ")", ".", "t", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "yield", "task", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "task_list", ")", ")", ":", "\n", "                ", "yield", "self", ".", "task_list", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.njulus_ST.dataloaders.mini_imagenet.generate_data_loader": [[147, 153], ["mini_imagenet.MyDataset", "mini_imagenet.MySampler", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "", "", "def", "generate_data_loader", "(", "data_path", ",", "flag_mode", ",", "n_episodes", ",", "N", ",", "S", ",", "flag_random_task", ",", "task_list_file_path", ")", ":", "\n", "    ", "my_dataset", "=", "MyDataset", "(", "data_path", ",", "flag_mode", ")", "\n", "my_sampler", "=", "MySampler", "(", "my_dataset", ".", "label_all", ",", "n_episodes", ",", "N", ",", "S", ",", "flag_random_task", ",", "task_list_file_path", ")", "\n", "my_data_loader", "=", "DataLoader", "(", "my_dataset", ",", "batch_sampler", "=", "my_sampler", ")", "\n", "\n", "return", "my_data_loader", "\n", "\n"]]}