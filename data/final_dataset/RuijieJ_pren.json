{"home.repos.pwc.inspect_result.RuijieJ_pren.None.train.Trainer.__init__": [[17, 53], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "Utils.utils.strLabelConverter", "os.path.join", "os.makedirs", "os.path.join", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "train.Trainer.log", "open", "f.readline().strip", "time.strftime", "model.to", "Utils.utils.ScheduledOptim", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "Nets.model.Model", "train.Trainer.model.load_state_dict", "train.Trainer.model.to", "Utils.utils.ScheduledOptim", "train.Trainer.optimizer._optimizer.load_state_dict", "pprint.pformat", "time.localtime", "torch.Adadelta", "torch.Adadelta", "torch.Adadelta", "torch.Adadelta", "torch.Adadelta", "torch.Adadelta", "f.readline", "filter", "filter", "train.Trainer.model.parameters", "train.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.None.train.Trainer.log"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "trainloader", ")", ":", "\n", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "configs", ".", "device", ")", "\n", "\n", "self", ".", "trainloader", "=", "trainloader", "\n", "self", ".", "configs", "=", "configs", "\n", "\n", "with", "open", "(", "self", ".", "configs", ".", "alphabet", ")", "as", "f", ":", "\n", "            ", "alphabet", "=", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "", "self", ".", "converter", "=", "strLabelConverter", "(", "alphabet", ")", "\n", "\n", "self", ".", "savedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "configs", ".", "savedir", ",", "time", ".", "strftime", "(", "'%Y%m%d-%H:%M:%S'", ",", "time", ".", "localtime", "(", ")", ")", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "savedir", ")", "\n", "self", ".", "logfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "savedir", ",", "'log.txt'", ")", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ",", "ignore_index", "=", "0", ")", "# ignore pad", "\n", "\n", "if", "not", "self", ".", "configs", ".", "continue_train", ":", "\n", "            ", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "optimizer", "=", "ScheduledOptim", "(", "optim", ".", "Adadelta", "(", "filter", "(", "lambda", "x", ":", "x", ".", "requires_grad", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "self", ".", "configs", ".", "lr", ",", "weight_decay", "=", "self", ".", "configs", ".", "weight_decay", ")", ",", "\n", "init_lr", "=", "self", ".", "configs", ".", "lr", ",", "milestones", "=", "self", ".", "configs", ".", "lr_milestones", ",", "gammas", "=", "self", ".", "configs", ".", "lr_gammas", ")", "\n", "\n", "", "else", ":", "\n", "            ", "ckpt", "=", "torch", ".", "load", "(", "self", ".", "configs", ".", "continue_path", ")", "\n", "self", ".", "model", "=", "Model", "(", "ckpt", "[", "'model_config'", "]", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer", "=", "ScheduledOptim", "(", "optim", ".", "Adadelta", "(", "filter", "(", "lambda", "x", ":", "x", ".", "requires_grad", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "self", ".", "configs", ".", "lr", ",", "weight_decay", "=", "self", ".", "configs", ".", "weight_decay", ")", ",", "\n", "init_lr", "=", "self", ".", "configs", ".", "lr", ",", "milestones", "=", "self", ".", "configs", ".", "lr_milestones", ",", "gammas", "=", "self", ".", "configs", ".", "lr_gammas", ")", "\n", "self", ".", "optimizer", ".", "_optimizer", ".", "load_state_dict", "(", "ckpt", "[", "'optimizer'", "]", ")", "\n", "self", ".", "configs", ".", "net", "=", "ckpt", "[", "'model_config'", "]", "\n", "\n", "", "self", ".", "log", "(", "pprint", ".", "pformat", "(", "self", ".", "configs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.None.train.Trainer.savemodel": [[55, 61], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train.Trainer.log", "train.Trainer.model.state_dict", "train.Trainer.optimizer._optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.None.train.Trainer.log"], ["", "def", "savemodel", "(", "self", ",", "savename", ")", ":", "\n", "        ", "torch", ".", "save", "(", "{", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "_optimizer", ".", "state_dict", "(", ")", ",", "\n", "'model_config'", ":", "self", ".", "configs", ".", "net", "}", ",", "\n", "savename", ")", "\n", "self", ".", "log", "(", "'-'", "*", "50", "+", "'\\n[Info] Model saved as {}\\n'", ".", "format", "(", "savename", ")", "+", "'-'", "*", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.None.train.Trainer.train": [[63, 73], ["range", "train.Trainer.log", "train.Trainer.train_epoch", "train.Trainer.log", "os.path.join", "train.Trainer.savemodel"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.None.train.Trainer.log", "home.repos.pwc.inspect_result.RuijieJ_pren.None.train.Trainer.train_epoch", "home.repos.pwc.inspect_result.RuijieJ_pren.None.train.Trainer.log", "home.repos.pwc.inspect_result.RuijieJ_pren.None.train.Trainer.savemodel"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "for", "epoch", "in", "range", "(", "self", ".", "configs", ".", "n_epochs", ")", ":", "\n", "            ", "self", ".", "log", "(", "'='", "*", "25", "+", "'Training Epoch {} Start'", ".", "format", "(", "epoch", "+", "1", ")", "+", "'='", "*", "25", ")", "\n", "loss", "=", "self", ".", "train_epoch", "(", "epoch", ")", "\n", "self", ".", "log", "(", "'Epoch [{}/{}]  train loss = {:.3f}'", "\n", ".", "format", "(", "epoch", "+", "1", ",", "self", ".", "configs", ".", "n_epochs", ",", "loss", ")", ")", "\n", "\n", "savename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "savedir", ",", "'m_epoch{}.pth'", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "self", ".", "savemodel", "(", "savename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.None.train.Trainer.train_epoch": [[75, 118], ["train.Trainer.optimizer.update_lr", "train.Trainer.model.train", "ProgressBar().start", "enumerate", "ProgressBar().start.finish", "Percentage", "Bar", "Timer", "ETA", "ims.to.to.to", "train.Trainer.converter.encode().to", "train.Trainer.optimizer.zero_grad", "train.Trainer.model", "train.Trainer.criterion", "train.Trainer.backward", "train.Trainer.optimizer.step", "train.Trainer.item", "ProgressBar().start.update", "len", "ProgressBar", "train.Trainer.view", "train.Trainer.view", "logits[].detach().argmax", "list", "train.Trainer.converter.decode", "train.Trainer.log", "train.Trainer.converter.encode", "train.Trainer.size", "train.Trainer.cpu().numpy", "logits[].detach", "len", "train.Trainer.item", "len", "train.Trainer.cpu", "train.Trainer.index"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.update_lr", "home.repos.pwc.inspect_result.RuijieJ_pren.None.train.Trainer.train", "home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.SwishImplementation.backward", "home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.step", "home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.strLabelConverter.decode", "home.repos.pwc.inspect_result.RuijieJ_pren.None.train.Trainer.log", "home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.strLabelConverter.encode"], ["", "", "def", "train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "\n", "        ", "self", ".", "optimizer", ".", "update_lr", "(", "epoch", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "total_loss", "=", "0.", "\n", "\n", "widgets", "=", "[", "'Progress: '", ",", "Percentage", "(", ")", ",", "' '", ",", "Bar", "(", "'#'", ")", ",", "' '", ",", "Timer", "(", ")", ",", "' '", ",", "ETA", "(", ")", "]", "\n", "progress", "=", "ProgressBar", "(", "widgets", "=", "widgets", ",", "maxval", "=", "10", "*", "len", "(", "self", ".", "trainloader", ")", ")", ".", "start", "(", ")", "\n", "\n", "for", "step", ",", "(", "ims", ",", "texts", ",", "*", "_", ")", "in", "enumerate", "(", "self", ".", "trainloader", ")", ":", "\n", "\n", "# prepare data", "\n", "            ", "ims", "=", "ims", ".", "to", "(", "self", ".", "device", ")", "# [B, 3, 64, 256]", "\n", "targets", "=", "self", ".", "converter", ".", "encode", "(", "texts", ")", ".", "to", "(", "self", ".", "device", ")", "# [B, L]", "\n", "\n", "# forward", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "logits", "=", "self", ".", "model", "(", "ims", ")", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", ",", "targets", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "step", "%", "self", ".", "configs", ".", "displayInterval", "==", "0", ":", "\n", "                ", "pred", "=", "logits", "[", "0", "]", ".", "detach", "(", ")", ".", "argmax", "(", "1", ")", "\n", "pred", "=", "list", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "1", "in", "pred", ":", "\n", "                    ", "pred", "=", "pred", "[", ":", "pred", ".", "index", "(", "1", ")", "]", "\n", "", "pred", "=", "self", ".", "converter", ".", "decode", "(", "pred", ")", "\n", "\n", "self", ".", "log", "(", "'[{}] [{}/{}]  loss = {:.3f}  {} ==> {}'", "\n", ".", "format", "(", "epoch", "+", "1", ",", "step", ",", "len", "(", "self", ".", "trainloader", ")", ",", "\n", "loss", ".", "item", "(", ")", ",", "texts", "[", "0", "]", ",", "pred", ")", ")", "\n", "\n", "", "progress", ".", "update", "(", "10", "*", "step", "+", "1", ")", "\n", "step", "+=", "1", "\n", "", "progress", ".", "finish", "(", ")", "\n", "\n", "return", "total_loss", "/", "len", "(", "self", ".", "trainloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.None.train.Trainer.log": [[120, 127], ["print", "isinstance", "str", "open", "f.write"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "results", ",", "str", ")", ":", "\n", "            ", "results", "=", "str", "(", "results", ")", "\n", "\n", "", "print", "(", "results", ")", "\n", "with", "open", "(", "self", ".", "logfile", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "results", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.None.train.main": [[129, 145], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "data.dataset.TrainLoader", "print", "Nets.model.Model", "print", "train.Trainer", "Trainer.train", "sum", "p.numel", "Nets.model.Model.parameters"], "function", ["home.repos.pwc.inspect_result.RuijieJ_pren.data.dataset.TrainLoader", "home.repos.pwc.inspect_result.RuijieJ_pren.None.train.Trainer.train"], ["", "", "", "def", "main", "(", ")", ":", "\n", "# ---- set random seed", "\n", "    ", "random", ".", "seed", "(", "configs", ".", "random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "configs", ".", "random_seed", ")", "\n", "torch", ".", "manual_seed", "(", "configs", ".", "random_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "configs", ".", "random_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "trainloader", "=", "TrainLoader", "(", "configs", ")", "\n", "print", "(", "'load train data from {}'", ".", "format", "(", "configs", ".", "train_list", ")", ")", "\n", "\n", "model", "=", "Model", "(", "configs", ".", "net", ")", "\n", "print", "(", "'# Model Params = {}'", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", ")", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "model", ",", "trainloader", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.None.test.Tester.__init__": [[12, 24], ["torch.device", "model.to", "test.Tester.model.eval", "Utils.utils.strLabelConverter", "open", "f.readline().strip", "f.readline"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "testloader", ")", ":", "\n", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "configs", ".", "cuda", "else", "'cpu'", ")", "\n", "\n", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "testloader", "=", "testloader", "\n", "\n", "with", "open", "(", "configs", ".", "alphabet", ")", "as", "f", ":", "\n", "            ", "alphabet", "=", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "", "self", ".", "converter", "=", "strLabelConverter", "(", "alphabet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.None.test.Tester.vert_val": [[26, 94], ["ProgressBar().start", "Percentage", "Bar", "Timer", "ETA", "torch.no_grad", "enumerate", "ProgressBar().start.finish", "print", "print", "ProgressBar", "ims.to.to.to", "test.Tester.model", "test.Tester.converter.decode", "list.replace", "ProgressBar().start.update", "ims_clock.to.to.to", "ims_counter.to.to.to", "test.Tester.model", "test.Tester.model", "logits[].log_softmax().max", "list", "logits_clock[].log_softmax().max", "list", "logits_counter[].log_softmax().max", "list", "scores.argmax", "logits[].argmax", "list", "print", "list.cpu().numpy", "list.cpu().numpy", "list.cpu().numpy", "numpy.ones", "score.mean", "score_clock.mean", "score_counter.mean", "list.cpu().numpy", "len", "logits[].log_softmax", "logits_clock[].log_softmax", "logits_counter[].log_softmax", "list.cpu", "list.cpu", "list.cpu", "list.index", "list.index", "list.index", "list.index", "list.cpu", "list.index", "list.index", "list.index"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.strLabelConverter.decode"], ["", "def", "vert_val", "(", "self", ")", ":", "\n", "        ", "widgets", "=", "[", "'Progress: '", ",", "Percentage", "(", ")", ",", "' '", ",", "Bar", "(", "'#'", ")", ",", "' '", ",", "Timer", "(", ")", ",", "' '", ",", "ETA", "(", ")", "]", "\n", "progress", "=", "ProgressBar", "(", "widgets", "=", "widgets", ",", "maxval", "=", "10", "*", "len", "(", "self", ".", "testloader", ")", ")", ".", "start", "(", ")", "\n", "\n", "n_correct", "=", "0.", "\n", "n_ims", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "for", "step", ",", "(", "ims", ",", "texts", ",", "ims_clock", ",", "ims_counter", ",", "is_vert", ",", "imgpath", ")", "in", "enumerate", "(", "self", ".", "testloader", ")", ":", "\n", "\n", "                ", "ims", "=", "ims", ".", "to", "(", "self", ".", "device", ")", "\n", "logits", "=", "self", ".", "model", "(", "ims", ")", "# [1, L, n_class]", "\n", "\n", "if", "is_vert", "[", "0", "]", ":", "\n", "                    ", "ims_clock", "=", "ims_clock", ".", "to", "(", "self", ".", "device", ")", "\n", "ims_counter", "=", "ims_counter", ".", "to", "(", "self", ".", "device", ")", "\n", "logits_clock", "=", "self", ".", "model", "(", "ims_clock", ")", "\n", "logits_counter", "=", "self", ".", "model", "(", "ims_counter", ")", "\n", "\n", "score", ",", "pred", "=", "logits", "[", "0", "]", ".", "log_softmax", "(", "1", ")", ".", "max", "(", "1", ")", "# [L]", "\n", "pred", "=", "list", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "score_clock", ",", "pred_clock", "=", "logits_clock", "[", "0", "]", ".", "log_softmax", "(", "1", ")", ".", "max", "(", "1", ")", "\n", "pred_clock", "=", "list", "(", "pred_clock", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "score_counter", ",", "pred_counter", "=", "logits_counter", "[", "0", "]", ".", "log_softmax", "(", "1", ")", ".", "max", "(", "1", ")", "\n", "pred_counter", "=", "list", "(", "pred_counter", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "scores", "=", "np", ".", "ones", "(", "3", ")", "*", "-", "np", ".", "inf", "\n", "\n", "if", "1", "in", "pred", ":", "\n", "                        ", "score", "=", "score", "[", ":", "pred", ".", "index", "(", "1", ")", "]", "\n", "scores", "[", "0", "]", "=", "score", ".", "mean", "(", ")", "\n", "", "if", "1", "in", "pred_clock", ":", "\n", "                        ", "score_clock", "=", "score_clock", "[", ":", "pred_clock", ".", "index", "(", "1", ")", "]", "\n", "scores", "[", "1", "]", "=", "score_clock", ".", "mean", "(", ")", "\n", "", "if", "1", "in", "pred_counter", ":", "\n", "                        ", "score_counter", "=", "score_counter", "[", ":", "pred_counter", ".", "index", "(", "1", ")", "]", "\n", "scores", "[", "2", "]", "=", "score_counter", ".", "mean", "(", ")", "\n", "\n", "", "c", "=", "scores", ".", "argmax", "(", ")", "\n", "if", "c", "==", "0", ":", "\n", "                        ", "pred", "=", "pred", "[", ":", "pred", ".", "index", "(", "1", ")", "]", "\n", "", "elif", "c", "==", "1", ":", "\n", "                        ", "pred", "=", "pred_clock", "[", ":", "pred_clock", ".", "index", "(", "1", ")", "]", "\n", "", "else", ":", "\n", "                        ", "pred", "=", "pred_counter", "[", ":", "pred_counter", ".", "index", "(", "1", ")", "]", "\n", "\n", "", "", "else", ":", "\n", "                    ", "pred", "=", "logits", "[", "0", "]", ".", "argmax", "(", "1", ")", "\n", "pred", "=", "list", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "1", "in", "pred", ":", "\n", "                        ", "pred", "=", "pred", "[", ":", "pred", ".", "index", "(", "1", ")", "]", "\n", "\n", "", "", "pred", "=", "self", ".", "converter", ".", "decode", "(", "pred", ")", "\n", "pred", "=", "pred", ".", "replace", "(", "'<unk>'", ",", "''", ")", "\n", "gt", "=", "texts", "[", "0", "]", "\n", "n_correct", "+=", "(", "pred", "==", "gt", ")", "\n", "n_ims", "+=", "1", "\n", "\n", "if", "configs", ".", "display", ":", "\n", "                    ", "print", "(", "'{} ==> {}  {}'", "\n", ".", "format", "(", "gt", ",", "pred", ",", "''", "if", "pred", "==", "gt", "else", "'error'", ")", ")", "\n", "\n", "", "progress", ".", "update", "(", "10", "*", "step", "+", "1", ")", "\n", "", "progress", ".", "finish", "(", ")", "\n", "\n", "print", "(", "'-'", "*", "50", ")", "\n", "print", "(", "'Acc_word = {:.3f}%'", ".", "format", "(", "100", "*", "n_correct", "/", "n_ims", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.None.test.Tester.val": [[96, 130], ["ProgressBar().start", "test.Tester.model.eval", "print", "print", "Percentage", "Bar", "Timer", "ETA", "torch.no_grad", "enumerate", "ProgressBar().start.finish", "ProgressBar", "ims.to.to.to", "test.Tester.model", "test.Tester.argmax", "zip", "ProgressBar().start.update", "list", "test.Tester.converter.decode", "pred.replace.replace.replace", "pred.replace.replace.cpu().numpy", "print", "len", "pred.replace.replace.cpu", "pred.replace.replace.index"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.strLabelConverter.decode"], ["", "", "def", "val", "(", "self", ")", ":", "\n", "        ", "widgets", "=", "[", "'Progress: '", ",", "Percentage", "(", ")", ",", "' '", ",", "Bar", "(", "'#'", ")", ",", "' '", ",", "Timer", "(", ")", ",", "' '", ",", "ETA", "(", ")", "]", "\n", "progress", "=", "ProgressBar", "(", "widgets", "=", "widgets", ",", "maxval", "=", "10", "*", "len", "(", "self", ".", "testloader", ")", ")", ".", "start", "(", ")", "\n", "\n", "n_correct", "=", "0.", "\n", "n_ims", "=", "0", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "for", "step", ",", "(", "ims", ",", "texts", ",", "*", "_", ")", "in", "enumerate", "(", "self", ".", "testloader", ")", ":", "\n", "\n", "                ", "ims", "=", "ims", ".", "to", "(", "self", ".", "device", ")", "\n", "logits", "=", "self", ".", "model", "(", "ims", ")", "# [B, L, n_class]", "\n", "preds", "=", "logits", ".", "argmax", "(", "2", ")", "# [B, L]", "\n", "\n", "for", "pred", ",", "gt", "in", "zip", "(", "preds", ",", "texts", ")", ":", "\n", "                    ", "pred", "=", "list", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "1", "in", "pred", ":", "\n", "                        ", "pred", "=", "pred", "[", ":", "pred", ".", "index", "(", "1", ")", "]", "\n", "", "pred", "=", "self", ".", "converter", ".", "decode", "(", "pred", ")", "\n", "pred", "=", "pred", ".", "replace", "(", "'<unk>'", ",", "''", ")", "\n", "n_correct", "+=", "(", "pred", "==", "gt", ")", "\n", "n_ims", "+=", "1", "\n", "\n", "if", "configs", ".", "display", ":", "\n", "                        ", "print", "(", "'{} ==> {}  {}'", "\n", ".", "format", "(", "gt", ",", "pred", ",", "''", "if", "pred", "==", "gt", "else", "'error'", ")", ")", "\n", "\n", "", "", "progress", ".", "update", "(", "10", "*", "step", "+", "1", ")", "\n", "", "progress", ".", "finish", "(", ")", "\n", "\n", "", "print", "(", "'-'", "*", "50", ")", "\n", "print", "(", "'Acc_word = {:.3f}%'", ".", "format", "(", "100", "*", "n_correct", "/", "n_ims", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.None.test.main": [[132, 150], ["data.dataset.TestLoader", "print", "torch.load", "Nets.model.Model", "Nets.model.Model.load_state_dict", "print", "print", "test.Tester", "test.Tester.vert_val", "test.Tester.val", "sum", "p.numel", "Nets.model.Model.parameters"], "function", ["home.repos.pwc.inspect_result.RuijieJ_pren.data.dataset.TestLoader", "home.repos.pwc.inspect_result.RuijieJ_pren.None.test.Tester.vert_val", "home.repos.pwc.inspect_result.RuijieJ_pren.None.test.Tester.val"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "testloader", "=", "TestLoader", "(", "configs", ")", "\n", "print", "(", "'[Info] Load data from {}'", ".", "format", "(", "configs", ".", "val_list", ")", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "configs", ".", "model_path", ")", "\n", "\n", "model", "=", "Model", "(", "checkpoint", "[", "'model_config'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "'[Info] Load model from {}'", ".", "format", "(", "configs", ".", "model_path", ")", ")", "\n", "\n", "print", "(", "'# Model Params = {}'", ".", "format", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", ")", ")", "\n", "\n", "tester", "=", "Tester", "(", "model", ",", "testloader", ")", "\n", "if", "configs", ".", "vert_test", ":", "\n", "        ", "tester", ".", "vert_val", "(", ")", "\n", "", "else", ":", "\n", "        ", "tester", ".", "val", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.None.recog.Recognizer.__init__": [[44, 54], ["torch.device", "model.to", "recog.Recognizer.model.eval", "Utils.utils.strLabelConverter", "open", "f.readline().strip", "f.readline"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "configs", ".", "cuda", "else", "'cpu'", ")", "\n", "\n", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "with", "open", "(", "configs", ".", "alphabet", ")", "as", "f", ":", "\n", "            ", "alphabet", "=", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "", "self", ".", "converter", "=", "strLabelConverter", "(", "alphabet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.None.recog.Recognizer.recog": [[55, 104], ["torch.no_grad", "recog.imread", "x.to.to.to", "recog.Recognizer.model", "recog.Recognizer.converter.decode().replace", "x_clock.to.to.to", "x_counter.to.to.to", "recog.Recognizer.model", "recog.Recognizer.model", "logits[].log_softmax().max", "list", "logits_clock[].log_softmax().max", "list", "logits_counter[].log_softmax().max", "list", "scores.argmax", "logits[].argmax", "list", "list.cpu().numpy", "list.cpu().numpy", "list.cpu().numpy", "numpy.ones", "score.mean", "score_clock.mean", "score_counter.mean", "list.cpu().numpy", "recog.Recognizer.converter.decode", "logits[].log_softmax", "logits_clock[].log_softmax", "logits_counter[].log_softmax", "list.cpu", "list.cpu", "list.cpu", "list.index", "list.index", "list.index", "list.index", "list.cpu", "list.index", "list.index", "list.index"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.None.recog.imread", "home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.strLabelConverter.decode"], ["", "def", "recog", "(", "self", ",", "imgpath", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "x", ",", "x_clock", ",", "x_counter", ",", "is_vert", "=", "imread", "(", "imgpath", ")", "\n", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "logits", "=", "self", ".", "model", "(", "x", ")", "# [1, L, n_class]", "\n", "\n", "if", "is_vert", ":", "\n", "                ", "x_clock", "=", "x_clock", ".", "to", "(", "self", ".", "device", ")", "\n", "x_counter", "=", "x_counter", ".", "to", "(", "self", ".", "device", ")", "\n", "logits_clock", "=", "self", ".", "model", "(", "x_clock", ")", "\n", "logits_counter", "=", "self", ".", "model", "(", "x_counter", ")", "\n", "\n", "score", ",", "pred", "=", "logits", "[", "0", "]", ".", "log_softmax", "(", "1", ")", ".", "max", "(", "1", ")", "# [L]", "\n", "pred", "=", "list", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "score_clock", ",", "pred_clock", "=", "logits_clock", "[", "0", "]", ".", "log_softmax", "(", "1", ")", ".", "max", "(", "1", ")", "\n", "pred_clock", "=", "list", "(", "pred_clock", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "score_counter", ",", "pred_counter", "=", "logits_counter", "[", "0", "]", ".", "log_softmax", "(", "1", ")", ".", "max", "(", "1", ")", "\n", "pred_counter", "=", "list", "(", "pred_counter", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "scores", "=", "np", ".", "ones", "(", "3", ")", "*", "-", "np", ".", "inf", "\n", "\n", "if", "1", "in", "pred", ":", "\n", "                    ", "score", "=", "score", "[", ":", "pred", ".", "index", "(", "1", ")", "]", "\n", "scores", "[", "0", "]", "=", "score", ".", "mean", "(", ")", "\n", "", "if", "1", "in", "pred_clock", ":", "\n", "                    ", "score_clock", "=", "score_clock", "[", ":", "pred_clock", ".", "index", "(", "1", ")", "]", "\n", "scores", "[", "1", "]", "=", "score_clock", ".", "mean", "(", ")", "\n", "", "if", "1", "in", "pred_counter", ":", "\n", "                    ", "score_counter", "=", "score_counter", "[", ":", "pred_counter", ".", "index", "(", "1", ")", "]", "\n", "scores", "[", "2", "]", "=", "score_counter", ".", "mean", "(", ")", "\n", "\n", "", "c", "=", "scores", ".", "argmax", "(", ")", "\n", "if", "c", "==", "0", ":", "\n", "                    ", "pred", "=", "pred", "[", ":", "pred", ".", "index", "(", "1", ")", "]", "\n", "", "elif", "c", "==", "1", ":", "\n", "                    ", "pred", "=", "pred_clock", "[", ":", "pred_clock", ".", "index", "(", "1", ")", "]", "\n", "", "else", ":", "\n", "                    ", "pred", "=", "pred_counter", "[", ":", "pred_counter", ".", "index", "(", "1", ")", "]", "\n", "\n", "", "", "else", ":", "\n", "                ", "pred", "=", "logits", "[", "0", "]", ".", "argmax", "(", "1", ")", "\n", "pred", "=", "list", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "1", "in", "pred", ":", "\n", "                    ", "pred", "=", "pred", "[", ":", "pred", ".", "index", "(", "1", ")", "]", "\n", "\n", "", "", "pred", "=", "self", ".", "converter", ".", "decode", "(", "pred", ")", ".", "replace", "(", "'<unk>'", ",", "''", ")", "\n", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.None.recog.imread": [[18, 40], ["cv2.imread", "transform", "x.unsqueeze.sub_().div_", "x.unsqueeze.unsqueeze", "cv2.rotate", "cv2.rotate", "transform", "transform", "x_clock.unsqueeze.sub_().div_", "x_counter.unsqueeze.sub_().div_", "x_clock.unsqueeze.unsqueeze", "x_counter.unsqueeze.unsqueeze", "x.unsqueeze.sub_", "x_clock.unsqueeze.sub_", "x_counter.unsqueeze.sub_"], "function", ["home.repos.pwc.inspect_result.RuijieJ_pren.None.recog.imread"], ["def", "imread", "(", "imgpath", ")", ":", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "imgpath", ")", "\n", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "\n", "x", "=", "transform", "(", "img", ")", "\n", "x", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "is_vert", "=", "True", "if", "h", ">", "w", "else", "False", "\n", "if", "is_vert", ":", "\n", "        ", "img_clock", "=", "cv2", ".", "rotate", "(", "img", ",", "cv2", ".", "ROTATE_90_CLOCKWISE", ")", "\n", "img_counter", "=", "cv2", ".", "rotate", "(", "img", ",", "cv2", ".", "ROTATE_90_COUNTERCLOCKWISE", ")", "\n", "x_clock", "=", "transform", "(", "img_clock", ")", "\n", "x_counter", "=", "transform", "(", "img_counter", ")", "\n", "x_clock", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "x_counter", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "x_clock", "=", "x_clock", ".", "unsqueeze", "(", "0", ")", "\n", "x_counter", "=", "x_counter", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "x_clock", ",", "x_counter", "=", "0", ",", "0", "\n", "\n", "", "return", "x", ",", "x_clock", ",", "x_counter", ",", "is_vert", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet.MBConvBlock.__init__": [[26, 63], ["torch.nn.Module.__init__", "Nets.EfficientNet_utils.get_same_padding_conv2d", "Nets.EfficientNet_utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "Nets.EfficientNet_utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "Nets.EfficientNet_utils.MemoryEfficientSwish", "Nets.EfficientNet_utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "max", "Nets.EfficientNet_utils.get_same_padding_conv2d.", "Nets.EfficientNet_utils.get_same_padding_conv2d.", "int"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.__init__", "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.get_same_padding_conv2d"], ["def", "__init__", "(", "self", ",", "block_args", ",", "global_params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_block_args", "=", "block_args", "\n", "self", ".", "_bn_mom", "=", "1", "-", "global_params", ".", "batch_norm_momentum", "\n", "self", ".", "_bn_eps", "=", "global_params", ".", "batch_norm_epsilon", "\n", "self", ".", "has_se", "=", "(", "self", ".", "_block_args", ".", "se_ratio", "is", "not", "None", ")", "and", "(", "0", "<", "self", ".", "_block_args", ".", "se_ratio", "<=", "1", ")", "\n", "self", ".", "id_skip", "=", "block_args", ".", "id_skip", "# skip connection and drop connect", "\n", "\n", "# Get static or dynamic convolution depending on image size", "\n", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "global_params", ".", "image_size", ")", "\n", "\n", "# Expansion phase", "\n", "inp", "=", "self", ".", "_block_args", ".", "input_filters", "# number of input channels", "\n", "oup", "=", "self", ".", "_block_args", ".", "input_filters", "*", "self", ".", "_block_args", ".", "expand_ratio", "# number of output channels", "\n", "if", "self", ".", "_block_args", ".", "expand_ratio", "!=", "1", ":", "\n", "            ", "self", ".", "_expand_conv", "=", "Conv2d", "(", "in_channels", "=", "inp", ",", "out_channels", "=", "oup", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn0", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "oup", ",", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "\n", "# Depthwise convolution phase", "\n", "", "k", "=", "self", ".", "_block_args", ".", "kernel_size", "\n", "s", "=", "self", ".", "_block_args", ".", "stride", "\n", "self", ".", "_depthwise_conv", "=", "Conv2d", "(", "\n", "in_channels", "=", "oup", ",", "out_channels", "=", "oup", ",", "groups", "=", "oup", ",", "# groups makes it depthwise", "\n", "kernel_size", "=", "k", ",", "stride", "=", "s", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "oup", ",", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "\n", "# Squeeze and Excitation layer, if desired", "\n", "if", "self", ".", "has_se", ":", "\n", "            ", "num_squeezed_channels", "=", "max", "(", "1", ",", "int", "(", "self", ".", "_block_args", ".", "input_filters", "*", "self", ".", "_block_args", ".", "se_ratio", ")", ")", "\n", "self", ".", "_se_reduce", "=", "Conv2d", "(", "in_channels", "=", "oup", ",", "out_channels", "=", "num_squeezed_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "_se_expand", "=", "Conv2d", "(", "in_channels", "=", "num_squeezed_channels", ",", "out_channels", "=", "oup", ",", "kernel_size", "=", "1", ")", "\n", "\n", "# Output phase", "\n", "", "final_oup", "=", "self", ".", "_block_args", ".", "output_filters", "\n", "self", ".", "_project_conv", "=", "Conv2d", "(", "in_channels", "=", "oup", ",", "out_channels", "=", "final_oup", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "final_oup", ",", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet.MBConvBlock.forward": [[64, 92], ["EfficientNet.MBConvBlock._swish", "EfficientNet.MBConvBlock._bn2", "EfficientNet.MBConvBlock._swish", "EfficientNet.MBConvBlock._bn1", "torch.nn.functional.adaptive_avg_pool2d", "EfficientNet.MBConvBlock._se_expand", "EfficientNet.MBConvBlock._project_conv", "EfficientNet.MBConvBlock._bn0", "EfficientNet.MBConvBlock._depthwise_conv", "EfficientNet.MBConvBlock._swish", "torch.sigmoid", "Nets.EfficientNet_utils.drop_connect", "EfficientNet.MBConvBlock._expand_conv", "EfficientNet.MBConvBlock._se_reduce"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.drop_connect"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "drop_connect_rate", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: input tensor\n        :param drop_connect_rate: drop connect rate (float, between 0 and 1)\n        :return: output of block\n        \"\"\"", "\n", "\n", "# Expansion and Depthwise Convolution", "\n", "x", "=", "inputs", "\n", "if", "self", ".", "_block_args", ".", "expand_ratio", "!=", "1", ":", "\n", "            ", "x", "=", "self", ".", "_swish", "(", "self", ".", "_bn0", "(", "self", ".", "_expand_conv", "(", "inputs", ")", ")", ")", "\n", "", "x", "=", "self", ".", "_swish", "(", "self", ".", "_bn1", "(", "self", ".", "_depthwise_conv", "(", "x", ")", ")", ")", "\n", "\n", "# Squeeze and Excitation", "\n", "if", "self", ".", "has_se", ":", "\n", "            ", "x_squeezed", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "1", ")", "\n", "x_squeezed", "=", "self", ".", "_se_expand", "(", "self", ".", "_swish", "(", "self", ".", "_se_reduce", "(", "x_squeezed", ")", ")", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x_squeezed", ")", "*", "x", "\n", "\n", "", "x", "=", "self", ".", "_bn2", "(", "self", ".", "_project_conv", "(", "x", ")", ")", "\n", "\n", "# Skip connection and drop connect", "\n", "input_filters", ",", "output_filters", "=", "self", ".", "_block_args", ".", "input_filters", ",", "self", ".", "_block_args", ".", "output_filters", "\n", "if", "self", ".", "id_skip", "and", "self", ".", "_block_args", ".", "stride", "==", "1", "and", "input_filters", "==", "output_filters", ":", "\n", "            ", "if", "drop_connect_rate", ":", "\n", "                ", "x", "=", "drop_connect", "(", "x", ",", "p", "=", "drop_connect_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "x", "+", "inputs", "# skip connection", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet.MBConvBlock.set_swish": [[93, 96], ["Nets.EfficientNet_utils.MemoryEfficientSwish", "Nets.EfficientNet_utils.Swish"], "methods", ["None"], ["", "def", "set_swish", "(", "self", ",", "memory_efficient", "=", "True", ")", ":", "\n", "        ", "\"\"\"Sets swish function as memory efficient (for training) or standard (for export)\"\"\"", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "if", "memory_efficient", "else", "Swish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet.EfficientNet.__init__": [[108, 151], ["torch.nn.Module.__init__", "isinstance", "Nets.EfficientNet_utils.get_same_padding_conv2d", "Nets.EfficientNet_utils.round_filters", "Nets.EfficientNet_utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "torch.nn.ModuleList", "Nets.EfficientNet_utils.MemoryEfficientSwish", "len", "block_args._replace._replace._replace", "EfficientNet.EfficientNet._blocks.append", "range", "EfficientNet.MBConvBlock", "block_args._replace._replace._replace", "EfficientNet.EfficientNet._blocks.append", "Nets.EfficientNet_utils.round_filters", "Nets.EfficientNet_utils.round_filters", "Nets.EfficientNet_utils.round_repeats", "EfficientNet.MBConvBlock"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.__init__", "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.round_filters", "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.round_filters", "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.round_filters", "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.round_repeats"], ["def", "__init__", "(", "self", ",", "blocks_args", "=", "None", ",", "global_params", "=", "None", ")", ":", "\n", "# blocks_args, global_params: configs for original EfficientNet", "\n", "# d_model, max_n_chars, n_head: configs for additional parts", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "blocks_args", ",", "list", ")", ",", "'blocks_args should be a list'", "\n", "assert", "len", "(", "blocks_args", ")", ">", "0", ",", "'block args must be greater than 0'", "\n", "self", ".", "_global_params", "=", "global_params", "\n", "self", ".", "_blocks_args", "=", "blocks_args", "\n", "\n", "# Get static or dynamic convolution depending on image size", "\n", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "global_params", ".", "image_size", ")", "\n", "\n", "# Batch norm parameters", "\n", "bn_mom", "=", "1", "-", "self", ".", "_global_params", ".", "batch_norm_momentum", "\n", "bn_eps", "=", "self", ".", "_global_params", ".", "batch_norm_epsilon", "\n", "\n", "# Stem", "\n", "in_channels", "=", "3", "# rgb", "\n", "out_channels", "=", "round_filters", "(", "32", ",", "self", ".", "_global_params", ")", "# number of output channels", "\n", "self", ".", "_conv_stem", "=", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "_bn0", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "out_channels", ",", "momentum", "=", "bn_mom", ",", "eps", "=", "bn_eps", ")", "\n", "\n", "# Build blocks", "\n", "self", ".", "_blocks", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "block_args", "in", "self", ".", "_blocks_args", ":", "\n", "\n", "# Update block input and output filters based on depth multiplier.", "\n", "            ", "block_args", "=", "block_args", ".", "_replace", "(", "\n", "input_filters", "=", "round_filters", "(", "block_args", ".", "input_filters", ",", "self", ".", "_global_params", ")", ",", "\n", "output_filters", "=", "round_filters", "(", "block_args", ".", "output_filters", ",", "self", ".", "_global_params", ")", ",", "\n", "num_repeat", "=", "round_repeats", "(", "block_args", ".", "num_repeat", ",", "self", ".", "_global_params", ")", "\n", ")", "\n", "\n", "# The first block needs to take care of stride and filter size increase.", "\n", "self", ".", "_blocks", ".", "append", "(", "MBConvBlock", "(", "block_args", ",", "self", ".", "_global_params", ")", ")", "\n", "if", "block_args", ".", "num_repeat", ">", "1", ":", "\n", "                ", "block_args", "=", "block_args", ".", "_replace", "(", "input_filters", "=", "block_args", ".", "output_filters", ",", "stride", "=", "1", ")", "\n", "", "for", "_", "in", "range", "(", "block_args", ".", "num_repeat", "-", "1", ")", ":", "\n", "                ", "self", ".", "_blocks", ".", "append", "(", "MBConvBlock", "(", "block_args", ",", "self", ".", "_global_params", ")", ")", "\n", "\n", "", "", "self", ".", "_block_idx", "=", "[", "7", ",", "17", "]", "# feature maps for upsample_add", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet.EfficientNet.set_swish": [[152, 157], ["Nets.EfficientNet_utils.MemoryEfficientSwish", "Nets.EfficientNet_utils.Swish", "block.set_swish"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet.EfficientNet.set_swish"], ["", "def", "set_swish", "(", "self", ",", "memory_efficient", "=", "True", ")", ":", "\n", "        ", "\"\"\"Sets swish function as memory efficient (for training) or standard (for export)\"\"\"", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "if", "memory_efficient", "else", "Swish", "(", ")", "\n", "for", "block", "in", "self", ".", "_blocks", ":", "\n", "            ", "block", ".", "set_swish", "(", "memory_efficient", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet.EfficientNet._upsample_add": [[158, 162], ["y.size", "EfficientNet.EfficientNet._swish", "torch.nn.functional.interpolate"], "methods", ["None"], ["", "", "def", "_upsample_add", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "_", ",", "_", ",", "H", ",", "W", "=", "y", ".", "size", "(", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "+", "y", "\n", "return", "self", ".", "_swish", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet.EfficientNet.forward": [[163, 179], ["EfficientNet.EfficientNet._swish", "enumerate", "EfficientNet.EfficientNet._bn0", "block", "EfficientNet.EfficientNet._conv_stem", "temps.append", "float", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# Stem", "\n", "        ", "x", "=", "self", ".", "_swish", "(", "self", ".", "_bn0", "(", "self", ".", "_conv_stem", "(", "inputs", ")", ")", ")", "\n", "\n", "temps", "=", "[", "]", "# temps[0]: 1/8 size, temps[1]: 1/16 size", "\n", "\n", "# Blocks", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "_blocks", ")", ":", "\n", "            ", "drop_connect_rate", "=", "self", ".", "_global_params", ".", "drop_connect_rate", "\n", "if", "drop_connect_rate", ":", "\n", "                ", "drop_connect_rate", "*=", "float", "(", "idx", ")", "/", "len", "(", "self", ".", "_blocks", ")", "\n", "", "x", "=", "block", "(", "x", ",", "drop_connect_rate", "=", "drop_connect_rate", ")", "\n", "if", "idx", "in", "self", ".", "_block_idx", ":", "\n", "                ", "temps", ".", "append", "(", "x", ")", "\n", "\n", "", "", "return", "temps", "[", "0", "]", ",", "temps", "[", "1", "]", ",", "x", "# [b, 48, 8, 32], [b, 136, 4, 16], [b, 384, 2, 8]", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet.EfficientNet.from_name": [[180, 185], ["cls._check_model_name_is_valid", "Nets.EfficientNet_utils.get_model_params", "cls"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet.EfficientNet._check_model_name_is_valid", "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.get_model_params"], ["", "@", "classmethod", "\n", "def", "from_name", "(", "cls", ",", "model_name", ",", "override_params", "=", "None", ")", ":", "\n", "        ", "cls", ".", "_check_model_name_is_valid", "(", "model_name", ")", "\n", "blocks_args", ",", "global_params", "=", "get_model_params", "(", "model_name", ",", "override_params", ")", "\n", "return", "cls", "(", "blocks_args", ",", "global_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet.EfficientNet._check_model_name_is_valid": [[186, 194], ["ValueError", "str", "range"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_check_model_name_is_valid", "(", "cls", ",", "model_name", ",", "also_need_pretrained_weights", "=", "False", ")", ":", "\n", "        ", "\"\"\" Validates model name. None that pretrained weights are only available for\n        the first four models (efficientnet-b{i} for i in 0,1,2,3) at the moment. \"\"\"", "\n", "num_models", "=", "4", "if", "also_need_pretrained_weights", "else", "8", "\n", "valid_models", "=", "[", "'efficientnet-b'", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "num_models", ")", "]", "\n", "if", "model_name", "not", "in", "valid_models", ":", "\n", "            ", "raise", "ValueError", "(", "'model_name should be one of: '", "+", "', '", ".", "join", "(", "valid_models", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.SwishImplementation.forward": [[32, 37], ["ctx.save_for_backward", "torch.sigmoid"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "i", ")", ":", "\n", "        ", "result", "=", "i", "*", "torch", ".", "sigmoid", "(", "i", ")", "\n", "ctx", ".", "save_for_backward", "(", "i", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.SwishImplementation.backward": [[38, 43], ["torch.sigmoid"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "i", "=", "ctx", ".", "saved_variables", "[", "0", "]", "\n", "sigmoid_i", "=", "torch", ".", "sigmoid", "(", "i", ")", "\n", "return", "grad_output", "*", "(", "sigmoid_i", "*", "(", "1", "+", "i", "*", "(", "1", "-", "sigmoid_i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.MemoryEfficientSwish.forward": [[46, 48], ["SwishImplementation.apply"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.data.data_utils.Augmenter.apply"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "SwishImplementation", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.Swish.forward": [[50, 52], ["torch.sigmoid"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.Conv2dDynamicSamePadding.__init__": [[101, 104], ["torch.nn.Conv2d.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "0", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "self", ".", "stride", "=", "self", ".", "stride", "if", "len", "(", "self", ".", "stride", ")", "==", "2", "else", "[", "self", ".", "stride", "[", "0", "]", "]", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.Conv2dDynamicSamePadding.forward": [[105, 115], ["max", "max", "torch.nn.functional.conv2d", "torch.nn.functional.pad.size", "EfficientNet_utils.Conv2dDynamicSamePadding.weight.size", "math.ceil", "math.ceil", "torch.nn.functional.pad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ih", ",", "iw", "=", "x", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "kh", ",", "kw", "=", "self", ".", "weight", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "sh", ",", "sw", "=", "self", ".", "stride", "\n", "oh", ",", "ow", "=", "math", ".", "ceil", "(", "ih", "/", "sh", ")", ",", "math", ".", "ceil", "(", "iw", "/", "sw", ")", "\n", "pad_h", "=", "max", "(", "(", "oh", "-", "1", ")", "*", "self", ".", "stride", "[", "0", "]", "+", "(", "kh", "-", "1", ")", "*", "self", ".", "dilation", "[", "0", "]", "+", "1", "-", "ih", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "(", "ow", "-", "1", ")", "*", "self", ".", "stride", "[", "1", "]", "+", "(", "kw", "-", "1", ")", "*", "self", ".", "dilation", "[", "1", "]", "+", "1", "-", "iw", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "[", "pad_w", "//", "2", ",", "pad_w", "-", "pad_w", "//", "2", ",", "pad_h", "//", "2", ",", "pad_h", "-", "pad_h", "//", "2", "]", ")", "\n", "", "return", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.Conv2dStaticSamePadding.__init__": [[120, 136], ["torch.nn.Conv2d.__init__", "max", "max", "EfficientNet_utils.Conv2dStaticSamePadding.weight.size", "math.ceil", "math.ceil", "torch.nn.ZeroPad2d", "EfficientNet_utils.Identity", "len", "type"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "image_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", "\n", "self", ".", "stride", "=", "self", ".", "stride", "if", "len", "(", "self", ".", "stride", ")", "==", "2", "else", "[", "self", ".", "stride", "[", "0", "]", "]", "*", "2", "\n", "\n", "# Calculate padding based on image size and save it", "\n", "assert", "image_size", "is", "not", "None", "\n", "ih", ",", "iw", "=", "image_size", "if", "type", "(", "image_size", ")", "==", "list", "else", "[", "image_size", ",", "image_size", "]", "\n", "kh", ",", "kw", "=", "self", ".", "weight", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "sh", ",", "sw", "=", "self", ".", "stride", "\n", "oh", ",", "ow", "=", "math", ".", "ceil", "(", "ih", "/", "sh", ")", ",", "math", ".", "ceil", "(", "iw", "/", "sw", ")", "\n", "pad_h", "=", "max", "(", "(", "oh", "-", "1", ")", "*", "self", ".", "stride", "[", "0", "]", "+", "(", "kh", "-", "1", ")", "*", "self", ".", "dilation", "[", "0", "]", "+", "1", "-", "ih", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "(", "ow", "-", "1", ")", "*", "self", ".", "stride", "[", "1", "]", "+", "(", "kw", "-", "1", ")", "*", "self", ".", "dilation", "[", "1", "]", "+", "1", "-", "iw", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "self", ".", "static_padding", "=", "nn", ".", "ZeroPad2d", "(", "(", "pad_w", "//", "2", ",", "pad_w", "-", "pad_w", "//", "2", ",", "pad_h", "//", "2", ",", "pad_h", "-", "pad_h", "//", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "static_padding", "=", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.Conv2dStaticSamePadding.forward": [[137, 141], ["EfficientNet_utils.Conv2dStaticSamePadding.static_padding", "torch.nn.functional.conv2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "static_padding", "(", "x", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.Identity.__init__": [[144, 146], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.Identity.forward": [[147, 149], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.BlockDecoder._decode_block_string": [[175, 201], ["isinstance", "block_string.split", "BlockArgs", "re.split", "len", "int", "int", "int", "int", "int", "len", "len", "float", "int"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_decode_block_string", "(", "block_string", ")", ":", "\n", "        ", "\"\"\" Gets a block through a string notation of arguments. \"\"\"", "\n", "assert", "isinstance", "(", "block_string", ",", "str", ")", "\n", "\n", "ops", "=", "block_string", ".", "split", "(", "'_'", ")", "\n", "options", "=", "{", "}", "\n", "for", "op", "in", "ops", ":", "\n", "            ", "splits", "=", "re", ".", "split", "(", "r'(\\d.*)'", ",", "op", ")", "\n", "if", "len", "(", "splits", ")", ">=", "2", ":", "\n", "                ", "key", ",", "value", "=", "splits", "[", ":", "2", "]", "\n", "options", "[", "key", "]", "=", "value", "\n", "\n", "# Check stride", "\n", "", "", "assert", "(", "(", "'s'", "in", "options", "and", "len", "(", "options", "[", "'s'", "]", ")", "==", "1", ")", "or", "\n", "(", "len", "(", "options", "[", "'s'", "]", ")", "==", "2", "and", "options", "[", "'s'", "]", "[", "0", "]", "==", "options", "[", "'s'", "]", "[", "1", "]", ")", ")", "\n", "\n", "return", "BlockArgs", "(", "\n", "kernel_size", "=", "int", "(", "options", "[", "'k'", "]", ")", ",", "\n", "num_repeat", "=", "int", "(", "options", "[", "'r'", "]", ")", ",", "\n", "input_filters", "=", "int", "(", "options", "[", "'i'", "]", ")", ",", "\n", "output_filters", "=", "int", "(", "options", "[", "'o'", "]", ")", ",", "\n", "expand_ratio", "=", "int", "(", "options", "[", "'e'", "]", ")", ",", "\n", "id_skip", "=", "(", "'noskip'", "not", "in", "block_string", ")", ",", "\n", "se_ratio", "=", "float", "(", "options", "[", "'se'", "]", ")", "if", "'se'", "in", "options", "else", "None", ",", "\n", "stride", "=", "[", "int", "(", "options", "[", "'s'", "]", "[", "0", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.BlockDecoder._encode_block_string": [[202, 218], ["args.append", "args.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_encode_block_string", "(", "block", ")", ":", "\n", "        ", "\"\"\"Encodes a block to a string.\"\"\"", "\n", "args", "=", "[", "\n", "'r%d'", "%", "block", ".", "num_repeat", ",", "\n", "'k%d'", "%", "block", ".", "kernel_size", ",", "\n", "'s%d%d'", "%", "(", "block", ".", "strides", "[", "0", "]", ",", "block", ".", "strides", "[", "1", "]", ")", ",", "\n", "'e%s'", "%", "block", ".", "expand_ratio", ",", "\n", "'i%d'", "%", "block", ".", "input_filters", ",", "\n", "'o%d'", "%", "block", ".", "output_filters", "\n", "]", "\n", "if", "0", "<", "block", ".", "se_ratio", "<=", "1", ":", "\n", "            ", "args", ".", "append", "(", "'se%s'", "%", "block", ".", "se_ratio", ")", "\n", "", "if", "block", ".", "id_skip", "is", "False", ":", "\n", "            ", "args", ".", "append", "(", "'noskip'", ")", "\n", "", "return", "'_'", ".", "join", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.BlockDecoder.decode": [[219, 231], ["isinstance", "blocks_args.append", "EfficientNet_utils.BlockDecoder._decode_block_string"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.BlockDecoder._decode_block_string"], ["", "@", "staticmethod", "\n", "def", "decode", "(", "string_list", ")", ":", "\n", "        ", "\"\"\"\n        Decodes a list of string notations to specify blocks inside the network.\n        :param string_list: a list of strings, each string is a notation of block\n        :return: a list of BlockArgs namedtuples of block args\n        \"\"\"", "\n", "assert", "isinstance", "(", "string_list", ",", "list", ")", "\n", "blocks_args", "=", "[", "]", "\n", "for", "block_string", "in", "string_list", ":", "\n", "            ", "blocks_args", ".", "append", "(", "BlockDecoder", ".", "_decode_block_string", "(", "block_string", ")", ")", "\n", "", "return", "blocks_args", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.BlockDecoder.encode": [[232, 243], ["block_strings.append", "EfficientNet_utils.BlockDecoder._encode_block_string"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.BlockDecoder._encode_block_string"], ["", "@", "staticmethod", "\n", "def", "encode", "(", "blocks_args", ")", ":", "\n", "        ", "\"\"\"\n        Encodes a list of BlockArgs to a list of strings.\n        :param blocks_args: a list of BlockArgs namedtuples of block args\n        :return: a list of strings, each string is a notation of block\n        \"\"\"", "\n", "block_strings", "=", "[", "]", "\n", "for", "block", "in", "blocks_args", ":", "\n", "            ", "block_strings", ".", "append", "(", "BlockDecoder", ".", "_encode_block_string", "(", "block", ")", ")", "\n", "", "return", "block_strings", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.round_filters": [[54, 67], ["max", "int", "int"], "function", ["None"], ["", "", "def", "round_filters", "(", "filters", ",", "global_params", ")", ":", "\n", "    ", "\"\"\" Calculate and round number of filters based on depth multiplier. \"\"\"", "\n", "multiplier", "=", "global_params", ".", "width_coefficient", "\n", "if", "not", "multiplier", ":", "\n", "        ", "return", "filters", "\n", "", "divisor", "=", "global_params", ".", "depth_divisor", "\n", "min_depth", "=", "global_params", ".", "min_depth", "\n", "filters", "*=", "multiplier", "\n", "min_depth", "=", "min_depth", "or", "divisor", "\n", "new_filters", "=", "max", "(", "min_depth", ",", "int", "(", "filters", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "if", "new_filters", "<", "0.9", "*", "filters", ":", "# prevent rounding by more than 10%", "\n", "        ", "new_filters", "+=", "divisor", "\n", "", "return", "int", "(", "new_filters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.round_repeats": [[69, 75], ["int", "math.ceil"], "function", ["None"], ["", "def", "round_repeats", "(", "repeats", ",", "global_params", ")", ":", "\n", "    ", "\"\"\" Round number of filters based on depth multiplier. \"\"\"", "\n", "multiplier", "=", "global_params", ".", "depth_coefficient", "\n", "if", "not", "multiplier", ":", "\n", "        ", "return", "repeats", "\n", "", "return", "int", "(", "math", ".", "ceil", "(", "multiplier", "*", "repeats", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.drop_connect": [[77, 87], ["torch.rand", "torch.floor"], "function", ["None"], ["", "def", "drop_connect", "(", "inputs", ",", "p", ",", "training", ")", ":", "\n", "    ", "\"\"\" Drop connect. \"\"\"", "\n", "if", "not", "training", ":", "return", "inputs", "\n", "batch_size", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "keep_prob", "=", "1", "-", "p", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "inputs", ".", "dtype", ",", "device", "=", "inputs", ".", "device", ")", "\n", "binary_tensor", "=", "torch", ".", "floor", "(", "random_tensor", ")", "\n", "output", "=", "inputs", "/", "keep_prob", "*", "binary_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.get_same_padding_conv2d": [[89, 96], ["functools.partial"], "function", ["None"], ["", "def", "get_same_padding_conv2d", "(", "image_size", "=", "None", ")", ":", "\n", "    ", "\"\"\" Chooses static padding if you have specified an image size, and dynamic padding otherwise.\n        Static padding is necessary for ONNX exporting of models. \"\"\"", "\n", "if", "image_size", "is", "None", ":", "\n", "        ", "return", "Conv2dDynamicSamePadding", "\n", "", "else", ":", "\n", "        ", "return", "partial", "(", "Conv2dStaticSamePadding", ",", "image_size", "=", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.efficientnet_params": [[156, 170], ["None"], "function", ["None"], ["", "", "def", "efficientnet_params", "(", "model_name", ")", ":", "\n", "    ", "\"\"\" Map EfficientNet model name to parameter coefficients. \"\"\"", "\n", "params_dict", "=", "{", "\n", "# Coefficients:   width,depth,res,dropout", "\n", "'efficientnet-b0'", ":", "(", "1.0", ",", "1.0", ",", "224", ",", "0.2", ")", ",", "\n", "'efficientnet-b1'", ":", "(", "1.0", ",", "1.1", ",", "240", ",", "0.2", ")", ",", "\n", "'efficientnet-b2'", ":", "(", "1.1", ",", "1.2", ",", "260", ",", "0.3", ")", ",", "\n", "'efficientnet-b3'", ":", "(", "1.2", ",", "1.4", ",", "64", ",", "0.3", ")", ",", "# the original resolution is 300, here we change it to 64", "\n", "'efficientnet-b4'", ":", "(", "1.4", ",", "1.8", ",", "380", ",", "0.4", ")", ",", "\n", "'efficientnet-b5'", ":", "(", "1.6", ",", "2.2", ",", "456", ",", "0.4", ")", ",", "\n", "'efficientnet-b6'", ":", "(", "1.8", ",", "2.6", ",", "528", ",", "0.5", ")", ",", "\n", "'efficientnet-b7'", ":", "(", "2.0", ",", "3.1", ",", "600", ",", "0.5", ")", ",", "\n", "}", "\n", "return", "params_dict", "[", "model_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.efficientnet": [[245, 272], ["EfficientNet_utils.BlockDecoder.decode", "GlobalParams"], "function", ["home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.strLabelConverter.decode"], ["", "", "def", "efficientnet", "(", "width_coefficient", "=", "None", ",", "depth_coefficient", "=", "None", ",", "dropout_rate", "=", "0.2", ",", "\n", "drop_connect_rate", "=", "0.2", ",", "image_size", "=", "None", ",", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\" Creates a efficientnet model. \"\"\"", "\n", "\n", "blocks_args", "=", "[", "\n", "'r1_k3_s11_e1_i32_o16_se0.25'", ",", "'r2_k3_s22_e6_i16_o24_se0.25'", ",", "\n", "'r2_k5_s22_e6_i24_o40_se0.25'", ",", "'r3_k3_s22_e6_i40_o80_se0.25'", ",", "\n", "'r3_k5_s11_e6_i80_o112_se0.25'", ",", "'r4_k5_s22_e6_i112_o192_se0.25'", ",", "\n", "'r1_k3_s11_e6_i192_o320_se0.25'", ",", "\n", "]", "\n", "blocks_args", "=", "BlockDecoder", ".", "decode", "(", "blocks_args", ")", "\n", "\n", "global_params", "=", "GlobalParams", "(", "\n", "batch_norm_momentum", "=", "0.99", ",", "\n", "batch_norm_epsilon", "=", "1e-3", ",", "\n", "dropout_rate", "=", "dropout_rate", ",", "\n", "drop_connect_rate", "=", "drop_connect_rate", ",", "\n", "# data_format='channels_last',  # removed, this is always true in PyTorch", "\n", "num_classes", "=", "num_classes", ",", "\n", "width_coefficient", "=", "width_coefficient", ",", "\n", "depth_coefficient", "=", "depth_coefficient", ",", "\n", "depth_divisor", "=", "8", ",", "\n", "min_depth", "=", "None", ",", "\n", "image_size", "=", "image_size", ",", "\n", ")", "\n", "\n", "return", "blocks_args", ",", "global_params", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.get_model_params": [[274, 287], ["model_name.startswith", "EfficientNet_utils.efficientnet_params", "EfficientNet_utils.efficientnet", "NotImplementedError", "global_params._replace._replace"], "function", ["home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.efficientnet_params", "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.efficientnet"], ["", "def", "get_model_params", "(", "model_name", ",", "override_params", ")", ":", "\n", "    ", "\"\"\" Get the block args and global params for a given model \"\"\"", "\n", "if", "model_name", ".", "startswith", "(", "'efficientnet'", ")", ":", "\n", "        ", "w", ",", "d", ",", "s", ",", "p", "=", "efficientnet_params", "(", "model_name", ")", "\n", "# note: all models have drop connect rate = 0.2", "\n", "blocks_args", ",", "global_params", "=", "efficientnet", "(", "\n", "width_coefficient", "=", "w", ",", "depth_coefficient", "=", "d", ",", "dropout_rate", "=", "p", ",", "image_size", "=", "s", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'model name is not pre-defined: %s'", "%", "model_name", ")", "\n", "", "if", "override_params", ":", "\n", "# ValueError will be raised here if override_params has fields not included in global_params.", "\n", "        ", "global_params", "=", "global_params", ".", "_replace", "(", "**", "override_params", ")", "\n", "", "return", "blocks_args", ",", "global_params", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet_utils.load_pretrained_weights": [[301, 312], ["torch.utils.model_zoo.load_url", "print", "model.load_state_dict", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model.load_state_dict", "set", "set"], "function", ["None"], ["def", "load_pretrained_weights", "(", "model", ",", "model_name", ",", "load_fc", "=", "True", ")", ":", "\n", "    ", "\"\"\" Loads pretrained weights, and downloads if loading for the first time. \"\"\"", "\n", "state_dict", "=", "model_zoo", ".", "load_url", "(", "url_map", "[", "model_name", "]", ")", "\n", "if", "load_fc", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "else", ":", "\n", "        ", "state_dict", ".", "pop", "(", "'_fc.weight'", ")", "\n", "state_dict", ".", "pop", "(", "'_fc.bias'", ")", "\n", "res", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "assert", "set", "(", "res", ".", "missing_keys", ")", "==", "set", "(", "[", "'_fc.weight'", ",", "'_fc.bias'", "]", ")", ",", "'issue loading pretrained weights'", "\n", "", "print", "(", "'Loaded pretrained weights for {}'", ".", "format", "(", "model_name", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.model.Model.__init__": [[9, 39], ["torch.Module.__init__", "Nets.EfficientNet.EfficientNet.from_name", "Nets.Aggregation.PoolAggregate", "Nets.Aggregation.PoolAggregate", "Nets.Aggregation.PoolAggregate", "Nets.Aggregation.WeightAggregate", "Nets.Aggregation.WeightAggregate", "Nets.Aggregation.WeightAggregate", "Nets.Aggregation.GCN", "Nets.Aggregation.GCN", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.__init__", "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.EfficientNet.EfficientNet.from_name"], ["    ", "def", "__init__", "(", "self", ",", "\n", "net_configs", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "d_model", "=", "net_configs", ".", "d_model", "\n", "n_r", "=", "net_configs", ".", "n_r", "\n", "max_len", "=", "net_configs", ".", "max_len", "\n", "n_class", "=", "net_configs", ".", "n_class", "\n", "dropout", "=", "net_configs", ".", "dropout", "\n", "\n", "self", ".", "cnn", "=", "EfficientNet", ".", "from_name", "(", "'efficientnet-b3'", ")", "\n", "\n", "# pooling aggregators", "\n", "# f3[b, 48, 8, 32], f5[b, 136, 4, 16], f7[b, 384, 2, 8]", "\n", "self", ".", "agg_p1", "=", "PoolAggregate", "(", "n_r", ",", "d_in", "=", "48", ",", "d_out", "=", "d_model", "//", "3", ")", "\n", "self", ".", "agg_p2", "=", "PoolAggregate", "(", "n_r", ",", "d_in", "=", "136", ",", "d_out", "=", "d_model", "//", "3", ")", "\n", "self", ".", "agg_p3", "=", "PoolAggregate", "(", "n_r", ",", "d_in", "=", "384", ",", "d_out", "=", "d_model", "//", "3", ")", "\n", "\n", "# weighted aggregators", "\n", "self", ".", "agg_w1", "=", "WeightAggregate", "(", "n_r", "=", "n_r", ",", "d_in", "=", "48", ",", "d_middle", "=", "4", "*", "48", ",", "d_out", "=", "d_model", "//", "3", ")", "\n", "self", ".", "agg_w2", "=", "WeightAggregate", "(", "n_r", "=", "n_r", ",", "d_in", "=", "136", ",", "d_middle", "=", "4", "*", "136", ",", "d_out", "=", "d_model", "//", "3", ")", "\n", "self", ".", "agg_w3", "=", "WeightAggregate", "(", "n_r", "=", "n_r", ",", "d_in", "=", "384", ",", "d_middle", "=", "4", "*", "384", ",", "d_out", "=", "d_model", "//", "3", ")", "\n", "\n", "# GCNs", "\n", "self", ".", "gcn_pool", "=", "GCN", "(", "d_in", "=", "d_model", ",", "n_in", "=", "n_r", ",", "d_out", "=", "d_model", ",", "n_out", "=", "max_len", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "gcn_weight", "=", "GCN", "(", "d_in", "=", "d_model", ",", "n_in", "=", "n_r", ",", "d_out", "=", "d_model", ",", "n_out", "=", "max_len", ",", "dropout", "=", "dropout", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_class", ")", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "d_model", "=", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.model.Model.forward": [[40, 66], ["model.Model.cnn", "model.Model.agg_p1", "model.Model.agg_p2", "model.Model.agg_p3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Model.agg_w1", "model.Model.agg_w2", "model.Model.agg_w3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Model.gcn_pool", "model.Model.gcn_weight", "model.Model.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "'''\n        :param input: images [b, 3, 64, 256]\n        :return logits: [b, L, n_class] probs of characters (before softmax)\n        '''", "\n", "\n", "f3", ",", "f5", ",", "f7", "=", "self", ".", "cnn", "(", "input", ")", "\n", "\n", "rp1", "=", "self", ".", "agg_p1", "(", "f3", ")", "# [b, nr, d / 3]", "\n", "rp2", "=", "self", ".", "agg_p2", "(", "f5", ")", "# [b, nr, d / 3]", "\n", "rp3", "=", "self", ".", "agg_p3", "(", "f7", ")", "# [b, nr, d / 3]", "\n", "rp", "=", "torch", ".", "cat", "(", "[", "rp1", ",", "rp2", ",", "rp3", "]", ",", "dim", "=", "2", ")", "# [b, nr, d]", "\n", "\n", "rw1", "=", "self", ".", "agg_w1", "(", "f3", ")", "\n", "rw2", "=", "self", ".", "agg_w2", "(", "f5", ")", "\n", "rw3", "=", "self", ".", "agg_w3", "(", "f7", ")", "\n", "rw", "=", "torch", ".", "cat", "(", "[", "rw1", ",", "rw2", ",", "rw3", "]", ",", "dim", "=", "2", ")", "# [b, nr, d]", "\n", "\n", "y1", "=", "self", ".", "gcn_pool", "(", "rp", ")", "\n", "y2", "=", "self", ".", "gcn_weight", "(", "rw", ")", "\n", "\n", "y", "=", "0.5", "*", "(", "y1", "+", "y2", ")", "# [b, L, d]", "\n", "\n", "logits", "=", "self", ".", "linear", "(", "y", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.Aggregation.GCN.__init__": [[7, 19], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "Nets.EfficientNet_utils.MemoryEfficientSwish"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_in", ",", "n_in", ",", "d_out", "=", "None", ",", "n_out", "=", "None", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "d_out", "is", "None", ":", "\n", "            ", "d_out", "=", "d_in", "\n", "", "if", "n_out", "is", "None", ":", "\n", "            ", "n_out", "=", "n_in", "\n", "\n", "", "self", ".", "conv_n", "=", "nn", ".", "Conv1d", "(", "n_in", ",", "n_out", ",", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "d_in", ",", "d_out", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "activation", "=", "MemoryEfficientSwish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.Aggregation.GCN.forward": [[20, 30], ["Aggregation.GCN.conv_n", "Aggregation.GCN.dropout", "Aggregation.GCN.activation", "Aggregation.GCN.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: [b, nin, din]\n        :return: [b, nout, dout]\n        '''", "\n", "\n", "x", "=", "self", ".", "conv_n", "(", "x", ")", "# [b, nout, din]", "\n", "x", "=", "self", ".", "dropout", "(", "self", ".", "linear", "(", "x", ")", ")", "# [b, nout, dout]", "\n", "\n", "return", "self", ".", "activation", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.Aggregation.PoolAggregate.__init__": [[33, 49], ["torch.Module.__init__", "Nets.EfficientNet_utils.MemoryEfficientSwish", "Aggregation.PoolAggregate.build_aggs", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.__init__", "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.Aggregation.PoolAggregate.build_aggs"], ["    ", "def", "__init__", "(", "self", ",", "n_r", ",", "d_in", ",", "d_middle", "=", "None", ",", "d_out", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "d_middle", "is", "None", ":", "\n", "            ", "d_middle", "=", "d_in", "\n", "", "if", "d_out", "is", "None", ":", "\n", "            ", "d_out", "=", "d_in", "\n", "\n", "", "self", ".", "d_in", "=", "d_in", "\n", "self", ".", "d_middle", "=", "d_middle", "\n", "self", ".", "d_out", "=", "d_out", "\n", "self", ".", "activation", "=", "MemoryEfficientSwish", "(", ")", "\n", "\n", "self", ".", "n_r", "=", "n_r", "\n", "self", ".", "aggs", "=", "self", ".", "build_aggs", "(", ")", "\n", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.Aggregation.PoolAggregate.build_aggs": [[50, 63], ["torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList.append", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "def", "build_aggs", "(", "self", ")", ":", "\n", "        ", "aggs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_r", ")", ":", "\n", "            ", "aggs", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "d_in", ",", "self", ".", "d_middle", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "d_middle", ",", "momentum", "=", "0.01", ",", "eps", "=", "0.001", ")", ",", "\n", "self", ".", "activation", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "d_middle", ",", "self", ".", "d_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "d_out", ",", "momentum", "=", "0.01", ",", "eps", "=", "0.001", ")", ",", "\n", ")", ")", "\n", "\n", "", "return", "aggs", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.Aggregation.PoolAggregate.forward": [[64, 83], ["x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "agg", "Aggregation.PoolAggregate.pool", "fmaps.append", "torch.cat.append", "torch.cat.append", "Aggregation.PoolAggregate.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: [b, din, h, w]\n        :return: [b, n_r, dout]\n        '''", "\n", "\n", "b", "=", "x", ".", "size", "(", "0", ")", "\n", "out", "=", "[", "]", "\n", "fmaps", "=", "[", "]", "\n", "\n", "for", "agg", "in", "self", ".", "aggs", ":", "\n", "            ", "y", "=", "agg", "(", "x", ")", "# [b, d_out, 1, 1]", "\n", "p", "=", "self", ".", "pool", "(", "y", ")", "\n", "fmaps", ".", "append", "(", "y", ")", "\n", "out", ".", "append", "(", "p", ".", "view", "(", "b", ",", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "out", "=", "torch", ".", "cat", "(", "out", ",", "dim", "=", "1", ")", "# [b, n_r, d_out]", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.Aggregation.WeightAggregate.__init__": [[87, 112], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "Nets.EfficientNet_utils.MemoryEfficientSwish", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "Nets.EfficientNet_utils.MemoryEfficientSwish", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_r", ",", "d_in", ",", "d_middle", "=", "None", ",", "d_out", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "d_middle", "is", "None", ":", "\n", "            ", "d_middle", "=", "d_in", "\n", "", "if", "d_out", "is", "None", ":", "\n", "            ", "d_out", "=", "d_in", "\n", "\n", "", "self", ".", "conv_n", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "d_in", ",", "d_in", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d_in", ",", "momentum", "=", "0.01", ",", "eps", "=", "0.001", ")", ",", "\n", "MemoryEfficientSwish", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "d_in", ",", "n_r", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_r", ",", "momentum", "=", "0.01", ",", "eps", "=", "0.001", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "self", ".", "conv_d", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "d_in", ",", "d_middle", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d_middle", ",", "momentum", "=", "0.01", ",", "eps", "=", "0.001", ")", ",", "\n", "MemoryEfficientSwish", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "d_middle", ",", "d_out", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "d_out", ",", "momentum", "=", "0.01", ",", "eps", "=", "0.001", ")", ")", "\n", "\n", "self", ".", "n_r", "=", "n_r", "\n", "self", ".", "d_out", "=", "d_out", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Nets.Aggregation.WeightAggregate.forward": [[113, 127], ["x.size", "Aggregation.WeightAggregate.conv_n", "Aggregation.WeightAggregate.conv_d", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "Aggregation.WeightAggregate.view", "Aggregation.WeightAggregate.view().permute", "Aggregation.WeightAggregate.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: [b, d_in, h, w]\n        :return: [b, n_r, dout]\n        '''", "\n", "b", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "hmaps", "=", "self", ".", "conv_n", "(", "x", ")", "# [b, n_r, h, w]", "\n", "fmaps", "=", "self", ".", "conv_d", "(", "x", ")", "# [b, d_out, h, w]", "\n", "\n", "r", "=", "torch", ".", "bmm", "(", "hmaps", ".", "view", "(", "b", ",", "self", ".", "n_r", ",", "-", "1", ")", ",", "\n", "fmaps", ".", "view", "(", "b", ",", "self", ".", "d_out", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "return", "r", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RuijieJ_pren.data.data_utils.Augmenter.__init__": [[7, 30], ["imgaug.MultiplyBrightness", "imgaug.Rotate", "imgaug.PerspectiveTransform", "imgaug.Sequential", "imgaug.MotionBlur", "imgaug.GaussianBlur", "imgaug.Resize", "imgaug.JpegCompression"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.3", ",", "\n", "mul_bright", "=", "(", "0.7", ",", "1.3", ")", ",", "\n", "rot_angle", "=", "(", "-", "15", ",", "15", ")", ",", "perspective", "=", "(", "0", ",", "0.06", ")", ",", "# rotation and perspective", "\n", "resize", "=", "(", "0.5", ",", "1.0", ")", ",", "compression", "=", "(", "50", ",", "75", ")", ",", "th", "=", "16", ",", "# decrease image quality", "\n", "motionblur", "=", "(", "3", ",", "7", ")", ",", "gaussblur", "=", "(", "0.", ",", "2.0", ")", ",", "p_motion", "=", "0.5", ",", "# blur", "\n", "p_curve", "=", "0.1", ")", ":", "\n", "\n", "        ", "self", ".", "aug_bright", "=", "iaa", ".", "MultiplyBrightness", "(", "mul", "=", "mul_bright", ")", "\n", "self", ".", "aug_rot", "=", "iaa", ".", "Rotate", "(", "rot_angle", ",", "mode", "=", "'constant'", ",", "cval", "=", "0", ",", "fit_output", "=", "True", ")", "\n", "self", ".", "aug_perspective", "=", "iaa", ".", "PerspectiveTransform", "(", "scale", "=", "perspective", ",", "fit_output", "=", "False", ")", "\n", "\n", "self", ".", "aug_dq", "=", "iaa", ".", "Sequential", "(", "[", "\n", "iaa", ".", "Resize", "(", "resize", ")", ",", "\n", "iaa", ".", "JpegCompression", "(", "compression", ")", "\n", "]", ")", "\n", "\n", "self", ".", "aug_motion", "=", "iaa", ".", "MotionBlur", "(", "k", "=", "motionblur", ")", "\n", "self", ".", "aug_gauss", "=", "iaa", ".", "GaussianBlur", "(", "sigma", "=", "gaussblur", ")", "\n", "self", ".", "p_motion", "=", "p_motion", "\n", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "th", "=", "th", "\n", "self", ".", "p_curve", "=", "p_curve", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.data.data_utils.Augmenter.apply": [[31, 54], ["random.random", "data_utils.rand_curve", "random.random", "data_utils.Augmenter.aug_bright.augment_image", "random.random", "data_utils.Augmenter.aug_rot.augment_image", "random.random", "data_utils.Augmenter.aug_perspective.augment_image", "random.random", "numpy.invert", "data_utils.Augmenter.aug_dq.augment_image", "random.random", "random.random", "min", "random.random", "data_utils.Augmenter.aug_motion.augment_image", "data_utils.Augmenter.aug_gauss.augment_image"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.data.data_utils.rand_curve"], ["", "def", "apply", "(", "self", ",", "img", ",", "text_len", ")", ":", "\n", "        ", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p_curve", ":", "# curve", "\n", "            ", "img", "=", "rand_curve", "(", "img", ",", "text_len", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "img", "=", "self", ".", "aug_bright", ".", "augment_image", "(", "img", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "img", "=", "self", ".", "aug_rot", ".", "augment_image", "(", "img", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "img", "=", "self", ".", "aug_perspective", ".", "augment_image", "(", "img", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "# invert", "\n", "            ", "img", "=", "np", ".", "invert", "(", "img", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", "and", "min", "(", "[", "h", ",", "w", "]", ")", ">=", "self", ".", "th", ":", "# down quality", "\n", "            ", "img", "=", "self", ".", "aug_dq", ".", "augment_image", "(", "img", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "# blur", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p_motion", ":", "\n", "                ", "img", "=", "self", ".", "aug_motion", ".", "augment_image", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "self", ".", "aug_gauss", ".", "augment_image", "(", "img", ")", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.data.data_utils.curve": [[56, 81], ["background.astype.astype", "numpy.tile", "int", "range", "int", "numpy.array", "range", "img[].astype", "int", "numpy.array", "numpy.dot", "int", "int", "img[].astype", "img[].astype", "img[].astype"], "function", ["None"], ["", "", "def", "curve", "(", "img", ",", "r", "=", "1.", ",", "direction", "=", "0", ")", ":", "\n", "# r: the degree of curve", "\n", "# direction = 0: middle up edge down; 1: middle down edge up", "\n", "\n", "    ", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "background", "=", "(", "img", "[", "0", ",", "0", "]", ".", "astype", "(", "np", ".", "int32", ")", "+", "img", "[", "0", ",", "w", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "+", "img", "[", "h", "-", "1", ",", "0", "]", ".", "astype", "(", "np", ".", "int32", ")", "+", "img", "[", "h", "-", "1", ",", "w", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", ")", "/", "4", "\n", "background", "=", "background", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "dst", "=", "np", ".", "tile", "(", "background", ",", "(", "int", "(", "h", "*", "(", "1", "+", "r", ")", ")", ",", "w", ",", "1", ")", ")", "\n", "shift", "=", "int", "(", "h", "*", "r", "/", "2", "-", "1e-9", ")", "# avoid h*r/2 is int", "\n", "\n", "for", "j", "in", "range", "(", "w", ")", ":", "\n", "        ", "delta_x", "=", "0.5", "-", "4", "*", "(", "j", "-", "(", "w", "-", "1", ")", "/", "2", ")", "**", "2", "/", "(", "w", "-", "1", ")", "**", "2", "\n", "delta_x", "=", "int", "(", "delta_x", "*", "r", "*", "h", ")", "\n", "if", "direction", "==", "0", ":", "\n", "            ", "delta_x", "=", "-", "delta_x", "\n", "", "transform", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "delta_x", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "h", ")", ":", "\n", "            ", "src_pos", "=", "np", ".", "array", "(", "[", "i", ",", "j", ",", "1", "]", ")", "\n", "[", "x", ",", "y", ",", "_", "]", "=", "np", ".", "dot", "(", "transform", ",", "src_pos", ")", "\n", "x", "=", "int", "(", "x", ")", "\n", "y", "=", "int", "(", "y", ")", "\n", "dst", "[", "x", "+", "shift", "]", "[", "y", "]", "=", "img", "[", "i", "]", "[", "j", "]", "\n", "\n", "", "", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.data.data_utils.rand_curve": [[83, 90], ["random.uniform", "data_utils.curve", "random.random"], "function", ["home.repos.pwc.inspect_result.RuijieJ_pren.data.data_utils.curve"], ["", "def", "rand_curve", "(", "img", ",", "text_len", ",", "min_text_len", "=", "4", ")", ":", "\n", "    ", "if", "text_len", "<", "min_text_len", ":", "# only for text length >= min_text_len", "\n", "        ", "return", "img", "\n", "\n", "", "r", "=", "random", ".", "uniform", "(", "0.2", ",", "1.2", ")", "\n", "dir", "=", "0", "if", "random", ".", "random", "(", ")", "<", "0.5", "else", "1", "\n", "return", "curve", "(", "img", ",", "r", ",", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.data.dataset.listDataset.__init__": [[10, 32], ["open", "fp.readlines", "len", "data.data_utils.Augmenter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgdir", "=", "None", ",", "list_file", "=", "None", ",", "transform", "=", "None", ",", "inTrain", "=", "False", ",", "p_aug", "=", "0", ",", "vert_test", "=", "False", ")", ":", "\n", "        ", "'''\n        :param imgdir: path to root directory\n        :param list_file: path to ground truth file\n        :param transform: torchvison transforms object\n        :param inTrain: True for training stage and False otherwise\n        :param p_aug: probability of data augmentation\n        '''", "\n", "\n", "self", ".", "list_file", "=", "list_file", "\n", "with", "open", "(", "list_file", ")", "as", "fp", ":", "\n", "            ", "self", ".", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "self", ".", "nSamples", "=", "len", "(", "self", ".", "lines", ")", "\n", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "imgdir", "=", "imgdir", "\n", "self", ".", "inTrain", "=", "inTrain", "\n", "self", ".", "p_aug", "=", "p_aug", "\n", "self", ".", "vert_test", "=", "vert_test", "\n", "\n", "if", "inTrain", ":", "\n", "            ", "self", ".", "aug", "=", "Augmenter", "(", "p", "=", "self", ".", "p_aug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.data.dataset.listDataset.__len__": [[33, 35], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.data.dataset.listDataset.__getitem__": [[36, 85], ["dataset.listDataset.lines[].split", "os.path.join", "cv2.imread", "label.lower.lower.lower", "dataset.listDataset.transform", "dataset.listDataset.sub_().div_", "len", "min", "dataset.listDataset.aug.apply", "cv2.rotate", "cv2.rotate", "dataset.listDataset.transform", "dataset.listDataset.transform", "dataset.listDataset.sub_().div_", "dataset.listDataset.sub_().div_", "len", "len", "dataset.listDataset.sub_", "dataset.listDataset.sub_", "dataset.listDataset.sub_"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.None.recog.imread", "home.repos.pwc.inspect_result.RuijieJ_pren.data.data_utils.Augmenter.apply"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "\n", "# -- get image", "\n", "line_splits", "=", "self", ".", "lines", "[", "index", "]", ".", "split", "(", ")", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "imgdir", ",", "line_splits", "[", "0", "]", ")", "\n", "\n", "img", "=", "cv2", ".", "imread", "(", "imgpath", ")", "\n", "\n", "# ignore invalid images", "\n", "if", "img", "is", "None", ":", "\n", "#print('Invalid image {}, use next one.'.format(imgpath))", "\n", "            ", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "# ignore too small images", "\n", "", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "if", "min", "(", "h", ",", "w", ")", "<=", "5", ":", "\n", "# print('Too small image {}, use next one.'.format(imgpath))", "\n", "            ", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "# -- get text label", "\n", "", "label", "=", "' '", ".", "join", "(", "line_splits", "[", "1", ":", "]", ")", "\n", "label", "=", "label", ".", "lower", "(", ")", "\n", "\n", "# ignore too long texts in training stage", "\n", "if", "len", "(", "label", ")", ">=", "25", "and", "self", ".", "inTrain", ":", "\n", "# print('Too long text: {}, use next one.'.format(imgpath))", "\n", "            ", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "# -- data preprocess", "\n", "", "if", "self", ".", "inTrain", ":", "\n", "            ", "img", "=", "self", ".", "aug", ".", "apply", "(", "img", ",", "len", "(", "label", ")", ")", "\n", "\n", "", "x", "=", "self", ".", "transform", "(", "img", ")", "\n", "x", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "# normalize to [-1, 1)", "\n", "\n", "# for vertical test samples, return rotated versions", "\n", "x_clock", ",", "x_counter", "=", "0", ",", "0", "\n", "is_vert", "=", "False", "\n", "if", "self", ".", "vert_test", "and", "not", "self", ".", "inTrain", "and", "h", ">", "w", ":", "\n", "            ", "is_vert", "=", "True", "\n", "img_clock", "=", "cv2", ".", "rotate", "(", "img", ",", "cv2", ".", "ROTATE_90_CLOCKWISE", ")", "\n", "img_counter", "=", "cv2", ".", "rotate", "(", "img", ",", "cv2", ".", "ROTATE_90_COUNTERCLOCKWISE", ")", "\n", "x_clock", "=", "self", ".", "transform", "(", "img_clock", ")", "\n", "x_counter", "=", "self", ".", "transform", "(", "img_counter", ")", "\n", "x_clock", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "x_counter", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "\n", "", "return", "(", "x", ",", "label", ",", "x_clock", ",", "x_counter", ",", "is_vert", ",", "imgpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.data.dataset.TrainLoader": [[87, 106], ["torchvision.Compose", "dataset.listDataset", "torch.utils.data.DataLoader", "torchvision.ToPILImage", "torchvision.ColorJitter", "torchvision.Resize", "torchvision.ToTensor"], "function", ["None"], ["", "", "def", "TrainLoader", "(", "configs", ")", ":", "\n", "\n", "    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.3", ",", "0.3", ",", "0.3", ",", "0.3", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "configs", ".", "imgH", ",", "configs", ".", "imgW", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "\n", "dataset", "=", "listDataset", "(", "imgdir", "=", "configs", ".", "image_dir", ",", "\n", "list_file", "=", "configs", ".", "train_list", ",", "\n", "transform", "=", "transform", ",", "\n", "inTrain", "=", "True", ",", "\n", "p_aug", "=", "configs", ".", "aug_prob", ")", "\n", "\n", "return", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "configs", ".", "batchsize", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "configs", ".", "workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.data.dataset.TestLoader": [[108, 126], ["torchvision.Compose", "dataset.listDataset", "torch.utils.data.DataLoader", "torchvision.ToPILImage", "torchvision.Resize", "torchvision.ToTensor"], "function", ["None"], ["", "def", "TestLoader", "(", "configs", ")", ":", "\n", "\n", "    ", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "configs", ".", "imgH", ",", "configs", ".", "imgW", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "\n", "dataset", "=", "listDataset", "(", "imgdir", "=", "configs", ".", "image_dir", ",", "\n", "list_file", "=", "configs", ".", "val_list", ",", "\n", "transform", "=", "transform", ",", "\n", "inTrain", "=", "False", ",", "\n", "vert_test", "=", "configs", ".", "vert_test", ")", "\n", "\n", "return", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "configs", ".", "batchsize", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "configs", ".", "workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.strLabelConverter.__init__": [[11, 24], ["enumerate", "list", "utils.strLabelConverter.dict.keys"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphabet", ",", "maxT", "=", "25", ")", ":", "\n", "        ", "self", ".", "alphabet", "=", "alphabet", "\n", "self", ".", "maxT", "=", "maxT", "\n", "\n", "self", ".", "dict", "=", "{", "}", "\n", "\n", "self", ".", "dict", "[", "'<pad>'", "]", "=", "0", "# pad", "\n", "self", ".", "dict", "[", "'<eos>'", "]", "=", "1", "# EOS", "\n", "self", ".", "dict", "[", "'<unk>'", "]", "=", "2", "# OOV", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "self", ".", "alphabet", ")", ":", "\n", "            ", "self", ".", "dict", "[", "item", "]", "=", "i", "+", "3", "# encoding from 3 for characters in alphabet", "\n", "\n", "", "self", ".", "chars", "=", "list", "(", "self", ".", "dict", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.strLabelConverter.encode": [[25, 51], ["len", "range", "targets.long", "tars.append", "torch.ones", "torch.LongTensor", "utils.strLabelConverter.dict.keys", "tar.append", "tar.append", "len", "len"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            text (list of str): texts to convert.\n        Returns:\n            torch.IntTensor targets: [b, L]\n        \"\"\"", "\n", "\n", "tars", "=", "[", "]", "\n", "for", "s", "in", "text", ":", "\n", "            ", "tar", "=", "[", "]", "\n", "for", "c", "in", "s", ":", "\n", "                ", "if", "c", "in", "self", ".", "dict", ".", "keys", "(", ")", ":", "\n", "                    ", "tar", ".", "append", "(", "self", ".", "dict", "[", "c", "]", ")", "\n", "", "else", ":", "\n", "                    ", "tar", ".", "append", "(", "self", ".", "dict", "[", "'<unk>'", "]", ")", "\n", "", "", "tars", ".", "append", "(", "torch", ".", "LongTensor", "(", "tar", ")", ")", "\n", "\n", "", "b", "=", "len", "(", "tars", ")", "\n", "targets", "=", "self", ".", "dict", "[", "'<pad>'", "]", "*", "torch", ".", "ones", "(", "b", ",", "self", ".", "maxT", ")", "\n", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "            ", "targets", "[", "i", "]", "[", ":", "len", "(", "tars", "[", "i", "]", ")", "]", "=", "tars", "[", "i", "]", "\n", "targets", "[", "i", "]", "[", "len", "(", "tars", "[", "i", "]", ")", "]", "=", "self", ".", "dict", "[", "'<eos>'", "]", "\n", "\n", "", "return", "targets", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.strLabelConverter.decode": [[52, 55], ["None"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "t", ")", ":", "\n", "        ", "texts", "=", "[", "self", ".", "chars", "[", "i", "]", "for", "i", "in", "t", "]", "\n", "return", "''", ".", "join", "(", "texts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.__init__": [[61, 66], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "init_lr", ",", "milestones", ",", "gammas", ")", ":", "\n", "        ", "self", ".", "_optimizer", "=", "optimizer", "\n", "self", ".", "lr", "=", "init_lr", "\n", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gammas", "=", "gammas", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.step": [[67, 70], ["utils.ScheduledOptim._optimizer.step"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.step"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "\"Step with the inner optimizer\"", "\n", "self", ".", "_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.zero_grad": [[71, 74], ["utils.ScheduledOptim._optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "\"Zero out the gradients by the inner optimizer\"", "\n", "self", ".", "_optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RuijieJ_pren.Utils.utils.ScheduledOptim.update_lr": [[75, 82], ["utils.ScheduledOptim.milestones.index"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "''' Learning rate scheduling per step '''", "\n", "if", "epoch", "in", "self", ".", "milestones", ":", "\n", "            ", "self", ".", "lr", "*=", "self", ".", "gammas", "[", "self", ".", "milestones", ".", "index", "(", "epoch", ")", "]", "\n", "\n", "", "for", "param_group", "in", "self", ".", "_optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "self", ".", "lr", "\n", "", "", "", ""]]}